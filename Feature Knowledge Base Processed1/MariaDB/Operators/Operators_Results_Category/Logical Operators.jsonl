{"HTML": ["https://mariadb.com//kb/en/not/"], "Title": ["!"], "Feature": ["NOT, !\n"], "Description": ["Logical NOT. Evaluates to 1 if the operand is 0, to 0 if the operand\nis non-zero, and NOT NULL returns NULL.", "By default, the ! operator has a higher precedence. If the HIGH_NOT_PRECEDENCE SQL_MODE flag is set, NOT and ! have the same precedence."], "Examples": ["SELECT NOT 10;", "SELECT NOT 0;", "SELECT NOT NULL;", "SELECT ! (1+1);", "SELECT ! 1+1;"], "Category": ["Logical Operators"]}
{"HTML": ["https://mariadb.com//kb/en/and/"], "Title": ["&&"], "Feature": ["AND, &&\n"], "Description": ["Logical AND. Evaluates to 1 if all operands are non-zero and not NULL,\nto 0 if one or more operands are 0, otherwise NULL is returned.", "For this operator, short-circuit evaluation can be used."], "Examples": ["SELECT 1 && 1;", "SELECT 1 && 0;", "SELECT 1 && NULL;", "SELECT 0 && NULL;", "SELECT NULL && 0;"], "Category": ["Logical Operators"]}
{"HTML": ["https://mariadb.com//kb/en/xor/"], "Title": ["XOR"], "Feature": ["XOR\n"], "Description": ["XOR stands for eXclusive OR. Returns NULL if either operand is NULL. For non-NULL\noperands, evaluates to 1 if an odd number of operands is non-zero,\notherwise 0 is returned."], "Examples": ["SELECT 1 XOR 1;", "SELECT 1 XOR 0;", "SELECT 1 XOR NULL;", "SELECT 1 XOR 1 XOR 1;"], "Category": ["Logical Operators"]}
{"HTML": ["https://mariadb.com//kb/en/or/"], "Title": ["||"], "Feature": ["OR, ||\n"], "Description": ["Logical OR. When both operands are non-NULL, the result is 1 if any\noperand is non-zero, and 0 otherwise. With a NULL operand, the result\nis 1 if the other operand is non-zero, and NULL otherwise. If both\noperands are NULL, the result is NULL.", "For this operator, short-circuit evaluation can be used.", "Note that, if the PIPES_AS_CONCAT SQL_MODE is set, || is used as a string concatenation operator. This means that a || b is the same as CONCAT(a,b). See CONCAT() for details.", "Oracle Mode", "MariaDB starting with 10.3In Oracle mode from MariaDB 10.3, || ignores NULL.\n"], "Examples": ["SELECT 1 || 1;", "SELECT 1 || 0;", "SELECT 0 || 0;", "SELECT 0 || NULL;", "SELECT 1 || NULL;", "SELECT 0 || NULL;"], "Category": ["Logical Operators"]}
{"HTML": ["https://mariadb.com//kb/en/not/"], "Title": ["!"], "Feature": ["NOT, !\n"], "Description": ["Logical NOT. Evaluates to 1 if the operand is 0, to 0 if the operand\nis non-zero, and NOT NULL returns NULL.", "By default, the ! operator has a higher precedence. If the HIGH_NOT_PRECEDENCE SQL_MODE flag is set, NOT and ! have the same precedence."], "Examples": ["SELECT NOT 10;", "SELECT NOT 0;", "SELECT NOT NULL;", "SELECT ! (1+1);", "SELECT ! 1+1;"], "Category": ["Logical Operators"]}
{"HTML": ["https://mariadb.com//kb/en/and/"], "Title": ["&&"], "Feature": ["AND, &&\n"], "Description": ["Logical AND. Evaluates to 1 if all operands are non-zero and not NULL,\nto 0 if one or more operands are 0, otherwise NULL is returned.", "For this operator, short-circuit evaluation can be used."], "Examples": ["SELECT 1 && 1;", "SELECT 1 && 0;", "SELECT 1 && NULL;", "SELECT 0 && NULL;", "SELECT NULL && 0;"], "Category": ["Logical Operators"]}
{"HTML": ["https://mariadb.com//kb/en/xor/"], "Title": ["XOR"], "Feature": ["XOR\n"], "Description": ["XOR stands for eXclusive OR. Returns NULL if either operand is NULL. For non-NULL\noperands, evaluates to 1 if an odd number of operands is non-zero,\notherwise 0 is returned."], "Examples": ["SELECT 1 XOR 1;", "SELECT 1 XOR 0;", "SELECT 1 XOR NULL;", "SELECT 1 XOR 1 XOR 1;"], "Category": ["Logical Operators"]}
{"HTML": ["https://mariadb.com//kb/en/or/"], "Title": ["||"], "Feature": ["OR, ||\n"], "Description": ["Logical OR. When both operands are non-NULL, the result is 1 if any\noperand is non-zero, and 0 otherwise. With a NULL operand, the result\nis 1 if the other operand is non-zero, and NULL otherwise. If both\noperands are NULL, the result is NULL.", "For this operator, short-circuit evaluation can be used.", "Note that, if the PIPES_AS_CONCAT SQL_MODE is set, || is used as a string concatenation operator. This means that a || b is the same as CONCAT(a,b). See CONCAT() for details.", "Oracle Mode", "MariaDB starting with 10.3In Oracle mode from MariaDB 10.3, || ignores NULL.\n"], "Examples": ["SELECT 1 || 1;", "SELECT 1 || 0;", "SELECT 0 || 0;", "SELECT 0 || NULL;", "SELECT 1 || NULL;", "SELECT 0 || NULL;"], "Category": ["Logical Operators"]}
