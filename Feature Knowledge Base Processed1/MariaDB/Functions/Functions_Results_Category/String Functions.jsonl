{"HTML": ["https://mariadb.com//kb/en/from_base64/"], "Title": ["FROM_BASE64"], "Feature": ["FROM_BASE64(str)\n"], "Description": ["Decodes the given base-64 encode string, returning the result as a binary string.  Returns NULL if the given string is NULL or if it's invalid.", "It is the reverse of the TO_BASE64 function.", "There are numerous methods to base-64 encode a string.  MariaDB uses the following:", "It encodes alphabet value 64 as '+'.\nIt encodes alphabet value 63 as '/'.\nIt codes output in groups of four printable characters.  Each three byte of data encoded uses four characters.  If the final group is incomplete, it pads the difference with the '=' character.\nIt divides long output, adding a new line very 76 characters.\nIn decoding, it recognizes and ignores newlines, carriage returns, tabs and space whitespace characters.\n", "SELECT TO_BASE64('Maria') AS 'Input';\n+-----------+\n| Input     |\n+-----------+\n| TWFyaWE=  |\n+-----------+\n\nSELECT FROM_BASE64('TWFyaWE=') AS 'Output';\n+--------+\n| Output |\n+--------+\n| Maria  |\n+--------+\n"], "Examples": ["SELECT FROM_BASE64('TWFyaWE=') AS 'Output';"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/hex/"], "Title": ["HEX"], "Feature": ["HEX(N_or_S)\n"], "Description": ["If N_or_S is a number, returns a string representation of the hexadecimal\nvalue of N, where N is a longlong (BIGINT) number. This is equivalent to CONV(N,10,16).", "If N_or_S is a string, returns a hexadecimal string representation of\nN_or_S where each byte of each character in N_or_S is converted to two hexadecimal\ndigits. If N_or_S is NULL, returns NULL. The inverse of this operation is performed by the UNHEX()\nfunction.", "MariaDB starting with 10.5.0HEX() with an INET6 argument returns a hexadecimal representation of the underlying 16-byte binary string.\n"], "Examples": ["SELECT HEX(255);", "SELECT HEX('MariaDB');", "SELECT HEX(CAST('2001:db8::ff00:42:8329' AS INET6));"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/insert-function/"], "Title": ["INSERT Function"], "Feature": ["INSERT(str,pos,len,newstr)\n"], "Description": ["Returns the string str, with the substring beginning at position pos\nand len characters long replaced by the string newstr. Returns the\noriginal string if pos is not within the length of the string.\nReplaces the rest of the string from position pos if len is not within\nthe length of the rest of the string. Returns NULL if any argument is\nNULL."], "Examples": ["SELECT INSERT('Quadratic', 3, 4, 'What');"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/instr/"], "Title": ["INSTR"], "Feature": ["INSTR(str,substr)\n"], "Description": ["Returns the position of the first occurrence of substring substr in\nstring str. This is the same as the two-argument form of LOCATE(),\nexcept that the order of the arguments is reversed.", "INSTR() performs a case-insensitive search.", "If any argument is NULL, returns NULL."], "Examples": ["SELECT INSTR('foobarbar', 'bar');", "SELECT INSTR('My', 'Maria');"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/bin/"], "Title": ["BIN"], "Feature": ["BIN(N)\n"], "Description": ["Returns a string representation of the binary value of the given longlong (that is, BIGINT) number. This is equivalent to CONV(N,10,2). The argument should be positive. If it is a FLOAT, it will be truncated. Returns NULL if the argument is NULL."], "Examples": ["SELECT BIN(12);"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/binary-operator/"], "Title": ["BINARY Operator"], "Feature": ["BINARY\n"], "Description": ["The BINARY operator casts the string following it to a binary string.  This is an easy way to force a column comparison to be done byte by byte rather than character by character. This causes the comparison to be case sensitive even if the column isn't defined as BINARY or BLOB.  ", "BINARY also causes trailing spaces to be significant."], "Examples": ["SELECT BINARY 'a' = 'A';", "SELECT BINARY 'a' = 'a ';"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/lcase/"], "Title": ["LCASE"], "Feature": ["LCASE(str)\n"], "Description": ["LCASE() is a synonym for LOWER()."], "Examples": ["SELECT LCASE('HELLO WORLD');"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/left/"], "Title": ["LEFT"], "Feature": ["LEFT(str,len)\n"], "Description": ["Returns the leftmost len characters from the string str, or NULL if\nany argument is NULL."], "Examples": ["SELECT LEFT('MariaDB', 5);"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/length/"], "Title": ["LENGTH"], "Feature": ["LENGTH(str)\n"], "Description": ["Returns the length of the string str.", "In the default mode, when Oracle mode from MariaDB 10.3 is not set, the length is measured in bytes. In this case, a multi-byte character counts as multiple bytes. This means that for a string\ncontaining five two-byte characters, LENGTH() returns 10, whereas CHAR_LENGTH() returns 5. ", "When running Oracle mode from MariaDB 10.3, the length is measured in characters, and LENGTH is a synonym for CHAR_LENGTH().", "If str is not a string value, it is converted into a string. If str is NULL, the function returns NULL."], "Examples": ["SELECT LENGTH('MariaDB');", "SELECT CHAR_LENGTH('\u03c0'), LENGTH('\u03c0'), LENGTHB('\u03c0'), OCTET_LENGTH('\u03c0');", "SELECT CHAR_LENGTH('\u03c0'), LENGTH('\u03c0'), LENGTHB('\u03c0'), OCTET_LENGTH('\u03c0');"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/like/"], "Title": ["LIKE"], "Feature": ["expr LIKE pat [ESCAPE 'escape_char']\nexpr NOT LIKE pat [ESCAPE 'escape_char']\n"], "Description": ["Tests whether expr matches the pattern pat. Returns either 1 (TRUE) or 0 (FALSE).\nBoth expr and pat may be any valid expression and are evaluated to strings.\nPatterns may use the following wildcard characters:", "% matches any number of characters, including zero.\n_ matches any single character.\n", "Use NOT LIKE to test if a string does not match a pattern. This is equivalent to using\nthe NOT operator on the entire LIKE expression.", "If either the expression or the pattern is NULL, the result is NULL.", "LIKE performs case-insensitive substring matches if the collation for the\nexpression and pattern is case-insensitive. For case-sensitive matches, declare either argument\nto use a binary collation using COLLATE, or coerce either of them to a BINARY\nstring using CAST. Use SHOW COLLATION to get a list of\navailable collations. Collations ending in _bin are case-sensitive.", "Numeric arguments are coerced to binary strings.", "The _ wildcard matches a single character, not byte. It will only match a multi-byte character\nif it is valid in the expression's character set. For example, _ will match _utf8\"\u20ac\", but it\nwill not match _latin1\"\u20ac\" because the Euro sign is not a valid latin1 character. If necessary,\nuse CONVERT to use the expression in a different character set.", "If you need to match the characters _ or %, you must escape them. By default,\nyou can prefix the wildcard characters the backslash character \\ to escape them.\nThe backslash is used both to encode special characters like newlines when a string is\nparsed as well as to escape wildcards in a pattern after parsing. Thus, to match an\nactual backslash, you sometimes need to double-escape it as \"\\\\\\\\\".", "To avoid difficulties with the backslash character, you can change the wildcard escape\ncharacter using ESCAPE in a LIKE expression. The argument to ESCAPE\nmust be a single-character string."], "Examples": ["SELECT * FROM dialect_recognize_table WHERE dialect_name LIKE 'Canto%';"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/load_file/"], "Title": ["LOAD_FILE"], "Feature": ["LOAD_FILE(file_name)\n"], "Description": ["Reads the file and returns the file contents as a string. To use this function, the file must be located on the server host, you must specify the full path name to the file, and you must have the FILE privilege.  The file must be readable by all and it must be less than the size, in bytes, of the max_allowed_packet system variable. If the secure_file_priv system variable is set to a non-empty directory name, the file to be loaded must be located in that directory.", "If the file does not exist or cannot be read because one of the preceding conditions is not satisfied, the function returns NULL.", "Since MariaDB 5.1, the character_set_filesystem system variable has controlled interpretation of file names that are given as literal strings.", "Statements using the LOAD_FILE() function are not safe for statement based replication. This is because the slave will execute the LOAD_FILE() command itself.  If the file doesn't exist on the slave, the function will return NULL."], "Examples": ["SELECT LOAD_FILE('/path/to/your/file.txt');"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/locate/"], "Title": ["LOCATE"], "Feature": ["LOCATE(substr,str), LOCATE(substr,str,pos)\n"], "Description": ["The first syntax returns the position of the first occurrence of\nsubstring substr in string str. The second syntax returns the position\nof the first occurrence of substring substr in string str, starting at\nposition pos. Returns 0 if substr is not in str.", "LOCATE() performs a case-insensitive search.", "If any argument is NULL, returns NULL.", "INSTR() is the same as the two-argument form of LOCATE(), except that the order of the arguments is reversed."], "Examples": ["SELECT LOCATE('bar', 'foobarbar');", "SELECT LOCATE('My', 'Maria');", "SELECT LOCATE('bar', 'foobarbar', 5);"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/lower/"], "Title": ["LOWER"], "Feature": ["LOWER(str)\nLCASE(str)\n"], "Description": ["Returns the string str with all characters changed to lowercase\naccording to the current character set mapping. The default is latin1\n(cp1252 West European).", "LCASE is a synonym for LOWER"], "Examples": ["SELECT LOWER('QUADRATICALLY');", "SELECT LOWER(@str), LOWER(CONVERT(@str USING latin1));"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/lpad/"], "Title": ["LPAD"], "Feature": ["LPAD(str, len [,padstr])\n"], "Description": ["Returns the string str, left-padded with the string padstr to a length\nof len characters. If str is longer than len, the return value is\nshortened to len characters. If padstr is omitted, the LPAD function pads spaces.", "Prior to MariaDB 10.3.1, the padstr parameter was mandatory.", "Returns NULL if given a NULL argument. If the result is empty (zero length), returns either an empty string or, from MariaDB 10.3.6 with SQL_MODE=Oracle, NULL.", "The Oracle mode version of the function can be accessed outside of Oracle mode by using LPAD_ORACLE as the function name."], "Examples": ["SELECT LPAD('hello',10,'.');", "SELECT LPAD('hello',2,'.');", "SELECT LPAD('hello',10);", "SELECT LPAD('',0),LPAD_ORACLE('',0);"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/bit_length/"], "Title": ["BIT_LENGTH"], "Feature": ["BIT_LENGTH(str)\n"], "Description": ["Returns the length of the given string argument in bits. If the argument is not a string, it will be converted to string. If the argument is NULL, it returns NULL."], "Examples": ["SELECT BIT_LENGTH('text');", "SELECT BIT_LENGTH('');"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/ltrim/"], "Title": ["LTRIM"], "Feature": ["LTRIM(str)\n"], "Description": ["Returns the string str with leading space characters removed.", "Returns NULL if given a NULL argument. If the result is empty, returns either an empty string, or, from MariaDB 10.3.6 with SQL_MODE=Oracle, NULL.", "The Oracle mode version of the function can be accessed outside of Oracle mode by using LTRIM_ORACLE as the function name."], "Examples": ["SELECT QUOTE(LTRIM('   MariaDB   '));", "SELECT LTRIM(''),LTRIM_ORACLE('');"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/make_set/"], "Title": ["MAKE_SET"], "Feature": ["MAKE_SET(bits,str1,str2,...)\n"], "Description": ["Returns a set value (a string containing substrings separated by \",\"\ncharacters) consisting of the strings that have the corresponding bit\nin bits set. str1 corresponds to bit 0, str2 to bit 1, and so on. NULL\nvalues in str1, str2, ... are not appended to the result."], "Examples": ["SELECT MAKE_SET(1,'a','b','c');"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/match-against/"], "Title": ["MATCH AGAINST"], "Feature": ["MATCH (col1,col2,...) AGAINST (expr [search_modifier])\n"], "Description": ["A special construct used to perform a fulltext search on a fulltext index.", "See Fulltext Index Overview for a full description, and Full-text Indexes for more articles on the topic."], "Examples": [], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/mid/"], "Title": ["MID"], "Feature": ["MID(str,pos,len)\n"], "Description": ["MID(str,pos,len) is a synonym for SUBSTRING(str,pos,len)."], "Examples": ["SELECT MID('abcd',4,1);", "SELECT MID('abcd',2,2);", "SELECT MID('abcd',-2,4);"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/natural_sort_key/"], "Title": ["NATURAL_SORT_KEY"], "Feature": ["NATURAL_SORT_KEY(str)\n"], "Description": ["The NATURAL_SORT_KEY function is used for sorting that is closer to natural sorting. Strings are sorted in alphabetical order, while numbers are treated in a way such that, for example, 10 is greater than 2, whereas in other forms of sorting, 2 would be greater than 10, just like z is greater than ya.", "There are multiple natural sort implementations, differing in the way they handle leading zeroes, fractions, i18n, negatives, decimals and so on.", "MariaDB's implementation ignores leading zeroes when performing the sort.", "You can use also use NATURAL_SORT_KEY with generated columns. The value is not stored permanently in the table. When using a generated column, the virtual column must be longer than the base column to cater for embedded numbers in the string and MDEV-24582."], "Examples": ["SELECT NATURAL_SORT_KEY('10 apples, 2 oranges, 1 banana');"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/not-like/"], "Title": ["NOT LIKE"], "Feature": ["expr NOT LIKE pat [ESCAPE 'escape_char']\n"], "Description": ["This is the same as NOT (expr LIKE pat [ESCAPE 'escape_char'])."], "Examples": ["SELECT * FROM dialect_recognize_table WHERE dialect_name NOT LIKE 'M%';"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/not-regexp/"], "Title": ["NOT REGEXP"], "Feature": ["expr NOT REGEXP pat, expr NOT RLIKE pat\n"], "Description": ["This is the same as NOT (expr REGEXP pat)."], "Examples": ["SELECT * FROM dialect_recognize_table WHERE dialect_name NOT REGEXP 'English';"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/cast/"], "Title": ["CAST"], "Feature": ["CAST(expr AS type)\n"], "Description": ["The CAST() function takes a value of one type and produces a value of another type, similar to the CONVERT() function. ", "The type can be one of the following values:", "BINARY\nCHAR\nDATE\nDATETIME\nDECIMAL[(M[,D])]\nDOUBLE\nFLOAT (from MariaDB 10.4.5)\nINTEGER\nShort for SIGNED INTEGER\n\nSIGNED [INTEGER]\nUNSIGNED [INTEGER]\nTIME\nVARCHAR (in Oracle mode, from MariaDB 10.3)\n", "The main difference between CAST and CONVERT() is that CONVERT(expr,type) is ODBC syntax while CAST(expr as type) and CONVERT(... USING ...) are SQL92 syntax.", "In MariaDB 10.4 and later, you can use the CAST() function with the INTERVAL keyword.", "Until MariaDB 5.5.31, X'HHHH', the standard SQL syntax for binary string literals, erroneously worked in the same way as 0xHHHH. In 5.5.31 it was intentionally changed to behave as a string in all contexts (and never as a number).", "This introduced an incompatibility with previous versions of MariaDB, and all versions of MySQL (see the example below). "], "Examples": ["SELECT CAST(\"abc\" AS BINARY);", "SELECT CAST(\"1\" AS UNSIGNED INTEGER);", "SELECT COLLATION(CAST(123 AS CHAR));", "SELECT COLLATION(CAST(123 AS CHAR CHARACTER SET utf8));", "SELECT COLLATION(CAST(123 AS CHAR CHARACTER SET utf8) \n  COLLATE utf8_unicode_ci);", "SELECT CAST(0xAA AS UNSIGNED), CAST(x'aa' AS UNSIGNED), CAST(X'aa' AS UNSIGNED);"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/octet_length/"], "Title": ["OCTET_LENGTH"], "Feature": ["OCTET_LENGTH(str)\n"], "Description": ["OCTET_LENGTH() returns the length of the given string, in octets (bytes). This is a synonym for LENGTHB(), and, when Oracle mode from MariaDB 10.3 is not set, a synonym for LENGTH().", "A multi-byte character counts as multiple bytes. This means that for a string containing five two-byte characters, OCTET_LENGTH() returns 10, whereas CHAR_LENGTH() returns 5.", "If str is not a string value, it is converted into a string. If str is NULL, the function returns NULL."], "Examples": ["SELECT CHAR_LENGTH('\u03c0'), LENGTH('\u03c0'), LENGTHB('\u03c0'), OCTET_LENGTH('\u03c0');", "SELECT CHAR_LENGTH('\u03c0'), LENGTH('\u03c0'), LENGTHB('\u03c0'), OCTET_LENGTH('\u03c0');"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/ord/"], "Title": ["ORD"], "Feature": ["ORD(str)\n"], "Description": ["If the leftmost character of the string str is a multi-byte character,\nreturns the code for that character, calculated from the numeric\nvalues of its constituent bytes using this formula:", "  (1st byte code)\n+ (2nd byte code x 256)\n+ (3rd byte code x 256 x 256) ...\n", "If the leftmost character is not a multi-byte character, ORD() returns\nthe same value as the ASCII() function."], "Examples": ["SELECT ORD('2');"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/position/"], "Title": ["POSITION"], "Feature": ["POSITION(substr IN str)\n"], "Description": ["POSITION(substr IN str) is a synonym for LOCATE(substr,str).", "It's part of ODBC 3.0."], "Examples": ["SELECT POSITION('abc' IN 'abcdef')"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/quote/"], "Title": ["QUOTE"], "Feature": ["QUOTE(str)\n"], "Description": ["Quotes a string to produce a result that can be used as a properly escaped data\nvalue in an SQL statement. The string is returned enclosed by single quotes and\nwith each instance of single quote (\"'\"), backslash (\"\\\"),\nASCII NUL, and Control-Z preceded by a backslash. If the argument\nis NULL, the return value is the word \"NULL\" without enclosing single\nquotes."], "Examples": ["SELECT QUOTE(\"Don't!\");", "SELECT QUOTE(NULL);"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/char-function/"], "Title": ["CHAR Function"], "Feature": ["CHAR(N,... [USING charset_name])\n"], "Description": ["CHAR() interprets each argument as an INT and returns a string consisting of the characters given by the code values of those integers. NULL values are skipped.  By default, CHAR() returns a binary string. To produce a string in a given character set, use the optional USING clause:", "SELECT CHARSET(CHAR(0x65)), CHARSET(CHAR(0x65 USING utf8));\n+---------------------+--------------------------------+\n| CHARSET(CHAR(0x65)) | CHARSET(CHAR(0x65 USING utf8)) |\n+---------------------+--------------------------------+\n| binary              | utf8                           |\n+---------------------+--------------------------------+\n", "If USING is given and the result string is illegal for the given character set, a warning is issued. Also, if strict SQL mode is enabled, the result from CHAR() becomes NULL."], "Examples": ["SELECT CHAR(77,97,114,'105',97,'68',66);", "SELECT CHAR(77,77.3,'77.3');"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/repeat-function/"], "Title": ["REPEAT Function"], "Feature": ["REPEAT(str,count)\n"], "Description": ["Returns a string consisting of the string str repeated count times. If\ncount is less than 1, returns an empty string. Returns NULL if str or\ncount are NULL."], "Examples": ["SELECT QUOTE(REPEAT('MariaDB ',4));"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/replace-function/"], "Title": ["REPLACE Function"], "Feature": ["REPLACE(str,from_str,to_str)\n"], "Description": ["Returns the string str with all occurrences of the string from_str\nreplaced by the string to_str. REPLACE() performs a case-sensitive\nmatch when searching for from_str."], "Examples": ["SELECT REPLACE('www.mariadb.org', 'w', 'Ww');"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/reverse/"], "Title": ["REVERSE"], "Feature": ["REVERSE(str)\n"], "Description": ["Returns the string str with the order of the characters reversed."], "Examples": ["SELECT REVERSE('desserts');"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/right/"], "Title": ["RIGHT"], "Feature": ["RIGHT(str,len)\n"], "Description": ["Returns the rightmost len characters from the string str, or NULL if\nany argument is NULL."], "Examples": ["SELECT RIGHT('MariaDB', 2);"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/character_length/"], "Title": ["CHARACTER_LENGTH"], "Feature": ["CHARACTER_LENGTH(str)\n"], "Description": ["CHARACTER_LENGTH() is a synonym for CHAR_LENGTH()."], "Examples": ["SELECT CHARACTER_LENGTH('Hello, World!');"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/rpad/"], "Title": ["RPAD"], "Feature": ["RPAD(str, len [, padstr])\n"], "Description": ["Returns the string str, right-padded with the string padstr to a\nlength of len characters. If str is longer than len, the return value\nis shortened to len characters. If padstr is omitted, the RPAD function pads spaces.", "Prior to MariaDB 10.3.1, the padstr parameter was mandatory.", "Returns NULL if given a NULL argument. If the result is empty (a length of zero), returns either an empty string, or, from MariaDB 10.3.6 with SQL_MODE=Oracle, NULL.", "The Oracle mode version of the function can be accessed outside of Oracle mode by using RPAD_ORACLE as the function name."], "Examples": ["SELECT RPAD('hello',10,'.');", "SELECT RPAD('hello',2,'.');", "SELECT RPAD('hello',30);", "SELECT RPAD('',0),RPAD_ORACLE('',0);"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/rtrim/"], "Title": ["RTRIM"], "Feature": ["RTRIM(str)\n"], "Description": ["Returns the string str with trailing space characters removed.", "Returns NULL if given a NULL argument. If the result is empty, returns either an empty string, or, from MariaDB 10.3.6 with SQL_MODE=Oracle, NULL.", "The Oracle mode version of the function can be accessed outside of Oracle mode by using RTRIM_ORACLE as the function name."], "Examples": ["SELECT QUOTE(RTRIM('MariaDB    '));", "SELECT RTRIM(''),RTRIM_ORACLE('');"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/soundex/"], "Title": ["SOUNDEX"], "Feature": ["SOUNDEX(str)\n"], "Description": ["Returns a soundex string from str. Two strings that sound almost the\nsame should have identical soundex strings. A standard soundex string is four\ncharacters long, but the SOUNDEX() function returns an arbitrarily long\nstring. You can use SUBSTRING() on the result to get a standard soundex\nstring. All non-alphabetic characters in str are ignored. All\ninternational alphabetic characters outside the A-Z range are treated as\nvowels.", "Important: When using SOUNDEX(), you should be aware of the\nfollowing details:", "This function, as currently implemented, is intended to work well with\n  strings that are in the English language only. Strings in other languages may\n  not produce reasonable results.\n", "This function implements the original Soundex algorithm, not the more popular enhanced version (also described by D. Knuth). The difference is that original version discards vowels first and duplicates second, whereas the enhanced version discards duplicates first and vowels second. \n"], "Examples": ["SELECT SOUNDEX('MariaDB');", "SELECT SOUNDEX('Knowledgebase');"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/sounds-like/"], "Title": ["SOUNDS LIKE"], "Feature": ["expr1 SOUNDS LIKE expr2\n"], "Description": ["This is the same as SOUNDEX(expr1) = SOUNDEX(expr2)."], "Examples": ["SELECT * FROM information_schema.tables WHERE table_name SOUNDS LIKE 'example';"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/space/"], "Title": ["SPACE"], "Feature": ["SPACE(N)\n"], "Description": ["Returns a string consisting of N space characters. If N is NULL, returns NULL."], "Examples": ["SELECT QUOTE(SPACE(6));"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/char_length/"], "Title": ["CHAR_LENGTH"], "Feature": ["CHAR_LENGTH(str)\nCHARACTER_LENGTH(str)\n"], "Description": ["Returns the length of the given string argument, measured in characters. A multi-byte character counts as a single character. This means that for a string containing five two-byte characters, LENGTH() (or OCTET_LENGTH() in Oracle mode) returns 10, whereas CHAR_LENGTH() returns 5. If the argument is NULL, it returns NULL. ", "If the argument is not a string value, it is converted into a string.", "It is synonymous with the CHARACTER_LENGTH() function."], "Examples": ["SELECT CHAR_LENGTH('MariaDB');", "SELECT CHAR_LENGTH('\u03c0'), LENGTH('\u03c0'), LENGTHB('\u03c0'), OCTET_LENGTH('\u03c0');", "SELECT CHAR_LENGTH('\u03c0'), LENGTH('\u03c0'), LENGTHB('\u03c0'), OCTET_LENGTH('\u03c0');"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/strcmp/"], "Title": ["STRCMP"], "Feature": ["STRCMP(expr1,expr2)\n"], "Description": ["STRCMP() returns 0 if the strings are the same, -1 if the first\nargument is smaller than the second according to the current sort order,\nand 1 if the strings are otherwise not the same. Returns NULL is either argument is NULL."], "Examples": ["SELECT STRCMP('text', 'text2');", "SELECT STRCMP('text2', 'text');", "SELECT STRCMP('text', 'text');"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/chr/"], "Title": ["CHR"], "Feature": ["CHR(N)\n"], "Description": ["CHR() interprets each argument N as an integer and returns a VARCHAR(1) string consisting of the character given by the code values of the integer. The character set and collation of the string are set according to the values of the character_set_database and collation_database system variables.", "CHR() is similar to the CHAR() function, but only accepts a single argument.", "CHR() is available in all sql_modes."], "Examples": ["SELECT CHR(67);", "SELECT CHR('67');", "SELECT CHR('C');"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/substring/"], "Title": ["SUBSTRING"], "Feature": ["SUBSTRING(str,pos), \nSUBSTRING(str FROM pos), \nSUBSTRING(str,pos,len),\nSUBSTRING(str FROM pos FOR len)\n\nSUBSTR(str,pos), \nSUBSTR(str FROM pos), \nSUBSTR(str,pos,len),\nSUBSTR(str FROM pos FOR len)\n"], "Description": ["The forms without a len argument return a substring from string str starting at position pos.", "The forms with a len argument return a substring len characters long from string str, starting at position pos.", "The forms that use FROM are standard SQL syntax.", "It is also possible to use a negative value for pos. In this case, the beginning of the substring is pos characters from the end of the string, rather than the beginning. A negative value may be used for pos in any of the forms of this function.", "By default, the position of the first character in the string from which the substring is to be extracted is reckoned as 1. For Oracle-compatibility, from MariaDB 10.3.3, when sql_mode is set to 'oracle', position zero is treated as position 1 (although the first character is still reckoned as 1).", "If any argument is NULL, returns NULL."], "Examples": ["SELECT SUBSTRING('Knowledgebase',5);", "SELECT SUBSTRING('MariaDB' FROM 6);", "SELECT SUBSTRING('Knowledgebase',3,7);", "SELECT SUBSTRING('Knowledgebase', -4);", "SELECT SUBSTRING('Knowledgebase', -8, 4);", "SELECT SUBSTRING('Knowledgebase' FROM -8 FOR 4);"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/substring_index/"], "Title": ["SUBSTRING_INDEX"], "Feature": ["SUBSTRING_INDEX(str,delim,count)\n"], "Description": ["Returns the substring from string str before count occurrences of the\ndelimiter delim. If count is positive, everything to the left\nof the final delimiter (counting from the left) is returned. If count\nis negative, everything to the right of the final delimiter (counting from the\nright) is returned. SUBSTRING_INDEX() performs a case-sensitive match when\nsearching for delim.", "If any argument is NULL, returns NULL.", "For example", "SUBSTRING_INDEX('www.mariadb.org', '.', 2)\n", "means \"Return all of the characters up to the 2nd occurrence of .\""], "Examples": ["SELECT SUBSTRING_INDEX('www.mariadb.org', '.', 2);", "SELECT SUBSTRING_INDEX('www.mariadb.org', '.', -2);"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/to_base64/"], "Title": ["TO_BASE64"], "Feature": ["TO_BASE64(str)\n"], "Description": ["Converts the string argument str to its base-64 encoded form, returning the result as a character string in the connection character set and collation.", "The argument str will be converted to string first if it is not a string. A NULL argument will return a NULL result.", "The reverse function, FROM_BASE64(), decodes an encoded base-64 string.", "There are a numerous different methods to base-64 encode a string. The following are used by MariaDB and MySQL:", "Alphabet value 64 is encoded as '+'.\nAlphabet value 63 is encoded as '/'.\nEncoding output is made up of groups of four printable characters, with each three bytes of data encoded using four characters. If the final group is not complete, it is padded with '=' characters to make up a length of four.\nTo divide long output, a newline is added after every 76 characters.\nDecoding will recognize and ignore newlines, carriage returns, tabs, and spaces. \n"], "Examples": ["SELECT TO_BASE64('Maria');"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/to_char/"], "Title": ["TO_CHAR"], "Feature": ["TO_CHAR(expr[, fmt])\n"], "Description": ["The TO_CHAR function converts an expr of type date, datetime, time or timestamp to a string. The optional fmt argument supports YYYY/YYY/YY/RRRR/RR/MM/MON/MONTH/MI/DD/DY/HH/HH12/HH24/SS and special characters. The default value is \"YYYY-MM-DD HH24:MI:SS\".", "In Oracle, TO_CHAR can also be used to convert numbers to strings, but this is not supported in MariaDB and will give an error."], "Examples": ["SELECT TO_CHAR('1980-01-11 04:50:39', 'YYYY-MM-DD');", "SELECT TO_CHAR('1980-01-11 04:50:39', 'HH24-MI-SS');", "SELECT TO_CHAR('00-01-01 00:00:00', 'YY-MM-DD HH24:MI:SS');", "SELECT TO_CHAR('99-12-31 23:59:59', 'YY-MM-DD HH24:MI:SS');", "SELECT TO_CHAR('9999-12-31 23:59:59', 'YY-MM-DD HH24:MI:SS');", "SELECT TO_CHAR('21-01-03 08:30:00', 'Y-MONTH-DY HH:MI:SS');"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/trim/"], "Title": ["TRIM"], "Feature": ["TRIM([{BOTH | LEADING | TRAILING} [remstr] FROM] str), TRIM([remstr FROM] str)\n", "From MariaDB 10.3.6", "TRIM_ORACLE([{BOTH | LEADING | TRAILING} [remstr] FROM] str), TRIM([remstr FROM] str)\n"], "Description": ["Returns the string str with all remstr prefixes or suffixes removed. If none of the specifiers BOTH, LEADING, or TRAILING is given, BOTH is assumed. remstr is optional and, if not specified, spaces are removed.", "Returns NULL if given a NULL argument. If the result is empty, returns either an empty string, or, from MariaDB 10.3.6 with SQL_MODE=Oracle, NULL. SQL_MODE=Oracle is not set by default.", "The Oracle mode version of the function can be accessed in any mode by using TRIM_ORACLE as the function name."], "Examples": ["SELECT TRIM(''),TRIM_ORACLE('');", "SELECT TRIM(''),TRIM_ORACLE('');"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/ucase/"], "Title": ["UCASE"], "Feature": ["UCASE(str)\n"], "Description": ["UCASE() is a synonym for UPPER()."], "Examples": ["SELECT UCASE('hello world');"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/unhex/"], "Title": ["UNHEX"], "Feature": ["UNHEX(str)\n"], "Description": ["Performs the inverse operation of HEX(str). That is, it interprets\neach pair of hexadecimal digits in the argument as a number and\nconverts it to the character represented by the number. The resulting\ncharacters are returned as a binary string.", "If str is NULL, UNHEX() returns NULL."], "Examples": ["SELECT UNHEX('4D617269614442');", "SELECT UNHEX(HEX('string'));", "SELECT HEX(UNHEX('1267'));"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/updatexml/"], "Title": ["UPDATEXML"], "Feature": ["UpdateXML(xml_target, xpath_expr, new_xml)\n"], "Description": ["This function replaces a single portion of a given fragment of XML markup\nxml_target with a new XML fragment new_xml, and then returns the\nchanged XML. The portion of xml_target that is replaced matches an XPath\nexpression xpath_expr supplied by the user. If no expression matching\nxpath_expr is found, or if multiple matches are found, the function returns\nthe original xml_target XML fragment. All three arguments should be\nstrings."], "Examples": ["SELECT UpdateXML('<root><node>old_value</node></root>', '/root/node', '<new_node>new_value</new_node>') AS updated_xml;"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/upper/"], "Title": ["UPPER"], "Feature": ["UPPER(str)\nUCASE(str)\n"], "Description": ["Returns the string str with all characters changed to uppercase\naccording to the current character set mapping. The default is latin1\n(cp1252 West European).", "UCASE is a synonym.", "SELECT UPPER(surname), givenname FROM users ORDER BY surname;\n+----------------+------------+\n| UPPER(surname) | givenname  |\n+----------------+------------+\n| ABEL           | Jacinto    |\n| CASTRO         | Robert     |\n| COSTA          | Phestos    |\n| MOSCHELLA      | Hippolytos |\n+----------------+------------+\n", "UPPER() is ineffective when applied to binary strings (BINARY, VARBINARY, BLOB). The description of LOWER() shows how to perform lettercase conversion of binary strings.", "Prior to MariaDB 11.3, the query optimizer did not handle queries of the format UCASE(varchar_col)=.... An optimizer_switch option, sargable_casefold=ON, was added in MariaDB 11.3.0 to handle this case. (MDEV-31496)"], "Examples": ["SELECT UPPER('hello world');"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/weight_string/"], "Title": ["WEIGHT_STRING"], "Feature": ["WEIGHT_STRING(str [AS {CHAR|BINARY}(N)] [LEVEL levels] [flags])\n  levels: N [ASC|DESC|REVERSE] [, N [ASC|DESC|REVERSE]] ... \n"], "Description": ["Returns a binary string representing the string's sorting and comparison value. A string with a lower result means that for sorting purposes the string appears before a string with a higher result.", "WEIGHT_STRING() is particularly useful when adding new collations, for testing purposes.", "If str is a non-binary string (CHAR, VARCHAR or TEXT), WEIGHT_STRING returns the string's collation weight. If str is a binary string (BINARY, VARBINARY or BLOB), the return value is simply the input value, since the weight for each byte in a binary string is the byte value.", "WEIGHT_STRING() returns NULL if given a NULL input. ", "The optional AS clause permits casting the input string to a binary or non-binary string, as well as to a particular length.", "AS BINARY(N) measures the length in bytes rather than characters, and right pads with 0x00 bytes to the desired length. ", "AS CHAR(N) measures the length in characters, and right pads with spaces to the desired length.", "N has a minimum value of 1, and if it is less than the length of the input string, the string is truncated without warning.", "The optional LEVEL clause specifies that the return value should contain weights for specific collation levels. The levels specifier can either be a single integer, a comma-separated list of integers, or a range of integers separated by a dash (whitespace is ignored). Integers can range from 1 to a maximum of 6, dependent on the collation, and need to be listed in ascending order.", "If the LEVEL clause is no provided, a default of 1 to the maximum for the collation is assumed.", "If the LEVEL is specified without using a range, an optional modifier is permitted.", "ASC, the default, returns the weights without any modification.", "DESC returns bitwise-inverted weights.", "REVERSE returns the weights in reverse order."], "Examples": ["SELECT HEX(WEIGHT_STRING('x'));", "SELECT HEX(WEIGHT_STRING('x' AS BINARY(4)));", "SELECT HEX(WEIGHT_STRING('x' AS CHAR(4)));", "SELECT HEX(WEIGHT_STRING(0xaa22ee LEVEL 1));", "SELECT HEX(WEIGHT_STRING(0xaa22ee LEVEL 1 DESC));", "SELECT HEX(WEIGHT_STRING(0xaa22ee LEVEL 1 REVERSE));"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/concat/"], "Title": ["CONCAT"], "Feature": ["CONCAT(str1,str2,...)\n"], "Description": ["Returns the string that results from concatenating the arguments. May have one or more arguments. If all arguments are non-binary strings, the result is a non-binary string. If the arguments include any binary strings, the result is a binary string. A numeric argument is converted to its equivalent binary string form; if you want to avoid that, you can use an explicit type cast, as in this example:", "SELECT CONCAT(CAST(int_col AS CHAR), char_col);\n", "CONCAT() returns NULL if any argument is NULL.", "A NULL parameter hides all information contained in other parameters from the result. Sometimes this is not desirable; to avoid this, you can:", "Use the CONCAT_WS() function with an empty separator, because that function is NULL-safe.\nUse IFNULL() to turn NULLs into empty strings.\n", "Oracle Mode", "In Oracle mode, CONCAT ignores NULL."], "Examples": ["SELECT CONCAT('Ma', 'ria', 'DB');", "SELECT CONCAT('Ma', 'ria', NULL, 'DB');", "SELECT CONCAT(42.0);", "SELECT CONCAT('The value of @v is: ', IFNULL(@v, ''));", "SELECT CONCAT('Ma', 'ria', NULL, 'DB');"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/concat_ws/"], "Title": ["CONCAT_WS"], "Feature": ["CONCAT_WS(separator,str1,str2,...)\n"], "Description": ["CONCAT_WS() stands for Concatenate With Separator and is a special form of CONCAT(). The first argument is the separator for the rest of the arguments. The separator is added between the strings to be concatenated. The separator can be a string, as can the rest of the arguments.", "If the separator is NULL, the result is NULL; all other NULL values are skipped. This makes CONCAT_WS() suitable when you want to concatenate some values and avoid losing all information if one of them is NULL."], "Examples": ["SELECT CONCAT_WS(',','First name','Second name','Last Name');", "SELECT CONCAT_WS('-','Floor',NULL,'Room');", "SELECT CONCAT_WS(', ', @a, @b, @c);", "SELECT CONCAT_WS('', @a, @b, @c);"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/convert/"], "Title": ["CONVERT"], "Feature": ["CONVERT(expr,type), CONVERT(expr USING transcoding_name)\n"], "Description": ["The\tCONVERT() and CAST() functions take a value of one type and produce a value of another type.", "The type can be one of the following values:", "BINARY\nCHAR\nDATE\nDATETIME\nDECIMAL[(M[,D])]\nDOUBLE\nFLOAT (from MariaDB 10.4.5)\nINTEGER\nShort for SIGNED INTEGER\n\nSIGNED [INTEGER]\nUNSIGNED [INTEGER]\nTIME\nVARCHAR (in Oracle mode, from MariaDB 10.3)\n", "Note that in MariaDB, INT and INTEGER are the same thing.", "BINARY produces a string with the BINARY data type.  If the optional length is given, BINARY(N) causes the cast to use no more than N bytes of the argument. Values shorter than the given number in bytes are padded with 0x00 bytes to make them equal the length value.", "CHAR(N) causes the cast to use no more than the number of characters given in the argument.", "The main difference between the CAST() and CONVERT() is that CONVERT(expr,type) is ODBC syntax while CAST(expr as type) and CONVERT(... USING ...) are SQL92 syntax.", "CONVERT() with USING is used to convert data between different character sets. In MariaDB, transcoding names are the same as the\ncorresponding character set names. For example, this statement\nconverts the string 'abc' in the default character set to the\ncorresponding string in the utf8 character set:", "SELECT CONVERT('abc' USING utf8);\n"], "Examples": ["SELECT LOWER(@x), LOWER(CONVERT (@x USING latin1));"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/ascii/"], "Title": ["ASCII"], "Feature": ["ASCII(str)\n"], "Description": ["Returns the numeric ASCII value of the leftmost character of the string argument.  Returns 0 if the given string is empty and NULL if it is NULL.", "ASCII() works for 8-bit characters."], "Examples": ["SELECT ASCII(9);", "SELECT ASCII('9');", "SELECT ASCII('abc');"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/elt/"], "Title": ["ELT"], "Feature": ["ELT(N, str1[, str2, str3,...])\n"], "Description": ["Takes a numeric argument and a series of string arguments. Returns the string that corresponds to the given numeric position.  For instance, it returns str1 if N is 1, str2 if N is 2, and so on.  If the numeric argument is a FLOAT, MariaDB rounds it to the nearest INTEGER.  If the numeric argument is less than 1, greater than the total number of arguments, or not a number, ELT() returns NULL.  It must have at least two arguments.", "It is complementary to the FIELD() function."], "Examples": ["SELECT ELT(1, 'ej', 'Heja', 'hej', 'foo');", "SELECT ELT(4, 'ej', 'Heja', 'hej', 'foo');"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/export_set/"], "Title": ["EXPORT_SET"], "Feature": ["EXPORT_SET(bits, on, off[, separator[, number_of_bits]])\n"], "Description": ["Takes a minimum of three arguments.  Returns a string where each bit in the given bits argument is returned, with the string values given for on and off.  ", "Bits are examined from right to left, (from low-order to high-order bits).  Strings are added to the result from left to right, separated by a separator string (defaults as ',').  You can optionally limit the number of bits the EXPORT_SET() function examines using the number_of_bits option.  ", "If any of the arguments are set as NULL, the function returns NULL."], "Examples": ["SELECT EXPORT_SET(5,'Y','N',',',4);"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/extractvalue/"], "Title": ["EXTRACTVALUE"], "Feature": ["EXTRACTVALUE(xml_frag, xpath_expr)\n"], "Description": ["The EXTRACTVALUE() function takes two string arguments: a fragment of XML markup and an XPath expression, (also known as a locator).  It returns the text (That is, CDDATA), of the first text node which is a child of the element or elements matching the XPath expression.  ", "In cases where a valid XPath expression does not match any text nodes in a valid XML fragment, (including the implicit /text() expression), the EXTRACTVALUE() function returns an empty string.", "Invalid Arguments", "When either the XML fragment or the XPath expression is NULL, the EXTRACTVALUE() function returns NULL.  When the XML fragment is invalid, it raises a warning Code 1525:", "Warning (Code 1525): Incorrect XML value: 'parse error at line 1 pos 11: unexpected END-OF-INPUT'\n", "When the XPath value is invalid, it generates an Error 1105:", "ERROR 1105 (HY000): XPATH syntax error: ')'\n", "Explicit text() Expressions", "This function is the equivalent of performing a match using the XPath expression after appending /text().  In other words:", "SELECT\n   EXTRACTVALUE('<cases><case>example</case></cases>', '/cases/case') \n    AS 'Base Example',\n   EXTRACTVALUE('<cases><case>example</case></cases>', '/cases/case/text()') \n    AS 'text() Example';\n+--------------+----------------+\n| Base Example | text() Example |\n+--------------+----------------+\n| example      | example        |\n+--------------+----------------+\n", "Count Matches", "When EXTRACTVALUE() returns multiple matches, it returns the content of the first child text node of each matching element, in the matched order, as a single, space-delimited string.", "By design, the EXTRACTVALUE() function makes no distinction between a match on an empty element and no match at all.  If you need to determine whether no matching element was found in the XML fragment or if an element was found that contained no child text nodes, use the XPath count() function.  ", "For instance, when looking for a value that exists, but contains no child text nodes, you would get a count of the number of matching instances:", "SELECT\n   EXTRACTVALUE('<cases><case/></cases>', '/cases/case') \n    AS 'Empty Example',\n   EXTRACTVALUE('<cases><case/></cases>', 'count(/cases/case)') \n    AS 'count() Example';\n+---------------+-----------------+\n| Empty Example | count() Example |\n+---------------+-----------------+\n|               |               1 |\n+---------------+-----------------+\n", "Alternatively, when looking for a value that doesn't exist, count() returns 0.", "SELECT\n   EXTRACTVALUE('<cases><case/></cases>', '/cases/person') \n    AS 'No Match Example',\n   EXTRACTVALUE('<cases><case/></cases>', 'count(/cases/person)') \n    AS 'count() Example';\n+------------------+-----------------+\n| No Match Example | count() Example |\n+------------------+-----------------+\n|                  |                0|\n+------------------+-----------------+\n", "Matches", "Important: The EXTRACTVALUE() function only returns CDDATA.  It does not return tags that the element might contain or the text that these child elements contain.", "SELECT \n  EXTRACTVALUE('<cases><case>Person<email>x@example.com</email></case></cases>', '/cases')\n   AS Case;\n+--------+\n| Case   |\n+--------+\n| Person |\n+--------+\n", "Note, in the above example, while the XPath expression matches to the parent <case> instance, it does not return the contained <email> tag or its content."], "Examples": ["SELECT\n    ExtractValue('<a>ccc<b>ddd</b></a>', '/a')            AS val1,\n    ExtractValue('<a>ccc<b>ddd</b></a>', '/a/b')          AS val2,\n    ExtractValue('<a>ccc<b>ddd</b></a>', '//b')           AS val3,\n    ExtractValue('<a>ccc<b>ddd</b></a>', '/b')            AS val4,\n    ExtractValue('<a>ccc<b>ddd</b><b>eee</b></a>', '//b') AS val5;"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/field/"], "Title": ["FIELD"], "Feature": ["FIELD(pattern, str1[,str2,...])\n"], "Description": ["Returns the index position of the string or number matching the given pattern.  Returns 0 in the event that none of the arguments match the pattern.  Raises an Error 1582 if not given at least two arguments.", "When all arguments given to the FIELD() function are strings, they are treated as case-insensitive.  When all the arguments are numbers, they are treated as numbers.  Otherwise, they are treated as doubles.  ", "If the given pattern occurs more than once, the\tFIELD() function only returns the index of the first instance.  If the given pattern is NULL, the function returns 0, as a NULL pattern always fails to match.", "This function is complementary to the ELT() function."], "Examples": ["SELECT FIELD('ej', 'Hej', 'ej', 'Heja', 'hej', 'foo') \n   AS 'Field Results';", "SELECT FIELD('fo', 'Hej', 'ej', 'Heja', 'hej', 'foo')\n   AS 'Field Results';", "SELECT FIELD(1, 2, 3, 4, 5, 1) AS 'Field Results';", "SELECT FIELD(NULL, 2, 3) AS 'Field Results';"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/find_in_set/"], "Title": ["FIND_IN_SET"], "Feature": ["FIND_IN_SET(pattern, strlist)\n"], "Description": ["Returns the index position where the given pattern occurs in a string list.  The first argument is the pattern you want to search for.  The second argument is a string containing comma-separated variables.  If the second argument is of the SET data-type, the function is optimized to use bit arithmetic.", "If the pattern does not occur in the string list or if the string list is an empty string, the function returns 0.  If either argument is NULL, the function returns NULL.  The function does not return the correct result if the pattern contains a comma (\",\") character."], "Examples": ["SELECT FIND_IN_SET('b','a,b,c,d') AS \"Found Results\";"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/format/"], "Title": ["FORMAT"], "Feature": ["FORMAT(num, decimal_position[, locale])\n"], "Description": ["Formats the given number for display as a string, adding separators to appropriate position and rounding the results to the given decimal position.  For instance, it would format 15233.345 to 15,233.35.", "If the given decimal position is 0, it rounds to return no decimal point or fractional part.  You can optionally specify a locale value to format numbers to the pattern appropriate for the given region."], "Examples": ["SELECT FORMAT(1234567890.09876543210, 4) AS 'Format';", "SELECT FORMAT(1234567.89, 4) AS 'Format';", "SELECT FORMAT(1234567.89, 0) AS 'Format';", "SELECT FORMAT(123456789,2,'rm_CH') AS 'Format';"], "Category": ["String Functions"]}
