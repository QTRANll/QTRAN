{"HTML": ["https://mariadb.com//kb/en/kdf/"], "Title": ["KDF"], "Feature": ["KDF(key_str, salt [, {info | iterations} [, kdf_name [, width ]]])\n"], "Description": ["KDF is a key derivation function, similar to OpenSSL's EVP_KDF_derive(). The purpose of a KDF is to be slow, so if the calculated value is lost/stolen, the original key_str is not achievable easily with modern GPU. KDFs are therefore an ideal replacement for password hashes. KDFs can also pad out a password secret to the number of bits used in encryption algorithms.", "For generating good encryption keys for AES_ENCRYPT a less expensive but cryptographically secure function like RANDOM_BYTES is recommended.", "kdf_name is \"hkdf\" or \"pbkdf2_hmac\" (default)\nwidth (in bits) can be any number divisible by 8, by default it's taken from @@block_encryption_mode\niterations must be positive, and is 1000 by default\n", "Note that OpenSSL 1.0 doesn't support HKDF, so in this case NULL is returned. This OpenSSL version is still used in SLES 12 and CentOS 7."], "Examples": ["select hex(kdf('foo', 'bar', 'infa', 'hkdf'));"], "Category": ["Encryption, Hashing and Compression Functions"]}
{"HTML": ["https://mariadb.com//kb/en/md5/"], "Title": ["MD5"], "Feature": ["MD5(str)\n"], "Description": ["Calculates an MD5 128-bit checksum for the string. ", "The return value is a 32-hex digit string, and as of MariaDB 5.5, is a nonbinary string in the connection character set and collation, determined by the values of the character_set_connection and collation_connection system variables. Before 5.5, the return value was a binary string.", "NULL is returned if the argument was NULL. "], "Examples": ["SELECT MD5('testing');"], "Category": ["Encryption, Hashing and Compression Functions"]}
{"HTML": ["https://mariadb.com//kb/en/old_password/"], "Title": ["OLD_PASSWORD"], "Feature": ["OLD_PASSWORD(str)\n"], "Description": ["OLD_PASSWORD() was added to MySQL when the implementation of \nPASSWORD() was changed to improve security. OLD_PASSWORD() returns the\nvalue of the old (pre-MySQL 4.1) implementation of PASSWORD() as a\nstring, and is intended to permit you to reset passwords for any\npre-4.1 clients that need to connect to a more recent MySQL server version, or any version of MariaDB,\nwithout locking them out.", "As of MariaDB 5.5, the return value is a nonbinary string in the connection character set and collation, determined by the values of the character_set_connection and collation_connection system variables. Before 5.5, the return value was a binary string.", "The return value is 16 bytes in length, or NULL if the argument was NULL."], "Examples": ["SELECT OLD_PASSWORD('your_password_here');"], "Category": ["Encryption, Hashing and Compression Functions"]}
{"HTML": ["https://mariadb.com//kb/en/password/"], "Title": ["PASSWORD"], "Feature": ["PASSWORD(str)\n"], "Description": ["The PASSWORD() function is used for hashing passwords for use in authentication by the MariaDB server. It is not intended for use in other applications.\n", "Calculates and returns a hashed password string from the plaintext password str. Returns an empty string (>= MariaDB 10.0.4) if the argument was NULL. ", "The return value is a nonbinary string in the connection character set and collation, determined by the values of the character_set_connection and collation_connection system variables.", "This is the function that is used for hashing MariaDB passwords for storage in the Password column of the user table (see privileges), usually used with the SET PASSWORD statement. It is not intended for use in other applications.", "Until MariaDB 10.3, the return value is 41-bytes in length, and the first character is always '*'. From MariaDB 10.4, the function takes into account the authentication plugin where applicable (A CREATE USER or SET PASSWORD statement). For example, when used in conjunction with a user authenticated by the ed25519 plugin, the statement will create a longer hash:", "CREATE USER edtest@localhost IDENTIFIED VIA ed25519 USING PASSWORD('secret');\n\nCREATE USER edtest2@localhost IDENTIFIED BY 'secret';\n\nSELECT CONCAT(user, '@', host, ' => ', JSON_DETAILED(priv)) FROM mysql.global_priv\n  WHERE user LIKE 'edtest%'\\G\n*************************** 1. row ***************************\nCONCAT(user, '@', host, ' => ', JSON_DETAILED(priv)): edtest@localhost => {\n...\n    \"plugin\": \"ed25519\",\n    \"authentication_string\": \"ZIgUREUg5PVgQ6LskhXmO+eZLS0nC8be6HPjYWR4YJY\",\n...\n}\n*************************** 2. row ***************************\nCONCAT(user, '@', host, ' => ', JSON_DETAILED(priv)): edtest2@localhost => {\n...\n    \"plugin\": \"mysql_native_password\",\n    \"authentication_string\": \"*14E65567ABDB5135D0CFD9A70B3032C179A49EE7\",\n...\n}\n\n", "The behavior of this function is affected by the value of the old_passwords system variable. If this is set to 1 (0 is default), MariaDB reverts to using the mysql_old_password authentication plugin by default for newly created users and passwords. "], "Examples": ["SELECT PASSWORD('notagoodpwd');"], "Category": ["Encryption, Hashing and Compression Functions"]}
{"HTML": ["https://mariadb.com//kb/en/sha1/"], "Title": ["SHA1"], "Feature": ["SHA1(str), SHA(str)\n"], "Description": ["Calculates an SHA-1 160-bit checksum for the string str, as described in\nRFC 3174 (Secure Hash Algorithm).", "The value is returned as a string of 40 hex digits, or NULL if the argument was NULL. As of MariaDB 5.5, the return value is a nonbinary string in the connection character set and collation, determined by the values of the character_set_connection and collation_connection system variables. Before 5.5, the return value was a binary string."], "Examples": ["SELECT SHA1('some boring text');"], "Category": ["Encryption, Hashing and Compression Functions"]}
{"HTML": ["https://mariadb.com//kb/en/sha2/"], "Title": ["SHA2"], "Feature": ["SHA2(str,hash_len)\n"], "Description": ["Given a string str, calculates an SHA-2 checksum, which is considered more cryptographically secure than its SHA-1 equivalent. The SHA-2 family includes SHA-224, SHA-256, SHA-384, and SHA-512, and the hash_len must correspond to one of these, i.e. 224, 256, 384 or 512. 0 is equivalent to 256.", "The return value is a nonbinary string in the connection character set and collation, determined by the values of the character_set_connection and collation_connection system variables. ", "NULL is returned if the hash length is not valid, or the string str is NULL.", "SHA2 will only work if MariaDB was has been configured with TLS support. "], "Examples": ["SELECT SHA2('Maria',224);", "SELECT SHA2('Maria',256);", "SELECT SHA2('Maria',0);"], "Category": ["Encryption, Hashing and Compression Functions"]}
{"HTML": ["https://mariadb.com//kb/en/uncompress/"], "Title": ["UNCOMPRESS"], "Feature": ["UNCOMPRESS(string_to_uncompress)\n"], "Description": ["Uncompresses a string compressed by the COMPRESS() function. If the\nargument is not a compressed value, the result is NULL. This function\nrequires MariaDB to have been compiled with a compression library such\nas zlib. Otherwise, the return value is always NULL. The have_compress server system variable indicates whether a compression library is present. "], "Examples": ["SELECT UNCOMPRESS(COMPRESS('a string'));", "SELECT UNCOMPRESS('a string');"], "Category": ["Encryption, Hashing and Compression Functions"]}
{"HTML": ["https://mariadb.com//kb/en/uncompressed_length/"], "Title": ["UNCOMPRESSED_LENGTH"], "Feature": ["UNCOMPRESSED_LENGTH(compressed_string)\n"], "Description": ["Returns the length that the compressed string had before being\ncompressed with COMPRESS().", "UNCOMPRESSED_LENGTH() returns NULL or an incorrect result if the string is not compressed.", "Until MariaDB 10.3.1, returns MYSQL_TYPE_LONGLONG, or bigint(10), in all cases. From MariaDB 10.3.1, returns MYSQL_TYPE_LONG, or int(10), when the result would fit within 32-bits."], "Examples": ["SELECT UNCOMPRESSED_LENGTH(COMPRESS(REPEAT('a',30)));"], "Category": ["Encryption, Hashing and Compression Functions"]}
{"HTML": ["https://mariadb.com//kb/en/compress/"], "Title": ["COMPRESS"], "Feature": ["COMPRESS(string_to_compress)\n"], "Description": ["Compresses a string and returns the result as a binary string. This\nfunction requires MariaDB to have been compiled with a compression\nlibrary such as zlib. Otherwise, the return value is always NULL. The\ncompressed string can be uncompressed with UNCOMPRESS().", "The have_compress server system variable indicates whether a compression library is present. "], "Examples": ["SELECT LENGTH(COMPRESS(REPEAT('a',1000)));", "SELECT LENGTH(COMPRESS(''));", "SELECT LENGTH(COMPRESS('a'));", "SELECT LENGTH(COMPRESS(REPEAT('a',16)));"], "Category": ["Encryption, Hashing and Compression Functions"]}
{"HTML": ["https://mariadb.com//kb/en/aes_decrypt/"], "Title": ["AES_DECRYPT"], "Feature": ["AES_DECRYPT(crypt_str,key_str)\n", "From MariaDB 11.2.0", "AES_ENCRYPT(crypt_str, key_str, [, iv [, mode]])\n"], "Description": ["This function allows decryption of data using the official AES (Advanced Encryption Standard) algorithm. For more information, see the description of AES_ENCRYPT().\n", "MariaDB starting with 11.2From MariaDB 11.2, the function supports an initialization vector, and control of the block encryption mode. The default mode is specified by the block_encryption_mode system variable, which can be changed when calling the function with a mode. mode is aes-{128,192,256}-{ecb,cbc,ctr} for example:  \"AES-128-cbc\".\nFor modes that require it, the initialization_vector iv should be 16 bytes (it can be longer, but the extra bytes are ignored). A shorter iv, where one is required, results in the function returning NULL. Calling RANDOM_BYTES(16) will generate a random series of bytes that can be used for the iv. \n"], "Examples": ["SELECT AES_DECRYPT(x'C57C4B', 'bar', '0123456789abcdef', 'aes-128-ctr');"], "Category": ["Encryption, Hashing and Compression Functions"]}
{"HTML": ["https://mariadb.com//kb/en/aes_encrypt/"], "Title": ["AES_ENCRYPT"], "Feature": ["AES_ENCRYPT(str,key_str)\n", "From MariaDB 11.2.0", "AES_ENCRYPT(str, key, [, iv [, mode]])\n"], "Description": ["AES_ENCRYPT() and AES_DECRYPT() allow encryption and decryption of\ndata using the official AES (Advanced Encryption Standard) algorithm, previously known as \"Rijndael.\" Encoding with a 128-bit key length is used (from MariaDB 11.2.0, this is the default, and can be changed). 128 bits is much faster and is secure enough for most purposes.", "AES_ENCRYPT() encrypts a string str using the key key_str, and returns a binary string.", "AES_DECRYPT() decrypts the encrypted string and returns the original\nstring.", "The input arguments may be any length. If either argument is NULL, the result of this function is also NULL.", "Because AES is a block-level algorithm, padding is used to encode uneven length strings and so the result string length may be calculated using this formula:", "16 x (trunc(string_length / 16) + 1)\n", "If AES_DECRYPT() detects invalid data or incorrect padding, it returns NULL. However, it is possible for AES_DECRYPT() to return a non-NULL value (possibly garbage) if the input data or the key is invalid.", "MariaDB starting with 11.2From MariaDB 11.2, the function supports an initialization vector, and control of the block encryption mode. The default mode is specified by the block_encryption_mode system variable, which can be changed when calling the function with a mode. mode is aes-{128,192,256}-{ecb,cbc,ctr} for example:  \"AES-128-cbc\".\nAES_ENCRYPT(str, key) can no longer be used in persistent virtual columns (and the like).\n"], "Examples": ["SELECT HEX(AES_ENCRYPT('foo', 'bar', '0123456789abcdef', 'aes-256-cbc')) AS x;"], "Category": ["Encryption, Hashing and Compression Functions"]}
{"HTML": ["https://mariadb.com//kb/en/decode/"], "Title": ["DECODE"], "Feature": ["DECODE(crypt_str,pass_str)\n", "In Oracle mode from MariaDB 10.3.2:", "DECODE(expr, search_expr, result_expr [, search_expr2, result_expr2 ...] [default_expr])\n", "In all modes from MariaDB 10.3.2:", "DECODE_ORACLE(expr, search_expr, result_expr [, search_expr2, result_expr2 ...] [default_expr])\n"], "Description": ["In the default mode, DECODE decrypts the encrypted string crypt_str using pass_str as the\npassword. crypt_str should be a string returned from ENCODE(). The resulting string will be the original string only if pass_str is the same.", "In Oracle mode from MariaDB 10.3.2, DECODE compares expr to the search expressions, in order. If it finds a match, the corresponding result expression is returned. If no matches are found, the default expression is returned, or NULL if no default is provided.", "NULLs are treated as equivalent.", "DECODE_ORACLE is a synonym for the Oracle-mode version of the function, and is available in all modes."], "Examples": ["SELECT DECODE_ORACLE(2+1,3*1,'found1',3*2,'found2','default');", "SELECT DECODE_ORACLE(2+4,3*1,'found1',3*2,'found2','default');", "SELECT DECODE_ORACLE(2+2,3*1,'found1',3*2,'found2','default');", "SELECT DECODE_ORACLE(NULL,NULL,'Nulls are equivalent','Nulls are not equivalent');"], "Category": ["Encryption, Hashing and Compression Functions"]}
{"HTML": ["https://mariadb.com//kb/en/des_decrypt/"], "Title": ["DES_DECRYPT"], "Feature": ["DES_DECRYPT(crypt_str[,key_str])\n"], "Description": ["Decrypts a string encrypted with DES_ENCRYPT(). If an error occurs,\nthis function returns NULL.", "This function works only if MariaDB has been configured with TLS\nsupport.", "If no key_str argument is given, DES_DECRYPT() examines the first byte\nof the encrypted string to determine the DES key number that was used\nto encrypt the original string, and then reads the key from the DES\nkey file to decrypt the message. For this to work, the user must have\nthe SUPER privilege. The key file can be specified with the\n--des-key-file server option.", "If you pass this function a key_str argument, that string is used as\nthe key for decrypting the message.", "If the crypt_str argument does not appear to be an encrypted string,\nMariaDB returns the given crypt_str."], "Examples": ["SELECT DES_DECRYPT('encrypted_string', 'your_key');"], "Category": ["Encryption, Hashing and Compression Functions"]}
{"HTML": ["https://mariadb.com//kb/en/des_encrypt/"], "Title": ["DES_ENCRYPT"], "Feature": ["DES_ENCRYPT(str[,{key_num|key_str}])\n"], "Description": ["Encrypts the string with the given key using the Triple-DES algorithm.", "This function works only if MariaDB has been configured with TLS support.", "The encryption key to use is chosen based on the second argument to\nDES_ENCRYPT(), if one was given. With no argument, the first key from\nthe DES key file is used. With a key_num argument, the given key \nnumber (0-9) from the DES key file is used. With a key_str argument,\nthe given key string is used to encrypt str. ", "The key file can be specified with the --des-key-file server option.", "The return string is a binary string where the first character is \nCHAR(128 | key_num). If an error occurs, DES_ENCRYPT() returns NULL.", "The 128 is added to make it easier to recognize an encrypted key. If\nyou use a string key, key_num is 127.", "The string length for the result is given by this formula:", "new_len = orig_len + (8 - (orig_len % 8)) + 1\n", "Each line in the DES key file has the following format:", "key_num des_key_str\n", "Each key_num value must be a number in the range from 0 to 9. Lines in\nthe file may be in any order. des_key_str is the string that is used\nto encrypt the message. There should be at least one space between the\nnumber and the key. The first key is the default key that is used if\nyou do not specify any key argument to DES_ENCRYPT().", "You can tell MariaDB to read new key values from the key file with the\nFLUSH DES_KEY_FILE statement. This requires the RELOAD privilege.", "One benefit of having a set of default keys is that it gives\napplications a way to check for the existence of encrypted column\nvalues, without giving the end user the right to decrypt those values."], "Examples": ["SELECT DES_ENCRYPT('your_string', 'your_key')"], "Category": ["Encryption, Hashing and Compression Functions"]}
{"HTML": ["https://mariadb.com//kb/en/encode/"], "Title": ["ENCODE"], "Feature": ["ENCODE(str,pass_str)\n"], "Description": ["ENCODE is not considered cryptographically secure, and should not be used for password encryption.\n", "Encrypt str using pass_str as the password. To decrypt the result, use\nDECODE().", "The result is a binary string of the same length as str.", "The strength of the encryption is based on how good the random generator is. ", "It is not recommended to rely on the encryption performed by the ENCODE function. Using a salt value (changed when a password is updated) will improve matters somewhat, but for storing passwords, consider a more cryptographically secure function, such as SHA2()."], "Examples": ["SELECT ENCODE('my_string', 'my_password');"], "Category": ["Encryption, Hashing and Compression Functions"]}
{"HTML": ["https://mariadb.com//kb/en/encrypt/"], "Title": ["ENCRYPT"], "Feature": ["ENCRYPT(str[,salt])\n"], "Description": ["Encrypts a string using the Unix crypt() system call, returning an encrypted binary string. The salt argument should be a string with at least two characters or the returned result will be NULL. If no salt argument is given, a random value of sufficient length is used.", "It is not recommended to use ENCRYPT() with utf16, utf32 or ucs2 multi-byte character sets because the crypt() system call expects a string terminated with a zero byte.", "Note that the underlying crypt() system call may have some limitations, such as ignoring all but the first eight characters.", "If the have_crypt system variable is set to NO (because the crypt() system call is not available), the ENCRYPT function will always return NULL."], "Examples": ["SELECT ENCRYPT('encrypt me');"], "Category": ["Encryption, Hashing and Compression Functions"]}
