{"HTML": ["https://mariadb.com//kb/en/median/"], "Title": ["MEDIAN"], "Feature": ["MEDIAN(median expression) OVER (\n  [ PARTITION BY partition_expression ] \n)\n"], "Description": ["MEDIAN() is a window function that returns the median value of a range of values.", "It is a specific case of PERCENTILE_CONT, with an argument of 0.5 and the ORDER BY column the one in MEDIAN's argument. ", "MEDIAN(<median-arg>) OVER ( [ PARTITION BY partition_expression] )\n", "Is equivalent to:", "PERCENTILE_CONT(0.5) WITHIN \n  GROUP (ORDER BY <median-arg>) OVER ( [ PARTITION BY partition_expression ])\n"], "Examples": ["SELECT MEDIAN(1) OVER ()"], "Category": ["Window Functions"]}
{"HTML": ["https://mariadb.com//kb/en/ntile/"], "Title": ["NTILE"], "Feature": ["NTILE (expr) OVER ( \n  [ PARTITION BY partition_expression ] \n  [ ORDER BY order_list ]\n)\n"], "Description": ["NTILE() is a window function that returns an integer indicating which group a given row falls into. The number of groups is specified in the argument (expr), starting at one. Ordered rows in the partition are divided into the specified number of groups with as equal a size as possible. "], "Examples": ["SELECT NTILE(4) OVER (ORDER BY 1) AS group_number;"], "Category": ["Window Functions"]}
{"HTML": ["https://mariadb.com//kb/en/percent_rank/"], "Title": ["PERCENT_RANK"], "Feature": ["PERCENT_RANK() OVER (\n  [ PARTITION BY partition_expression ] \n  [ ORDER BY order_list ]\n)\n"], "Description": ["PERCENT_RANK() is a window function that returns the relative percent rank of a given row. The following formula is used to calculate the percent rank:", "(rank - 1) / (number of rows in the window or partition - 1)\n"], "Examples": ["SELECT PERCENT_RANK() OVER (ORDER BY 1) AS percent_rank_value;"], "Category": ["Window Functions"]}
{"HTML": ["https://mariadb.com//kb/en/rank/"], "Title": ["RANK"], "Feature": ["RANK() OVER (\n  [ PARTITION BY partition_expression ]\n  [ ORDER BY order_list ]\n) \n"], "Description": ["RANK() is a window function that displays the number of a given row, starting at one and following the ORDER BY sequence of the window function, with identical values receiving the same result. It is similar to the ROW_NUMBER() function except that in that function, identical values will receive a different row number for each result."], "Examples": ["SELECT RANK() OVER (ORDER BY 1) AS rank_value;"], "Category": ["Window Functions"]}
{"HTML": ["https://mariadb.com//kb/en/row_number/"], "Title": ["ROW_NUMBER"], "Feature": ["ROW_NUMBER() OVER (\n  [ PARTITION BY partition_expression ]\n  [ ORDER BY order_list ]\n) \n"], "Description": ["ROW_NUMBER() is a window function that displays the number of a given row, starting at one and following the ORDER BY sequence of the window function, with identical values receiving different row numbers. It is similar to the RANK() and DENSE_RANK() functions except that in that function, identical values will receive the same rank for each result."], "Examples": ["SELECT ROW_NUMBER() OVER (ORDER BY 1) AS row_num;"], "Category": ["Window Functions"]}
{"HTML": ["https://mariadb.com//kb/en/cume_dist/"], "Title": ["CUME_DIST"], "Feature": ["CUME_DIST() OVER ( \n  [ PARTITION BY partition_expression ] \n  [ ORDER BY order_list ]\n)\n"], "Description": ["CUME_DIST() is a window function that returns the cumulative distribution of a given row. The following formula is used to calculate the value:", "(number of rows <= current row) / (total rows)\n"], "Examples": ["SELECT CUME_DIST() OVER (ORDER BY 1) FROM DUAL"], "Category": ["Window Functions"]}
{"HTML": ["https://mariadb.com//kb/en/dense_rank/"], "Title": ["DENSE_RANK"], "Feature": ["DENSE_RANK() OVER (\n  [ PARTITION BY partition_expression ]\n  [ ORDER BY order_list ]\n) \n"], "Description": ["DENSE_RANK() is a window function that displays the number of a given row, starting at one and following the ORDER BY sequence of the window function, with identical values receiving the same result. Unlike the  RANK() function, there are no skipped values if the preceding results are identical. It is also similar to the ROW_NUMBER() function except that in that function, identical values will receive a different row number for each result."], "Examples": ["SELECT DENSE_RANK() OVER (ORDER BY 1) AS rank_value"], "Category": ["Window Functions"]}
