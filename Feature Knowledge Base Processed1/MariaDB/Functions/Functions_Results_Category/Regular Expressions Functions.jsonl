{"HTML": ["https://mariadb.com//kb/en/regexp/"], "Title": ["REGEXP"], "Feature": ["expr REGEXP pat, expr RLIKE pat\n"], "Description": ["Performs a pattern match of a string expression expr against a pattern\npat. The pattern can be an extended regular expression. See Regular Expressions Overview for details on the syntax for\nregular expressions (see also PCRE Regular Expressions). ", "Returns 1 if expr matches pat or 0 if it doesn't match. If either expr or pat are NULL, the result is NULL. ", "The negative form NOT REGEXP also exists, as an alias for NOT (string REGEXP pattern). RLIKE and NOT RLIKE are synonyms for REGEXP and NOT REGEXP, originally provided for mSQL compatibility.", "The pattern need not be a literal string. For example, it can be\nspecified as a string expression or table column.", "Note: Because MariaDB uses the C escape syntax in strings (for\nexample, \"\\n\" to represent the newline character), you must double any\n\"\\\" that you use in your REGEXP strings.", "REGEXP is not case sensitive, except when used with binary strings.", "MariaDB 10.0.5 moved to the PCRE regex library - see PCRE Regular Expressions for enhancements to REGEXP introduced in MariaDB 10.0.5.", "The default_regex_flags variable addresses the remaining compatibilities between PCRE and the old regex library. "], "Examples": ["SELECT 'Monty!' REGEXP 'm%y%%';", "SELECT 'Monty!' REGEXP '.*';", "SELECT 'new*\\n*line' REGEXP 'new\\\\*.\\\\*line';", "SELECT 'a' REGEXP 'A', 'a' REGEXP BINARY 'A';", "SELECT 'a' REGEXP '^[a-d]';"], "Category": ["Regular Expressions Functions"]}
{"HTML": ["https://mariadb.com//kb/en/regexp_instr/"], "Title": ["REGEXP_INSTR"], "Feature": ["REGEXP_INSTR(subject, pattern)\n", "Returns the position of the first occurrence of the regular expression pattern in the string subject, or 0 if pattern was not found.", "The positions start with 1 and are measured in characters (i.e. not in bytes), which is important for multi-byte character sets. You can cast a multi-byte character set to BINARY to get offsets in bytes.", "The function follows the case sensitivity rules of the effective collation. Matching is performed case insensitively for case insensitive collations, and case sensitively for case sensitive collations and for binary data.", "The collation case sensitivity can be overwritten using the (?i) and (?-i) PCRE flags.", "MariaDB uses the PCRE regular expression library for enhanced regular expression performance, and REGEXP_INSTR was introduced as part of this enhancement."], "Description": [], "Examples": ["SELECT REGEXP_INSTR('abc','b');", "SELECT REGEXP_INSTR('abc','x');", "SELECT REGEXP_INSTR('BJ\u00d6RN','N');", "SELECT REGEXP_INSTR(BINARY 'BJ\u00d6RN','N') AS cast_utf8_to_binary;", "SELECT REGEXP_INSTR('ABC','b');", "SELECT REGEXP_INSTR(BINARY'ABC','b');", "SELECT REGEXP_INSTR('ABC','(?-i)b');"], "Category": ["Regular Expressions Functions"]}
{"HTML": ["https://mariadb.com//kb/en/regexp_replace/"], "Title": ["REGEXP_REPLACE"], "Feature": ["REGEXP_REPLACE(subject, pattern, replace)\n"], "Description": ["REGEXP_REPLACE returns the string subject with all occurrences of the regular expression pattern replaced by the string replace. If no occurrences are found, then subject is returned as is.", "The replace string can have backreferences to the subexpressions in the form \\N, where N is a number from 1 to 9.", "The function follows the case sensitivity rules of the effective collation. Matching is performed case insensitively for case insensitive collations, and case sensitively for case sensitive collations and for binary data.", "The collation case sensitivity can be overwritten using the (?i) and (?-i) PCRE flags.", "MariaDB uses the PCRE regular expression library for enhanced regular expression performance, and REGEXP_REPLACE was introduced as part of this enhancement.", "The default_regex_flags variable addresses the remaining compatibilities between PCRE and the old regex library. "], "Examples": ["SELECT REGEXP_REPLACE('ab12cd','[0-9]','') AS remove_digits;", "SELECT REGEXP_REPLACE('<html><head><title>title</title><body>body</body></htm>', '<.+?>',' ')\nAS strip_html;", "SELECT REGEXP_REPLACE('James Bond','^(.*) (.*)$','\\\\2, \\\\1') AS reorder_name;", "SELECT REGEXP_REPLACE('ABC','b','-') AS case_insensitive;", "SELECT REGEXP_REPLACE(BINARY 'ABC','b','-') AS binary_data;", "SELECT REGEXP_REPLACE('ABC','(?-i)b','-') AS force_case_sensitive;", "SELECT REGEXP_REPLACE(BINARY 'ABC','(?i)b','-') AS force_case_insensitive;"], "Category": ["Regular Expressions Functions"]}
{"HTML": ["https://mariadb.com//kb/en/regexp_substr/"], "Title": ["REGEXP_SUBSTR"], "Feature": ["REGEXP_SUBSTR(subject,pattern)\n"], "Description": ["Returns the part of the string subject that matches the regular expression pattern, or an empty string if pattern was not found.", "The function follows the case sensitivity rules of the effective collation. Matching is performed case insensitively for case insensitive collations, and case sensitively for case sensitive collations and for binary data.", "The collation case sensitivity can be overwritten using the (?i) and (?-i) PCRE flags.", "MariaDB uses the PCRE regular expression library for enhanced regular expression performance, and REGEXP_SUBSTR was introduced as part of this enhancement.", "The default_regex_flags variable addresses the remaining compatibilities between PCRE and the old regex library. "], "Examples": ["SELECT REGEXP_SUBSTR('ab12cd','[0-9]+');", "SELECT REGEXP_SUBSTR(\n  'See https://mariadb.org/en/foundation/ for details',\n  'https?://[^/]*');", "SELECT REGEXP_SUBSTR('ABC','b');", "SELECT REGEXP_SUBSTR(BINARY'ABC','b');", "SELECT REGEXP_SUBSTR('ABC','(?i)b');"], "Category": ["Regular Expressions Functions"]}
{"HTML": ["https://mariadb.com//kb/en/rlike/"], "Title": ["RLIKE"], "Feature": ["expr REGEXP pat, expr RLIKE pat\n"], "Description": ["RLIKE is a synonym for REGEXP."], "Examples": ["SELECT * FROM dialect_recognize_table WHERE dialect_name RLIKE 'Cantonese';"], "Category": ["Regular Expressions Functions"]}
