{"HTML": ["https://mariadb.com//kb/en/group_concat/"], "Title": ["GROUP_CONCAT"], "Feature": ["GROUP_CONCAT(expr)\n"], "Description": ["This function returns a string result with the concatenated non-NULL values from a group. If any expr in GROUP_CONCAT evaluates to NULL, that tuple is not present in the list returned by GROUP_CONCAT. ", "It returns NULL if all arguments are NULL, or there are no matching rows.", "The maximum returned length in bytes is determined by the group_concat_max_len server system variable, which defaults to 1M.", "If group_concat_max_len <= 512, the return type is VARBINARY or VARCHAR; otherwise, the return type is BLOB or TEXT. The choice between binary or non-binary types depends from the input.", "The full syntax is as follows:", "GROUP_CONCAT([DISTINCT] expr [,expr ...]\n             [ORDER BY {unsigned_integer | col_name | expr}\n                 [ASC | DESC] [,col_name ...]]\n             [SEPARATOR str_val]\n             [LIMIT {[offset,] row_count | row_count OFFSET offset}])\n", "DISTINCT eliminates duplicate values from the output string.", "ORDER BY determines the order of returned values.", "SEPARATOR specifies a separator between the values. The default separator is a comma (,). It is possible to avoid using a separator by specifying an empty string.", "LIMIT", "The LIMIT clause can be used with GROUP_CONCAT. This was not possible prior to MariaDB 10.3.3."], "Examples": ["SELECT GROUP_CONCAT(DISTINCT User ORDER BY User SEPARATOR '\\n')\n   FROM mysql.user;", "SELECT User, GROUP_CONCAT(Host ORDER BY Host SEPARATOR ', ') \n   FROM mysql.user GROUP BY User ORDER BY User;"], "Category": ["Aggregate Functions"]}
{"HTML": ["https://mariadb.com//kb/en/avg/"], "Title": ["AVG"], "Feature": ["AVG([DISTINCT] expr)\n"], "Description": ["Returns the average value of expr. The DISTINCT option can be used to return the average of the distinct values of expr. NULL values are ignored. It is an aggregate function, and so can be used with the GROUP BY clause.", "AVG() returns NULL if there were no matching rows.", "AVG() can be used as a window function."], "Examples": ["SELECT name, AVG(score) FROM student GROUP BY name;", "SELECT name,test,AVG(score) FROM student;"], "Category": ["Aggregate Functions"]}
{"HTML": ["https://mariadb.com//kb/en/bit_and/"], "Title": ["BIT_AND"], "Feature": ["BIT_AND(expr) [over_clause]\n"], "Description": ["Returns the bitwise AND of all bits in expr. The calculation is performed with 64-bit (BIGINT) precision. It is an aggregate function, and so can be used with the GROUP BY clause.", "If no rows match, BIT_AND will return a value with all bits set to 1. NULL values have no effect on the result unless all results are NULL, which is treated as no match.", "BIT_AND can be used as a window function with the addition of the over_clause."], "Examples": ["SELECT BIT_AND(NULL);"], "Category": ["Aggregate Functions"]}
{"HTML": ["https://mariadb.com//kb/en/max/"], "Title": ["MAX"], "Feature": ["MAX([DISTINCT] expr)\n"], "Description": ["Returns the largest, or maximum, value of expr. MAX() can also take a string\nargument in which case it returns the maximum string value. The DISTINCT\nkeyword can be used to find the maximum of the distinct values of expr,\nhowever, this produces the same result as omitting DISTINCT.", "Note that SET and ENUM fields are currently compared by their string value rather than their relative position in the set, so MAX() may produce a different highest result than ORDER BY DESC.", "It is an aggregate function, and so can be used with the GROUP BY clause.", "MAX() can be used as a window function.", "MAX() returns NULL if there were no matching rows."], "Examples": ["SELECT name, MAX(score) FROM student GROUP BY name;", "SELECT MAX(name) FROM student;", "SELECT name,test,MAX(SCORE) FROM student;"], "Category": ["Aggregate Functions"]}
{"HTML": ["https://mariadb.com//kb/en/bit_or/"], "Title": ["BIT_OR"], "Feature": ["BIT_OR(expr) [over_clause]\n"], "Description": ["Returns the bitwise OR of all bits in expr. The calculation is performed with 64-bit (BIGINT) precision. It is an aggregate function, and so can be used with the GROUP BY clause.", "If no rows match, BIT_OR will return a value with all bits set to 0. NULL values have no effect on the result unless all results are NULL, which is treated as no match.", "BIT_OR can be used as a window function with the addition of the over_clause."], "Examples": ["SELECT BIT_OR(NULL);"], "Category": ["Aggregate Functions"]}
{"HTML": ["https://mariadb.com//kb/en/min/"], "Title": ["MIN"], "Feature": ["MIN([DISTINCT] expr)\n"], "Description": ["Returns the minimum value of expr. MIN() may take a string\nargument, in which case it returns the minimum string value. The DISTINCT\nkeyword can be used to find the minimum of the distinct values of expr,\nhowever, this produces the same result as omitting DISTINCT.", "Note that SET and ENUM fields are currently compared by their string value rather than their relative position in the set, so MIN() may produce a different lowest result than ORDER BY ASC.", "It is an aggregate function, and so can be used with the GROUP BY clause.", "MIN() can be used as a window function.", "MIN() returns NULL if there were no matching rows."], "Examples": ["SELECT name, MIN(score) FROM student GROUP BY name;", "SELECT MIN(name) FROM student;", "SELECT name,test,MIN(score) FROM student;"], "Category": ["Aggregate Functions"]}
{"HTML": ["https://mariadb.com//kb/en/bit_xor/"], "Title": ["BIT_XOR"], "Feature": ["BIT_XOR(expr) [over_clause]\n"], "Description": ["Returns the bitwise XOR of all bits in expr. The calculation is performed with 64-bit (BIGINT) precision. It is an aggregate function, and so can be used with the GROUP BY clause.", "If no rows match, BIT_XOR will return a value with all bits set to 0. NULL values have no effect on the result unless all results are NULL, which is treated as no match.", "BIT_XOR can be used as a window function with the addition of the over_clause."], "Examples": ["SELECT BIT_XOR(NULL);"], "Category": ["Aggregate Functions"]}
{"HTML": ["https://mariadb.com//kb/en/std/"], "Title": ["STD"], "Feature": ["STD(expr)\n"], "Description": ["Returns the population standard deviation of expr. This is an extension\nto standard SQL. The standard SQL function STDDEV_POP() can\nbe used instead. ", "It is an aggregate function, and so can be used with the GROUP BY clause.", "STD() can be used as a window function.", "This function returns NULL if there were no matching rows."], "Examples": ["SELECT STD(1) AS std_value;"], "Category": ["Aggregate Functions"]}
{"HTML": ["https://mariadb.com//kb/en/stddev/"], "Title": ["STDDEV"], "Feature": ["STDDEV(expr)\n"], "Description": ["Returns the population standard deviation of expr. This function is\nprovided for compatibility with Oracle. The standard SQL function\nSTDDEV_POP() can be used instead.", "It is an aggregate function, and so can be used with the GROUP BY clause.", "STDDEV() can be used as a window function.", "This function returns NULL if there were no matching rows."], "Examples": ["SELECT STDDEV(1) AS stddev_value;"], "Category": ["Aggregate Functions"]}
{"HTML": ["https://mariadb.com//kb/en/stddev_pop/"], "Title": ["STDDEV_POP"], "Feature": ["STDDEV_POP(expr)\n"], "Description": ["Returns the population standard deviation of expr (the square root of\nVAR_POP()). You can also use STD() or\nSTDDEV(), which are equivalent but not standard SQL.", "It is an aggregate function, and so can be used with the GROUP BY clause.", "STDDEV_POP() can be used as a window function.", "STDDEV_POP() returns NULL if there were no matching rows."], "Examples": ["SELECT STDDEV_POP(1);"], "Category": ["Aggregate Functions"]}
{"HTML": ["https://mariadb.com//kb/en/stddev_samp/"], "Title": ["STDDEV_SAMP"], "Feature": ["STDDEV_SAMP(expr)\n"], "Description": ["Returns the sample standard deviation of expr (the square root of VAR_SAMP()).", "It is an aggregate function, and so can be used with the GROUP BY clause.", "STDDEV_SAMP() can be used as a window function.", "STDDEV_SAMP() returns NULL if there were no matching rows."], "Examples": ["SELECT STDDEV_SAMP(value) FROM (SELECT 1 AS value UNION ALL SELECT 2 UNION ALL SELECT 3) AS temp;"], "Category": ["Aggregate Functions"]}
{"HTML": ["https://mariadb.com//kb/en/sum/"], "Title": ["SUM"], "Feature": ["SUM([DISTINCT] expr)\n"], "Description": ["Returns the sum of expr. If the return set has no rows, SUM() returns\nNULL. The DISTINCT keyword can be used to sum only the distinct values\nof expr.", "SUM() can be used as a window function, although not with the DISTINCT specifier."], "Examples": ["SELECT SUM(1);"], "Category": ["Aggregate Functions"]}
{"HTML": ["https://mariadb.com//kb/en/variance/"], "Title": ["VARIANCE"], "Feature": ["VARIANCE(expr) \n"], "Description": ["Returns the population standard variance of expr. This is an extension to\nstandard SQL. The standard SQL function VAR_POP() can be used\ninstead.", "Variance is calculated by", "working out the mean for the set\nfor each number, subtracting the mean and squaring the result\ncalculate the average of the resulting differences\n", "It is an aggregate function, and so can be used with the GROUP BY clause.", "VARIANCE() can be used as a window function.", "VARIANCE() returns NULL if there were no matching rows."], "Examples": ["SELECT VARIANCE(1);"], "Category": ["Aggregate Functions"]}
{"HTML": ["https://mariadb.com//kb/en/var_pop/"], "Title": ["VAR_POP"], "Feature": ["VAR_POP(expr)\n"], "Description": ["Returns the population standard variance of expr. It considers rows as\nthe whole population, not as a sample, so it has the number of rows as\nthe denominator. You can also use VARIANCE(), which is equivalent but\nis not standard SQL.", "Variance is calculated by", "working out the mean for the set\nfor each number, subtracting the mean and squaring the result\ncalculate the average of the resulting differences\n", "It is an aggregate function, and so can be used with the GROUP BY clause.", "VAR_POP() can be used as a window function.", "VAR_POP() returns NULL if there were no matching rows."], "Examples": ["SELECT VAR_POP(1);"], "Category": ["Aggregate Functions"]}
{"HTML": ["https://mariadb.com//kb/en/var_samp/"], "Title": ["VAR_SAMP"], "Feature": ["VAR_SAMP(expr)\n"], "Description": ["Returns the sample variance of expr. That is, the denominator is the number of rows minus one.", "It is an aggregate function, and so can be used with the GROUP BY clause.", "VAR_SAMP() can be used as a window function.", "VAR_SAMP() returns NULL if there were no matching rows."], "Examples": ["SELECT VAR_SAMP(1);"], "Category": ["Aggregate Functions"]}
{"HTML": ["https://mariadb.com//kb/en/count-distinct/"], "Title": ["COUNT DISTINCT"], "Feature": ["COUNT(DISTINCT expr,[expr...])\n"], "Description": ["Returns a count of the number of different non-NULL values.", "COUNT(DISTINCT) returns 0 if there were no matching rows.", "Although, from MariaDB 10.2.0, COUNT can be used as a window function, COUNT DISTINCT cannot be."], "Examples": ["SELECT COUNT(*) FROM student;", "SELECT COUNT(DISTINCT (name)) FROM student;"], "Category": ["Aggregate Functions"]}
{"HTML": ["https://mariadb.com//kb/en/count/"], "Title": ["COUNT"], "Feature": ["COUNT(expr)\n"], "Description": ["Returns a count of the number of non-NULL values of expr in the rows retrieved by a SELECT statement. The result is a BIGINT value. It is an aggregate function, and so can be used with the GROUP BY clause.", "COUNT(*) counts the total number of rows in a table.", "COUNT() returns 0 if there were no matching rows.", "COUNT() can be used as a window function."], "Examples": ["SELECT COUNT(*) FROM student;", "SELECT COUNT(DISTINCT (name)) FROM student;"], "Category": ["Aggregate Functions"]}
