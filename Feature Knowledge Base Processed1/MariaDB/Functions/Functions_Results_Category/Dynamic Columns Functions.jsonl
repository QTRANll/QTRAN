{"HTML": ["https://mariadb.com//kb/en/column_add/"], "Title": ["COLUMN_ADD"], "Feature": ["COLUMN_ADD(dyncol_blob, column_nr, value [as type], [column_nr, value [as type]]...);\nCOLUMN_ADD(dyncol_blob, column_name, value [as type], [column_name, value [as type]]...);\n"], "Description": ["Adds or updates dynamic columns.", "dyncol_blob must be either a valid dynamic columns blob (for example, COLUMN_CREATE returns such blob), or an empty string.\ncolumn_name specifies the name of the column to be added. If dyncol_blob already has a column with this name, it will be overwritten.\nvalue specifies the new value for the column.  Passing a NULL value will cause the column to be deleted.\nas type is optional. See #datatypes section for a discussion about types.\n", "The return value is a dynamic column blob after the modifications."], "Examples": [], "Category": ["Dynamic Columns Functions"]}
{"HTML": ["https://mariadb.com//kb/en/column_check/"], "Title": ["COLUMN_CHECK"], "Feature": ["COLUMN_CHECK(dyncol_blob);\n"], "Description": ["Check if dyncol_blob is a valid packed dynamic columns blob. Return value of 1 means the blob is valid, return value of 0 means it is not.", "Rationale:\nNormally, one works with valid dynamic column blobs. Functions like COLUMN_CREATE, COLUMN_ADD, COLUMN_DELETE always return valid dynamic column blobs. However, if a dynamic column blob is accidentally truncated, or transcoded from one character set to another, it will be corrupted. This function can be used to check if a value in a blob field is a valid dynamic column blob."], "Examples": ["SELECT COLUMN_CHECK(@dyncol_blob);"], "Category": ["Dynamic Columns Functions"]}
{"HTML": ["https://mariadb.com//kb/en/column_create/"], "Title": ["COLUMN_CREATE"], "Feature": ["COLUMN_CREATE(column_nr, value [as type], [column_nr, value [as type]]...);\nCOLUMN_CREATE(column_name, value [as type], [column_name, value [as type]]...);\n"], "Description": ["Returns a dynamic columns blob that stores the specified columns with values.", "The return value is suitable for ", "storing in a table\nfurther modification with other dynamic columns functions\n", "The as type part allows one to specify the value type. In most cases,\nthis is redundant because MariaDB will be able to deduce the type of the\nvalue. Explicit type specification may be needed when the type of the value is\nnot apparent. For example, a literal '2012-12-01' has a CHAR type by\ndefault, one will need to specify '2012-12-01' AS DATE to have it stored as\na date. See Dynamic Columns:Datatypes for further details."], "Examples": ["SELECT COLUMN_CREATE(1, 'value1', 2, 'value2' AS CHAR);"], "Category": ["Dynamic Columns Functions"]}
{"HTML": ["https://mariadb.com//kb/en/column_delete/"], "Title": ["COLUMN_DELETE"], "Feature": ["COLUMN_DELETE(dyncol_blob, column_nr, column_nr...);\nCOLUMN_DELETE(dyncol_blob, column_name, column_name...);\n"], "Description": ["Deletes a dynamic column with the specified name. Multiple names can be given. The return value is a dynamic column blob after the modification."], "Examples": [], "Category": ["Dynamic Columns Functions"]}
{"HTML": ["https://mariadb.com//kb/en/column_exists/"], "Title": ["COLUMN_EXISTS"], "Feature": ["COLUMN_EXISTS(dyncol_blob, column_nr);\nCOLUMN_EXISTS(dyncol_blob, column_name);\n"], "Description": ["Checks if a column with name column_name exists in dyncol_blob. If yes, return 1, otherwise return 0. See dynamic columns for more information."], "Examples": [], "Category": ["Dynamic Columns Functions"]}
{"HTML": ["https://mariadb.com//kb/en/column_get/"], "Title": ["COLUMN_GET"], "Feature": ["COLUMN_GET(dyncol_blob, column_nr as type);\nCOLUMN_GET(dyncol_blob, column_name as type);\n"], "Description": ["Gets the value of a dynamic column by its name. If no column with the given name exists, NULL will be returned.", "column_name as type requires that one specify the datatype of the dynamic column they are reading. ", "This may seem counter-intuitive: why would one need to specify which datatype they're retrieving? Can't the dynamic columns system figure the datatype from the data being stored?", "The answer is: SQL is a statically-typed language. The SQL interpreter needs to know the datatypes of all expressions before the query is run (for example, when one is using prepared statements and runs \"select COLUMN_GET(...)\", the prepared statement API requires the server to inform the client about the datatype of the column being read before the query is executed and the server can see what datatype the column actually has).", "Lengths", "If you're running queries like:", "SELECT COLUMN_GET(blob, 'colname' as CHAR) ...\n", "without specifying a maximum length (i.e. using as CHAR, not as CHAR(n)), MariaDB will report the maximum length of the resultset column to be 16,777,216. This may cause excessive memory usage in some client libraries, because they try to pre-allocate a buffer of maximum resultset width. To avoid this problem, use CHAR(n) whenever you're using COLUMN_GET in the select list.", "See Dynamic Columns:Datatypes for more information about datatypes."], "Examples": [], "Category": ["Dynamic Columns Functions"]}
{"HTML": ["https://mariadb.com//kb/en/column_json/"], "Title": ["COLUMN_JSON"], "Feature": ["COLUMN_JSON(dyncol_blob)\n"], "Description": ["Returns a JSON representation of data in dyncol_blob. Can also be used to display nested columns. See dynamic columns for more information."], "Examples": [], "Category": ["Dynamic Columns Functions"]}
{"HTML": ["https://mariadb.com//kb/en/column_list/"], "Title": ["COLUMN_LIST"], "Feature": ["COLUMN_LIST(dyncol_blob);\n"], "Description": ["Returns a comma-separated list of column names. The names are quoted with backticks.", "See dynamic columns for more information."], "Examples": ["SELECT COLUMN_LIST('');"], "Category": ["Dynamic Columns Functions"]}
