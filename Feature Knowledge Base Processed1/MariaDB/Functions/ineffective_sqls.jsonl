{"HTML": "https://mariadb.com//kb/en/binlog_gtid_pos/", "Title": "BINLOG_GTID_POS", "Feature": ["BINLOG_GTID_POS(binlog_filename,binlog_offset)\n"], "Description": ["The BINLOG_GTID_POS() function takes as input an old-style binary log position in the form of a file name and a file offset. It looks up the position in the current binlog, and returns a string representation of the corresponding GTID position. If the position is not found in the current binlog, NULL is returned."], "Examples": ["SELECT BINLOG_GTID_POS(\"master-bin.000001\", 600);\n"], "Category": ["Information Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": ["SELECT BINLOG_GTID_POS(\"master-bin.000001\", 600);"], "Wrong Messages from Ineffective SQLs Refined": ["(pymysql.err.OperationalError) (1381, 'You are not using binary logging')\n[SQL: SELECT BINLOG_GTID_POS(\"master-bin.000001\", 600);]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)"]}
{"HTML": "https://mariadb.com//kb/en/column_add/", "Title": "COLUMN_ADD", "Feature": ["COLUMN_ADD(dyncol_blob, column_nr, value [as type], [column_nr, value [as type]]...);\nCOLUMN_ADD(dyncol_blob, column_name, value [as type], [column_name, value [as type]]...);\n"], "Description": ["Adds or updates dynamic columns.", "dyncol_blob must be either a valid dynamic columns blob (for example, COLUMN_CREATE returns such blob), or an empty string.\ncolumn_name specifies the name of the column to be added. If dyncol_blob already has a column with this name, it will be overwritten.\nvalue specifies the new value for the column.  Passing a NULL value will cause the column to be deleted.\nas type is optional. See #datatypes section for a discussion about types.\n", "The return value is a dynamic column blob after the modifications."], "Examples": ["UPDATE t1 SET dyncol_blob=COLUMN_ADD(dyncol_blob, \"column_name\", \"value\") WHERE id=1;\n"], "Category": ["Dynamic Columns Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": ["UPDATE t1 SET dyncol_blob=COLUMN_ADD(dyncol_blob, \"column_name\", \"value\") WHERE id=1;"], "Wrong Messages from Ineffective SQLs Refined": ["(pymysql.err.OperationalError) (1054, \"Unknown column 'dyncol_blob' in 'field list'\")\n[SQL: UPDATE t1 SET dyncol_blob=COLUMN_ADD(dyncol_blob, \"column_name\", \"value\") WHERE id=1;]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)"]}
{"HTML": "https://mariadb.com//kb/en/column_create/", "Title": "COLUMN_CREATE", "Feature": ["COLUMN_CREATE(column_nr, value [as type], [column_nr, value [as type]]...);\nCOLUMN_CREATE(column_name, value [as type], [column_name, value [as type]]...);\n"], "Description": ["Returns a dynamic columns blob that stores the specified columns with values.", "The return value is suitable for ", "storing in a table\nfurther modification with other dynamic columns functions\n", "The as type part allows one to specify the value type. In most cases,\nthis is redundant because MariaDB will be able to deduce the type of the\nvalue. Explicit type specification may be needed when the type of the value is\nnot apparent. For example, a literal '2012-12-01' has a CHAR type by\ndefault, one will need to specify '2012-12-01' AS DATE to have it stored as\na date. See Dynamic Columns:Datatypes for further details."], "Examples": ["INSERT INTO tbl SET dyncol_blob=COLUMN_CREATE(\"column_name\", \"value\");\n"], "Category": ["Dynamic Columns Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": ["INSERT INTO tbl SET dyncol_blob=COLUMN_CREATE(\"column_name\", \"value\");"], "Wrong Messages from Ineffective SQLs Refined": ["(pymysql.err.ProgrammingError) (1146, \"Table 'PINOLO_MariaDB.tbl' doesn't exist\")\n[SQL: INSERT INTO tbl SET dyncol_blob=COLUMN_CREATE(\"column_name\", \"value\");]\n(Background on this error at: https://sqlalche.me/e/20/f405)"]}
{"HTML": "https://mariadb.com//kb/en/column_json/", "Title": "COLUMN_JSON", "Feature": ["COLUMN_JSON(dyncol_blob)\n"], "Description": ["Returns a JSON representation of data in dyncol_blob. Can also be used to display nested columns. See dynamic columns for more information."], "Examples": ["select item_name, COLUMN_JSON(dynamic_cols) from assets;\n+-----------------+----------------------------------------+\n| item_name       | COLUMN_JSON(dynamic_cols)              |\n+-----------------+----------------------------------------+\n| MariaDB T-shirt | {\"size\":\"XL\",\"color\":\"blue\"}           |\n| Thinkpad Laptop | {\"color\":\"black\",\"warranty\":\"3 years\"} |\n+-----------------+----------------------------------------+\n"], "Category": ["Dynamic Columns Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": ["select item_name, COLUMN_JSON(dynamic_cols) from assets;"], "Wrong Messages from Ineffective SQLs Refined": ["(pymysql.err.ProgrammingError) (1146, \"Table 'PINOLO_MariaDB.assets' doesn't exist\")\n[SQL: select item_name, COLUMN_JSON(dynamic_cols) from assets;]\n(Background on this error at: https://sqlalche.me/e/20/f405)"]}
{"HTML": "https://mariadb.com//kb/en/cume_dist/", "Title": "CUME_DIST", "Feature": ["CUME_DIST() OVER ( \n  [ PARTITION BY partition_expression ] \n  [ ORDER BY order_list ]\n)\n"], "Description": ["CUME_DIST() is a window function that returns the cumulative distribution of a given row. The following formula is used to calculate the value:", "(number of rows <= current row) / (total rows)\n"], "Examples": ["create table t1 (\n  pk int primary key,\n  a int,\n  b int\n);\n\n\ninsert into t1 values\n( 1 , 0, 10),\n( 2 , 0, 10),\n( 3 , 1, 10),\n( 4 , 1, 10),\n( 8 , 2, 10),\n( 5 , 2, 20),\n( 6 , 2, 20),\n( 7 , 2, 20),\n( 9 , 4, 20),\n(10 , 4, 20);\n\nselect pk, a, b,\n    rank() over (order by a) as rank,\n    percent_rank() over (order by a) as pct_rank,\n    cume_dist() over (order by a) as cume_dist\nfrom t1;\n+----+------+------+------+--------------+--------------+\n| pk | a    | b    | rank | pct_rank     | cume_dist    |\n+----+------+------+------+--------------+--------------+\n|  1 |    0 |   10 |    1 | 0.0000000000 | 0.2000000000 |\n|  2 |    0 |   10 |    1 | 0.0000000000 | 0.2000000000 |\n|  3 |    1 |   10 |    3 | 0.2222222222 | 0.4000000000 |\n|  4 |    1 |   10 |    3 | 0.2222222222 | 0.4000000000 |\n|  5 |    2 |   20 |    5 | 0.4444444444 | 0.8000000000 |\n|  6 |    2 |   20 |    5 | 0.4444444444 | 0.8000000000 |\n|  7 |    2 |   20 |    5 | 0.4444444444 | 0.8000000000 |\n|  8 |    2 |   10 |    5 | 0.4444444444 | 0.8000000000 |\n|  9 |    4 |   20 |    9 | 0.8888888889 | 1.0000000000 |\n| 10 |    4 |   20 |    9 | 0.8888888889 | 1.0000000000 |\n+----+------+------+------+--------------+--------------+\n\nselect pk, a, b,\n       percent_rank() over (order by pk) as pct_rank,\n       cume_dist() over (order by pk) as cume_dist\nfrom t1 order by pk;\n+----+------+------+--------------+--------------+\n| pk | a    | b    | pct_rank     | cume_dist    |\n+----+------+------+--------------+--------------+\n|  1 |    0 |   10 | 0.0000000000 | 0.1000000000 |\n|  2 |    0 |   10 | 0.1111111111 | 0.2000000000 |\n|  3 |    1 |   10 | 0.2222222222 | 0.3000000000 |\n|  4 |    1 |   10 | 0.3333333333 | 0.4000000000 |\n|  5 |    2 |   20 | 0.4444444444 | 0.5000000000 |\n|  6 |    2 |   20 | 0.5555555556 | 0.6000000000 |\n|  7 |    2 |   20 | 0.6666666667 | 0.7000000000 |\n|  8 |    2 |   10 | 0.7777777778 | 0.8000000000 |\n|  9 |    4 |   20 | 0.8888888889 | 0.9000000000 |\n| 10 |    4 |   20 | 1.0000000000 | 1.0000000000 |\n+----+------+------+--------------+--------------+\n\nselect pk, a, b,\n        percent_rank() over (partition by a order by a) as pct_rank,\n        cume_dist() over (partition by a order by a) as cume_dist\nfrom t1;\n+----+------+------+--------------+--------------+\n| pk | a    | b    | pct_rank     | cume_dist    |\n+----+------+------+--------------+--------------+\n|  1 |    0 |   10 | 0.0000000000 | 1.0000000000 |\n|  2 |    0 |   10 | 0.0000000000 | 1.0000000000 |\n|  3 |    1 |   10 | 0.0000000000 | 1.0000000000 |\n|  4 |    1 |   10 | 0.0000000000 | 1.0000000000 |\n|  5 |    2 |   20 | 0.0000000000 | 1.0000000000 |\n|  6 |    2 |   20 | 0.0000000000 | 1.0000000000 |\n|  7 |    2 |   20 | 0.0000000000 | 1.0000000000 |\n|  8 |    2 |   10 | 0.0000000000 | 1.0000000000 |\n|  9 |    4 |   20 | 0.0000000000 | 1.0000000000 |\n| 10 |    4 |   20 | 0.0000000000 | 1.0000000000 |\n+----+------+------+--------------+--------------+\n"], "Category": ["Window Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": ["select pk, a, b,\n    rank() over (order by a) as rank,\n    percent_rank() over (order by a) as pct_rank,\n    cume_dist() over (order by a) as cume_dist\nfrom t1;", "select pk, a, b,\n       percent_rank() over (order by pk) as pct_rank,\n       cume_dist() over (order by pk) as cume_dist\nfrom t1 order by pk;", "select pk, a, b,\n        percent_rank() over (partition by a order by a) as pct_rank,\n        cume_dist() over (partition by a order by a) as cume_dist\nfrom t1;"], "Wrong Messages from Ineffective SQLs Refined": ["(pymysql.err.OperationalError) (1054, \"Unknown column 'pk' in 'field list'\")\n[SQL: select pk, a, b,\n    rank() over (order by a) as rank,\n    percent_rank() over (order by a) as pct_rank,\n    cume_dist() over (order by a) as cume_dist\nfrom t1;]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "(pymysql.err.OperationalError) (1054, \"Unknown column 'pk' in 'field list'\")\n[SQL: select pk, a, b,\n       percent_rank() over (order by pk) as pct_rank,\n       cume_dist() over (order by pk) as cume_dist\nfrom t1 order by pk;]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "(pymysql.err.OperationalError) (1054, \"Unknown column 'pk' in 'field list'\")\n[SQL: select pk, a, b,\n        percent_rank() over (partition by a order by a) as pct_rank,\n        cume_dist() over (partition by a order by a) as cume_dist\nfrom t1;]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)"]}
{"HTML": "https://mariadb.com//kb/en/dense_rank/", "Title": "DENSE_RANK", "Feature": ["DENSE_RANK() OVER (\n  [ PARTITION BY partition_expression ]\n  [ ORDER BY order_list ]\n) \n"], "Description": ["DENSE_RANK() is a window function that displays the number of a given row, starting at one and following the ORDER BY sequence of the window function, with identical values receiving the same result. Unlike the  RANK() function, there are no skipped values if the preceding results are identical. It is also similar to the ROW_NUMBER() function except that in that function, identical values will receive a different row number for each result."], "Examples": ["CREATE TABLE student(course VARCHAR(10), mark int, name varchar(10));\n\nINSERT INTO student VALUES \n  ('Maths', 60, 'Thulile'),\n  ('Maths', 60, 'Pritha'),\n  ('Maths', 70, 'Voitto'),\n  ('Maths', 55, 'Chun'),\n  ('Biology', 60, 'Bilal'),\n   ('Biology', 70, 'Roger');\n\nSELECT \n  RANK() OVER (PARTITION BY course ORDER BY mark DESC) AS rank, \n  DENSE_RANK() OVER (PARTITION BY course ORDER BY mark DESC) AS dense_rank, \n  ROW_NUMBER() OVER (PARTITION BY course ORDER BY mark DESC) AS row_num, \n  course, mark, name \nFROM student ORDER BY course, mark DESC;\n+------+------------+---------+---------+------+---------+\n| rank | dense_rank | row_num | course  | mark | name    |\n+------+------------+---------+---------+------+---------+\n|    1 |          1 |       1 | Biology |   70 | Roger   |\n|    2 |          2 |       2 | Biology |   60 | Bilal   |\n|    1 |          1 |       1 | Maths   |   70 | Voitto  |\n|    2 |          2 |       2 | Maths   |   60 | Thulile |\n|    2 |          2 |       3 | Maths   |   60 | Pritha  |\n|    4 |          3 |       4 | Maths   |   55 | Chun    |\n+------+------------+---------+---------+------+---------+\n"], "Category": ["Window Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": ["SELECT \n  RANK() OVER (PARTITION BY course ORDER BY mark DESC) AS rank, \n  DENSE_RANK() OVER (PARTITION BY course ORDER BY mark DESC) AS dense_rank, \n  ROW_NUMBER() OVER (PARTITION BY course ORDER BY mark DESC) AS row_num, \n  course, mark, name \nFROM student ORDER BY course, mark DESC;"], "Wrong Messages from Ineffective SQLs Refined": ["(pymysql.err.OperationalError) (1054, \"Unknown column 'course' in 'field list'\")\n[SQL: SELECT \n  RANK() OVER (PARTITION BY course ORDER BY mark DESC) AS rank, \n  DENSE_RANK() OVER (PARTITION BY course ORDER BY mark DESC) AS dense_rank, \n  ROW_NUMBER() OVER (PARTITION BY course ORDER BY mark DESC) AS row_num, \n  course, mark, name \nFROM student ORDER BY course, mark DESC;]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)"]}
{"HTML": "https://mariadb.com//kb/en/des_encrypt/", "Title": "DES_ENCRYPT", "Feature": ["DES_ENCRYPT(str[,{key_num|key_str}])\n"], "Description": ["Encrypts the string with the given key using the Triple-DES algorithm.", "This function works only if MariaDB has been configured with TLS support.", "The encryption key to use is chosen based on the second argument to\nDES_ENCRYPT(), if one was given. With no argument, the first key from\nthe DES key file is used. With a key_num argument, the given key \nnumber (0-9) from the DES key file is used. With a key_str argument,\nthe given key string is used to encrypt str. ", "The key file can be specified with the --des-key-file server option.", "The return string is a binary string where the first character is \nCHAR(128 | key_num). If an error occurs, DES_ENCRYPT() returns NULL.", "The 128 is added to make it easier to recognize an encrypted key. If\nyou use a string key, key_num is 127.", "The string length for the result is given by this formula:", "new_len = orig_len + (8 - (orig_len % 8)) + 1\n", "Each line in the DES key file has the following format:", "key_num des_key_str\n", "Each key_num value must be a number in the range from 0 to 9. Lines in\nthe file may be in any order. des_key_str is the string that is used\nto encrypt the message. There should be at least one space between the\nnumber and the key. The first key is the default key that is used if\nyou do not specify any key argument to DES_ENCRYPT().", "You can tell MariaDB to read new key values from the key file with the\nFLUSH DES_KEY_FILE statement. This requires the RELOAD privilege.", "One benefit of having a set of default keys is that it gives\napplications a way to check for the existence of encrypted column\nvalues, without giving the end user the right to decrypt those values."], "Examples": ["SELECT customer_address FROM customer_table \n   WHERE crypted_credit_card = DES_ENCRYPT('credit_card_number');\n"], "Category": ["Encryption, Hashing and Compression Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": ["SELECT customer_address FROM customer_table \n   WHERE crypted_credit_card = DES_ENCRYPT('credit_card_number');"], "Wrong Messages from Ineffective SQLs Refined": ["(pymysql.err.ProgrammingError) (1146, \"Table 'PINOLO_MariaDB.customer_table' doesn't exist\")\n[SQL: SELECT customer_address FROM customer_table \n   WHERE crypted_credit_card = DES_ENCRYPT('credit_card_number');]\n(Background on this error at: https://sqlalche.me/e/20/f405)"]}
{"HTML": "https://mariadb.com//kb/en/encode/", "Title": "ENCODE", "Feature": ["ENCODE(str,pass_str)\n"], "Description": ["ENCODE is not considered cryptographically secure, and should not be used for password encryption.\n", "Encrypt str using pass_str as the password. To decrypt the result, use\nDECODE().", "The result is a binary string of the same length as str.", "The strength of the encryption is based on how good the random generator is. ", "It is not recommended to rely on the encryption performed by the ENCODE function. Using a salt value (changed when a password is updated) will improve matters somewhat, but for storing passwords, consider a more cryptographically secure function, such as SHA2()."], "Examples": ["ENCODE('not so secret text', CONCAT('random_salt','password'))\n"], "Category": ["Encryption, Hashing and Compression Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": [], "Wrong Messages from Ineffective SQLs Refined": []}
{"HTML": "https://mariadb.com//kb/en/json_array_intersect/", "Title": "JSON_ARRAY_INTERSECT", "Feature": ["JSON_ARRAY_INTERSECT(arr1, arr2)\n"], "Description": ["Finds intersection between two json arrays and returns an array of items found in both array."], "Examples": ["SET @json1= '[1,2,3]';\nSET @json2= '[1,2,4]';\n\nSELECT json_array_intersect(@json1, @json2); \n+--------------------------------------+\n| json_array_intersect(@json1, @json2) |\n+--------------------------------------+\n| [1, 2]                               |\n+--------------------------------------+\n"], "Category": ["JSON Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": ["SELECT json_array_intersect(@json1, @json2);"], "Wrong Messages from Ineffective SQLs Refined": ["(pymysql.err.OperationalError) (2013, 'Lost connection to MySQL server during query')\n[SQL: SELECT json_array_intersect(@json1, @json2);]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)"]}
{"HTML": "https://mariadb.com//kb/en/json_normalize/", "Title": "JSON_NORMALIZE", "Feature": ["JSON_NORMALIZE(json)\n"], "Description": ["Recursively sorts keys and removes spaces, allowing comparison of json documents for equality."], "Examples": ["CREATE TABLE t1 (\n id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,\n val JSON,\n /* other columns here */\n PRIMARY KEY (id)\n);\n", "ALTER TABLE t1\n   ADD COLUMN jnorm JSON AS (JSON_NORMALIZE(val)) VIRTUAL,\n   ADD UNIQUE KEY (jnorm);\n", "INSERT INTO t1 (val) VALUES ('{\"name\":\"alice\",\"color\":\"blue\"}');\n", "INSERT INTO t1 (val) VALUES ('{ \"color\": \"blue\", \"name\": \"alice\" }');\nERROR 1062 (23000): Duplicate entry '{\"color\":\"blue\",\"name\":\"alice\"}' for key 'jnorm'\n"], "Category": ["JSON Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": ["ALTER TABLE t1\n   ADD COLUMN jnorm JSON AS (JSON_NORMALIZE(val)) VIRTUAL,\n   ADD UNIQUE KEY (jnorm);"], "Wrong Messages from Ineffective SQLs Refined": ["(pymysql.err.OperationalError) (1060, \"Duplicate column name 'jnorm'\")\n[SQL: ALTER TABLE t1\n   ADD COLUMN jnorm JSON AS (JSON_NORMALIZE(val)) VIRTUAL,\n   ADD UNIQUE KEY (jnorm);]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)"]}
{"HTML": "https://mariadb.com//kb/en/json_objectagg/", "Title": "JSON_OBJECTAGG", "Feature": ["JSON_OBJECTAGG(key, value)\n"], "Description": ["JSON_OBJECTAGG returns a JSON object containing key-value pairs. It takes two expressions that evaluate to a single value, or two column names, as arguments, the first used as a key, and the second as a value. ", "The maximum returned length in bytes is determined by the group_concat_max_len server system variable.", "Returns NULL in the case of an error, or if the result contains no rows.", "JSON_OBJECTAGG cannot currently be used as a window function."], "Examples": ["select * from t1;\n+------+-------+\n| a    | b     |\n+------+-------+\n|    1 | Hello |\n|    1 | World |\n|    2 | This  |\n+------+-------+\n\nSELECT JSON_OBJECTAGG(a, b) FROM t1;\n+----------------------------------------+\n| JSON_OBJECTAGG(a, b)                   |\n+----------------------------------------+\n| {\"1\":\"Hello\", \"1\":\"World\", \"2\":\"This\"} |\n+----------------------------------------+\n"], "Category": ["JSON Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": ["SELECT JSON_OBJECTAGG(a, b) FROM t1;"], "Wrong Messages from Ineffective SQLs Refined": ["(pymysql.err.OperationalError) (1054, \"Unknown column 'b' in 'field list'\")\n[SQL: SELECT JSON_OBJECTAGG(a, b) FROM t1;]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)"]}
{"HTML": "https://mariadb.com//kb/en/json_object_filter_keys/", "Title": "JSON_OBJECT_FILTER_KEYS", "Feature": ["JSON_OBJECT_FILTER_KEYS(obj, array_keys)\n"], "Description": ["JSON_OBJECT_FILTER_KEYS returns a JSON object with keys from the object that are also present in the array as string. It is used when one wants to get key-value pair such that the keys are common but the values may not be common."], "Examples": ["SET @obj1= '{ \"a\": 1, \"b\": 2, \"c\": 3}';\nSET @obj2= '{\"b\" : 10, \"c\": 20, \"d\": 30}';\nSELECT JSON_OBJECT_FILTER_KEYS (@obj1, JSON_ARRAY_INTERSECT(JSON_KEYS(@obj1), JSON_KEYS(@obj2)));\n+-------------------------------------------------------------------------------------------+\n| JSON_OBJECT_FILTER_KEYS (@obj1, JSON_ARRAY_INTERSECT(JSON_KEYS(@obj1), JSON_KEYS(@obj2))) |\n+-------------------------------------------------------------------------------------------+\n| {\"b\": 2, \"c\": 3}                                                                          |\n+-------------------------------------------------------------------------------------------+\n"], "Category": ["JSON Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": ["SELECT JSON_OBJECT_FILTER_KEYS (@obj1, JSON_ARRAY_INTERSECT(JSON_KEYS(@obj1), JSON_KEYS(@obj2)));"], "Wrong Messages from Ineffective SQLs Refined": ["(pymysql.err.OperationalError) (2013, 'Lost connection to MySQL server during query')\n[SQL: SELECT JSON_OBJECT_FILTER_KEYS (@obj1, JSON_ARRAY_INTERSECT(JSON_KEYS(@obj1), JSON_KEYS(@obj2)));]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)"]}
{"HTML": "https://mariadb.com//kb/en/json_query/", "Title": "JSON_QUERY", "Feature": ["JSON_QUERY(json_doc, path)\n"], "Description": ["Given a JSON document, returns an object or array specified by the path. Returns NULL if not given a valid JSON document, or if there is no match."], "Examples": ["select json_query('{\"key1\":{\"a\":1, \"b\":[1,2]}}', '$.key1');\n+-----------------------------------------------------+\n| json_query('{\"key1\":{\"a\":1, \"b\":[1,2]}}', '$.key1') |\n+-----------------------------------------------------+\n| {\"a\":1, \"b\":[1,2]}                                  |\n+-----------------------------------------------------+\n\nselect json_query('{\"key1\":123, \"key1\": [1,2,3]}', '$.key1');\n+-------------------------------------------------------+\n| json_query('{\"key1\":123, \"key1\": [1,2,3]}', '$.key1') |\n+-------------------------------------------------------+\n| [1,2,3]                                               |\n+-------------------------------------------------------+\n"], "Category": ["JSON Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": ["select json_query('{\"key1\":{\"a\":1, \"b\":[1,2]}}', '$.key1');", "select json_query('{\"key1\":123, \"key1\": [1,2,3]}', '$.key1');"], "Wrong Messages from Ineffective SQLs Refined": ["(sqlalchemy.exc.InvalidRequestError) A value is required for bind parameter '1'\n[SQL: select json_query('{\"key1\":{\"a\"%(1)s, \"b\":[1,2]}}', '$.key1');]\n(Background on this error at: https://sqlalche.me/e/20/cd3x)", "(sqlalchemy.exc.InvalidRequestError) A value is required for bind parameter '123'\n[SQL: select json_query('{\"key1\"%(123)s, \"key1\": [1,2,3]}', '$.key1');]\n(Background on this error at: https://sqlalche.me/e/20/cd3x)"]}
{"HTML": "https://mariadb.com//kb/en/json_schema_valid/", "Title": "JSON_SCHEMA_VALID", "Feature": [], "Description": ["JSON_SCHEMA_VALID allows MariaDB to support JSON schema validation. If a given json is valid against a schema it returns true. When JSON does not validate against the schema, it does not return a message about which keyword it failed against and only returns false.", "The function supports JSON Schema Draft 2020 with a few exceptions:", "External resources are not supported\nHyper schema keywords are not supported\nFormats like date, email etc are treated as annotations.\n"], "Examples": ["CREATE TABLE obj_table(val_obj JSON CHECK(JSON_SCHEMA_VALID('{\n  \"type\":\"object\",\n    \"properties\": {\n      \"number1\":{\n        \"type\":\"number\",\n        \"maximum\":5,\n        \"const\":4\n      },\n      \"string1\":{\n        \"type\":\"string\",\n        \"maxLength\":5,\n        \"minLength\":3\n      },\n    \"object1\":{\n      \"type\":\"object\",\n       \"properties\":{\n         \"key1\": {\"type\":\"string\"},\n         \"key2\":{\"type\":\"array\"},\n         \"key3\":{\"type\":\"number\", \"minimum\":3}\n       },\n       \"dependentRequired\": { \"key1\":[\"key3\"] }\n     }\n  },\n  \"required\":[\"number1\",\"object1\"]\n  }', val_obj)));\n\nINSERT INTO obj_table VALUES(\n  '{\"number1\":4, \"string1\":\"abcd\", \n  \"object1\":{\"key1\":\"val1\", \"key2\":[1,2,3, \"string1\"], \"key3\":4}}'\n);\n\nINSERT INTO obj_table VALUES(\n  '{\"number1\":3, \"string1\":\"abcd\", \n  \"object1\":{\"key1\":\"val1\", \"key2\":[1,2,3, \"string1\"], \"key3\":4}}'\n);\nERROR 4025 (23000): CONSTRAINT `obj_table.val_obj` failed for `test`.`obj_table`\n\nSELECT * FROM obj_table;\n+--------------------------------------------------------------------------------------------------+\n| val_obj                                                                                          |\n+--------------------------------------------------------------------------------------------------+\n| {\"number1\":4, \"string1\":\"abcd\", \"object1\":{\"key1\":\"val1\", \"key2\":[1,2,3, \"string1\"], \"key3\":4}} |\n+--------------------------------------------------------------------------------------------------+\n\nSET @schema= '{\n  \"properties\" : {\n    \"number1\":{ \"maximum\":10 },\n    \"string1\" : { \"maxLength\": 3} \n  }\n}';\n\nSELECT JSON_SCHEMA_VALID(@schema, '{ \"number1\":25, \"string1\":\"ab\" }');\n+----------------------------------------------------------------+\n| JSON_SCHEMA_VALID(@schema, '{ \"number1\":25, \"string1\":\"ab\" }') |\n+----------------------------------------------------------------+\n|                                                              0 |\n+----------------------------------------------------------------+\n\nSELECT JSON_SCHEMA_VALID(@schema, '{ \"number1\":10, \"string1\":\"ab\" }');\n+----------------------------------------------------------------+\n| JSON_SCHEMA_VALID(@schema, '{ \"number1\":10, \"string1\":\"ab\" }') |\n+----------------------------------------------------------------+\n|                                                              1 |\n+----------------------------------------------------------------+\n"], "Category": ["JSON Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": ["CREATE TABLE obj_table(val_obj JSON CHECK(JSON_SCHEMA_VALID('{\n  \"type\":\"object\",\n    \"properties\": {\n      \"number1\":{\n        \"type\":\"number\",\n        \"maximum\":5,\n        \"const\":4\n      },\n      \"string1\":{\n        \"type\":\"string\",\n        \"maxLength\":5,\n        \"minLength\":3\n      },\n    \"object1\":{\n      \"type\":\"object\",\n       \"properties\":{\n         \"key1\": {\"type\":\"string\"},\n         \"key2\":{\"type\":\"array\"},\n         \"key3\":{\"type\":\"number\", \"minimum\":3}\n       },\n       \"dependentRequired\": { \"key1\":[\"key3\"] }\n     }\n  },\n  \"required\":[\"number1\",\"object1\"]\n  }', val_obj)));", "SELECT JSON_SCHEMA_VALID(@schema, '{ \"number1\":25, \"string1\":\"ab\" }');", "SELECT JSON_SCHEMA_VALID(@schema, '{ \"number1\":10, \"string1\":\"ab\" }');"], "Wrong Messages from Ineffective SQLs Refined": ["(sqlalchemy.exc.InvalidRequestError) A value is required for bind parameter '5'\n[SQL: CREATE TABLE obj_table(val_obj JSON CHECK(JSON_SCHEMA_VALID('{\n  \"type\":\"object\",\n    \"properties\": {\n      \"number1\":{\n        \"type\":\"number\",\n        \"maximum\"%(5)s,\n        \"const\"%(4)s\n      },\n      \"string1\":{\n        \"type\":\"string\",\n        \"maxLength\"%(5)s,\n        \"minLength\"%(3)s\n      },\n    \"object1\":{\n      \"type\":\"object\",\n       \"properties\":{\n         \"key1\": {\"type\":\"string\"},\n         \"key2\":{\"type\":\"array\"},\n         \"key3\":{\"type\":\"number\", \"minimum\"%(3)s}\n       },\n       \"dependentRequired\": { \"key1\":[\"key3\"] }\n     }\n  },\n  \"required\":[\"number1\",\"object1\"]\n  }', val_obj)));]\n(Background on this error at: https://sqlalche.me/e/20/cd3x)", "(sqlalchemy.exc.InvalidRequestError) A value is required for bind parameter '25'\n[SQL: SELECT JSON_SCHEMA_VALID(@schema, '{ \"number1\"%(25)s, \"string1\":\"ab\" }');]\n(Background on this error at: https://sqlalche.me/e/20/cd3x)", "(sqlalchemy.exc.InvalidRequestError) A value is required for bind parameter '10'\n[SQL: SELECT JSON_SCHEMA_VALID(@schema, '{ \"number1\"%(10)s, \"string1\":\"ab\" }');]\n(Background on this error at: https://sqlalche.me/e/20/cd3x)"]}
{"HTML": "https://mariadb.com//kb/en/json_set/", "Title": "JSON_SET", "Feature": ["JSON_SET(json_doc, path, val[, path, val] ...)\n"], "Description": ["Updates or inserts data into a JSON document, returning the result, or NULL if any of the arguments are NULL or the optional path fails to find an object.", "An error will occur if the JSON document is invalid, the path is invalid or if the path contains a * or  wildcard.", "JSON_SET can update or insert data, while JSON_REPLACE can only update, and JSON_INSERT only insert. "], "Examples": ["SELECT JSON_SET(Priv, '$.locked', 'true') FROM mysql.global_priv\n"], "Category": ["JSON Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": [], "Wrong Messages from Ineffective SQLs Refined": []}
{"HTML": "https://mariadb.com//kb/en/last_value/", "Title": "LAST_VALUE", "Feature": ["LAST_VALUE(expr,[expr,...])\n", "LAST_VALUE(expr) OVER (\n  [ PARTITION BY partition_expression ]\n  [ ORDER BY order_list ]\n) \n"], "Description": ["LAST_VALUE() evaluates all expressions and returns the last.", "This is useful together with setting user variables to a value with @var:=expr, for example when you want to get data of rows updated/deleted without having to do two queries against the table.", "LAST_VALUE can be used as a window function.", "Returns NULL if no last value exists."], "Examples": ["CREATE TABLE t1 (a int, b int);\nINSERT INTO t1 VALUES(1,10),(2,20);\nDELETE FROM t1 WHERE a=1 AND last_value(@a:=a,@b:=b,1);\nSELECT @a,@b;\n+------+------+\n| @a   | @b   |\n+------+------+\n|    1 |   10 |\n+------+------+\n", "CREATE TABLE t1 (\n  pk int primary key,\n  a int,\n  b int,\n  c char(10),\n  d decimal(10, 3),\n  e real\n);\n\nINSERT INTO t1 VALUES\n( 1, 0, 1,    'one',    0.1,  0.001),\n( 2, 0, 2,    'two',    0.2,  0.002),\n( 3, 0, 3,    'three',  0.3,  0.003),\n( 4, 1, 2,    'three',  0.4,  0.004),\n( 5, 1, 1,    'two',    0.5,  0.005),\n( 6, 1, 1,    'one',    0.6,  0.006),\n( 7, 2, NULL, 'n_one',  0.5,  0.007),\n( 8, 2, 1,    'n_two',  NULL, 0.008),\n( 9, 2, 2,    NULL,     0.7,  0.009),\n(10, 2, 0,    'n_four', 0.8,  0.010),\n(11, 2, 10,   NULL,     0.9,  NULL);\n\nSELECT pk, FIRST_VALUE(pk) OVER (ORDER BY pk) AS first_asc,\n           LAST_VALUE(pk) OVER (ORDER BY pk) AS last_asc,\n           FIRST_VALUE(pk) OVER (ORDER BY pk DESC) AS first_desc,\n           LAST_VALUE(pk) OVER (ORDER BY pk DESC) AS last_desc\nFROM t1\nORDER BY pk DESC;\n\n+----+-----------+----------+------------+-----------+\n| pk | first_asc | last_asc | first_desc | last_desc |\n+----+-----------+----------+------------+-----------+\n| 11 |         1 |       11 |         11 |        11 |\n| 10 |         1 |       10 |         11 |        10 |\n|  9 |         1 |        9 |         11 |         9 |\n|  8 |         1 |        8 |         11 |         8 |\n|  7 |         1 |        7 |         11 |         7 |\n|  6 |         1 |        6 |         11 |         6 |\n|  5 |         1 |        5 |         11 |         5 |\n|  4 |         1 |        4 |         11 |         4 |\n|  3 |         1 |        3 |         11 |         3 |\n|  2 |         1 |        2 |         11 |         2 |\n|  1 |         1 |        1 |         11 |         1 |\n+----+-----------+----------+------------+-----------+\n", "CREATE OR REPLACE TABLE t1 (i int);\nINSERT INTO t1 VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10);\n\nSELECT i,\n  FIRST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW and 1 FOLLOWING) AS f_1f,\n  LAST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW and 1 FOLLOWING) AS l_1f,\n  FIRST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS f_1p1f,\n  LAST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS l_1p1f,\n  FIRST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 2 PRECEDING AND 1 PRECEDING) AS f_2p1p,\n  LAST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 2 PRECEDING AND 1 PRECEDING) AS l_2p1p,\n  FIRST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 1 FOLLOWING AND 2 FOLLOWING) AS f_1f2f,\n  LAST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 1 FOLLOWING AND 2 FOLLOWING) AS l_1f2f\nFROM t1;\n\n+------+------+------+--------+--------+--------+--------+--------+--------+\n| i    | f_1f | l_1f | f_1p1f | l_1p1f | f_2p1p | l_2p1p | f_1f2f | l_1f2f |\n+------+------+------+--------+--------+--------+--------+--------+--------+\n|    1 |    1 |    2 |      1 |      2 |   NULL |   NULL |      2 |      3 |\n|    2 |    2 |    3 |      1 |      3 |      1 |      1 |      3 |      4 |\n|    3 |    3 |    4 |      2 |      4 |      1 |      2 |      4 |      5 |\n|    4 |    4 |    5 |      3 |      5 |      2 |      3 |      5 |      6 |\n|    5 |    5 |    6 |      4 |      6 |      3 |      4 |      6 |      7 |\n|    6 |    6 |    7 |      5 |      7 |      4 |      5 |      7 |      8 |\n|    7 |    7 |    8 |      6 |      8 |      5 |      6 |      8 |      9 |\n|    8 |    8 |    9 |      7 |      9 |      6 |      7 |      9 |     10 |\n|    9 |    9 |   10 |      8 |     10 |      7 |      8 |     10 |     10 |\n|   10 |   10 |   10 |      9 |     10 |      8 |      9 |   NULL |   NULL |\n+------+------+------+--------+--------+--------+--------+--------+--------+\n"], "Category": ["Information Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": ["DELETE FROM t1 WHERE a=1 AND last_value(@a:=a,@b:=b,1);", "SELECT pk, FIRST_VALUE(pk) OVER (ORDER BY pk) AS first_asc,\n           LAST_VALUE(pk) OVER (ORDER BY pk) AS last_asc,\n           FIRST_VALUE(pk) OVER (ORDER BY pk DESC) AS first_desc,\n           LAST_VALUE(pk) OVER (ORDER BY pk DESC) AS last_desc\nFROM t1\nORDER BY pk DESC;", "SELECT i,\n  FIRST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW and 1 FOLLOWING) AS f_1f,\n  LAST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW and 1 FOLLOWING) AS l_1f,\n  FIRST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS f_1p1f,\n  LAST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS l_1p1f,\n  FIRST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 2 PRECEDING AND 1 PRECEDING) AS f_2p1p,\n  LAST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 2 PRECEDING AND 1 PRECEDING) AS l_2p1p,\n  FIRST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 1 FOLLOWING AND 2 FOLLOWING) AS f_1f2f,\n  LAST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 1 FOLLOWING AND 2 FOLLOWING) AS l_1f2f\nFROM t1;"], "Wrong Messages from Ineffective SQLs Refined": ["(pymysql.err.OperationalError) (1054, \"Unknown column 'b' in 'where clause'\")\n[SQL: DELETE FROM t1 WHERE a=1 AND last_value(@a:=a,@b:=b,1);]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "(pymysql.err.OperationalError) (1054, \"Unknown column 'pk' in 'field list'\")\n[SQL: SELECT pk, FIRST_VALUE(pk) OVER (ORDER BY pk) AS first_asc,\n           LAST_VALUE(pk) OVER (ORDER BY pk) AS last_asc,\n           FIRST_VALUE(pk) OVER (ORDER BY pk DESC) AS first_desc,\n           LAST_VALUE(pk) OVER (ORDER BY pk DESC) AS last_desc\nFROM t1\nORDER BY pk DESC;]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "(pymysql.err.OperationalError) (1054, \"Unknown column 'i' in 'field list'\")\n[SQL: SELECT i,\n  FIRST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW and 1 FOLLOWING) AS f_1f,\n  LAST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW and 1 FOLLOWING) AS l_1f,\n  FIRST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS f_1p1f,\n  LAST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS l_1p1f,\n  FIRST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 2 PRECEDING AND 1 PRECEDING) AS f_2p1p,\n  LAST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 2 PRECEDING AND 1 PRECEDING) AS l_2p1p,\n  FIRST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 1 FOLLOWING AND 2 FOLLOWING) AS f_1f2f,\n  LAST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 1 FOLLOWING AND 2 FOLLOWING) AS l_1f2f\nFROM t1;]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)"]}
{"HTML": "https://mariadb.com//kb/en/like/", "Title": "LIKE", "Feature": ["expr LIKE pat [ESCAPE 'escape_char']\nexpr NOT LIKE pat [ESCAPE 'escape_char']\n"], "Description": ["Tests whether expr matches the pattern pat. Returns either 1 (TRUE) or 0 (FALSE).\nBoth expr and pat may be any valid expression and are evaluated to strings.\nPatterns may use the following wildcard characters:", "% matches any number of characters, including zero.\n_ matches any single character.\n", "Use NOT LIKE to test if a string does not match a pattern. This is equivalent to using\nthe NOT operator on the entire LIKE expression.", "If either the expression or the pattern is NULL, the result is NULL.", "LIKE performs case-insensitive substring matches if the collation for the\nexpression and pattern is case-insensitive. For case-sensitive matches, declare either argument\nto use a binary collation using COLLATE, or coerce either of them to a BINARY\nstring using CAST. Use SHOW COLLATION to get a list of\navailable collations. Collations ending in _bin are case-sensitive.", "Numeric arguments are coerced to binary strings.", "The _ wildcard matches a single character, not byte. It will only match a multi-byte character\nif it is valid in the expression's character set. For example, _ will match _utf8\"\u20ac\", but it\nwill not match _latin1\"\u20ac\" because the Euro sign is not a valid latin1 character. If necessary,\nuse CONVERT to use the expression in a different character set.", "If you need to match the characters _ or %, you must escape them. By default,\nyou can prefix the wildcard characters the backslash character \\ to escape them.\nThe backslash is used both to encode special characters like newlines when a string is\nparsed as well as to escape wildcards in a pattern after parsing. Thus, to match an\nactual backslash, you sometimes need to double-escape it as \"\\\\\\\\\".", "To avoid difficulties with the backslash character, you can change the wildcard escape\ncharacter using ESCAPE in a LIKE expression. The argument to ESCAPE\nmust be a single-character string."], "Examples": ["CREATE TABLE t1 (d VARCHAR(16));\nINSERT INTO t1 VALUES \n  (\"Monday\"), (\"Tuesday\"), (\"Wednesday\"), \n  (\"Thursday\"), (\"Friday\"), (\"Saturday\"), (\"Sunday\");\nSELECT * FROM t1 WHERE d LIKE \"T%\";\n", "SELECT * FROM t1 WHERE d LIKE \"T%\";\n+----------+\n| d        |\n+----------+\n| Tuesday  |\n| Thursday |\n+----------+\n", "SELECT * FROM t1 WHERE d LIKE \"%es%\";\n", "SELECT * FROM t1 WHERE d LIKE \"%es%\";\n+-----------+\n| d         |\n+-----------+\n| Tuesday   |\n| Wednesday |\n+-----------+\n", "SELECT * FROM t1 WHERE d like \"___day\";\n", "SELECT * FROM t1 WHERE d like \"___day\";\n+---------+\n| d       |\n+---------+\n| Monday  |\n| Friday  |\n| Sunday  |\n+---------+\n", "SELECT * FROM t1 where d like \"t%\";\n", "SELECT * FROM t1 where d like \"t%\";\n+----------+\n| d        |\n+----------+\n| Tuesday  |\n| Thursday |\n+----------+\n", "SELECT * FROM t1 WHERE d like \"t%\" COLLATE latin1_bin;\n", "SELECT * FROM t1 WHERE d like \"t%\" COLLATE latin1_bin;\nEmpty set (0.00 sec)\n", "CREATE TABLE t2 (d DATETIME);\nINSERT INTO t2 VALUES\n    (\"2007-01-30 21:31:07\"),\n    (\"1983-10-15 06:42:51\"),\n    (\"2011-04-21 12:34:56\"),\n    (\"2011-10-30 06:31:41\"),\n    (\"2011-01-30 14:03:25\"),\n    (\"2004-10-07 11:19:34\");\nSELECT * FROM t2 WHERE DAYNAME(d) LIKE \"T%\";\n", "SELECT * FROM t2 WHERE DAYNAME(d) LIKE \"T%\";\n+------------------+\n| d                |\n+------------------+\n| 2007-01-30 21:31 |\n| 2011-04-21 12:34 |\n| 2004-10-07 11:19 |\n+------------------+\n3 rows in set, 7 warnings (0.00 sec)\n"], "Category": ["String Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": ["SELECT * FROM t1 WHERE d LIKE \"T%\";", "SELECT * FROM t1 WHERE d LIKE \"T%\";", "SELECT * FROM t1 WHERE d LIKE \"%es%\";", "SELECT * FROM t1 WHERE d LIKE \"%es%\";", "SELECT * FROM t1 WHERE d like \"___day\";", "SELECT * FROM t1 WHERE d like \"___day\";", "SELECT * FROM t1 where d like \"t%\";", "SELECT * FROM t1 where d like \"t%\";", "SELECT * FROM t1 WHERE d like \"t%\" COLLATE latin1_bin;", "SELECT * FROM t1 WHERE d like \"t%\" COLLATE latin1_bin;", "SELECT * FROM t2 WHERE DAYNAME(d) LIKE \"T%\";", "SELECT * FROM t2 WHERE DAYNAME(d) LIKE \"T%\";"], "Wrong Messages from Ineffective SQLs Refined": ["(pymysql.err.OperationalError) (1054, \"Unknown column 'd' in 'where clause'\")\n[SQL: SELECT * FROM t1 WHERE d LIKE \"T%%\";]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "(pymysql.err.OperationalError) (1054, \"Unknown column 'd' in 'where clause'\")\n[SQL: SELECT * FROM t1 WHERE d LIKE \"T%%\";]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "(pymysql.err.OperationalError) (1054, \"Unknown column 'd' in 'where clause'\")\n[SQL: SELECT * FROM t1 WHERE d LIKE \"%%es%%\";]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "(pymysql.err.OperationalError) (1054, \"Unknown column 'd' in 'where clause'\")\n[SQL: SELECT * FROM t1 WHERE d LIKE \"%%es%%\";]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "(pymysql.err.OperationalError) (1054, \"Unknown column 'd' in 'where clause'\")\n[SQL: SELECT * FROM t1 WHERE d like \"___day\";]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "(pymysql.err.OperationalError) (1054, \"Unknown column 'd' in 'where clause'\")\n[SQL: SELECT * FROM t1 WHERE d like \"___day\";]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "(pymysql.err.OperationalError) (1054, \"Unknown column 'd' in 'where clause'\")\n[SQL: SELECT * FROM t1 where d like \"t%%\";]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "(pymysql.err.OperationalError) (1054, \"Unknown column 'd' in 'where clause'\")\n[SQL: SELECT * FROM t1 where d like \"t%%\";]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "(pymysql.err.OperationalError) (1054, \"Unknown column 'd' in 'where clause'\")\n[SQL: SELECT * FROM t1 WHERE d like \"t%%\" COLLATE latin1_bin;]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "(pymysql.err.OperationalError) (1054, \"Unknown column 'd' in 'where clause'\")\n[SQL: SELECT * FROM t1 WHERE d like \"t%%\" COLLATE latin1_bin;]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "(pymysql.err.OperationalError) (1054, \"Unknown column 'd' in 'where clause'\")\n[SQL: SELECT * FROM t2 WHERE DAYNAME(d) LIKE \"T%%\";]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "(pymysql.err.OperationalError) (1054, \"Unknown column 'd' in 'where clause'\")\n[SQL: SELECT * FROM t2 WHERE DAYNAME(d) LIKE \"T%%\";]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)"]}
{"HTML": "https://mariadb.com//kb/en/list_add/", "Title": "list_add", "Feature": ["sys.list_add(list,value)\n"], "Description": ["list_add is a stored function available with the Sys Schema.", "It takes a list to be be modified and a value to be added to the list, returning the resulting value. This can be used, for example, to add a value to a system variable taking a comma-delimited list of options, such as sql_mode.", "The related function list_drop can be used to drop a value from a list."], "Examples": ["SELECT @@sql_mode;\n+-----------------------------------------------------------------------+\n| @@sql_mode                                                            |\n+-----------------------------------------------------------------------+\n| STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,\nNO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION |\n+-----------------------------------------------------------------------+\n\nSET @@sql_mode = sys.list_add(@@sql_mode, 'NO_ZERO_DATE');\n\nSELECT @@sql_mode;\n+-----------------------------------------------------------------------+\n| @@sql_mode                                                            |\n+-----------------------------------------------------------------------+\n| STRICT_TRANS_TABLES,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,\nNO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION |\n+-----------------------------------------------------------------------+\n"], "Category": ["No Category"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": ["CREATE_USER,NO_ENGINE_SUBSTITUTION |\n+-----------------------------------------------------------------------+\n\nSET @@sql_mode = sys.list_add(@@sql_mode, 'NO_ZERO_DATE');"], "Wrong Messages from Ineffective SQLs Refined": ["(pymysql.err.ProgrammingError) (1064, \"You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near 'CREATE_USER,NO_ENGINE_SUBSTITUTION |\\n+---------------------------------------...' at line 1\")\n[SQL: CREATE_USER,NO_ENGINE_SUBSTITUTION |\n+-----------------------------------------------------------------------+\n\nSET @@sql_mode = sys.list_add(@@sql_mode, 'NO_ZERO_DATE');]\n(Background on this error at: https://sqlalche.me/e/20/f405)"]}
{"HTML": "https://mariadb.com//kb/en/list_drop/", "Title": "list_drop", "Feature": ["sys.list_drop(list,value)\n"], "Description": ["list_drop is a stored function available with the Sys Schema.", "It takes a list to be be modified and a value to be dropped from the list, returning the resulting value. This can be used, for example, to remove a value from a system variable taking a comma-delimited list of options, such as sql_mode.", "The related function list_add can be used to add a value to a list."], "Examples": ["SELECT @@sql_mode;\n+-----------------------------------------------------------------------+\n| @@sql_mode                                                            |\n+-----------------------------------------------------------------------+\n| STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,\nNO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION |\n+-----------------------------------------------------------------------+\n\nSET @@sql_mode = sys.list_drop(@@sql_mode, 'NO_ENGINE_SUBSTITUTION');\n\nSELECT @@sql_mode;\n+-----------------------------------------------------------------------+\n| @@sql_mode                                                            |\n+-----------------------------------------------------------------------+\n| STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,\nNO_AUTO_CREATE_USER |\n+-----------------------------------------------------------------------+\n"], "Category": ["No Category"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": ["CREATE_USER,NO_ENGINE_SUBSTITUTION |\n+-----------------------------------------------------------------------+\n\nSET @@sql_mode = sys.list_drop(@@sql_mode, 'NO_ENGINE_SUBSTITUTION');"], "Wrong Messages from Ineffective SQLs Refined": ["(pymysql.err.ProgrammingError) (1064, \"You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near 'CREATE_USER,NO_ENGINE_SUBSTITUTION |\\n+---------------------------------------...' at line 1\")\n[SQL: CREATE_USER,NO_ENGINE_SUBSTITUTION |\n+-----------------------------------------------------------------------+\n\nSET @@sql_mode = sys.list_drop(@@sql_mode, 'NO_ENGINE_SUBSTITUTION');]\n(Background on this error at: https://sqlalche.me/e/20/f405)"]}
{"HTML": "https://mariadb.com//kb/en/load_file/", "Title": "LOAD_FILE", "Feature": ["LOAD_FILE(file_name)\n"], "Description": ["Reads the file and returns the file contents as a string. To use this function, the file must be located on the server host, you must specify the full path name to the file, and you must have the FILE privilege.  The file must be readable by all and it must be less than the size, in bytes, of the max_allowed_packet system variable. If the secure_file_priv system variable is set to a non-empty directory name, the file to be loaded must be located in that directory.", "If the file does not exist or cannot be read because one of the preceding conditions is not satisfied, the function returns NULL.", "Since MariaDB 5.1, the character_set_filesystem system variable has controlled interpretation of file names that are given as literal strings.", "Statements using the LOAD_FILE() function are not safe for statement based replication. This is because the slave will execute the LOAD_FILE() command itself.  If the file doesn't exist on the slave, the function will return NULL."], "Examples": ["UPDATE t SET blob_col=LOAD_FILE('/tmp/picture') WHERE id=1;\n"], "Category": ["String Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": ["UPDATE t SET blob_col=LOAD_FILE('/tmp/picture') WHERE id=1;"], "Wrong Messages from Ineffective SQLs Refined": ["(pymysql.err.OperationalError) (1054, \"Unknown column 'blob_col' in 'field list'\")\n[SQL: UPDATE t SET blob_col=LOAD_FILE('/tmp/picture') WHERE id=1;]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)"]}
{"HTML": "https://mariadb.com//kb/en/match-against/", "Title": "MATCH AGAINST", "Feature": ["MATCH (col1,col2,...) AGAINST (expr [search_modifier])\n"], "Description": ["A special construct used to perform a fulltext search on a fulltext index.", "See Fulltext Index Overview for a full description, and Full-text Indexes for more articles on the topic."], "Examples": ["CREATE TABLE ft_myisam(copy TEXT,FULLTEXT(copy)) ENGINE=MyISAM;\n\nINSERT INTO ft_myisam(copy) VALUES ('Once upon a time'), ('There was a wicked witch'), \n ('Who ate everybody up');\n\nSELECT * FROM ft_myisam WHERE MATCH(copy) AGAINST('wicked');\n+--------------------------+\n| copy                     |\n+--------------------------+\n| There was a wicked witch |\n+--------------------------+\n", "SELECT id, body, MATCH (title,body) AGAINST\n    ('Security implications of running MySQL as root'\n    IN NATURAL LANGUAGE MODE) AS score\n    FROM articles WHERE MATCH (title,body) AGAINST\n    ('Security implications of running MySQL as root'\n    IN NATURAL LANGUAGE MODE);\n+----+-------------------------------------+-----------------+\n| id | body                                | score           |\n+----+-------------------------------------+-----------------+\n|  4 | 1. Never run mysqld as root. 2. ... | 1.5219271183014 |\n|  6 | When configured properly, MySQL ... | 1.3114095926285 |\n+----+-------------------------------------+-----------------+\n"], "Category": ["String Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": ["SELECT * FROM ft_myisam WHERE MATCH(copy) AGAINST('wicked');", "SELECT id, body, MATCH (title,body) AGAINST\n    ('Security implications of running MySQL as root'\n    IN NATURAL LANGUAGE MODE) AS score\n    FROM articles WHERE MATCH (title,body) AGAINST\n    ('Security implications of running MySQL as root'\n    IN NATURAL LANGUAGE MODE);"], "Wrong Messages from Ineffective SQLs Refined": ["(pymysql.err.ProgrammingError) (1146, \"Table 'PINOLO_MariaDB.ft_myisam' doesn't exist\")\n[SQL: SELECT * FROM ft_myisam WHERE MATCH(copy) AGAINST('wicked');]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "(pymysql.err.ProgrammingError) (1146, \"Table 'PINOLO_MariaDB.articles' doesn't exist\")\n[SQL: SELECT id, body, MATCH (title,body) AGAINST\n    ('Security implications of running MySQL as root'\n    IN NATURAL LANGUAGE MODE) AS score\n    FROM articles WHERE MATCH (title,body) AGAINST\n    ('Security implications of running MySQL as root'\n    IN NATURAL LANGUAGE MODE);]\n(Background on this error at: https://sqlalche.me/e/20/f405)"]}
{"HTML": "https://mariadb.com//kb/en/median/", "Title": "MEDIAN", "Feature": ["MEDIAN(median expression) OVER (\n  [ PARTITION BY partition_expression ] \n)\n"], "Description": ["MEDIAN() is a window function that returns the median value of a range of values.", "It is a specific case of PERCENTILE_CONT, with an argument of 0.5 and the ORDER BY column the one in MEDIAN's argument. ", "MEDIAN(<median-arg>) OVER ( [ PARTITION BY partition_expression] )\n", "Is equivalent to:", "PERCENTILE_CONT(0.5) WITHIN \n  GROUP (ORDER BY <median-arg>) OVER ( [ PARTITION BY partition_expression ])\n"], "Examples": ["CREATE TABLE book_rating (name CHAR(30), star_rating TINYINT);\n\nINSERT INTO book_rating VALUES ('Lord of the Ladybirds', 5);\nINSERT INTO book_rating VALUES ('Lord of the Ladybirds', 3);\nINSERT INTO book_rating VALUES ('Lady of the Flies', 1);\nINSERT INTO book_rating VALUES ('Lady of the Flies', 2);\nINSERT INTO book_rating VALUES ('Lady of the Flies', 5);\n\nSELECT name, median(star_rating) OVER (PARTITION BY name) FROM book_rating;\n+-----------------------+----------------------------------------------+\n| name                  | median(star_rating) OVER (PARTITION BY name) |\n+-----------------------+----------------------------------------------+\n| Lord of the Ladybirds |                                 4.0000000000 |\n| Lord of the Ladybirds |                                 4.0000000000 |\n| Lady of the Flies     |                                 2.0000000000 |\n| Lady of the Flies     |                                 2.0000000000 |\n| Lady of the Flies     |                                 2.0000000000 |\n+-----------------------+----------------------------------------------+\n"], "Category": ["Window Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": ["SELECT name, median(star_rating) OVER (PARTITION BY name) FROM book_rating;"], "Wrong Messages from Ineffective SQLs Refined": ["(pymysql.err.ProgrammingError) (1146, \"Table 'PINOLO_MariaDB.book_rating' doesn't exist\")\n[SQL: SELECT name, median(star_rating) OVER (PARTITION BY name) FROM book_rating;]\n(Background on this error at: https://sqlalche.me/e/20/f405)"]}
{"HTML": "https://mariadb.com//kb/en/mpolyfromwkb/", "Title": "MPolyFromWKB", "Feature": ["MPolyFromWKB(wkb[,srid])\nMultiPolygonFromWKB(wkb[,srid])\n"], "Description": ["Constructs a MULTIPOLYGON value using its WKB  representation and SRID.", "MPolyFromWKB() and MultiPolygonFromWKB() are synonyms."], "Examples": ["SET @g = ST_AsBinary(MPointFromText('MULTIPOLYGON(((28 26,28 0,84 0,84 42,28 26),(52 18,66 23,73 9,48 6,52 18)),((59 18,67 18,67 13,59 13,59 18)))'));\n\nSELECT ST_AsText(MPolyFromWKB(@g))\\G\n*************************** 1. row ***************************\nST_AsText(MPolyFromWKB(@g)): MULTIPOLYGON(((28 26,28 0,84 0,84 42,28 26),(52 18,66 23,73 9,48 6,52 18)),((59 18,67 18,67 13,59 13,59 18)))\n"], "Category": ["Geographic Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": [], "Wrong Messages from Ineffective SQLs Refined": []}
{"HTML": "https://mariadb.com//kb/en/natural_sort_key/", "Title": "NATURAL_SORT_KEY", "Feature": ["NATURAL_SORT_KEY(str)\n"], "Description": ["The NATURAL_SORT_KEY function is used for sorting that is closer to natural sorting. Strings are sorted in alphabetical order, while numbers are treated in a way such that, for example, 10 is greater than 2, whereas in other forms of sorting, 2 would be greater than 10, just like z is greater than ya.", "There are multiple natural sort implementations, differing in the way they handle leading zeroes, fractions, i18n, negatives, decimals and so on.", "MariaDB's implementation ignores leading zeroes when performing the sort.", "You can use also use NATURAL_SORT_KEY with generated columns. The value is not stored permanently in the table. When using a generated column, the virtual column must be longer than the base column to cater for embedded numbers in the string and MDEV-24582."], "Examples": ["CREATE TABLE t1 (c TEXT);\n\nINSERT INTO t1 VALUES ('b1'),('a2'),('a11'),('a1');\n\nSELECT c FROM t1;\n+------+\n| c    |\n+------+\n| b1   |\n| a2   |\n| a11  |\n| a1   |\n+------+\n\nSELECT c FROM t1 ORDER BY c;\n+------+\n| c    |\n+------+\n| a1   |\n| a11  |\n| a2   |\n| b1   |\n+------+\n", "TRUNCATE t1;\n\nINSERT INTO t1 VALUES \n  ('5.5.31'),('10.7.0'),('10.2.1'),\n  ('10.1.22'),('10.3.32'),('10.2.12');\n\nSELECT c FROM t1;\n+---------+\n| c       |\n+---------+\n| 5.5.31  |\n| 10.7.0  |\n| 10.2.1  |\n| 10.1.22 |\n| 10.3.32 |\n| 10.2.12 |\n+---------+\n\nSELECT c FROM t1 ORDER BY c;\n+---------+\n| c       |\n+---------+\n| 10.1.22 |\n| 10.2.1  |\n| 10.2.12 |\n| 10.3.32 |\n| 10.7.0  |\n| 5.5.31  |\n+---------+\n\nSELECT c FROM t1 ORDER BY NATURAL_SORT_KEY(c);\n+---------+\n| c       |\n+---------+\n| 5.5.31  |\n| 10.1.22 |\n| 10.2.1  |\n| 10.2.12 |\n| 10.3.32 |\n| 10.7.0  |\n+---------+\n", "TRUNCATE t1;\n\nINSERT INTO t1 VALUES \n  ('192.167.3.1'),('192.167.1.12'),('100.200.300.400'),\n  ('100.50.60.70'),('100.8.9.9'),('127.0.0.1'),('0.0.0.0');\n\nSELECT c FROM t1;\n+-----------------+\n| c               |\n+-----------------+\n| 192.167.3.1     |\n| 192.167.1.12    |\n| 100.200.300.400 |\n| 100.50.60.70    |\n| 100.8.9.9       |\n| 127.0.0.1       |\n| 0.0.0.0         |\n+-----------------+\n\nSELECT c FROM t1 ORDER BY c;\n+-----------------+\n| c               |\n+-----------------+\n| 0.0.0.0         |\n| 100.200.300.400 |\n| 100.50.60.70    |\n| 100.8.9.9       |\n| 127.0.0.1       |\n| 192.167.1.12    |\n| 192.167.3.1     |\n+-----------------+\n\nSELECT c FROM t1 ORDER BY NATURAL_SORT_KEY(c);\n+-----------------+\n| c               |\n+-----------------+\n| 0.0.0.0         |\n| 100.8.9.9       |\n| 100.50.60.70    |\n| 100.200.300.400 |\n| 127.0.0.1       |\n| 192.167.1.12    |\n| 192.167.3.1     |\n+-----------------+\n", "CREATE TABLE t(c VARCHAR(3), k VARCHAR(4) AS (NATURAL_SORT_KEY(c)) INVISIBLE);\n\nINSERT INTO t(c) VALUES ('b1'),('a2'),('a11'),('a10');\n\nSELECT * FROM t ORDER by k;\n+------+\n| c    |\n+------+\n| a2   |\n| a10  |\n| a11  |\n| b1   |\n+------+\n", "CREATE TABLE t2(c VARCHAR(3), k VARCHAR(3) AS (NATURAL_SORT_KEY(c)) INVISIBLE);\n\nINSERT INTO t2(c) VALUES ('b1'),('a2'),('a11'),('a10');\n\nSELECT * FROM t2 ORDER by k;\n+------+\n| c    |\n+------+\n| a2   |\n| a11  |\n| a10  |\n| b1   |\n+------+\n", "CREATE TABLE t3 (a VARCHAR(4));\n\nINSERT INTO t3 VALUES \n  ('a1'), ('a001'), ('a10'), ('a001'), ('a10'), \n  ('a01'), ('a01'), ('a01b'), ('a01b'), ('a1');\n\nSELECT a FROM t3 ORDER BY a;\n+------+\n| a    |\n+------+\n| a001 |\n| a001 |\n| a01  |\n| a01  |\n| a01b |\n| a01b |\n| a1   |\n| a1   |\n| a10  |\n| a10  |\n+------+\n10 rows in set (0.000 sec)\n\nSELECT a FROM t3 ORDER BY NATURAL_SORT_KEY(a);\n+------+\n| a    |\n+------+\n| a1   |\n| a01  |\n| a01  |\n| a001 |\n| a001 |\n| a1   |\n| a01b |\n| a01b |\n| a10  |\n| a10  |\n+------+\n", "SELECT a FROM t3 ORDER BY NATURAL_SORT_KEY(a), a;\n+------+\n| a    |\n+------+\n| a001 |\n| a001 |\n| a01  |\n| a01  |\n| a1   |\n| a1   |\n| a01b |\n| a01b |\n| a10  |\n| a10  |\n+------+\n"], "Category": ["String Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": ["SELECT c FROM t1 ORDER BY NATURAL_SORT_KEY(c);", "SELECT c FROM t1 ORDER BY NATURAL_SORT_KEY(c);", "CREATE TABLE t(c VARCHAR(3), k VARCHAR(4) AS (NATURAL_SORT_KEY(c)) INVISIBLE);", "CREATE TABLE t2(c VARCHAR(3), k VARCHAR(3) AS (NATURAL_SORT_KEY(c)) INVISIBLE);", "set (0.000 sec)\n\nSELECT a FROM t3 ORDER BY NATURAL_SORT_KEY(a);", "SELECT a FROM t3 ORDER BY NATURAL_SORT_KEY(a), a;"], "Wrong Messages from Ineffective SQLs Refined": ["(pymysql.err.OperationalError) (1054, \"Unknown column 'c' in 'field list'\")\n[SQL: SELECT c FROM t1 ORDER BY NATURAL_SORT_KEY(c);]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "(pymysql.err.OperationalError) (1054, \"Unknown column 'c' in 'field list'\")\n[SQL: SELECT c FROM t1 ORDER BY NATURAL_SORT_KEY(c);]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "(pymysql.err.OperationalError) (1050, \"Table 't' already exists\")\n[SQL: CREATE TABLE t(c VARCHAR(3), k VARCHAR(4) AS (NATURAL_SORT_KEY(c)) INVISIBLE);]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "(pymysql.err.OperationalError) (1050, \"Table 't2' already exists\")\n[SQL: CREATE TABLE t2(c VARCHAR(3), k VARCHAR(3) AS (NATURAL_SORT_KEY(c)) INVISIBLE);]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "(pymysql.err.ProgrammingError) (1064, \"You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '(0.000 sec)\\n\\nSELECT a FROM t3 ORDER BY NATURAL_SORT_KEY(a)' at line 1\")\n[SQL: set (0.000 sec)\n\nSELECT a FROM t3 ORDER BY NATURAL_SORT_KEY(a);]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "(pymysql.err.ProgrammingError) (1146, \"Table 'PINOLO_MariaDB.t3' doesn't exist\")\n[SQL: SELECT a FROM t3 ORDER BY NATURAL_SORT_KEY(a), a;]\n(Background on this error at: https://sqlalche.me/e/20/f405)"]}
{"HTML": "https://mariadb.com//kb/en/next-value-for-sequence_name/", "Title": "NEXT VALUE for sequence_name", "Feature": ["NEXT VALUE FOR sequence\n", "or", "NEXTVAL(sequence_name)\n", "or in Oracle mode (SQL_MODE=ORACLE)", "sequence_name.nextval\n", "NEXT VALUE FOR is ANSI SQL syntax while NEXTVAL() is PostgreSQL syntax."], "Description": ["Generate next value for a SEQUENCE.", "You can greatly speed up NEXT VALUE by creating the sequence with the CACHE option. If not, every NEXT VALUE usage will cause changes in the stored SEQUENCE table.\nWhen using NEXT VALUE the value will be reserved at once and will not be reused, except if the SEQUENCE was created with CYCLE. This means that when you are using SEQUENCEs you have to expect gaps in the generated sequence numbers.\nIf one updates the SEQUENCE with SETVAL() or ALTER SEQUENCE ... RESTART, NEXT VALUE FOR will notice this and start from the next requested value.\nFLUSH TABLES will close the sequence and the next sequence number generated will be according to what's stored in the SEQUENCE object. In effect, this will discard the cached values.\nA server restart (or closing the current connection) also causes a drop of all cached values. The cached sequence numbers are reserved only for the current connection.\nNEXT VALUE requires the INSERT privilege.\nYou can also use NEXT VALUE FOR sequence for column DEFAULT.\n", "Once the sequence is complete, unless the sequence has been created with the CYCLE attribute (not the default), calling the function will result in Error 4084: Sequence has run out."], "Examples": ["CREATE OR REPLACE SEQUENCE s MAXVALUE=2;\n\nSELECT NEXTVAL(s);\n+------------+\n| NEXTVAL(s) |\n+------------+\n|          1 |\n+------------+\n\nSELECT NEXTVAL(s);\n+------------+\n| NEXTVAL(s) |\n+------------+\n|          2 |\n+------------+\n\nSELECT NEXTVAL(s);\nERROR 4084 (HY000): Sequence 'test.s' has run out\n\nALTER SEQUENCE s MAXVALUE=2 CYCLE;\n\nSELECT NEXTVAL(s);\n+------------+\n| NEXTVAL(s) |\n+------------+\n|          1 |\n+------------+\n"], "Category": ["SEQUENCE Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": ["SELECT NEXTVAL(s);", "SELECT NEXTVAL(s);", "SELECT NEXTVAL(s);", "SELECT NEXTVAL(s);"], "Wrong Messages from Ineffective SQLs Refined": ["(pymysql.err.OperationalError) (4091, \"Unknown SEQUENCE: 's'\")\n[SQL: SELECT NEXTVAL(s);]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "(pymysql.err.OperationalError) (4091, \"Unknown SEQUENCE: 's'\")\n[SQL: SELECT NEXTVAL(s);]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "(pymysql.err.OperationalError) (4091, \"Unknown SEQUENCE: 's'\")\n[SQL: SELECT NEXTVAL(s);]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "(pymysql.err.OperationalError) (4091, \"Unknown SEQUENCE: 's'\")\n[SQL: SELECT NEXTVAL(s);]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)"]}
{"HTML": "https://mariadb.com//kb/en/ntile/", "Title": "NTILE", "Feature": ["NTILE (expr) OVER ( \n  [ PARTITION BY partition_expression ] \n  [ ORDER BY order_list ]\n)\n"], "Description": ["NTILE() is a window function that returns an integer indicating which group a given row falls into. The number of groups is specified in the argument (expr), starting at one. Ordered rows in the partition are divided into the specified number of groups with as equal a size as possible. "], "Examples": ["create table t1 (\n    pk int primary key,\n    a int,\n    b int\n  );\n\ninsert into t1 values\n    (11 , 0, 10),\n    (12 , 0, 10),\n    (13 , 1, 10),\n    (14 , 1, 10),\n    (18 , 2, 10),\n    (15 , 2, 20),\n    (16 , 2, 20),\n    (17 , 2, 20),\n    (19 , 4, 20),\n    (20 , 4, 20);\n\nselect pk, a, b,\n    ntile(1) over (order by pk)\n  from t1;\n+----+------+------+-----------------------------+\n| pk | a    | b    | ntile(1) over (order by pk) |\n+----+------+------+-----------------------------+\n| 11 |    0 |   10 |                           1 |\n| 12 |    0 |   10 |                           1 |\n| 13 |    1 |   10 |                           1 |\n| 14 |    1 |   10 |                           1 |\n| 15 |    2 |   20 |                           1 |\n| 16 |    2 |   20 |                           1 |\n| 17 |    2 |   20 |                           1 |\n| 18 |    2 |   10 |                           1 |\n| 19 |    4 |   20 |                           1 |\n| 20 |    4 |   20 |                           1 |\n+----+------+------+-----------------------------+\n\nselect pk, a, b,\n    ntile(4) over (order by pk)\n from t1;\n+----+------+------+-----------------------------+\n| pk | a    | b    | ntile(4) over (order by pk) |\n+----+------+------+-----------------------------+\n| 11 |    0 |   10 |                           1 |\n| 12 |    0 |   10 |                           1 |\n| 13 |    1 |   10 |                           1 |\n| 14 |    1 |   10 |                           2 |\n| 15 |    2 |   20 |                           2 |\n| 16 |    2 |   20 |                           2 |\n| 17 |    2 |   20 |                           3 |\n| 18 |    2 |   10 |                           3 |\n| 19 |    4 |   20 |                           4 |\n| 20 |    4 |   20 |                           4 |\n+----+------+------+-----------------------------+\n"], "Category": ["Window Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": ["select pk, a, b,\n    ntile(1) over (order by pk)\n  from t1;", "select pk, a, b,\n    ntile(4) over (order by pk)\n from t1;"], "Wrong Messages from Ineffective SQLs Refined": ["(pymysql.err.OperationalError) (1054, \"Unknown column 'pk' in 'field list'\")\n[SQL: select pk, a, b,\n    ntile(1) over (order by pk)\n  from t1;]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "(pymysql.err.OperationalError) (1054, \"Unknown column 'pk' in 'field list'\")\n[SQL: select pk, a, b,\n    ntile(4) over (order by pk)\n from t1;]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)"]}
{"HTML": "https://mariadb.com//kb/en/percentile_cont/", "Title": "PERCENTILE_CONT", "Feature": [], "Description": ["PERCENTILE_CONT() (standing for continuous percentile) is a window function which returns a value which corresponds to the given fraction in the sort order. If required, it will interpolate between adjacent input items.", "Essentially, the following process is followed to find the value to return:", "Get the number of rows in the partition, denoted by N\nRN = p*(N-1), where p denotes the argument to the PERCENTILE_CONT function\ncalculate the FRN(floor row number) and CRN(column row number for the group( FRN= floor(RN) and CRN = ceil(RN))\nlook up rows FRN and CRN\nIf (CRN = FRN = RN) then the result is (value of expression from row at RN)\nOtherwise the result is\n(CRN - RN) * (value of expression for row at FRN) +\n(RN - FRN) * (value of expression for row at CRN)\n", "The MEDIAN function is a specific case of PERCENTILE_CONT, equivalent to PERCENTILE_CONT(0.5)."], "Examples": ["CREATE TABLE book_rating (name CHAR(30), star_rating TINYINT);\n\nINSERT INTO book_rating VALUES ('Lord of the Ladybirds', 5);\nINSERT INTO book_rating VALUES ('Lord of the Ladybirds', 3);\nINSERT INTO book_rating VALUES ('Lady of the Flies', 1);\nINSERT INTO book_rating VALUES ('Lady of the Flies', 2);\nINSERT INTO book_rating VALUES ('Lady of the Flies', 5);\n\nSELECT name, PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY star_rating) \n  OVER (PARTITION BY name) AS pc \n  FROM book_rating;\n+-----------------------+--------------+\n| name                  | pc           |\n+-----------------------+--------------+\n| Lord of the Ladybirds | 4.0000000000 |\n| Lord of the Ladybirds | 4.0000000000 |\n| Lady of the Flies     | 2.0000000000 |\n| Lady of the Flies     | 2.0000000000 |\n| Lady of the Flies     | 2.0000000000 |\n+-----------------------+--------------+\n\nSELECT name, PERCENTILE_CONT(1) WITHIN GROUP (ORDER BY star_rating) \n  OVER (PARTITION BY name) AS pc \n  FROM book_rating;\n+-----------------------+--------------+\n| name                  | pc           |\n+-----------------------+--------------+\n| Lord of the Ladybirds | 5.0000000000 |\n| Lord of the Ladybirds | 5.0000000000 |\n| Lady of the Flies     | 5.0000000000 |\n| Lady of the Flies     | 5.0000000000 |\n| Lady of the Flies     | 5.0000000000 |\n+-----------------------+--------------+\n\nSELECT name, PERCENTILE_CONT(0) WITHIN GROUP (ORDER BY star_rating) \n  OVER (PARTITION BY name) AS pc \n  FROM book_rating;\n+-----------------------+--------------+\n| name                  | pc           |\n+-----------------------+--------------+\n| Lord of the Ladybirds | 3.0000000000 |\n| Lord of the Ladybirds | 3.0000000000 |\n| Lady of the Flies     | 1.0000000000 |\n| Lady of the Flies     | 1.0000000000 |\n| Lady of the Flies     | 1.0000000000 |\n+-----------------------+--------------+\n\nSELECT name, PERCENTILE_CONT(0.6) WITHIN GROUP (ORDER BY star_rating) \n  OVER (PARTITION BY name) AS pc \n  FROM book_rating;\n+-----------------------+--------------+\n| name                  | pc           |\n+-----------------------+--------------+\n| Lord of the Ladybirds | 4.2000000000 |\n| Lord of the Ladybirds | 4.2000000000 |\n| Lady of the Flies     | 2.6000000000 |\n| Lady of the Flies     | 2.6000000000 |\n| Lady of the Flies     | 2.6000000000 |\n+-----------------------+--------------+\n"], "Category": ["Window Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": ["SELECT name, PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY star_rating) \n  OVER (PARTITION BY name) AS pc \n  FROM book_rating;", "SELECT name, PERCENTILE_CONT(1) WITHIN GROUP (ORDER BY star_rating) \n  OVER (PARTITION BY name) AS pc \n  FROM book_rating;", "SELECT name, PERCENTILE_CONT(0) WITHIN GROUP (ORDER BY star_rating) \n  OVER (PARTITION BY name) AS pc \n  FROM book_rating;", "SELECT name, PERCENTILE_CONT(0.6) WITHIN GROUP (ORDER BY star_rating) \n  OVER (PARTITION BY name) AS pc \n  FROM book_rating;"], "Wrong Messages from Ineffective SQLs Refined": ["(pymysql.err.ProgrammingError) (1146, \"Table 'PINOLO_MariaDB.book_rating' doesn't exist\")\n[SQL: SELECT name, PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY star_rating) \n  OVER (PARTITION BY name) AS pc \n  FROM book_rating;]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "(pymysql.err.ProgrammingError) (1146, \"Table 'PINOLO_MariaDB.book_rating' doesn't exist\")\n[SQL: SELECT name, PERCENTILE_CONT(1) WITHIN GROUP (ORDER BY star_rating) \n  OVER (PARTITION BY name) AS pc \n  FROM book_rating;]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "(pymysql.err.ProgrammingError) (1146, \"Table 'PINOLO_MariaDB.book_rating' doesn't exist\")\n[SQL: SELECT name, PERCENTILE_CONT(0) WITHIN GROUP (ORDER BY star_rating) \n  OVER (PARTITION BY name) AS pc \n  FROM book_rating;]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "(pymysql.err.ProgrammingError) (1146, \"Table 'PINOLO_MariaDB.book_rating' doesn't exist\")\n[SQL: SELECT name, PERCENTILE_CONT(0.6) WITHIN GROUP (ORDER BY star_rating) \n  OVER (PARTITION BY name) AS pc \n  FROM book_rating;]\n(Background on this error at: https://sqlalche.me/e/20/f405)"]}
{"HTML": "https://mariadb.com//kb/en/percentile_disc/", "Title": "PERCENTILE_DISC", "Feature": [], "Description": ["PERCENTILE_DISC() (standing for discrete percentile) is a window function which returns the first value in the set whose ordered position is the same or more than the specified fraction.", "Essentially, the following process is followed to find the value to return:", "Get the number of rows in the partition.\nWalk through the partition, in order, until finding the the first row with CUME_DIST() >= function_argument.\n"], "Examples": ["CREATE TABLE book_rating (name CHAR(30), star_rating TINYINT);\n\nINSERT INTO book_rating VALUES ('Lord of the Ladybirds', 5);\nINSERT INTO book_rating VALUES ('Lord of the Ladybirds', 3);\nINSERT INTO book_rating VALUES ('Lady of the Flies', 1);\nINSERT INTO book_rating VALUES ('Lady of the Flies', 2);\nINSERT INTO book_rating VALUES ('Lady of the Flies', 5);\n\nSELECT name, PERCENTILE_DISC(0.5) WITHIN GROUP (ORDER BY star_rating)\n  OVER (PARTITION BY name) AS pc FROM book_rating;\n+-----------------------+------+\n| name                  | pc   |\n+-----------------------+------+\n| Lord of the Ladybirds |    3 |\n| Lord of the Ladybirds |    3 |\n| Lady of the Flies     |    2 |\n| Lady of the Flies     |    2 |\n| Lady of the Flies     |    2 |\n+-----------------------+------+\n5 rows in set (0.000 sec)\n\nSELECT name, PERCENTILE_DISC(0) WITHIN GROUP (ORDER BY star_rating) \n OVER (PARTITION BY name) AS pc FROM book_rating;\n+-----------------------+------+\n| name                  | pc   |\n+-----------------------+------+\n| Lord of the Ladybirds |    3 |\n| Lord of the Ladybirds |    3 |\n| Lady of the Flies     |    1 |\n| Lady of the Flies     |    1 |\n| Lady of the Flies     |    1 |\n+-----------------------+------+\n5 rows in set (0.000 sec)\n\nSELECT name, PERCENTILE_DISC(1) WITHIN GROUP (ORDER BY star_rating) \n  OVER (PARTITION BY name) AS pc FROM book_rating;\n+-----------------------+------+\n| name                  | pc   |\n+-----------------------+------+\n| Lord of the Ladybirds |    5 |\n| Lord of the Ladybirds |    5 |\n| Lady of the Flies     |    5 |\n| Lady of the Flies     |    5 |\n| Lady of the Flies     |    5 |\n+-----------------------+------+\n5 rows in set (0.000 sec)\n\nSELECT name, PERCENTILE_DISC(0.6) WITHIN GROUP (ORDER BY star_rating) \n  OVER (PARTITION BY name) AS pc FROM book_rating;\n+-----------------------+------+\n| name                  | pc   |\n+-----------------------+------+\n| Lord of the Ladybirds |    5 |\n| Lord of the Ladybirds |    5 |\n| Lady of the Flies     |    2 |\n| Lady of the Flies     |    2 |\n| Lady of the Flies     |    2 |\n+-----------------------+------\n"], "Category": ["Window Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": ["SELECT name, PERCENTILE_DISC(0.5) WITHIN GROUP (ORDER BY star_rating)\n  OVER (PARTITION BY name) AS pc FROM book_rating;", "set (0.000 sec)\n\nSELECT name, PERCENTILE_DISC(0) WITHIN GROUP (ORDER BY star_rating) \n OVER (PARTITION BY name) AS pc FROM book_rating;", "set (0.000 sec)\n\nSELECT name, PERCENTILE_DISC(1) WITHIN GROUP (ORDER BY star_rating) \n  OVER (PARTITION BY name) AS pc FROM book_rating;", "set (0.000 sec)\n\nSELECT name, PERCENTILE_DISC(0.6) WITHIN GROUP (ORDER BY star_rating) \n  OVER (PARTITION BY name) AS pc FROM book_rating;"], "Wrong Messages from Ineffective SQLs Refined": ["(pymysql.err.ProgrammingError) (1146, \"Table 'PINOLO_MariaDB.book_rating' doesn't exist\")\n[SQL: SELECT name, PERCENTILE_DISC(0.5) WITHIN GROUP (ORDER BY star_rating)\n  OVER (PARTITION BY name) AS pc FROM book_rating;]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "(pymysql.err.ProgrammingError) (1064, \"You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '(0.000 sec)\\n\\nSELECT name, PERCENTILE_DISC(0) WITHIN GROUP (ORDER BY star_rati...' at line 1\")\n[SQL: set (0.000 sec)\n\nSELECT name, PERCENTILE_DISC(0) WITHIN GROUP (ORDER BY star_rating) \n OVER (PARTITION BY name) AS pc FROM book_rating;]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "(pymysql.err.ProgrammingError) (1064, \"You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '(0.000 sec)\\n\\nSELECT name, PERCENTILE_DISC(1) WITHIN GROUP (ORDER BY star_rati...' at line 1\")\n[SQL: set (0.000 sec)\n\nSELECT name, PERCENTILE_DISC(1) WITHIN GROUP (ORDER BY star_rating) \n  OVER (PARTITION BY name) AS pc FROM book_rating;]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "(pymysql.err.ProgrammingError) (1064, \"You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '(0.000 sec)\\n\\nSELECT name, PERCENTILE_DISC(0.6) WITHIN GROUP (ORDER BY star_ra...' at line 1\")\n[SQL: set (0.000 sec)\n\nSELECT name, PERCENTILE_DISC(0.6) WITHIN GROUP (ORDER BY star_rating) \n  OVER (PARTITION BY name) AS pc FROM book_rating;]\n(Background on this error at: https://sqlalche.me/e/20/f405)"]}
{"HTML": "https://mariadb.com//kb/en/percent_rank/", "Title": "PERCENT_RANK", "Feature": ["PERCENT_RANK() OVER (\n  [ PARTITION BY partition_expression ] \n  [ ORDER BY order_list ]\n)\n"], "Description": ["PERCENT_RANK() is a window function that returns the relative percent rank of a given row. The following formula is used to calculate the percent rank:", "(rank - 1) / (number of rows in the window or partition - 1)\n"], "Examples": ["create table t1 (\n  pk int primary key,\n  a int,\n  b int\n);\n\n\ninsert into t1 values\n( 1 , 0, 10),\n( 2 , 0, 10),\n( 3 , 1, 10),\n( 4 , 1, 10),\n( 8 , 2, 10),\n( 5 , 2, 20),\n( 6 , 2, 20),\n( 7 , 2, 20),\n( 9 , 4, 20),\n(10 , 4, 20);\n\nselect pk, a, b,\n    rank() over (order by a) as rank,\n    percent_rank() over (order by a) as pct_rank,\n    cume_dist() over (order by a) as cume_dist\nfrom t1;\n+----+------+------+------+--------------+--------------+\n| pk | a    | b    | rank | pct_rank     | cume_dist    |\n+----+------+------+------+--------------+--------------+\n|  1 |    0 |   10 |    1 | 0.0000000000 | 0.2000000000 |\n|  2 |    0 |   10 |    1 | 0.0000000000 | 0.2000000000 |\n|  3 |    1 |   10 |    3 | 0.2222222222 | 0.4000000000 |\n|  4 |    1 |   10 |    3 | 0.2222222222 | 0.4000000000 |\n|  5 |    2 |   20 |    5 | 0.4444444444 | 0.8000000000 |\n|  6 |    2 |   20 |    5 | 0.4444444444 | 0.8000000000 |\n|  7 |    2 |   20 |    5 | 0.4444444444 | 0.8000000000 |\n|  8 |    2 |   10 |    5 | 0.4444444444 | 0.8000000000 |\n|  9 |    4 |   20 |    9 | 0.8888888889 | 1.0000000000 |\n| 10 |    4 |   20 |    9 | 0.8888888889 | 1.0000000000 |\n+----+------+------+------+--------------+--------------+\n\nselect pk, a, b,\n       percent_rank() over (order by pk) as pct_rank,\n       cume_dist() over (order by pk) as cume_dist\nfrom t1 order by pk;\n+----+------+------+--------------+--------------+\n| pk | a    | b    | pct_rank     | cume_dist    |\n+----+------+------+--------------+--------------+\n|  1 |    0 |   10 | 0.0000000000 | 0.1000000000 |\n|  2 |    0 |   10 | 0.1111111111 | 0.2000000000 |\n|  3 |    1 |   10 | 0.2222222222 | 0.3000000000 |\n|  4 |    1 |   10 | 0.3333333333 | 0.4000000000 |\n|  5 |    2 |   20 | 0.4444444444 | 0.5000000000 |\n|  6 |    2 |   20 | 0.5555555556 | 0.6000000000 |\n|  7 |    2 |   20 | 0.6666666667 | 0.7000000000 |\n|  8 |    2 |   10 | 0.7777777778 | 0.8000000000 |\n|  9 |    4 |   20 | 0.8888888889 | 0.9000000000 |\n| 10 |    4 |   20 | 1.0000000000 | 1.0000000000 |\n+----+------+------+--------------+--------------+\n\nselect pk, a, b,\n        percent_rank() over (partition by a order by a) as pct_rank,\n        cume_dist() over (partition by a order by a) as cume_dist\nfrom t1;\n+----+------+------+--------------+--------------+\n| pk | a    | b    | pct_rank     | cume_dist    |\n+----+------+------+--------------+--------------+\n|  1 |    0 |   10 | 0.0000000000 | 1.0000000000 |\n|  2 |    0 |   10 | 0.0000000000 | 1.0000000000 |\n|  3 |    1 |   10 | 0.0000000000 | 1.0000000000 |\n|  4 |    1 |   10 | 0.0000000000 | 1.0000000000 |\n|  5 |    2 |   20 | 0.0000000000 | 1.0000000000 |\n|  6 |    2 |   20 | 0.0000000000 | 1.0000000000 |\n|  7 |    2 |   20 | 0.0000000000 | 1.0000000000 |\n|  8 |    2 |   10 | 0.0000000000 | 1.0000000000 |\n|  9 |    4 |   20 | 0.0000000000 | 1.0000000000 |\n| 10 |    4 |   20 | 0.0000000000 | 1.0000000000 |\n+----+------+------+--------------+--------------+\n\n"], "Category": ["Window Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": ["select pk, a, b,\n    rank() over (order by a) as rank,\n    percent_rank() over (order by a) as pct_rank,\n    cume_dist() over (order by a) as cume_dist\nfrom t1;", "select pk, a, b,\n       percent_rank() over (order by pk) as pct_rank,\n       cume_dist() over (order by pk) as cume_dist\nfrom t1 order by pk;", "select pk, a, b,\n        percent_rank() over (partition by a order by a) as pct_rank,\n        cume_dist() over (partition by a order by a) as cume_dist\nfrom t1;"], "Wrong Messages from Ineffective SQLs Refined": ["(pymysql.err.OperationalError) (1054, \"Unknown column 'pk' in 'field list'\")\n[SQL: select pk, a, b,\n    rank() over (order by a) as rank,\n    percent_rank() over (order by a) as pct_rank,\n    cume_dist() over (order by a) as cume_dist\nfrom t1;]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "(pymysql.err.OperationalError) (1054, \"Unknown column 'pk' in 'field list'\")\n[SQL: select pk, a, b,\n       percent_rank() over (order by pk) as pct_rank,\n       cume_dist() over (order by pk) as cume_dist\nfrom t1 order by pk;]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "(pymysql.err.OperationalError) (1054, \"Unknown column 'pk' in 'field list'\")\n[SQL: select pk, a, b,\n        percent_rank() over (partition by a order by a) as pct_rank,\n        cume_dist() over (partition by a order by a) as cume_dist\nfrom t1;]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)"]}
{"HTML": "https://mariadb.com//kb/en/previous-value-for-sequence_name/", "Title": "PREVIOUS VALUE FOR sequence_name", "Feature": ["PREVIOUS VALUE FOR sequence_name\n", "or", "LASTVAL(sequence_name)\n", "or in Oracle mode (SQL_MODE=ORACLE)", "sequence_name.currval\n", "PREVIOUS VALUE FOR is IBM DB2 syntax while LASTVAL() is PostgreSQL syntax."], "Description": ["Gets the most recent value in the current connection generated from a sequence.", "If the sequence has not yet been used by the connection, PREVIOUS VALUE FOR returns NULL (the same thing applies with a new connection which doesn't see a last value for an existing sequence).\nIf a SEQUENCE has been dropped and re-created then it's treated as a new SEQUENCE and PREVIOUS VALUE FOR will return NULL.\nReturns NULL if the sequence is complete\nFLUSH TABLES has no effect on PREVIOUS VALUE FOR.\nPrevious values for all used sequences are stored per connection until connection ends.\nPREVIOUS VALUE FOR requires the SELECT privilege.\n"], "Examples": ["CREATE SEQUENCE s START WITH 100 INCREMENT BY 10;\n\nSELECT PREVIOUS VALUE FOR s;\n+----------------------+\n| PREVIOUS VALUE FOR s |\n+----------------------+\n|                 NULL |\n+----------------------+\n\n# The function works for sequences only, if the table is used an error is generated\nSELECT PREVIOUS VALUE FOR t;\nERROR 4089 (42S02): 'test.t' is not a SEQUENCE\n\n# Call the NEXT VALUE FOR s:\nSELECT NEXT VALUE FOR s;\n+------------------+\n| NEXT VALUE FOR s |\n+------------------+\n|              100 |\n+------------------+\n\nSELECT PREVIOUS VALUE FOR s;\n+----------------------+\n| PREVIOUS VALUE FOR s |\n+----------------------+\n|                  100 |\n+----------------------+\n", "CREATE OR REPLACE SEQUENCE s MAXVALUE=2;\n\nSELECT NEXTVAL(s), LASTVAL(s);\n+------------+------------+\n| NEXTVAL(s) | LASTVAL(s) |\n+------------+------------+\n|          1 |          1 |\n+------------+------------+\n\nSELECT NEXTVAL(s), LASTVAL(s);\n+------------+------------+\n| NEXTVAL(s) | LASTVAL(s) |\n+------------+------------+\n|          2 |          2 |\n+------------+------------+\n\nSELECT NEXTVAL(s), LASTVAL(s);\nERROR 4084 (HY000): Sequence 'test.s' has run out\n\nSELECT LASTVAL(s);\n+------------+\n| LASTVAL(s) |\n+------------+\n|       NULL |\n+------------+\n"], "Category": ["SEQUENCE Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": ["SELECT PREVIOUS VALUE FOR s;", "SELECT PREVIOUS VALUE FOR t;", "SELECT PREVIOUS VALUE FOR s;"], "Wrong Messages from Ineffective SQLs Refined": ["(pymysql.err.OperationalError) (4091, \"Unknown SEQUENCE: 's'\")\n[SQL: SELECT PREVIOUS VALUE FOR s;]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "(pymysql.err.OperationalError) (4089, \"'PINOLO_MariaDB.t' is not a SEQUENCE\")\n[SQL: SELECT PREVIOUS VALUE FOR t;]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "(pymysql.err.OperationalError) (4091, \"Unknown SEQUENCE: 's'\")\n[SQL: SELECT PREVIOUS VALUE FOR s;]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)"]}
{"HTML": "https://mariadb.com//kb/en/ps_thread_stack/", "Title": "ps_thread_stack", "Feature": ["sys.ps_thread_stack(thread_id, verbose)\n"], "Description": ["ps_thread_stack is a stored function available with the Sys Schema that, for a given thread_id, returns all statements, stages, and events within the Performance Schema, as a JSON formatted stack.", "The boolean verbose argument specifies whether or not to include file:lineno information in the events."], "Examples": ["SELECT sys.ps_thread_stack(13, FALSE) AS thread_stack\\G\n*************************** 1. row ***************************\nthread_stack: {\"rankdir\": \"LR\",\"nodesep\": \"0.10\",\n  \"stack_created\": \"2022-03-28 16:01:06\",\n  \"mysql_version\": \"10.8.2-MariaDB\",\n  \"mysql_user\": \"msandbox@localhost\",\n  \"events\": []}\n"], "Category": ["No Category"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": [], "Wrong Messages from Ineffective SQLs Refined": []}
{"HTML": "https://mariadb.com//kb/en/rank/", "Title": "RANK", "Feature": ["RANK() OVER (\n  [ PARTITION BY partition_expression ]\n  [ ORDER BY order_list ]\n) \n"], "Description": ["RANK() is a window function that displays the number of a given row, starting at one and following the ORDER BY sequence of the window function, with identical values receiving the same result. It is similar to the ROW_NUMBER() function except that in that function, identical values will receive a different row number for each result."], "Examples": ["CREATE TABLE student(course VARCHAR(10), mark int, name varchar(10));\n\nINSERT INTO student VALUES \n  ('Maths', 60, 'Thulile'),\n  ('Maths', 60, 'Pritha'),\n  ('Maths', 70, 'Voitto'),\n  ('Maths', 55, 'Chun'),\n  ('Biology', 60, 'Bilal'),\n   ('Biology', 70, 'Roger');\n\nSELECT \n  RANK() OVER (PARTITION BY course ORDER BY mark DESC) AS rank, \n  DENSE_RANK() OVER (PARTITION BY course ORDER BY mark DESC) AS dense_rank, \n  ROW_NUMBER() OVER (PARTITION BY course ORDER BY mark DESC) AS row_num, \n  course, mark, name \nFROM student ORDER BY course, mark DESC;\n+------+------------+---------+---------+------+---------+\n| rank | dense_rank | row_num | course  | mark | name    |\n+------+------------+---------+---------+------+---------+\n|    1 |          1 |       1 | Biology |   70 | Roger   |\n|    2 |          2 |       2 | Biology |   60 | Bilal   |\n|    1 |          1 |       1 | Maths   |   70 | Voitto  |\n|    2 |          2 |       2 | Maths   |   60 | Thulile |\n|    2 |          2 |       3 | Maths   |   60 | Pritha  |\n|    4 |          3 |       4 | Maths   |   55 | Chun    |\n+------+------------+---------+---------+------+---------+\n"], "Category": ["Window Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": ["SELECT \n  RANK() OVER (PARTITION BY course ORDER BY mark DESC) AS rank, \n  DENSE_RANK() OVER (PARTITION BY course ORDER BY mark DESC) AS dense_rank, \n  ROW_NUMBER() OVER (PARTITION BY course ORDER BY mark DESC) AS row_num, \n  course, mark, name \nFROM student ORDER BY course, mark DESC;"], "Wrong Messages from Ineffective SQLs Refined": ["(pymysql.err.OperationalError) (1054, \"Unknown column 'course' in 'field list'\")\n[SQL: SELECT \n  RANK() OVER (PARTITION BY course ORDER BY mark DESC) AS rank, \n  DENSE_RANK() OVER (PARTITION BY course ORDER BY mark DESC) AS dense_rank, \n  ROW_NUMBER() OVER (PARTITION BY course ORDER BY mark DESC) AS row_num, \n  course, mark, name \nFROM student ORDER BY course, mark DESC;]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)"]}
{"HTML": "https://mariadb.com//kb/en/row_number/", "Title": "ROW_NUMBER", "Feature": ["ROW_NUMBER() OVER (\n  [ PARTITION BY partition_expression ]\n  [ ORDER BY order_list ]\n) \n"], "Description": ["ROW_NUMBER() is a window function that displays the number of a given row, starting at one and following the ORDER BY sequence of the window function, with identical values receiving different row numbers. It is similar to the RANK() and DENSE_RANK() functions except that in that function, identical values will receive the same rank for each result."], "Examples": ["CREATE TABLE student(course VARCHAR(10), mark int, name varchar(10));\n\nINSERT INTO student VALUES \n  ('Maths', 60, 'Thulile'),\n  ('Maths', 60, 'Pritha'),\n  ('Maths', 70, 'Voitto'),\n  ('Maths', 55, 'Chun'),\n  ('Biology', 60, 'Bilal'),\n   ('Biology', 70, 'Roger');\n\nSELECT \n  RANK() OVER (PARTITION BY course ORDER BY mark DESC) AS rank, \n  DENSE_RANK() OVER (PARTITION BY course ORDER BY mark DESC) AS dense_rank, \n  ROW_NUMBER() OVER (PARTITION BY course ORDER BY mark DESC) AS row_num, \n  course, mark, name \nFROM student ORDER BY course, mark DESC;\n+------+------------+---------+---------+------+---------+\n| rank | dense_rank | row_num | course  | mark | name    |\n+------+------------+---------+---------+------+---------+\n|    1 |          1 |       1 | Biology |   70 | Roger   |\n|    2 |          2 |       2 | Biology |   60 | Bilal   |\n|    1 |          1 |       1 | Maths   |   70 | Voitto  |\n|    2 |          2 |       2 | Maths   |   60 | Thulile |\n|    2 |          2 |       3 | Maths   |   60 | Pritha  |\n|    4 |          3 |       4 | Maths   |   55 | Chun    |\n+------+------------+---------+---------+------+---------+\n"], "Category": ["Window Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": ["SELECT \n  RANK() OVER (PARTITION BY course ORDER BY mark DESC) AS rank, \n  DENSE_RANK() OVER (PARTITION BY course ORDER BY mark DESC) AS dense_rank, \n  ROW_NUMBER() OVER (PARTITION BY course ORDER BY mark DESC) AS row_num, \n  course, mark, name \nFROM student ORDER BY course, mark DESC;"], "Wrong Messages from Ineffective SQLs Refined": ["(pymysql.err.OperationalError) (1054, \"Unknown column 'course' in 'field list'\")\n[SQL: SELECT \n  RANK() OVER (PARTITION BY course ORDER BY mark DESC) AS rank, \n  DENSE_RANK() OVER (PARTITION BY course ORDER BY mark DESC) AS dense_rank, \n  ROW_NUMBER() OVER (PARTITION BY course ORDER BY mark DESC) AS row_num, \n  course, mark, name \nFROM student ORDER BY course, mark DESC;]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)"]}
{"HTML": "https://mariadb.com//kb/en/setval/", "Title": "SETVAL", "Feature": ["SETVAL(sequence_name, next_value, [is_used, [round]])\n"], "Description": ["Set the next value to be returned for a SEQUENCE.", "This function is compatible with PostgreSQL syntax, extended\nwith the round argument.", "If the is_used argument is not given or is 1 or true, then the next used value will\none after the given value. If is_used is 0 or false then the next generated value\nwill be the given value.", "If round is used then it will set the round value (or the internal cycle count, starting at zero) for the sequence.\nIf round is not used, it's assumed to be 0.", "next_value must be an integer literal.", "For SEQUENCE tables defined with CYCLE (see CREATE SEQUENCE) one should use both next_value and round to define the next value. In this case the\ncurrent sequence value is defined to be round, next_value.", "The result returned by SETVAL() is next_value or NULL if the given next_value and round  is smaller than the current value.", "SETVAL() will not set the SEQUENCE value to a something that is less than\nits current value. This is needed to ensure that SETVAL()\nis replication safe.  If you want to set the SEQUENCE to a smaller number\nuse ALTER SEQUENCE.", "If CYCLE is used, first round and then next_value are compared\nto see if the value is bigger than the current value.", "Internally, in the MariaDB server, SETVAL() is used to inform\nreplicas that a SEQUENCE has changed value.  The replica may get\nSETVAL() statements out of order, but this is ok as only the\nbiggest one will have an effect.", "SETVAL requires the INSERT privilege."], "Examples": ["SELECT setval(foo, 42);           -- Next nextval will return 43\nSELECT setval(foo, 42, true);     -- Same as above\nSELECT setval(foo, 42, false);    -- Next nextval will return 42\n", "SELECT NEXTVAL(s);\n+------------+\n| NEXTVAL(s) |\n+------------+\n|         50 |\n+------------+\n\nSELECT SETVAL(s, 100);\n+----------------+\n| SETVAL(s, 100) |\n+----------------+\n|            100 |\n+----------------+\n\nSELECT NEXTVAL(s);\n+------------+\n| NEXTVAL(s) |\n+------------+\n|        110 |\n+------------+\n\nSELECT SETVAL(s, 50);\n+---------------+\n| SETVAL(s, 50) |\n+---------------+\n|          NULL |\n+---------------+\n\nSELECT NEXTVAL(s);\n+------------+\n| NEXTVAL(s) |\n+------------+\n|        120 |\n+------------+\n", "CREATE OR REPLACE SEQUENCE s1\n  START WITH 1\n  MINVALUE 1\n  MAXVALUE 99\n  INCREMENT BY 1 \n  CACHE 20 \n  CYCLE;\n\nSELECT SETVAL(s1, 99, 1, 0);\n+----------------------+\n| SETVAL(s1, 99, 1, 0) |\n+----------------------+\n|                   99 |\n+----------------------+\n\nSELECT NEXTVAL(s1);\n+-------------+\n| NEXTVAL(s1) |\n+-------------+\n|           1 |\n+-------------+\n", "SELECT SETVAL(s1, 99, 1, 0);\n+----------------------+\n| SETVAL(s1, 99, 1, 0) |\n+----------------------+\n|                 NULL |\n+----------------------+\n\nSELECT NEXTVAL(s1);\n+-------------+\n| NEXTVAL(s1) |\n+-------------+\n|           2 |\n+-------------+\n", "SELECT SETVAL(s1, 99, 1, 1);\n+----------------------+\n| SETVAL(s1, 99, 1, 1) |\n+----------------------+\n|                   99 |\n+----------------------+\n\nSELECT NEXTVAL(s1);\n+-------------+\n| NEXTVAL(s1) |\n+-------------+\n|           1 |\n+-------------+\n"], "Category": ["SEQUENCE Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": ["SELECT setval(foo, 42);", "SELECT setval(foo, 42, true);", "SELECT setval(foo, 42, false);", "SELECT SETVAL(s, 100);", "SETVAL(s, 100) |\n+----------------+\n|            100 |\n+----------------+\n\nSELECT NEXTVAL(s);", "SELECT SETVAL(s, 50);", "SETVAL(s, 50) |\n+---------------+\n|          NULL |\n+---------------+\n\nSELECT NEXTVAL(s);", "SELECT SETVAL(s1, 99, 1, 0);", "SETVAL(s1, 99, 1, 0) |\n+----------------------+\n|                   99 |\n+----------------------+\n\nSELECT NEXTVAL(s1);", "SELECT SETVAL(s1, 99, 1, 0);", "SETVAL(s1, 99, 1, 0) |\n+----------------------+\n|                 NULL |\n+----------------------+\n\nSELECT NEXTVAL(s1);", "SELECT SETVAL(s1, 99, 1, 1);", "SETVAL(s1, 99, 1, 1) |\n+----------------------+\n|                   99 |\n+----------------------+\n\nSELECT NEXTVAL(s1);"], "Wrong Messages from Ineffective SQLs Refined": ["(pymysql.err.OperationalError) (4091, \"Unknown SEQUENCE: 'foo'\")\n[SQL: SELECT setval(foo, 42);]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "(pymysql.err.OperationalError) (4091, \"Unknown SEQUENCE: 'foo'\")\n[SQL: SELECT setval(foo, 42, true);]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "(pymysql.err.OperationalError) (4091, \"Unknown SEQUENCE: 'foo'\")\n[SQL: SELECT setval(foo, 42, false);]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "(pymysql.err.OperationalError) (4091, \"Unknown SEQUENCE: 's'\")\n[SQL: SELECT SETVAL(s, 100);]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "(pymysql.err.ProgrammingError) (1064, \"You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near 'SETVAL(s, 100) |\\n+----------------+\\n|            100 |\\n+----------------+\\n\\nSE...' at line 1\")\n[SQL: SETVAL(s, 100) |\n+----------------+\n|            100 |\n+----------------+\n\nSELECT NEXTVAL(s);]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "(pymysql.err.OperationalError) (4091, \"Unknown SEQUENCE: 's'\")\n[SQL: SELECT SETVAL(s, 50);]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "(pymysql.err.ProgrammingError) (1064, \"You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near 'SETVAL(s, 50) |\\n+---------------+\\n|          NULL |\\n+---------------+\\n\\nSELECT...' at line 1\")\n[SQL: SETVAL(s, 50) |\n+---------------+\n|          NULL |\n+---------------+\n\nSELECT NEXTVAL(s);]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "(pymysql.err.OperationalError) (4091, \"Unknown SEQUENCE: 's1'\")\n[SQL: SELECT SETVAL(s1, 99, 1, 0);]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "(pymysql.err.ProgrammingError) (1064, \"You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near 'SETVAL(s1, 99, 1, 0) |\\n+----------------------+\\n|                   99 |\\n+---...' at line 1\")\n[SQL: SETVAL(s1, 99, 1, 0) |\n+----------------------+\n|                   99 |\n+----------------------+\n\nSELECT NEXTVAL(s1);]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "(pymysql.err.OperationalError) (4091, \"Unknown SEQUENCE: 's1'\")\n[SQL: SELECT SETVAL(s1, 99, 1, 0);]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "(pymysql.err.ProgrammingError) (1064, \"You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near 'SETVAL(s1, 99, 1, 0) |\\n+----------------------+\\n|                 NULL |\\n+---...' at line 1\")\n[SQL: SETVAL(s1, 99, 1, 0) |\n+----------------------+\n|                 NULL |\n+----------------------+\n\nSELECT NEXTVAL(s1);]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "(pymysql.err.OperationalError) (4091, \"Unknown SEQUENCE: 's1'\")\n[SQL: SELECT SETVAL(s1, 99, 1, 1);]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "(pymysql.err.ProgrammingError) (1064, \"You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near 'SETVAL(s1, 99, 1, 1) |\\n+----------------------+\\n|                   99 |\\n+---...' at line 1\")\n[SQL: SETVAL(s1, 99, 1, 1) |\n+----------------------+\n|                   99 |\n+----------------------+\n\nSELECT NEXTVAL(s1);]\n(Background on this error at: https://sqlalche.me/e/20/f405)"]}
{"HTML": "https://mariadb.com//kb/en/sounds-like/", "Title": "SOUNDS LIKE", "Feature": ["expr1 SOUNDS LIKE expr2\n"], "Description": ["This is the same as SOUNDEX(expr1) = SOUNDEX(expr2)."], "Examples": ["SELECT givenname, surname FROM users WHERE givenname SOUNDS LIKE \"robert\";\n+-----------+---------+\n| givenname | surname |\n+-----------+---------+\n| Roberto   | Castro  |\n+-----------+---------+\n"], "Category": ["String Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": ["SELECT givenname, surname FROM users WHERE givenname SOUNDS LIKE \"robert\";"], "Wrong Messages from Ineffective SQLs Refined": ["(pymysql.err.ProgrammingError) (1146, \"Table 'PINOLO_MariaDB.users' doesn't exist\")\n[SQL: SELECT givenname, surname FROM users WHERE givenname SOUNDS LIKE \"robert\";]\n(Background on this error at: https://sqlalche.me/e/20/f405)"]}
{"HTML": "https://mariadb.com//kb/en/spider_bg_direct_sql/", "Title": "SPIDER_BG_DIRECT_SQL", "Feature": ["SPIDER_BG_DIRECT_SQL('sql', 'tmp_table_list', 'parameters')\n"], "Description": ["Executes the given SQL statement in the background on the remote server, as defined in the parameters listing.  If the query returns a result-set, it sttores the results in the given temporary table.  When the given SQL statement executes successfully, this function returns the number of called UDF's.  It returns 0 when the given SQL statement fails.", "This function is a UDF installed with the Spider storage engine."], "Examples": ["SELECT SPIDER_BG_DIRECT_SQL('SELECT * FROM example_table',  '', \n   'srv \"node1\", port \"8607\"') AS \"Direct Query\";\n+--------------+\n| Direct Query | \n+--------------+\n|            1 |\n+--------------+\n"], "Category": ["Spider Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": ["SELECT SPIDER_BG_DIRECT_SQL('SELECT * FROM example_table',  '', \n   'srv \"node1\", port \"8607\"') AS \"Direct Query\";"], "Wrong Messages from Ineffective SQLs Refined": ["(pymysql.err.OperationalError) (1305, 'FUNCTION PINOLO_MariaDB.SPIDER_BG_DIRECT_SQL does not exist')\n[SQL: SELECT SPIDER_BG_DIRECT_SQL('SELECT * FROM example_table',  '', \n   'srv \"node1\", port \"8607\"') AS \"Direct Query\";]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)"]}
{"HTML": "https://mariadb.com//kb/en/spider_direct_sql/", "Title": "SPIDER_DIRECT_SQL", "Feature": ["SPIDER_DIRECT_SQL('sql', 'tmp_table_list', 'parameters')\n"], "Description": ["A UDF installed with the Spider Storage Engine, this function is used to execute the SQL string sql on the remote server, as defined in parameters. If any resultsets are returned, they are stored in the tmp_table_list.", "The function returns 1 if the SQL executes successfully, or 0 if it fails."], "Examples": ["SELECT SPIDER_DIRECT_SQL('SELECT * FROM s', '', 'srv \"node1\", port \"8607\"');\n+----------------------------------------------------------------------+\n| SPIDER_DIRECT_SQL('SELECT * FROM s', '', 'srv \"node1\", port \"8607\"') |\n+----------------------------------------------------------------------+\n|                                                                    1 |\n+----------------------------------------------------------------------+\n"], "Category": ["Spider Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": ["SELECT SPIDER_DIRECT_SQL('SELECT * FROM s', '', 'srv \"node1\", port \"8607\"');"], "Wrong Messages from Ineffective SQLs Refined": ["(pymysql.err.OperationalError) (1305, 'FUNCTION PINOLO_MariaDB.SPIDER_DIRECT_SQL does not exist')\n[SQL: SELECT SPIDER_DIRECT_SQL('SELECT * FROM s', '', 'srv \"node1\", port \"8607\"');]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)"]}
{"HTML": "https://mariadb.com//kb/en/spider_flush_table_mon_cache/", "Title": "SPIDER_FLUSH_TABLE_MON_CACHE", "Feature": ["SPIDER_FLUSH_TABLE_MON_CACHE()\n"], "Description": ["A UDF installed with the Spider Storage Engine, this function is used for refreshing monitoring server information. It returns a value of 1."], "Examples": ["SELECT SPIDER_FLUSH_TABLE_MON_CACHE();\n+--------------------------------+\n| SPIDER_FLUSH_TABLE_MON_CACHE() |\n+--------------------------------+\n|                              1 |\n+--------------------------------+\n"], "Category": ["Spider Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": ["SELECT SPIDER_FLUSH_TABLE_MON_CACHE();"], "Wrong Messages from Ineffective SQLs Refined": ["(pymysql.err.OperationalError) (1305, 'FUNCTION PINOLO_MariaDB.SPIDER_FLUSH_TABLE_MON_CACHE does not exist')\n[SQL: SELECT SPIDER_FLUSH_TABLE_MON_CACHE();]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)"]}
{"HTML": "https://mariadb.com//kb/en/std/", "Title": "STD", "Feature": ["STD(expr)\n"], "Description": ["Returns the population standard deviation of expr. This is an extension\nto standard SQL. The standard SQL function STDDEV_POP() can\nbe used instead. ", "It is an aggregate function, and so can be used with the GROUP BY clause.", "STD() can be used as a window function.", "This function returns NULL if there were no matching rows."], "Examples": ["CREATE OR REPLACE TABLE stats (category VARCHAR(2), x INT);\n\nINSERT INTO stats VALUES \n  ('a',1),('a',2),('a',3),\n  ('b',11),('b',12),('b',20),('b',30),('b',60);\n\nSELECT category, STDDEV_POP(x), STDDEV_SAMP(x), VAR_POP(x) \n  FROM stats GROUP BY category;\n+----------+---------------+----------------+------------+\n| category | STDDEV_POP(x) | STDDEV_SAMP(x) | VAR_POP(x) |\n+----------+---------------+----------------+------------+\n| a        |        0.8165 |         1.0000 |     0.6667 |\n| b        |       18.0400 |        20.1693 |   325.4400 |\n+----------+---------------+----------------+------------+\n", "CREATE OR REPLACE TABLE student_test (name CHAR(10), test CHAR(10), score TINYINT);\n\nINSERT INTO student_test VALUES \n    ('Chun', 'SQL', 75), ('Chun', 'Tuning', 73), \n    ('Esben', 'SQL', 43), ('Esben', 'Tuning', 31), \n    ('Kaolin', 'SQL', 56), ('Kaolin', 'Tuning', 88), \n    ('Tatiana', 'SQL', 87);\n\nSELECT name, test, score, STDDEV_POP(score) \n  OVER (PARTITION BY test) AS stddev_results FROM student_test;\n+---------+--------+-------+----------------+\n| name    | test   | score | stddev_results |\n+---------+--------+-------+----------------+\n| Chun    | SQL    |    75 |        16.9466 |\n| Chun    | Tuning |    73 |        24.1247 |\n| Esben   | SQL    |    43 |        16.9466 |\n| Esben   | Tuning |    31 |        24.1247 |\n| Kaolin  | SQL    |    56 |        16.9466 |\n| Kaolin  | Tuning |    88 |        24.1247 |\n| Tatiana | SQL    |    87 |        16.9466 |\n+---------+--------+-------+----------------+\n"], "Category": ["Aggregate Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": ["SELECT category, STDDEV_POP(x), STDDEV_SAMP(x), VAR_POP(x) \n  FROM stats GROUP BY category;", "SELECT name, test, score, STDDEV_POP(score) \n  OVER (PARTITION BY test) AS stddev_results FROM student_test;"], "Wrong Messages from Ineffective SQLs Refined": ["(pymysql.err.ProgrammingError) (1146, \"Table 'PINOLO_MariaDB.stats' doesn't exist\")\n[SQL: SELECT category, STDDEV_POP(x), STDDEV_SAMP(x), VAR_POP(x) \n  FROM stats GROUP BY category;]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "(pymysql.err.ProgrammingError) (1146, \"Table 'PINOLO_MariaDB.student_test' doesn't exist\")\n[SQL: SELECT name, test, score, STDDEV_POP(score) \n  OVER (PARTITION BY test) AS stddev_results FROM student_test;]\n(Background on this error at: https://sqlalche.me/e/20/f405)"]}
{"HTML": "https://mariadb.com//kb/en/stddev/", "Title": "STDDEV", "Feature": ["STDDEV(expr)\n"], "Description": ["Returns the population standard deviation of expr. This function is\nprovided for compatibility with Oracle. The standard SQL function\nSTDDEV_POP() can be used instead.", "It is an aggregate function, and so can be used with the GROUP BY clause.", "STDDEV() can be used as a window function.", "This function returns NULL if there were no matching rows."], "Examples": ["CREATE OR REPLACE TABLE stats (category VARCHAR(2), x INT);\n\nINSERT INTO stats VALUES \n  ('a',1),('a',2),('a',3),\n  ('b',11),('b',12),('b',20),('b',30),('b',60);\n\nSELECT category, STDDEV_POP(x), STDDEV_SAMP(x), VAR_POP(x) \n  FROM stats GROUP BY category;\n+----------+---------------+----------------+------------+\n| category | STDDEV_POP(x) | STDDEV_SAMP(x) | VAR_POP(x) |\n+----------+---------------+----------------+------------+\n| a        |        0.8165 |         1.0000 |     0.6667 |\n| b        |       18.0400 |        20.1693 |   325.4400 |\n+----------+---------------+----------------+------------+\n", "CREATE OR REPLACE TABLE student_test (name CHAR(10), test CHAR(10), score TINYINT);\n\nINSERT INTO student_test VALUES \n    ('Chun', 'SQL', 75), ('Chun', 'Tuning', 73), \n    ('Esben', 'SQL', 43), ('Esben', 'Tuning', 31), \n    ('Kaolin', 'SQL', 56), ('Kaolin', 'Tuning', 88), \n    ('Tatiana', 'SQL', 87);\n\nSELECT name, test, score, STDDEV_POP(score) \n  OVER (PARTITION BY test) AS stddev_results FROM student_test;\n+---------+--------+-------+----------------+\n| name    | test   | score | stddev_results |\n+---------+--------+-------+----------------+\n| Chun    | SQL    |    75 |        16.9466 |\n| Chun    | Tuning |    73 |        24.1247 |\n| Esben   | SQL    |    43 |        16.9466 |\n| Esben   | Tuning |    31 |        24.1247 |\n| Kaolin  | SQL    |    56 |        16.9466 |\n| Kaolin  | Tuning |    88 |        24.1247 |\n| Tatiana | SQL    |    87 |        16.9466 |\n+---------+--------+-------+----------------+\n"], "Category": ["Aggregate Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": ["SELECT category, STDDEV_POP(x), STDDEV_SAMP(x), VAR_POP(x) \n  FROM stats GROUP BY category;", "SELECT name, test, score, STDDEV_POP(score) \n  OVER (PARTITION BY test) AS stddev_results FROM student_test;"], "Wrong Messages from Ineffective SQLs Refined": ["(pymysql.err.ProgrammingError) (1146, \"Table 'PINOLO_MariaDB.stats' doesn't exist\")\n[SQL: SELECT category, STDDEV_POP(x), STDDEV_SAMP(x), VAR_POP(x) \n  FROM stats GROUP BY category;]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "(pymysql.err.ProgrammingError) (1146, \"Table 'PINOLO_MariaDB.student_test' doesn't exist\")\n[SQL: SELECT name, test, score, STDDEV_POP(score) \n  OVER (PARTITION BY test) AS stddev_results FROM student_test;]\n(Background on this error at: https://sqlalche.me/e/20/f405)"]}
{"HTML": "https://mariadb.com//kb/en/stddev_pop/", "Title": "STDDEV_POP", "Feature": ["STDDEV_POP(expr)\n"], "Description": ["Returns the population standard deviation of expr (the square root of\nVAR_POP()). You can also use STD() or\nSTDDEV(), which are equivalent but not standard SQL.", "It is an aggregate function, and so can be used with the GROUP BY clause.", "STDDEV_POP() can be used as a window function.", "STDDEV_POP() returns NULL if there were no matching rows."], "Examples": ["CREATE OR REPLACE TABLE stats (category VARCHAR(2), x INT);\n\nINSERT INTO stats VALUES \n  ('a',1),('a',2),('a',3),\n  ('b',11),('b',12),('b',20),('b',30),('b',60);\n\nSELECT category, STDDEV_POP(x), STDDEV_SAMP(x), VAR_POP(x) \n  FROM stats GROUP BY category;\n+----------+---------------+----------------+------------+\n| category | STDDEV_POP(x) | STDDEV_SAMP(x) | VAR_POP(x) |\n+----------+---------------+----------------+------------+\n| a        |        0.8165 |         1.0000 |     0.6667 |\n| b        |       18.0400 |        20.1693 |   325.4400 |\n+----------+---------------+----------------+------------+\n", "CREATE OR REPLACE TABLE student_test (name CHAR(10), test CHAR(10), score TINYINT);\n\nINSERT INTO student_test VALUES \n    ('Chun', 'SQL', 75), ('Chun', 'Tuning', 73), \n    ('Esben', 'SQL', 43), ('Esben', 'Tuning', 31), \n    ('Kaolin', 'SQL', 56), ('Kaolin', 'Tuning', 88), \n    ('Tatiana', 'SQL', 87);\n\nSELECT name, test, score, STDDEV_POP(score) \n  OVER (PARTITION BY test) AS stddev_results FROM student_test;\n+---------+--------+-------+----------------+\n| name    | test   | score | stddev_results |\n+---------+--------+-------+----------------+\n| Chun    | SQL    |    75 |        16.9466 |\n| Chun    | Tuning |    73 |        24.1247 |\n| Esben   | SQL    |    43 |        16.9466 |\n| Esben   | Tuning |    31 |        24.1247 |\n| Kaolin  | SQL    |    56 |        16.9466 |\n| Kaolin  | Tuning |    88 |        24.1247 |\n| Tatiana | SQL    |    87 |        16.9466 |\n+---------+--------+-------+----------------+\n"], "Category": ["Aggregate Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": ["SELECT category, STDDEV_POP(x), STDDEV_SAMP(x), VAR_POP(x) \n  FROM stats GROUP BY category;", "SELECT name, test, score, STDDEV_POP(score) \n  OVER (PARTITION BY test) AS stddev_results FROM student_test;"], "Wrong Messages from Ineffective SQLs Refined": ["(pymysql.err.ProgrammingError) (1146, \"Table 'PINOLO_MariaDB.stats' doesn't exist\")\n[SQL: SELECT category, STDDEV_POP(x), STDDEV_SAMP(x), VAR_POP(x) \n  FROM stats GROUP BY category;]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "(pymysql.err.ProgrammingError) (1146, \"Table 'PINOLO_MariaDB.student_test' doesn't exist\")\n[SQL: SELECT name, test, score, STDDEV_POP(score) \n  OVER (PARTITION BY test) AS stddev_results FROM student_test;]\n(Background on this error at: https://sqlalche.me/e/20/f405)"]}
{"HTML": "https://mariadb.com//kb/en/area/", "Title": "ST_AREA", "Feature": ["ST_Area(poly)\nArea(poly)\n"], "Description": ["Returns as a double-precision number the area of the Polygon value poly, as measured in its spatial reference system.", "ST_Area() and Area() are synonyms."], "Examples": ["SET @poly = 'Polygon((0 0,0 3,3 0,0 0),(1 1,1 2,2 1,1 1))';\n\nSELECT Area(GeomFromText(@poly));\n+---------------------------+\n| Area(GeomFromText(@poly)) |\n+---------------------------+\n|                         4 |\n+---------------------------+\n"], "Category": ["Geographic Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": [], "Wrong Messages from Ineffective SQLs Refined": []}
{"HTML": "https://mariadb.com//kb/en/st_dimension/", "Title": "ST_DIMENSION", "Feature": ["ST_Dimension(g)\nDimension(g)\n"], "Description": ["Returns the inherent dimension of the geometry value g. The result can\nbe", "DimensionDefinition\n   -1empty geometry\n    0geometry with no length or area\n    1geometry with no area but nonzero length\n    2geometry with nonzero area\n\n", "ST_Dimension() and Dimension() are synonyms."], "Examples": ["SELECT Dimension(GeomFromText('LineString(1 1,2 2)'));\n+------------------------------------------------+\n| Dimension(GeomFromText('LineString(1 1,2 2)')) |\n+------------------------------------------------+\n|                                              1 |\n+------------------------------------------------+\n"], "Category": ["Geographic Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": [], "Wrong Messages from Ineffective SQLs Refined": []}
{"HTML": "https://mariadb.com//kb/en/endpoint/", "Title": "ST_ENDPOINT", "Feature": ["ST_EndPoint(ls)\nEndPoint(ls)\n"], "Description": ["Returns the Point that is the endpoint of the\nLineString value ls.", "ST_EndPoint() and EndPoint() are synonyms."], "Examples": ["SET @ls = 'LineString(1 1,2 2,3 3)';\n\nSELECT AsText(EndPoint(GeomFromText(@ls)));\n+-------------------------------------+\n| AsText(EndPoint(GeomFromText(@ls))) |\n+-------------------------------------+\n| POINT(3 3)                          |\n+-------------------------------------+\n"], "Category": ["Geographic Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": [], "Wrong Messages from Ineffective SQLs Refined": []}
{"HTML": "https://mariadb.com//kb/en/exteriorring/", "Title": "ST_ExteriorRing", "Feature": ["ST_ExteriorRing(poly)\nExteriorRing(poly)\n"], "Description": ["Returns the exterior ring of the Polygon value poly as a LineString.", "ST_ExteriorRing() and ExteriorRing() are synonyms."], "Examples": ["SET @poly = 'Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))';\n\nSELECT AsText(ExteriorRing(GeomFromText(@poly)));\n+-------------------------------------------+\n| AsText(ExteriorRing(GeomFromText(@poly))) |\n+-------------------------------------------+\n| LINESTRING(0 0,0 3,3 3,3 0,0 0)           |\n+-------------------------------------------+\n"], "Category": ["Geographic Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": [], "Wrong Messages from Ineffective SQLs Refined": []}
{"HTML": "https://mariadb.com//kb/en/geomcollfromtext/", "Title": "ST_GeomCollFromText", "Feature": ["ST_GeomCollFromText(wkt[,srid])\nST_GeometryCollectionFromText(wkt[,srid])\nGeomCollFromText(wkt[,srid])\nGeometryCollectionFromText(wkt[,srid])\n"], "Description": ["Constructs a GEOMETRYCOLLECTION value using its WKT \nrepresentation and SRID.", "ST_GeomCollFromText(), ST_GeometryCollectionFromText(), GeomCollFromText() and GeometryCollectionFromText() are all synonyms."], "Examples": ["CREATE TABLE gis_geometrycollection  (g GEOMETRYCOLLECTION);\nSHOW FIELDS FROM gis_geometrycollection;\nINSERT INTO gis_geometrycollection VALUES\n    (GeomCollFromText('GEOMETRYCOLLECTION(POINT(0 0), LINESTRING(0 0,10 10))')),\n    (GeometryFromWKB(AsWKB(GeometryCollection(Point(44, 6), LineString(Point(3, 6), Point(7, 9)))))),\n    (GeomFromText('GeometryCollection()')),\n    (GeomFromText('GeometryCollection EMPTY'));\n"], "Category": ["Geographic Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": [], "Wrong Messages from Ineffective SQLs Refined": []}
{"HTML": "https://mariadb.com//kb/en/geometryn/", "Title": "ST_GEOMETRYN", "Feature": ["ST_GeometryN(gc,N)\nGeometryN(gc,N)\n"], "Description": ["Returns the N-th geometry in the GeometryCollection gc. Geometries are numbered beginning with 1.", "ST_GeometryN() and GeometryN() are synonyms."], "Examples": ["SET @gc = 'GeometryCollection(Point(1 1),LineString(12 14, 9 11))';\n\nSELECT AsText(GeometryN(GeomFromText(@gc),1));\n+----------------------------------------+\n| AsText(GeometryN(GeomFromText(@gc),1)) |\n+----------------------------------------+\n| POINT(1 1)                             |\n+----------------------------------------+\n"], "Category": ["Geographic Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": [], "Wrong Messages from Ineffective SQLs Refined": []}
{"HTML": "https://mariadb.com//kb/en/geometrytype/", "Title": "ST_GEOMETRYTYPE", "Feature": ["ST_GeometryType(g)\nGeometryType(g)\n"], "Description": ["Returns as a string the name of the geometry type of which the\ngeometry instance g is a member. The name corresponds to one of the\ninstantiable Geometry subclasses.", "ST_GeometryType() and GeometryType() are synonyms."], "Examples": ["SELECT GeometryType(GeomFromText('POINT(1 1)'));\n+------------------------------------------+\n| GeometryType(GeomFromText('POINT(1 1)')) |\n+------------------------------------------+\n| POINT                                    |\n+------------------------------------------+\n"], "Category": ["Geographic Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": [], "Wrong Messages from Ineffective SQLs Refined": []}
{"HTML": "https://mariadb.com//kb/en/geomfromtext/", "Title": "ST_GeomFromText", "Feature": ["ST_GeomFromText(wkt[,srid])\nST_GeometryFromText(wkt[,srid])\nGeomFromText(wkt[,srid])\nGeometryFromText(wkt[,srid])\n"], "Description": ["Constructs a geometry value of any type using its WKT representation and SRID.", "GeomFromText(), GeometryFromText(), ST_GeomFromText() and ST_GeometryFromText() are all synonyms."], "Examples": ["SET @g = ST_GEOMFROMTEXT('POLYGON((1 1,1 5,4 9,6 9,9 3,7 2,1 1))');\n"], "Category": ["Geographic Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": ["SET @g = ST_GEOMFROMTEXT('POLYGON((1 1,1 5,4 9,6 9,9 3,7 2,1 1))');"], "Wrong Messages from Ineffective SQLs Refined": ["This result object does not return rows. It has been closed automatically."]}
{"HTML": "https://mariadb.com//kb/en/interiorringn/", "Title": "ST_InteriorRingN", "Feature": ["ST_InteriorRingN(poly,N)\nInteriorRingN(poly,N)\n"], "Description": ["Returns the N-th interior ring for the Polygon value poly as a LineString. Rings are numbered beginning with 1.", "ST_InteriorRingN() and InteriorRingN() are synonyms."], "Examples": ["SET @poly = 'Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))';\n\nSELECT AsText(InteriorRingN(GeomFromText(@poly),1));\n+----------------------------------------------+\n| AsText(InteriorRingN(GeomFromText(@poly),1)) |\n+----------------------------------------------+\n| LINESTRING(1 1,1 2,2 2,2 1,1 1)              |\n+----------------------------------------------+\n"], "Category": ["Geographic Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": [], "Wrong Messages from Ineffective SQLs Refined": []}
{"HTML": "https://mariadb.com//kb/en/linefromtext/", "Title": "ST_LineFromText", "Feature": ["ST_LineFromText(wkt[,srid])\nST_LineStringFromText(wkt[,srid])\nLineFromText(wkt[,srid])\nLineStringFromText(wkt[,srid])\n"], "Description": ["Constructs a LINESTRING value using its WKT representation and SRID.", "ST_LineFromText(), ST_LineStringFromText(), ST_LineFromText() and ST_LineStringFromText() are all synonyms."], "Examples": ["CREATE TABLE gis_line  (g LINESTRING);\nSHOW FIELDS FROM gis_line;\nINSERT INTO gis_line VALUES\n    (LineFromText('LINESTRING(0 0,0 10,10 0)')),\n    (LineStringFromText('LINESTRING(10 10,20 10,20 20,10 20,10 10)')),\n    (LineStringFromWKB(AsWKB(LineString(Point(10, 10), Point(40, 10)))));\n"], "Category": ["Geographic Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": [], "Wrong Messages from Ineffective SQLs Refined": []}
{"HTML": "https://mariadb.com//kb/en/numgeometries/", "Title": "ST_NUMGEOMETRIES", "Feature": ["ST_NumGeometries(gc)\nNumGeometries(gc)\n"], "Description": ["Returns the number of geometries in the GeometryCollection gc.", "ST_NumGeometries() and NumGeometries() are synonyms."], "Examples": ["SET @gc = 'GeometryCollection(Point(1 1),LineString(2 2, 3 3))';\n\nSELECT NUMGEOMETRIES(GeomFromText(@gc));\n+----------------------------------+\n| NUMGEOMETRIES(GeomFromText(@gc)) |\n+----------------------------------+\n|                                2 |\n+----------------------------------+\n"], "Category": ["Geographic Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": [], "Wrong Messages from Ineffective SQLs Refined": []}
{"HTML": "https://mariadb.com//kb/en/numpoints/", "Title": "ST_NUMPOINTS", "Feature": ["ST_NumPoints(ls)\nNumPoints(ls)\n"], "Description": ["Returns the number of Point objects in the LineString\nvalue ls.", "ST_NumPoints() and NumPoints() are synonyms."], "Examples": ["SET @ls = 'LineString(1 1,2 2,3 3)';\n\nSELECT NumPoints(GeomFromText(@ls));\n+------------------------------+\n| NumPoints(GeomFromText(@ls)) |\n+------------------------------+\n|                            3 |\n+------------------------------+\n"], "Category": ["Geographic Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": [], "Wrong Messages from Ineffective SQLs Refined": []}
{"HTML": "https://mariadb.com//kb/en/pointfromtext/", "Title": "ST_PointFromText", "Feature": ["ST_PointFromText(wkt[,srid])\nPointFromText(wkt[,srid])\n"], "Description": ["Constructs a POINT value using its WKT representation and SRID.", "ST_PointFromText() and PointFromText() are synonyms."], "Examples": ["CREATE TABLE gis_point  (g POINT);\nSHOW FIELDS FROM gis_point;\nINSERT INTO gis_point VALUES\n    (PointFromText('POINT(10 10)')),\n    (PointFromText('POINT(20 10)')),\n    (PointFromText('POINT(20 20)')),\n    (PointFromWKB(AsWKB(PointFromText('POINT(10 20)'))));\n"], "Category": ["Geographic Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": [], "Wrong Messages from Ineffective SQLs Refined": []}
{"HTML": "https://mariadb.com//kb/en/pointn/", "Title": "ST_POINTN", "Feature": ["ST_PointN(ls,N)\nPointN(ls,N)\n"], "Description": ["Returns the N-th Point in the LineString value ls.\nPoints are numbered beginning with 1.", "ST_PointN() and PointN() are synonyms."], "Examples": ["SET @ls = 'LineString(1 1,2 2,3 3)';\n\nSELECT AsText(PointN(GeomFromText(@ls),2));\n+-------------------------------------+\n| AsText(PointN(GeomFromText(@ls),2)) |\n+-------------------------------------+\n| POINT(2 2)                          |\n+-------------------------------------+\n"], "Category": ["Geographic Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": [], "Wrong Messages from Ineffective SQLs Refined": []}
{"HTML": "https://mariadb.com//kb/en/polyfromtext/", "Title": "ST_PolyFromText", "Feature": ["ST_PolyFromText(wkt[,srid])\nST_PolygonFromText(wkt[,srid])\nPolyFromText(wkt[,srid])\nPolygonFromText(wkt[,srid])\n"], "Description": ["Constructs a POLYGON value using its WKT representation and SRID.", "ST_PolyFromText(), ST_PolygonFromText(), PolyFromText() and ST_PolygonFromText() are all synonyms."], "Examples": ["CREATE TABLE gis_polygon   (g POLYGON);\nINSERT INTO gis_polygon VALUES\n    (PolygonFromText('POLYGON((10 10,20 10,20 20,10 20,10 10))')),\n    (PolyFromText('POLYGON((0 0,50 0,50 50,0 50,0 0), (10 10,20 10,20 20,10 20,10 10))'));\n"], "Category": ["Geographic Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": [], "Wrong Messages from Ineffective SQLs Refined": []}
{"HTML": "https://mariadb.com//kb/en/srid/", "Title": "ST_SRID", "Feature": ["ST_SRID(g)\nSRID(g)\n"], "Description": ["Returns an integer indicating the Spatial Reference System ID for the\ngeometry value g.", "In MariaDB, the SRID value is just an integer associated with the\ngeometry value. All calculations are done assuming Euclidean (planar)\ngeometry.", "ST_SRID() and SRID() are synonyms."], "Examples": ["SELECT SRID(GeomFromText('LineString(1 1,2 2)',101));\n+-----------------------------------------------+\n| SRID(GeomFromText('LineString(1 1,2 2)',101)) |\n+-----------------------------------------------+\n|                                           101 |\n+-----------------------------------------------+\n"], "Category": ["Geographic Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": [], "Wrong Messages from Ineffective SQLs Refined": []}
{"HTML": "https://mariadb.com//kb/en/st_startpoint/", "Title": "ST_STARTPOINT", "Feature": ["ST_StartPoint(ls)\nStartPoint(ls)\n"], "Description": ["Returns the Point that is the start point of the\nLineString value ls.", "ST_StartPoint() and StartPoint() are synonyms."], "Examples": ["SET @ls = 'LineString(1 1,2 2,3 3)';\n\nSELECT AsText(StartPoint(GeomFromText(@ls)));\n+---------------------------------------+\n| AsText(StartPoint(GeomFromText(@ls))) |\n+---------------------------------------+\n| POINT(1 1)                            |\n+---------------------------------------+\n"], "Category": ["Geographic Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": [], "Wrong Messages from Ineffective SQLs Refined": []}
{"HTML": "https://mariadb.com//kb/en/st_x/", "Title": "ST_X", "Feature": ["ST_X(p)\nX(p)\n"], "Description": ["Returns the X-coordinate value for the point p as a double-precision number.", "ST_X() and X() are synonyms."], "Examples": ["SET @pt = 'Point(56.7 53.34)';\n\nSELECT X(GeomFromText(@pt));\n+----------------------+\n| X(GeomFromText(@pt)) |\n+----------------------+\n|                 56.7 |\n+----------------------+\n"], "Category": ["Geographic Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": [], "Wrong Messages from Ineffective SQLs Refined": []}
{"HTML": "https://mariadb.com//kb/en/st_y/", "Title": "ST_Y", "Feature": ["ST_Y(p)\nY(p)\n"], "Description": ["Returns the Y-coordinate value for the point p as a double-precision number.", "ST_Y() and Y() are synonyms."], "Examples": ["SET @pt = 'Point(56.7 53.34)';\n\nSELECT Y(GeomFromText(@pt));\n+----------------------+\n| Y(GeomFromText(@pt)) |\n+----------------------+\n|                53.34 |\n+----------------------+\n"], "Category": ["Geographic Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": [], "Wrong Messages from Ineffective SQLs Refined": []}
{"HTML": "https://mariadb.com//kb/en/sum/", "Title": "SUM", "Feature": ["SUM([DISTINCT] expr)\n"], "Description": ["Returns the sum of expr. If the return set has no rows, SUM() returns\nNULL. The DISTINCT keyword can be used to sum only the distinct values\nof expr.", "SUM() can be used as a window function, although not with the DISTINCT specifier."], "Examples": ["CREATE TABLE sales (sales_value INT);\nINSERT INTO sales VALUES(10),(20),(20),(40);\n\nSELECT SUM(sales_value) FROM sales;\n+------------------+\n| SUM(sales_value) |\n+------------------+\n|               90 |\n+------------------+\n\nSELECT SUM(DISTINCT(sales_value)) FROM sales;\n+----------------------------+\n| SUM(DISTINCT(sales_value)) |\n+----------------------------+\n|                         70 |\n+----------------------------+\n", "CREATE TABLE sales (name CHAR(10), month CHAR(10), units INT);\n\nINSERT INTO sales VALUES \n  ('Chun', 'Jan', 75), ('Chun', 'Feb', 73),\n  ('Esben', 'Jan', 43), ('Esben', 'Feb', 31),\n  ('Kaolin', 'Jan', 56), ('Kaolin', 'Feb', 88),\n  ('Tatiana', 'Jan', 87), ('Tatiana', 'Feb', 83);\n\nSELECT name, SUM(units) FROM sales GROUP BY name;\n+---------+------------+\n| name    | SUM(units) |\n+---------+------------+\n| Chun    |        148 |\n| Esben   |         74 |\n| Kaolin  |        144 |\n| Tatiana |        170 |\n+---------+------------+\n", "SELECT name,SUM(units) FROM sales\n;+------+------------+\n| name | SUM(units) |\n+------+------------+\n| Chun |        536 |\n+------+------------+\n", "CREATE OR REPLACE TABLE student_test (name CHAR(10), test CHAR(10), score TINYINT);\nINSERT INTO student_test VALUES \n    ('Chun', 'SQL', 75), ('Chun', 'Tuning', 73), \n    ('Esben', 'SQL', 43), ('Esben', 'Tuning', 31), \n    ('Kaolin', 'SQL', 56), ('Kaolin', 'Tuning', 88), \n    ('Tatiana', 'SQL', 87);\n\nSELECT name, test, score, SUM(score) OVER (PARTITION BY name) AS total_score FROM student_test;\n+---------+--------+-------+-------------+\n| name    | test   | score | total_score |\n+---------+--------+-------+-------------+\n| Chun    | SQL    |    75 |         148 |\n| Chun    | Tuning |    73 |         148 |\n| Esben   | SQL    |    43 |          74 |\n| Esben   | Tuning |    31 |          74 |\n| Kaolin  | SQL    |    56 |         144 |\n| Kaolin  | Tuning |    88 |         144 |\n| Tatiana | SQL    |    87 |          87 |\n+---------+--------+-------+-------------+\n"], "Category": ["Aggregate Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": ["SELECT SUM(sales_value) FROM sales;", "SELECT SUM(DISTINCT(sales_value)) FROM sales;", "SELECT name, SUM(units) FROM sales GROUP BY name;", "SELECT name,SUM(units) FROM sales\n;", "SELECT name, test, score, SUM(score) OVER (PARTITION BY name) AS total_score FROM student_test;"], "Wrong Messages from Ineffective SQLs Refined": ["(pymysql.err.ProgrammingError) (1146, \"Table 'PINOLO_MariaDB.sales' doesn't exist\")\n[SQL: SELECT SUM(sales_value) FROM sales;]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "(pymysql.err.ProgrammingError) (1146, \"Table 'PINOLO_MariaDB.sales' doesn't exist\")\n[SQL: SELECT SUM(DISTINCT(sales_value)) FROM sales;]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "(pymysql.err.ProgrammingError) (1146, \"Table 'PINOLO_MariaDB.sales' doesn't exist\")\n[SQL: SELECT name, SUM(units) FROM sales GROUP BY name;]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "(pymysql.err.ProgrammingError) (1146, \"Table 'PINOLO_MariaDB.sales' doesn't exist\")\n[SQL: SELECT name,SUM(units) FROM sales\n;]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "(pymysql.err.ProgrammingError) (1146, \"Table 'PINOLO_MariaDB.student_test' doesn't exist\")\n[SQL: SELECT name, test, score, SUM(score) OVER (PARTITION BY name) AS total_score FROM student_test;]\n(Background on this error at: https://sqlalche.me/e/20/f405)"]}
{"HTML": "https://mariadb.com//kb/en/updatexml/", "Title": "UPDATEXML", "Feature": ["UpdateXML(xml_target, xpath_expr, new_xml)\n"], "Description": ["This function replaces a single portion of a given fragment of XML markup\nxml_target with a new XML fragment new_xml, and then returns the\nchanged XML. The portion of xml_target that is replaced matches an XPath\nexpression xpath_expr supplied by the user. If no expression matching\nxpath_expr is found, or if multiple matches are found, the function returns\nthe original xml_target XML fragment. All three arguments should be\nstrings."], "Examples": ["SELECT\n    UpdateXML('<a><b>ccc</b><d></d></a>', '/a', '<e>fff</e>') AS val1,\n    UpdateXML('<a><b>ccc</b><d></d></a>', '/b', '<e>fff</e>') AS val2,\n    UpdateXML('<a><b>ccc</b><d></d></a>', '//b', '<e>fff</e>') AS val3,\n    UpdateXML('<a><b>ccc</b><d></d></a>', '/a/d', '<e>fff</e>') AS val4,\n    UpdateXML('<a><d></d><b>ccc</b><d></d></a>', '/a/d', '<e>fff</e>') AS val5\n    \\G\n*************************** 1. row ***************************\nval1: <e>fff</e>\nval2: <a><b>ccc</b><d></d></a>\nval3: <a><e>fff</e><d></d></a>\nval4: <a><b>ccc</b><e>fff</e></a>\nval5: <a><d></d><b>ccc</b><d></d></a>\n1 row in set (0.00 sec)\n"], "Category": ["String Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": [], "Wrong Messages from Ineffective SQLs Refined": []}
{"HTML": "https://mariadb.com//kb/en/variance/", "Title": "VARIANCE", "Feature": ["VARIANCE(expr) \n"], "Description": ["Returns the population standard variance of expr. This is an extension to\nstandard SQL. The standard SQL function VAR_POP() can be used\ninstead.", "Variance is calculated by", "working out the mean for the set\nfor each number, subtracting the mean and squaring the result\ncalculate the average of the resulting differences\n", "It is an aggregate function, and so can be used with the GROUP BY clause.", "VARIANCE() can be used as a window function.", "VARIANCE() returns NULL if there were no matching rows."], "Examples": ["CREATE TABLE v(i tinyint);\n\nINSERT INTO v VALUES(101),(99);\n\nSELECT VARIANCE(i) FROM v;\n+-------------+\n| VARIANCE(i) |\n+-------------+\n|      1.0000 |\n+-------------+\n\nINSERT INTO v VALUES(120),(80);\n\nSELECT VARIANCE(i) FROM v;\n+-------------+\n| VARIANCE(i) |\n+-------------+\n|    200.5000 |\n+-------------+\n", "CREATE OR REPLACE TABLE stats (category VARCHAR(2), x INT);\n\nINSERT INTO stats VALUES \n  ('a',1),('a',2),('a',3),\n  ('b',11),('b',12),('b',20),('b',30),('b',60);\n\nSELECT category, STDDEV_POP(x), STDDEV_SAMP(x), VAR_POP(x) \n  FROM stats GROUP BY category;\n+----------+---------------+----------------+------------+\n| category | STDDEV_POP(x) | STDDEV_SAMP(x) | VAR_POP(x) |\n+----------+---------------+----------------+------------+\n| a        |        0.8165 |         1.0000 |     0.6667 |\n| b        |       18.0400 |        20.1693 |   325.4400 |\n+----------+---------------+----------------+------------+\n", "CREATE OR REPLACE TABLE student_test (name CHAR(10), test CHAR(10), score TINYINT);\n\nINSERT INTO student_test VALUES \n    ('Chun', 'SQL', 75), ('Chun', 'Tuning', 73), \n    ('Esben', 'SQL', 43), ('Esben', 'Tuning', 31), \n    ('Kaolin', 'SQL', 56), ('Kaolin', 'Tuning', 88), \n    ('Tatiana', 'SQL', 87);\n\nSELECT name, test, score, VAR_POP(score) \n  OVER (PARTITION BY test) AS variance_results FROM student_test;\n+---------+--------+-------+------------------+\n| name    | test   | score | variance_results |\n+---------+--------+-------+------------------+\n| Chun    | SQL    |    75 |         287.1875 |\n| Chun    | Tuning |    73 |         582.0000 |\n| Esben   | SQL    |    43 |         287.1875 |\n| Esben   | Tuning |    31 |         582.0000 |\n| Kaolin  | SQL    |    56 |         287.1875 |\n| Kaolin  | Tuning |    88 |         582.0000 |\n| Tatiana | SQL    |    87 |         287.1875 |\n+---------+--------+-------+------------------+\n"], "Category": ["Aggregate Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": ["SELECT VARIANCE(i) FROM v;", "SELECT VARIANCE(i) FROM v;", "SELECT name, test, score, VAR_POP(score) \n  OVER (PARTITION BY test) AS variance_results FROM student_test;"], "Wrong Messages from Ineffective SQLs Refined": ["(pymysql.err.ProgrammingError) (1146, \"Table 'PINOLO_MariaDB.v' doesn't exist\")\n[SQL: SELECT VARIANCE(i) FROM v;]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "(pymysql.err.ProgrammingError) (1146, \"Table 'PINOLO_MariaDB.v' doesn't exist\")\n[SQL: SELECT VARIANCE(i) FROM v;]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "(pymysql.err.ProgrammingError) (1146, \"Table 'PINOLO_MariaDB.student_test' doesn't exist\")\n[SQL: SELECT name, test, score, VAR_POP(score) \n  OVER (PARTITION BY test) AS variance_results FROM student_test;]\n(Background on this error at: https://sqlalche.me/e/20/f405)"]}
{"HTML": "https://mariadb.com//kb/en/var_pop/", "Title": "VAR_POP", "Feature": ["VAR_POP(expr)\n"], "Description": ["Returns the population standard variance of expr. It considers rows as\nthe whole population, not as a sample, so it has the number of rows as\nthe denominator. You can also use VARIANCE(), which is equivalent but\nis not standard SQL.", "Variance is calculated by", "working out the mean for the set\nfor each number, subtracting the mean and squaring the result\ncalculate the average of the resulting differences\n", "It is an aggregate function, and so can be used with the GROUP BY clause.", "VAR_POP() can be used as a window function.", "VAR_POP() returns NULL if there were no matching rows."], "Examples": ["CREATE TABLE v(i tinyint);\n\nINSERT INTO v VALUES(101),(99);\n\nSELECT VAR_POP(i) FROM v;\n+------------+\n| VAR_POP(i) |\n+------------+\n|     1.0000 |\n+------------+\n\nINSERT INTO v VALUES(120),(80);\n\nSELECT VAR_POP(i) FROM v;\n+------------+\n| VAR_POP(i) |\n+------------+\n|   200.5000 |\n+------------+\n", "CREATE OR REPLACE TABLE stats (category VARCHAR(2), x INT);\n\nINSERT INTO stats VALUES \n  ('a',1),('a',2),('a',3),\n  ('b',11),('b',12),('b',20),('b',30),('b',60);\n\nSELECT category, STDDEV_POP(x), STDDEV_SAMP(x), VAR_POP(x) \n  FROM stats GROUP BY category;\n+----------+---------------+----------------+------------+\n| category | STDDEV_POP(x) | STDDEV_SAMP(x) | VAR_POP(x) |\n+----------+---------------+----------------+------------+\n| a        |        0.8165 |         1.0000 |     0.6667 |\n| b        |       18.0400 |        20.1693 |   325.4400 |\n+----------+---------------+----------------+------------+\n", "CREATE OR REPLACE TABLE student_test (name CHAR(10), test CHAR(10), score TINYINT);\n\nINSERT INTO student_test VALUES \n    ('Chun', 'SQL', 75), ('Chun', 'Tuning', 73), \n    ('Esben', 'SQL', 43), ('Esben', 'Tuning', 31), \n    ('Kaolin', 'SQL', 56), ('Kaolin', 'Tuning', 88), \n    ('Tatiana', 'SQL', 87);\n\nSELECT name, test, score, VAR_POP(score) \n  OVER (PARTITION BY test) AS variance_results FROM student_test;\n+---------+--------+-------+------------------+\n| name    | test   | score | variance_results |\n+---------+--------+-------+------------------+\n| Chun    | SQL    |    75 |         287.1875 |\n| Esben   | SQL    |    43 |         287.1875 |\n| Kaolin  | SQL    |    56 |         287.1875 |\n| Tatiana | SQL    |    87 |         287.1875 |\n| Chun    | Tuning |    73 |         582.0000 |\n| Esben   | Tuning |    31 |         582.0000 |\n| Kaolin  | Tuning |    88 |         582.0000 |\n+---------+--------+-------+------------------+\n"], "Category": ["Aggregate Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": ["SELECT VAR_POP(i) FROM v;", "SELECT VAR_POP(i) FROM v;", "SELECT category, STDDEV_POP(x), STDDEV_SAMP(x), VAR_POP(x) \n  FROM stats GROUP BY category;", "SELECT name, test, score, VAR_POP(score) \n  OVER (PARTITION BY test) AS variance_results FROM student_test;"], "Wrong Messages from Ineffective SQLs Refined": ["(pymysql.err.ProgrammingError) (1146, \"Table 'PINOLO_MariaDB.v' doesn't exist\")\n[SQL: SELECT VAR_POP(i) FROM v;]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "(pymysql.err.ProgrammingError) (1146, \"Table 'PINOLO_MariaDB.v' doesn't exist\")\n[SQL: SELECT VAR_POP(i) FROM v;]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "(pymysql.err.ProgrammingError) (1146, \"Table 'PINOLO_MariaDB.stats' doesn't exist\")\n[SQL: SELECT category, STDDEV_POP(x), STDDEV_SAMP(x), VAR_POP(x) \n  FROM stats GROUP BY category;]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "(pymysql.err.ProgrammingError) (1146, \"Table 'PINOLO_MariaDB.student_test' doesn't exist\")\n[SQL: SELECT name, test, score, VAR_POP(score) \n  OVER (PARTITION BY test) AS variance_results FROM student_test;]\n(Background on this error at: https://sqlalche.me/e/20/f405)"]}
{"HTML": "https://mariadb.com//kb/en/var_samp/", "Title": "VAR_SAMP", "Feature": ["VAR_SAMP(expr)\n"], "Description": ["Returns the sample variance of expr. That is, the denominator is the number of rows minus one.", "It is an aggregate function, and so can be used with the GROUP BY clause.", "VAR_SAMP() can be used as a window function.", "VAR_SAMP() returns NULL if there were no matching rows."], "Examples": ["CREATE OR REPLACE TABLE stats (category VARCHAR(2), x INT);\n\nINSERT INTO stats VALUES \n  ('a',1),('a',2),('a',3),\n  ('b',11),('b',12),('b',20),('b',30),('b',60);\n\nSELECT category, STDDEV_POP(x), STDDEV_SAMP(x), VAR_POP(x) \n  FROM stats GROUP BY category;\n+----------+---------------+----------------+------------+\n| category | STDDEV_POP(x) | STDDEV_SAMP(x) | VAR_POP(x) |\n+----------+---------------+----------------+------------+\n| a        |        0.8165 |         1.0000 |     0.6667 |\n| b        |       18.0400 |        20.1693 |   325.4400 |\n+----------+---------------+----------------+------------+\n", "CREATE OR REPLACE TABLE student_test (name CHAR(10), test CHAR(10), score TINYINT);\n\nINSERT INTO student_test VALUES \n    ('Chun', 'SQL', 75), ('Chun', 'Tuning', 73), \n    ('Esben', 'SQL', 43), ('Esben', 'Tuning', 31), \n    ('Kaolin', 'SQL', 56), ('Kaolin', 'Tuning', 88), \n    ('Tatiana', 'SQL', 87);\n\nSELECT name, test, score, VAR_SAMP(score) \n  OVER (PARTITION BY test) AS variance_results FROM student_test;\n+---------+--------+-------+------------------+\n| name    | test   | score | variance_results |\n+---------+--------+-------+------------------+\n| Chun    | SQL    |    75 |         382.9167 |\n| Chun    | Tuning |    73 |         873.0000 |\n| Esben   | SQL    |    43 |         382.9167 |\n| Esben   | Tuning |    31 |         873.0000 |\n| Kaolin  | SQL    |    56 |         382.9167 |\n| Kaolin  | Tuning |    88 |         873.0000 |\n| Tatiana | SQL    |    87 |         382.9167 |\n+---------+--------+-------+------------------+\n"], "Category": ["Aggregate Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": ["SELECT name, test, score, VAR_SAMP(score) \n  OVER (PARTITION BY test) AS variance_results FROM student_test;"], "Wrong Messages from Ineffective SQLs Refined": ["(pymysql.err.ProgrammingError) (1146, \"Table 'PINOLO_MariaDB.student_test' doesn't exist\")\n[SQL: SELECT name, test, score, VAR_SAMP(score) \n  OVER (PARTITION BY test) AS variance_results FROM student_test;]\n(Background on this error at: https://sqlalche.me/e/20/f405)"]}
{"HTML": "https://mariadb.com//kb/en/vec_distance/", "Title": "VEC_DISTANCE", "Feature": ["VEC_DISTANCE(v, s)\n"], "Description": ["VEC_Distance is an SQL function that calculates a Euclidean (L2) distance between two points."], "Examples": ["INSERT INTO v VALUES \n     (1, x'e360d63ebe554f3fcdbc523f4522193f5236083d'),\n     (2, x'f511303f72224a3fdd05fe3eb22a133ffae86a3f'),\n     (3,x'f09baa3ea172763f123def3e0c7fe53e288bf33e'),\n     (4,x'b97a523f2a193e3eb4f62e3f2d23583e9dd60d3f'),\n     (5,x'f7c5df3e984b2b3e65e59d3d7376db3eac63773e'),\n     (6,x'de01453ffa486d3f10aa4d3fdd66813c71cb163f'),\n     (7,x'76edfc3e4b57243f10f8423fb158713f020bda3e'),\n     (8,x'56926c3fdf098d3e2c8c5e3d1ad4953daa9d0b3e'),\n     (9,x'7b713f3e5258323f80d1113d673b2b3f66e3583f'),\n     (10,x'6ca1d43e9df91b3fe580da3e1c247d3f147cf33e');\n\nSELECT id FROM v \n  ORDER BY VEC_Distance(v, x'6ca1d43e9df91b3fe580da3e1c247d3f147cf33e');\n+----+\n| id |\n+----+\n| 10 |\n|  7 |\n|  3 |\n|  9 |\n|  2 |\n|  1 |\n|  5 |\n|  4 |\n|  6 |\n|  8 |\n+----+\n"], "Category": ["Vector Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": ["SELECT id FROM v \n  ORDER BY VEC_Distance(v, x'6ca1d43e9df91b3fe580da3e1c247d3f147cf33e');"], "Wrong Messages from Ineffective SQLs Refined": ["(pymysql.err.ProgrammingError) (1146, \"Table 'PINOLO_MariaDB.v' doesn't exist\")\n[SQL: SELECT id FROM v \n  ORDER BY VEC_Distance(v, x'6ca1d43e9df91b3fe580da3e1c247d3f147cf33e');]\n(Background on this error at: https://sqlalche.me/e/20/f405)"]}
{"HTML": "https://mariadb.com//kb/en/vec_fromtext/", "Title": "VEC_FromText", "Feature": ["VEC_FromText(s)\n"], "Description": ["VEC_FromText converts a text representation of the vector (json array of numbers) to a vector (little-endian IEEE float sequence of bytes, 4 bytes per float). "], "Examples": ["select hex(vec_fromtext('[1,2,3]')); \n+------------------------------+\n| hex(vec_fromtext('[1,2,3]')) |\n+------------------------------+\n| 0000803F0000004000004040     |\n+------------------------------+\n"], "Category": ["Vector Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": ["select hex(vec_fromtext('[1,2,3]'));"], "Wrong Messages from Ineffective SQLs Refined": ["(pymysql.err.OperationalError) (1305, 'FUNCTION PINOLO_MariaDB.vec_fromtext does not exist')\n[SQL: select hex(vec_fromtext('[1,2,3]'));]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)"]}
{"HTML": "https://mariadb.com//kb/en/vec_totext/", "Title": "VEC_ToText", "Feature": ["VEC_ToText(v)\n"], "Description": ["VEC_ToText converts a binary vector into a json array of numbers (floats). Returns NULL and throws a warning 4201 if given an invalid vector."], "Examples": ["SELECT VEC_ToText(x'e360d63ebe554f3fcdbc523f4522193f5236083d');\n+---------------------------------------------------------+\n| VEC_ToText(x'e360d63ebe554f3fcdbc523f4522193f5236083d') |\n+---------------------------------------------------------+\n| [0.418708,0.809902,0.823193,0.598179,0.033255]          |\n+---------------------------------------------------------+\n", "SELECT VEC_ToText(x'aabbcc');\n+-----------------------+\n| VEC_ToText(x'aabbcc') |\n+-----------------------+\n| NULL                  |\n+-----------------------+\n1 row in set, 1 warning (0.000 sec)\n\nWarning (Code 4201): Invalid binary vector format. Must use IEEE standard float \n  representation in little-endian format. Use VEC_FromText() to generate it.\n"], "Category": ["Vector Functions"], "Effective SQLs Refined": [], "Ineffective SQLs Refined": ["SELECT VEC_ToText(x'e360d63ebe554f3fcdbc523f4522193f5236083d');", "SELECT VEC_ToText(x'aabbcc');"], "Wrong Messages from Ineffective SQLs Refined": ["(pymysql.err.OperationalError) (1305, 'FUNCTION PINOLO_MariaDB.VEC_ToText does not exist')\n[SQL: SELECT VEC_ToText(x'e360d63ebe554f3fcdbc523f4522193f5236083d');]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "(pymysql.err.OperationalError) (1305, 'FUNCTION PINOLO_MariaDB.VEC_ToText does not exist')\n[SQL: SELECT VEC_ToText(x'aabbcc');]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)"]}
