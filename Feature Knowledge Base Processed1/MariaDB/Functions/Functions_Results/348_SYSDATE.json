{
    "HTML": [
        "https://mariadb.com//kb/en/sysdate/"
    ],
    "Title": [
        "SYSDATE"
    ],
    "Feature": [
        "SYSDATE([precision])\n"
    ],
    "Description": [
        "Returns the current date and time as a value in 'YYYY-MM-DD HH:MM:SS'\nor YYYYMMDDHHMMSS.uuuuuu format, depending on whether the function is\nused in a string or numeric context.",
        "The optional precision determines the microsecond precision. See Microseconds in MariaDB.",
        "SYSDATE() returns the time at which it executes. This differs from the\nbehavior for NOW(), which returns a constant time that indicates the\ntime at which the statement began to execute. (Within a stored routine\nor trigger, NOW() returns the time at which the routine or triggering\nstatement began to execute.)",
        "In addition, changing the timestamp system variable with a SET timestamp statement affects the value returned by\nNOW() but not by SYSDATE(). This means that timestamp settings in the\nbinary log have no effect on invocations of SYSDATE().",
        "Because SYSDATE() can return different values even within the same statement, and is not affected by SET TIMESTAMP, it is non-deterministic and therefore unsafe for replication if statement-based binary logging is used. If that is a problem, you can use row-based logging, or start the server with the --sysdate-is-now mariadbd option to cause SYSDATE() to be an alias for NOW(). The non-deterministic nature of SYSDATE() also means that indexes cannot be used for evaluating expressions that refer to it, and that statements using the SYSDATE() function are unsafe for statement-based replication."
    ],
    "Examples": [
        "SELECT SYSDATE(), SLEEP(2), SYSDATE();",
        "SELECT SYSDATE(4);"
    ],
    "Category": [
        "Date & Time Functions"
    ]
}