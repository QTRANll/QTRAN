{
    "HTML": "https://mariadb.com//kb/en/var_samp/",
    "Title": "VAR_SAMP",
    "Feature": [
        "VAR_SAMP(expr)\n"
    ],
    "Description": [
        "Returns the sample variance of expr. That is, the denominator is the number of rows minus one.",
        "It is an aggregate function, and so can be used with the GROUP BY clause.",
        "VAR_SAMP() can be used as a window function.",
        "VAR_SAMP() returns NULL if there were no matching rows."
    ],
    "Examples": [
        "CREATE OR REPLACE TABLE stats (category VARCHAR(2), x INT);\n\nINSERT INTO stats VALUES \n  ('a',1),('a',2),('a',3),\n  ('b',11),('b',12),('b',20),('b',30),('b',60);\n\nSELECT category, STDDEV_POP(x), STDDEV_SAMP(x), VAR_POP(x) \n  FROM stats GROUP BY category;\n+----------+---------------+----------------+------------+\n| category | STDDEV_POP(x) | STDDEV_SAMP(x) | VAR_POP(x) |\n+----------+---------------+----------------+------------+\n| a        |        0.8165 |         1.0000 |     0.6667 |\n| b        |       18.0400 |        20.1693 |   325.4400 |\n+----------+---------------+----------------+------------+\n",
        "CREATE OR REPLACE TABLE student_test (name CHAR(10), test CHAR(10), score TINYINT);\n\nINSERT INTO student_test VALUES \n    ('Chun', 'SQL', 75), ('Chun', 'Tuning', 73), \n    ('Esben', 'SQL', 43), ('Esben', 'Tuning', 31), \n    ('Kaolin', 'SQL', 56), ('Kaolin', 'Tuning', 88), \n    ('Tatiana', 'SQL', 87);\n\nSELECT name, test, score, VAR_SAMP(score) \n  OVER (PARTITION BY test) AS variance_results FROM student_test;\n+---------+--------+-------+------------------+\n| name    | test   | score | variance_results |\n+---------+--------+-------+------------------+\n| Chun    | SQL    |    75 |         382.9167 |\n| Chun    | Tuning |    73 |         873.0000 |\n| Esben   | SQL    |    43 |         382.9167 |\n| Esben   | Tuning |    31 |         873.0000 |\n| Kaolin  | SQL    |    56 |         382.9167 |\n| Kaolin  | Tuning |    88 |         873.0000 |\n| Tatiana | SQL    |    87 |         382.9167 |\n+---------+--------+-------+------------------+\n"
    ],
    "Category": [
        "Aggregate Functions"
    ],
    "Effective SQLs Refined": [],
    "Ineffective SQLs Refined": [
        "SELECT name, test, score, VAR_SAMP(score) \n  OVER (PARTITION BY test) AS variance_results FROM student_test;"
    ],
    "Wrong Messages from Ineffective SQLs Refined": [
        "(pymysql.err.ProgrammingError) (1146, \"Table 'PINOLO_MariaDB.student_test' doesn't exist\")\n[SQL: SELECT name, test, score, VAR_SAMP(score) \n  OVER (PARTITION BY test) AS variance_results FROM student_test;]\n(Background on this error at: https://sqlalche.me/e/20/f405)"
    ],
    "SQLs Generated1": [
        {
            "Example SQL": "SELECT VAR_SAMP(column_name) FROM table_name;"
        },
        {
            "Example SQL": "SELECT VAR_SAMP(column_name);"
        },
        {
            "Example SQL": "SELECT VAR_SAMP(1);"
        }
    ],
    "SQLs Generated Costs1": [
        {
            "Total Tokens": 325,
            "Prompt Tokens": 302,
            "Completion Tokens": 23,
            "Total Cost (USD)": 5.909999999999999e-05
        },
        {
            "Total Tokens": 477,
            "Prompt Tokens": 457,
            "Completion Tokens": 20,
            "Total Cost (USD)": 8.054999999999999e-05
        },
        {
            "Total Tokens": 626,
            "Prompt Tokens": 606,
            "Completion Tokens": 20,
            "Total Cost (USD)": 0.00010289999999999998
        }
    ],
    "SQLs Generated ExecResults1": [
        "None",
        "None",
        "[(None,)]"
    ],
    "SQLs Generated ExecTimes1": [
        "0",
        "0",
        "0.02803516387939453"
    ],
    "SQLs Generated ErrorMessages1": [
        "(pymysql.err.ProgrammingError) (1146, \"Table 'PINOLO_MariaDB.table_name' doesn't exist\")\n",
        "(pymysql.err.OperationalError) (1054, \"Unknown column 'column_name' in 'field list'\")\n",
        "None"
    ],
    "Effective SQLs Generated1": [
        "SELECT VAR_SAMP(1);"
    ]
}