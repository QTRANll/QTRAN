{
    "HTML": "https://mariadb.com//kb/en/row_number/",
    "Title": "ROW_NUMBER",
    "Feature": [
        "ROW_NUMBER() OVER (\n  [ PARTITION BY partition_expression ]\n  [ ORDER BY order_list ]\n) \n"
    ],
    "Description": [
        "ROW_NUMBER() is a window function that displays the number of a given row, starting at one and following the ORDER BY sequence of the window function, with identical values receiving different row numbers. It is similar to the RANK() and DENSE_RANK() functions except that in that function, identical values will receive the same rank for each result."
    ],
    "Examples": [
        "CREATE TABLE student(course VARCHAR(10), mark int, name varchar(10));\n\nINSERT INTO student VALUES \n  ('Maths', 60, 'Thulile'),\n  ('Maths', 60, 'Pritha'),\n  ('Maths', 70, 'Voitto'),\n  ('Maths', 55, 'Chun'),\n  ('Biology', 60, 'Bilal'),\n   ('Biology', 70, 'Roger');\n\nSELECT \n  RANK() OVER (PARTITION BY course ORDER BY mark DESC) AS rank, \n  DENSE_RANK() OVER (PARTITION BY course ORDER BY mark DESC) AS dense_rank, \n  ROW_NUMBER() OVER (PARTITION BY course ORDER BY mark DESC) AS row_num, \n  course, mark, name \nFROM student ORDER BY course, mark DESC;\n+------+------------+---------+---------+------+---------+\n| rank | dense_rank | row_num | course  | mark | name    |\n+------+------------+---------+---------+------+---------+\n|    1 |          1 |       1 | Biology |   70 | Roger   |\n|    2 |          2 |       2 | Biology |   60 | Bilal   |\n|    1 |          1 |       1 | Maths   |   70 | Voitto  |\n|    2 |          2 |       2 | Maths   |   60 | Thulile |\n|    2 |          2 |       3 | Maths   |   60 | Pritha  |\n|    4 |          3 |       4 | Maths   |   55 | Chun    |\n+------+------------+---------+---------+------+---------+\n"
    ],
    "Category": [
        "Window Functions"
    ],
    "Effective SQLs Refined": [],
    "Ineffective SQLs Refined": [
        "SELECT \n  RANK() OVER (PARTITION BY course ORDER BY mark DESC) AS rank, \n  DENSE_RANK() OVER (PARTITION BY course ORDER BY mark DESC) AS dense_rank, \n  ROW_NUMBER() OVER (PARTITION BY course ORDER BY mark DESC) AS row_num, \n  course, mark, name \nFROM student ORDER BY course, mark DESC;"
    ],
    "Wrong Messages from Ineffective SQLs Refined": [
        "(pymysql.err.OperationalError) (1054, \"Unknown column 'course' in 'field list'\")\n[SQL: SELECT \n  RANK() OVER (PARTITION BY course ORDER BY mark DESC) AS rank, \n  DENSE_RANK() OVER (PARTITION BY course ORDER BY mark DESC) AS dense_rank, \n  ROW_NUMBER() OVER (PARTITION BY course ORDER BY mark DESC) AS row_num, \n  course, mark, name \nFROM student ORDER BY course, mark DESC;]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)"
    ],
    "SQLs Generated1": [
        {
            "Example SQL": "SELECT ROW_NUMBER() OVER (ORDER BY column_name) AS row_num FROM table_name;"
        },
        {
            "Example SQL": "SELECT ROW_NUMBER() OVER (ORDER BY column_name) AS row_num FROM your_table;"
        },
        {
            "Example SQL": "SELECT ROW_NUMBER() OVER (ORDER BY some_column) AS row_num FROM some_existing_table;"
        },
        {
            "Example SQL": "SELECT ROW_NUMBER() OVER (ORDER BY 1) AS row_num;"
        }
    ],
    "SQLs Generated Costs1": [
        {
            "Total Tokens": 356,
            "Prompt Tokens": 326,
            "Completion Tokens": 30,
            "Total Cost (USD)": 6.69e-05
        },
        {
            "Total Tokens": 517,
            "Prompt Tokens": 487,
            "Completion Tokens": 30,
            "Total Cost (USD)": 9.104999999999999e-05
        },
        {
            "Total Tokens": 680,
            "Prompt Tokens": 649,
            "Completion Tokens": 31,
            "Total Cost (USD)": 0.00011595
        },
        {
            "Total Tokens": 839,
            "Prompt Tokens": 812,
            "Completion Tokens": 27,
            "Total Cost (USD)": 0.000138
        }
    ],
    "SQLs Generated ExecResults1": [
        "None",
        "None",
        "None",
        "[(1,)]"
    ],
    "SQLs Generated ExecTimes1": [
        "0",
        "0",
        "0",
        "0.015461206436157227"
    ],
    "SQLs Generated ErrorMessages1": [
        "(pymysql.err.ProgrammingError) (1146, \"Table 'PINOLO_MariaDB.table_name' doesn't exist\")\n",
        "(pymysql.err.ProgrammingError) (1146, \"Table 'PINOLO_MariaDB.your_table' doesn't exist\")\n",
        "(pymysql.err.ProgrammingError) (1146, \"Table 'PINOLO_MariaDB.some_existing_table' doesn't exist\")\n",
        "None"
    ],
    "Effective SQLs Generated1": [
        "SELECT ROW_NUMBER() OVER (ORDER BY 1) AS row_num;"
    ]
}