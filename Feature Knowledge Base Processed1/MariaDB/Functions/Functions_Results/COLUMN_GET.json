{
    "HTML": "https://mariadb.com//kb/en/column_get/",
    "Title": "COLUMN_GET",
    "Feature": [
        "COLUMN_GET(dyncol_blob, column_nr as type);\nCOLUMN_GET(dyncol_blob, column_name as type);\n"
    ],
    "Description": [
        "Gets the value of a dynamic column by its name. If no column with the given name exists, NULL will be returned.",
        "column_name as type requires that one specify the datatype of the dynamic column they are reading. ",
        "This may seem counter-intuitive: why would one need to specify which datatype they're retrieving? Can't the dynamic columns system figure the datatype from the data being stored?",
        "The answer is: SQL is a statically-typed language. The SQL interpreter needs to know the datatypes of all expressions before the query is run (for example, when one is using prepared statements and runs \"select COLUMN_GET(...)\", the prepared statement API requires the server to inform the client about the datatype of the column being read before the query is executed and the server can see what datatype the column actually has).",
        "Lengths",
        "If you're running queries like:",
        "SELECT COLUMN_GET(blob, 'colname' as CHAR) ...\n",
        "without specifying a maximum length (i.e. using as CHAR, not as CHAR(n)), MariaDB will report the maximum length of the resultset column to be 16,777,216. This may cause excessive memory usage in some client libraries, because they try to pre-allocate a buffer of maximum resultset width. To avoid this problem, use CHAR(n) whenever you're using COLUMN_GET in the select list.",
        "See Dynamic Columns:Datatypes for more information about datatypes."
    ],
    "Examples": [],
    "Category": [
        "Dynamic Columns Functions"
    ],
    "Effective SQLs Refined": [],
    "Ineffective SQLs Refined": [],
    "Wrong Messages from Ineffective SQLs Refined": [],
    "SQLs Generated1": [
        {
            "Example SQL": "SELECT COLUMN_GET(dyncol_blob, 'column_name' as CHAR(50));"
        },
        {
            "Example SQL": "SELECT COLUMN_GET(dyncol_blob, 'column_name' as CHAR(50));"
        },
        {
            "Example SQL": "SELECT COLUMN_GET(blob_column, 'column_name' as CHAR(50));"
        },
        {
            "Example SQL": "SELECT COLUMN_GET(dyncol_blob, 'column_name' as CHAR);"
        },
        {
            "Example SQL": "SELECT COLUMN_GET(dyncol_blob_placeholder, 'column_name' as CHAR);"
        }
    ],
    "SQLs Generated Costs1": [
        {
            "Total Tokens": 574,
            "Prompt Tokens": 544,
            "Completion Tokens": 30,
            "Total Cost (USD)": 9.960000000000001e-05
        },
        {
            "Total Tokens": 733,
            "Prompt Tokens": 703,
            "Completion Tokens": 30,
            "Total Cost (USD)": 0.00012345
        },
        {
            "Total Tokens": 890,
            "Prompt Tokens": 862,
            "Completion Tokens": 28,
            "Total Cost (USD)": 0.0001461
        },
        {
            "Total Tokens": 1046,
            "Prompt Tokens": 1018,
            "Completion Tokens": 28,
            "Total Cost (USD)": 0.0001695
        },
        {
            "Total Tokens": 1204,
            "Prompt Tokens": 1175,
            "Completion Tokens": 29,
            "Total Cost (USD)": 0.00019365
        }
    ],
    "SQLs Generated ExecResults1": [
        "None",
        "None",
        "None",
        "None",
        "None"
    ],
    "SQLs Generated ExecTimes1": [
        "0",
        "0",
        "0",
        "0",
        "0"
    ],
    "SQLs Generated ErrorMessages1": [
        "(pymysql.err.OperationalError) (1054, \"Unknown column 'dyncol_blob' in 'field list'\")\n",
        "(pymysql.err.OperationalError) (1054, \"Unknown column 'dyncol_blob' in 'field list'\")\n",
        "(pymysql.err.OperationalError) (1054, \"Unknown column 'blob_column' in 'field list'\")\n",
        "(pymysql.err.OperationalError) (1054, \"Unknown column 'dyncol_blob' in 'field list'\")\n",
        "(pymysql.err.OperationalError) (1054, \"Unknown column 'dyncol_blob_placeholder' in 'field list'\")\n"
    ],
    "Effective SQLs Generated1": [],
    "SQLs Generated2": [
        {
            "Example SQL": "SELECT COLUMN_GET(dyncol_blob, 'dialect_name' as CHAR) FROM dialect_recognize_table;"
        },
        {
            "Example SQL": "SELECT COLUMN_GET(description, 'dialect_name' as CHAR) FROM dialect_recognize_table;"
        },
        {
            "Example SQL": "SELECT COLUMN_GET(description, 'dialect_name' as CHAR) FROM dialect_recognize_table WHERE id = 1;"
        },
        {
            "Example SQL": "SELECT COLUMN_GET(description, 'dialect_name' as CHAR) FROM dialect_recognize_table WHERE id = 1;"
        },
        {
            "Example SQL": "SELECT COLUMN_GET(description, 1 as CHAR) FROM dialect_recognize_table;"
        }
    ],
    "SQLs Generated Costs2": [
        {
            "Total Tokens": 1029,
            "Prompt Tokens": 994,
            "Completion Tokens": 35,
            "Total Cost (USD)": 0.0001701
        },
        {
            "Total Tokens": 1190,
            "Prompt Tokens": 1158,
            "Completion Tokens": 32,
            "Total Cost (USD)": 0.00019289999999999997
        },
        {
            "Total Tokens": 1353,
            "Prompt Tokens": 1316,
            "Completion Tokens": 37,
            "Total Cost (USD)": 0.0002196
        },
        {
            "Total Tokens": 1516,
            "Prompt Tokens": 1479,
            "Completion Tokens": 37,
            "Total Cost (USD)": 0.00024405
        },
        {
            "Total Tokens": 1671,
            "Prompt Tokens": 1642,
            "Completion Tokens": 29,
            "Total Cost (USD)": 0.00026369999999999996
        }
    ],
    "SQLs Generated ExecResults2": [
        "None",
        "None",
        "None",
        "None",
        "None"
    ],
    "SQLs Generated ExecTimes2": [
        "0",
        "0",
        "0",
        "0",
        "0"
    ],
    "SQLs Generated ErrorMessages2": [
        "(pymysql.err.OperationalError) (1054, \"Unknown column 'dyncol_blob' in 'field list'\")\n",
        "(pymysql.err.OperationalError) (1919, 'Encountered illegal format of dynamic column string')\n",
        "(pymysql.err.OperationalError) (1919, 'Encountered illegal format of dynamic column string')\n",
        "(pymysql.err.OperationalError) (1919, 'Encountered illegal format of dynamic column string')\n",
        "(pymysql.err.OperationalError) (1919, 'Encountered illegal format of dynamic column string')\n"
    ],
    "Effective SQLs Generated2": []
}