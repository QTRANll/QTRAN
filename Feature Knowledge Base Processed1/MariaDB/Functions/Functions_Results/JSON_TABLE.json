{
    "HTML": "https://mariadb.com//kb/en/json_table/",
    "Title": "JSON_TABLE",
    "Feature": [
        "JSON_TABLE(json_doc, \n          context_path COLUMNS (column_list)\n) [AS] alias\n",
        "column_list:\n    column[, column][, ...]\n",
        "column:\n    name FOR ORDINALITY\n    |  name type PATH path_str [on_empty] [on_error]\n    |  name type EXISTS PATH path_str\n    |  NESTED PATH path_str COLUMNS (column_list)\n",
        "on_empty:\n    {NULL | DEFAULT string | ERROR} ON EMPTY\n",
        "on_error:\n    {NULL | DEFAULT string | ERROR} ON ERROR\n"
    ],
    "Description": [
        "JSON_TABLE can be used in contexts where a table reference can be used; in the FROM clause of a SELECT statement, and in multi-table UPDATE/DELETE statements.",
        "json_doc is the JSON document to extract data from.  In the simplest case, it is a string literal containing JSON.  In more complex cases it can be an arbitrary expression returning JSON.  The expression may have references to columns of other tables. However, one can only refer to tables that precede this JSON_TABLE invocation. For RIGHT JOIN, it is assumed that its outer side precedes the inner.   All tables in outer selects are also considered preceding.",
        "context_path is a JSON Path expression pointing to a collection of nodes in json_doc that will be used as the source of rows.",
        "The COLUMNS clause declares the names and types of the columns that JSON_TABLE returns, as well as how the values of the columns are produced.",
        "Column Definitions",
        "The following types of columns are supported:",
        "Path Columns",
        "name type PATH path_str [on_empty] [on_error]\n",
        "Locates the JSON node pointed to by path_str and returns its value. The path_str is evaluated using the current row source node as the context node.",
        "set @json='\n[\n  {\"name\":\"Laptop\", \"color\":\"black\", \"price\":\"1000\"},\n  {\"name\":\"Jeans\",  \"color\":\"blue\"}\n]';\n\nselect * from json_table(@json, '$[*]' \n  columns(\n   name  varchar(10) path '$.name', \n   color varchar(10) path '$.color',\n   price decimal(8,2) path '$.price' ) \n) as jt;\n+--------+-------+---------+\n| name   | color | price   |\n+--------+-------+---------+\n| Laptop | black | 1000.00 |\n| Jeans  | blue  |    NULL |\n+--------+-------+---------+\n",
        "The on_empty and on_error clauses specify the actions to be performed when the value was not found or there was an error condition. See the ON EMPTY and ON ERROR clauses section for details.",
        "ORDINALITY Columns",
        "name FOR ORDINALITY\n",
        "Counts the rows, starting from 1. ",
        "Example:",
        "set @json='\n[\n  {\"name\":\"Laptop\", \"color\":\"black\"},\n  {\"name\":\"Jeans\",  \"color\":\"blue\"}\n]';\n\nselect * from json_table(@json, '$[*]' \n  columns(\n   id for ordinality, \n   name  varchar(10) path '$.name')\n) as jt;\n+------+--------+\n| id   | name   |\n+------+--------+\n|    1 | Laptop |\n|    2 | Jeans  |\n+------+--------+\n",
        "EXISTS PATH Columns",
        "name type EXISTS PATH path_str\n",
        "Checks whether the node pointed to by value_path exists. The value_path is evaluated using the current row source node as the context node.",
        "set @json='\n[\n  {\"name\":\"Laptop\", \"color\":\"black\", \"price\":1000},\n  {\"name\":\"Jeans\",  \"color\":\"blue\"}\n]';\n\nselect * from json_table(@json, '$[*]' \n  columns(\n   name  varchar(10) path '$.name',\n   has_price integer exists path '$.price')\n) as jt;\n+--------+-----------+\n| name   | has_price |\n+--------+-----------+\n| Laptop |         1 |\n| Jeans  |         0 |\n+--------+-----------+\n",
        "NESTED PATHs",
        "NESTED PATH converts nested JSON structures into multiple rows.",
        "NESTED PATH path COLUMNS (column_list)\n",
        "It finds the sequence of JSON nodes pointed to by path and uses it to produce rows.  For each found node, a row is generated with column values as specified by the NESTED PATH's COLUMNS clause.  If path finds no nodes, only one row is generated with all columns having NULL values.",
        "For example, consider a  JSON document that contains an array of items, and each item, in turn, is expected to have an array of its available sizes:",
        "set @json='\n[\n  {\"name\":\"Jeans\",  \"sizes\": [32, 34, 36]},\n  {\"name\":\"T-Shirt\", \"sizes\":[\"Medium\", \"Large\"]},\n  {\"name\":\"Cellphone\"}\n]';\n",
        "NESTED PATH allows one to produce a separate row for each size each item has:",
        "select * from json_table(@json, '$[*]' \n  columns(\n    name  varchar(10) path '$.name', \n    nested path '$.sizes[*]' columns (\n      size varchar(32) path '$'\n    )\n  )\n) as jt;\n+-----------+--------+\n| name      | size   |\n+-----------+--------+\n| Jeans     | 32     |\n| Jeans     | 34     |\n| Jeans     | 36     |\n| T-Shirt   | Medium |\n| T-Shirt   | Large  |\n| Cellphone | NULL   |\n+-----------+--------+\n",
        "NESTED PATH clauses can be nested within one another.\nThey can also be located next to each other.  In that case, the nested path clauses will produce records one at a time. The ones that are not producing records will have all columns set to NULL.",
        "Example:",
        "set @json='\n[\n  {\"name\":\"Jeans\",  \"sizes\": [32, 34, 36], \"colors\":[\"black\", \"blue\"]}\n]';\n\nselect * from json_table(@json, '$[*]' \n  columns(\n    name  varchar(10) path '$.name', \n    nested path '$.sizes[*]' columns (\n      size varchar(32) path '$'\n    ),\n    nested path '$.colors[*]' columns (\n      color varchar(32) path '$'\n    )\n  )\n) as jt;\n\n+-------+------+-------+\n| name  | size | color |\n+-------+------+-------+\n| Jeans | 32   | NULL  |\n| Jeans | 34   | NULL  |\n| Jeans | 36   | NULL  |\n| Jeans | NULL | black |\n| Jeans | NULL | blue  |\n+-------+------+-------+\n",
        "ON EMPTY and ON ERROR Clauses",
        "The ON EMPTY clause specifies what will be done when the element specified by the search path is missing in the JSON document.",
        "on_empty:\n    {NULL | DEFAULT string | ERROR} ON EMPTY\n",
        "When ON EMPTY  clause is not present, NULL ON EMPTY is implied.",
        "on_error:\n    {NULL | DEFAULT string | ERROR} ON ERROR\n",
        "The ON ERROR clause specifies what should be done if a JSON structure error occurs when trying to extract the value pointed to by the path expression. A JSON structure error here occurs only when one attempts to convert a JSON non-scalar (array or object) into a scalar value.\nWhen the ON ERROR clause is not present, NULL ON ERROR is implied.",
        "Note: A datatype conversion error (e.g. attempt to store a non-integer value into an integer field, or a varchar column being truncated) is not considered a JSON error and so will not trigger the ON ERROR behavior. It will produce warnings, in the same way as  CAST(value AS datatype) would.",
        "Replication",
        "In the current code, evaluation of JSON_TABLE is deterministic, that is, for a given input string JSON_TABLE will always produce the same set of rows in the same order. However, one can think of JSON documents that one can consider identical which will produce different output. In order to be future-proof and withstand changes like:",
        "sorting JSON object members by name (like MySQL does)\nchanging the way duplicate object members are handled\nthe function is marked as unsafe for statement-based replication.\n",
        "Extracting a Subdocument into a Column",
        "MariaDB starting with 10.6.9Prior to MariaDB 10.6.9, JSON_TABLE did not allow one to extract a JSON \"subdocument\" into a JSON column. \nSELECT * FROM JSON_TABLE('{\"foo\": [1,2,3,4]}','$' columns( jscol json path '$.foo') ) AS T;\n+-------+\n| jscol |\n+-------+\n| NULL  |\n+-------+\nThis is supported from MariaDB 10.6.9:\nSELECT * FROM JSON_TABLE('{\"foo\": [1,2,3,4]}','$' columns( jscol json path '$.foo') ) AS T;\n+-----------+\n| jscol     |\n+-----------+\n| [1,2,3,4] |\n+-----------+\n"
    ],
    "Examples": [],
    "Category": [
        "JSON Functions"
    ],
    "Effective SQLs Refined": [],
    "Ineffective SQLs Refined": [],
    "Wrong Messages from Ineffective SQLs Refined": [],
    "SQLs Generated1": [
        {
            "Example SQL": "SELECT * FROM JSON_TABLE(@json, '$[*]' COLUMNS (name VARCHAR(10) PATH '$.name')) AS jt;"
        }
    ],
    "SQLs Generated Costs1": [
        {
            "Total Tokens": 2370,
            "Prompt Tokens": 2331,
            "Completion Tokens": 39,
            "Total Cost (USD)": 0.00037305
        }
    ],
    "SQLs Generated ExecResults1": [
        "[]"
    ],
    "SQLs Generated ExecTimes1": [
        "0.01975083351135254"
    ],
    "SQLs Generated ErrorMessages1": [
        "None"
    ],
    "Effective SQLs Generated1": [
        "SELECT * FROM JSON_TABLE(@json, '$[*]' COLUMNS (name VARCHAR(10) PATH '$.name')) AS jt;"
    ]
}