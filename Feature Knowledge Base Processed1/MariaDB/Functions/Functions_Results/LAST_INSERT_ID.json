{
    "HTML": "https://mariadb.com//kb/en/last_insert_id/",
    "Title": "LAST_INSERT_ID",
    "Feature": [
        "LAST_INSERT_ID(), LAST_INSERT_ID(expr)\n"
    ],
    "Description": [
        "LAST_INSERT_ID() (no arguments) returns\nthe first automatically generated value successfully inserted for an\nAUTO_INCREMENT column as a result of the most recently executed INSERT\nstatement. The value of LAST_INSERT_ID() remains unchanged if no rows\nare successfully inserted.",
        "If one gives an argument to LAST_INSERT_ID(), then it will return the value of the expression and\nthe next call to LAST_INSERT_ID() will return the same value. The value will also be sent to the client\nand can be accessed by the mysql_insert_id function.",
        "For example, after inserting a row that generates an AUTO_INCREMENT\nvalue, you can get the value like this:",
        "SELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                9 |\n+------------------+\n",
        "You can also use LAST_INSERT_ID() to delete the last inserted row:",
        "DELETE FROM product WHERE id = LAST_INSERT_ID();\n",
        "If no rows were successfully inserted, LAST_INSERT_ID() returns 0.",
        "One can also use INSERT...RETURNING for this purpose.",
        "The value of LAST_INSERT_ID() will be consistent across all versions\nif all rows in the INSERT or UPDATE statement were successful.",
        "The currently executing statement does not affect the value of\nLAST_INSERT_ID(). Suppose that you generate an AUTO_INCREMENT value\nwith one statement, and then refer to LAST_INSERT_ID() in a\nmultiple-row INSERT statement that inserts rows into a table with its\nown AUTO_INCREMENT column. The value of LAST_INSERT_ID() will remain\nstable in the second statement; its value for the second and later\nrows is not affected by the earlier row insertions. (However, if you\nmix references to LAST_INSERT_ID() and LAST_INSERT_ID(expr), the\neffect is undefined.)",
        "If the previous statement returned an error, the value of\nLAST_INSERT_ID() is undefined. For transactional tables, if the\nstatement is rolled back due to an error, the value of\nLAST_INSERT_ID() is left undefined. For manual ROLLBACK, the value of\nLAST_INSERT_ID() is not restored to that before the transaction; it\nremains as it was at the point of the ROLLBACK.",
        "Within the body of a stored routine (procedure or function) or a\ntrigger, the value of LAST_INSERT_ID() changes the same way as for\nstatements executed outside the body of these kinds of objects. The\neffect of a stored routine or trigger upon the value of\nLAST_INSERT_ID() that is seen by following statements depends on the\nkind of routine:",
        "If a stored procedure executes statements that change the value of LAST_INSERT_ID(), the new value will be seen by statements that follow the procedure call.\n",
        "For stored functions and triggers that change the value, the value is restored when the function or trigger ends, so following statements will not see a changed value.\n"
    ],
    "Examples": [
        "CREATE TABLE t (\n  id INTEGER UNSIGNED AUTO_INCREMENT PRIMARY KEY, \n  f VARCHAR(1)) \nENGINE = InnoDB;\n\nINSERT INTO t(f) VALUES('a');\n\nSELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                1 |\n+------------------+\n\nINSERT INTO t(f) VALUES('b');\n\nINSERT INTO t(f) VALUES('c');\n\nSELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                3 |\n+------------------+\n\nINSERT INTO t(f) VALUES('d'),('e');\n\nSELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                4 |\n+------------------+\n\nSELECT * FROM t;\n+----+------+\n| id | f    |\n+----+------+\n|  1 | a    |\n|  2 | b    |\n|  3 | c    |\n|  4 | d    |\n|  5 | e    |\n+----+------+\n\nSELECT LAST_INSERT_ID(12);\n+--------------------+\n| LAST_INSERT_ID(12) |\n+--------------------+\n|                 12 |\n+--------------------+\n\nSELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|               12 |\n+------------------+\n\nINSERT INTO t(f) VALUES('f');\n\nSELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                6 |\n+------------------+\n\nSELECT * FROM t;\n+----+------+\n| id | f    |\n+----+------+\n|  1 | a    |\n|  2 | b    |\n|  3 | c    |\n|  4 | d    |\n|  5 | e    |\n|  6 | f    |\n+----+------+\n\nSELECT LAST_INSERT_ID(12);\n+--------------------+\n| LAST_INSERT_ID(12) |\n+--------------------+\n|                 12 |\n+--------------------+\n\nINSERT INTO t(f) VALUES('g');\n\nSELECT * FROM t;\n+----+------+\n| id | f    |\n+----+------+\n|  1 | a    |\n|  2 | b    |\n|  3 | c    |\n|  4 | d    |\n|  5 | e    |\n|  6 | f    |\n|  7 | g    |\n+----+------+\n"
    ],
    "Category": [
        "Information Functions"
    ],
    "Effective SQLs Refined": [
        "SELECT LAST_INSERT_ID();",
        "SELECT LAST_INSERT_ID();",
        "SELECT LAST_INSERT_ID();",
        "SELECT LAST_INSERT_ID(12);",
        "SELECT LAST_INSERT_ID();",
        "SELECT LAST_INSERT_ID(12);"
    ],
    "Ineffective SQLs Refined": [
        "INSERT_ID(12) |\n+--------------------+\n|                 12 |\n+--------------------+\n\nSELECT LAST_INSERT_ID();"
    ],
    "Wrong Messages from Ineffective SQLs Refined": [
        "(pymysql.err.ProgrammingError) (1064, \"You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near 'INSERT_ID(12) |\\n+--------------------+\\n|                 12 |\\n+--------------...' at line 1\")\n[SQL: INSERT_ID(12) |\n+--------------------+\n|                 12 |\n+--------------------+\n\nSELECT LAST_INSERT_ID();]\n(Background on this error at: https://sqlalche.me/e/20/f405)"
    ],
    "SQLs Generated1": [],
    "SQLs Generated Costs1": [],
    "SQLs Generated ExecResults1": [],
    "SQLs Generated ExecTimes1": [],
    "SQLs Generated ErrorMessages1": [],
    "Effective SQLs Generated1": [],
    "SQLs Generated2": [],
    "SQLs Generated Costs2": [],
    "SQLs Generated ExecResults2": [],
    "SQLs Generated ExecTimes2": [],
    "SQLs Generated ErrorMessages2": [],
    "Effective SQLs Generated2": []
}