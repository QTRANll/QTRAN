{"HTML": ["https://www.postgresql.org/docs/current/functions-array.html"], "Title": ["array_append"], "Feature": ["array_append ( anycompatiblearray, anycompatible ) \u2192 anycompatiblearray"], "Description": ["Appends an element to the end of an array (same as the anycompatiblearray || anycompatible operator)."], "Examples": ["array_append(ARRAY[1,2], 3) \u2192 {1,2,3}"], "Category": ["Array Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-array.html"], "Title": ["array_cat"], "Feature": ["array_cat ( anycompatiblearray, anycompatiblearray ) \u2192 anycompatiblearray"], "Description": ["Concatenates two arrays (same as the anycompatiblearray || anycompatiblearray operator)."], "Examples": ["array_cat(ARRAY[1,2,3], ARRAY[4,5]) \u2192 {1,2,3,4,5}"], "Category": ["Array Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-array.html"], "Title": ["array_dims"], "Feature": ["array_dims ( anyarray ) \u2192 text"], "Description": ["Returns a text representation of the array's dimensions."], "Examples": ["array_dims(ARRAY[[1,2,3], [4,5,6]]) \u2192 [1:2][1:3]"], "Category": ["Array Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-array.html"], "Title": ["array_fill"], "Feature": ["array_fill ( anyelement, integer[] [, integer[] ] ) \u2192 anyarray"], "Description": ["Returns an array filled with copies of the given value, having dimensions of the lengths specified by the second argument. The optional third argument supplies lower-bound values for each dimension (which default to all 1)."], "Examples": ["array_fill(11, ARRAY[2,3]) \u2192 {{11,11,11},{11,11,11}}", "array_fill(7, ARRAY[3], ARRAY[2]) \u2192 [2:4]={7,7,7}"], "Category": ["Array Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-array.html"], "Title": ["array_length"], "Feature": ["array_length ( anyarray, integer ) \u2192 integer"], "Description": ["Returns the length of the requested array dimension. (Produces NULL instead of 0 for empty or missing array dimensions.)"], "Examples": ["array_length(array[1,2,3], 1) \u2192 3", "array_length(array[]::int[], 1) \u2192 NULL", "array_length(array['text'], 2) \u2192 NULL"], "Category": ["Array Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-array.html"], "Title": ["array_lower"], "Feature": ["array_lower ( anyarray, integer ) \u2192 integer"], "Description": ["Returns the lower bound of the requested array dimension."], "Examples": ["array_lower('[0:2]={1,2,3}'::integer[], 1) \u2192 0"], "Category": ["Array Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-array.html"], "Title": ["array_ndims"], "Feature": ["array_ndims ( anyarray ) \u2192 integer"], "Description": ["Returns the number of dimensions of the array."], "Examples": ["array_ndims(ARRAY[[1,2,3], [4,5,6]]) \u2192 2"], "Category": ["Array Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-array.html"], "Title": ["array_position"], "Feature": ["array_position ( anycompatiblearray, anycompatible [, integer ] ) \u2192 integer"], "Description": ["Returns the subscript of the first occurrence of the second argument in the array, or NULL if it's not present. If the third argument is given, the search begins at that subscript. The array must be one-dimensional. Comparisons are done using IS NOT DISTINCT FROM semantics, so it is possible to search for NULL."], "Examples": ["array_position(ARRAY['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'], 'mon') \u2192 2"], "Category": ["Array Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-array.html"], "Title": ["array_positions"], "Feature": ["array_positions ( anycompatiblearray, anycompatible ) \u2192 integer[]"], "Description": ["Returns an array of the subscripts of all occurrences of the second argument in the array given as first argument. The array must be one-dimensional. Comparisons are done using IS NOT DISTINCT FROM semantics, so it is possible to search for NULL. NULL is returned only if the array is NULL; if the value is not found in the array, an empty array is returned."], "Examples": ["array_positions(ARRAY['A','A','B','A'], 'A') \u2192 {1,2,4}"], "Category": ["Array Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-array.html"], "Title": ["array_prepend"], "Feature": ["array_prepend ( anycompatible, anycompatiblearray ) \u2192 anycompatiblearray"], "Description": ["Prepends an element to the beginning of an array (same as the anycompatible || anycompatiblearray operator)."], "Examples": ["array_prepend(1, ARRAY[2,3]) \u2192 {1,2,3}"], "Category": ["Array Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-array.html"], "Title": ["array_remove"], "Feature": ["array_remove ( anycompatiblearray, anycompatible ) \u2192 anycompatiblearray"], "Description": ["Removes all elements equal to the given value from the array. The array must be one-dimensional. Comparisons are done using IS NOT DISTINCT FROM semantics, so it is possible to remove NULLs."], "Examples": ["array_remove(ARRAY[1,2,3,2], 2) \u2192 {1,3}"], "Category": ["Array Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-array.html"], "Title": ["array_replace"], "Feature": ["array_replace ( anycompatiblearray, anycompatible, anycompatible ) \u2192 anycompatiblearray"], "Description": ["Replaces each array element equal to the second argument with the third argument."], "Examples": ["array_replace(ARRAY[1,2,5,4], 5, 3) \u2192 {1,2,3,4}"], "Category": ["Array Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-array.html"], "Title": ["array_sample"], "Feature": ["array_sample ( array anyarray, n integer ) \u2192 anyarray"], "Description": ["Returns an array of n items randomly selected from array. n may not exceed the length of array's first dimension. If array is multi-dimensional, an \u201citem\u201d is a slice having a given first subscript."], "Examples": ["array_sample(ARRAY[1,2,3,4,5,6], 3) \u2192 {2,6,1}", "array_sample(ARRAY[[1,2],[3,4],[5,6]], 2) \u2192 {{5,6},{1,2}}"], "Category": ["Array Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-array.html"], "Title": ["array_shuffle"], "Feature": ["array_shuffle ( anyarray ) \u2192 anyarray"], "Description": ["Randomly shuffles the first dimension of the array."], "Examples": ["array_shuffle(ARRAY[[1,2],[3,4],[5,6]]) \u2192 {{5,6},{1,2},{3,4}}"], "Category": ["Array Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-array.html"], "Title": ["array_to_string"], "Feature": ["array_to_string ( array anyarray, delimiter text [, null_string text ] ) \u2192 text"], "Description": ["Converts each array element to its text representation, and concatenates those separated by the delimiter string. If null_string is given and is not NULL, then NULL array entries are represented by that string; otherwise, they are omitted. See also string_to_array."], "Examples": ["array_to_string(ARRAY[1, 2, 3, NULL, 5], ',', '*') \u2192 1,2,3,*,5"], "Category": ["Array Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-array.html"], "Title": ["array_upper"], "Feature": ["array_upper ( anyarray, integer ) \u2192 integer"], "Description": ["Returns the upper bound of the requested array dimension."], "Examples": ["array_upper(ARRAY[1,8,3,7], 1) \u2192 4"], "Category": ["Array Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-array.html"], "Title": ["cardinality"], "Feature": ["cardinality ( anyarray ) \u2192 integer"], "Description": ["Returns the total number of elements in the array, or 0 if the array is empty."], "Examples": ["cardinality(ARRAY[[1,2],[3,4]]) \u2192 4"], "Category": ["Array Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-array.html"], "Title": ["trim_array"], "Feature": ["trim_array ( array anyarray, n integer ) \u2192 anyarray"], "Description": ["Trims an array by removing the last n elements. If the array is multidimensional, only the first dimension is trimmed."], "Examples": ["trim_array(ARRAY[1,2,3,4,5,6], 2) \u2192 {1,2,3,4}"], "Category": ["Array Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-array.html"], "Title": ["unnest"], "Feature": ["unnest ( anyarray, anyarray [, ... ] ) \u2192 setof anyelement, anyelement [, ... ]"], "Description": ["Expands multiple arrays (possibly of different data types) into a set of rows. If the arrays are not all the same length then the shorter ones are padded with NULLs. This form is only allowed in a query's FROM clause; see Section\u00a07.2.1.4."], "Examples": ["select * from unnest(ARRAY[1,2], ARRAY['foo','bar','baz']) as x(a,b) \u2192"], "Category": ["Array Functions and Operators"]}
