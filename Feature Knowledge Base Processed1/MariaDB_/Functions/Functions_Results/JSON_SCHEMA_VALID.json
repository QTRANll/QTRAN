{
    "HTML": "https://mariadb.com//kb/en/json_schema_valid/",
    "Title": "JSON_SCHEMA_VALID",
    "Feature": [],
    "Description": [
        "JSON_SCHEMA_VALID allows MariaDB to support JSON schema validation. If a given json is valid against a schema it returns true. When JSON does not validate against the schema, it does not return a message about which keyword it failed against and only returns false.",
        "The function supports JSON Schema Draft 2020 with a few exceptions:",
        "External resources are not supported\nHyper schema keywords are not supported\nFormats like date, email etc are treated as annotations.\n"
    ],
    "Examples": [
        "CREATE TABLE obj_table(val_obj JSON CHECK(JSON_SCHEMA_VALID('{\n  \"type\":\"object\",\n    \"properties\": {\n      \"number1\":{\n        \"type\":\"number\",\n        \"maximum\":5,\n        \"const\":4\n      },\n      \"string1\":{\n        \"type\":\"string\",\n        \"maxLength\":5,\n        \"minLength\":3\n      },\n    \"object1\":{\n      \"type\":\"object\",\n       \"properties\":{\n         \"key1\": {\"type\":\"string\"},\n         \"key2\":{\"type\":\"array\"},\n         \"key3\":{\"type\":\"number\", \"minimum\":3}\n       },\n       \"dependentRequired\": { \"key1\":[\"key3\"] }\n     }\n  },\n  \"required\":[\"number1\",\"object1\"]\n  }', val_obj)));\n\nINSERT INTO obj_table VALUES(\n  '{\"number1\":4, \"string1\":\"abcd\", \n  \"object1\":{\"key1\":\"val1\", \"key2\":[1,2,3, \"string1\"], \"key3\":4}}'\n);\n\nINSERT INTO obj_table VALUES(\n  '{\"number1\":3, \"string1\":\"abcd\", \n  \"object1\":{\"key1\":\"val1\", \"key2\":[1,2,3, \"string1\"], \"key3\":4}}'\n);\nERROR 4025 (23000): CONSTRAINT `obj_table.val_obj` failed for `test`.`obj_table`\n\nSELECT * FROM obj_table;\n+--------------------------------------------------------------------------------------------------+\n| val_obj                                                                                          |\n+--------------------------------------------------------------------------------------------------+\n| {\"number1\":4, \"string1\":\"abcd\", \"object1\":{\"key1\":\"val1\", \"key2\":[1,2,3, \"string1\"], \"key3\":4}} |\n+--------------------------------------------------------------------------------------------------+\n\nSET @schema= '{\n  \"properties\" : {\n    \"number1\":{ \"maximum\":10 },\n    \"string1\" : { \"maxLength\": 3} \n  }\n}';\n\nSELECT JSON_SCHEMA_VALID(@schema, '{ \"number1\":25, \"string1\":\"ab\" }');\n+----------------------------------------------------------------+\n| JSON_SCHEMA_VALID(@schema, '{ \"number1\":25, \"string1\":\"ab\" }') |\n+----------------------------------------------------------------+\n|                                                              0 |\n+----------------------------------------------------------------+\n\nSELECT JSON_SCHEMA_VALID(@schema, '{ \"number1\":10, \"string1\":\"ab\" }');\n+----------------------------------------------------------------+\n| JSON_SCHEMA_VALID(@schema, '{ \"number1\":10, \"string1\":\"ab\" }') |\n+----------------------------------------------------------------+\n|                                                              1 |\n+----------------------------------------------------------------+\n"
    ],
    "Category": [
        "JSON Functions"
    ],
    "Effective SQLs Refined": [],
    "Ineffective SQLs Refined": [
        "CREATE TABLE obj_table(val_obj JSON CHECK(JSON_SCHEMA_VALID('{\n  \"type\":\"object\",\n    \"properties\": {\n      \"number1\":{\n        \"type\":\"number\",\n        \"maximum\":5,\n        \"const\":4\n      },\n      \"string1\":{\n        \"type\":\"string\",\n        \"maxLength\":5,\n        \"minLength\":3\n      },\n    \"object1\":{\n      \"type\":\"object\",\n       \"properties\":{\n         \"key1\": {\"type\":\"string\"},\n         \"key2\":{\"type\":\"array\"},\n         \"key3\":{\"type\":\"number\", \"minimum\":3}\n       },\n       \"dependentRequired\": { \"key1\":[\"key3\"] }\n     }\n  },\n  \"required\":[\"number1\",\"object1\"]\n  }', val_obj)));",
        "SELECT JSON_SCHEMA_VALID(@schema, '{ \"number1\":25, \"string1\":\"ab\" }');",
        "SELECT JSON_SCHEMA_VALID(@schema, '{ \"number1\":10, \"string1\":\"ab\" }');"
    ],
    "Wrong Messages from Ineffective SQLs Refined": [
        "(sqlalchemy.exc.InvalidRequestError) A value is required for bind parameter '5'\n[SQL: CREATE TABLE obj_table(val_obj JSON CHECK(JSON_SCHEMA_VALID('{\n  \"type\":\"object\",\n    \"properties\": {\n      \"number1\":{\n        \"type\":\"number\",\n        \"maximum\"%(5)s,\n        \"const\"%(4)s\n      },\n      \"string1\":{\n        \"type\":\"string\",\n        \"maxLength\"%(5)s,\n        \"minLength\"%(3)s\n      },\n    \"object1\":{\n      \"type\":\"object\",\n       \"properties\":{\n         \"key1\": {\"type\":\"string\"},\n         \"key2\":{\"type\":\"array\"},\n         \"key3\":{\"type\":\"number\", \"minimum\"%(3)s}\n       },\n       \"dependentRequired\": { \"key1\":[\"key3\"] }\n     }\n  },\n  \"required\":[\"number1\",\"object1\"]\n  }', val_obj)));]\n(Background on this error at: https://sqlalche.me/e/20/cd3x)",
        "(sqlalchemy.exc.InvalidRequestError) A value is required for bind parameter '25'\n[SQL: SELECT JSON_SCHEMA_VALID(@schema, '{ \"number1\"%(25)s, \"string1\":\"ab\" }');]\n(Background on this error at: https://sqlalche.me/e/20/cd3x)",
        "(sqlalchemy.exc.InvalidRequestError) A value is required for bind parameter '10'\n[SQL: SELECT JSON_SCHEMA_VALID(@schema, '{ \"number1\"%(10)s, \"string1\":\"ab\" }');]\n(Background on this error at: https://sqlalche.me/e/20/cd3x)"
    ],
    "SQLs Generated1": [
        {
            "Example SQL": "SELECT JSON_SCHEMA_VALID('{\"type\": \"object\", \"properties\": {\"name\": {\"type\": \"string\"}}}', '{\"name\": \"John\"}');"
        }
    ],
    "SQLs Generated Costs1": [
        {
            "Total Tokens": 521,
            "Prompt Tokens": 472,
            "Completion Tokens": 49,
            "Total Cost (USD)": 0.00010019999999999998
        }
    ],
    "SQLs Generated ExecResults1": [
        "[(1,)]"
    ],
    "SQLs Generated ExecTimes1": [
        "0.02526545524597168"
    ],
    "SQLs Generated ErrorMessages1": [
        "None"
    ],
    "Effective SQLs Generated1": [
        "SELECT JSON_SCHEMA_VALID('{\"type\": \"object\", \"properties\": {\"name\": {\"type\": \"string\"}}}', '{\"name\": \"John\"}');"
    ]
}