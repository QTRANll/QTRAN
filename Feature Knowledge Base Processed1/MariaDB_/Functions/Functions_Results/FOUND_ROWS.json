{
    "HTML": "https://mariadb.com//kb/en/found_rows/",
    "Title": "FOUND_ROWS",
    "Feature": [
        "FOUND_ROWS()\n"
    ],
    "Description": [
        "A SELECT statement may include a LIMIT clause to restrict the number\nof rows the server returns to the client. In some cases, it is\ndesirable to know how many rows the statement would have returned\nwithout the LIMIT, but without running the statement again. To obtain\nthis row count, include a SQL_CALC_FOUND_ROWS option in the SELECT\nstatement, and then invoke FOUND_ROWS() afterwards.",
        "You can also use FOUND_ROWS() to obtain the number of rows returned by a SELECT which does not contain a LIMIT clause. In this case you don't need to use the SQL_CALC_FOUND_ROWS option. This can be useful for example in a stored procedure.",
        "Also, this function works with some other statements which return a resultset, including SHOW, DESC and HELP. For DELETE ... RETURNING you should use ROW_COUNT(). It also works as a prepared statement, or after executing a prepared statement.",
        "Statements which don't return any results don't affect FOUND_ROWS() - the previous value will still be returned.",
        "Warning: When used after a CALL statement, this function returns the number of rows selected by the last query in the procedure, not by the whole procedure.",
        "Statements using the FOUND_ROWS() function are not safe for statement-based replication."
    ],
    "Examples": [
        "SHOW ENGINES\\G\n*************************** 1. row ***************************\n      Engine: CSV\n     Support: YES\n     Comment: Stores tables as CSV files\nTransactions: NO\n          XA: NO\n  Savepoints: NO\n*************************** 2. row ***************************\n      Engine: MRG_MyISAM\n     Support: YES\n     Comment: Collection of identical MyISAM tables\nTransactions: NO\n          XA: NO\n  Savepoints: NO\n\n...\n\n*************************** 8. row ***************************\n      Engine: PERFORMANCE_SCHEMA\n     Support: YES\n     Comment: Performance Schema\nTransactions: NO\n          XA: NO\n  Savepoints: NO\n8 rows in set (0.000 sec)\n\nSELECT FOUND_ROWS();\n+--------------+\n| FOUND_ROWS() |\n+--------------+\n|           8 |\n+--------------+\n\nSELECT SQL_CALC_FOUND_ROWS * FROM tbl_name WHERE id > 100 LIMIT 10;\n\nSELECT FOUND_ROWS();\n+--------------+\n| FOUND_ROWS() |\n+--------------+\n|           23 |\n+--------------+\n"
    ],
    "Category": [
        "Information Functions"
    ],
    "Effective SQLs Refined": [
        "SELECT FOUND_ROWS();"
    ],
    "Ineffective SQLs Refined": [
        "set (0.000 sec)\n\nSELECT FOUND_ROWS();",
        "SELECT SQL_CALC_FOUND_ROWS * FROM tbl_name WHERE id > 100 LIMIT 10;"
    ],
    "Wrong Messages from Ineffective SQLs Refined": [
        "(pymysql.err.ProgrammingError) (1064, \"You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '(0.000 sec)\\n\\nSELECT FOUND_ROWS()' at line 1\")\n[SQL: set (0.000 sec)\n\nSELECT FOUND_ROWS();]\n(Background on this error at: https://sqlalche.me/e/20/f405)",
        "(pymysql.err.ProgrammingError) (1146, \"Table 'PINOLO_MariaDB.tbl_name' doesn't exist\")\n[SQL: SELECT SQL_CALC_FOUND_ROWS * FROM tbl_name WHERE id > 100 LIMIT 10;]\n(Background on this error at: https://sqlalche.me/e/20/f405)"
    ],
    "SQLs Generated1": [],
    "SQLs Generated Costs1": [],
    "SQLs Generated ExecResults1": [],
    "SQLs Generated ExecTimes1": [],
    "SQLs Generated ErrorMessages1": [],
    "Effective SQLs Generated1": [],
    "SQLs Generated2": [],
    "SQLs Generated Costs2": [],
    "SQLs Generated ExecResults2": [],
    "SQLs Generated ExecTimes2": [],
    "SQLs Generated ErrorMessages2": [],
    "Effective SQLs Generated2": []
}