{
  "index": 0,
  "doc": "ABS(X)\n,Numeric Functions",
  "mapping docs": [
    {
      "index": 141,
      "doc": "ABS(X),Mathematical Functions"
    },
    {
      "index": 163,
      "doc": "RADIANS(X),Mathematical Functions"
    },
    {
      "index": 154,
      "doc": "FLOOR(X),Mathematical Functions"
    },
    {
      "index": 166,
      "doc": "SIGN(X),Mathematical Functions"
    }
  ]
}
{
  "index": 1,
  "doc": "ACOS(X)\n,Numeric Functions",
  "mapping docs": [
    {
      "index": 142,
      "doc": "ACOS(X),Mathematical Functions"
    },
    {
      "index": 143,
      "doc": "ASIN(X),Mathematical Functions"
    },
    {
      "index": 163,
      "doc": "RADIANS(X),Mathematical Functions"
    },
    {
      "index": 149,
      "doc": "COS(X),Mathematical Functions"
    }
  ]
}
{
  "index": 2,
  "doc": "ADDDATE(date,INTERVAL expr unit), ADDDATE(expr,days)\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 24,
      "doc": "DATE_ADD(date,INTERVAL\n          expr\nunit),Date and Time Functions"
    },
    {
      "index": 15,
      "doc": "ADDDATE(date,INTERVAL\n          expr\nunit),Date and Time Functions"
    },
    {
      "index": 26,
      "doc": "DATE_SUB(date,INTERVAL\n          expr\nunit),Date and Time Functions"
    },
    {
      "index": 53,
      "doc": "SUBDATE(date,INTERVAL\n          expr\nunit),Date and Time Functions"
    }
  ]
}
{
  "index": 3,
  "doc": "ADDTIME(expr1,expr2)\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 16,
      "doc": "ADDTIME(expr1,expr2),Date and Time Functions"
    },
    {
      "index": 54,
      "doc": "SUBTIME(expr1,expr2),Date and Time Functions"
    },
    {
      "index": 56,
      "doc": "TIME(expr),Date and Time Functions"
    },
    {
      "index": 15,
      "doc": "ADDDATE(date,INTERVAL\n          expr\nunit),Date and Time Functions"
    }
  ]
}
{
  "index": 4,
  "doc": "ADD_MONTHS(date, months)\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 45,
      "doc": "MONTHNAME(date),Date and Time Functions"
    },
    {
      "index": 44,
      "doc": "MONTH(date),Date and Time Functions"
    },
    {
      "index": 30,
      "doc": "DAYOFMONTH(date),Date and Time Functions"
    },
    {
      "index": 24,
      "doc": "DATE_ADD(date,INTERVAL\n          expr\nunit),Date and Time Functions"
    }
  ]
}
{
  "index": 5,
  "doc": "AES_DECRYPT(crypt_str,key_str)\nFrom MariaDB 11.2.0AES_ENCRYPT(crypt_str, key_str, [, iv [, mode]])\n,Encryption, Hashing and Compression Functions",
  "mapping docs": [
    {
      "index": 74,
      "doc": "AES_DECRYPT(),Encryption and Compression Functions"
    },
    {
      "index": 75,
      "doc": "AES_ENCRYPT(),Encryption and Compression Functions"
    },
    {
      "index": 77,
      "doc": "MD5(),Encryption and Compression Functions"
    },
    {
      "index": 78,
      "doc": "PASSWORD(),Encryption and Compression Functions"
    }
  ]
}
{
  "index": 6,
  "doc": "AES_ENCRYPT(str,key_str)\nFrom MariaDB 11.2.0AES_ENCRYPT(str, key, [, iv [, mode]])\n,Encryption, Hashing and Compression Functions",
  "mapping docs": [
    {
      "index": 75,
      "doc": "AES_ENCRYPT(),Encryption and Compression Functions"
    },
    {
      "index": 74,
      "doc": "AES_DECRYPT(),Encryption and Compression Functions"
    },
    {
      "index": 77,
      "doc": "MD5(),Encryption and Compression Functions"
    },
    {
      "index": 78,
      "doc": "PASSWORD(),Encryption and Compression Functions"
    }
  ]
}
{
  "index": 7,
  "doc": "ASCII(str)\n,String Functions",
  "mapping docs": [
    {
      "index": 193,
      "doc": "ASCII(),String Functions"
    },
    {
      "index": 196,
      "doc": "CHAR(),String Functions"
    },
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 241,
      "doc": "SUBSTR(),String Functions"
    }
  ]
}
{
  "index": 8,
  "doc": "ASIN(X)\n,Numeric Functions",
  "mapping docs": [
    {
      "index": 143,
      "doc": "ASIN(X),Mathematical Functions"
    },
    {
      "index": 168,
      "doc": "SQRT(X),Mathematical Functions"
    },
    {
      "index": 163,
      "doc": "RADIANS(X),Mathematical Functions"
    },
    {
      "index": 155,
      "doc": "LN(X),Mathematical Functions"
    }
  ]
}
{
  "index": 9,
  "doc": ",No Category",
  "mapping docs": [
    {
      "index": 184,
      "doc": "NAME_CONST(),Miscellaneous Functions"
    },
    {
      "index": 178,
      "doc": "INET6_NTOA(),Miscellaneous Functions"
    },
    {
      "index": 173,
      "doc": "DEFAULT(),Miscellaneous Functions"
    },
    {
      "index": 176,
      "doc": "INET_NTOA(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 10,
  "doc": "ATAN(X)\n,Numeric Functions",
  "mapping docs": [
    {
      "index": 144,
      "doc": "ATAN(X),Mathematical Functions"
    },
    {
      "index": 145,
      "doc": "ATAN(Y,X),Mathematical Functions"
    },
    {
      "index": 169,
      "doc": "TAN(X),Mathematical Functions"
    },
    {
      "index": 163,
      "doc": "RADIANS(X),Mathematical Functions"
    }
  ]
}
{
  "index": 11,
  "doc": "ATAN(Y,X), ATAN2(Y,X)\n,Numeric Functions",
  "mapping docs": [
    {
      "index": 145,
      "doc": "ATAN(Y,X),Mathematical Functions"
    },
    {
      "index": 144,
      "doc": "ATAN(X),Mathematical Functions"
    },
    {
      "index": 169,
      "doc": "TAN(X),Mathematical Functions"
    },
    {
      "index": 161,
      "doc": "POW(X,Y),Mathematical Functions"
    }
  ]
}
{
  "index": 12,
  "doc": "AVG([DISTINCT] expr)\n,Aggregate Functions",
  "mapping docs": [
    {
      "index": 3,
      "doc": "AVG([DISTINCT]\n            expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 1,
      "doc": "COUNT(DISTINCT\n            expr,[expr...]),Aggregate Functions"
    },
    {
      "index": 2,
      "doc": "SUM([DISTINCT]\n            expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 5,
      "doc": "MIN([DISTINCT]\n            expr)\n            [over_clause],Aggregate Functions"
    }
  ]
}
{
  "index": 13,
  "doc": "BENCHMARK(count,expr)\n,Information Functions",
  "mapping docs": [
    {
      "index": 91,
      "doc": "BENCHMARK(),Information Functions"
    },
    {
      "index": 98,
      "doc": "ROW_COUNT(),Information Functions"
    },
    {
      "index": 1,
      "doc": "COUNT(DISTINCT\n            expr,[expr...]),Aggregate Functions"
    },
    {
      "index": 0,
      "doc": "COUNT(expr)\n            [over_clause],Aggregate Functions"
    }
  ]
}
{
  "index": 14,
  "doc": "BIN(N)\n,String Functions",
  "mapping docs": [
    {
      "index": 194,
      "doc": "BIN(),String Functions"
    },
    {
      "index": 195,
      "doc": "BIT_LENGTH(),String Functions"
    },
    {
      "index": 207,
      "doc": "HEX(),String Functions"
    },
    {
      "index": 193,
      "doc": "ASCII(),String Functions"
    }
  ]
}
{
  "index": 15,
  "doc": "BINARY\n,String Functions",
  "mapping docs": [
    {
      "index": 195,
      "doc": "BIT_LENGTH(),String Functions"
    },
    {
      "index": 194,
      "doc": "BIN(),String Functions"
    },
    {
      "index": 222,
      "doc": "OCT(),String Functions"
    },
    {
      "index": 196,
      "doc": "CHAR(),String Functions"
    }
  ]
}
{
  "index": 16,
  "doc": "BINLOG_GTID_POS(binlog_filename,binlog_offset)\n,Information Functions",
  "mapping docs": [
    {
      "index": 187,
      "doc": "UUID_TO_BIN,Miscellaneous Functions"
    },
    {
      "index": 172,
      "doc": "BIN_TO_UUID(),Miscellaneous Functions"
    },
    {
      "index": 194,
      "doc": "BIN(),String Functions"
    },
    {
      "index": 11,
      "doc": "BIT_COUNT(),Bit Functions"
    }
  ]
}
{
  "index": 17,
  "doc": "BIT_AND(expr) [over_clause]\n,Aggregate Functions",
  "mapping docs": [
    {
      "index": 8,
      "doc": "STD(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 0,
      "doc": "COUNT(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 2,
      "doc": "SUM([DISTINCT]\n            expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    }
  ]
}
{
  "index": 18,
  "doc": "BIT_LENGTH(str)\n,String Functions",
  "mapping docs": [
    {
      "index": 195,
      "doc": "BIT_LENGTH(),String Functions"
    },
    {
      "index": 11,
      "doc": "BIT_COUNT(),Bit Functions"
    },
    {
      "index": 223,
      "doc": "OCTET_LENGTH(),String Functions"
    },
    {
      "index": 212,
      "doc": "LENGTH(),String Functions"
    }
  ]
}
{
  "index": 19,
  "doc": "BIT_OR(expr) [over_clause]\n,Aggregate Functions",
  "mapping docs": [
    {
      "index": 8,
      "doc": "STD(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 0,
      "doc": "COUNT(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 2,
      "doc": "SUM([DISTINCT]\n            expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    }
  ]
}
{
  "index": 20,
  "doc": "BIT_XOR(expr) [over_clause]\n,Aggregate Functions",
  "mapping docs": [
    {
      "index": 8,
      "doc": "STD(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 0,
      "doc": "COUNT(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 2,
      "doc": "SUM([DISTINCT]\n            expr)\n            [over_clause],Aggregate Functions"
    }
  ]
}
{
  "index": 21,
  "doc": ",No Category",
  "mapping docs": [
    {
      "index": 184,
      "doc": "NAME_CONST(),Miscellaneous Functions"
    },
    {
      "index": 178,
      "doc": "INET6_NTOA(),Miscellaneous Functions"
    },
    {
      "index": 173,
      "doc": "DEFAULT(),Miscellaneous Functions"
    },
    {
      "index": 176,
      "doc": "INET_NTOA(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 22,
  "doc": "CASE value WHEN [compare_value] THEN result [WHEN [compare_value] THEN\nresult ...] [ELSE result] END\n\nCASE WHEN [condition] THEN result [WHEN [condition] THEN result ...]\n[ELSE result] END\n,Control Flow Functions",
  "mapping docs": [
    {
      "index": 88,
      "doc": "IF(),Flow Control Functions"
    },
    {
      "index": 87,
      "doc": "CASE,Flow Control Functions"
    },
    {
      "index": 89,
      "doc": "IFNULL(),Flow Control Functions"
    },
    {
      "index": 90,
      "doc": "NULLIF(),Flow Control Functions"
    }
  ]
}
{
  "index": 23,
  "doc": "CAST(expr AS type)\n,String Functions",
  "mapping docs": [
    {
      "index": 13,
      "doc": "CAST,Cast Functions"
    },
    {
      "index": 14,
      "doc": "CONVERT,Cast Functions"
    },
    {
      "index": 12,
      "doc": "BINARY,Cast Functions"
    },
    {
      "index": 217,
      "doc": "LTRIM(),String Functions"
    }
  ]
}
{
  "index": 24,
  "doc": "CEIL(X)\n,Numeric Functions",
  "mapping docs": [
    {
      "index": 146,
      "doc": "CEIL(X),Mathematical Functions"
    },
    {
      "index": 153,
      "doc": "EXP(X),Mathematical Functions"
    },
    {
      "index": 155,
      "doc": "LN(X),Mathematical Functions"
    },
    {
      "index": 157,
      "doc": "LOG10(X),Mathematical Functions"
    }
  ]
}
{
  "index": 25,
  "doc": "CEILING(X)\n,Numeric Functions",
  "mapping docs": [
    {
      "index": 147,
      "doc": "CEILING(X),Mathematical Functions"
    },
    {
      "index": 154,
      "doc": "FLOOR(X),Mathematical Functions"
    },
    {
      "index": 168,
      "doc": "SQRT(X),Mathematical Functions"
    },
    {
      "index": 165,
      "doc": "ROUND(X),Mathematical Functions"
    }
  ]
}
{
  "index": 26,
  "doc": ",No Category",
  "mapping docs": [
    {
      "index": 184,
      "doc": "NAME_CONST(),Miscellaneous Functions"
    },
    {
      "index": 178,
      "doc": "INET6_NTOA(),Miscellaneous Functions"
    },
    {
      "index": 173,
      "doc": "DEFAULT(),Miscellaneous Functions"
    },
    {
      "index": 176,
      "doc": "INET_NTOA(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 27,
  "doc": "CHAR(N,... [USING charset_name])\n,String Functions",
  "mapping docs": [
    {
      "index": 196,
      "doc": "CHAR(),String Functions"
    },
    {
      "index": 197,
      "doc": "CHAR_LENGTH(),String Functions"
    },
    {
      "index": 193,
      "doc": "ASCII(),String Functions"
    },
    {
      "index": 242,
      "doc": "SUBSTRING(),String Functions"
    }
  ]
}
{
  "index": 28,
  "doc": "CHARACTER_LENGTH(str)\n,String Functions",
  "mapping docs": [
    {
      "index": 197,
      "doc": "CHAR_LENGTH(),String Functions"
    },
    {
      "index": 198,
      "doc": "CHARACTER_LENGTH(),String Functions"
    },
    {
      "index": 212,
      "doc": "LENGTH(),String Functions"
    },
    {
      "index": 196,
      "doc": "CHAR(),String Functions"
    }
  ]
}
{
  "index": 29,
  "doc": "CHARSET(str)\n,Information Functions",
  "mapping docs": [
    {
      "index": 196,
      "doc": "CHAR(),String Functions"
    },
    {
      "index": 197,
      "doc": "CHAR_LENGTH(),String Functions"
    },
    {
      "index": 193,
      "doc": "ASCII(),String Functions"
    },
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    }
  ]
}
{
  "index": 30,
  "doc": "CHAR_LENGTH(str)\nCHARACTER_LENGTH(str)\n,String Functions",
  "mapping docs": [
    {
      "index": 197,
      "doc": "CHAR_LENGTH(),String Functions"
    },
    {
      "index": 198,
      "doc": "CHARACTER_LENGTH(),String Functions"
    },
    {
      "index": 212,
      "doc": "LENGTH(),String Functions"
    },
    {
      "index": 196,
      "doc": "CHAR(),String Functions"
    }
  ]
}
{
  "index": 31,
  "doc": "CHR(N)\n,String Functions",
  "mapping docs": [
    {
      "index": 196,
      "doc": "CHAR(),String Functions"
    },
    {
      "index": 217,
      "doc": "LTRIM(),String Functions"
    },
    {
      "index": 247,
      "doc": "UCASE(),String Functions"
    },
    {
      "index": 193,
      "doc": "ASCII(),String Functions"
    }
  ]
}
{
  "index": 32,
  "doc": "COERCIBILITY(str)\n,Information Functions",
  "mapping docs": [
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 155,
      "doc": "LN(X),Mathematical Functions"
    },
    {
      "index": 162,
      "doc": "POWER(X,Y),Mathematical Functions"
    },
    {
      "index": 99,
      "doc": "SCHEMA(),Information Functions"
    }
  ]
}
{
  "index": 33,
  "doc": "COLLATION(str)\n,Information Functions",
  "mapping docs": [
    {
      "index": 193,
      "doc": "ASCII(),String Functions"
    },
    {
      "index": 245,
      "doc": "TRANSLATE(),String Functions"
    },
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 207,
      "doc": "HEX(),String Functions"
    }
  ]
}
{
  "index": 34,
  "doc": "COLUMN_ADD(dyncol_blob, column_nr, value [as type], [column_nr, value [as type]]...);\nCOLUMN_ADD(dyncol_blob, column_name, value [as type], [column_name, value [as type]]...);\n,Dynamic Columns Functions",
  "mapping docs": [
    {
      "index": 14,
      "doc": "CONVERT,Cast Functions"
    },
    {
      "index": 12,
      "doc": "BINARY,Cast Functions"
    },
    {
      "index": 255,
      "doc": "TIDB_DECODE_KEY,TiDB Specific Functions"
    },
    {
      "index": 258,
      "doc": "TIDB_ENCODE_SQL_DIGEST,TiDB Specific Functions"
    }
  ]
}
{
  "index": 35,
  "doc": "COLUMN_CHECK(dyncol_blob);\n,Dynamic Columns Functions",
  "mapping docs": [
    {
      "index": 262,
      "doc": "TIDB_ROW_CHECKSUM,TiDB Specific Functions"
    },
    {
      "index": 276,
      "doc": "ROW_NUMBER(),Window Functions"
    },
    {
      "index": 98,
      "doc": "ROW_COUNT(),Information Functions"
    },
    {
      "index": 252,
      "doc": "TIDB_BOUNDED_STALENESS,TiDB Specific Functions"
    }
  ]
}
{
  "index": 36,
  "doc": "COLUMN_CREATE(column_nr, value [as type], [column_nr, value [as type]]...);\nCOLUMN_CREATE(column_name, value [as type], [column_name, value [as type]]...);\n,Dynamic Columns Functions",
  "mapping docs": [
    {
      "index": 14,
      "doc": "CONVERT,Cast Functions"
    },
    {
      "index": 203,
      "doc": "FIELD(),String Functions"
    },
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 13,
      "doc": "CAST,Cast Functions"
    }
  ]
}
{
  "index": 37,
  "doc": "COLUMN_DELETE(dyncol_blob, column_nr, column_nr...);\nCOLUMN_DELETE(dyncol_blob, column_name, column_name...);\n,Dynamic Columns Functions",
  "mapping docs": [
    {
      "index": 276,
      "doc": "ROW_NUMBER(),Window Functions"
    },
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 203,
      "doc": "FIELD(),String Functions"
    },
    {
      "index": 262,
      "doc": "TIDB_ROW_CHECKSUM,TiDB Specific Functions"
    }
  ]
}
{
  "index": 38,
  "doc": "COLUMN_EXISTS(dyncol_blob, column_nr);\nCOLUMN_EXISTS(dyncol_blob, column_name);\n,Dynamic Columns Functions",
  "mapping docs": [
    {
      "index": 262,
      "doc": "TIDB_ROW_CHECKSUM,TiDB Specific Functions"
    },
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 276,
      "doc": "ROW_NUMBER(),Window Functions"
    },
    {
      "index": 265,
      "doc": "VITESS_HASH,TiDB Specific Functions"
    }
  ]
}
{
  "index": 39,
  "doc": "COLUMN_GET(dyncol_blob, column_nr as type);\nCOLUMN_GET(dyncol_blob, column_name as type);\n,Dynamic Columns Functions",
  "mapping docs": [
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 203,
      "doc": "FIELD(),String Functions"
    },
    {
      "index": 216,
      "doc": "LPAD(),String Functions"
    },
    {
      "index": 35,
      "doc": "FROM_UNIXTIME(unix_timestamp[,format]),Date and Time Functions"
    }
  ]
}
{
  "index": 40,
  "doc": "COLUMN_JSON(dyncol_blob)\n,Dynamic Columns Functions",
  "mapping docs": [
    {
      "index": 131,
      "doc": "JSON_PRETTY(),JSON Functions"
    },
    {
      "index": 104,
      "doc": "JSON_ARRAY(),JSON Functions"
    },
    {
      "index": 132,
      "doc": "JSON_STORAGE_FREE(),JSON Functions"
    },
    {
      "index": 134,
      "doc": "JSON_ARRAYAGG(),JSON Functions"
    }
  ]
}
{
  "index": 41,
  "doc": "COLUMN_LIST(dyncol_blob);\n,Dynamic Columns Functions",
  "mapping docs": [
    {
      "index": 276,
      "doc": "ROW_NUMBER(),Window Functions"
    },
    {
      "index": 98,
      "doc": "ROW_COUNT(),Information Functions"
    },
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 104,
      "doc": "JSON_ARRAY(),JSON Functions"
    }
  ]
}
{
  "index": 42,
  "doc": "COMPRESS(string_to_compress)\n,Encryption, Hashing and Compression Functions",
  "mapping docs": [
    {
      "index": 76,
      "doc": "COMPRESS(),Encryption and Compression Functions"
    },
    {
      "index": 82,
      "doc": "SHA2(),Encryption and Compression Functions"
    },
    {
      "index": 81,
      "doc": "SHA1(),Encryption and Compression Functions"
    },
    {
      "index": 77,
      "doc": "MD5(),Encryption and Compression Functions"
    }
  ]
}
{
  "index": 43,
  "doc": "CONCAT(str1,str2,...)\n,String Functions",
  "mapping docs": [
    {
      "index": 199,
      "doc": "CONCAT(),String Functions"
    },
    {
      "index": 200,
      "doc": "CONCAT_WS(),String Functions"
    },
    {
      "index": 241,
      "doc": "SUBSTR(),String Functions"
    },
    {
      "index": 231,
      "doc": "REGEXP_SUBSTR(),String Functions"
    }
  ]
}
{
  "index": 44,
  "doc": "CONCAT_WS(separator,str1,str2,...)\n,String Functions",
  "mapping docs": [
    {
      "index": 200,
      "doc": "CONCAT_WS(),String Functions"
    },
    {
      "index": 199,
      "doc": "CONCAT(),String Functions"
    },
    {
      "index": 231,
      "doc": "REGEXP_SUBSTR(),String Functions"
    },
    {
      "index": 241,
      "doc": "SUBSTR(),String Functions"
    }
  ]
}
{
  "index": 45,
  "doc": "CONNECTION_ID()\n,Information Functions",
  "mapping docs": [
    {
      "index": 92,
      "doc": "CONNECTION_ID(),Information Functions"
    },
    {
      "index": 97,
      "doc": "LAST_INSERT_ID(),Information Functions"
    },
    {
      "index": 95,
      "doc": "DATABASE(),Information Functions"
    },
    {
      "index": 186,
      "doc": "UUID(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 46,
  "doc": "Contains(g1,g2)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 214,
      "doc": "LOCATE(),String Functions"
    },
    {
      "index": 204,
      "doc": "FIND_IN_SET(),String Functions"
    },
    {
      "index": 107,
      "doc": "JSON_CONTAINS(),JSON Functions"
    },
    {
      "index": 225,
      "doc": "POSITION(),String Functions"
    }
  ]
}
{
  "index": 47,
  "doc": "CONV(N,from_base,to_base)\n,Numeric Functions",
  "mapping docs": [
    {
      "index": 148,
      "doc": "CONV(N,from_base,to_base),Mathematical Functions"
    },
    {
      "index": 161,
      "doc": "POW(X,Y),Mathematical Functions"
    },
    {
      "index": 159,
      "doc": "MOD(N,M),Mathematical Functions"
    },
    {
      "index": 155,
      "doc": "LN(X),Mathematical Functions"
    }
  ]
}
{
  "index": 48,
  "doc": "CONVERT(expr,type), CONVERT(expr USING transcoding_name)\n,String Functions",
  "mapping docs": [
    {
      "index": 14,
      "doc": "CONVERT,Cast Functions"
    },
    {
      "index": 245,
      "doc": "TRANSLATE(),String Functions"
    },
    {
      "index": 233,
      "doc": "REPLACE(),String Functions"
    },
    {
      "index": 230,
      "doc": "REGEXP_REPLACE(),String Functions"
    }
  ]
}
{
  "index": 49,
  "doc": "CONVERT_TZ(dt,from_tz,to_tz)\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 17,
      "doc": "CONVERT_TZ(dt,from_tz,to_tz),Date and Time Functions"
    },
    {
      "index": 23,
      "doc": "DATE(expr),Date and Time Functions"
    },
    {
      "index": 35,
      "doc": "FROM_UNIXTIME(unix_timestamp[,format]),Date and Time Functions"
    },
    {
      "index": 33,
      "doc": "EXTRACT(unit\n          FROM date),Date and Time Functions"
    }
  ]
}
{
  "index": 50,
  "doc": ",No Category",
  "mapping docs": [
    {
      "index": 184,
      "doc": "NAME_CONST(),Miscellaneous Functions"
    },
    {
      "index": 178,
      "doc": "INET6_NTOA(),Miscellaneous Functions"
    },
    {
      "index": 173,
      "doc": "DEFAULT(),Miscellaneous Functions"
    },
    {
      "index": 176,
      "doc": "INET_NTOA(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 51,
  "doc": "COS(X)\n,Numeric Functions",
  "mapping docs": [
    {
      "index": 149,
      "doc": "COS(X),Mathematical Functions"
    },
    {
      "index": 169,
      "doc": "TAN(X),Mathematical Functions"
    },
    {
      "index": 150,
      "doc": "COT(X),Mathematical Functions"
    },
    {
      "index": 163,
      "doc": "RADIANS(X),Mathematical Functions"
    }
  ]
}
{
  "index": 52,
  "doc": "COT(X)\n,Numeric Functions",
  "mapping docs": [
    {
      "index": 150,
      "doc": "COT(X),Mathematical Functions"
    },
    {
      "index": 169,
      "doc": "TAN(X),Mathematical Functions"
    },
    {
      "index": 149,
      "doc": "COS(X),Mathematical Functions"
    },
    {
      "index": 167,
      "doc": "SIN(X),Mathematical Functions"
    }
  ]
}
{
  "index": 53,
  "doc": "COUNT(DISTINCT expr,[expr...])\n,Aggregate Functions",
  "mapping docs": [
    {
      "index": 1,
      "doc": "COUNT(DISTINCT\n            expr,[expr...]),Aggregate Functions"
    },
    {
      "index": 2,
      "doc": "SUM([DISTINCT]\n            expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 0,
      "doc": "COUNT(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 5,
      "doc": "MIN([DISTINCT]\n            expr)\n            [over_clause],Aggregate Functions"
    }
  ]
}
{
  "index": 54,
  "doc": "COUNT(expr)\n,Aggregate Functions",
  "mapping docs": [
    {
      "index": 1,
      "doc": "COUNT(DISTINCT\n            expr,[expr...]),Aggregate Functions"
    },
    {
      "index": 0,
      "doc": "COUNT(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 2,
      "doc": "SUM([DISTINCT]\n            expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 6,
      "doc": "GROUP_CONCAT(expr),Aggregate Functions"
    }
  ]
}
{
  "index": 55,
  "doc": "<= MariaDB 10.7CRC32(expr)\nFrom MariaDB 10.8CRC32([par,]expr)\n,Numeric Functions",
  "mapping docs": [
    {
      "index": 151,
      "doc": "CRC32(expr),Mathematical Functions"
    },
    {
      "index": 193,
      "doc": "ASCII(),String Functions"
    },
    {
      "index": 205,
      "doc": "FORMAT(),String Functions"
    },
    {
      "index": 12,
      "doc": "BINARY,Cast Functions"
    }
  ]
}
{
  "index": 56,
  "doc": "CRC32C([par,]expr)\n,Numeric Functions",
  "mapping docs": [
    {
      "index": 151,
      "doc": "CRC32(expr),Mathematical Functions"
    },
    {
      "index": 12,
      "doc": "BINARY,Cast Functions"
    },
    {
      "index": 170,
      "doc": "TRUNCATE(X,D),Mathematical Functions"
    },
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    }
  ]
}
{
  "index": 57,
  "doc": "Crosses(g1,g2)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 145,
      "doc": "ATAN(Y,X),Mathematical Functions"
    },
    {
      "index": 162,
      "doc": "POWER(X,Y),Mathematical Functions"
    },
    {
      "index": 144,
      "doc": "ATAN(X),Mathematical Functions"
    },
    {
      "index": 163,
      "doc": "RADIANS(X),Mathematical Functions"
    }
  ]
}
{
  "index": 58,
  "doc": "CUME_DIST() OVER ( \n  [ PARTITION BY partition_expression ] \n  [ ORDER BY order_list ]\n)\n,Window Functions",
  "mapping docs": [
    {
      "index": 266,
      "doc": "CUME_DIST(),Window Functions"
    },
    {
      "index": 273,
      "doc": "NTILE(),Window Functions"
    },
    {
      "index": 267,
      "doc": "DENSE_RANK(),Window Functions"
    },
    {
      "index": 5,
      "doc": "MIN([DISTINCT]\n            expr)\n            [over_clause],Aggregate Functions"
    }
  ]
}
{
  "index": 59,
  "doc": "CURDATE()\nCURRENT_DATE\nCURRENT_DATE()\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 19,
      "doc": "CURRENT_DATE,Date and Time Functions"
    },
    {
      "index": 18,
      "doc": "CURDATE(),Date and Time Functions"
    },
    {
      "index": 21,
      "doc": "CURRENT_TIMESTAMP,Date and Time Functions"
    },
    {
      "index": 20,
      "doc": "CURRENT_TIME,Date and Time Functions"
    }
  ]
}
{
  "index": 60,
  "doc": "CURRENT_DATE, CURRENT_DATE()\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 19,
      "doc": "CURRENT_DATE,Date and Time Functions"
    },
    {
      "index": 20,
      "doc": "CURRENT_TIME,Date and Time Functions"
    },
    {
      "index": 21,
      "doc": "CURRENT_TIMESTAMP,Date and Time Functions"
    },
    {
      "index": 23,
      "doc": "DATE(expr),Date and Time Functions"
    }
  ]
}
{
  "index": 61,
  "doc": "CURRENT_ROLE, CURRENT_ROLE()\n,Information Functions",
  "mapping docs": [
    {
      "index": 93,
      "doc": "CURRENT_ROLE(),Information Functions"
    },
    {
      "index": 94,
      "doc": "CURRENT_USER(),Information Functions"
    },
    {
      "index": 102,
      "doc": "USER(),Information Functions"
    },
    {
      "index": 101,
      "doc": "SYSTEM_USER(),Information Functions"
    }
  ]
}
{
  "index": 62,
  "doc": "CURRENT_TIME\nCURRENT_TIME([precision])\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 20,
      "doc": "CURRENT_TIME,Date and Time Functions"
    },
    {
      "index": 19,
      "doc": "CURRENT_DATE,Date and Time Functions"
    },
    {
      "index": 21,
      "doc": "CURRENT_TIMESTAMP,Date and Time Functions"
    },
    {
      "index": 58,
      "doc": "TIME_TO_SEC(time),Date and Time Functions"
    }
  ]
}
{
  "index": 63,
  "doc": "CURRENT_TIMESTAMP\nCURRENT_TIMESTAMP([precision])\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 21,
      "doc": "CURRENT_TIMESTAMP,Date and Time Functions"
    },
    {
      "index": 19,
      "doc": "CURRENT_DATE,Date and Time Functions"
    },
    {
      "index": 20,
      "doc": "CURRENT_TIME,Date and Time Functions"
    },
    {
      "index": 65,
      "doc": "UNIX_TIMESTAMP([date]),Date and Time Functions"
    }
  ]
}
{
  "index": 64,
  "doc": "CURRENT_USER, CURRENT_USER()\n,Information Functions",
  "mapping docs": [
    {
      "index": 94,
      "doc": "CURRENT_USER(),Information Functions"
    },
    {
      "index": 102,
      "doc": "USER(),Information Functions"
    },
    {
      "index": 101,
      "doc": "SYSTEM_USER(),Information Functions"
    },
    {
      "index": 100,
      "doc": "SESSION_USER(),Information Functions"
    }
  ]
}
{
  "index": 65,
  "doc": "CURTIME([precision])\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 22,
      "doc": "CURTIME([fsp]),Date and Time Functions"
    },
    {
      "index": 23,
      "doc": "DATE(expr),Date and Time Functions"
    },
    {
      "index": 59,
      "doc": "TIMEDIFF(expr1,expr2),Date and Time Functions"
    },
    {
      "index": 27,
      "doc": "DATEDIFF(expr1,expr2),Date and Time Functions"
    }
  ]
}
{
  "index": 66,
  "doc": "DATABASE()\nSCHEMA()\n,Information Functions",
  "mapping docs": [
    {
      "index": 99,
      "doc": "SCHEMA(),Information Functions"
    },
    {
      "index": 95,
      "doc": "DATABASE(),Information Functions"
    },
    {
      "index": 96,
      "doc": "FOUND_ROWS(),Information Functions"
    },
    {
      "index": 98,
      "doc": "ROW_COUNT(),Information Functions"
    }
  ]
}
{
  "index": 67,
  "doc": "DATE(expr)\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 23,
      "doc": "DATE(expr),Date and Time Functions"
    },
    {
      "index": 27,
      "doc": "DATEDIFF(expr1,expr2),Date and Time Functions"
    },
    {
      "index": 56,
      "doc": "TIME(expr),Date and Time Functions"
    },
    {
      "index": 16,
      "doc": "ADDTIME(expr1,expr2),Date and Time Functions"
    }
  ]
}
{
  "index": 68,
  "doc": "DATEDIFF(expr1,expr2)\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 27,
      "doc": "DATEDIFF(expr1,expr2),Date and Time Functions"
    },
    {
      "index": 59,
      "doc": "TIMEDIFF(expr1,expr2),Date and Time Functions"
    },
    {
      "index": 62,
      "doc": "TIMESTAMPDIFF(unit,datetime_expr1,datetime_expr2),Date and Time Functions"
    },
    {
      "index": 23,
      "doc": "DATE(expr),Date and Time Functions"
    }
  ]
}
{
  "index": 69,
  "doc": "DATE_ADD(date,INTERVAL expr unit)\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 24,
      "doc": "DATE_ADD(date,INTERVAL\n          expr\nunit),Date and Time Functions"
    },
    {
      "index": 15,
      "doc": "ADDDATE(date,INTERVAL\n          expr\nunit),Date and Time Functions"
    },
    {
      "index": 26,
      "doc": "DATE_SUB(date,INTERVAL\n          expr\nunit),Date and Time Functions"
    },
    {
      "index": 16,
      "doc": "ADDTIME(expr1,expr2),Date and Time Functions"
    }
  ]
}
{
  "index": 70,
  "doc": "DATE_FORMAT(date, format[, locale])\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 25,
      "doc": "DATE_FORMAT(date,format),Date and Time Functions"
    },
    {
      "index": 57,
      "doc": "TIME_FORMAT(time,format),Date and Time Functions"
    },
    {
      "index": 52,
      "doc": "STR_TO_DATE(str,format),Date and Time Functions"
    },
    {
      "index": 36,
      "doc": "GET_FORMAT({DATE|TIME|DATETIME},\n          {'EUR'|'USA'|'JIS'|'ISO'|'INTERNAL'}),Date and Time Functions"
    }
  ]
}
{
  "index": 71,
  "doc": "DATE_SUB(date,INTERVAL expr unit)\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 26,
      "doc": "DATE_SUB(date,INTERVAL\n          expr\nunit),Date and Time Functions"
    },
    {
      "index": 53,
      "doc": "SUBDATE(date,INTERVAL\n          expr\nunit),Date and Time Functions"
    },
    {
      "index": 24,
      "doc": "DATE_ADD(date,INTERVAL\n          expr\nunit),Date and Time Functions"
    },
    {
      "index": 15,
      "doc": "ADDDATE(date,INTERVAL\n          expr\nunit),Date and Time Functions"
    }
  ]
}
{
  "index": 72,
  "doc": "DAY(date)\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 28,
      "doc": "DAY(date),Date and Time Functions"
    },
    {
      "index": 29,
      "doc": "DAYNAME(date),Date and Time Functions"
    },
    {
      "index": 70,
      "doc": "WEEKDAY(date),Date and Time Functions"
    },
    {
      "index": 32,
      "doc": "DAYOFYEAR(date),Date and Time Functions"
    }
  ]
}
{
  "index": 73,
  "doc": "DAYNAME(date)\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 29,
      "doc": "DAYNAME(date),Date and Time Functions"
    },
    {
      "index": 28,
      "doc": "DAY(date),Date and Time Functions"
    },
    {
      "index": 70,
      "doc": "WEEKDAY(date),Date and Time Functions"
    },
    {
      "index": 32,
      "doc": "DAYOFYEAR(date),Date and Time Functions"
    }
  ]
}
{
  "index": 74,
  "doc": "DAYOFMONTH(date)\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 30,
      "doc": "DAYOFMONTH(date),Date and Time Functions"
    },
    {
      "index": 45,
      "doc": "MONTHNAME(date),Date and Time Functions"
    },
    {
      "index": 44,
      "doc": "MONTH(date),Date and Time Functions"
    },
    {
      "index": 29,
      "doc": "DAYNAME(date),Date and Time Functions"
    }
  ]
}
{
  "index": 75,
  "doc": "DAYOFWEEK(date)\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 31,
      "doc": "DAYOFWEEK(date),Date and Time Functions"
    },
    {
      "index": 71,
      "doc": "WEEKOFYEAR(date),Date and Time Functions"
    },
    {
      "index": 73,
      "doc": "YEARWEEK(date),Date and Time Functions"
    },
    {
      "index": 70,
      "doc": "WEEKDAY(date),Date and Time Functions"
    }
  ]
}
{
  "index": 76,
  "doc": "DAYOFYEAR(date)\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 32,
      "doc": "DAYOFYEAR(date),Date and Time Functions"
    },
    {
      "index": 40,
      "doc": "MAKEDATE(year,dayofyear),Date and Time Functions"
    },
    {
      "index": 29,
      "doc": "DAYNAME(date),Date and Time Functions"
    },
    {
      "index": 72,
      "doc": "YEAR(date),Date and Time Functions"
    }
  ]
}
{
  "index": 77,
  "doc": "DECODE(crypt_str,pass_str)\nIn Oracle mode from MariaDB 10.3.2:DECODE(expr, search_expr, result_expr [, search_expr2, result_expr2 ...] [default_expr])\nIn all modes from MariaDB 10.3.2:DECODE_ORACLE(expr, search_expr, result_expr [, search_expr2, result_expr2 ...] [default_expr])\n,Encryption, Hashing and Compression Functions",
  "mapping docs": [
    {
      "index": 77,
      "doc": "MD5(),Encryption and Compression Functions"
    },
    {
      "index": 84,
      "doc": "UNCOMPRESS(),Encryption and Compression Functions"
    },
    {
      "index": 78,
      "doc": "PASSWORD(),Encryption and Compression Functions"
    },
    {
      "index": 74,
      "doc": "AES_DECRYPT(),Encryption and Compression Functions"
    }
  ]
}
{
  "index": 78,
  "doc": "DECODE_HISTOGRAM(hist_type,histogram)\n,Information Functions",
  "mapping docs": [
    {
      "index": 85,
      "doc": "UNCOMPRESSED_LENGTH(),Encryption and Compression Functions"
    },
    {
      "index": 79,
      "doc": "RANDOM_BYTES(),Encryption and Compression Functions"
    },
    {
      "index": 91,
      "doc": "BENCHMARK(),Information Functions"
    },
    {
      "index": 96,
      "doc": "FOUND_ROWS(),Information Functions"
    }
  ]
}
{
  "index": 79,
  "doc": "DEFAULT(col_name)\n,Information Functions",
  "mapping docs": [
    {
      "index": 99,
      "doc": "SCHEMA(),Information Functions"
    },
    {
      "index": 95,
      "doc": "DATABASE(),Information Functions"
    },
    {
      "index": 96,
      "doc": "FOUND_ROWS(),Information Functions"
    },
    {
      "index": 92,
      "doc": "CONNECTION_ID(),Information Functions"
    }
  ]
}
{
  "index": 80,
  "doc": "DEGREES(X)\n,Numeric Functions",
  "mapping docs": [
    {
      "index": 152,
      "doc": "DEGREES(X),Mathematical Functions"
    },
    {
      "index": 163,
      "doc": "RADIANS(X),Mathematical Functions"
    },
    {
      "index": 169,
      "doc": "TAN(X),Mathematical Functions"
    },
    {
      "index": 168,
      "doc": "SQRT(X),Mathematical Functions"
    }
  ]
}
{
  "index": 81,
  "doc": "DENSE_RANK() OVER (\n  [ PARTITION BY partition_expression ]\n  [ ORDER BY order_list ]\n) \n,Window Functions",
  "mapping docs": [
    {
      "index": 267,
      "doc": "DENSE_RANK(),Window Functions"
    },
    {
      "index": 275,
      "doc": "RANK(),Window Functions"
    },
    {
      "index": 274,
      "doc": "PERCENT_RANK(),Window Functions"
    },
    {
      "index": 266,
      "doc": "CUME_DIST(),Window Functions"
    }
  ]
}
{
  "index": 82,
  "doc": "DES_DECRYPT(crypt_str[,key_str])\n,Encryption, Hashing and Compression Functions",
  "mapping docs": [
    {
      "index": 74,
      "doc": "AES_DECRYPT(),Encryption and Compression Functions"
    },
    {
      "index": 75,
      "doc": "AES_ENCRYPT(),Encryption and Compression Functions"
    },
    {
      "index": 77,
      "doc": "MD5(),Encryption and Compression Functions"
    },
    {
      "index": 76,
      "doc": "COMPRESS(),Encryption and Compression Functions"
    }
  ]
}
{
  "index": 83,
  "doc": "DES_ENCRYPT(str[,{key_num|key_str}])\n,Encryption, Hashing and Compression Functions",
  "mapping docs": [
    {
      "index": 74,
      "doc": "AES_DECRYPT(),Encryption and Compression Functions"
    },
    {
      "index": 75,
      "doc": "AES_ENCRYPT(),Encryption and Compression Functions"
    },
    {
      "index": 76,
      "doc": "COMPRESS(),Encryption and Compression Functions"
    },
    {
      "index": 77,
      "doc": "MD5(),Encryption and Compression Functions"
    }
  ]
}
{
  "index": 84,
  "doc": ",No Category",
  "mapping docs": [
    {
      "index": 184,
      "doc": "NAME_CONST(),Miscellaneous Functions"
    },
    {
      "index": 178,
      "doc": "INET6_NTOA(),Miscellaneous Functions"
    },
    {
      "index": 173,
      "doc": "DEFAULT(),Miscellaneous Functions"
    },
    {
      "index": 176,
      "doc": "INET_NTOA(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 85,
  "doc": "Disjoint(g1,g2)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 154,
      "doc": "FLOOR(X),Mathematical Functions"
    },
    {
      "index": 6,
      "doc": "GROUP_CONCAT(expr),Aggregate Functions"
    },
    {
      "index": 170,
      "doc": "TRUNCATE(X,D),Mathematical Functions"
    },
    {
      "index": 162,
      "doc": "POWER(X,Y),Mathematical Functions"
    }
  ]
}
{
  "index": 86,
  "doc": "ELT(N, str1[, str2, str3,...])\n,String Functions",
  "mapping docs": [
    {
      "index": 201,
      "doc": "ELT(),String Functions"
    },
    {
      "index": 241,
      "doc": "SUBSTR(),String Functions"
    },
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 231,
      "doc": "REGEXP_SUBSTR(),String Functions"
    }
  ]
}
{
  "index": 87,
  "doc": "ENCODE(str,pass_str)\n,Encryption, Hashing and Compression Functions",
  "mapping docs": [
    {
      "index": 77,
      "doc": "MD5(),Encryption and Compression Functions"
    },
    {
      "index": 76,
      "doc": "COMPRESS(),Encryption and Compression Functions"
    },
    {
      "index": 81,
      "doc": "SHA1(),Encryption and Compression Functions"
    },
    {
      "index": 82,
      "doc": "SHA2(),Encryption and Compression Functions"
    }
  ]
}
{
  "index": 88,
  "doc": "ENCRYPT(str[,salt])\n,Encryption, Hashing and Compression Functions",
  "mapping docs": [
    {
      "index": 75,
      "doc": "AES_ENCRYPT(),Encryption and Compression Functions"
    },
    {
      "index": 74,
      "doc": "AES_DECRYPT(),Encryption and Compression Functions"
    },
    {
      "index": 76,
      "doc": "COMPRESS(),Encryption and Compression Functions"
    },
    {
      "index": 82,
      "doc": "SHA2(),Encryption and Compression Functions"
    }
  ]
}
{
  "index": 89,
  "doc": "Equals(g1,g2)\nFrom MariaDB 10.2.3:MBREQUALS(g1,g2)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 147,
      "doc": "CEILING(X),Mathematical Functions"
    },
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 2,
      "doc": "SUM([DISTINCT]\n            expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 157,
      "doc": "LOG10(X),Mathematical Functions"
    }
  ]
}
{
  "index": 90,
  "doc": "EXP(X)\n,Numeric Functions",
  "mapping docs": [
    {
      "index": 153,
      "doc": "EXP(X),Mathematical Functions"
    },
    {
      "index": 155,
      "doc": "LN(X),Mathematical Functions"
    },
    {
      "index": 161,
      "doc": "POW(X,Y),Mathematical Functions"
    },
    {
      "index": 157,
      "doc": "LOG10(X),Mathematical Functions"
    }
  ]
}
{
  "index": 91,
  "doc": "EXPORT_SET(bits, on, off[, separator[, number_of_bits]])\n,String Functions",
  "mapping docs": [
    {
      "index": 202,
      "doc": "EXPORT_SET(),String Functions"
    },
    {
      "index": 195,
      "doc": "BIT_LENGTH(),String Functions"
    },
    {
      "index": 11,
      "doc": "BIT_COUNT(),Bit Functions"
    },
    {
      "index": 218,
      "doc": "MAKE_SET(),String Functions"
    }
  ]
}
{
  "index": 92,
  "doc": "EXTRACT(unit FROM date)\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 33,
      "doc": "EXTRACT(unit\n          FROM date),Date and Time Functions"
    },
    {
      "index": 26,
      "doc": "DATE_SUB(date,INTERVAL\n          expr\nunit),Date and Time Functions"
    },
    {
      "index": 62,
      "doc": "TIMESTAMPDIFF(unit,datetime_expr1,datetime_expr2),Date and Time Functions"
    },
    {
      "index": 23,
      "doc": "DATE(expr),Date and Time Functions"
    }
  ]
}
{
  "index": 93,
  "doc": "EXTRACTVALUE(xml_frag, xpath_expr)\n,String Functions",
  "mapping docs": [
    {
      "index": 231,
      "doc": "REGEXP_SUBSTR(),String Functions"
    },
    {
      "index": 227,
      "doc": "REGEXP,String Functions"
    },
    {
      "index": 242,
      "doc": "SUBSTRING(),String Functions"
    },
    {
      "index": 241,
      "doc": "SUBSTR(),String Functions"
    }
  ]
}
{
  "index": 94,
  "doc": "sys.extract_schema_from_file_name(path)\n,No Category",
  "mapping docs": [
    {
      "index": 214,
      "doc": "LOCATE(),String Functions"
    },
    {
      "index": 202,
      "doc": "EXPORT_SET(),String Functions"
    },
    {
      "index": 108,
      "doc": "JSON_CONTAINS_PATH(),JSON Functions"
    },
    {
      "index": 257,
      "doc": "TIDB_DECODE_SQL_DIGESTS,TiDB Specific Functions"
    }
  ]
}
{
  "index": 95,
  "doc": "sys.extract_table_from_file_name(path)\n,No Category",
  "mapping docs": [
    {
      "index": 214,
      "doc": "LOCATE(),String Functions"
    },
    {
      "index": 108,
      "doc": "JSON_CONTAINS_PATH(),JSON Functions"
    },
    {
      "index": 96,
      "doc": "FOUND_ROWS(),Information Functions"
    },
    {
      "index": 184,
      "doc": "NAME_CONST(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 96,
  "doc": "FIELD(pattern, str1[,str2,...])\n,String Functions",
  "mapping docs": [
    {
      "index": 231,
      "doc": "REGEXP_SUBSTR(),String Functions"
    },
    {
      "index": 203,
      "doc": "FIELD(),String Functions"
    },
    {
      "index": 242,
      "doc": "SUBSTRING(),String Functions"
    },
    {
      "index": 241,
      "doc": "SUBSTR(),String Functions"
    }
  ]
}
{
  "index": 97,
  "doc": "FIND_IN_SET(pattern, strlist)\n,String Functions",
  "mapping docs": [
    {
      "index": 204,
      "doc": "FIND_IN_SET(),String Functions"
    },
    {
      "index": 218,
      "doc": "MAKE_SET(),String Functions"
    },
    {
      "index": 214,
      "doc": "LOCATE(),String Functions"
    },
    {
      "index": 213,
      "doc": "LIKE,String Functions"
    }
  ]
}
{
  "index": 98,
  "doc": "FLOOR(X)\n,Numeric Functions",
  "mapping docs": [
    {
      "index": 154,
      "doc": "FLOOR(X),Mathematical Functions"
    },
    {
      "index": 147,
      "doc": "CEILING(X),Mathematical Functions"
    },
    {
      "index": 168,
      "doc": "SQRT(X),Mathematical Functions"
    },
    {
      "index": 165,
      "doc": "ROUND(X),Mathematical Functions"
    }
  ]
}
{
  "index": 99,
  "doc": "FORMAT(num, decimal_position[, locale])\n,String Functions",
  "mapping docs": [
    {
      "index": 205,
      "doc": "FORMAT(),String Functions"
    },
    {
      "index": 25,
      "doc": "DATE_FORMAT(date,format),Date and Time Functions"
    },
    {
      "index": 57,
      "doc": "TIME_FORMAT(time,format),Date and Time Functions"
    },
    {
      "index": 52,
      "doc": "STR_TO_DATE(str,format),Date and Time Functions"
    }
  ]
}
{
  "index": 100,
  "doc": "sys.format_bytes(double)\n,No Category",
  "mapping docs": [
    {
      "index": 195,
      "doc": "BIT_LENGTH(),String Functions"
    },
    {
      "index": 11,
      "doc": "BIT_COUNT(),Bit Functions"
    },
    {
      "index": 193,
      "doc": "ASCII(),String Functions"
    },
    {
      "index": 12,
      "doc": "BINARY,Cast Functions"
    }
  ]
}
{
  "index": 101,
  "doc": "sys.format_path(path)\n,No Category",
  "mapping docs": [
    {
      "index": 205,
      "doc": "FORMAT(),String Functions"
    },
    {
      "index": 36,
      "doc": "GET_FORMAT({DATE|TIME|DATETIME},\n          {'EUR'|'USA'|'JIS'|'ISO'|'INTERNAL'}),Date and Time Functions"
    },
    {
      "index": 25,
      "doc": "DATE_FORMAT(date,format),Date and Time Functions"
    },
    {
      "index": 57,
      "doc": "TIME_FORMAT(time,format),Date and Time Functions"
    }
  ]
}
{
  "index": 102,
  "doc": "FORMAT_PICO_TIME(time_val)\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 57,
      "doc": "TIME_FORMAT(time,format),Date and Time Functions"
    },
    {
      "index": 25,
      "doc": "DATE_FORMAT(date,format),Date and Time Functions"
    },
    {
      "index": 52,
      "doc": "STR_TO_DATE(str,format),Date and Time Functions"
    },
    {
      "index": 56,
      "doc": "TIME(expr),Date and Time Functions"
    }
  ]
}
{
  "index": 103,
  "doc": "sys.format_statement(statement)\n,No Category",
  "mapping docs": [
    {
      "index": 205,
      "doc": "FORMAT(),String Functions"
    },
    {
      "index": 193,
      "doc": "ASCII(),String Functions"
    },
    {
      "index": 25,
      "doc": "DATE_FORMAT(date,format),Date and Time Functions"
    },
    {
      "index": 224,
      "doc": "ORD(),String Functions"
    }
  ]
}
{
  "index": 104,
  "doc": "sys.format_time(picoseconds)\n,No Category",
  "mapping docs": [
    {
      "index": 57,
      "doc": "TIME_FORMAT(time,format),Date and Time Functions"
    },
    {
      "index": 35,
      "doc": "FROM_UNIXTIME(unix_timestamp[,format]),Date and Time Functions"
    },
    {
      "index": 39,
      "doc": "LOCALTIMESTAMP,Date and Time Functions"
    },
    {
      "index": 25,
      "doc": "DATE_FORMAT(date,format),Date and Time Functions"
    }
  ]
}
{
  "index": 105,
  "doc": "FOUND_ROWS()\n,Information Functions",
  "mapping docs": [
    {
      "index": 96,
      "doc": "FOUND_ROWS(),Information Functions"
    },
    {
      "index": 98,
      "doc": "ROW_COUNT(),Information Functions"
    },
    {
      "index": 95,
      "doc": "DATABASE(),Information Functions"
    },
    {
      "index": 276,
      "doc": "ROW_NUMBER(),Window Functions"
    }
  ]
}
{
  "index": 106,
  "doc": "FROM_BASE64(str)\n,String Functions",
  "mapping docs": [
    {
      "index": 206,
      "doc": "FROM_BASE64(),String Functions"
    },
    {
      "index": 244,
      "doc": "TO_BASE64(),String Functions"
    },
    {
      "index": 222,
      "doc": "OCT(),String Functions"
    },
    {
      "index": 196,
      "doc": "CHAR(),String Functions"
    }
  ]
}
{
  "index": 107,
  "doc": "FROM_DAYS(N)\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 34,
      "doc": "FROM_DAYS(N),Date and Time Functions"
    },
    {
      "index": 63,
      "doc": "TO_DAYS(date),Date and Time Functions"
    },
    {
      "index": 28,
      "doc": "DAY(date),Date and Time Functions"
    },
    {
      "index": 70,
      "doc": "WEEKDAY(date),Date and Time Functions"
    }
  ]
}
{
  "index": 108,
  "doc": "FROM_UNIXTIME(unix_timestamp), FROM_UNIXTIME(unix_timestamp,format)\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 35,
      "doc": "FROM_UNIXTIME(unix_timestamp[,format]),Date and Time Functions"
    },
    {
      "index": 65,
      "doc": "UNIX_TIMESTAMP([date]),Date and Time Functions"
    },
    {
      "index": 57,
      "doc": "TIME_FORMAT(time,format),Date and Time Functions"
    },
    {
      "index": 25,
      "doc": "DATE_FORMAT(date,format),Date and Time Functions"
    }
  ]
}
{
  "index": 109,
  "doc": "GeometryCollection(g1,g2,...)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 162,
      "doc": "POWER(X,Y),Mathematical Functions"
    },
    {
      "index": 152,
      "doc": "DEGREES(X),Mathematical Functions"
    },
    {
      "index": 161,
      "doc": "POW(X,Y),Mathematical Functions"
    },
    {
      "index": 159,
      "doc": "MOD(N,M),Mathematical Functions"
    }
  ]
}
{
  "index": 110,
  "doc": ",No Category",
  "mapping docs": [
    {
      "index": 184,
      "doc": "NAME_CONST(),Miscellaneous Functions"
    },
    {
      "index": 178,
      "doc": "INET6_NTOA(),Miscellaneous Functions"
    },
    {
      "index": 173,
      "doc": "DEFAULT(),Miscellaneous Functions"
    },
    {
      "index": 176,
      "doc": "INET_NTOA(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 111,
  "doc": ",No Category",
  "mapping docs": [
    {
      "index": 184,
      "doc": "NAME_CONST(),Miscellaneous Functions"
    },
    {
      "index": 178,
      "doc": "INET6_NTOA(),Miscellaneous Functions"
    },
    {
      "index": 173,
      "doc": "DEFAULT(),Miscellaneous Functions"
    },
    {
      "index": 176,
      "doc": "INET_NTOA(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 112,
  "doc": ",No Category",
  "mapping docs": [
    {
      "index": 184,
      "doc": "NAME_CONST(),Miscellaneous Functions"
    },
    {
      "index": 178,
      "doc": "INET6_NTOA(),Miscellaneous Functions"
    },
    {
      "index": 173,
      "doc": "DEFAULT(),Miscellaneous Functions"
    },
    {
      "index": 176,
      "doc": "INET_NTOA(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 113,
  "doc": ",No Category",
  "mapping docs": [
    {
      "index": 184,
      "doc": "NAME_CONST(),Miscellaneous Functions"
    },
    {
      "index": 178,
      "doc": "INET6_NTOA(),Miscellaneous Functions"
    },
    {
      "index": 173,
      "doc": "DEFAULT(),Miscellaneous Functions"
    },
    {
      "index": 176,
      "doc": "INET_NTOA(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 114,
  "doc": "GET_FORMAT({DATE|DATETIME|TIME}, {'EUR'|'USA'|'JIS'|'ISO'|'INTERNAL'})\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 36,
      "doc": "GET_FORMAT({DATE|TIME|DATETIME},\n          {'EUR'|'USA'|'JIS'|'ISO'|'INTERNAL'}),Date and Time Functions"
    },
    {
      "index": 25,
      "doc": "DATE_FORMAT(date,format),Date and Time Functions"
    },
    {
      "index": 57,
      "doc": "TIME_FORMAT(time,format),Date and Time Functions"
    },
    {
      "index": 52,
      "doc": "STR_TO_DATE(str,format),Date and Time Functions"
    }
  ]
}
{
  "index": 115,
  "doc": "GET_LOCK(str,timeout)\n,Miscellaneous Functions",
  "mapping docs": [
    {
      "index": 136,
      "doc": "GET_LOCK(str,timeout),Locking Functions"
    },
    {
      "index": 139,
      "doc": "RELEASE_LOCK(str),Locking Functions"
    },
    {
      "index": 138,
      "doc": "IS_USED_LOCK(str),Locking Functions"
    },
    {
      "index": 140,
      "doc": "RELEASE_ALL_LOCKS(),Locking Functions"
    }
  ]
}
{
  "index": 116,
  "doc": "GLength(ls)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 155,
      "doc": "LN(X),Mathematical Functions"
    },
    {
      "index": 159,
      "doc": "MOD(N,M),Mathematical Functions"
    },
    {
      "index": 145,
      "doc": "ATAN(Y,X),Mathematical Functions"
    },
    {
      "index": 163,
      "doc": "RADIANS(X),Mathematical Functions"
    }
  ]
}
{
  "index": 117,
  "doc": "GROUP_CONCAT(expr)\n,Aggregate Functions",
  "mapping docs": [
    {
      "index": 6,
      "doc": "GROUP_CONCAT(expr),Aggregate Functions"
    },
    {
      "index": 2,
      "doc": "SUM([DISTINCT]\n            expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 1,
      "doc": "COUNT(DISTINCT\n            expr,[expr...]),Aggregate Functions"
    },
    {
      "index": 0,
      "doc": "COUNT(expr)\n            [over_clause],Aggregate Functions"
    }
  ]
}
{
  "index": 118,
  "doc": "HEX(N_or_S)\n,String Functions",
  "mapping docs": [
    {
      "index": 207,
      "doc": "HEX(),String Functions"
    },
    {
      "index": 224,
      "doc": "ORD(),String Functions"
    },
    {
      "index": 248,
      "doc": "UNHEX(),String Functions"
    },
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    }
  ]
}
{
  "index": 119,
  "doc": "HOUR(time)\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 37,
      "doc": "HOUR(time),Date and Time Functions"
    },
    {
      "index": 43,
      "doc": "MINUTE(time),Date and Time Functions"
    },
    {
      "index": 41,
      "doc": "MAKETIME(hour,minute,second),Date and Time Functions"
    },
    {
      "index": 57,
      "doc": "TIME_FORMAT(time,format),Date and Time Functions"
    }
  ]
}
{
  "index": 120,
  "doc": "IF(expr1,expr2,expr3)\n,Control Flow Functions",
  "mapping docs": [
    {
      "index": 88,
      "doc": "IF(),Flow Control Functions"
    },
    {
      "index": 89,
      "doc": "IFNULL(),Flow Control Functions"
    },
    {
      "index": 87,
      "doc": "CASE,Flow Control Functions"
    },
    {
      "index": 90,
      "doc": "NULLIF(),Flow Control Functions"
    }
  ]
}
{
  "index": 121,
  "doc": "IFNULL(expr1,expr2)\nNVL(expr1,expr2)\n,Control Flow Functions",
  "mapping docs": [
    {
      "index": 89,
      "doc": "IFNULL(),Flow Control Functions"
    },
    {
      "index": 88,
      "doc": "IF(),Flow Control Functions"
    },
    {
      "index": 90,
      "doc": "NULLIF(),Flow Control Functions"
    },
    {
      "index": 87,
      "doc": "CASE,Flow Control Functions"
    }
  ]
}
{
  "index": 122,
  "doc": "INET6_ATON(expr)\n,Miscellaneous Functions",
  "mapping docs": [
    {
      "index": 177,
      "doc": "INET6_ATON(),Miscellaneous Functions"
    },
    {
      "index": 175,
      "doc": "INET_ATON(),Miscellaneous Functions"
    },
    {
      "index": 178,
      "doc": "INET6_NTOA(),Miscellaneous Functions"
    },
    {
      "index": 176,
      "doc": "INET_NTOA(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 123,
  "doc": "INET6_NTOA(expr)\n,Miscellaneous Functions",
  "mapping docs": [
    {
      "index": 178,
      "doc": "INET6_NTOA(),Miscellaneous Functions"
    },
    {
      "index": 176,
      "doc": "INET_NTOA(),Miscellaneous Functions"
    },
    {
      "index": 177,
      "doc": "INET6_ATON(),Miscellaneous Functions"
    },
    {
      "index": 273,
      "doc": "NTILE(),Window Functions"
    }
  ]
}
{
  "index": 124,
  "doc": "INET_ATON(expr)\n,Miscellaneous Functions",
  "mapping docs": [
    {
      "index": 175,
      "doc": "INET_ATON(),Miscellaneous Functions"
    },
    {
      "index": 177,
      "doc": "INET6_ATON(),Miscellaneous Functions"
    },
    {
      "index": 143,
      "doc": "ASIN(X),Mathematical Functions"
    },
    {
      "index": 176,
      "doc": "INET_NTOA(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 125,
  "doc": "INET_NTOA(expr)\n,Miscellaneous Functions",
  "mapping docs": [
    {
      "index": 178,
      "doc": "INET6_NTOA(),Miscellaneous Functions"
    },
    {
      "index": 176,
      "doc": "INET_NTOA(),Miscellaneous Functions"
    },
    {
      "index": 177,
      "doc": "INET6_ATON(),Miscellaneous Functions"
    },
    {
      "index": 273,
      "doc": "NTILE(),Window Functions"
    }
  ]
}
{
  "index": 126,
  "doc": "INSERT(str,pos,len,newstr)\n,String Functions",
  "mapping docs": [
    {
      "index": 208,
      "doc": "INSERT(),String Functions"
    },
    {
      "index": 209,
      "doc": "INSTR(),String Functions"
    },
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 196,
      "doc": "CHAR(),String Functions"
    }
  ]
}
{
  "index": 127,
  "doc": "INSTR(str,substr)\n,String Functions",
  "mapping docs": [
    {
      "index": 209,
      "doc": "INSTR(),String Functions"
    },
    {
      "index": 241,
      "doc": "SUBSTR(),String Functions"
    },
    {
      "index": 228,
      "doc": "REGEXP_INSTR(),String Functions"
    },
    {
      "index": 242,
      "doc": "SUBSTRING(),String Functions"
    }
  ]
}
{
  "index": 128,
  "doc": "INTERSECTS(g1,g2)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 145,
      "doc": "ATAN(Y,X),Mathematical Functions"
    },
    {
      "index": 161,
      "doc": "POW(X,Y),Mathematical Functions"
    },
    {
      "index": 141,
      "doc": "ABS(X),Mathematical Functions"
    },
    {
      "index": 162,
      "doc": "POWER(X,Y),Mathematical Functions"
    }
  ]
}
{
  "index": 129,
  "doc": ",No Category",
  "mapping docs": [
    {
      "index": 184,
      "doc": "NAME_CONST(),Miscellaneous Functions"
    },
    {
      "index": 178,
      "doc": "INET6_NTOA(),Miscellaneous Functions"
    },
    {
      "index": 173,
      "doc": "DEFAULT(),Miscellaneous Functions"
    },
    {
      "index": 176,
      "doc": "INET_NTOA(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 130,
  "doc": ",No Category",
  "mapping docs": [
    {
      "index": 184,
      "doc": "NAME_CONST(),Miscellaneous Functions"
    },
    {
      "index": 178,
      "doc": "INET6_NTOA(),Miscellaneous Functions"
    },
    {
      "index": 173,
      "doc": "DEFAULT(),Miscellaneous Functions"
    },
    {
      "index": 176,
      "doc": "INET_NTOA(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 131,
  "doc": ",No Category",
  "mapping docs": [
    {
      "index": 184,
      "doc": "NAME_CONST(),Miscellaneous Functions"
    },
    {
      "index": 178,
      "doc": "INET6_NTOA(),Miscellaneous Functions"
    },
    {
      "index": 173,
      "doc": "DEFAULT(),Miscellaneous Functions"
    },
    {
      "index": 176,
      "doc": "INET_NTOA(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 132,
  "doc": "IS_FREE_LOCK(str)\n,Miscellaneous Functions",
  "mapping docs": [
    {
      "index": 137,
      "doc": "IS_FREE_LOCK(str),Locking Functions"
    },
    {
      "index": 138,
      "doc": "IS_USED_LOCK(str),Locking Functions"
    },
    {
      "index": 139,
      "doc": "RELEASE_LOCK(str),Locking Functions"
    },
    {
      "index": 140,
      "doc": "RELEASE_ALL_LOCKS(),Locking Functions"
    }
  ]
}
{
  "index": 133,
  "doc": "IS_IPV4(expr)\n,Miscellaneous Functions",
  "mapping docs": [
    {
      "index": 179,
      "doc": "IS_IPV4(),Miscellaneous Functions"
    },
    {
      "index": 180,
      "doc": "IS_IPV4_COMPAT(),Miscellaneous Functions"
    },
    {
      "index": 182,
      "doc": "IS_IPV6(),Miscellaneous Functions"
    },
    {
      "index": 181,
      "doc": "IS_IPV4_MAPPED(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 134,
  "doc": "IS_IPV4_COMPAT(expr)\n,Miscellaneous Functions",
  "mapping docs": [
    {
      "index": 180,
      "doc": "IS_IPV4_COMPAT(),Miscellaneous Functions"
    },
    {
      "index": 179,
      "doc": "IS_IPV4(),Miscellaneous Functions"
    },
    {
      "index": 181,
      "doc": "IS_IPV4_MAPPED(),Miscellaneous Functions"
    },
    {
      "index": 182,
      "doc": "IS_IPV6(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 135,
  "doc": "IS_IPV4_MAPPED(expr)\n,Miscellaneous Functions",
  "mapping docs": [
    {
      "index": 181,
      "doc": "IS_IPV4_MAPPED(),Miscellaneous Functions"
    },
    {
      "index": 179,
      "doc": "IS_IPV4(),Miscellaneous Functions"
    },
    {
      "index": 180,
      "doc": "IS_IPV4_COMPAT(),Miscellaneous Functions"
    },
    {
      "index": 182,
      "doc": "IS_IPV6(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 136,
  "doc": "IS_IPV6(expr)\n,Miscellaneous Functions",
  "mapping docs": [
    {
      "index": 182,
      "doc": "IS_IPV6(),Miscellaneous Functions"
    },
    {
      "index": 179,
      "doc": "IS_IPV4(),Miscellaneous Functions"
    },
    {
      "index": 180,
      "doc": "IS_IPV4_COMPAT(),Miscellaneous Functions"
    },
    {
      "index": 181,
      "doc": "IS_IPV4_MAPPED(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 137,
  "doc": "IS_USED_LOCK(str)\n,Miscellaneous Functions",
  "mapping docs": [
    {
      "index": 138,
      "doc": "IS_USED_LOCK(str),Locking Functions"
    },
    {
      "index": 137,
      "doc": "IS_FREE_LOCK(str),Locking Functions"
    },
    {
      "index": 139,
      "doc": "RELEASE_LOCK(str),Locking Functions"
    },
    {
      "index": 140,
      "doc": "RELEASE_ALL_LOCKS(),Locking Functions"
    }
  ]
}
{
  "index": 138,
  "doc": "JSON_ARRAY([value[, value2] ...])\n,JSON Functions",
  "mapping docs": [
    {
      "index": 104,
      "doc": "JSON_ARRAY(),JSON Functions"
    },
    {
      "index": 134,
      "doc": "JSON_ARRAYAGG(),JSON Functions"
    },
    {
      "index": 117,
      "doc": "JSON_ARRAY_APPEND(),JSON Functions"
    },
    {
      "index": 112,
      "doc": "JSON_KEYS(),JSON Functions"
    }
  ]
}
{
  "index": 139,
  "doc": "JSON_ARRAY_APPEND(json_doc, path, value[, path, value] ...)\n,JSON Functions",
  "mapping docs": [
    {
      "index": 117,
      "doc": "JSON_ARRAY_APPEND(),JSON Functions"
    },
    {
      "index": 116,
      "doc": "JSON_APPEND(),JSON Functions"
    },
    {
      "index": 104,
      "doc": "JSON_ARRAY(),JSON Functions"
    },
    {
      "index": 118,
      "doc": "JSON_ARRAY_INSERT(),JSON Functions"
    }
  ]
}
{
  "index": 140,
  "doc": "JSON_ARRAY_INSERT(json_doc, path, value[, path, value] ...)\n,JSON Functions",
  "mapping docs": [
    {
      "index": 118,
      "doc": "JSON_ARRAY_INSERT(),JSON Functions"
    },
    {
      "index": 119,
      "doc": "JSON_INSERT(),JSON Functions"
    },
    {
      "index": 104,
      "doc": "JSON_ARRAY(),JSON Functions"
    },
    {
      "index": 117,
      "doc": "JSON_ARRAY_APPEND(),JSON Functions"
    }
  ]
}
{
  "index": 141,
  "doc": "JSON_ARRAY_INTERSECT(arr1, arr2)\n,JSON Functions",
  "mapping docs": [
    {
      "index": 115,
      "doc": "JSON_OVERLAPS(),JSON Functions"
    },
    {
      "index": 134,
      "doc": "JSON_ARRAYAGG(),JSON Functions"
    },
    {
      "index": 104,
      "doc": "JSON_ARRAY(),JSON Functions"
    },
    {
      "index": 122,
      "doc": "JSON_MERGE(),JSON Functions"
    }
  ]
}
{
  "index": 142,
  "doc": "JSON_COMPACT(json_doc)\n,JSON Functions",
  "mapping docs": [
    {
      "index": 129,
      "doc": "JSON_TYPE(),JSON Functions"
    },
    {
      "index": 132,
      "doc": "JSON_STORAGE_FREE(),JSON Functions"
    },
    {
      "index": 104,
      "doc": "JSON_ARRAY(),JSON Functions"
    },
    {
      "index": 105,
      "doc": "JSON_OBJECT(),JSON Functions"
    }
  ]
}
{
  "index": 143,
  "doc": "JSON_CONTAINS(json_doc, val[, path])\n,JSON Functions",
  "mapping docs": [
    {
      "index": 108,
      "doc": "JSON_CONTAINS_PATH(),JSON Functions"
    },
    {
      "index": 107,
      "doc": "JSON_CONTAINS(),JSON Functions"
    },
    {
      "index": 113,
      "doc": "JSON_SEARCH(),JSON Functions"
    },
    {
      "index": 127,
      "doc": "JSON_DEPTH(),JSON Functions"
    }
  ]
}
{
  "index": 144,
  "doc": "JSON_CONTAINS_PATH(json_doc, return_arg, path[, path] ...)\n,JSON Functions",
  "mapping docs": [
    {
      "index": 108,
      "doc": "JSON_CONTAINS_PATH(),JSON Functions"
    },
    {
      "index": 107,
      "doc": "JSON_CONTAINS(),JSON Functions"
    },
    {
      "index": 113,
      "doc": "JSON_SEARCH(),JSON Functions"
    },
    {
      "index": 127,
      "doc": "JSON_DEPTH(),JSON Functions"
    }
  ]
}
{
  "index": 145,
  "doc": "JSON_DEPTH(json_doc)\n,JSON Functions",
  "mapping docs": [
    {
      "index": 127,
      "doc": "JSON_DEPTH(),JSON Functions"
    },
    {
      "index": 109,
      "doc": "JSON_EXTRACT(),JSON Functions"
    },
    {
      "index": 105,
      "doc": "JSON_OBJECT(),JSON Functions"
    },
    {
      "index": 104,
      "doc": "JSON_ARRAY(),JSON Functions"
    }
  ]
}
{
  "index": 146,
  "doc": "JSON_DETAILED(json_doc[, tab_size])\nJSON_PRETTY(json_doc[, tab_size])\n,JSON Functions",
  "mapping docs": [
    {
      "index": 131,
      "doc": "JSON_PRETTY(),JSON Functions"
    },
    {
      "index": 104,
      "doc": "JSON_ARRAY(),JSON Functions"
    },
    {
      "index": 133,
      "doc": "JSON_STORAGE_SIZE(),JSON Functions"
    },
    {
      "index": 129,
      "doc": "JSON_TYPE(),JSON Functions"
    }
  ]
}
{
  "index": 147,
  "doc": "JSON_EQUALS(json1, json2)\n,JSON Functions",
  "mapping docs": [
    {
      "index": 115,
      "doc": "JSON_OVERLAPS(),JSON Functions"
    },
    {
      "index": 107,
      "doc": "JSON_CONTAINS(),JSON Functions"
    },
    {
      "index": 122,
      "doc": "JSON_MERGE(),JSON Functions"
    },
    {
      "index": 125,
      "doc": "JSON_SET(),JSON Functions"
    }
  ]
}
{
  "index": 148,
  "doc": ",JSON Functions",
  "mapping docs": [
    {
      "index": 111,
      "doc": "->>,JSON Functions"
    },
    {
      "index": 105,
      "doc": "JSON_OBJECT(),JSON Functions"
    },
    {
      "index": 104,
      "doc": "JSON_ARRAY(),JSON Functions"
    },
    {
      "index": 110,
      "doc": "->,JSON Functions"
    }
  ]
}
{
  "index": 149,
  "doc": "JSON_EXTRACT(json_doc, path[, path] ...)\n,JSON Functions",
  "mapping docs": [
    {
      "index": 109,
      "doc": "JSON_EXTRACT(),JSON Functions"
    },
    {
      "index": 106,
      "doc": "JSON_QUOTE(),JSON Functions"
    },
    {
      "index": 126,
      "doc": "JSON_UNQUOTE(),JSON Functions"
    },
    {
      "index": 113,
      "doc": "JSON_SEARCH(),JSON Functions"
    }
  ]
}
{
  "index": 150,
  "doc": "JSON_INSERT(json_doc, path, val[, path, val] ...)\n,JSON Functions",
  "mapping docs": [
    {
      "index": 119,
      "doc": "JSON_INSERT(),JSON Functions"
    },
    {
      "index": 118,
      "doc": "JSON_ARRAY_INSERT(),JSON Functions"
    },
    {
      "index": 116,
      "doc": "JSON_APPEND(),JSON Functions"
    },
    {
      "index": 104,
      "doc": "JSON_ARRAY(),JSON Functions"
    }
  ]
}
{
  "index": 151,
  "doc": "JSON_KEYS(json_doc[, path])\n,JSON Functions",
  "mapping docs": [
    {
      "index": 112,
      "doc": "JSON_KEYS(),JSON Functions"
    },
    {
      "index": 106,
      "doc": "JSON_QUOTE(),JSON Functions"
    },
    {
      "index": 104,
      "doc": "JSON_ARRAY(),JSON Functions"
    },
    {
      "index": 125,
      "doc": "JSON_SET(),JSON Functions"
    }
  ]
}
{
  "index": 152,
  "doc": "JSON_LENGTH(json_doc[, path])\n,JSON Functions",
  "mapping docs": [
    {
      "index": 128,
      "doc": "JSON_LENGTH(),JSON Functions"
    },
    {
      "index": 133,
      "doc": "JSON_STORAGE_SIZE(),JSON Functions"
    },
    {
      "index": 127,
      "doc": "JSON_DEPTH(),JSON Functions"
    },
    {
      "index": 106,
      "doc": "JSON_QUOTE(),JSON Functions"
    }
  ]
}
{
  "index": 153,
  "doc": "JSON_LOOSE(json_doc)\n,JSON Functions",
  "mapping docs": [
    {
      "index": 127,
      "doc": "JSON_DEPTH(),JSON Functions"
    },
    {
      "index": 126,
      "doc": "JSON_UNQUOTE(),JSON Functions"
    },
    {
      "index": 125,
      "doc": "JSON_SET(),JSON Functions"
    },
    {
      "index": 132,
      "doc": "JSON_STORAGE_FREE(),JSON Functions"
    }
  ]
}
{
  "index": 154,
  "doc": "JSON_MERGE(json_doc, json_doc[, json_doc] ...)\n,JSON Functions",
  "mapping docs": [
    {
      "index": 122,
      "doc": "JSON_MERGE(),JSON Functions"
    },
    {
      "index": 121,
      "doc": "JSON_MERGE_PRESERVE(),JSON Functions"
    },
    {
      "index": 120,
      "doc": "JSON_MERGE_PATCH(),JSON Functions"
    },
    {
      "index": 115,
      "doc": "JSON_OVERLAPS(),JSON Functions"
    }
  ]
}
{
  "index": 155,
  "doc": "JSON_NORMALIZE(json)\n,JSON Functions",
  "mapping docs": [
    {
      "index": 104,
      "doc": "JSON_ARRAY(),JSON Functions"
    },
    {
      "index": 122,
      "doc": "JSON_MERGE(),JSON Functions"
    },
    {
      "index": 125,
      "doc": "JSON_SET(),JSON Functions"
    },
    {
      "index": 129,
      "doc": "JSON_TYPE(),JSON Functions"
    }
  ]
}
{
  "index": 156,
  "doc": "JSON_OBJECT([key, value[, key, value] ...])\n,JSON Functions",
  "mapping docs": [
    {
      "index": 112,
      "doc": "JSON_KEYS(),JSON Functions"
    },
    {
      "index": 105,
      "doc": "JSON_OBJECT(),JSON Functions"
    },
    {
      "index": 104,
      "doc": "JSON_ARRAY(),JSON Functions"
    },
    {
      "index": 125,
      "doc": "JSON_SET(),JSON Functions"
    }
  ]
}
{
  "index": 157,
  "doc": "JSON_OBJECTAGG(key, value)\n,JSON Functions",
  "mapping docs": [
    {
      "index": 135,
      "doc": "JSON_OBJECTAGG(),JSON Functions"
    },
    {
      "index": 134,
      "doc": "JSON_ARRAYAGG(),JSON Functions"
    },
    {
      "index": 105,
      "doc": "JSON_OBJECT(),JSON Functions"
    },
    {
      "index": 112,
      "doc": "JSON_KEYS(),JSON Functions"
    }
  ]
}
{
  "index": 158,
  "doc": "JSON_OBJECT_FILTER_KEYS(obj, array_keys)\n,JSON Functions",
  "mapping docs": [
    {
      "index": 112,
      "doc": "JSON_KEYS(),JSON Functions"
    },
    {
      "index": 104,
      "doc": "JSON_ARRAY(),JSON Functions"
    },
    {
      "index": 105,
      "doc": "JSON_OBJECT(),JSON Functions"
    },
    {
      "index": 134,
      "doc": "JSON_ARRAYAGG(),JSON Functions"
    }
  ]
}
{
  "index": 159,
  "doc": "JSON_OBJECT_TO_ARRAY(Obj)\n,JSON Functions",
  "mapping docs": [
    {
      "index": 104,
      "doc": "JSON_ARRAY(),JSON Functions"
    },
    {
      "index": 105,
      "doc": "JSON_OBJECT(),JSON Functions"
    },
    {
      "index": 134,
      "doc": "JSON_ARRAYAGG(),JSON Functions"
    },
    {
      "index": 135,
      "doc": "JSON_OBJECTAGG(),JSON Functions"
    }
  ]
}
{
  "index": 160,
  "doc": "JSON_OVERLAPS(json_doc1, json_doc2)\n,JSON Functions",
  "mapping docs": [
    {
      "index": 115,
      "doc": "JSON_OVERLAPS(),JSON Functions"
    },
    {
      "index": 122,
      "doc": "JSON_MERGE(),JSON Functions"
    },
    {
      "index": 120,
      "doc": "JSON_MERGE_PATCH(),JSON Functions"
    },
    {
      "index": 121,
      "doc": "JSON_MERGE_PRESERVE(),JSON Functions"
    }
  ]
}
{
  "index": 161,
  "doc": ",JSON Functions",
  "mapping docs": [
    {
      "index": 111,
      "doc": "->>,JSON Functions"
    },
    {
      "index": 105,
      "doc": "JSON_OBJECT(),JSON Functions"
    },
    {
      "index": 104,
      "doc": "JSON_ARRAY(),JSON Functions"
    },
    {
      "index": 110,
      "doc": "->,JSON Functions"
    }
  ]
}
{
  "index": 162,
  "doc": "JSON_QUERY(json_doc, path)\n,JSON Functions",
  "mapping docs": [
    {
      "index": 113,
      "doc": "JSON_SEARCH(),JSON Functions"
    },
    {
      "index": 106,
      "doc": "JSON_QUOTE(),JSON Functions"
    },
    {
      "index": 109,
      "doc": "JSON_EXTRACT(),JSON Functions"
    },
    {
      "index": 127,
      "doc": "JSON_DEPTH(),JSON Functions"
    }
  ]
}
{
  "index": 163,
  "doc": "JSON_QUOTE(json_value)\n,JSON Functions",
  "mapping docs": [
    {
      "index": 106,
      "doc": "JSON_QUOTE(),JSON Functions"
    },
    {
      "index": 126,
      "doc": "JSON_UNQUOTE(),JSON Functions"
    },
    {
      "index": 104,
      "doc": "JSON_ARRAY(),JSON Functions"
    },
    {
      "index": 125,
      "doc": "JSON_SET(),JSON Functions"
    }
  ]
}
{
  "index": 164,
  "doc": "JSON_REMOVE(json_doc, path[, path] ...)\n,JSON Functions",
  "mapping docs": [
    {
      "index": 123,
      "doc": "JSON_REMOVE(),JSON Functions"
    },
    {
      "index": 124,
      "doc": "JSON_REPLACE(),JSON Functions"
    },
    {
      "index": 109,
      "doc": "JSON_EXTRACT(),JSON Functions"
    },
    {
      "index": 104,
      "doc": "JSON_ARRAY(),JSON Functions"
    }
  ]
}
{
  "index": 165,
  "doc": "JSON_REPLACE(json_doc, path, val[, path, val] ...)\n,JSON Functions",
  "mapping docs": [
    {
      "index": 124,
      "doc": "JSON_REPLACE(),JSON Functions"
    },
    {
      "index": 123,
      "doc": "JSON_REMOVE(),JSON Functions"
    },
    {
      "index": 106,
      "doc": "JSON_QUOTE(),JSON Functions"
    },
    {
      "index": 104,
      "doc": "JSON_ARRAY(),JSON Functions"
    }
  ]
}
{
  "index": 166,
  "doc": ",JSON Functions",
  "mapping docs": [
    {
      "index": 111,
      "doc": "->>,JSON Functions"
    },
    {
      "index": 105,
      "doc": "JSON_OBJECT(),JSON Functions"
    },
    {
      "index": 104,
      "doc": "JSON_ARRAY(),JSON Functions"
    },
    {
      "index": 110,
      "doc": "->,JSON Functions"
    }
  ]
}
{
  "index": 167,
  "doc": "JSON_SEARCH(json_doc, return_arg, search_str[, escape_char[, path] ...])\n,JSON Functions",
  "mapping docs": [
    {
      "index": 113,
      "doc": "JSON_SEARCH(),JSON Functions"
    },
    {
      "index": 108,
      "doc": "JSON_CONTAINS_PATH(),JSON Functions"
    },
    {
      "index": 106,
      "doc": "JSON_QUOTE(),JSON Functions"
    },
    {
      "index": 126,
      "doc": "JSON_UNQUOTE(),JSON Functions"
    }
  ]
}
{
  "index": 168,
  "doc": "JSON_SET(json_doc, path, val[, path, val] ...)\n,JSON Functions",
  "mapping docs": [
    {
      "index": 125,
      "doc": "JSON_SET(),JSON Functions"
    },
    {
      "index": 104,
      "doc": "JSON_ARRAY(),JSON Functions"
    },
    {
      "index": 112,
      "doc": "JSON_KEYS(),JSON Functions"
    },
    {
      "index": 106,
      "doc": "JSON_QUOTE(),JSON Functions"
    }
  ]
}
{
  "index": 169,
  "doc": "JSON_TABLE(json_doc, \n          context_path COLUMNS (column_list)\n) [AS] alias\ncolumn_list:\n    column[, column][, ...]\ncolumn:\n    name FOR ORDINALITY\n    |  name type PATH path_str [on_empty] [on_error]\n    |  name type EXISTS PATH path_str\n    |  NESTED PATH path_str COLUMNS (column_list)\non_empty:\n    {NULL | DEFAULT string | ERROR} ON EMPTY\non_error:\n    {NULL | DEFAULT string | ERROR} ON ERROR\n,JSON Functions",
  "mapping docs": [
    {
      "index": 129,
      "doc": "JSON_TYPE(),JSON Functions"
    },
    {
      "index": 130,
      "doc": "JSON_VALID(),JSON Functions"
    },
    {
      "index": 104,
      "doc": "JSON_ARRAY(),JSON Functions"
    },
    {
      "index": 112,
      "doc": "JSON_KEYS(),JSON Functions"
    }
  ]
}
{
  "index": 170,
  "doc": "JSON_TYPE(json_val)\n,JSON Functions",
  "mapping docs": [
    {
      "index": 129,
      "doc": "JSON_TYPE(),JSON Functions"
    },
    {
      "index": 104,
      "doc": "JSON_ARRAY(),JSON Functions"
    },
    {
      "index": 130,
      "doc": "JSON_VALID(),JSON Functions"
    },
    {
      "index": 125,
      "doc": "JSON_SET(),JSON Functions"
    }
  ]
}
{
  "index": 171,
  "doc": "JSON_UNQUOTE(val)\n,JSON Functions",
  "mapping docs": [
    {
      "index": 126,
      "doc": "JSON_UNQUOTE(),JSON Functions"
    },
    {
      "index": 106,
      "doc": "JSON_QUOTE(),JSON Functions"
    },
    {
      "index": 104,
      "doc": "JSON_ARRAY(),JSON Functions"
    },
    {
      "index": 134,
      "doc": "JSON_ARRAYAGG(),JSON Functions"
    }
  ]
}
{
  "index": 172,
  "doc": "JSON_VALID(value)\n,JSON Functions",
  "mapping docs": [
    {
      "index": 130,
      "doc": "JSON_VALID(),JSON Functions"
    },
    {
      "index": 104,
      "doc": "JSON_ARRAY(),JSON Functions"
    },
    {
      "index": 129,
      "doc": "JSON_TYPE(),JSON Functions"
    },
    {
      "index": 105,
      "doc": "JSON_OBJECT(),JSON Functions"
    }
  ]
}
{
  "index": 173,
  "doc": "JSON_VALUE(json_doc, path)\n,JSON Functions",
  "mapping docs": [
    {
      "index": 106,
      "doc": "JSON_QUOTE(),JSON Functions"
    },
    {
      "index": 109,
      "doc": "JSON_EXTRACT(),JSON Functions"
    },
    {
      "index": 125,
      "doc": "JSON_SET(),JSON Functions"
    },
    {
      "index": 105,
      "doc": "JSON_OBJECT(),JSON Functions"
    }
  ]
}
{
  "index": 174,
  "doc": "KDF(key_str, salt [, {info | iterations} [, kdf_name [, width ]]])\n,Encryption, Hashing and Compression Functions",
  "mapping docs": [
    {
      "index": 74,
      "doc": "AES_DECRYPT(),Encryption and Compression Functions"
    },
    {
      "index": 76,
      "doc": "COMPRESS(),Encryption and Compression Functions"
    },
    {
      "index": 78,
      "doc": "PASSWORD(),Encryption and Compression Functions"
    },
    {
      "index": 80,
      "doc": "SHA(),Encryption and Compression Functions"
    }
  ]
}
{
  "index": 175,
  "doc": "LAST_DAY(date)\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 28,
      "doc": "DAY(date),Date and Time Functions"
    },
    {
      "index": 70,
      "doc": "WEEKDAY(date),Date and Time Functions"
    },
    {
      "index": 29,
      "doc": "DAYNAME(date),Date and Time Functions"
    },
    {
      "index": 23,
      "doc": "DATE(expr),Date and Time Functions"
    }
  ]
}
{
  "index": 176,
  "doc": "LAST_INSERT_ID(), LAST_INSERT_ID(expr)\n,Information Functions",
  "mapping docs": [
    {
      "index": 97,
      "doc": "LAST_INSERT_ID(),Information Functions"
    },
    {
      "index": 92,
      "doc": "CONNECTION_ID(),Information Functions"
    },
    {
      "index": 186,
      "doc": "UUID(),Miscellaneous Functions"
    },
    {
      "index": 95,
      "doc": "DATABASE(),Information Functions"
    }
  ]
}
{
  "index": 177,
  "doc": "LAST_VALUE(expr,[expr,...])\nLAST_VALUE(expr) OVER (\n  [ PARTITION BY partition_expression ]\n  [ ORDER BY order_list ]\n) \n,Information Functions",
  "mapping docs": [
    {
      "index": 4,
      "doc": "MAX([DISTINCT]\n            expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 192,
      "doc": "LASTVAL(),Sequence Functions"
    },
    {
      "index": 5,
      "doc": "MIN([DISTINCT]\n            expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    }
  ]
}
{
  "index": 178,
  "doc": "LCASE(str)\n,String Functions",
  "mapping docs": [
    {
      "index": 210,
      "doc": "LCASE(),String Functions"
    },
    {
      "index": 247,
      "doc": "UCASE(),String Functions"
    },
    {
      "index": 241,
      "doc": "SUBSTR(),String Functions"
    },
    {
      "index": 196,
      "doc": "CHAR(),String Functions"
    }
  ]
}
{
  "index": 179,
  "doc": "LEFT(str,len)\n,String Functions",
  "mapping docs": [
    {
      "index": 211,
      "doc": "LEFT(),String Functions"
    },
    {
      "index": 235,
      "doc": "RIGHT(),String Functions"
    },
    {
      "index": 197,
      "doc": "CHAR_LENGTH(),String Functions"
    },
    {
      "index": 196,
      "doc": "CHAR(),String Functions"
    }
  ]
}
{
  "index": 180,
  "doc": "LENGTH(str)\n,String Functions",
  "mapping docs": [
    {
      "index": 197,
      "doc": "CHAR_LENGTH(),String Functions"
    },
    {
      "index": 212,
      "doc": "LENGTH(),String Functions"
    },
    {
      "index": 223,
      "doc": "OCTET_LENGTH(),String Functions"
    },
    {
      "index": 198,
      "doc": "CHARACTER_LENGTH(),String Functions"
    }
  ]
}
{
  "index": 181,
  "doc": "expr LIKE pat [ESCAPE 'escape_char']\nexpr NOT LIKE pat [ESCAPE 'escape_char']\n,String Functions",
  "mapping docs": [
    {
      "index": 196,
      "doc": "CHAR(),String Functions"
    },
    {
      "index": 229,
      "doc": "REGEXP_LIKE(),String Functions"
    },
    {
      "index": 193,
      "doc": "ASCII(),String Functions"
    },
    {
      "index": 228,
      "doc": "REGEXP_INSTR(),String Functions"
    }
  ]
}
{
  "index": 182,
  "doc": "LineString(pt1,pt2,...)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 209,
      "doc": "INSTR(),String Functions"
    },
    {
      "index": 225,
      "doc": "POSITION(),String Functions"
    },
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 222,
      "doc": "OCT(),String Functions"
    }
  ]
}
{
  "index": 183,
  "doc": ",No Category",
  "mapping docs": [
    {
      "index": 184,
      "doc": "NAME_CONST(),Miscellaneous Functions"
    },
    {
      "index": 178,
      "doc": "INET6_NTOA(),Miscellaneous Functions"
    },
    {
      "index": 173,
      "doc": "DEFAULT(),Miscellaneous Functions"
    },
    {
      "index": 176,
      "doc": "INET_NTOA(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 184,
  "doc": ",No Category",
  "mapping docs": [
    {
      "index": 184,
      "doc": "NAME_CONST(),Miscellaneous Functions"
    },
    {
      "index": 178,
      "doc": "INET6_NTOA(),Miscellaneous Functions"
    },
    {
      "index": 173,
      "doc": "DEFAULT(),Miscellaneous Functions"
    },
    {
      "index": 176,
      "doc": "INET_NTOA(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 185,
  "doc": "sys.list_add(list,value)\n,No Category",
  "mapping docs": [
    {
      "index": 171,
      "doc": "ANY_VALUE(),Miscellaneous Functions"
    },
    {
      "index": 218,
      "doc": "MAKE_SET(),String Functions"
    },
    {
      "index": 188,
      "doc": "VALUES(),Miscellaneous Functions"
    },
    {
      "index": 96,
      "doc": "FOUND_ROWS(),Information Functions"
    }
  ]
}
{
  "index": 186,
  "doc": "sys.list_drop(list,value)\n,No Category",
  "mapping docs": [
    {
      "index": 171,
      "doc": "ANY_VALUE(),Miscellaneous Functions"
    },
    {
      "index": 188,
      "doc": "VALUES(),Miscellaneous Functions"
    },
    {
      "index": 202,
      "doc": "EXPORT_SET(),String Functions"
    },
    {
      "index": 96,
      "doc": "FOUND_ROWS(),Information Functions"
    }
  ]
}
{
  "index": 187,
  "doc": "LN(X)\n,Numeric Functions",
  "mapping docs": [
    {
      "index": 155,
      "doc": "LN(X),Mathematical Functions"
    },
    {
      "index": 157,
      "doc": "LOG10(X),Mathematical Functions"
    },
    {
      "index": 156,
      "doc": "LOG(X),Mathematical Functions"
    },
    {
      "index": 158,
      "doc": "LOG2(X),Mathematical Functions"
    }
  ]
}
{
  "index": 188,
  "doc": "LOAD_FILE(file_name)\n,String Functions",
  "mapping docs": [
    {
      "index": 250,
      "doc": "WEIGHT_STRING(),String Functions"
    },
    {
      "index": 200,
      "doc": "CONCAT_WS(),String Functions"
    },
    {
      "index": 194,
      "doc": "BIN(),String Functions"
    },
    {
      "index": 242,
      "doc": "SUBSTRING(),String Functions"
    }
  ]
}
{
  "index": 189,
  "doc": "LOCALTIME\nLOCALTIME([precision])\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 38,
      "doc": "LOCALTIME,Date and Time Functions"
    },
    {
      "index": 39,
      "doc": "LOCALTIMESTAMP,Date and Time Functions"
    },
    {
      "index": 42,
      "doc": "MICROSECOND(expr),Date and Time Functions"
    },
    {
      "index": 66,
      "doc": "UTC_DATE,Date and Time Functions"
    }
  ]
}
{
  "index": 190,
  "doc": "LOCALTIMESTAMP\nLOCALTIMESTAMP([precision])\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 39,
      "doc": "LOCALTIMESTAMP,Date and Time Functions"
    },
    {
      "index": 38,
      "doc": "LOCALTIME,Date and Time Functions"
    },
    {
      "index": 66,
      "doc": "UTC_DATE,Date and Time Functions"
    },
    {
      "index": 68,
      "doc": "UTC_TIMESTAMP,Date and Time Functions"
    }
  ]
}
{
  "index": 191,
  "doc": "LOCATE(substr,str), LOCATE(substr,str,pos)\n,String Functions",
  "mapping docs": [
    {
      "index": 214,
      "doc": "LOCATE(),String Functions"
    },
    {
      "index": 231,
      "doc": "REGEXP_SUBSTR(),String Functions"
    },
    {
      "index": 241,
      "doc": "SUBSTR(),String Functions"
    },
    {
      "index": 243,
      "doc": "SUBSTRING_INDEX(),String Functions"
    }
  ]
}
{
  "index": 192,
  "doc": "LOG(X), LOG(B,X)\n,Numeric Functions",
  "mapping docs": [
    {
      "index": 156,
      "doc": "LOG(X),Mathematical Functions"
    },
    {
      "index": 158,
      "doc": "LOG2(X),Mathematical Functions"
    },
    {
      "index": 157,
      "doc": "LOG10(X),Mathematical Functions"
    },
    {
      "index": 155,
      "doc": "LN(X),Mathematical Functions"
    }
  ]
}
{
  "index": 193,
  "doc": "LOG10(X)\n,Numeric Functions",
  "mapping docs": [
    {
      "index": 157,
      "doc": "LOG10(X),Mathematical Functions"
    },
    {
      "index": 156,
      "doc": "LOG(X),Mathematical Functions"
    },
    {
      "index": 158,
      "doc": "LOG2(X),Mathematical Functions"
    },
    {
      "index": 155,
      "doc": "LN(X),Mathematical Functions"
    }
  ]
}
{
  "index": 194,
  "doc": "LOG2(X)\n,Numeric Functions",
  "mapping docs": [
    {
      "index": 158,
      "doc": "LOG2(X),Mathematical Functions"
    },
    {
      "index": 156,
      "doc": "LOG(X),Mathematical Functions"
    },
    {
      "index": 157,
      "doc": "LOG10(X),Mathematical Functions"
    },
    {
      "index": 155,
      "doc": "LN(X),Mathematical Functions"
    }
  ]
}
{
  "index": 195,
  "doc": "LOWER(str)\nLCASE(str)\n,String Functions",
  "mapping docs": [
    {
      "index": 210,
      "doc": "LCASE(),String Functions"
    },
    {
      "index": 215,
      "doc": "LOWER(),String Functions"
    },
    {
      "index": 247,
      "doc": "UCASE(),String Functions"
    },
    {
      "index": 241,
      "doc": "SUBSTR(),String Functions"
    }
  ]
}
{
  "index": 196,
  "doc": "LPAD(str, len [,padstr])\n,String Functions",
  "mapping docs": [
    {
      "index": 216,
      "doc": "LPAD(),String Functions"
    },
    {
      "index": 223,
      "doc": "OCTET_LENGTH(),String Functions"
    },
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 197,
      "doc": "CHAR_LENGTH(),String Functions"
    }
  ]
}
{
  "index": 197,
  "doc": "LTRIM(str)\n,String Functions",
  "mapping docs": [
    {
      "index": 217,
      "doc": "LTRIM(),String Functions"
    },
    {
      "index": 238,
      "doc": "RTRIM(),String Functions"
    },
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 196,
      "doc": "CHAR(),String Functions"
    }
  ]
}
{
  "index": 198,
  "doc": "MAKEDATE(year,dayofyear)\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 40,
      "doc": "MAKEDATE(year,dayofyear),Date and Time Functions"
    },
    {
      "index": 32,
      "doc": "DAYOFYEAR(date),Date and Time Functions"
    },
    {
      "index": 72,
      "doc": "YEAR(date),Date and Time Functions"
    },
    {
      "index": 29,
      "doc": "DAYNAME(date),Date and Time Functions"
    }
  ]
}
{
  "index": 199,
  "doc": "MAKETIME(hour,minute,second)\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 41,
      "doc": "MAKETIME(hour,minute,second),Date and Time Functions"
    },
    {
      "index": 43,
      "doc": "MINUTE(time),Date and Time Functions"
    },
    {
      "index": 37,
      "doc": "HOUR(time),Date and Time Functions"
    },
    {
      "index": 57,
      "doc": "TIME_FORMAT(time,format),Date and Time Functions"
    }
  ]
}
{
  "index": 200,
  "doc": "MAKE_SET(bits,str1,str2,...)\n,String Functions",
  "mapping docs": [
    {
      "index": 218,
      "doc": "MAKE_SET(),String Functions"
    },
    {
      "index": 195,
      "doc": "BIT_LENGTH(),String Functions"
    },
    {
      "index": 11,
      "doc": "BIT_COUNT(),Bit Functions"
    },
    {
      "index": 202,
      "doc": "EXPORT_SET(),String Functions"
    }
  ]
}
{
  "index": 201,
  "doc": "MASTER_GTID_WAIT(gtid-list[, timeout)\n,Miscellaneous Functions",
  "mapping docs": [
    {
      "index": 136,
      "doc": "GET_LOCK(str,timeout),Locking Functions"
    },
    {
      "index": 185,
      "doc": "SLEEP(),Miscellaneous Functions"
    },
    {
      "index": 252,
      "doc": "TIDB_BOUNDED_STALENESS,TiDB Specific Functions"
    },
    {
      "index": 140,
      "doc": "RELEASE_ALL_LOCKS(),Locking Functions"
    }
  ]
}
{
  "index": 202,
  "doc": "MASTER_POS_WAIT(log_name,log_pos[,timeout,[\"connection_name\"]])\n,Miscellaneous Functions",
  "mapping docs": [
    {
      "index": 136,
      "doc": "GET_LOCK(str,timeout),Locking Functions"
    },
    {
      "index": 185,
      "doc": "SLEEP(),Miscellaneous Functions"
    },
    {
      "index": 140,
      "doc": "RELEASE_ALL_LOCKS(),Locking Functions"
    },
    {
      "index": 139,
      "doc": "RELEASE_LOCK(str),Locking Functions"
    }
  ]
}
{
  "index": 203,
  "doc": "MATCH (col1,col2,...) AGAINST (expr [search_modifier])\n,String Functions",
  "mapping docs": [
    {
      "index": 231,
      "doc": "REGEXP_SUBSTR(),String Functions"
    },
    {
      "index": 229,
      "doc": "REGEXP_LIKE(),String Functions"
    },
    {
      "index": 227,
      "doc": "REGEXP,String Functions"
    },
    {
      "index": 228,
      "doc": "REGEXP_INSTR(),String Functions"
    }
  ]
}
{
  "index": 204,
  "doc": "MAX([DISTINCT] expr)\n,Aggregate Functions",
  "mapping docs": [
    {
      "index": 4,
      "doc": "MAX([DISTINCT]\n            expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 5,
      "doc": "MIN([DISTINCT]\n            expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 2,
      "doc": "SUM([DISTINCT]\n            expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 3,
      "doc": "AVG([DISTINCT]\n            expr)\n            [over_clause],Aggregate Functions"
    }
  ]
}
{
  "index": 205,
  "doc": "MBRContains(g1,g2)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 162,
      "doc": "POWER(X,Y),Mathematical Functions"
    },
    {
      "index": 161,
      "doc": "POW(X,Y),Mathematical Functions"
    },
    {
      "index": 159,
      "doc": "MOD(N,M),Mathematical Functions"
    },
    {
      "index": 151,
      "doc": "CRC32(expr),Mathematical Functions"
    }
  ]
}
{
  "index": 206,
  "doc": "MBRDisjoint(g1,g2)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 160,
      "doc": "PI(),Mathematical Functions"
    },
    {
      "index": 162,
      "doc": "POWER(X,Y),Mathematical Functions"
    },
    {
      "index": 161,
      "doc": "POW(X,Y),Mathematical Functions"
    },
    {
      "index": 152,
      "doc": "DEGREES(X),Mathematical Functions"
    }
  ]
}
{
  "index": 207,
  "doc": "MBREqual(g1,g2)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 159,
      "doc": "MOD(N,M),Mathematical Functions"
    },
    {
      "index": 141,
      "doc": "ABS(X),Mathematical Functions"
    },
    {
      "index": 151,
      "doc": "CRC32(expr),Mathematical Functions"
    },
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    }
  ]
}
{
  "index": 208,
  "doc": "MBRIntersects(g1,g2)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 162,
      "doc": "POWER(X,Y),Mathematical Functions"
    },
    {
      "index": 145,
      "doc": "ATAN(Y,X),Mathematical Functions"
    },
    {
      "index": 159,
      "doc": "MOD(N,M),Mathematical Functions"
    },
    {
      "index": 151,
      "doc": "CRC32(expr),Mathematical Functions"
    }
  ]
}
{
  "index": 209,
  "doc": "MBROverlaps(g1,g2)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 159,
      "doc": "MOD(N,M),Mathematical Functions"
    },
    {
      "index": 158,
      "doc": "LOG2(X),Mathematical Functions"
    },
    {
      "index": 151,
      "doc": "CRC32(expr),Mathematical Functions"
    },
    {
      "index": 154,
      "doc": "FLOOR(X),Mathematical Functions"
    }
  ]
}
{
  "index": 210,
  "doc": "MBRTouches(g1,g2)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 162,
      "doc": "POWER(X,Y),Mathematical Functions"
    },
    {
      "index": 161,
      "doc": "POW(X,Y),Mathematical Functions"
    },
    {
      "index": 159,
      "doc": "MOD(N,M),Mathematical Functions"
    },
    {
      "index": 160,
      "doc": "PI(),Mathematical Functions"
    }
  ]
}
{
  "index": 211,
  "doc": "MBRWithin(g1,g2)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 11,
      "doc": "BIT_COUNT(),Bit Functions"
    },
    {
      "index": 162,
      "doc": "POWER(X,Y),Mathematical Functions"
    },
    {
      "index": 161,
      "doc": "POW(X,Y),Mathematical Functions"
    },
    {
      "index": 159,
      "doc": "MOD(N,M),Mathematical Functions"
    }
  ]
}
{
  "index": 212,
  "doc": "MD5(str)\n,Encryption, Hashing and Compression Functions",
  "mapping docs": [
    {
      "index": 77,
      "doc": "MD5(),Encryption and Compression Functions"
    },
    {
      "index": 81,
      "doc": "SHA1(),Encryption and Compression Functions"
    },
    {
      "index": 82,
      "doc": "SHA2(),Encryption and Compression Functions"
    },
    {
      "index": 80,
      "doc": "SHA(),Encryption and Compression Functions"
    }
  ]
}
{
  "index": 213,
  "doc": "MEDIAN(median expression) OVER (\n  [ PARTITION BY partition_expression ] \n)\n,Window Functions",
  "mapping docs": [
    {
      "index": 274,
      "doc": "PERCENT_RANK(),Window Functions"
    },
    {
      "index": 5,
      "doc": "MIN([DISTINCT]\n            expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 267,
      "doc": "DENSE_RANK(),Window Functions"
    },
    {
      "index": 266,
      "doc": "CUME_DIST(),Window Functions"
    }
  ]
}
{
  "index": 214,
  "doc": "MICROSECOND(expr)\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 42,
      "doc": "MICROSECOND(expr),Date and Time Functions"
    },
    {
      "index": 23,
      "doc": "DATE(expr),Date and Time Functions"
    },
    {
      "index": 56,
      "doc": "TIME(expr),Date and Time Functions"
    },
    {
      "index": 64,
      "doc": "TO_SECONDS(expr),Date and Time Functions"
    }
  ]
}
{
  "index": 215,
  "doc": "MID(str,pos,len)\n,String Functions",
  "mapping docs": [
    {
      "index": 219,
      "doc": "MID(),String Functions"
    },
    {
      "index": 197,
      "doc": "CHAR_LENGTH(),String Functions"
    },
    {
      "index": 241,
      "doc": "SUBSTR(),String Functions"
    },
    {
      "index": 223,
      "doc": "OCTET_LENGTH(),String Functions"
    }
  ]
}
{
  "index": 216,
  "doc": "MIN([DISTINCT] expr)\n,Aggregate Functions",
  "mapping docs": [
    {
      "index": 5,
      "doc": "MIN([DISTINCT]\n            expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 4,
      "doc": "MAX([DISTINCT]\n            expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 2,
      "doc": "SUM([DISTINCT]\n            expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 1,
      "doc": "COUNT(DISTINCT\n            expr,[expr...]),Aggregate Functions"
    }
  ]
}
{
  "index": 217,
  "doc": "MINUTE(time)\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 43,
      "doc": "MINUTE(time),Date and Time Functions"
    },
    {
      "index": 41,
      "doc": "MAKETIME(hour,minute,second),Date and Time Functions"
    },
    {
      "index": 37,
      "doc": "HOUR(time),Date and Time Functions"
    },
    {
      "index": 57,
      "doc": "TIME_FORMAT(time,format),Date and Time Functions"
    }
  ]
}
{
  "index": 218,
  "doc": "MLineFromText(wkt[,srid])\nMultiLineStringFromText(wkt[,srid])\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 216,
      "doc": "LPAD(),String Functions"
    },
    {
      "index": 217,
      "doc": "LTRIM(),String Functions"
    },
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 226,
      "doc": "QUOTE(),String Functions"
    }
  ]
}
{
  "index": 219,
  "doc": "MLineFromWKB(wkb[,srid])\nMultiLineStringFromWKB(wkb[,srid])\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 216,
      "doc": "LPAD(),String Functions"
    },
    {
      "index": 217,
      "doc": "LTRIM(),String Functions"
    },
    {
      "index": 238,
      "doc": "RTRIM(),String Functions"
    },
    {
      "index": 193,
      "doc": "ASCII(),String Functions"
    }
  ]
}
{
  "index": 220,
  "doc": "MONTH(date)\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 45,
      "doc": "MONTHNAME(date),Date and Time Functions"
    },
    {
      "index": 44,
      "doc": "MONTH(date),Date and Time Functions"
    },
    {
      "index": 30,
      "doc": "DAYOFMONTH(date),Date and Time Functions"
    },
    {
      "index": 25,
      "doc": "DATE_FORMAT(date,format),Date and Time Functions"
    }
  ]
}
{
  "index": 221,
  "doc": "MONTHNAME(date)\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 45,
      "doc": "MONTHNAME(date),Date and Time Functions"
    },
    {
      "index": 44,
      "doc": "MONTH(date),Date and Time Functions"
    },
    {
      "index": 30,
      "doc": "DAYOFMONTH(date),Date and Time Functions"
    },
    {
      "index": 29,
      "doc": "DAYNAME(date),Date and Time Functions"
    }
  ]
}
{
  "index": 222,
  "doc": "MPointFromText(wkt[,srid])\nMultiPointFromText(wkt[,srid])\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 145,
      "doc": "ATAN(Y,X),Mathematical Functions"
    },
    {
      "index": 216,
      "doc": "LPAD(),String Functions"
    },
    {
      "index": 144,
      "doc": "ATAN(X),Mathematical Functions"
    },
    {
      "index": 163,
      "doc": "RADIANS(X),Mathematical Functions"
    }
  ]
}
{
  "index": 223,
  "doc": "MPointFromWKB(wkb[,srid])\nMultiPointFromWKB(wkb[,srid])\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 145,
      "doc": "ATAN(Y,X),Mathematical Functions"
    },
    {
      "index": 216,
      "doc": "LPAD(),String Functions"
    },
    {
      "index": 144,
      "doc": "ATAN(X),Mathematical Functions"
    },
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    }
  ]
}
{
  "index": 224,
  "doc": "MPolyFromText(wkt[,srid])\nMultiPolygonFromText(wkt[,srid])\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 216,
      "doc": "LPAD(),String Functions"
    },
    {
      "index": 162,
      "doc": "POWER(X,Y),Mathematical Functions"
    },
    {
      "index": 159,
      "doc": "MOD(N,M),Mathematical Functions"
    },
    {
      "index": 161,
      "doc": "POW(X,Y),Mathematical Functions"
    }
  ]
}
{
  "index": 225,
  "doc": "MPolyFromWKB(wkb[,srid])\nMultiPolygonFromWKB(wkb[,srid])\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 216,
      "doc": "LPAD(),String Functions"
    },
    {
      "index": 159,
      "doc": "MOD(N,M),Mathematical Functions"
    },
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 161,
      "doc": "POW(X,Y),Mathematical Functions"
    }
  ]
}
{
  "index": 226,
  "doc": "MultiLineString(ls1,ls2,...)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 216,
      "doc": "LPAD(),String Functions"
    },
    {
      "index": 217,
      "doc": "LTRIM(),String Functions"
    },
    {
      "index": 249,
      "doc": "UPPER(),String Functions"
    }
  ]
}
{
  "index": 227,
  "doc": ",No Category",
  "mapping docs": [
    {
      "index": 184,
      "doc": "NAME_CONST(),Miscellaneous Functions"
    },
    {
      "index": 178,
      "doc": "INET6_NTOA(),Miscellaneous Functions"
    },
    {
      "index": 173,
      "doc": "DEFAULT(),Miscellaneous Functions"
    },
    {
      "index": 176,
      "doc": "INET_NTOA(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 228,
  "doc": ",No Category",
  "mapping docs": [
    {
      "index": 184,
      "doc": "NAME_CONST(),Miscellaneous Functions"
    },
    {
      "index": 178,
      "doc": "INET6_NTOA(),Miscellaneous Functions"
    },
    {
      "index": 173,
      "doc": "DEFAULT(),Miscellaneous Functions"
    },
    {
      "index": 176,
      "doc": "INET_NTOA(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 229,
  "doc": "MultiPoint(pt1,pt2,...)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 145,
      "doc": "ATAN(Y,X),Mathematical Functions"
    },
    {
      "index": 144,
      "doc": "ATAN(X),Mathematical Functions"
    },
    {
      "index": 169,
      "doc": "TAN(X),Mathematical Functions"
    },
    {
      "index": 162,
      "doc": "POWER(X,Y),Mathematical Functions"
    }
  ]
}
{
  "index": 230,
  "doc": ",No Category",
  "mapping docs": [
    {
      "index": 184,
      "doc": "NAME_CONST(),Miscellaneous Functions"
    },
    {
      "index": 178,
      "doc": "INET6_NTOA(),Miscellaneous Functions"
    },
    {
      "index": 173,
      "doc": "DEFAULT(),Miscellaneous Functions"
    },
    {
      "index": 176,
      "doc": "INET_NTOA(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 231,
  "doc": ",No Category",
  "mapping docs": [
    {
      "index": 184,
      "doc": "NAME_CONST(),Miscellaneous Functions"
    },
    {
      "index": 178,
      "doc": "INET6_NTOA(),Miscellaneous Functions"
    },
    {
      "index": 173,
      "doc": "DEFAULT(),Miscellaneous Functions"
    },
    {
      "index": 176,
      "doc": "INET_NTOA(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 232,
  "doc": "MultiPolygon(poly1,poly2,...)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 160,
      "doc": "PI(),Mathematical Functions"
    },
    {
      "index": 162,
      "doc": "POWER(X,Y),Mathematical Functions"
    },
    {
      "index": 167,
      "doc": "SIN(X),Mathematical Functions"
    },
    {
      "index": 152,
      "doc": "DEGREES(X),Mathematical Functions"
    }
  ]
}
{
  "index": 233,
  "doc": ",No Category",
  "mapping docs": [
    {
      "index": 184,
      "doc": "NAME_CONST(),Miscellaneous Functions"
    },
    {
      "index": 178,
      "doc": "INET6_NTOA(),Miscellaneous Functions"
    },
    {
      "index": 173,
      "doc": "DEFAULT(),Miscellaneous Functions"
    },
    {
      "index": 176,
      "doc": "INET_NTOA(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 234,
  "doc": ",No Category",
  "mapping docs": [
    {
      "index": 184,
      "doc": "NAME_CONST(),Miscellaneous Functions"
    },
    {
      "index": 178,
      "doc": "INET6_NTOA(),Miscellaneous Functions"
    },
    {
      "index": 173,
      "doc": "DEFAULT(),Miscellaneous Functions"
    },
    {
      "index": 176,
      "doc": "INET_NTOA(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 235,
  "doc": "NAME_CONST(name,value)\n,Miscellaneous Functions",
  "mapping docs": [
    {
      "index": 184,
      "doc": "NAME_CONST(),Miscellaneous Functions"
    },
    {
      "index": 148,
      "doc": "CONV(N,from_base,to_base),Mathematical Functions"
    },
    {
      "index": 200,
      "doc": "CONCAT_WS(),String Functions"
    },
    {
      "index": 199,
      "doc": "CONCAT(),String Functions"
    }
  ]
}
{
  "index": 236,
  "doc": "NATURAL_SORT_KEY(str)\n,String Functions",
  "mapping docs": [
    {
      "index": 236,
      "doc": "RLIKE,String Functions"
    },
    {
      "index": 225,
      "doc": "POSITION(),String Functions"
    },
    {
      "index": 215,
      "doc": "LOWER(),String Functions"
    },
    {
      "index": 222,
      "doc": "OCT(),String Functions"
    }
  ]
}
{
  "index": 237,
  "doc": "NEXT VALUE FOR sequence\norNEXTVAL(sequence_name)\nor in Oracle mode (SQL_MODE=ORACLE)sequence_name.nextval\nNEXT VALUE FOR is ANSI SQL syntax while NEXTVAL() is PostgreSQL syntax.,SEQUENCE Functions",
  "mapping docs": [
    {
      "index": 189,
      "doc": "NEXTVAL(),Sequence Functions"
    },
    {
      "index": 192,
      "doc": "LASTVAL(),Sequence Functions"
    },
    {
      "index": 191,
      "doc": "SETVAL(),Sequence Functions"
    },
    {
      "index": 224,
      "doc": "ORD(),String Functions"
    }
  ]
}
{
  "index": 238,
  "doc": "expr NOT LIKE pat [ESCAPE 'escape_char']\n,String Functions",
  "mapping docs": [
    {
      "index": 196,
      "doc": "CHAR(),String Functions"
    },
    {
      "index": 193,
      "doc": "ASCII(),String Functions"
    },
    {
      "index": 228,
      "doc": "REGEXP_INSTR(),String Functions"
    },
    {
      "index": 227,
      "doc": "REGEXP,String Functions"
    }
  ]
}
{
  "index": 239,
  "doc": "expr NOT REGEXP pat, expr NOT RLIKE pat\n,String Functions",
  "mapping docs": [
    {
      "index": 229,
      "doc": "REGEXP_LIKE(),String Functions"
    },
    {
      "index": 227,
      "doc": "REGEXP,String Functions"
    },
    {
      "index": 228,
      "doc": "REGEXP_INSTR(),String Functions"
    },
    {
      "index": 231,
      "doc": "REGEXP_SUBSTR(),String Functions"
    }
  ]
}
{
  "index": 240,
  "doc": "NOW([precision])\nCURRENT_TIMESTAMP\nCURRENT_TIMESTAMP([precision])\nLOCALTIME, LOCALTIME([precision])\nLOCALTIMESTAMP\nLOCALTIMESTAMP([precision])\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 21,
      "doc": "CURRENT_TIMESTAMP,Date and Time Functions"
    },
    {
      "index": 20,
      "doc": "CURRENT_TIME,Date and Time Functions"
    },
    {
      "index": 19,
      "doc": "CURRENT_DATE,Date and Time Functions"
    },
    {
      "index": 39,
      "doc": "LOCALTIMESTAMP,Date and Time Functions"
    }
  ]
}
{
  "index": 241,
  "doc": "NTILE (expr) OVER ( \n  [ PARTITION BY partition_expression ] \n  [ ORDER BY order_list ]\n)\n,Window Functions",
  "mapping docs": [
    {
      "index": 273,
      "doc": "NTILE(),Window Functions"
    },
    {
      "index": 266,
      "doc": "CUME_DIST(),Window Functions"
    },
    {
      "index": 272,
      "doc": "NTH_VALUE(),Window Functions"
    },
    {
      "index": 276,
      "doc": "ROW_NUMBER(),Window Functions"
    }
  ]
}
{
  "index": 242,
  "doc": "NULLIF(expr1,expr2)\n,Control Flow Functions",
  "mapping docs": [
    {
      "index": 90,
      "doc": "NULLIF(),Flow Control Functions"
    },
    {
      "index": 89,
      "doc": "IFNULL(),Flow Control Functions"
    },
    {
      "index": 88,
      "doc": "IF(),Flow Control Functions"
    },
    {
      "index": 87,
      "doc": "CASE,Flow Control Functions"
    }
  ]
}
{
  "index": 243,
  "doc": "OCT(N)\n,Numeric Functions",
  "mapping docs": [
    {
      "index": 222,
      "doc": "OCT(),String Functions"
    },
    {
      "index": 161,
      "doc": "POW(X,Y),Mathematical Functions"
    },
    {
      "index": 223,
      "doc": "OCTET_LENGTH(),String Functions"
    },
    {
      "index": 165,
      "doc": "ROUND(X),Mathematical Functions"
    }
  ]
}
{
  "index": 244,
  "doc": "OCTET_LENGTH(str)\n,String Functions",
  "mapping docs": [
    {
      "index": 223,
      "doc": "OCTET_LENGTH(),String Functions"
    },
    {
      "index": 212,
      "doc": "LENGTH(),String Functions"
    },
    {
      "index": 222,
      "doc": "OCT(),String Functions"
    },
    {
      "index": 197,
      "doc": "CHAR_LENGTH(),String Functions"
    }
  ]
}
{
  "index": 245,
  "doc": "OLD_PASSWORD(str)\n,Encryption, Hashing and Compression Functions",
  "mapping docs": [
    {
      "index": 78,
      "doc": "PASSWORD(),Encryption and Compression Functions"
    },
    {
      "index": 86,
      "doc": "VALIDATE_PASSWORD_STRENGTH(),Encryption and Compression Functions"
    },
    {
      "index": 77,
      "doc": "MD5(),Encryption and Compression Functions"
    },
    {
      "index": 81,
      "doc": "SHA1(),Encryption and Compression Functions"
    }
  ]
}
{
  "index": 246,
  "doc": "ORD(str)\n,String Functions",
  "mapping docs": [
    {
      "index": 224,
      "doc": "ORD(),String Functions"
    },
    {
      "index": 196,
      "doc": "CHAR(),String Functions"
    },
    {
      "index": 213,
      "doc": "LIKE,String Functions"
    },
    {
      "index": 241,
      "doc": "SUBSTR(),String Functions"
    }
  ]
}
{
  "index": 247,
  "doc": "OVERLAPS(g1,g2)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 145,
      "doc": "ATAN(Y,X),Mathematical Functions"
    },
    {
      "index": 162,
      "doc": "POWER(X,Y),Mathematical Functions"
    },
    {
      "index": 160,
      "doc": "PI(),Mathematical Functions"
    },
    {
      "index": 170,
      "doc": "TRUNCATE(X,D),Mathematical Functions"
    }
  ]
}
{
  "index": 248,
  "doc": "PASSWORD(str)\n,Encryption, Hashing and Compression Functions",
  "mapping docs": [
    {
      "index": 78,
      "doc": "PASSWORD(),Encryption and Compression Functions"
    },
    {
      "index": 76,
      "doc": "COMPRESS(),Encryption and Compression Functions"
    },
    {
      "index": 77,
      "doc": "MD5(),Encryption and Compression Functions"
    },
    {
      "index": 81,
      "doc": "SHA1(),Encryption and Compression Functions"
    }
  ]
}
{
  "index": 249,
  "doc": ",Window Functions",
  "mapping docs": [
    {
      "index": 266,
      "doc": "CUME_DIST(),Window Functions"
    },
    {
      "index": 273,
      "doc": "NTILE(),Window Functions"
    },
    {
      "index": 272,
      "doc": "NTH_VALUE(),Window Functions"
    },
    {
      "index": 267,
      "doc": "DENSE_RANK(),Window Functions"
    }
  ]
}
{
  "index": 250,
  "doc": ",Window Functions",
  "mapping docs": [
    {
      "index": 266,
      "doc": "CUME_DIST(),Window Functions"
    },
    {
      "index": 273,
      "doc": "NTILE(),Window Functions"
    },
    {
      "index": 272,
      "doc": "NTH_VALUE(),Window Functions"
    },
    {
      "index": 267,
      "doc": "DENSE_RANK(),Window Functions"
    }
  ]
}
{
  "index": 251,
  "doc": "PERCENT_RANK() OVER (\n  [ PARTITION BY partition_expression ] \n  [ ORDER BY order_list ]\n)\n,Window Functions",
  "mapping docs": [
    {
      "index": 274,
      "doc": "PERCENT_RANK(),Window Functions"
    },
    {
      "index": 275,
      "doc": "RANK(),Window Functions"
    },
    {
      "index": 267,
      "doc": "DENSE_RANK(),Window Functions"
    },
    {
      "index": 276,
      "doc": "ROW_NUMBER(),Window Functions"
    }
  ]
}
{
  "index": 252,
  "doc": "PERIOD_ADD(P,N)\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 47,
      "doc": "PERIOD_ADD(P,N),Date and Time Functions"
    },
    {
      "index": 48,
      "doc": "PERIOD_DIFF(P1,P2),Date and Time Functions"
    },
    {
      "index": 24,
      "doc": "DATE_ADD(date,INTERVAL\n          expr\nunit),Date and Time Functions"
    },
    {
      "index": 15,
      "doc": "ADDDATE(date,INTERVAL\n          expr\nunit),Date and Time Functions"
    }
  ]
}
{
  "index": 253,
  "doc": "PERIOD_DIFF(P1,P2)\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 48,
      "doc": "PERIOD_DIFF(P1,P2),Date and Time Functions"
    },
    {
      "index": 47,
      "doc": "PERIOD_ADD(P,N),Date and Time Functions"
    },
    {
      "index": 27,
      "doc": "DATEDIFF(expr1,expr2),Date and Time Functions"
    },
    {
      "index": 62,
      "doc": "TIMESTAMPDIFF(unit,datetime_expr1,datetime_expr2),Date and Time Functions"
    }
  ]
}
{
  "index": 254,
  "doc": "PI()\n,Numeric Functions",
  "mapping docs": [
    {
      "index": 160,
      "doc": "PI(),Mathematical Functions"
    },
    {
      "index": 163,
      "doc": "RADIANS(X),Mathematical Functions"
    },
    {
      "index": 167,
      "doc": "SIN(X),Mathematical Functions"
    },
    {
      "index": 169,
      "doc": "TAN(X),Mathematical Functions"
    }
  ]
}
{
  "index": 255,
  "doc": "Point(x,y)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 145,
      "doc": "ATAN(Y,X),Mathematical Functions"
    },
    {
      "index": 162,
      "doc": "POWER(X,Y),Mathematical Functions"
    },
    {
      "index": 161,
      "doc": "POW(X,Y),Mathematical Functions"
    },
    {
      "index": 169,
      "doc": "TAN(X),Mathematical Functions"
    }
  ]
}
{
  "index": 256,
  "doc": ",No Category",
  "mapping docs": [
    {
      "index": 184,
      "doc": "NAME_CONST(),Miscellaneous Functions"
    },
    {
      "index": 178,
      "doc": "INET6_NTOA(),Miscellaneous Functions"
    },
    {
      "index": 173,
      "doc": "DEFAULT(),Miscellaneous Functions"
    },
    {
      "index": 176,
      "doc": "INET_NTOA(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 257,
  "doc": "Polygon(ls1,ls2,...)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 167,
      "doc": "SIN(X),Mathematical Functions"
    },
    {
      "index": 149,
      "doc": "COS(X),Mathematical Functions"
    },
    {
      "index": 154,
      "doc": "FLOOR(X),Mathematical Functions"
    },
    {
      "index": 145,
      "doc": "ATAN(Y,X),Mathematical Functions"
    }
  ]
}
{
  "index": 258,
  "doc": ",No Category",
  "mapping docs": [
    {
      "index": 184,
      "doc": "NAME_CONST(),Miscellaneous Functions"
    },
    {
      "index": 178,
      "doc": "INET6_NTOA(),Miscellaneous Functions"
    },
    {
      "index": 173,
      "doc": "DEFAULT(),Miscellaneous Functions"
    },
    {
      "index": 176,
      "doc": "INET_NTOA(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 259,
  "doc": ",No Category",
  "mapping docs": [
    {
      "index": 184,
      "doc": "NAME_CONST(),Miscellaneous Functions"
    },
    {
      "index": 178,
      "doc": "INET6_NTOA(),Miscellaneous Functions"
    },
    {
      "index": 173,
      "doc": "DEFAULT(),Miscellaneous Functions"
    },
    {
      "index": 176,
      "doc": "INET_NTOA(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 260,
  "doc": "POSITION(substr IN str)\n,String Functions",
  "mapping docs": [
    {
      "index": 241,
      "doc": "SUBSTR(),String Functions"
    },
    {
      "index": 225,
      "doc": "POSITION(),String Functions"
    },
    {
      "index": 231,
      "doc": "REGEXP_SUBSTR(),String Functions"
    },
    {
      "index": 242,
      "doc": "SUBSTRING(),String Functions"
    }
  ]
}
{
  "index": 261,
  "doc": "POW(X,Y)\n,Numeric Functions",
  "mapping docs": [
    {
      "index": 161,
      "doc": "POW(X,Y),Mathematical Functions"
    },
    {
      "index": 162,
      "doc": "POWER(X,Y),Mathematical Functions"
    },
    {
      "index": 145,
      "doc": "ATAN(Y,X),Mathematical Functions"
    },
    {
      "index": 156,
      "doc": "LOG(X),Mathematical Functions"
    }
  ]
}
{
  "index": 262,
  "doc": "POWER(X,Y)\n,Numeric Functions",
  "mapping docs": [
    {
      "index": 162,
      "doc": "POWER(X,Y),Mathematical Functions"
    },
    {
      "index": 161,
      "doc": "POW(X,Y),Mathematical Functions"
    },
    {
      "index": 145,
      "doc": "ATAN(Y,X),Mathematical Functions"
    },
    {
      "index": 168,
      "doc": "SQRT(X),Mathematical Functions"
    }
  ]
}
{
  "index": 263,
  "doc": "PREVIOUS VALUE FOR sequence_name\norLASTVAL(sequence_name)\nor in Oracle mode (SQL_MODE=ORACLE)sequence_name.currval\nPREVIOUS VALUE FOR is IBM DB2 syntax while LASTVAL() is PostgreSQL syntax.,SEQUENCE Functions",
  "mapping docs": [
    {
      "index": 189,
      "doc": "NEXTVAL(),Sequence Functions"
    },
    {
      "index": 192,
      "doc": "LASTVAL(),Sequence Functions"
    },
    {
      "index": 191,
      "doc": "SETVAL(),Sequence Functions"
    },
    {
      "index": 97,
      "doc": "LAST_INSERT_ID(),Information Functions"
    }
  ]
}
{
  "index": 264,
  "doc": "sys.ps_is_account_enabled(host,user)\n,No Category",
  "mapping docs": [
    {
      "index": 101,
      "doc": "SYSTEM_USER(),Information Functions"
    },
    {
      "index": 102,
      "doc": "USER(),Information Functions"
    },
    {
      "index": 100,
      "doc": "SESSION_USER(),Information Functions"
    },
    {
      "index": 94,
      "doc": "CURRENT_USER(),Information Functions"
    }
  ]
}
{
  "index": 265,
  "doc": "sys.ps_is_consumer_enabled(consumer)\n,No Category",
  "mapping docs": [
    {
      "index": 101,
      "doc": "SYSTEM_USER(),Information Functions"
    },
    {
      "index": 183,
      "doc": "IS_UUID(),Miscellaneous Functions"
    },
    {
      "index": 102,
      "doc": "USER(),Information Functions"
    },
    {
      "index": 13,
      "doc": "CAST,Cast Functions"
    }
  ]
}
{
  "index": 266,
  "doc": "sys.ps_is_instrument_default_enabled(instrument)\n,No Category",
  "mapping docs": [
    {
      "index": 173,
      "doc": "DEFAULT(),Miscellaneous Functions"
    },
    {
      "index": 101,
      "doc": "SYSTEM_USER(),Information Functions"
    },
    {
      "index": 176,
      "doc": "INET_NTOA(),Miscellaneous Functions"
    },
    {
      "index": 171,
      "doc": "ANY_VALUE(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 267,
  "doc": "sys.ps_is_instrument_default_timed(instrument)\n,No Category",
  "mapping docs": [
    {
      "index": 55,
      "doc": "SYSDATE([fsp]),Date and Time Functions"
    },
    {
      "index": 39,
      "doc": "LOCALTIMESTAMP,Date and Time Functions"
    },
    {
      "index": 35,
      "doc": "FROM_UNIXTIME(unix_timestamp[,format]),Date and Time Functions"
    },
    {
      "index": 38,
      "doc": "LOCALTIME,Date and Time Functions"
    }
  ]
}
{
  "index": 268,
  "doc": "sys.ps_is_thread_instrumented(connection_id)\n,No Category",
  "mapping docs": [
    {
      "index": 92,
      "doc": "CONNECTION_ID(),Information Functions"
    },
    {
      "index": 183,
      "doc": "IS_UUID(),Miscellaneous Functions"
    },
    {
      "index": 182,
      "doc": "IS_IPV6(),Miscellaneous Functions"
    },
    {
      "index": 101,
      "doc": "SYSTEM_USER(),Information Functions"
    }
  ]
}
{
  "index": 269,
  "doc": "sys.ps_thread_account(thread_id)\n,No Category",
  "mapping docs": [
    {
      "index": 101,
      "doc": "SYSTEM_USER(),Information Functions"
    },
    {
      "index": 92,
      "doc": "CONNECTION_ID(),Information Functions"
    },
    {
      "index": 187,
      "doc": "UUID_TO_BIN,Miscellaneous Functions"
    },
    {
      "index": 172,
      "doc": "BIN_TO_UUID(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 270,
  "doc": "sys.ps_thread_id(connection_id)\n,No Category",
  "mapping docs": [
    {
      "index": 92,
      "doc": "CONNECTION_ID(),Information Functions"
    },
    {
      "index": 172,
      "doc": "BIN_TO_UUID(),Miscellaneous Functions"
    },
    {
      "index": 183,
      "doc": "IS_UUID(),Miscellaneous Functions"
    },
    {
      "index": 186,
      "doc": "UUID(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 271,
  "doc": "sys.ps_thread_stack(thread_id, verbose)\n,No Category",
  "mapping docs": [
    {
      "index": 92,
      "doc": "CONNECTION_ID(),Information Functions"
    },
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 139,
      "doc": "RELEASE_LOCK(str),Locking Functions"
    },
    {
      "index": 140,
      "doc": "RELEASE_ALL_LOCKS(),Locking Functions"
    }
  ]
}
{
  "index": 272,
  "doc": "sys.ps_thread_trx_info(thread_id)\n,No Category",
  "mapping docs": [
    {
      "index": 92,
      "doc": "CONNECTION_ID(),Information Functions"
    },
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 140,
      "doc": "RELEASE_ALL_LOCKS(),Locking Functions"
    },
    {
      "index": 139,
      "doc": "RELEASE_LOCK(str),Locking Functions"
    }
  ]
}
{
  "index": 273,
  "doc": "QUARTER(date)\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 49,
      "doc": "QUARTER(date),Date and Time Functions"
    },
    {
      "index": 27,
      "doc": "DATEDIFF(expr1,expr2),Date and Time Functions"
    },
    {
      "index": 30,
      "doc": "DAYOFMONTH(date),Date and Time Functions"
    },
    {
      "index": 59,
      "doc": "TIMEDIFF(expr1,expr2),Date and Time Functions"
    }
  ]
}
{
  "index": 274,
  "doc": "QUOTE(str)\n,String Functions",
  "mapping docs": [
    {
      "index": 226,
      "doc": "QUOTE(),String Functions"
    },
    {
      "index": 106,
      "doc": "JSON_QUOTE(),JSON Functions"
    },
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 241,
      "doc": "SUBSTR(),String Functions"
    }
  ]
}
{
  "index": 275,
  "doc": "sys.quote_identifier(str)\n,No Category",
  "mapping docs": [
    {
      "index": 226,
      "doc": "QUOTE(),String Functions"
    },
    {
      "index": 106,
      "doc": "JSON_QUOTE(),JSON Functions"
    },
    {
      "index": 216,
      "doc": "LPAD(),String Functions"
    },
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    }
  ]
}
{
  "index": 276,
  "doc": "RADIANS(X)\n,Numeric Functions",
  "mapping docs": [
    {
      "index": 163,
      "doc": "RADIANS(X),Mathematical Functions"
    },
    {
      "index": 169,
      "doc": "TAN(X),Mathematical Functions"
    },
    {
      "index": 144,
      "doc": "ATAN(X),Mathematical Functions"
    },
    {
      "index": 145,
      "doc": "ATAN(Y,X),Mathematical Functions"
    }
  ]
}
{
  "index": 277,
  "doc": "RAND(), RAND(N)\n,Numeric Functions",
  "mapping docs": [
    {
      "index": 164,
      "doc": "RAND([N]),Mathematical Functions"
    },
    {
      "index": 161,
      "doc": "POW(X,Y),Mathematical Functions"
    },
    {
      "index": 79,
      "doc": "RANDOM_BYTES(),Encryption and Compression Functions"
    },
    {
      "index": 165,
      "doc": "ROUND(X),Mathematical Functions"
    }
  ]
}
{
  "index": 278,
  "doc": "RANK() OVER (\n  [ PARTITION BY partition_expression ]\n  [ ORDER BY order_list ]\n) \n,Window Functions",
  "mapping docs": [
    {
      "index": 275,
      "doc": "RANK(),Window Functions"
    },
    {
      "index": 267,
      "doc": "DENSE_RANK(),Window Functions"
    },
    {
      "index": 274,
      "doc": "PERCENT_RANK(),Window Functions"
    },
    {
      "index": 5,
      "doc": "MIN([DISTINCT]\n            expr)\n            [over_clause],Aggregate Functions"
    }
  ]
}
{
  "index": 279,
  "doc": "expr REGEXP pat, expr RLIKE pat\n,Regular Expressions Functions",
  "mapping docs": [
    {
      "index": 229,
      "doc": "REGEXP_LIKE(),String Functions"
    },
    {
      "index": 227,
      "doc": "REGEXP,String Functions"
    },
    {
      "index": 231,
      "doc": "REGEXP_SUBSTR(),String Functions"
    },
    {
      "index": 228,
      "doc": "REGEXP_INSTR(),String Functions"
    }
  ]
}
{
  "index": 280,
  "doc": "REGEXP_INSTR(subject, pattern)\nReturns the position of the first occurrence of the regular expression pattern in the string subject, or 0 if pattern was not found.The positions start with 1 and are measured in characters (i.e. not in bytes), which is important for multi-byte character sets. You can cast a multi-byte character set to BINARY to get offsets in bytes.The function follows the case sensitivity rules of the effective collation. Matching is performed case insensitively for case insensitive collations, and case sensitively for case sensitive collations and for binary data.The collation case sensitivity can be overwritten using the (?i) and (?-i) PCRE flags.MariaDB uses the PCRE regular expression library for enhanced regular expression performance, and REGEXP_INSTR was introduced as part of this enhancement.,Regular Expressions Functions",
  "mapping docs": [
    {
      "index": 228,
      "doc": "REGEXP_INSTR(),String Functions"
    },
    {
      "index": 231,
      "doc": "REGEXP_SUBSTR(),String Functions"
    },
    {
      "index": 227,
      "doc": "REGEXP,String Functions"
    },
    {
      "index": 229,
      "doc": "REGEXP_LIKE(),String Functions"
    }
  ]
}
{
  "index": 281,
  "doc": "REGEXP_REPLACE(subject, pattern, replace)\n,Regular Expressions Functions",
  "mapping docs": [
    {
      "index": 230,
      "doc": "REGEXP_REPLACE(),String Functions"
    },
    {
      "index": 233,
      "doc": "REPLACE(),String Functions"
    },
    {
      "index": 231,
      "doc": "REGEXP_SUBSTR(),String Functions"
    },
    {
      "index": 227,
      "doc": "REGEXP,String Functions"
    }
  ]
}
{
  "index": 282,
  "doc": "REGEXP_SUBSTR(subject,pattern)\n,Regular Expressions Functions",
  "mapping docs": [
    {
      "index": 231,
      "doc": "REGEXP_SUBSTR(),String Functions"
    },
    {
      "index": 227,
      "doc": "REGEXP,String Functions"
    },
    {
      "index": 230,
      "doc": "REGEXP_REPLACE(),String Functions"
    },
    {
      "index": 229,
      "doc": "REGEXP_LIKE(),String Functions"
    }
  ]
}
{
  "index": 283,
  "doc": "RELEASE_LOCK(str)\n,Miscellaneous Functions",
  "mapping docs": [
    {
      "index": 139,
      "doc": "RELEASE_LOCK(str),Locking Functions"
    },
    {
      "index": 140,
      "doc": "RELEASE_ALL_LOCKS(),Locking Functions"
    },
    {
      "index": 137,
      "doc": "IS_FREE_LOCK(str),Locking Functions"
    },
    {
      "index": 138,
      "doc": "IS_USED_LOCK(str),Locking Functions"
    }
  ]
}
{
  "index": 284,
  "doc": "REPEAT(str,count)\n,String Functions",
  "mapping docs": [
    {
      "index": 241,
      "doc": "SUBSTR(),String Functions"
    },
    {
      "index": 222,
      "doc": "OCT(),String Functions"
    },
    {
      "index": 212,
      "doc": "LENGTH(),String Functions"
    },
    {
      "index": 223,
      "doc": "OCTET_LENGTH(),String Functions"
    }
  ]
}
{
  "index": 285,
  "doc": "REPLACE(str,from_str,to_str)\n,String Functions",
  "mapping docs": [
    {
      "index": 233,
      "doc": "REPLACE(),String Functions"
    },
    {
      "index": 230,
      "doc": "REGEXP_REPLACE(),String Functions"
    },
    {
      "index": 231,
      "doc": "REGEXP_SUBSTR(),String Functions"
    },
    {
      "index": 241,
      "doc": "SUBSTR(),String Functions"
    }
  ]
}
{
  "index": 286,
  "doc": "REVERSE(str)\n,String Functions",
  "mapping docs": [
    {
      "index": 234,
      "doc": "REVERSE(),String Functions"
    },
    {
      "index": 241,
      "doc": "SUBSTR(),String Functions"
    },
    {
      "index": 211,
      "doc": "LEFT(),String Functions"
    },
    {
      "index": 231,
      "doc": "REGEXP_SUBSTR(),String Functions"
    }
  ]
}
{
  "index": 287,
  "doc": "RIGHT(str,len)\n,String Functions",
  "mapping docs": [
    {
      "index": 235,
      "doc": "RIGHT(),String Functions"
    },
    {
      "index": 211,
      "doc": "LEFT(),String Functions"
    },
    {
      "index": 197,
      "doc": "CHAR_LENGTH(),String Functions"
    },
    {
      "index": 196,
      "doc": "CHAR(),String Functions"
    }
  ]
}
{
  "index": 288,
  "doc": "expr REGEXP pat, expr RLIKE pat\n,Regular Expressions Functions",
  "mapping docs": [
    {
      "index": 229,
      "doc": "REGEXP_LIKE(),String Functions"
    },
    {
      "index": 227,
      "doc": "REGEXP,String Functions"
    },
    {
      "index": 231,
      "doc": "REGEXP_SUBSTR(),String Functions"
    },
    {
      "index": 228,
      "doc": "REGEXP_INSTR(),String Functions"
    }
  ]
}
{
  "index": 289,
  "doc": "ROUND(X), ROUND(X,D)\n,Numeric Functions",
  "mapping docs": [
    {
      "index": 165,
      "doc": "ROUND(X),Mathematical Functions"
    },
    {
      "index": 170,
      "doc": "TRUNCATE(X,D),Mathematical Functions"
    },
    {
      "index": 168,
      "doc": "SQRT(X),Mathematical Functions"
    },
    {
      "index": 161,
      "doc": "POW(X,Y),Mathematical Functions"
    }
  ]
}
{
  "index": 290,
  "doc": "ROW_COUNT()\n,Information Functions",
  "mapping docs": [
    {
      "index": 98,
      "doc": "ROW_COUNT(),Information Functions"
    },
    {
      "index": 276,
      "doc": "ROW_NUMBER(),Window Functions"
    },
    {
      "index": 96,
      "doc": "FOUND_ROWS(),Information Functions"
    },
    {
      "index": 0,
      "doc": "COUNT(expr)\n            [over_clause],Aggregate Functions"
    }
  ]
}
{
  "index": 291,
  "doc": "ROW_NUMBER() OVER (\n  [ PARTITION BY partition_expression ]\n  [ ORDER BY order_list ]\n) \n,Window Functions",
  "mapping docs": [
    {
      "index": 276,
      "doc": "ROW_NUMBER(),Window Functions"
    },
    {
      "index": 98,
      "doc": "ROW_COUNT(),Information Functions"
    },
    {
      "index": 275,
      "doc": "RANK(),Window Functions"
    },
    {
      "index": 267,
      "doc": "DENSE_RANK(),Window Functions"
    }
  ]
}
{
  "index": 292,
  "doc": "RPAD(str, len [, padstr])\n,String Functions",
  "mapping docs": [
    {
      "index": 236,
      "doc": "RLIKE,String Functions"
    },
    {
      "index": 197,
      "doc": "CHAR_LENGTH(),String Functions"
    },
    {
      "index": 241,
      "doc": "SUBSTR(),String Functions"
    },
    {
      "index": 198,
      "doc": "CHARACTER_LENGTH(),String Functions"
    }
  ]
}
{
  "index": 293,
  "doc": "RTRIM(str)\n,String Functions",
  "mapping docs": [
    {
      "index": 238,
      "doc": "RTRIM(),String Functions"
    },
    {
      "index": 217,
      "doc": "LTRIM(),String Functions"
    },
    {
      "index": 196,
      "doc": "CHAR(),String Functions"
    },
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    }
  ]
}
{
  "index": 294,
  "doc": "SCHEMA()\n,Information Functions",
  "mapping docs": [
    {
      "index": 99,
      "doc": "SCHEMA(),Information Functions"
    },
    {
      "index": 95,
      "doc": "DATABASE(),Information Functions"
    },
    {
      "index": 96,
      "doc": "FOUND_ROWS(),Information Functions"
    },
    {
      "index": 93,
      "doc": "CURRENT_ROLE(),Information Functions"
    }
  ]
}
{
  "index": 295,
  "doc": "SECOND(time)\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 51,
      "doc": "SECOND(time),Date and Time Functions"
    },
    {
      "index": 16,
      "doc": "ADDTIME(expr1,expr2),Date and Time Functions"
    },
    {
      "index": 59,
      "doc": "TIMEDIFF(expr1,expr2),Date and Time Functions"
    },
    {
      "index": 54,
      "doc": "SUBTIME(expr1,expr2),Date and Time Functions"
    }
  ]
}
{
  "index": 296,
  "doc": "SEC_TO_TIME(seconds)\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 58,
      "doc": "TIME_TO_SEC(time),Date and Time Functions"
    },
    {
      "index": 50,
      "doc": "SEC_TO_TIME(seconds),Date and Time Functions"
    },
    {
      "index": 64,
      "doc": "TO_SECONDS(expr),Date and Time Functions"
    },
    {
      "index": 43,
      "doc": "MINUTE(time),Date and Time Functions"
    }
  ]
}
{
  "index": 297,
  "doc": "SESSION_USER()\n,Information Functions",
  "mapping docs": [
    {
      "index": 100,
      "doc": "SESSION_USER(),Information Functions"
    },
    {
      "index": 94,
      "doc": "CURRENT_USER(),Information Functions"
    },
    {
      "index": 102,
      "doc": "USER(),Information Functions"
    },
    {
      "index": 101,
      "doc": "SYSTEM_USER(),Information Functions"
    }
  ]
}
{
  "index": 298,
  "doc": "SETVAL(sequence_name, next_value, [is_used, [round]])\n,SEQUENCE Functions",
  "mapping docs": [
    {
      "index": 189,
      "doc": "NEXTVAL(),Sequence Functions"
    },
    {
      "index": 191,
      "doc": "SETVAL(),Sequence Functions"
    },
    {
      "index": 192,
      "doc": "LASTVAL(),Sequence Functions"
    },
    {
      "index": 171,
      "doc": "ANY_VALUE(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 299,
  "doc": "SHA1(str), SHA(str)\n,Encryption, Hashing and Compression Functions",
  "mapping docs": [
    {
      "index": 81,
      "doc": "SHA1(),Encryption and Compression Functions"
    },
    {
      "index": 82,
      "doc": "SHA2(),Encryption and Compression Functions"
    },
    {
      "index": 80,
      "doc": "SHA(),Encryption and Compression Functions"
    },
    {
      "index": 77,
      "doc": "MD5(),Encryption and Compression Functions"
    }
  ]
}
{
  "index": 300,
  "doc": "SHA2(str,hash_len)\n,Encryption, Hashing and Compression Functions",
  "mapping docs": [
    {
      "index": 82,
      "doc": "SHA2(),Encryption and Compression Functions"
    },
    {
      "index": 81,
      "doc": "SHA1(),Encryption and Compression Functions"
    },
    {
      "index": 80,
      "doc": "SHA(),Encryption and Compression Functions"
    },
    {
      "index": 77,
      "doc": "MD5(),Encryption and Compression Functions"
    }
  ]
}
{
  "index": 301,
  "doc": "SIGN(X)\n,Numeric Functions",
  "mapping docs": [
    {
      "index": 166,
      "doc": "SIGN(X),Mathematical Functions"
    },
    {
      "index": 163,
      "doc": "RADIANS(X),Mathematical Functions"
    },
    {
      "index": 161,
      "doc": "POW(X,Y),Mathematical Functions"
    },
    {
      "index": 143,
      "doc": "ASIN(X),Mathematical Functions"
    }
  ]
}
{
  "index": 302,
  "doc": "SIN(X)\n,Numeric Functions",
  "mapping docs": [
    {
      "index": 167,
      "doc": "SIN(X),Mathematical Functions"
    },
    {
      "index": 169,
      "doc": "TAN(X),Mathematical Functions"
    },
    {
      "index": 163,
      "doc": "RADIANS(X),Mathematical Functions"
    },
    {
      "index": 149,
      "doc": "COS(X),Mathematical Functions"
    }
  ]
}
{
  "index": 303,
  "doc": "SLEEP(duration)\n,Miscellaneous Functions",
  "mapping docs": [
    {
      "index": 185,
      "doc": "SLEEP(),Miscellaneous Functions"
    },
    {
      "index": 37,
      "doc": "HOUR(time),Date and Time Functions"
    },
    {
      "index": 43,
      "doc": "MINUTE(time),Date and Time Functions"
    },
    {
      "index": 41,
      "doc": "MAKETIME(hour,minute,second),Date and Time Functions"
    }
  ]
}
{
  "index": 304,
  "doc": "SOUNDEX(str)\n,String Functions",
  "mapping docs": [
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 193,
      "doc": "ASCII(),String Functions"
    },
    {
      "index": 241,
      "doc": "SUBSTR(),String Functions"
    },
    {
      "index": 231,
      "doc": "REGEXP_SUBSTR(),String Functions"
    }
  ]
}
{
  "index": 305,
  "doc": "expr1 SOUNDS LIKE expr2\n,String Functions",
  "mapping docs": [
    {
      "index": 242,
      "doc": "SUBSTRING(),String Functions"
    },
    {
      "index": 241,
      "doc": "SUBSTR(),String Functions"
    },
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 196,
      "doc": "CHAR(),String Functions"
    }
  ]
}
{
  "index": 306,
  "doc": "SPACE(N)\n,String Functions",
  "mapping docs": [
    {
      "index": 239,
      "doc": "SPACE(),String Functions"
    },
    {
      "index": 197,
      "doc": "CHAR_LENGTH(),String Functions"
    },
    {
      "index": 242,
      "doc": "SUBSTRING(),String Functions"
    },
    {
      "index": 196,
      "doc": "CHAR(),String Functions"
    }
  ]
}
{
  "index": 307,
  "doc": "SPIDER_BG_DIRECT_SQL('sql', 'tmp_table_list', 'parameters')\n,Spider Functions",
  "mapping docs": [
    {
      "index": 258,
      "doc": "TIDB_ENCODE_SQL_DIGEST,TiDB Specific Functions"
    },
    {
      "index": 257,
      "doc": "TIDB_DECODE_SQL_DIGESTS,TiDB Specific Functions"
    },
    {
      "index": 261,
      "doc": "TIDB_PARSE_TSO_LOGICAL,TiDB Specific Functions"
    },
    {
      "index": 260,
      "doc": "TIDB_PARSE_TSO,TiDB Specific Functions"
    }
  ]
}
{
  "index": 308,
  "doc": "SPIDER_COPY_TABLES(spider_table_name, \n  source_link_id, destination_link_id_list [,parameters])\n,Spider Functions",
  "mapping docs": [
    {
      "index": 265,
      "doc": "VITESS_HASH,TiDB Specific Functions"
    },
    {
      "index": 258,
      "doc": "TIDB_ENCODE_SQL_DIGEST,TiDB Specific Functions"
    },
    {
      "index": 260,
      "doc": "TIDB_PARSE_TSO,TiDB Specific Functions"
    },
    {
      "index": 261,
      "doc": "TIDB_PARSE_TSO_LOGICAL,TiDB Specific Functions"
    }
  ]
}
{
  "index": 309,
  "doc": "SPIDER_DIRECT_SQL('sql', 'tmp_table_list', 'parameters')\n,Spider Functions",
  "mapping docs": [
    {
      "index": 258,
      "doc": "TIDB_ENCODE_SQL_DIGEST,TiDB Specific Functions"
    },
    {
      "index": 257,
      "doc": "TIDB_DECODE_SQL_DIGESTS,TiDB Specific Functions"
    },
    {
      "index": 260,
      "doc": "TIDB_PARSE_TSO,TiDB Specific Functions"
    },
    {
      "index": 261,
      "doc": "TIDB_PARSE_TSO_LOGICAL,TiDB Specific Functions"
    }
  ]
}
{
  "index": 310,
  "doc": "SPIDER_FLUSH_TABLE_MON_CACHE()\n,Spider Functions",
  "mapping docs": [
    {
      "index": 140,
      "doc": "RELEASE_ALL_LOCKS(),Locking Functions"
    },
    {
      "index": 136,
      "doc": "GET_LOCK(str,timeout),Locking Functions"
    },
    {
      "index": 132,
      "doc": "JSON_STORAGE_FREE(),JSON Functions"
    },
    {
      "index": 133,
      "doc": "JSON_STORAGE_SIZE(),JSON Functions"
    }
  ]
}
{
  "index": 311,
  "doc": "SQRT(X)\n,Numeric Functions",
  "mapping docs": [
    {
      "index": 168,
      "doc": "SQRT(X),Mathematical Functions"
    },
    {
      "index": 163,
      "doc": "RADIANS(X),Mathematical Functions"
    },
    {
      "index": 158,
      "doc": "LOG2(X),Mathematical Functions"
    },
    {
      "index": 147,
      "doc": "CEILING(X),Mathematical Functions"
    }
  ]
}
{
  "index": 312,
  "doc": "STD(expr)\n,Aggregate Functions",
  "mapping docs": [
    {
      "index": 8,
      "doc": "STD(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 2,
      "doc": "SUM([DISTINCT]\n            expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 9,
      "doc": "VAR_SAMP(expr)\n            [over_clause],Aggregate Functions"
    }
  ]
}
{
  "index": 313,
  "doc": "STDDEV(expr)\n,Aggregate Functions",
  "mapping docs": [
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 8,
      "doc": "STD(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 2,
      "doc": "SUM([DISTINCT]\n            expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 9,
      "doc": "VAR_SAMP(expr)\n            [over_clause],Aggregate Functions"
    }
  ]
}
{
  "index": 314,
  "doc": "STDDEV_POP(expr)\n,Aggregate Functions",
  "mapping docs": [
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 7,
      "doc": "VAR_POP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 8,
      "doc": "STD(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 9,
      "doc": "VAR_SAMP(expr)\n            [over_clause],Aggregate Functions"
    }
  ]
}
{
  "index": 315,
  "doc": "STDDEV_SAMP(expr)\n,Aggregate Functions",
  "mapping docs": [
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 9,
      "doc": "VAR_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 8,
      "doc": "STD(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 2,
      "doc": "SUM([DISTINCT]\n            expr)\n            [over_clause],Aggregate Functions"
    }
  ]
}
{
  "index": 316,
  "doc": "STRCMP(expr1,expr2)\n,String Functions",
  "mapping docs": [
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 196,
      "doc": "CHAR(),String Functions"
    },
    {
      "index": 222,
      "doc": "OCT(),String Functions"
    },
    {
      "index": 193,
      "doc": "ASCII(),String Functions"
    }
  ]
}
{
  "index": 317,
  "doc": "STR_TO_DATE(str,format)\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 52,
      "doc": "STR_TO_DATE(str,format),Date and Time Functions"
    },
    {
      "index": 25,
      "doc": "DATE_FORMAT(date,format),Date and Time Functions"
    },
    {
      "index": 57,
      "doc": "TIME_FORMAT(time,format),Date and Time Functions"
    },
    {
      "index": 23,
      "doc": "DATE(expr),Date and Time Functions"
    }
  ]
}
{
  "index": 318,
  "doc": "ST_Area(poly)\nArea(poly)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 154,
      "doc": "FLOOR(X),Mathematical Functions"
    },
    {
      "index": 160,
      "doc": "PI(),Mathematical Functions"
    }
  ]
}
{
  "index": 319,
  "doc": "ST_AsBinary(g)\nAsBinary(g)\nST_AsWKB(g)\nAsWKB(g)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 79,
      "doc": "RANDOM_BYTES(),Encryption and Compression Functions"
    },
    {
      "index": 12,
      "doc": "BINARY,Cast Functions"
    }
  ]
}
{
  "index": 320,
  "doc": "ST_AsText(g)\nAsText(g)\nST_AsWKT(g)\nAsWKT(g)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 193,
      "doc": "ASCII(),String Functions"
    },
    {
      "index": 143,
      "doc": "ASIN(X),Mathematical Functions"
    },
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    }
  ]
}
{
  "index": 321,
  "doc": ",No Category",
  "mapping docs": [
    {
      "index": 184,
      "doc": "NAME_CONST(),Miscellaneous Functions"
    },
    {
      "index": 178,
      "doc": "INET6_NTOA(),Miscellaneous Functions"
    },
    {
      "index": 173,
      "doc": "DEFAULT(),Miscellaneous Functions"
    },
    {
      "index": 176,
      "doc": "INET_NTOA(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 322,
  "doc": ",No Category",
  "mapping docs": [
    {
      "index": 184,
      "doc": "NAME_CONST(),Miscellaneous Functions"
    },
    {
      "index": 178,
      "doc": "INET6_NTOA(),Miscellaneous Functions"
    },
    {
      "index": 173,
      "doc": "DEFAULT(),Miscellaneous Functions"
    },
    {
      "index": 176,
      "doc": "INET_NTOA(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 323,
  "doc": "ST_BOUNDARY(g)\nBOUNDARY(g)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 222,
      "doc": "OCT(),String Functions"
    },
    {
      "index": 207,
      "doc": "HEX(),String Functions"
    }
  ]
}
{
  "index": 324,
  "doc": "ST_BUFFER(g1,r)\nBUFFER(g1,r)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 139,
      "doc": "RELEASE_LOCK(str),Locking Functions"
    },
    {
      "index": 138,
      "doc": "IS_USED_LOCK(str),Locking Functions"
    }
  ]
}
{
  "index": 325,
  "doc": "ST_Centroid(mpoly)\nCentroid(mpoly)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 216,
      "doc": "LPAD(),String Functions"
    },
    {
      "index": 8,
      "doc": "STD(expr)\n            [over_clause],Aggregate Functions"
    }
  ]
}
{
  "index": 326,
  "doc": "ST_CONTAINS(g1,g2)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 214,
      "doc": "LOCATE(),String Functions"
    },
    {
      "index": 107,
      "doc": "JSON_CONTAINS(),JSON Functions"
    },
    {
      "index": 243,
      "doc": "SUBSTRING_INDEX(),String Functions"
    },
    {
      "index": 225,
      "doc": "POSITION(),String Functions"
    }
  ]
}
{
  "index": 327,
  "doc": "ST_ConvexHull(g)\nConvexHull(g)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 159,
      "doc": "MOD(N,M),Mathematical Functions"
    },
    {
      "index": 162,
      "doc": "POWER(X,Y),Mathematical Functions"
    },
    {
      "index": 149,
      "doc": "COS(X),Mathematical Functions"
    }
  ]
}
{
  "index": 328,
  "doc": "ST_CROSSES(g1,g2)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 149,
      "doc": "COS(X),Mathematical Functions"
    },
    {
      "index": 145,
      "doc": "ATAN(Y,X),Mathematical Functions"
    }
  ]
}
{
  "index": 329,
  "doc": "ST_DIFFERENCE(g1,g2)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 48,
      "doc": "PERIOD_DIFF(P1,P2),Date and Time Functions"
    },
    {
      "index": 27,
      "doc": "DATEDIFF(expr1,expr2),Date and Time Functions"
    },
    {
      "index": 54,
      "doc": "SUBTIME(expr1,expr2),Date and Time Functions"
    },
    {
      "index": 161,
      "doc": "POW(X,Y),Mathematical Functions"
    }
  ]
}
{
  "index": 330,
  "doc": "ST_Dimension(g)\nDimension(g)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 223,
      "doc": "OCTET_LENGTH(),String Functions"
    },
    {
      "index": 216,
      "doc": "LPAD(),String Functions"
    }
  ]
}
{
  "index": 331,
  "doc": "ST_DISJOINT(g1,g2)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 8,
      "doc": "STD(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 48,
      "doc": "PERIOD_DIFF(P1,P2),Date and Time Functions"
    }
  ]
}
{
  "index": 332,
  "doc": "ST_DISTANCE(g1,g2)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 170,
      "doc": "TRUNCATE(X,D),Mathematical Functions"
    },
    {
      "index": 223,
      "doc": "OCTET_LENGTH(),String Functions"
    }
  ]
}
{
  "index": 333,
  "doc": "ST_DISTANCE_SPHERE(g1,g2,[r])\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 236,
      "doc": "RLIKE,String Functions"
    },
    {
      "index": 161,
      "doc": "POW(X,Y),Mathematical Functions"
    },
    {
      "index": 162,
      "doc": "POWER(X,Y),Mathematical Functions"
    },
    {
      "index": 170,
      "doc": "TRUNCATE(X,D),Mathematical Functions"
    }
  ]
}
{
  "index": 334,
  "doc": "ST_EndPoint(ls)\nEndPoint(ls)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 216,
      "doc": "LPAD(),String Functions"
    },
    {
      "index": 170,
      "doc": "TRUNCATE(X,D),Mathematical Functions"
    }
  ]
}
{
  "index": 335,
  "doc": "ST_ENVELOPE(g)\nENVELOPE(g)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 159,
      "doc": "MOD(N,M),Mathematical Functions"
    },
    {
      "index": 170,
      "doc": "TRUNCATE(X,D),Mathematical Functions"
    },
    {
      "index": 143,
      "doc": "ASIN(X),Mathematical Functions"
    }
  ]
}
{
  "index": 336,
  "doc": "ST_EQUALS(g1,g2)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 8,
      "doc": "STD(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 2,
      "doc": "SUM([DISTINCT]\n            expr)\n            [over_clause],Aggregate Functions"
    }
  ]
}
{
  "index": 337,
  "doc": "ST_ExteriorRing(poly)\nExteriorRing(poly)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 222,
      "doc": "OCT(),String Functions"
    },
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 207,
      "doc": "HEX(),String Functions"
    }
  ]
}
{
  "index": 338,
  "doc": "ST_GeomCollFromText(wkt[,srid])\nST_GeometryCollectionFromText(wkt[,srid])\nGeomCollFromText(wkt[,srid])\nGeometryCollectionFromText(wkt[,srid])\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 216,
      "doc": "LPAD(),String Functions"
    },
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 9,
      "doc": "VAR_SAMP(expr)\n            [over_clause],Aggregate Functions"
    }
  ]
}
{
  "index": 339,
  "doc": "ST_GeomCollFromWKB(wkb[,srid])\nST_GeometryCollectionFromWKB(wkb[,srid])\nGeomCollFromWKB(wkb[,srid])\nGeometryCollectionFromWKB(wkb[,srid])\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 216,
      "doc": "LPAD(),String Functions"
    },
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 9,
      "doc": "VAR_SAMP(expr)\n            [over_clause],Aggregate Functions"
    }
  ]
}
{
  "index": 340,
  "doc": ",No Category",
  "mapping docs": [
    {
      "index": 184,
      "doc": "NAME_CONST(),Miscellaneous Functions"
    },
    {
      "index": 178,
      "doc": "INET6_NTOA(),Miscellaneous Functions"
    },
    {
      "index": 173,
      "doc": "DEFAULT(),Miscellaneous Functions"
    },
    {
      "index": 176,
      "doc": "INET_NTOA(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 341,
  "doc": ",No Category",
  "mapping docs": [
    {
      "index": 184,
      "doc": "NAME_CONST(),Miscellaneous Functions"
    },
    {
      "index": 178,
      "doc": "INET6_NTOA(),Miscellaneous Functions"
    },
    {
      "index": 173,
      "doc": "DEFAULT(),Miscellaneous Functions"
    },
    {
      "index": 176,
      "doc": "INET_NTOA(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 342,
  "doc": ",No Category",
  "mapping docs": [
    {
      "index": 184,
      "doc": "NAME_CONST(),Miscellaneous Functions"
    },
    {
      "index": 178,
      "doc": "INET6_NTOA(),Miscellaneous Functions"
    },
    {
      "index": 173,
      "doc": "DEFAULT(),Miscellaneous Functions"
    },
    {
      "index": 176,
      "doc": "INET_NTOA(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 343,
  "doc": ",No Category",
  "mapping docs": [
    {
      "index": 184,
      "doc": "NAME_CONST(),Miscellaneous Functions"
    },
    {
      "index": 178,
      "doc": "INET6_NTOA(),Miscellaneous Functions"
    },
    {
      "index": 173,
      "doc": "DEFAULT(),Miscellaneous Functions"
    },
    {
      "index": 176,
      "doc": "INET_NTOA(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 344,
  "doc": "ST_GeometryN(gc,N)\nGeometryN(gc,N)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 159,
      "doc": "MOD(N,M),Mathematical Functions"
    },
    {
      "index": 149,
      "doc": "COS(X),Mathematical Functions"
    },
    {
      "index": 148,
      "doc": "CONV(N,from_base,to_base),Mathematical Functions"
    }
  ]
}
{
  "index": 345,
  "doc": "ST_GeometryType(g)\nGeometryType(g)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 216,
      "doc": "LPAD(),String Functions"
    },
    {
      "index": 8,
      "doc": "STD(expr)\n            [over_clause],Aggregate Functions"
    }
  ]
}
{
  "index": 346,
  "doc": "ST_GeomFromText(wkt[,srid])\nST_GeometryFromText(wkt[,srid])\nGeomFromText(wkt[,srid])\nGeometryFromText(wkt[,srid])\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 216,
      "doc": "LPAD(),String Functions"
    },
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 159,
      "doc": "MOD(N,M),Mathematical Functions"
    }
  ]
}
{
  "index": 347,
  "doc": "ST_GeomFromWKB(wkb[,srid])\nST_GeometryFromWKB(wkb[,srid])\nGeomFromWKB(wkb[,srid])\nGeometryFromWKB(wkb[,srid])\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 216,
      "doc": "LPAD(),String Functions"
    },
    {
      "index": 159,
      "doc": "MOD(N,M),Mathematical Functions"
    }
  ]
}
{
  "index": 348,
  "doc": "ST_InteriorRingN(poly,N)\nInteriorRingN(poly,N)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 143,
      "doc": "ASIN(X),Mathematical Functions"
    },
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 207,
      "doc": "HEX(),String Functions"
    }
  ]
}
{
  "index": 349,
  "doc": "ST_INTERSECTION(g1,g2)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 48,
      "doc": "PERIOD_DIFF(P1,P2),Date and Time Functions"
    },
    {
      "index": 8,
      "doc": "STD(expr)\n            [over_clause],Aggregate Functions"
    }
  ]
}
{
  "index": 350,
  "doc": "ST_INTERSECTS(g1,g2)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 8,
      "doc": "STD(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 48,
      "doc": "PERIOD_DIFF(P1,P2),Date and Time Functions"
    }
  ]
}
{
  "index": 351,
  "doc": "ST_IsClosed(g)\nIsClosed(g)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 8,
      "doc": "STD(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 138,
      "doc": "IS_USED_LOCK(str),Locking Functions"
    }
  ]
}
{
  "index": 352,
  "doc": "ST_IsEmpty(g)\nIsEmpty(g)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 8,
      "doc": "STD(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 183,
      "doc": "IS_UUID(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 353,
  "doc": "ST_IsRing(g)\nIsRing(g)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 222,
      "doc": "OCT(),String Functions"
    },
    {
      "index": 243,
      "doc": "SUBSTRING_INDEX(),String Functions"
    },
    {
      "index": 193,
      "doc": "ASCII(),String Functions"
    }
  ]
}
{
  "index": 354,
  "doc": "ST_IsSimple(g)\nIsSimple(g)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 8,
      "doc": "STD(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 170,
      "doc": "TRUNCATE(X,D),Mathematical Functions"
    }
  ]
}
{
  "index": 355,
  "doc": "ST_LENGTH(ls)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 223,
      "doc": "OCTET_LENGTH(),String Functions"
    },
    {
      "index": 197,
      "doc": "CHAR_LENGTH(),String Functions"
    },
    {
      "index": 212,
      "doc": "LENGTH(),String Functions"
    },
    {
      "index": 198,
      "doc": "CHARACTER_LENGTH(),String Functions"
    }
  ]
}
{
  "index": 356,
  "doc": "ST_LineFromText(wkt[,srid])\nST_LineStringFromText(wkt[,srid])\nLineFromText(wkt[,srid])\nLineStringFromText(wkt[,srid])\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 216,
      "doc": "LPAD(),String Functions"
    },
    {
      "index": 226,
      "doc": "QUOTE(),String Functions"
    },
    {
      "index": 217,
      "doc": "LTRIM(),String Functions"
    }
  ]
}
{
  "index": 357,
  "doc": "ST_LineFromWKB(wkb[,srid])\nLineFromWKB(wkb[,srid])\nST_LineStringFromWKB(wkb[,srid])\nLineStringFromWKB(wkb[,srid])\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 216,
      "doc": "LPAD(),String Functions"
    },
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 226,
      "doc": "QUOTE(),String Functions"
    }
  ]
}
{
  "index": 358,
  "doc": ",No Category",
  "mapping docs": [
    {
      "index": 184,
      "doc": "NAME_CONST(),Miscellaneous Functions"
    },
    {
      "index": 178,
      "doc": "INET6_NTOA(),Miscellaneous Functions"
    },
    {
      "index": 173,
      "doc": "DEFAULT(),Miscellaneous Functions"
    },
    {
      "index": 176,
      "doc": "INET_NTOA(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 359,
  "doc": ",No Category",
  "mapping docs": [
    {
      "index": 184,
      "doc": "NAME_CONST(),Miscellaneous Functions"
    },
    {
      "index": 178,
      "doc": "INET6_NTOA(),Miscellaneous Functions"
    },
    {
      "index": 173,
      "doc": "DEFAULT(),Miscellaneous Functions"
    },
    {
      "index": 176,
      "doc": "INET_NTOA(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 360,
  "doc": "ST_NumGeometries(gc)\nNumGeometries(gc)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 151,
      "doc": "CRC32(expr),Mathematical Functions"
    },
    {
      "index": 163,
      "doc": "RADIANS(X),Mathematical Functions"
    },
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    }
  ]
}
{
  "index": 361,
  "doc": "ST_NumInteriorRings(poly)\nNumInteriorRings(poly)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 222,
      "doc": "OCT(),String Functions"
    },
    {
      "index": 215,
      "doc": "LOWER(),String Functions"
    }
  ]
}
{
  "index": 362,
  "doc": "ST_NumPoints(ls)\nNumPoints(ls)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 163,
      "doc": "RADIANS(X),Mathematical Functions"
    },
    {
      "index": 145,
      "doc": "ATAN(Y,X),Mathematical Functions"
    },
    {
      "index": 149,
      "doc": "COS(X),Mathematical Functions"
    }
  ]
}
{
  "index": 363,
  "doc": "ST_OVERLAPS(g1,g2)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 8,
      "doc": "STD(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 48,
      "doc": "PERIOD_DIFF(P1,P2),Date and Time Functions"
    }
  ]
}
{
  "index": 364,
  "doc": "ST_PointFromText(wkt[,srid])\nPointFromText(wkt[,srid])\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 216,
      "doc": "LPAD(),String Functions"
    },
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 149,
      "doc": "COS(X),Mathematical Functions"
    }
  ]
}
{
  "index": 365,
  "doc": "ST_PointFromWKB(wkb[,srid])\nPointFromWKB(wkb[,srid])\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 216,
      "doc": "LPAD(),String Functions"
    },
    {
      "index": 170,
      "doc": "TRUNCATE(X,D),Mathematical Functions"
    }
  ]
}
{
  "index": 366,
  "doc": "ST_PointN(ls,N)\nPointN(ls,N)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 155,
      "doc": "LN(X),Mathematical Functions"
    },
    {
      "index": 159,
      "doc": "MOD(N,M),Mathematical Functions"
    },
    {
      "index": 148,
      "doc": "CONV(N,from_base,to_base),Mathematical Functions"
    },
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    }
  ]
}
{
  "index": 367,
  "doc": "ST_PointOnSurface(g)\nPointOnSurface(g)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 149,
      "doc": "COS(X),Mathematical Functions"
    },
    {
      "index": 8,
      "doc": "STD(expr)\n            [over_clause],Aggregate Functions"
    }
  ]
}
{
  "index": 368,
  "doc": "ST_PolyFromText(wkt[,srid])\nST_PolygonFromText(wkt[,srid])\nPolyFromText(wkt[,srid])\nPolygonFromText(wkt[,srid])\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 216,
      "doc": "LPAD(),String Functions"
    },
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 217,
      "doc": "LTRIM(),String Functions"
    }
  ]
}
{
  "index": 369,
  "doc": "ST_PolyFromWKB(wkb[,srid])\nST_PolygonFromWKB(wkb[,srid])\nPolyFromWKB(wkb[,srid])\nPolygonFromWKB(wkb[,srid])\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 216,
      "doc": "LPAD(),String Functions"
    },
    {
      "index": 170,
      "doc": "TRUNCATE(X,D),Mathematical Functions"
    }
  ]
}
{
  "index": 370,
  "doc": ",No Category",
  "mapping docs": [
    {
      "index": 184,
      "doc": "NAME_CONST(),Miscellaneous Functions"
    },
    {
      "index": 178,
      "doc": "INET6_NTOA(),Miscellaneous Functions"
    },
    {
      "index": 173,
      "doc": "DEFAULT(),Miscellaneous Functions"
    },
    {
      "index": 176,
      "doc": "INET_NTOA(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 371,
  "doc": ",No Category",
  "mapping docs": [
    {
      "index": 184,
      "doc": "NAME_CONST(),Miscellaneous Functions"
    },
    {
      "index": 178,
      "doc": "INET6_NTOA(),Miscellaneous Functions"
    },
    {
      "index": 173,
      "doc": "DEFAULT(),Miscellaneous Functions"
    },
    {
      "index": 176,
      "doc": "INET_NTOA(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 372,
  "doc": "ST_Relate(g1, g2, i)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 8,
      "doc": "STD(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 159,
      "doc": "MOD(N,M),Mathematical Functions"
    }
  ]
}
{
  "index": 373,
  "doc": "ST_SRID(g)\nSRID(g)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 216,
      "doc": "LPAD(),String Functions"
    },
    {
      "index": 9,
      "doc": "VAR_SAMP(expr)\n            [over_clause],Aggregate Functions"
    }
  ]
}
{
  "index": 374,
  "doc": "ST_StartPoint(ls)\nStartPoint(ls)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 216,
      "doc": "LPAD(),String Functions"
    },
    {
      "index": 149,
      "doc": "COS(X),Mathematical Functions"
    }
  ]
}
{
  "index": 375,
  "doc": "ST_SYMDIFFERENCE(g1,g2)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 158,
      "doc": "LOG2(X),Mathematical Functions"
    },
    {
      "index": 48,
      "doc": "PERIOD_DIFF(P1,P2),Date and Time Functions"
    }
  ]
}
{
  "index": 376,
  "doc": "ST_TOUCHES(g1,g2)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 145,
      "doc": "ATAN(Y,X),Mathematical Functions"
    },
    {
      "index": 158,
      "doc": "LOG2(X),Mathematical Functions"
    }
  ]
}
{
  "index": 377,
  "doc": "ST_UNION(g1,g2)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 8,
      "doc": "STD(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 158,
      "doc": "LOG2(X),Mathematical Functions"
    }
  ]
}
{
  "index": 378,
  "doc": "ST_WITHIN(g1,g2)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 8,
      "doc": "STD(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 9,
      "doc": "VAR_SAMP(expr)\n            [over_clause],Aggregate Functions"
    }
  ]
}
{
  "index": 379,
  "doc": "ST_X(p)\nX(p)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 146,
      "doc": "CEIL(X),Mathematical Functions"
    },
    {
      "index": 149,
      "doc": "COS(X),Mathematical Functions"
    }
  ]
}
{
  "index": 380,
  "doc": "ST_Y(p)\nY(p)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 8,
      "doc": "STD(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 52,
      "doc": "STR_TO_DATE(str,format),Date and Time Functions"
    }
  ]
}
{
  "index": 381,
  "doc": "SUBDATE(date,INTERVAL expr unit), SUBDATE(expr,days)\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 26,
      "doc": "DATE_SUB(date,INTERVAL\n          expr\nunit),Date and Time Functions"
    },
    {
      "index": 53,
      "doc": "SUBDATE(date,INTERVAL\n          expr\nunit),Date and Time Functions"
    },
    {
      "index": 15,
      "doc": "ADDDATE(date,INTERVAL\n          expr\nunit),Date and Time Functions"
    },
    {
      "index": 24,
      "doc": "DATE_ADD(date,INTERVAL\n          expr\nunit),Date and Time Functions"
    }
  ]
}
{
  "index": 382,
  "doc": ",String Functions",
  "mapping docs": [
    {
      "index": 196,
      "doc": "CHAR(),String Functions"
    },
    {
      "index": 242,
      "doc": "SUBSTRING(),String Functions"
    },
    {
      "index": 193,
      "doc": "ASCII(),String Functions"
    },
    {
      "index": 247,
      "doc": "UCASE(),String Functions"
    }
  ]
}
{
  "index": 383,
  "doc": "SUBSTRING(str,pos), \nSUBSTRING(str FROM pos), \nSUBSTRING(str,pos,len),\nSUBSTRING(str FROM pos FOR len)\n\nSUBSTR(str,pos), \nSUBSTR(str FROM pos), \nSUBSTR(str,pos,len),\nSUBSTR(str FROM pos FOR len)\n,String Functions",
  "mapping docs": [
    {
      "index": 241,
      "doc": "SUBSTR(),String Functions"
    },
    {
      "index": 242,
      "doc": "SUBSTRING(),String Functions"
    },
    {
      "index": 231,
      "doc": "REGEXP_SUBSTR(),String Functions"
    },
    {
      "index": 243,
      "doc": "SUBSTRING_INDEX(),String Functions"
    }
  ]
}
{
  "index": 384,
  "doc": "SUBSTRING_INDEX(str,delim,count)\n,String Functions",
  "mapping docs": [
    {
      "index": 243,
      "doc": "SUBSTRING_INDEX(),String Functions"
    },
    {
      "index": 241,
      "doc": "SUBSTR(),String Functions"
    },
    {
      "index": 231,
      "doc": "REGEXP_SUBSTR(),String Functions"
    },
    {
      "index": 242,
      "doc": "SUBSTRING(),String Functions"
    }
  ]
}
{
  "index": 385,
  "doc": "SUBTIME(expr1,expr2)\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 54,
      "doc": "SUBTIME(expr1,expr2),Date and Time Functions"
    },
    {
      "index": 16,
      "doc": "ADDTIME(expr1,expr2),Date and Time Functions"
    },
    {
      "index": 59,
      "doc": "TIMEDIFF(expr1,expr2),Date and Time Functions"
    },
    {
      "index": 26,
      "doc": "DATE_SUB(date,INTERVAL\n          expr\nunit),Date and Time Functions"
    }
  ]
}
{
  "index": 386,
  "doc": "SUM([DISTINCT] expr)\n,Aggregate Functions",
  "mapping docs": [
    {
      "index": 2,
      "doc": "SUM([DISTINCT]\n            expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 1,
      "doc": "COUNT(DISTINCT\n            expr,[expr...]),Aggregate Functions"
    },
    {
      "index": 4,
      "doc": "MAX([DISTINCT]\n            expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 3,
      "doc": "AVG([DISTINCT]\n            expr)\n            [over_clause],Aggregate Functions"
    }
  ]
}
{
  "index": 387,
  "doc": "SYSDATE([precision])\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 55,
      "doc": "SYSDATE([fsp]),Date and Time Functions"
    },
    {
      "index": 23,
      "doc": "DATE(expr),Date and Time Functions"
    },
    {
      "index": 64,
      "doc": "TO_SECONDS(expr),Date and Time Functions"
    },
    {
      "index": 61,
      "doc": "TIMESTAMPADD(unit,interval,datetime_expr),Date and Time Functions"
    }
  ]
}
{
  "index": 388,
  "doc": "SYSTEM_USER()\n,Information Functions",
  "mapping docs": [
    {
      "index": 101,
      "doc": "SYSTEM_USER(),Information Functions"
    },
    {
      "index": 102,
      "doc": "USER(),Information Functions"
    },
    {
      "index": 94,
      "doc": "CURRENT_USER(),Information Functions"
    },
    {
      "index": 100,
      "doc": "SESSION_USER(),Information Functions"
    }
  ]
}
{
  "index": 389,
  "doc": "sys.sys_get_config(name,default)\n,No Category",
  "mapping docs": [
    {
      "index": 173,
      "doc": "DEFAULT(),Miscellaneous Functions"
    },
    {
      "index": 184,
      "doc": "NAME_CONST(),Miscellaneous Functions"
    },
    {
      "index": 218,
      "doc": "MAKE_SET(),String Functions"
    },
    {
      "index": 176,
      "doc": "INET_NTOA(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 390,
  "doc": "SYS_GUID()\n,Miscellaneous Functions",
  "mapping docs": [
    {
      "index": 183,
      "doc": "IS_UUID(),Miscellaneous Functions"
    },
    {
      "index": 101,
      "doc": "SYSTEM_USER(),Information Functions"
    },
    {
      "index": 187,
      "doc": "UUID_TO_BIN,Miscellaneous Functions"
    },
    {
      "index": 186,
      "doc": "UUID(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 391,
  "doc": "TAN(X)\n,Numeric Functions",
  "mapping docs": [
    {
      "index": 169,
      "doc": "TAN(X),Mathematical Functions"
    },
    {
      "index": 150,
      "doc": "COT(X),Mathematical Functions"
    },
    {
      "index": 145,
      "doc": "ATAN(Y,X),Mathematical Functions"
    },
    {
      "index": 144,
      "doc": "ATAN(X),Mathematical Functions"
    }
  ]
}
{
  "index": 392,
  "doc": "TIME(expr)\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 56,
      "doc": "TIME(expr),Date and Time Functions"
    },
    {
      "index": 23,
      "doc": "DATE(expr),Date and Time Functions"
    },
    {
      "index": 16,
      "doc": "ADDTIME(expr1,expr2),Date and Time Functions"
    },
    {
      "index": 59,
      "doc": "TIMEDIFF(expr1,expr2),Date and Time Functions"
    }
  ]
}
{
  "index": 393,
  "doc": "TIMEDIFF(expr1,expr2)\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 59,
      "doc": "TIMEDIFF(expr1,expr2),Date and Time Functions"
    },
    {
      "index": 27,
      "doc": "DATEDIFF(expr1,expr2),Date and Time Functions"
    },
    {
      "index": 62,
      "doc": "TIMESTAMPDIFF(unit,datetime_expr1,datetime_expr2),Date and Time Functions"
    },
    {
      "index": 16,
      "doc": "ADDTIME(expr1,expr2),Date and Time Functions"
    }
  ]
}
{
  "index": 394,
  "doc": "TIMESTAMP(expr), TIMESTAMP(expr1,expr2)\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 62,
      "doc": "TIMESTAMPDIFF(unit,datetime_expr1,datetime_expr2),Date and Time Functions"
    },
    {
      "index": 16,
      "doc": "ADDTIME(expr1,expr2),Date and Time Functions"
    },
    {
      "index": 54,
      "doc": "SUBTIME(expr1,expr2),Date and Time Functions"
    },
    {
      "index": 23,
      "doc": "DATE(expr),Date and Time Functions"
    }
  ]
}
{
  "index": 395,
  "doc": "TIMESTAMPADD(unit,interval,datetime_expr)\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 61,
      "doc": "TIMESTAMPADD(unit,interval,datetime_expr),Date and Time Functions"
    },
    {
      "index": 62,
      "doc": "TIMESTAMPDIFF(unit,datetime_expr1,datetime_expr2),Date and Time Functions"
    },
    {
      "index": 15,
      "doc": "ADDDATE(date,INTERVAL\n          expr\nunit),Date and Time Functions"
    },
    {
      "index": 24,
      "doc": "DATE_ADD(date,INTERVAL\n          expr\nunit),Date and Time Functions"
    }
  ]
}
{
  "index": 396,
  "doc": "TIMESTAMPDIFF(unit,datetime_expr1,datetime_expr2)\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 62,
      "doc": "TIMESTAMPDIFF(unit,datetime_expr1,datetime_expr2),Date and Time Functions"
    },
    {
      "index": 59,
      "doc": "TIMEDIFF(expr1,expr2),Date and Time Functions"
    },
    {
      "index": 27,
      "doc": "DATEDIFF(expr1,expr2),Date and Time Functions"
    },
    {
      "index": 16,
      "doc": "ADDTIME(expr1,expr2),Date and Time Functions"
    }
  ]
}
{
  "index": 397,
  "doc": "TIME_FORMAT(time,format)\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 57,
      "doc": "TIME_FORMAT(time,format),Date and Time Functions"
    },
    {
      "index": 25,
      "doc": "DATE_FORMAT(date,format),Date and Time Functions"
    },
    {
      "index": 52,
      "doc": "STR_TO_DATE(str,format),Date and Time Functions"
    },
    {
      "index": 35,
      "doc": "FROM_UNIXTIME(unix_timestamp[,format]),Date and Time Functions"
    }
  ]
}
{
  "index": 398,
  "doc": "TIME_TO_SEC(time)\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 58,
      "doc": "TIME_TO_SEC(time),Date and Time Functions"
    },
    {
      "index": 50,
      "doc": "SEC_TO_TIME(seconds),Date and Time Functions"
    },
    {
      "index": 57,
      "doc": "TIME_FORMAT(time,format),Date and Time Functions"
    },
    {
      "index": 43,
      "doc": "MINUTE(time),Date and Time Functions"
    }
  ]
}
{
  "index": 399,
  "doc": "Touches(g1,g2)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 145,
      "doc": "ATAN(Y,X),Mathematical Functions"
    },
    {
      "index": 144,
      "doc": "ATAN(X),Mathematical Functions"
    },
    {
      "index": 163,
      "doc": "RADIANS(X),Mathematical Functions"
    },
    {
      "index": 160,
      "doc": "PI(),Mathematical Functions"
    }
  ]
}
{
  "index": 400,
  "doc": "TO_BASE64(str)\n,String Functions",
  "mapping docs": [
    {
      "index": 244,
      "doc": "TO_BASE64(),String Functions"
    },
    {
      "index": 206,
      "doc": "FROM_BASE64(),String Functions"
    },
    {
      "index": 222,
      "doc": "OCT(),String Functions"
    },
    {
      "index": 196,
      "doc": "CHAR(),String Functions"
    }
  ]
}
{
  "index": 401,
  "doc": "TO_CHAR(expr[, fmt])\n,String Functions",
  "mapping docs": [
    {
      "index": 196,
      "doc": "CHAR(),String Functions"
    },
    {
      "index": 197,
      "doc": "CHAR_LENGTH(),String Functions"
    },
    {
      "index": 217,
      "doc": "LTRIM(),String Functions"
    },
    {
      "index": 193,
      "doc": "ASCII(),String Functions"
    }
  ]
}
{
  "index": 402,
  "doc": "TO_DAYS(date)\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 63,
      "doc": "TO_DAYS(date),Date and Time Functions"
    },
    {
      "index": 70,
      "doc": "WEEKDAY(date),Date and Time Functions"
    },
    {
      "index": 28,
      "doc": "DAY(date),Date and Time Functions"
    },
    {
      "index": 29,
      "doc": "DAYNAME(date),Date and Time Functions"
    }
  ]
}
{
  "index": 403,
  "doc": "TO_SECONDS(expr)\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 64,
      "doc": "TO_SECONDS(expr),Date and Time Functions"
    },
    {
      "index": 56,
      "doc": "TIME(expr),Date and Time Functions"
    },
    {
      "index": 16,
      "doc": "ADDTIME(expr1,expr2),Date and Time Functions"
    },
    {
      "index": 23,
      "doc": "DATE(expr),Date and Time Functions"
    }
  ]
}
{
  "index": 404,
  "doc": "TRIM([{BOTH | LEADING | TRAILING} [remstr] FROM] str), TRIM([remstr FROM] str)\nFrom MariaDB 10.3.6TRIM_ORACLE([{BOTH | LEADING | TRAILING} [remstr] FROM] str), TRIM([remstr FROM] str)\n,String Functions",
  "mapping docs": [
    {
      "index": 246,
      "doc": "TRIM(),String Functions"
    },
    {
      "index": 231,
      "doc": "REGEXP_SUBSTR(),String Functions"
    },
    {
      "index": 230,
      "doc": "REGEXP_REPLACE(),String Functions"
    },
    {
      "index": 211,
      "doc": "LEFT(),String Functions"
    }
  ]
}
{
  "index": 405,
  "doc": "TRUNCATE(X,D)\n,Numeric Functions",
  "mapping docs": [
    {
      "index": 170,
      "doc": "TRUNCATE(X,D),Mathematical Functions"
    },
    {
      "index": 161,
      "doc": "POW(X,Y),Mathematical Functions"
    },
    {
      "index": 154,
      "doc": "FLOOR(X),Mathematical Functions"
    },
    {
      "index": 168,
      "doc": "SQRT(X),Mathematical Functions"
    }
  ]
}
{
  "index": 406,
  "doc": "UCASE(str)\n,String Functions",
  "mapping docs": [
    {
      "index": 247,
      "doc": "UCASE(),String Functions"
    },
    {
      "index": 210,
      "doc": "LCASE(),String Functions"
    },
    {
      "index": 193,
      "doc": "ASCII(),String Functions"
    },
    {
      "index": 196,
      "doc": "CHAR(),String Functions"
    }
  ]
}
{
  "index": 407,
  "doc": "UNCOMPRESS(string_to_uncompress)\n,Encryption, Hashing and Compression Functions",
  "mapping docs": [
    {
      "index": 84,
      "doc": "UNCOMPRESS(),Encryption and Compression Functions"
    },
    {
      "index": 76,
      "doc": "COMPRESS(),Encryption and Compression Functions"
    },
    {
      "index": 82,
      "doc": "SHA2(),Encryption and Compression Functions"
    },
    {
      "index": 81,
      "doc": "SHA1(),Encryption and Compression Functions"
    }
  ]
}
{
  "index": 408,
  "doc": "UNCOMPRESSED_LENGTH(compressed_string)\n,Encryption, Hashing and Compression Functions",
  "mapping docs": [
    {
      "index": 85,
      "doc": "UNCOMPRESSED_LENGTH(),Encryption and Compression Functions"
    },
    {
      "index": 76,
      "doc": "COMPRESS(),Encryption and Compression Functions"
    },
    {
      "index": 79,
      "doc": "RANDOM_BYTES(),Encryption and Compression Functions"
    },
    {
      "index": 82,
      "doc": "SHA2(),Encryption and Compression Functions"
    }
  ]
}
{
  "index": 409,
  "doc": "UNHEX(str)\n,String Functions",
  "mapping docs": [
    {
      "index": 248,
      "doc": "UNHEX(),String Functions"
    },
    {
      "index": 207,
      "doc": "HEX(),String Functions"
    },
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 193,
      "doc": "ASCII(),String Functions"
    }
  ]
}
{
  "index": 410,
  "doc": "UNIX_TIMESTAMP()\nUNIX_TIMESTAMP(date)\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 35,
      "doc": "FROM_UNIXTIME(unix_timestamp[,format]),Date and Time Functions"
    },
    {
      "index": 65,
      "doc": "UNIX_TIMESTAMP([date]),Date and Time Functions"
    },
    {
      "index": 60,
      "doc": "TIMESTAMP(expr),Date and Time Functions"
    },
    {
      "index": 68,
      "doc": "UTC_TIMESTAMP,Date and Time Functions"
    }
  ]
}
{
  "index": 411,
  "doc": "UpdateXML(xml_target, xpath_expr, new_xml)\n,String Functions",
  "mapping docs": [
    {
      "index": 233,
      "doc": "REPLACE(),String Functions"
    },
    {
      "index": 230,
      "doc": "REGEXP_REPLACE(),String Functions"
    },
    {
      "index": 208,
      "doc": "INSERT(),String Functions"
    },
    {
      "index": 200,
      "doc": "CONCAT_WS(),String Functions"
    }
  ]
}
{
  "index": 412,
  "doc": "UPPER(str)\nUCASE(str)\n,String Functions",
  "mapping docs": [
    {
      "index": 247,
      "doc": "UCASE(),String Functions"
    },
    {
      "index": 249,
      "doc": "UPPER(),String Functions"
    },
    {
      "index": 210,
      "doc": "LCASE(),String Functions"
    },
    {
      "index": 241,
      "doc": "SUBSTR(),String Functions"
    }
  ]
}
{
  "index": 413,
  "doc": "USER()\n,Information Functions",
  "mapping docs": [
    {
      "index": 94,
      "doc": "CURRENT_USER(),Information Functions"
    },
    {
      "index": 102,
      "doc": "USER(),Information Functions"
    },
    {
      "index": 101,
      "doc": "SYSTEM_USER(),Information Functions"
    },
    {
      "index": 100,
      "doc": "SESSION_USER(),Information Functions"
    }
  ]
}
{
  "index": 414,
  "doc": "UTC_DATE, UTC_DATE()\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 66,
      "doc": "UTC_DATE,Date and Time Functions"
    },
    {
      "index": 67,
      "doc": "UTC_TIME,Date and Time Functions"
    },
    {
      "index": 68,
      "doc": "UTC_TIMESTAMP,Date and Time Functions"
    },
    {
      "index": 23,
      "doc": "DATE(expr),Date and Time Functions"
    }
  ]
}
{
  "index": 415,
  "doc": "UTC_TIME\nUTC_TIME([precision])\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 66,
      "doc": "UTC_DATE,Date and Time Functions"
    },
    {
      "index": 67,
      "doc": "UTC_TIME,Date and Time Functions"
    },
    {
      "index": 68,
      "doc": "UTC_TIMESTAMP,Date and Time Functions"
    },
    {
      "index": 38,
      "doc": "LOCALTIME,Date and Time Functions"
    }
  ]
}
{
  "index": 416,
  "doc": "UTC_TIMESTAMP\nUTC_TIMESTAMP([precision])\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 68,
      "doc": "UTC_TIMESTAMP,Date and Time Functions"
    },
    {
      "index": 66,
      "doc": "UTC_DATE,Date and Time Functions"
    },
    {
      "index": 67,
      "doc": "UTC_TIME,Date and Time Functions"
    },
    {
      "index": 65,
      "doc": "UNIX_TIMESTAMP([date]),Date and Time Functions"
    }
  ]
}
{
  "index": 417,
  "doc": "UUID()\n,Miscellaneous Functions",
  "mapping docs": [
    {
      "index": 186,
      "doc": "UUID(),Miscellaneous Functions"
    },
    {
      "index": 183,
      "doc": "IS_UUID(),Miscellaneous Functions"
    },
    {
      "index": 187,
      "doc": "UUID_TO_BIN,Miscellaneous Functions"
    },
    {
      "index": 172,
      "doc": "BIN_TO_UUID(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 418,
  "doc": "UUID_SHORT()\n,Miscellaneous Functions",
  "mapping docs": [
    {
      "index": 186,
      "doc": "UUID(),Miscellaneous Functions"
    },
    {
      "index": 183,
      "doc": "IS_UUID(),Miscellaneous Functions"
    },
    {
      "index": 172,
      "doc": "BIN_TO_UUID(),Miscellaneous Functions"
    },
    {
      "index": 187,
      "doc": "UUID_TO_BIN,Miscellaneous Functions"
    }
  ]
}
{
  "index": 419,
  "doc": "MariaDB starting with 10.3.3VALUE(col_name) \nMariaDB until 10.3.2VALUES(col_name) \n,Miscellaneous Functions",
  "mapping docs": [
    {
      "index": 252,
      "doc": "TIDB_BOUNDED_STALENESS,TiDB Specific Functions"
    },
    {
      "index": 191,
      "doc": "SETVAL(),Sequence Functions"
    },
    {
      "index": 189,
      "doc": "NEXTVAL(),Sequence Functions"
    },
    {
      "index": 95,
      "doc": "DATABASE(),Information Functions"
    }
  ]
}
{
  "index": 420,
  "doc": "VARIANCE(expr) \n,Aggregate Functions",
  "mapping docs": [
    {
      "index": 9,
      "doc": "VAR_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 7,
      "doc": "VAR_POP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 2,
      "doc": "SUM([DISTINCT]\n            expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 3,
      "doc": "AVG([DISTINCT]\n            expr)\n            [over_clause],Aggregate Functions"
    }
  ]
}
{
  "index": 421,
  "doc": "VAR_POP(expr)\n,Aggregate Functions",
  "mapping docs": [
    {
      "index": 7,
      "doc": "VAR_POP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 9,
      "doc": "VAR_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 3,
      "doc": "AVG([DISTINCT]\n            expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 0,
      "doc": "COUNT(expr)\n            [over_clause],Aggregate Functions"
    }
  ]
}
{
  "index": 422,
  "doc": "VAR_SAMP(expr)\n,Aggregate Functions",
  "mapping docs": [
    {
      "index": 9,
      "doc": "VAR_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 10,
      "doc": "STDDEV_SAMP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 7,
      "doc": "VAR_POP(expr)\n            [over_clause],Aggregate Functions"
    },
    {
      "index": 3,
      "doc": "AVG([DISTINCT]\n            expr)\n            [over_clause],Aggregate Functions"
    }
  ]
}
{
  "index": 423,
  "doc": "VEC_DISTANCE(v, s)\n,Vector Functions",
  "mapping docs": [
    {
      "index": 148,
      "doc": "CONV(N,from_base,to_base),Mathematical Functions"
    },
    {
      "index": 145,
      "doc": "ATAN(Y,X),Mathematical Functions"
    },
    {
      "index": 144,
      "doc": "ATAN(X),Mathematical Functions"
    },
    {
      "index": 163,
      "doc": "RADIANS(X),Mathematical Functions"
    }
  ]
}
{
  "index": 424,
  "doc": "VEC_FromText(s)\n,Vector Functions",
  "mapping docs": [
    {
      "index": 148,
      "doc": "CONV(N,from_base,to_base),Mathematical Functions"
    },
    {
      "index": 245,
      "doc": "TRANSLATE(),String Functions"
    },
    {
      "index": 250,
      "doc": "WEIGHT_STRING(),String Functions"
    },
    {
      "index": 201,
      "doc": "ELT(),String Functions"
    }
  ]
}
{
  "index": 425,
  "doc": "VEC_ToText(v)\n,Vector Functions",
  "mapping docs": [
    {
      "index": 148,
      "doc": "CONV(N,from_base,to_base),Mathematical Functions"
    },
    {
      "index": 245,
      "doc": "TRANSLATE(),String Functions"
    },
    {
      "index": 201,
      "doc": "ELT(),String Functions"
    },
    {
      "index": 250,
      "doc": "WEIGHT_STRING(),String Functions"
    }
  ]
}
{
  "index": 426,
  "doc": "VERSION()\n,Information Functions",
  "mapping docs": [
    {
      "index": 103,
      "doc": "VERSION(),Information Functions"
    },
    {
      "index": 95,
      "doc": "DATABASE(),Information Functions"
    },
    {
      "index": 94,
      "doc": "CURRENT_USER(),Information Functions"
    },
    {
      "index": 93,
      "doc": "CURRENT_ROLE(),Information Functions"
    }
  ]
}
{
  "index": 427,
  "doc": "sys.version_major()\n,No Category",
  "mapping docs": [
    {
      "index": 103,
      "doc": "VERSION(),Information Functions"
    },
    {
      "index": 264,
      "doc": "TIDB_VERSION,TiDB Specific Functions"
    },
    {
      "index": 101,
      "doc": "SYSTEM_USER(),Information Functions"
    },
    {
      "index": 139,
      "doc": "RELEASE_LOCK(str),Locking Functions"
    }
  ]
}
{
  "index": 428,
  "doc": "sys.version_minor()\n,No Category",
  "mapping docs": [
    {
      "index": 103,
      "doc": "VERSION(),Information Functions"
    },
    {
      "index": 264,
      "doc": "TIDB_VERSION,TiDB Specific Functions"
    },
    {
      "index": 139,
      "doc": "RELEASE_LOCK(str),Locking Functions"
    },
    {
      "index": 171,
      "doc": "ANY_VALUE(),Miscellaneous Functions"
    }
  ]
}
{
  "index": 429,
  "doc": "sys.version_patch()\n,No Category",
  "mapping docs": [
    {
      "index": 103,
      "doc": "VERSION(),Information Functions"
    },
    {
      "index": 139,
      "doc": "RELEASE_LOCK(str),Locking Functions"
    },
    {
      "index": 187,
      "doc": "UUID_TO_BIN,Miscellaneous Functions"
    },
    {
      "index": 264,
      "doc": "TIDB_VERSION,TiDB Specific Functions"
    }
  ]
}
{
  "index": 430,
  "doc": "WEEK(date[,mode])\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 69,
      "doc": "WEEK(date[,mode]),Date and Time Functions"
    },
    {
      "index": 71,
      "doc": "WEEKOFYEAR(date),Date and Time Functions"
    },
    {
      "index": 73,
      "doc": "YEARWEEK(date),Date and Time Functions"
    },
    {
      "index": 31,
      "doc": "DAYOFWEEK(date),Date and Time Functions"
    }
  ]
}
{
  "index": 431,
  "doc": "WEEKDAY(date)\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 70,
      "doc": "WEEKDAY(date),Date and Time Functions"
    },
    {
      "index": 31,
      "doc": "DAYOFWEEK(date),Date and Time Functions"
    },
    {
      "index": 69,
      "doc": "WEEK(date[,mode]),Date and Time Functions"
    },
    {
      "index": 73,
      "doc": "YEARWEEK(date),Date and Time Functions"
    }
  ]
}
{
  "index": 432,
  "doc": "WEEKOFYEAR(date)\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 71,
      "doc": "WEEKOFYEAR(date),Date and Time Functions"
    },
    {
      "index": 73,
      "doc": "YEARWEEK(date),Date and Time Functions"
    },
    {
      "index": 31,
      "doc": "DAYOFWEEK(date),Date and Time Functions"
    },
    {
      "index": 69,
      "doc": "WEEK(date[,mode]),Date and Time Functions"
    }
  ]
}
{
  "index": 433,
  "doc": "WEIGHT_STRING(str [AS {CHAR|BINARY}(N)] [LEVEL levels] [flags])\n  levels: N [ASC|DESC|REVERSE] [, N [ASC|DESC|REVERSE]] ... \n,String Functions",
  "mapping docs": [
    {
      "index": 250,
      "doc": "WEIGHT_STRING(),String Functions"
    },
    {
      "index": 193,
      "doc": "ASCII(),String Functions"
    },
    {
      "index": 240,
      "doc": "STRCMP(),String Functions"
    },
    {
      "index": 196,
      "doc": "CHAR(),String Functions"
    }
  ]
}
{
  "index": 434,
  "doc": "Within(g1,g2)\n,Geographic Functions",
  "mapping docs": [
    {
      "index": 162,
      "doc": "POWER(X,Y),Mathematical Functions"
    },
    {
      "index": 147,
      "doc": "CEILING(X),Mathematical Functions"
    },
    {
      "index": 160,
      "doc": "PI(),Mathematical Functions"
    },
    {
      "index": 154,
      "doc": "FLOOR(X),Mathematical Functions"
    }
  ]
}
{
  "index": 435,
  "doc": "WSREP_LAST_SEEN_GTID()\n,Galera Functions",
  "mapping docs": [
    {
      "index": 270,
      "doc": "LAST_VALUE(),Window Functions"
    },
    {
      "index": 273,
      "doc": "NTILE(),Window Functions"
    },
    {
      "index": 266,
      "doc": "CUME_DIST(),Window Functions"
    },
    {
      "index": 272,
      "doc": "NTH_VALUE(),Window Functions"
    }
  ]
}
{
  "index": 436,
  "doc": "WSREP_LAST_WRITTEN_GTID()\n,Galera Functions",
  "mapping docs": [
    {
      "index": 270,
      "doc": "LAST_VALUE(),Window Functions"
    },
    {
      "index": 97,
      "doc": "LAST_INSERT_ID(),Information Functions"
    },
    {
      "index": 272,
      "doc": "NTH_VALUE(),Window Functions"
    },
    {
      "index": 273,
      "doc": "NTILE(),Window Functions"
    }
  ]
}
{
  "index": 437,
  "doc": "WSREP_SYNC_WAIT_UPTO_GTID(gtid[,timeout])\n,Galera Functions",
  "mapping docs": [
    {
      "index": 185,
      "doc": "SLEEP(),Miscellaneous Functions"
    },
    {
      "index": 136,
      "doc": "GET_LOCK(str,timeout),Locking Functions"
    },
    {
      "index": 269,
      "doc": "LAG(),Window Functions"
    },
    {
      "index": 140,
      "doc": "RELEASE_ALL_LOCKS(),Locking Functions"
    }
  ]
}
{
  "index": 438,
  "doc": "YEAR(date)\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 72,
      "doc": "YEAR(date),Date and Time Functions"
    },
    {
      "index": 32,
      "doc": "DAYOFYEAR(date),Date and Time Functions"
    },
    {
      "index": 40,
      "doc": "MAKEDATE(year,dayofyear),Date and Time Functions"
    },
    {
      "index": 23,
      "doc": "DATE(expr),Date and Time Functions"
    }
  ]
}
{
  "index": 439,
  "doc": "YEARWEEK(date), YEARWEEK(date,mode)\n,Date & Time Functions",
  "mapping docs": [
    {
      "index": 69,
      "doc": "WEEK(date[,mode]),Date and Time Functions"
    },
    {
      "index": 73,
      "doc": "YEARWEEK(date),Date and Time Functions"
    },
    {
      "index": 71,
      "doc": "WEEKOFYEAR(date),Date and Time Functions"
    },
    {
      "index": 31,
      "doc": "DAYOFWEEK(date),Date and Time Functions"
    }
  ]
}
