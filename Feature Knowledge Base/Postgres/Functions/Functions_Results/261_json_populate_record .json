{
    "HTML": [
        "https://www.postgresql.org/docs/current/functions-json.html"
    ],
    "Title": [
        "json_populate_record"
    ],
    "Feature": [
        "json_populate_record ( base anyelement, from_json json ) → anyelement",
        "jsonb_populate_record ( base anyelement, from_json jsonb ) → anyelement"
    ],
    "Description": [
        "Expands the top-level JSON object to a row having the composite type of the base argument. The JSON object is scanned for fields whose names match column names of the output row type, and their values are inserted into those columns of the output. (Fields that do not correspond to any output column name are ignored.) In typical use, the value of base is just NULL, which means that any output columns that do not match any object field will be filled with nulls. However, if base isn't NULL then the values it contains will be used for unmatched columns.",
        "To convert a JSON value to the SQL type of an output column, the following rules are applied in sequence:",
        "A JSON null value is converted to an SQL null in all cases.",
        "If the output column is of type json or jsonb, the JSON value is just reproduced exactly.",
        "If the output column is a composite (row) type, and the JSON value is a JSON object, the fields of the object are converted to columns of the output row type by recursive application of these rules.",
        "Likewise, if the output column is an array type and the JSON value is a JSON array, the elements of the JSON array are converted to elements of the output array by recursive application of these rules.",
        "Otherwise, if the JSON value is a string, the contents of the string are fed to the input conversion function for the column's data type.",
        "Otherwise, the ordinary text representation of the JSON value is fed to the input conversion function for the column's data type.",
        "While the example below uses a constant JSON value, typical use would be to reference a json or jsonb column laterally from another table in the query's FROM clause. Writing json_populate_record in the FROM clause is good practice, since all of the extracted columns are available for use without duplicate function calls.",
        "create type subrowtype as (d int, e text); create type myrowtype as (a int, b text[], c subrowtype);"
    ],
    "Examples": [
        "select * from json_populate_record(null::myrowtype, '{\"a\": 1, \"b\": [\"2\", \"a b\"], \"c\": {\"d\": 4, \"e\": \"a b c\"}, \"x\": \"foo\"}') →"
    ],
    "Category": [
        "JSON Functions and Operators"
    ]
}