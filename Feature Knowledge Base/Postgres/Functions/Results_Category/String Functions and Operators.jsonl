{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["string_to_table"], "Feature": ["string_to_table ( string text, delimiter text [, null_string text ] ) \u2192 setof text"], "Description": ["Splits the string at occurrences of delimiter and returns the resulting fields as a set of text rows. If delimiter is NULL, each character in the string will become a separate row of the result. If delimiter is an empty string, then the string is treated as a single field. If null_string is supplied and is not NULL, fields matching that string are replaced by NULL."], "Examples": ["string_to_table('xx~^~yy~^~zz', '~^~', 'yy') \u2192"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["strpos"], "Feature": ["strpos ( string text, substring text ) \u2192 integer"], "Description": ["Returns first starting index of the specified substring within string, or zero if it's not present. (Same as position(substring in string), but note the reversed argument order.)"], "Examples": ["strpos('high', 'ig') \u2192 2"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["substr"], "Feature": ["substr ( string text, start integer [, count integer ] ) \u2192 text"], "Description": ["Extracts the substring of string starting at the start'th character, and extending for count characters if that is specified. (Same as substring(string from start for count).)"], "Examples": ["substr('alphabet', 3) \u2192 phabet", "substr('alphabet', 3, 2) \u2192 ph"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["to_ascii"], "Feature": ["to_ascii ( string text ) \u2192 text", "to_ascii ( string text, encoding name ) \u2192 text", "to_ascii ( string text, encoding integer ) \u2192 text"], "Description": ["Converts string to ASCII from another encoding, which may be identified by name or number. If encoding is omitted the database encoding is assumed (which in practice is the only useful case). The conversion consists primarily of dropping accents. Conversion is only supported from LATIN1, LATIN2, LATIN9, and WIN1250 encodings. (See the unaccent module for another, more flexible solution.)"], "Examples": ["to_ascii('Kar\u00e9l') \u2192 Karel"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["to_hex"], "Feature": ["to_hex ( integer ) \u2192 text", "to_hex ( bigint ) \u2192 text"], "Description": ["Converts the number to its equivalent hexadecimal representation."], "Examples": ["to_hex(2147483647) \u2192 7fffffff"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["translate"], "Feature": ["translate ( string text, from text, to text ) \u2192 text"], "Description": ["Replaces each character in string that matches a character in the from set with the corresponding character in the to set. If from is longer than to, occurrences of the extra characters in from are deleted."], "Examples": ["translate('12345', '143', 'ax') \u2192 a2x5"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["unistr"], "Feature": ["unistr ( text ) \u2192 text"], "Description": ["Evaluate escaped Unicode characters in the argument. Unicode characters can be specified as \\XXXX (4 hexadecimal digits), \\+XXXXXX (6 hexadecimal digits), \\uXXXX (4 hexadecimal digits), or \\UXXXXXXXX (8 hexadecimal digits). To specify a backslash, write two backslashes. All other characters are taken literally.", "If the server encoding is not UTF-8, the Unicode code point identified by one of these escape sequences is converted to the actual server encoding; an error is reported if that's not possible.", "This function provides a (non-standard) alternative to string constants with Unicode escapes (see Section\u00a04.1.2.3)."], "Examples": ["unistr('d\\0061t\\+000061') \u2192 data", "unistr('d\\u0061t\\U00000061') \u2192 data"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["btrim"], "Feature": ["btrim ( string text [, characters text ] ) \u2192 text"], "Description": ["Removes the longest string containing only characters in characters (a space by default) from the start and end of string."], "Examples": ["btrim('xyxtrimyyx', 'xyz') \u2192 trim"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["bit_length"], "Feature": ["bit_length ( text ) \u2192 integer"], "Description": ["Returns number of bits in the string (8 times the octet_length)."], "Examples": ["bit_length('jose') \u2192 32"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["char_length"], "Feature": ["char_length ( text ) \u2192 integer", "character_length ( text ) \u2192 integer"], "Description": ["Returns number of characters in the string."], "Examples": ["char_length('jos\u00e9') \u2192 4"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["lower"], "Feature": ["lower ( text ) \u2192 text"], "Description": ["Converts the string to all lower case, according to the rules of the database's locale."], "Examples": ["lower('TOM') \u2192 tom"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["lpad"], "Feature": ["lpad ( string text, length integer [, fill text ] ) \u2192 text"], "Description": ["Extends the string to length length by prepending the characters fill (a space by default). If the string is already longer than length then it is truncated (on the right)."], "Examples": ["lpad('hi', 5, 'xy') \u2192 xyxhi"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["ltrim"], "Feature": ["ltrim ( string text [, characters text ] ) \u2192 text"], "Description": ["Removes the longest string containing only characters in characters (a space by default) from the start of string."], "Examples": ["ltrim('zzzytest', 'xyz') \u2192 test"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["normalize"], "Feature": ["normalize ( text [, form ] ) \u2192 text"], "Description": ["Converts the string to the specified Unicode normalization form. The optional form key word specifies the form: NFC (the default), NFD, NFKC, or NFKD. This function can only be used when the server encoding is UTF8."], "Examples": ["normalize(U&'\\0061\\0308bc', NFC) \u2192 U&'\\00E4bc'"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["octet_length"], "Feature": ["octet_length ( character ) \u2192 integer"], "Description": ["Returns number of bytes in the string. Since this version of the function accepts type character directly, it will not strip trailing spaces."], "Examples": ["octet_length('abc '::character(4)) \u2192 4"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["overlay"], "Feature": ["overlay ( string text PLACING newsubstring text FROM start integer [ FOR count integer ] ) \u2192 text"], "Description": ["Replaces the substring of string that starts at the start'th character and extends for count characters with newsubstring. If count is omitted, it defaults to the length of newsubstring."], "Examples": ["overlay('Txxxxas' placing 'hom' from 2 for 4) \u2192 Thomas"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["position"], "Feature": ["position ( substring text IN string text ) \u2192 integer"], "Description": ["Returns first starting index of the specified substring within string, or zero if it's not present."], "Examples": ["position('om' in 'Thomas') \u2192 3"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["rpad"], "Feature": ["rpad ( string text, length integer [, fill text ] ) \u2192 text"], "Description": ["Extends the string to length length by appending the characters fill (a space by default). If the string is already longer than length then it is truncated."], "Examples": ["rpad('hi', 5, 'xy') \u2192 hixyx"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["rtrim"], "Feature": ["rtrim ( string text [, characters text ] ) \u2192 text"], "Description": ["Removes the longest string containing only characters in characters (a space by default) from the end of string."], "Examples": ["rtrim('testxxzx', 'xyz') \u2192 test"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["substring"], "Feature": ["substring ( string text SIMILAR pattern text ESCAPE escape text ) \u2192 text", "substring ( string text FROM pattern text FOR escape text ) \u2192 text"], "Description": ["Extracts the first substring matching SQL regular expression; see Section\u00a09.7.2. The first form has been specified since SQL:2003; the second form was only in SQL:1999 and should be considered obsolete."], "Examples": ["substring('Thomas' similar '%#\"o_a#\"_' escape '#') \u2192 oma"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["trim"], "Feature": ["trim ( [ LEADING | TRAILING | BOTH ] [ FROM ] string text [, characters text ] ) \u2192 text"], "Description": ["This is a non-standard syntax for trim()."], "Examples": ["trim(both from 'yxTomxx', 'xyz') \u2192 Tom"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["upper"], "Feature": ["upper ( text ) \u2192 text"], "Description": ["Converts the string to all upper case, according to the rules of the database's locale."], "Examples": ["upper('tom') \u2192 TOM"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["ascii"], "Feature": ["ascii ( text ) \u2192 integer"], "Description": ["Returns the numeric code of the first character of the argument. In UTF8 encoding, returns the Unicode code point of the character. In other multibyte encodings, the argument must be an ASCII character."], "Examples": ["ascii('x') \u2192 120"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["chr"], "Feature": ["chr ( integer ) \u2192 text"], "Description": ["Returns the character with the given code. In UTF8 encoding the argument is treated as a Unicode code point. In other multibyte encodings the argument must designate an ASCII character. chr(0) is disallowed because text data types cannot store that character."], "Examples": ["chr(65) \u2192 A"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["concat"], "Feature": ["concat ( val1 \"any\" [, val2 \"any\" [, ...] ] ) \u2192 text"], "Description": ["Concatenates the text representations of all the arguments. NULL arguments are ignored."], "Examples": ["concat('abcde', 2, NULL, 22) \u2192 abcde222"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["concat_ws"], "Feature": ["concat_ws ( sep text, val1 \"any\" [, val2 \"any\" [, ...] ] ) \u2192 text"], "Description": ["Concatenates all but the first argument, with separators. The first argument is used as the separator string, and should not be NULL. Other NULL arguments are ignored."], "Examples": ["concat_ws(',', 'abcde', 2, NULL, 22) \u2192 abcde,2,22"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["format"], "Feature": ["format ( formatstr text [, formatarg \"any\" [, ...] ] ) \u2192 text"], "Description": ["Formats arguments according to a format string; see Section\u00a09.4.1. This function is similar to the C function sprintf."], "Examples": ["format('Hello %s, %1$s', 'World') \u2192 Hello World, World"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["initcap"], "Feature": ["initcap ( text ) \u2192 text"], "Description": ["Converts the first letter of each word to upper case and the rest to lower case. Words are sequences of alphanumeric characters separated by non-alphanumeric characters."], "Examples": ["initcap('hi THOMAS') \u2192 Hi Thomas"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["left"], "Feature": ["left ( string text, n integer ) \u2192 text"], "Description": ["Returns first n characters in the string, or when n is negative, returns all but last |n| characters."], "Examples": ["left('abcde', 2) \u2192 ab"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["length"], "Feature": ["length ( text ) \u2192 integer"], "Description": ["Returns the number of characters in the string."], "Examples": ["length('jose') \u2192 4"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["md5"], "Feature": ["md5 ( text ) \u2192 text"], "Description": ["Computes the MD5 hash of the argument, with the result written in hexadecimal."], "Examples": ["md5('abc') \u2192 900150983cd24fb0\u200bd6963f7d28e17f72"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["parse_ident"], "Feature": ["parse_ident ( qualified_identifier text [, strict_mode boolean DEFAULT true ] ) \u2192 text[]"], "Description": ["Splits qualified_identifier into an array of identifiers, removing any quoting of individual identifiers. By default, extra characters after the last identifier are considered an error; but if the second parameter is false, then such extra characters are ignored. (This behavior is useful for parsing names for objects like functions.) Note that this function does not truncate over-length identifiers. If you want truncation you can cast the result to name[]."], "Examples": ["parse_ident('\"SomeSchema\".someTable') \u2192 {SomeSchema,sometable}"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["pg_client_encoding"], "Feature": ["pg_client_encoding ( ) \u2192 name"], "Description": ["Returns current client encoding name."], "Examples": ["pg_client_encoding() \u2192 UTF8"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["quote_ident"], "Feature": ["quote_ident ( text ) \u2192 text"], "Description": ["Returns the given string suitably quoted to be used as an identifier in an SQL statement string. Quotes are added only if necessary (i.e., if the string contains non-identifier characters or would be case-folded). Embedded quotes are properly doubled. See also Example\u00a043.1."], "Examples": ["quote_ident('Foo bar') \u2192 \"Foo bar\""], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["quote_literal"], "Feature": ["quote_literal ( anyelement ) \u2192 text"], "Description": ["Converts the given value to text and then quotes it as a literal. Embedded single-quotes and backslashes are properly doubled."], "Examples": ["quote_literal(42.5) \u2192 '42.5'"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["quote_nullable"], "Feature": ["quote_nullable ( anyelement ) \u2192 text"], "Description": ["Converts the given value to text and then quotes it as a literal; or, if the argument is null, returns NULL. Embedded single-quotes and backslashes are properly doubled."], "Examples": ["quote_nullable(42.5) \u2192 '42.5'"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["regexp_count"], "Feature": ["regexp_count ( string text, pattern text [, start integer [, flags text ] ] ) \u2192 integer"], "Description": ["Returns the number of times the POSIX regular expression pattern matches in the string; see Section\u00a09.7.3."], "Examples": ["regexp_count('123456789012', '\\d\\d\\d', 2) \u2192 3"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["regexp_instr"], "Feature": ["regexp_instr ( string text, pattern text [, start integer [, N integer [, endoption integer [, flags text [, subexpr integer ] ] ] ] ] ) \u2192 integer"], "Description": ["Returns the position within string where the N'th match of the POSIX regular expression pattern occurs, or zero if there is no such match; see Section\u00a09.7.3."], "Examples": ["regexp_instr('ABCDEF', 'c(.)(..)', 1, 1, 0, 'i') \u2192 3", "regexp_instr('ABCDEF', 'c(.)(..)', 1, 1, 0, 'i', 2) \u2192 5"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["regexp_like"], "Feature": ["regexp_like ( string text, pattern text [, flags text ] ) \u2192 boolean"], "Description": ["Checks whether a match of the POSIX regular expression pattern occurs within string; see Section\u00a09.7.3."], "Examples": ["regexp_like('Hello World', 'world$', 'i') \u2192 t"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["regexp_match"], "Feature": ["regexp_match ( string text, pattern text [, flags text ] ) \u2192 text[]"], "Description": ["Returns substrings within the first match of the POSIX regular expression pattern to the string; see Section\u00a09.7.3."], "Examples": ["regexp_match('foobarbequebaz', '(bar)(beque)') \u2192 {bar,beque}"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["regexp_matches"], "Feature": ["regexp_matches ( string text, pattern text [, flags text ] ) \u2192 setof text[]"], "Description": ["Returns substrings within the first match of the POSIX regular expression pattern to the string, or substrings within all such matches if the g flag is used; see Section\u00a09.7.3."], "Examples": ["regexp_matches('foobarbequebaz', 'ba.', 'g') \u2192"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["regexp_replace"], "Feature": ["regexp_replace ( string text, pattern text, replacement text, start integer, N integer [, flags text ] ) \u2192 text"], "Description": ["Replaces the substring that is the N'th match to the POSIX regular expression pattern, or all such matches if N is zero; see Section\u00a09.7.3."], "Examples": ["regexp_replace('Thomas', '.', 'X', 3, 2) \u2192 ThoXas"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["regexp_split_to_array"], "Feature": ["regexp_split_to_array ( string text, pattern text [, flags text ] ) \u2192 text[]"], "Description": ["Splits string using a POSIX regular expression as the delimiter, producing an array of results; see Section\u00a09.7.3."], "Examples": ["regexp_split_to_array('hello world', '\\s+') \u2192 {hello,world}"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["regexp_split_to_table"], "Feature": ["regexp_split_to_table ( string text, pattern text [, flags text ] ) \u2192 setof text"], "Description": ["Splits string using a POSIX regular expression as the delimiter, producing a set of results; see Section\u00a09.7.3."], "Examples": ["regexp_split_to_table('hello world', '\\s+') \u2192"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["regexp_substr"], "Feature": ["regexp_substr ( string text, pattern text [, start integer [, N integer [, flags text [, subexpr integer ] ] ] ] ) \u2192 text"], "Description": ["Returns the substring within string that matches the N'th occurrence of the POSIX regular expression pattern, or NULL if there is no such match; see Section\u00a09.7.3."], "Examples": ["regexp_substr('ABCDEF', 'c(.)(..)', 1, 1, 'i') \u2192 CDEF", "regexp_substr('ABCDEF', 'c(.)(..)', 1, 1, 'i', 2) \u2192 EF"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["repeat"], "Feature": ["repeat ( string text, number integer ) \u2192 text"], "Description": ["Repeats string the specified number of times."], "Examples": ["repeat('Pg', 4) \u2192 PgPgPgPg"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["replace"], "Feature": ["replace ( string text, from text, to text ) \u2192 text"], "Description": ["Replaces all occurrences in string of substring from with substring to."], "Examples": ["replace('abcdefabcdef', 'cd', 'XX') \u2192 abXXefabXXef"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["reverse"], "Feature": ["reverse ( text ) \u2192 text"], "Description": ["Reverses the order of the characters in the string."], "Examples": ["reverse('abcde') \u2192 edcba"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["right"], "Feature": ["right ( string text, n integer ) \u2192 text"], "Description": ["Returns last n characters in the string, or when n is negative, returns all but first |n| characters."], "Examples": ["right('abcde', 2) \u2192 de"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["split_part"], "Feature": ["split_part ( string text, delimiter text, n integer ) \u2192 text"], "Description": ["Splits string at occurrences of delimiter and returns the n'th field (counting from one), or when n is negative, returns the |n|'th-from-last field."], "Examples": ["split_part('abc~@~def~@~ghi', '~@~', 2) \u2192 def", "split_part('abc,def,ghi,jkl', ',', -2) \u2192 ghi"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["starts_with"], "Feature": ["starts_with ( string text, prefix text ) \u2192 boolean"], "Description": ["Returns true if string starts with prefix."], "Examples": ["starts_with('alphabet', 'alph') \u2192 t"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-string.html"], "Title": ["string_to_array"], "Feature": ["string_to_array ( string text, delimiter text [, null_string text ] ) \u2192 text[]"], "Description": ["Splits the string at occurrences of delimiter and forms the resulting fields into a text array. If delimiter is NULL, each character in the string will become a separate element in the array. If delimiter is an empty string, then the string is treated as a single field. If null_string is supplied and is not NULL, fields matching that string are replaced by NULL. See also array_to_string."], "Examples": ["string_to_array('xx~~yy~~zz', '~~', 'yy') \u2192 {xx,NULL,zz}"], "Category": ["String Functions and Operators"]}
