{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["to_json"], "Feature": ["to_json ( anyelement ) \u2192 json", "to_jsonb ( anyelement ) \u2192 jsonb"], "Description": ["Converts any SQL value to json or jsonb. Arrays and composites are converted recursively to arrays and objects (multidimensional arrays become arrays of arrays in JSON). Otherwise, if there is a cast from the SQL data type to json, the cast function will be used to perform the conversion;[a] otherwise, a scalar JSON value is produced. For any scalar other than a number, a Boolean, or a null value, the text representation will be used, with escaping as necessary to make it a valid JSON string value."], "Examples": ["to_json('Fred said \"Hi.\"'::text) \u2192 \"Fred said \\\"Hi.\\\"\"", "to_jsonb(row(42, 'Fred said \"Hi.\"'::text)) \u2192 {\"f1\": 42, \"f2\": \"Fred said \\\"Hi.\\\"\"}"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["array_to_json"], "Feature": ["array_to_json ( anyarray [, boolean ] ) \u2192 json"], "Description": ["Converts an SQL array to a JSON array. The behavior is the same as to_json except that line feeds will be added between top-level array elements if the optional boolean parameter is true."], "Examples": ["array_to_json('{{1,5},{99,100}}'::int[]) \u2192 [[1,5],[99,100]]"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["json_array"], "Feature": ["json_array ( [ { value_expression [ FORMAT JSON ] } [, ...] ] [ { NULL | ABSENT } ON NULL ] [ RETURNING data_type [ FORMAT JSON [ ENCODING UTF8 ] ] ])", "json_array ( [ query_expression ] [ RETURNING data_type [ FORMAT JSON [ ENCODING UTF8 ] ] ])"], "Description": ["Constructs a JSON array from either a series of value_expression parameters or from the results of query_expression, which must be a SELECT query returning a single column. If ABSENT ON NULL is specified, NULL values are ignored. This is always the case if a query_expression is used."], "Examples": ["json_array(1,true,json '{\"a\":null}') \u2192 [1, true, {\"a\":null}]", "json_array(SELECT * FROM (VALUES(1),(2)) t) \u2192 [1, 2]"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["row_to_json"], "Feature": ["row_to_json ( record [, boolean ] ) \u2192 json"], "Description": ["Converts an SQL composite value to a JSON object. The behavior is the same as to_json except that line feeds will be added between top-level elements if the optional boolean parameter is true."], "Examples": ["row_to_json(row(1,'foo')) \u2192 {\"f1\":1,\"f2\":\"foo\"}"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["json_build_array"], "Feature": ["json_build_array ( VARIADIC \"any\" ) \u2192 json", "jsonb_build_array ( VARIADIC \"any\" ) \u2192 jsonb"], "Description": ["Builds a possibly-heterogeneously-typed JSON array out of a variadic argument list. Each argument is converted as per to_json or to_jsonb."], "Examples": ["json_build_array(1, 2, 'foo', 4, 5) \u2192 [1, 2, \"foo\", 4, 5]"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["json_build_object"], "Feature": ["json_build_object ( VARIADIC \"any\" ) \u2192 json", "jsonb_build_object ( VARIADIC \"any\" ) \u2192 jsonb"], "Description": ["Builds a JSON object out of a variadic argument list. By convention, the argument list consists of alternating keys and values. Key arguments are coerced to text; value arguments are converted as per to_json or to_jsonb."], "Examples": ["json_build_object('foo', 1, 2, row(3,'bar')) \u2192 {\"foo\" : 1, \"2\" : {\"f1\":3,\"f2\":\"bar\"}}"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["json_object"], "Feature": ["json_object ( keys text[], values text[] ) \u2192 json", "jsonb_object ( keys text[], values text[] ) \u2192 jsonb"], "Description": ["This form of json_object takes keys and values pairwise from separate text arrays. Otherwise it is identical to the one-argument form."], "Examples": ["json_object('{a,b}', '{1,2}') \u2192 {\"a\": \"1\", \"b\": \"2\"}"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["json"], "Feature": ["json ( expression [ FORMAT JSON [ ENCODING UTF8 ]] [ { WITH | WITHOUT } UNIQUE [ KEYS ]] ) \u2192 json"], "Description": ["Converts a given expression specified as text or bytea string (in UTF8 encoding) into a JSON value. If expression is NULL, an SQL null value is returned. If WITH UNIQUE is specified, the expression must not contain any duplicate object keys."], "Examples": ["json('{\"a\":123, \"b\":[true,\"foo\"], \"a\":\"bar\"}') \u2192 {\"a\":123, \"b\":[true,\"foo\"], \"a\":\"bar\"}"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["json_scalar"], "Feature": ["json_scalar ( expression )"], "Description": ["Converts a given SQL scalar value into a JSON scalar value. If the input is NULL, an SQL null is returned. If the input is number or a boolean value, a corresponding JSON number or boolean value is returned. For any other value, a JSON string is returned."], "Examples": ["json_scalar(123.45) \u2192 123.45", "json_scalar(CURRENT_TIMESTAMP) \u2192 \"2022-05-10T10:51:04.62128-04:00\""], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["json_serialize"], "Feature": ["json_serialize ( expression [ FORMAT JSON [ ENCODING UTF8 ] ] [ RETURNING data_type [ FORMAT JSON [ ENCODING UTF8 ] ] ] )"], "Description": ["Converts an SQL/JSON expression into a character or binary string. The expression can be of any JSON type, any character string type, or bytea in UTF8 encoding. The returned type used in RETURNING can be any character string type or bytea. The default is text."], "Examples": ["json_serialize('{ \"a\" : 1 } ' RETURNING bytea) \u2192 \\x7b20226122203a2031207d20"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["expression IS [ NOT ] JSON [ { VALUE | SCALAR | ARRAY | OBJECT } ] [ { WITH | WITHOUT } UNIQUE [ KEYS ] ]"], "Feature": ["expression IS [ NOT ] JSON [ { VALUE | SCALAR | ARRAY | OBJECT } ] [ { WITH | WITHOUT } UNIQUE [ KEYS ] ]"], "Description": ["This predicate tests whether expression can be parsed as JSON, possibly of a specified type. If SCALAR or ARRAY or OBJECT is specified, the test is whether or not the JSON is of that particular type. If WITH UNIQUE KEYS is specified, then any object in the expression is also tested to see if it has duplicate keys."], "Examples": [], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["json_array_elements"], "Feature": ["json_array_elements ( json ) \u2192 setof json", "jsonb_array_elements ( jsonb ) \u2192 setof jsonb"], "Description": ["Expands the top-level JSON array into a set of JSON values."], "Examples": ["select * from json_array_elements('[1,true, [2,false]]') \u2192"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["json_array_elements_text"], "Feature": ["json_array_elements_text ( json ) \u2192 setof text", "jsonb_array_elements_text ( jsonb ) \u2192 setof text"], "Description": ["Expands the top-level JSON array into a set of text values."], "Examples": ["select * from json_array_elements_text('[\"foo\", \"bar\"]') \u2192"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["json_array_length"], "Feature": ["json_array_length ( json ) \u2192 integer", "jsonb_array_length ( jsonb ) \u2192 integer"], "Description": ["Returns the number of elements in the top-level JSON array."], "Examples": ["json_array_length('[1,2,3,{\"f1\":1,\"f2\":[5,6]},4]') \u2192 5", "jsonb_array_length('[]') \u2192 0"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["json_each"], "Feature": ["json_each ( json ) \u2192 setof record ( key text, value json )", "jsonb_each ( jsonb ) \u2192 setof record ( key text, value jsonb )"], "Description": ["Expands the top-level JSON object into a set of key/value pairs."], "Examples": ["select * from json_each('{\"a\":\"foo\", \"b\":\"bar\"}') \u2192"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["json_each_text"], "Feature": ["json_each_text ( json ) \u2192 setof record ( key text, value text )", "jsonb_each_text ( jsonb ) \u2192 setof record ( key text, value text )"], "Description": ["Expands the top-level JSON object into a set of key/value pairs. The returned values will be of type text."], "Examples": ["select * from json_each_text('{\"a\":\"foo\", \"b\":\"bar\"}') \u2192"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["json_extract_path"], "Feature": ["json_extract_path ( from_json json, VARIADIC path_elems text[] ) \u2192 json", "jsonb_extract_path ( from_json jsonb, VARIADIC path_elems text[] ) \u2192 jsonb"], "Description": ["Extracts JSON sub-object at the specified path. (This is functionally equivalent to the #> operator, but writing the path out as a variadic list can be more convenient in some cases.)"], "Examples": ["json_extract_path('{\"f2\":{\"f3\":1},\"f4\":{\"f5\":99,\"f6\":\"foo\"}}', 'f4', 'f6') \u2192 \"foo\""], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["json_extract_path_text"], "Feature": ["json_extract_path_text ( from_json json, VARIADIC path_elems text[] ) \u2192 text", "jsonb_extract_path_text ( from_json jsonb, VARIADIC path_elems text[] ) \u2192 text"], "Description": ["Extracts JSON sub-object at the specified path as text. (This is functionally equivalent to the #>> operator.)"], "Examples": ["json_extract_path_text('{\"f2\":{\"f3\":1},\"f4\":{\"f5\":99,\"f6\":\"foo\"}}', 'f4', 'f6') \u2192 foo"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["json_object_keys"], "Feature": ["json_object_keys ( json ) \u2192 setof text", "jsonb_object_keys ( jsonb ) \u2192 setof text"], "Description": ["Returns the set of keys in the top-level JSON object."], "Examples": ["select * from json_object_keys('{\"f1\":\"abc\",\"f2\":{\"f3\":\"a\", \"f4\":\"b\"}}') \u2192"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["json_populate_record"], "Feature": ["json_populate_record ( base anyelement, from_json json ) \u2192 anyelement", "jsonb_populate_record ( base anyelement, from_json jsonb ) \u2192 anyelement"], "Description": ["Expands the top-level JSON object to a row having the composite type of the base argument. The JSON object is scanned for fields whose names match column names of the output row type, and their values are inserted into those columns of the output. (Fields that do not correspond to any output column name are ignored.) In typical use, the value of base is just NULL, which means that any output columns that do not match any object field will be filled with nulls. However, if base isn't NULL then the values it contains will be used for unmatched columns.", "To convert a JSON value to the SQL type of an output column, the following rules are applied in sequence:", "A JSON null value is converted to an SQL null in all cases.", "If the output column is of type json or jsonb, the JSON value is just reproduced exactly.", "If the output column is a composite (row) type, and the JSON value is a JSON object, the fields of the object are converted to columns of the output row type by recursive application of these rules.", "Likewise, if the output column is an array type and the JSON value is a JSON array, the elements of the JSON array are converted to elements of the output array by recursive application of these rules.", "Otherwise, if the JSON value is a string, the contents of the string are fed to the input conversion function for the column's data type.", "Otherwise, the ordinary text representation of the JSON value is fed to the input conversion function for the column's data type.", "While the example below uses a constant JSON value, typical use would be to reference a json or jsonb column laterally from another table in the query's FROM clause. Writing json_populate_record in the FROM clause is good practice, since all of the extracted columns are available for use without duplicate function calls.", "create type subrowtype as (d int, e text); create type myrowtype as (a int, b text[], c subrowtype);"], "Examples": ["select * from json_populate_record(null::myrowtype, '{\"a\": 1, \"b\": [\"2\", \"a b\"], \"c\": {\"d\": 4, \"e\": \"a b c\"}, \"x\": \"foo\"}') \u2192"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["jsonb_populate_record_valid"], "Feature": ["jsonb_populate_record_valid ( base anyelement, from_json json ) \u2192 boolean"], "Description": ["Function for testing jsonb_populate_record. Returns true if the input jsonb_populate_record would finish without an error for the given input JSON object; that is, it's valid input, false otherwise.", "create type jsb_char2 as (a char(2));"], "Examples": ["select jsonb_populate_record_valid(NULL::jsb_char2, '{\"a\": \"aaa\"}'); \u2192", "select * from jsonb_populate_record(NULL::jsb_char2, '{\"a\": \"aaa\"}') q; \u2192", "select jsonb_populate_record_valid(NULL::jsb_char2, '{\"a\": \"aa\"}'); \u2192", "select * from jsonb_populate_record(NULL::jsb_char2, '{\"a\": \"aa\"}') q; \u2192"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["json_populate_recordset"], "Feature": ["json_populate_recordset ( base anyelement, from_json json ) \u2192 setof anyelement", "jsonb_populate_recordset ( base anyelement, from_json jsonb ) \u2192 setof anyelement"], "Description": ["Expands the top-level JSON array of objects to a set of rows having the composite type of the base argument. Each element of the JSON array is processed as described above for json[b]_populate_record.", "create type twoints as (a int, b int);"], "Examples": ["select * from json_populate_recordset(null::twoints, '[{\"a\":1,\"b\":2}, {\"a\":3,\"b\":4}]') \u2192"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["json_to_record"], "Feature": ["json_to_record ( json ) \u2192 record", "jsonb_to_record ( jsonb ) \u2192 record"], "Description": ["Expands the top-level JSON object to a row having the composite type defined by an AS clause. (As with all functions returning record, the calling query must explicitly define the structure of the record with an AS clause.) The output record is filled from fields of the JSON object, in the same way as described above for json[b]_populate_record. Since there is no input record value, unmatched columns are always filled with nulls.", "create type myrowtype as (a int, b text);"], "Examples": ["select * from json_to_record('{\"a\":1,\"b\":[1,2,3],\"c\":[1,2,3],\"e\":\"bar\",\"r\": {\"a\": 123, \"b\": \"a b c\"}}') as x(a int, b text, c int[], d text, r myrowtype) \u2192"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["json_to_recordset"], "Feature": ["json_to_recordset ( json ) \u2192 setof record", "jsonb_to_recordset ( jsonb ) \u2192 setof record"], "Description": ["Expands the top-level JSON array of objects to a set of rows having the composite type defined by an AS clause. (As with all functions returning record, the calling query must explicitly define the structure of the record with an AS clause.) Each element of the JSON array is processed as described above for json[b]_populate_record."], "Examples": ["select * from json_to_recordset('[{\"a\":1,\"b\":\"foo\"}, {\"a\":\"2\",\"c\":\"bar\"}]') as x(a int, b text) \u2192"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["jsonb_set"], "Feature": ["jsonb_set ( target jsonb, path text[], new_value jsonb [, create_if_missing boolean ] ) \u2192 jsonb"], "Description": ["Returns target with the item designated by path replaced by new_value, or with new_value added if create_if_missing is true (which is the default) and the item designated by path does not exist. All earlier steps in the path must exist, or the target is returned unchanged. As with the path oriented operators, negative integers that appear in the path count from the end of JSON arrays. If the last path step is an array index that is out of range, and create_if_missing is true, the new value is added at the beginning of the array if the index is negative, or at the end of the array if it is positive."], "Examples": ["jsonb_set('[{\"f1\":1,\"f2\":null},2,null,3]', '{0,f1}', '[2,3,4]', false) \u2192 [{\"f1\": [2, 3, 4], \"f2\": null}, 2, null, 3]", "jsonb_set('[{\"f1\":1,\"f2\":null},2]', '{0,f3}', '[2,3,4]') \u2192 [{\"f1\": 1, \"f2\": null, \"f3\": [2, 3, 4]}, 2]"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["jsonb_set_lax"], "Feature": ["jsonb_set_lax ( target jsonb, path text[], new_value jsonb [, create_if_missing boolean [, null_value_treatment text ]] ) \u2192 jsonb"], "Description": ["If new_value is not NULL, behaves identically to jsonb_set. Otherwise behaves according to the value of null_value_treatment which must be one of 'raise_exception', 'use_json_null', 'delete_key', or 'return_target'. The default is 'use_json_null'."], "Examples": ["jsonb_set_lax('[{\"f1\":1,\"f2\":null},2,null,3]', '{0,f1}', null) \u2192 [{\"f1\": null, \"f2\": null}, 2, null, 3]", "jsonb_set_lax('[{\"f1\":99,\"f2\":null},2]', '{0,f3}', null, true, 'return_target') \u2192 [{\"f1\": 99, \"f2\": null}, 2]"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["jsonb_insert"], "Feature": ["jsonb_insert ( target jsonb, path text[], new_value jsonb [, insert_after boolean ] ) \u2192 jsonb"], "Description": ["Returns target with new_value inserted. If the item designated by the path is an array element, new_value will be inserted before that item if insert_after is false (which is the default), or after it if insert_after is true. If the item designated by the path is an object field, new_value will be inserted only if the object does not already contain that key. All earlier steps in the path must exist, or the target is returned unchanged. As with the path oriented operators, negative integers that appear in the path count from the end of JSON arrays. If the last path step is an array index that is out of range, the new value is added at the beginning of the array if the index is negative, or at the end of the array if it is positive."], "Examples": ["jsonb_insert('{\"a\": [0,1,2]}', '{a, 1}', '\"new_value\"') \u2192 {\"a\": [0, \"new_value\", 1, 2]}", "jsonb_insert('{\"a\": [0,1,2]}', '{a, 1}', '\"new_value\"', true) \u2192 {\"a\": [0, 1, \"new_value\", 2]}"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["json_strip_nulls"], "Feature": ["json_strip_nulls ( json ) \u2192 json", "jsonb_strip_nulls ( jsonb ) \u2192 jsonb"], "Description": ["Deletes all object fields that have null values from the given JSON value, recursively. Null values that are not object fields are untouched."], "Examples": ["json_strip_nulls('[{\"f1\":1, \"f2\":null}, 2, null, 3]') \u2192 [{\"f1\":1},2,null,3]"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["jsonb_path_exists"], "Feature": ["jsonb_path_exists ( target jsonb, path jsonpath [, vars jsonb [, silent boolean ]] ) \u2192 boolean"], "Description": ["Checks whether the JSON path returns any item for the specified JSON value. (This is useful only with SQL-standard JSON path expressions, not predicate check expressions, since those always return a value.) If the vars argument is specified, it must be a JSON object, and its fields provide named values to be substituted into the jsonpath expression. If the silent argument is specified and is true, the function suppresses the same errors as the @? and @@ operators do."], "Examples": ["jsonb_path_exists('{\"a\":[1,2,3,4,5]}', '$.a[*] ? (@ >= $min && @ <= $max)', '{\"min\":2, \"max\":4}') \u2192 t"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["jsonb_path_match"], "Feature": ["jsonb_path_match ( target jsonb, path jsonpath [, vars jsonb [, silent boolean ]] ) \u2192 boolean"], "Description": ["Returns the result of a JSON path predicate check for the specified JSON value. (This is useful only with predicate check expressions, not SQL-standard JSON path expressions, since it will either fail or return NULL if the path result is not a single boolean value.) The optional vars and silent arguments act the same as for jsonb_path_exists."], "Examples": ["jsonb_path_match('{\"a\":[1,2,3,4,5]}', 'exists($.a[*] ? (@ >= $min && @ <= $max))', '{\"min\":2, \"max\":4}') \u2192 t"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["jsonb_path_query"], "Feature": ["jsonb_path_query ( target jsonb, path jsonpath [, vars jsonb [, silent boolean ]] ) \u2192 setof jsonb"], "Description": ["Returns all JSON items returned by the JSON path for the specified JSON value. For SQL-standard JSON path expressions it returns the JSON values selected from target. For predicate check expressions it returns the result of the predicate check: true, false, or null. The optional vars and silent arguments act the same as for jsonb_path_exists."], "Examples": ["select * from jsonb_path_query('{\"a\":[1,2,3,4,5]}', '$.a[*] ? (@ >= $min && @ <= $max)', '{\"min\":2, \"max\":4}') \u2192"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["jsonb_path_query_array"], "Feature": ["jsonb_path_query_array ( target jsonb, path jsonpath [, vars jsonb [, silent boolean ]] ) \u2192 jsonb"], "Description": ["Returns all JSON items returned by the JSON path for the specified JSON value, as a JSON array. The parameters are the same as for jsonb_path_query."], "Examples": ["jsonb_path_query_array('{\"a\":[1,2,3,4,5]}', '$.a[*] ? (@ >= $min && @ <= $max)', '{\"min\":2, \"max\":4}') \u2192 [2, 3, 4]"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["jsonb_path_query_first"], "Feature": ["jsonb_path_query_first ( target jsonb, path jsonpath [, vars jsonb [, silent boolean ]] ) \u2192 jsonb"], "Description": ["Returns the first JSON item returned by the JSON path for the specified JSON value, or NULL if there are no results. The parameters are the same as for jsonb_path_query."], "Examples": ["jsonb_path_query_first('{\"a\":[1,2,3,4,5]}', '$.a[*] ? (@ >= $min && @ <= $max)', '{\"min\":2, \"max\":4}') \u2192 2"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["jsonb_path_exists_tz"], "Feature": ["jsonb_path_exists_tz ( target jsonb, path jsonpath [, vars jsonb [, silent boolean ]] ) \u2192 boolean", "jsonb_path_match_tz ( target jsonb, path jsonpath [, vars jsonb [, silent boolean ]] ) \u2192 boolean", "jsonb_path_query_tz ( target jsonb, path jsonpath [, vars jsonb [, silent boolean ]] ) \u2192 setof jsonb", "jsonb_path_query_array_tz ( target jsonb, path jsonpath [, vars jsonb [, silent boolean ]] ) \u2192 jsonb", "jsonb_path_query_first_tz ( target jsonb, path jsonpath [, vars jsonb [, silent boolean ]] ) \u2192 jsonb"], "Description": ["These functions act like their counterparts described above without the _tz suffix, except that these functions support comparisons of date/time values that require timezone-aware conversions. The example below requires interpretation of the date-only value 2015-08-02 as a timestamp with time zone, so the result depends on the current TimeZone setting. Due to this dependency, these functions are marked as stable, which means these functions cannot be used in indexes. Their counterparts are immutable, and so can be used in indexes; but they will throw errors if asked to make such comparisons."], "Examples": ["jsonb_path_exists_tz('[\"2015-08-01 12:00:00-05\"]', '$[*] ? (@.datetime() < \"2015-08-02\".datetime())') \u2192 t"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["jsonb_pretty"], "Feature": ["jsonb_pretty ( jsonb ) \u2192 text"], "Description": ["Converts the given JSON value to pretty-printed, indented text."], "Examples": ["jsonb_pretty('[{\"f1\":1,\"f2\":null}, 2]') \u2192"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["json_typeof"], "Feature": ["json_typeof ( json ) \u2192 text", "jsonb_typeof ( jsonb ) \u2192 text"], "Description": ["Returns the type of the top-level JSON value as a text string. Possible types are object, array, string, number, boolean, and null. (The null result should not be confused with an SQL NULL; see the examples.)"], "Examples": ["json_typeof('-123.4') \u2192 number", "json_typeof('null'::json) \u2192 null", "json_typeof(NULL::json) IS NULL \u2192 t"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["value . type"], "Feature": ["value . type() \u2192 string"], "Description": ["Type of the JSON item (see json_typeof)"], "Examples": ["jsonb_path_query_array('[1, \"2\", {}]', '$[*].type()') \u2192 [\"number\", \"string\", \"object\"]"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["value . size"], "Feature": ["value . size() \u2192 number"], "Description": ["Size of the JSON item (number of array elements, or 1 if not an array)"], "Examples": ["jsonb_path_query('{\"m\": [11, 15]}', '$.m.size()') \u2192 2"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["value . boolean"], "Feature": ["value . boolean() \u2192 boolean"], "Description": ["Boolean value converted from a JSON boolean, number, or string"], "Examples": ["jsonb_path_query_array('[1, \"yes\", false]', '$[*].boolean()') \u2192 [true, true, false]"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["value . string"], "Feature": ["value . string() \u2192 string"], "Description": ["String value converted from a JSON boolean, number, string, or datetime"], "Examples": ["jsonb_path_query_array('[1.23, \"xyz\", false]', '$[*].string()') \u2192 [\"1.23\", \"xyz\", \"false\"]", "jsonb_path_query('\"2023-08-15 12:34:56\"', '$.timestamp().string()') \u2192 \"2023-08-15T12:34:56\""], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["value . double"], "Feature": ["value . double() \u2192 number"], "Description": ["Approximate floating-point number converted from a JSON number or string"], "Examples": ["jsonb_path_query('{\"len\": \"1.9\"}', '$.len.double() * 2') \u2192 3.8"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["number . ceiling"], "Feature": ["number . ceiling() \u2192 number"], "Description": ["Nearest integer greater than or equal to the given number"], "Examples": ["jsonb_path_query('{\"h\": 1.3}', '$.h.ceiling()') \u2192 2"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["number . floor"], "Feature": ["number . floor() \u2192 number"], "Description": ["Nearest integer less than or equal to the given number"], "Examples": ["jsonb_path_query('{\"h\": 1.7}', '$.h.floor()') \u2192 1"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["number . abs"], "Feature": ["number . abs() \u2192 number"], "Description": ["Absolute value of the given number"], "Examples": ["jsonb_path_query('{\"z\": -0.3}', '$.z.abs()') \u2192 0.3"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["value . bigint"], "Feature": ["value . bigint() \u2192 bigint"], "Description": ["Big integer value converted from a JSON number or string"], "Examples": ["jsonb_path_query('{\"len\": \"9876543219\"}', '$.len.bigint()') \u2192 9876543219"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["value . decimal"], "Feature": ["value . decimal( [ precision [ , scale ] ] ) \u2192 decimal"], "Description": ["Rounded decimal value converted from a JSON number or string (precision and scale must be integer values)"], "Examples": ["jsonb_path_query('1234.5678', '$.decimal(6, 2)') \u2192 1234.57"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["value . integer"], "Feature": ["value . integer() \u2192 integer"], "Description": ["Integer value converted from a JSON number or string"], "Examples": ["jsonb_path_query('{\"len\": \"12345\"}', '$.len.integer()') \u2192 12345"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["value . number"], "Feature": ["value . number() \u2192 numeric"], "Description": ["Numeric value converted from a JSON number or string"], "Examples": ["jsonb_path_query('{\"len\": \"123.45\"}', '$.len.number()') \u2192 123.45"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["string . datetime"], "Feature": ["string . datetime(template) \u2192 datetime_type (see note)"], "Description": ["Date/time value converted from a string using the specified to_timestamp template"], "Examples": ["jsonb_path_query_array('[\"12:30\", \"18:40\"]', '$[*].datetime(\"HH24:MI\")') \u2192 [\"12:30:00\", \"18:40:00\"]"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["string . date"], "Feature": ["string . date() \u2192 date"], "Description": ["Date value converted from a string"], "Examples": ["jsonb_path_query('\"2023-08-15\"', '$.date()') \u2192 \"2023-08-15\""], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["string . time"], "Feature": ["string . time(precision) \u2192 time without time zone"], "Description": ["Time without time zone value converted from a string, with fractional seconds adjusted to the given precision"], "Examples": ["jsonb_path_query('\"12:34:56.789\"', '$.time(2)') \u2192 \"12:34:56.79\""], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["string . time_tz"], "Feature": ["string . time_tz(precision) \u2192 time with time zone"], "Description": ["Time with time zone value converted from a string, with fractional seconds adjusted to the given precision"], "Examples": ["jsonb_path_query('\"12:34:56.789 +05:30\"', '$.time_tz(2)') \u2192 \"12:34:56.79+05:30\""], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["string . timestamp"], "Feature": ["string . timestamp(precision) \u2192 timestamp without time zone"], "Description": ["Timestamp without time zone value converted from a string, with fractional seconds adjusted to the given precision"], "Examples": ["jsonb_path_query('\"2023-08-15 12:34:56.789\"', '$.timestamp(2)') \u2192 \"2023-08-15T12:34:56.79\""], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["string . timestamp_tz"], "Feature": ["string . timestamp_tz(precision) \u2192 timestamp with time zone"], "Description": ["Timestamp with time zone value converted from a string, with fractional seconds adjusted to the given precision"], "Examples": ["jsonb_path_query('\"2023-08-15 12:34:56.789 +05:30\"', '$.timestamp_tz(2)') \u2192 \"2023-08-15T12:34:56.79+05:30\""], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["object . keyvalue"], "Feature": ["object . keyvalue() \u2192 array"], "Description": ["The object's key-value pairs, represented as an array of objects containing three fields: \"key\", \"value\", and \"id\"; \"id\" is a unique identifier of the object the key-value pair belongs to"], "Examples": ["jsonb_path_query_array('{\"x\": \"20\", \"y\": 32}', '$.keyvalue()') \u2192 [{\"id\": 0, \"key\": \"x\", \"value\": \"20\"}, {\"id\": 0, \"key\": \"y\", \"value\": 32}]"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": [""], "Feature": ["", ""], "Description": ["Returns the result of applying the SQL/JSON path_expression to the context_item.", "Only use JSON_VALUE() if the extracted value is expected to be a single SQL/JSON scalar item; getting multiple values will be treated as an error. If you expect that extracted value might be an object or an array, use the JSON_QUERY function instead.", "By default, the result, which must be a single scalar value, is returned as a value of type text, though the RETURNING clause can be used to return as some other type to which it can be successfully coerced.", "The ON ERROR and ON EMPTY clauses have similar semantics as mentioned in the description of JSON_QUERY, except the set of values returned in lieu of throwing an error is different.", "Note that scalar strings returned by JSON_VALUE always have their quotes removed, equivalent to specifying OMIT QUOTES in JSON_QUERY.", "Examples:"], "Examples": ["JSON_VALUE(jsonb '\"123.45\"', '$' RETURNING float) \u2192 123.45", "JSON_VALUE(jsonb '\"03:04 2015-02-01\"', '$.datetime(\"HH24:MI\u00a0YYYY-MM-DD\")' RETURNING date) \u2192 2015-02-01", "JSON_VALUE(jsonb '[1,2]', 'strict $[$off]' PASSING 1 as off) \u2192 2", "JSON_VALUE(jsonb '[1,2]', 'strict $[*]' DEFAULT 9 ON ERROR) \u2192 9"], "Category": ["JSON Functions and Operators"]}
