{"HTML": ["https://www.postgresql.org/docs/current/functions-comparison.html"], "Title": ["num_nonnulls"], "Feature": ["num_nonnulls ( VARIADIC \"any\" ) \u2192 integer"], "Description": ["Returns the number of non-null arguments."], "Examples": ["num_nonnulls(1, NULL, 2) \u2192 2"], "Category": ["Comparison Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["string_to_array"], "Feature": ["string_to_array ( string text, delimiter text [, null_string text ] ) \u2192 text[]"], "Description": ["Splits the string at occurrences of delimiter and forms the resulting fields into a text array. If delimiter is NULL, each character in the string will become a separate element in the array. If delimiter is an empty string, then the string is treated as a single field. If null_string is supplied and is not NULL, fields matching that string are replaced by NULL. See also array_to_string."], "Examples": ["string_to_array('xx~~yy~~zz', '~~', 'yy') \u2192 {xx,NULL,zz}"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["string_to_table"], "Feature": ["string_to_table ( string text, delimiter text [, null_string text ] ) \u2192 setof text"], "Description": ["Splits the string at occurrences of delimiter and returns the resulting fields as a set of text rows. If delimiter is NULL, each character in the string will become a separate row of the result. If delimiter is an empty string, then the string is treated as a single field. If null_string is supplied and is not NULL, fields matching that string are replaced by NULL."], "Examples": ["string_to_table('xx~^~yy~^~zz', '~^~', 'yy') \u2192"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["strpos"], "Feature": ["strpos ( string text, substring text ) \u2192 integer"], "Description": ["Returns first starting index of the specified substring within string, or zero if it's not present. (Same as position(substring in string), but note the reversed argument order.)"], "Examples": ["strpos('high', 'ig') \u2192 2"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["substr"], "Feature": ["substr ( string text, start integer [, count integer ] ) \u2192 text"], "Description": ["Extracts the substring of string starting at the start'th character, and extending for count characters if that is specified. (Same as substring(string from start for count).)"], "Examples": ["substr('alphabet', 3) \u2192 phabet", "substr('alphabet', 3, 2) \u2192 ph"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["to_ascii"], "Feature": ["to_ascii ( string text ) \u2192 text", "to_ascii ( string text, encoding name ) \u2192 text", "to_ascii ( string text, encoding integer ) \u2192 text"], "Description": ["Converts string to ASCII from another encoding, which may be identified by name or number. If encoding is omitted the database encoding is assumed (which in practice is the only useful case). The conversion consists primarily of dropping accents. Conversion is only supported from LATIN1, LATIN2, LATIN9, and WIN1250 encodings. (See the unaccent module for another, more flexible solution.)"], "Examples": ["to_ascii('Kar\u00e9l') \u2192 Karel"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["to_bin"], "Feature": ["to_bin ( integer ) \u2192 text", "to_bin ( bigint ) \u2192 text"], "Description": ["Converts the number to its equivalent two's complement binary representation."], "Examples": ["to_bin(2147483647) \u2192 1111111111111111111111111111111", "to_bin(-1234) \u2192 11111111111111111111101100101110"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["to_hex"], "Feature": ["to_hex ( integer ) \u2192 text", "to_hex ( bigint ) \u2192 text"], "Description": ["Converts the number to its equivalent two's complement hexadecimal representation."], "Examples": ["to_hex(2147483647) \u2192 7fffffff", "to_hex(-1234) \u2192 fffffb2e"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["to_oct"], "Feature": ["to_oct ( integer ) \u2192 text", "to_oct ( bigint ) \u2192 text"], "Description": ["Converts the number to its equivalent two's complement octal representation."], "Examples": ["to_oct(2147483647) \u2192 17777777777", "to_oct(-1234) \u2192 37777775456"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["translate"], "Feature": ["translate ( string text, from text, to text ) \u2192 text"], "Description": ["Replaces each character in string that matches a character in the from set with the corresponding character in the to set. If from is longer than to, occurrences of the extra characters in from are deleted."], "Examples": ["translate('12345', '143', 'ax') \u2192 a2x5"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["unistr"], "Feature": ["unistr ( text ) \u2192 text"], "Description": ["Evaluate escaped Unicode characters in the argument. Unicode characters can be specified as \\XXXX (4 hexadecimal digits), \\+XXXXXX (6 hexadecimal digits), \\uXXXX (4 hexadecimal digits), or \\UXXXXXXXX (8 hexadecimal digits). To specify a backslash, write two backslashes. All other characters are taken literally.", "If the server encoding is not UTF-8, the Unicode code point identified by one of these escape sequences is converted to the actual server encoding; an error is reported if that's not possible.", "This function provides a (non-standard) alternative to string constants with Unicode escapes (see Section\u00a04.1.2.3)."], "Examples": ["unistr('d\\0061t\\+000061') \u2192 data", "unistr('d\\u0061t\\U00000061') \u2192 data"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["exp"], "Feature": ["exp ( numeric ) \u2192 numeric", "exp ( double precision ) \u2192 double precision"], "Description": ["Exponential (e raised to the given power)"], "Examples": ["exp(1.0) \u2192 2.7182818284590452"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-binarystring.html"], "Title": ["bit_length"], "Feature": ["bit_length ( bytea ) \u2192 integer"], "Description": ["Returns number of bits in the binary string (8 times the octet_length)."], "Examples": ["bit_length('\\x123456'::bytea) \u2192 24"], "Category": ["Binary String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-binarystring.html"], "Title": ["btrim"], "Feature": ["btrim ( bytes bytea, bytesremoved bytea ) \u2192 bytea"], "Description": ["Removes the longest string containing only bytes appearing in bytesremoved from the start and end of bytes."], "Examples": ["btrim('\\x1234567890'::bytea, '\\x9012'::bytea) \u2192 \\x345678"], "Category": ["Binary String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-binarystring.html"], "Title": ["ltrim"], "Feature": ["ltrim ( bytes bytea, bytesremoved bytea ) \u2192 bytea"], "Description": ["Removes the longest string containing only bytes appearing in bytesremoved from the start of bytes."], "Examples": ["ltrim('\\x1234567890'::bytea, '\\x9012'::bytea) \u2192 \\x34567890"], "Category": ["Binary String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-binarystring.html"], "Title": ["octet_length"], "Feature": ["octet_length ( bytea ) \u2192 integer"], "Description": ["Returns number of bytes in the binary string."], "Examples": ["octet_length('\\x123456'::bytea) \u2192 3"], "Category": ["Binary String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-binarystring.html"], "Title": ["overlay"], "Feature": ["overlay ( bytes bytea PLACING newsubstring bytea FROM start integer [ FOR count integer ] ) \u2192 bytea"], "Description": ["Replaces the substring of bytes that starts at the start'th byte and extends for count bytes with newsubstring. If count is omitted, it defaults to the length of newsubstring."], "Examples": ["overlay('\\x1234567890'::bytea placing '\\002\\003'::bytea from 2 for 3) \u2192 \\x12020390"], "Category": ["Binary String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-binarystring.html"], "Title": ["position"], "Feature": ["position ( substring bytea IN bytes bytea ) \u2192 integer"], "Description": ["Returns first starting index of the specified substring within bytes, or zero if it's not present."], "Examples": ["position('\\x5678'::bytea in '\\x1234567890'::bytea) \u2192 3"], "Category": ["Binary String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-binarystring.html"], "Title": ["rtrim"], "Feature": ["rtrim ( bytes bytea, bytesremoved bytea ) \u2192 bytea"], "Description": ["Removes the longest string containing only bytes appearing in bytesremoved from the end of bytes."], "Examples": ["rtrim('\\x1234567890'::bytea, '\\x9012'::bytea) \u2192 \\x12345678"], "Category": ["Binary String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-binarystring.html"], "Title": ["substring"], "Feature": ["substring ( bytes bytea [ FROM start integer ] [ FOR count integer ] ) \u2192 bytea"], "Description": ["Extracts the substring of bytes starting at the start'th byte if that is specified, and stopping after count bytes if that is specified. Provide at least one of start and count."], "Examples": ["substring('\\x1234567890'::bytea from 3 for 2) \u2192 \\x5678"], "Category": ["Binary String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-binarystring.html"], "Title": ["trim"], "Feature": ["trim ( [ LEADING | TRAILING | BOTH ] [ FROM ] bytes bytea, bytesremoved bytea ) \u2192 bytea"], "Description": ["This is a non-standard syntax for trim()."], "Examples": ["trim(both from '\\x1234567890'::bytea, '\\x9012'::bytea) \u2192 \\x345678"], "Category": ["Binary String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-binarystring.html"], "Title": ["bit_count"], "Feature": ["bit_count ( bytes bytea ) \u2192 bigint"], "Description": ["Returns the number of bits set in the binary string (also known as \u201cpopcount\u201d)."], "Examples": ["bit_count('\\x1234567890'::bytea) \u2192 15"], "Category": ["Binary String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["factorial"], "Feature": ["factorial ( bigint ) \u2192 numeric"], "Description": ["Factorial"], "Examples": ["factorial(5) \u2192 120"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-binarystring.html"], "Title": ["get_bit"], "Feature": ["get_bit ( bytes bytea, n bigint ) \u2192 integer"], "Description": ["Extracts n'th bit from binary string."], "Examples": ["get_bit('\\x1234567890'::bytea, 30) \u2192 1"], "Category": ["Binary String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-binarystring.html"], "Title": ["get_byte"], "Feature": ["get_byte ( bytes bytea, n integer ) \u2192 integer"], "Description": ["Extracts n'th byte from binary string."], "Examples": ["get_byte('\\x1234567890'::bytea, 4) \u2192 144"], "Category": ["Binary String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-binarystring.html"], "Title": ["length"], "Feature": ["length ( bytes bytea, encoding name ) \u2192 integer"], "Description": ["Returns the number of characters in the binary string, assuming that it is text in the given encoding."], "Examples": ["length('jose'::bytea, 'UTF8') \u2192 4"], "Category": ["Binary String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-binarystring.html"], "Title": ["md5"], "Feature": ["md5 ( bytea ) \u2192 text"], "Description": ["Computes the MD5 hash of the binary string, with the result written in hexadecimal."], "Examples": ["md5('Th\\000omas'::bytea) \u2192 8ab2d3c9689aaf18\u200bb4958c334c82d8b1"], "Category": ["Binary String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-binarystring.html"], "Title": ["set_bit"], "Feature": ["set_bit ( bytes bytea, n bigint, newvalue integer ) \u2192 bytea"], "Description": ["Sets n'th bit in binary string to newvalue."], "Examples": ["set_bit('\\x1234567890'::bytea, 30, 0) \u2192 \\x1234563890"], "Category": ["Binary String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-binarystring.html"], "Title": ["set_byte"], "Feature": ["set_byte ( bytes bytea, n integer, newvalue integer ) \u2192 bytea"], "Description": ["Sets n'th byte in binary string to newvalue."], "Examples": ["set_byte('\\x1234567890'::bytea, 4, 64) \u2192 \\x1234567840"], "Category": ["Binary String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-binarystring.html"], "Title": ["sha224"], "Feature": ["sha224 ( bytea ) \u2192 bytea"], "Description": ["Computes the SHA-224 hash of the binary string."], "Examples": ["sha224('abc'::bytea) \u2192 \\x23097d223405d8228642a477bda2\u200b55b32aadbce4bda0b3f7e36c9da7"], "Category": ["Binary String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-binarystring.html"], "Title": ["sha256"], "Feature": ["sha256 ( bytea ) \u2192 bytea"], "Description": ["Computes the SHA-256 hash of the binary string."], "Examples": ["sha256('abc'::bytea) \u2192 \\xba7816bf8f01cfea414140de5dae2223\u200bb00361a396177a9cb410ff61f20015ad"], "Category": ["Binary String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-binarystring.html"], "Title": ["sha384"], "Feature": ["sha384 ( bytea ) \u2192 bytea"], "Description": ["Computes the SHA-384 hash of the binary string."], "Examples": ["sha384('abc'::bytea) \u2192 \\xcb00753f45a35e8bb5a03d699ac65007\u200b272c32ab0eded1631a8b605a43ff5bed\u200b8086072ba1e7cc2358baeca134c825a7"], "Category": ["Binary String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-binarystring.html"], "Title": ["sha512"], "Feature": ["sha512 ( bytea ) \u2192 bytea"], "Description": ["Computes the SHA-512 hash of the binary string."], "Examples": ["sha512('abc'::bytea) \u2192 \\xddaf35a193617abacc417349ae204131\u200b12e6fa4e89a97ea20a9eeee64b55d39a\u200b2192992a274fc1a836ba3c23a3feebbd\u200b454d4423643ce80e2a9ac94fa54ca49f"], "Category": ["Binary String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["floor"], "Feature": ["floor ( numeric ) \u2192 numeric", "floor ( double precision ) \u2192 double precision"], "Description": ["Nearest integer less than or equal to argument"], "Examples": ["floor(42.8) \u2192 42", "floor(-42.8) \u2192 -43"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-binarystring.html"], "Title": ["substr"], "Feature": ["substr ( bytes bytea, start integer [, count integer ] ) \u2192 bytea"], "Description": ["Extracts the substring of bytes starting at the start'th byte, and extending for count bytes if that is specified. (Same as substring(bytes from start for count).)"], "Examples": ["substr('\\x1234567890'::bytea, 3, 2) \u2192 \\x5678"], "Category": ["Binary String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-binarystring.html"], "Title": ["convert"], "Feature": ["convert ( bytes bytea, src_encoding name, dest_encoding name ) \u2192 bytea"], "Description": ["Converts a binary string representing text in encoding src_encoding to a binary string in encoding dest_encoding (see Section\u00a023.3.4 for available conversions)."], "Examples": ["convert('text_in_utf8', 'UTF8', 'LATIN1') \u2192 \\x746578745f696e5f75746638"], "Category": ["Binary String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-binarystring.html"], "Title": ["convert_from"], "Feature": ["convert_from ( bytes bytea, src_encoding name ) \u2192 text"], "Description": ["Converts a binary string representing text in encoding src_encoding to text in the database encoding (see Section\u00a023.3.4 for available conversions)."], "Examples": ["convert_from('text_in_utf8', 'UTF8') \u2192 text_in_utf8"], "Category": ["Binary String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-binarystring.html"], "Title": ["convert_to"], "Feature": ["convert_to ( string text, dest_encoding name ) \u2192 bytea"], "Description": ["Converts a text string (in the database encoding) to a binary string encoded in encoding dest_encoding (see Section\u00a023.3.4 for available conversions)."], "Examples": ["convert_to('some_text', 'UTF8') \u2192 \\x736f6d655f74657874"], "Category": ["Binary String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-binarystring.html"], "Title": ["encode"], "Feature": ["encode ( bytes bytea, format text ) \u2192 text"], "Description": ["Encodes binary data into a textual representation; supported format values are: base64, escape, hex."], "Examples": ["encode('123\\000\\001', 'base64') \u2192 MTIzAAE="], "Category": ["Binary String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-binarystring.html"], "Title": ["decode"], "Feature": ["decode ( string text, format text ) \u2192 bytea"], "Description": ["Decodes binary data from a textual representation; supported format values are the same as for encode."], "Examples": ["decode('MTIzAAE=', 'base64') \u2192 \\x3132330001"], "Category": ["Binary String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-bitstring.html"], "Title": ["bit_count"], "Feature": ["bit_count ( bit ) \u2192 bigint"], "Description": ["Returns the number of bits set in the bit string (also known as \u201cpopcount\u201d)."], "Examples": ["bit_count(B'10111') \u2192 4"], "Category": ["Bit String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-bitstring.html"], "Title": ["bit_length"], "Feature": ["bit_length ( bit ) \u2192 integer"], "Description": ["Returns number of bits in the bit string."], "Examples": ["bit_length(B'10111') \u2192 5"], "Category": ["Bit String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-bitstring.html"], "Title": ["length"], "Feature": ["length ( bit ) \u2192 integer"], "Description": ["Returns number of bits in the bit string."], "Examples": ["length(B'10111') \u2192 5"], "Category": ["Bit String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-bitstring.html"], "Title": ["octet_length"], "Feature": ["octet_length ( bit ) \u2192 integer"], "Description": ["Returns number of bytes in the bit string."], "Examples": ["octet_length(B'1011111011') \u2192 2"], "Category": ["Bit String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["gcd"], "Feature": ["gcd ( numeric_type, numeric_type ) \u2192 numeric_type"], "Description": ["Greatest common divisor (the largest positive number that divides both inputs with no remainder); returns 0 if both inputs are zero; available for integer, bigint, and numeric"], "Examples": ["gcd(1071, 462) \u2192 21"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-bitstring.html"], "Title": ["overlay"], "Feature": ["overlay ( bits bit PLACING newsubstring bit FROM start integer [ FOR count integer ] ) \u2192 bit"], "Description": ["Replaces the substring of bits that starts at the start'th bit and extends for count bits with newsubstring. If count is omitted, it defaults to the length of newsubstring."], "Examples": ["overlay(B'01010101010101010' placing B'11111' from 2 for 3) \u2192 0111110101010101010"], "Category": ["Bit String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-bitstring.html"], "Title": ["position"], "Feature": ["position ( substring bit IN bits bit ) \u2192 integer"], "Description": ["Returns first starting index of the specified substring within bits, or zero if it's not present."], "Examples": ["position(B'010' in B'000001101011') \u2192 8"], "Category": ["Bit String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-bitstring.html"], "Title": ["substring"], "Feature": ["substring ( bits bit [ FROM start integer ] [ FOR count integer ] ) \u2192 bit"], "Description": ["Extracts the substring of bits starting at the start'th bit if that is specified, and stopping after count bits if that is specified. Provide at least one of start and count."], "Examples": ["substring(B'110010111111' from 3 for 2) \u2192 00"], "Category": ["Bit String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-bitstring.html"], "Title": ["get_bit"], "Feature": ["get_bit ( bits bit, n integer ) \u2192 integer"], "Description": ["Extracts n'th bit from bit string; the first (leftmost) bit is bit 0."], "Examples": ["get_bit(B'101010101010101010', 6) \u2192 1"], "Category": ["Bit String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-bitstring.html"], "Title": ["set_bit"], "Feature": ["set_bit ( bits bit, n integer, newvalue integer ) \u2192 bit"], "Description": ["Sets n'th bit in bit string to newvalue; the first (leftmost) bit is bit 0."], "Examples": ["set_bit(B'101010101010101010', 6, 0) \u2192 101010001010101010"], "Category": ["Bit String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-formatting.html"], "Title": ["to_char"], "Feature": ["to_char ( numeric_type, text ) \u2192 text"], "Description": ["Converts number to string according to the given format; available for integer, bigint, numeric, real, double precision."], "Examples": ["to_char(125, '999') \u2192 125", "to_char(125.8::real, '999D9') \u2192 125.8", "to_char(-125.8, '999D99S') \u2192 125.80-"], "Category": ["Data Type Formatting Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-formatting.html"], "Title": ["to_date"], "Feature": ["to_date ( text, text ) \u2192 date"], "Description": ["Converts string to date according to the given format."], "Examples": ["to_date('05 Dec 2000', 'DD Mon YYYY') \u2192 2000-12-05"], "Category": ["Data Type Formatting Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-formatting.html"], "Title": ["to_number"], "Feature": ["to_number ( text, text ) \u2192 numeric"], "Description": ["Converts string to numeric according to the given format."], "Examples": ["to_number('12,454.8-', '99G999D9S') \u2192 -12454.8"], "Category": ["Data Type Formatting Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-formatting.html"], "Title": ["to_timestamp"], "Feature": ["to_timestamp ( text, text ) \u2192 timestamp with time zone"], "Description": ["Converts string to time stamp according to the given format. (See also to_timestamp(double precision) in Table\u00a09.33.)"], "Examples": ["to_timestamp('05 Dec 2000', 'DD Mon YYYY') \u2192 2000-12-05 00:00:00-05"], "Category": ["Data Type Formatting Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-datetime.html"], "Title": ["age"], "Feature": ["age ( timestamp ) \u2192 interval"], "Description": ["Subtract argument from current_date (at midnight)"], "Examples": ["age(timestamp '1957-06-13') \u2192 62 years 6 mons 10 days"], "Category": ["Date divide Time Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["lcm"], "Feature": ["lcm ( numeric_type, numeric_type ) \u2192 numeric_type"], "Description": ["Least common multiple (the smallest strictly positive number that is an integral multiple of both inputs); returns 0 if either input is zero; available for integer, bigint, and numeric"], "Examples": ["lcm(1071, 462) \u2192 23562"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-datetime.html"], "Title": ["clock_timestamp"], "Feature": ["clock_timestamp ( ) \u2192 timestamp with time zone"], "Description": ["Current date and time (changes during statement execution); see Section\u00a09.9.5"], "Examples": ["clock_timestamp() \u2192 2019-12-23 14:39:53.662522-05"], "Category": ["Date divide Time Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-datetime.html"], "Title": ["current_date"], "Feature": ["current_date \u2192 date"], "Description": ["Current date; see Section\u00a09.9.5"], "Examples": ["current_date \u2192 2019-12-23"], "Category": ["Date divide Time Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-datetime.html"], "Title": ["current_time"], "Feature": ["current_time ( integer ) \u2192 time with time zone"], "Description": ["Current time of day, with limited precision; see Section\u00a09.9.5"], "Examples": ["current_time(2) \u2192 14:39:53.66-05"], "Category": ["Date divide Time Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-datetime.html"], "Title": ["current_timestamp"], "Feature": ["current_timestamp ( integer ) \u2192 timestamp with time zone"], "Description": ["Current date and time (start of current transaction), with limited precision; see Section\u00a09.9.5"], "Examples": ["current_timestamp(0) \u2192 2019-12-23 14:39:53-05"], "Category": ["Date divide Time Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-datetime.html"], "Title": ["date_add"], "Feature": ["date_add ( timestamp with time zone, interval [, text ] ) \u2192 timestamp with time zone"], "Description": ["Add an interval to a timestamp with time zone, computing times of day and daylight-savings adjustments according to the time zone named by the third argument, or the current TimeZone setting if that is omitted. The form with two arguments is equivalent to the timestamp with time zone + interval operator."], "Examples": ["date_add('2021-10-31 00:00:00+02'::timestamptz, '1 day'::interval, 'Europe/Warsaw') \u2192 2021-10-31 23:00:00+00"], "Category": ["Date divide Time Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-datetime.html"], "Title": ["date_bin"], "Feature": ["date_bin ( interval, timestamp, timestamp ) \u2192 timestamp"], "Description": ["Bin input into specified interval aligned with specified origin; see Section\u00a09.9.3"], "Examples": ["date_bin('15 minutes', timestamp '2001-02-16 20:38:40', timestamp '2001-02-16 20:05:00') \u2192 2001-02-16 20:35:00"], "Category": ["Date divide Time Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-datetime.html"], "Title": ["date_part"], "Feature": ["date_part ( text, interval ) \u2192 double precision"], "Description": ["Get interval subfield (equivalent to extract); see Section\u00a09.9.1"], "Examples": ["date_part('month', interval '2 years 3 months') \u2192 3"], "Category": ["Date divide Time Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-datetime.html"], "Title": ["date_subtract"], "Feature": ["date_subtract ( timestamp with time zone, interval [, text ] ) \u2192 timestamp with time zone"], "Description": ["Subtract an interval from a timestamp with time zone, computing times of day and daylight-savings adjustments according to the time zone named by the third argument, or the current TimeZone setting if that is omitted. The form with two arguments is equivalent to the timestamp with time zone - interval operator."], "Examples": ["date_subtract('2021-11-01 00:00:00+01'::timestamptz, '1 day'::interval, 'Europe/Warsaw') \u2192 2021-10-30 22:00:00+00"], "Category": ["Date divide Time Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-datetime.html"], "Title": ["date_trunc"], "Feature": ["date_trunc ( text, interval ) \u2192 interval"], "Description": ["Truncate to specified precision; see Section\u00a09.9.2"], "Examples": ["date_trunc('hour', interval '2 days 3 hours 40 minutes') \u2192 2 days 03:00:00"], "Category": ["Date divide Time Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-datetime.html"], "Title": ["extract"], "Feature": ["extract ( field from interval ) \u2192 numeric"], "Description": ["Get interval subfield; see Section\u00a09.9.1"], "Examples": ["extract(month from interval '2 years 3 months') \u2192 3"], "Category": ["Date divide Time Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["ln"], "Feature": ["ln ( numeric ) \u2192 numeric", "ln ( double precision ) \u2192 double precision"], "Description": ["Natural logarithm"], "Examples": ["ln(2.0) \u2192 0.6931471805599453"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-datetime.html"], "Title": ["isfinite"], "Feature": ["isfinite ( interval ) \u2192 boolean"], "Description": ["Test for finite interval (not +/-infinity)"], "Examples": ["isfinite(interval '4 hours') \u2192 true"], "Category": ["Date divide Time Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-datetime.html"], "Title": ["justify_days"], "Feature": ["justify_days ( interval ) \u2192 interval"], "Description": ["Adjust interval, converting 30-day time periods to months"], "Examples": ["justify_days(interval '1 year 65 days') \u2192 1 year 2 mons 5 days"], "Category": ["Date divide Time Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-datetime.html"], "Title": ["justify_hours"], "Feature": ["justify_hours ( interval ) \u2192 interval"], "Description": ["Adjust interval, converting 24-hour time periods to days"], "Examples": ["justify_hours(interval '50 hours 10 minutes') \u2192 2 days 02:10:00"], "Category": ["Date divide Time Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-datetime.html"], "Title": ["justify_interval"], "Feature": ["justify_interval ( interval ) \u2192 interval"], "Description": ["Adjust interval using justify_days and justify_hours, with additional sign adjustments"], "Examples": ["justify_interval(interval '1 mon -1 hour') \u2192 29 days 23:00:00"], "Category": ["Date divide Time Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-datetime.html"], "Title": ["localtime"], "Feature": ["localtime ( integer ) \u2192 time"], "Description": ["Current time of day, with limited precision; see Section\u00a09.9.5"], "Examples": ["localtime(0) \u2192 14:39:53"], "Category": ["Date divide Time Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-datetime.html"], "Title": ["localtimestamp"], "Feature": ["localtimestamp ( integer ) \u2192 timestamp"], "Description": ["Current date and time (start of current transaction), with limited precision; see Section\u00a09.9.5"], "Examples": ["localtimestamp(2) \u2192 2019-12-23 14:39:53.66"], "Category": ["Date divide Time Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-datetime.html"], "Title": ["make_date"], "Feature": ["make_date ( year int, month int, day int ) \u2192 date"], "Description": ["Create date from year, month and day fields (negative years signify BC)"], "Examples": ["make_date(2013, 7, 15) \u2192 2013-07-15"], "Category": ["Date divide Time Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-datetime.html"], "Title": ["make_interval"], "Feature": ["make_interval ( [ years int [, months int [, weeks int [, days int [, hours int [, mins int [, secs double precision ]]]]]]] ) \u2192 interval"], "Description": ["Create interval from years, months, weeks, days, hours, minutes and seconds fields, each of which can default to zero"], "Examples": ["make_interval(days => 10) \u2192 10 days"], "Category": ["Date divide Time Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-datetime.html"], "Title": ["make_time"], "Feature": ["make_time ( hour int, min int, sec double precision ) \u2192 time"], "Description": ["Create time from hour, minute and seconds fields"], "Examples": ["make_time(8, 15, 23.5) \u2192 08:15:23.5"], "Category": ["Date divide Time Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-datetime.html"], "Title": ["make_timestamp"], "Feature": ["make_timestamp ( year int, month int, day int, hour int, min int, sec double precision ) \u2192 timestamp"], "Description": ["Create timestamp from year, month, day, hour, minute and seconds fields (negative years signify BC)"], "Examples": ["make_timestamp(2013, 7, 15, 8, 15, 23.5) \u2192 2013-07-15 08:15:23.5"], "Category": ["Date divide Time Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["log"], "Feature": ["log ( b numeric, x numeric ) \u2192 numeric"], "Description": ["Logarithm of x to base b"], "Examples": ["log(2.0, 64.0) \u2192 6.0000000000000000"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-datetime.html"], "Title": ["make_timestamptz"], "Feature": ["make_timestamptz ( year int, month int, day int, hour int, min int, sec double precision [, timezone text ] ) \u2192 timestamp with time zone"], "Description": ["Create timestamp with time zone from year, month, day, hour, minute and seconds fields (negative years signify BC). If timezone is not specified, the current time zone is used; the examples assume the session time zone is Europe/London"], "Examples": ["make_timestamptz(2013, 7, 15, 8, 15, 23.5) \u2192 2013-07-15 08:15:23.5+01", "make_timestamptz(2013, 7, 15, 8, 15, 23.5, 'America/New_York') \u2192 2013-07-15 13:15:23.5+01"], "Category": ["Date divide Time Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-datetime.html"], "Title": ["now"], "Feature": ["now ( ) \u2192 timestamp with time zone"], "Description": ["Current date and time (start of current transaction); see Section\u00a09.9.5"], "Examples": ["now() \u2192 2019-12-23 14:39:53.662522-05"], "Category": ["Date divide Time Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-datetime.html"], "Title": ["statement_timestamp"], "Feature": ["statement_timestamp ( ) \u2192 timestamp with time zone"], "Description": ["Current date and time (start of current statement); see Section\u00a09.9.5"], "Examples": ["statement_timestamp() \u2192 2019-12-23 14:39:53.662522-05"], "Category": ["Date divide Time Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-datetime.html"], "Title": ["timeofday"], "Feature": ["timeofday ( ) \u2192 text"], "Description": ["Current date and time (like clock_timestamp, but as a text string); see Section\u00a09.9.5"], "Examples": ["timeofday() \u2192 Mon Dec 23 14:39:53.662522 2019 EST"], "Category": ["Date divide Time Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-datetime.html"], "Title": ["transaction_timestamp"], "Feature": ["transaction_timestamp ( ) \u2192 timestamp with time zone"], "Description": ["Current date and time (start of current transaction); see Section\u00a09.9.5"], "Examples": ["transaction_timestamp() \u2192 2019-12-23 14:39:53.662522-05"], "Category": ["Date divide Time Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-datetime.html"], "Title": ["to_timestamp"], "Feature": ["to_timestamp ( double precision ) \u2192 timestamp with time zone"], "Description": ["Convert Unix epoch (seconds since 1970-01-01 00:00:00+00) to timestamp with time zone"], "Examples": ["to_timestamp(1284352323) \u2192 2010-09-13 04:32:03+00"], "Category": ["Date divide Time Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-enum.html"], "Title": ["enum_first"], "Feature": ["enum_first ( anyenum ) \u2192 anyenum"], "Description": ["Returns the first value of the input enum type."], "Examples": ["enum_first(null::rainbow) \u2192 red"], "Category": ["Enum Support Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-enum.html"], "Title": ["enum_last"], "Feature": ["enum_last ( anyenum ) \u2192 anyenum"], "Description": ["Returns the last value of the input enum type."], "Examples": ["enum_last(null::rainbow) \u2192 purple"], "Category": ["Enum Support Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-enum.html"], "Title": ["enum_range"], "Feature": ["enum_range ( anyenum, anyenum ) \u2192 anyarray"], "Description": ["Returns the range between the two given enum values, as an ordered array. The values must be from the same enum type. If the first parameter is null, the result will start with the first value of the enum type. If the second parameter is null, the result will end with the last value of the enum type."], "Examples": ["enum_range('orange'::rainbow, 'green'::rainbow) \u2192 {orange,yellow,green}", "enum_range(NULL, 'green'::rainbow) \u2192 {red,orange,\u200byellow,green}", "enum_range('orange'::rainbow, NULL) \u2192 {orange,yellow,green,\u200bblue,purple}"], "Category": ["Enum Support Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-geometry.html"], "Title": ["area"], "Feature": ["area ( geometric_type ) \u2192 double precision"], "Description": ["Computes area. Available for box, path, circle. A path input must be closed, else NULL is returned. Also, if the path is self-intersecting, the result may be meaningless."], "Examples": ["area(box '(2,2),(0,0)') \u2192 4"], "Category": ["Geometric Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["log10"], "Feature": ["log10 ( numeric ) \u2192 numeric", "log10 ( double precision ) \u2192 double precision"], "Description": ["Base 10 logarithm (same as log)"], "Examples": ["log10(1000) \u2192 3"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-geometry.html"], "Title": ["center"], "Feature": ["center ( geometric_type ) \u2192 point"], "Description": ["Computes center point. Available for box, circle."], "Examples": ["center(box '(1,2),(0,0)') \u2192 (0.5,1)"], "Category": ["Geometric Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-geometry.html"], "Title": ["diagonal"], "Feature": ["diagonal ( box ) \u2192 lseg"], "Description": ["Extracts box's diagonal as a line segment (same as lseg(box))."], "Examples": ["diagonal(box '(1,2),(0,0)') \u2192 [(1,2),(0,0)]"], "Category": ["Geometric Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-geometry.html"], "Title": ["diameter"], "Feature": ["diameter ( circle ) \u2192 double precision"], "Description": ["Computes diameter of circle."], "Examples": ["diameter(circle '<(0,0),2>') \u2192 4"], "Category": ["Geometric Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-geometry.html"], "Title": ["height"], "Feature": ["height ( box ) \u2192 double precision"], "Description": ["Computes vertical size of box."], "Examples": ["height(box '(1,2),(0,0)') \u2192 2"], "Category": ["Geometric Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-geometry.html"], "Title": ["isclosed"], "Feature": ["isclosed ( path ) \u2192 boolean"], "Description": ["Is path closed?"], "Examples": ["isclosed(path '((0,0),(1,1),(2,0))') \u2192 t"], "Category": ["Geometric Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-geometry.html"], "Title": ["isopen"], "Feature": ["isopen ( path ) \u2192 boolean"], "Description": ["Is path open?"], "Examples": ["isopen(path '[(0,0),(1,1),(2,0)]') \u2192 t"], "Category": ["Geometric Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-geometry.html"], "Title": ["length"], "Feature": ["length ( geometric_type ) \u2192 double precision"], "Description": ["Computes the total length. Available for lseg, path."], "Examples": ["length(path '((-1,0),(1,0))') \u2192 4"], "Category": ["Geometric Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-geometry.html"], "Title": ["npoints"], "Feature": ["npoints ( geometric_type ) \u2192 integer"], "Description": ["Returns the number of points. Available for path, polygon."], "Examples": ["npoints(path '[(0,0),(1,1),(2,0)]') \u2192 3"], "Category": ["Geometric Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-geometry.html"], "Title": ["pclose"], "Feature": ["pclose ( path ) \u2192 path"], "Description": ["Converts path to closed form."], "Examples": ["pclose(path '[(0,0),(1,1),(2,0)]') \u2192 ((0,0),(1,1),(2,0))"], "Category": ["Geometric Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-geometry.html"], "Title": ["popen"], "Feature": ["popen ( path ) \u2192 path"], "Description": ["Converts path to open form."], "Examples": ["popen(path '((0,0),(1,1),(2,0))') \u2192 [(0,0),(1,1),(2,0)]"], "Category": ["Geometric Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["min_scale"], "Feature": ["min_scale ( numeric ) \u2192 integer"], "Description": ["Minimum scale (number of fractional decimal digits) needed to represent the supplied value precisely"], "Examples": ["min_scale(8.4100) \u2192 2"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-geometry.html"], "Title": ["radius"], "Feature": ["radius ( circle ) \u2192 double precision"], "Description": ["Computes radius of circle."], "Examples": ["radius(circle '<(0,0),2>') \u2192 2"], "Category": ["Geometric Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-geometry.html"], "Title": ["slope"], "Feature": ["slope ( point, point ) \u2192 double precision"], "Description": ["Computes slope of a line drawn through the two points."], "Examples": ["slope(point '(0,0)', point '(2,1)') \u2192 0.5"], "Category": ["Geometric Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-geometry.html"], "Title": ["width"], "Feature": ["width ( box ) \u2192 double precision"], "Description": ["Computes horizontal size of box."], "Examples": ["width(box '(1,2),(0,0)') \u2192 1"], "Category": ["Geometric Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-geometry.html"], "Title": ["box"], "Feature": ["box ( polygon ) \u2192 box"], "Description": ["Computes bounding box of polygon."], "Examples": ["box(polygon '((0,0),(1,1),(2,0))') \u2192 (2,1),(0,0)"], "Category": ["Geometric Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-geometry.html"], "Title": ["bound_box"], "Feature": ["bound_box ( box, box ) \u2192 box"], "Description": ["Computes bounding box of two boxes."], "Examples": ["bound_box(box '(1,1),(0,0)', box '(4,4),(3,3)') \u2192 (4,4),(0,0)"], "Category": ["Geometric Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-geometry.html"], "Title": ["circle"], "Feature": ["circle ( polygon ) \u2192 circle"], "Description": ["Converts polygon to circle. The circle's center is the mean of the positions of the polygon's points, and the radius is the average distance of the polygon's points from that center."], "Examples": ["circle(polygon '((0,0),(1,3),(2,0))') \u2192 <(1,1),1.6094757082487299>"], "Category": ["Geometric Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-geometry.html"], "Title": ["line"], "Feature": ["line ( point, point ) \u2192 line"], "Description": ["Converts two points to the line through them."], "Examples": ["line(point '(-1,0)', point '(1,0)') \u2192 {0,-1,0}"], "Category": ["Geometric Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-geometry.html"], "Title": ["lseg"], "Feature": ["lseg ( point, point ) \u2192 lseg"], "Description": ["Constructs line segment from two endpoints."], "Examples": ["lseg(point '(-1,0)', point '(1,0)') \u2192 [(-1,0),(1,0)]"], "Category": ["Geometric Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-geometry.html"], "Title": ["path"], "Feature": ["path ( polygon ) \u2192 path"], "Description": ["Converts polygon to a closed path with the same list of points."], "Examples": ["path(polygon '((0,0),(1,1),(2,0))') \u2192 ((0,0),(1,1),(2,0))"], "Category": ["Geometric Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-geometry.html"], "Title": ["point"], "Feature": ["point ( polygon ) \u2192 point"], "Description": ["Computes center of polygon (the mean of the positions of the polygon's points)."], "Examples": ["point(polygon '((0,0),(1,1),(2,0))') \u2192 (1,0.3333333333333333)"], "Category": ["Geometric Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["mod"], "Feature": ["mod ( y numeric_type, x numeric_type ) \u2192 numeric_type"], "Description": ["Remainder of y/x; available for smallint, integer, bigint, and numeric"], "Examples": ["mod(9, 4) \u2192 1"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-comparison.html"], "Title": ["num_nulls"], "Feature": ["num_nulls ( VARIADIC \"any\" ) \u2192 integer"], "Description": ["Returns the number of null arguments."], "Examples": ["num_nulls(1, NULL, 2) \u2192 1"], "Category": ["Comparison Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-geometry.html"], "Title": ["polygon"], "Feature": ["polygon ( path ) \u2192 polygon"], "Description": ["Converts closed path to a polygon with the same list of points."], "Examples": ["polygon(path '((0,0),(1,1),(2,0))') \u2192 ((0,0),(1,1),(2,0))"], "Category": ["Geometric Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-net.html"], "Title": ["abbrev"], "Feature": ["abbrev ( cidr ) \u2192 text"], "Description": ["Creates an abbreviated display format as text. (The abbreviation consists of dropping all-zero octets to the right of the netmask; more examples are in Table\u00a08.22.)"], "Examples": ["abbrev(cidr '10.1.0.0/16') \u2192 10.1/16"], "Category": ["Network Address Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-net.html"], "Title": ["broadcast"], "Feature": ["broadcast ( inet ) \u2192 inet"], "Description": ["Computes the broadcast address for the address's network."], "Examples": ["broadcast(inet '192.168.1.5/24') \u2192 192.168.1.255/24"], "Category": ["Network Address Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-net.html"], "Title": ["family"], "Feature": ["family ( inet ) \u2192 integer"], "Description": ["Returns the address's family: 4 for IPv4, 6 for IPv6."], "Examples": ["family(inet '::1') \u2192 6"], "Category": ["Network Address Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-net.html"], "Title": ["host"], "Feature": ["host ( inet ) \u2192 text"], "Description": ["Returns the IP address as text, ignoring the netmask."], "Examples": ["host(inet '192.168.1.0/24') \u2192 192.168.1.0"], "Category": ["Network Address Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-net.html"], "Title": ["hostmask"], "Feature": ["hostmask ( inet ) \u2192 inet"], "Description": ["Computes the host mask for the address's network."], "Examples": ["hostmask(inet '192.168.23.20/30') \u2192 0.0.0.3"], "Category": ["Network Address Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-net.html"], "Title": ["inet_merge"], "Feature": ["inet_merge ( inet, inet ) \u2192 cidr"], "Description": ["Computes the smallest network that includes both of the given networks."], "Examples": ["inet_merge(inet '192.168.1.5/24', inet '192.168.2.5/24') \u2192 192.168.0.0/22"], "Category": ["Network Address Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-net.html"], "Title": ["inet_same_family"], "Feature": ["inet_same_family ( inet, inet ) \u2192 boolean"], "Description": ["Tests whether the addresses belong to the same IP family."], "Examples": ["inet_same_family(inet '192.168.1.5/24', inet '::1') \u2192 f"], "Category": ["Network Address Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-net.html"], "Title": ["masklen"], "Feature": ["masklen ( inet ) \u2192 integer"], "Description": ["Returns the netmask length in bits."], "Examples": ["masklen(inet '192.168.1.5/24') \u2192 24"], "Category": ["Network Address Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-net.html"], "Title": ["netmask"], "Feature": ["netmask ( inet ) \u2192 inet"], "Description": ["Computes the network mask for the address's network."], "Examples": ["netmask(inet '192.168.1.5/24') \u2192 255.255.255.0"], "Category": ["Network Address Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["pi"], "Feature": ["pi ( ) \u2192 double precision"], "Description": ["Approximate value of \u03c0"], "Examples": ["pi() \u2192 3.141592653589793"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-net.html"], "Title": ["network"], "Feature": ["network ( inet ) \u2192 cidr"], "Description": ["Returns the network part of the address, zeroing out whatever is to the right of the netmask. (This is equivalent to casting the value to cidr.)"], "Examples": ["network(inet '192.168.1.5/24') \u2192 192.168.1.0/24"], "Category": ["Network Address Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-net.html"], "Title": ["set_masklen"], "Feature": ["set_masklen ( cidr, integer ) \u2192 cidr"], "Description": ["Sets the netmask length for a cidr value. Address bits to the right of the new netmask are set to zero."], "Examples": ["set_masklen(cidr '192.168.1.0/24', 16) \u2192 192.168.0.0/16"], "Category": ["Network Address Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-net.html"], "Title": ["text"], "Feature": ["text ( inet ) \u2192 text"], "Description": ["Returns the unabbreviated IP address and netmask length as text. (This has the same result as an explicit cast to text.)"], "Examples": ["text(inet '192.168.1.5') \u2192 192.168.1.5/32"], "Category": ["Network Address Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-net.html"], "Title": ["trunc"], "Feature": ["trunc ( macaddr8 ) \u2192 macaddr8"], "Description": ["Sets the last 5 bytes of the address to zero. The remaining prefix can be associated with a particular manufacturer (using data not included in PostgreSQL)."], "Examples": ["trunc(macaddr8 '12:34:56:78:90:ab:cd:ef') \u2192 12:34:56:00:00:00:00:00"], "Category": ["Network Address Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-net.html"], "Title": ["macaddr8_set7bit"], "Feature": ["macaddr8_set7bit ( macaddr8 ) \u2192 macaddr8"], "Description": ["Sets the 7th bit of the address to one, creating what is known as modified EUI-64, for inclusion in an IPv6 address."], "Examples": ["macaddr8_set7bit(macaddr8 '00:34:56:ab:cd:ef') \u2192 02:34:56:ff:fe:ab:cd:ef"], "Category": ["Network Address Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-textsearch.html"], "Title": ["array_to_tsvector"], "Feature": ["array_to_tsvector ( text[] ) \u2192 tsvector"], "Description": ["Converts an array of text strings to a tsvector. The given strings are used as lexemes as-is, without further processing. Array elements must not be empty strings or NULL."], "Examples": ["array_to_tsvector('{fat,cat,rat}'::text[]) \u2192 'cat' 'fat' 'rat'"], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-textsearch.html"], "Title": ["get_current_ts_config"], "Feature": ["get_current_ts_config ( ) \u2192 regconfig"], "Description": ["Returns the OID of the current default text search configuration (as set by default_text_search_config)."], "Examples": ["get_current_ts_config() \u2192 english"], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-textsearch.html"], "Title": ["length"], "Feature": ["length ( tsvector ) \u2192 integer"], "Description": ["Returns the number of lexemes in the tsvector."], "Examples": ["length('fat:2,4 cat:3 rat:5A'::tsvector) \u2192 3"], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-textsearch.html"], "Title": ["numnode"], "Feature": ["numnode ( tsquery ) \u2192 integer"], "Description": ["Returns the number of lexemes plus operators in the tsquery."], "Examples": ["numnode('(fat & rat) | cat'::tsquery) \u2192 5"], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-textsearch.html"], "Title": ["plainto_tsquery"], "Feature": ["plainto_tsquery ( [ config regconfig, ] query text ) \u2192 tsquery"], "Description": ["Converts text to a tsquery, normalizing words according to the specified or default configuration. Any punctuation in the string is ignored (it does not determine query operators). The resulting query matches documents containing all non-stopwords in the text."], "Examples": ["plainto_tsquery('english', 'The Fat Rats') \u2192 'fat' & 'rat'"], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["power"], "Feature": ["power ( a numeric, b numeric ) \u2192 numeric", "power ( a double precision, b double precision ) \u2192 double precision"], "Description": ["a raised to the power of b"], "Examples": ["power(9, 3) \u2192 729"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-textsearch.html"], "Title": ["phraseto_tsquery"], "Feature": ["phraseto_tsquery ( [ config regconfig, ] query text ) \u2192 tsquery"], "Description": ["Converts text to a tsquery, normalizing words according to the specified or default configuration. Any punctuation in the string is ignored (it does not determine query operators). The resulting query matches phrases containing all non-stopwords in the text."], "Examples": ["phraseto_tsquery('english', 'The Fat Rats') \u2192 'fat' <-> 'rat'", "phraseto_tsquery('english', 'The Cat and Rats') \u2192 'cat' <2> 'rat'"], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-textsearch.html"], "Title": ["websearch_to_tsquery"], "Feature": ["websearch_to_tsquery ( [ config regconfig, ] query text ) \u2192 tsquery"], "Description": ["Converts text to a tsquery, normalizing words according to the specified or default configuration. Quoted word sequences are converted to phrase tests. The word \u201cor\u201d is understood as producing an OR operator, and a dash produces a NOT operator; other punctuation is ignored. This approximates the behavior of some common web search tools."], "Examples": ["websearch_to_tsquery('english', '\"fat rat\" or cat dog') \u2192 'fat' <-> 'rat' | 'cat' & 'dog'"], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-textsearch.html"], "Title": ["querytree"], "Feature": ["querytree ( tsquery ) \u2192 text"], "Description": ["Produces a representation of the indexable portion of a tsquery. A result that is empty or just T indicates a non-indexable query."], "Examples": ["querytree('foo & ! bar'::tsquery) \u2192 'foo'"], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-textsearch.html"], "Title": ["setweight"], "Feature": ["setweight ( vector tsvector, weight \"char\", lexemes text[] ) \u2192 tsvector"], "Description": ["Assigns the specified weight to elements of the vector that are listed in lexemes. The strings in lexemes are taken as lexemes as-is, without further processing. Strings that do not match any lexeme in vector are ignored."], "Examples": ["setweight('fat:2,4 cat:3 rat:5,6B'::tsvector, 'A', '{cat,rat}') \u2192 'cat':3A 'fat':2,4 'rat':5A,6A"], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-textsearch.html"], "Title": ["strip"], "Feature": ["strip ( tsvector ) \u2192 tsvector"], "Description": ["Removes positions and weights from the tsvector."], "Examples": ["strip('fat:2,4 cat:3 rat:5A'::tsvector) \u2192 'cat' 'fat' 'rat'"], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-textsearch.html"], "Title": ["to_tsquery"], "Feature": ["to_tsquery ( [ config regconfig, ] query text ) \u2192 tsquery"], "Description": ["Converts text to a tsquery, normalizing words according to the specified or default configuration. The words must be combined by valid tsquery operators."], "Examples": ["to_tsquery('english', 'The & Fat & Rats') \u2192 'fat' & 'rat'"], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-textsearch.html"], "Title": ["to_tsvector"], "Feature": ["to_tsvector ( [ config regconfig, ] document json ) \u2192 tsvector", "to_tsvector ( [ config regconfig, ] document jsonb ) \u2192 tsvector"], "Description": ["Converts each string value in the JSON document to a tsvector, normalizing words according to the specified or default configuration. The results are then concatenated in document order to produce the output. Position information is generated as though one stopword exists between each pair of string values. (Beware that \u201cdocument order\u201d of the fields of a JSON object is implementation-dependent when the input is jsonb; observe the difference in the examples.)"], "Examples": ["to_tsvector('english', '{\"aa\": \"The Fat Rats\", \"b\": \"dog\"}'::json) \u2192 'dog':5 'fat':2 'rat':3", "to_tsvector('english', '{\"aa\": \"The Fat Rats\", \"b\": \"dog\"}'::jsonb) \u2192 'dog':1 'fat':4 'rat':5"], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-textsearch.html"], "Title": ["json_to_tsvector"], "Feature": ["json_to_tsvector ( [ config regconfig, ] document json, filter jsonb ) \u2192 tsvector", "jsonb_to_tsvector ( [ config regconfig, ] document jsonb, filter jsonb ) \u2192 tsvector"], "Description": ["Selects each item in the JSON document that is requested by the filter and converts each one to a tsvector, normalizing words according to the specified or default configuration. The results are then concatenated in document order to produce the output. Position information is generated as though one stopword exists between each pair of selected items. (Beware that \u201cdocument order\u201d of the fields of a JSON object is implementation-dependent when the input is jsonb.) The filter must be a jsonb array containing zero or more of these keywords: \"string\" (to include all string values), \"numeric\" (to include all numeric values), \"boolean\" (to include all boolean values), \"key\" (to include all keys), or \"all\" (to include all the above). As a special case, the filter can also be a simple JSON value that is one of these keywords."], "Examples": ["json_to_tsvector('english', '{\"a\": \"The Fat Rats\", \"b\": 123}'::json, '[\"string\", \"numeric\"]') \u2192 '123':5 'fat':2 'rat':3", "json_to_tsvector('english', '{\"cat\": \"The Fat Rats\", \"dog\": 123}'::json, '\"all\"') \u2192 '123':9 'cat':1 'dog':7 'fat':4 'rat':5"], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-textsearch.html"], "Title": ["ts_delete"], "Feature": ["ts_delete ( vector tsvector, lexemes text[] ) \u2192 tsvector"], "Description": ["Removes any occurrences of the lexemes in lexemes from the vector. The strings in lexemes are taken as lexemes as-is, without further processing. Strings that do not match any lexeme in vector are ignored."], "Examples": ["ts_delete('fat:2,4 cat:3 rat:5A'::tsvector, ARRAY['fat','rat']) \u2192 'cat':3"], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-textsearch.html"], "Title": ["ts_filter"], "Feature": ["ts_filter ( vector tsvector, weights \"char\"[] ) \u2192 tsvector"], "Description": ["Selects only elements with the given weights from the vector."], "Examples": ["ts_filter('fat:2,4 cat:3b,7c rat:5A'::tsvector, '{a,b}') \u2192 'cat':3B 'rat':5A"], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["radians"], "Feature": ["radians ( double precision ) \u2192 double precision"], "Description": ["Converts degrees to radians"], "Examples": ["radians(45.0) \u2192 0.7853981633974483"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-textsearch.html"], "Title": ["ts_headline"], "Feature": ["ts_headline ( [ config regconfig, ] document json, query tsquery [, options text ] ) \u2192 text", "ts_headline ( [ config regconfig, ] document jsonb, query tsquery [, options text ] ) \u2192 text"], "Description": ["Displays, in an abbreviated form, match(es) for the query that occur in string values within the JSON document. See Section\u00a012.3.4 for more details."], "Examples": ["ts_headline('{\"cat\":\"raining cats and dogs\"}'::jsonb, 'cat') \u2192 {\"cat\": \"raining <b>cats</b> and dogs\"}"], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-textsearch.html"], "Title": ["ts_rank"], "Feature": ["ts_rank ( [ weights real[], ] vector tsvector, query tsquery [, normalization integer ] ) \u2192 real"], "Description": ["Computes a score showing how well the vector matches the query. See Section\u00a012.3.3 for details."], "Examples": ["ts_rank(to_tsvector('raining cats and dogs'), 'cat') \u2192 0.06079271"], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-textsearch.html"], "Title": ["ts_rank_cd"], "Feature": ["ts_rank_cd ( [ weights real[], ] vector tsvector, query tsquery [, normalization integer ] ) \u2192 real"], "Description": ["Computes a score showing how well the vector matches the query, using a cover density algorithm. See Section\u00a012.3.3 for details."], "Examples": ["ts_rank_cd(to_tsvector('raining cats and dogs'), 'cat') \u2192 0.1"], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-textsearch.html"], "Title": ["ts_rewrite"], "Feature": ["ts_rewrite ( query tsquery, select text ) \u2192 tsquery"], "Description": ["Replaces portions of the query according to target(s) and substitute(s) obtained by executing a SELECT command. See Section\u00a012.4.2.1 for details."], "Examples": ["SELECT ts_rewrite('a & b'::tsquery, 'SELECT t,s FROM aliases') \u2192 'b' & ( 'foo' | 'bar' )"], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-textsearch.html"], "Title": ["tsquery_phrase"], "Feature": ["tsquery_phrase ( query1 tsquery, query2 tsquery, distance integer ) \u2192 tsquery"], "Description": ["Constructs a phrase query that searches for matches of query1 and query2 that occur exactly distance lexemes apart."], "Examples": ["tsquery_phrase(to_tsquery('fat'), to_tsquery('cat'), 10) \u2192 'fat' <10> 'cat'"], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-textsearch.html"], "Title": ["tsvector_to_array"], "Feature": ["tsvector_to_array ( tsvector ) \u2192 text[]"], "Description": ["Converts a tsvector to an array of lexemes."], "Examples": ["tsvector_to_array('fat:2,4 cat:3 rat:5A'::tsvector) \u2192 {cat,fat,rat}"], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-textsearch.html"], "Title": ["unnest"], "Feature": ["unnest ( tsvector ) \u2192 setof record ( lexeme text, positions smallint[], weights text )"], "Description": ["Expands a tsvector into a set of rows, one per lexeme."], "Examples": ["select * from unnest('cat:3 fat:2,4 rat:5A'::tsvector) \u2192"], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-textsearch.html"], "Title": ["ts_debug"], "Feature": ["ts_debug ( [ config regconfig, ] document text ) \u2192 setof record ( alias text, description text, token text, dictionaries regdictionary[], dictionary regdictionary, lexemes text[] )"], "Description": ["Extracts and normalizes tokens from the document according to the specified or default text search configuration, and returns information about how each token was processed. See Section\u00a012.8.1 for details."], "Examples": ["ts_debug('english', 'The Brightest supernovaes') \u2192 (asciiword,\"Word, all ASCII\",The,{english_stem},english_stem,{}) ..."], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-textsearch.html"], "Title": ["ts_lexize"], "Feature": ["ts_lexize ( dict regdictionary, token text ) \u2192 text[]"], "Description": ["Returns an array of replacement lexemes if the input token is known to the dictionary, or an empty array if the token is known to the dictionary but it is a stop word, or NULL if it is not a known word. See Section\u00a012.8.3 for details."], "Examples": ["ts_lexize('english_stem', 'stars') \u2192 {star}"], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-textsearch.html"], "Title": ["ts_parse"], "Feature": ["ts_parse ( parser_oid oid, document text ) \u2192 setof record ( tokid integer, token text )"], "Description": ["Extracts tokens from the document using a parser specified by OID. See Section\u00a012.8.2 for details."], "Examples": ["ts_parse(3722, 'foo - bar') \u2192 (1,foo) ..."], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["round"], "Feature": ["round ( v numeric, s integer ) \u2192 numeric"], "Description": ["Rounds v to s decimal places. Ties are broken by rounding away from zero."], "Examples": ["round(42.4382, 2) \u2192 42.44", "round(1234.56, -1) \u2192 1230"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-textsearch.html"], "Title": ["ts_token_type"], "Feature": ["ts_token_type ( parser_oid oid ) \u2192 setof record ( tokid integer, alias text, description text )"], "Description": ["Returns a table that describes each type of token a parser specified by OID can recognize. See Section\u00a012.8.2 for details."], "Examples": ["ts_token_type(3722) \u2192 (1,asciiword,\"Word, all ASCII\") ..."], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-textsearch.html"], "Title": ["ts_stat"], "Feature": ["ts_stat ( sqlquery text [, weights text ] ) \u2192 setof record ( word text, ndoc integer, nentry integer )"], "Description": ["Executes the sqlquery, which must return a single tsvector column, and returns statistics about each distinct lexeme contained in the data. See Section\u00a012.4.4 for details."], "Examples": ["ts_stat('SELECT vector FROM apod') \u2192 (foo,10,15) ..."], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["to_json"], "Feature": ["to_json ( anyelement ) \u2192 json", "to_jsonb ( anyelement ) \u2192 jsonb"], "Description": ["Converts any SQL value to json or jsonb. Arrays and composites are converted recursively to arrays and objects (multidimensional arrays become arrays of arrays in JSON). Otherwise, if there is a cast from the SQL data type to json, the cast function will be used to perform the conversion;[a] otherwise, a scalar JSON value is produced. For any scalar other than a number, a Boolean, or a null value, the text representation will be used, with escaping as necessary to make it a valid JSON string value."], "Examples": ["to_json('Fred said \"Hi.\"'::text) \u2192 \"Fred said \\\"Hi.\\\"\"", "to_jsonb(row(42, 'Fred said \"Hi.\"'::text)) \u2192 {\"f1\": 42, \"f2\": \"Fred said \\\"Hi.\\\"\"}"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["array_to_json"], "Feature": ["array_to_json ( anyarray [, boolean ] ) \u2192 json"], "Description": ["Converts an SQL array to a JSON array. The behavior is the same as to_json except that line feeds will be added between top-level array elements if the optional boolean parameter is true."], "Examples": ["array_to_json('{{1,5},{99,100}}'::int[]) \u2192 [[1,5],[99,100]]"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["json_array"], "Feature": ["json_array ( [ { value_expression [ FORMAT JSON ] } [, ...] ] [ { NULL | ABSENT } ON NULL ] [ RETURNING data_type [ FORMAT JSON [ ENCODING UTF8 ] ] ])", "json_array ( [ query_expression ] [ RETURNING data_type [ FORMAT JSON [ ENCODING UTF8 ] ] ])"], "Description": ["Constructs a JSON array from either a series of value_expression parameters or from the results of query_expression, which must be a SELECT query returning a single column. If ABSENT ON NULL is specified, NULL values are ignored. This is always the case if a query_expression is used."], "Examples": ["json_array(1,true,json '{\"a\":null}') \u2192 [1, true, {\"a\":null}]", "json_array(SELECT * FROM (VALUES(1),(2)) t) \u2192 [1, 2]"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["row_to_json"], "Feature": ["row_to_json ( record [, boolean ] ) \u2192 json"], "Description": ["Converts an SQL composite value to a JSON object. The behavior is the same as to_json except that line feeds will be added between top-level elements if the optional boolean parameter is true."], "Examples": ["row_to_json(row(1,'foo')) \u2192 {\"f1\":1,\"f2\":\"foo\"}"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["json_build_array"], "Feature": ["json_build_array ( VARIADIC \"any\" ) \u2192 json", "jsonb_build_array ( VARIADIC \"any\" ) \u2192 jsonb"], "Description": ["Builds a possibly-heterogeneously-typed JSON array out of a variadic argument list. Each argument is converted as per to_json or to_jsonb."], "Examples": ["json_build_array(1, 2, 'foo', 4, 5) \u2192 [1, 2, \"foo\", 4, 5]"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["json_build_object"], "Feature": ["json_build_object ( VARIADIC \"any\" ) \u2192 json", "jsonb_build_object ( VARIADIC \"any\" ) \u2192 jsonb"], "Description": ["Builds a JSON object out of a variadic argument list. By convention, the argument list consists of alternating keys and values. Key arguments are coerced to text; value arguments are converted as per to_json or to_jsonb."], "Examples": ["json_build_object('foo', 1, 2, row(3,'bar')) \u2192 {\"foo\" : 1, \"2\" : {\"f1\":3,\"f2\":\"bar\"}}"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["json_object"], "Feature": ["json_object ( keys text[], values text[] ) \u2192 json", "jsonb_object ( keys text[], values text[] ) \u2192 jsonb"], "Description": ["This form of json_object takes keys and values pairwise from separate text arrays. Otherwise it is identical to the one-argument form."], "Examples": ["json_object('{a,b}', '{1,2}') \u2192 {\"a\": \"1\", \"b\": \"2\"}"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["json"], "Feature": ["json ( expression [ FORMAT JSON [ ENCODING UTF8 ]] [ { WITH | WITHOUT } UNIQUE [ KEYS ]] ) \u2192 json"], "Description": ["Converts a given expression specified as text or bytea string (in UTF8 encoding) into a JSON value. If expression is NULL, an SQL null value is returned. If WITH UNIQUE is specified, the expression must not contain any duplicate object keys."], "Examples": ["json('{\"a\":123, \"b\":[true,\"foo\"], \"a\":\"bar\"}') \u2192 {\"a\":123, \"b\":[true,\"foo\"], \"a\":\"bar\"}"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["scale"], "Feature": ["scale ( numeric ) \u2192 integer"], "Description": ["Scale of the argument (the number of decimal digits in the fractional part)"], "Examples": ["scale(8.4100) \u2192 4"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["json_scalar"], "Feature": ["json_scalar ( expression )"], "Description": ["Converts a given SQL scalar value into a JSON scalar value. If the input is NULL, an SQL null is returned. If the input is number or a boolean value, a corresponding JSON number or boolean value is returned. For any other value, a JSON string is returned."], "Examples": ["json_scalar(123.45) \u2192 123.45", "json_scalar(CURRENT_TIMESTAMP) \u2192 \"2022-05-10T10:51:04.62128-04:00\""], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["json_serialize"], "Feature": ["json_serialize ( expression [ FORMAT JSON [ ENCODING UTF8 ] ] [ RETURNING data_type [ FORMAT JSON [ ENCODING UTF8 ] ] ] )"], "Description": ["Converts an SQL/JSON expression into a character or binary string. The expression can be of any JSON type, any character string type, or bytea in UTF8 encoding. The returned type used in RETURNING can be any character string type or bytea. The default is text."], "Examples": ["json_serialize('{ \"a\" : 1 } ' RETURNING bytea) \u2192 \\x7b20226122203a2031207d20"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["expression IS [ NOT ] JSON [ { VALUE | SCALAR | ARRAY | OBJECT } ] [ { WITH | WITHOUT } UNIQUE [ KEYS ] ]"], "Feature": ["expression IS [ NOT ] JSON [ { VALUE | SCALAR | ARRAY | OBJECT } ] [ { WITH | WITHOUT } UNIQUE [ KEYS ] ]"], "Description": ["This predicate tests whether expression can be parsed as JSON, possibly of a specified type. If SCALAR or ARRAY or OBJECT is specified, the test is whether or not the JSON is of that particular type. If WITH UNIQUE KEYS is specified, then any object in the expression is also tested to see if it has duplicate keys."], "Examples": [], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["json_array_elements"], "Feature": ["json_array_elements ( json ) \u2192 setof json", "jsonb_array_elements ( jsonb ) \u2192 setof jsonb"], "Description": ["Expands the top-level JSON array into a set of JSON values."], "Examples": ["select * from json_array_elements('[1,true, [2,false]]') \u2192"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["json_array_elements_text"], "Feature": ["json_array_elements_text ( json ) \u2192 setof text", "jsonb_array_elements_text ( jsonb ) \u2192 setof text"], "Description": ["Expands the top-level JSON array into a set of text values."], "Examples": ["select * from json_array_elements_text('[\"foo\", \"bar\"]') \u2192"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["json_array_length"], "Feature": ["json_array_length ( json ) \u2192 integer", "jsonb_array_length ( jsonb ) \u2192 integer"], "Description": ["Returns the number of elements in the top-level JSON array."], "Examples": ["json_array_length('[1,2,3,{\"f1\":1,\"f2\":[5,6]},4]') \u2192 5", "jsonb_array_length('[]') \u2192 0"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["json_each"], "Feature": ["json_each ( json ) \u2192 setof record ( key text, value json )", "jsonb_each ( jsonb ) \u2192 setof record ( key text, value jsonb )"], "Description": ["Expands the top-level JSON object into a set of key/value pairs."], "Examples": ["select * from json_each('{\"a\":\"foo\", \"b\":\"bar\"}') \u2192"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["json_each_text"], "Feature": ["json_each_text ( json ) \u2192 setof record ( key text, value text )", "jsonb_each_text ( jsonb ) \u2192 setof record ( key text, value text )"], "Description": ["Expands the top-level JSON object into a set of key/value pairs. The returned values will be of type text."], "Examples": ["select * from json_each_text('{\"a\":\"foo\", \"b\":\"bar\"}') \u2192"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["json_extract_path"], "Feature": ["json_extract_path ( from_json json, VARIADIC path_elems text[] ) \u2192 json", "jsonb_extract_path ( from_json jsonb, VARIADIC path_elems text[] ) \u2192 jsonb"], "Description": ["Extracts JSON sub-object at the specified path. (This is functionally equivalent to the #> operator, but writing the path out as a variadic list can be more convenient in some cases.)"], "Examples": ["json_extract_path('{\"f2\":{\"f3\":1},\"f4\":{\"f5\":99,\"f6\":\"foo\"}}', 'f4', 'f6') \u2192 \"foo\""], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["json_extract_path_text"], "Feature": ["json_extract_path_text ( from_json json, VARIADIC path_elems text[] ) \u2192 text", "jsonb_extract_path_text ( from_json jsonb, VARIADIC path_elems text[] ) \u2192 text"], "Description": ["Extracts JSON sub-object at the specified path as text. (This is functionally equivalent to the #>> operator.)"], "Examples": ["json_extract_path_text('{\"f2\":{\"f3\":1},\"f4\":{\"f5\":99,\"f6\":\"foo\"}}', 'f4', 'f6') \u2192 foo"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["sign"], "Feature": ["sign ( numeric ) \u2192 numeric", "sign ( double precision ) \u2192 double precision"], "Description": ["Sign of the argument (-1, 0, or +1)"], "Examples": ["sign(-8.4) \u2192 -1"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["json_object_keys"], "Feature": ["json_object_keys ( json ) \u2192 setof text", "jsonb_object_keys ( jsonb ) \u2192 setof text"], "Description": ["Returns the set of keys in the top-level JSON object."], "Examples": ["select * from json_object_keys('{\"f1\":\"abc\",\"f2\":{\"f3\":\"a\", \"f4\":\"b\"}}') \u2192"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["json_populate_record"], "Feature": ["json_populate_record ( base anyelement, from_json json ) \u2192 anyelement", "jsonb_populate_record ( base anyelement, from_json jsonb ) \u2192 anyelement"], "Description": ["Expands the top-level JSON object to a row having the composite type of the base argument. The JSON object is scanned for fields whose names match column names of the output row type, and their values are inserted into those columns of the output. (Fields that do not correspond to any output column name are ignored.) In typical use, the value of base is just NULL, which means that any output columns that do not match any object field will be filled with nulls. However, if base isn't NULL then the values it contains will be used for unmatched columns.", "To convert a JSON value to the SQL type of an output column, the following rules are applied in sequence:", "A JSON null value is converted to an SQL null in all cases.", "If the output column is of type json or jsonb, the JSON value is just reproduced exactly.", "If the output column is a composite (row) type, and the JSON value is a JSON object, the fields of the object are converted to columns of the output row type by recursive application of these rules.", "Likewise, if the output column is an array type and the JSON value is a JSON array, the elements of the JSON array are converted to elements of the output array by recursive application of these rules.", "Otherwise, if the JSON value is a string, the contents of the string are fed to the input conversion function for the column's data type.", "Otherwise, the ordinary text representation of the JSON value is fed to the input conversion function for the column's data type.", "While the example below uses a constant JSON value, typical use would be to reference a json or jsonb column laterally from another table in the query's FROM clause. Writing json_populate_record in the FROM clause is good practice, since all of the extracted columns are available for use without duplicate function calls.", "create type subrowtype as (d int, e text); create type myrowtype as (a int, b text[], c subrowtype);"], "Examples": ["select * from json_populate_record(null::myrowtype, '{\"a\": 1, \"b\": [\"2\", \"a b\"], \"c\": {\"d\": 4, \"e\": \"a b c\"}, \"x\": \"foo\"}') \u2192"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["jsonb_populate_record_valid"], "Feature": ["jsonb_populate_record_valid ( base anyelement, from_json json ) \u2192 boolean"], "Description": ["Function for testing jsonb_populate_record. Returns true if the input jsonb_populate_record would finish without an error for the given input JSON object; that is, it's valid input, false otherwise.", "create type jsb_char2 as (a char(2));"], "Examples": ["select jsonb_populate_record_valid(NULL::jsb_char2, '{\"a\": \"aaa\"}'); \u2192", "select * from jsonb_populate_record(NULL::jsb_char2, '{\"a\": \"aaa\"}') q; \u2192", "select jsonb_populate_record_valid(NULL::jsb_char2, '{\"a\": \"aa\"}'); \u2192", "select * from jsonb_populate_record(NULL::jsb_char2, '{\"a\": \"aa\"}') q; \u2192"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["json_populate_recordset"], "Feature": ["json_populate_recordset ( base anyelement, from_json json ) \u2192 setof anyelement", "jsonb_populate_recordset ( base anyelement, from_json jsonb ) \u2192 setof anyelement"], "Description": ["Expands the top-level JSON array of objects to a set of rows having the composite type of the base argument. Each element of the JSON array is processed as described above for json[b]_populate_record.", "create type twoints as (a int, b int);"], "Examples": ["select * from json_populate_recordset(null::twoints, '[{\"a\":1,\"b\":2}, {\"a\":3,\"b\":4}]') \u2192"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["json_to_record"], "Feature": ["json_to_record ( json ) \u2192 record", "jsonb_to_record ( jsonb ) \u2192 record"], "Description": ["Expands the top-level JSON object to a row having the composite type defined by an AS clause. (As with all functions returning record, the calling query must explicitly define the structure of the record with an AS clause.) The output record is filled from fields of the JSON object, in the same way as described above for json[b]_populate_record. Since there is no input record value, unmatched columns are always filled with nulls.", "create type myrowtype as (a int, b text);"], "Examples": ["select * from json_to_record('{\"a\":1,\"b\":[1,2,3],\"c\":[1,2,3],\"e\":\"bar\",\"r\": {\"a\": 123, \"b\": \"a b c\"}}') as x(a int, b text, c int[], d text, r myrowtype) \u2192"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["json_to_recordset"], "Feature": ["json_to_recordset ( json ) \u2192 setof record", "jsonb_to_recordset ( jsonb ) \u2192 setof record"], "Description": ["Expands the top-level JSON array of objects to a set of rows having the composite type defined by an AS clause. (As with all functions returning record, the calling query must explicitly define the structure of the record with an AS clause.) Each element of the JSON array is processed as described above for json[b]_populate_record."], "Examples": ["select * from json_to_recordset('[{\"a\":1,\"b\":\"foo\"}, {\"a\":\"2\",\"c\":\"bar\"}]') as x(a int, b text) \u2192"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["jsonb_set"], "Feature": ["jsonb_set ( target jsonb, path text[], new_value jsonb [, create_if_missing boolean ] ) \u2192 jsonb"], "Description": ["Returns target with the item designated by path replaced by new_value, or with new_value added if create_if_missing is true (which is the default) and the item designated by path does not exist. All earlier steps in the path must exist, or the target is returned unchanged. As with the path oriented operators, negative integers that appear in the path count from the end of JSON arrays. If the last path step is an array index that is out of range, and create_if_missing is true, the new value is added at the beginning of the array if the index is negative, or at the end of the array if it is positive."], "Examples": ["jsonb_set('[{\"f1\":1,\"f2\":null},2,null,3]', '{0,f1}', '[2,3,4]', false) \u2192 [{\"f1\": [2, 3, 4], \"f2\": null}, 2, null, 3]", "jsonb_set('[{\"f1\":1,\"f2\":null},2]', '{0,f3}', '[2,3,4]') \u2192 [{\"f1\": 1, \"f2\": null, \"f3\": [2, 3, 4]}, 2]"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["jsonb_set_lax"], "Feature": ["jsonb_set_lax ( target jsonb, path text[], new_value jsonb [, create_if_missing boolean [, null_value_treatment text ]] ) \u2192 jsonb"], "Description": ["If new_value is not NULL, behaves identically to jsonb_set. Otherwise behaves according to the value of null_value_treatment which must be one of 'raise_exception', 'use_json_null', 'delete_key', or 'return_target'. The default is 'use_json_null'."], "Examples": ["jsonb_set_lax('[{\"f1\":1,\"f2\":null},2,null,3]', '{0,f1}', null) \u2192 [{\"f1\": null, \"f2\": null}, 2, null, 3]", "jsonb_set_lax('[{\"f1\":99,\"f2\":null},2]', '{0,f3}', null, true, 'return_target') \u2192 [{\"f1\": 99, \"f2\": null}, 2]"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["jsonb_insert"], "Feature": ["jsonb_insert ( target jsonb, path text[], new_value jsonb [, insert_after boolean ] ) \u2192 jsonb"], "Description": ["Returns target with new_value inserted. If the item designated by the path is an array element, new_value will be inserted before that item if insert_after is false (which is the default), or after it if insert_after is true. If the item designated by the path is an object field, new_value will be inserted only if the object does not already contain that key. All earlier steps in the path must exist, or the target is returned unchanged. As with the path oriented operators, negative integers that appear in the path count from the end of JSON arrays. If the last path step is an array index that is out of range, the new value is added at the beginning of the array if the index is negative, or at the end of the array if it is positive."], "Examples": ["jsonb_insert('{\"a\": [0,1,2]}', '{a, 1}', '\"new_value\"') \u2192 {\"a\": [0, \"new_value\", 1, 2]}", "jsonb_insert('{\"a\": [0,1,2]}', '{a, 1}', '\"new_value\"', true) \u2192 {\"a\": [0, 1, \"new_value\", 2]}"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["json_strip_nulls"], "Feature": ["json_strip_nulls ( json ) \u2192 json", "jsonb_strip_nulls ( jsonb ) \u2192 jsonb"], "Description": ["Deletes all object fields that have null values from the given JSON value, recursively. Null values that are not object fields are untouched."], "Examples": ["json_strip_nulls('[{\"f1\":1, \"f2\":null}, 2, null, 3]') \u2192 [{\"f1\":1},2,null,3]"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["sqrt"], "Feature": ["sqrt ( numeric ) \u2192 numeric", "sqrt ( double precision ) \u2192 double precision"], "Description": ["Square root"], "Examples": ["sqrt(2) \u2192 1.4142135623730951"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["jsonb_path_exists"], "Feature": ["jsonb_path_exists ( target jsonb, path jsonpath [, vars jsonb [, silent boolean ]] ) \u2192 boolean"], "Description": ["Checks whether the JSON path returns any item for the specified JSON value. (This is useful only with SQL-standard JSON path expressions, not predicate check expressions, since those always return a value.) If the vars argument is specified, it must be a JSON object, and its fields provide named values to be substituted into the jsonpath expression. If the silent argument is specified and is true, the function suppresses the same errors as the @? and @@ operators do."], "Examples": ["jsonb_path_exists('{\"a\":[1,2,3,4,5]}', '$.a[*] ? (@ >= $min && @ <= $max)', '{\"min\":2, \"max\":4}') \u2192 t"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["jsonb_path_match"], "Feature": ["jsonb_path_match ( target jsonb, path jsonpath [, vars jsonb [, silent boolean ]] ) \u2192 boolean"], "Description": ["Returns the result of a JSON path predicate check for the specified JSON value. (This is useful only with predicate check expressions, not SQL-standard JSON path expressions, since it will either fail or return NULL if the path result is not a single boolean value.) The optional vars and silent arguments act the same as for jsonb_path_exists."], "Examples": ["jsonb_path_match('{\"a\":[1,2,3,4,5]}', 'exists($.a[*] ? (@ >= $min && @ <= $max))', '{\"min\":2, \"max\":4}') \u2192 t"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["jsonb_path_query"], "Feature": ["jsonb_path_query ( target jsonb, path jsonpath [, vars jsonb [, silent boolean ]] ) \u2192 setof jsonb"], "Description": ["Returns all JSON items returned by the JSON path for the specified JSON value. For SQL-standard JSON path expressions it returns the JSON values selected from target. For predicate check expressions it returns the result of the predicate check: true, false, or null. The optional vars and silent arguments act the same as for jsonb_path_exists."], "Examples": ["select * from jsonb_path_query('{\"a\":[1,2,3,4,5]}', '$.a[*] ? (@ >= $min && @ <= $max)', '{\"min\":2, \"max\":4}') \u2192"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["jsonb_path_query_array"], "Feature": ["jsonb_path_query_array ( target jsonb, path jsonpath [, vars jsonb [, silent boolean ]] ) \u2192 jsonb"], "Description": ["Returns all JSON items returned by the JSON path for the specified JSON value, as a JSON array. The parameters are the same as for jsonb_path_query."], "Examples": ["jsonb_path_query_array('{\"a\":[1,2,3,4,5]}', '$.a[*] ? (@ >= $min && @ <= $max)', '{\"min\":2, \"max\":4}') \u2192 [2, 3, 4]"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["jsonb_path_query_first"], "Feature": ["jsonb_path_query_first ( target jsonb, path jsonpath [, vars jsonb [, silent boolean ]] ) \u2192 jsonb"], "Description": ["Returns the first JSON item returned by the JSON path for the specified JSON value, or NULL if there are no results. The parameters are the same as for jsonb_path_query."], "Examples": ["jsonb_path_query_first('{\"a\":[1,2,3,4,5]}', '$.a[*] ? (@ >= $min && @ <= $max)', '{\"min\":2, \"max\":4}') \u2192 2"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["jsonb_path_exists_tz"], "Feature": ["jsonb_path_exists_tz ( target jsonb, path jsonpath [, vars jsonb [, silent boolean ]] ) \u2192 boolean", "jsonb_path_match_tz ( target jsonb, path jsonpath [, vars jsonb [, silent boolean ]] ) \u2192 boolean", "jsonb_path_query_tz ( target jsonb, path jsonpath [, vars jsonb [, silent boolean ]] ) \u2192 setof jsonb", "jsonb_path_query_array_tz ( target jsonb, path jsonpath [, vars jsonb [, silent boolean ]] ) \u2192 jsonb", "jsonb_path_query_first_tz ( target jsonb, path jsonpath [, vars jsonb [, silent boolean ]] ) \u2192 jsonb"], "Description": ["These functions act like their counterparts described above without the _tz suffix, except that these functions support comparisons of date/time values that require timezone-aware conversions. The example below requires interpretation of the date-only value 2015-08-02 as a timestamp with time zone, so the result depends on the current TimeZone setting. Due to this dependency, these functions are marked as stable, which means these functions cannot be used in indexes. Their counterparts are immutable, and so can be used in indexes; but they will throw errors if asked to make such comparisons."], "Examples": ["jsonb_path_exists_tz('[\"2015-08-01 12:00:00-05\"]', '$[*] ? (@.datetime() < \"2015-08-02\".datetime())') \u2192 t"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["jsonb_pretty"], "Feature": ["jsonb_pretty ( jsonb ) \u2192 text"], "Description": ["Converts the given JSON value to pretty-printed, indented text."], "Examples": ["jsonb_pretty('[{\"f1\":1,\"f2\":null}, 2]') \u2192"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["json_typeof"], "Feature": ["json_typeof ( json ) \u2192 text", "jsonb_typeof ( jsonb ) \u2192 text"], "Description": ["Returns the type of the top-level JSON value as a text string. Possible types are object, array, string, number, boolean, and null. (The null result should not be confused with an SQL NULL; see the examples.)"], "Examples": ["json_typeof('-123.4') \u2192 number", "json_typeof('null'::json) \u2192 null", "json_typeof(NULL::json) IS NULL \u2192 t"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["value . type"], "Feature": ["value . type() \u2192 string"], "Description": ["Type of the JSON item (see json_typeof)"], "Examples": ["jsonb_path_query_array('[1, \"2\", {}]', '$[*].type()') \u2192 [\"number\", \"string\", \"object\"]"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["value . size"], "Feature": ["value . size() \u2192 number"], "Description": ["Size of the JSON item (number of array elements, or 1 if not an array)"], "Examples": ["jsonb_path_query('{\"m\": [11, 15]}', '$.m.size()') \u2192 2"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["trim_scale"], "Feature": ["trim_scale ( numeric ) \u2192 numeric"], "Description": ["Reduces the value's scale (number of fractional decimal digits) by removing trailing zeroes"], "Examples": ["trim_scale(8.4100) \u2192 8.41"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["value . boolean"], "Feature": ["value . boolean() \u2192 boolean"], "Description": ["Boolean value converted from a JSON boolean, number, or string"], "Examples": ["jsonb_path_query_array('[1, \"yes\", false]', '$[*].boolean()') \u2192 [true, true, false]"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["value . string"], "Feature": ["value . string() \u2192 string"], "Description": ["String value converted from a JSON boolean, number, string, or datetime"], "Examples": ["jsonb_path_query_array('[1.23, \"xyz\", false]', '$[*].string()') \u2192 [\"1.23\", \"xyz\", \"false\"]", "jsonb_path_query('\"2023-08-15 12:34:56\"', '$.timestamp().string()') \u2192 \"2023-08-15T12:34:56\""], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["value . double"], "Feature": ["value . double() \u2192 number"], "Description": ["Approximate floating-point number converted from a JSON number or string"], "Examples": ["jsonb_path_query('{\"len\": \"1.9\"}', '$.len.double() * 2') \u2192 3.8"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["number . ceiling"], "Feature": ["number . ceiling() \u2192 number"], "Description": ["Nearest integer greater than or equal to the given number"], "Examples": ["jsonb_path_query('{\"h\": 1.3}', '$.h.ceiling()') \u2192 2"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["number . floor"], "Feature": ["number . floor() \u2192 number"], "Description": ["Nearest integer less than or equal to the given number"], "Examples": ["jsonb_path_query('{\"h\": 1.7}', '$.h.floor()') \u2192 1"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["number . abs"], "Feature": ["number . abs() \u2192 number"], "Description": ["Absolute value of the given number"], "Examples": ["jsonb_path_query('{\"z\": -0.3}', '$.z.abs()') \u2192 0.3"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["value . bigint"], "Feature": ["value . bigint() \u2192 bigint"], "Description": ["Big integer value converted from a JSON number or string"], "Examples": ["jsonb_path_query('{\"len\": \"9876543219\"}', '$.len.bigint()') \u2192 9876543219"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["value . decimal"], "Feature": ["value . decimal( [ precision [ , scale ] ] ) \u2192 decimal"], "Description": ["Rounded decimal value converted from a JSON number or string (precision and scale must be integer values)"], "Examples": ["jsonb_path_query('1234.5678', '$.decimal(6, 2)') \u2192 1234.57"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["value . integer"], "Feature": ["value . integer() \u2192 integer"], "Description": ["Integer value converted from a JSON number or string"], "Examples": ["jsonb_path_query('{\"len\": \"12345\"}', '$.len.integer()') \u2192 12345"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["value . number"], "Feature": ["value . number() \u2192 numeric"], "Description": ["Numeric value converted from a JSON number or string"], "Examples": ["jsonb_path_query('{\"len\": \"123.45\"}', '$.len.number()') \u2192 123.45"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["trunc"], "Feature": ["trunc ( v numeric, s integer ) \u2192 numeric"], "Description": ["Truncates v to s decimal places"], "Examples": ["trunc(42.4382, 2) \u2192 42.43"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["string . datetime"], "Feature": ["string . datetime(template) \u2192 datetime_type (see note)"], "Description": ["Date/time value converted from a string using the specified to_timestamp template"], "Examples": ["jsonb_path_query_array('[\"12:30\", \"18:40\"]', '$[*].datetime(\"HH24:MI\")') \u2192 [\"12:30:00\", \"18:40:00\"]"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["string . date"], "Feature": ["string . date() \u2192 date"], "Description": ["Date value converted from a string"], "Examples": ["jsonb_path_query('\"2023-08-15\"', '$.date()') \u2192 \"2023-08-15\""], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["string . time"], "Feature": ["string . time(precision) \u2192 time without time zone"], "Description": ["Time without time zone value converted from a string, with fractional seconds adjusted to the given precision"], "Examples": ["jsonb_path_query('\"12:34:56.789\"', '$.time(2)') \u2192 \"12:34:56.79\""], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["string . time_tz"], "Feature": ["string . time_tz(precision) \u2192 time with time zone"], "Description": ["Time with time zone value converted from a string, with fractional seconds adjusted to the given precision"], "Examples": ["jsonb_path_query('\"12:34:56.789 +05:30\"', '$.time_tz(2)') \u2192 \"12:34:56.79+05:30\""], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["string . timestamp"], "Feature": ["string . timestamp(precision) \u2192 timestamp without time zone"], "Description": ["Timestamp without time zone value converted from a string, with fractional seconds adjusted to the given precision"], "Examples": ["jsonb_path_query('\"2023-08-15 12:34:56.789\"', '$.timestamp(2)') \u2192 \"2023-08-15T12:34:56.79\""], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["string . timestamp_tz"], "Feature": ["string . timestamp_tz(precision) \u2192 timestamp with time zone"], "Description": ["Timestamp with time zone value converted from a string, with fractional seconds adjusted to the given precision"], "Examples": ["jsonb_path_query('\"2023-08-15 12:34:56.789 +05:30\"', '$.timestamp_tz(2)') \u2192 \"2023-08-15T12:34:56.79+05:30\""], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": ["object . keyvalue"], "Feature": ["object . keyvalue() \u2192 array"], "Description": ["The object's key-value pairs, represented as an array of objects containing three fields: \"key\", \"value\", and \"id\"; \"id\" is a unique identifier of the object the key-value pair belongs to"], "Examples": ["jsonb_path_query_array('{\"x\": \"20\", \"y\": 32}', '$.keyvalue()') \u2192 [{\"id\": 0, \"key\": \"x\", \"value\": \"20\"}, {\"id\": 0, \"key\": \"y\", \"value\": 32}]"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-json.html"], "Title": [""], "Feature": ["", ""], "Description": ["Returns the result of applying the SQL/JSON path_expression to the context_item.", "Only use JSON_VALUE() if the extracted value is expected to be a single SQL/JSON scalar item; getting multiple values will be treated as an error. If you expect that extracted value might be an object or an array, use the JSON_QUERY function instead.", "By default, the result, which must be a single scalar value, is returned as a value of type text, though the RETURNING clause can be used to return as some other type to which it can be successfully coerced.", "The ON ERROR and ON EMPTY clauses have similar semantics as mentioned in the description of JSON_QUERY, except the set of values returned in lieu of throwing an error is different.", "Note that scalar strings returned by JSON_VALUE always have their quotes removed, equivalent to specifying OMIT QUOTES in JSON_QUERY.", "Examples:"], "Examples": ["JSON_VALUE(jsonb '\"123.45\"', '$' RETURNING float) \u2192 123.45", "JSON_VALUE(jsonb '\"03:04 2015-02-01\"', '$.datetime(\"HH24:MI\u00a0YYYY-MM-DD\")' RETURNING date) \u2192 2015-02-01", "JSON_VALUE(jsonb '[1,2]', 'strict $[$off]' PASSING 1 as off) \u2192 2", "JSON_VALUE(jsonb '[1,2]', 'strict $[*]' DEFAULT 9 ON ERROR) \u2192 9"], "Category": ["JSON Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-sequence.html"], "Title": ["nextval"], "Feature": ["nextval ( regclass ) \u2192 bigint"], "Description": ["Advances the sequence object to its next value and returns that value. This is done atomically: even if multiple sessions execute nextval concurrently, each will safely receive a distinct sequence value. If the sequence object has been created with default parameters, successive nextval calls will return successive values beginning with 1. Other behaviors can be obtained by using appropriate parameters in the CREATE SEQUENCE command.", "This function requires USAGE or UPDATE privilege on the sequence."], "Examples": [], "Category": ["Sequence Manipulation Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-sequence.html"], "Title": ["setval"], "Feature": ["setval ( regclass, bigint [, boolean ] ) \u2192 bigint"], "Description": ["Sets the sequence object's current value, and optionally its is_called flag. The two-parameter form sets the sequence's last_value field to the specified value and sets its is_called field to true, meaning that the next nextval will advance the sequence before returning a value. The value that will be reported by currval is also set to the specified value. In the three-parameter form, is_called can be set to either true or false. true has the same effect as the two-parameter form. If it is set to false, the next nextval will return exactly the specified value, and sequence advancement commences with the following nextval. Furthermore, the value reported by currval is not changed in this case. For example,", "The result returned by setval is just the value of its second argument.", "This function requires UPDATE privilege on the sequence."], "Examples": [], "Category": ["Sequence Manipulation Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["width_bucket"], "Feature": ["width_bucket ( operand anycompatible, thresholds anycompatiblearray ) \u2192 integer"], "Description": ["Returns the number of the bucket in which operand falls given an array listing the lower bounds of the buckets. Returns 0 for an input less than the first lower bound. operand and the array elements can be of any type having standard comparison operators. The thresholds array must be sorted, smallest first, or unexpected results will be obtained."], "Examples": ["width_bucket(now(), array['yesterday', 'today', 'tomorrow']::timestamptz[]) \u2192 2"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["abs"], "Feature": ["abs ( numeric_type ) \u2192 numeric_type"], "Description": ["Absolute value"], "Examples": ["abs(-17.4) \u2192 17.4"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-sequence.html"], "Title": ["currval"], "Feature": ["currval ( regclass ) \u2192 bigint"], "Description": ["Returns the value most recently obtained by nextval for this sequence in the current session. (An error is reported if nextval has never been called for this sequence in this session.) Because this is returning a session-local value, it gives a predictable answer whether or not other sessions have executed nextval since the current session did.", "This function requires USAGE or SELECT privilege on the sequence."], "Examples": [], "Category": ["Sequence Manipulation Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-sequence.html"], "Title": ["lastval"], "Feature": ["lastval () \u2192 bigint"], "Description": ["Returns the value most recently returned by nextval in the current session. This function is identical to currval, except that instead of taking the sequence name as an argument it refers to whichever sequence nextval was most recently applied to in the current session. It is an error to call lastval if nextval has not yet been called in the current session.", "This function requires USAGE or SELECT privilege on the last used sequence."], "Examples": [], "Category": ["Sequence Manipulation Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-array.html"], "Title": ["array_append"], "Feature": ["array_append ( anycompatiblearray, anycompatible ) \u2192 anycompatiblearray"], "Description": ["Appends an element to the end of an array (same as the anycompatiblearray || anycompatible operator)."], "Examples": ["array_append(ARRAY[1,2], 3) \u2192 {1,2,3}"], "Category": ["Array Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-array.html"], "Title": ["array_cat"], "Feature": ["array_cat ( anycompatiblearray, anycompatiblearray ) \u2192 anycompatiblearray"], "Description": ["Concatenates two arrays (same as the anycompatiblearray || anycompatiblearray operator)."], "Examples": ["array_cat(ARRAY[1,2,3], ARRAY[4,5]) \u2192 {1,2,3,4,5}"], "Category": ["Array Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-array.html"], "Title": ["array_dims"], "Feature": ["array_dims ( anyarray ) \u2192 text"], "Description": ["Returns a text representation of the array's dimensions."], "Examples": ["array_dims(ARRAY[[1,2,3], [4,5,6]]) \u2192 [1:2][1:3]"], "Category": ["Array Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-array.html"], "Title": ["array_fill"], "Feature": ["array_fill ( anyelement, integer[] [, integer[] ] ) \u2192 anyarray"], "Description": ["Returns an array filled with copies of the given value, having dimensions of the lengths specified by the second argument. The optional third argument supplies lower-bound values for each dimension (which default to all 1)."], "Examples": ["array_fill(11, ARRAY[2,3]) \u2192 {{11,11,11},{11,11,11}}", "array_fill(7, ARRAY[3], ARRAY[2]) \u2192 [2:4]={7,7,7}"], "Category": ["Array Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-array.html"], "Title": ["array_length"], "Feature": ["array_length ( anyarray, integer ) \u2192 integer"], "Description": ["Returns the length of the requested array dimension. (Produces NULL instead of 0 for empty or missing array dimensions.)"], "Examples": ["array_length(array[1,2,3], 1) \u2192 3", "array_length(array[]::int[], 1) \u2192 NULL", "array_length(array['text'], 2) \u2192 NULL"], "Category": ["Array Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-array.html"], "Title": ["array_lower"], "Feature": ["array_lower ( anyarray, integer ) \u2192 integer"], "Description": ["Returns the lower bound of the requested array dimension."], "Examples": ["array_lower('[0:2]={1,2,3}'::integer[], 1) \u2192 0"], "Category": ["Array Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-array.html"], "Title": ["array_ndims"], "Feature": ["array_ndims ( anyarray ) \u2192 integer"], "Description": ["Returns the number of dimensions of the array."], "Examples": ["array_ndims(ARRAY[[1,2,3], [4,5,6]]) \u2192 2"], "Category": ["Array Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-array.html"], "Title": ["array_position"], "Feature": ["array_position ( anycompatiblearray, anycompatible [, integer ] ) \u2192 integer"], "Description": ["Returns the subscript of the first occurrence of the second argument in the array, or NULL if it's not present. If the third argument is given, the search begins at that subscript. The array must be one-dimensional. Comparisons are done using IS NOT DISTINCT FROM semantics, so it is possible to search for NULL."], "Examples": ["array_position(ARRAY['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'], 'mon') \u2192 2"], "Category": ["Array Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["random"], "Feature": ["random ( min integer, max integer ) \u2192 integer", "random ( min bigint, max bigint ) \u2192 bigint", "random ( min numeric, max numeric ) \u2192 numeric"], "Description": ["Returns a random value in the range min <= x <= max. For type numeric, the result will have the same number of fractional decimal digits as min or max, whichever has more."], "Examples": ["random(1, 10) \u2192 7", "random(-0.499, 0.499) \u2192 0.347"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-array.html"], "Title": ["array_positions"], "Feature": ["array_positions ( anycompatiblearray, anycompatible ) \u2192 integer[]"], "Description": ["Returns an array of the subscripts of all occurrences of the second argument in the array given as first argument. The array must be one-dimensional. Comparisons are done using IS NOT DISTINCT FROM semantics, so it is possible to search for NULL. NULL is returned only if the array is NULL; if the value is not found in the array, an empty array is returned."], "Examples": ["array_positions(ARRAY['A','A','B','A'], 'A') \u2192 {1,2,4}"], "Category": ["Array Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-array.html"], "Title": ["array_prepend"], "Feature": ["array_prepend ( anycompatible, anycompatiblearray ) \u2192 anycompatiblearray"], "Description": ["Prepends an element to the beginning of an array (same as the anycompatible || anycompatiblearray operator)."], "Examples": ["array_prepend(1, ARRAY[2,3]) \u2192 {1,2,3}"], "Category": ["Array Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-array.html"], "Title": ["array_remove"], "Feature": ["array_remove ( anycompatiblearray, anycompatible ) \u2192 anycompatiblearray"], "Description": ["Removes all elements equal to the given value from the array. The array must be one-dimensional. Comparisons are done using IS NOT DISTINCT FROM semantics, so it is possible to remove NULLs."], "Examples": ["array_remove(ARRAY[1,2,3,2], 2) \u2192 {1,3}"], "Category": ["Array Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-array.html"], "Title": ["array_replace"], "Feature": ["array_replace ( anycompatiblearray, anycompatible, anycompatible ) \u2192 anycompatiblearray"], "Description": ["Replaces each array element equal to the second argument with the third argument."], "Examples": ["array_replace(ARRAY[1,2,5,4], 5, 3) \u2192 {1,2,3,4}"], "Category": ["Array Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-array.html"], "Title": ["array_sample"], "Feature": ["array_sample ( array anyarray, n integer ) \u2192 anyarray"], "Description": ["Returns an array of n items randomly selected from array. n may not exceed the length of array's first dimension. If array is multi-dimensional, an \u201citem\u201d is a slice having a given first subscript."], "Examples": ["array_sample(ARRAY[1,2,3,4,5,6], 3) \u2192 {2,6,1}", "array_sample(ARRAY[[1,2],[3,4],[5,6]], 2) \u2192 {{5,6},{1,2}}"], "Category": ["Array Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-array.html"], "Title": ["array_shuffle"], "Feature": ["array_shuffle ( anyarray ) \u2192 anyarray"], "Description": ["Randomly shuffles the first dimension of the array."], "Examples": ["array_shuffle(ARRAY[[1,2],[3,4],[5,6]]) \u2192 {{5,6},{1,2},{3,4}}"], "Category": ["Array Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-array.html"], "Title": ["array_to_string"], "Feature": ["array_to_string ( array anyarray, delimiter text [, null_string text ] ) \u2192 text"], "Description": ["Converts each array element to its text representation, and concatenates those separated by the delimiter string. If null_string is given and is not NULL, then NULL array entries are represented by that string; otherwise, they are omitted. See also string_to_array."], "Examples": ["array_to_string(ARRAY[1, 2, 3, NULL, 5], ',', '*') \u2192 1,2,3,*,5"], "Category": ["Array Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-array.html"], "Title": ["array_upper"], "Feature": ["array_upper ( anyarray, integer ) \u2192 integer"], "Description": ["Returns the upper bound of the requested array dimension."], "Examples": ["array_upper(ARRAY[1,8,3,7], 1) \u2192 4"], "Category": ["Array Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-array.html"], "Title": ["cardinality"], "Feature": ["cardinality ( anyarray ) \u2192 integer"], "Description": ["Returns the total number of elements in the array, or 0 if the array is empty."], "Examples": ["cardinality(ARRAY[[1,2],[3,4]]) \u2192 4"], "Category": ["Array Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-array.html"], "Title": ["trim_array"], "Feature": ["trim_array ( array anyarray, n integer ) \u2192 anyarray"], "Description": ["Trims an array by removing the last n elements. If the array is multidimensional, only the first dimension is trimmed."], "Examples": ["trim_array(ARRAY[1,2,3,4,5,6], 2) \u2192 {1,2,3,4}"], "Category": ["Array Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["random_normal"], "Feature": ["random_normal ( [ mean double precision [, stddev double precision ]] ) \u2192 double precision"], "Description": ["Returns a random value from the normal distribution with the given parameters; mean defaults to 0.0 and stddev defaults to 1.0"], "Examples": ["random_normal(0.0, 1.0) \u2192 0.051285419"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-array.html"], "Title": ["unnest"], "Feature": ["unnest ( anyarray, anyarray [, ... ] ) \u2192 setof anyelement, anyelement [, ... ]"], "Description": ["Expands multiple arrays (possibly of different data types) into a set of rows. If the arrays are not all the same length then the shorter ones are padded with NULLs. This form is only allowed in a query's FROM clause; see Section\u00a07.2.1.4."], "Examples": ["select * from unnest(ARRAY[1,2], ARRAY['foo','bar','baz']) as x(a,b) \u2192"], "Category": ["Array Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-range.html"], "Title": ["lower"], "Feature": ["lower ( anymultirange ) \u2192 anyelement"], "Description": ["Extracts the lower bound of the multirange (NULL if the multirange is empty has no lower bound)."], "Examples": ["lower('{[1.1,2.2)}'::nummultirange) \u2192 1.1"], "Category": ["Range divide Multirange Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-range.html"], "Title": ["upper"], "Feature": ["upper ( anymultirange ) \u2192 anyelement"], "Description": ["Extracts the upper bound of the multirange (NULL if the multirange is empty or has no upper bound)."], "Examples": ["upper('{[1.1,2.2)}'::nummultirange) \u2192 2.2"], "Category": ["Range divide Multirange Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-range.html"], "Title": ["isempty"], "Feature": ["isempty ( anymultirange ) \u2192 boolean"], "Description": ["Is the multirange empty?"], "Examples": ["isempty('{[1.1,2.2)}'::nummultirange) \u2192 f"], "Category": ["Range divide Multirange Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-range.html"], "Title": ["lower_inc"], "Feature": ["lower_inc ( anymultirange ) \u2192 boolean"], "Description": ["Is the multirange's lower bound inclusive?"], "Examples": ["lower_inc('{[1.1,2.2)}'::nummultirange) \u2192 t"], "Category": ["Range divide Multirange Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-range.html"], "Title": ["upper_inc"], "Feature": ["upper_inc ( anymultirange ) \u2192 boolean"], "Description": ["Is the multirange's upper bound inclusive?"], "Examples": ["upper_inc('{[1.1,2.2)}'::nummultirange) \u2192 f"], "Category": ["Range divide Multirange Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-range.html"], "Title": ["lower_inf"], "Feature": ["lower_inf ( anymultirange ) \u2192 boolean"], "Description": ["Does the multirange have no lower bound? (A lower bound of -Infinity returns false.)"], "Examples": ["lower_inf('{(,)}'::datemultirange) \u2192 t"], "Category": ["Range divide Multirange Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-range.html"], "Title": ["upper_inf"], "Feature": ["upper_inf ( anymultirange ) \u2192 boolean"], "Description": ["Does the multirange have no upper bound? (An upper bound of Infinity returns false.)"], "Examples": ["upper_inf('{(,)}'::datemultirange) \u2192 t"], "Category": ["Range divide Multirange Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-range.html"], "Title": ["range_merge"], "Feature": ["range_merge ( anymultirange ) \u2192 anyrange"], "Description": ["Computes the smallest range that includes the entire multirange."], "Examples": ["range_merge('{[1,2), [3,4)}'::int4multirange) \u2192 [1,4)"], "Category": ["Range divide Multirange Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-range.html"], "Title": ["multirange"], "Feature": ["multirange ( anyrange ) \u2192 anymultirange"], "Description": ["Returns a multirange containing just the given range."], "Examples": ["multirange('[1,2)'::int4range) \u2192 {[1,2)}"], "Category": ["Range divide Multirange Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["setseed"], "Feature": ["setseed ( double precision ) \u2192 void"], "Description": ["Sets the seed for subsequent random() and random_normal() calls; argument must be between -1.0 and 1.0, inclusive", "setseed(0.12345)"], "Examples": [], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-range.html"], "Title": ["unnest"], "Feature": ["unnest ( anymultirange ) \u2192 setof anyrange"], "Description": ["Expands a multirange into a set of ranges in ascending order."], "Examples": ["unnest('{[1,2), [3,4)}'::int4multirange) \u2192"], "Category": ["Range divide Multirange Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["any_value"], "Feature": ["any_value ( anyelement ) \u2192 same as input type"], "Description": ["Returns an arbitrary value from the non-null input values."], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["array_agg"], "Feature": ["array_agg ( anyarray ORDER BY input_sort_columns ) \u2192 anyarray"], "Description": ["Concatenates all the input arrays into an array of one higher dimension. (The inputs must all have the same dimensionality, and cannot be empty or null.)"], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["avg"], "Feature": ["avg ( smallint ) \u2192 numeric", "avg ( integer ) \u2192 numeric", "avg ( bigint ) \u2192 numeric", "avg ( numeric ) \u2192 numeric", "avg ( real ) \u2192 double precision", "avg ( double precision ) \u2192 double precision", "avg ( interval ) \u2192 interval"], "Description": ["Computes the average (arithmetic mean) of all the non-null input values."], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["bit_and"], "Feature": ["bit_and ( smallint ) \u2192 smallint", "bit_and ( integer ) \u2192 integer", "bit_and ( bigint ) \u2192 bigint", "bit_and ( bit ) \u2192 bit"], "Description": ["Computes the bitwise AND of all non-null input values."], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["bit_or"], "Feature": ["bit_or ( smallint ) \u2192 smallint", "bit_or ( integer ) \u2192 integer", "bit_or ( bigint ) \u2192 bigint", "bit_or ( bit ) \u2192 bit"], "Description": ["Computes the bitwise OR of all non-null input values."], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["bit_xor"], "Feature": ["bit_xor ( smallint ) \u2192 smallint", "bit_xor ( integer ) \u2192 integer", "bit_xor ( bigint ) \u2192 bigint", "bit_xor ( bit ) \u2192 bit"], "Description": ["Computes the bitwise exclusive OR of all non-null input values. Can be useful as a checksum for an unordered set of values."], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["bool_and"], "Feature": ["bool_and ( boolean ) \u2192 boolean"], "Description": ["Returns true if all non-null input values are true, otherwise false."], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["bool_or"], "Feature": ["bool_or ( boolean ) \u2192 boolean"], "Description": ["Returns true if any non-null input value is true, otherwise false."], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["count"], "Feature": ["count ( \"any\" ) \u2192 bigint"], "Description": ["Computes the number of input rows in which the input value is not null."], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["acos"], "Feature": ["acos ( double precision ) \u2192 double precision"], "Description": ["Inverse cosine, result in radians"], "Examples": ["acos(1) \u2192 0"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["every"], "Feature": ["every ( boolean ) \u2192 boolean"], "Description": ["This is the SQL standard's equivalent to bool_and."], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["json_agg"], "Feature": ["json_agg ( anyelement ORDER BY input_sort_columns ) \u2192 json", "jsonb_agg ( anyelement ORDER BY input_sort_columns ) \u2192 jsonb"], "Description": ["Collects all the input values, including nulls, into a JSON array. Values are converted to JSON as per to_json or to_jsonb."], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["json_agg_strict"], "Feature": ["json_agg_strict ( anyelement ) \u2192 json", "jsonb_agg_strict ( anyelement ) \u2192 jsonb"], "Description": ["Collects all the input values, skipping nulls, into a JSON array. Values are converted to JSON as per to_json or to_jsonb."], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["json_arrayagg"], "Feature": ["json_arrayagg ( [ value_expression ] [ ORDER BY sort_expression ] [ { NULL | ABSENT } ON NULL ] [ RETURNING data_type [ FORMAT JSON [ ENCODING UTF8 ] ] ])"], "Description": ["Behaves in the same way as json_array but as an aggregate function so it only takes one value_expression parameter. If ABSENT ON NULL is specified, any NULL values are omitted. If ORDER BY is specified, the elements will appear in the array in that order rather than in the input order."], "Examples": ["SELECT json_arrayagg(v) FROM (VALUES(2),(1)) t(v) \u2192 [2, 1]"], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["json_objectagg"], "Feature": ["json_objectagg ( [ { key_expression { VALUE | ':' } value_expression } ] [ { NULL | ABSENT } ON NULL ] [ { WITH | WITHOUT } UNIQUE [ KEYS ] ] [ RETURNING data_type [ FORMAT JSON [ ENCODING UTF8 ] ] ])"], "Description": ["Behaves like json_object, but as an aggregate function, so it only takes one key_expression and one value_expression parameter."], "Examples": ["SELECT json_objectagg(k:v) FROM (VALUES ('a'::text,current_date),('b',current_date + 1)) AS t(k,v) \u2192 { \"a\" : \"2022-05-10\", \"b\" : \"2022-05-11\" }"], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["json_object_agg"], "Feature": ["json_object_agg ( key \"any\", value \"any\" ORDER BY input_sort_columns ) \u2192 json", "jsonb_object_agg ( key \"any\", value \"any\" ORDER BY input_sort_columns ) \u2192 jsonb"], "Description": ["Collects all the key/value pairs into a JSON object. Key arguments are coerced to text; value arguments are converted as per to_json or to_jsonb. Values can be null, but keys cannot."], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["json_object_agg_strict"], "Feature": ["json_object_agg_strict ( key \"any\", value \"any\" ) \u2192 json", "jsonb_object_agg_strict ( key \"any\", value \"any\" ) \u2192 jsonb"], "Description": ["Collects all the key/value pairs into a JSON object. Key arguments are coerced to text; value arguments are converted as per to_json or to_jsonb. The key can not be null. If the value is null then the entry is skipped,"], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["json_object_agg_unique"], "Feature": ["json_object_agg_unique ( key \"any\", value \"any\" ) \u2192 json", "jsonb_object_agg_unique ( key \"any\", value \"any\" ) \u2192 jsonb"], "Description": ["Collects all the key/value pairs into a JSON object. Key arguments are coerced to text; value arguments are converted as per to_json or to_jsonb. Values can be null, but keys cannot. If there is a duplicate key an error is thrown."], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["json_object_agg_unique_strict"], "Feature": ["json_object_agg_unique_strict ( key \"any\", value \"any\" ) \u2192 json", "jsonb_object_agg_unique_strict ( key \"any\", value \"any\" ) \u2192 jsonb"], "Description": ["Collects all the key/value pairs into a JSON object. Key arguments are coerced to text; value arguments are converted as per to_json or to_jsonb. The key can not be null. If the value is null then the entry is skipped. If there is a duplicate key an error is thrown."], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["max"], "Feature": ["max ( see text ) \u2192 same as input type"], "Description": ["Computes the maximum of the non-null input values. Available for any numeric, string, date/time, or enum type, as well as inet, interval, money, oid, pg_lsn, tid, xid8, and arrays of any of these types."], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["acosd"], "Feature": ["acosd ( double precision ) \u2192 double precision"], "Description": ["Inverse cosine, result in degrees"], "Examples": ["acosd(0.5) \u2192 60"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["min"], "Feature": ["min ( see text ) \u2192 same as input type"], "Description": ["Computes the minimum of the non-null input values. Available for any numeric, string, date/time, or enum type, as well as inet, interval, money, oid, pg_lsn, tid, xid8, and arrays of any of these types."], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["range_agg"], "Feature": ["range_agg ( value anyrange ) \u2192 anymultirange", "range_agg ( value anymultirange ) \u2192 anymultirange"], "Description": ["Computes the union of the non-null input values."], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["range_intersect_agg"], "Feature": ["range_intersect_agg ( value anyrange ) \u2192 anyrange", "range_intersect_agg ( value anymultirange ) \u2192 anymultirange"], "Description": ["Computes the intersection of the non-null input values."], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["string_agg"], "Feature": ["string_agg ( value text, delimiter text ) \u2192 text", "string_agg ( value bytea, delimiter bytea ORDER BY input_sort_columns ) \u2192 bytea"], "Description": ["Concatenates the non-null input values into a string. Each value after the first is preceded by the corresponding delimiter (if it's not null)."], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["sum"], "Feature": ["sum ( smallint ) \u2192 bigint", "sum ( integer ) \u2192 bigint", "sum ( bigint ) \u2192 numeric", "sum ( numeric ) \u2192 numeric", "sum ( real ) \u2192 real", "sum ( double precision ) \u2192 double precision", "sum ( interval ) \u2192 interval", "sum ( money ) \u2192 money"], "Description": ["Computes the sum of the non-null input values."], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["xmlagg"], "Feature": ["xmlagg ( xml ORDER BY input_sort_columns ) \u2192 xml"], "Description": ["Concatenates the non-null XML input values (see Section\u00a09.15.1.8)."], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["corr"], "Feature": ["corr ( Y double precision, X double precision ) \u2192 double precision"], "Description": ["Computes the correlation coefficient."], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["covar_pop"], "Feature": ["covar_pop ( Y double precision, X double precision ) \u2192 double precision"], "Description": ["Computes the population covariance."], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["covar_samp"], "Feature": ["covar_samp ( Y double precision, X double precision ) \u2192 double precision"], "Description": ["Computes the sample covariance."], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["regr_avgx"], "Feature": ["regr_avgx ( Y double precision, X double precision ) \u2192 double precision"], "Description": ["Computes the average of the independent variable, sum(X)/N."], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["asin"], "Feature": ["asin ( double precision ) \u2192 double precision"], "Description": ["Inverse sine, result in radians"], "Examples": ["asin(1) \u2192 1.5707963267948966"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["regr_avgy"], "Feature": ["regr_avgy ( Y double precision, X double precision ) \u2192 double precision"], "Description": ["Computes the average of the dependent variable, sum(Y)/N."], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["regr_count"], "Feature": ["regr_count ( Y double precision, X double precision ) \u2192 bigint"], "Description": ["Computes the number of rows in which both inputs are non-null."], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["regr_intercept"], "Feature": ["regr_intercept ( Y double precision, X double precision ) \u2192 double precision"], "Description": ["Computes the y-intercept of the least-squares-fit linear equation determined by the (X, Y) pairs."], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["regr_r2"], "Feature": ["regr_r2 ( Y double precision, X double precision ) \u2192 double precision"], "Description": ["Computes the square of the correlation coefficient."], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["regr_slope"], "Feature": ["regr_slope ( Y double precision, X double precision ) \u2192 double precision"], "Description": ["Computes the slope of the least-squares-fit linear equation determined by the (X, Y) pairs."], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["regr_sxx"], "Feature": ["regr_sxx ( Y double precision, X double precision ) \u2192 double precision"], "Description": ["Computes the \u201csum of squares\u201d of the independent variable, sum(X^2) - sum(X)^2/N."], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["regr_sxy"], "Feature": ["regr_sxy ( Y double precision, X double precision ) \u2192 double precision"], "Description": ["Computes the \u201csum of products\u201d of independent times dependent variables, sum(X*Y) - sum(X) * sum(Y)/N."], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["regr_syy"], "Feature": ["regr_syy ( Y double precision, X double precision ) \u2192 double precision"], "Description": ["Computes the \u201csum of squares\u201d of the dependent variable, sum(Y^2) - sum(Y)^2/N."], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["stddev"], "Feature": ["stddev ( numeric_type ) \u2192 double precision for real or double precision, otherwise numeric"], "Description": ["This is a historical alias for stddev_samp."], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["stddev_pop"], "Feature": ["stddev_pop ( numeric_type ) \u2192 double precision for real or double precision, otherwise numeric"], "Description": ["Computes the population standard deviation of the input values."], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["asind"], "Feature": ["asind ( double precision ) \u2192 double precision"], "Description": ["Inverse sine, result in degrees"], "Examples": ["asind(0.5) \u2192 30"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["stddev_samp"], "Feature": ["stddev_samp ( numeric_type ) \u2192 double precision for real or double precision, otherwise numeric"], "Description": ["Computes the sample standard deviation of the input values."], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["variance"], "Feature": ["variance ( numeric_type ) \u2192 double precision for real or double precision, otherwise numeric"], "Description": ["This is a historical alias for var_samp."], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["var_pop"], "Feature": ["var_pop ( numeric_type ) \u2192 double precision for real or double precision, otherwise numeric"], "Description": ["Computes the population variance of the input values (square of the population standard deviation)."], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["var_samp"], "Feature": ["var_samp ( numeric_type ) \u2192 double precision for real or double precision, otherwise numeric"], "Description": ["Computes the sample variance of the input values (square of the sample standard deviation)."], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["mode"], "Feature": ["mode () WITHIN GROUP ( ORDER BY anyelement ) \u2192 anyelement"], "Description": ["Computes the mode, the most frequent value of the aggregated argument (arbitrarily choosing the first one if there are multiple equally-frequent values). The aggregated argument must be of a sortable type."], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["percentile_cont"], "Feature": ["percentile_cont ( fractions double precision[] ) WITHIN GROUP ( ORDER BY double precision ) \u2192 double precision[]", "percentile_cont ( fractions double precision[] ) WITHIN GROUP ( ORDER BY interval ) \u2192 interval[]"], "Description": ["Computes multiple continuous percentiles. The result is an array of the same dimensions as the fractions parameter, with each non-null element replaced by the (possibly interpolated) value corresponding to that percentile."], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["percentile_disc"], "Feature": ["percentile_disc ( fractions double precision[] ) WITHIN GROUP ( ORDER BY anyelement ) \u2192 anyarray"], "Description": ["Computes multiple discrete percentiles. The result is an array of the same dimensions as the fractions parameter, with each non-null element replaced by the input value corresponding to that percentile. The aggregated argument must be of a sortable type."], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["rank"], "Feature": ["rank ( args ) WITHIN GROUP ( ORDER BY sorted_args ) \u2192 bigint"], "Description": ["Computes the rank of the hypothetical row, with gaps; that is, the row number of the first row in its peer group."], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["dense_rank"], "Feature": ["dense_rank ( args ) WITHIN GROUP ( ORDER BY sorted_args ) \u2192 bigint"], "Description": ["Computes the rank of the hypothetical row, without gaps; this function effectively counts peer groups."], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["percent_rank"], "Feature": ["percent_rank ( args ) WITHIN GROUP ( ORDER BY sorted_args ) \u2192 double precision"], "Description": ["Computes the relative rank of the hypothetical row, that is (rank - 1) / (total rows - 1). The value thus ranges from 0 to 1 inclusive."], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["atan"], "Feature": ["atan ( double precision ) \u2192 double precision"], "Description": ["Inverse tangent, result in radians"], "Examples": ["atan(1) \u2192 0.7853981633974483"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["cume_dist"], "Feature": ["cume_dist ( args ) WITHIN GROUP ( ORDER BY sorted_args ) \u2192 double precision"], "Description": ["Computes the cumulative distribution, that is (number of rows preceding or peers with hypothetical row) / (total rows). The value thus ranges from 1/N to 1."], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-aggregate.html"], "Title": ["GROUPING"], "Feature": ["GROUPING ( group_by_expression(s) ) \u2192 integer"], "Description": ["Returns a bit mask indicating which GROUP BY expressions are not included in the current grouping set. Bits are assigned with the rightmost argument corresponding to the least-significant bit; each bit is 0 if the corresponding expression is included in the grouping criteria of the grouping set generating the current result row, and 1 if it is not included."], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-window.html"], "Title": ["row_number"], "Feature": ["row_number () \u2192 bigint"], "Description": ["Returns the number of the current row within its partition, counting from 1."], "Examples": [], "Category": ["Window Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-window.html"], "Title": ["rank"], "Feature": ["rank () \u2192 bigint"], "Description": ["Returns the rank of the current row, with gaps; that is, the row_number of the first row in its peer group."], "Examples": [], "Category": ["Window Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-window.html"], "Title": ["dense_rank"], "Feature": ["dense_rank () \u2192 bigint"], "Description": ["Returns the rank of the current row, without gaps; this function effectively counts peer groups."], "Examples": [], "Category": ["Window Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-window.html"], "Title": ["percent_rank"], "Feature": ["percent_rank () \u2192 double precision"], "Description": ["Returns the relative rank of the current row, that is (rank - 1) / (total partition rows - 1). The value thus ranges from 0 to 1 inclusive."], "Examples": [], "Category": ["Window Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-window.html"], "Title": ["cume_dist"], "Feature": ["cume_dist () \u2192 double precision"], "Description": ["Returns the cumulative distribution, that is (number of partition rows preceding or peers with current row) / (total partition rows). The value thus ranges from 1/N to 1."], "Examples": [], "Category": ["Window Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-window.html"], "Title": ["ntile"], "Feature": ["ntile ( num_buckets integer ) \u2192 integer"], "Description": ["Returns an integer ranging from 1 to the argument value, dividing the partition as equally as possible."], "Examples": [], "Category": ["Window Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-window.html"], "Title": ["lag"], "Feature": ["lag ( value anycompatible [, offset integer [, default anycompatible ]] ) \u2192 anycompatible"], "Description": ["Returns value evaluated at the row that is offset rows before the current row within the partition; if there is no such row, instead returns default (which must be of a type compatible with value). Both offset and default are evaluated with respect to the current row. If omitted, offset defaults to 1 and default to NULL."], "Examples": [], "Category": ["Window Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-window.html"], "Title": ["lead"], "Feature": ["lead ( value anycompatible [, offset integer [, default anycompatible ]] ) \u2192 anycompatible"], "Description": ["Returns value evaluated at the row that is offset rows after the current row within the partition; if there is no such row, instead returns default (which must be of a type compatible with value). Both offset and default are evaluated with respect to the current row. If omitted, offset defaults to 1 and default to NULL."], "Examples": [], "Category": ["Window Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["atand"], "Feature": ["atand ( double precision ) \u2192 double precision"], "Description": ["Inverse tangent, result in degrees"], "Examples": ["atand(1) \u2192 45"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-window.html"], "Title": ["first_value"], "Feature": ["first_value ( value anyelement ) \u2192 anyelement"], "Description": ["Returns value evaluated at the row that is the first row of the window frame."], "Examples": [], "Category": ["Window Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-window.html"], "Title": ["last_value"], "Feature": ["last_value ( value anyelement ) \u2192 anyelement"], "Description": ["Returns value evaluated at the row that is the last row of the window frame."], "Examples": [], "Category": ["Window Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-window.html"], "Title": ["nth_value"], "Feature": ["nth_value ( value anyelement, n integer ) \u2192 anyelement"], "Description": ["Returns value evaluated at the row that is the n'th row of the window frame (counting from 1); returns NULL if there is no such row."], "Examples": [], "Category": ["Window Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-merge-support.html"], "Title": ["merge_action"], "Feature": ["merge_action ( ) \u2192 text"], "Description": ["Returns the merge action command executed for the current row. This will be 'INSERT', 'UPDATE', or 'DELETE'."], "Examples": [], "Category": ["Merge Support Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-srf.html"], "Title": ["generate_series"], "Feature": ["generate_series ( start timestamp, stop timestamp, step interval ) \u2192 setof timestamp", "generate_series ( start timestamp with time zone, stop timestamp with time zone, step interval [, timezone text ] ) \u2192 setof timestamp with time zone"], "Description": ["Generates a series of values from start to stop, with a step size of step. In the timezone-aware form, times of day and daylight-savings adjustments are computed according to the time zone named by the timezone argument, or the current TimeZone setting if that is omitted."], "Examples": [], "Category": ["Set Returning Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-srf.html"], "Title": ["generate_subscripts"], "Feature": ["generate_subscripts ( array anyarray, dim integer, reverse boolean ) \u2192 setof integer"], "Description": ["Generates a series comprising the valid subscripts of the dim'th dimension of the given array. When reverse is true, returns the series in reverse order."], "Examples": [], "Category": ["Set Returning Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["current_catalog"], "Feature": ["current_catalog \u2192 name", "current_database () \u2192 name"], "Description": ["Returns the name of the current database. (Databases are called \u201ccatalogs\u201d in the SQL standard, so current_catalog is the standard's spelling.)"], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["current_query"], "Feature": ["current_query () \u2192 text"], "Description": ["Returns the text of the currently executing query, as submitted by the client (which might contain more than one statement)."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["current_role"], "Feature": ["current_role \u2192 name"], "Description": ["This is equivalent to current_user."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["current_schema"], "Feature": ["current_schema \u2192 name", "current_schema () \u2192 name"], "Description": ["Returns the name of the schema that is first in the search path (or a null value if the search path is empty). This is the schema that will be used for any tables or other named objects that are created without specifying a target schema."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["atan2"], "Feature": ["atan2 ( y double precision, x double precision ) \u2192 double precision"], "Description": ["Inverse tangent of y/x, result in radians"], "Examples": ["atan2(1, 0) \u2192 1.5707963267948966"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["cbrt"], "Feature": ["cbrt ( double precision ) \u2192 double precision"], "Description": ["Cube root"], "Examples": ["cbrt(64.0) \u2192 4"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["current_schemas"], "Feature": ["current_schemas ( include_implicit boolean ) \u2192 name[]"], "Description": ["Returns an array of the names of all schemas presently in the effective search path, in their priority order. (Items in the current search_path setting that do not correspond to existing, searchable schemas are omitted.) If the Boolean argument is true, then implicitly-searched system schemas such as pg_catalog are included in the result."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["current_user"], "Feature": ["current_user \u2192 name"], "Description": ["Returns the user name of the current execution context."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["inet_client_addr"], "Feature": ["inet_client_addr () \u2192 inet"], "Description": ["Returns the IP address of the current client, or NULL if the current connection is via a Unix-domain socket."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["inet_client_port"], "Feature": ["inet_client_port () \u2192 integer"], "Description": ["Returns the IP port number of the current client, or NULL if the current connection is via a Unix-domain socket."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["inet_server_addr"], "Feature": ["inet_server_addr () \u2192 inet"], "Description": ["Returns the IP address on which the server accepted the current connection, or NULL if the current connection is via a Unix-domain socket."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["inet_server_port"], "Feature": ["inet_server_port () \u2192 integer"], "Description": ["Returns the IP port number on which the server accepted the current connection, or NULL if the current connection is via a Unix-domain socket."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_backend_pid"], "Feature": ["pg_backend_pid () \u2192 integer"], "Description": ["Returns the process ID of the server process attached to the current session."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_blocking_pids"], "Feature": ["pg_blocking_pids ( integer ) \u2192 integer[]"], "Description": ["Returns an array of the process ID(s) of the sessions that are blocking the server process with the specified process ID from acquiring a lock, or an empty array if there is no such server process or it is not blocked.", "One server process blocks another if it either holds a lock that conflicts with the blocked process's lock request (hard block), or is waiting for a lock that would conflict with the blocked process's lock request and is ahead of it in the wait queue (soft block). When using parallel queries the result always lists client-visible process IDs (that is, pg_backend_pid results) even if the actual lock is held or awaited by a child worker process. As a result of that, there may be duplicated PIDs in the result. Also note that when a prepared transaction holds a conflicting lock, it will be represented by a zero process ID.", "Frequent calls to this function could have some impact on database performance, because it needs exclusive access to the lock manager's shared state for a short time."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_conf_load_time"], "Feature": ["pg_conf_load_time () \u2192 timestamp with time zone"], "Description": ["Returns the time when the server configuration files were last loaded. If the current session was alive at the time, this will be the time when the session itself re-read the configuration files (so the reading will vary a little in different sessions). Otherwise it is the time when the postmaster process re-read the configuration files."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_current_logfile"], "Feature": ["pg_current_logfile ( [ text ] ) \u2192 text"], "Description": ["Returns the path name of the log file currently in use by the logging collector. The path includes the log_directory directory and the individual log file name. The result is NULL if the logging collector is disabled. When multiple log files exist, each in a different format, pg_current_logfile without an argument returns the path of the file having the first format found in the ordered list: stderr, csvlog, jsonlog. NULL is returned if no log file has any of these formats. To request information about a specific log file format, supply either csvlog, jsonlog or stderr as the value of the optional parameter. The result is NULL if the log format requested is not configured in log_destination. The result reflects the contents of the current_logfiles file.", "This function is restricted to superusers and roles with privileges of the pg_monitor role by default, but other users can be granted EXECUTE to run the function."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["atan2d"], "Feature": ["atan2d ( y double precision, x double precision ) \u2192 double precision"], "Description": ["Inverse tangent of y/x, result in degrees"], "Examples": ["atan2d(1, 0) \u2192 90"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_my_temp_schema"], "Feature": ["pg_my_temp_schema () \u2192 oid"], "Description": ["Returns the OID of the current session's temporary schema, or zero if it has none (because it has not created any temporary tables)."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_is_other_temp_schema"], "Feature": ["pg_is_other_temp_schema ( oid ) \u2192 boolean"], "Description": ["Returns true if the given OID is the OID of another session's temporary schema. (This can be useful, for example, to exclude other sessions' temporary tables from a catalog display.)"], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_jit_available"], "Feature": ["pg_jit_available () \u2192 boolean"], "Description": ["Returns true if a JIT compiler extension is available (see Chapter\u00a030) and the jit configuration parameter is set to on."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_listening_channels"], "Feature": ["pg_listening_channels () \u2192 setof text"], "Description": ["Returns the set of names of asynchronous notification channels that the current session is listening to."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_notification_queue_usage"], "Feature": ["pg_notification_queue_usage () \u2192 double precision"], "Description": ["Returns the fraction (0\u20131) of the asynchronous notification queue's maximum size that is currently occupied by notifications that are waiting to be processed. See LISTEN and NOTIFY for more information."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_postmaster_start_time"], "Feature": ["pg_postmaster_start_time () \u2192 timestamp with time zone"], "Description": ["Returns the time when the server started."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_safe_snapshot_blocking_pids"], "Feature": ["pg_safe_snapshot_blocking_pids ( integer ) \u2192 integer[]"], "Description": ["Returns an array of the process ID(s) of the sessions that are blocking the server process with the specified process ID from acquiring a safe snapshot, or an empty array if there is no such server process or it is not blocked.", "A session running a SERIALIZABLE transaction blocks a SERIALIZABLE READ ONLY DEFERRABLE transaction from acquiring a snapshot until the latter determines that it is safe to avoid taking any predicate locks. See Section\u00a013.2.3 for more information about serializable and deferrable transactions.", "Frequent calls to this function could have some impact on database performance, because it needs access to the predicate lock manager's shared state for a short time."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_trigger_depth"], "Feature": ["pg_trigger_depth () \u2192 integer"], "Description": ["Returns the current nesting level of PostgreSQL triggers (0 if not called, directly or indirectly, from inside a trigger)."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["session_user"], "Feature": ["session_user \u2192 name"], "Description": ["Returns the session user's name."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["system_user"], "Feature": ["system_user \u2192 text"], "Description": ["Returns the authentication method and the identity (if any) that the user presented during the authentication cycle before they were assigned a database role. It is represented as auth_method:identity or NULL if the user has not been authenticated (for example if Trust authentication has been used)."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["cos"], "Feature": ["cos ( double precision ) \u2192 double precision"], "Description": ["Cosine, argument in radians"], "Examples": ["cos(0) \u2192 1"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["user"], "Feature": ["user \u2192 name"], "Description": ["This is equivalent to current_user."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["has_any_column_privilege"], "Feature": ["has_any_column_privilege ( [ user name or oid, ] table text or oid, privilege text ) \u2192 boolean"], "Description": ["Does user have privilege for any column of table? This succeeds either if the privilege is held for the whole table, or if there is a column-level grant of the privilege for at least one column. Allowable privilege types are SELECT, INSERT, UPDATE, and REFERENCES."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["has_column_privilege"], "Feature": ["has_column_privilege ( [ user name or oid, ] table text or oid, column text or smallint, privilege text ) \u2192 boolean"], "Description": ["Does user have privilege for the specified table column? This succeeds either if the privilege is held for the whole table, or if there is a column-level grant of the privilege for the column. The column can be specified by name or by attribute number (pg_attribute.attnum). Allowable privilege types are SELECT, INSERT, UPDATE, and REFERENCES."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["has_database_privilege"], "Feature": ["has_database_privilege ( [ user name or oid, ] database text or oid, privilege text ) \u2192 boolean"], "Description": ["Does user have privilege for database? Allowable privilege types are CREATE, CONNECT, TEMPORARY, and TEMP (which is equivalent to TEMPORARY)."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["has_foreign_data_wrapper_privilege"], "Feature": ["has_foreign_data_wrapper_privilege ( [ user name or oid, ] fdw text or oid, privilege text ) \u2192 boolean"], "Description": ["Does user have privilege for foreign-data wrapper? The only allowable privilege type is USAGE."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["has_function_privilege"], "Feature": ["has_function_privilege ( [ user name or oid, ] function text or oid, privilege text ) \u2192 boolean"], "Description": ["Does user have privilege for function? The only allowable privilege type is EXECUTE.", "When specifying a function by name rather than by OID, the allowed input is the same as for the regprocedure data type (see Section\u00a08.19). An example is:"], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["has_language_privilege"], "Feature": ["has_language_privilege ( [ user name or oid, ] language text or oid, privilege text ) \u2192 boolean"], "Description": ["Does user have privilege for language? The only allowable privilege type is USAGE."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["has_parameter_privilege"], "Feature": ["has_parameter_privilege ( [ user name or oid, ] parameter text, privilege text ) \u2192 boolean"], "Description": ["Does user have privilege for configuration parameter? The parameter name is case-insensitive. Allowable privilege types are SET and ALTER SYSTEM."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["has_schema_privilege"], "Feature": ["has_schema_privilege ( [ user name or oid, ] schema text or oid, privilege text ) \u2192 boolean"], "Description": ["Does user have privilege for schema? Allowable privilege types are CREATE and USAGE."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["has_sequence_privilege"], "Feature": ["has_sequence_privilege ( [ user name or oid, ] sequence text or oid, privilege text ) \u2192 boolean"], "Description": ["Does user have privilege for sequence? Allowable privilege types are USAGE, SELECT, and UPDATE."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["cosd"], "Feature": ["cosd ( double precision ) \u2192 double precision"], "Description": ["Cosine, argument in degrees"], "Examples": ["cosd(60) \u2192 0.5"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["has_server_privilege"], "Feature": ["has_server_privilege ( [ user name or oid, ] server text or oid, privilege text ) \u2192 boolean"], "Description": ["Does user have privilege for foreign server? The only allowable privilege type is USAGE."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["has_table_privilege"], "Feature": ["has_table_privilege ( [ user name or oid, ] table text or oid, privilege text ) \u2192 boolean"], "Description": ["Does user have privilege for table? Allowable privilege types are SELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER, and MAINTAIN."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["has_tablespace_privilege"], "Feature": ["has_tablespace_privilege ( [ user name or oid, ] tablespace text or oid, privilege text ) \u2192 boolean"], "Description": ["Does user have privilege for tablespace? The only allowable privilege type is CREATE."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["has_type_privilege"], "Feature": ["has_type_privilege ( [ user name or oid, ] type text or oid, privilege text ) \u2192 boolean"], "Description": ["Does user have privilege for data type? The only allowable privilege type is USAGE. When specifying a type by name rather than by OID, the allowed input is the same as for the regtype data type (see Section\u00a08.19)."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_has_role"], "Feature": ["pg_has_role ( [ user name or oid, ] role text or oid, privilege text ) \u2192 boolean"], "Description": ["Does user have privilege for role? Allowable privilege types are MEMBER, USAGE, and SET. MEMBER denotes direct or indirect membership in the role without regard to what specific privileges may be conferred. USAGE denotes whether the privileges of the role are immediately available without doing SET ROLE, while SET denotes whether it is possible to change to the role using the SET ROLE command. WITH ADMIN OPTION or WITH GRANT OPTION can be added to any of these privilege types to test whether the ADMIN privilege is held (all six spellings test the same thing). This function does not allow the special case of setting user to public, because the PUBLIC pseudo-role can never be a member of real roles."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["row_security_active"], "Feature": ["row_security_active ( table text or oid ) \u2192 boolean"], "Description": ["Is row-level security active for the specified table in the context of the current user and current environment?"], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["acldefault"], "Feature": ["acldefault ( type \"char\", ownerId oid ) \u2192 aclitem[]"], "Description": ["Constructs an aclitem array holding the default access privileges for an object of type type belonging to the role with OID ownerId. This represents the access privileges that will be assumed when an object's ACL entry is null. (The default access privileges are described in Section\u00a05.8.) The type parameter must be one of 'c' for COLUMN, 'r' for TABLE and table-like objects, 's' for SEQUENCE, 'd' for DATABASE, 'f' for FUNCTION or PROCEDURE, 'l' for LANGUAGE, 'L' for LARGE OBJECT, 'n' for SCHEMA, 'p' for PARAMETER, 't' for TABLESPACE, 'F' for FOREIGN DATA WRAPPER, 'S' for FOREIGN SERVER, or 'T' for TYPE or DOMAIN."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["aclexplode"], "Feature": ["aclexplode ( aclitem[] ) \u2192 setof record ( grantor oid, grantee oid, privilege_type text, is_grantable boolean )"], "Description": ["Returns the aclitem array as a set of rows. If the grantee is the pseudo-role PUBLIC, it is represented by zero in the grantee column. Each granted privilege is represented as SELECT, INSERT, etc (see Table\u00a05.1 for a full list). Note that each privilege is broken out as a separate row, so only one keyword appears in the privilege_type column."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["makeaclitem"], "Feature": ["makeaclitem ( grantee oid, grantor oid, privileges text, is_grantable boolean ) \u2192 aclitem"], "Description": ["Constructs an aclitem with the given properties. privileges is a comma-separated list of privilege names such as SELECT, INSERT, etc, all of which are set in the result. (Case of the privilege string is not significant, and extra whitespace is allowed between but not within privilege names.)"], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_collation_is_visible"], "Feature": ["pg_collation_is_visible ( collation oid ) \u2192 boolean"], "Description": ["Is collation visible in search path?"], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["cot"], "Feature": ["cot ( double precision ) \u2192 double precision"], "Description": ["Cotangent, argument in radians"], "Examples": ["cot(0.5) \u2192 1.830487721712452"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_conversion_is_visible"], "Feature": ["pg_conversion_is_visible ( conversion oid ) \u2192 boolean"], "Description": ["Is conversion visible in search path?"], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_function_is_visible"], "Feature": ["pg_function_is_visible ( function oid ) \u2192 boolean"], "Description": ["Is function visible in search path? (This also works for procedures and aggregates.)"], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_opclass_is_visible"], "Feature": ["pg_opclass_is_visible ( opclass oid ) \u2192 boolean"], "Description": ["Is operator class visible in search path?"], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_operator_is_visible"], "Feature": ["pg_operator_is_visible ( operator oid ) \u2192 boolean"], "Description": ["Is operator visible in search path?"], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_opfamily_is_visible"], "Feature": ["pg_opfamily_is_visible ( opclass oid ) \u2192 boolean"], "Description": ["Is operator family visible in search path?"], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_statistics_obj_is_visible"], "Feature": ["pg_statistics_obj_is_visible ( stat oid ) \u2192 boolean"], "Description": ["Is statistics object visible in search path?"], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_table_is_visible"], "Feature": ["pg_table_is_visible ( table oid ) \u2192 boolean"], "Description": ["Is table visible in search path? (This works for all types of relations, including views, materialized views, indexes, sequences and foreign tables.)"], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_ts_config_is_visible"], "Feature": ["pg_ts_config_is_visible ( config oid ) \u2192 boolean"], "Description": ["Is text search configuration visible in search path?"], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_ts_dict_is_visible"], "Feature": ["pg_ts_dict_is_visible ( dict oid ) \u2192 boolean"], "Description": ["Is text search dictionary visible in search path?"], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_ts_parser_is_visible"], "Feature": ["pg_ts_parser_is_visible ( parser oid ) \u2192 boolean"], "Description": ["Is text search parser visible in search path?"], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["cotd"], "Feature": ["cotd ( double precision ) \u2192 double precision"], "Description": ["Cotangent, argument in degrees"], "Examples": ["cotd(45) \u2192 1"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_ts_template_is_visible"], "Feature": ["pg_ts_template_is_visible ( template oid ) \u2192 boolean"], "Description": ["Is text search template visible in search path?"], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_type_is_visible"], "Feature": ["pg_type_is_visible ( type oid ) \u2192 boolean"], "Description": ["Is type (or domain) visible in search path?"], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["format_type"], "Feature": ["format_type ( type oid, typemod integer ) \u2192 text"], "Description": ["Returns the SQL name for a data type that is identified by its type OID and possibly a type modifier. Pass NULL for the type modifier if no specific modifier is known."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_basetype"], "Feature": ["pg_basetype ( regtype ) \u2192 regtype"], "Description": ["Returns the OID of the base type of a domain identified by its type OID. If the argument is the OID of a non-domain type, returns the argument as-is. Returns NULL if the argument is not a valid type OID. If there's a chain of domain dependencies, it will recurse until finding the base type.", "Assuming CREATE DOMAIN mytext AS text:"], "Examples": ["pg_basetype('mytext'::regtype) \u2192 text"], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_char_to_encoding"], "Feature": ["pg_char_to_encoding ( encoding name ) \u2192 integer"], "Description": ["Converts the supplied encoding name into an integer representing the internal identifier used in some system catalog tables. Returns -1 if an unknown encoding name is provided."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_encoding_to_char"], "Feature": ["pg_encoding_to_char ( encoding integer ) \u2192 name"], "Description": ["Converts the integer used as the internal identifier of an encoding in some system catalog tables into a human-readable string. Returns an empty string if an invalid encoding number is provided."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_get_catalog_foreign_keys"], "Feature": ["pg_get_catalog_foreign_keys () \u2192 setof record ( fktable regclass, fkcols text[], pktable regclass, pkcols text[], is_array boolean, is_opt boolean )"], "Description": ["Returns a set of records describing the foreign key relationships that exist within the PostgreSQL system catalogs. The fktable column contains the name of the referencing catalog, and the fkcols column contains the name(s) of the referencing column(s). Similarly, the pktable column contains the name of the referenced catalog, and the pkcols column contains the name(s) of the referenced column(s). If is_array is true, the last referencing column is an array, each of whose elements should match some entry in the referenced catalog. If is_opt is true, the referencing column(s) are allowed to contain zeroes instead of a valid reference."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_get_constraintdef"], "Feature": ["pg_get_constraintdef ( constraint oid [, pretty boolean ] ) \u2192 text"], "Description": ["Reconstructs the creating command for a constraint. (This is a decompiled reconstruction, not the original text of the command.)"], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_get_expr"], "Feature": ["pg_get_expr ( expr pg_node_tree, relation oid [, pretty boolean ] ) \u2192 text"], "Description": ["Decompiles the internal form of an expression stored in the system catalogs, such as the default value for a column. If the expression might contain Vars, specify the OID of the relation they refer to as the second parameter; if no Vars are expected, passing zero is sufficient."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_get_functiondef"], "Feature": ["pg_get_functiondef ( func oid ) \u2192 text"], "Description": ["Reconstructs the creating command for a function or procedure. (This is a decompiled reconstruction, not the original text of the command.) The result is a complete CREATE OR REPLACE FUNCTION or CREATE OR REPLACE PROCEDURE statement."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["sin"], "Feature": ["sin ( double precision ) \u2192 double precision"], "Description": ["Sine, argument in radians"], "Examples": ["sin(1) \u2192 0.8414709848078965"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_get_function_arguments"], "Feature": ["pg_get_function_arguments ( func oid ) \u2192 text"], "Description": ["Reconstructs the argument list of a function or procedure, in the form it would need to appear in within CREATE FUNCTION (including default values)."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_get_function_identity_arguments"], "Feature": ["pg_get_function_identity_arguments ( func oid ) \u2192 text"], "Description": ["Reconstructs the argument list necessary to identify a function or procedure, in the form it would need to appear in within commands such as ALTER FUNCTION. This form omits default values."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_get_function_result"], "Feature": ["pg_get_function_result ( func oid ) \u2192 text"], "Description": ["Reconstructs the RETURNS clause of a function, in the form it would need to appear in within CREATE FUNCTION. Returns NULL for a procedure."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_get_indexdef"], "Feature": ["pg_get_indexdef ( index oid [, column integer, pretty boolean ] ) \u2192 text"], "Description": ["Reconstructs the creating command for an index. (This is a decompiled reconstruction, not the original text of the command.) If column is supplied and is not zero, only the definition of that column is reconstructed."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_get_keywords"], "Feature": ["pg_get_keywords () \u2192 setof record ( word text, catcode \"char\", barelabel boolean, catdesc text, baredesc text )"], "Description": ["Returns a set of records describing the SQL keywords recognized by the server. The word column contains the keyword. The catcode column contains a category code: U for an unreserved keyword, C for a keyword that can be a column name, T for a keyword that can be a type or function name, or R for a fully reserved keyword. The barelabel column contains true if the keyword can be used as a \u201cbare\u201d column label in SELECT lists, or false if it can only be used after AS. The catdesc column contains a possibly-localized string describing the keyword's category. The baredesc column contains a possibly-localized string describing the keyword's column label status."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_get_partkeydef"], "Feature": ["pg_get_partkeydef ( table oid ) \u2192 text"], "Description": ["Reconstructs the definition of a partitioned table's partition key, in the form it would have in the PARTITION BY clause of CREATE TABLE. (This is a decompiled reconstruction, not the original text of the command.)"], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_get_ruledef"], "Feature": ["pg_get_ruledef ( rule oid [, pretty boolean ] ) \u2192 text"], "Description": ["Reconstructs the creating command for a rule. (This is a decompiled reconstruction, not the original text of the command.)"], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_get_serial_sequence"], "Feature": ["pg_get_serial_sequence ( table text, column text ) \u2192 text"], "Description": ["Returns the name of the sequence associated with a column, or NULL if no sequence is associated with the column. If the column is an identity column, the associated sequence is the sequence internally created for that column. For columns created using one of the serial types (serial, smallserial, bigserial), it is the sequence created for that serial column definition. In the latter case, the association can be modified or removed with ALTER SEQUENCE OWNED BY. (This function probably should have been called pg_get_owned_sequence; its current name reflects the fact that it has historically been used with serial-type columns.) The first parameter is a table name with optional schema, and the second parameter is a column name. Because the first parameter potentially contains both schema and table names, it is parsed per usual SQL rules, meaning it is lower-cased by default. The second parameter, being just a column name, is treated literally and so has its case preserved. The result is suitably formatted for passing to the sequence functions (see Section\u00a09.17).", "A typical use is in reading the current value of the sequence for an identity or serial column, for example:"], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_get_statisticsobjdef"], "Feature": ["pg_get_statisticsobjdef ( statobj oid ) \u2192 text"], "Description": ["Reconstructs the creating command for an extended statistics object. (This is a decompiled reconstruction, not the original text of the command.)"], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_get_triggerdef"], "Feature": ["pg_get_triggerdef ( trigger oid [, pretty boolean ] ) \u2192 text"], "Description": ["Reconstructs the creating command for a trigger. (This is a decompiled reconstruction, not the original text of the command.)"], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["sind"], "Feature": ["sind ( double precision ) \u2192 double precision"], "Description": ["Sine, argument in degrees"], "Examples": ["sind(30) \u2192 0.5"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_get_userbyid"], "Feature": ["pg_get_userbyid ( role oid ) \u2192 name"], "Description": ["Returns a role's name given its OID."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_get_viewdef"], "Feature": ["pg_get_viewdef ( view text [, pretty boolean ] ) \u2192 text"], "Description": ["Reconstructs the underlying SELECT command for a view or materialized view, working from a textual name for the view rather than its OID. (This is deprecated; use the OID variant instead.)"], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_index_column_has_property"], "Feature": ["pg_index_column_has_property ( index regclass, column integer, property text ) \u2192 boolean"], "Description": ["Tests whether an index column has the named property. Common index column properties are listed in Table\u00a09.75. (Note that extension access methods can define additional property names for their indexes.) NULL is returned if the property name is not known or does not apply to the particular object, or if the OID or column number does not identify a valid object."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_index_has_property"], "Feature": ["pg_index_has_property ( index regclass, property text ) \u2192 boolean"], "Description": ["Tests whether an index has the named property. Common index properties are listed in Table\u00a09.76. (Note that extension access methods can define additional property names for their indexes.) NULL is returned if the property name is not known or does not apply to the particular object, or if the OID does not identify a valid object."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_indexam_has_property"], "Feature": ["pg_indexam_has_property ( am oid, property text ) \u2192 boolean"], "Description": ["Tests whether an index access method has the named property. Access method properties are listed in Table\u00a09.77. NULL is returned if the property name is not known or does not apply to the particular object, or if the OID does not identify a valid object."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_options_to_table"], "Feature": ["pg_options_to_table ( options_array text[] ) \u2192 setof record ( option_name text, option_value text )"], "Description": ["Returns the set of storage options represented by a value from pg_class.reloptions or pg_attribute.attoptions."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_settings_get_flags"], "Feature": ["pg_settings_get_flags ( guc text ) \u2192 text[]"], "Description": ["Returns an array of the flags associated with the given GUC, or NULL if it does not exist. The result is an empty array if the GUC exists but there are no flags to show. Only the most useful flags listed in Table\u00a09.78 are exposed."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_tablespace_databases"], "Feature": ["pg_tablespace_databases ( tablespace oid ) \u2192 setof oid"], "Description": ["Returns the set of OIDs of databases that have objects stored in the specified tablespace. If this function returns any rows, the tablespace is not empty and cannot be dropped. To identify the specific objects populating the tablespace, you will need to connect to the database(s) identified by pg_tablespace_databases and query their pg_class catalogs."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_tablespace_location"], "Feature": ["pg_tablespace_location ( tablespace oid ) \u2192 text"], "Description": ["Returns the file system path that this tablespace is located in."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_typeof"], "Feature": ["pg_typeof ( \"any\" ) \u2192 regtype"], "Description": ["Returns the OID of the data type of the value that is passed to it. This can be helpful for troubleshooting or dynamically constructing SQL queries. The function is declared as returning regtype, which is an OID alias type (see Section\u00a08.19); this means that it is the same as an OID for comparison purposes but displays as a type name."], "Examples": ["pg_typeof(33) \u2192 integer"], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["tan"], "Feature": ["tan ( double precision ) \u2192 double precision"], "Description": ["Tangent, argument in radians"], "Examples": ["tan(1) \u2192 1.5574077246549023"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["COLLATION FOR"], "Feature": ["COLLATION FOR ( \"any\" ) \u2192 text"], "Description": ["Returns the name of the collation of the value that is passed to it. The value is quoted and schema-qualified if necessary. If no collation was derived for the argument expression, then NULL is returned. If the argument is not of a collatable data type, then an error is raised."], "Examples": ["collation for ('foo'::text) \u2192 \"default\"", "collation for ('foo' COLLATE \"de_DE\") \u2192 \"de_DE\""], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["to_regclass"], "Feature": ["to_regclass ( text ) \u2192 regclass"], "Description": ["Translates a textual relation name to its OID. A similar result is obtained by casting the string to type regclass (see Section\u00a08.19); however, this function will return NULL rather than throwing an error if the name is not found."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["to_regcollation"], "Feature": ["to_regcollation ( text ) \u2192 regcollation"], "Description": ["Translates a textual collation name to its OID. A similar result is obtained by casting the string to type regcollation (see Section\u00a08.19); however, this function will return NULL rather than throwing an error if the name is not found."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["to_regnamespace"], "Feature": ["to_regnamespace ( text ) \u2192 regnamespace"], "Description": ["Translates a textual schema name to its OID. A similar result is obtained by casting the string to type regnamespace (see Section\u00a08.19); however, this function will return NULL rather than throwing an error if the name is not found."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["to_regoper"], "Feature": ["to_regoper ( text ) \u2192 regoper"], "Description": ["Translates a textual operator name to its OID. A similar result is obtained by casting the string to type regoper (see Section\u00a08.19); however, this function will return NULL rather than throwing an error if the name is not found or is ambiguous."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["to_regoperator"], "Feature": ["to_regoperator ( text ) \u2192 regoperator"], "Description": ["Translates a textual operator name (with parameter types) to its OID. A similar result is obtained by casting the string to type regoperator (see Section\u00a08.19); however, this function will return NULL rather than throwing an error if the name is not found."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["to_regproc"], "Feature": ["to_regproc ( text ) \u2192 regproc"], "Description": ["Translates a textual function or procedure name to its OID. A similar result is obtained by casting the string to type regproc (see Section\u00a08.19); however, this function will return NULL rather than throwing an error if the name is not found or is ambiguous."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["to_regprocedure"], "Feature": ["to_regprocedure ( text ) \u2192 regprocedure"], "Description": ["Translates a textual function or procedure name (with argument types) to its OID. A similar result is obtained by casting the string to type regprocedure (see Section\u00a08.19); however, this function will return NULL rather than throwing an error if the name is not found."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["to_regrole"], "Feature": ["to_regrole ( text ) \u2192 regrole"], "Description": ["Translates a textual role name to its OID. A similar result is obtained by casting the string to type regrole (see Section\u00a08.19); however, this function will return NULL rather than throwing an error if the name is not found."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["to_regtype"], "Feature": ["to_regtype ( text ) \u2192 regtype"], "Description": ["Parses a string of text, extracts a potential type name from it, and translates that name into a type OID. A syntax error in the string will result in an error; but if the string is a syntactically valid type name that happens not to be found in the catalogs, the result is NULL. A similar result is obtained by casting the string to type regtype (see Section\u00a08.19), except that that will throw error for name not found."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["tand"], "Feature": ["tand ( double precision ) \u2192 double precision"], "Description": ["Tangent, argument in degrees"], "Examples": ["tand(45) \u2192 1"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["to_regtypemod"], "Feature": ["to_regtypemod ( text ) \u2192 integer"], "Description": ["Parses a string of text, extracts a potential type name from it, and translates its type modifier, if any. A syntax error in the string will result in an error; but if the string is a syntactically valid type name that happens not to be found in the catalogs, the result is NULL. The result is -1 if no type modifier is present.", "to_regtypemod can be combined with to_regtype to produce appropriate inputs for format_type, allowing a string representing a type name to be canonicalized."], "Examples": ["format_type(to_regtype('varchar(32)'), to_regtypemod('varchar(32)')) \u2192 character varying(32)"], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_describe_object"], "Feature": ["pg_describe_object ( classid oid, objid oid, objsubid integer ) \u2192 text"], "Description": ["Returns a textual description of a database object identified by catalog OID, object OID, and sub-object ID (such as a column number within a table; the sub-object ID is zero when referring to a whole object). This description is intended to be human-readable, and might be translated, depending on server configuration. This is especially useful to determine the identity of an object referenced in the pg_depend catalog. This function returns NULL values for undefined objects."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_identify_object"], "Feature": ["pg_identify_object ( classid oid, objid oid, objsubid integer ) \u2192 record ( type text, schema text, name text, identity text )"], "Description": ["Returns a row containing enough information to uniquely identify the database object specified by catalog OID, object OID and sub-object ID. This information is intended to be machine-readable, and is never translated. type identifies the type of database object; schema is the schema name that the object belongs in, or NULL for object types that do not belong to schemas; name is the name of the object, quoted if necessary, if the name (along with schema name, if pertinent) is sufficient to uniquely identify the object, otherwise NULL; identity is the complete object identity, with the precise format depending on object type, and each name within the format being schema-qualified and quoted as necessary. Undefined objects are identified with NULL values."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_identify_object_as_address"], "Feature": ["pg_identify_object_as_address ( classid oid, objid oid, objsubid integer ) \u2192 record ( type text, object_names text[], object_args text[] )"], "Description": ["Returns a row containing enough information to uniquely identify the database object specified by catalog OID, object OID and sub-object ID. The returned information is independent of the current server, that is, it could be used to identify an identically named object in another server. type identifies the type of database object; object_names and object_args are text arrays that together form a reference to the object. These three values can be passed to pg_get_object_address to obtain the internal address of the object."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_get_object_address"], "Feature": ["pg_get_object_address ( type text, object_names text[], object_args text[] ) \u2192 record ( classid oid, objid oid, objsubid integer )"], "Description": ["Returns a row containing enough information to uniquely identify the database object specified by a type code and object name and argument arrays. The returned values are the ones that would be used in system catalogs such as pg_depend; they can be passed to other system functions such as pg_describe_object or pg_identify_object. classid is the OID of the system catalog containing the object; objid is the OID of the object itself, and objsubid is the sub-object ID, or zero if none. This function is the inverse of pg_identify_object_as_address. Undefined objects are identified with NULL values."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["col_description"], "Feature": ["col_description ( table oid, column integer ) \u2192 text"], "Description": ["Returns the comment for a table column, which is specified by the OID of its table and its column number. (obj_description cannot be used for table columns, since columns do not have OIDs of their own.)"], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["obj_description"], "Feature": ["obj_description ( object oid ) \u2192 text"], "Description": ["Returns the comment for a database object specified by its OID alone. This is deprecated since there is no guarantee that OIDs are unique across different system catalogs; therefore, the wrong comment might be returned."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["shobj_description"], "Feature": ["shobj_description ( object oid, catalog name ) \u2192 text"], "Description": ["Returns the comment for a shared database object specified by its OID and the name of the containing system catalog. This is just like obj_description except that it is used for retrieving comments on shared objects (that is, databases, roles, and tablespaces). Some system catalogs are global to all databases within each cluster, and the descriptions for objects in them are stored globally as well."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_input_is_valid"], "Feature": ["pg_input_is_valid ( string text, type text ) \u2192 boolean"], "Description": ["Tests whether the given string is valid input for the specified data type, returning true or false.", "This function will only work as desired if the data type's input function has been updated to report invalid input as a \u201csoft\u201d error. Otherwise, invalid input will abort the transaction, just as if the string had been cast to the type directly."], "Examples": ["pg_input_is_valid('42', 'integer') \u2192 t", "pg_input_is_valid('42000000000', 'integer') \u2192 f", "pg_input_is_valid('1234.567', 'numeric(7,4)') \u2192 f"], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_input_error_info"], "Feature": ["pg_input_error_info ( string text, type text ) \u2192 record ( message text, detail text, hint text, sql_error_code text )"], "Description": ["Tests whether the given string is valid input for the specified data type; if not, return the details of the error that would have been thrown. If the input is valid, the results are NULL. The inputs are the same as for pg_input_is_valid.", "This function will only work as desired if the data type's input function has been updated to report invalid input as a \u201csoft\u201d error. Otherwise, invalid input will abort the transaction, just as if the string had been cast to the type directly."], "Examples": ["SELECT * FROM pg_input_error_info('42000000000', 'integer') \u2192"], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["sinh"], "Feature": ["sinh ( double precision ) \u2192 double precision"], "Description": ["Hyperbolic sine"], "Examples": ["sinh(1) \u2192 1.1752011936438014"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["ceil"], "Feature": ["ceil ( numeric ) \u2192 numeric", "ceil ( double precision ) \u2192 double precision"], "Description": ["Nearest integer greater than or equal to argument"], "Examples": ["ceil(42.2) \u2192 43", "ceil(-42.8) \u2192 -42"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_current_xact_id"], "Feature": ["pg_current_xact_id () \u2192 xid8"], "Description": ["Returns the current transaction's ID. It will assign a new one if the current transaction does not have one already (because it has not performed any database updates); see Section\u00a066.1 for details. If executed in a subtransaction, this will return the top-level transaction ID; see Section\u00a066.3 for details."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_current_xact_id_if_assigned"], "Feature": ["pg_current_xact_id_if_assigned () \u2192 xid8"], "Description": ["Returns the current transaction's ID, or NULL if no ID is assigned yet. (It's best to use this variant if the transaction might otherwise be read-only, to avoid unnecessary consumption of an XID.) If executed in a subtransaction, this will return the top-level transaction ID."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_xact_status"], "Feature": ["pg_xact_status ( xid8 ) \u2192 text"], "Description": ["Reports the commit status of a recent transaction. The result is one of in progress, committed, or aborted, provided that the transaction is recent enough that the system retains the commit status of that transaction. If it is old enough that no references to the transaction survive in the system and the commit status information has been discarded, the result is NULL. Applications might use this function, for example, to determine whether their transaction committed or aborted after the application and database server become disconnected while a COMMIT is in progress. Note that prepared transactions are reported as in progress; applications must check pg_prepared_xacts if they need to determine whether a transaction ID belongs to a prepared transaction."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_current_snapshot"], "Feature": ["pg_current_snapshot () \u2192 pg_snapshot"], "Description": ["Returns a current snapshot, a data structure showing which transaction IDs are now in-progress. Only top-level transaction IDs are included in the snapshot; subtransaction IDs are not shown; see Section\u00a066.3 for details."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_snapshot_xip"], "Feature": ["pg_snapshot_xip ( pg_snapshot ) \u2192 setof xid8"], "Description": ["Returns the set of in-progress transaction IDs contained in a snapshot."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_snapshot_xmax"], "Feature": ["pg_snapshot_xmax ( pg_snapshot ) \u2192 xid8"], "Description": ["Returns the xmax of a snapshot."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_snapshot_xmin"], "Feature": ["pg_snapshot_xmin ( pg_snapshot ) \u2192 xid8"], "Description": ["Returns the xmin of a snapshot."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_visible_in_snapshot"], "Feature": ["pg_visible_in_snapshot ( xid8, pg_snapshot ) \u2192 boolean"], "Description": ["Is the given transaction ID visible according to this snapshot (that is, was it completed before the snapshot was taken)? Note that this function will not give the correct answer for a subtransaction ID (subxid); see Section\u00a066.3 for details."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["age"], "Feature": ["age ( xid ) \u2192 integer"], "Description": ["Returns the number of transactions between the supplied transaction id and the current transaction counter."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["mxid_age"], "Feature": ["mxid_age ( xid ) \u2192 integer"], "Description": ["Returns the number of multixacts IDs between the supplied multixact ID and the current multixacts counter."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["cosh"], "Feature": ["cosh ( double precision ) \u2192 double precision"], "Description": ["Hyperbolic cosine"], "Examples": ["cosh(0) \u2192 1"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["txid_current"], "Feature": ["txid_current () \u2192 bigint"], "Description": ["See pg_current_xact_id()."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["txid_current_if_assigned"], "Feature": ["txid_current_if_assigned () \u2192 bigint"], "Description": ["See pg_current_xact_id_if_assigned()."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["txid_current_snapshot"], "Feature": ["txid_current_snapshot () \u2192 txid_snapshot"], "Description": ["See pg_current_snapshot()."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["txid_snapshot_xip"], "Feature": ["txid_snapshot_xip ( txid_snapshot ) \u2192 setof bigint"], "Description": ["See pg_snapshot_xip()."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["txid_snapshot_xmax"], "Feature": ["txid_snapshot_xmax ( txid_snapshot ) \u2192 bigint"], "Description": ["See pg_snapshot_xmax()."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["txid_snapshot_xmin"], "Feature": ["txid_snapshot_xmin ( txid_snapshot ) \u2192 bigint"], "Description": ["See pg_snapshot_xmin()."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["txid_visible_in_snapshot"], "Feature": ["txid_visible_in_snapshot ( bigint, txid_snapshot ) \u2192 boolean"], "Description": ["See pg_visible_in_snapshot()."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["txid_status"], "Feature": ["txid_status ( bigint ) \u2192 text"], "Description": ["See pg_xact_status()."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_xact_commit_timestamp"], "Feature": ["pg_xact_commit_timestamp ( xid ) \u2192 timestamp with time zone"], "Description": ["Returns the commit timestamp of a transaction."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_xact_commit_timestamp_origin"], "Feature": ["pg_xact_commit_timestamp_origin ( xid ) \u2192 record ( timestamp timestamp with time zone, roident oid)"], "Description": ["Returns the commit timestamp and replication origin of a transaction."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["tanh"], "Feature": ["tanh ( double precision ) \u2192 double precision"], "Description": ["Hyperbolic tangent"], "Examples": ["tanh(1) \u2192 0.7615941559557649"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_last_committed_xact"], "Feature": ["pg_last_committed_xact () \u2192 record ( xid xid, timestamp timestamp with time zone, roident oid )"], "Description": ["Returns the transaction ID, commit timestamp and replication origin of the latest committed transaction."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_control_checkpoint"], "Feature": ["pg_control_checkpoint () \u2192 record"], "Description": ["Returns information about current checkpoint state, as shown in Table\u00a09.87."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_control_system"], "Feature": ["pg_control_system () \u2192 record"], "Description": ["Returns information about current control file state, as shown in Table\u00a09.88."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_control_init"], "Feature": ["pg_control_init () \u2192 record"], "Description": ["Returns information about cluster initialization state, as shown in Table\u00a09.89."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_control_recovery"], "Feature": ["pg_control_recovery () \u2192 record"], "Description": ["Returns information about recovery state, as shown in Table\u00a09.90."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["version"], "Feature": ["version () \u2192 text"], "Description": ["Returns a string describing the PostgreSQL server's version. You can also get this information from server_version, or for a machine-readable version use server_version_num. Software developers should use server_version_num (available since 8.2) or PQserverVersion instead of parsing the text version."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["unicode_version"], "Feature": ["unicode_version () \u2192 text"], "Description": ["Returns a string representing the version of Unicode used by PostgreSQL."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["icu_unicode_version"], "Feature": ["icu_unicode_version () \u2192 text"], "Description": ["Returns a string representing the version of Unicode used by ICU, if the server was built with ICU support; otherwise returns NULL"], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_available_wal_summaries"], "Feature": ["pg_available_wal_summaries () \u2192 setof record ( tli bigint, start_lsn pg_lsn, end_lsn pg_lsn )"], "Description": ["Returns information about the WAL summary files present in the data directory, under pg_wal/summaries. One row will be returned per WAL summary file. Each file summarizes WAL on the indicated TLI within the indicated LSN range. This function might be useful to determine whether enough WAL summaries are present on the server to take an incremental backup based on some prior backup whose start LSN is known."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_wal_summary_contents"], "Feature": ["pg_wal_summary_contents ( tli bigint, start_lsn pg_lsn, end_lsn pg_lsn ) \u2192 setof record ( relfilenode oid, reltablespace oid, reldatabase oid, relforknumber smallint, relblocknumber bigint, is_limit_block boolean )"], "Description": ["Returns one information about the contents of a single WAL summary file identified by TLI and starting and ending LSNs. Each row with is_limit_block false indicates that the block identified by the remaining output columns was modified by at least one WAL record within the range of records summarized by this file. Each row with is_limit_block true indicates either that (a) the relation fork was truncated to the length given by relblocknumber within the relevant range of WAL records or (b) that the relation fork was created or dropped within the relevant range of WAL records; in such cases, relblocknumber will be zero."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["asinh"], "Feature": ["asinh ( double precision ) \u2192 double precision"], "Description": ["Inverse hyperbolic sine"], "Examples": ["asinh(1) \u2192 0.881373587019543"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-info.html"], "Title": ["pg_get_wal_summarizer_state"], "Feature": ["pg_get_wal_summarizer_state () \u2192 record ( summarized_tli bigint, summarized_lsn pg_lsn, pending_lsn pg_lsn, summarizer_pid int )"], "Description": ["Returns information about the progress of the WAL summarizer. If the WAL summarizer has never run since the instance was started, then summarized_tli and summarized_lsn will be 0 and 0/0 respectively; otherwise, they will be the TLI and ending LSN of the last WAL summary file written to disk. If the WAL summarizer is currently running, pending_lsn will be the ending LSN of the last record that it has consumed, which must always be greater than or equal to summarized_lsn; if the WAL summarizer is not running, it will be equal to summarized_lsn. summarizer_pid is the PID of the WAL summarizer process, if it is running, and otherwise NULL.", "As a special exception, the WAL summarizer will refuse to generate WAL summary files if run on WAL generated under wal_level=minimal, since such summaries would be unsafe to use as the basis for an incremental backup. In this case, the fields above will continue to advance as if summaries were being generated, but nothing will be written to disk. Once the summarizer reaches WAL generated while wal_level was set to replica or higher, it will resume writing summaries to disk."], "Examples": [], "Category": ["System Information Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["current_setting"], "Feature": ["current_setting ( setting_name text [, missing_ok boolean ] ) \u2192 text"], "Description": ["Returns the current value of the setting setting_name. If there is no such setting, current_setting throws an error unless missing_ok is supplied and is true (in which case NULL is returned). This function corresponds to the SQL command SHOW."], "Examples": ["current_setting('datestyle') \u2192 ISO, MDY"], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["set_config"], "Feature": ["set_config ( setting_name text, new_value text, is_local boolean ) \u2192 text"], "Description": ["Sets the parameter setting_name to new_value, and returns that value. If is_local is true, the new value will only apply during the current transaction. If you want the new value to apply for the rest of the current session, use false instead. This function corresponds to the SQL command SET."], "Examples": ["set_config('log_statement_stats', 'off', false) \u2192 off"], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_cancel_backend"], "Feature": ["pg_cancel_backend ( pid integer ) \u2192 boolean"], "Description": ["Cancels the current query of the session whose backend process has the specified process ID. This is also allowed if the calling role is a member of the role whose backend is being canceled or the calling role has privileges of pg_signal_backend, however only superusers can cancel superuser backends."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_log_backend_memory_contexts"], "Feature": ["pg_log_backend_memory_contexts ( pid integer ) \u2192 boolean"], "Description": ["Requests to log the memory contexts of the backend with the specified process ID. This function can send the request to backends and auxiliary processes except logger. These memory contexts will be logged at LOG message level. They will appear in the server log based on the log configuration set (see Section\u00a019.8 for more information), but will not be sent to the client regardless of client_min_messages."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_reload_conf"], "Feature": ["pg_reload_conf () \u2192 boolean"], "Description": ["Causes all processes of the PostgreSQL server to reload their configuration files. (This is initiated by sending a SIGHUP signal to the postmaster process, which in turn sends SIGHUP to each of its children.) You can use the pg_file_settings, pg_hba_file_rules and pg_ident_file_mappings views to check the configuration files for possible errors, before reloading."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_rotate_logfile"], "Feature": ["pg_rotate_logfile () \u2192 boolean"], "Description": ["Signals the log-file manager to switch to a new output file immediately. This works only when the built-in log collector is running, since otherwise there is no log-file manager subprocess."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_terminate_backend"], "Feature": ["pg_terminate_backend ( pid integer, timeout bigint DEFAULT 0 ) \u2192 boolean"], "Description": ["Terminates the session whose backend process has the specified process ID. This is also allowed if the calling role is a member of the role whose backend is being terminated or the calling role has privileges of pg_signal_backend, however only superusers can terminate superuser backends.", "If timeout is not specified or zero, this function returns true whether the process actually terminates or not, indicating only that the sending of the signal was successful. If the timeout is specified (in milliseconds) and greater than zero, the function waits until the process is actually terminated or until the given time has passed. If the process is terminated, the function returns true. On timeout, a warning is emitted and false is returned."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_create_restore_point"], "Feature": ["pg_create_restore_point ( name text ) \u2192 pg_lsn"], "Description": ["Creates a named marker record in the write-ahead log that can later be used as a recovery target, and returns the corresponding write-ahead log location. The given name can then be used with recovery_target_name to specify the point up to which recovery will proceed. Avoid creating multiple restore points with the same name, since recovery will stop at the first one whose name matches the recovery target.", "This function is restricted to superusers by default, but other users can be granted EXECUTE to run the function."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_current_wal_flush_lsn"], "Feature": ["pg_current_wal_flush_lsn () \u2192 pg_lsn"], "Description": ["Returns the current write-ahead log flush location (see notes below)."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["acosh"], "Feature": ["acosh ( double precision ) \u2192 double precision"], "Description": ["Inverse hyperbolic cosine"], "Examples": ["acosh(1) \u2192 0"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_current_wal_insert_lsn"], "Feature": ["pg_current_wal_insert_lsn () \u2192 pg_lsn"], "Description": ["Returns the current write-ahead log insert location (see notes below)."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_current_wal_lsn"], "Feature": ["pg_current_wal_lsn () \u2192 pg_lsn"], "Description": ["Returns the current write-ahead log write location (see notes below)."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_backup_start"], "Feature": ["pg_backup_start ( label text [, fast boolean ] ) \u2192 pg_lsn"], "Description": ["Prepares the server to begin an on-line backup. The only required parameter is an arbitrary user-defined label for the backup. (Typically this would be the name under which the backup dump file will be stored.) If the optional second parameter is given as true, it specifies executing pg_backup_start as quickly as possible. This forces an immediate checkpoint which will cause a spike in I/O operations, slowing any concurrently executing queries.", "This function is restricted to superusers by default, but other users can be granted EXECUTE to run the function."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_backup_stop"], "Feature": ["pg_backup_stop ( [wait_for_archive boolean ] ) \u2192 record ( lsn pg_lsn, labelfile text, spcmapfile text )"], "Description": ["Finishes performing an on-line backup. The desired contents of the backup label file and the tablespace map file are returned as part of the result of the function and must be written to files in the backup area. These files must not be written to the live data directory (doing so will cause PostgreSQL to fail to restart in the event of a crash).", "There is an optional parameter of type boolean. If false, the function will return immediately after the backup is completed, without waiting for WAL to be archived. This behavior is only useful with backup software that independently monitors WAL archiving. Otherwise, WAL required to make the backup consistent might be missing and make the backup useless. By default or when this parameter is true, pg_backup_stop will wait for WAL to be archived when archiving is enabled. (On a standby, this means that it will wait only when archive_mode = always. If write activity on the primary is low, it may be useful to run pg_switch_wal on the primary in order to trigger an immediate segment switch.)", "When executed on a primary, this function also creates a backup history file in the write-ahead log archive area. The history file includes the label given to pg_backup_start, the starting and ending write-ahead log locations for the backup, and the starting and ending times of the backup. After recording the ending location, the current write-ahead log insertion point is automatically advanced to the next write-ahead log file, so that the ending write-ahead log file can be archived immediately to complete the backup.", "The result of the function is a single record. The lsn column holds the backup's ending write-ahead log location (which again can be ignored). The second column returns the contents of the backup label file, and the third column returns the contents of the tablespace map file. These must be stored as part of the backup and are required as part of the restore process.", "This function is restricted to superusers by default, but other users can be granted EXECUTE to run the function."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_switch_wal"], "Feature": ["pg_switch_wal () \u2192 pg_lsn"], "Description": ["Forces the server to switch to a new write-ahead log file, which allows the current file to be archived (assuming you are using continuous archiving). The result is the ending write-ahead log location plus 1 within the just-completed write-ahead log file. If there has been no write-ahead log activity since the last write-ahead log switch, pg_switch_wal does nothing and returns the start location of the write-ahead log file currently in use.", "This function is restricted to superusers by default, but other users can be granted EXECUTE to run the function."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_walfile_name"], "Feature": ["pg_walfile_name ( lsn pg_lsn ) \u2192 text"], "Description": ["Converts a write-ahead log location to the name of the WAL file holding that location."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_walfile_name_offset"], "Feature": ["pg_walfile_name_offset ( lsn pg_lsn ) \u2192 record ( file_name text, file_offset integer )"], "Description": ["Converts a write-ahead log location to a WAL file name and byte offset within that file."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_split_walfile_name"], "Feature": ["pg_split_walfile_name ( file_name text ) \u2192 record ( segment_number numeric, timeline_id bigint )"], "Description": ["Extracts the sequence number and timeline ID from a WAL file name."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_wal_lsn_diff"], "Feature": ["pg_wal_lsn_diff ( lsn1 pg_lsn, lsn2 pg_lsn ) \u2192 numeric"], "Description": ["Calculates the difference in bytes (lsn1 - lsn2) between two write-ahead log locations. This can be used with pg_stat_replication or some of the functions shown in Table\u00a09.95 to get the replication lag."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_is_in_recovery"], "Feature": ["pg_is_in_recovery () \u2192 boolean"], "Description": ["Returns true if recovery is still in progress."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["atanh"], "Feature": ["atanh ( double precision ) \u2192 double precision"], "Description": ["Inverse hyperbolic tangent"], "Examples": ["atanh(0.5) \u2192 0.5493061443340548"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_last_wal_receive_lsn"], "Feature": ["pg_last_wal_receive_lsn () \u2192 pg_lsn"], "Description": ["Returns the last write-ahead log location that has been received and synced to disk by streaming replication. While streaming replication is in progress this will increase monotonically. If recovery has completed then this will remain static at the location of the last WAL record received and synced to disk during recovery. If streaming replication is disabled, or if it has not yet started, the function returns NULL."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_last_wal_replay_lsn"], "Feature": ["pg_last_wal_replay_lsn () \u2192 pg_lsn"], "Description": ["Returns the last write-ahead log location that has been replayed during recovery. If recovery is still in progress this will increase monotonically. If recovery has completed then this will remain static at the location of the last WAL record applied during recovery. When the server has been started normally without recovery, the function returns NULL."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_last_xact_replay_timestamp"], "Feature": ["pg_last_xact_replay_timestamp () \u2192 timestamp with time zone"], "Description": ["Returns the time stamp of the last transaction replayed during recovery. This is the time at which the commit or abort WAL record for that transaction was generated on the primary. If no transactions have been replayed during recovery, the function returns NULL. Otherwise, if recovery is still in progress this will increase monotonically. If recovery has completed then this will remain static at the time of the last transaction applied during recovery. When the server has been started normally without recovery, the function returns NULL."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_get_wal_resource_managers"], "Feature": ["pg_get_wal_resource_managers () \u2192 setof record ( rm_id integer, rm_name text, rm_builtin boolean )"], "Description": ["Returns the currently-loaded WAL resource managers in the system. The column rm_builtin indicates whether it's a built-in resource manager, or a custom resource manager loaded by an extension."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_is_wal_replay_paused"], "Feature": ["pg_is_wal_replay_paused () \u2192 boolean"], "Description": ["Returns true if recovery pause is requested."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_get_wal_replay_pause_state"], "Feature": ["pg_get_wal_replay_pause_state () \u2192 text"], "Description": ["Returns recovery pause state. The return values are not paused if pause is not requested, pause requested if pause is requested but recovery is not yet paused, and paused if the recovery is actually paused."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_promote"], "Feature": ["pg_promote ( wait boolean DEFAULT true, wait_seconds integer DEFAULT 60 ) \u2192 boolean"], "Description": ["Promotes a standby server to primary status. With wait set to true (the default), the function waits until promotion is completed or wait_seconds seconds have passed, and returns true if promotion is successful and false otherwise. If wait is set to false, the function returns true immediately after sending a SIGUSR1 signal to the postmaster to trigger promotion.", "This function is restricted to superusers by default, but other users can be granted EXECUTE to run the function."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_wal_replay_pause"], "Feature": ["pg_wal_replay_pause () \u2192 void"], "Description": ["Request to pause recovery. A request doesn't mean that recovery stops right away. If you want a guarantee that recovery is actually paused, you need to check for the recovery pause state returned by pg_get_wal_replay_pause_state(). Note that pg_is_wal_replay_paused() returns whether a request is made. While recovery is paused, no further database changes are applied. If hot standby is active, all new queries will see the same consistent snapshot of the database, and no further query conflicts will be generated until recovery is resumed.", "This function is restricted to superusers by default, but other users can be granted EXECUTE to run the function."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_wal_replay_resume"], "Feature": ["pg_wal_replay_resume () \u2192 void"], "Description": ["Restarts recovery if it was paused.", "This function is restricted to superusers by default, but other users can be granted EXECUTE to run the function."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_export_snapshot"], "Feature": ["pg_export_snapshot () \u2192 text"], "Description": ["Saves the transaction's current snapshot and returns a text string identifying the snapshot. This string must be passed (outside the database) to clients that want to import the snapshot. The snapshot is available for import only until the end of the transaction that exported it.", "A transaction can export more than one snapshot, if needed. Note that doing so is only useful in READ COMMITTED transactions, since in REPEATABLE READ and higher isolation levels, transactions use the same snapshot throughout their lifetime. Once a transaction has exported any snapshots, it cannot be prepared with PREPARE TRANSACTION."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["btrim"], "Feature": ["btrim ( string text [, characters text ] ) \u2192 text"], "Description": ["Removes the longest string containing only characters in characters (a space by default) from the start and end of string."], "Examples": ["btrim('xyxtrimyyx', 'xyz') \u2192 trim"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_log_standby_snapshot"], "Feature": ["pg_log_standby_snapshot () \u2192 pg_lsn"], "Description": ["Take a snapshot of running transactions and write it to WAL, without having to wait for bgwriter or checkpointer to log one. This is useful for logical decoding on standby, as logical slot creation has to wait until such a record is replayed on the standby."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_create_physical_replication_slot"], "Feature": ["pg_create_physical_replication_slot ( slot_name name [, immediately_reserve boolean, temporary boolean ] ) \u2192 record ( slot_name name, lsn pg_lsn )"], "Description": ["Creates a new physical replication slot named slot_name. The optional second parameter, when true, specifies that the LSN for this replication slot be reserved immediately; otherwise the LSN is reserved on first connection from a streaming replication client. Streaming changes from a physical slot is only possible with the streaming-replication protocol \u2014 see Section\u00a053.4. The optional third parameter, temporary, when set to true, specifies that the slot should not be permanently stored to disk and is only meant for use by the current session. Temporary slots are also released upon any error. This function corresponds to the replication protocol command CREATE_REPLICATION_SLOT ... PHYSICAL."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_drop_replication_slot"], "Feature": ["pg_drop_replication_slot ( slot_name name ) \u2192 void"], "Description": ["Drops the physical or logical replication slot named slot_name. Same as replication protocol command DROP_REPLICATION_SLOT. For logical slots, this must be called while connected to the same database the slot was created on."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_create_logical_replication_slot"], "Feature": ["pg_create_logical_replication_slot ( slot_name name, plugin name [, temporary boolean, twophase boolean, failover boolean ] ) \u2192 record ( slot_name name, lsn pg_lsn )"], "Description": ["Creates a new logical (decoding) replication slot named slot_name using the output plugin plugin. The optional third parameter, temporary, when set to true, specifies that the slot should not be permanently stored to disk and is only meant for use by the current session. Temporary slots are also released upon any error. The optional fourth parameter, twophase, when set to true, specifies that the decoding of prepared transactions is enabled for this slot. The optional fifth parameter, failover, when set to true, specifies that this slot is enabled to be synced to the standbys so that logical replication can be resumed after failover. A call to this function has the same effect as the replication protocol command CREATE_REPLICATION_SLOT ... LOGICAL."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_copy_physical_replication_slot"], "Feature": ["pg_copy_physical_replication_slot ( src_slot_name name, dst_slot_name name [, temporary boolean ] ) \u2192 record ( slot_name name, lsn pg_lsn )"], "Description": ["Copies an existing physical replication slot named src_slot_name to a physical replication slot named dst_slot_name. The copied physical slot starts to reserve WAL from the same LSN as the source slot. temporary is optional. If temporary is omitted, the same value as the source slot is used."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_copy_logical_replication_slot"], "Feature": ["pg_copy_logical_replication_slot ( src_slot_name name, dst_slot_name name [, temporary boolean [, plugin name ]] ) \u2192 record ( slot_name name, lsn pg_lsn )"], "Description": ["Copies an existing logical replication slot named src_slot_name to a logical replication slot named dst_slot_name, optionally changing the output plugin and persistence. The copied logical slot starts from the same LSN as the source logical slot. Both temporary and plugin are optional; if they are omitted, the values of the source slot are used."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_logical_slot_get_changes"], "Feature": ["pg_logical_slot_get_changes ( slot_name name, upto_lsn pg_lsn, upto_nchanges integer, VARIADIC options text[] ) \u2192 setof record ( lsn pg_lsn, xid xid, data text )"], "Description": ["Returns changes in the slot slot_name, starting from the point from which changes have been consumed last. If upto_lsn and upto_nchanges are NULL, logical decoding will continue until end of WAL. If upto_lsn is non-NULL, decoding will include only those transactions which commit prior to the specified LSN. If upto_nchanges is non-NULL, decoding will stop when the number of rows produced by decoding exceeds the specified value. Note, however, that the actual number of rows returned may be larger, since this limit is only checked after adding the rows produced when decoding each new transaction commit. If the specified slot is a logical failover slot then the function will not return until all physical slots specified in synchronized_standby_slots have confirmed WAL receipt."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_logical_slot_peek_changes"], "Feature": ["pg_logical_slot_peek_changes ( slot_name name, upto_lsn pg_lsn, upto_nchanges integer, VARIADIC options text[] ) \u2192 setof record ( lsn pg_lsn, xid xid, data text )"], "Description": ["Behaves just like the pg_logical_slot_get_changes() function, except that changes are not consumed; that is, they will be returned again on future calls."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_logical_slot_get_binary_changes"], "Feature": ["pg_logical_slot_get_binary_changes ( slot_name name, upto_lsn pg_lsn, upto_nchanges integer, VARIADIC options text[] ) \u2192 setof record ( lsn pg_lsn, xid xid, data bytea )"], "Description": ["Behaves just like the pg_logical_slot_get_changes() function, except that changes are returned as bytea."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_logical_slot_peek_binary_changes"], "Feature": ["pg_logical_slot_peek_binary_changes ( slot_name name, upto_lsn pg_lsn, upto_nchanges integer, VARIADIC options text[] ) \u2192 setof record ( lsn pg_lsn, xid xid, data bytea )"], "Description": ["Behaves just like the pg_logical_slot_peek_changes() function, except that changes are returned as bytea."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["bit_length"], "Feature": ["bit_length ( text ) \u2192 integer"], "Description": ["Returns number of bits in the string (8 times the octet_length)."], "Examples": ["bit_length('jose') \u2192 32"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_replication_slot_advance"], "Feature": ["pg_replication_slot_advance ( slot_name name, upto_lsn pg_lsn ) \u2192 record ( slot_name name, end_lsn pg_lsn )"], "Description": ["Advances the current confirmed position of a replication slot named slot_name. The slot will not be moved backwards, and it will not be moved beyond the current insert location. Returns the name of the slot and the actual position that it was advanced to. The updated slot position information is written out at the next checkpoint if any advancing is done. So in the event of a crash, the slot may return to an earlier position. If the specified slot is a logical failover slot then the function will not return until all physical slots specified in synchronized_standby_slots have confirmed WAL receipt."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_replication_origin_create"], "Feature": ["pg_replication_origin_create ( node_name text ) \u2192 oid"], "Description": ["Creates a replication origin with the given external name, and returns the internal ID assigned to it."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_replication_origin_drop"], "Feature": ["pg_replication_origin_drop ( node_name text ) \u2192 void"], "Description": ["Deletes a previously-created replication origin, including any associated replay progress."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_replication_origin_oid"], "Feature": ["pg_replication_origin_oid ( node_name text ) \u2192 oid"], "Description": ["Looks up a replication origin by name and returns the internal ID. If no such replication origin is found, NULL is returned."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_replication_origin_session_setup"], "Feature": ["pg_replication_origin_session_setup ( node_name text ) \u2192 void"], "Description": ["Marks the current session as replaying from the given origin, allowing replay progress to be tracked. Can only be used if no origin is currently selected. Use pg_replication_origin_session_reset to undo."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_replication_origin_session_reset"], "Feature": ["pg_replication_origin_session_reset () \u2192 void"], "Description": ["Cancels the effects of pg_replication_origin_session_setup()."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_replication_origin_session_is_setup"], "Feature": ["pg_replication_origin_session_is_setup () \u2192 boolean"], "Description": ["Returns true if a replication origin has been selected in the current session."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_replication_origin_session_progress"], "Feature": ["pg_replication_origin_session_progress ( flush boolean ) \u2192 pg_lsn"], "Description": ["Returns the replay location for the replication origin selected in the current session. The parameter flush determines whether the corresponding local transaction will be guaranteed to have been flushed to disk or not."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_replication_origin_xact_setup"], "Feature": ["pg_replication_origin_xact_setup ( origin_lsn pg_lsn, origin_timestamp timestamp with time zone ) \u2192 void"], "Description": ["Marks the current transaction as replaying a transaction that has committed at the given LSN and timestamp. Can only be called when a replication origin has been selected using pg_replication_origin_session_setup."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_replication_origin_xact_reset"], "Feature": ["pg_replication_origin_xact_reset () \u2192 void"], "Description": ["Cancels the effects of pg_replication_origin_xact_setup()."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["char_length"], "Feature": ["char_length ( text ) \u2192 integer", "character_length ( text ) \u2192 integer"], "Description": ["Returns number of characters in the string."], "Examples": ["char_length('jos\u00e9') \u2192 4"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_replication_origin_advance"], "Feature": ["pg_replication_origin_advance ( node_name text, lsn pg_lsn ) \u2192 void"], "Description": ["Sets replication progress for the given node to the given location. This is primarily useful for setting up the initial location, or setting a new location after configuration changes and similar. Be aware that careless use of this function can lead to inconsistently replicated data."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_replication_origin_progress"], "Feature": ["pg_replication_origin_progress ( node_name text, flush boolean ) \u2192 pg_lsn"], "Description": ["Returns the replay location for the given replication origin. The parameter flush determines whether the corresponding local transaction will be guaranteed to have been flushed to disk or not."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_logical_emit_message"], "Feature": ["pg_logical_emit_message ( transactional boolean, prefix text, content text [, flush boolean DEFAULT false] ) \u2192 pg_lsn", "pg_logical_emit_message ( transactional boolean, prefix text, content bytea [, flush boolean DEFAULT false] ) \u2192 pg_lsn"], "Description": ["Emits a logical decoding message. This can be used to pass generic messages to logical decoding plugins through WAL. The transactional parameter specifies if the message should be part of the current transaction, or if it should be written immediately and decoded as soon as the logical decoder reads the record. The prefix parameter is a textual prefix that can be used by logical decoding plugins to easily recognize messages that are interesting for them. The content parameter is the content of the message, given either in text or binary form. The flush parameter (default set to false) controls if the message is immediately flushed to WAL or not. flush has no effect with transactional, as the message's WAL record is flushed along with its transaction."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_sync_replication_slots"], "Feature": ["pg_sync_replication_slots () \u2192 void"], "Description": ["Synchronize the logical failover replication slots from the primary server to the standby server. This function can only be executed on the standby server. Temporary synced slots, if any, cannot be used for logical decoding and must be dropped after promotion. See Section\u00a047.2.3 for details. Note that this function cannot be executed if sync_replication_slots is enabled and the slotsync worker is already running to perform the synchronization of slots.", "If, after executing the function, hot_standby_feedback is disabled on the standby or the physical slot configured in primary_slot_name is removed, then it is possible that the necessary rows of the synchronized slot will be removed by the VACUUM process on the primary server, resulting in the synchronized slot becoming invalidated."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_column_size"], "Feature": ["pg_column_size ( \"any\" ) \u2192 integer"], "Description": ["Shows the number of bytes used to store any individual data value. If applied directly to a table column value, this reflects any compression that was done."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_column_compression"], "Feature": ["pg_column_compression ( \"any\" ) \u2192 text"], "Description": ["Shows the compression algorithm that was used to compress an individual variable-length value. Returns NULL if the value is not compressed."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_column_toast_chunk_id"], "Feature": ["pg_column_toast_chunk_id ( \"any\" ) \u2192 oid"], "Description": ["Shows the chunk_id of an on-disk TOASTed value. Returns NULL if the value is un-TOASTed or not on-disk. See Section\u00a065.2 for more information about TOAST."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_database_size"], "Feature": ["pg_database_size ( name ) \u2192 bigint", "pg_database_size ( oid ) \u2192 bigint"], "Description": ["Computes the total disk space used by the database with the specified name or OID. To use this function, you must have CONNECT privilege on the specified database (which is granted by default) or have privileges of the pg_read_all_stats role."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_indexes_size"], "Feature": ["pg_indexes_size ( regclass ) \u2192 bigint"], "Description": ["Computes the total disk space used by indexes attached to the specified table."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_relation_size"], "Feature": ["pg_relation_size ( relation regclass [, fork text ] ) \u2192 bigint"], "Description": ["Computes the disk space used by one \u201cfork\u201d of the specified relation. (Note that for most purposes it is more convenient to use the higher-level functions pg_total_relation_size or pg_table_size, which sum the sizes of all forks.) With one argument, this returns the size of the main data fork of the relation. The second argument can be provided to specify which fork to examine:", "main returns the size of the main data fork of the relation.", "fsm returns the size of the Free Space Map (see Section\u00a065.3) associated with the relation.", "vm returns the size of the Visibility Map (see Section\u00a065.4) associated with the relation.", "init returns the size of the initialization fork, if any, associated with the relation."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["lower"], "Feature": ["lower ( text ) \u2192 text"], "Description": ["Converts the string to all lower case, according to the rules of the database's locale."], "Examples": ["lower('TOM') \u2192 tom"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_size_bytes"], "Feature": ["pg_size_bytes ( text ) \u2192 bigint"], "Description": ["Converts a size in human-readable format (as returned by pg_size_pretty) into bytes. Valid units are bytes, B, kB, MB, GB, TB, and PB."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_size_pretty"], "Feature": ["pg_size_pretty ( bigint ) \u2192 text", "pg_size_pretty ( numeric ) \u2192 text"], "Description": ["Converts a size in bytes into a more easily human-readable format with size units (bytes, kB, MB, GB, TB, or PB as appropriate). Note that the units are powers of 2 rather than powers of 10, so 1kB is 1024 bytes, 1MB is 10242 = 1048576 bytes, and so on."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_table_size"], "Feature": ["pg_table_size ( regclass ) \u2192 bigint"], "Description": ["Computes the disk space used by the specified table, excluding indexes (but including its TOAST table if any, free space map, and visibility map)."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_tablespace_size"], "Feature": ["pg_tablespace_size ( name ) \u2192 bigint", "pg_tablespace_size ( oid ) \u2192 bigint"], "Description": ["Computes the total disk space used in the tablespace with the specified name or OID. To use this function, you must have CREATE privilege on the specified tablespace or have privileges of the pg_read_all_stats role, unless it is the default tablespace for the current database."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_total_relation_size"], "Feature": ["pg_total_relation_size ( regclass ) \u2192 bigint"], "Description": ["Computes the total disk space used by the specified table, including all indexes and TOAST data. The result is equivalent to pg_table_size + pg_indexes_size."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_relation_filenode"], "Feature": ["pg_relation_filenode ( relation regclass ) \u2192 oid"], "Description": ["Returns the \u201cfilenode\u201d number currently assigned to the specified relation. The filenode is the base component of the file name(s) used for the relation (see Section\u00a065.1 for more information). For most relations the result is the same as pg_class.relfilenode, but for certain system catalogs relfilenode is zero and this function must be used to get the correct value. The function returns NULL if passed a relation that does not have storage, such as a view."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_relation_filepath"], "Feature": ["pg_relation_filepath ( relation regclass ) \u2192 text"], "Description": ["Returns the entire file path name (relative to the database cluster's data directory, PGDATA) of the relation."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_filenode_relation"], "Feature": ["pg_filenode_relation ( tablespace oid, filenode oid ) \u2192 regclass"], "Description": ["Returns a relation's OID given the tablespace OID and filenode it is stored under. This is essentially the inverse mapping of pg_relation_filepath. For a relation in the database's default tablespace, the tablespace can be specified as zero. Returns NULL if no relation in the current database is associated with the given values."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_collation_actual_version"], "Feature": ["pg_collation_actual_version ( oid ) \u2192 text"], "Description": ["Returns the actual version of the collation object as it is currently installed in the operating system. If this is different from the value in pg_collation.collversion, then objects depending on the collation might need to be rebuilt. See also ALTER COLLATION."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_database_collation_actual_version"], "Feature": ["pg_database_collation_actual_version ( oid ) \u2192 text"], "Description": ["Returns the actual version of the database's collation as it is currently installed in the operating system. If this is different from the value in pg_database.datcollversion, then objects depending on the collation might need to be rebuilt. See also ALTER DATABASE."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["lpad"], "Feature": ["lpad ( string text, length integer [, fill text ] ) \u2192 text"], "Description": ["Extends the string to length length by prepending the characters fill (a space by default). If the string is already longer than length then it is truncated (on the right)."], "Examples": ["lpad('hi', 5, 'xy') \u2192 xyxhi"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["ceiling"], "Feature": ["ceiling ( numeric ) \u2192 numeric", "ceiling ( double precision ) \u2192 double precision"], "Description": ["Nearest integer greater than or equal to argument (same as ceil)"], "Examples": ["ceiling(95.3) \u2192 96"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_import_system_collations"], "Feature": ["pg_import_system_collations ( schema regnamespace ) \u2192 integer"], "Description": ["Adds collations to the system catalog pg_collation based on all the locales it finds in the operating system. This is what initdb uses; see Section\u00a023.2.2 for more details. If additional locales are installed into the operating system later on, this function can be run again to add collations for the new locales. Locales that match existing entries in pg_collation will be skipped. (But collation objects based on locales that are no longer present in the operating system are not removed by this function.) The schema parameter would typically be pg_catalog, but that is not a requirement; the collations could be installed into some other schema as well. The function returns the number of new collation objects it created. Use of this function is restricted to superusers."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_partition_tree"], "Feature": ["pg_partition_tree ( regclass ) \u2192 setof record ( relid regclass, parentrelid regclass, isleaf boolean, level integer )"], "Description": ["Lists the tables or indexes in the partition tree of the given partitioned table or partitioned index, with one row for each partition. Information provided includes the OID of the partition, the OID of its immediate parent, a boolean value telling if the partition is a leaf, and an integer telling its level in the hierarchy. The level value is 0 for the input table or index, 1 for its immediate child partitions, 2 for their partitions, and so on. Returns no rows if the relation does not exist or is not a partition or partitioned table."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_partition_ancestors"], "Feature": ["pg_partition_ancestors ( regclass ) \u2192 setof regclass"], "Description": ["Lists the ancestor relations of the given partition, including the relation itself. Returns no rows if the relation does not exist or is not a partition or partitioned table."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_partition_root"], "Feature": ["pg_partition_root ( regclass ) \u2192 regclass"], "Description": ["Returns the top-most parent of the partition tree to which the given relation belongs. Returns NULL if the relation does not exist or is not a partition or partitioned table."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["brin_summarize_new_values"], "Feature": ["brin_summarize_new_values ( index regclass ) \u2192 integer"], "Description": ["Scans the specified BRIN index to find page ranges in the base table that are not currently summarized by the index; for any such range it creates a new summary index tuple by scanning those table pages. Returns the number of new page range summaries that were inserted into the index."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["brin_summarize_range"], "Feature": ["brin_summarize_range ( index regclass, blockNumber bigint ) \u2192 integer"], "Description": ["Summarizes the page range covering the given block, if not already summarized. This is like brin_summarize_new_values except that it only processes the page range that covers the given table block number."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["brin_desummarize_range"], "Feature": ["brin_desummarize_range ( index regclass, blockNumber bigint ) \u2192 void"], "Description": ["Removes the BRIN index tuple that summarizes the page range covering the given table block, if there is one."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["gin_clean_pending_list"], "Feature": ["gin_clean_pending_list ( index regclass ) \u2192 bigint"], "Description": ["Cleans up the \u201cpending\u201d list of the specified GIN index by moving entries in it, in bulk, to the main GIN data structure. Returns the number of pages removed from the pending list. If the argument is a GIN index built with the fastupdate option disabled, no cleanup happens and the result is zero, because the index doesn't have a pending list. See Section\u00a064.4.4.1 and Section\u00a064.4.5 for details about the pending list and fastupdate option."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_ls_dir"], "Feature": ["pg_ls_dir ( dirname text [, missing_ok boolean, include_dot_dirs boolean ] ) \u2192 setof text"], "Description": ["Returns the names of all files (and directories and other special files) in the specified directory. The include_dot_dirs parameter indicates whether \u201c.\u201d and \u201c..\u201d are to be included in the result set; the default is to exclude them. Including them can be useful when missing_ok is true, to distinguish an empty directory from a non-existent directory.", "This function is restricted to superusers by default, but other users can be granted EXECUTE to run the function."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_ls_logdir"], "Feature": ["pg_ls_logdir () \u2192 setof record ( name text, size bigint, modification timestamp with time zone )"], "Description": ["Returns the name, size, and last modification time (mtime) of each ordinary file in the server's log directory. Filenames beginning with a dot, directories, and other special files are excluded.", "This function is restricted to superusers and roles with privileges of the pg_monitor role by default, but other users can be granted EXECUTE to run the function."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["ltrim"], "Feature": ["ltrim ( string text [, characters text ] ) \u2192 text"], "Description": ["Removes the longest string containing only characters in characters (a space by default) from the start of string."], "Examples": ["ltrim('zzzytest', 'xyz') \u2192 test"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_ls_waldir"], "Feature": ["pg_ls_waldir () \u2192 setof record ( name text, size bigint, modification timestamp with time zone )"], "Description": ["Returns the name, size, and last modification time (mtime) of each ordinary file in the server's write-ahead log (WAL) directory. Filenames beginning with a dot, directories, and other special files are excluded.", "This function is restricted to superusers and roles with privileges of the pg_monitor role by default, but other users can be granted EXECUTE to run the function."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_ls_logicalmapdir"], "Feature": ["pg_ls_logicalmapdir () \u2192 setof record ( name text, size bigint, modification timestamp with time zone )"], "Description": ["Returns the name, size, and last modification time (mtime) of each ordinary file in the server's pg_logical/mappings directory. Filenames beginning with a dot, directories, and other special files are excluded.", "This function is restricted to superusers and members of the pg_monitor role by default, but other users can be granted EXECUTE to run the function."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_ls_logicalsnapdir"], "Feature": ["pg_ls_logicalsnapdir () \u2192 setof record ( name text, size bigint, modification timestamp with time zone )"], "Description": ["Returns the name, size, and last modification time (mtime) of each ordinary file in the server's pg_logical/snapshots directory. Filenames beginning with a dot, directories, and other special files are excluded.", "This function is restricted to superusers and members of the pg_monitor role by default, but other users can be granted EXECUTE to run the function."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_ls_replslotdir"], "Feature": ["pg_ls_replslotdir ( slot_name text ) \u2192 setof record ( name text, size bigint, modification timestamp with time zone )"], "Description": ["Returns the name, size, and last modification time (mtime) of each ordinary file in the server's pg_replslot/slot_name directory, where slot_name is the name of the replication slot provided as input of the function. Filenames beginning with a dot, directories, and other special files are excluded.", "This function is restricted to superusers and members of the pg_monitor role by default, but other users can be granted EXECUTE to run the function."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_ls_archive_statusdir"], "Feature": ["pg_ls_archive_statusdir () \u2192 setof record ( name text, size bigint, modification timestamp with time zone )"], "Description": ["Returns the name, size, and last modification time (mtime) of each ordinary file in the server's WAL archive status directory (pg_wal/archive_status). Filenames beginning with a dot, directories, and other special files are excluded.", "This function is restricted to superusers and members of the pg_monitor role by default, but other users can be granted EXECUTE to run the function."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_ls_tmpdir"], "Feature": ["pg_ls_tmpdir ( [ tablespace oid ] ) \u2192 setof record ( name text, size bigint, modification timestamp with time zone )"], "Description": ["Returns the name, size, and last modification time (mtime) of each ordinary file in the temporary file directory for the specified tablespace. If tablespace is not provided, the pg_default tablespace is examined. Filenames beginning with a dot, directories, and other special files are excluded.", "This function is restricted to superusers and members of the pg_monitor role by default, but other users can be granted EXECUTE to run the function."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_read_file"], "Feature": ["pg_read_file ( filename text [, offset bigint, length bigint ] [, missing_ok boolean ] ) \u2192 text"], "Description": ["Returns all or part of a text file, starting at the given byte offset, returning at most length bytes (less if the end of file is reached first). If offset is negative, it is relative to the end of the file. If offset and length are omitted, the entire file is returned. The bytes read from the file are interpreted as a string in the database's encoding; an error is thrown if they are not valid in that encoding.", "This function is restricted to superusers by default, but other users can be granted EXECUTE to run the function."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_read_binary_file"], "Feature": ["pg_read_binary_file ( filename text [, offset bigint, length bigint ] [, missing_ok boolean ] ) \u2192 bytea"], "Description": ["Returns all or part of a file. This function is identical to pg_read_file except that it can read arbitrary binary data, returning the result as bytea not text; accordingly, no encoding checks are performed.", "This function is restricted to superusers by default, but other users can be granted EXECUTE to run the function.", "In combination with the convert_from function, this function can be used to read a text file in a specified encoding and convert to the database's encoding:"], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_stat_file"], "Feature": ["pg_stat_file ( filename text [, missing_ok boolean ] ) \u2192 record ( size bigint, access timestamp with time zone, modification timestamp with time zone, change timestamp with time zone, creation timestamp with time zone, isdir boolean )"], "Description": ["Returns a record containing the file's size, last access time stamp, last modification time stamp, last file status change time stamp (Unix platforms only), file creation time stamp (Windows only), and a flag indicating if it is a directory.", "This function is restricted to superusers by default, but other users can be granted EXECUTE to run the function."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_advisory_lock"], "Feature": ["pg_advisory_lock ( key bigint ) \u2192 void", "pg_advisory_lock ( key1 integer, key2 integer ) \u2192 void"], "Description": ["Obtains an exclusive session-level advisory lock, waiting if necessary."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["normalize"], "Feature": ["normalize ( text [, form ] ) \u2192 text"], "Description": ["Converts the string to the specified Unicode normalization form. The optional form key word specifies the form: NFC (the default), NFD, NFKC, or NFKD. This function can only be used when the server encoding is UTF8."], "Examples": ["normalize(U&'\\0061\\0308bc', NFC) \u2192 U&'\\00E4bc'"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_advisory_lock_shared"], "Feature": ["pg_advisory_lock_shared ( key bigint ) \u2192 void", "pg_advisory_lock_shared ( key1 integer, key2 integer ) \u2192 void"], "Description": ["Obtains a shared session-level advisory lock, waiting if necessary."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_advisory_unlock"], "Feature": ["pg_advisory_unlock ( key bigint ) \u2192 boolean", "pg_advisory_unlock ( key1 integer, key2 integer ) \u2192 boolean"], "Description": ["Releases a previously-acquired exclusive session-level advisory lock. Returns true if the lock is successfully released. If the lock was not held, false is returned, and in addition, an SQL warning will be reported by the server."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_advisory_unlock_all"], "Feature": ["pg_advisory_unlock_all () \u2192 void"], "Description": ["Releases all session-level advisory locks held by the current session. (This function is implicitly invoked at session end, even if the client disconnects ungracefully.)"], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_advisory_unlock_shared"], "Feature": ["pg_advisory_unlock_shared ( key bigint ) \u2192 boolean", "pg_advisory_unlock_shared ( key1 integer, key2 integer ) \u2192 boolean"], "Description": ["Releases a previously-acquired shared session-level advisory lock. Returns true if the lock is successfully released. If the lock was not held, false is returned, and in addition, an SQL warning will be reported by the server."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_advisory_xact_lock"], "Feature": ["pg_advisory_xact_lock ( key bigint ) \u2192 void", "pg_advisory_xact_lock ( key1 integer, key2 integer ) \u2192 void"], "Description": ["Obtains an exclusive transaction-level advisory lock, waiting if necessary."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_advisory_xact_lock_shared"], "Feature": ["pg_advisory_xact_lock_shared ( key bigint ) \u2192 void", "pg_advisory_xact_lock_shared ( key1 integer, key2 integer ) \u2192 void"], "Description": ["Obtains a shared transaction-level advisory lock, waiting if necessary."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_try_advisory_lock"], "Feature": ["pg_try_advisory_lock ( key bigint ) \u2192 boolean", "pg_try_advisory_lock ( key1 integer, key2 integer ) \u2192 boolean"], "Description": ["Obtains an exclusive session-level advisory lock if available. This will either obtain the lock immediately and return true, or return false without waiting if the lock cannot be acquired immediately."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_try_advisory_lock_shared"], "Feature": ["pg_try_advisory_lock_shared ( key bigint ) \u2192 boolean", "pg_try_advisory_lock_shared ( key1 integer, key2 integer ) \u2192 boolean"], "Description": ["Obtains a shared session-level advisory lock if available. This will either obtain the lock immediately and return true, or return false without waiting if the lock cannot be acquired immediately."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_try_advisory_xact_lock"], "Feature": ["pg_try_advisory_xact_lock ( key bigint ) \u2192 boolean", "pg_try_advisory_xact_lock ( key1 integer, key2 integer ) \u2192 boolean"], "Description": ["Obtains an exclusive transaction-level advisory lock if available. This will either obtain the lock immediately and return true, or return false without waiting if the lock cannot be acquired immediately."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-admin.html"], "Title": ["pg_try_advisory_xact_lock_shared"], "Feature": ["pg_try_advisory_xact_lock_shared ( key bigint ) \u2192 boolean", "pg_try_advisory_xact_lock_shared ( key1 integer, key2 integer ) \u2192 boolean"], "Description": ["Obtains a shared transaction-level advisory lock if available. This will either obtain the lock immediately and return true, or return false without waiting if the lock cannot be acquired immediately."], "Examples": [], "Category": ["System Administration Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["octet_length"], "Feature": ["octet_length ( character ) \u2192 integer"], "Description": ["Returns number of bytes in the string. Since this version of the function accepts type character directly, it will not strip trailing spaces."], "Examples": ["octet_length('abc '::character(4)) \u2192 4"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-trigger.html"], "Title": ["suppress_redundant_updates_trigger"], "Feature": ["suppress_redundant_updates_trigger ( ) \u2192 trigger"], "Description": ["Suppresses do-nothing update operations. See below for details.", "CREATE TRIGGER ... suppress_redundant_updates_trigger()"], "Examples": [], "Category": ["Trigger Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-trigger.html"], "Title": ["tsvector_update_trigger"], "Feature": ["tsvector_update_trigger ( ) \u2192 trigger"], "Description": ["Automatically updates a tsvector column from associated plain-text document column(s). The text search configuration to use is specified by name as a trigger argument. See Section\u00a012.4.3 for details.", "CREATE TRIGGER ... tsvector_update_trigger(tsvcol, 'pg_catalog.swedish', title, body)"], "Examples": [], "Category": ["Trigger Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-trigger.html"], "Title": ["tsvector_update_trigger_column"], "Feature": ["tsvector_update_trigger_column ( ) \u2192 trigger"], "Description": ["Automatically updates a tsvector column from associated plain-text document column(s). The text search configuration to use is taken from a regconfig column of the table. See Section\u00a012.4.3 for details.", "CREATE TRIGGER ... tsvector_update_trigger_column(tsvcol, tsconfigcol, title, body)"], "Examples": [], "Category": ["Trigger Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-event-triggers.html"], "Title": ["pg_event_trigger_table_rewrite_oid"], "Feature": ["pg_event_trigger_table_rewrite_oid () \u2192 oid"], "Description": ["Returns the OID of the table about to be rewritten."], "Examples": [], "Category": ["Event Trigger Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-event-triggers.html"], "Title": ["pg_event_trigger_table_rewrite_reason"], "Feature": ["pg_event_trigger_table_rewrite_reason () \u2192 integer"], "Description": ["Returns a code explaining the reason(s) for rewriting. The exact meaning of the codes is release dependent."], "Examples": [], "Category": ["Event Trigger Functions"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["overlay"], "Feature": ["overlay ( string text PLACING newsubstring text FROM start integer [ FOR count integer ] ) \u2192 text"], "Description": ["Replaces the substring of string that starts at the start'th character and extends for count characters with newsubstring. If count is omitted, it defaults to the length of newsubstring."], "Examples": ["overlay('Txxxxas' placing 'hom' from 2 for 4) \u2192 Thomas"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["position"], "Feature": ["position ( substring text IN string text ) \u2192 integer"], "Description": ["Returns first starting index of the specified substring within string, or zero if it's not present."], "Examples": ["position('om' in 'Thomas') \u2192 3"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["rpad"], "Feature": ["rpad ( string text, length integer [, fill text ] ) \u2192 text"], "Description": ["Extends the string to length length by appending the characters fill (a space by default). If the string is already longer than length then it is truncated."], "Examples": ["rpad('hi', 5, 'xy') \u2192 hixyx"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["rtrim"], "Feature": ["rtrim ( string text [, characters text ] ) \u2192 text"], "Description": ["Removes the longest string containing only characters in characters (a space by default) from the end of string."], "Examples": ["rtrim('testxxzx', 'xyz') \u2192 test"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["substring"], "Feature": ["substring ( string text SIMILAR pattern text ESCAPE escape text ) \u2192 text", "substring ( string text FROM pattern text FOR escape text ) \u2192 text"], "Description": ["Extracts the first substring matching SQL regular expression; see Section\u00a09.7.2. The first form has been specified since SQL:2003; the second form was only in SQL:1999 and should be considered obsolete."], "Examples": ["substring('Thomas' similar '%#\"o_a#\"_' escape '#') \u2192 oma"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["trim"], "Feature": ["trim ( [ LEADING | TRAILING | BOTH ] [ FROM ] string text [, characters text ] ) \u2192 text"], "Description": ["This is a non-standard syntax for trim()."], "Examples": ["trim(both from 'yxTomxx', 'xyz') \u2192 Tom"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["unicode_assigned"], "Feature": ["unicode_assigned ( text ) \u2192 boolean"], "Description": ["Returns true if all characters in the string are assigned Unicode codepoints; false otherwise. This function can only be used when the server encoding is UTF8."], "Examples": [], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["degrees"], "Feature": ["degrees ( double precision ) \u2192 double precision"], "Description": ["Converts radians to degrees"], "Examples": ["degrees(0.5) \u2192 28.64788975654116"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["upper"], "Feature": ["upper ( text ) \u2192 text"], "Description": ["Converts the string to all upper case, according to the rules of the database's locale."], "Examples": ["upper('tom') \u2192 TOM"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["ascii"], "Feature": ["ascii ( text ) \u2192 integer"], "Description": ["Returns the numeric code of the first character of the argument. In UTF8 encoding, returns the Unicode code point of the character. In other multibyte encodings, the argument must be an ASCII character."], "Examples": ["ascii('x') \u2192 120"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["chr"], "Feature": ["chr ( integer ) \u2192 text"], "Description": ["Returns the character with the given code. In UTF8 encoding the argument is treated as a Unicode code point. In other multibyte encodings the argument must designate an ASCII character. chr(0) is disallowed because text data types cannot store that character."], "Examples": ["chr(65) \u2192 A"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["concat"], "Feature": ["concat ( val1 \"any\" [, val2 \"any\" [, ...] ] ) \u2192 text"], "Description": ["Concatenates the text representations of all the arguments. NULL arguments are ignored."], "Examples": ["concat('abcde', 2, NULL, 22) \u2192 abcde222"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["concat_ws"], "Feature": ["concat_ws ( sep text, val1 \"any\" [, val2 \"any\" [, ...] ] ) \u2192 text"], "Description": ["Concatenates all but the first argument, with separators. The first argument is used as the separator string, and should not be NULL. Other NULL arguments are ignored."], "Examples": ["concat_ws(',', 'abcde', 2, NULL, 22) \u2192 abcde,2,22"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["format"], "Feature": ["format ( formatstr text [, formatarg \"any\" [, ...] ] ) \u2192 text"], "Description": ["Formats arguments according to a format string; see Section\u00a09.4.1. This function is similar to the C function sprintf."], "Examples": ["format('Hello %s, %1$s', 'World') \u2192 Hello World, World"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["initcap"], "Feature": ["initcap ( text ) \u2192 text"], "Description": ["Converts the first letter of each word to upper case and the rest to lower case. Words are sequences of alphanumeric characters separated by non-alphanumeric characters."], "Examples": ["initcap('hi THOMAS') \u2192 Hi Thomas"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["left"], "Feature": ["left ( string text, n integer ) \u2192 text"], "Description": ["Returns first n characters in the string, or when n is negative, returns all but last |n| characters."], "Examples": ["left('abcde', 2) \u2192 ab"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["length"], "Feature": ["length ( text ) \u2192 integer"], "Description": ["Returns the number of characters in the string."], "Examples": ["length('jose') \u2192 4"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["md5"], "Feature": ["md5 ( text ) \u2192 text"], "Description": ["Computes the MD5 hash of the argument, with the result written in hexadecimal."], "Examples": ["md5('abc') \u2192 900150983cd24fb0\u200bd6963f7d28e17f72"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["div"], "Feature": ["div ( y numeric, x numeric ) \u2192 numeric"], "Description": ["Integer quotient of y/x (truncates towards zero)"], "Examples": ["div(9, 4) \u2192 2"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["parse_ident"], "Feature": ["parse_ident ( qualified_identifier text [, strict_mode boolean DEFAULT true ] ) \u2192 text[]"], "Description": ["Splits qualified_identifier into an array of identifiers, removing any quoting of individual identifiers. By default, extra characters after the last identifier are considered an error; but if the second parameter is false, then such extra characters are ignored. (This behavior is useful for parsing names for objects like functions.) Note that this function does not truncate over-length identifiers. If you want truncation you can cast the result to name[]."], "Examples": ["parse_ident('\"SomeSchema\".someTable') \u2192 {SomeSchema,sometable}"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["pg_client_encoding"], "Feature": ["pg_client_encoding ( ) \u2192 name"], "Description": ["Returns current client encoding name."], "Examples": ["pg_client_encoding() \u2192 UTF8"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["quote_ident"], "Feature": ["quote_ident ( text ) \u2192 text"], "Description": ["Returns the given string suitably quoted to be used as an identifier in an SQL statement string. Quotes are added only if necessary (i.e., if the string contains non-identifier characters or would be case-folded). Embedded quotes are properly doubled. See also Example\u00a041.1."], "Examples": ["quote_ident('Foo bar') \u2192 \"Foo bar\""], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["quote_literal"], "Feature": ["quote_literal ( anyelement ) \u2192 text"], "Description": ["Converts the given value to text and then quotes it as a literal. Embedded single-quotes and backslashes are properly doubled."], "Examples": ["quote_literal(42.5) \u2192 '42.5'"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["quote_nullable"], "Feature": ["quote_nullable ( anyelement ) \u2192 text"], "Description": ["Converts the given value to text and then quotes it as a literal; or, if the argument is null, returns NULL. Embedded single-quotes and backslashes are properly doubled."], "Examples": ["quote_nullable(42.5) \u2192 '42.5'"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["regexp_count"], "Feature": ["regexp_count ( string text, pattern text [, start integer [, flags text ] ] ) \u2192 integer"], "Description": ["Returns the number of times the POSIX regular expression pattern matches in the string; see Section\u00a09.7.3."], "Examples": ["regexp_count('123456789012', '\\d\\d\\d', 2) \u2192 3"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["regexp_instr"], "Feature": ["regexp_instr ( string text, pattern text [, start integer [, N integer [, endoption integer [, flags text [, subexpr integer ] ] ] ] ] ) \u2192 integer"], "Description": ["Returns the position within string where the N'th match of the POSIX regular expression pattern occurs, or zero if there is no such match; see Section\u00a09.7.3."], "Examples": ["regexp_instr('ABCDEF', 'c(.)(..)', 1, 1, 0, 'i') \u2192 3", "regexp_instr('ABCDEF', 'c(.)(..)', 1, 1, 0, 'i', 2) \u2192 5"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["regexp_like"], "Feature": ["regexp_like ( string text, pattern text [, flags text ] ) \u2192 boolean"], "Description": ["Checks whether a match of the POSIX regular expression pattern occurs within string; see Section\u00a09.7.3."], "Examples": ["regexp_like('Hello World', 'world$', 'i') \u2192 t"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["regexp_match"], "Feature": ["regexp_match ( string text, pattern text [, flags text ] ) \u2192 text[]"], "Description": ["Returns substrings within the first match of the POSIX regular expression pattern to the string; see Section\u00a09.7.3."], "Examples": ["regexp_match('foobarbequebaz', '(bar)(beque)') \u2192 {bar,beque}"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["regexp_matches"], "Feature": ["regexp_matches ( string text, pattern text [, flags text ] ) \u2192 setof text[]"], "Description": ["Returns substrings within the first match of the POSIX regular expression pattern to the string, or substrings within all such matches if the g flag is used; see Section\u00a09.7.3."], "Examples": ["regexp_matches('foobarbequebaz', 'ba.', 'g') \u2192"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["erf"], "Feature": ["erf ( double precision ) \u2192 double precision"], "Description": ["Error function"], "Examples": ["erf(1.0) \u2192 0.8427007929497149"], "Category": ["Mathematical Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["regexp_replace"], "Feature": ["regexp_replace ( string text, pattern text, replacement text, start integer, N integer [, flags text ] ) \u2192 text"], "Description": ["Replaces the substring that is the N'th match to the POSIX regular expression pattern, or all such matches if N is zero; see Section\u00a09.7.3."], "Examples": ["regexp_replace('Thomas', '.', 'X', 3, 2) \u2192 ThoXas"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["regexp_split_to_array"], "Feature": ["regexp_split_to_array ( string text, pattern text [, flags text ] ) \u2192 text[]"], "Description": ["Splits string using a POSIX regular expression as the delimiter, producing an array of results; see Section\u00a09.7.3."], "Examples": ["regexp_split_to_array('hello world', '\\s+') \u2192 {hello,world}"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["regexp_split_to_table"], "Feature": ["regexp_split_to_table ( string text, pattern text [, flags text ] ) \u2192 setof text"], "Description": ["Splits string using a POSIX regular expression as the delimiter, producing a set of results; see Section\u00a09.7.3."], "Examples": ["regexp_split_to_table('hello world', '\\s+') \u2192"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["regexp_substr"], "Feature": ["regexp_substr ( string text, pattern text [, start integer [, N integer [, flags text [, subexpr integer ] ] ] ] ) \u2192 text"], "Description": ["Returns the substring within string that matches the N'th occurrence of the POSIX regular expression pattern, or NULL if there is no such match; see Section\u00a09.7.3."], "Examples": ["regexp_substr('ABCDEF', 'c(.)(..)', 1, 1, 'i') \u2192 CDEF", "regexp_substr('ABCDEF', 'c(.)(..)', 1, 1, 'i', 2) \u2192 EF"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["repeat"], "Feature": ["repeat ( string text, number integer ) \u2192 text"], "Description": ["Repeats string the specified number of times."], "Examples": ["repeat('Pg', 4) \u2192 PgPgPgPg"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["replace"], "Feature": ["replace ( string text, from text, to text ) \u2192 text"], "Description": ["Replaces all occurrences in string of substring from with substring to."], "Examples": ["replace('abcdefabcdef', 'cd', 'XX') \u2192 abXXefabXXef"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["reverse"], "Feature": ["reverse ( text ) \u2192 text"], "Description": ["Reverses the order of the characters in the string."], "Examples": ["reverse('abcde') \u2192 edcba"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["right"], "Feature": ["right ( string text, n integer ) \u2192 text"], "Description": ["Returns last n characters in the string, or when n is negative, returns all but first |n| characters."], "Examples": ["right('abcde', 2) \u2192 de"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["split_part"], "Feature": ["split_part ( string text, delimiter text, n integer ) \u2192 text"], "Description": ["Splits string at occurrences of delimiter and returns the n'th field (counting from one), or when n is negative, returns the |n|'th-from-last field."], "Examples": ["split_part('abc~@~def~@~ghi', '~@~', 2) \u2192 def", "split_part('abc,def,ghi,jkl', ',', -2) \u2192 ghi"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-string.html"], "Title": ["starts_with"], "Feature": ["starts_with ( string text, prefix text ) \u2192 boolean"], "Description": ["Returns true if string starts with prefix."], "Examples": ["starts_with('alphabet', 'alph') \u2192 t"], "Category": ["String Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/current/functions-math.html"], "Title": ["erfc"], "Feature": ["erfc ( double precision ) \u2192 double precision"], "Description": ["Complementary error function (1 - erf(x), without loss of precision for large inputs)"], "Examples": ["erfc(1.0) \u2192 0.15729920705028513"], "Category": ["Mathematical Functions and Operators"]}
