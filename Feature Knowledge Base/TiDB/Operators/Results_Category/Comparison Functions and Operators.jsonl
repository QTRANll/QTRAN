{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html#operator_equal-to", "Title": "<=>", "Feature": ["<=>"], "Description": ["\n<=>\n", "\nNULL-safe equal. This operator performs\n            an equality comparison like the\n            = operator,\n            but returns 1 rather than\n            NULL if both operands are\n            NULL, and 0 rather\n            than NULL if one operand is\n            NULL.\n          ", "\n            The\n            <=>\n            operator is equivalent to the standard SQL IS NOT\n            DISTINCT FROM operator.\n          ", "Press CTRL+C to copy mysql> SELECT 1 <=> 1, NULL <=> NULL, 1 <=> NULL;\n        -> 1, 1, 0\nmysql> SELECT 1 = 1, NULL = NULL, 1 = NULL;\n        -> 1, NULL, NULL", "\n            For row comparisons, (a, b) <=> (x,\n            y) is equivalent to:\n          ", "Press CTRL+C to copy (a <=> x) AND (b <=> y)"], "Examples": ["mysql> SELECT 1 <=> 1, NULL <=> NULL, 1 <=> NULL;\n        -> 1, 1, 0\nmysql> SELECT 1 = 1, NULL = NULL, 1 = NULL;\n        -> 1, NULL, NULL"], "Category": ["Comparison Functions and Operators"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html#operator_greater-than", "Title": ">", "Feature": [">"], "Description": ["\n>\n", "\n            Greater than:\n          ", "Press CTRL+C to copy mysql> SELECT 2 > 2;\n        -> 0", "\n            For row comparisons, (a, b) > (x, y)\n            is equivalent to:\n          ", "Press CTRL+C to copy (a > x) OR ((a = x) AND (b > y))"], "Examples": ["mysql> SELECT 2 > 2;\n        -> 0"], "Category": ["Comparison Functions and Operators"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html#operator_greater-than-or-equal", "Title": ">=", "Feature": [">="], "Description": ["\n>=\n", "\n            Greater than or equal:\n          ", "Press CTRL+C to copy mysql> SELECT 2 >= 2;\n        -> 1", "\n            For row comparisons, (a, b) >= (x, y)\n            is equivalent to:\n          ", "Press CTRL+C to copy (a > x) OR ((a = x) AND (b >= y))"], "Examples": ["mysql> SELECT 2 >= 2;\n        -> 1"], "Category": ["Comparison Functions and Operators"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html#operator_is", "Title": "IS", "Feature": ["IS\n            boolean_value"], "Description": ["\nIS\n            boolean_value\n", "\n            Tests a value against a boolean value, where\n            boolean_value can be\n            TRUE, FALSE, or\n            UNKNOWN.\n          ", "Press CTRL+C to copy mysql> SELECT 1 IS TRUE, 0 IS FALSE, NULL IS UNKNOWN;\n        -> 1, 1, 1"], "Examples": ["mysql> SELECT 1 IS TRUE, 0 IS FALSE, NULL IS UNKNOWN;\n        -> 1, 1, 1"], "Category": ["Comparison Functions and Operators"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html#operator_is-not", "Title": "IS NOT", "Feature": ["IS NOT\n            boolean_value"], "Description": ["\nIS NOT\n            boolean_value\n", "\n            Tests a value against a boolean value, where\n            boolean_value can be\n            TRUE, FALSE, or\n            UNKNOWN.\n          ", "Press CTRL+C to copy mysql> SELECT 1 IS NOT UNKNOWN, 0 IS NOT UNKNOWN, NULL IS NOT UNKNOWN;\n        -> 1, 1, 0"], "Examples": ["mysql> SELECT 1 IS NOT UNKNOWN, 0 IS NOT UNKNOWN, NULL IS NOT UNKNOWN;\n        -> 1, 1, 0"], "Category": ["Comparison Functions and Operators"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html#operator_is-not-null", "Title": "IS NOT NULL", "Feature": ["IS NOT NULL"], "Description": ["\nIS NOT NULL\n", "\n            Tests whether a value is not NULL.\n          ", "Press CTRL+C to copy mysql> SELECT 1 IS NOT NULL, 0 IS NOT NULL, NULL IS NOT NULL;\n        -> 1, 1, 0"], "Examples": ["mysql> SELECT 1 IS NOT NULL, 0 IS NOT NULL, NULL IS NOT NULL;\n        -> 1, 1, 0"], "Category": ["Comparison Functions and Operators"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html#operator_is-null", "Title": "IS NULL", "Feature": ["IS NULL"], "Description": ["\nIS NULL\n", "\n            Tests whether a value is NULL.\n          ", "Press CTRL+C to copy mysql> SELECT 1 IS NULL, 0 IS NULL, NULL IS NULL;\n        -> 0, 0, 1", "\n            To work well with ODBC programs, MySQL supports the\n            following extra features when using IS\n            NULL:\n", "\n\n                If sql_auto_is_null\n                variable is set to 1, then after a statement that\n                successfully inserts an automatically generated\n                AUTO_INCREMENT value, you can find\n                that value by issuing a statement of the following form:\n              Press CTRL+C to copy SELECT * FROM tbl_name WHERE auto_col IS NULL\n                If the statement returns a row, the value returned is\n                the same as if you invoked the\n                LAST_INSERT_ID()\n                function. For details, including the return value after\n                a multiple-row insert, see\n                Section\u00a014.15, \u201cInformation Functions\u201d. If no\n                AUTO_INCREMENT value was successfully\n                inserted, the SELECT\n                statement returns no row.\n              \n                The behavior of retrieving an\n                AUTO_INCREMENT value by using an\n                IS NULL comparison can be\n                disabled by setting\n                sql_auto_is_null = 0.\n                See Section\u00a07.1.8, \u201cServer System Variables\u201d.\n              \n                The default value of\n                sql_auto_is_null is 0.\n              \n                For DATE and\n                DATETIME columns that are\n                declared as NOT NULL, you can find\n                the special date '0000-00-00' by\n                using a statement like this:\n              Press CTRL+C to copy SELECT * FROM tbl_name WHERE date_column IS NULL\n                This is needed to get some ODBC applications to work\n                because ODBC does not support a\n                '0000-00-00' date value.\n              \n                See\n                Obtaining Auto-Increment Values,\n                and the description for the\n                FLAG_AUTO_IS_NULL option at\n                Connector/ODBC Connection Parameters.\n\n"], "Examples": ["mysql> SELECT 1 IS NULL, 0 IS NULL, NULL IS NULL;\n        -> 0, 0, 1"], "Category": ["Comparison Functions and Operators"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html#operator_less-than", "Title": "<", "Feature": ["<"], "Description": ["\n<\n", "\n            Less than:\n          ", "Press CTRL+C to copy mysql> SELECT 2 < 2;\n        -> 0", "\n            For row comparisons, (a, b) < (x, y)\n            is equivalent to:\n          ", "Press CTRL+C to copy (a < x) OR ((a = x) AND (b < y))"], "Examples": ["mysql> SELECT 2 < 2;\n        -> 0"], "Category": ["Comparison Functions and Operators"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html#operator_less-than-or-equal", "Title": "<=", "Feature": ["<="], "Description": ["\n<=\n", "\n            Less than or equal:\n          ", "Press CTRL+C to copy mysql> SELECT 0.1 <= 2;\n        -> 1", "\n            For row comparisons, (a, b) <= (x, y)\n            is equivalent to:\n          ", "Press CTRL+C to copy (a < x) OR ((a = x) AND (b <= y))"], "Examples": ["mysql> SELECT 0.1 <= 2;\n        -> 1"], "Category": ["Comparison Functions and Operators"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-comparison-functions.html#operator_like", "Title": "LIKE", "Feature": ["expr\n            LIKE pat [ESCAPE\n            'escape_char']"], "Description": ["\nexpr\n            LIKE pat [ESCAPE\n            'escape_char']\n", "\n            Pattern matching using an SQL pattern. Returns\n            1 (TRUE) or\n            0 (FALSE). If either\n            expr or\n            pat is NULL,\n            the result is NULL.\n          ", "\n            The pattern need not be a literal string. For example, it\n            can be specified as a string expression or table column. In\n            the latter case, the column must be defined as one of the\n            MySQL string types (see Section\u00a013.3, \u201cString Data Types\u201d).\n          ", "\n            Per the SQL standard, LIKE\n            performs matching on a per-character basis, thus it can\n            produce results different from the\n            = comparison\n            operator:\n          ", "Press CTRL+C to copy mysql> SELECT '\u00e4' LIKE 'ae' COLLATE latin1_german2_ci;\n+-----------------------------------------+\n| '\u00e4' LIKE 'ae' COLLATE latin1_german2_ci |\n+-----------------------------------------+\n|                                       0 |\n+-----------------------------------------+\nmysql> SELECT '\u00e4' = 'ae' COLLATE latin1_german2_ci;\n+--------------------------------------+\n| '\u00e4' = 'ae' COLLATE latin1_german2_ci |\n+--------------------------------------+\n|                                    1 |\n+--------------------------------------+", "\n            In particular, trailing spaces are always significant. This\n            differs from comparisons performed with the\n            = operator,\n            for which the significance of trailing spaces in nonbinary\n            strings (CHAR,\n            VARCHAR, and TEXT\n            values) depends on the pad attribute of the collation used\n            for the comparison. For more information, see\n            Trailing Space Handling in Comparisons.\n          ", "\n            With LIKE you can use the\n            following two wildcard characters in the pattern:\n", "\n\n% matches any number of characters,\n                even zero characters.\n              \n_ matches exactly one character.\n\n", "Press CTRL+C to copy mysql> SELECT 'David!' LIKE 'David_';\n        -> 1\nmysql> SELECT 'David!' LIKE '%D%v%';\n        -> 1", "\n            To test for literal instances of a wildcard character,\n            precede it by the escape character. If you do not specify\n            the ESCAPE character,\n            \\ is assumed, unless the\n            NO_BACKSLASH_ESCAPES SQL\n            mode is enabled. In that case, no escape character is used.\n", "\n\n\\% matches one %\n                character.\n              \n\\_ matches one _\n                character.\n\n", "Press CTRL+C to copy mysql> SELECT 'David!' LIKE 'David\\_';\n        -> 0\nmysql> SELECT 'David_' LIKE 'David\\_';\n        -> 1", "\n            To specify a different escape character, use the\n            ESCAPE clause:\n          ", "Press CTRL+C to copy mysql> SELECT 'David_' LIKE 'David|_' ESCAPE '|';\n        -> 1", "\n            The escape sequence should be one character long to specify\n            the escape character, or empty to specify that no escape\n            character is used. The expression must evaluate as a\n            constant at execution time. If the\n            NO_BACKSLASH_ESCAPES SQL\n            mode is enabled, the sequence cannot be empty.\n          ", "\n            The following statements illustrate that string comparisons\n            are not case-sensitive unless one of the operands is\n            case-sensitive (uses a case-sensitive collation or is a\n            binary string):\n          ", "Press CTRL+C to copy mysql> SELECT 'abc' LIKE 'ABC';\n        -> 1\nmysql> SELECT 'abc' LIKE _utf8mb4 'ABC' COLLATE utf8mb4_0900_as_cs;\n        -> 0\nmysql> SELECT 'abc' LIKE _utf8mb4 'ABC' COLLATE utf8mb4_bin;\n        -> 0\nmysql> SELECT 'abc' LIKE BINARY 'ABC';\n        -> 0", "\n            As an extension to standard SQL, MySQL permits\n            LIKE on numeric expressions.\n          ", "Press CTRL+C to copy mysql> SELECT 10 LIKE '1%';\n        -> 1", "\n            MySQL attempts in such cases to perform implicit conversion\n            of the expression to a string. See\n            Section\u00a014.3, \u201cType Conversion in Expression Evaluation\u201d.\n", "\n\nNote\n\n\n              MySQL uses C escape syntax in strings (for example,\n              \\n to represent the newline character).\n              If you want a LIKE string to\n              contain a literal \\, you must double\n              it. (Unless the\n              NO_BACKSLASH_ESCAPES SQL\n              mode is enabled, in which case no escape character is\n              used.) For example, to search for \\n,\n              specify it as \\\\n. To search for\n              \\, specify it as\n              \\\\\\\\; this is because the backslashes\n              are stripped once by the parser and again when the pattern\n              match is made, leaving a single backslash to be matched\n              against.\n            \n              Exception: At the end of the pattern string, backslash can\n              be specified as \\\\. At the end of the\n              string, backslash stands for itself because there is\n              nothing following to escape. Suppose that a table contains\n              the following values:\n            Press CTRL+C to copy mysql> SELECT filename FROM t1;\n+--------------+\n| filename     |\n+--------------+\n| C:           |\n| C:\\          |\n| C:\\Programs  |\n| C:\\Programs\\ |\n+--------------+\n              To test for values that end with backslash, you can match\n              the values using either of the following patterns:\n            Press CTRL+C to copy mysql> SELECT filename, filename LIKE '%\\\\' FROM t1;\n+--------------+---------------------+\n| filename     | filename LIKE '%\\\\' |\n+--------------+---------------------+\n| C:           |                   0 |\n| C:\\          |                   1 |\n| C:\\Programs  |                   0 |\n| C:\\Programs\\ |                   1 |\n+--------------+---------------------+\n\nmysql> SELECT filename, filename LIKE '%\\\\\\\\' FROM t1;\n+--------------+-----------------------+\n| filename     | filename LIKE '%\\\\\\\\' |\n+--------------+-----------------------+\n| C:           |                     0 |\n| C:\\          |                     1 |\n| C:\\Programs  |                     0 |\n| C:\\Programs\\ |                     1 |\n+--------------+-----------------------+\n"], "Examples": ["mysql> SELECT '\u00e4' LIKE 'ae' COLLATE latin1_german2_ci;\n+-----------------------------------------+\n| '\u00e4' LIKE 'ae' COLLATE latin1_german2_ci |\n+-----------------------------------------+\n|                                       0 |\n+-----------------------------------------+\nmysql> SELECT '\u00e4' = 'ae' COLLATE latin1_german2_ci;\n+--------------------------------------+\n| '\u00e4' = 'ae' COLLATE latin1_german2_ci |\n+--------------------------------------+\n|                                    1 |\n+--------------------------------------+", "mysql> SELECT 'David!' LIKE 'David_';\n        -> 1\nmysql> SELECT 'David!' LIKE '%D%v%';\n        -> 1", "mysql> SELECT 'David!' LIKE 'David\\_';\n        -> 0\nmysql> SELECT 'David_' LIKE 'David\\_';\n        -> 1", "mysql> SELECT 'David_' LIKE 'David|_' ESCAPE '|';\n        -> 1", "mysql> SELECT 'abc' LIKE 'ABC';\n        -> 1\nmysql> SELECT 'abc' LIKE _utf8mb4 'ABC' COLLATE utf8mb4_0900_as_cs;\n        -> 0\nmysql> SELECT 'abc' LIKE _utf8mb4 'ABC' COLLATE utf8mb4_bin;\n        -> 0\nmysql> SELECT 'abc' LIKE BINARY 'ABC';\n        -> 0", "mysql> SELECT 10 LIKE '1%';\n        -> 1", "mysql> SELECT filename FROM t1;\n+--------------+\n| filename     |\n+--------------+\n| C:           |\n| C:\\          |\n| C:\\Programs  |\n| C:\\Programs\\ |\n+--------------+", "mysql> SELECT filename, filename LIKE '%\\\\' FROM t1;\n+--------------+---------------------+\n| filename     | filename LIKE '%\\\\' |\n+--------------+---------------------+\n| C:           |                   0 |\n| C:\\          |                   1 |\n| C:\\Programs  |                   0 |\n| C:\\Programs\\ |                   1 |\n+--------------+---------------------+\n\nmysql> SELECT filename, filename LIKE '%\\\\\\\\' FROM t1;\n+--------------+-----------------------+\n| filename     | filename LIKE '%\\\\\\\\' |\n+--------------+-----------------------+\n| C:           |                     0 |\n| C:\\          |                     1 |\n| C:\\Programs  |                     0 |\n| C:\\Programs\\ |                     1 |\n+--------------+-----------------------+"], "Category": ["Comparison Functions and Operators", "String Functions and Operators"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html#operator_not-between", "Title": "NOT BETWEEN ... AND ...", "Feature": ["expr\n            NOT BETWEEN min AND\n            max"], "Description": ["\nexpr\n            NOT BETWEEN min AND\n            max\n", "\n            This is the same as NOT\n            (expr BETWEEN\n            min AND\n            max).\n          "], "Examples": [], "Category": ["Comparison Functions and Operators"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html#operator_not-equal", "Title": "<>, !=", "Feature": ["<>", "!="], "Description": ["\n<>,\n            !=\n", "\n            Not equal:\n          ", "Press CTRL+C to copy mysql> SELECT '.01' <> '0.01';\n        -> 1\nmysql> SELECT .01 <> '0.01';\n        -> 0\nmysql> SELECT 'zapp' <> 'zappp';\n        -> 1", "\n            For row comparisons, (a, b) <> (x,\n            y) and (a, b) != (x, y) are\n            equivalent to:\n          ", "Press CTRL+C to copy (a <> x) OR (b <> y)"], "Examples": ["mysql> SELECT '.01' <> '0.01';\n        -> 1\nmysql> SELECT .01 <> '0.01';\n        -> 0\nmysql> SELECT 'zapp' <> 'zappp';\n        -> 1"], "Category": ["Comparison Functions and Operators"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-comparison-functions.html#operator_not-like", "Title": "NOT LIKE", "Feature": ["expr\n            NOT LIKE pat [ESCAPE\n            'escape_char']"], "Description": ["\nexpr\n            NOT LIKE pat [ESCAPE\n            'escape_char']\n", "\n            This is the same as NOT\n            (expr LIKE\n            pat [ESCAPE\n            'escape_char']).\n", "\n\nNote\n\n\n              Aggregate queries involving NOT\n              LIKE comparisons with columns containing\n              NULL may yield unexpected results. For\n              example, consider the following table and data:\n            Press CTRL+C to copy CREATE TABLE foo (bar VARCHAR(10));\n\nINSERT INTO foo VALUES (NULL), (NULL);\n              The query SELECT COUNT(*) FROM foo WHERE bar LIKE\n              '%baz%'; returns 0. You might\n              assume that SELECT COUNT(*) FROM foo WHERE bar\n              NOT LIKE '%baz%'; would return\n              2. However, this is not the case: The\n              second query returns 0. This is because\n              NULL NOT LIKE\n              expr always returns\n              NULL, regardless of the value of\n              expr. The same is true for\n              aggregate queries involving NULL and\n              comparisons using\n              NOT\n              RLIKE or NOT\n              REGEXP. In such cases, you must test explicitly\n              for NOT NULL using\n              OR (and not\n              AND), as shown here:\n            Press CTRL+C to copy SELECT COUNT(*) FROM foo WHERE bar NOT LIKE '%baz%' OR bar IS NULL;\n"], "Examples": ["CREATE TABLE foo (bar VARCHAR(10));\n\nINSERT INTO foo VALUES (NULL), (NULL);", "SELECT COUNT(*) FROM foo WHERE bar NOT LIKE '%baz%' OR bar IS NULL;"], "Category": ["Comparison Functions and Operators", "String Functions and Operators"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html#operator_between", "Title": "BETWEEN ... AND ...", "Feature": ["expr\n            BETWEEN min AND\n            max"], "Description": ["\nexpr\n            BETWEEN min AND\n            max\n", "\n            If expr is greater than or equal\n            to min and\n            expr is less than or equal to\n            max,\n            BETWEEN returns\n            1, otherwise it returns\n            0. This is equivalent to the expression\n            (min <=\n            expr AND\n            expr <=\n            max) if all the\n            arguments are of the same type. Otherwise type conversion\n            takes place according to the rules described in\n            Section\u00a014.3, \u201cType Conversion in Expression Evaluation\u201d, but applied to all the\n            three arguments.\n          ", "Press CTRL+C to copy mysql> SELECT 2 BETWEEN 1 AND 3, 2 BETWEEN 3 and 1;\n        -> 1, 0\nmysql> SELECT 1 BETWEEN 2 AND 3;\n        -> 0\nmysql> SELECT 'b' BETWEEN 'a' AND 'c';\n        -> 1\nmysql> SELECT 2 BETWEEN 2 AND '3';\n        -> 1\nmysql> SELECT 2 BETWEEN 2 AND 'x-3';\n        -> 0", "\n            For best results when using\n            BETWEEN with date or time\n            values, use CAST() to\n            explicitly convert the values to the desired data type.\n            Examples: If you compare a\n            DATETIME to two\n            DATE values, convert the\n            DATE values to\n            DATETIME values. If you use a\n            string constant such as '2001-1-1' in a\n            comparison to a DATE, cast\n            the string to a DATE.\n          "], "Examples": ["mysql> SELECT 2 BETWEEN 1 AND 3, 2 BETWEEN 3 and 1;\n        -> 1, 0\nmysql> SELECT 1 BETWEEN 2 AND 3;\n        -> 0\nmysql> SELECT 'b' BETWEEN 'a' AND 'c';\n        -> 1\nmysql> SELECT 2 BETWEEN 2 AND '3';\n        -> 1\nmysql> SELECT 2 BETWEEN 2 AND 'x-3';\n        -> 0"], "Category": ["Comparison Functions and Operators"]}
