{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/bit-functions.html#operator_bitwise-and"], "Title": ["&"], "Feature": ["&"], "Description": ["Bitwise AND", "\n&\n", "\n          Bitwise AND.\n        ", "\n          The result type depends on whether the arguments are evaluated\n          as binary strings or numbers:\n", "\n\n              Binary-string evaluation occurs when the arguments have a\n              binary string type, and at least one of them is not a\n              hexadecimal literal, bit literal, or\n              NULL literal. Numeric evaluation occurs\n              otherwise, with argument conversion to unsigned 64-bit\n              integers as necessary.\n            \n              Binary-string evaluation produces a binary string of the\n              same length as the arguments. If the arguments have\n              unequal lengths, an\n              ER_INVALID_BITWISE_OPERANDS_SIZE\n              error occurs. Numeric evaluation produces an unsigned\n              64-bit integer.\n\n", "\n          For more information, see the introductory discussion in this\n          section.\n        ", "Press CTRL+C to copy mysql> SELECT 29 & 15;\n        -> 13\nmysql> SELECT HEX(_binary X'FF' & b'11110000');\n        -> 'F0'", "\n          If bitwise AND is invoked from within the\n          mysql client, binary string results display\n          using hexadecimal notation, depending on the value of the\n          --binary-as-hex. For more\n          information about that option, see Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n        "], "Examples": ["mysql> SELECT 29 & 15;\n        -> 13\nmysql> SELECT HEX(_binary X'FF' & b'11110000');\n        -> 'F0'"], "Category": ["Bit Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/bit-functions.html#operator_bitwise-invert"], "Title": ["~"], "Feature": ["~"], "Description": ["Bitwise inversion", "\n~\n", "\n          Invert all bits.\n        ", "\n          The result type depends on whether the bit argument is\n          evaluated as a binary string or number:\n", "\n\n              Binary-string evaluation occurs when the bit argument has\n              a binary string type, and is not a hexadecimal literal,\n              bit literal, or NULL literal. Numeric\n              evaluation occurs otherwise, with argument conversion to\n              an unsigned 64-bit integer as necessary.\n            \n              Binary-string evaluation produces a binary string of the\n              same length as the bit argument. Numeric evaluation\n              produces an unsigned 64-bit integer.\n\n", "\n          For more information, see the introductory discussion in this\n          section.\n        ", "Press CTRL+C to copy mysql> SELECT 5 & ~1;\n        -> 4\nmysql> SELECT HEX(~X'0000FFFF1111EEEE');\n        -> 'FFFF0000EEEE1111'", "\n          If bitwise inversion is invoked from within the\n          mysql client, binary string results display\n          using hexadecimal notation, depending on the value of the\n          --binary-as-hex. For more\n          information about that option, see Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n        "], "Examples": ["mysql> SELECT 5 & ~1;\n        -> 4\nmysql> SELECT HEX(~X'0000FFFF1111EEEE');\n        -> 'FFFF0000EEEE1111'"], "Category": ["Bit Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/bit-functions.html#operator_bitwise-or"], "Title": ["|"], "Feature": ["|"], "Description": ["Bitwise OR", "\n|\n", "\n          Bitwise OR.\n        ", "\n          The result type depends on whether the arguments are evaluated\n          as binary strings or numbers:\n", "\n\n              Binary-string evaluation occurs when the arguments have a\n              binary string type, and at least one of them is not a\n              hexadecimal literal, bit literal, or\n              NULL literal. Numeric evaluation occurs\n              otherwise, with argument conversion to unsigned 64-bit\n              integers as necessary.\n            \n              Binary-string evaluation produces a binary string of the\n              same length as the arguments. If the arguments have\n              unequal lengths, an\n              ER_INVALID_BITWISE_OPERANDS_SIZE\n              error occurs. Numeric evaluation produces an unsigned\n              64-bit integer.\n\n", "\n          For more information, see the introductory discussion in this\n          section.\n        ", "Press CTRL+C to copy mysql> SELECT 29 | 15;\n        -> 31\nmysql> SELECT _binary X'40404040' | X'01020304';\n        -> 'ABCD'", "\n          If bitwise OR is invoked from within the\n          mysql client, binary string results display\n          using hexadecimal notation, depending on the value of the\n          --binary-as-hex. For more\n          information about that option, see Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n        "], "Examples": ["mysql> SELECT 29 | 15;\n        -> 31\nmysql> SELECT _binary X'40404040' | X'01020304';\n        -> 'ABCD'"], "Category": ["Bit Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/bit-functions.html#operator_bitwise-xor"], "Title": ["^"], "Feature": ["^"], "Description": ["Bitwise XOR", "\n^\n", "\n          Bitwise XOR.\n        ", "\n          The result type depends on whether the arguments are evaluated\n          as binary strings or numbers:\n", "\n\n              Binary-string evaluation occurs when the arguments have a\n              binary string type, and at least one of them is not a\n              hexadecimal literal, bit literal, or\n              NULL literal. Numeric evaluation occurs\n              otherwise, with argument conversion to unsigned 64-bit\n              integers as necessary.\n            \n              Binary-string evaluation produces a binary string of the\n              same length as the arguments. If the arguments have\n              unequal lengths, an\n              ER_INVALID_BITWISE_OPERANDS_SIZE\n              error occurs. Numeric evaluation produces an unsigned\n              64-bit integer.\n\n", "\n          For more information, see the introductory discussion in this\n          section.\n        ", "Press CTRL+C to copy mysql> SELECT 1 ^ 1;\n        -> 0\nmysql> SELECT 1 ^ 0;\n        -> 1\nmysql> SELECT 11 ^ 3;\n        -> 8\nmysql> SELECT HEX(_binary X'FEDC' ^ X'1111');\n        -> 'EFCD'", "\n          If bitwise XOR is invoked from within the\n          mysql client, binary string results display\n          using hexadecimal notation, depending on the value of the\n          --binary-as-hex. For more\n          information about that option, see Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n        "], "Examples": ["mysql> SELECT 1 ^ 1;\n        -> 0\nmysql> SELECT 1 ^ 0;\n        -> 1\nmysql> SELECT 11 ^ 3;\n        -> 8\nmysql> SELECT HEX(_binary X'FEDC' ^ X'1111');\n        -> 'EFCD'"], "Category": ["Bit Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/bit-functions.html#operator_left-shift"], "Title": ["<<"], "Feature": ["<<"], "Description": ["Left shift", "\n<<\n", "\n          Shifts a longlong (BIGINT)\n          number or binary string to the left.\n        ", "\n          The result type depends on whether the bit argument is\n          evaluated as a binary string or number:\n", "\n\n              Binary-string evaluation occurs when the bit argument has\n              a binary string type, and is not a hexadecimal literal,\n              bit literal, or NULL literal. Numeric\n              evaluation occurs otherwise, with argument conversion to\n              an unsigned 64-bit integer as necessary.\n            \n              Binary-string evaluation produces a binary string of the\n              same length as the bit argument. Numeric evaluation\n              produces an unsigned 64-bit integer.\n\n", "\n          Bits shifted off the end of the value are lost without\n          warning, regardless of the argument type. In particular, if\n          the shift count is greater or equal to the number of bits in\n          the bit argument, all bits in the result are 0.\n        ", "\n          For more information, see the introductory discussion in this\n          section.\n        ", "Press CTRL+C to copy mysql> SELECT 1 << 2;\n        -> 4\nmysql> SELECT HEX(_binary X'00FF00FF00FF' << 8);\n        -> 'FF00FF00FF00'", "\n          If a bit shift is invoked from within the\n          mysql client, binary string results display\n          using hexadecimal notation, depending on the value of the\n          --binary-as-hex. For more\n          information about that option, see Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n        "], "Examples": ["mysql> SELECT 1 << 2;\n        -> 4\nmysql> SELECT HEX(_binary X'00FF00FF00FF' << 8);\n        -> 'FF00FF00FF00'"], "Category": ["Bit Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/bit-functions.html#operator_right-shift"], "Title": [">>"], "Feature": [">>"], "Description": ["Right shift", "\n>>\n", "\n          Shifts a longlong (BIGINT)\n          number or binary string to the right.\n        ", "\n          The result type depends on whether the bit argument is\n          evaluated as a binary string or number:\n", "\n\n              Binary-string evaluation occurs when the bit argument has\n              a binary string type, and is not a hexadecimal literal,\n              bit literal, or NULL literal. Numeric\n              evaluation occurs otherwise, with argument conversion to\n              an unsigned 64-bit integer as necessary.\n            \n              Binary-string evaluation produces a binary string of the\n              same length as the bit argument. Numeric evaluation\n              produces an unsigned 64-bit integer.\n\n", "\n          Bits shifted off the end of the value are lost without\n          warning, regardless of the argument type. In particular, if\n          the shift count is greater or equal to the number of bits in\n          the bit argument, all bits in the result are 0.\n        ", "\n          For more information, see the introductory discussion in this\n          section.\n        ", "Press CTRL+C to copy mysql> SELECT 4 >> 2;\n        -> 1\nmysql> SELECT HEX(_binary X'00FF00FF00FF' >> 8);\n        -> '0000FF00FF00'", "\n          If a bit shift is invoked from within the\n          mysql client, binary string results display\n          using hexadecimal notation, depending on the value of the\n          --binary-as-hex. For more\n          information about that option, see Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n        "], "Examples": ["mysql> SELECT 4 >> 2;\n        -> 1\nmysql> SELECT HEX(_binary X'00FF00FF00FF' >> 8);\n        -> '0000FF00FF00'"], "Category": ["Bit Operators"]}
