{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#operator_between"], "Title": ["BETWEEN ... AND ..."], "Feature": ["expr\n            BETWEEN min AND\n            max"], "Description": ["Whether a value is within a range of values", "\nexpr\n            BETWEEN min AND\n            max\n", "\n            If expr is greater than or equal\n            to min and\n            expr is less than or equal to\n            max,\n            BETWEEN returns\n            1, otherwise it returns\n            0. This is equivalent to the expression\n            (min <=\n            expr AND\n            expr <=\n            max) if all the\n            arguments are of the same type. Otherwise type conversion\n            takes place according to the rules described in\n            Section\u00a014.3, \u201cType Conversion in Expression Evaluation\u201d, but applied to all the\n            three arguments.\n          ", "Press CTRL+C to copy mysql> SELECT 2 BETWEEN 1 AND 3, 2 BETWEEN 3 and 1;\n        -> 1, 0\nmysql> SELECT 1 BETWEEN 2 AND 3;\n        -> 0\nmysql> SELECT 'b' BETWEEN 'a' AND 'c';\n        -> 1\nmysql> SELECT 2 BETWEEN 2 AND '3';\n        -> 1\nmysql> SELECT 2 BETWEEN 2 AND 'x-3';\n        -> 0", "\n            For best results when using\n            BETWEEN with date or time\n            values, use CAST() to\n            explicitly convert the values to the desired data type.\n            Examples: If you compare a\n            DATETIME to two\n            DATE values, convert the\n            DATE values to\n            DATETIME values. If you use a\n            string constant such as '2001-1-1' in a\n            comparison to a DATE, cast\n            the string to a DATE.\n          "], "Examples": ["mysql> SELECT 2 BETWEEN 1 AND 3, 2 BETWEEN 3 and 1;\n        -> 1, 0\nmysql> SELECT 1 BETWEEN 2 AND 3;\n        -> 0\nmysql> SELECT 'b' BETWEEN 'a' AND 'c';\n        -> 1\nmysql> SELECT 2 BETWEEN 2 AND '3';\n        -> 1\nmysql> SELECT 2 BETWEEN 2 AND 'x-3';\n        -> 0"], "Category": ["Comparison Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#operator_equal-to"], "Title": ["<=>"], "Feature": ["<=>"], "Description": ["NULL-safe equal to operator", "\n<=>\n", "\nNULL-safe equal. This operator performs\n            an equality comparison like the\n            = operator,\n            but returns 1 rather than\n            NULL if both operands are\n            NULL, and 0 rather\n            than NULL if one operand is\n            NULL.\n          ", "\n            The\n            <=>\n            operator is equivalent to the standard SQL IS NOT\n            DISTINCT FROM operator.\n          ", "Press CTRL+C to copy mysql> SELECT 1 <=> 1, NULL <=> NULL, 1 <=> NULL;\n        -> 1, 1, 0\nmysql> SELECT 1 = 1, NULL = NULL, 1 = NULL;\n        -> 1, NULL, NULL", "\n            For row comparisons, (a, b) <=> (x,\n            y) is equivalent to:\n          ", "Press CTRL+C to copy (a <=> x) AND (b <=> y)"], "Examples": ["mysql> SELECT 1 <=> 1, NULL <=> NULL, 1 <=> NULL;\n        -> 1, 1, 0\nmysql> SELECT 1 = 1, NULL = NULL, 1 = NULL;\n        -> 1, NULL, NULL"], "Category": ["Comparison Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#operator_greater-than"], "Title": [">"], "Feature": [">"], "Description": ["Greater than operator", "\n>\n", "\n            Greater than:\n          ", "Press CTRL+C to copy mysql> SELECT 2 > 2;\n        -> 0", "\n            For row comparisons, (a, b) > (x, y)\n            is equivalent to:\n          ", "Press CTRL+C to copy (a > x) OR ((a = x) AND (b > y))"], "Examples": ["mysql> SELECT 2 > 2;\n        -> 0"], "Category": ["Comparison Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#operator_greater-than-or-equal"], "Title": [">="], "Feature": [">="], "Description": ["Greater than or equal operator", "\n>=\n", "\n            Greater than or equal:\n          ", "Press CTRL+C to copy mysql> SELECT 2 >= 2;\n        -> 1", "\n            For row comparisons, (a, b) >= (x, y)\n            is equivalent to:\n          ", "Press CTRL+C to copy (a > x) OR ((a = x) AND (b >= y))"], "Examples": ["mysql> SELECT 2 >= 2;\n        -> 1"], "Category": ["Comparison Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#operator_is"], "Title": ["IS"], "Feature": ["IS\n            boolean_value"], "Description": ["Test a value against a boolean", "\nIS\n            boolean_value\n", "\n            Tests a value against a boolean value, where\n            boolean_value can be\n            TRUE, FALSE, or\n            UNKNOWN.\n          ", "Press CTRL+C to copy mysql> SELECT 1 IS TRUE, 0 IS FALSE, NULL IS UNKNOWN;\n        -> 1, 1, 1"], "Examples": ["mysql> SELECT 1 IS TRUE, 0 IS FALSE, NULL IS UNKNOWN;\n        -> 1, 1, 1"], "Category": ["Comparison Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#operator_is-not"], "Title": ["IS NOT"], "Feature": ["IS NOT\n            boolean_value"], "Description": ["Test a value against a boolean", "\nIS NOT\n            boolean_value\n", "\n            Tests a value against a boolean value, where\n            boolean_value can be\n            TRUE, FALSE, or\n            UNKNOWN.\n          ", "Press CTRL+C to copy mysql> SELECT 1 IS NOT UNKNOWN, 0 IS NOT UNKNOWN, NULL IS NOT UNKNOWN;\n        -> 1, 1, 0"], "Examples": ["mysql> SELECT 1 IS NOT UNKNOWN, 0 IS NOT UNKNOWN, NULL IS NOT UNKNOWN;\n        -> 1, 1, 0"], "Category": ["Comparison Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#operator_is-not-null"], "Title": ["IS NOT NULL"], "Feature": ["IS NOT NULL"], "Description": ["NOT NULL value test", "\nIS NOT NULL\n", "\n            Tests whether a value is not NULL.\n          ", "Press CTRL+C to copy mysql> SELECT 1 IS NOT NULL, 0 IS NOT NULL, NULL IS NOT NULL;\n        -> 1, 1, 0"], "Examples": ["mysql> SELECT 1 IS NOT NULL, 0 IS NOT NULL, NULL IS NOT NULL;\n        -> 1, 1, 0"], "Category": ["Comparison Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#operator_is-null"], "Title": ["IS NULL"], "Feature": ["IS NULL"], "Description": ["NULL value test", "\nIS NULL\n", "\n            Tests whether a value is NULL.\n          ", "Press CTRL+C to copy mysql> SELECT 1 IS NULL, 0 IS NULL, NULL IS NULL;\n        -> 0, 0, 1", "\n            To work well with ODBC programs, MySQL supports the\n            following extra features when using IS\n            NULL:\n", "\n\n                If sql_auto_is_null\n                variable is set to 1, then after a statement that\n                successfully inserts an automatically generated\n                AUTO_INCREMENT value, you can find\n                that value by issuing a statement of the following form:\n              Press CTRL+C to copy SELECT * FROM tbl_name WHERE auto_col IS NULL\n                If the statement returns a row, the value returned is\n                the same as if you invoked the\n                LAST_INSERT_ID()\n                function. For details, including the return value after\n                a multiple-row insert, see\n                Section\u00a014.15, \u201cInformation Functions\u201d. If no\n                AUTO_INCREMENT value was successfully\n                inserted, the SELECT\n                statement returns no row.\n              \n                The behavior of retrieving an\n                AUTO_INCREMENT value by using an\n                IS NULL comparison can be\n                disabled by setting\n                sql_auto_is_null = 0.\n                See Section\u00a07.1.8, \u201cServer System Variables\u201d.\n              \n                The default value of\n                sql_auto_is_null is 0.\n              \n                For DATE and\n                DATETIME columns that are\n                declared as NOT NULL, you can find\n                the special date '0000-00-00' by\n                using a statement like this:\n              Press CTRL+C to copy SELECT * FROM tbl_name WHERE date_column IS NULL\n                This is needed to get some ODBC applications to work\n                because ODBC does not support a\n                '0000-00-00' date value.\n              \n                See\n                Obtaining Auto-Increment Values,\n                and the description for the\n                FLAG_AUTO_IS_NULL option at\n                Connector/ODBC Connection Parameters.\n\n"], "Examples": ["mysql> SELECT 1 IS NULL, 0 IS NULL, NULL IS NULL;\n        -> 0, 0, 1"], "Category": ["Comparison Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#operator_less-than"], "Title": ["<"], "Feature": ["<"], "Description": ["Less than operator", "\n<\n", "\n            Less than:\n          ", "Press CTRL+C to copy mysql> SELECT 2 < 2;\n        -> 0", "\n            For row comparisons, (a, b) < (x, y)\n            is equivalent to:\n          ", "Press CTRL+C to copy (a < x) OR ((a = x) AND (b < y))"], "Examples": ["mysql> SELECT 2 < 2;\n        -> 0"], "Category": ["Comparison Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#operator_less-than-or-equal"], "Title": ["<="], "Feature": ["<="], "Description": ["Less than or equal operator", "\n<=\n", "\n            Less than or equal:\n          ", "Press CTRL+C to copy mysql> SELECT 0.1 <= 2;\n        -> 1", "\n            For row comparisons, (a, b) <= (x, y)\n            is equivalent to:\n          ", "Press CTRL+C to copy (a < x) OR ((a = x) AND (b <= y))"], "Examples": ["mysql> SELECT 0.1 <= 2;\n        -> 1"], "Category": ["Comparison Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#operator_not-between"], "Title": ["NOT BETWEEN ... AND ..."], "Feature": ["expr\n            NOT BETWEEN min AND\n            max"], "Description": ["Whether a value is not within a range of values", "\nexpr\n            NOT BETWEEN min AND\n            max\n", "\n            This is the same as NOT\n            (expr BETWEEN\n            min AND\n            max).\n          "], "Examples": [], "Category": ["Comparison Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#operator_not-equal"], "Title": ["<>, !="], "Feature": ["<>"], "Description": ["Not equal operator", "\n<>,\n            !=\n", "\n            Not equal:\n          ", "Press CTRL+C to copy mysql> SELECT '.01' <> '0.01';\n        -> 1\nmysql> SELECT .01 <> '0.01';\n        -> 0\nmysql> SELECT 'zapp' <> 'zappp';\n        -> 1", "\n            For row comparisons, (a, b) <> (x,\n            y) and (a, b) != (x, y) are\n            equivalent to:\n          ", "Press CTRL+C to copy (a <> x) OR (b <> y)"], "Examples": ["mysql> SELECT '.01' <> '0.01';\n        -> 1\nmysql> SELECT .01 <> '0.01';\n        -> 0\nmysql> SELECT 'zapp' <> 'zappp';\n        -> 1"], "Category": ["Comparison Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#operator_between"], "Title": ["BETWEEN ... AND ..."], "Feature": ["expr\n            BETWEEN min AND\n            max"], "Description": ["Whether a value is within a range of values", "\nexpr\n            BETWEEN min AND\n            max\n", "\n            If expr is greater than or equal\n            to min and\n            expr is less than or equal to\n            max,\n            BETWEEN returns\n            1, otherwise it returns\n            0. This is equivalent to the expression\n            (min <=\n            expr AND\n            expr <=\n            max) if all the\n            arguments are of the same type. Otherwise type conversion\n            takes place according to the rules described in\n            Section\u00a014.3, \u201cType Conversion in Expression Evaluation\u201d, but applied to all the\n            three arguments.\n          ", "Press CTRL+C to copy mysql> SELECT 2 BETWEEN 1 AND 3, 2 BETWEEN 3 and 1;\n        -> 1, 0\nmysql> SELECT 1 BETWEEN 2 AND 3;\n        -> 0\nmysql> SELECT 'b' BETWEEN 'a' AND 'c';\n        -> 1\nmysql> SELECT 2 BETWEEN 2 AND '3';\n        -> 1\nmysql> SELECT 2 BETWEEN 2 AND 'x-3';\n        -> 0", "\n            For best results when using\n            BETWEEN with date or time\n            values, use CAST() to\n            explicitly convert the values to the desired data type.\n            Examples: If you compare a\n            DATETIME to two\n            DATE values, convert the\n            DATE values to\n            DATETIME values. If you use a\n            string constant such as '2001-1-1' in a\n            comparison to a DATE, cast\n            the string to a DATE.\n          "], "Examples": ["mysql> SELECT 2 BETWEEN 1 AND 3, 2 BETWEEN 3 and 1;\n        -> 1, 0\nmysql> SELECT 1 BETWEEN 2 AND 3;\n        -> 0\nmysql> SELECT 'b' BETWEEN 'a' AND 'c';\n        -> 1\nmysql> SELECT 2 BETWEEN 2 AND '3';\n        -> 1\nmysql> SELECT 2 BETWEEN 2 AND 'x-3';\n        -> 0"], "Category": ["Comparison Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#operator_equal-to"], "Title": ["<=>"], "Feature": ["<=>"], "Description": ["NULL-safe equal to operator", "\n<=>\n", "\nNULL-safe equal. This operator performs\n            an equality comparison like the\n            = operator,\n            but returns 1 rather than\n            NULL if both operands are\n            NULL, and 0 rather\n            than NULL if one operand is\n            NULL.\n          ", "\n            The\n            <=>\n            operator is equivalent to the standard SQL IS NOT\n            DISTINCT FROM operator.\n          ", "Press CTRL+C to copy mysql> SELECT 1 <=> 1, NULL <=> NULL, 1 <=> NULL;\n        -> 1, 1, 0\nmysql> SELECT 1 = 1, NULL = NULL, 1 = NULL;\n        -> 1, NULL, NULL", "\n            For row comparisons, (a, b) <=> (x,\n            y) is equivalent to:\n          ", "Press CTRL+C to copy (a <=> x) AND (b <=> y)"], "Examples": ["mysql> SELECT 1 <=> 1, NULL <=> NULL, 1 <=> NULL;\n        -> 1, 1, 0\nmysql> SELECT 1 = 1, NULL = NULL, 1 = NULL;\n        -> 1, NULL, NULL"], "Category": ["Comparison Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#operator_greater-than"], "Title": [">"], "Feature": [">"], "Description": ["Greater than operator", "\n>\n", "\n            Greater than:\n          ", "Press CTRL+C to copy mysql> SELECT 2 > 2;\n        -> 0", "\n            For row comparisons, (a, b) > (x, y)\n            is equivalent to:\n          ", "Press CTRL+C to copy (a > x) OR ((a = x) AND (b > y))"], "Examples": ["mysql> SELECT 2 > 2;\n        -> 0"], "Category": ["Comparison Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#operator_greater-than-or-equal"], "Title": [">="], "Feature": [">="], "Description": ["Greater than or equal operator", "\n>=\n", "\n            Greater than or equal:\n          ", "Press CTRL+C to copy mysql> SELECT 2 >= 2;\n        -> 1", "\n            For row comparisons, (a, b) >= (x, y)\n            is equivalent to:\n          ", "Press CTRL+C to copy (a > x) OR ((a = x) AND (b >= y))"], "Examples": ["mysql> SELECT 2 >= 2;\n        -> 1"], "Category": ["Comparison Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#operator_is"], "Title": ["IS"], "Feature": ["IS\n            boolean_value"], "Description": ["Test a value against a boolean", "\nIS\n            boolean_value\n", "\n            Tests a value against a boolean value, where\n            boolean_value can be\n            TRUE, FALSE, or\n            UNKNOWN.\n          ", "Press CTRL+C to copy mysql> SELECT 1 IS TRUE, 0 IS FALSE, NULL IS UNKNOWN;\n        -> 1, 1, 1"], "Examples": ["mysql> SELECT 1 IS TRUE, 0 IS FALSE, NULL IS UNKNOWN;\n        -> 1, 1, 1"], "Category": ["Comparison Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#operator_is-not"], "Title": ["IS NOT"], "Feature": ["IS NOT\n            boolean_value"], "Description": ["Test a value against a boolean", "\nIS NOT\n            boolean_value\n", "\n            Tests a value against a boolean value, where\n            boolean_value can be\n            TRUE, FALSE, or\n            UNKNOWN.\n          ", "Press CTRL+C to copy mysql> SELECT 1 IS NOT UNKNOWN, 0 IS NOT UNKNOWN, NULL IS NOT UNKNOWN;\n        -> 1, 1, 0"], "Examples": ["mysql> SELECT 1 IS NOT UNKNOWN, 0 IS NOT UNKNOWN, NULL IS NOT UNKNOWN;\n        -> 1, 1, 0"], "Category": ["Comparison Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#operator_is-not-null"], "Title": ["IS NOT NULL"], "Feature": ["IS NOT NULL"], "Description": ["NOT NULL value test", "\nIS NOT NULL\n", "\n            Tests whether a value is not NULL.\n          ", "Press CTRL+C to copy mysql> SELECT 1 IS NOT NULL, 0 IS NOT NULL, NULL IS NOT NULL;\n        -> 1, 1, 0"], "Examples": ["mysql> SELECT 1 IS NOT NULL, 0 IS NOT NULL, NULL IS NOT NULL;\n        -> 1, 1, 0"], "Category": ["Comparison Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#operator_is-null"], "Title": ["IS NULL"], "Feature": ["IS NULL"], "Description": ["NULL value test", "\nIS NULL\n", "\n            Tests whether a value is NULL.\n          ", "Press CTRL+C to copy mysql> SELECT 1 IS NULL, 0 IS NULL, NULL IS NULL;\n        -> 0, 0, 1", "\n            To work well with ODBC programs, MySQL supports the\n            following extra features when using IS\n            NULL:\n", "\n\n                If sql_auto_is_null\n                variable is set to 1, then after a statement that\n                successfully inserts an automatically generated\n                AUTO_INCREMENT value, you can find\n                that value by issuing a statement of the following form:\n              Press CTRL+C to copy SELECT * FROM tbl_name WHERE auto_col IS NULL\n                If the statement returns a row, the value returned is\n                the same as if you invoked the\n                LAST_INSERT_ID()\n                function. For details, including the return value after\n                a multiple-row insert, see\n                Section\u00a014.15, \u201cInformation Functions\u201d. If no\n                AUTO_INCREMENT value was successfully\n                inserted, the SELECT\n                statement returns no row.\n              \n                The behavior of retrieving an\n                AUTO_INCREMENT value by using an\n                IS NULL comparison can be\n                disabled by setting\n                sql_auto_is_null = 0.\n                See Section\u00a07.1.8, \u201cServer System Variables\u201d.\n              \n                The default value of\n                sql_auto_is_null is 0.\n              \n                For DATE and\n                DATETIME columns that are\n                declared as NOT NULL, you can find\n                the special date '0000-00-00' by\n                using a statement like this:\n              Press CTRL+C to copy SELECT * FROM tbl_name WHERE date_column IS NULL\n                This is needed to get some ODBC applications to work\n                because ODBC does not support a\n                '0000-00-00' date value.\n              \n                See\n                Obtaining Auto-Increment Values,\n                and the description for the\n                FLAG_AUTO_IS_NULL option at\n                Connector/ODBC Connection Parameters.\n\n"], "Examples": ["mysql> SELECT 1 IS NULL, 0 IS NULL, NULL IS NULL;\n        -> 0, 0, 1"], "Category": ["Comparison Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#operator_less-than"], "Title": ["<"], "Feature": ["<"], "Description": ["Less than operator", "\n<\n", "\n            Less than:\n          ", "Press CTRL+C to copy mysql> SELECT 2 < 2;\n        -> 0", "\n            For row comparisons, (a, b) < (x, y)\n            is equivalent to:\n          ", "Press CTRL+C to copy (a < x) OR ((a = x) AND (b < y))"], "Examples": ["mysql> SELECT 2 < 2;\n        -> 0"], "Category": ["Comparison Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#operator_less-than-or-equal"], "Title": ["<="], "Feature": ["<="], "Description": ["Less than or equal operator", "\n<=\n", "\n            Less than or equal:\n          ", "Press CTRL+C to copy mysql> SELECT 0.1 <= 2;\n        -> 1", "\n            For row comparisons, (a, b) <= (x, y)\n            is equivalent to:\n          ", "Press CTRL+C to copy (a < x) OR ((a = x) AND (b <= y))"], "Examples": ["mysql> SELECT 0.1 <= 2;\n        -> 1"], "Category": ["Comparison Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#operator_not-between"], "Title": ["NOT BETWEEN ... AND ..."], "Feature": ["expr\n            NOT BETWEEN min AND\n            max"], "Description": ["Whether a value is not within a range of values", "\nexpr\n            NOT BETWEEN min AND\n            max\n", "\n            This is the same as NOT\n            (expr BETWEEN\n            min AND\n            max).\n          "], "Examples": [], "Category": ["Comparison Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#operator_not-equal"], "Title": ["<>, !="], "Feature": ["<>"], "Description": ["Not equal operator", "\n<>,\n            !=\n", "\n            Not equal:\n          ", "Press CTRL+C to copy mysql> SELECT '.01' <> '0.01';\n        -> 1\nmysql> SELECT .01 <> '0.01';\n        -> 0\nmysql> SELECT 'zapp' <> 'zappp';\n        -> 1", "\n            For row comparisons, (a, b) <> (x,\n            y) and (a, b) != (x, y) are\n            equivalent to:\n          ", "Press CTRL+C to copy (a <> x) OR (b <> y)"], "Examples": ["mysql> SELECT '.01' <> '0.01';\n        -> 1\nmysql> SELECT .01 <> '0.01';\n        -> 0\nmysql> SELECT 'zapp' <> 'zappp';\n        -> 1"], "Category": ["Comparison Operators"]}
