{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/cast-functions.html#operator_binary"], "Title": ["BINARY"], "Feature": ["BINARY"], "Description": ["Cast a string to a binary string", "\nBINARY\nexpr\n", "\n            The BINARY operator converts\n            the expression to a binary string (a string that has the\n            binary character set and\n            binary collation). A common use for\n            BINARY is to force a character\n            string comparison to be done byte by byte using numeric byte\n            values rather than character by character. The\n            BINARY operator also causes\n            trailing spaces in comparisons to be significant. For\n            information about the differences between the\n            binary collation of the\n            binary character set and the\n            _bin collations of nonbinary character\n            sets, see Section\u00a012.8.5, \u201cThe binary Collation Compared to _bin Collations\u201d.\n          ", "\n            The BINARY operator is deprecated; you\n            should expect its removal in a future version of MySQL. Use\n            CAST(... AS BINARY) instead.\n          ", "Press CTRL+C to copy mysql> SET NAMES utf8mb4 COLLATE utf8mb4_general_ci;\n        -> OK\nmysql> SELECT 'a' = 'A';\n        -> 1\nmysql> SELECT BINARY 'a' = 'A';\n        -> 0\nmysql> SELECT 'a' = 'a ';\n        -> 1\nmysql> SELECT BINARY 'a' = 'a ';\n        -> 0", "\n            In a comparison, BINARY affects\n            the entire operation; it can be given before either operand\n            with the same result.\n          ", "\n            To convert a string expression to a binary string, these\n            constructs are equivalent:\n          ", "Press CTRL+C to copy CONVERT(expr USING BINARY)\nCAST(expr AS BINARY)\nBINARY expr", "\n            If a value is a string literal, it can be designated as a\n            binary string without converting it by using the\n            _binary character set introducer:\n          ", "Press CTRL+C to copy mysql> SELECT 'a' = 'A';\n        -> 1\nmysql> SELECT _binary 'a' = 'A';\n        -> 0", "\n            For information about introducers, see\n            Section\u00a012.3.8, \u201cCharacter Set Introducers\u201d.\n          ", "\n            The BINARY operator in\n            expressions differs in effect from the\n            BINARY attribute in character column\n            definitions. For a character column defined with the\n            BINARY attribute, MySQL assigns the table\n            default character set and the binary\n            (_bin) collation of that character set.\n            Every nonbinary character set has a _bin\n            collation. For example, if the table default character set\n            is utf8mb4, these two column definitions\n            are equivalent:\n          ", "Press CTRL+C to copy CHAR(10) BINARY\nCHAR(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin", "\n            The use of CHARACTER SET binary in the\n            definition of a CHAR,\n            VARCHAR, or\n            TEXT column causes the column\n            to be treated as the corresponding binary string data type.\n            For example, the following pairs of definitions are\n            equivalent:\n          ", "Press CTRL+C to copy CHAR(10) CHARACTER SET binary\nBINARY(10)\n\nVARCHAR(10) CHARACTER SET binary\nVARBINARY(10)\n\nTEXT CHARACTER SET binary\nBLOB", "\n            If BINARY is invoked from\n            within the mysql client, binary strings\n            display using hexadecimal notation, depending on the value\n            of the --binary-as-hex. For\n            more information about that option, see\n            Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n          "], "Examples": ["mysql> SET NAMES utf8mb4 COLLATE utf8mb4_general_ci;\n        -> OK\nmysql> SELECT 'a' = 'A';\n        -> 1\nmysql> SELECT BINARY 'a' = 'A';\n        -> 0\nmysql> SELECT 'a' = 'a ';\n        -> 1\nmysql> SELECT BINARY 'a' = 'a ';\n        -> 0", "mysql> SELECT 'a' = 'A';\n        -> 1\nmysql> SELECT _binary 'a' = 'A';\n        -> 0"], "Category": ["Cast Operators"]}
