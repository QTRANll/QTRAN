{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/assignment-operators.html#operator_assign-value"
    ],
    "Title": [
        ":="
    ],
    "Feature": [
        ":="
    ],
    "Description": [
        "Assign a value",
        "\n:=\n",
        "\n            Assignment operator. Causes the user variable on the left\n            hand side of the operator to take on the value to its right.\n            The value on the right hand side may be a literal value,\n            another variable storing a value, or any legal expression\n            that yields a scalar value, including the result of a query\n            (provided that this value is a scalar value). You can\n            perform multiple assignments in the same\n            SET\n            statement. You can perform multiple assignments in the same\n            statement.\n          ",
        "\n            Unlike\n            =, the\n            :=\n            operator is never interpreted as a comparison operator. This\n            means you can use\n            := in\n            any valid SQL statement (not just in\n            SET\n            statements) to assign a value to a variable.\n          ",
        "Press CTRL+C to copy mysql> SELECT @var1, @var2;\n        -> NULL, NULL\nmysql> SELECT @var1 := 1, @var2;\n        -> 1, NULL\nmysql> SELECT @var1, @var2;\n        -> 1, NULL\nmysql> SELECT @var1, @var2 := @var1;\n        -> 1, 1\nmysql> SELECT @var1, @var2;\n        -> 1, 1\n\nmysql> SELECT @var1:=COUNT(*) FROM t1;\n        -> 4\nmysql> SELECT @var1;\n        -> 4",
        "\n            You can make value assignments using\n            := in\n            other statements besides\n            SELECT, such as\n            UPDATE, as shown here:\n          ",
        "Press CTRL+C to copy mysql> SELECT @var1;\n        -> 4\nmysql> SELECT * FROM t1;\n        -> 1, 3, 5, 7\n\nmysql> UPDATE t1 SET c1 = 2 WHERE c1 = @var1:= 1;\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> SELECT @var1;\n        -> 1\nmysql> SELECT * FROM t1;\n        -> 2, 3, 5, 7",
        "\n            While it is also possible both to set and to read the value\n            of the same variable in a single SQL statement using the\n            :=\n            operator, this is not recommended.\n            Section\u00a011.4, \u201cUser-Defined Variables\u201d, explains why you should\n            avoid doing this.\n          "
    ],
    "Examples": [
        "mysql> SELECT @var1, @var2;\n        -> NULL, NULL\nmysql> SELECT @var1 := 1, @var2;\n        -> 1, NULL\nmysql> SELECT @var1, @var2;\n        -> 1, NULL\nmysql> SELECT @var1, @var2 := @var1;\n        -> 1, 1\nmysql> SELECT @var1, @var2;\n        -> 1, 1\n\nmysql> SELECT @var1:=COUNT(*) FROM t1;\n        -> 4\nmysql> SELECT @var1;\n        -> 4",
        "mysql> SELECT @var1;\n        -> 4\nmysql> SELECT * FROM t1;\n        -> 1, 3, 5, 7\n\nmysql> UPDATE t1 SET c1 = 2 WHERE c1 = @var1:= 1;\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> SELECT @var1;\n        -> 1\nmysql> SELECT * FROM t1;\n        -> 2, 3, 5, 7"
    ],
    "Category": [
        "Assignment Operators"
    ]
}