{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_date-format", "Title": "DATE_FORMAT()", "Feature": ["DATE_FORMAT(date,format)"], "Description": ["\nDATE_FORMAT(date,format)\n", "\n          Formats the date value according to\n          the format string. If either\n          argument is NULL, the function returns\n          NULL.\n        ", "\n          The specifiers shown in the following table may be used in the\n          format string. The\n          % character is required before format\n          specifier characters. The specifiers apply to other functions\n          as well: STR_TO_DATE(),\n          TIME_FORMAT(),\n          UNIX_TIMESTAMP().\n", "\n\nSpecifier\nDescription\n\n%a\nAbbreviated weekday name\n                (Sun..Sat)\n\n%b\nAbbreviated month name (Jan..Dec)\n\n%c\nMonth, numeric (0..12)\n\n%D\nDay of the month with English suffix (0th,\n                1st, 2nd,\n                3rd, \u2026)\n\n%d\nDay of the month, numeric (00..31)\n\n%e\nDay of the month, numeric (0..31)\n\n%f\nMicroseconds (000000..999999)\n\n%H\nHour (00..23)\n\n%h\nHour (01..12)\n\n%I\nHour (01..12)\n\n%i\nMinutes, numeric (00..59)\n\n%j\nDay of year (001..366)\n\n%k\nHour (0..23)\n\n%l\nHour (1..12)\n\n%M\nMonth name (January..December)\n\n%m\nMonth, numeric (00..12)\n\n%p\nAM or PM\n\n%r\nTime, 12-hour (hh:mm:ss followed by\n                AM or PM)\n\n%S\nSeconds (00..59)\n\n%s\nSeconds (00..59)\n\n%T\nTime, 24-hour (hh:mm:ss)\n\n%U\nWeek (00..53), where Sunday is the\n                first day of the week;\n                WEEK() mode 0\n\n%u\nWeek (00..53), where Monday is the\n                first day of the week;\n                WEEK() mode 1\n\n%V\nWeek (01..53), where Sunday is the\n                first day of the week;\n                WEEK() mode 2; used with\n                %X\n\n%v\nWeek (01..53), where Monday is the\n                first day of the week;\n                WEEK() mode 3; used with\n                %x\n\n%W\nWeekday name (Sunday..Saturday)\n\n%w\nDay of the week\n                (0=Sunday..6=Saturday)\n\n%X\nYear for the week where Sunday is the first day of the week, numeric,\n                four digits; used with %V\n\n%x\nYear for the week, where Monday is the first day of the week, numeric,\n                four digits; used with %v\n\n%Y\nYear, numeric, four digits\n\n%y\nYear, numeric (two digits)\n\n%%\nA literal % character\n\n%x\nx, for any\n                \u201cx\u201d not listed\n                above\n\n", "\nSpecifier\nDescription\n", "\n          Ranges for the month and day specifiers begin with zero due to\n          the fact that MySQL permits the storing of incomplete dates\n          such as '2014-00-00'.\n        ", "\n          The language used for day and month names and abbreviations is\n          controlled by the value of the\n          lc_time_names system variable\n          (Section\u00a012.16, \u201cMySQL Server Locale Support\u201d).\n        ", "\n          For the %U, %u,\n          %V, and %v specifiers,\n          see the description of the\n          WEEK() function for information\n          about the mode values. The mode affects how week numbering\n          occurs.\n        ", "\nDATE_FORMAT() returns a string\n          with a character set and collation given by\n          character_set_connection and\n          collation_connection so that\n          it can return month and weekday names containing non-ASCII\n          characters.\n        ", "Press CTRL+C to copy mysql> SELECT DATE_FORMAT('2009-10-04 22:23:00', '%W %M %Y');\n        -> 'Sunday October 2009'\nmysql> SELECT DATE_FORMAT('2007-10-04 22:23:00', '%H:%i:%s');\n        -> '22:23:00'\nmysql> SELECT DATE_FORMAT('1900-10-04 22:23:00',\n    ->                 '%D %y %a %d %m %b %j');\n        -> '4th 00 Thu 04 10 Oct 277'\nmysql> SELECT DATE_FORMAT('1997-10-04 22:23:00',\n    ->                 '%H %k %I %r %T %S %w');\n        -> '22 22 10 10:23:00 PM 22:23:00 00 6'\nmysql> SELECT DATE_FORMAT('1999-01-01', '%X %V');\n        -> '1998 52'\nmysql> SELECT DATE_FORMAT('2006-06-00', '%d');\n        -> '00'"], "Examples": ["mysql> SELECT DATE_FORMAT('2009-10-04 22:23:00', '%W %M %Y');\n        -> 'Sunday October 2009'\nmysql> SELECT DATE_FORMAT('2007-10-04 22:23:00', '%H:%i:%s');\n        -> '22:23:00'\nmysql> SELECT DATE_FORMAT('1900-10-04 22:23:00',\n    ->                 '%D %y %a %d %m %b %j');\n        -> '4th 00 Thu 04 10 Oct 277'\nmysql> SELECT DATE_FORMAT('1997-10-04 22:23:00',\n    ->                 '%H %k %I %r %T %S %w');\n        -> '22 22 10 10:23:00 PM 22:23:00 00 6'\nmysql> SELECT DATE_FORMAT('1999-01-01', '%X %V');\n        -> '1998 52'\nmysql> SELECT DATE_FORMAT('2006-06-00', '%d');\n        -> '00'"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_date-sub", "Title": "DATE_SUB()", "Feature": ["DATE_SUB(date,INTERVAL\n          expr\nunit)"], "Description": ["\nDATE_SUB(date,INTERVAL\n          expr\nunit)\n", "\n          See the description for\n          DATE_ADD().\n        "], "Examples": [], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_datediff", "Title": "DATEDIFF()", "Feature": ["DATEDIFF(expr1,expr2)"], "Description": ["\nDATEDIFF(expr1,expr2)\n", "\nDATEDIFF() returns\n          expr1 \u2212\n          expr2 expressed as a value in days\n          from one date to the other. expr1\n          and expr2 are date or date-and-time\n          expressions. Only the date parts of the values are used in the\n          calculation.\n        ", "Press CTRL+C to copy mysql> SELECT DATEDIFF('2007-12-31 23:59:59','2007-12-30');\n        -> 1\nmysql> SELECT DATEDIFF('2010-11-30 23:59:59','2010-12-31');\n        -> -31", "\n          This function returns NULL if\n          expr1 or\n          expr2 is NULL.\n        "], "Examples": ["mysql> SELECT DATEDIFF('2007-12-31 23:59:59','2007-12-30');\n        -> 1\nmysql> SELECT DATEDIFF('2010-11-30 23:59:59','2010-12-31');\n        -> -31"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_day", "Title": "DAY()", "Feature": ["DAY(date)"], "Description": ["\nDAY(date)\n", "\nDAY() is a synonym for\n          DAYOFMONTH().\n        "], "Examples": [], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_dayname", "Title": "DAYNAME()", "Feature": ["DAYNAME(date)"], "Description": ["\nDAYNAME(date)\n", "\n          Returns the name of the weekday for\n          date. The language used for the\n          name is controlled by the value of the\n          lc_time_names system variable\n          (see Section\u00a012.16, \u201cMySQL Server Locale Support\u201d). Returns\n          NULL if date is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT DAYNAME('2007-02-03');\n        -> 'Saturday'"], "Examples": ["mysql> SELECT DAYNAME('2007-02-03');\n        -> 'Saturday'"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_dayofmonth", "Title": "DAYOFMONTH()", "Feature": ["DAYOFMONTH(date)"], "Description": ["\nDAYOFMONTH(date)\n", "\n          Returns the day of the month for\n          date, in the range\n          1 to 31, or\n          0 for dates such as\n          '0000-00-00' or\n          '2008-00-00' that have a zero day part.\n          Returns NULL if\n          date is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT DAYOFMONTH('2007-02-03');\n        -> 3"], "Examples": ["mysql> SELECT DAYOFMONTH('2007-02-03');\n        -> 3"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_dayofweek", "Title": "DAYOFWEEK()", "Feature": ["DAYOFWEEK(date)"], "Description": ["\nDAYOFWEEK(date)\n", "\n          Returns the weekday index for date\n          (1 = Sunday, 2 = Monday,\n          \u2026, 7 = Saturday). These index values\n          correspond to the ODBC standard. Returns\n          NULL if date is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT DAYOFWEEK('2007-02-03');\n        -> 7"], "Examples": ["mysql> SELECT DAYOFWEEK('2007-02-03');\n        -> 7"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_dayofyear", "Title": "DAYOFYEAR()", "Feature": ["DAYOFYEAR(date)"], "Description": ["\nDAYOFYEAR(date)\n", "\n          Returns the day of the year for\n          date, in the range\n          1 to 366. Returns\n          NULL if date is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT DAYOFYEAR('2007-02-03');\n        -> 34"], "Examples": ["mysql> SELECT DAYOFYEAR('2007-02-03');\n        -> 34"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_extract", "Title": "EXTRACT()", "Feature": ["EXTRACT(unit\n          FROM date)"], "Description": ["\nEXTRACT(unit\n          FROM date)\n", "\n          The EXTRACT() function uses the\n          same kinds of unit specifiers as\n          DATE_ADD() or\n          DATE_SUB(), but extracts parts\n          from the date rather than performing date arithmetic. For\n          information on the unit argument,\n          see Temporal Intervals. Returns\n          NULL if date is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT EXTRACT(YEAR FROM '2019-07-02');\n        -> 2019\nmysql> SELECT EXTRACT(YEAR_MONTH FROM '2019-07-02 01:02:03');\n        -> 201907\nmysql> SELECT EXTRACT(DAY_MINUTE FROM '2019-07-02 01:02:03');\n        -> 20102\nmysql> SELECT EXTRACT(MICROSECOND\n    ->                FROM '2003-01-02 10:30:00.000123');\n        -> 123"], "Examples": ["mysql> SELECT EXTRACT(YEAR FROM '2019-07-02');\n        -> 2019\nmysql> SELECT EXTRACT(YEAR_MONTH FROM '2019-07-02 01:02:03');\n        -> 201907\nmysql> SELECT EXTRACT(DAY_MINUTE FROM '2019-07-02 01:02:03');\n        -> 20102\nmysql> SELECT EXTRACT(MICROSECOND\n    ->                FROM '2003-01-02 10:30:00.000123');\n        -> 123"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_from-days", "Title": "FROM_DAYS()", "Feature": ["FROM_DAYS(N)"], "Description": ["\nFROM_DAYS(N)\n", "\n          Given a day number N, returns a\n          DATE value. Returns\n          NULL if N is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT FROM_DAYS(730669);\n        -> '2000-07-03'", "\n          Use FROM_DAYS() with caution on\n          old dates. It is not intended for use with values that precede\n          the advent of the Gregorian calendar (1582). See\n          Section\u00a013.2.7, \u201cWhat Calendar Is Used By MySQL?\u201d.\n        "], "Examples": ["mysql> SELECT FROM_DAYS(730669);\n        -> '2000-07-03'"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_from-unixtime", "Title": "FROM_UNIXTIME()", "Feature": ["FROM_UNIXTIME(unix_timestamp[,format])"], "Description": ["\nFROM_UNIXTIME(unix_timestamp[,format])\n", "\n          Returns a representation of\n          unix_timestamp as a datetime or\n          character string value. The value returned is expressed using\n          the session time zone. (Clients can set the session time zone\n          as described in Section\u00a07.1.15, \u201cMySQL Server Time Zone Support\u201d.)\n          unix_timestamp is an internal\n          timestamp value representing seconds since\n          '1970-01-01 00:00:00' UTC, such as produced\n          by the UNIX_TIMESTAMP()\n          function.\n        ", "\n          If format is omitted, this function\n          returns a DATETIME value.\n        ", "\n          If unix_timestamp or\n          format is NULL,\n          this function returns NULL.\n        ", "\n          If unix_timestamp is an integer,\n          the fractional seconds precision of the\n          DATETIME is zero. When\n          unix_timestamp is a decimal value,\n          the fractional seconds precision of the\n          DATETIME is the same as the precision of\n          the decimal value, up to a maximum of 6. When\n          unix_timestamp is a floating point\n          number, the fractional seconds precision of the datetime is 6.\n        ", "\n          On 32-bit platforms, the maximum useful value for\n          unix_timestamp is\n          2147483647.999999, which returns '2038-01-19\n          03:14:07.999999' UTC. On 64-bit platforms running\n          MySQL 8.0.28 or later, the effective maximum is\n          32536771199.999999, which returns '3001-01-18\n          23:59:59.999999' UTC. Regardless of platform or\n          version, a greater value for\n          unix_timestamp than the effective\n          maximum returns 0.\n        ", "\nformat is used to format the result\n          in the same way as the format string used for the\n          DATE_FORMAT() function. If\n          format is supplied, the value\n          returned is a VARCHAR.\n        ", "Press CTRL+C to copy mysql> SELECT FROM_UNIXTIME(1447430881);\n        -> '2015-11-13 10:08:01'\nmysql> SELECT FROM_UNIXTIME(1447430881) + 0;\n        -> 20151113100801\nmysql> SELECT FROM_UNIXTIME(1447430881,\n    ->                      '%Y %D %M %h:%i:%s %x');\n        -> '2015 13th November 10:08:01 2015'", "\n\nNote\n\n\n            If you use UNIX_TIMESTAMP()\n            and FROM_UNIXTIME() to\n            convert between values in a non-UTC time zone and Unix\n            timestamp values, the conversion is lossy because the\n            mapping is not one-to-one in both directions. For details,\n            see the description of the\n            UNIX_TIMESTAMP() function.\n\n"], "Examples": ["mysql> SELECT FROM_UNIXTIME(1447430881);\n        -> '2015-11-13 10:08:01'\nmysql> SELECT FROM_UNIXTIME(1447430881) + 0;\n        -> 20151113100801\nmysql> SELECT FROM_UNIXTIME(1447430881,\n    ->                      '%Y %D %M %h:%i:%s %x');\n        -> '2015 13th November 10:08:01 2015'"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_get-format", "Title": "GET_FORMAT()", "Feature": ["GET_FORMAT({DATE|TIME|DATETIME},\n          {'EUR'|'USA'|'JIS'|'ISO'|'INTERNAL'})"], "Description": ["\nGET_FORMAT({DATE|TIME|DATETIME},\n          {'EUR'|'USA'|'JIS'|'ISO'|'INTERNAL'})\n", "\n          Returns a format string. This function is useful in\n          combination with the\n          DATE_FORMAT() and the\n          STR_TO_DATE() functions.\n        ", "\n          If format is\n          NULL, this function returns\n          NULL.\n        ", "\n          The possible values for the first and second arguments result\n          in several possible format strings (for the specifiers used,\n          see the table in the\n          DATE_FORMAT() function\n          description). ISO format refers to ISO 9075, not ISO 8601.\n", "\n\nFunction Call\nResult\n\nGET_FORMAT(DATE,'USA')\n'%m.%d.%Y'\n\nGET_FORMAT(DATE,'JIS')\n'%Y-%m-%d'\n\nGET_FORMAT(DATE,'ISO')\n'%Y-%m-%d'\n\nGET_FORMAT(DATE,'EUR')\n'%d.%m.%Y'\n\nGET_FORMAT(DATE,'INTERNAL')\n'%Y%m%d'\n\nGET_FORMAT(DATETIME,'USA')\n'%Y-%m-%d %H.%i.%s'\n\nGET_FORMAT(DATETIME,'JIS')\n'%Y-%m-%d %H:%i:%s'\n\nGET_FORMAT(DATETIME,'ISO')\n'%Y-%m-%d %H:%i:%s'\n\nGET_FORMAT(DATETIME,'EUR')\n'%Y-%m-%d %H.%i.%s'\n\nGET_FORMAT(DATETIME,'INTERNAL')\n'%Y%m%d%H%i%s'\n\nGET_FORMAT(TIME,'USA')\n'%h:%i:%s %p'\n\nGET_FORMAT(TIME,'JIS')\n'%H:%i:%s'\n\nGET_FORMAT(TIME,'ISO')\n'%H:%i:%s'\n\nGET_FORMAT(TIME,'EUR')\n'%H.%i.%s'\n\nGET_FORMAT(TIME,'INTERNAL')\n'%H%i%s'\n\n", "\nFunction Call\nResult\n", "\nTIMESTAMP can also be used as\n          the first argument to\n          GET_FORMAT(), in which case the\n          function returns the same values as for\n          DATETIME.\n        ", "Press CTRL+C to copy mysql> SELECT DATE_FORMAT('2003-10-03',GET_FORMAT(DATE,'EUR'));\n        -> '03.10.2003'\nmysql> SELECT STR_TO_DATE('10.31.2003',GET_FORMAT(DATE,'USA'));\n        -> '2003-10-31'"], "Examples": ["mysql> SELECT DATE_FORMAT('2003-10-03',GET_FORMAT(DATE,'EUR'));\n        -> '03.10.2003'\nmysql> SELECT STR_TO_DATE('10.31.2003',GET_FORMAT(DATE,'USA'));\n        -> '2003-10-31'"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_hour", "Title": "HOUR()", "Feature": ["HOUR(time)"], "Description": ["\nHOUR(time)\n", "\n          Returns the hour for time. The\n          range of the return value is 0 to\n          23 for time-of-day values. However, the\n          range of TIME values actually\n          is much larger, so HOUR can return values\n          greater than 23. Returns\n          NULL if time is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT HOUR('10:05:03');\n        -> 10\nmysql> SELECT HOUR('272:59:59');\n        -> 272"], "Examples": ["mysql> SELECT HOUR('10:05:03');\n        -> 10\nmysql> SELECT HOUR('272:59:59');\n        -> 272"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_localtime", "Title": "LOCALTIME(), LOCALTIME", "Feature": ["LOCALTIME", "LOCALTIME([fsp])"], "Description": ["\nLOCALTIME,\n          LOCALTIME([fsp])\n", "\nLOCALTIME and\n          LOCALTIME() are synonyms for\n          NOW().\n        "], "Examples": [], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_localtimestamp", "Title": "LOCALTIMESTAMP, LOCALTIMESTAMP()", "Feature": ["LOCALTIMESTAMP", "LOCALTIMESTAMP([fsp])"], "Description": ["\nLOCALTIMESTAMP,\n          LOCALTIMESTAMP([fsp])\n", "\nLOCALTIMESTAMP and\n          LOCALTIMESTAMP() are synonyms\n          for NOW().\n        "], "Examples": [], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_makedate", "Title": "MAKEDATE()", "Feature": ["MAKEDATE(year,dayofyear)"], "Description": ["\nMAKEDATE(year,dayofyear)\n", "\n          Returns a date, given year and day-of-year values.\n          dayofyear must be greater than 0 or\n          the result is NULL. The result is also\n          NULL if either argument is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT MAKEDATE(2011,31), MAKEDATE(2011,32);\n        -> '2011-01-31', '2011-02-01'\nmysql> SELECT MAKEDATE(2011,365), MAKEDATE(2014,365);\n        -> '2011-12-31', '2014-12-31'\nmysql> SELECT MAKEDATE(2011,0);\n        -> NULL"], "Examples": ["mysql> SELECT MAKEDATE(2011,31), MAKEDATE(2011,32);\n        -> '2011-01-31', '2011-02-01'\nmysql> SELECT MAKEDATE(2011,365), MAKEDATE(2014,365);\n        -> '2011-12-31', '2014-12-31'\nmysql> SELECT MAKEDATE(2011,0);\n        -> NULL"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_maketime", "Title": "MAKETIME()", "Feature": ["MAKETIME(hour,minute,second)"], "Description": ["\nMAKETIME(hour,minute,second)\n", "\n          Returns a time value calculated from the\n          hour,\n          minute, and\n          second arguments. Returns\n          NULL if any of its arguments are\n          NULL.\n        ", "\n          The second argument can have a\n          fractional part.\n        ", "Press CTRL+C to copy mysql> SELECT MAKETIME(12,15,30);\n        -> '12:15:30'"], "Examples": ["mysql> SELECT MAKETIME(12,15,30);\n        -> '12:15:30'"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_microsecond", "Title": "MICROSECOND()", "Feature": ["MICROSECOND(expr)"], "Description": ["\nMICROSECOND(expr)\n", "\n          Returns the microseconds from the time or datetime expression\n          expr as a number in the range from\n          0 to 999999. Returns\n          NULL if expr is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT MICROSECOND('12:00:00.123456');\n        -> 123456\nmysql> SELECT MICROSECOND('2019-12-31 23:59:59.000010');\n        -> 10"], "Examples": ["mysql> SELECT MICROSECOND('12:00:00.123456');\n        -> 123456\nmysql> SELECT MICROSECOND('2019-12-31 23:59:59.000010');\n        -> 10"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_minute", "Title": "MINUTE()", "Feature": ["MINUTE(time)"], "Description": ["\nMINUTE(time)\n", "\n          Returns the minute for time, in the\n          range 0 to 59, or\n          NULL if time is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT MINUTE('2008-02-03 10:05:03');\n        -> 5"], "Examples": ["mysql> SELECT MINUTE('2008-02-03 10:05:03');\n        -> 5"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_month", "Title": "MONTH()", "Feature": ["MONTH(date)"], "Description": ["\nMONTH(date)\n", "\n          Returns the month for date, in the\n          range 1 to 12 for\n          January to December, or 0 for dates such as\n          '0000-00-00' or\n          '2008-00-00' that have a zero month part.\n          Returns NULL if\n          date is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT MONTH('2008-02-03');\n        -> 2"], "Examples": ["mysql> SELECT MONTH('2008-02-03');\n        -> 2"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_monthname", "Title": "MONTHNAME()", "Feature": ["MONTHNAME(date)"], "Description": ["\nMONTHNAME(date)\n", "\n          Returns the full name of the month for\n          date. The language used for the\n          name is controlled by the value of the\n          lc_time_names system variable\n          (Section\u00a012.16, \u201cMySQL Server Locale Support\u201d). Returns\n          NULL if date is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT MONTHNAME('2008-02-03');\n        -> 'February'"], "Examples": ["mysql> SELECT MONTHNAME('2008-02-03');\n        -> 'February'"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_now", "Title": "NOW()", "Feature": ["NOW([fsp])"], "Description": ["\nNOW([fsp])\n", "\n          Returns the current date and time as a value in\n          'YYYY-MM-DD\n          hh:mm:ss' or\n          YYYYMMDDhhmmss format, depending on\n          whether the function is used in string or numeric context. The\n          value is expressed in the session time zone.\n        ", "\n          If the fsp argument is given to\n          specify a fractional seconds precision from 0 to 6, the return\n          value includes a fractional seconds part of that many digits.\n        ", "Press CTRL+C to copy mysql> SELECT NOW();\n        -> '2007-12-15 23:50:26'\nmysql> SELECT NOW() + 0;\n        -> 20071215235026.000000", "\nNOW() returns a constant time\n          that indicates the time at which the statement began to\n          execute. (Within a stored function or trigger,\n          NOW() returns the time at which\n          the function or triggering statement began to execute.) This\n          differs from the behavior for\n          SYSDATE(), which returns the\n          exact time at which it executes.\n        ", "Press CTRL+C to copy mysql> SELECT NOW(), SLEEP(2), NOW();\n+---------------------+----------+---------------------+\n| NOW()               | SLEEP(2) | NOW()               |\n+---------------------+----------+---------------------+\n| 2006-04-12 13:47:36 |        0 | 2006-04-12 13:47:36 |\n+---------------------+----------+---------------------+\n\nmysql> SELECT SYSDATE(), SLEEP(2), SYSDATE();\n+---------------------+----------+---------------------+\n| SYSDATE()           | SLEEP(2) | SYSDATE()           |\n+---------------------+----------+---------------------+\n| 2006-04-12 13:47:44 |        0 | 2006-04-12 13:47:46 |\n+---------------------+----------+---------------------+", "\n          In addition, the SET TIMESTAMP statement\n          affects the value returned by\n          NOW() but not by\n          SYSDATE(). This means that\n          timestamp settings in the binary log have no effect on\n          invocations of SYSDATE().\n          Setting the timestamp to a nonzero value causes each\n          subsequent invocation of NOW()\n          to return that value. Setting the timestamp to zero cancels\n          this effect so that NOW() once\n          again returns the current date and time.\n        ", "\n          See the description for\n          SYSDATE() for additional\n          information about the differences between the two functions.\n        "], "Examples": ["mysql> SELECT NOW();\n        -> '2007-12-15 23:50:26'\nmysql> SELECT NOW() + 0;\n        -> 20071215235026.000000", "mysql> SELECT NOW(), SLEEP(2), NOW();\n+---------------------+----------+---------------------+\n| NOW()               | SLEEP(2) | NOW()               |\n+---------------------+----------+---------------------+\n| 2006-04-12 13:47:36 |        0 | 2006-04-12 13:47:36 |\n+---------------------+----------+---------------------+\n\nmysql> SELECT SYSDATE(), SLEEP(2), SYSDATE();\n+---------------------+----------+---------------------+\n| SYSDATE()           | SLEEP(2) | SYSDATE()           |\n+---------------------+----------+---------------------+\n| 2006-04-12 13:47:44 |        0 | 2006-04-12 13:47:46 |\n+---------------------+----------+---------------------+"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_period-add", "Title": "PERIOD_ADD()", "Feature": ["PERIOD_ADD(P,N)"], "Description": ["\nPERIOD_ADD(P,N)\n", "\n          Adds N months to period\n          P (in the format\n          YYMM or\n          YYYYMM). Returns a value in the\n          format YYYYMM.\n", "\n\nNote\n\n\n            The period argument P is\n            not a date value.\n\n", "\n          This function returns NULL if\n          P or N\n          is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT PERIOD_ADD(200801,2);\n        -> 200803"], "Examples": ["mysql> SELECT PERIOD_ADD(200801,2);\n        -> 200803"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_period-diff", "Title": "PERIOD_DIFF()", "Feature": ["PERIOD_DIFF(P1,P2)"], "Description": ["\nPERIOD_DIFF(P1,P2)\n", "\n          Returns the number of months between periods\n          P1 and\n          P2. P1\n          and P2 should be in the format\n          YYMM or\n          YYYYMM. Note that the period\n          arguments P1 and\n          P2 are not\n          date values.\n        ", "\n          This function returns NULL if\n          P1 or P2\n          is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT PERIOD_DIFF(200802,200703);\n        -> 11"], "Examples": ["mysql> SELECT PERIOD_DIFF(200802,200703);\n        -> 11"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_quarter", "Title": "QUARTER()", "Feature": ["QUARTER(date)"], "Description": ["\nQUARTER(date)\n", "\n          Returns the quarter of the year for\n          date, in the range\n          1 to 4, or\n          NULL if date is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT QUARTER('2008-04-01');\n        -> 2"], "Examples": ["mysql> SELECT QUARTER('2008-04-01');\n        -> 2"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_sec-to-time", "Title": "SEC_TO_TIME()", "Feature": ["SEC_TO_TIME(seconds)"], "Description": ["\nSEC_TO_TIME(seconds)\n", "\n          Returns the seconds argument,\n          converted to hours, minutes, and seconds, as a\n          TIME value. The range of the\n          result is constrained to that of the\n          TIME data type. A warning\n          occurs if the argument corresponds to a value outside that\n          range.\n        ", "\n          The function returns NULL if\n          seconds is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT SEC_TO_TIME(2378);\n        -> '00:39:38'\nmysql> SELECT SEC_TO_TIME(2378) + 0;\n        -> 3938"], "Examples": ["mysql> SELECT SEC_TO_TIME(2378);\n        -> '00:39:38'\nmysql> SELECT SEC_TO_TIME(2378) + 0;\n        -> 3938"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_second", "Title": "SECOND()", "Feature": ["SECOND(time)"], "Description": ["\nSECOND(time)\n", "\n          Returns the second for time, in the\n          range 0 to 59, or\n          NULL if time is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT SECOND('10:05:03');\n        -> 3"], "Examples": ["mysql> SELECT SECOND('10:05:03');\n        -> 3"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_str-to-date", "Title": "STR_TO_DATE()", "Feature": ["STR_TO_DATE(str,format)"], "Description": ["\nSTR_TO_DATE(str,format)\n", "\n          This is the inverse of the\n          DATE_FORMAT() function. It\n          takes a string str and a format\n          string format.\n          STR_TO_DATE() returns a\n          DATETIME value if the format\n          string contains both date and time parts, or a\n          DATE or\n          TIME value if the string\n          contains only date or time parts. If\n          str or\n          format is NULL,\n          the function returns NULL. If the date,\n          time, or datetime value extracted from\n          str cannot be parsed according to\n          the rules followed by the server,\n          STR_TO_DATE() returns\n          NULL and produces a warning.\n        ", "\n          The server scans str attempting to\n          match format to it. The format\n          string can contain literal characters and format specifiers\n          beginning with %. Literal characters in\n          format must match literally in\n          str. Format specifiers in\n          format must match a date or time\n          part in str. For the specifiers\n          that can be used in format, see the\n          DATE_FORMAT() function\n          description.\n        ", "Press CTRL+C to copy mysql> SELECT STR_TO_DATE('01,5,2013','%d,%m,%Y');\n        -> '2013-05-01'\nmysql> SELECT STR_TO_DATE('May 1, 2013','%M %d,%Y');\n        -> '2013-05-01'", "\n          Scanning starts at the beginning of\n          str and fails if\n          format is found not to match. Extra\n          characters at the end of str are\n          ignored.\n        ", "Press CTRL+C to copy mysql> SELECT STR_TO_DATE('a09:30:17','a%h:%i:%s');\n        -> '09:30:17'\nmysql> SELECT STR_TO_DATE('a09:30:17','%h:%i:%s');\n        -> NULL\nmysql> SELECT STR_TO_DATE('09:30:17a','%h:%i:%s');\n        -> '09:30:17'", "\n          Unspecified date or time parts have a value of 0, so\n          incompletely specified values in\n          str produce a result with some or\n          all parts set to 0:\n        ", "Press CTRL+C to copy mysql> SELECT STR_TO_DATE('abc','abc');\n        -> '0000-00-00'\nmysql> SELECT STR_TO_DATE('9','%m');\n        -> '0000-09-00'\nmysql> SELECT STR_TO_DATE('9','%s');\n        -> '00:00:09'", "\n          Range checking on the parts of date values is as described in\n          Section\u00a013.2.2, \u201cThe DATE, DATETIME, and TIMESTAMP Types\u201d. This means, for example, that\n          \u201czero\u201d dates or dates with part values of 0 are\n          permitted unless the SQL mode is set to disallow such values.\n        ", "Press CTRL+C to copy mysql> SELECT STR_TO_DATE('00/00/0000', '%m/%d/%Y');\n        -> '0000-00-00'\nmysql> SELECT STR_TO_DATE('04/31/2004', '%m/%d/%Y');\n        -> '2004-04-31'", "\n          If the NO_ZERO_DATE SQL mode\n          is enabled, zero dates are disallowed. In that case,\n          STR_TO_DATE() returns\n          NULL and generates a warning:\n        ", "Press CTRL+C to copy mysql> SET sql_mode = '';\nmysql> SELECT STR_TO_DATE('00/00/0000', '%m/%d/%Y');\n+---------------------------------------+\n| STR_TO_DATE('00/00/0000', '%m/%d/%Y') |\n+---------------------------------------+\n| 0000-00-00                            |\n+---------------------------------------+\nmysql> SET sql_mode = 'NO_ZERO_DATE';\nmysql> SELECT STR_TO_DATE('00/00/0000', '%m/%d/%Y');\n+---------------------------------------+\n| STR_TO_DATE('00/00/0000', '%m/%d/%Y') |\n+---------------------------------------+\n| NULL                                  |\n+---------------------------------------+\nmysql> SHOW WARNINGS\\G\n*************************** 1. row ***************************\n  Level: Warning\n   Code: 1411\nMessage: Incorrect datetime value: '00/00/0000' for function str_to_date", "\n          Prior to MySQL 8.0.35, it was possible to pass an invalid date\n          string such as '2021-11-31' to this\n          function. In MySQL 8.0.35 and later,\n          STR_TO_DATE() performs complete range\n          checking and raises an error if the date after conversion\n          would be invalid.\n", "\n\nNote\n\n\n            You cannot use format \"%X%V\" to convert a\n            year-week string to a date because the combination of a year\n            and week does not uniquely identify a year and month if the\n            week crosses a month boundary. To convert a year-week to a\n            date, you should also specify the weekday:\n          Press CTRL+C to copy mysql> SELECT STR_TO_DATE('200442 Monday', '%X%V %W');\n        -> '2004-10-18'\n", "\n          You should also be aware that, for dates and the date portions\n          of datetime values, STR_TO_DATE() checks\n          (only) the individual year, month, and day of month values for\n          validity. More precisely, this means that the year is checked\n          to be sure that it is in the range 0-9999 inclusive, the month\n          is checked to ensure that it is in the range 1-12 inclusive,\n          and the day of month is checked to make sure that it is in the\n          range 1-31 inclusive, but the server does not check the values\n          in combination. For example, SELECT\n          STR_TO_DATE('23-2-31', '%Y-%m-%d') returns\n          2023-02-31. Enabling or disabling the\n          ALLOW_INVALID_DATES server\n          SQL mode has no effect on this behavior. See\n          Section\u00a013.2.2, \u201cThe DATE, DATETIME, and TIMESTAMP Types\u201d, for more information.\n        "], "Examples": ["mysql> SELECT STR_TO_DATE('01,5,2013','%d,%m,%Y');\n        -> '2013-05-01'\nmysql> SELECT STR_TO_DATE('May 1, 2013','%M %d,%Y');\n        -> '2013-05-01'", "mysql> SELECT STR_TO_DATE('a09:30:17','a%h:%i:%s');\n        -> '09:30:17'\nmysql> SELECT STR_TO_DATE('a09:30:17','%h:%i:%s');\n        -> NULL\nmysql> SELECT STR_TO_DATE('09:30:17a','%h:%i:%s');\n        -> '09:30:17'", "mysql> SELECT STR_TO_DATE('abc','abc');\n        -> '0000-00-00'\nmysql> SELECT STR_TO_DATE('9','%m');\n        -> '0000-09-00'\nmysql> SELECT STR_TO_DATE('9','%s');\n        -> '00:00:09'", "mysql> SELECT STR_TO_DATE('00/00/0000', '%m/%d/%Y');\n        -> '0000-00-00'\nmysql> SELECT STR_TO_DATE('04/31/2004', '%m/%d/%Y');\n        -> '2004-04-31'", "mysql> SET sql_mode = '';\nmysql> SELECT STR_TO_DATE('00/00/0000', '%m/%d/%Y');\n+---------------------------------------+\n| STR_TO_DATE('00/00/0000', '%m/%d/%Y') |\n+---------------------------------------+\n| 0000-00-00                            |\n+---------------------------------------+\nmysql> SET sql_mode = 'NO_ZERO_DATE';\nmysql> SELECT STR_TO_DATE('00/00/0000', '%m/%d/%Y');\n+---------------------------------------+\n| STR_TO_DATE('00/00/0000', '%m/%d/%Y') |\n+---------------------------------------+\n| NULL                                  |\n+---------------------------------------+\nmysql> SHOW WARNINGS\\G\n*************************** 1. row ***************************\n  Level: Warning\n   Code: 1411\nMessage: Incorrect datetime value: '00/00/0000' for function str_to_date", "mysql> SELECT STR_TO_DATE('200442 Monday', '%X%V %W');\n        -> '2004-10-18'"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_subdate", "Title": "SUBDATE()", "Feature": ["SUBDATE(date,INTERVAL\n          expr\nunit)", "SUBDATE(expr,days)"], "Description": ["\nSUBDATE(date,INTERVAL\n          expr\nunit),\n          SUBDATE(expr,days)\n", "\n          When invoked with the INTERVAL form of the\n          second argument, SUBDATE() is a\n          synonym for DATE_SUB(). For\n          information on the INTERVAL\nunit argument, see the discussion\n          for DATE_ADD().\n        ", "Press CTRL+C to copy mysql> SELECT DATE_SUB('2008-01-02', INTERVAL 31 DAY);\n        -> '2007-12-02'\nmysql> SELECT SUBDATE('2008-01-02', INTERVAL 31 DAY);\n        -> '2007-12-02'", "\n          The second form enables the use of an integer value for\n          days. In such cases, it is\n          interpreted as the number of days to be subtracted from the\n          date or datetime expression expr.\n        ", "Press CTRL+C to copy mysql> SELECT SUBDATE('2008-01-02 12:00:00', 31);\n        -> '2007-12-02 12:00:00'", "\n          This function returns NULL if any of its\n          arguments are NULL.\n        "], "Examples": ["mysql> SELECT DATE_SUB('2008-01-02', INTERVAL 31 DAY);\n        -> '2007-12-02'\nmysql> SELECT SUBDATE('2008-01-02', INTERVAL 31 DAY);\n        -> '2007-12-02'", "mysql> SELECT SUBDATE('2008-01-02 12:00:00', 31);\n        -> '2007-12-02 12:00:00'"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_subtime", "Title": "SUBTIME()", "Feature": ["SUBTIME(expr1,expr2)"], "Description": ["\nSUBTIME(expr1,expr2)\n", "\nSUBTIME() returns\n          expr1 \u2212\n          expr2 expressed as a value in the\n          same format as expr1.\n          expr1 is a time or datetime\n          expression, and expr2 is a time\n          expression.\n        ", "\n          Resolution of this function's return type is performed as\n          it is for the ADDTIME()\n          function; see the description of that function for more\n          information.\n        ", "Press CTRL+C to copy mysql> SELECT SUBTIME('2007-12-31 23:59:59.999999','1 1:1:1.000002');\n        -> '2007-12-30 22:58:58.999997'\nmysql> SELECT SUBTIME('01:00:00.999999', '02:00:00.999998');\n        -> '-00:59:59.999999'", "\n          This function returns NULL if\n          expr1 or\n          expr2 is NULL.\n        "], "Examples": ["mysql> SELECT SUBTIME('2007-12-31 23:59:59.999999','1 1:1:1.000002');\n        -> '2007-12-30 22:58:58.999997'\nmysql> SELECT SUBTIME('01:00:00.999999', '02:00:00.999998');\n        -> '-00:59:59.999999'"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_sysdate", "Title": "SYSDATE()", "Feature": ["SYSDATE([fsp])"], "Description": ["\nSYSDATE([fsp])\n", "\n          Returns the current date and time as a value in\n          'YYYY-MM-DD\n          hh:mm:ss' or\n          YYYYMMDDhhmmss format, depending on\n          whether the function is used in string or numeric context.\n        ", "\n          If the fsp argument is given to\n          specify a fractional seconds precision from 0 to 6, the return\n          value includes a fractional seconds part of that many digits.\n        ", "\nSYSDATE() returns the time at\n          which it executes. This differs from the behavior for\n          NOW(), which returns a constant\n          time that indicates the time at which the statement began to\n          execute. (Within a stored function or trigger,\n          NOW() returns the time at which\n          the function or triggering statement began to execute.)\n        ", "Press CTRL+C to copy mysql> SELECT NOW(), SLEEP(2), NOW();\n+---------------------+----------+---------------------+\n| NOW()               | SLEEP(2) | NOW()               |\n+---------------------+----------+---------------------+\n| 2006-04-12 13:47:36 |        0 | 2006-04-12 13:47:36 |\n+---------------------+----------+---------------------+\n\nmysql> SELECT SYSDATE(), SLEEP(2), SYSDATE();\n+---------------------+----------+---------------------+\n| SYSDATE()           | SLEEP(2) | SYSDATE()           |\n+---------------------+----------+---------------------+\n| 2006-04-12 13:47:44 |        0 | 2006-04-12 13:47:46 |\n+---------------------+----------+---------------------+", "\n          In addition, the SET TIMESTAMP statement\n          affects the value returned by\n          NOW() but not by\n          SYSDATE(). This means that\n          timestamp settings in the binary log have no effect on\n          invocations of SYSDATE().\n        ", "\n          Because SYSDATE() can return\n          different values even within the same statement, and is not\n          affected by SET TIMESTAMP, it is\n          nondeterministic and therefore unsafe for replication if\n          statement-based binary logging is used. If that is a problem,\n          you can use row-based logging.\n        ", "\n          Alternatively, you can use the\n          --sysdate-is-now option to\n          cause SYSDATE() to be an alias\n          for NOW(). This works if the\n          option is used on both the replication source server and the\n          replica.\n        ", "\n          The nondeterministic nature of\n          SYSDATE() also means that\n          indexes cannot be used for evaluating expressions that refer\n          to it.\n        "], "Examples": ["mysql> SELECT NOW(), SLEEP(2), NOW();\n+---------------------+----------+---------------------+\n| NOW()               | SLEEP(2) | NOW()               |\n+---------------------+----------+---------------------+\n| 2006-04-12 13:47:36 |        0 | 2006-04-12 13:47:36 |\n+---------------------+----------+---------------------+\n\nmysql> SELECT SYSDATE(), SLEEP(2), SYSDATE();\n+---------------------+----------+---------------------+\n| SYSDATE()           | SLEEP(2) | SYSDATE()           |\n+---------------------+----------+---------------------+\n| 2006-04-12 13:47:44 |        0 | 2006-04-12 13:47:46 |\n+---------------------+----------+---------------------+"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_time", "Title": "TIME()", "Feature": ["TIME(expr)"], "Description": ["\nTIME(expr)\n", "\n          Extracts the time part of the time or datetime expression\n          expr and returns it as a string.\n          Returns NULL if\n          expr is NULL.\n        ", "\n          This function is unsafe for statement-based replication. A\n          warning is logged if you use this function when\n          binlog_format is set to\n          STATEMENT.\n        ", "Press CTRL+C to copy mysql> SELECT TIME('2003-12-31 01:02:03');\n        -> '01:02:03'\nmysql> SELECT TIME('2003-12-31 01:02:03.000123');\n        -> '01:02:03.000123'"], "Examples": ["mysql> SELECT TIME('2003-12-31 01:02:03');\n        -> '01:02:03'\nmysql> SELECT TIME('2003-12-31 01:02:03.000123');\n        -> '01:02:03.000123'"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_time-format", "Title": "TIME_FORMAT()", "Feature": ["TIME_FORMAT(time,format)"], "Description": ["\nTIME_FORMAT(time,format)\n", "\n          This is used like the\n          DATE_FORMAT() function, but the\n          format string may contain format\n          specifiers only for hours, minutes, seconds, and microseconds.\n          Other specifiers produce a NULL or\n          0. TIME_FORMAT() returns\n          NULL if time or\n          format is NULL.\n        ", "\n          If the time value contains an hour\n          part that is greater than 23, the\n          %H and %k hour format\n          specifiers produce a value larger than the usual range of\n          0..23. The other hour format specifiers\n          produce the hour value modulo 12.\n        ", "Press CTRL+C to copy mysql> SELECT TIME_FORMAT('100:00:00', '%H %k %h %I %l');\n        -> '100 100 04 04 4'"], "Examples": ["mysql> SELECT TIME_FORMAT('100:00:00', '%H %k %h %I %l');\n        -> '100 100 04 04 4'"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_time-to-sec", "Title": "TIME_TO_SEC()", "Feature": ["TIME_TO_SEC(time)"], "Description": ["\nTIME_TO_SEC(time)\n", "\n          Returns the time argument,\n          converted to seconds. Returns NULL if\n          time is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT TIME_TO_SEC('22:23:00');\n        -> 80580\nmysql> SELECT TIME_TO_SEC('00:39:38');\n        -> 2378"], "Examples": ["mysql> SELECT TIME_TO_SEC('22:23:00');\n        -> 80580\nmysql> SELECT TIME_TO_SEC('00:39:38');\n        -> 2378"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_timediff", "Title": "TIMEDIFF()", "Feature": ["TIMEDIFF(expr1,expr2)"], "Description": ["\nTIMEDIFF(expr1,expr2)\n", "\nTIMEDIFF() returns\n          expr1 \u2212\n          expr2 expressed as a time value.\n          expr1 and\n          expr2 are strings which are\n          converted to TIME or\n          DATETIME expressions; these must be of the\n          same type following conversion. Returns\n          NULL if expr1 or\n          expr2 is NULL.\n        ", "\n          The result returned by TIMEDIFF() is\n          limited to the range allowed for\n          TIME values. Alternatively, you\n          can use either of the functions\n          TIMESTAMPDIFF() and\n          UNIX_TIMESTAMP(), both of which\n          return integers.\n        ", "Press CTRL+C to copy mysql> SELECT TIMEDIFF('2000-01-01 00:00:00',\n    ->                 '2000-01-01 00:00:00.000001');\n        -> '-00:00:00.000001'\nmysql> SELECT TIMEDIFF('2008-12-31 23:59:59.000001',\n    ->                 '2008-12-30 01:01:01.000002');\n        -> '46:58:57.999999'"], "Examples": ["mysql> SELECT TIMEDIFF('2000-01-01 00:00:00',\n    ->                 '2000-01-01 00:00:00.000001');\n        -> '-00:00:00.000001'\nmysql> SELECT TIMEDIFF('2008-12-31 23:59:59.000001',\n    ->                 '2008-12-30 01:01:01.000002');\n        -> '46:58:57.999999'"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_timestamp", "Title": "TIMESTAMP()", "Feature": ["TIMESTAMP(expr)", "TIMESTAMP(expr1,expr2)"], "Description": ["\nTIMESTAMP(expr),\n          TIMESTAMP(expr1,expr2)\n", "\n          With a single argument, this function returns the date or\n          datetime expression expr as a\n          datetime value. With two arguments, it adds the time\n          expression expr2 to the date or\n          datetime expression expr1 and\n          returns the result as a datetime value. Returns\n          NULL if expr,\n          expr1, or\n          expr2 is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT TIMESTAMP('2003-12-31');\n        -> '2003-12-31 00:00:00'\nmysql> SELECT TIMESTAMP('2003-12-31 12:00:00','12:00:00');\n        -> '2004-01-01 00:00:00'"], "Examples": ["mysql> SELECT TIMESTAMP('2003-12-31');\n        -> '2003-12-31 00:00:00'\nmysql> SELECT TIMESTAMP('2003-12-31 12:00:00','12:00:00');\n        -> '2004-01-01 00:00:00'"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_timestampadd", "Title": "TIMESTAMPADD()", "Feature": ["TIMESTAMPADD(unit,interval,datetime_expr)"], "Description": ["\nTIMESTAMPADD(unit,interval,datetime_expr)\n", "\n          Adds the integer expression\n          interval to the date or datetime\n          expression datetime_expr. The unit\n          for interval is given by the\n          unit argument, which should be one\n          of the following values: MICROSECOND\n          (microseconds), SECOND,\n          MINUTE, HOUR,\n          DAY, WEEK,\n          MONTH, QUARTER, or\n          YEAR.\n        ", "\n          The unit value may be specified\n          using one of keywords as shown, or with a prefix of\n          SQL_TSI_. For example,\n          DAY and SQL_TSI_DAY both\n          are legal.\n        ", "\n          This function returns NULL if\n          interval or\n          datetime_expr is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT TIMESTAMPADD(MINUTE, 1, '2003-01-02');\n        -> '2003-01-02 00:01:00'\nmysql> SELECT TIMESTAMPADD(WEEK,1,'2003-01-02');\n        -> '2003-01-09'", "\n          When adding a MONTH interval to a\n          DATE or DATETIME value,\n          and the resulting date includes a day that does not exist in\n          the given month, the day is adjusted to the last day of the\n          month, as shown here:\n        ", "Press CTRL+C to copy mysql> SELECT TIMESTAMPADD(MONTH, 1, DATE '2024-03-30') AS t1, \n     >        TIMESTAMPADD(MONTH, 1, DATE '2024-03-31') AS t2;\n+------------+------------+\n| t1         | t2         |\n+------------+------------+\n| 2024-04-30 | 2024-04-30 |\n+------------+------------+\n1 row in set (0.00 sec)"], "Examples": ["mysql> SELECT TIMESTAMPADD(MINUTE, 1, '2003-01-02');\n        -> '2003-01-02 00:01:00'\nmysql> SELECT TIMESTAMPADD(WEEK,1,'2003-01-02');\n        -> '2003-01-09'", "mysql> SELECT TIMESTAMPADD(MONTH, 1, DATE '2024-03-30') AS t1, \n     >        TIMESTAMPADD(MONTH, 1, DATE '2024-03-31') AS t2;\n+------------+------------+\n| t1         | t2         |\n+------------+------------+\n| 2024-04-30 | 2024-04-30 |\n+------------+------------+\n1 row in set (0.00 sec)"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_timestampdiff", "Title": "TIMESTAMPDIFF()", "Feature": ["TIMESTAMPDIFF(unit,datetime_expr1,datetime_expr2)"], "Description": ["\nTIMESTAMPDIFF(unit,datetime_expr1,datetime_expr2)\n", "\n          Returns datetime_expr2 \u2212\n          datetime_expr1, where\n          datetime_expr1 and\n          datetime_expr2 are date or datetime\n          expressions. One expression may be a date and the other a\n          datetime; a date value is treated as a datetime having the\n          time part '00:00:00' where necessary. The\n          unit for the result (an integer) is given by the\n          unit argument. The legal values for\n          unit are the same as those listed\n          in the description of the\n          TIMESTAMPADD() function.\n        ", "\n          This function returns NULL if\n          datetime_expr1 or\n          datetime_expr2 is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT TIMESTAMPDIFF(MONTH,'2003-02-01','2003-05-01');\n        -> 3\nmysql> SELECT TIMESTAMPDIFF(YEAR,'2002-05-01','2001-01-01');\n        -> -1\nmysql> SELECT TIMESTAMPDIFF(MINUTE,'2003-02-01','2003-05-01 12:05:55');\n        -> 128885", "\n\nNote\n\n\n            The order of the date or datetime arguments for this\n            function is the opposite of that used with the\n            TIMESTAMP() function when\n            invoked with 2 arguments.\n\n"], "Examples": ["mysql> SELECT TIMESTAMPDIFF(MONTH,'2003-02-01','2003-05-01');\n        -> 3\nmysql> SELECT TIMESTAMPDIFF(YEAR,'2002-05-01','2001-01-01');\n        -> -1\nmysql> SELECT TIMESTAMPDIFF(MINUTE,'2003-02-01','2003-05-01 12:05:55');\n        -> 128885"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_to-days", "Title": "TO_DAYS()", "Feature": ["TO_DAYS(date)"], "Description": ["\nTO_DAYS(date)\n", "\n          Given a date date, returns a day\n          number (the number of days since year 0). Returns\n          NULL if date is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT TO_DAYS(950501);\n        -> 728779\nmysql> SELECT TO_DAYS('2007-10-07');\n        -> 733321", "\nTO_DAYS() is not intended for\n          use with values that precede the advent of the Gregorian\n          calendar (1582), because it does not take into account the\n          days that were lost when the calendar was changed. For dates\n          before 1582 (and possibly a later year in other locales),\n          results from this function are not reliable. See\n          Section\u00a013.2.7, \u201cWhat Calendar Is Used By MySQL?\u201d, for details.\n        ", "\n          Remember that MySQL converts two-digit year values in dates to\n          four-digit form using the rules in\n          Section\u00a013.2, \u201cDate and Time Data Types\u201d. For example,\n          '2008-10-07' and\n          '08-10-07' are seen as identical dates:\n        ", "Press CTRL+C to copy mysql> SELECT TO_DAYS('2008-10-07'), TO_DAYS('08-10-07');\n        -> 733687, 733687", "\n          In MySQL, the zero date is defined as\n          '0000-00-00', even though this date is\n          itself considered invalid. This means that, for\n          '0000-00-00' and\n          '0000-01-01',\n          TO_DAYS() returns the values\n          shown here:\n        ", "Press CTRL+C to copy mysql> SELECT TO_DAYS('0000-00-00');\n+-----------------------+\n| to_days('0000-00-00') |\n+-----------------------+\n|                  NULL |\n+-----------------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS;\n+---------+------+----------------------------------------+\n| Level   | Code | Message                                |\n+---------+------+----------------------------------------+\n| Warning | 1292 | Incorrect datetime value: '0000-00-00' |\n+---------+------+----------------------------------------+\n1 row in set (0.00 sec)\n\n\nmysql> SELECT TO_DAYS('0000-01-01');\n+-----------------------+\n| to_days('0000-01-01') |\n+-----------------------+\n|                     1 |\n+-----------------------+\n1 row in set (0.00 sec)", "\n          This is true whether or not the\n          ALLOW_INVALID_DATES SQL\n          server mode is enabled.\n        "], "Examples": ["mysql> SELECT TO_DAYS(950501);\n        -> 728779\nmysql> SELECT TO_DAYS('2007-10-07');\n        -> 733321", "mysql> SELECT TO_DAYS('2008-10-07'), TO_DAYS('08-10-07');\n        -> 733687, 733687", "mysql> SELECT TO_DAYS('0000-00-00');\n+-----------------------+\n| to_days('0000-00-00') |\n+-----------------------+\n|                  NULL |\n+-----------------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS;\n+---------+------+----------------------------------------+\n| Level   | Code | Message                                |\n+---------+------+----------------------------------------+\n| Warning | 1292 | Incorrect datetime value: '0000-00-00' |\n+---------+------+----------------------------------------+\n1 row in set (0.00 sec)\n\n\nmysql> SELECT TO_DAYS('0000-01-01');\n+-----------------------+\n| to_days('0000-01-01') |\n+-----------------------+\n|                     1 |\n+-----------------------+\n1 row in set (0.00 sec)"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_to-seconds", "Title": "TO_SECONDS()", "Feature": ["TO_SECONDS(expr)"], "Description": ["\nTO_SECONDS(expr)\n", "\n          Given a date or datetime expr,\n          returns the number of seconds since the year 0. If\n          expr is not a valid date or\n          datetime value (including NULL), it returns\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT TO_SECONDS(950501);\n        -> 62966505600\nmysql> SELECT TO_SECONDS('2009-11-29');\n        -> 63426672000\nmysql> SELECT TO_SECONDS('2009-11-29 13:43:32');\n        -> 63426721412\nmysql> SELECT TO_SECONDS( NOW() );\n        -> 63426721458", "\n          Like TO_DAYS(),\n          TO_SECONDS() is not intended for use with\n          values that precede the advent of the Gregorian calendar\n          (1582), because it does not take into account the days that\n          were lost when the calendar was changed. For dates before 1582\n          (and possibly a later year in other locales), results from\n          this function are not reliable. See\n          Section\u00a013.2.7, \u201cWhat Calendar Is Used By MySQL?\u201d, for details.\n        ", "\n          Like TO_DAYS(),\n          TO_SECONDS(), converts two-digit year\n          values in dates to four-digit form using the rules in\n          Section\u00a013.2, \u201cDate and Time Data Types\u201d.\n        ", "\n          In MySQL, the zero date is defined as\n          '0000-00-00', even though this date is\n          itself considered invalid. This means that, for\n          '0000-00-00' and\n          '0000-01-01',\n          TO_SECONDS() returns the values\n          shown here:\n        ", "Press CTRL+C to copy mysql> SELECT TO_SECONDS('0000-00-00');\n+--------------------------+\n| TO_SECONDS('0000-00-00') |\n+--------------------------+\n|                     NULL |\n+--------------------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS;\n+---------+------+----------------------------------------+\n| Level   | Code | Message                                |\n+---------+------+----------------------------------------+\n| Warning | 1292 | Incorrect datetime value: '0000-00-00' |\n+---------+------+----------------------------------------+\n1 row in set (0.00 sec)\n\n\nmysql> SELECT TO_SECONDS('0000-01-01');\n+--------------------------+\n| TO_SECONDS('0000-01-01') |\n+--------------------------+\n|                    86400 |\n+--------------------------+\n1 row in set (0.00 sec)", "\n          This is true whether or not the\n          ALLOW_INVALID_DATES SQL\n          server mode is enabled.\n        "], "Examples": ["mysql> SELECT TO_SECONDS(950501);\n        -> 62966505600\nmysql> SELECT TO_SECONDS('2009-11-29');\n        -> 63426672000\nmysql> SELECT TO_SECONDS('2009-11-29 13:43:32');\n        -> 63426721412\nmysql> SELECT TO_SECONDS( NOW() );\n        -> 63426721458", "mysql> SELECT TO_SECONDS('0000-00-00');\n+--------------------------+\n| TO_SECONDS('0000-00-00') |\n+--------------------------+\n|                     NULL |\n+--------------------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS;\n+---------+------+----------------------------------------+\n| Level   | Code | Message                                |\n+---------+------+----------------------------------------+\n| Warning | 1292 | Incorrect datetime value: '0000-00-00' |\n+---------+------+----------------------------------------+\n1 row in set (0.00 sec)\n\n\nmysql> SELECT TO_SECONDS('0000-01-01');\n+--------------------------+\n| TO_SECONDS('0000-01-01') |\n+--------------------------+\n|                    86400 |\n+--------------------------+\n1 row in set (0.00 sec)"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_unix-timestamp", "Title": "UNIX_TIMESTAMP()", "Feature": ["UNIX_TIMESTAMP([date])"], "Description": ["\nUNIX_TIMESTAMP([date])\n", "\n          If UNIX_TIMESTAMP() is called\n          with no date argument, it returns a\n          Unix timestamp representing seconds since '1970-01-01\n          00:00:00' UTC.\n        ", "\n          If UNIX_TIMESTAMP() is called\n          with a date argument, it returns\n          the value of the argument as seconds since\n          '1970-01-01 00:00:00' UTC. The server\n          interprets date as a value in the\n          session time zone and converts it to an internal Unix\n          timestamp value in UTC. (Clients can set the session time zone\n          as described in Section\u00a07.1.15, \u201cMySQL Server Time Zone Support\u201d.) The\n          date argument may be a\n          DATE,\n          DATETIME, or\n          TIMESTAMP string, or a number\n          in YYMMDD,\n          YYMMDDhhmmss,\n          YYYYMMDD, or\n          YYYYMMDDhhmmss format. If the\n          argument includes a time part, it may optionally include a\n          fractional seconds part.\n        ", "\n          The return value is an integer if no argument is given or the\n          argument does not include a fractional seconds part, or\n          DECIMAL if an argument is given\n          that includes a fractional seconds part.\n        ", "\n          When the date argument is a\n          TIMESTAMP column,\n          UNIX_TIMESTAMP() returns the\n          internal timestamp value directly, with no implicit\n          \u201cstring-to-Unix-timestamp\u201d conversion.\n        ", "\n          Prior to MySQL 8.0.28, the valid range of argument values is\n          the same as for the TIMESTAMP\n          data type: '1970-01-01 00:00:01.000000' UTC\n          to '2038-01-19 03:14:07.999999' UTC. This\n          is also the case in MySQL 8.0.28 and later for 32-bit\n          platforms. For MySQL 8.0.28 and later running on 64-bit\n          platforms, the valid range of argument values for\n          UNIX_TIMESTAMP() is '1970-01-01\n          00:00:01.000000' UTC to '3001-01-19\n          03:14:07.999999' UTC (corresponding to\n          32536771199.999999 seconds).\n        ", "\n          Regardless of MySQL version or platform architecture, if you\n          pass an out-of-range date to\n          UNIX_TIMESTAMP(), it returns\n          0. If date is\n          NULL, it returns NULL.\n        ", "Press CTRL+C to copy mysql> SELECT UNIX_TIMESTAMP();\n        -> 1447431666\nmysql> SELECT UNIX_TIMESTAMP('2015-11-13 10:20:19');\n        -> 1447431619\nmysql> SELECT UNIX_TIMESTAMP('2015-11-13 10:20:19.012');\n        -> 1447431619.012", "\n          If you use UNIX_TIMESTAMP() and\n          FROM_UNIXTIME() to convert\n          between values in a non-UTC time zone and Unix timestamp\n          values, the conversion is lossy because the mapping is not\n          one-to-one in both directions. For example, due to conventions\n          for local time zone changes such as Daylight Saving Time\n          (DST), it is possible for\n          UNIX_TIMESTAMP() to map two\n          values that are distinct in a non-UTC time zone to the same\n          Unix timestamp value.\n          FROM_UNIXTIME() maps that value\n          back to only one of the original values. Here is an example,\n          using values that are distinct in the MET\n          time zone:\n        ", "Press CTRL+C to copy mysql> SET time_zone = 'MET';\nmysql> SELECT UNIX_TIMESTAMP('2005-03-27 03:00:00');\n+---------------------------------------+\n| UNIX_TIMESTAMP('2005-03-27 03:00:00') |\n+---------------------------------------+\n|                            1111885200 |\n+---------------------------------------+\nmysql> SELECT UNIX_TIMESTAMP('2005-03-27 02:00:00');\n+---------------------------------------+\n| UNIX_TIMESTAMP('2005-03-27 02:00:00') |\n+---------------------------------------+\n|                            1111885200 |\n+---------------------------------------+\nmysql> SELECT FROM_UNIXTIME(1111885200);\n+---------------------------+\n| FROM_UNIXTIME(1111885200) |\n+---------------------------+\n| 2005-03-27 03:00:00       |\n+---------------------------+", "\n\nNote\n\n\n            To use named time zones such as 'MET' or\n            'Europe/Amsterdam', the time zone tables\n            must be properly set up. For instructions, see\n            Section\u00a07.1.15, \u201cMySQL Server Time Zone Support\u201d.\n\n", "\n          If you want to subtract\n          UNIX_TIMESTAMP() columns, you\n          might want to cast them to signed integers. See\n          Section\u00a014.10, \u201cCast Functions and Operators\u201d.\n        "], "Examples": ["mysql> SELECT UNIX_TIMESTAMP();\n        -> 1447431666\nmysql> SELECT UNIX_TIMESTAMP('2015-11-13 10:20:19');\n        -> 1447431619\nmysql> SELECT UNIX_TIMESTAMP('2015-11-13 10:20:19.012');\n        -> 1447431619.012", "mysql> SET time_zone = 'MET';\nmysql> SELECT UNIX_TIMESTAMP('2005-03-27 03:00:00');\n+---------------------------------------+\n| UNIX_TIMESTAMP('2005-03-27 03:00:00') |\n+---------------------------------------+\n|                            1111885200 |\n+---------------------------------------+\nmysql> SELECT UNIX_TIMESTAMP('2005-03-27 02:00:00');\n+---------------------------------------+\n| UNIX_TIMESTAMP('2005-03-27 02:00:00') |\n+---------------------------------------+\n|                            1111885200 |\n+---------------------------------------+\nmysql> SELECT FROM_UNIXTIME(1111885200);\n+---------------------------+\n| FROM_UNIXTIME(1111885200) |\n+---------------------------+\n| 2005-03-27 03:00:00       |\n+---------------------------+"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_utc-date", "Title": "UTC_DATE()", "Feature": ["UTC_DATE", "UTC_DATE()"], "Description": ["\nUTC_DATE,\n          UTC_DATE()\n", "\n          Returns the current UTC date as a value in\n          'YYYY-MM-DD' or\n          YYYYMMDD format, depending on\n          whether the function is used in string or numeric context.\n        ", "Press CTRL+C to copy mysql> SELECT UTC_DATE(), UTC_DATE() + 0;\n        -> '2003-08-14', 20030814"], "Examples": ["mysql> SELECT UTC_DATE(), UTC_DATE() + 0;\n        -> '2003-08-14', 20030814"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_utc-time", "Title": "UTC_TIME()", "Feature": ["UTC_TIME", "UTC_TIME([fsp])"], "Description": ["\nUTC_TIME,\n          UTC_TIME([fsp])\n", "\n          Returns the current UTC time as a value in\n          'hh:mm:ss' or\n          hhmmss format, depending on whether\n          the function is used in string or numeric context.\n        ", "\n          If the fsp argument is given to\n          specify a fractional seconds precision from 0 to 6, the return\n          value includes a fractional seconds part of that many digits.\n        ", "Press CTRL+C to copy mysql> SELECT UTC_TIME(), UTC_TIME() + 0;\n        -> '18:07:53', 180753.000000"], "Examples": ["mysql> SELECT UTC_TIME(), UTC_TIME() + 0;\n        -> '18:07:53', 180753.000000"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_utc-timestamp", "Title": "UTC_TIMESTAMP()", "Feature": ["UTC_TIMESTAMP", "UTC_TIMESTAMP([fsp])"], "Description": ["\nUTC_TIMESTAMP,\n          UTC_TIMESTAMP([fsp])\n", "\n          Returns the current UTC date and time as a value in\n          'YYYY-MM-DD\n          hh:mm:ss' or\n          YYYYMMDDhhmmss format, depending on\n          whether the function is used in string or numeric context.\n        ", "\n          If the fsp argument is given to\n          specify a fractional seconds precision from 0 to 6, the return\n          value includes a fractional seconds part of that many digits.\n        ", "Press CTRL+C to copy mysql> SELECT UTC_TIMESTAMP(), UTC_TIMESTAMP() + 0;\n        -> '2003-08-14 18:08:04', 20030814180804.000000"], "Examples": ["mysql> SELECT UTC_TIMESTAMP(), UTC_TIMESTAMP() + 0;\n        -> '2003-08-14 18:08:04', 20030814180804.000000"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_week", "Title": "WEEK()", "Feature": ["WEEK(date[,mode])"], "Description": ["\nWEEK(date[,mode])\n", "\n          This function returns the week number for\n          date. The two-argument form of\n          WEEK() enables you to specify\n          whether the week starts on Sunday or Monday and whether the\n          return value should be in the range from 0\n          to 53 or from 1 to\n          53. If the mode\n          argument is omitted, the value of the\n          default_week_format system\n          variable is used. See\n          Section\u00a07.1.8, \u201cServer System Variables\u201d. For a\n          NULL date value, the function returns\n          NULL.\n        ", "\n          The following table describes how the\n          mode argument works.\n", "\n\nMode\nFirst day of week\nRange\nWeek 1 is the first week \u2026\n\n0\nSunday\n0-53\nwith a Sunday in this year\n\n1\nMonday\n0-53\nwith 4 or more days this year\n\n2\nSunday\n1-53\nwith a Sunday in this year\n\n3\nMonday\n1-53\nwith 4 or more days this year\n\n4\nSunday\n0-53\nwith 4 or more days this year\n\n5\nMonday\n0-53\nwith a Monday in this year\n\n6\nSunday\n1-53\nwith 4 or more days this year\n\n7\nMonday\n1-53\nwith a Monday in this year\n\n", "\n          For mode values with a meaning of\n          \u201cwith 4 or more days this year,\u201d weeks are\n          numbered according to ISO 8601:1988:\n", "\n\n              If the week containing January 1 has 4 or more days in the\n              new year, it is week 1.\n            \n              Otherwise, it is the last week of the previous year, and\n              the next week is week 1.\n\n", "Press CTRL+C to copy mysql> SELECT WEEK('2008-02-20');\n        -> 7\nmysql> SELECT WEEK('2008-02-20',0);\n        -> 7\nmysql> SELECT WEEK('2008-02-20',1);\n        -> 8\nmysql> SELECT WEEK('2008-12-31',1);\n        -> 53", "\n          If a date falls in the last week of the previous year, MySQL\n          returns 0 if you do not use\n          2, 3,\n          6, or 7 as the optional\n          mode argument:\n        ", "Press CTRL+C to copy mysql> SELECT YEAR('2000-01-01'), WEEK('2000-01-01',0);\n        -> 2000, 0", "\n          One might argue that WEEK()\n          should return 52 because the given date\n          actually occurs in the 52nd week of 1999.\n          WEEK() returns\n          0 instead so that the return value is\n          \u201cthe week number in the given year.\u201d This makes\n          use of the WEEK() function\n          reliable when combined with other functions that extract a\n          date part from a date.\n        ", "\n          If you prefer a result evaluated with respect to the year that\n          contains the first day of the week for the given date, use\n          0, 2,\n          5, or 7 as the optional\n          mode argument.\n        ", "Press CTRL+C to copy mysql> SELECT WEEK('2000-01-01',2);\n        -> 52", "\n          Alternatively, use the\n          YEARWEEK() function:\n        ", "Press CTRL+C to copy mysql> SELECT YEARWEEK('2000-01-01');\n        -> 199952\nmysql> SELECT MID(YEARWEEK('2000-01-01'),5,2);\n        -> '52'"], "Examples": ["mysql> SELECT WEEK('2008-02-20');\n        -> 7\nmysql> SELECT WEEK('2008-02-20',0);\n        -> 7\nmysql> SELECT WEEK('2008-02-20',1);\n        -> 8\nmysql> SELECT WEEK('2008-12-31',1);\n        -> 53", "mysql> SELECT YEAR('2000-01-01'), WEEK('2000-01-01',0);\n        -> 2000, 0", "mysql> SELECT WEEK('2000-01-01',2);\n        -> 52", "mysql> SELECT YEARWEEK('2000-01-01');\n        -> 199952\nmysql> SELECT MID(YEARWEEK('2000-01-01'),5,2);\n        -> '52'"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_weekday", "Title": "WEEKDAY()", "Feature": ["WEEKDAY(date)"], "Description": ["\nWEEKDAY(date)\n", "\n          Returns the weekday index for date\n          (0 = Monday, 1 =\n          Tuesday, \u2026 6 = Sunday). Returns\n          NULL if date is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT WEEKDAY('2008-02-03 22:23:00');\n        -> 6\nmysql> SELECT WEEKDAY('2007-11-06');\n        -> 1"], "Examples": ["mysql> SELECT WEEKDAY('2008-02-03 22:23:00');\n        -> 6\nmysql> SELECT WEEKDAY('2007-11-06');\n        -> 1"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_weekofyear", "Title": "WEEKOFYEAR()", "Feature": ["WEEKOFYEAR(date)"], "Description": ["\nWEEKOFYEAR(date)\n", "\n          Returns the calendar week of the date as a number in the range\n          from 1 to 53. Returns\n          NULL if date is\n          NULL.\n        ", "\nWEEKOFYEAR() is a compatibility\n          function that is equivalent to\n          WEEK(date,3).\n        ", "Press CTRL+C to copy mysql> SELECT WEEKOFYEAR('2008-02-20');\n        -> 8"], "Examples": ["mysql> SELECT WEEKOFYEAR('2008-02-20');\n        -> 8"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_year", "Title": "YEAR()", "Feature": ["YEAR(date)"], "Description": ["\nYEAR(date)\n", "\n          Returns the year for date, in the\n          range 1000 to 9999, or\n          0 for the \u201czero\u201d date. Returns\n          NULL if date is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT YEAR('1987-01-01');\n        -> 1987"], "Examples": ["mysql> SELECT YEAR('1987-01-01');\n        -> 1987"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_yearweek", "Title": "YEARWEEK()", "Feature": ["YEARWEEK(date)", "YEARWEEK(date,mode)"], "Description": ["\nYEARWEEK(date),\n          YEARWEEK(date,mode)\n", "\n          Returns year and week for a date. The year in the result may\n          be different from the year in the date argument for the first\n          and the last week of the year. Returns NULL\n          if date is NULL.\n        ", "\n          The mode argument works exactly\n          like the mode argument to\n          WEEK(). For the single-argument\n          syntax, a mode value of 0 is used.\n          Unlike WEEK(), the value of\n          default_week_format does not\n          influence YEARWEEK().\n        ", "Press CTRL+C to copy mysql> SELECT YEARWEEK('1987-01-01');\n        -> 198652", "\n          The week number is different from what the\n          WEEK() function would return\n          (0) for optional arguments\n          0 or 1, as\n          WEEK() then returns the week in\n          the context of the given year.\n"], "Examples": ["mysql> SELECT YEARWEEK('1987-01-01');\n        -> 198652"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_adddate", "Title": "ADDDATE()", "Feature": ["ADDDATE(date,INTERVAL\n          expr\nunit)", "ADDDATE(date,days)"], "Description": ["\nADDDATE(date,INTERVAL\n          expr\nunit),\n          ADDDATE(date,days)\n", "\n          When invoked with the INTERVAL form of the\n          second argument, ADDDATE() is a\n          synonym for DATE_ADD(). The\n          related function SUBDATE() is a\n          synonym for DATE_SUB(). For\n          information on the INTERVAL\nunit argument, see\n          Temporal Intervals.\n        ", "Press CTRL+C to copy mysql> SELECT DATE_ADD('2008-01-02', INTERVAL 31 DAY);\n        -> '2008-02-02'\nmysql> SELECT ADDDATE('2008-01-02', INTERVAL 31 DAY);\n        -> '2008-02-02'", "\n          When invoked with the days form of\n          the second argument, MySQL treats it as an integer number of\n          days to be added to expr.\n        ", "Press CTRL+C to copy mysql> SELECT ADDDATE('2008-01-02', 31);\n        -> '2008-02-02'", "\n          This function returns NULL if\n          date or\n          days is NULL.\n        "], "Examples": ["mysql> SELECT DATE_ADD('2008-01-02', INTERVAL 31 DAY);\n        -> '2008-02-02'\nmysql> SELECT ADDDATE('2008-01-02', INTERVAL 31 DAY);\n        -> '2008-02-02'", "mysql> SELECT ADDDATE('2008-01-02', 31);\n        -> '2008-02-02'"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_addtime", "Title": "ADDTIME()", "Feature": ["ADDTIME(expr1,expr2)"], "Description": ["\nADDTIME(expr1,expr2)\n", "\nADDTIME() adds\n          expr2 to\n          expr1 and returns the result.\n          expr1 is a time or datetime\n          expression, and expr2 is a time\n          expression. Returns NULL if\n          expr1or\n          expr2 is NULL.\n        ", "\n          Beginning with MySQL 8.0.28, the return type of this function\n          and of the SUBTIME() function\n          is determined as follows:\n", "\n\n              If the first argument is a dynamic parameter (such as in a\n              prepared statement), the return type is\n              TIME.\n            \n              Otherwise, the resolved type of the function is derived\n              from the resolved type of the first argument.\n\n", "Press CTRL+C to copy mysql> SELECT ADDTIME('2007-12-31 23:59:59.999999', '1 1:1:1.000002');\n        -> '2008-01-02 01:01:01.000001'\nmysql> SELECT ADDTIME('01:00:00.999999', '02:00:00.999998');\n        -> '03:00:01.999997'"], "Examples": ["mysql> SELECT ADDTIME('2007-12-31 23:59:59.999999', '1 1:1:1.000002');\n        -> '2008-01-02 01:01:01.000001'\nmysql> SELECT ADDTIME('01:00:00.999999', '02:00:00.999998');\n        -> '03:00:01.999997'"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_convert-tz", "Title": "CONVERT_TZ()", "Feature": ["CONVERT_TZ(dt,from_tz,to_tz)"], "Description": ["\nCONVERT_TZ(dt,from_tz,to_tz)\n", "\nCONVERT_TZ() converts a\n          datetime value dt from the time\n          zone given by from_tz to the time\n          zone given by to_tz and returns the\n          resulting value. Time zones are specified as described in\n          Section\u00a07.1.15, \u201cMySQL Server Time Zone Support\u201d. This function returns\n          NULL if any of the arguments are invalid,\n          or if any of them are NULL.\n        ", "\n          On 32-bit platforms, the supported range of values for this\n          function is the same as for the\n          TIMESTAMP type (see\n          Section\u00a013.2.1, \u201cDate and Time Data Type Syntax\u201d, for range\n          information). On 64-bit platforms, beginning with MySQL\n          8.0.28, the maximum supported value is '3001-01-18\n          23:59:59.999999' UTC.\n        ", "\n          Regardless of platform or MySQL version, if the value falls\n          out of the supported range when converted from\n          from_tz to UTC, no conversion\n          occurs.\n        ", "Press CTRL+C to copy mysql> SELECT CONVERT_TZ('2004-01-01 12:00:00','GMT','MET');\n        -> '2004-01-01 13:00:00'\nmysql> SELECT CONVERT_TZ('2004-01-01 12:00:00','+00:00','+10:00');\n        -> '2004-01-01 22:00:00'", "\n\nNote\n\n\n            To use named time zones such as 'MET' or\n            'Europe/Amsterdam', the time zone tables\n            must be properly set up. For instructions, see\n            Section\u00a07.1.15, \u201cMySQL Server Time Zone Support\u201d.\n\n"], "Examples": ["mysql> SELECT CONVERT_TZ('2004-01-01 12:00:00','GMT','MET');\n        -> '2004-01-01 13:00:00'\nmysql> SELECT CONVERT_TZ('2004-01-01 12:00:00','+00:00','+10:00');\n        -> '2004-01-01 22:00:00'"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_curdate", "Title": "CURDATE()", "Feature": ["CURDATE()"], "Description": ["\nCURDATE()\n", "\n          Returns the current date as a value in\n          'YYYY-MM-DD' or\n          YYYYMMDD format, depending on\n          whether the function is used in string or numeric context.\n        ", "Press CTRL+C to copy mysql> SELECT CURDATE();\n        -> '2008-06-13'\nmysql> SELECT CURDATE() + 0;\n        -> 20080613"], "Examples": ["mysql> SELECT CURDATE();\n        -> '2008-06-13'\nmysql> SELECT CURDATE() + 0;\n        -> 20080613"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_current-date", "Title": "CURRENT_DATE(), CURRENT_DATE", "Feature": ["CURRENT_DATE", "CURRENT_DATE()"], "Description": ["\nCURRENT_DATE,\n          CURRENT_DATE()\n", "\nCURRENT_DATE and\n          CURRENT_DATE() are synonyms for\n          CURDATE().\n        "], "Examples": [], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_current-time", "Title": "CURRENT_TIME(), CURRENT_TIME", "Feature": ["CURRENT_TIME", "CURRENT_TIME([fsp])"], "Description": ["\nCURRENT_TIME,\n          CURRENT_TIME([fsp])\n", "\nCURRENT_TIME and\n          CURRENT_TIME() are synonyms for\n          CURTIME().\n        "], "Examples": [], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_current-timestamp", "Title": "CURRENT_TIMESTAMP(), CURRENT_TIMESTAMP", "Feature": ["CURRENT_TIMESTAMP", "CURRENT_TIMESTAMP([fsp])"], "Description": ["\nCURRENT_TIMESTAMP,\n          CURRENT_TIMESTAMP([fsp])\n", "\nCURRENT_TIMESTAMP and\n          CURRENT_TIMESTAMP() are\n          synonyms for NOW().\n        "], "Examples": [], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_curtime", "Title": "CURTIME()", "Feature": ["CURTIME([fsp])"], "Description": ["\nCURTIME([fsp])\n", "\n          Returns the current time as a value in\n          'hh:mm:ss' or\n          hhmmss format, depending on whether\n          the function is used in string or numeric context. The value\n          is expressed in the session time zone.\n        ", "\n          If the fsp argument is given to\n          specify a fractional seconds precision from 0 to 6, the return\n          value includes a fractional seconds part of that many digits.\n        ", "Press CTRL+C to copy mysql> SELECT CURTIME();\n+-----------+\n| CURTIME() |\n+-----------+\n| 19:25:37  |\n+-----------+\n\nmysql> SELECT CURTIME() + 0;\n+---------------+\n| CURTIME() + 0 |\n+---------------+\n|        192537 |\n+---------------+\n\nmysql> SELECT CURTIME(3);\n+--------------+\n| CURTIME(3)   |\n+--------------+\n| 19:25:37.840 |\n+--------------+"], "Examples": ["mysql> SELECT CURTIME();\n+-----------+\n| CURTIME() |\n+-----------+\n| 19:25:37  |\n+-----------+\n\nmysql> SELECT CURTIME() + 0;\n+---------------+\n| CURTIME() + 0 |\n+---------------+\n|        192537 |\n+---------------+\n\nmysql> SELECT CURTIME(3);\n+--------------+\n| CURTIME(3)   |\n+--------------+\n| 19:25:37.840 |\n+--------------+"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_date", "Title": "DATE()", "Feature": ["DATE(expr)"], "Description": ["\nDATE(expr)\n", "\n          Extracts the date part of the date or datetime expression\n          expr. Returns\n          NULL if expr is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT DATE('2003-12-31 01:02:03');\n        -> '2003-12-31'"], "Examples": ["mysql> SELECT DATE('2003-12-31 01:02:03');\n        -> '2003-12-31'"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_date-add", "Title": "DATE_ADD()", "Feature": ["DATE_ADD(date,INTERVAL\n          expr\nunit)", "DATE_SUB(date,INTERVAL\n          expr\nunit)"], "Description": ["\nDATE_ADD(date,INTERVAL\n          expr\nunit),\n          DATE_SUB(date,INTERVAL\n          expr\nunit)\n", "\n          These functions perform date arithmetic. The\n          date argument specifies the\n          starting date or datetime value.\n          expr is an expression specifying\n          the interval value to be added or subtracted from the starting\n          date. expr is evaluated as a\n          string; it may start with a - for negative\n          intervals. unit is a keyword\n          indicating the units in which the expression should be\n          interpreted.\n        ", "\n          For more information about temporal interval syntax, including\n          a full list of unit specifiers, the\n          expected form of the expr argument\n          for each unit value, and rules for\n          operand interpretation in temporal arithmetic, see\n          Temporal Intervals.\n        ", "\n          The return value depends on the arguments:\n", "\n\n              If date is\n              NULL, the function returns\n              NULL.\n            \nDATE if the\n              date argument is a\n              DATE value and your\n              calculations involve only YEAR,\n              MONTH, and DAY parts\n              (that is, no time parts).\n            \n              (MySQL 8.0.28 and later:)\n              TIME if the\n              date argument is a\n              TIME value and the calculations involve\n              only HOURS, MINUTES,\n              and SECONDS parts (that is, no date\n              parts).\n            \nDATETIME if the first\n              argument is a DATETIME (or\n              TIMESTAMP) value, or if the\n              first argument is a DATE\n              and the unit value uses\n              HOURS, MINUTES, or\n              SECONDS, or if the first argument is of\n              type TIME and the\n              unit value uses\n              YEAR, MONTH, or\n              DAY.\n            \n              (MySQL 8.0.28 and later:) If the\n              first argument is a dynamic parameter (for example, of a\n              prepared statement), its resolved type is\n              DATE if the second argument is an\n              interval that contains some combination of\n              YEAR, MONTH, or\n              DAY values only; otherwise, its type is\n              DATETIME.\n            \n              String otherwise (type\n              VARCHAR).\n\n", "\n\nNote\n\n\n            In MySQL 8.0.22 through 8.0.27, when used in prepared\n            statements, these functions returned\n            DATETIME values regardless of argument\n            types. (Bug #103781)\n\n", "\n          To ensure that the result is\n          DATETIME, you can use\n          CAST() to convert the first\n          argument to DATETIME.\n        ", "Press CTRL+C to copy mysql> SELECT DATE_ADD('2018-05-01',INTERVAL 1 DAY);\n        -> '2018-05-02'\nmysql> SELECT DATE_SUB('2018-05-01',INTERVAL 1 YEAR);\n        -> '2017-05-01'\nmysql> SELECT DATE_ADD('2020-12-31 23:59:59',\n    ->                 INTERVAL 1 SECOND);\n        -> '2021-01-01 00:00:00'\nmysql> SELECT DATE_ADD('2018-12-31 23:59:59',\n    ->                 INTERVAL 1 DAY);\n        -> '2019-01-01 23:59:59'\nmysql> SELECT DATE_ADD('2100-12-31 23:59:59',\n    ->                 INTERVAL '1:1' MINUTE_SECOND);\n        -> '2101-01-01 00:01:00'\nmysql> SELECT DATE_SUB('2025-01-01 00:00:00',\n    ->                 INTERVAL '1 1:1:1' DAY_SECOND);\n        -> '2024-12-30 22:58:59'\nmysql> SELECT DATE_ADD('1900-01-01 00:00:00',\n    ->                 INTERVAL '-1 10' DAY_HOUR);\n        -> '1899-12-30 14:00:00'\nmysql> SELECT DATE_SUB('1998-01-02', INTERVAL 31 DAY);\n        -> '1997-12-02'\nmysql> SELECT DATE_ADD('1992-12-31 23:59:59.000002',\n    ->            INTERVAL '1.999999' SECOND_MICROSECOND);\n        -> '1993-01-01 00:00:01.000001'", "\n          When adding a MONTH interval to a\n          DATE or DATETIME value,\n          and the resulting date includes a day that does not exist in\n          the given month, the day is adjusted to the last day of the\n          month, as shown here:\n        ", "Press CTRL+C to copy mysql> SELECT DATE_ADD('2024-03-30', INTERVAL 1 MONTH) AS d1, \n     >        DATE_ADD('2024-03-31', INTERVAL 1 MONTH) AS d2;\n+------------+------------+\n| d1         | d2         |\n+------------+------------+\n| 2024-04-30 | 2024-04-30 |\n+------------+------------+\n1 row in set (0.00 sec)"], "Examples": ["mysql> SELECT DATE_ADD('2018-05-01',INTERVAL 1 DAY);\n        -> '2018-05-02'\nmysql> SELECT DATE_SUB('2018-05-01',INTERVAL 1 YEAR);\n        -> '2017-05-01'\nmysql> SELECT DATE_ADD('2020-12-31 23:59:59',\n    ->                 INTERVAL 1 SECOND);\n        -> '2021-01-01 00:00:00'\nmysql> SELECT DATE_ADD('2018-12-31 23:59:59',\n    ->                 INTERVAL 1 DAY);\n        -> '2019-01-01 23:59:59'\nmysql> SELECT DATE_ADD('2100-12-31 23:59:59',\n    ->                 INTERVAL '1:1' MINUTE_SECOND);\n        -> '2101-01-01 00:01:00'\nmysql> SELECT DATE_SUB('2025-01-01 00:00:00',\n    ->                 INTERVAL '1 1:1:1' DAY_SECOND);\n        -> '2024-12-30 22:58:59'\nmysql> SELECT DATE_ADD('1900-01-01 00:00:00',\n    ->                 INTERVAL '-1 10' DAY_HOUR);\n        -> '1899-12-30 14:00:00'\nmysql> SELECT DATE_SUB('1998-01-02', INTERVAL 31 DAY);\n        -> '1997-12-02'\nmysql> SELECT DATE_ADD('1992-12-31 23:59:59.000002',\n    ->            INTERVAL '1.999999' SECOND_MICROSECOND);\n        -> '1993-01-01 00:00:01.000001'", "mysql> SELECT DATE_ADD('2024-03-30', INTERVAL 1 MONTH) AS d1, \n     >        DATE_ADD('2024-03-31', INTERVAL 1 MONTH) AS d2;\n+------------+------------+\n| d1         | d2         |\n+------------+------------+\n| 2024-04-30 | 2024-04-30 |\n+------------+------------+\n1 row in set (0.00 sec)"], "Category": ["\u65e5\u671f\u548c\u65f6\u95f4\u51fd\u6570"]}
