{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_count"], "Title": ["COUNT()"], "Feature": ["COUNT(expr)\n            [over_clause]"], "Description": ["Return a count of the number of rows returned", "\nCOUNT(expr)\n            [over_clause]\n", "\n            Returns a count of the number of non-NULL\n            values of expr in the rows\n            retrieved by a SELECT\n            statement. The result is a\n            BIGINT value.\n          ", "\n            If there are no matching rows,\n            COUNT() returns\n            0. COUNT(NULL) returns\n            0.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          ", "Press CTRL+C to copy mysql> SELECT student.student_name,COUNT(*)\n       FROM student,course\n       WHERE student.student_id=course.student_id\n       GROUP BY student_name;", "\nCOUNT(*) is somewhat\n            different in that it returns a count of the number of rows\n            retrieved, whether or not they contain\n            NULL values.\n          ", "\n            For transactional storage engines such as\n            InnoDB, storing an exact row count is\n            problematic. Multiple transactions may be occurring at the\n            same time, each of which may affect the count.\n          ", "\nInnoDB does not keep an internal count of\n            rows in a table because concurrent transactions might\n            \u201csee\u201d different numbers of rows at the same\n            time. Consequently, SELECT COUNT(*)\n            statements only count rows visible to the current\n            transaction.\n          ", "\nSELECT COUNT(*) FROM\n            tbl_name query\n            performance for InnoDB tables is\n            optimized for single-threaded workloads if there are no\n            extra clauses such as WHERE or\n            GROUP BY.\n          ", "\nInnoDB processes SELECT\n            COUNT(*) statements by traversing the smallest\n            available secondary index unless an index or optimizer hint\n            directs the optimizer to use a different index. If a\n            secondary index is not present, InnoDB\n            processes SELECT COUNT(*) statements by\n            scanning the clustered index.\n          ", "\n            Processing of SELECT COUNT(*) statements\n            takes some time if index records are not entirely in the\n            buffer pool. For a faster count, create a counter table and\n            let your application update it according to the inserts and\n            deletes it does. However, this method may not scale well in\n            situations where thousands of concurrent transactions are\n            initiating updates to the same counter table. If an\n            approximate row count is sufficient, use\n            SHOW TABLE STATUS.\n          ", "\nInnoDB handles SELECT\n            COUNT(*) and SELECT COUNT(1)\n            operations in the same way. There is no performance\n            difference.\n          ", "\n            For MyISAM tables,\n            COUNT(*) is optimized to\n            return very quickly if the\n            SELECT retrieves from one\n            table, no other columns are retrieved, and there is no\n            WHERE clause. For example:\n          ", "Press CTRL+C to copy mysql> SELECT COUNT(*) FROM student;", "\n            This optimization only applies to MyISAM\n            tables, because an exact row count is stored for this\n            storage engine and can be accessed very quickly.\n            COUNT(1) is only subject to the same\n            optimization if the first column is defined as NOT\n            NULL.\n          "], "Examples": ["mysql> SELECT student.student_name,COUNT(*)\n       FROM student,course\n       WHERE student.student_id=course.student_id\n       GROUP BY student_name;", "mysql> SELECT COUNT(*) FROM student;"], "Category": ["Aggregate Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/information-functions#session_user"], "Title": ["SESSION_USER()"], "Feature": ["SESSION_USER()"], "Description": ["SESSION_USER()", "SESSION_USER() \u51fd\u6570\u4e0e USER() \u540c\u4e49\u3002"], "Examples": [], "Category": ["Information Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/information-functions#system_user"], "Title": ["SYSTEM_USER()"], "Feature": ["SYSTEM_USER()"], "Description": ["SYSTEM_USER()", "SYSTEM_USER() \u51fd\u6570\u4e0e USER() \u540c\u4e49\u3002"], "Examples": [], "Category": ["Information Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/information-functions#user"], "Title": ["USER()"], "Feature": ["USER()"], "Description": ["USER()", "USER() \u51fd\u6570\u8fd4\u56de\u5f53\u524d\u8fde\u63a5\u7684\u7528\u6237\u3002\u8be5\u51fd\u6570\u7684\u8f93\u51fa\u53ef\u80fd\u4e0e CURRENT_USER() \u7684\u8f93\u51fa\u7565\u6709\u4e0d\u540c\uff0c\u56e0\u4e3a USER() \u663e\u793a\u7684\u662f\u5b9e\u9645 IP \u5730\u5740\uff0c\u800c\u4e0d\u662f\u901a\u914d\u7b26\u3002", "SELECT USER(), CURRENT_USER();\n", "+----------------+----------------+\n| USER()         | CURRENT_USER() |\n+----------------+----------------+\n| root@127.0.0.1 | root@%         |\n+----------------+----------------+\n1 row in set (0.00 sec)\n"], "Examples": ["SELECT USER(), CURRENT_USER();\n"], "Category": ["Information Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/information-functions#version"], "Title": ["VERSION()"], "Feature": ["VERSION()"], "Description": ["VERSION()", "VERSION() \u51fd\u6570\u4ee5\u4e0e MySQL \u517c\u5bb9\u7684\u683c\u5f0f\u8fd4\u56de TiDB \u7248\u672c\u3002\u5982\u9700\u83b7\u53d6\u66f4\u8be6\u7ec6\u7684\u7248\u672c\u4fe1\u606f\uff0c\u53ef\u4ee5\u4f7f\u7528 TIDB_VERSION() \u51fd\u6570\u3002", "SELECT VERSION();\n+--------------------+\n| VERSION()          |\n+--------------------+\n| 8.0.11-TiDB-v7.5.1 |\n+--------------------+\n1 row in set (0.00 sec)\n", "SELECT TIDB_VERSION()\\G\n*************************** 1. row ***************************\nTIDB_VERSION(): Release Version: v7.5.1\nEdition: Community\nGit Commit Hash: 7d16cc79e81bbf573124df3fd9351c26963f3e70\nGit Branch: heads/refs/tags/v7.5.1\nUTC Build Time: 2024-02-27 14:28:32\nGoVersion: go1.21.6\nRace Enabled: false\nCheck Table Before Drop: false\nStore: tikv\n1 row in set (0.00 sec)\n"], "Examples": ["SELECT VERSION();\n+--------------------+\n| VERSION()          |\n+--------------------+\n| 8.0.11-TiDB-v7.5.1 |\n+--------------------+\n1 row in set (0.00 sec)\n"], "Category": ["Information Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/json-functions-create#json_array"], "Title": ["JSON_ARRAY()"], "Feature": ["JSON_ARRAY()"], "Description": ["JSON_ARRAY()", "JSON_ARRAY([val[, val] ...]) \u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u503c\u5217\u8868\uff08\u53ef\u80fd\u4e3a\u7a7a\uff09\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u8fd9\u4e9b\u503c\u7684 JSON \u6570\u7ec4\u3002", "SELECT JSON_ARRAY(1,2,3,4,5), JSON_ARRAY(\"foo\", \"bar\");\n", "+-----------------------+--------------------------+\n| JSON_ARRAY(1,2,3,4,5) | JSON_ARRAY(\"foo\", \"bar\") |\n+-----------------------+--------------------------+\n| [1, 2, 3, 4, 5]       | [\"foo\", \"bar\"]           |\n+-----------------------+--------------------------+\n1 row in set (0.00 sec)\n"], "Examples": ["SELECT JSON_ARRAY(1,2,3,4,5), JSON_ARRAY(\"foo\", \"bar\");\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/json-functions-create#json_object"], "Title": ["JSON_OBJECT()"], "Feature": ["JSON_OBJECT()"], "Description": ["JSON_OBJECT()", "JSON_OBJECT([key,val[,key,val]...]) \u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u952e\u503c\u5bf9\u5217\u8868\uff08\u53ef\u80fd\u4e3a\u7a7a\uff09\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u8fd9\u4e9b\u952e\u503c\u5bf9\u7684 JSON \u5bf9\u8c61\u3002", "SELECT JSON_OBJECT(\"database\", \"TiDB\", \"distributed\", TRUE);\n", "+------------------------------------------------------+\n| JSON_OBJECT(\"database\", \"TiDB\", \"distributed\", TRUE) |\n+------------------------------------------------------+\n| {\"database\": \"TiDB\", \"distributed\": true}            |\n+------------------------------------------------------+\n1 row in set (0.00 sec)\n"], "Examples": ["SELECT JSON_OBJECT(\"database\", \"TiDB\", \"distributed\", TRUE);\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/json-functions-create#json_quote"], "Title": ["JSON_QUOTE()"], "Feature": ["JSON_QUOTE()"], "Description": ["JSON_QUOTE()", "JSON_QUOTE(str) \u51fd\u6570\u5c06\u5b57\u7b26\u4e32\u8fd4\u56de\u4e3a\u5e26\u5f15\u53f7\u7684 JSON \u503c\u3002", "SELECT JSON_QUOTE('The name is \"O\\'Neil\"');\n", "+-------------------------------------+\n| JSON_QUOTE('The name is \"O\\'Neil\"') |\n+-------------------------------------+\n| \"The name is \\\"O'Neil\\\"\"            |\n+-------------------------------------+\n1 row in set (0.00 sec)\n", "\u53e6\u8bf7\u53c2\u9605", "JSON \u51fd\u6570JSON \u6570\u636e\u7c7b\u578b"], "Examples": ["SELECT JSON_QUOTE('The name is \"O\\'Neil\"');\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/json-functions-search#json_contains"], "Title": ["JSON_CONTAINS()"], "Feature": ["JSON_CONTAINS()"], "Description": ["JSON_CONTAINS()", "\u901a\u8fc7\u8fd4\u56de 1 \u6216 0\uff0cJSON_CONTAINS(json_doc, candidate [,path]) \u51fd\u6570\u7528\u4e8e\u786e\u8ba4\u6307\u5b9a\u7684 JSON \u6587\u6863 candidate \u662f\u5426\u5305\u542b\u5728\u76ee\u6807 JSON \u6587\u6863\u4e2d\u3002"], "Examples": ["SELECT JSON_CONTAINS('[\"a\",\"b\",\"c\"]','\"a\"');\n", "SELECT JSON_CONTAINS('[\"a\",\"b\",\"c\"]','\"e\"');\n", "SELECT JSON_CONTAINS('{\"foo\": \"bar\", \"aaa\": 5}','{\"foo\": \"bar\"}');\n", "SELECT JSON_CONTAINS('{\"foo\": \"bar\", \"aaa\": 5}','\"bar\"');\n", "SELECT JSON_CONTAINS('{\"foo\": \"bar\", \"aaa\": 5}','\"bar\"', '$.foo');\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/json-functions-search#json_contains_path"], "Title": ["JSON_CONTAINS_PATH()"], "Feature": ["JSON_CONTAINS_PATH()"], "Description": ["JSON_CONTAINS_PATH()", "JSON_CONTAINS_PATH(json_doc,all_or_one,path [,path, ...]) \u51fd\u6570\u8fd4\u56de 0 \u6216 1\uff0c\u8868\u793a JSON \u6587\u6863\u662f\u5426\u5305\u542b\u6307\u5b9a\u8def\u5f84\u4e0b\u7684\u6570\u636e\u3002"], "Examples": ["SELECT JSON_CONTAINS_PATH('{\"foo\": \"bar\", \"aaa\": 5}','all','$.foo');\n", "SELECT JSON_CONTAINS_PATH('{\"foo\": \"bar\", \"aaa\": 5}','all','$.bar');\n", "SELECT JSON_CONTAINS_PATH('{\"foo\": \"bar\", \"aaa\": 5}','all','$.foo', '$.aaa');\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/json-functions-search#json_extract"], "Title": ["JSON_EXTRACT()"], "Feature": ["JSON_EXTRACT()"], "Description": ["JSON_EXTRACT()", "JSON_EXTRACT(json_doc, path[, path] ...) \u51fd\u6570\u4ece JSON \u6587\u6863\u4e2d\u63d0\u53d6\u4e0e path \u53c2\u6570\u5339\u914d\u7684\u6570\u636e\u3002", "SELECT JSON_EXTRACT('{\"foo\": \"bar\", \"aaa\": 5}', '$.foo');\n", "+---------------------------------------------------+\n| JSON_EXTRACT('{\"foo\": \"bar\", \"aaa\": 5}', '$.foo') |\n+---------------------------------------------------+\n| \"bar\"                                             |\n+---------------------------------------------------+\n1 row in set (0.00 sec)\n"], "Examples": ["SELECT JSON_EXTRACT('{\"foo\": \"bar\", \"aaa\": 5}', '$.foo');\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_stddev-samp"], "Title": ["STDDEV_SAMP()"], "Feature": ["STDDEV_SAMP(expr)\n            [over_clause]"], "Description": ["Return the sample standard deviation", "\nSTDDEV_SAMP(expr)\n            [over_clause]\n", "\n            Returns the sample standard deviation of\n            expr (the square root of\n            VAR_SAMP().\n          ", "\n            If there are no matching rows, or if\n            expr is NULL,\n            STDDEV_SAMP() returns\n            NULL.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          "], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/json-functions-search#-"], "Title": ["->"], "Feature": ["->"], "Description": ["->", "column->path \u51fd\u6570\u8fd4\u56de column \u4e2d\u4e0e path \u53c2\u6570\u5339\u914d\u7684\u6570\u636e\u3002\u8be5\u51fd\u6570\u662f JSON_EXTRACT() \u7684\u522b\u540d\u3002", "SELECT\n    j->'$.foo',\n    JSON_EXTRACT(j, '$.foo')\nFROM (\n    SELECT\n        '{\"foo\": \"bar\", \"aaa\": 5}' AS j\n    ) AS tbl;\n", "+------------+--------------------------+\n| j->'$.foo' | JSON_EXTRACT(j, '$.foo') |\n+------------+--------------------------+\n| \"bar\"      | \"bar\"                    |\n+------------+--------------------------+\n1 row in set (0.00 sec)\n"], "Examples": ["SELECT\n    j->'$.foo',\n    JSON_EXTRACT(j, '$.foo')\nFROM (\n    SELECT\n        '{\"foo\": \"bar\", \"aaa\": 5}' AS j\n    ) AS tbl;\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/json-functions-search#--1"], "Title": ["->>"], "Feature": ["->>"], "Description": ["->>", "column->>path \u51fd\u6570\u53bb\u6389 column \u4e2d\u4e0e path \u53c2\u6570\u5339\u914d\u7684\u6570\u636e\u7684\u5f15\u53f7\u3002\u5b83\u662f JSON_UNQUOTE(JSON_EXTRACT(doc,path_literal)) \u7684\u522b\u540d\u3002", "SELECT\n    j->'$.foo',\n    JSON_EXTRACT(j, '$.foo')\n    j->>'$.foo',\n    JSON_UNQUOTE(JSON_EXTRACT(j, '$.foo'))\nFROM (\n    SELECT\n        '{\"foo\": \"bar\", \"aaa\": 5}' AS j\n    ) AS tbl;\n", "+------------+--------------------------+-------------+----------------------------------------+\n| j->'$.foo' | JSON_EXTRACT(j, '$.foo') | j->>'$.foo' | JSON_UNQUOTE(JSON_EXTRACT(j, '$.foo')) |\n+------------+--------------------------+-------------+----------------------------------------+\n| \"bar\"      | \"bar\"                    | bar         | bar                                    |\n+------------+--------------------------+-------------+----------------------------------------+\n1 row in set (0.00 sec)\n"], "Examples": ["SELECT\n    j->'$.foo',\n    JSON_EXTRACT(j, '$.foo')\n    j->>'$.foo',\n    JSON_UNQUOTE(JSON_EXTRACT(j, '$.foo'))\nFROM (\n    SELECT\n        '{\"foo\": \"bar\", \"aaa\": 5}' AS j\n    ) AS tbl;\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/json-functions-search#json_keys"], "Title": ["JSON_KEYS()"], "Feature": ["JSON_KEYS()"], "Description": ["JSON_KEYS()", "JSON_KEYS(json_doc [,path]) \u51fd\u6570\u4ee5 JSON \u6570\u7ec4\u7684\u5f62\u5f0f\u8fd4\u56de JSON \u5bf9\u8c61\u7684\u9876\u5c42\u952e (key)\u3002\u5982\u679c\u6307\u5b9a\u4e86 path \u53c2\u6570\uff0c\u5219\u8fd4\u56de\u6240\u9009\u8def\u5f84\u7684\u9876\u5c42\u952e (key)\u3002"], "Examples": ["SELECT JSON_KEYS('{\"name\": {\"first\": \"John\", \"last\": \"Doe\"}, \"type\": \"Person\"}');\n", "SELECT JSON_KEYS('{\"name\": {\"first\": \"John\", \"last\": \"Doe\"}, \"type\": \"Person\"}', '$.name');\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/json-functions-search#json_search"], "Title": ["JSON_SEARCH()"], "Feature": ["JSON_SEARCH()"], "Description": ["JSON_SEARCH()", "JSON_SEARCH(json_doc,one_or_all,str) \u51fd\u6570\u4f1a\u5728 JSON \u6587\u6863\u4e2d\u641c\u7d22\u4e0e\u5b57\u7b26\u4e32\u5339\u914d\u7684\u4e00\u4e2a\u6216\u6240\u6709\u7684\u5339\u914d\u9879\u3002"], "Examples": ["SELECT JSON_SEARCH('{\"a\": [\"aa\", \"bb\", \"cc\"], \"b\": [\"cc\", \"dd\"]}','one','cc');\n", "SELECT JSON_SEARCH('{\"a\": [\"aa\", \"bb\", \"cc\"], \"b\": [\"cc\", \"dd\"]}','all','cc');\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/json-functions-search#member-of"], "Title": ["MEMBER OF()"], "Feature": ["MEMBER OF()"], "Description": ["MEMBER OF()", "str MEMBER OF (json_array) \u51fd\u6570\u6d4b\u8bd5\u4f20\u5165\u7684 str \u503c\u662f\u5426\u662f json_array \u7684\u5143\u7d20\uff0c\u5982\u679c\u662f\u5219\u8fd4\u56de 1\uff0c\u5426\u5219\u8fd4\u56de 0\u3002\u5982\u679c\u4efb\u4e00\u53c2\u6570\u4e3a NULL\uff0c\u5219\u8fd4\u56de NULL\u3002", "SELECT '\ud83c\udf4d' MEMBER OF ('[\"\ud83c\udf4d\",\"\ud83e\udd65\",\"\ud83e\udd6d\"]') AS 'Contains pineapple';\n", "+--------------------+\n| Contains pineapple |\n+--------------------+\n|                  1 |\n+--------------------+\n1 row in set (0.00 sec)\n\n"], "Examples": ["SELECT '\ud83c\udf4d' MEMBER OF ('[\"\ud83c\udf4d\",\"\ud83e\udd65\",\"\ud83e\udd6d\"]') AS 'Contains pineapple';\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/json-functions-search#json_overlaps"], "Title": ["JSON_OVERLAPS()"], "Feature": ["JSON_OVERLAPS()"], "Description": ["JSON_OVERLAPS()", "JSON_OVERLAPS(json_doc, json_doc) \u51fd\u6570\u68c0\u67e5\u4e24\u4e2a JSON \u6587\u6863\u662f\u5426\u6709\u91cd\u53e0\u90e8\u5206\u3002\u5982\u679c\u6709\u91cd\u53e0\uff0c\u5219\u8fd4\u56de 1\uff0c\u5982\u679c\u6ca1\u6709\u91cd\u53e0\uff0c\u5219\u8fd4\u56de 0\u3002\u5982\u679c\u4efb\u4e00\u53c2\u6570\u4e3a NULL\uff0c\u5219\u8fd4\u56de NULL\u3002"], "Examples": ["SELECT JSON_OVERLAPS(\n    '{\"languages\": [\"Go\",\"Rust\",\"C#\"]}',\n    '{\"languages\": [\"Go\",\"Rust\"]}'\n) AS 'Overlaps';\n", "SELECT JSON_OVERLAPS(\n    '{\"languages\": [\"Go\",\"Rust\",\"C#\"]}',\n    '{\"languages\": [\"Go\",\"Rust\",\"C#\"]}'\n) AS 'Overlaps';\n", "SELECT JSON_OVERLAPS(\n    '{\"languages\": [\"Go\",\"Rust\",\"C#\"]}',\n    '{\"languages\": [\"Go\",\"Rust\",\"C#\"], \"arch\": [\"arm64\"]}'\n) AS 'Overlaps';\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/json-functions-modify#json_append"], "Title": ["JSON_APPEND()"], "Feature": ["JSON_APPEND()"], "Description": ["JSON_APPEND()", "\u8be5\u51fd\u6570\u4e3a JSON_ARRAY_APPEND() \u7684\u522b\u540d\u3002"], "Examples": [], "Category": ["JSON Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/json-functions-modify#json_array_append"], "Title": ["JSON_ARRAY_APPEND()"], "Feature": ["JSON_ARRAY_APPEND()"], "Description": ["JSON_ARRAY_APPEND()", "JSON_ARRAY_APPEND(json_array, path, value [,path, value] ...) \u51fd\u6570\u5c06 value \u63d2\u5165 path \u4e2d\u6307\u5b9a\u7684 json_array \u6570\u7ec4\u7684\u672b\u5c3e\uff0c\u5e76\u8fd4\u56de\u7ed3\u679c\u3002", "\u8be5\u51fd\u6570\u53ef\u63a5\u53d7\u6210\u5bf9\u7684 path \u548c value \u53c2\u6570\u3002"], "Examples": ["SELECT JSON_ARRAY_APPEND('[\"Car\", \"Boat\", \"Train\"]', '$', \"Airplane\") AS \"Transport options\";\n", "SELECT JSON_ARRAY_APPEND('{\"transport_options\": [\"Car\", \"Boat\", \"Train\"]}', '$.transport_options', \"Airplane\") AS \"Transport options\";\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/json-functions-modify#json_array_insert"], "Title": ["JSON_ARRAY_INSERT()"], "Feature": ["JSON_ARRAY_INSERT()"], "Description": ["JSON_ARRAY_INSERT()", "JSON_ARRAY_INSERT(json_array, path, value [,path, value] ...) \u51fd\u6570\u5c06 value \u63d2\u5165 path \u4e2d json_array \u7684\u6307\u5b9a\u4f4d\u7f6e\uff0c\u5e76\u8fd4\u56de\u7ed3\u679c\u3002", "\u8be5\u51fd\u6570\u53ef\u63a5\u53d7\u6210\u5bf9\u7684 path \u548c value \u53c2\u6570\u3002"], "Examples": ["SELECT JSON_ARRAY_INSERT('[\"Car\", \"Boat\", \"Train\"]', '$[0]', \"Airplane\") AS \"Transport options\";\n", "SELECT JSON_ARRAY_INSERT('[\"Car\", \"Boat\", \"Train\"]', '$[1]', \"Airplane\") AS \"Transport options\";\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/json-functions-modify#json_insert"], "Title": ["JSON_INSERT()"], "Feature": ["JSON_INSERT()"], "Description": ["JSON_INSERT()", "JSON_INSERT(json_doc,path,value[,path,value] ...) \u51fd\u6570\u5c06\u4e00\u4e2a\u6216\u591a\u4e2a\u503c\u63d2\u5165\u5230 JSON \u6587\u6863\uff0c\u5e76\u8fd4\u56de\u7ed3\u679c\u3002", "\u8be5\u51fd\u6570\u53ef\u63a5\u53d7\u6210\u5bf9\u7684 path \u548c value \u53c2\u6570\u3002", "SELECT JSON_INSERT(\n    '{\"language\": [\"Go\", \"Rust\", \"C++\"]}',\n    '$.architecture', 'riscv',\n    '$.os', JSON_ARRAY(\"linux\",\"freebsd\")\n) AS \"Demo\";\n", "+------------------------------------------------------------------------------------------+\n| Demo                                                                                     |\n+------------------------------------------------------------------------------------------+\n| {\"architecture\": \"riscv\", \"language\": [\"Go\", \"Rust\", \"C++\"], \"os\": [\"linux\", \"freebsd\"]} |\n+------------------------------------------------------------------------------------------+\n1 row in set (0.00 sec)\n", "\u8bf7\u6ce8\u610f\uff0c\u8be5\u51fd\u6570\u4e0d\u4f1a\u8986\u76d6\u73b0\u6709\u5c5e\u6027\u3002\u4f8b\u5982\uff0c\u4ee5\u4e0b\u8bed\u53e5\u770b\u8d77\u6765\u4f1a\u8986\u76d6 \"a\" \u5c5e\u6027\u73b0\u6709\u7684\u503c\uff0c\u4f46\u5b9e\u9645\u4e0a\u5e76\u4e0d\u4f1a\u3002", "SELECT JSON_INSERT('{\"a\": 61, \"b\": 62}', '$.a', 41, '$.c', 63);\n", "+---------------------------------------------------------+\n| JSON_INSERT('{\"a\": 61, \"b\": 62}', '$.a', 41, '$.c', 63) |\n+---------------------------------------------------------+\n| {\"a\": 61, \"b\": 62, \"c\": 63}                             |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n"], "Examples": ["SELECT JSON_INSERT(\n    '{\"language\": [\"Go\", \"Rust\", \"C++\"]}',\n    '$.architecture', 'riscv',\n    '$.os', JSON_ARRAY(\"linux\",\"freebsd\")\n) AS \"Demo\";\n", "SELECT JSON_INSERT('{\"a\": 61, \"b\": 62}', '$.a', 41, '$.c', 63);\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/bit-functions-and-operators#bit_count"], "Title": ["BIT_COUNT()"], "Feature": ["BIT_COUNT()"], "Description": ["BIT_COUNT(expr) \u51fd\u6570\u8fd4\u56de expr \u4e2d\u4e3a 1 \u7684\u4f4d\u6570\u3002\n\nSELECT BIT_COUNT(b'00101001');\n+------------------------+\n| BIT_COUNT(b'00101001') |\n+------------------------+\n|                      3 |\n+------------------------+\n1 row in set (0.00 sec)\n\u6ce8\u610f\n\u5f53\u8f93\u5165\u7684 expr \u53c2\u6570\u662f\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u65f6\uff0c\u4f60\u9700\u8981\u5728\u8fd9\u4e2a\u6570\u4e4b\u524d\u663e\u5f0f\u5730\u6307\u5b9a b\uff0c\u6bd4\u5982 b'00101001'\u3002\u5426\u5219\uff0c\u8be5\u51fd\u6570\u4f1a\u5c06\u5176\u89c6\u4e3a\u5b57\u7b26\u4e32\u5904\u7406\u800c\u8fd4\u56de\u4e0d\u540c\u7684\u7ed3\u679c\u3002\u4f8b\u5982\uff0cBIT_COUNT('00101001') \u4f1a\u8fd4\u56de 7\uff0c\u56e0\u4e3a\u5b83\u4f1a\u5c06\u5b57\u7b26\u4e32 '00101001' \u8f6c\u6362\u4e3a\u5341\u8fdb\u5236\u6570 101001\uff0c\u5e76\u8ba1\u7b97 101001 \u7684\u4e8c\u8fdb\u5236\u8868\u793a 11000100001010001 \u4e2d 1 \u7684\u4f4d\u6570\u3002\n\n\u4e0b\u9762\u7684\u793a\u4f8b\u4e0e\u524d\u9762\u7684\u7c7b\u4f3c\uff0c\u4f46\u4f7f\u7528\u7684\u53c2\u6570\u662f\u5341\u516d\u8fdb\u5236\u6570\u800c\u975e\u4e8c\u8fdb\u5236\u6570\u3002CONV() \u51fd\u6570\u7528\u4e8e\u5c06 0x29 \u4ece\u5341\u516d\u8fdb\u5236\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\uff0c\u53ef\u4ee5\u770b\u5230 0x29 \u7b49\u4ef7\u4e8e\u4e8c\u8fdb\u5236\u7684 00101001\u3002\n\nSELECT BIT_COUNT(0x29), CONV(0x29,16,2);\n+-----------------+-----------------+\n| BIT_COUNT(0x29) | CONV(0x29,16,2) |\n+-----------------+-----------------+\n|               3 | 101001          |\n+-----------------+-----------------+\n1 row in set (0.01 sec)\nBIT_COUNT(expr) \u51fd\u6570\u7684\u4e00\u4e2a\u5e38\u89c1\u7528\u6cd5\u662f\u5c06\u5b50\u7f51\u63a9\u7801\u8f6c\u6362\u4e3a CIDR \u8868\u793a\u6cd5\u3002\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u5b50\u7f51\u63a9\u7801 255.255.255.0 \u88ab\u8f6c\u6362\u4e3a\u5176 CIDR \u8868\u793a\u5f62\u5f0f 24\u3002\n\nSELECT BIT_COUNT(INET_ATON('255.255.255.0'));\n+---------------------------------------+\n| BIT_COUNT(INET_ATON('255.255.255.0')) |\n+---------------------------------------+\n|                                    24 |\n+---------------------------------------+\n1 row in set (0.00 sec)"], "Examples": ["SELECT BIT_COUNT(b'00101001');\n", "SELECT BIT_COUNT(0x29), CONV(0x29,16,2);\n", "SELECT BIT_COUNT(INET_ATON('255.255.255.0'));\n"], "Category": ["Bit Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/json-functions-modify#json_merge_patch"], "Title": ["JSON_MERGE_PATCH()"], "Feature": ["JSON_MERGE_PATCH()"], "Description": ["JSON_MERGE_PATCH()", "JSON_MERGE_PATCH(json_doc, json_doc [,json_doc] ...) \u5c06\u4e24\u4e2a\u6216\u591a\u4e2a JSON \u6587\u6863\u5408\u5e76\u4e3a\u4e00\u4e2a JSON \u6587\u6863\uff0c\u4f46\u4e0d\u4fdd\u7559\u91cd\u590d\u952e\u7684\u503c\u3002\u5982\u679c\u5176\u4e2d\u67d0\u4e9b json_doc \u53c2\u6570\u5305\u542b\u91cd\u590d\u7684\u952e\uff0c\u5408\u5e76\u540e\u7684\u7ed3\u679c\u53ea\u4fdd\u7559\u540e\u9762\u6307\u5b9a\u7684\u90a3\u4e2a json_doc \u53c2\u6570\u4e2d\u7684\u503c\u3002"], "Examples": ["SELECT JSON_MERGE_PATCH(\n    '{\"a\": 1, \"b\": 2}',\n    '{\"a\": 100}',\n    '{\"c\": 300}'\n);\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/json-functions-modify#json_merge_preserve"], "Title": ["JSON_MERGE_PRESERVE()"], "Feature": ["JSON_MERGE_PRESERVE()"], "Description": ["JSON_MERGE_PRESERVE()", "JSON_MERGE_PRESERVE(json_doc, json_doc [,json_doc] ...) \u51fd\u6570\u901a\u8fc7\u4fdd\u7559\u6240\u6709\u952e\u503c\u7684\u65b9\u5f0f\u5408\u5e76\u4e24\u4e2a\u6216\u591a\u4e2a JSON \u6587\u6863\uff0c\u5e76\u8fd4\u56de\u5408\u5e76\u7ed3\u679c\u3002"], "Examples": ["SELECT JSON_MERGE_PRESERVE('{\"a\": 1, \"b\": 2}','{\"a\": 100}', '{\"c\": 300}');\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/json-functions-modify#json_merge"], "Title": ["JSON_MERGE()"], "Feature": ["JSON_MERGE()"], "Description": ["JSON_MERGE()", ".css-1weqspv{padding-top:0.5rem;padding-bottom:0.5rem;}.css-1weqspv .MuiAlert-message p{margin-bottom:0px;margin-top:0px;}", "\u8b66\u544a\u8be5\u51fd\u6570\u5df2\u5e9f\u5f03\u3002", "\u8be5\u51fd\u6570\u4e3a JSON_MERGE_PRESERVE() \u5df2\u5e9f\u5f03\u7684\u522b\u540d\u3002"], "Examples": [], "Category": ["JSON Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/json-functions-modify#json_remove"], "Title": ["JSON_REMOVE()"], "Feature": ["JSON_REMOVE()"], "Description": ["JSON_REMOVE()", "JSON_REMOVE(json_doc,path [,path] ...) \u51fd\u6570\u4ece JSON \u6587\u6863\u4e2d\u5220\u9664\u6307\u5b9a path \u7684\u6570\u636e\u5e76\u8fd4\u56de\u7ed3\u679c\u3002"], "Examples": ["SELECT JSON_REMOVE('{\"a\": 61, \"b\": 62, \"c\": 63}','$.b');\n", "SELECT JSON_REMOVE('{\"a\": 61, \"b\": 62, \"c\": 63}','$.b','$.c');\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/json-functions-modify#json_replace"], "Title": ["JSON_REPLACE()"], "Feature": ["JSON_REPLACE()"], "Description": ["JSON_REPLACE()", "JSON_REPLACE(json_doc,path,value[,path,value]...) \u51fd\u6570\u66ff\u6362 JSON \u6587\u6863\u4e2d\u7684\u73b0\u6709\u7684\u503c\u5e76\u8fd4\u56de\u7ed3\u679c\u3002\u5982\u679c\u6307\u5b9a\u7684\u8def\u5f84\u4e0d\u5b58\u5728\uff0c\u8be5\u8def\u5f84\u5bf9\u5e94\u7684\u503c\u4e0d\u4f1a\u6dfb\u52a0\u5230\u7ed3\u679c\u4e2d\u3002", "\u8be5\u51fd\u6570\u53ef\u63a5\u53d7\u6210\u5bf9\u7684 path \u548c value \u53c2\u6570\u3002"], "Examples": ["SELECT JSON_REPLACE('{\"a\": 41, \"b\": 62}','$.b',42);\n", "SELECT JSON_REPLACE('{\"a\": 41, \"b\": 62}','$.b',42,'$.c',43);\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/json-functions-modify#json_set"], "Title": ["JSON_SET()"], "Feature": ["JSON_SET()"], "Description": ["JSON_SET()", "JSON_SET(json_doc,path,value[,path,value] ...) \u51fd\u6570\u5728 JSON \u6587\u6863\u4e2d\u63d2\u5165\u6216\u66f4\u65b0\u6570\u636e\uff0c\u5e76\u8fd4\u56de\u7ed3\u679c\u3002", "\u8be5\u51fd\u6570\u53ef\u63a5\u53d7\u6210\u5bf9\u7684 path \u548c value \u53c2\u6570\u3002"], "Examples": ["SELECT JSON_SET('{\"version\": 1.1, \"name\": \"example\"}','$.version',1.2);\n", "SELECT JSON_SET('{\"version\": 1.1, \"name\": \"example\"}','$.version',1.2,'$.branch', \"main\");\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/json-functions-modify#json_unquote"], "Title": ["JSON_UNQUOTE()"], "Feature": ["JSON_UNQUOTE()"], "Description": ["JSON_UNQUOTE()", "JSON_UNQUOTE(json) \u51fd\u6570\u53bb\u6389 JSON \u503c\u7684\u5f15\u53f7\uff0c\u5e76\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u8fd4\u56de\u7ed3\u679c\u3002\u8be5\u51fd\u6570\u4e0e JSON_QUOTE() \u51fd\u6570\u4f5c\u7528\u76f8\u53cd\u3002"], "Examples": ["SELECT JSON_UNQUOTE('\"foo\"');\n", "SELECT JSON_EXTRACT('{\"database\": \"TiDB\"}', '$.database');\n", "SELECT JSON_UNQUOTE(JSON_EXTRACT('{\"database\": \"TiDB\"}', '$.database'));\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/json-functions-return#json_depth"], "Title": ["JSON_DEPTH()"], "Feature": ["JSON_DEPTH()"], "Description": ["JSON_DEPTH()", "JSON_DEPTH(json_doc) \u51fd\u6570\u8fd4\u56de JSON \u6587\u6863\u7684\u6700\u5927\u6df1\u5ea6\u3002"], "Examples": ["SELECT JSON_DEPTH('{\"weather\": {\"current\": \"sunny\"}}');\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/json-functions-return#json_length"], "Title": ["JSON_LENGTH()"], "Feature": ["JSON_LENGTH()"], "Description": ["JSON_LENGTH()", "JSON_LENGTH(json_doc [,path]) \u51fd\u6570\u8fd4\u56de JSON \u6587\u6863\u7684\u957f\u5ea6\u3002\u5982\u679c\u6307\u5b9a\u4e86 path \u53c2\u6570\uff0c\u5219\u8fd4\u56de\u8def\u5f84\u4e2d\u7684\u503c\u7684\u957f\u5ea6\u3002"], "Examples": ["SELECT JSON_LENGTH('{\"weather\": {\"current\": \"sunny\", \"tomorrow\": \"cloudy\"}}','$');\n", "SELECT JSON_LENGTH('{\"weather\": {\"current\": \"sunny\", \"tomorrow\": \"cloudy\"}}','$.weather');\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/json-functions-return#json_type"], "Title": ["JSON_TYPE()"], "Feature": ["JSON_TYPE()"], "Description": ["JSON_TYPE()", "JSON_TYPE(json_val) \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8868\u793a JSON \u503c\u7684\u7c7b\u578b\u3002"], "Examples": ["WITH demo AS (\n    SELECT 'null' AS 'v'\n    UNION SELECT '\"foobar\"'\n    UNION SELECT 'true'\n    UNION SELECT '5'\n    UNION SELECT '1.14'\n    UNION SELECT '[]'\n    UNION SELECT '{}'\n    UNION SELECT POW(2,63)\n)\nSELECT v, JSON_TYPE(v) FROM demo ORDER BY 2;\n", "SELECT '\"2025-06-14\"',CAST(CAST('2025-06-14' AS date) AS json);\n", "SELECT JSON_TYPE('\"2025-06-14\"'),JSON_TYPE(CAST(CAST('2025-06-14' AS date) AS json));\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/cast-functions-and-operators#binary"], "Title": ["BINARY"], "Feature": ["BINARY"], "Description": ["BINARY", "BINARY \u8fd0\u7b97\u7b26\u4ece MySQL 8.0.27 \u7248\u672c\u8d77\u5df2\u88ab\u5e9f\u5f03\u3002\u5efa\u8bae\u5728 TiDB \u548c MySQL \u4e2d\u90fd\u6539\u7528 CAST(... AS BINARY)\u3002"], "Examples": [], "Category": ["Cast Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/json-functions-return#json_valid"], "Title": ["JSON_VALID()"], "Feature": ["JSON_VALID()"], "Description": ["JSON_VALID()", "JSON_VALID(str) \u51fd\u6570\u68c0\u67e5\u8f93\u5165\u7684\u53c2\u6570\u662f\u5426\u4e3a\u6709\u6548\u7684 JSON \u683c\u5f0f\u3002\u8be5\u51fd\u6570\u5bf9\u4e8e\u5728\u5c06\u5217\u8f6c\u6362\u4e3a JSON \u7c7b\u578b\u4e4b\u524d\u8fdb\u884c\u68c0\u67e5\u975e\u5e38\u6709\u7528\u3002", "SELECT JSON_VALID('{\"foo\"=\"bar\"}');\n", "+-----------------------------+\n| JSON_VALID('{\"foo\"=\"bar\"}') |\n+-----------------------------+\n|                           0 |\n+-----------------------------+\n1 row in set (0.01 sec)\n", "SELECT JSON_VALID('{\"foo\": \"bar\"}');\n", "+------------------------------+\n| JSON_VALID('{\"foo\": \"bar\"}') |\n+------------------------------+\n|                            1 |\n+------------------------------+\n1 row in set (0.01 sec)\n", "\u53e6\u8bf7\u53c2\u8003", "JSON \u51fd\u6570JSON \u6570\u636e\u7c7b\u578b"], "Examples": ["SELECT JSON_VALID('{\"foo\"=\"bar\"}');\n", "SELECT JSON_VALID('{\"foo\": \"bar\"}');\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/json-functions-utility#json_pretty"], "Title": ["JSON_PRETTY()"], "Feature": ["JSON_PRETTY()"], "Description": ["JSON_PRETTY()", "JSON_PRETTY(json_doc) \u51fd\u6570\u7528\u4e8e\u683c\u5f0f\u5316 JSON \u6587\u6863\u3002", "SELECT JSON_PRETTY('{\"person\":{\"name\":{\"first\":\"John\",\"last\":\"Doe\"},\"age\":23}}')\\G\n", "*************************** 1. row ***************************\nJSON_PRETTY('{\"person\":{\"name\":{\"first\":\"John\",\"last\":\"Doe\"},\"age\":23}}'): {\n  \"person\": {\n    \"age\": 23,\n    \"name\": {\n      \"first\": \"John\",\n      \"last\": \"Doe\"\n    }\n  }\n}\n1 row in set (0.00 sec)\n"], "Examples": [], "Category": ["JSON Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/json-functions-utility#json_storage_free"], "Title": ["JSON_STORAGE_FREE()"], "Feature": ["JSON_STORAGE_FREE()"], "Description": ["JSON_STORAGE_FREE()", "JSON_STORAGE_FREE(json_doc) \u51fd\u6570\u8fd4\u56de JSON \u503c\u5728\u539f\u5730\u66f4\u65b0\u64cd\u4f5c\u540e\u91ca\u653e\u4e86\u591a\u5c11\u5b58\u50a8\u7a7a\u95f4\uff0c\u4ee5\u4e8c\u8fdb\u5236\u8868\u793a\u3002", ".css-1weqspv{padding-top:0.5rem;padding-bottom:0.5rem;}.css-1weqspv .MuiAlert-message p{margin-bottom:0px;margin-top:0px;}", "\u6ce8\u610f\u7531\u4e8e TiDB \u7684\u5b58\u50a8\u67b6\u6784\u4e0e MySQL \u4e0d\u540c\uff0c\u56e0\u6b64\u5bf9\u4e8e\u6709\u6548\u7684 JSON \u503c\uff0c\u8be5\u51fd\u6570\u603b\u662f\u8fd4\u56de 0\uff0c\u800c\u4e14\u5b83\u7684\u5b9e\u73b0\u662f\u4e3a\u4e86\u4e0e MySQL 8.0 \u517c\u5bb9\u3002\u8bf7\u6ce8\u610f\uff0cTiDB \u4e0d\u80fd\u8fdb\u884c\u539f\u5730\u66f4\u65b0\u3002\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 RocksDB \u7684\u7a7a\u95f4\u5360\u7528\u3002", "SELECT JSON_STORAGE_FREE('{}');\n", "+-------------------------+\n| JSON_STORAGE_FREE('{}') |\n+-------------------------+\n|                       0 |\n+-------------------------+\n1 row in set (0.00 sec)\n"], "Examples": ["SELECT JSON_STORAGE_FREE('{}');\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/json-functions-utility#json_storage_size"], "Title": ["JSON_STORAGE_SIZE()"], "Feature": ["JSON_STORAGE_SIZE()"], "Description": ["JSON_STORAGE_SIZE()", "JSON_STORAGE_SIZE(json_doc) \u51fd\u6570\u8fd4\u56de\u5b58\u50a8 JSON \u503c\u6240\u9700\u7684\u5927\u81f4\u5b57\u8282\u6570\u3002\u7531\u4e8e\u8ba1\u7b97\u8be5\u5927\u5c0f\u65f6\u4e0d\u8003\u8651 TiKV \u5bf9\u6570\u636e\u7684\u538b\u7f29\uff0c\u56e0\u6b64\u8be5\u51fd\u6570\u7684\u8f93\u51fa\u4e0e MySQL \u5e76\u4e0d\u5b8c\u5168\u517c\u5bb9\u3002", "SELECT JSON_STORAGE_SIZE('{}');\n", "+-------------------------+\n| JSON_STORAGE_SIZE('{}') |\n+-------------------------+\n|                       9 |\n+-------------------------+\n1 row in set (0.00 sec)\n", "\u53e6\u8bf7\u53c2\u9605", "JSON \u51fd\u6570JSON \u6570\u636e\u7c7b\u578b"], "Examples": ["SELECT JSON_STORAGE_SIZE('{}');\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/json-functions-aggregate#json_arrayagg"], "Title": ["JSON_ARRAYAGG()"], "Feature": ["JSON_ARRAYAGG()"], "Description": ["JSON_ARRAYAGG()", "JSON_ARRAYAGG(key) \u51fd\u6570\u53ef\u4ee5\u6839\u636e\u7ed9\u5b9a\u7684 key \u5c06 key \u503c\u805a\u5408\u5230\u4e00\u4e2a JSON \u6570\u7ec4\u4e2d\u3002key \u901a\u5e38\u4e3a\u8868\u8fbe\u5f0f\u6216\u5217\u540d\u3002"], "Examples": ["SELECT JSON_ARRAYAGG(v) FROM (SELECT 1 'v' UNION SELECT 2);\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/json-functions-aggregate#json_objectagg"], "Title": ["JSON_OBJECTAGG()"], "Feature": ["JSON_OBJECTAGG()"], "Description": ["JSON_OBJECTAGG()", "JSON_OBJECTAGG(key,value) \u51fd\u6570\u53ef\u4ee5\u6839\u636e\u7ed9\u5b9a\u7684 key \u548c value \u5c06 key \u503c\u548c value \u503c\u805a\u5408\u6210\u4e00\u4e2a JSON \u5bf9\u8c61\u3002key \u548c value \u901a\u5e38\u4e3a\u8868\u8fbe\u5f0f\u6216\u5217\u540d\u3002"], "Examples": ["CREATE TABLE plants (\n    id INT PRIMARY KEY,\n    name VARCHAR(255)\n);\n\nCREATE TABLE plant_attributes (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    plant_id INT, attribute VARCHAR(255),\n    value VARCHAR(255),\n    FOREIGN KEY (plant_id) REFERENCES plants(id)\n);\n\nINSERT INTO plants\nVALUES\n(1,\"rose\"),\n(2,\"tulip\"),\n(3,\"orchid\");\n\nINSERT INTO plant_attributes(plant_id,attribute,value)\nVALUES\n(1,\"color\",\"red\"),\n(1,\"thorns\",\"yes\"),\n(2,\"color\",\"orange\"),\n(2,\"thorns\",\"no\"),\n(2,\"grows_from\",\"bulb\"),\n(3,\"color\",\"white\"),\n(3, \"thorns\",\"no\");\n", "TABLE plants;\n", "TABLE plant_attributes;\n", "SELECT\n    p.name,\n    JSON_OBJECTAGG(attribute,value)\nFROM\n    plant_attributes pa\n    LEFT JOIN plants p ON pa.plant_id=p.id\nGROUP BY\n    plant_id;\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/locking-functions.html#function_get-lock"], "Title": ["GET_LOCK()"], "Feature": ["GET_LOCK(str,timeout)"], "Description": ["Get a named lock", "\nGET_LOCK(str,timeout)\n", "\n          Tries to obtain a lock with a name given by the string\n          str, using a timeout of\n          timeout seconds. A negative\n          timeout value means infinite\n          timeout. The lock is exclusive. While held by one session,\n          other sessions cannot obtain a lock of the same name.\n        ", "\n          Returns 1 if the lock was obtained\n          successfully, 0 if the attempt timed out\n          (for example, because another client has previously locked the\n          name), or NULL if an error occurred (such\n          as running out of memory or the thread was killed with\n          mysqladmin kill).\n        ", "\n          A lock obtained with GET_LOCK()\n          is released explicitly by executing\n          RELEASE_LOCK() or implicitly\n          when your session terminates (either normally or abnormally).\n          Locks obtained with GET_LOCK()\n          are not released when transactions commit or roll back.\n        ", "\nGET_LOCK() is implemented using\n          the metadata locking (MDL) subsystem. Multiple simultaneous\n          locks can be acquired and\n          GET_LOCK() does not release any\n          existing locks. For example, suppose that you execute these\n          statements:\n        ", "Press CTRL+C to copy SELECT GET_LOCK('lock1',10);\nSELECT GET_LOCK('lock2',10);\nSELECT RELEASE_LOCK('lock2');\nSELECT RELEASE_LOCK('lock1');", "\n          The second GET_LOCK() acquires\n          a second lock and both\n          RELEASE_LOCK() calls return 1\n          (success).\n        ", "\n          It is even possible for a given session to acquire multiple\n          locks for the same name. Other sessions cannot acquire a lock\n          with that name until the acquiring session releases all its\n          locks for the name.\n        ", "\n          Uniquely named locks acquired with\n          GET_LOCK() appear in the\n          Performance Schema metadata_locks\n          table. The OBJECT_TYPE column says\n          USER LEVEL LOCK and the\n          OBJECT_NAME column indicates the lock name.\n          In the case that multiple locks are acquired for the\n          same name, only the first lock for the\n          name registers a row in the\n          metadata_locks table. Subsequent\n          locks for the name increment a counter in the lock but do not\n          acquire additional metadata locks. The\n          metadata_locks row for the lock\n          is deleted when the last lock instance on the name is\n          released.\n        ", "\n          The capability of acquiring multiple locks means there is the\n          possibility of deadlock among clients. When this happens, the\n          server chooses a caller and terminates its lock-acquisition\n          request with an\n          ER_USER_LOCK_DEADLOCK error.\n          This error does not cause transactions to roll back.\n        ", "\n          MySQL enforces a maximum length on lock names of 64\n          characters.\n        ", "\nGET_LOCK() can be used to\n          implement application locks or to simulate record locks. Names\n          are locked on a server-wide basis. If a name has been locked\n          within one session, GET_LOCK()\n          blocks any request by another session for a lock with the same\n          name. This enables clients that agree on a given lock name to\n          use the name to perform cooperative advisory locking. But be\n          aware that it also enables a client that is not among the set\n          of cooperating clients to lock a name, either inadvertently or\n          deliberately, and thus prevent any of the cooperating clients\n          from locking that name. One way to reduce the likelihood of\n          this is to use lock names that are database-specific or\n          application-specific. For example, use lock names of the form\n          db_name.str or\n          app_name.str.\n        ", "\n          If multiple clients are waiting for a lock, the order in which\n          they acquire it is undefined. Applications should not assume\n          that clients acquire the lock in the same order that they\n          issued the lock requests.\n        ", "\nGET_LOCK() is unsafe for\n          statement-based replication. A warning is logged if you use\n          this function when\n          binlog_format is set to\n          STATEMENT.\n        ", "\n          Since GET_LOCK() establishes a lock only on\n          a single mysqld, it is not suitable for use\n          with NDB Cluster, which has no way of enforcing an SQL lock\n          across multiple MySQL servers. See\n          Section\u00a025.2.7.10, \u201cLimitations Relating to Multiple NDB Cluster Nodes\u201d,\n          for more information.\n", "\n\nCaution\n\n\n            With the capability of acquiring multiple named locks, it is\n            possible for a single statement to acquire a large number of\n            locks. For example:\n          Press CTRL+C to copy INSERT INTO ... SELECT GET_LOCK(t1.col_name) FROM t1;\n            These types of statements may have certain adverse effects.\n            For example, if the statement fails part way through and\n            rolls back, locks acquired up to the point of failure still\n            exist. If the intent is for there to be a correspondence\n            between rows inserted and locks acquired, that intent is not\n            satisfied. Also, if it is important that locks are granted\n            in a certain order, be aware that result set order may\n            differ depending on which execution plan the optimizer\n            chooses. For these reasons, it may be best to limit\n            applications to a single lock-acquisition call per\n            statement.\n\n", "\n          A different locking interface is available as either a plugin\n          service or a set of loadable functions. This interface\n          provides lock namespaces and distinct read and write locks,\n          unlike the interface provided by\n          GET_LOCK() and related\n          functions. For details, see Section\u00a07.6.9.1, \u201cThe Locking Service\u201d.\n        "], "Examples": ["SELECT GET_LOCK('lock1',10);\nSELECT GET_LOCK('lock2',10);\nSELECT RELEASE_LOCK('lock2');\nSELECT RELEASE_LOCK('lock1');", "INSERT INTO ... SELECT GET_LOCK(t1.col_name) FROM t1;"], "Category": ["Locking Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/locking-functions.html#function_is-free-lock"], "Title": ["IS_FREE_LOCK()"], "Feature": ["IS_FREE_LOCK(str)"], "Description": ["Whether the named lock is free", "\nIS_FREE_LOCK(str)\n", "\n          Checks whether the lock named str\n          is free to use (that is, not locked). Returns\n          1 if the lock is free (no one is using the\n          lock), 0 if the lock is in use, and\n          NULL if an error occurs (such as an\n          incorrect argument).\n        ", "\n          This function is unsafe for statement-based replication. A\n          warning is logged if you use this function when\n          binlog_format is set to\n          STATEMENT.\n        "], "Examples": [], "Category": ["Locking Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/locking-functions.html#function_is-used-lock"], "Title": ["IS_USED_LOCK()"], "Feature": ["IS_USED_LOCK(str)"], "Description": ["Whether the named lock is in use; return connection identifier if", "\nIS_USED_LOCK(str)\n", "\n          Checks whether the lock named str\n          is in use (that is, locked). If so, it returns the connection\n          identifier of the client session that holds the lock.\n          Otherwise, it returns NULL.\n        ", "\n          This function is unsafe for statement-based replication. A\n          warning is logged if you use this function when\n          binlog_format is set to\n          STATEMENT.\n        "], "Examples": [], "Category": ["Locking Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/locking-functions.html#function_release-lock"], "Title": ["RELEASE_LOCK()"], "Feature": ["RELEASE_LOCK(str)"], "Description": ["Release the named lock", "\nRELEASE_LOCK(str)\n", "\n          Releases the lock named by the string\n          str that was obtained with\n          GET_LOCK(). Returns\n          1 if the lock was released,\n          0 if the lock was not established by this\n          thread (in which case the lock is not released), and\n          NULL if the named lock did not exist. The\n          lock does not exist if it was never obtained by a call to\n          GET_LOCK() or if it has\n          previously been released.\n        ", "\n          The DO statement is convenient\n          to use with RELEASE_LOCK(). See\n          Section\u00a015.2.3, \u201cDO Statement\u201d.\n        ", "\n          This function is unsafe for statement-based replication. A\n          warning is logged if you use this function when\n          binlog_format is set to\n          STATEMENT.\n"], "Examples": [], "Category": ["Locking Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/cast-functions-and-operators#cast"], "Title": ["CAST"], "Feature": ["CAST"], "Description": ["CAST", "CAST(<expression> AS <type> [ARRAY]) \u51fd\u6570\u7528\u4e8e\u5c06\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u8f6c\u6362\u4e3a\u6307\u5b9a\u7684\u6570\u636e\u7c7b\u578b\u3002", "\u6b64\u5916\uff0c\u4f60\u8fd8\u53ef\u4ee5\u5c06\u8be5\u51fd\u6570\u7528\u4e8e\u521b\u5efa\u591a\u503c\u7d22\u5f15\u3002", "\u652f\u6301\u7684\u6570\u636e\u7c7b\u578b\u5305\u62ec\uff1a", "\u7c7b\u578b\u63cf\u8ff0\u662f\u5426\u53ef\u7528\u4e8e\u591a\u503c\u7d22\u5f15BINARY(n)\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\u5426CHAR(n)\u5b57\u7b26\u4e32\u662f\uff0c\u4f46\u4ec5\u5f53\u6307\u5b9a\u4e86\u957f\u5ea6\u65f6\u624d\u6709\u6548DATE\u65e5\u671f\u662fDATETIME(fsp)\u65e5\u671f/\u65f6\u95f4\uff0c\u5176\u4e2d fsp \u662f\u53ef\u9009\u7684\u662fDECIMAL(n, m)\u5341\u8fdb\u5236\u6570\uff0c\u5176\u4e2d n \u548c m \u662f\u53ef\u9009\u7684\uff0c\u5982\u679c\u672a\u6307\u5b9a\uff0c\u5219\u9ed8\u8ba4\u4e3a 10 \u548c 0\u5426DOUBLE\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\u5426FLOAT(n)\u6d6e\u70b9\u6570\uff0c\u5176\u4e2d n \u662f\u53ef\u9009\u7684\uff0c\u5e94\u4ecb\u4e8e 0 \u548c 53 \u4e4b\u95f4\u5426JSONJSON\u5426REAL\u6d6e\u70b9\u6570\u662fSIGNED [INTEGER]\u6709\u7b26\u53f7\u6574\u6570\u662fTIME(fsp)\u65f6\u95f4\u662fUNSIGNED [INTEGER]\u65e0\u7b26\u53f7\u6574\u6570\u662fYEAR\u5e74\u5426"], "Examples": ["SELECT CAST(0x54694442 AS CHAR);\n", "CREATE TABLE t (\n    id INT PRIMARY KEY,\n    j JSON,\n    INDEX idx_a ((CAST(j->'$.a' AS UNSIGNED ARRAY)))\n);\nINSERT INTO t VALUES (1, JSON_OBJECT('a',JSON_ARRAY(1,2,3)));\nINSERT INTO t VALUES (2, JSON_OBJECT('a',JSON_ARRAY(4,5,6)));\nINSERT INTO t VALUES (3, JSON_OBJECT('a',JSON_ARRAY(7,8,9)));\nANALYZE TABLE t;\n"], "Category": ["Cast Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/locking-functions.html#function_release-all-locks"], "Title": ["RELEASE_ALL_LOCKS()"], "Feature": ["RELEASE_ALL_LOCKS()"], "Description": ["Release all current named locks", "\nRELEASE_ALL_LOCKS()\n", "\n          Releases all named locks held by the current session and\n          returns the number of locks released (0 if there were none)\n        ", "\n          This function is unsafe for statement-based replication. A\n          warning is logged if you use this function when\n          binlog_format is set to\n          STATEMENT.\n        "], "Examples": [], "Category": ["Locking Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_abs"], "Title": ["ABS()"], "Feature": ["ABS(X)"], "Description": ["Return the absolute value", "\nABS(X)\n", "\n            Returns the absolute value of X,\n            or NULL if X\n            is NULL.\n          ", "\n            The result type is derived from the argument type. An\n            implication of this is that\n            ABS(-9223372036854775808)\n            produces an error because the result cannot be stored in a\n            signed BIGINT value.\n          ", "Press CTRL+C to copy mysql> SELECT ABS(2);\n        -> 2\nmysql> SELECT ABS(-32);\n        -> 32", "\n            This function is safe to use with\n            BIGINT values.\n          "], "Examples": ["mysql> SELECT ABS(2);\n        -> 2\nmysql> SELECT ABS(-32);\n        -> 32"], "Category": ["Mathematical Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_acos"], "Title": ["ACOS()"], "Feature": ["ACOS(X)"], "Description": ["Return the arc cosine", "\nACOS(X)\n", "\n            Returns the arc cosine of X, that\n            is, the value whose cosine is X.\n            Returns NULL if\n            X is not in the range\n            -1 to 1, or if\n            X is NULL.\n          ", "Press CTRL+C to copy mysql> SELECT ACOS(1);\n        -> 0\nmysql> SELECT ACOS(1.0001);\n        -> NULL\nmysql> SELECT ACOS(0);\n        -> 1.5707963267949"], "Examples": ["mysql> SELECT ACOS(1);\n        -> 0\nmysql> SELECT ACOS(1.0001);\n        -> NULL\nmysql> SELECT ACOS(0);\n        -> 1.5707963267949"], "Category": ["Mathematical Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_asin"], "Title": ["ASIN()"], "Feature": ["ASIN(X)"], "Description": ["Return the arc sine", "\nASIN(X)\n", "\n            Returns the arc sine of X, that\n            is, the value whose sine is X.\n            Returns NULL if\n            X is not in the range\n            -1 to 1, or if\n            X is NULL.\n          ", "Press CTRL+C to copy mysql> SELECT ASIN(0.2);\n        -> 0.20135792079033\nmysql> SELECT ASIN('foo');\n\n+-------------+\n| ASIN('foo') |\n+-------------+\n|           0 |\n+-------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS;\n+---------+------+-----------------------------------------+\n| Level   | Code | Message                                 |\n+---------+------+-----------------------------------------+\n| Warning | 1292 | Truncated incorrect DOUBLE value: 'foo' |\n+---------+------+-----------------------------------------+"], "Examples": ["mysql> SELECT ASIN(0.2);\n        -> 0.20135792079033\nmysql> SELECT ASIN('foo');\n\n+-------------+\n| ASIN('foo') |\n+-------------+\n|           0 |\n+-------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS;\n+---------+------+-----------------------------------------+\n| Level   | Code | Message                                 |\n+---------+------+-----------------------------------------+\n| Warning | 1292 | Truncated incorrect DOUBLE value: 'foo' |\n+---------+------+-----------------------------------------+"], "Category": ["Mathematical Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_atan"], "Title": ["ATAN()"], "Feature": ["ATAN(X)"], "Description": ["Return the arc tangent", "\nATAN(X)\n", "\n            Returns the arc tangent of X,\n            that is, the value whose tangent is\n            X. Returns\n            NULL if\n            X is NULL\n", "Press CTRL+C to copy mysql> SELECT ATAN(2);\n        -> 1.1071487177941\nmysql> SELECT ATAN(-2);\n        -> -1.1071487177941"], "Examples": ["mysql> SELECT ATAN(2);\n        -> 1.1071487177941\nmysql> SELECT ATAN(-2);\n        -> -1.1071487177941"], "Category": ["Mathematical Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_atan2"], "Title": ["ATAN2(), ATAN()"], "Feature": ["ATAN(Y,X)"], "Description": ["Return the arc tangent of the two arguments", "\nATAN(Y,X),\n            ATAN2(Y,X)\n", "\n            Returns the arc tangent of the two variables\n            X and\n            Y. It is similar to calculating\n            the arc tangent of Y /\n            X, except that the\n            signs of both arguments are used to determine the quadrant\n            of the result. Returns NULL if\n            X or Y\n            is NULL.\n          ", "Press CTRL+C to copy mysql> SELECT ATAN(-2,2);\n        -> -0.78539816339745\nmysql> SELECT ATAN2(PI(),0);\n        -> 1.5707963267949"], "Examples": ["mysql> SELECT ATAN(-2,2);\n        -> -0.78539816339745\nmysql> SELECT ATAN2(PI(),0);\n        -> 1.5707963267949"], "Category": ["Mathematical Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_ceil"], "Title": ["CEIL()"], "Feature": ["CEIL(X)"], "Description": ["Return the smallest integer value not less than the argument", "\nCEIL(X)\n", "\nCEIL() is a synonym for\n            CEILING().\n          "], "Examples": [], "Category": ["Mathematical Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_ceiling"], "Title": ["CEILING()"], "Feature": ["CEILING(X)"], "Description": ["Return the smallest integer value not less than the argument", "\nCEILING(X)\n", "\n            Returns the smallest integer value not less than\n            X. Returns\n            NULL if X is\n            NULL.\n          ", "Press CTRL+C to copy mysql> SELECT CEILING(1.23);\n        -> 2\nmysql> SELECT CEILING(-1.23);\n        -> -1", "\n            For exact-value numeric arguments, the return value has an\n            exact-value numeric type. For string or floating-point\n            arguments, the return value has a floating-point type.\n          "], "Examples": ["mysql> SELECT CEILING(1.23);\n        -> 2\nmysql> SELECT CEILING(-1.23);\n        -> -1"], "Category": ["Mathematical Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_conv"], "Title": ["CONV()"], "Feature": ["CONV(N,from_base,to_base)"], "Description": ["Convert numbers between different number bases", "\nCONV(N,from_base,to_base)\n", "\n            Converts numbers between different number bases. Returns a\n            string representation of the number\n            N, converted from base\n            from_base to base\n            to_base. Returns\n            NULL if any argument is\n            NULL. The argument\n            N is interpreted as an integer,\n            but may be specified as an integer or a string. The minimum\n            base is 2 and the maximum base is\n            36. If\n            from_base is a negative number,\n            N is regarded as a signed number.\n            Otherwise, N is treated as\n            unsigned. CONV() works with\n            64-bit precision.\n          ", "\nCONV() returns NULL if\n            any of its arguments are NULL.\n          ", "Press CTRL+C to copy mysql> SELECT CONV('a',16,2);\n        -> '1010'\nmysql> SELECT CONV('6E',18,8);\n        -> '172'\nmysql> SELECT CONV(-17,10,-18);\n        -> '-H'\nmysql> SELECT CONV(10+'10'+'10'+X'0a',10,10);\n        -> '40'"], "Examples": ["mysql> SELECT CONV('a',16,2);\n        -> '1010'\nmysql> SELECT CONV('6E',18,8);\n        -> '172'\nmysql> SELECT CONV(-17,10,-18);\n        -> '-H'\nmysql> SELECT CONV(10+'10'+'10'+X'0a',10,10);\n        -> '40'"], "Category": ["Mathematical Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_cos"], "Title": ["COS()"], "Feature": ["COS(X)"], "Description": ["Return the cosine", "\nCOS(X)\n", "\n            Returns the cosine of X, where\n            X is given in radians. Returns\n            NULL if X is\n            NULL.\n          ", "Press CTRL+C to copy mysql> SELECT COS(PI());\n        -> -1"], "Examples": ["mysql> SELECT COS(PI());\n        -> -1"], "Category": ["Mathematical Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/cast-functions-and-operators#convert"], "Title": ["CONVERT"], "Feature": ["CONVERT"], "Description": ["CONVERT", "CONVERT() \u51fd\u6570\u7528\u4e8e\u5728\u5b57\u7b26\u96c6\u4e4b\u95f4\u8fdb\u884c\u8f6c\u6362\u3002"], "Examples": ["SELECT CONVERT(0x616263 USING utf8mb4);\n"], "Category": ["Cast Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_cot"], "Title": ["COT()"], "Feature": ["COT(X)"], "Description": ["Return the cotangent", "\nCOT(X)\n", "\n            Returns the cotangent of X.\n            Returns NULL if\n            X is NULL.\n          ", "Press CTRL+C to copy mysql> SELECT COT(12);\n        -> -1.5726734063977\nmysql> SELECT COT(0);\n        -> out-of-range error"], "Examples": ["mysql> SELECT COT(12);\n        -> -1.5726734063977\nmysql> SELECT COT(0);\n        -> out-of-range error"], "Category": ["Mathematical Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_crc32"], "Title": ["CRC32()"], "Feature": ["CRC32(expr)"], "Description": ["Compute a cyclic redundancy check value", "\nCRC32(expr)\n", "\n            Computes a cyclic redundancy check value and returns a\n            32-bit unsigned value. The result is NULL\n            if the argument is NULL. The argument is\n            expected to be a string and (if possible) is treated as one\n            if it is not.\n          ", "Press CTRL+C to copy mysql> SELECT CRC32('MySQL');\n        -> 3259397556\nmysql> SELECT CRC32('mysql');\n        -> 2501908538"], "Examples": ["mysql> SELECT CRC32('MySQL');\n        -> 3259397556\nmysql> SELECT CRC32('mysql');\n        -> 2501908538"], "Category": ["Mathematical Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_degrees"], "Title": ["DEGREES()"], "Feature": ["DEGREES(X)"], "Description": ["Convert radians to degrees", "\nDEGREES(X)\n", "\n            Returns the argument X, converted\n            from radians to degrees. Returns NULL if\n            X is NULL.\n          ", "Press CTRL+C to copy mysql> SELECT DEGREES(PI());\n        -> 180\nmysql> SELECT DEGREES(PI() / 2);\n        -> 90"], "Examples": ["mysql> SELECT DEGREES(PI());\n        -> 180\nmysql> SELECT DEGREES(PI() / 2);\n        -> 90"], "Category": ["Mathematical Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_exp"], "Title": ["EXP()"], "Feature": ["EXP(X)"], "Description": ["Raise to the power of", "\nEXP(X)\n", "\n            Returns the value of e (the base of\n            natural logarithms) raised to the power of\n            X. The inverse of this function\n            is LOG() (using a single\n            argument only) or LN().\n          ", "\n            If X is NULL,\n            this function returns NULL.\n          ", "Press CTRL+C to copy mysql> SELECT EXP(2);\n        -> 7.3890560989307\nmysql> SELECT EXP(-2);\n        -> 0.13533528323661\nmysql> SELECT EXP(0);\n        -> 1"], "Examples": ["mysql> SELECT EXP(2);\n        -> 7.3890560989307\nmysql> SELECT EXP(-2);\n        -> 0.13533528323661\nmysql> SELECT EXP(0);\n        -> 1"], "Category": ["Mathematical Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_floor"], "Title": ["FLOOR()"], "Feature": ["FLOOR(X)"], "Description": ["Return the largest integer value not greater than the argument", "\nFLOOR(X)\n", "\n            Returns the largest integer value not greater than\n            X. Returns\n            NULL if X is\n            NULL.\n          ", "Press CTRL+C to copy mysql> SELECT FLOOR(1.23), FLOOR(-1.23);\n        -> 1, -2", "\n            For exact-value numeric arguments, the return value has an\n            exact-value numeric type. For string or floating-point\n            arguments, the return value has a floating-point type.\n          "], "Examples": ["mysql> SELECT FLOOR(1.23), FLOOR(-1.23);\n        -> 1, -2"], "Category": ["Mathematical Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_ln"], "Title": ["LN()"], "Feature": ["LN(X)"], "Description": ["Return the natural logarithm of the argument", "\nLN(X)\n", "\n            Returns the natural logarithm of\n            X; that is, the\n            base-e logarithm of\n            X. If\n            X is less than or equal to 0.0E0,\n            the function returns NULL and a warning\n            \u201cInvalid argument for logarithm\u201d is reported.\n            Returns NULL if\n            X is NULL.\n          ", "Press CTRL+C to copy mysql> SELECT LN(2);\n        -> 0.69314718055995\nmysql> SELECT LN(-2);\n        -> NULL", "\n            This function is synonymous with\n            LOG(X).\n            The inverse of this function is the\n            EXP() function.\n          "], "Examples": ["mysql> SELECT LN(2);\n        -> 0.69314718055995\nmysql> SELECT LN(-2);\n        -> NULL"], "Category": ["Mathematical Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_log"], "Title": ["LOG()"], "Feature": ["LOG(X)"], "Description": ["Return the natural logarithm of the first argument", "\nLOG(X),\n            LOG(B,X)\n", "\n            If called with one parameter, this function returns the\n            natural logarithm of X. If\n            X is less than or equal to 0.0E0,\n            the function returns NULL and a warning\n            \u201cInvalid argument for logarithm\u201d is reported.\n            Returns NULL if\n            X or B\n            is NULL.\n          ", "\n            The inverse of this function (when called with a single\n            argument) is the EXP()\n            function.\n          ", "Press CTRL+C to copy mysql> SELECT LOG(2);\n        -> 0.69314718055995\nmysql> SELECT LOG(-2);\n        -> NULL", "\n            If called with two parameters, this function returns the\n            logarithm of X to the base\n            B. If\n            X is less than or equal to 0, or\n            if B is less than or equal to 1,\n            then NULL is returned.\n          ", "Press CTRL+C to copy mysql> SELECT LOG(2,65536);\n        -> 16\nmysql> SELECT LOG(10,100);\n        -> 2\nmysql> SELECT LOG(1,100);\n        -> NULL", "\nLOG(B,X)\n            is equivalent to\n            LOG(X) /\n            LOG(B).\n          "], "Examples": ["mysql> SELECT LOG(2);\n        -> 0.69314718055995\nmysql> SELECT LOG(-2);\n        -> NULL", "mysql> SELECT LOG(2,65536);\n        -> 16\nmysql> SELECT LOG(10,100);\n        -> 2\nmysql> SELECT LOG(1,100);\n        -> NULL"], "Category": ["Mathematical Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_log10"], "Title": ["LOG10()"], "Feature": ["LOG10(X)"], "Description": ["Return the base-10 logarithm of the argument", "\nLOG10(X)\n", "\n            Returns the base-10 logarithm of\n            X. If\n            X is less than or equal to 0.0E0,\n            the function returns NULL and a warning\n            \u201cInvalid argument for logarithm\u201d is reported.\n            Returns NULL if\n            X is NULL.\n          ", "Press CTRL+C to copy mysql> SELECT LOG10(2);\n        -> 0.30102999566398\nmysql> SELECT LOG10(100);\n        -> 2\nmysql> SELECT LOG10(-100);\n        -> NULL", "\nLOG10(X)\n            is equivalent to\n            LOG(10,X).\n          "], "Examples": ["mysql> SELECT LOG10(2);\n        -> 0.30102999566398\nmysql> SELECT LOG10(100);\n        -> 2\nmysql> SELECT LOG10(-100);\n        -> NULL"], "Category": ["Mathematical Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_log2"], "Title": ["LOG2()"], "Feature": ["LOG2(X)"], "Description": ["Return the base-2 logarithm of the argument", "\nLOG2(X)\n", "\n            Returns the base-2 logarithm of\n            X. If\n            X is less than or equal to 0.0E0,\n            the function returns NULL and a warning\n            \u201cInvalid argument for logarithm\u201d is reported.\n            Returns NULL if\n            X is NULL.\n          ", "Press CTRL+C to copy mysql> SELECT LOG2(65536);\n        -> 16\nmysql> SELECT LOG2(-100);\n        -> NULL", "\nLOG2() is useful for finding\n            out how many bits a number requires for storage. This\n            function is equivalent to the expression\n            LOG(X) /\n            LOG(2).\n          "], "Examples": ["mysql> SELECT LOG2(65536);\n        -> 16\nmysql> SELECT LOG2(-100);\n        -> NULL"], "Category": ["Mathematical Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_mod"], "Title": ["MOD()"], "Feature": ["MOD(N,M)"], "Description": ["Return the remainder", "\nMOD(N,M),\n            N\n            % M,\n            N\n            MOD M\n", "\n            Modulo operation. Returns the remainder of\n            N divided by\n            M. Returns\n            NULL if M or\n            N is NULL.\n          ", "Press CTRL+C to copy mysql> SELECT MOD(234, 10);\n        -> 4\nmysql> SELECT 253 % 7;\n        -> 1\nmysql> SELECT MOD(29,9);\n        -> 2\nmysql> SELECT 29 MOD 9;\n        -> 2", "\n            This function is safe to use with\n            BIGINT values.\n          ", "\nMOD() also works on values\n            that have a fractional part and returns the exact remainder\n            after division:\n          ", "Press CTRL+C to copy mysql> SELECT MOD(34.5,3);\n        -> 1.5", "\nMOD(N,0)\n            returns NULL.\n          "], "Examples": ["mysql> SELECT MOD(234, 10);\n        -> 4\nmysql> SELECT 253 % 7;\n        -> 1\nmysql> SELECT MOD(29,9);\n        -> 2\nmysql> SELECT 29 MOD 9;\n        -> 2", "mysql> SELECT MOD(34.5,3);\n        -> 1.5"], "Category": ["Mathematical Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_adddate"], "Title": ["ADDDATE()"], "Feature": ["ADDDATE(date,INTERVAL\n          expr\nunit)"], "Description": ["Add time values (intervals) to a date value", "\nADDDATE(date,INTERVAL\n          expr\nunit),\n          ADDDATE(date,days)\n", "\n          When invoked with the INTERVAL form of the\n          second argument, ADDDATE() is a\n          synonym for DATE_ADD(). The\n          related function SUBDATE() is a\n          synonym for DATE_SUB(). For\n          information on the INTERVAL\nunit argument, see\n          Temporal Intervals.\n        ", "Press CTRL+C to copy mysql> SELECT DATE_ADD('2008-01-02', INTERVAL 31 DAY);\n        -> '2008-02-02'\nmysql> SELECT ADDDATE('2008-01-02', INTERVAL 31 DAY);\n        -> '2008-02-02'", "\n          When invoked with the days form of\n          the second argument, MySQL treats it as an integer number of\n          days to be added to expr.\n        ", "Press CTRL+C to copy mysql> SELECT ADDDATE('2008-01-02', 31);\n        -> '2008-02-02'", "\n          This function returns NULL if\n          date or\n          days is NULL.\n        "], "Examples": ["mysql> SELECT DATE_ADD('2008-01-02', INTERVAL 31 DAY);\n        -> '2008-02-02'\nmysql> SELECT ADDDATE('2008-01-02', INTERVAL 31 DAY);\n        -> '2008-02-02'", "mysql> SELECT ADDDATE('2008-01-02', 31);\n        -> '2008-02-02'"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_pi"], "Title": ["PI()"], "Feature": ["PI()"], "Description": ["Return the value of pi", "\nPI()\n", "\n            Returns the value of \u03c0 (pi). The default number of\n            decimal places displayed is seven, but MySQL uses the full\n            double-precision value internally.\n          ", "\n            Because the return value of this function is a\n            double-precision value, its exact representation may vary\n            between platforms or implementations. This also applies to\n            any expressions making use of PI(). See\n            Section\u00a013.1.4, \u201cFloating-Point Types (Approximate Value) - FLOAT, DOUBLE\u201d.\n          ", "Press CTRL+C to copy mysql> SELECT PI();\n        -> 3.141593\nmysql> SELECT PI()+0.000000000000000000;\n        -> 3.141592653589793000"], "Examples": ["mysql> SELECT PI();\n        -> 3.141593\nmysql> SELECT PI()+0.000000000000000000;\n        -> 3.141592653589793000"], "Category": ["Mathematical Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_pow"], "Title": ["POW()"], "Feature": ["POW(X,Y)"], "Description": ["Return the argument raised to the specified power", "\nPOW(X,Y)\n", "\n            Returns the value of X raised to\n            the power of Y. Returns\n            NULL if X or\n            Y is NULL.\n          ", "Press CTRL+C to copy mysql> SELECT POW(2,2);\n        -> 4\nmysql> SELECT POW(2,-2);\n        -> 0.25"], "Examples": ["mysql> SELECT POW(2,2);\n        -> 4\nmysql> SELECT POW(2,-2);\n        -> 0.25"], "Category": ["Mathematical Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_power"], "Title": ["POWER()"], "Feature": ["POWER(X,Y)"], "Description": ["Return the argument raised to the specified power", "\nPOWER(X,Y)\n", "\n            This is a synonym for POW().\n          "], "Examples": [], "Category": ["Mathematical Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_radians"], "Title": ["RADIANS()"], "Feature": ["RADIANS(X)"], "Description": ["Return argument converted to radians", "\nRADIANS(X)\n", "\n            Returns the argument X, converted\n            from degrees to radians. (Note that \u03c0 radians equals 180\n            degrees.) Returns NULL if\n            X is NULL.\n          ", "Press CTRL+C to copy mysql> SELECT RADIANS(90);\n        -> 1.5707963267949"], "Examples": ["mysql> SELECT RADIANS(90);\n        -> 1.5707963267949"], "Category": ["Mathematical Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_rand"], "Title": ["RAND()"], "Feature": ["RAND([N])"], "Description": ["Return a random floating-point value", "\nRAND([N])\n", "\n            Returns a random floating-point value\n            v in the range\n            0 <= v <\n            1.0. To obtain a random integer\n            R in the range\n            i <=\n            R <\n            j, use the expression\n            FLOOR(i\n            + RAND() * (j\n            \u2212 i)).\n            For example, to obtain a random integer in the range the\n            range 7 <=\n            R < 12, use\n            the following statement:\n          ", "Press CTRL+C to copy SELECT FLOOR(7 + (RAND() * 5));", "\n            If an integer argument N is\n            specified, it is used as the seed value:\n", "\n\n                With a constant initializer argument, the seed is\n                initialized once when the statement is prepared, prior\n                to execution.\n              \n                With a nonconstant initializer argument (such as a\n                column name), the seed is initialized with the value for\n                each invocation of\n                RAND().\n\n", "\n            One implication of this behavior is that for equal argument\n            values,\n            RAND(N)\n            returns the same value each time, and thus produces a\n            repeatable sequence of column values. In the following\n            example, the sequence of values produced by\n            RAND(3) is the same both places it\n            occurs.\n          ", "Press CTRL+C to copy mysql> CREATE TABLE t (i INT);\nQuery OK, 0 rows affected (0.42 sec)\n\nmysql> INSERT INTO t VALUES(1),(2),(3);\nQuery OK, 3 rows affected (0.00 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n\nmysql> SELECT i, RAND() FROM t;\n+------+------------------+\n| i    | RAND()           |\n+------+------------------+\n|    1 | 0.61914388706828 |\n|    2 | 0.93845168309142 |\n|    3 | 0.83482678498591 |\n+------+------------------+\n3 rows in set (0.00 sec)\n\nmysql> SELECT i, RAND(3) FROM t;\n+------+------------------+\n| i    | RAND(3)          |\n+------+------------------+\n|    1 | 0.90576975597606 |\n|    2 | 0.37307905813035 |\n|    3 | 0.14808605345719 |\n+------+------------------+\n3 rows in set (0.00 sec)\n\nmysql> SELECT i, RAND() FROM t;\n+------+------------------+\n| i    | RAND()           |\n+------+------------------+\n|    1 | 0.35877890638893 |\n|    2 | 0.28941420772058 |\n|    3 | 0.37073435016976 |\n+------+------------------+\n3 rows in set (0.00 sec)\n\nmysql> SELECT i, RAND(3) FROM t;\n+------+------------------+\n| i    | RAND(3)          |\n+------+------------------+\n|    1 | 0.90576975597606 |\n|    2 | 0.37307905813035 |\n|    3 | 0.14808605345719 |\n+------+------------------+\n3 rows in set (0.01 sec)", "\nRAND() in a\n            WHERE clause is evaluated for every row\n            (when selecting from one table) or combination of rows (when\n            selecting from a multiple-table join). Thus, for optimizer\n            purposes, RAND() is not a\n            constant value and cannot be used for index optimizations.\n            For more information, see\n            Section\u00a010.2.1.20, \u201cFunction Call Optimization\u201d.\n          ", "\n            Use of a column with RAND()\n            values in an ORDER BY or GROUP\n            BY clause may yield unexpected results because for\n            either clause a RAND()\n            expression can be evaluated multiple times for the same row,\n            each time returning a different result. If the goal is to\n            retrieve rows in random order, you can use a statement like\n            this:\n          ", "Press CTRL+C to copy SELECT * FROM tbl_name ORDER BY RAND();", "\n            To select a random sample from a set of rows, combine\n            ORDER BY RAND() with\n            LIMIT:\n          ", "Press CTRL+C to copy SELECT * FROM table1, table2 WHERE a=b AND c<d ORDER BY RAND() LIMIT 1000;", "\nRAND() is not meant to be a\n            perfect random generator. It is a fast way to generate\n            random numbers on demand that is portable between platforms\n            for the same MySQL version.\n          ", "\n            This function is unsafe for statement-based replication. A\n            warning is logged if you use this function when\n            binlog_format is set to\n            STATEMENT.\n          "], "Examples": ["SELECT FLOOR(7 + (RAND() * 5));", "mysql> CREATE TABLE t (i INT);\nQuery OK, 0 rows affected (0.42 sec)\n\nmysql> INSERT INTO t VALUES(1),(2),(3);\nQuery OK, 3 rows affected (0.00 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n\nmysql> SELECT i, RAND() FROM t;\n+------+------------------+\n| i    | RAND()           |\n+------+------------------+\n|    1 | 0.61914388706828 |\n|    2 | 0.93845168309142 |\n|    3 | 0.83482678498591 |\n+------+------------------+\n3 rows in set (0.00 sec)\n\nmysql> SELECT i, RAND(3) FROM t;\n+------+------------------+\n| i    | RAND(3)          |\n+------+------------------+\n|    1 | 0.90576975597606 |\n|    2 | 0.37307905813035 |\n|    3 | 0.14808605345719 |\n+------+------------------+\n3 rows in set (0.00 sec)\n\nmysql> SELECT i, RAND() FROM t;\n+------+------------------+\n| i    | RAND()           |\n+------+------------------+\n|    1 | 0.35877890638893 |\n|    2 | 0.28941420772058 |\n|    3 | 0.37073435016976 |\n+------+------------------+\n3 rows in set (0.00 sec)\n\nmysql> SELECT i, RAND(3) FROM t;\n+------+------------------+\n| i    | RAND(3)          |\n+------+------------------+\n|    1 | 0.90576975597606 |\n|    2 | 0.37307905813035 |\n|    3 | 0.14808605345719 |\n+------+------------------+\n3 rows in set (0.01 sec)", "SELECT * FROM tbl_name ORDER BY RAND();", "SELECT * FROM table1, table2 WHERE a=b AND c<d ORDER BY RAND() LIMIT 1000;"], "Category": ["Mathematical Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_round"], "Title": ["ROUND()"], "Feature": ["ROUND(X)"], "Description": ["Round the argument", "\nROUND(X),\n            ROUND(X,D)\n", "\n            Rounds the argument X to\n            D decimal places. The rounding\n            algorithm depends on the data type of\n            X. D\n            defaults to 0 if not specified. D\n            can be negative to cause D digits\n            left of the decimal point of the value\n            X to become zero. The maximum\n            absolute value for D is 30; any\n            digits in excess of 30 (or -30) are truncated. If\n            X or D\n            is NULL, the function returns\n            NULL.\n          ", "Press CTRL+C to copy mysql> SELECT ROUND(-1.23);\n        -> -1\nmysql> SELECT ROUND(-1.58);\n        -> -2\nmysql> SELECT ROUND(1.58);\n        -> 2\nmysql> SELECT ROUND(1.298, 1);\n        -> 1.3\nmysql> SELECT ROUND(1.298, 0);\n        -> 1\nmysql> SELECT ROUND(23.298, -1);\n        -> 20\nmysql> SELECT ROUND(.12345678901234567890123456789012345, 35);\n        -> 0.123456789012345678901234567890", "\n            The return value has the same type as the first argument\n            (assuming that it is integer, double, or decimal). This\n            means that for an integer argument, the result is an integer\n            (no decimal places):\n          ", "Press CTRL+C to copy mysql> SELECT ROUND(150.000,2), ROUND(150,2);\n+------------------+--------------+\n| ROUND(150.000,2) | ROUND(150,2) |\n+------------------+--------------+\n|           150.00 |          150 |\n+------------------+--------------+", "\nROUND() uses the following\n            rules depending on the type of the first argument:\n", "\n\n                For exact-value numbers,\n                ROUND() uses the\n                \u201cround half away from zero\u201d or \u201cround\n                toward nearest\u201d rule: A value with a fractional\n                part of .5 or greater is rounded up to the next integer\n                if positive or down to the next integer if negative. (In\n                other words, it is rounded away from zero.) A value with\n                a fractional part less than .5 is rounded down to the\n                next integer if positive or up to the next integer if\n                negative.\n              \n                For approximate-value numbers, the result depends on the\n                C library. On many systems, this means that\n                ROUND() uses the\n                \u201cround to nearest even\u201d rule: A value with\n                a fractional part exactly halfway between two integers\n                is rounded to the nearest even integer.\n\n", "\n            The following example shows how rounding differs for exact\n            and approximate values:\n          ", "Press CTRL+C to copy mysql> SELECT ROUND(2.5), ROUND(25E-1);\n+------------+--------------+\n| ROUND(2.5) | ROUND(25E-1) |\n+------------+--------------+\n| 3          |            2 |\n+------------+--------------+", "\n            For more information, see Section\u00a014.24, \u201cPrecision Math\u201d.\n          ", "\n            The data type returned by ROUND() (and\n            TRUNCATE()) is determined\n            according to the rules listed here:\n", "\n\n                When the first argument is of any integer type, the\n                return type is always\n                BIGINT.\n              \n                When the first argument is of any floating-point type or\n                of any non-numeric type, the return type is always\n                DOUBLE.\n              \n                When the first argument is a\n                DECIMAL value, the return\n                type is also DECIMAL.\n              \n                The type attributes for the return value are also copied\n                from the first argument, except in the case of\n                DECIMAL, when the second argument is\n                a constant value.\n              \n                When the desired number of decimal places is less than\n                the scale of the argument, the scale and the precision\n                of the result are adjusted accordingly.\n              \n                In addition, for ROUND() (but not for\n                the TRUNCATE() function),\n                the precision is extended by one place to accommodate\n                rounding that increases the number of significant\n                digits. If the second argument is negative, the return\n                type is adjusted such that its scale is 0, with a\n                corresponding precision. For example,\n                ROUND(99.999, 2) returns\n                100.00\u2014the first argument is\n                DECIMAL(5, 3), and the return type is\n                DECIMAL(5, 2).\n              \n                If the second argument is negative, the return type has\n                scale 0 and a corresponding precision;\n                ROUND(99.999, -1) returns\n                100, which is DECIMAL(3,\n                0).\n\n"], "Examples": ["mysql> SELECT ROUND(-1.23);\n        -> -1\nmysql> SELECT ROUND(-1.58);\n        -> -2\nmysql> SELECT ROUND(1.58);\n        -> 2\nmysql> SELECT ROUND(1.298, 1);\n        -> 1.3\nmysql> SELECT ROUND(1.298, 0);\n        -> 1\nmysql> SELECT ROUND(23.298, -1);\n        -> 20\nmysql> SELECT ROUND(.12345678901234567890123456789012345, 35);\n        -> 0.123456789012345678901234567890", "mysql> SELECT ROUND(150.000,2), ROUND(150,2);\n+------------------+--------------+\n| ROUND(150.000,2) | ROUND(150,2) |\n+------------------+--------------+\n|           150.00 |          150 |\n+------------------+--------------+", "mysql> SELECT ROUND(2.5), ROUND(25E-1);\n+------------+--------------+\n| ROUND(2.5) | ROUND(25E-1) |\n+------------+--------------+\n| 3          |            2 |\n+------------+--------------+"], "Category": ["Mathematical Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_sign"], "Title": ["SIGN()"], "Feature": ["SIGN(X)"], "Description": ["Return the sign of the argument", "\nSIGN(X)\n", "\n            Returns the sign of the argument as -1,\n            0, or 1, depending on\n            whether X is negative, zero, or\n            positive. Returns NULL if\n            X is NULL.\n          ", "Press CTRL+C to copy mysql> SELECT SIGN(-32);\n        -> -1\nmysql> SELECT SIGN(0);\n        -> 0\nmysql> SELECT SIGN(234);\n        -> 1"], "Examples": ["mysql> SELECT SIGN(-32);\n        -> -1\nmysql> SELECT SIGN(0);\n        -> 0\nmysql> SELECT SIGN(234);\n        -> 1"], "Category": ["Mathematical Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_sin"], "Title": ["SIN()"], "Feature": ["SIN(X)"], "Description": ["Return the sine of the argument", "\nSIN(X)\n", "\n            Returns the sine of X, where\n            X is given in radians. Returns\n            NULL if X is\n            NULL.\n          ", "Press CTRL+C to copy mysql> SELECT SIN(PI());\n        -> 1.2246063538224e-16\nmysql> SELECT ROUND(SIN(PI()));\n        -> 0"], "Examples": ["mysql> SELECT SIN(PI());\n        -> 1.2246063538224e-16\nmysql> SELECT ROUND(SIN(PI()));\n        -> 0"], "Category": ["Mathematical Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_sqrt"], "Title": ["SQRT()"], "Feature": ["SQRT(X)"], "Description": ["Return the square root of the argument", "\nSQRT(X)\n", "\n            Returns the square root of a nonnegative number\n            X. If\n            X is NULL, the\n            function returns NULL.\n          ", "Press CTRL+C to copy mysql> SELECT SQRT(4);\n        -> 2\nmysql> SELECT SQRT(20);\n        -> 4.4721359549996\nmysql> SELECT SQRT(-16);\n        -> NULL"], "Examples": ["mysql> SELECT SQRT(4);\n        -> 2\nmysql> SELECT SQRT(20);\n        -> 4.4721359549996\nmysql> SELECT SQRT(-16);\n        -> NULL"], "Category": ["Mathematical Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_tan"], "Title": ["TAN()"], "Feature": ["TAN(X)"], "Description": ["Return the tangent of the argument", "\nTAN(X)\n", "\n            Returns the tangent of X, where\n            X is given in radians. Returns\n            NULL if X is\n            NULL.\n          ", "Press CTRL+C to copy mysql> SELECT TAN(PI());\n        -> -1.2246063538224e-16\nmysql> SELECT TAN(PI()+1);\n        -> 1.5574077246549"], "Examples": ["mysql> SELECT TAN(PI());\n        -> -1.2246063538224e-16\nmysql> SELECT TAN(PI()+1);\n        -> 1.5574077246549"], "Category": ["Mathematical Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_addtime"], "Title": ["ADDTIME()"], "Feature": ["ADDTIME(expr1,expr2)"], "Description": ["Add time", "\nADDTIME(expr1,expr2)\n", "\nADDTIME() adds\n          expr2 to\n          expr1 and returns the result.\n          expr1 is a time or datetime\n          expression, and expr2 is a time\n          expression. Returns NULL if\n          expr1or\n          expr2 is NULL.\n        ", "\n          The return type of this function and of the\n          SUBTIME() function is\n          determined as follows:\n", "\n\n              If the first argument is a dynamic parameter (such as in a\n              prepared statement), the return type is\n              TIME.\n            \n              Otherwise, the resolved type of the function is derived\n              from the resolved type of the first argument.\n\n", "Press CTRL+C to copy mysql> SELECT ADDTIME('2007-12-31 23:59:59.999999', '1 1:1:1.000002');\n        -> '2008-01-02 01:01:01.000001'\nmysql> SELECT ADDTIME('01:00:00.999999', '02:00:00.999998');\n        -> '03:00:01.999997'"], "Examples": ["mysql> SELECT ADDTIME('2007-12-31 23:59:59.999999', '1 1:1:1.000002');\n        -> '2008-01-02 01:01:01.000001'\nmysql> SELECT ADDTIME('01:00:00.999999', '02:00:00.999998');\n        -> '03:00:01.999997'"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_truncate"], "Title": ["TRUNCATE()"], "Feature": ["TRUNCATE(X,D)"], "Description": ["Truncate to specified number of decimal places", "\nTRUNCATE(X,D)\n", "\n            Returns the number X, truncated\n            to D decimal places. If\n            D is 0, the\n            result has no decimal point or fractional part.\n            D can be negative to cause\n            D digits left of the decimal\n            point of the value X to become\n            zero. If X or\n            D is NULL, the\n            function returns NULL.\n          ", "Press CTRL+C to copy mysql> SELECT TRUNCATE(1.223,1);\n        -> 1.2\nmysql> SELECT TRUNCATE(1.999,1);\n        -> 1.9\nmysql> SELECT TRUNCATE(1.999,0);\n        -> 1\nmysql> SELECT TRUNCATE(-1.999,1);\n        -> -1.9\nmysql> SELECT TRUNCATE(122,-2);\n       -> 100\nmysql> SELECT TRUNCATE(10.28*100,0);\n       -> 1028", "\n            All numbers are rounded toward zero.\n          ", "\n            The data type returned by TRUNCATE()\n            follows the same rules that determine the return type of the\n            ROUND() function; for details, see the\n            description for ROUND().\n"], "Examples": ["mysql> SELECT TRUNCATE(1.223,1);\n        -> 1.2\nmysql> SELECT TRUNCATE(1.999,1);\n        -> 1.9\nmysql> SELECT TRUNCATE(1.999,0);\n        -> 1\nmysql> SELECT TRUNCATE(-1.999,1);\n        -> -1.9\nmysql> SELECT TRUNCATE(122,-2);\n       -> 100\nmysql> SELECT TRUNCATE(10.28*100,0);\n       -> 1028"], "Category": ["Mathematical Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/miscellaneous-functions#any_value"], "Title": ["ANY_VALUE()"], "Feature": ["ANY_VALUE()"], "Description": ["ANY_VALUE()", "ANY_VALUE() \u51fd\u6570\u53ef\u4ee5\u4ece\u4e00\u7ec4\u503c\u4e2d\u8fd4\u56de\u5176\u4e2d\u4efb\u610f\u4e00\u4e2a\u503c\u3002\u901a\u5e38\uff0c\u8be5\u51fd\u6570\u7528\u4e8e\u9700\u8981\u5728 SELECT \u8bed\u53e5\u4e2d\u5305\u542b\u975e\u805a\u5408\u5217\u4ee5\u53ca GROUP BY \u5b50\u53e5\u7684\u573a\u666f\u4e2d\u3002", "CREATE TABLE fruits (id INT PRIMARY KEY, name VARCHAR(255));\nQuery OK, 0 rows affected (0.14 sec)\n\nINSERT INTO fruits VALUES (1,'apple'),(2,'apple'),(3,'pear'),(4,'banana'),(5, 'pineapple');\nQuery OK, 5 rows affected (0.01 sec)\nRecords: 5  Duplicates: 0  Warnings: 0\n\nSELECT id,name FROM fruits GROUP BY name;\nERROR 1055 (42000): Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'test.fruits.id' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by\n\nSELECT ANY_VALUE(id),GROUP_CONCAT(id),name FROM fruits GROUP BY name;\n+---------------+------------------+-----------+\n| ANY_VALUE(id) | GROUP_CONCAT(id) | name      |\n+---------------+------------------+-----------+\n|             1 | 1,2              | apple     |\n|             3 | 3                | pear      |\n|             4 | 4                | banana    |\n|             5 | 5                | pineapple |\n+---------------+------------------+-----------+\n4 rows in set (0.00 sec)\n"], "Examples": ["CREATE TABLE fruits (id INT PRIMARY KEY, name VARCHAR(255));\nQuery OK, 0 rows affected (0.14 sec)\n\nINSERT INTO fruits VALUES (1,'apple'),(2,'apple'),(3,'pear'),(4,'banana'),(5, 'pineapple');\nQuery OK, 5 rows affected (0.01 sec)\nRecords: 5  Duplicates: 0  Warnings: 0\n\nSELECT id,name FROM fruits GROUP BY name;\nERROR 1055 (42000): Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'test.fruits.id' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by\n\nSELECT ANY_VALUE(id),GROUP_CONCAT(id),name FROM fruits GROUP BY name;\n+---------------+------------------+-----------+\n| ANY_VALUE(id) | GROUP_CONCAT(id) | name      |\n+---------------+------------------+-----------+\n|             1 | 1,2              | apple     |\n|             3 | 3                | pear      |\n|             4 | 4                | banana    |\n|             5 | 5                | pineapple |\n+---------------+------------------+-----------+\n4 rows in set (0.00 sec)\n"], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/miscellaneous-functions#bin_to_uuid"], "Title": ["BIN_TO_UUID()"], "Feature": ["BIN_TO_UUID()"], "Description": ["BIN_TO_UUID()", "BIN_TO_UUID() \u548c UUID_TO_BIN() \u7528\u4e8e\u5728\u6587\u672c\u683c\u5f0f UUID \u548c\u4e8c\u8fdb\u5236\u683c\u5f0f UUID \u4e4b\u95f4\u8fdb\u884c\u8f6c\u6362\u3002\u8fd9\u4e24\u4e2a\u51fd\u6570\u90fd\u53ef\u4ee5\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\u3002", "\u7b2c\u4e00\u4e2a\u53c2\u6570\u7528\u4e8e\u6307\u5b9a\u8981\u8f6c\u6362\u7684\u503c\u3002\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff08\u53ef\u9009\uff09\u7528\u4e8e\u63a7\u5236\u4e8c\u8fdb\u5236\u683c\u5f0f\u4e2d\u5b57\u6bb5\u7684\u6392\u5e8f\u3002", "SET @a := UUID();\nQuery OK, 0 rows affected (0.00 sec)\n\nSELECT @a;\n+--------------------------------------+\n| @a                                   |\n+--------------------------------------+\n| 9a17b457-eb6d-11ee-bacf-5405db7aad56 |\n+--------------------------------------+\n1 row in set (0.00 sec)\n\nSELECT UUID_TO_BIN(@a);\n+------------------------------------+\n| UUID_TO_BIN(@a)                    |\n+------------------------------------+\n| 0x9A17B457EB6D11EEBACF5405DB7AAD56 |\n+------------------------------------+\n1 row in set (0.00 sec)\n\nSELECT BIN_TO_UUID(0x9A17B457EB6D11EEBACF5405DB7AAD56);\n+-------------------------------------------------+\n| BIN_TO_UUID(0x9A17B457EB6D11EEBACF5405DB7AAD56) |\n+-------------------------------------------------+\n| 9a17b457-eb6d-11ee-bacf-5405db7aad56            |\n+-------------------------------------------------+\n1 row in set (0.00 sec)\n\nSELECT UUID_TO_BIN(@a, 1);\n+----------------------------------------+\n| UUID_TO_BIN(@a, 1)                     |\n+----------------------------------------+\n| 0x11EEEB6D9A17B457BACF5405DB7AAD56     |\n+----------------------------------------+\n1 row in set (0.00 sec)\n\nSELECT BIN_TO_UUID(0x11EEEB6D9A17B457BACF5405DB7AAD56, 1);\n+----------------------------------------------------+\n| BIN_TO_UUID(0x11EEEB6D9A17B457BACF5405DB7AAD56, 1) |\n+----------------------------------------------------+\n| 9a17b457-eb6d-11ee-bacf-5405db7aad56               |\n+----------------------------------------------------+\n1 row in set (0.00 sec)\n", "\u53e6\u8bf7\u53c2\u9605 UUID() \u548c UUID \u6700\u4f73\u5b9e\u8df5\u3002"], "Examples": ["SET @a := UUID();\nQuery OK, 0 rows affected (0.00 sec)\n\nSELECT @a;\n+--------------------------------------+\n| @a                                   |\n+--------------------------------------+\n| 9a17b457-eb6d-11ee-bacf-5405db7aad56 |\n+--------------------------------------+\n1 row in set (0.00 sec)\n\nSELECT UUID_TO_BIN(@a);\n+------------------------------------+\n| UUID_TO_BIN(@a)                    |\n+------------------------------------+\n| 0x9A17B457EB6D11EEBACF5405DB7AAD56 |\n+------------------------------------+\n1 row in set (0.00 sec)\n\nSELECT BIN_TO_UUID(0x9A17B457EB6D11EEBACF5405DB7AAD56);\n+-------------------------------------------------+\n| BIN_TO_UUID(0x9A17B457EB6D11EEBACF5405DB7AAD56) |\n+-------------------------------------------------+\n| 9a17b457-eb6d-11ee-bacf-5405db7aad56            |\n+-------------------------------------------------+\n1 row in set (0.00 sec)\n\nSELECT UUID_TO_BIN(@a, 1);\n+----------------------------------------+\n| UUID_TO_BIN(@a, 1)                     |\n+----------------------------------------+\n| 0x11EEEB6D9A17B457BACF5405DB7AAD56     |\n+----------------------------------------+\n1 row in set (0.00 sec)\n\nSELECT BIN_TO_UUID(0x11EEEB6D9A17B457BACF5405DB7AAD56, 1);\n+----------------------------------------------------+\n| BIN_TO_UUID(0x11EEEB6D9A17B457BACF5405DB7AAD56, 1) |\n+----------------------------------------------------+\n| 9a17b457-eb6d-11ee-bacf-5405db7aad56               |\n+----------------------------------------------------+\n1 row in set (0.00 sec)\n"], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/miscellaneous-functions#default"], "Title": ["DEFAULT()"], "Feature": ["DEFAULT()"], "Description": ["DEFAULT()", "DEFAULT() \u51fd\u6570\u7528\u4e8e\u83b7\u53d6\u5217\u7684\u9ed8\u8ba4\u503c\u3002", "CREATE TABLE t1 (id INT PRIMARY KEY, c1 INT DEFAULT 5);\nQuery OK, 0 rows affected (0.15 sec)\n\nINSERT INTO t1 VALUES (1, 1);\nQuery OK, 1 row affected (0.01 sec)\n\nUPDATE t1 SET c1=DEFAULT(c1)+3;\nQuery OK, 1 row affected (0.02 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nTABLE t1;\n+----+------+\n| id | c1   |\n+----+------+\n|  1 |    8 |\n+----+------+\n1 row in set (0.00 sec)\n"], "Examples": ["CREATE TABLE t1 (id INT PRIMARY KEY, c1 INT DEFAULT 5);\nQuery OK, 0 rows affected (0.15 sec)\n\nINSERT INTO t1 VALUES (1, 1);\nQuery OK, 1 row affected (0.01 sec)\n\nUPDATE t1 SET c1=DEFAULT(c1)+3;\nQuery OK, 1 row affected (0.02 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nTABLE t1;\n+----+------+\n| id | c1   |\n+----+------+\n|  1 |    8 |\n+----+------+\n1 row in set (0.00 sec)\n"], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/miscellaneous-functions#grouping"], "Title": ["GROUPING()"], "Feature": ["GROUPING()"], "Description": ["GROUPING()", "\u53c2\u89c1 GROUP BY \u4fee\u9970\u7b26\u3002"], "Examples": [], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/miscellaneous-functions#inet_aton"], "Title": ["INET_ATON()"], "Feature": ["INET_ATON()"], "Description": ["INET_ATON()", "INET_ATON() \u51fd\u6570\u7528\u4e8e\u5c06\u70b9\u5206\u5341\u8fdb\u5236\u5f62\u5f0f\u8868\u793a\u7684 IPv4 \u5730\u5740\u8f6c\u6362\u4e3a\u53ef\u6709\u6548\u5b58\u50a8\u7684\u4e8c\u8fdb\u5236\u5f62\u5f0f\u3002", "SELECT INET_ATON('127.0.0.1');\n", "+------------------------+\n| INET_ATON('127.0.0.1') |\n+------------------------+\n|             2130706433 |\n+------------------------+\n1 row in set (0.00 sec)\n"], "Examples": ["SELECT INET_ATON('127.0.0.1');\n"], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/miscellaneous-functions#inet_ntoa"], "Title": ["INET_NTOA()"], "Feature": ["INET_NTOA()"], "Description": ["INET_NTOA()", "INET_NTOA() \u51fd\u6570\u7528\u4e8e\u5c06\u4e8c\u8fdb\u5236 IPv4 \u5730\u5740\u8f6c\u6362\u4e3a\u70b9\u5206\u5341\u8fdb\u5236\u8868\u793a\u5f62\u5f0f\u3002", "SELECT INET_NTOA(2130706433);\n", "+-----------------------+\n| INET_NTOA(2130706433) |\n+-----------------------+\n| 127.0.0.1             |\n+-----------------------+\n1 row in set (0.00 sec)\n"], "Examples": ["SELECT INET_NTOA(2130706433);\n"], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/miscellaneous-functions#inet6_aton"], "Title": ["INET6_ATON()"], "Feature": ["INET6_ATON()"], "Description": ["INET6_ATON()", "INET6_ATON() \u51fd\u6570\u7684\u529f\u80fd\u7c7b\u4f3c\u4e8e INET_ATON()\uff0c\u4f46 INET6_ATON() \u8fd8\u53ef\u4ee5\u5904\u7406 IPv6 \u5730\u5740\u3002", "SELECT INET6_ATON('::1');\n", "+--------------------------------------+\n| INET6_ATON('::1')                    |\n+--------------------------------------+\n| 0x00000000000000000000000000000001   |\n+--------------------------------------+\n1 row in set (0.00 sec)\n"], "Examples": ["SELECT INET6_ATON('::1');\n"], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/miscellaneous-functions#inet6_ntoa"], "Title": ["INET6_NTOA()"], "Feature": ["INET6_NTOA()"], "Description": ["INET6_NTOA()", "INET6_NTOA() \u51fd\u6570\u7684\u529f\u80fd\u7c7b\u4f3c\u4e8e INET_NTOA()\uff0c\u4f46 INET6_NTOA() \u8fd8\u53ef\u4ee5\u5904\u7406 IPv6 \u5730\u5740\u3002", "SELECT INET6_NTOA(0x00000000000000000000000000000001);\n", "+------------------------------------------------+\n| INET6_NTOA(0x00000000000000000000000000000001) |\n+------------------------------------------------+\n| ::1                                            |\n+------------------------------------------------+\n1 row in set (0.00 sec)\n"], "Examples": ["SELECT INET6_NTOA(0x00000000000000000000000000000001);\n"], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/miscellaneous-functions#is_ipv4"], "Title": ["IS_IPV4()"], "Feature": ["IS_IPV4()"], "Description": ["IS_IPV4()", "IS_IPV4() \u51fd\u6570\u7528\u4e8e\u5224\u65ad\u8f93\u5165\u7684\u53c2\u6570\u662f\u5426\u4e3a IPv4 \u5730\u5740\u3002", "SELECT IS_IPV4('127.0.0.1');\n", "+----------------------+\n| IS_IPV4('127.0.0.1') |\n+----------------------+\n|                    1 |\n+----------------------+\n1 row in set (0.00 sec)\n", "SELECT IS_IPV4('300.0.0.1');\n", "+----------------------+\n| IS_IPV4('300.0.0.1') |\n+----------------------+\n|                    0 |\n+----------------------+\n1 row in set (0.00 sec)\n"], "Examples": ["SELECT IS_IPV4('127.0.0.1');\n", "SELECT IS_IPV4('300.0.0.1');\n"], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_convert-tz"], "Title": ["CONVERT_TZ()"], "Feature": ["CONVERT_TZ(dt,from_tz,to_tz)"], "Description": ["Convert from one time zone to another", "\nCONVERT_TZ(dt,from_tz,to_tz)\n", "\nCONVERT_TZ() converts a\n          datetime value dt from the time\n          zone given by from_tz to the time\n          zone given by to_tz and returns the\n          resulting value. Time zones are specified as described in\n          Section\u00a07.1.15, \u201cMySQL Server Time Zone Support\u201d. This function returns\n          NULL if any of the arguments are invalid,\n          or if any of them are NULL.\n        ", "\n          On 32-bit platforms, the supported range of values for this\n          function is the same as for the\n          TIMESTAMP type (see\n          Section\u00a013.2.1, \u201cDate and Time Data Type Syntax\u201d, for range\n          information). On 64-bit platforms, the maximum supported value\n          is '3001-01-18 23:59:59.999999' UTC.\n        ", "\n          Regardless of platform or MySQL version, if the value falls\n          out of the supported range when converted from\n          from_tz to UTC, no conversion\n          occurs.\n        ", "Press CTRL+C to copy mysql> SELECT CONVERT_TZ('2004-01-01 12:00:00','GMT','MET');\n        -> '2004-01-01 13:00:00'\nmysql> SELECT CONVERT_TZ('2004-01-01 12:00:00','+00:00','+10:00');\n        -> '2004-01-01 22:00:00'", "\n\nNote\n\n\n            To use named time zones such as 'MET' or\n            'Europe/Amsterdam', the time zone tables\n            must be properly set up. For instructions, see\n            Section\u00a07.1.15, \u201cMySQL Server Time Zone Support\u201d.\n\n"], "Examples": ["mysql> SELECT CONVERT_TZ('2004-01-01 12:00:00','GMT','MET');\n        -> '2004-01-01 13:00:00'\nmysql> SELECT CONVERT_TZ('2004-01-01 12:00:00','+00:00','+10:00');\n        -> '2004-01-01 22:00:00'"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/miscellaneous-functions#is_ipv4_compat"], "Title": ["IS_IPV4_COMPAT()"], "Feature": ["IS_IPV4_COMPAT()"], "Description": ["IS_IPV4_COMPAT()", "IS_IPV4_COMPAT() \u51fd\u6570\u7528\u4e8e\u5224\u65ad\u8f93\u5165\u7684\u53c2\u6570\u662f\u5426\u4e3a\u517c\u5bb9 IPv4 \u7684\u5730\u5740\u3002", "SELECT IS_IPV4_COMPAT(INET6_ATON('::127.0.0.1'));\n", "+-------------------------------------------+\n| IS_IPV4_COMPAT(INET6_ATON('::127.0.0.1')) |\n+-------------------------------------------+\n|                                         1 |\n+-------------------------------------------+\n1 row in set (0.00 sec)\n"], "Examples": ["SELECT IS_IPV4_COMPAT(INET6_ATON('::127.0.0.1'));\n"], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/miscellaneous-functions#is_ipv4_mapped"], "Title": ["IS_IPV4_MAPPED()"], "Feature": ["IS_IPV4_MAPPED()"], "Description": ["IS_IPV4_MAPPED()", "IS_IPV4_MAPPED() \u51fd\u6570\u7528\u4e8e\u5224\u65ad\u8f93\u5165\u7684\u53c2\u6570\u662f\u5426\u4e3a IPv4 \u6620\u5c04\u7684\u5730\u5740\u3002", "SELECT IS_IPV4_MAPPED(INET6_ATON('::ffff:127.0.0.1'));\n", "+------------------------------------------------+\n| IS_IPV4_MAPPED(INET6_ATON('::ffff:127.0.0.1')) |\n+------------------------------------------------+\n|                                              1 |\n+------------------------------------------------+\n1 row in set (0.00 sec)\n"], "Examples": ["SELECT IS_IPV4_MAPPED(INET6_ATON('::ffff:127.0.0.1'));\n"], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/miscellaneous-functions#is_ipv6"], "Title": ["IS_IPV6()"], "Feature": ["IS_IPV6()"], "Description": ["IS_IPV6()", "IS_IPV6() \u51fd\u6570\u7528\u4e8e\u5224\u65ad\u8f93\u5165\u7684\u53c2\u6570\u662f\u5426\u4e3a IPv6 \u5730\u5740\u3002", "SELECT IS_IPV6('::1');\n", "+----------------+\n| IS_IPV6('::1') |\n+----------------+\n|              1 |\n+----------------+\n1 row in set (0.00 sec)\n"], "Examples": ["SELECT IS_IPV6('::1');\n"], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/miscellaneous-functions#is_uuid"], "Title": ["IS_UUID()"], "Feature": ["IS_UUID()"], "Description": ["IS_UUID()", "IS_UUID() \u51fd\u6570\u7528\u4e8e\u5224\u65ad\u8f93\u5165\u7684\u53c2\u6570\u662f\u5426\u4e3a UUID\u3002", "SELECT IS_UUID('eb48c08c-eb71-11ee-bacf-5405db7aad56');\n", "+-------------------------------------------------+\n| IS_UUID('eb48c08c-eb71-11ee-bacf-5405db7aad56') |\n+-------------------------------------------------+\n|                                               1 |\n+-------------------------------------------------+\n1 row in set (0.00 sec)\n"], "Examples": ["SELECT IS_UUID('eb48c08c-eb71-11ee-bacf-5405db7aad56');\n"], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/miscellaneous-functions#name_const"], "Title": ["NAME_CONST()"], "Feature": ["NAME_CONST()"], "Description": ["NAME_CONST()", "\u51fd\u6570 NAME_CONST() \u7528\u4e8e\u547d\u540d\u5217\u3002\u5efa\u8bae\u4f7f\u7528\u5217\u522b\u540d\u529f\u80fd\u4ee3\u66ff\u3002", "SELECT NAME_CONST('column name', 'value') UNION ALL SELECT 'another value';\n", "+---------------+\n| column name   |\n+---------------+\n| another value |\n| value         |\n+---------------+\n2 rows in set (0.00 sec)\n", "\u4e0a\u9762\u8fd9\u6761\u8bed\u53e5\u4f7f\u7528\u4e86 NAME_CONST()\uff0c\u4e0b\u9762\u8fd9\u6761\u8bed\u53e5\u4f7f\u7528\u4e86\u5217\u522b\u540d\u7684\u65b9\u5f0f\uff08\u63a8\u8350\uff09\u3002", "SELECT 'value' AS 'column name' UNION ALL SELECT 'another value';\n", "+---------------+\n| column name   |\n+---------------+\n| value         |\n| another value |\n+---------------+\n2 rows in set (0.00 sec)\n"], "Examples": ["SELECT NAME_CONST('column name', 'value') UNION ALL SELECT 'another value';\n", "SELECT 'value' AS 'column name' UNION ALL SELECT 'another value';\n"], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/miscellaneous-functions#sleep"], "Title": ["SLEEP()"], "Feature": ["SLEEP()"], "Description": ["SLEEP()", "SLEEP() \u51fd\u6570\u7528\u4e8e\u5c06\u67e5\u8be2\u6682\u505c\u6267\u884c\u51e0\u79d2\u3002", "SELECT SLEEP(1.5);\n", "+------------+\n| SLEEP(1.5) |\n+------------+\n|          0 |\n+------------+\n1 row in set (1.50 sec)\n"], "Examples": ["SELECT SLEEP(1.5);\n"], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/miscellaneous-functions#uuid"], "Title": ["UUID()"], "Feature": ["UUID()"], "Description": ["UUID()", "UUID() \u51fd\u6570\u7528\u4e8e\u8fd4\u56de\u901a\u7528\u552f\u4e00\u6807\u8bc6\u7b26 (UUID) version 1\u3002UUID \u7684\u5b9a\u4e49\u53ef\u53c2\u8003 RFC 4122\u3002", "SELECT UUID();\n", "+--------------------------------------+\n| UUID()                               |\n+--------------------------------------+\n| cb4d5ae6-eb6b-11ee-bacf-5405db7aad56 |\n+--------------------------------------+\n1 row in set (0.00 sec)\n", "\u53e6\u8bf7\u53c2\u9605 UUID \u6700\u4f73\u5b9e\u8df5\u3002"], "Examples": ["SELECT UUID();\n"], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/miscellaneous-functions#uuid_to_bin"], "Title": ["UUID_TO_BIN"], "Feature": ["UUID_TO_BIN"], "Description": ["UUID_TO_BIN", "\u53c2\u89c1 BIN_TO_UUID()\u3002"], "Examples": [], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/miscellaneous-functions#values"], "Title": ["VALUES()"], "Feature": ["VALUES()"], "Description": ["VALUES()", "VALUES(col_name) \u51fd\u6570\u7528\u4e8e\u5728 INSERT \u8bed\u53e5\u7684 ON DUPLICATE KEY UPDATE \u5b50\u53e5\u4e2d\u5f15\u7528\u7279\u5b9a\u5217\u7684\u503c\u3002", "CREATE TABLE t1 (id INT PRIMARY KEY, c1 INT);\nQuery OK, 0 rows affected (0.17 sec)\n\nINSERT INTO t1 VALUES (1,51),(2,52),(3,53),(4,54),(5,55);\nQuery OK, 5 rows affected (0.01 sec)\nRecords: 5  Duplicates: 0  Warnings: 0\n\nINSERT INTO t1 VALUES(2,22),(4,44) ON DUPLICATE KEY UPDATE c1=VALUES(id)+100;\nQuery OK, 4 rows affected (0.01 sec)\nRecords: 2  Duplicates: 2  Warnings: 0\n\nTABLE t1;\n+----+------+\n| id | c1   |\n+----+------+\n|  1 |   51 |\n|  2 |  102 |\n|  3 |   53 |\n|  4 |  104 |\n|  5 |   55 |\n+----+------+\n5 rows in set (0.00 sec)\n"], "Examples": ["CREATE TABLE t1 (id INT PRIMARY KEY, c1 INT);\nQuery OK, 0 rows affected (0.17 sec)\n\nINSERT INTO t1 VALUES (1,51),(2,52),(3,53),(4,54),(5,55);\nQuery OK, 5 rows affected (0.01 sec)\nRecords: 5  Duplicates: 0  Warnings: 0\n\nINSERT INTO t1 VALUES(2,22),(4,44) ON DUPLICATE KEY UPDATE c1=VALUES(id)+100;\nQuery OK, 4 rows affected (0.01 sec)\nRecords: 2  Duplicates: 2  Warnings: 0\n\nTABLE t1;\n+----+------+\n| id | c1   |\n+----+------+\n|  1 |   51 |\n|  2 |  102 |\n|  3 |   53 |\n|  4 |  104 |\n|  5 |   55 |\n+----+------+\n5 rows in set (0.00 sec)\n"], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/sequence-functions#nextval"], "Title": ["NEXTVAL()"], "Feature": ["NEXTVAL()"], "Description": ["NEXTVAL()", "NEXTVAL() \u51fd\u6570\u8fd4\u56de\u5e8f\u5217\u7684\u4e0b\u4e00\u4e2a\u503c\u3002"], "Examples": ["CREATE SEQUENCE s1;\n", "SELECT NEXTVAL(s1);\n"], "Category": ["Sequence Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_curdate"], "Title": ["CURDATE()"], "Feature": ["CURDATE()"], "Description": ["Return the current date", "\nCURDATE()\n", "\n          Returns the current date as a value in\n          'YYYY-MM-DD' or\n          YYYYMMDD format, depending on\n          whether the function is used in string or numeric context.\n        ", "Press CTRL+C to copy mysql> SELECT CURDATE();\n        -> '2008-06-13'\nmysql> SELECT CURDATE() + 0;\n        -> 20080613"], "Examples": ["mysql> SELECT CURDATE();\n        -> '2008-06-13'\nmysql> SELECT CURDATE() + 0;\n        -> 20080613"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/sequence-functions#next-value-for"], "Title": ["NEXT VALUE FOR"], "Feature": ["NEXT VALUE FOR"], "Description": ["NEXT VALUE FOR", "NEXT VALUE FOR \u51fd\u6570\u662f NEXTVAL() \u7684\u522b\u540d\u3002"], "Examples": ["SELECT NEXTVAL(s1);\n", "SELECT NEXT VALUE FOR s1;\n"], "Category": ["Sequence Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/sequence-functions#setval"], "Title": ["SETVAL()"], "Feature": ["SETVAL()"], "Description": ["SETVAL()", "SETVAL(n) \u51fd\u6570\u8bbe\u7f6e\u5e8f\u5217\u7684\u5f53\u524d\u503c\u3002"], "Examples": ["SELECT NEXTVAL(s1);\n", "SELECT SETVAL(s1, 10);\n", "SELECT NEXTVAL(s1);\n"], "Category": ["Sequence Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/sequence-functions#lastval"], "Title": ["LASTVAL()"], "Feature": ["LASTVAL()"], "Description": ["LASTVAL()", "LASTVAL() \u51fd\u6570\u8fd4\u56de\u5f53\u524d\u4f1a\u8bdd\u4e2d\u6700\u8fd1\u4e00\u6b21\u751f\u6210\u7684\u5e8f\u5217\u503c\u3002"], "Examples": ["SELECT LASTVAL(s1);\n"], "Category": ["Sequence Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#ascii"], "Title": ["ASCII()"], "Feature": ["ASCII()"], "Description": ["ASCII()", "ASCII() \u51fd\u6570\u7528\u4e8e\u83b7\u53d6\u8f93\u5165\u7684\u53c2\u6570\u4e2d\u6700\u5de6\u5b57\u7b26\u7684 ASCII \u503c\u3002\u8be5\u53c2\u6570\u53ef\u4ee5\u4e3a\u5b57\u7b26\u4e32\u6216\u6570\u5b57\u3002", "\u5982\u679c\u8f93\u5165\u53c2\u6570\u4e0d\u4e3a\u7a7a\uff0c\u8be5\u51fd\u6570\u8fd4\u56de\u53c2\u6570\u4e2d\u6700\u5de6\u5b57\u7b26\u7684 ASCII \u503c\u3002\u5982\u679c\u8f93\u5165\u53c2\u6570\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u8be5\u51fd\u6570\u8fd4\u56de 0\u3002\u5982\u679c\u8f93\u5165\u53c2\u6570\u4e3a NULL\uff0c\u8be5\u51fd\u6570\u8fd4\u56de NULL\u3002", ".css-1weqspv{padding-top:0.5rem;padding-bottom:0.5rem;}.css-1weqspv .MuiAlert-message p{margin-bottom:0px;margin-top:0px;}", "\u6ce8\u610fASCII() \u53ea\u80fd\u5904\u7406\u90a3\u4e9b\u7528 8 \u4e2a\u4e8c\u8fdb\u5236\u6570\u5b57\uff08\u5373\u5355\u4e2a\u5b57\u8282\uff09\u6765\u8868\u793a\u7684\u5b57\u7b26\u3002"], "Examples": ["SELECT ASCII('A'), ASCII('TiDB'), ASCII(23);\n"], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#bin"], "Title": ["BIN()"], "Feature": ["BIN()"], "Description": ["BIN()", "BIN() \u51fd\u6570\u7528\u4e8e\u5c06\u8f93\u5165\u7684\u53c2\u6570\u8f6c\u6362\u4e3a\u5176\u4e8c\u8fdb\u5236\u503c\u7684\u5b57\u7b26\u4e32\u8868\u793a\u5f62\u5f0f\u3002\u8be5\u53c2\u6570\u53ef\u4ee5\u4e3a\u5b57\u7b26\u4e32\u6216\u6570\u5b57\u3002", "\u5982\u679c\u8f93\u5165\u53c2\u6570\u4e3a\u6b63\u6570\uff0c\u8be5\u51fd\u6570\u8fd4\u56de\u8be5\u53c2\u6570\u7684\u4e8c\u8fdb\u5236\u503c\u7684\u5b57\u7b26\u4e32\u8868\u793a\u5f62\u5f0f\u3002\u5982\u679c\u8f93\u5165\u53c2\u6570\u4e3a\u8d1f\u6570\uff0c\u8be5\u51fd\u6570\u4f1a\u5c06\u8be5\u53c2\u6570\u7684\u7edd\u5bf9\u503c\u8f6c\u6362\u4e3a\u5176\u4e8c\u8fdb\u5236\u503c\uff0c\u7136\u540e\u5bf9\u4e8c\u8fdb\u5236\u503c\u7684\u6bcf\u4f4d\u53d6\u53cd\uff080 \u53d8\u4e3a 1\uff0c1 \u53d8\u4e3a 0\uff09\uff0c\u6700\u540e\u52a0\u4e0a 1\u3002\u5982\u679c\u8f93\u5165\u53c2\u6570\u4e3a\u5b57\u7b26\u4e32\uff0c\u4e14\u8be5\u5b57\u7b26\u4e32\u4e2d\u53ea\u5305\u542b\u6570\u5b57\uff0c\u8be5\u51fd\u6570\u5c06\u6309\u7167\u8be5\u6570\u5b57\u8fd4\u56de\u7ed3\u679c\u3002\u4f8b\u5982\uff0c\"123\" \u4e0e 123 \u7684\u8fd4\u56de\u7ed3\u679c\u76f8\u540c\u3002\u5982\u679c\u8f93\u5165\u53c2\u6570\u4e3a\u5b57\u7b26\u4e32\uff0c\u4e14\u8be5\u5b57\u7b26\u4e32\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e0d\u662f\u6570\u5b57\uff08\u5982 \"q123\"\uff09\uff0c\u8be5\u51fd\u6570\u8fd4\u56de 0\u3002\u5982\u679c\u8f93\u5165\u53c2\u6570\u4e3a\u5b57\u7b26\u4e32\uff0c\u4e14\u8be5\u5b57\u7b26\u4e32\u7531\u6570\u5b57\u548c\u975e\u6570\u5b57\u7ec4\u6210\uff0c\u8be5\u51fd\u6570\u5c06\u6309\u7167\u8be5\u53c2\u6570\u4e2d\u6700\u524d\u9762\u8fde\u7eed\u7684\u6570\u5b57\u8fd4\u56de\u7ed3\u679c\u3002\u4f8b\u5982\uff0c'123q123' \u4e0e 123 \u7684\u8fd4\u56de\u7ed3\u679c\u76f8\u540c\uff0c\u4f46 BIN('123q123') \u4f1a\u4ea7\u751f\u4e00\u4e2a Truncated incorrect INTEGER value: '123q123' \u7684\u8b66\u544a\u3002\u5982\u679c\u8f93\u5165\u53c2\u6570\u4e3a NULL\uff0c\u8be5\u51fd\u6570\u8fd4\u56de NULL\u3002"], "Examples": ["SELECT BIN(123), BIN('123q123');\n", "SELECT BIN(-7);\n"], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#bit_length"], "Title": ["BIT_LENGTH()"], "Feature": ["BIT_LENGTH()"], "Description": ["BIT_LENGTH()", "BIT_LENGTH() \u51fd\u6570\u7528\u4e8e\u8fd4\u56de\u8f93\u5165\u53c2\u6570\u7684\u957f\u5ea6\uff0c\u5355\u4f4d\u4e3a bit\u3002"], "Examples": ["SELECT BIT_LENGTH(\"TiDB\");\n\n+--------------------+\n| BIT_LENGTH(\"TiDB\") |\n+--------------------+\n|                 32 |\n+--------------------+\n", "SELECT BIT_LENGTH(\"PingCAP 123\");\n\n+---------------------------+\n| BIT_LENGTH(\"PingCAP 123\") |\n+---------------------------+\n|                        88 |\n+---------------------------+\n", "SELECT CustomerName, BIT_LENGTH(CustomerName) AS BitLengthOfName FROM Customers;\n\n+--------------------+-----------------+\n| CustomerName       | BitLengthOfName |\n+--------------------+-----------------+\n| Albert Einstein    |             120 |\n| Robert Oppenheimer |             144 |\n+--------------------+-----------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#char"], "Title": ["CHAR()"], "Feature": ["CHAR()"], "Description": ["CHAR()", "CHAR() \u51fd\u6570\u7528\u4e8e\u83b7\u53d6\u6307\u5b9a ASCII \u503c\u7684\u5bf9\u5e94\u5b57\u7b26\u3002\u8be5\u51fd\u6570\u6267\u884c\u7684\u64cd\u4f5c\u4e0e ASCII() \u76f8\u53cd\uff0cASCII() \u7528\u4e8e\u8fd4\u56de\u6307\u5b9a\u5b57\u7b26\u7684 ASCII \u503c\u3002\u5982\u679c\u63d0\u4f9b\u4e86\u591a\u4e2a\u53c2\u6570\uff0cCHAR() \u51fd\u6570\u5c06\u4f5c\u7528\u4e8e\u6240\u6709\u53c2\u6570\u5e76\u5c06\u5b83\u4eec\u7684\u7ed3\u679c\u62fc\u63a5\u5728\u4e00\u8d77\u8fd4\u56de\u3002"], "Examples": ["SELECT CHAR(65);\n\n+------------+\n|  CHAR(65)  |\n+------------+\n|          A |\n+------------+\n", "SELECT CHAR(84);\n\n+------------+\n|  CHAR(84)  |\n+------------+\n|          T |\n+------------+\n", "/*For extended ASCII: */\n\nSELECT CHAR(128);\n\n+------------+\n|  CHAR(128) |\n+------------+\n|       0x80 |\n+------------+\n", "/* For Unicode: */\n\n--skip-binary-as-hex\n\nSELECT CHAR(50089);\n\n+--------------+\n|  CHAR(50089) |\n+--------------+\n|            \u00e9 |\n+--------------+\n", "SELECT CHAR(65,66,67);\n"], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#char_length"], "Title": ["CHAR_LENGTH()"], "Feature": ["CHAR_LENGTH()"], "Description": ["CHAR_LENGTH()", "CHAR_LENGTH() \u51fd\u6570\u7528\u4e8e\u83b7\u53d6\u8f93\u5165\u53c2\u6570\u4e2d\u5b57\u7b26\u7684\u603b\u6570\u3002"], "Examples": ["SELECT CHAR_LENGTH(\"TiDB\") AS LengthOfString;\n\n+----------------+\n| LengthOfString |\n+----------------+\n|              4 |\n+----------------+\n", "SELECT CustomerName, CHAR_LENGTH(CustomerName) AS LengthOfName FROM Customers;\n\n+--------------------+--------------+\n| CustomerName       | LengthOfName |\n+--------------------+--------------+\n| Albert Einstein    |           15 |\n| Robert Oppenheimer |           18 |\n+--------------------+--------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#character_length"], "Title": ["CHARACTER_LENGTH()"], "Feature": ["CHARACTER_LENGTH()"], "Description": ["CHARACTER_LENGTH()", "CHARACTER_LENGTH() \u51fd\u6570\u4e0e CHAR_LENGTH() \u51fd\u6570\u529f\u80fd\u76f8\u540c\uff0c\u8fd4\u56de\u7ed3\u679c\u76f8\u540c\uff0c\u53ef\u4ee5\u4e92\u6362\u4f7f\u7528\u3002"], "Examples": [], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#concat"], "Title": ["CONCAT()"], "Feature": ["CONCAT()"], "Description": ["CONCAT()", "CONCAT() \u51fd\u6570\u7528\u4e8e\u5c06\u8f93\u5165\u7684\u53c2\u6570\u8fde\u63a5\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002", "\u8bed\u6cd5\uff1a", "CONCAT(str1,str2,...)\n", "str1, str2, ... \u4e3a\u8981\u8fde\u63a5\u7684\u53c2\u6570\u3002\u8be5\u53c2\u6570\u53ef\u4ee5\u662f\u5b57\u7b26\u4e32\u6216\u6570\u5b57\u3002"], "Examples": ["SELECT CONCAT('TiDB', ' ', 'Server', '-', 1, TRUE);\n", "SELECT CONCAT('TiDB', NULL, 'Server');\n", "SELECT 'Ti' 'DB' ' ' 'Server';\n"], "Category": ["String Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_current-date"], "Title": ["CURRENT_DATE(), CURRENT_DATE"], "Feature": ["CURRENT_DATE"], "Description": ["Synonyms for CURDATE()", "\nCURRENT_DATE,\n          CURRENT_DATE()\n", "\nCURRENT_DATE and\n          CURRENT_DATE() are synonyms for\n          CURDATE().\n        "], "Examples": [], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_count-distinct"], "Title": ["COUNT(DISTINCT)"], "Feature": ["COUNT(DISTINCT\n            expr,[expr...])"], "Description": ["Return the count of a number of different values", "\nCOUNT(DISTINCT\n            expr,[expr...])\n", "\n            Returns a count of the number of rows with different\n            non-NULL expr\n            values.\n          ", "\n            If there are no matching rows,\n            COUNT(DISTINCT) returns\n            0.\n          ", "Press CTRL+C to copy mysql> SELECT COUNT(DISTINCT results) FROM student;", "\n            In MySQL, you can obtain the number of distinct expression\n            combinations that do not contain NULL by\n            giving a list of expressions. In standard SQL, you would\n            have to do a concatenation of all expressions inside\n            COUNT(DISTINCT ...).\n          "], "Examples": ["mysql> SELECT COUNT(DISTINCT results) FROM student;"], "Category": ["Aggregate Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#concat_ws"], "Title": ["CONCAT_WS()"], "Feature": ["CONCAT_WS()"], "Description": ["CONCAT_WS()", "CONCAT_WS() \u51fd\u6570\u662f\u4e00\u79cd\u5e26\u5206\u9694\u7b26\u7684 CONCAT()\uff0c\u8fd4\u56de\u7531\u5206\u9694\u7b26\u8fde\u63a5\u7684\u5b57\u7b26\u4e32\u3002", "\u8bed\u6cd5\uff1a", "CONCAT_WS(separator,str1,str2,...)\n", "separator\uff1a\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u5206\u9694\u7b26\uff0c\u7528\u4e8e\u8fde\u63a5\u5176\u4f59\u7684\u4e0d\u4e3a NULL \u7684\u53c2\u6570\u3002str1, str2, ...\uff1a\u8981\u8fde\u63a5\u7684\u53c2\u6570\u3002\u8be5\u53c2\u6570\u53ef\u4ee5\u4e3a\u5b57\u7b26\u4e32\u6216\u6570\u5b57\u3002"], "Examples": ["SELECT CONCAT_WS(',', 'TiDB Server', 'TiKV', 'PD');\n"], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#elt"], "Title": ["ELT()"], "Feature": ["ELT()"], "Description": ["ELT()", "ELT() \u51fd\u6570\u8fd4\u56de\u7d22\u5f15\u53f7\u5bf9\u5e94\u7684\u5143\u7d20\u3002", "SELECT ELT(3, 'This', 'is', 'TiDB');\n", "+------------------------------+\n| ELT(3, 'This', 'is', 'TiDB') |\n+------------------------------+\n| TiDB                         |\n+------------------------------+\n1 row in set (0.00 sec)\n"], "Examples": ["SELECT ELT(3, 'This', 'is', 'TiDB');\n"], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#export_set"], "Title": ["EXPORT_SET()"], "Feature": ["EXPORT_SET()"], "Description": ["EXPORT_SET()", "EXPORT_SET() \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u7531\u6307\u5b9a\u6570\u91cf (number_of_bits) \u7684 on/off \u503c\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\uff0c\u5404\u4e2a\u503c\u4e4b\u95f4\u53ef\u4ee5\u7528 separator \u5206\u9694\uff08\u53ef\u9009\uff09\u3002\u8fd9\u4e9b\u503c\u5c06\u57fa\u4e8e\u8f93\u5165\u7684 bits \u53c2\u6570\u4e2d\u7684\u76f8\u5e94 bit \u662f\u5426\u4e3a 1 \u800c\u786e\u5b9a\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a\u503c\u5bf9\u5e94\u4e8e bits \u4e2d\u7684\u6700\u53f3\u8fb9\uff08\u5373\u6700\u4f4e\uff09\u7684 bit\u3002", "\u8bed\u6cd5\uff1a", "EXPORT_SET(bits, on, off, [separator[, number_of_bits]])\n", "bits\uff1a\u4e00\u4e2a\u4ee3\u8868 bits \u503c\u7684\u6574\u6570\u3002on\uff1a\u5982\u679c\u5bf9\u5e94\u7684 bit \u4e3a 1\uff0c\u5219\u8fd4\u56de\u8be5\u5b57\u7b26\u4e32\u3002off\uff1a\u5982\u679c\u5bf9\u5e94\u7684 bit \u4e3a 0\uff0c\u5219\u8fd4\u56de\u8be5\u5b57\u7b26\u4e32\u3002separator\uff08\u53ef\u9009\uff09\uff1a\u8f93\u51fa\u5b57\u7b26\u4e32\u4e2d\u7684\u5206\u9694\u7b26\u3002number_of_bits\uff08\u53ef\u9009\uff09\uff1a\u8981\u5904\u7406\u7684\u4f4d\u6570\u3002\u5982\u679c\u672a\u8bbe\u7f6e\uff0c\u5219\u9ed8\u8ba4\u4f7f\u7528 64\uff08\u6700\u5927\u4f4d\u6570\uff09\uff0c\u8fd9\u610f\u5473\u7740 bits \u5c06\u88ab\u89c6\u4e3a\u4e00\u4e2a\u65e0\u7b26\u53f7 64 \u4f4d\u6574\u6570\u3002"], "Examples": ["SELECT EXPORT_SET(b'101',\"ON\",'off','|',5);\n", "SELECT EXPORT_SET(b'00001111', 'x', '_', '', 8);\n", "SELECT EXPORT_SET(b'01010101', 'x', '_', '', 8);\n"], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#field"], "Title": ["FIELD()"], "Feature": ["FIELD()"], "Description": ["FIELD()", "\u8fd4\u56de\u53c2\u6570\u5728\u540e\u7eed\u53c2\u6570\u4e2d\u51fa\u73b0\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e"], "Examples": ["SELECT FIELD('needle', 'A', 'needle', 'in', 'a', 'haystack');\n+-------------------------------------------------------+\n| FIELD('needle', 'A', 'needle', 'in', 'a', 'haystack') |\n+-------------------------------------------------------+\n|                                                     2 |\n+-------------------------------------------------------+\n1 row in set (0.00 sec)\n"], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#find_in_set"], "Title": ["FIND_IN_SET()"], "Feature": ["FIND_IN_SET()"], "Description": ["FIND_IN_SET()", "\u8fd4\u56de\u7b2c\u4e00\u4e2a\u53c2\u6570\u5728\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e2d\u51fa\u73b0\u7684\u4f4d\u7f6e", "\u8be5\u51fd\u6570\u901a\u5e38\u4e0e SET \u6570\u636e\u7c7b\u578b\u4e00\u8d77\u4f7f\u7528\u3002"], "Examples": ["SELECT FIND_IN_SET('Go', 'COBOL,BASIC,Rust,Go,Java,Fortran');\n+-------------------------------------------------------+\n| FIND_IN_SET('Go', 'COBOL,BASIC,Rust,Go,Java,Fortran') |\n+-------------------------------------------------------+\n|                                                     4 |\n+-------------------------------------------------------+\n1 row in set (0.00 sec)\n"], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#format"], "Title": ["FORMAT()"], "Feature": ["FORMAT()"], "Description": ["FORMAT()", "FORMAT(X,D[,locale]) \u51fd\u6570\u7528\u4e8e\u5c06\u6570\u5b57 X \u683c\u5f0f\u5316\u4e3a\u7c7b\u4f3c\u4e8e \u201c#,###,###.##\u201d \u7684\u683c\u5f0f\uff0c\u56db\u820d\u4e94\u5165\u4fdd\u7559 D \u4f4d\u5c0f\u6570\uff0c\u5e76\u5c06\u7ed3\u679c\u4f5c\u4e3a\u5b57\u7b26\u4e32\u8fd4\u56de\u3002", "\u53c2\u6570\uff1a", "X\uff1a\u8981\u683c\u5f0f\u5316\u7684\u6570\u5b57\u3002\u53ef\u4ee5\u662f\u76f4\u63a5\u7684\u6570\u5b57\u503c\u3001\u6570\u5b57\u5b57\u7b26\u4e32\u3001\u6216\u79d1\u5b66\u8bb0\u6570\u6cd5\u683c\u5f0f\u7684\u6570\u5b57\u3002D\uff1a\u6307\u5b9a\u8fd4\u56de\u503c\u7684\u5c0f\u6570\u4f4d\u6570\u3002\u8be5\u51fd\u6570\u6839\u636e D \u5bf9 X \u8fdb\u884c\u56db\u820d\u4e94\u5165\u3002\u5982\u679c D \u5927\u4e8e X \u7684\u5b9e\u9645\u5c0f\u6570\u4f4d\u6570\uff0c\u5219\u4f1a\u5728\u7ed3\u679c\u4e2d\u586b\u5145\u76f8\u5e94\u957f\u5ea6\u7684\u96f6\u3002[locale]\uff1a\u6307\u5b9a\u4e00\u4e2a\u533a\u57df\u8bbe\u7f6e\uff0c\u7528\u4e8e\u7ed3\u679c\u4e2d\u6570\u5b57\u7684\u5c0f\u6570\u70b9\u3001\u5343\u4f4d\u5206\u9694\u7b26\u548c\u5206\u9694\u7b26\u4e4b\u95f4\u7684\u5206\u7ec4\u3002\u5408\u6cd5\u7684\u533a\u57df\u8bbe\u7f6e\u503c\u4e0e lc_time_names \u7cfb\u7edf\u53d8\u91cf\u7684\u5408\u6cd5\u503c\u76f8\u540c\u3002\u5982\u679c\u672a\u6307\u5b9a\u6216\u8005\u8bbe\u7f6e\u4e3a NULL\uff0c\u5219\u9ed8\u8ba4\u4f7f\u7528 'en_US' \u533a\u57df\u8bbe\u7f6e\u3002\u8be5\u53c2\u6570\u53ef\u9009\u3002", "\u884c\u4e3a\u7ec6\u8282\uff1a", "\u5982\u679c\u8f93\u5165\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u5b57\u7b26\u4e32\uff0c\u4e14\u8be5\u5b57\u7b26\u4e32\u4e2d\u53ea\u5305\u542b\u6570\u5b57\u65f6\uff0c\u8be5\u51fd\u6570\u5c06\u6309\u7167\u8be5\u6570\u5b57\u8fd4\u56de\u7ed3\u679c\u3002\u4f8b\u5982\uff0cFORMAT('12.36', 1) \u4e0e FORMAT(12.36, 1) \u7684\u8fd4\u56de\u7ed3\u679c\u76f8\u540c\u3002\u5982\u679c\u8f93\u5165\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u79d1\u5b66\u8ba1\u6570\u6cd5\uff08E/e\uff09\u8868\u793a\u7684\u6570\u5b57\u65f6\uff0c\u8be5\u51fd\u6570\u5c06\u6309\u7167\u8be5\u6570\u5b57\u8fd4\u56de\u7ed3\u679c\u3002\u4f8b\u5982\uff0cFORMAT('1E2', 3)\uff09\uff0c\u51fd\u6570\u8fd4\u56de 100.000\u3002\u5982\u679c\u8f93\u5165\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u975e\u6570\u5b57\u5f00\u5934\u7684\u5b57\u7b26\u4e32\u65f6\uff0c\u8be5\u51fd\u6570\u9664\u4e86\u8fd4\u56de\u96f6\u503c\u5916\uff0c\u8fd8\u8fd4\u56de\u4e00\u4e2a\u8b66\u544a (Code 1292)\u3002\u4f8b\u5982\uff0cFORMAT('q12.36', 5) \u51fd\u6570\u8fd4\u56de 0.00000\uff0c\u8fd8\u4f1a\u5305\u542b\u4e00\u4e2a\u8b66\u544a Warning (Code 1292): Truncated incorrect DOUBLE value: 'q12.36'\u3002\u5982\u679c\u8f93\u5165\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u6570\u5b57\u548c\u975e\u6570\u5b57\u6df7\u5408\u7684\u5b57\u7b26\u4e32\u65f6\uff0c\u8be5\u51fd\u6570\u5c06\u57fa\u4e8e\u8be5\u53c2\u6570\u4e2d\u5f00\u5934\u8fde\u7eed\u7684\u6570\u5b57\u90e8\u5206\u8fd4\u56de\u7ed3\u679c\uff0c\u8fd8\u8fd4\u56de\u4e00\u4e2a\u8b66\u544a (Code 1292)\u3002\u4f8b\u5982\uff0cFORMAT('12.36q56.78', 1) \u4e0e FORMAT('12.36', 1) \u7684\u8fd4\u56de\u7684\u6570\u5b57\u7ed3\u679c\u76f8\u540c\uff0c\u4f46 FORMAT('12.36q56.78', 1) \u8fd8\u4f1a\u5305\u542b\u4e00\u4e2a\u8b66\u544a Warning (Code 1292): Truncated incorrect DOUBLE value: '12.36q56.78'\u3002\u5982\u679c\u8f93\u5165\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\u96f6\u6216\u8d1f\u6570\uff0c\u8be5\u51fd\u6570\u5c06\u56db\u820d\u4e94\u5165\u5c0f\u6570\u90e8\u5206\u5e76\u8fd4\u56de\u6574\u6570\u3002\u5982\u679c\u8f93\u5165\u7684\u4efb\u610f\u53c2\u6570\u4e3a NULL\uff0c\u51fd\u6570\u5c06\u8fd4\u56de NULL\u3002"], "Examples": ["mysql> SELECT FORMAT(12.36, 1);\n+------------------+\n| FORMAT(12.36, 1) |\n+------------------+\n| 12.4             |\n+------------------+\n", "mysql> SELECT FORMAT(12.36, 5);\n+------------------+\n| FORMAT(12.36, 5) |\n+------------------+\n| 12.36000         |\n+------------------+\n", "mysql> SELECT FORMAT(1234.56, 1, 'en_US');\n+-----------------------------+\n| FORMAT(1234.56, 1, 'en_US') |\n+-----------------------------+\n| 1,234.6                     |\n+-----------------------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#from_base64"], "Title": ["FROM_BASE64()"], "Feature": ["FROM_BASE64()"], "Description": ["FROM_BASE64()", "FROM_BASE64(str) \u51fd\u6570\u7528\u4e8e\u5bf9 Base64 \u7f16\u7801\u7684\u5b57\u7b26\u4e32\u8fdb\u884c\u89e3\u7801\uff0c\u5e76\u5c06\u89e3\u7801\u7ed3\u679c\u4ee5\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u8fd4\u56de\u3002", "\u6b64\u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u5355\u4e00\u53c2\u6570\uff0c\u5373\u9700\u8981\u89e3\u7801\u7684 Base64 \u7f16\u7801\u5b57\u7b26\u4e32\u3002\u5982\u679c\u8f93\u5165\u53c2\u6570\u4e3a NULL \u6216\u65e0\u6548\u7684 Base64 \u7f16\u7801\u5b57\u7b26\u4e32\uff0cFROM_BASE64() \u51fd\u6570\u5c06\u8fd4\u56de NULL\u3002"], "Examples": ["mysql> SELECT TO_BASE64('Hello TiDB');\n+-------------------------+\n| TO_BASE64('Hello TiDB') |\n+-------------------------+\n| SGVsbG8gVGlEQg==        |\n+-------------------------+\n\nmysql> SELECT FROM_BASE64('SGVsbG8gVGlEQg==');\n+------------------------------------------------------------------+\n| FROM_BASE64('SGVsbG8gVGlEQg==')                                  |\n+------------------------------------------------------------------+\n| 0x48656C6C6F2054694442                                           |\n+------------------------------------------------------------------+\n", "mysql> SELECT CONVERT(FROM_BASE64('SGVsbG8gVGlEQg==') USING utf8mb4);\n+--------------------------------------------------------+\n| CONVERT(FROM_BASE64('SGVsbG8gVGlEQg==') USING utf8mb4) |\n+--------------------------------------------------------+\n| Hello TiDB                                             |\n+--------------------------------------------------------+\n", "mysql> SELECT FROM_BASE64('MTIzNDU2');\n+--------------------------------------------------+\n| FROM_BASE64('MTIzNDU2')                          |\n+--------------------------------------------------+\n| 0x313233343536                                   |\n+--------------------------------------------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#hex"], "Title": ["HEX()"], "Feature": ["HEX()"], "Description": ["HEX()", "HEX() \u51fd\u6570\u7528\u4e8e\u5c06\u8f93\u5165\u7684\u53c2\u6570\u8f6c\u6362\u4e3a\u5176\u5341\u516d\u8fdb\u5236\u503c\u7684\u5b57\u7b26\u4e32\u8868\u793a\u5f62\u5f0f\u3002\u8be5\u53c2\u6570\u53ef\u4ee5\u4e3a\u5b57\u7b26\u4e32\u6216\u6570\u5b57\u3002", "\u5982\u679c\u8f93\u5165\u53c2\u6570\u4e3a\u5b57\u7b26\u4e32\uff0cHEX(str) \u8fd4\u56de str \u7684\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\u8868\u793a\u3002\u8be5\u51fd\u6570\u5c06 str \u4e2d\u6bcf\u4e2a\u5b57\u7b26\u7684\u6bcf\u4e2a\u5b57\u8282\u8f6c\u6362\u4e3a\u4e24\u4e2a\u5341\u516d\u8fdb\u5236\u6570\u5b57\u3002\u4f8b\u5982\uff0c\u5728 UTF-8 \u6216 ASCII \u5b57\u7b26\u96c6\u4e2d\uff0c\u5b57\u7b26 a \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a 00111101\uff0c\u5341\u516d\u8fdb\u5236\u8868\u793a\u4e3a 61\u3002\u5982\u679c\u8f93\u5165\u53c2\u6570\u4e3a\u6570\u5b57\uff0cHEX(n) \u8fd4\u56de n \u7684\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\u8868\u793a\u3002\u8be5\u51fd\u6570\u5c06\u53c2\u6570 n \u89c6\u4e3a BIGINT \u6570\u5b57\uff0c\u76f8\u5f53\u4e8e CONV(n, 10, 16)\u3002\u5982\u679c\u8f93\u5165\u53c2\u6570\u4e3a NULL\uff0c\u8be5\u51fd\u6570\u8fd4\u56de NULL\u3002"], "Examples": ["SELECT X'616263', HEX('abc'), UNHEX(HEX('abc')), 0x616263;\n+-----------+------------+-------------------+----------+\n| X'616263' | HEX('abc') | UNHEX(HEX('abc')) | 0x616263 |\n+-----------+------------+-------------------+----------+\n| abc       | 616263     | abc               | abc      |\n+-----------+------------+-------------------+----------+\n", "SELECT X'F09F8DA3', HEX('\ud83c\udf63'), UNHEX(HEX('\ud83c\udf63')), 0xF09F8DA3;\n+-------------+-------------+--------------------+------------+\n| X'F09F8DA3' | HEX('\ud83c\udf63')     | UNHEX(HEX('\ud83c\udf63'))     | 0xF09F8DA3 |\n+-------------+-------------+--------------------+------------+\n| \ud83c\udf63            | F09F8DA3    | \ud83c\udf63                   | \ud83c\udf63           |\n+-------------+-------------+--------------------+------------+\n", "SELECT HEX(255), CONV(HEX(255), 16, 10);\n+----------+------------------------+\n| HEX(255) | CONV(HEX(255), 16, 10) |\n+----------+------------------------+\n| FF       | 255                    |\n+----------+------------------------+\n", "SELECT HEX(NULL);\n+-----------+\n| HEX(NULL) |\n+-----------+\n| NULL      |\n+-----------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#insert"], "Title": ["INSERT()"], "Feature": ["INSERT()"], "Description": ["INSERT()", "INSERT(str, pos, len, newstr) \u51fd\u6570\u7528\u4e8e\u5c06\u5b57\u7b26\u4e32 str \u4e2d\u7684\u4e00\u4e2a\u5b50\u5b57\u7b26\u4e32\uff08\u4ece\u4f4d\u7f6e pos \u5f00\u59cb\uff0c\u957f\u5ea6\u4e3a len\uff09\u66ff\u6362\u4e3a\u5b57\u7b26\u4e32 newstr\u3002\u8be5\u51fd\u6570\u662f\u591a\u5b57\u8282\u5b89\u5168\u7684\u3002", "\u5982\u679c pos \u8d85\u8fc7\u4e86 str \u7684\u957f\u5ea6\uff0c\u51fd\u6570\u8fd4\u56de\u539f\u59cb\u5b57\u7b26\u4e32 str \u800c\u4e0d\u505a\u4fee\u6539\u3002\u5982\u679c len \u8d85\u8fc7\u4e86\u4ece\u4f4d\u7f6e pos \u5f00\u59cb\u7684 str \u7684\u5269\u4f59\u957f\u5ea6\uff0c\u51fd\u6570\u5c06\u4ece\u4f4d\u7f6e pos \u5f00\u59cb\u66ff\u6362\u5b57\u7b26\u4e32\u7684\u5176\u4f59\u90e8\u5206\u3002\u5982\u679c\u4efb\u4e00\u53c2\u6570\u4e3a NULL\uff0c\u8be5\u51fd\u6570\u8fd4\u56de NULL\u3002"], "Examples": ["SELECT INSERT('He likes tennis', 4, 5, 'plays');\n+------------------------------------------+\n| INSERT('He likes tennis', 4, 5, 'plays') |\n+------------------------------------------+\n| He plays tennis                          |\n+------------------------------------------+\n", "SELECT INSERT('He likes tennis', -1, 5, 'plays');\n+-------------------------------------------+\n| INSERT('He likes tennis', -1, 5, 'plays') |\n+-------------------------------------------+\n| He likes tennis                           |\n+-------------------------------------------+\n", "SELECT INSERT('He likes tennis', 4, 100, 'plays');\n+--------------------------------------------+\n| INSERT('He likes tennis', 4, 100, 'plays') |\n+--------------------------------------------+\n| He plays                                   |\n+--------------------------------------------+\n", "SELECT INSERT('He likes tennis', 10, 100, '\ud83c\udf63');\n+-------------------------------------------+\n| INSERT('He likes tennis', 10, 100, '\ud83c\udf63')     |\n+-------------------------------------------+\n| He likes \ud83c\udf63                                 |\n+-------------------------------------------+\n", "SELECT INSERT('PingCAP \u6570\u636e\u5e93', 1, 7, 'TiDB');\n+-------------------------------------------+\n| INSERT('PingCAP \u6570\u636e\u5e93', 1, 7, 'TiDB')    |\n+-------------------------------------------+\n| TiDB \u6570\u636e\u5e93                               |\n+-------------------------------------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#instr"], "Title": ["INSTR()"], "Feature": ["INSTR()"], "Description": ["INSTR()", "INSTR(str, substr) \u51fd\u6570\u7528\u4e8e\u83b7\u53d6\u5b50\u5b57\u7b26\u4e32 substr \u5728\u5b57\u7b26\u4e32 str \u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002substr \u548c str \u5747\u53ef\u4ee5\u4e3a\u5b57\u7b26\u4e32\u6216\u6570\u5b57\u3002\u8be5\u51fd\u6570\u4e0e LOCATE(substr, str) \u51fd\u6570\u7684\u4e24\u53c2\u6570\u7248\u672c\u529f\u80fd\u76f8\u540c\uff0c\u4f46\u53c2\u6570\u987a\u5e8f\u76f8\u53cd\u3002", "\u6ce8\u610fINSTR(str, substr) \u51fd\u6570\u662f\u5426\u533a\u5206\u5927\u5c0f\u53d6\u51b3\u4e8e TiDB \u6240\u4f7f\u7528\u7684\u6392\u5e8f\u89c4\u5219\u3002\u4e8c\u8fdb\u5236\u6392\u5e8f\u89c4\u5219\uff08\u4ee5 _bin \u4e3a\u540e\u7f00\uff09\u533a\u5206\u5927\u5c0f\u5199\uff0c\u800c\u901a\u7528\u6392\u5e8f\u89c4\u5219\uff08\u4ee5 _general_ci \u6216 _ai_ci \u4e3a\u540e\u7f00\uff09\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u3002", "\u5982\u679c\u4efb\u4e00\u8f93\u5165\u53c2\u6570\u4e3a\u6570\u5b57\uff0c\u8be5\u51fd\u6570\u5c06\u6570\u5b57\u89c6\u4e3a\u5b57\u7b26\u4e32\u5904\u7406\u3002\u5982\u679c substr \u4e0d\u5728 str \u4e2d\uff0c\u51fd\u6570\u8fd4\u56de 0\u3002\u5426\u5219\uff0c\u8fd4\u56de substr \u5728 str \u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002\u5982\u679c\u4efb\u4e00\u53c2\u6570\u4e3a NULL\uff0c\u8be5\u51fd\u6570\u8fd4\u56de NULL\u3002"], "Examples": ["SELECT INSTR(\"pingcap.com\", \"tidb\");\n+------------------------------+\n| INSTR(\"pingcap.com\", \"tidb\") |\n+------------------------------+\n|                            0 |\n+------------------------------+\n", "SELECT INSTR(\"pingcap.com/tidb\", \"tidb\");\n+-----------------------------------+\n| INSTR(\"pingcap.com/tidb\", \"tidb\") |\n+-----------------------------------+\n|                                13 |\n+-----------------------------------+\n", "SELECT INSTR(\"pingcap.com/tidb\" COLLATE utf8mb4_bin, \"TiDB\");\n+-------------------------------------------------------+\n| INSTR(\"pingcap.com/tidb\" COLLATE utf8mb4_bin, \"TiDB\") |\n+-------------------------------------------------------+\n|                                                     0 |\n+-------------------------------------------------------+\n", "SELECT INSTR(\"pingcap.com/tidb\" COLLATE utf8mb4_general_ci, \"TiDB\");\n+--------------------------------------------------------------+\n| INSTR(\"pingcap.com/tidb\" COLLATE utf8mb4_general_ci, \"TiDB\") |\n+--------------------------------------------------------------+\n|                                                           13 |\n+--------------------------------------------------------------+\n", "SELECT INSTR(0123, \"12\");\n+-------------------+\n| INSTR(0123, \"12\") |\n+-------------------+\n|                 1 |\n+-------------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_current-time"], "Title": ["CURRENT_TIME(), CURRENT_TIME"], "Feature": ["CURRENT_TIME"], "Description": ["Synonyms for CURTIME()", "\nCURRENT_TIME,\n          CURRENT_TIME([fsp])\n", "\nCURRENT_TIME and\n          CURRENT_TIME() are synonyms for\n          CURTIME().\n        "], "Examples": [], "Category": ["Date and Time Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#lcase"], "Title": ["LCASE()"], "Feature": ["LCASE()"], "Description": ["LCASE()", "LCASE(str)\u51fd\u6570\u4e0e LOWER(str) \u51fd\u6570\u529f\u80fd\u76f8\u540c\uff0c\u90fd\u662f\u8fd4\u56de\u8f93\u5165\u53c2\u6570\u7684\u5c0f\u5199\u5f62\u5f0f\u3002"], "Examples": [], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#left"], "Title": ["LEFT()"], "Feature": ["LEFT()"], "Description": ["LEFT()", "LEFT() \u51fd\u6570\u7528\u4e8e\u8fd4\u56de\u5b57\u7b26\u4e32\u5de6\u4fa7\u6307\u5b9a\u6570\u91cf\u7684\u5b57\u7b26\u3002", "\u8bed\u6cd5\uff1a", "LEFT(`str`, `len`)\n", "str\uff1a\u8981\u63d0\u53d6\u5b57\u7b26\u7684\u539f\u59cb\u5b57\u7b26\u4e32\u3002\u5982\u679c str \u5305\u542b\u4e00\u4e2a\u591a\u5b57\u8282\u5b57\u7b26\uff0c\u8be5\u51fd\u6570\u5c06\u5176\u89c6\u4e3a\u4e00\u4e2a\u5b57\u7b26\u3002len\uff1a\u8981\u8fd4\u56de\u7684\u5b57\u7b26\u957f\u5ea6\u3002\u5982\u679c len \u5c0f\u4e8e\u6216\u7b49\u4e8e 0\uff0c\u8be5\u51fd\u6570\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\u3002\u5982\u679c len \u5927\u4e8e\u6216\u7b49\u4e8e str \u7684\u957f\u5ea6\uff0c\u8be5\u51fd\u6570\u5c06\u8fd4\u56de\u539f\u59cb\u7684 str\u3002\u5982\u679c\u4efb\u4f55\u53c2\u6570\u4e3a NULL\uff0c\u8be5\u51fd\u6570\u8fd4\u56de NULL\u3002"], "Examples": ["SELECT LEFT('ABCED', 3);\n+------------------+\n| LEFT('ABCED', 3) |\n+------------------+\n| ABC              |\n+------------------+\n\nSELECT LEFT('ABCED', 6);\n+------------------+\n| LEFT('ABCED', 6) |\n+------------------+\n| ABCED            |\n+------------------+\n", "SELECT LEFT('ABCED', 0);\n+------------------+\n| LEFT('ABCED', 0) |\n+------------------+\n|                  |\n+------------------+\n\nSELECT LEFT('ABCED', -1);\n+-------------------+\n| LEFT('ABCED', -1) |\n+-------------------+\n|                   |\n+-------------------+\n", "SELECT LEFT('\ud83c\udf63ABC', 3);\n+--------------------+\n| LEFT('\ud83c\udf63ABC', 3)     |\n+--------------------+\n| \ud83c\udf63AB                 |\n+--------------------+\n", "SELECT LEFT('ABC', NULL);\n+-------------------+\n| LEFT('ABC', NULL) |\n+-------------------+\n| NULL              |\n+-------------------+\n\nSELECT LEFT(NULL, 3);\n+------------------------------+\n| LEFT(NULL, 3)                |\n+------------------------------+\n| NULL                         |\n+------------------------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#length"], "Title": ["LENGTH()"], "Feature": ["LENGTH()"], "Description": ["LENGTH()", "LENGTH() \u51fd\u6570\u7528\u4e8e\u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u5b57\u8282\u957f\u5ea6\u3002LENGTH() \u5c06\u5355\u4e2a\u591a\u5b57\u8282\u5b57\u7b26\u89c6\u4e3a\u591a\u4e2a\u5b57\u8282\uff0c\u800c CHAR_LENGTH() \u5c06\u5355\u4e2a\u591a\u5b57\u8282\u5b57\u7b26\u89c6\u4e3a\u5355\u4e2a\u5b57\u7b26\u3002", "\u5982\u679c\u8f93\u5165\u53c2\u6570\u4e3a NULL\uff0c\u8be5\u51fd\u6570\u5c06\u8fd4\u56de NULL\u3002"], "Examples": ["SELECT LENGTH('ABC');\n+---------------+\n| LENGTH('ABC') |\n+---------------+\n|             3 |\n+---------------+\n\nSELECT LENGTH('\ud83c\udf63ABC');\n+-------------------+\n| LENGTH('\ud83c\udf63ABC')     |\n+-------------------+\n|                 7 |\n+-------------------+\n\nSELECT CHAR_LENGTH('\ud83c\udf63ABC');\n+------------------------+\n| CHAR_LENGTH('\ud83c\udf63ABC')     |\n+------------------------+\n|                      4 |\n+------------------------+\n", "SELECT LENGTH(NULL);\n+--------------+\n| LENGTH(NULL) |\n+--------------+\n|         NULL |\n+--------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#like"], "Title": ["LIKE"], "Feature": ["LIKE"], "Description": ["LIKE", "LIKE \u7528\u4e8e\u8fdb\u884c\u7b80\u5355\u5b57\u7b26\u4e32\u5339\u914d\u3002\u8868\u8fbe\u5f0f expr LIKE pat [ESCAPE 'escape_char'] \u8fd4\u56de 1 (TRUE) \u6216 0 (FALSE)\u3002\u5982\u679c expr \u6216 pat \u4e2d\u4efb\u4e00\u4e2a\u4e3a NULL\uff0c\u7ed3\u679c\u4e3a NULL\u3002", "\u4f60\u53ef\u4ee5\u5728 LIKE \u4e2d\u4f7f\u7528\u4ee5\u4e0b\u4e24\u4e2a\u901a\u914d\u7b26\uff1a", "% \u5339\u914d\u4efb\u610f\u6570\u91cf\u7684\u5b57\u7b26\uff0c\u5305\u62ec\u96f6\u4e2a\u5b57\u7b26\u3002_ \u7cbe\u786e\u5339\u914d\u4e00\u4e2a\u5b57\u7b26\u3002"], "Examples": ["SET collation_connection='utf8mb4_bin';\nSHOW VARIABLES LIKE 'collation_connection';\n+----------------------+-------------+\n| Variable_name        | Value       |\n+----------------------+-------------+\n| collation_connection | utf8mb4_bin |\n+----------------------+-------------+\n", "SELECT NULL LIKE '%' as result;\n+--------+\n| result |\n+--------+\n|   NULL |\n+--------+\n", "SELECT 'sushi!!!' LIKE 'sushi_' AS result;\n+--------+\n| result |\n+--------+\n|      0 |\n+--------+\n", "SELECT '\ud83c\udf63\ud83c\udf7asushi\ud83c\udf63\ud83c\udf7a' LIKE '%sushi%' AS result;\n+--------+\n| result |\n+--------+\n|      1 |\n+--------+\n", "SELECT '\ud83c\udf63\ud83c\udf7asushi\ud83c\udf63\ud83c\udf7a' LIKE '%SUSHI%' AS result;\n+--------+\n| result |\n+--------+\n|      0 |\n+--------+\n", "SELECT '\ud83c\udf63\ud83c\udf7asushi\ud83c\udf63\ud83c\udf7a' LIKE '%\ud83c\udf63%' AS result;\n+--------+\n| result |\n+--------+\n|      1 |\n+--------+\n", "SELECT 'sushi!!!' LIKE 'sushi\\_' AS result;\n+--------+\n| result |\n+--------+\n|      0 |\n+--------+\n", "SELECT 'sushi_' LIKE 'sushi\\_' AS result;\n+--------+\n| result |\n+--------+\n|      1 |\n+--------+\n", "SELECT 'sushi_' LIKE 'sushi*_' ESCAPE '*' AS result;\n+--------+\n| result |\n+--------+\n|      1 |\n+--------+\n", "SELECT 'sushi!' LIKE 'sushi*_' ESCAPE '*' AS result;\n+--------+\n| result |\n+--------+\n|      0 |\n+--------+\n", "SELECT 10 LIKE '1%' AS result;\n+--------+\n| result |\n+--------+\n|      1 |\n+--------+\n", "SELECT 10000 LIKE '12%' AS result;\n+--------+\n| result |\n+--------+\n|      0 |\n+--------+\n", "SELECT '\ud83c\udf63\ud83c\udf7aSushi\ud83c\udf63\ud83c\udf7a' COLLATE utf8mb4_unicode_ci LIKE '%SUSHI%' AS result;\n+--------+\n| result |\n+--------+\n|      1 |\n+--------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#locate"], "Title": ["LOCATE()"], "Feature": ["LOCATE()"], "Description": ["LOCATE()", "LOCATE(substr, str[, pos]) \u51fd\u6570\u7528\u4e8e\u8fd4\u56de\u5b50\u5b57\u7b26\u4e32 substr \u5728\u5b57\u7b26\u4e32 str \u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002pos \u53c2\u6570\u662f\u53ef\u9009\u7684\uff0c\u7528\u4e8e\u6307\u5b9a\u67e5\u627e\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002", "\u5982\u679c\u5b50\u5b57\u7b26\u4e32 substr \u4e0d\u5728\u5b57\u7b26\u4e32 str \u4e2d\uff0c\u8be5\u51fd\u6570\u8fd4\u56de 0\u3002\u5982\u679c\u4efb\u4e00\u53c2\u6570\u4e3a NULL\uff0c\u8be5\u51fd\u6570\u8fd4\u56de NULL\u3002\u8be5\u51fd\u6570\u662f\u591a\u5b57\u8282\u5b89\u5168\u7684\uff0c\u5e76\u4e14\u53ea\u6709\u5f53\u81f3\u5c11\u4e00\u4e2a\u53c2\u6570\u662f\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\u65f6\uff0c\u624d\u6267\u884c\u533a\u5206\u5927\u5c0f\u5199\u7684\u67e5\u627e\u3002"], "Examples": ["SET collation_connection='utf8mb4_bin';\nSHOW VARIABLES LIKE 'collation_connection';\n+----------------------+-------------+\n| Variable_name        | Value       |\n+----------------------+-------------+\n| collation_connection | utf8mb4_bin |\n+----------------------+-------------+\n", "SELECT LOCATE('bar', 'foobarbar');\n+----------------------------+\n| LOCATE('bar', 'foobarbar') |\n+----------------------------+\n|                          4 |\n+----------------------------+\n", "SELECT LOCATE('baz', 'foobarbar');\n+----------------------------+\n| LOCATE('baz', 'foobarbar') |\n+----------------------------+\n|                          0 |\n+----------------------------+\n", "SELECT LOCATE('bar', 'fooBARBAR');\n+----------------------------+\n| LOCATE('bar', 'fooBARBAR') |\n+----------------------------+\n|                          0 |\n+----------------------------+\n", "SELECT LOCATE('bar', 'foobarBAR', 100);\n+---------------------------------+\n| LOCATE('bar', 'foobarBAR', 100) |\n+---------------------------------+\n|                               0 |\n+---------------------------------+\n", "SELECT LOCATE('bar', 'foobarbar', 5);\n+-------------------------------+\n| LOCATE('bar', 'foobarbar', 5) |\n+-------------------------------+\n|                             7 |\n+-------------------------------+\n", "SELECT LOCATE('bar', NULL);\n+---------------------+\n| LOCATE('bar', NULL) |\n+---------------------+\n|                NULL |\n+---------------------+\n", "SELECT LOCATE('DB', 'TiDB tidb \u6570\u636e\u5e93');\n+-------------------------------------+\n| LOCATE('DB', 'TiDB tidb \u6570\u636e\u5e93')    |\n+-------------------------------------+\n|                                   3 |\n+-------------------------------------+\n", "SELECT LOCATE('DB', 'TiDB tidb \u6570\u636e\u5e93', 4);\n+----------------------------------------+\n| LOCATE('DB', 'TiDB tidb \u6570\u636e\u5e93', 4)    |\n+----------------------------------------+\n|                                      0 |\n+----------------------------------------+\n", "SET collation_connection='utf8mb4_unicode_ci';\nSHOW VARIABLES LIKE 'collation_connection';\n+----------------------+--------------------+\n| Variable_name        | Value              |\n+----------------------+--------------------+\n| collation_connection | utf8mb4_unicode_ci |\n+----------------------+--------------------+\n", "SELECT LOCATE('DB', 'TiDB tidb \u6570\u636e\u5e93', 4);\n+----------------------------------------+\n| LOCATE('DB', 'TiDB tidb \u6570\u636e\u5e93', 4)    |\n+----------------------------------------+\n|                                      8 |\n+----------------------------------------+\n", "SELECT LOCATE('\ud83c\udf7a', '\ud83c\udf63\ud83c\udf63\ud83c\udf63\ud83c\udf7a\ud83c\udf7a');\n+----------------------------------------+\n| LOCATE('\ud83c\udf7a', '\ud83c\udf63\ud83c\udf63\ud83c\udf63\ud83c\udf7a\ud83c\udf7a')            |\n+----------------------------------------+\n|                                      1 |\n+----------------------------------------+\n", "SET collation_connection='utf8mb4_bin';\nSHOW VARIABLES LIKE 'collation_connection';\n+----------------------+-------------+\n| Variable_name        | Value       |\n+----------------------+-------------+\n| collation_connection | utf8mb4_bin |\n+----------------------+-------------+\n", "SELECT LOCATE('\ud83c\udf7a', '\ud83c\udf63\ud83c\udf63\ud83c\udf63\ud83c\udf7a\ud83c\udf7a');\n+----------------------------------------+\n| LOCATE('\ud83c\udf7a', '\ud83c\udf63\ud83c\udf63\ud83c\udf63\ud83c\udf7a\ud83c\udf7a')                         |\n+----------------------------------------+\n|                                      4 |\n+----------------------------------------+\n", "SELECT LOCATE('b', _binary'aBcde');\n+-----------------------------+\n| LOCATE('b', _binary'aBcde') |\n+-----------------------------+\n|                           0 |\n+-----------------------------+\n", "SELECT LOCATE('B', _binary'aBcde');\n+-----------------------------+\n| LOCATE('B', _binary'aBcde') |\n+-----------------------------+\n|                           2 |\n+-----------------------------+\n", "SELECT LOCATE(_binary'b', 'aBcde');\n+-----------------------------+\n| LOCATE(_binary'b', 'aBcde') |\n+-----------------------------+\n|                           0 |\n+-----------------------------+\n", "SELECT LOCATE(_binary'B', 'aBcde');\n+-----------------------------+\n| LOCATE(_binary'B', 'aBcde') |\n+-----------------------------+\n|                           2 |\n+-----------------------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#lower"], "Title": ["LOWER()"], "Feature": ["LOWER()"], "Description": ["LOWER()", "LOWER(str) \u51fd\u6570\u7528\u4e8e\u5c06\u8f93\u5165\u7684\u53c2\u6570 str \u4e2d\u7684\u6240\u6709\u5b57\u7b26\u8f6c\u6362\u4e3a\u5c0f\u5199\u3002\u8be5\u53c2\u6570\u53ef\u4ee5\u4e3a\u5b57\u7b26\u4e32\u6216\u6570\u5b57\u3002", "\u5982\u679c\u8f93\u5165\u53c2\u6570\u4e3a\u5b57\u7b26\u4e32\uff0c\u8be5\u51fd\u6570\u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u5c0f\u5199\u5f62\u5f0f\u3002\u5982\u679c\u8f93\u5165\u53c2\u6570\u4e3a\u6570\u5b57\uff0c\u8be5\u51fd\u6570\u5c06\u4f1a\u53bb\u6389\u8be5\u6570\u5b57\u4e2d\u7684\u524d\u5bfc\u96f6\u3002\u5982\u679c\u8f93\u5165\u53c2\u6570\u4e3a NULL\uff0c\u8be5\u51fd\u6570\u8fd4\u56de NULL\u3002"], "Examples": ["SELECT LOWER(\"TiDB\");\n\n+---------------+\n| LOWER(\"TiDB\") |\n+---------------+\n| tidb          |\n+---------------+\n", "SELECT LOWER(-012);\n\n+-------------+\n| LOWER(-012) |\n+-------------+\n| -12         |\n+-------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#lpad"], "Title": ["LPAD()"], "Feature": ["LPAD()"], "Description": ["LPAD()", "LPAD(str, len, padstr) \u51fd\u6570\u8fd4\u56de\u5b57\u7b26\u4e32\u53c2\u6570\uff0c\u5de6\u4fa7\u586b\u5145\u6307\u5b9a\u5b57\u7b26\u4e32 padstr\uff0c\u76f4\u5230\u5b57\u7b26\u4e32\u957f\u5ea6\u8fbe\u5230 len \u4e2a\u5b57\u7b26\u3002", "\u5982\u679c len \u5c0f\u4e8e\u5b57\u7b26\u4e32 str \u7684\u957f\u5ea6\uff0c\u51fd\u6570\u5c06\u5b57\u7b26\u4e32 str \u622a\u65ad\u5230\u957f\u5ea6 len\u3002\u5982\u679c len \u4e3a\u8d1f\u6570\uff0c\u51fd\u6570\u8fd4\u56de NULL\u3002\u5982\u679c\u4efb\u4e00\u53c2\u6570\u4e3a NULL\uff0c\u8be5\u51fd\u6570\u8fd4\u56de NULL\u3002"], "Examples": ["SELECT LPAD('TiDB',8,'>');\n+--------------------+\n| LPAD('TiDB',8,'>') |\n+--------------------+\n| >>>>TiDB           |\n+--------------------+\n1 row in set (0.00 sec)\n", "SELECT LPAD('TiDB',2,'>');\n+--------------------+\n| LPAD('TiDB',2,'>') |\n+--------------------+\n| Ti                 |\n+--------------------+\n1 row in set (0.00 sec)\n", "SELECT LPAD('TiDB',-2,'>');\n+---------------------+\n| LPAD('TiDB',-2,'>') |\n+---------------------+\n| NULL                |\n+---------------------+\n1 row in set (0.00 sec)\n"], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#ltrim"], "Title": ["LTRIM()"], "Feature": ["LTRIM()"], "Description": ["LTRIM()", "LTRIM() \u51fd\u6570\u7528\u4e8e\u5220\u9664\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u4e2d\u7684\u524d\u5bfc\u7a7a\u683c\uff08\u5373\u5b57\u7b26\u4e32\u5f00\u5934\u7684\u8fde\u7eed\u7a7a\u683c\uff09\u3002", "\u5982\u679c\u8f93\u5165\u7684\u53c2\u6570\u4e3a NULL\uff0c\u8be5\u51fd\u6570\u5c06\u8fd4\u56de NULL\u3002", "\u6ce8\u610f\u8be5\u51fd\u6570\u53ea\u53bb\u6389\u7a7a\u683c\u5b57\u7b26\uff08U+0020\uff09\uff0c\u4e0d\u53bb\u6389\u5176\u4ed6\u7c7b\u4f3c\u7a7a\u683c\u7684\u5b57\u7b26\uff0c\u5982\u5236\u8868\u7b26\uff08U+0009\uff09\u6216\u975e\u5206\u9694\u7b26\uff08U+00A0\uff09\u3002"], "Examples": ["SELECT LTRIM('    hello');\n", "SELECT CONCAT('\u00ab',LTRIM('    hello'),'\u00bb');\n"], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#make_set"], "Title": ["MAKE_SET()"], "Feature": ["MAKE_SET()"], "Description": ["MAKE_SET()", "MAKE_SET() \u51fd\u6570\u6839\u636e\u8f93\u5165\u7684 bits \u53c2\u6570\u4e2d\u76f8\u5e94\u7684 bit \u662f\u5426\u4e3a 1 \u8fd4\u56de\u4e00\u7ec4\u7531\u9017\u53f7\u5206\u9694\u7684\u5b57\u7b26\u4e32\u3002", "\u8bed\u6cd5\uff1a", "MAKE_SET(bits, str1, str2, ...)\n", "bits\uff1a\u63a7\u5236\u5176\u540e\u7684\u5b57\u7b26\u4e32\u53c2\u6570\u4e2d\u7684\u54ea\u4e9b\u53c2\u6570\u4f1a\u5305\u542b\u5230\u8f93\u51fa\u7ed3\u679c\u4e2d\u3002\u5982\u679c bits \u4e3a NULL\uff0c\u8be5\u51fd\u6570\u5c06\u8fd4\u56de NULL\u3002str1, str2, ...\uff1a\u5b57\u7b26\u4e32\u53c2\u6570\u5217\u8868\u3002\u6bcf\u4e2a\u5b57\u7b26\u4e32\u4e0e bits \u53c2\u6570\u4e2d\u4ece\u53f3\u5230\u5de6\u7684\u4e00\u4e2a bit \u4f9d\u6b21\u5bf9\u5e94\u3002str1 \u5bf9\u5e94\u4e8e bits \u4e2d\u4ece\u53f3\u8d77\u7684\u7b2c\u4e00\u4e2a bit\uff0cstr2 \u5bf9\u5e94\u4e8e\u4ece\u53f3\u8d77\u7684\u7b2c\u4e8c\u4e2a bit\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\u5982\u679c\u76f8\u5e94\u7684 bit \u4e3a 1\uff0c\u5219\u8be5\u5b57\u7b26\u4e32\u5c06\u5305\u542b\u5728\u8f93\u51fa\u7ed3\u679c\u4e2d\uff1b\u5426\u5219\uff0c\u5c06\u4e0d\u5305\u542b\u5728\u8f93\u51fa\u7ed3\u679c\u4e2d\u3002"], "Examples": ["SELECT MAKE_SET(b'000','foo','bar','baz');\n", "SELECT MAKE_SET(b'001','foo','bar','baz');\n", "SELECT MAKE_SET(b'010','foo','bar','baz');\n", "SELECT MAKE_SET(b'100','foo','bar','baz');\n", "SELECT MAKE_SET(b'111','foo','bar','baz');\n"], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#mid"], "Title": ["MID()"], "Feature": ["MID()"], "Description": ["MID()", "MID(str,pos,len) \u51fd\u6570\u8fd4\u56de\u4ece\u6307\u5b9a\u7684 pos \u4f4d\u7f6e\u5f00\u59cb\u7684\u957f\u5ea6\u4e3a len \u7684\u5b50\u5b57\u7b26\u4e32\u3002", "\u5982\u679c\u4efb\u4e00\u53c2\u6570\u4e3a NULL\uff0c\u8be5\u51fd\u6570\u5c06\u8fd4\u56de NULL\u3002", "TiDB \u4e0d\u652f\u6301\u8be5\u51fd\u6570\u7684\u4e24\u53c2\u6570\u7248\u672c\u3002\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 #52420\u3002"], "Examples": ["SELECT MID('abcdef',2,3);\n"], "Category": ["String Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_current-timestamp"], "Title": ["CURRENT_TIMESTAMP(), CURRENT_TIMESTAMP"], "Feature": ["CURRENT_TIMESTAMP"], "Description": ["Synonyms for NOW()", "\nCURRENT_TIMESTAMP,\n          CURRENT_TIMESTAMP([fsp])\n", "\nCURRENT_TIMESTAMP and\n          CURRENT_TIMESTAMP() are\n          synonyms for NOW().\n        "], "Examples": [], "Category": ["Date and Time Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#not-like"], "Title": ["NOT LIKE"], "Feature": ["NOT LIKE"], "Description": ["NOT LIKE", "\u5426\u5b9a\u7b80\u5355\u6a21\u5f0f\u5339\u914d\u3002", "\u8be5\u51fd\u6570\u7684\u529f\u80fd\u4e0e LIKE \u51fd\u6570\u76f8\u53cd\u3002"], "Examples": ["SELECT 'aaa' LIKE 'a%', 'aaa' NOT LIKE 'a%';\n", "SELECT 'aaa' LIKE 'b%', 'aaa' NOT LIKE 'b%';\n"], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#not-regexp"], "Title": ["NOT REGEXP"], "Feature": ["NOT REGEXP"], "Description": ["NOT REGEXP", "REGEXP \u7684\u5426\u5b9a\u5f62\u5f0f"], "Examples": [], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#oct"], "Title": ["OCT()"], "Feature": ["OCT()"], "Description": ["OCT()", "OCT() \u51fd\u6570\u7528\u4e8e\u8fd4\u56de\u4e00\u4e2a\u6570\u503c\u7684\u516b\u8fdb\u5236\u8868\u793a\uff0c\u5f62\u5f0f\u4e3a\u5b57\u7b26\u4e32\u3002"], "Examples": ["WITH RECURSIVE nr(n) AS (\n    SELECT 0 AS n\n    UNION ALL\n    SELECT n+1 FROM nr WHERE n<20\n)\nSELECT n, OCT(n) FROM nr;\n"], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#octet_length"], "Title": ["OCTET_LENGTH()"], "Feature": ["OCTET_LENGTH()"], "Description": ["OCTET_LENGTH()", "\u4e0e LENGTH() \u529f\u80fd\u76f8\u540c"], "Examples": [], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#ord"], "Title": ["ORD()"], "Feature": ["ORD()"], "Description": ["ORD()", "\u8fd4\u56de\u7ed9\u5b9a\u7684\u53c2\u6570\u4e2d\u6700\u5de6\u4fa7\u5b57\u7b26\u7684\u5b57\u7b26\u7f16\u7801\u3002", "\u8be5\u51fd\u6570\u7684\u529f\u80fd\u7c7b\u4f3c\u4e8e CHAR()\uff0c\u4f46\u5904\u7406\u65b9\u5f0f\u76f8\u53cd\u3002"], "Examples": ["SELECT ORD('a'), ORD('A');\n", "SELECT CHAR(97), CHAR(65);\n", "SELECT ORD('e'), ORD('\u00eb'), HEX('e'), HEX('\u00eb');\n"], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#position"], "Title": ["POSITION()"], "Feature": ["POSITION()"], "Description": ["POSITION()", "\u4e0e LOCATE() \u529f\u80fd\u76f8\u540c"], "Examples": [], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#quote"], "Title": ["QUOTE()"], "Feature": ["QUOTE()"], "Description": ["QUOTE()", "QUOTE() \u51fd\u6570\u7528\u4e8e\u8f6c\u4e49\u5b57\u7b26\u4e32\uff0c\u4f7f\u5176\u53ef\u4ee5\u5728 SQL \u8bed\u53e5\u4e2d\u4f7f\u7528\u3002", "\u5982\u679c\u8f93\u5165\u53c2\u6570\u4e3a NULL\uff0c\u8be5\u51fd\u6570\u8fd4\u56de NULL\u3002"], "Examples": ["SELECT QUOTE(0x002774657374);\n"], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#regexp"], "Title": ["REGEXP"], "Feature": ["REGEXP"], "Description": ["REGEXP", "\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u6a21\u5f0f"], "Examples": ["WITH vals AS (\n    SELECT 'TiDB' AS v \n    UNION ALL\n    SELECT 'Titanium'\n    UNION ALL\n    SELECT 'Tungsten'\n    UNION ALL\n    SELECT 'Rust'\n)\nSELECT \n    v,\n    v REGEXP '^Ti' AS 'starts with \"Ti\"',\n    v REGEXP '^.{4}$' AS 'Length is 4 characters'\nFROM\n    vals;\n", "SELECT\n    v\nFROM (\n        SELECT 'TiDB' AS v\n    ) AS vals\nWHERE\n    v REGEXP 'DB$';\n"], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#regexp_instr"], "Title": ["REGEXP_INSTR()"], "Feature": ["REGEXP_INSTR()"], "Description": ["REGEXP_INSTR()", "\u8fd4\u56de\u6ee1\u8db3\u6b63\u5219\u7684\u5b50\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u4e2a\u7d22\u5f15\u4f4d\u7f6e\uff08\u4e0e MySQL \u4e0d\u5b8c\u5168\u517c\u5bb9\uff0c\u5177\u4f53\u8bf7\u53c2\u8003\u6b63\u5219\u51fd\u6570\u4e0e MySQL \u7684\u517c\u5bb9\u6027\uff09", "REGEXP_INSTR(str, regexp, [start, [match, [ret, [match_type]]]]) \u51fd\u6570\u8fd4\u56de\u6b63\u5219\u8868\u8fbe\u5f0f\uff08regexp\uff09\u5339\u914d\u5b57\u7b26\u4e32\uff08str\uff09\u7684\u4f4d\u7f6e\u3002", "\u5982\u679c str \u6216 regexp \u4e3a NULL\uff0c\u5219\u8be5\u51fd\u6570\u8fd4\u56de NULL\u3002"], "Examples": ["SELECT REGEXP_INSTR('abc','^.b.$');\n", "SELECT REGEXP_INSTR('abcabc','a');\n", "SELECT REGEXP_INSTR('abcabc','a',2);\n", "SELECT REGEXP_INSTR('abcabc','a',1,2);\n", "SELECT REGEXP_INSTR('abcabc','a',1,1,1);\n", "SELECT REGEXP_INSTR('abcabc','A',1,1,0,'');\n", "SELECT REGEXP_INSTR('abcabc','A',1,1,0,'i');\n", "SELECT REGEXP_INSTR('abcabc','A' COLLATE utf8mb4_general_ci);\n", "SELECT REGEXP_INSTR('abcabc','A' COLLATE utf8mb4_bin);\n"], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#regexp_like"], "Title": ["REGEXP_LIKE()"], "Feature": ["REGEXP_LIKE()"], "Description": ["REGEXP_LIKE()", "\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u6ee1\u8db3\u6b63\u5219\u8868\u8fbe\u5f0f\uff08\u4e0e MySQL \u4e0d\u5b8c\u5168\u517c\u5bb9\uff0c\u5177\u4f53\u8bf7\u53c2\u8003\u6b63\u5219\u51fd\u6570\u4e0e MySQL \u7684\u517c\u5bb9\u6027\uff09", "REGEXP_LIKE(str, regex, [match_type]) \u51fd\u6570\u7528\u4e8e\u5224\u65ad\u6b63\u5219\u8868\u8fbe\u5f0f\u662f\u5426\u5339\u914d\u5b57\u7b26\u4e32\u3002\u53ef\u9009\u7684 match_type \u53c2\u6570\u53ef\u4ee5\u7528\u4e8e\u66f4\u6539\u5339\u914d\u884c\u4e3a\u3002"], "Examples": ["SELECT REGEXP_LIKE('abc','^a');\n", "SELECT REGEXP_LIKE('abc','^A');\n", "SELECT REGEXP_LIKE('abc','^A','i');\n"], "Category": ["String Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_curtime"], "Title": ["CURTIME()"], "Feature": ["CURTIME([fsp])"], "Description": ["Return the current time", "\nCURTIME([fsp])\n", "\n          Returns the current time as a value in\n          'hh:mm:ss' or\n          hhmmss format, depending on whether\n          the function is used in string or numeric context. The value\n          is expressed in the session time zone.\n        ", "\n          If the fsp argument is given to\n          specify a fractional seconds precision from 0 to 6, the return\n          value includes a fractional seconds part of that many digits.\n        ", "Press CTRL+C to copy mysql> SELECT CURTIME();\n+-----------+\n| CURTIME() |\n+-----------+\n| 19:25:37  |\n+-----------+\n\nmysql> SELECT CURTIME() + 0;\n+---------------+\n| CURTIME() + 0 |\n+---------------+\n|        192537 |\n+---------------+\n\nmysql> SELECT CURTIME(3);\n+--------------+\n| CURTIME(3)   |\n+--------------+\n| 19:25:37.840 |\n+--------------+"], "Examples": ["mysql> SELECT CURTIME();\n+-----------+\n| CURTIME() |\n+-----------+\n| 19:25:37  |\n+-----------+\n\nmysql> SELECT CURTIME() + 0;\n+---------------+\n| CURTIME() + 0 |\n+---------------+\n|        192537 |\n+---------------+\n\nmysql> SELECT CURTIME(3);\n+--------------+\n| CURTIME(3)   |\n+--------------+\n| 19:25:37.840 |\n+--------------+"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#regexp_replace"], "Title": ["REGEXP_REPLACE()"], "Feature": ["REGEXP_REPLACE()"], "Description": ["REGEXP_REPLACE()", "\u66ff\u6362\u6ee1\u8db3\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u5b50\u5b57\u7b26\u4e32\uff08\u4e0e MySQL \u4e0d\u5b8c\u5168\u517c\u5bb9\uff0c\u5177\u4f53\u8bf7\u53c2\u8003\u6b63\u5219\u51fd\u6570\u4e0e MySQL \u7684\u517c\u5bb9\u6027\uff09", "REGEXP_REPLACE(str, regexp, replace, [start, [match, [match_type]]]) \u51fd\u6570\u53ef\u4ee5\u7528\u4e8e\u57fa\u4e8e\u6b63\u5219\u8868\u8fbe\u5f0f\u66ff\u6362\u5b57\u7b26\u4e32\u3002"], "Examples": ["SELECT REGEXP_REPLACE('TooDB', 'o{2}', 'i');\n", "SELECT REGEXP_REPLACE('TooDB', 'o{2}', 'i',3);\n", "SELECT REGEXP_REPLACE('TooDB', 'o', 'i',1,1);\n", "SELECT REGEXP_REPLACE('TooDB', 'o', 'i',1,2);\n", "SELECT REGEXP_REPLACE('TooDB', 'O{2}','i',1,1);\n", "SELECT REGEXP_REPLACE('TooDB', 'O{2}','i',1,1,'i');\n"], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#regexp_substr"], "Title": ["REGEXP_SUBSTR()"], "Feature": ["REGEXP_SUBSTR()"], "Description": ["REGEXP_SUBSTR()", "\u8fd4\u56de\u6ee1\u8db3\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u5b50\u5b57\u7b26\u4e32\uff08\u4e0e MySQL \u4e0d\u5b8c\u5168\u517c\u5bb9\uff0c\u5177\u4f53\u8bf7\u53c2\u8003\u6b63\u5219\u51fd\u6570\u4e0e MySQL \u7684\u517c\u5bb9\u6027\uff09", "REGEXP_SUBSTR(str, regexp, [start, [match, [match_type]]]) \u51fd\u6570\u7528\u4e8e\u57fa\u4e8e\u6b63\u5219\u8868\u8fbe\u5f0f\u83b7\u53d6\u5b50\u5b57\u7b26\u4e32\u3002"], "Examples": ["SELECT REGEXP_SUBSTR('This is TiDB','Ti.{2}');\n"], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#repeat"], "Title": ["REPEAT()"], "Feature": ["REPEAT()"], "Description": ["REPEAT()", "REPEAT() \u51fd\u6570\u7528\u4e8e\u4ee5\u6307\u5b9a\u6b21\u6570\u91cd\u590d\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002"], "Examples": ["WITH RECURSIVE nr(n) AS (\n    SELECT 1 AS n \n    UNION ALL \n    SELECT n+1 FROM nr WHERE n<20\n)\nSELECT n, REPEAT('x',n) FROM nr;\n", "SELECT REPEAT('ha',3);\n"], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#replace"], "Title": ["REPLACE()"], "Feature": ["REPLACE()"], "Description": ["REPLACE()", "\u66ff\u6362\u6240\u6709\u51fa\u73b0\u7684\u6307\u5b9a\u5b57\u7b26\u4e32"], "Examples": [], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#reverse"], "Title": ["REVERSE()"], "Feature": ["REVERSE()"], "Description": ["REVERSE()", "\u53cd\u8f6c\u5b57\u7b26\u4e32\u91cc\u7684\u6240\u6709\u5b57\u7b26"], "Examples": [], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#right"], "Title": ["RIGHT()"], "Feature": ["RIGHT()"], "Description": ["RIGHT()", "\u8fd4\u56de\u6307\u5b9a\u6570\u91cf\u7684\u6700\u53f3\u4fa7\u7684\u5b57\u7b26"], "Examples": [], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#rlike"], "Title": ["RLIKE"], "Feature": ["RLIKE"], "Description": ["RLIKE", "\u4e0e REGEXP \u529f\u80fd\u76f8\u540c"], "Examples": [], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#rpad"], "Title": ["RPAD()"], "Feature": ["RPAD()"], "Description": ["RPAD()", "\u4ee5\u6307\u5b9a\u6b21\u6570\u6dfb\u52a0\u5b57\u7b26\u4e32"], "Examples": [], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#rtrim"], "Title": ["RTRIM()"], "Feature": ["RTRIM()"], "Description": ["RTRIM()", "\u53bb\u6389\u540e\u7f00\u7a7a\u683c"], "Examples": [], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#space"], "Title": ["SPACE()"], "Feature": ["SPACE()"], "Description": ["SPACE()", "\u8fd4\u56de\u6307\u5b9a\u6570\u91cf\u7684\u7a7a\u683c\uff0c\u5f62\u5f0f\u4e3a\u5b57\u7b26\u4e32"], "Examples": [], "Category": ["String Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_date"], "Title": ["DATE()"], "Feature": ["DATE(expr)"], "Description": ["Extract the date part of a date or datetime expression", "\nDATE(expr)\n", "\n          Extracts the date part of the date or datetime expression\n          expr. Returns\n          NULL if expr is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT DATE('2003-12-31 01:02:03');\n        -> '2003-12-31'"], "Examples": ["mysql> SELECT DATE('2003-12-31 01:02:03');\n        -> '2003-12-31'"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#strcmp"], "Title": ["STRCMP()"], "Feature": ["STRCMP()"], "Description": ["STRCMP()", "\u6bd4\u8f83\u4e24\u4e2a\u5b57\u7b26\u4e32"], "Examples": [], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#substr"], "Title": ["SUBSTR()"], "Feature": ["SUBSTR()"], "Description": ["SUBSTR()", "\u8fd4\u56de\u6307\u5b9a\u7684\u5b50\u5b57\u7b26\u4e32"], "Examples": [], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#substring"], "Title": ["SUBSTRING()"], "Feature": ["SUBSTRING()"], "Description": ["SUBSTRING()", "\u8fd4\u56de\u6307\u5b9a\u7684\u5b50\u5b57\u7b26\u4e32"], "Examples": [], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#substring_index"], "Title": ["SUBSTRING_INDEX()"], "Feature": ["SUBSTRING_INDEX()"], "Description": ["SUBSTRING_INDEX()", "SUBSTRING_INDEX() \u51fd\u6570\u7528\u4e8e\u6309\u7167\u6307\u5b9a\u7684\u5206\u9694\u7b26\u548c\u6b21\u6570\u4ece\u5b57\u7b26\u4e32\u4e2d\u63d0\u53d6\u5b50\u5b57\u7b26\u4e32\u3002\u8be5\u51fd\u6570\u5728\u5904\u7406\u4ee5\u7279\u5b9a\u5206\u9694\u7b26\u5206\u9694\u7684\u6570\u636e\u65f6\u7279\u522b\u6709\u7528\uff0c\u4f8b\u5982\u89e3\u6790 CSV \u6570\u636e\u6216\u5904\u7406\u65e5\u5fd7\u6587\u4ef6\u3002", "\u8bed\u6cd5\uff1a", "SUBSTRING_INDEX(str, delim, count)\n", "str\uff1a\u8981\u5904\u7406\u7684\u5b57\u7b26\u4e32\u3002delim\uff1a\u6307\u5b9a\u5b57\u7b26\u4e32\u4e2d\u7684\u5206\u9694\u7b26\uff0c\u5927\u5c0f\u5199\u654f\u611f\u3002count\uff1a\u6307\u5b9a\u5206\u9694\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u3002\u5982\u679c count \u4e3a\u6b63\u6570\uff0c\u8be5\u51fd\u6570\u8fd4\u56de\u4ece\u5b57\u7b26\u4e32\u5de6\u8fb9\u5f00\u59cb\u7684\u7b2c count \u4e2a\u5206\u9694\u7b26\u4e4b\u524d\u7684\u5b50\u5b57\u7b26\u4e32\u3002\u5982\u679c count \u4e3a\u8d1f\u6570\uff0c\u8be5\u51fd\u6570\u8fd4\u56de\u4ece\u5b57\u7b26\u4e32\u53f3\u8fb9\u5f00\u59cb\u7684\u7b2c count \u4e2a\u5206\u9694\u7b26\u4e4b\u540e\u7684\u5b50\u5b57\u7b26\u4e32\u3002\u5982\u679c count \u4e3a 0\uff0c\u8be5\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32\u3002"], "Examples": ["SELECT SUBSTRING_INDEX('www.tidbcloud.com', '.', 2);\n", "SELECT SUBSTRING_INDEX('www.tidbcloud.com', '.', -1);\n"], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#to_base64"], "Title": ["TO_BASE64()"], "Feature": ["TO_BASE64()"], "Description": ["TO_BASE64()", "TO_BASE64() \u51fd\u6570\u7528\u4e8e\u5c06\u8f93\u5165\u7684\u53c2\u6570\u8f6c\u6362\u4e3a base-64 \u7f16\u7801\u5f62\u5f0f\u7684\u5b57\u7b26\u4e32\uff0c\u5e76\u6309\u7167\u5f53\u524d\u8fde\u63a5\u7684\u5b57\u7b26\u96c6\u548c\u6392\u5e8f\u89c4\u5219\u8fd4\u56de\u7ed3\u679c\u3002base-64 \u7f16\u7801\u7684\u5b57\u7b26\u4e32\u53ef\u4ee5\u4f7f\u7528 FROM_BASE64() \u51fd\u6570\u8fdb\u884c\u89e3\u7801\u3002", "\u8bed\u6cd5\uff1a", "TO_BASE64(str)\n", "\u5982\u679c\u8f93\u5165\u53c2\u6570\u4e0d\u662f\u5b57\u7b26\u4e32\uff0c\u8be5\u51fd\u6570\u4f1a\u5c06\u5176\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u540e\u518d\u8fdb\u884c base-64 \u7f16\u7801\u3002\u5982\u679c\u8f93\u5165\u53c2\u6570\u4e3a NULL\uff0c\u8be5\u51fd\u6570\u8fd4\u56de NULL\u3002"], "Examples": ["SELECT TO_BASE64('abc');\n", "SELECT TO_BASE64(6);\n"], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#translate"], "Title": ["TRANSLATE()"], "Feature": ["TRANSLATE()"], "Description": ["TRANSLATE()", "\u5c06\u5b57\u7b26\u4e32\u4e2d\u51fa\u73b0\u7684\u6240\u6709\u6307\u5b9a\u5b57\u7b26\u66ff\u6362\u4e3a\u5176\u5b83\u5b57\u7b26\u3002\u8fd9\u4e2a\u51fd\u6570\u4e0d\u4f1a\u50cf Oracle \u4e00\u6837\u5c06\u7a7a\u5b57\u7b26\u4e32\u89c6\u4e3aNULL"], "Examples": [], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#trim"], "Title": ["TRIM()"], "Feature": ["TRIM()"], "Description": ["TRIM()", "\u53bb\u6389\u524d\u7f00\u548c\u540e\u7f00\u7a7a\u683c"], "Examples": [], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#ucase"], "Title": ["UCASE()"], "Feature": ["UCASE()"], "Description": ["UCASE()", "UCASE() \u51fd\u6570\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5927\u5199\u5b57\u6bcd\uff0c\u6b64\u51fd\u6570\u7b49\u4ef7\u4e8e UPPER() \u51fd\u6570\u3002", "\u6ce8\u610f\u5f53\u5b57\u7b26\u4e32\u4e3a null \u65f6\uff0c\u5219\u8fd4\u56de NULL\u3002"], "Examples": ["SELECT UCASE('bigdata') AS result_upper, UCASE(null) AS result_null;\n"], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#unhex"], "Title": ["UNHEX()"], "Feature": ["UNHEX()"], "Description": ["UNHEX()", "UNHEX() \u51fd\u6570\u6267\u884c HEX() \u51fd\u6570\u7684\u9006\u8fd0\u7b97\uff0c\u5c06\u53c2\u6570\u4e2d\u7684\u6bcf\u5bf9\u5b57\u7b26\u89c6\u4e3a\u5341\u516d\u8fdb\u5236\u6570\u5b57\uff0c\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\u8be5\u6570\u5b57\u8868\u793a\u7684\u5b57\u7b26\uff0c\u8fd4\u56de\u503c\u4e3a\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\u3002", "\u6ce8\u610f\u4f20\u5165\u7684\u5b57\u7b26\u4e32\u5fc5\u987b\u662f\u5408\u6cd5\u7684\u5341\u516d\u8fdb\u5236\u6570\u503c\uff0c\u5305\u542b 0~9\u3001A~F\u3001a~f\uff0c\u5982\u679c\u4e3a NULL \u6216\u8d85\u51fa\u8be5\u8303\u56f4\uff0c\u5219\u8fd4\u56de NULL\u3002"], "Examples": ["SELECT UNHEX('54694442');\n"], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#upper"], "Title": ["UPPER()"], "Feature": ["UPPER()"], "Description": ["UPPER()", "UPPER() \u51fd\u6570\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5927\u5199\u5b57\u6bcd\uff0c\u6b64\u51fd\u6570\u7b49\u4ef7\u4e8e UCASE() \u51fd\u6570\u3002", "\u6ce8\u610f\u5f53\u5b57\u7b26\u4e32\u4e3a null \u65f6\uff0c\u5219\u8fd4\u56de NULL\u3002"], "Examples": ["SELECT UPPER('bigdata') AS result_upper, UPPER(null) AS result_null;\n"], "Category": ["String Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_date-add"], "Title": ["DATE_ADD()"], "Feature": ["DATE_ADD(date,INTERVAL\n          expr\nunit)"], "Description": ["Add time values (intervals) to a date value", "\nDATE_ADD(date,INTERVAL\n          expr\nunit),\n          DATE_SUB(date,INTERVAL\n          expr\nunit)\n", "\n          These functions perform date arithmetic. The\n          date argument specifies the\n          starting date or datetime value.\n          expr is an expression specifying\n          the interval value to be added or subtracted from the starting\n          date. expr is evaluated as a\n          string; it may start with a - for negative\n          intervals. unit is a keyword\n          indicating the units in which the expression should be\n          interpreted.\n        ", "\n          For more information about temporal interval syntax, including\n          a full list of unit specifiers, the\n          expected form of the expr argument\n          for each unit value, and rules for\n          operand interpretation in temporal arithmetic, see\n          Temporal Intervals.\n        ", "\n          The return value depends on the arguments:\n", "\n\n              If date is\n              NULL, the function returns\n              NULL.\n            \nDATE if the\n              date argument is a\n              DATE value and your\n              calculations involve only YEAR,\n              MONTH, and DAY parts\n              (that is, no time parts).\n            \nTIME if the\n              date argument is a\n              TIME value and the calculations involve\n              only HOURS, MINUTES,\n              and SECONDS parts (that is, no date\n              parts).\n            \nDATETIME if the first\n              argument is a DATETIME (or\n              TIMESTAMP) value, or if the\n              first argument is a DATE\n              and the unit value uses\n              HOURS, MINUTES, or\n              SECONDS, or if the first argument is of\n              type TIME and the\n              unit value uses\n              YEAR, MONTH, or\n              DAY.\n            \n              If the first argument is a dynamic parameter (for example,\n              of a prepared statement), its resolved type is\n              DATE if the second argument is an\n              interval that contains some combination of\n              YEAR, MONTH, or\n              DAY values only; otherwise, its type is\n              DATETIME.\n            \n              String otherwise (type\n              VARCHAR).\n\n", "\n          To ensure that the result is\n          DATETIME, you can use\n          CAST() to convert the first\n          argument to DATETIME.\n        ", "Press CTRL+C to copy mysql> SELECT DATE_ADD('2018-05-01',INTERVAL 1 DAY);\n        -> '2018-05-02'\nmysql> SELECT DATE_SUB('2018-05-01',INTERVAL 1 YEAR);\n        -> '2017-05-01'\nmysql> SELECT DATE_ADD('2020-12-31 23:59:59',\n    ->                 INTERVAL 1 SECOND);\n        -> '2021-01-01 00:00:00'\nmysql> SELECT DATE_ADD('2018-12-31 23:59:59',\n    ->                 INTERVAL 1 DAY);\n        -> '2019-01-01 23:59:59'\nmysql> SELECT DATE_ADD('2100-12-31 23:59:59',\n    ->                 INTERVAL '1:1' MINUTE_SECOND);\n        -> '2101-01-01 00:01:00'\nmysql> SELECT DATE_SUB('2025-01-01 00:00:00',\n    ->                 INTERVAL '1 1:1:1' DAY_SECOND);\n        -> '2024-12-30 22:58:59'\nmysql> SELECT DATE_ADD('1900-01-01 00:00:00',\n    ->                 INTERVAL '-1 10' DAY_HOUR);\n        -> '1899-12-30 14:00:00'\nmysql> SELECT DATE_SUB('1998-01-02', INTERVAL 31 DAY);\n        -> '1997-12-02'\nmysql> SELECT DATE_ADD('1992-12-31 23:59:59.000002',\n    ->            INTERVAL '1.999999' SECOND_MICROSECOND);\n        -> '1993-01-01 00:00:01.000001'", "\n          When adding a MONTH interval to a\n          DATE or DATETIME value,\n          and the resulting date includes a day that does not exist in\n          the given month, the day is adjusted to the last day of the\n          month, as shown here:\n        ", "Press CTRL+C to copy mysql> SELECT DATE_ADD('2024-03-30', INTERVAL 1 MONTH) AS d1, \n     >        DATE_ADD('2024-03-31', INTERVAL 1 MONTH) AS d2;\n+------------+------------+\n| d1         | d2         |\n+------------+------------+\n| 2024-04-30 | 2024-04-30 |\n+------------+------------+\n1 row in set (0.00 sec)"], "Examples": ["mysql> SELECT DATE_ADD('2018-05-01',INTERVAL 1 DAY);\n        -> '2018-05-02'\nmysql> SELECT DATE_SUB('2018-05-01',INTERVAL 1 YEAR);\n        -> '2017-05-01'\nmysql> SELECT DATE_ADD('2020-12-31 23:59:59',\n    ->                 INTERVAL 1 SECOND);\n        -> '2021-01-01 00:00:00'\nmysql> SELECT DATE_ADD('2018-12-31 23:59:59',\n    ->                 INTERVAL 1 DAY);\n        -> '2019-01-01 23:59:59'\nmysql> SELECT DATE_ADD('2100-12-31 23:59:59',\n    ->                 INTERVAL '1:1' MINUTE_SECOND);\n        -> '2101-01-01 00:01:00'\nmysql> SELECT DATE_SUB('2025-01-01 00:00:00',\n    ->                 INTERVAL '1 1:1:1' DAY_SECOND);\n        -> '2024-12-30 22:58:59'\nmysql> SELECT DATE_ADD('1900-01-01 00:00:00',\n    ->                 INTERVAL '-1 10' DAY_HOUR);\n        -> '1899-12-30 14:00:00'\nmysql> SELECT DATE_SUB('1998-01-02', INTERVAL 31 DAY);\n        -> '1997-12-02'\nmysql> SELECT DATE_ADD('1992-12-31 23:59:59.000002',\n    ->            INTERVAL '1.999999' SECOND_MICROSECOND);\n        -> '1993-01-01 00:00:01.000001'", "mysql> SELECT DATE_ADD('2024-03-30', INTERVAL 1 MONTH) AS d1, \n     >        DATE_ADD('2024-03-31', INTERVAL 1 MONTH) AS d2;\n+------------+------------+\n| d1         | d2         |\n+------------+------------+\n| 2024-04-30 | 2024-04-30 |\n+------------+------------+\n1 row in set (0.00 sec)"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/string-functions#weight_string"], "Title": ["WEIGHT_STRING()"], "Feature": ["WEIGHT_STRING()"], "Description": ["WEIGHT_STRING()"], "Examples": ["SET NAMES 'utf8mb4';\nSELECT HEX(WEIGHT_STRING('ab' AS CHAR(3))) AS char_result, HEX(WEIGHT_STRING('ab' AS BINARY(3))) AS binary_result;\n"], "Category": ["String Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/tidb-functions#current_resource_group"], "Title": ["CURRENT_RESOURCE_GROUP"], "Feature": ["CURRENT_RESOURCE_GROUP"], "Description": ["CURRENT_RESOURCE_GROUP", "CURRENT_RESOURCE_GROUP() \u51fd\u6570\u7528\u4e8e\u67e5\u8be2\u5f53\u524d\u8fde\u63a5\u7ed1\u5b9a\u7684\u8d44\u6e90\u7ec4\u540d\u79f0\u3002\u5f53\u5f00\u542f\u8d44\u6e90\u7ba1\u63a7 (Resource Control) \u529f\u80fd\u65f6\uff0c\u6267\u884c SQL \u8bed\u53e5\u5bf9\u8d44\u6e90\u7684\u5360\u7528\u4f1a\u53d7\u5230\u6240\u7ed1\u5b9a\u7684\u8d44\u6e90\u7ec4\u8d44\u6e90\u914d\u7f6e\u7684\u9650\u5236\u3002", "\u5728\u4f1a\u8bdd\u5efa\u7acb\u65f6\uff0cTiDB \u9ed8\u8ba4\u4f1a\u5c06\u8fde\u63a5\u7ed1\u5b9a\u81f3\u767b\u5f55\u7528\u6237\u7ed1\u5b9a\u7684\u8d44\u6e90\u7ec4\uff0c\u5982\u679c\u7528\u6237\u6ca1\u6709\u7ed1\u5b9a\u4efb\u4f55\u8d44\u6e90\u7ec4\uff0c\u5219\u4f1a\u5c06\u8fde\u63a5\u7ed1\u5b9a\u81f3 default \u8d44\u6e90\u7ec4\u3002\u5728\u4f1a\u8bdd\u5efa\u7acb\u4e4b\u540e\uff0c\u7ed1\u5b9a\u7684\u8d44\u6e90\u7ec4\u9ed8\u8ba4\u4e0d\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u5373\u4f7f\u6267\u884c\u4e86\u4fee\u6539\u7528\u6237\u7ed1\u5b9a\u7684\u8d44\u6e90\u7ec4\u3002\u5982\u9700\u4fee\u6539\u5f53\u524d\u4f1a\u8bdd\u7ed1\u5b9a\u7684\u8d44\u6e90\u7ec4\uff0c\u53ef\u4ee5\u4f7f\u7528 SET RESOURCE GROUP \u8bed\u53e5\u3002"], "Examples": ["CREATE USER 'user1';\nCREATE RESOURCE GROUP rg1 RU_PER_SEC = 1000;\nCREATE RESOURCE GROUP rg2 RU_PER_SEC = 2000;\nALTER USER 'user1' RESOURCE GROUP `rg1`;\n", "SELECT CURRENT_RESOURCE_GROUP();\n", "SET RESOURCE GROUP `rg2`;\nSELECT CURRENT_RESOURCE_GROUP();\n"], "Category": ["TiDB Specific Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/tidb-functions#tidb_bounded_staleness"], "Title": ["TIDB_BOUNDED_STALENESS"], "Feature": ["TIDB_BOUNDED_STALENESS"], "Description": ["TIDB_BOUNDED_STALENESS", "TIDB_BOUNDED_STALENESS() \u51fd\u6570\u7528\u4f5c AS OF TIMESTAMP \u8bed\u6cd5\u7684\u4e00\u90e8\u5206\u3002"], "Examples": [], "Category": ["TiDB Specific Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/tidb-functions#tidb_current_tso"], "Title": ["TIDB_CURRENT_TSO"], "Feature": ["TIDB_CURRENT_TSO"], "Description": ["TIDB_CURRENT_TSO", "TIDB_CURRENT_TSO() \u51fd\u6570\u8fd4\u56de\u5f53\u524d\u4e8b\u52a1\u7684 TSO\uff0c\u7c7b\u4f3c\u4e8e tidb_current_ts \u53d8\u91cf\u3002", "BEGIN;\n", "Query OK, 0 rows affected (0.00 sec)\n", "SELECT TIDB_CURRENT_TSO();\n", "+--------------------+\n| TIDB_CURRENT_TSO() |\n+--------------------+\n| 450456244814610433 |\n+--------------------+\n1 row in set (0.00 sec)\n", "SELECT @@tidb_current_ts;\n", "+--------------------+\n| @@tidb_current_ts  |\n+--------------------+\n| 450456244814610433 |\n+--------------------+\n1 row in set (0.00 sec)\n"], "Examples": ["BEGIN;\n", "SELECT TIDB_CURRENT_TSO();\n", "SELECT @@tidb_current_ts;\n"], "Category": ["TiDB Specific Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/tidb-functions#tidb_decode_binary_plan"], "Title": ["TIDB_DECODE_BINARY_PLAN"], "Feature": ["TIDB_DECODE_BINARY_PLAN"], "Description": ["TIDB_DECODE_BINARY_PLAN", "TIDB_DECODE_BINARY_PLAN(binary_plan) \u51fd\u6570\u7528\u4e8e\u89e3\u7801\u4ee5\u4e8c\u8fdb\u5236\u683c\u5f0f\u7f16\u7801\u7684\u6267\u884c\u8ba1\u5212\uff0c\u4f8b\u5982 STATEMENTS_SUMMARY \u8868\u4e2d BINARY_PLAN \u5217\u7684\u8ba1\u5212\u3002", "\u5fc5\u987b\u5c06 tidb_generate_binary_plan \u53d8\u91cf\u8bbe\u7f6e\u4e3a ON\uff0c\u4e8c\u8fdb\u5236\u8ba1\u5212\u624d\u53ef\u7528\u3002"], "Examples": [], "Category": ["TiDB Specific Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/tidb-functions#tidb_decode_key"], "Title": ["TIDB_DECODE_KEY"], "Feature": ["TIDB_DECODE_KEY"], "Description": ["TIDB_DECODE_KEY", "TIDB_DECODE_KEY() \u51fd\u6570\u7528\u4e8e\u5c06 TiDB \u7f16\u7801\u7684\u952e\u8f93\u5165\u89e3\u7801\u4e3a\u5305\u542b _tidb_rowid \u548c table_id \u7684 JSON \u7ed3\u6784\u3002\u5728\u4e00\u4e9b\u7cfb\u7edf\u8868\u548c\u65e5\u5fd7\u8f93\u51fa\u4e2d\u6709 TiDB \u7f16\u7801\u7684\u952e\u3002"], "Examples": ["SELECT tidb_decode_key('7480000000000000FF3E5F720400000000FF0000000601633430FF3338646232FF2D64FF3531632D3131FF65FF622D386337352DFFFF3830653635303138FFFF61396265000000FF00FB000000000000F9');\n", "SELECT\n  TABLE_NAME,\n  TIDB_DECODE_KEY(START_KEY),\n  TIDB_DECODE_KEY(END_KEY)\nFROM\n  information_schema.TIKV_REGION_STATUS\nWHERE\n  TABLE_NAME='stock'\n  AND IS_INDEX=0\nORDER BY\n  START_KEY;\n"], "Category": ["TiDB Specific Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/tidb-functions#tidb_decode_plan"], "Title": ["TIDB_DECODE_PLAN"], "Feature": ["TIDB_DECODE_PLAN"], "Description": ["TIDB_DECODE_PLAN", "\u4f60\u53ef\u4ee5\u5728\u6162\u67e5\u8be2\u65e5\u5fd7\u4e2d\u627e\u5230\u7f16\u7801\u5f62\u5f0f\u7684 TiDB \u6267\u884c\u8ba1\u5212\uff0c\u7136\u540e\u4f7f\u7528 TIDB_DECODE_PLAN() \u51fd\u6570\u5c06\u7f16\u7801\u7684\u6267\u884c\u8ba1\u5212\u89e3\u7801\u4e3a\u6613\u8bfb\u7684\u5f62\u5f0f\u3002", "\u8be5\u51fd\u6570\u5f88\u6709\u7528\uff0c\u56e0\u4e3a\u5728\u6267\u884c\u8bed\u53e5\u65f6 TiDB \u4f1a\u6355\u83b7\u6267\u884c\u8ba1\u5212\u3002\u91cd\u65b0\u6267\u884c EXPLAIN \u4e2d\u7684\u8bed\u53e5\u53ef\u80fd\u4f1a\u4ea7\u751f\u4e0d\u540c\u7684\u7ed3\u679c\uff0c\u56e0\u4e3a\u6570\u636e\u5206\u5e03\u548c\u7edf\u8ba1\u6570\u636e\u4f1a\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u800c\u53d8\u5316\u3002", "SELECT tidb_decode_plan('8QIYMAkzMV83CQEH8E85LjA0CWRhdGE6U2VsZWN0aW9uXzYJOTYwCXRpbWU6NzEzLjHCtXMsIGxvb3BzOjIsIGNvcF90YXNrOiB7bnVtOiAxLCBtYXg6IDU2OC41wgErRHByb2Nfa2V5czogMCwgcnBjXxEpAQwFWBAgNTQ5LglZyGNvcHJfY2FjaGVfaGl0X3JhdGlvOiAwLjAwfQkzLjk5IEtCCU4vQQoxCTFfNgkxXzAJMwm2SGx0KHRlc3QudC5hLCAxMDAwMCkNuQRrdgmiAHsFbBQzMTMuOMIBmQnEDDk2MH0BUgEEGAoyCTQzXzUFVwX1oGFibGU6dCwga2VlcCBvcmRlcjpmYWxzZSwgc3RhdHM6cHNldWRvCTk2ISE2aAAIMTUzXmYA')\\G\n", "*************************** 1. row ***************************\n  tidb_decode_plan('8QIYMAkzMV83CQEH8E85LjA0CWRhdGE6U2VsZWN0aW9uXzYJOTYwCXRpbWU6NzEzLjHCtXMsIGxvb3BzOjIsIGNvcF90YXNrOiB7bnVtOiAxLCBtYXg6IDU2OC41wgErRHByb2Nfa2V5czogMCwgcnBjXxEpAQwFWBAgNTQ5LglZyGNvcHJfY2FjaGVfaGl0X3JhdGlvOiAwLjAwfQkzLjk5IEtCCU4vQQoxCTFfNgkxXz:     id                     task         estRows    operator info                              actRows    execution info                                                                                                                         memory     disk\n    TableReader_7          root         319.04     data:Selection_6                           960        time:713.1\u00b5s, loops:2, cop_task: {num: 1, max: 568.5\u00b5s, proc_keys: 0, rpc_num: 1, rpc_time: 549.1\u00b5s, copr_cache_hit_ratio: 0.00}    3.99 KB    N/A\n    \u2514\u2500Selection_6          cop[tikv]    319.04     lt(test.t.a, 10000)                        960        tikv_task:{time:313.8\u00b5s, loops:960}                                                                                                   N/A        N/A\n      \u2514\u2500TableFullScan_5    cop[tikv]    960        table:t, keep order:false, stats:pseudo    960        tikv_task:{time:153\u00b5s, loops:960}                                                                                                     N/A        N/A\n"], "Examples": [], "Category": ["TiDB Specific Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/tidb-functions#tidb_decode_sql_digests"], "Title": ["TIDB_DECODE_SQL_DIGESTS"], "Feature": ["TIDB_DECODE_SQL_DIGESTS"], "Description": ["TIDB_DECODE_SQL_DIGESTS", "TIDB_DECODE_SQL_DIGESTS() \u51fd\u6570\u7528\u4e8e\u5728\u96c6\u7fa4\u4e2d\u67e5\u8be2\u4e00\u7ec4 SQL Digest \u6240\u5bf9\u5e94\u7684 SQL \u8bed\u53e5\u7684\u5f52\u4e00\u5316\u5f62\u5f0f\uff08\u5373\u53bb\u9664\u683c\u5f0f\u548c\u53c2\u6570\u540e\u7684\u5f62\u5f0f\uff09\u3002\u51fd\u6570\u63a5\u53d7 1 \u4e2a\u6216 2 \u4e2a\u53c2\u6570\uff1a", "digests\uff1a\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u8be5\u53c2\u6570\u5e94\u7b26\u5408 JSON \u5b57\u7b26\u4e32\u6570\u7ec4\u7684\u683c\u5f0f\uff0c\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\u4e32\u5e94\u4e3a\u4e00\u4e2a SQL Digest\u3002stmtTruncateLength\uff1a\u53ef\u9009\u53c2\u6570\uff0c\u6574\u6570\u7c7b\u578b\uff0c\u7528\u6765\u9650\u5236\u8fd4\u56de\u7ed3\u679c\u4e2d\u6bcf\u6761 SQL \u8bed\u53e5\u7684\u957f\u5ea6\uff0c\u8d85\u8fc7\u6307\u5b9a\u7684\u957f\u5ea6\u4f1a\u88ab\u622a\u65ad\u30020 \u8868\u793a\u4e0d\u9650\u5236\u957f\u5ea6\u3002", "\u8be5\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u7b26\u5408 JSON \u5b57\u7b26\u4e32\u6570\u7ec4\u7684\u683c\u5f0f\uff0c\u6570\u7ec4\u4e2d\u7684\u7b2c i \u9879\u4e3a\u53c2\u6570 digests \u4e2d\u7684\u7b2c i \u4e2a\u5143\u7d20\u6240\u5bf9\u5e94\u7684\u8bed\u53e5\u3002\u5982\u679c\u53c2\u6570 digests \u4e2d\u7684\u67d0\u4e00\u9879\u4e0d\u662f\u4e00\u4e2a\u6709\u6548\u7684 SQL Digest \u6216\u7cfb\u7edf\u65e0\u6cd5\u67e5\u8be2\u5230\u5176\u5bf9\u5e94\u7684 SQL \u8bed\u53e5\uff0c\u5219\u8fd4\u56de\u7ed3\u679c\u4e2d\u5bf9\u5e94\u9879\u4e3a null\u3002\u5982\u679c\u6307\u5b9a\u4e86\u622a\u65ad\u957f\u5ea6 (stmtTruncateLength > 0)\uff0c\u5219\u8fd4\u56de\u7ed3\u679c\u4e2d\u6bcf\u6761\u8d85\u8fc7\u8be5\u957f\u5ea6\u7684\u8bed\u53e5\uff0c\u4fdd\u7559\u524d stmtTruncateLength \u4e2a\u5b57\u7b26\uff0c\u5e76\u5728\u5c3e\u90e8\u589e\u52a0 \"...\" \u540e\u7f00\u8868\u793a\u53d1\u751f\u4e86\u622a\u65ad\u3002\u5982\u679c\u53c2\u6570 digests \u4e3a NULL\uff0c\u5219\u51fd\u6570\u7684\u8fd4\u56de\u503c\u4e3a NULL\u3002", ".css-1weqspv{padding-top:0.5rem;padding-bottom:0.5rem;}.css-1weqspv .MuiAlert-message p{margin-bottom:0px;margin-top:0px;}", "\u6ce8\u610f\u4ec5\u6301\u6709 PROCESS \u6743\u9650\u7684\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u8be5\u51fd\u6570\u3002TIDB_DECODE_SQL_DIGESTS \u6267\u884c\u65f6\uff0cTiDB \u5185\u90e8\u4ece Statement Summary \u4e00\u7cfb\u5217\u8868\u4e2d\u67e5\u8be2\u6bcf\u4e2a SQL Digest \u6240\u5bf9\u5e94\u7684\u8bed\u53e5\uff0c\u56e0\u800c\u5e76\u4e0d\u80fd\u4fdd\u8bc1\u5bf9\u4efb\u610f SQL Digest \u90fd\u603b\u662f\u80fd\u67e5\u8be2\u5230\u5bf9\u5e94\u7684\u8bed\u53e5\uff0c\u53ea\u6709\u5728\u96c6\u7fa4\u4e2d\u6267\u884c\u8fc7\u7684\u8bed\u53e5\u624d\u6709\u53ef\u80fd\u88ab\u67e5\u8be2\u5230\uff0c\u4e14\u662f\u5426\u80fd\u67e5\u8be2\u5230\u53d7 Statement Summary \u8868\u76f8\u5173\u914d\u7f6e\u7684\u5f71\u54cd\u3002\u6709\u5173 Statement Summary \u8868\u7684\u8be6\u7ec6\u8bf4\u660e\uff0c\u53c2\u89c1 Statement Summary Tables\u3002\u8be5\u51fd\u6570\u5f00\u9500\u8f83\u5927\uff0c\u5728\u884c\u6570\u5f88\u591a\u7684\u67e5\u8be2\u4e2d\uff08\u6bd4\u5982\u5728\u89c4\u6a21\u8f83\u5927\u3001\u6bd4\u8f83\u7e41\u5fd9\u7684\u96c6\u7fa4\u4e0a\u67e5\u8be2 information_schema.cluster_tidb_trx \u5168\u8868\u65f6\uff09\u76f4\u63a5\u4f7f\u7528\u8be5\u51fd\u6570\u53ef\u80fd\u5bfc\u81f4\u67e5\u8be2\u8fd0\u884c\u65f6\u95f4\u8f83\u957f\u3002\u8bf7\u8c28\u614e\u4f7f\u7528\u3002\u8be5\u51fd\u6570\u5f00\u9500\u5927\u7684\u539f\u56e0\u662f\uff0c\u5176\u6bcf\u6b21\u88ab\u8c03\u7528\u65f6\uff0c\u90fd\u4f1a\u5728\u5185\u90e8\u53d1\u8d77\u5bf9 STATEMENTS_SUMMARY\u3001STATEMENTS_SUMMARY_HISTORY\u3001CLUSTER_STATEMENTS_SUMMARY \u548c CLUSTER_STATEMENTS_SUMMARY_HISTORY \u8fd9\u51e0\u5f20\u8868\u7684\u67e5\u8be2\uff0c\u4e14\u5176\u4e2d\u6d89\u53ca UNION \u64cd\u4f5c\u3002\u4e14\u8be5\u51fd\u6570\u76ee\u524d\u4e0d\u652f\u6301\u5411\u91cf\u5316\uff0c\u5373\u5bf9\u4e8e\u591a\u884c\u6570\u636e\u8c03\u7528\u8be5\u51fd\u6570\u65f6\uff0c\u5bf9\u6bcf\u884c\u90fd\u4f1a\u72ec\u7acb\u8fdb\u884c\u4e00\u6b21\u4e0a\u8ff0\u7684\u67e5\u8be2\u3002", "SET @digests = '[\"e6f07d43b5c21db0fbb9a31feac2dc599787763393dd5acbfad80e247eb02ad5\",\"38b03afa5debbdf0326a014dbe5012a62c51957f1982b3093e748460f8b00821\",\"e5796985ccafe2f71126ed6c0ac939ffa015a8c0744a24b7aee6d587103fd2f7\"]';\n\nSELECT TIDB_DECODE_SQL_DIGESTS(@digests);\n", "+------------------------------------+\n| TIDB_DECODE_SQL_DIGESTS(@digests)  |\n+------------------------------------+\n| [\"begin\",null,\"select * from `t`\"] |\n+------------------------------------+\n1 row in set (0.00 sec)\n", "\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u53c2\u6570\u662f\u4e00\u4e2a\u5305\u542b 3 \u4e2a SQL Digest \u7684 JSON \u6570\u7ec4\uff0c\u5176\u5bf9\u5e94\u7684 SQL \u8bed\u53e5\u5206\u522b\u4e3a\u67e5\u8be2\u7ed3\u679c\u4e2d\u7ed9\u51fa\u7684\u4e09\u9879\u3002\u4f46\u662f\u5176\u4e2d\u7b2c\u4e8c\u6761 SQL Digest \u6240\u5bf9\u5e94\u7684 SQL \u8bed\u53e5\u672a\u80fd\u4ece\u96c6\u7fa4\u4e2d\u627e\u5230\uff0c\u56e0\u800c\u7ed3\u679c\u4e2d\u7684\u7b2c\u4e8c\u9879\u4e3a null\u3002", "SELECT TIDB_DECODE_SQL_DIGESTS(@digests, 10);\n", "+---------------------------------------+\n| TIDB_DECODE_SQL_DIGESTS(@digests, 10) |\n+---------------------------------------+\n| [\"begin\",null,\"select * f...\"]        |\n+---------------------------------------+\n1 row in set (0.01 sec)\n", "\u4e0a\u8ff0\u8c03\u7528\u6307\u5b9a\u4e86\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff08\u5373\u622a\u65ad\u957f\u5ea6\uff09\u4e3a 10\uff0c\u800c\u67e5\u8be2\u7ed3\u679c\u4e2d\u7684\u7b2c\u4e09\u6761\u8bed\u53e5\u7684\u957f\u5ea6\u5927\u4e8e 10\uff0c\u56e0\u800c\u4ec5\u4fdd\u7559\u4e86\u524d 10 \u4e2a\u5b57\u7b26\uff0c\u5e76\u5728\u5c3e\u90e8\u6dfb\u52a0\u4e86 \"...\" \u8868\u793a\u53d1\u751f\u4e86\u622a\u65ad\u3002", "\u53e6\u8bf7\u53c2\u9605\uff1a", "Statement Summary TablesINFORMATION_SCHEMA.TIDB_TRX"], "Examples": ["SET @digests = '[\"e6f07d43b5c21db0fbb9a31feac2dc599787763393dd5acbfad80e247eb02ad5\",\"38b03afa5debbdf0326a014dbe5012a62c51957f1982b3093e748460f8b00821\",\"e5796985ccafe2f71126ed6c0ac939ffa015a8c0744a24b7aee6d587103fd2f7\"]';\n\nSELECT TIDB_DECODE_SQL_DIGESTS(@digests);\n", "SELECT TIDB_DECODE_SQL_DIGESTS(@digests, 10);\n"], "Category": ["TiDB Specific Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/tidb-functions#tidb_encode_sql_digest"], "Title": ["TIDB_ENCODE_SQL_DIGEST"], "Feature": ["TIDB_ENCODE_SQL_DIGEST"], "Description": ["TIDB_ENCODE_SQL_DIGEST", "TIDB_ENCODE_SQL_DIGEST(query_str) \u51fd\u6570\u8fd4\u56de\u67e5\u8be2\u5b57\u7b26\u4e32\u7684 SQL digest\u3002"], "Examples": ["SELECT TIDB_ENCODE_SQL_DIGEST('SELECT 1');\n", "SELECT TIDB_ENCODE_SQL_DIGEST('SELECT 2');\n"], "Category": ["TiDB Specific Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/tidb-functions#tidb_is_ddl_owner"], "Title": ["TIDB_IS_DDL_OWNER"], "Feature": ["TIDB_IS_DDL_OWNER"], "Description": ["TIDB_IS_DDL_OWNER", "\u5982\u679c\u4f60\u8fde\u63a5\u7684 TiDB \u5b9e\u4f8b\u662f DDL Owner\uff0cTIDB_IS_DDL_OWNER() \u51fd\u6570\u8fd4\u56de 1\u3002", "SELECT TIDB_IS_DDL_OWNER();\n", "+---------------------+\n| TIDB_IS_DDL_OWNER() |\n+---------------------+\n|                   1 |\n+---------------------+\n1 row in set (0.00 sec)\n"], "Examples": ["SELECT TIDB_IS_DDL_OWNER();\n"], "Category": ["TiDB Specific Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_date-format"], "Title": ["DATE_FORMAT()"], "Feature": ["DATE_FORMAT(date,format)"], "Description": ["Format date as specified", "\nDATE_FORMAT(date,format)\n", "\n          Formats the date value according to\n          the format string. If either\n          argument is NULL, the function returns\n          NULL.\n        ", "\n          The specifiers shown in the following table may be used in the\n          format string. The\n          % character is required before format\n          specifier characters. The specifiers apply to other functions\n          as well: STR_TO_DATE(),\n          TIME_FORMAT(),\n          UNIX_TIMESTAMP().\n", "\n\nSpecifier\nDescription\n\n%a\nAbbreviated weekday name\n                (Sun..Sat)\n\n%b\nAbbreviated month name (Jan..Dec)\n\n%c\nMonth, numeric (0..12)\n\n%D\nDay of the month with English suffix (0th,\n                1st, 2nd,\n                3rd, \u2026)\n\n%d\nDay of the month, numeric (00..31)\n\n%e\nDay of the month, numeric (0..31)\n\n%f\nMicroseconds (000000..999999)\n\n%H\nHour (00..23)\n\n%h\nHour (01..12)\n\n%I\nHour (01..12)\n\n%i\nMinutes, numeric (00..59)\n\n%j\nDay of year (001..366)\n\n%k\nHour (0..23)\n\n%l\nHour (1..12)\n\n%M\nMonth name (January..December)\n\n%m\nMonth, numeric (00..12)\n\n%p\nAM or PM\n\n%r\nTime, 12-hour (hh:mm:ss followed by\n                AM or PM)\n\n%S\nSeconds (00..59)\n\n%s\nSeconds (00..59)\n\n%T\nTime, 24-hour (hh:mm:ss)\n\n%U\nWeek (00..53), where Sunday is the\n                first day of the week;\n                WEEK() mode 0\n\n%u\nWeek (00..53), where Monday is the\n                first day of the week;\n                WEEK() mode 1\n\n%V\nWeek (01..53), where Sunday is the\n                first day of the week;\n                WEEK() mode 2; used with\n                %X\n\n%v\nWeek (01..53), where Monday is the\n                first day of the week;\n                WEEK() mode 3; used with\n                %x\n\n%W\nWeekday name (Sunday..Saturday)\n\n%w\nDay of the week\n                (0=Sunday..6=Saturday)\n\n%X\nYear for the week where Sunday is the first day of the week, numeric,\n                four digits; used with %V\n\n%x\nYear for the week, where Monday is the first day of the week, numeric,\n                four digits; used with %v\n\n%Y\nYear, numeric, four digits\n\n%y\nYear, numeric (two digits)\n\n%%\nA literal % character\n\n%x\nx, for any\n                \u201cx\u201d not listed\n                above\n\n", "\nSpecifier\nDescription\n", "\n          Ranges for the month and day specifiers begin with zero due to\n          the fact that MySQL permits the storing of incomplete dates\n          such as '2014-00-00'.\n        ", "\n          The language used for day and month names and abbreviations is\n          controlled by the value of the\n          lc_time_names system variable\n          (Section\u00a012.16, \u201cMySQL Server Locale Support\u201d).\n        ", "\n          For the %U, %u,\n          %V, and %v specifiers,\n          see the description of the\n          WEEK() function for information\n          about the mode values. The mode affects how week numbering\n          occurs.\n        ", "\nDATE_FORMAT() returns a string\n          with a character set and collation given by\n          character_set_connection and\n          collation_connection so that\n          it can return month and weekday names containing non-ASCII\n          characters.\n        ", "Press CTRL+C to copy mysql> SELECT DATE_FORMAT('2009-10-04 22:23:00', '%W %M %Y');\n        -> 'Sunday October 2009'\nmysql> SELECT DATE_FORMAT('2007-10-04 22:23:00', '%H:%i:%s');\n        -> '22:23:00'\nmysql> SELECT DATE_FORMAT('1900-10-04 22:23:00',\n    ->                 '%D %y %a %d %m %b %j');\n        -> '4th 00 Thu 04 10 Oct 277'\nmysql> SELECT DATE_FORMAT('1997-10-04 22:23:00',\n    ->                 '%H %k %I %r %T %S %w');\n        -> '22 22 10 10:23:00 PM 22:23:00 00 6'\nmysql> SELECT DATE_FORMAT('1999-01-01', '%X %V');\n        -> '1998 52'\nmysql> SELECT DATE_FORMAT('2006-06-00', '%d');\n        -> '00'"], "Examples": ["mysql> SELECT DATE_FORMAT('2009-10-04 22:23:00', '%W %M %Y');\n        -> 'Sunday October 2009'\nmysql> SELECT DATE_FORMAT('2007-10-04 22:23:00', '%H:%i:%s');\n        -> '22:23:00'\nmysql> SELECT DATE_FORMAT('1900-10-04 22:23:00',\n    ->                 '%D %y %a %d %m %b %j');\n        -> '4th 00 Thu 04 10 Oct 277'\nmysql> SELECT DATE_FORMAT('1997-10-04 22:23:00',\n    ->                 '%H %k %I %r %T %S %w');\n        -> '22 22 10 10:23:00 PM 22:23:00 00 6'\nmysql> SELECT DATE_FORMAT('1999-01-01', '%X %V');\n        -> '1998 52'\nmysql> SELECT DATE_FORMAT('2006-06-00', '%d');\n        -> '00'"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/tidb-functions#tidb_parse_tso"], "Title": ["TIDB_PARSE_TSO"], "Feature": ["TIDB_PARSE_TSO"], "Description": ["TIDB_PARSE_TSO", "TIDB_PARSE_TSO() \u51fd\u6570\u7528\u4e8e\u4ece TiDB TSO \u65f6\u95f4\u6233\u4e2d\u63d0\u53d6\u7269\u7406\u65f6\u95f4\u6233\u3002", "TSO \u6307 Time Stamp Oracle\uff0c\u662f PD (Placement Driver) \u4e3a\u6bcf\u4e2a\u4e8b\u52a1\u63d0\u4f9b\u7684\u5355\u8c03\u9012\u589e\u7684\u65f6\u95f4\u6233\u3002TSO \u662f\u4e00\u4e32\u6570\u5b57\uff0c\u5305\u542b\u4ee5\u4e0b\u4e24\u90e8\u5206\uff1a", "\u4e00\u4e2a\u7269\u7406\u65f6\u95f4\u6233\u4e00\u4e2a\u903b\u8f91\u8ba1\u6570\u5668", "BEGIN;\nSELECT TIDB_PARSE_TSO(@@tidb_current_ts);\nROLLBACK;\n", "+-----------------------------------+\n| TIDB_PARSE_TSO(@@tidb_current_ts) |\n+-----------------------------------+\n| 2021-05-26 11:33:37.776000        |\n+-----------------------------------+\n1 row in set (0.0012 sec)\n"], "Examples": ["BEGIN;\nSELECT TIDB_PARSE_TSO(@@tidb_current_ts);\nROLLBACK;\n"], "Category": ["TiDB Specific Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/tidb-functions#tidb_parse_tso_logical"], "Title": ["TIDB_PARSE_TSO_LOGICAL"], "Feature": ["TIDB_PARSE_TSO_LOGICAL"], "Description": ["TIDB_PARSE_TSO_LOGICAL", "TIDB_PARSE_TSO_LOGICAL(tso) \u51fd\u6570\u8fd4\u56de\u4ece TiDB TSO \u65f6\u95f4\u6233\u4e2d\u63d0\u53d6\u7684\u903b\u8f91\u65f6\u95f4\u6233\u3002", "SELECT TIDB_PARSE_TSO_LOGICAL(450456244814610433);\n", "+--------------------------------------------+\n| TIDB_PARSE_TSO_LOGICAL(450456244814610433) |\n+--------------------------------------------+\n|                                          1 |\n+--------------------------------------------+\n1 row in set (0.00 sec)\n", "SELECT TIDB_PARSE_TSO_LOGICAL(450456244814610434);\n", "+--------------------------------------------+\n| TIDB_PARSE_TSO_LOGICAL(450456244814610434) |\n+--------------------------------------------+\n|                                          2 |\n+--------------------------------------------+\n1 row in set (0.00 sec)\n"], "Examples": ["SELECT TIDB_PARSE_TSO_LOGICAL(450456244814610433);\n", "SELECT TIDB_PARSE_TSO_LOGICAL(450456244814610434);\n"], "Category": ["TiDB Specific Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/tidb-functions#tidb_row_checksum"], "Title": ["TIDB_ROW_CHECKSUM"], "Feature": ["TIDB_ROW_CHECKSUM"], "Description": ["TIDB_ROW_CHECKSUM", "TIDB_ROW_CHECKSUM() \u51fd\u6570\u7528\u4e8e\u67e5\u8be2\u884c\u6570\u636e\u7684 Checksum \u503c\u3002\u8be5\u51fd\u6570\u53ea\u80fd\u7528\u4e8e FastPlan \u6d41\u7a0b\u7684 SELECT \u8bed\u53e5\uff0c\u5373\u4f60\u53ef\u901a\u8fc7\u5f62\u5982 SELECT TIDB_ROW_CHECKSUM() FROM t WHERE id = ? \u6216 SELECT TIDB_ROW_CHECKSUM() FROM t WHERE id IN (?, ?, ...) \u7684\u8bed\u53e5\u8fdb\u884c\u67e5\u8be2\u3002", "\u5728 TiDB \u4e2d\u5f00\u542f\u884c\u6570\u636e Checksum \u529f\u80fd tidb_enable_row_level_checksum\uff1a", "SET GLOBAL tidb_enable_row_level_checksum = ON;\n", "\u4e0a\u8ff0\u914d\u7f6e\u4ec5\u5bf9\u65b0\u521b\u5efa\u7684\u4f1a\u8bdd\u751f\u6548\uff0c\u56e0\u6b64\u9700\u8981\u91cd\u65b0\u8fde\u63a5 TiDB\u3002", "\u521b\u5efa\u8868 t \u5e76\u63d2\u5165\u6570\u636e\uff1a", "USE test;\nCREATE TABLE t (id INT PRIMARY KEY, k INT, c CHAR(1));\nINSERT INTO t VALUES (1, 10, 'a');\n", "\u67e5\u8be2\u8868 t \u4e2d id = 1 \u7684\u884c\u6570\u636e\u7684 Checksum \u503c\uff1a", "SELECT *, TIDB_ROW_CHECKSUM() FROM t WHERE id = 1;\n", "\u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a", "+----+------+------+---------------------+\n| id | k    | c    | TIDB_ROW_CHECKSUM() |\n+----+------+------+---------------------+\n|  1 |   10 | a    | 3813955661          |\n+----+------+------+---------------------+\n1 row in set (0.000 sec)\n"], "Examples": ["SET GLOBAL tidb_enable_row_level_checksum = ON;\n", "USE test;\nCREATE TABLE t (id INT PRIMARY KEY, k INT, c CHAR(1));\nINSERT INTO t VALUES (1, 10, 'a');\n", "SELECT *, TIDB_ROW_CHECKSUM() FROM t WHERE id = 1;\n"], "Category": ["TiDB Specific Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/tidb-functions#tidb_shard"], "Title": ["TIDB_SHARD"], "Feature": ["TIDB_SHARD"], "Description": ["TIDB_SHARD", "TIDB_SHARD() \u51fd\u6570\u7528\u4e8e\u521b\u5efa\u4e00\u4e2a SHARD INDEX \u6765\u6253\u6563\u70ed\u70b9\u7d22\u5f15\u3002SHARD INDEX \u662f\u4e00\u79cd\u4ee5 TIDB_SHARD() \u51fd\u6570\u4e3a\u524d\u7f00\u7684\u8868\u8fbe\u5f0f\u7d22\u5f15\u3002", "\u521b\u5efa\u65b9\u5f0f\uff1a  \u4f7f\u7528 uk((tidb_shard(a)), a)) \u4e3a\u5b57\u6bb5 a \u521b\u5efa\u4e00\u4e2a SHARD INDEX\u3002\u5f53\u4e8c\u7ea7\u552f\u4e00\u7d22\u5f15 uk((tidb_shard(a)), a)) \u7684\u7d22\u5f15\u5b57\u6bb5 a \u4e0a\u5b58\u5728\u56e0\u5355\u8c03\u9012\u589e\u6216\u9012\u51cf\u800c\u4ea7\u751f\u7684\u70ed\u70b9\u65f6\uff0c\u7d22\u5f15\u7684\u524d\u7f00 tidb_shard(a) \u4f1a\u6253\u6563\u70ed\u70b9\uff0c\u4ece\u800c\u63d0\u5347\u96c6\u7fa4\u53ef\u6269\u5c55\u6027\u3002\u9002\u7528\u573a\u666f\uff1a\u4e8c\u7ea7\u552f\u4e00\u7d22\u5f15\u4e0a key \u503c\u5b58\u5728\u5355\u8c03\u9012\u589e\u6216\u9012\u51cf\u5bfc\u81f4\u7684\u5199\u5165\u70ed\u70b9\uff0c\u4e14\u8be5\u7d22\u5f15\u5305\u542b\u7684\u5217\u662f\u6574\u578b\u3002\u4e1a\u52a1\u4e2d SQL \u8bed\u53e5\u6839\u636e\u8be5\u4e8c\u7ea7\u7d22\u5f15\u7684\u5168\u90e8\u5b57\u6bb5\u505a\u7b49\u503c\u67e5\u8be2\uff0c\u67e5\u8be2\u53ef\u4ee5\u662f\u5355\u72ec\u7684 SELECT\uff0c\u4e5f\u53ef\u4ee5\u662f UPDATE\uff0cDELETE \u7b49\u4ea7\u751f\u7684\u5185\u90e8\u67e5\u8be2\uff0c\u7b49\u503c\u67e5\u8be2\u5305\u62ec a = 1 \u6216 a IN (1, 2, ......) \u4e24\u79cd\u65b9\u5f0f\u3002\u4f7f\u7528\u9650\u5236\uff1a\u975e\u7b49\u503c\u67e5\u8be2\u65e0\u6cd5\u4f7f\u7528\u7d22\u5f15\u3002\u67e5\u8be2\u6761\u4ef6\u4e2d AND \u548c OR \u6df7\u5408\u4e14\u6700\u5916\u5c42\u662f AND \u7b97\u5b50\u65f6\u65e0\u6cd5\u4f7f\u7528 SHARD INDEX\u3002GROUP BY \u65e0\u6cd5\u4f7f\u7528 SHARD INDEX\u3002ORDER BY \u65e0\u6cd5\u4f7f\u7528 SHARD INDEX\u3002ON \u5b50\u53e5\u65e0\u6cd5\u4f7f\u7528 SHARD INDEX\u3002WHERE \u5b50\u67e5\u8be2\u65e0\u6cd5\u4f7f\u7528 SHARD INDEX\u3002SHARD INDEX \u53ea\u80fd\u6253\u6563\u6574\u578b\u5b57\u6bb5\u7684\u552f\u4e00\u7d22\u5f15\u3002SHARD INDEX \u8054\u5408\u7d22\u5f15\u53ef\u80fd\u5931\u6548\u3002SHARD INDEX \u65e0\u6cd5\u8d70 FastPlan \u6d41\u7a0b\uff0c\u5f71\u54cd\u4f18\u5316\u5668\u6027\u80fd\u3002SHARD INDEX \u65e0\u6cd5\u4f7f\u7528\u6267\u884c\u8ba1\u5212\u7f13\u5b58\u3002"], "Examples": [], "Category": ["TiDB Specific Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/tidb-functions#tidb_version"], "Title": ["TIDB_VERSION"], "Feature": ["TIDB_VERSION"], "Description": ["TIDB_VERSION", "TIDB_VERSION() \u51fd\u6570\u7528\u4e8e\u83b7\u53d6\u5f53\u524d\u8fde\u63a5\u7684 TiDB \u670d\u52a1\u5668\u7248\u672c\u548c\u6784\u5efa\u8be6\u7ec6\u4fe1\u606f\u3002\u5411 GitHub \u4e0a\u63d0\u4ea4 issue \u65f6\uff0c\u4f60\u53ef\u4f7f\u7528\u6b64\u51fd\u6570\u83b7\u53d6\u76f8\u5173\u4fe1\u606f\u3002", "SELECT TIDB_VERSION()\\G\n", "*************************** 1. row ***************************\nTIDB_VERSION(): Release Version: v8.1.1\nEdition: Community\nGit Commit Hash: 821e491a20fbab36604b36b647b5bae26a2c1418\nGit Branch: HEAD\nUTC Build Time: 2024-08-27 19:16:25\nGoVersion: go1.21.10\nRace Enabled: false\nCheck Table Before Drop: false\nStore: tikv\n1 row in set (0.00 sec)\n"], "Examples": [], "Category": ["TiDB Specific Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/tidb-functions#vitess_hash"], "Title": ["VITESS_HASH"], "Feature": ["VITESS_HASH"], "Description": ["VITESS_HASH", "VITESS_HASH(num) \u51fd\u6570\u4ee5\u4e0e Vitess \u76f8\u540c\u7684\u65b9\u5f0f\u8fd4\u56de\u6570\u503c\u7684\u54c8\u5e0c\u503c\u3002\u8fd9\u6709\u52a9\u4e8e\u5c06\u6570\u636e\u4ece Vitess \u8fc1\u79fb\u5230 TiDB\u3002"], "Examples": ["SELECT VITESS_HASH(123);\n"], "Category": ["TiDB Specific Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/window-functions#cume_dist"], "Title": ["CUME_DIST()"], "Feature": ["CUME_DIST()"], "Description": ["CUME_DIST()", "CUME_DIST() \u8ba1\u7b97\u4e00\u4e2a\u503c\u5728\u4e00\u7ec4\u503c\u4e2d\u7684\u7d2f\u79ef\u5206\u5e03\u3002\u8bf7\u6ce8\u610f\uff0c\u4f60\u9700\u8981\u5728 CUME_DIST() \u540e\u4f7f\u7528 ORDER BY \u5b50\u53e5\u5bf9\u8be5\u7ec4\u4e2d\u7684\u503c\u8fdb\u884c\u6392\u5e8f\u3002\u5426\u5219\uff0c\u6b64\u51fd\u6570\u5c06\u4e0d\u4f1a\u8fd4\u56de\u9884\u671f\u503c\u3002", "WITH RECURSIVE cte(n) AS (\n    SELECT 1\n    UNION\n    SELECT\n        n+2\n    FROM\n        cte\n    WHERE\n        n<6\n)\nSELECT\n    *,\n    CUME_DIST() OVER(ORDER BY n)\nFROM\n    cte;\n", "+------+------------------------------+\n| n    | CUME_DIST() OVER(ORDER BY n) |\n+------+------------------------------+\n|    1 |                         0.25 |\n|    3 |                          0.5 |\n|    5 |                         0.75 |\n|    7 |                            1 |\n+------+------------------------------+\n4 rows in set (0.00 sec)\n"], "Examples": ["WITH RECURSIVE cte(n) AS (\n    SELECT 1\n    UNION\n    SELECT\n        n+2\n    FROM\n        cte\n    WHERE\n        n<6\n)\nSELECT\n    *,\n    CUME_DIST() OVER(ORDER BY n)\nFROM\n    cte;\n"], "Category": ["Window Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/window-functions#dense_rank"], "Title": ["DENSE_RANK()"], "Feature": ["DENSE_RANK()"], "Description": ["DENSE_RANK()", "DENSE_RANK() \u51fd\u6570\u8fd4\u56de\u5f53\u524d\u884c\u7684\u6392\u540d\u3002\u5b83\u7684\u4f5c\u7528\u7c7b\u4f3c\u4e8e RANK()\uff0c\u4f46\u5728\u5904\u7406\u5177\u6709\u76f8\u540c\u503c\u548c\u6392\u5e8f\u6761\u4ef6\u7684\u884c\u65f6\u80fd\u591f\u786e\u4fdd\u6392\u540d\u662f\u8fde\u7eed\u7684\u3002", "SELECT\n    *,\n    DENSE_RANK() OVER (ORDER BY n)\nFROM (\n    SELECT 5 AS 'n'\n    UNION ALL\n    SELECT 8\n    UNION ALL\n    SELECT 5\n    UNION ALL\n    SELECT 30\n    UNION ALL\n    SELECT 31\n    UNION ALL\n    SELECT 32) a;\n", "+----+--------------------------------+\n| n  | DENSE_RANK() OVER (ORDER BY n) |\n+----+--------------------------------+\n|  5 |                              1 |\n|  5 |                              1 |\n|  8 |                              2 |\n| 30 |                              3 |\n| 31 |                              4 |\n| 32 |                              5 |\n+----+--------------------------------+\n6 rows in set (0.00 sec)\n"], "Examples": ["SELECT\n    *,\n    DENSE_RANK() OVER (ORDER BY n)\nFROM (\n    SELECT 5 AS 'n'\n    UNION ALL\n    SELECT 8\n    UNION ALL\n    SELECT 5\n    UNION ALL\n    SELECT 30\n    UNION ALL\n    SELECT 31\n    UNION ALL\n    SELECT 32) a;\n"], "Category": ["Window Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/window-functions#first_value"], "Title": ["FIRST_VALUE()"], "Feature": ["FIRST_VALUE()"], "Description": ["FIRST_VALUE()", "FIRST_VALUE(expr) \u8fd4\u56de\u7a97\u53e3\u4e2d\u7684\u7b2c\u4e00\u4e2a\u503c\u3002"], "Examples": ["SELECT\n    n,\n    FIRST_VALUE(n) OVER (PARTITION BY n MOD 2 ORDER BY n),\n    FIRST_VALUE(n) OVER (PARTITION BY n <= 2 ORDER BY n)\nFROM (\n    SELECT 1 AS 'n'\n    UNION\n    SELECT 2\n    UNION\n    SELECT 3\n    UNION\n    SELECT 4\n) a\nORDER BY\n    n;\n"], "Category": ["Window Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/window-functions#lag"], "Title": ["LAG()"], "Feature": ["LAG()"], "Description": ["LAG()", "\u51fd\u6570 LAG(expr [, num [, default]]) \u8fd4\u56de\u5f53\u524d\u884c\u4e4b\u524d\u7b2c num \u884c\u7684 expr \u503c\u3002\u5982\u679c\u4e0d\u5b58\u5728\u8be5\u884c\uff0c\u5219\u8fd4\u56de default \u503c\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u672a\u6307\u5b9a\u65f6\uff0cnum \u4e3a 1\uff0cdefault \u4e3a NULL\u3002"], "Examples": ["WITH RECURSIVE cte(n) AS (\n    SELECT 1\n    UNION\n    SELECT\n        n+1\n    FROM\n        cte\n    WHERE\n        n<10\n)\nSELECT\n    n,\n    LAG(n) OVER ()\nFROM\n    cte;\n"], "Category": ["Window Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_date-sub"], "Title": ["DATE_SUB()"], "Feature": ["DATE_SUB(date,INTERVAL\n          expr\nunit)"], "Description": ["Subtract a time value (interval) from a date", "\nDATE_SUB(date,INTERVAL\n          expr\nunit)\n", "\n          See the description for\n          DATE_ADD().\n        "], "Examples": [], "Category": ["Date and Time Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/window-functions#last_value"], "Title": ["LAST_VALUE()"], "Feature": ["LAST_VALUE()"], "Description": ["LAST_VALUE()", "LAST_VALUE() \u51fd\u6570\u8fd4\u56de\u7a97\u53e3\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u503c\u3002", "WITH RECURSIVE cte(n) AS (\n    SELECT\n        1\n    UNION\n    SELECT\n        n+1\n    FROM\n        cte\n    WHERE\n        n<10\n)\nSELECT\n    n,\n    LAST_VALUE(n) OVER (PARTITION BY n<=5)\nFROM\n    cte\nORDER BY\n    n;\n", "+------+----------------------------------------+\n| n    | LAST_VALUE(n) OVER (PARTITION BY n<=5) |\n+------+----------------------------------------+\n|    1 |                                      5 |\n|    2 |                                      5 |\n|    3 |                                      5 |\n|    4 |                                      5 |\n|    5 |                                      5 |\n|    6 |                                     10 |\n|    7 |                                     10 |\n|    8 |                                     10 |\n|    9 |                                     10 |\n|   10 |                                     10 |\n+------+----------------------------------------+\n10 rows in set (0.00 sec)\n"], "Examples": ["WITH RECURSIVE cte(n) AS (\n    SELECT\n        1\n    UNION\n    SELECT\n        n+1\n    FROM\n        cte\n    WHERE\n        n<10\n)\nSELECT\n    n,\n    LAST_VALUE(n) OVER (PARTITION BY n<=5)\nFROM\n    cte\nORDER BY\n    n;\n"], "Category": ["Window Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/window-functions#lead"], "Title": ["LEAD()"], "Feature": ["LEAD()"], "Description": ["LEAD()", "\u51fd\u6570 LEAD(expr [, num [,default]]) \u8fd4\u56de\u5f53\u524d\u884c\u4e4b\u540e\u7b2c num \u884c\u7684 expr \u503c\u3002\u5982\u679c\u4e0d\u5b58\u5728\u8be5\u884c\uff0c\u5219\u8fd4\u56de default \u503c\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u672a\u6307\u5b9a\u65f6\uff0cnum \u4e3a 1\uff0cdefault \u4e3a NULL\u3002"], "Examples": ["WITH RECURSIVE cte(n) AS (\n    SELECT\n        1\n    UNION\n    SELECT\n        n+1\n    FROM\n        cte\n    WHERE\n        n<10\n)\nSELECT\n    n,\n    LEAD(n) OVER ()\nFROM\n    cte;\n"], "Category": ["Window Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/window-functions#nth_value"], "Title": ["NTH_VALUE()"], "Feature": ["NTH_VALUE()"], "Description": ["NTH_VALUE()", "\u51fd\u6570 NTH_VALUE(expr, n) \u8fd4\u56de\u7a97\u53e3\u7684\u7b2c n \u4e2a\u503c\u3002", "WITH RECURSIVE cte(n) AS (\n    SELECT\n        1\n    UNION\n    SELECT\n        n+1\n    FROM\n        cte\n    WHERE\n        n<10\n)\nSELECT\n    n,\n    FIRST_VALUE(n) OVER w AS 'First',\n    NTH_VALUE(n, 2) OVER w AS 'Second',\n    NTH_VALUE(n, 3) OVER w AS 'Third',\n    LAST_VALUE(n) OVER w AS 'Last'\nFROM\n    cte\nWINDOW\n    w AS (PARTITION BY n<=5)\nORDER BY\n    n;\n", "+------+-------+--------+-------+------+\n| n    | First | Second | Third | Last |\n+------+-------+--------+-------+------+\n|    1 |     1 |      2 |     3 |    5 |\n|    2 |     1 |      2 |     3 |    5 |\n|    3 |     1 |      2 |     3 |    5 |\n|    4 |     1 |      2 |     3 |    5 |\n|    5 |     1 |      2 |     3 |    5 |\n|    6 |     6 |      7 |     8 |   10 |\n|    7 |     6 |      7 |     8 |   10 |\n|    8 |     6 |      7 |     8 |   10 |\n|    9 |     6 |      7 |     8 |   10 |\n|   10 |     6 |      7 |     8 |   10 |\n+------+-------+--------+-------+------+\n10 rows in set (0.00 sec)\n"], "Examples": ["WITH RECURSIVE cte(n) AS (\n    SELECT\n        1\n    UNION\n    SELECT\n        n+1\n    FROM\n        cte\n    WHERE\n        n<10\n)\nSELECT\n    n,\n    FIRST_VALUE(n) OVER w AS 'First',\n    NTH_VALUE(n, 2) OVER w AS 'Second',\n    NTH_VALUE(n, 3) OVER w AS 'Third',\n    LAST_VALUE(n) OVER w AS 'Last'\nFROM\n    cte\nWINDOW\n    w AS (PARTITION BY n<=5)\nORDER BY\n    n;\n"], "Category": ["Window Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/window-functions#ntile"], "Title": ["NTILE()"], "Feature": ["NTILE()"], "Description": ["NTILE()", "NTILE(n) \u51fd\u6570\u5c06\u7a97\u53e3\u5212\u5206\u4e3a n \u4e2a\u5206\u7ec4\uff0c\u5e76\u8fd4\u56de\u5404\u884c\u7684\u5206\u7ec4\u7f16\u53f7\u3002", "WITH RECURSIVE cte(n) AS (\n    SELECT\n        1\n    UNION\n    SELECT\n        n+1\n    FROM\n        cte\n    WHERE\n    n<10\n)\nSELECT\n    n,\n    NTILE(5) OVER (),\n    NTILE(2) OVER ()\nFROM\n    cte;\n", "+------+------------------+------------------+\n| n    | NTILE(5) OVER () | NTILE(2) OVER () |\n+------+------------------+------------------+\n|    1 |                1 |                1 |\n|    2 |                1 |                1 |\n|    3 |                2 |                1 |\n|    4 |                2 |                1 |\n|    5 |                3 |                1 |\n|    6 |                3 |                2 |\n|    7 |                4 |                2 |\n|    8 |                4 |                2 |\n|    9 |                5 |                2 |\n|   10 |                5 |                2 |\n+------+------------------+------------------+\n10 rows in set (0.00 sec)\n"], "Examples": ["WITH RECURSIVE cte(n) AS (\n    SELECT\n        1\n    UNION\n    SELECT\n        n+1\n    FROM\n        cte\n    WHERE\n    n<10\n)\nSELECT\n    n,\n    NTILE(5) OVER (),\n    NTILE(2) OVER ()\nFROM\n    cte;\n"], "Category": ["Window Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/window-functions#percent_rank"], "Title": ["PERCENT_RANK()"], "Feature": ["PERCENT_RANK()"], "Description": ["PERCENT_RANK()", "PERCENT_RANK() \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u4ecb\u4e8e 0 \u548c 1 \u4e4b\u95f4\u7684\u6570\u5b57\uff0c\u8868\u793a\u503c\u5c0f\u4e8e\u5f53\u524d\u884c\u503c\u7684\u884c\u7684\u767e\u5206\u6bd4\u3002", "SELECT\n    *,\n    PERCENT_RANK() OVER (ORDER BY n),\n    PERCENT_RANK() OVER (ORDER BY n DESC)\nFROM (\n    SELECT 5 AS 'n'\n    UNION ALL\n    SELECT 8\n    UNION ALL\n    SELECT 5\n    UNION ALL\n    SELECT 30\n    UNION ALL\n    SELECT 31\n    UNION ALL\n    SELECT 32) a;\n", "+----+----------------------------------+---------------------------------------+\n| n  | PERCENT_RANK() OVER (ORDER BY n) | PERCENT_RANK() OVER (ORDER BY n DESC) |\n+----+----------------------------------+---------------------------------------+\n|  5 |                                0 |                                   0.8 |\n|  5 |                                0 |                                   0.8 |\n|  8 |                              0.4 |                                   0.6 |\n| 30 |                              0.6 |                                   0.4 |\n| 31 |                              0.8 |                                   0.2 |\n| 32 |                                1 |                                     0 |\n+----+----------------------------------+---------------------------------------+\n6 rows in set (0.00 sec)\n"], "Examples": ["SELECT\n    *,\n    PERCENT_RANK() OVER (ORDER BY n),\n    PERCENT_RANK() OVER (ORDER BY n DESC)\nFROM (\n    SELECT 5 AS 'n'\n    UNION ALL\n    SELECT 8\n    UNION ALL\n    SELECT 5\n    UNION ALL\n    SELECT 30\n    UNION ALL\n    SELECT 31\n    UNION ALL\n    SELECT 32) a;\n"], "Category": ["Window Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/window-functions#rank"], "Title": ["RANK()"], "Feature": ["RANK()"], "Description": ["RANK()", "RANK() \u51fd\u6570\u7684\u4f5c\u7528\u7c7b\u4f3c\u4e8e DENSE_RANK()\uff0c\u4f46\u5728\u5904\u7406\u5177\u6709\u76f8\u540c\u503c\u548c\u6392\u5e8f\u6761\u4ef6\u7684\u884c\u65f6\u8fd4\u56de\u7684\u6392\u540d\u662f\u4e0d\u8fde\u7eed\u7684\u3002\u8fd9\u610f\u5473\u7740\u5b83\u63d0\u4f9b\u7684\u662f\u7edd\u5bf9\u6392\u540d\u3002\u4f8b\u5982\uff0c\u6392\u540d 7 \u610f\u5473\u7740\u6709 6 \u4e2a\u884c\u7684\u6392\u540d\u66f4\u9760\u524d\u3002", "SELECT\n    *,\n    RANK() OVER (ORDER BY n),\n    DENSE_RANK() OVER (ORDER BY n)\nFROM (\n    SELECT 5 AS 'n'\n    UNION ALL\n    SELECT 8\n    UNION ALL\n    SELECT 5\n    UNION ALL\n    SELECT 30\n    UNION ALL\n    SELECT 31\n    UNION ALL\n    SELECT 32) a;\n", "+----+--------------------------+--------------------------------+\n| n  | RANK() OVER (ORDER BY n) | DENSE_RANK() OVER (ORDER BY n) |\n+----+--------------------------+--------------------------------+\n|  5 |                        1 |                              1 |\n|  5 |                        1 |                              1 |\n|  8 |                        3 |                              2 |\n| 30 |                        4 |                              3 |\n| 31 |                        5 |                              4 |\n| 32 |                        6 |                              5 |\n+----+--------------------------+--------------------------------+\n6 rows in set (0.00 sec)\n"], "Examples": ["SELECT\n    *,\n    RANK() OVER (ORDER BY n),\n    DENSE_RANK() OVER (ORDER BY n)\nFROM (\n    SELECT 5 AS 'n'\n    UNION ALL\n    SELECT 8\n    UNION ALL\n    SELECT 5\n    UNION ALL\n    SELECT 30\n    UNION ALL\n    SELECT 31\n    UNION ALL\n    SELECT 32) a;\n"], "Category": ["Window Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/window-functions#row_number"], "Title": ["ROW_NUMBER()"], "Feature": ["ROW_NUMBER()"], "Description": ["ROW_NUMBER()", "ROW_NUMBER() \u8fd4\u56de\u7ed3\u679c\u96c6\u4e2d\u5f53\u524d\u884c\u7684\u884c\u53f7\u3002", "WITH RECURSIVE cte(n) AS (\n    SELECT\n        1\n    UNION\n    SELECT\n        n+3\n    FROM\n        cte\n    WHERE\n        n<30\n)\nSELECT\n    n,\n    ROW_NUMBER() OVER ()\nFROM\n    cte;\n", "+------+----------------------+\n| n    | ROW_NUMBER() OVER () |\n+------+----------------------+\n|    1 |                    1 |\n|    4 |                    2 |\n|    7 |                    3 |\n|   10 |                    4 |\n|   13 |                    5 |\n|   16 |                    6 |\n|   19 |                    7 |\n|   22 |                    8 |\n|   25 |                    9 |\n|   28 |                   10 |\n|   31 |                   11 |\n+------+----------------------+\n11 rows in set (0.00 sec)\n"], "Examples": ["WITH RECURSIVE cte(n) AS (\n    SELECT\n        1\n    UNION\n    SELECT\n        n+3\n    FROM\n        cte\n    WHERE\n        n<30\n)\nSELECT\n    n,\n    ROW_NUMBER() OVER ()\nFROM\n    cte;\n"], "Category": ["Window Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_datediff"], "Title": ["DATEDIFF()"], "Feature": ["DATEDIFF(expr1,expr2)"], "Description": ["Subtract two dates", "\nDATEDIFF(expr1,expr2)\n", "\nDATEDIFF() returns\n          expr1 \u2212\n          expr2 expressed as a value in days\n          from one date to the other. expr1\n          and expr2 are date or date-and-time\n          expressions. Only the date parts of the values are used in the\n          calculation.\n        ", "Press CTRL+C to copy mysql> SELECT DATEDIFF('2007-12-31 23:59:59','2007-12-30');\n        -> 1\nmysql> SELECT DATEDIFF('2010-11-30 23:59:59','2010-12-31');\n        -> -31", "\n          This function returns NULL if\n          expr1 or\n          expr2 is NULL.\n        "], "Examples": ["mysql> SELECT DATEDIFF('2007-12-31 23:59:59','2007-12-30');\n        -> 1\nmysql> SELECT DATEDIFF('2010-11-30 23:59:59','2010-12-31');\n        -> -31"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_day"], "Title": ["DAY()"], "Feature": ["DAY(date)"], "Description": ["Synonym for DAYOFMONTH()", "\nDAY(date)\n", "\nDAY() is a synonym for\n          DAYOFMONTH().\n        "], "Examples": [], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_dayname"], "Title": ["DAYNAME()"], "Feature": ["DAYNAME(date)"], "Description": ["Return the name of the weekday", "\nDAYNAME(date)\n", "\n          Returns the name of the weekday for\n          date. The language used for the\n          name is controlled by the value of the\n          lc_time_names system variable\n          (see Section\u00a012.16, \u201cMySQL Server Locale Support\u201d). Returns\n          NULL if date is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT DAYNAME('2007-02-03');\n        -> 'Saturday'"], "Examples": ["mysql> SELECT DAYNAME('2007-02-03');\n        -> 'Saturday'"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_sum"], "Title": ["SUM()"], "Feature": ["SUM([DISTINCT]\n            expr)\n            [over_clause]"], "Description": ["Return the sum", "\nSUM([DISTINCT]\n            expr)\n            [over_clause]\n", "\n            Returns the sum of expr. If the\n            return set has no rows, SUM()\n            returns NULL. The\n            DISTINCT keyword can be used to sum only\n            the distinct values of expr.\n          ", "\n            If there are no matching rows, or if\n            expr is NULL,\n            SUM() returns\n            NULL.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d; it cannot be used\n            with DISTINCT.\n          "], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_dayofmonth"], "Title": ["DAYOFMONTH()"], "Feature": ["DAYOFMONTH(date)"], "Description": ["Return the day of the month (0-31)", "\nDAYOFMONTH(date)\n", "\n          Returns the day of the month for\n          date, in the range\n          1 to 31, or\n          0 for dates such as\n          '0000-00-00' or\n          '2008-00-00' that have a zero day part.\n          Returns NULL if\n          date is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT DAYOFMONTH('2007-02-03');\n        -> 3"], "Examples": ["mysql> SELECT DAYOFMONTH('2007-02-03');\n        -> 3"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_dayofweek"], "Title": ["DAYOFWEEK()"], "Feature": ["DAYOFWEEK(date)"], "Description": ["Return the weekday index of the argument", "\nDAYOFWEEK(date)\n", "\n          Returns the weekday index for date\n          (1 = Sunday, 2 = Monday,\n          \u2026, 7 = Saturday). These index values\n          correspond to the ODBC standard. Returns\n          NULL if date is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT DAYOFWEEK('2007-02-03');\n        -> 7"], "Examples": ["mysql> SELECT DAYOFWEEK('2007-02-03');\n        -> 7"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_dayofyear"], "Title": ["DAYOFYEAR()"], "Feature": ["DAYOFYEAR(date)"], "Description": ["Return the day of the year (1-366)", "\nDAYOFYEAR(date)\n", "\n          Returns the day of the year for\n          date, in the range\n          1 to 366. Returns\n          NULL if date is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT DAYOFYEAR('2007-02-03');\n        -> 34"], "Examples": ["mysql> SELECT DAYOFYEAR('2007-02-03');\n        -> 34"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_extract"], "Title": ["EXTRACT()"], "Feature": ["EXTRACT(unit\n          FROM date)"], "Description": ["Extract part of a date", "\nEXTRACT(unit\n          FROM date)\n", "\n          The EXTRACT() function uses the\n          same kinds of unit specifiers as\n          DATE_ADD() or\n          DATE_SUB(), but extracts parts\n          from the date rather than performing date arithmetic. For\n          information on the unit argument,\n          see Temporal Intervals. Returns\n          NULL if date is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT EXTRACT(YEAR FROM '2019-07-02');\n        -> 2019\nmysql> SELECT EXTRACT(YEAR_MONTH FROM '2019-07-02 01:02:03');\n        -> 201907\nmysql> SELECT EXTRACT(DAY_MINUTE FROM '2019-07-02 01:02:03');\n        -> 20102\nmysql> SELECT EXTRACT(MICROSECOND\n    ->                FROM '2003-01-02 10:30:00.000123');\n        -> 123"], "Examples": ["mysql> SELECT EXTRACT(YEAR FROM '2019-07-02');\n        -> 2019\nmysql> SELECT EXTRACT(YEAR_MONTH FROM '2019-07-02 01:02:03');\n        -> 201907\nmysql> SELECT EXTRACT(DAY_MINUTE FROM '2019-07-02 01:02:03');\n        -> 20102\nmysql> SELECT EXTRACT(MICROSECOND\n    ->                FROM '2003-01-02 10:30:00.000123');\n        -> 123"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_from-days"], "Title": ["FROM_DAYS()"], "Feature": ["FROM_DAYS(N)"], "Description": ["Convert a day number to a date", "\nFROM_DAYS(N)\n", "\n          Given a day number N, returns a\n          DATE value. Returns\n          NULL if N is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT FROM_DAYS(730669);\n        -> '2000-07-03'", "\n          Use FROM_DAYS() with caution on\n          old dates. It is not intended for use with values that precede\n          the advent of the Gregorian calendar (1582). See\n          Section\u00a013.2.7, \u201cWhat Calendar Is Used By MySQL?\u201d.\n        "], "Examples": ["mysql> SELECT FROM_DAYS(730669);\n        -> '2000-07-03'"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_from-unixtime"], "Title": ["FROM_UNIXTIME()"], "Feature": ["FROM_UNIXTIME(unix_timestamp[,format])"], "Description": ["Format Unix timestamp as a date", "\nFROM_UNIXTIME(unix_timestamp[,format])\n", "\n          Returns a representation of\n          unix_timestamp as a datetime or\n          character string value. The value returned is expressed using\n          the session time zone. (Clients can set the session time zone\n          as described in Section\u00a07.1.15, \u201cMySQL Server Time Zone Support\u201d.)\n          unix_timestamp is an internal\n          timestamp value representing seconds since\n          '1970-01-01 00:00:00' UTC, such as produced\n          by the UNIX_TIMESTAMP()\n          function.\n        ", "\n          If format is omitted, this function\n          returns a DATETIME value.\n        ", "\n          If unix_timestamp or\n          format is NULL,\n          this function returns NULL.\n        ", "\n          If unix_timestamp is an integer,\n          the fractional seconds precision of the\n          DATETIME is zero. When\n          unix_timestamp is a decimal value,\n          the fractional seconds precision of the\n          DATETIME is the same as the precision of\n          the decimal value, up to a maximum of 6. When\n          unix_timestamp is a floating point\n          number, the fractional seconds precision of the datetime is 6.\n        ", "\n          On 32-bit platforms, the maximum useful value for\n          unix_timestamp is\n          2147483647.999999, which returns '2038-01-19\n          03:14:07.999999' UTC. On 64-bit platforms, the\n          effective maximum is 32536771199.999999, which returns\n          '3001-01-18 23:59:59.999999' UTC.\n          Regardless of platform or version, a greater value for\n          unix_timestamp than the effective\n          maximum returns 0.\n        ", "\nformat is used to format the result\n          in the same way as the format string used for the\n          DATE_FORMAT() function. If\n          format is supplied, the value\n          returned is a VARCHAR.\n        ", "Press CTRL+C to copy mysql> SELECT FROM_UNIXTIME(1447430881);\n        -> '2015-11-13 10:08:01'\nmysql> SELECT FROM_UNIXTIME(1447430881) + 0;\n        -> 20151113100801\nmysql> SELECT FROM_UNIXTIME(1447430881,\n    ->                      '%Y %D %M %h:%i:%s %x');\n        -> '2015 13th November 10:08:01 2015'", "\n\nNote\n\n\n            If you use UNIX_TIMESTAMP()\n            and FROM_UNIXTIME() to\n            convert between values in a non-UTC time zone and Unix\n            timestamp values, the conversion is lossy because the\n            mapping is not one-to-one in both directions. For details,\n            see the description of the\n            UNIX_TIMESTAMP() function.\n\n"], "Examples": ["mysql> SELECT FROM_UNIXTIME(1447430881);\n        -> '2015-11-13 10:08:01'\nmysql> SELECT FROM_UNIXTIME(1447430881) + 0;\n        -> 20151113100801\nmysql> SELECT FROM_UNIXTIME(1447430881,\n    ->                      '%Y %D %M %h:%i:%s %x');\n        -> '2015 13th November 10:08:01 2015'"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_get-format"], "Title": ["GET_FORMAT()"], "Feature": ["GET_FORMAT({DATE|TIME|DATETIME},\n          {'EUR'|'USA'|'JIS'|'ISO'|'INTERNAL'})"], "Description": ["Return a date format string", "\nGET_FORMAT({DATE|TIME|DATETIME},\n          {'EUR'|'USA'|'JIS'|'ISO'|'INTERNAL'})\n", "\n          Returns a format string. This function is useful in\n          combination with the\n          DATE_FORMAT() and the\n          STR_TO_DATE() functions.\n        ", "\n          If format is\n          NULL, this function returns\n          NULL.\n        ", "\n          The possible values for the first and second arguments result\n          in several possible format strings (for the specifiers used,\n          see the table in the\n          DATE_FORMAT() function\n          description). ISO format refers to ISO 9075, not ISO 8601.\n", "\n\nFunction Call\nResult\n\nGET_FORMAT(DATE,'USA')\n'%m.%d.%Y'\n\nGET_FORMAT(DATE,'JIS')\n'%Y-%m-%d'\n\nGET_FORMAT(DATE,'ISO')\n'%Y-%m-%d'\n\nGET_FORMAT(DATE,'EUR')\n'%d.%m.%Y'\n\nGET_FORMAT(DATE,'INTERNAL')\n'%Y%m%d'\n\nGET_FORMAT(DATETIME,'USA')\n'%Y-%m-%d %H.%i.%s'\n\nGET_FORMAT(DATETIME,'JIS')\n'%Y-%m-%d %H:%i:%s'\n\nGET_FORMAT(DATETIME,'ISO')\n'%Y-%m-%d %H:%i:%s'\n\nGET_FORMAT(DATETIME,'EUR')\n'%Y-%m-%d %H.%i.%s'\n\nGET_FORMAT(DATETIME,'INTERNAL')\n'%Y%m%d%H%i%s'\n\nGET_FORMAT(TIME,'USA')\n'%h:%i:%s %p'\n\nGET_FORMAT(TIME,'JIS')\n'%H:%i:%s'\n\nGET_FORMAT(TIME,'ISO')\n'%H:%i:%s'\n\nGET_FORMAT(TIME,'EUR')\n'%H.%i.%s'\n\nGET_FORMAT(TIME,'INTERNAL')\n'%H%i%s'\n\n", "\nFunction Call\nResult\n", "\nTIMESTAMP can also be used as\n          the first argument to\n          GET_FORMAT(), in which case the\n          function returns the same values as for\n          DATETIME.\n        ", "Press CTRL+C to copy mysql> SELECT DATE_FORMAT('2003-10-03',GET_FORMAT(DATE,'EUR'));\n        -> '03.10.2003'\nmysql> SELECT STR_TO_DATE('10.31.2003',GET_FORMAT(DATE,'USA'));\n        -> '2003-10-31'"], "Examples": ["mysql> SELECT DATE_FORMAT('2003-10-03',GET_FORMAT(DATE,'EUR'));\n        -> '03.10.2003'\nmysql> SELECT STR_TO_DATE('10.31.2003',GET_FORMAT(DATE,'USA'));\n        -> '2003-10-31'"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_hour"], "Title": ["HOUR()"], "Feature": ["HOUR(time)"], "Description": ["Extract the hour", "\nHOUR(time)\n", "\n          Returns the hour for time. The\n          range of the return value is 0 to\n          23 for time-of-day values. However, the\n          range of TIME values actually\n          is much larger, so HOUR can return values\n          greater than 23. Returns\n          NULL if time is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT HOUR('10:05:03');\n        -> 10\nmysql> SELECT HOUR('272:59:59');\n        -> 272"], "Examples": ["mysql> SELECT HOUR('10:05:03');\n        -> 10\nmysql> SELECT HOUR('272:59:59');\n        -> 272"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_localtime"], "Title": ["LOCALTIME(), LOCALTIME"], "Feature": ["LOCALTIME"], "Description": ["Synonym for NOW()", "\nLOCALTIME,\n          LOCALTIME([fsp])\n", "\nLOCALTIME and\n          LOCALTIME() are synonyms for\n          NOW().\n        "], "Examples": [], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_localtimestamp"], "Title": ["LOCALTIMESTAMP, LOCALTIMESTAMP()"], "Feature": ["LOCALTIMESTAMP"], "Description": ["Synonym for NOW()", "\nLOCALTIMESTAMP,\n          LOCALTIMESTAMP([fsp])\n", "\nLOCALTIMESTAMP and\n          LOCALTIMESTAMP() are synonyms\n          for NOW().\n        "], "Examples": [], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_avg"], "Title": ["AVG()"], "Feature": ["AVG([DISTINCT]\n            expr)\n            [over_clause]"], "Description": ["Return the average value of the argument", "\nAVG([DISTINCT]\n            expr)\n            [over_clause]\n", "\n            Returns the average value of\n            expr. The\n            DISTINCT option can be used to return the\n            average of the distinct values of\n            expr.\n          ", "\n            If there are no matching rows,\n            AVG() returns\n            NULL. The function also returns\n            NULL if expr\n            is NULL.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d; it cannot be used\n            with DISTINCT.\n          ", "Press CTRL+C to copy mysql> SELECT student_name, AVG(test_score)\n       FROM student\n       GROUP BY student_name;"], "Examples": ["mysql> SELECT student_name, AVG(test_score)\n       FROM student\n       GROUP BY student_name;"], "Category": ["Aggregate Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_makedate"], "Title": ["MAKEDATE()"], "Feature": ["MAKEDATE(year,dayofyear)"], "Description": ["Create a date from the year and day of year", "\nMAKEDATE(year,dayofyear)\n", "\n          Returns a date, given year and day-of-year values.\n          dayofyear must be greater than 0 or\n          the result is NULL. The result is also\n          NULL if either argument is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT MAKEDATE(2011,31), MAKEDATE(2011,32);\n        -> '2011-01-31', '2011-02-01'\nmysql> SELECT MAKEDATE(2011,365), MAKEDATE(2014,365);\n        -> '2011-12-31', '2014-12-31'\nmysql> SELECT MAKEDATE(2011,0);\n        -> NULL"], "Examples": ["mysql> SELECT MAKEDATE(2011,31), MAKEDATE(2011,32);\n        -> '2011-01-31', '2011-02-01'\nmysql> SELECT MAKEDATE(2011,365), MAKEDATE(2014,365);\n        -> '2011-12-31', '2014-12-31'\nmysql> SELECT MAKEDATE(2011,0);\n        -> NULL"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_maketime"], "Title": ["MAKETIME()"], "Feature": ["MAKETIME(hour,minute,second)"], "Description": ["Create time from hour, minute, second", "\nMAKETIME(hour,minute,second)\n", "\n          Returns a time value calculated from the\n          hour,\n          minute, and\n          second arguments. Returns\n          NULL if any of its arguments are\n          NULL.\n        ", "\n          The second argument can have a\n          fractional part.\n        ", "Press CTRL+C to copy mysql> SELECT MAKETIME(12,15,30);\n        -> '12:15:30'"], "Examples": ["mysql> SELECT MAKETIME(12,15,30);\n        -> '12:15:30'"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_microsecond"], "Title": ["MICROSECOND()"], "Feature": ["MICROSECOND(expr)"], "Description": ["Return the microseconds from argument", "\nMICROSECOND(expr)\n", "\n          Returns the microseconds from the time or datetime expression\n          expr as a number in the range from\n          0 to 999999. Returns\n          NULL if expr is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT MICROSECOND('12:00:00.123456');\n        -> 123456\nmysql> SELECT MICROSECOND('2019-12-31 23:59:59.000010');\n        -> 10"], "Examples": ["mysql> SELECT MICROSECOND('12:00:00.123456');\n        -> 123456\nmysql> SELECT MICROSECOND('2019-12-31 23:59:59.000010');\n        -> 10"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_minute"], "Title": ["MINUTE()"], "Feature": ["MINUTE(time)"], "Description": ["Return the minute from the argument", "\nMINUTE(time)\n", "\n          Returns the minute for time, in the\n          range 0 to 59, or\n          NULL if time is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT MINUTE('2008-02-03 10:05:03');\n        -> 5"], "Examples": ["mysql> SELECT MINUTE('2008-02-03 10:05:03');\n        -> 5"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_month"], "Title": ["MONTH()"], "Feature": ["MONTH(date)"], "Description": ["Return the month from the date passed", "\nMONTH(date)\n", "\n          Returns the month for date, in the\n          range 1 to 12 for\n          January to December, or 0 for dates such as\n          '0000-00-00' or\n          '2008-00-00' that have a zero month part.\n          Returns NULL if\n          date is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT MONTH('2008-02-03');\n        -> 2"], "Examples": ["mysql> SELECT MONTH('2008-02-03');\n        -> 2"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_monthname"], "Title": ["MONTHNAME()"], "Feature": ["MONTHNAME(date)"], "Description": ["Return the name of the month", "\nMONTHNAME(date)\n", "\n          Returns the full name of the month for\n          date. The language used for the\n          name is controlled by the value of the\n          lc_time_names system variable\n          (Section\u00a012.16, \u201cMySQL Server Locale Support\u201d). Returns\n          NULL if date is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT MONTHNAME('2008-02-03');\n        -> 'February'"], "Examples": ["mysql> SELECT MONTHNAME('2008-02-03');\n        -> 'February'"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_now"], "Title": ["NOW()"], "Feature": ["NOW([fsp])"], "Description": ["Return the current date and time", "\nNOW([fsp])\n", "\n          Returns the current date and time as a value in\n          'YYYY-MM-DD\n          hh:mm:ss' or\n          YYYYMMDDhhmmss format, depending on\n          whether the function is used in string or numeric context. The\n          value is expressed in the session time zone.\n        ", "\n          If the fsp argument is given to\n          specify a fractional seconds precision from 0 to 6, the return\n          value includes a fractional seconds part of that many digits.\n        ", "Press CTRL+C to copy mysql> SELECT NOW();\n        -> '2007-12-15 23:50:26'\nmysql> SELECT NOW() + 0;\n        -> 20071215235026.000000", "\nNOW() returns a constant time\n          that indicates the time at which the statement began to\n          execute. (Within a stored function or trigger,\n          NOW() returns the time at which\n          the function or triggering statement began to execute.) This\n          differs from the behavior for\n          SYSDATE(), which returns the\n          exact time at which it executes.\n        ", "Press CTRL+C to copy mysql> SELECT NOW(), SLEEP(2), NOW();\n+---------------------+----------+---------------------+\n| NOW()               | SLEEP(2) | NOW()               |\n+---------------------+----------+---------------------+\n| 2006-04-12 13:47:36 |        0 | 2006-04-12 13:47:36 |\n+---------------------+----------+---------------------+\n\nmysql> SELECT SYSDATE(), SLEEP(2), SYSDATE();\n+---------------------+----------+---------------------+\n| SYSDATE()           | SLEEP(2) | SYSDATE()           |\n+---------------------+----------+---------------------+\n| 2006-04-12 13:47:44 |        0 | 2006-04-12 13:47:46 |\n+---------------------+----------+---------------------+", "\n          In addition, the SET TIMESTAMP statement\n          affects the value returned by\n          NOW() but not by\n          SYSDATE(). This means that\n          timestamp settings in the binary log have no effect on\n          invocations of SYSDATE().\n          Setting the timestamp to a nonzero value causes each\n          subsequent invocation of NOW()\n          to return that value. Setting the timestamp to zero cancels\n          this effect so that NOW() once\n          again returns the current date and time.\n        ", "\n          See the description for\n          SYSDATE() for additional\n          information about the differences between the two functions.\n        "], "Examples": ["mysql> SELECT NOW();\n        -> '2007-12-15 23:50:26'\nmysql> SELECT NOW() + 0;\n        -> 20071215235026.000000", "mysql> SELECT NOW(), SLEEP(2), NOW();\n+---------------------+----------+---------------------+\n| NOW()               | SLEEP(2) | NOW()               |\n+---------------------+----------+---------------------+\n| 2006-04-12 13:47:36 |        0 | 2006-04-12 13:47:36 |\n+---------------------+----------+---------------------+\n\nmysql> SELECT SYSDATE(), SLEEP(2), SYSDATE();\n+---------------------+----------+---------------------+\n| SYSDATE()           | SLEEP(2) | SYSDATE()           |\n+---------------------+----------+---------------------+\n| 2006-04-12 13:47:44 |        0 | 2006-04-12 13:47:46 |\n+---------------------+----------+---------------------+"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_period-add"], "Title": ["PERIOD_ADD()"], "Feature": ["PERIOD_ADD(P,N)"], "Description": ["Add a period to a year-month", "\nPERIOD_ADD(P,N)\n", "\n          Adds N months to period\n          P (in the format\n          YYMM or\n          YYYYMM). Returns a value in the\n          format YYYYMM.\n", "\n\nNote\n\n\n            The period argument P is\n            not a date value.\n\n", "\n          This function returns NULL if\n          P or N\n          is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT PERIOD_ADD(200801,2);\n        -> 200803"], "Examples": ["mysql> SELECT PERIOD_ADD(200801,2);\n        -> 200803"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_period-diff"], "Title": ["PERIOD_DIFF()"], "Feature": ["PERIOD_DIFF(P1,P2)"], "Description": ["Return the number of months between periods", "\nPERIOD_DIFF(P1,P2)\n", "\n          Returns the number of months between periods\n          P1 and\n          P2. P1\n          and P2 should be in the format\n          YYMM or\n          YYYYMM. Note that the period\n          arguments P1 and\n          P2 are not\n          date values.\n        ", "\n          This function returns NULL if\n          P1 or P2\n          is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT PERIOD_DIFF(200802,200703);\n        -> 11"], "Examples": ["mysql> SELECT PERIOD_DIFF(200802,200703);\n        -> 11"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_quarter"], "Title": ["QUARTER()"], "Feature": ["QUARTER(date)"], "Description": ["Return the quarter from a date argument", "\nQUARTER(date)\n", "\n          Returns the quarter of the year for\n          date, in the range\n          1 to 4, or\n          NULL if date is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT QUARTER('2008-04-01');\n        -> 2"], "Examples": ["mysql> SELECT QUARTER('2008-04-01');\n        -> 2"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_max"], "Title": ["MAX()"], "Feature": ["MAX([DISTINCT]\n            expr)\n            [over_clause]"], "Description": ["Return the maximum value", "\nMAX([DISTINCT]\n            expr)\n            [over_clause]\n", "\n            Returns the maximum value of\n            expr.\n            MAX() may take a string\n            argument; in such cases, it returns the maximum string\n            value. See Section\u00a010.3.1, \u201cHow MySQL Uses Indexes\u201d. The\n            DISTINCT keyword can be used to find the\n            maximum of the distinct values of\n            expr, however, this produces the\n            same result as omitting DISTINCT.\n          ", "\n            If there are no matching rows, or if\n            expr is NULL,\n            MAX() returns\n            NULL.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d; it cannot be used\n            with DISTINCT.\n          ", "Press CTRL+C to copy mysql> SELECT student_name, MIN(test_score), MAX(test_score)\n       FROM student\n       GROUP BY student_name;", "\n            For MAX(), MySQL currently\n            compares ENUM and\n            SET columns by their string\n            value rather than by the string's relative position in the\n            set. This differs from how ORDER BY\n            compares them.\n          "], "Examples": ["mysql> SELECT student_name, MIN(test_score), MAX(test_score)\n       FROM student\n       GROUP BY student_name;"], "Category": ["Aggregate Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_sec-to-time"], "Title": ["SEC_TO_TIME()"], "Feature": ["SEC_TO_TIME(seconds)"], "Description": ["Converts seconds to 'hh:mm:ss' format", "\nSEC_TO_TIME(seconds)\n", "\n          Returns the seconds argument,\n          converted to hours, minutes, and seconds, as a\n          TIME value. The range of the\n          result is constrained to that of the\n          TIME data type. A warning\n          occurs if the argument corresponds to a value outside that\n          range.\n        ", "\n          The function returns NULL if\n          seconds is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT SEC_TO_TIME(2378);\n        -> '00:39:38'\nmysql> SELECT SEC_TO_TIME(2378) + 0;\n        -> 3938"], "Examples": ["mysql> SELECT SEC_TO_TIME(2378);\n        -> '00:39:38'\nmysql> SELECT SEC_TO_TIME(2378) + 0;\n        -> 3938"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_second"], "Title": ["SECOND()"], "Feature": ["SECOND(time)"], "Description": ["Return the second (0-59)", "\nSECOND(time)\n", "\n          Returns the second for time, in the\n          range 0 to 59, or\n          NULL if time is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT SECOND('10:05:03');\n        -> 3"], "Examples": ["mysql> SELECT SECOND('10:05:03');\n        -> 3"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_str-to-date"], "Title": ["STR_TO_DATE()"], "Feature": ["STR_TO_DATE(str,format)"], "Description": ["Convert a string to a date", "\nSTR_TO_DATE(str,format)\n", "\n          This is the inverse of the\n          DATE_FORMAT() function. It\n          takes a string str and a format\n          string format.\n          STR_TO_DATE() returns a\n          DATETIME value if the format\n          string contains both date and time parts, or a\n          DATE or\n          TIME value if the string\n          contains only date or time parts. If\n          str or\n          format is NULL,\n          the function returns NULL. If the date,\n          time, or datetime value extracted from\n          str cannot be parsed according to\n          the rules followed by the server,\n          STR_TO_DATE() returns\n          NULL and produces a warning.\n        ", "\n          The server scans str attempting to\n          match format to it. The format\n          string can contain literal characters and format specifiers\n          beginning with %. Literal characters in\n          format must match literally in\n          str. Format specifiers in\n          format must match a date or time\n          part in str. For the specifiers\n          that can be used in format, see the\n          DATE_FORMAT() function\n          description.\n        ", "Press CTRL+C to copy mysql> SELECT STR_TO_DATE('01,5,2013','%d,%m,%Y');\n        -> '2013-05-01'\nmysql> SELECT STR_TO_DATE('May 1, 2013','%M %d,%Y');\n        -> '2013-05-01'", "\n          Scanning starts at the beginning of\n          str and fails if\n          format is found not to match. Extra\n          characters at the end of str are\n          ignored.\n        ", "Press CTRL+C to copy mysql> SELECT STR_TO_DATE('a09:30:17','a%h:%i:%s');\n        -> '09:30:17'\nmysql> SELECT STR_TO_DATE('a09:30:17','%h:%i:%s');\n        -> NULL\nmysql> SELECT STR_TO_DATE('09:30:17a','%h:%i:%s');\n        -> '09:30:17'", "\n          Unspecified date or time parts have a value of 0, so\n          incompletely specified values in\n          str produce a result with some or\n          all parts set to 0:\n        ", "Press CTRL+C to copy mysql> SELECT STR_TO_DATE('abc','abc');\n        -> '0000-00-00'\nmysql> SELECT STR_TO_DATE('9','%m');\n        -> '0000-09-00'\nmysql> SELECT STR_TO_DATE('9','%s');\n        -> '00:00:09'", "\n          Range checking on the parts of date values is as described in\n          Section\u00a013.2.2, \u201cThe DATE, DATETIME, and TIMESTAMP Types\u201d. This means, for example, that\n          \u201czero\u201d dates or dates with part values of 0 are\n          permitted unless the SQL mode is set to disallow such values.\n        ", "Press CTRL+C to copy mysql> SELECT STR_TO_DATE('00/00/0000', '%m/%d/%Y');\n        -> '0000-00-00'\nmysql> SELECT STR_TO_DATE('04/31/2004', '%m/%d/%Y');\n        -> '2004-04-31'", "\n          If the NO_ZERO_DATE SQL mode\n          is enabled, zero dates are disallowed. In that case,\n          STR_TO_DATE() returns\n          NULL and generates a warning:\n        ", "Press CTRL+C to copy mysql> SET sql_mode = '';\nmysql> SELECT STR_TO_DATE('00/00/0000', '%m/%d/%Y');\n+---------------------------------------+\n| STR_TO_DATE('00/00/0000', '%m/%d/%Y') |\n+---------------------------------------+\n| 0000-00-00                            |\n+---------------------------------------+\nmysql> SET sql_mode = 'NO_ZERO_DATE';\nmysql> SELECT STR_TO_DATE('00/00/0000', '%m/%d/%Y');\n+---------------------------------------+\n| STR_TO_DATE('00/00/0000', '%m/%d/%Y') |\n+---------------------------------------+\n| NULL                                  |\n+---------------------------------------+\nmysql> SHOW WARNINGS\\G\n*************************** 1. row ***************************\n  Level: Warning\n   Code: 1411\nMessage: Incorrect datetime value: '00/00/0000' for function str_to_date", "\n          In some previous versions of MySQL, it was possible to pass an\n          invalid date string such as '2021-11-31' to\n          this function. In MySQL 8.4,\n          STR_TO_DATE() performs complete range\n          checking and raises an error if the date after conversion\n          would be invalid.\n", "\n\nNote\n\n\n            You cannot use format \"%X%V\" to convert a\n            year-week string to a date because the combination of a year\n            and week does not uniquely identify a year and month if the\n            week crosses a month boundary. To convert a year-week to a\n            date, you should also specify the weekday:\n          Press CTRL+C to copy mysql> SELECT STR_TO_DATE('200442 Monday', '%X%V %W');\n        -> '2004-10-18'\n", "\n          You should also be aware that, for dates and the date portions\n          of datetime values, STR_TO_DATE() checks\n          (only) the individual year, month, and day of month values for\n          validity. More precisely, this means that the year is checked\n          to be sure that it is in the range 0-9999 inclusive, the month\n          is checked to ensure that it is in the range 1-12 inclusive,\n          and the day of month is checked to make sure that it is in the\n          range 1-31 inclusive, but the server does not check the values\n          in combination. For example, SELECT\n          STR_TO_DATE('23-2-31', '%Y-%m-%d') returns\n          2023-02-31. Enabling or disabling the\n          ALLOW_INVALID_DATES server\n          SQL mode has no effect on this behavior. See\n          Section\u00a013.2.2, \u201cThe DATE, DATETIME, and TIMESTAMP Types\u201d, for more information.\n        "], "Examples": ["mysql> SELECT STR_TO_DATE('01,5,2013','%d,%m,%Y');\n        -> '2013-05-01'\nmysql> SELECT STR_TO_DATE('May 1, 2013','%M %d,%Y');\n        -> '2013-05-01'", "mysql> SELECT STR_TO_DATE('a09:30:17','a%h:%i:%s');\n        -> '09:30:17'\nmysql> SELECT STR_TO_DATE('a09:30:17','%h:%i:%s');\n        -> NULL\nmysql> SELECT STR_TO_DATE('09:30:17a','%h:%i:%s');\n        -> '09:30:17'", "mysql> SELECT STR_TO_DATE('abc','abc');\n        -> '0000-00-00'\nmysql> SELECT STR_TO_DATE('9','%m');\n        -> '0000-09-00'\nmysql> SELECT STR_TO_DATE('9','%s');\n        -> '00:00:09'", "mysql> SELECT STR_TO_DATE('00/00/0000', '%m/%d/%Y');\n        -> '0000-00-00'\nmysql> SELECT STR_TO_DATE('04/31/2004', '%m/%d/%Y');\n        -> '2004-04-31'", "mysql> SET sql_mode = '';\nmysql> SELECT STR_TO_DATE('00/00/0000', '%m/%d/%Y');\n+---------------------------------------+\n| STR_TO_DATE('00/00/0000', '%m/%d/%Y') |\n+---------------------------------------+\n| 0000-00-00                            |\n+---------------------------------------+\nmysql> SET sql_mode = 'NO_ZERO_DATE';\nmysql> SELECT STR_TO_DATE('00/00/0000', '%m/%d/%Y');\n+---------------------------------------+\n| STR_TO_DATE('00/00/0000', '%m/%d/%Y') |\n+---------------------------------------+\n| NULL                                  |\n+---------------------------------------+\nmysql> SHOW WARNINGS\\G\n*************************** 1. row ***************************\n  Level: Warning\n   Code: 1411\nMessage: Incorrect datetime value: '00/00/0000' for function str_to_date", "mysql> SELECT STR_TO_DATE('200442 Monday', '%X%V %W');\n        -> '2004-10-18'"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_subdate"], "Title": ["SUBDATE()"], "Feature": ["SUBDATE(date,INTERVAL\n          expr\nunit)"], "Description": ["Synonym for DATE_SUB() when invoked with three arguments", "\nSUBDATE(date,INTERVAL\n          expr\nunit),\n          SUBDATE(expr,days)\n", "\n          When invoked with the INTERVAL form of the\n          second argument, SUBDATE() is a\n          synonym for DATE_SUB(). For\n          information on the INTERVAL\nunit argument, see the discussion\n          for DATE_ADD().\n        ", "Press CTRL+C to copy mysql> SELECT DATE_SUB('2008-01-02', INTERVAL 31 DAY);\n        -> '2007-12-02'\nmysql> SELECT SUBDATE('2008-01-02', INTERVAL 31 DAY);\n        -> '2007-12-02'", "\n          The second form enables the use of an integer value for\n          days. In such cases, it is\n          interpreted as the number of days to be subtracted from the\n          date or datetime expression expr.\n        ", "Press CTRL+C to copy mysql> SELECT SUBDATE('2008-01-02 12:00:00', 31);\n        -> '2007-12-02 12:00:00'", "\n          This function returns NULL if any of its\n          arguments are NULL.\n        "], "Examples": ["mysql> SELECT DATE_SUB('2008-01-02', INTERVAL 31 DAY);\n        -> '2007-12-02'\nmysql> SELECT SUBDATE('2008-01-02', INTERVAL 31 DAY);\n        -> '2007-12-02'", "mysql> SELECT SUBDATE('2008-01-02 12:00:00', 31);\n        -> '2007-12-02 12:00:00'"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_subtime"], "Title": ["SUBTIME()"], "Feature": ["SUBTIME(expr1,expr2)"], "Description": ["Subtract times", "\nSUBTIME(expr1,expr2)\n", "\nSUBTIME() returns\n          expr1 \u2212\n          expr2 expressed as a value in the\n          same format as expr1.\n          expr1 is a time or datetime\n          expression, and expr2 is a time\n          expression.\n        ", "\n          Resolution of this function's return type is performed as\n          it is for the ADDTIME()\n          function; see the description of that function for more\n          information.\n        ", "Press CTRL+C to copy mysql> SELECT SUBTIME('2007-12-31 23:59:59.999999','1 1:1:1.000002');\n        -> '2007-12-30 22:58:58.999997'\nmysql> SELECT SUBTIME('01:00:00.999999', '02:00:00.999998');\n        -> '-00:59:59.999999'", "\n          This function returns NULL if\n          expr1 or\n          expr2 is NULL.\n        "], "Examples": ["mysql> SELECT SUBTIME('2007-12-31 23:59:59.999999','1 1:1:1.000002');\n        -> '2007-12-30 22:58:58.999997'\nmysql> SELECT SUBTIME('01:00:00.999999', '02:00:00.999998');\n        -> '-00:59:59.999999'"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_sysdate"], "Title": ["SYSDATE()"], "Feature": ["SYSDATE([fsp])"], "Description": ["Return the time at which the function executes", "\nSYSDATE([fsp])\n", "\n          Returns the current date and time as a value in\n          'YYYY-MM-DD\n          hh:mm:ss' or\n          YYYYMMDDhhmmss format, depending on\n          whether the function is used in string or numeric context.\n        ", "\n          If the fsp argument is given to\n          specify a fractional seconds precision from 0 to 6, the return\n          value includes a fractional seconds part of that many digits.\n        ", "\nSYSDATE() returns the time at\n          which it executes. This differs from the behavior for\n          NOW(), which returns a constant\n          time that indicates the time at which the statement began to\n          execute. (Within a stored function or trigger,\n          NOW() returns the time at which\n          the function or triggering statement began to execute.)\n        ", "Press CTRL+C to copy mysql> SELECT NOW(), SLEEP(2), NOW();\n+---------------------+----------+---------------------+\n| NOW()               | SLEEP(2) | NOW()               |\n+---------------------+----------+---------------------+\n| 2006-04-12 13:47:36 |        0 | 2006-04-12 13:47:36 |\n+---------------------+----------+---------------------+\n\nmysql> SELECT SYSDATE(), SLEEP(2), SYSDATE();\n+---------------------+----------+---------------------+\n| SYSDATE()           | SLEEP(2) | SYSDATE()           |\n+---------------------+----------+---------------------+\n| 2006-04-12 13:47:44 |        0 | 2006-04-12 13:47:46 |\n+---------------------+----------+---------------------+", "\n          In addition, the SET TIMESTAMP statement\n          affects the value returned by\n          NOW() but not by\n          SYSDATE(). This means that\n          timestamp settings in the binary log have no effect on\n          invocations of SYSDATE().\n        ", "\n          Because SYSDATE() can return\n          different values even within the same statement, and is not\n          affected by SET TIMESTAMP, it is\n          nondeterministic and therefore unsafe for replication if\n          statement-based binary logging is used. If that is a problem,\n          you can use row-based logging.\n        ", "\n          Alternatively, you can use the\n          --sysdate-is-now option to\n          cause SYSDATE() to be an alias\n          for NOW(). This works if the\n          option is used on both the replication source server and the\n          replica.\n        ", "\n          The nondeterministic nature of\n          SYSDATE() also means that\n          indexes cannot be used for evaluating expressions that refer\n          to it.\n        "], "Examples": ["mysql> SELECT NOW(), SLEEP(2), NOW();\n+---------------------+----------+---------------------+\n| NOW()               | SLEEP(2) | NOW()               |\n+---------------------+----------+---------------------+\n| 2006-04-12 13:47:36 |        0 | 2006-04-12 13:47:36 |\n+---------------------+----------+---------------------+\n\nmysql> SELECT SYSDATE(), SLEEP(2), SYSDATE();\n+---------------------+----------+---------------------+\n| SYSDATE()           | SLEEP(2) | SYSDATE()           |\n+---------------------+----------+---------------------+\n| 2006-04-12 13:47:44 |        0 | 2006-04-12 13:47:46 |\n+---------------------+----------+---------------------+"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_time"], "Title": ["TIME()"], "Feature": ["TIME(expr)"], "Description": ["Extract the time portion of the expression passed", "\nTIME(expr)\n", "\n          Extracts the time part of the time or datetime expression\n          expr and returns it as a string.\n          Returns NULL if\n          expr is NULL.\n        ", "\n          This function is unsafe for statement-based replication. A\n          warning is logged if you use this function when\n          binlog_format is set to\n          STATEMENT.\n        ", "Press CTRL+C to copy mysql> SELECT TIME('2003-12-31 01:02:03');\n        -> '01:02:03'\nmysql> SELECT TIME('2003-12-31 01:02:03.000123');\n        -> '01:02:03.000123'"], "Examples": ["mysql> SELECT TIME('2003-12-31 01:02:03');\n        -> '01:02:03'\nmysql> SELECT TIME('2003-12-31 01:02:03.000123');\n        -> '01:02:03.000123'"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_time-format"], "Title": ["TIME_FORMAT()"], "Feature": ["TIME_FORMAT(time,format)"], "Description": ["Format as time", "\nTIME_FORMAT(time,format)\n", "\n          This is used like the\n          DATE_FORMAT() function, but the\n          format string may contain format\n          specifiers only for hours, minutes, seconds, and microseconds.\n          Other specifiers produce a NULL or\n          0. TIME_FORMAT() returns\n          NULL if time or\n          format is NULL.\n        ", "\n          If the time value contains an hour\n          part that is greater than 23, the\n          %H and %k hour format\n          specifiers produce a value larger than the usual range of\n          0..23. The other hour format specifiers\n          produce the hour value modulo 12.\n        ", "Press CTRL+C to copy mysql> SELECT TIME_FORMAT('100:00:00', '%H %k %h %I %l');\n        -> '100 100 04 04 4'"], "Examples": ["mysql> SELECT TIME_FORMAT('100:00:00', '%H %k %h %I %l');\n        -> '100 100 04 04 4'"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_time-to-sec"], "Title": ["TIME_TO_SEC()"], "Feature": ["TIME_TO_SEC(time)"], "Description": ["Return the argument converted to seconds", "\nTIME_TO_SEC(time)\n", "\n          Returns the time argument,\n          converted to seconds. Returns NULL if\n          time is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT TIME_TO_SEC('22:23:00');\n        -> 80580\nmysql> SELECT TIME_TO_SEC('00:39:38');\n        -> 2378"], "Examples": ["mysql> SELECT TIME_TO_SEC('22:23:00');\n        -> 80580\nmysql> SELECT TIME_TO_SEC('00:39:38');\n        -> 2378"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_timediff"], "Title": ["TIMEDIFF()"], "Feature": ["TIMEDIFF(expr1,expr2)"], "Description": ["Subtract time", "\nTIMEDIFF(expr1,expr2)\n", "\nTIMEDIFF() returns\n          expr1 \u2212\n          expr2 expressed as a time value.\n          expr1 and\n          expr2 are strings which are\n          converted to TIME or\n          DATETIME expressions; these must be of the\n          same type following conversion. Returns\n          NULL if expr1 or\n          expr2 is NULL.\n        ", "\n          The result returned by TIMEDIFF() is\n          limited to the range allowed for\n          TIME values. Alternatively, you\n          can use either of the functions\n          TIMESTAMPDIFF() and\n          UNIX_TIMESTAMP(), both of which\n          return integers.\n        ", "Press CTRL+C to copy mysql> SELECT TIMEDIFF('2000-01-01 00:00:00',\n    ->                 '2000-01-01 00:00:00.000001');\n        -> '-00:00:00.000001'\nmysql> SELECT TIMEDIFF('2008-12-31 23:59:59.000001',\n    ->                 '2008-12-30 01:01:01.000002');\n        -> '46:58:57.999999'"], "Examples": ["mysql> SELECT TIMEDIFF('2000-01-01 00:00:00',\n    ->                 '2000-01-01 00:00:00.000001');\n        -> '-00:00:00.000001'\nmysql> SELECT TIMEDIFF('2008-12-31 23:59:59.000001',\n    ->                 '2008-12-30 01:01:01.000002');\n        -> '46:58:57.999999'"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_min"], "Title": ["MIN()"], "Feature": ["MIN([DISTINCT]\n            expr)\n            [over_clause]"], "Description": ["Return the minimum value", "\nMIN([DISTINCT]\n            expr)\n            [over_clause]\n", "\n            Returns the minimum value of\n            expr.\n            MIN() may take a string\n            argument; in such cases, it returns the minimum string\n            value. See Section\u00a010.3.1, \u201cHow MySQL Uses Indexes\u201d. The\n            DISTINCT keyword can be used to find the\n            minimum of the distinct values of\n            expr, however, this produces the\n            same result as omitting DISTINCT.\n          ", "\n            If there are no matching rows, or if\n            expr is NULL,\n            MIN() returns\n            NULL.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d; it cannot be used\n            with DISTINCT.\n          ", "Press CTRL+C to copy mysql> SELECT student_name, MIN(test_score), MAX(test_score)\n       FROM student\n       GROUP BY student_name;", "\n            For MIN(), MySQL currently\n            compares ENUM and\n            SET columns by their string\n            value rather than by the string's relative position in the\n            set. This differs from how ORDER BY\n            compares them.\n          "], "Examples": ["mysql> SELECT student_name, MIN(test_score), MAX(test_score)\n       FROM student\n       GROUP BY student_name;"], "Category": ["Aggregate Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_timestamp"], "Title": ["TIMESTAMP()"], "Feature": ["TIMESTAMP(expr)"], "Description": ["With a single argument, this function returns the date or datetime", "\nTIMESTAMP(expr),\n          TIMESTAMP(expr1,expr2)\n", "\n          With a single argument, this function returns the date or\n          datetime expression expr as a\n          datetime value. With two arguments, it adds the time\n          expression expr2 to the date or\n          datetime expression expr1 and\n          returns the result as a datetime value. Returns\n          NULL if expr,\n          expr1, or\n          expr2 is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT TIMESTAMP('2003-12-31');\n        -> '2003-12-31 00:00:00'\nmysql> SELECT TIMESTAMP('2003-12-31 12:00:00','12:00:00');\n        -> '2004-01-01 00:00:00'"], "Examples": ["mysql> SELECT TIMESTAMP('2003-12-31');\n        -> '2003-12-31 00:00:00'\nmysql> SELECT TIMESTAMP('2003-12-31 12:00:00','12:00:00');\n        -> '2004-01-01 00:00:00'"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_timestampadd"], "Title": ["TIMESTAMPADD()"], "Feature": ["TIMESTAMPADD(unit,interval,datetime_expr)"], "Description": ["Add an interval to a datetime expression", "\nTIMESTAMPADD(unit,interval,datetime_expr)\n", "\n          Adds the integer expression\n          interval to the date or datetime\n          expression datetime_expr. The unit\n          for interval is given by the\n          unit argument, which should be one\n          of the following values: MICROSECOND\n          (microseconds), SECOND,\n          MINUTE, HOUR,\n          DAY, WEEK,\n          MONTH, QUARTER, or\n          YEAR.\n        ", "\n          The unit value may be specified\n          using one of keywords as shown, or with a prefix of\n          SQL_TSI_. For example,\n          DAY and SQL_TSI_DAY both\n          are legal.\n        ", "\n          This function returns NULL if\n          interval or\n          datetime_expr is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT TIMESTAMPADD(MINUTE, 1, '2003-01-02');\n        -> '2003-01-02 00:01:00'\nmysql> SELECT TIMESTAMPADD(WEEK,1,'2003-01-02');\n        -> '2003-01-09'", "\n          When adding a MONTH interval to a\n          DATE or DATETIME value,\n          and the resulting date includes a day that does not exist in\n          the given month, the day is adjusted to the last day of the\n          month, as shown here:\n        ", "Press CTRL+C to copy mysql> SELECT TIMESTAMPADD(MONTH, 1, DATE '2024-03-30') AS t1, \n     >        TIMESTAMPADD(MONTH, 1, DATE '2024-03-31') AS t2;\n+------------+------------+\n| t1         | t2         |\n+------------+------------+\n| 2024-04-30 | 2024-04-30 |\n+------------+------------+\n1 row in set (0.00 sec)"], "Examples": ["mysql> SELECT TIMESTAMPADD(MINUTE, 1, '2003-01-02');\n        -> '2003-01-02 00:01:00'\nmysql> SELECT TIMESTAMPADD(WEEK,1,'2003-01-02');\n        -> '2003-01-09'", "mysql> SELECT TIMESTAMPADD(MONTH, 1, DATE '2024-03-30') AS t1, \n     >        TIMESTAMPADD(MONTH, 1, DATE '2024-03-31') AS t2;\n+------------+------------+\n| t1         | t2         |\n+------------+------------+\n| 2024-04-30 | 2024-04-30 |\n+------------+------------+\n1 row in set (0.00 sec)"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_timestampdiff"], "Title": ["TIMESTAMPDIFF()"], "Feature": ["TIMESTAMPDIFF(unit,datetime_expr1,datetime_expr2)"], "Description": ["Return the difference of two datetime expressions, using the units", "\nTIMESTAMPDIFF(unit,datetime_expr1,datetime_expr2)\n", "\n          Returns datetime_expr2 \u2212\n          datetime_expr1, where\n          datetime_expr1 and\n          datetime_expr2 are date or datetime\n          expressions. One expression may be a date and the other a\n          datetime; a date value is treated as a datetime having the\n          time part '00:00:00' where necessary. The\n          unit for the result (an integer) is given by the\n          unit argument. The legal values for\n          unit are the same as those listed\n          in the description of the\n          TIMESTAMPADD() function.\n        ", "\n          This function returns NULL if\n          datetime_expr1 or\n          datetime_expr2 is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT TIMESTAMPDIFF(MONTH,'2003-02-01','2003-05-01');\n        -> 3\nmysql> SELECT TIMESTAMPDIFF(YEAR,'2002-05-01','2001-01-01');\n        -> -1\nmysql> SELECT TIMESTAMPDIFF(MINUTE,'2003-02-01','2003-05-01 12:05:55');\n        -> 128885", "\n\nNote\n\n\n            The order of the date or datetime arguments for this\n            function is the opposite of that used with the\n            TIMESTAMP() function when\n            invoked with 2 arguments.\n\n"], "Examples": ["mysql> SELECT TIMESTAMPDIFF(MONTH,'2003-02-01','2003-05-01');\n        -> 3\nmysql> SELECT TIMESTAMPDIFF(YEAR,'2002-05-01','2001-01-01');\n        -> -1\nmysql> SELECT TIMESTAMPDIFF(MINUTE,'2003-02-01','2003-05-01 12:05:55');\n        -> 128885"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_to-days"], "Title": ["TO_DAYS()"], "Feature": ["TO_DAYS(date)"], "Description": ["Return the date argument converted to days", "\nTO_DAYS(date)\n", "\n          Given a date date, returns a day\n          number (the number of days since year 0). Returns\n          NULL if date is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT TO_DAYS(950501);\n        -> 728779\nmysql> SELECT TO_DAYS('2007-10-07');\n        -> 733321", "\nTO_DAYS() is not intended for\n          use with values that precede the advent of the Gregorian\n          calendar (1582), because it does not take into account the\n          days that were lost when the calendar was changed. For dates\n          before 1582 (and possibly a later year in other locales),\n          results from this function are not reliable. See\n          Section\u00a013.2.7, \u201cWhat Calendar Is Used By MySQL?\u201d, for details.\n        ", "\n          Remember that MySQL converts two-digit year values in dates to\n          four-digit form using the rules in\n          Section\u00a013.2, \u201cDate and Time Data Types\u201d. For example,\n          '2008-10-07' and\n          '08-10-07' are seen as identical dates:\n        ", "Press CTRL+C to copy mysql> SELECT TO_DAYS('2008-10-07'), TO_DAYS('08-10-07');\n        -> 733687, 733687", "\n          In MySQL, the zero date is defined as\n          '0000-00-00', even though this date is\n          itself considered invalid. This means that, for\n          '0000-00-00' and\n          '0000-01-01',\n          TO_DAYS() returns the values\n          shown here:\n        ", "Press CTRL+C to copy mysql> SELECT TO_DAYS('0000-00-00');\n+-----------------------+\n| to_days('0000-00-00') |\n+-----------------------+\n|                  NULL |\n+-----------------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS;\n+---------+------+----------------------------------------+\n| Level   | Code | Message                                |\n+---------+------+----------------------------------------+\n| Warning | 1292 | Incorrect datetime value: '0000-00-00' |\n+---------+------+----------------------------------------+\n1 row in set (0.00 sec)\n\n\nmysql> SELECT TO_DAYS('0000-01-01');\n+-----------------------+\n| to_days('0000-01-01') |\n+-----------------------+\n|                     1 |\n+-----------------------+\n1 row in set (0.00 sec)", "\n          This is true whether or not the\n          ALLOW_INVALID_DATES SQL\n          server mode is enabled.\n        "], "Examples": ["mysql> SELECT TO_DAYS(950501);\n        -> 728779\nmysql> SELECT TO_DAYS('2007-10-07');\n        -> 733321", "mysql> SELECT TO_DAYS('2008-10-07'), TO_DAYS('08-10-07');\n        -> 733687, 733687", "mysql> SELECT TO_DAYS('0000-00-00');\n+-----------------------+\n| to_days('0000-00-00') |\n+-----------------------+\n|                  NULL |\n+-----------------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS;\n+---------+------+----------------------------------------+\n| Level   | Code | Message                                |\n+---------+------+----------------------------------------+\n| Warning | 1292 | Incorrect datetime value: '0000-00-00' |\n+---------+------+----------------------------------------+\n1 row in set (0.00 sec)\n\n\nmysql> SELECT TO_DAYS('0000-01-01');\n+-----------------------+\n| to_days('0000-01-01') |\n+-----------------------+\n|                     1 |\n+-----------------------+\n1 row in set (0.00 sec)"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_to-seconds"], "Title": ["TO_SECONDS()"], "Feature": ["TO_SECONDS(expr)"], "Description": ["Return the date or datetime argument converted to seconds since", "\nTO_SECONDS(expr)\n", "\n          Given a date or datetime expr,\n          returns the number of seconds since the year 0. If\n          expr is not a valid date or\n          datetime value (including NULL), it returns\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT TO_SECONDS(950501);\n        -> 62966505600\nmysql> SELECT TO_SECONDS('2009-11-29');\n        -> 63426672000\nmysql> SELECT TO_SECONDS('2009-11-29 13:43:32');\n        -> 63426721412\nmysql> SELECT TO_SECONDS( NOW() );\n        -> 63426721458", "\n          Like TO_DAYS(),\n          TO_SECONDS() is not intended for use with\n          values that precede the advent of the Gregorian calendar\n          (1582), because it does not take into account the days that\n          were lost when the calendar was changed. For dates before 1582\n          (and possibly a later year in other locales), results from\n          this function are not reliable. See\n          Section\u00a013.2.7, \u201cWhat Calendar Is Used By MySQL?\u201d, for details.\n        ", "\n          Like TO_DAYS(),\n          TO_SECONDS(), converts two-digit year\n          values in dates to four-digit form using the rules in\n          Section\u00a013.2, \u201cDate and Time Data Types\u201d.\n        ", "\n          In MySQL, the zero date is defined as\n          '0000-00-00', even though this date is\n          itself considered invalid. This means that, for\n          '0000-00-00' and\n          '0000-01-01',\n          TO_SECONDS() returns the values\n          shown here:\n        ", "Press CTRL+C to copy mysql> SELECT TO_SECONDS('0000-00-00');\n+--------------------------+\n| TO_SECONDS('0000-00-00') |\n+--------------------------+\n|                     NULL |\n+--------------------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS;\n+---------+------+----------------------------------------+\n| Level   | Code | Message                                |\n+---------+------+----------------------------------------+\n| Warning | 1292 | Incorrect datetime value: '0000-00-00' |\n+---------+------+----------------------------------------+\n1 row in set (0.00 sec)\n\n\nmysql> SELECT TO_SECONDS('0000-01-01');\n+--------------------------+\n| TO_SECONDS('0000-01-01') |\n+--------------------------+\n|                    86400 |\n+--------------------------+\n1 row in set (0.00 sec)", "\n          This is true whether or not the\n          ALLOW_INVALID_DATES SQL\n          server mode is enabled.\n        "], "Examples": ["mysql> SELECT TO_SECONDS(950501);\n        -> 62966505600\nmysql> SELECT TO_SECONDS('2009-11-29');\n        -> 63426672000\nmysql> SELECT TO_SECONDS('2009-11-29 13:43:32');\n        -> 63426721412\nmysql> SELECT TO_SECONDS( NOW() );\n        -> 63426721458", "mysql> SELECT TO_SECONDS('0000-00-00');\n+--------------------------+\n| TO_SECONDS('0000-00-00') |\n+--------------------------+\n|                     NULL |\n+--------------------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS;\n+---------+------+----------------------------------------+\n| Level   | Code | Message                                |\n+---------+------+----------------------------------------+\n| Warning | 1292 | Incorrect datetime value: '0000-00-00' |\n+---------+------+----------------------------------------+\n1 row in set (0.00 sec)\n\n\nmysql> SELECT TO_SECONDS('0000-01-01');\n+--------------------------+\n| TO_SECONDS('0000-01-01') |\n+--------------------------+\n|                    86400 |\n+--------------------------+\n1 row in set (0.00 sec)"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_unix-timestamp"], "Title": ["UNIX_TIMESTAMP()"], "Feature": ["UNIX_TIMESTAMP([date])"], "Description": ["Return a Unix timestamp", "\nUNIX_TIMESTAMP([date])\n", "\n          If UNIX_TIMESTAMP() is called\n          with no date argument, it returns a\n          Unix timestamp representing seconds since '1970-01-01\n          00:00:00' UTC.\n        ", "\n          If UNIX_TIMESTAMP() is called\n          with a date argument, it returns\n          the value of the argument as seconds since\n          '1970-01-01 00:00:00' UTC. The server\n          interprets date as a value in the\n          session time zone and converts it to an internal Unix\n          timestamp value in UTC. (Clients can set the session time zone\n          as described in Section\u00a07.1.15, \u201cMySQL Server Time Zone Support\u201d.) The\n          date argument may be a\n          DATE,\n          DATETIME, or\n          TIMESTAMP string, or a number\n          in YYMMDD,\n          YYMMDDhhmmss,\n          YYYYMMDD, or\n          YYYYMMDDhhmmss format. If the\n          argument includes a time part, it may optionally include a\n          fractional seconds part.\n        ", "\n          The return value is an integer if no argument is given or the\n          argument does not include a fractional seconds part, or\n          DECIMAL if an argument is given\n          that includes a fractional seconds part.\n        ", "\n          When the date argument is a\n          TIMESTAMP column,\n          UNIX_TIMESTAMP() returns the\n          internal timestamp value directly, with no implicit\n          \u201cstring-to-Unix-timestamp\u201d conversion.\n        ", "\n          The valid range of argument values is the same as for the\n          TIMESTAMP data type:\n          '1970-01-01 00:00:01.000000' UTC to\n          '2038-01-19 03:14:07.999999' UTC for 32-bit\n          platforms; for MySQL running on 64-bit platforms, the valid\n          range of argument values for\n          UNIX_TIMESTAMP() is '1970-01-01\n          00:00:01.000000' UTC to '3001-01-19\n          03:14:07.999999' UTC (corresponding to\n          32536771199.999999 seconds).\n        ", "\n          Regardless of MySQL version or platform architecture, if you\n          pass an out-of-range date to\n          UNIX_TIMESTAMP(), it returns\n          0. If date is\n          NULL, it returns NULL.\n        ", "Press CTRL+C to copy mysql> SELECT UNIX_TIMESTAMP();\n        -> 1447431666\nmysql> SELECT UNIX_TIMESTAMP('2015-11-13 10:20:19');\n        -> 1447431619\nmysql> SELECT UNIX_TIMESTAMP('2015-11-13 10:20:19.012');\n        -> 1447431619.012", "\n          If you use UNIX_TIMESTAMP() and\n          FROM_UNIXTIME() to convert\n          between values in a non-UTC time zone and Unix timestamp\n          values, the conversion is lossy because the mapping is not\n          one-to-one in both directions. For example, due to conventions\n          for local time zone changes such as Daylight Saving Time\n          (DST), it is possible for\n          UNIX_TIMESTAMP() to map two\n          values that are distinct in a non-UTC time zone to the same\n          Unix timestamp value.\n          FROM_UNIXTIME() maps that value\n          back to only one of the original values. Here is an example,\n          using values that are distinct in the MET\n          time zone:\n        ", "Press CTRL+C to copy mysql> SET time_zone = 'MET';\nmysql> SELECT UNIX_TIMESTAMP('2005-03-27 03:00:00');\n+---------------------------------------+\n| UNIX_TIMESTAMP('2005-03-27 03:00:00') |\n+---------------------------------------+\n|                            1111885200 |\n+---------------------------------------+\nmysql> SELECT UNIX_TIMESTAMP('2005-03-27 02:00:00');\n+---------------------------------------+\n| UNIX_TIMESTAMP('2005-03-27 02:00:00') |\n+---------------------------------------+\n|                            1111885200 |\n+---------------------------------------+\nmysql> SELECT FROM_UNIXTIME(1111885200);\n+---------------------------+\n| FROM_UNIXTIME(1111885200) |\n+---------------------------+\n| 2005-03-27 03:00:00       |\n+---------------------------+", "\n\nNote\n\n\n            To use named time zones such as 'MET' or\n            'Europe/Amsterdam', the time zone tables\n            must be properly set up. For instructions, see\n            Section\u00a07.1.15, \u201cMySQL Server Time Zone Support\u201d.\n\n", "\n          If you want to subtract\n          UNIX_TIMESTAMP() columns, you\n          might want to cast them to signed integers. See\n          Section\u00a014.10, \u201cCast Functions and Operators\u201d.\n        "], "Examples": ["mysql> SELECT UNIX_TIMESTAMP();\n        -> 1447431666\nmysql> SELECT UNIX_TIMESTAMP('2015-11-13 10:20:19');\n        -> 1447431619\nmysql> SELECT UNIX_TIMESTAMP('2015-11-13 10:20:19.012');\n        -> 1447431619.012", "mysql> SET time_zone = 'MET';\nmysql> SELECT UNIX_TIMESTAMP('2005-03-27 03:00:00');\n+---------------------------------------+\n| UNIX_TIMESTAMP('2005-03-27 03:00:00') |\n+---------------------------------------+\n|                            1111885200 |\n+---------------------------------------+\nmysql> SELECT UNIX_TIMESTAMP('2005-03-27 02:00:00');\n+---------------------------------------+\n| UNIX_TIMESTAMP('2005-03-27 02:00:00') |\n+---------------------------------------+\n|                            1111885200 |\n+---------------------------------------+\nmysql> SELECT FROM_UNIXTIME(1111885200);\n+---------------------------+\n| FROM_UNIXTIME(1111885200) |\n+---------------------------+\n| 2005-03-27 03:00:00       |\n+---------------------------+"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_utc-date"], "Title": ["UTC_DATE()"], "Feature": ["UTC_DATE"], "Description": ["Return the current UTC date", "\nUTC_DATE,\n          UTC_DATE()\n", "\n          Returns the current UTC date as a value in\n          'YYYY-MM-DD' or\n          YYYYMMDD format, depending on\n          whether the function is used in string or numeric context.\n        ", "Press CTRL+C to copy mysql> SELECT UTC_DATE(), UTC_DATE() + 0;\n        -> '2003-08-14', 20030814"], "Examples": ["mysql> SELECT UTC_DATE(), UTC_DATE() + 0;\n        -> '2003-08-14', 20030814"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_utc-time"], "Title": ["UTC_TIME()"], "Feature": ["UTC_TIME"], "Description": ["Return the current UTC time", "\nUTC_TIME,\n          UTC_TIME([fsp])\n", "\n          Returns the current UTC time as a value in\n          'hh:mm:ss' or\n          hhmmss format, depending on whether\n          the function is used in string or numeric context.\n        ", "\n          If the fsp argument is given to\n          specify a fractional seconds precision from 0 to 6, the return\n          value includes a fractional seconds part of that many digits.\n        ", "Press CTRL+C to copy mysql> SELECT UTC_TIME(), UTC_TIME() + 0;\n        -> '18:07:53', 180753.000000"], "Examples": ["mysql> SELECT UTC_TIME(), UTC_TIME() + 0;\n        -> '18:07:53', 180753.000000"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_utc-timestamp"], "Title": ["UTC_TIMESTAMP()"], "Feature": ["UTC_TIMESTAMP"], "Description": ["Return the current UTC date and time", "\nUTC_TIMESTAMP,\n          UTC_TIMESTAMP([fsp])\n", "\n          Returns the current UTC date and time as a value in\n          'YYYY-MM-DD\n          hh:mm:ss' or\n          YYYYMMDDhhmmss format, depending on\n          whether the function is used in string or numeric context.\n        ", "\n          If the fsp argument is given to\n          specify a fractional seconds precision from 0 to 6, the return\n          value includes a fractional seconds part of that many digits.\n        ", "Press CTRL+C to copy mysql> SELECT UTC_TIMESTAMP(), UTC_TIMESTAMP() + 0;\n        -> '2003-08-14 18:08:04', 20030814180804.000000"], "Examples": ["mysql> SELECT UTC_TIMESTAMP(), UTC_TIMESTAMP() + 0;\n        -> '2003-08-14 18:08:04', 20030814180804.000000"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_week"], "Title": ["WEEK()"], "Feature": ["WEEK(date[,mode])"], "Description": ["Return the week number", "\nWEEK(date[,mode])\n", "\n          This function returns the week number for\n          date. The two-argument form of\n          WEEK() enables you to specify\n          whether the week starts on Sunday or Monday and whether the\n          return value should be in the range from 0\n          to 53 or from 1 to\n          53. If the mode\n          argument is omitted, the value of the\n          default_week_format system\n          variable is used. See\n          Section\u00a07.1.8, \u201cServer System Variables\u201d. For a\n          NULL date value, the function returns\n          NULL.\n        ", "\n          The following table describes how the\n          mode argument works.\n", "\n\nMode\nFirst day of week\nRange\nWeek 1 is the first week \u2026\n\n0\nSunday\n0-53\nwith a Sunday in this year\n\n1\nMonday\n0-53\nwith 4 or more days this year\n\n2\nSunday\n1-53\nwith a Sunday in this year\n\n3\nMonday\n1-53\nwith 4 or more days this year\n\n4\nSunday\n0-53\nwith 4 or more days this year\n\n5\nMonday\n0-53\nwith a Monday in this year\n\n6\nSunday\n1-53\nwith 4 or more days this year\n\n7\nMonday\n1-53\nwith a Monday in this year\n\n", "\n          For mode values with a meaning of\n          \u201cwith 4 or more days this year,\u201d weeks are\n          numbered according to ISO 8601:1988:\n", "\n\n              If the week containing January 1 has 4 or more days in the\n              new year, it is week 1.\n            \n              Otherwise, it is the last week of the previous year, and\n              the next week is week 1.\n\n", "Press CTRL+C to copy mysql> SELECT WEEK('2008-02-20');\n        -> 7\nmysql> SELECT WEEK('2008-02-20',0);\n        -> 7\nmysql> SELECT WEEK('2008-02-20',1);\n        -> 8\nmysql> SELECT WEEK('2008-12-31',1);\n        -> 53", "\n          If a date falls in the last week of the previous year, MySQL\n          returns 0 if you do not use\n          2, 3,\n          6, or 7 as the optional\n          mode argument:\n        ", "Press CTRL+C to copy mysql> SELECT YEAR('2000-01-01'), WEEK('2000-01-01',0);\n        -> 2000, 0", "\n          One might argue that WEEK()\n          should return 52 because the given date\n          actually occurs in the 52nd week of 1999.\n          WEEK() returns\n          0 instead so that the return value is\n          \u201cthe week number in the given year.\u201d This makes\n          use of the WEEK() function\n          reliable when combined with other functions that extract a\n          date part from a date.\n        ", "\n          If you prefer a result evaluated with respect to the year that\n          contains the first day of the week for the given date, use\n          0, 2,\n          5, or 7 as the optional\n          mode argument.\n        ", "Press CTRL+C to copy mysql> SELECT WEEK('2000-01-01',2);\n        -> 52", "\n          Alternatively, use the\n          YEARWEEK() function:\n        ", "Press CTRL+C to copy mysql> SELECT YEARWEEK('2000-01-01');\n        -> 199952\nmysql> SELECT MID(YEARWEEK('2000-01-01'),5,2);\n        -> '52'"], "Examples": ["mysql> SELECT WEEK('2008-02-20');\n        -> 7\nmysql> SELECT WEEK('2008-02-20',0);\n        -> 7\nmysql> SELECT WEEK('2008-02-20',1);\n        -> 8\nmysql> SELECT WEEK('2008-12-31',1);\n        -> 53", "mysql> SELECT YEAR('2000-01-01'), WEEK('2000-01-01',0);\n        -> 2000, 0", "mysql> SELECT WEEK('2000-01-01',2);\n        -> 52", "mysql> SELECT YEARWEEK('2000-01-01');\n        -> 199952\nmysql> SELECT MID(YEARWEEK('2000-01-01'),5,2);\n        -> '52'"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_group-concat"], "Title": ["GROUP_CONCAT()"], "Feature": ["GROUP_CONCAT(expr)"], "Description": ["Return a concatenated string", "\nGROUP_CONCAT(expr)\n", "\n            This function returns a string result with the concatenated\n            non-NULL values from a group. It returns\n            NULL if there are no\n            non-NULL values. The full syntax is as\n            follows:\n          ", "Press CTRL+C to copy GROUP_CONCAT([DISTINCT] expr [,expr ...]\n             [ORDER BY {unsigned_integer | col_name | expr}\n                 [ASC | DESC] [,col_name ...]]\n             [SEPARATOR str_val])", "Press CTRL+C to copy mysql> SELECT student_name,\n         GROUP_CONCAT(test_score)\n       FROM student\n       GROUP BY student_name;", "\n            Or:\n          ", "Press CTRL+C to copy mysql> SELECT student_name,\n         GROUP_CONCAT(DISTINCT test_score\n                      ORDER BY test_score DESC SEPARATOR ' ')\n       FROM student\n       GROUP BY student_name;", "\n            In MySQL, you can get the concatenated values of expression\n            combinations. To eliminate duplicate values, use the\n            DISTINCT clause. To sort values in the\n            result, use the ORDER BY clause. To sort\n            in reverse order, add the DESC\n            (descending) keyword to the name of the column you are\n            sorting by in the ORDER BY clause. The\n            default is ascending order; this may be specified explicitly\n            using the ASC keyword. The default\n            separator between values in a group is comma\n            (,). To specify a separator explicitly,\n            use SEPARATOR followed by the string\n            literal value that should be inserted between group values.\n            To eliminate the separator altogether, specify\n            SEPARATOR ''.\n          ", "\n            The result is truncated to the maximum length that is given\n            by the group_concat_max_len\n            system variable, which has a default value of 1024. The\n            value can be set higher, although the effective maximum\n            length of the return value is constrained by the value of\n            max_allowed_packet. The\n            syntax to change the value of\n            group_concat_max_len at\n            runtime is as follows, where val\n            is an unsigned integer:\n          ", "Press CTRL+C to copy SET [GLOBAL | SESSION] group_concat_max_len = val;", "\n            The return value is a nonbinary or binary string, depending\n            on whether the arguments are nonbinary or binary strings.\n            The result type is TEXT or\n            BLOB unless\n            group_concat_max_len is\n            less than or equal to 512, in which case the result type is\n            VARCHAR or\n            VARBINARY.\n          ", "\n            If GROUP_CONCAT() is invoked\n            from within the mysql client, binary\n            string results display using hexadecimal notation, depending\n            on the value of the\n            --binary-as-hex. For more\n            information about that option, see Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n          ", "\n            See also CONCAT() and\n            CONCAT_WS():\n            Section\u00a014.8, \u201cString Functions and Operators\u201d.\n          "], "Examples": ["mysql> SELECT student_name,\n         GROUP_CONCAT(test_score)\n       FROM student\n       GROUP BY student_name;", "mysql> SELECT student_name,\n         GROUP_CONCAT(DISTINCT test_score\n                      ORDER BY test_score DESC SEPARATOR ' ')\n       FROM student\n       GROUP BY student_name;", "SET [GLOBAL | SESSION] group_concat_max_len = val;"], "Category": ["Aggregate Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_weekday"], "Title": ["WEEKDAY()"], "Feature": ["WEEKDAY(date)"], "Description": ["Return the weekday index", "\nWEEKDAY(date)\n", "\n          Returns the weekday index for date\n          (0 = Monday, 1 =\n          Tuesday, \u2026 6 = Sunday). Returns\n          NULL if date is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT WEEKDAY('2008-02-03 22:23:00');\n        -> 6\nmysql> SELECT WEEKDAY('2007-11-06');\n        -> 1"], "Examples": ["mysql> SELECT WEEKDAY('2008-02-03 22:23:00');\n        -> 6\nmysql> SELECT WEEKDAY('2007-11-06');\n        -> 1"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_weekofyear"], "Title": ["WEEKOFYEAR()"], "Feature": ["WEEKOFYEAR(date)"], "Description": ["Return the calendar week of the date (1-53)", "\nWEEKOFYEAR(date)\n", "\n          Returns the calendar week of the date as a number in the range\n          from 1 to 53. Returns\n          NULL if date is\n          NULL.\n        ", "\nWEEKOFYEAR() is a compatibility\n          function that is equivalent to\n          WEEK(date,3).\n        ", "Press CTRL+C to copy mysql> SELECT WEEKOFYEAR('2008-02-20');\n        -> 8"], "Examples": ["mysql> SELECT WEEKOFYEAR('2008-02-20');\n        -> 8"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_year"], "Title": ["YEAR()"], "Feature": ["YEAR(date)"], "Description": ["Return the year", "\nYEAR(date)\n", "\n          Returns the year for date, in the\n          range 1000 to 9999, or\n          0 for the \u201czero\u201d date. Returns\n          NULL if date is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT YEAR('1987-01-01');\n        -> 1987"], "Examples": ["mysql> SELECT YEAR('1987-01-01');\n        -> 1987"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_yearweek"], "Title": ["YEARWEEK()"], "Feature": ["YEARWEEK(date)"], "Description": ["Return the year and week", "\nYEARWEEK(date),\n          YEARWEEK(date,mode)\n", "\n          Returns year and week for a date. The year in the result may\n          be different from the year in the date argument for the first\n          and the last week of the year. Returns NULL\n          if date is NULL.\n        ", "\n          The mode argument works exactly\n          like the mode argument to\n          WEEK(). For the single-argument\n          syntax, a mode value of 0 is used.\n          Unlike WEEK(), the value of\n          default_week_format does not\n          influence YEARWEEK().\n        ", "Press CTRL+C to copy mysql> SELECT YEARWEEK('1987-01-01');\n        -> 198652", "\n          The week number is different from what the\n          WEEK() function would return\n          (0) for optional arguments\n          0 or 1, as\n          WEEK() then returns the week in\n          the context of the given year.\n"], "Examples": ["mysql> SELECT YEARWEEK('1987-01-01');\n        -> 198652"], "Category": ["Date and Time Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/encryption-and-compression-functions#aes_decrypt"], "Title": ["AES_DECRYPT()"], "Feature": ["AES_DECRYPT()"], "Description": ["AES_DECRYPT()", "AES_DECRYPT(data, key [,iv]) \u51fd\u6570\u4f7f\u7528\u76f8\u540c\u7684 key \u89e3\u5bc6\u4e4b\u524d\u7531 AES_ENCRYPT() \u51fd\u6570\u52a0\u5bc6\u7684 data\u3002", "\u4f60\u53ef\u4ee5\u4f7f\u7528\u7cfb\u7edf\u53d8\u91cf block_encryption_mode \u9009\u62e9\u9ad8\u7ea7\u52a0\u5bc6\u6807\u51c6 (AES) \u52a0\u5bc6\u6a21\u5f0f\u3002", "\u5bf9\u4e8e\u9700\u8981\u521d\u59cb\u5316\u5411\u91cf\u7684\u52a0\u5bc6\u6a21\u5f0f\uff0c\u4f7f\u7528 iv \u53c2\u6570\u8bbe\u7f6e\u3002\u9ed8\u8ba4\u503c\u4e3a NULL\u3002", "SELECT AES_DECRYPT(0x28409970815CD536428876175F1A4923, 'secret');\n", "+----------------------------------------------------------------------------------------------------------------------+\n| AES_DECRYPT(0x28409970815CD536428876175F1A4923, 'secret')                                                            |\n+----------------------------------------------------------------------------------------------------------------------+\n| 0x616263                                                                                                             |\n+----------------------------------------------------------------------------------------------------------------------+\n1 row in set (0.00 sec)\n"], "Examples": ["SELECT AES_DECRYPT(0x28409970815CD536428876175F1A4923, 'secret');\n"], "Category": ["Encryption and Compression Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/encryption-and-compression-functions#aes_encrypt"], "Title": ["AES_ENCRYPT()"], "Feature": ["AES_ENCRYPT()"], "Description": ["AES_ENCRYPT()", "AES_ENCRYPT(data, key [,iv]) \u51fd\u6570\u4f7f\u7528\u9ad8\u7ea7\u52a0\u5bc6\u6807\u51c6 (AES) \u7b97\u6cd5\u548c key \u52a0\u5bc6 data\u3002", "\u4f60\u53ef\u4ee5\u4f7f\u7528\u7cfb\u7edf\u53d8\u91cf block_encryption_mode \u9009\u62e9 AES \u52a0\u5bc6\u6a21\u5f0f\u3002", "\u5bf9\u4e8e\u9700\u8981\u521d\u59cb\u5316\u5411\u91cf\u7684\u52a0\u5bc6\u6a21\u5f0f\uff0c\u4f7f\u7528 iv \u53c2\u6570\u8bbe\u7f6e\u3002\u9ed8\u8ba4\u503c\u4e3a NULL\u3002", "SELECT AES_ENCRYPT(0x616263,'secret');\n", "+----------------------------------------------------------------+\n| AES_ENCRYPT(0x616263,'secret')                                 |\n+----------------------------------------------------------------+\n| 0x28409970815CD536428876175F1A4923                             |\n+----------------------------------------------------------------+\n1 row in set (0.00 sec)\n"], "Examples": ["SELECT AES_ENCRYPT(0x616263,'secret');\n"], "Category": ["Encryption and Compression Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/encryption-and-compression-functions#compress"], "Title": ["COMPRESS()"], "Feature": ["COMPRESS()"], "Description": ["COMPRESS()", "COMPRESS(expr) \u51fd\u6570\u8fd4\u56de\u8f93\u5165\u53c2\u6570 expr \u7684\u538b\u7f29\u7248\u672c\u3002", "\u5982\u679c\u8f93\u5165\u53c2\u6570\u4e3a NULL\uff0c\u8be5\u51fd\u6570\u8fd4\u56de NULL\u3002\u5982\u679c\u8f93\u5165\u53c2\u6570\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u8be5\u51fd\u6570\u8fd4\u56de\u96f6\u957f\u5ea6\u503c\u3002", "\u5bf9\u4e8e\u975e\u96f6\u957f\u5ea6\u8f93\u5165\u53c2\u6570\uff0c\u51fd\u6570\u8fd4\u56de\u5177\u6709\u4ee5\u4e0b\u7ed3\u6784\u7684\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\uff1a", "\u5b57\u8282 0 \u5230 3\uff1a\u672a\u538b\u7f29\u957f\u5ea6\u5b57\u8282 4 \u5230\u7ed3\u5c3e\uff1azlib \u538b\u7f29\u6570\u636e", "SELECT COMPRESS(0x414243);\n", "+------------------------------------------+\n| COMPRESS(0x414243)                       |\n+------------------------------------------+\n| 0x03000000789C72747206040000FFFF018D00C7 |\n+------------------------------------------+\n1 row in set (0.00 sec)\n", "\u5728\u6b64\u8f93\u51fa\u4e2d\uff0c0x03000000 \u8868\u793a\u672a\u538b\u7f29\u957f\u5ea6 (3)\uff0c0x789C72747206040000FFFF018D00C7 \u662f zlib \u538b\u7f29\u6570\u636e\u3002"], "Examples": ["SELECT COMPRESS(0x414243);\n", "WITH x AS (SELECT REPEAT('a',100) 'a')\nSELECT LENGTH(a),LENGTH(COMPRESS(a)) FROM x;\n"], "Category": ["Encryption and Compression Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/encryption-and-compression-functions#md5"], "Title": ["MD5()"], "Feature": ["MD5()"], "Description": ["MD5()", "MD5(expr) \u51fd\u6570\u4e3a\u7ed9\u5b9a\u53c2\u6570 expr \u8ba1\u7b97 128 \u4f4d MD5 \u54c8\u5e0c\u503c\u3002", "SELECT MD5('abc');\n", "+----------------------------------+\n| MD5('abc')                       |\n+----------------------------------+\n| 900150983cd24fb0d6963f7d28e17f72 |\n+----------------------------------+\n1 row in set (0.00 sec)\n"], "Examples": ["SELECT MD5('abc');\n"], "Category": ["Encryption and Compression Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/encryption-and-compression-functions#password"], "Title": ["PASSWORD()"], "Feature": ["PASSWORD()"], "Description": ["PASSWORD()", ".css-1weqspv{padding-top:0.5rem;padding-bottom:0.5rem;}.css-1weqspv .MuiAlert-message p{margin-bottom:0px;margin-top:0px;}", "\u8b66\u544aPASSWORD() \u51fd\u6570\u5728 MySQL 5.7 \u4e2d\u5df2\u5f03\u7528\uff0c\u5728 MySQL 8.0 \u4e2d\u5df2\u5220\u9664\uff0c\u5728 TiDB \u4e2d\u4e5f\u5df2\u5f03\u7528\u3002\u4e0d\u5efa\u8bae\u4f7f\u7528\u6b64\u51fd\u6570\u3002", "PASSWORD(str) \u51fd\u6570\u8ba1\u7b97\u53ef\u7528\u4e8e mysql_native_password \u8ba4\u8bc1\u65b9\u6cd5\u7684\u5bc6\u7801\u54c8\u5e0c\u3002", "SELECT PASSWORD('secret');\n", "+-------------------------------------------+\n| PASSWORD('secret')                        |\n+-------------------------------------------+\n| *14E65567ABDB5135D0CFD9A70B3032C179A49EE7 |\n+-------------------------------------------+\n1 row in set, 1 warning (0.00 sec)\n\nWarning (Code 1681): PASSWORD is deprecated and will be removed in a future release.\n"], "Examples": ["SELECT PASSWORD('secret');\n"], "Category": ["Encryption and Compression Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/encryption-and-compression-functions#random_bytes"], "Title": ["RANDOM_BYTES()"], "Feature": ["RANDOM_BYTES()"], "Description": ["RANDOM_BYTES()", "RANDOM_BYTES(n) \u51fd\u6570\u8fd4\u56de n \u4e2a\u968f\u673a\u5b57\u8282\u3002", "SELECT RANDOM_BYTES(3);\n", "+----------------------------------+\n| RANDOM_BYTES(3)                  |\n+----------------------------------+\n| 0x1DBC0D                         |\n+----------------------------------+\n1 row in set (0.00 sec)\n"], "Examples": ["SELECT RANDOM_BYTES(3);\n"], "Category": ["Encryption and Compression Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_var-pop"], "Title": ["VAR_POP()"], "Feature": ["VAR_POP(expr)\n            [over_clause]"], "Description": ["Return the population standard variance", "\nVAR_POP(expr)\n            [over_clause]\n", "\n            Returns the population standard variance of\n            expr. It considers rows as the\n            whole population, not as a sample, so it has the number of\n            rows as the denominator. You can also use\n            VARIANCE(), which is\n            equivalent but is not standard SQL.\n          ", "\n            If there are no matching rows, or if\n            expr is NULL,\n            VAR_POP() returns\n            NULL.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          "], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/encryption-and-compression-functions#sha"], "Title": ["SHA()"], "Feature": ["SHA()"], "Description": ["SHA()", "SHA() \u51fd\u6570\u662f SHA1 \u7684\u522b\u540d\u3002"], "Examples": [], "Category": ["Encryption and Compression Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/encryption-and-compression-functions#sha1"], "Title": ["SHA1()"], "Feature": ["SHA1()"], "Description": ["SHA1()", "SHA1(expr) \u51fd\u6570\u4e3a\u7ed9\u5b9a\u53c2\u6570 expr \u8ba1\u7b97 160 \u4f4d SHA-1 \u54c8\u5e0c\u503c\u3002", "SELECT SHA1('abc');\n", "+------------------------------------------+\n| SHA1('abc')                              |\n+------------------------------------------+\n| a9993e364706816aba3e25717850c26c9cd0d89d |\n+------------------------------------------+\n1 row in set (0.00 sec)\n"], "Examples": ["SELECT SHA1('abc');\n"], "Category": ["Encryption and Compression Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/encryption-and-compression-functions#sha2"], "Title": ["SHA2()"], "Feature": ["SHA2()"], "Description": ["SHA2()", "SHA2(str, n) \u51fd\u6570\u4f7f\u7528 SHA-2 \u7cfb\u5217\u4e2d\u7684\u7b97\u6cd5\u8ba1\u7b97\u54c8\u5e0c\u503c\u3002\u53c2\u6570 n \u7528\u4e8e\u9009\u62e9\u7b97\u6cd5\u3002\u5982\u679c\u4efb\u4e00\u53c2\u6570\u4e3a NULL \u6216 n \u6307\u5b9a\u7684\u7b97\u6cd5\u672a\u77e5\u6216\u4e0d\u53d7\u652f\u6301\uff0cSHA2() \u8fd4\u56de NULL\u3002", "\u4ee5\u4e0b\u5217\u51fa\u652f\u6301\u7684\u7b97\u6cd5\uff1a", "n\u7b97\u6cd50SHA-256224SHA-224256SHA-256384SHA-384512SHA-512", "SELECT SHA2('abc',224);\n", "+----------------------------------------------------------+\n| SHA2('abc',224)                                          |\n+----------------------------------------------------------+\n| 23097d223405d8228642a477bda255b32aadbce4bda0b3f7e36c9da7 |\n+----------------------------------------------------------+\n1 row in set (0.00 sec)\n"], "Examples": ["SELECT SHA2('abc',224);\n"], "Category": ["Encryption and Compression Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/encryption-and-compression-functions#sm3"], "Title": ["SM3()"], "Feature": ["SM3()"], "Description": ["SM3()", "\u6ce8\u610fSM3() \u51fd\u6570\u662f TiDB \u6269\u5c55\uff0c\u672a\u5728 MySQL \u4e2d\u5b9e\u73b0\u3002", "SM3(str) \u51fd\u6570\u4e3a\u7ed9\u5b9a\u53c2\u6570 str \u8ba1\u7b97 256 \u4f4d ShangMi 3 (SM3) \u54c8\u5e0c\u503c\u3002", "SELECT SM3('abc');\n", "+------------------------------------------------------------------+\n| SM3('abc')                                                       |\n+------------------------------------------------------------------+\n| 66c7f0f462eeedd9d1f2d46bdc10e4e24167c4875cf2f7a2297da02b8f4ba8e0 |\n+------------------------------------------------------------------+\n1 row in set (0.00 sec)\n"], "Examples": ["SELECT SM3('abc');\n"], "Category": ["Encryption and Compression Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/encryption-and-compression-functions#uncompress"], "Title": ["UNCOMPRESS()"], "Feature": ["UNCOMPRESS()"], "Description": ["UNCOMPRESS()", "UNCOMPRESS(data) \u51fd\u6570\u89e3\u538b\u7f29\u4f7f\u7528 COMPRESS() \u51fd\u6570\u538b\u7f29\u7684\u6570\u636e\u3002", "SELECT UNCOMPRESS(0x03000000789C72747206040000FFFF018D00C7);\n", "+------------------------------------------------------------------------------------------------------------+\n| UNCOMPRESS(0x03000000789C72747206040000FFFF018D00C7)                                                       |\n+------------------------------------------------------------------------------------------------------------+\n| 0x414243                                                                                                   |\n+------------------------------------------------------------------------------------------------------------+\n1 row in set (0.00 sec)\n"], "Examples": ["SELECT UNCOMPRESS(0x03000000789C72747206040000FFFF018D00C7);\n"], "Category": ["Encryption and Compression Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/encryption-and-compression-functions#uncompressed_length"], "Title": ["UNCOMPRESSED_LENGTH()"], "Feature": ["UNCOMPRESSED_LENGTH()"], "Description": ["UNCOMPRESSED_LENGTH()", "UNCOMPRESSED_LENGTH(data) \u51fd\u6570\u8fd4\u56de\u538b\u7f29\u6570\u636e\u7684\u524d 4 \u4e2a\u5b57\u8282\uff0c\u5373\u5b57\u7b26\u4e32\u5728\u4f7f\u7528 COMPRESS() \u51fd\u6570\u538b\u7f29\u4e4b\u524d\u7684\u957f\u5ea6\u3002", "SELECT UNCOMPRESSED_LENGTH(0x03000000789C72747206040000FFFF018D00C7);\n", "+---------------------------------------------------------------+\n| UNCOMPRESSED_LENGTH(0x03000000789C72747206040000FFFF018D00C7) |\n+---------------------------------------------------------------+\n|                                                             3 |\n+---------------------------------------------------------------+\n1 row in set (0.00 sec)\n"], "Examples": ["SELECT UNCOMPRESSED_LENGTH(0x03000000789C72747206040000FFFF018D00C7);\n"], "Category": ["Encryption and Compression Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/encryption-and-compression-functions#validate_password_strength"], "Title": ["VALIDATE_PASSWORD_STRENGTH()"], "Feature": ["VALIDATE_PASSWORD_STRENGTH()"], "Description": ["VALIDATE_PASSWORD_STRENGTH()", "VALIDATE_PASSWORD_STRENGTH(str) \u51fd\u6570\u7528\u4f5c TiDB \u5bc6\u7801\u7ba1\u7406\u7684\u4e00\u90e8\u5206\uff0c\u5b83\u8ba1\u7b97\u5bc6\u7801\u7684\u5f3a\u5ea6\u5e76\u8fd4\u56de\u4e00\u4e2a 0 \u5230 100 \u4e4b\u95f4\u7684\u6574\u6570\u503c\u3002", "validate_password.* \u7cfb\u7edf\u53d8\u91cf\u5f71\u54cd VALIDATE_PASSWORD_STRENGTH() \u51fd\u6570\u7684\u884c\u4e3a\u3002"], "Examples": [], "Category": ["Encryption and Compression Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/control-flow-functions#case"], "Title": ["CASE"], "Feature": ["CASE"], "Description": ["CASE", "CASE \u64cd\u4f5c\u7b26\u53ef\u4ee5\u6839\u636e\u6307\u5b9a\u7684\u6761\u4ef6\u8fdb\u884c\u6761\u4ef6\u903b\u8f91\u5224\u65ad\u5e76\u81ea\u5b9a\u4e49\u67e5\u8be2\u7ed3\u679c\u3002", "\u8bed\u6cd5\uff1a", "CASE\n    WHEN condition1 THEN result1\n    WHEN condition2 THEN result2\n    ...\n    ELSE default_result\nEND\n"], "Examples": ["WITH RECURSIVE d AS (SELECT 1 AS n UNION ALL SELECT n+1 FROM d WHERE n<10)\nSELECT n, CASE WHEN n MOD 2 THEN \"odd\" ELSE \"even\" END FROM d;\n"], "Category": ["Flow Control Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/control-flow-functions#if"], "Title": ["IF()"], "Feature": ["IF()"], "Description": ["IF()", "IF() \u51fd\u6570\u53ef\u4ee5\u6839\u636e\u503c\u6216\u8868\u8fbe\u5f0f\u662f\u5426\u4e3a\u771f\u6267\u884c\u4e0d\u540c\u7684\u64cd\u4f5c\u3002", "\u8bed\u6cd5\uff1a", "IF(condition, value_if_true, value_if_false)\n"], "Examples": ["WITH RECURSIVE d AS (SELECT 1 AS n UNION ALL SELECT n+1 FROM d WHERE n<10)\nSELECT n, IF(n MOD 2, \"odd\", \"even\") FROM d;\n"], "Category": ["Flow Control Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/control-flow-functions#ifnull"], "Title": ["IFNULL()"], "Feature": ["IFNULL()"], "Description": ["IFNULL()", "IFNULL(expr1,expr2) \u51fd\u6570\u7528\u4e8e\u5904\u7406\u67e5\u8be2\u4e2d\u7684 NULL \u503c\u3002\u5982\u679c expr1 \u4e0d\u4e3a NULL\uff0c\u8be5\u51fd\u6570\u8fd4\u56de expr1\uff1b\u5426\u5219\u8fd4\u56de expr2\u3002"], "Examples": ["WITH data AS (SELECT NULL AS x UNION ALL SELECT 1 )\nSELECT x, IFNULL(x,'x has no value') FROM data;\n"], "Category": ["Flow Control Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_std"], "Title": ["STD()"], "Feature": ["STD(expr)\n            [over_clause]"], "Description": ["Return the population standard deviation", "\nSTD(expr)\n            [over_clause]\n", "\n            Returns the population standard deviation of\n            expr.\n            STD() is a synonym for the\n            standard SQL function\n            STDDEV_POP(), provided as a\n            MySQL extension.\n          ", "\n            If there are no matching rows, or if\n            expr is NULL,\n            STD() returns\n            NULL.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          "], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/control-flow-functions#nullif"], "Title": ["NULLIF()"], "Feature": ["NULLIF()"], "Description": ["NULLIF()", "NULLIF(expr1,expr2) \u51fd\u6570\u7528\u4e8e\u5728\u4e24\u4e2a\u53c2\u6570\u76f8\u540c\u6216\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a NULL \u65f6\u8fd4\u56de NULL\u3002\u5426\u5219\uff0c\u8fd4\u56de\u7b2c\u4e00\u4e2a\u53c2\u6570\u3002"], "Examples": ["WITH RECURSIVE d AS (SELECT 1 AS n UNION ALL SELECT n+1 FROM d WHERE n<10)\nSELECT n, NULLIF(n+n, n+2) FROM d;\n"], "Category": ["Flow Control Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/information-functions#benchmark"], "Title": ["BENCHMARK()"], "Feature": ["BENCHMARK()"], "Description": ["BENCHMARK()", "BENCHMARK() \u51fd\u6570\u53ef\u4ee5\u6309\u7167\u6307\u5b9a\u7684\u6b21\u6570\u91cd\u590d\u6267\u884c\u7ed9\u5b9a\u7684\u8868\u8fbe\u5f0f\u3002", "\u8bed\u6cd5\uff1a", "BENCHMARK(count, expression)\n", "count\uff1a\u8981\u6267\u884c\u8868\u8fbe\u5f0f\u7684\u6b21\u6570\u3002expression\uff1a\u8981\u91cd\u590d\u6267\u884c\u7684\u8868\u8fbe\u5f0f\u3002"], "Examples": ["SELECT BENCHMARK(5, SLEEP(2));\n"], "Category": ["Information Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/information-functions#connection_id"], "Title": ["CONNECTION_ID()"], "Feature": ["CONNECTION_ID()"], "Description": ["CONNECTION_ID()", "CONNECTION_ID() \u51fd\u6570\u8fd4\u56de\u8fde\u63a5\u7684 ID\u3002\u6839\u636e TiDB \u7684 enable-32bits-connection-id \u914d\u7f6e\u9879\u7684\u503c\u4e0d\u540c\uff0c\u8be5\u51fd\u6570\u5c06\u8fd4\u56de\u4e00\u4e2a 32 \u4f4d\u6216 64 \u4f4d\u7684\u8fde\u63a5 ID\u3002", "\u5982\u679c\u542f\u7528\u4e86 enable-global-kill\uff0c\u8fde\u63a5\u7684 ID \u53ef\u7528\u4e8e\u5728\u540c\u4e00\u96c6\u7fa4\u7684\u591a\u4e2a TiDB \u5b9e\u4f8b\u4e2d\u7ec8\u6b62\u67e5\u8be2\u3002", "SELECT CONNECTION_ID();\n", "+-----------------+\n| CONNECTION_ID() |\n+-----------------+\n|       322961414 |\n+-----------------+\n1 row in set (0.00 sec)\n"], "Examples": ["SELECT CONNECTION_ID();\n"], "Category": ["Information Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/information-functions#current_role"], "Title": ["CURRENT_ROLE()"], "Feature": ["CURRENT_ROLE()"], "Description": ["CURRENT_ROLE()", "CURRENT_ROLE() \u51fd\u6570\u8fd4\u56de\u5f53\u524d\u4f1a\u8bdd\u7684\u5f53\u524d\u89d2\u8272\u3002", "SELECT CURRENT_ROLE();\n", "+----------------+\n| CURRENT_ROLE() |\n+----------------+\n| NONE           |\n+----------------+\n1 row in set (0.00 sec)\n"], "Examples": ["SELECT CURRENT_ROLE();\n"], "Category": ["Information Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/information-functions#current_user"], "Title": ["CURRENT_USER()"], "Feature": ["CURRENT_USER()"], "Description": ["CURRENT_USER()", "CURRENT_USER() \u51fd\u6570\u8fd4\u56de\u5f53\u524d\u4f1a\u8bdd\u4e2d\u4f7f\u7528\u7684\u8d26\u6237\u3002", "SELECT CURRENT_USER();\n", "+----------------+\n| CURRENT_USER() |\n+----------------+\n| root@%         |\n+----------------+\n1 row in set (0.00 sec)\n"], "Examples": ["SELECT CURRENT_USER();\n"], "Category": ["Information Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/information-functions#database"], "Title": ["DATABASE()"], "Feature": ["DATABASE()"], "Description": ["DATABASE()", "DATABASE() \u51fd\u6570\u8fd4\u56de\u5f53\u524d\u4f1a\u8bdd\u6b63\u5728\u4f7f\u7528\u7684\u6570\u636e\u5e93\u540d\u3002", "SELECT DATABASE();\n", "+------------+\n| DATABASE() |\n+------------+\n| test       |\n+------------+\n1 row in set (0.00 sec)\n"], "Examples": ["SELECT DATABASE();\n"], "Category": ["Information Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/information-functions#found_rows"], "Title": ["FOUND_ROWS()"], "Feature": ["FOUND_ROWS()"], "Description": ["FOUND_ROWS()", "FOUND_ROWS() \u51fd\u6570\u8fd4\u56de\u4e0a\u4e00\u6761\u6267\u884c\u7684 SELECT \u8bed\u53e5\u7684\u7ed3\u679c\u96c6\u4e2d\u7684\u884c\u6570\u3002", "SELECT 1 UNION ALL SELECT 2;\n", "+------+\n| 1    |\n+------+\n|    2 |\n|    1 |\n+------+\n2 rows in set (0.01 sec)\n", "SELECT FOUND_ROWS();\n", "+--------------+\n| FOUND_ROWS() |\n+--------------+\n|            2 |\n+--------------+\n1 row in set (0.00 sec)\n", ".css-1weqspv{padding-top:0.5rem;padding-bottom:0.5rem;}.css-1weqspv .MuiAlert-message p{margin-bottom:0px;margin-top:0px;}", "\u6ce8\u610fSQL_CALC_FOUND_ROWS \u67e5\u8be2\u4fee\u9970\u7b26\u7528\u4e8e\u8ba1\u7b97\u5728\u6ca1\u6709 LIMIT \u5b50\u53e5\u7684\u60c5\u51b5\u4e0b\u7ed3\u679c\u96c6\u4e2d\u7684\u603b\u884c\u6570\uff0c\u53ea\u6709\u5728\u542f\u7528\u4e86 tidb_enable_noop_functions \u65f6\u624d\u80fd\u4f7f\u7528\u3002\u4ece MySQL 8.0.17 \u5f00\u59cb\uff0c\u8be5\u67e5\u8be2\u4fee\u9970\u7b26\u5df2\u5e9f\u5f03\u3002\u5efa\u8bae\u4f7f\u7528 COUNT(*) \u4ee3\u66ff\u3002"], "Examples": ["SELECT 1 UNION ALL SELECT 2;\n", "SELECT FOUND_ROWS();\n"], "Category": ["Information Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/information-functions#last_insert_id"], "Title": ["LAST_INSERT_ID()"], "Feature": ["LAST_INSERT_ID()"], "Description": ["LAST_INSERT_ID()", "LAST_INSERT_ID() \u51fd\u6570\u8fd4\u56de\u5305\u542b AUTO_INCREMENT \u6216 AUTO_RANDOM \u5217\u7684\u8868\u4e2d\u6700\u540e\u63d2\u5165\u884c\u7684 ID\u3002", "CREATE TABLE t1(id SERIAL);\nQuery OK, 0 rows affected (0.17 sec)\n\nINSERT INTO t1() VALUES();\nQuery OK, 1 row affected (0.03 sec)\n\nINSERT INTO t1() VALUES();\nQuery OK, 1 row affected (0.00 sec)\n\nSELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                3 |\n+------------------+\n1 row in set (0.00 sec)\n\nTABLE t1;\n+----+\n| id |\n+----+\n|  1 |\n|  3 |\n+----+\n2 rows in set (0.00 sec)\n"], "Examples": ["CREATE TABLE t1(id SERIAL);\nQuery OK, 0 rows affected (0.17 sec)\n\nINSERT INTO t1() VALUES();\nQuery OK, 1 row affected (0.03 sec)\n\nINSERT INTO t1() VALUES();\nQuery OK, 1 row affected (0.00 sec)\n\nSELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                3 |\n+------------------+\n1 row in set (0.00 sec)\n\nTABLE t1;\n+----+\n| id |\n+----+\n|  1 |\n|  3 |\n+----+\n2 rows in set (0.00 sec)\n"], "Category": ["Information Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/information-functions#row_count"], "Title": ["ROW_COUNT()"], "Feature": ["ROW_COUNT()"], "Description": ["ROW_COUNT()", "ROW_COUNT() \u51fd\u6570\u8fd4\u56de\u53d7\u5f71\u54cd\u7684\u884c\u6570\u3002", "CREATE TABLE t1(id BIGINT UNSIGNED PRIMARY KEY AUTO_RANDOM);\nQuery OK, 0 rows affected, 1 warning (0.16 sec)\n\nINSERT INTO t1() VALUES (),(),();\nQuery OK, 3 rows affected (0.02 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n\nSELECT ROW_COUNT();\n+-------------+\n| ROW_COUNT() |\n+-------------+\n|           3 |\n+-------------+\n1 row in set (0.00 sec)\n"], "Examples": ["CREATE TABLE t1(id BIGINT UNSIGNED PRIMARY KEY AUTO_RANDOM);\nQuery OK, 0 rows affected, 1 warning (0.16 sec)\n\nINSERT INTO t1() VALUES (),(),();\nQuery OK, 3 rows affected (0.02 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n\nSELECT ROW_COUNT();\n+-------------+\n| ROW_COUNT() |\n+-------------+\n|           3 |\n+-------------+\n1 row in set (0.00 sec)\n"], "Category": ["Information Functions"]}
{"HTML": ["https://docs.pingcap.com/zh/tidb/stable/information-functions#schema"], "Title": ["SCHEMA()"], "Feature": ["SCHEMA()"], "Description": ["SCHEMA()", "SCHEMA() \u51fd\u6570\u4e0e DATABASE() \u540c\u4e49\u3002"], "Examples": [], "Category": ["Information Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_var-samp"], "Title": ["VAR_SAMP()"], "Feature": ["VAR_SAMP(expr)\n            [over_clause]"], "Description": ["Return the sample variance", "\nVAR_SAMP(expr)\n            [over_clause]\n", "\n            Returns the sample variance of\n            expr. That is, the denominator is\n            the number of rows minus one.\n          ", "\n            If there are no matching rows, or if\n            expr is NULL,\n            VAR_SAMP() returns\n            NULL.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          "], "Examples": [], "Category": ["Aggregate Functions"]}
