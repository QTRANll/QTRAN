{"HTML": ["https://mariadb.com/kb/en/tinyint/"], "Title": ["TINYINT"], "Feature": ["TINYINT[(M)] [SIGNED | UNSIGNED | ZEROFILL]\n"], "Description": ["A very small integer. The signed range is -128 to 127. The unsigned range is 0 to 255. For details on the attributes, see Numeric Data Type Overview.", "INT1 is a synonym for TINYINT. BOOL and BOOLEAN are synonyms for TINYINT(1)."], "Examples": ["CREATE TABLE tinyints (a TINYINT,b TINYINT UNSIGNED,c TINYINT ZEROFILL);\n", "INSERT INTO tinyints VALUES (-10,-10,-10);\nERROR 1264 (22003): Out of range value for column 'b' at row 1\n\nINSERT INTO tinyints VALUES (-10,10,-10);\nERROR 1264 (22003): Out of range value for column 'c' at row 1\n\nINSERT INTO tinyints VALUES (-10,10,10);\n\nSELECT * FROM tinyints;\n+------+------+------+\n| a    | b    | c    |\n+------+------+------+\n|  -10 |   10 |  010 |\n+------+------+------+\n\nINSERT INTO tinyints VALUES (128,128,128);\nERROR 1264 (22003): Out of range value for column 'a' at row 1\n\nINSERT INTO tinyints VALUES (127,128,128);\n\nSELECT * FROM tinyints;\n+------+------+------+\n| a    | b    | c    |\n+------+------+------+\n|  -10 |   10 |  010 |\n|  127 |  128 |  128 |\n+------+------+------+\n", "INSERT INTO tinyints VALUES (-10,-10,-10);\nQuery OK, 1 row affected, 2 warnings (0.08 sec)\nWarning (Code 1264): Out of range value for column 'b' at row 1\nWarning (Code 1264): Out of range value for column 'c' at row 1\n\nINSERT INTO tinyints VALUES (-10,10,-10);\nQuery OK, 1 row affected, 1 warning (0.11 sec)\nWarning (Code 1264): Out of range value for column 'c' at row 1\n\nINSERT INTO tinyints VALUES (-10,10,10);\n\nSELECT * FROM tinyints;\n+------+------+------+\n| a    | b    | c    |\n+------+------+------+\n|  -10 |    0 |  000 |\n|  -10 |   10 |  000 |\n|  -10 |   10 |  010 |\n+------+------+------+\n\nINSERT INTO tinyints VALUES (128,128,128);\nQuery OK, 1 row affected, 1 warning (0.19 sec)\nWarning (Code 1264): Out of range value for column 'a' at row 1\n\nINSERT INTO tinyints VALUES (127,128,128);\n\nSELECT * FROM tinyints;\n+------+------+------+\n| a    | b    | c    |\n+------+------+------+\n|  -10 |    0 |  000 |\n|  -10 |   10 |  000 |\n|  -10 |   10 |  010 |\n|  127 |  128 |  128 |\n|  127 |  128 |  128 |\n+------+------+------+\n"], "Category": ["Numeric Data Types"]}
{"HTML": ["https://mariadb.com/kb/en/boolean/"], "Title": ["BOOLEAN"], "Feature": ["BOOL, BOOLEAN\n"], "Description": ["These types are synonyms for TINYINT(1). \nA value of zero is considered false. Non-zero values are considered true.", "However, the values TRUE and FALSE are merely aliases for 1 and 0. See Boolean Literals, as well as the IS operator for testing values against a boolean."], "Examples": ["CREATE TABLE boo (i BOOLEAN);\n\nDESC boo;\n+-------+------------+------+-----+---------+-------+\n| Field | Type       | Null | Key | Default | Extra |\n+-------+------------+------+-----+---------+-------+\n| i     | tinyint(1) | YES  |     | NULL    |       |\n+-------+------------+------+-----+---------+-------+\n", "SELECT IF(0, 'true', 'false');\n+------------------------+\n| IF(0, 'true', 'false') |\n+------------------------+\n| false                  |\n+------------------------+\n\nSELECT IF(1, 'true', 'false');\n+------------------------+\n| IF(1, 'true', 'false') |\n+------------------------+\n| true                   |\n+------------------------+\n\nSELECT IF(2, 'true', 'false');\n+------------------------+\n| IF(2, 'true', 'false') |\n+------------------------+\n| true                   |\n+------------------------+\n", "SELECT IF(0 = FALSE, 'true', 'false');\n\n+--------------------------------+\n| IF(0 = FALSE, 'true', 'false') |\n+--------------------------------+\n| true                           |\n+--------------------------------+\n\nSELECT IF(1 = TRUE, 'true', 'false');\n+-------------------------------+\n| IF(1 = TRUE, 'true', 'false') |\n+-------------------------------+\n| true                          |\n+-------------------------------+\n\nSELECT IF(2 = TRUE, 'true', 'false');\n+-------------------------------+\n| IF(2 = TRUE, 'true', 'false') |\n+-------------------------------+\n| false                         |\n+-------------------------------+\n\nSELECT IF(2 = FALSE, 'true', 'false');\n+--------------------------------+\n| IF(2 = FALSE, 'true', 'false') |\n+--------------------------------+\n| false                          |\n+--------------------------------+\n"], "Category": ["Numeric Data Types"]}
{"HTML": ["https://mariadb.com/kb/en/double/"], "Title": ["DOUBLE"], "Feature": ["DOUBLE[(M,D)] [SIGNED | UNSIGNED | ZEROFILL]\nDOUBLE PRECISION[(M,D)] [SIGNED | UNSIGNED | ZEROFILL]\nREAL[(M,D)] [SIGNED | UNSIGNED | ZEROFILL]\n"], "Description": ["A normal-size (double-precision) floating-point number (see FLOAT for a single-precision floating-point number).", "Allowable values are:", "-1.7976931348623157E+308 to -2.2250738585072014E-308\n0\n2.2250738585072014E-308 to 1.7976931348623157E+308\n", "These are the theoretical limits, based on the IEEE standard. The actual range\nmight be slightly smaller depending on your hardware or operating system.", "M is the total number of digits and D is the number of digits\nfollowing the decimal point. If M and D are omitted, values are stored\nto the limits allowed by the hardware. A double-precision\nfloating-point number is accurate to approximately 15 decimal places.", "UNSIGNED, if specified, disallows negative values.", "ZEROFILL, if specified, pads the number with zeros, up to the total number\nof digits specified by M.", "REAL and DOUBLE PRECISION are synonyms, unless the REAL_AS_FLOAT SQL mode is enabled, in which case REAL is a synonym for FLOAT rather than DOUBLE.", "See Floating Point Accuracy for issues when using floating-point numbers.", "For more details on the attributes, see Numeric Data Type Overview."], "Examples": ["CREATE TABLE t1 (d DOUBLE(5,0) zerofill);\n\nINSERT INTO t1 VALUES (1),(2),(3),(4);\n\nSELECT * FROM t1;\n+-------+\n| d     |\n+-------+\n| 00001 |\n| 00002 |\n| 00003 |\n| 00004 |\n+-------+\n"], "Category": ["Numeric Data Types"]}
{"HTML": ["https://mariadb.com/kb/en/double-precision/"], "Title": ["DOUBLE PRECISION"], "Feature": ["DOUBLE PRECISION[(M,D)] [SIGNED | UNSIGNED | ZEROFILL]\nREAL[(M,D)] [SIGNED | UNSIGNED | ZEROFILL]\n"], "Description": ["REAL and DOUBLE PRECISION are synonyms for DOUBLE. ", "Exception: If the REAL_AS_FLOAT SQL mode is enabled, \nREAL is a synonym for FLOAT rather than \nDOUBLE."], "Examples": [], "Category": ["Numeric Data Types"]}
{"HTML": ["https://mariadb.com/kb/en/bit/"], "Title": ["BIT"], "Feature": ["BIT[(M)]\n"], "Description": ["A bit-field type. M indicates the number of bits per value, from 1 to\n64. The default is 1 if M is omitted.", "Bit values can be inserted with b'value' notation, where value is the bit value in 0's and 1's.", "Bit fields are automatically zero-padded from the left to the full length of the bit, so for example in a BIT(4) field, '10' is equivalent to '0010'.", "Bits are returned as binary, so to display them, either add 0, or use a function such as HEX, OCT or BIN to convert them."], "Examples": ["CREATE TABLE b ( b1 BIT(8) );\n", "INSERT INTO b VALUES (b'11111111');\n\nINSERT INTO b VALUES (b'01010101');\n\nINSERT INTO b VALUES (b'1111111111111');\nERROR 1406 (22001): Data too long for column 'b1' at row 1\n\nSELECT b1+0, HEX(b1), OCT(b1), BIN(b1) FROM b;\n+------+---------+---------+----------+\n| b1+0 | HEX(b1) | OCT(b1) | BIN(b1)  |\n+------+---------+---------+----------+\n|  255 | FF      | 377     | 11111111 |\n|   85 | 55      | 125     | 1010101  |\n+------+---------+---------+----------+\n", "INSERT INTO b VALUES (b'11111111'),(b'01010101'),(b'1111111111111');\nQuery OK, 3 rows affected, 1 warning (0.10 sec)\nRecords: 3  Duplicates: 0  Warnings: 1\n\nSHOW WARNINGS;\n+---------+------+---------------------------------------------+\n| Level   | Code | Message                                     |\n+---------+------+---------------------------------------------+\n| Warning | 1264 | Out of range value for column 'b1' at row 3 |\n+---------+------+---------------------------------------------+\n\nSELECT b1+0, HEX(b1), OCT(b1), BIN(b1) FROM b;\n+------+---------+---------+----------+\n| b1+0 | HEX(b1) | OCT(b1) | BIN(b1)  |\n+------+---------+---------+----------+\n|  255 | FF      | 377     | 11111111 |\n|   85 | 55      | 125     | 1010101  |\n|  255 | FF      | 377     | 11111111 |\n+------+---------+---------+----------+\n"], "Category": ["Numeric Data Types"]}
{"HTML": ["https://mariadb.com/kb/en/floating-point-accuracy/"], "Title": ["Floating-point Accuracy"], "Feature": [], "Description": [], "Examples": ["CREATE TABLE fpn (id INT, f1 FLOAT, f2 DOUBLE, f3 DECIMAL (10,3));\nINSERT INTO fpn VALUES (1,2,2,2),(2,0.1,0.1,0.1);\n\nSELECT * FROM fpn WHERE f1*f1 = f2*f2;\n+------+------+------+-------+\n| id   | f1   | f2   | f3    |\n+------+------+------+-------+\n|    1 |    2 |    2 | 2.000 |\n+------+------+------+-------+\n", "SELECT f1*f1, f2*f2, f3*f3 FROM fpn;\n+----------------------+----------------------+----------+\n| f1*f1                | f2*f2                | f3*f3    |\n+----------------------+----------------------+----------+\n|                    4 |                    4 | 4.000000 |\n| 0.010000000298023226 | 0.010000000000000002 | 0.010000 |\n+----------------------+----------------------+----------+\n"], "Category": ["Numeric Data Types"]}
{"HTML": ["https://mariadb.com/kb/en/smallint/"], "Title": ["SMALLINT"], "Feature": ["SMALLINT[(M)] [SIGNED | UNSIGNED | ZEROFILL]\n"], "Description": ["A small integer. The signed range is -32768 to 32767. The unsigned range is 0 to 65535.", "If a column has been set to ZEROFILL, all values will be prepended by zeros so that the SMALLINT value contains a number of M digits.", "Note: If the ZEROFILL attribute has been specified, the column will automatically become UNSIGNED.", "INT2 is a synonym for SMALLINT.", "For more details on the attributes, see Numeric Data Type Overview."], "Examples": ["CREATE TABLE smallints (a SMALLINT,b SMALLINT UNSIGNED,c SMALLINT ZEROFILL);\n", "INSERT INTO smallints VALUES (-10,-10,-10);\nERROR 1264 (22003): Out of range value for column 'b' at row 1\n\nINSERT INTO smallints VALUES (-10,10,-10);\nERROR 1264 (22003): Out of range value for column 'c' at row 1\n\nINSERT INTO smallints VALUES (-10,10,10);\n\nINSERT INTO smallints VALUES (32768,32768,32768);\nERROR 1264 (22003): Out of range value for column 'a' at row 1\n\nINSERT INTO smallints VALUES (32767,32768,32768);\n\nSELECT * FROM smallints;\n+-------+-------+-------+\n| a     | b     | c     |\n+-------+-------+-------+\n|   -10 |    10 | 00010 |\n| 32767 | 32768 | 32768 |\n+-------+-------+-------+\n", "INSERT INTO smallints VALUES (-10,-10,-10);\nQuery OK, 1 row affected, 2 warnings (0.09 sec)\nWarning (Code 1264): Out of range value for column 'b' at row 1\nWarning (Code 1264): Out of range value for column 'c' at row 1\n\nINSERT INTO smallints VALUES (-10,10,-10);\nQuery OK, 1 row affected, 1 warning (0.08 sec)\nWarning (Code 1264): Out of range value for column 'c' at row 1\n\nINSERT INTO smallints VALUES (-10,10,10);\n\nINSERT INTO smallints VALUES (32768,32768,32768);\nQuery OK, 1 row affected, 1 warning (0.04 sec)\nWarning (Code 1264): Out of range value for column 'a' at row 1\n\nINSERT INTO smallints VALUES (32767,32768,32768);\n\nSELECT * FROM smallints;\n+-------+-------+-------+\n| a     | b     | c     |\n+-------+-------+-------+\n|   -10 |     0 | 00000 |\n|   -10 |    10 | 00000 |\n|   -10 |    10 | 00010 |\n| 32767 | 32768 | 32768 |\n| 32767 | 32768 | 32768 |\n+-------+-------+-------+\n"], "Category": ["Numeric Data Types"]}
{"HTML": ["https://mariadb.com/kb/en/mediumint/"], "Title": ["MEDIUMINT"], "Feature": ["MEDIUMINT[(M)] [SIGNED | UNSIGNED | ZEROFILL]\n"], "Description": ["A medium-sized integer. The signed range is -8388608 to 8388607. The\nunsigned range is 0 to 16777215.", "ZEROFILL pads the integer with zeroes and assumes UNSIGNED (even if UNSIGNED is not specified).", "INT3 is a synonym for MEDIUMINT.", "For details on the attributes, see Numeric Data Type Overview."], "Examples": ["CREATE TABLE mediumints (a MEDIUMINT,b MEDIUMINT UNSIGNED,c MEDIUMINT ZEROFILL);\n\nDESCRIBE mediumints;\n+-------+--------------------------------+------+-----+---------+-------+\n| Field | Type                           | Null | Key | Default | Extra |\n+-------+--------------------------------+------+-----+---------+-------+\n| a     | mediumint(9)                   | YES  |     | NULL    |       |\n| b     | mediumint(8) unsigned          | YES  |     | NULL    |       |\n| c     | mediumint(8) unsigned zerofill | YES  |     | NULL    |       |\n+-------+--------------------------------+------+-----+---------+-------+\n", "INSERT INTO mediumints VALUES (-10,-10,-10);\nERROR 1264 (22003): Out of range value for column 'b' at row 1\n\nINSERT INTO mediumints VALUES (-10,10,-10);\nERROR 1264 (22003): Out of range value for column 'c' at row 1\n\nINSERT INTO mediumints VALUES (-10,10,10);\n\nINSERT INTO mediumints VALUES (8388608,8388608,8388608);\nERROR 1264 (22003): Out of range value for column 'a' at row 1\n\nINSERT INTO mediumints VALUES (8388607,8388608,8388608);\n\nSELECT * FROM mediumints;\n+---------+---------+----------+\n| a       | b       | c        |\n+---------+---------+----------+\n|     -10 |      10 | 00000010 |\n| 8388607 | 8388608 | 08388608 |\n+---------+---------+----------+\n", "INSERT INTO mediumints VALUES (-10,-10,-10);\nQuery OK, 1 row affected, 2 warnings (0.05 sec)\nWarning (Code 1264): Out of range value for column 'b' at row 1\nWarning (Code 1264): Out of range value for column 'c' at row 1\n\nINSERT INTO mediumints VALUES (-10,10,-10);\nQuery OK, 1 row affected, 1 warning (0.08 sec)\nWarning (Code 1264): Out of range value for column 'c' at row 1\n\nINSERT INTO mediumints VALUES (-10,10,10);\n\nINSERT INTO mediumints VALUES (8388608,8388608,8388608);\nQuery OK, 1 row affected, 1 warning (0.05 sec)\nWarning (Code 1264): Out of range value for column 'a' at row 1\n\nINSERT INTO mediumints VALUES (8388607,8388608,8388608);\n\nSELECT * FROM mediumints;\n+---------+---------+----------+\n| a       | b       | c        |\n+---------+---------+----------+\n|     -10 |       0 | 00000000 |\n|     -10 |       0 | 00000000 |\n|     -10 |      10 | 00000000 |\n|     -10 |      10 | 00000010 |\n| 8388607 | 8388608 | 08388608 |\n| 8388607 | 8388608 | 08388608 |\n+---------+---------+----------+\n"], "Category": ["Numeric Data Types"]}
{"HTML": ["https://mariadb.com/kb/en/int/"], "Title": ["INT"], "Feature": ["INT[(M)] [SIGNED | UNSIGNED | ZEROFILL]\nINTEGER[(M)] [SIGNED | UNSIGNED | ZEROFILL]\n"], "Description": ["A normal-size integer. When marked UNSIGNED, it ranges from 0 to 4294967295, otherwise its range is -2147483648 to 2147483647 (SIGNED is the default). If a column has been set to ZEROFILL, all values will be prepended by zeros so that the INT value contains a number of M digits. INTEGER is a synonym for INT.", "Note: If the ZEROFILL attribute has been specified, the column will automatically become UNSIGNED.", "INT4 is a synonym for INT.", "For details on the attributes, see Numeric Data Type Overview."], "Examples": ["CREATE TABLE ints (a INT,b INT UNSIGNED,c INT ZEROFILL);\n", "INSERT INTO ints VALUES (-10,-10,-10);\nERROR 1264 (22003): Out of range value for column 'b' at row 1\n\nINSERT INTO ints VALUES (-10,10,-10);\nERROR 1264 (22003): Out of range value for column 'c' at row 1\n\nINSERT INTO ints VALUES (-10,10,10);\n\nINSERT INTO ints VALUES (2147483648,2147483648,2147483648);\nERROR 1264 (22003): Out of range value for column 'a' at row 1\n\nINSERT INTO ints VALUES (2147483647,2147483648,2147483648);\n\nSELECT * FROM ints;\n+------------+------------+------------+\n| a          | b          | c          |\n+------------+------------+------------+\n|        -10 |         10 | 0000000010 |\n| 2147483647 | 2147483648 | 2147483648 |\n+------------+------------+------------+\n", "INSERT INTO ints VALUES (-10,-10,-10);\nQuery OK, 1 row affected, 2 warnings (0.10 sec)\nWarning (Code 1264): Out of range value for column 'b' at row 1\nWarning (Code 1264): Out of range value for column 'c' at row 1\n\nINSERT INTO ints VALUES (-10,10,-10);\nQuery OK, 1 row affected, 1 warning (0.08 sec)\nWarning (Code 1264): Out of range value for column 'c' at row 1\n\nINSERT INTO ints VALUES (-10,10,10);\n\nINSERT INTO ints VALUES (2147483648,2147483648,2147483648);\nQuery OK, 1 row affected, 1 warning (0.07 sec)\nWarning (Code 1264): Out of range value for column 'a' at row 1\n\nINSERT INTO ints VALUES (2147483647,2147483648,2147483648);\n\nSELECT * FROM ints;\n+------------+------------+------------+\n| a          | b          | c          |\n+------------+------------+------------+\n|        -10 |          0 | 0000000000 |\n|        -10 |         10 | 0000000000 |\n|        -10 |         10 | 0000000010 |\n| 2147483647 | 2147483648 | 2147483648 |\n| 2147483647 | 2147483648 | 2147483648 |\n+------------+------------+------------+\n"], "Category": ["Numeric Data Types"]}
{"HTML": ["https://mariadb.com/kb/en/integer/"], "Title": ["INTEGER"], "Feature": ["INTEGER[(M)] [SIGNED | UNSIGNED | ZEROFILL]\n"], "Description": ["This type is a synonym for INT."], "Examples": [], "Category": ["Numeric Data Types"]}
{"HTML": ["https://mariadb.com/kb/en/bigint/"], "Title": ["BIGINT"], "Feature": ["BIGINT[(M)] [SIGNED | UNSIGNED | ZEROFILL]\n"], "Description": ["A large integer. The signed range is -9223372036854775808 to\n9223372036854775807. The unsigned range is 0 to\n18446744073709551615.", "If a column has been set to ZEROFILL, all values will be prepended by zeros so that the BIGINT value contains a number of M digits.", "Note: If the ZEROFILL attribute has been specified, the column will automatically become UNSIGNED.", "For more details on the attributes, see Numeric Data Type Overview.", "SERIAL is an alias for:", "BIGINT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE\n", "INT8 is a synonym for BIGINT."], "Examples": ["CREATE TABLE bigints (a BIGINT,b BIGINT UNSIGNED,c BIGINT ZEROFILL);\n", "INSERT INTO bigints VALUES (-10,-10,-10);\nERROR 1264 (22003): Out of range value for column 'b' at row 1\n\nINSERT INTO bigints VALUES (-10,10,-10);\nERROR 1264 (22003): Out of range value for column 'c' at row 1\n\nINSERT INTO bigints VALUES (-10,10,10);\n\nINSERT INTO bigints VALUES (9223372036854775808,9223372036854775808,9223372036854775808);\nERROR 1264 (22003): Out of range value for column 'a' at row 1\n\nINSERT INTO bigints VALUES (9223372036854775807,9223372036854775808,9223372036854775808);\n\nSELECT * FROM bigints;\n+---------------------+---------------------+----------------------+\n| a                   | b                   | c                    |\n+---------------------+---------------------+----------------------+\n|                 -10 |                  10 | 00000000000000000010 |\n| 9223372036854775807 | 9223372036854775808 | 09223372036854775808 |\n+---------------------+---------------------+----------------------+\n", "INSERT INTO bigints VALUES (-10,-10,-10);\nQuery OK, 1 row affected, 2 warnings (0.08 sec)\nWarning (Code 1264): Out of range value for column 'b' at row 1\nWarning (Code 1264): Out of range value for column 'c' at row 1\n\nINSERT INTO bigints VALUES (-10,10,-10);\nQuery OK, 1 row affected, 1 warning (0.08 sec)\nWarning (Code 1264): Out of range value for column 'c' at row 1\n\nINSERT INTO bigints VALUES (-10,10,10);\n\nINSERT INTO bigints VALUES (9223372036854775808,9223372036854775808,9223372036854775808);\nQuery OK, 1 row affected, 1 warning (0.07 sec)\nWarning (Code 1264): Out of range value for column 'a' at row 1\n\nINSERT INTO bigints VALUES (9223372036854775807,9223372036854775808,9223372036854775808);\n\nSELECT * FROM bigints;\n+---------------------+---------------------+----------------------+\n| a                   | b                   | c                    |\n+---------------------+---------------------+----------------------+\n|                 -10 |                   0 | 00000000000000000000 |\n|                 -10 |                  10 | 00000000000000000000 |\n|                 -10 |                  10 | 00000000000000000010 |\n| 9223372036854775807 | 9223372036854775808 | 09223372036854775808 |\n| 9223372036854775807 | 9223372036854775808 | 09223372036854775808 |\n+---------------------+---------------------+----------------------+\n"], "Category": ["Numeric Data Types"]}
{"HTML": ["https://mariadb.com/kb/en/decimal/"], "Title": ["DECIMAL"], "Feature": ["DECIMAL[(M[,D])] [SIGNED | UNSIGNED | ZEROFILL]\n"], "Description": ["A packed \"exact\" fixed-point number. M is the total number of digits (the\nprecision) and D is the number of digits after the decimal point (the\nscale). ", "The decimal point and (for negative numbers) the \"-\" sign are not\ncounted in M. \nIf D is 0, values have no decimal point or fractional\npart and on INSERT the value will be rounded to the nearest DECIMAL. \nThe maximum number of digits (M) for DECIMAL is 65. \nThe maximum number of supported decimals (D) is 30 before MariadB 10.2.1 and 38 afterwards. \nIf D is omitted, the default is 0. If M is omitted, the default is 10.\n", "UNSIGNED, if specified, disallows negative values.", "ZEROFILL, if specified, pads the number with zeros, up to the total number\nof digits specified by M.", "All basic calculations (+, -, *, /) with DECIMAL columns are done with\na precision of 65 digits.", "For more details on the attributes, see Numeric Data Type Overview.", "DEC, NUMERIC and FIXED are synonyms, as well as NUMBER in Oracle mode from MariaDB 10.3."], "Examples": ["CREATE TABLE t1 (d DECIMAL UNSIGNED ZEROFILL);\n\nINSERT INTO t1 VALUES (1),(2),(3),(4.0),(5.2),(5.7);\nQuery OK, 6 rows affected, 2 warnings (0.16 sec)\nRecords: 6  Duplicates: 0  Warnings: 2\n\nNote (Code 1265): Data truncated for column 'd' at row 5\nNote (Code 1265): Data truncated for column 'd' at row 6\n\nSELECT * FROM t1;\n+------------+\n| d          |\n+------------+\n| 0000000001 |\n| 0000000002 |\n| 0000000003 |\n| 0000000004 |\n| 0000000005 |\n| 0000000006 |\n+------------+\n", "INSERT INTO t1 VALUES (-7);\nERROR 1264 (22003): Out of range value for column 'd' at row 1\n", "INSERT INTO t1 VALUES (-7);\nQuery OK, 1 row affected, 1 warning (0.02 sec)\nWarning (Code 1264): Out of range value for column 'd' at row 1\n\nSELECT * FROM t1;\n+------------+\n| d          |\n+------------+\n| 0000000001 |\n| 0000000002 |\n| 0000000003 |\n| 0000000004 |\n| 0000000005 |\n| 0000000006 |\n| 0000000000 |\n+------------+\n"], "Category": ["Numeric Data Types"]}
{"HTML": ["https://mariadb.com/kb/en/dec-numeric-fixed/"], "Title": ["DEC, NUMERIC, FIXED"], "Feature": ["DEC[(M[,D])] [SIGNED | UNSIGNED | ZEROFILL]\n\nNUMERIC[(M[,D])] [SIGNED | UNSIGNED | ZEROFILL]\n\nFIXED[(M[,D])] [SIGNED | UNSIGNED | ZEROFILL]\n"], "Description": ["These types are synonyms for DECIMAL. The FIXED synonym is\navailable for compatibility with other database systems."], "Examples": [], "Category": ["Numeric Data Types"]}
{"HTML": ["https://mariadb.com/kb/en/float/"], "Title": ["FLOAT"], "Feature": ["FLOAT[(M,D)] [SIGNED | UNSIGNED | ZEROFILL]\n"], "Description": ["A small (single-precision) floating-point number (see DOUBLE for a regular-size floating point number). Allowable values are:", "-3.402823466E+38 to -1.175494351E-38\n0\n1.175494351E-38 to 3.402823466E+38. \n", "These are the theoretical limits, based on the IEEE \nstandard. The actual range might be slightly smaller depending on your\nhardware or operating system.", "M is the total number of digits and D is the number of digits\nfollowing the decimal point. If M and D are omitted, values are stored\nto the limits allowed by the hardware. A single-precision\nfloating-point number is accurate to approximately 7 decimal places.", "UNSIGNED, if specified, disallows negative values.", "Using FLOAT might give you some unexpected problems because all\ncalculations in MariaDB are done with double precision. See Floating Point Accuracy.", "For more details on the attributes, see Numeric Data Type Overview."], "Examples": [], "Category": ["Numeric Data Types"]}
