{"HTML": ["https://mariadb.com//kb/en/greater-than/"], "Title": [">"], "Feature": [">\n"], "Description": ["Greater than operator. Evaluates both SQL expressions and returns 1 if the left value is greater than the right value and 0 if it is not, or NULL if either expression is NULL. If the expressions return different data types, (for instance, a number and a string), performs type conversion.", "When used in row comparisons these two queries return the same results:", "SELECT (t1.a, t1.b) > (t2.x, t2.y) \nFROM t1 INNER JOIN t2;\n\nSELECT (t1.a > t2.x) OR ((t1.a = t2.x) AND (t1.b > t2.y))\nFROM t1 INNER JOIN t2;\n"], "Examples": ["SELECT 2 > 2;\n+-------+\n| 2 > 2 |\n+-------+\n|     0 |\n+-------+\n\nSELECT 'b' > 'a';\n+-----------+\n| 'b' > 'a' |\n+-----------+\n|         1 |\n+-----------+\n"], "Category": ["Comparison Operators"]}
{"HTML": ["https://mariadb.com//kb/en/greater-than-or-equal/"], "Title": [">="], "Feature": [">=\n"], "Description": ["Greater than or equal operator. Evaluates both SQL expressions and returns 1 if the left value is greater than or equal to the right value and 0 if it is not, or NULL if either expression is NULL. If the expressions return different data types, (for instance, a number and a string), performs type conversion.", "When used in row comparisons these two queries return the same results:", "SELECT (t1.a, t1.b) >= (t2.x, t2.y) \nFROM t1 INNER JOIN t2;\n\nSELECT (t1.a > t2.x) OR ((t1.a = t2.x) AND (t1.b >= t2.y))\nFROM t1 INNER JOIN t2;\n"], "Examples": ["SELECT 2 >= 2;\n+--------+\n| 2 >= 2 |\n+--------+\n|      1 |\n+--------+\n\nSELECT 'A' >= 'a';\n+------------+\n| 'A' >= 'a' |\n+------------+\n|          1 |\n+------------+\n"], "Category": ["Comparison Operators"]}
{"HTML": ["https://mariadb.com//kb/en/greatest/"], "Title": ["GREATEST"], "Feature": ["GREATEST(value1,value2,...)\n"], "Description": ["With two or more arguments, returns the largest (maximum-valued)\nargument. The arguments are compared using the same rules as for\nLEAST()."], "Examples": ["SELECT GREATEST(2,0);\n+---------------+\n| GREATEST(2,0) |\n+---------------+\n|             2 |\n+---------------+\n", "SELECT GREATEST(34.0,3.0,5.0,767.0);\n+------------------------------+\n| GREATEST(34.0,3.0,5.0,767.0) |\n+------------------------------+\n|                        767.0 |\n+------------------------------+\n", "SELECT GREATEST('B','A','C');\n+-----------------------+\n| GREATEST('B','A','C') |\n+-----------------------+\n| C                     |\n+-----------------------+\n"], "Category": ["Comparison Operators"]}
{"HTML": ["https://mariadb.com//kb/en/in/"], "Title": ["IN"], "Feature": ["expr IN (value,...)\n"], "Description": ["Returns 1 if expr is equal to any of the values in the IN list, else\nreturns 0. If all values are constants, they are evaluated according\nto the type of expr and sorted. The search for the item then is done\nusing a binary search. This means IN is very quick if the IN value\nlist consists entirely of constants. Otherwise, type conversion takes\nplace according to the rules described at Type Conversion, but\napplied to all the arguments.", "If expr is NULL, IN always returns NULL. If at least one of the values in the list is NULL, and one of the comparisons is true, the result is 1. If at least one of the values in the list is NULL and none of the comparisons is true, the result is NULL."], "Examples": ["SELECT 2 IN (0,3,5,7);\n+----------------+\n| 2 IN (0,3,5,7) |\n+----------------+\n|              0 |\n+----------------+\n", "SELECT 'wefwf' IN ('wee','wefwf','weg');\n+----------------------------------+\n| 'wefwf' IN ('wee','wefwf','weg') |\n+----------------------------------+\n|                                1 |\n+----------------------------------+ \n", "SELECT 1 IN ('1', '2', '3');\n+----------------------+\n| 1 IN ('1', '2', '3') |\n+----------------------+\n|                    1 |\n+----------------------+\n", "SELECT NULL IN (1, 2, 3);\n+-------------------+\n| NULL IN (1, 2, 3) |\n+-------------------+\n|              NULL |\n+-------------------+\n\nSELECT 1 IN (1, 2, NULL);\n+-------------------+\n| 1 IN (1, 2, NULL) |\n+-------------------+\n|                 1 |\n+-------------------+\n\nSELECT 5 IN (1, 2, NULL);\n+-------------------+\n| 5 IN (1, 2, NULL) |\n+-------------------+\n|              NULL |\n+-------------------+\n"], "Category": ["Comparison Operators"]}
{"HTML": ["https://mariadb.com//kb/en/interval/"], "Title": ["INTERVAL"], "Feature": ["INTERVAL(N,N1,N2,N3,...)\n"], "Description": ["Returns the index of the last argument that is less than the first argument or is NULL. ", "Returns 0 if N < N1, 1 if N < N2, 2 if N < N3 and so on or -1 if N is NULL. All\narguments are treated as integers. It is required that N1 < N2 < N3 <\n... < Nn for this function to work correctly. This is because a fast binary\nsearch is used. "], "Examples": ["SELECT INTERVAL(23, 1, 15, 17, 30, 44, 200);\n+--------------------------------------+\n| INTERVAL(23, 1, 15, 17, 30, 44, 200) |\n+--------------------------------------+\n|                                    3 |\n+--------------------------------------+\n\nSELECT INTERVAL(10, 1, 10, 100, 1000);\n+--------------------------------+\n| INTERVAL(10, 1, 10, 100, 1000) |\n+--------------------------------+\n|                              2 |\n+--------------------------------+\n\nSELECT INTERVAL(22, 23, 30, 44, 200);\n+-------------------------------+\n| INTERVAL(22, 23, 30, 44, 200) |\n+-------------------------------+\n|                             0 |\n+-------------------------------+\n\nSELECT INTERVAL(10, 2, NULL);\n+-----------------------+\n| INTERVAL(10, 2, NULL) |\n+-----------------------+\n|                     2 |\n+-----------------------+\n"], "Category": ["Comparison Operators"]}
{"HTML": ["https://mariadb.com//kb/en/is-not-null/"], "Title": ["IS NOT NULL"], "Feature": ["IS NOT NULL\n"], "Description": ["Tests whether a value is not NULL. See also NULL Values in MariaDB."], "Examples": ["SELECT 1 IS NOT NULL, 0 IS NOT NULL, NULL IS NOT NULL;\n+---------------+---------------+------------------+\n| 1 IS NOT NULL | 0 IS NOT NULL | NULL IS NOT NULL |\n+---------------+---------------+------------------+\n|             1 |             1 |                0 |\n+---------------+---------------+------------------+\n"], "Category": ["Comparison Operators"]}
{"HTML": ["https://mariadb.com//kb/en/is-not/"], "Title": ["IS NOT"], "Feature": ["IS NOT boolean_value\n"], "Description": ["Tests a value against a boolean value, where boolean_value can be\nTRUE, FALSE, or UNKNOWN. "], "Examples": ["SELECT 1 IS NOT UNKNOWN, 0 IS NOT UNKNOWN, NULL IS NOT UNKNOWN;\n+------------------+------------------+---------------------+\n| 1 IS NOT UNKNOWN | 0 IS NOT UNKNOWN | NULL IS NOT UNKNOWN |\n+------------------+------------------+---------------------+\n|                1 |                1 |                   0 |\n+------------------+------------------+---------------------+\n", "SELECT NULL IS NOT TRUE, NULL IS NOT FALSE;\n+------------------+-------------------+\n| NULL IS NOT TRUE | NULL IS NOT FALSE |\n+------------------+-------------------+\n|                1 |                 1 |\n+------------------+-------------------+\n"], "Category": ["Comparison Operators"]}
{"HTML": ["https://mariadb.com//kb/en/is-null/"], "Title": ["IS NULL"], "Feature": ["IS NULL\n"], "Description": ["Tests whether a value is NULL. See also NULL Values in MariaDB."], "Examples": ["SELECT 1 IS NULL, 0 IS NULL, NULL IS NULL;\n+-----------+-----------+--------------+\n| 1 IS NULL | 0 IS NULL | NULL IS NULL |\n+-----------+-----------+--------------+\n|         0 |         0 |            1 |\n+-----------+-----------+--------------+\n"], "Category": ["Comparison Operators"]}
{"HTML": ["https://mariadb.com//kb/en/is/"], "Title": ["IS"], "Feature": ["IS boolean_value\n"], "Description": ["Tests a value against a boolean value, where boolean_value can be\nTRUE, FALSE, or UNKNOWN.", "There is an important difference between using IS TRUE or comparing a value with TRUE using =. When using =, only 1 equals to TRUE. But when using IS TRUE, all values which are logically true (like a number > 1) return TRUE."], "Examples": ["SELECT 1 IS TRUE, 0 IS FALSE, NULL IS UNKNOWN;\n+-----------+------------+-----------------+\n| 1 IS TRUE | 0 IS FALSE | NULL IS UNKNOWN |\n+-----------+------------+-----------------+\n|         1 |          1 |               1 |\n+-----------+------------+-----------------+\n", "SELECT 2 = TRUE, 2 IS TRUE;\n+----------+-----------+\n| 2 = TRUE | 2 IS TRUE |\n+----------+-----------+\n|        0 |         1 |\n+----------+-----------+\n"], "Category": ["Comparison Operators"]}
{"HTML": ["https://mariadb.com//kb/en/isnull/"], "Title": ["ISNULL"], "Feature": ["ISNULL(expr)\n"], "Description": ["If expr is NULL, ISNULL() returns 1, otherwise it returns 0.", "See also NULL Values in MariaDB."], "Examples": ["SELECT ISNULL(1+1);\n+-------------+\n| ISNULL(1+1) |\n+-------------+\n|           0 |\n+-------------+\n\nSELECT ISNULL(1/0);\n+-------------+\n| ISNULL(1/0) |\n+-------------+\n|           1 |\n+-------------+\n"], "Category": ["Comparison Operators"]}
{"HTML": ["https://mariadb.com//kb/en/least/"], "Title": ["LEAST"], "Feature": ["LEAST(value1,value2,...)\n"], "Description": ["With two or more arguments, returns the smallest (minimum-valued)\nargument. The arguments are compared using the following rules:", "If the return value is used in an INTEGER context or all arguments are integer-valued, they are compared as integers.\nIf the return value is used in a REAL context or all arguments are real-valued, they are compared as reals.\nIf any argument is a case-sensitive string, the arguments are compared as case-sensitive strings.\nIn all other cases, the arguments are compared as case-insensitive strings.\n", "LEAST() returns NULL if any argument is NULL."], "Examples": ["SELECT LEAST(2,0);\n+------------+\n| LEAST(2,0) |\n+------------+\n|          0 |\n+------------+\n", "SELECT LEAST(34.0,3.0,5.0,767.0);\n+---------------------------+\n| LEAST(34.0,3.0,5.0,767.0) |\n+---------------------------+\n|                       3.0 |\n+---------------------------+\n", "SELECT LEAST('B','A','C');\n+--------------------+\n| LEAST('B','A','C') |\n+--------------------+\n| A                  |\n+--------------------+\n"], "Category": ["Comparison Operators"]}
{"HTML": ["https://mariadb.com//kb/en/less-than/"], "Title": ["<"], "Feature": ["<\n"], "Description": ["Less than operator. Evaluates both SQL expressions and returns 1 if the left value is less than the right value and 0 if it is not, or NULL if either expression is NULL. If the expressions return different data types, (for instance, a number and a string), performs type conversion.", "When used in row comparisons these two queries return the same results:", "SELECT (t1.a, t1.b) < (t2.x, t2.y) \nFROM t1 INNER JOIN t2;\n\nSELECT (t1.a < t2.x) OR ((t1.a = t2.x) AND (t1.b < t2.y))\nFROM t1 INNER JOIN t2;\n"], "Examples": ["SELECT 2 < 2;\n+-------+\n| 2 < 2 |\n+-------+\n|     0 |\n+-------+\n", "SELECT 3<'4';\n+-------+\n| 3<'4' |\n+-------+\n|     1 |\n+-------+\n", "SELECT 'a'<'A';\n+---------+\n| 'a'<'A' |\n+---------+\n|       0 |\n+---------+\n"], "Category": ["Comparison Operators"]}
{"HTML": ["https://mariadb.com//kb/en/less-than-or-equal/"], "Title": ["<="], "Feature": ["<=\n"], "Description": ["Less than or equal operator. Evaluates both SQL expressions and returns 1 if the left value is less than or equal to the right value and 0 if it is not, or NULL if either expression is NULL. If the expressions return different data types, (for instance, a number and a string), performs type conversion.", "When used in row comparisons these two queries return the same results:", "SELECT (t1.a, t1.b) <= (t2.x, t2.y) \nFROM t1 INNER JOIN t2;\n\nSELECT (t1.a < t2.x) OR ((t1.a = t2.x) AND (t1.b <= t2.y))\nFROM t1 INNER JOIN t2;\n"], "Examples": ["SELECT 0.1 <= 2;\n+----------+\n| 0.1 <= 2 |\n+----------+\n|        1 |\n+----------+\n", "SELECT 'a'<='A';\n+----------+\n| 'a'<='A' |\n+----------+\n|        1 |\n+----------+\n"], "Category": ["Comparison Operators"]}
{"HTML": ["https://mariadb.com//kb/en/null-safe-equal/"], "Title": ["<=>"], "Feature": ["<=>\n"], "Description": ["NULL-safe equal operator. It performs an equality comparison like\nthe = operator, but returns 1 rather than NULL if both operands are\nNULL, and 0 rather than NULL if one operand is NULL.", "a <=> b is equivalent to a = b OR (a IS NULL AND b IS NULL).", "When used in row comparisons these two queries return the same results:", "SELECT (t1.a, t1.b) <=> (t2.x, t2.y) \nFROM t1 INNER JOIN t2;\n\nSELECT (t1.a <=> t2.x) AND (t1.b <=> t2.y)\nFROM t1 INNER JOIN t2;\n", "See also NULL Values in MariaDB."], "Examples": ["SELECT 1 <=> 1, NULL <=> NULL, 1 <=> NULL;\n+---------+---------------+------------+\n| 1 <=> 1 | NULL <=> NULL | 1 <=> NULL |\n+---------+---------------+------------+\n|       1 |             1 |          0 |\n+---------+---------------+------------+\n\nSELECT 1 = 1, NULL = NULL, 1 = NULL;\n+-------+-------------+----------+\n| 1 = 1 | NULL = NULL | 1 = NULL |\n+-------+-------------+----------+\n|     1 |        NULL |     NULL |\n+-------+-------------+----------+\n"], "Category": ["Comparison Operators"]}
{"HTML": ["https://mariadb.com//kb/en/not-between/"], "Title": ["NOT BETWEEN"], "Feature": ["expr NOT BETWEEN min AND max\n"], "Description": ["This is the same as NOT (expr BETWEEN min AND max).", "Note that the meaning of the alternative form NOT expr BETWEEN min AND max is affected by the HIGH_NOT_PRECEDENCE SQL_MODE flag."], "Examples": ["SELECT 1 NOT BETWEEN 2 AND 3;\n+-----------------------+\n| 1 NOT BETWEEN 2 AND 3 |\n+-----------------------+\n|                     1 |\n+-----------------------+\n", "SELECT 'b' NOT BETWEEN 'a' AND 'c';\n+-----------------------------+\n| 'b' NOT BETWEEN 'a' AND 'c' |\n+-----------------------------+\n|                           0 |\n+-----------------------------+\n", "SELECT 1 NOT BETWEEN 1 AND NULL;\n+--------------------------+\n| 1 NOT BETWEEN 1 AND NULL |\n+--------------------------+\n|                     NULL |\n+--------------------------+\n"], "Category": ["Comparison Operators"]}
{"HTML": ["https://mariadb.com//kb/en/not-equal/"], "Title": ["Not Equal Operator: !="], "Feature": ["<>, !=\n"], "Description": ["Not equal operator.  Evaluates both SQL expressions and returns 1 if they are not equal and 0 if they are equal, or NULL if either expression is NULL.  If the expressions return different data types, (for instance, a number and a string), performs type conversion.", "When used in row comparisons these two queries return the same results:", "SELECT (t1.a, t1.b) != (t2.x, t2.y) \nFROM t1 INNER JOIN t2;\n\nSELECT (t1.a != t2.x) OR (t1.b != t2.y)\nFROM t1 INNER JOIN t2;\n"], "Examples": ["SELECT '.01' <> '0.01';\n+-----------------+\n| '.01' <> '0.01' |\n+-----------------+\n|               1 |\n+-----------------+\n\nSELECT .01 <> '0.01';\n+---------------+\n| .01 <> '0.01' |\n+---------------+\n|             0 |\n+---------------+\n\nSELECT 'zapp' <> 'zappp';\n+-------------------+\n| 'zapp' <> 'zappp' |\n+-------------------+\n|                 1 |\n+-------------------+\n"], "Category": ["Comparison Operators"]}
{"HTML": ["https://mariadb.com//kb/en/not-in/"], "Title": ["NOT IN"], "Feature": ["expr NOT IN (value,...)\n"], "Description": ["This is the same as NOT (expr IN (value,...))."], "Examples": ["SELECT 2 NOT IN (0,3,5,7);\n+--------------------+\n| 2 NOT IN (0,3,5,7) |\n+--------------------+\n|                  1 |\n+--------------------+\n", "SELECT 'wefwf' NOT IN ('wee','wefwf','weg');\n+--------------------------------------+\n| 'wefwf' NOT IN ('wee','wefwf','weg') |\n+--------------------------------------+\n|                                    0 |\n+--------------------------------------+\n", "SELECT 1 NOT IN ('1', '2', '3');\n+--------------------------+\n| 1 NOT IN ('1', '2', '3') |\n+--------------------------+\n|                        0 |\n+--------------------------+\n", "SELECT NULL NOT IN (1, 2, 3);\n+-----------------------+\n| NULL NOT IN (1, 2, 3) |\n+-----------------------+\n|                  NULL |\n+-----------------------+\n\nSELECT 1 NOT IN (1, 2, NULL);\n+-----------------------+\n| 1 NOT IN (1, 2, NULL) |\n+-----------------------+\n|                     0 |\n+-----------------------+\n\nSELECT 5 NOT IN (1, 2, NULL);\n+-----------------------+\n| 5 NOT IN (1, 2, NULL) |\n+-----------------------+\n|                  NULL |\n+-----------------------+\n"], "Category": ["Comparison Operators"]}
{"HTML": ["https://mariadb.com//kb/en/equal/"], "Title": ["="], "Feature": ["left_expr = right_expr\n"], "Description": ["Equal operator. Evaluates both SQL expressions and returns 1 if they are equal, 0 if they are not equal, or NULL if either expression is NULL. If the expressions return different data types (for example, a number and a string), a type conversion is performed.", "When used in row comparisons these two queries are synonymous and return the same results:", "SELECT (t1.a, t1.b) = (t2.x, t2.y) FROM t1 INNER JOIN t2;\n\nSELECT (t1.a = t2.x) AND (t1.b = t2.y) FROM t1 INNER JOIN t2;\n", "To perform a NULL-safe comparison, use the <=> operator.", "= can also be used as an assignment operator."], "Examples": ["SELECT 1 = 0;\n+-------+\n| 1 = 0 |\n+-------+\n|     0 |\n+-------+\n\nSELECT '0' = 0;\n+---------+\n| '0' = 0 |\n+---------+\n|       1 |\n+---------+\n\nSELECT '0.0' = 0;\n+-----------+\n| '0.0' = 0 |\n+-----------+\n|         1 |\n+-----------+\n\nSELECT '0.01' = 0;\n+------------+\n| '0.01' = 0 |\n+------------+\n|          0 |\n+------------+\n\nSELECT '.01' = 0.01;\n+--------------+\n| '.01' = 0.01 |\n+--------------+\n|            1 |\n+--------------+\n\nSELECT (5 * 2) = CONCAT('1', '0');\n+----------------------------+\n| (5 * 2) = CONCAT('1', '0') |\n+----------------------------+\n|                          1 |\n+----------------------------+\n\nSELECT 1 = NULL;\n+----------+\n| 1 = NULL |\n+----------+\n|     NULL |\n+----------+\n\nSELECT NULL = NULL;\n+-------------+\n| NULL = NULL |\n+-------------+\n|        NULL |\n+-------------+\n"], "Category": ["Comparison Operators"]}
{"HTML": ["https://mariadb.com//kb/en/between-and/"], "Title": ["BETWEEN AND"], "Feature": ["expr BETWEEN min AND max\n"], "Description": ["If expr is greater than or equal to min and expr is less than or equal\nto max, BETWEEN returns 1, otherwise it returns 0. This is equivalent\nto the expression (min <= expr AND expr <= max) if all the arguments\nare of the same type. Otherwise type conversion takes place according\nto the rules described at Type Conversion, but\napplied to all the three arguments."], "Examples": ["SELECT 1 BETWEEN 2 AND 3;\n+-------------------+\n| 1 BETWEEN 2 AND 3 |\n+-------------------+\n|                 0 |\n+-------------------+\n", "SELECT 'b' BETWEEN 'a' AND 'c';\n+-------------------------+\n| 'b' BETWEEN 'a' AND 'c' |\n+-------------------------+\n|                       1 |\n+-------------------------+\n", "SELECT 2 BETWEEN 2 AND '3';\n+---------------------+\n| 2 BETWEEN 2 AND '3' |\n+---------------------+\n|                   1 |\n+---------------------+\n", "SELECT 2 BETWEEN 2 AND 'x-3';\n+-----------------------+\n| 2 BETWEEN 2 AND 'x-3' |\n+-----------------------+\n|                     0 |\n+-----------------------+\n1 row in set, 1 warning (0.00 sec)\n\nWarning (Code 1292): Truncated incorrect DOUBLE value: 'x-3'\n", "SELECT 1 BETWEEN 1 AND NULL;\n+----------------------+\n| 1 BETWEEN 1 AND NULL |\n+----------------------+\n|                 NULL |\n+----------------------+\n", "CREATE TABLE `x` (\n  a date ,\n  b datetime,\n  c timestamp\n)\n\nINSERT INTO x VALUES \n ('2018-11-11', '2018-11-11 05:15', '2018-11-11 05:15'), \n ('2018-11-12', '2018-11-12 05:15', '2018-11-12 05:15'); \n\nSELECT * FROM x WHERE a BETWEEN '2018-11-11' AND '2018-11-12';\n+------------+---------------------+---------------------+\n| a          | b                   | c                   |\n+------------+---------------------+---------------------+\n| 2018-11-11 | 2018-11-11 05:15:00 | 2018-11-11 05:15:00 |\n| 2018-11-12 | 2018-11-12 05:15:00 | 2018-11-12 05:15:00 |\n+------------+---------------------+---------------------+\n\nSELECT * FROM x WHERE b BETWEEN '2018-11-11' AND '2018-11-12';\n+------------+---------------------+---------------------+\n| a          | b                   | c                   |\n+------------+---------------------+---------------------+\n| 2018-11-11 | 2018-11-11 05:15:00 | 2018-11-11 05:15:00 |\n+------------+---------------------+---------------------+\n\nSELECT * FROM x WHERE c BETWEEN '2018-11-11' AND '2018-11-12';\n+------------+---------------------+---------------------+\n| a          | b                   | c                   |\n+------------+---------------------+---------------------+\n| 2018-11-11 | 2018-11-11 05:15:00 | 2018-11-11 05:15:00 |\n+------------+---------------------+---------------------+\n"], "Category": ["Comparison Operators"]}
{"HTML": ["https://mariadb.com//kb/en/coalesce/"], "Title": ["COALESCE"], "Feature": ["COALESCE(value,...)\n"], "Description": ["Returns the first non-NULL value in the list, or NULL if there are no\nnon-NULL values. At least one parameter must be passed.", "The function is useful when substituting a default value for null values when displaying data.", "See also NULL Values in MariaDB."], "Examples": ["SELECT COALESCE(NULL,1);\n+------------------+\n| COALESCE(NULL,1) |\n+------------------+\n|                1 |\n+------------------+\n", "SELECT COALESCE(NULL,NULL,NULL);\n+--------------------------+\n| COALESCE(NULL,NULL,NULL) |\n+--------------------------+\n|                     NULL |\n+--------------------------+\n", "SET @a=NULL, @b=1;\n\nSELECT COALESCE(@a, @b), IFNULL(@a, @b);\n+------------------+----------------+\n| COALESCE(@a, @b) | IFNULL(@a, @b) |\n+------------------+----------------+\n|                1 |              1 |\n+------------------+----------------+\n", "CREATE TABLE t1 (a INT, b VARCHAR(10));\nINSERT INTO t1 VALUES (0x31, 0x61),(COALESCE(0x31), COALESCE(0x61));\n\nSELECT * FROM t1;\n+------+------+\n| a    | b    |\n+------+------+\n|   49 | a    |\n|    1 | a    |\n+------+------+\n", "SELECT SUM(score) FROM student;\n+------------+\n| SUM(score) |\n+------------+\n|       NULL |\n+------------+\n\nSELECT COALESCE(SUM(score),0) FROM student;\n+------------------------+\n| COALESCE(SUM(score),0) |\n+------------------------+\n|                      0 |\n+------------------------+\n"], "Category": ["Comparison Operators"]}
