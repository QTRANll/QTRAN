{
    "HTML": [
        "https://mariadb.com//kb/en/kdf/"
    ],
    "Title": [
        "KDF"
    ],
    "Feature": [
        "KDF(key_str, salt [, {info | iterations} [, kdf_name [, width ]]])\n"
    ],
    "Description": [
        "KDF is a key derivation function, similar to OpenSSL's EVP_KDF_derive(). The purpose of a KDF is to be slow, so if the calculated value is lost/stolen, the original key_str is not achievable easily with modern GPU. KDFs are therefore an ideal replacement for password hashes. KDFs can also pad out a password secret to the number of bits used in encryption algorithms.",
        "For generating good encryption keys for AES_ENCRYPT a less expensive but cryptographically secure function like RANDOM_BYTES is recommended.",
        "kdf_name is \"hkdf\" or \"pbkdf2_hmac\" (default)\nwidth (in bits) can be any number divisible by 8, by default it's taken from @@block_encryption_mode\niterations must be positive, and is 1000 by default\n",
        "Note that OpenSSL 1.0 doesn't support HKDF, so in this case NULL is returned. This OpenSSL version is still used in SLES 12 and CentOS 7."
    ],
    "Examples": [
        "select hex(kdf('foo', 'bar', 'infa', 'hkdf')); \n+----------------------------------------+\n| hex(kdf('foo', 'bar', 'infa', 'hkdf')) |\n+----------------------------------------+\n| 612875F859CFB4EE0DFEFF9F2A18E836       |\n+----------------------------------------+\n"
    ],
    "Category": [
        "Encryption, Hashing and Compression Functions"
    ]
}