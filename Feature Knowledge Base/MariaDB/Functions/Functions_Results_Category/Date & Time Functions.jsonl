{"HTML": ["https://mariadb.com//kb/en/from_days/"], "Title": ["FROM_DAYS"], "Feature": ["FROM_DAYS(N)\n"], "Description": ["Given a day number N, returns a DATE value. The day count is based on the number of days from the start of the standard calendar (0000-00-00). ", "The function is not designed for use with dates before the advent of the Gregorian calendar in October 1582. Results will not be reliable since it doesn't account for the lost days when the calendar changed from the Julian calendar.", "This is the converse of the TO_DAYS() function."], "Examples": ["SELECT FROM_DAYS(730669);\n+-------------------+\n| FROM_DAYS(730669) |\n+-------------------+\n| 2000-07-03        |\n+-------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/from_unixtime/"], "Title": ["FROM_UNIXTIME"], "Feature": ["FROM_UNIXTIME(unix_timestamp), FROM_UNIXTIME(unix_timestamp,format)\n"], "Description": ["Returns a representation of the unix_timestamp argument as a value in\n'YYYY-MM-DD HH:MM:SS' or YYYYMMDDHHMMSS.uuuuuu format, depending on\nwhether the function is used in a string or numeric context. The value\nis expressed in the current time zone. unix_timestamp is an internal\ntimestamp value such as is produced by the UNIX_TIMESTAMP() function.", "If format is given, the result is formatted according to the format\nstring, which is used the same way as listed in the entry for the\nDATE_FORMAT() function.", "Timestamps in MariaDB have a maximum value of 2147483647, equivalent to 2038-01-19 05:14:07. This is due to the underlying 32-bit limitation. Using the function on a timestamp beyond this will result in NULL being returned. Use DATETIME as a storage type if you require dates beyond this.\n", "The options that can be used by FROM_UNIXTIME(), as well as DATE_FORMAT() and STR_TO_DATE(), are:", "OptionDescription\n%aShort weekday name in current locale (Variable lc_time_names).\n%bShort form month name in current locale. For locale en_US this is one of: Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov or Dec.\n%cMonth with 1 or 2 digits.\n%DDay with English suffix 'th', 'nd', 'st' or 'rd''. (1st, 2nd, 3rd...).\n%dDay with 2 digits.\n%eDay with 1 or 2 digits.\n%fMicroseconds 6 digits.\n%HHour with 2 digits between 00-23.\n%hHour with 2 digits between 01-12.\n%IHour with 2 digits between 01-12.\n%iMinute with 2 digits.\n%jDay of the year (001-366)\n%kHour with 1 digits between 0-23.\n%lHour with 1 digits between 1-12.\n%MFull month name in current locale (Variable lc_time_names).\n%mMonth with 2 digits.\n%pAM/PM according to current locale (Variable lc_time_names).\n%rTime in 12 hour format, followed by AM/PM. Short for '%I:%i:%S %p'.\n%SSeconds with 2 digits.\n%sSeconds with 2 digits.\n%TTime in 24 hour format. Short for '%H:%i:%S'.\n%UWeek number (00-53), when first day of the week is Sunday.\n%uWeek number (00-53), when first day of the week is Monday.\n%VWeek number (01-53), when first day of the week is Sunday. Used with %X.\n%vWeek number (01-53), when first day of the week is Monday. Used with %x.\n%WFull weekday name in current locale (Variable lc_time_names).\n%wDay of the week. 0 = Sunday, 6 = Saturday.\n%XYear with 4 digits when first day of the week is Sunday. Used with %V.\n%xYear with 4 digits when first day of the week is Sunday. Used with %v.\n%YYear with 4 digits.\n%yYear with 2 digits.\n%#For str_to_date(), skip all numbers.\n%.For str_to_date(), skip all punctation characters.\n%@For str_to_date(), skip all alpha characters.\n%%A literal % character.\n\n"], "Examples": ["SELECT FROM_UNIXTIME(1196440219);\n+---------------------------+\n| FROM_UNIXTIME(1196440219) |\n+---------------------------+\n| 2007-11-30 11:30:19       |\n+---------------------------+\n\nSELECT FROM_UNIXTIME(1196440219) + 0;\n+-------------------------------+\n| FROM_UNIXTIME(1196440219) + 0 |\n+-------------------------------+\n|         20071130113019.000000 |\n+-------------------------------+\n\nSELECT FROM_UNIXTIME(UNIX_TIMESTAMP(), '%Y %D %M %h:%i:%s %x');\n+---------------------------------------------------------+\n| FROM_UNIXTIME(UNIX_TIMESTAMP(), '%Y %D %M %h:%i:%s %x') |\n+---------------------------------------------------------+\n| 2010 27th March 01:03:47 2010                           |\n+---------------------------------------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/get_format/"], "Title": ["GET_FORMAT"], "Feature": ["GET_FORMAT({DATE|DATETIME|TIME}, {'EUR'|'USA'|'JIS'|'ISO'|'INTERNAL'})\n"], "Description": ["Returns a format string. This function is useful in combination with\nthe DATE_FORMAT() and the STR_TO_DATE() functions.", "Possible result formats are:", "Function CallResult Format\nGET_FORMAT(DATE,'EUR')'%d.%m.%Y'\nGET_FORMAT(DATE,'USA')'%m.%d.%Y'\nGET_FORMAT(DATE,'JIS')'%Y-%m-%d'\nGET_FORMAT(DATE,'ISO')'%Y-%m-%d'\nGET_FORMAT(DATE,'INTERNAL')'%Y%m%d'\nGET_FORMAT(DATETIME,'EUR')'%Y-%m-%d %H.%i.%s'\nGET_FORMAT(DATETIME,'USA')'%Y-%m-%d %H.%i.%s'\nGET_FORMAT(DATETIME,'JIS')'%Y-%m-%d %H:%i:%s'\nGET_FORMAT(DATETIME,'ISO')'%Y-%m-%d %H:%i:%s'\nGET_FORMAT(DATETIME,'INTERNAL')'%Y%m%d%H%i%s'\nGET_FORMAT(TIME,'EUR')'%H.%i.%s'\nGET_FORMAT(TIME,'USA')'%h:%i:%s %p'\nGET_FORMAT(TIME,'JIS')'%H:%i:%s'\nGET_FORMAT(TIME,'ISO')'%H:%i:%s'\nGET_FORMAT(TIME,'INTERNAL')'%H%i%s'\n\n"], "Examples": ["SELECT GET_FORMAT(DATE, 'EUR');\n+-------------------------+\n| GET_FORMAT(DATE, 'EUR') |\n+-------------------------+\n| %d.%m.%Y                |\n+-------------------------+\n", "SELECT DATE_FORMAT('2003-10-03',GET_FORMAT(DATE,'EUR'));\n+--------------------------------------------------+\n| DATE_FORMAT('2003-10-03',GET_FORMAT(DATE,'EUR')) |\n+--------------------------------------------------+\n| 03.10.2003                                       |\n+--------------------------------------------------+\n\nSELECT STR_TO_DATE('10.31.2003',GET_FORMAT(DATE,'USA'));\n+--------------------------------------------------+\n| STR_TO_DATE('10.31.2003',GET_FORMAT(DATE,'USA')) |\n+--------------------------------------------------+\n| 2003-10-31                                       |\n+--------------------------------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/hour/"], "Title": ["HOUR"], "Feature": ["HOUR(time)\n"], "Description": ["Returns the hour for time. The range of the return value is 0 to 23\nfor time-of-day values. However, the range of TIME values actually is\nmuch larger, so HOUR can return values greater than 23.", "The return value is always positive, even if a negative TIME value is provided."], "Examples": ["SELECT HOUR('10:05:03');\n+------------------+\n| HOUR('10:05:03') |\n+------------------+\n|               10 |\n+------------------+\n\nSELECT HOUR('272:59:59');\n+-------------------+\n| HOUR('272:59:59') |\n+-------------------+\n|               272 |\n+-------------------+\n", "SELECT EXTRACT(HOUR FROM '26:30:00'), HOUR('26:30:00');\n+-------------------------------+------------------+\n| EXTRACT(HOUR FROM '26:30:00') | HOUR('26:30:00') |\n+-------------------------------+------------------+\n|                             2 |               26 |\n+-------------------------------+------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/last_day/"], "Title": ["LAST_DAY"], "Feature": ["LAST_DAY(date)\n"], "Description": ["Takes a date or datetime value and returns the corresponding value for\nthe last day of the month. Returns NULL if the argument is invalid."], "Examples": ["SELECT LAST_DAY('2003-02-05');\n+------------------------+\n| LAST_DAY('2003-02-05') |\n+------------------------+\n| 2003-02-28             |\n+------------------------+\n\nSELECT LAST_DAY('2004-02-05');\n+------------------------+\n| LAST_DAY('2004-02-05') |\n+------------------------+\n| 2004-02-29             |\n+------------------------+\n\nSELECT LAST_DAY('2004-01-01 01:01:01');\n+---------------------------------+\n| LAST_DAY('2004-01-01 01:01:01') |\n+---------------------------------+\n| 2004-01-31                      |\n+---------------------------------+\n\nSELECT LAST_DAY('2003-03-32');\n+------------------------+\n| LAST_DAY('2003-03-32') |\n+------------------------+\n| NULL                   |\n+------------------------+\n1 row in set, 1 warning (0.00 sec)\n\nWarning (Code 1292): Incorrect datetime value: '2003-03-32'\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/localtime/"], "Title": ["LOCALTIME"], "Feature": ["LOCALTIME\nLOCALTIME([precision])\n"], "Description": ["LOCALTIME and LOCALTIME() are synonyms for NOW()."], "Examples": [], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/localtimestamp/"], "Title": ["LOCALTIMESTAMP"], "Feature": ["LOCALTIMESTAMP\nLOCALTIMESTAMP([precision])\n"], "Description": ["LOCALTIMESTAMP and LOCALTIMESTAMP() are synonyms for NOW()."], "Examples": [], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/makedate/"], "Title": ["MAKEDATE"], "Feature": ["MAKEDATE(year,dayofyear)\n"], "Description": ["Returns a date, given year and day-of-year values. dayofyear must be\ngreater than 0 or the result is NULL."], "Examples": ["SELECT MAKEDATE(2011,31), MAKEDATE(2011,32);\n+-------------------+-------------------+\n| MAKEDATE(2011,31) | MAKEDATE(2011,32) |\n+-------------------+-------------------+\n| 2011-01-31        | 2011-02-01        |\n+-------------------+-------------------+\n\nSELECT MAKEDATE(2011,365), MAKEDATE(2014,365);\n+--------------------+--------------------+\n| MAKEDATE(2011,365) | MAKEDATE(2014,365) |\n+--------------------+--------------------+\n| 2011-12-31         | 2014-12-31         |\n+--------------------+--------------------+\n\nSELECT MAKEDATE(2011,0);\n+------------------+\n| MAKEDATE(2011,0) |\n+------------------+\n| NULL             |\n+------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/maketime/"], "Title": ["MAKETIME"], "Feature": ["MAKETIME(hour,minute,second)\n"], "Description": ["Returns a time value calculated from the hour, minute, and second arguments.", "If minute or second are out of the range 0 to 60, NULL is returned. The hour can be in the range -838 to 838, outside of which the value is truncated with a warning."], "Examples": ["SELECT MAKETIME(13,57,33);\n+--------------------+\n| MAKETIME(13,57,33) |\n+--------------------+\n| 13:57:33           |\n+--------------------+\n\nSELECT MAKETIME(-13,57,33);\n+---------------------+\n| MAKETIME(-13,57,33) |\n+---------------------+\n| -13:57:33           |\n+---------------------+\n\nSELECT MAKETIME(13,67,33);\n+--------------------+\n| MAKETIME(13,67,33) |\n+--------------------+\n| NULL               |\n+--------------------+\n\nSELECT MAKETIME(-1000,57,33);\n+-----------------------+\n| MAKETIME(-1000,57,33) |\n+-----------------------+\n| -838:59:59            |\n+-----------------------+\n1 row in set, 1 warning (0.00 sec)\n\nSHOW WARNINGS;\n+---------+------+-----------------------------------------------+\n| Level   | Code | Message                                       |\n+---------+------+-----------------------------------------------+\n| Warning | 1292 | Truncated incorrect time value: '-1000:57:33' |\n+---------+------+-----------------------------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/microsecond/"], "Title": ["MICROSECOND"], "Feature": ["MICROSECOND(expr)\n"], "Description": ["Returns the microseconds from the time or datetime expression expr as a number in the range from 0 to 999999.", "If expr is a time with no microseconds, zero is returned, while if expr is a date with no time, zero with a warning is returned."], "Examples": ["SELECT MICROSECOND('12:00:00.123456');\n+--------------------------------+\n| MICROSECOND('12:00:00.123456') |\n+--------------------------------+\n|                         123456 |\n+--------------------------------+\n\nSELECT MICROSECOND('2009-12-31 23:59:59.000010');\n+-------------------------------------------+\n| MICROSECOND('2009-12-31 23:59:59.000010') |\n+-------------------------------------------+\n|                                        10 |\n+-------------------------------------------+\n\nSELECT MICROSECOND('2013-08-07 12:13:14');\n+------------------------------------+\n| MICROSECOND('2013-08-07 12:13:14') |\n+------------------------------------+\n|                                  0 |\n+------------------------------------+\n\nSELECT MICROSECOND('2013-08-07');\n+---------------------------+\n| MICROSECOND('2013-08-07') |\n+---------------------------+\n|                         0 |\n+---------------------------+\n1 row in set, 1 warning (0.00 sec)\n\nSHOW WARNINGS;\n+---------+------+----------------------------------------------+\n| Level   | Code | Message                                      |\n+---------+------+----------------------------------------------+\n| Warning | 1292 | Truncated incorrect time value: '2013-08-07' |\n+---------+------+----------------------------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/minute/"], "Title": ["MINUTE"], "Feature": ["MINUTE(time)\n"], "Description": ["Returns the minute for time, in the range 0 to 59. "], "Examples": ["SELECT MINUTE('2013-08-03 11:04:03');\n+-------------------------------+\n| MINUTE('2013-08-03 11:04:03') |\n+-------------------------------+\n|                             4 |\n+-------------------------------+\n\n SELECT MINUTE ('23:12:50');\n+---------------------+\n| MINUTE ('23:12:50') |\n+---------------------+\n|                  12 |\n+---------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/month/"], "Title": ["MONTH"], "Feature": ["MONTH(date)\n"], "Description": ["Returns the month for date in the range 1 to 12 for January to\nDecember, or 0 for dates such as '0000-00-00' or '2008-00-00' that\nhave a zero month part."], "Examples": ["SELECT MONTH('2019-01-03');\n+---------------------+\n| MONTH('2019-01-03') |\n+---------------------+\n|                   1 |\n+---------------------+\n\nSELECT MONTH('2019-00-03');\n+---------------------+\n| MONTH('2019-00-03') |\n+---------------------+\n|                   0 |\n+---------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/monthname/"], "Title": ["MONTHNAME"], "Feature": ["MONTHNAME(date)\n"], "Description": ["Returns the full name of the month for date. The language used for the name is controlled by the value of the lc_time_names system variable. See server locale for more on the supported locales."], "Examples": ["SELECT MONTHNAME('2019-02-03');\n+-------------------------+\n| MONTHNAME('2019-02-03') |\n+-------------------------+\n| February                |\n+-------------------------+\n", "SET lc_time_names = 'fr_CA';\n\nSELECT MONTHNAME('2019-05-21');\n+-------------------------+\n| MONTHNAME('2019-05-21') |\n+-------------------------+\n| mai                     |\n+-------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/now/"], "Title": ["NOW"], "Feature": ["NOW([precision])\nCURRENT_TIMESTAMP\nCURRENT_TIMESTAMP([precision])\nLOCALTIME, LOCALTIME([precision])\nLOCALTIMESTAMP\nLOCALTIMESTAMP([precision])\n"], "Description": ["Returns the current date and time as a value in 'YYYY-MM-DD HH:MM:SS'\nor YYYYMMDDHHMMSS.uuuuuu format, depending on whether the function is\nused in a string or numeric context. The value is expressed in the\ncurrent time zone.", "The optional precision determines the microsecond precision. See Microseconds in MariaDB.", "NOW() (or its synonyms) can be used as the default value for TIMESTAMP columns as well as, since MariaDB 10.0.1, DATETIME columns. Before MariaDB 10.0.1, it was only possible for a single TIMESTAMP column per table to contain the CURRENT_TIMESTAMP as its default.", "When displayed in the INFORMATION_SCHEMA.COLUMNS table, a default CURRENT TIMESTAMP is displayed as CURRENT_TIMESTAMP up until MariaDB 10.2.2, and as current_timestamp() from MariaDB 10.2.3, due to to MariaDB 10.2 accepting expressions in the DEFAULT clause.", "Changing the timestamp system variable with a SET timestamp statement affects the value returned by NOW(), but not by SYSDATE()."], "Examples": ["SELECT NOW();\n+---------------------+\n| NOW()               |\n+---------------------+\n| 2010-03-27 13:13:25 |\n+---------------------+\n\nSELECT NOW() + 0;\n+-----------------------+\n| NOW() + 0             |\n+-----------------------+\n| 20100327131329.000000 |\n+-----------------------+\n", "SELECT CURRENT_TIMESTAMP(2);\n+------------------------+\n| CURRENT_TIMESTAMP(2)   |\n+------------------------+\n| 2018-07-10 09:47:26.24 |\n+------------------------+\n", "CREATE TABLE t (createdTS TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP);\n", "SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA='test'\n  AND COLUMN_NAME LIKE '%ts%'\\G\n*************************** 1. row ***************************\n           TABLE_CATALOG: def\n            TABLE_SCHEMA: test\n              TABLE_NAME: t\n             COLUMN_NAME: ts\n        ORDINAL_POSITION: 1\n          COLUMN_DEFAULT: current_timestamp()\n...\n", "SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA='test'\n  AND COLUMN_NAME LIKE '%ts%'\\G\n*************************** 1. row ***************************\n           TABLE_CATALOG: def\n            TABLE_SCHEMA: test\n              TABLE_NAME: t\n             COLUMN_NAME: createdTS\n        ORDINAL_POSITION: 1\n          COLUMN_DEFAULT: CURRENT_TIMESTAMP\n...\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/period_add/"], "Title": ["PERIOD_ADD"], "Feature": ["PERIOD_ADD(P,N)\n"], "Description": ["Adds N months to period P. P is in the format YYMM or YYYYMM, and is not a date value. If P contains a two-digit year, values from 00 to 69 are converted to from 2000 to 2069, while values from 70 are converted to 1970 upwards.", "Returns a value in the format YYYYMM."], "Examples": ["SELECT PERIOD_ADD(200801,2);\n+----------------------+\n| PERIOD_ADD(200801,2) |\n+----------------------+\n|               200803 |\n+----------------------+\n\nSELECT PERIOD_ADD(6910,2);\n+--------------------+\n| PERIOD_ADD(6910,2) |\n+--------------------+\n|             206912 |\n+--------------------+\n\nSELECT PERIOD_ADD(7010,2);\n+--------------------+\n| PERIOD_ADD(7010,2) |\n+--------------------+\n|             197012 |\n+--------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/period_diff/"], "Title": ["PERIOD_DIFF"], "Feature": ["PERIOD_DIFF(P1,P2)\n"], "Description": ["Returns the number of months between periods P1 and P2. P1 and P2 \ncan be in the format YYMM or YYYYMM, and are not date values.", "If P1 or P2 contains a two-digit year, values from 00 to 69 are converted to from 2000 to 2069, while values from 70 are converted to 1970 upwards."], "Examples": ["SELECT PERIOD_DIFF(200802,200703);\n+----------------------------+\n| PERIOD_DIFF(200802,200703) |\n+----------------------------+\n|                         11 |\n+----------------------------+\n\nSELECT PERIOD_DIFF(6902,6803);\n+------------------------+\n| PERIOD_DIFF(6902,6803) |\n+------------------------+\n|                     11 |\n+------------------------+\n\nSELECT PERIOD_DIFF(7002,6803);\n+------------------------+\n| PERIOD_DIFF(7002,6803) |\n+------------------------+\n|                  -1177 |\n+------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/quarter/"], "Title": ["QUARTER"], "Feature": ["QUARTER(date)\n"], "Description": ["Returns the quarter of the year for date, in the range 1 to 4. Returns 0 if month contains a zero value, or NULL if the given value is not otherwise a valid date (zero values are accepted)."], "Examples": ["SELECT QUARTER('2008-04-01');\n+-----------------------+\n| QUARTER('2008-04-01') |\n+-----------------------+\n|                     2 |\n+-----------------------+\n\nSELECT QUARTER('2019-00-01');\n+-----------------------+\n| QUARTER('2019-00-01') |\n+-----------------------+\n|                     0 |\n+-----------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/second/"], "Title": ["SECOND"], "Feature": ["SECOND(time)\n"], "Description": ["Returns the second for a given time (which can include microseconds), in the range 0 to 59, or NULL if not given a valid time value."], "Examples": ["SELECT SECOND('10:05:03');\n+--------------------+\n| SECOND('10:05:03') |\n+--------------------+\n|                  3 |\n+--------------------+\n\nSELECT SECOND('10:05:01.999999');\n+---------------------------+\n| SECOND('10:05:01.999999') |\n+---------------------------+\n|                         1 |\n+---------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/sec_to_time/"], "Title": ["SEC_TO_TIME"], "Feature": ["SEC_TO_TIME(seconds)\n"], "Description": ["Returns the seconds argument, converted to hours, minutes, and\nseconds, as a TIME value. The range of the result is constrained to\nthat of the TIME data type. A warning occurs if the argument\ncorresponds to a value outside that range.", "The time will be returned in the format hh:mm:ss, or hhmmss if used in a numeric calculation."], "Examples": ["SELECT SEC_TO_TIME(12414);\n+--------------------+\n| SEC_TO_TIME(12414) |\n+--------------------+\n| 03:26:54           |\n+--------------------+\n\nSELECT SEC_TO_TIME(12414)+0;\n+----------------------+\n| SEC_TO_TIME(12414)+0 |\n+----------------------+\n|                32654 |\n+----------------------+\n\nSELECT SEC_TO_TIME(9999999);\n+----------------------+\n| SEC_TO_TIME(9999999) |\n+----------------------+\n| 838:59:59            |\n+----------------------+\n1 row in set, 1 warning (0.00 sec)\n\nSHOW WARNINGS;\n+---------+------+-------------------------------------------+\n| Level   | Code | Message                                   |\n+---------+------+-------------------------------------------+\n| Warning | 1292 | Truncated incorrect time value: '9999999' |\n+---------+------+-------------------------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/str_to_date/"], "Title": ["STR_TO_DATE"], "Feature": ["STR_TO_DATE(str,format)\n"], "Description": ["This is the inverse of the DATE_FORMAT() function. It takes\na string str and a format string format. STR_TO_DATE() returns a\nDATETIME value if the format string contains both date and time parts, or a\nDATE or TIME value if the string contains only date or time parts.", "The date, time, or datetime values contained in str should be given in the format indicated by format. If str contains an illegal date, time, or datetime value, STR_TO_DATE() returns NULL. An illegal value also produces a warning.", "Under specific SQL_MODE settings an error may also be generated if the str isn't a valid date:", "ALLOW_INVALID_DATES\nNO_ZERO_DATE\nNO_ZERO_IN_DATE\n", "The options that can be used by STR_TO_DATE(), as well as its inverse DATE_FORMAT() and the FROM_UNIXTIME() function, are:", "OptionDescription\n%aShort weekday name in current locale (Variable lc_time_names).\n%bShort form month name in current locale. For locale en_US this is one of: Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov or Dec.\n%cMonth with 1 or 2 digits.\n%DDay with English suffix 'th', 'nd', 'st' or 'rd''. (1st, 2nd, 3rd...).\n%dDay with 2 digits.\n%eDay with 1 or 2 digits.\n%fMicroseconds 6 digits.\n%HHour with 2 digits between 00-23.\n%hHour with 2 digits between 01-12.\n%IHour with 2 digits between 01-12.\n%iMinute with 2 digits.\n%jDay of the year (001-366)\n%kHour with 1 digits between 0-23.\n%lHour with 1 digits between 1-12.\n%MFull month name in current locale (Variable lc_time_names).\n%mMonth with 2 digits.\n%pAM/PM according to current locale (Variable lc_time_names).\n%rTime in 12 hour format, followed by AM/PM. Short for '%I:%i:%S %p'.\n%SSeconds with 2 digits.\n%sSeconds with 2 digits.\n%TTime in 24 hour format. Short for '%H:%i:%S'.\n%UWeek number (00-53), when first day of the week is Sunday.\n%uWeek number (00-53), when first day of the week is Monday.\n%VWeek number (01-53), when first day of the week is Sunday. Used with %X.\n%vWeek number (01-53), when first day of the week is Monday. Used with %x.\n%WFull weekday name in current locale (Variable lc_time_names).\n%wDay of the week. 0 = Sunday, 6 = Saturday.\n%XYear with 4 digits when first day of the week is Sunday. Used with %V.\n%xYear with 4 digits when first day of the week is Monday. Used with %v.\n%YYear with 4 digits.\n%yYear with 2 digits.\n%#For str_to_date(), skip all numbers.\n%.For str_to_date(), skip all punctation characters.\n%@For str_to_date(), skip all alpha characters.\n%%A literal % character.\n\n"], "Examples": ["SELECT STR_TO_DATE('Wednesday, June 2, 2014', '%W, %M %e, %Y');\n+---------------------------------------------------------+\n| STR_TO_DATE('Wednesday, June 2, 2014', '%W, %M %e, %Y') |\n+---------------------------------------------------------+\n| 2014-06-02                                              |\n+---------------------------------------------------------+\n\n\nSELECT STR_TO_DATE('Wednesday23423, June 2, 2014', '%W, %M %e, %Y');\n+--------------------------------------------------------------+\n| STR_TO_DATE('Wednesday23423, June 2, 2014', '%W, %M %e, %Y') |\n+--------------------------------------------------------------+\n| NULL                                                         |\n+--------------------------------------------------------------+\n1 row in set, 1 warning (0.00 sec)\n\nSHOW WARNINGS;\n+---------+------+-----------------------------------------------------------------------------------+\n| Level   | Code | Message                                                                           |\n+---------+------+-----------------------------------------------------------------------------------+\n| Warning | 1411 | Incorrect datetime value: 'Wednesday23423, June 2, 2014' for function str_to_date |\n+---------+------+-----------------------------------------------------------------------------------+\n\nSELECT STR_TO_DATE('Wednesday23423, June 2, 2014', '%W%#, %M %e, %Y');\n+----------------------------------------------------------------+\n| STR_TO_DATE('Wednesday23423, June 2, 2014', '%W%#, %M %e, %Y') |\n+----------------------------------------------------------------+\n| 2014-06-02                                                     |\n+----------------------------------------------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/adddate/"], "Title": ["ADDDATE"], "Feature": ["ADDDATE(date,INTERVAL expr unit), ADDDATE(expr,days)\n"], "Description": ["When invoked with the INTERVAL form of the second argument, ADDDATE()\nis a synonym for DATE_ADD(). The related function\nSUBDATE() is a synonym for DATE_SUB(). For\ninformation on the INTERVAL unit argument, see the discussion for\nDATE_ADD().", "When invoked with the days form of the second argument, MariaDB treats it as an\ninteger number of days to be added to expr."], "Examples": ["SELECT DATE_ADD('2008-01-02', INTERVAL 31 DAY);\n+-----------------------------------------+\n| DATE_ADD('2008-01-02', INTERVAL 31 DAY) |\n+-----------------------------------------+\n| 2008-02-02                              |\n+-----------------------------------------+\n\nSELECT ADDDATE('2008-01-02', INTERVAL 31 DAY);\n+----------------------------------------+\n| ADDDATE('2008-01-02', INTERVAL 31 DAY) |\n+----------------------------------------+\n| 2008-02-02                             |\n+----------------------------------------+\n", "SELECT ADDDATE('2008-01-02', 31);\n+---------------------------+\n| ADDDATE('2008-01-02', 31) |\n+---------------------------+\n| 2008-02-02                |\n+---------------------------+\n", "CREATE TABLE t1 (d DATETIME);\nINSERT INTO t1 VALUES\n    (\"2007-01-30 21:31:07\"),\n    (\"1983-10-15 06:42:51\"),\n    (\"2011-04-21 12:34:56\"),\n    (\"2011-10-30 06:31:41\"),\n    (\"2011-01-30 14:03:25\"),\n    (\"2004-10-07 11:19:34\");\n", "SELECT d, ADDDATE(d, 10) from t1;\n+---------------------+---------------------+\n| d                   | ADDDATE(d, 10)      |\n+---------------------+---------------------+\n| 2007-01-30 21:31:07 | 2007-02-09 21:31:07 |\n| 1983-10-15 06:42:51 | 1983-10-25 06:42:51 |\n| 2011-04-21 12:34:56 | 2011-05-01 12:34:56 |\n| 2011-10-30 06:31:41 | 2011-11-09 06:31:41 |\n| 2011-01-30 14:03:25 | 2011-02-09 14:03:25 |\n| 2004-10-07 11:19:34 | 2004-10-17 11:19:34 |\n+---------------------+---------------------+\n\nSELECT d, ADDDATE(d, INTERVAL 10 HOUR) from t1;\n+---------------------+------------------------------+\n| d                   | ADDDATE(d, INTERVAL 10 HOUR) |\n+---------------------+------------------------------+\n| 2007-01-30 21:31:07 | 2007-01-31 07:31:07          |\n| 1983-10-15 06:42:51 | 1983-10-15 16:42:51          |\n| 2011-04-21 12:34:56 | 2011-04-21 22:34:56          |\n| 2011-10-30 06:31:41 | 2011-10-30 16:31:41          |\n| 2011-01-30 14:03:25 | 2011-01-31 00:03:25          |\n| 2004-10-07 11:19:34 | 2004-10-07 21:19:34          |\n+---------------------+------------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/subdate/"], "Title": ["SUBDATE"], "Feature": ["SUBDATE(date,INTERVAL expr unit), SUBDATE(expr,days)\n"], "Description": ["When invoked with the INTERVAL form of the second argument, SUBDATE()\nis a synonym for DATE_SUB(). See Date and Time Units for a complete list of permitted units. ", "The second form allows the use of an integer value for days. In such\ncases, it is interpreted as the number of days to be subtracted from\nthe date or datetime expression expr."], "Examples": ["SELECT DATE_SUB('2008-01-02', INTERVAL 31 DAY);\n+-----------------------------------------+\n| DATE_SUB('2008-01-02', INTERVAL 31 DAY) |\n+-----------------------------------------+\n| 2007-12-02                              |\n+-----------------------------------------+\n\nSELECT SUBDATE('2008-01-02', INTERVAL 31 DAY);\n+----------------------------------------+\n| SUBDATE('2008-01-02', INTERVAL 31 DAY) |\n+----------------------------------------+\n| 2007-12-02                             |\n+----------------------------------------+\n", "SELECT SUBDATE('2008-01-02 12:00:00', 31);\n+------------------------------------+\n| SUBDATE('2008-01-02 12:00:00', 31) |\n+------------------------------------+\n| 2007-12-02 12:00:00                |\n+------------------------------------+\n", "CREATE TABLE t1 (d DATETIME);\nINSERT INTO t1 VALUES\n    (\"2007-01-30 21:31:07\"),\n    (\"1983-10-15 06:42:51\"),\n    (\"2011-04-21 12:34:56\"),\n    (\"2011-10-30 06:31:41\"),\n    (\"2011-01-30 14:03:25\"),\n    (\"2004-10-07 11:19:34\");\n", "SELECT d, SUBDATE(d, 10) from t1;\n+---------------------+---------------------+\n| d                   | SUBDATE(d, 10)      |\n+---------------------+---------------------+\n| 2007-01-30 21:31:07 | 2007-01-20 21:31:07 |\n| 1983-10-15 06:42:51 | 1983-10-05 06:42:51 |\n| 2011-04-21 12:34:56 | 2011-04-11 12:34:56 |\n| 2011-10-30 06:31:41 | 2011-10-20 06:31:41 |\n| 2011-01-30 14:03:25 | 2011-01-20 14:03:25 |\n| 2004-10-07 11:19:34 | 2004-09-27 11:19:34 |\n+---------------------+---------------------+\n\nSELECT d, SUBDATE(d, INTERVAL 10 MINUTE) from t1;\n+---------------------+--------------------------------+\n| d                   | SUBDATE(d, INTERVAL 10 MINUTE) |\n+---------------------+--------------------------------+\n| 2007-01-30 21:31:07 | 2007-01-30 21:21:07            |\n| 1983-10-15 06:42:51 | 1983-10-15 06:32:51            |\n| 2011-04-21 12:34:56 | 2011-04-21 12:24:56            |\n| 2011-10-30 06:31:41 | 2011-10-30 06:21:41            |\n| 2011-01-30 14:03:25 | 2011-01-30 13:53:25            |\n| 2004-10-07 11:19:34 | 2004-10-07 11:09:34            |\n+---------------------+--------------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/subtime/"], "Title": ["SUBTIME"], "Feature": ["SUBTIME(expr1,expr2)\n"], "Description": ["SUBTIME() returns expr1 - expr2 expressed as a value in the same\nformat as expr1. expr1 is a time or datetime expression, and expr2 is\na time expression."], "Examples": ["SELECT SUBTIME('2007-12-31 23:59:59.999999','1 1:1:1.000002');\n+--------------------------------------------------------+\n| SUBTIME('2007-12-31 23:59:59.999999','1 1:1:1.000002') |\n+--------------------------------------------------------+\n| 2007-12-30 22:58:58.999997                             |\n+--------------------------------------------------------+\n\nSELECT SUBTIME('01:00:00.999999', '02:00:00.999998');\n+-----------------------------------------------+\n| SUBTIME('01:00:00.999999', '02:00:00.999998') |\n+-----------------------------------------------+\n| -00:59:59.999999                              |\n+-----------------------------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/sysdate/"], "Title": ["SYSDATE"], "Feature": ["SYSDATE([precision])\n"], "Description": ["Returns the current date and time as a value in 'YYYY-MM-DD HH:MM:SS'\nor YYYYMMDDHHMMSS.uuuuuu format, depending on whether the function is\nused in a string or numeric context.", "The optional precision determines the microsecond precision. See Microseconds in MariaDB.", "SYSDATE() returns the time at which it executes. This differs from the\nbehavior for NOW(), which returns a constant time that indicates the\ntime at which the statement began to execute. (Within a stored routine\nor trigger, NOW() returns the time at which the routine or triggering\nstatement began to execute.)", "In addition, changing the timestamp system variable with a SET timestamp statement affects the value returned by\nNOW() but not by SYSDATE(). This means that timestamp settings in the\nbinary log have no effect on invocations of SYSDATE().", "Because SYSDATE() can return different values even within the same statement, and is not affected by SET TIMESTAMP, it is non-deterministic and therefore unsafe for replication if statement-based binary logging is used. If that is a problem, you can use row-based logging, or start the server with the --sysdate-is-now mariadbd option to cause SYSDATE() to be an alias for NOW(). The non-deterministic nature of SYSDATE() also means that indexes cannot be used for evaluating expressions that refer to it, and that statements using the SYSDATE() function are unsafe for statement-based replication."], "Examples": ["SELECT NOW(), SLEEP(2), NOW();\n+---------------------+----------+---------------------+\n| NOW()               | SLEEP(2) | NOW()               |\n+---------------------+----------+---------------------+\n| 2010-03-27 13:23:40 |        0 | 2010-03-27 13:23:40 |\n+---------------------+----------+---------------------+\n\nSELECT SYSDATE(), SLEEP(2), SYSDATE();\n+---------------------+----------+---------------------+\n| SYSDATE()           | SLEEP(2) | SYSDATE()           |\n+---------------------+----------+---------------------+\n| 2010-03-27 13:23:52 |        0 | 2010-03-27 13:23:54 |\n+---------------------+----------+---------------------+\n", "SELECT SYSDATE(4);\n+--------------------------+\n| SYSDATE(4)               |\n+--------------------------+\n| 2018-07-10 10:17:13.1689 |\n+--------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/time-function/"], "Title": ["TIME Function"], "Feature": ["TIME(expr)\n"], "Description": ["Extracts the time part of the time or datetime expression expr and\nreturns it as a string."], "Examples": ["SELECT TIME('2003-12-31 01:02:03');\n+-----------------------------+\n| TIME('2003-12-31 01:02:03') |\n+-----------------------------+\n| 01:02:03                    |\n+-----------------------------+\n\nSELECT TIME('2003-12-31 01:02:03.000123');\n+------------------------------------+\n| TIME('2003-12-31 01:02:03.000123') |\n+------------------------------------+\n| 01:02:03.000123                    |\n+------------------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/timediff/"], "Title": ["TIMEDIFF"], "Feature": ["TIMEDIFF(expr1,expr2)\n"], "Description": ["TIMEDIFF() returns expr1 - expr2 expressed as a time value. expr1 and\nexpr2 are time or date-and-time expressions, but both must be of the\nsame type."], "Examples": ["SELECT TIMEDIFF('2000:01:01 00:00:00', '2000:01:01 00:00:00.000001');\n+---------------------------------------------------------------+\n| TIMEDIFF('2000:01:01 00:00:00', '2000:01:01 00:00:00.000001') |\n+---------------------------------------------------------------+\n| -00:00:00.000001                                              |\n+---------------------------------------------------------------+\n\nSELECT TIMEDIFF('2008-12-31 23:59:59.000001', '2008-12-30 01:01:01.000002');\n+----------------------------------------------------------------------+\n| TIMEDIFF('2008-12-31 23:59:59.000001', '2008-12-30 01:01:01.000002') |\n+----------------------------------------------------------------------+\n| 46:58:57.999999                                                      |\n+----------------------------------------------------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/timestamp-function/"], "Title": ["TIMESTAMP FUNCTION"], "Feature": ["TIMESTAMP(expr), TIMESTAMP(expr1,expr2)\n"], "Description": ["With a single argument, this function returns the date or datetime\nexpression expr as a datetime value. With two arguments, it adds the\ntime expression expr2 to the date or datetime expression expr1 and\nreturns the result as a datetime value."], "Examples": ["SELECT TIMESTAMP('2003-12-31');\n+-------------------------+\n| TIMESTAMP('2003-12-31') |\n+-------------------------+\n| 2003-12-31 00:00:00     |\n+-------------------------+\n\nSELECT TIMESTAMP('2003-12-31 12:00:00','6:30:00');\n+--------------------------------------------+\n| TIMESTAMP('2003-12-31 12:00:00','6:30:00') |\n+--------------------------------------------+\n| 2003-12-31 18:30:00                        |\n+--------------------------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/timestampadd/"], "Title": ["TIMESTAMPADD"], "Feature": ["TIMESTAMPADD(unit,interval,datetime_expr)\n"], "Description": ["Adds the integer expression interval to the date or datetime\nexpression datetime_expr. The unit for interval is given by the unit\nargument, which should be one of the following values: MICROSECOND, SECOND, MINUTE, HOUR, DAY, WEEK, MONTH, QUARTER, or YEAR.", "The unit value may be specified using one of keywords as shown, or\nwith a prefix of SQL_TSI_. For example, DAY and SQL_TSI_DAY both are\nlegal.", "Before MariaDB 5.5, FRAC_SECOND was permitted as a synonym for MICROSECOND."], "Examples": ["SELECT TIMESTAMPADD(MINUTE,1,'2003-01-02');\n+-------------------------------------+\n| TIMESTAMPADD(MINUTE,1,'2003-01-02') |\n+-------------------------------------+\n| 2003-01-02 00:01:00                 |\n+-------------------------------------+\n\nSELECT TIMESTAMPADD(WEEK,1,'2003-01-02');\n+-----------------------------------+\n| TIMESTAMPADD(WEEK,1,'2003-01-02') |\n+-----------------------------------+\n| 2003-01-09                        |\n+-----------------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/timestampdiff/"], "Title": ["TIMESTAMPDIFF"], "Feature": ["TIMESTAMPDIFF(unit,datetime_expr1,datetime_expr2)\n"], "Description": ["Returns datetime_expr2 - datetime_expr1, where datetime_expr1 and\ndatetime_expr2 are date or datetime expressions. One expression may be\na date and the other a datetime; a date value is treated as a datetime\nhaving the time part '00:00:00' where necessary. The unit for the\nresult (an integer) is given by the unit argument. The legal values\nfor unit are the same as those listed in the description of the\nTIMESTAMPADD() function, i.e  MICROSECOND, SECOND, MINUTE, HOUR, DAY, WEEK, MONTH, QUARTER, or YEAR.", "TIMESTAMPDIFF can also be used to calculate age."], "Examples": ["SELECT TIMESTAMPDIFF(MONTH,'2003-02-01','2003-05-01');\n+------------------------------------------------+\n| TIMESTAMPDIFF(MONTH,'2003-02-01','2003-05-01') |\n+------------------------------------------------+\n|                                              3 |\n+------------------------------------------------+\n\nSELECT TIMESTAMPDIFF(YEAR,'2002-05-01','2001-01-01');\n+-----------------------------------------------+\n| TIMESTAMPDIFF(YEAR,'2002-05-01','2001-01-01') |\n+-----------------------------------------------+\n|                                            -1 |\n+-----------------------------------------------+\n\nSELECT TIMESTAMPDIFF(MINUTE,'2003-02-01','2003-05-01 12:05:55');\n+----------------------------------------------------------+\n| TIMESTAMPDIFF(MINUTE,'2003-02-01','2003-05-01 12:05:55') |\n+----------------------------------------------------------+\n|                                                   128885 |\n+----------------------------------------------------------+\n", "SELECT CURDATE();\n+------------+\n| CURDATE()  |\n+------------+\n| 2019-05-27 |\n+------------+\n\nSELECT TIMESTAMPDIFF(YEAR, '1971-06-06', CURDATE()) AS age;\n+------+\n| age  |\n+------+\n|   47 |\n+------+\n\nSELECT TIMESTAMPDIFF(YEAR, '1971-05-06', CURDATE()) AS age;\n+------+\n| age  |\n+------+\n|   48 |\n+------+\n", "SELECT name, date_of_birth, TIMESTAMPDIFF(YEAR,date_of_birth,'2014-08-02') AS age \n  FROM student_details;\n+---------+---------------+------+\n| name    | date_of_birth | age  |\n+---------+---------------+------+\n| Chun    | 1993-12-31    |   20 |\n| Esben   | 1946-01-01    |   68 |\n| Kaolin  | 1996-07-16    |   18 |\n| Tatiana | 1988-04-13    |   26 |\n+---------+---------------+------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/time_format/"], "Title": ["TIME_FORMAT"], "Feature": ["TIME_FORMAT(time,format)\n"], "Description": ["This is used like the DATE_FORMAT() function, but the format string\nmay contain format specifiers only for hours, minutes, and seconds.\nOther specifiers produce a NULL value or 0."], "Examples": ["SELECT TIME_FORMAT('100:00:00', '%H %k %h %I %l');\n+--------------------------------------------+\n| TIME_FORMAT('100:00:00', '%H %k %h %I %l') |\n+--------------------------------------------+\n| 100 100 04 04 4                            |\n+--------------------------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/time_to_sec/"], "Title": ["TIME_TO_SEC"], "Feature": ["TIME_TO_SEC(time)\n"], "Description": ["Returns the time argument, converted to seconds.", "The value returned by TIME_TO_SEC is of type DOUBLE. Before MariaDB 5.3 (and MySQL 5.6), the type was INT. The returned value preserves microseconds of the argument. See also Microseconds in MariaDB."], "Examples": ["SELECT TIME_TO_SEC('22:23:00');\n+-------------------------+\n| TIME_TO_SEC('22:23:00') |\n+-------------------------+\n|                   80580 |\n+-------------------------+\n", "SELECT TIME_TO_SEC('00:39:38');\n+-------------------------+\n| TIME_TO_SEC('00:39:38') |\n+-------------------------+\n|                    2378 |\n+-------------------------+\n", "SELECT TIME_TO_SEC('09:12:55.2355');\n+------------------------------+\n| TIME_TO_SEC('09:12:55.2355') |\n+------------------------------+\n|                   33175.2355 |\n+------------------------------+\n1 row in set (0.000 sec)\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/to_days/"], "Title": ["TO_DAYS"], "Feature": ["TO_DAYS(date)\n"], "Description": ["Given a date date, returns the number of days since the start of the current calendar (0000-00-00).", "The function is not designed for use with dates before the advent of the Gregorian calendar in October 1582. Results will not be reliable since it doesn't account for the lost days when the calendar changed from the Julian calendar.", "This is the converse of the FROM_DAYS() function."], "Examples": ["SELECT TO_DAYS('2007-10-07');\n+-----------------------+\n| TO_DAYS('2007-10-07') |\n+-----------------------+\n|                733321 |\n+-----------------------+\n\nSELECT TO_DAYS('0000-01-01');\n+-----------------------+\n| TO_DAYS('0000-01-01') |\n+-----------------------+\n|                     1 |\n+-----------------------+\n\nSELECT TO_DAYS(950501);\n+-----------------+\n| TO_DAYS(950501) |\n+-----------------+\n|          728779 |\n+-----------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/to_seconds/"], "Title": ["TO_SECONDS"], "Feature": ["TO_SECONDS(expr)\n"], "Description": ["Returns the number of seconds from year 0 till expr, or NULL if expr is not a valid date or datetime."], "Examples": ["SELECT TO_SECONDS('2013-06-13');\n+--------------------------+\n| TO_SECONDS('2013-06-13') |\n+--------------------------+\n|              63538300800 |\n+--------------------------+\n\nSELECT TO_SECONDS('2013-06-13 21:45:13');\n+-----------------------------------+\n| TO_SECONDS('2013-06-13 21:45:13') |\n+-----------------------------------+\n|                       63538379113 |\n+-----------------------------------+\n\nSELECT TO_SECONDS(NOW());\n+-------------------+\n| TO_SECONDS(NOW()) |\n+-------------------+\n|       63543530875 |\n+-------------------+\n\nSELECT TO_SECONDS(20130513);\n+----------------------+\n| TO_SECONDS(20130513) |\n+----------------------+\n|          63535622400 |\n+----------------------+\n1 row in set (0.00 sec)\n\nSELECT TO_SECONDS(130513);\n+--------------------+\n| TO_SECONDS(130513) |\n+--------------------+\n|        63535622400 |\n+--------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/unix_timestamp/"], "Title": ["UNIX_TIMESTAMP"], "Feature": ["UNIX_TIMESTAMP()\nUNIX_TIMESTAMP(date)\n"], "Description": ["If called with no argument, returns a Unix timestamp (seconds since\n'1970-01-01 00:00:00' UTC) as an unsigned integer. If UNIX_TIMESTAMP()\nis called with a date argument, it returns the value of the argument as seconds\nsince '1970-01-01 00:00:00' UTC. date may be a DATE string, a\nDATETIME string, a TIMESTAMP, or a number in\nthe format YYMMDD or YYYYMMDD. The server interprets date as a value in the\ncurrent time zone and converts it to an internal value in UTC. Clients can set\ntheir time zone as described in time zones.", "The inverse function of UNIX_TIMESTAMP() is FROM_UNIXTIME()", "UNIX_TIMESTAMP() supports microseconds.", "Timestamps in MariaDB have a maximum value of 2147483647, equivalent to 2038-01-19 05:14:07. This is due to the underlying 32-bit limitation. Using the function on a date beyond this will result in NULL being returned. Use DATETIME as a storage type if you require dates beyond this.\n", "Error Handling", "Returns NULL for wrong arguments to UNIX_TIMESTAMP(). In MySQL and MariaDB before 5.3 wrong arguments to UNIX_TIMESTAMP() returned 0. ", "Compatibility", "As you can see in the examples above, UNIX_TIMESTAMP(constant-date-string) returns a timestamp with 6 decimals while MariaDB 5.2 and before returns it without decimals. This can cause a problem if you are using UNIX_TIMESTAMP() as a partitioning function. You can fix this by using FLOOR(UNIX_TIMESTAMP(..)) or changing the date string to a date number, like 20080101000000. "], "Examples": ["SELECT UNIX_TIMESTAMP();\n+------------------+\n| UNIX_TIMESTAMP() |\n+------------------+\n|       1269711082 |\n+------------------+\n\nSELECT UNIX_TIMESTAMP('2007-11-30 10:30:19');\n+---------------------------------------+\n| UNIX_TIMESTAMP('2007-11-30 10:30:19') |\n+---------------------------------------+\n|                     1196436619.000000 |\n+---------------------------------------+\n\nSELECT UNIX_TIMESTAMP(\"2007-11-30 10:30:19.123456\");\n+----------------------------------------------+\n| unix_timestamp(\"2007-11-30 10:30:19.123456\") |\n+----------------------------------------------+\n|                            1196411419.123456 |\n+----------------------------------------------+\n\nSELECT FROM_UNIXTIME(UNIX_TIMESTAMP('2007-11-30 10:30:19'));\n+------------------------------------------------------+\n| FROM_UNIXTIME(UNIX_TIMESTAMP('2007-11-30 10:30:19')) |\n+------------------------------------------------------+\n| 2007-11-30 10:30:19.000000                           |\n+------------------------------------------------------+\n\nSELECT FROM_UNIXTIME(FLOOR(UNIX_TIMESTAMP('2007-11-30 10:30:19')));\n+-------------------------------------------------------------+\n| FROM_UNIXTIME(FLOOR(UNIX_TIMESTAMP('2007-11-30 10:30:19'))) |\n+-------------------------------------------------------------+\n| 2007-11-30 10:30:19                                         |\n+-------------------------------------------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/utc_date/"], "Title": ["UTC_DATE"], "Feature": ["UTC_DATE, UTC_DATE()\n"], "Description": ["Returns the current UTC date as a value in 'YYYY-MM-DD' or YYYYMMDD\nformat, depending on whether the function is used in a string or numeric context. "], "Examples": ["SELECT UTC_DATE(), UTC_DATE() + 0;\n+------------+----------------+\n| UTC_DATE() | UTC_DATE() + 0 |\n+------------+----------------+\n| 2010-03-27 |       20100327 |\n+------------+----------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/utc_time/"], "Title": ["UTC_TIME"], "Feature": ["UTC_TIME\nUTC_TIME([precision])\n"], "Description": ["Returns the current UTC time as a value in 'HH:MM:SS' or HHMMSS.uuuuuu format, depending on whether the function is used in a string or numeric context. ", "The optional precision determines the microsecond precision. See Microseconds in MariaDB."], "Examples": ["SELECT UTC_TIME(), UTC_TIME() + 0;\n+------------+----------------+\n| UTC_TIME() | UTC_TIME() + 0 |\n+------------+----------------+\n| 17:32:34   |  173234.000000 |\n+------------+----------------+\n", "SELECT UTC_TIME(5);\n+----------------+\n| UTC_TIME(5)    |\n+----------------+\n| 07:52:50.78369 |\n+----------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/utc_timestamp/"], "Title": ["UTC_TIMESTAMP"], "Feature": ["UTC_TIMESTAMP\nUTC_TIMESTAMP([precision])\n"], "Description": ["Returns the current UTC date and time as a value in 'YYYY-MM-DD\nHH:MM:SS' or YYYYMMDDHHMMSS.uuuuuu format, depending on whether the\nfunction is used in a string or numeric context.", "The optional precision determines the microsecond precision. See Microseconds in MariaDB."], "Examples": ["SELECT UTC_TIMESTAMP(), UTC_TIMESTAMP() + 0;\n+---------------------+-----------------------+\n| UTC_TIMESTAMP()     | UTC_TIMESTAMP() + 0   |\n+---------------------+-----------------------+\n| 2010-03-27 17:33:16 | 20100327173316.000000 |\n+---------------------+-----------------------+\n", "SELECT UTC_TIMESTAMP(4);\n+--------------------------+\n| UTC_TIMESTAMP(4)         |\n+--------------------------+\n| 2018-07-10 07:51:09.1019 |\n+--------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/week/"], "Title": ["WEEK"], "Feature": ["WEEK(date[,mode])\n"], "Description": ["This function returns the week number for date. The two-argument form of\nWEEK() allows you to specify whether the week starts on Sunday or Monday\nand whether the return value should be in the range from 0 to 53 or from 1 to\n53. If the mode argument is omitted, the value of the default_week_format system variable is used.", "Modes", "Mode1st day of weekRangeWeek 1 is the 1st week with\n0Sunday0-53a Sunday in this year\n1Monday0-53more than 3 days this year\n2Sunday1-53a Sunday in this year\n3Monday1-53more than 3 days this year\n4Sunday0-53more than 3 days this year\n5Monday0-53a Monday in this year\n6Sunday1-53more than 3 days this year\n7Monday1-53a Monday in this year\n\n", "With the mode value of 3, which means 'more than 3 days this year',  weeks are numbered according to ISO 8601:1988."], "Examples": ["SELECT WEEK('2008-02-20');\n+--------------------+\n| WEEK('2008-02-20') |\n+--------------------+\n|                  7 |\n+--------------------+\n\nSELECT WEEK('2008-02-20',0);\n+----------------------+\n| WEEK('2008-02-20',0) |\n+----------------------+\n|                    7 |\n+----------------------+\n\nSELECT WEEK('2008-02-20',1);\n+----------------------+\n| WEEK('2008-02-20',1) |\n+----------------------+\n|                    8 |\n+----------------------+\n\nSELECT WEEK('2008-12-31',0);\n+----------------------+\n| WEEK('2008-12-31',0) |\n+----------------------+\n|                   52 |\n+----------------------+\n\nSELECT WEEK('2008-12-31',1);\n+----------------------+\n| WEEK('2008-12-31',1) |\n+----------------------+\n|                   53 |\n+----------------------+\n\n SELECT WEEK('2019-12-30',3);\n+----------------------+\n| WEEK('2019-12-30',3) |\n+----------------------+\n|                    1 |\n+----------------------+\n", "CREATE TABLE t1 (d DATETIME);\nINSERT INTO t1 VALUES\n    (\"2007-01-30 21:31:07\"),\n    (\"1983-10-15 06:42:51\"),\n    (\"2011-04-21 12:34:56\"),\n    (\"2011-10-30 06:31:41\"),\n    (\"2011-01-30 14:03:25\"),\n    (\"2004-10-07 11:19:34\");\n", "SELECT d, WEEK(d,0), WEEK(d,1) from t1;\n+---------------------+-----------+-----------+\n| d                   | WEEK(d,0) | WEEK(d,1) |\n+---------------------+-----------+-----------+\n| 2007-01-30 21:31:07 |         4 |         5 |\n| 1983-10-15 06:42:51 |        41 |        41 |\n| 2011-04-21 12:34:56 |        16 |        16 |\n| 2011-10-30 06:31:41 |        44 |        43 |\n| 2011-01-30 14:03:25 |         5 |         4 |\n| 2004-10-07 11:19:34 |        40 |        41 |\n+---------------------+-----------+-----------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/weekday/"], "Title": ["WEEKDAY"], "Feature": ["WEEKDAY(date)\n"], "Description": ["Returns the weekday index for date \n(0 = Monday, 1 = Tuesday, ... 6 = Sunday).", "This contrasts with DAYOFWEEK() which follows the ODBC standard\n(1 = Sunday, 2 = Monday, ..., 7 = Saturday)."], "Examples": ["SELECT WEEKDAY('2008-02-03 22:23:00');\n+--------------------------------+\n| WEEKDAY('2008-02-03 22:23:00') |\n+--------------------------------+\n|                              6 |\n+--------------------------------+\n\nSELECT WEEKDAY('2007-11-06');\n+-----------------------+\n| WEEKDAY('2007-11-06') |\n+-----------------------+\n|                     1 |\n+-----------------------+\n", "CREATE TABLE t1 (d DATETIME);\nINSERT INTO t1 VALUES\n    (\"2007-01-30 21:31:07\"),\n    (\"1983-10-15 06:42:51\"),\n    (\"2011-04-21 12:34:56\"),\n    (\"2011-10-30 06:31:41\"),\n    (\"2011-01-30 14:03:25\"),\n    (\"2004-10-07 11:19:34\");\n", "SELECT d FROM t1 where WEEKDAY(d) = 6;\n+---------------------+\n| d                   |\n+---------------------+\n| 2011-10-30 06:31:41 |\n| 2011-01-30 14:03:25 |\n+---------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/weekofyear/"], "Title": ["WEEKOFYEAR"], "Feature": ["WEEKOFYEAR(date)\n"], "Description": ["Returns the calendar week of the date as a number in the range from 1\nto 53. WEEKOFYEAR() is a compatibility function that is equivalent to\nWEEK(date,3)."], "Examples": ["SELECT WEEKOFYEAR('2008-02-20');\n+--------------------------+\n| WEEKOFYEAR('2008-02-20') |\n+--------------------------+\n|                        8 |\n+--------------------------+\n", "CREATE TABLE t1 (d DATETIME);\nINSERT INTO t1 VALUES\n    (\"2007-01-30 21:31:07\"),\n    (\"1983-10-15 06:42:51\"),\n    (\"2011-04-21 12:34:56\"),\n    (\"2011-10-30 06:31:41\"),\n    (\"2011-01-30 14:03:25\"),\n    (\"2004-10-07 11:19:34\");\n", " select * from t1;\n+---------------------+\n| d                   |\n+---------------------+\n| 2007-01-30 21:31:07 |\n| 1983-10-15 06:42:51 |\n| 2011-04-21 12:34:56 |\n| 2011-10-30 06:31:41 |\n| 2011-01-30 14:03:25 |\n| 2004-10-07 11:19:34 |\n+---------------------+\n", "SELECT d, WEEKOFYEAR(d), WEEK(d,3) from t1;\n+---------------------+---------------+-----------+\n| d                   | WEEKOFYEAR(d) | WEEK(d,3) |\n+---------------------+---------------+-----------+\n| 2007-01-30 21:31:07 |             5 |         5 |\n| 1983-10-15 06:42:51 |            41 |        41 |\n| 2011-04-21 12:34:56 |            16 |        16 |\n| 2011-10-30 06:31:41 |            43 |        43 |\n| 2011-01-30 14:03:25 |             4 |         4 |\n| 2004-10-07 11:19:34 |            41 |        41 |\n+---------------------+---------------+-----------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/year/"], "Title": ["YEAR"], "Feature": ["YEAR(date)\n"], "Description": ["Returns the year for the given date, in the range 1000 to 9999, or 0 for the\n\"zero\" date."], "Examples": ["CREATE TABLE t1 (d DATETIME);\nINSERT INTO t1 VALUES\n    (\"2007-01-30 21:31:07\"),\n    (\"1983-10-15 06:42:51\"),\n    (\"2011-04-21 12:34:56\"),\n    (\"2011-10-30 06:31:41\"),\n    (\"2011-01-30 14:03:25\"),\n    (\"2004-10-07 11:19:34\");\n", "SELECT * FROM t1;\n+---------------------+\n| d                   |\n+---------------------+\n| 2007-01-30 21:31:07 |\n| 1983-10-15 06:42:51 |\n| 2011-04-21 12:34:56 |\n| 2011-10-30 06:31:41 |\n| 2011-01-30 14:03:25 |\n| 2004-10-07 11:19:34 |\n+---------------------+\n\nSELECT * FROM t1 WHERE YEAR(d) = 2011;\n+---------------------+\n| d                   |\n+---------------------+\n| 2011-04-21 12:34:56 |\n| 2011-10-30 06:31:41 |\n| 2011-01-30 14:03:25 |\n+---------------------+\n", "SELECT YEAR('1987-01-01');\n+--------------------+\n| YEAR('1987-01-01') |\n+--------------------+\n|               1987 |\n+--------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/addtime/"], "Title": ["ADDTIME"], "Feature": ["ADDTIME(expr1,expr2)\n"], "Description": ["ADDTIME() adds expr2 to expr1 and returns the result. expr1 is a time\nor datetime expression, and expr2 is a time expression."], "Examples": ["SELECT ADDTIME('2007-12-31 23:59:59.999999', '1 1:1:1.000002');\n+---------------------------------------------------------+\n| ADDTIME('2007-12-31 23:59:59.999999', '1 1:1:1.000002') |\n+---------------------------------------------------------+\n| 2008-01-02 01:01:01.000001                              |\n+---------------------------------------------------------+\n\nSELECT ADDTIME('01:00:00.999999', '02:00:00.999998');\n+-----------------------------------------------+\n| ADDTIME('01:00:00.999999', '02:00:00.999998') |\n+-----------------------------------------------+\n| 03:00:01.999997                               |\n+-----------------------------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/yearweek/"], "Title": ["YEARWEEK"], "Feature": ["YEARWEEK(date), YEARWEEK(date,mode)\n"], "Description": ["Returns year and week for a date. The mode argument works exactly like the mode\nargument to WEEK(). The year in the result may be different from the\nyear in the date argument for the first and the last week of the year."], "Examples": ["SELECT YEARWEEK('1987-01-01');\n+------------------------+\n| YEARWEEK('1987-01-01') |\n+------------------------+\n|                 198652 |\n+------------------------+\n", "CREATE TABLE t1 (d DATETIME);\nINSERT INTO t1 VALUES\n    (\"2007-01-30 21:31:07\"),\n    (\"1983-10-15 06:42:51\"),\n    (\"2011-04-21 12:34:56\"),\n    (\"2011-10-30 06:31:41\"),\n    (\"2011-01-30 14:03:25\"),\n    (\"2004-10-07 11:19:34\");\n", "SELECT * FROM t1;\n+---------------------+\n| d                   |\n+---------------------+\n| 2007-01-30 21:31:07 |\n| 1983-10-15 06:42:51 |\n| 2011-04-21 12:34:56 |\n| 2011-10-30 06:31:41 |\n| 2011-01-30 14:03:25 |\n| 2004-10-07 11:19:34 |\n+---------------------+\n6 rows in set (0.02 sec)\n", "SELECT YEARWEEK(d) FROM t1 WHERE YEAR(d) = 2011;\n+-------------+\n| YEARWEEK(d) |\n+-------------+\n|      201116 |\n|      201144 |\n|      201105 |\n+-------------+\n3 rows in set (0.03 sec)\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/convert_tz/"], "Title": ["CONVERT_TZ"], "Feature": ["CONVERT_TZ(dt,from_tz,to_tz)\n"], "Description": ["CONVERT_TZ() converts a datetime value dt from the time zone given by from_tz to the time zone given by to_tz and returns the resulting value.", "In order to use named time zones, such as GMT, MET or Africa/Johannesburg, the time_zone tables must be loaded (see mysql_tzinfo_to_sql).", "No conversion will take place if the value falls outside of the supported TIMESTAMP range ('1970-01-01 00:00:01' to '2038-01-19 05:14:07' UTC) when converted from from_tz to UTC.", "This function returns NULL if the arguments are invalid (or named time zones have not been loaded).", "See time zones for more information."], "Examples": ["SELECT CONVERT_TZ('2016-01-01 12:00:00','+00:00','+10:00');\n+-----------------------------------------------------+\n| CONVERT_TZ('2016-01-01 12:00:00','+00:00','+10:00') |\n+-----------------------------------------------------+\n| 2016-01-01 22:00:00                                 |\n+-----------------------------------------------------+\n", "SELECT CONVERT_TZ('2016-01-01 12:00:00','GMT','Africa/Johannesburg');\n+---------------------------------------------------------------+\n| CONVERT_TZ('2016-01-01 12:00:00','GMT','Africa/Johannesburg') |\n+---------------------------------------------------------------+\n| 2016-01-01 14:00:00                                           |\n+---------------------------------------------------------------+\n", "SELECT CONVERT_TZ('1969-12-31 22:00:00','+00:00','+10:00');\n+-----------------------------------------------------+\n| CONVERT_TZ('1969-12-31 22:00:00','+00:00','+10:00') |\n+-----------------------------------------------------+\n| 1969-12-31 22:00:00                                 |\n+-----------------------------------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/add_months/"], "Title": ["ADD_MONTHS"], "Feature": ["ADD_MONTHS(date, months)\n"], "Description": ["ADD_MONTHS adds an integer months to a given date (DATE, DATETIME or TIMESTAMP), returning the resulting date.", "months can be positive or negative.  If months is not a whole number, then it will be rounded to the nearest whole number (not truncated).", "The resulting day component will remain the same as that specified in date, unless the resulting month has fewer days than the day component of the given date, in which case the day will be the last day of the resulting month.", "Returns NULL if given an invalid date, or a NULL argument."], "Examples": ["SELECT ADD_MONTHS('2012-01-31', 2);\n+-----------------------------+\n| ADD_MONTHS('2012-01-31', 2) |\n+-----------------------------+\n| 2012-03-31                  |\n+-----------------------------+\n\nSELECT ADD_MONTHS('2012-01-31', -5);\n+------------------------------+\n| ADD_MONTHS('2012-01-31', -5) |\n+------------------------------+\n| 2011-08-31                   |\n+------------------------------+\n\nSELECT ADD_MONTHS('2011-01-31', 1);\n+-----------------------------+\n| ADD_MONTHS('2011-01-31', 1) |\n+-----------------------------+\n| 2011-02-28                  |\n+-----------------------------+\n\nSELECT ADD_MONTHS('2012-01-31', 1);\n+-----------------------------+\n| ADD_MONTHS('2012-01-31', 1) |\n+-----------------------------+\n| 2012-02-29                  |\n+-----------------------------+\n\nSELECT ADD_MONTHS('2012-01-31', 2);\n+-----------------------------+\n| ADD_MONTHS('2012-01-31', 2) |\n+-----------------------------+\n| 2012-03-31                  |\n+-----------------------------+\n\nSELECT ADD_MONTHS('2012-01-31', 3);\n+-----------------------------+\n| ADD_MONTHS('2012-01-31', 3) |\n+-----------------------------+\n| 2012-04-30                  |\n+-----------------------------+\n\nSELECT ADD_MONTHS('2011-01-15', 2.5);\n+-------------------------------+\n| ADD_MONTHS('2011-01-15', 2.5) |\n+-------------------------------+\n| 2011-04-15                    |\n+-------------------------------+\n1 row in set (0.001 sec)\n\nSELECT ADD_MONTHS('2011-01-15', 2.6);\n+-------------------------------+\n| ADD_MONTHS('2011-01-15', 2.6) |\n+-------------------------------+\n| 2011-04-15                    |\n+-------------------------------+\n1 row in set (0.001 sec)\n\nSELECT ADD_MONTHS('2011-01-15', 2.1);\n+-------------------------------+\n| ADD_MONTHS('2011-01-15', 2.1) |\n+-------------------------------+\n| 2011-03-15                    |\n+-------------------------------+\n1 row in set (0.004 sec)\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/curdate/"], "Title": ["CURDATE"], "Feature": ["CURDATE()\nCURRENT_DATE\nCURRENT_DATE()\n"], "Description": ["CURDATE returns the current date as a value in 'YYYY-MM-DD' or YYYYMMDD\nformat, depending on whether the function is used in a string or\nnumeric context.", "CURRENT_DATE and CURRENT_DATE() are synonyms."], "Examples": ["SELECT CURDATE();\n+------------+\n| CURDATE()  |\n+------------+\n| 2019-03-05 |\n+------------+\n", "SELECT CURDATE() +0;\n+--------------+\n| CURDATE() +0 |\n+--------------+\n|     20190305 |\n+--------------+\n", "SELECT CURDATE() - INTERVAL 5 DAY;\n+----------------------------+\n| CURDATE() - INTERVAL 5 DAY |\n+----------------------------+\n| 2019-02-28                 |\n+----------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/current_date/"], "Title": ["CURRENT_DATE"], "Feature": ["CURRENT_DATE, CURRENT_DATE()\n"], "Description": ["CURRENT_DATE and CURRENT_DATE() are synonyms for CURDATE()."], "Examples": [], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/current_time/"], "Title": ["CURRENT_TIME"], "Feature": ["CURRENT_TIME\nCURRENT_TIME([precision])\n"], "Description": ["CURRENT_TIME and CURRENT_TIME() are synonyms for CURTIME()."], "Examples": [], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/current_timestamp/"], "Title": ["CURRENT_TIMESTAMP"], "Feature": ["CURRENT_TIMESTAMP\nCURRENT_TIMESTAMP([precision])\n"], "Description": ["CURRENT_TIMESTAMP and CURRENT_TIMESTAMP() are synonyms for NOW()."], "Examples": [], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/curtime/"], "Title": ["CURTIME"], "Feature": ["CURTIME([precision])\n"], "Description": ["Returns the current time as a value in 'HH:MM:SS' or HHMMSS.uuuuuu format, depending on whether the function is used in a string or numeric context. The value is expressed in the current time zone.", "The optional precision determines the microsecond precision. See Microseconds in MariaDB."], "Examples": ["SELECT CURTIME();\n+-----------+\n| CURTIME() |\n+-----------+\n| 12:45:39  |\n+-----------+\n\nSELECT CURTIME() + 0;\n+---------------+\n| CURTIME() + 0 |\n+---------------+\n| 124545.000000 |\n+---------------+\n", "SELECT CURTIME(2);\n+-------------+\n| CURTIME(2)  |\n+-------------+\n| 09:49:08.09 |\n+-------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/date-function/"], "Title": ["DATE FUNCTION"], "Feature": ["DATE(expr)\n"], "Description": ["Extracts the date part of the date or datetime expression expr. Returns NULL and throws a warning when passed an invalid date."], "Examples": ["SELECT DATE('2013-07-18 12:21:32');\n+-----------------------------+\n| DATE('2013-07-18 12:21:32') |\n+-----------------------------+\n| 2013-07-18                  |\n+-----------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/datediff/"], "Title": ["DATEDIFF"], "Feature": ["DATEDIFF(expr1,expr2)\n"], "Description": ["DATEDIFF() returns (expr1 \u2013 expr2) expressed\nas a value in days from one date to the other. expr1 and expr2 are date\nor date-and-time expressions. Only the date parts of the values are used in the\ncalculation."], "Examples": ["SELECT DATEDIFF('2007-12-31 23:59:59','2007-12-30');\n+----------------------------------------------+\n| DATEDIFF('2007-12-31 23:59:59','2007-12-30') |\n+----------------------------------------------+\n|                                            1 |\n+----------------------------------------------+\n\nSELECT DATEDIFF('2010-11-30 23:59:59','2010-12-31');\n+----------------------------------------------+\n| DATEDIFF('2010-11-30 23:59:59','2010-12-31') |\n+----------------------------------------------+\n|                                          -31 |\n+----------------------------------------------+\n", "CREATE TABLE t1 (d DATETIME);\nINSERT INTO t1 VALUES\n    (\"2007-01-30 21:31:07\"),\n    (\"1983-10-15 06:42:51\"),\n    (\"2011-04-21 12:34:56\"),\n    (\"2011-10-30 06:31:41\"),\n    (\"2011-01-30 14:03:25\"),\n    (\"2004-10-07 11:19:34\");\n", "SELECT NOW();\n+---------------------+\n| NOW()               |\n+---------------------+\n| 2011-05-23 10:56:05 |\n+---------------------+\n\nSELECT d, DATEDIFF(NOW(),d) FROM t1;\n+---------------------+-------------------+\n| d                   | DATEDIFF(NOW(),d) |\n+---------------------+-------------------+\n| 2007-01-30 21:31:07 |              1574 |\n| 1983-10-15 06:42:51 |             10082 |\n| 2011-04-21 12:34:56 |                32 |\n| 2011-10-30 06:31:41 |              -160 |\n| 2011-01-30 14:03:25 |               113 |\n| 2004-10-07 11:19:34 |              2419 |\n+---------------------+-------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/date_add/"], "Title": ["DATE_ADD"], "Feature": ["DATE_ADD(date,INTERVAL expr unit)\n"], "Description": ["Performs date arithmetic. The date argument specifies the\nstarting date or datetime value. expr is an expression specifying the\ninterval value to be added to the starting date. expr is a\nstring; it may start with a \"-\" for negative intervals. unit is a\nkeyword indicating the units in which the expression should be interpreted. See Date and Time Units for a complete list of permitted units. ", "The result type of DATE_ADD() is determined as follows:", "if the first argument is of the type DATETIME, the function returns DATETIME\nif the first argument is DATE and the interval uses HOUR or smaller units, the function returns DATETIME\nif the first argument is DATE and the interval uses DAY or larger units, the function returns DATE\nsimilarly, if the first argument is TIME and the interval uses DAY or smaller units the function returns TIME, if the interval uses anything larger, the function returns DATETIME\nif the first argument isn't a temporal type, the function returns a string\n"], "Examples": ["SELECT '2008-12-31 23:59:59' + INTERVAL 1 SECOND;\n+-------------------------------------------+\n| '2008-12-31 23:59:59' + INTERVAL 1 SECOND |\n+-------------------------------------------+\n| 2009-01-01 00:00:00                       |\n+-------------------------------------------+\n", "SELECT INTERVAL 1 DAY + '2008-12-31';\n+-------------------------------+\n| INTERVAL 1 DAY + '2008-12-31' |\n+-------------------------------+\n| 2009-01-01                    |\n+-------------------------------+\n", "SELECT '2005-01-01' - INTERVAL 1 SECOND;\n+----------------------------------+\n| '2005-01-01' - INTERVAL 1 SECOND |\n+----------------------------------+\n| 2004-12-31 23:59:59              |\n+----------------------------------+\n", "SELECT DATE_ADD('2000-12-31 23:59:59', INTERVAL 1 SECOND);\n+----------------------------------------------------+\n| DATE_ADD('2000-12-31 23:59:59', INTERVAL 1 SECOND) |\n+----------------------------------------------------+\n| 2001-01-01 00:00:00                                |\n+----------------------------------------------------+\n", "SELECT DATE_ADD('2010-12-31 23:59:59', INTERVAL 1 DAY);\n+-------------------------------------------------+\n| DATE_ADD('2010-12-31 23:59:59', INTERVAL 1 DAY) |\n+-------------------------------------------------+\n| 2011-01-01 23:59:59                             |\n+-------------------------------------------------+\n", "SELECT DATE_ADD('2100-12-31 23:59:59', INTERVAL '1:1' MINUTE_SECOND);\n+---------------------------------------------------------------+\n| DATE_ADD('2100-12-31 23:59:59', INTERVAL '1:1' MINUTE_SECOND) |\n+---------------------------------------------------------------+\n| 2101-01-01 00:01:00                                           |\n+---------------------------------------------------------------+\n", "SELECT DATE_ADD('1900-01-01 00:00:00', INTERVAL '-1 10' DAY_HOUR);\n+------------------------------------------------------------+\n| DATE_ADD('1900-01-01 00:00:00', INTERVAL '-1 10' DAY_HOUR) |\n+------------------------------------------------------------+\n| 1899-12-30 14:00:00                                        |\n+------------------------------------------------------------+\n", "SELECT DATE_ADD('1992-12-31 23:59:59.000002', INTERVAL '1.999999' SECOND_MICROSECOND);\n+--------------------------------------------------------------------------------+\n| DATE_ADD('1992-12-31 23:59:59.000002', INTERVAL '1.999999' SECOND_MICROSECOND) |\n+--------------------------------------------------------------------------------+\n| 1993-01-01 00:00:01.000001                                                     |\n+--------------------------------------------------------------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/date_format/"], "Title": ["DATE_FORMAT"], "Feature": ["DATE_FORMAT(date, format[, locale])\n"], "Description": ["Formats the date value according to the format string. ", "The language used for the names is controlled by the value of the lc_time_names system variable. See server locale for more on the supported locales.", "The options that can be used by DATE_FORMAT(), as well as its inverse STR_TO_DATE() and the FROM_UNIXTIME() function, are:", "OptionDescription\n%aShort weekday name in current locale (Variable lc_time_names).\n%bShort form month name in current locale. For locale en_US this is one of: Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov or Dec.\n%cMonth with 1 or 2 digits.\n%DDay with English suffix 'th', 'nd', 'st' or 'rd''. (1st, 2nd, 3rd...).\n%dDay with 2 digits.\n%eDay with 1 or 2 digits.\n%fMicroseconds 6 digits.\n%HHour with 2 digits between 00-23.\n%hHour with 2 digits between 01-12.\n%IHour with 2 digits between 01-12.\n%iMinute with 2 digits.\n%jDay of the year (001-366)\n%kHour with 1 digits between 0-23.\n%lHour with 1 digits between 1-12.\n%MFull month name in current locale (Variable lc_time_names).\n%mMonth with 2 digits.\n%pAM/PM according to current locale (Variable lc_time_names).\n%rTime in 12 hour format, followed by AM/PM. Short for '%I:%i:%S %p'.\n%SSeconds with 2 digits.\n%sSeconds with 2 digits.\n%TTime in 24 hour format. Short for '%H:%i:%S'.\n%UWeek number (00-53), when first day of the week is Sunday.\n%uWeek number (00-53), when first day of the week is Monday.\n%VWeek number (01-53), when first day of the week is Sunday. Used with %X.\n%vWeek number (01-53), when first day of the week is Monday. Used with %x.\n%WFull weekday name in current locale (Variable lc_time_names).\n%wDay of the week. 0 = Sunday, 6 = Saturday.\n%XYear with 4 digits when first day of the week is Sunday. Used with %V.\n%xYear with 4 digits when first day of the week is Monday. Used with %v.\n%YYear with 4 digits.\n%yYear with 2 digits.\n%ZTimezone abbreviation. From MariaDB 11.3.0.\n%zNumeric timezone +hhmm or -hhmm presenting the hour and minute offset from UTC. From MariaDB 11.3.0.\n%#For str_to_date(), skip all numbers.\n%.For str_to_date(), skip all punctation characters.\n%@For str_to_date(), skip all alpha characters.\n%%A literal % character.\n\n", "To get a date in one of the standard formats, GET_FORMAT() can be used."], "Examples": ["SELECT DATE_FORMAT('2009-10-04 22:23:00', '%W %M %Y');\n+------------------------------------------------+\n| DATE_FORMAT('2009-10-04 22:23:00', '%W %M %Y') |\n+------------------------------------------------+\n| Sunday October 2009                            |\n+------------------------------------------------+\n\nSELECT DATE_FORMAT('2007-10-04 22:23:00', '%H:%i:%s');\n+------------------------------------------------+\n| DATE_FORMAT('2007-10-04 22:23:00', '%H:%i:%s') |\n+------------------------------------------------+\n| 22:23:00                                       |\n+------------------------------------------------+\n\nSELECT DATE_FORMAT('1900-10-04 22:23:00', '%D %y %a %d %m %b %j');\n+------------------------------------------------------------+\n| DATE_FORMAT('1900-10-04 22:23:00', '%D %y %a %d %m %b %j') |\n+------------------------------------------------------------+\n| 4th 00 Thu 04 10 Oct 277                                   |\n+------------------------------------------------------------+\n\nSELECT DATE_FORMAT('1997-10-04 22:23:00', '%H %k %I %r %T %S %w');\n+------------------------------------------------------------+\n| DATE_FORMAT('1997-10-04 22:23:00', '%H %k %I %r %T %S %w') |\n+------------------------------------------------------------+\n| 22 22 10 10:23:00 PM 22:23:00 00 6                         |\n+------------------------------------------------------------+\n\nSELECT DATE_FORMAT('1999-01-01', '%X %V');\n+------------------------------------+\n| DATE_FORMAT('1999-01-01', '%X %V') |\n+------------------------------------+\n| 1998 52                            |\n+------------------------------------+\n\nSELECT DATE_FORMAT('2006-06-00', '%d');\n+---------------------------------+\n| DATE_FORMAT('2006-06-00', '%d') |\n+---------------------------------+\n| 00                              |\n+---------------------------------+\n", "SELECT DATE_FORMAT('2006-01-01', '%W', 'el_GR');\n+------------------------------------------+\n| DATE_FORMAT('2006-01-01', '%W', 'el_GR') |\n+------------------------------------------+\n| \u039a\u03c5\u03c1\u03b9\u03b1\u03ba\u03ae                                  |\n+------------------------------------------+\n", "SELECT DATE_FORMAT(NOW(), '%W %d %M %Y %H:%i:%s %Z %z');\n+--------------------------------------------------+\n| DATE_FORMAT(NOW(), '%W %d %M %Y %H:%i:%s %Z %z') |\n+--------------------------------------------------+\n| Wednesday 20 September 2023 15:00:23 SAST +0200  |\n+--------------------------------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/date_sub/"], "Title": ["DATE_SUB"], "Feature": ["DATE_SUB(date,INTERVAL expr unit)\n"], "Description": ["Performs date arithmetic. The date argument specifies the\nstarting date or datetime value. expr is an expression specifying the\ninterval value to be subtracted from the starting date. expr is a\nstring; it may start with a \"-\" for negative intervals. unit is a\nkeyword indicating the units in which the expression should be interpreted. See Date and Time Units for a complete list of permitted units. ", "See also DATE_ADD()."], "Examples": ["SELECT DATE_SUB('1998-01-02', INTERVAL 31 DAY);\n+-----------------------------------------+\n| DATE_SUB('1998-01-02', INTERVAL 31 DAY) |\n+-----------------------------------------+\n| 1997-12-02                              |\n+-----------------------------------------+\n", "SELECT DATE_SUB('2005-01-01 00:00:00', INTERVAL '1 1:1:1' DAY_SECOND);\n+----------------------------------------------------------------+\n| DATE_SUB('2005-01-01 00:00:00', INTERVAL '1 1:1:1' DAY_SECOND) |\n+----------------------------------------------------------------+\n| 2004-12-30 22:58:59                                            |\n+----------------------------------------------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/day/"], "Title": ["DAY"], "Feature": ["DAY(date)\n"], "Description": ["DAY() is a synonym for DAYOFMONTH()."], "Examples": [], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/dayname/"], "Title": ["DAYNAME"], "Feature": ["DAYNAME(date)\n"], "Description": ["Returns the name of the weekday for date. The language used for the name is controlled by the value\nof the lc_time_names system variable. See server locale for more on the supported locales."], "Examples": ["SELECT DAYNAME('2007-02-03');\n+-----------------------+\n| DAYNAME('2007-02-03') |\n+-----------------------+\n| Saturday              |\n+-----------------------+\n", "CREATE TABLE t1 (d DATETIME);\nINSERT INTO t1 VALUES\n    (\"2007-01-30 21:31:07\"),\n    (\"1983-10-15 06:42:51\"),\n    (\"2011-04-21 12:34:56\"),\n    (\"2011-10-30 06:31:41\"),\n    (\"2011-01-30 14:03:25\"),\n    (\"2004-10-07 11:19:34\");\n", "SELECT d, DAYNAME(d) FROM t1;\n+---------------------+------------+\n| d                   | DAYNAME(d) |\n+---------------------+------------+\n| 2007-01-30 21:31:07 | Tuesday    |\n| 1983-10-15 06:42:51 | Saturday   |\n| 2011-04-21 12:34:56 | Thursday   |\n| 2011-10-30 06:31:41 | Sunday     |\n| 2011-01-30 14:03:25 | Sunday     |\n| 2004-10-07 11:19:34 | Thursday   |\n+---------------------+------------+\n", "SET lc_time_names = 'fr_CA';\n\nSELECT DAYNAME('2013-04-01');\n+-----------------------+\n| DAYNAME('2013-04-01') |\n+-----------------------+\n| lundi                 |\n+-----------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/dayofmonth/"], "Title": ["DAYOFMONTH"], "Feature": ["DAYOFMONTH(date)\n"], "Description": ["Returns the day of the month for date, in the range 1 to 31, or 0\nfor dates such as '0000-00-00' or '2008-00-00' which have a zero day\npart.", "DAY() is a synonym."], "Examples": ["SELECT DAYOFMONTH('2007-02-03');\n+--------------------------+\n| DAYOFMONTH('2007-02-03') |\n+--------------------------+\n|                        3 |\n+--------------------------+\n", "CREATE TABLE t1 (d DATETIME);\nINSERT INTO t1 VALUES\n    (\"2007-01-30 21:31:07\"),\n    (\"1983-10-15 06:42:51\"),\n    (\"2011-04-21 12:34:56\"),\n    (\"2011-10-30 06:31:41\"),\n    (\"2011-01-30 14:03:25\"),\n    (\"2004-10-07 11:19:34\");\n", "SELECT d FROM t1 where DAYOFMONTH(d) = 30;\n+---------------------+\n| d                   |\n+---------------------+\n| 2007-01-30 21:31:07 |\n| 2011-10-30 06:31:41 |\n| 2011-01-30 14:03:25 |\n+---------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/dayofweek/"], "Title": ["DAYOFWEEK"], "Feature": ["DAYOFWEEK(date)\n"], "Description": ["Returns the day of the week index for the date (1 = Sunday, 2 = Monday, ..., 7 =\nSaturday). These index values correspond to the ODBC standard.", "This contrasts with WEEKDAY() which follows a different index numbering\n(0 = Monday, 1 = Tuesday, ... 6 = Sunday)."], "Examples": ["SELECT DAYOFWEEK('2007-02-03');\n+-------------------------+\n| DAYOFWEEK('2007-02-03') |\n+-------------------------+\n|                       7 |\n+-------------------------+\n", "CREATE TABLE t1 (d DATETIME);\nINSERT INTO t1 VALUES\n    (\"2007-01-30 21:31:07\"),\n    (\"1983-10-15 06:42:51\"),\n    (\"2011-04-21 12:34:56\"),\n    (\"2011-10-30 06:31:41\"),\n    (\"2011-01-30 14:03:25\"),\n    (\"2004-10-07 11:19:34\");\n", "SELECT d, DAYNAME(d), DAYOFWEEK(d), WEEKDAY(d) from t1;\n+---------------------+------------+--------------+------------+\n| d                   | DAYNAME(d) | DAYOFWEEK(d) | WEEKDAY(d) |\n+---------------------+------------+--------------+------------+\n| 2007-01-30 21:31:07 | Tuesday    |            3 |          1 |\n| 1983-10-15 06:42:51 | Saturday   |            7 |          5 |\n| 2011-04-21 12:34:56 | Thursday   |            5 |          3 |\n| 2011-10-30 06:31:41 | Sunday     |            1 |          6 |\n| 2011-01-30 14:03:25 | Sunday     |            1 |          6 |\n| 2004-10-07 11:19:34 | Thursday   |            5 |          3 |\n+---------------------+------------+--------------+------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/dayofyear/"], "Title": ["DAYOFYEAR"], "Feature": ["DAYOFYEAR(date)\n"], "Description": ["Returns the day of the year for date, in the range 1 to 366."], "Examples": ["SELECT DAYOFYEAR('2018-02-16');\n+-------------------------+\n| DAYOFYEAR('2018-02-16') |\n+-------------------------+\n|                      47 |\n+-------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/extract/"], "Title": ["EXTRACT"], "Feature": ["EXTRACT(unit FROM date)\n"], "Description": ["The EXTRACT() function extracts the required unit from the date. See Date and Time Units for a complete list of permitted units.", "In MariaDB 10.0.7 and MariaDB 5.5.35, EXTRACT (HOUR FROM ...) was changed to return a value from 0 to 23, adhering to the SQL standard. Until MariaDB 10.0.6 and MariaDB 5.5.34, and in all versions of MySQL at least as of MySQL 5.7, it could return a value > 23. HOUR() is not a standard function, so continues to adhere to the old behaviour inherited from MySQL."], "Examples": ["SELECT EXTRACT(YEAR FROM '2009-07-02');\n+---------------------------------+\n| EXTRACT(YEAR FROM '2009-07-02') |\n+---------------------------------+\n|                            2009 |\n+---------------------------------+\n\nSELECT EXTRACT(YEAR_MONTH FROM '2009-07-02 01:02:03');\n+------------------------------------------------+\n| EXTRACT(YEAR_MONTH FROM '2009-07-02 01:02:03') |\n+------------------------------------------------+\n|                                         200907 |\n+------------------------------------------------+\n\nSELECT EXTRACT(DAY_MINUTE FROM '2009-07-02 01:02:03');\n+------------------------------------------------+\n| EXTRACT(DAY_MINUTE FROM '2009-07-02 01:02:03') |\n+------------------------------------------------+\n|                                          20102 |\n+------------------------------------------------+\n\nSELECT EXTRACT(MICROSECOND FROM '2003-01-02 10:30:00.000123');\n+--------------------------------------------------------+\n| EXTRACT(MICROSECOND FROM '2003-01-02 10:30:00.000123') |\n+--------------------------------------------------------+\n|                                                    123 |\n+--------------------------------------------------------+\n", "SELECT EXTRACT(HOUR FROM '26:30:00'), HOUR('26:30:00');\n+-------------------------------+------------------+\n| EXTRACT(HOUR FROM '26:30:00') | HOUR('26:30:00') |\n+-------------------------------+------------------+\n|                             2 |               26 |\n+-------------------------------+------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/format_pico_time/"], "Title": ["FORMAT_PICO_TIME"], "Feature": ["FORMAT_PICO_TIME(time_val)\n"], "Description": ["Given a time in picoseconds, returns a human-readable time value and unit indicator. Resulting unit is dependent on the length of the argument, and can be:", "ps - picoseconds\nns - nanoseconds\nus - microseconds\nms - milliseconds\ns - seconds\nmin - minutes\nh - hours\nd - days\n", "With the exception of results under one nanosecond, which are not rounded and are represented as whole numbers, the result is rounded to 2 decimal places, with a minimum of 3 significant digits.", "Returns NULL if the argument is NULL.", "This function is very similar to the Sys Schema FORMAT_TIME function, but with the following differences:", "Represents minutes as min rather than m.\nDoes not represent weeks.\n"], "Examples": ["SELECT\n    FORMAT_PICO_TIME(43) AS ps,\n    FORMAT_PICO_TIME(4321) AS ns, \n    FORMAT_PICO_TIME(43211234) AS us,\n    FORMAT_PICO_TIME(432112344321) AS ms,\n    FORMAT_PICO_TIME(43211234432123) AS s,\n    FORMAT_PICO_TIME(432112344321234) AS m,\n    FORMAT_PICO_TIME(4321123443212345) AS h,\n    FORMAT_PICO_TIME(432112344321234545) AS d;\n+--------+---------+----------+-----------+---------+----------+--------+--------+\n| ps     | ns      | us       | ms        | s       | m        | h      | d      |\n+--------+---------+----------+-----------+---------+----------+--------+--------+\n|  43 ps | 4.32 ns | 43.21 us | 432.11 ms | 43.21 s | 7.20 min | 1.20 h | 5.00 d |\n+--------+---------+----------+-----------+---------+----------+--------+--------+\n"], "Category": ["Date & Time Functions"]}
