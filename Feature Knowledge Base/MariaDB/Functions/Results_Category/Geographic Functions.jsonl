{"HTML": ["https://mariadb.com//kb/en/geometrycollection/"], "Title": ["GEOMETRYCOLLECTION"], "Feature": ["GeometryCollection(g1,g2,...)\n"], "Description": ["Constructs a WKB GeometryCollection. If any argument is not a well-formed WKB representation of a geometry, the return value is NULL."], "Examples": ["CREATE TABLE gis_geometrycollection  (g GEOMETRYCOLLECTION);\nSHOW FIELDS FROM gis_geometrycollection;\nINSERT INTO gis_geometrycollection VALUES\n    (GeomCollFromText('GEOMETRYCOLLECTION(POINT(0 0), LINESTRING(0 0,10 10))')),\n    (GeometryFromWKB(AsWKB(GeometryCollection(Point(44, 6), LineString(Point(3, 6), Point(7, 9)))))),\n    (GeomFromText('GeometryCollection()')),\n    (GeomFromText('GeometryCollection EMPTY'));\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/glength/"], "Title": ["GLENGTH"], "Feature": ["GLength(ls)\n"], "Description": ["Returns as a double-precision number the length of the\nLineString value ls in its associated spatial reference."], "Examples": ["SET @ls = 'LineString(1 1,2 2,3 3)';\n\nSELECT GLength(GeomFromText(@ls));\n+----------------------------+\n| GLength(GeomFromText(@ls)) |\n+----------------------------+\n|           2.82842712474619 |\n+----------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/intersects/"], "Title": ["INTERSECTS"], "Feature": ["INTERSECTS(g1,g2)\n"], "Description": ["Returns 1 or 0 to indicate whether geometry g1 spatially intersects geometry g2.", "INTERSECTS() is based on the original MySQL implementation and uses object bounding rectangles, while ST_INTERSECTS() uses object shapes.", "INTERSECTS() tests the opposite relationship to DISJOINT()."], "Examples": [], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/linestring/"], "Title": ["LINESTRING"], "Feature": ["LineString(pt1,pt2,...)\n"], "Description": ["Constructs a WKB LineString value from a number of WKB Point arguments.  If any argument is not a WKB Point, the return value is\nNULL. If the number of Point arguments is less than two, the return value is NULL."], "Examples": ["SET @ls = 'LineString(1 1,2 2,3 3)';\n\nSELECT AsText(EndPoint(GeomFromText(@ls)));\n+-------------------------------------+\n| AsText(EndPoint(GeomFromText(@ls))) |\n+-------------------------------------+\n| POINT(3 3)                          |\n+-------------------------------------+\n\nCREATE TABLE gis_line  (g LINESTRING);\nINSERT INTO gis_line VALUES\n    (LineFromText('LINESTRING(0 0,0 10,10 0)')),\n    (LineStringFromText('LINESTRING(10 10,20 10,20 20,10 20,10 10)')),\n    (LineStringFromWKB(AsWKB(LineString(Point(10, 10), Point(40, 10)))));\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/mbrcontains/"], "Title": ["MBRContains"], "Feature": ["MBRContains(g1,g2)\n"], "Description": ["Returns 1 or 0 to indicate whether the Minimum Bounding Rectangle of\ng1 contains the Minimum Bounding Rectangle of g2. This tests the\nopposite relationship as MBRWithin()."], "Examples": ["SET @g1 = GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\n\nSET @g2 = GeomFromText('Point(1 1)');\n\nSELECT MBRContains(@g1,@g2), MBRContains(@g2,@g1);\n+----------------------+----------------------+\n| MBRContains(@g1,@g2) | MBRContains(@g2,@g1) |\n+----------------------+----------------------+\n|                    1 |                    0 |\n+----------------------+----------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/mbrdisjoint/"], "Title": ["MBRDisjoint"], "Feature": ["MBRDisjoint(g1,g2)\n"], "Description": ["Returns 1 or 0 to indicate whether the Minimum Bounding Rectangles of the two geometries g1 and g2 are disjoint. Two geometries are disjoint if they do not intersect, that is touch or overlap."], "Examples": ["SET @g1 = GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nSET @g2 = GeomFromText('Polygon((4 4,4 7,7 7,7 4,4 4))');\nSELECTmbrdisjoint(@g1,@g2);\n+----------------------+\n| mbrdisjoint(@g1,@g2) |\n+----------------------+\n|                    1 |\n+----------------------+\n\nSET @g1 = GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nSET @g2 = GeomFromText('Polygon((3 3,3 6,6 6,6 3,3 3))');\nSELECT mbrdisjoint(@g1,@g2);\n+----------------------+\n| mbrdisjoint(@g1,@g2) |\n+----------------------+\n|                    0 |\n+----------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/mbrequal/"], "Title": ["MBREqual"], "Feature": ["MBREqual(g1,g2)\n"], "Description": ["Returns 1 or 0 to indicate whether the Minimum Bounding Rectangles of\nthe two geometries g1 and g2 are the same."], "Examples": ["SET @g1=GEOMFROMTEXT('LINESTRING(0 0, 1 2)');\nSET @g2=GEOMFROMTEXT('POLYGON((0 0, 0 2, 1 2, 1 0, 0 0))');\nSELECT MbrEqual(@g1,@g2);\n+-------------------+\n| MbrEqual(@g1,@g2) |\n+-------------------+\n|                 1 |\n+-------------------+\n\nSET @g1=GEOMFROMTEXT('LINESTRING(0 0, 1 3)');\nSET @g2=GEOMFROMTEXT('POLYGON((0 0, 0 2, 1 4, 1 0, 0 0))');\nSELECT MbrEqual(@g1,@g2);\n+-------------------+\n| MbrEqual(@g1,@g2) |\n+-------------------+\n|                 0 |\n+-------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/mbrintersects/"], "Title": ["MBRIntersects"], "Feature": ["MBRIntersects(g1,g2)\n"], "Description": ["Returns 1 or 0 to indicate whether the Minimum Bounding Rectangles of the two geometries g1 and g2 intersect."], "Examples": ["SET @g1 = GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nSET @g2 = GeomFromText('Polygon((3 3,3 6,6 6,6 3,3 3))');\nSELECT mbrintersects(@g1,@g2);\n+------------------------+\n| mbrintersects(@g1,@g2) |\n+------------------------+\n|                      1 |\n+------------------------+\n\nSET @g1 = GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nSET @g2 = GeomFromText('Polygon((4 4,4 7,7 7,7 4,4 4))');\nSELECT mbrintersects(@g1,@g2);\n+------------------------+\n| mbrintersects(@g1,@g2) |\n+------------------------+\n|                      0 |\n+------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/mbroverlaps/"], "Title": ["MBROverlaps"], "Feature": ["MBROverlaps(g1,g2)\n"], "Description": ["Returns 1 or 0 to indicate whether the Minimum Bounding Rectangles of\nthe two geometries g1 and g2 overlap. The term spatially overlaps is\nused if two geometries intersect and their intersection results in a\ngeometry of the same dimension but not equal to either of the given\ngeometries."], "Examples": ["SET @g1 = GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nSET @g2 = GeomFromText('Polygon((4 4,4 7,7 7,7 4,4 4))');\nSELECT mbroverlaps(@g1,@g2);\n+----------------------+\n| mbroverlaps(@g1,@g2) |\n+----------------------+\n|                    0 |\n+----------------------+\n\nSET @g1 = GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nSET @g2 = GeomFromText('Polygon((3 3,3 6,6 6,6 3,3 3))');\nSELECT mbroverlaps(@g1,@g2);\n+----------------------+\n| mbroverlaps(@g1,@g2) |\n+----------------------+\n|                    0 |\n+----------------------+\n\nSET @g1 = GeomFromText('Polygon((0 0,0 4,4 4,4 0,0 0))');\nSET @g2 = GeomFromText('Polygon((3 3,3 6,6 6,6 3,3 3))');\nSELECT mbroverlaps(@g1,@g2);\n+----------------------+\n| mbroverlaps(@g1,@g2) |\n+----------------------+\n|                    1 |\n+----------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/mbrtouches/"], "Title": ["MBRTouches"], "Feature": ["MBRTouches(g1,g2)\n"], "Description": ["Returns 1 or 0 to indicate whether the Minimum Bounding Rectangles of\nthe two geometries g1 and g2 touch. Two geometries spatially touch if\nthe interiors of the geometries do not intersect, but the boundary of\none of the geometries intersects either the boundary or the interior\nof the other."], "Examples": ["SET @g1 = GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nSET @g2 = GeomFromText('Polygon((4 4,4 7,7 7,7 4,4 4))');\nSELECT mbrtouches(@g1,@g2);\n+---------------------+\n| mbrtouches(@g1,@g2) |\n+---------------------+\n|                   0 |\n+---------------------+\n\nSET @g1 = GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nSET @g2 = GeomFromText('Polygon((3 3,3 6,6 6,6 3,3 3))');\nSELECT mbrtouches(@g1,@g2);\n+---------------------+\n| mbrtouches(@g1,@g2) |\n+---------------------+\n|                   1 |\n+---------------------+\n\nSET @g1 = GeomFromText('Polygon((0 0,0 4,4 4,4 0,0 0))');\nSET @g2 = GeomFromText('Polygon((3 3,3 6,6 6,6 3,3 3))');\nSELECT mbrtouches(@g1,@g2);\n+---------------------+\n| mbrtouches(@g1,@g2) |\n+---------------------+\n|                   0 |\n+---------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/mbrwithin/"], "Title": ["MBRWithin"], "Feature": ["MBRWithin(g1,g2)\n"], "Description": ["Returns 1 or 0 to indicate whether the Minimum Bounding Rectangle of\ng1 is within the Minimum Bounding Rectangle of g2. This tests the\nopposite relationship as MBRContains()."], "Examples": ["SET @g1 = GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nSET @g2 = GeomFromText('Polygon((0 0,0 5,5 5,5 0,0 0))');\nSELECT MBRWithin(@g1,@g2), MBRWithin(@g2,@g1);\n+--------------------+--------------------+\n| MBRWithin(@g1,@g2) | MBRWithin(@g2,@g1) |\n+--------------------+--------------------+\n|                  1 |                  0 |\n+--------------------+--------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/mlinefromtext/"], "Title": ["MLineFromText"], "Feature": ["MLineFromText(wkt[,srid])\nMultiLineStringFromText(wkt[,srid])\n"], "Description": ["Constructs a MULTILINESTRING value using its WKT representation and SRID.", "MLineFromText() and MultiLineStringFromText() are synonyms."], "Examples": ["CREATE TABLE gis_multi_line (g MULTILINESTRING);\nSHOW FIELDS FROM gis_multi_line;\nINSERT INTO gis_multi_line VALUES\n    (MultiLineStringFromText('MULTILINESTRING((10 48,10 21,10 0),(16 0,16 23,16 48))')),\n    (MLineFromText('MULTILINESTRING((10 48,10 21,10 0))')),\n    (MLineFromWKB(AsWKB(MultiLineString(\n      LineString(Point(1, 2), Point(3, 5)), \n      LineString(Point(2, 5), Point(5, 8), Point(21, 7))))));\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/mlinefromwkb/"], "Title": ["MLineFromWKB"], "Feature": ["MLineFromWKB(wkb[,srid])\nMultiLineStringFromWKB(wkb[,srid])\n"], "Description": ["Constructs a MULTILINESTRING value using its WKB  representation and SRID.", "MLineFromWKB() and MultiLineStringFromWKB() are synonyms."], "Examples": ["SET @g = ST_AsBinary(MLineFromText('MULTILINESTRING((10 48,10 21,10 0),(16 0,16 23,16 48))'));\n\nSELECT ST_AsText(MLineFromWKB(@g));\n+--------------------------------------------------------+\n| ST_AsText(MLineFromWKB(@g))                            |\n+--------------------------------------------------------+\n| MULTILINESTRING((10 48,10 21,10 0),(16 0,16 23,16 48)) |\n+--------------------------------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/mpointfromtext/"], "Title": ["MPointFromText"], "Feature": ["MPointFromText(wkt[,srid])\nMultiPointFromText(wkt[,srid])\n"], "Description": ["Constructs a MULTIPOINT value using its WKT representation and SRID.", "MPointFromText() and MultiPointFromText() are synonyms."], "Examples": ["CREATE TABLE gis_multi_point (g MULTIPOINT);\nSHOW FIELDS FROM gis_multi_point;\nINSERT INTO gis_multi_point VALUES\n    (MultiPointFromText('MULTIPOINT(0 0,10 10,10 20,20 20)')),\n    (MPointFromText('MULTIPOINT(1 1,11 11,11 21,21 21)')),\n    (MPointFromWKB(AsWKB(MultiPoint(Point(3, 6), Point(4, 10)))));\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/mpointfromwkb/"], "Title": ["MPointFromWKB"], "Feature": ["MPointFromWKB(wkb[,srid])\nMultiPointFromWKB(wkb[,srid])\n"], "Description": ["Constructs a MULTIPOINT value using its WKB representation and SRID.", "MPointFromWKB() and MultiPointFromWKB() are synonyms."], "Examples": ["SET @g = ST_AsBinary(MPointFromText('MultiPoint( 1 1, 2 2, 5 3, 7 2, 9 3, 8 4, 6 6, 6 9, 4 9, 1 5 )'));\n\nSELECT ST_AsText(MPointFromWKB(@g));\n+-----------------------------------------------------+\n| ST_AsText(MPointFromWKB(@g))                        |\n+-----------------------------------------------------+\n| MULTIPOINT(1 1,2 2,5 3,7 2,9 3,8 4,6 6,6 9,4 9,1 5) |\n+-----------------------------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/mpolyfromtext/"], "Title": ["MPolyFromText"], "Feature": ["MPolyFromText(wkt[,srid])\nMultiPolygonFromText(wkt[,srid])\n"], "Description": ["Constructs a MULTIPOLYGON value using its WKT representation and SRID.", "MPolyFromText() and MultiPolygonFromText() are synonyms."], "Examples": ["CREATE TABLE gis_multi_polygon  (g MULTIPOLYGON);\nSHOW FIELDS FROM gis_multi_polygon;\nINSERT INTO gis_multi_polygon VALUES\n    (MultiPolygonFromText('MULTIPOLYGON(\n       ((28 26,28 0,84 0,84 42,28 26),(52 18,66 23,73 9,48 6,52 18)),\n       ((59 18,67 18,67 13,59 13,59 18)))')),\n    (MPolyFromText('MULTIPOLYGON(\n       ((28 26,28 0,84 0,84 42,28 26),(52 18,66 23,73 9,48 6,52 18)),\n       ((59 18,67 18,67 13,59 13,59 18)))')),\n    (MPolyFromWKB(AsWKB(MultiPolygon(Polygon(\n       LineString(Point(0, 3), Point(3, 3), Point(3, 0), Point(0, 3)))))));\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/mpolyfromwkb/"], "Title": ["MPolyFromWKB"], "Feature": ["MPolyFromWKB(wkb[,srid])\nMultiPolygonFromWKB(wkb[,srid])\n"], "Description": ["Constructs a MULTIPOLYGON value using its WKB  representation and SRID.", "MPolyFromWKB() and MultiPolygonFromWKB() are synonyms."], "Examples": ["SET @g = ST_AsBinary(MPointFromText('MULTIPOLYGON(((28 26,28 0,84 0,84 42,28 26),(52 18,66 23,73 9,48 6,52 18)),((59 18,67 18,67 13,59 13,59 18)))'));\n\nSELECT ST_AsText(MPolyFromWKB(@g))\\G\n*************************** 1. row ***************************\nST_AsText(MPolyFromWKB(@g)): MULTIPOLYGON(((28 26,28 0,84 0,84 42,28 26),(52 18,66 23,73 9,48 6,52 18)),((59 18,67 18,67 13,59 13,59 18)))\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/multilinestring/"], "Title": ["MULTILINESTRING"], "Feature": ["MultiLineString(ls1,ls2,...)\n"], "Description": ["Constructs a WKB MultiLineString value using WKB LineString arguments.  If any argument is not a WKB LineString, the return value is\nNULL."], "Examples": ["CREATE TABLE gis_multi_line (g MULTILINESTRING);\nINSERT INTO gis_multi_line VALUES\n (MultiLineStringFromText('MULTILINESTRING((10 48,10 21,10 0),(16 0,16 23,16 48))')),\n (MLineFromText('MULTILINESTRING((10 48,10 21,10 0))')),\n (MLineFromWKB(AsWKB(MultiLineString(LineString(Point(1, 2), \n    Point(3, 5)), LineString(Point(2, 5),Point(5, 8),Point(21, 7))))));\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/multipoint/"], "Title": ["MULTIPOINT"], "Feature": ["MultiPoint(pt1,pt2,...)\n"], "Description": ["Constructs a WKB MultiPoint value using WKB Point arguments. If any argument is not a WKB Point, the return value is NULL."], "Examples": ["SET @g = ST_GEOMFROMTEXT('MultiPoint( 1 1, 2 2, 5 3, 7 2, 9 3, 8 4, 6 6, 6 9, 4 9, 1 5 )');\n\nCREATE TABLE gis_multi_point (g MULTIPOINT);\nINSERT INTO gis_multi_point VALUES\n    (MultiPointFromText('MULTIPOINT(0 0,10 10,10 20,20 20)')),\n    (MPointFromText('MULTIPOINT(1 1,11 11,11 21,21 21)')),\n    (MPointFromWKB(AsWKB(MultiPoint(Point(3, 6), Point(4, 10)))));\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/multipolygon/"], "Title": ["MULTIPOLYGON"], "Feature": ["MultiPolygon(poly1,poly2,...)\n"], "Description": ["Constructs a WKB MultiPolygon value from a set of WKB Polygon arguments. If any argument is not a WKB Polygon, the return value is NULL."], "Examples": ["CREATE TABLE gis_multi_polygon  (g MULTIPOLYGON);\nINSERT INTO gis_multi_polygon VALUES\n    (MultiPolygonFromText('MULTIPOLYGON(((28 26,28 0,84 0,84 42,28 26),(52 18,66 23,73 9,48 6,52 18)),\n     ((59 18,67 18,67 13,59 13,59 18)))')),\n    (MPolyFromText('MULTIPOLYGON(((28 26,28 0,84 0,84 42,28 26),(52 18,66 23,73 9,48 6,52 18)),\n        ((59 18,67 18,67 13,59 13,59 18)))')),\n    (MPolyFromWKB(AsWKB(MultiPolygon(Polygon(LineString(\n       Point(0, 3), Point(3, 3), Point(3, 0), Point(0, 3)))))));\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/overlaps/"], "Title": ["OVERLAPS"], "Feature": ["OVERLAPS(g1,g2)\n"], "Description": ["Returns 1 or 0 to indicate whether g1 spatially overlaps g2.\nThe term spatially overlaps is used if two geometries intersect and their\nintersection results in a geometry of the same dimension but not equal to\neither of the given geometries.", "OVERLAPS() is based on the original MySQL implementation and uses object bounding rectangles, while ST_OVERLAPS() uses object shapes."], "Examples": [], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/point/"], "Title": ["POINT"], "Feature": ["Point(x,y)\n"], "Description": ["Constructs a WKB Point using the given coordinates."], "Examples": ["SET @g = ST_GEOMFROMTEXT('Point(1 1)');\n\nCREATE TABLE gis_point  (g POINT);\nINSERT INTO gis_point VALUES\n    (PointFromText('POINT(10 10)')),\n    (PointFromText('POINT(20 10)')),\n    (PointFromText('POINT(20 20)')),\n    (PointFromWKB(AsWKB(PointFromText('POINT(10 20)'))));\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/polygon/"], "Title": ["POLYGON"], "Feature": ["Polygon(ls1,ls2,...)\n"], "Description": ["Constructs a WKB Polygon value from a number of WKB LineString\narguments. If any argument does not represent the WKB of a LinearRing (that is,\nnot a closed and simple LineString) the return value is NULL.", "Note that according to the OpenGIS standard, a POLYGON should have exactly one ExteriorRing and all other rings should lie within that ExteriorRing and thus be the InteriorRings. Practically, however, some systems, including MariaDB's, permit polygons to have several 'ExteriorRings'. In the case of there being multiple, non-overlapping exterior rings ST_NUMINTERIORRINGS() will return 1."], "Examples": ["SET @g = ST_GEOMFROMTEXT('POLYGON((1 1,1 5,4 9,6 9,9 3,7 2,1 1))');\n\nCREATE TABLE gis_polygon   (g POLYGON);\nINSERT INTO gis_polygon VALUES\n    (PolygonFromText('POLYGON((10 10,20 10,20 20,10 20,10 10))')),\n    (PolyFromText('POLYGON((0 0,50 0,50 50,0 50,0 0), (10 10,20 10,20 20,10 20,10 10))')),\n    (PolyFromWKB(AsWKB(Polygon(LineString(Point(0, 0), Point(30, 0), Point(30, 30), Point(0, 0))))));\n", "SELECT ST_NumInteriorRings(ST_PolyFromText('POLYGON((0 0,10 0,10 10,0 10,0 0),\n  (-1 -1,-5 -1,-5 -5,-1 -5,-1 -1))')) AS NumInteriorRings;\n+------------------+\n| NumInteriorRings |\n+------------------+\n|                1 |\n+------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/area/"], "Title": ["ST_AREA"], "Feature": ["ST_Area(poly)\nArea(poly)\n"], "Description": ["Returns as a double-precision number the area of the Polygon value poly, as measured in its spatial reference system.", "ST_Area() and Area() are synonyms."], "Examples": ["SET @poly = 'Polygon((0 0,0 3,3 0,0 0),(1 1,1 2,2 1,1 1))';\n\nSELECT Area(GeomFromText(@poly));\n+---------------------------+\n| Area(GeomFromText(@poly)) |\n+---------------------------+\n|                         4 |\n+---------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/asbinary/"], "Title": ["ST_AsBinary"], "Feature": ["ST_AsBinary(g)\nAsBinary(g)\nST_AsWKB(g)\nAsWKB(g)\n"], "Description": ["Converts a value in internal geometry format to its WKB representation and returns the binary result.", "ST_AsBinary(), AsBinary(), ST_AsWKB() and AsWKB() are synonyms,"], "Examples": ["SET @poly = ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))');\nSELECT ST_AsBinary(@poly);\n\nSELECT ST_AsText(ST_GeomFromWKB(ST_AsWKB(@poly)));\n+--------------------------------------------+\n| ST_AsText(ST_GeomFromWKB(ST_AsWKB(@poly))) |\n+--------------------------------------------+\n| POLYGON((0 0,0 1,1 1,1 0,0 0))             |\n+--------------------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/astext/"], "Title": ["ST_AsText"], "Feature": ["ST_AsText(g)\nAsText(g)\nST_AsWKT(g)\nAsWKT(g)\n"], "Description": ["Converts a value in internal geometry format to its WKT representation and returns the string result.", "ST_AsText(), AsText(), ST_AsWKT() and AsWKT() are all synonyms."], "Examples": ["SET @g = 'LineString(1 1,4 4,6 6)';\n\nSELECT ST_AsText(ST_GeomFromText(@g));\n+--------------------------------+\n| ST_AsText(ST_GeomFromText(@g)) |\n+--------------------------------+\n| LINESTRING(1 1,4 4,6 6)        |\n+--------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/boundary/"], "Title": ["ST_BOUNDARY"], "Feature": ["ST_BOUNDARY(g)\nBOUNDARY(g)\n"], "Description": ["Returns a geometry that is the closure of the combinatorial boundary of the geometry value g.", "BOUNDARY() is a synonym."], "Examples": ["SELECT ST_AsText(ST_Boundary(ST_GeomFromText('LINESTRING(3 3,0 0, -3 3)')));\n+----------------------------------------------------------------------+\n| ST_AsText(ST_Boundary(ST_GeomFromText('LINESTRING(3 3,0 0, -3 3)'))) |\n+----------------------------------------------------------------------+\n| MULTIPOINT(3 3,-3 3)                                                 |\n+----------------------------------------------------------------------+\n\nSELECT ST_AsText(ST_Boundary(ST_GeomFromText('POLYGON((3 3,0 0, -3 3, 3 3))')));\n+--------------------------------------------------------------------------+\n| ST_AsText(ST_Boundary(ST_GeomFromText('POLYGON((3 3,0 0, -3 3, 3 3))'))) |\n+--------------------------------------------------------------------------+\n| LINESTRING(3 3,0 0,-3 3,3 3)                                             |\n+--------------------------------------------------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_buffer/"], "Title": ["ST_BUFFER"], "Feature": ["ST_BUFFER(g1,r)\nBUFFER(g1,r)\n"], "Description": ["Returns a geometry that represents all points whose distance from geometry g1 is less than or equal to distance, or radius, r.", "Uses for this function could include creating for example a new geometry representing a buffer zone around an island.", "BUFFER() is a synonym."], "Examples": ["SET @g1 = ST_GEOMFROMTEXT('POLYGON((10 10, 10 20, 20 20, 20 10, 10 10))');\n\nSET @g2 = ST_GEOMFROMTEXT('POINT(8 8)');\n\nSELECT ST_WITHIN(@g2,ST_BUFFER(@g1,5));\n+---------------------------------+\n| ST_WITHIN(@g2,ST_BUFFER(@g1,5)) |\n+---------------------------------+\n|                               1 |\n+---------------------------------+\n\nSELECT ST_WITHIN(@g2,ST_BUFFER(@g1,1));\n+---------------------------------+\n| ST_WITHIN(@g2,ST_BUFFER(@g1,1)) |\n+---------------------------------+\n|                               0 |\n+---------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_centroid/"], "Title": ["ST_CENTROID"], "Feature": ["ST_Centroid(mpoly)\nCentroid(mpoly)\n"], "Description": ["Returns a point reflecting the mathematical centroid (geometric center) for the MultiPolygon mpoly. The resulting point will not necessarily be on the MultiPolygon. ", "ST_Centroid() and Centroid() are synonyms."], "Examples": ["SET @poly = ST_GeomFromText('POLYGON((0 0,20 0,20 20,0 20,0 0))');\nSELECT ST_AsText(ST_Centroid(@poly)) AS center;\n+--------------+\n| center       |\n+--------------+\n| POINT(10 10) |\n+--------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_contains/"], "Title": ["ST_CONTAINS"], "Feature": ["ST_CONTAINS(g1,g2)\n"], "Description": ["Returns 1 or 0 to indicate whether a geometry g1 completely contains geometry g2.", "ST_CONTAINS() uses object shapes, while CONTAINS(), based on the original MySQL implementation, uses object bounding rectangles.", "ST_CONTAINS tests the opposite relationship to ST_WITHIN()."], "Examples": ["SET @g1 = ST_GEOMFROMTEXT('POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))');\n\nSET @g2 = ST_GEOMFROMTEXT('POINT(174 149)');\n\nSELECT ST_CONTAINS(@g1,@g2);\n+----------------------+\n| ST_CONTAINS(@g1,@g2) |\n+----------------------+\n|                    1 |\n+----------------------+\n\nSET @g2 = ST_GEOMFROMTEXT('POINT(175 151)');\n\nSELECT ST_CONTAINS(@g1,@g2);\n+----------------------+\n| ST_CONTAINS(@g1,@g2) |\n+----------------------+\n|                    0 |\n+----------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_convexhull/"], "Title": ["ST_CONVEXHULL"], "Feature": ["ST_ConvexHull(g)\nConvexHull(g)\n"], "Description": ["Given a geometry, returns a geometry that is the minimum convex geometry enclosing all geometries within the set. Returns NULL if the geometry value is NULL or an empty value.", "ST_ConvexHull() and ConvexHull() are synonyms."], "Examples": ["SET @g = ST_GEOMFROMTEXT('Point(0 0)');\n\nSELECT ST_ASTEXT(ST_CONVEXHULL(@g));\n+------------------------------+\n| ST_ASTEXT(ST_CONVEXHULL(@g)) |\n+------------------------------+\n| POINT(0 0)                   |\n+------------------------------+\n", "SET @g = ST_GEOMFROMTEXT('MultiPoint(0 0, 1 2, 2 3)');\n\nSELECT ST_ASTEXT(ST_CONVEXHULL(@g));\n+------------------------------+\n| ST_ASTEXT(ST_CONVEXHULL(@g)) |\n+------------------------------+\n| POLYGON((0 0,1 2,2 3,0 0))   |\n+------------------------------+\n", "SET @g = ST_GEOMFROMTEXT('MultiPoint( 1 1, 2 2, 5 3, 7 2, 9 3, 8 4, 6 6, 6 9, 4 9, 1 5 )');\n\nSELECT ST_ASTEXT(ST_CONVEXHULL(@g));\n+----------------------------------------+\n| ST_ASTEXT(ST_CONVEXHULL(@g))           |\n+----------------------------------------+\n| POLYGON((1 1,1 5,4 9,6 9,9 3,7 2,1 1)) |\n+----------------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_crosses/"], "Title": ["ST_CROSSES"], "Feature": ["ST_CROSSES(g1,g2)\n"], "Description": ["Returns 1 if geometry g1 spatially crosses geometry g2. Returns NULL if g1 is a Polygon or a MultiPolygon, or if g2 is a\nPoint or a MultiPoint. Otherwise, returns 0.", "The term spatially crosses denotes a spatial relation between two\ngiven geometries that has the following properties:", "The two geometries intersect\nTheir intersection results in a geometry that has a dimension that is one\n  less than the maximum dimension of the two given geometries\nTheir intersection is not equal to either of the two given geometries\n", "ST_CROSSES() uses object shapes, while CROSSES(), based on the original MySQL implementation, uses object bounding rectangles."], "Examples": ["SET @g1 = ST_GEOMFROMTEXT('LINESTRING(174 149, 176 151)');\n\nSET @g2 = ST_GEOMFROMTEXT('POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))');\n\nSELECT ST_CROSSES(@g1,@g2);\n+---------------------+\n| ST_CROSSES(@g1,@g2) |\n+---------------------+\n|                   1 |\n+---------------------+\n\nSET @g1 = ST_GEOMFROMTEXT('LINESTRING(176 149, 176 151)');\n\nSELECT ST_CROSSES(@g1,@g2);\n+---------------------+\n| ST_CROSSES(@g1,@g2) |\n+---------------------+\n|                   0 |\n+---------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_difference/"], "Title": ["ST_DIFFERENCE"], "Feature": ["ST_DIFFERENCE(g1,g2)\n"], "Description": ["Returns a geometry representing the point set difference of the given geometry values."], "Examples": ["SET @g1 = POINT(10,10), @g2 = POINT(20,20);\n\nSELECT ST_AsText(ST_Difference(@g1, @g2));\n+------------------------------------+\n| ST_AsText(ST_Difference(@g1, @g2)) |\n+------------------------------------+\n| POINT(10 10)                       |\n+------------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_dimension/"], "Title": ["ST_DIMENSION"], "Feature": ["ST_Dimension(g)\nDimension(g)\n"], "Description": ["Returns the inherent dimension of the geometry value g. The result can\nbe", "DimensionDefinition\n   -1empty geometry\n    0geometry with no length or area\n    1geometry with no area but nonzero length\n    2geometry with nonzero area\n\n", "ST_Dimension() and Dimension() are synonyms."], "Examples": ["SELECT Dimension(GeomFromText('LineString(1 1,2 2)'));\n+------------------------------------------------+\n| Dimension(GeomFromText('LineString(1 1,2 2)')) |\n+------------------------------------------------+\n|                                              1 |\n+------------------------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_disjoint/"], "Title": ["ST_DISJOINT"], "Feature": ["ST_DISJOINT(g1,g2)\n"], "Description": ["Returns 1 or 0 to indicate whether geometry g1 is spatially disjoint from\n(does not intersect with) geometry g2.", "ST_DISJOINT() uses object shapes, while DISJOINT(), based on the original MySQL implementation, uses object bounding rectangles.", "ST_DISJOINT() tests the opposite relationship to ST_INTERSECTS()."], "Examples": ["SET @g1 = ST_GEOMFROMTEXT('POINT(0 0)');\n\nSET @g2 = ST_GEOMFROMTEXT('LINESTRING(2 0, 0 2)');\n\nSELECT ST_DISJOINT(@g1,@g2);\n+----------------------+\n| ST_DISJOINT(@g1,@g2) |\n+----------------------+\n|                    1 |\n+----------------------+\n\nSET @g2 = ST_GEOMFROMTEXT('LINESTRING(0 0, 0 2)');\n\nSELECT ST_DISJOINT(@g1,@g2);\n+----------------------+\n| ST_DISJOINT(@g1,@g2) |\n+----------------------+\n|                    0 |\n+----------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_distance/"], "Title": ["ST_DISTANCE"], "Feature": ["ST_DISTANCE(g1,g2)\n"], "Description": ["Returns the distance between two geometries, or null if not given valid inputs."], "Examples": ["SELECT ST_Distance(POINT(1,2),POINT(2,2));\n+------------------------------------+\n| ST_Distance(POINT(1,2),POINT(2,2)) |\n+------------------------------------+\n|                                  1 |\n+------------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_distance_sphere/"], "Title": ["ST_DISTANCE_SPHERE"], "Feature": ["ST_DISTANCE_SPHERE(g1,g2,[r])\n"], "Description": ["Returns the spherical distance between two geometries (point or multipoint) on a sphere with the optional radius r (default is the Earth radius if r is not specified), or NULL if not given valid inputs."], "Examples": ["set @zenica   = ST_GeomFromText('POINT(17.907743 44.203438)');\nset @sarajevo = ST_GeomFromText('POINT(18.413076 43.856258)');\nSELECT ST_Distance_Sphere(@zenica, @sarajevo);\n55878.59337591705\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/endpoint/"], "Title": ["ST_ENDPOINT"], "Feature": ["ST_EndPoint(ls)\nEndPoint(ls)\n"], "Description": ["Returns the Point that is the endpoint of the\nLineString value ls.", "ST_EndPoint() and EndPoint() are synonyms."], "Examples": ["SET @ls = 'LineString(1 1,2 2,3 3)';\n\nSELECT AsText(EndPoint(GeomFromText(@ls)));\n+-------------------------------------+\n| AsText(EndPoint(GeomFromText(@ls))) |\n+-------------------------------------+\n| POINT(3 3)                          |\n+-------------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/envelope/"], "Title": ["ST_ENVELOPE"], "Feature": ["ST_ENVELOPE(g)\nENVELOPE(g)\n"], "Description": ["Returns the Minimum Bounding Rectangle (MBR) for the geometry value g.  The result is returned as a Polygon value.", "The polygon is defined by the corner points of the bounding box:", "POLYGON((MINX MINY, MAXX MINY, MAXX MAXY, MINX MAXY, MINX MINY))\n", "ST_ENVELOPE() and ENVELOPE() are synonyms."], "Examples": ["SELECT AsText(ST_ENVELOPE(GeomFromText('LineString(1 1,4 4)')));\n+----------------------------------------------------------+\n| AsText(ST_ENVELOPE(GeomFromText('LineString(1 1,4 4)'))) |\n+----------------------------------------------------------+\n| POLYGON((1 1,4 1,4 4,1 4,1 1))                           |\n+----------------------------------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_equals/"], "Title": ["ST_EQUALS"], "Feature": ["ST_EQUALS(g1,g2)\n"], "Description": ["Returns 1 or 0 to indicate whether geometry g1 is spatially equal to geometry g2.", "ST_EQUALS() uses object shapes, while EQUALS(), based on the original MySQL implementation, uses object bounding rectangles."], "Examples": ["SET @g1 = ST_GEOMFROMTEXT('LINESTRING(174 149, 176 151)');\n\nSET @g2 = ST_GEOMFROMTEXT('LINESTRING(176 151, 174 149)');\n\nSELECT ST_EQUALS(@g1,@g2);\n+--------------------+\n| ST_EQUALS(@g1,@g2) |\n+--------------------+\n|                  1 |\n+--------------------+\n", "SET @g1 = ST_GEOMFROMTEXT('POINT(0 2)');\n\nSET @g1 = ST_GEOMFROMTEXT('POINT(2 0)');\n\nSELECT ST_EQUALS(@g1,@g2);\n+--------------------+\n| ST_EQUALS(@g1,@g2) |\n+--------------------+\n|                  0 |\n+--------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/exteriorring/"], "Title": ["ST_ExteriorRing"], "Feature": ["ST_ExteriorRing(poly)\nExteriorRing(poly)\n"], "Description": ["Returns the exterior ring of the Polygon value poly as a LineString.", "ST_ExteriorRing() and ExteriorRing() are synonyms."], "Examples": ["SET @poly = 'Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))';\n\nSELECT AsText(ExteriorRing(GeomFromText(@poly)));\n+-------------------------------------------+\n| AsText(ExteriorRing(GeomFromText(@poly))) |\n+-------------------------------------------+\n| LINESTRING(0 0,0 3,3 3,3 0,0 0)           |\n+-------------------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/geomcollfromtext/"], "Title": ["ST_GeomCollFromText"], "Feature": ["ST_GeomCollFromText(wkt[,srid])\nST_GeometryCollectionFromText(wkt[,srid])\nGeomCollFromText(wkt[,srid])\nGeometryCollectionFromText(wkt[,srid])\n"], "Description": ["Constructs a GEOMETRYCOLLECTION value using its WKT \nrepresentation and SRID.", "ST_GeomCollFromText(), ST_GeometryCollectionFromText(), GeomCollFromText() and GeometryCollectionFromText() are all synonyms."], "Examples": ["CREATE TABLE gis_geometrycollection  (g GEOMETRYCOLLECTION);\nSHOW FIELDS FROM gis_geometrycollection;\nINSERT INTO gis_geometrycollection VALUES\n    (GeomCollFromText('GEOMETRYCOLLECTION(POINT(0 0), LINESTRING(0 0,10 10))')),\n    (GeometryFromWKB(AsWKB(GeometryCollection(Point(44, 6), LineString(Point(3, 6), Point(7, 9)))))),\n    (GeomFromText('GeometryCollection()')),\n    (GeomFromText('GeometryCollection EMPTY'));\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/geomcollfromwkb/"], "Title": ["ST_GeomCollFromWKB"], "Feature": ["ST_GeomCollFromWKB(wkb[,srid])\nST_GeometryCollectionFromWKB(wkb[,srid])\nGeomCollFromWKB(wkb[,srid])\nGeometryCollectionFromWKB(wkb[,srid])\n"], "Description": ["Constructs a GEOMETRYCOLLECTION value using its WKB  representation and SRID.", "ST_GeomCollFromWKB(), ST_GeometryCollectionFromWKB(), GeomCollFromWKB() and GeometryCollectionFromWKB() are synonyms."], "Examples": ["SET @g = ST_AsBinary(ST_GeomFromText('GEOMETRYCOLLECTION(\n   POLYGON((5 5,10 5,10 10,5 5)),POINT(10 10))'));\n\nSELECT ST_AsText(ST_GeomCollFromWKB(@g));\n+----------------------------------------------------------------+\n| ST_AsText(ST_GeomCollFromWKB(@g))                              |\n+----------------------------------------------------------------+\n| GEOMETRYCOLLECTION(POLYGON((5 5,10 5,10 10,5 5)),POINT(10 10)) |\n+----------------------------------------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/geometryn/"], "Title": ["ST_GEOMETRYN"], "Feature": ["ST_GeometryN(gc,N)\nGeometryN(gc,N)\n"], "Description": ["Returns the N-th geometry in the GeometryCollection gc. Geometries are numbered beginning with 1.", "ST_GeometryN() and GeometryN() are synonyms."], "Examples": ["SET @gc = 'GeometryCollection(Point(1 1),LineString(12 14, 9 11))';\n\nSELECT AsText(GeometryN(GeomFromText(@gc),1));\n+----------------------------------------+\n| AsText(GeometryN(GeomFromText(@gc),1)) |\n+----------------------------------------+\n| POINT(1 1)                             |\n+----------------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/geometrytype/"], "Title": ["ST_GEOMETRYTYPE"], "Feature": ["ST_GeometryType(g)\nGeometryType(g)\n"], "Description": ["Returns as a string the name of the geometry type of which the\ngeometry instance g is a member. The name corresponds to one of the\ninstantiable Geometry subclasses.", "ST_GeometryType() and GeometryType() are synonyms."], "Examples": ["SELECT GeometryType(GeomFromText('POINT(1 1)'));\n+------------------------------------------+\n| GeometryType(GeomFromText('POINT(1 1)')) |\n+------------------------------------------+\n| POINT                                    |\n+------------------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/geomfromtext/"], "Title": ["ST_GeomFromText"], "Feature": ["ST_GeomFromText(wkt[,srid])\nST_GeometryFromText(wkt[,srid])\nGeomFromText(wkt[,srid])\nGeometryFromText(wkt[,srid])\n"], "Description": ["Constructs a geometry value of any type using its WKT representation and SRID.", "GeomFromText(), GeometryFromText(), ST_GeomFromText() and ST_GeometryFromText() are all synonyms."], "Examples": ["SET @g = ST_GEOMFROMTEXT('POLYGON((1 1,1 5,4 9,6 9,9 3,7 2,1 1))');\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/geomfromwkb/"], "Title": ["ST_GeomFromWKB"], "Feature": ["ST_GeomFromWKB(wkb[,srid])\nST_GeometryFromWKB(wkb[,srid])\nGeomFromWKB(wkb[,srid])\nGeometryFromWKB(wkb[,srid])\n"], "Description": ["Constructs a geometry value of any type using its WKB  representation and SRID.", "ST_GeomFromWKB(), ST_GeometryFromWKB(), GeomFromWKB() and GeometryFromWKB() are synonyms."], "Examples": ["SET @g = ST_AsBinary(ST_LineFromText('LINESTRING(0 4, 4 6)'));\n\nSELECT ST_AsText(ST_GeomFromWKB(@g));\n+-------------------------------+\n| ST_AsText(ST_GeomFromWKB(@g)) |\n+-------------------------------+\n| LINESTRING(0 4,4 6)           |\n+-------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/interiorringn/"], "Title": ["ST_InteriorRingN"], "Feature": ["ST_InteriorRingN(poly,N)\nInteriorRingN(poly,N)\n"], "Description": ["Returns the N-th interior ring for the Polygon value poly as a LineString. Rings are numbered beginning with 1.", "ST_InteriorRingN() and InteriorRingN() are synonyms."], "Examples": ["SET @poly = 'Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))';\n\nSELECT AsText(InteriorRingN(GeomFromText(@poly),1));\n+----------------------------------------------+\n| AsText(InteriorRingN(GeomFromText(@poly),1)) |\n+----------------------------------------------+\n| LINESTRING(1 1,1 2,2 2,2 1,1 1)              |\n+----------------------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_intersection/"], "Title": ["ST_INTERSECTION"], "Feature": ["ST_INTERSECTION(g1,g2)\n"], "Description": ["Returns a geometry that is the intersection, or shared portion, of geometry g1 and geometry g2."], "Examples": ["SET @g1 = ST_GEOMFROMTEXT('POINT(2 1)');\n\nSET @g2 = ST_GEOMFROMTEXT('LINESTRING(2 1, 0 2)');\n\nSELECT ASTEXT(ST_INTERSECTION(@g1,@g2));\n+----------------------------------+\n| ASTEXT(ST_INTERSECTION(@g1,@g2)) |\n+----------------------------------+\n| POINT(2 1)                       |\n+----------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_intersects/"], "Title": ["ST_INTERSECTS"], "Feature": ["ST_INTERSECTS(g1,g2)\n"], "Description": ["Returns 1 or 0 to indicate whether geometry g1 spatially intersects geometry g2.", "ST_INTERSECTS() uses object shapes, while INTERSECTS(), based on the original MySQL implementation, uses object bounding rectangles.", "ST_INTERSECTS() tests the opposite relationship to ST_DISJOINT()."], "Examples": ["SET @g1 = ST_GEOMFROMTEXT('POINT(0 0)');\n\nSET @g2 = ST_GEOMFROMTEXT('LINESTRING(0 0, 0 2)');\n\nSELECT ST_INTERSECTS(@g1,@g2);\n+------------------------+\n| ST_INTERSECTS(@g1,@g2) |\n+------------------------+\n|                      1 |\n+------------------------+\n", "SET @g2 = ST_GEOMFROMTEXT('LINESTRING(2 0, 0 2)');\n\nSELECT ST_INTERSECTS(@g1,@g2);\n+------------------------+\n| ST_INTERSECTS(@g1,@g2) |\n+------------------------+\n|                      0 |\n+------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_isclosed/"], "Title": ["ST_ISCLOSED"], "Feature": ["ST_IsClosed(g)\nIsClosed(g)\n"], "Description": ["Returns 1 if a given LINESTRING's start and end points are the same, or 0 if they are not the same. Before MariaDB 10.1.5, returns NULL if not given a LINESTRING. After MariaDB 10.1.5, returns -1.", "ST_IsClosed() and IsClosed() are synonyms."], "Examples": ["SET @ls = 'LineString(0 0, 0 4, 4 4, 0 0)';\nSELECT ST_ISCLOSED(GEOMFROMTEXT(@ls));\n+--------------------------------+\n| ST_ISCLOSED(GEOMFROMTEXT(@ls)) |\n+--------------------------------+\n|                              1 |\n+--------------------------------+\n\nSET @ls = 'LineString(0 0, 0 4, 4 4, 0 1)';\nSELECT ST_ISCLOSED(GEOMFROMTEXT(@ls));\n+--------------------------------+\n| ST_ISCLOSED(GEOMFROMTEXT(@ls)) |\n+--------------------------------+\n|                              0 |\n+--------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/isempty/"], "Title": ["ST_ISEMPTY"], "Feature": ["ST_IsEmpty(g)\nIsEmpty(g)\n"], "Description": ["IsEmpty is a function defined by the OpenGIS specification, but is not fully implemented by MariaDB or MySQL. ", "Since MariaDB and MySQL do not support GIS EMPTY values such as POINT EMPTY, as implemented it simply returns 1 if the geometry value g is invalid, 0 if it is valid, and NULL if the argument is NULL.", "ST_IsEmpty() and IsEmpty() are synonyms."], "Examples": [], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_isring/"], "Title": ["ST_IsRing"], "Feature": ["ST_IsRing(g)\nIsRing(g)\n"], "Description": ["Returns true if a given LINESTRING is a ring, that is, both ST_IsClosed and ST_IsSimple. A simple curve does not pass through the same point more than once.  However, see MDEV-7510.", "St_IsRing() and IsRing() are synonyms."], "Examples": [], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_issimple/"], "Title": ["ST_IsSimple"], "Feature": ["ST_IsSimple(g)\nIsSimple(g)\n"], "Description": ["Returns true if the given Geometry has no anomalous geometric points, false if it does, or NULL if given a NULL value.", "ST_IsSimple() and IsSimple() are synonyms."], "Examples": ["SET @g = 'Point(1 2)';\n\nSELECT ST_ISSIMPLE(GEOMFROMTEXT(@g));\n+-------------------------------+\n| ST_ISSIMPLE(GEOMFROMTEXT(@g)) |\n+-------------------------------+\n|                             1 |\n+-------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_length/"], "Title": ["ST_LENGTH"], "Feature": ["ST_LENGTH(ls)\n"], "Description": ["Returns as a double-precision number the length of the\nLineString value ls in its associated spatial reference."], "Examples": ["SET @ls = 'LineString(1 1,2 2,3 3)';\n\nSELECT ST_LENGTH(ST_GeomFromText(@ls));\n+---------------------------------+\n| ST_LENGTH(ST_GeomFromText(@ls)) |\n+---------------------------------+\n|                2.82842712474619 |\n+---------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/linefromtext/"], "Title": ["ST_LineFromText"], "Feature": ["ST_LineFromText(wkt[,srid])\nST_LineStringFromText(wkt[,srid])\nLineFromText(wkt[,srid])\nLineStringFromText(wkt[,srid])\n"], "Description": ["Constructs a LINESTRING value using its WKT representation and SRID.", "ST_LineFromText(), ST_LineStringFromText(), ST_LineFromText() and ST_LineStringFromText() are all synonyms."], "Examples": ["CREATE TABLE gis_line  (g LINESTRING);\nSHOW FIELDS FROM gis_line;\nINSERT INTO gis_line VALUES\n    (LineFromText('LINESTRING(0 0,0 10,10 0)')),\n    (LineStringFromText('LINESTRING(10 10,20 10,20 20,10 20,10 10)')),\n    (LineStringFromWKB(AsWKB(LineString(Point(10, 10), Point(40, 10)))));\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/linefromwkb/"], "Title": ["ST_LineFromWKB"], "Feature": ["ST_LineFromWKB(wkb[,srid])\nLineFromWKB(wkb[,srid])\nST_LineStringFromWKB(wkb[,srid])\nLineStringFromWKB(wkb[,srid])\n"], "Description": ["Constructs a LINESTRING value using its WKB  representation and SRID.", "ST_LineFromWKB(), LineFromWKB(), ST_LineStringFromWKB(), and LineStringFromWKB() are synonyms."], "Examples": ["SET @g = ST_AsBinary(ST_LineFromText('LineString(0 4,4 6)'));\n\nSELECT ST_AsText(ST_LineFromWKB(@g)) AS l;\n+---------------------+\n| l                   |\n+---------------------+\n| LINESTRING(0 4,4 6) |\n+---------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/numgeometries/"], "Title": ["ST_NUMGEOMETRIES"], "Feature": ["ST_NumGeometries(gc)\nNumGeometries(gc)\n"], "Description": ["Returns the number of geometries in the GeometryCollection gc.", "ST_NumGeometries() and NumGeometries() are synonyms."], "Examples": ["SET @gc = 'GeometryCollection(Point(1 1),LineString(2 2, 3 3))';\n\nSELECT NUMGEOMETRIES(GeomFromText(@gc));\n+----------------------------------+\n| NUMGEOMETRIES(GeomFromText(@gc)) |\n+----------------------------------+\n|                                2 |\n+----------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/numinteriorrings/"], "Title": ["ST_NumInteriorRings"], "Feature": ["ST_NumInteriorRings(poly)\nNumInteriorRings(poly)\n"], "Description": ["Returns an integer containing the number of interior rings in the Polygon value poly.", "Note that according the the OpenGIS standard, a POLYGON should have exactly one ExteriorRing and all other rings should lie within that ExteriorRing and thus be the InteriorRings. Practically, however, some systems, including MariaDB's, permit polygons to have several 'ExteriorRings'. In the case of there being multiple, non-overlapping exterior rings ST_NumInteriorRings() will return 1.", "ST_NumInteriorRings() and NumInteriorRings() are synonyms."], "Examples": ["SET @poly = 'Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))';\n\nSELECT NumInteriorRings(GeomFromText(@poly));\n+---------------------------------------+\n| NumInteriorRings(GeomFromText(@poly)) |\n+---------------------------------------+\n|                                     1 |\n+---------------------------------------+\n", "SELECT ST_NumInteriorRings(ST_PolyFromText('POLYGON((0 0,10 0,10 10,0 10,0 0),\n  (-1 -1,-5 -1,-5 -5,-1 -5,-1 -1))')) AS NumInteriorRings;\n+------------------+\n| NumInteriorRings |\n+------------------+\n|                1 |\n+------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/numpoints/"], "Title": ["ST_NUMPOINTS"], "Feature": ["ST_NumPoints(ls)\nNumPoints(ls)\n"], "Description": ["Returns the number of Point objects in the LineString\nvalue ls.", "ST_NumPoints() and NumPoints() are synonyms."], "Examples": ["SET @ls = 'LineString(1 1,2 2,3 3)';\n\nSELECT NumPoints(GeomFromText(@ls));\n+------------------------------+\n| NumPoints(GeomFromText(@ls)) |\n+------------------------------+\n|                            3 |\n+------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_overlaps/"], "Title": ["ST_OVERLAPS"], "Feature": ["ST_OVERLAPS(g1,g2)\n"], "Description": ["Returns 1 or 0 to indicate whether geometry g1 spatially overlaps geometry g2.", "The term spatially overlaps is used if two geometries intersect and their\nintersection results in a geometry of the same dimension but not equal to\neither of the given geometries.", "ST_OVERLAPS() uses object shapes, while OVERLAPS(), based on the original MySQL implementation, uses object bounding rectangles."], "Examples": [], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/pointfromtext/"], "Title": ["ST_PointFromText"], "Feature": ["ST_PointFromText(wkt[,srid])\nPointFromText(wkt[,srid])\n"], "Description": ["Constructs a POINT value using its WKT representation and SRID.", "ST_PointFromText() and PointFromText() are synonyms."], "Examples": ["CREATE TABLE gis_point  (g POINT);\nSHOW FIELDS FROM gis_point;\nINSERT INTO gis_point VALUES\n    (PointFromText('POINT(10 10)')),\n    (PointFromText('POINT(20 10)')),\n    (PointFromText('POINT(20 20)')),\n    (PointFromWKB(AsWKB(PointFromText('POINT(10 20)'))));\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/pointfromwkb/"], "Title": ["ST_PointFromWKB"], "Feature": ["ST_PointFromWKB(wkb[,srid])\nPointFromWKB(wkb[,srid])\n"], "Description": ["Constructs a POINT value using its WKB representation and SRID.", "ST_PointFromWKB() and PointFromWKB() are synonyms."], "Examples": ["SET @g = ST_AsBinary(ST_PointFromText('POINT(0 4)'));\n\nSELECT ST_AsText(ST_PointFromWKB(@g)) AS p;\n+------------+\n| p          |\n+------------+\n| POINT(0 4) |\n+------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/pointn/"], "Title": ["ST_POINTN"], "Feature": ["ST_PointN(ls,N)\nPointN(ls,N)\n"], "Description": ["Returns the N-th Point in the LineString value ls.\nPoints are numbered beginning with 1.", "ST_PointN() and PointN() are synonyms."], "Examples": ["SET @ls = 'LineString(1 1,2 2,3 3)';\n\nSELECT AsText(PointN(GeomFromText(@ls),2));\n+-------------------------------------+\n| AsText(PointN(GeomFromText(@ls),2)) |\n+-------------------------------------+\n| POINT(2 2)                          |\n+-------------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_pointonsurface/"], "Title": ["ST_POINTONSURFACE"], "Feature": ["ST_PointOnSurface(g)\nPointOnSurface(g)\n"], "Description": ["Given a geometry, returns a POINT guaranteed to intersect a surface. However, see MDEV-7514.", "ST_PointOnSurface() and PointOnSurface() are synonyms."], "Examples": [], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/polyfromtext/"], "Title": ["ST_PolyFromText"], "Feature": ["ST_PolyFromText(wkt[,srid])\nST_PolygonFromText(wkt[,srid])\nPolyFromText(wkt[,srid])\nPolygonFromText(wkt[,srid])\n"], "Description": ["Constructs a POLYGON value using its WKT representation and SRID.", "ST_PolyFromText(), ST_PolygonFromText(), PolyFromText() and ST_PolygonFromText() are all synonyms."], "Examples": ["CREATE TABLE gis_polygon   (g POLYGON);\nINSERT INTO gis_polygon VALUES\n    (PolygonFromText('POLYGON((10 10,20 10,20 20,10 20,10 10))')),\n    (PolyFromText('POLYGON((0 0,50 0,50 50,0 50,0 0), (10 10,20 10,20 20,10 20,10 10))'));\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/polyfromwkb/"], "Title": ["ST_PolyFromWKB"], "Feature": ["ST_PolyFromWKB(wkb[,srid])\nST_PolygonFromWKB(wkb[,srid])\nPolyFromWKB(wkb[,srid])\nPolygonFromWKB(wkb[,srid])\n"], "Description": ["Constructs a POLYGON value using its WKB representation and SRID.", "ST_PolyFromWKB(), ST_PolygonFromWKB(), PolyFromWKB() and PolygonFromWKB() are synonyms."], "Examples": ["SET @g = ST_AsBinary(ST_PolyFromText('POLYGON((1 1,1 5,4 9,6 9,9 3,7 2,1 1))'));\n\nSELECT ST_AsText(ST_PolyFromWKB(@g)) AS p;\n+----------------------------------------+\n| p                                      |\n+----------------------------------------+\n| POLYGON((1 1,1 5,4 9,6 9,9 3,7 2,1 1)) |\n+----------------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_relate/"], "Title": ["ST_RELATE"], "Feature": ["ST_Relate(g1, g2, i)\n"], "Description": ["Returns true if Geometry g1 is spatially related to Geometryg2 by testing for intersections between the interior, boundary and exterior of the two geometries as specified by the values in intersection matrix pattern i."], "Examples": [], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/srid/"], "Title": ["ST_SRID"], "Feature": ["ST_SRID(g)\nSRID(g)\n"], "Description": ["Returns an integer indicating the Spatial Reference System ID for the\ngeometry value g.", "In MariaDB, the SRID value is just an integer associated with the\ngeometry value. All calculations are done assuming Euclidean (planar)\ngeometry.", "ST_SRID() and SRID() are synonyms."], "Examples": ["SELECT SRID(GeomFromText('LineString(1 1,2 2)',101));\n+-----------------------------------------------+\n| SRID(GeomFromText('LineString(1 1,2 2)',101)) |\n+-----------------------------------------------+\n|                                           101 |\n+-----------------------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_startpoint/"], "Title": ["ST_STARTPOINT"], "Feature": ["ST_StartPoint(ls)\nStartPoint(ls)\n"], "Description": ["Returns the Point that is the start point of the\nLineString value ls.", "ST_StartPoint() and StartPoint() are synonyms."], "Examples": ["SET @ls = 'LineString(1 1,2 2,3 3)';\n\nSELECT AsText(StartPoint(GeomFromText(@ls)));\n+---------------------------------------+\n| AsText(StartPoint(GeomFromText(@ls))) |\n+---------------------------------------+\n| POINT(1 1)                            |\n+---------------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_symdifference/"], "Title": ["ST_SYMDIFFERENCE"], "Feature": ["ST_SYMDIFFERENCE(g1,g2)\n"], "Description": ["Returns a geometry that represents the portions of geometry g1 and geometry g2 that don't intersect."], "Examples": ["SET @g1 = ST_GEOMFROMTEXT('LINESTRING(10 20, 10 40)');\n\nSET @g2 = ST_GEOMFROMTEXT('LINESTRING(10 15, 10 25)');\n\nSELECT ASTEXT(ST_SYMDIFFERENCE(@g1,@g2));\n+----------------------------------------------+\n| ASTEXT(ST_SYMDIFFERENCE(@g1,@g2))            |\n+----------------------------------------------+\n| MULTILINESTRING((10 15,10 20),(10 25,10 40)) |\n+----------------------------------------------+\n\nSET @g2 = ST_GeomFromText('LINESTRING(10 20, 10 41)');\n\nSELECT ASTEXT(ST_SYMDIFFERENCE(@g1,@g2));\n+-----------------------------------+\n| ASTEXT(ST_SYMDIFFERENCE(@g1,@g2)) |\n+-----------------------------------+\n| LINESTRING(10 40,10 41)           |\n+-----------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_touches/"], "Title": ["ST_TOUCHES"], "Feature": ["ST_TOUCHES(g1,g2)\n"], "Description": ["Returns 1 or 0 to indicate whether geometry g1 spatially touches geometry g2. Two geometries spatially touch if the interiors of the geometries do not intersect,\nbut the boundary of one of the geometries intersects either the boundary or the\ninterior of the other.", "ST_TOUCHES() uses object shapes, while TOUCHES(), based on the original MySQL implementation, uses object bounding rectangles."], "Examples": ["SET @g1 = ST_GEOMFROMTEXT('POINT(2 0)');\n\nSET @g2 = ST_GEOMFROMTEXT('LINESTRING(2 0, 0 2)');\n\nSELECT ST_TOUCHES(@g1,@g2);\n+---------------------+\n| ST_TOUCHES(@g1,@g2) |\n+---------------------+\n|                   1 |\n+---------------------+\n\nSET @g1 = ST_GEOMFROMTEXT('POINT(2 1)');\n\nSELECT ST_TOUCHES(@g1,@g2);\n+---------------------+\n| ST_TOUCHES(@g1,@g2) |\n+---------------------+\n|                   0 |\n+---------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_union/"], "Title": ["ST_UNION"], "Feature": ["ST_UNION(g1,g2)\n"], "Description": ["Returns a geometry that is the union of the geometry g1 and geometry g2."], "Examples": ["SET @g1 = GEOMFROMTEXT('POINT (0 2)');\n\nSET @g2 = GEOMFROMTEXT('POINT (2 0)');\n\nSELECT ASTEXT(ST_UNION(@g1,@g2));\n+---------------------------+\n| ASTEXT(ST_UNION(@g1,@g2)) |\n+---------------------------+\n| MULTIPOINT(2 0,0 2)       |\n+---------------------------+\n", "SET @g1 = GEOMFROMTEXT('POLYGON((0 0,0 3,3 3,3 0,0 0))');\n\nSET @g2 = GEOMFROMTEXT('POLYGON((2 2,4 2,4 4,2 4,2 2))');\n\nSELECT ASTEXT(ST_UNION(@g1,@g2));\n+------------------------------------------------+\n| ASTEXT(ST_UNION(@g1,@g2))                      |\n+------------------------------------------------+\n| POLYGON((0 0,0 3,2 3,2 4,4 4,4 2,3 2,3 0,0 0)) |\n+------------------------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_within/"], "Title": ["ST_WITHIN"], "Feature": ["ST_WITHIN(g1,g2)\n"], "Description": ["Returns 1 or 0 to indicate whether geometry g1 is spatially within geometry g2.", "This tests the opposite relationship as ST_CONTAINS().", "ST_WITHIN() uses object shapes, while WITHIN(), based on the original MySQL implementation, uses object bounding rectangles."], "Examples": ["SET @g1 = ST_GEOMFROMTEXT('POINT(174 149)');\n\nSET @g2 = ST_GEOMFROMTEXT('POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))');\n\nSELECT ST_WITHIN(@g1,@g2);\n+--------------------+\n| ST_WITHIN(@g1,@g2) |\n+--------------------+\n|                  1 |\n+--------------------+\n\nSET @g1 = ST_GEOMFROMTEXT('POINT(176 151)');\n\nSELECT ST_WITHIN(@g1,@g2);\n+--------------------+\n| ST_WITHIN(@g1,@g2) |\n+--------------------+\n|                  0 |\n+--------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_x/"], "Title": ["ST_X"], "Feature": ["ST_X(p)\nX(p)\n"], "Description": ["Returns the X-coordinate value for the point p as a double-precision number.", "ST_X() and X() are synonyms."], "Examples": ["SET @pt = 'Point(56.7 53.34)';\n\nSELECT X(GeomFromText(@pt));\n+----------------------+\n| X(GeomFromText(@pt)) |\n+----------------------+\n|                 56.7 |\n+----------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_y/"], "Title": ["ST_Y"], "Feature": ["ST_Y(p)\nY(p)\n"], "Description": ["Returns the Y-coordinate value for the point p as a double-precision number.", "ST_Y() and Y() are synonyms."], "Examples": ["SET @pt = 'Point(56.7 53.34)';\n\nSELECT Y(GeomFromText(@pt));\n+----------------------+\n| Y(GeomFromText(@pt)) |\n+----------------------+\n|                53.34 |\n+----------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/touches/"], "Title": ["TOUCHES"], "Feature": ["Touches(g1,g2)\n"], "Description": ["Returns 1 or 0 to indicate whether g1 spatially touches g2. Two\ngeometries spatially touch if the interiors of the geometries do not intersect,\nbut the boundary of one of the geometries intersects either the boundary or the\ninterior of the other.", "TOUCHES() is based on the original MySQL implementation and uses object bounding rectangles, while ST_TOUCHES() uses object shapes."], "Examples": [], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/within/"], "Title": ["WITHIN"], "Feature": ["Within(g1,g2)\n"], "Description": ["Returns 1 or 0 to indicate whether g1 is spatially within g2.\nThis tests the opposite relationship as Contains().", "WITHIN() is based on the original MySQL implementation, and uses object bounding rectangles, while ST_WITHIN() uses object shapes."], "Examples": ["SET @g1 = GEOMFROMTEXT('POINT(174 149)');\nSET @g2 = GEOMFROMTEXT('POINT(176 151)');\nSET @g3 = GEOMFROMTEXT('POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))');\n\nSELECT within(@g1,@g3);\n+-----------------+\n| within(@g1,@g3) |\n+-----------------+\n|               1 |\n+-----------------+\n\nSELECT within(@g2,@g3);\n+-----------------+\n| within(@g2,@g3) |\n+-----------------+\n|               0 |\n+-----------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/contains/"], "Title": ["CONTAINS"], "Feature": ["Contains(g1,g2)\n"], "Description": ["Returns 1 or 0 to indicate whether a geometry g1 completely contains geometry g2. CONTAINS() is based on the original MySQL implementation and uses object bounding rectangles, while ST_CONTAINS() uses object shapes. ", "This tests the opposite relationship to Within()."], "Examples": [], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/crosses/"], "Title": ["CROSSES"], "Feature": ["Crosses(g1,g2)\n"], "Description": ["Returns 1 if g1 spatially crosses g2. Returns NULL if g1 is\na Polygon or a MultiPolygon, or if g2 is a\nPoint or a MultiPoint. Otherwise, returns 0.", "The term spatially crosses denotes a spatial relation between two\ngiven geometries that has the following properties:", "The two geometries intersect\nTheir intersection results in a geometry that has a dimension that is one\n  less than the maximum dimension of the two given geometries\nTheir intersection is not equal to either of the two given geometries\n", "CROSSES() is based on the original MySQL implementation, and uses object bounding rectangles, while ST_CROSSES() uses object shapes."], "Examples": [], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/disjoint/"], "Title": ["DISJOINT"], "Feature": ["Disjoint(g1,g2)\n"], "Description": ["Returns 1 or 0 to indicate whether g1 is spatially disjoint from\n(does not intersect) g2.", "DISJOINT() tests the opposite relationship to INTERSECTS().", "DISJOINT() is based on the original MySQL implementation and uses object bounding rectangles, while ST_DISJOINT() uses object shapes."], "Examples": [], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/equals/"], "Title": ["EQUALS"], "Feature": ["Equals(g1,g2)\n", "From MariaDB 10.2.3:", "MBREQUALS(g1,g2)\n"], "Description": ["Returns 1 or 0 to indicate whether g1 is spatially equal to g2.", "EQUALS() is based on the original MySQL implementation and uses object bounding rectangles, while ST_EQUALS() uses object shapes.", "From MariaDB 10.2.3, MBREQUALS is a synonym for Equals."], "Examples": [], "Category": ["Geographic Functions"]}
