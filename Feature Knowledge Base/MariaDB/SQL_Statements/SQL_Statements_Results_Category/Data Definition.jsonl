{"HTML": ["https://mariadb.com//kb/en/alter-database/"], "Title": ["ALTER DATABASE"], "Feature": ["ALTER {DATABASE | SCHEMA} [db_name]\n    alter_specification ...\nALTER {DATABASE | SCHEMA} db_name\n    UPGRADE DATA DIRECTORY NAME\n\nalter_specification:\n    [DEFAULT] CHARACTER SET [=] charset_name\n  | [DEFAULT] COLLATE [=] collation_name\n  | COMMENT [=] 'comment'\n"], "Description": ["ALTER DATABASE enables you to change the overall characteristics of a\ndatabase. These characteristics are stored in the db.opt file in the\ndatabase directory. To use ALTER DATABASE, you need the ALTER\nprivilege on the database. ALTER SCHEMA is a synonym for ALTER\nDATABASE.", "The CHARACTER SET clause changes the default database character set.\nThe COLLATE clause changes the default database collation. See Character Sets and Collations for more.", "You can see what character sets and collations are available using,\nrespectively, the SHOW CHARACTER SET and SHOW COLLATION statements.", "Changing the default character set/collation of a database does not change the character set/collation of any stored procedures or stored functions that were previously created, and relied on the defaults. These need to be dropped and recreated in order to apply the character set/collation changes.", "The database name can be omitted from the first syntax, in which case\nthe statement applies to the default database.", "The syntax that includes the UPGRADE DATA DIRECTORY NAME clause was\nadded in MySQL 5.1.23. It updates the name of the directory associated\nwith the database to use the encoding implemented in MySQL 5.1 for\nmapping database names to database directory names (see\nIdentifier to File Name Mapping). This\nclause is for use under these conditions:", "It is intended when upgrading MySQL to 5.1 or later from older versions.\nIt is intended to update a database directory name to the current encoding format if the name contains special characters that need encoding.\nThe statement is used by mariadb-check (as invoked by mariadb-upgrade).\n", "For example,if a database in MySQL 5.0 has a name of a-b-c, the name\ncontains instance of the `-' character. In 5.0, the database directory\nis also named a-b-c, which is not necessarily safe for all file\nsystems. In MySQL 5.1 and up, the same database name is encoded as\na@002db@002dc to produce a file system-neutral directory name.", "When a MySQL installation is upgraded to MySQL 5.1 or later from an\nolder version,the server displays a name such as a-b-c (which is in\nthe old format) as #mysql50#a-b-c, and you must refer to the name\nusing the #mysql50# prefix. Use UPGRADE DATA DIRECTORY NAME in this\ncase to explicitly tell the server to re-encode the database directory\nname to the current encoding format:", "ALTER DATABASE `#mysql50#a-b-c` UPGRADE DATA DIRECTORY NAME;\n", "After executing this statement, you can refer to the database as a-b-c\nwithout the special #mysql50# prefix.", "COMMENT", "MariaDB starting with 10.5.0From MariaDB 10.5.0, it is possible to add a comment of a maximum of 1024 bytes. If the comment length exceeds this length, a error/warning code 4144 is thrown. The database comment is also added to the db.opt file, as well as to the information_schema.schemata table.\n"], "Examples": ["ALTER DATABASE test CHARACTER SET='utf8'  COLLATE='utf8_bin';\n", "ALTER DATABASE p COMMENT='Presentations';\n"], "Category": ["Data Definition"]}
{"HTML": ["https://mariadb.com//kb/en/rename-table/"], "Title": ["RENAME TABLE"], "Feature": ["RENAME TABLE[S] [IF EXISTS] tbl_name \n  [WAIT n | NOWAIT]\n  TO new_tbl_name\n    [, tbl_name2 TO new_tbl_name2] ...\n"], "Description": ["This statement renames one or more tables or views, but not the privileges associated with them.", "IF EXISTS", "MariaDB starting with 10.5.2If this directive is used, one will not get an error if the table to be renamed doesn't exist.\n", "The rename operation is done atomically, which means that no other session can\naccess any of the tables while the rename is running. For example, if you have\nan existing table old_table, you can create another table\nnew_table that has the same structure but is empty, and then\nreplace the existing table with the empty one as follows (assuming that\nbackup_table does not already exist):", "CREATE TABLE new_table (...);\nRENAME TABLE old_table TO backup_table, new_table TO old_table;\n", "tbl_name can optionally be specified as db_name.tbl_name. See Identifier Qualifiers. This allows to use RENAME to move a table from a database to another (as long as they are on the same filesystem):", "RENAME TABLE db1.t TO db2.t;\n", "Note that moving a table to another database is not possible if it has some triggers. Trying to do so produces the following error:", "ERROR 1435 (HY000): Trigger in wrong schema\n", "Also, views cannot be moved to another database:", "ERROR 1450 (HY000): Changing schema from 'old_db' to 'new_db' is not allowed.\n", "Multiple tables can be renamed in a single statement. The presence or absence of the optional S (RENAME TABLE or RENAME TABLES) has no impact, whether a single or multiple tables are being renamed.", "If a RENAME TABLE renames more than one table and one renaming fails, all renames executed by the same statement are rolled back.", "Renames are always executed in the specified order. Knowing this, it is also possible to swap two tables' names:", "RENAME TABLE t1 TO tmp_table,\n    t2 TO t1,\n    tmp_table TO t2;\n", "WAIT/NOWAIT", "Set the lock wait timeout. See WAIT and NOWAIT.", "Privileges", "Executing the RENAME TABLE statement requires the DROP, CREATE and INSERT privileges for the table or the database.", "Atomic RENAME TABLE", "MariaDB starting with 10.6.1From MariaDB 10.6, RENAME TABLE is atomic for most engines, including InnoDB, MyRocks, MyISAM and Aria (MDEV-23842).\nThis means that if there is a crash (server down or power outage) during RENAME TABLE, all tables will revert to their original names and any changes to trigger files will be reverted.\nIn older MariaDB version there was a small chance that, during a server crash happening in the middle of RENAME TABLE, some tables could have been renamed (in the worst case partly) while others would not be renamed.\nSee Atomic DDL for more information.\n"], "Examples": [], "Category": ["Data Definition"]}
{"HTML": ["https://mariadb.com//kb/en/constraint/"], "Title": ["CONSTRAINT"], "Feature": ["[CONSTRAINT [symbol]] constraint_expression\n\nconstraint_expression:\n  | PRIMARY KEY [index_type] (index_col_name, ...) [index_option] ...\n  | FOREIGN KEY [index_name] (index_col_name, ...) \n       REFERENCES tbl_name (index_col_name, ...)\n       [ON DELETE reference_option]\n       [ON UPDATE reference_option]\n  | UNIQUE [INDEX|KEY] [index_name]\n       [index_type] (index_col_name, ...) [index_option] ...\n  | CHECK (check_constraints)\n\nindex_type:\n  USING {BTREE | HASH | RTREE}\n\nindex_col_name:\n  col_name [(length)] [ASC | DESC]\n\nindex_option:\n  | KEY_BLOCK_SIZE [=] value\n  | index_type\n  | WITH PARSER parser_name\n  | COMMENT 'string'\n  | CLUSTERING={YES|NO}\n\nreference_option:\n  RESTRICT | CASCADE | SET NULL | NO ACTION | SET DEFAULT\n"], "Description": ["Constraints provide restrictions on the data you can add to a table.  This allows you to enforce data integrity from MariaDB, rather than through application logic.  When a statement violates a constraint, MariaDB throws an error.", "There are four types of table constraints:", "ConstraintDescription\nPRIMARY KEYSets the column for referencing rows.  Values must be unique and not null.\nFOREIGN KEYSets the column to reference the primary key on another table.\nUNIQUERequires values in column or columns only occur once in the table.\nCHECKChecks whether the data meets the given condition.\n\n", "The Information Schema TABLE_CONSTRAINTS Table contains information about tables that have constraints.", "FOREIGN KEY Constraints", "InnoDB supports foreign key constraints. The syntax for a foreign key\nconstraint definition in InnoDB looks like this:", "[CONSTRAINT [symbol]] FOREIGN KEY\n    [index_name] (index_col_name, ...)\n    REFERENCES tbl_name (index_col_name,...)\n    [ON DELETE reference_option]\n    [ON UPDATE reference_option]\n\nreference_option:\n    RESTRICT | CASCADE | SET NULL | NO ACTION\n", "The Information Schema REFERENTIAL_CONSTRAINTS table has more information about foreign keys.", "CHECK Constraints", "Constraints are enforced. Before MariaDB 10.2.1 constraint expressions were accepted in the syntax but ignored.", "You can define constraints in 2 different ways:", "CHECK(expression) given as part of a column definition.\nCONSTRAINT [constraint_name] CHECK (expression)\n", "Before a row is inserted or updated, all constraints are evaluated in the order they are defined. If any constraint expression returns false, then the row will not be inserted or updated.\nOne can use most deterministic functions in a constraint, including UDFs.", "CREATE TABLE t1 (a INT CHECK (a>2), b INT CHECK (b>2), CONSTRAINT a_greater CHECK (a>b));\n", "If you use the second format and you don't give a name to the constraint, then the constraint will get an automatically generated name. This is done so that you can later delete the constraint with ALTER TABLE DROP constraint_name.", "One can disable all constraint expression checks by setting the check_constraint_checks variable to OFF. This is useful for example when loading a table that violates some constraints that you want to later find and fix in SQL.", "Replication", "In row-based replication, only the master checks constraints, and failed statements will not be replicated. In statement-based replication, the slaves will also check constraints. Constraints should therefore be identical, as well as deterministic, in a replication environment.", "Auto_increment", "auto_increment columns are not permitted in check constraints. Before MariaDB 10.2.6, they were permitted, but would not work correctly. See MDEV-11117."], "Examples": ["CREATE TABLE product (category INT NOT NULL, id INT NOT NULL,\n                      price DECIMAL,\n                      PRIMARY KEY(category, id)) ENGINE=INNODB;\nCREATE TABLE customer (id INT NOT NULL,\n                       PRIMARY KEY (id)) ENGINE=INNODB;\nCREATE TABLE product_order (no INT NOT NULL AUTO_INCREMENT,\n                            product_category INT NOT NULL,\n                            product_id INT NOT NULL,\n                            customer_id INT NOT NULL,\n                            PRIMARY KEY(no),\n                            INDEX (product_category, product_id),\n                            FOREIGN KEY (product_category, product_id)\n                              REFERENCES product(category, id)\n                              ON UPDATE CASCADE ON DELETE RESTRICT,\n                            INDEX (customer_id),\n                            FOREIGN KEY (customer_id)\n                              REFERENCES customer(id)) ENGINE=INNODB;\n", "CREATE TABLE t1 (a INT CHECK (a>2), b INT CHECK (b>2), CONSTRAINT a_greater CHECK (a>b));\n\nINSERT INTO t1(a) VALUES (1);\nERROR 4022 (23000): CONSTRAINT `a` failed for `test`.`t1`\n\nINSERT INTO t1(a,b) VALUES (3,4);\nERROR 4022 (23000): CONSTRAINT `a_greater` failed for `test`.`t1`\n\nINSERT INTO t1(a,b) VALUES (4,3);\nQuery OK, 1 row affected (0.04 sec)\n", "ALTER TABLE t1 DROP CONSTRAINT a_greater;\n", "ALTER TABLE t1 ADD CONSTRAINT a_greater CHECK (a>b);\n", "CREATE TABLE t2 (name VARCHAR(30) CHECK (CHAR_LENGTH(name)>2), start_date DATE, \n  end_date DATE CHECK (start_date IS NULL OR end_date IS NULL OR start_date<end_date));\n\nINSERT INTO t2(name, start_date, end_date) VALUES('Ione', '2003-12-15', '2014-11-09');\nQuery OK, 1 row affected (0.04 sec)\n\nINSERT INTO t2(name, start_date, end_date) VALUES('Io', '2003-12-15', '2014-11-09');\nERROR 4022 (23000): CONSTRAINT `name` failed for `test`.`t2`\n\nINSERT INTO t2(name, start_date, end_date) VALUES('Ione', NULL, '2014-11-09');\nQuery OK, 1 row affected (0.04 sec)\n\nINSERT INTO t2(name, start_date, end_date) VALUES('Ione', '2015-12-15', '2014-11-09');\nERROR 4022 (23000): CONSTRAINT `end_date` failed for `test`.`t2`\n", "CREATE TABLE t3 (name VARCHAR(30) CHECK (CHAR_LENGTH(name>2)), start_date DATE, \n  end_date DATE CHECK (start_date IS NULL OR end_date IS NULL OR start_date<end_date));\nQuery OK, 0 rows affected (0.32 sec)\n\nINSERT INTO t3(name, start_date, end_date) VALUES('Io', '2003-12-15', '2014-11-09');\nQuery OK, 1 row affected, 1 warning (0.04 sec)\n\nSHOW WARNINGS;\n+---------+------+----------------------------------------+\n| Level   | Code | Message                                |\n+---------+------+----------------------------------------+\n| Warning | 1292 | Truncated incorrect DOUBLE value: 'Io' |\n+---------+------+----------------------------------------+\n"], "Category": ["Data Definition"]}
{"HTML": ["https://mariadb.com//kb/en/create-catalog/"], "Title": ["CREATE CATALOG"], "Feature": ["CREATE CATALOG [IF NOT EXISTS] catalog_name\n    [create_specification] ...\n\ncreate_specification:\n    [DEFAULT] CHARACTER SET [=] charset_name\n  | [DEFAULT] COLLATE [=] collation_name\n  | COMMENT [=] 'comment'\n"], "Description": ["Creates a catalog and the mysql, sys and performance_schema schemas inside the catalog.", "CREATE CATALOG can only be performed by a user in the def catalog with the CATALOG privilege.", "Note that no users are created."], "Examples": ["create catalog cat1;\nuse catalog cat1;\ncreate user root@localhost;\ngrant all privileges on *.* to root@localhost;\ncreate database test;\n"], "Category": ["Data Definition"]}
{"HTML": ["https://mariadb.com//kb/en/create-database/"], "Title": ["CREATE DATABASE"], "Feature": ["CREATE [OR REPLACE] {DATABASE | SCHEMA} [IF NOT EXISTS] db_name\n    [create_specification] ...\n\ncreate_specification:\n    [DEFAULT] CHARACTER SET [=] charset_name\n  | [DEFAULT] COLLATE [=] collation_name\n  | COMMENT [=] 'comment'\n"], "Description": ["CREATE DATABASE creates a database with the given name. To use this statement, you need the CREATE privilege for the database. CREATE SCHEMA is a synonym for CREATE DATABASE.", "For valid identifiers to use as database names, see Identifier Names.", "OR REPLACE", "If the optional OR REPLACE clause is used, it acts as a shortcut for:", "DROP DATABASE IF EXISTS db_name;\nCREATE DATABASE db_name ...;\n", "IF NOT EXISTS", "When the IF NOT EXISTS clause is used, MariaDB will return a warning instead of an error if the specified database already exists.", "COMMENT", "MariaDB starting with 10.5.0From MariaDB 10.5.0, it is possible to add a comment of a maximum of 1024 bytes. If the comment length exceeds this length, a error/warning code 4144 is thrown. The database comment is also added to the db.opt file, as well as to the information_schema.schemata table.\n"], "Examples": ["CREATE DATABASE db1;\nQuery OK, 1 row affected (0.18 sec)\n\nCREATE DATABASE db1;\nERROR 1007 (HY000): Can't create database 'db1'; database exists\n\nCREATE OR REPLACE DATABASE db1;\nQuery OK, 2 rows affected (0.00 sec)\n\nCREATE DATABASE IF NOT EXISTS db1;\nQuery OK, 1 row affected, 1 warning (0.01 sec)\n\nSHOW WARNINGS;\n+-------+------+----------------------------------------------+\n| Level | Code | Message                                      |\n+-------+------+----------------------------------------------+\n| Note  | 1007 | Can't create database 'db1'; database exists |\n+-------+------+----------------------------------------------+\n", "CREATE DATABASE czech_slovak_names \n  CHARACTER SET = 'keybcs2'\n  COLLATE = 'keybcs2_bin';\n", "CREATE DATABASE presentations COMMENT 'Presentations for conferences';\n"], "Category": ["Data Definition"]}
{"HTML": ["https://mariadb.com//kb/en/create-event/"], "Title": ["CREATE EVENT"], "Feature": ["CREATE [OR REPLACE]\n    [DEFINER = { user | CURRENT_USER | role | CURRENT_ROLE }]\n    EVENT \n    [IF NOT EXISTS]\n    event_name    \n    ON SCHEDULE schedule\n    [ON COMPLETION [NOT] PRESERVE]\n    [ENABLE | DISABLE | DISABLE ON SLAVE]\n    [COMMENT 'comment']\n    DO sql_statement;\n\nschedule:\n    AT timestamp [+ INTERVAL interval] ...\n  | EVERY interval \n    [STARTS timestamp [+ INTERVAL interval] ...] \n    [ENDS timestamp [+ INTERVAL interval] ...]\n\ninterval:\n    quantity {YEAR | QUARTER | MONTH | DAY | HOUR | MINUTE |\n              WEEK | SECOND | YEAR_MONTH | DAY_HOUR | DAY_MINUTE |\n              DAY_SECOND | HOUR_MINUTE | HOUR_SECOND | MINUTE_SECOND}\n"], "Description": ["This statement creates and schedules a new event. It requires the\nEVENT privilege for the schema in which the event is to be created.", "The minimum requirements for a valid CREATE EVENT statement are as\nfollows:", "The keywords CREATE EVENT plus an event name, which uniquely identifies\n  the event in the current schema. (Prior to MySQL 5.1.12, the event name\n  needed to be unique only among events created by the same user on a given\n  database.)\nAn ON SCHEDULE clause, which determines when and how often the event\n  executes.\nA DO clause, which contains the SQL statement to be executed by an\n  event.\n", "Here is an example of a minimal CREATE EVENT statement:", "CREATE EVENT myevent\n    ON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 1 HOUR\n    DO\n      UPDATE myschema.mytable SET mycol = mycol + 1;\n", "The previous statement creates an event named myevent. This event executes once\n\u2014 one hour following its creation\n\u2014 by running an SQL statement that increments the\nvalue of the myschema.mytable table's mycol column by 1.", "The event_name must be a valid MariaDB identifier with a maximum length\nof 64 characters. It may be delimited using back ticks, and may be\nqualified with the name of a database schema. An event is associated\nwith both a MariaDB user (the definer) and a schema, and its name must\nbe unique among names of events within that schema. In general, the\nrules governing event names are the same as those for names of stored\nroutines. See Identifier Names.", "If no schema is indicated as part of event_name, the default (current)\nschema is assumed.", "For valid identifiers to use as event names, see Identifier Names.", "OR REPLACE", "The OR REPLACE clause was included in MariaDB 10.1.4. If used and the event already exists, instead of an error being returned, the existing event will be dropped and replaced by the newly defined event.", "IF NOT EXISTS", "If the IF NOT EXISTS clause is used, MariaDB will return a warning instead of an error if the event already exists. Cannot be used together with OR REPLACE.", "ON SCHEDULE", "The ON SCHEDULE clause can be used to specify when the event must be triggered.", "AT", "If you want to execute the event only once (one time event), you can use the AT keyword, followed by a timestamp. If you use CURRENT_TIMESTAMP, the event acts as soon as it is created. As a convenience, you can add one or more intervals to that timestamp. You can also specify a timestamp in the past, so that the event is stored but not triggered, until you modify it via ALTER EVENT.", "The following example shows how to create an event that will be triggered tomorrow at a certain time:", "CREATE EVENT example\nON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 1 DAY + INTERVAL 3 HOUR\nDO something;\n", "You can also specify that an event must be triggered at a regular interval (recurring event). In such cases, use the EVERY clause followed by the interval.", "If an event is recurring, you can specify when the first execution must happen via the STARTS clause and a maximum time for the last execution via the ENDS clause. STARTS and ENDS clauses are followed by a timestamp and, optionally, one or more intervals. The ENDS clause can specify a timestamp in the past, so that the event is stored but not executed until you modify it via ALTER EVENT.", "In the following example, next month a recurring event will be triggered hourly for a week:", "CREATE EVENT example\nON SCHEDULE EVERY 1 HOUR\nSTARTS CURRENT_TIMESTAMP + INTERVAL 1 MONTH\nENDS CURRENT_TIMESTAMP + INTERVAL 1 MONTH + INTERVAL 1 WEEK\nDO some_task;\n", "Intervals consist of a quantity and a time unit. The time units are the same used for other statements and time functions, except that you can't use microseconds for events. For simple time units, like HOUR or MINUTE, the quantity is an integer number, for example '10 MINUTE'. For composite time units, like HOUR_MINUTE or HOUR_SECOND, the quantity must be a string with all involved simple values and their separators, for example '2:30' or '2:30:30'.", "ON COMPLETION [NOT] PRESERVE", "The ON COMPLETION clause can be used to specify if the event must be deleted after its last execution (that is, after its AT or ENDS timestamp is past). By default, events are dropped when they are expired. To explicitly state that this is the desired behaviour, you can use ON COMPLETION NOT PRESERVE. Instead, if you want the event to be preserved, you can use ON COMPLETION PRESERVE.", "In you specify ON COMPLETION NOT PRESERVE, and you specify a timestamp in the past for AT or ENDS clause, the event will be immediately dropped. In such cases, you will get a Note 1558: \"Event execution time is in the past and ON COMPLETION NOT PRESERVE is set. The event was dropped immediately after creation\".", "ENABLE/DISABLE/DISABLE ON SLAVE", "Events are ENABLEd by default. If you want to stop MariaDB from executing\nan event, you may specify DISABLE. When it is ready to be activated, you\nmay enable it using ALTER EVENT. Another option is\nDISABLE ON SLAVE, which indicates that an event was created on a master and has been replicated to the slave, which is prevented from executing the event. If DISABLE ON SLAVE is specifically set, the event will be disabled everywhere. It will not be executed on the master or the slaves.", "COMMENT", "The COMMENT clause may be used to set a comment for the event. Maximum\nlength for comments is 64 characters. The comment is a string, so it must be\nquoted. To see events comments, you can query the INFORMATION_SCHEMA.EVENTS table (the column is named EVENT_COMMENT)."], "Examples": ["CREATE EVENT myevent\n    ON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 1 HOUR\n    DO\n      UPDATE myschema.mytable SET mycol = mycol + 1;\n", "CREATE EVENT example\nON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 1 DAY + INTERVAL 3 HOUR\nDO something;\n", "CREATE EVENT example\nON SCHEDULE EVERY 1 HOUR\nSTARTS CURRENT_TIMESTAMP + INTERVAL 1 MONTH\nENDS CURRENT_TIMESTAMP + INTERVAL 1 MONTH + INTERVAL 1 WEEK\nDO some_task;\n", "CREATE EVENT myevent\n    ON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 1 HOUR\n    DO\n      UPDATE myschema.mytable SET mycol = mycol + 1;\nERROR 1537 (HY000): Event 'myevent' already exists\n\nCREATE OR REPLACE EVENT myevent\n    ON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 1 HOUR\n    DO\n      UPDATE myschema.mytable SET mycol = mycol + 1;;\nQuery OK, 0 rows affected (0.00 sec)\n\nCREATE EVENT IF NOT EXISTS myevent\n    ON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 1 HOUR\n    DO\n      UPDATE myschema.mytable SET mycol = mycol + 1;\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\n SHOW WARNINGS;\n+-------+------+--------------------------------+\n| Level | Code | Message                        |\n+-------+------+--------------------------------+\n| Note  | 1537 | Event 'myevent' already exists |\n+-------+------+--------------------------------+\n"], "Category": ["Data Definition"]}
{"HTML": ["https://mariadb.com//kb/en/create-function-udf/"], "Title": ["CREATE FUNCTION UDF"], "Feature": ["CREATE [OR REPLACE] [AGGREGATE] FUNCTION [IF NOT EXISTS] function_name\n    RETURNS {STRING|INTEGER|REAL|DECIMAL}\n    SONAME shared_library_name\n"], "Description": ["A user-defined function (UDF) is a way to extend MariaDB with a new function\nthat works like a native (built-in) MariaDB function such as ABS() or\nCONCAT().", "function_name is the name that should be used in SQL statements to invoke\nthe function. ", "To create a function, you must have the INSERT privilege for the\nmysql database. This is necessary becauseCREATE FUNCTION adds a row to the\nmysql.func system table that records the function's name,\ntype, and shared library name. If you do not have this table, you should run\nthe mariadb-upgrade command to create it.", "UDFs need to be written in C, C++ or another language that uses C calling\nconventions, MariaDB needs to have been dynamically compiled, and your\noperating system must support dynamic loading.", "For an example, see sql/udf_example.cc in the source tree. For a collection of existing UDFs see http://www.mysqludf.org/.", "Statements making use of user-defined functions are not\nsafe for replication.", "For creating a stored function as opposed to a user-defined function, see\nCREATE FUNCTION.", "For valid identifiers to use as function names, see Identifier Names.", "RETURNS", "The RETURNS clause indicates the type of the function's\nreturn value, and can be one of STRING, INTEGER, REAL or DECIMAL. DECIMAL functions currently return string values and should be written like STRING functions.", "shared_library_name", "shared_library_name is the basename of the shared object file that contains\nthe code that implements the function. The file must be located in the plugin\ndirectory. This directory is given by the value of the\nplugin_dir system variable. Note that\nbefore MariaDB/MySQL 5.1, the shared object could be located in any directory\nthat was searched by your system's dynamic linker.", "AGGREGATE", "Aggregate functions are summary functions such as SUM() and\nAVG().\nAggregate UDF functions can be used as window functions.", "OR REPLACE", "If the optional OR REPLACE clause is used, it acts as a shortcut for:", "DROP FUNCTION IF EXISTS function_name;\nCREATE FUNCTION name ...;\n", "IF NOT EXISTS", "When the IF NOT EXISTS clause is used, MariaDB will return a warning instead of an error if the specified function already exists. Cannot be used together with OR REPLACE.", "Upgrading a UDF", "To upgrade the UDF's shared library, first run a\nDROP FUNCTION statement, then upgrade the shared library and\nfinally run the CREATE FUNCTION statement. If you upgrade without following\nthis process, you may crash the server.", "Examples", "CREATE FUNCTION jsoncontains_path RETURNS integer SONAME 'ha_connect.so';\nQuery OK, 0 rows affected (0.00 sec)\n", "OR REPLACE and IF NOT EXISTS:", "CREATE FUNCTION jsoncontains_path RETURNS integer SONAME 'ha_connect.so';\nERROR 1125 (HY000): Function 'jsoncontains_path' already exists\n\nCREATE OR REPLACE FUNCTION jsoncontains_path RETURNS integer SONAME 'ha_connect.so';\nQuery OK, 0 rows affected (0.00 sec)\n\nCREATE FUNCTION IF NOT EXISTS jsoncontains_path RETURNS integer SONAME 'ha_connect.so';\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\nSHOW WARNINGS;\n+-------+------+---------------------------------------------+\n| Level | Code | Message                                     |\n+-------+------+---------------------------------------------+\n| Note  | 1125 | Function 'jsoncontains_path' already exists |\n+-------+------+---------------------------------------------+\n"], "Examples": [], "Category": ["Data Definition"]}
{"HTML": ["https://mariadb.com//kb/en/create-function/"], "Title": ["CREATE FUNCTION"], "Feature": ["CREATE [OR REPLACE]\n    [DEFINER = {user | CURRENT_USER | role | CURRENT_ROLE }]\n    [AGGREGATE] FUNCTION [IF NOT EXISTS] func_name ([func_parameter[,...]])\n    RETURNS type\n    [characteristic ...]\n    RETURN func_body\nfunc_parameter:\n    [ IN | OUT | INOUT | IN OUT ]  param_name type\ntype:\n    Any valid MariaDB data type\ncharacteristic:\n    LANGUAGE SQL\n  | [NOT] DETERMINISTIC\n  | { CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA }\n  | SQL SECURITY { DEFINER | INVOKER }\n  | COMMENT 'string'\nfunc_body:\n    Valid SQL procedure statement"], "Description": ["Use the CREATE FUNCTION statement to create a new stored function. You must have\nthe CREATE ROUTINE database privilege to use CREATE FUNCTION.\nA function takes any number of arguments and returns a value from the function body. The\nfunction body can be any valid SQL expression as you would use, for example, in any select\nexpression. If you have the appropriate privileges, you can call the function exactly as you\nwould any built-in function. See Security below for details on privileges.", "You can also use a variant of the CREATE FUNCTION statement to install a user-defined\nfunction (UDF) defined by a plugin. See CREATE FUNCTION (UDF)\nfor details.", "You can use a SELECT statement for the function body by enclosing it in\nparentheses, exactly as you would to use a subselect for any other expression. The SELECT\nstatement must return a single value. If more than one column is returned when the function is called,\nerror 1241 results. If more than one row is returned when the function is called, error 1242\nresults. Use a LIMIT clause to ensure only one row is returned.", "You can also replace the RETURN clause with a BEGIN...END compound\nstatement. The compound statement must contain a RETURN statement. When the function is\ncalled, the RETURN statement immediately returns its result, and any statements after RETURN\nare effectively ignored.", "By default, a function is associated with the current database. To associate the function explicitly\nwith a given database, specify the fully-qualified name as db_name.func_name\nwhen you create it. If the function name is the same as the name of a built-in function, you must\nuse the fully qualified name when you call it.", "The parameter list enclosed within parentheses must always be present.\nIf there are no parameters, an empty parameter list of () should be\nused. Parameter names are not case sensitive.", "Each parameter can be declared to use any valid data type, except that\nthe COLLATE attribute cannot be used.", "For valid identifiers to use as function names, see Identifier Names.", "IN | OUT | INOUT | IN OUT", "MariaDB starting with 10.8.0The function parameter qualifiers for IN, OUT, INOUT, and IN OUT were added in a 10.8.0 preview release. Prior to 10.8.0 quantifiers were supported only in procedures.\n", "OUT, INOUT and its equivalent IN OUT, are only valid if called from SET and not SELECT. These quantifiers are especially useful for creating functions with more than one return value. This allows functions to be more complex and nested.", "DELIMITER $$\nCREATE FUNCTION add_func3(IN a INT, IN b INT, OUT c INT) RETURNS INT\nBEGIN\n  SET c = 100;\n  RETURN a + b;\nEND;\n$$\nDELIMITER ;\n \nSET @a = 2;\nSET @b = 3;\nSET @c = 0;\nSET @res= add_func3(@a, @b, @c);\n\nSELECT add_func3(@a, @b, @c);\nERROR 4186 (HY000): OUT or INOUT argument 3 for function add_func3 is not allowed here\n\nDELIMITER $$\nCREATE FUNCTION add_func4(IN a INT, IN b INT, d INT) RETURNS INT\nBEGIN\n  DECLARE c, res INT;\n  SET res = add_func3(a, b, c) + d;\n  if (c > 99) then\n    return  3;\n  else\n    return res;\n  end if;\nEND;\n$$\n\nDELIMITER ;\n\nSELECT add_func4(1,2,3);\n+------------------+\n| add_func4(1,2,3) |\n+------------------+\n|                3 |\n+------------------+\n", "AGGREGATE", "It is possible to create stored aggregate functions as well. See Stored Aggregate Functions for details.", "RETURNS", "The RETURNS clause specifies the return type of the function. NULL values are permitted with all return types.", "What happens if the RETURN clause returns a value of a different type? It depends on the SQL_MODE in effect at the moment of the function creation.", "If the SQL_MODE is strict (STRICT_ALL_TABLES or STRICT_TRANS_TABLES flags are specified), a 1366 error will be produced.", "Otherwise, the value is coerced to the proper type. For example, if a function\nspecifies an ENUM or SET value in the RETURNS clause, but the RETURN\nclause returns an integer, the value returned from the function is the string for the corresponding ENUM\nmember of set of SET members.", "MariaDB stores the SQL_MODE system variable setting that is in effect at the\ntime a routine is created, and always executes the routine with this setting in\nforce, regardless of the server SQL mode in effect when the routine is invoked.", "LANGUAGE SQL", "LANGUAGE SQL is a standard SQL clause, and it can be used in MariaDB for portability. However that clause has no meaning, because SQL is the only supported language for stored functions.", "A function is deterministic if it can produce only one result for a given list of parameters. If the result may be affected by stored data, server variables, random numbers or any value that is not explicitly passed, then the function is not deterministic. Also, a function is non-deterministic if it uses non-deterministic functions like NOW() or CURRENT_TIMESTAMP(). The optimizer may choose a faster execution plan if it known that the function is deterministic. In such cases, you should declare the routine using the DETERMINISTIC keyword. If you want to explicitly state that the function is not deterministic (which is the default) you can use the NOT DETERMINISTIC keywords.", "If you declare a non-deterministic function as DETERMINISTIC, you may get incorrect results. If you declare a deterministic function as NOT DETERMINISTIC, in some cases the queries will be slower.", "OR REPLACE", "If the optional OR REPLACE clause is used, it acts as a shortcut for:", "DROP FUNCTION IF EXISTS function_name;\nCREATE FUNCTION function_name ...;\n", "with the exception that any existing privileges for the function are not dropped.", "IF NOT EXISTS", "If the IF NOT EXISTS clause is used, MariaDB will return a warning instead of an error if the function already exists. Cannot be used together with OR REPLACE.", "[NOT] DETERMINISTIC", "The [NOT] DETERMINISTIC clause also affects binary logging, because the STATEMENT format can not be used to store or replicate non-deterministic statements.", "CONTAINS SQL, NO SQL, READS SQL DATA, and MODIFIES SQL DATA are informative clauses that tell the server what the function does. MariaDB does not check in any way whether the specified clause is correct. If none of these clauses are specified, CONTAINS SQL is used by default.", "MODIFIES SQL DATA", "MODIFIES SQL DATA means that the function contains statements that may modify data stored in databases. This happens if the function contains statements like DELETE, UPDATE, INSERT, REPLACE or DDL.", "READS SQL DATA", "READS SQL DATA means that the function reads data stored in databases, but does not modify any data. This happens if SELECT statements are used, but there no write operations are executed.", "CONTAINS SQL", "CONTAINS SQL means that the function contains at least one SQL statement, but it does not read or write any data stored in a database. Examples include SET or DO.", "NO SQL", "NO SQL means nothing, because MariaDB does not currently support any language other than SQL.", "Oracle Mode", "A subset of Oracle's PL/SQL language is supported in addition to the traditional SQL/PSM-based MariaDB syntax. See Oracle mode for details on changes when running Oracle mode."], "Examples": ["CREATE FUNCTION hello (s CHAR(20))\n    RETURNS CHAR(50) DETERMINISTIC\n    RETURN CONCAT('Hello, ',s,'!');\n\nSELECT hello('world');\n+----------------+\n| hello('world') |\n+----------------+\n| Hello, world!  |\n+----------------+\n", "CREATE TEMPORARY TABLE counter (c INT);\nINSERT INTO counter VALUES (0);\nDELIMITER //\nCREATE FUNCTION counter () RETURNS INT\n  BEGIN\n    UPDATE counter SET c = c + 1;\n    RETURN (SELECT c FROM counter LIMIT 1);\n  END //\nDELIMITER ;\n", "CREATE FUNCTION hello2 (s CHAR(20))\n  RETURNS CHAR(50) CHARACTER SET 'utf8' COLLATE 'utf8_bin' DETERMINISTIC\n  RETURN CONCAT('Hello, ',s,'!');\n"], "Category": ["Data Definition"]}
{"HTML": ["https://mariadb.com//kb/en/alter-function/"], "Title": ["ALTER FUNCTION"], "Feature": ["ALTER FUNCTION func_name [characteristic ...]\n\ncharacteristic:\n    { CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA }\n  | SQL SECURITY { DEFINER | INVOKER }\n  | COMMENT 'string'\n"], "Description": ["This statement can be used to change the characteristics of a stored\nfunction. More than one change may be specified in an ALTER FUNCTION\nstatement. However, you cannot change the parameters or body of a\nstored function using this statement; to make such changes, you must\ndrop and re-create the function using DROP FUNCTION and CREATE FUNCTION.", "You must have the ALTER ROUTINE privilege for the function. (That\nprivilege is granted automatically to the function creator.) If binary\nlogging is enabled, the ALTER FUNCTION statement might also require\nthe SUPER privilege, as described in Binary Logging of Stored Routines."], "Examples": ["ALTER FUNCTION hello SQL SECURITY INVOKER;\n"], "Category": ["Data Definition"]}
{"HTML": ["https://mariadb.com//kb/en/create-index/"], "Title": ["CREATE INDEX"], "Feature": ["CREATE [OR REPLACE] [UNIQUE|FULLTEXT|SPATIAL] INDEX \n  [IF NOT EXISTS] index_name\n    [index_type]\n    ON tbl_name (index_col_name,...)\n    [WAIT n | NOWAIT]\n    [index_option]\n    [algorithm_option | lock_option] ...\n\nindex_col_name:\n    col_name [(length)] [ASC | DESC]\n\nindex_type:\n    USING {BTREE | HASH | RTREE}\n\nindex_option:\n    [ KEY_BLOCK_SIZE [=] value\n  | index_type\n  | WITH PARSER parser_name\n  | COMMENT 'string'\n  | CLUSTERING={YES| NO} ]\n  [ IGNORED | NOT IGNORED ]\n\nalgorithm_option:\n    ALGORITHM [=] {DEFAULT|INPLACE|COPY|NOCOPY|INSTANT}\n\nlock_option:\n    LOCK [=] {DEFAULT|NONE|SHARED|EXCLUSIVE}\n"], "Description": ["The CREATE INDEX statement is used to add indexes to a table. Indexes can be created at the same as the table, with the CREATE TABLE statement. In some cases, such as for InnoDB primary keys, doing so during creation is preferable, as adding a primary key will involve rebuilding the table.", "The statement is mapped to an ALTER TABLE statement to create indexes.\nSee ALTER TABLE. CREATE INDEX cannot be used to create a\nPRIMARY KEY; use ALTER TABLE instead.", "If another connection is using the table, a metadata lock is active, and this statement will wait until the lock is released. This is also true for non-transactional tables.", "Another shortcut, DROP INDEX, allows the removal of an index.", "For valid identifiers to use as index names, see Identifier Names.", "For limits on InnoDB indexes, see InnoDB Limitations.", "Note that KEY_BLOCK_SIZE is currently ignored in CREATE INDEX, although it is included in the output of SHOW CREATE TABLE.\n"], "Examples": ["CREATE UNIQUE INDEX HomePhone ON Employees(Home_Phone);\n", "CREATE INDEX xi ON xx5 (x);\nQuery OK, 0 rows affected (0.03 sec)\n\nCREATE INDEX xi ON xx5 (x);\nERROR 1061 (42000): Duplicate key name 'xi'\n\nCREATE OR REPLACE INDEX xi ON xx5 (x);\nQuery OK, 0 rows affected (0.03 sec)\n\nCREATE INDEX IF NOT EXISTS xi ON xx5 (x);\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\nSHOW WARNINGS;\n+-------+------+-------------------------+\n| Level | Code | Message                 |\n+-------+------+-------------------------+\n| Note  | 1061 | Duplicate key name 'xi' |\n+-------+------+-------------------------+\n", "CREATE UNIQUE INDEX u ON rooms (room_number, p WITHOUT OVERLAPS);\n"], "Category": ["Data Definition"]}
{"HTML": ["https://mariadb.com//kb/en/create-procedure/"], "Title": ["CREATE PROCEDURE"], "Feature": ["CREATE\n    [OR REPLACE]\n    [DEFINER = { user | CURRENT_USER | role | CURRENT_ROLE }]\n    PROCEDURE [IF NOT EXISTS] sp_name ([proc_parameter[,...]])\n    [characteristic ...] routine_body\n\nproc_parameter:\n    [ IN | OUT | INOUT ] param_name type\n\ntype:\n    Any valid MariaDB data type\n\ncharacteristic:\n    LANGUAGE SQL\n  | [NOT] DETERMINISTIC\n  | { CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA }\n  | SQL SECURITY { DEFINER | INVOKER }\n  | COMMENT 'string'\n\nroutine_body:\n    Valid SQL procedure statement\n"], "Description": ["Creates a stored procedure. By default, a routine is\nassociated with the default database. To associate the routine\nexplicitly with a given database, specify the name as db_name.sp_name\nwhen you create it.", "When the routine is invoked, an implicit USE db_name is performed (and\nundone when the routine terminates). The causes the routine to have\nthe given default database while it executes. USE statements within\nstored routines are disallowed.", "When a stored procedure has been created, you invoke it by\nusing the CALL statement (see CALL).", "To execute the CREATE PROCEDURE statement, it is\nnecessary to have the CREATE ROUTINE privilege. By default, MariaDB\nautomatically grants the ALTER ROUTINE and EXECUTE privileges to the\nroutine creator. See also Stored Routine Privileges.", "The DEFINER and SQL SECURITY clauses specify the security context to\nbe used when checking access privileges at routine execution time, as\ndescribed here. Requires the SUPER privilege, or, from MariaDB 10.5.2, the SET USER privilege.", "If the routine name is the same as the name of a built-in SQL\nfunction, you must use a space between the name and the following\nparenthesis when defining the routine, or a syntax error occurs. This\nis also true when you invoke the routine later. For this reason, we\nsuggest that it is better to avoid re-using the names of existing SQL\nfunctions for your own stored routines.", "The IGNORE_SPACE SQL mode applies to built-in functions, not to stored\nroutines. It is always allowable to have spaces after a routine name,\nregardless of whether IGNORE_SPACE is enabled.", "The parameter list enclosed within parentheses must always be present.\nIf there are no parameters, an empty parameter list of () should be\nused. Parameter names are not case sensitive.", "Each parameter can be declared to use any valid data type, except that\nthe COLLATE attribute cannot be used.", "For valid identifiers to use as procedure names, see Identifier Names.", "Things to be Aware of With CREATE OR REPLACE", "One can't use OR REPLACE together with IF EXISTS.\n"], "Examples": ["DELIMITER //\n\nCREATE PROCEDURE simpleproc (OUT param1 INT)\n BEGIN\n  SELECT COUNT(*) INTO param1 FROM t;\n END;\n//\n\nDELIMITER ;\n\nCALL simpleproc(@a);\n\nSELECT @a;\n+------+\n| @a   |\n+------+\n|    1 |\n+------+\n", "DELIMITER //\n\nCREATE PROCEDURE simpleproc2 (\n  OUT param1 CHAR(10) CHARACTER SET 'utf8' COLLATE 'utf8_bin'\n)\n BEGIN\n  SELECT CONCAT('a'),f1 INTO param1 FROM t;\n END;\n//\n\nDELIMITER ;\n", "DELIMITER //\n\nCREATE PROCEDURE simpleproc2 (\n  OUT param1 CHAR(10) CHARACTER SET 'utf8' COLLATE 'utf8_bin'\n)\n BEGIN\n  SELECT CONCAT('a'),f1 INTO param1 FROM t;\n END;\n//\nERROR 1304 (42000): PROCEDURE simpleproc2 already exists\n\nDELIMITER ;\n\nDELIMITER //\n\nCREATE OR REPLACE PROCEDURE simpleproc2 (\n  OUT param1 CHAR(10) CHARACTER SET 'utf8' COLLATE 'utf8_bin'\n)\n BEGIN\n  SELECT CONCAT('a'),f1 INTO param1 FROM t;\n END;\n//\nERROR 1304 (42000): PROCEDURE simpleproc2 already exists\n\nDELIMITER ;\nQuery OK, 0 rows affected (0.03 sec)\n"], "Category": ["Data Definition"]}
{"HTML": ["https://mariadb.com//kb/en/create-sequence/"], "Title": ["CREATE SEQUENCE"], "Feature": ["CREATE [OR REPLACE] [TEMPORARY] SEQUENCE [IF NOT EXISTS] sequence_name\n[AS { TINYINT | SMALLINT | |MEDIUMINT | INT | INTEGER | BIGINT } [SIGNED | UNSIGNED]]\n[ INCREMENT [ BY | = ] number ]\n[ MINVALUE [=] number | NO MINVALUE | NOMINVALUE ]\n[ MAXVALUE [=] number | NO MAXVALUE | NOMAXVALUE ]\n[ START [ WITH | = ] number ] \n[ CACHE [=] number | NOCACHE ] [ CYCLE | NOCYCLE] \ntable_options", "\nThe options for CREATE SEQUENCE can be given in any order, optionally followed by table_options.", "table_options can be any of the normal table options in CREATE TABLE but the most usable ones are ENGINE=... and COMMENT=.", "NOMAXVALUE and NOMINVALUE are there to allow one to create SEQUENCEs using the Oracle syntax."], "Description": ["CREATE SEQUENCE will create a sequence that generates new\nvalues when called with NEXT VALUE FOR sequence_name. It's an alternative to AUTO INCREMENT when one wants to have more control of how the numbers are generated.  As the SEQUENCE caches values (up to CACHE) it can in some cases be much faster than AUTO INCREMENT. Another benefit is that one can access the last value generated by all used sequences, which solves one of the limitations with LAST_INSERT_ID().", "CREATE SEQUENCE requires the CREATE privilege.", "DROP SEQUENCE can be used to drop a sequence, and ALTER SEQUENCE to change it.", "CREATE arguments", "The following options may be used:", "AS", "int type, i.e. one of TINYINT, SMALLINT, MEDIUMINT, INT, INTEGER, BIGINT. Can be signed or unsigned. Maximum value is based on the data type. The use of BIGINT UNSIGNED with this option extends the possible maximum value from 9223372036854775806 to 18446744073709551614. Default BIGINT. From MariaDB 11.5.", "INCREMENT", "Increment to use for values. May be negative. Setting an increment of 0 causes the sequence to use the value of the auto_increment_increment system variable at the time of creation, which is always a positive number. (see MDEV-16035). Default 1.", "MINVALUE", "Minimum value for the sequence. From MariaDB 11.5, parser permits much smaller numbers, such as -9999999999999999999999999999, but converts to  the minimum permitted for the int type, with a note. Default 1 if INCREMENT > 0 and -9223372036854775807 (or based on int type) if INCREMENT < 0.", "MAXVALUE", "Max value for sequence. From MariaDB 11.5, parser permits much larger numbers, such as 9999999999999999999999999999 used in Oracle examples, but converts to the maximum permitted for the int type, with a note. Default 9223372036854775806 (or based on int type) if INCREMENT > 0 and -1 if INCREMENT < 0.\n", "START", "First value that the sequence will generate. Default MINVALUE if INCREMENT > 0, and MAX_VALUE if INCREMENT< 0.", "CACHE / NOCACHE", "Number of values that should be cached. 0 if no CACHE.  The underlying table will be updated first time a new sequence number is generated and each time the cache runs out. Default 1000. FLUSH TABLES, shutting down the server, etc. will discard the cached values, and the next sequence number generated will be according to what's stored in the Sequence object. In effect, this will discard the cached values. Note that setting the cache to 1 from 1000, can make inserts to tables using sequences for default values 2x slower and increase the binary log sizes up to 7x.", "CYCLE / NOCYCLE", "If CYCLE is used, then the sequence should start again from MINVALUE after it has run out of values. Default value is NOCYCLE.", "Constraints on Create Arguments", "To be able to create a legal sequence, the following must hold:", "MAXVALUE >= start\nMAXVALUE > MINVALUE\nSTART >= MINVALUE\nMAXVALUE <= 9223372036854775806  (LONGLONG_MAX-1). From MariaDB 11.5, the parser accepts values beyond this, and converts based on the int type.\nMINVALUE >= -9223372036854775807 (LONGLONG_MIN+1). From MariaDB 11.5, the parser accepts values beyond this, and converts based on the int type.\n", "Note that sequences can't generate the maximum/minimum 64 bit number because of the constraint of\nMINVALUE and MAXVALUE. ", "Atomic DDL", "MariaDB starting with 10.6.1MariaDB 10.6.1 supports Atomic DDL and CREATE SEQUENCE is atomic.\n"], "Examples": ["CREATE SEQUENCE s START WITH 100 INCREMENT BY 10;\n\nCREATE SEQUENCE s2 START WITH -100 INCREMENT BY -10;\n", "CREATE SEQUENCE s3 START WITH -100 INCREMENT BY 10;\nERROR 4082 (HY000): Sequence 'test.s3' values are conflicting\n", "CREATE SEQUENCE s3 START WITH -100 INCREMENT BY 10 MINVALUE=-100 MAXVALUE=1000;\n", "CREATE SEQUENCE s3 AS BIGINT UNSIGNED START WITH 10;\n", "CREATE OR REPLACE SEQUENCE s AS TINYINT SIGNED\n  MINVALUE=-999999999999999999999999999999999\n  MAXVALUE=999999999999999999999999999999999 \n  START WITH 100 INCREMENT BY 10;\nQuery OK, 0 rows affected, 2 warnings (0.037 sec)\n\nSHOW WARNINGS;\n+-------+------+-----------------------------------------------+\n| Level | Code | Message                                       |\n+-------+------+-----------------------------------------------+\n| Note  | 1292 | Truncated incorrect INTEGER value: 'MINVALUE' |\n| Note  | 1292 | Truncated incorrect INTEGER value: 'MAXVALUE' |\n+-------+------+-----------------------------------------------+\n\nSELECT * FROM INFORMATION_SCHEMA.SEQUENCES\\G\n*************************** 1. row ***************************\n       SEQUENCE_CATALOG: def\n        SEQUENCE_SCHEMA: test\n          SEQUENCE_NAME: s\n              DATA_TYPE: tinyint\n      NUMERIC_PRECISION: 8\nNUMERIC_PRECISION_RADIX: 2\n          NUMERIC_SCALE: 0\n            START_VALUE: 100\n          MINIMUM_VALUE: -127\n          MAXIMUM_VALUE: 126\n              INCREMENT: 10\n           CYCLE_OPTION: 0\n", "CREATE OR REPLACE SEQUENCE s START WITH 1 INCREMENT BY 1 MAXVALUE=10 CACHE=5;\n\nSELECT NEXTVAL(s);\n+------------+\n| NEXTVAL(s) |\n+------------+\n|          1 |\n+------------+\n\nSELECT NEXTVAL(s);\n+------------+\n| NEXTVAL(s) |\n+------------+\n|          2 |\n+------------+\n\nFLUSH TABLES s;\n\nSELECT NEXTVAL(s);\n+------------+\n| NEXTVAL(s) |\n+------------+\n|          6 |\n+------------+\n\nFLUSH TABLES s;\n\nSELECT NEXTVAL(s);\nERROR 4084 (HY000): Sequence 'test.s' has run out\n", "create sequence s1;\ncreate table t1 (a int primary key default nextval(s1), b int);\ninsert into t1 (b) values(1);\nselect * from t1;\n+---+------+\n| a | b    |\n+---+------+\n| 1 |    1 |\n+---+------+\n"], "Category": ["Data Definition"]}
{"HTML": ["https://mariadb.com//kb/en/create-server/"], "Title": ["CREATE SERVER"], "Feature": ["CREATE [OR REPLACE] SERVER [IF NOT EXISTS] server_name\n    FOREIGN DATA WRAPPER wrapper_name\n    OPTIONS (option [, option] ...)\n\noption:\n  { HOST character-literal\n  | DATABASE character-literal\n  | USER character-literal\n  | PASSWORD character-literal\n  | SOCKET character-literal\n  | OWNER character-literal\n  | PORT numeric-literal }\n"], "Description": ["This statement creates the definition of a server for use with the Spider, Connect, \nFEDERATED or FederatedX storage\nengine. The CREATE SERVER statement creates a new row within the\nservers table within the mysql database. This statement\nrequires the SUPER privilege or, from MariaDB 10.5.2, the FEDERATED ADMIN privilege.", "The server_name should be a unique reference to the server. Server definitions\nare global within the scope of the server, it is not possible to qualify the\nserver definition to a specific database. server_name has a maximum length of\n64 characters (names longer than 64 characters are silently truncated), and is\ncase insensitive. You may specify the name as a quoted string.", "The wrapper_name may be quoted with single quotes. Supported values are:", "mysql\nmariadb (in MariaDB 10.3 and later) \n", "For each option you must specify either a character literal or numeric literal.\nCharacter literals are UTF-8, support a maximum length of 64 characters and\ndefault to a blank (empty) string. String literals are silently truncated to 64\ncharacters. Numeric literals must be a number between 0 and 9999, default value\nis 0.", "Note: The OWNER option is currently not applied, and has no effect on\nthe ownership or operation of the server connection that is created.", "The CREATE SERVER statement creates an entry in the\nmysql.servers table that can later be used with the\nCREATE TABLE statement when creating a Spider, Connect, FederatedX or\nFEDERATED table. The options that you specify will\nbe used to populate the columns in the mysql.servers table. The table columns\nare Server_name, Host, Db, Username, Password, Port and Socket.", " DROP SERVER removes a previously created server definition. ", "CREATE SERVER is not written to the binary log, irrespective of\nthe binary log format being used and therefore will not replicate. From MariaDB 10.1.13, Galera replicates the CREATE SERVER, ALTER SERVER and DROP SERVER statements.", "For valid identifiers to use as server names, see Identifier Names.", "OR REPLACE", "If the optional OR REPLACE clause is used, it acts as a shortcut for:", "DROP SERVER IF EXISTS name;\nCREATE SERVER server_name ...;\n", "IF NOT EXISTS", "If the IF NOT EXISTS clause is used, MariaDB will return a warning instead of an error if the server already exists. Cannot be used together with OR REPLACE."], "Examples": ["CREATE SERVER s\nFOREIGN DATA WRAPPER mariadb\nOPTIONS (USER 'Remote', HOST '192.168.1.106', DATABASE 'test');\n", "CREATE SERVER s \nFOREIGN DATA WRAPPER mariadb \nOPTIONS (USER 'Remote', HOST '192.168.1.106', DATABASE 'test');\nERROR 1476 (HY000): The foreign server, s, you are trying to create already exists\n\nCREATE OR REPLACE SERVER s \nFOREIGN DATA WRAPPER mariadb \nOPTIONS (USER 'Remote', HOST '192.168.1.106', DATABASE 'test');\nQuery OK, 0 rows affected (0.00 sec)\n\nCREATE SERVER IF NOT EXISTS s \nFOREIGN DATA WRAPPER mariadb \nOPTIONS (USER 'Remote', HOST '192.168.1.106', DATABASE 'test');\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\nSHOW WARNINGS;\n+-------+------+----------------------------------------------------------------+\n| Level | Code | Message                                                        |\n+-------+------+----------------------------------------------------------------+\n| Note  | 1476 | The foreign server, s, you are trying to create already exists |\n+-------+------+----------------------------------------------------------------+\n"], "Category": ["Data Definition"]}
{"HTML": ["https://mariadb.com//kb/en/create-table/"], "Title": ["CREATE TABLE"], "Feature": ["CREATE [OR REPLACE] [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name\n    (create_definition,...) [table_options    ]... [partition_options]\nCREATE [OR REPLACE] [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name\n    [(create_definition,...)] [table_options   ]... [partition_options]\n    select_statement\nCREATE [OR REPLACE] [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name\n   { LIKE old_table_name | (LIKE old_table_name) }\nselect_statement:\n    [IGNORE | REPLACE] [AS] SELECT ...   (Some legal select statement)"], "Description": ["Use the CREATE TABLE statement to create a table with the given name.", "In its most basic form, the CREATE TABLE statement provides a table name\nfollowed by a list of columns, indexes, and constraints. By default, the table\nis created in the default database. Specify a database with db_name.tbl_name.\nIf you quote the table name, you must quote the database name and table name\nseparately as `db_name`.`tbl_name`. This is particularly useful for CREATE TABLE ... SELECT, because it allows to create a table into a database, which contains data from other databases. See Identifier Qualifiers.", "If a table with the same name exists, error 1050 results. Use IF NOT EXISTS\nto suppress this error and issue a note instead. Use SHOW WARNINGS\nto see notes.", "The CREATE TABLE statement automatically commits the current transaction,\nexcept when using the TEMPORARY keyword.", "For valid identifiers to use as table names, see Identifier Names.", "Note: if the default_storage_engine is set to ColumnStore then it needs setting on all UMs. Otherwise when the tables using the default engine are replicated across UMs they will use the wrong engine. You should therefore not use this option as a session variable with ColumnStore.\n", "Microsecond precision can be between 0-6. If no precision is specified it is assumed to be 0, for backward compatibility reasons."], "Examples": ["create table if not exists test (\na bigint auto_increment primary key,\nname varchar(128) charset utf8,\nkey name (name(32))\n) engine=InnoDB default charset latin1;\n", "CREATE TABLE t1(\n  a int DEFAULT (1+1),\n  b int DEFAULT (a+1),\n  expires DATETIME DEFAULT(NOW() + INTERVAL 1 YEAR),\n  x BLOB DEFAULT USER()\n);\n"], "Category": ["Data Definition"]}
{"HTML": ["https://mariadb.com//kb/en/create-trigger/"], "Title": ["CREATE TRIGGER"], "Feature": ["CREATE [OR REPLACE]\n    [DEFINER = { user | CURRENT_USER | role | CURRENT_ROLE }]\n    TRIGGER [IF NOT EXISTS] trigger_name trigger_time trigger_event\n    ON tbl_name FOR EACH ROW\n   [{ FOLLOWS | PRECEDES } other_trigger_name ]\n   trigger_stmt;\n\ntrigger time:\n    BEFORE\n  | AFTER\n\ntrigger_event:\n    INSERT\n  | UPDATE\n  | DELETE\n"], "Description": ["This statement creates a new trigger. A trigger is a named database\nobject that is associated with a table, and that activates when a\nparticular event occurs for the table. The trigger becomes associated\nwith the table named tbl_name, which must refer to a permanent table.\nYou cannot associate a trigger with a TEMPORARY table or a view.", "CREATE TRIGGER requires the TRIGGER privilege for the table associated\nwith the trigger.", "You can have multiple triggers for the same trigger_time and trigger_event.", "For valid identifiers to use as trigger names, see Identifier Names.", "OR REPLACE", "If used and the trigger already exists, instead of an error being returned, the existing trigger will be dropped and replaced by the newly defined trigger.", "DEFINER", "The DEFINER clause determines the security context to be used when\nchecking access privileges at trigger activation time. Usage requires the SUPER privilege, or, from MariaDB 10.5.2, the SET USER privilege.", "IF NOT EXISTS", "If the IF NOT EXISTS clause is used, the trigger will only be created if a trigger of the same name does not exist. If the trigger already exists, by default a warning will be returned.", "trigger_time", "trigger_time is the trigger action time. It can be BEFORE or AFTER to\nindicate that the trigger activates before or after each row to be\nmodified.", "trigger_event", "trigger_event indicates the kind of statement that activates the\ntrigger. The trigger_event can be one of the following:", "INSERT: The trigger is activated whenever a new row is inserted into the table; for example, through INSERT, LOAD DATA, and REPLACE statements.\nUPDATE: The trigger is activated whenever a row is modified; for example, through UPDATE statements.\nDELETE: The trigger is activated whenever a row is deleted from the table; for example, through DELETE and REPLACE statements. However, DROP TABLE and TRUNCATE statements on the table do not activate this trigger, because they do not use DELETE. Dropping a partition does not activate DELETE triggers, either.\n", "FOLLOWS/PRECEDES other_trigger_name", "The FOLLOWS other_trigger_name and PRECEDES other_trigger_name options were added in MariaDB 10.2.3 as part of supporting multiple triggers per action time.\nThis is the same syntax used by MySQL 5.7, although MySQL 5.7 does not have multi-trigger support.", "FOLLOWS adds the new trigger after another trigger while PRECEDES adds the new trigger before another trigger.  If neither option is used, the new trigger is added last for the given action and time.", "FOLLOWS and PRECEDES are not stored in the trigger definition. However the trigger order is guaranteed to not change over time. mariadb-dump and other backup methods will not change trigger order.\nYou can verify the trigger order from the ACTION_ORDER column in INFORMATION_SCHEMA.TRIGGERS table.", "SELECT trigger_name, action_order FROM information_schema.triggers \n  WHERE event_object_table='t1';\n", "Atomic DDL", "MariaDB starting with 10.6.1MariaDB 10.6.1 supports Atomic DDL and CREATE TRIGGER is atomic.\n"], "Examples": ["CREATE DEFINER=`root`@`localhost` TRIGGER increment_animal\n  AFTER INSERT ON animals FOR EACH ROW \n   UPDATE animal_count SET animal_count.animals = animal_count.animals+1;\n", "CREATE DEFINER=`root`@`localhost` TRIGGER increment_animal\n  AFTER INSERT ON animals FOR EACH ROW\n    UPDATE animal_count SET animal_count.animals = animal_count.animals+1;\nERROR 1359 (HY000): Trigger already exists\n\nCREATE OR REPLACE DEFINER=`root`@`localhost` TRIGGER increment_animal\n  AFTER INSERT ON animals  FOR EACH ROW\n    UPDATE animal_count SET animal_count.animals = animal_count.animals+1;\nQuery OK, 0 rows affected (0.12 sec)\n\nCREATE DEFINER=`root`@`localhost` TRIGGER IF NOT EXISTS increment_animal\n  AFTER INSERT ON animals FOR EACH ROW\n    UPDATE animal_count SET animal_count.animals = animal_count.animals+1;\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\nSHOW WARNINGS;\n+-------+------+------------------------+\n| Level | Code | Message                |\n+-------+------+------------------------+\n| Note  | 1359 | Trigger already exists |\n+-------+------+------------------------+\n1 row in set (0.00 sec)\n"], "Category": ["Data Definition"]}
{"HTML": ["https://mariadb.com//kb/en/create-view/"], "Title": ["CREATE VIEW"], "Feature": ["CREATE\n    [OR REPLACE]\n    [ALGORITHM = {UNDEFINED | MERGE | TEMPTABLE}]\n    [DEFINER = { user | CURRENT_USER | role | CURRENT_ROLE }]\n    [SQL SECURITY { DEFINER | INVOKER }]\n    VIEW [IF NOT EXISTS] view_name [(column_list)]\n    AS select_statement\n    [WITH [CASCADED | LOCAL] CHECK OPTION]\n"], "Description": ["The CREATE VIEW statement creates a new view, or replaces an existing\none if the OR REPLACE clause is given. If the view does not exist, CREATE OR\nREPLACE VIEW is the same as CREATE VIEW. If the view does exist, CREATE OR\nREPLACE VIEW is the same as ALTER VIEW.", "The select_statement is a SELECT statement that provides the definition of\nthe view. (When you select from the view, you select in effect using the SELECT\nstatement.) select_statement can select from base tables or other views.", "The view definition is \"frozen\" at creation time, so changes to the underlying\ntables afterwards do not affect the view definition. For example, if a view is\ndefined as SELECT * on a table, new columns added to the table later do not\nbecome part of the view. A SHOW CREATE VIEW shows that\nsuch queries are rewritten and column names are included in the view\ndefinition.", "The view definition must be a query that does not return errors at view\ncreation times. However, the base tables used by the views might be altered\nlater and the query may not be valid anymore. In this case, querying the view\nwill result in an error. CHECK TABLE helps in finding this kind\nof problems.", "The ALGORITHM clause affects how MariaDB processes the\nview. The DEFINER and SQL SECURITY clauses specify the security context to be\nused when checking access privileges at view invocation time. The WITH CHECK\nOPTION clause can be given to constrain inserts or updates to rows in tables\nreferenced by the view. These clauses are described later in this section.", "The CREATE VIEW statement requires the CREATE VIEW privilege for the\nview, and some privilege for each column selected by the SELECT\nstatement. For columns used elsewhere in the SELECT statement you must\nhave the SELECT privilege. If the OR REPLACE clause is present, you\nmust also have the DROP privilege for the view.", "A view belongs to a database. By default, a new view is created in the\ndefault database. To create the view explicitly in a given database,\nspecify the name as db_name.view_name when you create it.", "CREATE VIEW test.v AS SELECT * FROM t;\n", "Base tables and views share the same namespace within a database, so a\ndatabase cannot contain a base table and a view that have the same\nname.", "Views must have unique column names with no duplicates, just like base\ntables. By default, the names of the columns retrieved by the SELECT\nstatement are used for the view column names. To define explicit names\nfor the view columns, the optional column_list clause can be given as\na list of comma-separated identifiers. The number of names in\ncolumn_list must be the same as the number of columns retrieved by the\nSELECT statement.", "Columns retrieved by the SELECT statement can be simple references to\ntable columns. They can also be expressions that use functions,\nconstant values, operators, and so forth.", "Unqualified table or view names in the SELECT statement are\ninterpreted with respect to the default database. A view can refer to\ntables or views in other databases by qualifying the table or view\nname with the proper database name.", "A view can be created from many kinds of SELECT statements. It can\nrefer to base tables or other views. It can use joins, UNION, and\nsubqueries. The SELECT need not even refer to any tables. The\nfollowing example defines a view that selects two columns from another\ntable, as well as an expression calculated from those columns:", "CREATE TABLE t (qty INT, price INT);\n\nINSERT INTO t VALUES(3, 50);\n\nCREATE VIEW v AS SELECT qty, price, qty*price AS value FROM t;\n\nSELECT * FROM v;\n+------+-------+-------+\n| qty  | price | value |\n+------+-------+-------+\n|    3 |    50 |   150 |\n+------+-------+-------+\n", "A view definition is subject to the following restrictions:", "The SELECT statement cannot contain a subquery in the FROM clause.\nThe SELECT statement cannot refer to system or user variables.\nWithin a stored program, the definition cannot refer to program parameters or local variables.\nThe SELECT statement cannot refer to prepared statement parameters.\nAny table or view referred to in the definition must exist. However, after a view has been created, it is possible to drop a table or view that the definition refers to. In this case, use of the view results in an error. To check a view definition for problems of this kind, use the CHECK TABLE statement.\nThe definition cannot refer to a TEMPORARY table, and you cannot create a TEMPORARY view.\nAny tables named in the view definition must exist at definition time.\nYou cannot associate a trigger with a view.\nFor valid identifiers to use as view names, see Identifier Names.\n", "ORDER BY is allowed in a view definition, but it is ignored if you\nselect from a view using a statement that has its own ORDER BY.", "For other options or clauses in the definition, they are added to the\noptions or clauses of the statement that references the view, but the\neffect is undefined. For example, if a view definition includes a\nLIMIT clause, and you select from the view using a statement that has\nits own LIMIT clause, it is undefined which limit applies. This same\nprinciple applies to options such as ALL, DISTINCT, or\nSQL_SMALL_RESULT that follow the SELECT keyword, and to clauses such\nas INTO, FOR UPDATE, and LOCK IN SHARE MODE.", "The PROCEDURE clause cannot be used in a view definition, and it cannot be used if a view is referenced in the FROM clause.", "If you create a view and then change the query processing environment\nby changing system variables, that may affect the results that you get\nfrom the view:", "CREATE VIEW v (mycol) AS SELECT 'abc';\n\nSET sql_mode = '';\n\nSELECT \"mycol\" FROM v;\n+-------+\n| mycol |\n+-------+\n| mycol | \n+-------+\n\nSET sql_mode = 'ANSI_QUOTES';\n\nSELECT \"mycol\" FROM v;\n+-------+\n| mycol |\n+-------+\n| abc   | \n+-------+\n", "The DEFINER and SQL SECURITY clauses determine which MariaDB account to\nuse when checking access privileges for the view when a statement is\nexecuted that references the view. They were added in MySQL 5.1.2.\nThe legal SQL SECURITY characteristic values are DEFINER and INVOKER.\nThese indicate that the required privileges must be held by the user\nwho defined or invoked the view, respectively. The default SQL\nSECURITY value is DEFINER.", "If a user value is given for the DEFINER clause, it should be a MariaDB\naccount in 'user_name'@'host_name' format (the same format used in the\nGRANT statement). The user_name and host_name values both are\nrequired.  The definer can also be given as CURRENT_USER or\nCURRENT_USER(). The default DEFINER value is the user who executes the\nCREATE VIEW statement. This is the same as specifying DEFINER =\nCURRENT_USER explicitly.", "If you specify the DEFINER clause, these rules determine the legal\nDEFINER user values:", "If you do not have the SUPER privilege, or, from MariaDB 10.5.2, the SET USER privilege, the only legal user value is your own account, either specified literally or by using CURRENT_USER. You cannot set the definer to some other account.\nIf you have the SUPER privilege, or, from MariaDB 10.5.2, the SET USER privilege, you can specify any syntactically legal account name. If the account does not actually exist, a warning is generated.\nIf the SQL SECURITY value is DEFINER but the definer account does not exist when the view is referenced, an error occurs.\n", "Within a view definition, CURRENT_USER returns the view's DEFINER\nvalue by default. For views\ndefined with the SQL SECURITY INVOKER characteristic, CURRENT_USER\nreturns the account for the view's invoker. For information about user\nauditing within views, see\nhttp://dev.mysql.com/doc/refman/5.1/en/account-activity-auditing.html.", "Within a stored routine that is defined with the SQL SECURITY DEFINER\ncharacteristic, CURRENT_USER returns the routine's DEFINER value. This\nalso affects a view defined within such a program, if the view\ndefinition contains a DEFINER value of CURRENT_USER.", "View privileges are checked like this:", "At view definition time, the view creator must have the privileges needed to use the top-level objects accessed by the view. For example, if the view definition refers to table columns, the creator must have privileges for the columns, as described previously. If the definition refers to a stored function, only the privileges needed to invoke the function can be checked. The privileges required when the function runs can be checked only as it executes: For different invocations of the function, different execution paths within the function might be taken.\nWhen a view is referenced, privileges for objects accessed by the view are checked against the privileges held by the view creator or invoker, depending on whether the SQL SECURITY characteristic is DEFINER or INVOKER, respectively.\nIf reference to a view causes execution of a stored function, privilege checking for statements executed within the function depend on whether the function is defined with a SQL SECURITY characteristic of DEFINER or INVOKER. If the security characteristic is DEFINER, the function runs with the privileges of its creator. If the characteristic is INVOKER, the function runs with the privileges determined by the view's SQL SECURITY characteristic.\n", "Example: A view might depend on a stored function, and that function\nmight invoke other stored routines. For example, the following view\ninvokes a stored function f():", "CREATE VIEW v AS SELECT * FROM t WHERE t.id = f(t.name);\n\nSuppose that f() contains a statement such as this:\n\nIF name IS NULL then\n  CALL p1();\nELSE\n  CALL p2();\nEND IF;\n", "The privileges required for executing statements within f() need to be\nchecked when f() executes. This might mean that privileges are needed\nfor p1() or p2(), depending on the execution path within f(). Those\nprivileges must be checked at runtime, and the user who must possess\nthe privileges is determined by the SQL SECURITY values of the view v\nand the function f().", "The DEFINER and SQL SECURITY clauses for views are extensions to\nstandard SQL. In standard SQL, views are handled using the rules for\nSQL SECURITY INVOKER.", "If you invoke a view that was created before MySQL 5.1.2, it is\ntreated as though it was created with a SQL SECURITY DEFINER clause\nand with a DEFINER value that is the same as your account. However,\nbecause the actual definer is unknown, MySQL issues a warning. To make\nthe warning go away, it is sufficient to re-create the view so that\nthe view definition includes a DEFINER clause.", "The optional ALGORITHM clause is an extension to standard SQL. It\naffects how MariaDB processes the view. ALGORITHM takes three values:\nMERGE, TEMPTABLE, or UNDEFINED. The default algorithm is UNDEFINED if\nno ALGORITHM clause is present. See View Algorithms for more information.", "Some views are updatable. That is, you can use them in statements such\nas UPDATE, DELETE, or INSERT to update the contents of the underlying\ntable. For a view to be updatable, there must be a one-to-one\nrelationship between the rows in the view and the rows in the\nunderlying table. There are also certain other constructs that make a\nview non-updatable. See Inserting and Updating with Views.", "WITH CHECK OPTION", "The WITH CHECK OPTION clause can be given for an updatable view to\nprevent inserts or updates to rows except those for which the WHERE\nclause in the select_statement is true.", "In a WITH CHECK OPTION clause for an updatable view, the LOCAL and\nCASCADED keywords determine the scope of check testing when the view\nis defined in terms of another view. The LOCAL keyword restricts the\nCHECK OPTION only to the view being defined. CASCADED causes the\nchecks for underlying views to be evaluated as well. When neither\nkeyword is given, the default is CASCADED.", "For more information about updatable views and the WITH CHECK OPTION\nclause, see\nInserting and Updating with Views.", "IF NOT EXISTS", "When the IF NOT EXISTS clause is used, MariaDB will return a warning instead of an error if the specified view already exists. Cannot be used together with the OR REPLACE clause.", "Atomic DDL", "MariaDB starting with 10.6.1MariaDB 10.6.1 supports Atomic DDL and CREATE VIEW is atomic.\n"], "Examples": ["CREATE TABLE t (a INT, b INT) ENGINE = InnoDB;\n\nINSERT INTO t VALUES (1,1), (2,2), (3,3);\n\nCREATE VIEW v AS SELECT a, a*2 AS a2 FROM t;\n\nSELECT * FROM v;\n+------+------+\n| a    | a2   |\n+------+------+\n|    1 |    2 |\n|    2 |    4 |\n|    3 |    6 |\n+------+------+\n", "CREATE VIEW v AS SELECT a, a*2 AS a2 FROM t;\nERROR 1050 (42S01): Table 'v' already exists\n\nCREATE OR REPLACE VIEW v AS SELECT a, a*2 AS a2 FROM t;\nQuery OK, 0 rows affected (0.04 sec)\n\nCREATE VIEW IF NOT EXISTS v AS SELECT a, a*2 AS a2 FROM t;\nQuery OK, 0 rows affected, 1 warning (0.01 sec)\n\nSHOW WARNINGS;\n+-------+------+--------------------------+\n| Level | Code | Message                  |\n+-------+------+--------------------------+\n| Note  | 1050 | Table 'v' already exists |\n+-------+------+--------------------------+\n"], "Category": ["Data Definition"]}
{"HTML": ["https://mariadb.com//kb/en/alter-logfile-group/"], "Title": ["ALTER LOGFILE GROUP"], "Feature": ["ALTER LOGFILE GROUP logfile_group\n    ADD UNDOFILE 'file_name'\n    [INITIAL_SIZE [=] size]\n    [WAIT]\n    ENGINE [=] engine_name\n", "The ALTER LOGFILE GROUP statement is not supported by MariaDB. It was originally inherited from MySQL NDB Cluster. See MDEV-19295 for more information.\n"], "Description": [], "Examples": [], "Category": ["Data Definition"]}
{"HTML": ["https://mariadb.com//kb/en/drop-catalog/"], "Title": ["DROP CATALOG"], "Feature": ["DROP CATALOG catalog_name\n"], "Description": ["Deletes a catalog. ", "Limitations:", "DROP CATALOG can only be performed by a super user in the 'def' catalog.\nThe current catalog cannot be dropped.\nThe 'def' catalog cannot be dropped.\n", "When dropping a catalog, all databases and files within that catalog will be deleted."], "Examples": [], "Category": ["Data Definition"]}
{"HTML": ["https://mariadb.com//kb/en/drop-database/"], "Title": ["DROP DATABASE"], "Feature": ["DROP {DATABASE | SCHEMA} [IF EXISTS] db_name\n"], "Description": ["DROP DATABASE drops all tables in the database and deletes the database. Be very careful with this statement! To use DROP DATABASE,\nyou need the DROP privilege on the database. DROP SCHEMA is a synonym for DROP DATABASE.", "Important: When a database is dropped, user privileges on the database are not automatically dropped. See GRANT.", "IF EXISTS", "Use IF EXISTS to prevent an error from occurring for databases that do not exist. A NOTE is generated for each non-existent database when using IF EXISTS. See SHOW WARNINGS.", "Atomic DDL", "MariaDB starting with 10.6.1MariaDB 10.6.1 supports Atomic DDL. \nDROP DATABASE is implemented as\nloop over all tables\n  DROP TABLE table\nEach individual DROP TABLE is atomic while DROP DATABASE as a whole is crash-safe.\n"], "Examples": ["DROP DATABASE bufg;\nQuery OK, 0 rows affected (0.39 sec)\n\nDROP DATABASE bufg;\nERROR 1008 (HY000): Can't drop database 'bufg'; database doesn't exist\n\n \\W\nShow warnings enabled.\n\nDROP DATABASE IF EXISTS bufg;\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\nNote (Code 1008): Can't drop database 'bufg'; database doesn't exist\n"], "Category": ["Data Definition"]}
{"HTML": ["https://mariadb.com//kb/en/drop-event/"], "Title": ["DROP EVENT"], "Feature": ["DROP EVENT [IF EXISTS] event_name\n"], "Description": ["This statement drops the event named event_name. The event immediately\nceases being active, and is deleted completely from the server.", "If the event does not exist, the error\nERROR 1517 (HY000): Unknown event 'event_name'\nresults. You can override this and cause the\nstatement to generate a NOTE for non-existent events instead by using\nIF EXISTS. See SHOW WARNINGS.", "This statement requires the EVENT privilege. In MySQL 5.1.11 and earlier, an event could be dropped only\nby its definer, or by a user having the SUPER privilege."], "Examples": ["DROP EVENT myevent3;\n", "DROP EVENT IF EXISTS myevent3;\nQuery OK, 0 rows affected, 1 warning (0.01 sec)\n\nSHOW WARNINGS;\n+-------+------+-------------------------------+\n| Level | Code | Message                       |\n+-------+------+-------------------------------+\n| Note  | 1305 | Event myevent3 does not exist |\n+-------+------+-------------------------------+\n"], "Category": ["Data Definition"]}
{"HTML": ["https://mariadb.com//kb/en/drop-function-udf/"], "Title": ["DROP FUNCTION UDF"], "Feature": ["DROP FUNCTION [IF EXISTS] function_name\n"], "Description": ["This statement drops the user-defined function (UDF) named function_name.", "To drop a function, you must have the DELETE privilege for the mysql database. This is because DROP FUNCTION removes the row from the mysql.func system table that records the function's name, type and shared library name.", "For dropping a stored function, see DROP FUNCTION.", "Upgrading a UDF", "To upgrade the UDF's shared library, first run a DROP FUNCTION statement, then upgrade the shared library and finally run the CREATE FUNCTION statement. If you upgrade without following this process, you may crash the server."], "Examples": ["DROP FUNCTION jsoncontains_path;\n", "DROP FUNCTION jsoncontains_path;\nERROR 1305 (42000): FUNCTION test.jsoncontains_path does not exist\n\nDROP FUNCTION IF EXISTS jsoncontains_path;\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\nSHOW WARNINGS;\n+-------+------+------------------------------------------------+\n| Level | Code | Message                                        |\n+-------+------+------------------------------------------------+\n| Note  | 1305 | FUNCTION test.jsoncontains_path does not exist |\n+-------+------+------------------------------------------------+\n"], "Category": ["Data Definition"]}
{"HTML": ["https://mariadb.com//kb/en/drop-function/"], "Title": ["DROP FUNCTION"], "Feature": ["DROP FUNCTION [IF EXISTS] f_name\n"], "Description": ["The DROP FUNCTION statement is used to drop a stored function or a user-defined function (UDF). That is, the specified routine is removed from the server, along with all privileges specific to the function. You must have the ALTER ROUTINE privilege for the routine in order to drop it. If the automatic_sp_privileges server system variable is set, both the ALTER ROUTINE and EXECUTE privileges are granted automatically to the routine creator - see Stored Routine Privileges.", "IF EXISTS", "The IF EXISTS clause is a MySQL/MariaDB extension.  It\nprevents an error from occurring if the function does not exist. A\nNOTE is produced that can be viewed with SHOW WARNINGS.", "For dropping a user-defined functions (UDF), see DROP FUNCTION UDF."], "Examples": ["DROP FUNCTION hello;\nQuery OK, 0 rows affected (0.042 sec)\n\nDROP FUNCTION hello;\nERROR 1305 (42000): FUNCTION test.hello does not exist\n\nDROP FUNCTION IF EXISTS hello;\nQuery OK, 0 rows affected, 1 warning (0.000 sec)\n\nSHOW WARNINGS;\n+-------+------+------------------------------------+\n| Level | Code | Message                            |\n+-------+------+------------------------------------+\n| Note  | 1305 | FUNCTION test.hello does not exist |\n+-------+------+------------------------------------+\n"], "Category": ["Data Definition"]}
{"HTML": ["https://mariadb.com//kb/en/drop-index/"], "Title": ["DROP INDEX"], "Feature": ["DROP INDEX [IF EXISTS] index_name ON tbl_name \n    [WAIT n |NOWAIT]\n"], "Description": ["DROP INDEX drops the index named index_name from the table tbl_name.\nThis statement is mapped to an ALTER TABLE statement to drop the\nindex.", "If another connection is using the table, a metadata lock is active, and this statement will wait until the lock is released. This is also true for non-transactional tables.", "See ALTER TABLE.", "Another shortcut, CREATE INDEX, allows the creation of an index.", "To remove the primary key, `PRIMARY` must be specified as index_name. Note that the quotes are necessary, because PRIMARY is a keyword."], "Examples": [], "Category": ["Data Definition"]}
{"HTML": ["https://mariadb.com//kb/en/drop-package-body/"], "Title": ["DROP PACKAGE BODY"], "Feature": ["DROP PACKAGE BODY [IF EXISTS]  [ db_name . ] package_name\n"], "Description": ["The DROP PACKAGE BODY statement can be used when Oracle SQL_MODE is set.", "The DROP PACKAGE BODY statement drops the package body (i.e the implementation), previously created using the CREATE PACKAGE BODY statement.", "Note, DROP PACKAGE BODY drops only the package implementation, but does not drop the package specification. Use DROP PACKAGE to drop the package entirely (i.e. both implementation and specification)."], "Examples": [], "Category": ["Data Definition"]}
{"HTML": ["https://mariadb.com//kb/en/drop-package/"], "Title": ["DROP PACKAGE"], "Feature": ["DROP PACKAGE [IF EXISTS]  [ db_name . ] package_name\n"], "Description": ["The DROP PACKAGE statement can be used when Oracle SQL_MODE is set.", "The DROP PACKAGE statement drops a stored package entirely:", "Drops the package specification (earlier created using the CREATE PACKAGE statement).\nDrops the package implementation, if the implementation was already created using the CREATE PACKAGE BODY statement.\n"], "Examples": [], "Category": ["Data Definition"]}
{"HTML": ["https://mariadb.com//kb/en/drop-procedure/"], "Title": ["DROP PROCEDURE"], "Feature": ["DROP PROCEDURE [IF EXISTS] sp_name\n"], "Description": ["This statement is used to drop a stored procedure. That is, the\nspecified routine is removed from the server along with all privileges specific to the procedure. You must have the ALTER ROUTINE privilege for the routine. If the automatic_sp_privileges server system variable is set, that privilege and EXECUTE are granted automatically to the routine creator - see Stored Routine Privileges.", "The IF EXISTS clause is a MySQL/MariaDB extension.  It\nprevents an error from occurring if the procedure or function does not exist. A\nNOTE is produced that can be viewed with SHOW WARNINGS.", "While this statement takes effect immediately, threads which are executing a procedure can continue execution."], "Examples": ["DROP PROCEDURE simpleproc;\n", "DROP PROCEDURE simpleproc;\nERROR 1305 (42000): PROCEDURE test.simpleproc does not exist\n\nDROP PROCEDURE IF EXISTS simpleproc;\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\nSHOW WARNINGS;\n+-------+------+------------------------------------------+\n| Level | Code | Message                                  |\n+-------+------+------------------------------------------+\n| Note  | 1305 | PROCEDURE test.simpleproc does not exist |\n+-------+------+------------------------------------------+\n"], "Category": ["Data Definition"]}
{"HTML": ["https://mariadb.com//kb/en/drop-sequence/"], "Title": ["DROP SEQUENCE"], "Feature": ["DROP [TEMPORARY] SEQUENCE [IF EXISTS] [/*COMMENT TO SAVE*/]\n    sequence_name [, sequence_name] ..."], "Description": ["DROP SEQUENCE removes one or more sequences created with CREATE SEQUENCE. You must have the DROP privilege for each sequence. MariaDB returns an error indicating by name which non-existing tables it was unable to drop, but it also drops all of the tables in the list that do exist.", "Important: When a table is dropped, user privileges on the table are not automatically dropped. See GRANT.", "If another connection is using the sequence, a metadata lock is active, and this statement will wait until the lock is released. This is also true for non-transactional tables.", "For each referenced sequence, DROP SEQUENCE drops a temporary sequence with that name, if it exists. If it does not exist, and the TEMPORARY keyword is not used, it drops a non-temporary sequence with the same name, if it exists. The TEMPORARY keyword ensures that a non-temporary sequence will not accidentally be dropped.", "Use IF EXISTS to prevent an error from occurring for sequences that do not exist. A NOTE is generated for each non-existent sequence when using IF EXISTS. See SHOW WARNINGS.", "DROP SEQUENCE requires the DROP privilege."], "Examples": [], "Category": ["Data Definition"]}
{"HTML": ["https://mariadb.com//kb/en/drop-server/"], "Title": ["DROP SERVER"], "Feature": ["DROP SERVER [ IF EXISTS ] server_name\n"], "Description": ["Drops the server definition for the server named server_name. The\ncorresponding row within the mysql.servers table will be deleted. This statement requires the SUPER privilege or, from MariaDB 10.5.2, the FEDERATED ADMIN privilege.", "Dropping a server for a table does not affect any FederatedX, FEDERATED, Connect or Spider tables that used this connection information when they were created. ", "DROP SERVER is not written to the binary log, irrespective of\nthe binary log format being used. From MariaDB 10.1.13, Galera replicates the CREATE SERVER, ALTER SERVER and DROP SERVER statements.", "IF EXISTS", "If the IF EXISTS clause is used, MariaDB will not return an error if the server does not exist. Unlike all other statements, DROP SERVER IF EXISTS does not issue a note if the server does not exist. See MDEV-9400."], "Examples": ["DROP SERVER s;\n", "DROP SERVER s;\nERROR 1477 (HY000): The foreign server name you are trying to reference \n  does not exist. Data source error:  s\n\nDROP SERVER IF EXISTS s;\nQuery OK, 0 rows affected (0.00 sec)\n"], "Category": ["Data Definition"]}
{"HTML": ["https://mariadb.com//kb/en/drop-table/"], "Title": ["DROP TABLE"], "Feature": ["DROP [TEMPORARY] TABLE [IF EXISTS] [/*COMMENT TO SAVE*/]\n    tbl_name [, tbl_name] ...\n    [WAIT n|NOWAIT]\n    [RESTRICT | CASCADE]\n"], "Description": ["DROP TABLE removes one or more tables. You must have the DROP privilege\nfor each table. All table data and the table definition are removed, as well as triggers associated to the table, so be\ncareful with this statement! If any of the tables named in the argument list do\nnot exist, MariaDB returns an error indicating by name which non-existing tables\nit was unable to drop, but it also drops all of the tables in the list that do\nexist.", "Important: When a table is dropped, user privileges on the table are not\nautomatically dropped. See GRANT.", "If another thread is using the table in an explicit transaction or an autocommit transaction, then the thread acquires a metadata lock (MDL) on the table. The DROP TABLE statement will wait in the \"Waiting for table metadata lock\" thread state until the MDL is released. MDLs are released in the following cases:", "If an MDL is acquired in an explicit transaction, then the MDL will be released when the transaction ends.\nIf an MDL is acquired in an autocommit transaction, then the MDL will be released when the statement ends.\nTransactional and non-transactional tables are handled the same.\n", "Note that for a partitioned table, DROP TABLE permanently removes the table\ndefinition, all of its partitions, and all of the data which was stored in\nthose partitions. It also removes the partitioning definition (.par) file\nassociated with the dropped table.", "For each referenced table, DROP TABLE drops a temporary table with that name, if it exists. If it does not exist, and the TEMPORARY keyword is not used, it drops a non-temporary table with the same name, if it exists. The TEMPORARY keyword ensures that a non-temporary table will not accidentally be dropped.", "Use IF EXISTS to prevent an error from occurring for tables that do not\nexist. A NOTE is generated for each non-existent table when using\nIF EXISTS. See SHOW WARNINGS.", "If a foreign key references this table, the table cannot be dropped. In this case, it is necessary to drop the foreign key first.", "RESTRICT and CASCADE are allowed to make porting from other database systems easier. In MariaDB, they do nothing.", "The comment before the table names (/*COMMENT TO SAVE*/) is stored in the binary log. That feature can be used by replication tools to send their internal messages.", "It is possible to specify table names as db_name.tab_name. This is useful to delete tables from multiple databases with one statement. See Identifier Qualifiers for details.", "The DROP privilege is required to use DROP TABLE on non-temporary tables. For temporary tables, no privilege is required, because such tables are only visible for the current session.", "Note: DROP TABLE automatically commits the current active transaction,\nunless you use the TEMPORARY keyword.", "MariaDB starting with 10.5.4From MariaDB 10.5.4, DROP TABLE reliably deletes table remnants inside a storage engine even if the .frm file is missing. Before then, a missing .frm file would result in the statement failing.\n", "WAIT/NOWAIT", "Set the lock wait timeout. See WAIT and NOWAIT."], "Examples": ["DROP TABLE Employees, Customers;\n"], "Category": ["Data Definition"]}
{"HTML": ["https://mariadb.com//kb/en/drop-trigger/"], "Title": ["DROP TRIGGER"], "Feature": ["DROP TRIGGER [IF EXISTS] [schema_name.]trigger_name\n"], "Description": ["This statement drops a trigger. The schema (database) name is optional. If the\nschema is omitted, the trigger is dropped from the default schema.\nIts use requires the TRIGGER privilege for the table associated with the trigger.", "Use IF EXISTS to prevent an error from occurring for a\ntrigger that does not exist. A NOTE is generated for a non-existent trigger\nwhen using IF EXISTS. See SHOW WARNINGS.", "Note: Triggers for a table are also dropped if you drop the table.", "Atomic DDL", "MariaDB starting with 10.6.1MariaDB 10.6.1 supports Atomic DDL and DROP TRIGGER is atomic.\n"], "Examples": ["DROP TRIGGER test.example_trigger;\n", "DROP TRIGGER IF EXISTS test.example_trigger;\nQuery OK, 0 rows affected, 1 warning (0.01 sec)\n\nSHOW WARNINGS;\n+-------+------+------------------------+\n| Level | Code | Message                |\n+-------+------+------------------------+\n| Note  | 1360 | Trigger does not exist |\n+-------+------+------------------------+\n"], "Category": ["Data Definition"]}
{"HTML": ["https://mariadb.com//kb/en/drop-view/"], "Title": ["DROP VIEW"], "Feature": ["DROP VIEW [IF EXISTS]\n    view_name [, view_name] ...\n    [RESTRICT | CASCADE]\n"], "Description": ["DROP VIEW removes one or more views. You must have the DROP privilege for\neach view. If any of the views named in the argument list do not exist, MariaDB\nreturns an error indicating by name which non-existing views it was unable to\ndrop, but it also drops all of the views in the list that do exist.", "The IF EXISTS clause prevents an error from occurring for views that don't\nexist. When this clause is given, a NOTE is generated for each non-existent\nview. See SHOW WARNINGS.", "RESTRICT and CASCADE, if given, are parsed and ignored.", "It is possible to specify view names as db_name.view_name. This is useful to delete views from multiple databases with one statement. See Identifier Qualifiers for details.", "The DROP privilege is required to use DROP TABLE on non-temporary tables. For temporary tables, no privilege is required, because such tables are only visible for the current session.", "If a view references another view, it will be possible to drop the referenced view. However, the other view will reference a view which does not exist any more. Thus, querying it will produce an error similar to the following:", "ERROR 1356 (HY000): View 'db_name.view_name' references invalid table(s) or \ncolumn(s) or function(s) or definer/invoker of view lack rights to use them\n", "This problem is reported in the output of CHECK TABLE.", "Note that it is not necessary to use DROP VIEW to replace an existing view, because CREATE VIEW has an OR REPLACE clause.", "Atomic DDL", "MariaDB starting with 10.6.1MariaDB 10.6.1 supports Atomic DDL and DROP VIEW for a singular view is atomic. Dropping multiple views is crash-safe.\n"], "Examples": ["DROP VIEW v,v2;\n", "DROP VIEW v,v2,v3;\nERROR 1051 (42S02): Unknown table 'v3'\n", "DROP VIEW IF EXISTS v,v2,v3;\nQuery OK, 0 rows affected, 1 warning (0.01 sec)\n\nSHOW WARNINGS;\n+-------+------+-------------------------+\n| Level | Code | Message                 |\n+-------+------+-------------------------+\n| Note  | 1051 | Unknown table 'test.v3' |\n+-------+------+-------------------------+\n"], "Category": ["Data Definition"]}
{"HTML": ["https://mariadb.com//kb/en/alter-server/"], "Title": ["ALTER SERVER"], "Feature": ["ALTER SERVER server_name\n    OPTIONS (option [, option] ...)\n"], "Description": ["Alters the server information for server_name, adjusting the specified\noptions as per the CREATE SERVER command. The corresponding fields in the mysql.servers table are updated accordingly. This statement requires the SUPER privilege or, from MariaDB 10.5.2, the FEDERATED ADMIN privilege.", "ALTER SERVER is not written to the binary log, irrespective of\nthe binary log format being used. From MariaDB 10.1.13, Galera replicates the CREATE SERVER, ALTER SERVER and DROP SERVER statements."], "Examples": ["ALTER SERVER s OPTIONS (USER 'sally');\n"], "Category": ["Data Definition"]}
{"HTML": ["https://mariadb.com//kb/en/generated-columns/"], "Title": ["Generated (Virtual and Persistent/Stored) Columns"], "Feature": ["<type>  [GENERATED ALWAYS]  AS   ( <expression> )\n[VIRTUAL | PERSISTENT | STORED]  [UNIQUE] [UNIQUE KEY] [COMMENT <text>]\n", "MariaDB's generated columns syntax is designed to be similar to the syntax for Microsoft SQL Server's computed columns and Oracle Database's virtual columns. In MariaDB 10.2 and later, the syntax is also compatible with the syntax for MySQL's generated columns."], "Description": ["A generated column is a column in a table that cannot explicitly be set to a specific value in a DML query. Instead, its value is automatically generated based on an expression. This expression might generate the value based on the values of other columns in the table, or it might generate the value by calling built-in functions or user-defined functions (UDFs).", "There are two types of generated columns:", "PERSISTENT (a.k.a. STORED): This type's value is actually stored in the table.\nVIRTUAL: This type's value is not stored at all. Instead, the value is generated dynamically when the table is queried. This type is the default.\n", "Generated columns are also sometimes called computed columns or virtual columns."], "Examples": ["USE TEST;\n\nCREATE TABLE table1 (\n     a INT NOT NULL,\n     b VARCHAR(32),\n     c INT AS (a mod 10) VIRTUAL,\n     d VARCHAR(5) AS (left(b,5)) PERSISTENT);\n", "DESCRIBE table1;\n+-------+-------------+------+-----+---------+------------+\n| Field | Type        | Null | Key | Default | Extra      |\n+-------+-------------+------+-----+---------+------------+\n| a     | int(11)     | NO   |     | NULL    |            |\n| b     | varchar(32) | YES  |     | NULL    |            |\n| c     | int(11)     | YES  |     | NULL    | VIRTUAL    |\n| d     | varchar(5)  | YES  |     | NULL    | PERSISTENT |\n+-------+-------------+------+-----+---------+------------+\n", "SHOW CREATE TABLE table1;\n\n| table1 | CREATE TABLE `table1` (\n  `a` int(11) NOT NULL,\n  `b` varchar(32) DEFAULT NULL,\n  `c` int(11) AS (a mod 10) VIRTUAL,\n  `d` varchar(5) AS (left(b,5)) PERSISTENT\n) ENGINE=MyISAM DEFAULT CHARSET=latin1 |\n", "WARNINGS;\nShow warnings enabled.\n\nINSERT INTO table1 VALUES (1, 'some text',default,default);\nQuery OK, 1 row affected (0.00 sec)\n\nINSERT INTO table1 VALUES (2, 'more text',5,default);\nQuery OK, 1 row affected, 1 warning (0.00 sec)\n\nWarning (Code 1645): The value specified for computed column 'c' in table 'table1' has been ignored.\n\nINSERT INTO table1 VALUES (123, 'even more text',default,'something');\nQuery OK, 1 row affected, 2 warnings (0.00 sec)\n\nWarning (Code 1645): The value specified for computed column 'd' in table 'table1' has been ignored.\nWarning (Code 1265): Data truncated for column 'd' at row 1\n\nSELECT * FROM table1;\n+-----+----------------+------+-------+\n| a   | b              | c    | d     |\n+-----+----------------+------+-------+\n|   1 | some text      |    1 | some  |\n|   2 | more text      |    2 | more  |\n| 123 | even more text |    3 | even  |\n+-----+----------------+------+-------+\n3 rows in set (0.00 sec)\n", "CREATE TABLE table2 (a INT, b INT ZEROFILL AS (a*2) VIRTUAL);\nINSERT INTO table2 (a) VALUES (1);\n\nSELECT * FROM table2;\n+------+------------+\n| a    | b          |\n+------+------------+\n|    1 | 0000000002 |\n+------+------------+\n1 row in set (0.00 sec)\n"], "Category": ["Data Definition"]}
{"HTML": ["https://mariadb.com//kb/en/alter-table/"], "Title": ["ALTER TABLE"], "Feature": ["ALTER [ONLINE] [IGNORE] TABLE [IF EXISTS] tbl_name\n    [WAIT n | NOWAIT]\n    alter_specification [, alter_specification] ...\nalter_specification:\n    table_option ...\n  | ADD [COLUMN] [IF NOT EXISTS] col_name column_definition\n        [FIRST | AFTER col_name ]\n  | ADD [COLUMN] [IF NOT EXISTS] (col_name column_definition,...)\n  | ADD {INDEX|KEY} [IF NOT EXISTS] [index_name]\n        [index_type] (index_col_name,...) [index_option] ...\n  | ADD [CONSTRAINT [symbol]] PRIMARY KEY\n        [index_type] (index_col_name,...) [index_option] ...\n  | ADD [CONSTRAINT [symbol]]\n        UNIQUE [INDEX|KEY] [index_name]\n        [index_type] (index_col_name,...) [index_option] ...\n  | ADD FULLTEXT [INDEX|KEY] [index_name]\n        (index_col_name,...) [index_option] ...\n  | ADD SPATIAL [INDEX|KEY] [index_name]\n        (index_col_name,...) [index_option] ...\n  | ADD [CONSTRAINT [symbol]]\n        FOREIGN KEY [IF NOT EXISTS] [index_name] (index_col_name,...)\n        reference_definition\n  | ADD PERIOD FOR [time_period_name|SYSTEM_TIME] (start_column_name, end_column_name)\n  | ALTER [COLUMN] col_name SET DEFAULT literal |\u00a0(expression)\n  | ALTER [COLUMN] col_name DROP DEFAULT\n  | ALTER {INDEX|KEY} index_name [NOT] INVISIBLE\n  | CHANGE [COLUMN] [IF EXISTS] old_col_name new_col_name column_definition\n        [FIRST|AFTER col_name]\n  | MODIFY [COLUMN] [IF EXISTS] col_name column_definition\n        [FIRST | AFTER col_name]\n  | DROP [COLUMN] [IF EXISTS] col_name [RESTRICT|CASCADE]\n  | DROP PRIMARY KEY\n  | DROP {INDEX|KEY} [IF EXISTS] index_name\n  | DROP FOREIGN KEY [IF EXISTS] fk_symbol\n  | DROP CONSTRAINT [IF EXISTS] constraint_name\n  | DISABLE KEYS\n  | ENABLE KEYS\n  | RENAME [TO] new_tbl_name\n  | ORDER BY col_name [, col_name] ...\n  | RENAME COLUMN old_col_name TO new_col_name\n  | RENAME {INDEX|KEY} old_index_name TO new_index_name\n  | CONVERT TO CHARACTER SET charset_name [COLLATE collation_name]\n  | [DEFAULT] CHARACTER SET [=] charset_name\n  | [DEFAULT] COLLATE [=] collation_name\n  | DISCARD TABLESPACE\n  | IMPORT TABLESPACE\n  | ALGORITHM [=] {DEFAULT|INPLACE|COPY|NOCOPY|INSTANT}\n  | LOCK [=] {DEFAULT|NONE|SHARED|EXCLUSIVE}\n  | FORCE\n  | partition_options\n  | CONVERT TABLE normal_table TO partition_definition [{WITH | WITHOUT} VALIDATION]\n  | CONVERT PARTITION partition_name TO TABLE tbl_name\n  | ADD PARTITION [IF NOT EXISTS] (partition_definition)\n  | DROP PARTITION [IF EXISTS] partition_names\n  | TRUNCATE PARTITION partition_names\n  | COALESCE PARTITION number\n  | REORGANIZE PARTITION [partition_names INTO (partition_definitions)]\n  | ANALYZE PARTITION partition_names\n  | CHECK PARTITION partition_names\n  | OPTIMIZE PARTITION partition_names\n  | REBUILD PARTITION partition_names\n  | REPAIR PARTITION partition_names\n  | EXCHANGE PARTITION partition_name WITH TABLE tbl_name [{WITH | WITHOUT} VALIDATION]\n  | REMOVE PARTITIONING\n  | ADD SYSTEM VERSIONING\n  | DROP SYSTEM VERSIONING\nindex_col_name:\n    col_name [(length)] [ASC | DESC]\nindex_type:\n    USING {BTREE | HASH | RTREE}\nindex_option:\n    [ KEY_BLOCK_SIZE [=] value\n  | index_type\n  | WITH PARSER parser_name\n  | VISIBLE\n  | COMMENT 'string'\n  | CLUSTERING={YES| NO} ]\n  [ IGNORED | NOT IGNORED ]\ntable_options:\n    table_option [[,] table_option] ..."], "Description": ["ALTER TABLE enables you to change the structure of an existing table.\nFor example, you can add or delete columns, create or destroy indexes,\nchange the type of existing columns, or rename columns or the table\nitself. You can also change the comment for the table and the storage engine of the\ntable.", "If another connection is using the table, a metadata lock is active, and this statement will wait until the lock is released. This is also true for non-transactional tables.", "When adding a UNIQUE index on a column (or a set of columns) which have duplicated values, an error will be produced and the statement will be stopped. To suppress the error and force the creation of UNIQUE indexes, discarding duplicates, the IGNORE option can be specified. This can be useful if a column (or a set of columns) should be UNIQUE but it contains duplicate values; however, this technique provides no control on which rows are preserved and which are deleted. Also, note that IGNORE is accepted but ignored in ALTER TABLE ... EXCHANGE PARTITION statements.", "This statement can also be used to rename a table. For details see RENAME TABLE.", "When an index is created, the storage engine may use a configurable buffer in the process. Incrementing the buffer speeds up the index creation. Aria and MyISAM allocate a buffer whose size is defined by aria_sort_buffer_size or myisam_sort_buffer_size, also used for REPAIR TABLE. InnoDB allocates three buffers whose size is defined by innodb_sort_buffer_size."], "Examples": ["ALTER TABLE t1 ADD x INT;\n", "ALTER TABLE t1 DROP x;\n", "ALTER TABLE t1 MODIFY x bigint unsigned;\n", "ALTER TABLE t1 CHANGE a b bigint unsigned auto_increment;\n", "ALTER TABLE t1 DROP x, ADD x2 INT,  CHANGE y y2 INT;\n", "ALTER TABLE t1 \n  ENGINE = InnoDB \n  COMMENT = 'First of three tables containing usage info';\n", "ALTER TABLE t1 FORCE;\n", "ALTER TABLE rooms DROP INDEX u;\n", "ALTER TABLE rooms ADD UNIQUE INDEX u(room_number);\n", "ALTER TABLE rooms ADD PRIMARY KEY(room_number, p WITHOUT OVERLAPS);\n", "SET @@SESSION.binlog_alter_two_phase = true;\n", "| master-bin.000001 | 495 | Gtid              |         1 |         537 | GTID 0-1-2 START ALTER                                        |\n| master-bin.000001 | 537 | Query             |         1 |         655 | use `test`; alter table t add column b int, algorithm=inplace |\n| master-bin.000001 | 655 | Gtid              |         1 |         700 | GTID 0-1-3 COMMIT ALTER id=2                                  |\n| master-bin.000001 | 700 | Query             |         1 |         835 | use `test`; alter table t add column b int, algorithm=inplace |\n"], "Category": ["Data Definition"]}
