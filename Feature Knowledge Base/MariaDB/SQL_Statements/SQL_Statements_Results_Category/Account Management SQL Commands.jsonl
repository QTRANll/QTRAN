{"HTML": ["https://mariadb.com//kb/en/rename-user/"], "Title": ["RENAME USER"], "Feature": ["RENAME USER old_user TO new_user\n    [, old_user TO new_user] ...\n"], "Description": ["The RENAME USER statement renames existing MariaDB accounts. To use it,\nyou must have the global CREATE USER privilege\nor the UPDATE privilege for the mysql database.\nEach account is named using the same format as for the CREATE USER\nstatement; for example, 'jeffrey'@'localhost'.\nIf you specify only the user name part of the account name, a host\nname part of '%' is used.", "If any of the old user accounts do not exist or any of the new user accounts already\nexist, ERROR 1396 (HY000) results. If an error occurs, RENAME USER\nwill still rename the accounts that do not result in an error.", "For modifying an existing account, see ALTER USER."], "Examples": ["CREATE USER 'donald', 'mickey';\nRENAME USER 'donald' TO 'duck'@'localhost', 'mickey' TO 'mouse'@'localhost';\n", "RENAME USER 'foo'@'1.2.3.4' TO 'foo'@'10.20.30.40';\n"], "Category": ["Account Management SQL Commands"]}
{"HTML": ["https://mariadb.com//kb/en/set-default-role/"], "Title": ["SET DEFAULT ROLE"], "Feature": ["SET DEFAULT ROLE { role | NONE } [ FOR user@host ]\n"], "Description": ["The SET DEFAULT ROLE statement sets a default role for a specified (or current) user. A default role is automatically enabled when a user connects (an implicit SET ROLE statement is executed immediately after a connection is established).", "To be able to set a role as a default, the role must already have been granted to that user, and one needs the privileges to enable this role (if you cannot do SET ROLE X, you won't be able to do SET DEFAULT ROLE X). To set a default role for another user one needs to have write access to the mysql database.", "To remove a user's default role, use SET DEFAULT ROLE NONE [ FOR user@host ]. The record of the default role is not removed if the role is dropped or revoked, so if the role is subsequently re-created or granted, it will again be the user's default role.", "The default role is stored in the default_role column in the mysql.user table/view, as well as in the Information Schema APPLICABLE_ROLES table, so these can be viewed to see which role has been assigned to a user as the default. "], "Examples": ["SET DEFAULT ROLE journalist;\n", "SET DEFAULT ROLE NONE;\n", "CREATE ROLE journalist;\nCREATE USER taniel;\n\nSET DEFAULT ROLE journalist FOR taniel;\nERROR 1959 (OP000): Invalid role specification `journalist`\n\nGRANT journalist TO taniel;\nSET DEFAULT ROLE journalist FOR taniel;\n", "select * from mysql.user where user='taniel'\\G\n*************************** 1. row ***************************\n                  Host: %\n                  User: taniel\n...\n               is_role: N\n          default_role: journalist\n...\n", "SET DEFAULT ROLE NONE FOR taniel; \n"], "Category": ["Account Management SQL Commands"]}
{"HTML": ["https://mariadb.com//kb/en/set-password/"], "Title": ["SET PASSWORD"], "Feature": ["SET PASSWORD [FOR user] =\n    {\n        PASSWORD('some password')\n      | OLD_PASSWORD('some password')\n      | 'encrypted password'\n    }\n"], "Description": ["The SET PASSWORD statement assigns a password to an existing MariaDB user\naccount.", "If the password is specified using the PASSWORD() or OLD_PASSWORD()\nfunction, the literal text of the password should be given. If the\npassword is specified without using either function, the password\nshould be the already-encrypted password value as returned by\nPASSWORD().", "OLD_PASSWORD() should only be used if your MariaDB/MySQL clients are very old (< 4.0.0).", "With no FOR clause, this statement sets the password for the current\nuser. Any client that has connected to the server using a non-anonymous\naccount can change the password for that account.", "With a FOR clause, this statement sets the password for a specific\naccount on the current server host. Only clients that have the UPDATE\nprivilege for the mysql database can do this. The user value should be\ngiven in user_name@host_name format, where user_name and host_name are\nexactly as they are listed in the User and Host columns of the\nmysql.user table (or view in MariaDB-10.4 onwards) entry. ", "The argument to PASSWORD() and the password given to MariaDB clients can be of arbitrary length."], "Examples": ["SET PASSWORD FOR 'bob'@'%.loc.gov' = PASSWORD('newpass');\n", "SET PASSWORD FOR 'bob'@localhost = PASSWORD(\"\");\n"], "Category": ["Account Management SQL Commands"]}
{"HTML": ["https://mariadb.com//kb/en/set-role/"], "Title": ["SET ROLE"], "Feature": ["SET ROLE { role | NONE }\n"], "Description": ["The SET ROLE statement enables a role, along with all of its associated permissions, for the current session. To unset a role, use NONE .", "If a role that doesn't exist, or to which the user has not been assigned, is specified, an ERROR 1959 (OP000): Invalid role specification error occurs.", "An automatic SET ROLE is implicitly performed when a user connects if that user has been assigned a default role. See SET DEFAULT ROLE."], "Examples": ["SELECT CURRENT_ROLE;\n+--------------+\n| CURRENT_ROLE |\n+--------------+\n| NULL         |\n+--------------+\n\nSET ROLE staff;\n\nSELECT CURRENT_ROLE;\n+--------------+\n| CURRENT_ROLE |\n+--------------+\n| staff        |\n+--------------+\n\nSET ROLE NONE;\n\nSELECT CURRENT_ROLE();\n+----------------+\n| CURRENT_ROLE() |\n+----------------+\n| NULL           |\n+----------------+\n"], "Category": ["Account Management SQL Commands"]}
{"HTML": ["https://mariadb.com//kb/en/create-role/"], "Title": ["CREATE ROLE"], "Feature": ["CREATE [OR REPLACE] ROLE [IF NOT EXISTS] role \n  [WITH ADMIN \n    {CURRENT_USER | CURRENT_ROLE | user | role}]\n"], "Description": ["The CREATE ROLE statement creates one or more MariaDB roles. To\nuse it, you must have the global CREATE USER\nprivilege or the INSERT privilege for the mysql\ndatabase. For each account, CREATE ROLE creates a new row in the\nmysql.user table that has no privileges, and with the\ncorresponding is_role field set to Y. It also creates a record in the\nmysql.roles_mapping table.", "If any of the specified roles already exist, ERROR 1396 (HY000) results. If\nan error occurs, CREATE ROLE will still create the roles that do not result\nin an error. The maximum length for a role is 128 characters. Role names can be\nquoted, as explained in the Identifier names page. Only\none error is produced for all roles which have not been created:", "ERROR 1396 (HY000): Operation CREATE ROLE failed for 'a','b','c'\n", "Failed CREATE or DROP operations, for both users and roles, produce the\nsame error code.", "PUBLIC and NONE are reserved, and cannot be used as role names. NONE is used to unset a role and PUBLIC has a special use in other systems, such as Oracle, so is reserved for compatibility purposes.", "For valid identifiers to use as role names, see Identifier Names.", "WITH ADMIN", "The optional WITH ADMIN clause determines whether the current user, the\ncurrent role or another user or role has use of the newly created role. If the\nclause is omitted, WITH ADMIN CURRENT_USER is treated as the default, which\nmeans that the current user will be able to GRANT this role to\nusers.", "OR REPLACE", "If the optional OR REPLACE clause is used, it acts as a shortcut for:", "DROP ROLE IF EXISTS name;\nCREATE ROLE name ...;\n", "IF NOT EXISTS", "When the IF NOT EXISTS clause is used, MariaDB will return a warning instead of an error if the specified role already exists. Cannot be used together with the OR REPLACE clause."], "Examples": ["CREATE ROLE journalist;\n\nCREATE ROLE developer WITH ADMIN lorinda@localhost;\n", " SELECT USER();\n+-------------------+\n| USER()            |\n+-------------------+\n| henning@localhost |\n+-------------------+\n...\nGRANT developer TO ian@localhost;\nAccess denied for user 'henning'@'localhost'\n\n SELECT USER();\n+-------------------+\n| USER()            |\n+-------------------+\n| lorinda@localhost |\n+-------------------+\n\nGRANT m_role TO ian@localhost;\n", "CREATE ROLE journalist;\nERROR 1396 (HY000): Operation CREATE ROLE failed for 'journalist'\n\nCREATE OR REPLACE ROLE journalist;\nQuery OK, 0 rows affected (0.00 sec)\n\nCREATE ROLE IF NOT EXISTS journalist;\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n", "SHOW WARNINGS;\n+-------+------+---------------------------------------------------+\n| Level | Code | Message                                           |\n+-------+------+---------------------------------------------------+\n| Note  | 1975 | Can't create role 'journalist'; it already exists |\n+-------+------+---------------------------------------------------+\n\n"], "Category": ["Account Management SQL Commands"]}
{"HTML": ["https://mariadb.com//kb/en/create-user/"], "Title": ["CREATE USER"], "Feature": ["CREATE [OR REPLACE] USER [IF NOT EXISTS] \n user_specification [,user_specification ...] \n  [REQUIRE {NONE | tls_option [[AND] tls_option ...] }]\n  [WITH resource_option [resource_option ...] ]\n  [lock_option] [password_option] \n\nuser_specification:\n  username [authentication_option]\n\nauthentication_option:\n  IDENTIFIED BY 'password' \n  | IDENTIFIED BY PASSWORD 'password_hash'\n  | IDENTIFIED {VIA|WITH} authentication_rule [OR authentication_rule  ...]\n\nauthentication_rule:\n    authentication_plugin\n  | authentication_plugin {USING|AS} 'authentication_string'\n  | authentication_plugin {USING|AS} PASSWORD('password')\n\ntls_option:\n  SSL \n  | X509\n  | CIPHER 'cipher'\n  | ISSUER 'issuer'\n  | SUBJECT 'subject'\n\nresource_option:\n  MAX_QUERIES_PER_HOUR count\n  | MAX_UPDATES_PER_HOUR count\n  | MAX_CONNECTIONS_PER_HOUR count\n  | MAX_USER_CONNECTIONS count\n  | MAX_STATEMENT_TIME time\n\npassword_option:\n  PASSWORD EXPIRE\n  | PASSWORD EXPIRE DEFAULT\n  | PASSWORD EXPIRE NEVER\n  | PASSWORD EXPIRE INTERVAL N DAY\n\nlock_option:\n    ACCOUNT LOCK\n  | ACCOUNT UNLOCK\n}\n"], "Description": ["The CREATE USER statement creates new MariaDB accounts. To use it, you must have the global CREATE USER privilege or the INSERT privilege for the mysql database. For each account, CREATE USER creates a new row in mysql.user (until MariaDB 10.3 this is a table, from MariaDB 10.4 it's a view) or mysql.global_priv_table (from MariaDB 10.4) that has no privileges.", "If any of the specified accounts, or any permissions for the specified accounts, already exist, then the server returns ERROR 1396 (HY000). If an error occurs, CREATE USER will still create the accounts that do not result in an error. Only one error is produced for all users which have not been created:", "ERROR 1396 (HY000): \n  Operation CREATE USER failed for 'u1'@'%','u2'@'%'\n", "CREATE USER, DROP USER, CREATE ROLE, and DROP ROLE  all produce the same error code when they fail.", "See Account Names below for details on how account names are specified. "], "Examples": [], "Category": ["Account Management SQL Commands"]}
{"HTML": ["https://mariadb.com//kb/en/drop-role/"], "Title": ["DROP ROLE"], "Feature": ["DROP ROLE [IF EXISTS] role_name [,role_name ...]\n"], "Description": ["The DROP ROLE statement removes one or more MariaDB roles. To use this\nstatement, you must have the global CREATE USER privilege or\nthe DELETE privilege for the mysql database.", "DROP ROLE does not disable roles for connections which selected them with SET ROLE. If a role has previously been set as a default role, DROP ROLE does not remove the record of the default role from the mysql.user table. If the role is subsequently recreated and granted, it will again be the user's default. Use SET DEFAULT ROLE NONE to explicitly remove this.", "If any of the specified user accounts do not exist, ERROR 1396 (HY000)\nresults. If an error occurs, DROP ROLE will still drop the roles that\ndo not result in an error. Only one error is produced for all roles which have not been dropped:", "ERROR 1396 (HY000): Operation DROP ROLE failed for 'a','b','c'\n", "Failed CREATE or DROP operations, for both users and roles, produce the same error code.", "IF EXISTS", "If the IF EXISTS clause is used, MariaDB will return a warning instead of an error if the role does not exist."], "Examples": ["DROP ROLE journalist;\n", "DROP ROLE journalist;\nERROR 1396 (HY000): Operation DROP ROLE failed for 'journalist'\n\nDROP ROLE IF EXISTS journalist;\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\nNote (Code 1975): Can't drop role 'journalist'; it doesn't exist\n"], "Category": ["Account Management SQL Commands"]}
{"HTML": ["https://mariadb.com//kb/en/drop-user/"], "Title": ["DROP USER"], "Feature": ["DROP USER [IF EXISTS] user_name [, user_name] ...\n"], "Description": ["The DROP USER statement removes one or more MariaDB accounts. It removes\nprivilege rows for the account from all grant tables. To use this statement,\nyou must have the global CREATE USER privilege\nor the DELETE privilege for the mysql database.\nEach account is named using the same format as for the CREATE USER\nstatement; for example, 'jeffrey'@'localhost'.  If you specify\nonly the user name part of the account name, a host name part of '%' is\nused. For additional information about specifying account names, see\nCREATE USER.", "Note that, if you specify an account that is currently connected, it will not\nbe deleted until the connection is closed. The connection will not be\nautomatically closed.", "If any of the specified user accounts do not exist, ERROR 1396 (HY000)\nresults. If an error occurs, DROP USER will still drop the accounts that do\nnot result in an error. Only one error is produced for all users which have not\nbeen dropped:", "ERROR 1396 (HY000): Operation DROP USER failed for 'u1'@'%','u2'@'%'\n", "Failed CREATE or DROP operations, for both users and roles, produce the\nsame error code.", "IF EXISTS", "If the IF EXISTS clause is used, MariaDB will return a note instead of an error if the user does not exist."], "Examples": ["DROP USER bob;\n\nDROP USER foo2@localhost,foo2@'127.%';\n", "DROP USER bob;\nERROR 1396 (HY000): Operation DROP USER failed for 'bob'@'%'\n\nDROP USER IF EXISTS bob;\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\nSHOW WARNINGS;\n+-------+------+---------------------------------------------+\n| Level | Code | Message                                     |\n+-------+------+---------------------------------------------+\n| Note  | 1974 | Can't drop user 'bob'@'%'; it doesn't exist |\n+-------+------+---------------------------------------------+\n"], "Category": ["Account Management SQL Commands"]}
{"HTML": ["https://mariadb.com//kb/en/grant/"], "Title": ["GRANT"], "Feature": ["GRANT\n    priv_type [(column_list)]\n      [, priv_type [(column_list)]] ...\n    ON [object_type] priv_level\n    TO user_specification [ user_options ...]\n\nuser_specification:\n  username [authentication_option]\n  | PUBLIC\nauthentication_option:\n  IDENTIFIED BY 'password' \n  | IDENTIFIED BY PASSWORD 'password_hash'\n  | IDENTIFIED {VIA|WITH} authentication_rule [OR authentication_rule  ...]\n\nauthentication_rule:\n    authentication_plugin\n  | authentication_plugin {USING|AS} 'authentication_string'\n  | authentication_plugin {USING|AS} PASSWORD('password')\n\nGRANT PROXY ON username\n    TO user_specification [, user_specification ...]\n    [WITH GRANT OPTION]\n\nGRANT rolename TO grantee [, grantee ...]\n    [WITH ADMIN OPTION]\n\ngrantee:\n    rolename\n    username [authentication_option]\n\nuser_options:\n    [REQUIRE {NONE | tls_option [[AND] tls_option] ...}]\n    [WITH with_option [with_option] ...]\n\nobject_type:\n    TABLE\n  | FUNCTION\n  | PROCEDURE\n  | PACKAGE\n  | PACKAGE BODY\n\npriv_level:\n    *\n  | *.*\n  | db_name.*\n  | db_name.tbl_name\n  | tbl_name\n  | db_name.routine_name\n\nwith_option:\n    GRANT OPTION\n  | resource_option\n\nresource_option:\n  MAX_QUERIES_PER_HOUR count\n  | MAX_UPDATES_PER_HOUR count\n  | MAX_CONNECTIONS_PER_HOUR count\n  | MAX_USER_CONNECTIONS count\n  | MAX_STATEMENT_TIME time\n\ntls_option:\n  SSL \n  | X509\n  | CIPHER 'cipher'\n  | ISSUER 'issuer'\n  | SUBJECT 'subject'\n"], "Description": ["The GRANT statement allows you to grant privileges or roles to accounts. To use GRANT, you must have the GRANT OPTION privilege, and you must have the privileges that you are granting.", "Use the REVOKE statement to revoke privileges granted with the GRANT statement.", "Use the SHOW GRANTS statement to determine what privileges an account has.", "Account Names", "For GRANT statements, account names are specified as the username argument in the same way as they are for CREATE USER statements. See account names from the CREATE USER page for details on how account names are specified.", "Implicit Account Creation", "The GRANT statement also allows you to implicitly create accounts in some cases.", "If the account does not yet exist, then GRANT can implicitly create it. To implicitly create an account with GRANT, a user is required to have the same privileges that would be required to explicitly create the account with the CREATE USER statement.", "If the NO_AUTO_CREATE_USER SQL_MODE is set, then accounts can only be created if authentication information is specified, or with a CREATE USER statement. If no authentication information is provided, GRANT will produce an error when the specified account does not exist, for example:", "show variables like '%sql_mode%' ;\n+---------------+--------------------------------------------+\n| Variable_name | Value                                      |\n+---------------+--------------------------------------------+\n| sql_mode      | NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION |\n+---------------+--------------------------------------------+\n\nGRANT USAGE ON *.* TO 'user123'@'%' IDENTIFIED BY '';\nERROR 1133 (28000): Can't find any matching row in the user table\n\nGRANT USAGE ON *.* TO 'user123'@'%' \n  IDENTIFIED VIA PAM using 'mariadb' require ssl ;\nQuery OK, 0 rows affected (0.00 sec)\n \nselect host, user from mysql.user where user='user123' ;\n\n+------+----------+\n| host | user     |\n+------+----------+\n| %    | user123 |\n+------+----------+\n", "Privilege Levels", "Privileges can be set globally, for an entire database, for a table or routine,\nor for individual columns in a table. Certain privileges can only be set at\ncertain levels.", "Global privileges do not take effect immediately and are only applied to connections created after the GRANT statement was executed.", "Global privileges priv_type are granted using *.* for\npriv_level. Global privileges include privileges to administer the database\nand manage user accounts, as well as privileges for all tables, functions, and\nprocedures. Global privileges are stored in the mysql.user table prior to MariaDB 10.4, and in  mysql.global_priv table afterwards.\nDatabase privileges priv_type are granted using db_name.*\nfor priv_level, or using just * to use default database. Database\nprivileges include privileges to create tables and functions, as well as\nprivileges for all tables, functions, and procedures in the database. Database privileges are stored in the mysql.db table.\nTable privileges priv_type are granted using db_name.tbl_name\nfor priv_level, or using just tbl_name to specify a table in the default\ndatabase. The TABLE keyword is optional. Table privileges include the\nability to select and change data in the table. Certain table privileges can\nbe granted for individual columns.\nColumn privileges priv_type are granted by specifying a table for\npriv_level and providing a column list after the privilege type. They allow\nyou to control exactly which columns in a table users can select and change.\nFunction privileges priv_type are granted using FUNCTION db_name.routine_name\nfor priv_level, or using just  FUNCTION routine_name to specify a function\nin the default database.\nProcedure privileges priv_type are granted using PROCEDURE db_name.routine_name\nfor priv_level, or using just PROCEDURE routine_name to specify a procedure\nin the default database.\n", "The USAGE Privilege", "The USAGE privilege grants no real privileges. The SHOW GRANTS\nstatement will show a global USAGE privilege for a newly-created user. You\ncan use USAGE with the GRANT statement to change options like GRANT OPTION\nand MAX_USER_CONNECTIONS without changing any account privileges.", "The ALL PRIVILEGES Privilege", "The ALL PRIVILEGES privilege grants all available privileges. Granting all\nprivileges only affects the given privilege level. For example, granting all\nprivileges on a table does not grant any privileges on the database or globally.", "Using ALL PRIVILEGES does not grant the special GRANT OPTION privilege.", "You can use ALL instead of ALL PRIVILEGES.", "The GRANT OPTION Privilege", "Use the WITH GRANT OPTION clause to give users the ability to grant privileges\nto other users at the given privilege level. Users with the GRANT OPTION privilege can\nonly grant privileges they have. They cannot grant privileges at a higher privilege level than\nthey have the GRANT OPTION privilege.", "The GRANT OPTION privilege cannot be set for individual columns.\nIf you use WITH GRANT OPTION when specifying column privileges,\nthe GRANT OPTION privilege will be granted for the entire table.", "Using the WITH GRANT OPTION clause is equivalent to listing GRANT OPTION\nas a privilege.", "Global Privileges", "The following table lists the privileges that can be granted globally. You can\nalso grant all database, table, and function privileges globally. When granted\nglobally, these privileges apply to all databases, tables, or functions,\nincluding those created later.", "To set a global privilege, use *.* for priv_level.", "BINLOG ADMIN", "Enables administration of the binary log, including the PURGE BINARY LOGS statement and setting the system variables:", "binlog_annotate_row_events\nbinlog_cache_size\nbinlog_commit_wait_count\nbinlog_commit_wait_usec\nbinlog_direct_non_transactional_updates\nbinlog_expire_logs_seconds\nbinlog_file_cache_size\nbinlog_format\nbinlog_row_image\nbinlog_row_metadata\nbinlog_stmt_cache_size\nexpire_logs_days\nlog_bin_compress\nlog_bin_compress_min_len\nlog_bin_trust_function_creators\nmax_binlog_cache_size\nmax_binlog_size\nmax_binlog_stmt_cache_size\nsql_log_bin and\nsync_binlog.\n", "Added in MariaDB 10.5.2. ", "BINLOG MONITOR", "New name for REPLICATION CLIENT from MariaDB 10.5.2, (REPLICATION CLIENT still supported as an alias for compatibility purposes). Permits running SHOW commands related to the binary log, in particular the SHOW BINLOG STATUS and SHOW BINARY LOGS statements. Unlike REPLICATION CLIENT prior to MariaDB 10.5, SHOW REPLICA STATUS isn't included in this privilege, and  REPLICA MONITOR is required.", "BINLOG REPLAY", "Enables replaying the binary log with the BINLOG statement (generated by mariadb-binlog), executing SET timestamp when secure_timestamp is set to replication, and setting the session values of system variables usually included in BINLOG output, in particular:", "gtid_domain_id\ngtid_seq_no\npseudo_thread_id\nserver_id.\n", "Added in MariaDB 10.5.2", "CONNECTION ADMIN", "Enables administering connection resource limit options. This includes ignoring the limits specified by:\nmax_user_connections and max_password_errors. And allowing one extra connection over max_connections", "The statements specified in init_connect are not executed, killing connections and queries owned by other users is permitted. The following connection-related system variables can be changed:", "connect_timeout\ndisconnect_on_expired_password\nextra_max_connections\ninit_connect\nmax_connections\nmax_connect_errors\nmax_password_errors\nproxy_protocol_networks\nsecure_auth\nslow_launch_time\nthread_pool_exact_stats\nthread_pool_dedicated_listener\nthread_pool_idle_timeout\nthread_pool_max_threads\nthread_pool_min_threads\nthread_pool_oversubscribe\nthread_pool_prio_kickup_timer\nthread_pool_priority\nthread_pool_size, and\nthread_pool_stall_limit.\n", "Added in MariaDB 10.5.2.", "CREATE USER", "Create a user using the CREATE USER statement, or implicitly create a user with the GRANT statement.", "FEDERATED ADMIN", "Execute CREATE SERVER, ALTER SERVER, and DROP SERVER statements. Added in MariaDB 10.5.2.", "FILE", "Read and write files on the server, using statements like LOAD DATA INFILE or functions like LOAD_FILE(). Also needed to create CONNECT outward tables. MariaDB server must have the permissions to access those files.", "GRANT OPTION", "Grant global privileges. You can only grant privileges that you have.", "PROCESS", "Show information about the active processes, for example via SHOW PROCESSLIST or mariadb-admin processlist. If you have the PROCESS privilege, you can see all threads. Otherwise, you can see only your own threads (that is, threads associated with the MariaDB account that you are using).", "READ_ONLY ADMIN", "User ignores the read_only system variable, and can perform write operations even when the read_only option is active. Added in MariaDB 10.5.2.", "From MariaDB 10.11.0, the READ_ONLY ADMIN privilege has been removed from SUPER. The benefit of this is that one can remove the READ_ONLY ADMIN privilege from all users and ensure that no one can make any changes on any non-temporary tables. This is useful on replicas when one wants to ensure that the replica is kept identical to the primary.", "RELOAD", "Execute FLUSH statements or equivalent mariadb-admin commands.", "REPLICATION CLIENT", "Execute SHOW MASTER STATUS and SHOW BINARY LOGS informative statements. Renamed to BINLOG MONITOR in MariaDB 10.5.2 (but still supported as an alias for compatibility reasons). SHOW SLAVE STATUS was part of REPLICATION CLIENT prior to MariaDB 10.5.", "REPLICATION MASTER ADMIN", "Permits administration of primary servers, including the SHOW REPLICA HOSTS statement, and setting the gtid_binlog_state, gtid_domain_id, master_verify_checksum and server_id system variables. Added in MariaDB 10.5.2.", "REPLICA MONITOR", "Permit SHOW REPLICA STATUS and SHOW RELAYLOG EVENTS. From MariaDB 10.5.9.", "When a user would upgrade from an older major release to a MariaDB 10.5 minor release prior to MariaDB 10.5.9, certain user accounts would lose capabilities. For example, a user account that had the REPLICATION CLIENT privilege in older major releases could run SHOW REPLICA STATUS, but after upgrading to a MariaDB 10.5 minor release prior to MariaDB 10.5.9, they could no longer run SHOW REPLICA STATUS, because that statement was changed to require the REPLICATION REPLICA ADMIN privilege.", "This issue is fixed in MariaDB 10.5.9 with this new privilege, which now grants the user the ability to execute SHOW [ALL] (SLAVE | REPLICA) STATUS.", "When a database is upgraded from an older major release to MariaDB Server 10.5.9 or later, any user accounts with the REPLICATION CLIENT or REPLICATION SLAVE privileges will automatically be granted the new REPLICA MONITOR privilege. The privilege fix occurs when the server is started up, not when mariadb-upgrade is performed.", "However, when a database is upgraded from an early 10.5 minor release to 10.5.9 and later, the user will have to fix any user account privileges manually.", "REPLICATION REPLICA", "Synonym for REPLICATION SLAVE. From MariaDB 10.5.1.", "REPLICATION SLAVE", "Accounts used by replica servers on the primary need this privilege. This is needed to get the updates made on the master. From MariaDB 10.5.1, REPLICATION REPLICA is an alias for REPLICATION SLAVE.", "REPLICATION SLAVE ADMIN", "Permits administering replica servers, including START REPLICA/SLAVE, STOP REPLICA/SLAVE, CHANGE MASTER, SHOW REPLICA/SLAVE STATUS, SHOW RELAYLOG EVENTS statements, replaying the binary log with the BINLOG statement (generated by mariadb-binlog), and setting the system variables:", "gtid_cleanup_batch_size\ngtid_ignore_duplicates\ngtid_pos_auto_engines\ngtid_slave_pos\ngtid_strict_mode\ninit_slave\nread_binlog_speed_limit\nrelay_log_purge\nrelay_log_recovery\nreplicate_do_db\nreplicate_do_table\nreplicate_events_marked_for_skip\nreplicate_ignore_db\nreplicate_ignore_table\nreplicate_wild_do_table\nreplicate_wild_ignore_table\nslave_compressed_protocol\nslave_ddl_exec_mode\nslave_domain_parallel_threads\nslave_exec_mode\nslave_max_allowed_packet\nslave_net_timeout\nslave_parallel_max_queued\nslave_parallel_mode\nslave_parallel_threads\nslave_parallel_workers\nslave_run_triggers_for_rbr\nslave_sql_verify_checksum\nslave_transaction_retry_interval\nslave_type_conversions\nsync_master_info\nsync_relay_log, and\nsync_relay_log_info.\n", " Added in MariaDB 10.5.2.", "SET USER", "Enables setting the DEFINER when creating triggers, views, stored functions and stored procedures. Added in MariaDB 10.5.2.", "SHOW DATABASES", "List all databases using the SHOW DATABASES statement. Without the SHOW DATABASES privilege, you can still issue the SHOW DATABASES statement, but it will only list databases containing tables on which you have privileges.", "SHUTDOWN", "Shut down the server using SHUTDOWN or the mariadb-admin shutdown command.", "SUPER", "Execute superuser statements: CHANGE MASTER TO, KILL (users who do not have this privilege can only KILL their own threads), PURGE LOGS, SET global system variables, or the mariadb-admin debug command. Also, this permission allows the user to write data even if the read_only startup option is set, enable or disable logging, enable or disable replication on replica, specify a DEFINER for statements that support that clause, connect once reaching the MAX_CONNECTIONS. If a statement has been specified for the init-connect mariadbd option, that command will not be executed when a user with SUPER privileges connects to the server.", "The SUPER privilege has been split into multiple smaller privileges from MariaDB 10.5.2 to allow for more fine-grained privileges (MDEV-21743). The privileges are:", "SET USER\nFEDERATED ADMIN\nCONNECTION ADMIN\nREPLICATION SLAVE ADMIN\nBINLOG ADMIN\nBINLOG REPLAY\nREPLICA MONITOR\nBINLOG MONITOR\nREPLICATION MASTER ADMIN\nREAD_ONLY ADMIN\n", "However, the smaller privileges are still a part of the SUPER grant in MariaDB 10.5.2. From MariaDB 11.0.1 onwards, these grants are no longer a part of SUPER and need to be granted separately (MDEV-29668).", "From MariaDB 10.11.0, the READ_ONLY ADMIN privilege has been removed from SUPER. The benefit of this is that one can remove the READ_ONLY ADMIN privilege from all users and ensure that no one can make any changes on any non-temporary tables. This is useful on replicas when one wants to ensure that the replica is kept identical to the primary (MDEV-29596).", "Database Privileges", "The following table lists the privileges that can be granted at the database\nlevel. You can also grant all table and function privileges at the database\nlevel. Table and function privileges on a database apply to all tables or\nfunctions in that database, including those created later.", "To set a privilege for a database, specify the database using\ndb_name.* for priv_level, or just use *\nto specify the default database.", "PrivilegeDescription\nCREATECreate a database using the CREATE DATABASE statement, when the privilege is granted for a database. You can grant the CREATE privilege on databases that do not yet exist. This also grants the CREATE privilege on all tables in the database.\nCREATE ROUTINECreate Stored Programs using the CREATE PROCEDURE and CREATE FUNCTION statements.\nCREATE TEMPORARY TABLESCreate temporary tables with the CREATE TEMPORARY TABLE statement. This privilege enable writing and dropping those temporary tables\nDROPDrop a database using the DROP DATABASE statement, when the privilege is granted for a database. This also grants the DROP privilege on all tables in the database.\nEVENTCreate, drop and alter EVENTs.\nGRANT OPTIONGrant database privileges. You can only grant privileges that you have.\nLOCK TABLESAcquire explicit locks using the LOCK TABLES statement; you also need to have the SELECT privilege on a table, in order to lock it.\nSHOW CREATE ROUTINEPermit viewing the SHOW CREATE definition statement of a routine, for example SHOW CREATE FUNCTION, even if not the routine owner. From MariaDB 11.3.0.\n\n", "Table Privileges", "PrivilegeDescription\nALTERChange the structure of an existing table using the ALTER TABLE statement.\nCREATECreate a table using the CREATE TABLE statement.  You can grant the CREATE privilege on tables that do not yet exist.\nCREATE VIEWCreate a view using the CREATE_VIEW statement.\nDELETERemove rows from a table using the DELETE statement.\nDELETE HISTORYRemove historical rows from a table using the DELETE HISTORY statement. Displays as DELETE VERSIONING ROWS when running SHOW GRANTS until MariaDB 10.3.15 and until MariaDB 10.4.5 (MDEV-17655), or when running SHOW PRIVILEGES until MariaDB 10.5.2, MariaDB 10.4.13 and MariaDB 10.3.23 (MDEV-20382). From MariaDB 10.3.4. From MariaDB 10.3.5, if a user has the SUPER privilege but not this privilege, running mariadb-upgrade will grant this privilege as well.\nDROPDrop a table using the DROP TABLE statement or a view using the DROP VIEW statement. Also required to execute the TRUNCATE TABLE statement.\nGRANT OPTIONGrant table privileges. You can only grant privileges that you have.\nINDEXCreate an index on a table using the CREATE INDEX statement. Without the INDEX privilege, you can still create indexes when creating a table using the CREATE TABLE statement if the you have the CREATE privilege, and you can create indexes using the ALTER TABLE statement if you have the ALTER privilege.\nINSERTAdd rows to a table using the INSERT statement.  The INSERT privilege can also be set on individual columns; see Column Privileges below for details.\nREFERENCESUnused.\nSELECTRead data from a table using the SELECT statement. The SELECT privilege can also be set on individual columns; see Column Privileges below for details.\nSHOW VIEWShow the CREATE VIEW statement to create a view using the SHOW CREATE VIEW statement.\nTRIGGERRequired to run the CREATE TRIGGER, DROP TRIGGER, and SHOW CREATE TRIGGER statements. When another user activates a trigger (running INSERT, UPDATE, or DELETE statements on the associated table), for the trigger to execute, the user that defined the trigger should have the TRIGGER privilege for the table. The user running the INSERT, UPDATE, or DELETE statements on the table is not required to have the TRIGGER privilege.\nUPDATEUpdate existing rows in a table using the UPDATE statement. UPDATE statements usually include a WHERE clause to update only certain rows. You must have SELECT privileges on the table or the appropriate columns for the WHERE clause. The UPDATE privilege can also be set on individual columns; see Column Privileges below for details.\n\n", "Column Privileges", "Some table privileges can be set for individual columns of a table. To use\ncolumn privileges, specify the table explicitly and provide a list of column\nnames after the privilege type. For example, the following statement would allow\nthe user to read the names and positions of employees, but not other information\nfrom the same table, such as salaries.", "GRANT SELECT (name, position) on Employee to 'jeffrey'@'localhost';\n", "PrivilegeDescription\nINSERT (column_list)Add rows specifying values in columns using the INSERT statement. If you only have column-level INSERT privileges, you must specify the columns you are setting in the INSERT statement. All other columns will be set to their default values, or NULL.\nREFERENCES (column_list)Unused.\nSELECT (column_list)Read values in columns using the SELECT statement. You cannot access or query any columns for which you do not have SELECT privileges, including in WHERE, ON, GROUP BY, and ORDER BY clauses.\nUPDATE (column_list)Update values in columns of existing rows using the UPDATE statement. UPDATE statements usually include a WHERE clause to update only certain rows. You must have SELECT privileges on the table or the appropriate columns for the WHERE clause.\n\n", "Function Privileges", "PrivilegeDescription\nALTER ROUTINEChange the characteristics of a stored function using the ALTER FUNCTION statement.\nEXECUTEUse a stored function. You need SELECT privileges for any tables or columns accessed by the function.\nGRANT OPTIONGrant function privileges. You can only grant privileges that you have.\n\n", "Procedure Privileges", "PrivilegeDescription\nALTER ROUTINEChange the characteristics of a stored procedure using the ALTER PROCEDURE statement.\nEXECUTEExecute a stored procedure using the CALL statement. The privilege to call a procedure may allow you to perform actions you wouldn't otherwise be able to do, such as insert rows into a table.\nGRANT OPTIONGrant procedure privileges. You can only grant privileges that you have.\n\n", "GRANT EXECUTE ON PROCEDURE mysql.create_db TO maintainer;\n", "Proxy Privileges", "PrivilegeDescription\nPROXYPermits one user to be a proxy for another.\n\n", "The PROXY privilege allows one user to proxy as another user, which means their privileges change to that of the proxy user, and the CURRENT_USER() function returns the user name of the proxy user.", "The PROXY privilege only works with authentication plugins that support it. The default mysql_native_password authentication plugin does not support proxy users.", "The pam authentication plugin is the only plugin included with MariaDB that currently supports proxy users. The PROXY privilege is commonly used with the pam authentication plugin to enable user and group mapping with PAM.", "For example, to grant the PROXY privilege to an anonymous account that authenticates with the pam authentication plugin, you could execute the following:", "CREATE USER 'dba'@'%' IDENTIFIED BY 'strongpassword';\nGRANT ALL PRIVILEGES ON *.* TO 'dba'@'%' ;\n\nCREATE USER ''@'%' IDENTIFIED VIA pam USING 'mariadb';\nGRANT PROXY ON 'dba'@'%' TO ''@'%';\n", "A user account can only grant the PROXY privilege for a specific user account if the granter also has the PROXY privilege for that specific user account, and if that privilege is defined WITH GRANT OPTION. For example, the following example fails because the granter does not have the PROXY privilege for that specific user account at all:", "SELECT USER(), CURRENT_USER();\n+-----------------+-----------------+\n| USER()          | CURRENT_USER()  |\n+-----------------+-----------------+\n| alice@localhost | alice@localhost |\n+-----------------+-----------------+\n\nSHOW GRANTS;\n+-----------------------------------------------------------------------------------------------------------------------+\n| Grants for alice@localhost                                                                                            |\n+-----------------------------------------------------------------------------------------------------------------------+\n| GRANT ALL PRIVILEGES ON *.* TO 'alice'@'localhost' IDENTIFIED BY PASSWORD '*2470C0C06DEE42FD1618BB99005ADCA2EC9D1E19' |\n+-----------------------------------------------------------------------------------------------------------------------+\n\nGRANT PROXY ON 'dba'@'localhost' TO 'bob'@'localhost';\nERROR 1698 (28000): Access denied for user 'alice'@'localhost'\n", "And the following example fails because the granter does have the PROXY privilege for that specific user account, but it is not defined WITH GRANT OPTION:", "SELECT USER(), CURRENT_USER();\n+-----------------+-----------------+\n| USER()          | CURRENT_USER()  |\n+-----------------+-----------------+\n| alice@localhost | alice@localhost |\n+-----------------+-----------------+\n\nSHOW GRANTS;\n+-----------------------------------------------------------------------------------------------------------------------+\n| Grants for alice@localhost                                                                                            |\n+-----------------------------------------------------------------------------------------------------------------------+\n| GRANT ALL PRIVILEGES ON *.* TO 'alice'@'localhost' IDENTIFIED BY PASSWORD '*2470C0C06DEE42FD1618BB99005ADCA2EC9D1E19' |\n| GRANT PROXY ON 'dba'@'localhost' TO 'alice'@'localhost'                                                               |\n+-----------------------------------------------------------------------------------------------------------------------+\n\nGRANT PROXY ON 'dba'@'localhost' TO 'bob'@'localhost';\nERROR 1698 (28000): Access denied for user 'alice'@'localhost'\n", "But the following example succeeds because the granter does have the PROXY privilege for that specific user account, and it is defined WITH GRANT OPTION:", "SELECT USER(), CURRENT_USER();\n+-----------------+-----------------+\n| USER()          | CURRENT_USER()  |\n+-----------------+-----------------+\n| alice@localhost | alice@localhost |\n+-----------------+-----------------+\n\nSHOW GRANTS;\n+-----------------------------------------------------------------------------------------------------------------------------------------+\n| Grants for alice@localhost                                                                                                              |\n+-----------------------------------------------------------------------------------------------------------------------------------------+\n| GRANT ALL PRIVILEGES ON *.* TO 'alice'@'localhost' IDENTIFIED BY PASSWORD '*2470C0C06DEE42FD1618BB99005ADCA2EC9D1E19' WITH GRANT OPTION |\n| GRANT PROXY ON 'dba'@'localhost' TO 'alice'@'localhost' WITH GRANT OPTION                                                               |\n+-----------------------------------------------------------------------------------------------------------------------------------------+\n\nGRANT PROXY ON 'dba'@'localhost' TO 'bob'@'localhost';\n", "A user account can grant the PROXY privilege for any other user account if the granter has the PROXY privilege for the ''@'%' anonymous user account, like this:", "GRANT PROXY ON ''@'%' TO 'dba'@'localhost' WITH GRANT OPTION;\n", "For example, the following example succeeds because the user can grant the PROXY privilege for any other user account:", "SELECT USER(), CURRENT_USER();\n+-----------------+-----------------+\n| USER()          | CURRENT_USER()  |\n+-----------------+-----------------+\n| alice@localhost | alice@localhost |\n+-----------------+-----------------+\n\nSHOW GRANTS;\n+-----------------------------------------------------------------------------------------------------------------------------------------+\n| Grants for alice@localhost                                                                                                              |\n+-----------------------------------------------------------------------------------------------------------------------------------------+\n| GRANT ALL PRIVILEGES ON *.* TO 'alice'@'localhost' IDENTIFIED BY PASSWORD '*2470C0C06DEE42FD1618BB99005ADCA2EC9D1E19' WITH GRANT OPTION |\n| GRANT PROXY ON ''@'%' TO 'alice'@'localhost' WITH GRANT OPTION                                                                          |\n+-----------------------------------------------------------------------------------------------------------------------------------------+\n\nGRANT PROXY ON 'app1_dba'@'localhost' TO 'bob'@'localhost';\nQuery OK, 0 rows affected (0.004 sec)\n\nGRANT PROXY ON 'app2_dba'@'localhost' TO 'carol'@'localhost';\nQuery OK, 0 rows affected (0.004 sec)\n", "The default root user accounts created by mariadb-install-db have this privilege. For example:", "GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost' WITH GRANT OPTION;\nGRANT PROXY ON ''@'%' TO 'root'@'localhost' WITH GRANT OPTION;\n", "This allows the default root user accounts to grant the PROXY privilege for any other user account, and it also allows the default root user accounts to grant others the privilege to do the same.", "Authentication Options", "The authentication options for the GRANT statement are the same as those for the CREATE USER statement.", "IDENTIFIED BY 'password'", "The optional IDENTIFIED BY clause can be used to provide an account with a password. The password should be specified in plain text. It will be hashed by the PASSWORD function prior to being stored.", "For example, if our password is mariadb, then we can create the user with:", "GRANT USAGE ON *.* TO foo2@test IDENTIFIED BY 'mariadb';\n", "If you do not specify a password with the IDENTIFIED BY clause, the user\nwill be able to connect without a password. A blank password is not a wildcard\nto match any password. The user must connect without providing a password if no\npassword is set.", "If the user account already exists and if you provide the IDENTIFIED BY clause, then the user's password will be changed. You must have the privileges needed for the SET PASSWORD\nstatement to change a user's password with GRANT.", "The only authentication plugins that this clause supports are mysql_native_password and mysql_old_password.", "IDENTIFIED BY PASSWORD 'password_hash'", "The optional IDENTIFIED BY PASSWORD clause can be used to provide an account with a password that has already been hashed. The password should be specified as a hash that was provided by the PASSWORD function. It will be stored as-is.", "For example, if our password is mariadb, then we can find the hash with:", "SELECT PASSWORD('mariadb');\n+-------------------------------------------+\n| PASSWORD('mariadb')                       |\n+-------------------------------------------+\n| *54958E764CE10E50764C2EECBB71D01F08549980 |\n+-------------------------------------------+\n1 row in set (0.00 sec)\n", "And then we can create a user with the hash:", "GRANT USAGE ON *.* TO foo2@test IDENTIFIED BY \n  PASSWORD '*54958E764CE10E50764C2EECBB71D01F08549980';\n", "If you do not specify a password with the IDENTIFIED BY clause, the user\nwill be able to connect without a password. A blank password is not a wildcard\nto match any password. The user must connect without providing a password if no\npassword is set.", "If the user account already exists and if you provide the IDENTIFIED BY clause, then the user's password will be changed. You must have the privileges needed for the SET PASSWORD\nstatement to change a user's password with GRANT.", "The only authentication plugins that this clause supports are mysql_native_password and mysql_old_password.", "IDENTIFIED {VIA|WITH} authentication_plugin", "The optional IDENTIFIED VIA authentication_plugin allows you to specify that the account should be authenticated by a specific authentication plugin. The plugin name must be an active authentication plugin as per SHOW PLUGINS. If it doesn't show up in that output, then you will need to install it with INSTALL PLUGIN or INSTALL SONAME.", "For example, this could be used with the PAM authentication plugin:", "GRANT USAGE ON *.* TO foo2@test IDENTIFIED VIA pam;\n", "Some authentication plugins allow additional arguments to be specified after a USING or AS keyword. For example, the PAM authentication plugin accepts a service name:", "GRANT USAGE ON *.* TO foo2@test IDENTIFIED VIA pam USING 'mariadb';\n", "The exact meaning of the additional argument would depend on the specific authentication plugin.", "The USING or AS keyword can also be used to provide a plain-text password to a plugin if it's provided as an argument to the PASSWORD() function. This is only valid for authentication plugins that have implemented a hook for the PASSWORD() function. For example, the ed25519 authentication plugin supports this:", "CREATE USER safe@'%' IDENTIFIED VIA ed25519 \n  USING PASSWORD('secret');\n", "One can specify many authentication plugins, they all work as alternative ways of authenticating a user:", "CREATE USER safe@'%' IDENTIFIED VIA ed25519 \n  USING PASSWORD('secret') OR unix_socket;\n", "By default, when you create a user without specifying an authentication plugin, MariaDB uses the mysql_native_password plugin.", "Resource Limit Options", "It is possible to set per-account limits for certain server resources. The following table shows the values that can be set per account:", "Limit TypeDecription\nMAX_QUERIES_PER_HOURNumber of statements that the account can issue per hour (including updates)\nMAX_UPDATES_PER_HOURNumber of updates (not queries) that the account can issue per hour\nMAX_CONNECTIONS_PER_HOURNumber of connections that the account can start per hour\nMAX_USER_CONNECTIONSNumber of simultaneous connections that can be accepted from the same account; if it is 0, max_connections will be used instead; if max_connections is 0, there is no limit for this account's simultaneous connections.\nMAX_STATEMENT_TIMETimeout, in seconds, for statements executed by the user. See also Aborting Statements that Exceed a Certain Time to Execute.\n\n", "If any of these limits are set to 0, then there is no limit for that resource for that user.", "To set resource limits for an account, if you do not want to change that account's privileges, you can issue a GRANT statement with the USAGE privilege, which has no meaning. The statement can name some or all limit types, in any order.", "Here is an example showing how to set resource limits:", "GRANT USAGE ON *.* TO 'someone'@'localhost' WITH\n    MAX_USER_CONNECTIONS 0\n    MAX_QUERIES_PER_HOUR 200;\n", "The resources are tracked per account, which means 'user'@'server'; not per user name or per connection.", "The count can be reset for all users using FLUSH USER_RESOURCES, FLUSH PRIVILEGES or mariadb-admin reload.", "Users with the CONNECTION ADMIN privilege (in MariaDB 10.5.2 and later) or the SUPER privilege are not restricted by max_user_connections or max_password_errors and they are allowed one additional connection when max_connections is reached.", "Per account resource limits are stored in the user table, in the mysql database. Columns used for resources limits are named max_questions, max_updates, max_connections (for MAX_CONNECTIONS_PER_HOUR), and max_user_connections (for MAX_USER_CONNECTIONS).", "TLS Options", "By default, MariaDB transmits data between the server and clients without encrypting it. This is generally acceptable when the server and client run on the same host or in networks where security is guaranteed through other means. However, in cases where the server and client exist on separate networks or they are in a high-risk network, the lack of encryption does introduce security concerns as a malicious actor could potentially eavesdrop on the traffic as it is sent over the network between them.", "To mitigate this concern, MariaDB allows you to encrypt data in transit between the server and clients using the Transport Layer Security (TLS) protocol. TLS was formerly known as Secure Socket Layer (SSL), but strictly speaking the SSL protocol is a predecessor to TLS and, that version of the protocol is now considered insecure. The documentation still uses the term SSL often and for compatibility reasons TLS-related server system and status variables still use the prefix ssl_, but internally, MariaDB only supports its secure successors.", "See Secure Connections Overview for more information about how to determine whether your MariaDB server has TLS support.", "You can set certain TLS-related restrictions for specific user accounts. For instance, you might use this with user accounts that require access to sensitive data while sending it across networks that you do not control. These restrictions can be enabled for a user account with the CREATE USER, ALTER USER, or GRANT statements. The following options are available:", "OptionDescription\nREQUIRE NONETLS is not required for this account, but can still be used.\nREQUIRE SSLThe account must use TLS, but no valid X509 certificate is required. This option cannot be combined with other TLS options.\nREQUIRE X509The account must use TLS and must have a valid X509 certificate. This option implies REQUIRE SSL. This option cannot be combined with other TLS options.\nREQUIRE ISSUER 'issuer'The account must use TLS and must have a valid X509 certificate. Also, the Certificate Authority must be the one specified via the string issuer. This option implies REQUIRE X509. This option can be combined with the SUBJECT, and CIPHER options in any order.\nREQUIRE SUBJECT 'subject'The account must use TLS and must have a valid X509 certificate. Also, the certificate's Subject must be the one specified via the string subject. This option implies REQUIRE X509. This option can be combined with the ISSUER, and CIPHER options in any order.\nREQUIRE CIPHER 'cipher'The account must use TLS, but no valid X509 certificate is required. Also, the encryption used for the connection must use a specific cipher method specified in the string cipher. This option implies REQUIRE SSL. This option can be combined with the ISSUER, and SUBJECT options in any order.\n\n", "The REQUIRE keyword must be used only once for all specified options, and the AND keyword can be used to separate individual options, but it is not required.", "For example, you can create a user account that requires these TLS options with the following:", "GRANT USAGE ON *.* TO 'alice'@'%'\n  REQUIRE SUBJECT '/CN=alice/O=My Dom, Inc./C=US/ST=Oregon/L=Portland'\n  AND ISSUER '/C=FI/ST=Somewhere/L=City/ O=Some Company/CN=Peter Parker/emailAddress=p.parker@marvel.com'\n  AND CIPHER 'SHA-DES-CBC3-EDH-RSA';\n", "If any of these options are set for a specific user account, then any client who tries to connect with that user account will have to be configured to connect with TLS.", "See Securing Connections for Client and Server for information on how to enable TLS on the client and server.", "Roles", "Syntax", "GRANT role TO grantee [, grantee ... ]\n[ WITH ADMIN OPTION ]\n\ngrantee:\n    rolename\n    username [authentication_option]\n", "The GRANT statement is also used to grant the use of a role to one or more users or other roles. In order to be able to grant a role, the grantor doing so must have permission to do so (see WITH ADMIN in the CREATE ROLE article).", "Specifying the WITH ADMIN OPTION permits the grantee to in turn grant the role to another.", "For example, the following commands show how to grant the same role to a couple different users.", "GRANT journalist TO hulda;\n\nGRANT journalist TO berengar WITH ADMIN OPTION;\n", "If a user has been granted a role, they do not automatically obtain all permissions associated with that role. These permissions are only in use when the user activates the role with the SET ROLE statement.", "TO PUBLIC", "MariaDB starting with 10.11Syntax\nGRANT <privilege> ON <database>.<object> TO PUBLIC;\nREVOKE <privilege> ON <database>.<object> FROM PUBLIC;\nGRANT ... TO PUBLIC grants privileges to all users with access to the server. The privileges also apply to users created after the privileges are granted. This can be useful when one only wants to state once that all users need to have a certain set of privileges. \nWhen running SHOW GRANTS, a user will also see all privileges inherited from PUBLIC. SHOW GRANTS FOR PUBLIC will only show TO PUBLIC grants.\n"], "Examples": [], "Category": ["Account Management SQL Commands"]}
{"HTML": ["https://mariadb.com//kb/en/alter-user/"], "Title": ["ALTER USER"], "Feature": ["ALTER USER [IF EXISTS] \n user_specification [,user_specification] ...\n  [REQUIRE {NONE | tls_option [[AND] tls_option] ...}]\n  [WITH resource_option [resource_option] ...]\n  [lock_option] [password_option] \n\nuser_specification:\n  username [authentication_option]\n\nauthentication_option:\n  IDENTIFIED BY 'password' \n  | IDENTIFIED BY PASSWORD 'password_hash'\n  | IDENTIFIED {VIA|WITH} authentication_rule [OR authentication_rule] ... \n \nauthentication_rule:\n  authentication_plugin\n  | authentication_plugin {USING|AS} 'authentication_string'\n  | authentication_plugin {USING|AS} PASSWORD('password')\n\ntls_option\n  SSL \n  | X509\n  | CIPHER 'cipher'\n  | ISSUER 'issuer'\n  | SUBJECT 'subject'\n\nresource_option\n  MAX_QUERIES_PER_HOUR count\n  | MAX_UPDATES_PER_HOUR count\n  | MAX_CONNECTIONS_PER_HOUR count\n  | MAX_USER_CONNECTIONS count\n  | MAX_STATEMENT_TIME time\n\npassword_option:\n  PASSWORD EXPIRE\n  | PASSWORD EXPIRE DEFAULT\n  | PASSWORD EXPIRE NEVER\n  | PASSWORD EXPIRE INTERVAL N DAY\n\nlock_option:\n    ACCOUNT LOCK\n  | ACCOUNT UNLOCK\n}\n"], "Description": ["The ALTER USER statement modifies existing MariaDB accounts. To use it, you must have the global CREATE USER privilege or the UPDATE privilege for the mysql database. The global SUPER privilege is also required if the read_only system variable is enabled.", "If any of the specified user accounts do not yet exist, an error results. If an error occurs, ALTER USER will still modify the accounts that do not result in an error. Only one error is produced for all users which have not been modified.", "For renaming an existing account (user name and/or host), see RENAME USER."], "Examples": [], "Category": ["Account Management SQL Commands"]}
