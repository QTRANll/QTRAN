{"HTML": ["https://mariadb.com//kb/en/optimize-table/"], "Title": ["OPTIMIZE TABLE"], "Feature": ["OPTIMIZE [NO_WRITE_TO_BINLOG | LOCAL] TABLE\n    tbl_name [, tbl_name] ...\n    [WAIT n | NOWAIT]\n"], "Description": ["OPTIMIZE TABLE has two main functions. It can either be used to defragment tables, or to update the InnoDB fulltext index.", "WAIT/NOWAIT", "Set the lock wait timeout. See WAIT and NOWAIT.", "Defragmenting", "OPTIMIZE TABLE works for InnoDB (before MariaDB 10.1.1, only if the innodb_file_per_table server system variable is set), Aria, MyISAM and ARCHIVE tables, and should be used if you have deleted a large part of a table or if you have made many changes to a table with variable-length\nrows (tables that have VARCHAR, VARBINARY, BLOB, or TEXT columns).  Deleted rows are maintained in a\nlinked list and subsequent INSERT operations reuse old row positions.", "This statement requires SELECT and INSERT privileges for the table.", "By default, OPTIMIZE TABLE statements are written to the binary log and will be replicated. The NO_WRITE_TO_BINLOG keyword (LOCAL is an alias) will ensure the statement is not written to the binary log.", "OPTIMIZE TABLE statements are not logged to the binary log if read_only is set. See also Read-Only Replicas.", "OPTIMIZE TABLE is also supported for partitioned tables. You\ncan use \nALTER TABLE ... OPTIMIZE PARTITION \nto optimize one or more partitions.", "You can use OPTIMIZE TABLE to reclaim the unused\nspace and to defragment the data file. With other storage engines, OPTIMIZE TABLE does nothing by default, and returns this message: \" The storage engine for the table doesn't support optimize\". However, if the server has been started with the --skip-new option, OPTIMIZE TABLE is linked to ALTER TABLE, and recreates the table. This operation frees the unused space and updates index statistics.", "The Aria storage engine supports progress reporting for this statement.", "If a MyISAM table is fragmented, concurrent inserts will not be performed until an OPTIMIZE TABLE statement is executed on that table, unless the concurrent_insert server system variable is set to ALWAYS.", "Updating an InnoDB fulltext index", "When rows are added or deleted to an InnoDB fulltext index, the index is not immediately re-organized, as this can be an expensive operation. Change statistics are stored in a separate location . The  fulltext index is only fully re-organized when an OPTIMIZE TABLE statement is run.", "By default, an OPTIMIZE TABLE will defragment a table. In order to use it to update fulltext index statistics, the innodb_optimize_fulltext_only system variable must be set to 1. This is intended to be a temporary setting, and should be reset to 0 once the fulltext index has been re-organized.", "Since fulltext re-organization can take a long time, the innodb_ft_num_word_optimize variable limits the re-organization to a number of words (2000 by default).  You can run multiple OPTIMIZE statements to fully re-organize the index.", "Defragmenting InnoDB tablespaces", "MariaDB 10.1.1 merged the Facebook/Kakao defragmentation patch, allowing one to use OPTIMIZE TABLE to defragment InnoDB tablespaces. For this functionality to be enabled, the innodb_defragment system variable must be enabled. No new tables are created and there is no need to copy data from old tables to new tables. Instead, this feature loads n pages (determined by innodb-defragment-n-pages) and tries to move records so that pages would be full of records and then frees pages that are fully empty after the operation. Note that tablespace files (including ibdata1) will not shrink as the result of defragmentation, but one will get better memory utilization in the InnoDB buffer pool as there are fewer data pages in use.", "See Defragmenting InnoDB Tablespaces for more details."], "Examples": [], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/optimizer_switch-helper-functions/"], "Title": ["optimizer_switch Helper Functions"], "Feature": ["optimizer_switch_on()\noptimizer_switch_off()\noptimizer_switch_choice(\"on\" | \"off\")\n"], "Description": ["The above procedures can be used to check which optimizer_switch options are on or off.\nThe result set is sorted according to optimizer_switch option name."], "Examples": ["select @@optimizer_switch\\G\n*************************** 1. row ***************************\nindex_merge=on,index_merge_union=on,index_merge_sort_union=on,index_merge_intersection=on,\nindex_merge_sort_intersection=off,engine_condition_pushdown=off,index_condition_pushdown=on,\nderived_merge=on,derived_with_keys=on,firstmatch=on,loosescan=on,materialization=on,\nin_to_exists=on,semijoin=on,partial_match_rowid_merge=on,partial_match_table_scan=on,\nsubquery_cache=on,mrr=off,mrr_cost_based=off,mrr_sort_keys=off,outer_join_with_cache=on,\nsemijoin_with_cache=on,join_cache_incremental=on,join_cache_hashed=on,join_cache_bka=on,\noptimize_join_buffer_size=on,table_elimination=on,extended_keys=on,exists_to_in=on,\norderby_uses_equalities=on,condition_pushdown_for_derived=on,split_materialized=on,\ncondition_pushdown_for_subquery=on,rowid_filter=on,condition_pushdown_from_having=on,\nnot_null_range_scan=off\n\ncall sys.optimizer_switch_on();\n+---------------------------------+------+\n| option                          | opt  |\n+---------------------------------+------+\n| condition_pushdown_for_derived  | on   |\n| condition_pushdown_for_subquery | on   |\n| condition_pushdown_from_having  | on   |\n| derived_merge                   | on   |\n| derived_with_keys               | on   |\n| exists_to_in                    | on   |\n| extended_keys                   | on   |\n| firstmatch                      | on   |\n| index_condition_pushdown        | on   |\n| index_merge                     | on   |\n| index_merge_intersection        | on   |\n| index_merge_sort_union          | on   |\n| index_merge_union               | on   |\n| in_to_exists                    | on   |\n| join_cache_bka                  | on   |\n| join_cache_hashed               | on   |\n| join_cache_incremental          | on   |\n| loosescan                       | on   |\n| materialization                 | on   |\n| optimize_join_buffer_size       | on   |\n| orderby_uses_equalities         | on   |\n| outer_join_with_cache           | on   |\n| partial_match_rowid_merge       | on   |\n| partial_match_table_scan        | on   |\n| rowid_filter                    | on   |\n| semijoin                        | on   |\n| semijoin_with_cache             | on   |\n| split_materialized              | on   |\n| subquery_cache                  | on   |\n| table_elimination               | on   |\n+---------------------------------+------+\n\n\ncall sys.optimizer_switch_off();\n+-------------------------------+------+\n| option                        | opt  |\n+-------------------------------+------+\n| engine_condition_pushdown     | off  |\n| index_merge_sort_intersection | off  |\n| mrr                           | off  |\n| mrr_cost_based                | off  |\n| mrr_sort_keys                 | off  |\n| not_null_range_scan           | off  |\n+-------------------------------+------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/ps_is_account_enabled/"], "Title": ["ps_is_account_enabled"], "Feature": ["sys.ps_is_account_enabled(host,user)\n"], "Description": ["ps_is_account_enabled is a stored function available with the Sys Schema.", "It takes host and user arguments, and returns an ENUM('YES','NO') depending on whether Performance Schema instrumentation for the given account is enabled."], "Examples": ["SELECT sys.ps_is_account_enabled('localhost', 'root');\n+------------------------------------------------+\n| sys.ps_is_account_enabled('localhost', 'root') |\n+------------------------------------------------+\n| YES                                            |\n+------------------------------------------------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/ps_is_consumer_enabled/"], "Title": ["ps_is_consumer_enabled"], "Feature": ["sys.ps_is_consumer_enabled(consumer)\n"], "Description": ["ps_is_consumer_enabled is a stored function available with the Sys Schema.", "It returns an ENUM('YES','NO') depending on whether Performance Schema instrumentation for the given consumer is enabled, and NULL if not given a valid consumer name."], "Examples": ["SELECT sys.ps_is_consumer_enabled('global_instrumentation');\n+------------------------------------------------------+\n| sys.ps_is_consumer_enabled('global_instrumentation') |\n+------------------------------------------------------+\n| YES                                                  |\n+------------------------------------------------------+\n\nSELECT sys.ps_is_consumer_enabled('events_stages_current');\n+-----------------------------------------------------+\n| sys.ps_is_consumer_enabled('events_stages_current') |\n+-----------------------------------------------------+\n| NO                                                  |\n+-----------------------------------------------------+\n\nSELECT sys.ps_is_consumer_enabled('nonexistent_consumer');\n+----------------------------------------------------+\n| sys.ps_is_consumer_enabled('nonexistent_consumer') |\n+----------------------------------------------------+\n| NULL                                               |\n+----------------------------------------------------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/ps_is_instrument_default_enabled/"], "Title": ["ps_is_instrument_default_enabled"], "Feature": ["sys.ps_is_instrument_default_enabled(instrument)\n"], "Description": ["ps_is_instrument_default_enabled is a stored function available with the Sys Schema.", "It returns YES if the given Performance Schema instrument is enabled by default, and NO if it is not, does not exist, or is a NULL value."], "Examples": ["SELECT sys.ps_is_instrument_default_enabled('statement/sql/select');\n+--------------------------------------------------------------+\n| sys.ps_is_instrument_default_enabled('statement/sql/select') |\n+--------------------------------------------------------------+\n| YES                                                          |\n+--------------------------------------------------------------+\n\nSELECT sys.ps_is_instrument_default_enabled('memory/sql/udf_mem');\n+------------------------------------------------------------+\n| sys.ps_is_instrument_default_enabled('memory/sql/udf_mem') |\n+------------------------------------------------------------+\n| NO                                                         |\n+------------------------------------------------------------+\n\nSELECT sys.ps_is_instrument_default_enabled('memory/sql/nonexistent');\n+----------------------------------------------------------------+\n| sys.ps_is_instrument_default_enabled('memory/sql/nonexistent') |\n+----------------------------------------------------------------+\n| NO                                                             |\n+----------------------------------------------------------------+\n\nSELECT sys.ps_is_instrument_default_enabled(NULL);\n+--------------------------------------------+\n| sys.ps_is_instrument_default_enabled(NULL) |\n+--------------------------------------------+\n| NO                                         |\n+--------------------------------------------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/ps_is_instrument_default_timed/"], "Title": ["ps_is_instrument_default_timed"], "Feature": ["sys.ps_is_instrument_default_timed(instrument)\n"], "Description": ["ps_is_instrument_default_timed is a stored function available with the Sys Schema.", "It returns YES if the given Performance Schema instrument is timed by default, and NO if it is not, does not exist, or is a NULL value."], "Examples": ["SELECT sys.ps_is_instrument_default_timed('statement/sql/select');\n+------------------------------------------------------------+\n| sys.ps_is_instrument_default_timed('statement/sql/select') |\n+------------------------------------------------------------+\n| YES                                                        |\n+------------------------------------------------------------+\n\nSELECT sys.ps_is_instrument_default_timed('memory/sql/udf_mem');\n+----------------------------------------------------------+\n| sys.ps_is_instrument_default_timed('memory/sql/udf_mem') |\n+----------------------------------------------------------+\n| NO                                                       |\n+----------------------------------------------------------+\n\nSELECT sys.ps_is_instrument_default_timed('memory/sql/nonexistent');\n+-------------------------------------------------------------+\n| sys.ps_is_instrument_default_timed('memory/sql/udf_memsds') |\n+-------------------------------------------------------------+\n| NO                                                          |\n+-------------------------------------------------------------+\n\nSELECT sys.ps_is_instrument_default_timed(NULL);\n+------------------------------------------+\n| sys.ps_is_instrument_default_timed(NULL) |\n+------------------------------------------+\n| NO                                       |\n+------------------------------------------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/ps_is_thread_instrumented/"], "Title": ["ps_is_thread_instrumented"], "Feature": ["sys.ps_is_thread_instrumented(connection_id)\n"], "Description": ["ps_is_thread_instrumented is a stored function available with the Sys Schema that returns whether or not Performance Schema instrumentation for the given connection_id is enabled.", "YES - instrumentation is enabled\nNO - instrumentation is not enabled\nUNKNOWN - the connection ID is unknown\nNULL - NULL value\n"], "Examples": ["SELECT sys.ps_is_thread_instrumented(CONNECTION_ID());\n+------------------------------------------------+\n| sys.ps_is_thread_instrumented(CONNECTION_ID()) |\n+------------------------------------------------+\n| YES                                            |\n+------------------------------------------------+\n\nSELECT sys.ps_is_thread_instrumented(2042);\n+-------------------------------------+\n| sys.ps_is_thread_instrumented(2042) |\n+-------------------------------------+\n| UNKNOWN                             |\n+-------------------------------------+\n\nSELECT sys.ps_is_thread_instrumented(NULL);\n+-------------------------------------+\n| sys.ps_is_thread_instrumented(NULL) |\n+-------------------------------------+\n| NULL                                |\n+-------------------------------------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/ps_thread_account/"], "Title": ["ps_thread_account"], "Feature": ["sys.ps_thread_account(thread_id)\n"], "Description": ["ps_thread_account is a stored function available with the Sys Schema that returns the account (username@hostname) associated with the given thread_id.", "Returns NULL if the thread_id is not found."], "Examples": ["SELECT sys.ps_thread_account(sys.ps_thread_id(CONNECTION_ID()));\n+----------------------------------------------------------+\n| sys.ps_thread_account(sys.ps_thread_id(CONNECTION_ID())) |\n+----------------------------------------------------------+\n| msandbox@localhost                                       |\n+----------------------------------------------------------+\n\nSELECT sys.ps_thread_account(sys.ps_thread_id(2042));\n+-----------------------------------------------+\n| sys.ps_thread_account(sys.ps_thread_id(2042)) |\n+-----------------------------------------------+\n| NULL                                          |\n+-----------------------------------------------+\n\nSELECT sys.ps_thread_account(sys.ps_thread_id(NULL));\n+-----------------------------------------------+\n| sys.ps_thread_account(sys.ps_thread_id(NULL)) |\n+-----------------------------------------------+\n| msandbox@localhost                            |\n+-----------------------------------------------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/ps_thread_id/"], "Title": ["ps_thread_id"], "Feature": ["sys.ps_thread_id(connection_id)\n"], "Description": ["ps_thread_id is a stored function available with the Sys Schema that returns the thread_id associated with the given connection_id. If the connection_id is NULL, returns the thread_id for the current connection. "], "Examples": ["SELECT * FROM performance_schema.threads\\G\n*************************** 13. row ***************************\n          THREAD_ID: 13\n               NAME: thread/sql/one_connection\n               TYPE: FOREGROUND\n     PROCESSLIST_ID: 3\n   PROCESSLIST_USER: msandbox\n   PROCESSLIST_HOST: localhost\n     PROCESSLIST_DB: test\nPROCESSLIST_COMMAND: Query\n   PROCESSLIST_TIME: 0\n  PROCESSLIST_STATE: Sending data\n   PROCESSLIST_INFO: SELECT * FROM performance_schema.threads\n   PARENT_THREAD_ID: 1\n               ROLE: NULL\n       INSTRUMENTED: YES\n            HISTORY: YES\n    CONNECTION_TYPE: Socket\n       THREAD_OS_ID: 24379\n\n\nSELECT sys.ps_thread_id(3);\n+---------------------+\n| sys.ps_thread_id(3) |\n+---------------------+\n|                  13 |\n+---------------------+\n\nSELECT sys.ps_thread_id(NULL);\n+------------------------+\n| sys.ps_thread_id(NULL) |\n+------------------------+\n|                     13 |\n+------------------------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/ps_thread_stack/"], "Title": ["ps_thread_stack"], "Feature": ["sys.ps_thread_stack(thread_id, verbose)\n"], "Description": ["ps_thread_stack is a stored function available with the Sys Schema that, for a given thread_id, returns all statements, stages, and events within the Performance Schema, as a JSON formatted stack.", "The boolean verbose argument specifies whether or not to include file:lineno information in the events."], "Examples": ["SELECT sys.ps_thread_stack(13, FALSE) AS thread_stack\\G\n*************************** 1. row ***************************\nthread_stack: {\"rankdir\": \"LR\",\"nodesep\": \"0.10\",\n  \"stack_created\": \"2022-03-28 16:01:06\",\n  \"mysql_version\": \"10.8.2-MariaDB\",\n  \"mysql_user\": \"msandbox@localhost\",\n  \"events\": []}\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/ps_thread_trx_info/"], "Title": ["ps_thread_trx_info"], "Feature": ["sys.ps_thread_trx_info(thread_id)\n"], "Description": ["ps_thread_trx_info is a stored function available with the Sys Schema.", "It returns a JSON object with information about the thread specified by the given thread_id. This information includes:", "the current transaction\nexecuted statements (derived from the Performance Schema events_transactions_current Table and the Performance Schema events_statements_history Table (full data will only returned if the consumers for those tables are enabled).\n", "The maximum length of the returned JSON object is determined by the value of the ps_thread_trx_info.max_length sys_config option (by default 65535). If the returned value exceeds this length, a JSON object error is returned."], "Examples": [], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/ps_trace_thread/"], "Title": ["ps_trace_thread"], "Feature": ["ps_trace_thread(thread_id, outfile, max_runtime, interval, start_fresh, auto_setup, debug) \n"], "Description": ["ps_trace_thread is a stored procedure available with the Sys Schema.", "Parameters:", "thread_id INT: The thread to trace.\noutfile VARCHAR(255): Name of the .dot file to be create.\nmax_runtime DECIMAL(20,2): Maximum time in seconds to collect data. Fractional seconds can be used, and NULL results in data being collected for the default sixty seconds.\ninterval DECIMAL(20,2): Time in seconds to sleep between data collection. Fractional seconds can be used, and NULL results in the sleep being the default one second.\nstart_fresh BOOLEAN: Whether to reset all Performance Schema data before tracing.\nauto_setup BOOLEAN: Whether to disable all other threads, enable all instruments and consumers, and reset the settings at the end of the run.\ndebug BOOLEAN: Whether to include file:lineno information in the graph. \n", "Dumps all Performance Schema data for an instrumented thread to a .dot formatted graph file (for use with the DOT graph description language). All returned result sets should be used for a complete graph.", "Session binary logging is disabled during execution, by adjusting the sql_log_bin session value (note the permissions required)."], "Examples": ["CALL sys.ps_trace_thread(25, CONCAT('/tmp/stack-', REPLACE(NOW(), ' ', '-'), '.dot'), \n  NULL, NULL, TRUE, TRUE, TRUE);\n\n--------------------+\n| summary            |\n+--------------------+\n| Disabled 0 threads |\n+--------------------+\n\n+---------------------------------------------+\n| Info                                        |\n+---------------------------------------------+\n| Data collection starting for THREAD_ID = 25 |\n+---------------------------------------------+\n\n+-----------------------------------------------------------+\n| Info                                                      |\n+-----------------------------------------------------------+\n| Stack trace written to /tmp/stack-2023-04-05-19:06:29.dot |\n+-----------------------------------------------------------+\n\n+-------------------------------------------------------------------+\n| Convert to PDF                                                    |\n+-------------------------------------------------------------------+\n| dot -Tpdf -o /tmp/stack_25.pdf /tmp/stack-2023-04-05-19:06:29.dot |\n+-------------------------------------------------------------------+\n\n+-------------------------------------------------------------------+\n| Convert to PNG                                                    |\n+-------------------------------------------------------------------+\n| dot -Tpng -o /tmp/stack_25.png /tmp/stack-2023-04-05-19:06:29.dot |\n+-------------------------------------------------------------------+\n\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/ps_truncate_all_tables/"], "Title": ["ps_truncate_all_tables"], "Feature": ["ps_truncate_all_tables(bool display)\n"], "Description": ["ps_truncate_all_tables is a stored procedure available with the Sys Schema.", "The procedure resets all aggregated instrumentation as a snapshot, producing a result set indicating the number of truncated tables. The boolean parameter display specifies whether to display each TRUNCATE TABLE statement before execution."], "Examples": ["CALL sys.ps_truncate_all_tables(false);\n+---------------------+\n| summary             |\n+---------------------+\n| Truncated 44 tables |\n+---------------------+\n", "CALL sys.ps_truncate_all_tables(true);\n+------------------------------------------------------------------+\n| status                                                           |\n+------------------------------------------------------------------+\n| Running: TRUNCATE TABLE performance_schema.events_stages_history |\n+------------------------------------------------------------------+\n\n...\n\n+------------------------------------------------------------------------------+\n| status                                                                       |\n+------------------------------------------------------------------------------+\n| Running: TRUNCATE TABLE performance_schema.table_lock_waits_summary_by_table |\n+------------------------------------------------------------------------------+\n\n+---------------------+\n| summary             |\n+---------------------+\n| Truncated 44 tables |\n+---------------------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/purge-binary-logs/"], "Title": ["PURGE BINARY LOGS"], "Feature": ["PURGE { BINARY | MASTER } LOGS\n    { TO 'log_name' | BEFORE datetime_expr }\n"], "Description": ["The PURGE BINARY LOGS statement deletes all the binary log\nfiles listed in the log index file prior to the specified log file name or\ndate. BINARY and MASTER are synonyms.\nDeleted log files also are removed from the list recorded in the index file, so\nthat the given log file becomes the first in the list.", "The datetime expression is in the format 'YYYY-MM-DD hh:mm:ss'. ", "If a replica is active but has yet to read from a binary log file you attempt to delete, the statement will fail with an error. However, if the replica is not connected and has yet to read from a log file you delete, the file will be deleted, but the replica will be unable to continue replicating once it connects again.\n", "This statement has no effect if the server was not started with the\n--log-bin option to enable binary logging.", "To list the binary log files on the server, use SHOW BINARY LOGS. To see which files they are reading, use SHOW SLAVE STATUS (or SHOW REPLICA STATUS from MariaDB 10.5.1). You can only delete the files that are older than the oldest file that is used by the slaves.", "To delete all binary log files, use RESET MASTER.\nTo move to a new log file (for example if you want to remove the current log file), use FLUSH LOGS before you execute PURGE LOGS.", "If the expire_logs_days server system variable is not set to 0, the server automatically deletes binary log files after the given number of days. From MariaDB 10.6, the binlog_expire_logs_seconds variable allows more precise control over binlog deletion, and takes precedence if both are non-zero.", "Requires the SUPER privilege or, from MariaDB 10.5.2, the BINLOG ADMIN privilege, to run."], "Examples": ["PURGE BINARY LOGS TO 'mariadb-bin.000063';\n", "PURGE BINARY LOGS BEFORE '2013-04-21';\n", "PURGE BINARY LOGS BEFORE '2013-04-22 09:55:22';\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/backup-lock/"], "Title": ["BACKUP LOCK"], "Feature": ["To lock a table:", "BACKUP LOCK table_name\n", "To unlock a table:", "BACKUP UNLOCK\n"], "Description": [], "Examples": [], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/quote_identifier/"], "Title": ["quote_identifier"], "Feature": ["sys.quote_identifier(str)\n"], "Description": ["quote_identifier is a stored function available with the Sys Schema.", "It quotes a string to produce a result that can be used as an identifier in an\nSQL statement. The string is returned enclosed by backticks (\"`\") and\nwith each instance of backtick (\"`\") doubled. If the argument\nis NULL, the return value is the word \"NULL\" without enclosing\nbackticks."], "Examples": ["SELECT sys.quote_identifier(\"Identifier with spaces\");\n+------------------------------------------------+\n| sys.quote_identifier(\"Identifier with spaces\") |\n+------------------------------------------------+\n| `Identifier with spaces`                       |\n+------------------------------------------------+\n\nSELECT sys.quote_identifier(\"Identifier` containing `backticks\");\n+-----------------------------------------------------------+\n| sys.quote_identifier(\"Identifier` containing `backticks\") |\n+-----------------------------------------------------------+\n| `Identifier`` containing ``backticks`                     |\n+-----------------------------------------------------------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/reset-replica/"], "Title": ["RESET REPLICA"], "Feature": ["RESET REPLICA [\"connection_name\"] [ALL]  [FOR CHANNEL \"connection_name\"] -- from MariaDB 10.5.1         \nRESET SLAVE [\"connection_name\"] [ALL]  [FOR CHANNEL \"connection_name\"]              \n"], "Description": ["RESET REPLICA (RESET SLAVE) makes the replica forget its replication position in the\nmaster's binary log. This statement is meant to be used for a clean\nstart. It deletes the master.info and relay-log.info files, all the\nrelay log files, and starts a new relay log file. To use RESET REPLICA,\nthe replica threads must be stopped (use STOP REPLICA if\nnecessary).", "Note: All relay log files are deleted, even if they have not been\ncompletely executed by the slave SQL thread. (This is a condition\nlikely to exist on a replication slave if you have issued a STOP REPLICA\nstatement or if the slave is highly loaded.)\n", "Note: RESET REPLICA does not reset the global\ngtid_slave_pos variable. This means that a replica\nserver configured with CHANGE MASTER TO MASTER_USE_GTID=slave_pos\nwill not receive events with GTIDs occurring before the state saved in\ngtid_slave_pos. If the intent is to reprocess these events,\ngtid_slave_pos must be manually reset, e.g. by executing\nset global gtid_slave_pos=\"\".\n", "Connection information stored in the master.info file is immediately\nreset using any values specified in the corresponding startup options.\nThis information includes values such as master host, master port,\nmaster user, and master password. If the replica SQL thread was in the\nmiddle of replicating temporary tables when it was stopped, and RESET\nREPLICA is issued, these replicated temporary tables are deleted on the\nslave.", "The ALL also resets the PORT, HOST, USER and PASSWORD parameters for the slave. If you are using a connection name, it will permanently delete it and it will not show up anymore in SHOW ALL REPLICAS STATUS.", "connection_name", "The connection_name option is used for multi-source replication.", "If there is only one nameless primary, or the default primary (as specified by the default_master_connection system variable) is intended, connection_name can be omitted. If provided, the RESET REPLICA statement will apply to the specified primary. connection_name is case-insensitive.", "MariaDB starting with 10.7.0The FOR CHANNEL keyword was added for MySQL compatibility. This is identical as\nusing the channel_name directly after RESET REPLICA.\n", "MariaDB starting with 11.6.0From MariaDB 11.6, RESET REPLICA resets the Master/Slave_last_event_time values (see SHOW REPLICA STATUS).\n"], "Examples": [], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/reset/"], "Title": ["RESET"], "Feature": ["RESET reset_option [, reset_option] ...\n"], "Description": ["The RESET statement is used to clear the state of various server\noperations. You must have the RELOAD privilege to execute\nRESET.", "RESET acts as a stronger version of the FLUSH statement.", "The different RESET options are:", "OptionDescription\nSLAVE [\"connection_name\"] [ALL]Deletes all relay logs from the slave and reset the replication position in the master binary log.\nMASTERDeletes all old binary logs, makes the binary index file (--log-bin-index) empty and creates a new binary log file.  This is useful when you want to reset the master to an initial state. If you want to just delete old, not used binary logs, you should use the PURGE BINARY LOGS command.\nQUERY CACHERemoves all queries from the query cache. See also FLUSH QUERY CACHE.\n\n"], "Examples": [], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/backup-stage/"], "Title": ["BACKUP STAGE"], "Feature": ["BACKUP STAGE [START | FLUSH | BLOCK_DDL | BLOCK_COMMIT | END ]\n", "In the following text, a transactional table means InnoDB or \"InnoDB-like engine with redo log that can lock redo purges and can be copied without locks by an outside process\"."], "Description": [], "Examples": [], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/set-character-set/"], "Title": ["SET CHARACTER SET"], "Feature": ["SET {CHARACTER SET | CHARSET}\n    {charset_name | DEFAULT}\n"], "Description": ["Sets the character_set_client and character_set_results session system variables to the specified character set and  collation_connection to the value of collation_database, which implicitly sets character_set_connection to the value of character_set_database.", "This maps all strings sent between the current client and the server with the given mapping."], "Examples": ["SHOW VARIABLES LIKE 'character_set\\_%';\n+--------------------------+--------+\n| Variable_name            | Value  |\n+--------------------------+--------+\n| character_set_client     | utf8   |\n| character_set_connection | utf8   |\n| character_set_database   | latin1 |\n| character_set_filesystem | binary |\n| character_set_results    | utf8   |\n| character_set_server     | latin1 |\n| character_set_system     | utf8   |\n+--------------------------+--------+\n\nSHOW VARIABLES LIKE 'collation%';\n+----------------------+-------------------+\n| Variable_name        | Value             |\n+----------------------+-------------------+\n| collation_connection | utf8_general_ci   |\n| collation_database   | latin1_swedish_ci |\n| collation_server     | latin1_swedish_ci |\n+----------------------+-------------------+\n\nSET CHARACTER SET utf8mb4;\n\nSHOW VARIABLES LIKE 'character_set\\_%';\n+--------------------------+---------+\n| Variable_name            | Value   |\n+--------------------------+---------+\n| character_set_client     | utf8mb4 |\n| character_set_connection | latin1  |\n| character_set_database   | latin1  |\n| character_set_filesystem | binary  |\n| character_set_results    | utf8mb4 |\n| character_set_server     | latin1  |\n| character_set_system     | utf8    |\n+--------------------------+---------+\n\nSHOW VARIABLES LIKE 'collation%';\n+----------------------+-------------------+\n| Variable_name        | Value             |\n+----------------------+-------------------+\n| collation_connection | latin1_swedish_ci |\n| collation_database   | latin1_swedish_ci |\n| collation_server     | latin1_swedish_ci |\n+----------------------+-------------------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/set-global-sql_slave_skip_counter/"], "Title": ["SET GLOBAL SQL_SLAVE_SKIP_COUNTER"], "Feature": ["SET GLOBAL sql_slave_skip_counter = N\n"], "Description": ["This statement skips the next N events from the primary. This is useful\nfor recovering from replication stops caused by a statement.", "If multi-source replication is used, this statement applies to the default connection. It could be necessary to change the value of the default_master_connection system variable.", "Note that, if the event is a transaction, the whole transaction will be skipped. With non-transactional engines, an event is always a single statement.", "This statement is valid only when the replica threads are not running.\nOtherwise, it produces an error.", "The statement does not automatically restart the replica threads."], "Examples": ["SHOW SLAVE STATUS \\G\n...\nSET GLOBAL sql_slave_skip_counter = 1;\nSTART SLAVE;\n", "SET @@default_master_connection = 'master_01';\nSET GLOBAL SQL_SLAVE_SKIP_COUNTER = 1;\nSTART SLAVE;\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/set-names/"], "Title": ["SET NAMES"], "Feature": ["SET NAMES {'charset_name'\n    [COLLATE 'collation_name'] | DEFAULT}\n"], "Description": ["Sets the character_set_client, character_set_connection, character_set_results and, implicitly, the collation_connection session system variables to the specified character set and collation.", "This determines which character set the client will use to send statements to the server, and the server will use for sending results back to the client. ", "ucs2, utf16, utf16le and utf32 are not valid character sets for SET NAMES, as they cannot be used as client character sets. ", "The collation clause is optional. If not defined (or if DEFAULT is specified), the default collation for the character set will be used.", "Quotes are optional for the character set or collation clauses."], "Examples": ["SELECT VARIABLE_NAME, SESSION_VALUE \n  FROM INFORMATION_SCHEMA.SYSTEM_VARIABLES WHERE \n  VARIABLE_NAME LIKE 'character_set_c%' OR \n  VARIABLE_NAME LIKE 'character_set_re%' OR \n  VARIABLE_NAME LIKE 'collation_c%';\n+--------------------------+-----------------+\n| VARIABLE_NAME            | SESSION_VALUE   |\n+--------------------------+-----------------+\n| CHARACTER_SET_RESULTS    | utf8            |\n| CHARACTER_SET_CONNECTION | utf8            |\n| CHARACTER_SET_CLIENT     | utf8            |\n| COLLATION_CONNECTION     | utf8_general_ci |\n+--------------------------+-----------------+\n\nSET NAMES big5;\n\nSELECT VARIABLE_NAME, SESSION_VALUE \n  FROM INFORMATION_SCHEMA.SYSTEM_VARIABLES WHERE \n  VARIABLE_NAME LIKE 'character_set_c%' OR \n  VARIABLE_NAME LIKE 'character_set_re%' OR \n  VARIABLE_NAME LIKE 'collation_c%';\n+--------------------------+-----------------+\n| VARIABLE_NAME            | SESSION_VALUE   |\n+--------------------------+-----------------+\n| CHARACTER_SET_RESULTS    | big5            |\n| CHARACTER_SET_CONNECTION | big5            |\n| CHARACTER_SET_CLIENT     | big5            |\n| COLLATION_CONNECTION     | big5_chinese_ci |\n+--------------------------+-----------------+\n\nSET NAMES 'latin1' COLLATE 'latin1_bin';\n\nSELECT VARIABLE_NAME, SESSION_VALUE \n  FROM INFORMATION_SCHEMA.SYSTEM_VARIABLES WHERE \n  VARIABLE_NAME LIKE 'character_set_c%' OR \n  VARIABLE_NAME LIKE 'character_set_re%' OR \n  VARIABLE_NAME LIKE 'collation_c%';\n+--------------------------+---------------+\n| VARIABLE_NAME            | SESSION_VALUE |\n+--------------------------+---------------+\n| CHARACTER_SET_RESULTS    | latin1        |\n| CHARACTER_SET_CONNECTION | latin1        |\n| CHARACTER_SET_CLIENT     | latin1        |\n| COLLATION_CONNECTION     | latin1_bin    |\n+--------------------------+---------------+\n\nSET NAMES DEFAULT;\n\nSELECT VARIABLE_NAME, SESSION_VALUE \n  FROM INFORMATION_SCHEMA.SYSTEM_VARIABLES WHERE \n  VARIABLE_NAME LIKE 'character_set_c%' OR \n  VARIABLE_NAME LIKE 'character_set_re%' OR \n  VARIABLE_NAME LIKE 'collation_c%';\n+--------------------------+-------------------+\n| VARIABLE_NAME            | SESSION_VALUE     |\n+--------------------------+-------------------+\n| CHARACTER_SET_RESULTS    | latin1            |\n| CHARACTER_SET_CONNECTION | latin1            |\n| CHARACTER_SET_CLIENT     | latin1            |\n| COLLATION_CONNECTION     | latin1_swedish_ci |\n+--------------------------+-------------------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/set-sql_log_bin/"], "Title": ["SET SQL_LOG_BIN"], "Feature": ["SET [SESSION] sql_log_bin = {0|1}\n"], "Description": ["Sets the sql_log_bin system variable, which disables or enables binary logging for the current connection, if the client has the SUPER privilege. The statement is refused with an\nerror if the client does not have that privilege.", "Before MariaDB 5.5 and before MySQL 5.6 one could also set sql_log_bin as a global variable. This was disabled as this was too dangerous as it could damage replication."], "Examples": [], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/set-statement/"], "Title": ["SET STATEMENT"], "Feature": ["SET STATEMENT var1=value1 [, var2=value2, ...] \n  FOR <statement>\n", "where varN is a system variable (list of allowed variables is provided below),  and valueN is a constant literal."], "Description": ["SET STATEMENT var1=value1 FOR stmt", "is roughly equivalent to", "SET @save_value=@@var1;\nSET SESSION var1=value1;\nstmt;\nSET SESSION var1=@save_value;\n", "The server parses the whole statement before executing it, so any variables set in this fashion that affect the parser may not have the expected effect. Examples include the charset variables, sql_mode=ansi_quotes, etc."], "Examples": ["SET STATEMENT max_statement_time=1000 FOR SELECT ... ;\n", "SET STATEMENT optimizer_switch='materialization=off' FOR SELECT ....;\n", "SET STATEMENT  join_cache_level=6, optimizer_switch='mrr=on'  FOR SELECT ...\n", "#USELESS STATEMENT\nSET STATEMENT sort_buffer_size = 100000 for SET SESSION sort_buffer_size = 200000;\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/set-variable/"], "Title": ["SET Variable"], "Feature": ["SET var_name = expr [, var_name = expr] ...\n"], "Description": ["The SET statement in stored programs is an extended version of the general SET statement. Referenced variables may be ones declared inside a stored program, global system variables, or user-defined variables.", "The SET statement in stored programs is implemented as part of the\npre-existing SET syntax. This allows an extended syntax of SET a=x, \nb=y, ... where different variable types (locally declared variables,\nglobal and session server variables, user-defined variables) can be\nmixed. This also allows combinations of local variables and some\noptions that make sense only for system variables; in that case, the\noptions are recognized but ignored.", "SET can be used with both local variables and user-defined variables.", "When setting several variables using the columns returned by a query, SELECT INTO should be preferred.", "To set many variables to the same value, the LAST_VALUE( ) function can be used.", "Below is an example of how a user-defined variable may be set:", "SET @x = 1;\n"], "Examples": [], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/set/"], "Title": ["SET"], "Feature": ["SET variable_assignment [, variable_assignment] ...\n\nvariable_assignment:\n      user_var_name = expr\n    | [GLOBAL | SESSION] system_var_name = expr\n    | [@@global. | @@session. | @@]system_var_name = expr\n", "One can also set a user variable in any expression with this syntax:", "user_var_name:= expr\n"], "Description": ["The SET statement assigns values to different types of\nvariables that affect the operation of the server or your client. Older\nversions of MySQL employed SET OPTION, but this syntax was\ndeprecated in favor of SET without OPTION, and was removed in MariaDB 10.0.", "Changing a system variable by using the SET statement does not make the change permanently. To do so, the change must be made in a configuration file.", "For setting variables on a per-query basis, see SET STATEMENT.", "See SHOW VARIABLES for documentation on viewing server system variables.", "See Server System Variables for a list of all the system variables.", "GLOBAL / SESSION", "When setting a system variable, the scope can be specified as either GLOBAL or SESSION.", "A global variable change affects all new sessions. It does not affect any currently open sessions, including the one that made the change. ", "A session variable change affects the current session only.", "If the variable has a session value, not specifying either GLOBAL or SESSION will be the same as specifying SESSION. If the variable only has a global value, not specifying GLOBAL or SESSION will apply to the change to the global value.", "DEFAULT", "Setting a global variable to DEFAULT will restore it to the server default, and setting a session variable to DEFAULT will restore it to the current global value."], "Examples": ["SELECT VARIABLE_NAME, SESSION_VALUE, GLOBAL_VALUE FROM\n INFORMATION_SCHEMA.SYSTEM_VARIABLES WHERE \n  VARIABLE_NAME IN ('max_error_count', 'skip_parallel_replication', 'innodb_sync_spin_loops');\n+---------------------------+---------------+--------------+\n| VARIABLE_NAME             | SESSION_VALUE | GLOBAL_VALUE |\n+---------------------------+---------------+--------------+\n| MAX_ERROR_COUNT           | 64            | 64           |\n| SKIP_PARALLEL_REPLICATION | OFF           | NULL         |\n| INNODB_SYNC_SPIN_LOOPS    | NULL          | 30           |\n+---------------------------+---------------+--------------+\n", "SET max_error_count=128;Query OK, 0 rows affected (0.000 sec)\n\nSET skip_parallel_replication=ON;Query OK, 0 rows affected (0.000 sec)\n\nSET innodb_sync_spin_loops=60;\nERROR 1229 (HY000): Variable 'innodb_sync_spin_loops' is a GLOBAL variable \n  and should be set with SET GLOBAL\n\nSELECT VARIABLE_NAME, SESSION_VALUE, GLOBAL_VALUE FROM\n INFORMATION_SCHEMA.SYSTEM_VARIABLES WHERE \n  VARIABLE_NAME IN ('max_error_count', 'skip_parallel_replication', 'innodb_sync_spin_loops');\n+---------------------------+---------------+--------------+\n| VARIABLE_NAME             | SESSION_VALUE | GLOBAL_VALUE |\n+---------------------------+---------------+--------------+\n| MAX_ERROR_COUNT           | 128           | 64           |\n| SKIP_PARALLEL_REPLICATION | ON            | NULL         |\n| INNODB_SYNC_SPIN_LOOPS    | NULL          | 30           |\n+---------------------------+---------------+--------------+\n", "SET GLOBAL max_error_count=256;\n\nSET GLOBAL skip_parallel_replication=ON;\nERROR 1228 (HY000): Variable 'skip_parallel_replication' is a SESSION variable \n  and can't be used with SET GLOBAL\n\nSET GLOBAL innodb_sync_spin_loops=120;\n\nSELECT VARIABLE_NAME, SESSION_VALUE, GLOBAL_VALUE FROM\n INFORMATION_SCHEMA.SYSTEM_VARIABLES WHERE \n  VARIABLE_NAME IN ('max_error_count', 'skip_parallel_replication', 'innodb_sync_spin_loops');\n+---------------------------+---------------+--------------+\n| VARIABLE_NAME             | SESSION_VALUE | GLOBAL_VALUE |\n+---------------------------+---------------+--------------+\n| MAX_ERROR_COUNT           | 128           | 256          |\n| SKIP_PARALLEL_REPLICATION | ON            | NULL         |\n| INNODB_SYNC_SPIN_LOOPS    | NULL          | 120          |\n+---------------------------+---------------+--------------+\n", "SHOW VARIABLES LIKE 'max_error_count';\n+-----------------+-------+\n| Variable_name   | Value |\n+-----------------+-------+\n| max_error_count | 128   |\n+-----------------+-------+\n\nSHOW VARIABLES LIKE 'skip_parallel_replication';\n+---------------------------+-------+\n| Variable_name             | Value |\n+---------------------------+-------+\n| skip_parallel_replication | ON    |\n+---------------------------+-------+\n\nSHOW VARIABLES LIKE 'innodb_sync_spin_loops';\n+------------------------+-------+\n| Variable_name          | Value |\n+------------------------+-------+\n| innodb_sync_spin_loops | 120   |\n+------------------------+-------+\n", "SELECT (@a:=1);\n+---------+\n| (@a:=1) |\n+---------+\n|       1 |\n+---------+\n\nSELECT @a;\n+------+\n| @a   |\n+------+\n|    1 |\n+------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-analyze/"], "Title": ["SHOW ANALYZE"], "Feature": ["SHOW ANALYZE [FORMAT=JSON] FOR <connection_id>;\n"], "Description": ["SHOW ANALYZE allows one to retrieve ANALYZE-like output from a currently running statement. The command", "SHOW ANALYZE [FORMAT=JSON] FOR <connection_id>;\n", "connects to the query running in connection connection_id, gets information about the query plan it is executing, also gets information about the runtime statistics of the execution so far and returns it in a format similar to ANALYZE [FORMAT=JSON] output.", "This is similar to the SHOW EXPLAIN command, the difference being that SHOW ANALYZE also produces runtime statistics information."], "Examples": ["explain format=json\nselect sum(orders.amount)\nfrom\n  customer join orders on customer.cust_id=orders.cust_id\nwhere\n  customer.status='GOLD';\n", "+------+-------------+----------+------+---------------+---------+---------+------------------+--------+-------------+\n| id   | select_type | table    | type | possible_keys | key     | key_len | ref              | rows   | Extra       |\n+------+-------------+----------+------+---------------+---------+---------+------------------+--------+-------------+\n|    1 | SIMPLE      | customer | ALL  | PRIMARY       | NULL    | NULL    | NULL             | 199786 | Using where |\n|    1 | SIMPLE      | orders   | ref  | cust_id       | cust_id | 5       | customer.cust_id | 1      |             |\n+------+-------------+----------+------+---------------+---------+---------+------------------+--------+-------------+\n", "show analyze format=json for 3;\n| {\n  \"r_query_time_in_progress_ms\": 32138,\n", "  \"query_block\": {\n    \"select_id\": 1,\n    \"r_loops\": 1,\n    \"nested_loop\": [\n      {\n        \"table\": {\n          \"table_name\": \"customer\",\n          \"access_type\": \"ALL\",\n          \"possible_keys\": [\"PRIMARY\"],\n          \"r_loops\": 1,\n          \"rows\": 199786,\n          \"r_rows\": 110544,\n", "          \"filtered\": 100,\n          \"r_filtered\": 9.538283398,\n          \"attached_condition\": \"customer.`status` = 'GOLD'\"\n        }\n      },\n      {\n        \"table\": {\n          \"table_name\": \"orders\",\n          \"access_type\": \"ref\",\n          \"possible_keys\": [\"cust_id\"],\n          \"key\": \"cust_id\",\n          \"key_length\": \"5\",\n          \"used_key_parts\": [\"cust_id\"],\n          \"ref\": [\"test.customer.cust_id\"],\n          \"r_loops\": 10544,\n          \"rows\": 1,\n          \"r_rows\": 99.99222307,\n", "          \"filtered\": 100,\n          \"r_filtered\": 100\n        }\n      }\n    ]\n  }\n}\n", "Connection 1> ANALYZE SELECT ... ; \n", "Connection 2> SHOW ANALYZE FORMAT=JSON FOR <connection_id>;\nANALYZE\n{\n  \"r_query_time_in_progress_ms\": 30727,\n  \"query_block\": {\n    \"select_id\": 1,\n    \"r_loops\": 1,\n    \"nested_loop\": [\n      {\n        \"table\": {\n          \"table_name\": \"customer\",\n          \"access_type\": \"ALL\",\n          \"possible_keys\": [\"PRIMARY\"],\n          \"r_loops\": 1,\n          \"rows\": 199786,\n          \"r_rows\": 109994,\n          \"r_table_time_ms\": 232.699,\n          \"r_other_time_ms\": 46.355,\n", "          \"filtered\": 100,\n          \"r_filtered\": 9.085950143,\n          \"attached_condition\": \"customer.`status` = 'GOLD'\"\n        }\n      },\n      {\n        \"table\": {\n          \"table_name\": \"orders\",\n          \"access_type\": \"ref\",\n          \"possible_keys\": [\"cust_id\"],\n          \"key\": \"cust_id\",\n          \"key_length\": \"5\",\n          \"used_key_parts\": [\"cust_id\"],\n          \"ref\": [\"test.customer.cust_id\"],\n          \"r_loops\": 9994,\n          \"rows\": 1,\n          \"r_rows\": 99.99779868,\n          \"r_table_time_ms\": 29460.609,\n          \"r_other_time_ms\": 986.842,\n", "          \"filtered\": 100,\n          \"r_filtered\": 100\n        }\n      }\n    ]\n  }\n}\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-authors/"], "Title": ["SHOW AUTHORS"], "Feature": ["SHOW AUTHORS\n"], "Description": ["The SHOW AUTHORS statement displays information about the\npeople who work on MariaDB. For each author, it displays Name, Location, and\nComment values. All columns are encoded as latin1.", "These include:", "First the active people in MariaDB are listed.\nThen the active people in MySQL.\nLast the people that have contributed to MariaDB/MySQL in the past.\n", "The order is somewhat related to importance of the contribution given to the MariaDB project, but this is not 100% accurate. There is still room for improvement and debate..."], "Examples": ["SHOW AUTHORS\\G\n*************************** 1. row ***************************\n    Name: Michael (Monty) Widenius\nLocation: Tusby, Finland\n Comment: Lead developer and main author\n*************************** 2. row ***************************\n    Name: Sergei Golubchik\nLocation: Kerpen, Germany\n Comment: Architect, Full-text search, precision math, plugin framework, merges etc\n*************************** 3. row ***************************\n    Name: Igor Babaev\nLocation: Bellevue, USA\n Comment: Optimizer, keycache, core work\n*************************** 4. row ***************************\n    Name: Sergey Petrunia\nLocation: St. Petersburg, Russia\n Comment: Optimizer\n*************************** 5. row ***************************\n    Name: Oleksandr Byelkin\nLocation: Lugansk, Ukraine\n Comment: Query Cache (4.0), Subqueries (4.1), Views (5.0)\n*************************** 6. row ***************************\n    Name: Timour Katchaounov\nLocation: Sofia , Bulgaria\n Comment: Optimizer\n*************************** 7. row ***************************\n    Name: Kristian Nielsen\nLocation: Copenhagen, Denmark\n Comment: Replication, Async client prototocol, General buildbot stuff\n*************************** 8. row ***************************\n    Name: Alexander (Bar) Barkov\nLocation: Izhevsk, Russia\n Comment: Unicode and character sets\n*************************** 9. row ***************************\n    Name: Alexey Botchkov (Holyfoot)\nLocation: Izhevsk, Russia\n Comment: GIS extensions, embedded server, precision math\n*************************** 10. row ***************************\n    Name: Daniel Bartholomew\nLocation: Raleigh, USA\n Comment: MariaDB documentation, Buildbot, releases\n*************************** 11. row ***************************\n    Name: Colin Charles\nLocation: Selangor, Malesia\n Comment: MariaDB documentation, talks at a LOT of conferences\n*************************** 12. row ***************************\n    Name: Sergey Vojtovich\nLocation: Izhevsk, Russia\n Comment: initial implementation of plugin architecture, maintained native storage engines (MyISAM, MEMORY, ARCHIVE, etc), rewrite of table cache\n*************************** 13. row ***************************\n    Name: Vladislav Vaintroub\nLocation: Mannheim, Germany\n Comment: MariaDB Java connector, new thread pool, Windows optimizations\n*************************** 14. row ***************************\n    Name: Elena Stepanova\nLocation: Sankt Petersburg, Russia\n Comment: QA, test cases\n*************************** 15. row ***************************\n    Name: Georg Richter\nLocation: Heidelberg, Germany\n Comment: New LGPL C connector, PHP connector\n*************************** 16. row ***************************\n    Name: Jan Lindstr\u00f6m\nLocation: Yl\u00e4mylly, Finland\n Comment: Working on InnoDB\n*************************** 17. row ***************************\n    Name: Lixun Peng\nLocation: Hangzhou, China\n Comment: Multi Source replication\n*************************** 18. row ***************************\n    Name: Olivier Bertrand\nLocation: Paris, France\n Comment: CONNECT storage engine\n*************************** 19. row ***************************\n    Name: Kentoku Shiba\nLocation: Tokyo, Japan\n Comment: Spider storage engine, metadata_lock_info Information schema\n*************************** 20. row ***************************\n    Name: Percona\nLocation: CA, USA\n Comment: XtraDB, microslow patches, extensions to slow log\n*************************** 21. row ***************************\n    Name: Vicentiu Ciorbaru\nLocation: Bucharest, Romania\n Comment: Roles\n*************************** 22. row ***************************\n    Name: Sudheera Palihakkara\nLocation: \n Comment: PCRE Regular Expressions\n*************************** 23. row ***************************\n    Name: Pavel Ivanov\nLocation: USA\n Comment: Some patches and bug fixes\n*************************** 24. row ***************************\n    Name: Konstantin Osipov\nLocation: Moscow, Russia\n Comment: Prepared statements (4.1), Cursors (5.0), GET_LOCK (10.0)\n*************************** 25. row ***************************\n    Name: Ian Gilfillan\nLocation: South Africa\n Comment: MariaDB documentation\n*************************** 26. row ***************************\n    Name: Federico Razolli\nLocation: Italy\n Comment: MariaDB documentation Italian translation\n*************************** 27. row ***************************\n    Name: Guilhem Bichot\nLocation: Bordeaux, France\n Comment: Replication (since 4.0)\n*************************** 28. row ***************************\n    Name: Andrei Elkin\nLocation: Espoo, Finland\n Comment: Replication\n*************************** 29. row ***************************\n    Name: Dmitri Lenev\nLocation: Moscow, Russia\n Comment: Time zones support (4.1), Triggers (5.0)\n*************************** 30. row ***************************\n    Name: Marc Alff\nLocation: Denver, CO, USA\n Comment: Signal, Resignal, Performance schema\n*************************** 31. row ***************************\n    Name: Mikael Ronstr\u00f6m\nLocation: Stockholm, Sweden\n Comment: NDB Cluster, Partitioning, online alter table\n*************************** 32. row ***************************\n    Name: Ingo Str\u00fcwing\nLocation: Berlin, Germany\n Comment: Bug fixing in MyISAM, Merge tables etc\n*************************** 33. row ***************************\n    Name: Marko M\u00e4kel\u00e4\nLocation: Helsinki, Finland\n Comment: InnoDB core developer\n...\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-binary-logs/"], "Title": ["SHOW BINARY LOGS"], "Feature": ["SHOW BINARY LOGS\nSHOW MASTER LOGS\n"], "Description": ["Lists the binary log files on the server. This statement is used as part of the\nprocedure described in PURGE BINARY LOGS, that shows how to\ndetermine which logs can be purged.", "This statement requires the SUPER privilege, the REPLICATION_CLIENT privilege, or, from MariaDB 10.5.2, the BINLOG MONITOR privilege."], "Examples": ["SHOW BINARY LOGS;\n+--------------------+-----------+\n| Log_name           | File_size |\n+--------------------+-----------+\n| mariadb-bin.000001 |     19039 |\n| mariadb-bin.000002 |    717389 |\n| mariadb-bin.000003 |       300 |\n| mariadb-bin.000004 |       333 |\n| mariadb-bin.000005 |       899 |\n| mariadb-bin.000006 |       125 |\n| mariadb-bin.000007 |     18907 |\n| mariadb-bin.000008 |     19530 |\n| mariadb-bin.000009 |       151 |\n| mariadb-bin.000010 |       151 |\n| mariadb-bin.000011 |       125 |\n| mariadb-bin.000012 |       151 |\n| mariadb-bin.000013 |       151 |\n| mariadb-bin.000014 |       125 |\n| mariadb-bin.000015 |       151 |\n| mariadb-bin.000016 |       314 |\n+--------------------+-----------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-binlog-events/"], "Title": ["SHOW BINLOG EVENTS"], "Feature": ["SHOW BINLOG EVENTS\n   [IN 'log_name'] [FROM pos] [LIMIT [offset,] row_count]\n"], "Description": ["Shows the events in the binary log. If you do not specify 'log_name',\nthe first binary log is displayed.", "Requires the BINLOG MONITOR privilege (>= MariaDB 10.5.2) or the REPLICATION SLAVE privilege (<= MariaDB 10.5.1)."], "Examples": ["SHOW BINLOG EVENTS IN 'mysql_sandbox10019-bin.000002';\n+-------------------------------+-----+-------------------+-----------+-------------+------------------------------------------------+\n| Log_name                      | Pos | Event_type        | Server_id | End_log_pos | Info                                           |\n+-------------------------------+-----+-------------------+-----------+-------------+------------------------------------------------+\n| mysql_sandbox10019-bin.000002 |   4 | Format_desc       |         1 |         248 | Server ver: 10.0.19-MariaDB-log, Binlog ver: 4 |\n| mysql_sandbox10019-bin.000002 | 248 | Gtid_list         |         1 |         273 | []                                             |\n| mysql_sandbox10019-bin.000002 | 273 | Binlog_checkpoint |         1 |         325 | mysql_sandbox10019-bin.000002                  |\n| mysql_sandbox10019-bin.000002 | 325 | Gtid              |         1 |         363 | GTID 0-1-1                                     |\n| mysql_sandbox10019-bin.000002 | 363 | Query             |         1 |         446 | CREATE DATABASE blog                           |\n| mysql_sandbox10019-bin.000002 | 446 | Gtid              |         1 |         484 | GTID 0-1-2                                     |\n| mysql_sandbox10019-bin.000002 | 484 | Query             |         1 |         571 | use `blog`; CREATE TABLE bb (id INT)           |\n+-------------------------------+-----+-------------------+-----------+-------------+------------------------------------------------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-character-set/"], "Title": ["SHOW CHARACTER SET"], "Feature": ["SHOW CHARACTER SET\n    [LIKE 'pattern' | WHERE expr]\n"], "Description": ["The SHOW CHARACTER SET statement shows all available character sets.  The LIKE clause, if present on its own, indicates which character\nset names to match. The WHERE and LIKE clauses can be given to select rows using more general conditions, as discussed in Extended SHOW.", "The same information can be queried from the Information Schema CHARACTER_SETS table.", "See Setting Character Sets and Collations for details on specifying the character set at the server, database, table and column levels."], "Examples": ["SHOW CHARACTER SET LIKE 'latin%';\n+---------+-----------------------------+-------------------+--------+\n| Charset | Description                 | Default collation | Maxlen |\n+---------+-----------------------------+-------------------+--------+\n| latin1  | cp1252 West European        | latin1_swedish_ci |      1 |\n| latin2  | ISO 8859-2 Central European | latin2_general_ci |      1 |\n| latin5  | ISO 8859-9 Turkish          | latin5_turkish_ci |      1 |\n| latin7  | ISO 8859-13 Baltic          | latin7_general_ci |      1 |\n+---------+-----------------------------+-------------------+--------+\n", "SHOW CHARACTER SET WHERE Maxlen LIKE '2';\n+---------+---------------------------+-------------------+--------+\n| Charset | Description               | Default collation | Maxlen |\n+---------+---------------------------+-------------------+--------+\n| big5    | Big5 Traditional Chinese  | big5_chinese_ci   |      2 |\n| sjis    | Shift-JIS Japanese        | sjis_japanese_ci  |      2 |\n| euckr   | EUC-KR Korean             | euckr_korean_ci   |      2 |\n| gb2312  | GB2312 Simplified Chinese | gb2312_chinese_ci |      2 |\n| gbk     | GBK Simplified Chinese    | gbk_chinese_ci    |      2 |\n| ucs2    | UCS-2 Unicode             | ucs2_general_ci   |      2 |\n| cp932   | SJIS for Windows Japanese | cp932_japanese_ci |      2 |\n+---------+---------------------------+-------------------+--------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-client-statistics/"], "Title": ["SHOW CLIENT_STATISTICS"], "Feature": ["SHOW CLIENT_STATISTICS\n"], "Description": ["The SHOW CLIENT_STATISTICS statement is part of the User Statistics feature. It was removed as a separate statement in MariaDB 10.1.1, but effectively replaced by the generic SHOW information_schema_table statement. The information_schema.CLIENT_STATISTICS table holds statistics about client connections.", "The userstat system variable must be set to 1 to activate this feature. See the User Statistics and information_schema.CLIENT_STATISTICS articles for more information."], "Examples": ["SHOW CLIENT_STATISTICS\\G\n*************************** 1. row ***************************\n                Client: localhost\n     Total_connections: 35\nConcurrent_connections: 0\n        Connected_time: 708\n             Busy_time: 2.5557979999999985\n              Cpu_time: 0.04123740000000002\n        Bytes_received: 3883\n            Bytes_sent: 21595\n  Binlog_bytes_written: 0\n             Rows_read: 18\n             Rows_sent: 115\n          Rows_deleted: 0\n         Rows_inserted: 0\n          Rows_updated: 0\n       Select_commands: 70\n       Update_commands: 0\n        Other_commands: 0\n   Commit_transactions: 1\n Rollback_transactions: 0\n    Denied_connections: 0\n      Lost_connections: 0\n         Access_denied: 0\n         Empty_queries: 35\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-collation/"], "Title": ["SHOW COLLATION"], "Feature": ["SHOW COLLATION\n    [LIKE 'pattern' | WHERE expr]\n"], "Description": ["The output from SHOW COLLATION includes all available\ncollations. The LIKE clause, if present on its own, indicates which collation names to match. The WHERE and LIKE clauses can be given to select rows using more general conditions, as discussed in Extended SHOW.", "The same information can be queried from the Information Schema COLLATIONS table.", "See Setting Character Sets and Collations for details on specifying the collation at the server, database, table and column levels."], "Examples": ["SHOW COLLATION LIKE 'latin1%';\n+-------------------------+---------+------+---------+----------+---------+\n| Collation               | Charset | Id   | Default | Compiled | Sortlen |\n+-------------------------+---------+------+---------+----------+---------+\n| latin1_german1_ci       | latin1  |    5 |         | Yes      |       1 |\n| latin1_swedish_ci       | latin1  |    8 | Yes     | Yes      |       1 |\n| latin1_danish_ci        | latin1  |   15 |         | Yes      |       1 |\n| latin1_german2_ci       | latin1  |   31 |         | Yes      |       2 |\n| latin1_bin              | latin1  |   47 |         | Yes      |       1 |\n| latin1_general_ci       | latin1  |   48 |         | Yes      |       1 |\n| latin1_general_cs       | latin1  |   49 |         | Yes      |       1 |\n| latin1_spanish_ci       | latin1  |   94 |         | Yes      |       1 |\n| latin1_swedish_nopad_ci | latin1  | 1032 |         | Yes      |       1 |\n| latin1_nopad_bin        | latin1  | 1071 |         | Yes      |       1 |\n+-------------------------+---------+------+---------+----------+---------+\n", "SHOW COLLATION WHERE Sortlen LIKE '8' AND Charset LIKE 'utf8mb4';\n+------------------------------+---------+------+---------+----------+---------+\n| Collation                    | Charset | Id   | Default | Compiled | Sortlen |\n+------------------------------+---------+------+---------+----------+---------+\n| utf8mb4_unicode_ci           | utf8mb4 |  224 |         | Yes      |       8 |\n| utf8mb4_icelandic_ci         | utf8mb4 |  225 |         | Yes      |       8 |\n| utf8mb4_latvian_ci           | utf8mb4 |  226 |         | Yes      |       8 |\n| utf8mb4_romanian_ci          | utf8mb4 |  227 |         | Yes      |       8 |\n| utf8mb4_slovenian_ci         | utf8mb4 |  228 |         | Yes      |       8 |\n| utf8mb4_polish_ci            | utf8mb4 |  229 |         | Yes      |       8 |\n| utf8mb4_estonian_ci          | utf8mb4 |  230 |         | Yes      |       8 |\n| utf8mb4_spanish_ci           | utf8mb4 |  231 |         | Yes      |       8 |\n| utf8mb4_swedish_ci           | utf8mb4 |  232 |         | Yes      |       8 |\n| utf8mb4_turkish_ci           | utf8mb4 |  233 |         | Yes      |       8 |\n| utf8mb4_czech_ci             | utf8mb4 |  234 |         | Yes      |       8 |\n| utf8mb4_danish_ci            | utf8mb4 |  235 |         | Yes      |       8 |\n| utf8mb4_lithuanian_ci        | utf8mb4 |  236 |         | Yes      |       8 |\n| utf8mb4_slovak_ci            | utf8mb4 |  237 |         | Yes      |       8 |\n| utf8mb4_spanish2_ci          | utf8mb4 |  238 |         | Yes      |       8 |\n| utf8mb4_roman_ci             | utf8mb4 |  239 |         | Yes      |       8 |\n| utf8mb4_persian_ci           | utf8mb4 |  240 |         | Yes      |       8 |\n| utf8mb4_esperanto_ci         | utf8mb4 |  241 |         | Yes      |       8 |\n| utf8mb4_hungarian_ci         | utf8mb4 |  242 |         | Yes      |       8 |\n| utf8mb4_sinhala_ci           | utf8mb4 |  243 |         | Yes      |       8 |\n| utf8mb4_german2_ci           | utf8mb4 |  244 |         | Yes      |       8 |\n| utf8mb4_croatian_mysql561_ci | utf8mb4 |  245 |         | Yes      |       8 |\n| utf8mb4_unicode_520_ci       | utf8mb4 |  246 |         | Yes      |       8 |\n| utf8mb4_vietnamese_ci        | utf8mb4 |  247 |         | Yes      |       8 |\n| utf8mb4_croatian_ci          | utf8mb4 |  608 |         | Yes      |       8 |\n| utf8mb4_myanmar_ci           | utf8mb4 |  609 |         | Yes      |       8 |\n| utf8mb4_unicode_nopad_ci     | utf8mb4 | 1248 |         | Yes      |       8 |\n| utf8mb4_unicode_520_nopad_ci | utf8mb4 | 1270 |         | Yes      |       8 |\n+------------------------------+---------+------+---------+----------+---------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-columns/"], "Title": ["SHOW COLUMNS"], "Feature": ["SHOW [FULL] {COLUMNS | FIELDS} FROM tbl_name [FROM db_name]\n    [LIKE 'pattern' | WHERE expr]\n"], "Description": ["SHOW COLUMNS displays information about the columns in a\ngiven table. It also works for views. The LIKE clause, if\npresent on its own, indicates which column names to match. The WHERE and LIKE clauses can be given to select rows using more general conditions, as discussed in Extended SHOW.", "If the data types differ from what you expect them to be based on a\nCREATE TABLE statement, note that MariaDB sometimes changes\ndata types when you create or alter a table. The conditions under which this\noccurs are described in the Silent Column Changes article.", "The FULL keyword causes the output to include the column\ncollation and comments, as well as the privileges you have for each column.", "You can use db_name.tbl_name as an alternative to the\ntbl_name FROM db_name syntax. In other words, these two\nstatements are equivalent:", "SHOW COLUMNS FROM mytable FROM mydb;\nSHOW COLUMNS FROM mydb.mytable;\n", "SHOW COLUMNS displays the following values for each table\ncolumn:", "Field indicates the column name.", "Type indicates the column data type.", "Collation indicates the collation for non-binary string columns, or\nNULL for other columns. This value is displayed only if you use the\nFULL keyword.", "The Null field contains YES if NULL values can be stored in the column,\nNO if not.", "The Key field indicates whether the column is indexed:", "If Key is empty, the column either is not indexed or is indexed only as a\n  secondary column in a multiple-column, non-unique index.\nIf Key is PRI, the column is a PRIMARY KEY or\n  is one of the columns in a multiple-column PRIMARY KEY.\nIf Key is UNI, the column is the first column of a unique-valued\n  index that cannot contain NULL values.\nIf Key is MUL, multiple occurrences of a given value are allowed\n  within the column. The column is the first column of a non-unique index or a\n  unique-valued index that can contain NULL values.\n", "If more than one of the Key values applies to a given column of a\ntable, Key displays the one with the highest priority, in the order\nPRI, UNI, MUL.", "A UNIQUE index may be displayed as PRI if\nit cannot contain NULL values and there is no\nPRIMARY KEY in the table. A UNIQUE index\nmay display as MUL if several columns form a composite\nUNIQUE index; although the combination of the columns is\nunique, each column can still hold multiple occurrences of a given value.", "The Default field indicates the default value that is assigned to the\ncolumn.", "The Extra field contains any additional information that is available about a given column.", "ValueDescription\nAUTO_INCREMENTThe column was created with the AUTO_INCREMENT keyword.\nPERSISTENTThe column was created with the PERSISTENT keyword. (New in 5.3)\nVIRTUALThe column was created with the VIRTUAL keyword. (New in 5.3)\non update CURRENT_TIMESTAMPThe column is a TIMESTAMP column that is automatically updated on INSERT and UPDATE.\n\n", "Privileges indicates the privileges you have for the column. This\nvalue is displayed only if you use the FULL keyword.", "Comment indicates any comment the column has. This value is displayed\nonly if you use the FULL keyword.", "SHOW FIELDS is a synonym for\nSHOW COLUMNS. Also DESCRIBE and EXPLAIN can be used as shortcuts.", "You can also list a table's columns with: ", "mariadb-show db_name tbl_name\n", "See the mariadb-show command for more details.", "The DESCRIBE statement provides information similar to SHOW COLUMNS. The information_schema.COLUMNS table provides similar, but more complete, information.", "The SHOW CREATE TABLE, SHOW TABLE STATUS, and SHOW INDEX statements also provide information about tables."], "Examples": ["SHOW COLUMNS FROM city;\n+------------+----------+------+-----+---------+----------------+\n| Field      | Type     | Null | Key | Default | Extra          |\n+------------+----------+------+-----+---------+----------------+\n| Id         | int(11)  | NO   | PRI | NULL    | auto_increment |\n| Name       | char(35) | NO   |     |         |                |\n| Country    | char(3)  | NO   | UNI |         |                |\n| District   | char(20) | YES  | MUL |         |                |\n| Population | int(11)  | NO   |     | 0       |                |\n+------------+----------+------+-----+---------+----------------+\n", "SHOW COLUMNS FROM employees WHERE Type LIKE 'Varchar%';\n+---------------+-------------+------+-----+---------+-------+\n| Field         | Type        | Null | Key | Default | Extra |\n+---------------+-------------+------+-----+---------+-------+\n| first_name    | varchar(30) | NO   | MUL | NULL    |       |\n| last_name     | varchar(40) | NO   |     | NULL    |       |\n| position      | varchar(25) | NO   |     | NULL    |       |\n| home_address  | varchar(50) | NO   |     | NULL    |       |\n| home_phone    | varchar(12) | NO   |     | NULL    |       |\n| employee_code | varchar(25) | NO   | UNI | NULL    |       |\n+---------------+-------------+------+-----+---------+-------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-contributors/"], "Title": ["SHOW CONTRIBUTORS"], "Feature": ["SHOW CONTRIBUTORS"], "Description": ["The SHOW CONTRIBUTORS statement displays information about\nthe companies and people who financially contribute to MariaDB. For each contributor, it displays Name, Location, and Comment values. All columns are encoded as latin1.", "It displays all members and sponsors of the MariaDB Foundation as well as other financial contributors."], "Examples": ["SHOW CONTRIBUTORS;\n+---------------------+-------------------------------+-------------------------------------------------------------+\n| Name                | Location                      | Comment                                                     |\n+---------------------+-------------------------------+-------------------------------------------------------------+\n| Alibaba Cloud       | https://www.alibabacloud.com/ | Platinum Sponsor of the MariaDB Foundation                  |\n| Tencent Cloud       | https://cloud.tencent.com     | Platinum Sponsor of the MariaDB Foundation                  |\n| Microsoft           | https://microsoft.com/        | Platinum Sponsor of the MariaDB Foundation                  |\n| MariaDB Corporation | https://mariadb.com           | Founding member, Platinum Sponsor of the MariaDB Foundation |\n| ServiceNow          | https://servicenow.com        | Platinum Sponsor of the MariaDB Foundation                  |\n| Intel               | https://www.intel.com         | Platinum Sponsor of the MariaDB Foundation                  |\n| SIT                 | https://sit.org               | Platinum Sponsor of the MariaDB Foundation                  |\n| Visma               | https://visma.com             | Gold Sponsor of the MariaDB Foundation                      |\n| DBS                 | https://dbs.com               | Gold Sponsor of the MariaDB Foundation                      |\n| IBM                 | https://www.ibm.com           | Gold Sponsor of the MariaDB Foundation                      |\n| Automattic          | https://automattic.com        | Silver Sponsor of the MariaDB Foundation                    |\n| Percona             | https://www.percona.com/      | Sponsor of the MariaDB Foundation                           |\n| Galera Cluster      | https://galeracluster.com     | Sponsor of the MariaDB Foundation                           |\n| Google              | USA                           | Sponsoring encryption, parallel replication and GTID        |\n| Facebook            | USA                           | Sponsoring non-blocking API, LIMIT ROWS EXAMINED etc        |\n| Ronald Bradford     | Brisbane, Australia           | EFF contribution for UC2006 Auction                         |\n| Sheeri Kritzer      | Boston, Mass. USA             | EFF contribution for UC2006 Auction                         |\n| Mark Shuttleworth   | London, UK.                   | EFF contribution for UC2006 Auction                         |\n+---------------------+-------------------------------+-------------------------------------------------------------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/binlog/"], "Title": ["BINLOG"], "Feature": ["BINLOG 'str'\n"], "Description": ["BINLOG is an internal-use statement. It is generated by the\nmariadb-binlog program as the printable representation of certain events in binary log files.  The 'str' value is a base 64-encoded\nstring that the server decodes to determine the data change indicated by the\ncorresponding event. This statement requires the SUPER privilege (<= MariaDB 10.5.1) or the BINLOG REPLAY privilege (>= MariaDB 10.5.2)."], "Examples": [], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-create-database/"], "Title": ["SHOW CREATE DATABASE"], "Feature": ["SHOW CREATE {DATABASE | SCHEMA} db_name\n"], "Description": ["Shows the CREATE DATABASE statement that\ncreates the given database. SHOW CREATE SCHEMA is a synonym\nfor SHOW CREATE DATABASE. SHOW CREATE DATABASE quotes database names according to the value of the sql_quote_show_create server system variable."], "Examples": ["SHOW CREATE DATABASE test;\n+----------+-----------------------------------------------------------------+\n| Database | Create Database                                                 |\n+----------+-----------------------------------------------------------------+\n| test     | CREATE DATABASE `test` /*!40100 DEFAULT CHARACTER SET latin1 */ |\n+----------+-----------------------------------------------------------------+\n\nSHOW CREATE SCHEMA test;\n+----------+-----------------------------------------------------------------+\n| Database | Create Database                                                 |\n+----------+-----------------------------------------------------------------+\n| test     | CREATE DATABASE `test` /*!40100 DEFAULT CHARACTER SET latin1 */ |\n+----------+-----------------------------------------------------------------+\n", "SHOW CREATE DATABASE test;\n+----------+---------------------------------------------------------------+\n| Database | Create Database                                               |\n+----------+---------------------------------------------------------------+\n| test     | CREATE DATABASE test /*!40100 DEFAULT CHARACTER SET latin1 */ |\n+----------+---------------------------------------------------------------+\n", "SHOW CREATE DATABASE p;\n+----------+--------------------------------------------------------------------------------------+\n| Database | Create Database                                                                      |\n+----------+--------------------------------------------------------------------------------------+\n| p        | CREATE DATABASE `p` /*!40100 DEFAULT CHARACTER SET latin1 */ COMMENT 'presentations' |\n+----------+--------------------------------------------------------------------------------------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-create-event/"], "Title": ["SHOW CREATE EVENT"], "Feature": ["SHOW CREATE EVENT event_name\n"], "Description": ["This statement displays the CREATE EVENT statement that creates a given event, as well as the SQL_MODE that was used when the trigger has been created and the character set used by the connection. To find out which events are present, use SHOW EVENTS.", "SHOW CREATE EVENT quotes identifiers according to the value of the sql_quote_show_create system variable. Prior to MariaDB 10.6.5, MariaDB 10.5.13 and MariaDB 10.4.22, the output of this statement was unreliably affected by the sql_quote_show_create system variable.", "The information_schema.EVENTS table provides similar, but more complete, information."], "Examples": ["SHOW CREATE EVENT test.e_daily\\G\n*************************** 1. row ***************************\n               Event: e_daily\n            sql_mode: \n           time_zone: SYSTEM\n        Create Event: CREATE EVENT `e_daily`\n                        ON SCHEDULE EVERY 1 DAY\n                        STARTS CURRENT_TIMESTAMP + INTERVAL 6 HOUR\n                        ON COMPLETION NOT PRESERVE\n                        ENABLE\n                        COMMENT 'Saves total number of sessions then\n                                clears the table each day'\n                        DO BEGIN\n                          INSERT INTO site_activity.totals (time, total)\n                            SELECT CURRENT_TIMESTAMP, COUNT(*) \n                            FROM site_activity.sessions;\n                          DELETE FROM site_activity.sessions;\n                        END\ncharacter_set_client: latin1\ncollation_connection: latin1_swedish_ci\n  Database Collation: latin1_swedish_ci\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-create-function/"], "Title": ["SHOW CREATE FUNCTION"], "Feature": ["SHOW CREATE FUNCTION func_name\n"], "Description": ["This statement is similar to SHOW CREATE PROCEDURE but for\nstored functions.", "SHOW CREATE FUNCTION quotes identifiers according to the value of the sql_quote_show_create system variable. Prior to MariaDB 10.6.5, MariaDB 10.5.13 and MariaDB 10.4.22, the output of this statement was unreliably affected by the sql_quote_show_create system variable."], "Examples": ["SHOW CREATE FUNCTION VatCents\\G\n*************************** 1. row ***************************\n            Function: VatCents\n            sql_mode: \n     Create Function: CREATE DEFINER=`root`@`localhost` FUNCTION `VatCents`(price DECIMAL(10,2)) RETURNS int(11)\n    DETERMINISTIC\nBEGIN\n DECLARE x INT;\n SET x = price * 114;\n RETURN x;\nEND\ncharacter_set_client: utf8\ncollation_connection: utf8_general_ci\n  Database Collation: latin1_swedish_ci\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-create-package-body/"], "Title": ["SHOW CREATE PACKAGE BODY"], "Feature": ["SHOW CREATE PACKAGE BODY  [ db_name . ] package_name\n"], "Description": ["The SHOW CREATE PACKAGE BODY statement shows the CREATE PACKAGE BODY statement that creates the given package body (i.e. the implementation of the package). CREATE PACKAGE BODY can be used when Oracle SQL_MODE is set, or from MariaDB 11.4. ", "SHOW CREATE PACKAGE BODY quotes identifiers according to the value of the sql_quote_show_create system variable."], "Examples": ["SHOW CREATE PACKAGE BODY employee_tools\\G\n*************************** 1. row ***************************\n        Package body: employee_tools\n            sql_mode: PIPES_AS_CONCAT,ANSI_QUOTES,IGNORE_SPACE,ORACLE,NO_KEY_OPTIONS,NO_TABLE_OPTIONS,NO_FIELD_OPTIONS,NO_AUTO_CREATE_USER\n Create Package Body: CREATE DEFINER=\"root\"@\"localhost\" PACKAGE BODY \"employee_tools\" AS\n  \n  stdRaiseAmount DECIMAL(10,2):=500;\n  \n  PROCEDURE log (eid INT, ecmnt TEXT) AS\n  BEGIN\n    INSERT INTO employee_log (id, cmnt) VALUES (eid, ecmnt);\n  END;\n  \n  PROCEDURE hire(ename TEXT, esalary DECIMAL(10,2)) AS\n    eid INT;\n  BEGIN\n    INSERT INTO employee (name, salary) VALUES (ename, esalary);\n    eid:= last_insert_id();\n    log(eid, 'hire ' || ename);\n  END;\n\n  FUNCTION getSalary(eid INT) RETURN DECIMAL(10,2) AS\n    nSalary DECIMAL(10,2);\n  BEGIN\n    SELECT salary INTO nSalary FROM employee WHERE id=eid;\n    log(eid, 'getSalary id=' || eid || ' salary=' || nSalary);\n    RETURN nSalary;\n  END;\n\n  PROCEDURE raiseSalary(eid INT, amount DECIMAL(10,2)) AS\n  BEGIN\n    UPDATE employee SET salary=salary+amount WHERE id=eid;\n    log(eid, 'raiseSalary id=' || eid || ' amount=' || amount);\n  END;\n\n  PROCEDURE raiseSalaryStd(eid INT) AS\n  BEGIN\n    raiseSalary(eid, stdRaiseAmount);\n    log(eid, 'raiseSalaryStd id=' || eid);\n  END;\n\nBEGIN  \n  log(0, 'Session ' || connection_id() || ' ' || current_user || ' started');\nEND\ncharacter_set_client: utf8\ncollation_connection: utf8_general_ci\n  Database Collation: latin1_swedish_ci\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-create-package/"], "Title": ["SHOW CREATE PACKAGE"], "Feature": ["SHOW CREATE PACKAGE  [ db_name . ] package_name\n"], "Description": ["The SHOW CREATE PACKAGE statement can be used when Oracle SQL_MODE is set. It shows the CREATE statement that creates the given package specification.", "SHOW CREATE PACKAGE quotes identifiers according to the value of the sql_quote_show_create system variable."], "Examples": ["SHOW CREATE PACKAGE employee_tools\\G\n*************************** 1. row ***************************\n             Package: employee_tools\n            sql_mode: PIPES_AS_CONCAT,ANSI_QUOTES,IGNORE_SPACE,ORACLE,NO_KEY_OPTIONS,NO_TABLE_OPTIONS,NO_FIELD_OPTIONS,NO_AUTO_CREATE_USER\n      Create Package: CREATE DEFINER=\"root\"@\"localhost\" PACKAGE \"employee_tools\" AS\n  FUNCTION getSalary(eid INT) RETURN DECIMAL(10,2);\n  PROCEDURE raiseSalary(eid INT, amount DECIMAL(10,2));\n  PROCEDURE raiseSalaryStd(eid INT);\n  PROCEDURE hire(ename TEXT, esalary DECIMAL(10,2));\nEND\ncharacter_set_client: utf8\ncollation_connection: utf8_general_ci\n  Database Collation: latin1_swedish_ci\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-create-procedure/"], "Title": ["SHOW CREATE PROCEDURE"], "Feature": ["SHOW CREATE PROCEDURE proc_name\n"], "Description": ["This statement is a MariaDB extension. It returns the exact string that\ncan be used to re-create the named stored procedure, as well as the SQL_MODE that was used when the trigger has been created and the character set used by the connection.. A similar statement, SHOW CREATE FUNCTION, displays information about stored functions.", "Both statements require that:", "you are the owner of the routine;\nyou have the SHOW CREATE ROUTINE privilege (from MariaDB 11.3.0); or\nhave the SELECT privilege on the mysql.proc table.\n", "When none of the above statements are true, the statements display NULL for the Create Procedure or Create Function field.", "Warning Users with SELECT privileges on mysql.proc or USAGE privileges on *.* can view the text of routines, even when they do not have privileges for the function or procedure itself.\n", "SHOW CREATE PROCEDURE quotes identifiers according to the value of the sql_quote_show_create system variable. Prior to MariaDB 10.6.5, MariaDB 10.5.13 and MariaDB 10.4.22, the output of this statement was unreliably affected by the sql_quote_show_create system variable."], "Examples": ["SHOW CREATE PROCEDURE test.simpleproc\\G\n*************************** 1. row ***************************\n           Procedure: simpleproc\n            sql_mode: \n    Create Procedure: CREATE PROCEDURE `simpleproc`(OUT param1 INT)\n                      BEGIN\n                      SELECT COUNT(*) INTO param1 FROM t;\n                      END\ncharacter_set_client: latin1\ncollation_connection: latin1_swedish_ci\n  Database Collation: latin1_swedish_ci\n\nSHOW CREATE FUNCTION test.hello\\G\n*************************** 1. row ***************************\n            Function: hello\n            sql_mode:\n     Create Function: CREATE FUNCTION `hello`(s CHAR(20))\n                      RETURNS CHAR(50)\n                      RETURN CONCAT('Hello, ',s,'!')\ncharacter_set_client: latin1\ncollation_connection: latin1_swedish_ci\n  Database Collation: latin1_swedish_ci\n", "CALL test.prc1();\nError 1370 (42000): execute command denied to \n  user 'test_user'@'localhost' for routine 'test'.'prc1'\n", "SHOW CREATE TABLES test.prc1\\G\nError 1305 (42000): PROCEDURE prc1 does not exist\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-create-sequence/"], "Title": ["SHOW CREATE SEQUENCE"], "Feature": ["SHOW CREATE SEQUENCE sequence_name;\n"], "Description": ["Shows the CREATE SEQUENCE statement that creates the given sequence. The statement requires the SELECT privilege for the table.", "SHOW CREATE SEQUENCE quotes identifiers according to the value of the sql_quote_show_create system variable."], "Examples": ["CREATE SEQUENCE s1 START WITH 50;\nSHOW CREATE SEQUENCE s1\\G;\n*************************** 1. row ***************************\n       Table: s1\nCreate Table: CREATE SEQUENCE `s1` start with 50 minvalue 1 maxvalue 9223372036854775806 \n  increment by 1 cache 1000 nocycle ENGINE=InnoDB\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-create-table/"], "Title": ["SHOW CREATE TABLE"], "Feature": ["SHOW CREATE TABLE tbl_name\n"], "Description": ["Shows the CREATE TABLE statement that creates the given table. The statement requires the SELECT privilege for the table. This statement also works with views and SEQUENCE.", "SHOW CREATE TABLE quotes table and\ncolumn names according to the value of the sql_quote_show_create server system variable.", "Certain SQL_MODE values can result in parts of the original CREATE statement not being included in the output. MariaDB-specific table options, column options, and index options are not included in the output of this statement if the NO_TABLE_OPTIONS, NO_FIELD_OPTIONS and NO_KEY_OPTIONS SQL_MODE flags are used. All MariaDB-specific table attributes are also not shown when a non-MariaDB/MySQL emulation mode is used, which includes ANSI, DB2, POSTGRESQL, MSSQL, MAXDB or ORACLE.\n", "Invalid table options, column options and index options are normally commented out (note, that it is possible to create a table with invalid options, by altering a table of a different engine, where these options were valid). To have them uncommented, enable the IGNORE_BAD_TABLE_OPTIONS SQL_MODE. Remember that replaying a CREATE TABLE statement with uncommented invalid options will fail with an error, unless the IGNORE_BAD_TABLE_OPTIONS SQL_MODE is in effect.", "Note that SHOW CREATE TABLE is not meant to provide metadata about a table. It provides information about how the table was declared, but the real table structure could differ a bit. For example, if an index has been declared as HASH, the CREATE TABLE statement returned by SHOW CREATE TABLE will declare that index as HASH; however, it is possible that the index is in fact a BTREE, because the storage engine does not support HASH.", "MariaDB permits TEXT and BLOB data types to be assigned a DEFAULT value. As a result, SHOW CREATE TABLE will append a DEFAULT NULL to nullable TEXT or BLOB fields if no specific default is provided. ", "Numbers are no longer quoted in the DEFAULT clause in SHOW CREATE statement. Prior to MariaDB 10.2.2, MariaDB quoted numbers. ", "Index Order", "Indexes are sorted and displayed in the following order, which may differ from the order of the CREATE TABLE statement.", "PRIMARY KEY\nUNIQUE keys where all column are NOT NULL\nUNIQUE keys that don't contain partial segments\nOther UNIQUE keys\nLONG UNIQUE keys\nNormal keys\nFulltext keys\n", "See sql/sql_table.cc for details."], "Examples": ["SHOW CREATE TABLE t\\G\n*************************** 1. row ***************************\n       Table: t\nCreate Table: CREATE TABLE `t` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `s` char(60) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1\n", "SHOW CREATE TABLE t\\G\n*************************** 1. row ***************************\n       Table: t\nCreate Table: CREATE TABLE t (\n  id int(11) NOT NULL AUTO_INCREMENT,\n  s char(60) DEFAULT NULL,\n  PRIMARY KEY (id)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1\n", "CREATE TABLE td (link TINYINT DEFAULT 1);\n\nSHOW CREATE TABLE td\\G\n*************************** 1. row ***************************\n       Table: td\nCreate Table: CREATE TABLE `td` (\n  `link` tinyint(4) DEFAULT 1\n) ENGINE=InnoDB DEFAULT CHARSET=latin1\n", "CREATE TABLE td (link TINYINT DEFAULT 1);\n\nSHOW CREATE TABLE td\\G\n*************************** 1. row ***************************\n       Table: td\nCreate Table: CREATE TABLE `td` (\n  `link` tinyint(4) DEFAULT '1'\n) ENGINE=InnoDB DEFAULT CHARSET=latin1\n", "SELECT @@sql_mode;\n+-------------------------------------------------------------------------------------------+\n| @@sql_mode                                                                                |\n+-------------------------------------------------------------------------------------------+\n| STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION |\n+-------------------------------------------------------------------------------------------+\n\nCREATE TABLE `t1` (\n       `id` int(11) NOT NULL AUTO_INCREMENT,\n       `msg` varchar(100) DEFAULT NULL,\n       PRIMARY KEY (`id`)\n     ) ENGINE=InnoDB DEFAULT CHARSET=latin1\n;\n\nSHOW CREATE TABLE t1\\G\n*************************** 1. row ***************************\n       Table: t1\nCreate Table: CREATE TABLE `t1` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `msg` varchar(100) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1\n\nSET SQL_MODE=ORACLE;\n\nSHOW CREATE TABLE t1\\G\n*************************** 1. row ***************************\n       Table: t1\nCreate Table: CREATE TABLE \"t1\" (\n  \"id\" int(11) NOT NULL,\n  \"msg\" varchar(100) DEFAULT NULL,\n  PRIMARY KEY (\"id\")\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-create-trigger/"], "Title": ["SHOW CREATE TRIGGER"], "Feature": ["SHOW CREATE TRIGGER trigger_name\n"], "Description": ["This statement shows a CREATE TRIGGER\nstatement that creates the given trigger, as well as the SQL_MODE that was used when the trigger has been created and the character set used by the connection.", "The TRIGGER privilege is required on the table the trigger is defined for to execute this statement.", "SHOW CREATE TRIGGER quotes identifiers according to the value of the sql_quote_show_create system variable. Prior to MariaDB 10.6.5, MariaDB 10.5.13 and MariaDB 10.4.22, the output of this statement was unreliably affected by the sql_quote_show_create system variable."], "Examples": ["SHOW CREATE TRIGGER example\\G\n*************************** 1. row ***************************\n               Trigger: example\n              sql_mode: ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,STRICT_ALL_TABLES\n,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_\nENGINE_SUBSTITUTION\nSQL Original Statement: CREATE DEFINER=`root`@`localhost` TRIGGER example BEFORE\n INSERT ON t FOR EACH ROW\nBEGIN\n        SET NEW.c = NEW.c * 2;\nEND\n  character_set_client: cp850\n  collation_connection: cp850_general_ci\n  Database Collation: utf8_general_ci\n  Created: 2016-09-29 13:53:34.35\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-create-user/"], "Title": ["SHOW CREATE USER"], "Feature": ["SHOW CREATE USER [user]\n"], "Description": ["Shows the CREATE USER statement that creates the given user. The statement requires the SELECT privilege for the mysql database, except for the current user. The CREATE USER statement for the current user is shown where no user is specified.", "SHOW CREATE USER quotes identifiers according to the value of the sql_quote_show_create system variable."], "Examples": ["CREATE USER foo4@test require cipher 'text' \n  issuer 'foo_issuer' subject 'foo_subject';\n\nSHOW CREATE USER foo4@test\\G\n*************************** 1. row ***************************\nCREATE USER 'foo4'@'test' \n  REQUIRE ISSUER 'foo_issuer' \n  SUBJECT 'foo_subject' \n  CIPHER 'text'\n", "CREATE USER 'monty'@'localhost' PASSWORD EXPIRE INTERVAL 120 DAY;\n\nSHOW CREATE USER 'monty'@'localhost';\n+------------------------------------------------------------------+\n| CREATE USER for monty@localhost                                  |\n+------------------------------------------------------------------+\n| CREATE USER 'monty'@'localhost' PASSWORD EXPIRE INTERVAL 120 DAY |\n+------------------------------------------------------------------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/cache-index/"], "Title": ["CACHE INDEX"], "Feature": ["CACHE INDEX                      \n  tbl_index_list [, tbl_index_list] ...\n  IN key_cache_name                    \n\ntbl_index_list:\n  tbl_name [[INDEX|KEY] (index_name[, index_name] ...)]\n"], "Description": ["The CACHE INDEX statement assigns table indexes to a specific key\ncache. It is used only for MyISAM tables.", "A default key cache exists and cannot be destroyed. To create more key caches, the key_buffer_size server system variable.", "The associations between tables indexes and key caches are lost on server restart. To recreate them automatically, it is necessary to configure caches in a configuration file and include some CACHE INDEX (and optionally LOAD INDEX) statements in the init file."], "Examples": ["CACHE INDEX t1, t2, t3 IN hot_cache;\n+---------+--------------------+----------+----------+\n| Table   | Op                 | Msg_type | Msg_text |\n+---------+--------------------+----------+----------+\n| test.t1 | assign_to_keycache | status   | OK       |\n| test.t2 | assign_to_keycache | status   | OK       |\n| test.t3 | assign_to_keycache | status   | OK       |\n+---------+--------------------+----------+----------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-create-view/"], "Title": ["SHOW CREATE VIEW"], "Feature": ["SHOW CREATE VIEW view_name\n"], "Description": ["This statement shows a CREATE VIEW statement that creates the given view, as well as the character set used by the connection when the view was created. This statement\nalso works with views.", "SHOW CREATE VIEW quotes table, column and stored function names according to the value of the sql_quote_show_create server system variable."], "Examples": ["SHOW CREATE VIEW example\\G\n*************************** 1. row ***************************\n                View: example\n         Create View: CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL\nSECURITY DEFINER VIEW `example` AS (select `t`.`id` AS `id`,`t`.`s` AS `s` from\n`t`)\ncharacter_set_client: cp850\ncollation_connection: cp850_general_ci\n", "SHOW CREATE VIEW example\\G\n*************************** 1. row ***************************\n                View: example\n         Create View: CREATE ALGORITHM=UNDEFINED DEFINER=root@localhost SQL SECU\nRITY DEFINER VIEW example AS (select t.id AS id,t.s AS s from t)\ncharacter_set_client: cp850\ncollation_connection: cp850_general_ci\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-databases/"], "Title": ["SHOW DATABASES"], "Feature": ["SHOW {DATABASES | SCHEMAS}\n    [LIKE 'pattern' | WHERE expr]\n"], "Description": ["SHOW DATABASES lists the databases on the MariaDB server host.\nSHOW SCHEMAS is a synonym for \nSHOW DATABASES. The LIKE clause, if\npresent on its own, indicates which database names to match. The WHERE and LIKE clauses can be given to select rows using more general conditions, as discussed in Extended SHOW.", "You see only those databases for which you have some kind of\nprivilege, unless you have the global \nSHOW DATABASES privilege. You\ncan also get this list using the mariadb-show command.", "If the server was started with the --skip-show-database\noption, you cannot use this statement at all unless you have the\nSHOW DATABASES privilege.", "The list of results returned by SHOW DATABASES is based on directories in the data directory, which is how MariaDB implements databases. It's possible that output includes directories that do not correspond to actual databases.", "The Information Schema SCHEMATA table also contains database information. "], "Examples": ["SHOW DATABASES;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mysql              |\n| performance_schema |\n| test               |\n+--------------------+\n", "SHOW DATABASES LIKE 'm%';\n+---------------+\n| Database (m%) |\n+---------------+\n| mysql         |\n+---------------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-engine/"], "Title": ["SHOW ENGINE"], "Feature": ["SHOW ENGINE engine_name {STATUS | MUTEX}\n"], "Description": ["SHOW ENGINE displays operational information about a storage\nengine.  The following statements currently are supported:", "SHOW ENGINE INNODB STATUS\nSHOW ENGINE INNODB MUTEX\nSHOW ENGINE PERFORMANCE_SCHEMA STATUS\nSHOW ENGINE ROCKSDB STATUS\n", "If the Sphinx Storage Engine is installed, the following is also supported:", "SHOW ENGINE SPHINX STATUS\n", "See SHOW ENGINE SPHINX STATUS.", "Older (and now removed) synonyms were SHOW INNODB STATUS\nfor SHOW ENGINE INNODB STATUS and \nSHOW MUTEX STATUS for \nSHOW ENGINE INNODB MUTEX.", "SHOW ENGINE INNODB STATUS", "SHOW ENGINE INNODB STATUS displays extensive information\nfrom the standard InnoDB Monitor about the state of the InnoDB storage engine.\nSee SHOW ENGINE INNODB STATUS for more.", "SHOW ENGINE INNODB MUTEX", "SHOW ENGINE INNODB MUTEX displays InnoDB mutex statistics.", "The statement displays the following output fields:", "Type: Always InnoDB.\nName: The source file where the mutex is implemented, and the line number\n  in the file where the mutex is created. The line number is dependent on the MariaDB version.\nStatus: This field displays the following values if UNIV_DEBUG was defined at compilation time (for example, in include/univ.h in the InnoDB part of the source tree). Only the os_waits value is displayed if UNIV_DEBUG was not defined. Without UNIV_DEBUG, the information on which the output is based is insufficient to distinguish regular mutexes and mutexes that protect\n  rw-locks (which allow multiple readers or a single writer). Consequently, the\n  output may appear to contain multiple rows for the same mutex.\ncount indicates how many times the mutex was requested.\nspin_waits indicates how many times the spinlock had to run.\nspin_rounds indicates the number of spinlock rounds. (spin_rounds divided by\n   spin_waits provides the average round count.)\nos_waits indicates the number of operating system waits. This occurs when\n   the spinlock did not work (the mutex was not locked during the spinlock and\n   it was necessary to yield to the operating system and wait).\nos_yields indicates the number of times a the thread trying to lock a mutex\n   gave up its timeslice and yielded to the operating system (on the\n   presumption that allowing other threads to run will free the mutex so that\n   it can be locked).\nos_wait_times indicates the amount of time (in ms) spent in operating system\n   waits, if the timed_mutexes system variable is 1 (ON). If timed_mutexes is 0\n   (OFF), timing is disabled, so os_wait_times is 0. timed_mutexes is off by\n   default.\n\n", "Information from this statement can be used to diagnose system problems. For\nexample, large values of spin_waits and spin_rounds may indicate scalability\nproblems.", "The information_schema.INNODB_MUTEXES table provides similar information.", "SHOW ENGINE PERFORMANCE_SCHEMA STATUS", "This statement shows how much memory is used for performance_schema tables and internal buffers.", "The output contains the following fields:", "Type: Always performance_schema.\nName: The name of a table, the name of an internal buffer, or the performance_schema word, followed by a dot and an attribute. Internal buffers names are enclosed by parenthesis. performance_schema means that the attribute refers to the whole database (it is a total). \nStatus: The value for the attribute.\n", "The following attributes are shown, in this order, for all tables:", "row_size: The memory used for an individual record. This value will never change.\nrow_count: The number of rows in the table or buffer. For some tables, this value depends on a server system variable.\nmemory: For tables and performance_schema, this is the result of row_size * row_count.\n", "For internal buffers, the attributes are:", "count\nsize\n", "SHOW ENGINE ROCKSDB STATUS", "See also MyRocks Performance Troubleshooting"], "Examples": [], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-engines/"], "Title": ["SHOW ENGINES"], "Feature": ["SHOW [STORAGE] ENGINES\n"], "Description": ["SHOW ENGINES displays status information about the server's\nstorage engines. This is particularly useful for checking whether a storage\nengine is supported, or to see what the default engine is. \nSHOW TABLE TYPES is a deprecated synonym.", "The information_schema.ENGINES table provides the same information.", "Since storage engines are plugins, different information about them is also shown in the information_schema.PLUGINS table and by the SHOW PLUGINS statement.", "Note that both MySQL's InnoDB and Percona's XtraDB replacement are labeled as InnoDB.  However, if XtraDB is in use, it will be specified in the COMMENT field. See XtraDB and InnoDB. The same applies to FederatedX.", "The output consists of the following columns:", "Engine indicates the engine's name.\nSupport indicates whether the engine is installed, and whether it is the default engine for the current session.\nComment is a brief description.\nTransactions, XA and Savepoints indicate whether transactions, XA transactions and transaction savepoints are supported by the engine.\n"], "Examples": ["SHOW ENGINES\\G\n*************************** 1. row ***************************\n      Engine: InnoDB\n     Support: DEFAULT\n     Comment: Supports transactions, row-level locking, and foreign keys\nTransactions: YES\n          XA: YES\n  Savepoints: YES\n*************************** 2. row ***************************\n      Engine: CSV\n     Support: YES\n     Comment: CSV storage engine\nTransactions: NO\n          XA: NO\n  Savepoints: NO\n*************************** 3. row ***************************\n      Engine: MyISAM\n     Support: YES\n     Comment: MyISAM storage engine\nTransactions: NO\n          XA: NO\n  Savepoints: NO\n*************************** 4. row ***************************\n      Engine: BLACKHOLE\n     Support: YES\n     Comment: /dev/null storage engine (anything you write to it disappears)\nTransactions: NO\n          XA: NO\n  Savepoints: NO\n*************************** 5. row ***************************\n      Engine: FEDERATED\n     Support: YES\n     Comment: FederatedX pluggable storage engine\nTransactions: YES\n          XA: NO\n  Savepoints: YES\n*************************** 6. row ***************************\n      Engine: MRG_MyISAM\n     Support: YES\n     Comment: Collection of identical MyISAM tables\nTransactions: NO\n          XA: NO\n  Savepoints: NO\n*************************** 7. row ***************************\n      Engine: ARCHIVE\n     Support: YES\n     Comment: Archive storage engine\nTransactions: NO\n          XA: NO\n  Savepoints: NO\n*************************** 8. row ***************************\n      Engine: MEMORY\n     Support: YES\n     Comment: Hash based, stored in memory, useful for temporary tables\nTransactions: NO\n          XA: NO\n  Savepoints: NO\n*************************** 9. row ***************************\n      Engine: PERFORMANCE_SCHEMA\n     Support: YES\n     Comment: Performance Schema\nTransactions: NO\n          XA: NO\n  Savepoints: NO\n*************************** 10. row ***************************\n      Engine: Aria\n     Support: YES\n     Comment: Crash-safe tables with MyISAM heritage\nTransactions: NO\n          XA: NO\n  Savepoints: NO\n10 rows in set (0.00 sec)\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-errors/"], "Title": ["SHOW ERRORS"], "Feature": ["SHOW ERRORS [LIMIT [offset,] row_count]\nSHOW ERRORS [LIMIT row_count OFFSET offset]\nSHOW COUNT(*) ERRORS\n"], "Description": ["This statement is similar to SHOW WARNINGS, except that instead of\ndisplaying errors, warnings, and notes, it displays only errors.", "The LIMIT clause has the same syntax as for the\nSELECT statement.", "The SHOW COUNT(*) ERRORS statement displays the number of\nerrors. You can also retrieve this number from the error_count variable.", "SHOW COUNT(*) ERRORS;\nSELECT @@error_count;\n", "The value of error_count might be greater than the number of messages displayed by SHOW WARNINGS if the max_error_count system variable is set so low that not all messages are stored.", "For a list of MariaDB error codes, see MariaDB Error Codes."], "Examples": ["SELECT f();\nERROR 1305 (42000): FUNCTION f does not exist\n\nSHOW COUNT(*) ERRORS;\n+-----------------------+\n| @@session.error_count |\n+-----------------------+\n|                     1 |\n+-----------------------+\n\nSHOW ERRORS;\n+-------+------+---------------------------+\n| Level | Code | Message                   |\n+-------+------+---------------------------+\n| Error | 1305 | FUNCTION f does not exist |\n+-------+------+---------------------------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-events/"], "Title": ["SHOW EVENTS"], "Feature": ["SHOW EVENTS [{FROM | IN} schema_name]\n    [LIKE 'pattern' | WHERE expr]\n"], "Description": ["Shows information about Event Manager events (created with CREATE EVENT). Requires the EVENT privilege. Without any arguments, SHOW EVENTS lists all of the events in the current schema:", "SELECT CURRENT_USER(), SCHEMA();\n+----------------+----------+\n| CURRENT_USER() | SCHEMA() |\n+----------------+----------+\n| jon@ghidora    | myschema |\n+----------------+----------+\n\nSHOW EVENTS\\G\n*************************** 1. row ***************************\n                  Db: myschema\n                Name: e_daily\n             Definer: jon@ghidora\n           Time zone: SYSTEM\n                Type: RECURRING\n          Execute at: NULL\n      Interval value: 10\n      Interval field: SECOND\n              Starts: 2006-02-09 10:41:23\n                Ends: NULL\n              Status: ENABLED\n          Originator: 0\ncharacter_set_client: latin1\ncollation_connection: latin1_swedish_ci\n  Database Collation: latin1_swedish_ci\n", "To see the event action, use SHOW CREATE EVENT instead, or look at the information_schema.EVENTS table.", "To see events for a specific schema, use the FROM clause.\nFor example, to see events for the test schema, use the following statement:", "SHOW EVENTS FROM test;\n", "The LIKE clause, if present, indicates which event names to\nmatch. The WHERE clause can be given to select rows using\nmore general conditions, as discussed in Extended Show."], "Examples": [], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-explain/"], "Title": ["SHOW EXPLAIN"], "Feature": ["SHOW EXPLAIN [FORMAT=JSON] FOR <connection_id>;\nEXPLAIN [FORMAT=JSON] FOR CONNECTION <connection_id>;\n"], "Description": ["The SHOW EXPLAIN command allows one to get an EXPLAIN (that is, a\ndescription of a query plan) of a query running in a certain connection.", "SHOW EXPLAIN FOR <connection_id>;\n", "will produce an EXPLAIN output for the query that connection number connection_id is running. The connection id can be obtained with SHOW PROCESSLIST.", "SHOW EXPLAIN FOR 1;\n+------+-------------+-------+-------+---------------+------+---------+------+---------+-------------+\n| id   | select_type | table | type  | possible_keys | key  | key_len | ref  | rows    | Extra       |\n+------+-------------+-------+-------+---------------+------+---------+------+---------+-------------+\n|    1 | SIMPLE      | tbl   | index | NULL          | a    | 5       | NULL | 1000107 | Using index |\n+------+-------------+-------+-------+---------------+------+---------+------+---------+-------------+\n1 row in set, 1 warning (0.00 sec)\n", "The output is always accompanied with a warning which shows the query the\ntarget connection is running (this shows what the EXPLAIN is for):", "SHOW WARNINGS;\n+-------+------+------------------------+\n| Level | Code | Message                |\n+-------+------+------------------------+\n| Note  | 1003 | select sum(a) from tbl |\n+-------+------+------------------------+\n1 row in set (0.00 sec)\n", "EXPLAIN FOR CONNECTION", "MariaDB starting with 10.9The EXPLAIN FOR CONNECTION syntax was added for MySQL compatibility.\n", "FORMAT=JSON", "MariaDB starting with 10.9SHOW EXPLAIN [FORMAT=JSON] FOR <connection_id> extends SHOW EXPLAIN to return more detailed JSON output. \n", "Possible Errors", "The output can be only produced if the target connection is currently running a\nquery, which has a ready query plan. If this is not the case, the output will\nbe:", "SHOW EXPLAIN FOR 2;\nERROR 1932 (HY000): Target is not running an EXPLAINable command\n", "You will get this error when:", "the target connection is not running a command for which one can run EXPLAIN\nthe target connection is running a command for which one can run EXPLAIN, but\nthere is no query plan yet (for example, tables are open and locks are\n   acquired before the query plan is produced)\n\n", "Differences Between SHOW EXPLAIN and EXPLAIN Outputs", "Background", "In MySQL, EXPLAIN execution takes a slightly different route from the way\nthe real query (typically the SELECT) is optimized. This is unfortunate,\nand has caused a number of bugs in EXPLAIN. (For example, see\nMDEV-326, MDEV-410, and\nlp:1013343.\nlp:992942 is not directly\nabout EXPLAIN, but it also would not have existed if MySQL didn't try to delete\nparts of a query plan in the middle of the query) ", "SHOW EXPLAIN examines a running SELECT, and hence its output may be\nslightly different from what EXPLAIN SELECT would produce. We did our best\nto make sure that either the difference is negligible, or SHOW EXPLAIN's\noutput is closer to reality than EXPLAIN's output.", "List of Recorded Differences", "SHOW EXPLAIN may have Extra='no matching row in const table', where  EXPLAIN would produce Extra='Impossible WHERE ...'\nFor queries with subqueries, SHOW EXPLAIN may print select_type==PRIMARY where regular EXPLAIN used to print select_type==SIMPLE, or vice versa.\n", "Required Permissions", "Running SHOW EXPLAIN requires the same permissions as running SHOW PROCESSLIST would."], "Examples": [], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-function-code/"], "Title": ["SHOW FUNCTION CODE"], "Feature": ["SHOW FUNCTION CODE func_name\n"], "Description": ["SHOW FUNCTION CODE shows a representation of the internal implementation of the stored function.", "It  is similar to SHOW PROCEDURE CODE but for stored functions."], "Examples": [], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-function-status/"], "Title": ["SHOW FUNCTION STATUS"], "Feature": ["SHOW FUNCTION STATUS\n    [LIKE 'pattern' | WHERE expr]\n"], "Description": ["This statement is similar to \nSHOW PROCEDURE STATUS but for\nstored functions.", "The LIKE clause, if present on its own, indicates which function names to match. ", "The WHERE and LIKE clauses can be given to select rows using more general conditions, as discussed in Extended SHOW.", "The information_schema.ROUTINES table contains more detailed information."], "Examples": ["SHOW FUNCTION STATUS\\G\n*************************** 1. row ***************************\n                  Db: test\n                Name: VatCents\n                Type: FUNCTION\n             Definer: root@localhost\n            Modified: 2013-06-01 12:40:31\n             Created: 2013-06-01 12:40:31\n       Security_type: DEFINER\n             Comment: \ncharacter_set_client: utf8\ncollation_connection: utf8_general_ci\n  Database Collation: latin1_swedish_ci\n", "SHOW FUNCTION STATUS LIKE 'V%' \\G\n*************************** 1. row ***************************\n                  Db: test\n                Name: VatCents\n                Type: FUNCTION\n             Definer: root@localhost\n            Modified: 2013-06-01 12:40:31\n             Created: 2013-06-01 12:40:31\n       Security_type: DEFINER\n             Comment: \ncharacter_set_client: utf8\ncollation_connection: utf8_general_ci\n  Database Collation: latin1_swedish_ci\n", "SHOW FUNCTION STATUS WHERE Security_type LIKE 'DEFINER' \\G\n*************************** 1. row ***************************\n                  Db: test\n                Name: VatCents\n                Type: FUNCTION\n             Definer: root@localhost\n            Modified: 2013-06-01 12:40:31\n             Created: 2013-06-01 12:40:31\n       Security_type: DEFINER\n             Comment: \ncharacter_set_client: utf8\ncollation_connection: utf8_general_ci\n  Database Collation: latin1_swedish_ci\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-grants/"], "Title": ["SHOW GRANTS"], "Feature": ["SHOW GRANTS [FOR user|role]\n"], "Description": ["The SHOW GRANTS statement lists privileges granted to a particular user or role.", "Users", "The statement lists the GRANT statement or\nstatements that must be issued to duplicate the privileges that are granted to\na MariaDB user account. The account is named using the same format as for the\nGRANT statement; for example,\n'jeffrey'@'localhost'. If you specify only the user name part\nof the account name, a host name part of '%' is used.  For\nadditional information about specifying account names, see\nGRANT.", "SHOW GRANTS FOR 'root'@'localhost';\n+---------------------------------------------------------------------+\n| Grants for root@localhost                                           |\n+---------------------------------------------------------------------+\n| GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost' WITH GRANT OPTION |\n+---------------------------------------------------------------------+\n", "To list the privileges granted to the account that you are using to\nconnect to the server, you can use any of the following statements:", "SHOW GRANTS;\nSHOW GRANTS FOR CURRENT_USER;\nSHOW GRANTS FOR CURRENT_USER();\n", "If SHOW GRANTS FOR CURRENT_USER (or any\nof the equivalent syntaxes) is used in DEFINER context (such\nas within a stored procedure that is defined with \n SQL SECURITY DEFINER), the grants displayed are those of the\ndefiner and not the invoker.", "Note that the DELETE HISTORY privilege, introduced in MariaDB 10.3.4, was displayed as DELETE VERSIONING ROWS when running SHOW GRANTS until MariaDB 10.3.15 (MDEV-17655).", "Roles", "SHOW GRANTS can also be used to view the privileges granted to a role.", "Example", "SHOW GRANTS FOR journalist;\n+------------------------------------------+\n| Grants for journalist                    |\n+------------------------------------------+\n| GRANT USAGE ON *.* TO 'journalist'       |\n| GRANT DELETE ON `test`.* TO 'journalist' |\n+------------------------------------------+\n", "FOR PUBLIC", "MariaDB starting with 10.11GRANT ... TO PUBLIC was introduced in MariaDB 10.11 to grant privileges to all users. SHOW GRANTS FOR PUBLIC shows all these grants.\nSHOW GRANTS FOR public;\n+------------------------------------------------+\n| Grants for PUBLIC                              |\n+------------------------------------------------+\n| GRANT ALL PRIVILEGES ON `dev_db`.* TO `PUBLIC` |\n+------------------------------------------------+\n"], "Examples": [], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-index/"], "Title": ["SHOW INDEX"], "Feature": ["SHOW {INDEX | INDEXES | KEYS} \n FROM tbl_name [FROM db_name]\n [WHERE expr]\n"], "Description": ["SHOW INDEX returns table index information. The format\nresembles that of the SQLStatistics call in ODBC.", "You can use db_name.tbl_name as an alternative to the\n tbl_name FROM db_name syntax. These two statements are\n equivalent:", "SHOW INDEX FROM mytable FROM mydb;\nSHOW INDEX FROM mydb.mytable;\n", "SHOW KEYS and SHOW INDEXES are synonyms for SHOW INDEX.", "You can also list a table's indexes with the mariadb-show command: ", "mariadb-show -k db_name tbl_name\n", "The information_schema.STATISTICS table stores similar information.", "The following fields are returned by SHOW INDEX.", "FieldDescription\nTableTable name\nNon_unique1 if the index permits duplicate values, 0 if values must be unique.\nKey_nameIndex name. The primary key is always named PRIMARY.\nSeq_in_indexThe column's sequence in the index, beginning with 1.\nColumn_nameColumn name.\nCollationEither A, if the column is sorted in ascending order in the index, or NULL if it's not sorted.\nCardinalityEstimated number of unique values in the index. The cardinality statistics are calculated at various times, and can help the optimizer make improved decisions.\nSub_partNULL if the entire column is included in the index, or the number of included characters if not.\nPackedNULL if the index is not packed, otherwise how the index is packed.\nNullNULL if NULL values are permitted in the column, an empty string if NULLs are not permitted.\nIndex_typeThe index type, which can be BTREE, FULLTEXT, HASH or RTREE. See Storage Engine Index Types.\nCommentOther information, such as whether the index is disabled.\nIndex_commentContents of the COMMENT attribute when the index was created.\nIgnoredWhether or not an index will be ignored by the optimizer. See Ignored Indexes. From MariaDB 10.6.0.\n\n", "The WHERE and LIKE clauses can be given to select rows using more general conditions, as discussed in Extended SHOW."], "Examples": ["CREATE TABLE IF NOT EXISTS `employees_example` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `first_name` varchar(30) NOT NULL,\n  `last_name` varchar(40) NOT NULL,\n  `position` varchar(25) NOT NULL,\n  `home_address` varchar(50) NOT NULL,\n  `home_phone` varchar(12) NOT NULL,\n  `employee_code` varchar(25) NOT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `employee_code` (`employee_code`),\n  KEY `first_name` (`first_name`,`last_name`)\n) ENGINE=Aria;\n\nINSERT INTO `employees_example` (`first_name`, `last_name`, `position`, `home_address`, `home_phone`, `employee_code`)\n  VALUES\n  ('Mustapha', 'Mond', 'Chief Executive Officer', '692 Promiscuous Plaza', '326-555-3492', 'MM1'),\n  ('Henry', 'Foster', 'Store Manager', '314 Savage Circle', '326-555-3847', 'HF1'),\n  ('Bernard', 'Marx', 'Cashier', '1240 Ambient Avenue', '326-555-8456', 'BM1'),\n  ('Lenina', 'Crowne', 'Cashier', '281 Bumblepuppy Boulevard', '328-555-2349', 'LC1'),\n  ('Fanny', 'Crowne', 'Restocker', '1023 Bokanovsky Lane', '326-555-6329', 'FC1'),\n  ('Helmholtz', 'Watson', 'Janitor', '944 Soma Court', '329-555-2478', 'HW1');\n", "SHOW INDEXES FROM employees_example\\G\n*************************** 1. row ***************************\n        Table: employees_example\n   Non_unique: 0\n     Key_name: PRIMARY\n Seq_in_index: 1\n  Column_name: id\n    Collation: A\n  Cardinality: 6\n     Sub_part: NULL\n       Packed: NULL\n         Null: \n   Index_type: BTREE\n      Comment: \nIndex_comment: \n      Ignored: NO\n*************************** 2. row ***************************\n        Table: employees_example\n   Non_unique: 0\n     Key_name: employee_code\n Seq_in_index: 1\n  Column_name: employee_code\n    Collation: A\n  Cardinality: 6\n     Sub_part: NULL\n       Packed: NULL\n         Null: \n   Index_type: BTREE\n      Comment: \nIndex_comment: \n      Ignored: NO\n*************************** 3. row ***************************\n        Table: employees_example\n   Non_unique: 1\n     Key_name: first_name\n Seq_in_index: 1\n  Column_name: first_name\n    Collation: A\n  Cardinality: NULL\n     Sub_part: NULL\n       Packed: NULL\n         Null: \n   Index_type: BTREE\n      Comment: \nIndex_comment: \n      Ignored: NO\n*************************** 4. row ***************************\n        Table: employees_example\n   Non_unique: 1\n     Key_name: first_name\n Seq_in_index: 2\n  Column_name: last_name\n    Collation: A\n  Cardinality: NULL\n     Sub_part: NULL\n       Packed: NULL\n         Null: \n   Index_type: BTREE\n      Comment: \nIndex_comment: \n      Ignored: NO\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-index-statistics/"], "Title": ["SHOW INDEX_STATISTICS"], "Feature": ["SHOW INDEX_STATISTICS\n"], "Description": ["The SHOW INDEX_STATISTICS statement was introduced in MariaDB 5.2 as part of the User Statistics feature. It was removed as a separate statement in MariaDB 10.1.1, but effectively replaced by the generic SHOW information_schema_table statement. The information_schema.INDEX_STATISTICS table shows statistics on index usage and makes it possible to do such things as locating unused indexes and generating the commands to remove them. ", "The userstat system variable must be set to 1 to activate this feature. See the User Statistics and information_schema.INDEX_STATISTICS table for more information."], "Examples": ["SHOW INDEX_STATISTICS;\n+--------------+-------------------+------------+-----------+\n| Table_schema | Table_name        | Index_name | Rows_read |\n+--------------+-------------------+------------+-----------+\n| test         | employees_example | PRIMARY    |         1 |\n+--------------+-------------------+------------+-----------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-innodb-status-removed/"], "Title": ["SHOW INNODB STATUS (removed)"], "Feature": ["SHOW INNODB STATUS\n"], "Description": ["This was a deprecated synonym for \n SHOW ENGINE INNODB STATUS. It was removed in MariaDB and MySQL 5.5."], "Examples": [], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-binlog-status/"], "Title": ["SHOW MASTER STATUS"], "Feature": ["SHOW MASTER STATUS\nSHOW BINLOG STATUS -- From MariaDB 10.5.2\n"], "Description": ["Provides status information about the binary log files of the primary.", "This statement requires the SUPER privilege, the REPLICATION_CLIENT privilege, or, from MariaDB 10.5.2, the BINLOG MONITOR privilege.", "To see information about the current GTIDs in the binary log, use the\ngtid_binlog_pos variable.", "SHOW MASTER STATUS was renamed to SHOW BINLOG STATUS in MariaDB 10.5.2, but the old name remains an alias for compatibility purposes."], "Examples": ["SHOW MASTER STATUS;\n+--------------------+----------+--------------+------------------+\n| File               | Position | Binlog_Do_DB | Binlog_Ignore_DB |\n+--------------------+----------+--------------+------------------+\n| mariadb-bin.000016 |      475 |              |                  |\n+--------------------+----------+--------------+------------------+\nSELECT @@global.gtid_binlog_pos;\n+--------------------------+\n| @@global.gtid_binlog_pos |\n+--------------------------+\n| 0-1-2                    |\n+--------------------------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-open-tables/"], "Title": ["SHOW OPEN TABLES"], "Feature": ["SHOW OPEN TABLES [FROM db_name]\n    [LIKE 'pattern' | WHERE expr]\n"], "Description": [" SHOW OPEN TABLES lists the non-TEMPORARY\ntables that are currently open in the table cache. See\nhttp://dev.mysql.com/doc/refman/5.1/en/table-cache.html.", "The FROM and LIKE clauses may be used.", "The FROM\nclause, if present, restricts the tables shown to those present in the\ndb_name database. ", "The LIKE clause, if\npresent on its own, indicates which table names to match. The WHERE and LIKE clauses can be given to select rows using more general conditions, as discussed in Extended SHOW.", "The following information is returned:", "ColumnDescription\nDatabaseDatabase name.\nNameTable name.\nIn_useNumber of  table instances being used.\nName_locked1 if the table is name-locked, e.g. if it is being dropped or renamed, otherwise 0.\n\n", "Before MariaDB 5.5, each use of, for example, LOCK TABLE ... WRITE would increment In_use for that table. With the implementation of the metadata locking improvements in MariaDB 5.5, LOCK TABLE... WRITE acquires a strong MDL lock, and concurrent connections will wait on this MDL lock, so any subsequent LOCK TABLE... WRITE will not increment In_use."], "Examples": ["SHOW OPEN TABLES;\n+----------+---------------------------+--------+-------------+\n| Database | Table                     | In_use | Name_locked |\n+----------+---------------------------+--------+-------------+\n...\n| test     | xjson                     |      0 |           0 |\n| test     | jauthor                   |      0 |           0 |\n| test     | locks                     |      1 |           0 |\n...\n+----------+---------------------------+--------+-------------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-package-body-status/"], "Title": ["SHOW PACKAGE BODY STATUS"], "Feature": ["SHOW PACKAGE BODY STATUS\n    [LIKE 'pattern' | WHERE expr]\n"], "Description": ["The SHOW PACKAGE BODY STATUS statement returns characteristics of stored package bodies (implementations), such as the database, name, type, creator, creation and modification dates, and character set information. A similar statement, SHOW PACKAGE STATUS, displays information about stored package specifications.", "The LIKE clause, if present, indicates which package names to match. The WHERE and LIKE clauses can be given to select rows using more general conditions, as discussed in Extended SHOW.", "The ROUTINES table in the INFORMATION_SCHEMA database contains more detailed information."], "Examples": ["SHOW PACKAGE BODY STATUS LIKE 'pkg1'\\G\n*************************** 1. row ***************************\n                  Db: test\n                Name: pkg1\n                Type: PACKAGE BODY\n             Definer: root@localhost\n            Modified: 2018-02-27 14:44:14\n             Created: 2018-02-27 14:44:14\n       Security_type: DEFINER\n             Comment: This is my first package body\ncharacter_set_client: utf8\ncollation_connection: utf8_general_ci\n  Database Collation: latin1_swedish_ci\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-package-status/"], "Title": ["SHOW PACKAGE STATUS"], "Feature": ["SHOW PACKAGE STATUS\n    [LIKE 'pattern' | WHERE expr]\n"], "Description": ["The SHOW PACKAGE STATUS statement returns characteristics of stored package specifications, such as the database, name, type, creator, creation and modification dates, and character set information. A similar statement, SHOW PACKAGE BODY STATUS, displays information about stored package bodies (i.e. implementations).", "The LIKE clause, if present, indicates which package names to match. The WHERE and LIKE clauses can be given to select rows using more general conditions, as discussed in Extended SHOW.", "The ROUTINES table in the INFORMATION_SCHEMA database contains more detailed information."], "Examples": ["SHOW PACKAGE STATUS LIKE 'pkg1'\\G\n*************************** 1. row ***************************\n                  Db: test\n                Name: pkg1\n                Type: PACKAGE\n             Definer: root@localhost\n            Modified: 2018-02-27 14:38:15\n             Created: 2018-02-27 14:38:15\n       Security_type: DEFINER\n             Comment: This is my first package\ncharacter_set_client: utf8\ncollation_connection: utf8_general_ci\n  Database Collation: latin1_swedish_ci\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-plugins-soname/"], "Title": ["SHOW PLUGINS SONAME"], "Feature": ["SHOW PLUGINS SONAME { library | LIKE 'pattern' | WHERE expr };\n"], "Description": ["SHOW PLUGINS SONAME displays information about compiled-in and all server plugins in the plugin_dir directory, including plugins that haven't been installed."], "Examples": ["SHOW PLUGINS SONAME 'ha_example.so';\n+----------+---------------+----------------+---------------+---------+\n| Name     | Status        | Type           | Library       | License |\n+----------+---------------+----------------+---------------+---------+\n| EXAMPLE  | NOT INSTALLED | STORAGE ENGINE | ha_example.so | GPL     |\n| UNUSABLE | NOT INSTALLED | DAEMON         | ha_example.so | GPL     |\n+----------+---------------+----------------+---------------+---------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-plugins/"], "Title": ["SHOW PLUGINS"], "Feature": ["SHOW PLUGINS;\n"], "Description": [" SHOW PLUGINS displays information about installed plugins. The Library column indicates the plugin library - if it is NULL, the plugin is built-in and cannot be uninstalled.", "The PLUGINS table in the information_schema database contains more detailed information.", "For specific information about storage engines (a particular type of plugin), see the information_schema.ENGINES table and the SHOW ENGINES statement."], "Examples": ["SHOW PLUGINS;\n+----------------------------+----------+--------------------+-------------+---------+\n| Name                       | Status   | Type               | Library     | License |\n+----------------------------+----------+--------------------+-------------+---------+\n| binlog                     | ACTIVE   | STORAGE ENGINE     | NULL        | GPL     |\n| mysql_native_password      | ACTIVE   | AUTHENTICATION     | NULL        | GPL     |\n| mysql_old_password         | ACTIVE   | AUTHENTICATION     | NULL        | GPL     |\n| MRG_MyISAM                 | ACTIVE   | STORAGE ENGINE     | NULL        | GPL     |\n| MyISAM                     | ACTIVE   | STORAGE ENGINE     | NULL        | GPL     |\n| CSV                        | ACTIVE   | STORAGE ENGINE     | NULL        | GPL     |\n| MEMORY                     | ACTIVE   | STORAGE ENGINE     | NULL        | GPL     |\n| FEDERATED                  | ACTIVE   | STORAGE ENGINE     | NULL        | GPL     |\n| PERFORMANCE_SCHEMA         | ACTIVE   | STORAGE ENGINE     | NULL        | GPL     |\n| Aria                       | ACTIVE   | STORAGE ENGINE     | NULL        | GPL     |\n| InnoDB                     | ACTIVE   | STORAGE ENGINE     | NULL        | GPL     |\n| INNODB_TRX                 | ACTIVE   | INFORMATION SCHEMA | NULL        | GPL     |\n...\n| INNODB_SYS_FOREIGN         | ACTIVE   | INFORMATION SCHEMA | NULL        | GPL     |\n| INNODB_SYS_FOREIGN_COLS    | ACTIVE   | INFORMATION SCHEMA | NULL        | GPL     |\n| SPHINX                     | ACTIVE   | STORAGE ENGINE     | NULL        | GPL     |\n| ARCHIVE                    | ACTIVE   | STORAGE ENGINE     | NULL        | GPL     |\n| BLACKHOLE                  | ACTIVE   | STORAGE ENGINE     | NULL        | GPL     |\n| FEEDBACK                   | DISABLED | INFORMATION SCHEMA | NULL        | GPL     |\n| partition                  | ACTIVE   | STORAGE ENGINE     | NULL        | GPL     |\n| pam                        | ACTIVE   | AUTHENTICATION     | auth_pam.so | GPL     |\n+----------------------------+----------+--------------------+-------------+---------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-privileges/"], "Title": ["SHOW PRIVILEGES"], "Feature": ["SHOW PRIVILEGES\n"], "Description": [" SHOW PRIVILEGES shows the list of system privileges that the MariaDB server supports. The exact list of privileges depends on the version of your server.", "Note that before MariaDB 10.3.23, MariaDB 10.4.13 and MariaDB 10.5.2 , the Delete history privilege displays as Delete versioning rows (MDEV-20382)."], "Examples": ["SHOW PRIVILEGES;\n+--------------------------+---------------------------------------+--------------------------------------------------------------------+\n| Privilege                | Context                               | Comment                                                            |\n+--------------------------+---------------------------------------+--------------------------------------------------------------------+\n| Alter                    | Tables                                | To alter the table                                                 |\n| Alter routine            | Functions,Procedures                  | To alter or drop stored functions/procedures                       |\n| Create                   | Databases,Tables,Indexes              | To create new databases and tables                                 |\n| Create routine           | Databases                             | To use CREATE FUNCTION/PROCEDURE                                   |\n| Create temporary tables  | Databases                             | To use CREATE TEMPORARY TABLE                                      |\n| Create view              | Tables                                | To create new views                                                |\n| Create user              | Server Admin                          | To create new users                                                |\n| Delete                   | Tables                                | To delete existing rows                                            |\n| Delete history           | Tables                                | To delete versioning table historical rows                         |\n| Drop                     | Databases,Tables                      | To drop databases, tables, and views                               |\n| Event                    | Server Admin                          | To create, alter, drop and execute events                          |\n| Execute                  | Functions,Procedures                  | To execute stored routines                                         |\n| File                     | File access on server                 | To read and write files on the server                              |\n| Grant option             | Databases,Tables,Functions,Procedures | To give to other users those privileges you possess                |\n| Index                    | Tables                                | To create or drop indexes                                          |\n| Insert                   | Tables                                | To insert data into tables                                         |\n| Lock tables              | Databases                             | To use LOCK TABLES (together with SELECT privilege)                |\n| Process                  | Server Admin                          | To view the plain text of currently executing queries              |\n| Proxy                    | Server Admin                          | To make proxy user possible                                        |\n| References               | Databases,Tables                      | To have references on tables                                       |\n| Reload                   | Server Admin                          | To reload or refresh tables, logs and privileges                   |\n| Binlog admin             | Server                                | To purge binary logs                                               |\n| Binlog monitor           | Server                                | To use SHOW BINLOG STATUS and SHOW BINARY LOG                      |\n| Binlog replay            | Server                                | To use BINLOG (generated by mariadb-binlog)                        |\n| Replication master admin | Server                                | To monitor connected slaves                                        |\n| Replication slave admin  | Server                                | To start/stop slave and apply binlog events                        |\n| Slave monitor            | Server                                | To use SHOW SLAVE STATUS and SHOW RELAYLOG EVENTS                  |\n| Replication slave        | Server Admin                          | To read binary log events from the master                          |\n| Select                   | Tables                                | To retrieve rows from table                                        |\n| Show databases           | Server Admin                          | To see all databases with SHOW DATABASES                           |\n| Show view                | Tables                                | To see views with SHOW CREATE VIEW                                 |\n| Shutdown                 | Server Admin                          | To shut down the server                                            |\n| Super                    | Server Admin                          | To use KILL thread, SET GLOBAL, CHANGE MASTER, etc.                |\n| Trigger                  | Tables                                | To use triggers                                                    |\n| Create tablespace        | Server Admin                          | To create/alter/drop tablespaces                                   |\n| Update                   | Tables                                | To update existing rows                                            |\n| Set user                 | Server                                | To create views and stored routines with a different definer       |\n| Federated admin          | Server                                | To execute the CREATE SERVER, ALTER SERVER, DROP SERVER statements |\n| Connection admin         | Server                                | To bypass connection limits and kill other users' connections      |\n| Read_only admin          | Server                                | To perform write operations even if @@read_only=ON                 |\n| Usage                    | Server Admin                          | No privileges - allow connect only                                 |\n+--------------------------+---------------------------------------+--------------------------------------------------------------------+\n41 rows in set (0.000 sec)\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-procedure-code/"], "Title": ["SHOW PROCEDURE CODE"], "Feature": ["SHOW PROCEDURE CODE proc_name\n"], "Description": ["This statement is a MariaDB extension that is available only for servers that\nhave been built with debugging support. It displays a representation of the\ninternal implementation of the named stored procedure. A similar statement,\n SHOW FUNCTION CODE, displays\ninformation about stored functions.", "Both statements require that you be the owner of the routine or have\n SELECT access to the mysql.proc table.", "If the named routine is available, each statement produces a result\nset. Each row in the result set corresponds to one \"instruction\" in\nthe routine. The first column is Pos, which is an ordinal number\nbeginning with 0. The second column is Instruction, which contains an\nSQL statement (usually changed from the original source), or a\ndirective which has meaning only to the stored-routine handler."], "Examples": ["DELIMITER //\n\nCREATE PROCEDURE p1 ()\n  BEGIN\n    DECLARE fanta INT DEFAULT 55;\n    DROP TABLE t2;\n    LOOP\n      INSERT INTO t3 VALUES (fanta);\n      END LOOP;\n  END//\nQuery OK, 0 rows affected (0.00 sec)\n\nSHOW PROCEDURE CODE p1//\n+-----+----------------------------------------+\n| Pos | Instruction                            |\n+-----+----------------------------------------+\n|   0 | set fanta@0 55                         |\n|   1 | stmt 9 \"DROP TABLE t2\"                 |\n|   2 | stmt 5 \"INSERT INTO t3 VALUES (fanta)\" |\n|   3 | jump 2                                 |\n+-----+----------------------------------------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-procedure-status/"], "Title": ["SHOW PROCEDURE STATUS"], "Feature": ["SHOW PROCEDURE STATUS\n    [LIKE 'pattern' | WHERE expr]\n"], "Description": ["This statement is a MariaDB extension. It returns characteristics of a stored\nprocedure, such as the database, name, type, creator, creation and modification\ndates, and character set information. A similar statement, \n SHOW FUNCTION STATUS, displays\ninformation about stored functions.", "The LIKE clause, if present, indicates which procedure or\nfunction names to match. The WHERE and LIKE clauses can be given to select rows using more general conditions, as discussed in Extended SHOW.", "The ROUTINES table in the INFORMATION_SCHEMA database contains more detailed information."], "Examples": ["SHOW PROCEDURE STATUS LIKE 'p1'\\G\n*************************** 1. row ***************************\n                  Db: test\n                Name: p1\n                Type: PROCEDURE\n             Definer: root@localhost\n            Modified: 2010-08-23 13:23:03\n             Created: 2010-08-23 13:23:03\n       Security_type: DEFINER\n             Comment: \ncharacter_set_client: latin1\ncollation_connection: latin1_swedish_ci\n  Database Collation: latin1_swedish_ci\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-processlist/"], "Title": ["SHOW PROCESSLIST"], "Feature": ["SHOW [FULL] PROCESSLIST\n"], "Description": ["SHOW PROCESSLIST shows you which threads are running. You\ncan also get this information from the\ninformation_schema.PROCESSLIST table or the mariadb-admin processlist command. If you have the \nPROCESS privilege, you can see all threads.\nOtherwise, you can see only your own threads (that is, threads associated with\nthe MariaDB account that you are using). If you do not use the\nFULL keyword, only the first 100 characters of each\nstatement are shown in the Info field.", "The columns shown in SHOW PROCESSLIST are:", "NameDescription\nIDThe client's process ID.\nUSERThe username associated with the process.\nHOSTThe host the client is connected to.\nDBThe default database of the process (NULL if no default).\nCOMMANDThe command type. See Thread Command Values.\nTIMEThe amount of time, in seconds, the process has been in its current state. For a replica SQL thread before MariaDB 10.1, this is the time in seconds between the last replicated event's timestamp and the replica machine's real time.\nSTATESee Thread States.\nINFOThe statement being executed.\nTIME_MSQuery statement time.\nSTAGEStage of the statement execution.\nMAX_STAGELast stage of the statement executeion.\nPROGRESSThe total progress of the process (0-100%) (see Progress Reporting).\nMEMORY_USEDMemory used by the statement.\nMAX_MEMORY_USEDPeak value of the memory usage for this statement.\nEXAMINED_ROWSRows examined.\nSENT_ROWSRows sent to client.\nQUERY_IDID of the statement being executed.\nINFO_BINARYInfo in binary charset.\nTIDOS thread ID (when applicable).\nTMP_SPACE_USEDAmount of space used in tmp directory.\n\n", "The information_schema.PROCESSLIST  table contains a number of additional columns. See TIME_MS column in information_schema.PROCESSLIST for differences in the TIME column between MariaDB and MySQL.", "Note that the PROGRESS field from the information schema, and the PROGRESS field from SHOW PROCESSLIST display different results. SHOW PROCESSLIST shows the total progress, while the information schema shows the progress for the current stage only.", "Threads can be killed using their thread_id or their query_id, with the KILL statement.", "Since queries on this table are locking, if the performance_schema is enabled, you may want to query the THREADS table instead."], "Examples": ["SHOW PROCESSLIST;\n+----+-----------------+-----------+------+---------+------+------------------------+------------------+----------+\n| Id | User            | Host      | db   | Command | Time | State                  | Info             | Progress |\n+----+-----------------+-----------+------+---------+------+------------------------+------------------+----------+\n|  2 | event_scheduler | localhost | NULL | Daemon  | 2693 | Waiting on empty queue | NULL             |    0.000 |\n|  4 | root            | localhost | NULL | Query   |    0 | Table lock             | SHOW PROCESSLIST |    0.000 |\n+----+-----------------+-----------+------+---------+------+------------------------+------------------+----------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-profile/"], "Title": ["SHOW PROFILE"], "Feature": ["SHOW PROFILE [type [, type] ... ]\n    [FOR QUERY n]\n    [LIMIT row_count [OFFSET offset]]\n\ntype:\n    ALL\n  | BLOCK IO\n  | CONTEXT SWITCHES\n  | CPU\n  | IPC\n  | MEMORY\n  | PAGE FAULTS\n  | SOURCE\n  | SWAPS\n"], "Description": ["The SHOW PROFILE and \nSHOW PROFILES statements display profiling\ninformation that indicates resource usage for statements executed during the\ncourse of the current session.", "Profiling is controlled by the profiling session variable, which has a default value of 0 (OFF). Profiling is enabled by setting profiling to 1 or ON:", "SET profiling = 1;\n", "SHOW PROFILES displays a list of the most recent statements\nsent to the master. The size of the list is controlled by the\nprofiling_history_size session variable, which has a default value of 15. The maximum value is 100. Setting the value to 0 has the practical effect of disabling profiling.", "All statements are profiled except SHOW PROFILES and \nSHOW PROFILE, so you will find neither of those statements\nin the profile list.  Malformed statements are profiled. For example, \n SHOW PROFILING is an illegal statement, and a syntax error\noccurs if you try to execute it, but it will show up in the profiling list.", " SHOW PROFILE displays detailed information about a single\nstatement.  Without the FOR QUERY n clause, the output\npertains to the most recently executed statement. If \n FOR QUERY n is included,\n SHOW PROFILE displays information for statement n. The\nvalues of n correspond to\nthe Query_ID values displayed by SHOW PROFILES.", "The LIMIT row_count clause may be given to limit the\noutput to row_count rows. If LIMIT is given, \n OFFSET offset may be added to begin the output offset\nrows into the full set of rows.", "By default, SHOW PROFILE displays Status and Duration\ncolumns. The Status values are like the State values displayed by SHOW PROCESSLIST (see General Thread States), although there might be some minor differences in interpretation for the two statements for some status values.", "Optional type values may be specified to display specific additional types of information:", "ALL displays all information\nBLOCK IO displays counts for block input and output operations\nCONTEXT SWITCHES displays counts for voluntary and involuntary context switches\nCPU displays user and system CPU usage times\nIPC displays counts for messages sent and received\nMEMORY is not currently implemented\nPAGE FAULTS displays counts for major and minor page faults\nSOURCE displays the names of functions from the source code, together with the name and line number of the file in which the function occurs\nSWAPS displays swap counts\n", "Profiling is enabled per session. When a session ends, its profiling information is lost.", "The information_schema.PROFILING table contains similar information."], "Examples": ["SELECT @@profiling;\n+-------------+\n| @@profiling |\n+-------------+\n|           0 |\n+-------------+\n\nSET profiling = 1;\n\nUSE test;\n\nDROP TABLE IF EXISTS t1;\n\nCREATE TABLE T1 (id INT);\n\nSHOW PROFILES;\n+----------+------------+--------------------------+\n| Query_ID | Duration   | Query                    |\n+----------+------------+--------------------------+\n|        1 | 0.00009200 | SELECT DATABASE()        |\n|        2 | 0.00023800 | show databases           |\n|        3 | 0.00018900 | show tables              |\n|        4 | 0.00014700 | DROP TABLE IF EXISTS t1  |\n|        5 | 0.24476900 | CREATE TABLE T1 (id INT) |\n+----------+------------+--------------------------+\n\nSHOW PROFILE;\n+----------------------+----------+\n| Status               | Duration |\n+----------------------+----------+\n| starting             | 0.000042 |\n| checking permissions | 0.000044 |\n| creating table       | 0.244645 |\n| After create         | 0.000013 |\n| query end            | 0.000003 |\n| freeing items        | 0.000016 |\n| logging slow query   | 0.000003 |\n| cleaning up          | 0.000003 |\n+----------------------+----------+\n\nSHOW PROFILE FOR QUERY 4;\n+--------------------+----------+\n| Status             | Duration |\n+--------------------+----------+\n| starting           | 0.000126 |\n| query end          | 0.000004 |\n| freeing items      | 0.000012 |\n| logging slow query | 0.000003 |\n| cleaning up        | 0.000002 |\n+--------------------+----------+\n\nSHOW PROFILE CPU FOR QUERY 5;\n+----------------------+----------+----------+------------+\n| Status               | Duration | CPU_user | CPU_system |\n+----------------------+----------+----------+------------+\n| starting             | 0.000042 | 0.000000 |   0.000000 |\n| checking permissions | 0.000044 | 0.000000 |   0.000000 |\n| creating table       | 0.244645 | 0.000000 |   0.000000 |\n| After create         | 0.000013 | 0.000000 |   0.000000 |\n| query end            | 0.000003 | 0.000000 |   0.000000 |\n| freeing items        | 0.000016 | 0.000000 |   0.000000 |\n| logging slow query   | 0.000003 | 0.000000 |   0.000000 |\n| cleaning up          | 0.000003 | 0.000000 |   0.000000 |\n+----------------------+----------+----------+------------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-profiles/"], "Title": ["SHOW PROFILES"], "Feature": ["SHOW PROFILES\n"], "Description": ["The SHOW PROFILES statement displays profiling information\nthat indicates resource usage for statements executed during the course of the\ncurrent session. It is used together with \nSHOW PROFILE."], "Examples": [], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-relaylog-events/"], "Title": ["SHOW RELAYLOG EVENTS"], "Feature": ["SHOW RELAYLOG ['connection_name'] EVENTS\n    [IN 'log_name'] [FROM pos] [LIMIT [offset,] row_count]\n    [ FOR CHANNEL 'channel_name']\n"], "Description": ["On replicas, this command shows the events in the relay log. If 'log_name' is not specified, the first relay log is shown.", "Syntax for the LIMIT clause is the same as for SELECT ... LIMIT.", "Using the LIMIT clause is highly recommended because the SHOW RELAYLOG EVENTS command returns the complete contents of the relay log, which can be quite large.\n", "This command does not return events related to setting user and system variables. If you need those, use mariadb-binlog.", "On the primary, this command does nothing.", "Requires the REPLICA MONITOR privilege (>= MariaDB 10.5.9), the REPLICATION SLAVE ADMIN privilege (>= MariaDB 10.5.2) or the REPLICATION SLAVE privilege (<= MariaDB 10.5.1).", "connection_name", "If there is only one nameless primary, or the default primary (as specified by the default_master_connection system variable) is intended, connection_name can be omitted. If provided, the SHOW RELAYLOG statement will apply to the specified primary. connection_name is case-insensitive.", "MariaDB starting with 10.7.0The FOR CHANNEL keyword was added for MySQL compatibility. This is identical as\nusing the channel_name directly after SHOW RELAYLOG.\n"], "Examples": [], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-replica-hosts/"], "Title": ["SHOW REPLICA HOSTS"], "Feature": ["SHOW SLAVE HOSTS\nSHOW REPLICA HOSTS -- from MariaDB 10.5.1\n"], "Description": ["This command is run on the primary and displays a list of replicas that are currently registered with it. Only replicas started with the --report-host=host_name option\nare visible in this list.", "The output looks like this:", "SHOW SLAVE HOSTS;\n+------------+-----------+------+-----------+\n| Server_id  | Host      | Port | Master_id |\n+------------+-----------+------+-----------+\n|  192168010 | iconnect2 | 3306 | 192168011 |\n| 1921680101 | athena    | 3306 | 192168011 |\n+------------+-----------+------+-----------+\n", "Server_id: The unique server ID of the replica server, as configured in the server's option file, or on the command line with --server-id=value.\nHost: The host name of the replica server, as configured in the server's option file, or on the command line with --report-host=host_name. Note that this can differ from the machine name as configured in the operating system.\nPort: The port the replica server is listening on.\nMaster_id: The unique server ID of the primary server that the replica server is replicating from.\n", "Some MariaDB and MySQL versions report another variable, rpl_recovery_rank. This\nvariable was never used, and was eventually removed in MariaDB 10.1.2 .", "Requires the REPLICATION MASTER ADMIN privilege (>= MariaDB 10.5.2) or the REPLICATION SLAVE privilege (<= MariaDB 10.5.1).", "SHOW REPLICA HOSTS", "MariaDB starting with 10.5.1SHOW REPLICA HOSTS is an alias for SHOW SLAVE HOSTS from MariaDB 10.5.1. \n"], "Examples": [], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-replica-status/"], "Title": ["SHOW REPLICA STATUS"], "Feature": ["SHOW SLAVE [\"connection_name\"] STATUS [FOR CHANNEL \"connection_name\"]\nSHOW REPLICA [\"connection_name\"] STATUS -- From MariaDB 10.5.1\n", "or", "SHOW ALL SLAVES STATUS\nSHOW ALL REPLICAS STATUS -- From MariaDB 10.5.1\n"], "Description": ["This statement is to be run on a replica and provides status information on essential parameters of the replica threads.", "This statement requires the SUPER privilege, the REPLICATION_CLIENT privilege, or, from MariaDB 10.5.2, the REPLICATION SLAVE ADMIN privilege, or, from MariaDB 10.5.9, the REPLICA MONITOR privilege.", "Multi-Source", "The ALL and \"connection_name\" options allow you to connect to many primaries at the same time.", "ALL SLAVES (or ALL REPLICAS from MariaDB 10.5.1) gives you a list of all connections to the primary nodes.", "The rows will be sorted according to Connection_name.", "If you specify a connection_name, you only get the information about that\nconnection. If connection_name is not used, then the name set by default_master_connection is used. If the connection name doesn't exist you will get an error:\nThere is no master connection for 'xxx'.", "MariaDB starting with 10.7.0The FOR CHANNEL keyword was added for MySQL compatibility. This is identical to\nusing the channel_name directly after SHOW SLAVE.\n", "Column Descriptions", "The order in which the columns appear depends on the MariaDB version. This means that extracting a column value is best done by comparing the field name instead of using a fixed offset into the row.", "NameDescription\nConnection_nameName of the primary connection. Returned with SHOW ALL SLAVES STATUS (or SHOW ALL REPLICAS STATUS from MariaDB 10.5.1) only.\nSlave_SQL_StateState of SQL thread. Returned with SHOW ALL SLAVES STATUS (or SHOW ALL REPLICAS STATUS from MariaDB 10.5.1) only. See Slave SQL Thread States.\nSlave_IO_StateState of I/O thread. See Slave I/O Thread States.\nMaster_hostMaster host that the replica is connected to.\nMaster_userAccount user name being used to connect to the primary.\nMaster_portThe port being used to connect to the primary.\nConnect_RetryTime in seconds between retries to connect. The default is 60. The CHANGE MASTER TO statement can set this. The master-retry-count option determines the maximum number of reconnection attempts.\nMaster_Log_FileName of the primary binary log file that the I/O thread is currently reading from.\nRead_Master_Log_PosPosition up to which the I/O thread has read in the current primary binary log file.\nRelay_Log_FileName of the relay log file that the SQL thread is currently processing.\nRelay_Log_PosPosition up to which the SQL thread has finished processing in the current relay log file.\nRelay_Master_Log_FileName of the primary binary log file that contains the most recent event executed by the SQL thread.\nSlave_IO_RunningWhether the replica I/O thread is running and connected (Yes), running but not connected to a primary (Connecting) or not running (No).\nSlave_SQL_RunningWhether or not the SQL thread is running.\nReplicate_Rewrite_DBDatabases specified for replicating  and rewriting with the replicate_rewrite_db option. Added in MariaDB 10.11\nReplicate_Do_DBDatabases specified for replicating with the replicate_do_db option.\nReplicate_Ignore_DBDatabases specified for ignoring with the replicate_ignore_db option.\nReplicate_Do_TableTables specified for replicating with the replicate_do_table option.\nReplicate_Ignore_TableTables specified for ignoring with the replicate_ignore_table option.\nReplicate_Wild_Do_TableTables specified for replicating with the replicate_wild_do_table option.\nReplicate_Wild_Ignore_TableTables specified for ignoring with the replicate_wild_ignore_table option.\nLast_ErrnoAlias for Last_SQL_Errno (see below)\nLast ErrorAlias for Last_SQL_Error (see below)\nSkip_CounterNumber of events that a replica skips from the master, as recorded in the sql_slave_skip_counter system variable.\nExec_Master_Log_PosPosition up to which the SQL thread has processed in the current master binary log file. Can be used to start a new replica from a current replica with the CHANGE MASTER TO ... MASTER_LOG_POS option.\nRelay_Log_SpaceTotal size of all relay log files combined.\nUntil_Condition\nUntil_Log_FileThe MASTER_LOG_FILE value of the START SLAVE UNTIL condition.\nUntil_Log_PosThe MASTER_LOG_POS value of the START SLAVE UNTIL condition.\nMaster_SSL_AllowedWhether an SSL connection is permitted (Yes), not permitted (No) or permitted but without the replica having SSL support enabled (Ignored)\nMaster_SSL_CA_FileThe MASTER_SSL_CA option of the CHANGE MASTER TO statement.\nMaster_SSL_CA_PathThe MASTER_SSL_CAPATH option of the CHANGE MASTER TO statement.\nMaster_SSL_CertThe MASTER_SSL_CERT option of the CHANGE MASTER TO statement.\nMaster_SSL_CipherThe MASTER_SSL_CIPHER option of the CHANGE MASTER TO statement.\nMaster_SSL_KeyThe MASTER_SSL_KEY option of the CHANGE MASTER TO statement.\nSeconds_Behind_MasterDifference between the timestamp logged on the master for the event that the replica is currently processing, and the current timestamp on the replica. Zero if the replica is not currently processing an event. With serial replication, seconds_behind_master is updated when the SQL thread begins executing a transaction. With parallel replication, seconds_behind_master is updated only after transactions commit. Starting in MariaDB 10.3.38, 10.4.28, 10.5.19, 10.6.12, 10.8.7, 10.9.5, 10.10.3, and 10.11.2, an exception is drawn on the parallel replica to additionally update seconds_behind_master when the first transaction received after idling is queued to a worker for execution, to provide a reliable initial value for the duration until a transaction commits. Additional behaviors to be aware of are as follows: 1) Seconds_Behind_Master will update for ignored events, e.g. those skipped due to sql_slave_skip_counter. 2) On the serial replica, transactions with prior timestamps can update Seconds_Behind_Master such that it can go backwards, though this is not true for the parallel replica. 3) When configured with MASTER_DELAY, as a replicated transaction begins executing (i.e. on a serial or post-idle parallel replica), Seconds_Behind_Master will update before delaying, and while delaying occurs will grow to encompass the configured value. 4) There is a known issue, tracked by MDEV-17516, such that Seconds_Behind_Master will initially present as 0 on replica restart until a replicated transaction begins executing, even if the last replica session was lagging behind when stopped.\nMaster_SSL_Verify_Server_CertThe MASTER_SSL_VERIFY_SERVER_CERT option of the CHANGE MASTER TO statement.\nLast_IO_ErrnoError code of the most recent error that caused the I/O thread to stop (also recorded in the replica's error log). 0 means no error. RESET SLAVE or RESET MASTER will reset this value.\nLast_IO_ErrorError message of the most recent error that caused the I/O thread to stop (also recorded in the replica's error log). An empty string means no error. RESET SLAVE or RESET MASTER will reset this value.\nLast_SQL_ErrnoError code of the most recent error that caused the SQL thread to stop (also recorded in the replica's error log). 0 means no error. RESET SLAVE or RESET MASTER will reset this value.\nLast_SQL_ErrorError message of the most recent error that caused the SQL thread to stop (also recorded in the replica's error log). An empty string means no error. RESET SLAVE or RESET MASTER will reset this value.\nReplicate_Ignore_Server_IdsList of server_ids that are currently being ignored for replication purposes, or an empty string for none, as specified in the IGNORE_SERVER_IDS option of the CHANGE MASTER TO statement.\nMaster_Server_IdThe master's server_id value.\nMaster_SSL_CrlThe MASTER_SSL_CRL option of the CHANGE MASTER TO statement.\nMaster_SSL_CrlpathThe MASTER_SSL_CRLPATH option of the CHANGE MASTER TO statement.\nUsing_GtidWhether or not global transaction ID's are being used for replication (can be No, Slave_Pos, or Current_Pos).\nGtid_IO_PosCurrent global transaction ID value.\nRetried_transactionsNumber of retried transactions for this connection. Returned with SHOW ALL SLAVES STATUS only.\nMax_relay_log_sizeMax relay log size for this connection. Returned with SHOW ALL SLAVES STATUS only.\nExecuted_log_entriesHow many log entries the replica has executed. Returned with SHOW ALL SLAVES STATUS only.\nSlave_received_heartbeatsHow many heartbeats we have got from the master. Returned with SHOW ALL SLAVES STATUS only.\nSlave_heartbeat_periodHow often to request a heartbeat packet from the master (in seconds). Returned with SHOW ALL SLAVES STATUS only.\nGtid_Slave_PosGTID of the last event group replicated on a replica server, for each replication domain, as stored in the gtid_slave_pos system variable. Returned with SHOW ALL SLAVES STATUS only.\nSQL_DelayValue specified by MASTER_DELAY in CHANGE MASTER (or 0 if none).\nSQL_Remaining_DelayWhen the replica is delaying the execution of an event due to MASTER_DELAY, this is the number of seconds of delay remaining before the event will be applied. Otherwise, the value is NULL.\nSlave_SQL_Running_StateThe state of the SQL driver threads, same as in SHOW PROCESSLIST. When the replica is delaying the execution of an event due to MASTER_DELAY, this field displays: \"Waiting until MASTER_DELAY seconds after master executed event\".\nSlave_DDL_GroupsThis status variable counts the occurrence of DDL statements.  This is a replica-side counter for optimistic parallel replication.\nSlave_Non_Transactional_GroupsThis status variable counts the occurrence of non-transactional event groups.  This is a replica-side counter for optimistic parallel replication.\nSlave_Transactional_GroupsThis status variable counts the occurrence of transactional event groups.  This is a replica-side counter for optimistic parallel replication.\nReplicate_Rewrite_DB\nRetried_transactions\nMax_relay_log_size\nExecuted_log_entries\nSlave_received_heartbeats\nSlave_heartbeat_period\nGtid_Slave_Pos\nMaster_last_event_timeTimestamp of the last event read from the primary by the IO thread. NULL until the replica has started and the replica has read one query event from the primary that changes data. From MariaDB 11.6.\nSlave_last_event_timePrimary timestamp of the last event committed on the replica. NULL until the replica has started and the replica has read one query event from the primary that changes data. From MariaDB 11.6.\nMaster_Slave_time_diffThe difference of the above two timestamps. NULL until the replica has started and the replica has read one query event from the primary that changes data. From MariaDB 11.6.\n\n"], "Examples": ["SHOW SLAVE STATUS\\G\n*************************** 1. row ***************************\n               Slave_IO_State: Waiting for master to send event\n                  Master_Host: db01.example.com\n                  Master_User: replicant\n                  Master_Port: 3306\n                Connect_Retry: 60\n              Master_Log_File: mariadb-bin.000010\n          Read_Master_Log_Pos: 548\n               Relay_Log_File: relay-bin.000004\n                Relay_Log_Pos: 837\n        Relay_Master_Log_File: mariadb-bin.000010\n             Slave_IO_Running: Yes\n            Slave_SQL_Running: Yes\n              Replicate_Do_DB: \n          Replicate_Ignore_DB: \n           Replicate_Do_Table: \n       Replicate_Ignore_Table: \n      Replicate_Wild_Do_Table: \n  Replicate_Wild_Ignore_Table: \n                   Last_Errno: 0\n                   Last_Error: \n                 Skip_Counter: 0\n          Exec_Master_Log_Pos: 548\n              Relay_Log_Space: 1497\n              Until_Condition: None\n               Until_Log_File: \n                Until_Log_Pos: 0\n           Master_SSL_Allowed: No\n           Master_SSL_CA_File: \n           Master_SSL_CA_Path: \n              Master_SSL_Cert: \n            Master_SSL_Cipher: \n               Master_SSL_Key: \n        Seconds_Behind_Master: 0\nMaster_SSL_Verify_Server_Cert: No\n                Last_IO_Errno: 0\n                Last_IO_Error: \n               Last_SQL_Errno: 0\n               Last_SQL_Error: \n  Replicate_Ignore_Server_Ids: \n             Master_Server_Id: 101\n               Master_SSL_Crl: \n           Master_SSL_Crlpath: \n                   Using_Gtid: No\n                  Gtid_IO_Pos: \n", "SHOW ALL SLAVES STATUS\\G\n*************************** 1. row ***************************\n              Connection_name: \n              Slave_SQL_State: Slave has read all relay log; waiting for the slave I/O thread to update it\n               Slave_IO_State: Waiting for master to send event\n                  Master_Host: db01.example.com\n                  Master_User: replicant\n                  Master_Port: 3306\n                Connect_Retry: 60\n              Master_Log_File: mariadb-bin.000010\n          Read_Master_Log_Pos: 3608\n               Relay_Log_File: relay-bin.000004\n                Relay_Log_Pos: 3897\n        Relay_Master_Log_File: mariadb-bin.000010\n             Slave_IO_Running: Yes\n            Slave_SQL_Running: Yes\n              Replicate_Do_DB: \n          Replicate_Ignore_DB: \n           Replicate_Do_Table: \n       Replicate_Ignore_Table: \n      Replicate_Wild_Do_Table: \n  Replicate_Wild_Ignore_Table: \n                   Last_Errno: 0\n                   Last_Error: \n                 Skip_Counter: 0\n          Exec_Master_Log_Pos: 3608\n              Relay_Log_Space: 4557\n              Until_Condition: None\n               Until_Log_File: \n                Until_Log_Pos: 0\n           Master_SSL_Allowed: No\n           Master_SSL_CA_File: \n           Master_SSL_CA_Path: \n              Master_SSL_Cert: \n            Master_SSL_Cipher: \n               Master_SSL_Key: \n        Seconds_Behind_Master: 0\nMaster_SSL_Verify_Server_Cert: No\n                Last_IO_Errno: 0\n                Last_IO_Error: \n               Last_SQL_Errno: 0\n               Last_SQL_Error: \n  Replicate_Ignore_Server_Ids: \n             Master_Server_Id: 101\n               Master_SSL_Crl: \n           Master_SSL_Crlpath: \n                   Using_Gtid: No\n                  Gtid_IO_Pos:\n         Retried_transactions: 0\n           Max_relay_log_size: 104857600\n         Executed_log_entries: 40\n    Slave_received_heartbeats: 11\n       Slave_heartbeat_period: 1800.000\n               Gtid_Slave_Pos: 0-101-2320\n", "SET @@default_master_connection=\"test\" ;\nshow status like \"%slave%\"\n\nVariable_name   Value\nCom_show_slave_hosts    0\nCom_show_slave_status   0\nCom_start_all_slaves    0\nCom_start_slave 0\nCom_stop_all_slaves     0\nCom_stop_slave  0\nRpl_semi_sync_slave_status      OFF\nSlave_connections       0\nSlave_heartbeat_period  1800.000\nSlave_open_temp_tables  0\nSlave_received_heartbeats       0\nSlave_retried_transactions      0\nSlave_running   OFF\nSlaves_connected        0\nSlaves_running  1\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-status/"], "Title": ["SHOW STATUS"], "Feature": ["SHOW [GLOBAL | SESSION] STATUS\n    [LIKE 'pattern' | WHERE expr]\n"], "Description": ["SHOW STATUS provides server status information. This\ninformation also can be obtained using the mariadb-admin extended-status command, or by querying the Information Schema GLOBAL_STATUS and SESSION_STATUS tables.\nThe LIKE clause, if present, indicates which variable names\nto match. The WHERE clause can be given to select rows using\nmore general conditions.", "With the GLOBAL modifier, SHOW STATUS\ndisplays the status values for all connections to MariaDB. With\nSESSION, it displays the status values\nfor the current connection. If no modifier is present, the default is\n SESSION. LOCAL is a synonym for\n SESSION. If you see a lot of 0 values, the reason is probably that you have used SHOW STATUS with a new connection instead of SHOW GLOBAL STATUS.", "Some status variables have only a global value. For these, you get the\nsame value for both GLOBAL and SESSION.", "See Server Status Variables for a full list, scope and description of the variables that can be viewed with SHOW STATUS.", "The LIKE clause, if present on its own, indicates which variable name to match.", "The WHERE and LIKE clauses can be given to select rows using more general conditions, as discussed in Extended SHOW."], "Examples": ["SHOW GLOBAL STATUS;\n+--------------------------------------------------------------+----------------------------------------+\n| Variable_name                                                | Value                                  |\n+--------------------------------------------------------------+----------------------------------------+\n| Aborted_clients                                              | 0                                      |\n| Aborted_connects                                             | 0                                      |\n| Access_denied_errors                                         | 0                                      |\n| Acl_column_grants                                            | 0                                      |\n| Acl_database_grants                                          | 2                                      |\n| Acl_function_grants                                          | 0                                      |\n| Acl_procedure_grants                                         | 0                                      |\n| Acl_proxy_users                                              | 2                                      |\n| Acl_role_grants                                              | 0                                      |\n| Acl_roles                                                    | 0                                      |\n| Acl_table_grants                                             | 0                                      |\n| Acl_users                                                    | 6                                      |\n| Aria_pagecache_blocks_not_flushed                            | 0                                      |\n| Aria_pagecache_blocks_unused                                 | 15706                                  |\n...\n| wsrep_local_index                                            | 18446744073709551615                   |\n| wsrep_provider_name                                          |                                        |\n| wsrep_provider_vendor                                        |                                        |\n| wsrep_provider_version                                       |                                        |\n| wsrep_ready                                                  | OFF                                    |\n| wsrep_thread_count                                           | 0                                      |\n+--------------------------------------------------------------+----------------------------------------+\n516 rows in set (0.00 sec)\n", "SHOW STATUS LIKE 'Key%';\n+------------------------+--------+\n| Variable_name          | Value  |\n+------------------------+--------+\n| Key_blocks_not_flushed | 0      |\n| Key_blocks_unused      | 107163 |\n| Key_blocks_used        | 0      |\n| Key_blocks_warm        | 0      |\n| Key_read_requests      | 0      |\n| Key_reads              | 0      |\n| Key_write_requests     | 0      |\n| Key_writes             | 0      |\n+------------------------+--------+\n8 rows in set (0.00 sec)\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-table-status/"], "Title": ["SHOW TABLE STATUS"], "Feature": ["SHOW TABLE STATUS [{FROM | IN} db_name]\n    [LIKE 'pattern' | WHERE expr]\n"], "Description": [" SHOW TABLE STATUS works like SHOW TABLES, but provides more extensive information about each table (until MariaDB 11.2.0, only non-TEMPORARY tables are shown).", "The LIKE clause, if present on its own, indicates which table names to\nmatch. The WHERE and LIKE clauses can be given to select rows using more general conditions, as discussed in Extended SHOW.", "The following information is returned:", "ColumnDescription\nNameTable name.\nEngineTable storage engine.\nVersionVersion number from the table's .frm file.\nRow_formatRow format (see InnoDB, Aria and MyISAM row formats).\nRowsNumber of rows in the table. Some engines, such as InnoDB may store an estimate.\nAvg_row_lengthAverage row length in the table.\nData_lengthFor InnoDB, the index size, in pages, multiplied by the page size. For Aria and MyISAM, length of the data file, in bytes. For MEMORY, the approximate allocated memory.\nMax_data_lengthMaximum length of the data file, ie the total number of bytes that could be stored in the table. Not used in InnoDB.\nIndex_lengthLength of the index file.\nData_freeBytes allocated but unused. For InnoDB tables in a shared tablespace, the free space of the shared tablespace with small safety margin. An estimate in the case of partitioned tables - see the PARTITIONS table.\nAuto_incrementNext AUTO_INCREMENT value.\nCreate_timeTime the table was created. Some engines just return the ctime information from the file system layer here, in that case the value is not necessarily the table creation time but rather the time the file system metadata for it had last changed.\nUpdate_timeTime the table was last updated. On Windows, the timestamp is not updated on update, so MyISAM values will be inaccurate. In InnoDB, if shared tablespaces are used, will be NULL, while buffering can also delay the update, so the value will differ from the actual time of the last UPDATE, INSERT or DELETE.\nCheck_timeTime the table was last checked. Not kept by all storage engines, in which case will be NULL.\nCollationCharacter set and collation.\nChecksumLive checksum value, if any.\nCreate_optionsExtra CREATE TABLE options.\nCommentTable comment provided when MariaDB created the table.\nMax_index_lengthMaximum index length (supported by MyISAM and Aria tables).\nTemporaryUntil MariaDB 11.2.0, placeholder to signal that a table is a temporary table and always \"N\", except \"Y\" for generated information_schema tables and NULL for views. From MariaDB 11.2.0, will also be set to \"Y\" for local temporary tables.\n\n", "Similar information can be found in the information_schema.TABLES table as well as by using mariadb-show:", "mariadb-show --status db_name\n"], "Examples": ["show table status\\G\n*************************** 1. row ***************************\n           Name: bus_routes\n         Engine: InnoDB\n        Version: 10\n     Row_format: Dynamic\n           Rows: 5\n Avg_row_length: 3276\n    Data_length: 16384\nMax_data_length: 0\n   Index_length: 0\n      Data_free: 0\n Auto_increment: NULL\n    Create_time: 2017-05-24 11:17:46\n    Update_time: NULL\n     Check_time: NULL\n      Collation: latin1_swedish_ci\n       Checksum: NULL\n Create_options: \n        Comment:\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/change-master-to/"], "Title": ["CHANGE MASTER TO"], "Feature": ["CHANGE MASTER ['connection_name'] TO master_def  [, master_def] ... \n  [FOR CHANNEL 'channel_name']\n\nmaster_def:\n    MASTER_BIND = 'interface_name'\n  | MASTER_HOST = 'host_name'\n  | MASTER_USER = 'user_name'\n  | MASTER_PASSWORD = 'password'\n  | MASTER_PORT = port_num\n  | MASTER_CONNECT_RETRY = interval\n  | MASTER_HEARTBEAT_PERIOD = interval\n  | MASTER_LOG_FILE = 'master_log_name'\n  | MASTER_LOG_POS = master_log_pos\n  | RELAY_LOG_FILE = 'relay_log_name'\n  | RELAY_LOG_POS = relay_log_pos\n  | MASTER_DELAY = interval\n  | MASTER_SSL = {0|1}\n  | MASTER_SSL_CA = 'ca_file_name'\n  | MASTER_SSL_CAPATH = 'ca_directory_name'\n  | MASTER_SSL_CERT = 'cert_file_name'\n  | MASTER_SSL_CRL = 'crl_file_name'\n  | MASTER_SSL_CRLPATH = 'crl_directory_name'\n  | MASTER_SSL_KEY = 'key_file_name'\n  | MASTER_SSL_CIPHER = 'cipher_list'\n  | MASTER_SSL_VERIFY_SERVER_CERT = {0|1}\n  | MASTER_USE_GTID = {current_pos|slave_pos|no}\n  | MASTER_DEMOTE_TO_SLAVE = bool\n  | IGNORE_SERVER_IDS = (server_id_list)\n  | DO_DOMAIN_IDS = ([N,..])\n  | IGNORE_DOMAIN_IDS = ([N,..])\n"], "Description": ["CHANGE MASTER is used on a replica to setup or change replication settings for connecting to the primary.", "MariaDB starting with 10.7.0The FOR CHANNEL keyword was added for MySQL compatibility. This is identical to\nusing the channel_name directly after CHANGE MASTER.\n"], "Examples": ["CHANGE MASTER TO\n   MASTER_HOST='master2.mycompany.com',\n   MASTER_USER='replication',\n   MASTER_PASSWORD='bigs3cret',\n   MASTER_PORT=3306,\n   MASTER_LOG_FILE='master2-bin.001',\n   MASTER_LOG_POS=4,\n   MASTER_CONNECT_RETRY=10;\nSTART SLAVE;\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/alter-event/"], "Title": ["ALTER EVENT"], "Feature": ["ALTER\n    [DEFINER = { user | CURRENT_USER }]\n    EVENT event_name\n    [ON SCHEDULE schedule]\n    [ON COMPLETION [NOT] PRESERVE]\n    [RENAME TO new_event_name]\n    [ENABLE | DISABLE | DISABLE ON SLAVE]\n    [COMMENT 'comment']\n    [DO sql_statement]\n"], "Description": ["The ALTER EVENT statement is used to change one or more of the\ncharacteristics of an existing event without the need to drop and recreate it.\nThe syntax for each of the DEFINER, ON SCHEDULE, ON COMPLETION,\nCOMMENT, ENABLE / DISABLE, and DO clauses is exactly the\nsame as when used with CREATE EVENT.", "This statement requires the EVENT privilege.\nWhen a user executes a successful ALTER EVENT statement, that user becomes\nthe definer for the affected event.", "(In MySQL 5.1.11 and earlier, an event could be altered only by its definer, or\nby a user having the SUPER privilege.)", "ALTER EVENT works only with an existing event:", "ALTER EVENT no_such_event ON SCHEDULE EVERY '2:3' DAY_HOUR;\nERROR 1539 (HY000): Unknown event 'no_such_event'\n"], "Examples": ["ALTER EVENT myevent \n  ON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 2 HOUR \n  DO \n    UPDATE myschema.mytable SET mycol = mycol + 1;\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-tables/"], "Title": ["SHOW TABLES"], "Feature": ["SHOW [FULL] TABLES [FROM db_name]\n    [LIKE 'pattern' | WHERE expr]\n"], "Description": ["SHOW TABLES lists the tables (until MariaDB 11.2.0, only non-TEMPORARY tables are shown), sequences and views in a given database. ", "The LIKE clause, if present on its own, indicates which table names to match. The WHERE and LIKE clauses can be given to select rows using more general conditions, as discussed in Extended SHOW. For example, when searching for tables in the test database, the column name for use in the WHERE and LIKE clauses will be Tables_in_test", "The FULL modifier is supported such that SHOW FULL TABLES displays a second output column. Values for the second column, Table_type, are BASE TABLE for a table, VIEW for a view and SEQUENCE for a sequence.", "You can also get this information using:", "mariadb-show db_name\n", "See mariadb-show for more details.", "If you have no privileges for a base table or view, it does not show up in the output from SHOW TABLES or mariadb-show db_name.", "The information_schema.TABLES table, as well as the SHOW TABLE STATUS statement, provide extended information about tables."], "Examples": ["SHOW TABLES;\n+----------------------+\n| Tables_in_test       |\n+----------------------+\n| animal_count         |\n| animals              |\n| are_the_mooses_loose |\n| aria_test2           |\n| t1                   |\n| view1                |\n+----------------------+\n", "SHOW TABLES WHERE Tables_in_test LIKE 'a%';\n+----------------------+\n| Tables_in_test       |\n+----------------------+\n| animal_count         |\n| animals              |\n| are_the_mooses_loose |\n| aria_test2           |\n+----------------------+\n", "SHOW FULL TABLES;\n+----------------+------------+\n| Tables_in_test | Table_type |\n+----------------+------------+\n| s1             | SEQUENCE   |\n| student        | BASE TABLE |\n| v1             | VIEW       |\n+----------------+------------+\n", "CREATE TABLE t (t int(11));\nCREATE TEMPORARY TABLE t (t int(11));\nCREATE TEMPORARY TABLE te (t int(11));\n\nSHOW TABLES;\n+----------------+\n| Tables_in_test |\n+----------------+\n| t              |\n+----------------+\n", "CREATE TABLE t (t int(11));\nCREATE TEMPORARY TABLE t (t int(11));\nCREATE TEMPORARY TABLE te (t int(11));\n\nSHOW TABLES;\n+----------------+\n| Tables_in_test |\n+----------------+\n| te             |\n| t              |\n| t              |\n+----------------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-table-statistics/"], "Title": ["SHOW TABLE_STATISTICS"], "Feature": ["SHOW TABLE_STATISTICS\n"], "Description": ["The SHOW TABLE_STATISTICS statementis part of the User Statistics feature. It was removed as a separate statement in MariaDB 10.1.1, but effectively replaced by the generic SHOW information_schema_table statement. The information_schema.TABLE_STATISTICS table shows statistics on table usage", "The userstat system variable must be set to 1 to activate this feature. See the User Statistics and information_schema.TABLE_STATISTICS articles for more information."], "Examples": ["SHOW TABLE_STATISTICS\\G\n*************************** 1. row ***************************\n           Table_schema: mysql\n             Table_name: proxies_priv\n              Rows_read: 2\n           Rows_changed: 0\nRows_changed_x_#indexes: 0\n*************************** 2. row ***************************\n           Table_schema: test\n             Table_name: employees_example\n              Rows_read: 7\n           Rows_changed: 0\nRows_changed_x_#indexes: 0\n*************************** 3. row ***************************\n           Table_schema: mysql\n             Table_name: user\n              Rows_read: 16\n           Rows_changed: 0\nRows_changed_x_#indexes: 0\n*************************** 4. row ***************************\n           Table_schema: mysql\n             Table_name: db\n              Rows_read: 2\n           Rows_changed: 0\nRows_changed_x_#indexes: 0\n\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-triggers/"], "Title": ["SHOW TRIGGERS"], "Feature": ["SHOW TRIGGERS [FROM db_name]\n    [LIKE 'pattern' | WHERE expr]\n"], "Description": [" SHOW TRIGGERS lists the triggers currently defined for\ntables in a database (the default database unless a FROM\nclause is given).  This statement requires the\nTRIGGER privilege (prior to MySQL\n5.1.22, it required the SUPER privilege). ", "The LIKE clause, if present on its own, indicates which table names to\nmatch and causes the statement to display triggers for those tables. The WHERE and LIKE clauses can be given to select rows using more general conditions, as discussed in Extended SHOW.", "Similar information is stored in the information_schema.TRIGGERS table.", "If there are multiple triggers for the same action, then the triggers are shown in action order."], "Examples": ["SHOW triggers Like 'animals' \\G\n*************************** 1. row ***************************\n             Trigger: the_mooses_are_loose\n               Event: INSERT\n               Table: animals\n           Statement: BEGIN\n IF NEW.name = 'Moose' THEN\n  UPDATE animal_count SET animal_count.animals = animal_count.animals+100;\n ELSE \n  UPDATE animal_count SET animal_count.animals = animal_count.animals+1;\n END IF;\nEND\n              Timing: AFTER\n             Created: 2016-09-29 13:53:34.35\n            sql_mode: \n             Definer: root@localhost\ncharacter_set_client: utf8\ncollation_connection: utf8_general_ci\n  Database Collation: latin1_swedish_ci\n", "SHOW TRIGGERS FROM test WHERE `Table` = 'user' \\G\n*************************** 1. row ***************************\n             Trigger: user_ai\n               Event: INSERT\n               Table: user\n           Statement: BEGIN END\n              Timing: AFTER\n             Created:  2016-09-29 13:53:34.35\n            sql_mode: \n             Definer: root@%\ncharacter_set_client: utf8\ncollation_connection: utf8_general_ci\n  Database Collation: latin1_swedish_ci\n", "SHOW triggers WHERE Event Like 'Insert' \\G\n*************************** 1. row ***************************\n             Trigger: the_mooses_are_loose\n               Event: INSERT\n               Table: animals\n           Statement: BEGIN\n IF NEW.name = 'Moose' THEN\n  UPDATE animal_count SET animal_count.animals = animal_count.animals+100;\n ELSE \n  UPDATE animal_count SET animal_count.animals = animal_count.animals+1;\n END IF;\nEND\n              Timing: AFTER\n             Created: 2016-09-29 13:53:34.35\n            sql_mode: \n             Definer: root@localhost\ncharacter_set_client: utf8\ncollation_connection: utf8_general_ci\n  Database Collation: latin1_swedish_ci\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-user-statistics/"], "Title": ["SHOW USER_STATISTICS"], "Feature": ["SHOW USER_STATISTICS\n"], "Description": ["The SHOW USER_STATISTICS statement is part of the User Statistics feature. It was removed as a separate statement in MariaDB 10.1.1, but effectively replaced by the generic SHOW information_schema_table statement. The information_schema.USER_STATISTICS table holds statistics about user activity. You can use this table to find out such things as which user is causing the most load and which users are being abusive. You can also use this table to measure how close to capacity the server may be.", "The userstat system variable must be set to 1 to activate this feature. See the User Statistics and information_schema.USER_STATISTICS table for more information."], "Examples": ["SHOW USER_STATISTICS\\G\n*************************** 1. row ***************************\n                  User: root\n     Total_connections: 1\nConcurrent_connections: 0\n        Connected_time: 3297\n             Busy_time: 0.14113400000000006\n              Cpu_time: 0.017637000000000003\n        Bytes_received: 969\n            Bytes_sent: 22355\n  Binlog_bytes_written: 0\n             Rows_read: 10\n             Rows_sent: 67\n          Rows_deleted: 0\n         Rows_inserted: 0\n          Rows_updated: 0\n       Select_commands: 7\n       Update_commands: 0\n        Other_commands: 0\n   Commit_transactions: 1\n Rollback_transactions: 0\n    Denied_connections: 0\n      Lost_connections: 0\n         Access_denied: 0\n         Empty_queries: 7\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-variables/"], "Title": ["SHOW VARIABLES"], "Feature": ["SHOW [GLOBAL | SESSION] VARIABLES\n    [LIKE 'pattern' | WHERE expr]\n"], "Description": ["SHOW VARIABLES shows the values of MariaDB system variables. This\ninformation also can be obtained using the mariadb-admin variables\ncommand. The LIKE clause, if present, indicates which variable names\nto match. The WHERE clause can be given to select rows using more\ngeneral conditions.", "With the GLOBAL modifier, SHOW VARIABLES displays the values that are\nused for new connections to MariaDB. With SESSION, it displays the\nvalues that are in effect for the current connection. If no modifier\nis present, the default is SESSION. LOCAL is a synonym for SESSION.\nWith a LIKE clause, the statement displays only rows for those\nvariables with names that match the pattern. To obtain the row for a\nspecific variable, use a LIKE clause as shown:", "SHOW VARIABLES LIKE 'maria_group_commit';\nSHOW SESSION VARIABLES LIKE 'maria_group_commit';\n", "To get a list of variables whose name match a pattern, use the \"%\"\nwildcard character in a LIKE clause:", "SHOW VARIABLES LIKE '%maria%';\nSHOW GLOBAL VARIABLES LIKE '%maria%';\n", "Wildcard characters can be used in any position within the pattern to\nbe matched. Strictly speaking, because \"_\" is a wildcard that matches\nany single character, you should escape it as \"\\_\" to match it\nliterally. In practice, this is rarely necessary.", "The WHERE and LIKE clauses can be given to select rows using more general conditions, as discussed in Extended SHOW.", "See SET for information on setting server system variables.", "See Server System Variables for a list of all the variables that can be set.", "You can also see the server variables by querying the Information Schema GLOBAL_VARIABLES and SESSION_VARIABLES tables."], "Examples": ["SHOW VARIABLES LIKE 'aria%';\n+------------------------------------------+---------------------+\n| Variable_name                            | Value               |\n+------------------------------------------+---------------------+\n| aria_block_size                          | 8192                |\n| aria_checkpoint_interval                 | 30                  |\n| aria_checkpoint_log_activity             | 1048576             |\n| aria_force_start_after_recovery_failures | 0                   |\n| aria_group_commit                        | none                |\n| aria_group_commit_interval               | 0                   |\n| aria_log_file_size                       | 1073741824          |\n| aria_log_purge_type                      | immediate           |\n| aria_max_sort_file_size                  | 9223372036853727232 |\n| aria_page_checksum                       | ON                  |\n| aria_pagecache_age_threshold             | 300                 |\n| aria_pagecache_buffer_size               | 134217728           |\n| aria_pagecache_division_limit            | 100                 |\n| aria_recover                             | NORMAL              |\n| aria_repair_threads                      | 1                   |\n| aria_sort_buffer_size                    | 134217728           |\n| aria_stats_method                        | nulls_unequal       |\n| aria_sync_log_dir                        | NEWFILE             |\n| aria_used_for_temp_tables                | ON                  |\n+------------------------------------------+---------------------+\n", "SELECT VARIABLE_NAME, SESSION_VALUE, GLOBAL_VALUE FROM\n  INFORMATION_SCHEMA.SYSTEM_VARIABLES WHERE\n  VARIABLE_NAME LIKE 'max_error_count' OR\n  VARIABLE_NAME LIKE 'innodb_sync_spin_loops';\n+---------------------------+---------------+--------------+\n| VARIABLE_NAME             | SESSION_VALUE | GLOBAL_VALUE |\n+---------------------------+---------------+--------------+\n| MAX_ERROR_COUNT           | 64            | 64           |\n| INNODB_SYNC_SPIN_LOOPS    | NULL          | 30           |\n+---------------------------+---------------+--------------+\n\nSET GLOBAL max_error_count=128;\n\nSELECT VARIABLE_NAME, SESSION_VALUE, GLOBAL_VALUE FROM\n  INFORMATION_SCHEMA.SYSTEM_VARIABLES WHERE\n  VARIABLE_NAME LIKE 'max_error_count' OR\n  VARIABLE_NAME LIKE 'innodb_sync_spin_loops';\n+---------------------------+---------------+--------------+\n| VARIABLE_NAME             | SESSION_VALUE | GLOBAL_VALUE |\n+---------------------------+---------------+--------------+\n| MAX_ERROR_COUNT           | 64            | 128          |\n| INNODB_SYNC_SPIN_LOOPS    | NULL          | 30           |\n+---------------------------+---------------+--------------+\n\nSET GLOBAL max_error_count=128;\n\nSHOW VARIABLES LIKE 'max_error_count';\n+-----------------+-------+\n| Variable_name   | Value |\n+-----------------+-------+\n| max_error_count | 64    |\n+-----------------+-------+\n\nSHOW GLOBAL VARIABLES LIKE 'max_error_count';\n+-----------------+-------+\n| Variable_name   | Value |\n+-----------------+-------+\n| max_error_count | 128   |\n+-----------------+-------+\n", "SHOW VARIABLES LIKE 'innodb_sync_spin_loops';\n+------------------------+-------+\n| Variable_name          | Value |\n+------------------------+-------+\n| innodb_sync_spin_loops | 30    |\n+------------------------+-------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-warnings/"], "Title": ["SHOW WARNINGS"], "Feature": ["SHOW WARNINGS [LIMIT [offset,] row_count]\nSHOW ERRORS [LIMIT row_count OFFSET offset]\nSHOW COUNT(*) WARNINGS\n"], "Description": [" SHOW WARNINGS shows the error, warning, and note messages\nthat resulted from the last statement that generated messages in the\ncurrent session.  It shows nothing if the last statement used a table\nand generated no messages. (That is, a statement that uses a table but\ngenerates no messages clears the message list.) Statements that do not\nuse tables and do not generate messages have no effect on the message\nlist.", "A note is different to a warning in that it only appears if the sql_notes variable is set to 1 (the default), and is not converted to an error if strict mode is enabled.", "A related statement, SHOW ERRORS, shows only the errors.", "The SHOW COUNT(*) WARNINGS statement displays the total\nnumber of errors, warnings, and notes. You can also retrieve this number from\nthe warning_count variable:", "SHOW COUNT(*) WARNINGS;\nSELECT @@warning_count;\n", "The value of warning_count might be greater than the number of messages displayed by SHOW WARNINGS if the max_error_count system variable is set so low that not all messages are stored.", "The LIMIT clause has the same syntax as for the\n SELECT statement.", "SHOW WARNINGS can be used after EXPLAIN EXTENDED to see how a query is internally rewritten by MariaDB.", "If the sql_notes server variable is set to 1, Notes are included in the output of SHOW WARNINGS; if it is set to 0, this statement will not show (or count) Notes.", "The results of SHOW WARNINGS and SHOW COUNT(*) WARNINGS are directly sent to the client. If you need to access those information in a stored program, you can use the GET DIAGNOSTICS statement instead.", "For a list of MariaDB error codes, see MariaDB Error Codes.", "The mariadb client also has a number of options related to warnings.  The \\W command will show warnings after every statement, while \\w will disable this. Starting the client with the --show-warnings option will show warnings after every statement.", "MariaDB implements a stored routine error stack trace. SHOW WARNINGS can also be used to show more information. See the example below."], "Examples": ["SELECT 1/0;\n+------+\n| 1/0  |\n+------+\n| NULL |\n+------+\n\nSHOW COUNT(*) WARNINGS;\n+-------------------------+\n| @@session.warning_count |\n+-------------------------+\n|                       1 |\n+-------------------------+\n\nSHOW WARNINGS;\n+---------+------+---------------+\n| Level   | Code | Message       |\n+---------+------+---------------+\n| Warning | 1365 | Division by 0 |\n+---------+------+---------------+\n", "DELIMITER $$\nCREATE OR REPLACE PROCEDURE p1()\n  BEGIN\n    DECLARE c CURSOR FOR SELECT * FROM not_existing;\n    OPEN c;\n    CLOSE c;\n  END;\n$$\nCREATE OR REPLACE PROCEDURE p2()\n  BEGIN\n    CALL p1;\n  END;\n$$\nDELIMITER ;\nCALL p2;\nERROR 1146 (42S02): Table 'test.not_existing' doesn't exist\n\nSHOW WARNINGS;\n+-------+------+-----------------------------------------+\n| Level | Code | Message                                 |\n+-------+------+-----------------------------------------+\n| Error | 1146 | Table 'test.not_existing' doesn't exist |\n| Note  | 4091 | At line 6 in test.p1                    |\n| Note  | 4091 | At line 4 in test.p2                    |\n+-------+------+-----------------------------------------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-wsrep_membership/"], "Title": ["SHOW WSREP_MEMBERSHIP"], "Feature": ["SHOW WSREP_MEMBERSHIP\n"], "Description": ["The SHOW WSREP_MEMBERSHIP statement returns Galera node cluster membership information. It returns the same information as found in the information_schema.WSREP_MEMBERSHIP table. Only users with the SUPER privilege can access this information."], "Examples": ["SHOW WSREP_MEMBERSHIP;\n+-------+--------------------------------------+----------+-----------------+\n| Index | Uuid                                 | Name     | Address         |\n+-------+--------------------------------------+----------+-----------------+\n|     0 | 19058073-8940-11e4-8570-16af7bf8fced | my_node1 | 10.0.2.15:16001 |\n|     1 | 19f2b0e0-8942-11e4-9cb8-b39e8ee0b5dd | my_node3 | 10.0.2.15:16003 |\n|     2 | d85e62db-8941-11e4-b1ef-4bc9980e476d | my_node2 | 10.0.2.15:16002 |\n+-------+--------------------------------------+----------+-----------------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/show-wsrep_status/"], "Title": ["SHOW WSREP_STATUS"], "Feature": ["SHOW WSREP_STATUS\n"], "Description": ["The SHOW WSREP_STATUS statement returns Galera node and cluster status information. It returns the same information as found in the information_schema.WSREP_STATUS table. Only users with the SUPER privilege can access this information."], "Examples": ["SHOW WSREP_STATUS;\n+------------+-------------+----------------+--------------+\n| Node_Index | Node_Status | Cluster_Status | Cluster_Size |\n+------------+-------------+----------------+--------------+\n|          0 | Synced      | Primary        |            3 |\n+------------+-------------+----------------+--------------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/shutdown/"], "Title": ["SHUTDOWN"], "Feature": ["SHUTDOWN [WAIT FOR ALL { SLAVES | REPLICAS } ]\n"], "Description": ["The SHUTDOWN command shuts the server down. "], "Examples": ["CREATE EVENT `test`.`shutd`\n    ON SCHEDULE\n        EVERY 1 DAY\n        STARTS '2014-01-01 20:00:00'\n    COMMENT 'Shutdown Maria when the office is closed'\nDO BEGIN\n    SHUTDOWN;\nEND;\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/start-replica/"], "Title": ["START SLAVE"], "Feature": ["START SLAVE [\"connection_name\"] [thread_type [, thread_type] ... ] [FOR CHANNEL \"connection_name\"]\nSTART SLAVE [\"connection_name\"] [SQL_THREAD] UNTIL                \n    MASTER_LOG_FILE = 'log_name', MASTER_LOG_POS = log_pos [FOR CHANNEL \"connection_name\"]\nSTART SLAVE [\"connection_name\"] [SQL_THREAD] UNTIL\n    RELAY_LOG_FILE = 'log_name', RELAY_LOG_POS = log_pos [FOR CHANNEL \"connection_name\"]\nSTART SLAVE [\"connection_name\"] [SQL_THREAD] UNTIL\n    MASTER_GTID_POS = <GTID position> [FOR CHANNEL \"connection_name\"]\nSTART ALL SLAVES [thread_type [, thread_type]]\n\nSTART REPLICA [\"connection_name\"] [thread_type [, thread_type] ... ] -- from 10.5.1\nSTART REPLICA [\"connection_name\"] [SQL_THREAD] UNTIL                \n    MASTER_LOG_FILE = 'log_name', MASTER_LOG_POS = log_pos -- from 10.5.1\nSTART REPLICA [\"connection_name\"] [SQL_THREAD] UNTIL\n    RELAY_LOG_FILE = 'log_name', RELAY_LOG_POS = log_pos -- from 10.5.1\nSTART REPLICA [\"connection_name\"] [SQL_THREAD] UNTIL\n    MASTER_GTID_POS = <GTID position> -- from 10.5.1\nSTART ALL REPLICAS [thread_type [, thread_type]] -- from 10.5.1\n\nthread_type: IO_THREAD | SQL_THREAD\n"], "Description": ["START SLAVE (START REPLICA from MariaDB 10.5.1) with no thread_type options starts both of the replica threads (see replication) needed to connect with a master setup with  CHANGE MASTER TO .\n The I/O thread reads events from the primary server and stores\nthem in the relay log. The SQL thread reads events from the relay log\nand executes them. START SLAVE requires the SUPER privilege, or, from MariaDB 10.5.2, the REPLICATION SLAVE ADMIN privilege.", "If START SLAVE succeeds in starting the replica threads, it returns\nwithout any error. However, even in that case, it might be that the\nreplica threads start and then later stop (for example, because they do\nnot manage to connect to the primary or read its binary log, or some\nother problem). START SLAVE does not warn you about this. You must\ncheck the replica's error log for error messages generated by the replica\nthreads, or check that they are running satisfactorily with SHOW SLAVE\nSTATUS (SHOW REPLICA STATUS from MariaDB 10.5.1).", "START SLAVE UNTIL", "START SLAVE UNTIL refers to the SQL_THREAD replica position at which the SQL_THREAD replication will halt. If SQL_THREAD isn't specified both threads are started.", "START SLAVE UNTIL master_gtid_pos=xxx is also supported. See Global Transaction ID/START SLAVE UNTIL master_gtid_pos=xxx for more details.", "MariaDB starting with 11.3.0SQL_BEFORE_GTIDS|SQL_AFTER_GTIDS\nMariaDB 11.3 extended the START SLAVE UNTIL command with the options SQL_BEFORE_GTIDS and SQL_AFTER_GTIDS to allow control of whether the replica stops before or after a provided GTID state. Its\nsyntax is:\nSTART SLAVE UNTIL (SQL_BEFORE_GTIDS|SQL_AFTER_GTIDS)=\"<gtid_list>\"\nSee Global Transaction ID#SQL_BEFORE_GTIDS/SQL_AFTER_GTIDS for details.\n", "connection_name", "If there is only one nameless primary, or the default primary (as specified by the default_master_connection system variable) is intended, connection_name can be omitted. If provided, the START SLAVE statement will apply to the specified primary. connection_name is case-insensitive.", "MariaDB starting with 10.7.0The FOR CHANNEL keyword was added for MySQL compatibility. This is identical as\nusing the channel_name directly after START SLAVE.\n", "START ALL SLAVES", "START ALL SLAVES starts all configured replicas (replicas with master_host not empty) that were not started before.  It will give a note for all started connections. You can check the notes with SHOW WARNINGS.", "START REPLICA", "MariaDB starting with 10.5.1START REPLICA is an alias for START SLAVE from MariaDB 10.5.1. \n"], "Examples": [], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/statement_performance_analyzer/"], "Title": ["statement_performance_analyzer"], "Feature": ["statement_performance_analyzer(in_action,in_table, in_views)\n\n# in_action ENUM('snapshot', 'overall', 'delta', 'create_tmp', \n                 'create_table', 'save', 'cleanup')\n# in_table VARCHAR(129)\n# in_views SET ('with_runtimes_in_95th_percentile', 'analysis', \n                'with_errors_or_warnings', 'with_full_table_scans', \n                'with_sorting', 'with_temp_tables', 'custom')\n"], "Description": ["statement_performance_analyzer is a stored procedure available with the Sys Schema which returns a report on running statements.", "The following options from the sys_config table impact the output:", "statement_performance_analyzer.limit - maximum number of rows (default 100) returned for views that have no built-in limit.\nstatement_performance_analyzer.view - custom query/view to be used (default NULL). If the statement_performance_analyzer.limit configuration option is greater than 0, there can't be a LIMIT clause in the query/view definition\n", "If the debug option is set (default OFF), the procedure will also produce debugging output."], "Examples": [], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/stop-replica/"], "Title": ["STOP SLAVE"], "Feature": ["STOP SLAVE [\"connection_name\"] [thread_type [, thread_type] ... ] [FOR CHANNEL \"connection_name\"]\n\nSTOP ALL SLAVES [thread_type [, thread_type]]\n\nSTOP REPLICA [\"connection_name\"] [thread_type [, thread_type] ... ] -- from 10.5.1\n\nSTOP ALL REPLICAS [thread_type [, thread_type]] -- from 10.5.1\n\nthread_type: IO_THREAD | SQL_THREAD\n"], "Description": ["Stops the replica threads. STOP SLAVE requires the SUPER privilege, or, from MariaDB 10.5.2, the REPLICATION SLAVE ADMIN privilege.", "Like START SLAVE, this statement may be used with the IO_THREAD and\nSQL_THREAD options to name the thread or threads to be stopped. In almost all cases, one never need to use the thread_type options.", "STOP SLAVE waits until any current replication event group affecting\none or more non-transactional tables has finished executing (if there\nis any such replication group), or until the user issues a KILL QUERY or KILL CONNECTION statement.", "Note that STOP SLAVE doesn't delete the connection permanently.  Next time you execute START SLAVE or the MariaDB server restarts, the replica connection is restored with it's original arguments. If you want to delete a connection, you should execute RESET SLAVE.", "STOP ALL SLAVES", "STOP ALL SLAVES stops all your running replicas. It will give you a note for every stopped connection. You can check the notes with SHOW WARNINGS.", "connection_name", "The connection_name option is used for multi-source replication.", "If there is only one nameless master, or the default master (as specified by the default_master_connection system variable) is intended, connection_name can be omitted. If provided, the STOP SLAVE statement will apply to the specified master. connection_name is case-insensitive.", "MariaDB starting with 10.7.0The FOR CHANNEL keyword was added for MySQL compatibility. This is identical as\nusing the channel_name directly after STOP SLAVE.\n", "STOP REPLICA", "MariaDB starting with 10.5.1STOP REPLICA is an alias for STOP SLAVE from MariaDB 10.5.1. \n"], "Examples": [], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/sys_get_config/"], "Title": ["sys_get_config"], "Feature": ["sys.sys_get_config(name,default)\n"], "Description": ["sys_get_config is a stored function available with the Sys Schema.", "The function returns a configuration option value from the sys_config table. It takes two arguments; name, a configuration option name, and default, which is returned if the given option does not exist in the table. ", "Both arguments are VARCHAR(128) and can be NULL. Returns NULL if name is NULL, or if the given option is not found and default is NULL."], "Examples": ["SELECT sys.sys_get_config('ps_thread_trx_info.max_length',NULL);\n+----------------------------------------------------------+\n| sys.sys_get_config('ps_thread_trx_info.max_length',NULL) |\n+----------------------------------------------------------+\n| 65535                                                    |\n+----------------------------------------------------------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/table_exists/"], "Title": ["table_exists"], "Feature": ["table_exists(in_db_name,in_table_name, out_table_type)\n\n# in_db_name VARCHAR(64)\n# in_table_name VARCHAR(64)\n# out_table_type ENUM('', 'BASE TABLE', 'VIEW', 'TEMPORARY')\n"], "Description": ["table_exists is a stored procedure available with the Sys Schema.", "Given a database in_db_name and table name in_table_name, returns the table type in the OUT parameter out_table_type. The return value is an ENUM field containing one of:", "'' - the table does not exist\n'BASE TABLE' - a regular table\n'VIEW' - a view\n'TEMPORARY' - a temporary table\n"], "Examples": ["CALL sys.table_exists('mysql', 'time_zone', @table_type); SELECT @table_type;\n+-------------+\n| @table_type |\n+-------------+\n| BASE TABLE  |\n+-------------+\n\nCALL sys.table_exists('mysql', 'user', @table_type); SELECT @table_type;\n+-------------+\n| @table_type |\n+-------------+\n| VIEW        |\n+-------------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/uninstall-plugin/"], "Title": ["UNINSTALL PLUGIN"], "Feature": ["UNINSTALL PLUGIN [IF EXISTS] plugin_name"], "Description": ["This statement removes a single installed plugin. To uninstall the whole library which contains the plugin, use UNINSTALL SONAME. You cannot uninstall a plugin if any table that uses it is open.", "plugin_name must be the name of some plugin that is listed\nin the mysql.plugin table. The server executes the plugin's deinitialization\nfunction and removes the row for the plugin from the mysql.plugin\ntable, so that subsequent server restarts will not load and initialize\nthe plugin. UNINSTALL PLUGIN does not remove the plugin's\nshared library file.", "To use UNINSTALL PLUGIN, you must have the\nDELETE privilege for the mysql.plugin table.", "MariaDB starting with 10.4.0IF EXISTS\nIf the IF EXISTS clause is used, MariaDB will return a note instead of an error if the plugin does not exist. See SHOW WARNINGS.\n"], "Examples": ["UNINSTALL PLUGIN example;\n", "UNINSTALL PLUGIN IF EXISTS example;\nQuery OK, 0 rows affected (0.099 sec)\n\nUNINSTALL PLUGIN IF EXISTS example;\nQuery OK, 0 rows affected, 1 warning (0.000 sec)\n\nSHOW WARNINGS;\n+-------+------+-------------------------------+\n| Level | Code | Message                       |\n+-------+------+-------------------------------+\n| Note  | 1305 | PLUGIN example does not exist |\n+-------+------+-------------------------------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/uninstall-soname/"], "Title": ["UNINSTALL SONAME"], "Feature": ["UNINSTALL SONAME  [IF EXISTS] 'plugin_library'"], "Description": ["This statement is a variant of UNINSTALL PLUGIN statement, that removes all plugins belonging to a specified plugin_library. See UNINSTALL PLUGIN for details.", "plugin_library is the name of the shared library that\ncontains the plugin code. The file name extension (for\nexample, libmyplugin.so or libmyplugin.dll) can be omitted (which makes the statement look the same on all architectures).", "To use UNINSTALL SONAME, you must have the\nDELETE privilege for the mysql.plugin table.", "MariaDB starting with 10.4.0IF EXISTS\nIf the IF EXISTS clause is used, MariaDB will return a note instead of an error if the plugin library does not exist. See SHOW WARNINGS.\n"], "Examples": ["UNINSTALL SONAME 'ha_xtradb';\n", "UNINSTALL SONAME IF EXISTS 'ha_example';\nQuery OK, 0 rows affected (0.099 sec)\n\nUNINSTALL SONAME IF EXISTS 'ha_example';\nQuery OK, 0 rows affected, 1 warning (0.000 sec)\n\nSHOW WARNINGS;\n+-------+------+-------------------------------------+\n| Level | Code | Message                             |\n+-------+------+-------------------------------------+\n| Note  | 1305 | SONAME ha_example.so does not exist |\n+-------+------+-------------------------------------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/use-database/"], "Title": ["USE [DATABASE]"], "Feature": ["USE db_name\n", "From MariaDB 11.7, one can also use", "USE DATABASE db_name;\n"], "Description": ["The 'USE db_name' statement tells MariaDB to use the\ndb_name database as the default (current) database for\nsubsequent statements. The database remains the default until the end of the\nsession or another USE statement is issued:", "USE db1;\nSELECT COUNT(*) FROM mytable;   # selects from db1.mytable\nUSE db2;\nSELECT COUNT(*) FROM mytable;   # selects from db2.mytable\n", "The DATABASE() function (SCHEMA() is a synonym) returns the default database.", "Another way to set the default database is specifying its name at mariadb command line client startup.", "One cannot use USE DATABASE to a database one has no privileges to.  The reason is that\na user with no privileges to a database should not be able to know if a database exists or not."], "Examples": [], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/version_major/"], "Title": ["version_major"], "Feature": ["sys.version_major()\n"], "Description": ["version_major is a stored function available with the Sys Schema.", "It returns the MariaDB Server major release version."], "Examples": ["SELECT VERSION(),\n sys.version_major() AS major, \n sys.version_minor() AS minor,\n sys.version_patch() AS patch;\n+----------------+-------+-------+-------+\n| VERSION()      | major | minor | patch |\n+----------------+-------+-------+-------+\n| 10.8.2-MariaDB |    10 |     8 |     2 |\n+----------------+-------+-------+-------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/version_minor/"], "Title": ["version_minor"], "Feature": ["sys.version_minor()\n"], "Description": ["version_minor is a stored function available with the Sys Schema.", "It returns the MariaDB Server minor release version."], "Examples": ["SELECT VERSION(),\n sys.version_major() AS major, \n sys.version_minor() AS minor,\n sys.version_patch() AS patch;\n+----------------+-------+-------+-------+\n| VERSION()      | major | minor | patch |\n+----------------+-------+-------+-------+\n| 10.8.2-MariaDB |    10 |     8 |     2 |\n+----------------+-------+-------+-------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/version_patch/"], "Title": ["version_patch"], "Feature": ["sys.version_patch()\n"], "Description": ["version_patch is a stored function available with the Sys Schema.", "It returns the MariaDB Server patch release version."], "Examples": ["SELECT VERSION(),\n sys.version_major() AS major, \n sys.version_minor() AS minor,\n sys.version_patch() AS patch;\n+----------------+-------+-------+-------+\n| VERSION()      | major | minor | patch |\n+----------------+-------+-------+-------+\n| 10.8.2-MariaDB |    10 |     8 |     2 |\n+----------------+-------+-------+-------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/create_synonym_db/"], "Title": ["create_synonym_db"], "Feature": ["create_synonym_db(db_name,synonym)\n\n# db_name (VARCHAR(64))\n# synonym (VARCHAR(64))\n"], "Description": ["create_synonym_db is a stored procedure available with the Sys Schema.", "Takes a source database name db_name and synonym name and  creates a synonym database with views that point to all of the tables within the source database. Useful for example for creating a synonym for the performance_schema or information_schema databases.", "Returns an error if the source database doesn't exist, or the synonym already exists."], "Examples": ["SHOW DATABASES;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mysql              |\n| performance_schema |\n| sys                |\n| test               |\n+--------------------+\n\nCALL sys.create_synonym_db('performance_schema', 'perf');\n+-----------------------------------------+\n| summary                                 |\n+-----------------------------------------+\n| Created 81 views in the `perf` database |\n+-----------------------------------------+\n\nSHOW DATABASES;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mysql              |\n| perf               |\n| performance_schema |\n| sys                |\n| test               |\n+--------------------+\n\nSHOW FULL TABLES FROM perf;\n+------------------------------------------------------+------------+\n| Tables_in_perf                                       | Table_type |\n+------------------------------------------------------+------------+\n| accounts                                             | VIEW       |\n| cond_instances                                       | VIEW       |\n| events_stages_current                                | VIEW       |\n| events_stages_history                                | VIEW       |\n| events_stages_history_long                           | VIEW       |\n...\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/describe/"], "Title": ["DESCRIBE"], "Feature": ["{DESCRIBE | DESC} tbl_name [col_name | wild]\n"], "Description": ["DESCRIBE provides information about the columns in a table.\nIt is a shortcut for SHOW COLUMNS FROM.\nThese statements also display information for views.", "col_name can be a column name, or a string containing the\nSQL \"%\" and \"_\" wildcard characters to\nobtain output only for the columns with names matching the string. There is no\nneed to enclose the string within quotes unless it contains spaces or other\nspecial characters.", "DESCRIBE city;\n+------------+----------+------+-----+---------+----------------+\n| Field      | Type     | Null | Key | Default | Extra          |\n+------------+----------+------+-----+---------+----------------+\n| Id         | int(11)  | NO   | PRI | NULL    | auto_increment |\n| Name       | char(35) | YES  |     | NULL    |                |\n| Country    | char(3)  | NO   | UNI |         |                |\n| District   | char(20) | YES  | MUL |         |                |\n| Population | int(11)  | YES  |     | NULL    |                |\n+------------+----------+------+-----+---------+----------------+\n", "The description for SHOW COLUMNS provides\nmore information about the output columns."], "Examples": [], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/alter-procedure/"], "Title": ["ALTER PROCEDURE"], "Feature": ["ALTER PROCEDURE proc_name [characteristic ...]\n\ncharacteristic:\n    { CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA }\n  | SQL SECURITY { DEFINER | INVOKER }\n  | COMMENT 'string'\n"], "Description": ["This statement can be used to change the characteristics of a stored\nprocedure. More than one change may be specified in an ALTER PROCEDURE\nstatement. However, you cannot change the parameters or body of a\nstored procedure using this statement. To make such changes, you must\ndrop and re-create the procedure using either CREATE OR REPLACE PROCEDURE (since MariaDB 10.1.3) or DROP PROCEDURE and CREATE PROCEDURE (MariaDB 10.1.2 and before).", "You must have the ALTER ROUTINE privilege for the procedure. By default, that privilege is granted automatically to the procedure creator. See Stored Routine Privileges."], "Examples": ["ALTER PROCEDURE simpleproc SQL SECURITY INVOKER;\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/alter-sequence/"], "Title": ["ALTER SEQUENCE"], "Feature": ["ALTER SEQUENCE [IF EXISTS] sequence_name\n[ INCREMENT [ BY | = ] number ]\n[ MINVALUE [=] number | NO MINVALUE | NOMINVALUE ]\n[ MAXVALUE [=] number | NO MAXVALUE | NOMAXVALUE ]\n[ START [ WITH | = ] number ] [ CACHE [=] number ] [ [ NO ] CYCLE ]\n[ RESTART [[WITH | =] number]", "ALTER SEQUENCE allows one to change any values for a SEQUENCE created with CREATE SEQUENCE.", "The options for ALTER SEQUENCE can be given in any order."], "Description": ["ALTER SEQUENCE changes the parameters of an existing sequence generator. Any parameters not specifically set in the ALTER SEQUENCE command retain their prior settings.", "ALTER SEQUENCE requires the ALTER privilege.", "Arguments to ALTER SEQUENCE", "The following options may be used:", "OptionDefault valueDescription\nINCREMENT1Increment to use for values. May be negative.\nMINVALUE1 if INCREMENT > 0 and -9223372036854775807 if INCREMENT < 0Minimum value for the sequence.\nMAXVALUE9223372036854775806 if INCREMENT > 0 and -1 if INCREMENT < 0Max value for sequence.\nSTARTMINVALUE if INCREMENT > 0 and MAX_VALUE if INCREMENT< 0First value that the sequence will generate.\nCACHE1000Number of values that should be cached. 0 if no CACHE.  The underlying table will be updated first time a new sequence number is generated and each time the cache runs out.\nCYCLE0 (= NO CYCLE)1 if the sequence should start again from MINVALUE# after it has run out of values.\nRESTARTSTART if restart value not is given\u00a0If  RESTART option is used, NEXT VALUE will return the restart value.\n\n", "The optional clause RESTART [ WITH restart ] sets the next value for the sequence. This is equivalent to calling the SETVAL() function with the is_used argument as 0. The specified value will be returned by the next call of nextval.  Using RESTART with no restart value is\nequivalent to supplying the start value that was recorded by\nCREATE SEQUENCE or last set by ALTER SEQUENCE START WITH.", "ALTER SEQUENCE will not allow you to change the sequence so that it's inconsistent. For example:", "CREATE SEQUENCE s1;\nALTER SEQUENCE s1 MINVALUE 10;\nERROR 4061 (HY000): Sequence 'test.t1' values are conflicting\n\nALTER SEQUENCE s1 MINVALUE 10 RESTART 10;\nERROR 4061 (HY000): Sequence 'test.t1' values are conflicting\n\nALTER SEQUENCE s1 MINVALUE 10 START 10 RESTART 10;\n", "INSERT", "To allow SEQUENCE objects to be backed up by old tools, like mariadb-dump, one can use SELECT to read the current state of a SEQUENCE object and use an INSERT to update the SEQUENCE object.  INSERT is only allowed if all fields are specified:", "CREATE SEQUENCE s1;\nINSERT INTO s1 VALUES(1000,10,2000,1005,1,1000,0,0);\nSELECT * FROM s1;\n\n+------------+-----------+-----------+-------+-----------+-------+-------+-------+\n| next_value | min_value | max_value | start | increment | cache | cycle | round |\n+------------+-----------+-----------+-------+-----------+-------+-------+-------+\n|       1000 |        10 |      2000 |  1005 |         1 |  1000 |     0 |     0 |\n+------------+-----------+-----------+-------+-----------+-------+-------+-------+\n\nSHOW CREATE SEQUENCE s1;\n+-------+--------------------------------------------------------------------------------------------------------------+\n| Table | Create Table                                                                                                 |\n+-------+--------------------------------------------------------------------------------------------------------------+\n| s1    | CREATE SEQUENCE `s1` start with 1005 minvalue 10 maxvalue 2000 increment by 1 cache 1000 nocycle ENGINE=Aria |\n+-------+--------------------------------------------------------------------------------------------------------------+\n", "Notes", "ALTER SEQUENCE will instantly affect all future SEQUENCE operations.  This is in contrast to some other databases where the changes requested by ALTER SEQUENCE will not be seen until the sequence cache has run out.", "ALTER SEQUENCE will take a full table lock of the sequence object during\nits (brief) operation. This ensures that ALTER SEQUENCE is replicated\ncorrectly.  If you only want to set the next sequence value to a\nhigher value than current, then you should use SETVAL()\ninstead, as this is not blocking.", "If you want to change storage engine, sequence comment or rename the sequence, you can use ALTER TABLE for this."], "Examples": [], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/explain/"], "Title": ["EXPLAIN"], "Feature": ["EXPLAIN tbl_name [col_name | wild]\n", "Or", "EXPLAIN [EXTENDED | PARTITIONS | FORMAT=JSON] \n  {SELECT select_options | UPDATE update_options | DELETE delete_options}\n"], "Description": ["The EXPLAIN statement can be used either as a synonym for\nDESCRIBE or as a way to obtain information about how MariaDB\nexecutes a SELECT, UPDATE or DELETE statement:", "'EXPLAIN tbl_name' is synonymous with \n  'DESCRIBE tbl_name' or \n  'SHOW COLUMNS FROM tbl_name'.\nWhen you precede a SELECT, UPDATE or a DELETE statement with the keyword \n  EXPLAIN, MariaDB displays information from the optimizer\n  about the query execution plan. That is, MariaDB explains how it would\n  process the SELECT, UPDATE or DELETE, including information about how tables\n  are joined and in which order. EXPLAIN EXTENDED can be\n  used to provide additional information.\nEXPLAIN PARTITIONS is useful only when examining queries involving partitioned tables. For details, see Partition pruning and selection.\nANALYZE statement performs the query as well as producing EXPLAIN output, and provides actual as well as estimated statistics.\nEXPLAIN output can be printed in the slow query log. See EXPLAIN in the Slow Query Log for details.\n", "SHOW EXPLAIN shows the output of a running statement. In some cases, its output can be closer to reality than EXPLAIN.", "The ANALYZE statement runs a statement and returns information about its execution plan. It also shows additional columns, to check how much the optimizer's estimation about filtering and found rows are close to reality.", "There is an online EXPLAIN Analyzer that you can use to share EXPLAIN and EXPLAIN EXTENDED output with others.", "EXPLAIN can acquire metadata locks in the same way that SELECT does, as it needs to know table metadata and, sometimes, data as well.\n", "Columns in EXPLAIN ... SELECT", "Column nameDescription\nidSequence number that shows in which order tables are joined.\nselect_typeWhat kind of SELECT the table comes from.\ntableAlias name of table. Materialized temporary tables for sub queries are named <subquery#>\ntypeHow rows are found from the table (join type).\npossible_keyskeys in table that could be used to find rows in the table\nkeyThe name of the key that is used to retrieve rows. NULL is no key was used.\nkey_lenHow many bytes of the key that was used (shows if we are using only parts of the multi-column key).\nrefThe reference that is used as the key value.\nrowsAn estimate of how many rows we will find in the table for each key lookup.\nExtraExtra information about this join.\n\n", "Here are descriptions of the values for some of the more complex columns in EXPLAIN ... SELECT:", "\"Select_type\" Column", "The select_type column can have the following values:", "ValueDescriptionComment\nDEPENDENT SUBQUERYThe SUBQUERY is DEPENDENT.\nDEPENDENT UNIONThe UNION is DEPENDENT.\nDERIVEDThe SELECT is DERIVED from the PRIMARY.\nMATERIALIZEDThe SUBQUERY is MATERIALIZED.Materialized tables will be populated at first access and will be accessed by the primary key (= one key lookup). Number of rows in EXPLAIN shows the cost of populating the table\nPRIMARYThe SELECT is in the outermost query, but there is also a SUBQUERY within it.\nSIMPLEIt is a simple SELECT query without any SUBQUERY or UNION.\nSUBQUERYThe SELECT is a SUBQUERY of the PRIMARY.\nUNCACHEABLE SUBQUERYThe SUBQUERY is UNCACHEABLE.\nUNCACHEABLE UNIONThe UNION is UNCACHEABLE.\nUNIONThe SELECT is a UNION of the PRIMARY.\nUNION RESULTThe result of the UNION.\nLATERAL DERIVEDThe SELECT uses a Lateral Derived optimization\n\n", "\"Type\" Column", "This column contains information on how the table is accessed.", "ValueDescription\nALLA full table scan is done for the table (all rows are read). This is bad if the table is large and the table is joined against a previous table!  This happens when the optimizer could not find any usable index to access rows.\nconstThere is only one possibly matching row in the table. The row is read before the optimization phase and all columns in the table are treated as constants.\neq_refA unique index is used to find the rows. This is the best possible plan to find the row.\nfilterA second index is being used with the Rowid Filtering Optimization.\nfulltextA fulltext index is used to access the rows.\nindex_mergeA 'range' access is done for for several index and the found rows are merged. The key column shows which keys are used.\nindex_subqueryThis is similar as ref, but used for sub queries that are transformed to key lookups.\nindexA full scan over the used index.  Better than ALL but still bad if index is large and the table is joined against a previous table.\nrangeThe table will be accessed with a key over one or more value ranges.\nref_or_nullLike 'ref' but in addition another search for the 'null' value is done if the first value was not found. This happens usually with sub queries.\nrefA non unique index or prefix of an unique index is used to find the rows. Good if the prefix doesn't match many rows.\nsystemThe table has 0 or 1 rows.\nunique_subqueryThis is similar as eq_ref, but used for sub queries that are transformed to key lookups\n\n", "\"Extra\" Column", "This column consists of one or more of the following values, separated by ';'", " Note that some of these values are detected after the optimization phase.", "The optimization phase can do the following changes to the WHERE clause:", "Add the expressions from the ON and USING clauses to the WHERE\n  clause.\nConstant propagation:  If there is column=constant, replace all column\n  instances with this constant.\nReplace all columns from 'const' tables with their values.\nRemove the used key columns from the WHERE (as this will be tested as\n  part of the key lookup).\nRemove impossible constant sub expressions.\n  For example WHERE '(a=1 and a=2) OR b=1' becomes 'b=1'.\nReplace columns with other columns that has identical values:\n  Example:  WHERE a=b and a=c may be treated\n  as 'WHERE a=b and a=c and b=c'.\nAdd extra conditions to detect impossible row conditions earlier. This\n  happens mainly with OUTER JOIN where we in some cases add detection\n  of NULL values in the WHERE (Part of 'Not exists' optimization).\n  This can cause an unexpected 'Using where' in the Extra column.\nFor each table level we remove expressions that have already been tested when\n  we read the previous row. Example: When joining tables t1 with t2\n  using the following WHERE 't1.a=1 and t1.a=t2.b', we don't have to\n  test 't1.a=1' when checking rows in t2 as we already know that this\n  expression is true. \n", "ValueDescription\nconst row not foundThe table was a system table (a table with should exactly one row), but no row was found.\nDistinctIf distinct optimization (remove duplicates) was used. This is marked only for the last table in the SELECT.\nFull scan on NULL keyThe table is a part of the sub query and if the value that is used to match the sub query will be NULL, we will do a full table scan.\nImpossible HAVINGThe used HAVING clause is always false so the SELECT will return no rows.\nImpossible WHERE noticed after reading const tables.The used WHERE clause is always false so the SELECT will return no rows. This case was detected after we had read all 'const' tables and used the column values as constant in the WHERE clause. For example: WHERE const_column=5 and const_column had a value of 4.\nImpossible WHEREThe used WHERE clause is always false so the SELECT will return no rows. For example: WHERE 1=2\nNo matching min/max rowDuring early optimization of MIN()/MAX() values it was detected that no row could match the WHERE clause. The MIN()/MAX() function will return NULL.\nno matching row in const tableThe table was a const table (a table with only one possible matching row), but no row was found.\nNo tables usedThe SELECT was a sub query that did not use any tables. For example a there was no FROM clause or a FROM DUAL clause.\nNot existsStop searching after more row if we find one single matching row. This optimization is used with LEFT JOIN where one is explicitly searching for rows that doesn't exists in the LEFT JOIN TABLE. Example: SELECT * FROM t1 LEFT JOIN t2 on (...) WHERE t2.not_null_column IS NULL.  As t2.not_null_column can only be NULL if there was no matching row for on condition, we can stop searching if we find a single matching row.\nOpen_frm_onlyFor information_schema tables.  Only the frm (table definition file was opened) was opened for each matching row.\nOpen_full_tableFor information_schema tables. A full table open for each matching row is done to retrieve the requested information. (Slow)\nOpen_trigger_onlyFor information_schema tables. Only the trigger file definition was opened for each matching row.\nRange checked for each record (index map: ...)This only happens when there was no good default index to use but there may some index that could be used when we can treat all columns from previous table as constants.  For each row combination the optimizer will decide which index to use (if any) to fetch a row from this table. This is not fast, but faster than a full table scan that is the only other choice. The index map is a bitmask that shows which index are considered for each row condition.\nScanned 0/1/all databasesFor information_schema tables. Shows how many times we had to do a directory scan.\nSelect tables optimized awayAll tables in the join was optimized away. This happens when we are only using COUNT(*), MIN() and MAX() functions in the SELECT and we where able to replace all of these with constants.\nSkip_open_tableFor information_schema tables. The queried table didn't need to be opened.\nunique row not foundThe table was detected to be a const table (a table with only one possible matching row) during the early optimization phase, but no row was found.\nUsing filesortFilesort is needed to resolve the query. This means an extra phase where we first collect all columns to sort, sort them with a disk based merge sort and then use the sorted set to retrieve the rows in sorted order. If the column set is small, we store all the columns in the sort file to not have to go to the database to retrieve them again.\nUsing indexOnly the index is used to retrieve the needed information from the table. There is no need to perform an extra seek to retrieve the actual record.\nUsing index conditionLike 'Using where' but the where condition is pushed down to the table engine for internal optimization at the index level.\nUsing index condition(BKA)Like 'Using index condition' but in addition we use batch key access to retrieve rows.\nUsing index for group-byThe index is being used to resolve a GROUP BY or DISTINCT query. The rows are not read.  This is very efficient if the table has a lot of identical index entries as duplicates are quickly jumped over.\nUsing intersect(...)For index_merge joins. Shows which index are part of the intersect.\nUsing join bufferWe store previous row combinations in a row buffer to be able to match each row against all of the rows combinations in the join buffer at one go.\nUsing sort_union(...)For index_merge joins. Shows which index are part of the union.\nUsing temporaryA temporary table is created to hold the result. This typically happens if you are using GROUP BY, DISTINCT or ORDER BY.\nUsing whereA WHERE expression (in additional to the possible key lookup) is used to check if the row should be accepted. If you don't have 'Using where' together with a join type of ALL, you are probably doing something wrong!\nUsing where with pushed conditionLike 'Using where' but the where condition is pushed down to the table engine for internal optimization at the row level.\nUsing bufferThe UPDATE statement will first buffer the rows, and then run the updates, rather than do updates on the fly. See Using Buffer UPDATE Algorithm for a detailed explanation.\n\n", "EXPLAIN EXTENDED", "The EXTENDED keyword adds another column, filtered, to the output. This is a percentage estimate of the table rows that will be filtered by the condition.", "An EXPLAIN EXTENDED will always throw a warning, as it adds extra Message information to a subsequent SHOW WARNINGS statement. This includes what the SELECT query would look like after optimizing and rewriting rules are applied and how the optimizer qualifies columns and tables."], "Examples": ["DESCRIBE city;\n+------------+----------+------+-----+---------+----------------+\n| Field      | Type     | Null | Key | Default | Extra          |\n+------------+----------+------+-----+---------+----------------+\n| Id         | int(11)  | NO   | PRI | NULL    | auto_increment |\n| Name       | char(35) | YES  |     | NULL    |                |\n| Country    | char(3)  | NO   | UNI |         |                |\n| District   | char(20) | YES  | MUL |         |                |\n| Population | int(11)  | YES  |     | NULL    |                |\n+------------+----------+------+-----+---------+----------------+\n", "CREATE TABLE IF NOT EXISTS `employees_example` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `first_name` varchar(30) NOT NULL,\n  `last_name` varchar(40) NOT NULL,\n  `position` varchar(25) NOT NULL,\n  `home_address` varchar(50) NOT NULL,\n  `home_phone` varchar(12) NOT NULL,\n  `employee_code` varchar(25) NOT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `employee_code` (`employee_code`),\n  KEY `first_name` (`first_name`,`last_name`)\n) ENGINE=Aria;\n\nINSERT INTO `employees_example` (`first_name`, `last_name`, `position`, `home_address`, `home_phone`, `employee_code`)\n  VALUES\n  ('Mustapha', 'Mond', 'Chief Executive Officer', '692 Promiscuous Plaza', '326-555-3492', 'MM1'),\n  ('Henry', 'Foster', 'Store Manager', '314 Savage Circle', '326-555-3847', 'HF1'),\n  ('Bernard', 'Marx', 'Cashier', '1240 Ambient Avenue', '326-555-8456', 'BM1'),\n  ('Lenina', 'Crowne', 'Cashier', '281 Bumblepuppy Boulevard', '328-555-2349', 'LC1'),\n  ('Fanny', 'Crowne', 'Restocker', '1023 Bokanovsky Lane', '326-555-6329', 'FC1'),\n  ('Helmholtz', 'Watson', 'Janitor', '944 Soma Court', '329-555-2478', 'HW1');\n\nSHOW INDEXES FROM employees_example;\n+-------------------+------------+---------------+--------------+---------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\n| Table             | Non_unique | Key_name      | Seq_in_index | Column_name   | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |\n+-------------------+------------+---------------+--------------+---------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\n| employees_example |          0 | PRIMARY       |            1 | id            | A         |           7 |     NULL | NULL   |      | BTREE      |         |               |\n| employees_example |          0 | employee_code |            1 | employee_code | A         |           7 |     NULL | NULL   |      | BTREE      |         |               |\n| employees_example |          1 | first_name    |            1 | first_name    | A         |        NULL |     NULL | NULL   |      | BTREE      |         |               |\n| employees_example |          1 | first_name    |            2 | last_name     | A         |        NULL |     NULL | NULL   |      | BTREE      |         |               |\n+-------------------+------------+---------------+--------------+---------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\n", "EXPLAIN SELECT * FROM employees_example WHERE id=1;\n+------+-------------+-------------------+-------+---------------+---------+---------+-------+------+-------+\n| id   | select_type | table             | type  | possible_keys | key     | key_len | ref   | rows | Extra |\n+------+-------------+-------------------+-------+---------------+---------+---------+-------+------+-------+\n|    1 | SIMPLE      | employees_example | const | PRIMARY       | PRIMARY | 4       | const |    1 |       |\n+------+-------------+-------------------+-------+---------------+---------+---------+-------+------+-------+\n", "EXPLAIN SELECT * FROM employees_example WHERE home_phone='326-555-3492';\n+------+-------------+-------------------+------+---------------+------+---------+------+------+-------------+\n| id   | select_type | table             | type | possible_keys | key  | key_len | ref  | rows | Extra       |\n+------+-------------+-------------------+------+---------------+------+---------+------+------+-------------+\n|    1 | SIMPLE      | employees_example | ALL  | NULL          | NULL | NULL    | NULL |    6 | Using where |\n+------+-------------+-------------------+------+---------------+------+---------+------+------+-------------+\n", "SHOW EXPLAIN FOR 1;\n+------+-------------+-------+-------+---------------+------+---------+------+---------+-------------+\n| id   | select_type | table | type  | possible_keys | key  | key_len | ref  | rows    | Extra       |\n+------+-------------+-------+-------+---------------+------+---------+------+---------+-------------+\n|    1 | SIMPLE      | tbl   | index | NULL          | a    | 5       | NULL | 1000107 | Using index |\n+------+-------------+-------+-------+---------------+------+---------+------+---------+-------------+\n1 row in set, 1 warning (0.00 sec)\n", "SELECT * FROM table_name\n  WHERE key_column=expr OR key_column IS NULL;\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/extract_schema_from_file_name/"], "Title": ["extract_schema_from_file_name"], "Feature": ["sys.extract_schema_from_file_name(path)\n"], "Description": ["extract_schema_from_file_name is a stored function available with the Sys Schema.", "Given a file path, it returns the schema (database) name. The file name is assumed to be within the schema directory, and therefore the function will not return the expected result with partitions, or when tables are defined using the DATA_DIRECTORY table option.", "The function does not examine anything on disk. The return value, a VARCHAR(64), is determined solely from the provided path."], "Examples": ["SELECT sys.extract_schema_from_file_name('/usr/local/mysql/data/db/t1.ibd');\n+----------------------------------------------------------------------+\n| sys.extract_schema_from_file_name('/usr/local/mysql/data/db/t1.ibd') |\n+----------------------------------------------------------------------+\n| db                                                                   |\n+----------------------------------------------------------------------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/extract_table_from_file_name/"], "Title": ["extract_table_from_file_name"], "Feature": ["sys.extract_table_from_file_name(path)\n"], "Description": ["extract_table_from_file_name is a stored function available with the Sys Schema.", "Given a file path, it returns the table name.", "The function does not examine anything on disk. The return value, a VARCHAR(64), is determined solely from the provided path."], "Examples": ["SELECT sys.extract_table_from_file_name('/usr/local/mysql/data/db/t1.ibd');\n+---------------------------------------------------------------------+\n| sys.extract_table_from_file_name('/usr/local/mysql/data/db/t1.ibd') |\n+---------------------------------------------------------------------+\n| t1                                                                  |\n+---------------------------------------------------------------------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/flush-tables-for-export/"], "Title": ["FLUSH TABLES FOR EXPORT"], "Feature": ["FLUSH TABLES table_name [, table_name] FOR EXPORT\n"], "Description": ["FLUSH TABLES ... FOR EXPORT flushes changes to the specified tables to disk so that binary copies can be made while the server is still running. This works for Archive, Aria, CSV, InnoDB, MyISAM and MERGE tables.", "The table is read locked until one has issued UNLOCK TABLES.", "If a storage engine does not support FLUSH TABLES FOR EXPORT, a 1031 error (SQLSTATE 'HY000') is produced.", "If FLUSH TABLES ... FOR EXPORT is in effect in the session, the following statements will produce an error if attempted:", "FLUSH TABLES WITH READ LOCK\nFLUSH TABLES ... WITH READ LOCK\nFLUSH TABLES ... FOR EXPORT\nAny statement trying to update any table\n", "If any of the following statements is in effect in the session, attempting  FLUSH TABLES ... FOR EXPORT will produce an error.", "FLUSH TABLES ... WITH READ LOCK\nFLUSH TABLES ... FOR EXPORT\nLOCK TABLES ... READ\nLOCK TABLES ... WRITE\n", "FLUSH FOR EXPORT is not written to the binary log.", "This statement requires the RELOAD and the LOCK TABLES privileges.", "If one of the specified tables cannot be locked, none of the tables will be locked.", "If a table does not exist, an error like the following will be produced:", "ERROR 1146 (42S02): Table 'test.xxx' doesn't exist\n", "If a table is a view, an error like the following will be produced:", "ERROR 1347 (HY000): 'test.v' is not BASE TABLE\n"], "Examples": ["FLUSH TABLES test.t1 FOR EXPORT;\n#  Copy files related to the table (see below)\nUNLOCK TABLES;\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/flush/"], "Title": ["FLUSH"], "Feature": ["FLUSH [NO_WRITE_TO_BINLOG | LOCAL]\n    flush_option [, flush_option] ...\n", "or when flushing tables:", "FLUSH [NO_WRITE_TO_BINLOG | LOCAL] TABLES [table_list]  [table_flush_option]\n", "\nwhere table_list is a list of tables separated by , (comma)."], "Description": ["The FLUSH statement clears or reloads various internal caches used by\nMariaDB. To execute FLUSH, you must have the RELOAD\nprivilege. See GRANT.", "The RESET statement is similar to FLUSH. See\nRESET.", "You cannot issue a FLUSH statement from within a stored function or a trigger. Doing so within a stored procedure is permitted, as long as it is not called by a stored function or trigger. See Stored Routine Limitations, Stored Function Limitations and Trigger Limitations.", "If a listed table is a view, an error like the following will be produced:", "ERROR 1347 (HY000): 'test.v' is not BASE TABLE\n", "By default, FLUSH statements are written to the binary log and will be replicated. The NO_WRITE_TO_BINLOG keyword (LOCAL is an alias) will ensure the statement is not written to the binary log. ", "The different flush options are:", "OptionDescription\nCHANGED_PAGE_BITMAPSXtraDB only. Internal command used for backup purposes. See the Information Schema CHANGED_PAGE_BITMAPS Table.\nCLIENT_STATISTICSReset client statistics (see SHOW CLIENT_STATISTICS).\nDES_KEY_FILEReloads the DES key file (Specified with the --des-key-file startup option).\nHOSTSFlush the hostname cache (used for converting ip to host names and for unblocking blocked hosts. See max_connect_errors and performance_schema.host_cache\nINDEX_STATISTICSReset index statistics (see SHOW INDEX_STATISTICS).\n[ERROR | ENGINE | GENERAL | SLOW | RELAY] LOGSClose and reopen the specified log type, or all log types if none are specified. FLUSH RELAY LOGS [connection-name] can be used to flush the relay logs for a specific connection. Only one connection can be specified per FLUSH command. See Multi-source replication. FLUSH ENGINE LOGS will delete all unneeded Aria redo logs. FLUSH BINARY LOGS DELETE_DOMAIN_ID=(list-of-domains) can be used to discard obsolete GTID domains from the server's binary log state. In order for this to be successful, no event group from the listed GTID domains can be present in existing binary log files. If some still exist, then they must be purged prior to executing this command. If the command completes successfully, then it also rotates the binary log.\nBINARY LOGSFLUSH BINARY LOGS rotates the current binary log.\nBINARY LOGS DELETE_DOMAIN_ID=(list-of-domains)FLUSH BINARY LOGS DELETE_DOMAIN_ID can be used to discard obsolete GTID domains from the server's binary log state. In order for this to be successful, no event group from the listed GTID domains can be present in existing binary log files. If some still exist, then they must be purged prior to executing this command. If the command completes successfully, then it also rotates the binary log.\nMASTERDeprecated option, use RESET MASTER instead.\nPRIVILEGESReload all privileges from the privilege tables in the mysql database. If the server is started with --skip-grant-table option, this will activate the privilege tables again.\nQUERY CACHEDefragment the query cache to better utilize its memory. If you want to reset the query cache, you can do it with RESET QUERY CACHE.\nQUERY_RESPONSE_TIMESee the QUERY_RESPONSE_TIME plugin.\nSLAVEDeprecated option, use RESET REPLICA or RESET SLAVE instead.\nSSLUsed to dynamically reinitialize the server's TLS context by reloading the files defined by several TLS system variables. See FLUSH SSL for more information.\n[ GLOBAL | SESSION ] STATUSResets all server status variables that can be reset to 0. Not all global status variables support this, so not all global values are reset. From MariaDB 11.5, GLOBAL or SESSION can be specified. See FLUSH STATUS for more information.\nTABLEClose tables given as options or all open tables if no table list was used. From MariaDB 10.4.1, using without any table list will only close tables not in use, and tables not locked by the FLUSH TABLES connection. If there are no locked tables, FLUSH TABLES will be instant and will not cause any waits, as it no longer waits for tables in use. When a table list is provided, from MariaDB 10.4.1, the server will wait for the end of any transactions that are using the tables. Previously, FLUSH TABLES only waited for the statements to complete.\nTABLESSame as FLUSH TABLE.\nTABLES ... FOR EXPORTFor InnoDB tables, flushes table changes to disk to permit binary table copies while the server is running. See FLUSH TABLES ... FOR EXPORT for more.\nTABLES WITH READ LOCKCloses all open tables. New tables are only allowed to be opened with read locks until an UNLOCK TABLES is given.\nTABLES WITH READ LOCK AND DISABLE CHECKPOINTAs TABLES WITH READ LOCK but also disable all checkpoint writes by transactional table engines. This is useful when doing a disk snapshot of all tables.\nTABLE_STATISTICSReset table statistics (see SHOW TABLE_STATISTICS).\nUSER_RESOURCESResets all per hour user resources. This enables clients that have exhausted their resources to connect again.\nUSER_STATISTICSReset user statistics (see SHOW USER_STATISTICS).\nUSER_VARIABLESReset user variables (see User-defined variables).\n\n", "You can also use the mariadb-admin client to flush things. Use mariadb-admin --help to examine what flush commands it supports."], "Examples": [], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/format_bytes/"], "Title": ["format_bytes"], "Feature": ["sys.format_bytes(double)\n"], "Description": ["format_bytes is a stored function available with the Sys Schema.", "Given a byte count, returns a string consisting of a value and the units in a human-readable format. The units will be in bytes, KiB (kibibytes), MiB (mebibytes), GiB (gibibytes), TiB (tebibytes), or PiB (pebibytes).", "The binary prefixes (kibi, mebi, gibi, tebi and pebi) were created in December 1998 by the International Electrotechnical Commission to avoid possible ambiguity, as the widely-used prefixes kilo, mega, giga, tera and peta can be used to refer to both the power-of-10 decimal system multipliers and the power-of-two binary system multipliers."], "Examples": ["SELECT sys.format_bytes(1000),sys.format_bytes(1024);\n+------------------------+------------------------+\n| sys.format_bytes(1000) | sys.format_bytes(1024) |\n+------------------------+------------------------+\n| 1000 bytes             | 1.00 KiB               |\n+------------------------+------------------------+\n\nSELECT sys.format_bytes(1000000),sys.format_bytes(1048576);\n+---------------------------+---------------------------+\n| sys.format_bytes(1000000) | sys.format_bytes(1048576) |\n+---------------------------+---------------------------+\n| 976.56 KiB                | 1.00 MiB                  |\n+---------------------------+---------------------------+\n\nSELECT sys.format_bytes(1000000000),sys.format_bytes(1073741874);\n+------------------------------+------------------------------+\n| sys.format_bytes(1000000000) | sys.format_bytes(1073741874) |\n+------------------------------+------------------------------+\n| 953.67 MiB                   | 1.00 GiB                     |\n+------------------------------+------------------------------+\n\nSELECT sys.format_bytes(1000000000000),sys.format_bytes(1099511627776);\n+---------------------------------+---------------------------------+\n| sys.format_bytes(1000000000000) | sys.format_bytes(1099511627776) |\n+---------------------------------+---------------------------------+\n| 931.32 GiB                      | 1.00 TiB                        |\n+---------------------------------+---------------------------------+\n\nSELECT sys.format_bytes(1000000000000000),sys.format_bytes(1125899906842624);\n+------------------------------------+------------------------------------+\n| sys.format_bytes(1000000000000000) | sys.format_bytes(1125899906842624) |\n+------------------------------------+------------------------------------+\n| 909.49 TiB                         | 1.00 PiB                           |\n+------------------------------------+------------------------------------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/format_path/"], "Title": ["format_path"], "Feature": ["sys.format_path(path)\n"], "Description": ["format_path is a stored function available with the Sys Schema that, given a path, returns a modified path after replacing subpaths matching the values of various system variables with the variable name.", "The system variables that are matched are, in order: ", "datadir\ntmpdir\nslave_load_tmpdir\ninnodb_data_home_dir\ninnodb_log_group_home_dir\ninnodb_undo_directory\nbasedir\n"], "Examples": ["SELECT @@tmpdir;\n+------------------------------------+\n| @@tmpdir                           |\n+------------------------------------+\n| /home/ian/sandboxes/msb_10_8_2/tmp |\n+------------------------------------+\n\nSELECT sys.format_path('/home/ian/sandboxes/msb_10_8_2/tmp/testdb.ibd');\n+------------------------------------------------------------------+\n| sys.format_path('/home/ian/sandboxes/msb_10_8_2/tmp/testdb.ibd') |\n+------------------------------------------------------------------+\n| @@tmpdir/testdb.ibd                                              |\n+------------------------------------------------------------------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/format_statement/"], "Title": ["format_statement"], "Feature": ["sys.format_statement(statement)\n"], "Description": ["Returns a reduced length string. The length is specified by the statement_truncate_len configuration option (default 64), and the removed part of the string (if any) is replaced with an ellipsis (three dots).", "The function is intended for use in formatting lengthy SQL statements to a fixed length."], "Examples": ["SELECT sys.format_statement(\n  'SELECT field1, field2, field3, field4, field5, field6 FROM table1'\n  ) AS formatted_statement;\n+-------------------------------------------------------------------+\n| formatted_statement                                               |\n+-------------------------------------------------------------------+\n| SELECT field1, field2, field3, ... d4, field5, field6 FROM table1 |\n+-------------------------------------------------------------------+\n", "SET @sys.statement_truncate_len = 48;\n\nSELECT sys.format_statement( \n  'SELECT field1, field2, field3, field4, field5, field6 FROM table1'\n  ) AS formatted_statement;\n+---------------------------------------------------+\n| formatted_statement                               |\n+---------------------------------------------------+\n| SELECT field1, field2, ... d5, field6 FROM table1 |\n+---------------------------------------------------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/format_time/"], "Title": ["format_time"], "Feature": ["sys.format_time(picoseconds)\n"], "Description": ["format_time is a stored function available with the Sys Schema. Given a time in picoseconds, returns a human-readable time value and unit indicator. Unit can be:", "ps - picoseconds\nns - nanoseconds\nus - microseconds\nms - milliseconds\ns - seconds\nm - minutes\nh - hours\nd - days\nw - weeks\n", "This function is very similar to the FORMAT_PICO_TIME function introduced in MariaDB 11.0.2, but with the following differences:", "Represents minutes as m rather than min.\nRepresent weeks.\n"], "Examples": ["SELECT\n    sys.format_time(43) AS ps,\n    sys.format_time(4321) AS ns, \n    sys.format_time(43211234) AS us,\n    sys.format_time(432112344321) AS ms,\n    sys.format_time(43211234432123) AS s,\n    sys.format_time(432112344321234) AS m,\n    sys.format_time(4321123443212345) AS h,\n    sys.format_time(432112344321234545) AS d,\n    sys.format_time(43211234432123444543) AS w;\n+-------+---------+----------+-----------+---------+--------+--------+--------+---------+\n| ps    | ns      | us       | ms        | s       | m      | h      | d      | w       |\n+-------+---------+----------+-----------+---------+--------+--------+--------+---------+\n| 43 ps | 4.32 ns | 43.21 us | 432.11 ms | 43.21 s | 7.20 m | 1.20 h | 5.00 d | 71.45 w |\n+-------+---------+----------+-----------+---------+--------+--------+--------+---------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/help-command/"], "Title": ["HELP Command"], "Feature": ["HELP search_string\n"], "Description": ["The HELP command can be used in any MariaDB client, such as the mariadb command-line client, to get basic syntax help and a short description for most commands and functions. ", "If you provide an argument to the HELP command, the mariadb client uses it as a search string to access server-side help. The proper operation of this command requires that the help tables in the mysql database be initialized with help topic information.", "If there is no match for the search string, the search fails. Use HELP contents to see a list of the help categories:", "HELP contents\nYou asked for help about help category: \"Contents\"\nFor more information, type 'help <item>', where <item> is one of the following\ncategories:\n   Account Management\n   Administration\n   Compound Statements\n   Data Definition\n   Data Manipulation\n   Data Types\n   Functions\n   Functions and Modifiers for Use with GROUP BY\n   Geographic Features\n   Help Metadata\n   Language Structure\n   Plugins\n   Procedures\n   Sequences\n   Table Maintenance\n   Transactions\n   User-Defined Functions\n   Utility\n", "If a search string matches multiple items, MariaDB shows a list of matching topics:", "HELP drop\nMany help items for your request exist.\nTo make a more specific request, please type 'help <item>',\nwhere <item> is one of the following\ntopics:\n   ALTER TABLE\n   DROP DATABASE\n   DROP EVENT\n   DROP FUNCTION\n   DROP FUNCTION UDF\n   DROP INDEX\n   DROP PACKAGE\n   DROP PACKAGE BODY\n   DROP PROCEDURE\n   DROP ROLE\n   DROP SEQUENCE\n   DROP SERVER\n   DROP TABLE\n   DROP TRIGGER\n   DROP USER\n   DROP VIEW\n", "Then you can enter a topic as the search string to see the help entry for that topic.", "The help is provided with the MariaDB server and makes use of four help tables found in the mysql database: help_relation, help_topic, help_category and help_keyword. These tables are populated by the mariadb-install-db or fill_help_table.sql scripts."], "Examples": [], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/install-plugin/"], "Title": ["INSTALL PLUGIN"], "Feature": ["INSTALL PLUGIN [IF NOT EXISTS] plugin_name SONAME 'plugin_library'"], "Description": ["This statement installs an individual plugin from the specified library. To install the whole library (which could be required), use INSTALL SONAME. See also Installing a Plugin.", "plugin_name is the name of the plugin as defined in the\nplugin declaration structure contained in the library file. Plugin names are\nnot case sensitive. For maximal compatibility, plugin names should be limited\nto ASCII letters, digits, and underscore, because they are used in C source\nfiles, shell command lines, M4 and Bourne shell scripts, and SQL environments.", "plugin_library is the name of the shared library that\ncontains the plugin code. The file name extension can be omitted (which makes the statement look the same on all architectures).", "The shared library must be located in the plugin directory (that is,\nthe directory named by the plugin_dir system variable). The library must be in the plugin directory itself, not in a subdirectory. By\ndefault, plugin_dir is plugin directory under the directory named by\nthe pkglibdir configuration variable, but it can be changed by setting\nthe value of plugin_dir at server startup. For example, set\nits value in a my.cnf file:", "[mariadbd]\nplugin_dir=/path/to/plugin/directory", "If the value of plugin_dir is a relative path name, it is\ntaken to be relative to the base directory (the value of the basedir system variable).", "INSTALL PLUGIN adds a line to the mysql.plugin table that\ndescribes the plugin. This table contains the plugin name and library file\nname.", "INSTALL PLUGIN causes the server to read\noption (my.cnf) files just as during server startup. This enables the plugin to\npick up any relevant options from those files. It is possible to add plugin\noptions to an option file even before loading a plugin (if the loose prefix is\nused). It is also possible to uninstall a plugin, edit my.cnf, and install the\nplugin again. Restarting the plugin this way enables it to the new option\nvalues without a server restart.", "INSTALL PLUGIN also loads and initializes the plugin code to\nmake the plugin available for use. A plugin is initialized by executing its\ninitialization function, which handles any setup that the plugin must perform\nbefore it can be used.", "To use INSTALL PLUGIN, you must have the\nINSERT privilege for the mysql.plugin table.", "At server startup, the server loads and initializes any plugin that is\nlisted in the mysql.plugin table. This means that a plugin is installed\nwith INSTALL PLUGIN only once, not every time the server\nstarts. Plugin loading at startup does not occur if the server is started with\nthe --skip-grant-tables option.", "When the server shuts down, it executes the de-initialization function\nfor each plugin that is loaded so that the plugin has a chance to\nperform any final cleanup.", "If you need to load plugins for a single server startup when the\n--skip-grant-tables option is given (which tells the server\nnot to read system tables), use the \n--plugin-load mariadbd option.", "IF NOT EXISTS", "When the IF NOT EXISTS clause is used, MariaDB will return a note instead of an error if the specified plugin already exists. See SHOW WARNINGS."], "Examples": ["INSTALL PLUGIN sphinx SONAME 'ha_sphinx.so';\n", "INSTALL PLUGIN innodb SONAME 'ha_xtradb';\n", "INSTALL PLUGIN IF NOT EXISTS example SONAME 'ha_example';\nQuery OK, 0 rows affected (0.104 sec)\n\nINSTALL PLUGIN IF NOT EXISTS example SONAME 'ha_example';\nQuery OK, 0 rows affected, 1 warning (0.000 sec)\n\nSHOW WARNINGS;\n+-------+------+------------------------------------+\n| Level | Code | Message                            |\n+-------+------+------------------------------------+\n| Note  | 1968 | Plugin 'example' already installed |\n+-------+------+------------------------------------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/install-soname/"], "Title": ["INSTALL SONAME"], "Feature": ["INSTALL SONAME 'plugin_library'"], "Description": ["This statement is a variant of INSTALL PLUGIN. It installs all plugins from a given plugin_library. See INSTALL PLUGIN for details.", "plugin_library is the name of the shared library that\ncontains the plugin code. The file name extension (for\nexample, libmyplugin.so or libmyplugin.dll) can be omitted (which makes the statement look the same on all architectures).", "The shared library must be located in the plugin directory (that is,\nthe directory named by the plugin_dir system variable). The library must be in the plugin directory itself, not in a subdirectory. By\ndefault, plugin_dir is plugin directory under the directory named by\nthe pkglibdir configuration variable, but it can be changed by setting\nthe value of plugin_dir at server startup. For example, set\nits value in a my.cnf file:", "[mariadbd]\nplugin_dir=/path/to/plugin/directory", "If the value of plugin_dir is a relative path name, it is\ntaken to be relative to the MySQL base directory (the value of the basedir\nsystem variable).", "INSTALL SONAME adds one or more lines to the mysql.plugin table that\ndescribes the plugin. This table contains the plugin name and library file\nname.", "INSTALL SONAME causes the server to read\noption (my.cnf) files just as during server startup. This enables the plugin to\npick up any relevant options from those files. It is possible to add plugin\noptions to an option file even before loading a plugin (if the loose prefix is\nused). It is also possible to uninstall a plugin, edit my.cnf, and install the\nplugin again. Restarting the plugin this way enables it to the new option\nvalues without a server restart.", "INSTALL SONAME also loads and initializes the plugin code to\nmake the plugin available for use. A plugin is initialized by executing its\ninitialization function, which handles any setup that the plugin must perform\nbefore it can be used.", "To use INSTALL SONAME, you must have the\nINSERT privilege for the mysql.plugin table.", "At server startup, the server loads and initializes any plugin that is\nlisted in the mysql.plugin table. This means that a plugin is installed\nwith INSTALL SONAME only once, not every time the server\nstarts. Plugin loading at startup does not occur if the server is started with\nthe --skip-grant-tables option.", "When the server shuts down, it executes the de-initialization function\nfor each plugin that is loaded so that the plugin has a chance to\nperform any final cleanup.", "If you need to load plugins for a single server startup when the\n--skip-grant-tables option is given (which tells the server\nnot to read system tables), use the \n--plugin-load mariadbd option.", "If you need to install only one plugin from a library, use the INSTALL PLUGIN statement."], "Examples": ["INSTALL SONAME 'locales';\n", "INSTALL SONAME 'ha_sequence';\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/kill/"], "Title": ["KILL [CONNECTION |\u00a0QUERY]"], "Feature": ["KILL [HARD | SOFT] { {CONNECTION|QUERY} thread_id | QUERY ID query_id | USER user_name }\n\n"], "Description": ["Each connection to mariadbd runs in a separate thread. You can see which threads\nare running with the SHOW PROCESSLIST statement and kill a\nthread with the KILL thread_id statement.                             \nKILL allows the optional CONNECTION or\nQUERY modifier:", "KILL CONNECTION is the same as KILL with no\n  modifier: It terminates the connection associated with the given thread or query id.\nKILL QUERY terminates the statement that the connection thread_id is\n  currently executing, but leaves the connection itself intact.\nKILL QUERY ID terminates the query by query_id, leaving the connection intact.\n", "If a connection is terminated that has an active transaction, the transaction will be rolled back. If only a query is killed, the current transaction will stay active. See also idle_transaction_timeout.", "If you have the PROCESS privilege, you can see all threads. If\nyou have the SUPER privilege, or, from MariaDB 10.5.2, the CONNECTION ADMIN privilege, you can kill all threads and\nstatements. Otherwise, you can see and kill only your own threads and\nstatements.", "Killing queries that repair or create indexes on MyISAM and Aria tables may result in corrupted tables. Use the SOFT option to avoid this!\n", "The HARD option (default) kills a command as soon as possible.  If you use\nSOFT, then critical operations that may leave a table in an\ninconsistent state will not be interrupted. Such operations include REPAIR and INDEX creation for MyISAM and Aria tables (REPAIR TABLE, OPTIMIZE TABLE).", "KILL ... USER username will kill all connections/queries for a\ngiven user. USER can be specified one of the following ways:", "username  (Kill without regard to hostname)\nusername@hostname\nCURRENT_USER or CURRENT_USER()\n", "If you specify a thread id and that thread does not exist, you get the following error:", "ERROR 1094 (HY000): Unknown thread id: <thread_id>\n", "If you specify a query id that doesn't exist, you get the following error:", "ERROR 1957 (HY000): Unknown query id: <query_id>\n", "However, if you specify a user name, no error is issued for non-connected (or even non-existing) users. To check if the connection/query has been killed, you can use the ROW_COUNT() function.", "A client whose connection is killed receives the following error:", "ERROR 1317 (70100): Query execution was interrupted\n", "To obtain a list of existing sessions, use the SHOW PROCESSLIST statement or query the Information Schema PROCESSLIST table.", "Note: You cannot use KILL with the Embedded MariaDB Server\nlibrary because the embedded server merely runs inside the threads of the host\napplication. It does not create any connection threads of its own.", "Note: You can also use \nmariadb-admin kill thread_id [,thread_id...]\nto kill connections. To get a list of running queries,\nuse mariadb-admin processlist. See mariadb-admin.", "Percona Toolkit contains a program, pt-kill that can be used to automatically kill connections that match certain criteria. For example, it can be used to terminate idle connections, or connections that have been busy for more than 60 seconds."], "Examples": [], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/list_add/"], "Title": ["list_add"], "Feature": ["sys.list_add(list,value)\n"], "Description": ["list_add is a stored function available with the Sys Schema.", "It takes a list to be be modified and a value to be added to the list, returning the resulting value. This can be used, for example, to add a value to a system variable taking a comma-delimited list of options, such as sql_mode.", "The related function list_drop can be used to drop a value from a list."], "Examples": ["SELECT @@sql_mode;\n+-----------------------------------------------------------------------+\n| @@sql_mode                                                            |\n+-----------------------------------------------------------------------+\n| STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,\nNO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION |\n+-----------------------------------------------------------------------+\n\nSET @@sql_mode = sys.list_add(@@sql_mode, 'NO_ZERO_DATE');\n\nSELECT @@sql_mode;\n+-----------------------------------------------------------------------+\n| @@sql_mode                                                            |\n+-----------------------------------------------------------------------+\n| STRICT_TRANS_TABLES,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,\nNO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION |\n+-----------------------------------------------------------------------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/list_drop/"], "Title": ["list_drop"], "Feature": ["sys.list_drop(list,value)\n"], "Description": ["list_drop is a stored function available with the Sys Schema.", "It takes a list to be be modified and a value to be dropped from the list, returning the resulting value. This can be used, for example, to remove a value from a system variable taking a comma-delimited list of options, such as sql_mode.", "The related function list_add can be used to add a value to a list."], "Examples": ["SELECT @@sql_mode;\n+-----------------------------------------------------------------------+\n| @@sql_mode                                                            |\n+-----------------------------------------------------------------------+\n| STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,\nNO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION |\n+-----------------------------------------------------------------------+\n\nSET @@sql_mode = sys.list_drop(@@sql_mode, 'NO_ENGINE_SUBSTITUTION');\n\nSELECT @@sql_mode;\n+-----------------------------------------------------------------------+\n| @@sql_mode                                                            |\n+-----------------------------------------------------------------------+\n| STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,\nNO_AUTO_CREATE_USER |\n+-----------------------------------------------------------------------+\n"], "Category": ["Administrative SQL Statements"]}
{"HTML": ["https://mariadb.com//kb/en/alter-view/"], "Title": ["ALTER VIEW"], "Feature": ["ALTER\n    [ALGORITHM = {UNDEFINED | MERGE | TEMPTABLE}]\n    [DEFINER = { user | CURRENT_USER }]\n    [SQL SECURITY { DEFINER | INVOKER }]\n    VIEW view_name [(column_list)]\n    AS select_statement\n    [WITH [CASCADED | LOCAL] CHECK OPTION]\n"], "Description": ["This statement changes the definition of a view, which must exist. The\nsyntax is similar to that for CREATE VIEW and the effect is the same\nas for CREATE OR REPLACE VIEW if the view exists. This statement\nrequires the CREATE VIEW and DROP privileges for the view, and some\nprivilege for each column referred to in the SELECT statement. ALTER VIEW is allowed only to the definer or users with the SUPER privilege."], "Examples": ["ALTER VIEW v AS SELECT a, a*3 AS a2 FROM t;\n"], "Category": ["Administrative SQL Statements"]}
