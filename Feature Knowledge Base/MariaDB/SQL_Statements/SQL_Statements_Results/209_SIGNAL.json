{
    "HTML": [
        "https://mariadb.com//kb/en/signal/"
    ],
    "Title": [
        "SIGNAL"
    ],
    "Feature": [
        "SIGNAL error_condition\n    [SET error_property\n    [, error_property] ...]\n\nerror_condition:\n    SQLSTATE [VALUE] 'sqlstate_value'\n  | condition_name\n\nerror_property:\n    error_property_name = <error_property_value>\n\nerror_property_name:\n    CLASS_ORIGIN\n  | SUBCLASS_ORIGIN\n  | MESSAGE_TEXT\n  | MYSQL_ERRNO\n  | CONSTRAINT_CATALOG\n  | CONSTRAINT_SCHEMA\n  | CONSTRAINT_NAME\n  | CATALOG_NAME\n  | SCHEMA_NAME\n  | TABLE_NAME\n  | COLUMN_NAME\n  | CURSOR_NAME\n",
        "SIGNAL empties the diagnostics area and produces a custom error. This statement can be used anywhere, but is generally useful when used inside a stored program. When the error is produced, it can be caught by a HANDLER. If not, the current stored program, or the current statement, will terminate with the specified error.",
        "Sometimes an error HANDLER just needs to SIGNAL the same error it received, optionally with some changes. Usually the RESIGNAL statement is the most convenient way to do this.",
        "error_condition can be an SQLSTATE value or a named error condition defined via DECLARE CONDITION. SQLSTATE must be a constant string consisting of five characters. These codes are standard to ODBC and ANSI SQL. For customized errors, the recommended SQLSTATE is '45000'. For a list of SQLSTATE values used by MariaDB, see the MariaDB Error Codes page. The SQLSTATE can be read via the API method mysql_sqlstate( ). ",
        "To specify error properties user-defined variables and local variables can be used, as well as character set conversions (but you can't set a collation).",
        "The error properties, their type and their default values are explained in the diagnostics area page."
    ],
    "Description": [],
    "Examples": [
        "SIGNAL SQLSTATE '01000';\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\nSHOW WARNINGS;\n\n+---------+------+------------------------------------------+\n| Level   | Code | Message                                  |\n+---------+------+------------------------------------------+\n| Warning | 1642 | Unhandled user-defined warning condition |\n+---------+------+------------------------------------------+\n1 row in set (0.06 sec)\n\nSIGNAL SQLSTATE '02000';\nERROR 1643 (02000): Unhandled user-defined not found condition\n",
        "SIGNAL SQLSTATE '45000' SET MYSQL_ERRNO=30001, MESSAGE_TEXT='H\nello, world!';\n\nERROR 30001 (45000): Hello, world!\n",
        "CREATE PROCEDURE test_error(x INT)\nBEGIN\n   DECLARE errno SMALLINT UNSIGNED DEFAULT 31001;\n   SET @errmsg = 'Hello, world!';\n   IF x = 1 THEN\n      SIGNAL SQLSTATE '45000' SET\n      MYSQL_ERRNO = errno,\n      MESSAGE_TEXT = @errmsg;\n   ELSE\n      SIGNAL SQLSTATE '45000' SET\n      MYSQL_ERRNO = errno,\n      MESSAGE_TEXT = _utf8'Hello, world!';\n   END IF;\nEND;\n",
        "CREATE PROCEDURE test_error(n INT)\nBEGIN\n   DECLARE `too_big` CONDITION FOR SQLSTATE '45000';\n   IF n > 10 THEN\n      SIGNAL `too_big`;\n   END IF;\nEND;\n",
        "CREATE PROCEDURE test_error()\nBEGIN\n   DECLARE EXIT HANDLER\n   FOR 1146\n   BEGIN\n      SIGNAL SQLSTATE '45000' SET\n      MESSAGE_TEXT = 'Temporary tables not found; did you call init() procedure?';\n   END;\n   -- this will produce a 1146 error\n   SELECT `c` FROM `temptab`;\nEND;\n"
    ],
    "Category": [
        "Programmatic and Compound Statements"
    ]
}