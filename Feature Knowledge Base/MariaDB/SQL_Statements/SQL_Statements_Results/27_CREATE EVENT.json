{
    "HTML": [
        "https://mariadb.com//kb/en/create-event/"
    ],
    "Title": [
        "CREATE EVENT"
    ],
    "Feature": [
        "CREATE [OR REPLACE]\n    [DEFINER = { user | CURRENT_USER | role | CURRENT_ROLE }]\n    EVENT \n    [IF NOT EXISTS]\n    event_name    \n    ON SCHEDULE schedule\n    [ON COMPLETION [NOT] PRESERVE]\n    [ENABLE | DISABLE | DISABLE ON SLAVE]\n    [COMMENT 'comment']\n    DO sql_statement;\n\nschedule:\n    AT timestamp [+ INTERVAL interval] ...\n  | EVERY interval \n    [STARTS timestamp [+ INTERVAL interval] ...] \n    [ENDS timestamp [+ INTERVAL interval] ...]\n\ninterval:\n    quantity {YEAR | QUARTER | MONTH | DAY | HOUR | MINUTE |\n              WEEK | SECOND | YEAR_MONTH | DAY_HOUR | DAY_MINUTE |\n              DAY_SECOND | HOUR_MINUTE | HOUR_SECOND | MINUTE_SECOND}\n"
    ],
    "Description": [
        "This statement creates and schedules a new event. It requires the\nEVENT privilege for the schema in which the event is to be created.",
        "The minimum requirements for a valid CREATE EVENT statement are as\nfollows:",
        "The keywords CREATE EVENT plus an event name, which uniquely identifies\n  the event in the current schema. (Prior to MySQL 5.1.12, the event name\n  needed to be unique only among events created by the same user on a given\n  database.)\nAn ON SCHEDULE clause, which determines when and how often the event\n  executes.\nA DO clause, which contains the SQL statement to be executed by an\n  event.\n",
        "Here is an example of a minimal CREATE EVENT statement:",
        "CREATE EVENT myevent\n    ON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 1 HOUR\n    DO\n      UPDATE myschema.mytable SET mycol = mycol + 1;\n",
        "The previous statement creates an event named myevent. This event executes once\n\u2014 one hour following its creation\n\u2014 by running an SQL statement that increments the\nvalue of the myschema.mytable table's mycol column by 1.",
        "The event_name must be a valid MariaDB identifier with a maximum length\nof 64 characters. It may be delimited using back ticks, and may be\nqualified with the name of a database schema. An event is associated\nwith both a MariaDB user (the definer) and a schema, and its name must\nbe unique among names of events within that schema. In general, the\nrules governing event names are the same as those for names of stored\nroutines. See Identifier Names.",
        "If no schema is indicated as part of event_name, the default (current)\nschema is assumed.",
        "For valid identifiers to use as event names, see Identifier Names.",
        "OR REPLACE",
        "The OR REPLACE clause was included in MariaDB 10.1.4. If used and the event already exists, instead of an error being returned, the existing event will be dropped and replaced by the newly defined event.",
        "IF NOT EXISTS",
        "If the IF NOT EXISTS clause is used, MariaDB will return a warning instead of an error if the event already exists. Cannot be used together with OR REPLACE.",
        "ON SCHEDULE",
        "The ON SCHEDULE clause can be used to specify when the event must be triggered.",
        "AT",
        "If you want to execute the event only once (one time event), you can use the AT keyword, followed by a timestamp. If you use CURRENT_TIMESTAMP, the event acts as soon as it is created. As a convenience, you can add one or more intervals to that timestamp. You can also specify a timestamp in the past, so that the event is stored but not triggered, until you modify it via ALTER EVENT.",
        "The following example shows how to create an event that will be triggered tomorrow at a certain time:",
        "CREATE EVENT example\nON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 1 DAY + INTERVAL 3 HOUR\nDO something;\n",
        "You can also specify that an event must be triggered at a regular interval (recurring event). In such cases, use the EVERY clause followed by the interval.",
        "If an event is recurring, you can specify when the first execution must happen via the STARTS clause and a maximum time for the last execution via the ENDS clause. STARTS and ENDS clauses are followed by a timestamp and, optionally, one or more intervals. The ENDS clause can specify a timestamp in the past, so that the event is stored but not executed until you modify it via ALTER EVENT.",
        "In the following example, next month a recurring event will be triggered hourly for a week:",
        "CREATE EVENT example\nON SCHEDULE EVERY 1 HOUR\nSTARTS CURRENT_TIMESTAMP + INTERVAL 1 MONTH\nENDS CURRENT_TIMESTAMP + INTERVAL 1 MONTH + INTERVAL 1 WEEK\nDO some_task;\n",
        "Intervals consist of a quantity and a time unit. The time units are the same used for other statements and time functions, except that you can't use microseconds for events. For simple time units, like HOUR or MINUTE, the quantity is an integer number, for example '10 MINUTE'. For composite time units, like HOUR_MINUTE or HOUR_SECOND, the quantity must be a string with all involved simple values and their separators, for example '2:30' or '2:30:30'.",
        "ON COMPLETION [NOT] PRESERVE",
        "The ON COMPLETION clause can be used to specify if the event must be deleted after its last execution (that is, after its AT or ENDS timestamp is past). By default, events are dropped when they are expired. To explicitly state that this is the desired behaviour, you can use ON COMPLETION NOT PRESERVE. Instead, if you want the event to be preserved, you can use ON COMPLETION PRESERVE.",
        "In you specify ON COMPLETION NOT PRESERVE, and you specify a timestamp in the past for AT or ENDS clause, the event will be immediately dropped. In such cases, you will get a Note 1558: \"Event execution time is in the past and ON COMPLETION NOT PRESERVE is set. The event was dropped immediately after creation\".",
        "ENABLE/DISABLE/DISABLE ON SLAVE",
        "Events are ENABLEd by default. If you want to stop MariaDB from executing\nan event, you may specify DISABLE. When it is ready to be activated, you\nmay enable it using ALTER EVENT. Another option is\nDISABLE ON SLAVE, which indicates that an event was created on a master and has been replicated to the slave, which is prevented from executing the event. If DISABLE ON SLAVE is specifically set, the event will be disabled everywhere. It will not be executed on the master or the slaves.",
        "COMMENT",
        "The COMMENT clause may be used to set a comment for the event. Maximum\nlength for comments is 64 characters. The comment is a string, so it must be\nquoted. To see events comments, you can query the INFORMATION_SCHEMA.EVENTS table (the column is named EVENT_COMMENT)."
    ],
    "Examples": [
        "CREATE EVENT myevent\n    ON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 1 HOUR\n    DO\n      UPDATE myschema.mytable SET mycol = mycol + 1;\n",
        "CREATE EVENT example\nON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 1 DAY + INTERVAL 3 HOUR\nDO something;\n",
        "CREATE EVENT example\nON SCHEDULE EVERY 1 HOUR\nSTARTS CURRENT_TIMESTAMP + INTERVAL 1 MONTH\nENDS CURRENT_TIMESTAMP + INTERVAL 1 MONTH + INTERVAL 1 WEEK\nDO some_task;\n",
        "CREATE EVENT myevent\n    ON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 1 HOUR\n    DO\n      UPDATE myschema.mytable SET mycol = mycol + 1;\nERROR 1537 (HY000): Event 'myevent' already exists\n\nCREATE OR REPLACE EVENT myevent\n    ON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 1 HOUR\n    DO\n      UPDATE myschema.mytable SET mycol = mycol + 1;;\nQuery OK, 0 rows affected (0.00 sec)\n\nCREATE EVENT IF NOT EXISTS myevent\n    ON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 1 HOUR\n    DO\n      UPDATE myschema.mytable SET mycol = mycol + 1;\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\n SHOW WARNINGS;\n+-------+------+--------------------------------+\n| Level | Code | Message                        |\n+-------+------+--------------------------------+\n| Note  | 1537 | Event 'myevent' already exists |\n+-------+------+--------------------------------+\n"
    ],
    "Category": [
        "Data Definition"
    ]
}