{
    "HTML": [
        "https://mariadb.com//kb/en/delete/"
    ],
    "Title": [
        "DELETE"
    ],
    "Feature": [
        "Single-table syntax:",
        "DELETE [LOW_PRIORITY] [QUICK] [IGNORE] \n  FROM tbl_name [PARTITION (partition_list)]\n  [FOR PORTION OF period FROM expr1 TO expr2]\n  [AS alias]                    -- from MariaDB 11.6\n  [WHERE where_condition]\n  [ORDER BY ...]\n  [LIMIT row_count]\n  [RETURNING select_expr \n    [, select_expr ...]]\n",
        "Multiple-table syntax:",
        "DELETE [LOW_PRIORITY] [QUICK] [IGNORE]\n    tbl_name[.*] [, tbl_name[.*]] ...\n    FROM table_references\n    [WHERE where_condition]\n",
        "Or:",
        "DELETE [LOW_PRIORITY] [QUICK] [IGNORE]\n    FROM tbl_name[.*] [, tbl_name[.*]] ...\n    USING table_references\n    [WHERE where_condition]\n",
        "Trimming history:",
        "DELETE HISTORY\n  FROM tbl_name [PARTITION (partition_list)]\n  [BEFORE SYSTEM_TIME [TIMESTAMP|TRANSACTION] expression]\n"
    ],
    "Description": [
        "OptionDescription\nLOW_PRIORITYWait until all SELECT's are done before starting the statement. Used with storage engines that uses table locking (MyISAM, Aria etc). See HIGH_PRIORITY and LOW_PRIORITY clauses for details.\nQUICKSignal the storage engine that it should expect that a lot of rows are deleted. The storage engine engine can do things to speed up the DELETE like ignoring merging of data blocks until all rows are deleted from the block (instead of when a block is half full). This speeds up things at the expanse of lost space in data blocks. At least MyISAM and Aria support this feature.\nIGNOREDon't stop the query even if a not-critical error occurs (like data overflow). See How IGNORE works for a full description.\n\n",
        "For the single-table syntax, the DELETE statement deletes rows\nfrom tbl_name and returns a count of the number of deleted rows. This count can\nbe obtained by calling the ROW_COUNT() function. The\nWHERE clause, if given, specifies the conditions that identify\nwhich rows to delete. With no WHERE clause, all rows are\ndeleted. If the ORDER BY clause is specified, the rows are\ndeleted in the order that is specified. The LIMIT clause\nplaces a limit on the number of rows that can be deleted.",
        "For the multiple-table syntax, DELETE deletes from each\ntbl_name the rows that satisfy the conditions. In this case,\nORDER BY and LIMIT> cannot be used. A DELETE can also reference tables which are located in different databases; see Identifier Qualifiers for the syntax.",
        "where_condition is an expression that evaluates to true for\neach row to be deleted. It is specified as described in SELECT.",
        "Currently, you cannot delete from a table and select from the same\ntable in a subquery.",
        "You need the DELETE privilege on a table to delete rows from\nit. You need only the SELECT privilege for any columns that\nare only read, such as those named in the WHERE clause. See\nGRANT.",
        "As stated, a DELETE statement with no WHERE\nclause deletes all rows. A faster way to do this, when you do not need to know\nthe number of deleted rows, is to use TRUNCATE TABLE. However,\nwithin a transaction or if you have a lock on the table, \nTRUNCATE TABLE cannot be used whereas DELETE\ncan. See TRUNCATE TABLE, and\nLOCK.",
        "AS",
        "MariaDB starting with 11.6From MariaDB 11.6, single table DELETEs support aliases. For example:\nCREATE TABLE t1 (c1 INT);\nINSERT INTO t1 VALUES (1), (2);\n\nDELETE FROM t1 AS a1 WHERE a1.c1 = 2;\n",
        "PARTITION",
        "See Partition Pruning and Selection for details.",
        "FOR PORTION OF",
        "See Application Time Periods - Deletion by Portion.",
        "RETURNING",
        "It is possible to return a resultset of the deleted rows for a single table to the client by using the syntax DELETE ... RETURNING select_expr [, select_expr2 ...]]",
        "Any of SQL expression that can be calculated from a single row fields is allowed. Subqueries are allowed. The AS keyword is allowed, so it is possible to use aliases.",
        "The use of aggregate functions is not allowed. RETURNING cannot be used in multi-table DELETEs.",
        "Same Source and Target Table",
        "It is possible to delete from a table with the same source and target. For example:",
        "DELETE FROM t1 WHERE c1 IN (SELECT b.c1 FROM t1 b WHERE b.c2=0);\n",
        "DELETE HISTORY",
        "One can use DELETE HISTORY to delete historical information from System-versioned tables."
    ],
    "Examples": [
        "DELETE FROM page_hit ORDER BY timestamp LIMIT 1000000;\n",
        "DELETE FROM t RETURNING f1;\n+------+\n| f1   |\n+------+\n|    5 |\n|   50 |\n|  500 |\n+------+ \n",
        "DELETE post FROM blog INNER JOIN post WHERE blog.id = post.blog_id;\n",
        "CREATE TABLE t1 (c1 INT, c2 INT);\nDELETE FROM t1 WHERE c1 IN (SELECT b.c1 FROM t1 b WHERE b.c2=0);\n",
        "ERROR 1093 (HY000): Table 't1' is specified twice, both as a target for 'DELETE' \n  and as a separate source for\n",
        "Query OK, 0 rows affected (0.00 sec)\n"
    ],
    "Category": [
        "Data Manipulation"
    ]
}