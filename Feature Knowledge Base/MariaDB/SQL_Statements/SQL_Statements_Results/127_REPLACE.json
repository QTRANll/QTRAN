{
    "HTML": [
        "https://mariadb.com//kb/en/replace/"
    ],
    "Title": [
        "REPLACE"
    ],
    "Feature": [
        "REPLACE [LOW_PRIORITY | DELAYED]\n [INTO] tbl_name [PARTITION (partition_list)] [(col,...)]\n {VALUES | VALUE} ({expr | DEFAULT},...),(...),...\n[RETURNING select_expr \n      [, select_expr ...]]\n",
        "Or:",
        "REPLACE [LOW_PRIORITY | DELAYED]\n    [INTO] tbl_name [PARTITION (partition_list)]\n    SET col={expr | DEFAULT}, ...\n[RETURNING select_expr \n      [, select_expr ...]]\n",
        "Or:",
        "REPLACE [LOW_PRIORITY | DELAYED]\n    [INTO] tbl_name [PARTITION (partition_list)] [(col,...)]\n    SELECT ...\n[RETURNING select_expr \n      [, select_expr ...]]\n"
    ],
    "Description": [
        " REPLACE works exactly like\n INSERT, except that if an old row in the table\n has the same value as a new row for a PRIMARY KEY or a\n UNIQUE index, the old row is deleted before the new row is\n inserted. If the table has more than one UNIQUE keys, it is possible that the new row conflicts with more than one row. In this case, all conflicting rows will be deleted.",
        "The table name can be specified in the form db_name.tbl_name or, if a default database is selected, in the form tbl_name (see Identifier Qualifiers). This allows to use REPLACE ... SELECT to copy rows between different databases.\n",
        "MariaDB starting with 10.5.0The RETURNING clause was introduced in MariaDB 10.5.0\n",
        "Basically it works like this:",
        "BEGIN;\nSELECT 1 FROM t1 WHERE key=# FOR UPDATE;\nIF found-row\n  DELETE FROM t1 WHERE key=# ;\nENDIF\nINSERT INTO t1 VALUES (...);\nEND;\n",
        "The above can be replaced with:",
        "REPLACE INTO t1 VALUES (...)\n",
        " REPLACE is a MariaDB/MySQL extension to the SQL standard. It\n either inserts, or deletes and inserts. For other MariaDB/MySQL extensions to\n standard SQL --- that also handle duplicate values --- see IGNORE and INSERT ON DUPLICATE KEY UPDATE.",
        "Note that unless the table has a PRIMARY KEY or\n UNIQUE index, using a REPLACE statement\nmakes no sense. It becomes equivalent to INSERT, because\nthere is no index to be used to determine whether a new row duplicates another.",
        "Values for all columns are taken from the values sSee Partition Pruning and Selection for details.pecified in the\n REPLACE statement. Any missing columns are set to their\ndefault values, just as happens for INSERT. You cannot refer\nto values from the current row and use them in the new row. If you use an\nassignment such as 'SET col = col + 1', the\nreference to the column name on the right hand side is treated as\n DEFAULT(col), so the assignment is equivalent to\n 'SET col = DEFAULT(col) + 1'.",
        "To use REPLACE, you must have both the\n INSERT and DELETE privileges\nfor the table.",
        "There are some gotchas you should be aware of, before using REPLACE:",
        "If there is an AUTO_INCREMENT field, a new value will be generated.\nIf there are foreign keys, ON DELETE action will be activated by REPLACE.\nTriggers on DELETE and INSERT will be activated by REPLACE.\n",
        "To avoid some of these behaviors, you can use INSERT ... ON DUPLICATE KEY UPDATE.",
        "This statement activates INSERT and DELETE triggers. See Trigger Overview for details.",
        "PARTITION",
        "See Partition Pruning and Selection for details.",
        "REPLACE RETURNING",
        "REPLACE ... RETURNING returns a resultset of the replaced rows.\nThis returns the listed columns for all the rows that are replaced, or alternatively, the specified SELECT expression. Any SQL expressions which can be calculated can be used in the select expression for the RETURNING clause, including virtual columns and aliases, expressions which use various operators such as bitwise, logical and arithmetic operators, string functions, date-time functions, numeric functions, control flow functions, secondary functions and stored functions. Along with this, statements which have subqueries and prepared statements can also be used.\n",
        "Examples",
        "Simple REPLACE statement",
        "REPLACE INTO t2 VALUES (1,'Leopard'),(2,'Dog') RETURNING id2, id2+id2 \nas Total ,id2|id2, id2&&id2;\n+-----+-------+---------+----------+\n| id2 | Total | id2|id2 | id2&&id2 |\n+-----+-------+---------+----------+\n|   1 |     2 |       1 |        1 |\n|   2 |     4 |       2 |        1 |\n+-----+-------+---------+----------+\n",
        "Using stored functions in RETURNING",
        "DELIMITER |\nCREATE FUNCTION f(arg INT) RETURNS INT\n    BEGIN\n      RETURN (SELECT arg+arg);\n    END|\n\nDELIMITER ;\nPREPARE stmt FROM \"REPLACE INTO t2 SET id2=3, animal2='Fox' RETURNING f2(id2),\nUPPER(animal2)\";\n\nEXECUTE stmt;\n+---------+----------------+\n| f2(id2) | UPPER(animal2) |\n+---------+----------------+\n|       6 | FOX            |\n+---------+----------------+\n",
        "Subqueries in the statement",
        "REPLACE INTO t1 SELECT * FROM t2 RETURNING (SELECT id2 FROM t2 WHERE \nid2 IN (SELECT id2 FROM t2 WHERE id2=1)) AS new_id;\n+--------+\n| new_id |\n+--------+\n|      1 |\n|      1 |\n|      1 |\n|      1 |\n+--------+\n",
        "Subqueries in the RETURNING clause that return more than one row or column cannot be used..",
        "Aggregate functions cannot be used in the RETURNING clause. Since aggregate functions work on a set of values and if the purpose is to get the row count, ROW_COUNT() with SELECT can be used, or it can be used in REPLACE...SEL== Description",
        "REPLACE ... RETURNING returns a resultset of the replaced rows.\nThis returns the listed columns for all the rows that are replaced, or alternatively, the specified SELECT expression. Any SQL expressions which can be calculated can be used in the select expression for the RETURNING clause, including virtual columns and aliases, expressions which use various operators such as bitwise, logical and arithmetic operators, string functions, date-time functions, numeric functions, control flow functions, secondary functions and stored functions. Along with this, statements which have subqueries and prepared statements can also be used.\n"
    ],
    "Examples": [
        "REPLACE INTO t2 VALUES (1,'Leopard'),(2,'Dog') RETURNING id2, id2+id2 \nas Total ,id2|id2, id2&&id2;\n+-----+-------+---------+----------+\n| id2 | Total | id2|id2 | id2&&id2 |\n+-----+-------+---------+----------+\n|   1 |     2 |       1 |        1 |\n|   2 |     4 |       2 |        1 |\n+-----+-------+---------+----------+\n",
        "DELIMITER |\nCREATE FUNCTION f(arg INT) RETURNS INT\n    BEGIN\n      RETURN (SELECT arg+arg);\n    END|\n\nDELIMITER ;\nPREPARE stmt FROM \"REPLACE INTO t2 SET id2=3, animal2='Fox' RETURNING f2(id2),\nUPPER(animal2)\";\n\nEXECUTE stmt;\n+---------+----------------+\n| f2(id2) | UPPER(animal2) |\n+---------+----------------+\n|       6 | FOX            |\n+---------+----------------+\n",
        "REPLACE INTO t1 SELECT * FROM t2 RETURNING (SELECT id2 FROM t2 WHERE \nid2 IN (SELECT id2 FROM t2 WHERE id2=1)) AS new_id;\n+--------+\n| new_id |\n+--------+\n|      1 |\n|      1 |\n|      1 |\n|      1 |\n+--------+\n"
    ],
    "Category": [
        "Data Manipulation"
    ]
}