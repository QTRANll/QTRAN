{
    "HTML": [
        "https://mariadb.com//kb/en/insert-delayed/"
    ],
    "Title": [
        "INSERT DELAYED"
    ],
    "Feature": [
        "INSERT DELAYED ...\n"
    ],
    "Description": [
        "The DELAYED option for the INSERT\nstatement is a MariaDB/MySQL extension to standard SQL that is very useful if you have\nclients that cannot or need not wait for the INSERT to\ncomplete. This is a common situation when you use MariaDB for logging and you\nalso periodically run SELECT and UPDATE\nstatements that take a long time to complete.",
        "When a client uses INSERT DELAYED, it gets an okay from the\nserver at once, and the row is queued to be inserted when the table is not in\nuse by any other thread.",
        "Another major benefit of using INSERT DELAYED is that\ninserts from many clients are bundled together and written in one block. This\nis much faster than performing many separate inserts.",
        "Note that INSERT DELAYED is slower than a normal\n INSERT if the table is not otherwise in use. There is also\nthe additional overhead for the server to handle a separate thread for each\ntable for which there are delayed rows. This means that you should use\nINSERT DELAYED only when you are really sure that you need\nit.",
        "The queued rows are held only in memory until they are inserted into the table.\nThis means that if you terminate mariadbd forcibly (for example, with kill -9) or\nif mariadbd dies unexpectedly, any queued rows that have not been written to disk\nare lost.",
        "The number of concurrent INSERT DELAYED threads is limited by the max_delayed_threads server system variables. If it is set to 0, INSERT DELAYED is disabled. The session value can be equal to the global value, or 0 to disable this statement for the current session. If this limit has been reached, the DELAYED clause will be silently ignore for subsequent statements (no error will be produced).",
        "Limitations",
        "There are some limitations on the use of DELAYED:",
        "INSERT DELAYED works only with MyISAM, MEMORY, ARCHIVE,\n  and BLACKHOLE tables. If you execute INSERT DELAYED with another storage engine, you will get an error like this: ERROR 1616 (HY000): DELAYED option not supported for table 'tab_name'\nFor MyISAM tables, if there are no free blocks in the middle of the data\n  file, concurrent SELECT and INSERT statements are supported. Under these\n  circumstances, you very seldom need to use INSERT DELAYED\n  with MyISAM.\nINSERT DELAYED should be used only for\n  INSERT statements that specify value lists. The server\n  ignores DELAYED for INSERT ... SELECT\n  or INSERT ... ON DUPLICATE KEY UPDATE statements.\nBecause the INSERT DELAYED statement returns immediately,\n  before the rows are inserted, you cannot use\n  LAST_INSERT_ID() to get the\n  AUTO_INCREMENT value that the statement might generate.\nDELAYED rows are not visible to SELECT\n  statements until they actually have been inserted.\nAfter INSERT DELAYED, ROW_COUNT() returns the number of the rows you tried to insert, not the number of the successful writes.\nDELAYED is ignored on slave replication servers, so that \n  INSERT DELAYED is treated as a normal\n  INSERT on slaves. This is because\n  DELAYED could cause the slave to have different data than\n  the master. INSERT DELAYED statements are not safe for replication.\nPending INSERT DELAYED statements are lost if a table is\n  write locked and ALTER TABLE is used to modify the table structure.\nINSERT DELAYED is not supported for views. If you try, you will get an error like this: ERROR 1347 (HY000): 'view_name' is not BASE TABLE\nINSERT DELAYED is not supported for partitioned tables.\nINSERT DELAYED is not supported within stored programs.\nINSERT DELAYED does not work with triggers.\nINSERT DELAYED does not work if there is a check constraint in place.\nINSERT DELAYED does not work if skip-new mode is active.\n"
    ],
    "Examples": [],
    "Category": [
        "Data Manipulation"
    ]
}