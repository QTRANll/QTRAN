{
    "HTML": [
        "https://mariadb.com//kb/en/create-procedure/"
    ],
    "Title": [
        "CREATE PROCEDURE"
    ],
    "Feature": [
        "CREATE\n    [OR REPLACE]\n    [DEFINER = { user | CURRENT_USER | role | CURRENT_ROLE }]\n    PROCEDURE [IF NOT EXISTS] sp_name ([proc_parameter[,...]])\n    [characteristic ...] routine_body\n\nproc_parameter:\n    [ IN | OUT | INOUT ] param_name type\n\ntype:\n    Any valid MariaDB data type\n\ncharacteristic:\n    LANGUAGE SQL\n  | [NOT] DETERMINISTIC\n  | { CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA }\n  | SQL SECURITY { DEFINER | INVOKER }\n  | COMMENT 'string'\n\nroutine_body:\n    Valid SQL procedure statement\n"
    ],
    "Description": [
        "Creates a stored procedure. By default, a routine is\nassociated with the default database. To associate the routine\nexplicitly with a given database, specify the name as db_name.sp_name\nwhen you create it.",
        "When the routine is invoked, an implicit USE db_name is performed (and\nundone when the routine terminates). The causes the routine to have\nthe given default database while it executes. USE statements within\nstored routines are disallowed.",
        "When a stored procedure has been created, you invoke it by\nusing the CALL statement (see CALL).",
        "To execute the CREATE PROCEDURE statement, it is\nnecessary to have the CREATE ROUTINE privilege. By default, MariaDB\nautomatically grants the ALTER ROUTINE and EXECUTE privileges to the\nroutine creator. See also Stored Routine Privileges.",
        "The DEFINER and SQL SECURITY clauses specify the security context to\nbe used when checking access privileges at routine execution time, as\ndescribed here. Requires the SUPER privilege, or, from MariaDB 10.5.2, the SET USER privilege.",
        "If the routine name is the same as the name of a built-in SQL\nfunction, you must use a space between the name and the following\nparenthesis when defining the routine, or a syntax error occurs. This\nis also true when you invoke the routine later. For this reason, we\nsuggest that it is better to avoid re-using the names of existing SQL\nfunctions for your own stored routines.",
        "The IGNORE_SPACE SQL mode applies to built-in functions, not to stored\nroutines. It is always allowable to have spaces after a routine name,\nregardless of whether IGNORE_SPACE is enabled.",
        "The parameter list enclosed within parentheses must always be present.\nIf there are no parameters, an empty parameter list of () should be\nused. Parameter names are not case sensitive.",
        "Each parameter can be declared to use any valid data type, except that\nthe COLLATE attribute cannot be used.",
        "For valid identifiers to use as procedure names, see Identifier Names.",
        "Things to be Aware of With CREATE OR REPLACE",
        "One can't use OR REPLACE together with IF EXISTS.\n"
    ],
    "Examples": [
        "DELIMITER //\n\nCREATE PROCEDURE simpleproc (OUT param1 INT)\n BEGIN\n  SELECT COUNT(*) INTO param1 FROM t;\n END;\n//\n\nDELIMITER ;\n\nCALL simpleproc(@a);\n\nSELECT @a;\n+------+\n| @a   |\n+------+\n|    1 |\n+------+\n",
        "DELIMITER //\n\nCREATE PROCEDURE simpleproc2 (\n  OUT param1 CHAR(10) CHARACTER SET 'utf8' COLLATE 'utf8_bin'\n)\n BEGIN\n  SELECT CONCAT('a'),f1 INTO param1 FROM t;\n END;\n//\n\nDELIMITER ;\n",
        "DELIMITER //\n\nCREATE PROCEDURE simpleproc2 (\n  OUT param1 CHAR(10) CHARACTER SET 'utf8' COLLATE 'utf8_bin'\n)\n BEGIN\n  SELECT CONCAT('a'),f1 INTO param1 FROM t;\n END;\n//\nERROR 1304 (42000): PROCEDURE simpleproc2 already exists\n\nDELIMITER ;\n\nDELIMITER //\n\nCREATE OR REPLACE PROCEDURE simpleproc2 (\n  OUT param1 CHAR(10) CHARACTER SET 'utf8' COLLATE 'utf8_bin'\n)\n BEGIN\n  SELECT CONCAT('a'),f1 INTO param1 FROM t;\n END;\n//\nERROR 1304 (42000): PROCEDURE simpleproc2 already exists\n\nDELIMITER ;\nQuery OK, 0 rows affected (0.03 sec)\n"
    ],
    "Category": [
        "Data Definition"
    ]
}