{
    "HTML": [
        "https://mariadb.com//kb/en/truncate-table/"
    ],
    "Title": [
        "TRUNCATE TABLE"
    ],
    "Feature": [
        "TRUNCATE [TABLE] tbl_name\n  [WAIT n | NOWAIT]\n"
    ],
    "Description": [
        "TRUNCATE TABLE empties a table completely. It requires the DROP privilege. See GRANT.",
        "tbl_name can also be specified in the form db_name.tbl_name (see Identifier Qualifiers).",
        "Logically, TRUNCATE TABLE is equivalent to a DELETE statement that deletes all rows, but there are practical differences under some circumstances.",
        "TRUNCATE TABLE will fail for an InnoDB table if any FOREIGN KEY constraints from other tables reference the table, returning the error:",
        "ERROR 1701 (42000): Cannot truncate a table referenced in a foreign key constraint\n",
        "Foreign Key constraints between columns in the same table are permitted.",
        "For an InnoDB table, if there are no FOREIGN KEY constraints, InnoDB performs fast truncation by dropping the original table and creating an empty one with the same definition, which is much faster than deleting rows one by one. The AUTO_INCREMENT counter is reset by TRUNCATE TABLE, regardless of whether there is a FOREIGN KEY constraint.",
        "The count of rows affected by TRUNCATE TABLE is accurate only\nwhen it is mapped to a DELETE statement.",
        "For other storage engines, TRUNCATE TABLE differs from\nDELETE in the following ways:",
        "Truncate operations drop and re-create the table, which is much\n  faster than deleting rows one by one, particularly for large tables.\nTruncate operations cause an implicit commit.\nTruncation operations cannot be performed if the session holds an\n  active table lock.\nTruncation operations do not return a meaningful value for the number\n  of deleted rows. The usual result is \"0 rows affected,\" which should\n  be interpreted as \"no information.\"\nAs long as the table format file tbl_name.frm is valid, the\n  table can be re-created as an empty table\n  with TRUNCATE TABLE, even if the data or index files have become\n  corrupted.\nThe table handler does not remember the last\n  used AUTO_INCREMENT value, but starts counting\n  from the beginning. This is true even for MyISAM and InnoDB, which normally\n  do not reuse sequence values.\nWhen used with partitioned tables, TRUNCATE TABLE preserves\n  the partitioning; that is, the data and index files are dropped and\n  re-created, while the partition definitions (.par) file is\n  unaffected.\nSince truncation of a table does not make any use of DELETE,\n  the TRUNCATE statement does not invoke ON DELETE triggers.\nTRUNCATE TABLE will only reset the values in the Performance Schema summary tables to zero or null, and will not remove the rows.\n",
        "For the purposes of binary logging and replication, TRUNCATE TABLE is treated as DROP TABLE followed by CREATE TABLE (DDL rather than DML).",
        "TRUNCATE TABLE does not work on views. Currently, TRUNCATE TABLE drops all historical records from a system-versioned table.",
        "WAIT/NOWAIT",
        "Set the lock wait timeout. See WAIT and NOWAIT.",
        "Oracle-mode",
        "Oracle-mode from MariaDB 10.3 permits the optional keywords REUSE STORAGE or DROP STORAGE to be used.",
        "TRUNCATE [TABLE] tbl_name [{DROP | REUSE} STORAGE] [WAIT n | NOWAIT]\n",
        "These have no effect on the operation.",
        "Performance",
        "TRUNCATE TABLE is faster than DELETE, because it drops and re-creates a table.",
        "With InnoDB, TRUNCATE TABLE is slower if innodb_file_per_table=ON is set (the default). This is because TRUNCATE TABLE unlinks the underlying tablespace file, which can be an expensive operation. See MDEV-8069 for more details.",
        "The performance issues with innodb_file_per_table=ON can be exacerbated in cases where the InnoDB buffer pool is very large and innodb_adaptive_hash_index=ON is set. In that case, using DROP TABLE followed by CREATE TABLE instead of TRUNCATE TABLE may perform better. Setting innodb_adaptive_hash_index=OFF (it defaults to ON before MariaDB 10.5) can also help. In MariaDB 10.2 only, from MariaDB 10.2.19, this performance can also be improved by setting innodb_safe_truncate=OFF. See MDEV-9459 for more details.",
        "Setting innodb_adaptive_hash_index=OFF can also improve TRUNCATE TABLE performance in general. See MDEV-16796 for more details."
    ],
    "Examples": [],
    "Category": [
        "Table Statements"
    ]
}