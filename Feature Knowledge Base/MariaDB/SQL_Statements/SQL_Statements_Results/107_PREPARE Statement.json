{
    "HTML": [
        "https://mariadb.com//kb/en/prepare-statement/"
    ],
    "Title": [
        "PREPARE Statement"
    ],
    "Feature": [
        "PREPARE stmt_name FROM preparable_stmt\n"
    ],
    "Description": [
        "The PREPARE statement prepares a statement and assigns it a name,\nstmt_name, by which to refer to the statement later. Statement names\nare not case sensitive. preparable_stmt is either a string literal or a user variable (not a local variable, an SQL expression or a subquery) that contains the text of the statement. The text must   \nrepresent a single SQL statement, not multiple statements. Within the\nstatement, \"?\" characters can be used as parameter markers to indicate\nwhere data values are to be bound to the query later when you execute\nit. The \"?\" characters should not be enclosed within quotes, even if\nyou intend to bind them to string values. Parameter markers can be used\nonly where expressions should appear, not for SQL keywords,\nidentifiers, and so forth.",
        "The scope of a prepared statement is the session within which it is\ncreated. Other sessions cannot see it.",
        "If a prepared statement with the given name already exists, it is\ndeallocated implicitly before the new statement is prepared. This means\nthat if the new statement contains an error and cannot be prepared, an\nerror is returned and no statement with the given name exists.",
        "Prepared statements can be PREPAREd and EXECUTEd in a stored procedure, but not in a stored function or trigger. Also, even if the statement is PREPAREd in a procedure, it will not be deallocated when the procedure execution ends.",
        "A prepared statement can access user-defined variables, but not local variables or procedure's parameters.",
        "If the prepared statement contains a syntax error, PREPARE will fail. As a side effect, stored procedures can use it to check if a statement is valid. For example:",
        "CREATE PROCEDURE `test_stmt`(IN sql_text TEXT)\nBEGIN\n        DECLARE EXIT HANDLER FOR SQLEXCEPTION\n        BEGIN\n                SELECT CONCAT(sql_text, ' is not valid');\n        END;\n        SET @SQL := sql_text;\n        PREPARE stmt FROM @SQL;\n        DEALLOCATE PREPARE stmt;\nEND;\n",
        "The FOUND_ROWS() and ROW_COUNT() functions, if called immediatly after EXECUTE, return the number of rows read or affected by the prepared statements; however, if they are called after DEALLOCATE PREPARE, they provide information about this statement. If the prepared statement produces errors or warnings, GET DIAGNOSTICS return information about them. DEALLOCATE PREPARE shouldn't clear the diagnostics area, unless it produces an error.",
        "A prepared statement is executed with EXECUTE and released \nwith DEALLOCATE PREPARE.",
        "The max_prepared_stmt_count server system variable determines the number of allowed prepared statements that can be prepared on the server. If it is set to 0, prepared statements are not allowed. If the limit is reached, an error similar to the following will be produced:",
        "ERROR 1461 (42000): Can't create more than max_prepared_stmt_count statements \n  (current value: 0)\n",
        "Oracle Mode",
        "In Oracle mode, PREPARE stmt FROM 'SELECT :1, :2' is used, instead of ?."
    ],
    "Examples": [
        "create table t1 (a int,b char(10));\ninsert into t1 values (1,\"one\"),(2, \"two\"),(3,\"three\");\nprepare test from \"select * from t1 where a=?\";\nset @param=2;\nexecute test using @param;\n+------+------+\n| a    | b    |\n+------+------+\n|    2 | two  |\n+------+------+\nset @param=3;\nexecute test using @param;\n+------+-------+\n| a    | b     |\n+------+-------+\n|    3 | three |\n+------+-------+\ndeallocate prepare test;\n",
        "CREATE PROCEDURE test.stmt_test(IN tab_name VARCHAR(64))\nBEGIN\n\tSET @sql = CONCAT('SELECT COUNT(*) FROM ', tab_name);\n\tPREPARE stmt FROM @sql;\n\tEXECUTE stmt;\n\tDEALLOCATE PREPARE stmt;\nEND;\n\nCALL test.stmt_test('mysql.user');\n+----------+\n| COUNT(*) |\n+----------+\n|        4 |\n+----------+\n",
        "PREPARE stmt FROM 'SELECT @x;';\n\nSET @x = 1;\n\nEXECUTE stmt;\n+------+\n| @x   |\n+------+\n|    1 |\n+------+\n\nSET @x = 0;\n\nEXECUTE stmt;\n+------+\n| @x   |\n+------+\n|    0 |\n+------+\n\nDEALLOCATE PREPARE stmt;\n"
    ],
    "Category": [
        "Prepared Statements"
    ]
}