{
    "HTML": [
        "https://mariadb.com//kb/en/update/"
    ],
    "Title": [
        "UPDATE"
    ],
    "Feature": [
        "Single-table syntax:",
        "UPDATE [LOW_PRIORITY] [IGNORE] table_reference \n  [PARTITION (partition_list)]\n  [FOR PORTION OF period FROM expr1 TO expr2]\n  SET col1={expr1|DEFAULT} [,col2={expr2|DEFAULT}] ...\n  [WHERE where_condition]\n  [ORDER BY ...]\n  [LIMIT row_count]\n",
        "Multiple-table syntax:",
        "UPDATE [LOW_PRIORITY] [IGNORE] table_references\n    SET col1={expr1|DEFAULT} [, col2={expr2|DEFAULT}] ...\n    [WHERE where_condition]\n"
    ],
    "Description": [
        "For the single-table syntax, the UPDATE statement updates\ncolumns of existing rows in the named table with new values. The\nSET clause indicates which columns to modify and the values\nthey should be given.  Each value can be given as an expression, or the keyword\nDEFAULT to set a column explicitly to its default value. The\nWHERE clause, if given, specifies the conditions that identify\nwhich rows to update. With no WHERE clause, all rows are\nupdated. If the ORDER BY clause is specified, the rows are\nupdated in the order that is specified. The LIMIT clause\nplaces a limit on the number of rows that can be updated.",
        "Both clauses can be used with multiple-table updates. Prior to MariaDB 10.3, for the multiple-table syntax, UPDATE updates rows in each table named in table_references that satisfy the conditions. In this case,\nORDER BY and LIMIT could not be used.",
        "An UPDATE can also reference tables which are located in different databases; see Identifier Qualifiers for the syntax.",
        "where_condition is an expression that evaluates to true for\neach row to be updated.",
        "table_references and where_condition are as\nspecified as described in SELECT.",
        "For single-table updates, assignments are evaluated in left-to-right order, while for multi-table updates, there is no guarantee of a particular order. If the SIMULTANEOUS_ASSIGNMENT sql_mode is set, UPDATE statements evaluate all assignments simultaneously.",
        "You need the UPDATE privilege only for columns referenced in\nan UPDATE that are actually updated. You need only the\nSELECT privilege for any columns that are read but\nnot modified. See GRANT.",
        "The UPDATE statement supports the following modifiers:",
        "If you use the LOW_PRIORITY keyword, execution of\n  the UPDATE is delayed until no other clients are reading from\n  the table. This affects only storage engines that use only table-level\n  locking (MyISAM, MEMORY, MERGE). See HIGH_PRIORITY and LOW_PRIORITY clauses for details.\nIf you use the IGNORE keyword, the update statement does \n  not abort even if errors occur during the update. Rows for which\n  duplicate-key conflicts occur are not updated. Rows for which columns are\n  updated to values that would cause data conversion errors are updated to the\n  closest valid values instead.\n",
        "PARTITION",
        "See Partition Pruning and Selection for details.",
        "FOR PORTION OF",
        "See Application Time Periods - Updating by Portion.",
        "UPDATE Statements With the Same Source and Target",
        "UPDATE statements may have the same source and target.\nFor example, given the following table:",
        "DROP TABLE t1;\nCREATE TABLE t1 (c1 INT, c2 INT);\nINSERT INTO t1 VALUES (10,10), (20,20);\n\nUPDATE t1 SET c1=c1+1 WHERE c2=(SELECT MAX(c2) FROM t1);\n\nSELECT * FROM t1;\n+------+------+\n| c1   | c2   |\n+------+------+\n|   10 |   10 |\n|   21 |   20 |\n+------+------+\n"
    ],
    "Examples": [
        "UPDATE table_name SET column1 = value1, column2 = value2 WHERE id=100;\n",
        "UPDATE tab1, tab2 SET tab1.column1 = value1, tab1.column2 = value2 WHERE tab1.id = tab2.id;\n"
    ],
    "Category": [
        "Data Manipulation"
    ]
}