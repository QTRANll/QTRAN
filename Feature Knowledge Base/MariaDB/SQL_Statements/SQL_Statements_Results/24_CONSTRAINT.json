{
    "HTML": [
        "https://mariadb.com//kb/en/constraint/"
    ],
    "Title": [
        "CONSTRAINT"
    ],
    "Feature": [
        "[CONSTRAINT [symbol]] constraint_expression\n\nconstraint_expression:\n  | PRIMARY KEY [index_type] (index_col_name, ...) [index_option] ...\n  | FOREIGN KEY [index_name] (index_col_name, ...) \n       REFERENCES tbl_name (index_col_name, ...)\n       [ON DELETE reference_option]\n       [ON UPDATE reference_option]\n  | UNIQUE [INDEX|KEY] [index_name]\n       [index_type] (index_col_name, ...) [index_option] ...\n  | CHECK (check_constraints)\n\nindex_type:\n  USING {BTREE | HASH | RTREE}\n\nindex_col_name:\n  col_name [(length)] [ASC | DESC]\n\nindex_option:\n  | KEY_BLOCK_SIZE [=] value\n  | index_type\n  | WITH PARSER parser_name\n  | COMMENT 'string'\n  | CLUSTERING={YES|NO}\n\nreference_option:\n  RESTRICT | CASCADE | SET NULL | NO ACTION | SET DEFAULT\n"
    ],
    "Description": [
        "Constraints provide restrictions on the data you can add to a table.  This allows you to enforce data integrity from MariaDB, rather than through application logic.  When a statement violates a constraint, MariaDB throws an error.",
        "There are four types of table constraints:",
        "ConstraintDescription\nPRIMARY KEYSets the column for referencing rows.  Values must be unique and not null.\nFOREIGN KEYSets the column to reference the primary key on another table.\nUNIQUERequires values in column or columns only occur once in the table.\nCHECKChecks whether the data meets the given condition.\n\n",
        "The Information Schema TABLE_CONSTRAINTS Table contains information about tables that have constraints.",
        "FOREIGN KEY Constraints",
        "InnoDB supports foreign key constraints. The syntax for a foreign key\nconstraint definition in InnoDB looks like this:",
        "[CONSTRAINT [symbol]] FOREIGN KEY\n    [index_name] (index_col_name, ...)\n    REFERENCES tbl_name (index_col_name,...)\n    [ON DELETE reference_option]\n    [ON UPDATE reference_option]\n\nreference_option:\n    RESTRICT | CASCADE | SET NULL | NO ACTION\n",
        "The Information Schema REFERENTIAL_CONSTRAINTS table has more information about foreign keys.",
        "CHECK Constraints",
        "Constraints are enforced. Before MariaDB 10.2.1 constraint expressions were accepted in the syntax but ignored.",
        "You can define constraints in 2 different ways:",
        "CHECK(expression) given as part of a column definition.\nCONSTRAINT [constraint_name] CHECK (expression)\n",
        "Before a row is inserted or updated, all constraints are evaluated in the order they are defined. If any constraint expression returns false, then the row will not be inserted or updated.\nOne can use most deterministic functions in a constraint, including UDFs.",
        "CREATE TABLE t1 (a INT CHECK (a>2), b INT CHECK (b>2), CONSTRAINT a_greater CHECK (a>b));\n",
        "If you use the second format and you don't give a name to the constraint, then the constraint will get an automatically generated name. This is done so that you can later delete the constraint with ALTER TABLE DROP constraint_name.",
        "One can disable all constraint expression checks by setting the check_constraint_checks variable to OFF. This is useful for example when loading a table that violates some constraints that you want to later find and fix in SQL.",
        "Replication",
        "In row-based replication, only the master checks constraints, and failed statements will not be replicated. In statement-based replication, the slaves will also check constraints. Constraints should therefore be identical, as well as deterministic, in a replication environment.",
        "Auto_increment",
        "auto_increment columns are not permitted in check constraints. Before MariaDB 10.2.6, they were permitted, but would not work correctly. See MDEV-11117."
    ],
    "Examples": [
        "CREATE TABLE product (category INT NOT NULL, id INT NOT NULL,\n                      price DECIMAL,\n                      PRIMARY KEY(category, id)) ENGINE=INNODB;\nCREATE TABLE customer (id INT NOT NULL,\n                       PRIMARY KEY (id)) ENGINE=INNODB;\nCREATE TABLE product_order (no INT NOT NULL AUTO_INCREMENT,\n                            product_category INT NOT NULL,\n                            product_id INT NOT NULL,\n                            customer_id INT NOT NULL,\n                            PRIMARY KEY(no),\n                            INDEX (product_category, product_id),\n                            FOREIGN KEY (product_category, product_id)\n                              REFERENCES product(category, id)\n                              ON UPDATE CASCADE ON DELETE RESTRICT,\n                            INDEX (customer_id),\n                            FOREIGN KEY (customer_id)\n                              REFERENCES customer(id)) ENGINE=INNODB;\n",
        "CREATE TABLE t1 (a INT CHECK (a>2), b INT CHECK (b>2), CONSTRAINT a_greater CHECK (a>b));\n\nINSERT INTO t1(a) VALUES (1);\nERROR 4022 (23000): CONSTRAINT `a` failed for `test`.`t1`\n\nINSERT INTO t1(a,b) VALUES (3,4);\nERROR 4022 (23000): CONSTRAINT `a_greater` failed for `test`.`t1`\n\nINSERT INTO t1(a,b) VALUES (4,3);\nQuery OK, 1 row affected (0.04 sec)\n",
        "ALTER TABLE t1 DROP CONSTRAINT a_greater;\n",
        "ALTER TABLE t1 ADD CONSTRAINT a_greater CHECK (a>b);\n",
        "CREATE TABLE t2 (name VARCHAR(30) CHECK (CHAR_LENGTH(name)>2), start_date DATE, \n  end_date DATE CHECK (start_date IS NULL OR end_date IS NULL OR start_date<end_date));\n\nINSERT INTO t2(name, start_date, end_date) VALUES('Ione', '2003-12-15', '2014-11-09');\nQuery OK, 1 row affected (0.04 sec)\n\nINSERT INTO t2(name, start_date, end_date) VALUES('Io', '2003-12-15', '2014-11-09');\nERROR 4022 (23000): CONSTRAINT `name` failed for `test`.`t2`\n\nINSERT INTO t2(name, start_date, end_date) VALUES('Ione', NULL, '2014-11-09');\nQuery OK, 1 row affected (0.04 sec)\n\nINSERT INTO t2(name, start_date, end_date) VALUES('Ione', '2015-12-15', '2014-11-09');\nERROR 4022 (23000): CONSTRAINT `end_date` failed for `test`.`t2`\n",
        "CREATE TABLE t3 (name VARCHAR(30) CHECK (CHAR_LENGTH(name>2)), start_date DATE, \n  end_date DATE CHECK (start_date IS NULL OR end_date IS NULL OR start_date<end_date));\nQuery OK, 0 rows affected (0.32 sec)\n\nINSERT INTO t3(name, start_date, end_date) VALUES('Io', '2003-12-15', '2014-11-09');\nQuery OK, 1 row affected, 1 warning (0.04 sec)\n\nSHOW WARNINGS;\n+---------+------+----------------------------------------+\n| Level   | Code | Message                                |\n+---------+------+----------------------------------------+\n| Warning | 1292 | Truncated incorrect DOUBLE value: 'Io' |\n+---------+------+----------------------------------------+\n"
    ],
    "Category": [
        "Data Definition"
    ]
}