{"HTML": ["https://mariadb.com//kb/en/not/"], "Title": ["!"], "Feature": ["NOT, !\n"], "Description": ["Logical NOT. Evaluates to 1 if the operand is 0, to 0 if the operand\nis non-zero, and NOT NULL returns NULL.", "By default, the ! operator has a higher precedence. If the HIGH_NOT_PRECEDENCE SQL_MODE flag is set, NOT and ! have the same precedence."], "Examples": ["SELECT NOT 10;\n+--------+\n| NOT 10 |\n+--------+\n|      0 |\n+--------+\n\nSELECT NOT 0;\n+-------+\n| NOT 0 |\n+-------+\n|     1 |\n+-------+\n\nSELECT NOT NULL;\n+----------+\n| NOT NULL |\n+----------+\n|     NULL |\n+----------+\n\nSELECT ! (1+1);\n+---------+\n| ! (1+1) |\n+---------+\n|       0 |\n+---------+\n\nSELECT ! 1+1;\n+-------+\n| ! 1+1 |\n+-------+\n|     1 |\n+-------+\n"], "Category": ["Logical Operators"], "index": 0}
{"HTML": ["https://mariadb.com//kb/en/div/"], "Title": ["DIV"], "Feature": ["DIV\n"], "Description": ["Integer division. Similar to FLOOR(), but is safe with BIGINT values.\nIncorrect results may occur for non-integer operands that exceed BIGINT range.", "If the ERROR_ON_DIVISION_BY_ZERO SQL_MODE is used, a division by zero produces an error. Otherwise, it returns NULL.", "The remainder of a division can be obtained using the MOD operator."], "Examples": ["SELECT 300 DIV 7;\n+-----------+\n| 300 DIV 7 |\n+-----------+\n|        42 |\n+-----------+\n\nSELECT 300 DIV 0;\n+-----------+\n| 300 DIV 0 |\n+-----------+\n|      NULL |\n+-----------+\n"], "Category": ["Arithmetic Operators"], "index": 1}
{"HTML": ["https://mariadb.com//kb/en/division-operator/"], "Title": ["Division Operator (/)"], "Feature": ["/\n"], "Description": ["Division operator. Dividing by zero will return NULL. By default, returns four digits after the decimal. This is determined by the server system variable div_precision_increment which by default is four. It can be set from 0 to 30.", "Dividing by zero returns NULL. If the ERROR_ON_DIVISION_BY_ZERO SQL_MODE is used (the default since MariaDB 10.2.4), a division by zero also produces a warning."], "Examples": ["SELECT 4/5;\n+--------+\n| 4/5    |\n+--------+\n| 0.8000 |\n+--------+\n\nSELECT 300/(2-2);\n+-----------+\n| 300/(2-2) |\n+-----------+\n|      NULL |\n+-----------+\n\nSELECT 300/7;\n+---------+\n| 300/7   |\n+---------+\n| 42.8571 |\n+---------+\n", "SET div_precision_increment = 6;\n\nSELECT 300/7;\n+-----------+\n| 300/7     |\n+-----------+\n| 42.857143 |\n+-----------+\n\nSELECT 300/7;\n+-----------+\n| 300/7     |\n+-----------+\n| 42.857143 |\n+-----------+\n"], "Category": ["Arithmetic Operators"], "index": 2}
{"HTML": ["https://mariadb.com//kb/en/greater-than/"], "Title": [">"], "Feature": [">\n"], "Description": ["Greater than operator. Evaluates both SQL expressions and returns 1 if the left value is greater than the right value and 0 if it is not, or NULL if either expression is NULL. If the expressions return different data types, (for instance, a number and a string), performs type conversion.", "When used in row comparisons these two queries return the same results:", "SELECT (t1.a, t1.b) > (t2.x, t2.y) \nFROM t1 INNER JOIN t2;\n\nSELECT (t1.a > t2.x) OR ((t1.a = t2.x) AND (t1.b > t2.y))\nFROM t1 INNER JOIN t2;\n"], "Examples": ["SELECT 2 > 2;\n+-------+\n| 2 > 2 |\n+-------+\n|     0 |\n+-------+\n\nSELECT 'b' > 'a';\n+-----------+\n| 'b' > 'a' |\n+-----------+\n|         1 |\n+-----------+\n"], "Category": ["Comparison Operators"], "index": 3}
{"HTML": ["https://mariadb.com//kb/en/greater-than-or-equal/"], "Title": [">="], "Feature": [">=\n"], "Description": ["Greater than or equal operator. Evaluates both SQL expressions and returns 1 if the left value is greater than or equal to the right value and 0 if it is not, or NULL if either expression is NULL. If the expressions return different data types, (for instance, a number and a string), performs type conversion.", "When used in row comparisons these two queries return the same results:", "SELECT (t1.a, t1.b) >= (t2.x, t2.y) \nFROM t1 INNER JOIN t2;\n\nSELECT (t1.a > t2.x) OR ((t1.a = t2.x) AND (t1.b >= t2.y))\nFROM t1 INNER JOIN t2;\n"], "Examples": ["SELECT 2 >= 2;\n+--------+\n| 2 >= 2 |\n+--------+\n|      1 |\n+--------+\n\nSELECT 'A' >= 'a';\n+------------+\n| 'A' >= 'a' |\n+------------+\n|          1 |\n+------------+\n"], "Category": ["Comparison Operators"], "index": 4}
{"HTML": ["https://mariadb.com//kb/en/shift-right/"], "Title": [">>"], "Feature": ["value1 >> value2\n"], "Description": ["Converts a longlong (BIGINT) number (value1) to binary and shifts value2 units to the right."], "Examples": ["SELECT 4 >> 2;\n+--------+\n| 4 >> 2 |\n+--------+\n|      1 |\n+--------+\n"], "Category": ["Bit Functions and Operators"], "index": 5}
{"HTML": ["https://mariadb.com//kb/en/greatest/"], "Title": ["GREATEST"], "Feature": ["GREATEST(value1,value2,...)\n"], "Description": ["With two or more arguments, returns the largest (maximum-valued)\nargument. The arguments are compared using the same rules as for\nLEAST()."], "Examples": ["SELECT GREATEST(2,0);\n+---------------+\n| GREATEST(2,0) |\n+---------------+\n|             2 |\n+---------------+\n", "SELECT GREATEST(34.0,3.0,5.0,767.0);\n+------------------------------+\n| GREATEST(34.0,3.0,5.0,767.0) |\n+------------------------------+\n|                        767.0 |\n+------------------------------+\n", "SELECT GREATEST('B','A','C');\n+-----------------------+\n| GREATEST('B','A','C') |\n+-----------------------+\n| C                     |\n+-----------------------+\n"], "Category": ["Comparison Operators"], "index": 6}
{"HTML": ["https://mariadb.com//kb/en/in/"], "Title": ["IN"], "Feature": ["expr IN (value,...)\n"], "Description": ["Returns 1 if expr is equal to any of the values in the IN list, else\nreturns 0. If all values are constants, they are evaluated according\nto the type of expr and sorted. The search for the item then is done\nusing a binary search. This means IN is very quick if the IN value\nlist consists entirely of constants. Otherwise, type conversion takes\nplace according to the rules described at Type Conversion, but\napplied to all the arguments.", "If expr is NULL, IN always returns NULL. If at least one of the values in the list is NULL, and one of the comparisons is true, the result is 1. If at least one of the values in the list is NULL and none of the comparisons is true, the result is NULL."], "Examples": ["SELECT 2 IN (0,3,5,7);\n+----------------+\n| 2 IN (0,3,5,7) |\n+----------------+\n|              0 |\n+----------------+\n", "SELECT 'wefwf' IN ('wee','wefwf','weg');\n+----------------------------------+\n| 'wefwf' IN ('wee','wefwf','weg') |\n+----------------------------------+\n|                                1 |\n+----------------------------------+ \n", "SELECT 1 IN ('1', '2', '3');\n+----------------------+\n| 1 IN ('1', '2', '3') |\n+----------------------+\n|                    1 |\n+----------------------+\n", "SELECT NULL IN (1, 2, 3);\n+-------------------+\n| NULL IN (1, 2, 3) |\n+-------------------+\n|              NULL |\n+-------------------+\n\nSELECT 1 IN (1, 2, NULL);\n+-------------------+\n| 1 IN (1, 2, NULL) |\n+-------------------+\n|                 1 |\n+-------------------+\n\nSELECT 5 IN (1, 2, NULL);\n+-------------------+\n| 5 IN (1, 2, NULL) |\n+-------------------+\n|              NULL |\n+-------------------+\n"], "Category": ["Comparison Operators"], "index": 7}
{"HTML": ["https://mariadb.com//kb/en/interval/"], "Title": ["INTERVAL"], "Feature": ["INTERVAL(N,N1,N2,N3,...)\n"], "Description": ["Returns the index of the last argument that is less than the first argument or is NULL. ", "Returns 0 if N < N1, 1 if N < N2, 2 if N < N3 and so on or -1 if N is NULL. All\narguments are treated as integers. It is required that N1 < N2 < N3 <\n... < Nn for this function to work correctly. This is because a fast binary\nsearch is used. "], "Examples": ["SELECT INTERVAL(23, 1, 15, 17, 30, 44, 200);\n+--------------------------------------+\n| INTERVAL(23, 1, 15, 17, 30, 44, 200) |\n+--------------------------------------+\n|                                    3 |\n+--------------------------------------+\n\nSELECT INTERVAL(10, 1, 10, 100, 1000);\n+--------------------------------+\n| INTERVAL(10, 1, 10, 100, 1000) |\n+--------------------------------+\n|                              2 |\n+--------------------------------+\n\nSELECT INTERVAL(22, 23, 30, 44, 200);\n+-------------------------------+\n| INTERVAL(22, 23, 30, 44, 200) |\n+-------------------------------+\n|                             0 |\n+-------------------------------+\n\nSELECT INTERVAL(10, 2, NULL);\n+-----------------------+\n| INTERVAL(10, 2, NULL) |\n+-----------------------+\n|                     2 |\n+-----------------------+\n"], "Category": ["Comparison Operators"], "index": 8}
{"HTML": ["https://mariadb.com//kb/en/is-not-null/"], "Title": ["IS NOT NULL"], "Feature": ["IS NOT NULL\n"], "Description": ["Tests whether a value is not NULL. See also NULL Values in MariaDB."], "Examples": ["SELECT 1 IS NOT NULL, 0 IS NOT NULL, NULL IS NOT NULL;\n+---------------+---------------+------------------+\n| 1 IS NOT NULL | 0 IS NOT NULL | NULL IS NOT NULL |\n+---------------+---------------+------------------+\n|             1 |             1 |                0 |\n+---------------+---------------+------------------+\n"], "Category": ["Comparison Operators"], "index": 9}
{"HTML": ["https://mariadb.com//kb/en/is-not/"], "Title": ["IS NOT"], "Feature": ["IS NOT boolean_value\n"], "Description": ["Tests a value against a boolean value, where boolean_value can be\nTRUE, FALSE, or UNKNOWN. "], "Examples": ["SELECT 1 IS NOT UNKNOWN, 0 IS NOT UNKNOWN, NULL IS NOT UNKNOWN;\n+------------------+------------------+---------------------+\n| 1 IS NOT UNKNOWN | 0 IS NOT UNKNOWN | NULL IS NOT UNKNOWN |\n+------------------+------------------+---------------------+\n|                1 |                1 |                   0 |\n+------------------+------------------+---------------------+\n", "SELECT NULL IS NOT TRUE, NULL IS NOT FALSE;\n+------------------+-------------------+\n| NULL IS NOT TRUE | NULL IS NOT FALSE |\n+------------------+-------------------+\n|                1 |                 1 |\n+------------------+-------------------+\n"], "Category": ["Comparison Operators"], "index": 10}
{"HTML": ["https://mariadb.com//kb/en/and/"], "Title": ["&&"], "Feature": ["AND, &&\n"], "Description": ["Logical AND. Evaluates to 1 if all operands are non-zero and not NULL,\nto 0 if one or more operands are 0, otherwise NULL is returned.", "For this operator, short-circuit evaluation can be used."], "Examples": ["SELECT 1 && 1;\n+--------+\n| 1 && 1 |\n+--------+\n|      1 |\n+--------+\n\nSELECT 1 && 0;\n+--------+\n| 1 && 0 |\n+--------+\n|      0 |\n+--------+\n\nSELECT 1 && NULL;\n+-----------+\n| 1 && NULL |\n+-----------+\n|      NULL |\n+-----------+\n\nSELECT 0 && NULL;\n+-----------+\n| 0 && NULL |\n+-----------+\n|         0 |\n+-----------+\n\nSELECT NULL && 0;\n+-----------+\n| NULL && 0 |\n+-----------+\n|         0 |\n+-----------+\n"], "Category": ["Logical Operators"], "index": 11}
{"HTML": ["https://mariadb.com//kb/en/is-null/"], "Title": ["IS NULL"], "Feature": ["IS NULL\n"], "Description": ["Tests whether a value is NULL. See also NULL Values in MariaDB."], "Examples": ["SELECT 1 IS NULL, 0 IS NULL, NULL IS NULL;\n+-----------+-----------+--------------+\n| 1 IS NULL | 0 IS NULL | NULL IS NULL |\n+-----------+-----------+--------------+\n|         0 |         0 |            1 |\n+-----------+-----------+--------------+\n"], "Category": ["Comparison Operators"], "index": 12}
{"HTML": ["https://mariadb.com//kb/en/is/"], "Title": ["IS"], "Feature": ["IS boolean_value\n"], "Description": ["Tests a value against a boolean value, where boolean_value can be\nTRUE, FALSE, or UNKNOWN.", "There is an important difference between using IS TRUE or comparing a value with TRUE using =. When using =, only 1 equals to TRUE. But when using IS TRUE, all values which are logically true (like a number > 1) return TRUE."], "Examples": ["SELECT 1 IS TRUE, 0 IS FALSE, NULL IS UNKNOWN;\n+-----------+------------+-----------------+\n| 1 IS TRUE | 0 IS FALSE | NULL IS UNKNOWN |\n+-----------+------------+-----------------+\n|         1 |          1 |               1 |\n+-----------+------------+-----------------+\n", "SELECT 2 = TRUE, 2 IS TRUE;\n+----------+-----------+\n| 2 = TRUE | 2 IS TRUE |\n+----------+-----------+\n|        0 |         1 |\n+----------+-----------+\n"], "Category": ["Comparison Operators"], "index": 13}
{"HTML": ["https://mariadb.com//kb/en/isnull/"], "Title": ["ISNULL"], "Feature": ["ISNULL(expr)\n"], "Description": ["If expr is NULL, ISNULL() returns 1, otherwise it returns 0.", "See also NULL Values in MariaDB."], "Examples": ["SELECT ISNULL(1+1);\n+-------------+\n| ISNULL(1+1) |\n+-------------+\n|           0 |\n+-------------+\n\nSELECT ISNULL(1/0);\n+-------------+\n| ISNULL(1/0) |\n+-------------+\n|           1 |\n+-------------+\n"], "Category": ["Comparison Operators"], "index": 14}
{"HTML": ["https://mariadb.com//kb/en/least/"], "Title": ["LEAST"], "Feature": ["LEAST(value1,value2,...)\n"], "Description": ["With two or more arguments, returns the smallest (minimum-valued)\nargument. The arguments are compared using the following rules:", "If the return value is used in an INTEGER context or all arguments are integer-valued, they are compared as integers.\nIf the return value is used in a REAL context or all arguments are real-valued, they are compared as reals.\nIf any argument is a case-sensitive string, the arguments are compared as case-sensitive strings.\nIn all other cases, the arguments are compared as case-insensitive strings.\n", "LEAST() returns NULL if any argument is NULL."], "Examples": ["SELECT LEAST(2,0);\n+------------+\n| LEAST(2,0) |\n+------------+\n|          0 |\n+------------+\n", "SELECT LEAST(34.0,3.0,5.0,767.0);\n+---------------------------+\n| LEAST(34.0,3.0,5.0,767.0) |\n+---------------------------+\n|                       3.0 |\n+---------------------------+\n", "SELECT LEAST('B','A','C');\n+--------------------+\n| LEAST('B','A','C') |\n+--------------------+\n| A                  |\n+--------------------+\n"], "Category": ["Comparison Operators"], "index": 15}
{"HTML": ["https://mariadb.com//kb/en/less-than/"], "Title": ["<"], "Feature": ["<\n"], "Description": ["Less than operator. Evaluates both SQL expressions and returns 1 if the left value is less than the right value and 0 if it is not, or NULL if either expression is NULL. If the expressions return different data types, (for instance, a number and a string), performs type conversion.", "When used in row comparisons these two queries return the same results:", "SELECT (t1.a, t1.b) < (t2.x, t2.y) \nFROM t1 INNER JOIN t2;\n\nSELECT (t1.a < t2.x) OR ((t1.a = t2.x) AND (t1.b < t2.y))\nFROM t1 INNER JOIN t2;\n"], "Examples": ["SELECT 2 < 2;\n+-------+\n| 2 < 2 |\n+-------+\n|     0 |\n+-------+\n", "SELECT 3<'4';\n+-------+\n| 3<'4' |\n+-------+\n|     1 |\n+-------+\n", "SELECT 'a'<'A';\n+---------+\n| 'a'<'A' |\n+---------+\n|       0 |\n+---------+\n"], "Category": ["Comparison Operators"], "index": 16}
{"HTML": ["https://mariadb.com//kb/en/less-than-or-equal/"], "Title": ["<="], "Feature": ["<=\n"], "Description": ["Less than or equal operator. Evaluates both SQL expressions and returns 1 if the left value is less than or equal to the right value and 0 if it is not, or NULL if either expression is NULL. If the expressions return different data types, (for instance, a number and a string), performs type conversion.", "When used in row comparisons these two queries return the same results:", "SELECT (t1.a, t1.b) <= (t2.x, t2.y) \nFROM t1 INNER JOIN t2;\n\nSELECT (t1.a < t2.x) OR ((t1.a = t2.x) AND (t1.b <= t2.y))\nFROM t1 INNER JOIN t2;\n"], "Examples": ["SELECT 0.1 <= 2;\n+----------+\n| 0.1 <= 2 |\n+----------+\n|        1 |\n+----------+\n", "SELECT 'a'<='A';\n+----------+\n| 'a'<='A' |\n+----------+\n|        1 |\n+----------+\n"], "Category": ["Comparison Operators"], "index": 17}
{"HTML": ["https://mariadb.com//kb/en/null-safe-equal/"], "Title": ["<=>"], "Feature": ["<=>\n"], "Description": ["NULL-safe equal operator. It performs an equality comparison like\nthe = operator, but returns 1 rather than NULL if both operands are\nNULL, and 0 rather than NULL if one operand is NULL.", "a <=> b is equivalent to a = b OR (a IS NULL AND b IS NULL).", "When used in row comparisons these two queries return the same results:", "SELECT (t1.a, t1.b) <=> (t2.x, t2.y) \nFROM t1 INNER JOIN t2;\n\nSELECT (t1.a <=> t2.x) AND (t1.b <=> t2.y)\nFROM t1 INNER JOIN t2;\n", "See also NULL Values in MariaDB."], "Examples": ["SELECT 1 <=> 1, NULL <=> NULL, 1 <=> NULL;\n+---------+---------------+------------+\n| 1 <=> 1 | NULL <=> NULL | 1 <=> NULL |\n+---------+---------------+------------+\n|       1 |             1 |          0 |\n+---------+---------------+------------+\n\nSELECT 1 = 1, NULL = NULL, 1 = NULL;\n+-------+-------------+----------+\n| 1 = 1 | NULL = NULL | 1 = NULL |\n+-------+-------------+----------+\n|     1 |        NULL |     NULL |\n+-------+-------------+----------+\n"], "Category": ["Comparison Operators"], "index": 18}
{"HTML": ["https://mariadb.com//kb/en/shift-left/"], "Title": ["<<"], "Feature": ["value1 << value2\n"], "Description": ["Converts a longlong (BIGINT) number (value1) to binary and shifts value2 units to the left."], "Examples": ["SELECT 1 << 2;\n+--------+\n| 1 << 2 |\n+--------+\n|      4 |\n+--------+\n"], "Category": ["Bit Functions and Operators"], "index": 19}
{"HTML": ["https://mariadb.com//kb/en/mod/"], "Title": ["MOD"], "Feature": ["MOD(N,M), N % M, N MOD M\n"], "Description": ["Modulo operation. Returns the remainder of N divided by M. See also Modulo Operator.", "If the ERROR_ON_DIVISION_BY_ZERO SQL_MODE is used, any number modulus zero produces an error. Otherwise, it returns NULL.", "The integer part of a division can be obtained using DIV."], "Examples": ["SELECT 1042 % 50;\n+-----------+\n| 1042 % 50 |\n+-----------+\n|        42 |\n+-----------+\n\nSELECT MOD(234, 10);\n+--------------+\n| MOD(234, 10) |\n+--------------+\n|            4 |\n+--------------+\n\nSELECT 253 % 7;\n+---------+\n| 253 % 7 |\n+---------+\n|       1 |\n+---------+\n\nSELECT MOD(29,9);\n+-----------+\n| MOD(29,9) |\n+-----------+\n|         2 |\n+-----------+\n\nSELECT 29 MOD 9;\n+----------+\n| 29 MOD 9 |\n+----------+\n|        2 |\n+----------+\n"], "Category": ["Arithmetic Operators"], "index": 20}
{"HTML": ["https://mariadb.com//kb/en/modulo-operator/"], "Title": ["Modulo Operator (%)"], "Feature": ["N % M\n"], "Description": ["Modulo operator. Returns the remainder of N divided by M. See also MOD."], "Examples": ["SELECT 1042 % 50;\n+-----------+\n| 1042 % 50 |\n+-----------+\n|        42 |\n+-----------+\n"], "Category": ["Arithmetic Operators"], "index": 21}
{"HTML": ["https://mariadb.com//kb/en/bitwise_and/"], "Title": ["&"], "Feature": ["&\n"], "Description": ["Bitwise AND. Converts the values to binary and compares bits. Only if both the corresponding bits are 1 is the resulting bit also 1.", "See also bitwise OR."], "Examples": ["SELECT 2&1;\n+-----+\n| 2&1 |\n+-----+\n|   0 |\n+-----+\n\nSELECT 3&1;\n+-----+\n| 3&1 |\n+-----+\n|   1 |\n+-----+\n\nSELECT 29 & 15;\n+---------+\n| 29 & 15 |\n+---------+\n|      13 |\n+---------+\n"], "Category": ["Bit Functions and Operators"], "index": 22}
{"HTML": ["https://mariadb.com//kb/en/multiplication-operator/"], "Title": ["Multiplication Operator (*)"], "Feature": ["*\n"], "Description": ["Multiplication operator."], "Examples": ["SELECT 7*6;\n+-----+\n| 7*6 |\n+-----+\n|  42 |\n+-----+\n\nSELECT 1234567890*9876543210;\n+-----------------------+\n| 1234567890*9876543210 |\n+-----------------------+\n|  -6253480962446024716 |\n+-----------------------+\n\nSELECT 18014398509481984*18014398509481984.0;\n+---------------------------------------+\n| 18014398509481984*18014398509481984.0 |\n+---------------------------------------+\n|   324518553658426726783156020576256.0 |\n+---------------------------------------+\n\nSELECT 18014398509481984*18014398509481984;\n+-------------------------------------+\n| 18014398509481984*18014398509481984 |\n+-------------------------------------+\n|                                   0 |\n+-------------------------------------+\n"], "Category": ["Arithmetic Operators"], "index": 23}
{"HTML": ["https://mariadb.com//kb/en/not-between/"], "Title": ["NOT BETWEEN"], "Feature": ["expr NOT BETWEEN min AND max\n"], "Description": ["This is the same as NOT (expr BETWEEN min AND max).", "Note that the meaning of the alternative form NOT expr BETWEEN min AND max is affected by the HIGH_NOT_PRECEDENCE SQL_MODE flag."], "Examples": ["SELECT 1 NOT BETWEEN 2 AND 3;\n+-----------------------+\n| 1 NOT BETWEEN 2 AND 3 |\n+-----------------------+\n|                     1 |\n+-----------------------+\n", "SELECT 'b' NOT BETWEEN 'a' AND 'c';\n+-----------------------------+\n| 'b' NOT BETWEEN 'a' AND 'c' |\n+-----------------------------+\n|                           0 |\n+-----------------------------+\n", "SELECT 1 NOT BETWEEN 1 AND NULL;\n+--------------------------+\n| 1 NOT BETWEEN 1 AND NULL |\n+--------------------------+\n|                     NULL |\n+--------------------------+\n"], "Category": ["Comparison Operators"], "index": 24}
{"HTML": ["https://mariadb.com//kb/en/not-equal/"], "Title": ["Not Equal Operator: !="], "Feature": ["<>, !=\n"], "Description": ["Not equal operator.  Evaluates both SQL expressions and returns 1 if they are not equal and 0 if they are equal, or NULL if either expression is NULL.  If the expressions return different data types, (for instance, a number and a string), performs type conversion.", "When used in row comparisons these two queries return the same results:", "SELECT (t1.a, t1.b) != (t2.x, t2.y) \nFROM t1 INNER JOIN t2;\n\nSELECT (t1.a != t2.x) OR (t1.b != t2.y)\nFROM t1 INNER JOIN t2;\n"], "Examples": ["SELECT '.01' <> '0.01';\n+-----------------+\n| '.01' <> '0.01' |\n+-----------------+\n|               1 |\n+-----------------+\n\nSELECT .01 <> '0.01';\n+---------------+\n| .01 <> '0.01' |\n+---------------+\n|             0 |\n+---------------+\n\nSELECT 'zapp' <> 'zappp';\n+-------------------+\n| 'zapp' <> 'zappp' |\n+-------------------+\n|                 1 |\n+-------------------+\n"], "Category": ["Comparison Operators"], "index": 25}
{"HTML": ["https://mariadb.com//kb/en/not-in/"], "Title": ["NOT IN"], "Feature": ["expr NOT IN (value,...)\n"], "Description": ["This is the same as NOT (expr IN (value,...))."], "Examples": ["SELECT 2 NOT IN (0,3,5,7);\n+--------------------+\n| 2 NOT IN (0,3,5,7) |\n+--------------------+\n|                  1 |\n+--------------------+\n", "SELECT 'wefwf' NOT IN ('wee','wefwf','weg');\n+--------------------------------------+\n| 'wefwf' NOT IN ('wee','wefwf','weg') |\n+--------------------------------------+\n|                                    0 |\n+--------------------------------------+\n", "SELECT 1 NOT IN ('1', '2', '3');\n+--------------------------+\n| 1 NOT IN ('1', '2', '3') |\n+--------------------------+\n|                        0 |\n+--------------------------+\n", "SELECT NULL NOT IN (1, 2, 3);\n+-----------------------+\n| NULL NOT IN (1, 2, 3) |\n+-----------------------+\n|                  NULL |\n+-----------------------+\n\nSELECT 1 NOT IN (1, 2, NULL);\n+-----------------------+\n| 1 NOT IN (1, 2, NULL) |\n+-----------------------+\n|                     0 |\n+-----------------------+\n\nSELECT 5 NOT IN (1, 2, NULL);\n+-----------------------+\n| 5 NOT IN (1, 2, NULL) |\n+-----------------------+\n|                  NULL |\n+-----------------------+\n"], "Category": ["Comparison Operators"], "index": 26}
{"HTML": ["https://mariadb.com//kb/en/subtraction-operator-/"], "Title": ["Subtraction Operator (-)"], "Feature": ["-\n"], "Description": ["Subtraction. The operator is also used as the unary minus for changing sign.", "If both operands are integers, the result is calculated with BIGINT precision. If either integer is unsigned, the result is also an unsigned integer, unless the NO_UNSIGNED_SUBTRACTION SQL_MODE is enabled, in which case the result is always signed.", "For real or string operands, the operand with the highest precision determines the result precision."], "Examples": ["SELECT 96-9;\n+------+\n| 96-9 |\n+------+\n|   87 |\n+------+\n\nSELECT 15-17;\n+-------+\n| 15-17 |\n+-------+\n|    -2 |\n+-------+\n\nSELECT 3.66 + 1.333;\n+--------------+\n| 3.66 + 1.333 |\n+--------------+\n|        4.993 |\n+--------------+\n", " SELECT - (3+5);\n+---------+\n| - (3+5) |\n+---------+\n|      -8 |\n+---------+\n"], "Category": ["Arithmetic Operators"], "index": 27}
{"HTML": ["https://mariadb.com//kb/en/xor/"], "Title": ["XOR"], "Feature": ["XOR\n"], "Description": ["XOR stands for eXclusive OR. Returns NULL if either operand is NULL. For non-NULL\noperands, evaluates to 1 if an odd number of operands is non-zero,\notherwise 0 is returned."], "Examples": ["SELECT 1 XOR 1;\n+---------+\n| 1 XOR 1 |\n+---------+\n|       0 |\n+---------+\n\nSELECT 1 XOR 0;\n+---------+\n| 1 XOR 0 |\n+---------+\n|       1 |\n+---------+\n\nSELECT 1 XOR NULL;\n+------------+\n| 1 XOR NULL |\n+------------+\n|       NULL |\n+------------+\n", "SELECT 1 XOR 1 XOR 1;\n+---------------+\n| 1 XOR 1 XOR 1 |\n+---------------+\n|             1 |\n+---------------+\n"], "Category": ["Logical Operators"], "index": 28}
{"HTML": ["https://mariadb.com//kb/en/bitwise-xor/"], "Title": ["^"], "Feature": ["^\n"], "Description": ["Bitwise XOR. Converts the values to binary and compares bits. If one (and only one) of the corresponding bits is 1 is the resulting bit also 1."], "Examples": ["SELECT 1 ^ 1;\n+-------+\n| 1 ^ 1 |\n+-------+\n|     0 |\n+-------+\n\nSELECT 1 ^ 0;\n+-------+\n| 1 ^ 0 |\n+-------+\n|     1 |\n+-------+\n\nSELECT 11 ^ 3;\n+--------+\n| 11 ^ 3 |\n+--------+\n|      8 |\n+--------+\n"], "Category": ["Bit Functions and Operators"], "index": 29}
{"HTML": ["https://mariadb.com//kb/en/bitwise-or/"], "Title": ["|"], "Feature": ["|\n"], "Description": ["Bitwise OR. Converts the values to binary and compares bits. If either of the corresponding bits has a value of 1, the resulting bit is also 1.", "See also bitwise AND."], "Examples": ["SELECT 2|1;\n+-----+\n| 2|1 |\n+-----+\n|   3 |\n+-----+\n\nSELECT 29 | 15;\n+---------+\n| 29 | 15 |\n+---------+\n|      31 |\n+---------+\n"], "Category": ["Bit Functions and Operators"], "index": 30}
{"HTML": ["https://mariadb.com//kb/en/or/"], "Title": ["||"], "Feature": ["OR, ||\n"], "Description": ["Logical OR. When both operands are non-NULL, the result is 1 if any\noperand is non-zero, and 0 otherwise. With a NULL operand, the result\nis 1 if the other operand is non-zero, and NULL otherwise. If both\noperands are NULL, the result is NULL.", "For this operator, short-circuit evaluation can be used.", "Note that, if the PIPES_AS_CONCAT SQL_MODE is set, || is used as a string concatenation operator. This means that a || b is the same as CONCAT(a,b). See CONCAT() for details.", "Oracle Mode", "MariaDB starting with 10.3In Oracle mode from MariaDB 10.3, || ignores NULL.\n"], "Examples": ["SELECT 1 || 1;\n+--------+\n| 1 || 1 |\n+--------+\n|      1 |\n+--------+\n\nSELECT 1 || 0;\n+--------+\n| 1 || 0 |\n+--------+\n|      1 |\n+--------+\n\nSELECT 0 || 0;\n+--------+\n| 0 || 0 |\n+--------+\n|      0 |\n+--------+\n\nSELECT 0 || NULL;\n+-----------+\n| 0 || NULL |\n+-----------+\n|      NULL |\n+-----------+\n\nSELECT 1 || NULL;\n+-----------+\n| 1 || NULL |\n+-----------+\n|         1 |\n+-----------+\n", "SELECT 0 || NULL;\n+-----------+\n| 0 || NULL |\n+-----------+\n| 0         |\n+-----------+\n"], "Category": ["Logical Operators"], "index": 31}
{"HTML": ["https://mariadb.com//kb/en/bitwise-not/"], "Title": ["~"], "Feature": ["~\n"], "Description": ["Bitwise NOT. Converts the value to 4 bytes binary and inverts all bits."], "Examples": ["SELECT 3 & ~1;\n+--------+\n| 3 & ~1 |\n+--------+\n|      2 |\n+--------+\n\nSELECT 5 & ~1;\n+--------+\n| 5 & ~1 |\n+--------+\n|      4 |\n+--------+\n"], "Category": ["Bit Functions and Operators"], "index": 32}
{"HTML": ["https://mariadb.com//kb/en/equal/"], "Title": ["="], "Feature": ["left_expr = right_expr\n"], "Description": ["Equal operator. Evaluates both SQL expressions and returns 1 if they are equal, 0 if they are not equal, or NULL if either expression is NULL. If the expressions return different data types (for example, a number and a string), a type conversion is performed.", "When used in row comparisons these two queries are synonymous and return the same results:", "SELECT (t1.a, t1.b) = (t2.x, t2.y) FROM t1 INNER JOIN t2;\n\nSELECT (t1.a = t2.x) AND (t1.b = t2.y) FROM t1 INNER JOIN t2;\n", "To perform a NULL-safe comparison, use the <=> operator.", "= can also be used as an assignment operator."], "Examples": ["SELECT 1 = 0;\n+-------+\n| 1 = 0 |\n+-------+\n|     0 |\n+-------+\n\nSELECT '0' = 0;\n+---------+\n| '0' = 0 |\n+---------+\n|       1 |\n+---------+\n\nSELECT '0.0' = 0;\n+-----------+\n| '0.0' = 0 |\n+-----------+\n|         1 |\n+-----------+\n\nSELECT '0.01' = 0;\n+------------+\n| '0.01' = 0 |\n+------------+\n|          0 |\n+------------+\n\nSELECT '.01' = 0.01;\n+--------------+\n| '.01' = 0.01 |\n+--------------+\n|            1 |\n+--------------+\n\nSELECT (5 * 2) = CONCAT('1', '0');\n+----------------------------+\n| (5 * 2) = CONCAT('1', '0') |\n+----------------------------+\n|                          1 |\n+----------------------------+\n\nSELECT 1 = NULL;\n+----------+\n| 1 = NULL |\n+----------+\n|     NULL |\n+----------+\n\nSELECT NULL = NULL;\n+-------------+\n| NULL = NULL |\n+-------------+\n|        NULL |\n+-------------+\n"], "Category": ["Comparison Operators"], "index": 33}
{"HTML": ["https://mariadb.com//kb/en/addition-operator/"], "Title": ["Addition Operator (+)"], "Feature": ["+\n"], "Description": ["Addition.", "If both operands are integers, the result is calculated with BIGINT precision. If either integer is unsigned, the result is also an unsigned integer.", "For real or string operands, the operand with the highest precision determines the result precision."], "Examples": ["SELECT 3+5;\n+-----+\n| 3+5 |\n+-----+\n|   8 |\n+-----+\n"], "Category": ["Arithmetic Operators"], "index": 34}
{"HTML": ["https://mariadb.com//kb/en/assignment-operators-assignment-operator/"], "Title": ["Assignment Operator (=)"], "Feature": ["identifier = expr\n"], "Description": ["The equal sign is used as both an assignment operator in certain contexts, and as a comparison operator. When used as assignment operator, the value on the right is assigned to the variable (or column, in some contexts) on the left.", "Since its use can be ambiguous, unlike the := assignment operator, the = assignment operator cannot be used in all contexts, and is only valid as part of a SET statement, or the SET clause of an UPDATE statement", "This operator works with both user-defined variables and local variables."], "Examples": ["UPDATE table_name SET x = 2 WHERE x > 100;\n", "SET @x = 1, @y := 2;\n"], "Category": ["Assignment Operators"], "index": 35}
{"HTML": ["https://mariadb.com//kb/en/assignment-operator/"], "Title": ["Assignment Operator (:=)"], "Feature": ["var_name := expr\n"], "Description": ["Assignment operator for assigning a value. The value on the right is assigned to the variable on left.", "Unlike the = operator, := can always be used to assign a value to a variable.", "This operator works with both user-defined variables and local variables.", "When assigning the same value to several variables, LAST_VALUE() can be useful."], "Examples": [" SELECT @x := 10;\n+----------+\n| @x := 10 |\n+----------+\n|       10 |\n+----------+\n\nSELECT @x, @y := @x;\n+------+----------+\n| @x   | @y := @x |\n+------+----------+\n|   10 |       10 |\n+------+----------+\n"], "Category": ["Assignment Operators"], "index": 36}
{"HTML": ["https://mariadb.com//kb/en/between-and/"], "Title": ["BETWEEN AND"], "Feature": ["expr BETWEEN min AND max\n"], "Description": ["If expr is greater than or equal to min and expr is less than or equal\nto max, BETWEEN returns 1, otherwise it returns 0. This is equivalent\nto the expression (min <= expr AND expr <= max) if all the arguments\nare of the same type. Otherwise type conversion takes place according\nto the rules described at Type Conversion, but\napplied to all the three arguments."], "Examples": ["SELECT 1 BETWEEN 2 AND 3;\n+-------------------+\n| 1 BETWEEN 2 AND 3 |\n+-------------------+\n|                 0 |\n+-------------------+\n", "SELECT 'b' BETWEEN 'a' AND 'c';\n+-------------------------+\n| 'b' BETWEEN 'a' AND 'c' |\n+-------------------------+\n|                       1 |\n+-------------------------+\n", "SELECT 2 BETWEEN 2 AND '3';\n+---------------------+\n| 2 BETWEEN 2 AND '3' |\n+---------------------+\n|                   1 |\n+---------------------+\n", "SELECT 2 BETWEEN 2 AND 'x-3';\n+-----------------------+\n| 2 BETWEEN 2 AND 'x-3' |\n+-----------------------+\n|                     0 |\n+-----------------------+\n1 row in set, 1 warning (0.00 sec)\n\nWarning (Code 1292): Truncated incorrect DOUBLE value: 'x-3'\n", "SELECT 1 BETWEEN 1 AND NULL;\n+----------------------+\n| 1 BETWEEN 1 AND NULL |\n+----------------------+\n|                 NULL |\n+----------------------+\n", "CREATE TABLE `x` (\n  a date ,\n  b datetime,\n  c timestamp\n)\n\nINSERT INTO x VALUES \n ('2018-11-11', '2018-11-11 05:15', '2018-11-11 05:15'), \n ('2018-11-12', '2018-11-12 05:15', '2018-11-12 05:15'); \n\nSELECT * FROM x WHERE a BETWEEN '2018-11-11' AND '2018-11-12';\n+------------+---------------------+---------------------+\n| a          | b                   | c                   |\n+------------+---------------------+---------------------+\n| 2018-11-11 | 2018-11-11 05:15:00 | 2018-11-11 05:15:00 |\n| 2018-11-12 | 2018-11-12 05:15:00 | 2018-11-12 05:15:00 |\n+------------+---------------------+---------------------+\n\nSELECT * FROM x WHERE b BETWEEN '2018-11-11' AND '2018-11-12';\n+------------+---------------------+---------------------+\n| a          | b                   | c                   |\n+------------+---------------------+---------------------+\n| 2018-11-11 | 2018-11-11 05:15:00 | 2018-11-11 05:15:00 |\n+------------+---------------------+---------------------+\n\nSELECT * FROM x WHERE c BETWEEN '2018-11-11' AND '2018-11-12';\n+------------+---------------------+---------------------+\n| a          | b                   | c                   |\n+------------+---------------------+---------------------+\n| 2018-11-11 | 2018-11-11 05:15:00 | 2018-11-11 05:15:00 |\n+------------+---------------------+---------------------+\n"], "Category": ["Comparison Operators"], "index": 37}
{"HTML": ["https://mariadb.com//kb/en/bit_count/"], "Title": ["BIT_COUNT"], "Feature": ["BIT_COUNT(N)\n"], "Description": ["Returns the number of bits that are set in the argument N."], "Examples": ["SELECT BIT_COUNT(29), BIT_COUNT(b'101010');\n+---------------+----------------------+\n| BIT_COUNT(29) | BIT_COUNT(b'101010') |\n+---------------+----------------------+\n|             4 |                    3 |\n+---------------+----------------------+\n"], "Category": ["Bit Functions and Operators"], "index": 38}
{"HTML": ["https://mariadb.com//kb/en/coalesce/"], "Title": ["COALESCE"], "Feature": ["COALESCE(value,...)\n"], "Description": ["Returns the first non-NULL value in the list, or NULL if there are no\nnon-NULL values. At least one parameter must be passed.", "The function is useful when substituting a default value for null values when displaying data.", "See also NULL Values in MariaDB."], "Examples": ["SELECT COALESCE(NULL,1);\n+------------------+\n| COALESCE(NULL,1) |\n+------------------+\n|                1 |\n+------------------+\n", "SELECT COALESCE(NULL,NULL,NULL);\n+--------------------------+\n| COALESCE(NULL,NULL,NULL) |\n+--------------------------+\n|                     NULL |\n+--------------------------+\n", "SET @a=NULL, @b=1;\n\nSELECT COALESCE(@a, @b), IFNULL(@a, @b);\n+------------------+----------------+\n| COALESCE(@a, @b) | IFNULL(@a, @b) |\n+------------------+----------------+\n|                1 |              1 |\n+------------------+----------------+\n", "CREATE TABLE t1 (a INT, b VARCHAR(10));\nINSERT INTO t1 VALUES (0x31, 0x61),(COALESCE(0x31), COALESCE(0x61));\n\nSELECT * FROM t1;\n+------+------+\n| a    | b    |\n+------+------+\n|   49 | a    |\n|    1 | a    |\n+------+------+\n", "SELECT SUM(score) FROM student;\n+------------+\n| SUM(score) |\n+------------+\n|       NULL |\n+------------+\n\nSELECT COALESCE(SUM(score),0) FROM student;\n+------------------------+\n| COALESCE(SUM(score),0) |\n+------------------------+\n|                      0 |\n+------------------------+\n"], "Category": ["Comparison Operators"], "index": 39}
