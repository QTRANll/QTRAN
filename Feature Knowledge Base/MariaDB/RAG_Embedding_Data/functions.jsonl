{"HTML": ["https://mariadb.com//kb/en/abs/"], "Title": ["ABS"], "Feature": ["ABS(X)\n"], "Description": ["Returns the absolute (non-negative) value of X. If X is not a number, it is converted to a numeric type."], "Examples": ["SELECT ABS(42);\n+---------+\n| ABS(42) |\n+---------+\n|      42 |\n+---------+\n\nSELECT ABS(-42);\n+----------+\n| ABS(-42) |\n+----------+\n|       42 |\n+----------+\n\nSELECT ABS(DATE '1994-01-01');\n+------------------------+\n| ABS(DATE '1994-01-01') |\n+------------------------+\n|               19940101 |\n+------------------------+\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://mariadb.com//kb/en/found_rows/"], "Title": ["FOUND_ROWS"], "Feature": ["FOUND_ROWS()\n"], "Description": ["A SELECT statement may include a LIMIT clause to restrict the number\nof rows the server returns to the client. In some cases, it is\ndesirable to know how many rows the statement would have returned\nwithout the LIMIT, but without running the statement again. To obtain\nthis row count, include a SQL_CALC_FOUND_ROWS option in the SELECT\nstatement, and then invoke FOUND_ROWS() afterwards.", "You can also use FOUND_ROWS() to obtain the number of rows returned by a SELECT which does not contain a LIMIT clause. In this case you don't need to use the SQL_CALC_FOUND_ROWS option. This can be useful for example in a stored procedure.", "Also, this function works with some other statements which return a resultset, including SHOW, DESC and HELP. For DELETE ... RETURNING you should use ROW_COUNT(). It also works as a prepared statement, or after executing a prepared statement.", "Statements which don't return any results don't affect FOUND_ROWS() - the previous value will still be returned.", "Warning: When used after a CALL statement, this function returns the number of rows selected by the last query in the procedure, not by the whole procedure.", "Statements using the FOUND_ROWS() function are not safe for statement-based replication."], "Examples": ["SHOW ENGINES\\G\n*************************** 1. row ***************************\n      Engine: CSV\n     Support: YES\n     Comment: Stores tables as CSV files\nTransactions: NO\n          XA: NO\n  Savepoints: NO\n*************************** 2. row ***************************\n      Engine: MRG_MyISAM\n     Support: YES\n     Comment: Collection of identical MyISAM tables\nTransactions: NO\n          XA: NO\n  Savepoints: NO\n\n...\n\n*************************** 8. row ***************************\n      Engine: PERFORMANCE_SCHEMA\n     Support: YES\n     Comment: Performance Schema\nTransactions: NO\n          XA: NO\n  Savepoints: NO\n8 rows in set (0.000 sec)\n\nSELECT FOUND_ROWS();\n+--------------+\n| FOUND_ROWS() |\n+--------------+\n|           8 |\n+--------------+\n\nSELECT SQL_CALC_FOUND_ROWS * FROM tbl_name WHERE id > 100 LIMIT 10;\n\nSELECT FOUND_ROWS();\n+--------------+\n| FOUND_ROWS() |\n+--------------+\n|           23 |\n+--------------+\n"], "Category": ["Information Functions"]}
{"HTML": ["https://mariadb.com//kb/en/from_base64/"], "Title": ["FROM_BASE64"], "Feature": ["FROM_BASE64(str)\n"], "Description": ["Decodes the given base-64 encode string, returning the result as a binary string.  Returns NULL if the given string is NULL or if it's invalid.", "It is the reverse of the TO_BASE64 function.", "There are numerous methods to base-64 encode a string.  MariaDB uses the following:", "It encodes alphabet value 64 as '+'.\nIt encodes alphabet value 63 as '/'.\nIt codes output in groups of four printable characters.  Each three byte of data encoded uses four characters.  If the final group is incomplete, it pads the difference with the '=' character.\nIt divides long output, adding a new line very 76 characters.\nIn decoding, it recognizes and ignores newlines, carriage returns, tabs and space whitespace characters.\n", "SELECT TO_BASE64('Maria') AS 'Input';\n+-----------+\n| Input     |\n+-----------+\n| TWFyaWE=  |\n+-----------+\n\nSELECT FROM_BASE64('TWFyaWE=') AS 'Output';\n+--------+\n| Output |\n+--------+\n| Maria  |\n+--------+\n"], "Examples": [], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/from_days/"], "Title": ["FROM_DAYS"], "Feature": ["FROM_DAYS(N)\n"], "Description": ["Given a day number N, returns a DATE value. The day count is based on the number of days from the start of the standard calendar (0000-00-00). ", "The function is not designed for use with dates before the advent of the Gregorian calendar in October 1582. Results will not be reliable since it doesn't account for the lost days when the calendar changed from the Julian calendar.", "This is the converse of the TO_DAYS() function."], "Examples": ["SELECT FROM_DAYS(730669);\n+-------------------+\n| FROM_DAYS(730669) |\n+-------------------+\n| 2000-07-03        |\n+-------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/from_unixtime/"], "Title": ["FROM_UNIXTIME"], "Feature": ["FROM_UNIXTIME(unix_timestamp), FROM_UNIXTIME(unix_timestamp,format)\n"], "Description": ["Returns a representation of the unix_timestamp argument as a value in\n'YYYY-MM-DD HH:MM:SS' or YYYYMMDDHHMMSS.uuuuuu format, depending on\nwhether the function is used in a string or numeric context. The value\nis expressed in the current time zone. unix_timestamp is an internal\ntimestamp value such as is produced by the UNIX_TIMESTAMP() function.", "If format is given, the result is formatted according to the format\nstring, which is used the same way as listed in the entry for the\nDATE_FORMAT() function.", "Timestamps in MariaDB have a maximum value of 2147483647, equivalent to 2038-01-19 05:14:07. This is due to the underlying 32-bit limitation. Using the function on a timestamp beyond this will result in NULL being returned. Use DATETIME as a storage type if you require dates beyond this.\n", "The options that can be used by FROM_UNIXTIME(), as well as DATE_FORMAT() and STR_TO_DATE(), are:", "OptionDescription\n%aShort weekday name in current locale (Variable lc_time_names).\n%bShort form month name in current locale. For locale en_US this is one of: Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov or Dec.\n%cMonth with 1 or 2 digits.\n%DDay with English suffix 'th', 'nd', 'st' or 'rd''. (1st, 2nd, 3rd...).\n%dDay with 2 digits.\n%eDay with 1 or 2 digits.\n%fMicroseconds 6 digits.\n%HHour with 2 digits between 00-23.\n%hHour with 2 digits between 01-12.\n%IHour with 2 digits between 01-12.\n%iMinute with 2 digits.\n%jDay of the year (001-366)\n%kHour with 1 digits between 0-23.\n%lHour with 1 digits between 1-12.\n%MFull month name in current locale (Variable lc_time_names).\n%mMonth with 2 digits.\n%pAM/PM according to current locale (Variable lc_time_names).\n%rTime in 12 hour format, followed by AM/PM. Short for '%I:%i:%S %p'.\n%SSeconds with 2 digits.\n%sSeconds with 2 digits.\n%TTime in 24 hour format. Short for '%H:%i:%S'.\n%UWeek number (00-53), when first day of the week is Sunday.\n%uWeek number (00-53), when first day of the week is Monday.\n%VWeek number (01-53), when first day of the week is Sunday. Used with %X.\n%vWeek number (01-53), when first day of the week is Monday. Used with %x.\n%WFull weekday name in current locale (Variable lc_time_names).\n%wDay of the week. 0 = Sunday, 6 = Saturday.\n%XYear with 4 digits when first day of the week is Sunday. Used with %V.\n%xYear with 4 digits when first day of the week is Sunday. Used with %v.\n%YYear with 4 digits.\n%yYear with 2 digits.\n%#For str_to_date(), skip all numbers.\n%.For str_to_date(), skip all punctation characters.\n%@For str_to_date(), skip all alpha characters.\n%%A literal % character.\n\n"], "Examples": ["SELECT FROM_UNIXTIME(1196440219);\n+---------------------------+\n| FROM_UNIXTIME(1196440219) |\n+---------------------------+\n| 2007-11-30 11:30:19       |\n+---------------------------+\n\nSELECT FROM_UNIXTIME(1196440219) + 0;\n+-------------------------------+\n| FROM_UNIXTIME(1196440219) + 0 |\n+-------------------------------+\n|         20071130113019.000000 |\n+-------------------------------+\n\nSELECT FROM_UNIXTIME(UNIX_TIMESTAMP(), '%Y %D %M %h:%i:%s %x');\n+---------------------------------------------------------+\n| FROM_UNIXTIME(UNIX_TIMESTAMP(), '%Y %D %M %h:%i:%s %x') |\n+---------------------------------------------------------+\n| 2010 27th March 01:03:47 2010                           |\n+---------------------------------------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/geometrycollection/"], "Title": ["GEOMETRYCOLLECTION"], "Feature": ["GeometryCollection(g1,g2,...)\n"], "Description": ["Constructs a WKB GeometryCollection. If any argument is not a well-formed WKB representation of a geometry, the return value is NULL."], "Examples": ["CREATE TABLE gis_geometrycollection  (g GEOMETRYCOLLECTION);\nSHOW FIELDS FROM gis_geometrycollection;\nINSERT INTO gis_geometrycollection VALUES\n    (GeomCollFromText('GEOMETRYCOLLECTION(POINT(0 0), LINESTRING(0 0,10 10))')),\n    (GeometryFromWKB(AsWKB(GeometryCollection(Point(44, 6), LineString(Point(3, 6), Point(7, 9)))))),\n    (GeomFromText('GeometryCollection()')),\n    (GeomFromText('GeometryCollection EMPTY'));\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/get_format/"], "Title": ["GET_FORMAT"], "Feature": ["GET_FORMAT({DATE|DATETIME|TIME}, {'EUR'|'USA'|'JIS'|'ISO'|'INTERNAL'})\n"], "Description": ["Returns a format string. This function is useful in combination with\nthe DATE_FORMAT() and the STR_TO_DATE() functions.", "Possible result formats are:", "Function CallResult Format\nGET_FORMAT(DATE,'EUR')'%d.%m.%Y'\nGET_FORMAT(DATE,'USA')'%m.%d.%Y'\nGET_FORMAT(DATE,'JIS')'%Y-%m-%d'\nGET_FORMAT(DATE,'ISO')'%Y-%m-%d'\nGET_FORMAT(DATE,'INTERNAL')'%Y%m%d'\nGET_FORMAT(DATETIME,'EUR')'%Y-%m-%d %H.%i.%s'\nGET_FORMAT(DATETIME,'USA')'%Y-%m-%d %H.%i.%s'\nGET_FORMAT(DATETIME,'JIS')'%Y-%m-%d %H:%i:%s'\nGET_FORMAT(DATETIME,'ISO')'%Y-%m-%d %H:%i:%s'\nGET_FORMAT(DATETIME,'INTERNAL')'%Y%m%d%H%i%s'\nGET_FORMAT(TIME,'EUR')'%H.%i.%s'\nGET_FORMAT(TIME,'USA')'%h:%i:%s %p'\nGET_FORMAT(TIME,'JIS')'%H:%i:%s'\nGET_FORMAT(TIME,'ISO')'%H:%i:%s'\nGET_FORMAT(TIME,'INTERNAL')'%H%i%s'\n\n"], "Examples": ["SELECT GET_FORMAT(DATE, 'EUR');\n+-------------------------+\n| GET_FORMAT(DATE, 'EUR') |\n+-------------------------+\n| %d.%m.%Y                |\n+-------------------------+\n", "SELECT DATE_FORMAT('2003-10-03',GET_FORMAT(DATE,'EUR'));\n+--------------------------------------------------+\n| DATE_FORMAT('2003-10-03',GET_FORMAT(DATE,'EUR')) |\n+--------------------------------------------------+\n| 03.10.2003                                       |\n+--------------------------------------------------+\n\nSELECT STR_TO_DATE('10.31.2003',GET_FORMAT(DATE,'USA'));\n+--------------------------------------------------+\n| STR_TO_DATE('10.31.2003',GET_FORMAT(DATE,'USA')) |\n+--------------------------------------------------+\n| 2003-10-31                                       |\n+--------------------------------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/get_lock/"], "Title": ["GET_LOCK"], "Feature": ["GET_LOCK(str,timeout)\n"], "Description": ["Tries to obtain a lock with a name given by the string str, using a timeout of timeout seconds. Returns 1 if the lock was obtained successfully, 0 if the attempt timed out (for example, because another client has previously locked the name), or  NULL if an error occurred (such as running out of memory or the thread was killed with mariadb-admin kill).", "A lock is released with RELEASE_LOCK(), when the connection terminates (either normally or abnormally). A connection can hold multiple locks at the same time, so a lock that is no longer needed needs to be explicitly released.", "The IS_FREE_LOCK function returns whether a specified lock a free or not, and the IS_USED_LOCK whether the function is in use or not.", "Locks obtained with GET_LOCK() do not interact with transactions. That is, committing a transaction does not release any such locks obtained during the transaction.", "It is also possible to recursively set the same lock. If a lock with the same name is set n times, it needs to be released n times as well. ", "str is case insensitive for GET_LOCK() and related functions. If str is an empty string or NULL, GET_LOCK() returns NULL and does nothing. timeout supports microseconds.", "If the metadata_lock_info plugin is installed, locks acquired with this function are visible in the Information Schema METADATA_LOCK_INFO table.", "This function can be used to implement application locks or to simulate record locks. Names are locked on a server-wide basis. If a name has been locked by one client, GET_LOCK() blocks any request by another client for a lock with the same name. This allows clients that agree on a given lock name to use the name to perform cooperative advisory locking. But be aware that it also allows a client that is not among the set of cooperating clients to lock a name, either inadvertently or deliberately, and thus prevent any of the cooperating clients from locking that name. One way to reduce the likelihood of this is to use lock names that are database-specific or application-specific. For example, use lock names of the form db_name.str or app_name.str.", "Statements using the GET_LOCK function are not safe for statement-based replication.", "The patch to permit multiple locks was contributed by Konstantin \"Kostja\" Osipov (MDEV-3917)."], "Examples": ["SELECT GET_LOCK('lock1',10);\n+----------------------+\n| GET_LOCK('lock1',10) |\n+----------------------+\n|                    1 |\n+----------------------+\n\nSELECT IS_FREE_LOCK('lock1'), IS_USED_LOCK('lock1');\n+-----------------------+-----------------------+\n| IS_FREE_LOCK('lock1') | IS_USED_LOCK('lock1') |\n+-----------------------+-----------------------+\n|                     0 |                    46 |\n+-----------------------+-----------------------+\n\nSELECT IS_FREE_LOCK('lock2'), IS_USED_LOCK('lock2');\n+-----------------------+-----------------------+\n| IS_FREE_LOCK('lock2') | IS_USED_LOCK('lock2') |\n+-----------------------+-----------------------+\n|                     1 |                  NULL |\n+-----------------------+-----------------------+\n", "SELECT GET_LOCK('lock2',10);\n+----------------------+\n| GET_LOCK('lock2',10) |\n+----------------------+\n|                    1 |\n+----------------------+\n\nSELECT IS_FREE_LOCK('lock1'), IS_FREE_LOCK('lock2');\n+-----------------------+-----------------------+\n| IS_FREE_LOCK('lock1') | IS_FREE_LOCK('lock2') |\n+-----------------------+-----------------------+\n|                     0 |                     0 |\n+-----------------------+-----------------------+\n\nSELECT RELEASE_LOCK('lock1'), RELEASE_LOCK('lock2');\n+-----------------------+-----------------------+\n| RELEASE_LOCK('lock1') | RELEASE_LOCK('lock2') |\n+-----------------------+-----------------------+\n|                     1 |                     1 |\n+-----------------------+-----------------------+\n", "SELECT GET_LOCK('lock3',10);\n+----------------------+\n| GET_LOCK('lock3',10) |\n+----------------------+\n|                    1 |\n+----------------------+\n\nSELECT GET_LOCK('lock3',10);\n+----------------------+\n| GET_LOCK('lock3',10) |\n+----------------------+\n|                    1 |\n+----------------------+\n\nSELECT * FROM INFORMATION_SCHEMA.METADATA_LOCK_INFO;\n+-----------+---------------------+---------------+-----------+--------------+------------+\n| THREAD_ID | LOCK_MODE           | LOCK_DURATION | LOCK_TYPE | TABLE_SCHEMA | TABLE_NAME |\n+-----------+---------------------+---------------+-----------+--------------+------------+\n|        46 | MDL_SHARED_NO_WRITE | NULL          | User lock | lock3        |            |\n+-----------+---------------------+---------------+-----------+--------------+------------+\n\nSELECT RELEASE_LOCK('lock3');\n+-----------------------+\n| RELEASE_LOCK('lock3') |\n+-----------------------+\n|                     1 |\n+-----------------------+\n\nSELECT * FROM INFORMATION_SCHEMA.METADATA_LOCK_INFO;\n+-----------+---------------------+---------------+-----------+--------------+------------+\n| THREAD_ID | LOCK_MODE           | LOCK_DURATION | LOCK_TYPE | TABLE_SCHEMA | TABLE_NAME |\n+-----------+---------------------+---------------+-----------+--------------+------------+\n|        46 | MDL_SHARED_NO_WRITE | NULL          | User lock | lock3        |            |\n+-----------+---------------------+---------------+-----------+--------------+------------+\n\nSELECT RELEASE_LOCK('lock3');\n+-----------------------+\n| RELEASE_LOCK('lock3') |\n+-----------------------+\n|                     1 |\n+-----------------------+\n\nSELECT * FROM INFORMATION_SCHEMA.METADATA_LOCK_INFO;\nEmpty set (0.000 sec)\n", "SELECT GET_LOCK('lock4',10);\n+----------------------+\n| GET_LOCK('lock4',10) |\n+----------------------+\n|                    1 |\n+----------------------+\n", "SELECT GET_LOCK('lock4',10);\n", "+----------------------+\n| GET_LOCK('lock4',10) |\n+----------------------+\n|                    0 |\n+----------------------+\n", "SELECT GET_LOCK('lock5',10); \n+----------------------+\n| GET_LOCK('lock5',10) |\n+----------------------+\n|                    1 |\n+----------------------+\n", "SELECT GET_LOCK('lock6',10);\n+----------------------+\n| GET_LOCK('lock6',10) |\n+----------------------+\n|                    1 |\n+----------------------+\n", "SELECT GET_LOCK('lock6',10); \n+----------------------+\n| GET_LOCK('lock6',10) |\n+----------------------+\n|                    0 |\n+----------------------+\n", "SELECT GET_LOCK('lock5',10);\nERROR 1213 (40001): Deadlock found when trying to get lock; try restarting transaction\n"], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://mariadb.com//kb/en/glength/"], "Title": ["GLENGTH"], "Feature": ["GLength(ls)\n"], "Description": ["Returns as a double-precision number the length of the\nLineString value ls in its associated spatial reference."], "Examples": ["SET @ls = 'LineString(1 1,2 2,3 3)';\n\nSELECT GLength(GeomFromText(@ls));\n+----------------------------+\n| GLength(GeomFromText(@ls)) |\n+----------------------------+\n|           2.82842712474619 |\n+----------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/group_concat/"], "Title": ["GROUP_CONCAT"], "Feature": ["GROUP_CONCAT(expr)\n"], "Description": ["This function returns a string result with the concatenated non-NULL values from a group. If any expr in GROUP_CONCAT evaluates to NULL, that tuple is not present in the list returned by GROUP_CONCAT. ", "It returns NULL if all arguments are NULL, or there are no matching rows.", "The maximum returned length in bytes is determined by the group_concat_max_len server system variable, which defaults to 1M.", "If group_concat_max_len <= 512, the return type is VARBINARY or VARCHAR; otherwise, the return type is BLOB or TEXT. The choice between binary or non-binary types depends from the input.", "The full syntax is as follows:", "GROUP_CONCAT([DISTINCT] expr [,expr ...]\n             [ORDER BY {unsigned_integer | col_name | expr}\n                 [ASC | DESC] [,col_name ...]]\n             [SEPARATOR str_val]\n             [LIMIT {[offset,] row_count | row_count OFFSET offset}])\n", "DISTINCT eliminates duplicate values from the output string.", "ORDER BY determines the order of returned values.", "SEPARATOR specifies a separator between the values. The default separator is a comma (,). It is possible to avoid using a separator by specifying an empty string.", "LIMIT", "The LIMIT clause can be used with GROUP_CONCAT. This was not possible prior to MariaDB 10.3.3."], "Examples": ["SELECT student_name,\n       GROUP_CONCAT(test_score)\n       FROM student\n       GROUP BY student_name;\n", "SELECT GROUP_CONCAT(DISTINCT User ORDER BY User SEPARATOR '\\n')\n   FROM mysql.user;\n", "SELECT User, GROUP_CONCAT(Host ORDER BY Host SEPARATOR ', ') \n   FROM mysql.user GROUP BY User ORDER BY User;\n", "CREATE TABLE d (dd DATE, cc INT);\n\nINSERT INTO d VALUES ('2017-01-01',1);\nINSERT INTO d VALUES ('2017-01-02',2);\nINSERT INTO d VALUES ('2017-01-04',3);\n", "SELECT SUBSTRING_INDEX(GROUP_CONCAT(CONCAT_WS(\":\",dd,cc) ORDER BY cc DESC),\",\",1) FROM d;\n+----------------------------------------------------------------------------+\n| SUBSTRING_INDEX(GROUP_CONCAT(CONCAT_WS(\":\",dd,cc) ORDER BY cc DESC),\",\",1) |\n+----------------------------------------------------------------------------+\n| 2017-01-04:3                                                               |\n+----------------------------------------------------------------------------+\n", "SELECT GROUP_CONCAT(CONCAT_WS(\":\",dd,cc) ORDER BY cc DESC LIMIT 1) FROM d;\n+-------------------------------------------------------------+\n| GROUP_CONCAT(CONCAT_WS(\":\",dd,cc) ORDER BY cc DESC LIMIT 1) |\n+-------------------------------------------------------------+\n| 2017-01-04:3                                                |\n+-------------------------------------------------------------+\n", "CREATE OR REPLACE TABLE t1 (a int, b char);\n\nINSERT INTO t1 VALUES (1, 'a'), (2, NULL);\n\nSELECT GROUP_CONCAT(a, b) FROM t1;\n+--------------------+\n| GROUP_CONCAT(a, b) |\n+--------------------+\n| 1a                 |\n+--------------------+\n"], "Category": ["Aggregate Functions"]}
{"HTML": ["https://mariadb.com//kb/en/hex/"], "Title": ["HEX"], "Feature": ["HEX(N_or_S)\n"], "Description": ["If N_or_S is a number, returns a string representation of the hexadecimal\nvalue of N, where N is a longlong (BIGINT) number. This is equivalent to CONV(N,10,16).", "If N_or_S is a string, returns a hexadecimal string representation of\nN_or_S where each byte of each character in N_or_S is converted to two hexadecimal\ndigits. If N_or_S is NULL, returns NULL. The inverse of this operation is performed by the UNHEX()\nfunction.", "MariaDB starting with 10.5.0HEX() with an INET6 argument returns a hexadecimal representation of the underlying 16-byte binary string.\n"], "Examples": ["SELECT HEX(255);\n+----------+\n| HEX(255) |\n+----------+\n| FF       |\n+----------+\n\nSELECT 0x4D617269614442;\n+------------------+\n| 0x4D617269614442 |\n+------------------+\n| MariaDB          |\n+------------------+\n\nSELECT HEX('MariaDB');\n+----------------+\n| HEX('MariaDB') |\n+----------------+\n| 4D617269614442 |\n+----------------+\n", "SELECT HEX(CAST('2001:db8::ff00:42:8329' AS INET6));\n+----------------------------------------------+\n| HEX(CAST('2001:db8::ff00:42:8329' AS INET6)) |\n+----------------------------------------------+\n| 20010DB8000000000000FF0000428329             |\n+----------------------------------------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/atan2/"], "Title": ["ATAN2"], "Feature": ["ATAN(Y,X), ATAN2(Y,X)\n"], "Description": ["Returns the arc tangent of the two variables X and Y. It is similar to\ncalculating the arc tangent of Y / X, except that the signs of both\narguments are used to determine the quadrant of the result."], "Examples": ["SELECT ATAN(-2,2);\n+---------------------+\n| ATAN(-2,2)          |\n+---------------------+\n| -0.7853981633974483 |\n+---------------------+\n\nSELECT ATAN2(PI(),0);\n+--------------------+\n| ATAN2(PI(),0)      |\n+--------------------+\n| 1.5707963267948966 |\n+--------------------+\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://mariadb.com//kb/en/hour/"], "Title": ["HOUR"], "Feature": ["HOUR(time)\n"], "Description": ["Returns the hour for time. The range of the return value is 0 to 23\nfor time-of-day values. However, the range of TIME values actually is\nmuch larger, so HOUR can return values greater than 23.", "The return value is always positive, even if a negative TIME value is provided."], "Examples": ["SELECT HOUR('10:05:03');\n+------------------+\n| HOUR('10:05:03') |\n+------------------+\n|               10 |\n+------------------+\n\nSELECT HOUR('272:59:59');\n+-------------------+\n| HOUR('272:59:59') |\n+-------------------+\n|               272 |\n+-------------------+\n", "SELECT EXTRACT(HOUR FROM '26:30:00'), HOUR('26:30:00');\n+-------------------------------+------------------+\n| EXTRACT(HOUR FROM '26:30:00') | HOUR('26:30:00') |\n+-------------------------------+------------------+\n|                             2 |               26 |\n+-------------------------------+------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/if-function/"], "Title": ["IF Function"], "Feature": ["IF(expr1,expr2,expr3)\n"], "Description": ["If expr1 is TRUE (expr1 <> 0 and expr1 <> NULL) then IF()\nreturns expr2; otherwise it returns expr3. IF() returns a numeric\nor string value, depending on the context in which it is used.", "Note: There is also an IF statement which differs from the\nIF() function described here."], "Examples": ["SELECT IF(1>2,2,3);\n+-------------+\n| IF(1>2,2,3) |\n+-------------+\n|           3 |\n+-------------+\n", "SELECT IF(1<2,'yes','no');\n+--------------------+\n| IF(1<2,'yes','no') |\n+--------------------+\n| yes                |\n+--------------------+\n", "SELECT IF(STRCMP('test','test1'),'no','yes');\n+---------------------------------------+\n| IF(STRCMP('test','test1'),'no','yes') |\n+---------------------------------------+\n| no                                    |\n+---------------------------------------+\n"], "Category": ["Control Flow Functions"]}
{"HTML": ["https://mariadb.com//kb/en/ifnull/"], "Title": ["IFNULL"], "Feature": ["IFNULL(expr1,expr2)\nNVL(expr1,expr2)\n"], "Description": ["If expr1 is not NULL, IFNULL() returns expr1; otherwise it returns\nexpr2. IFNULL() returns a numeric or string value, depending on the\ncontext in which it is used. ", "From MariaDB 10.3, NVL() is an alias for IFNULL()."], "Examples": ["SELECT IFNULL(1,0); \n+-------------+\n| IFNULL(1,0) |\n+-------------+\n|           1 |\n+-------------+\n\nSELECT IFNULL(NULL,10);\n+-----------------+\n| IFNULL(NULL,10) |\n+-----------------+\n|              10 |\n+-----------------+\n\nSELECT IFNULL(1/0,10);\n+----------------+\n| IFNULL(1/0,10) |\n+----------------+\n|        10.0000 |\n+----------------+\n\nSELECT IFNULL(1/0,'yes');\n+-------------------+\n| IFNULL(1/0,'yes') |\n+-------------------+\n| yes               |\n+-------------------+\n"], "Category": ["Control Flow Functions"]}
{"HTML": ["https://mariadb.com//kb/en/inet6_aton/"], "Title": ["INET6_ATON"], "Feature": ["INET6_ATON(expr)\n"], "Description": ["Given an IPv6 or IPv4 network address as a string, returns a binary string that represents the numeric value of the address.", "No trailing zone ID's or traling network masks are permitted. For IPv4 addresses, or IPv6 addresses with IPv4 address parts, no classful addresses or trailing port numbers are permitted and octal numbers are not supported.", "The returned binary string will be VARBINARY(16) or VARBINARY(4) for IPv6 and IPv4 addresses respectively.", "Returns NULL if the argument is not understood.", "MariaDB starting with 10.5.0From MariaDB 10.5.0, INET6_ATON can take INET6 as an argument.\n"], "Examples": ["SELECT HEX(INET6_ATON('10.0.1.1'));\n+-----------------------------+\n| HEX(INET6_ATON('10.0.1.1')) |\n+-----------------------------+\n| 0A000101                    |\n+-----------------------------+\n\nSELECT HEX(INET6_ATON('48f3::d432:1431:ba23:846f'));\n+----------------------------------------------+\n| HEX(INET6_ATON('48f3::d432:1431:ba23:846f')) |\n+----------------------------------------------+\n| 48F3000000000000D4321431BA23846F             |\n+----------------------------------------------+\n"], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://mariadb.com//kb/en/inet6_ntoa/"], "Title": ["INET6_NTOA"], "Feature": ["INET6_NTOA(expr)\n"], "Description": ["Given an IPv6 or IPv4 network address as a numeric binary string, returns the address as a nonbinary string in the connection character set.", "The return string is lowercase, and is platform independent, since it does not use functions specific to the operating system. It has a maximum length of 39 characters.", "Returns NULL if the argument is not understood."], "Examples": ["SELECT INET6_NTOA(UNHEX('0A000101'));\n+-------------------------------+\n| INET6_NTOA(UNHEX('0A000101')) |\n+-------------------------------+\n| 10.0.1.1                      |\n+-------------------------------+\n\nSELECT INET6_NTOA(UNHEX('48F3000000000000D4321431BA23846F'));\n+-------------------------------------------------------+\n| INET6_NTOA(UNHEX('48F3000000000000D4321431BA23846F')) |\n+-------------------------------------------------------+\n| 48f3::d432:1431:ba23:846f                             |\n+-------------------------------------------------------+\n"], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://mariadb.com//kb/en/inet_aton/"], "Title": ["INET_ATON"], "Feature": ["INET_ATON(expr)\n"], "Description": ["Given the dotted-quad representation of an IPv4 network address as a string,\nreturns an integer that represents the numeric value of the address.\nAddresses may be 4- or 8-byte addresses.", "Returns NULL if the argument is not understood."], "Examples": ["SELECT INET_ATON('192.168.1.1');\n+--------------------------+\n| INET_ATON('192.168.1.1') |\n+--------------------------+\n|               3232235777 |\n+--------------------------+\n"], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://mariadb.com//kb/en/inet_ntoa/"], "Title": ["INET_NTOA"], "Feature": ["INET_NTOA(expr)\n"], "Description": ["Given a numeric IPv4 network address in network byte order (4 or 8 byte),\nreturns the dotted-quad representation of the address as a string."], "Examples": ["SELECT INET_NTOA(3232235777);\n+-----------------------+\n| INET_NTOA(3232235777) |\n+-----------------------+\n| 192.168.1.1           |\n+-----------------------+\n"], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://mariadb.com//kb/en/insert-function/"], "Title": ["INSERT Function"], "Feature": ["INSERT(str,pos,len,newstr)\n"], "Description": ["Returns the string str, with the substring beginning at position pos\nand len characters long replaced by the string newstr. Returns the\noriginal string if pos is not within the length of the string.\nReplaces the rest of the string from position pos if len is not within\nthe length of the rest of the string. Returns NULL if any argument is\nNULL."], "Examples": ["SELECT INSERT('Quadratic', 3, 4, 'What');\n+-----------------------------------+\n| INSERT('Quadratic', 3, 4, 'What') |\n+-----------------------------------+\n| QuWhattic                         |\n+-----------------------------------+\n\nSELECT INSERT('Quadratic', -1, 4, 'What');\n+------------------------------------+\n| INSERT('Quadratic', -1, 4, 'What') |\n+------------------------------------+\n| Quadratic                          |\n+------------------------------------+\n\nSELECT INSERT('Quadratic', 3, 100, 'What');\n+-------------------------------------+\n| INSERT('Quadratic', 3, 100, 'What') |\n+-------------------------------------+\n| QuWhat                              |\n+-------------------------------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/instr/"], "Title": ["INSTR"], "Feature": ["INSTR(str,substr)\n"], "Description": ["Returns the position of the first occurrence of substring substr in\nstring str. This is the same as the two-argument form of LOCATE(),\nexcept that the order of the arguments is reversed.", "INSTR() performs a case-insensitive search.", "If any argument is NULL, returns NULL."], "Examples": ["SELECT INSTR('foobarbar', 'bar');\n+---------------------------+\n| INSTR('foobarbar', 'bar') |\n+---------------------------+\n|                         4 |\n+---------------------------+\n\nSELECT INSTR('My', 'Maria');\n+----------------------+\n| INSTR('My', 'Maria') |\n+----------------------+\n|                    0 |\n+----------------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/intersects/"], "Title": ["INTERSECTS"], "Feature": ["INTERSECTS(g1,g2)\n"], "Description": ["Returns 1 or 0 to indicate whether geometry g1 spatially intersects geometry g2.", "INTERSECTS() is based on the original MySQL implementation and uses object bounding rectangles, while ST_INTERSECTS() uses object shapes.", "INTERSECTS() tests the opposite relationship to DISJOINT()."], "Examples": [], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/avg/"], "Title": ["AVG"], "Feature": ["AVG([DISTINCT] expr)\n"], "Description": ["Returns the average value of expr. The DISTINCT option can be used to return the average of the distinct values of expr. NULL values are ignored. It is an aggregate function, and so can be used with the GROUP BY clause.", "AVG() returns NULL if there were no matching rows.", "AVG() can be used as a window function."], "Examples": ["CREATE TABLE sales (sales_value INT);\n\nINSERT INTO sales VALUES(10),(20),(20),(40);\n\nSELECT AVG(sales_value) FROM sales;\n+------------------+\n| AVG(sales_value) |\n+------------------+\n|          22.5000 |\n+------------------+\n\nSELECT AVG(DISTINCT(sales_value)) FROM sales;\n+----------------------------+\n| AVG(DISTINCT(sales_value)) |\n+----------------------------+\n|                    23.3333 |\n+----------------------------+\n", "CREATE TABLE student (name CHAR(10), test CHAR(10), score TINYINT); \n\nINSERT INTO student VALUES \n  ('Chun', 'SQL', 75), ('Chun', 'Tuning', 73), \n  ('Esben', 'SQL', 43), ('Esben', 'Tuning', 31), \n  ('Kaolin', 'SQL', 56), ('Kaolin', 'Tuning', 88), \n  ('Tatiana', 'SQL', 87), ('Tatiana', 'Tuning', 83);\n\nSELECT name, AVG(score) FROM student GROUP BY name;\n+---------+------------+\n| name    | AVG(score) |\n+---------+------------+\n| Chun    |    74.0000 |\n| Esben   |    37.0000 |\n| Kaolin  |    72.0000 |\n| Tatiana |    85.0000 |\n+---------+------------+\n", "SELECT name,test,AVG(score) FROM student;\n+------+------+------------+\n| name | test | MIN(score) |\n+------+------+------------+\n| Chun | SQL  |         31 |\n+------+------+------------+\n", "CREATE TABLE student_test (name CHAR(10), test CHAR(10), score TINYINT); \n\nINSERT INTO student_test VALUES \n    ('Chun', 'SQL', 75), ('Chun', 'Tuning', 73), \n    ('Esben', 'SQL', 43), ('Esben', 'Tuning', 31), \n    ('Kaolin', 'SQL', 56), ('Kaolin', 'Tuning', 88), \n    ('Tatiana', 'SQL', 87), ('Tatiana', 'Tuning', 83);\n\nSELECT name, test, score, AVG(score) OVER (PARTITION BY test) \n    AS average_by_test FROM student_test;\n+---------+--------+-------+-----------------+\n| name    | test   | score | average_by_test |\n+---------+--------+-------+-----------------+\n| Chun    | SQL    |    75 |         65.2500 |\n| Chun    | Tuning |    73 |         68.7500 |\n| Esben   | SQL    |    43 |         65.2500 |\n| Esben   | Tuning |    31 |         68.7500 |\n| Kaolin  | SQL    |    56 |         65.2500 |\n| Kaolin  | Tuning |    88 |         68.7500 |\n| Tatiana | SQL    |    87 |         65.2500 |\n| Tatiana | Tuning |    83 |         68.7500 |\n+---------+--------+-------+-----------------+\n"], "Category": ["Aggregate Functions"]}
{"HTML": ["https://mariadb.com//kb/en/is_free_lock/"], "Title": ["IS_FREE_LOCK"], "Feature": ["IS_FREE_LOCK(str)\n"], "Description": ["Checks whether the lock named str is free to use (that is, not locked).\nReturns 1 if the lock is free (no one is using the lock),\n 0 if the lock is in use, and NULL if an\nerror occurs (such as an incorrect argument, like an empty string or NULL). str is case insensitive.", "If the metadata_lock_info plugin is installed, the Information Schema metadata_lock_info table contains information about locks of this kind (as well as metadata locks).", "Statements using the IS_FREE_LOCK function are not safe for statement-based replication."], "Examples": [], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://mariadb.com//kb/en/is_ipv4/"], "Title": ["IS_IPV4"], "Feature": ["IS_IPV4(expr)\n"], "Description": ["If the expression is a valid IPv4 address, returns 1, otherwise returns 0.", "IS_IPV4() is stricter than INET_ATON(), but as strict as INET6_ATON(), in determining the validity of an IPv4 address. This implies that if IS_IPV4 returns 1, the same expression will always return a non-NULL result when passed to INET_ATON(), but that the reverse may not apply."], "Examples": ["SELECT IS_IPV4('1110.0.1.1');\n+-----------------------+\n| IS_IPV4('1110.0.1.1') |\n+-----------------------+\n|                     0 |\n+-----------------------+\n\nSELECT IS_IPV4('48f3::d432:1431:ba23:846f');\n+--------------------------------------+\n| IS_IPV4('48f3::d432:1431:ba23:846f') |\n+--------------------------------------+\n|                                    0 |\n+--------------------------------------+\n"], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://mariadb.com//kb/en/is_ipv4_compat/"], "Title": ["IS_IPV4_COMPAT"], "Feature": ["IS_IPV4_COMPAT(expr)\n"], "Description": ["Returns 1 if a given numeric binary string IPv6 address, such as returned by INET6_ATON(), is IPv4-compatible, otherwise returns 0. ", "MariaDB starting with 10.5.0From MariaDB 10.5.0, when the argument is not INET6, automatic implicit CAST to INET6 is applied. As a consequence, IS_IPV4_COMPAT now understands arguments in both text representation and binary(16) representation. Before MariaDB 10.5.0, the function understood only binary(16) representation.\n"], "Examples": ["SELECT IS_IPV4_COMPAT(INET6_ATON('::10.0.1.1'));\n+------------------------------------------+\n| IS_IPV4_COMPAT(INET6_ATON('::10.0.1.1')) |\n+------------------------------------------+\n|                                        1 |\n+------------------------------------------+\n\nSELECT IS_IPV4_COMPAT(INET6_ATON('::48f3::d432:1431:ba23:846f'));\n+-----------------------------------------------------------+\n| IS_IPV4_COMPAT(INET6_ATON('::48f3::d432:1431:ba23:846f')) |\n+-----------------------------------------------------------+\n|                                                         0 |\n+-----------------------------------------------------------+\n"], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://mariadb.com//kb/en/is_ipv4_mapped/"], "Title": ["IS_IPV4_MAPPED"], "Feature": ["IS_IPV4_MAPPED(expr)\n"], "Description": ["Returns 1 if a given a numeric binary string IPv6 address, such as returned by INET6_ATON(), is a valid IPv4-mapped address, otherwise returns 0.", "MariaDB starting with 10.5.0From MariaDB 10.5.0, when the argument is not INET6, automatic implicit CAST to INET6 is applied. As a consequence, IS_IPV4_MAPPED now understands arguments in both text representation and binary(16) representation. Before MariaDB 10.5.0, the function understood only binary(16) representation.\n"], "Examples": ["SELECT IS_IPV4_MAPPED(INET6_ATON('::10.0.1.1'));\n+------------------------------------------+\n| IS_IPV4_MAPPED(INET6_ATON('::10.0.1.1')) |\n+------------------------------------------+\n|                                        0 |\n+------------------------------------------+\n\nSELECT IS_IPV4_MAPPED(INET6_ATON('::ffff:10.0.1.1'));\n+-----------------------------------------------+\n| IS_IPV4_MAPPED(INET6_ATON('::ffff:10.0.1.1')) |\n+-----------------------------------------------+\n|                                             1 |\n+-----------------------------------------------+\n"], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://mariadb.com//kb/en/is_ipv6/"], "Title": ["IS_IPV6"], "Feature": ["IS_IPV6(expr)\n"], "Description": ["Returns 1 if the expression is a valid IPv6 address specified as a string, otherwise returns 0. Does not consider IPv4 addresses to be valid IPv6 addresses."], "Examples": [" SELECT IS_IPV6('48f3::d432:1431:ba23:846f');\n+--------------------------------------+\n| IS_IPV6('48f3::d432:1431:ba23:846f') |\n+--------------------------------------+\n|                                    1 |\n+--------------------------------------+\n1 row in set (0.02 sec)\n\nSELECT IS_IPV6('10.0.1.1');\n+---------------------+\n| IS_IPV6('10.0.1.1') |\n+---------------------+\n|                   0 |\n+---------------------+\n"], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://mariadb.com//kb/en/is_used_lock/"], "Title": ["IS_USED_LOCK"], "Feature": ["IS_USED_LOCK(str)\n"], "Description": ["Checks whether the lock named str is in use (that is, locked). If so,\nit returns the connection identifier of the client that holds the\nlock. Otherwise, it returns NULL. str is case insensitive.", "If the metadata_lock_info plugin is installed, the Information Schema metadata_lock_info table contains information about locks of this kind (as well as metadata locks).", "Statements using the IS_USED_LOCK function are not safe for statement-based replication."], "Examples": [], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://mariadb.com//kb/en/json_array/"], "Title": ["JSON_ARRAY"], "Feature": ["JSON_ARRAY([value[, value2] ...])\n"], "Description": ["Returns a JSON array containing the listed values. The list can be empty."], "Examples": ["SELECT Json_Array(56, 3.1416, 'My name is \"Foo\"', NULL);\n+--------------------------------------------------+\n| Json_Array(56, 3.1416, 'My name is \"Foo\"', NULL) |\n+--------------------------------------------------+\n| [56, 3.1416, \"My name is \\\"Foo\\\"\", null]         |\n+--------------------------------------------------+\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://mariadb.com//kb/en/json_array_append/"], "Title": ["JSON_ARRAY_APPEND"], "Feature": ["JSON_ARRAY_APPEND(json_doc, path, value[, path, value] ...)\n"], "Description": ["Appends values to the end of the specified arrays within a JSON document, returning the result, or NULL if any of the arguments are NULL.", "Evaluation is performed from left to right, with the resulting document from the previous pair becoming the new value against which the next pair is evaluated.", "If the json_doc is not a valid JSON document, or if any of the paths are not valid, or contain a * or ** wildcard, an error is returned."], "Examples": ["SET @json = '[1, 2, [3, 4]]';\n\nSELECT JSON_ARRAY_APPEND(@json, '$[0]', 5)\n+-------------------------------------+\n| JSON_ARRAY_APPEND(@json, '$[0]', 5) |\n+-------------------------------------+\n| [[1, 5], 2, [3, 4]]                 |\n+-------------------------------------+\n\nSELECT JSON_ARRAY_APPEND(@json, '$[1]', 6);\n+-------------------------------------+\n| JSON_ARRAY_APPEND(@json, '$[1]', 6) |\n+-------------------------------------+\n| [1, [2, 6], [3, 4]]                 |\n+-------------------------------------+\n\nSELECT JSON_ARRAY_APPEND(@json, '$[1]', 6, '$[2]', 7);\n+------------------------------------------------+\n| JSON_ARRAY_APPEND(@json, '$[1]', 6, '$[2]', 7) |\n+------------------------------------------------+\n| [1, [2, 6], [3, 4, 7]]                         |\n+------------------------------------------------+\n\nSELECT JSON_ARRAY_APPEND(@json, '$', 5);\n+----------------------------------+\n| JSON_ARRAY_APPEND(@json, '$', 5) |\n+----------------------------------+\n| [1, 2, [3, 4], 5]                |\n+----------------------------------+\n\nSET @json = '{\"A\": 1, \"B\": [2], \"C\": [3, 4]}';\n\nSELECT JSON_ARRAY_APPEND(@json, '$.B', 5);\n+------------------------------------+\n| JSON_ARRAY_APPEND(@json, '$.B', 5) |\n+------------------------------------+\n| {\"A\": 1, \"B\": [2, 5], \"C\": [3, 4]} |\n+------------------------------------+\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://mariadb.com//kb/en/json_array_insert/"], "Title": ["JSON_ARRAY_INSERT"], "Feature": ["JSON_ARRAY_INSERT(json_doc, path, value[, path, value] ...)\n"], "Description": ["Inserts a value into a JSON document, returning the modified document, or NULL if any of the arguments are NULL.", "Evaluation is performed from left to right, with the resulting document from the previous pair becoming the new value against which the next pair is evaluated.", "If the json_doc is not a valid JSON document, or if any of the paths are not valid, or contain a * or ** wildcard, an error is returned."], "Examples": ["SET @json = '[1, 2, [3, 4]]';\n\nSELECT JSON_ARRAY_INSERT(@json, '$[0]', 5);\n+-------------------------------------+\n| JSON_ARRAY_INSERT(@json, '$[0]', 5) |\n+-------------------------------------+\n| [5, 1, 2, [3, 4]]                   |\n+-------------------------------------+\n\nSELECT JSON_ARRAY_INSERT(@json, '$[1]', 6);\n+-------------------------------------+\n| JSON_ARRAY_INSERT(@json, '$[1]', 6) |\n+-------------------------------------+\n| [1, 6, 2, [3, 4]]                   |\n+-------------------------------------+\n\nSELECT JSON_ARRAY_INSERT(@json, '$[1]', 6, '$[2]', 7);\n+------------------------------------------------+\n| JSON_ARRAY_INSERT(@json, '$[1]', 6, '$[2]', 7) |\n+------------------------------------------------+\n| [1, 6, 7, 2, [3, 4]]                           |\n+------------------------------------------------+\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://mariadb.com//kb/en/json_array_intersect/"], "Title": ["JSON_ARRAY_INTERSECT"], "Feature": ["JSON_ARRAY_INTERSECT(arr1, arr2)\n"], "Description": ["Finds intersection between two json arrays and returns an array of items found in both array."], "Examples": ["SET @json1= '[1,2,3]';\nSET @json2= '[1,2,4]';\n\nSELECT json_array_intersect(@json1, @json2); \n+--------------------------------------+\n| json_array_intersect(@json1, @json2) |\n+--------------------------------------+\n| [1, 2]                               |\n+--------------------------------------+\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://mariadb.com//kb/en/benchmark/"], "Title": ["BENCHMARK"], "Feature": ["BENCHMARK(count,expr)\n"], "Description": ["The BENCHMARK() function executes the expression expr repeatedly count\ntimes. It may be used to time how quickly MariaDB processes the\nexpression. The result value is always 0. The intended use is from\nwithin the mariadb client, which reports query execution times."], "Examples": ["SELECT BENCHMARK(1000000,ENCODE('hello','goodbye'));\n+----------------------------------------------+\n| BENCHMARK(1000000,ENCODE('hello','goodbye')) |\n+----------------------------------------------+\n|                                            0 |\n+----------------------------------------------+\n1 row in set (0.21 sec)\n"], "Category": ["Information Functions"]}
{"HTML": ["https://mariadb.com//kb/en/json_compact/"], "Title": ["JSON_COMPACT"], "Feature": ["JSON_COMPACT(json_doc)\n"], "Description": ["Removes all unnecessary spaces so the json document is as short as possible."], "Examples": ["SET @j = '{ \"A\": 1, \"B\": [2, 3]}';\n\nSELECT JSON_COMPACT(@j), @j;\n+-------------------+------------------------+\n| JSON_COMPACT(@j)  | @j                     |\n+-------------------+------------------------+\n| {\"A\":1,\"B\":[2,3]} | { \"A\": 1, \"B\": [2, 3]} |\n+-------------------+------------------------+\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://mariadb.com//kb/en/json_contains/"], "Title": ["JSON_CONTAINS"], "Feature": ["JSON_CONTAINS(json_doc, val[, path])\n"], "Description": ["Returns whether or not the specified value is found in the given JSON document or, optionally, at the specified path within the document. Returns 1 if it does, 0 if not and NULL if any of the arguments are null. An error occurs if the document or path is not valid, or contains the * or ** wildcards."], "Examples": ["SET @json = '{\"A\": 0, \"B\": {\"C\": 1}, \"D\": 2}';\n\nSELECT JSON_CONTAINS(@json, '2', '$.A');\n+----------------------------------+\n| JSON_CONTAINS(@json, '2', '$.A') |\n+----------------------------------+\n|                                0 |\n+----------------------------------+\n\nSELECT JSON_CONTAINS(@json, '2', '$.D');\n+----------------------------------+\n| JSON_CONTAINS(@json, '2', '$.D') |\n+----------------------------------+\n|                                1 |\n+----------------------------------+\n\nSELECT JSON_CONTAINS(@json, '{\"C\": 1}', '$.A');\n+-----------------------------------------+\n| JSON_CONTAINS(@json, '{\"C\": 1}', '$.A') |\n+-----------------------------------------+\n|                                       0 |\n+-----------------------------------------+\n\nSELECT JSON_CONTAINS(@json, '{\"C\": 1}', '$.B');\n+-----------------------------------------+\n| JSON_CONTAINS(@json, '{\"C\": 1}', '$.B') |\n+-----------------------------------------+\n|                                       1 |\n+-----------------------------------------+\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://mariadb.com//kb/en/json_contains_path/"], "Title": ["JSON_CONTAINS_PATH"], "Feature": ["JSON_CONTAINS_PATH(json_doc, return_arg, path[, path] ...)\n"], "Description": ["Indicates whether the given JSON document contains data at the specified path or paths. Returns 1 if it does, 0 if not and NULL if any of the arguments are null.", "The return_arg can be one or all:", "one - Returns 1 if at least one path exists within the JSON document. \nall - Returns 1 only if all paths exist within the JSON document.\n"], "Examples": ["SET @json = '{\"A\": 1, \"B\": [2], \"C\": [3, 4]}';\n\nSELECT JSON_CONTAINS_PATH(@json, 'one', '$.A', '$.D');\n+------------------------------------------------+\n| JSON_CONTAINS_PATH(@json, 'one', '$.A', '$.D') |\n+------------------------------------------------+\n|                                              1 |\n+------------------------------------------------+\n1 row in set (0.00 sec)\n\nSELECT JSON_CONTAINS_PATH(@json, 'all', '$.A', '$.D');\n+------------------------------------------------+\n| JSON_CONTAINS_PATH(@json, 'all', '$.A', '$.D') |\n+------------------------------------------------+\n|                                              0 |\n+------------------------------------------------+\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://mariadb.com//kb/en/json_depth/"], "Title": ["JSON_DEPTH"], "Feature": ["JSON_DEPTH(json_doc)\n"], "Description": ["Returns the maximum depth of the given JSON document, or NULL if the argument is null. An error will occur if the argument is an invalid JSON document.", "Scalar values or empty arrays or objects have a depth of 1.\nArrays or objects that are not empty but contain only elements or member values of depth 1 will have a depth of 2.\nIn other cases, the depth will be greater than 2.\n"], "Examples": ["SELECT JSON_DEPTH('[]'), JSON_DEPTH('true'), JSON_DEPTH('{}');\n+------------------+--------------------+------------------+\n| JSON_DEPTH('[]') | JSON_DEPTH('true') | JSON_DEPTH('{}') |\n+------------------+--------------------+------------------+\n|                1 |                  1 |                1 |\n+------------------+--------------------+------------------+\n\nSELECT JSON_DEPTH('[1, 2, 3]'), JSON_DEPTH('[[], {}, []]');\n+-------------------------+----------------------------+\n| JSON_DEPTH('[1, 2, 3]') | JSON_DEPTH('[[], {}, []]') |\n+-------------------------+----------------------------+\n|                       2 |                          2 |\n+-------------------------+----------------------------+\n\nSELECT JSON_DEPTH('[1, 2, [3, 4, 5, 6], 7]');\n+---------------------------------------+\n| JSON_DEPTH('[1, 2, [3, 4, 5, 6], 7]') |\n+---------------------------------------+\n|                                     3 |\n+---------------------------------------+\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://mariadb.com//kb/en/json_detailed/"], "Title": ["JSON_DETAILED"], "Feature": ["JSON_DETAILED(json_doc[, tab_size])\nJSON_PRETTY(json_doc[, tab_size])\n"], "Description": ["Represents JSON in the most understandable way emphasizing nested structures. ", "JSON_PRETTY was added as an alias for JSON_DETAILED in MariaDB 10.10.3, MariaDB 10.9.5, MariaDB 10.8.7, MariaDB 10.7.8, MariaDB 10.6.12, MariaDB 10.5.19 and MariaDB 10.4.28."], "Examples": ["SET @j = '{ \"A\":1,\"B\":[2,3]}';\n\nSELECT @j;\n+--------------------+\n| @j                 |\n+--------------------+\n| { \"A\":1,\"B\":[2,3]} |\n+--------------------+\n\nSELECT JSON_DETAILED(@j);\n+------------------------------------------------------------+\n| JSON_DETAILED(@j)                                          |\n+------------------------------------------------------------+\n| {\n    \"A\": 1,\n    \"B\": \n    [\n        2,\n        3\n    ]\n} |\n+------------------------------------------------------------+\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://mariadb.com//kb/en/json_equals/"], "Title": ["JSON_EQUALS"], "Feature": ["JSON_EQUALS(json1, json2)\n"], "Description": ["Checks if there is equality between two json objects. Returns 1 if it there is, 0 if not, or NULL if any of the arguments are null."], "Examples": ["SELECT JSON_EQUALS('{\"a\"   :[1, 2, 3],\"b\":[4]}', '{\"b\":[4],\"a\":[1, 2, 3.0]}');\n+------------------------------------------------------------------------+\n| JSON_EQUALS('{\"a\"   :[1, 2, 3],\"b\":[4]}', '{\"b\":[4],\"a\":[1, 2, 3.0]}') |\n+------------------------------------------------------------------------+\n|                                                                      1 |\n+------------------------------------------------------------------------+\n\nSELECT JSON_EQUALS('{\"a\":[1, 2, 3]}', '{\"a\":[1, 2, 3.01]}');\n+------------------------------------------------------+\n| JSON_EQUALS('{\"a\":[1, 2, 3]}', '{\"a\":[1, 2, 3.01]}') |\n+------------------------------------------------------+\n|                                                    0 |\n+------------------------------------------------------+\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://mariadb.com//kb/en/json_extract/"], "Title": ["JSON_EXTRACT"], "Feature": ["JSON_EXTRACT(json_doc, path[, path] ...)\n"], "Description": ["Extracts data from a JSON document. The extracted data is selected from the parts matching the path arguments. Returns all matched values; either as a single matched value, or, if the arguments could return multiple values, a result autowrapped as an array in the matching order.", "Returns NULL if no paths match or if any of the arguments are NULL. ", "An error will occur if any path argument is not a valid path, or if the json_doc argument is not a valid JSON document.", "The path expression be a JSONPath expression as supported by MariaDB "], "Examples": ["SET @json = '[1, 2, [3, 4]]';\n\nSELECT JSON_EXTRACT(@json, '$[1]');\n+-----------------------------+\n| JSON_EXTRACT(@json, '$[1]') |\n+-----------------------------+\n| 2                           |\n+-----------------------------+\n\nSELECT JSON_EXTRACT(@json, '$[2]');\n+-----------------------------+\n| JSON_EXTRACT(@json, '$[2]') |\n+-----------------------------+\n| [3, 4]                      |\n+-----------------------------+\n\nSELECT JSON_EXTRACT(@json, '$[2][1]');\n+--------------------------------+\n| JSON_EXTRACT(@json, '$[2][1]') |\n+--------------------------------+\n| 4                              |\n+--------------------------------+\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://mariadb.com//kb/en/json_insert/"], "Title": ["JSON_INSERT"], "Feature": ["JSON_INSERT(json_doc, path, val[, path, val] ...)\n"], "Description": ["Inserts data into a JSON document, returning the resulting document or NULL if either of the json_doc or path arguments are null. ", "An error will occur if the JSON document is invalid, or if any of the paths are invalid or contain a * or ** wildcard.", "JSON_INSERT can only insert data while JSON_REPLACE can only update. JSON_SET can update or insert data. "], "Examples": ["SET @json = '{ \"A\": 0, \"B\": [1, 2]}';\n\nSELECT JSON_INSERT(@json, '$.C', '[3, 4]');\n+--------------------------------------+\n| JSON_INSERT(@json, '$.C', '[3, 4]')  |\n+--------------------------------------+\n| { \"A\": 0, \"B\": [1, 2], \"C\":\"[3, 4]\"} |\n+--------------------------------------+\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://mariadb.com//kb/en/json_keys/"], "Title": ["JSON_KEYS"], "Feature": ["JSON_KEYS(json_doc[, path])\n"], "Description": ["Returns the keys as a JSON array from the top-level value of a JSON object or, if the optional path argument is provided, the top-level keys from the path. ", "Excludes keys from nested sub-objects in the top level value. The resulting array will be empty if the selected object is empty.", "Returns NULL if any of the arguments are null, a given path does not locate an object, or if the json_doc argument is not an object.", "An error will occur if JSON document is invalid, the path is invalid or if the path contains a * or ** wildcard."], "Examples": ["SELECT JSON_KEYS('{\"A\": 1, \"B\": {\"C\": 2}}');\n+--------------------------------------+\n| JSON_KEYS('{\"A\": 1, \"B\": {\"C\": 2}}') |\n+--------------------------------------+\n| [\"A\", \"B\"]                           |\n+--------------------------------------+\n\nSELECT JSON_KEYS('{\"A\": 1, \"B\": 2, \"C\": {\"D\": 3}}', '$.C');\n+-----------------------------------------------------+\n| JSON_KEYS('{\"A\": 1, \"B\": 2, \"C\": {\"D\": 3}}', '$.C') |\n+-----------------------------------------------------+\n| [\"D\"]                                               |\n+-----------------------------------------------------+\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://mariadb.com//kb/en/json_length/"], "Title": ["JSON_LENGTH"], "Feature": ["JSON_LENGTH(json_doc[, path])\n"], "Description": ["Returns the length of a JSON document, or, if the optional path argument is given, the length of the value within the document specified by the path. ", "Returns NULL if any of the arguments argument are null or the path argument does not identify a value in the document. ", "An error will occur if the JSON document is invalid, the path is invalid or if the path contains a * or ** wildcard.", "Length will be determined as follow:", "A scalar's length is always 1.\nIf an array, the number of elements in the array.\nIf an object, the number of members in the object.\n", "The length of nested arrays or objects are not counted."], "Examples": [], "Category": ["JSON Functions"]}
{"HTML": ["https://mariadb.com//kb/en/bin/"], "Title": ["BIN"], "Feature": ["BIN(N)\n"], "Description": ["Returns a string representation of the binary value of the given longlong (that is, BIGINT) number. This is equivalent to CONV(N,10,2). The argument should be positive. If it is a FLOAT, it will be truncated. Returns NULL if the argument is NULL."], "Examples": ["SELECT BIN(12);\n+---------+\n| BIN(12) |\n+---------+\n| 1100    |\n+---------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/json_loose/"], "Title": ["JSON_LOOSE"], "Feature": ["JSON_LOOSE(json_doc)\n"], "Description": ["Adds spaces to a JSON document to make it look more readable."], "Examples": ["SET @j = '{ \"A\":1,\"B\":[2,3]}';\n\nSELECT JSON_LOOSE(@j), @j;\n+-----------------------+--------------------+\n| JSON_LOOSE(@j)        | @j                 |\n+-----------------------+--------------------+\n| {\"A\": 1, \"B\": [2, 3]} | { \"A\":1,\"B\":[2,3]} |\n+-----------------------+--------------------+\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://mariadb.com//kb/en/json_merge/"], "Title": ["JSON_MERGE"], "Feature": ["JSON_MERGE(json_doc, json_doc[, json_doc] ...)\n"], "Description": ["Merges the given JSON documents.", "Returns the merged result,or NULL if any argument is NULL.", "An error occurs if any of the arguments are not valid JSON documents.", "JSON_MERGE has been deprecated since MariaDB 10.2.25, MariaDB 10.3.16 and MariaDB 10.4.5. JSON_MERGE_PATCH is an RFC 7396-compliant replacement, and JSON_MERGE_PRESERVE is a synonym."], "Examples": ["SET @json1 = '[1, 2]';\nSET @json2 = '[3, 4]';\n\nSELECT JSON_MERGE(@json1,@json2);\n+---------------------------+\n| JSON_MERGE(@json1,@json2) |\n+---------------------------+\n| [1, 2, 3, 4]              |\n+---------------------------+\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://mariadb.com//kb/en/json_normalize/"], "Title": ["JSON_NORMALIZE"], "Feature": ["JSON_NORMALIZE(json)\n"], "Description": ["Recursively sorts keys and removes spaces, allowing comparison of json documents for equality."], "Examples": ["CREATE TABLE t1 (\n id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,\n val JSON,\n /* other columns here */\n PRIMARY KEY (id)\n);\n", "ALTER TABLE t1\n   ADD COLUMN jnorm JSON AS (JSON_NORMALIZE(val)) VIRTUAL,\n   ADD UNIQUE KEY (jnorm);\n", "INSERT INTO t1 (val) VALUES ('{\"name\":\"alice\",\"color\":\"blue\"}');\n", "INSERT INTO t1 (val) VALUES ('{ \"color\": \"blue\", \"name\": \"alice\" }');\nERROR 1062 (23000): Duplicate entry '{\"color\":\"blue\",\"name\":\"alice\"}' for key 'jnorm'\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://mariadb.com//kb/en/json_object/"], "Title": ["JSON_OBJECT"], "Feature": ["JSON_OBJECT([key, value[, key, value] ...])\n"], "Description": ["Returns a JSON object containing the given key/value pairs. The key/value list can be empty.", "An error will occur if there are an odd number of arguments, or any key name is NULL."], "Examples": ["SELECT JSON_OBJECT(\"id\", 1, \"name\", \"Monty\");\n+---------------------------------------+\n| JSON_OBJECT(\"id\", 1, \"name\", \"Monty\") |\n+---------------------------------------+\n| {\"id\": 1, \"name\": \"Monty\"}            |\n+---------------------------------------+\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://mariadb.com//kb/en/json_objectagg/"], "Title": ["JSON_OBJECTAGG"], "Feature": ["JSON_OBJECTAGG(key, value)\n"], "Description": ["JSON_OBJECTAGG returns a JSON object containing key-value pairs. It takes two expressions that evaluate to a single value, or two column names, as arguments, the first used as a key, and the second as a value. ", "The maximum returned length in bytes is determined by the group_concat_max_len server system variable.", "Returns NULL in the case of an error, or if the result contains no rows.", "JSON_OBJECTAGG cannot currently be used as a window function."], "Examples": ["select * from t1;\n+------+-------+\n| a    | b     |\n+------+-------+\n|    1 | Hello |\n|    1 | World |\n|    2 | This  |\n+------+-------+\n\nSELECT JSON_OBJECTAGG(a, b) FROM t1;\n+----------------------------------------+\n| JSON_OBJECTAGG(a, b)                   |\n+----------------------------------------+\n| {\"1\":\"Hello\", \"1\":\"World\", \"2\":\"This\"} |\n+----------------------------------------+\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://mariadb.com//kb/en/json_object_filter_keys/"], "Title": ["JSON_OBJECT_FILTER_KEYS"], "Feature": ["JSON_OBJECT_FILTER_KEYS(obj, array_keys)\n"], "Description": ["JSON_OBJECT_FILTER_KEYS returns a JSON object with keys from the object that are also present in the array as string. It is used when one wants to get key-value pair such that the keys are common but the values may not be common."], "Examples": ["SET @obj1= '{ \"a\": 1, \"b\": 2, \"c\": 3}';\nSET @obj2= '{\"b\" : 10, \"c\": 20, \"d\": 30}';\nSELECT JSON_OBJECT_FILTER_KEYS (@obj1, JSON_ARRAY_INTERSECT(JSON_KEYS(@obj1), JSON_KEYS(@obj2)));\n+-------------------------------------------------------------------------------------------+\n| JSON_OBJECT_FILTER_KEYS (@obj1, JSON_ARRAY_INTERSECT(JSON_KEYS(@obj1), JSON_KEYS(@obj2))) |\n+-------------------------------------------------------------------------------------------+\n| {\"b\": 2, \"c\": 3}                                                                          |\n+-------------------------------------------------------------------------------------------+\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://mariadb.com//kb/en/json_object_to_array/"], "Title": ["JSON_OBJECT_TO_ARRAY"], "Feature": ["JSON_OBJECT_TO_ARRAY(Obj)\n"], "Description": ["It is used to convert all JSON objects found in a JSON document to JSON arrays where each item in the outer array represents a single key-value pair from the object. It is used when we want not just common keys, but also common values. It can be used in conjunction with JSON_ARRAY_INTERSECT()."], "Examples": ["SET @obj1= '{ \"a\": [1, 2, 3], \"b\": { \"key1\":\"val1\", \"key2\": {\"key3\":\"val3\"} }}';\n\nSELECT JSON_OBJECT_TO_ARRAY(@obj1);\n+-----------------------------------------------------------------------+\n| JSON_OBJECT_TO_ARRAY(@obj1)                                           |\n+-----------------------------------------------------------------------+\n| [[\"a\", [1, 2, 3]], [\"b\", {\"key1\": \"val1\", \"key2\": {\"key3\": \"val3\"}}]] |\n+-----------------------------------------------------------------------+\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://mariadb.com//kb/en/json_overlaps/"], "Title": ["JSON_OVERLAPS"], "Feature": ["JSON_OVERLAPS(json_doc1, json_doc2)\n"], "Description": ["JSON_OVERLAPS() compares two json documents and returns true if they have at least one common\nkey-value pair between two objects, array element common between two arrays,\nor array element common with scalar if one of the arguments is a scalar and other is an array.\nIf two json documents are scalars, it returns true if they have same type and value.", "If none of the above conditions are satisfied then it returns false."], "Examples": ["SELECT JSON_OVERLAPS('false', 'false');\n+---------------------------------+\n| JSON_OVERLAPS('false', 'false') |\n+---------------------------------+\n| 1                               |\n+---------------------------------+\n\nSELECT JSON_OVERLAPS('true', '[\"abc\", 1, 2, true, false]');\n+----------------------------------------------------+\n| JSON_OVERLAPS('true','[\"abc\", 1, 2, true, false]') |\n+----------------------------------------------------+\n| 1                                                  |\n+----------------------------------------------------+\n\nSELECT JSON_OVERLAPS('{\"A\": 1, \"B\": {\"C\":2}}', '{\"A\": 2, \"B\": {\"C\":2}}') AS is_overlap;\n+---------------------+\n| is_overlap          |\n+---------------------+\n| 1                   |\n+---------------------+\n", "SELECT JSON_OVERLAPS('[1, 2, true, false, null]', '[3, 4, [1]]') AS is_overlap;\n+--------------------- +\n| is_overlap           |\n+----------------------+\n| 0                    |\n+----------------------+\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://mariadb.com//kb/en/json_query/"], "Title": ["JSON_QUERY"], "Feature": ["JSON_QUERY(json_doc, path)\n"], "Description": ["Given a JSON document, returns an object or array specified by the path. Returns NULL if not given a valid JSON document, or if there is no match."], "Examples": ["select json_query('{\"key1\":{\"a\":1, \"b\":[1,2]}}', '$.key1');\n+-----------------------------------------------------+\n| json_query('{\"key1\":{\"a\":1, \"b\":[1,2]}}', '$.key1') |\n+-----------------------------------------------------+\n| {\"a\":1, \"b\":[1,2]}                                  |\n+-----------------------------------------------------+\n\nselect json_query('{\"key1\":123, \"key1\": [1,2,3]}', '$.key1');\n+-------------------------------------------------------+\n| json_query('{\"key1\":123, \"key1\": [1,2,3]}', '$.key1') |\n+-------------------------------------------------------+\n| [1,2,3]                                               |\n+-------------------------------------------------------+\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://mariadb.com//kb/en/json_quote/"], "Title": ["JSON_QUOTE"], "Feature": ["JSON_QUOTE(json_value)\n"], "Description": ["Quotes a string as a JSON value, usually for producing valid JSON string literals for inclusion in JSON documents. Wraps the string with double quote characters and escapes interior quotes and other special characters, returning a utf8mb4 string. ", "Returns NULL if the argument is NULL."], "Examples": ["SELECT JSON_QUOTE('A'), JSON_QUOTE(\"B\"), JSON_QUOTE('\"C\"');\n+-----------------+-----------------+-------------------+\n| JSON_QUOTE('A') | JSON_QUOTE(\"B\") | JSON_QUOTE('\"C\"') |\n+-----------------+-----------------+-------------------+\n| \"A\"             | \"B\"             | \"\\\"C\\\"\"           |\n+-----------------+-----------------+-------------------+\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://mariadb.com//kb/en/binary-operator/"], "Title": ["BINARY Operator"], "Feature": ["BINARY\n"], "Description": ["The BINARY operator casts the string following it to a binary string.  This is an easy way to force a column comparison to be done byte by byte rather than character by character. This causes the comparison to be case sensitive even if the column isn't defined as BINARY or BLOB.  ", "BINARY also causes trailing spaces to be significant."], "Examples": ["SELECT 'a' = 'A';\n+-----------+\n| 'a' = 'A' |\n+-----------+\n|         1 |\n+-----------+\n\nSELECT BINARY 'a' = 'A';\n+------------------+\n| BINARY 'a' = 'A' |\n+------------------+\n|                0 |\n+------------------+\n\nSELECT 'a' = 'a ';\n+------------+\n| 'a' = 'a ' |\n+------------+\n|          1 |\n+------------+\n\nSELECT BINARY 'a' = 'a ';\n+-------------------+\n| BINARY 'a' = 'a ' |\n+-------------------+\n|                 0 |\n+-------------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/json_remove/"], "Title": ["JSON_REMOVE"], "Feature": ["JSON_REMOVE(json_doc, path[, path] ...)\n"], "Description": ["Removes data from a JSON document returning the result, or NULL if any of the arguments are null. If the element does not exist in the document, no changes are made.", "The function returns NULL and throws a warning if the JSON document is invalid, the path is invalid, contains a range, or  contains a * or ** wildcard.", "Path arguments are evaluated from left to right, with the result from the earlier evaluation being used as the value for the next."], "Examples": ["SELECT JSON_REMOVE('{\"A\": 1, \"B\": 2, \"C\": {\"D\": 3}}', '$.C');\n+-------------------------------------------------------+\n| JSON_REMOVE('{\"A\": 1, \"B\": 2, \"C\": {\"D\": 3}}', '$.C') |\n+-------------------------------------------------------+\n| {\"A\": 1, \"B\": 2}                                      |\n+-------------------------------------------------------+\n\nSELECT JSON_REMOVE('[\"A\", \"B\", [\"C\", \"D\"], \"E\"]', '$[1]');\n+----------------------------------------------------+\n| JSON_REMOVE('[\"A\", \"B\", [\"C\", \"D\"], \"E\"]', '$[1]') |\n+----------------------------------------------------+\n| [\"A\", [\"C\", \"D\"], \"E\"]                             |\n+----------------------------------------------------+\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://mariadb.com//kb/en/json_replace/"], "Title": ["JSON_REPLACE"], "Feature": ["JSON_REPLACE(json_doc, path, val[, path, val] ...)\n"], "Description": ["Replaces existing values in a JSON document, returning the result, or NULL if any of the arguments are NULL. ", "An error will occur if the JSON document is invalid, the path is invalid or if the path contains a * or ** wildcard.", "Paths and values are evaluated from left to right, with the result from the earlier evaluation being used as the value for the next.", "JSON_REPLACE can only update data, while JSON_INSERT can only insert. JSON_SET can update or insert data. "], "Examples": ["SELECT JSON_REPLACE('{ \"A\": 1, \"B\": [2, 3]}', '$.B[1]', 4);\n+-----------------------------------------------------+\n| JSON_REPLACE('{ \"A\": 1, \"B\": [2, 3]}', '$.B[1]', 4) |\n+-----------------------------------------------------+\n| { \"A\": 1, \"B\": [2, 4]}                              |\n+-----------------------------------------------------+\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://mariadb.com//kb/en/json_search/"], "Title": ["JSON_SEARCH"], "Feature": ["JSON_SEARCH(json_doc, return_arg, search_str[, escape_char[, path] ...])\n"], "Description": ["Returns the path to the given string within a JSON document, or NULL if any of json_doc, search_str or a path argument is NULL; if the search string is not found, or if no path exists within the document. ", "A warning will occur if the JSON document is not valid, any of the path arguments are not valid, if return_arg is neither one nor all, or if the escape character is not a constant. NULL will be returned.", "return_arg can be one of two values:", "'one: Terminates after finding the first match, so will return one path string. If there is more than one match, it is undefined which is considered first.\nall: Returns all matching path strings, without duplicates. Multiple strings are autowrapped as an array. The order is undefined.\n"], "Examples": ["SET @json = '[\"A\", [{\"B\": \"1\"}], {\"C\":\"AB\"}, {\"D\":\"BC\"}]';\n\nSELECT JSON_SEARCH(@json, 'one', 'AB');\n+---------------------------------+\n| JSON_SEARCH(@json, 'one', 'AB') |\n+---------------------------------+\n| \"$[2].C\"                        |\n+---------------------------------+\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://mariadb.com//kb/en/json_set/"], "Title": ["JSON_SET"], "Feature": ["JSON_SET(json_doc, path, val[, path, val] ...)\n"], "Description": ["Updates or inserts data into a JSON document, returning the result, or NULL if any of the arguments are NULL or the optional path fails to find an object.", "An error will occur if the JSON document is invalid, the path is invalid or if the path contains a * or  wildcard.", "JSON_SET can update or insert data, while JSON_REPLACE can only update, and JSON_INSERT only insert. "], "Examples": ["SELECT JSON_SET(Priv, '$.locked', 'true') FROM mysql.global_priv\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://mariadb.com//kb/en/json_table/"], "Title": ["JSON_TABLE"], "Feature": ["JSON_TABLE(json_doc, \n          context_path COLUMNS (column_list)\n) [AS] alias\n", "column_list:\n    column[, column][, ...]\n", "column:\n    name FOR ORDINALITY\n    |  name type PATH path_str [on_empty] [on_error]\n    |  name type EXISTS PATH path_str\n    |  NESTED PATH path_str COLUMNS (column_list)\n", "on_empty:\n    {NULL | DEFAULT string | ERROR} ON EMPTY\n", "on_error:\n    {NULL | DEFAULT string | ERROR} ON ERROR\n"], "Description": ["JSON_TABLE can be used in contexts where a table reference can be used; in the FROM clause of a SELECT statement, and in multi-table UPDATE/DELETE statements.", "json_doc is the JSON document to extract data from.  In the simplest case, it is a string literal containing JSON.  In more complex cases it can be an arbitrary expression returning JSON.  The expression may have references to columns of other tables. However, one can only refer to tables that precede this JSON_TABLE invocation. For RIGHT JOIN, it is assumed that its outer side precedes the inner.   All tables in outer selects are also considered preceding.", "context_path is a JSON Path expression pointing to a collection of nodes in json_doc that will be used as the source of rows.", "The COLUMNS clause declares the names and types of the columns that JSON_TABLE returns, as well as how the values of the columns are produced.", "Column Definitions", "The following types of columns are supported:", "Path Columns", "name type PATH path_str [on_empty] [on_error]\n", "Locates the JSON node pointed to by path_str and returns its value. The path_str is evaluated using the current row source node as the context node.", "set @json='\n[\n  {\"name\":\"Laptop\", \"color\":\"black\", \"price\":\"1000\"},\n  {\"name\":\"Jeans\",  \"color\":\"blue\"}\n]';\n\nselect * from json_table(@json, '$[*]' \n  columns(\n   name  varchar(10) path '$.name', \n   color varchar(10) path '$.color',\n   price decimal(8,2) path '$.price' ) \n) as jt;\n+--------+-------+---------+\n| name   | color | price   |\n+--------+-------+---------+\n| Laptop | black | 1000.00 |\n| Jeans  | blue  |    NULL |\n+--------+-------+---------+\n", "The on_empty and on_error clauses specify the actions to be performed when the value was not found or there was an error condition. See the ON EMPTY and ON ERROR clauses section for details.", "ORDINALITY Columns", "name FOR ORDINALITY\n", "Counts the rows, starting from 1. ", "Example:", "set @json='\n[\n  {\"name\":\"Laptop\", \"color\":\"black\"},\n  {\"name\":\"Jeans\",  \"color\":\"blue\"}\n]';\n\nselect * from json_table(@json, '$[*]' \n  columns(\n   id for ordinality, \n   name  varchar(10) path '$.name')\n) as jt;\n+------+--------+\n| id   | name   |\n+------+--------+\n|    1 | Laptop |\n|    2 | Jeans  |\n+------+--------+\n", "EXISTS PATH Columns", "name type EXISTS PATH path_str\n", "Checks whether the node pointed to by value_path exists. The value_path is evaluated using the current row source node as the context node.", "set @json='\n[\n  {\"name\":\"Laptop\", \"color\":\"black\", \"price\":1000},\n  {\"name\":\"Jeans\",  \"color\":\"blue\"}\n]';\n\nselect * from json_table(@json, '$[*]' \n  columns(\n   name  varchar(10) path '$.name',\n   has_price integer exists path '$.price')\n) as jt;\n+--------+-----------+\n| name   | has_price |\n+--------+-----------+\n| Laptop |         1 |\n| Jeans  |         0 |\n+--------+-----------+\n", "NESTED PATHs", "NESTED PATH converts nested JSON structures into multiple rows.", "NESTED PATH path COLUMNS (column_list)\n", "It finds the sequence of JSON nodes pointed to by path and uses it to produce rows.  For each found node, a row is generated with column values as specified by the NESTED PATH's COLUMNS clause.  If path finds no nodes, only one row is generated with all columns having NULL values.", "For example, consider a  JSON document that contains an array of items, and each item, in turn, is expected to have an array of its available sizes:", "set @json='\n[\n  {\"name\":\"Jeans\",  \"sizes\": [32, 34, 36]},\n  {\"name\":\"T-Shirt\", \"sizes\":[\"Medium\", \"Large\"]},\n  {\"name\":\"Cellphone\"}\n]';\n", "NESTED PATH allows one to produce a separate row for each size each item has:", "select * from json_table(@json, '$[*]' \n  columns(\n    name  varchar(10) path '$.name', \n    nested path '$.sizes[*]' columns (\n      size varchar(32) path '$'\n    )\n  )\n) as jt;\n+-----------+--------+\n| name      | size   |\n+-----------+--------+\n| Jeans     | 32     |\n| Jeans     | 34     |\n| Jeans     | 36     |\n| T-Shirt   | Medium |\n| T-Shirt   | Large  |\n| Cellphone | NULL   |\n+-----------+--------+\n", "NESTED PATH clauses can be nested within one another.\nThey can also be located next to each other.  In that case, the nested path clauses will produce records one at a time. The ones that are not producing records will have all columns set to NULL.", "Example:", "set @json='\n[\n  {\"name\":\"Jeans\",  \"sizes\": [32, 34, 36], \"colors\":[\"black\", \"blue\"]}\n]';\n\nselect * from json_table(@json, '$[*]' \n  columns(\n    name  varchar(10) path '$.name', \n    nested path '$.sizes[*]' columns (\n      size varchar(32) path '$'\n    ),\n    nested path '$.colors[*]' columns (\n      color varchar(32) path '$'\n    )\n  )\n) as jt;\n\n+-------+------+-------+\n| name  | size | color |\n+-------+------+-------+\n| Jeans | 32   | NULL  |\n| Jeans | 34   | NULL  |\n| Jeans | 36   | NULL  |\n| Jeans | NULL | black |\n| Jeans | NULL | blue  |\n+-------+------+-------+\n", "ON EMPTY and ON ERROR Clauses", "The ON EMPTY clause specifies what will be done when the element specified by the search path is missing in the JSON document.", "on_empty:\n    {NULL | DEFAULT string | ERROR} ON EMPTY\n", "When ON EMPTY  clause is not present, NULL ON EMPTY is implied.", "on_error:\n    {NULL | DEFAULT string | ERROR} ON ERROR\n", "The ON ERROR clause specifies what should be done if a JSON structure error occurs when trying to extract the value pointed to by the path expression. A JSON structure error here occurs only when one attempts to convert a JSON non-scalar (array or object) into a scalar value.\nWhen the ON ERROR clause is not present, NULL ON ERROR is implied.", "Note: A datatype conversion error (e.g. attempt to store a non-integer value into an integer field, or a varchar column being truncated) is not considered a JSON error and so will not trigger the ON ERROR behavior. It will produce warnings, in the same way as  CAST(value AS datatype) would.", "Replication", "In the current code, evaluation of JSON_TABLE is deterministic, that is, for a given input string JSON_TABLE will always produce the same set of rows in the same order. However, one can think of JSON documents that one can consider identical which will produce different output. In order to be future-proof and withstand changes like:", "sorting JSON object members by name (like MySQL does)\nchanging the way duplicate object members are handled\nthe function is marked as unsafe for statement-based replication.\n", "Extracting a Subdocument into a Column", "MariaDB starting with 10.6.9Prior to MariaDB 10.6.9, JSON_TABLE did not allow one to extract a JSON \"subdocument\" into a JSON column. \nSELECT * FROM JSON_TABLE('{\"foo\": [1,2,3,4]}','$' columns( jscol json path '$.foo') ) AS T;\n+-------+\n| jscol |\n+-------+\n| NULL  |\n+-------+\nThis is supported from MariaDB 10.6.9:\nSELECT * FROM JSON_TABLE('{\"foo\": [1,2,3,4]}','$' columns( jscol json path '$.foo') ) AS T;\n+-----------+\n| jscol     |\n+-----------+\n| [1,2,3,4] |\n+-----------+\n"], "Examples": [], "Category": ["JSON Functions"]}
{"HTML": ["https://mariadb.com//kb/en/json_type/"], "Title": ["JSON_TYPE"], "Feature": ["JSON_TYPE(json_val)\n"], "Description": ["Returns the type of a JSON value (as a string), or NULL if the argument is null.", "An error will occur if the argument is an invalid JSON value.", "The following is a complete list of the possible return types:", "Return typeValueExample\nARRAYJSON array[1, 2, {\"key\": \"value\"}]\nOBJECTJSON object{\"key\":\"value\"}\nBOOLEANJSON true/false literalstrue, false\nDOUBLEA number with at least one floating point decimal.1.2\nINTEGERA number without a floating point decimal.1\nNULLJSON null literal (this is returned as a string, not to be confused with the SQL NULL value!)null\nSTRINGJSON String\"a sample string\"\n\n"], "Examples": ["SELECT JSON_TYPE('{\"A\": 1, \"B\": 2, \"C\": 3}');\n+---------------------------------------+\n| JSON_TYPE('{\"A\": 1, \"B\": 2, \"C\": 3}') |\n+---------------------------------------+\n| OBJECT                                |\n+---------------------------------------+\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://mariadb.com//kb/en/json_unquote/"], "Title": ["JSON_UNQUOTE"], "Feature": ["JSON_UNQUOTE(val)\n"], "Description": ["Unquotes a JSON value, returning a string, or NULL if the argument is null. ", "An error will occur if the given value begins and ends with double quotes and is an invalid JSON string literal.", "If the given value is not a JSON string, value is passed through unmodified.", "Certain character sequences have special meanings within a string. Usually, a backslash is ignored, but the escape sequences in the table below are recognised by MariaDB, unless the SQL Mode is set to NO_BACKSLASH_ESCAPES SQL.", "Escape sequenceCharacter\n\\\"Double quote (\")\n\\bBackslash\n\\fFormfeed\n\\nNewline (linefeed)\n\\rCarriage return\n\\tTab\n\\\\Backslash (\\)\n\\uXXXXUTF-8 bytes for Unicode value XXXX\n\n"], "Examples": ["SELECT JSON_UNQUOTE('\"Monty\"');\n+-------------------------+\n| JSON_UNQUOTE('\"Monty\"') |\n+-------------------------+\n| Monty                   |\n+-------------------------+\n", "SELECT JSON_UNQUOTE('Si\\bng\\ting');\n+-----------------------------+\n| JSON_UNQUOTE('Si\\bng\\ting') |\n+-----------------------------+\n| Sng\ting                   |\n+-----------------------------+\n", "SET @@sql_mode = 'NO_BACKSLASH_ESCAPES';\n\nSELECT JSON_UNQUOTE('Si\\bng\\ting');\n+-----------------------------+\n| JSON_UNQUOTE('Si\\bng\\ting') |\n+-----------------------------+\n| Si\\bng\\ting                 |\n+-----------------------------+\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://mariadb.com//kb/en/json_valid/"], "Title": ["JSON_VALID"], "Feature": ["JSON_VALID(value)\n"], "Description": ["Indicates whether the given value is a valid JSON document or not. Returns 1 if valid, 0 if not, and NULL if the argument is NULL.", "From MariaDB 10.4.3, the JSON_VALID function is automatically used as a CHECK constraint for the JSON data type alias in order to ensure that a valid json document is inserted. "], "Examples": ["SELECT JSON_VALID('{\"id\": 1, \"name\": \"Monty\"}');\n+------------------------------------------+\n| JSON_VALID('{\"id\": 1, \"name\": \"Monty\"}') |\n+------------------------------------------+\n|                                        1 |\n+------------------------------------------+\n\nSELECT JSON_VALID('{\"id\": 1, \"name\": \"Monty\", \"oddfield\"}');\n+------------------------------------------------------+\n| JSON_VALID('{\"id\": 1, \"name\": \"Monty\", \"oddfield\"}') |\n+------------------------------------------------------+\n|                                                    0 |\n+------------------------------------------------------+\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://mariadb.com//kb/en/json_value/"], "Title": ["JSON_VALUE"], "Feature": ["JSON_VALUE(json_doc, path)\n"], "Description": ["Given a JSON document, returns the scalar specified by the path. Returns NULL if not given a valid JSON document, or if there is no match."], "Examples": ["select json_value('{\"key1\":123}', '$.key1');\n+--------------------------------------+\n| json_value('{\"key1\":123}', '$.key1') |\n+--------------------------------------+\n| 123                                  |\n+--------------------------------------+\n\nselect json_value('{\"key1\": [1,2,3], \"key1\":123}', '$.key1');\n+-------------------------------------------------------+\n| json_value('{\"key1\": [1,2,3], \"key1\":123}', '$.key1') |\n+-------------------------------------------------------+\n| 123                                                   |\n+-------------------------------------------------------+\n", "SET @json = '{\"key1\":\"60\\\\\" Table\", \"key2\":\"1\"}';\n\nSELECT JSON_VALUE(@json,'$.key1') AS Name , json_value(@json,'$.key2') as ID;\n+-----------+------+\n| Name      | ID   |\n+-----------+------+\n| 60\" Table | 1    |\n+-----------+------+\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://mariadb.com//kb/en/kdf/"], "Title": ["KDF"], "Feature": ["KDF(key_str, salt [, {info | iterations} [, kdf_name [, width ]]])\n"], "Description": ["KDF is a key derivation function, similar to OpenSSL's EVP_KDF_derive(). The purpose of a KDF is to be slow, so if the calculated value is lost/stolen, the original key_str is not achievable easily with modern GPU. KDFs are therefore an ideal replacement for password hashes. KDFs can also pad out a password secret to the number of bits used in encryption algorithms.", "For generating good encryption keys for AES_ENCRYPT a less expensive but cryptographically secure function like RANDOM_BYTES is recommended.", "kdf_name is \"hkdf\" or \"pbkdf2_hmac\" (default)\nwidth (in bits) can be any number divisible by 8, by default it's taken from @@block_encryption_mode\niterations must be positive, and is 1000 by default\n", "Note that OpenSSL 1.0 doesn't support HKDF, so in this case NULL is returned. This OpenSSL version is still used in SLES 12 and CentOS 7."], "Examples": ["select hex(kdf('foo', 'bar', 'infa', 'hkdf')); \n+----------------------------------------+\n| hex(kdf('foo', 'bar', 'infa', 'hkdf')) |\n+----------------------------------------+\n| 612875F859CFB4EE0DFEFF9F2A18E836       |\n+----------------------------------------+\n"], "Category": ["Encryption, Hashing and Compression Functions"]}
{"HTML": ["https://mariadb.com//kb/en/binlog_gtid_pos/"], "Title": ["BINLOG_GTID_POS"], "Feature": ["BINLOG_GTID_POS(binlog_filename,binlog_offset)\n"], "Description": ["The BINLOG_GTID_POS() function takes as input an old-style binary log position in the form of a file name and a file offset. It looks up the position in the current binlog, and returns a string representation of the corresponding GTID position. If the position is not found in the current binlog, NULL is returned."], "Examples": ["SELECT BINLOG_GTID_POS(\"master-bin.000001\", 600);\n"], "Category": ["Information Functions"]}
{"HTML": ["https://mariadb.com//kb/en/last_day/"], "Title": ["LAST_DAY"], "Feature": ["LAST_DAY(date)\n"], "Description": ["Takes a date or datetime value and returns the corresponding value for\nthe last day of the month. Returns NULL if the argument is invalid."], "Examples": ["SELECT LAST_DAY('2003-02-05');\n+------------------------+\n| LAST_DAY('2003-02-05') |\n+------------------------+\n| 2003-02-28             |\n+------------------------+\n\nSELECT LAST_DAY('2004-02-05');\n+------------------------+\n| LAST_DAY('2004-02-05') |\n+------------------------+\n| 2004-02-29             |\n+------------------------+\n\nSELECT LAST_DAY('2004-01-01 01:01:01');\n+---------------------------------+\n| LAST_DAY('2004-01-01 01:01:01') |\n+---------------------------------+\n| 2004-01-31                      |\n+---------------------------------+\n\nSELECT LAST_DAY('2003-03-32');\n+------------------------+\n| LAST_DAY('2003-03-32') |\n+------------------------+\n| NULL                   |\n+------------------------+\n1 row in set, 1 warning (0.00 sec)\n\nWarning (Code 1292): Incorrect datetime value: '2003-03-32'\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/last_insert_id/"], "Title": ["LAST_INSERT_ID"], "Feature": ["LAST_INSERT_ID(), LAST_INSERT_ID(expr)\n"], "Description": ["LAST_INSERT_ID() (no arguments) returns\nthe first automatically generated value successfully inserted for an\nAUTO_INCREMENT column as a result of the most recently executed INSERT\nstatement. The value of LAST_INSERT_ID() remains unchanged if no rows\nare successfully inserted.", "If one gives an argument to LAST_INSERT_ID(), then it will return the value of the expression and\nthe next call to LAST_INSERT_ID() will return the same value. The value will also be sent to the client\nand can be accessed by the mysql_insert_id function.", "For example, after inserting a row that generates an AUTO_INCREMENT\nvalue, you can get the value like this:", "SELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                9 |\n+------------------+\n", "You can also use LAST_INSERT_ID() to delete the last inserted row:", "DELETE FROM product WHERE id = LAST_INSERT_ID();\n", "If no rows were successfully inserted, LAST_INSERT_ID() returns 0.", "One can also use INSERT...RETURNING for this purpose.", "The value of LAST_INSERT_ID() will be consistent across all versions\nif all rows in the INSERT or UPDATE statement were successful.", "The currently executing statement does not affect the value of\nLAST_INSERT_ID(). Suppose that you generate an AUTO_INCREMENT value\nwith one statement, and then refer to LAST_INSERT_ID() in a\nmultiple-row INSERT statement that inserts rows into a table with its\nown AUTO_INCREMENT column. The value of LAST_INSERT_ID() will remain\nstable in the second statement; its value for the second and later\nrows is not affected by the earlier row insertions. (However, if you\nmix references to LAST_INSERT_ID() and LAST_INSERT_ID(expr), the\neffect is undefined.)", "If the previous statement returned an error, the value of\nLAST_INSERT_ID() is undefined. For transactional tables, if the\nstatement is rolled back due to an error, the value of\nLAST_INSERT_ID() is left undefined. For manual ROLLBACK, the value of\nLAST_INSERT_ID() is not restored to that before the transaction; it\nremains as it was at the point of the ROLLBACK.", "Within the body of a stored routine (procedure or function) or a\ntrigger, the value of LAST_INSERT_ID() changes the same way as for\nstatements executed outside the body of these kinds of objects. The\neffect of a stored routine or trigger upon the value of\nLAST_INSERT_ID() that is seen by following statements depends on the\nkind of routine:", "If a stored procedure executes statements that change the value of LAST_INSERT_ID(), the new value will be seen by statements that follow the procedure call.\n", "For stored functions and triggers that change the value, the value is restored when the function or trigger ends, so following statements will not see a changed value.\n"], "Examples": ["CREATE TABLE t (\n  id INTEGER UNSIGNED AUTO_INCREMENT PRIMARY KEY, \n  f VARCHAR(1)) \nENGINE = InnoDB;\n\nINSERT INTO t(f) VALUES('a');\n\nSELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                1 |\n+------------------+\n\nINSERT INTO t(f) VALUES('b');\n\nINSERT INTO t(f) VALUES('c');\n\nSELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                3 |\n+------------------+\n\nINSERT INTO t(f) VALUES('d'),('e');\n\nSELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                4 |\n+------------------+\n\nSELECT * FROM t;\n+----+------+\n| id | f    |\n+----+------+\n|  1 | a    |\n|  2 | b    |\n|  3 | c    |\n|  4 | d    |\n|  5 | e    |\n+----+------+\n\nSELECT LAST_INSERT_ID(12);\n+--------------------+\n| LAST_INSERT_ID(12) |\n+--------------------+\n|                 12 |\n+--------------------+\n\nSELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|               12 |\n+------------------+\n\nINSERT INTO t(f) VALUES('f');\n\nSELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                6 |\n+------------------+\n\nSELECT * FROM t;\n+----+------+\n| id | f    |\n+----+------+\n|  1 | a    |\n|  2 | b    |\n|  3 | c    |\n|  4 | d    |\n|  5 | e    |\n|  6 | f    |\n+----+------+\n\nSELECT LAST_INSERT_ID(12);\n+--------------------+\n| LAST_INSERT_ID(12) |\n+--------------------+\n|                 12 |\n+--------------------+\n\nINSERT INTO t(f) VALUES('g');\n\nSELECT * FROM t;\n+----+------+\n| id | f    |\n+----+------+\n|  1 | a    |\n|  2 | b    |\n|  3 | c    |\n|  4 | d    |\n|  5 | e    |\n|  6 | f    |\n|  7 | g    |\n+----+------+\n"], "Category": ["Information Functions"]}
{"HTML": ["https://mariadb.com//kb/en/last_value/"], "Title": ["LAST_VALUE"], "Feature": ["LAST_VALUE(expr,[expr,...])\n", "LAST_VALUE(expr) OVER (\n  [ PARTITION BY partition_expression ]\n  [ ORDER BY order_list ]\n) \n"], "Description": ["LAST_VALUE() evaluates all expressions and returns the last.", "This is useful together with setting user variables to a value with @var:=expr, for example when you want to get data of rows updated/deleted without having to do two queries against the table.", "LAST_VALUE can be used as a window function.", "Returns NULL if no last value exists."], "Examples": ["CREATE TABLE t1 (a int, b int);\nINSERT INTO t1 VALUES(1,10),(2,20);\nDELETE FROM t1 WHERE a=1 AND last_value(@a:=a,@b:=b,1);\nSELECT @a,@b;\n+------+------+\n| @a   | @b   |\n+------+------+\n|    1 |   10 |\n+------+------+\n", "CREATE TABLE t1 (\n  pk int primary key,\n  a int,\n  b int,\n  c char(10),\n  d decimal(10, 3),\n  e real\n);\n\nINSERT INTO t1 VALUES\n( 1, 0, 1,    'one',    0.1,  0.001),\n( 2, 0, 2,    'two',    0.2,  0.002),\n( 3, 0, 3,    'three',  0.3,  0.003),\n( 4, 1, 2,    'three',  0.4,  0.004),\n( 5, 1, 1,    'two',    0.5,  0.005),\n( 6, 1, 1,    'one',    0.6,  0.006),\n( 7, 2, NULL, 'n_one',  0.5,  0.007),\n( 8, 2, 1,    'n_two',  NULL, 0.008),\n( 9, 2, 2,    NULL,     0.7,  0.009),\n(10, 2, 0,    'n_four', 0.8,  0.010),\n(11, 2, 10,   NULL,     0.9,  NULL);\n\nSELECT pk, FIRST_VALUE(pk) OVER (ORDER BY pk) AS first_asc,\n           LAST_VALUE(pk) OVER (ORDER BY pk) AS last_asc,\n           FIRST_VALUE(pk) OVER (ORDER BY pk DESC) AS first_desc,\n           LAST_VALUE(pk) OVER (ORDER BY pk DESC) AS last_desc\nFROM t1\nORDER BY pk DESC;\n\n+----+-----------+----------+------------+-----------+\n| pk | first_asc | last_asc | first_desc | last_desc |\n+----+-----------+----------+------------+-----------+\n| 11 |         1 |       11 |         11 |        11 |\n| 10 |         1 |       10 |         11 |        10 |\n|  9 |         1 |        9 |         11 |         9 |\n|  8 |         1 |        8 |         11 |         8 |\n|  7 |         1 |        7 |         11 |         7 |\n|  6 |         1 |        6 |         11 |         6 |\n|  5 |         1 |        5 |         11 |         5 |\n|  4 |         1 |        4 |         11 |         4 |\n|  3 |         1 |        3 |         11 |         3 |\n|  2 |         1 |        2 |         11 |         2 |\n|  1 |         1 |        1 |         11 |         1 |\n+----+-----------+----------+------------+-----------+\n", "CREATE OR REPLACE TABLE t1 (i int);\nINSERT INTO t1 VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10);\n\nSELECT i,\n  FIRST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW and 1 FOLLOWING) AS f_1f,\n  LAST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW and 1 FOLLOWING) AS l_1f,\n  FIRST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS f_1p1f,\n  LAST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS l_1p1f,\n  FIRST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 2 PRECEDING AND 1 PRECEDING) AS f_2p1p,\n  LAST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 2 PRECEDING AND 1 PRECEDING) AS l_2p1p,\n  FIRST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 1 FOLLOWING AND 2 FOLLOWING) AS f_1f2f,\n  LAST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 1 FOLLOWING AND 2 FOLLOWING) AS l_1f2f\nFROM t1;\n\n+------+------+------+--------+--------+--------+--------+--------+--------+\n| i    | f_1f | l_1f | f_1p1f | l_1p1f | f_2p1p | l_2p1p | f_1f2f | l_1f2f |\n+------+------+------+--------+--------+--------+--------+--------+--------+\n|    1 |    1 |    2 |      1 |      2 |   NULL |   NULL |      2 |      3 |\n|    2 |    2 |    3 |      1 |      3 |      1 |      1 |      3 |      4 |\n|    3 |    3 |    4 |      2 |      4 |      1 |      2 |      4 |      5 |\n|    4 |    4 |    5 |      3 |      5 |      2 |      3 |      5 |      6 |\n|    5 |    5 |    6 |      4 |      6 |      3 |      4 |      6 |      7 |\n|    6 |    6 |    7 |      5 |      7 |      4 |      5 |      7 |      8 |\n|    7 |    7 |    8 |      6 |      8 |      5 |      6 |      8 |      9 |\n|    8 |    8 |    9 |      7 |      9 |      6 |      7 |      9 |     10 |\n|    9 |    9 |   10 |      8 |     10 |      7 |      8 |     10 |     10 |\n|   10 |   10 |   10 |      9 |     10 |      8 |      9 |   NULL |   NULL |\n+------+------+------+--------+--------+--------+--------+--------+--------+\n"], "Category": ["Information Functions"]}
{"HTML": ["https://mariadb.com//kb/en/lcase/"], "Title": ["LCASE"], "Feature": ["LCASE(str)\n"], "Description": ["LCASE() is a synonym for LOWER()."], "Examples": [], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/left/"], "Title": ["LEFT"], "Feature": ["LEFT(str,len)\n"], "Description": ["Returns the leftmost len characters from the string str, or NULL if\nany argument is NULL."], "Examples": ["SELECT LEFT('MariaDB', 5);\n+--------------------+\n| LEFT('MariaDB', 5) |\n+--------------------+\n| Maria              |\n+--------------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/length/"], "Title": ["LENGTH"], "Feature": ["LENGTH(str)\n"], "Description": ["Returns the length of the string str.", "In the default mode, when Oracle mode from MariaDB 10.3 is not set, the length is measured in bytes. In this case, a multi-byte character counts as multiple bytes. This means that for a string\ncontaining five two-byte characters, LENGTH() returns 10, whereas CHAR_LENGTH() returns 5. ", "When running Oracle mode from MariaDB 10.3, the length is measured in characters, and LENGTH is a synonym for CHAR_LENGTH().", "If str is not a string value, it is converted into a string. If str is NULL, the function returns NULL."], "Examples": ["SELECT LENGTH('MariaDB');\n+-------------------+\n| LENGTH('MariaDB') |\n+-------------------+\n|                 7 |\n+-------------------+\n", "SELECT CHAR_LENGTH('\u03c0'), LENGTH('\u03c0'), LENGTHB('\u03c0'), OCTET_LENGTH('\u03c0');\n+-------------------+--------------+---------------+--------------------+\n| CHAR_LENGTH('\u03c0')  | LENGTH('\u03c0')  | LENGTHB('\u03c0')  | OCTET_LENGTH('\u03c0')  |\n+-------------------+--------------+---------------+--------------------+\n|                 1 |            2 |             2 |                  2 |\n+-------------------+--------------+---------------+--------------------+\n", "SELECT CHAR_LENGTH('\u03c0'), LENGTH('\u03c0'), LENGTHB('\u03c0'), OCTET_LENGTH('\u03c0');\n+-------------------+--------------+---------------+--------------------+\n| CHAR_LENGTH('\u03c0')  | LENGTH('\u03c0')  | LENGTHB('\u03c0')  | OCTET_LENGTH('\u03c0')  |\n+-------------------+--------------+---------------+--------------------+\n|                 1 |            1 |             2 |                  2 |\n+-------------------+--------------+---------------+--------------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/like/"], "Title": ["LIKE"], "Feature": ["expr LIKE pat [ESCAPE 'escape_char']\nexpr NOT LIKE pat [ESCAPE 'escape_char']\n"], "Description": ["Tests whether expr matches the pattern pat. Returns either 1 (TRUE) or 0 (FALSE).\nBoth expr and pat may be any valid expression and are evaluated to strings.\nPatterns may use the following wildcard characters:", "% matches any number of characters, including zero.\n_ matches any single character.\n", "Use NOT LIKE to test if a string does not match a pattern. This is equivalent to using\nthe NOT operator on the entire LIKE expression.", "If either the expression or the pattern is NULL, the result is NULL.", "LIKE performs case-insensitive substring matches if the collation for the\nexpression and pattern is case-insensitive. For case-sensitive matches, declare either argument\nto use a binary collation using COLLATE, or coerce either of them to a BINARY\nstring using CAST. Use SHOW COLLATION to get a list of\navailable collations. Collations ending in _bin are case-sensitive.", "Numeric arguments are coerced to binary strings.", "The _ wildcard matches a single character, not byte. It will only match a multi-byte character\nif it is valid in the expression's character set. For example, _ will match _utf8\"\u20ac\", but it\nwill not match _latin1\"\u20ac\" because the Euro sign is not a valid latin1 character. If necessary,\nuse CONVERT to use the expression in a different character set.", "If you need to match the characters _ or %, you must escape them. By default,\nyou can prefix the wildcard characters the backslash character \\ to escape them.\nThe backslash is used both to encode special characters like newlines when a string is\nparsed as well as to escape wildcards in a pattern after parsing. Thus, to match an\nactual backslash, you sometimes need to double-escape it as \"\\\\\\\\\".", "To avoid difficulties with the backslash character, you can change the wildcard escape\ncharacter using ESCAPE in a LIKE expression. The argument to ESCAPE\nmust be a single-character string."], "Examples": ["CREATE TABLE t1 (d VARCHAR(16));\nINSERT INTO t1 VALUES \n  (\"Monday\"), (\"Tuesday\"), (\"Wednesday\"), \n  (\"Thursday\"), (\"Friday\"), (\"Saturday\"), (\"Sunday\");\nSELECT * FROM t1 WHERE d LIKE \"T%\";\n", "SELECT * FROM t1 WHERE d LIKE \"T%\";\n+----------+\n| d        |\n+----------+\n| Tuesday  |\n| Thursday |\n+----------+\n", "SELECT * FROM t1 WHERE d LIKE \"%es%\";\n", "SELECT * FROM t1 WHERE d LIKE \"%es%\";\n+-----------+\n| d         |\n+-----------+\n| Tuesday   |\n| Wednesday |\n+-----------+\n", "SELECT * FROM t1 WHERE d like \"___day\";\n", "SELECT * FROM t1 WHERE d like \"___day\";\n+---------+\n| d       |\n+---------+\n| Monday  |\n| Friday  |\n| Sunday  |\n+---------+\n", "SELECT * FROM t1 where d like \"t%\";\n", "SELECT * FROM t1 where d like \"t%\";\n+----------+\n| d        |\n+----------+\n| Tuesday  |\n| Thursday |\n+----------+\n", "SELECT * FROM t1 WHERE d like \"t%\" COLLATE latin1_bin;\n", "SELECT * FROM t1 WHERE d like \"t%\" COLLATE latin1_bin;\nEmpty set (0.00 sec)\n", "CREATE TABLE t2 (d DATETIME);\nINSERT INTO t2 VALUES\n    (\"2007-01-30 21:31:07\"),\n    (\"1983-10-15 06:42:51\"),\n    (\"2011-04-21 12:34:56\"),\n    (\"2011-10-30 06:31:41\"),\n    (\"2011-01-30 14:03:25\"),\n    (\"2004-10-07 11:19:34\");\nSELECT * FROM t2 WHERE DAYNAME(d) LIKE \"T%\";\n", "SELECT * FROM t2 WHERE DAYNAME(d) LIKE \"T%\";\n+------------------+\n| d                |\n+------------------+\n| 2007-01-30 21:31 |\n| 2011-04-21 12:34 |\n| 2004-10-07 11:19 |\n+------------------+\n3 rows in set, 7 warnings (0.00 sec)\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/linestring/"], "Title": ["LINESTRING"], "Feature": ["LineString(pt1,pt2,...)\n"], "Description": ["Constructs a WKB LineString value from a number of WKB Point arguments.  If any argument is not a WKB Point, the return value is\nNULL. If the number of Point arguments is less than two, the return value is NULL."], "Examples": ["SET @ls = 'LineString(1 1,2 2,3 3)';\n\nSELECT AsText(EndPoint(GeomFromText(@ls)));\n+-------------------------------------+\n| AsText(EndPoint(GeomFromText(@ls))) |\n+-------------------------------------+\n| POINT(3 3)                          |\n+-------------------------------------+\n\nCREATE TABLE gis_line  (g LINESTRING);\nINSERT INTO gis_line VALUES\n    (LineFromText('LINESTRING(0 0,0 10,10 0)')),\n    (LineStringFromText('LINESTRING(10 10,20 10,20 20,10 20,10 10)')),\n    (LineStringFromWKB(AsWKB(LineString(Point(10, 10), Point(40, 10)))));\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/list_add/"], "Title": ["list_add"], "Feature": ["sys.list_add(list,value)\n"], "Description": ["list_add is a stored function available with the Sys Schema.", "It takes a list to be be modified and a value to be added to the list, returning the resulting value. This can be used, for example, to add a value to a system variable taking a comma-delimited list of options, such as sql_mode.", "The related function list_drop can be used to drop a value from a list."], "Examples": ["SELECT @@sql_mode;\n+-----------------------------------------------------------------------+\n| @@sql_mode                                                            |\n+-----------------------------------------------------------------------+\n| STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,\nNO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION |\n+-----------------------------------------------------------------------+\n\nSET @@sql_mode = sys.list_add(@@sql_mode, 'NO_ZERO_DATE');\n\nSELECT @@sql_mode;\n+-----------------------------------------------------------------------+\n| @@sql_mode                                                            |\n+-----------------------------------------------------------------------+\n| STRICT_TRANS_TABLES,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,\nNO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION |\n+-----------------------------------------------------------------------+\n"], "Category": ["No Category"]}
{"HTML": ["https://mariadb.com//kb/en/list_drop/"], "Title": ["list_drop"], "Feature": ["sys.list_drop(list,value)\n"], "Description": ["list_drop is a stored function available with the Sys Schema.", "It takes a list to be be modified and a value to be dropped from the list, returning the resulting value. This can be used, for example, to remove a value from a system variable taking a comma-delimited list of options, such as sql_mode.", "The related function list_add can be used to add a value to a list."], "Examples": ["SELECT @@sql_mode;\n+-----------------------------------------------------------------------+\n| @@sql_mode                                                            |\n+-----------------------------------------------------------------------+\n| STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,\nNO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION |\n+-----------------------------------------------------------------------+\n\nSET @@sql_mode = sys.list_drop(@@sql_mode, 'NO_ENGINE_SUBSTITUTION');\n\nSELECT @@sql_mode;\n+-----------------------------------------------------------------------+\n| @@sql_mode                                                            |\n+-----------------------------------------------------------------------+\n| STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,\nNO_AUTO_CREATE_USER |\n+-----------------------------------------------------------------------+\n"], "Category": ["No Category"]}
{"HTML": ["https://mariadb.com//kb/en/bit_and/"], "Title": ["BIT_AND"], "Feature": ["BIT_AND(expr) [over_clause]\n"], "Description": ["Returns the bitwise AND of all bits in expr. The calculation is performed with 64-bit (BIGINT) precision. It is an aggregate function, and so can be used with the GROUP BY clause.", "If no rows match, BIT_AND will return a value with all bits set to 1. NULL values have no effect on the result unless all results are NULL, which is treated as no match.", "BIT_AND can be used as a window function with the addition of the over_clause."], "Examples": ["CREATE TABLE vals (x INT);\n\nINSERT INTO vals VALUES(111),(110),(100);\n\nSELECT BIT_AND(x), BIT_OR(x), BIT_XOR(x) FROM vals;\n+------------+-----------+------------+\n| BIT_AND(x) | BIT_OR(x) | BIT_XOR(x) |\n+------------+-----------+------------+\n|        100 |       111 |        101 |\n+------------+-----------+------------+\n", "CREATE TABLE vals2 (category VARCHAR(1), x INT);\n\nINSERT INTO vals2 VALUES\n  ('a',111),('a',110),('a',100),\n  ('b','000'),('b',001),('b',011);\n\nSELECT category, BIT_AND(x), BIT_OR(x), BIT_XOR(x) \n  FROM vals GROUP BY category;\n+----------+------------+-----------+------------+\n| category | BIT_AND(x) | BIT_OR(x) | BIT_XOR(x) |\n+----------+------------+-----------+------------+\n| a        |        100 |       111 |        101 |\n| b        |          0 |        11 |         10 |\n+----------+------------+-----------+------------+\n", "SELECT BIT_AND(NULL);\n+----------------------+\n| BIT_AND(NULL)        |\n+----------------------+\n| 18446744073709551615 |\n+----------------------+\n"], "Category": ["Aggregate Functions"]}
{"HTML": ["https://mariadb.com//kb/en/ln/"], "Title": ["LN"], "Feature": ["LN(X)\n"], "Description": ["Returns the natural logarithm of X; that is, the base-e logarithm of X.\nIf X is less than or equal to 0, or NULL, then NULL is returned.", "The inverse of this function is EXP()."], "Examples": ["SELECT LN(2);\n+-------------------+\n| LN(2)             |\n+-------------------+\n| 0.693147180559945 |\n+-------------------+\n\nSELECT LN(-2);\n+--------+\n| LN(-2) |\n+--------+\n|   NULL |\n+--------+\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://mariadb.com//kb/en/load_file/"], "Title": ["LOAD_FILE"], "Feature": ["LOAD_FILE(file_name)\n"], "Description": ["Reads the file and returns the file contents as a string. To use this function, the file must be located on the server host, you must specify the full path name to the file, and you must have the FILE privilege.  The file must be readable by all and it must be less than the size, in bytes, of the max_allowed_packet system variable. If the secure_file_priv system variable is set to a non-empty directory name, the file to be loaded must be located in that directory.", "If the file does not exist or cannot be read because one of the preceding conditions is not satisfied, the function returns NULL.", "Since MariaDB 5.1, the character_set_filesystem system variable has controlled interpretation of file names that are given as literal strings.", "Statements using the LOAD_FILE() function are not safe for statement based replication. This is because the slave will execute the LOAD_FILE() command itself.  If the file doesn't exist on the slave, the function will return NULL."], "Examples": ["UPDATE t SET blob_col=LOAD_FILE('/tmp/picture') WHERE id=1;\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/localtime/"], "Title": ["LOCALTIME"], "Feature": ["LOCALTIME\nLOCALTIME([precision])\n"], "Description": ["LOCALTIME and LOCALTIME() are synonyms for NOW()."], "Examples": [], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/localtimestamp/"], "Title": ["LOCALTIMESTAMP"], "Feature": ["LOCALTIMESTAMP\nLOCALTIMESTAMP([precision])\n"], "Description": ["LOCALTIMESTAMP and LOCALTIMESTAMP() are synonyms for NOW()."], "Examples": [], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/locate/"], "Title": ["LOCATE"], "Feature": ["LOCATE(substr,str), LOCATE(substr,str,pos)\n"], "Description": ["The first syntax returns the position of the first occurrence of\nsubstring substr in string str. The second syntax returns the position\nof the first occurrence of substring substr in string str, starting at\nposition pos. Returns 0 if substr is not in str.", "LOCATE() performs a case-insensitive search.", "If any argument is NULL, returns NULL.", "INSTR() is the same as the two-argument form of LOCATE(), except that the order of the arguments is reversed."], "Examples": ["SELECT LOCATE('bar', 'foobarbar');\n+----------------------------+\n| LOCATE('bar', 'foobarbar') |\n+----------------------------+\n|                          4 |\n+----------------------------+\n\nSELECT LOCATE('My', 'Maria');\n+-----------------------+\n| LOCATE('My', 'Maria') |\n+-----------------------+\n|                     0 |\n+-----------------------+\n\nSELECT LOCATE('bar', 'foobarbar', 5);\n+-------------------------------+\n| LOCATE('bar', 'foobarbar', 5) |\n+-------------------------------+\n|                             7 |\n+-------------------------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/log/"], "Title": ["LOG"], "Feature": ["LOG(X), LOG(B,X)\n"], "Description": ["If called with one parameter, this function returns the natural\nlogarithm of X. If X is less than or equal to 0, then NULL is\nreturned.", "If called with two parameters, it returns the logarithm of X to the base B. If  B is <= 1 or X <= 0, the function returns NULL.", "If any argument is NULL, the function returns NULL.", "The inverse of this function (when called with a single argument) is\nthe EXP() function."], "Examples": ["SELECT LOG(2);\n+-------------------+\n| LOG(2)            |\n+-------------------+\n| 0.693147180559945 |\n+-------------------+\n\nSELECT LOG(-2);\n+---------+\n| LOG(-2) |\n+---------+\n|    NULL |\n+---------+\n", "SELECT LOG(2,16);\n+-----------+\n| LOG(2,16) |\n+-----------+\n|         4 |\n+-----------+\n\nSELECT LOG(3,27);\n+-----------+\n| LOG(3,27) |\n+-----------+\n|         3 |\n+-----------+\n\nSELECT LOG(3,1);\n+----------+\n| LOG(3,1) |\n+----------+\n|        0 |\n+----------+\n\nSELECT LOG(3,0);\n+----------+\n| LOG(3,0) |\n+----------+\n|     NULL |\n+----------+\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://mariadb.com//kb/en/log10/"], "Title": ["LOG10"], "Feature": ["LOG10(X)\n"], "Description": ["Returns the base-10 logarithm of X."], "Examples": ["SELECT LOG10(2);\n+-------------------+\n| LOG10(2)          |\n+-------------------+\n| 0.301029995663981 |\n+-------------------+\n\nSELECT LOG10(100);\n+------------+\n| LOG10(100) |\n+------------+\n|          2 |\n+------------+\n\nSELECT LOG10(-100);\n+-------------+\n| LOG10(-100) |\n+-------------+\n|        NULL |\n+-------------+\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://mariadb.com//kb/en/log2/"], "Title": ["LOG2"], "Feature": ["LOG2(X)\n"], "Description": ["Returns the base-2 logarithm of X."], "Examples": ["SELECT LOG2(4398046511104);\n+---------------------+\n| LOG2(4398046511104) |\n+---------------------+\n|                  42 |\n+---------------------+\n\nSELECT LOG2(65536);\n+-------------+\n| LOG2(65536) |\n+-------------+\n|          16 |\n+-------------+\n\nSELECT LOG2(-100);\n+------------+\n| LOG2(-100) |\n+------------+\n|       NULL |\n+------------+\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://mariadb.com//kb/en/lower/"], "Title": ["LOWER"], "Feature": ["LOWER(str)\nLCASE(str)\n"], "Description": ["Returns the string str with all characters changed to lowercase\naccording to the current character set mapping. The default is latin1\n(cp1252 West European).", "LCASE is a synonym for LOWER"], "Examples": [" SELECT LOWER('QUADRATICALLY');\n+------------------------+\n| LOWER('QUADRATICALLY') |\n+------------------------+\n| quadratically          |\n+------------------------+\n", "SET @str = BINARY 'North Carolina';\n\nSELECT LOWER(@str), LOWER(CONVERT(@str USING latin1));\n+----------------+-----------------------------------+\n| LOWER(@str)    | LOWER(CONVERT(@str USING latin1)) |\n+----------------+-----------------------------------+\n| North Carolina | north carolina                    |\n+----------------+-----------------------------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/lpad/"], "Title": ["LPAD"], "Feature": ["LPAD(str, len [,padstr])\n"], "Description": ["Returns the string str, left-padded with the string padstr to a length\nof len characters. If str is longer than len, the return value is\nshortened to len characters. If padstr is omitted, the LPAD function pads spaces.", "Prior to MariaDB 10.3.1, the padstr parameter was mandatory.", "Returns NULL if given a NULL argument. If the result is empty (zero length), returns either an empty string or, from MariaDB 10.3.6 with SQL_MODE=Oracle, NULL.", "The Oracle mode version of the function can be accessed outside of Oracle mode by using LPAD_ORACLE as the function name."], "Examples": ["SELECT LPAD('hello',10,'.');\n+----------------------+\n| LPAD('hello',10,'.') |\n+----------------------+\n| .....hello           |\n+----------------------+\n\nSELECT LPAD('hello',2,'.');\n+---------------------+\n| LPAD('hello',2,'.') |\n+---------------------+\n| he                  |\n+---------------------+\n", "SELECT LPAD('hello',10);\n+------------------+\n| LPAD('hello',10) |\n+------------------+\n|      hello       |\n+------------------+\n", "SELECT LPAD('',0),LPAD_ORACLE('',0);\n+------------+-------------------+\n| LPAD('',0) | LPAD_ORACLE('',0) |\n+------------+-------------------+\n|            | NULL              |\n+------------+-------------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/bit_length/"], "Title": ["BIT_LENGTH"], "Feature": ["BIT_LENGTH(str)\n"], "Description": ["Returns the length of the given string argument in bits. If the argument is not a string, it will be converted to string. If the argument is NULL, it returns NULL."], "Examples": ["SELECT BIT_LENGTH('text');\n+--------------------+\n| BIT_LENGTH('text') |\n+--------------------+\n|                 32 |\n+--------------------+\n", "SELECT BIT_LENGTH('');\n+----------------+\n| BIT_LENGTH('') |\n+----------------+\n|              0 |\n+----------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/ltrim/"], "Title": ["LTRIM"], "Feature": ["LTRIM(str)\n"], "Description": ["Returns the string str with leading space characters removed.", "Returns NULL if given a NULL argument. If the result is empty, returns either an empty string, or, from MariaDB 10.3.6 with SQL_MODE=Oracle, NULL.", "The Oracle mode version of the function can be accessed outside of Oracle mode by using LTRIM_ORACLE as the function name."], "Examples": ["SELECT QUOTE(LTRIM('   MariaDB   '));\n+-------------------------------+\n| QUOTE(LTRIM('   MariaDB   ')) |\n+-------------------------------+\n| 'MariaDB   '                  |\n+-------------------------------+\n", "SELECT LTRIM(''),LTRIM_ORACLE('');\n+-----------+------------------+\n| LTRIM('') | LTRIM_ORACLE('') |\n+-----------+------------------+\n|           | NULL             |\n+-----------+------------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/makedate/"], "Title": ["MAKEDATE"], "Feature": ["MAKEDATE(year,dayofyear)\n"], "Description": ["Returns a date, given year and day-of-year values. dayofyear must be\ngreater than 0 or the result is NULL."], "Examples": ["SELECT MAKEDATE(2011,31), MAKEDATE(2011,32);\n+-------------------+-------------------+\n| MAKEDATE(2011,31) | MAKEDATE(2011,32) |\n+-------------------+-------------------+\n| 2011-01-31        | 2011-02-01        |\n+-------------------+-------------------+\n\nSELECT MAKEDATE(2011,365), MAKEDATE(2014,365);\n+--------------------+--------------------+\n| MAKEDATE(2011,365) | MAKEDATE(2014,365) |\n+--------------------+--------------------+\n| 2011-12-31         | 2014-12-31         |\n+--------------------+--------------------+\n\nSELECT MAKEDATE(2011,0);\n+------------------+\n| MAKEDATE(2011,0) |\n+------------------+\n| NULL             |\n+------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/maketime/"], "Title": ["MAKETIME"], "Feature": ["MAKETIME(hour,minute,second)\n"], "Description": ["Returns a time value calculated from the hour, minute, and second arguments.", "If minute or second are out of the range 0 to 60, NULL is returned. The hour can be in the range -838 to 838, outside of which the value is truncated with a warning."], "Examples": ["SELECT MAKETIME(13,57,33);\n+--------------------+\n| MAKETIME(13,57,33) |\n+--------------------+\n| 13:57:33           |\n+--------------------+\n\nSELECT MAKETIME(-13,57,33);\n+---------------------+\n| MAKETIME(-13,57,33) |\n+---------------------+\n| -13:57:33           |\n+---------------------+\n\nSELECT MAKETIME(13,67,33);\n+--------------------+\n| MAKETIME(13,67,33) |\n+--------------------+\n| NULL               |\n+--------------------+\n\nSELECT MAKETIME(-1000,57,33);\n+-----------------------+\n| MAKETIME(-1000,57,33) |\n+-----------------------+\n| -838:59:59            |\n+-----------------------+\n1 row in set, 1 warning (0.00 sec)\n\nSHOW WARNINGS;\n+---------+------+-----------------------------------------------+\n| Level   | Code | Message                                       |\n+---------+------+-----------------------------------------------+\n| Warning | 1292 | Truncated incorrect time value: '-1000:57:33' |\n+---------+------+-----------------------------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/make_set/"], "Title": ["MAKE_SET"], "Feature": ["MAKE_SET(bits,str1,str2,...)\n"], "Description": ["Returns a set value (a string containing substrings separated by \",\"\ncharacters) consisting of the strings that have the corresponding bit\nin bits set. str1 corresponds to bit 0, str2 to bit 1, and so on. NULL\nvalues in str1, str2, ... are not appended to the result."], "Examples": ["SELECT MAKE_SET(1,'a','b','c');\n+-------------------------+\n| MAKE_SET(1,'a','b','c') |\n+-------------------------+\n| a                       |\n+-------------------------+\n\nSELECT MAKE_SET(1 | 4,'hello','nice','world');\n+----------------------------------------+\n| MAKE_SET(1 | 4,'hello','nice','world') |\n+----------------------------------------+\n| hello,world                            |\n+----------------------------------------+\n\nSELECT MAKE_SET(1 | 4,'hello','nice',NULL,'world');\n+---------------------------------------------+\n| MAKE_SET(1 | 4,'hello','nice',NULL,'world') |\n+---------------------------------------------+\n| hello                                       |\n+---------------------------------------------+\n\nSELECT QUOTE(MAKE_SET(0,'a','b','c'));\n+--------------------------------+\n| QUOTE(MAKE_SET(0,'a','b','c')) |\n+--------------------------------+\n| ''                             |\n+--------------------------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/master_gtid_wait/"], "Title": ["MASTER_GTID_WAIT"], "Feature": ["MASTER_GTID_WAIT(gtid-list[, timeout)\n"], "Description": ["This function takes a string containing a comma-separated list of global transaction id's\n(similar to the value of, for example, gtid_binlog_pos). It waits until the value of gtid_slave_pos has the same or higher seq_no within all replication domains specified in the gtid-list; in other words, it waits until the slave has\nreached the specified GTID position.", "An optional second argument gives a timeout in seconds. If the timeout\nexpires before the specified GTID position is reached, then the function\nreturns -1. Passing NULL or a negative number for the timeout means no timeout, and the function will wait indefinitely.", " If the wait completes without a timeout, 0 is returned. Passing NULL for the\n gtid-list makes the function return NULL immediately, without waiting.", "The gtid-list may be the empty string, in which case MASTER_GTID_WAIT()\nreturns immediately. If the gtid-list contains fewer domains than\ngtid_slave_pos, then only those domains are waited upon. If gtid-list\ncontains a domain that is not present in @@gtid_slave_pos, then\nMASTER_GTID_WAIT() will wait until an event containing such domain_id arrives\non the slave (or until timed out or killed).", "MASTER_GTID_WAIT() can be useful to ensure that a slave has caught up to\na master. Simply take the value of gtid_binlog_pos on the master, and use it in a MASTER_GTID_WAIT() call on the slave; when the call completes, the slave\nwill have caught up with that master position.", "MASTER_GTID_WAIT() can also be used in client applications together with the\nlast_gtid session variable. This is useful in a read-scaleout replication setup, where the application writes to a single master but divides the\nreads out to a number of slaves to distribute the load. In such a setup, there\nis a risk that an application could first do an update on the master, and then\na bit later do a read on a slave, and if the slave is not fast enough, the\ndata read from the slave might not include the update just made, possibly\nconfusing the application and/or the end-user. One way to avoid this is to\nrequest the value of last_gtid on the master just after the update. Then\nbefore doing the read on the slave, do a MASTER_GTID_WAIT() on the value\nobtained from the master; this will ensure that the read is not performed\nuntil the slave has replicated sufficiently far for the update to have become\nvisible.", "Note that MASTER_GTID_WAIT() can be used even if the slave is configured not\nto use GTID for connections (CHANGE MASTER TO master_use_gtid=no). This is\nbecause from MariaDB 10, GTIDs are always logged on the master server, and\nalways recorded on the slave servers."], "Examples": [], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://mariadb.com//kb/en/master_pos_wait/"], "Title": ["MASTER_POS_WAIT"], "Feature": ["MASTER_POS_WAIT(log_name,log_pos[,timeout,[\"connection_name\"]])\n"], "Description": ["This function is useful in replication for controlling primary/replica synchronization.  It blocks until the replica has read and applied all updates up to the specified position (log_name,log_pos) in the primary log. The return value is the number of log events the replica had to wait for to advance to the specified position. The function returns NULL if\nthe replica SQL thread is not started, the replica's primary information is not\ninitialized, the arguments are incorrect, or an error occurs. It returns -1 if\nthe timeout has been exceeded. If the replica SQL thread stops while\n MASTER_POS_WAIT() is waiting, the function returns NULL. If\nthe replica is past the specified position, the function returns immediately.", "If a timeout value is specified, MASTER_POS_WAIT() stops\nwaiting when timeout seconds have elapsed. timeout must be greater than 0; a\nzero or negative timeout means no timeout.", "The connection_name is used when you are using multi-source-replication.  If you don't specify it, it's set to the value of the default_master_connection system variable.", "Statements using the MASTER_POS_WAIT() function are not safe for statement-based replication."], "Examples": [], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://mariadb.com//kb/en/match-against/"], "Title": ["MATCH AGAINST"], "Feature": ["MATCH (col1,col2,...) AGAINST (expr [search_modifier])\n"], "Description": ["A special construct used to perform a fulltext search on a fulltext index.", "See Fulltext Index Overview for a full description, and Full-text Indexes for more articles on the topic."], "Examples": ["CREATE TABLE ft_myisam(copy TEXT,FULLTEXT(copy)) ENGINE=MyISAM;\n\nINSERT INTO ft_myisam(copy) VALUES ('Once upon a time'), ('There was a wicked witch'), \n ('Who ate everybody up');\n\nSELECT * FROM ft_myisam WHERE MATCH(copy) AGAINST('wicked');\n+--------------------------+\n| copy                     |\n+--------------------------+\n| There was a wicked witch |\n+--------------------------+\n", "SELECT id, body, MATCH (title,body) AGAINST\n    ('Security implications of running MySQL as root'\n    IN NATURAL LANGUAGE MODE) AS score\n    FROM articles WHERE MATCH (title,body) AGAINST\n    ('Security implications of running MySQL as root'\n    IN NATURAL LANGUAGE MODE);\n+----+-------------------------------------+-----------------+\n| id | body                                | score           |\n+----+-------------------------------------+-----------------+\n|  4 | 1. Never run mysqld as root. 2. ... | 1.5219271183014 |\n|  6 | When configured properly, MySQL ... | 1.3114095926285 |\n+----+-------------------------------------+-----------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/max/"], "Title": ["MAX"], "Feature": ["MAX([DISTINCT] expr)\n"], "Description": ["Returns the largest, or maximum, value of expr. MAX() can also take a string\nargument in which case it returns the maximum string value. The DISTINCT\nkeyword can be used to find the maximum of the distinct values of expr,\nhowever, this produces the same result as omitting DISTINCT.", "Note that SET and ENUM fields are currently compared by their string value rather than their relative position in the set, so MAX() may produce a different highest result than ORDER BY DESC.", "It is an aggregate function, and so can be used with the GROUP BY clause.", "MAX() can be used as a window function.", "MAX() returns NULL if there were no matching rows."], "Examples": ["CREATE TABLE student (name CHAR(10), test CHAR(10), score TINYINT); \n\nINSERT INTO student VALUES \n  ('Chun', 'SQL', 75), ('Chun', 'Tuning', 73), \n  ('Esben', 'SQL', 43), ('Esben', 'Tuning', 31), \n  ('Kaolin', 'SQL', 56), ('Kaolin', 'Tuning', 88), \n  ('Tatiana', 'SQL', 87), ('Tatiana', 'Tuning', 83);\n\nSELECT name, MAX(score) FROM student GROUP BY name;\n+---------+------------+\n| name    | MAX(score) |\n+---------+------------+\n| Chun    |         75 |\n| Esben   |         43 |\n| Kaolin  |         88 |\n| Tatiana |         87 |\n+---------+------------+\n", "SELECT MAX(name) FROM student;\n+-----------+\n| MAX(name) |\n+-----------+\n| Tatiana   |\n+-----------+\n", "SELECT name,test,MAX(SCORE) FROM student;\n+------+------+------------+\n| name | test | MAX(SCORE) |\n+------+------+------------+\n| Chun | SQL  |         88 |\n+------+------+------------+\n", "CREATE TABLE student2(name CHAR(10),grade ENUM('b','c','a'));\n\nINSERT INTO student2 VALUES('Chun','b'),('Esben','c'),('Kaolin','a');\n\nSELECT MAX(grade) FROM student2;\n+------------+\n| MAX(grade) |\n+------------+\n| c          |\n+------------+\n\nSELECT grade FROM student2 ORDER BY grade DESC LIMIT 1;\n+-------+\n| grade |\n+-------+\n| a     |\n+-------+\n", "CREATE OR REPLACE TABLE student_test (name CHAR(10), test CHAR(10), score TINYINT);\nINSERT INTO student_test VALUES \n    ('Chun', 'SQL', 75), ('Chun', 'Tuning', 73), \n    ('Esben', 'SQL', 43), ('Esben', 'Tuning', 31), \n    ('Kaolin', 'SQL', 56), ('Kaolin', 'Tuning', 88), \n    ('Tatiana', 'SQL', 87);\n\nSELECT name, test, score, MAX(score) \n  OVER (PARTITION BY name) AS highest_score FROM student_test;\n+---------+--------+-------+---------------+\n| name    | test   | score | highest_score |\n+---------+--------+-------+---------------+\n| Chun    | SQL    |    75 |            75 |\n| Chun    | Tuning |    73 |            75 |\n| Esben   | SQL    |    43 |            43 |\n| Esben   | Tuning |    31 |            43 |\n| Kaolin  | SQL    |    56 |            88 |\n| Kaolin  | Tuning |    88 |            88 |\n| Tatiana | SQL    |    87 |            87 |\n+---------+--------+-------+---------------+\n"], "Category": ["Aggregate Functions"]}
{"HTML": ["https://mariadb.com//kb/en/mbrcontains/"], "Title": ["MBRContains"], "Feature": ["MBRContains(g1,g2)\n"], "Description": ["Returns 1 or 0 to indicate whether the Minimum Bounding Rectangle of\ng1 contains the Minimum Bounding Rectangle of g2. This tests the\nopposite relationship as MBRWithin()."], "Examples": ["SET @g1 = GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\n\nSET @g2 = GeomFromText('Point(1 1)');\n\nSELECT MBRContains(@g1,@g2), MBRContains(@g2,@g1);\n+----------------------+----------------------+\n| MBRContains(@g1,@g2) | MBRContains(@g2,@g1) |\n+----------------------+----------------------+\n|                    1 |                    0 |\n+----------------------+----------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/mbrdisjoint/"], "Title": ["MBRDisjoint"], "Feature": ["MBRDisjoint(g1,g2)\n"], "Description": ["Returns 1 or 0 to indicate whether the Minimum Bounding Rectangles of the two geometries g1 and g2 are disjoint. Two geometries are disjoint if they do not intersect, that is touch or overlap."], "Examples": ["SET @g1 = GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nSET @g2 = GeomFromText('Polygon((4 4,4 7,7 7,7 4,4 4))');\nSELECTmbrdisjoint(@g1,@g2);\n+----------------------+\n| mbrdisjoint(@g1,@g2) |\n+----------------------+\n|                    1 |\n+----------------------+\n\nSET @g1 = GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nSET @g2 = GeomFromText('Polygon((3 3,3 6,6 6,6 3,3 3))');\nSELECT mbrdisjoint(@g1,@g2);\n+----------------------+\n| mbrdisjoint(@g1,@g2) |\n+----------------------+\n|                    0 |\n+----------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/bit_or/"], "Title": ["BIT_OR"], "Feature": ["BIT_OR(expr) [over_clause]\n"], "Description": ["Returns the bitwise OR of all bits in expr. The calculation is performed with 64-bit (BIGINT) precision. It is an aggregate function, and so can be used with the GROUP BY clause.", "If no rows match, BIT_OR will return a value with all bits set to 0. NULL values have no effect on the result unless all results are NULL, which is treated as no match.", "BIT_OR can be used as a window function with the addition of the over_clause."], "Examples": ["CREATE TABLE vals (x INT);\n\nINSERT INTO vals VALUES(111),(110),(100);\n\nSELECT BIT_AND(x), BIT_OR(x), BIT_XOR(x) FROM vals;\n+------------+-----------+------------+\n| BIT_AND(x) | BIT_OR(x) | BIT_XOR(x) |\n+------------+-----------+------------+\n|        100 |       111 |        101 |\n+------------+-----------+------------+\n", "CREATE TABLE vals2 (category VARCHAR(1), x INT);\n\nINSERT INTO vals2 VALUES\n  ('a',111),('a',110),('a',100),\n  ('b','000'),('b',001),('b',011);\n\nSELECT category, BIT_AND(x), BIT_OR(x), BIT_XOR(x) \n  FROM vals GROUP BY category;\n+----------+------------+-----------+------------+\n| category | BIT_AND(x) | BIT_OR(x) | BIT_XOR(x) |\n+----------+------------+-----------+------------+\n| a        |        100 |       111 |        101 |\n| b        |          0 |        11 |         10 |\n+----------+------------+-----------+------------+\n", "SELECT BIT_OR(NULL);\n+--------------+\n| BIT_OR(NULL) |\n+--------------+\n|            0 |\n+--------------+\n"], "Category": ["Aggregate Functions"]}
{"HTML": ["https://mariadb.com//kb/en/mbrequal/"], "Title": ["MBREqual"], "Feature": ["MBREqual(g1,g2)\n"], "Description": ["Returns 1 or 0 to indicate whether the Minimum Bounding Rectangles of\nthe two geometries g1 and g2 are the same."], "Examples": ["SET @g1=GEOMFROMTEXT('LINESTRING(0 0, 1 2)');\nSET @g2=GEOMFROMTEXT('POLYGON((0 0, 0 2, 1 2, 1 0, 0 0))');\nSELECT MbrEqual(@g1,@g2);\n+-------------------+\n| MbrEqual(@g1,@g2) |\n+-------------------+\n|                 1 |\n+-------------------+\n\nSET @g1=GEOMFROMTEXT('LINESTRING(0 0, 1 3)');\nSET @g2=GEOMFROMTEXT('POLYGON((0 0, 0 2, 1 4, 1 0, 0 0))');\nSELECT MbrEqual(@g1,@g2);\n+-------------------+\n| MbrEqual(@g1,@g2) |\n+-------------------+\n|                 0 |\n+-------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/mbrintersects/"], "Title": ["MBRIntersects"], "Feature": ["MBRIntersects(g1,g2)\n"], "Description": ["Returns 1 or 0 to indicate whether the Minimum Bounding Rectangles of the two geometries g1 and g2 intersect."], "Examples": ["SET @g1 = GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nSET @g2 = GeomFromText('Polygon((3 3,3 6,6 6,6 3,3 3))');\nSELECT mbrintersects(@g1,@g2);\n+------------------------+\n| mbrintersects(@g1,@g2) |\n+------------------------+\n|                      1 |\n+------------------------+\n\nSET @g1 = GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nSET @g2 = GeomFromText('Polygon((4 4,4 7,7 7,7 4,4 4))');\nSELECT mbrintersects(@g1,@g2);\n+------------------------+\n| mbrintersects(@g1,@g2) |\n+------------------------+\n|                      0 |\n+------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/mbroverlaps/"], "Title": ["MBROverlaps"], "Feature": ["MBROverlaps(g1,g2)\n"], "Description": ["Returns 1 or 0 to indicate whether the Minimum Bounding Rectangles of\nthe two geometries g1 and g2 overlap. The term spatially overlaps is\nused if two geometries intersect and their intersection results in a\ngeometry of the same dimension but not equal to either of the given\ngeometries."], "Examples": ["SET @g1 = GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nSET @g2 = GeomFromText('Polygon((4 4,4 7,7 7,7 4,4 4))');\nSELECT mbroverlaps(@g1,@g2);\n+----------------------+\n| mbroverlaps(@g1,@g2) |\n+----------------------+\n|                    0 |\n+----------------------+\n\nSET @g1 = GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nSET @g2 = GeomFromText('Polygon((3 3,3 6,6 6,6 3,3 3))');\nSELECT mbroverlaps(@g1,@g2);\n+----------------------+\n| mbroverlaps(@g1,@g2) |\n+----------------------+\n|                    0 |\n+----------------------+\n\nSET @g1 = GeomFromText('Polygon((0 0,0 4,4 4,4 0,0 0))');\nSET @g2 = GeomFromText('Polygon((3 3,3 6,6 6,6 3,3 3))');\nSELECT mbroverlaps(@g1,@g2);\n+----------------------+\n| mbroverlaps(@g1,@g2) |\n+----------------------+\n|                    1 |\n+----------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/mbrtouches/"], "Title": ["MBRTouches"], "Feature": ["MBRTouches(g1,g2)\n"], "Description": ["Returns 1 or 0 to indicate whether the Minimum Bounding Rectangles of\nthe two geometries g1 and g2 touch. Two geometries spatially touch if\nthe interiors of the geometries do not intersect, but the boundary of\none of the geometries intersects either the boundary or the interior\nof the other."], "Examples": ["SET @g1 = GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nSET @g2 = GeomFromText('Polygon((4 4,4 7,7 7,7 4,4 4))');\nSELECT mbrtouches(@g1,@g2);\n+---------------------+\n| mbrtouches(@g1,@g2) |\n+---------------------+\n|                   0 |\n+---------------------+\n\nSET @g1 = GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nSET @g2 = GeomFromText('Polygon((3 3,3 6,6 6,6 3,3 3))');\nSELECT mbrtouches(@g1,@g2);\n+---------------------+\n| mbrtouches(@g1,@g2) |\n+---------------------+\n|                   1 |\n+---------------------+\n\nSET @g1 = GeomFromText('Polygon((0 0,0 4,4 4,4 0,0 0))');\nSET @g2 = GeomFromText('Polygon((3 3,3 6,6 6,6 3,3 3))');\nSELECT mbrtouches(@g1,@g2);\n+---------------------+\n| mbrtouches(@g1,@g2) |\n+---------------------+\n|                   0 |\n+---------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/mbrwithin/"], "Title": ["MBRWithin"], "Feature": ["MBRWithin(g1,g2)\n"], "Description": ["Returns 1 or 0 to indicate whether the Minimum Bounding Rectangle of\ng1 is within the Minimum Bounding Rectangle of g2. This tests the\nopposite relationship as MBRContains()."], "Examples": ["SET @g1 = GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nSET @g2 = GeomFromText('Polygon((0 0,0 5,5 5,5 0,0 0))');\nSELECT MBRWithin(@g1,@g2), MBRWithin(@g2,@g1);\n+--------------------+--------------------+\n| MBRWithin(@g1,@g2) | MBRWithin(@g2,@g1) |\n+--------------------+--------------------+\n|                  1 |                  0 |\n+--------------------+--------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/md5/"], "Title": ["MD5"], "Feature": ["MD5(str)\n"], "Description": ["Calculates an MD5 128-bit checksum for the string. ", "The return value is a 32-hex digit string, and as of MariaDB 5.5, is a nonbinary string in the connection character set and collation, determined by the values of the character_set_connection and collation_connection system variables. Before 5.5, the return value was a binary string.", "NULL is returned if the argument was NULL. "], "Examples": ["SELECT MD5('testing');\n+----------------------------------+\n| MD5('testing')                   |\n+----------------------------------+\n| ae2b1fca515949e5d54fb22b8ed95575 |\n+----------------------------------+\n"], "Category": ["Encryption, Hashing and Compression Functions"]}
{"HTML": ["https://mariadb.com//kb/en/median/"], "Title": ["MEDIAN"], "Feature": ["MEDIAN(median expression) OVER (\n  [ PARTITION BY partition_expression ] \n)\n"], "Description": ["MEDIAN() is a window function that returns the median value of a range of values.", "It is a specific case of PERCENTILE_CONT, with an argument of 0.5 and the ORDER BY column the one in MEDIAN's argument. ", "MEDIAN(<median-arg>) OVER ( [ PARTITION BY partition_expression] )\n", "Is equivalent to:", "PERCENTILE_CONT(0.5) WITHIN \n  GROUP (ORDER BY <median-arg>) OVER ( [ PARTITION BY partition_expression ])\n"], "Examples": ["CREATE TABLE book_rating (name CHAR(30), star_rating TINYINT);\n\nINSERT INTO book_rating VALUES ('Lord of the Ladybirds', 5);\nINSERT INTO book_rating VALUES ('Lord of the Ladybirds', 3);\nINSERT INTO book_rating VALUES ('Lady of the Flies', 1);\nINSERT INTO book_rating VALUES ('Lady of the Flies', 2);\nINSERT INTO book_rating VALUES ('Lady of the Flies', 5);\n\nSELECT name, median(star_rating) OVER (PARTITION BY name) FROM book_rating;\n+-----------------------+----------------------------------------------+\n| name                  | median(star_rating) OVER (PARTITION BY name) |\n+-----------------------+----------------------------------------------+\n| Lord of the Ladybirds |                                 4.0000000000 |\n| Lord of the Ladybirds |                                 4.0000000000 |\n| Lady of the Flies     |                                 2.0000000000 |\n| Lady of the Flies     |                                 2.0000000000 |\n| Lady of the Flies     |                                 2.0000000000 |\n+-----------------------+----------------------------------------------+\n"], "Category": ["Window Functions"]}
{"HTML": ["https://mariadb.com//kb/en/microsecond/"], "Title": ["MICROSECOND"], "Feature": ["MICROSECOND(expr)\n"], "Description": ["Returns the microseconds from the time or datetime expression expr as a number in the range from 0 to 999999.", "If expr is a time with no microseconds, zero is returned, while if expr is a date with no time, zero with a warning is returned."], "Examples": ["SELECT MICROSECOND('12:00:00.123456');\n+--------------------------------+\n| MICROSECOND('12:00:00.123456') |\n+--------------------------------+\n|                         123456 |\n+--------------------------------+\n\nSELECT MICROSECOND('2009-12-31 23:59:59.000010');\n+-------------------------------------------+\n| MICROSECOND('2009-12-31 23:59:59.000010') |\n+-------------------------------------------+\n|                                        10 |\n+-------------------------------------------+\n\nSELECT MICROSECOND('2013-08-07 12:13:14');\n+------------------------------------+\n| MICROSECOND('2013-08-07 12:13:14') |\n+------------------------------------+\n|                                  0 |\n+------------------------------------+\n\nSELECT MICROSECOND('2013-08-07');\n+---------------------------+\n| MICROSECOND('2013-08-07') |\n+---------------------------+\n|                         0 |\n+---------------------------+\n1 row in set, 1 warning (0.00 sec)\n\nSHOW WARNINGS;\n+---------+------+----------------------------------------------+\n| Level   | Code | Message                                      |\n+---------+------+----------------------------------------------+\n| Warning | 1292 | Truncated incorrect time value: '2013-08-07' |\n+---------+------+----------------------------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/mid/"], "Title": ["MID"], "Feature": ["MID(str,pos,len)\n"], "Description": ["MID(str,pos,len) is a synonym for SUBSTRING(str,pos,len)."], "Examples": ["SELECT MID('abcd',4,1);\n+-----------------+\n| MID('abcd',4,1) |\n+-----------------+\n| d               |\n+-----------------+\n\nSELECT MID('abcd',2,2);\n+-----------------+\n| MID('abcd',2,2) |\n+-----------------+\n| bc              |\n+-----------------+\n", "SELECT MID('abcd',-2,4);\n+------------------+\n| MID('abcd',-2,4) |\n+------------------+\n| cd               |\n+------------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/min/"], "Title": ["MIN"], "Feature": ["MIN([DISTINCT] expr)\n"], "Description": ["Returns the minimum value of expr. MIN() may take a string\nargument, in which case it returns the minimum string value. The DISTINCT\nkeyword can be used to find the minimum of the distinct values of expr,\nhowever, this produces the same result as omitting DISTINCT.", "Note that SET and ENUM fields are currently compared by their string value rather than their relative position in the set, so MIN() may produce a different lowest result than ORDER BY ASC.", "It is an aggregate function, and so can be used with the GROUP BY clause.", "MIN() can be used as a window function.", "MIN() returns NULL if there were no matching rows."], "Examples": ["CREATE TABLE student (name CHAR(10), test CHAR(10), score TINYINT); \n\nINSERT INTO student VALUES \n  ('Chun', 'SQL', 75), ('Chun', 'Tuning', 73), \n  ('Esben', 'SQL', 43), ('Esben', 'Tuning', 31), \n  ('Kaolin', 'SQL', 56), ('Kaolin', 'Tuning', 88), \n  ('Tatiana', 'SQL', 87), ('Tatiana', 'Tuning', 83);\n\nSELECT name, MIN(score) FROM student GROUP BY name;\n+---------+------------+\n| name    | MIN(score) |\n+---------+------------+\n| Chun    |         73 |\n| Esben   |         31 |\n| Kaolin  |         56 |\n| Tatiana |         83 |\n+---------+------------+\n", "SELECT MIN(name) FROM student;\n+-----------+\n| MIN(name) |\n+-----------+\n| Chun      |\n+-----------+\n", "SELECT name,test,MIN(score) FROM student;\n+------+------+------------+\n| name | test | MIN(score) |\n+------+------+------------+\n| Chun | SQL  |         31 |\n+------+------+------------+\n", "CREATE TABLE student2(name CHAR(10),grade ENUM('b','c','a'));\n\nINSERT INTO student2 VALUES('Chun','b'),('Esben','c'),('Kaolin','a');\n\nSELECT MIN(grade) FROM student2;\n+------------+\n| MIN(grade) |\n+------------+\n| a          |\n+------------+\n\nSELECT grade FROM student2 ORDER BY grade ASC LIMIT 1;\n+-------+\n| grade |\n+-------+\n| b     |\n+-------+\n", "CREATE OR REPLACE TABLE student_test (name CHAR(10), test CHAR(10), score TINYINT);\nINSERT INTO student_test VALUES \n    ('Chun', 'SQL', 75), ('Chun', 'Tuning', 73), \n    ('Esben', 'SQL', 43), ('Esben', 'Tuning', 31), \n    ('Kaolin', 'SQL', 56), ('Kaolin', 'Tuning', 88), \n    ('Tatiana', 'SQL', 87);\n\n\nSELECT name, test, score, MIN(score) \n  OVER (PARTITION BY name) AS lowest_score FROM student_test;\n+---------+--------+-------+--------------+\n| name    | test   | score | lowest_score |\n+---------+--------+-------+--------------+\n| Chun    | SQL    |    75 |           73 |\n| Chun    | Tuning |    73 |           73 |\n| Esben   | SQL    |    43 |           31 |\n| Esben   | Tuning |    31 |           31 |\n| Kaolin  | SQL    |    56 |           56 |\n| Kaolin  | Tuning |    88 |           56 |\n| Tatiana | SQL    |    87 |           87 |\n+---------+--------+-------+--------------+\n"], "Category": ["Aggregate Functions"]}
{"HTML": ["https://mariadb.com//kb/en/bit_xor/"], "Title": ["BIT_XOR"], "Feature": ["BIT_XOR(expr) [over_clause]\n"], "Description": ["Returns the bitwise XOR of all bits in expr. The calculation is performed with 64-bit (BIGINT) precision. It is an aggregate function, and so can be used with the GROUP BY clause.", "If no rows match, BIT_XOR will return a value with all bits set to 0. NULL values have no effect on the result unless all results are NULL, which is treated as no match.", "BIT_XOR can be used as a window function with the addition of the over_clause."], "Examples": ["CREATE TABLE vals (x INT);\n\nINSERT INTO vals VALUES(111),(110),(100);\n\nSELECT BIT_AND(x), BIT_OR(x), BIT_XOR(x) FROM vals;\n+------------+-----------+------------+\n| BIT_AND(x) | BIT_OR(x) | BIT_XOR(x) |\n+------------+-----------+------------+\n|        100 |       111 |        101 |\n+------------+-----------+------------+\n", "CREATE TABLE vals2 (category VARCHAR(1), x INT);\n\nINSERT INTO vals2 VALUES\n  ('a',111),('a',110),('a',100),\n  ('b','000'),('b',001),('b',011);\n\nSELECT category, BIT_AND(x), BIT_OR(x), BIT_XOR(x) \n  FROM vals GROUP BY category;\n+----------+------------+-----------+------------+\n| category | BIT_AND(x) | BIT_OR(x) | BIT_XOR(x) |\n+----------+------------+-----------+------------+\n| a        |        100 |       111 |        101 |\n| b        |          0 |        11 |         10 |\n+----------+------------+-----------+------------+\n", "SELECT BIT_XOR(NULL);\n+---------------+\n| BIT_XOR(NULL) |\n+---------------+\n|             0 |\n+---------------+\n"], "Category": ["Aggregate Functions"]}
{"HTML": ["https://mariadb.com//kb/en/acos/"], "Title": ["ACOS"], "Feature": ["ACOS(X)\n"], "Description": ["Returns the arc cosine of X, that is, the value whose cosine is X.\nReturns NULL if X is not in the range -1 to 1."], "Examples": ["SELECT ACOS(1);\n+---------+\n| ACOS(1) |\n+---------+\n|       0 |\n+---------+\n\nSELECT ACOS(1.0001);\n+--------------+\n| ACOS(1.0001) |\n+--------------+\n|         NULL |\n+--------------+\n\nSELECT ACOS(0);\n+-----------------+\n| ACOS(0)         |\n+-----------------+\n| 1.5707963267949 |\n+-----------------+\n\nSELECT ACOS(0.234);\n+------------------+\n| ACOS(0.234)      |\n+------------------+\n| 1.33460644244679 |\n+------------------+\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://mariadb.com//kb/en/minute/"], "Title": ["MINUTE"], "Feature": ["MINUTE(time)\n"], "Description": ["Returns the minute for time, in the range 0 to 59. "], "Examples": ["SELECT MINUTE('2013-08-03 11:04:03');\n+-------------------------------+\n| MINUTE('2013-08-03 11:04:03') |\n+-------------------------------+\n|                             4 |\n+-------------------------------+\n\n SELECT MINUTE ('23:12:50');\n+---------------------+\n| MINUTE ('23:12:50') |\n+---------------------+\n|                  12 |\n+---------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/mlinefromtext/"], "Title": ["MLineFromText"], "Feature": ["MLineFromText(wkt[,srid])\nMultiLineStringFromText(wkt[,srid])\n"], "Description": ["Constructs a MULTILINESTRING value using its WKT representation and SRID.", "MLineFromText() and MultiLineStringFromText() are synonyms."], "Examples": ["CREATE TABLE gis_multi_line (g MULTILINESTRING);\nSHOW FIELDS FROM gis_multi_line;\nINSERT INTO gis_multi_line VALUES\n    (MultiLineStringFromText('MULTILINESTRING((10 48,10 21,10 0),(16 0,16 23,16 48))')),\n    (MLineFromText('MULTILINESTRING((10 48,10 21,10 0))')),\n    (MLineFromWKB(AsWKB(MultiLineString(\n      LineString(Point(1, 2), Point(3, 5)), \n      LineString(Point(2, 5), Point(5, 8), Point(21, 7))))));\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/mlinefromwkb/"], "Title": ["MLineFromWKB"], "Feature": ["MLineFromWKB(wkb[,srid])\nMultiLineStringFromWKB(wkb[,srid])\n"], "Description": ["Constructs a MULTILINESTRING value using its WKB  representation and SRID.", "MLineFromWKB() and MultiLineStringFromWKB() are synonyms."], "Examples": ["SET @g = ST_AsBinary(MLineFromText('MULTILINESTRING((10 48,10 21,10 0),(16 0,16 23,16 48))'));\n\nSELECT ST_AsText(MLineFromWKB(@g));\n+--------------------------------------------------------+\n| ST_AsText(MLineFromWKB(@g))                            |\n+--------------------------------------------------------+\n| MULTILINESTRING((10 48,10 21,10 0),(16 0,16 23,16 48)) |\n+--------------------------------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/month/"], "Title": ["MONTH"], "Feature": ["MONTH(date)\n"], "Description": ["Returns the month for date in the range 1 to 12 for January to\nDecember, or 0 for dates such as '0000-00-00' or '2008-00-00' that\nhave a zero month part."], "Examples": ["SELECT MONTH('2019-01-03');\n+---------------------+\n| MONTH('2019-01-03') |\n+---------------------+\n|                   1 |\n+---------------------+\n\nSELECT MONTH('2019-00-03');\n+---------------------+\n| MONTH('2019-00-03') |\n+---------------------+\n|                   0 |\n+---------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/monthname/"], "Title": ["MONTHNAME"], "Feature": ["MONTHNAME(date)\n"], "Description": ["Returns the full name of the month for date. The language used for the name is controlled by the value of the lc_time_names system variable. See server locale for more on the supported locales."], "Examples": ["SELECT MONTHNAME('2019-02-03');\n+-------------------------+\n| MONTHNAME('2019-02-03') |\n+-------------------------+\n| February                |\n+-------------------------+\n", "SET lc_time_names = 'fr_CA';\n\nSELECT MONTHNAME('2019-05-21');\n+-------------------------+\n| MONTHNAME('2019-05-21') |\n+-------------------------+\n| mai                     |\n+-------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/mpointfromtext/"], "Title": ["MPointFromText"], "Feature": ["MPointFromText(wkt[,srid])\nMultiPointFromText(wkt[,srid])\n"], "Description": ["Constructs a MULTIPOINT value using its WKT representation and SRID.", "MPointFromText() and MultiPointFromText() are synonyms."], "Examples": ["CREATE TABLE gis_multi_point (g MULTIPOINT);\nSHOW FIELDS FROM gis_multi_point;\nINSERT INTO gis_multi_point VALUES\n    (MultiPointFromText('MULTIPOINT(0 0,10 10,10 20,20 20)')),\n    (MPointFromText('MULTIPOINT(1 1,11 11,11 21,21 21)')),\n    (MPointFromWKB(AsWKB(MultiPoint(Point(3, 6), Point(4, 10)))));\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/mpointfromwkb/"], "Title": ["MPointFromWKB"], "Feature": ["MPointFromWKB(wkb[,srid])\nMultiPointFromWKB(wkb[,srid])\n"], "Description": ["Constructs a MULTIPOINT value using its WKB representation and SRID.", "MPointFromWKB() and MultiPointFromWKB() are synonyms."], "Examples": ["SET @g = ST_AsBinary(MPointFromText('MultiPoint( 1 1, 2 2, 5 3, 7 2, 9 3, 8 4, 6 6, 6 9, 4 9, 1 5 )'));\n\nSELECT ST_AsText(MPointFromWKB(@g));\n+-----------------------------------------------------+\n| ST_AsText(MPointFromWKB(@g))                        |\n+-----------------------------------------------------+\n| MULTIPOINT(1 1,2 2,5 3,7 2,9 3,8 4,6 6,6 9,4 9,1 5) |\n+-----------------------------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/mpolyfromtext/"], "Title": ["MPolyFromText"], "Feature": ["MPolyFromText(wkt[,srid])\nMultiPolygonFromText(wkt[,srid])\n"], "Description": ["Constructs a MULTIPOLYGON value using its WKT representation and SRID.", "MPolyFromText() and MultiPolygonFromText() are synonyms."], "Examples": ["CREATE TABLE gis_multi_polygon  (g MULTIPOLYGON);\nSHOW FIELDS FROM gis_multi_polygon;\nINSERT INTO gis_multi_polygon VALUES\n    (MultiPolygonFromText('MULTIPOLYGON(\n       ((28 26,28 0,84 0,84 42,28 26),(52 18,66 23,73 9,48 6,52 18)),\n       ((59 18,67 18,67 13,59 13,59 18)))')),\n    (MPolyFromText('MULTIPOLYGON(\n       ((28 26,28 0,84 0,84 42,28 26),(52 18,66 23,73 9,48 6,52 18)),\n       ((59 18,67 18,67 13,59 13,59 18)))')),\n    (MPolyFromWKB(AsWKB(MultiPolygon(Polygon(\n       LineString(Point(0, 3), Point(3, 3), Point(3, 0), Point(0, 3)))))));\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/mpolyfromwkb/"], "Title": ["MPolyFromWKB"], "Feature": ["MPolyFromWKB(wkb[,srid])\nMultiPolygonFromWKB(wkb[,srid])\n"], "Description": ["Constructs a MULTIPOLYGON value using its WKB  representation and SRID.", "MPolyFromWKB() and MultiPolygonFromWKB() are synonyms."], "Examples": ["SET @g = ST_AsBinary(MPointFromText('MULTIPOLYGON(((28 26,28 0,84 0,84 42,28 26),(52 18,66 23,73 9,48 6,52 18)),((59 18,67 18,67 13,59 13,59 18)))'));\n\nSELECT ST_AsText(MPolyFromWKB(@g))\\G\n*************************** 1. row ***************************\nST_AsText(MPolyFromWKB(@g)): MULTIPOLYGON(((28 26,28 0,84 0,84 42,28 26),(52 18,66 23,73 9,48 6,52 18)),((59 18,67 18,67 13,59 13,59 18)))\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/multilinestring/"], "Title": ["MULTILINESTRING"], "Feature": ["MultiLineString(ls1,ls2,...)\n"], "Description": ["Constructs a WKB MultiLineString value using WKB LineString arguments.  If any argument is not a WKB LineString, the return value is\nNULL."], "Examples": ["CREATE TABLE gis_multi_line (g MULTILINESTRING);\nINSERT INTO gis_multi_line VALUES\n (MultiLineStringFromText('MULTILINESTRING((10 48,10 21,10 0),(16 0,16 23,16 48))')),\n (MLineFromText('MULTILINESTRING((10 48,10 21,10 0))')),\n (MLineFromWKB(AsWKB(MultiLineString(LineString(Point(1, 2), \n    Point(3, 5)), LineString(Point(2, 5),Point(5, 8),Point(21, 7))))));\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/case-operator/"], "Title": ["CASE OPERATOR"], "Feature": ["CASE value WHEN [compare_value] THEN result [WHEN [compare_value] THEN\nresult ...] [ELSE result] END\n\nCASE WHEN [condition] THEN result [WHEN [condition] THEN result ...]\n[ELSE result] END\n"], "Description": ["The first version returns the result where value=compare_value. The\nsecond version returns the result for the first condition that is\ntrue.  If there was no matching result value, the result after ELSE is\nreturned, or NULL if there is no ELSE part.", "There is also a CASE statement, which differs from the CASE operator described here."], "Examples": ["SELECT CASE 1 WHEN 1 THEN 'one' WHEN 2 THEN 'two' ELSE 'more' END;\n+------------------------------------------------------------+\n| CASE 1 WHEN 1 THEN 'one' WHEN 2 THEN 'two' ELSE 'more' END |\n+------------------------------------------------------------+\n| one                                                        |\n+------------------------------------------------------------+\n\nSELECT CASE WHEN 1>0 THEN 'true' ELSE 'false' END;\n+--------------------------------------------+\n| CASE WHEN 1>0 THEN 'true' ELSE 'false' END |\n+--------------------------------------------+\n| true                                       |\n+--------------------------------------------+\n\n\nSELECT CASE BINARY 'B' WHEN 'a' THEN 1 WHEN 'b' THEN 2 END;\n+-----------------------------------------------------+\n| CASE BINARY 'B' WHEN 'a' THEN 1 WHEN 'b' THEN 2 END |\n+-----------------------------------------------------+\n|                                                NULL |\n+-----------------------------------------------------+\n"], "Category": ["Control Flow Functions"]}
{"HTML": ["https://mariadb.com//kb/en/multipoint/"], "Title": ["MULTIPOINT"], "Feature": ["MultiPoint(pt1,pt2,...)\n"], "Description": ["Constructs a WKB MultiPoint value using WKB Point arguments. If any argument is not a WKB Point, the return value is NULL."], "Examples": ["SET @g = ST_GEOMFROMTEXT('MultiPoint( 1 1, 2 2, 5 3, 7 2, 9 3, 8 4, 6 6, 6 9, 4 9, 1 5 )');\n\nCREATE TABLE gis_multi_point (g MULTIPOINT);\nINSERT INTO gis_multi_point VALUES\n    (MultiPointFromText('MULTIPOINT(0 0,10 10,10 20,20 20)')),\n    (MPointFromText('MULTIPOINT(1 1,11 11,11 21,21 21)')),\n    (MPointFromWKB(AsWKB(MultiPoint(Point(3, 6), Point(4, 10)))));\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/multipolygon/"], "Title": ["MULTIPOLYGON"], "Feature": ["MultiPolygon(poly1,poly2,...)\n"], "Description": ["Constructs a WKB MultiPolygon value from a set of WKB Polygon arguments. If any argument is not a WKB Polygon, the return value is NULL."], "Examples": ["CREATE TABLE gis_multi_polygon  (g MULTIPOLYGON);\nINSERT INTO gis_multi_polygon VALUES\n    (MultiPolygonFromText('MULTIPOLYGON(((28 26,28 0,84 0,84 42,28 26),(52 18,66 23,73 9,48 6,52 18)),\n     ((59 18,67 18,67 13,59 13,59 18)))')),\n    (MPolyFromText('MULTIPOLYGON(((28 26,28 0,84 0,84 42,28 26),(52 18,66 23,73 9,48 6,52 18)),\n        ((59 18,67 18,67 13,59 13,59 18)))')),\n    (MPolyFromWKB(AsWKB(MultiPolygon(Polygon(LineString(\n       Point(0, 3), Point(3, 3), Point(3, 0), Point(0, 3)))))));\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/name_const/"], "Title": ["NAME_CONST"], "Feature": ["NAME_CONST(name,value)\n"], "Description": ["Returns the given value. When used to produce a result set column,\n NAME_CONST() causes the column to have the given name. The\narguments should be constants.", "This function is used internally when replicating stored procedures. It makes little sense to use it explicitly in SQL statements, and it was not supposed to be used like that.", "SELECT NAME_CONST('myname', 14);\n+--------+\n| myname |\n+--------+\n|     14 |\n+--------+\n"], "Examples": [], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://mariadb.com//kb/en/natural_sort_key/"], "Title": ["NATURAL_SORT_KEY"], "Feature": ["NATURAL_SORT_KEY(str)\n"], "Description": ["The NATURAL_SORT_KEY function is used for sorting that is closer to natural sorting. Strings are sorted in alphabetical order, while numbers are treated in a way such that, for example, 10 is greater than 2, whereas in other forms of sorting, 2 would be greater than 10, just like z is greater than ya.", "There are multiple natural sort implementations, differing in the way they handle leading zeroes, fractions, i18n, negatives, decimals and so on.", "MariaDB's implementation ignores leading zeroes when performing the sort.", "You can use also use NATURAL_SORT_KEY with generated columns. The value is not stored permanently in the table. When using a generated column, the virtual column must be longer than the base column to cater for embedded numbers in the string and MDEV-24582."], "Examples": ["CREATE TABLE t1 (c TEXT);\n\nINSERT INTO t1 VALUES ('b1'),('a2'),('a11'),('a1');\n\nSELECT c FROM t1;\n+------+\n| c    |\n+------+\n| b1   |\n| a2   |\n| a11  |\n| a1   |\n+------+\n\nSELECT c FROM t1 ORDER BY c;\n+------+\n| c    |\n+------+\n| a1   |\n| a11  |\n| a2   |\n| b1   |\n+------+\n", "TRUNCATE t1;\n\nINSERT INTO t1 VALUES \n  ('5.5.31'),('10.7.0'),('10.2.1'),\n  ('10.1.22'),('10.3.32'),('10.2.12');\n\nSELECT c FROM t1;\n+---------+\n| c       |\n+---------+\n| 5.5.31  |\n| 10.7.0  |\n| 10.2.1  |\n| 10.1.22 |\n| 10.3.32 |\n| 10.2.12 |\n+---------+\n\nSELECT c FROM t1 ORDER BY c;\n+---------+\n| c       |\n+---------+\n| 10.1.22 |\n| 10.2.1  |\n| 10.2.12 |\n| 10.3.32 |\n| 10.7.0  |\n| 5.5.31  |\n+---------+\n\nSELECT c FROM t1 ORDER BY NATURAL_SORT_KEY(c);\n+---------+\n| c       |\n+---------+\n| 5.5.31  |\n| 10.1.22 |\n| 10.2.1  |\n| 10.2.12 |\n| 10.3.32 |\n| 10.7.0  |\n+---------+\n", "TRUNCATE t1;\n\nINSERT INTO t1 VALUES \n  ('192.167.3.1'),('192.167.1.12'),('100.200.300.400'),\n  ('100.50.60.70'),('100.8.9.9'),('127.0.0.1'),('0.0.0.0');\n\nSELECT c FROM t1;\n+-----------------+\n| c               |\n+-----------------+\n| 192.167.3.1     |\n| 192.167.1.12    |\n| 100.200.300.400 |\n| 100.50.60.70    |\n| 100.8.9.9       |\n| 127.0.0.1       |\n| 0.0.0.0         |\n+-----------------+\n\nSELECT c FROM t1 ORDER BY c;\n+-----------------+\n| c               |\n+-----------------+\n| 0.0.0.0         |\n| 100.200.300.400 |\n| 100.50.60.70    |\n| 100.8.9.9       |\n| 127.0.0.1       |\n| 192.167.1.12    |\n| 192.167.3.1     |\n+-----------------+\n\nSELECT c FROM t1 ORDER BY NATURAL_SORT_KEY(c);\n+-----------------+\n| c               |\n+-----------------+\n| 0.0.0.0         |\n| 100.8.9.9       |\n| 100.50.60.70    |\n| 100.200.300.400 |\n| 127.0.0.1       |\n| 192.167.1.12    |\n| 192.167.3.1     |\n+-----------------+\n", "CREATE TABLE t(c VARCHAR(3), k VARCHAR(4) AS (NATURAL_SORT_KEY(c)) INVISIBLE);\n\nINSERT INTO t(c) VALUES ('b1'),('a2'),('a11'),('a10');\n\nSELECT * FROM t ORDER by k;\n+------+\n| c    |\n+------+\n| a2   |\n| a10  |\n| a11  |\n| b1   |\n+------+\n", "CREATE TABLE t2(c VARCHAR(3), k VARCHAR(3) AS (NATURAL_SORT_KEY(c)) INVISIBLE);\n\nINSERT INTO t2(c) VALUES ('b1'),('a2'),('a11'),('a10');\n\nSELECT * FROM t2 ORDER by k;\n+------+\n| c    |\n+------+\n| a2   |\n| a11  |\n| a10  |\n| b1   |\n+------+\n", "CREATE TABLE t3 (a VARCHAR(4));\n\nINSERT INTO t3 VALUES \n  ('a1'), ('a001'), ('a10'), ('a001'), ('a10'), \n  ('a01'), ('a01'), ('a01b'), ('a01b'), ('a1');\n\nSELECT a FROM t3 ORDER BY a;\n+------+\n| a    |\n+------+\n| a001 |\n| a001 |\n| a01  |\n| a01  |\n| a01b |\n| a01b |\n| a1   |\n| a1   |\n| a10  |\n| a10  |\n+------+\n10 rows in set (0.000 sec)\n\nSELECT a FROM t3 ORDER BY NATURAL_SORT_KEY(a);\n+------+\n| a    |\n+------+\n| a1   |\n| a01  |\n| a01  |\n| a001 |\n| a001 |\n| a1   |\n| a01b |\n| a01b |\n| a10  |\n| a10  |\n+------+\n", "SELECT a FROM t3 ORDER BY NATURAL_SORT_KEY(a), a;\n+------+\n| a    |\n+------+\n| a001 |\n| a001 |\n| a01  |\n| a01  |\n| a1   |\n| a1   |\n| a01b |\n| a01b |\n| a10  |\n| a10  |\n+------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/next-value-for-sequence_name/"], "Title": ["NEXT VALUE for sequence_name"], "Feature": ["NEXT VALUE FOR sequence\n", "or", "NEXTVAL(sequence_name)\n", "or in Oracle mode (SQL_MODE=ORACLE)", "sequence_name.nextval\n", "NEXT VALUE FOR is ANSI SQL syntax while NEXTVAL() is PostgreSQL syntax."], "Description": ["Generate next value for a SEQUENCE.", "You can greatly speed up NEXT VALUE by creating the sequence with the CACHE option. If not, every NEXT VALUE usage will cause changes in the stored SEQUENCE table.\nWhen using NEXT VALUE the value will be reserved at once and will not be reused, except if the SEQUENCE was created with CYCLE. This means that when you are using SEQUENCEs you have to expect gaps in the generated sequence numbers.\nIf one updates the SEQUENCE with SETVAL() or ALTER SEQUENCE ... RESTART, NEXT VALUE FOR will notice this and start from the next requested value.\nFLUSH TABLES will close the sequence and the next sequence number generated will be according to what's stored in the SEQUENCE object. In effect, this will discard the cached values.\nA server restart (or closing the current connection) also causes a drop of all cached values. The cached sequence numbers are reserved only for the current connection.\nNEXT VALUE requires the INSERT privilege.\nYou can also use NEXT VALUE FOR sequence for column DEFAULT.\n", "Once the sequence is complete, unless the sequence has been created with the CYCLE attribute (not the default), calling the function will result in Error 4084: Sequence has run out."], "Examples": ["CREATE OR REPLACE SEQUENCE s MAXVALUE=2;\n\nSELECT NEXTVAL(s);\n+------------+\n| NEXTVAL(s) |\n+------------+\n|          1 |\n+------------+\n\nSELECT NEXTVAL(s);\n+------------+\n| NEXTVAL(s) |\n+------------+\n|          2 |\n+------------+\n\nSELECT NEXTVAL(s);\nERROR 4084 (HY000): Sequence 'test.s' has run out\n\nALTER SEQUENCE s MAXVALUE=2 CYCLE;\n\nSELECT NEXTVAL(s);\n+------------+\n| NEXTVAL(s) |\n+------------+\n|          1 |\n+------------+\n"], "Category": ["SEQUENCE Functions"]}
{"HTML": ["https://mariadb.com//kb/en/not-like/"], "Title": ["NOT LIKE"], "Feature": ["expr NOT LIKE pat [ESCAPE 'escape_char']\n"], "Description": ["This is the same as NOT (expr LIKE pat [ESCAPE 'escape_char'])."], "Examples": [], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/not-regexp/"], "Title": ["NOT REGEXP"], "Feature": ["expr NOT REGEXP pat, expr NOT RLIKE pat\n"], "Description": ["This is the same as NOT (expr REGEXP pat)."], "Examples": [], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/now/"], "Title": ["NOW"], "Feature": ["NOW([precision])\nCURRENT_TIMESTAMP\nCURRENT_TIMESTAMP([precision])\nLOCALTIME, LOCALTIME([precision])\nLOCALTIMESTAMP\nLOCALTIMESTAMP([precision])\n"], "Description": ["Returns the current date and time as a value in 'YYYY-MM-DD HH:MM:SS'\nor YYYYMMDDHHMMSS.uuuuuu format, depending on whether the function is\nused in a string or numeric context. The value is expressed in the\ncurrent time zone.", "The optional precision determines the microsecond precision. See Microseconds in MariaDB.", "NOW() (or its synonyms) can be used as the default value for TIMESTAMP columns as well as, since MariaDB 10.0.1, DATETIME columns. Before MariaDB 10.0.1, it was only possible for a single TIMESTAMP column per table to contain the CURRENT_TIMESTAMP as its default.", "When displayed in the INFORMATION_SCHEMA.COLUMNS table, a default CURRENT TIMESTAMP is displayed as CURRENT_TIMESTAMP up until MariaDB 10.2.2, and as current_timestamp() from MariaDB 10.2.3, due to to MariaDB 10.2 accepting expressions in the DEFAULT clause.", "Changing the timestamp system variable with a SET timestamp statement affects the value returned by NOW(), but not by SYSDATE()."], "Examples": ["SELECT NOW();\n+---------------------+\n| NOW()               |\n+---------------------+\n| 2010-03-27 13:13:25 |\n+---------------------+\n\nSELECT NOW() + 0;\n+-----------------------+\n| NOW() + 0             |\n+-----------------------+\n| 20100327131329.000000 |\n+-----------------------+\n", "SELECT CURRENT_TIMESTAMP(2);\n+------------------------+\n| CURRENT_TIMESTAMP(2)   |\n+------------------------+\n| 2018-07-10 09:47:26.24 |\n+------------------------+\n", "CREATE TABLE t (createdTS TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP);\n", "SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA='test'\n  AND COLUMN_NAME LIKE '%ts%'\\G\n*************************** 1. row ***************************\n           TABLE_CATALOG: def\n            TABLE_SCHEMA: test\n              TABLE_NAME: t\n             COLUMN_NAME: ts\n        ORDINAL_POSITION: 1\n          COLUMN_DEFAULT: current_timestamp()\n...\n", "SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA='test'\n  AND COLUMN_NAME LIKE '%ts%'\\G\n*************************** 1. row ***************************\n           TABLE_CATALOG: def\n            TABLE_SCHEMA: test\n              TABLE_NAME: t\n             COLUMN_NAME: createdTS\n        ORDINAL_POSITION: 1\n          COLUMN_DEFAULT: CURRENT_TIMESTAMP\n...\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/ntile/"], "Title": ["NTILE"], "Feature": ["NTILE (expr) OVER ( \n  [ PARTITION BY partition_expression ] \n  [ ORDER BY order_list ]\n)\n"], "Description": ["NTILE() is a window function that returns an integer indicating which group a given row falls into. The number of groups is specified in the argument (expr), starting at one. Ordered rows in the partition are divided into the specified number of groups with as equal a size as possible. "], "Examples": ["create table t1 (\n    pk int primary key,\n    a int,\n    b int\n  );\n\ninsert into t1 values\n    (11 , 0, 10),\n    (12 , 0, 10),\n    (13 , 1, 10),\n    (14 , 1, 10),\n    (18 , 2, 10),\n    (15 , 2, 20),\n    (16 , 2, 20),\n    (17 , 2, 20),\n    (19 , 4, 20),\n    (20 , 4, 20);\n\nselect pk, a, b,\n    ntile(1) over (order by pk)\n  from t1;\n+----+------+------+-----------------------------+\n| pk | a    | b    | ntile(1) over (order by pk) |\n+----+------+------+-----------------------------+\n| 11 |    0 |   10 |                           1 |\n| 12 |    0 |   10 |                           1 |\n| 13 |    1 |   10 |                           1 |\n| 14 |    1 |   10 |                           1 |\n| 15 |    2 |   20 |                           1 |\n| 16 |    2 |   20 |                           1 |\n| 17 |    2 |   20 |                           1 |\n| 18 |    2 |   10 |                           1 |\n| 19 |    4 |   20 |                           1 |\n| 20 |    4 |   20 |                           1 |\n+----+------+------+-----------------------------+\n\nselect pk, a, b,\n    ntile(4) over (order by pk)\n from t1;\n+----+------+------+-----------------------------+\n| pk | a    | b    | ntile(4) over (order by pk) |\n+----+------+------+-----------------------------+\n| 11 |    0 |   10 |                           1 |\n| 12 |    0 |   10 |                           1 |\n| 13 |    1 |   10 |                           1 |\n| 14 |    1 |   10 |                           2 |\n| 15 |    2 |   20 |                           2 |\n| 16 |    2 |   20 |                           2 |\n| 17 |    2 |   20 |                           3 |\n| 18 |    2 |   10 |                           3 |\n| 19 |    4 |   20 |                           4 |\n| 20 |    4 |   20 |                           4 |\n+----+------+------+-----------------------------+\n"], "Category": ["Window Functions"]}
{"HTML": ["https://mariadb.com//kb/en/nullif/"], "Title": ["NULLIF"], "Feature": ["NULLIF(expr1,expr2)\n"], "Description": ["Returns NULL if expr1 = expr2 is true, otherwise returns expr1. This is\nthe same as CASE WHEN expr1 = expr2 THEN NULL ELSE expr1 END."], "Examples": ["SELECT NULLIF(1,1);\n+-------------+\n| NULLIF(1,1) |\n+-------------+\n|        NULL |\n+-------------+\n\nSELECT NULLIF(1,2);\n+-------------+\n| NULLIF(1,2) |\n+-------------+\n|           1 |\n+-------------+\n"], "Category": ["Control Flow Functions"]}
{"HTML": ["https://mariadb.com//kb/en/cast/"], "Title": ["CAST"], "Feature": ["CAST(expr AS type)\n"], "Description": ["The CAST() function takes a value of one type and produces a value of another type, similar to the CONVERT() function. ", "The type can be one of the following values:", "BINARY\nCHAR\nDATE\nDATETIME\nDECIMAL[(M[,D])]\nDOUBLE\nFLOAT (from MariaDB 10.4.5)\nINTEGER\nShort for SIGNED INTEGER\n\nSIGNED [INTEGER]\nUNSIGNED [INTEGER]\nTIME\nVARCHAR (in Oracle mode, from MariaDB 10.3)\n", "The main difference between CAST and CONVERT() is that CONVERT(expr,type) is ODBC syntax while CAST(expr as type) and CONVERT(... USING ...) are SQL92 syntax.", "In MariaDB 10.4 and later, you can use the CAST() function with the INTERVAL keyword.", "Until MariaDB 5.5.31, X'HHHH', the standard SQL syntax for binary string literals, erroneously worked in the same way as 0xHHHH. In 5.5.31 it was intentionally changed to behave as a string in all contexts (and never as a number).", "This introduced an incompatibility with previous versions of MariaDB, and all versions of MySQL (see the example below). "], "Examples": ["SELECT CAST(\"abc\" AS BINARY);\nSELECT CAST(\"1\" AS UNSIGNED INTEGER);\nSELECT CAST(123 AS CHAR CHARACTER SET utf8)\n", "SELECT COLLATION(CAST(123 AS CHAR));\n+------------------------------+\n| COLLATION(CAST(123 AS CHAR)) |\n+------------------------------+\n| latin1_swedish_ci            |\n+------------------------------+\n\nSELECT COLLATION(CAST(123 AS CHAR CHARACTER SET utf8));\n+-------------------------------------------------+\n| COLLATION(CAST(123 AS CHAR CHARACTER SET utf8)) |\n+-------------------------------------------------+\n| utf8_general_ci                                 |\n+-------------------------------------------------+\n", "SELECT COLLATION(CAST(123 AS CHAR CHARACTER SET utf8) \n  COLLATE utf8_unicode_ci);\n+-------------------------------------------------------------------------+\n| COLLATION(CAST(123 AS CHAR CHARACTER SET utf8) COLLATE utf8_unicode_ci) |\n+-------------------------------------------------------------------------+\n| utf8_unicode_ci                                                         |\n+-------------------------------------------------------------------------+\n", "CREATE TABLE enum_list (enum_field enum('c','a','b'));\n\nINSERT INTO enum_list (enum_field) \nVALUES('c'),('a'),('c'),('b');\n\nSELECT * FROM enum_list \nORDER BY enum_field;\n+------------+\n| enum_field |\n+------------+\n| c          |\n| c          |\n| a          |\n| b          |\n+------------+\n\nSELECT * FROM enum_list \nORDER BY CAST(enum_field AS CHAR);\n+------------+\n| enum_field |\n+------------+\n| a          |\n| b          |\n| c          |\n| c          |\n+------------+\n", "SELECT CAST(0xAA AS UNSIGNED), CAST(x'aa' AS UNSIGNED), CAST(X'aa' AS UNSIGNED);\n+------------------------+-------------------------+-------------------------+\n| CAST(0xAA AS UNSIGNED) | CAST(x'aa' AS UNSIGNED) | CAST(X'aa' AS UNSIGNED) |\n+------------------------+-------------------------+-------------------------+\n|                    170 |                       0 |                       0 |\n+------------------------+-------------------------+-------------------------+\n1 row in set, 2 warnings (0.00 sec)\n\nWarning (Code 1292): Truncated incorrect INTEGER value: '\\xAA'\nWarning (Code 1292): Truncated incorrect INTEGER value: '\\xAA'\n", "SELECT CAST(2019-01-04 INTERVAL AS DAY_SECOND(2)) AS \"Cast\";\n\n+-------------+\n| Cast        |\n+-------------+\n| 00:20:17.00 |\n+-------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/oct/"], "Title": ["OCT"], "Feature": ["OCT(N)\n"], "Description": ["Returns a string representation of the octal value of N, where N is a longlong (BIGINT) number. This is equivalent to CONV(N,10,8). Returns NULL if N is NULL."], "Examples": ["SELECT OCT(34);\n+---------+\n| OCT(34) |\n+---------+\n| 42      |\n+---------+\n\nSELECT OCT(12);\n+---------+\n| OCT(12) |\n+---------+\n| 14      |\n+---------+\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://mariadb.com//kb/en/octet_length/"], "Title": ["OCTET_LENGTH"], "Feature": ["OCTET_LENGTH(str)\n"], "Description": ["OCTET_LENGTH() returns the length of the given string, in octets (bytes). This is a synonym for LENGTHB(), and, when Oracle mode from MariaDB 10.3 is not set, a synonym for LENGTH().", "A multi-byte character counts as multiple bytes. This means that for a string containing five two-byte characters, OCTET_LENGTH() returns 10, whereas CHAR_LENGTH() returns 5.", "If str is not a string value, it is converted into a string. If str is NULL, the function returns NULL."], "Examples": ["SELECT CHAR_LENGTH('\u03c0'), LENGTH('\u03c0'), LENGTHB('\u03c0'), OCTET_LENGTH('\u03c0');\n+-------------------+--------------+---------------+--------------------+\n| CHAR_LENGTH('\u03c0')  | LENGTH('\u03c0')  | LENGTHB('\u03c0')  | OCTET_LENGTH('\u03c0')  |\n+-------------------+--------------+---------------+--------------------+\n|                 1 |            2 |             2 |                  2 |\n+-------------------+--------------+---------------+--------------------+\n", "SELECT CHAR_LENGTH('\u03c0'), LENGTH('\u03c0'), LENGTHB('\u03c0'), OCTET_LENGTH('\u03c0');\n+-------------------+--------------+---------------+--------------------+\n| CHAR_LENGTH('\u03c0')  | LENGTH('\u03c0')  | LENGTHB('\u03c0')  | OCTET_LENGTH('\u03c0')  |\n+-------------------+--------------+---------------+--------------------+\n|                 1 |            1 |             2 |                  2 |\n+-------------------+--------------+---------------+--------------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/old_password/"], "Title": ["OLD_PASSWORD"], "Feature": ["OLD_PASSWORD(str)\n"], "Description": ["OLD_PASSWORD() was added to MySQL when the implementation of \nPASSWORD() was changed to improve security. OLD_PASSWORD() returns the\nvalue of the old (pre-MySQL 4.1) implementation of PASSWORD() as a\nstring, and is intended to permit you to reset passwords for any\npre-4.1 clients that need to connect to a more recent MySQL server version, or any version of MariaDB,\nwithout locking them out.", "As of MariaDB 5.5, the return value is a nonbinary string in the connection character set and collation, determined by the values of the character_set_connection and collation_connection system variables. Before 5.5, the return value was a binary string.", "The return value is 16 bytes in length, or NULL if the argument was NULL."], "Examples": [], "Category": ["Encryption, Hashing and Compression Functions"]}
{"HTML": ["https://mariadb.com//kb/en/ord/"], "Title": ["ORD"], "Feature": ["ORD(str)\n"], "Description": ["If the leftmost character of the string str is a multi-byte character,\nreturns the code for that character, calculated from the numeric\nvalues of its constituent bytes using this formula:", "  (1st byte code)\n+ (2nd byte code x 256)\n+ (3rd byte code x 256 x 256) ...\n", "If the leftmost character is not a multi-byte character, ORD() returns\nthe same value as the ASCII() function."], "Examples": ["SELECT ORD('2');\n+----------+\n| ORD('2') |\n+----------+\n|       50 |\n+----------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/overlaps/"], "Title": ["OVERLAPS"], "Feature": ["OVERLAPS(g1,g2)\n"], "Description": ["Returns 1 or 0 to indicate whether g1 spatially overlaps g2.\nThe term spatially overlaps is used if two geometries intersect and their\nintersection results in a geometry of the same dimension but not equal to\neither of the given geometries.", "OVERLAPS() is based on the original MySQL implementation and uses object bounding rectangles, while ST_OVERLAPS() uses object shapes."], "Examples": [], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/password/"], "Title": ["PASSWORD"], "Feature": ["PASSWORD(str)\n"], "Description": ["The PASSWORD() function is used for hashing passwords for use in authentication by the MariaDB server. It is not intended for use in other applications.\n", "Calculates and returns a hashed password string from the plaintext password str. Returns an empty string (>= MariaDB 10.0.4) if the argument was NULL. ", "The return value is a nonbinary string in the connection character set and collation, determined by the values of the character_set_connection and collation_connection system variables.", "This is the function that is used for hashing MariaDB passwords for storage in the Password column of the user table (see privileges), usually used with the SET PASSWORD statement. It is not intended for use in other applications.", "Until MariaDB 10.3, the return value is 41-bytes in length, and the first character is always '*'. From MariaDB 10.4, the function takes into account the authentication plugin where applicable (A CREATE USER or SET PASSWORD statement). For example, when used in conjunction with a user authenticated by the ed25519 plugin, the statement will create a longer hash:", "CREATE USER edtest@localhost IDENTIFIED VIA ed25519 USING PASSWORD('secret');\n\nCREATE USER edtest2@localhost IDENTIFIED BY 'secret';\n\nSELECT CONCAT(user, '@', host, ' => ', JSON_DETAILED(priv)) FROM mysql.global_priv\n  WHERE user LIKE 'edtest%'\\G\n*************************** 1. row ***************************\nCONCAT(user, '@', host, ' => ', JSON_DETAILED(priv)): edtest@localhost => {\n...\n    \"plugin\": \"ed25519\",\n    \"authentication_string\": \"ZIgUREUg5PVgQ6LskhXmO+eZLS0nC8be6HPjYWR4YJY\",\n...\n}\n*************************** 2. row ***************************\nCONCAT(user, '@', host, ' => ', JSON_DETAILED(priv)): edtest2@localhost => {\n...\n    \"plugin\": \"mysql_native_password\",\n    \"authentication_string\": \"*14E65567ABDB5135D0CFD9A70B3032C179A49EE7\",\n...\n}\n\n", "The behavior of this function is affected by the value of the old_passwords system variable. If this is set to 1 (0 is default), MariaDB reverts to using the mysql_old_password authentication plugin by default for newly created users and passwords. "], "Examples": ["SELECT PASSWORD('notagoodpwd');\n+-------------------------------------------+\n| PASSWORD('notagoodpwd')                   |\n+-------------------------------------------+\n| *3A70EE9FC6594F88CE9E959CD51C5A1C002DC937 |\n+-------------------------------------------+\n", "SET PASSWORD FOR 'bob'@'%.loc.gov' = PASSWORD('newpass');\n"], "Category": ["Encryption, Hashing and Compression Functions"]}
{"HTML": ["https://mariadb.com//kb/en/percent_rank/"], "Title": ["PERCENT_RANK"], "Feature": ["PERCENT_RANK() OVER (\n  [ PARTITION BY partition_expression ] \n  [ ORDER BY order_list ]\n)\n"], "Description": ["PERCENT_RANK() is a window function that returns the relative percent rank of a given row. The following formula is used to calculate the percent rank:", "(rank - 1) / (number of rows in the window or partition - 1)\n"], "Examples": ["create table t1 (\n  pk int primary key,\n  a int,\n  b int\n);\n\n\ninsert into t1 values\n( 1 , 0, 10),\n( 2 , 0, 10),\n( 3 , 1, 10),\n( 4 , 1, 10),\n( 8 , 2, 10),\n( 5 , 2, 20),\n( 6 , 2, 20),\n( 7 , 2, 20),\n( 9 , 4, 20),\n(10 , 4, 20);\n\nselect pk, a, b,\n    rank() over (order by a) as rank,\n    percent_rank() over (order by a) as pct_rank,\n    cume_dist() over (order by a) as cume_dist\nfrom t1;\n+----+------+------+------+--------------+--------------+\n| pk | a    | b    | rank | pct_rank     | cume_dist    |\n+----+------+------+------+--------------+--------------+\n|  1 |    0 |   10 |    1 | 0.0000000000 | 0.2000000000 |\n|  2 |    0 |   10 |    1 | 0.0000000000 | 0.2000000000 |\n|  3 |    1 |   10 |    3 | 0.2222222222 | 0.4000000000 |\n|  4 |    1 |   10 |    3 | 0.2222222222 | 0.4000000000 |\n|  5 |    2 |   20 |    5 | 0.4444444444 | 0.8000000000 |\n|  6 |    2 |   20 |    5 | 0.4444444444 | 0.8000000000 |\n|  7 |    2 |   20 |    5 | 0.4444444444 | 0.8000000000 |\n|  8 |    2 |   10 |    5 | 0.4444444444 | 0.8000000000 |\n|  9 |    4 |   20 |    9 | 0.8888888889 | 1.0000000000 |\n| 10 |    4 |   20 |    9 | 0.8888888889 | 1.0000000000 |\n+----+------+------+------+--------------+--------------+\n\nselect pk, a, b,\n       percent_rank() over (order by pk) as pct_rank,\n       cume_dist() over (order by pk) as cume_dist\nfrom t1 order by pk;\n+----+------+------+--------------+--------------+\n| pk | a    | b    | pct_rank     | cume_dist    |\n+----+------+------+--------------+--------------+\n|  1 |    0 |   10 | 0.0000000000 | 0.1000000000 |\n|  2 |    0 |   10 | 0.1111111111 | 0.2000000000 |\n|  3 |    1 |   10 | 0.2222222222 | 0.3000000000 |\n|  4 |    1 |   10 | 0.3333333333 | 0.4000000000 |\n|  5 |    2 |   20 | 0.4444444444 | 0.5000000000 |\n|  6 |    2 |   20 | 0.5555555556 | 0.6000000000 |\n|  7 |    2 |   20 | 0.6666666667 | 0.7000000000 |\n|  8 |    2 |   10 | 0.7777777778 | 0.8000000000 |\n|  9 |    4 |   20 | 0.8888888889 | 0.9000000000 |\n| 10 |    4 |   20 | 1.0000000000 | 1.0000000000 |\n+----+------+------+--------------+--------------+\n\nselect pk, a, b,\n        percent_rank() over (partition by a order by a) as pct_rank,\n        cume_dist() over (partition by a order by a) as cume_dist\nfrom t1;\n+----+------+------+--------------+--------------+\n| pk | a    | b    | pct_rank     | cume_dist    |\n+----+------+------+--------------+--------------+\n|  1 |    0 |   10 | 0.0000000000 | 1.0000000000 |\n|  2 |    0 |   10 | 0.0000000000 | 1.0000000000 |\n|  3 |    1 |   10 | 0.0000000000 | 1.0000000000 |\n|  4 |    1 |   10 | 0.0000000000 | 1.0000000000 |\n|  5 |    2 |   20 | 0.0000000000 | 1.0000000000 |\n|  6 |    2 |   20 | 0.0000000000 | 1.0000000000 |\n|  7 |    2 |   20 | 0.0000000000 | 1.0000000000 |\n|  8 |    2 |   10 | 0.0000000000 | 1.0000000000 |\n|  9 |    4 |   20 | 0.0000000000 | 1.0000000000 |\n| 10 |    4 |   20 | 0.0000000000 | 1.0000000000 |\n+----+------+------+--------------+--------------+\n\n"], "Category": ["Window Functions"]}
{"HTML": ["https://mariadb.com//kb/en/period_add/"], "Title": ["PERIOD_ADD"], "Feature": ["PERIOD_ADD(P,N)\n"], "Description": ["Adds N months to period P. P is in the format YYMM or YYYYMM, and is not a date value. If P contains a two-digit year, values from 00 to 69 are converted to from 2000 to 2069, while values from 70 are converted to 1970 upwards.", "Returns a value in the format YYYYMM."], "Examples": ["SELECT PERIOD_ADD(200801,2);\n+----------------------+\n| PERIOD_ADD(200801,2) |\n+----------------------+\n|               200803 |\n+----------------------+\n\nSELECT PERIOD_ADD(6910,2);\n+--------------------+\n| PERIOD_ADD(6910,2) |\n+--------------------+\n|             206912 |\n+--------------------+\n\nSELECT PERIOD_ADD(7010,2);\n+--------------------+\n| PERIOD_ADD(7010,2) |\n+--------------------+\n|             197012 |\n+--------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/period_diff/"], "Title": ["PERIOD_DIFF"], "Feature": ["PERIOD_DIFF(P1,P2)\n"], "Description": ["Returns the number of months between periods P1 and P2. P1 and P2 \ncan be in the format YYMM or YYYYMM, and are not date values.", "If P1 or P2 contains a two-digit year, values from 00 to 69 are converted to from 2000 to 2069, while values from 70 are converted to 1970 upwards."], "Examples": ["SELECT PERIOD_DIFF(200802,200703);\n+----------------------------+\n| PERIOD_DIFF(200802,200703) |\n+----------------------------+\n|                         11 |\n+----------------------------+\n\nSELECT PERIOD_DIFF(6902,6803);\n+------------------------+\n| PERIOD_DIFF(6902,6803) |\n+------------------------+\n|                     11 |\n+------------------------+\n\nSELECT PERIOD_DIFF(7002,6803);\n+------------------------+\n| PERIOD_DIFF(7002,6803) |\n+------------------------+\n|                  -1177 |\n+------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/pi/"], "Title": ["PI"], "Feature": ["PI()\n"], "Description": ["Returns the value of \u03c0 (pi). The default number of decimal places\ndisplayed is six, but MariaDB uses the full double-precision value\ninternally."], "Examples": ["SELECT PI();\n+----------+\n| PI()     |\n+----------+\n| 3.141593 |\n+----------+\n\nSELECT PI()+0.0000000000000000000000;\n+-------------------------------+\n| PI()+0.0000000000000000000000 |\n+-------------------------------+\n|      3.1415926535897931159980 |\n+-------------------------------+\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://mariadb.com//kb/en/ceil/"], "Title": ["CEIL"], "Feature": ["CEIL(X)\n"], "Description": ["CEIL() is a synonym for CEILING()."], "Examples": [], "Category": ["Numeric Functions"]}
{"HTML": ["https://mariadb.com//kb/en/point/"], "Title": ["POINT"], "Feature": ["Point(x,y)\n"], "Description": ["Constructs a WKB Point using the given coordinates."], "Examples": ["SET @g = ST_GEOMFROMTEXT('Point(1 1)');\n\nCREATE TABLE gis_point  (g POINT);\nINSERT INTO gis_point VALUES\n    (PointFromText('POINT(10 10)')),\n    (PointFromText('POINT(20 10)')),\n    (PointFromText('POINT(20 20)')),\n    (PointFromWKB(AsWKB(PointFromText('POINT(10 20)'))));\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/polygon/"], "Title": ["POLYGON"], "Feature": ["Polygon(ls1,ls2,...)\n"], "Description": ["Constructs a WKB Polygon value from a number of WKB LineString\narguments. If any argument does not represent the WKB of a LinearRing (that is,\nnot a closed and simple LineString) the return value is NULL.", "Note that according to the OpenGIS standard, a POLYGON should have exactly one ExteriorRing and all other rings should lie within that ExteriorRing and thus be the InteriorRings. Practically, however, some systems, including MariaDB's, permit polygons to have several 'ExteriorRings'. In the case of there being multiple, non-overlapping exterior rings ST_NUMINTERIORRINGS() will return 1."], "Examples": ["SET @g = ST_GEOMFROMTEXT('POLYGON((1 1,1 5,4 9,6 9,9 3,7 2,1 1))');\n\nCREATE TABLE gis_polygon   (g POLYGON);\nINSERT INTO gis_polygon VALUES\n    (PolygonFromText('POLYGON((10 10,20 10,20 20,10 20,10 10))')),\n    (PolyFromText('POLYGON((0 0,50 0,50 50,0 50,0 0), (10 10,20 10,20 20,10 20,10 10))')),\n    (PolyFromWKB(AsWKB(Polygon(LineString(Point(0, 0), Point(30, 0), Point(30, 30), Point(0, 0))))));\n", "SELECT ST_NumInteriorRings(ST_PolyFromText('POLYGON((0 0,10 0,10 10,0 10,0 0),\n  (-1 -1,-5 -1,-5 -5,-1 -5,-1 -1))')) AS NumInteriorRings;\n+------------------+\n| NumInteriorRings |\n+------------------+\n|                1 |\n+------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/position/"], "Title": ["POSITION"], "Feature": ["POSITION(substr IN str)\n"], "Description": ["POSITION(substr IN str) is a synonym for LOCATE(substr,str).", "It's part of ODBC 3.0."], "Examples": [], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/pow/"], "Title": ["POW"], "Feature": ["POW(X,Y)\n"], "Description": ["Returns the value of X raised to the power of Y.", "POWER() is a synonym."], "Examples": ["SELECT POW(2,3);\n+----------+\n| POW(2,3) |\n+----------+\n|        8 |\n+----------+\n\nSELECT POW(2,-2);\n+-----------+\n| POW(2,-2) |\n+-----------+\n|      0.25 |\n+-----------+\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://mariadb.com//kb/en/power/"], "Title": ["POWER"], "Feature": ["POWER(X,Y)\n"], "Description": ["This is a synonym for POW(), which returns the value of X raised to the power of Y."], "Examples": [], "Category": ["Numeric Functions"]}
{"HTML": ["https://mariadb.com//kb/en/previous-value-for-sequence_name/"], "Title": ["PREVIOUS VALUE FOR sequence_name"], "Feature": ["PREVIOUS VALUE FOR sequence_name\n", "or", "LASTVAL(sequence_name)\n", "or in Oracle mode (SQL_MODE=ORACLE)", "sequence_name.currval\n", "PREVIOUS VALUE FOR is IBM DB2 syntax while LASTVAL() is PostgreSQL syntax."], "Description": ["Gets the most recent value in the current connection generated from a sequence.", "If the sequence has not yet been used by the connection, PREVIOUS VALUE FOR returns NULL (the same thing applies with a new connection which doesn't see a last value for an existing sequence).\nIf a SEQUENCE has been dropped and re-created then it's treated as a new SEQUENCE and PREVIOUS VALUE FOR will return NULL.\nReturns NULL if the sequence is complete\nFLUSH TABLES has no effect on PREVIOUS VALUE FOR.\nPrevious values for all used sequences are stored per connection until connection ends.\nPREVIOUS VALUE FOR requires the SELECT privilege.\n"], "Examples": ["CREATE SEQUENCE s START WITH 100 INCREMENT BY 10;\n\nSELECT PREVIOUS VALUE FOR s;\n+----------------------+\n| PREVIOUS VALUE FOR s |\n+----------------------+\n|                 NULL |\n+----------------------+\n\n# The function works for sequences only, if the table is used an error is generated\nSELECT PREVIOUS VALUE FOR t;\nERROR 4089 (42S02): 'test.t' is not a SEQUENCE\n\n# Call the NEXT VALUE FOR s:\nSELECT NEXT VALUE FOR s;\n+------------------+\n| NEXT VALUE FOR s |\n+------------------+\n|              100 |\n+------------------+\n\nSELECT PREVIOUS VALUE FOR s;\n+----------------------+\n| PREVIOUS VALUE FOR s |\n+----------------------+\n|                  100 |\n+----------------------+\n", "CREATE OR REPLACE SEQUENCE s MAXVALUE=2;\n\nSELECT NEXTVAL(s), LASTVAL(s);\n+------------+------------+\n| NEXTVAL(s) | LASTVAL(s) |\n+------------+------------+\n|          1 |          1 |\n+------------+------------+\n\nSELECT NEXTVAL(s), LASTVAL(s);\n+------------+------------+\n| NEXTVAL(s) | LASTVAL(s) |\n+------------+------------+\n|          2 |          2 |\n+------------+------------+\n\nSELECT NEXTVAL(s), LASTVAL(s);\nERROR 4084 (HY000): Sequence 'test.s' has run out\n\nSELECT LASTVAL(s);\n+------------+\n| LASTVAL(s) |\n+------------+\n|       NULL |\n+------------+\n"], "Category": ["SEQUENCE Functions"]}
{"HTML": ["https://mariadb.com//kb/en/ps_is_account_enabled/"], "Title": ["ps_is_account_enabled"], "Feature": ["sys.ps_is_account_enabled(host,user)\n"], "Description": ["ps_is_account_enabled is a stored function available with the Sys Schema.", "It takes host and user arguments, and returns an ENUM('YES','NO') depending on whether Performance Schema instrumentation for the given account is enabled."], "Examples": ["SELECT sys.ps_is_account_enabled('localhost', 'root');\n+------------------------------------------------+\n| sys.ps_is_account_enabled('localhost', 'root') |\n+------------------------------------------------+\n| YES                                            |\n+------------------------------------------------+\n"], "Category": ["No Category"]}
{"HTML": ["https://mariadb.com//kb/en/ps_is_consumer_enabled/"], "Title": ["ps_is_consumer_enabled"], "Feature": ["sys.ps_is_consumer_enabled(consumer)\n"], "Description": ["ps_is_consumer_enabled is a stored function available with the Sys Schema.", "It returns an ENUM('YES','NO') depending on whether Performance Schema instrumentation for the given consumer is enabled, and NULL if not given a valid consumer name."], "Examples": ["SELECT sys.ps_is_consumer_enabled('global_instrumentation');\n+------------------------------------------------------+\n| sys.ps_is_consumer_enabled('global_instrumentation') |\n+------------------------------------------------------+\n| YES                                                  |\n+------------------------------------------------------+\n\nSELECT sys.ps_is_consumer_enabled('events_stages_current');\n+-----------------------------------------------------+\n| sys.ps_is_consumer_enabled('events_stages_current') |\n+-----------------------------------------------------+\n| NO                                                  |\n+-----------------------------------------------------+\n\nSELECT sys.ps_is_consumer_enabled('nonexistent_consumer');\n+----------------------------------------------------+\n| sys.ps_is_consumer_enabled('nonexistent_consumer') |\n+----------------------------------------------------+\n| NULL                                               |\n+----------------------------------------------------+\n"], "Category": ["No Category"]}
{"HTML": ["https://mariadb.com//kb/en/ps_is_instrument_default_enabled/"], "Title": ["ps_is_instrument_default_enabled"], "Feature": ["sys.ps_is_instrument_default_enabled(instrument)\n"], "Description": ["ps_is_instrument_default_enabled is a stored function available with the Sys Schema.", "It returns YES if the given Performance Schema instrument is enabled by default, and NO if it is not, does not exist, or is a NULL value."], "Examples": ["SELECT sys.ps_is_instrument_default_enabled('statement/sql/select');\n+--------------------------------------------------------------+\n| sys.ps_is_instrument_default_enabled('statement/sql/select') |\n+--------------------------------------------------------------+\n| YES                                                          |\n+--------------------------------------------------------------+\n\nSELECT sys.ps_is_instrument_default_enabled('memory/sql/udf_mem');\n+------------------------------------------------------------+\n| sys.ps_is_instrument_default_enabled('memory/sql/udf_mem') |\n+------------------------------------------------------------+\n| NO                                                         |\n+------------------------------------------------------------+\n\nSELECT sys.ps_is_instrument_default_enabled('memory/sql/nonexistent');\n+----------------------------------------------------------------+\n| sys.ps_is_instrument_default_enabled('memory/sql/nonexistent') |\n+----------------------------------------------------------------+\n| NO                                                             |\n+----------------------------------------------------------------+\n\nSELECT sys.ps_is_instrument_default_enabled(NULL);\n+--------------------------------------------+\n| sys.ps_is_instrument_default_enabled(NULL) |\n+--------------------------------------------+\n| NO                                         |\n+--------------------------------------------+\n"], "Category": ["No Category"]}
{"HTML": ["https://mariadb.com//kb/en/ps_is_instrument_default_timed/"], "Title": ["ps_is_instrument_default_timed"], "Feature": ["sys.ps_is_instrument_default_timed(instrument)\n"], "Description": ["ps_is_instrument_default_timed is a stored function available with the Sys Schema.", "It returns YES if the given Performance Schema instrument is timed by default, and NO if it is not, does not exist, or is a NULL value."], "Examples": ["SELECT sys.ps_is_instrument_default_timed('statement/sql/select');\n+------------------------------------------------------------+\n| sys.ps_is_instrument_default_timed('statement/sql/select') |\n+------------------------------------------------------------+\n| YES                                                        |\n+------------------------------------------------------------+\n\nSELECT sys.ps_is_instrument_default_timed('memory/sql/udf_mem');\n+----------------------------------------------------------+\n| sys.ps_is_instrument_default_timed('memory/sql/udf_mem') |\n+----------------------------------------------------------+\n| NO                                                       |\n+----------------------------------------------------------+\n\nSELECT sys.ps_is_instrument_default_timed('memory/sql/nonexistent');\n+-------------------------------------------------------------+\n| sys.ps_is_instrument_default_timed('memory/sql/udf_memsds') |\n+-------------------------------------------------------------+\n| NO                                                          |\n+-------------------------------------------------------------+\n\nSELECT sys.ps_is_instrument_default_timed(NULL);\n+------------------------------------------+\n| sys.ps_is_instrument_default_timed(NULL) |\n+------------------------------------------+\n| NO                                       |\n+------------------------------------------+\n"], "Category": ["No Category"]}
{"HTML": ["https://mariadb.com//kb/en/ceiling/"], "Title": ["CEILING"], "Feature": ["CEILING(X)\n"], "Description": ["Returns the smallest integer value not less than X."], "Examples": ["SELECT CEILING(1.23);\n+---------------+\n| CEILING(1.23) |\n+---------------+\n|             2 |\n+---------------+\n\nSELECT CEILING(-1.23);\n+----------------+\n| CEILING(-1.23) |\n+----------------+\n|             -1 |\n+----------------+\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://mariadb.com//kb/en/ps_is_thread_instrumented/"], "Title": ["ps_is_thread_instrumented"], "Feature": ["sys.ps_is_thread_instrumented(connection_id)\n"], "Description": ["ps_is_thread_instrumented is a stored function available with the Sys Schema that returns whether or not Performance Schema instrumentation for the given connection_id is enabled.", "YES - instrumentation is enabled\nNO - instrumentation is not enabled\nUNKNOWN - the connection ID is unknown\nNULL - NULL value\n"], "Examples": ["SELECT sys.ps_is_thread_instrumented(CONNECTION_ID());\n+------------------------------------------------+\n| sys.ps_is_thread_instrumented(CONNECTION_ID()) |\n+------------------------------------------------+\n| YES                                            |\n+------------------------------------------------+\n\nSELECT sys.ps_is_thread_instrumented(2042);\n+-------------------------------------+\n| sys.ps_is_thread_instrumented(2042) |\n+-------------------------------------+\n| UNKNOWN                             |\n+-------------------------------------+\n\nSELECT sys.ps_is_thread_instrumented(NULL);\n+-------------------------------------+\n| sys.ps_is_thread_instrumented(NULL) |\n+-------------------------------------+\n| NULL                                |\n+-------------------------------------+\n"], "Category": ["No Category"]}
{"HTML": ["https://mariadb.com//kb/en/ps_thread_account/"], "Title": ["ps_thread_account"], "Feature": ["sys.ps_thread_account(thread_id)\n"], "Description": ["ps_thread_account is a stored function available with the Sys Schema that returns the account (username@hostname) associated with the given thread_id.", "Returns NULL if the thread_id is not found."], "Examples": ["SELECT sys.ps_thread_account(sys.ps_thread_id(CONNECTION_ID()));\n+----------------------------------------------------------+\n| sys.ps_thread_account(sys.ps_thread_id(CONNECTION_ID())) |\n+----------------------------------------------------------+\n| msandbox@localhost                                       |\n+----------------------------------------------------------+\n\nSELECT sys.ps_thread_account(sys.ps_thread_id(2042));\n+-----------------------------------------------+\n| sys.ps_thread_account(sys.ps_thread_id(2042)) |\n+-----------------------------------------------+\n| NULL                                          |\n+-----------------------------------------------+\n\nSELECT sys.ps_thread_account(sys.ps_thread_id(NULL));\n+-----------------------------------------------+\n| sys.ps_thread_account(sys.ps_thread_id(NULL)) |\n+-----------------------------------------------+\n| msandbox@localhost                            |\n+-----------------------------------------------+\n"], "Category": ["No Category"]}
{"HTML": ["https://mariadb.com//kb/en/ps_thread_id/"], "Title": ["ps_thread_id"], "Feature": ["sys.ps_thread_id(connection_id)\n"], "Description": ["ps_thread_id is a stored function available with the Sys Schema that returns the thread_id associated with the given connection_id. If the connection_id is NULL, returns the thread_id for the current connection. "], "Examples": ["SELECT * FROM performance_schema.threads\\G\n*************************** 13. row ***************************\n          THREAD_ID: 13\n               NAME: thread/sql/one_connection\n               TYPE: FOREGROUND\n     PROCESSLIST_ID: 3\n   PROCESSLIST_USER: msandbox\n   PROCESSLIST_HOST: localhost\n     PROCESSLIST_DB: test\nPROCESSLIST_COMMAND: Query\n   PROCESSLIST_TIME: 0\n  PROCESSLIST_STATE: Sending data\n   PROCESSLIST_INFO: SELECT * FROM performance_schema.threads\n   PARENT_THREAD_ID: 1\n               ROLE: NULL\n       INSTRUMENTED: YES\n            HISTORY: YES\n    CONNECTION_TYPE: Socket\n       THREAD_OS_ID: 24379\n\n\nSELECT sys.ps_thread_id(3);\n+---------------------+\n| sys.ps_thread_id(3) |\n+---------------------+\n|                  13 |\n+---------------------+\n\nSELECT sys.ps_thread_id(NULL);\n+------------------------+\n| sys.ps_thread_id(NULL) |\n+------------------------+\n|                     13 |\n+------------------------+\n"], "Category": ["No Category"]}
{"HTML": ["https://mariadb.com//kb/en/ps_thread_stack/"], "Title": ["ps_thread_stack"], "Feature": ["sys.ps_thread_stack(thread_id, verbose)\n"], "Description": ["ps_thread_stack is a stored function available with the Sys Schema that, for a given thread_id, returns all statements, stages, and events within the Performance Schema, as a JSON formatted stack.", "The boolean verbose argument specifies whether or not to include file:lineno information in the events."], "Examples": ["SELECT sys.ps_thread_stack(13, FALSE) AS thread_stack\\G\n*************************** 1. row ***************************\nthread_stack: {\"rankdir\": \"LR\",\"nodesep\": \"0.10\",\n  \"stack_created\": \"2022-03-28 16:01:06\",\n  \"mysql_version\": \"10.8.2-MariaDB\",\n  \"mysql_user\": \"msandbox@localhost\",\n  \"events\": []}\n"], "Category": ["No Category"]}
{"HTML": ["https://mariadb.com//kb/en/ps_thread_trx_info/"], "Title": ["ps_thread_trx_info"], "Feature": ["sys.ps_thread_trx_info(thread_id)\n"], "Description": ["ps_thread_trx_info is a stored function available with the Sys Schema.", "It returns a JSON object with information about the thread specified by the given thread_id. This information includes:", "the current transaction\nexecuted statements (derived from the Performance Schema events_transactions_current Table and the Performance Schema events_statements_history Table (full data will only returned if the consumers for those tables are enabled).\n", "The maximum length of the returned JSON object is determined by the value of the ps_thread_trx_info.max_length sys_config option (by default 65535). If the returned value exceeds this length, a JSON object error is returned."], "Examples": [], "Category": ["No Category"]}
{"HTML": ["https://mariadb.com//kb/en/quarter/"], "Title": ["QUARTER"], "Feature": ["QUARTER(date)\n"], "Description": ["Returns the quarter of the year for date, in the range 1 to 4. Returns 0 if month contains a zero value, or NULL if the given value is not otherwise a valid date (zero values are accepted)."], "Examples": ["SELECT QUARTER('2008-04-01');\n+-----------------------+\n| QUARTER('2008-04-01') |\n+-----------------------+\n|                     2 |\n+-----------------------+\n\nSELECT QUARTER('2019-00-01');\n+-----------------------+\n| QUARTER('2019-00-01') |\n+-----------------------+\n|                     0 |\n+-----------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/quote/"], "Title": ["QUOTE"], "Feature": ["QUOTE(str)\n"], "Description": ["Quotes a string to produce a result that can be used as a properly escaped data\nvalue in an SQL statement. The string is returned enclosed by single quotes and\nwith each instance of single quote (\"'\"), backslash (\"\\\"),\nASCII NUL, and Control-Z preceded by a backslash. If the argument\nis NULL, the return value is the word \"NULL\" without enclosing single\nquotes."], "Examples": ["SELECT QUOTE(\"Don't!\");\n+-----------------+\n| QUOTE(\"Don't!\") |\n+-----------------+\n| 'Don\\'t!'       |\n+-----------------+\n\nSELECT QUOTE(NULL); \n+-------------+\n| QUOTE(NULL) |\n+-------------+\n| NULL        |\n+-------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/quote_identifier/"], "Title": ["quote_identifier"], "Feature": ["sys.quote_identifier(str)\n"], "Description": ["quote_identifier is a stored function available with the Sys Schema.", "It quotes a string to produce a result that can be used as an identifier in an\nSQL statement. The string is returned enclosed by backticks (\"`\") and\nwith each instance of backtick (\"`\") doubled. If the argument\nis NULL, the return value is the word \"NULL\" without enclosing\nbackticks."], "Examples": ["SELECT sys.quote_identifier(\"Identifier with spaces\");\n+------------------------------------------------+\n| sys.quote_identifier(\"Identifier with spaces\") |\n+------------------------------------------------+\n| `Identifier with spaces`                       |\n+------------------------------------------------+\n\nSELECT sys.quote_identifier(\"Identifier` containing `backticks\");\n+-----------------------------------------------------------+\n| sys.quote_identifier(\"Identifier` containing `backticks\") |\n+-----------------------------------------------------------+\n| `Identifier`` containing ``backticks`                     |\n+-----------------------------------------------------------+\n"], "Category": ["No Category"]}
{"HTML": ["https://mariadb.com//kb/en/radians/"], "Title": ["RADIANS"], "Feature": ["RADIANS(X)\n"], "Description": ["Returns the argument X, converted from degrees to radians. Note that\n\u03c0 radians equals 180 degrees. ", "This is the converse of the DEGREES() function."], "Examples": ["SELECT RADIANS(45);\n+-------------------+\n| RADIANS(45)       |\n+-------------------+\n| 0.785398163397448 |\n+-------------------+\n\nSELECT RADIANS(90);\n+-----------------+\n| RADIANS(90)     |\n+-----------------+\n| 1.5707963267949 |\n+-----------------+\n\nSELECT RADIANS(PI());\n+--------------------+\n| RADIANS(PI())      |\n+--------------------+\n| 0.0548311355616075 |\n+--------------------+\n\nSELECT RADIANS(180);\n+------------------+\n| RADIANS(180)     |\n+------------------+\n| 3.14159265358979 |\n+------------------+\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://mariadb.com//kb/en/rand/"], "Title": ["RAND"], "Feature": ["RAND(), RAND(N)\n"], "Description": ["Returns a random DOUBLE precision floating point value v in the range 0 <= v < 1.0. If\na constant integer argument N is specified, it is used as the seed\nvalue, which produces a repeatable sequence of column values. In the example below, note that the sequences of values produced by\nRAND(3) is the same both places where it occurs.", "In a WHERE clause, RAND() is evaluated each time the WHERE is executed.", "Statements using the RAND() function are not safe for statement-based replication."], "Examples": ["CREATE TABLE t (i INT);\n\nINSERT INTO t VALUES(1),(2),(3);\n\nSELECT i, RAND() FROM t;\n+------+-------------------+\n| i    | RAND()            |\n+------+-------------------+\n|    1 | 0.255651095188829 |\n|    2 | 0.833920199269355 |\n|    3 |  0.40264774151393 |\n+------+-------------------+\n\nSELECT i, RAND(3) FROM t;\n+------+-------------------+\n| i    | RAND(3)           |\n+------+-------------------+\n|    1 |  0.90576975597606 |\n|    2 | 0.373079058130345 |\n|    3 | 0.148086053457191 |\n+------+-------------------+\n\nSELECT i, RAND() FROM t;\n+------+-------------------+\n| i    | RAND()            |\n+------+-------------------+\n|    1 | 0.511478140495232 |\n|    2 | 0.349447508668012 |\n|    3 | 0.212803152588013 |\n+------+-------------------+\n", "SELECT i, RAND(3) FROM t;\n+------+-------------------+\n| i    | RAND(3)           |\n+------+-------------------+\n|    1 |  0.90576975597606 |\n|    2 | 0.373079058130345 |\n|    3 | 0.148086053457191 |\n+------+-------------------+\n", "SELECT FLOOR(5 + (RAND() * 11));\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://mariadb.com//kb/en/char-function/"], "Title": ["CHAR Function"], "Feature": ["CHAR(N,... [USING charset_name])\n"], "Description": ["CHAR() interprets each argument as an INT and returns a string consisting of the characters given by the code values of those integers. NULL values are skipped.  By default, CHAR() returns a binary string. To produce a string in a given character set, use the optional USING clause:", "SELECT CHARSET(CHAR(0x65)), CHARSET(CHAR(0x65 USING utf8));\n+---------------------+--------------------------------+\n| CHARSET(CHAR(0x65)) | CHARSET(CHAR(0x65 USING utf8)) |\n+---------------------+--------------------------------+\n| binary              | utf8                           |\n+---------------------+--------------------------------+\n", "If USING is given and the result string is illegal for the given character set, a warning is issued. Also, if strict SQL mode is enabled, the result from CHAR() becomes NULL."], "Examples": ["SELECT CHAR(77,97,114,'105',97,'68',66);\n+----------------------------------+\n| CHAR(77,97,114,'105',97,'68',66) |\n+----------------------------------+\n| MariaDB                          |\n+----------------------------------+\n\nSELECT CHAR(77,77.3,'77.3');\n+----------------------+\n| CHAR(77,77.3,'77.3') |\n+----------------------+\n| MMM                  |\n+----------------------+\n1 row in set, 1 warning (0.00 sec)\n\nWarning (Code 1292): Truncated incorrect INTEGER value: '77.3'\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/rank/"], "Title": ["RANK"], "Feature": ["RANK() OVER (\n  [ PARTITION BY partition_expression ]\n  [ ORDER BY order_list ]\n) \n"], "Description": ["RANK() is a window function that displays the number of a given row, starting at one and following the ORDER BY sequence of the window function, with identical values receiving the same result. It is similar to the ROW_NUMBER() function except that in that function, identical values will receive a different row number for each result."], "Examples": ["CREATE TABLE student(course VARCHAR(10), mark int, name varchar(10));\n\nINSERT INTO student VALUES \n  ('Maths', 60, 'Thulile'),\n  ('Maths', 60, 'Pritha'),\n  ('Maths', 70, 'Voitto'),\n  ('Maths', 55, 'Chun'),\n  ('Biology', 60, 'Bilal'),\n   ('Biology', 70, 'Roger');\n\nSELECT \n  RANK() OVER (PARTITION BY course ORDER BY mark DESC) AS rank, \n  DENSE_RANK() OVER (PARTITION BY course ORDER BY mark DESC) AS dense_rank, \n  ROW_NUMBER() OVER (PARTITION BY course ORDER BY mark DESC) AS row_num, \n  course, mark, name \nFROM student ORDER BY course, mark DESC;\n+------+------------+---------+---------+------+---------+\n| rank | dense_rank | row_num | course  | mark | name    |\n+------+------------+---------+---------+------+---------+\n|    1 |          1 |       1 | Biology |   70 | Roger   |\n|    2 |          2 |       2 | Biology |   60 | Bilal   |\n|    1 |          1 |       1 | Maths   |   70 | Voitto  |\n|    2 |          2 |       2 | Maths   |   60 | Thulile |\n|    2 |          2 |       3 | Maths   |   60 | Pritha  |\n|    4 |          3 |       4 | Maths   |   55 | Chun    |\n+------+------------+---------+---------+------+---------+\n"], "Category": ["Window Functions"]}
{"HTML": ["https://mariadb.com//kb/en/regexp/"], "Title": ["REGEXP"], "Feature": ["expr REGEXP pat, expr RLIKE pat\n"], "Description": ["Performs a pattern match of a string expression expr against a pattern\npat. The pattern can be an extended regular expression. See Regular Expressions Overview for details on the syntax for\nregular expressions (see also PCRE Regular Expressions). ", "Returns 1 if expr matches pat or 0 if it doesn't match. If either expr or pat are NULL, the result is NULL. ", "The negative form NOT REGEXP also exists, as an alias for NOT (string REGEXP pattern). RLIKE and NOT RLIKE are synonyms for REGEXP and NOT REGEXP, originally provided for mSQL compatibility.", "The pattern need not be a literal string. For example, it can be\nspecified as a string expression or table column.", "Note: Because MariaDB uses the C escape syntax in strings (for\nexample, \"\\n\" to represent the newline character), you must double any\n\"\\\" that you use in your REGEXP strings.", "REGEXP is not case sensitive, except when used with binary strings.", "MariaDB 10.0.5 moved to the PCRE regex library - see PCRE Regular Expressions for enhancements to REGEXP introduced in MariaDB 10.0.5.", "The default_regex_flags variable addresses the remaining compatibilities between PCRE and the old regex library. "], "Examples": ["SELECT 'Monty!' REGEXP 'm%y%%';\n+-------------------------+\n| 'Monty!' REGEXP 'm%y%%' |\n+-------------------------+\n|                       0 |\n+-------------------------+\n\nSELECT 'Monty!' REGEXP '.*';\n+----------------------+\n| 'Monty!' REGEXP '.*' |\n+----------------------+\n|                    1 |\n+----------------------+\n\nSELECT 'new*\\n*line' REGEXP 'new\\\\*.\\\\*line';\n+---------------------------------------+\n| 'new*\\n*line' REGEXP 'new\\\\*.\\\\*line' |\n+---------------------------------------+\n|                                     1 |\n+---------------------------------------+\n\nSELECT 'a' REGEXP 'A', 'a' REGEXP BINARY 'A';\n+----------------+-----------------------+\n| 'a' REGEXP 'A' | 'a' REGEXP BINARY 'A' |\n+----------------+-----------------------+\n|              1 |                     0 |\n+----------------+-----------------------+\n\nSELECT 'a' REGEXP '^[a-d]';\n+---------------------+\n| 'a' REGEXP '^[a-d]' |\n+---------------------+\n|                   1 |\n+---------------------+\n", "SELECT 'a\\nb\\nc' RLIKE '^b$';\n+---------------------------+\n| '(?m)a\\nb\\nc' RLIKE '^b$' |\n+---------------------------+\n|                         0 |\n+---------------------------+\n", "SELECT 'a\\nb\\nc' RLIKE '(?m)^b$';\n+---------------------------+\n| 'a\\nb\\nc' RLIKE '(?m)^b$' |\n+---------------------------+\n|                         1 |\n+---------------------------+\n", "SET default_regex_flags='MULTILINE';\nSELECT 'a\\nb\\nc' RLIKE '^b$';\n+-----------------------+\n| 'a\\nb\\nc' RLIKE '^b$' |\n+-----------------------+\n|                     1 |\n+-----------------------+ \n"], "Category": ["Regular Expressions Functions"]}
{"HTML": ["https://mariadb.com//kb/en/regexp_instr/"], "Title": ["REGEXP_INSTR"], "Feature": ["REGEXP_INSTR(subject, pattern)\n", "Returns the position of the first occurrence of the regular expression pattern in the string subject, or 0 if pattern was not found.", "The positions start with 1 and are measured in characters (i.e. not in bytes), which is important for multi-byte character sets. You can cast a multi-byte character set to BINARY to get offsets in bytes.", "The function follows the case sensitivity rules of the effective collation. Matching is performed case insensitively for case insensitive collations, and case sensitively for case sensitive collations and for binary data.", "The collation case sensitivity can be overwritten using the (?i) and (?-i) PCRE flags.", "MariaDB uses the PCRE regular expression library for enhanced regular expression performance, and REGEXP_INSTR was introduced as part of this enhancement."], "Description": [], "Examples": ["SELECT REGEXP_INSTR('abc','b');\n-> 2\n\nSELECT REGEXP_INSTR('abc','x');\n-> 0\n\nSELECT REGEXP_INSTR('BJ\u00d6RN','N');\n-> 5\n", "SELECT REGEXP_INSTR(BINARY 'BJ\u00d6RN','N') AS cast_utf8_to_binary;\n-> 6\n", "SELECT REGEXP_INSTR('ABC','b');\n-> 2\n\nSELECT REGEXP_INSTR('ABC' COLLATE utf8_bin,'b');\n-> 0\n\nSELECT REGEXP_INSTR(BINARY'ABC','b');\n-> 0\n\nSELECT REGEXP_INSTR('ABC','(?-i)b');\n-> 0\n\nSELECT REGEXP_INSTR('ABC' COLLATE utf8_bin,'(?i)b');\n-> 2\n"], "Category": ["Regular Expressions Functions"]}
{"HTML": ["https://mariadb.com//kb/en/regexp_replace/"], "Title": ["REGEXP_REPLACE"], "Feature": ["REGEXP_REPLACE(subject, pattern, replace)\n"], "Description": ["REGEXP_REPLACE returns the string subject with all occurrences of the regular expression pattern replaced by the string replace. If no occurrences are found, then subject is returned as is.", "The replace string can have backreferences to the subexpressions in the form \\N, where N is a number from 1 to 9.", "The function follows the case sensitivity rules of the effective collation. Matching is performed case insensitively for case insensitive collations, and case sensitively for case sensitive collations and for binary data.", "The collation case sensitivity can be overwritten using the (?i) and (?-i) PCRE flags.", "MariaDB uses the PCRE regular expression library for enhanced regular expression performance, and REGEXP_REPLACE was introduced as part of this enhancement.", "The default_regex_flags variable addresses the remaining compatibilities between PCRE and the old regex library. "], "Examples": ["SELECT REGEXP_REPLACE('ab12cd','[0-9]','') AS remove_digits;\n-> abcd\n\nSELECT REGEXP_REPLACE('<html><head><title>title</title><body>body</body></htm>', '<.+?>',' ')\nAS strip_html;\n-> title  body\n", "SELECT REGEXP_REPLACE('James Bond','^(.*) (.*)$','\\\\2, \\\\1') AS reorder_name;\n-> Bond, James\n", "SELECT REGEXP_REPLACE('ABC','b','-') AS case_insensitive;\n-> A-C\n\nSELECT REGEXP_REPLACE('ABC' COLLATE utf8_bin,'b','-') AS case_sensitive;\n-> ABC\n\nSELECT REGEXP_REPLACE(BINARY 'ABC','b','-') AS binary_data;\n-> ABC\n", "SELECT REGEXP_REPLACE('ABC','(?-i)b','-') AS force_case_sensitive;\n-> ABC\n\nSELECT REGEXP_REPLACE(BINARY 'ABC','(?i)b','-') AS force_case_insensitive;\n-> A-C\n"], "Category": ["Regular Expressions Functions"]}
{"HTML": ["https://mariadb.com//kb/en/regexp_substr/"], "Title": ["REGEXP_SUBSTR"], "Feature": ["REGEXP_SUBSTR(subject,pattern)\n"], "Description": ["Returns the part of the string subject that matches the regular expression pattern, or an empty string if pattern was not found.", "The function follows the case sensitivity rules of the effective collation. Matching is performed case insensitively for case insensitive collations, and case sensitively for case sensitive collations and for binary data.", "The collation case sensitivity can be overwritten using the (?i) and (?-i) PCRE flags.", "MariaDB uses the PCRE regular expression library for enhanced regular expression performance, and REGEXP_SUBSTR was introduced as part of this enhancement.", "The default_regex_flags variable addresses the remaining compatibilities between PCRE and the old regex library. "], "Examples": ["SELECT REGEXP_SUBSTR('ab12cd','[0-9]+');\n-> 12\n\nSELECT REGEXP_SUBSTR(\n  'See https://mariadb.org/en/foundation/ for details',\n  'https?://[^/]*');\n-> https://mariadb.org\n", "SELECT REGEXP_SUBSTR('ABC','b');\n-> B\n\nSELECT REGEXP_SUBSTR('ABC' COLLATE utf8_bin,'b');\n->\n\nSELECT REGEXP_SUBSTR(BINARY'ABC','b');\n->\n\nSELECT REGEXP_SUBSTR('ABC','(?i)b');\n-> B\n\nSELECT REGEXP_SUBSTR('ABC' COLLATE utf8_bin,'(?+i)b');\n-> B\n"], "Category": ["Regular Expressions Functions"]}
{"HTML": ["https://mariadb.com//kb/en/release_lock/"], "Title": ["RELEASE_LOCK"], "Feature": ["RELEASE_LOCK(str)\n"], "Description": ["Releases the lock named by the string str that was obtained with GET_LOCK(). Returns 1 if the lock was released, 0 if the lock was not established by this thread (in which case the lock is not\nreleased), and NULL if the named lock did not exist. The lock does not exist if it was never obtained by a call to GET_LOCK() or if it has previously been released.", "str is case insensitive. If str is an empty string or NULL, RELEASE_LOCK() returns NULL and does nothing.", "Statements using the RELEASE_LOCK function are not safe for statement-based replication.", "The DO statement is convenient to use with RELEASE_LOCK()."], "Examples": ["SELECT GET_LOCK('lock1',10);\n+----------------------+\n| GET_LOCK('lock1',10) |\n+----------------------+\n|                    1 |\n+----------------------+\n", "SELECT GET_LOCK('lock2',10);\n+----------------------+\n| GET_LOCK('lock2',10) |\n+----------------------+\n|                    1 |\n+----------------------+\n", "SELECT RELEASE_LOCK('lock1'), RELEASE_LOCK('lock2'), RELEASE_LOCK('lock3');\n+-----------------------+-----------------------+-----------------------+\n| RELEASE_LOCK('lock1') | RELEASE_LOCK('lock2') | RELEASE_LOCK('lock3') |\n+-----------------------+-----------------------+-----------------------+\n|                     1 |                     0 |                  NULL |\n+-----------------------+-----------------------+-----------------------+\n", "SELECT GET_LOCK('lock3',10);\n+----------------------+\n| GET_LOCK('lock3',10) |\n+----------------------+\n|                    1 |\n+----------------------+\n\nSELECT GET_LOCK('lock3',10);\n+----------------------+\n| GET_LOCK('lock3',10) |\n+----------------------+\n|                    1 |\n+----------------------+\n\nSELECT * FROM INFORMATION_SCHEMA.METADATA_LOCK_INFO;\n+-----------+---------------------+---------------+-----------+--------------+------------+\n| THREAD_ID | LOCK_MODE           | LOCK_DURATION | LOCK_TYPE | TABLE_SCHEMA | TABLE_NAME |\n+-----------+---------------------+---------------+-----------+--------------+------------+\n|        46 | MDL_SHARED_NO_WRITE | NULL          | User lock | lock3        |            |\n+-----------+---------------------+---------------+-----------+--------------+------------+\n\nSELECT RELEASE_LOCK('lock3');\n+-----------------------+\n| RELEASE_LOCK('lock3') |\n+-----------------------+\n|                     1 |\n+-----------------------+\n\nSELECT * FROM INFORMATION_SCHEMA.METADATA_LOCK_INFO;\n+-----------+---------------------+---------------+-----------+--------------+------------+\n| THREAD_ID | LOCK_MODE           | LOCK_DURATION | LOCK_TYPE | TABLE_SCHEMA | TABLE_NAME |\n+-----------+---------------------+---------------+-----------+--------------+------------+\n|        46 | MDL_SHARED_NO_WRITE | NULL          | User lock | lock3        |            |\n+-----------+---------------------+---------------+-----------+--------------+------------+\n\nSELECT RELEASE_LOCK('lock3');\n+-----------------------+\n| RELEASE_LOCK('lock3') |\n+-----------------------+\n|                     1 |\n+-----------------------+\n\nSELECT * FROM INFORMATION_SCHEMA.METADATA_LOCK_INFO;\nEmpty set (0.000 sec)\n"], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://mariadb.com//kb/en/repeat-function/"], "Title": ["REPEAT Function"], "Feature": ["REPEAT(str,count)\n"], "Description": ["Returns a string consisting of the string str repeated count times. If\ncount is less than 1, returns an empty string. Returns NULL if str or\ncount are NULL."], "Examples": ["SELECT QUOTE(REPEAT('MariaDB ',4));\n+------------------------------------+\n| QUOTE(REPEAT('MariaDB ',4))        |\n+------------------------------------+\n| 'MariaDB MariaDB MariaDB MariaDB ' |\n+------------------------------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/replace-function/"], "Title": ["REPLACE Function"], "Feature": ["REPLACE(str,from_str,to_str)\n"], "Description": ["Returns the string str with all occurrences of the string from_str\nreplaced by the string to_str. REPLACE() performs a case-sensitive\nmatch when searching for from_str."], "Examples": ["SELECT REPLACE('www.mariadb.org', 'w', 'Ww');\n+---------------------------------------+\n| REPLACE('www.mariadb.org', 'w', 'Ww') |\n+---------------------------------------+\n| WwWwWw.mariadb.org                    |\n+---------------------------------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/reverse/"], "Title": ["REVERSE"], "Feature": ["REVERSE(str)\n"], "Description": ["Returns the string str with the order of the characters reversed."], "Examples": ["SELECT REVERSE('desserts');\n+---------------------+\n| REVERSE('desserts') |\n+---------------------+\n| stressed            |\n+---------------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/right/"], "Title": ["RIGHT"], "Feature": ["RIGHT(str,len)\n"], "Description": ["Returns the rightmost len characters from the string str, or NULL if\nany argument is NULL."], "Examples": ["SELECT RIGHT('MariaDB', 2);\n+---------------------+\n| RIGHT('MariaDB', 2) |\n+---------------------+\n| DB                  |\n+---------------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/character_length/"], "Title": ["CHARACTER_LENGTH"], "Feature": ["CHARACTER_LENGTH(str)\n"], "Description": ["CHARACTER_LENGTH() is a synonym for CHAR_LENGTH()."], "Examples": [], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/rlike/"], "Title": ["RLIKE"], "Feature": ["expr REGEXP pat, expr RLIKE pat\n"], "Description": ["RLIKE is a synonym for REGEXP."], "Examples": [], "Category": ["Regular Expressions Functions"]}
{"HTML": ["https://mariadb.com//kb/en/round/"], "Title": ["ROUND"], "Feature": ["ROUND(X), ROUND(X,D)\n"], "Description": ["Rounds the argument X to D decimal places.  D defaults to 0 if not specified.\nD can be negative to cause D digits left of the decimal point of the\nvalue X to become zero.", "The rounding algorithm depends on the data type of X:", "for floating point types (FLOAT, DOUBLE) the C libraries rounding function is used, so the behavior *may* differ between operating systems\nfor fixed point types (DECIMAL, DEC/NUMBER/FIXED) the \"round half up\" rule is used, meaning that e.g. a value ending in exactly .5 is always rounded up.\n"], "Examples": ["SELECT ROUND(-1.23);\n+--------------+\n| ROUND(-1.23) |\n+--------------+\n|           -1 |\n+--------------+\n\nSELECT ROUND(-1.58);\n+--------------+\n| ROUND(-1.58) |\n+--------------+\n|           -2 |\n+--------------+\n\nSELECT ROUND(1.58); \n+-------------+\n| ROUND(1.58) |\n+-------------+\n|           2 |\n+-------------+\n\nSELECT ROUND(1.298, 1);\n+-----------------+\n| ROUND(1.298, 1) |\n+-----------------+\n|             1.3 |\n+-----------------+\n\nSELECT ROUND(1.298, 0);\n+-----------------+\n| ROUND(1.298, 0) |\n+-----------------+\n|               1 |\n+-----------------+\n\nSELECT ROUND(23.298, -1);\n+-------------------+\n| ROUND(23.298, -1) |\n+-------------------+\n|                20 |\n+-------------------+\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://mariadb.com//kb/en/row_count/"], "Title": ["ROW_COUNT"], "Feature": ["ROW_COUNT()\n"], "Description": ["ROW_COUNT() returns the number of rows updated, inserted or deleted\nby the preceding statement. This is the same as the row count that the\nmariadb client displays and the value from the mysql_affected_rows() C\nAPI function.", "Generally:", "For statements which return a result set (such as SELECT, SHOW, DESC or HELP), returns -1, even when the result set is empty. This is also true for administrative statements, such as OPTIMIZE.\nFor DML statements other than SELECT and for ALTER TABLE, returns the number of affected rows.\nFor DDL statements (including TRUNCATE) and for other statements which don't return any result set (such as USE, DO, SIGNAL or DEALLOCATE PREPARE), returns 0.\n", "For UPDATE, affected rows is by default the number of rows that were actually changed. If the CLIENT_FOUND_ROWS flag to mysql_real_connect() is specified when connecting to mariadbd, affected rows is instead the number of rows matched by the WHERE clause. ", "For REPLACE, deleted rows are also counted. So, if REPLACE deletes a row and adds a new row, ROW_COUNT() returns 2.", "For INSERT ... ON DUPLICATE KEY, updated rows are counted twice. So, if INSERT adds a new rows and modifies another row, ROW_COUNT() returns 3.", "ROW_COUNT() does not take into account rows that are not directly deleted/updated by the last statement. This means that rows deleted by foreign keys or triggers are not counted.", "Warning: You can use ROW_COUNT() with prepared statements, but you need to call it after EXECUTE, not after DEALLOCATE PREPARE, because the row count for allocate prepare is always 0.", "Warning: When used after a CALL statement, this function returns the number of rows affected by the last statement in the procedure, not by the whole procedure.", "Warning: After INSERT DELAYED, ROW_COUNT() returns the number of the rows you tried to insert, not the number of the successful writes.", "This information can also be found in the diagnostics area.", "Statements using the ROW_COUNT() function are not safe for statement-based replication."], "Examples": ["CREATE TABLE t (A INT);\n\nINSERT INTO t VALUES(1),(2),(3);\n\nSELECT ROW_COUNT();\n+-------------+\n| ROW_COUNT() |\n+-------------+\n|           3 |\n+-------------+\n\nDELETE FROM t WHERE A IN(1,2);\n\nSELECT ROW_COUNT(); \n+-------------+\n| ROW_COUNT() |\n+-------------+\n|           2 |\n+-------------+\n", "SET @q = 'INSERT INTO t VALUES(1),(2),(3);';\n\nPREPARE stmt FROM @q;\n\nEXECUTE stmt;\nQuery OK, 3 rows affected (0.39 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n\nSELECT ROW_COUNT();\n+-------------+\n| ROW_COUNT() |\n+-------------+\n|           3 |\n+-------------+\n"], "Category": ["Information Functions"]}
{"HTML": ["https://mariadb.com//kb/en/row_number/"], "Title": ["ROW_NUMBER"], "Feature": ["ROW_NUMBER() OVER (\n  [ PARTITION BY partition_expression ]\n  [ ORDER BY order_list ]\n) \n"], "Description": ["ROW_NUMBER() is a window function that displays the number of a given row, starting at one and following the ORDER BY sequence of the window function, with identical values receiving different row numbers. It is similar to the RANK() and DENSE_RANK() functions except that in that function, identical values will receive the same rank for each result."], "Examples": ["CREATE TABLE student(course VARCHAR(10), mark int, name varchar(10));\n\nINSERT INTO student VALUES \n  ('Maths', 60, 'Thulile'),\n  ('Maths', 60, 'Pritha'),\n  ('Maths', 70, 'Voitto'),\n  ('Maths', 55, 'Chun'),\n  ('Biology', 60, 'Bilal'),\n   ('Biology', 70, 'Roger');\n\nSELECT \n  RANK() OVER (PARTITION BY course ORDER BY mark DESC) AS rank, \n  DENSE_RANK() OVER (PARTITION BY course ORDER BY mark DESC) AS dense_rank, \n  ROW_NUMBER() OVER (PARTITION BY course ORDER BY mark DESC) AS row_num, \n  course, mark, name \nFROM student ORDER BY course, mark DESC;\n+------+------------+---------+---------+------+---------+\n| rank | dense_rank | row_num | course  | mark | name    |\n+------+------------+---------+---------+------+---------+\n|    1 |          1 |       1 | Biology |   70 | Roger   |\n|    2 |          2 |       2 | Biology |   60 | Bilal   |\n|    1 |          1 |       1 | Maths   |   70 | Voitto  |\n|    2 |          2 |       2 | Maths   |   60 | Thulile |\n|    2 |          2 |       3 | Maths   |   60 | Pritha  |\n|    4 |          3 |       4 | Maths   |   55 | Chun    |\n+------+------------+---------+---------+------+---------+\n"], "Category": ["Window Functions"]}
{"HTML": ["https://mariadb.com//kb/en/rpad/"], "Title": ["RPAD"], "Feature": ["RPAD(str, len [, padstr])\n"], "Description": ["Returns the string str, right-padded with the string padstr to a\nlength of len characters. If str is longer than len, the return value\nis shortened to len characters. If padstr is omitted, the RPAD function pads spaces.", "Prior to MariaDB 10.3.1, the padstr parameter was mandatory.", "Returns NULL if given a NULL argument. If the result is empty (a length of zero), returns either an empty string, or, from MariaDB 10.3.6 with SQL_MODE=Oracle, NULL.", "The Oracle mode version of the function can be accessed outside of Oracle mode by using RPAD_ORACLE as the function name."], "Examples": ["SELECT RPAD('hello',10,'.');\n+----------------------+\n| RPAD('hello',10,'.') |\n+----------------------+\n| hello.....           |\n+----------------------+\n\nSELECT RPAD('hello',2,'.');\n+---------------------+\n| RPAD('hello',2,'.') |\n+---------------------+\n| he                  |\n+---------------------+\n", "SELECT RPAD('hello',30);\n+--------------------------------+\n| RPAD('hello',30)               |\n+--------------------------------+\n| hello                          |\n+--------------------------------+\n", "SELECT RPAD('',0),RPAD_ORACLE('',0);\n+------------+-------------------+\n| RPAD('',0) | RPAD_ORACLE('',0) |\n+------------+-------------------+\n|            | NULL              |\n+------------+-------------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/rtrim/"], "Title": ["RTRIM"], "Feature": ["RTRIM(str)\n"], "Description": ["Returns the string str with trailing space characters removed.", "Returns NULL if given a NULL argument. If the result is empty, returns either an empty string, or, from MariaDB 10.3.6 with SQL_MODE=Oracle, NULL.", "The Oracle mode version of the function can be accessed outside of Oracle mode by using RTRIM_ORACLE as the function name."], "Examples": ["SELECT QUOTE(RTRIM('MariaDB    '));\n+-----------------------------+\n| QUOTE(RTRIM('MariaDB    ')) |\n+-----------------------------+\n| 'MariaDB'                   |\n+-----------------------------+\n", "SELECT RTRIM(''),RTRIM_ORACLE('');\n+-----------+------------------+\n| RTRIM('') | RTRIM_ORACLE('') |\n+-----------+------------------+\n|           | NULL             |\n+-----------+------------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/schema/"], "Title": ["SCHEMA"], "Feature": ["SCHEMA()\n"], "Description": ["This function is a synonym for DATABASE()."], "Examples": [], "Category": ["Information Functions"]}
{"HTML": ["https://mariadb.com//kb/en/second/"], "Title": ["SECOND"], "Feature": ["SECOND(time)\n"], "Description": ["Returns the second for a given time (which can include microseconds), in the range 0 to 59, or NULL if not given a valid time value."], "Examples": ["SELECT SECOND('10:05:03');\n+--------------------+\n| SECOND('10:05:03') |\n+--------------------+\n|                  3 |\n+--------------------+\n\nSELECT SECOND('10:05:01.999999');\n+---------------------------+\n| SECOND('10:05:01.999999') |\n+---------------------------+\n|                         1 |\n+---------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/sec_to_time/"], "Title": ["SEC_TO_TIME"], "Feature": ["SEC_TO_TIME(seconds)\n"], "Description": ["Returns the seconds argument, converted to hours, minutes, and\nseconds, as a TIME value. The range of the result is constrained to\nthat of the TIME data type. A warning occurs if the argument\ncorresponds to a value outside that range.", "The time will be returned in the format hh:mm:ss, or hhmmss if used in a numeric calculation."], "Examples": ["SELECT SEC_TO_TIME(12414);\n+--------------------+\n| SEC_TO_TIME(12414) |\n+--------------------+\n| 03:26:54           |\n+--------------------+\n\nSELECT SEC_TO_TIME(12414)+0;\n+----------------------+\n| SEC_TO_TIME(12414)+0 |\n+----------------------+\n|                32654 |\n+----------------------+\n\nSELECT SEC_TO_TIME(9999999);\n+----------------------+\n| SEC_TO_TIME(9999999) |\n+----------------------+\n| 838:59:59            |\n+----------------------+\n1 row in set, 1 warning (0.00 sec)\n\nSHOW WARNINGS;\n+---------+------+-------------------------------------------+\n| Level   | Code | Message                                   |\n+---------+------+-------------------------------------------+\n| Warning | 1292 | Truncated incorrect time value: '9999999' |\n+---------+------+-------------------------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/session_user/"], "Title": ["SESSION_USER"], "Feature": ["SESSION_USER()\n"], "Description": ["SESSION_USER() is a synonym for USER()."], "Examples": [], "Category": ["Information Functions"]}
{"HTML": ["https://mariadb.com//kb/en/charset/"], "Title": ["CHARSET"], "Feature": ["CHARSET(str)\n"], "Description": ["Returns the character set of the string argument. If str is not a string, it is considered as a binary string (so the function returns 'binary'). This applies to NULL, too.  The return value is a string in the utf8 character set."], "Examples": ["SELECT CHARSET('abc');\n+----------------+\n| CHARSET('abc') |\n+----------------+\n| latin1         |\n+----------------+\n\nSELECT CHARSET(CONVERT('abc' USING utf8));\n+------------------------------------+\n| CHARSET(CONVERT('abc' USING utf8)) |\n+------------------------------------+\n| utf8                               |\n+------------------------------------+\n\nSELECT CHARSET(USER());\n+-----------------+\n| CHARSET(USER()) |\n+-----------------+\n| utf8            |\n+-----------------+\n"], "Category": ["Information Functions"]}
{"HTML": ["https://mariadb.com//kb/en/setval/"], "Title": ["SETVAL"], "Feature": ["SETVAL(sequence_name, next_value, [is_used, [round]])\n"], "Description": ["Set the next value to be returned for a SEQUENCE.", "This function is compatible with PostgreSQL syntax, extended\nwith the round argument.", "If the is_used argument is not given or is 1 or true, then the next used value will\none after the given value. If is_used is 0 or false then the next generated value\nwill be the given value.", "If round is used then it will set the round value (or the internal cycle count, starting at zero) for the sequence.\nIf round is not used, it's assumed to be 0.", "next_value must be an integer literal.", "For SEQUENCE tables defined with CYCLE (see CREATE SEQUENCE) one should use both next_value and round to define the next value. In this case the\ncurrent sequence value is defined to be round, next_value.", "The result returned by SETVAL() is next_value or NULL if the given next_value and round  is smaller than the current value.", "SETVAL() will not set the SEQUENCE value to a something that is less than\nits current value. This is needed to ensure that SETVAL()\nis replication safe.  If you want to set the SEQUENCE to a smaller number\nuse ALTER SEQUENCE.", "If CYCLE is used, first round and then next_value are compared\nto see if the value is bigger than the current value.", "Internally, in the MariaDB server, SETVAL() is used to inform\nreplicas that a SEQUENCE has changed value.  The replica may get\nSETVAL() statements out of order, but this is ok as only the\nbiggest one will have an effect.", "SETVAL requires the INSERT privilege."], "Examples": ["SELECT setval(foo, 42);           -- Next nextval will return 43\nSELECT setval(foo, 42, true);     -- Same as above\nSELECT setval(foo, 42, false);    -- Next nextval will return 42\n", "SELECT NEXTVAL(s);\n+------------+\n| NEXTVAL(s) |\n+------------+\n|         50 |\n+------------+\n\nSELECT SETVAL(s, 100);\n+----------------+\n| SETVAL(s, 100) |\n+----------------+\n|            100 |\n+----------------+\n\nSELECT NEXTVAL(s);\n+------------+\n| NEXTVAL(s) |\n+------------+\n|        110 |\n+------------+\n\nSELECT SETVAL(s, 50);\n+---------------+\n| SETVAL(s, 50) |\n+---------------+\n|          NULL |\n+---------------+\n\nSELECT NEXTVAL(s);\n+------------+\n| NEXTVAL(s) |\n+------------+\n|        120 |\n+------------+\n", "CREATE OR REPLACE SEQUENCE s1\n  START WITH 1\n  MINVALUE 1\n  MAXVALUE 99\n  INCREMENT BY 1 \n  CACHE 20 \n  CYCLE;\n\nSELECT SETVAL(s1, 99, 1, 0);\n+----------------------+\n| SETVAL(s1, 99, 1, 0) |\n+----------------------+\n|                   99 |\n+----------------------+\n\nSELECT NEXTVAL(s1);\n+-------------+\n| NEXTVAL(s1) |\n+-------------+\n|           1 |\n+-------------+\n", "SELECT SETVAL(s1, 99, 1, 0);\n+----------------------+\n| SETVAL(s1, 99, 1, 0) |\n+----------------------+\n|                 NULL |\n+----------------------+\n\nSELECT NEXTVAL(s1);\n+-------------+\n| NEXTVAL(s1) |\n+-------------+\n|           2 |\n+-------------+\n", "SELECT SETVAL(s1, 99, 1, 1);\n+----------------------+\n| SETVAL(s1, 99, 1, 1) |\n+----------------------+\n|                   99 |\n+----------------------+\n\nSELECT NEXTVAL(s1);\n+-------------+\n| NEXTVAL(s1) |\n+-------------+\n|           1 |\n+-------------+\n"], "Category": ["SEQUENCE Functions"]}
{"HTML": ["https://mariadb.com//kb/en/sha1/"], "Title": ["SHA1"], "Feature": ["SHA1(str), SHA(str)\n"], "Description": ["Calculates an SHA-1 160-bit checksum for the string str, as described in\nRFC 3174 (Secure Hash Algorithm).", "The value is returned as a string of 40 hex digits, or NULL if the argument was NULL. As of MariaDB 5.5, the return value is a nonbinary string in the connection character set and collation, determined by the values of the character_set_connection and collation_connection system variables. Before 5.5, the return value was a binary string."], "Examples": ["SELECT SHA1('some boring text');\n+------------------------------------------+\n| SHA1('some boring text')                 |\n+------------------------------------------+\n| af969fc2085b1bb6d31e517d5c456def5cdd7093 |\n+------------------------------------------+\n"], "Category": ["Encryption, Hashing and Compression Functions"]}
{"HTML": ["https://mariadb.com//kb/en/sha2/"], "Title": ["SHA2"], "Feature": ["SHA2(str,hash_len)\n"], "Description": ["Given a string str, calculates an SHA-2 checksum, which is considered more cryptographically secure than its SHA-1 equivalent. The SHA-2 family includes SHA-224, SHA-256, SHA-384, and SHA-512, and the hash_len must correspond to one of these, i.e. 224, 256, 384 or 512. 0 is equivalent to 256.", "The return value is a nonbinary string in the connection character set and collation, determined by the values of the character_set_connection and collation_connection system variables. ", "NULL is returned if the hash length is not valid, or the string str is NULL.", "SHA2 will only work if MariaDB was has been configured with TLS support. "], "Examples": ["SELECT SHA2('Maria',224);\n+----------------------------------------------------------+\n| SHA2('Maria',224)                                        |\n+----------------------------------------------------------+\n| 6cc67add32286412efcab9d0e1675a43a5c2ef3cec8879f81516ff83 |\n+----------------------------------------------------------+\n\nSELECT SHA2('Maria',256);\n+------------------------------------------------------------------+\n| SHA2('Maria',256)                                                |\n+------------------------------------------------------------------+\n| 9ff18ebe7449349f358e3af0b57cf7a032c1c6b2272cb2656ff85eb112232f16 |\n+------------------------------------------------------------------+\n\nSELECT SHA2('Maria',0);\n+------------------------------------------------------------------+\n| SHA2('Maria',0)                                                  |\n+------------------------------------------------------------------+\n| 9ff18ebe7449349f358e3af0b57cf7a032c1c6b2272cb2656ff85eb112232f16 |\n+------------------------------------------------------------------+\n"], "Category": ["Encryption, Hashing and Compression Functions"]}
{"HTML": ["https://mariadb.com//kb/en/sign/"], "Title": ["SIGN"], "Feature": ["SIGN(X)\n"], "Description": ["Returns the sign of the argument as -1, 0, or 1, depending on whether\nX is negative, zero, or positive."], "Examples": ["SELECT SIGN(-32);\n+-----------+\n| SIGN(-32) |\n+-----------+\n|        -1 |\n+-----------+\n\nSELECT SIGN(0);\n+---------+\n| SIGN(0) |\n+---------+\n|       0 |\n+---------+\n\nSELECT SIGN(234);\n+-----------+\n| SIGN(234) |\n+-----------+\n|         1 |\n+-----------+\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://mariadb.com//kb/en/sin/"], "Title": ["SIN"], "Feature": ["SIN(X)\n"], "Description": ["Returns the sine of X, where X is given in radians."], "Examples": ["SELECT SIN(1.5707963267948966);\n+-------------------------+\n| SIN(1.5707963267948966) |\n+-------------------------+\n|                       1 |\n+-------------------------+\n\nSELECT SIN(PI());\n+----------------------+\n| SIN(PI())            |\n+----------------------+\n| 1.22460635382238e-16 |\n+----------------------+\n\nSELECT ROUND(SIN(PI()));\n+------------------+\n| ROUND(SIN(PI())) |\n+------------------+\n|                0 |\n+------------------+\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://mariadb.com//kb/en/sleep/"], "Title": ["SLEEP"], "Feature": ["SLEEP(duration)\n"], "Description": ["Sleeps (pauses) for the number of seconds given by the duration argument, then\nreturns 0. If SLEEP() is interrupted, it\nreturns 1. The duration may have a fractional part given in\nmicroseconds.", "Statements using the SLEEP() function are not safe for statement-based replication."], "Examples": ["SELECT SLEEP(5.5);\n+------------+\n| SLEEP(5.5) |\n+------------+\n|          0 |\n+------------+\n1 row in set (5.50 sec)\n"], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://mariadb.com//kb/en/soundex/"], "Title": ["SOUNDEX"], "Feature": ["SOUNDEX(str)\n"], "Description": ["Returns a soundex string from str. Two strings that sound almost the\nsame should have identical soundex strings. A standard soundex string is four\ncharacters long, but the SOUNDEX() function returns an arbitrarily long\nstring. You can use SUBSTRING() on the result to get a standard soundex\nstring. All non-alphabetic characters in str are ignored. All\ninternational alphabetic characters outside the A-Z range are treated as\nvowels.", "Important: When using SOUNDEX(), you should be aware of the\nfollowing details:", "This function, as currently implemented, is intended to work well with\n  strings that are in the English language only. Strings in other languages may\n  not produce reasonable results.\n", "This function implements the original Soundex algorithm, not the more popular enhanced version (also described by D. Knuth). The difference is that original version discards vowels first and duplicates second, whereas the enhanced version discards duplicates first and vowels second. \n"], "Examples": ["SOUNDEX('Hello');\n+------------------+\n| SOUNDEX('Hello') |\n+------------------+\n| H400             |\n+------------------+\n", "SELECT SOUNDEX('MariaDB');\n+--------------------+\n| SOUNDEX('MariaDB') |\n+--------------------+\n| M631               |\n+--------------------+\n", "SELECT SOUNDEX('Knowledgebase');\n+--------------------------+\n| SOUNDEX('Knowledgebase') |\n+--------------------------+\n| K543212                  |\n+--------------------------+\n", "SELECT givenname, surname FROM users WHERE SOUNDEX(givenname) = SOUNDEX(\"robert\");\n+-----------+---------+\n| givenname | surname |\n+-----------+---------+\n| Roberto   | Castro  |\n+-----------+---------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/sounds-like/"], "Title": ["SOUNDS LIKE"], "Feature": ["expr1 SOUNDS LIKE expr2\n"], "Description": ["This is the same as SOUNDEX(expr1) = SOUNDEX(expr2)."], "Examples": ["SELECT givenname, surname FROM users WHERE givenname SOUNDS LIKE \"robert\";\n+-----------+---------+\n| givenname | surname |\n+-----------+---------+\n| Roberto   | Castro  |\n+-----------+---------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/space/"], "Title": ["SPACE"], "Feature": ["SPACE(N)\n"], "Description": ["Returns a string consisting of N space characters. If N is NULL, returns NULL."], "Examples": ["SELECT QUOTE(SPACE(6));\n+-----------------+\n| QUOTE(SPACE(6)) |\n+-----------------+\n| '      '        |\n+-----------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/spider_bg_direct_sql/"], "Title": ["SPIDER_BG_DIRECT_SQL"], "Feature": ["SPIDER_BG_DIRECT_SQL('sql', 'tmp_table_list', 'parameters')\n"], "Description": ["Executes the given SQL statement in the background on the remote server, as defined in the parameters listing.  If the query returns a result-set, it sttores the results in the given temporary table.  When the given SQL statement executes successfully, this function returns the number of called UDF's.  It returns 0 when the given SQL statement fails.", "This function is a UDF installed with the Spider storage engine."], "Examples": ["SELECT SPIDER_BG_DIRECT_SQL('SELECT * FROM example_table',  '', \n   'srv \"node1\", port \"8607\"') AS \"Direct Query\";\n+--------------+\n| Direct Query | \n+--------------+\n|            1 |\n+--------------+\n"], "Category": ["Spider Functions"]}
{"HTML": ["https://mariadb.com//kb/en/char_length/"], "Title": ["CHAR_LENGTH"], "Feature": ["CHAR_LENGTH(str)\nCHARACTER_LENGTH(str)\n"], "Description": ["Returns the length of the given string argument, measured in characters. A multi-byte character counts as a single character. This means that for a string containing five two-byte characters, LENGTH() (or OCTET_LENGTH() in Oracle mode) returns 10, whereas CHAR_LENGTH() returns 5. If the argument is NULL, it returns NULL. ", "If the argument is not a string value, it is converted into a string.", "It is synonymous with the CHARACTER_LENGTH() function."], "Examples": ["SELECT CHAR_LENGTH('MariaDB');\n+------------------------+\n| CHAR_LENGTH('MariaDB') |\n+------------------------+\n|                      7 |\n+------------------------+\n", "SELECT CHAR_LENGTH('\u03c0'), LENGTH('\u03c0'), LENGTHB('\u03c0'), OCTET_LENGTH('\u03c0');\n+-------------------+--------------+---------------+--------------------+\n| CHAR_LENGTH('\u03c0')  | LENGTH('\u03c0')  | LENGTHB('\u03c0')  | OCTET_LENGTH('\u03c0')  |\n+-------------------+--------------+---------------+--------------------+\n|                 1 |            2 |             2 |                  2 |\n+-------------------+--------------+---------------+--------------------+\n", "SELECT CHAR_LENGTH('\u03c0'), LENGTH('\u03c0'), LENGTHB('\u03c0'), OCTET_LENGTH('\u03c0');\n+-------------------+--------------+---------------+--------------------+\n| CHAR_LENGTH('\u03c0')  | LENGTH('\u03c0')  | LENGTHB('\u03c0')  | OCTET_LENGTH('\u03c0')  |\n+-------------------+--------------+---------------+--------------------+\n|                 1 |            1 |             2 |                  2 |\n+-------------------+--------------+---------------+--------------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/spider_copy_tables/"], "Title": ["SPIDER_COPY_TABLES"], "Feature": ["SPIDER_COPY_TABLES(spider_table_name, \n  source_link_id, destination_link_id_list [,parameters])\n"], "Description": ["A UDF installed with the Spider Storage Engine, this function copies table data from source_link_id to destination_link_id_list. The service does not need to be stopped in order to copy.", "If the Spider table is partitioned, the name must be of the format table_name#P#partition_name. The partition name can be viewed in the mysql.spider_tables table, for example:", "SELECT table_name FROM mysql.spider_tables;\n+-------------+\n| table_name  |\n+-------------+\n| spt_a#P#pt1 |\n| spt_a#P#pt2 |\n| spt_a#P#pt3 |\n+-------------+\n", "Returns 1 if the data was copied successfully, or 0 if copying the data failed."], "Examples": [], "Category": ["Spider Functions"]}
{"HTML": ["https://mariadb.com//kb/en/spider_direct_sql/"], "Title": ["SPIDER_DIRECT_SQL"], "Feature": ["SPIDER_DIRECT_SQL('sql', 'tmp_table_list', 'parameters')\n"], "Description": ["A UDF installed with the Spider Storage Engine, this function is used to execute the SQL string sql on the remote server, as defined in parameters. If any resultsets are returned, they are stored in the tmp_table_list.", "The function returns 1 if the SQL executes successfully, or 0 if it fails."], "Examples": ["SELECT SPIDER_DIRECT_SQL('SELECT * FROM s', '', 'srv \"node1\", port \"8607\"');\n+----------------------------------------------------------------------+\n| SPIDER_DIRECT_SQL('SELECT * FROM s', '', 'srv \"node1\", port \"8607\"') |\n+----------------------------------------------------------------------+\n|                                                                    1 |\n+----------------------------------------------------------------------+\n"], "Category": ["Spider Functions"]}
{"HTML": ["https://mariadb.com//kb/en/spider_flush_table_mon_cache/"], "Title": ["SPIDER_FLUSH_TABLE_MON_CACHE"], "Feature": ["SPIDER_FLUSH_TABLE_MON_CACHE()\n"], "Description": ["A UDF installed with the Spider Storage Engine, this function is used for refreshing monitoring server information. It returns a value of 1."], "Examples": ["SELECT SPIDER_FLUSH_TABLE_MON_CACHE();\n+--------------------------------+\n| SPIDER_FLUSH_TABLE_MON_CACHE() |\n+--------------------------------+\n|                              1 |\n+--------------------------------+\n"], "Category": ["Spider Functions"]}
{"HTML": ["https://mariadb.com//kb/en/sqrt/"], "Title": ["SQRT"], "Feature": ["SQRT(X)\n"], "Description": ["Returns the square root of X. If X is negative, NULL is returned."], "Examples": ["SELECT SQRT(4);\n+---------+\n| SQRT(4) |\n+---------+\n|       2 |\n+---------+\n\nSELECT SQRT(20);\n+------------------+\n| SQRT(20)         |\n+------------------+\n| 4.47213595499958 |\n+------------------+\n\nSELECT SQRT(-16);\n+-----------+\n| SQRT(-16) |\n+-----------+\n|      NULL |\n+-----------+\n\nSELECT SQRT(1764);\n+------------+\n| SQRT(1764) |\n+------------+\n|         42 |\n+------------+\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://mariadb.com//kb/en/std/"], "Title": ["STD"], "Feature": ["STD(expr)\n"], "Description": ["Returns the population standard deviation of expr. This is an extension\nto standard SQL. The standard SQL function STDDEV_POP() can\nbe used instead. ", "It is an aggregate function, and so can be used with the GROUP BY clause.", "STD() can be used as a window function.", "This function returns NULL if there were no matching rows."], "Examples": ["CREATE OR REPLACE TABLE stats (category VARCHAR(2), x INT);\n\nINSERT INTO stats VALUES \n  ('a',1),('a',2),('a',3),\n  ('b',11),('b',12),('b',20),('b',30),('b',60);\n\nSELECT category, STDDEV_POP(x), STDDEV_SAMP(x), VAR_POP(x) \n  FROM stats GROUP BY category;\n+----------+---------------+----------------+------------+\n| category | STDDEV_POP(x) | STDDEV_SAMP(x) | VAR_POP(x) |\n+----------+---------------+----------------+------------+\n| a        |        0.8165 |         1.0000 |     0.6667 |\n| b        |       18.0400 |        20.1693 |   325.4400 |\n+----------+---------------+----------------+------------+\n", "CREATE OR REPLACE TABLE student_test (name CHAR(10), test CHAR(10), score TINYINT);\n\nINSERT INTO student_test VALUES \n    ('Chun', 'SQL', 75), ('Chun', 'Tuning', 73), \n    ('Esben', 'SQL', 43), ('Esben', 'Tuning', 31), \n    ('Kaolin', 'SQL', 56), ('Kaolin', 'Tuning', 88), \n    ('Tatiana', 'SQL', 87);\n\nSELECT name, test, score, STDDEV_POP(score) \n  OVER (PARTITION BY test) AS stddev_results FROM student_test;\n+---------+--------+-------+----------------+\n| name    | test   | score | stddev_results |\n+---------+--------+-------+----------------+\n| Chun    | SQL    |    75 |        16.9466 |\n| Chun    | Tuning |    73 |        24.1247 |\n| Esben   | SQL    |    43 |        16.9466 |\n| Esben   | Tuning |    31 |        24.1247 |\n| Kaolin  | SQL    |    56 |        16.9466 |\n| Kaolin  | Tuning |    88 |        24.1247 |\n| Tatiana | SQL    |    87 |        16.9466 |\n+---------+--------+-------+----------------+\n"], "Category": ["Aggregate Functions"]}
{"HTML": ["https://mariadb.com//kb/en/stddev/"], "Title": ["STDDEV"], "Feature": ["STDDEV(expr)\n"], "Description": ["Returns the population standard deviation of expr. This function is\nprovided for compatibility with Oracle. The standard SQL function\nSTDDEV_POP() can be used instead.", "It is an aggregate function, and so can be used with the GROUP BY clause.", "STDDEV() can be used as a window function.", "This function returns NULL if there were no matching rows."], "Examples": ["CREATE OR REPLACE TABLE stats (category VARCHAR(2), x INT);\n\nINSERT INTO stats VALUES \n  ('a',1),('a',2),('a',3),\n  ('b',11),('b',12),('b',20),('b',30),('b',60);\n\nSELECT category, STDDEV_POP(x), STDDEV_SAMP(x), VAR_POP(x) \n  FROM stats GROUP BY category;\n+----------+---------------+----------------+------------+\n| category | STDDEV_POP(x) | STDDEV_SAMP(x) | VAR_POP(x) |\n+----------+---------------+----------------+------------+\n| a        |        0.8165 |         1.0000 |     0.6667 |\n| b        |       18.0400 |        20.1693 |   325.4400 |\n+----------+---------------+----------------+------------+\n", "CREATE OR REPLACE TABLE student_test (name CHAR(10), test CHAR(10), score TINYINT);\n\nINSERT INTO student_test VALUES \n    ('Chun', 'SQL', 75), ('Chun', 'Tuning', 73), \n    ('Esben', 'SQL', 43), ('Esben', 'Tuning', 31), \n    ('Kaolin', 'SQL', 56), ('Kaolin', 'Tuning', 88), \n    ('Tatiana', 'SQL', 87);\n\nSELECT name, test, score, STDDEV_POP(score) \n  OVER (PARTITION BY test) AS stddev_results FROM student_test;\n+---------+--------+-------+----------------+\n| name    | test   | score | stddev_results |\n+---------+--------+-------+----------------+\n| Chun    | SQL    |    75 |        16.9466 |\n| Chun    | Tuning |    73 |        24.1247 |\n| Esben   | SQL    |    43 |        16.9466 |\n| Esben   | Tuning |    31 |        24.1247 |\n| Kaolin  | SQL    |    56 |        16.9466 |\n| Kaolin  | Tuning |    88 |        24.1247 |\n| Tatiana | SQL    |    87 |        16.9466 |\n+---------+--------+-------+----------------+\n"], "Category": ["Aggregate Functions"]}
{"HTML": ["https://mariadb.com//kb/en/stddev_pop/"], "Title": ["STDDEV_POP"], "Feature": ["STDDEV_POP(expr)\n"], "Description": ["Returns the population standard deviation of expr (the square root of\nVAR_POP()). You can also use STD() or\nSTDDEV(), which are equivalent but not standard SQL.", "It is an aggregate function, and so can be used with the GROUP BY clause.", "STDDEV_POP() can be used as a window function.", "STDDEV_POP() returns NULL if there were no matching rows."], "Examples": ["CREATE OR REPLACE TABLE stats (category VARCHAR(2), x INT);\n\nINSERT INTO stats VALUES \n  ('a',1),('a',2),('a',3),\n  ('b',11),('b',12),('b',20),('b',30),('b',60);\n\nSELECT category, STDDEV_POP(x), STDDEV_SAMP(x), VAR_POP(x) \n  FROM stats GROUP BY category;\n+----------+---------------+----------------+------------+\n| category | STDDEV_POP(x) | STDDEV_SAMP(x) | VAR_POP(x) |\n+----------+---------------+----------------+------------+\n| a        |        0.8165 |         1.0000 |     0.6667 |\n| b        |       18.0400 |        20.1693 |   325.4400 |\n+----------+---------------+----------------+------------+\n", "CREATE OR REPLACE TABLE student_test (name CHAR(10), test CHAR(10), score TINYINT);\n\nINSERT INTO student_test VALUES \n    ('Chun', 'SQL', 75), ('Chun', 'Tuning', 73), \n    ('Esben', 'SQL', 43), ('Esben', 'Tuning', 31), \n    ('Kaolin', 'SQL', 56), ('Kaolin', 'Tuning', 88), \n    ('Tatiana', 'SQL', 87);\n\nSELECT name, test, score, STDDEV_POP(score) \n  OVER (PARTITION BY test) AS stddev_results FROM student_test;\n+---------+--------+-------+----------------+\n| name    | test   | score | stddev_results |\n+---------+--------+-------+----------------+\n| Chun    | SQL    |    75 |        16.9466 |\n| Chun    | Tuning |    73 |        24.1247 |\n| Esben   | SQL    |    43 |        16.9466 |\n| Esben   | Tuning |    31 |        24.1247 |\n| Kaolin  | SQL    |    56 |        16.9466 |\n| Kaolin  | Tuning |    88 |        24.1247 |\n| Tatiana | SQL    |    87 |        16.9466 |\n+---------+--------+-------+----------------+\n"], "Category": ["Aggregate Functions"]}
{"HTML": ["https://mariadb.com//kb/en/stddev_samp/"], "Title": ["STDDEV_SAMP"], "Feature": ["STDDEV_SAMP(expr)\n"], "Description": ["Returns the sample standard deviation of expr (the square root of VAR_SAMP()).", "It is an aggregate function, and so can be used with the GROUP BY clause.", "STDDEV_SAMP() can be used as a window function.", "STDDEV_SAMP() returns NULL if there were no matching rows."], "Examples": [], "Category": ["Aggregate Functions"]}
{"HTML": ["https://mariadb.com//kb/en/strcmp/"], "Title": ["STRCMP"], "Feature": ["STRCMP(expr1,expr2)\n"], "Description": ["STRCMP() returns 0 if the strings are the same, -1 if the first\nargument is smaller than the second according to the current sort order,\nand 1 if the strings are otherwise not the same. Returns NULL is either argument is NULL."], "Examples": ["SELECT STRCMP('text', 'text2');\n+-------------------------+\n| STRCMP('text', 'text2') |\n+-------------------------+\n|                      -1 |\n+-------------------------+\n\nSELECT STRCMP('text2', 'text');\n+-------------------------+\n| STRCMP('text2', 'text') |\n+-------------------------+\n|                       1 |\n+-------------------------+\n\nSELECT STRCMP('text', 'text');\n+------------------------+\n| STRCMP('text', 'text') |\n+------------------------+\n|                      0 |\n+------------------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/str_to_date/"], "Title": ["STR_TO_DATE"], "Feature": ["STR_TO_DATE(str,format)\n"], "Description": ["This is the inverse of the DATE_FORMAT() function. It takes\na string str and a format string format. STR_TO_DATE() returns a\nDATETIME value if the format string contains both date and time parts, or a\nDATE or TIME value if the string contains only date or time parts.", "The date, time, or datetime values contained in str should be given in the format indicated by format. If str contains an illegal date, time, or datetime value, STR_TO_DATE() returns NULL. An illegal value also produces a warning.", "Under specific SQL_MODE settings an error may also be generated if the str isn't a valid date:", "ALLOW_INVALID_DATES\nNO_ZERO_DATE\nNO_ZERO_IN_DATE\n", "The options that can be used by STR_TO_DATE(), as well as its inverse DATE_FORMAT() and the FROM_UNIXTIME() function, are:", "OptionDescription\n%aShort weekday name in current locale (Variable lc_time_names).\n%bShort form month name in current locale. For locale en_US this is one of: Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov or Dec.\n%cMonth with 1 or 2 digits.\n%DDay with English suffix 'th', 'nd', 'st' or 'rd''. (1st, 2nd, 3rd...).\n%dDay with 2 digits.\n%eDay with 1 or 2 digits.\n%fMicroseconds 6 digits.\n%HHour with 2 digits between 00-23.\n%hHour with 2 digits between 01-12.\n%IHour with 2 digits between 01-12.\n%iMinute with 2 digits.\n%jDay of the year (001-366)\n%kHour with 1 digits between 0-23.\n%lHour with 1 digits between 1-12.\n%MFull month name in current locale (Variable lc_time_names).\n%mMonth with 2 digits.\n%pAM/PM according to current locale (Variable lc_time_names).\n%rTime in 12 hour format, followed by AM/PM. Short for '%I:%i:%S %p'.\n%SSeconds with 2 digits.\n%sSeconds with 2 digits.\n%TTime in 24 hour format. Short for '%H:%i:%S'.\n%UWeek number (00-53), when first day of the week is Sunday.\n%uWeek number (00-53), when first day of the week is Monday.\n%VWeek number (01-53), when first day of the week is Sunday. Used with %X.\n%vWeek number (01-53), when first day of the week is Monday. Used with %x.\n%WFull weekday name in current locale (Variable lc_time_names).\n%wDay of the week. 0 = Sunday, 6 = Saturday.\n%XYear with 4 digits when first day of the week is Sunday. Used with %V.\n%xYear with 4 digits when first day of the week is Monday. Used with %v.\n%YYear with 4 digits.\n%yYear with 2 digits.\n%#For str_to_date(), skip all numbers.\n%.For str_to_date(), skip all punctation characters.\n%@For str_to_date(), skip all alpha characters.\n%%A literal % character.\n\n"], "Examples": ["SELECT STR_TO_DATE('Wednesday, June 2, 2014', '%W, %M %e, %Y');\n+---------------------------------------------------------+\n| STR_TO_DATE('Wednesday, June 2, 2014', '%W, %M %e, %Y') |\n+---------------------------------------------------------+\n| 2014-06-02                                              |\n+---------------------------------------------------------+\n\n\nSELECT STR_TO_DATE('Wednesday23423, June 2, 2014', '%W, %M %e, %Y');\n+--------------------------------------------------------------+\n| STR_TO_DATE('Wednesday23423, June 2, 2014', '%W, %M %e, %Y') |\n+--------------------------------------------------------------+\n| NULL                                                         |\n+--------------------------------------------------------------+\n1 row in set, 1 warning (0.00 sec)\n\nSHOW WARNINGS;\n+---------+------+-----------------------------------------------------------------------------------+\n| Level   | Code | Message                                                                           |\n+---------+------+-----------------------------------------------------------------------------------+\n| Warning | 1411 | Incorrect datetime value: 'Wednesday23423, June 2, 2014' for function str_to_date |\n+---------+------+-----------------------------------------------------------------------------------+\n\nSELECT STR_TO_DATE('Wednesday23423, June 2, 2014', '%W%#, %M %e, %Y');\n+----------------------------------------------------------------+\n| STR_TO_DATE('Wednesday23423, June 2, 2014', '%W%#, %M %e, %Y') |\n+----------------------------------------------------------------+\n| 2014-06-02                                                     |\n+----------------------------------------------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/chr/"], "Title": ["CHR"], "Feature": ["CHR(N)\n"], "Description": ["CHR() interprets each argument N as an integer and returns a VARCHAR(1) string consisting of the character given by the code values of the integer. The character set and collation of the string are set according to the values of the character_set_database and collation_database system variables.", "CHR() is similar to the CHAR() function, but only accepts a single argument.", "CHR() is available in all sql_modes."], "Examples": ["SELECT CHR(67);\n+---------+\n| CHR(67) |\n+---------+\n| C       |\n+---------+\n\nSELECT CHR('67');\n+-----------+\n| CHR('67') |\n+-----------+\n| C         |\n+-----------+\n\nSELECT CHR('C');\n+----------+\n| CHR('C') |\n+----------+\n|          |\n+----------+\n1 row in set, 1 warning (0.000 sec)\n\nSHOW WARNINGS;\n+---------+------+----------------------------------------+\n| Level   | Code | Message                                |\n+---------+------+----------------------------------------+\n| Warning | 1292 | Truncated incorrect INTEGER value: 'C' |\n+---------+------+----------------------------------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/area/"], "Title": ["ST_AREA"], "Feature": ["ST_Area(poly)\nArea(poly)\n"], "Description": ["Returns as a double-precision number the area of the Polygon value poly, as measured in its spatial reference system.", "ST_Area() and Area() are synonyms."], "Examples": ["SET @poly = 'Polygon((0 0,0 3,3 0,0 0),(1 1,1 2,2 1,1 1))';\n\nSELECT Area(GeomFromText(@poly));\n+---------------------------+\n| Area(GeomFromText(@poly)) |\n+---------------------------+\n|                         4 |\n+---------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/asbinary/"], "Title": ["ST_AsBinary"], "Feature": ["ST_AsBinary(g)\nAsBinary(g)\nST_AsWKB(g)\nAsWKB(g)\n"], "Description": ["Converts a value in internal geometry format to its WKB representation and returns the binary result.", "ST_AsBinary(), AsBinary(), ST_AsWKB() and AsWKB() are synonyms,"], "Examples": ["SET @poly = ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))');\nSELECT ST_AsBinary(@poly);\n\nSELECT ST_AsText(ST_GeomFromWKB(ST_AsWKB(@poly)));\n+--------------------------------------------+\n| ST_AsText(ST_GeomFromWKB(ST_AsWKB(@poly))) |\n+--------------------------------------------+\n| POLYGON((0 0,0 1,1 1,1 0,0 0))             |\n+--------------------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/astext/"], "Title": ["ST_AsText"], "Feature": ["ST_AsText(g)\nAsText(g)\nST_AsWKT(g)\nAsWKT(g)\n"], "Description": ["Converts a value in internal geometry format to its WKT representation and returns the string result.", "ST_AsText(), AsText(), ST_AsWKT() and AsWKT() are all synonyms."], "Examples": ["SET @g = 'LineString(1 1,4 4,6 6)';\n\nSELECT ST_AsText(ST_GeomFromText(@g));\n+--------------------------------+\n| ST_AsText(ST_GeomFromText(@g)) |\n+--------------------------------+\n| LINESTRING(1 1,4 4,6 6)        |\n+--------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/boundary/"], "Title": ["ST_BOUNDARY"], "Feature": ["ST_BOUNDARY(g)\nBOUNDARY(g)\n"], "Description": ["Returns a geometry that is the closure of the combinatorial boundary of the geometry value g.", "BOUNDARY() is a synonym."], "Examples": ["SELECT ST_AsText(ST_Boundary(ST_GeomFromText('LINESTRING(3 3,0 0, -3 3)')));\n+----------------------------------------------------------------------+\n| ST_AsText(ST_Boundary(ST_GeomFromText('LINESTRING(3 3,0 0, -3 3)'))) |\n+----------------------------------------------------------------------+\n| MULTIPOINT(3 3,-3 3)                                                 |\n+----------------------------------------------------------------------+\n\nSELECT ST_AsText(ST_Boundary(ST_GeomFromText('POLYGON((3 3,0 0, -3 3, 3 3))')));\n+--------------------------------------------------------------------------+\n| ST_AsText(ST_Boundary(ST_GeomFromText('POLYGON((3 3,0 0, -3 3, 3 3))'))) |\n+--------------------------------------------------------------------------+\n| LINESTRING(3 3,0 0,-3 3,3 3)                                             |\n+--------------------------------------------------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_buffer/"], "Title": ["ST_BUFFER"], "Feature": ["ST_BUFFER(g1,r)\nBUFFER(g1,r)\n"], "Description": ["Returns a geometry that represents all points whose distance from geometry g1 is less than or equal to distance, or radius, r.", "Uses for this function could include creating for example a new geometry representing a buffer zone around an island.", "BUFFER() is a synonym."], "Examples": ["SET @g1 = ST_GEOMFROMTEXT('POLYGON((10 10, 10 20, 20 20, 20 10, 10 10))');\n\nSET @g2 = ST_GEOMFROMTEXT('POINT(8 8)');\n\nSELECT ST_WITHIN(@g2,ST_BUFFER(@g1,5));\n+---------------------------------+\n| ST_WITHIN(@g2,ST_BUFFER(@g1,5)) |\n+---------------------------------+\n|                               1 |\n+---------------------------------+\n\nSELECT ST_WITHIN(@g2,ST_BUFFER(@g1,1));\n+---------------------------------+\n| ST_WITHIN(@g2,ST_BUFFER(@g1,1)) |\n+---------------------------------+\n|                               0 |\n+---------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_centroid/"], "Title": ["ST_CENTROID"], "Feature": ["ST_Centroid(mpoly)\nCentroid(mpoly)\n"], "Description": ["Returns a point reflecting the mathematical centroid (geometric center) for the MultiPolygon mpoly. The resulting point will not necessarily be on the MultiPolygon. ", "ST_Centroid() and Centroid() are synonyms."], "Examples": ["SET @poly = ST_GeomFromText('POLYGON((0 0,20 0,20 20,0 20,0 0))');\nSELECT ST_AsText(ST_Centroid(@poly)) AS center;\n+--------------+\n| center       |\n+--------------+\n| POINT(10 10) |\n+--------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_contains/"], "Title": ["ST_CONTAINS"], "Feature": ["ST_CONTAINS(g1,g2)\n"], "Description": ["Returns 1 or 0 to indicate whether a geometry g1 completely contains geometry g2.", "ST_CONTAINS() uses object shapes, while CONTAINS(), based on the original MySQL implementation, uses object bounding rectangles.", "ST_CONTAINS tests the opposite relationship to ST_WITHIN()."], "Examples": ["SET @g1 = ST_GEOMFROMTEXT('POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))');\n\nSET @g2 = ST_GEOMFROMTEXT('POINT(174 149)');\n\nSELECT ST_CONTAINS(@g1,@g2);\n+----------------------+\n| ST_CONTAINS(@g1,@g2) |\n+----------------------+\n|                    1 |\n+----------------------+\n\nSET @g2 = ST_GEOMFROMTEXT('POINT(175 151)');\n\nSELECT ST_CONTAINS(@g1,@g2);\n+----------------------+\n| ST_CONTAINS(@g1,@g2) |\n+----------------------+\n|                    0 |\n+----------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_convexhull/"], "Title": ["ST_CONVEXHULL"], "Feature": ["ST_ConvexHull(g)\nConvexHull(g)\n"], "Description": ["Given a geometry, returns a geometry that is the minimum convex geometry enclosing all geometries within the set. Returns NULL if the geometry value is NULL or an empty value.", "ST_ConvexHull() and ConvexHull() are synonyms."], "Examples": ["SET @g = ST_GEOMFROMTEXT('Point(0 0)');\n\nSELECT ST_ASTEXT(ST_CONVEXHULL(@g));\n+------------------------------+\n| ST_ASTEXT(ST_CONVEXHULL(@g)) |\n+------------------------------+\n| POINT(0 0)                   |\n+------------------------------+\n", "SET @g = ST_GEOMFROMTEXT('MultiPoint(0 0, 1 2, 2 3)');\n\nSELECT ST_ASTEXT(ST_CONVEXHULL(@g));\n+------------------------------+\n| ST_ASTEXT(ST_CONVEXHULL(@g)) |\n+------------------------------+\n| POLYGON((0 0,1 2,2 3,0 0))   |\n+------------------------------+\n", "SET @g = ST_GEOMFROMTEXT('MultiPoint( 1 1, 2 2, 5 3, 7 2, 9 3, 8 4, 6 6, 6 9, 4 9, 1 5 )');\n\nSELECT ST_ASTEXT(ST_CONVEXHULL(@g));\n+----------------------------------------+\n| ST_ASTEXT(ST_CONVEXHULL(@g))           |\n+----------------------------------------+\n| POLYGON((1 1,1 5,4 9,6 9,9 3,7 2,1 1)) |\n+----------------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_crosses/"], "Title": ["ST_CROSSES"], "Feature": ["ST_CROSSES(g1,g2)\n"], "Description": ["Returns 1 if geometry g1 spatially crosses geometry g2. Returns NULL if g1 is a Polygon or a MultiPolygon, or if g2 is a\nPoint or a MultiPoint. Otherwise, returns 0.", "The term spatially crosses denotes a spatial relation between two\ngiven geometries that has the following properties:", "The two geometries intersect\nTheir intersection results in a geometry that has a dimension that is one\n  less than the maximum dimension of the two given geometries\nTheir intersection is not equal to either of the two given geometries\n", "ST_CROSSES() uses object shapes, while CROSSES(), based on the original MySQL implementation, uses object bounding rectangles."], "Examples": ["SET @g1 = ST_GEOMFROMTEXT('LINESTRING(174 149, 176 151)');\n\nSET @g2 = ST_GEOMFROMTEXT('POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))');\n\nSELECT ST_CROSSES(@g1,@g2);\n+---------------------+\n| ST_CROSSES(@g1,@g2) |\n+---------------------+\n|                   1 |\n+---------------------+\n\nSET @g1 = ST_GEOMFROMTEXT('LINESTRING(176 149, 176 151)');\n\nSELECT ST_CROSSES(@g1,@g2);\n+---------------------+\n| ST_CROSSES(@g1,@g2) |\n+---------------------+\n|                   0 |\n+---------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_difference/"], "Title": ["ST_DIFFERENCE"], "Feature": ["ST_DIFFERENCE(g1,g2)\n"], "Description": ["Returns a geometry representing the point set difference of the given geometry values."], "Examples": ["SET @g1 = POINT(10,10), @g2 = POINT(20,20);\n\nSELECT ST_AsText(ST_Difference(@g1, @g2));\n+------------------------------------+\n| ST_AsText(ST_Difference(@g1, @g2)) |\n+------------------------------------+\n| POINT(10 10)                       |\n+------------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/coercibility/"], "Title": ["COERCIBILITY"], "Feature": ["COERCIBILITY(str)\n"], "Description": ["Returns the collation coercibility value of the string argument. Coercibility defines what will be converted to what in case of collation conflict, with an expression with higher coercibility being converted to the collation of an expression with lower coercibility.", "CoercibilityDescriptionExample\n0ExplicitValue using a COLLATE clause\n1No collationConcatenated strings using different collations\n2ImplicitA string data type column value, CAST to a string data type\n3System constantDATABASE(), USER() return value\n4CoercibleLiteral string\n5NumericNumeric and temporal values\n6IgnorableNULL or derived from NULL\n\n"], "Examples": ["SELECT COERCIBILITY('abc' COLLATE latin1_swedish_ci);\n+-----------------------------------------------+\n| COERCIBILITY('abc' COLLATE latin1_swedish_ci) |\n+-----------------------------------------------+\n|                                             0 |\n+-----------------------------------------------+\n\nSELECT COERCIBILITY(CAST(1 AS CHAR));\n+-------------------------------+\n| COERCIBILITY(CAST(1 AS CHAR)) |\n+-------------------------------+\n|                             2 |\n+-------------------------------+\n\nSELECT COERCIBILITY(USER());\n+----------------------+\n| COERCIBILITY(USER()) |\n+----------------------+\n|                    3 |\n+----------------------+\n\nSELECT COERCIBILITY('abc');\n+---------------------+\n| COERCIBILITY('abc') |\n+---------------------+\n|                   4 |\n+---------------------+\n\nSELECT COERCIBILITY(1);\n+-----------------+\n| COERCIBILITY(1) |\n+-----------------+\n|               5 |\n+-----------------+\n\nSELECT COERCIBILITY(NULL);\n+--------------------+\n| COERCIBILITY(NULL) |\n+--------------------+\n|                  6 |\n+--------------------+\n"], "Category": ["Information Functions"]}
{"HTML": ["https://mariadb.com//kb/en/adddate/"], "Title": ["ADDDATE"], "Feature": ["ADDDATE(date,INTERVAL expr unit), ADDDATE(expr,days)\n"], "Description": ["When invoked with the INTERVAL form of the second argument, ADDDATE()\nis a synonym for DATE_ADD(). The related function\nSUBDATE() is a synonym for DATE_SUB(). For\ninformation on the INTERVAL unit argument, see the discussion for\nDATE_ADD().", "When invoked with the days form of the second argument, MariaDB treats it as an\ninteger number of days to be added to expr."], "Examples": ["SELECT DATE_ADD('2008-01-02', INTERVAL 31 DAY);\n+-----------------------------------------+\n| DATE_ADD('2008-01-02', INTERVAL 31 DAY) |\n+-----------------------------------------+\n| 2008-02-02                              |\n+-----------------------------------------+\n\nSELECT ADDDATE('2008-01-02', INTERVAL 31 DAY);\n+----------------------------------------+\n| ADDDATE('2008-01-02', INTERVAL 31 DAY) |\n+----------------------------------------+\n| 2008-02-02                             |\n+----------------------------------------+\n", "SELECT ADDDATE('2008-01-02', 31);\n+---------------------------+\n| ADDDATE('2008-01-02', 31) |\n+---------------------------+\n| 2008-02-02                |\n+---------------------------+\n", "CREATE TABLE t1 (d DATETIME);\nINSERT INTO t1 VALUES\n    (\"2007-01-30 21:31:07\"),\n    (\"1983-10-15 06:42:51\"),\n    (\"2011-04-21 12:34:56\"),\n    (\"2011-10-30 06:31:41\"),\n    (\"2011-01-30 14:03:25\"),\n    (\"2004-10-07 11:19:34\");\n", "SELECT d, ADDDATE(d, 10) from t1;\n+---------------------+---------------------+\n| d                   | ADDDATE(d, 10)      |\n+---------------------+---------------------+\n| 2007-01-30 21:31:07 | 2007-02-09 21:31:07 |\n| 1983-10-15 06:42:51 | 1983-10-25 06:42:51 |\n| 2011-04-21 12:34:56 | 2011-05-01 12:34:56 |\n| 2011-10-30 06:31:41 | 2011-11-09 06:31:41 |\n| 2011-01-30 14:03:25 | 2011-02-09 14:03:25 |\n| 2004-10-07 11:19:34 | 2004-10-17 11:19:34 |\n+---------------------+---------------------+\n\nSELECT d, ADDDATE(d, INTERVAL 10 HOUR) from t1;\n+---------------------+------------------------------+\n| d                   | ADDDATE(d, INTERVAL 10 HOUR) |\n+---------------------+------------------------------+\n| 2007-01-30 21:31:07 | 2007-01-31 07:31:07          |\n| 1983-10-15 06:42:51 | 1983-10-15 16:42:51          |\n| 2011-04-21 12:34:56 | 2011-04-21 22:34:56          |\n| 2011-10-30 06:31:41 | 2011-10-30 16:31:41          |\n| 2011-01-30 14:03:25 | 2011-01-31 00:03:25          |\n| 2004-10-07 11:19:34 | 2004-10-07 21:19:34          |\n+---------------------+------------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_dimension/"], "Title": ["ST_DIMENSION"], "Feature": ["ST_Dimension(g)\nDimension(g)\n"], "Description": ["Returns the inherent dimension of the geometry value g. The result can\nbe", "DimensionDefinition\n   -1empty geometry\n    0geometry with no length or area\n    1geometry with no area but nonzero length\n    2geometry with nonzero area\n\n", "ST_Dimension() and Dimension() are synonyms."], "Examples": ["SELECT Dimension(GeomFromText('LineString(1 1,2 2)'));\n+------------------------------------------------+\n| Dimension(GeomFromText('LineString(1 1,2 2)')) |\n+------------------------------------------------+\n|                                              1 |\n+------------------------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_disjoint/"], "Title": ["ST_DISJOINT"], "Feature": ["ST_DISJOINT(g1,g2)\n"], "Description": ["Returns 1 or 0 to indicate whether geometry g1 is spatially disjoint from\n(does not intersect with) geometry g2.", "ST_DISJOINT() uses object shapes, while DISJOINT(), based on the original MySQL implementation, uses object bounding rectangles.", "ST_DISJOINT() tests the opposite relationship to ST_INTERSECTS()."], "Examples": ["SET @g1 = ST_GEOMFROMTEXT('POINT(0 0)');\n\nSET @g2 = ST_GEOMFROMTEXT('LINESTRING(2 0, 0 2)');\n\nSELECT ST_DISJOINT(@g1,@g2);\n+----------------------+\n| ST_DISJOINT(@g1,@g2) |\n+----------------------+\n|                    1 |\n+----------------------+\n\nSET @g2 = ST_GEOMFROMTEXT('LINESTRING(0 0, 0 2)');\n\nSELECT ST_DISJOINT(@g1,@g2);\n+----------------------+\n| ST_DISJOINT(@g1,@g2) |\n+----------------------+\n|                    0 |\n+----------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_distance/"], "Title": ["ST_DISTANCE"], "Feature": ["ST_DISTANCE(g1,g2)\n"], "Description": ["Returns the distance between two geometries, or null if not given valid inputs."], "Examples": ["SELECT ST_Distance(POINT(1,2),POINT(2,2));\n+------------------------------------+\n| ST_Distance(POINT(1,2),POINT(2,2)) |\n+------------------------------------+\n|                                  1 |\n+------------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_distance_sphere/"], "Title": ["ST_DISTANCE_SPHERE"], "Feature": ["ST_DISTANCE_SPHERE(g1,g2,[r])\n"], "Description": ["Returns the spherical distance between two geometries (point or multipoint) on a sphere with the optional radius r (default is the Earth radius if r is not specified), or NULL if not given valid inputs."], "Examples": ["set @zenica   = ST_GeomFromText('POINT(17.907743 44.203438)');\nset @sarajevo = ST_GeomFromText('POINT(18.413076 43.856258)');\nSELECT ST_Distance_Sphere(@zenica, @sarajevo);\n55878.59337591705\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/endpoint/"], "Title": ["ST_ENDPOINT"], "Feature": ["ST_EndPoint(ls)\nEndPoint(ls)\n"], "Description": ["Returns the Point that is the endpoint of the\nLineString value ls.", "ST_EndPoint() and EndPoint() are synonyms."], "Examples": ["SET @ls = 'LineString(1 1,2 2,3 3)';\n\nSELECT AsText(EndPoint(GeomFromText(@ls)));\n+-------------------------------------+\n| AsText(EndPoint(GeomFromText(@ls))) |\n+-------------------------------------+\n| POINT(3 3)                          |\n+-------------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/envelope/"], "Title": ["ST_ENVELOPE"], "Feature": ["ST_ENVELOPE(g)\nENVELOPE(g)\n"], "Description": ["Returns the Minimum Bounding Rectangle (MBR) for the geometry value g.  The result is returned as a Polygon value.", "The polygon is defined by the corner points of the bounding box:", "POLYGON((MINX MINY, MAXX MINY, MAXX MAXY, MINX MAXY, MINX MINY))\n", "ST_ENVELOPE() and ENVELOPE() are synonyms."], "Examples": ["SELECT AsText(ST_ENVELOPE(GeomFromText('LineString(1 1,4 4)')));\n+----------------------------------------------------------+\n| AsText(ST_ENVELOPE(GeomFromText('LineString(1 1,4 4)'))) |\n+----------------------------------------------------------+\n| POLYGON((1 1,4 1,4 4,1 4,1 1))                           |\n+----------------------------------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_equals/"], "Title": ["ST_EQUALS"], "Feature": ["ST_EQUALS(g1,g2)\n"], "Description": ["Returns 1 or 0 to indicate whether geometry g1 is spatially equal to geometry g2.", "ST_EQUALS() uses object shapes, while EQUALS(), based on the original MySQL implementation, uses object bounding rectangles."], "Examples": ["SET @g1 = ST_GEOMFROMTEXT('LINESTRING(174 149, 176 151)');\n\nSET @g2 = ST_GEOMFROMTEXT('LINESTRING(176 151, 174 149)');\n\nSELECT ST_EQUALS(@g1,@g2);\n+--------------------+\n| ST_EQUALS(@g1,@g2) |\n+--------------------+\n|                  1 |\n+--------------------+\n", "SET @g1 = ST_GEOMFROMTEXT('POINT(0 2)');\n\nSET @g1 = ST_GEOMFROMTEXT('POINT(2 0)');\n\nSELECT ST_EQUALS(@g1,@g2);\n+--------------------+\n| ST_EQUALS(@g1,@g2) |\n+--------------------+\n|                  0 |\n+--------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/exteriorring/"], "Title": ["ST_ExteriorRing"], "Feature": ["ST_ExteriorRing(poly)\nExteriorRing(poly)\n"], "Description": ["Returns the exterior ring of the Polygon value poly as a LineString.", "ST_ExteriorRing() and ExteriorRing() are synonyms."], "Examples": ["SET @poly = 'Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))';\n\nSELECT AsText(ExteriorRing(GeomFromText(@poly)));\n+-------------------------------------------+\n| AsText(ExteriorRing(GeomFromText(@poly))) |\n+-------------------------------------------+\n| LINESTRING(0 0,0 3,3 3,3 0,0 0)           |\n+-------------------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/geomcollfromtext/"], "Title": ["ST_GeomCollFromText"], "Feature": ["ST_GeomCollFromText(wkt[,srid])\nST_GeometryCollectionFromText(wkt[,srid])\nGeomCollFromText(wkt[,srid])\nGeometryCollectionFromText(wkt[,srid])\n"], "Description": ["Constructs a GEOMETRYCOLLECTION value using its WKT \nrepresentation and SRID.", "ST_GeomCollFromText(), ST_GeometryCollectionFromText(), GeomCollFromText() and GeometryCollectionFromText() are all synonyms."], "Examples": ["CREATE TABLE gis_geometrycollection  (g GEOMETRYCOLLECTION);\nSHOW FIELDS FROM gis_geometrycollection;\nINSERT INTO gis_geometrycollection VALUES\n    (GeomCollFromText('GEOMETRYCOLLECTION(POINT(0 0), LINESTRING(0 0,10 10))')),\n    (GeometryFromWKB(AsWKB(GeometryCollection(Point(44, 6), LineString(Point(3, 6), Point(7, 9)))))),\n    (GeomFromText('GeometryCollection()')),\n    (GeomFromText('GeometryCollection EMPTY'));\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/geomcollfromwkb/"], "Title": ["ST_GeomCollFromWKB"], "Feature": ["ST_GeomCollFromWKB(wkb[,srid])\nST_GeometryCollectionFromWKB(wkb[,srid])\nGeomCollFromWKB(wkb[,srid])\nGeometryCollectionFromWKB(wkb[,srid])\n"], "Description": ["Constructs a GEOMETRYCOLLECTION value using its WKB  representation and SRID.", "ST_GeomCollFromWKB(), ST_GeometryCollectionFromWKB(), GeomCollFromWKB() and GeometryCollectionFromWKB() are synonyms."], "Examples": ["SET @g = ST_AsBinary(ST_GeomFromText('GEOMETRYCOLLECTION(\n   POLYGON((5 5,10 5,10 10,5 5)),POINT(10 10))'));\n\nSELECT ST_AsText(ST_GeomCollFromWKB(@g));\n+----------------------------------------------------------------+\n| ST_AsText(ST_GeomCollFromWKB(@g))                              |\n+----------------------------------------------------------------+\n| GEOMETRYCOLLECTION(POLYGON((5 5,10 5,10 10,5 5)),POINT(10 10)) |\n+----------------------------------------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/collation/"], "Title": ["COLLATION"], "Feature": ["COLLATION(str)\n"], "Description": ["Returns the collation of the string argument. If str is not a string, it is considered as a binary string (so the function returns 'binary'). This applies to NULL, too.  The return value is a string in the utf8 character set.", "See Character Sets and Collations."], "Examples": ["SELECT COLLATION('abc');\n+-------------------+\n| COLLATION('abc')  |\n+-------------------+\n| latin1_swedish_ci |\n+-------------------+\n\nSELECT COLLATION(_utf8'abc');\n+-----------------------+\n| COLLATION(_utf8'abc') |\n+-----------------------+\n| utf8_general_ci       |\n+-----------------------+\n"], "Category": ["Information Functions"]}
{"HTML": ["https://mariadb.com//kb/en/geometryn/"], "Title": ["ST_GEOMETRYN"], "Feature": ["ST_GeometryN(gc,N)\nGeometryN(gc,N)\n"], "Description": ["Returns the N-th geometry in the GeometryCollection gc. Geometries are numbered beginning with 1.", "ST_GeometryN() and GeometryN() are synonyms."], "Examples": ["SET @gc = 'GeometryCollection(Point(1 1),LineString(12 14, 9 11))';\n\nSELECT AsText(GeometryN(GeomFromText(@gc),1));\n+----------------------------------------+\n| AsText(GeometryN(GeomFromText(@gc),1)) |\n+----------------------------------------+\n| POINT(1 1)                             |\n+----------------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/geometrytype/"], "Title": ["ST_GEOMETRYTYPE"], "Feature": ["ST_GeometryType(g)\nGeometryType(g)\n"], "Description": ["Returns as a string the name of the geometry type of which the\ngeometry instance g is a member. The name corresponds to one of the\ninstantiable Geometry subclasses.", "ST_GeometryType() and GeometryType() are synonyms."], "Examples": ["SELECT GeometryType(GeomFromText('POINT(1 1)'));\n+------------------------------------------+\n| GeometryType(GeomFromText('POINT(1 1)')) |\n+------------------------------------------+\n| POINT                                    |\n+------------------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/geomfromtext/"], "Title": ["ST_GeomFromText"], "Feature": ["ST_GeomFromText(wkt[,srid])\nST_GeometryFromText(wkt[,srid])\nGeomFromText(wkt[,srid])\nGeometryFromText(wkt[,srid])\n"], "Description": ["Constructs a geometry value of any type using its WKT representation and SRID.", "GeomFromText(), GeometryFromText(), ST_GeomFromText() and ST_GeometryFromText() are all synonyms."], "Examples": ["SET @g = ST_GEOMFROMTEXT('POLYGON((1 1,1 5,4 9,6 9,9 3,7 2,1 1))');\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/geomfromwkb/"], "Title": ["ST_GeomFromWKB"], "Feature": ["ST_GeomFromWKB(wkb[,srid])\nST_GeometryFromWKB(wkb[,srid])\nGeomFromWKB(wkb[,srid])\nGeometryFromWKB(wkb[,srid])\n"], "Description": ["Constructs a geometry value of any type using its WKB  representation and SRID.", "ST_GeomFromWKB(), ST_GeometryFromWKB(), GeomFromWKB() and GeometryFromWKB() are synonyms."], "Examples": ["SET @g = ST_AsBinary(ST_LineFromText('LINESTRING(0 4, 4 6)'));\n\nSELECT ST_AsText(ST_GeomFromWKB(@g));\n+-------------------------------+\n| ST_AsText(ST_GeomFromWKB(@g)) |\n+-------------------------------+\n| LINESTRING(0 4,4 6)           |\n+-------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/interiorringn/"], "Title": ["ST_InteriorRingN"], "Feature": ["ST_InteriorRingN(poly,N)\nInteriorRingN(poly,N)\n"], "Description": ["Returns the N-th interior ring for the Polygon value poly as a LineString. Rings are numbered beginning with 1.", "ST_InteriorRingN() and InteriorRingN() are synonyms."], "Examples": ["SET @poly = 'Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))';\n\nSELECT AsText(InteriorRingN(GeomFromText(@poly),1));\n+----------------------------------------------+\n| AsText(InteriorRingN(GeomFromText(@poly),1)) |\n+----------------------------------------------+\n| LINESTRING(1 1,1 2,2 2,2 1,1 1)              |\n+----------------------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_intersection/"], "Title": ["ST_INTERSECTION"], "Feature": ["ST_INTERSECTION(g1,g2)\n"], "Description": ["Returns a geometry that is the intersection, or shared portion, of geometry g1 and geometry g2."], "Examples": ["SET @g1 = ST_GEOMFROMTEXT('POINT(2 1)');\n\nSET @g2 = ST_GEOMFROMTEXT('LINESTRING(2 1, 0 2)');\n\nSELECT ASTEXT(ST_INTERSECTION(@g1,@g2));\n+----------------------------------+\n| ASTEXT(ST_INTERSECTION(@g1,@g2)) |\n+----------------------------------+\n| POINT(2 1)                       |\n+----------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_intersects/"], "Title": ["ST_INTERSECTS"], "Feature": ["ST_INTERSECTS(g1,g2)\n"], "Description": ["Returns 1 or 0 to indicate whether geometry g1 spatially intersects geometry g2.", "ST_INTERSECTS() uses object shapes, while INTERSECTS(), based on the original MySQL implementation, uses object bounding rectangles.", "ST_INTERSECTS() tests the opposite relationship to ST_DISJOINT()."], "Examples": ["SET @g1 = ST_GEOMFROMTEXT('POINT(0 0)');\n\nSET @g2 = ST_GEOMFROMTEXT('LINESTRING(0 0, 0 2)');\n\nSELECT ST_INTERSECTS(@g1,@g2);\n+------------------------+\n| ST_INTERSECTS(@g1,@g2) |\n+------------------------+\n|                      1 |\n+------------------------+\n", "SET @g2 = ST_GEOMFROMTEXT('LINESTRING(2 0, 0 2)');\n\nSELECT ST_INTERSECTS(@g1,@g2);\n+------------------------+\n| ST_INTERSECTS(@g1,@g2) |\n+------------------------+\n|                      0 |\n+------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_isclosed/"], "Title": ["ST_ISCLOSED"], "Feature": ["ST_IsClosed(g)\nIsClosed(g)\n"], "Description": ["Returns 1 if a given LINESTRING's start and end points are the same, or 0 if they are not the same. Before MariaDB 10.1.5, returns NULL if not given a LINESTRING. After MariaDB 10.1.5, returns -1.", "ST_IsClosed() and IsClosed() are synonyms."], "Examples": ["SET @ls = 'LineString(0 0, 0 4, 4 4, 0 0)';\nSELECT ST_ISCLOSED(GEOMFROMTEXT(@ls));\n+--------------------------------+\n| ST_ISCLOSED(GEOMFROMTEXT(@ls)) |\n+--------------------------------+\n|                              1 |\n+--------------------------------+\n\nSET @ls = 'LineString(0 0, 0 4, 4 4, 0 1)';\nSELECT ST_ISCLOSED(GEOMFROMTEXT(@ls));\n+--------------------------------+\n| ST_ISCLOSED(GEOMFROMTEXT(@ls)) |\n+--------------------------------+\n|                              0 |\n+--------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/isempty/"], "Title": ["ST_ISEMPTY"], "Feature": ["ST_IsEmpty(g)\nIsEmpty(g)\n"], "Description": ["IsEmpty is a function defined by the OpenGIS specification, but is not fully implemented by MariaDB or MySQL. ", "Since MariaDB and MySQL do not support GIS EMPTY values such as POINT EMPTY, as implemented it simply returns 1 if the geometry value g is invalid, 0 if it is valid, and NULL if the argument is NULL.", "ST_IsEmpty() and IsEmpty() are synonyms."], "Examples": [], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_isring/"], "Title": ["ST_IsRing"], "Feature": ["ST_IsRing(g)\nIsRing(g)\n"], "Description": ["Returns true if a given LINESTRING is a ring, that is, both ST_IsClosed and ST_IsSimple. A simple curve does not pass through the same point more than once.  However, see MDEV-7510.", "St_IsRing() and IsRing() are synonyms."], "Examples": [], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/column_add/"], "Title": ["COLUMN_ADD"], "Feature": ["COLUMN_ADD(dyncol_blob, column_nr, value [as type], [column_nr, value [as type]]...);\nCOLUMN_ADD(dyncol_blob, column_name, value [as type], [column_name, value [as type]]...);\n"], "Description": ["Adds or updates dynamic columns.", "dyncol_blob must be either a valid dynamic columns blob (for example, COLUMN_CREATE returns such blob), or an empty string.\ncolumn_name specifies the name of the column to be added. If dyncol_blob already has a column with this name, it will be overwritten.\nvalue specifies the new value for the column.  Passing a NULL value will cause the column to be deleted.\nas type is optional. See #datatypes section for a discussion about types.\n", "The return value is a dynamic column blob after the modifications."], "Examples": ["UPDATE t1 SET dyncol_blob=COLUMN_ADD(dyncol_blob, \"column_name\", \"value\") WHERE id=1;\n"], "Category": ["Dynamic Columns Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_issimple/"], "Title": ["ST_IsSimple"], "Feature": ["ST_IsSimple(g)\nIsSimple(g)\n"], "Description": ["Returns true if the given Geometry has no anomalous geometric points, false if it does, or NULL if given a NULL value.", "ST_IsSimple() and IsSimple() are synonyms."], "Examples": ["SET @g = 'Point(1 2)';\n\nSELECT ST_ISSIMPLE(GEOMFROMTEXT(@g));\n+-------------------------------+\n| ST_ISSIMPLE(GEOMFROMTEXT(@g)) |\n+-------------------------------+\n|                             1 |\n+-------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_length/"], "Title": ["ST_LENGTH"], "Feature": ["ST_LENGTH(ls)\n"], "Description": ["Returns as a double-precision number the length of the\nLineString value ls in its associated spatial reference."], "Examples": ["SET @ls = 'LineString(1 1,2 2,3 3)';\n\nSELECT ST_LENGTH(ST_GeomFromText(@ls));\n+---------------------------------+\n| ST_LENGTH(ST_GeomFromText(@ls)) |\n+---------------------------------+\n|                2.82842712474619 |\n+---------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/linefromtext/"], "Title": ["ST_LineFromText"], "Feature": ["ST_LineFromText(wkt[,srid])\nST_LineStringFromText(wkt[,srid])\nLineFromText(wkt[,srid])\nLineStringFromText(wkt[,srid])\n"], "Description": ["Constructs a LINESTRING value using its WKT representation and SRID.", "ST_LineFromText(), ST_LineStringFromText(), ST_LineFromText() and ST_LineStringFromText() are all synonyms."], "Examples": ["CREATE TABLE gis_line  (g LINESTRING);\nSHOW FIELDS FROM gis_line;\nINSERT INTO gis_line VALUES\n    (LineFromText('LINESTRING(0 0,0 10,10 0)')),\n    (LineStringFromText('LINESTRING(10 10,20 10,20 20,10 20,10 10)')),\n    (LineStringFromWKB(AsWKB(LineString(Point(10, 10), Point(40, 10)))));\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/linefromwkb/"], "Title": ["ST_LineFromWKB"], "Feature": ["ST_LineFromWKB(wkb[,srid])\nLineFromWKB(wkb[,srid])\nST_LineStringFromWKB(wkb[,srid])\nLineStringFromWKB(wkb[,srid])\n"], "Description": ["Constructs a LINESTRING value using its WKB  representation and SRID.", "ST_LineFromWKB(), LineFromWKB(), ST_LineStringFromWKB(), and LineStringFromWKB() are synonyms."], "Examples": ["SET @g = ST_AsBinary(ST_LineFromText('LineString(0 4,4 6)'));\n\nSELECT ST_AsText(ST_LineFromWKB(@g)) AS l;\n+---------------------+\n| l                   |\n+---------------------+\n| LINESTRING(0 4,4 6) |\n+---------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/numgeometries/"], "Title": ["ST_NUMGEOMETRIES"], "Feature": ["ST_NumGeometries(gc)\nNumGeometries(gc)\n"], "Description": ["Returns the number of geometries in the GeometryCollection gc.", "ST_NumGeometries() and NumGeometries() are synonyms."], "Examples": ["SET @gc = 'GeometryCollection(Point(1 1),LineString(2 2, 3 3))';\n\nSELECT NUMGEOMETRIES(GeomFromText(@gc));\n+----------------------------------+\n| NUMGEOMETRIES(GeomFromText(@gc)) |\n+----------------------------------+\n|                                2 |\n+----------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/numinteriorrings/"], "Title": ["ST_NumInteriorRings"], "Feature": ["ST_NumInteriorRings(poly)\nNumInteriorRings(poly)\n"], "Description": ["Returns an integer containing the number of interior rings in the Polygon value poly.", "Note that according the the OpenGIS standard, a POLYGON should have exactly one ExteriorRing and all other rings should lie within that ExteriorRing and thus be the InteriorRings. Practically, however, some systems, including MariaDB's, permit polygons to have several 'ExteriorRings'. In the case of there being multiple, non-overlapping exterior rings ST_NumInteriorRings() will return 1.", "ST_NumInteriorRings() and NumInteriorRings() are synonyms."], "Examples": ["SET @poly = 'Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))';\n\nSELECT NumInteriorRings(GeomFromText(@poly));\n+---------------------------------------+\n| NumInteriorRings(GeomFromText(@poly)) |\n+---------------------------------------+\n|                                     1 |\n+---------------------------------------+\n", "SELECT ST_NumInteriorRings(ST_PolyFromText('POLYGON((0 0,10 0,10 10,0 10,0 0),\n  (-1 -1,-5 -1,-5 -5,-1 -5,-1 -1))')) AS NumInteriorRings;\n+------------------+\n| NumInteriorRings |\n+------------------+\n|                1 |\n+------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/numpoints/"], "Title": ["ST_NUMPOINTS"], "Feature": ["ST_NumPoints(ls)\nNumPoints(ls)\n"], "Description": ["Returns the number of Point objects in the LineString\nvalue ls.", "ST_NumPoints() and NumPoints() are synonyms."], "Examples": ["SET @ls = 'LineString(1 1,2 2,3 3)';\n\nSELECT NumPoints(GeomFromText(@ls));\n+------------------------------+\n| NumPoints(GeomFromText(@ls)) |\n+------------------------------+\n|                            3 |\n+------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_overlaps/"], "Title": ["ST_OVERLAPS"], "Feature": ["ST_OVERLAPS(g1,g2)\n"], "Description": ["Returns 1 or 0 to indicate whether geometry g1 spatially overlaps geometry g2.", "The term spatially overlaps is used if two geometries intersect and their\nintersection results in a geometry of the same dimension but not equal to\neither of the given geometries.", "ST_OVERLAPS() uses object shapes, while OVERLAPS(), based on the original MySQL implementation, uses object bounding rectangles."], "Examples": [], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/pointfromtext/"], "Title": ["ST_PointFromText"], "Feature": ["ST_PointFromText(wkt[,srid])\nPointFromText(wkt[,srid])\n"], "Description": ["Constructs a POINT value using its WKT representation and SRID.", "ST_PointFromText() and PointFromText() are synonyms."], "Examples": ["CREATE TABLE gis_point  (g POINT);\nSHOW FIELDS FROM gis_point;\nINSERT INTO gis_point VALUES\n    (PointFromText('POINT(10 10)')),\n    (PointFromText('POINT(20 10)')),\n    (PointFromText('POINT(20 20)')),\n    (PointFromWKB(AsWKB(PointFromText('POINT(10 20)'))));\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/pointfromwkb/"], "Title": ["ST_PointFromWKB"], "Feature": ["ST_PointFromWKB(wkb[,srid])\nPointFromWKB(wkb[,srid])\n"], "Description": ["Constructs a POINT value using its WKB representation and SRID.", "ST_PointFromWKB() and PointFromWKB() are synonyms."], "Examples": ["SET @g = ST_AsBinary(ST_PointFromText('POINT(0 4)'));\n\nSELECT ST_AsText(ST_PointFromWKB(@g)) AS p;\n+------------+\n| p          |\n+------------+\n| POINT(0 4) |\n+------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/column_check/"], "Title": ["COLUMN_CHECK"], "Feature": ["COLUMN_CHECK(dyncol_blob);\n"], "Description": ["Check if dyncol_blob is a valid packed dynamic columns blob. Return value of 1 means the blob is valid, return value of 0 means it is not.", "Rationale:\nNormally, one works with valid dynamic column blobs. Functions like COLUMN_CREATE, COLUMN_ADD, COLUMN_DELETE always return valid dynamic column blobs. However, if a dynamic column blob is accidentally truncated, or transcoded from one character set to another, it will be corrupted. This function can be used to check if a value in a blob field is a valid dynamic column blob."], "Examples": [], "Category": ["Dynamic Columns Functions"]}
{"HTML": ["https://mariadb.com//kb/en/pointn/"], "Title": ["ST_POINTN"], "Feature": ["ST_PointN(ls,N)\nPointN(ls,N)\n"], "Description": ["Returns the N-th Point in the LineString value ls.\nPoints are numbered beginning with 1.", "ST_PointN() and PointN() are synonyms."], "Examples": ["SET @ls = 'LineString(1 1,2 2,3 3)';\n\nSELECT AsText(PointN(GeomFromText(@ls),2));\n+-------------------------------------+\n| AsText(PointN(GeomFromText(@ls),2)) |\n+-------------------------------------+\n| POINT(2 2)                          |\n+-------------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_pointonsurface/"], "Title": ["ST_POINTONSURFACE"], "Feature": ["ST_PointOnSurface(g)\nPointOnSurface(g)\n"], "Description": ["Given a geometry, returns a POINT guaranteed to intersect a surface. However, see MDEV-7514.", "ST_PointOnSurface() and PointOnSurface() are synonyms."], "Examples": [], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/polyfromtext/"], "Title": ["ST_PolyFromText"], "Feature": ["ST_PolyFromText(wkt[,srid])\nST_PolygonFromText(wkt[,srid])\nPolyFromText(wkt[,srid])\nPolygonFromText(wkt[,srid])\n"], "Description": ["Constructs a POLYGON value using its WKT representation and SRID.", "ST_PolyFromText(), ST_PolygonFromText(), PolyFromText() and ST_PolygonFromText() are all synonyms."], "Examples": ["CREATE TABLE gis_polygon   (g POLYGON);\nINSERT INTO gis_polygon VALUES\n    (PolygonFromText('POLYGON((10 10,20 10,20 20,10 20,10 10))')),\n    (PolyFromText('POLYGON((0 0,50 0,50 50,0 50,0 0), (10 10,20 10,20 20,10 20,10 10))'));\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/polyfromwkb/"], "Title": ["ST_PolyFromWKB"], "Feature": ["ST_PolyFromWKB(wkb[,srid])\nST_PolygonFromWKB(wkb[,srid])\nPolyFromWKB(wkb[,srid])\nPolygonFromWKB(wkb[,srid])\n"], "Description": ["Constructs a POLYGON value using its WKB representation and SRID.", "ST_PolyFromWKB(), ST_PolygonFromWKB(), PolyFromWKB() and PolygonFromWKB() are synonyms."], "Examples": ["SET @g = ST_AsBinary(ST_PolyFromText('POLYGON((1 1,1 5,4 9,6 9,9 3,7 2,1 1))'));\n\nSELECT ST_AsText(ST_PolyFromWKB(@g)) AS p;\n+----------------------------------------+\n| p                                      |\n+----------------------------------------+\n| POLYGON((1 1,1 5,4 9,6 9,9 3,7 2,1 1)) |\n+----------------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_relate/"], "Title": ["ST_RELATE"], "Feature": ["ST_Relate(g1, g2, i)\n"], "Description": ["Returns true if Geometry g1 is spatially related to Geometryg2 by testing for intersections between the interior, boundary and exterior of the two geometries as specified by the values in intersection matrix pattern i."], "Examples": [], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/srid/"], "Title": ["ST_SRID"], "Feature": ["ST_SRID(g)\nSRID(g)\n"], "Description": ["Returns an integer indicating the Spatial Reference System ID for the\ngeometry value g.", "In MariaDB, the SRID value is just an integer associated with the\ngeometry value. All calculations are done assuming Euclidean (planar)\ngeometry.", "ST_SRID() and SRID() are synonyms."], "Examples": ["SELECT SRID(GeomFromText('LineString(1 1,2 2)',101));\n+-----------------------------------------------+\n| SRID(GeomFromText('LineString(1 1,2 2)',101)) |\n+-----------------------------------------------+\n|                                           101 |\n+-----------------------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_startpoint/"], "Title": ["ST_STARTPOINT"], "Feature": ["ST_StartPoint(ls)\nStartPoint(ls)\n"], "Description": ["Returns the Point that is the start point of the\nLineString value ls.", "ST_StartPoint() and StartPoint() are synonyms."], "Examples": ["SET @ls = 'LineString(1 1,2 2,3 3)';\n\nSELECT AsText(StartPoint(GeomFromText(@ls)));\n+---------------------------------------+\n| AsText(StartPoint(GeomFromText(@ls))) |\n+---------------------------------------+\n| POINT(1 1)                            |\n+---------------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_symdifference/"], "Title": ["ST_SYMDIFFERENCE"], "Feature": ["ST_SYMDIFFERENCE(g1,g2)\n"], "Description": ["Returns a geometry that represents the portions of geometry g1 and geometry g2 that don't intersect."], "Examples": ["SET @g1 = ST_GEOMFROMTEXT('LINESTRING(10 20, 10 40)');\n\nSET @g2 = ST_GEOMFROMTEXT('LINESTRING(10 15, 10 25)');\n\nSELECT ASTEXT(ST_SYMDIFFERENCE(@g1,@g2));\n+----------------------------------------------+\n| ASTEXT(ST_SYMDIFFERENCE(@g1,@g2))            |\n+----------------------------------------------+\n| MULTILINESTRING((10 15,10 20),(10 25,10 40)) |\n+----------------------------------------------+\n\nSET @g2 = ST_GeomFromText('LINESTRING(10 20, 10 41)');\n\nSELECT ASTEXT(ST_SYMDIFFERENCE(@g1,@g2));\n+-----------------------------------+\n| ASTEXT(ST_SYMDIFFERENCE(@g1,@g2)) |\n+-----------------------------------+\n| LINESTRING(10 40,10 41)           |\n+-----------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_touches/"], "Title": ["ST_TOUCHES"], "Feature": ["ST_TOUCHES(g1,g2)\n"], "Description": ["Returns 1 or 0 to indicate whether geometry g1 spatially touches geometry g2. Two geometries spatially touch if the interiors of the geometries do not intersect,\nbut the boundary of one of the geometries intersects either the boundary or the\ninterior of the other.", "ST_TOUCHES() uses object shapes, while TOUCHES(), based on the original MySQL implementation, uses object bounding rectangles."], "Examples": ["SET @g1 = ST_GEOMFROMTEXT('POINT(2 0)');\n\nSET @g2 = ST_GEOMFROMTEXT('LINESTRING(2 0, 0 2)');\n\nSELECT ST_TOUCHES(@g1,@g2);\n+---------------------+\n| ST_TOUCHES(@g1,@g2) |\n+---------------------+\n|                   1 |\n+---------------------+\n\nSET @g1 = ST_GEOMFROMTEXT('POINT(2 1)');\n\nSELECT ST_TOUCHES(@g1,@g2);\n+---------------------+\n| ST_TOUCHES(@g1,@g2) |\n+---------------------+\n|                   0 |\n+---------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_union/"], "Title": ["ST_UNION"], "Feature": ["ST_UNION(g1,g2)\n"], "Description": ["Returns a geometry that is the union of the geometry g1 and geometry g2."], "Examples": ["SET @g1 = GEOMFROMTEXT('POINT (0 2)');\n\nSET @g2 = GEOMFROMTEXT('POINT (2 0)');\n\nSELECT ASTEXT(ST_UNION(@g1,@g2));\n+---------------------------+\n| ASTEXT(ST_UNION(@g1,@g2)) |\n+---------------------------+\n| MULTIPOINT(2 0,0 2)       |\n+---------------------------+\n", "SET @g1 = GEOMFROMTEXT('POLYGON((0 0,0 3,3 3,3 0,0 0))');\n\nSET @g2 = GEOMFROMTEXT('POLYGON((2 2,4 2,4 4,2 4,2 2))');\n\nSELECT ASTEXT(ST_UNION(@g1,@g2));\n+------------------------------------------------+\n| ASTEXT(ST_UNION(@g1,@g2))                      |\n+------------------------------------------------+\n| POLYGON((0 0,0 3,2 3,2 4,4 4,4 2,3 2,3 0,0 0)) |\n+------------------------------------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/column_create/"], "Title": ["COLUMN_CREATE"], "Feature": ["COLUMN_CREATE(column_nr, value [as type], [column_nr, value [as type]]...);\nCOLUMN_CREATE(column_name, value [as type], [column_name, value [as type]]...);\n"], "Description": ["Returns a dynamic columns blob that stores the specified columns with values.", "The return value is suitable for ", "storing in a table\nfurther modification with other dynamic columns functions\n", "The as type part allows one to specify the value type. In most cases,\nthis is redundant because MariaDB will be able to deduce the type of the\nvalue. Explicit type specification may be needed when the type of the value is\nnot apparent. For example, a literal '2012-12-01' has a CHAR type by\ndefault, one will need to specify '2012-12-01' AS DATE to have it stored as\na date. See Dynamic Columns:Datatypes for further details."], "Examples": ["INSERT INTO tbl SET dyncol_blob=COLUMN_CREATE(\"column_name\", \"value\");\n"], "Category": ["Dynamic Columns Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_within/"], "Title": ["ST_WITHIN"], "Feature": ["ST_WITHIN(g1,g2)\n"], "Description": ["Returns 1 or 0 to indicate whether geometry g1 is spatially within geometry g2.", "This tests the opposite relationship as ST_CONTAINS().", "ST_WITHIN() uses object shapes, while WITHIN(), based on the original MySQL implementation, uses object bounding rectangles."], "Examples": ["SET @g1 = ST_GEOMFROMTEXT('POINT(174 149)');\n\nSET @g2 = ST_GEOMFROMTEXT('POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))');\n\nSELECT ST_WITHIN(@g1,@g2);\n+--------------------+\n| ST_WITHIN(@g1,@g2) |\n+--------------------+\n|                  1 |\n+--------------------+\n\nSET @g1 = ST_GEOMFROMTEXT('POINT(176 151)');\n\nSELECT ST_WITHIN(@g1,@g2);\n+--------------------+\n| ST_WITHIN(@g1,@g2) |\n+--------------------+\n|                  0 |\n+--------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_x/"], "Title": ["ST_X"], "Feature": ["ST_X(p)\nX(p)\n"], "Description": ["Returns the X-coordinate value for the point p as a double-precision number.", "ST_X() and X() are synonyms."], "Examples": ["SET @pt = 'Point(56.7 53.34)';\n\nSELECT X(GeomFromText(@pt));\n+----------------------+\n| X(GeomFromText(@pt)) |\n+----------------------+\n|                 56.7 |\n+----------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/st_y/"], "Title": ["ST_Y"], "Feature": ["ST_Y(p)\nY(p)\n"], "Description": ["Returns the Y-coordinate value for the point p as a double-precision number.", "ST_Y() and Y() are synonyms."], "Examples": ["SET @pt = 'Point(56.7 53.34)';\n\nSELECT Y(GeomFromText(@pt));\n+----------------------+\n| Y(GeomFromText(@pt)) |\n+----------------------+\n|                53.34 |\n+----------------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/subdate/"], "Title": ["SUBDATE"], "Feature": ["SUBDATE(date,INTERVAL expr unit), SUBDATE(expr,days)\n"], "Description": ["When invoked with the INTERVAL form of the second argument, SUBDATE()\nis a synonym for DATE_SUB(). See Date and Time Units for a complete list of permitted units. ", "The second form allows the use of an integer value for days. In such\ncases, it is interpreted as the number of days to be subtracted from\nthe date or datetime expression expr."], "Examples": ["SELECT DATE_SUB('2008-01-02', INTERVAL 31 DAY);\n+-----------------------------------------+\n| DATE_SUB('2008-01-02', INTERVAL 31 DAY) |\n+-----------------------------------------+\n| 2007-12-02                              |\n+-----------------------------------------+\n\nSELECT SUBDATE('2008-01-02', INTERVAL 31 DAY);\n+----------------------------------------+\n| SUBDATE('2008-01-02', INTERVAL 31 DAY) |\n+----------------------------------------+\n| 2007-12-02                             |\n+----------------------------------------+\n", "SELECT SUBDATE('2008-01-02 12:00:00', 31);\n+------------------------------------+\n| SUBDATE('2008-01-02 12:00:00', 31) |\n+------------------------------------+\n| 2007-12-02 12:00:00                |\n+------------------------------------+\n", "CREATE TABLE t1 (d DATETIME);\nINSERT INTO t1 VALUES\n    (\"2007-01-30 21:31:07\"),\n    (\"1983-10-15 06:42:51\"),\n    (\"2011-04-21 12:34:56\"),\n    (\"2011-10-30 06:31:41\"),\n    (\"2011-01-30 14:03:25\"),\n    (\"2004-10-07 11:19:34\");\n", "SELECT d, SUBDATE(d, 10) from t1;\n+---------------------+---------------------+\n| d                   | SUBDATE(d, 10)      |\n+---------------------+---------------------+\n| 2007-01-30 21:31:07 | 2007-01-20 21:31:07 |\n| 1983-10-15 06:42:51 | 1983-10-05 06:42:51 |\n| 2011-04-21 12:34:56 | 2011-04-11 12:34:56 |\n| 2011-10-30 06:31:41 | 2011-10-20 06:31:41 |\n| 2011-01-30 14:03:25 | 2011-01-20 14:03:25 |\n| 2004-10-07 11:19:34 | 2004-09-27 11:19:34 |\n+---------------------+---------------------+\n\nSELECT d, SUBDATE(d, INTERVAL 10 MINUTE) from t1;\n+---------------------+--------------------------------+\n| d                   | SUBDATE(d, INTERVAL 10 MINUTE) |\n+---------------------+--------------------------------+\n| 2007-01-30 21:31:07 | 2007-01-30 21:21:07            |\n| 1983-10-15 06:42:51 | 1983-10-15 06:32:51            |\n| 2011-04-21 12:34:56 | 2011-04-21 12:24:56            |\n| 2011-10-30 06:31:41 | 2011-10-30 06:21:41            |\n| 2011-01-30 14:03:25 | 2011-01-30 13:53:25            |\n| 2004-10-07 11:19:34 | 2004-10-07 11:09:34            |\n+---------------------+--------------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/substring/"], "Title": ["SUBSTRING"], "Feature": ["SUBSTRING(str,pos), \nSUBSTRING(str FROM pos), \nSUBSTRING(str,pos,len),\nSUBSTRING(str FROM pos FOR len)\n\nSUBSTR(str,pos), \nSUBSTR(str FROM pos), \nSUBSTR(str,pos,len),\nSUBSTR(str FROM pos FOR len)\n"], "Description": ["The forms without a len argument return a substring from string str starting at position pos.", "The forms with a len argument return a substring len characters long from string str, starting at position pos.", "The forms that use FROM are standard SQL syntax.", "It is also possible to use a negative value for pos. In this case, the beginning of the substring is pos characters from the end of the string, rather than the beginning. A negative value may be used for pos in any of the forms of this function.", "By default, the position of the first character in the string from which the substring is to be extracted is reckoned as 1. For Oracle-compatibility, from MariaDB 10.3.3, when sql_mode is set to 'oracle', position zero is treated as position 1 (although the first character is still reckoned as 1).", "If any argument is NULL, returns NULL."], "Examples": ["SELECT SUBSTRING('Knowledgebase',5);\n+------------------------------+\n| SUBSTRING('Knowledgebase',5) |\n+------------------------------+\n| ledgebase                    |\n+------------------------------+\n\nSELECT SUBSTRING('MariaDB' FROM 6);\n+-----------------------------+\n| SUBSTRING('MariaDB' FROM 6) |\n+-----------------------------+\n| DB                          |\n+-----------------------------+\n\nSELECT SUBSTRING('Knowledgebase',3,7);\n+--------------------------------+\n| SUBSTRING('Knowledgebase',3,7) |\n+--------------------------------+\n| owledge                        |\n+--------------------------------+\n\nSELECT SUBSTRING('Knowledgebase', -4);\n+--------------------------------+\n| SUBSTRING('Knowledgebase', -4) |\n+--------------------------------+\n| base                           |\n+--------------------------------+\n\nSELECT SUBSTRING('Knowledgebase', -8, 4);\n+-----------------------------------+\n| SUBSTRING('Knowledgebase', -8, 4) |\n+-----------------------------------+\n| edge                              |\n+-----------------------------------+\n\nSELECT SUBSTRING('Knowledgebase' FROM -8 FOR 4);\n+------------------------------------------+\n| SUBSTRING('Knowledgebase' FROM -8 FOR 4) |\n+------------------------------------------+\n| edge                                     |\n+------------------------------------------+\n", "SELECT SUBSTR('abc',0,3);\n+-------------------+\n| SUBSTR('abc',0,3) |\n+-------------------+\n|                   |\n+-------------------+\n\nSELECT SUBSTR('abc',1,2);\n+-------------------+\n| SUBSTR('abc',1,2) |\n+-------------------+\n| ab                |\n+-------------------+\n\nSET sql_mode='oracle';\n\nSELECT SUBSTR('abc',0,3);\n+-------------------+\n| SUBSTR('abc',0,3) |\n+-------------------+\n| abc               |\n+-------------------+\n\nSELECT SUBSTR('abc',1,2);\n+-------------------+\n| SUBSTR('abc',1,2) |\n+-------------------+\n| ab                |\n+-------------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/substring_index/"], "Title": ["SUBSTRING_INDEX"], "Feature": ["SUBSTRING_INDEX(str,delim,count)\n"], "Description": ["Returns the substring from string str before count occurrences of the\ndelimiter delim. If count is positive, everything to the left\nof the final delimiter (counting from the left) is returned. If count\nis negative, everything to the right of the final delimiter (counting from the\nright) is returned. SUBSTRING_INDEX() performs a case-sensitive match when\nsearching for delim.", "If any argument is NULL, returns NULL.", "For example", "SUBSTRING_INDEX('www.mariadb.org', '.', 2)\n", "means \"Return all of the characters up to the 2nd occurrence of .\""], "Examples": ["SELECT SUBSTRING_INDEX('www.mariadb.org', '.', 2);\n+--------------------------------------------+\n| SUBSTRING_INDEX('www.mariadb.org', '.', 2) |\n+--------------------------------------------+\n| www.mariadb                                |\n+--------------------------------------------+\n\nSELECT SUBSTRING_INDEX('www.mariadb.org', '.', -2);\n+---------------------------------------------+\n| SUBSTRING_INDEX('www.mariadb.org', '.', -2) |\n+---------------------------------------------+\n| mariadb.org                                 |\n+---------------------------------------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/subtime/"], "Title": ["SUBTIME"], "Feature": ["SUBTIME(expr1,expr2)\n"], "Description": ["SUBTIME() returns expr1 - expr2 expressed as a value in the same\nformat as expr1. expr1 is a time or datetime expression, and expr2 is\na time expression."], "Examples": ["SELECT SUBTIME('2007-12-31 23:59:59.999999','1 1:1:1.000002');\n+--------------------------------------------------------+\n| SUBTIME('2007-12-31 23:59:59.999999','1 1:1:1.000002') |\n+--------------------------------------------------------+\n| 2007-12-30 22:58:58.999997                             |\n+--------------------------------------------------------+\n\nSELECT SUBTIME('01:00:00.999999', '02:00:00.999998');\n+-----------------------------------------------+\n| SUBTIME('01:00:00.999999', '02:00:00.999998') |\n+-----------------------------------------------+\n| -00:59:59.999999                              |\n+-----------------------------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/sum/"], "Title": ["SUM"], "Feature": ["SUM([DISTINCT] expr)\n"], "Description": ["Returns the sum of expr. If the return set has no rows, SUM() returns\nNULL. The DISTINCT keyword can be used to sum only the distinct values\nof expr.", "SUM() can be used as a window function, although not with the DISTINCT specifier."], "Examples": ["CREATE TABLE sales (sales_value INT);\nINSERT INTO sales VALUES(10),(20),(20),(40);\n\nSELECT SUM(sales_value) FROM sales;\n+------------------+\n| SUM(sales_value) |\n+------------------+\n|               90 |\n+------------------+\n\nSELECT SUM(DISTINCT(sales_value)) FROM sales;\n+----------------------------+\n| SUM(DISTINCT(sales_value)) |\n+----------------------------+\n|                         70 |\n+----------------------------+\n", "CREATE TABLE sales (name CHAR(10), month CHAR(10), units INT);\n\nINSERT INTO sales VALUES \n  ('Chun', 'Jan', 75), ('Chun', 'Feb', 73),\n  ('Esben', 'Jan', 43), ('Esben', 'Feb', 31),\n  ('Kaolin', 'Jan', 56), ('Kaolin', 'Feb', 88),\n  ('Tatiana', 'Jan', 87), ('Tatiana', 'Feb', 83);\n\nSELECT name, SUM(units) FROM sales GROUP BY name;\n+---------+------------+\n| name    | SUM(units) |\n+---------+------------+\n| Chun    |        148 |\n| Esben   |         74 |\n| Kaolin  |        144 |\n| Tatiana |        170 |\n+---------+------------+\n", "SELECT name,SUM(units) FROM sales\n;+------+------------+\n| name | SUM(units) |\n+------+------------+\n| Chun |        536 |\n+------+------------+\n", "CREATE OR REPLACE TABLE student_test (name CHAR(10), test CHAR(10), score TINYINT);\nINSERT INTO student_test VALUES \n    ('Chun', 'SQL', 75), ('Chun', 'Tuning', 73), \n    ('Esben', 'SQL', 43), ('Esben', 'Tuning', 31), \n    ('Kaolin', 'SQL', 56), ('Kaolin', 'Tuning', 88), \n    ('Tatiana', 'SQL', 87);\n\nSELECT name, test, score, SUM(score) OVER (PARTITION BY name) AS total_score FROM student_test;\n+---------+--------+-------+-------------+\n| name    | test   | score | total_score |\n+---------+--------+-------+-------------+\n| Chun    | SQL    |    75 |         148 |\n| Chun    | Tuning |    73 |         148 |\n| Esben   | SQL    |    43 |          74 |\n| Esben   | Tuning |    31 |          74 |\n| Kaolin  | SQL    |    56 |         144 |\n| Kaolin  | Tuning |    88 |         144 |\n| Tatiana | SQL    |    87 |          87 |\n+---------+--------+-------+-------------+\n"], "Category": ["Aggregate Functions"]}
{"HTML": ["https://mariadb.com//kb/en/sysdate/"], "Title": ["SYSDATE"], "Feature": ["SYSDATE([precision])\n"], "Description": ["Returns the current date and time as a value in 'YYYY-MM-DD HH:MM:SS'\nor YYYYMMDDHHMMSS.uuuuuu format, depending on whether the function is\nused in a string or numeric context.", "The optional precision determines the microsecond precision. See Microseconds in MariaDB.", "SYSDATE() returns the time at which it executes. This differs from the\nbehavior for NOW(), which returns a constant time that indicates the\ntime at which the statement began to execute. (Within a stored routine\nor trigger, NOW() returns the time at which the routine or triggering\nstatement began to execute.)", "In addition, changing the timestamp system variable with a SET timestamp statement affects the value returned by\nNOW() but not by SYSDATE(). This means that timestamp settings in the\nbinary log have no effect on invocations of SYSDATE().", "Because SYSDATE() can return different values even within the same statement, and is not affected by SET TIMESTAMP, it is non-deterministic and therefore unsafe for replication if statement-based binary logging is used. If that is a problem, you can use row-based logging, or start the server with the --sysdate-is-now mariadbd option to cause SYSDATE() to be an alias for NOW(). The non-deterministic nature of SYSDATE() also means that indexes cannot be used for evaluating expressions that refer to it, and that statements using the SYSDATE() function are unsafe for statement-based replication."], "Examples": ["SELECT NOW(), SLEEP(2), NOW();\n+---------------------+----------+---------------------+\n| NOW()               | SLEEP(2) | NOW()               |\n+---------------------+----------+---------------------+\n| 2010-03-27 13:23:40 |        0 | 2010-03-27 13:23:40 |\n+---------------------+----------+---------------------+\n\nSELECT SYSDATE(), SLEEP(2), SYSDATE();\n+---------------------+----------+---------------------+\n| SYSDATE()           | SLEEP(2) | SYSDATE()           |\n+---------------------+----------+---------------------+\n| 2010-03-27 13:23:52 |        0 | 2010-03-27 13:23:54 |\n+---------------------+----------+---------------------+\n", "SELECT SYSDATE(4);\n+--------------------------+\n| SYSDATE(4)               |\n+--------------------------+\n| 2018-07-10 10:17:13.1689 |\n+--------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/system_user/"], "Title": ["SYSTEM_USER"], "Feature": ["SYSTEM_USER()\n"], "Description": ["SYSTEM_USER() is a synonym for USER()."], "Examples": [], "Category": ["Information Functions"]}
{"HTML": ["https://mariadb.com//kb/en/column_delete/"], "Title": ["COLUMN_DELETE"], "Feature": ["COLUMN_DELETE(dyncol_blob, column_nr, column_nr...);\nCOLUMN_DELETE(dyncol_blob, column_name, column_name...);\n"], "Description": ["Deletes a dynamic column with the specified name. Multiple names can be given. The return value is a dynamic column blob after the modification."], "Examples": [], "Category": ["Dynamic Columns Functions"]}
{"HTML": ["https://mariadb.com//kb/en/sys_get_config/"], "Title": ["sys_get_config"], "Feature": ["sys.sys_get_config(name,default)\n"], "Description": ["sys_get_config is a stored function available with the Sys Schema.", "The function returns a configuration option value from the sys_config table. It takes two arguments; name, a configuration option name, and default, which is returned if the given option does not exist in the table. ", "Both arguments are VARCHAR(128) and can be NULL. Returns NULL if name is NULL, or if the given option is not found and default is NULL."], "Examples": ["SELECT sys.sys_get_config('ps_thread_trx_info.max_length',NULL);\n+----------------------------------------------------------+\n| sys.sys_get_config('ps_thread_trx_info.max_length',NULL) |\n+----------------------------------------------------------+\n| 65535                                                    |\n+----------------------------------------------------------+\n"], "Category": ["No Category"]}
{"HTML": ["https://mariadb.com//kb/en/sys_guid/"], "Title": ["SYS_GUID"], "Feature": ["SYS_GUID()\n"], "Description": ["Returns a 16-byte globally unique identifier (GUID), similar to the UUID function, but without the - character."], "Examples": ["SELECT SYS_GUID();\n+----------------------------------+\n| SYS_GUID()                       |\n+----------------------------------+\n| 2C574E45BA2811EBB265F859713E4BE4 |\n+----------------------------------+\n"], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://mariadb.com//kb/en/tan/"], "Title": ["TAN"], "Feature": ["TAN(X)\n"], "Description": ["Returns the tangent of X, where X is given in radians."], "Examples": ["SELECT TAN(0.7853981633974483);\n+-------------------------+\n| TAN(0.7853981633974483) |\n+-------------------------+\n|      0.9999999999999999 |\n+-------------------------+\n\nSELECT TAN(PI());\n+-----------------------+\n| TAN(PI())             |\n+-----------------------+\n| -1.22460635382238e-16 |\n+-----------------------+\n\nSELECT TAN(PI()+1);\n+-----------------+\n| TAN(PI()+1)     |\n+-----------------+\n| 1.5574077246549 |\n+-----------------+\n\nSELECT TAN(RADIANS(PI()));\n+--------------------+\n| TAN(RADIANS(PI())) |\n+--------------------+\n| 0.0548861508080033 |\n+--------------------+\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://mariadb.com//kb/en/time-function/"], "Title": ["TIME Function"], "Feature": ["TIME(expr)\n"], "Description": ["Extracts the time part of the time or datetime expression expr and\nreturns it as a string."], "Examples": ["SELECT TIME('2003-12-31 01:02:03');\n+-----------------------------+\n| TIME('2003-12-31 01:02:03') |\n+-----------------------------+\n| 01:02:03                    |\n+-----------------------------+\n\nSELECT TIME('2003-12-31 01:02:03.000123');\n+------------------------------------+\n| TIME('2003-12-31 01:02:03.000123') |\n+------------------------------------+\n| 01:02:03.000123                    |\n+------------------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/timediff/"], "Title": ["TIMEDIFF"], "Feature": ["TIMEDIFF(expr1,expr2)\n"], "Description": ["TIMEDIFF() returns expr1 - expr2 expressed as a time value. expr1 and\nexpr2 are time or date-and-time expressions, but both must be of the\nsame type."], "Examples": ["SELECT TIMEDIFF('2000:01:01 00:00:00', '2000:01:01 00:00:00.000001');\n+---------------------------------------------------------------+\n| TIMEDIFF('2000:01:01 00:00:00', '2000:01:01 00:00:00.000001') |\n+---------------------------------------------------------------+\n| -00:00:00.000001                                              |\n+---------------------------------------------------------------+\n\nSELECT TIMEDIFF('2008-12-31 23:59:59.000001', '2008-12-30 01:01:01.000002');\n+----------------------------------------------------------------------+\n| TIMEDIFF('2008-12-31 23:59:59.000001', '2008-12-30 01:01:01.000002') |\n+----------------------------------------------------------------------+\n| 46:58:57.999999                                                      |\n+----------------------------------------------------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/timestamp-function/"], "Title": ["TIMESTAMP FUNCTION"], "Feature": ["TIMESTAMP(expr), TIMESTAMP(expr1,expr2)\n"], "Description": ["With a single argument, this function returns the date or datetime\nexpression expr as a datetime value. With two arguments, it adds the\ntime expression expr2 to the date or datetime expression expr1 and\nreturns the result as a datetime value."], "Examples": ["SELECT TIMESTAMP('2003-12-31');\n+-------------------------+\n| TIMESTAMP('2003-12-31') |\n+-------------------------+\n| 2003-12-31 00:00:00     |\n+-------------------------+\n\nSELECT TIMESTAMP('2003-12-31 12:00:00','6:30:00');\n+--------------------------------------------+\n| TIMESTAMP('2003-12-31 12:00:00','6:30:00') |\n+--------------------------------------------+\n| 2003-12-31 18:30:00                        |\n+--------------------------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/timestampadd/"], "Title": ["TIMESTAMPADD"], "Feature": ["TIMESTAMPADD(unit,interval,datetime_expr)\n"], "Description": ["Adds the integer expression interval to the date or datetime\nexpression datetime_expr. The unit for interval is given by the unit\nargument, which should be one of the following values: MICROSECOND, SECOND, MINUTE, HOUR, DAY, WEEK, MONTH, QUARTER, or YEAR.", "The unit value may be specified using one of keywords as shown, or\nwith a prefix of SQL_TSI_. For example, DAY and SQL_TSI_DAY both are\nlegal.", "Before MariaDB 5.5, FRAC_SECOND was permitted as a synonym for MICROSECOND."], "Examples": ["SELECT TIMESTAMPADD(MINUTE,1,'2003-01-02');\n+-------------------------------------+\n| TIMESTAMPADD(MINUTE,1,'2003-01-02') |\n+-------------------------------------+\n| 2003-01-02 00:01:00                 |\n+-------------------------------------+\n\nSELECT TIMESTAMPADD(WEEK,1,'2003-01-02');\n+-----------------------------------+\n| TIMESTAMPADD(WEEK,1,'2003-01-02') |\n+-----------------------------------+\n| 2003-01-09                        |\n+-----------------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/timestampdiff/"], "Title": ["TIMESTAMPDIFF"], "Feature": ["TIMESTAMPDIFF(unit,datetime_expr1,datetime_expr2)\n"], "Description": ["Returns datetime_expr2 - datetime_expr1, where datetime_expr1 and\ndatetime_expr2 are date or datetime expressions. One expression may be\na date and the other a datetime; a date value is treated as a datetime\nhaving the time part '00:00:00' where necessary. The unit for the\nresult (an integer) is given by the unit argument. The legal values\nfor unit are the same as those listed in the description of the\nTIMESTAMPADD() function, i.e  MICROSECOND, SECOND, MINUTE, HOUR, DAY, WEEK, MONTH, QUARTER, or YEAR.", "TIMESTAMPDIFF can also be used to calculate age."], "Examples": ["SELECT TIMESTAMPDIFF(MONTH,'2003-02-01','2003-05-01');\n+------------------------------------------------+\n| TIMESTAMPDIFF(MONTH,'2003-02-01','2003-05-01') |\n+------------------------------------------------+\n|                                              3 |\n+------------------------------------------------+\n\nSELECT TIMESTAMPDIFF(YEAR,'2002-05-01','2001-01-01');\n+-----------------------------------------------+\n| TIMESTAMPDIFF(YEAR,'2002-05-01','2001-01-01') |\n+-----------------------------------------------+\n|                                            -1 |\n+-----------------------------------------------+\n\nSELECT TIMESTAMPDIFF(MINUTE,'2003-02-01','2003-05-01 12:05:55');\n+----------------------------------------------------------+\n| TIMESTAMPDIFF(MINUTE,'2003-02-01','2003-05-01 12:05:55') |\n+----------------------------------------------------------+\n|                                                   128885 |\n+----------------------------------------------------------+\n", "SELECT CURDATE();\n+------------+\n| CURDATE()  |\n+------------+\n| 2019-05-27 |\n+------------+\n\nSELECT TIMESTAMPDIFF(YEAR, '1971-06-06', CURDATE()) AS age;\n+------+\n| age  |\n+------+\n|   47 |\n+------+\n\nSELECT TIMESTAMPDIFF(YEAR, '1971-05-06', CURDATE()) AS age;\n+------+\n| age  |\n+------+\n|   48 |\n+------+\n", "SELECT name, date_of_birth, TIMESTAMPDIFF(YEAR,date_of_birth,'2014-08-02') AS age \n  FROM student_details;\n+---------+---------------+------+\n| name    | date_of_birth | age  |\n+---------+---------------+------+\n| Chun    | 1993-12-31    |   20 |\n| Esben   | 1946-01-01    |   68 |\n| Kaolin  | 1996-07-16    |   18 |\n| Tatiana | 1988-04-13    |   26 |\n+---------+---------------+------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/time_format/"], "Title": ["TIME_FORMAT"], "Feature": ["TIME_FORMAT(time,format)\n"], "Description": ["This is used like the DATE_FORMAT() function, but the format string\nmay contain format specifiers only for hours, minutes, and seconds.\nOther specifiers produce a NULL value or 0."], "Examples": ["SELECT TIME_FORMAT('100:00:00', '%H %k %h %I %l');\n+--------------------------------------------+\n| TIME_FORMAT('100:00:00', '%H %k %h %I %l') |\n+--------------------------------------------+\n| 100 100 04 04 4                            |\n+--------------------------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/time_to_sec/"], "Title": ["TIME_TO_SEC"], "Feature": ["TIME_TO_SEC(time)\n"], "Description": ["Returns the time argument, converted to seconds.", "The value returned by TIME_TO_SEC is of type DOUBLE. Before MariaDB 5.3 (and MySQL 5.6), the type was INT. The returned value preserves microseconds of the argument. See also Microseconds in MariaDB."], "Examples": ["SELECT TIME_TO_SEC('22:23:00');\n+-------------------------+\n| TIME_TO_SEC('22:23:00') |\n+-------------------------+\n|                   80580 |\n+-------------------------+\n", "SELECT TIME_TO_SEC('00:39:38');\n+-------------------------+\n| TIME_TO_SEC('00:39:38') |\n+-------------------------+\n|                    2378 |\n+-------------------------+\n", "SELECT TIME_TO_SEC('09:12:55.2355');\n+------------------------------+\n| TIME_TO_SEC('09:12:55.2355') |\n+------------------------------+\n|                   33175.2355 |\n+------------------------------+\n1 row in set (0.000 sec)\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/column_exists/"], "Title": ["COLUMN_EXISTS"], "Feature": ["COLUMN_EXISTS(dyncol_blob, column_nr);\nCOLUMN_EXISTS(dyncol_blob, column_name);\n"], "Description": ["Checks if a column with name column_name exists in dyncol_blob. If yes, return 1, otherwise return 0. See dynamic columns for more information."], "Examples": [], "Category": ["Dynamic Columns Functions"]}
{"HTML": ["https://mariadb.com//kb/en/touches/"], "Title": ["TOUCHES"], "Feature": ["Touches(g1,g2)\n"], "Description": ["Returns 1 or 0 to indicate whether g1 spatially touches g2. Two\ngeometries spatially touch if the interiors of the geometries do not intersect,\nbut the boundary of one of the geometries intersects either the boundary or the\ninterior of the other.", "TOUCHES() is based on the original MySQL implementation and uses object bounding rectangles, while ST_TOUCHES() uses object shapes."], "Examples": [], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/to_base64/"], "Title": ["TO_BASE64"], "Feature": ["TO_BASE64(str)\n"], "Description": ["Converts the string argument str to its base-64 encoded form, returning the result as a character string in the connection character set and collation.", "The argument str will be converted to string first if it is not a string. A NULL argument will return a NULL result.", "The reverse function, FROM_BASE64(), decodes an encoded base-64 string.", "There are a numerous different methods to base-64 encode a string. The following are used by MariaDB and MySQL:", "Alphabet value 64 is encoded as '+'.\nAlphabet value 63 is encoded as '/'.\nEncoding output is made up of groups of four printable characters, with each three bytes of data encoded using four characters. If the final group is not complete, it is padded with '=' characters to make up a length of four.\nTo divide long output, a newline is added after every 76 characters.\nDecoding will recognize and ignore newlines, carriage returns, tabs, and spaces. \n"], "Examples": ["SELECT TO_BASE64('Maria');\n+--------------------+\n| TO_BASE64('Maria') |\n+--------------------+\n| TWFyaWE=           |\n+--------------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/to_char/"], "Title": ["TO_CHAR"], "Feature": ["TO_CHAR(expr[, fmt])\n"], "Description": ["The TO_CHAR function converts an expr of type date, datetime, time or timestamp to a string. The optional fmt argument supports YYYY/YYY/YY/RRRR/RR/MM/MON/MONTH/MI/DD/DY/HH/HH12/HH24/SS and special characters. The default value is \"YYYY-MM-DD HH24:MI:SS\".", "In Oracle, TO_CHAR can also be used to convert numbers to strings, but this is not supported in MariaDB and will give an error."], "Examples": ["SELECT TO_CHAR('1980-01-11 04:50:39', 'YYYY-MM-DD');\n+----------------------------------------------+\n| TO_CHAR('1980-01-11 04:50:39', 'YYYY-MM-DD') |\n+----------------------------------------------+\n| 1980-01-11                                   |\n+----------------------------------------------+\n\nSELECT TO_CHAR('1980-01-11 04:50:39', 'HH24-MI-SS');\n+----------------------------------------------+\n| TO_CHAR('1980-01-11 04:50:39', 'HH24-MI-SS') |\n+----------------------------------------------+\n| 04-50-39                                     |\n+----------------------------------------------+\n\nSELECT TO_CHAR('00-01-01 00:00:00', 'YY-MM-DD HH24:MI:SS');\n+-----------------------------------------------------+\n| TO_CHAR('00-01-01 00:00:00', 'YY-MM-DD HH24:MI:SS') |\n+-----------------------------------------------------+\n| 00-01-01 00:00:00                                   |\n+-----------------------------------------------------+\n\nSELECT TO_CHAR('99-12-31 23:59:59', 'YY-MM-DD HH24:MI:SS');\n+-----------------------------------------------------+\n| TO_CHAR('99-12-31 23:59:59', 'YY-MM-DD HH24:MI:SS') |\n+-----------------------------------------------------+\n| 99-12-31 23:59:59                                   |\n+-----------------------------------------------------+\n\nSELECT TO_CHAR('9999-12-31 23:59:59', 'YY-MM-DD HH24:MI:SS');\n+-------------------------------------------------------+\n| TO_CHAR('9999-12-31 23:59:59', 'YY-MM-DD HH24:MI:SS') |\n+-------------------------------------------------------+\n| 99-12-31 23:59:59                                     |\n+-------------------------------------------------------+\n\nSELECT TO_CHAR('21-01-03 08:30:00', 'Y-MONTH-DY HH:MI:SS');\n+-----------------------------------------------------+\n| TO_CHAR('21-01-03 08:30:00', 'Y-MONTH-DY HH:MI:SS') |\n+-----------------------------------------------------+\n| 1-January  -Sun 08:30:00                            |\n+-----------------------------------------------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/to_days/"], "Title": ["TO_DAYS"], "Feature": ["TO_DAYS(date)\n"], "Description": ["Given a date date, returns the number of days since the start of the current calendar (0000-00-00).", "The function is not designed for use with dates before the advent of the Gregorian calendar in October 1582. Results will not be reliable since it doesn't account for the lost days when the calendar changed from the Julian calendar.", "This is the converse of the FROM_DAYS() function."], "Examples": ["SELECT TO_DAYS('2007-10-07');\n+-----------------------+\n| TO_DAYS('2007-10-07') |\n+-----------------------+\n|                733321 |\n+-----------------------+\n\nSELECT TO_DAYS('0000-01-01');\n+-----------------------+\n| TO_DAYS('0000-01-01') |\n+-----------------------+\n|                     1 |\n+-----------------------+\n\nSELECT TO_DAYS(950501);\n+-----------------+\n| TO_DAYS(950501) |\n+-----------------+\n|          728779 |\n+-----------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/to_seconds/"], "Title": ["TO_SECONDS"], "Feature": ["TO_SECONDS(expr)\n"], "Description": ["Returns the number of seconds from year 0 till expr, or NULL if expr is not a valid date or datetime."], "Examples": ["SELECT TO_SECONDS('2013-06-13');\n+--------------------------+\n| TO_SECONDS('2013-06-13') |\n+--------------------------+\n|              63538300800 |\n+--------------------------+\n\nSELECT TO_SECONDS('2013-06-13 21:45:13');\n+-----------------------------------+\n| TO_SECONDS('2013-06-13 21:45:13') |\n+-----------------------------------+\n|                       63538379113 |\n+-----------------------------------+\n\nSELECT TO_SECONDS(NOW());\n+-------------------+\n| TO_SECONDS(NOW()) |\n+-------------------+\n|       63543530875 |\n+-------------------+\n\nSELECT TO_SECONDS(20130513);\n+----------------------+\n| TO_SECONDS(20130513) |\n+----------------------+\n|          63535622400 |\n+----------------------+\n1 row in set (0.00 sec)\n\nSELECT TO_SECONDS(130513);\n+--------------------+\n| TO_SECONDS(130513) |\n+--------------------+\n|        63535622400 |\n+--------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/trim/"], "Title": ["TRIM"], "Feature": ["TRIM([{BOTH | LEADING | TRAILING} [remstr] FROM] str), TRIM([remstr FROM] str)\n", "From MariaDB 10.3.6", "TRIM_ORACLE([{BOTH | LEADING | TRAILING} [remstr] FROM] str), TRIM([remstr FROM] str)\n"], "Description": ["Returns the string str with all remstr prefixes or suffixes removed. If none of the specifiers BOTH, LEADING, or TRAILING is given, BOTH is assumed. remstr is optional and, if not specified, spaces are removed.", "Returns NULL if given a NULL argument. If the result is empty, returns either an empty string, or, from MariaDB 10.3.6 with SQL_MODE=Oracle, NULL. SQL_MODE=Oracle is not set by default.", "The Oracle mode version of the function can be accessed in any mode by using TRIM_ORACLE as the function name."], "Examples": ["SELECT TRIM('  bar   ')\\G\n*************************** 1. row ***************************\nTRIM('  bar   '): bar\n\nSELECT TRIM(LEADING 'x' FROM 'xxxbarxxx')\\G\n*************************** 1. row ***************************\nTRIM(LEADING 'x' FROM 'xxxbarxxx'): barxxx\n\nSELECT TRIM(BOTH 'x' FROM 'xxxbarxxx')\\G\n*************************** 1. row ***************************\nTRIM(BOTH 'x' FROM 'xxxbarxxx'): bar\n\nSELECT TRIM(TRAILING 'xyz' FROM 'barxxyz')\\G\n*************************** 1. row ***************************\nTRIM(TRAILING 'xyz' FROM 'barxxyz'): barx\n", "SELECT TRIM(''),TRIM_ORACLE('');\n+----------+-----------------+\n| TRIM('') | TRIM_ORACLE('') |\n+----------+-----------------+\n|          | NULL            |\n+----------+-----------------+\n", "SELECT TRIM(''),TRIM_ORACLE('');\n+----------+-----------------+\n| TRIM('') | TRIM_ORACLE('') |\n+----------+-----------------+\n| NULL     | NULL            |\n+----------+-----------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/truncate/"], "Title": ["TRUNCATE"], "Feature": ["TRUNCATE(X,D)\n"], "Description": ["Returns the number X, truncated to D decimal places. If D is 0, the\nresult has no decimal point or fractional part. D can be negative to\ncause D digits left of the decimal point of the value X to become\nzero."], "Examples": ["SELECT TRUNCATE(1.223,1);\n+-------------------+\n| TRUNCATE(1.223,1) |\n+-------------------+\n|               1.2 |\n+-------------------+\n\nSELECT TRUNCATE(1.999,1);\n+-------------------+\n| TRUNCATE(1.999,1) |\n+-------------------+\n|               1.9 |\n+-------------------+\n\nSELECT TRUNCATE(1.999,0); \n+-------------------+\n| TRUNCATE(1.999,0) |\n+-------------------+\n|                 1 |\n+-------------------+\n\nSELECT TRUNCATE(-1.999,1);\n+--------------------+\n| TRUNCATE(-1.999,1) |\n+--------------------+\n|               -1.9 |\n+--------------------+\n\nSELECT TRUNCATE(122,-2);\n+------------------+\n| TRUNCATE(122,-2) |\n+------------------+\n|              100 |\n+------------------+\n\nSELECT TRUNCATE(10.28*100,0);\n+-----------------------+\n| TRUNCATE(10.28*100,0) |\n+-----------------------+\n|                  1028 |\n+-----------------------+\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://mariadb.com//kb/en/ucase/"], "Title": ["UCASE"], "Feature": ["UCASE(str)\n"], "Description": ["UCASE() is a synonym for UPPER()."], "Examples": [], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/uncompress/"], "Title": ["UNCOMPRESS"], "Feature": ["UNCOMPRESS(string_to_uncompress)\n"], "Description": ["Uncompresses a string compressed by the COMPRESS() function. If the\nargument is not a compressed value, the result is NULL. This function\nrequires MariaDB to have been compiled with a compression library such\nas zlib. Otherwise, the return value is always NULL. The have_compress server system variable indicates whether a compression library is present. "], "Examples": ["SELECT UNCOMPRESS(COMPRESS('a string'));\n+----------------------------------+\n| UNCOMPRESS(COMPRESS('a string')) |\n+----------------------------------+\n| a string                         |\n+----------------------------------+\n\nSELECT UNCOMPRESS('a string');\n+------------------------+\n| UNCOMPRESS('a string') |\n+------------------------+\n| NULL                   |\n+------------------------+\n"], "Category": ["Encryption, Hashing and Compression Functions"]}
{"HTML": ["https://mariadb.com//kb/en/uncompressed_length/"], "Title": ["UNCOMPRESSED_LENGTH"], "Feature": ["UNCOMPRESSED_LENGTH(compressed_string)\n"], "Description": ["Returns the length that the compressed string had before being\ncompressed with COMPRESS().", "UNCOMPRESSED_LENGTH() returns NULL or an incorrect result if the string is not compressed.", "Until MariaDB 10.3.1, returns MYSQL_TYPE_LONGLONG, or bigint(10), in all cases. From MariaDB 10.3.1, returns MYSQL_TYPE_LONG, or int(10), when the result would fit within 32-bits."], "Examples": ["SELECT UNCOMPRESSED_LENGTH(COMPRESS(REPEAT('a',30)));\n+-----------------------------------------------+\n| UNCOMPRESSED_LENGTH(COMPRESS(REPEAT('a',30))) |\n+-----------------------------------------------+\n|                                            30 |\n+-----------------------------------------------+\n"], "Category": ["Encryption, Hashing and Compression Functions"]}
{"HTML": ["https://mariadb.com//kb/en/column_get/"], "Title": ["COLUMN_GET"], "Feature": ["COLUMN_GET(dyncol_blob, column_nr as type);\nCOLUMN_GET(dyncol_blob, column_name as type);\n"], "Description": ["Gets the value of a dynamic column by its name. If no column with the given name exists, NULL will be returned.", "column_name as type requires that one specify the datatype of the dynamic column they are reading. ", "This may seem counter-intuitive: why would one need to specify which datatype they're retrieving? Can't the dynamic columns system figure the datatype from the data being stored?", "The answer is: SQL is a statically-typed language. The SQL interpreter needs to know the datatypes of all expressions before the query is run (for example, when one is using prepared statements and runs \"select COLUMN_GET(...)\", the prepared statement API requires the server to inform the client about the datatype of the column being read before the query is executed and the server can see what datatype the column actually has).", "Lengths", "If you're running queries like:", "SELECT COLUMN_GET(blob, 'colname' as CHAR) ...\n", "without specifying a maximum length (i.e. using as CHAR, not as CHAR(n)), MariaDB will report the maximum length of the resultset column to be 16,777,216. This may cause excessive memory usage in some client libraries, because they try to pre-allocate a buffer of maximum resultset width. To avoid this problem, use CHAR(n) whenever you're using COLUMN_GET in the select list.", "See Dynamic Columns:Datatypes for more information about datatypes."], "Examples": [], "Category": ["Dynamic Columns Functions"]}
{"HTML": ["https://mariadb.com//kb/en/unhex/"], "Title": ["UNHEX"], "Feature": ["UNHEX(str)\n"], "Description": ["Performs the inverse operation of HEX(str). That is, it interprets\neach pair of hexadecimal digits in the argument as a number and\nconverts it to the character represented by the number. The resulting\ncharacters are returned as a binary string.", "If str is NULL, UNHEX() returns NULL."], "Examples": ["SELECT HEX('MariaDB');\n+----------------+\n| HEX('MariaDB') |\n+----------------+\n| 4D617269614442 |\n+----------------+\n\nSELECT UNHEX('4D617269614442');\n+-------------------------+\n| UNHEX('4D617269614442') |\n+-------------------------+\n| MariaDB                 |\n+-------------------------+\n\nSELECT 0x4D617269614442;\n+------------------+\n| 0x4D617269614442 |\n+------------------+\n| MariaDB          |\n+------------------+\n\nSELECT UNHEX(HEX('string'));\n+----------------------+\n| UNHEX(HEX('string')) |\n+----------------------+\n| string               |\n+----------------------+\n\nSELECT HEX(UNHEX('1267'));\n+--------------------+\n| HEX(UNHEX('1267')) |\n+--------------------+\n| 1267               |\n+--------------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/unix_timestamp/"], "Title": ["UNIX_TIMESTAMP"], "Feature": ["UNIX_TIMESTAMP()\nUNIX_TIMESTAMP(date)\n"], "Description": ["If called with no argument, returns a Unix timestamp (seconds since\n'1970-01-01 00:00:00' UTC) as an unsigned integer. If UNIX_TIMESTAMP()\nis called with a date argument, it returns the value of the argument as seconds\nsince '1970-01-01 00:00:00' UTC. date may be a DATE string, a\nDATETIME string, a TIMESTAMP, or a number in\nthe format YYMMDD or YYYYMMDD. The server interprets date as a value in the\ncurrent time zone and converts it to an internal value in UTC. Clients can set\ntheir time zone as described in time zones.", "The inverse function of UNIX_TIMESTAMP() is FROM_UNIXTIME()", "UNIX_TIMESTAMP() supports microseconds.", "Timestamps in MariaDB have a maximum value of 2147483647, equivalent to 2038-01-19 05:14:07. This is due to the underlying 32-bit limitation. Using the function on a date beyond this will result in NULL being returned. Use DATETIME as a storage type if you require dates beyond this.\n", "Error Handling", "Returns NULL for wrong arguments to UNIX_TIMESTAMP(). In MySQL and MariaDB before 5.3 wrong arguments to UNIX_TIMESTAMP() returned 0. ", "Compatibility", "As you can see in the examples above, UNIX_TIMESTAMP(constant-date-string) returns a timestamp with 6 decimals while MariaDB 5.2 and before returns it without decimals. This can cause a problem if you are using UNIX_TIMESTAMP() as a partitioning function. You can fix this by using FLOOR(UNIX_TIMESTAMP(..)) or changing the date string to a date number, like 20080101000000. "], "Examples": ["SELECT UNIX_TIMESTAMP();\n+------------------+\n| UNIX_TIMESTAMP() |\n+------------------+\n|       1269711082 |\n+------------------+\n\nSELECT UNIX_TIMESTAMP('2007-11-30 10:30:19');\n+---------------------------------------+\n| UNIX_TIMESTAMP('2007-11-30 10:30:19') |\n+---------------------------------------+\n|                     1196436619.000000 |\n+---------------------------------------+\n\nSELECT UNIX_TIMESTAMP(\"2007-11-30 10:30:19.123456\");\n+----------------------------------------------+\n| unix_timestamp(\"2007-11-30 10:30:19.123456\") |\n+----------------------------------------------+\n|                            1196411419.123456 |\n+----------------------------------------------+\n\nSELECT FROM_UNIXTIME(UNIX_TIMESTAMP('2007-11-30 10:30:19'));\n+------------------------------------------------------+\n| FROM_UNIXTIME(UNIX_TIMESTAMP('2007-11-30 10:30:19')) |\n+------------------------------------------------------+\n| 2007-11-30 10:30:19.000000                           |\n+------------------------------------------------------+\n\nSELECT FROM_UNIXTIME(FLOOR(UNIX_TIMESTAMP('2007-11-30 10:30:19')));\n+-------------------------------------------------------------+\n| FROM_UNIXTIME(FLOOR(UNIX_TIMESTAMP('2007-11-30 10:30:19'))) |\n+-------------------------------------------------------------+\n| 2007-11-30 10:30:19                                         |\n+-------------------------------------------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/updatexml/"], "Title": ["UPDATEXML"], "Feature": ["UpdateXML(xml_target, xpath_expr, new_xml)\n"], "Description": ["This function replaces a single portion of a given fragment of XML markup\nxml_target with a new XML fragment new_xml, and then returns the\nchanged XML. The portion of xml_target that is replaced matches an XPath\nexpression xpath_expr supplied by the user. If no expression matching\nxpath_expr is found, or if multiple matches are found, the function returns\nthe original xml_target XML fragment. All three arguments should be\nstrings."], "Examples": ["SELECT\n    UpdateXML('<a><b>ccc</b><d></d></a>', '/a', '<e>fff</e>') AS val1,\n    UpdateXML('<a><b>ccc</b><d></d></a>', '/b', '<e>fff</e>') AS val2,\n    UpdateXML('<a><b>ccc</b><d></d></a>', '//b', '<e>fff</e>') AS val3,\n    UpdateXML('<a><b>ccc</b><d></d></a>', '/a/d', '<e>fff</e>') AS val4,\n    UpdateXML('<a><d></d><b>ccc</b><d></d></a>', '/a/d', '<e>fff</e>') AS val5\n    \\G\n*************************** 1. row ***************************\nval1: <e>fff</e>\nval2: <a><b>ccc</b><d></d></a>\nval3: <a><e>fff</e><d></d></a>\nval4: <a><b>ccc</b><e>fff</e></a>\nval5: <a><d></d><b>ccc</b><d></d></a>\n1 row in set (0.00 sec)\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/upper/"], "Title": ["UPPER"], "Feature": ["UPPER(str)\nUCASE(str)\n"], "Description": ["Returns the string str with all characters changed to uppercase\naccording to the current character set mapping. The default is latin1\n(cp1252 West European).", "UCASE is a synonym.", "SELECT UPPER(surname), givenname FROM users ORDER BY surname;\n+----------------+------------+\n| UPPER(surname) | givenname  |\n+----------------+------------+\n| ABEL           | Jacinto    |\n| CASTRO         | Robert     |\n| COSTA          | Phestos    |\n| MOSCHELLA      | Hippolytos |\n+----------------+------------+\n", "UPPER() is ineffective when applied to binary strings (BINARY, VARBINARY, BLOB). The description of LOWER() shows how to perform lettercase conversion of binary strings.", "Prior to MariaDB 11.3, the query optimizer did not handle queries of the format UCASE(varchar_col)=.... An optimizer_switch option, sargable_casefold=ON, was added in MariaDB 11.3.0 to handle this case. (MDEV-31496)"], "Examples": [], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/user/"], "Title": ["USER"], "Feature": ["USER()\n"], "Description": ["Returns the current MariaDB user name and host name, given when authenticating to MariaDB,  as a string in the utf8 character set.", "Note that the value of USER() may differ from the value of CURRENT_USER(), which is the user used to authenticate the current client. \nCURRENT_ROLE() returns the current active role.", "SYSTEM_USER() and SESSION_USER are synonyms for USER().", "Statements using the USER() function or one of its synonyms are not safe for statement level replication."], "Examples": ["shell> mysql --user=\"anonymous\"\n\nSELECT USER(),CURRENT_USER();\n+---------------------+----------------+\n| USER()              | CURRENT_USER() |\n+---------------------+----------------+\n| anonymous@localhost | @localhost     |\n+---------------------+----------------+\n", "SELECT SUBSTRING_INDEX(USER(), '@', -1);\n+----------------------------------+\n| SUBSTRING_INDEX(USER(), '@', -1) |\n+----------------------------------+\n| 192.168.0.101                    |\n+----------------------------------+\n"], "Category": ["Information Functions"]}
{"HTML": ["https://mariadb.com//kb/en/utc_date/"], "Title": ["UTC_DATE"], "Feature": ["UTC_DATE, UTC_DATE()\n"], "Description": ["Returns the current UTC date as a value in 'YYYY-MM-DD' or YYYYMMDD\nformat, depending on whether the function is used in a string or numeric context. "], "Examples": ["SELECT UTC_DATE(), UTC_DATE() + 0;\n+------------+----------------+\n| UTC_DATE() | UTC_DATE() + 0 |\n+------------+----------------+\n| 2010-03-27 |       20100327 |\n+------------+----------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/utc_time/"], "Title": ["UTC_TIME"], "Feature": ["UTC_TIME\nUTC_TIME([precision])\n"], "Description": ["Returns the current UTC time as a value in 'HH:MM:SS' or HHMMSS.uuuuuu format, depending on whether the function is used in a string or numeric context. ", "The optional precision determines the microsecond precision. See Microseconds in MariaDB."], "Examples": ["SELECT UTC_TIME(), UTC_TIME() + 0;\n+------------+----------------+\n| UTC_TIME() | UTC_TIME() + 0 |\n+------------+----------------+\n| 17:32:34   |  173234.000000 |\n+------------+----------------+\n", "SELECT UTC_TIME(5);\n+----------------+\n| UTC_TIME(5)    |\n+----------------+\n| 07:52:50.78369 |\n+----------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/utc_timestamp/"], "Title": ["UTC_TIMESTAMP"], "Feature": ["UTC_TIMESTAMP\nUTC_TIMESTAMP([precision])\n"], "Description": ["Returns the current UTC date and time as a value in 'YYYY-MM-DD\nHH:MM:SS' or YYYYMMDDHHMMSS.uuuuuu format, depending on whether the\nfunction is used in a string or numeric context.", "The optional precision determines the microsecond precision. See Microseconds in MariaDB."], "Examples": ["SELECT UTC_TIMESTAMP(), UTC_TIMESTAMP() + 0;\n+---------------------+-----------------------+\n| UTC_TIMESTAMP()     | UTC_TIMESTAMP() + 0   |\n+---------------------+-----------------------+\n| 2010-03-27 17:33:16 | 20100327173316.000000 |\n+---------------------+-----------------------+\n", "SELECT UTC_TIMESTAMP(4);\n+--------------------------+\n| UTC_TIMESTAMP(4)         |\n+--------------------------+\n| 2018-07-10 07:51:09.1019 |\n+--------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/uuid/"], "Title": ["UUID"], "Feature": ["UUID()\n"], "Description": ["Returns a Universally Unique Identifier (UUID).", "A UUID is designed as a number that is globally unique in space and time. Two\ncalls to UUID() are expected to generate two different\nvalues, even if these calls are performed on two separate computers that are\nnot connected to each other.", "UUID() results are intended to be unique, but cannot always be relied upon to be unpredictable and unguessable.\n", "A UUID is a 128-bit number represented by a utf8 string of five\nhexadecimal numbers in aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee\nformat:", "The first three numbers are generated from a timestamp.\nThe fourth number preserves temporal uniqueness in case the timestamp value\n  loses monotonicity (for example, due to daylight saving time).\nThe fifth number is an IEEE 802 node number that provides spatial uniqueness.\n  A random number is substituted if the latter is not available (for example,\n  because the host computer has no Ethernet card, or we do not know how to find\n  the hardware address of an interface on your operating system). In this case,\n  spatial uniqueness cannot be guaranteed. Nevertheless, a collision should\n  have very low probability.\n", "Currently, the MAC address of an interface is taken into account only on FreeBSD and Linux. On other operating systems, MariaDB uses a randomly generated 48-bit number.", "Statements using the UUID() function are not safe for statement-based replication.", "The function generates a UUIDv1 and the results are generated according to the \"DCE 1.1:Remote Procedure Call\" (Appendix A) CAE (Common Applications Environment) Specifications published by The Open Group in October 1997 (Document Number C706)."], "Examples": ["SELECT UUID();\n+--------------------------------------+\n| UUID()                               |\n+--------------------------------------+\n| cd41294a-afb0-11df-bc9b-00241dd75637 |\n+--------------------------------------+\n"], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://mariadb.com//kb/en/uuid_short/"], "Title": ["UUID_SHORT"], "Feature": ["UUID_SHORT()\n"], "Description": ["Returns a \"short\" universally unique identifier as a 64-bit unsigned integer (rather\nthan a string-form 128-bit identifier as returned by the UUID() function).", "The value of UUID_SHORT() is guaranteed to be unique if the\nfollowing conditions hold:", "The server_id of the current host is unique among your set of master and\n  slave servers\nserver_id is between 0 and 255\nYou don't set back your system time for your server between mariadbd restarts\nYou do not invoke UUID_SHORT() on average more than 16\n  million times per second between mariadbd restarts\n", "The UUID_SHORT() return value is constructed this way:", "  (server_id & 255) << 56\n+ (server_startup_time_in_seconds << 24)\n+ incremented_variable++;\n", "Statements using the UUID_SHORT() function are not safe for statement-based replication."], "Examples": ["SELECT UUID_SHORT();\n+-------------------+\n| UUID_SHORT()      |\n+-------------------+\n| 21517162376069120 |\n+-------------------+\n", "create table t1 (a bigint unsigned default(uuid_short()) primary key);\ninsert into t1 values(),();\nselect * from t1;\n+-------------------+\n| a                 |\n+-------------------+\n| 98113699159474176 |\n| 98113699159474177 |\n+-------------------+\n"], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://mariadb.com//kb/en/column_json/"], "Title": ["COLUMN_JSON"], "Feature": ["COLUMN_JSON(dyncol_blob)\n"], "Description": ["Returns a JSON representation of data in dyncol_blob. Can also be used to display nested columns. See dynamic columns for more information."], "Examples": ["select item_name, COLUMN_JSON(dynamic_cols) from assets;\n+-----------------+----------------------------------------+\n| item_name       | COLUMN_JSON(dynamic_cols)              |\n+-----------------+----------------------------------------+\n| MariaDB T-shirt | {\"size\":\"XL\",\"color\":\"blue\"}           |\n| Thinkpad Laptop | {\"color\":\"black\",\"warranty\":\"3 years\"} |\n+-----------------+----------------------------------------+\n"], "Category": ["Dynamic Columns Functions"]}
{"HTML": ["https://mariadb.com//kb/en/values-value/"], "Title": ["VALUES / VALUE"], "Feature": ["MariaDB starting with 10.3.3VALUE(col_name) \n", "MariaDB until 10.3.2VALUES(col_name) \n"], "Description": ["In an INSERT ... ON DUPLICATE KEY UPDATE statement, you can use the VALUES(col_name) function in the  UPDATE clause to refer to column values from the  INSERT portion of the statement. In other words,  VALUES(col_name) in the UPDATE clause refers to the value of col_name that would be inserted, had no duplicate-key conflict occurred. This function is especially useful in multiple-row inserts.", "The VALUES() function is meaningful only in INSERT ... ON DUPLICATE KEY UPDATE statements and returns NULL otherwise.", "In MariaDB 10.3.3 this function was renamed to VALUE(), because it's incompatible with the standard Table Value Constructors syntax, implemented in MariaDB 10.3.3.", "The VALUES() function can still be used even from MariaDB 10.3.3, but only in INSERT ... ON DUPLICATE KEY UPDATE statements; it's a syntax error otherwise."], "Examples": [], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://mariadb.com//kb/en/variance/"], "Title": ["VARIANCE"], "Feature": ["VARIANCE(expr) \n"], "Description": ["Returns the population standard variance of expr. This is an extension to\nstandard SQL. The standard SQL function VAR_POP() can be used\ninstead.", "Variance is calculated by", "working out the mean for the set\nfor each number, subtracting the mean and squaring the result\ncalculate the average of the resulting differences\n", "It is an aggregate function, and so can be used with the GROUP BY clause.", "VARIANCE() can be used as a window function.", "VARIANCE() returns NULL if there were no matching rows."], "Examples": ["CREATE TABLE v(i tinyint);\n\nINSERT INTO v VALUES(101),(99);\n\nSELECT VARIANCE(i) FROM v;\n+-------------+\n| VARIANCE(i) |\n+-------------+\n|      1.0000 |\n+-------------+\n\nINSERT INTO v VALUES(120),(80);\n\nSELECT VARIANCE(i) FROM v;\n+-------------+\n| VARIANCE(i) |\n+-------------+\n|    200.5000 |\n+-------------+\n", "CREATE OR REPLACE TABLE stats (category VARCHAR(2), x INT);\n\nINSERT INTO stats VALUES \n  ('a',1),('a',2),('a',3),\n  ('b',11),('b',12),('b',20),('b',30),('b',60);\n\nSELECT category, STDDEV_POP(x), STDDEV_SAMP(x), VAR_POP(x) \n  FROM stats GROUP BY category;\n+----------+---------------+----------------+------------+\n| category | STDDEV_POP(x) | STDDEV_SAMP(x) | VAR_POP(x) |\n+----------+---------------+----------------+------------+\n| a        |        0.8165 |         1.0000 |     0.6667 |\n| b        |       18.0400 |        20.1693 |   325.4400 |\n+----------+---------------+----------------+------------+\n", "CREATE OR REPLACE TABLE student_test (name CHAR(10), test CHAR(10), score TINYINT);\n\nINSERT INTO student_test VALUES \n    ('Chun', 'SQL', 75), ('Chun', 'Tuning', 73), \n    ('Esben', 'SQL', 43), ('Esben', 'Tuning', 31), \n    ('Kaolin', 'SQL', 56), ('Kaolin', 'Tuning', 88), \n    ('Tatiana', 'SQL', 87);\n\nSELECT name, test, score, VAR_POP(score) \n  OVER (PARTITION BY test) AS variance_results FROM student_test;\n+---------+--------+-------+------------------+\n| name    | test   | score | variance_results |\n+---------+--------+-------+------------------+\n| Chun    | SQL    |    75 |         287.1875 |\n| Chun    | Tuning |    73 |         582.0000 |\n| Esben   | SQL    |    43 |         287.1875 |\n| Esben   | Tuning |    31 |         582.0000 |\n| Kaolin  | SQL    |    56 |         287.1875 |\n| Kaolin  | Tuning |    88 |         582.0000 |\n| Tatiana | SQL    |    87 |         287.1875 |\n+---------+--------+-------+------------------+\n"], "Category": ["Aggregate Functions"]}
{"HTML": ["https://mariadb.com//kb/en/var_pop/"], "Title": ["VAR_POP"], "Feature": ["VAR_POP(expr)\n"], "Description": ["Returns the population standard variance of expr. It considers rows as\nthe whole population, not as a sample, so it has the number of rows as\nthe denominator. You can also use VARIANCE(), which is equivalent but\nis not standard SQL.", "Variance is calculated by", "working out the mean for the set\nfor each number, subtracting the mean and squaring the result\ncalculate the average of the resulting differences\n", "It is an aggregate function, and so can be used with the GROUP BY clause.", "VAR_POP() can be used as a window function.", "VAR_POP() returns NULL if there were no matching rows."], "Examples": ["CREATE TABLE v(i tinyint);\n\nINSERT INTO v VALUES(101),(99);\n\nSELECT VAR_POP(i) FROM v;\n+------------+\n| VAR_POP(i) |\n+------------+\n|     1.0000 |\n+------------+\n\nINSERT INTO v VALUES(120),(80);\n\nSELECT VAR_POP(i) FROM v;\n+------------+\n| VAR_POP(i) |\n+------------+\n|   200.5000 |\n+------------+\n", "CREATE OR REPLACE TABLE stats (category VARCHAR(2), x INT);\n\nINSERT INTO stats VALUES \n  ('a',1),('a',2),('a',3),\n  ('b',11),('b',12),('b',20),('b',30),('b',60);\n\nSELECT category, STDDEV_POP(x), STDDEV_SAMP(x), VAR_POP(x) \n  FROM stats GROUP BY category;\n+----------+---------------+----------------+------------+\n| category | STDDEV_POP(x) | STDDEV_SAMP(x) | VAR_POP(x) |\n+----------+---------------+----------------+------------+\n| a        |        0.8165 |         1.0000 |     0.6667 |\n| b        |       18.0400 |        20.1693 |   325.4400 |\n+----------+---------------+----------------+------------+\n", "CREATE OR REPLACE TABLE student_test (name CHAR(10), test CHAR(10), score TINYINT);\n\nINSERT INTO student_test VALUES \n    ('Chun', 'SQL', 75), ('Chun', 'Tuning', 73), \n    ('Esben', 'SQL', 43), ('Esben', 'Tuning', 31), \n    ('Kaolin', 'SQL', 56), ('Kaolin', 'Tuning', 88), \n    ('Tatiana', 'SQL', 87);\n\nSELECT name, test, score, VAR_POP(score) \n  OVER (PARTITION BY test) AS variance_results FROM student_test;\n+---------+--------+-------+------------------+\n| name    | test   | score | variance_results |\n+---------+--------+-------+------------------+\n| Chun    | SQL    |    75 |         287.1875 |\n| Esben   | SQL    |    43 |         287.1875 |\n| Kaolin  | SQL    |    56 |         287.1875 |\n| Tatiana | SQL    |    87 |         287.1875 |\n| Chun    | Tuning |    73 |         582.0000 |\n| Esben   | Tuning |    31 |         582.0000 |\n| Kaolin  | Tuning |    88 |         582.0000 |\n+---------+--------+-------+------------------+\n"], "Category": ["Aggregate Functions"]}
{"HTML": ["https://mariadb.com//kb/en/var_samp/"], "Title": ["VAR_SAMP"], "Feature": ["VAR_SAMP(expr)\n"], "Description": ["Returns the sample variance of expr. That is, the denominator is the number of rows minus one.", "It is an aggregate function, and so can be used with the GROUP BY clause.", "VAR_SAMP() can be used as a window function.", "VAR_SAMP() returns NULL if there were no matching rows."], "Examples": ["CREATE OR REPLACE TABLE stats (category VARCHAR(2), x INT);\n\nINSERT INTO stats VALUES \n  ('a',1),('a',2),('a',3),\n  ('b',11),('b',12),('b',20),('b',30),('b',60);\n\nSELECT category, STDDEV_POP(x), STDDEV_SAMP(x), VAR_POP(x) \n  FROM stats GROUP BY category;\n+----------+---------------+----------------+------------+\n| category | STDDEV_POP(x) | STDDEV_SAMP(x) | VAR_POP(x) |\n+----------+---------------+----------------+------------+\n| a        |        0.8165 |         1.0000 |     0.6667 |\n| b        |       18.0400 |        20.1693 |   325.4400 |\n+----------+---------------+----------------+------------+\n", "CREATE OR REPLACE TABLE student_test (name CHAR(10), test CHAR(10), score TINYINT);\n\nINSERT INTO student_test VALUES \n    ('Chun', 'SQL', 75), ('Chun', 'Tuning', 73), \n    ('Esben', 'SQL', 43), ('Esben', 'Tuning', 31), \n    ('Kaolin', 'SQL', 56), ('Kaolin', 'Tuning', 88), \n    ('Tatiana', 'SQL', 87);\n\nSELECT name, test, score, VAR_SAMP(score) \n  OVER (PARTITION BY test) AS variance_results FROM student_test;\n+---------+--------+-------+------------------+\n| name    | test   | score | variance_results |\n+---------+--------+-------+------------------+\n| Chun    | SQL    |    75 |         382.9167 |\n| Chun    | Tuning |    73 |         873.0000 |\n| Esben   | SQL    |    43 |         382.9167 |\n| Esben   | Tuning |    31 |         873.0000 |\n| Kaolin  | SQL    |    56 |         382.9167 |\n| Kaolin  | Tuning |    88 |         873.0000 |\n| Tatiana | SQL    |    87 |         382.9167 |\n+---------+--------+-------+------------------+\n"], "Category": ["Aggregate Functions"]}
{"HTML": ["https://mariadb.com//kb/en/vec_distance/"], "Title": ["VEC_DISTANCE"], "Feature": ["VEC_DISTANCE(v, s)\n"], "Description": ["VEC_Distance is an SQL function that calculates a Euclidean (L2) distance between two points."], "Examples": ["INSERT INTO v VALUES \n     (1, x'e360d63ebe554f3fcdbc523f4522193f5236083d'),\n     (2, x'f511303f72224a3fdd05fe3eb22a133ffae86a3f'),\n     (3,x'f09baa3ea172763f123def3e0c7fe53e288bf33e'),\n     (4,x'b97a523f2a193e3eb4f62e3f2d23583e9dd60d3f'),\n     (5,x'f7c5df3e984b2b3e65e59d3d7376db3eac63773e'),\n     (6,x'de01453ffa486d3f10aa4d3fdd66813c71cb163f'),\n     (7,x'76edfc3e4b57243f10f8423fb158713f020bda3e'),\n     (8,x'56926c3fdf098d3e2c8c5e3d1ad4953daa9d0b3e'),\n     (9,x'7b713f3e5258323f80d1113d673b2b3f66e3583f'),\n     (10,x'6ca1d43e9df91b3fe580da3e1c247d3f147cf33e');\n\nSELECT id FROM v \n  ORDER BY VEC_Distance(v, x'6ca1d43e9df91b3fe580da3e1c247d3f147cf33e');\n+----+\n| id |\n+----+\n| 10 |\n|  7 |\n|  3 |\n|  9 |\n|  2 |\n|  1 |\n|  5 |\n|  4 |\n|  6 |\n|  8 |\n+----+\n"], "Category": ["Vector Functions"]}
{"HTML": ["https://mariadb.com//kb/en/vec_fromtext/"], "Title": ["VEC_FromText"], "Feature": ["VEC_FromText(s)\n"], "Description": ["VEC_FromText converts a text representation of the vector (json array of numbers) to a vector (little-endian IEEE float sequence of bytes, 4 bytes per float). "], "Examples": ["select hex(vec_fromtext('[1,2,3]')); \n+------------------------------+\n| hex(vec_fromtext('[1,2,3]')) |\n+------------------------------+\n| 0000803F0000004000004040     |\n+------------------------------+\n"], "Category": ["Vector Functions"]}
{"HTML": ["https://mariadb.com//kb/en/vec_totext/"], "Title": ["VEC_ToText"], "Feature": ["VEC_ToText(v)\n"], "Description": ["VEC_ToText converts a binary vector into a json array of numbers (floats). Returns NULL and throws a warning 4201 if given an invalid vector."], "Examples": ["SELECT VEC_ToText(x'e360d63ebe554f3fcdbc523f4522193f5236083d');\n+---------------------------------------------------------+\n| VEC_ToText(x'e360d63ebe554f3fcdbc523f4522193f5236083d') |\n+---------------------------------------------------------+\n| [0.418708,0.809902,0.823193,0.598179,0.033255]          |\n+---------------------------------------------------------+\n", "SELECT VEC_ToText(x'aabbcc');\n+-----------------------+\n| VEC_ToText(x'aabbcc') |\n+-----------------------+\n| NULL                  |\n+-----------------------+\n1 row in set, 1 warning (0.000 sec)\n\nWarning (Code 4201): Invalid binary vector format. Must use IEEE standard float \n  representation in little-endian format. Use VEC_FromText() to generate it.\n"], "Category": ["Vector Functions"]}
{"HTML": ["https://mariadb.com//kb/en/version/"], "Title": ["VERSION"], "Feature": ["VERSION()\n"], "Description": ["Returns a string that indicates the MariaDB server version. The string\nuses the utf8 character set."], "Examples": ["SELECT VERSION();\n+----------------+\n| VERSION()      |\n+----------------+\n| 10.4.7-MariaDB |\n+----------------+\n"], "Category": ["Information Functions"]}
{"HTML": ["https://mariadb.com//kb/en/version_major/"], "Title": ["version_major"], "Feature": ["sys.version_major()\n"], "Description": ["version_major is a stored function available with the Sys Schema.", "It returns the MariaDB Server major release version."], "Examples": ["SELECT VERSION(),\n sys.version_major() AS major, \n sys.version_minor() AS minor,\n sys.version_patch() AS patch;\n+----------------+-------+-------+-------+\n| VERSION()      | major | minor | patch |\n+----------------+-------+-------+-------+\n| 10.8.2-MariaDB |    10 |     8 |     2 |\n+----------------+-------+-------+-------+\n"], "Category": ["No Category"]}
{"HTML": ["https://mariadb.com//kb/en/version_minor/"], "Title": ["version_minor"], "Feature": ["sys.version_minor()\n"], "Description": ["version_minor is a stored function available with the Sys Schema.", "It returns the MariaDB Server minor release version."], "Examples": ["SELECT VERSION(),\n sys.version_major() AS major, \n sys.version_minor() AS minor,\n sys.version_patch() AS patch;\n+----------------+-------+-------+-------+\n| VERSION()      | major | minor | patch |\n+----------------+-------+-------+-------+\n| 10.8.2-MariaDB |    10 |     8 |     2 |\n+----------------+-------+-------+-------+\n"], "Category": ["No Category"]}
{"HTML": ["https://mariadb.com//kb/en/column_list/"], "Title": ["COLUMN_LIST"], "Feature": ["COLUMN_LIST(dyncol_blob);\n"], "Description": ["Returns a comma-separated list of column names. The names are quoted with backticks.", "See dynamic columns for more information."], "Examples": [], "Category": ["Dynamic Columns Functions"]}
{"HTML": ["https://mariadb.com//kb/en/version_patch/"], "Title": ["version_patch"], "Feature": ["sys.version_patch()\n"], "Description": ["version_patch is a stored function available with the Sys Schema.", "It returns the MariaDB Server patch release version."], "Examples": ["SELECT VERSION(),\n sys.version_major() AS major, \n sys.version_minor() AS minor,\n sys.version_patch() AS patch;\n+----------------+-------+-------+-------+\n| VERSION()      | major | minor | patch |\n+----------------+-------+-------+-------+\n| 10.8.2-MariaDB |    10 |     8 |     2 |\n+----------------+-------+-------+-------+\n"], "Category": ["No Category"]}
{"HTML": ["https://mariadb.com//kb/en/week/"], "Title": ["WEEK"], "Feature": ["WEEK(date[,mode])\n"], "Description": ["This function returns the week number for date. The two-argument form of\nWEEK() allows you to specify whether the week starts on Sunday or Monday\nand whether the return value should be in the range from 0 to 53 or from 1 to\n53. If the mode argument is omitted, the value of the default_week_format system variable is used.", "Modes", "Mode1st day of weekRangeWeek 1 is the 1st week with\n0Sunday0-53a Sunday in this year\n1Monday0-53more than 3 days this year\n2Sunday1-53a Sunday in this year\n3Monday1-53more than 3 days this year\n4Sunday0-53more than 3 days this year\n5Monday0-53a Monday in this year\n6Sunday1-53more than 3 days this year\n7Monday1-53a Monday in this year\n\n", "With the mode value of 3, which means 'more than 3 days this year',  weeks are numbered according to ISO 8601:1988."], "Examples": ["SELECT WEEK('2008-02-20');\n+--------------------+\n| WEEK('2008-02-20') |\n+--------------------+\n|                  7 |\n+--------------------+\n\nSELECT WEEK('2008-02-20',0);\n+----------------------+\n| WEEK('2008-02-20',0) |\n+----------------------+\n|                    7 |\n+----------------------+\n\nSELECT WEEK('2008-02-20',1);\n+----------------------+\n| WEEK('2008-02-20',1) |\n+----------------------+\n|                    8 |\n+----------------------+\n\nSELECT WEEK('2008-12-31',0);\n+----------------------+\n| WEEK('2008-12-31',0) |\n+----------------------+\n|                   52 |\n+----------------------+\n\nSELECT WEEK('2008-12-31',1);\n+----------------------+\n| WEEK('2008-12-31',1) |\n+----------------------+\n|                   53 |\n+----------------------+\n\n SELECT WEEK('2019-12-30',3);\n+----------------------+\n| WEEK('2019-12-30',3) |\n+----------------------+\n|                    1 |\n+----------------------+\n", "CREATE TABLE t1 (d DATETIME);\nINSERT INTO t1 VALUES\n    (\"2007-01-30 21:31:07\"),\n    (\"1983-10-15 06:42:51\"),\n    (\"2011-04-21 12:34:56\"),\n    (\"2011-10-30 06:31:41\"),\n    (\"2011-01-30 14:03:25\"),\n    (\"2004-10-07 11:19:34\");\n", "SELECT d, WEEK(d,0), WEEK(d,1) from t1;\n+---------------------+-----------+-----------+\n| d                   | WEEK(d,0) | WEEK(d,1) |\n+---------------------+-----------+-----------+\n| 2007-01-30 21:31:07 |         4 |         5 |\n| 1983-10-15 06:42:51 |        41 |        41 |\n| 2011-04-21 12:34:56 |        16 |        16 |\n| 2011-10-30 06:31:41 |        44 |        43 |\n| 2011-01-30 14:03:25 |         5 |         4 |\n| 2004-10-07 11:19:34 |        40 |        41 |\n+---------------------+-----------+-----------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/weekday/"], "Title": ["WEEKDAY"], "Feature": ["WEEKDAY(date)\n"], "Description": ["Returns the weekday index for date \n(0 = Monday, 1 = Tuesday, ... 6 = Sunday).", "This contrasts with DAYOFWEEK() which follows the ODBC standard\n(1 = Sunday, 2 = Monday, ..., 7 = Saturday)."], "Examples": ["SELECT WEEKDAY('2008-02-03 22:23:00');\n+--------------------------------+\n| WEEKDAY('2008-02-03 22:23:00') |\n+--------------------------------+\n|                              6 |\n+--------------------------------+\n\nSELECT WEEKDAY('2007-11-06');\n+-----------------------+\n| WEEKDAY('2007-11-06') |\n+-----------------------+\n|                     1 |\n+-----------------------+\n", "CREATE TABLE t1 (d DATETIME);\nINSERT INTO t1 VALUES\n    (\"2007-01-30 21:31:07\"),\n    (\"1983-10-15 06:42:51\"),\n    (\"2011-04-21 12:34:56\"),\n    (\"2011-10-30 06:31:41\"),\n    (\"2011-01-30 14:03:25\"),\n    (\"2004-10-07 11:19:34\");\n", "SELECT d FROM t1 where WEEKDAY(d) = 6;\n+---------------------+\n| d                   |\n+---------------------+\n| 2011-10-30 06:31:41 |\n| 2011-01-30 14:03:25 |\n+---------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/weekofyear/"], "Title": ["WEEKOFYEAR"], "Feature": ["WEEKOFYEAR(date)\n"], "Description": ["Returns the calendar week of the date as a number in the range from 1\nto 53. WEEKOFYEAR() is a compatibility function that is equivalent to\nWEEK(date,3)."], "Examples": ["SELECT WEEKOFYEAR('2008-02-20');\n+--------------------------+\n| WEEKOFYEAR('2008-02-20') |\n+--------------------------+\n|                        8 |\n+--------------------------+\n", "CREATE TABLE t1 (d DATETIME);\nINSERT INTO t1 VALUES\n    (\"2007-01-30 21:31:07\"),\n    (\"1983-10-15 06:42:51\"),\n    (\"2011-04-21 12:34:56\"),\n    (\"2011-10-30 06:31:41\"),\n    (\"2011-01-30 14:03:25\"),\n    (\"2004-10-07 11:19:34\");\n", " select * from t1;\n+---------------------+\n| d                   |\n+---------------------+\n| 2007-01-30 21:31:07 |\n| 1983-10-15 06:42:51 |\n| 2011-04-21 12:34:56 |\n| 2011-10-30 06:31:41 |\n| 2011-01-30 14:03:25 |\n| 2004-10-07 11:19:34 |\n+---------------------+\n", "SELECT d, WEEKOFYEAR(d), WEEK(d,3) from t1;\n+---------------------+---------------+-----------+\n| d                   | WEEKOFYEAR(d) | WEEK(d,3) |\n+---------------------+---------------+-----------+\n| 2007-01-30 21:31:07 |             5 |         5 |\n| 1983-10-15 06:42:51 |            41 |        41 |\n| 2011-04-21 12:34:56 |            16 |        16 |\n| 2011-10-30 06:31:41 |            43 |        43 |\n| 2011-01-30 14:03:25 |             4 |         4 |\n| 2004-10-07 11:19:34 |            41 |        41 |\n+---------------------+---------------+-----------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/weight_string/"], "Title": ["WEIGHT_STRING"], "Feature": ["WEIGHT_STRING(str [AS {CHAR|BINARY}(N)] [LEVEL levels] [flags])\n  levels: N [ASC|DESC|REVERSE] [, N [ASC|DESC|REVERSE]] ... \n"], "Description": ["Returns a binary string representing the string's sorting and comparison value. A string with a lower result means that for sorting purposes the string appears before a string with a higher result.", "WEIGHT_STRING() is particularly useful when adding new collations, for testing purposes.", "If str is a non-binary string (CHAR, VARCHAR or TEXT), WEIGHT_STRING returns the string's collation weight. If str is a binary string (BINARY, VARBINARY or BLOB), the return value is simply the input value, since the weight for each byte in a binary string is the byte value.", "WEIGHT_STRING() returns NULL if given a NULL input. ", "The optional AS clause permits casting the input string to a binary or non-binary string, as well as to a particular length.", "AS BINARY(N) measures the length in bytes rather than characters, and right pads with 0x00 bytes to the desired length. ", "AS CHAR(N) measures the length in characters, and right pads with spaces to the desired length.", "N has a minimum value of 1, and if it is less than the length of the input string, the string is truncated without warning.", "The optional LEVEL clause specifies that the return value should contain weights for specific collation levels. The levels specifier can either be a single integer, a comma-separated list of integers, or a range of integers separated by a dash (whitespace is ignored). Integers can range from 1 to a maximum of 6, dependent on the collation, and need to be listed in ascending order.", "If the LEVEL clause is no provided, a default of 1 to the maximum for the collation is assumed.", "If the LEVEL is specified without using a range, an optional modifier is permitted.", "ASC, the default, returns the weights without any modification.", "DESC returns bitwise-inverted weights.", "REVERSE returns the weights in reverse order."], "Examples": ["SELECT HEX(WEIGHT_STRING('x'));\n+-------------------------+\n| HEX(WEIGHT_STRING('x')) |\n+-------------------------+\n| 0058                    |\n+-------------------------+\n\nSELECT HEX(WEIGHT_STRING('x' AS BINARY(4)));\n+--------------------------------------+\n| HEX(WEIGHT_STRING('x' AS BINARY(4))) |\n+--------------------------------------+\n| 78000000                             |\n+--------------------------------------+\n\nSELECT HEX(WEIGHT_STRING('x' AS CHAR(4)));\n+------------------------------------+\n| HEX(WEIGHT_STRING('x' AS CHAR(4))) |\n+------------------------------------+\n| 0058002000200020                   |\n+------------------------------------+\n\nSELECT HEX(WEIGHT_STRING(0xaa22ee LEVEL 1));\n+--------------------------------------+\n| HEX(WEIGHT_STRING(0xaa22ee LEVEL 1)) |\n+--------------------------------------+\n| AA22EE                               |\n+--------------------------------------+\n\nSELECT HEX(WEIGHT_STRING(0xaa22ee LEVEL 1 DESC));\n+-------------------------------------------+\n| HEX(WEIGHT_STRING(0xaa22ee LEVEL 1 DESC)) |\n+-------------------------------------------+\n| 55DD11                                    |\n+-------------------------------------------+\n\nSELECT HEX(WEIGHT_STRING(0xaa22ee LEVEL 1 REVERSE));\n+----------------------------------------------+\n| HEX(WEIGHT_STRING(0xaa22ee LEVEL 1 REVERSE)) |\n+----------------------------------------------+\n| EE22AA                                       |\n+----------------------------------------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/within/"], "Title": ["WITHIN"], "Feature": ["Within(g1,g2)\n"], "Description": ["Returns 1 or 0 to indicate whether g1 is spatially within g2.\nThis tests the opposite relationship as Contains().", "WITHIN() is based on the original MySQL implementation, and uses object bounding rectangles, while ST_WITHIN() uses object shapes."], "Examples": ["SET @g1 = GEOMFROMTEXT('POINT(174 149)');\nSET @g2 = GEOMFROMTEXT('POINT(176 151)');\nSET @g3 = GEOMFROMTEXT('POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))');\n\nSELECT within(@g1,@g3);\n+-----------------+\n| within(@g1,@g3) |\n+-----------------+\n|               1 |\n+-----------------+\n\nSELECT within(@g2,@g3);\n+-----------------+\n| within(@g2,@g3) |\n+-----------------+\n|               0 |\n+-----------------+\n"], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/wsrep_last_seen_gtid/"], "Title": ["WSREP_LAST_SEEN_GTID"], "Feature": ["WSREP_LAST_SEEN_GTID()\n"], "Description": ["Returns the Global Transaction ID of the most recent write transaction observed by the client.", "The result can be useful to determine the transaction to provide to WSREP_SYNC_WAIT_UPTO_GTID for waiting and unblocking purposes."], "Examples": [], "Category": ["Galera Functions"]}
{"HTML": ["https://mariadb.com//kb/en/wsrep_last_written_gtid/"], "Title": ["WSREP_LAST_WRITTEN_GTID"], "Feature": ["WSREP_LAST_WRITTEN_GTID()\n"], "Description": ["Returns the Global Transaction ID of the most recent write transaction performed by the client."], "Examples": [], "Category": ["Galera Functions"]}
{"HTML": ["https://mariadb.com//kb/en/wsrep_sync_wait_upto_gtid/"], "Title": ["WSREP_SYNC_WAIT_UPTO_GTID"], "Feature": ["WSREP_SYNC_WAIT_UPTO_GTID(gtid[,timeout])\n"], "Description": ["Blocks the client until the transaction specified by the given Global Transaction ID is applied and committed by the node.", "The optional timeout argument can be used to specify a block timeout in seconds. If not provided, the timeout will be indefinite.", "Returns the node that applied and committed the Global Transaction ID, ER_LOCAL_WAIT_TIMEOUT if the function is timed out before this, or ER_WRONG_ARGUMENTS if the function is given an invalid GTID.", "The result from WSREP_LAST_SEEN_GTID can be useful to determine the transaction to provide to WSREP_SYNC_WAIT_UPTO_GTID for waiting and unblocking purposes."], "Examples": [], "Category": ["Galera Functions"]}
{"HTML": ["https://mariadb.com//kb/en/year/"], "Title": ["YEAR"], "Feature": ["YEAR(date)\n"], "Description": ["Returns the year for the given date, in the range 1000 to 9999, or 0 for the\n\"zero\" date."], "Examples": ["CREATE TABLE t1 (d DATETIME);\nINSERT INTO t1 VALUES\n    (\"2007-01-30 21:31:07\"),\n    (\"1983-10-15 06:42:51\"),\n    (\"2011-04-21 12:34:56\"),\n    (\"2011-10-30 06:31:41\"),\n    (\"2011-01-30 14:03:25\"),\n    (\"2004-10-07 11:19:34\");\n", "SELECT * FROM t1;\n+---------------------+\n| d                   |\n+---------------------+\n| 2007-01-30 21:31:07 |\n| 1983-10-15 06:42:51 |\n| 2011-04-21 12:34:56 |\n| 2011-10-30 06:31:41 |\n| 2011-01-30 14:03:25 |\n| 2004-10-07 11:19:34 |\n+---------------------+\n\nSELECT * FROM t1 WHERE YEAR(d) = 2011;\n+---------------------+\n| d                   |\n+---------------------+\n| 2011-04-21 12:34:56 |\n| 2011-10-30 06:31:41 |\n| 2011-01-30 14:03:25 |\n+---------------------+\n", "SELECT YEAR('1987-01-01');\n+--------------------+\n| YEAR('1987-01-01') |\n+--------------------+\n|               1987 |\n+--------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/compress/"], "Title": ["COMPRESS"], "Feature": ["COMPRESS(string_to_compress)\n"], "Description": ["Compresses a string and returns the result as a binary string. This\nfunction requires MariaDB to have been compiled with a compression\nlibrary such as zlib. Otherwise, the return value is always NULL. The\ncompressed string can be uncompressed with UNCOMPRESS().", "The have_compress server system variable indicates whether a compression library is present. "], "Examples": ["SELECT LENGTH(COMPRESS(REPEAT('a',1000)));\n+------------------------------------+\n| LENGTH(COMPRESS(REPEAT('a',1000))) |\n+------------------------------------+\n|                                 21 |\n+------------------------------------+\n\nSELECT LENGTH(COMPRESS(''));\n+----------------------+\n| LENGTH(COMPRESS('')) |\n+----------------------+\n|                    0 |\n+----------------------+\n\nSELECT LENGTH(COMPRESS('a'));\n+-----------------------+\n| LENGTH(COMPRESS('a')) |\n+-----------------------+\n|                    13 |\n+-----------------------+\n\nSELECT LENGTH(COMPRESS(REPEAT('a',16)));\n+----------------------------------+\n| LENGTH(COMPRESS(REPEAT('a',16))) |\n+----------------------------------+\n|                               15 |\n+----------------------------------+\n"], "Category": ["Encryption, Hashing and Compression Functions"]}
{"HTML": ["https://mariadb.com//kb/en/addtime/"], "Title": ["ADDTIME"], "Feature": ["ADDTIME(expr1,expr2)\n"], "Description": ["ADDTIME() adds expr2 to expr1 and returns the result. expr1 is a time\nor datetime expression, and expr2 is a time expression."], "Examples": ["SELECT ADDTIME('2007-12-31 23:59:59.999999', '1 1:1:1.000002');\n+---------------------------------------------------------+\n| ADDTIME('2007-12-31 23:59:59.999999', '1 1:1:1.000002') |\n+---------------------------------------------------------+\n| 2008-01-02 01:01:01.000001                              |\n+---------------------------------------------------------+\n\nSELECT ADDTIME('01:00:00.999999', '02:00:00.999998');\n+-----------------------------------------------+\n| ADDTIME('01:00:00.999999', '02:00:00.999998') |\n+-----------------------------------------------+\n| 03:00:01.999997                               |\n+-----------------------------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/yearweek/"], "Title": ["YEARWEEK"], "Feature": ["YEARWEEK(date), YEARWEEK(date,mode)\n"], "Description": ["Returns year and week for a date. The mode argument works exactly like the mode\nargument to WEEK(). The year in the result may be different from the\nyear in the date argument for the first and the last week of the year."], "Examples": ["SELECT YEARWEEK('1987-01-01');\n+------------------------+\n| YEARWEEK('1987-01-01') |\n+------------------------+\n|                 198652 |\n+------------------------+\n", "CREATE TABLE t1 (d DATETIME);\nINSERT INTO t1 VALUES\n    (\"2007-01-30 21:31:07\"),\n    (\"1983-10-15 06:42:51\"),\n    (\"2011-04-21 12:34:56\"),\n    (\"2011-10-30 06:31:41\"),\n    (\"2011-01-30 14:03:25\"),\n    (\"2004-10-07 11:19:34\");\n", "SELECT * FROM t1;\n+---------------------+\n| d                   |\n+---------------------+\n| 2007-01-30 21:31:07 |\n| 1983-10-15 06:42:51 |\n| 2011-04-21 12:34:56 |\n| 2011-10-30 06:31:41 |\n| 2011-01-30 14:03:25 |\n| 2004-10-07 11:19:34 |\n+---------------------+\n6 rows in set (0.02 sec)\n", "SELECT YEARWEEK(d) FROM t1 WHERE YEAR(d) = 2011;\n+-------------+\n| YEARWEEK(d) |\n+-------------+\n|      201116 |\n|      201144 |\n|      201105 |\n+-------------+\n3 rows in set (0.03 sec)\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/concat/"], "Title": ["CONCAT"], "Feature": ["CONCAT(str1,str2,...)\n"], "Description": ["Returns the string that results from concatenating the arguments. May have one or more arguments. If all arguments are non-binary strings, the result is a non-binary string. If the arguments include any binary strings, the result is a binary string. A numeric argument is converted to its equivalent binary string form; if you want to avoid that, you can use an explicit type cast, as in this example:", "SELECT CONCAT(CAST(int_col AS CHAR), char_col);\n", "CONCAT() returns NULL if any argument is NULL.", "A NULL parameter hides all information contained in other parameters from the result. Sometimes this is not desirable; to avoid this, you can:", "Use the CONCAT_WS() function with an empty separator, because that function is NULL-safe.\nUse IFNULL() to turn NULLs into empty strings.\n", "Oracle Mode", "In Oracle mode, CONCAT ignores NULL."], "Examples": ["SELECT CONCAT('Ma', 'ria', 'DB');\n+---------------------------+\n| CONCAT('Ma', 'ria', 'DB') |\n+---------------------------+\n| MariaDB                   |\n+---------------------------+\n\nSELECT CONCAT('Ma', 'ria', NULL, 'DB');\n+---------------------------------+\n| CONCAT('Ma', 'ria', NULL, 'DB') |\n+---------------------------------+\n| NULL                            |\n+---------------------------------+\n\nSELECT CONCAT(42.0);\n+--------------+\n| CONCAT(42.0) |\n+--------------+\n| 42.0         |\n+--------------+\n", "SELECT CONCAT('The value of @v is: ', IFNULL(@v, ''));\n+------------------------------------------------+\n| CONCAT('The value of @v is: ', IFNULL(@v, '')) |\n+------------------------------------------------+\n| The value of @v is:                            |\n+------------------------------------------------+\n", "SELECT CONCAT('Ma', 'ria', NULL, 'DB');\n+---------------------------------+\n| CONCAT('Ma', 'ria', NULL, 'DB') |\n+---------------------------------+\n| MariaDB                         |\n+---------------------------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/concat_ws/"], "Title": ["CONCAT_WS"], "Feature": ["CONCAT_WS(separator,str1,str2,...)\n"], "Description": ["CONCAT_WS() stands for Concatenate With Separator and is a special form of CONCAT(). The first argument is the separator for the rest of the arguments. The separator is added between the strings to be concatenated. The separator can be a string, as can the rest of the arguments.", "If the separator is NULL, the result is NULL; all other NULL values are skipped. This makes CONCAT_WS() suitable when you want to concatenate some values and avoid losing all information if one of them is NULL."], "Examples": ["SELECT CONCAT_WS(',','First name','Second name','Last Name');\n+-------------------------------------------------------+\n| CONCAT_WS(',','First name','Second name','Last Name') |\n+-------------------------------------------------------+\n| First name,Second name,Last Name                      |\n+-------------------------------------------------------+\n\nSELECT CONCAT_WS('-','Floor',NULL,'Room');\n+------------------------------------+\n| CONCAT_WS('-','Floor',NULL,'Room') |\n+------------------------------------+\n| Floor-Room                         |\n+------------------------------------+\n", "SET @a = 'gnu', @b = 'penguin', @c = 'sea lion';\nQuery OK, 0 rows affected (0.00 sec)\n\nSELECT CONCAT_WS(', ', @a, @b, @c);\n+-----------------------------+\n| CONCAT_WS(', ', @a, @b, @c) |\n+-----------------------------+\n| gnu, penguin, sea lion      |\n+-----------------------------+\n", "SET @a = 'a', @b = NULL, @c = 'c';\n\nSELECT CONCAT_WS('', @a, @b, @c);\n+---------------------------+\n| CONCAT_WS('', @a, @b, @c) |\n+---------------------------+\n| ac                        |\n+---------------------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/connection_id/"], "Title": ["CONNECTION_ID"], "Feature": ["CONNECTION_ID()\n"], "Description": ["Returns the connection ID for the connection. Every connection (including events) has an ID that is unique among the set of currently connected clients.", "Until MariaDB 10.3.1, returns MYSQL_TYPE_LONGLONG, or bigint(10). From MariaDB 10.3.1, returns MYSQL_TYPE_LONG, or int(10)."], "Examples": ["SELECT CONNECTION_ID();\n+-----------------+\n| CONNECTION_ID() |\n+-----------------+\n|               3 |\n+-----------------+\n"], "Category": ["Information Functions"]}
{"HTML": ["https://mariadb.com//kb/en/contains/"], "Title": ["CONTAINS"], "Feature": ["Contains(g1,g2)\n"], "Description": ["Returns 1 or 0 to indicate whether a geometry g1 completely contains geometry g2. CONTAINS() is based on the original MySQL implementation and uses object bounding rectangles, while ST_CONTAINS() uses object shapes. ", "This tests the opposite relationship to Within()."], "Examples": [], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/conv/"], "Title": ["CONV"], "Feature": ["CONV(N,from_base,to_base)\n"], "Description": ["Converts numbers between different number bases. Returns a string\nrepresentation of the number N, converted from base from_base\nto base to_base.", "Returns NULL if any argument is NULL, or if the second or third argument are not in the allowed range.", "The argument N is interpreted as an integer, but may be specified as an\ninteger or a string. The minimum base is 2 and the maximum base is 36 (prior to MariaDB 11.4.0) or 62 (from MariaDB 11.4.0). If to_base is a negative number, N is regarded as a signed number.\nOtherwise, N is treated as unsigned. CONV() works with 64-bit\nprecision.", "Some shortcuts for this function are also available: BIN(), OCT(), HEX(), UNHEX(). Also, MariaDB allows binary literal values and hexadecimal literal values."], "Examples": ["SELECT CONV('a',16,2);\n+----------------+\n| CONV('a',16,2) |\n+----------------+\n| 1010           |\n+----------------+\n\nSELECT CONV('6E',18,8);\n+-----------------+\n| CONV('6E',18,8) |\n+-----------------+\n| 172             |\n+-----------------+\n\nSELECT CONV(-17,10,-18);\n+------------------+\n| CONV(-17,10,-18) |\n+------------------+\n| -H               |\n+------------------+\n\nSELECT CONV(12+'10'+'10'+0xa,10,10);\n+------------------------------+\n| CONV(12+'10'+'10'+0xa,10,10) |\n+------------------------------+\n| 42                           |\n+------------------------------+\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://mariadb.com//kb/en/convert/"], "Title": ["CONVERT"], "Feature": ["CONVERT(expr,type), CONVERT(expr USING transcoding_name)\n"], "Description": ["The\tCONVERT() and CAST() functions take a value of one type and produce a value of another type.", "The type can be one of the following values:", "BINARY\nCHAR\nDATE\nDATETIME\nDECIMAL[(M[,D])]\nDOUBLE\nFLOAT (from MariaDB 10.4.5)\nINTEGER\nShort for SIGNED INTEGER\n\nSIGNED [INTEGER]\nUNSIGNED [INTEGER]\nTIME\nVARCHAR (in Oracle mode, from MariaDB 10.3)\n", "Note that in MariaDB, INT and INTEGER are the same thing.", "BINARY produces a string with the BINARY data type.  If the optional length is given, BINARY(N) causes the cast to use no more than N bytes of the argument. Values shorter than the given number in bytes are padded with 0x00 bytes to make them equal the length value.", "CHAR(N) causes the cast to use no more than the number of characters given in the argument.", "The main difference between the CAST() and CONVERT() is that CONVERT(expr,type) is ODBC syntax while CAST(expr as type) and CONVERT(... USING ...) are SQL92 syntax.", "CONVERT() with USING is used to convert data between different character sets. In MariaDB, transcoding names are the same as the\ncorresponding character set names. For example, this statement\nconverts the string 'abc' in the default character set to the\ncorresponding string in the utf8 character set:", "SELECT CONVERT('abc' USING utf8);\n"], "Examples": ["SELECT enum_col FROM tbl_name \nORDER BY CAST(enum_col AS CHAR);\n", "SET @x = 'AardVark';\n\nSET @x = BINARY 'AardVark';\n\nSELECT LOWER(@x), LOWER(CONVERT (@x USING latin1));\n+-----------+----------------------------------+\n| LOWER(@x) | LOWER(CONVERT (@x USING latin1)) |\n+-----------+----------------------------------+\n| AardVark  | aardvark                         |\n+-----------+----------------------------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/convert_tz/"], "Title": ["CONVERT_TZ"], "Feature": ["CONVERT_TZ(dt,from_tz,to_tz)\n"], "Description": ["CONVERT_TZ() converts a datetime value dt from the time zone given by from_tz to the time zone given by to_tz and returns the resulting value.", "In order to use named time zones, such as GMT, MET or Africa/Johannesburg, the time_zone tables must be loaded (see mysql_tzinfo_to_sql).", "No conversion will take place if the value falls outside of the supported TIMESTAMP range ('1970-01-01 00:00:01' to '2038-01-19 05:14:07' UTC) when converted from from_tz to UTC.", "This function returns NULL if the arguments are invalid (or named time zones have not been loaded).", "See time zones for more information."], "Examples": ["SELECT CONVERT_TZ('2016-01-01 12:00:00','+00:00','+10:00');\n+-----------------------------------------------------+\n| CONVERT_TZ('2016-01-01 12:00:00','+00:00','+10:00') |\n+-----------------------------------------------------+\n| 2016-01-01 22:00:00                                 |\n+-----------------------------------------------------+\n", "SELECT CONVERT_TZ('2016-01-01 12:00:00','GMT','Africa/Johannesburg');\n+---------------------------------------------------------------+\n| CONVERT_TZ('2016-01-01 12:00:00','GMT','Africa/Johannesburg') |\n+---------------------------------------------------------------+\n| 2016-01-01 14:00:00                                           |\n+---------------------------------------------------------------+\n", "SELECT CONVERT_TZ('1969-12-31 22:00:00','+00:00','+10:00');\n+-----------------------------------------------------+\n| CONVERT_TZ('1969-12-31 22:00:00','+00:00','+10:00') |\n+-----------------------------------------------------+\n| 1969-12-31 22:00:00                                 |\n+-----------------------------------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/cos/"], "Title": ["COS"], "Feature": ["COS(X)\n"], "Description": ["Returns the cosine of X, where X is given in radians."], "Examples": ["SELECT COS(PI());\n+-----------+\n| COS(PI()) |\n+-----------+\n|        -1 |\n+-----------+\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://mariadb.com//kb/en/cot/"], "Title": ["COT"], "Feature": ["COT(X)\n"], "Description": ["Returns the cotangent of X."], "Examples": ["SELECT COT(42);\n+--------------------+\n| COT(42)            |\n+--------------------+\n| 0.4364167060752729 |\n+--------------------+\n\nSELECT COT(12);\n+---------------------+\n| COT(12)             |\n+---------------------+\n| -1.5726734063976893 |\n+---------------------+\n\nSELECT COT(0);\nERROR 1690 (22003): DOUBLE value is out of range in 'cot(0)'\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://mariadb.com//kb/en/count-distinct/"], "Title": ["COUNT DISTINCT"], "Feature": ["COUNT(DISTINCT expr,[expr...])\n"], "Description": ["Returns a count of the number of different non-NULL values.", "COUNT(DISTINCT) returns 0 if there were no matching rows.", "Although, from MariaDB 10.2.0, COUNT can be used as a window function, COUNT DISTINCT cannot be."], "Examples": ["CREATE TABLE student (name CHAR(10), test CHAR(10), score TINYINT); \n\nINSERT INTO student VALUES \n  ('Chun', 'SQL', 75), ('Chun', 'Tuning', 73), \n  ('Esben', 'SQL', 43), ('Esben', 'Tuning', 31), \n  ('Kaolin', 'SQL', 56), ('Kaolin', 'Tuning', 88), \n  ('Tatiana', 'SQL', 87), ('Tatiana', 'Tuning', 83);\n\nSELECT COUNT(*) FROM student;\n+----------+\n| COUNT(*) |\n+----------+\n|        8 |\n+----------+\n\nSELECT COUNT(DISTINCT (name)) FROM student;\n+------------------------+\n| COUNT(DISTINCT (name)) |\n+------------------------+\n|                      4 |\n+------------------------+\n"], "Category": ["Aggregate Functions"]}
{"HTML": ["https://mariadb.com//kb/en/add_months/"], "Title": ["ADD_MONTHS"], "Feature": ["ADD_MONTHS(date, months)\n"], "Description": ["ADD_MONTHS adds an integer months to a given date (DATE, DATETIME or TIMESTAMP), returning the resulting date.", "months can be positive or negative.  If months is not a whole number, then it will be rounded to the nearest whole number (not truncated).", "The resulting day component will remain the same as that specified in date, unless the resulting month has fewer days than the day component of the given date, in which case the day will be the last day of the resulting month.", "Returns NULL if given an invalid date, or a NULL argument."], "Examples": ["SELECT ADD_MONTHS('2012-01-31', 2);\n+-----------------------------+\n| ADD_MONTHS('2012-01-31', 2) |\n+-----------------------------+\n| 2012-03-31                  |\n+-----------------------------+\n\nSELECT ADD_MONTHS('2012-01-31', -5);\n+------------------------------+\n| ADD_MONTHS('2012-01-31', -5) |\n+------------------------------+\n| 2011-08-31                   |\n+------------------------------+\n\nSELECT ADD_MONTHS('2011-01-31', 1);\n+-----------------------------+\n| ADD_MONTHS('2011-01-31', 1) |\n+-----------------------------+\n| 2011-02-28                  |\n+-----------------------------+\n\nSELECT ADD_MONTHS('2012-01-31', 1);\n+-----------------------------+\n| ADD_MONTHS('2012-01-31', 1) |\n+-----------------------------+\n| 2012-02-29                  |\n+-----------------------------+\n\nSELECT ADD_MONTHS('2012-01-31', 2);\n+-----------------------------+\n| ADD_MONTHS('2012-01-31', 2) |\n+-----------------------------+\n| 2012-03-31                  |\n+-----------------------------+\n\nSELECT ADD_MONTHS('2012-01-31', 3);\n+-----------------------------+\n| ADD_MONTHS('2012-01-31', 3) |\n+-----------------------------+\n| 2012-04-30                  |\n+-----------------------------+\n\nSELECT ADD_MONTHS('2011-01-15', 2.5);\n+-------------------------------+\n| ADD_MONTHS('2011-01-15', 2.5) |\n+-------------------------------+\n| 2011-04-15                    |\n+-------------------------------+\n1 row in set (0.001 sec)\n\nSELECT ADD_MONTHS('2011-01-15', 2.6);\n+-------------------------------+\n| ADD_MONTHS('2011-01-15', 2.6) |\n+-------------------------------+\n| 2011-04-15                    |\n+-------------------------------+\n1 row in set (0.001 sec)\n\nSELECT ADD_MONTHS('2011-01-15', 2.1);\n+-------------------------------+\n| ADD_MONTHS('2011-01-15', 2.1) |\n+-------------------------------+\n| 2011-03-15                    |\n+-------------------------------+\n1 row in set (0.004 sec)\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/count/"], "Title": ["COUNT"], "Feature": ["COUNT(expr)\n"], "Description": ["Returns a count of the number of non-NULL values of expr in the rows retrieved by a SELECT statement. The result is a BIGINT value. It is an aggregate function, and so can be used with the GROUP BY clause.", "COUNT(*) counts the total number of rows in a table.", "COUNT() returns 0 if there were no matching rows.", "COUNT() can be used as a window function."], "Examples": ["CREATE TABLE student (name CHAR(10), test CHAR(10), score TINYINT); \n\nINSERT INTO student VALUES \n  ('Chun', 'SQL', 75), ('Chun', 'Tuning', 73), \n  ('Esben', 'SQL', 43), ('Esben', 'Tuning', 31), \n  ('Kaolin', 'SQL', 56), ('Kaolin', 'Tuning', 88), \n  ('Tatiana', 'SQL', 87), ('Tatiana', 'Tuning', 83);\n\nSELECT COUNT(*) FROM student;\n+----------+\n| COUNT(*) |\n+----------+\n|        8 |\n+----------+\n", "SELECT COUNT(DISTINCT (name)) FROM student;\n+------------------------+\n| COUNT(DISTINCT (name)) |\n+------------------------+\n|                      4 |\n+------------------------+\n", "CREATE OR REPLACE TABLE student_test (name CHAR(10), test CHAR(10), score TINYINT);\n\nINSERT INTO student_test VALUES \n    ('Chun', 'SQL', 75), ('Chun', 'Tuning', 73), \n    ('Esben', 'SQL', 43), ('Esben', 'Tuning', 31), \n    ('Kaolin', 'SQL', 56), ('Kaolin', 'Tuning', 88), \n    ('Tatiana', 'SQL', 87);\n\nSELECT name, test, score, COUNT(score) OVER (PARTITION BY name) \n    AS tests_written FROM student_test;\n+---------+--------+-------+---------------+\n| name    | test   | score | tests_written |\n+---------+--------+-------+---------------+\n| Chun    | SQL    |    75 |             2 |\n| Chun    | Tuning |    73 |             2 |\n| Esben   | SQL    |    43 |             2 |\n| Esben   | Tuning |    31 |             2 |\n| Kaolin  | SQL    |    56 |             2 |\n| Kaolin  | Tuning |    88 |             2 |\n| Tatiana | SQL    |    87 |             1 |\n+---------+--------+-------+---------------+\n"], "Category": ["Aggregate Functions"]}
{"HTML": ["https://mariadb.com//kb/en/crc32/"], "Title": ["CRC32"], "Feature": ["<= MariaDB 10.7", "CRC32(expr)\n", "From MariaDB 10.8", "CRC32([par,]expr)\n"], "Description": ["Computes a cyclic redundancy check (CRC) value and returns a 32-bit unsigned\nvalue. The result is NULL if the argument is NULL. The argument is\nexpected to be a string and (if possible) is treated as one if it is\nnot.", "Uses the ISO 3309 polynomial that used by zlib and many others. MariaDB 10.8 introduced the CRC32C() function, which uses the alternate Castagnoli polynomia.\n", "MariaDB starting with 10.8Often, CRC is computed in pieces. To facilitate this, MariaDB 10.8.0 introduced an\noptional parameter: CRC32('MariaDB')=CRC32(CRC32('Maria'),'DB'). \n"], "Examples": ["SELECT CRC32('MariaDB');\n+------------------+\n| CRC32('MariaDB') |\n+------------------+\n|       4227209140 |\n+------------------+\n\nSELECT CRC32('mariadb');\n+------------------+\n| CRC32('mariadb') |\n+------------------+\n|       2594253378 |\n+------------------+\n", "SELECT CRC32(CRC32('Maria'),'DB');\n+----------------------------+\n| CRC32(CRC32('Maria'),'DB') |\n+----------------------------+\n|                 4227209140 |\n+----------------------------+\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://mariadb.com//kb/en/crc32c/"], "Title": ["CRC32C"], "Feature": ["CRC32C([par,]expr)\n"], "Description": ["MariaDB has always included a native unary function CRC32() that computes the CRC-32 of a string using the ISO 3309 polynomial that used by zlib and many others.", "InnoDB and MyRocks use a different polynomial, which was implemented in SSE4.2 instructions that were introduced in the Intel Nehalem microarchitecture. This is commonly called CRC-32C (Castagnoli).", "The CRC32C function uses the Castagnoli polynomial.", "This allows SELECT\u2026INTO DUMPFILE to be used for the creation of files with\nvalid checksums, such as a logically empty InnoDB redo log file\nib_logfile0 corresponding to a particular log sequence number.", "The optional parameter allows the checksum to be computed in pieces:\nCRC32C('MariaDB')=CRC32C(CRC32C('Maria'),'DB')."], "Examples": ["SELECT CRC32C('MariaDB');\n+-------------------+\n| CRC32C('MariaDB') |\n+-------------------+\n|         809606978 |\n+-------------------+\n\nSELECT CRC32C(CRC32C('Maria'),'DB');\n+------------------------------+\n| CRC32C(CRC32C('Maria'),'DB') |\n+------------------------------+\n|                    809606978 |\n+------------------------------+\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://mariadb.com//kb/en/crosses/"], "Title": ["CROSSES"], "Feature": ["Crosses(g1,g2)\n"], "Description": ["Returns 1 if g1 spatially crosses g2. Returns NULL if g1 is\na Polygon or a MultiPolygon, or if g2 is a\nPoint or a MultiPoint. Otherwise, returns 0.", "The term spatially crosses denotes a spatial relation between two\ngiven geometries that has the following properties:", "The two geometries intersect\nTheir intersection results in a geometry that has a dimension that is one\n  less than the maximum dimension of the two given geometries\nTheir intersection is not equal to either of the two given geometries\n", "CROSSES() is based on the original MySQL implementation, and uses object bounding rectangles, while ST_CROSSES() uses object shapes."], "Examples": [], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/cume_dist/"], "Title": ["CUME_DIST"], "Feature": ["CUME_DIST() OVER ( \n  [ PARTITION BY partition_expression ] \n  [ ORDER BY order_list ]\n)\n"], "Description": ["CUME_DIST() is a window function that returns the cumulative distribution of a given row. The following formula is used to calculate the value:", "(number of rows <= current row) / (total rows)\n"], "Examples": ["create table t1 (\n  pk int primary key,\n  a int,\n  b int\n);\n\n\ninsert into t1 values\n( 1 , 0, 10),\n( 2 , 0, 10),\n( 3 , 1, 10),\n( 4 , 1, 10),\n( 8 , 2, 10),\n( 5 , 2, 20),\n( 6 , 2, 20),\n( 7 , 2, 20),\n( 9 , 4, 20),\n(10 , 4, 20);\n\nselect pk, a, b,\n    rank() over (order by a) as rank,\n    percent_rank() over (order by a) as pct_rank,\n    cume_dist() over (order by a) as cume_dist\nfrom t1;\n+----+------+------+------+--------------+--------------+\n| pk | a    | b    | rank | pct_rank     | cume_dist    |\n+----+------+------+------+--------------+--------------+\n|  1 |    0 |   10 |    1 | 0.0000000000 | 0.2000000000 |\n|  2 |    0 |   10 |    1 | 0.0000000000 | 0.2000000000 |\n|  3 |    1 |   10 |    3 | 0.2222222222 | 0.4000000000 |\n|  4 |    1 |   10 |    3 | 0.2222222222 | 0.4000000000 |\n|  5 |    2 |   20 |    5 | 0.4444444444 | 0.8000000000 |\n|  6 |    2 |   20 |    5 | 0.4444444444 | 0.8000000000 |\n|  7 |    2 |   20 |    5 | 0.4444444444 | 0.8000000000 |\n|  8 |    2 |   10 |    5 | 0.4444444444 | 0.8000000000 |\n|  9 |    4 |   20 |    9 | 0.8888888889 | 1.0000000000 |\n| 10 |    4 |   20 |    9 | 0.8888888889 | 1.0000000000 |\n+----+------+------+------+--------------+--------------+\n\nselect pk, a, b,\n       percent_rank() over (order by pk) as pct_rank,\n       cume_dist() over (order by pk) as cume_dist\nfrom t1 order by pk;\n+----+------+------+--------------+--------------+\n| pk | a    | b    | pct_rank     | cume_dist    |\n+----+------+------+--------------+--------------+\n|  1 |    0 |   10 | 0.0000000000 | 0.1000000000 |\n|  2 |    0 |   10 | 0.1111111111 | 0.2000000000 |\n|  3 |    1 |   10 | 0.2222222222 | 0.3000000000 |\n|  4 |    1 |   10 | 0.3333333333 | 0.4000000000 |\n|  5 |    2 |   20 | 0.4444444444 | 0.5000000000 |\n|  6 |    2 |   20 | 0.5555555556 | 0.6000000000 |\n|  7 |    2 |   20 | 0.6666666667 | 0.7000000000 |\n|  8 |    2 |   10 | 0.7777777778 | 0.8000000000 |\n|  9 |    4 |   20 | 0.8888888889 | 0.9000000000 |\n| 10 |    4 |   20 | 1.0000000000 | 1.0000000000 |\n+----+------+------+--------------+--------------+\n\nselect pk, a, b,\n        percent_rank() over (partition by a order by a) as pct_rank,\n        cume_dist() over (partition by a order by a) as cume_dist\nfrom t1;\n+----+------+------+--------------+--------------+\n| pk | a    | b    | pct_rank     | cume_dist    |\n+----+------+------+--------------+--------------+\n|  1 |    0 |   10 | 0.0000000000 | 1.0000000000 |\n|  2 |    0 |   10 | 0.0000000000 | 1.0000000000 |\n|  3 |    1 |   10 | 0.0000000000 | 1.0000000000 |\n|  4 |    1 |   10 | 0.0000000000 | 1.0000000000 |\n|  5 |    2 |   20 | 0.0000000000 | 1.0000000000 |\n|  6 |    2 |   20 | 0.0000000000 | 1.0000000000 |\n|  7 |    2 |   20 | 0.0000000000 | 1.0000000000 |\n|  8 |    2 |   10 | 0.0000000000 | 1.0000000000 |\n|  9 |    4 |   20 | 0.0000000000 | 1.0000000000 |\n| 10 |    4 |   20 | 0.0000000000 | 1.0000000000 |\n+----+------+------+--------------+--------------+\n"], "Category": ["Window Functions"]}
{"HTML": ["https://mariadb.com//kb/en/curdate/"], "Title": ["CURDATE"], "Feature": ["CURDATE()\nCURRENT_DATE\nCURRENT_DATE()\n"], "Description": ["CURDATE returns the current date as a value in 'YYYY-MM-DD' or YYYYMMDD\nformat, depending on whether the function is used in a string or\nnumeric context.", "CURRENT_DATE and CURRENT_DATE() are synonyms."], "Examples": ["SELECT CURDATE();\n+------------+\n| CURDATE()  |\n+------------+\n| 2019-03-05 |\n+------------+\n", "SELECT CURDATE() +0;\n+--------------+\n| CURDATE() +0 |\n+--------------+\n|     20190305 |\n+--------------+\n", "SELECT CURDATE() - INTERVAL 5 DAY;\n+----------------------------+\n| CURDATE() - INTERVAL 5 DAY |\n+----------------------------+\n| 2019-02-28                 |\n+----------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/current_date/"], "Title": ["CURRENT_DATE"], "Feature": ["CURRENT_DATE, CURRENT_DATE()\n"], "Description": ["CURRENT_DATE and CURRENT_DATE() are synonyms for CURDATE()."], "Examples": [], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/current_role/"], "Title": ["CURRENT_ROLE"], "Feature": ["CURRENT_ROLE, CURRENT_ROLE()\n"], "Description": ["Returns the current role name. This determines your access privileges. The return value is a string in the\nutf8 character set.", "If there is no current role, NULL is returned.", "The output of SELECT CURRENT_ROLE is equivalent to the contents of the ENABLED_ROLES Information Schema table.", "USER() returns the combination of user and host used to login. CURRENT_USER() returns the account used to determine current connection's privileges.", "Statements using the CURRENT_ROLE function are not safe for statement-based replication."], "Examples": ["SELECT CURRENT_ROLE;\n+--------------+\n| CURRENT_ROLE |\n+--------------+\n| NULL         |\n+--------------+\n\nSET ROLE staff;\n\nSELECT CURRENT_ROLE;\n+--------------+\n| CURRENT_ROLE |\n+--------------+\n| staff        |\n+--------------+\n"], "Category": ["Information Functions"]}
{"HTML": ["https://mariadb.com//kb/en/current_time/"], "Title": ["CURRENT_TIME"], "Feature": ["CURRENT_TIME\nCURRENT_TIME([precision])\n"], "Description": ["CURRENT_TIME and CURRENT_TIME() are synonyms for CURTIME()."], "Examples": [], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/current_timestamp/"], "Title": ["CURRENT_TIMESTAMP"], "Feature": ["CURRENT_TIMESTAMP\nCURRENT_TIMESTAMP([precision])\n"], "Description": ["CURRENT_TIMESTAMP and CURRENT_TIMESTAMP() are synonyms for NOW()."], "Examples": [], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/aes_decrypt/"], "Title": ["AES_DECRYPT"], "Feature": ["AES_DECRYPT(crypt_str,key_str)\n", "From MariaDB 11.2.0", "AES_ENCRYPT(crypt_str, key_str, [, iv [, mode]])\n"], "Description": ["This function allows decryption of data using the official AES (Advanced Encryption Standard) algorithm. For more information, see the description of AES_ENCRYPT().\n", "MariaDB starting with 11.2From MariaDB 11.2, the function supports an initialization vector, and control of the block encryption mode. The default mode is specified by the block_encryption_mode system variable, which can be changed when calling the function with a mode. mode is aes-{128,192,256}-{ecb,cbc,ctr} for example:  \"AES-128-cbc\".\nFor modes that require it, the initialization_vector iv should be 16 bytes (it can be longer, but the extra bytes are ignored). A shorter iv, where one is required, results in the function returning NULL. Calling RANDOM_BYTES(16) will generate a random series of bytes that can be used for the iv. \n"], "Examples": ["SELECT HEX(AES_ENCRYPT('foo', 'bar', '0123456789abcdef', 'aes-128-ctr')) AS x; \n+--------+\n| x      |\n+--------+\n| C57C4B |\n+--------+\n\n\nSELECT AES_DECRYPT(x'C57C4B', 'bar', '0123456789abcdef', 'aes-128-ctr'); \n+------------------------------------------------------------------+\n| AES_DECRYPT(x'C57C4B', 'bar', '0123456789abcdef', 'aes-128-ctr') |\n+------------------------------------------------------------------+\n| foo                                                              |\n+------------------------------------------------------------------+\n"], "Category": ["Encryption, Hashing and Compression Functions"]}
{"HTML": ["https://mariadb.com//kb/en/current_user/"], "Title": ["CURRENT_USER"], "Feature": ["CURRENT_USER, CURRENT_USER()\n"], "Description": ["Returns the user name and host name combination for the MariaDB account\nthat the server used to authenticate the current client. This account\ndetermines your access privileges. The return value is a string in the\nutf8 character set.", "The value of CURRENT_USER() can differ from the value of USER(). CURRENT_ROLE() returns the current active role.", "Statements using the CURRENT_USER function are not safe for statement-based replication."], "Examples": ["shell> mysql --user=\"anonymous\"\n\nselect user(),current_user();\n+---------------------+----------------+\n| user()              | current_user() |\n+---------------------+----------------+\n| anonymous@localhost | @localhost     |\n+---------------------+----------------+\n"], "Category": ["Information Functions"]}
{"HTML": ["https://mariadb.com//kb/en/curtime/"], "Title": ["CURTIME"], "Feature": ["CURTIME([precision])\n"], "Description": ["Returns the current time as a value in 'HH:MM:SS' or HHMMSS.uuuuuu format, depending on whether the function is used in a string or numeric context. The value is expressed in the current time zone.", "The optional precision determines the microsecond precision. See Microseconds in MariaDB."], "Examples": ["SELECT CURTIME();\n+-----------+\n| CURTIME() |\n+-----------+\n| 12:45:39  |\n+-----------+\n\nSELECT CURTIME() + 0;\n+---------------+\n| CURTIME() + 0 |\n+---------------+\n| 124545.000000 |\n+---------------+\n", "SELECT CURTIME(2);\n+-------------+\n| CURTIME(2)  |\n+-------------+\n| 09:49:08.09 |\n+-------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/database/"], "Title": ["DATABASE"], "Feature": ["DATABASE()\nSCHEMA()\n"], "Description": ["Returns the default (current) database name as a string in the utf8 character set. If there is no default database, DATABASE() returns NULL. Within a stored routine, the default database is the database that the routine is associated with, which is not necessarily the same as the database that is the default in the calling context.", "SCHEMA() is a synonym for DATABASE().", "To select a default database, the USE statement can be run. Another way to set the default database is specifying its name at mariadb command line client startup."], "Examples": ["SELECT DATABASE();\n+------------+\n| DATABASE() |\n+------------+\n| NULL       |\n+------------+\n\nUSE test;\nDatabase changed\n\nSELECT DATABASE();\n+------------+\n| DATABASE() |\n+------------+\n| test       |\n+------------+\n"], "Category": ["Information Functions"]}
{"HTML": ["https://mariadb.com//kb/en/date-function/"], "Title": ["DATE FUNCTION"], "Feature": ["DATE(expr)\n"], "Description": ["Extracts the date part of the date or datetime expression expr. Returns NULL and throws a warning when passed an invalid date."], "Examples": ["SELECT DATE('2013-07-18 12:21:32');\n+-----------------------------+\n| DATE('2013-07-18 12:21:32') |\n+-----------------------------+\n| 2013-07-18                  |\n+-----------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/datediff/"], "Title": ["DATEDIFF"], "Feature": ["DATEDIFF(expr1,expr2)\n"], "Description": ["DATEDIFF() returns (expr1 \u2013 expr2) expressed\nas a value in days from one date to the other. expr1 and expr2 are date\nor date-and-time expressions. Only the date parts of the values are used in the\ncalculation."], "Examples": ["SELECT DATEDIFF('2007-12-31 23:59:59','2007-12-30');\n+----------------------------------------------+\n| DATEDIFF('2007-12-31 23:59:59','2007-12-30') |\n+----------------------------------------------+\n|                                            1 |\n+----------------------------------------------+\n\nSELECT DATEDIFF('2010-11-30 23:59:59','2010-12-31');\n+----------------------------------------------+\n| DATEDIFF('2010-11-30 23:59:59','2010-12-31') |\n+----------------------------------------------+\n|                                          -31 |\n+----------------------------------------------+\n", "CREATE TABLE t1 (d DATETIME);\nINSERT INTO t1 VALUES\n    (\"2007-01-30 21:31:07\"),\n    (\"1983-10-15 06:42:51\"),\n    (\"2011-04-21 12:34:56\"),\n    (\"2011-10-30 06:31:41\"),\n    (\"2011-01-30 14:03:25\"),\n    (\"2004-10-07 11:19:34\");\n", "SELECT NOW();\n+---------------------+\n| NOW()               |\n+---------------------+\n| 2011-05-23 10:56:05 |\n+---------------------+\n\nSELECT d, DATEDIFF(NOW(),d) FROM t1;\n+---------------------+-------------------+\n| d                   | DATEDIFF(NOW(),d) |\n+---------------------+-------------------+\n| 2007-01-30 21:31:07 |              1574 |\n| 1983-10-15 06:42:51 |             10082 |\n| 2011-04-21 12:34:56 |                32 |\n| 2011-10-30 06:31:41 |              -160 |\n| 2011-01-30 14:03:25 |               113 |\n| 2004-10-07 11:19:34 |              2419 |\n+---------------------+-------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/date_add/"], "Title": ["DATE_ADD"], "Feature": ["DATE_ADD(date,INTERVAL expr unit)\n"], "Description": ["Performs date arithmetic. The date argument specifies the\nstarting date or datetime value. expr is an expression specifying the\ninterval value to be added to the starting date. expr is a\nstring; it may start with a \"-\" for negative intervals. unit is a\nkeyword indicating the units in which the expression should be interpreted. See Date and Time Units for a complete list of permitted units. ", "The result type of DATE_ADD() is determined as follows:", "if the first argument is of the type DATETIME, the function returns DATETIME\nif the first argument is DATE and the interval uses HOUR or smaller units, the function returns DATETIME\nif the first argument is DATE and the interval uses DAY or larger units, the function returns DATE\nsimilarly, if the first argument is TIME and the interval uses DAY or smaller units the function returns TIME, if the interval uses anything larger, the function returns DATETIME\nif the first argument isn't a temporal type, the function returns a string\n"], "Examples": ["SELECT '2008-12-31 23:59:59' + INTERVAL 1 SECOND;\n+-------------------------------------------+\n| '2008-12-31 23:59:59' + INTERVAL 1 SECOND |\n+-------------------------------------------+\n| 2009-01-01 00:00:00                       |\n+-------------------------------------------+\n", "SELECT INTERVAL 1 DAY + '2008-12-31';\n+-------------------------------+\n| INTERVAL 1 DAY + '2008-12-31' |\n+-------------------------------+\n| 2009-01-01                    |\n+-------------------------------+\n", "SELECT '2005-01-01' - INTERVAL 1 SECOND;\n+----------------------------------+\n| '2005-01-01' - INTERVAL 1 SECOND |\n+----------------------------------+\n| 2004-12-31 23:59:59              |\n+----------------------------------+\n", "SELECT DATE_ADD('2000-12-31 23:59:59', INTERVAL 1 SECOND);\n+----------------------------------------------------+\n| DATE_ADD('2000-12-31 23:59:59', INTERVAL 1 SECOND) |\n+----------------------------------------------------+\n| 2001-01-01 00:00:00                                |\n+----------------------------------------------------+\n", "SELECT DATE_ADD('2010-12-31 23:59:59', INTERVAL 1 DAY);\n+-------------------------------------------------+\n| DATE_ADD('2010-12-31 23:59:59', INTERVAL 1 DAY) |\n+-------------------------------------------------+\n| 2011-01-01 23:59:59                             |\n+-------------------------------------------------+\n", "SELECT DATE_ADD('2100-12-31 23:59:59', INTERVAL '1:1' MINUTE_SECOND);\n+---------------------------------------------------------------+\n| DATE_ADD('2100-12-31 23:59:59', INTERVAL '1:1' MINUTE_SECOND) |\n+---------------------------------------------------------------+\n| 2101-01-01 00:01:00                                           |\n+---------------------------------------------------------------+\n", "SELECT DATE_ADD('1900-01-01 00:00:00', INTERVAL '-1 10' DAY_HOUR);\n+------------------------------------------------------------+\n| DATE_ADD('1900-01-01 00:00:00', INTERVAL '-1 10' DAY_HOUR) |\n+------------------------------------------------------------+\n| 1899-12-30 14:00:00                                        |\n+------------------------------------------------------------+\n", "SELECT DATE_ADD('1992-12-31 23:59:59.000002', INTERVAL '1.999999' SECOND_MICROSECOND);\n+--------------------------------------------------------------------------------+\n| DATE_ADD('1992-12-31 23:59:59.000002', INTERVAL '1.999999' SECOND_MICROSECOND) |\n+--------------------------------------------------------------------------------+\n| 1993-01-01 00:00:01.000001                                                     |\n+--------------------------------------------------------------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/date_format/"], "Title": ["DATE_FORMAT"], "Feature": ["DATE_FORMAT(date, format[, locale])\n"], "Description": ["Formats the date value according to the format string. ", "The language used for the names is controlled by the value of the lc_time_names system variable. See server locale for more on the supported locales.", "The options that can be used by DATE_FORMAT(), as well as its inverse STR_TO_DATE() and the FROM_UNIXTIME() function, are:", "OptionDescription\n%aShort weekday name in current locale (Variable lc_time_names).\n%bShort form month name in current locale. For locale en_US this is one of: Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov or Dec.\n%cMonth with 1 or 2 digits.\n%DDay with English suffix 'th', 'nd', 'st' or 'rd''. (1st, 2nd, 3rd...).\n%dDay with 2 digits.\n%eDay with 1 or 2 digits.\n%fMicroseconds 6 digits.\n%HHour with 2 digits between 00-23.\n%hHour with 2 digits between 01-12.\n%IHour with 2 digits between 01-12.\n%iMinute with 2 digits.\n%jDay of the year (001-366)\n%kHour with 1 digits between 0-23.\n%lHour with 1 digits between 1-12.\n%MFull month name in current locale (Variable lc_time_names).\n%mMonth with 2 digits.\n%pAM/PM according to current locale (Variable lc_time_names).\n%rTime in 12 hour format, followed by AM/PM. Short for '%I:%i:%S %p'.\n%SSeconds with 2 digits.\n%sSeconds with 2 digits.\n%TTime in 24 hour format. Short for '%H:%i:%S'.\n%UWeek number (00-53), when first day of the week is Sunday.\n%uWeek number (00-53), when first day of the week is Monday.\n%VWeek number (01-53), when first day of the week is Sunday. Used with %X.\n%vWeek number (01-53), when first day of the week is Monday. Used with %x.\n%WFull weekday name in current locale (Variable lc_time_names).\n%wDay of the week. 0 = Sunday, 6 = Saturday.\n%XYear with 4 digits when first day of the week is Sunday. Used with %V.\n%xYear with 4 digits when first day of the week is Monday. Used with %v.\n%YYear with 4 digits.\n%yYear with 2 digits.\n%ZTimezone abbreviation. From MariaDB 11.3.0.\n%zNumeric timezone +hhmm or -hhmm presenting the hour and minute offset from UTC. From MariaDB 11.3.0.\n%#For str_to_date(), skip all numbers.\n%.For str_to_date(), skip all punctation characters.\n%@For str_to_date(), skip all alpha characters.\n%%A literal % character.\n\n", "To get a date in one of the standard formats, GET_FORMAT() can be used."], "Examples": ["SELECT DATE_FORMAT('2009-10-04 22:23:00', '%W %M %Y');\n+------------------------------------------------+\n| DATE_FORMAT('2009-10-04 22:23:00', '%W %M %Y') |\n+------------------------------------------------+\n| Sunday October 2009                            |\n+------------------------------------------------+\n\nSELECT DATE_FORMAT('2007-10-04 22:23:00', '%H:%i:%s');\n+------------------------------------------------+\n| DATE_FORMAT('2007-10-04 22:23:00', '%H:%i:%s') |\n+------------------------------------------------+\n| 22:23:00                                       |\n+------------------------------------------------+\n\nSELECT DATE_FORMAT('1900-10-04 22:23:00', '%D %y %a %d %m %b %j');\n+------------------------------------------------------------+\n| DATE_FORMAT('1900-10-04 22:23:00', '%D %y %a %d %m %b %j') |\n+------------------------------------------------------------+\n| 4th 00 Thu 04 10 Oct 277                                   |\n+------------------------------------------------------------+\n\nSELECT DATE_FORMAT('1997-10-04 22:23:00', '%H %k %I %r %T %S %w');\n+------------------------------------------------------------+\n| DATE_FORMAT('1997-10-04 22:23:00', '%H %k %I %r %T %S %w') |\n+------------------------------------------------------------+\n| 22 22 10 10:23:00 PM 22:23:00 00 6                         |\n+------------------------------------------------------------+\n\nSELECT DATE_FORMAT('1999-01-01', '%X %V');\n+------------------------------------+\n| DATE_FORMAT('1999-01-01', '%X %V') |\n+------------------------------------+\n| 1998 52                            |\n+------------------------------------+\n\nSELECT DATE_FORMAT('2006-06-00', '%d');\n+---------------------------------+\n| DATE_FORMAT('2006-06-00', '%d') |\n+---------------------------------+\n| 00                              |\n+---------------------------------+\n", "SELECT DATE_FORMAT('2006-01-01', '%W', 'el_GR');\n+------------------------------------------+\n| DATE_FORMAT('2006-01-01', '%W', 'el_GR') |\n+------------------------------------------+\n| \u039a\u03c5\u03c1\u03b9\u03b1\u03ba\u03ae                                  |\n+------------------------------------------+\n", "SELECT DATE_FORMAT(NOW(), '%W %d %M %Y %H:%i:%s %Z %z');\n+--------------------------------------------------+\n| DATE_FORMAT(NOW(), '%W %d %M %Y %H:%i:%s %Z %z') |\n+--------------------------------------------------+\n| Wednesday 20 September 2023 15:00:23 SAST +0200  |\n+--------------------------------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/date_sub/"], "Title": ["DATE_SUB"], "Feature": ["DATE_SUB(date,INTERVAL expr unit)\n"], "Description": ["Performs date arithmetic. The date argument specifies the\nstarting date or datetime value. expr is an expression specifying the\ninterval value to be subtracted from the starting date. expr is a\nstring; it may start with a \"-\" for negative intervals. unit is a\nkeyword indicating the units in which the expression should be interpreted. See Date and Time Units for a complete list of permitted units. ", "See also DATE_ADD()."], "Examples": ["SELECT DATE_SUB('1998-01-02', INTERVAL 31 DAY);\n+-----------------------------------------+\n| DATE_SUB('1998-01-02', INTERVAL 31 DAY) |\n+-----------------------------------------+\n| 1997-12-02                              |\n+-----------------------------------------+\n", "SELECT DATE_SUB('2005-01-01 00:00:00', INTERVAL '1 1:1:1' DAY_SECOND);\n+----------------------------------------------------------------+\n| DATE_SUB('2005-01-01 00:00:00', INTERVAL '1 1:1:1' DAY_SECOND) |\n+----------------------------------------------------------------+\n| 2004-12-30 22:58:59                                            |\n+----------------------------------------------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/day/"], "Title": ["DAY"], "Feature": ["DAY(date)\n"], "Description": ["DAY() is a synonym for DAYOFMONTH()."], "Examples": [], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/dayname/"], "Title": ["DAYNAME"], "Feature": ["DAYNAME(date)\n"], "Description": ["Returns the name of the weekday for date. The language used for the name is controlled by the value\nof the lc_time_names system variable. See server locale for more on the supported locales."], "Examples": ["SELECT DAYNAME('2007-02-03');\n+-----------------------+\n| DAYNAME('2007-02-03') |\n+-----------------------+\n| Saturday              |\n+-----------------------+\n", "CREATE TABLE t1 (d DATETIME);\nINSERT INTO t1 VALUES\n    (\"2007-01-30 21:31:07\"),\n    (\"1983-10-15 06:42:51\"),\n    (\"2011-04-21 12:34:56\"),\n    (\"2011-10-30 06:31:41\"),\n    (\"2011-01-30 14:03:25\"),\n    (\"2004-10-07 11:19:34\");\n", "SELECT d, DAYNAME(d) FROM t1;\n+---------------------+------------+\n| d                   | DAYNAME(d) |\n+---------------------+------------+\n| 2007-01-30 21:31:07 | Tuesday    |\n| 1983-10-15 06:42:51 | Saturday   |\n| 2011-04-21 12:34:56 | Thursday   |\n| 2011-10-30 06:31:41 | Sunday     |\n| 2011-01-30 14:03:25 | Sunday     |\n| 2004-10-07 11:19:34 | Thursday   |\n+---------------------+------------+\n", "SET lc_time_names = 'fr_CA';\n\nSELECT DAYNAME('2013-04-01');\n+-----------------------+\n| DAYNAME('2013-04-01') |\n+-----------------------+\n| lundi                 |\n+-----------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/aes_encrypt/"], "Title": ["AES_ENCRYPT"], "Feature": ["AES_ENCRYPT(str,key_str)\n", "From MariaDB 11.2.0", "AES_ENCRYPT(str, key, [, iv [, mode]])\n"], "Description": ["AES_ENCRYPT() and AES_DECRYPT() allow encryption and decryption of\ndata using the official AES (Advanced Encryption Standard) algorithm, previously known as \"Rijndael.\" Encoding with a 128-bit key length is used (from MariaDB 11.2.0, this is the default, and can be changed). 128 bits is much faster and is secure enough for most purposes.", "AES_ENCRYPT() encrypts a string str using the key key_str, and returns a binary string.", "AES_DECRYPT() decrypts the encrypted string and returns the original\nstring.", "The input arguments may be any length. If either argument is NULL, the result of this function is also NULL.", "Because AES is a block-level algorithm, padding is used to encode uneven length strings and so the result string length may be calculated using this formula:", "16 x (trunc(string_length / 16) + 1)\n", "If AES_DECRYPT() detects invalid data or incorrect padding, it returns NULL. However, it is possible for AES_DECRYPT() to return a non-NULL value (possibly garbage) if the input data or the key is invalid.", "MariaDB starting with 11.2From MariaDB 11.2, the function supports an initialization vector, and control of the block encryption mode. The default mode is specified by the block_encryption_mode system variable, which can be changed when calling the function with a mode. mode is aes-{128,192,256}-{ecb,cbc,ctr} for example:  \"AES-128-cbc\".\nAES_ENCRYPT(str, key) can no longer be used in persistent virtual columns (and the like).\n"], "Examples": ["INSERT INTO t VALUES (AES_ENCRYPT('text',SHA2('password',512)));\n", "SELECT HEX(AES_ENCRYPT('foo', 'bar', '0123456789abcdef', 'aes-256-cbc')) AS x;\n+----------------------------------+\n| x                                |\n+----------------------------------+\n| 42A3EB91E6DFC40A900D278F99E0726E |\n+----------------------------------+\n"], "Category": ["Encryption, Hashing and Compression Functions"]}
{"HTML": ["https://mariadb.com//kb/en/dayofmonth/"], "Title": ["DAYOFMONTH"], "Feature": ["DAYOFMONTH(date)\n"], "Description": ["Returns the day of the month for date, in the range 1 to 31, or 0\nfor dates such as '0000-00-00' or '2008-00-00' which have a zero day\npart.", "DAY() is a synonym."], "Examples": ["SELECT DAYOFMONTH('2007-02-03');\n+--------------------------+\n| DAYOFMONTH('2007-02-03') |\n+--------------------------+\n|                        3 |\n+--------------------------+\n", "CREATE TABLE t1 (d DATETIME);\nINSERT INTO t1 VALUES\n    (\"2007-01-30 21:31:07\"),\n    (\"1983-10-15 06:42:51\"),\n    (\"2011-04-21 12:34:56\"),\n    (\"2011-10-30 06:31:41\"),\n    (\"2011-01-30 14:03:25\"),\n    (\"2004-10-07 11:19:34\");\n", "SELECT d FROM t1 where DAYOFMONTH(d) = 30;\n+---------------------+\n| d                   |\n+---------------------+\n| 2007-01-30 21:31:07 |\n| 2011-10-30 06:31:41 |\n| 2011-01-30 14:03:25 |\n+---------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/dayofweek/"], "Title": ["DAYOFWEEK"], "Feature": ["DAYOFWEEK(date)\n"], "Description": ["Returns the day of the week index for the date (1 = Sunday, 2 = Monday, ..., 7 =\nSaturday). These index values correspond to the ODBC standard.", "This contrasts with WEEKDAY() which follows a different index numbering\n(0 = Monday, 1 = Tuesday, ... 6 = Sunday)."], "Examples": ["SELECT DAYOFWEEK('2007-02-03');\n+-------------------------+\n| DAYOFWEEK('2007-02-03') |\n+-------------------------+\n|                       7 |\n+-------------------------+\n", "CREATE TABLE t1 (d DATETIME);\nINSERT INTO t1 VALUES\n    (\"2007-01-30 21:31:07\"),\n    (\"1983-10-15 06:42:51\"),\n    (\"2011-04-21 12:34:56\"),\n    (\"2011-10-30 06:31:41\"),\n    (\"2011-01-30 14:03:25\"),\n    (\"2004-10-07 11:19:34\");\n", "SELECT d, DAYNAME(d), DAYOFWEEK(d), WEEKDAY(d) from t1;\n+---------------------+------------+--------------+------------+\n| d                   | DAYNAME(d) | DAYOFWEEK(d) | WEEKDAY(d) |\n+---------------------+------------+--------------+------------+\n| 2007-01-30 21:31:07 | Tuesday    |            3 |          1 |\n| 1983-10-15 06:42:51 | Saturday   |            7 |          5 |\n| 2011-04-21 12:34:56 | Thursday   |            5 |          3 |\n| 2011-10-30 06:31:41 | Sunday     |            1 |          6 |\n| 2011-01-30 14:03:25 | Sunday     |            1 |          6 |\n| 2004-10-07 11:19:34 | Thursday   |            5 |          3 |\n+---------------------+------------+--------------+------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/dayofyear/"], "Title": ["DAYOFYEAR"], "Feature": ["DAYOFYEAR(date)\n"], "Description": ["Returns the day of the year for date, in the range 1 to 366."], "Examples": ["SELECT DAYOFYEAR('2018-02-16');\n+-------------------------+\n| DAYOFYEAR('2018-02-16') |\n+-------------------------+\n|                      47 |\n+-------------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/decode/"], "Title": ["DECODE"], "Feature": ["DECODE(crypt_str,pass_str)\n", "In Oracle mode from MariaDB 10.3.2:", "DECODE(expr, search_expr, result_expr [, search_expr2, result_expr2 ...] [default_expr])\n", "In all modes from MariaDB 10.3.2:", "DECODE_ORACLE(expr, search_expr, result_expr [, search_expr2, result_expr2 ...] [default_expr])\n"], "Description": ["In the default mode, DECODE decrypts the encrypted string crypt_str using pass_str as the\npassword. crypt_str should be a string returned from ENCODE(). The resulting string will be the original string only if pass_str is the same.", "In Oracle mode from MariaDB 10.3.2, DECODE compares expr to the search expressions, in order. If it finds a match, the corresponding result expression is returned. If no matches are found, the default expression is returned, or NULL if no default is provided.", "NULLs are treated as equivalent.", "DECODE_ORACLE is a synonym for the Oracle-mode version of the function, and is available in all modes."], "Examples": ["SELECT DECODE_ORACLE(2+1,3*1,'found1',3*2,'found2','default');\n+--------------------------------------------------------+\n| DECODE_ORACLE(2+1,3*1,'found1',3*2,'found2','default') |\n+--------------------------------------------------------+\n| found1                                                 |\n+--------------------------------------------------------+\n\nSELECT DECODE_ORACLE(2+4,3*1,'found1',3*2,'found2','default');\n+--------------------------------------------------------+\n| DECODE_ORACLE(2+4,3*1,'found1',3*2,'found2','default') |\n+--------------------------------------------------------+\n| found2                                                 |\n+--------------------------------------------------------+\n\nSELECT DECODE_ORACLE(2+2,3*1,'found1',3*2,'found2','default');\n+--------------------------------------------------------+\n| DECODE_ORACLE(2+2,3*1,'found1',3*2,'found2','default') |\n+--------------------------------------------------------+\n| default                                                |\n+--------------------------------------------------------+\n", "SELECT DECODE_ORACLE(NULL,NULL,'Nulls are equivalent','Nulls are not equivalent');\n+----------------------------------------------------------------------------+\n| DECODE_ORACLE(NULL,NULL,'Nulls are equivalent','Nulls are not equivalent') |\n+----------------------------------------------------------------------------+\n| Nulls are equivalent                                                       |\n+----------------------------------------------------------------------------+\n"], "Category": ["Encryption, Hashing and Compression Functions"]}
{"HTML": ["https://mariadb.com//kb/en/decode_histogram/"], "Title": ["DECODE_HISTOGRAM"], "Feature": ["DECODE_HISTOGRAM(hist_type,histogram)\n"], "Description": ["Returns a string of comma separated numeric values corresponding to a probability distribution represented by the histogram of type hist_type (SINGLE_PREC_HB or DOUBLE_PREC_HB). The hist_type and histogram would be commonly used from the mysql.column_stats table.", "See Histogram Based Statistics for details."], "Examples": [], "Category": ["Information Functions"]}
{"HTML": ["https://mariadb.com//kb/en/default/"], "Title": ["DEFAULT"], "Feature": ["DEFAULT(col_name)\n"], "Description": ["Returns the default value for a table column. If the column has no default value (and is not NULLABLE - NULLABLE fields have a NULL default), an error is returned.", "For integer columns using AUTO_INCREMENT, 0 is returned.", "When using DEFAULT as a value to set in an INSERT or UPDATE\nstatement, you can use the bare keyword DEFAULT without the parentheses and argument to\nrefer to the column in context. You can only use DEFAULT as a bare keyword if you are using it\nalone without a surrounding expression or function."], "Examples": ["SELECT i FROM t WHERE i != DEFAULT(i);\n", "UPDATE t SET i = DEFAULT(i)+1 WHERE i < 100;\n", "INSERT INTO t (i) VALUES (DEFAULT);\nUPDATE t SET i = DEFAULT WHERE i < 100;\n", "CREATE OR REPLACE TABLE t (\n  i INT NOT NULL AUTO_INCREMENT, \n  j INT NOT NULL, \n  k INT DEFAULT 3, \n  l INT NOT NULL DEFAULT 4, \n  m INT, \n  PRIMARY KEY (i)\n);\n\nDESC t;\n+-------+---------+------+-----+---------+----------------+\n| Field | Type    | Null | Key | Default | Extra          |\n+-------+---------+------+-----+---------+----------------+\n| i     | int(11) | NO   | PRI | NULL    | auto_increment |\n| j     | int(11) | NO   |     | NULL    |                |\n| k     | int(11) | YES  |     | 3       |                |\n| l     | int(11) | NO   |     | 4       |                |\n| m     | int(11) | YES  |     | NULL    |                |\n+-------+---------+------+-----+---------+----------------+\n\nINSERT INTO t (j) VALUES (1);\nINSERT INTO t (j,m) VALUES (2,2);\nINSERT INTO t (j,l,m) VALUES (3,3,3);\n\nSELECT * FROM t;\n+---+---+------+---+------+\n| i | j | k    | l | m    |\n+---+---+------+---+------+\n| 1 | 1 |    3 | 4 | NULL |\n| 2 | 2 |    3 | 4 |    2 |\n| 3 | 3 |    3 | 3 |    3 |\n+---+---+------+---+------+\n\nSELECT DEFAULT(i), DEFAULT(k), DEFAULT (l), DEFAULT(m) FROM t;\n+------------+------------+-------------+------------+\n| DEFAULT(i) | DEFAULT(k) | DEFAULT (l) | DEFAULT(m) |\n+------------+------------+-------------+------------+\n|          0 |          3 |           4 |       NULL |\n|          0 |          3 |           4 |       NULL |\n|          0 |          3 |           4 |       NULL |\n+------------+------------+-------------+------------+\n\nSELECT DEFAULT(i), DEFAULT(k), DEFAULT (l), DEFAULT(m), DEFAULT(j)  FROM t;\nERROR 1364 (HY000): Field 'j' doesn't have a default value\n\nSELECT * FROM t WHERE i = DEFAULT(i);\nEmpty set (0.001 sec)\n\nSELECT * FROM t WHERE j = DEFAULT(j);\nERROR 1364 (HY000): Field 'j' doesn't have a default value\n\nSELECT * FROM t WHERE k = DEFAULT(k);\n+---+---+------+---+------+\n| i | j | k    | l | m    |\n+---+---+------+---+------+\n| 1 | 1 |    3 | 4 | NULL |\n| 2 | 2 |    3 | 4 |    2 |\n| 3 | 3 |    3 | 3 |    3 |\n+---+---+------+---+------+\n\nSELECT * FROM t WHERE l = DEFAULT(l);\n+---+---+------+---+------+\n| i | j | k    | l | m    |\n+---+---+------+---+------+\n| 1 | 1 |    3 | 4 | NULL |\n| 2 | 2 |    3 | 4 |    2 |\n+---+---+------+---+------+\n\nSELECT * FROM t WHERE m = DEFAULT(m);\nEmpty set (0.001 sec)\n\nSELECT * FROM t WHERE m <=> DEFAULT(m);\n+---+---+------+---+------+\n| i | j | k    | l | m    |\n+---+---+------+---+------+\n| 1 | 1 |    3 | 4 | NULL |\n+---+---+------+---+------+\n"], "Category": ["Information Functions"]}
{"HTML": ["https://mariadb.com//kb/en/degrees/"], "Title": ["DEGREES"], "Feature": ["DEGREES(X)\n"], "Description": ["Returns the argument X, converted from radians to degrees.", "This is the converse of the RADIANS() function."], "Examples": ["SELECT DEGREES(PI());\n+---------------+\n| DEGREES(PI()) |\n+---------------+\n|           180 |\n+---------------+\n\nSELECT DEGREES(PI() / 2);\n+-------------------+\n| DEGREES(PI() / 2) |\n+-------------------+\n|                90 |\n+-------------------+\n\nSELECT DEGREES(45);\n+-----------------+\n| DEGREES(45)     |\n+-----------------+\n| 2578.3100780887 |\n+-----------------+\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://mariadb.com//kb/en/dense_rank/"], "Title": ["DENSE_RANK"], "Feature": ["DENSE_RANK() OVER (\n  [ PARTITION BY partition_expression ]\n  [ ORDER BY order_list ]\n) \n"], "Description": ["DENSE_RANK() is a window function that displays the number of a given row, starting at one and following the ORDER BY sequence of the window function, with identical values receiving the same result. Unlike the  RANK() function, there are no skipped values if the preceding results are identical. It is also similar to the ROW_NUMBER() function except that in that function, identical values will receive a different row number for each result."], "Examples": ["CREATE TABLE student(course VARCHAR(10), mark int, name varchar(10));\n\nINSERT INTO student VALUES \n  ('Maths', 60, 'Thulile'),\n  ('Maths', 60, 'Pritha'),\n  ('Maths', 70, 'Voitto'),\n  ('Maths', 55, 'Chun'),\n  ('Biology', 60, 'Bilal'),\n   ('Biology', 70, 'Roger');\n\nSELECT \n  RANK() OVER (PARTITION BY course ORDER BY mark DESC) AS rank, \n  DENSE_RANK() OVER (PARTITION BY course ORDER BY mark DESC) AS dense_rank, \n  ROW_NUMBER() OVER (PARTITION BY course ORDER BY mark DESC) AS row_num, \n  course, mark, name \nFROM student ORDER BY course, mark DESC;\n+------+------------+---------+---------+------+---------+\n| rank | dense_rank | row_num | course  | mark | name    |\n+------+------------+---------+---------+------+---------+\n|    1 |          1 |       1 | Biology |   70 | Roger   |\n|    2 |          2 |       2 | Biology |   60 | Bilal   |\n|    1 |          1 |       1 | Maths   |   70 | Voitto  |\n|    2 |          2 |       2 | Maths   |   60 | Thulile |\n|    2 |          2 |       3 | Maths   |   60 | Pritha  |\n|    4 |          3 |       4 | Maths   |   55 | Chun    |\n+------+------------+---------+---------+------+---------+\n"], "Category": ["Window Functions"]}
{"HTML": ["https://mariadb.com//kb/en/des_decrypt/"], "Title": ["DES_DECRYPT"], "Feature": ["DES_DECRYPT(crypt_str[,key_str])\n"], "Description": ["Decrypts a string encrypted with DES_ENCRYPT(). If an error occurs,\nthis function returns NULL.", "This function works only if MariaDB has been configured with TLS\nsupport.", "If no key_str argument is given, DES_DECRYPT() examines the first byte\nof the encrypted string to determine the DES key number that was used\nto encrypt the original string, and then reads the key from the DES\nkey file to decrypt the message. For this to work, the user must have\nthe SUPER privilege. The key file can be specified with the\n--des-key-file server option.", "If you pass this function a key_str argument, that string is used as\nthe key for decrypting the message.", "If the crypt_str argument does not appear to be an encrypted string,\nMariaDB returns the given crypt_str."], "Examples": [], "Category": ["Encryption, Hashing and Compression Functions"]}
{"HTML": ["https://mariadb.com//kb/en/des_encrypt/"], "Title": ["DES_ENCRYPT"], "Feature": ["DES_ENCRYPT(str[,{key_num|key_str}])\n"], "Description": ["Encrypts the string with the given key using the Triple-DES algorithm.", "This function works only if MariaDB has been configured with TLS support.", "The encryption key to use is chosen based on the second argument to\nDES_ENCRYPT(), if one was given. With no argument, the first key from\nthe DES key file is used. With a key_num argument, the given key \nnumber (0-9) from the DES key file is used. With a key_str argument,\nthe given key string is used to encrypt str. ", "The key file can be specified with the --des-key-file server option.", "The return string is a binary string where the first character is \nCHAR(128 | key_num). If an error occurs, DES_ENCRYPT() returns NULL.", "The 128 is added to make it easier to recognize an encrypted key. If\nyou use a string key, key_num is 127.", "The string length for the result is given by this formula:", "new_len = orig_len + (8 - (orig_len % 8)) + 1\n", "Each line in the DES key file has the following format:", "key_num des_key_str\n", "Each key_num value must be a number in the range from 0 to 9. Lines in\nthe file may be in any order. des_key_str is the string that is used\nto encrypt the message. There should be at least one space between the\nnumber and the key. The first key is the default key that is used if\nyou do not specify any key argument to DES_ENCRYPT().", "You can tell MariaDB to read new key values from the key file with the\nFLUSH DES_KEY_FILE statement. This requires the RELOAD privilege.", "One benefit of having a set of default keys is that it gives\napplications a way to check for the existence of encrypted column\nvalues, without giving the end user the right to decrypt those values."], "Examples": ["SELECT customer_address FROM customer_table \n   WHERE crypted_credit_card = DES_ENCRYPT('credit_card_number');\n"], "Category": ["Encryption, Hashing and Compression Functions"]}
{"HTML": ["https://mariadb.com//kb/en/ascii/"], "Title": ["ASCII"], "Feature": ["ASCII(str)\n"], "Description": ["Returns the numeric ASCII value of the leftmost character of the string argument.  Returns 0 if the given string is empty and NULL if it is NULL.", "ASCII() works for 8-bit characters."], "Examples": ["SELECT ASCII(9);\n+----------+\n| ASCII(9) |\n+----------+\n|       57 |\n+----------+\n\nSELECT ASCII('9');\n+------------+\n| ASCII('9') |\n+------------+\n|         57 |\n+------------+\n\nSELECT ASCII('abc');\n+--------------+\n| ASCII('abc') |\n+--------------+\n|           97 |\n+--------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/disjoint/"], "Title": ["DISJOINT"], "Feature": ["Disjoint(g1,g2)\n"], "Description": ["Returns 1 or 0 to indicate whether g1 is spatially disjoint from\n(does not intersect) g2.", "DISJOINT() tests the opposite relationship to INTERSECTS().", "DISJOINT() is based on the original MySQL implementation and uses object bounding rectangles, while ST_DISJOINT() uses object shapes."], "Examples": [], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/elt/"], "Title": ["ELT"], "Feature": ["ELT(N, str1[, str2, str3,...])\n"], "Description": ["Takes a numeric argument and a series of string arguments. Returns the string that corresponds to the given numeric position.  For instance, it returns str1 if N is 1, str2 if N is 2, and so on.  If the numeric argument is a FLOAT, MariaDB rounds it to the nearest INTEGER.  If the numeric argument is less than 1, greater than the total number of arguments, or not a number, ELT() returns NULL.  It must have at least two arguments.", "It is complementary to the FIELD() function."], "Examples": ["SELECT ELT(1, 'ej', 'Heja', 'hej', 'foo');\n+------------------------------------+\n| ELT(1, 'ej', 'Heja', 'hej', 'foo') |\n+------------------------------------+\n| ej                                 |\n+------------------------------------+\n\nSELECT ELT(4, 'ej', 'Heja', 'hej', 'foo');\n+------------------------------------+\n| ELT(4, 'ej', 'Heja', 'hej', 'foo') |\n+------------------------------------+\n| foo                                |\n+------------------------------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/encode/"], "Title": ["ENCODE"], "Feature": ["ENCODE(str,pass_str)\n"], "Description": ["ENCODE is not considered cryptographically secure, and should not be used for password encryption.\n", "Encrypt str using pass_str as the password. To decrypt the result, use\nDECODE().", "The result is a binary string of the same length as str.", "The strength of the encryption is based on how good the random generator is. ", "It is not recommended to rely on the encryption performed by the ENCODE function. Using a salt value (changed when a password is updated) will improve matters somewhat, but for storing passwords, consider a more cryptographically secure function, such as SHA2()."], "Examples": ["ENCODE('not so secret text', CONCAT('random_salt','password'))\n"], "Category": ["Encryption, Hashing and Compression Functions"]}
{"HTML": ["https://mariadb.com//kb/en/encrypt/"], "Title": ["ENCRYPT"], "Feature": ["ENCRYPT(str[,salt])\n"], "Description": ["Encrypts a string using the Unix crypt() system call, returning an encrypted binary string. The salt argument should be a string with at least two characters or the returned result will be NULL. If no salt argument is given, a random value of sufficient length is used.", "It is not recommended to use ENCRYPT() with utf16, utf32 or ucs2 multi-byte character sets because the crypt() system call expects a string terminated with a zero byte.", "Note that the underlying crypt() system call may have some limitations, such as ignoring all but the first eight characters.", "If the have_crypt system variable is set to NO (because the crypt() system call is not available), the ENCRYPT function will always return NULL."], "Examples": ["SELECT ENCRYPT('encrypt me');\n+-----------------------+\n| ENCRYPT('encrypt me') |\n+-----------------------+\n| 4I5BsEx0lqTDk         |\n+-----------------------+\n"], "Category": ["Encryption, Hashing and Compression Functions"]}
{"HTML": ["https://mariadb.com//kb/en/equals/"], "Title": ["EQUALS"], "Feature": ["Equals(g1,g2)\n", "From MariaDB 10.2.3:", "MBREQUALS(g1,g2)\n"], "Description": ["Returns 1 or 0 to indicate whether g1 is spatially equal to g2.", "EQUALS() is based on the original MySQL implementation and uses object bounding rectangles, while ST_EQUALS() uses object shapes.", "From MariaDB 10.2.3, MBREQUALS is a synonym for Equals."], "Examples": [], "Category": ["Geographic Functions"]}
{"HTML": ["https://mariadb.com//kb/en/exp/"], "Title": ["EXP"], "Feature": ["EXP(X)\n"], "Description": ["Returns the value of e (the base of natural logarithms) raised to the\npower of X. The inverse of this function is LOG() (using a single\nargument only) or LN().", "If X is NULL, this function returns NULL."], "Examples": ["SELECT EXP(2);\n+------------------+\n| EXP(2)           |\n+------------------+\n| 7.38905609893065 |\n+------------------+\n\nSELECT EXP(-2);\n+--------------------+\n| EXP(-2)            |\n+--------------------+\n| 0.1353352832366127 |\n+--------------------+\n\nSELECT EXP(0);\n+--------+\n| EXP(0) |\n+--------+\n|      1 |\n+--------+\n\nSELECT EXP(NULL);\n+-----------+\n| EXP(NULL) |\n+-----------+\n|      NULL |\n+-----------+\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://mariadb.com//kb/en/export_set/"], "Title": ["EXPORT_SET"], "Feature": ["EXPORT_SET(bits, on, off[, separator[, number_of_bits]])\n"], "Description": ["Takes a minimum of three arguments.  Returns a string where each bit in the given bits argument is returned, with the string values given for on and off.  ", "Bits are examined from right to left, (from low-order to high-order bits).  Strings are added to the result from left to right, separated by a separator string (defaults as ',').  You can optionally limit the number of bits the EXPORT_SET() function examines using the number_of_bits option.  ", "If any of the arguments are set as NULL, the function returns NULL."], "Examples": ["SELECT EXPORT_SET(5,'Y','N',',',4);\n+-----------------------------+\n| EXPORT_SET(5,'Y','N',',',4) |\n+-----------------------------+\n| Y,N,Y,N                     |\n+-----------------------------+\n\nSELECT EXPORT_SET(6,'1','0',',',10);\n+------------------------------+\n| EXPORT_SET(6,'1','0',',',10) |\n+------------------------------+\n| 0,1,1,0,0,0,0,0,0,0          |\n+------------------------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/extract/"], "Title": ["EXTRACT"], "Feature": ["EXTRACT(unit FROM date)\n"], "Description": ["The EXTRACT() function extracts the required unit from the date. See Date and Time Units for a complete list of permitted units.", "In MariaDB 10.0.7 and MariaDB 5.5.35, EXTRACT (HOUR FROM ...) was changed to return a value from 0 to 23, adhering to the SQL standard. Until MariaDB 10.0.6 and MariaDB 5.5.34, and in all versions of MySQL at least as of MySQL 5.7, it could return a value > 23. HOUR() is not a standard function, so continues to adhere to the old behaviour inherited from MySQL."], "Examples": ["SELECT EXTRACT(YEAR FROM '2009-07-02');\n+---------------------------------+\n| EXTRACT(YEAR FROM '2009-07-02') |\n+---------------------------------+\n|                            2009 |\n+---------------------------------+\n\nSELECT EXTRACT(YEAR_MONTH FROM '2009-07-02 01:02:03');\n+------------------------------------------------+\n| EXTRACT(YEAR_MONTH FROM '2009-07-02 01:02:03') |\n+------------------------------------------------+\n|                                         200907 |\n+------------------------------------------------+\n\nSELECT EXTRACT(DAY_MINUTE FROM '2009-07-02 01:02:03');\n+------------------------------------------------+\n| EXTRACT(DAY_MINUTE FROM '2009-07-02 01:02:03') |\n+------------------------------------------------+\n|                                          20102 |\n+------------------------------------------------+\n\nSELECT EXTRACT(MICROSECOND FROM '2003-01-02 10:30:00.000123');\n+--------------------------------------------------------+\n| EXTRACT(MICROSECOND FROM '2003-01-02 10:30:00.000123') |\n+--------------------------------------------------------+\n|                                                    123 |\n+--------------------------------------------------------+\n", "SELECT EXTRACT(HOUR FROM '26:30:00'), HOUR('26:30:00');\n+-------------------------------+------------------+\n| EXTRACT(HOUR FROM '26:30:00') | HOUR('26:30:00') |\n+-------------------------------+------------------+\n|                             2 |               26 |\n+-------------------------------+------------------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/extractvalue/"], "Title": ["EXTRACTVALUE"], "Feature": ["EXTRACTVALUE(xml_frag, xpath_expr)\n"], "Description": ["The EXTRACTVALUE() function takes two string arguments: a fragment of XML markup and an XPath expression, (also known as a locator).  It returns the text (That is, CDDATA), of the first text node which is a child of the element or elements matching the XPath expression.  ", "In cases where a valid XPath expression does not match any text nodes in a valid XML fragment, (including the implicit /text() expression), the EXTRACTVALUE() function returns an empty string.", "Invalid Arguments", "When either the XML fragment or the XPath expression is NULL, the EXTRACTVALUE() function returns NULL.  When the XML fragment is invalid, it raises a warning Code 1525:", "Warning (Code 1525): Incorrect XML value: 'parse error at line 1 pos 11: unexpected END-OF-INPUT'\n", "When the XPath value is invalid, it generates an Error 1105:", "ERROR 1105 (HY000): XPATH syntax error: ')'\n", "Explicit text() Expressions", "This function is the equivalent of performing a match using the XPath expression after appending /text().  In other words:", "SELECT\n   EXTRACTVALUE('<cases><case>example</case></cases>', '/cases/case') \n    AS 'Base Example',\n   EXTRACTVALUE('<cases><case>example</case></cases>', '/cases/case/text()') \n    AS 'text() Example';\n+--------------+----------------+\n| Base Example | text() Example |\n+--------------+----------------+\n| example      | example        |\n+--------------+----------------+\n", "Count Matches", "When EXTRACTVALUE() returns multiple matches, it returns the content of the first child text node of each matching element, in the matched order, as a single, space-delimited string.", "By design, the EXTRACTVALUE() function makes no distinction between a match on an empty element and no match at all.  If you need to determine whether no matching element was found in the XML fragment or if an element was found that contained no child text nodes, use the XPath count() function.  ", "For instance, when looking for a value that exists, but contains no child text nodes, you would get a count of the number of matching instances:", "SELECT\n   EXTRACTVALUE('<cases><case/></cases>', '/cases/case') \n    AS 'Empty Example',\n   EXTRACTVALUE('<cases><case/></cases>', 'count(/cases/case)') \n    AS 'count() Example';\n+---------------+-----------------+\n| Empty Example | count() Example |\n+---------------+-----------------+\n|               |               1 |\n+---------------+-----------------+\n", "Alternatively, when looking for a value that doesn't exist, count() returns 0.", "SELECT\n   EXTRACTVALUE('<cases><case/></cases>', '/cases/person') \n    AS 'No Match Example',\n   EXTRACTVALUE('<cases><case/></cases>', 'count(/cases/person)') \n    AS 'count() Example';\n+------------------+-----------------+\n| No Match Example | count() Example |\n+------------------+-----------------+\n|                  |                0|\n+------------------+-----------------+\n", "Matches", "Important: The EXTRACTVALUE() function only returns CDDATA.  It does not return tags that the element might contain or the text that these child elements contain.", "SELECT \n  EXTRACTVALUE('<cases><case>Person<email>x@example.com</email></case></cases>', '/cases')\n   AS Case;\n+--------+\n| Case   |\n+--------+\n| Person |\n+--------+\n", "Note, in the above example, while the XPath expression matches to the parent <case> instance, it does not return the contained <email> tag or its content."], "Examples": ["SELECT\n    ExtractValue('<a>ccc<b>ddd</b></a>', '/a')            AS val1,\n    ExtractValue('<a>ccc<b>ddd</b></a>', '/a/b')          AS val2,\n    ExtractValue('<a>ccc<b>ddd</b></a>', '//b')           AS val3,\n    ExtractValue('<a>ccc<b>ddd</b></a>', '/b')            AS val4,\n    ExtractValue('<a>ccc<b>ddd</b><b>eee</b></a>', '//b') AS val5;\n+------+------+------+------+---------+\n| val1 | val2 | val3 | val4 | val5    |\n+------+------+------+------+---------+\n| ccc  | ddd  | ddd  |      | ddd eee |\n+------+------+------+------+---------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/extract_schema_from_file_name/"], "Title": ["extract_schema_from_file_name"], "Feature": ["sys.extract_schema_from_file_name(path)\n"], "Description": ["extract_schema_from_file_name is a stored function available with the Sys Schema.", "Given a file path, it returns the schema (database) name. The file name is assumed to be within the schema directory, and therefore the function will not return the expected result with partitions, or when tables are defined using the DATA_DIRECTORY table option.", "The function does not examine anything on disk. The return value, a VARCHAR(64), is determined solely from the provided path."], "Examples": ["SELECT sys.extract_schema_from_file_name('/usr/local/mysql/data/db/t1.ibd');\n+----------------------------------------------------------------------+\n| sys.extract_schema_from_file_name('/usr/local/mysql/data/db/t1.ibd') |\n+----------------------------------------------------------------------+\n| db                                                                   |\n+----------------------------------------------------------------------+\n"], "Category": ["No Category"]}
{"HTML": ["https://mariadb.com//kb/en/asin/"], "Title": ["ASIN"], "Feature": ["ASIN(X)\n"], "Description": ["Returns the arc sine of X, that is, the value whose sine is X. Returns\nNULL if X is not in the range -1 to 1."], "Examples": ["SELECT ASIN(0.2);\n+--------------------+\n| ASIN(0.2)          |\n+--------------------+\n| 0.2013579207903308 |\n+--------------------+\n\nSELECT ASIN('foo');\n+-------------+\n| ASIN('foo') |\n+-------------+\n|           0 |\n+-------------+\n\nSHOW WARNINGS;\n+---------+------+-----------------------------------------+\n| Level   | Code | Message                                 |\n+---------+------+-----------------------------------------+\n| Warning | 1292 | Truncated incorrect DOUBLE value: 'foo' |\n+---------+------+-----------------------------------------+\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://mariadb.com//kb/en/extract_table_from_file_name/"], "Title": ["extract_table_from_file_name"], "Feature": ["sys.extract_table_from_file_name(path)\n"], "Description": ["extract_table_from_file_name is a stored function available with the Sys Schema.", "Given a file path, it returns the table name.", "The function does not examine anything on disk. The return value, a VARCHAR(64), is determined solely from the provided path."], "Examples": ["SELECT sys.extract_table_from_file_name('/usr/local/mysql/data/db/t1.ibd');\n+---------------------------------------------------------------------+\n| sys.extract_table_from_file_name('/usr/local/mysql/data/db/t1.ibd') |\n+---------------------------------------------------------------------+\n| t1                                                                  |\n+---------------------------------------------------------------------+\n"], "Category": ["No Category"]}
{"HTML": ["https://mariadb.com//kb/en/field/"], "Title": ["FIELD"], "Feature": ["FIELD(pattern, str1[,str2,...])\n"], "Description": ["Returns the index position of the string or number matching the given pattern.  Returns 0 in the event that none of the arguments match the pattern.  Raises an Error 1582 if not given at least two arguments.", "When all arguments given to the FIELD() function are strings, they are treated as case-insensitive.  When all the arguments are numbers, they are treated as numbers.  Otherwise, they are treated as doubles.  ", "If the given pattern occurs more than once, the\tFIELD() function only returns the index of the first instance.  If the given pattern is NULL, the function returns 0, as a NULL pattern always fails to match.", "This function is complementary to the ELT() function."], "Examples": ["SELECT FIELD('ej', 'Hej', 'ej', 'Heja', 'hej', 'foo') \n   AS 'Field Results';\n+---------------+\n| Field Results | \n+---------------+\n|             2 |\n+---------------+\n\nSELECT FIELD('fo', 'Hej', 'ej', 'Heja', 'hej', 'foo')\n   AS 'Field Results';\n+---------------+\n| Field Results | \n+---------------+\n|             0 |\n+---------------+\n\nSELECT FIELD(1, 2, 3, 4, 5, 1) AS 'Field Results';\n+---------------+\n| Field Results |\n+---------------+\n|             5 |\n+---------------+\n\nSELECT FIELD(NULL, 2, 3) AS 'Field Results';\n+---------------+\n| Field Results |\n+---------------+\n|             0 |\n+---------------+\n\nSELECT FIELD('fail') AS 'Field Results';\nError 1582 (42000): Incorrect parameter count in call\nto native function 'field'\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/find_in_set/"], "Title": ["FIND_IN_SET"], "Feature": ["FIND_IN_SET(pattern, strlist)\n"], "Description": ["Returns the index position where the given pattern occurs in a string list.  The first argument is the pattern you want to search for.  The second argument is a string containing comma-separated variables.  If the second argument is of the SET data-type, the function is optimized to use bit arithmetic.", "If the pattern does not occur in the string list or if the string list is an empty string, the function returns 0.  If either argument is NULL, the function returns NULL.  The function does not return the correct result if the pattern contains a comma (\",\") character."], "Examples": ["SELECT FIND_IN_SET('b','a,b,c,d') AS \"Found Results\";\n+---------------+\n| Found Results |\n+---------------+\n|             2 |\n+---------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/floor/"], "Title": ["FLOOR"], "Feature": ["FLOOR(X)\n"], "Description": ["Returns the largest integer value not greater than X."], "Examples": ["SELECT FLOOR(1.23);\n+-------------+\n| FLOOR(1.23) |\n+-------------+\n|           1 |\n+-------------+\n\nSELECT FLOOR(-1.23);\n+--------------+\n| FLOOR(-1.23) |\n+--------------+\n|           -2 |\n+--------------+\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://mariadb.com//kb/en/format/"], "Title": ["FORMAT"], "Feature": ["FORMAT(num, decimal_position[, locale])\n"], "Description": ["Formats the given number for display as a string, adding separators to appropriate position and rounding the results to the given decimal position.  For instance, it would format 15233.345 to 15,233.35.", "If the given decimal position is 0, it rounds to return no decimal point or fractional part.  You can optionally specify a locale value to format numbers to the pattern appropriate for the given region."], "Examples": ["SELECT FORMAT(1234567890.09876543210, 4) AS 'Format';\n+--------------------+\n| Format             |\n+--------------------+\n| 1,234,567,890.0988 |\n+--------------------+\n\nSELECT FORMAT(1234567.89, 4) AS 'Format';\n+----------------+\n| Format         |\n+----------------+\n| 1,234,567.8900 |\n+----------------+\n\nSELECT FORMAT(1234567.89, 0) AS 'Format';\n+-----------+\n| Format    |\n+-----------+\n| 1,234,568 |\n+-----------+\n\nSELECT FORMAT(123456789,2,'rm_CH') AS 'Format';\n+----------------+\n| Format         |\n+----------------+\n| 123'456'789,00 |\n+----------------+\n"], "Category": ["String Functions"]}
{"HTML": ["https://mariadb.com//kb/en/format_bytes/"], "Title": ["format_bytes"], "Feature": ["sys.format_bytes(double)\n"], "Description": ["format_bytes is a stored function available with the Sys Schema.", "Given a byte count, returns a string consisting of a value and the units in a human-readable format. The units will be in bytes, KiB (kibibytes), MiB (mebibytes), GiB (gibibytes), TiB (tebibytes), or PiB (pebibytes).", "The binary prefixes (kibi, mebi, gibi, tebi and pebi) were created in December 1998 by the International Electrotechnical Commission to avoid possible ambiguity, as the widely-used prefixes kilo, mega, giga, tera and peta can be used to refer to both the power-of-10 decimal system multipliers and the power-of-two binary system multipliers."], "Examples": ["SELECT sys.format_bytes(1000),sys.format_bytes(1024);\n+------------------------+------------------------+\n| sys.format_bytes(1000) | sys.format_bytes(1024) |\n+------------------------+------------------------+\n| 1000 bytes             | 1.00 KiB               |\n+------------------------+------------------------+\n\nSELECT sys.format_bytes(1000000),sys.format_bytes(1048576);\n+---------------------------+---------------------------+\n| sys.format_bytes(1000000) | sys.format_bytes(1048576) |\n+---------------------------+---------------------------+\n| 976.56 KiB                | 1.00 MiB                  |\n+---------------------------+---------------------------+\n\nSELECT sys.format_bytes(1000000000),sys.format_bytes(1073741874);\n+------------------------------+------------------------------+\n| sys.format_bytes(1000000000) | sys.format_bytes(1073741874) |\n+------------------------------+------------------------------+\n| 953.67 MiB                   | 1.00 GiB                     |\n+------------------------------+------------------------------+\n\nSELECT sys.format_bytes(1000000000000),sys.format_bytes(1099511627776);\n+---------------------------------+---------------------------------+\n| sys.format_bytes(1000000000000) | sys.format_bytes(1099511627776) |\n+---------------------------------+---------------------------------+\n| 931.32 GiB                      | 1.00 TiB                        |\n+---------------------------------+---------------------------------+\n\nSELECT sys.format_bytes(1000000000000000),sys.format_bytes(1125899906842624);\n+------------------------------------+------------------------------------+\n| sys.format_bytes(1000000000000000) | sys.format_bytes(1125899906842624) |\n+------------------------------------+------------------------------------+\n| 909.49 TiB                         | 1.00 PiB                           |\n+------------------------------------+------------------------------------+\n"], "Category": ["No Category"]}
{"HTML": ["https://mariadb.com//kb/en/format_path/"], "Title": ["format_path"], "Feature": ["sys.format_path(path)\n"], "Description": ["format_path is a stored function available with the Sys Schema that, given a path, returns a modified path after replacing subpaths matching the values of various system variables with the variable name.", "The system variables that are matched are, in order: ", "datadir\ntmpdir\nslave_load_tmpdir\ninnodb_data_home_dir\ninnodb_log_group_home_dir\ninnodb_undo_directory\nbasedir\n"], "Examples": ["SELECT @@tmpdir;\n+------------------------------------+\n| @@tmpdir                           |\n+------------------------------------+\n| /home/ian/sandboxes/msb_10_8_2/tmp |\n+------------------------------------+\n\nSELECT sys.format_path('/home/ian/sandboxes/msb_10_8_2/tmp/testdb.ibd');\n+------------------------------------------------------------------+\n| sys.format_path('/home/ian/sandboxes/msb_10_8_2/tmp/testdb.ibd') |\n+------------------------------------------------------------------+\n| @@tmpdir/testdb.ibd                                              |\n+------------------------------------------------------------------+\n"], "Category": ["No Category"]}
{"HTML": ["https://mariadb.com//kb/en/format_pico_time/"], "Title": ["FORMAT_PICO_TIME"], "Feature": ["FORMAT_PICO_TIME(time_val)\n"], "Description": ["Given a time in picoseconds, returns a human-readable time value and unit indicator. Resulting unit is dependent on the length of the argument, and can be:", "ps - picoseconds\nns - nanoseconds\nus - microseconds\nms - milliseconds\ns - seconds\nmin - minutes\nh - hours\nd - days\n", "With the exception of results under one nanosecond, which are not rounded and are represented as whole numbers, the result is rounded to 2 decimal places, with a minimum of 3 significant digits.", "Returns NULL if the argument is NULL.", "This function is very similar to the Sys Schema FORMAT_TIME function, but with the following differences:", "Represents minutes as min rather than m.\nDoes not represent weeks.\n"], "Examples": ["SELECT\n    FORMAT_PICO_TIME(43) AS ps,\n    FORMAT_PICO_TIME(4321) AS ns, \n    FORMAT_PICO_TIME(43211234) AS us,\n    FORMAT_PICO_TIME(432112344321) AS ms,\n    FORMAT_PICO_TIME(43211234432123) AS s,\n    FORMAT_PICO_TIME(432112344321234) AS m,\n    FORMAT_PICO_TIME(4321123443212345) AS h,\n    FORMAT_PICO_TIME(432112344321234545) AS d;\n+--------+---------+----------+-----------+---------+----------+--------+--------+\n| ps     | ns      | us       | ms        | s       | m        | h      | d      |\n+--------+---------+----------+-----------+---------+----------+--------+--------+\n|  43 ps | 4.32 ns | 43.21 us | 432.11 ms | 43.21 s | 7.20 min | 1.20 h | 5.00 d |\n+--------+---------+----------+-----------+---------+----------+--------+--------+\n"], "Category": ["Date & Time Functions"]}
{"HTML": ["https://mariadb.com//kb/en/format_statement/"], "Title": ["format_statement"], "Feature": ["sys.format_statement(statement)\n"], "Description": ["Returns a reduced length string. The length is specified by the statement_truncate_len configuration option (default 64), and the removed part of the string (if any) is replaced with an ellipsis (three dots).", "The function is intended for use in formatting lengthy SQL statements to a fixed length."], "Examples": ["SELECT sys.format_statement(\n  'SELECT field1, field2, field3, field4, field5, field6 FROM table1'\n  ) AS formatted_statement;\n+-------------------------------------------------------------------+\n| formatted_statement                                               |\n+-------------------------------------------------------------------+\n| SELECT field1, field2, field3, ... d4, field5, field6 FROM table1 |\n+-------------------------------------------------------------------+\n", "SET @sys.statement_truncate_len = 48;\n\nSELECT sys.format_statement( \n  'SELECT field1, field2, field3, field4, field5, field6 FROM table1'\n  ) AS formatted_statement;\n+---------------------------------------------------+\n| formatted_statement                               |\n+---------------------------------------------------+\n| SELECT field1, field2, ... d5, field6 FROM table1 |\n+---------------------------------------------------+\n"], "Category": ["No Category"]}
{"HTML": ["https://mariadb.com//kb/en/format_time/"], "Title": ["format_time"], "Feature": ["sys.format_time(picoseconds)\n"], "Description": ["format_time is a stored function available with the Sys Schema. Given a time in picoseconds, returns a human-readable time value and unit indicator. Unit can be:", "ps - picoseconds\nns - nanoseconds\nus - microseconds\nms - milliseconds\ns - seconds\nm - minutes\nh - hours\nd - days\nw - weeks\n", "This function is very similar to the FORMAT_PICO_TIME function introduced in MariaDB 11.0.2, but with the following differences:", "Represents minutes as m rather than min.\nRepresent weeks.\n"], "Examples": ["SELECT\n    sys.format_time(43) AS ps,\n    sys.format_time(4321) AS ns, \n    sys.format_time(43211234) AS us,\n    sys.format_time(432112344321) AS ms,\n    sys.format_time(43211234432123) AS s,\n    sys.format_time(432112344321234) AS m,\n    sys.format_time(4321123443212345) AS h,\n    sys.format_time(432112344321234545) AS d,\n    sys.format_time(43211234432123444543) AS w;\n+-------+---------+----------+-----------+---------+--------+--------+--------+---------+\n| ps    | ns      | us       | ms        | s       | m      | h      | d      | w       |\n+-------+---------+----------+-----------+---------+--------+--------+--------+---------+\n| 43 ps | 4.32 ns | 43.21 us | 432.11 ms | 43.21 s | 7.20 m | 1.20 h | 5.00 d | 71.45 w |\n+-------+---------+----------+-----------+---------+--------+--------+--------+---------+\n"], "Category": ["No Category"]}
{"HTML": ["https://mariadb.com//kb/en/atan/"], "Title": ["ATAN"], "Feature": ["ATAN(X)\n"], "Description": ["Returns the arc tangent of X, that is, the value whose tangent is X."], "Examples": ["SELECT ATAN(2);\n+--------------------+\n| ATAN(2)            |\n+--------------------+\n| 1.1071487177940904 |\n+--------------------+\n\nSELECT ATAN(-2);\n+---------------------+\n| ATAN(-2)            |\n+---------------------+\n| -1.1071487177940904 |\n+---------------------+\n"], "Category": ["Numeric Functions"]}
