{
    "HTML": [
        "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822883"
    ],
    "Title": [
        "KEEP"
    ],
    "Feature": [
        "aggregate_function KEEP ( DENSE_RANK { FIRST | LAST }\n                ORDER BY expr [ DESC | ASC ] [ NULLS { FIRST | LAST } ]\n                      [, expr [ DESC | ASC ] [ NULLS { FIRST | LAST } ]]...\n                        )\n[ OVER ( [query_partition_clause] ) ]\n\naggregate_function:\n  MIN\n |MAX\n |SUM\n |AVG\n |COUNT\n |VARIANCE\n |STDDEV\n"
    ],
    "Description": [
        "该函数用于对一组行中的值进行操作，将这组行按照指定的排序规则排序后返回排在第一或最后的值。可以将其用作聚合或分析函数。",
        "\n说明\n\n作为分析函数使用时，需要使用 OVER 子句定义窗口进行计算。该函数基于 query_partition_clause 中的一个或多个表达式将查询结果集分为几组。\n作为聚合函数使用时，该函数对一组行的集合进行聚合计算，结果只能返回一个值，此时不需要加 OVER 子句。\n\n",
        "\n\n\n参数\n说明\n\n\n\n\naggregate_function\n指定聚合函数的种类。\n\n\nexpr\n可以是任何表达式。\n\n\nFIRST | LAST\n指定返回 expr 排序后那个位置的值。 \n      \nFIRST 表示返回排在首位的值。\nLAST 表示返回排在最后的值。\n\n\n\nDESC | ASC\n指定列表的排序方式，为可选项。 \n      \nASC 为升序排序，默认值。\nDESC 为降序排序。\n\n\n\nNULLS { FIRST | LAST }\n排序后 expr 中 NULL 值的位置，为可选项。 \n      \nNULLS FIRST 表示 NULL 值排在非空值的前面。\nNULLS LAST 表示 NULL 值排在非空值的后面，为默认值。\n\n\n\nOVER\n使用 OVER 子句定义窗口进行计算。详细信息请参见 分析函数说明。\n\n\n",
        "返回与 aggregate_function 中指定的列相同的数据类型。"
    ],
    "Examples": [
        "obclient> CREATE TABLE employees (department_id INT,manager_id INT,last_name varchar(50),hiredate varchar(50),SALARY INT);\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO employees VALUES\n    (30, 100, 'Raphaely', '2017-07-01', 1700),\n    (30, 100, 'De Haan', '2018-05-01',11000),\n    (40, 100, 'Errazuriz', '2017-07-21', 1400),\n    (50, 100, 'Hartstein', '2019-10-05',14000),\n    (50, 100, 'Raphaely', '2017-07-22', 1700),\n    (50, 100, 'Weiss',  '2019-10-05',13500),\n    (90, 100, 'Russell', '2019-07-11', 13000),\n    (90,100, 'Partners',  '2018-12-01',14000);\nQuery OK, 8 rows affected\nRecords: 8  Duplicates: 0  Warnings: 0\n\nobclient> SELECT * FROM employees;\n+---------------+------------+-----------+------------+--------+\n| DEPARTMENT_ID | MANAGER_ID | LAST_NAME | HIREDATE   | SALARY |\n+---------------+------------+-----------+------------+--------+\n|            30 |        100 | Raphaely  | 2017-07-01 |   1700 |\n|            30 |        100 | De Haan   | 2018-05-01 |  11000 |\n|            40 |        100 | Errazuriz | 2017-07-21 |   1400 |\n|            50 |        100 | Hartstein | 2019-10-05 |  14000 |\n|            50 |        100 | Raphaely  | 2017-07-22 |   1700 |\n|            50 |        100 | Weiss     | 2019-10-05 |  13500 |\n|            90 |        100 | Russell   | 2019-07-11 |  13000 |\n|            90 |        100 | Partners  | 2018-12-01 |  14000 |\n+---------------+------------+-----------+------------+--------+\n8 rows in set\n",
        "obclient> SELECT SUM(salary) KEEP (DENSE_RANK FIRST ORDER BY salary) \"Worst\",\n    SUM(salary) KEEP (DENSE_RANK LAST ORDER BY HIREDATE) \"Best\"\n    FROM employees;\n+-------+-------+\n| Worst | Best  |\n+-------+-------+\n|  1400 | 27500 |\n+-------+-------+\n1 row in set\n",
        "obclient> SELECT last_name,department_id,salary,\n    SUM(salary) KEEP (DENSE_RANK FIRST ORDER BY salary)\n        OVER (PARTITION BY department_id) \"Worst\",\n    SUM(salary) KEEP (DENSE_RANK LAST ORDER BY HIREDATE)\n        OVER (PARTITION BY department_id) \"Best\"\n    FROM employees\n    ORDER BY department_id, salary, last_name;\n+-----------+---------------+--------+-------+-------+\n| LAST_NAME | DEPARTMENT_ID | SALARY | Worst | Best  |\n+-----------+---------------+--------+-------+-------+\n| Raphaely  |            30 |   1700 |  1700 | 11000 |\n| De Haan   |            30 |  11000 |  1700 | 11000 |\n| Errazuriz |            40 |   1400 |  1400 |  1400 |\n| Raphaely  |            50 |   1700 |  1700 | 27500 |\n| Weiss     |            50 |  13500 |  1700 | 27500 |\n| Hartstein |            50 |  14000 |  1700 | 27500 |\n| Russell   |            90 |  13000 | 13000 | 13000 |\n| Partners  |            90 |  14000 | 13000 | 13000 |\n+-----------+---------------+--------+-------+-------+\n8 rows in set\n"
    ],
    "Category": [
        "Aggregate Functions",
        "Analytic Functions"
    ]
}