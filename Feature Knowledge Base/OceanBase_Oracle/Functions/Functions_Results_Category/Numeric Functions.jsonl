{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823164"], "Title": ["ABS"], "Feature": ["ABS(numeric_expression)\n"], "Description": ["该函数返回 numeric_expression 的绝对值。ABS 将负值更改为正值，对零或正值没有影响。", "\n\n\n参数\n说明\n\n\n\n\nnumeric_expression\n精确数值或近似数值数据类型（NUMBER、FLOAT、BINARY_FLOAT 和 BINARY_DOUBLE）的表达式。\n\n\n", "返回与 numeric_expression 相同的数据类型。"], "Examples": ["obclient> SELECT ABS(-1.0), ABS(0), ABS(6.66), ABS(3-6) FROM DUAL;\n+-----------+--------+-----------+----------+\n| ABS(-1.0) | ABS(0) | ABS(6.66) | ABS(3-6) |\n+-----------+--------+-----------+----------+\n|         1 |      0 |      6.66 |        3 |\n+-----------+--------+-----------+----------+\n1 row in set\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823155"], "Title": ["REMAINDER"], "Feature": ["REMAINDER (x, y)\n"], "Description": ["该函数返回 x 除以 y 的余数。", "\n注意\n该函数在用 REMAINDER (x,y) 和 MOD (x,y) 函数在进行运算时，都用了一个公式 result=x-y*(x/y)，区别在于计算 x/y 时的处理方式不同。在 REMAINDER (x,y) 函数中，采用 ROUND(x/y)，而在 MOD (x,y) 函数中采用 FLOOR(x/y)。\n在 REMAINDER 函数中，当 ROUND(x/y) 的参数 x/y 的值的小数部分恰好为 0.5 时，如果 x/y 的值的整数部分为偶数，不向前一位进位；如果 x/y 的值的整数部分为奇数，向前一位进位。例如，ROUND(1.5)=2、ROUND(2.5)=2、ROUND(3.5)=4、ROUND(4.5)=4。\n", "\n\n\n参数\n说明\n\n\n\n\nx\n被除数，为数值类型（NUMBER、FLOAT、BINARY_FLOAT 和 BINARY_DOUBLE）表达式。\n\n\ny\n除数，为数值类型（NUMBER、FLOAT、BINARY_FLOAT 和 BINARY_DOUBLE）表达式。 注意 参数 y 不能为 0。\n\n\n", "返回类型与数值优先级高的参数的数据类型相同。"], "Examples": ["obclient> SELECT MOD(1.5,1),REMAINDER(1.5,1) FROM DUAL;\n+------------+------------------+\n| MOD(1.5,1) | REMAINDER(1.5,1) |\n+------------+------------------+\n|         .5 |              -.5 |\n+------------+------------------+\n1 row in set\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823158"], "Title": ["BITAND"], "Feature": ["BITAND (expr1,expr2)\n"], "Description": ["该函数将其输入参数进行二进制按位与操作。", "\n\n\n参数\n说明\n\n\n\n\nexpr1\n指定进行按位与运算的第一个值，是一个 NUMBER 类型表达式。\n\n\nexpr2\n指定进行按位与运算的第二个值，是一个 NUMBER 类型表达式。\n\n\n", "\n说明\n\n如果 expr1 和 expr2 有任意一个为 NULL，则返回结果是 NULL。\n如果参数为非整数，那么在进行运算之前转换为整数。\n\n", "返回 NUMBER 数据类型或 NULL。"], "Examples": ["obclient> SELECT BITAND(2,3) FROM DUAL;\n+-------------+\n| BITAND(2,3) |\n+-------------+\n|           2 |\n+-------------+\n1 row in set\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823165"], "Title": ["ROUND"], "Feature": ["ROUND (numeric[,decimal])\n"], "Description": ["该函数返回参数 numeric 四舍五入后的值。", "\n\n\n参数\n说明\n\n\n\n\nnumeric\n数值类型的（NUMBER、FLOAT、BINARY_FLOAT 和 BINARY_DOUBLE）表达式。\n\n\ndecimal\n\n\n如果 decimal 大于等于 0 则将 numeric 四舍五入到 decimal 位小数。\n如果 decimal 小于 0 则四舍五入到小数点向左第 decimal 位。\n当 decimal 不为整数时，截取 decimal 的整数部分。\n不指定 decimal 时，将 numeric 四舍五入到整数位。\n\n\n\n", "不指定 decimal 时，返回类型与参数 numeric 的类型相同。", "指定 decimal 时，返回类型为 NUMBER 数据类型。"], "Examples": ["obclient> SELECT ROUND(666.666,1),ROUND(666.666,-1),ROUND(666.666,2.1),ROUND(666.666) FROM DUAL;\n+------------------+-------------------+--------------------+----------------+\n| ROUND(666.666,1) | ROUND(666.666,-1) | ROUND(666.666,2.1) | ROUND(666.666) |\n+------------------+-------------------+--------------------+----------------+\n|            666.7 |               670 |             666.67 |            667 |\n+------------------+-------------------+--------------------+----------------+\n1 row in set\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823161"], "Title": ["SIGN"], "Feature": ["SIGN(numeric_expression)\n"], "Description": ["该函数返回输入数值的符号。符号为 1、-1 和 0。", "numeric_expression 是数值数据类型（NUMBER、FLOAT、BINARY_FLOAT 和 BINARY_DOUBLE）或可以隐式转换为数值数据类型的参数。", "返回 NUMBER 数据类型。", "如果 numeric_expression > 0，则返回 1。", "如果 numeric_expression < 0，则返回 -1。", "如果 numeric_expression = 0，则返回 0。"], "Examples": ["obclient> SELECT SIGN(2),SIGN(-2),SIGN(0),SIGN(3+3) FROM DUAL;\n+---------+----------+---------+-----------+\n| SIGN(2) | SIGN(-2) | SIGN(0) | SIGN(3+3) |\n+---------+----------+---------+-----------+\n|       1 |       -1 |       0 |         1 |\n+---------+----------+---------+-----------+\n1 row in set\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823144"], "Title": ["SIN"], "Feature": ["SIN(x)\n"], "Description": ["该函数是正弦函数，返回参数角度的正弦值。返回值范围为 [-1,1]。", "x 是取值为任意实数（以弧度表示的角度）的数值数据类型或可以隐式转换为数值数据类型的参数。", "如果参数 x 数据类型是 BINARY_FLOAT，则该函数返回 BINARY_DOUBLE 数据类型。否则，该函数返回与参数 x 相同的数值数据类型。"], "Examples": ["obclient> SELECT SIN(0),SIN(30*3.14159265/180) FROM DUAL;\n+--------+-------------------------------------------+\n| SIN(0) | SIN(30*3.14159265/180)                    |\n+--------+-------------------------------------------+\n|      0 | .4999999994818579767701332168843926496529 |\n+--------+-------------------------------------------+\n1 row in set\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823146"], "Title": ["SINH"], "Feature": ["SINH(number)\n"], "Description": ["该函数是双曲正弦函数，返回数字参数的双曲正弦值。返回值范围是 (-∞,+∞)。", "number 是数值数据类型（NUMBER、FLOAT、BINARY_FLOAT 和 BINARY_DOUBLE）或可以隐式转换为数值数据类型的参数。", "如果参数 number 是 BINARY_FLOAT 类型，则返回类型是 BINARY_DOUBLE。否则，返回与参数 number 相同的数值数据类型。"], "Examples": ["obclient> SELECT SINH(0) FROM DUAL;\n+---------+\n| SINH(0) |\n+---------+\n|       0 |\n+---------+\n1 row in set\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823162"], "Title": ["SQRT"], "Feature": ["SQRT(numeric_expression)\n"], "Description": ["该函数返回参数 numeric_expression 的平方根。", "numeric_expression 是数值数据类型（NUMBER、FLOAT、BINARY_FLOAT 和 BINARY_DOUBLE）或可以隐式转换为数值数据类型且大于等于零的参数。", "返回与参数 numeric_expression 相同的数据类型。"], "Examples": ["obclient> SELECT SQRT(64),SQRT(50+50) FROM DUAL;\n+----------+-------------+\n| SQRT(64) | SQRT(50+50) |\n+----------+-------------+\n|        8 |          10 |\n+----------+-------------+\n1 row in set\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823149"], "Title": ["CEIL"], "Feature": ["CEIL (numeric_expression)\n"], "Description": ["该函数返回大于等于 numeric_expression 的最小整数。", "\n\n\n参数\n说明\n\n\n\n\nnumeric_expression\n精确数值或近似数值数据类型（NUMBER、FLOAT、BINARY_FLOAT 和 BINARY_DOUBLE）的表达式。\n\n\n", "返回类型与参数 numeric_expression 的数据类型相同。"], "Examples": ["obclient> SELECT CEIL(-1.5),CEIL(1.5),CEIL(2),CEIL(6-9.5) FROM DUAL;\n+------------+-----------+---------+-------------+\n| CEIL(-1.5) | CEIL(1.5) | CEIL(2) | CEIL(6-9.5) |\n+------------+-----------+---------+-------------+\n|         -1 |         2 |       2 |          -3 |\n+------------+-----------+---------+-------------+\n1 row in set\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823168"], "Title": ["TAN"], "Feature": ["TAN(x)\n"], "Description": ["该函数是正切函数，返回角度的正切值。", "x 是取值为任意实数（以弧度表示的角度）的数值数据类型或可以隐式转换为数值数据类型的参数。", "如果参数 x 数据类型是 BINARY_FLOAT，则该函数返回 BINARY_DOUBLE 数据类型。否则，该函数返回与参数 x 相同的数值数据类型。"], "Examples": ["obclient> SELECT TAN(0),TAN(135*3.1415926/180) FROM DUAL;\n+--------+-------------------------------------------+\n| TAN(0) | TAN(135*3.1415926/180)                    |\n+--------+-------------------------------------------+\n|      0 | -1.00000008038469308854331997429109563738 |\n+--------+-------------------------------------------+\n1 row in set\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823152"], "Title": ["TANH"], "Feature": ["TANH(number)\n"], "Description": ["该函数是双曲正切函数，返回数值参数的双曲正切值。返回值范围是 (-1,1)。", "number 是数值数据类型（NUMBER、FLOAT、BINARY_FLOAT 和 BINARY_DOUBLE）或可以隐式转换为数值数据类型的参数。", "如果参数 number 是 BINARY_FLOAT 类型，则返回类型是 BINARY_DOUBLE。否则，返回与参数 number 相同的数值数据类型。"], "Examples": ["obclient> SELECT TANH(1) FROM DUAL;\n+-------------------------------------------+\n| TANH(1)                                   |\n+-------------------------------------------+\n| .7615941559557648881194582826047935904128 |\n+-------------------------------------------+\n1 row in set\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823167"], "Title": ["TRUNC"], "Feature": ["TRUNC (numeric[,precision])\n"], "Description": ["该函数返回参数 numeric 按精度 precision 截取后的值。", "\n\n\n参数\n说明\n\n\n\n\nnumeric\n表示被截取的数字，属于数值类型（NUMBER、FLOAT、BINARY_FLOAT 和 BINARY_DOUBLE）表达式。\n\n\nprecision\n表示精度，为可选项，默认值为 0。属于数值类型（NUMBER、FLOAT、BINARY_FLOAT 和 BINARY_DOUBLE）表达式。 \n      \n如果 precision 不为整数，则按 precision 的整数部分作精度截取 numeric。\n如果 precision 大于 0，则截取 numeric 到 precision 位小数。\n如果 precision 小于 0，则截取到 numeric 小数点向左第 precision 位。\n如果 precision 等于 0，则截取到 numeric 的整数部分，小数部分舍去。\n\n\n\n", "不指定 precision 时，返回类型与参数 numeric 的数据类型相同。指定 precision 时，返回类型为 NUMBER。"], "Examples": ["obclient> SELECT TRUNC(555.666,2.2),TRUNC(555.666,-2),TRUNC(555.666) FROM DUAL;\n+--------------------+-------------------+----------------+\n| TRUNC(555.666,2.2) | TRUNC(555.666,-2) | TRUNC(555.666) |\n+--------------------+-------------------+----------------+\n|             555.66 |               500 |            555 |\n+--------------------+-------------------+----------------+\n1 row in set\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823157"], "Title": ["UNIFORM"], "Feature": ["UNIFORM(<min> , <max> , <gen>)\n"], "Description": ["该函数返回一个符合均匀分布（Uniform Distribution）的整数或浮点数。", "min", ", ", "max", " 的取值必须是标量值，不随行迭代而变。例如，常量、标量函数等。PL 里还可以是 ", "@v1", "、", "1+@v3", " 等。", "Oracle 模式下，无论 ", "min", "、", "max", " 是否为整数，都当做 ", "NUMBER", " 类型处理，", "UNIFORM()", " 函数的输出结果为浮点数。如果希望生成整数，可以配合 ", "FLOOR()", " 函数使用。", "gen", " 是一个数值生成函数，通常使用 ", "RANDOM()", " 函数生成。如果传入值是一个常量，则 ", "UNIFORM()", " 函数返回值也为一个定值。"], "Examples": ["obclient> SELECT UNIFORM(0.0, 10, RANDOM()) FROM TABLE(GENERATOR(4)) ORDER BY 1;\n+--------------------------+\n| UNIFORM(0.0,10,RANDOM()) |\n+--------------------------+\n|        .8657087411722835 |\n|       1.0922542185892958 |\n|       1.1803956370514672 |\n|        5.613282729140028 |\n+--------------------------+\n4 rows in set\n\nobclient> SELECT UNIFORM(0, 10, RANDOM()) FROM TABLE(GENERATOR(4)) ORDER BY 1;\n+------------------------+\n| UNIFORM(0,10,RANDOM()) |\n+------------------------+\n|     2.6761305377880125 |\n|     3.0277418674828116 |\n|      5.170644071608517 |\n|      5.805950943815582 |\n+------------------------+\n4 rows in set\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823159"], "Title": ["WIDTH_BUCKET"], "Feature": ["WIDTH_BUCKET\n(expr, min_value, max_value, num_buckets)\n"], "Description": ["该函数根据输入参数创建等长的段，并返回 expr 所在的段号。即构建等宽直方图，其中直方图范围被划分为具有相同大小的区间。", "\n\n\n参数\n说明\n\n\n\n\nexpr\n指定需创建等长段的表达式，属于数值或日期时间值，或者是可以隐式转换为数值或日期时间值的值。\n\n\nmin_value\n指定表达式 expr 所在范围的左端点。数据类型跟 expr 相同，并且不能为 NULL。\n\n\nmax_value\n指定表达式 expr 所在范围的右端点。数据类型跟 expr 相同，并且不能为 NULL。\n\n\nnum_buckets\n指定范围 min_value 与 max_value之间的段数。此表达式的计算结果必须为正整数。\n\n\n", "\n说明\n\n当 min_value < max_value 时： \n     \n如果 expr< min_value，该函数返回 0。\n如果 expr >= min_value，该函数返回 num_buckets 的值加 1。\n\n当 min_value > max_value 时： \n     \n如果 expr > min_value，该函数返回 0。\n如果 expr <= min_value，该函数返回 num_buckets 的值加 1。\n\n\n", "返回 NUMERIC 类型数据。"], "Examples": ["obclient> CREATE TABLE tbl1 (col1 INT,col2 NUMBER(10,2));\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO tbl1 VALUES(1,0.5),(2,1),(3,9),(4,10),(5,11),(6,55),(7,100),(8,101),(9,'');\nQuery OK, 9 rows affected\nRecords: 9  Duplicates: 0  Warnings: 0\n\nobclient> SELECT col1,col2,WIDTH_BUCKET(col2,1,100,10) FROM tbl1;\n+------+------+-----------------------------+\n| COL1 | COL2 | WIDTH_BUCKET(COL2,1,100,10) |\n+------+------+-----------------------------+\n|    1 |   .5 |                           0 |\n|    2 |    1 |                           1 |\n|    3 |    9 |                           1 |\n|    4 |   10 |                           1 |\n|    5 |   11 |                           2 |\n|    6 |   55 |                           6 |\n|    7 |  100 |                          11 |\n|    8 |  101 |                          11 |\n|    9 | NULL |                        NULL |\n+------+------+-----------------------------+\n9 rows in set\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823154"], "Title": ["ZIPF"], "Feature": ["ZIPF(<s> , <N> , <gen>)\n"], "Description": ["该函数返回一个符合齐夫分布（Zipf-distributed）的整数，取值范围为 [0, N)，分区的特征指数为 s。", "s", " 为特征指数，", "s", " 越大生成的序列越倾斜。将序列绘制成曲线时，曲线越陡峭。", "s", " 和 ", "N", " 取值要求：必须是一个标量值，不随行迭代而变。例如，整形或浮点型常量、标量函数等，PL 里还可以是 ", "@v1", "、", "1+@v3", " 等。", "s", " 的取值范围为 [1, +∞)，", "N", " 的取值范围为 [1，16777215]。", "zipf", " 算法实现时消耗的存储、计算资源和 ", "N", " 的取值相关。算法空间复杂度为 ", "O(N)", "，每生成一个整数的时间复杂度为 ", "O(logN)", "。所以，", "N", " 的取值范围被限制为 [1, 16777215]。", "gen", " 是一个数值生成函数，通常使用 ", "RANDOM()", " 函数生成。如果传入值是一个常量，则 ", "zipf()", " 函数返回值也为一个定值。"], "Examples": ["obclient> SELECT ZIPF(1, 10, RANDOM()) FROM TABLE(GENERATOR(6));\n+-----------------------+\n|  ZIPF(1,10,RANDOM())  |\n+-----------------------+\n|                     2 |\n|                     0 |\n|                     0 |\n|                     0 |\n|                     3 |\n|                     3 |\n+-----------------------+\n6 rows in set\n\nobclient> SELECT ZIPF(1, 10, 0415) FROM TABLE(GENERATOR(6));\n+-------------------+\n| ZIPF(1, 10, 0415) |\n+-------------------+\n|                 1 |\n|                 1 |\n|                 1 |\n|                 1 |\n|                 1 |\n|                 1 |\n+-------------------+\n6 rows in set\n\nobclient> SELECT ZIPF(ABS(-1), 23, RANDOM()) FROM DUAL;\n+-----------------------------+\n| ZIPF(ABS(-1),23,RANDOM()) |\n+-----------------------------+\n|                           9 |\n+-----------------------------+\n1 row in set\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823147"], "Title": ["COS"], "Feature": ["COS(x)\n"], "Description": ["该函数是余弦函数，用于计算参数角度的余弦值。返回值范围为 [-1,1]。", "x 是取值为任意实数（以弧度表示的角度）的数值数据类型或可以隐式转换为数值数据类型的参数。", "如果参数 x 数据类型是 BINARY_FLOAT，则该函数返回 BINARY_DOUBLE 数据类型。否则，该函数返回与参数 x 相同的数值数据类型。"], "Examples": ["obclient> SELECT COS(0) FROM DUAL;\n+--------+\n| COS(0) |\n+--------+\n|      1 |\n+--------+\n1 row in set\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823171"], "Title": ["ACOS"], "Feature": ["ACOS(num_expression)\n"], "Description": ["该函数是反余弦函数，返回一个在 [0,π] 范围内的值，以弧度表示。", "\n\n\n参数\n说明\n\n\n\n\nnum_expression\nNUMBER 类型或可隐式转换为 NUMBER 类型的表达式。取值在 [-1,1] 之间。\n\n\n", "返回 NUMBER 数据类型。"], "Examples": ["obclient> SELECT ACOS(0.3) \"acos_test\" FROM DUAL;\n+------------------------------------------+\n| acos_test                                |\n+------------------------------------------+\n| 1.26610367277949911125931873041222227514 |\n+------------------------------------------+\n1 row in set\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823156"], "Title": ["COSH"], "Feature": ["COSH(number)\n"], "Description": ["该函数是双曲余弦函数，返回数字参数的双曲余弦值。返回值范围是 [1,+∞)。", "number 是数值数据类型（NUMBER、FLOAT、BINARY_FLOAT 和 BINARY_DOUBLE）或可以隐式转换为数值数据类型的参数。", "如果参数 number 是 BINARY_FLOAT 类型，则返回类型是 BINARY_DOUBLE。否则，返回与参数 number 相同的数值数据类型。"], "Examples": ["obclient> SELECT COSH(0) FROM DUAL;\n+---------+\n| COSH(0) |\n+---------+\n|       1 |\n+---------+\n1 row in set\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823173"], "Title": ["EXP"], "Feature": ["EXP (numeric_expression)\n"], "Description": ["该函数是以自然常数 e 为底的指数函数，用于返回 e 的 numeric_expression 次方，其中 e = 2.71828183...。", "numeric_expression 是数值数据类型（NUMBER、FLOAT、BINARY_FLOAT 和 BINARY_DOUBLE）或可以隐式转换为数值数据类型的参数。", "当参数为 BINARY_FLOAT 数据类型时，返回类型为 BINARY_DOUBLE，其他情况下返回类型与参数 numeric_expression 的数据类型相同。"], "Examples": ["obclient> SELECT EXP(4),EXP(3+2.5) FROM DUAL;\n+-------------------------------------------+------------------------------------------+\n| EXP(4)                                    | EXP(3+2.5)                               |\n+-------------------------------------------+------------------------------------------+\n| 54.59815003314423907811026120286087840279 | 244.691932264220387915188949511839350184 |\n+-------------------------------------------+------------------------------------------+\n1 row in set\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823166"], "Title": ["FLOOR"], "Feature": ["FLOOR (numeric_expression)\n"], "Description": ["该函数返回小于等于数值 numeric_expression 的最大整数。", "numeric_expression 是数值数据类型（NUMBER、FLOAT、BINARY_FLOAT 和 BINARY_DOUBLE）或可以隐式转换为数值数据类型的参数。", "返回类型与参数 numeric_expression 的数据类型相同。"], "Examples": ["obclient> SELECT FLOOR(-1.5),FLOOR(1.5),FLOOR(2),FLOOR(6-9.5) FROM DUAL;\n+-------------+------------+----------+--------------+\n| FLOOR(-1.5) | FLOOR(1.5) | FLOOR(2) | FLOOR(6-9.5) |\n+-------------+------------+----------+--------------+\n|          -2 |          1 |        2 |           -4 |\n+-------------+------------+----------+--------------+\n1 row in set\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823172"], "Title": ["GENERATOR"], "Feature": ["TABLE(GENERATOR(N))\n"], "Description": ["GENERATOR 函数是一种特殊的内置函数，设计用于在 Table Function 框架中使用。它的主要作用是生成一个指定数量行的虚拟表。这个表不包含任何实际数据，而是提供了一个结构，可以在其中插入数据。GENERATOR 函数通常用于生成一组连续的行，以便进行批量操作或模拟数据集。", "Table Function 是 SQL 中的一个高级功能，它允许函数返回一整张表，而不仅仅是单个值。这意味着 Table Function 可以产出多行和多列，类似于常规的数据表一样。", "TABLE(GENERATOR(N)) 可以生成一个有 N 行的虚拟表，其中 N 是一个大于或等于 0 的 64 位整数。如果你想要这个虚拟表包括具体的数据，那么你需要在 SELECT 语句后面添加数据生成的逻辑，比如常量、计算表达式、函数调用或用户自定义函数（UDF）等。", "TABLE(GENERATOR(N)) 支持并行执行。你可以在并行 SELECT 查询或并行数据操纵语言（DML）操作中使用它。然而，生成这些虚拟行的过程本身不是并行的；只有一个线程负责读取 TABLE(GENERATOR(N)) 生成的行。因此，在包含 TABLE(GENERATOR(N)) 的数据流操作(Data Flow Operation, DFO)中，Degree of Parallelism (DOP) 设置应为 1。", "N", "：一个大于或等于 0 的 64 位的正整数，用于指定生成的行数。"], "Examples": ["obclient [SYS]> SELECT * FROM TABLE(GENERATOR(10));\n", "+--------------+\n| COLUMN_VALUE |\n+--------------+\n|            1 |\n|            2 |\n|            3 |\n|            4 |\n|            5 |\n|            6 |\n|            7 |\n|            8 |\n|            9 |\n|           10 |\n+--------------+\n10 rows in set\n", "obclient [SYS]> SELECT 'Hello, World!' AS greeting FROM TABLE(GENERATOR(10));\n", "+---------------+\n| GREETING      |\n+---------------+\n| Hello, World! |\n| Hello, World! |\n| Hello, World! |\n| Hello, World! |\n| Hello, World! |\n| Hello, World! |\n| Hello, World! |\n| Hello, World! |\n| Hello, World! |\n| Hello, World! |\n+---------------+\n10 rows in set\n", "obclient> SELECT COUNT(*) FROM TABLE(GENERATOR(100000));\n+----------+\n| COUNT(*) |\n+----------+\n|   100000 |\n+----------+\n1 row in set\n\nobclient> SELECT NORMAL(0, 1, RANDOM()) FROM TABLE(GENERATOR(5));\n+------------------------+\n| NORMAL(0, 1, RANDOM()) |\n|------------------------|\n|           0.227384164  |\n|           0.9945290748 |\n|          -0.2045078571 |\n|          -1.594607893  |\n|          -0.8213296842 |\n+------------------------+\n5 rows in set\n\nobclient> SELECT RANDSTR(1, ZIPF(1, 5, RANDOM())) str FROM TABLE(GENERATOR(5));\n+------------------------+\n|                    str |\n|------------------------|\n|                     A  |\n|                     D  |\n|                     A  |\n|                     A  |\n|                     C  |\n+------------------------+\n5 rows in set\n", "obclient> CREATE TABLE t1 (c1 INT);\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO t1 VALUES (1), (2);\nQuery OK, 2 rows affected\nRecords: 2  Duplicates: 0  Warnings: 0\n\nobclient> SELECT c1, RANDOM(1) FROM t1, TABLE(GENERATOR(3));\n+------+----------------------+\n| c1   | RANDOM(1)            |\n+------+----------------------+\n|    1 | -6753783847308464280 |\n|    2 | -6707106347154343346 |\n|    1 |  -899926183391115878 |\n|    2 | -8835543475904200562 |\n|    1 | -2750444335953844424 |\n|    2 |  7588216632478230601 |\n+------+----------------------+\n6 rows in set\n\nobclient> EXPLAIN SELECT c1, RANDOM(1) FROM t1, TABLE(GENERATOR(3));\n+----------------------------------------------------------------------------------+\n| Query Plan                                                                       |\n+----------------------------------------------------------------------------------+\n| ==================================================================               |\n| |ID|OPERATOR                   |NAME       |EST.ROWS|EST.TIME(us)|               |\n| ------------------------------------------------------------------               |\n| |0 |NESTED-LOOP JOIN CARTESIAN |           |398     |14          |               |\n| |1 |├─FUNCTION_TABLE           |FUNC_TABLE1|199     |1           |               |\n| |2 |└─MATERIAL                 |           |2       |2           |               |\n| |3 |  └─TABLE FULL SCAN        |T1         |2       |2           |               |\n| ==================================================================               |\n| Outputs & filters:                                                               |\n| -------------------------------------                                            |\n|   0 - output([T1.C1], [RANDOM(cast(1, BIGINT(-1, 0)))]), filter(nil), rowset=256 |\n|       conds(nil), nl_params_(nil), use_batch=false                               |\n|   1 - output(nil), filter(nil)                                                   |\n|       value(GENERATOR(cast(3, BIGINT(-1, 0))))                                   |\n|   2 - output([T1.C1]), filter(nil), rowset=256                                   |\n|   3 - output([T1.C1]), filter(nil), rowset=256                                   |\n|       access([T1.C1]), partitions(p0)                                            |\n|       is_index_back=false, is_global_index=false,                                |\n|       range_key([T1.__pk_increment]), range(MIN ; MAX)always true                |\n+----------------------------------------------------------------------------------+\n19 rows in set\n\nobclient> SELECT /*+ PARALLEL(2) */ c1, RANDOM(1) FROM t1, TABLE(GENERATOR(3));\n+------+----------------------+\n| c1   | random(1)            |\n+------+----------------------+\n|    1 | -6753783847308464280 |\n|    2 | -6707106347154343346 |\n|    1 |  -899926183391115878 |\n|    2 | -8835543475904200562 |\n|    1 | -2750444335953844424 |\n|    2 |  7588216632478230601 |\n+------+----------------------+\n6 rows in set\n\nobclient> EXPLAIN SELECT /*+ PARALLEL(2) */ c1, RANDOM(1) FROM t1, TABLE(GENERATOR(3));\n+----------------------------------------------------------------------------------+\n| Query Plan                                                                       |\n+----------------------------------------------------------------------------------+\n| ==================================================================               |\n| |ID|OPERATOR                   |NAME       |EST.ROWS|EST.TIME(us)|               |\n| ------------------------------------------------------------------               |\n| |0 |NESTED-LOOP JOIN CARTESIAN |           |398     |13          |               |\n| |1 |├─FUNCTION_TABLE           |FUNC_TABLE1|199     |1           |               |\n| |2 |└─MATERIAL                 |           |2       |3           |               |\n| |3 |  └─PX COORDINATOR         |           |2       |3           |               |\n| |4 |    └─EXCHANGE OUT DISTR   |:EX10000   |2       |2           |               |\n| |5 |      └─PX BLOCK ITERATOR  |           |2       |1           |               |\n| |6 |        └─TABLE FULL SCAN  |T1         |2       |1           |               |\n| ==================================================================               |\n| Outputs & filters:                                                               |\n| -------------------------------------                                            |\n|   0 - output([T1.C1], [RANDOM(cast(1, BIGINT(-1, 0)))]), filter(nil), rowset=256 |\n|       conds(nil), nl_params_(nil), use_batch=false                               |\n|   1 - output(nil), filter(nil)                                                   |\n|       value(GENERATOR(cast(3, BIGINT(-1, 0))))                                   |\n|   2 - output([T1.C1]), filter(nil), rowset=256                                   |\n|   3 - output([T1.C1]), filter(nil), rowset=256                                   |\n|   4 - output([T1.C1]), filter(nil), rowset=256                                   |\n|       dop=2                                                                      |\n|   5 - output([T1.C1]), filter(nil), rowset=256                                   |\n|   6 - output([T1.C1]), filter(nil), rowset=256                                   |\n|       access([T1.C1]), partitions(p0)                                            |\n|       is_index_back=false, is_global_index=false,                                |\n|       range_key([T1.__pk_increment]), range(MIN ; MAX)always true                |\n+----------------------------------------------------------------------------------+\n26 rows in set\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823151"], "Title": ["LN"], "Feature": ["LN (numeric_expression)\n"], "Description": ["该函数返回以 e 为底 numeric_expression 的对数。", "\n说明\ne 为数学常量，等于 2.71828183...。\n", "numeric_expression 是大于 0 的数值数据类型（NUMBER、FLOAT、BINARY_FLOAT 和 BINARY_DOUBLE）或可以隐式转换为数值数据类型的参数。", "当参数为 BINARY_FLOAT 数据类型时，返回类型为 BINARY_DOUBLE，其他情况下返回类型与参数 numeric_expression 的数据类型相同。"], "Examples": ["obclient> SELECT LN(9) FROM DUAL;\n+------------------------------------------+\n| LN(9)                                    |\n+------------------------------------------+\n| 2.19722457733621938279049047384505140929 |\n+------------------------------------------+\n1 row in set\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823143"], "Title": ["LOG"], "Feature": ["LOG (x,y)\n"], "Description": ["该函数返回以 x 为底的 y 的对数。", "\n\n\n参数\n说明\n\n\n\n\nx\n表示对数的底，数值型（NUMBER、FLOAT、BINARY_FLOAT 和 BINARY_DOUBLE）表达式。 x 大于 0 且不等于 1。\n\n\ny\n表示真数，数值型（NUMBER、FLOAT、BINARY_FLOAT 和 BINARY_DOUBLE）表达式。 y 大于 0。\n\n\n", "当参数为 BINARY_FLOAT 和 BINARY_DOUBLE 数据类型时，返回类型为 BINARY_DOUBLE，其他情况下返回类型为 NUMBER。"], "Examples": ["obclient> SELECT LOG(2,8) FROM DUAL;\n+----------+\n| LOG(2,8) |\n+----------+\n|        3 |\n+----------+\n1 row in set\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823150"], "Title": ["ASIN"], "Feature": ["ASIN(number)\n"], "Description": ["该函数的功能是求反正弦值。反正弦值是指正弦值为number 的角度，返回的角度以弧度表示，弧度值范围为 [-π/2，π/2]。", "number 是一个取值范围在 [-1,1] 的数值数据类型或可以隐式转换为数值数据类型的参数。", "返回 NUMBER 数据类型。"], "Examples": ["obclient> SELECT ASIN(0.5) FROM DUAL;\n+-------------------------------------------+\n| ASIN(0.5)                                 |\n+-------------------------------------------+\n| .5235987755982988730771072305465838140329 |\n+-------------------------------------------+\n1 row in set\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823160"], "Title": ["MOD"], "Feature": ["MOD (x,y)\n"], "Description": ["该函数是一个求余函数，即是两个数值表达式作除法运算后的余数。返回结果的符号与被除数的符号相同。", "\n注意\n在用 REMAINDER (x,y) 和 MOD (x,y) 函数进行运算时，都用了一个公式 result=x-y*(x/y)，区别在于计算 x/y 时的处理方式不同。在 REMAINDER (x,y) 函数中，采用 ROUND(x/y)，而在 MOD (x,y) 函数中采用 FLOOR(x/y)。\n", "\n\n\n参数\n说明\n\n\n\n\nx\n表示被除数，属于数值型（NUMBER、FLOAT、BINARY_FLOAT 和 BINARY_DOUBLE）表达式。\n\n\ny\n表示除数，属于数值型（NUMBER、FLOAT、BINARY_FLOAT 和 BINARY_DOUBLE）表达式。\n\n\n", "返回类型与数值优先级高的参数的数据类型相同。"], "Examples": ["obclient> SELECT MOD(11,4),MOD(12,4),MOD(-11,4) FROM DUAL;\n+-----------+-----------+------------+\n| MOD(11,4) | MOD(12,4) | MOD(-11,4) |\n+-----------+-----------+------------+\n|         3 |         0 |         -3 |\n+-----------+-----------+------------+\n1 row in set\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823174"], "Title": ["NANVL"], "Feature": ["NANVL(n1,n2)\n"], "Description": ["该函数用于判断输入值参数 n1 是不是 NaN（表示非数字），并返回结果。", "如果 n1 是 NaN，则返回参数 n2。", "如果 n1 不是 NaN，则返回参数 n1。", "\n注意\n该函数仅适用于 BINARY_FLOAT 或 BINARY_DOUBLE 数据类型。\n", "\n\n\n参数\n说明\n\n\n\n\nn1\n属于数值数据类型（BINARY_FLOAT、BINARY_DOUBLE）或可以隐式转换为数值数据类型的表达式。\n\n\nn2\n属于数值数据类型（BINARY_FLOAT、BINARY_DOUBLE）或可以隐式转换为数值数据类型的表达式。\n\n\n", "如果有任意一个参数类型是 BINARY_DOUBLE，则返回 BINARY_DOUBLE 数据类型。", "如果有参数类型都是 BINARY_FLOAT，则返回 BINARY_FLOAT 数据类型。", "如果有任意一个参数为空，则返回 NULL。"], "Examples": ["obclient> CREATE TABLE tbl1 (col1 NUMBER(10,2), col2 BINARY_DOUBLE, col3 BINARY_FLOAT);\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO tbl1 VALUES(1,1,1),(2,'NaN',2),(3,3,'NaN');\nQuery OK, 3 rows affected\nRecords: 3  Duplicates: 0  Warnings: 0\n\nobclient> SELECT * FROM tbl1;\n+------+----------+----------+\n| COL1 | COL2     | COL3     |\n+------+----------+----------+\n|    1 | 1.0E+000 | 1.0E+000 |\n|    2 |      Nan | 2.0E+000 |\n|    3 | 3.0E+000 |      Nan |\n+------+----------+----------+\n3 rows in set\n\nobclient> SELECT col2,NANVL(col2,0) FROM tbl1;\n+----------+---------------+\n| COL2     | NANVL(COL2,0) |\n+----------+---------------+\n| 1.0E+000 |      1.0E+000 |\n|      Nan |             0 |\n| 3.0E+000 |      3.0E+000 |\n+----------+---------------+\n3 rows in set\n", "obclient> SELECT NANVL('',1),NANVL(2,'') FROM DUAL;\n+-------------+-------------+\n| NANVL('',1) | NANVL(2,'') |\n+-------------+-------------+\n|        NULL |        NULL |\n+-------------+-------------+\n1 row in set\n"], "Category": ["Numeric Functions", "NULL-Related Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823163"], "Title": ["ATAN"], "Feature": ["ATAN(number)\n"], "Description": ["该函数用于求反正切值。反正切值是指正切值为number 的角度，返回的角度以弧度表示，弧度值范围为 (-π/2，π/2)。", "number 是一个数值数据类型或可以隐式转换为数值数据类型的参数。", "返回 NUMBER 数据类型。"], "Examples": ["obclient> SELECT ATAN(0.5) FROM DUAL;\n+-------------------------------------------+\n| ATAN(0.5)                                 |\n+-------------------------------------------+\n| .4636476090008061162142562314612144020285 |\n+-------------------------------------------+\n1 row in set\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823170"], "Title": ["NORMAL"], "Feature": ["NORMAL(<mean> , <stddev> , <gen>)\n"], "Description": ["该函数返回一个符合正态分布（Normal Distribution，又称高斯分布）的浮点数。", "mean", " 表示均值，", "stddev", " 表示标准差。", "mean", " 和 ", "stddev", " 的取值必须是标量值，不随行迭代而变。例如，整形或浮点型常量、标量函数等。 \n    ", "\nmean 和 stddev 的取值可以是 1、2、ABS(-10)；PL 里还可以是 @v1、1+@v3 等。\nmean 和 stddev 的取值不可以是 RAND()、RANDOM()、RAND(2)、t1.c1、ABS(-t1.c1)、1+c2 等。\n", "mean", " 和 ", "stddev", " 的取值可以是 ", "1", "、", "2", "、", "ABS(-10)", "；PL 里还可以是 ", "@v1", "、", "1+@v3", " 等。", "mean", " 和 ", "stddev", " 的取值不可以是 ", "RAND()", "、", "RANDOM()", "、", "RAND(2)", "、", "t1.c1", "、", "ABS(-t1.c1)", "、", "1+c2", " 等。", "随机值生成算法基于 ", "std::normal_distribution", "，采用了 “Marsaglia Polar Method”算法，该算法会消耗较多 CPU。", "gen", " 是一个数值生成函数，通常使用 ", "RANDOM()", " 函数生成。如果传入值是一个常量，则 ", "NORMAL()", " 函数返回值也为一个定值。"], "Examples": ["obclient> SELECT v, COUNT(*) FROM (SELECT ROUND(NORMAL(3, 0.1, RANDOM()), 1) v FROM TABLE(GENERATOR(1000000))) x GROUP BY v ORDER BY v;\n+------+----------+\n| V    | COUNT(*) |\n+------+----------+\n|  2.5 |        4 |\n|  2.6 |      237 |\n|  2.7 |     6053 |\n|  2.8 |    60273 |\n|  2.9 |   241467 |\n|    3 |   383862 |\n|  3.1 |   241592 |\n|  3.2 |    60447 |\n|  3.3 |     5837 |\n|  3.4 |      224 |\n|  3.5 |        4 |\n+------+----------+\n11 rows in set\n", "obclient> SELECT COUNT(NORMAL(0, 1, RANDOM())) v FROM TABLE(GENERATOR(1000000));\n+---------+\n| V       |\n+---------+\n| 1000000 |\n+---------+\n1 row in set (1.49 sec)\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823148"], "Title": ["ATAN2"], "Feature": ["ATAN2(y,x)\n"], "Description": ["该函数返回 y 和 x 的反正切值，即返回的是原点至点 (x,y) 与 x 轴的夹角。返回值的单位是弧度，取值范围为 (-π，π]。", "\n\n\n参数\n说明\n\n\n\n\nx\n代表 x 轴坐标的值。\n\n\ny\n代表 y 轴坐标的值。\n\n\n", "\n说明\ny 和 x 取值是不同时为 0 的数值数据类型或可以隐式转换为数值数据类型的参数。\n", "如果任一参数的类型是 BINARY_FLOAT 或 BINARY_DOUBLE，则该函数返回 BINARY_DOUBLE。否则该函数返回 NUMBER 数据类型。"], "Examples": ["obclient> SELECT ATAN2(0,-1),ATAN2(0,1),ATAN2(1,0),ATAN2(-1,0) FROM DUAL;\n+-----------------------------------------+------------+-----------------------------------------+------------------------------------------+\n| ATAN2(0,-1)                             | ATAN2(0,1) | ATAN2(1,0)                              | ATAN2(-1,0)                              |\n+-----------------------------------------+------------+-----------------------------------------+------------------------------------------+\n| 3.1415926535897932384626433832795028842 |          0 | 1.5707963267948966192313216916397514421 | -1.5707963267948966192313216916397514421 |\n+-----------------------------------------+------------+-----------------------------------------+------------------------------------------+\n1 row in set\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823145"], "Title": ["POWER"], "Feature": ["POWER (x, y)\n"], "Description": ["该函数作用是返回指定数字的乘幂。", "\n\n\n参数\n说明\n\n\n\n\nx\n表示底数，属于数值类型（NUMBER、FLOAT、BINARY_FLOAT 和 BINARY_DOUBLE）表达式。\n\n\ny\n表示指数，属于数值类型（NUMBER、FLOAT、BINARY_FLOAT 和 BINARY_DOUBLE）表达式。如果 x 是负数，则 y 必须是整数。\n\n\n", "当参数为 BINARY_FLOAT 和 BINARY_DOUBLE 数据类型时，返回类型为 BINARY_DOUBLE，其他情况下返回类型为 NUMBER。"], "Examples": ["obclient> SELECT POWER(3,2),POWER(-3,3),POWER(4,-2) FROM DUAL;\n+------------+-------------+-------------+\n| POWER(3,2) | POWER(-3,3) | POWER(4,-2) |\n+------------+-------------+-------------+\n|          9 |         -27 |       .0625 |\n+------------+-------------+-------------+\n1 row in set\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823169"], "Title": ["RANDOM"], "Feature": ["RANDOM(seed)\n"], "Description": ["该函数生成一个 64 位的整数伪随机值。", "seed", " 为整数类型，不同 ", "seed", " 可以生成不同的随机数值序列。", "RANDOM()", " 使用了 MT19937 伪随机数生成算法，其随机空间非常大，生成 2", "19937", " - 1 个随机元素后才会重复生成相同序列。"], "Examples": ["obclient> SELECT RANDOM(4) FROM TABLE(GENERATOR(3));\n+---------------------+\n| RANDOM(4)           |\n+---------------------+\n| 5267436225003336391 |\n| -851690886662571060 |\n| 1738617244330437274 |\n+---------------------+\n3 rows in set\n", "obclient> SELECT UNIFORM(1, 100, RANDOM()) FROM TABLE(GENERATOR(4));\n+-------------------------+\n| UNIFORM(1,100,RANDOM()) |\n+-------------------------+\n|       73.61272325544115 |\n|       40.25665028115364 |\n|       66.83183914022183 |\n|       70.22767627040167 |\n+-------------------------+\n4 rows in set\n", "obclient> SELECT * FROM t1;\n+------+\n| c1   |\n+------+\n|    3 |\n|    4 |\n|    5 |\n|    1 |\n|    1 |\n+------+\n5 rows in set\n\nobclient> SELECT t1.c1, RANDOM(t1.c1) FROM TABLE(GENERATOR(1)), t1;\n+------+----------------------+\n| c1   | RANDOM(t1.c1)        |\n+------+----------------------+\n|    3 | 1084041170817055659  |\n|    4 | 5267436225003336391  |\n|    5 | 192483991702052534   |\n|    1 | -6753783847308464280 |\n|    1 | -6753783847308464280 |\n+------+----------------------+\n5 rows in set\n"], "Category": ["Numeric Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823153"], "Title": ["RANDSTR"], "Feature": ["RANDSTR(N, gen)\n"], "Description": ["该函数按照指定长度生成一个随机字符串，字符串中的字符包含 A-Z、a-z 和 0-9。", "N 为生成的随机字符串长度：", "\n当 N < 0 时，返回 NULL。\n当 N = 0 时，返回空字符串。\n当 N > 0 并且 N <= max_allowed_packet 时，返回长度为 N 的随机字符串。\n当 N > max_allowed_packet 时，返回 NULL。其中 max_allowed_packet 为系统变量，默认值为 16777216。\n", "当 ", "N < 0", " 时，返回 ", "NULL", "。", "当 ", "N = 0", " 时，返回空字符串。", "当 ", "N > 0", " 并且 ", "N <= max_allowed_packet", " 时，返回长度为 N 的随机字符串。", "当 ", "N > max_allowed_packet", " 时，返回 ", "NULL", "。其中 ", "max_allowed_packet", " 为系统变量，默认值为 16777216。", "gen 为分布函数，可取值如下：", "\n常量，则每次调用 RANDSTR() 都会生成相同的随机串。\n返回整数值的随机函数，例如 RANDOM()。\n分布函数，例如均匀分布、zipf 分布、高斯分布等。\n", "常量，则每次调用 ", "RANDSTR()", " 都会生成相同的随机串。", "返回整数值的随机函数，例如 ", "RANDOM()", "。", "分布函数，例如均匀分布、zipf 分布、高斯分布等。", "随机串的生成算法：采用 LCG 算法生成 N 个随机值，据此选出 N 个字符组成随机串。所以当 N 很大时会消耗较多 CPU。例如下面生成了一个长度为 300 M 的随机串，耗时 1.7 秒。", "obclient> SELECT LENGTH(RANDSTR(300000000, 1)) FROM DUAL;;\n+------------------------------+\n| LENGTH(RANDSTR(300000000,1)) |\n+------------------------------+\n|                    300000000 |\n+------------------------------+\n1 row in set (1.73 sec)\n"], "Examples": ["obclient> SELECT RANDSTR(10, RANDOM()) FROM TABLE(GENERATOR(7));\n+-----------------------+\n| randstr(10, random()) |\n+-----------------------+\n| TGfdBAZ1BP            |\n| VvMbD2bChR            |\n| VNSB6MpgQw            |\n| 3QWYQYQVJ4            |\n| CpyE58jM0o            |\n| vBvsJBGGmX            |\n| rg3Pkde0UJ            |\n+-----------------------+\n7 rows in set\n", "obclient> SELECT RANDSTR(5, 40) FROM DUAL;\n+----------------+\n| RANDSTR(5, 40) |\n+----------------+\n| UU3g0          |\n+----------------+\n1 row in set\n\nobclient> SELECT RANDSTR(1, 40) FROM DUAL;\n+----------------+\n| RANDSTR(1, 40) |\n+----------------+\n| U              |\n+----------------+\n1 row in set\n\nobclient> SELECT RANDSTR(0, 40) FROM DUAL;\n+----------------+\n| RANDSTR(0, 40) |\n+----------------+\n|                |\n+----------------+\n1 row in set\n\nobclient> SELECT RANDSTR(-1, 40) FROM DUAL;\n+-----------------+\n| RANDSTR(-1, 40) |\n+-----------------+\n| NULL            |\n+-----------------+\n1 row in set\n", "obclient> SELECT RANDSTR(10, 1442) FROM TABLE(GENERATOR(7));\n+-------------------+\n| RANDSTR(10, 1442) |\n+-------------------+\n| 4dTm5bOtGc        |\n| 4dTm5bOtGc        |\n| 4dTm5bOtGc        |\n| 4dTm5bOtGc        |\n| 4dTm5bOtGc        |\n| 4dTm5bOtGc        |\n| 4dTm5bOtGc        |\n+-------------------+\n7 rows in set\n\nobclient> SELECT RANDSTR(10, 1442) FROM TABLE(GENERATOR(7));\n+-------------------+\n| RANDSTR(10, 1442) |\n+-------------------+\n| 4dTm5bOtGc        |\n| 4dTm5bOtGc        |\n| 4dTm5bOtGc        |\n| 4dTm5bOtGc        |\n| 4dTm5bOtGc        |\n| 4dTm5bOtGc        |\n| 4dTm5bOtGc        |\n+-------------------+\n7 rows in set\n"], "Category": ["Numeric Functions"]}
