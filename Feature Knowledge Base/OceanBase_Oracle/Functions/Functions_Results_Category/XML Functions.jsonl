{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823516"], "Title": ["UPDATEXML"], "Feature": ["UPDATEXML\n      (XMLType_instance,\n        XPath_string, value_expr\n          [, XPath_string, value_expr ]...\n        [, namespace_string ]\n      )\n"], "Description": ["该函数用于修改更新 XMLType 数据的表达式，通过指定一个或者多个 XPath 和 Value 值对，将所输入的原 XMLType 数据的表达式按照指定的顺序将 XPath 查找到的节点更新成 value_expr 指定的更新值。", "\n\n\n字段\n说明\n\n\n\n\nXMLType_instance\n指定 XMLType 类型的数据，可以是 XMLType 列或者返回类型为 XMLType 的表达式。\n\n\nXPath_string\n通过 XPath 指定需要更新的 XML 内容。\n\n\nvalue_expr\n指定更新值，数据类型可以是 XMLType 类型数据、标量类型（例如 CHAR/VARCHAR2）、CLOB 和 NULL。\n\n\nnamespace_string\n指定 XML 命名空间。\n\n\n"], "Examples": ["obclient> SELECT UPDATEXML(XMLPARSE(CONTENT '<root><a>aaa</a></root>'), '/root/a/text()', 'bbb') RES FROM DUAL;\n+------------------------------+\n| RES                          |\n+------------------------------+\n| <root>\n  <a>bbb</a>\n</root>\n |\n+------------------------------+\n1 row in set\n\nobclient> SELECT UPDATEXML(XMLPARSE(CONTENT '<root><a>aaa</a></root>'), '/root/a/text()', NULL) RES FROM DUAL;\n+------------------------+\n| RES                    |\n+------------------------+\n| <root>\n  <a/>\n</root>\n |\n+------------------------+\n1 row in set\n\nobclient> SELECT UPDATEXML(XMLPARSE(CONTENT '<root><a>aaa</a></root>'), '/root/a/text()', XMLPARSE(content '<a>bbb</a>')) RES FROM DUAL;\n+---------------------------------------------+\n| RES                                         |\n+---------------------------------------------+\n| <root>\n  <a>\n    <a>bbb</a>\n  </a>\n</root>\n |\n+---------------------------------------------+\n1 row in set\n\nobclient> SELECT UPDATEXML(XMLPARSE(CONTENT '<root a1=\"aaa\"><a>aaa</a></root>'), '/root/@a1', 'bbb') RES FROM DUAL;\n+---------------------------------------+\n| RES                                   |\n+---------------------------------------+\n| <root a1=\"bbb\">\n  <a>aaa</a>\n</root>\n |\n+---------------------------------------+\n1 row in set\n\nobclient> SELECT UPDATEXML(XMLPARSE(CONTENT '<root a1=\"aaa\"><a>aaa</a></root>'), '/root/@a1', NULL) RES FROM DUAL;\n+------------------------------------+\n| RES                                |\n+------------------------------------+\n| <root a1=\"\">\n  <a>aaa</a>\n</root>\n |\n+------------------------------------+\n1 row in set\n\nobclient> SELECT UPDATEXML(XMLPARSE(CONTENT '<root a1=\"aaa\"><a>aaa</a></root>'), '/root/@a1', XMLPARSE(CONTENT '<a>a1</a>')) RES FROM DUAL;\n+------------------------------------------+\n| RES                                      |\n+------------------------------------------+\n| <root>\n  <a>a1</a>\n  <a>aaa</a>\n</root>\n |\n+------------------------------------------+\n1 row in set\n\nobclient> SELECT UPDATEXML(XMLPARSE(CONTENT '<root><a>aaa</a></root>'), '/root/a', 'bbb') RES FROM DUAL;\n+-------------------+\n| RES               |\n+-------------------+\n| <root>bbb</root>\n |\n+-------------------+\n1 row in set\n\nobclient> SELECT UPDATEXML(XMLPARSE(CONTENT '<a a1=\"a1\" xmlns:f=\"ns1\" xmlns=\"ns2\"><c/>cccc</a>'), '/a', NULL, 'xmlns=\"ns2\"') RES FROM DUAL;\n+-------------------+\n| RES               |\n+-------------------+\n| <a xmlns=\"ns2\"/>\n |\n+-------------------+\n1 row in set (0.01 sec)\n\nobclient> SELECT UPDATEXML(XMLPARSE(CONTENT '<root><a>aaa</a></root>'), '/root/a', xmltype('<b>bbb</b>')) RES FROM DUAL;\n+------------------------------+\n| RES                          |\n+------------------------------+\n| <root>\n  <b>bbb</b>\n</root>\n |\n+------------------------------+\n1 row in set\n"], "Category": ["XML Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823505"], "Title": ["XMLAGG"], "Feature": ["XMLAGG(XMLType_instance [ ORDER BY [list of: expr [ASC|DESC] [NULLS {FIRST|LAST}]] ])\n"], "Description": ["该函数获取一组 XML 片段并返回一个聚合的 XML 文档。可以将其用作聚合函数。", "\n\n\n字段\n说明\n\n\n\n\nXMLType_instance\n指定 XMLType 类型的数据，可以是 XMLType 列或者返回类型为 XMLType 的表达式。\n\n\nexpr\n指定要排序的值对应的列名。注意 数字类型不能作为列的位置信息，例如 ORDER BY 1 并不是按照第一列排序的意思。\n\n\nASC | DESC\n指定列表的排序方式，为可选项。 \n      \nASC 为升序排序，为默认值。\nDESC 为降序排序。\n\n\n\nNULLS {FIRST | LAST}\n排序后 expr 中 NULL 值的位置，为可选项。 \n      \nNULLS FIRST： 表示 NULL 值排在非空值的前面。\nNULLS LAST ：表示 NULL 值排在非空值的后面，为默认值。\n\n\n\n", "返回 XMLType 数据类型。"], "Examples": ["# 现有已创建表 employees\nobclient> SELECT * FROM EMPLOYEES;\n+------+-----------+------+\n| ID   | LAST_NAME | SAL  |\n+------+-----------+------+\n|    1 | CLARK     | 2750 |\n|    2 | KING      | 5300 |\n|    3 | MILLER    | 1600 |\n|    4 | ADAMS     | 1400 |\n+------+-----------+------+\n4 rows in set\n\n# 使用 XMLELEMENT 函数构建 XML 片段\nobclient> SELECT XMLELEMENT(EVALNAME LAST_NAME, SAL) AS \"RESULT\" FROM EMPLOYEES;\n+------------------------+\n| RESULT                 |\n+------------------------+\n| <CLARK>2750</CLARK>\n   |\n| <KING>5300</KING>\n     |\n| <MILLER>1600</MILLER>\n |\n| <ADAMS>1400</ADAMS>\n   |\n+------------------------+\n4 rows in set\n\n#使用 XMLAGG 将上述结果按照 SAL 顺序排序并聚合返回\nobclient> SELECT XMLAGG(XMLELEMENT(EVALNAME LAST_NAME, SAL) ORDER BY SAL) AS \"RESULT\" FROM EMPLOYEES;\n+----------------------------------------------------------------------------------+\n| RESULT                                                                           |\n+----------------------------------------------------------------------------------+\n| <ADAMS>1400</ADAMS>\n<MILLER>1600</MILLER>\n<CLARK>2750</CLARK>\n<KING>5300</KING>\n |\n+----------------------------------------------------------------------------------+\n1 row in set\n"], "Category": ["XML Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823507"], "Title": ["XMLATTRIBUTES"], "Feature": ["XMLATTRIBUTES\n  ( [ ENTITYESCAPING | NOENTITYESCAPING ]\n    [ SCHEMACHECK | NOSCHEMACHECK ]\n    value_expr [ { AS c_alias } | { AS EVALNAME value_expr } ]\n      [, value_expr [ { AS c_alias } | { AS EVALNAME value_expr } ] ]...\n  )\n"], "Description": ["XMLATTRIBUTES 为 XMLELEMENT 的子表达式，用于指定 XML 元素中的属性集合。", "\n\n\n字段\n说明\n\n\n\n\nENTITYESCAPING|NOENTITYESCAPING\n可选项，是否需要强制转译，不指定则默认强制转译（ENTITYESCAPING）。\n\n\nSCHEMACHECK|NOSCHEMACHECK\n可选项，是否执行运行时的检查，不指定则默认不执行（NOSCHEMACHECK），目前不支持执行运行时检查。\n\n\nvalue_expr\n指定计算结果为字符串文字生成的属性值。\n\n\nc_alias\n指定生成的属性名，为字符串类型。\n\n\nEVALNAME\n指定该关键字表示后跟计算结果为字符串文字的表达式。\n\n\n", "XMLATTRIBUTES 作为 XMLELEMENT 子句，无法单独使用，无返回类型。"], "Examples": ["# 创建表 t1，并插入一条数据。\nobclient> CREATE TABLE t1(col1 varchar(10));\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO t1 VALUES('a');\nQuery OK, 1 row affected\n\n# 生成一个名为 key 的属性，属性内容为 col1。\nobclient> SELECT XMLELEMENT(emp, XMLATTRIBUTES(col1 as \"key\")) FROM t1;\n+--------------------------------------------+\n| XMLELEMENT(EMP,XMLATTRIBUTES(COL1AS\"KEY\")) |\n+--------------------------------------------+\n| <EMP key=\"a\"/>\n                            |\n+--------------------------------------------+\n1 row in set\n"], "Category": ["XML Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823512"], "Title": ["XMLCAST"], "Feature": ["XMLCAST ( value_expression AS datatype )\n"], "Description": ["该函数用于抽取 XML 文档的内容（不包括元素名称），并将其转换为 CHAR、VARCHAR、VARCHAR2、NUMBER、FLOAT、BLOB 或 CLOB 及任何日期时间数据类型。", "\n\n\n字段\n说明\n\n\n\n\nvalue_expression\n指定解析的内容必须为一个有效的 XML 片段。\n\n\nAS datatype\n指定返回的类型，可以为 CHAR、VARCHAR、VARCHAR2、NUMBER、FLOAT、BLOB 或 CLOB 及任何日期时间数据类型。\n\n\n", "返回 CHAR、VARCHAR、VARCHAR2、NUMBER、FLOAT、BLOB 或 CLOB 及任何日期时间数据类型。"], "Examples": ["# 转换为 CHAR\nobclient> SELECT XMLCAST(XMLPARSE(DOCUMENT '<?xml version=\"1.0\"?><a>a</a>') AS CHAR) FROM DUAL;\n+-----------------------------------------------------------------+\n| XMLCAST(XMLPARSE(DOCUMENT'<?XMLVERSION=\"1.0\"?><A>A</A>')ASCHAR) |\n+-----------------------------------------------------------------+\n| a                                                               |\n+-----------------------------------------------------------------+\n1 row in set\n\n# 转换为 VARCHAR2\nobclient> SELECT XMLCAST(XMLPARSE(DOCUMENT '<?xml version=\"1.0\"?><a>aaaaaa</a>') AS VARCHAR2(5)) FROM DUAL;\n+-----------------------------------------------------------------------------+\n| XMLCAST(XMLPARSE(DOCUMENT'<?XMLVERSION=\"1.0\"?><A>AAAAAA</A>')ASVARCHAR2(5)) |\n+-----------------------------------------------------------------------------+\n| aaaaa                                                                       |\n+-----------------------------------------------------------------------------+\n1 row in set\n\n# 转换为 BLOB\nobclient> SELECT XMLCAST(XMLPARSE(DOCUMENT '<?xml version=\"1.0\"?><root><a>1</a><b>23f</b></root>') AS BLOB) FROM DUAL;\n+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| XMLCAST(XMLPARSE(DOCUMENT'<?XMLVERSION=\"1.0\"?><ROOT><A>1</A><B>23F</B></ROOT>')ASBLOB)                                                                                       |\n+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| 123F                                                                                                                                                                         |\n+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n1 row in set\n\n# 转换为 CLOB\nobclient> SELECT XMLCAST(XMLPARSE(DOCUMENT '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <note>\n    <to>To</to>\n    <FROM>Jani</FROM>\n    <heading>Reminder</heading>\n    <body>Do not forget me this weekend!</body>\n    </note>') AS CLOB) RES FROM DUAL;\n+----------------------------------------------+\n| RES                                          |\n+----------------------------------------------+\n| ToJaniReminderDo not forget me this weekend! |\n+----------------------------------------------+\n1 row in set\n\n# 转换为 NUMBER\nobclient> SELECT XMLCAST(XMLPARSE(CONTENT '<a>123.01</a>') AS NUMBER) FROM DUAL;\n+---------------------------------------------------+\n| XMLCAST(XMLPARSE(CONTENT'<A>123.01</A>')ASNUMBER) |\n+---------------------------------------------------+\n|                                            123.01 |\n+---------------------------------------------------+\n1 row in set\n\n# 转换为 FLOAT\nobclient> SELECT XMLCAST(XMLPARSE(CONTENT '<a>123.01</a>') AS FLOAT) FROM DUAL;\n+--------------------------------------------------+\n| XMLCAST(XMLPARSE(CONTENT'<A>123.01</A>')ASFLOAT) |\n+--------------------------------------------------+\n|                                           123.01 |\n+--------------------------------------------------+\n1 row in set\n\n# 转换为 DECIMAL\nobclient> SELECT XMLCAST(XMLPARSE(CONTENT '<a>123.01</a>') AS DECIMAL) FROM DUAL;\n+----------------------------------------------------+\n| XMLCAST(XMLPARSE(CONTENT'<A>123.01</A>')ASDECIMAL) |\n+----------------------------------------------------+\n|                                                123 |\n+----------------------------------------------------+\n1 row in set\n\n# 转换为 TIMESTAMP\nobclient> SELECT XMLCAST(XMLPARSE(CONTENT '<a>2023-04-01 15:13:00</a>') AS TIMESTAMP) AS RES FROM DUAL;\n+----------------------------+\n| RES                        |\n+----------------------------+\n| 2023-04-01 15:13:00.000000 |\n+----------------------------+\n1 row in set\n\n# 转换为 DATE\nobclient> SELECT XMLCAST(XMLPARSE(CONTENT '<a>2023-04-01 15:13:00</a>') AS DATE) AS RES FROM DUAL;\n+---------------------+\n| RES                 |\n+---------------------+\n| 2023-04-01 15:13:00 |\n+---------------------+\n1 row in set\n\n# 转换为 INTERVAL YEAR TO MONTH\nobclient> SELECT XMLCAST(XMLPARSE(CONTENT '<a>12-3</a>') AS INTERVAL YEAR(3) TO MONTH) AS RES FROM DUAL;\n+---------+\n| RES     |\n+---------+\n| +012-03 |\n+---------+\n1 row in set\n\n# 转换为 INTERVAL DAY TO SECOND\nobclient> SELECT XMLCAST(XMLPARSE(CONTENT '<a>140 5:12:10.2222222</a>') AS INTERVAL DAY(3) TO SECOND(7)) AS RES FROM DUAL;\n+-----------------------+\n| RES                   |\n+-----------------------+\n| +140 05:12:10.2222222 |\n+-----------------------+\n1 row in set\n\n"], "Category": ["XML Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823506"], "Title": ["XMLELEMENT"], "Feature": ["XMLELEMENT ( [ ENTITYESCAPING | NOENTITYESCAPING ]\n   { ( [ NAME ] identifier ) | ( EVALNAME value_expr ) }\n   [ , XML_attributes_clause ]\n   [ , value_expr [ [ AS ] c_alias ]]...\n )\n"], "Description": ["该函数生成具有指定名称、属性和内容的 XML 元素。", "\n\n\n字段\n说明\n\n\n\n\nENTITYESCAPING | NOENTITYESCAPING\n可选项，指定元素的名字和内容是否需要强制转译的关键字。建议直接使用表达式默认的行为ENTITYESCAPING。\n\n\nNAME\n指定根元素名称为文字标识符的关键字，NAME 表示其后面的值就是标识符，为可选项。\n\n\nEVALNAME\n指定根元素名称是计算结果为字符串的关键字。EVALNAME 表示其后面的值需要经过计算获取结果。\n\n\nidentifier\n指定字符串类型的标签名。\n\n\nvalue_expr\n元素值表达式。该参数可以是其他元素也可以是文本。如果是其他元素，可以是 XMLType 列或者 XMLELEMENT、XMLAGG 等生成 XMLType 的表达式。\n\n\nXML_attributes_clause\n可选项，指定元素属性的表达式，具体信息参见 XMLATTRIBUTES。\n\n\nc_alias\n指定内容别名的字符串类型。\n\n\n", "返回 XMLType 数据类型。"], "Examples": ["obclient> SELECT XMLELEMENT(NAME \"Emp\", 'value') FROM DUAL;\n+-------------------------------+\n| XMLELEMENT(NAME\"EMP\",'VALUE') |\n+-------------------------------+\n| <Emp>value</Emp>\n             |\n+-------------------------------+\n1 row in set\n"], "Category": ["XML Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823504"], "Title": ["XMLPARSE"], "Feature": ["XMLPARSE\n({ DOCUMENT | CONTENT } value_expr [ WELLFORMED ])\n"], "Description": ["该函数解析输入的字符串并生成 XMLType 数据类型。", "\n\n\n字段\n说明\n\n\n\n\nDOCUMENT\n指定解析的内容必须为一个单根节点的 XML 文档。DOCUMENT 可以带声明头也可以不带。\n\n\nCONTENT\n指定解析的内容必须为一个有效的 XML 片段。CONTENT 一定不带声明头，否则会报错。\n\n\nvalue_expr\n指定被解析的字符串。结果的字符类型可以为 CHAR、VARCHAR2、NCHAR、NVARCHAR2 或 CLOB。\n\n\n注意：如果 value_expr 计算结果为 NULL，函数也会返回 NULL。\n\n\nWELLFORMED\n如果标记 WELLFORMED，将不执行解析内容的有效性检查，为可选项。\n\n\n", "返回 XMLType 数据类型。"], "Examples": ["# 解析一个有效的 XML 片段 'abc'\nobclient> SELECT XMLPARSE(CONTENT '<a>abc</a>') FROM DUAL;\n+-------------------------------+\n| XMLPARSE(CONTENT'<A>ABC</A>') |\n+-------------------------------+\n| <a>abc</a>\n                   |\n+-------------------------------+\n1 row in set\n\n# 解析 XML DOCUMENT\nobclient> SELECT XMLPARSE(DOCUMENT '<?xml version=\"1.0\" encoding=\"UTF-8\" ?><body>135 <purchaseOrder poNo=\"12435\">\n         <customerName>  Enterprises</customerName>\n         <itemNo>123456</itemNo>\n         </purchaseOrder></body>'\n        WELLFORMED) AS PRO FROM DUAL;\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| PRO                                                                                                                                                                                   |\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<body>135 <purchaseOrder poNo=\"12435\">\n    <customerName>  Enterprises</customerName>\n    <itemNo>123456</itemNo>\n  </purchaseOrder>\n</body>\n |\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n1 row in set\n"], "Category": ["XML Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823511"], "Title": ["XMLSEQUENCE"], "Feature": ["XMLSEQUENCE( XMLType_instance)\n"], "Description": ["该函数用于将 XML 文档内容转换为一个包含 XML 元素的 VARRAY。它将 XML 文档中的每个元素作为行返回，从而形成了一个包含 XML 元素的集合。", "\n\n\n字段\n说明\n\n\n\n\nXMLType_instance\n此参数为 XML 类型的实例，作为函数的输入。\n\n\n", "返回一个 XMLType 集合。"], "Examples": ["SELECT rownum, column_value\nFROM TABLE(\n    XMLSEQUENCE(\n        extract(\n            XMLtype('<Videogame>\n                <Type>Racing</Type>\n                <Name>NFS Most Wanted</Name>\n                <Version>2.0</Version>\n                <Size>5.5 GB</Size>\n            </Videogame>'),\n            '/Videogame/*'\n        )\n    )\n);\n", "+--------+-------------------------------+\n| ROWNUM | COLUMN_VALUE                  |\n+--------+-------------------------------+\n|      1 | <Type>Racing</Type>           |\n|      2 | <Name>NFS Most Wanted</Name>  |\n|      3 | <Version>2.0</Version>        |\n|      4 | <Size>5.5 GB</Size>           |\n+--------+-------------------------------+\n4 rows in set\n"], "Category": ["XML Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823510"], "Title": ["XMLSERIALIZE"], "Feature": ["XMLSERIALIZE\n  ( { DOCUMENT | CONTENT } value_expr [ AS datatype ]\n    [ ENCODING xml_encoding_spec ]\n    [ VERSION string_literal ]\n    [ NO INDENT | { INDENT [SIZE = number] } ]\n    [ { HIDE | SHOW } DEFAULTS ]\n  )\n"], "Description": ["该函数将 XMLType 数据序列化为 VARCHAR、VARCHAR2、CLOB 或者 BLOB 类型，可通过参数进行格式化。", "\n\n\n字段\n说明\n\n\n\n\nDOCUMENT\n指定解析的内容，需符合 XML Document 规范。\n\n\nCONTENT\n指定解析的内容必须为一个有效的 XML 片段，但不一定合法。\n\n\nAS datatype\n指定返回的类型，可以定义为 VARCHAR、VARCHAR2、BLOB 或 CLOB，默认为 CLOB。如果返回类型是 BLOB，可以指定ENCODING。\n\n\nENCODING\n使用指定的编码。\n\n\nVERSION\n指定版本。\n\n\nNO INDENT ELEMENT\n指定层级之间不换行，不缩进。\n\n\nINDENT SIZE\n设置缩进空格数量。如果设置为 0，表示 ELEMENT 层级之间只换行，不缩进，默认值为 2。\n\n\nHIDE | SHOW DEFAULTS\n是否显示 XML Schema 所定义的默认值。\n\n\n", "返回 VARCHAR、VARCHAR2、CLOB 或者 BLOB 数据类型。"], "Examples": ["obclient> SELECT XMLSERIALIZE(CONTENT XMLPARSE(CONTENT 'aaa' WELLFORMED) AS varchar2(100) VERSION '1.0') AS RES FROM DUAL;\n+---------------------------+\n| RES                       |\n+---------------------------+\n| <?xml version=\"1.0\"?>\naaa |\n+---------------------------+\n1 row in set\n\nobclient> SELECT XMLSERIALIZE(DOCUMENT XMLPARSE(DOCUMENT '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<note>\n<to>Tove</to>\n<FROM>Jani</FROM>\n<heading>Reminder</heading>\n<body><p>Do not forget me this weekend!</p></body>\n</note>') AS varchar2(200) NO INDENT) AS RES FROM DUAL;\n+----------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| RES                                                                                                                                                            |\n+----------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| <?xml version=\"1.0\" encoding=\"UTF-8\"?><note><to>Tove</to><FROM>Jani</FROM><heading>Reminder</heading><body><p>Do not forget me this weekend!</p></body></note> |\n+----------------------------------------------------------------------------------------------------------------------------------------------------------------+\n1 row in set\n\nobclient> SELECT XMLSERIALIZE(DOCUMENT XMLPARSE(DOCUMENT '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<note>\n<to>Tove</to>\n<FROM>Jani</FROM>\n<heading>Reminder</heading>\n<body><p>Do not forget me this weekend!</p></body>\n</note>') AS varchar2(200)) AS RES FROM DUAL;\n+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| RES                                                                                                                                                                                   |\n+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<note>\n  <to>Tove</to>\n  <FROM>Jani</FROM>\n  <heading>Reminder</heading>\n  <body>\n    <p>Do not forget me this weekend!</p>\n  </body>\n</note>\n |\n+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n1 row in set\n"], "Category": ["XML Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823513"], "Title": ["XMLTABLE"], "Feature": ["XMLTABLE( [ XMLnamespaces_clause , ] XQuery_string XMLTABLE_options )\n\nXMLnamespaces_clause：\n XMLNAMESPACES( { string AS identifier } | { DEFAULT string } [, { string AS identifier } | { DEFAULT string } ]...)\n\nXMLTABLE_options：\n  [ XML_passing_clause ]\n  [ COLUMNS XML_table_column [, XML_table_column]...]\n\nXML_passing_clause：\n  PASSING [ BY VALUE ] expr [ AS identifier ]\n\nXML_table_column：\n  column { FOR ORDINALITY \n          | { datatype | XMLTYPE } [ PATH string ] [ DEFAULT expr ]\n  }\n"], "Description": ["该函数用于将 Xpath 返回的结果映射到关系表的行和列中。您可以使用 SQL 查询函数返回的结果作为虚拟关系表。", "XMLTABLE 功能的关键能力包括：", "数据提取能力：通过在 XMLTABLE 中指定适当的 XPath 表达式，可以精准地从复杂的 XML 文档中提取所需的数据部分。", "数据结构化：XMLTABLE 能够将 XML 数据的特定部分映射到关系型表的行和列上，从而将半结构化的 XML 数据转换成结构化的表格形式，使其易于进行 SQL 查询和分析。", "表格转换：你可以利用 XMLTABLE 产生的结构化数据建立虚拟表，并且可以将这些表数据用于生成新的表格或视图，从而在数据库中保存或进一步操作这些处理过的数据。", "\n\n\n字段\n说明\n\n\n\n\nXMLnamespaces_clause\n定义命名空间前缀和 URI，用于在 XML 查询中引用具有命名空间的元素和属性。该子句包含一组 XML 命名空间声明，这些声明被 XML_table_column 的 PATH 子句中的 XPath 表达式引用，该表达式计算整个 XMLTable 函数的列。如果您想在 COLUMNS 子句的 PATH 表达式中使用限定名称，则需要指定该子句。\n\n\nXQuery_string\n指定 XQuery 表达式，用于从 XML 数据中选择需要转换的数据。XQuery 是一种 XML 查询语言，用于从 XML 文档中提取数据和实现复杂的查询操作，这个参数允许你使用 XQuery 语法来定义从 XML 数据中提取哪些元素或属性的指令。 \n      \n注意\nOceanBase 数据库当前版本暂不支持 XQuery。\n\n\n\nXML_passing_clause\n通过 PASSING 关键字指定传递给 XQuery 的 XML 数据。可以指定按值传递以及传递数据的别名。具体如下： \n      \nPASSING: 用来带出 XML_passing_clause 的开始。PASSING 子句的内容是 XMLTABLE 的输入。\nBY VALUE: 可选关键字，表示传递的数据将按值传递，而不是按引用传递。在大多数情况下，可以省略这个选项，因为按值传递是默认的行为。\nexpr: 是一个返回 XMLType 或 SQL 标量数据类型实例的表达式，其结果是要传递给 XQuery 的 XML 数据。这个表达式通常是一个返回 XML 类型数据的列名、变量或者更复杂的表达式。PASSING 子句当前在当前版本仅支持指定一个 expr。\nAS identifier: 可选项，它为 expr 参数结果指定一个别名（即标识符）。在 XQuery 表达式中，可以使用这个别名来引用传递的数据。\n\n\n\nCOLUMNS\n可选的 COLUMNS 子句定义了由 XMLTable 创建的虚拟表的列。 如果您省略 COLUMNS 子句，则 XMLTable 返回一个带有名为 COLUMN_VALUE 的单个 XMLType 伪列的行。\n\n\nXML_table_column\n定义要生成的表列，可以是普通数据类型列或 XMLTYPE 列。还可以指定列值的 XPath 路径和默认值。FOR ORDINALITY 用于生成行号。具体如下： \n      \nFOR ORDINALITY：指定该列将是生成的行号列。最多只能有一个 FOR ORDINALITY 子句。它被创建为一个 NUMBER 列。\ndatatype 或 XMLTYPE：除了 FOR ORDINALITY 列之外，对于每个结果列，您必须指定列的数据类型，可以是 XMLType 或任何其他数据类型。如果列的数据类型是 XMLType，则需要指定 XMLTYPE 子句。 通过引用返回 XMLType 数据可以让您指定其他列，其路径定位的节点在源数据中位于列的 PATH 表达式所定位的节点之外。如果列的数据类型是任何其他数据类型，则需要指定数据类型。 \n        \nPATH string：可选项，指定由 XQuery 表达式字符串处理的 XQuery 结果的部分将用作列内容。如果省略 PATH，则假定为 XQuery 表达式列。例如：XMLTable(... COLUMNS xyz)。\nDEFAULT expr：可选项，指定在 PATH 表达式结果为空序列时要使用的值。其 expr 是一个 XQuery 表达式，用于生成默认值。\n\n\n\n\n", "返回的数据类型取决于 XMLTable 函数中指定的列的数据类型。"], "Examples": ["SELECT *\nFROM XMLTABLE(\n       XMLNAMESPACES(DEFAULT 'http://www.example.com/employees'),\n       '/employees/employee'\n       PASSING XMLTYPE('\n          <employees xmlns=\"http://www.example.com/employees\">\n               <employee>\n                    <emp_id>1</emp_id>\n                    <name>John Doe</name>\n                    <position>Developer</position>\n                    <salary>5000</salary>\n               </employee>\n               <employee>\n                    <emp_id>2</emp_id>\n                    <name>Jane Smith</name>\n                    <position>Manager</position>\n                    <salary>6500</salary>\n               </employee>\n          </employees>'\n     )\n     COLUMNS\n          employee_id    INT           PATH 'emp_id',\n          employee_name  VARCHAR2(100) PATH 'name',\n          position       VARCHAR2(50)  PATH 'position',\n          salary         NUMBER        PATH 'salary'\n) AS emp_tab;\n", "+-------------+---------------+-----------+--------+\n| EMPLOYEE_ID | EMPLOYEE_NAME | POSITION  | SALARY |\n+-------------+---------------+-----------+--------+\n|           1 | John Doe      | Developer |   5000 |\n|           2 | Jane Smith    | Manager   |   6500 |\n+-------------+---------------+-----------+--------+\n2 rows in set\n"], "Category": ["XML Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823514"], "Title": ["DELETEXML"], "Feature": ["DELETEXML( XMLType_instance, XPath_string [, namespace_string ])\n"], "Description": ["该函数用于删除 XPath 表达式在 XML 中匹配的一个或多个节点。", "\n\n\n字段\n说明\n\n\n\n\nXMLType_instance\n指定一个 XMLType 实例，表示目标 XML 文档。\n\n\nXPath_string\n指定一个 XPath 表达式，指示要删除的一个或多个节点。可以使用绝对路径（以斜杠开头）或相对路径（省略初始斜杠）。如果省略初始斜杠，则相对路径的上下文默认为根节点。XPath_string 指定的节点的所有子节点也将被删除。\n\n\nnamespace_string\n可选项，用于为 XPath_string 提供命名空间信息。\n\n\n", "返回 XMLType 数据类型。"], "Examples": ["SELECT DELETEXML(\n        XMLtype('<bookstore>\n                  <book att=\"old\"></book>\n                  <author>carrot</author>\n                </bookstore>'),\n        '/bookstore/author'\n      ) AS result\nFROM dual;\n", "+-----------------------------------------------+\n| RESULT                                        |\n+-----------------------------------------------+\n| <bookstore>\n  <book att=\"old\"/>\n</bookstore>\n|\n+-----------------------------------------------+\n1 row in set\n", "SELECT\n  DELETEXML(\n    xmltype(\n      '<a xmlns=\"ns1\" xmlns:f=\"ns2\">\n        <f:b b1=\"b1\" b2=\"b2\">bbb1</f:b>\n        <b b1=\"b1\" b2=\"b2\">bbb2</b>\n      </a>'\n    ),\n    '/a/*',\n    'xmlns=\"ns1\"'\n  )\nFROM dual;\n", "+----------------------------------------------------------------------------------------------------------------------------------+\n| DELETEXML(XMLTYPE('<AXMLNS=\"NS1\"XMLNS:F=\"NS2\"><F:BB1=\"B1\"B2=\"B2\">BBB1</F:B><BB1=\"B1\"B2=\"B2\">BBB2</B></A>'),'/A/*','XMLNS=\"NS1\"') |\n+----------------------------------------------------------------------------------------------------------------------------------+\n| <a xmlns=\"ns1\" xmlns:f=\"ns2\"/>\n                                                                                                  |\n+----------------------------------------------------------------------------------------------------------------------------------+\n1 row in set\n"], "Category": ["XML Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823508"], "Title": ["EXTRACT"], "Feature": ["EXTRACT(XMLType_instance, XPath_string [, namespace_string ])\n"], "Description": ["该函数依据 Xpath 抽取一个 XML 片段，其结果是 Xpath 匹配到的所有节点的拼接。", "\n\n\n字段\n说明\n\n\n\n\nXMLType_instance\n指定 XMLType 类型的数据，可以是 XMLType 列或者返回类型为 XMLType 的表达式。\n\n\nXPath_string\n指定需要搜索节点的 Xpath。\n\n\nnamespace_string\n指定 XML 命名空间。\n\n\n", "返回 XMLType 数据类型。"], "Examples": ["DROP TABLE xml_test;\nCREATE TABLE xml_test (id NUMBER, c1 XMLType);\nINSERT INTO xml_test VALUES (1, '<a>aaa</a>');\nINSERT INTO xml_test VALUES (2, '<a><b>aaa</b><b>bbb</b></a>');\nINSERT INTO xml_test VALUES (3, '<a a1=\"a1\">aaa</a>');\nINSERT INTO xml_test VALUES (4, '<a><b b1=\"b1\" b2=\"b2\">bbb</b></a>');\nINSERT INTO xml_test VALUES (5, '<a><b b1=\"b1\" b2=\"b2\">bbb1</b><b b1=\"b1\" b2=\"b2\">bbb2</b></a>');\nINSERT INTO xml_test VALUES (6, '<a xmlns=\"ns1\" xmlns:f=\"ns2\"><f:b b1=\"b1\" b2=\"b2\">bbb1</f:b><b b1=\"b1\" b2=\"b2\">bbb2</b></a>');\n\nobclient> SELECT EXTRACT(c1, '/a/f:b', 'xmlns=\"ns1\" xmlns:f=\"ns2\"') as RES\n FROM xml_test WHERE id = 6;\n+----------------------------------+\n| RES                              |\n+----------------------------------+\n| <f:b b1=\"b1\" b2=\"b2\">bbb1</f:b>\n |\n+----------------------------------+\n1 row in set\n\nobclient> SELECT EXTRACT(c1, '/a/h:b/text()', 'xmlns=\"ns1\" xmlns:h=\"ns2\"') as RES FROM xml_test WHERE id = 6;\n+------+\n| RES  |\n+------+\n| bbb1 |\n+------+\n1 row in set\n"], "Category": ["XML Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823509"], "Title": ["EXTRACTVALUE"], "Feature": ["EXTRACTVALUE(XMLType_instance, XPath_string [, namespace_string ])\n"], "Description": ["该函数依据 Xpath 抽取一个 XML 片段并返回标量值。", "\n\n\n字段\n说明\n\n\n\n\nXMLType_instance\n指定 XMLType 类型的数据，可以是 XMLType 列或者返回类型为 XMLType 的表达式。\n\n\nXPath_string\n指定需要搜索节点的 XPath。XPath 必须指向单一节点（TEXT、ATTRIBUTE或 ELEMENT），且节点必须有单一值，否则会报错。\n\n\nnamespace_string\n指定 XML 命名空间。\n\n\n", "返回类型为 VARCHAR2(4000)。"], "Examples": ["obclient> SELECT EXTRACTVALUE(c1, '/a/f:b', 'xmlns=\"ns1\" xmlns:f=\"ns2\"') as RES from xml_test where id = 6;\n+------+\n| RES  |\n+------+\n| bbb1 |\n+------+\n1 row in set\n\nobclient> SELECT EXTRACTVALUE(c1, '/a/h:b/text()', 'xmlns=\"ns1\" xmlns:h=\"ns2\"') as RES from xml_test where id = 6;\n+------+\n| RES  |\n+------+\n| bbb1 |\n+------+\n1 row in set\n"], "Category": ["XML Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823515"], "Title": ["INSERTCHILDXML"], "Feature": ["INSERTCHILDXML( XMLType_instance, XPath_string, child_expr, value_expr [, namespace_string ])\n"], "Description": ["该函数用于将指定的 XML 片段插入到目标 XML 中，插入位置由 XPath 表达式指示的节点决定。", "\n\n\n字段\n说明\n\n\n\n\nXMLType_instance\n指定一个 XMLType 实例，表示目标 XML 文档。\n\n\nXPath_string\nXPath 表达式，指示要插入一个或多个子节点的一个或多个目标节点。可以使用绝对路径（以斜杠开头）或相对路径（省略初始斜杠）。如果省略初始斜杠，则相对路径的上下文默认为根节点。\n\n\nchild_expr\n指定一个或多个要插入的元素或属性节点。\n\n\nvalue_expr\n指定一个 XMLType 片段，指定要插入的一个或多个节点。它必须解析为一个字符串或者 XMLType。\n\n\nnamespace_string\n可选项，用于为 XPath_string 提供命名空间信息。\n\n\n", "\n说明\n插入的父节点如果还有命名空间，但是待插入的值没有，就要遍历增加空的命名空间。\n", "返回 XMLType 数据类型。"], "Examples": ["SELECT INSERTCHILDXML(\n        XMLtype('<bookstore>\n                    <book att=\"old\"></book>\n                    <author>carrot</author>\n                  </bookstore>'), \n        '/bookstore', \n        'price', \n        XMLtype('<price>99.9</price>')\n      ) AS result\nFROM dual;\n", "+-----------------------------------------------------------------------------------------------+\n| RESULT                                                                                        |\n+-----------------------------------------------------------------------------------------------+\n| <bookstore>\n  <book att=\"old\"/>\n  <author>carrot</author>\n  <price>99.9</price>\n</bookstore>\n|\n+-----------------------------------------------------------------------------------------------+\n1 row in set\n", "SELECT \n  INSERTCHILDXML(\n    xmltype(\n      '<bookstore>\n        <book att=\"old\"></book>\n        <author>carrot</author>\n      </bookstore>'\n    ), \n    '/bookstore/book', \n    'a', \n    xmltype('<a><b/></a>')\n  )\nFROM dual;\n", "+----------------------------------------------------------------------------------------------------------------------------------------------+\n| INSERTCHILDXML(XMLTYPE('<BOOKSTORE><BOOKATT=\"OLD\"></BOOK><AUTHOR>CARROT</AUTHOR></BOOKSTORE>'),'/BOOKSTORE/BOOK','A',XMLTYPE('<A><B/></A>')) |\n+----------------------------------------------------------------------------------------------------------------------------------------------+\n| <bookstore>\n  <book att=\"old\">\n    <a>\n      <b/>\n    </a>\n  </book>\n  <author>carrot</author>\n</bookstore>\n                                |\n+----------------------------------------------------------------------------------------------------------------------------------------------+\n1 row in set\n", "SELECT \n  INSERTCHILDXML(\n    xmltype(\n      '<bookstore>\n        <book att=\"old\"></book>\n        <book></book>\n        <author>carrot</author>\n      </bookstore>'\n    ), \n    '/bookstore/book', \n    'price', \n    xmltype('<price>99.9</price>')\n  ) \nFROM dual;\n", "+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| INSERTCHILDXML(XMLTYPE('<BOOKSTORE><BOOKATT=\"OLD\"></BOOK><BOOK></BOOK><AUTHOR>CARROT</AUTHOR></BOOKSTORE>'),'/BOOKSTORE/BOOK','PRICE',XMLTYPE('<PRICE>99.9</PRICE>')) |\n+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| <bookstore>\n  <book att=\"old\">\n    <price>99.9</price>\n  </book>\n  <book>\n    <price>99.9</price>\n  </book>\n  <author>carrot</author>\n</bookstore>\n                  |\n+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n1 row in set\n", "SELECT \n  INSERTCHILDXML(\n    xmltype(\n      '<bookstore>\n        <book att=\"old\"></book>\n        <author>carrot</author>\n      </bookstore>'\n    ), \n    '/bookstore/book', \n    '@att2', \n    'abc'\n  ) \nFROM dual;\n", "+---------------------------------------------------------------------------------------------------------------------------------+\n| INSERTCHILDXML(XMLTYPE('<BOOKSTORE><BOOKATT=\"OLD\"></BOOK><AUTHOR>CARROT</AUTHOR></BOOKSTORE>'),'/BOOKSTORE/BOOK','@ATT2','ABC') |\n+---------------------------------------------------------------------------------------------------------------------------------+\n| <bookstore>\n  <book att=\"old\" att2=\"abc\"/>\n  <author>carrot</author>\n</bookstore>\n                                              |\n+---------------------------------------------------------------------------------------------------------------------------------+\n1 row in set\n"], "Category": ["XML Functions"]}
