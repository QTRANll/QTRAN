{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823495"], "Title": ["JSON_ARRAY"], "Feature": ["JSON_ARRAY (\n              [val [FORMAT JSON], val [FORMAT JSON] ...]\n                    [ABSENT|NULL ON NULL]\n              [RETURNING JSON | CLOB| BLOB| VARCAHR2| VARCHAR2[size]]\n              [STRICT] )\n"], "Description": ["JSON_ARRAY() 函数计算一系列 SQL 标量表达式，将每个表达式转换为 JSON 值，并且构造一个包含这些 JSON 值的 JSON 数组。", "JSON_ARRAY() 可以指定参数表达式的计算结果为 JSON 对象、JSON 数组、数字文字、文本文字、日期、时间戳或 NULL。此函数将数字文字转换为 JSON 数字值，并将文本文字转换为 JSON 字符串值。日期和时间戳数据类型在生成的 JSON 对象或数组中打印为遵循 ISO 8601 日期格式的 JSON 字符串。"], "Examples": ["# 使用嵌套表达式以及 NULL ON NULL 子句\nobclient> SELECT JSON_ARRAY (JSON_ARRAY(1,2,3),100,'California',null NULL ON NULL) \"JSON Array Example\"\n        FROM DUAL;\n+-----------------------------------+\n| JSON Array Example                |\n+-----------------------------------+\n| [\"[1,2,3]\",100,\"California\",null] |\n+-----------------------------------+\n1 row in set\n\n# ABSENT ON NULL 子句生效，结果里面没有 Null\nobclient> SELECT JSON_ARRAY( JSON_ARRAY(1,2,3),100,'California', null ABSENT ON NULL) \"JSON Array Example\"\n      FROM DUAL;\n+----------------------------------+\n| JSON Array Example               |\n+----------------------------------+\n| [\"[1, 2, 3]\", 100, \"California\"] |\n+----------------------------------+\n1 row in set\n\n# FORMAT JSON 子句生效，把当前表达式输入字符串当做 JSON 类型，输出结果没有被加'\\\"'\n\nobclient> SELECT JSON_ARRAY('{\"a\":\"a-value\", \"b\" : \"b-value\"}' format json RETURNING CLOB)\n    FROM DUAL;\n+--------------------------------------------------------------------+\n| JSON_ARRAY('{\"A\":\"A-VALUE\",\"B\":\"B-VALUE\"}'FORMATJSONRETURNINGCLOB) |\n+--------------------------------------------------------------------+\n| [{\"a\": \"a-value\", \"b\": \"b-value\"}]                                 |\n+--------------------------------------------------------------------+\n1 row in set\n\n# 输入中没有 FORMAT JSON, 输出字符串被加了'\\\"'\nobclient> SELECT JSON_ARRAY('{\"a\":\"a-value\", \"b\" : \"b-value\"}' RETURNING CLOB) FROM DUAL;\n+----------------------------------------------------------+\n| JSON_ARRAY('{\"A\":\"A-VALUE\",\"B\":\"B-VALUE\"}'RETURNINGCLOB) |\n+----------------------------------------------------------+\n| [\"{\\\"a\\\":\\\"a-value\\\", \\\"b\\\" : \\\"b-value\\\"}\"]             |\n+----------------------------------------------------------+\n1 row in set\n\n# 指定返回值类型为 VARCHAR2 类型\nobclient> SELECT JSON_ARRAY('{\"a\":\"a-value\", \"b\" : \"b-value\"}' format json RETURNING VARCHAR2)\n    FROM DUAL;\n+------------------------------------------------------------------------+\n| JSON_ARRAY('{\"A\":\"A-VALUE\",\"B\":\"B-VALUE\"}'FORMATJSONRETURNINGVARCHAR2) |\n+------------------------------------------------------------------------+\n| [{\"a\": \"a-value\", \"b\": \"b-value\"}]                                     |\n+------------------------------------------------------------------------+\n1 row in set\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823494"], "Title": ["JSON_ARRAYAGG"], "Feature": ["JSON_ARRAYAGG(expr [FORMAT JSON]\n                   [ORDER SIBLINGS BY order_condition]\n                   [ABSENT|NULL ON NULL,]\n                   [RETURNING  CLOB|BLOB|JSON|VARCHAR2|VARCHAR2[size],]\n                   [STRICT]);\n"], "Description": ["JSON_ARRAYAGG() 是一个聚合函数，它将所有列的数据转换成 JSON 数据，并且将所有的 JSON 数据组成一个单独的 JSON 数组结构。"], "Examples": ["# 使用默认参数\nobclient> CREATE TABLE id_table (id NUMBER);\nobclient> INSERT INTO id_table VALUES(624);\nobclient> INSERT INTO id_table VALUES(null);\nobclient> INSERT INTO id_table VALUES(925);\nobclient> INSERT INTO id_table VALUES(585);\nobclient> SELECT JSON_ARRAYAGG(id) ID_NUMBERS FROM id_table;\n+---------------+\n| ID_NUMBERS    |\n+---------------+\n| [624,925,585] |\n+---------------+\n1 row in set\n\n# 使用FORMAT JSON 子句\nobclient> CREATE TABLE json_table (json_doc VARCHAR2(100))\nobclient> INSERT INTO json_table VALUES('[1]');\nobclient> INSERT INTO json_table VALUES('[1,2]');\nobclient> INSERT INTO json_table VALUES('[1,2,3]')\nobclient> INSERT INTO json_table VALUES('{key:\"value\"}');\nobclient> SELECT JSON_ARRAYAGG(json_doc FORMAT JSON) FROM json_table;\n+-----------------------------------+\n| JSON_ARRAYAGG(JSON_DOCFORMATJSON) |\n+-----------------------------------+\n| [[1],[1,2],[1,2,3],{key:\"value\"}] |\n+-----------------------------------+\n1 row in set\n\n# 使用 ABSENT ON NULL 子句\nobclient> SELECT JSON_ARRAYAGG(id ORDER BY id ABSENT ON NULL) FROM id_table;\n+----------------------------------------+\n| JSON_ARRAYAGG(IDORDERBYIDABSENTONNULL) |\n+----------------------------------------+\n| [585,624,925]                          |\n+----------------------------------------+\n1 row in set\n\n# 使用 ORDER BY 子句\nCREATE TABLE json_table (id NUMBER, text_data VARCHAR2(10), json_data JSON);\nINSERT INTO json_table VALUES(624, 'test1', '[1]');\nINSERT INTO json_table VALUES(null, 'test4', '[2]');\nINSERT INTO json_table VALUES(925, 'test2', '[3]');\nINSERT INTO json_table VALUES(585, 'test5', '[4]');\nINSERT INTO json_table VALUES(585, 'test3', '[5]');\nobclient> SELECT JSON_ARRAYAGG(text_data ORDER BY text_data) FROM json_table;\n+-------------------------------------------+\n| JSON_ARRAYAGG(TEXT_DATAORDERBYTEXT_DATA)  |\n+-------------------------------------------+\n| [\"test1\",\"test2\",\"test3\",\"test4\",\"test5\"] |\n+-------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_ARRAYAGG(text_data ORDER BY id) FROM json_table;\n+-------------------------------------------+\n| JSON_ARRAYAGG(TEXT_DATAORDERBYID)         |\n+-------------------------------------------+\n| [\"test5\",\"test3\",\"test1\",\"test2\",\"test4\"] |\n+-------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_ARRAYAGG(text_data ORDER BY id,text_data) FROM json_table;\n+---------------------------------------------+\n| JSON_ARRAYAGG(TEXT_DATAORDERBYID,TEXT_DATA) |\n+---------------------------------------------+\n| [\"test3\",\"test5\",\"test1\",\"test2\",\"test4\"]   |\n+---------------------------------------------+\n1 row in set\n\n# 使用 STRICT 子句\nCREATE TABLE json_table (json_doc VARCHAR2(100));\nINSERT INTO json_table VALUES('[1]');\nINSERT INTO json_table VALUES('[1,2]');\nINSERT INTO json_table VALUES('[1,2,3]');\nINSERT INTO json_table VALUES('{key:\"value\"}');\n\nobclient> SELECT JSON_ARRAYAGG(json_doc FORMAT JSON STRICT) ID_NUMBERS FROM json_table;\nORA-00600: Invalid JSON text.\nobclient> SELECT JSON_ARRAYAGG(json_doc FORMAT JSON) ID_NUMBERS FROM json_table;\n+-----------------------------------+\n| ID_NUMBERS                        |\n+-----------------------------------+\n| [[1],[1,2],[1,2,3],{key:\"value\"}] |\n+-----------------------------------+\n1 row in set\n\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823503"], "Title": ["JSON_EQUAL"], "Feature": ["json_equal(expr,\n           expr\n          [TRUE|FALSE|ERROR ON ERROR]);\n"], "Description": ["JSON_EQUAL() 函数用于比较两个 JSON 值，如果相等则返回 Ture。如果两个值不相等，则返回 False。输入值必须是有效的 JSON 数据。比较忽略空格和对象成员顺序。例如，如果 JSON 对象具有相同的成员，则无论它们的顺序如何，都是相等的。", "此外，IS JSON和 IS NOT JSON在 SQL 语句中作为 SQL 条件也用以校验表达式结果是否是合法的 JSON 数据格式。详细信息请参见 JSON 数据类型列的创建。"], "Examples": ["# WHEN CASE 中作为 SQL 条件使用 JSON_EQUAL() 函数\nobclient> SELECT CASE\n               WHEN JSON_EQUAL (\n       '{\"comparesAttributes\":\"and values\"}', '{\"inTwoJSONDocuments\": \"for equality\"}'\n               ) THEN 'THE SAME' ELSE 'DIFFERENT'\n             END JSON_COMPARE\n      FROM   DUAL;\n+--------------+\n| JSON_COMPARE |\n+--------------+\n|  DIFFERENT   |\n+--------------+\n1 row in set\n\n# 相同的输入\nobclient> SELECT 1 FROM DUAL WHERE JSON_EQUAL('[1,]', '[1]' FALSE ON ERROR);\n+---+\n| 1 |\n+---+\n| 1 |\n+---+\n1 row in set\n\nobclient> SELECT 1 FROM DUAL WHERE JSON_EQUAL('[1,]', '[1' TRUE ON ERROR);\n+---+\n| 1 |\n+---+\n| 1 |\n+---+\n1 row in set\n\n# 使用 ERROR 子句 FALSE ON ERROR\nobclient> SELECT 1 FROM DUAL WHERE JSON_EQUAL('[1,]', '[1' FALSE ON ERROR);\nEmpty set\n\n# 使用 ERROR 子句 ERROR ON ERROR\nobclient> SELECT 1 FROM DUAL WHERE JSON_EQUAL('[1,]', '[1' error on error);\nORA-40441: JSON syntax error\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823500"], "Title": ["JSON_EXISTS"], "Feature": ["JSON_EXISTS(\n              expr [FORMAT JSON],\n              json_path_literal\n                 [PASSING expr AS identifier]\n                 [ERROR|TRUE|FALSE ON ERROR]\n              [ERROR|TRUE|FALSE ON EMPTY]);\n\n"], "Description": ["JSON_EXISTS() 函数在 SQL 语句中作为 SQL 条件，来检验指定路径下的 JSON 数据是否存在，或者满足某些条件，可以理解为针对 JSON 数据起到过滤条件作用。如果 JSON 值存在，此条件返回 TRUE，如果 JSON 值不存在，则返回 FALSE。"], "Examples": ["# 使用默认参数，用于选取符合条件的 JSON 值\nCREATE TABLE t (name VARCHAR2(100));\nINSERT INTO t VALUES ('[{first:\"John\"}, {middle:\"Mark\"}, {last:\"Smith\"}]');\nINSERT INTO t VALUES ('[{first:\"Mary\"}, {last:\"Jones\"}]');\nINSERT INTO t VALUES ('[{first:\"Jeff\"}, {last:\"Williams\"}]');\nINSERT INTO t VALUES ('[{first:\"Jean\"}, {middle:\"Anne\"}, {last:\"Brown\"}]');\nINSERT INTO t VALUES (NULL);\nINSERT INTO t VALUES ('This is not well-formed JSON data');\n\nobclient> SELECT name FROM t  WHERE JSON_EXISTS(name, '$[0].first');\n+---------------------------------------------------+\n| NAME                                              |\n+---------------------------------------------------+\n| [{first:\"John\"}, {middle:\"Mark\"}, {last:\"Smith\"}] |\n| [{first:\"Mary\"}, {last:\"Jones\"}]                  |\n| [{first:\"Jeff\"}, {last:\"Williams\"}]               |\n| [{first:\"Jean\"}, {middle:\"Anne\"}, {last:\"Brown\"}] |\n+---------------------------------------------------+\n4 rows in set\n\n# 当出现不匹配时，或者 expr 不是合法的JSON数据时，JSON_EXIST 返回 false\nobclient> SELECT name FROM t WHERE JSON_EXISTS(name, '$[1].middle');\n+---------------------------------------------------+\n| NAME                                              |\n+---------------------------------------------------+\n| [{first:\"John\"}, {middle:\"Mark\"}, {last:\"Smith\"}] |\n| [{first:\"Jean\"}, {middle:\"Anne\"}, {last:\"Brown\"}] |\n+---------------------------------------------------+\n2 rows in set\n\n# 将 PASSING 子句传递给 json-path 参数\nobclient> SELECT name FROM t WHERE JSON_EXISTS(name, '$[1]?(@.middle == $var1)' PASSING 'Anne' as \"var1\");\n+---------------------------------------------------+\n| NAME                                              |\n+---------------------------------------------------+\n| [{first:\"Jean\"}, {middle:\"Anne\"}, {last:\"Brown\"}] |\n+---------------------------------------------------+\n1 row in set\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823502"], "Title": ["JSON_MERGEPATCH"], "Feature": ["JSON_MERGEPATCH (\n                 target_expr,\n                 patch_expr\n                 [RETURNING  CLOB|BLOB|JSON|VARCHAR2|VARCHAR2[size],]\n                 [PRETTY]\n                 [ASCII]\n                 [TRUNCATE]\n                 [ERROR|NULL ON ERROR]);\n"], "Description": ["JSON_MERGEPATCH() 函数用于更新 target_json 数据的特定部分，根据 RFC 7396 的标准对两个或多个 JSON 文档执行合并返回合并结果，而不保留具有重复键的成员。 如果至少一个文档作为参数传递给此函数是无效的，则会引发错误。", "JSON_MERGEPATCH() 执行合并的原理如下：", "如果第一个参数不是对象，则合并的结果与空对象和第二个参数合并的结果相同。", "如果第二个参数不是对象，则合并的结果是第二个参数。", "如果两个参数都是对象，则合并的结果是具有以下成员的对象： \n    ", "\n第一个对象的所有成员在第二个对象中没有具有相同键的对应成员。\n第二个对象的所有成员在第一个对象中没有对应的键，并且其值不是 JSON Null 文字。\n", "第一个对象的所有成员在第二个对象中没有具有相同键的对应成员。", "第二个对象的所有成员在第一个对象中没有对应的键，并且其值不是 JSON Null 文字。", "所有成员的键都存在于第一个和第二个对象中，并且其在第二个对象中的值不是 JSON Null 文字。", "这些成员的值是递归合并第一个对象中的值与第二个对象中的值的结果。"], "Examples": ["# 使用默认参数\nobclient> SELECT json_mergepatch('{\"a\":\"b\"}', '{\"b\":\"c\"}') FROM DUAL;\n+------------------------------------------+\n| JSON_MERGEPATCH('{\"A\":\"B\"}','{\"B\":\"C\"}') |\n+------------------------------------------+\n| {\"a\": \"b\", \"b\": \"c\"}                     |\n+------------------------------------------+\n1 row in set\n\n# 当 Patch 是 null, 相当于删除\nobclient> SELECT json_mergepatch('{\"a\":\"b\"}', '{\"a\":null}') FROM DUAL;\n+-------------------------------------------+\n| JSON_MERGEPATCH('{\"A\":\"B\"}','{\"A\":NULL}') |\n+-------------------------------------------+\n| {}                                        |\n+-------------------------------------------+\n1 row in set\n\n# 相同的 Key 时会更新\nobclient> SELECT json_mergepatch('{\"a\":[\"b\"]}', '{\"a\":\"c\"}') FROM DUAL;\n+--------------------------------------------+\n| JSON_MERGEPATCH('{\"A\":[\"B\"]}','{\"A\":\"C\"}') |\n+--------------------------------------------+\n| {\"a\": \"c\"}                                 |\n+--------------------------------------------+\n1 row in set\n\n# 使用 RETURNING 子句和 PRETTY 子句\nobclient> SELECT json_mergepatch('{\"a\":\"b\", \"b\":\"c\"}', '{\"a\":null}' RETURNING CLOB PRETTY ) FROM DUAL;\n+----------------------------------------------------------------------+\n| JSON_MERGEPATCH('{\"A\":\"B\",\"B\":\"C\"}','{\"A\":NULL}'RETURNINGCLOBPRETTY) |\n+----------------------------------------------------------------------+\n| {\n  \"b\": \"c\"\n}                                                       |\n+----------------------------------------------------------------------+\n1 row in set\n\n# 使用 TRUNCATE 子句生效\nobclient> SELECT json_mergepatch(\n      '{\"a\":\"b\"}',\n      '{\"a\":\"cccccccccccccccccccccccccccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccccccccccccccccccccccccccccccccccccccccccccccc\"}'\n          RETURNING varchar2(32) PRETTY TRUNCATE) FROM DUAL;\n+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| JSON_MERGEPATCH('{\"A\":\"B\"}','{\"A\":\"CCCCCCCCCCCCCCCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC\"}'RETURNINGVARCHAR2(32)PRETTYTRUNCATE) |\n+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| {\n  \"a\": \"cccccccccccccccccccccc                                                                                                                                                                                                        |\n+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n1 row in set\n\n# 使用 ERROR 子句\nobclient> SELECT json_mergepatch('{', '[1,2,3]' ERROR ON ERROR) FROM DUAL;\nORA-40441: JSON syntax error\n\n# 默认对错误处理返回 NULL\nobclient> SELECT json_mergepatch('{', '[1,2,3]') FROM DUAL;\n+--------------------------------+\n| JSON_MERGEPATCH('{','[1,2,3]') |\n+--------------------------------+\n| NULL                           |\n+--------------------------------+\n1 row in set\n\n# 指定 ERROR 子句的处理\nobclient> SELECT json_mergepatch('{', '[1,2,3]' NULL ON ERROR) FROM DUAL;\n+-------------------------------------------+\n| JSON_MERGEPATCH('{','[1,2,3]'NULLONERROR) |\n+-------------------------------------------+\n| NULL                                      |\n+-------------------------------------------+\n1 row in set \n\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823497"], "Title": ["JSON_OBJECT"], "Feature": ["JSON_OBJECT([KEY]'key_name': value_expr FORMAT JSON,\n                         'key_name' VALUE value_expr\n                         [ABSENT|NULL ON NULL,]\n                         [RETURNING  CLOB|BLOB|JSON|VARCHAR2|VARCHAR2[size],]\n                         [STRICT,]\n                         [WITH UNIQUE KEYS]);\n"], "Description": ["对于 SQL 输入的一系列 key-value 对，JSON_OBJECT() 函数将其转换成一个 JSON 格式的对象，包含了前面输入的所有 key-value 对。"], "Examples": ["# 入参是(a), (b)的场景\nSELECT JSON_OBJECT(\n'name' : first_name || ' ' || last_name,\n'email' : email,\n'phone' : phone_number,\n'hire_date' : hire_date\n)\n    FROM employees\n    WHERE employee_id = 140;\n\n# 入参是(f)的场景，使用通配符\nSELECT JSON_OBJECT(*) FROM employees WHERE employee_id = 140;\n---------------------------------------------------------------------\n{\n\"EMPLOYEE_ID\":140,\n\"FIRST_NAME\":\"Joshua\",\n\"LAST_NAME\":\"Patel\",\n\"EMAIL\":\"JPATEL\",\n\"PHONE_NUMBER\":\"650.121.1834\",\n\"HIRE_DATE\":\"2006-04-06T00:00:00\",\n\"JOB_ID\":\"ST_CLERK\",\n\"SALARY\":2500,\n\"COMMISSION_PCT\":null,\n\"MANAGER_ID\":123,\"DEPARTMENT_ID\":50\n}\n\n# 入参是(c), (d)的场景\nSELECT JSON_OBJECT('NAME' VALUE first_name, d.*)\n   FROM employees e, departments d\n      WHERE e.department_id = d.department_id AND e.employee_id =140\n\n# 使用 FORMAT JSON 子句\nSELECT JSON_OBJECT ('name' value 'Foo') FROM DUAL;\n+-------------------------------+\n| JSON_OBJECT('NAME'VALUE'FOO') |\n+-------------------------------+\n| {\"name\":\"Foo\"}                |\n+-------------------------------+\n\n\n# 场景(a), (b) 使用关键字 KEY VALUE\nSELECT JSON_OBJECT (\n    KEY 'deptno' VALUE d.department_id,\n    KEY 'deptname' VALUE d.department_name\n    ) \"Department Objects\"\n  FROM departments d\n  ORDER BY d.department_id;\n\nDepartment Objects\n----------------------------------------\n{\"deptno\":10,\"deptname\":\"Administration\"}\n{\"deptno\":20,\"deptname\":\"Marketing\"}\n{\"deptno\":30,\"deptname\":\"Purchasing\"}\n{\"deptno\":40,\"deptname\":\"Human Resources\"}\n{\"deptno\":50,\"deptname\":\"Shipping\"}\n\n# 入参(1),(2)\nSELECT JSON_OBJECT(\n'first_name' VALUE first_name,\n'last_name' VALUE last_name,\n'email' VALUE email,\n'hire_date' VALUE hire_date\n)\nFROM employees\nWHERE employee_id = 140;\n---------------------------------------------------------------------------\n{\n\"first_name\":\"Joshua\",\n\"last_name\":\"Patel\",\n\"email\":\"JPATEL\",\n\"hire_date\":\"2006-04-06T00:00:00\"\n}\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823496"], "Title": ["JSON_OBJECTAGG"], "Feature": ["JSON_OBJECTAGG([KEY] key_expr [VALUE] value_expr\n                              [ABSENT|NULL ON NULL,]\n                              [RETURNING  CLOB|BLOB|JSON|VARCHAR2|VARCHAR2[size],]\n                              [STRICT,]\n                          [WITH UNIQUE KEYS]);\n\n"], "Description": ["JSON_OBJECTAGG() 函数将输入参数作为 key-value 对, 其中的 key 和 value 都是列表达式，将所有的 key-value 对组合到一个JSON 对象中，并将该对象返回。"], "Examples": ["# 使用默认参数\nCREATE TABLE t (a int, k VARCHAR(10), v VARCHAR(10));\nINSERT INTO t VALUES (1, 'key1', '\"alfa\"');\nINSERT INTO t VALUES (1, 'key3', 'null');\nINSERT INTO t VALUES (1, 'key4', 'false');\nINSERT INTO t VALUES (2, 'key6', '124');\nobclient> SELECT a, JSON_OBJECTAGG(k VALUE v) FROM t GROUP BY a;\n+------+--------------------------------------------------+\n| A    | JSON_OBJECTAGG(KVALUEV)                          |\n+------+--------------------------------------------------+\n|    1 | {\"key1\":\"\\\"alfa\\\"\",\"key3\":\"null\",\"key4\":\"false\"} |\n|    2 | {\"key6\":\"124\"}                                   |\n+------+--------------------------------------------------+\n\n# 使用 FORMAT JSON 子句\nobclient> SELECT a, JSON_OBJECTAGG(k VALUE v FORMAT JSON) FROM t GROUP BY a;\n+------+------------------------------------------+\n| A    | JSON_OBJECTAGG(KVALUEVFORMATJSON)        |\n+------+------------------------------------------+\n|    1 | {\"key1\":\"alfa\",\"key3\":null,\"key4\":false} |\n|    2 | {\"key6\":124}                             |\n+------+------------------------------------------+\n\n# 使用 NULL|ABSENT ON NULL 子句\nobclient> INSERT INTO t VALUES (2, 'key7', null);\nobclient> SELECT a, JSON_OBJECTAGG(k VALUE v NULL ON NULL) FROM t GROUP BY a;\n+------+--------------------------------------------------+\n| A    | JSON_OBJECTAGG(KVALUEVNULLONNULL)                |\n+------+--------------------------------------------------+\n|    1 | {\"key1\":\"\\\"alfa\\\"\",\"key3\":\"null\",\"key4\":\"false\"} |\n|    2 | {\"key6\":\"124\",\"key7\":\"null\"}                     |\n+------+--------------------------------------------------+\nobclient> SELECT a, JSON_OBJECTAGG(k VALUE v ABSENT ON NULL) FROM t GROUP BY a;\n+------+--------------------------------------------------+\n| A    | JSON_OBJECTAGG(KVALUEVABSENTONNULL)              |\n+------+--------------------------------------------------+\n|    1 | {\"key1\":\"\\\"alfa\\\"\",\"key3\":\"null\",\"key4\":\"false\"} |\n|    2 | {\"key6\":\"124\"}                                   |\n+------+--------------------------------------------------+\n\n# 使用 RETURNING 子句\nobclient> SELECT a, JSON_OBJECTAGG(k VALUE v returning varchar2) FROM t GROUP BY a;\n+------+--------------------------------------------------+\n| A    | JSON_OBJECTAGG(KVALUEVRETURNINGVARCHAR2)         |\n+------+--------------------------------------------------+\n|    1 | {\"key1\":\"\\\"alfa\\\"\",\"key3\":\"null\",\"key4\":\"false\"} |\n|    2 | {\"key6\":\"124\"}                                   |\n+------+--------------------------------------------------+\n2 rows in set\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823499"], "Title": ["JSON_QUERY"], "Feature": ["JSON_QUERY(\n              expr [FORMAT JSON],\n              json_path_literal\n                  [RETURNING  CLOB|BLOB|JSON|VARCHAR2|VARCHAR2[size],]\n              [ALLOW|DISALLOW SCALARS]\n              [PRETTY]\n              [ASCII]\n              [WITHOUT [ARRAY] WRAPPER, WITH CONDITIONAL|UNCONDITIONAL [ARRAY] WRAPPER]\n              [ERROR|NULL|EMPTY|EMTPY ARRAY|EMPTY OBJECT ON ERROR]\n              [ERROR|NULL|EMPTY|EMTPY ARRAY|EMPTY OBJECT ON EMPTY]);\n"], "Description": ["JSON_QUERY() 函数用于从 JSON 数据中查询一个或者多个值，并且返回这些值。"], "Examples": ["# 使用 RETURNING 子句\nobclient> SELECT JSON_QUERY('{\"a\":100, \"b\":200, \"c\":300}', '$') AS value FROM DUAL;\n+--------------------------------+\n| VALUE                          |\n+--------------------------------+\n| {\"a\": 100, \"b\": 200, \"c\": 300} |\n+--------------------------------+\n1 row in set\n\nobclient>SELECT JSON_QUERY('{\"a\":100, \"b\":200, \"c\":300}', '$' RETURNING CLOB) FROM DUAL;\n+----------------------------------------------------------+\n| JSON_QUERY('{\"A\":100,\"B\":200,\"C\":300}','$'RETURNINGCLOB) |\n+----------------------------------------------------------+\n| {\"a\": 100, \"b\": 200, \"c\": 300}                           |\n+----------------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_QUERY('{\"a\":100, \"b\":200, \"c\":300}', '$' RETURNING VARCHAR2(200)) FROM DUAL;\n+-------------------------------------------------------------------+\n| JSON_QUERY('{\"A\":100,\"B\":200,\"C\":300}','$'RETURNINGVARCHAR2(200)) |\n+-------------------------------------------------------------------+\n| {\"a\": 100, \"b\": 200, \"c\": 300}                                    |\n+-------------------------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_QUERY('{\"a\":100, \"b\":200, \"c\":300}', '$' RETURNING BLOB) FROM DUAL;\n+----------------------------------------------------------+\n| JSON_QUERY('{\"A\":100,\"B\":200,\"C\":300}','$'RETURNINGBLOB) |\n+----------------------------------------------------------+\n| {\"a\": 100, \"b\": 200, \"c\": 300}                           |\n+----------------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_QUERY('{\"a\":100, \"b\":200, \"c\":300}', '$' RETURNING JSON) FROM DUAL;\n+----------------------------------------------------------+\n| JSON_QUERY('{\"A\":100,\"B\":200,\"C\":300}','$'RETURNINGJSON) |\n+----------------------------------------------------------+\n| {\"a\": 100, \"b\": 200, \"c\": 300}                           |\n+----------------------------------------------------------+\n1 row in set\n\n# 使用 WRAPPER 子句和 ERROR子句\nobclient> SET @col_json = '[1,2]';\nobclient> SELECT JSON_QUERY(@col_json, '$[0 to 10]' RETURNING JSON WITH WRAPPER EMPTY ON ERROR) FROM DUAL;\n+----------------------------------------------------------------------+\n| JSON_QUERY(@COL_JSON,'$[0TO10]'RETURNINGJSONWITHWRAPPEREMPTYONERROR) |\n+----------------------------------------------------------------------+\n| [1, 2]                                                               |\n+----------------------------------------------------------------------+\n1 row in set\n\n# 使用 ARRAY WRAPPER 子句\nobclient> SELECT JSON_QUERY(treat('{\"a\":100, \"b\":200, \"c\":300}' as json), '$' WITH ARRAY WRAPPER) AS value FROM DUAL;\n+----------------------------------+\n| VALUE                            |\n+----------------------------------+\n| [{\"a\": 100, \"b\": 200, \"c\": 300}] |\n+----------------------------------+\n1 row in set\n\n# 使用 DISALLOW SCALAR 子句\nobclient> SELECT JSON_QUERY('\"aaa\"', '$' DISALLOW SCALARS ) FROM DUAL;\n+----------------------------------------+\n| JSON_QUERY('\"AAA\"','$'DISALLOWSCALARS) |\n+----------------------------------------+\n| NULL                                   |\n+----------------------------------------+\n1 row in set\n\n# 使用 EMPTY OBJECT/EMPTY ARRAY ON EMTPY子句\nobclient>SELECT JSON_QUERY('{}', '$.a' EMPTY OBJECT ON EMPTY) AS value FROM DUAL;\n+-------+\n| VALUE |\n+-------+\n| {}    |\n+-------+\n1 row in set\n\nobclient>SELECT JSON_QUERY('{}', '$.a' EMPTY ARRAY ON EMPTY) AS value FROM DUAL;\n+-------+\n| VALUE |\n+-------+\n| []    |\n+-------+\n1 row in set\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823501"], "Title": ["JSON_TABLE"], "Feature": ["JSON_TABLE(\n        expr [FORMAT JSON]\n        [, json_path_literal]\n        [ERROR | NULL ON ERROR]\n        COLUMNS (\n          [column_name [json_value_return_type] EXISTS [PATH path_literal] [json_exists_on_error_clause] [json_exists_on_emtpy_clause]]\n          [column_name [json_query_return_type] FORMAT JSON [ALLOW|DISALLOW SCALARS] [json_query_wrapper_clause] [PATH path_literal] [json_query_on_error_clause]]\n          [column_name [json_value_return_type] [TRUNCATE] [PATH path_literal] [json_exists_on_error_clause] [json_exists_on_emtpy_clause]]\n          [column_name FOR ORDINALITY]\n          [NESTED PATH path_literal COLUMNS (\n            # 嵌套结构，重复父一级语法\n            ...\n          )]\n        )\n       )\n"], "Description": ["JSON_TABLE() 函数提供了一种联系关系表和 JSON 结构数据的途径。可以在 SQL 中像使用虚拟关系表一样来使用 JSON_TABLE() 的输出结果。JSON_TABLE() 为每一个 JSON 值提供了列输出，对于 JSON 内的数组，提供了多行（列）输出。 JSON_TABLE() 必须用在 SELECT 语句的 FROM 子句中。"], "Examples": ["# 使用 NESTED COLUMN 嵌套语句\nDROP TABLE jsonb_table_test;\nCREATE TABLE jsonb_table_test (js VARCHAR2 (4000));\n\nDELETE FROM jsonb_table_test;\nINSERT INTO jsonb_table_test VALUES (\n  '[\n  \t{\"c\": [7], \"d\": [3], \"a\": 2,  \"b\": [3,4]}\n  ]'\n);\n\nobclient> SELECT jt.* FROM jsonb_table_test jtt,\n      json_table (jtt.js, '$[*]'\n          columns (\n            nested path '$.c[*]' COLUMNS (c int path '$'),\n            nested path '$.d[*]' COLUMNS (d int path '$'),\n            nested path '$.b[*]' COLUMNS (b int path '$'),\n            a int path '$.a'\n          )\n      ) jt;\n+------+------+------+------+\n| C    | D    | B    | A    |\n+------+------+------+------+\n| NULL | NULL |    3 |    2 |\n| NULL | NULL |    4 |    2 |\n| NULL |    3 | NULL |    2 |\n|    7 | NULL | NULL |    2 |\n+------+------+------+------+\n4 rows in set\n\n\n# 使用 NESTED COLUMN 嵌套和 ORDINALITY 列\nobclient> INSERT INTO jsonb_table_test VALUES (\n        '[\n        {\"a\":  1,  \"b\": [], \"c\": []},\n        {\"a\":  2,  \"b\": [1, 2, 3], \"c\": [10, null, 20]},\n        {\"a\":  3,  \"b\": [1, 2], \"c\": []},\n        {\"a\":  4, \"b\": [1, 2], \"c\": [123]}\n        ]'\n      );\nQuery OK, 1 row affected\n\nobclient> SELECT jt.* FROM jsonb_table_test jtt,\n        json_table (jtt.js, '$[*]'\n          columns (\n            nested path '$.c[*]' COLUMNS (c int path '$'),\n            nested path '$.b[*]' COLUMNS (b int path '$'),\n            n FOR ORDINALITY,\n            a int path '$.a'\n          )\n        ) jt;\n+------+------+------+------+\n| C    | B    | N    | A    |\n+------+------+------+------+\n| NULL | NULL |    1 |    1 |\n| NULL |    1 |    2 |    2 |\n| NULL |    2 |    2 |    2 |\n| NULL |    3 |    2 |    2 |\n|   10 | NULL |    2 |    2 |\n| NULL | NULL |    2 |    2 |\n|   20 | NULL |    2 |    2 |\n| NULL |    1 |    3 |    3 |\n| NULL |    2 |    3 |    3 |\n| NULL |    1 |    4 |    4 |\n| NULL |    2 |    4 |    4 |\n|  123 | NULL |    4 |    4 |\n+------+------+------+------+\n12 rows in set\n\n# 查询 json_table 的 json_value 列，以及使用 EMTPY 子句\nobclient> SELECT jt.* FROM json_table (\n        '{\"data\": 123.45}',\n        '$'\n         columns (a CLOB path '$.nokey' default 'abc' on EMPTY)\n        ) jt;\n+------+\n| A    |\n+------+\n| abc  |\n+------+\n1 row in set\n\n# 查询 json_table 的 json_value 列，以及使用 EMTPY 子句\nobclient> SELECT jt.* FROM json_table (\n        '{\"data\": 123.45}',\n        '$'\n         columns (a CLOB path '$.nokey' NULL on EMPTY)\n        ) jt;\n+------+\n| A    |\n+------+\n| NULL |\n+------+\n1 row in set\n\nobclient> SELECT jt.* FROM\n   json_table(\n   '{\"details\":\n     [ {\"branch_code\": \"3020300\", \"products\": [\n                                           \"23D0980000000000\",\n                                           \"23E2980000000000\",\n                                           \"23E3980000000004\"]},\n      {\"branch_code\": \"3090100\", \"products\": [\n                                           \"23D0980000000000\",\n                                           \"23E2980000000000\"]}],\n      \"extras\": [\"AWUX1201293111\", \"AWUX1201293112\"]\n     }',\n     '$.details[*]'\n     columns (\n       branch_code varchar2(100) path '$.branch_code',\n       nested path '$.products[*]' columns (product varchar2(100) path '$[*]')\n       )\n     ) jt;\n\n+-------------+------------------+\n| BRANCH_CODE | PRODUCT          |\n+-------------+------------------+\n| 3020300     | 23D0980000000000 |\n| 3020300     | 23E2980000000000 |\n| 3020300     | 23E3980000000004 |\n| 3090100     | 23D0980000000000 |\n| 3090100     | 23E2980000000000 |\n+-------------+------------------+\n5 rows in set\n\n# 查询 json_table 的 JSON_EXISTS 列\n obclient> SELECT jt.* FROM json_table (\n        '{\n          \"a\": \"1997-8-14 11:11:11\",\n          \"b\" : 123,\n          \"c\": \"varchar2\"\n         }',\n        '$' columns (\n            a date EXISTS path '$.a',\n            b int EXISTS path '$.b' ERROR ON EMPTY,\n            c varchar2(32) format json path '$.c' NULL ON EMPTY\n          )\n        ) jt;\n+---------------------+------+----------+\n| A                   | B    | C        |\n+---------------------+------+----------+\n| 1997-08-14 11:11:11 |  123 | varchar2 |\n+---------------------+------+----------+\n1 row in set\n\n# 查询 json_table 的 json_query 列\nobclient> SELECT jt.* FROM json_table (\n        '{\"data\": [1, 2, 3, 3]}',\n        '$'\n         columns (a varchar2(1024) FORMAT JSON path '$.data[*]')\n        ) jt;\n+--------------+\n| A            |\n+--------------+\n| [1, 2, 3, 3] |\n+--------------+\n1 row in set\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823498"], "Title": ["JSON_VALUE"], "Feature": ["JSON_VALUE(value_expr [FORMAT JSON],\n                  json_path_literal\n                      [RETURNING  NUMBER|DATE|TIMESTAMP|VARCHAR2|VARCHAR2[size],]\n                   [ERROR|NULL|DEFAULT-literal ON ERROR]\n                      [ERROR|NULL|DEFAULT-literal ON EMPTY]\n                  [ERROR|NULL ON MISMATCH]);\n"], "Description": ["JSON_VALUE() 函数用于查询 JSON 数据中的特定部分，并且返回 SQL 值。"], "Examples": ["# 使用默认参数\nobclient> SELECT JSON_VALUE('{\"a\":100}', '$.a') AS value FROM DUAL;\n+-------+\n| VALUE |\n+-------+\n| 100   |\n+-------+\n1 row in set\n\n# 使用 ERROR 子句\nobclient> SELECT JSON_VALUE( '{a:\"cat\"}','$.a.number()' NULL ON EMPTY  DEFAULT -1 ON ERROR ) FROM DUAL;\n+-------------------------------------------------------------------+\n| JSON_VALUE('{A:\"CAT\"}','$.A.NUMBER()'NULLONEMPTYDEFAULT-1ONERROR) |\n+-------------------------------------------------------------------+\n|                                                               -1  |\n+-------------------------------------------------------------------+\n1 row in set\n\n# 使用 DEFAULT 子句\nobclient> SELECT JSON_VALUE('{firstname:\"John\"}', '$.lastname' DEFAULT 'No last name found' ON ERROR) AS \"Last Name\" FROM DUAL;\n+--------------------+\n| Last Name          |\n+--------------------+\n| No last name found |\n+--------------------+\n1 row in set\n\n# 使用 RETURNING 子句\nobclient> SELECT JSON_VALUE('\"2019-08-30, 1\"', '$' RETURNING CLOB error on error) FROM DUAL;\n+-----------------------------------------------------------+\n| JSON_VALUE('\"2019-08-30,1\"','$'RETURNINGCLOBERRORONERROR) |\n+-----------------------------------------------------------+\n| 2019-08-30, 1                                             |\n+-----------------------------------------------------------+\n1 row in set\n"], "Category": ["JSON Functions"]}
