{
    "ALTER EXTERNAL TABLE": {
        "Title": [
            "ALTER EXTERNAL TABLE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054353"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "ALTER EXTERNAL TABLE table_name REFRESH;\n",
        "Description": [
            "该语句用来手动更新外表的文件。单个文件的表数据可以自动更新，如果外表数据来自于文件列表则不能自动更新，需要进行手动刷新。"
        ],
        "Illustration": [
            "table_name 指定要刷新的外表名称。"
        ],
        "Examples": [
            "obclient> ALTER EXTERNAL TABLE lineitem REFRESH;\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "obclient> ALTER EXTERNAL TABLE lineitem REFRESH;\nQuery OK, 0 rows affected\n"
        ]
    },
    "ALTER INDEX": {
        "Title": [
            "ALTER INDEX"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054342"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "ALTER INDEX [ schema.]index_name \n    {  RENAME TO new_name \n    | parallel_option \n    | TABLESPACE tablespace_name\n    }; \n\nparallel_option:  \n      PARALLEL [COMP_EQ] integer \n    | NOPARALLEL   \n",
        "Description": [
            "AlTER INDEX 语句用于更改现有索引名称、并行度或索引存储的表空间。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nschema.\n指定索引所在的 Schema。如果省略 schema.，则默认索引在您自己的 Schema 中。\n\n\nindex_name\n指定待更改的索引名称。\n\n\nnew_name\n指定索引的新名称。\n\n\nparallel_option\n更改索引上查询的并行度。 \n      \nNOPARALLEL：指定串行执行，并行度为 1，为默认配置。\nPARALLEL [COMP_EQ] integer：指定并行度，即并行操作中使用的并行线程数。PARALLEL 关键字指示启用索引的并行处理；COMP_EQ 是一个可选的关键字，用于指定并行度的限制条件；integer 为取值大于等于 1 的整数，表示并行度级别。\n\n\n\ntablespace_name\n指定希望索引存储的表空间。\n\n\n"
        ],
        "Examples": [
            "obclient> ALTER INDEX index1 RENAME TO index2;\n",
            "obclient> ALTER INDEX index3 NOPARALLEL;\n"
        ],
        "Detailed Examples": [
            "假设数据库中存在索引 index1，将其重命名为 index2，执行示例如下：",
            "obclient> ALTER INDEX index1 RENAME TO index2;\n",
            "假设数据库中存在索引 index3，且该索引上查询的并行度为 3，修改索引 index3 的并行度为 1，执行示例如下：",
            "obclient> ALTER INDEX index3 NOPARALLEL;\n"
        ]
    },
    "ALTER KEYSTORE": {
        "Title": [
            "ALTER KEYSTORE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054344"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "/* 打开/关闭 Keystore */\nADMINISTER KEY MANAGEMENT SET KEYSTORE [OPEN | CLOSE] IDENTIFIED BY [password];\n\n/* 设置密钥 */\nADMINISTER KEY MANAGEMENT SET KEY IDENTIFIED BY [password]\n",
        "Description": [
            "该语句用于修改 Keystore 属性，包括打开/关闭 Keystore、修改 Keystore 密码、生成 Keystore 密钥。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nOPEN\n打开 Keystore。\n\n\nCLOSE\n关闭 Keystore。\n\n\npassword\n指定访问控制 Keystore 的密码。\n\n\n"
        ],
        "Examples": [
            "obclient> ADMINISTER KEY MANAGEMENT SET KEYSTORE OPEN IDENTIFIED BY **1***;\n",
            "obclient> ADMINISTER KEY MANAGEMENT SET KEY IDENTIFIED BY **1***;\n"
        ],
        "Detailed Examples": [
            "打开 Keystore，在 Keystore 处于 open 状态时，才能访问加密表以及执行 SET KEY 操作。",
            "obclient> ADMINISTER KEY MANAGEMENT SET KEYSTORE OPEN IDENTIFIED BY **1***;\n",
            "更新 Keystore 中存放的主密钥。",
            "obclient> ADMINISTER KEY MANAGEMENT SET KEY IDENTIFIED BY **1***;\n"
        ]
    },
    "ALTER OUTLINE": {
        "Title": [
            "ALTER OUTLINE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054331"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "ALTER OUTLINE outline_name ADD stmt [ TO target_stmt ]\n",
        "Description": [
            "该语句仅支持使用 SQL_TEXT 创建的 Outline，可用于添加绑定 Outline 和限流规则。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\noutline_name\n指定要创建的 Outline 名称。\n\n\nstmt\n一般为一个带有 Hint 和原始参数的 DML 语句。\n\n\nTO target_stmt\n如果不指定 TO target_stmt，则表示如果数据库接受的 SQL 参数化后与 stmt 去掉 Hint 参数化文本相同，则将该 SQL 绑定 stmt 中 Hint 生成执行计划；如果期望对含有 Hint 的语句进行固定计划，则需要 TO target_stmt 来指明原始的 SQL。  注意 在使用 target_stmt 时，严格要求 stmt 与target_stmt 在去掉 Hint 后完全匹配。\n\n\n"
        ],
        "Examples": [
            "obclient> CREATE OUTLINE outline1 ON SELECT /*+max_concurrent(1)*/ * FROM tbl1 WHERE col1 =1\n           AND col2 = 1;\nobclient> ALTER OUTLINE outline1 ADD SELECT /*+max_concurrent(1)*/ * FROM tbl1 WHERE col1 =1\n           AND col2 = ?;\nobclient> ALTER OUTLINE outline1 ADD SELECT /*+max_concurrent(1)*/ * FROM tbl1 WHERE col1 =?\n           AND col2 = 1;\n",
            "obclient> CREATE OUTLINE outline2 ON SELECT /*+max_concurrent(1)*/ * FROM tbl1,tbl2\n          WHERE tbl1.col1 = 1;\nobclient> ALTER OUTLINE outline2 ADD SELECT /*+use_nl(tbl2)*/ * FROM tbl1,tbl2\n          WHERE tbl1.col1 = 1;\n"
        ],
        "Detailed Examples": [
            "通过 ALTER OUTLINE 来添加限流规则。",
            "obclient> CREATE OUTLINE outline1 ON SELECT /*+max_concurrent(1)*/ * FROM tbl1 WHERE col1 =1\n           AND col2 = 1;\nobclient> ALTER OUTLINE outline1 ADD SELECT /*+max_concurrent(1)*/ * FROM tbl1 WHERE col1 =1\n           AND col2 = ?;\nobclient> ALTER OUTLINE outline1 ADD SELECT /*+max_concurrent(1)*/ * FROM tbl1 WHERE col1 =?\n           AND col2 = 1;\n",
            "\n",
            "通过 ALTER OUTLINE 来添加执行计划。",
            "obclient> CREATE OUTLINE outline2 ON SELECT /*+max_concurrent(1)*/ * FROM tbl1,tbl2\n          WHERE tbl1.col1 = 1;\nobclient> ALTER OUTLINE outline2 ADD SELECT /*+use_nl(tbl2)*/ * FROM tbl1,tbl2\n          WHERE tbl1.col1 = 1;\n"
        ]
    },
    "ALTER PROFILE": {
        "Title": [
            "ALTER PROFILE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054351"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "ALTER PROFILE \"profile_name\"\n   LIMIT\n { FAILED_LOGIN_ATTEMPTS\n  | PASSWORD_LIFE_TIME\n  | PASSWORD_LOCK_TIME\n  | PASSWORD_GRACE_TIME\n  }\n  { integer | UNLIMITED | DEFAULT }；\n",
        "Description": [
            "该语句用于配置文件中添加、修改或删除密码管理参数。",
            "\n说明\n对带有 ALTER PROFILE 语句的配置文件所做的更改仅影响其后续会话中的用户，而不影响其当前会话中的用户。\n"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nprofile_name\n指定要修改的配置文件的名称。\n\n\nFAILED_LOGIN_ATTEMPTS\n指定连续登录用户账号失败的次数。\n\n\nPASSWORD_LOCK_TIME\n当账户在限定的次数内连续尝试登录失败后，指定账户被锁定的天数。\n\n\nPASSWORD_LIFE_TIME\n指定同一密码可用于身份验证的有效天数。\n\n\nPASSWORD_GRACE_TIME\n指定解除警告并开始允许账户登录的宽限期天数。\n\n\ninteger\n表示为该参数设置的限制类型格式为整数。\n\n\nUNLIMITED\n表示没有为该参数设置限制。\n\n\nDEFAULT\n表示使用该参数的默认限制。\n\n\n"
        ],
        "Examples": [
            "obclient> ALTER PROFILE \"profile1\" LIMIT FAILED_LOGIN_ATTEMPTS 5 PASSWORD_LOCK_TIME 1;\nQuery OK, 0 rows affected\n",
            "obclient> ALTER PROFILE \"profile2\" LIMIT PASSWORD_LIFE_TIME 90 PASSWORD_GRACE_TIME 5;\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "更改限制登录尝试和密码锁定时间：将配置文件 profile1 的 FAILED_LOGIN_ATTEMPTS 设置为 5 次，PASSWORD_LOCK_TIME 设置为 1 天。",
            "obclient> ALTER PROFILE \"profile1\" LIMIT FAILED_LOGIN_ATTEMPTS 5 PASSWORD_LOCK_TIME 1;\nQuery OK, 0 rows affected\n",
            "更改密码有效期和宽限期：将配置文件 profile2 的 PASSWORD_LIFE_TIME 设置为 90 天，PASSWORD_GRACE_TIME 设置为 5 天。",
            "obclient> ALTER PROFILE \"profile2\" LIMIT PASSWORD_LIFE_TIME 90 PASSWORD_GRACE_TIME 5;\nQuery OK, 0 rows affected\n"
        ]
    },
    "ALTER ROLE": {
        "Title": [
            "ALTER ROLE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054341"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "ALTER ROLE role_name\n{ NOT IDENTIFIED\n| IDENTIFIED BY password\n} ;\n",
        "Description": [
            "该语句用于更改启用角色所需的验证方式。",
            "\n说明\n已启用该角色的用户会话不会受影响。\n"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nrole_name\n指定要修改的角色的名称。\n\n\nNOT IDENTIFIED\n指定角色启用时不使用任何验证方法。\n\n\nIDENTIFIED BY password\n指定启用角色的验证密码。 说明 被授予该角色的用户必须指定密码才能使用 SET ROLE 语句启用该角色。\n\n\n"
        ],
        "Examples": [
            "obclient> CREATE ROLE role1;\nQuery OK, 0 rows affected\n\nobclient> ALTER ROLE role1 IDENTIFIED BY **1***;\nQuery OK, 0 rows affected\n",
            "obclient> ALTER ROLE role1 IDENTIFIED BY **2***;\nQuery OK, 0 rows affected\n",
            "obclient> ALTER ROLE role1 NOT IDENTIFIED;\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "创建角色 role1，并将角色 role1 验证方法改为使用密码验证，密码是 **1***。",
            "obclient> CREATE ROLE role1;\nQuery OK, 0 rows affected\n\nobclient> ALTER ROLE role1 IDENTIFIED BY **1***;\nQuery OK, 0 rows affected\n",
            "将角色 role1 的验证密码更改为 **2***。",
            "obclient> ALTER ROLE role1 IDENTIFIED BY **2***;\nQuery OK, 0 rows affected\n",
            "将角色 role1 更改为不使用任何验证方法即可启用。",
            "obclient> ALTER ROLE role1 NOT IDENTIFIED;\nQuery OK, 0 rows affected\n"
        ]
    },
    "ALTER SEQUENCE": {
        "Title": [
            "ALTER SEQUENCE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054347"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "ALTER SEQUENCE [ schema. ] sequence_name\n{ RESTART [ START WITH int_value ]\n|[ MINVALUE int_value | NOMINVALUE ]\n|[ MAXVALUE int_value | NOMAXVALUE ]\n|[ INCREMENT BY int_value ]\n|[ CACHE int_value | NOCACHE ]\n|[ ORDER | NOORDER ]\n|[ CYCLE | NOCYCLE]\n}\n;\n",
        "Description": [
            "该语句用于更改现有序列的增量、最小值和最大值、缓存数量和行为，对应操作仅影响后续的序列号。",
            "\n说明\n用户只能操作属于自己 Schema 中的序列，或者拥有该序列的有 ALTER 对象权限。\n"
        ],
        "Illustration": [],
        "Examples": [
            "obclient> ALTER SEQUENCE seq1 MAXVALUE 1024 CYCLE;\nQuery OK, 0 rows affected\n",
            "obclient> ALTER SEQUENCE seq3 MAXVALUE 1500 INCREMENT BY 5 CYCLE NOCACHE ORDER;\nQuery OK, 0 rows affected\n",
            "obclient> ALTER SEQUENCE seq3 RESTART;\nQuery OK, 0 rows affected\n\nobclient> ALTER SEQUENCE seq3 RESTART START WITH 3;\nQuery OK, 0 rows affected\n",
            "obclient> ALTER SEQUENCE seq3 START WITH 3 RESTART MINVALUE  -100 CYCLE;\nQuery OK, 0 rows affected\n\nobclient> ALTER SEQUENCE seq3 RESTAR START WITH 3 T MINVALUE  -100 CYCLE;\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "修改自增列 seq1 的最大值，并指定自增值循环生成。",
            "obclient> ALTER SEQUENCE seq1 MAXVALUE 1024 CYCLE;\nQuery OK, 0 rows affected\n",
            "更改序列 seq3 的最大值和自增步数，开启 CYCLE 和 ORDER，并指定 NOCACHE 以指示序列的值未预先分配。",
            "obclient> ALTER SEQUENCE seq3 MAXVALUE 1500 INCREMENT BY 5 CYCLE NOCACHE ORDER;\nQuery OK, 0 rows affected\n",
            "重置序列值，并从 3 开始取值。",
            "obclient> ALTER SEQUENCE seq3 RESTART;\nQuery OK, 0 rows affected\n\nobclient> ALTER SEQUENCE seq3 RESTART START WITH 3;\nQuery OK, 0 rows affected\n",
            "RESTART 的位置可以在选项的任意位置。如下示例中的两条重置序列值的 SQL 语句是等价的。",
            "obclient> ALTER SEQUENCE seq3 START WITH 3 RESTART MINVALUE  -100 CYCLE;\nQuery OK, 0 rows affected\n\nobclient> ALTER SEQUENCE seq3 RESTAR START WITH 3 T MINVALUE  -100 CYCLE;\nQuery OK, 0 rows affected\n"
        ]
    },
    "ALTER SESSION": {
        "Title": [
            "ALTER SESSION"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054332"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "ALTER SESSION {\n  alter_session_set_clause\n| { ENABLE | DISABLE | FORCE } PARALLEL { DML | QUERY } [ PARALLEL integer ]\n};\n\nalter_session_set_clause：\nSET {\n  CURRENT_SCHEMA = current_schema_name\n| ISOLATION_LEVEL = [ READ UNCOMMITTED\n                                   | READ COMMITTED\n                                   | REPEATABLE READ\n                                   | SERIALIZABLE];\n| variable_name = variable_value[,variable_name = variable_value...]\n}\n",
        "Description": [
            "该语句用来设置或修改 Session 状态等信息。",
            "\n说明\nALTER SESSION 对应了多种功能的语句，OceanBase 数据库目前支持以下四种：\n\n切换当前 Session 连接的数据库。\n修改当前 Session 的隔离级别。\n设置 Session 变量，支持同一个语句设置多个变量。\n设置 QUERY 或 DML 的并行执行能力。\n\n"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nCURRENT_SCHEMA\n指定 Session 连接要切换到的 Schema 名称。\n\n\nISOLATION_LEVEL\n指定 Session 的隔离级别。\n\n\nvariable_name = variable_value[,variable_name = variable_value…];\n指定要设置的 Session 变量名称和取值。设置多个变量时，变量之间没有逗号分隔。\n\n\n* { ENABLE | DISABLE | FORCE } PARALLEL\n设置 QUERY 或 DML 的并行执行能力： * ENABLE：默认情况下 Session 上并行度的值根据 表的 DOP 值进行决定 \n      \nDISABLE：默认情况下 Session 上的并行度的值为 1。\nFORCE：指定 QUERY 或 DML 的并行度的值，此时参数 PARALLEL integer 必须指定。\n 注意 当指定并行度时，优先级关系为： 通过 Hint 指定的并行度 > 通过 ALTER SESSION 指定的并行度 > 表级别的并行度。\n\n\n"
        ],
        "Examples": [
            "obclient> ALTER SESSION SET CURRENT_SCHEMA = user1;\nQuery OK, 0 rows affected\n",
            "obclient> ALTER SESSION SET recyclebin = 'on'\n                           sql_warnings = 'on'\n                           tx_isolation = 'read-committed';\nQuery OK, 0 rows affected\n",
            "/*以并发度为 3 并行执行*/\nobclient> ALTER SESSION FORCE PARALLEL QUERY PARALLEL 3;\nQuery OK, 0 rows affected\n\nobclient> SELECT * FROM tbl1;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    1 |    1 |\n+------+------+\n1 row in set\n\n/*串行执行*/\nobclient> ALTER SESSION FORCE PARALLEL QUERY PARALLEL 1;\nQuery OK, 0 rows affected\n\nobclient> SELECT * FROM tbl1;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    1 |    1 |\n+------+------+\n1 row in set\n\n/*开启 PDML 路径，以并发度为 3 并行执行*/\nobclient> ALTER SESSION FORCE PARALLEL DML PARALLEL 3;\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO tbl2 SELECT * FROM tbl1;\nQuery OK, 1 row affected\n\n/*串行执行*/\nobclient> ALTER SESSION FORCE PARALLEL DML PARALLEL 1;\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO tbl2 SELECT * FROM tbl1;\nQuery OK, 1 row affected\n"
        ],
        "Detailed Examples": [
            "将用户切换至 user1 模式。",
            "obclient> ALTER SESSION SET CURRENT_SCHEMA = user1;\nQuery OK, 0 rows affected\n",
            "修改 Session 的变量值 recyclebin、sql_warnings 和 tx_isolation。",
            "obclient> ALTER SESSION SET recyclebin = 'on'\n                           sql_warnings = 'on'\n                           tx_isolation = 'read-committed';\nQuery OK, 0 rows affected\n",
            "设置 Session 上 QUERY 和 DML 的并行执行。",
            "/*以并发度为 3 并行执行*/\nobclient> ALTER SESSION FORCE PARALLEL QUERY PARALLEL 3;\nQuery OK, 0 rows affected\n\nobclient> SELECT * FROM tbl1;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    1 |    1 |\n+------+------+\n1 row in set\n\n/*串行执行*/\nobclient> ALTER SESSION FORCE PARALLEL QUERY PARALLEL 1;\nQuery OK, 0 rows affected\n\nobclient> SELECT * FROM tbl1;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    1 |    1 |\n+------+------+\n1 row in set\n\n/*开启 PDML 路径，以并发度为 3 并行执行*/\nobclient> ALTER SESSION FORCE PARALLEL DML PARALLEL 3;\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO tbl2 SELECT * FROM tbl1;\nQuery OK, 1 row affected\n\n/*串行执行*/\nobclient> ALTER SESSION FORCE PARALLEL DML PARALLEL 1;\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO tbl2 SELECT * FROM tbl1;\nQuery OK, 1 row affected\n"
        ]
    },
    "ALTER SYSTEM FLUSH PLAN CACHE": {
        "Title": [
            "ALTER SYSTEM FLUSH PLAN CACHE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054333"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "ALTER SYSTEM FLUSH PLAN CACHE [GLOBAL];\n",
        "Description": [
            "删除计划缓存。",
            "\n说明\n对于 Oracle 租户，如果要清除租户下指定 SQL 或 Schema 的计划缓存，需要使用 DBMS_PLAN_CACHE 系统包。\n"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nGLOBAL\n为可选字段。如果不指定该参数，表示清空本机的计划缓存。反之，则表示清空该租户所在的所有服务器上的计划缓存。\n\n\n"
        ],
        "Examples": [
            "obclient> ALTER SYSTEM FLUSH PLAN CACHE GLOBAL;\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "obclient> ALTER SYSTEM FLUSH PLAN CACHE GLOBAL;\nQuery OK, 0 rows affected\n"
        ]
    },
    "ALTER SYSTEM KILL SESSION": {
        "Title": [
            "ALTER SYSTEM KILL SESSION"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054309"
        ],
        "Category": [
            "DCL"
        ],
        "Feature": "ALTER SYSTEM KILL SESSION 'session_id, serial#';\n\nALTER SYSTEM KILL SESSION 'session_id' [IMMEDIATE];\n",
        "Description": [
            "该语句用于终止一个会话。该语句需要用户具备 ALTER SYSTEM 权限才能执行。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nsession_id\n当前会话的 Client Session ID，该 ID 是会话在客户端中的唯一标识。 \n      \n说明\n可以通过 SQL 语句 SHOW PROCESSLIST; 查看 session_id。\n\n\n\nserial#\n当前版本未实现语义，仅作语法兼容。\n\n\nIMMEDIATE\n立即切回指定 Session 实现 KILL，为可选项。当前版本未实现语义，仅作语法兼容。\n\n\n"
        ],
        "Examples": [
            "obclient [SYS]> CREATE USER kill_user IDENTIFIED BY killuser123;\nQuery OK, 0 rows affected\n\nobclient [SYS]> GRANT CREATE SESSION TO kill_user;\nQuery OK, 0 rows affected\n\nobclient [SYS]> GRANT ALTER SYSTEM TO kill_user;\nQuery OK, 0 rows affected\n\nobclient [KILL_USER]> SHOW PROCESSLIST;\n+------------+-----------+----------------------+-----------+---------+------+--------+------------------+\n| ID         | USER      | HOST                 | DB        | COMMAND | TIME | STATE  | INFO             |\n+------------+-----------+----------------------+-----------+---------+------+--------+------------------+\n| 3221487726 | KILL_USER | 100.xx.xxx.xxx:34803 | KILL_USER | Query   |    0 | ACTIVE | SHOW PROCESSLIST |\n| 3221487722 | SYS       | 100.xx.xxx.xxx:40025 | SYS       | Sleep   |   93 | SLEEP  | NULL             |\n+------------+-----------+----------------------+-----------+---------+------+--------+------------------+\n1 row in set\n\nobclient [KILL_USER]> ALTER SYSTEM KILL SESSION '3221487726';\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "如下示例为创建用户 kill_user 并赋予权限，使用该用户登录数据库并查询已连接的 Session 的 ID，再终止该 Session。",
            "obclient [SYS]> CREATE USER kill_user IDENTIFIED BY killuser123;\nQuery OK, 0 rows affected\n\nobclient [SYS]> GRANT CREATE SESSION TO kill_user;\nQuery OK, 0 rows affected\n\nobclient [SYS]> GRANT ALTER SYSTEM TO kill_user;\nQuery OK, 0 rows affected\n\nobclient [KILL_USER]> SHOW PROCESSLIST;\n+------------+-----------+----------------------+-----------+---------+------+--------+------------------+\n| ID         | USER      | HOST                 | DB        | COMMAND | TIME | STATE  | INFO             |\n+------------+-----------+----------------------+-----------+---------+------+--------+------------------+\n| 3221487726 | KILL_USER | 100.xx.xxx.xxx:34803 | KILL_USER | Query   |    0 | ACTIVE | SHOW PROCESSLIST |\n| 3221487722 | SYS       | 100.xx.xxx.xxx:40025 | SYS       | Sleep   |   93 | SLEEP  | NULL             |\n+------------+-----------+----------------------+-----------+---------+------+--------+------------------+\n1 row in set\n\nobclient [KILL_USER]> ALTER SYSTEM KILL SESSION '3221487726';\nQuery OK, 0 rows affected\n"
        ]
    },
    "ALTER SYSTEM PARAMETER": {
        "Title": [
            "ALTER SYSTEM PARAMETER"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054324"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "ALTER SYSTEM SET parameter_name = expression;\n",
        "Description": [
            "该语句用来修改本租户的配置项信息。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nparameter_name\n指定要修改的配置项名称。\n\n\nexpression\n指定修改后的配置项的值。\n\n\n"
        ],
        "Examples": [
            "obclient> SHOW PARAMETERS LIKE 'log_disk_utilization_threshold';\n+-------+----------+----------------+----------+--------------------------------+-----------+-------+--------------------------------------------------------------------------------------------------------------------------------------+------------+--------+---------+-------------------+\n| zone  | svr_type | svr_ip         | svr_port | name                           | data_type | value | info                                                                                                                                 | section    | scope  | source  | edit_level        |\n+-------+----------+----------------+----------+--------------------------------+-----------+-------+--------------------------------------------------------------------------------------------------------------------------------------+------------+--------+---------+-------------------+\n| zone1 | observer | xx.xx.xx.xx    |     2882 | log_disk_utilization_threshold | NULL      | 80    | log disk utilization threshold before reuse log files, should be smaller than log_disk_utilization_limit_threshold. Range: [10, 100) | LOGSERVICE | TENANT | DEFAULT | DYNAMIC_EFFECTIVE |\n+-------+----------+----------------+----------+--------------------------------+-----------+-------+--------------------------------------------------------------------------------------------------------------------------------------+------------+--------+---------+-------------------+\n1 row in set\n\nobclient> ALTER SYSTEM SET log_disk_utilization_threshold = 20;\nQuery OK, 0 rows affected\n\nobclient> SHOW PARAMETERS LIKE 'log_disk_utilization_threshold';\n+-------+----------+----------------+----------+--------------------------------+-----------+-------+--------------------------------------------------------------------------------------------------------------------------------------+------------+--------+---------+-------------------+\n| zone  | svr_type | svr_ip         | svr_port | name                           | data_type | value | info                                                                                                                                 | section    | scope  | source  | edit_level        |\n+-------+----------+----------------+----------+--------------------------------+-----------+-------+--------------------------------------------------------------------------------------------------------------------------------------+------------+--------+---------+-------------------+\n| zone1 | observer | xx.xx.xx.xx    |     2882 | log_disk_utilization_threshold | NULL      | 20    | log disk utilization threshold before reuse log files, should be smaller than log_disk_utilization_limit_threshold. Range: [10, 100) | LOGSERVICE | TENANT | DEFAULT | DYNAMIC_EFFECTIVE |\n+-------+----------+----------------+----------+--------------------------------+-----------+-------+--------------------------------------------------------------------------------------------------------------------------------------+------------+--------+---------+-------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "修改配置项 log_disk_utilization_threshold 的信息。",
            "obclient> SHOW PARAMETERS LIKE 'log_disk_utilization_threshold';\n+-------+----------+----------------+----------+--------------------------------+-----------+-------+--------------------------------------------------------------------------------------------------------------------------------------+------------+--------+---------+-------------------+\n| zone  | svr_type | svr_ip         | svr_port | name                           | data_type | value | info                                                                                                                                 | section    | scope  | source  | edit_level        |\n+-------+----------+----------------+----------+--------------------------------+-----------+-------+--------------------------------------------------------------------------------------------------------------------------------------+------------+--------+---------+-------------------+\n| zone1 | observer | xx.xx.xx.xx    |     2882 | log_disk_utilization_threshold | NULL      | 80    | log disk utilization threshold before reuse log files, should be smaller than log_disk_utilization_limit_threshold. Range: [10, 100) | LOGSERVICE | TENANT | DEFAULT | DYNAMIC_EFFECTIVE |\n+-------+----------+----------------+----------+--------------------------------+-----------+-------+--------------------------------------------------------------------------------------------------------------------------------------+------------+--------+---------+-------------------+\n1 row in set\n\nobclient> ALTER SYSTEM SET log_disk_utilization_threshold = 20;\nQuery OK, 0 rows affected\n\nobclient> SHOW PARAMETERS LIKE 'log_disk_utilization_threshold';\n+-------+----------+----------------+----------+--------------------------------+-----------+-------+--------------------------------------------------------------------------------------------------------------------------------------+------------+--------+---------+-------------------+\n| zone  | svr_type | svr_ip         | svr_port | name                           | data_type | value | info                                                                                                                                 | section    | scope  | source  | edit_level        |\n+-------+----------+----------------+----------+--------------------------------+-----------+-------+--------------------------------------------------------------------------------------------------------------------------------------+------------+--------+---------+-------------------+\n| zone1 | observer | xx.xx.xx.xx    |     2882 | log_disk_utilization_threshold | NULL      | 20    | log disk utilization threshold before reuse log files, should be smaller than log_disk_utilization_limit_threshold. Range: [10, 100) | LOGSERVICE | TENANT | DEFAULT | DYNAMIC_EFFECTIVE |\n+-------+----------+----------------+----------+--------------------------------+-----------+-------+--------------------------------------------------------------------------------------------------------------------------------------+------------+--------+---------+-------------------+\n1 row in set\n"
        ]
    },
    "ALTER TABLE": {
        "Title": [
            "ALTER TABLE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054361"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "alter_table_stmt:\n      ALTER TABLE table_name alter_table_action_list;     \n\nalter_table_action_list:\n    alter_table_action [, alter_table_action ...]\n\nalter_table_action:\n      ADD {column_definition | (column_definition_list)}\n    | ADD [CONSTRAINT [constraint_name]] UNIQUE (column_name [, column_name ]...)\n    | ADD [CONSTRAINT [constraint_name]] FOREIGN KEY (column_name_list) references_clause\n    | ADD [CONSTRAINT [constraint_name]] CHECK (expr)\n    | ADD CONSTRAINT constraint_name PRIMARY KEY (column_name)\n    | ADD CONSTRAINT constraint_name FOREIGN KEY(foreign_col_name) REFERENCES              \n        reference_tbl_name(column_name);\n    | ALTER INDEX index_name [VISIBLE | INVISIBLE]\n\n    | ADD range_partition_list\n    | ADD COLUMN GROUP([all columns, ]each column)\n    | DROP {PARTITION | SUBPARTITION} partition_name_list [UPDATE GLOBAL INDEXES]\n    | DROP TABLEGROUP\n    | DROP CONSTRAINT constraint_name\n    | DROP PRIMARY KEY\n    | DROP COLUMN column_name\n    | DROP COLUMN GROUP([all columns, ]each column)\n    | {ENABLE | DISABLE} CONSTRAINT constraint_name\n    | MODIFY [COLUMN] column_definition\n    | MODIFY CONSTRAINT constraint_name { ENABLE | DISABLE }\n    | MODIFY PRIMARY KEY (column_name_list)\n    | RENAME [TO] table_name\n    | RENAME COLUMN old_col_name TO new_col_name\n    | RENAME { PARTITION | SUBPARITION } partition_name TO new_name\n    | SET TABLEGROUP tablegroup_name\n    | [SET] table_option_list\n    | TRUNCATE {PARTITION | SUBPARTITION} partition_name_list [UPDATE GLOBAL INDEXES]\n    | EXCHANGE PARTITION partition_name WITH TABLE non_partition_table_name INCLUDING INDEXES WITHOUT VALIDATION\n\n\nrename_table_action_list:\n    rename_table_action [, rename_table_action ...]\n\nrename_table_action:\n    table_name TO table_name\n\ncolumn_definition_list:\n    column_definition [, column_definition ...]\n\ncolumn_definition:\n    column_name data_type\n    [DEFAULT const_value] [AUTO_INCREMENT]\n    [NULL | NOT NULL] [[PRIMARY] KEY] [UNIQUE [KEY]] [COMMENT string_value] [SKIP_INDEX(skip_index_option_list)]\n\nskip_index_option_list:\n    skip_index_option [,skip_index_option ...]\n\nskip_index_option:\n    MIN_MAX\n    | SUM\n\ncolumn_desc_list:\n    column_desc [, column_desc ...]\n\ncolumn_desc:\n     column_name [(length)] [ASC | DESC]\n\nreferences_clause:\n     REFERENCES table_name [ (column_name, column_name ...) ] [ON DELETE {SET NULL | CASCADE}]\n\n\nindex_option:\n      [GLOBAL | LOCAL]\n    | block_size\n    | compression\n    | STORING(column_name_list)\n    | COMMENT string_value\n\ntable_option_list:\n    table_option [ table_option ...]\n\ntable_option:\n      table_group\n    | block_size\n    | compression\n    | AUTO_INCREMENT [=] INT_VALUE\n    | COMMENT string_value\n    | parallel_clause\n    | TABLE_MODE [=] 'table_mode_value'\n\nparallel_clause:\n    {NOPARALLEL | PARALLEL integer}\n\ntable_mode_value:\n    NORMAL\n    | QUEUING\n    | MODERATE\n    | SUPER\n    | EXTREME\n\npartition_option:\n      PARTITION BY HASH(column_name_list)\n      [subpartition_option] hash_partition_define\n    | PARTITION BY RANGE (column_name_list)\n      [subpartition_option] (range_partition_list)\n    | PARTITION BY LIST (column_name_list)\n      [subpartition_option] (list_partition_list)\n\n/*模板化二级分区*/\nsubpartition_option:\n      SUBPARTITION BY HASH (column_name_list) hash_subpartition_define\n    | SUBPARTITION BY RANGE (column_name_list) SUBPARTITION TEMPLATE\n      (range_subpartition_list)\n    | SUBPARTITION BY LIST (column_name_list) SUBPARTITION TEMPLATE\n      (list_subpartition_list)\n\n/*非模板化二级分区*/\nsubpartition_option:\n      SUBPARTITION BY HASH (column_name_list)\n    | SUBPARTITION BY RANGE (column_name_list)\n    | SUBPARTITION BY LIST (column_name_list)\n\nsubpartition_list:\n      (hash_subpartition_list)\n    | (range_subpartition_list)\n    | (list_subpartition_list)\n\nhash_partition_define:\n      PARTITIONS partition_count [TABLESPACE tablespace] [compression]\n    | (hash_partition_list)\n\nhash_partition_list:\n    hash_partition [, hash_partition, ...]\n\nhash_partition:\n    partition [partition_name] [subpartition_list/*仅非模板化二级分区可定义*/]\n\nhash_subpartition_define:\n      SUBPARTITIONS subpartition_count\n    | SUBPARTITION TEMPLATE (hash_subpartition_list)\n\nhash_subpartition_list:\n    hash_subpartition [, hash_subpartition, ...]\n\nhash_subpartition:\n    subpartition [subpartition_name]\n\nrange_partition_list:\n    range_partition [, range_partition ...]\n\nrange_partition:\n    PARTITION [partition_name]\n    VALUES LESS THAN {(expression_list) | (MAXVALUE)}\n    [subpartition_list/*仅非模板化二级分区可定义*/]\n    [ID = num] [physical_attribute_list] [compression]\n\nrange_subpartition_list:\n    range_subpartition [, range_subpartition ...]\n\nrange_subpartition:\n    SUBPARTITION subpartition_name\n    VALUES LESS THAN {(expression_list) | MAXVALUE} [physical_attribute_list]\n\nlist_partition_list:\n    list_partition [, list_partition] ...\n\nlist_partition:\n    PARTITION [partition_name]\n    VALUES (DEFAULT|expression_list)\n    [subpartition_list/*仅非模板化二级分区可定义*/]\n    [ID num] [physical_attribute_list] [compression]\n\nlist_subpartition_list:\n    list_subpartition [, list_subpartition] ...\n\nlist_subpartition:\n    SUBPARTITION [partition_name] VALUES (DEFAULT|expression_list) [physical_attribute_list]\n\nexpression_list:\n    expression [, expression ...]\n\ncolumn_name_list:\n    column_name [, column_name ...]\n\npartition_name_list:\n    partition_name [, partition_name ...]\n\npartition_count | subpartition_count:\n    INT_VALUE\n",
        "Description": [
            "该语句用来修改已存在的表的结构，包括修改表及表属性、新增列、修改列及属性、删除列等。"
        ],
        "Illustration": [],
        "Examples": [
            "obclient> CREATE TABLE tbl1(col1 VARCHAR(3));\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLE tbl1 MODIFY col1 CHAR(10);\nQuery OK, 0 rows affected\n\nobclient> DESCRIBE tbl1;\n+-------+----------+------+-----+---------+-------+\n| FIELD | TYPE     | NULL | KEY | DEFAULT | EXTRA |\n+-------+----------+------+-----+---------+-------+\n| COL1  | CHAR(10) | YES  | NULL | NULL    | NULL  |\n+-------+----------+------+-----+---------+-------+\n1 row in set\n",
            "obclient> ALTER TABLE tbl1 RENAME COLUMN col1 TO col2;\nQuery OK, 0 rows affected\n\nobclient> DESCRIBE tbl1;\n+-------+-------------+------+-----+---------+-------+\n| FIELD | TYPE        | NULL | KEY | DEFAULT | EXTRA |\n+-------+-------------+------+-----+---------+-------+\n| COL2  | VARCHAR2(10) | YES  | NULL | NULL    | NULL  |\n+-------+-------------+------+-----+---------+-------+\n1 row in set\n",
            "obclient> CREATE TABLE tbl2 (col1 NUMBER(30) PRIMARY KEY,col2 VARCHAR(50));\nQuery OK, 0 rows affected\n",
            "obclient> ALTER TABLE tbl2 ADD col3 NUMBER(30);\nQuery OK, 0 rows affected\n\nobclient> DESCRIBE tbl2;\n+-------+--------------+------+-----+---------+-------+\n| FIELD | TYPE         | NULL | KEY | DEFAULT | EXTRA |\n+-------+--------------+------+-----+---------+-------+\n| COL1  | NUMBER(30)   | NO   | PRI | NULL    | NULL  |\n| COL2  | VARCHAR2(50) | YES  | NULL | NULL    | NULL  |\n| COL3  | NUMBER(30)   | YES  | NULL | NULL    | NULL  |\n+-------+--------------+------+-----+---------+-------+\n3 rows in set\n",
            "obclient> ALTER TABLE tbl2 DROP COLUMN col3;\nQuery OK, 0 rows affected\n\nobclient> DESCRIBE tbl2;\n+-------+--------------+------+-----+---------+-------+\n| FIELD | TYPE         | NULL | KEY | DEFAULT | EXTRA |\n+-------+--------------+------+-----+---------+-------+\n| COL1  | NUMBER(30)   | NO   | PRI | NULL    | NULL  |\n| COL2  | VARCHAR2(50) | YES  | NULL | NULL    | NULL  |\n+-------+--------------+------+-----+---------+-------+\n2 rows in set\n",
            "obclient> CREATE TABLE tbl2 (col1 NUMBER(30) PRIMARY KEY,col2 VARCHAR(50), col3 INT);\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLE tbl2 ADD CONSTRAINT constraint_TBL2 UNIQUE (col2, col3);\nQuery OK, 0 rows affected\n\nobclient [SYS]> DESC tbl2;\n+-------+--------------+------+-----+---------+-------+\n| FIELD | TYPE         | NULL | KEY | DEFAULT | EXTRA |\n+-------+--------------+------+-----+---------+-------+\n| COL1  | NUMBER(30)   | NO   | PRI | NULL    | NULL  |\n| COL2  | VARCHAR2(50) | YES  | MUL | NULL    | NULL  |\n| COL3  | NUMBER(38)   | YES  | NULL | NULL    | NULL  |\n+-------+--------------+------+-----+---------+-------+\n3 rows in set\n\nobclient> INSERT INTO tbl2 VALUES('1','2','2');\nQuery OK, 1 row affected\n\nobclient> INSERT INTO tbl2 VALUES('2','2','2');\nORA-00001: unique constraint '2-2' for key 'CONSTRAINT_TBL2' violated\n\nobclient> INSERT INTO tbl2 VALUES('2','3','2');\nQuery OK, 1 row affected\n",
            "obclient> CREATE TABLE ref_t1(c1 INT PRIMARY KEY,C2 INT);\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE ref_t2(c1 INT PRIMARY KEY,C2 INT);\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLE ref_t2 ADD CONSTRAINT fk1 FOREIGN KEY (c2) REFERENCES ref_t1(c1) ON DELETE SET NULL;\nQuery OK, 0 row affected\n",
            "obclient> ALTER TABLE tbl3 MODIFY PARTITION p1 ADD SUBPARTITION p1_r4 VALUES LESS THAN(2022);\nQuery OK, 0 rows affected\n",
            "obclient> ALTER TABLE tbl3 DROP SUBPARTITION p2_r3;\nQuery OK, 0 rows affected\n",
            "obclient> ALTER TABLE tbl3 ADD PARTITION p4 VALUES LESS THAN (400)\n(\n  SUBPARTITION p4_r1 VALUES LESS THAN (2019),\n  SUBPARTITION p4_r2 VALUES LESS THAN (2020),\n  SUBPARTITION p4_r3 VALUES LESS THAN (2021)\n);\nQuery OK, 0 rows affected\n",
            "obclient> CREATE TABLE tbl4(col1 INT, col2 INT, PRIMARY KEY(col1,col2))\n     PARTITION BY RANGE(col1)\n     SUBPARTITION BY RANGE(col2)\n     SUBPARTITION TEMPLATE\n     (\n     SUBPARTITION p0 VALUES LESS THAN (50),\n     SUBPARTITION p1 VALUES LESS THAN (100)\n     )\n     (\n     PARTITION p0 VALUES LESS THAN (100),\n     PARTITION p1 VALUES LESS THAN (200),\n     PARTITION p2 VALUES LESS THAN (300)\n     );\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLE tbl4 ADD PARTITION p3 VALUES LESS THAN (400);\nQuery OK, 0 rows affected\n",
            "obclient> CREATE TABLE tbl5(col1 int primary key, col2 int) PARALLEL 5;\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLE tbl5 PARALLEL 3;\nQuery OK, 0 rows affected\n",
            "obclient> CREATE TABLE MMS_GROUPUSER (\n  \"ID\" VARCHAR2(254 BYTE) NOT NULL,\n  \"GROUPID\" VARCHAR2(254 BYTE),\n  \"USERID\" VARCHAR2(254 BYTE),\n  CONSTRAINT \"PK_MMS_GROUPUSER\" PRIMARY KEY (\"ID\"),\n  CONSTRAINT \"FK_MMS_GROUPUSER_02\" FOREIGN KEY (\"GROUPID\") REFERENCES MMS_GROUPUSER (\"ID\") ON DELETE CASCADE DISABLE\n);\nQuery OK, 0 rows affected\n\nobclient> SELECT CONSTRAINT_NAME,CONSTRAINT_TYPE,TABLE_NAME,STATUS FROM user_constraints WHERE CONSTRAINT_NAME LIKE 'FK_MMS_GROUPUSE%';\n+---------------------+-----------------+---------------+----------+\n| CONSTRAINT_NAME     | CONSTRAINT_TYPE | TABLE_NAME    | STATUS   |\n+---------------------+-----------------+---------------+----------+\n| FK_MMS_GROUPUSER_02 | R               | MMS_GROUPUSER | DISABLED |\n+---------------------+-----------------+---------------+----------+\n1 row in set\n\nobclient> ALTER TABLE MMS_GROUPUSER ENABLE CONSTRAINT FK_MMS_GROUPUSER_02;\nQuery OK, 0 rows affected\n\nobclient> SELECT CONSTRAINT_NAME,CONSTRAINT_TYPE,TABLE_NAME,STATUS FROM user_constraints WHERE CONSTRAINT_NAME LIKE 'FK_MMS_GROUPUSE%';\n+---------------------+-----------------+---------------+---------+\n| CONSTRAINT_NAME     | CONSTRAINT_TYPE | TABLE_NAME    | STATUS  |\n+---------------------+-----------------+---------------+---------+\n| FK_MMS_GROUPUSER_02 | R               | MMS_GROUPUSER | ENABLED |\n+---------------------+-----------------+---------------+---------+\n1 row in set\n",
            "obclient> CREATE TABLE tbl6 (log_id number NOT NULL,log_value varchar2(50),log_date date NOT NULL DEFAULT sysdate)\nPARTITION BY RANGE(log_date)\n(\n    PARTITION M202001 VALUES LESS THAN(TO_DATE('2020/02/01','YYYY/MM/DD'))\n    , PARTITION M202002 VALUES LESS THAN(TO_DATE('2020/03/01','YYYY/MM/DD'))\n    , PARTITION M202003 VALUES LESS THAN(TO_DATE('2020/04/01','YYYY/MM/DD'))\n    , PARTITION M202004 VALUES LESS THAN(TO_DATE('2020/05/01','YYYY/MM/DD'))\n    , PARTITION M202005 VALUES LESS THAN(TO_DATE('2020/06/01','YYYY/MM/DD'))\n    , PARTITION MMAX VALUES LESS THAN (MAXVALUE)\n);\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLE tbl6 TRUNCATE PARTITION M202001, M202002 UPDATE GLOBAL INDEXES;\nQuery OK, 0 rows affected\n",
            "obclient> CREATE TABLE tbl7 (col1 INT, col2 INT, col3 INT,CONSTRAINT tbl7_equal_check1 CHECK(col2 = col3 * 2) ENABLE VALIDATE);\nQuery OK, 0 rows affected\n\nobclient> SELECT CONSTRAINT_NAME,CONSTRAINT_TYPE,TABLE_NAME,STATUS FROM user_constraints WHERE TABLE_NAME LIKE 'TBL%';\n+-------------------+-----------------+------------+---------+\n| CONSTRAINT_NAME   | CONSTRAINT_TYPE | TABLE_NAME | STATUS  |\n+-------------------+-----------------+------------+---------+\n| TBL8_EQUAL_CHECK1 | C               | TBL8       | ENABLED |\n| TBL7_EQUAL_CHECK1 | C               | TBL7       | ENABLED |\n+-------------------+-----------------+------------+---------+\n2 rows in set\n\nobclient> ALTER TABLE tbl7 DROP CONSTRAINT tbl7_equal_check1;\nQuery OK, 0 rows affected\n\nobclient> SELECT CONSTRAINT_NAME,CONSTRAINT_TYPE,TABLE_NAME,STATUS FROM user_constraints WHERE TABLE_NAME LIKE 'TBL%';\n+-------------------+-----------------+------------+---------+\n| CONSTRAINT_NAME   | CONSTRAINT_TYPE | TABLE_NAME | STATUS  |\n+-------------------+-----------------+------------+---------+\n| TBL8_EQUAL_CHECK1 | C               | TBL8       | ENABLED |\n+-------------------+-----------------+------------+---------+\n1 row in set\n",
            "obclient> SHOW TABLEGROUPS;\n+-----------------+------------+---------------+\n| TABLEGROUP_NAME | TABLE_NAME | DATABASE_NAME |\n+-----------------+------------+---------------+\n| TBLGROUP1             | TBL8         | SYS           |\n| TBLGROUP2             | NULL       | NULL          |\n| oceanbase       | NULL       | NULL          |\n+-----------------+------------+---------------+\n3 rows in set\n\nobclient> ALTER TABLE tbl8 SET TABLEGROUP tblgroup2;\nQuery OK, 0 rows affected\n\nobclient> SHOW TABLEGROUPS;\n+-----------------+------------+---------------+\n| TABLEGROUP_NAME | TABLE_NAME | DATABASE_NAME |\n+-----------------+------------+---------------+\n| TBLGROUP1             | NULL       | NULL          |\n| TBLGROUP2             | TBL8         | SYS           |\n| oceanbase       | NULL       | NULL          |\n+-----------------+------------+---------------+\n3 rows in set\n",
            "obclient> CREATE TABLE primary_table (id NUMBER PRIMARY KEY, names VARCHAR(100) NOT NULL, foreign_col NUMBER);\nQuery OK, 0 rows affected\nobclient> CREATE TABLE reference_table (id NUMBER PRIMARY key, comments VARCHAR2(100) NOT NULL);\nQuery OK, 0 rows affected\nobclient> ALTER TABLE primary_table ADD CONSTRAINT cons_fk1 FOREIGN KEY(foreign_col) REFERENCES reference_table(id);\nQuery OK, 0 rows affected\n",
            "obclient> CREATE TABLE tbl9 (col1 NUMBER, col2 INT,col3 VARCHAR2(100));\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLE tbl9 ADD CONSTRAINT tbl1_pk PRIMARY KEY (col1);\nQuery OK, 0 rows affected\n",
            "obclient> ALTER TABLE tbl9 MODIFY PRIMARY KEY(col2);\nQuery OK, 0 rows affected\n",
            "obclient> ALTER TABLE tbl9 DROP PRIMARY KEY;\nQuery OK, 0 rows affected\n",
            "/* 创建二级分区表 range_range_table 并基于 col1 创建本地索引 */\nCREATE TABLE range_range_table(col1 INT, col2 INT, col3 INT)\n    PARTITION BY RANGE(col1)\n    SUBPARTITION BY RANGE(col2)\n       (PARTITION p0 VALUES LESS THAN(100)\n           (SUBPARTITION sp0 VALUES LESS THAN(100),\n            SUBPARTITION sp1 VALUES LESS THAN(200)\n           ),\n        PARTITION p1 VALUES LESS THAN(200)\n           (SUBPARTITION sp2 VALUES LESS THAN(100),\n            SUBPARTITION sp3 VALUES LESS THAN(200),\n            SUBPARTITION sp4 VALUES LESS THAN(300)\n           )\n        );\n\nCREATE INDEX local_idx_for_range_range_tb ON range_range_table (col1) LOCAL;\n\n/* 重命名一级分区，但修改不会影响到局部索引的分区名 */\n\nobclient> SELECT partition_name FROM SYS.USER_TAB_PARTITIONS WHERE table_name = 'RANGE_RANGE_TABLE';\n+----------------+\n| PARTITION_NAME |\n+----------------+\n| P0             |\n| P1             |\n+----------------+\n2 rows in set\n\nobclient> ALTER TABLE range_range_table RENAME PARTITION p0 TO p10;\nQuery OK, 0 rows affected\n\nobclient> SELECT partition_name FROM SYS.USER_TAB_PARTITIONS WHERE table_name = 'RANGE_RANGE_TABLE';\n+----------------+\n| PARTITION_NAME |\n+----------------+\n| P10            |\n| P1             |\n+----------------+\n2 rows in set\n\nobclient> SELECT partition_name FROM SYS.USER_IND_PARTITIONS WHERE index_name = 'LOCAL_IDX_FOR_RANGE_RANGE_TB';\n+----------------+\n| PARTITION_NAME |\n+----------------+\n| P0             |\n| P1             |\n+----------------+\n2 rows in set\n\n/* 重命名二级分区，但修改不会影响到局部索引的分区名 */\nobclient> SELECT partition_name, subpartition_name FROM SYS.USER_TAB_SUBPARTITIONS WHERE table_name = 'RANGE_RANGE_TABLE';\n+----------------+-------------------+\n| PARTITION_NAME | SUBPARTITION_NAME |\n+----------------+-------------------+\n| P10            | SP0               |\n| P10            | SP1               |\n| P1             | SP2               |\n| P1             | SP3               |\n| P1             | SP4               |\n+----------------+-------------------+\n5 rows in set\n\nobclient> ALTER TABLE range_range_table RENAME SUBPARTITION sp0 TO sp10;\nQuery OK, 0 rows affected\n\nobclient> SELECT partition_name, subpartition_name FROM SYS.USER_TAB_SUBPARTITIONS WHERE table_name = 'RANGE_RANGE_TABLE';\n+----------------+-------------------+\n| PARTITION_NAME | SUBPARTITION_NAME |\n+----------------+-------------------+\n| P10            | SP10              |\n| P10            | SP1               |\n| P1             | SP2               |\n| P1             | SP3               |\n| P1             | SP4               |\n+----------------+-------------------+\n5 rows in set\n\nobclient> SELECT partition_name, subpartition_name FROM SYS.USER_IND_SUBPARTITIONS WHERE index_name = 'LOCAL_IDX_FOR_RANGE_RANGE_TB';\n+----------------+-------------------+\n| PARTITION_NAME | SUBPARTITION_NAME |\n+----------------+-------------------+\n| P0             | SP0               |\n| P0             | SP1               |\n| P1             | SP2               |\n| P1             | SP3               |\n| P1             | SP4               |\n+----------------+-------------------+\n5 rows in set\n",
            "CREATE TABLE tbl1 (col1 INT PRIMARY KEY, col2 VARCHAR(50));\n",
            "ALTER TABLE tbl1 ADD COLUMN GROUP(all columns, each column);\n",
            "ALTER TABLE tbl1 DROP COLUMN GROUP(all columns, each column);\n",
            "ALTER TABLE tbl1 ADD COLUMN GROUP(each column);\n",
            "ALTER TABLE tbl1 DROP COLUMN GROUP(each column);\n",
            "CREATE TABLE test_skidx(\n    col1 NUMBER SKIP_INDEX(MIN_MAX, SUM),\n    col2 FLOAT SKIP_INDEX(MIN_MAX),\n    col3 VARCHAR2(1024) SKIP_INDEX(MIN_MAX),\n    col4 CHAR(10)\n  );\n",
            "ALTER TABLE test_skidx MODIFY col2 FLOAT SKIP_INDEX(SUM);\n",
            "ALTER TABLE test_skidx MODIFY col4 CHAR(10) SKIP_INDEX(MIN_MAX);\n",
            "ALTER TABLE test_skidx MODIFY col1 NUMBER SKIP_INDEX();\n"
        ],
        "Detailed Examples": [
            "修改表 tbl1 中字段 col1 的字段类型。",
            "obclient> CREATE TABLE tbl1(col1 VARCHAR(3));\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLE tbl1 MODIFY col1 CHAR(10);\nQuery OK, 0 rows affected\n\nobclient> DESCRIBE tbl1;\n+-------+----------+------+-----+---------+-------+\n| FIELD | TYPE     | NULL | KEY | DEFAULT | EXTRA |\n+-------+----------+------+-----+---------+-------+\n| COL1  | CHAR(10) | YES  | NULL | NULL    | NULL  |\n+-------+----------+------+-----+---------+-------+\n1 row in set\n",
            "修改表 tbl1 中列 col1 的名称为 col2。",
            "obclient> ALTER TABLE tbl1 RENAME COLUMN col1 TO col2;\nQuery OK, 0 rows affected\n\nobclient> DESCRIBE tbl1;\n+-------+-------------+------+-----+---------+-------+\n| FIELD | TYPE        | NULL | KEY | DEFAULT | EXTRA |\n+-------+-------------+------+-----+---------+-------+\n| COL2  | VARCHAR2(10) | YES  | NULL | NULL    | NULL  |\n+-------+-------------+------+-----+---------+-------+\n1 row in set\n",
            "增加和删除列。",
            "\n创建表 tbl2。 obclient> CREATE TABLE tbl2 (col1 NUMBER(30) PRIMARY KEY,col2 VARCHAR(50));\nQuery OK, 0 rows affected\n\n对表 tbl2 增加 col3 列。 obclient> ALTER TABLE tbl2 ADD col3 NUMBER(30);\nQuery OK, 0 rows affected\n\nobclient> DESCRIBE tbl2;\n+-------+--------------+------+-----+---------+-------+\n| FIELD | TYPE         | NULL | KEY | DEFAULT | EXTRA |\n+-------+--------------+------+-----+---------+-------+\n| COL1  | NUMBER(30)   | NO   | PRI | NULL    | NULL  |\n| COL2  | VARCHAR2(50) | YES  | NULL | NULL    | NULL  |\n| COL3  | NUMBER(30)   | YES  | NULL | NULL    | NULL  |\n+-------+--------------+------+-----+---------+-------+\n3 rows in set\n\n删除表 tbl2 的 col3 列。 obclient> ALTER TABLE tbl2 DROP COLUMN col3;\nQuery OK, 0 rows affected\n\nobclient> DESCRIBE tbl2;\n+-------+--------------+------+-----+---------+-------+\n| FIELD | TYPE         | NULL | KEY | DEFAULT | EXTRA |\n+-------+--------------+------+-----+---------+-------+\n| COL1  | NUMBER(30)   | NO   | PRI | NULL    | NULL  |\n| COL2  | VARCHAR2(50) | YES  | NULL | NULL    | NULL  |\n+-------+--------------+------+-----+---------+-------+\n2 rows in set\n\n为表 tbl2 创建唯一性索引。 obclient> CREATE TABLE tbl2 (col1 NUMBER(30) PRIMARY KEY,col2 VARCHAR(50), col3 INT);\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLE tbl2 ADD CONSTRAINT constraint_TBL2 UNIQUE (col2, col3);\nQuery OK, 0 rows affected\n\nobclient [SYS]> DESC tbl2;\n+-------+--------------+------+-----+---------+-------+\n| FIELD | TYPE         | NULL | KEY | DEFAULT | EXTRA |\n+-------+--------------+------+-----+---------+-------+\n| COL1  | NUMBER(30)   | NO   | PRI | NULL    | NULL  |\n| COL2  | VARCHAR2(50) | YES  | MUL | NULL    | NULL  |\n| COL3  | NUMBER(38)   | YES  | NULL | NULL    | NULL  |\n+-------+--------------+------+-----+---------+-------+\n3 rows in set\n\nobclient> INSERT INTO tbl2 VALUES('1','2','2');\nQuery OK, 1 row affected\n\nobclient> INSERT INTO tbl2 VALUES('2','2','2');\nORA-00001: unique constraint '2-2' for key 'CONSTRAINT_TBL2' violated\n\nobclient> INSERT INTO tbl2 VALUES('2','3','2');\nQuery OK, 1 row affected\n\n",
            "创建表 tbl2。",
            "obclient> CREATE TABLE tbl2 (col1 NUMBER(30) PRIMARY KEY,col2 VARCHAR(50));\nQuery OK, 0 rows affected\n",
            "对表 tbl2 增加 col3 列。",
            "obclient> ALTER TABLE tbl2 ADD col3 NUMBER(30);\nQuery OK, 0 rows affected\n\nobclient> DESCRIBE tbl2;\n+-------+--------------+------+-----+---------+-------+\n| FIELD | TYPE         | NULL | KEY | DEFAULT | EXTRA |\n+-------+--------------+------+-----+---------+-------+\n| COL1  | NUMBER(30)   | NO   | PRI | NULL    | NULL  |\n| COL2  | VARCHAR2(50) | YES  | NULL | NULL    | NULL  |\n| COL3  | NUMBER(30)   | YES  | NULL | NULL    | NULL  |\n+-------+--------------+------+-----+---------+-------+\n3 rows in set\n",
            "删除表 tbl2 的 col3 列。",
            "obclient> ALTER TABLE tbl2 DROP COLUMN col3;\nQuery OK, 0 rows affected\n\nobclient> DESCRIBE tbl2;\n+-------+--------------+------+-----+---------+-------+\n| FIELD | TYPE         | NULL | KEY | DEFAULT | EXTRA |\n+-------+--------------+------+-----+---------+-------+\n| COL1  | NUMBER(30)   | NO   | PRI | NULL    | NULL  |\n| COL2  | VARCHAR2(50) | YES  | NULL | NULL    | NULL  |\n+-------+--------------+------+-----+---------+-------+\n2 rows in set\n",
            "为表 tbl2 创建唯一性索引。",
            "obclient> CREATE TABLE tbl2 (col1 NUMBER(30) PRIMARY KEY,col2 VARCHAR(50), col3 INT);\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLE tbl2 ADD CONSTRAINT constraint_TBL2 UNIQUE (col2, col3);\nQuery OK, 0 rows affected\n\nobclient [SYS]> DESC tbl2;\n+-------+--------------+------+-----+---------+-------+\n| FIELD | TYPE         | NULL | KEY | DEFAULT | EXTRA |\n+-------+--------------+------+-----+---------+-------+\n| COL1  | NUMBER(30)   | NO   | PRI | NULL    | NULL  |\n| COL2  | VARCHAR2(50) | YES  | MUL | NULL    | NULL  |\n| COL3  | NUMBER(38)   | YES  | NULL | NULL    | NULL  |\n+-------+--------------+------+-----+---------+-------+\n3 rows in set\n\nobclient> INSERT INTO tbl2 VALUES('1','2','2');\nQuery OK, 1 row affected\n\nobclient> INSERT INTO tbl2 VALUES('2','2','2');\nORA-00001: unique constraint '2-2' for key 'CONSTRAINT_TBL2' violated\n\nobclient> INSERT INTO tbl2 VALUES('2','3','2');\nQuery OK, 1 row affected\n",
            "为表 ref_t2 添加外键，当 DELETE 操作影响与子表相匹配行的父表中键值时，执行 SET NULL 操作。",
            "obclient> CREATE TABLE ref_t1(c1 INT PRIMARY KEY,C2 INT);\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE ref_t2(c1 INT PRIMARY KEY,C2 INT);\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLE ref_t2 ADD CONSTRAINT fk1 FOREIGN KEY (c2) REFERENCES ref_t1(c1) ON DELETE SET NULL;\nQuery OK, 0 row affected\n",
            "为非模板化二级分区表 tbl3 的一级分区 p1 下添加二级分区 p1_r4。",
            "obclient> ALTER TABLE tbl3 MODIFY PARTITION p1 ADD SUBPARTITION p1_r4 VALUES LESS THAN(2022);\nQuery OK, 0 rows affected\n",
            "删除非模板化二级分区表 tbl3 的二级分区 p3_r3。",
            "obclient> ALTER TABLE tbl3 DROP SUBPARTITION p2_r3;\nQuery OK, 0 rows affected\n",
            "为非模板化二级分区表 tbl3 添加一级分区 p4，需要同时指定一级分区的定义和该分区下的二级分区定义。",
            "obclient> ALTER TABLE tbl3 ADD PARTITION p4 VALUES LESS THAN (400)\n(\n  SUBPARTITION p4_r1 VALUES LESS THAN (2019),\n  SUBPARTITION p4_r2 VALUES LESS THAN (2020),\n  SUBPARTITION p4_r3 VALUES LESS THAN (2021)\n);\nQuery OK, 0 rows affected\n",
            "为模板化二级分区表 tbl4 添加一级分区 p3，只需要指定一级分区的定义，二级分区的定义会自动按照模板填充。",
            "obclient> CREATE TABLE tbl4(col1 INT, col2 INT, PRIMARY KEY(col1,col2))\n     PARTITION BY RANGE(col1)\n     SUBPARTITION BY RANGE(col2)\n     SUBPARTITION TEMPLATE\n     (\n     SUBPARTITION p0 VALUES LESS THAN (50),\n     SUBPARTITION p1 VALUES LESS THAN (100)\n     )\n     (\n     PARTITION p0 VALUES LESS THAN (100),\n     PARTITION p1 VALUES LESS THAN (200),\n     PARTITION p2 VALUES LESS THAN (300)\n     );\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLE tbl4 ADD PARTITION p3 VALUES LESS THAN (400);\nQuery OK, 0 rows affected\n",
            "修改表 tbl5 的并行度为 3。",
            "obclient> CREATE TABLE tbl5(col1 int primary key, col2 int) PARALLEL 5;\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLE tbl5 PARALLEL 3;\nQuery OK, 0 rows affected\n",
            "修改外键约束的状态。",
            "obclient> CREATE TABLE MMS_GROUPUSER (\n  \"ID\" VARCHAR2(254 BYTE) NOT NULL,\n  \"GROUPID\" VARCHAR2(254 BYTE),\n  \"USERID\" VARCHAR2(254 BYTE),\n  CONSTRAINT \"PK_MMS_GROUPUSER\" PRIMARY KEY (\"ID\"),\n  CONSTRAINT \"FK_MMS_GROUPUSER_02\" FOREIGN KEY (\"GROUPID\") REFERENCES MMS_GROUPUSER (\"ID\") ON DELETE CASCADE DISABLE\n);\nQuery OK, 0 rows affected\n\nobclient> SELECT CONSTRAINT_NAME,CONSTRAINT_TYPE,TABLE_NAME,STATUS FROM user_constraints WHERE CONSTRAINT_NAME LIKE 'FK_MMS_GROUPUSE%';\n+---------------------+-----------------+---------------+----------+\n| CONSTRAINT_NAME     | CONSTRAINT_TYPE | TABLE_NAME    | STATUS   |\n+---------------------+-----------------+---------------+----------+\n| FK_MMS_GROUPUSER_02 | R               | MMS_GROUPUSER | DISABLED |\n+---------------------+-----------------+---------------+----------+\n1 row in set\n\nobclient> ALTER TABLE MMS_GROUPUSER ENABLE CONSTRAINT FK_MMS_GROUPUSER_02;\nQuery OK, 0 rows affected\n\nobclient> SELECT CONSTRAINT_NAME,CONSTRAINT_TYPE,TABLE_NAME,STATUS FROM user_constraints WHERE CONSTRAINT_NAME LIKE 'FK_MMS_GROUPUSE%';\n+---------------------+-----------------+---------------+---------+\n| CONSTRAINT_NAME     | CONSTRAINT_TYPE | TABLE_NAME    | STATUS  |\n+---------------------+-----------------+---------------+---------+\n| FK_MMS_GROUPUSER_02 | R               | MMS_GROUPUSER | ENABLED |\n+---------------------+-----------------+---------------+---------+\n1 row in set\n",
            "清空分区表 tbl6 的分区 M202001 和 M202002 中的全部数据。",
            "obclient> CREATE TABLE tbl6 (log_id number NOT NULL,log_value varchar2(50),log_date date NOT NULL DEFAULT sysdate)\nPARTITION BY RANGE(log_date)\n(\n    PARTITION M202001 VALUES LESS THAN(TO_DATE('2020/02/01','YYYY/MM/DD'))\n    , PARTITION M202002 VALUES LESS THAN(TO_DATE('2020/03/01','YYYY/MM/DD'))\n    , PARTITION M202003 VALUES LESS THAN(TO_DATE('2020/04/01','YYYY/MM/DD'))\n    , PARTITION M202004 VALUES LESS THAN(TO_DATE('2020/05/01','YYYY/MM/DD'))\n    , PARTITION M202005 VALUES LESS THAN(TO_DATE('2020/06/01','YYYY/MM/DD'))\n    , PARTITION MMAX VALUES LESS THAN (MAXVALUE)\n);\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLE tbl6 TRUNCATE PARTITION M202001, M202002 UPDATE GLOBAL INDEXES;\nQuery OK, 0 rows affected\n",
            "删除表 tbl7 的 CHECK 约束 tbl7_equal_check1。",
            "obclient> CREATE TABLE tbl7 (col1 INT, col2 INT, col3 INT,CONSTRAINT tbl7_equal_check1 CHECK(col2 = col3 * 2) ENABLE VALIDATE);\nQuery OK, 0 rows affected\n\nobclient> SELECT CONSTRAINT_NAME,CONSTRAINT_TYPE,TABLE_NAME,STATUS FROM user_constraints WHERE TABLE_NAME LIKE 'TBL%';\n+-------------------+-----------------+------------+---------+\n| CONSTRAINT_NAME   | CONSTRAINT_TYPE | TABLE_NAME | STATUS  |\n+-------------------+-----------------+------------+---------+\n| TBL8_EQUAL_CHECK1 | C               | TBL8       | ENABLED |\n| TBL7_EQUAL_CHECK1 | C               | TBL7       | ENABLED |\n+-------------------+-----------------+------------+---------+\n2 rows in set\n\nobclient> ALTER TABLE tbl7 DROP CONSTRAINT tbl7_equal_check1;\nQuery OK, 0 rows affected\n\nobclient> SELECT CONSTRAINT_NAME,CONSTRAINT_TYPE,TABLE_NAME,STATUS FROM user_constraints WHERE TABLE_NAME LIKE 'TBL%';\n+-------------------+-----------------+------------+---------+\n| CONSTRAINT_NAME   | CONSTRAINT_TYPE | TABLE_NAME | STATUS  |\n+-------------------+-----------------+------------+---------+\n| TBL8_EQUAL_CHECK1 | C               | TBL8       | ENABLED |\n+-------------------+-----------------+------------+---------+\n1 row in set\n",
            "把表 tbl8 从表组 tblgroup1 中移到表组 tblgroup2 中。",
            "obclient> SHOW TABLEGROUPS;\n+-----------------+------------+---------------+\n| TABLEGROUP_NAME | TABLE_NAME | DATABASE_NAME |\n+-----------------+------------+---------------+\n| TBLGROUP1             | TBL8         | SYS           |\n| TBLGROUP2             | NULL       | NULL          |\n| oceanbase       | NULL       | NULL          |\n+-----------------+------------+---------------+\n3 rows in set\n\nobclient> ALTER TABLE tbl8 SET TABLEGROUP tblgroup2;\nQuery OK, 0 rows affected\n\nobclient> SHOW TABLEGROUPS;\n+-----------------+------------+---------------+\n| TABLEGROUP_NAME | TABLE_NAME | DATABASE_NAME |\n+-----------------+------------+---------------+\n| TBLGROUP1             | NULL       | NULL          |\n| TBLGROUP2             | TBL8         | SYS           |\n| oceanbase       | NULL       | NULL          |\n+-----------------+------------+---------------+\n3 rows in set\n",
            "为表 primary_table 添加外键约束 cons_fk1。",
            "obclient> CREATE TABLE primary_table (id NUMBER PRIMARY KEY, names VARCHAR(100) NOT NULL, foreign_col NUMBER);\nQuery OK, 0 rows affected\nobclient> CREATE TABLE reference_table (id NUMBER PRIMARY key, comments VARCHAR2(100) NOT NULL);\nQuery OK, 0 rows affected\nobclient> ALTER TABLE primary_table ADD CONSTRAINT cons_fk1 FOREIGN KEY(foreign_col) REFERENCES reference_table(id);\nQuery OK, 0 rows affected\n",
            "为表 tbl9 添加主键约束 tbl1_pk。",
            "obclient> CREATE TABLE tbl9 (col1 NUMBER, col2 INT,col3 VARCHAR2(100));\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLE tbl9 ADD CONSTRAINT tbl1_pk PRIMARY KEY (col1);\nQuery OK, 0 rows affected\n",
            "修改表 tbl9 的主键为 col2 列。",
            "obclient> ALTER TABLE tbl9 MODIFY PRIMARY KEY(col2);\nQuery OK, 0 rows affected\n",
            "删除表 tbl9 的主键。",
            "obclient> ALTER TABLE tbl9 DROP PRIMARY KEY;\nQuery OK, 0 rows affected\n",
            "重命名一级分区和二级分区。",
            "/* 创建二级分区表 range_range_table 并基于 col1 创建本地索引 */\nCREATE TABLE range_range_table(col1 INT, col2 INT, col3 INT)\n    PARTITION BY RANGE(col1)\n    SUBPARTITION BY RANGE(col2)\n       (PARTITION p0 VALUES LESS THAN(100)\n           (SUBPARTITION sp0 VALUES LESS THAN(100),\n            SUBPARTITION sp1 VALUES LESS THAN(200)\n           ),\n        PARTITION p1 VALUES LESS THAN(200)\n           (SUBPARTITION sp2 VALUES LESS THAN(100),\n            SUBPARTITION sp3 VALUES LESS THAN(200),\n            SUBPARTITION sp4 VALUES LESS THAN(300)\n           )\n        );\n\nCREATE INDEX local_idx_for_range_range_tb ON range_range_table (col1) LOCAL;\n\n/* 重命名一级分区，但修改不会影响到局部索引的分区名 */\n\nobclient> SELECT partition_name FROM SYS.USER_TAB_PARTITIONS WHERE table_name = 'RANGE_RANGE_TABLE';\n+----------------+\n| PARTITION_NAME |\n+----------------+\n| P0             |\n| P1             |\n+----------------+\n2 rows in set\n\nobclient> ALTER TABLE range_range_table RENAME PARTITION p0 TO p10;\nQuery OK, 0 rows affected\n\nobclient> SELECT partition_name FROM SYS.USER_TAB_PARTITIONS WHERE table_name = 'RANGE_RANGE_TABLE';\n+----------------+\n| PARTITION_NAME |\n+----------------+\n| P10            |\n| P1             |\n+----------------+\n2 rows in set\n\nobclient> SELECT partition_name FROM SYS.USER_IND_PARTITIONS WHERE index_name = 'LOCAL_IDX_FOR_RANGE_RANGE_TB';\n+----------------+\n| PARTITION_NAME |\n+----------------+\n| P0             |\n| P1             |\n+----------------+\n2 rows in set\n\n/* 重命名二级分区，但修改不会影响到局部索引的分区名 */\nobclient> SELECT partition_name, subpartition_name FROM SYS.USER_TAB_SUBPARTITIONS WHERE table_name = 'RANGE_RANGE_TABLE';\n+----------------+-------------------+\n| PARTITION_NAME | SUBPARTITION_NAME |\n+----------------+-------------------+\n| P10            | SP0               |\n| P10            | SP1               |\n| P1             | SP2               |\n| P1             | SP3               |\n| P1             | SP4               |\n+----------------+-------------------+\n5 rows in set\n\nobclient> ALTER TABLE range_range_table RENAME SUBPARTITION sp0 TO sp10;\nQuery OK, 0 rows affected\n\nobclient> SELECT partition_name, subpartition_name FROM SYS.USER_TAB_SUBPARTITIONS WHERE table_name = 'RANGE_RANGE_TABLE';\n+----------------+-------------------+\n| PARTITION_NAME | SUBPARTITION_NAME |\n+----------------+-------------------+\n| P10            | SP10              |\n| P10            | SP1               |\n| P1             | SP2               |\n| P1             | SP3               |\n| P1             | SP4               |\n+----------------+-------------------+\n5 rows in set\n\nobclient> SELECT partition_name, subpartition_name FROM SYS.USER_IND_SUBPARTITIONS WHERE index_name = 'LOCAL_IDX_FOR_RANGE_RANGE_TB';\n+----------------+-------------------+\n| PARTITION_NAME | SUBPARTITION_NAME |\n+----------------+-------------------+\n| P0             | SP0               |\n| P0             | SP1               |\n| P1             | SP2               |\n| P1             | SP3               |\n| P1             | SP4               |\n+----------------+-------------------+\n5 rows in set\n",
            "修改表的列存属性。",
            "\n使用下面 SQL 语句创建表 tbl1。 CREATE TABLE tbl1 (col1 INT PRIMARY KEY, col2 VARCHAR(50));\n\n将表 tbl1 的变更为行存列存冗余表，然后再删除行存列存冗余属性。 ALTER TABLE tbl1 ADD COLUMN GROUP(all columns, each column);\n ALTER TABLE tbl1 DROP COLUMN GROUP(all columns, each column);\n\n将表 tbl1 的变更为列存表，然后再删除列存属性。 ALTER TABLE tbl1 ADD COLUMN GROUP(each column);\n ALTER TABLE tbl1 DROP COLUMN GROUP(each column);\n\n",
            "使用下面 SQL 语句创建表 tbl1。",
            "CREATE TABLE tbl1 (col1 INT PRIMARY KEY, col2 VARCHAR(50));\n",
            "将表 tbl1 的变更为行存列存冗余表，然后再删除行存列存冗余属性。",
            "ALTER TABLE tbl1 ADD COLUMN GROUP(all columns, each column);\n",
            "ALTER TABLE tbl1 DROP COLUMN GROUP(all columns, each column);\n",
            "将表 tbl1 的变更为列存表，然后再删除列存属性。",
            "ALTER TABLE tbl1 ADD COLUMN GROUP(each column);\n",
            "ALTER TABLE tbl1 DROP COLUMN GROUP(each column);\n",
            "修改表中列的 Skip Index 属性。",
            "\n使用下面 SQL 语句创建表 test_skidx。 CREATE TABLE test_skidx(\n    col1 NUMBER SKIP_INDEX(MIN_MAX, SUM),\n    col2 FLOAT SKIP_INDEX(MIN_MAX),\n    col3 VARCHAR2(1024) SKIP_INDEX(MIN_MAX),\n    col4 CHAR(10)\n  );\n\n修改表 test_skidx 中列 col2 的 Skip Index 属性为 SUM Skip Index 类型。 ALTER TABLE test_skidx MODIFY col2 FLOAT SKIP_INDEX(SUM);\n\n建表后新增列的 Skip Index 属性。为表 test_skidx 中列 col4 增加的 MIN_MAX Skip Index 类型。 ALTER TABLE test_skidx MODIFY col4 CHAR(10) SKIP_INDEX(MIN_MAX);\n\n建表后删除列的 Skip Index 属性。删除表 test_skidx 中列 col1 的 Skip Index 属性。 ALTER TABLE test_skidx MODIFY col1 NUMBER SKIP_INDEX();\n\n",
            "使用下面 SQL 语句创建表 test_skidx。",
            "CREATE TABLE test_skidx(\n    col1 NUMBER SKIP_INDEX(MIN_MAX, SUM),\n    col2 FLOAT SKIP_INDEX(MIN_MAX),\n    col3 VARCHAR2(1024) SKIP_INDEX(MIN_MAX),\n    col4 CHAR(10)\n  );\n",
            "修改表 test_skidx 中列 col2 的 Skip Index 属性为 SUM Skip Index 类型。",
            "ALTER TABLE test_skidx MODIFY col2 FLOAT SKIP_INDEX(SUM);\n",
            "建表后新增列的 Skip Index 属性。为表 test_skidx 中列 col4 增加的 MIN_MAX Skip Index 类型。",
            "ALTER TABLE test_skidx MODIFY col4 CHAR(10) SKIP_INDEX(MIN_MAX);\n",
            "建表后删除列的 Skip Index 属性。删除表 test_skidx 中列 col1 的 Skip Index 属性。",
            "ALTER TABLE test_skidx MODIFY col1 NUMBER SKIP_INDEX();\n"
        ]
    },
    "ALTER TABLEGROUP": {
        "Title": [
            "ALTER TABLEGROUP"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054315"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "ALTER TABLEGROUP tablegroup_name ADD [TABLE] table_name [, table_name...];\nALTER TABLEGROUP tablegroup_name tablegroup_option;\n\ntablegroup_option:\n    SHARDING = 'NONE' | 'PARTITION' | 'ADAPTIVE'\n",
        "Description": [
            "该语句用于对一个表组增加多张表和修改表组的属性。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\ntablegroup_name\n表组名称。对一个表组增加多张表时，表与表之间以逗号（‘,’）分隔。当添加多个表时，允许表名重复。如果待添加的表已经属于待加入的表组，OceanBase 数据库不会报错。\n\n\nSHARDING\n表组的属性。如果不指定 SHARDING 属性，则默认创建 ADAPTIVE 的表组。SHARDING 取值如下： \n      \nNONE：对加入表组的表没有限制。\nPARTITION：加入表组的表对应的一级分区，需要与表组中所有表的一级分区的分区方式一致，包括分区类型、分区个数和分区 Value。\nADAPTIVE：加入表组的表对应的一级分区和二级分区，需要与表组中所有表的一级分区和二级分区的分区方式一致，包括分区类型、分区个数和分区 Value。\n相同的分区方式包括： \n      \n分区类型相同（例如都是 Hash+Range 分区）。\n如果是 Hash 分区，要求引用的列数相同，并且分区个数相同。\n如果是 Range 分区，要求引用的列数相同，并且分区数相同，Range 分割点相同。\n对于二级分区，根据其分区类型，要求和上述一致。\n\n\n"
        ],
        "Examples": [
            "obclient> CREATE TABLEGROUP tblgroup1 SHARDING = 'NONE';\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl1(col1 NUMBER,col2 VARCHAR2(50))\n    PARTITION BY LIST(col1) SUBPARTITION BY LIST (col2)\n      SUBPARTITION TEMPLATE\n      (SUBPARTITION mp0 VALUES ('01'),\n       SUBPARTITION mp1 VALUES ('02'),\n       SUBPARTITION mp2 VALUES ('03')\n       )\n      (PARTITION p0 VALUES('01'),\n       PARTITION p1 VALUES('02')\n      );\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2(col1 NUMBER,col2 VARCHAR2(50)) TABLEGROUP = tblgroup1\n    PARTITION BY LIST(col1) SUBPARTITION BY LIST(col2)\n      SUBPARTITION TEMPLATE\n      (SUBPARTITION mp0 VALUES('01'),\n       SUBPARTITION mp1 VALUES('02'),\n       SUBPARTITION mp2 VALUES('03')\n      )\n      (PARTITION p0 VALUES('01'),\n       PARTITION p1 VALUES('02')\n      );\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLEGROUP tblgroup1 ADD tbl1,tbl2;\nQuery OK, 0 rows affected\n",
            "obclient> ALTER TABLEGROUP tblgroup1 SHARDING = 'PARTITION';\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLEGROUP tblgroup1 SHARDING = 'ADAPTIVE';\nQuery OK, 0 rows affected\n",
            "obclient> CREATE TABLEGROUP tblgroup2 SHARDING = 'NONE';\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl1 (col INT);\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2(col1 NUMBER,col2 VARCHAR2(50)) TABLEGROUP = tblgroup2\n    PARTITION BY LIST(col1) SUBPARTITION BY LIST(col2)\n      SUBPARTITION TEMPLATE\n      (SUBPARTITION mp0 VALUES('01'),\n       SUBPARTITION mp1 VALUES('02'),\n       SUBPARTITION mp2 VALUES('03')\n      )\n      (PARTITION p0 VALUES('01'),\n       PARTITION p1 VALUES('02')\n      );\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLEGROUP tblgroup2 ADD tbl1,tbl2;\nQuery OK, 0 rows affected\n",
            "obclient> ALTER TABLEGROUP tblgroup2 SHARDING = 'PARTITION';\nORA-00600: internal error code, arguments: -4179, not all tables are non-partitioned or partitioned, modify tablegroup sharding attribute not allowed\n\nobclient> ALTER TABLEGROUP tblgroup2 SHARDING = 'ADAPTIVE';\nORA-00600: internal error code, arguments: -4179, not all tables are non-partitioned or partitioned, modify tablegroup sharding attribute not allowed\n",
            "obclient> CREATE TABLEGROUP tblgroup3 SHARDING = 'NONE';\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl1(col1 NUMBER,col2 VARCHAR2(50))\n   PARTITION BY LIST(col1) SUBPARTITION BY LIST (col2)\n     SUBPARTITION TEMPLATE\n     (SUBPARTITION mp0 VALUES ('01'),\n      SUBPARTITION mp1 VALUES ('02')\n      )\n     (PARTITION p0 VALUES('01'),\n      PARTITION p1 VALUES('02')\n     );\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2(col1 NUMBER,col2 VARCHAR2(50))\n   PARTITION BY LIST(col1) SUBPARTITION BY LIST(col2)\n     SUBPARTITION TEMPLATE\n     (SUBPARTITION mp0 VALUES('01'),\n      SUBPARTITION mp1 VALUES('02'),\n      SUBPARTITION mp2 VALUES('03')\n     )\n     (PARTITION p0 VALUES('01'),\n      PARTITION p1 VALUES('02')\n     );\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLEGROUP tblgroup3 ADD tbl1,tbl2;\nQuery OK, 0 rows affected\n",
            "obclient> ALTER TABLEGROUP tblgroup3 SHARDING = 'PARTITION';\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLEGROUP tblgroup3 SHARDING = 'ADAPTIVE';\nORA-00600: internal error code, arguments: -4179, subpartition num not matched, modify tablegroup sharding attribute not allowed\n",
            "obclient> CREATE TABLEGROUP tblgroup4 SHARDING = 'ADAPTIVE';\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl1(col1 int,col2 int)\n    PARTITION BY RANGE(col1) SUBPARTITION BY RANGE(col2)\n      SUBPARTITION TEMPLATE\n        (SUBPARTITION mp0 VALUES LESS THAN(2021),\n         SUBPARTITION mp1 VALUES LESS THAN(2022),\n         SUBPARTITION mp2 VALUES LESS THAN(2023)\n        )\n        (PARTITION p0 VALUES LESS THAN(100),\n         PARTITION p1 VALUES LESS THAN(200)\n        );\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2(col1 int,col2 int)\n    PARTITION BY RANGE(col1) SUBPARTITION BY RANGE(col2)\n      SUBPARTITION TEMPLATE\n       (SUBPARTITION mp0 VALUES LESS THAN(2021),\n        SUBPARTITION mp1 VALUES LESS THAN(2022),\n        SUBPARTITION mp2 VALUES LESS THAN(2023)\n       )\n      (PARTITION p0 VALUES LESS THAN(100),\n       PARTITION p1 VALUES LESS THAN(200)\n      );\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLEGROUP tblgroup4 ADD tbl1,tbl2;\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLE tbl1 ADD PARTITION p3 VALUES LESS THAN(400), PARTITION p4 VALUES LESS THAN(500);\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLE tbl2 DROP SUBPARTITION p0smp0,p0smp1;\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl3(col1 int,col2 int)\n    PARTITION BY RANGE(col1) SUBPARTITION BY RANGE(col2)\n      SUBPARTITION TEMPLATE\n     (SUBPARTITION mp0 VALUES LESS THAN(2021),\n      SUBPARTITION mp1 VALUES LESS THAN(2022),\n      SUBPARTITION mp2 VALUES LESS THAN(2023)\n     )\n     (PARTITION p0 VALUES LESS THAN(100),\n      PARTITION p1 VALUES LESS THAN(200)\n      );\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLEGROUP tblgroup4 ADD tbl3;\nORA-00600: internal error code, arguments: -4179, partition num not equal, add table to tablegroup not allowed\n"
        ],
        "Detailed Examples": [
            "创建名为 tblgroup1 的表组，其 SHARDING 属性为 NONE，并将分区表 tbl1 和分区表 tbl2 加入到表组中。",
            "obclient> CREATE TABLEGROUP tblgroup1 SHARDING = 'NONE';\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl1(col1 NUMBER,col2 VARCHAR2(50))\n    PARTITION BY LIST(col1) SUBPARTITION BY LIST (col2)\n      SUBPARTITION TEMPLATE\n      (SUBPARTITION mp0 VALUES ('01'),\n       SUBPARTITION mp1 VALUES ('02'),\n       SUBPARTITION mp2 VALUES ('03')\n       )\n      (PARTITION p0 VALUES('01'),\n       PARTITION p1 VALUES('02')\n      );\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2(col1 NUMBER,col2 VARCHAR2(50)) TABLEGROUP = tblgroup1\n    PARTITION BY LIST(col1) SUBPARTITION BY LIST(col2)\n      SUBPARTITION TEMPLATE\n      (SUBPARTITION mp0 VALUES('01'),\n       SUBPARTITION mp1 VALUES('02'),\n       SUBPARTITION mp2 VALUES('03')\n      )\n      (PARTITION p0 VALUES('01'),\n       PARTITION p1 VALUES('02')\n      );\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLEGROUP tblgroup1 ADD tbl1,tbl2;\nQuery OK, 0 rows affected\n",
            "由于 tbl1 和 tbl2 的分区方式一致，所以 SHARDING 属性可以更改为 PARTITION 或 ADAPTIVE。",
            "obclient> ALTER TABLEGROUP tblgroup1 SHARDING = 'PARTITION';\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLEGROUP tblgroup1 SHARDING = 'ADAPTIVE';\nQuery OK, 0 rows affected\n",
            "创建名为 tblgroup2 的表组，其 SHARDING 属性为 NONE，向表组中添加非分区表 tbl1 和分区表 tbl2。",
            "obclient> CREATE TABLEGROUP tblgroup2 SHARDING = 'NONE';\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl1 (col INT);\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2(col1 NUMBER,col2 VARCHAR2(50)) TABLEGROUP = tblgroup2\n    PARTITION BY LIST(col1) SUBPARTITION BY LIST(col2)\n      SUBPARTITION TEMPLATE\n      (SUBPARTITION mp0 VALUES('01'),\n       SUBPARTITION mp1 VALUES('02'),\n       SUBPARTITION mp2 VALUES('03')\n      )\n      (PARTITION p0 VALUES('01'),\n       PARTITION p1 VALUES('02')\n      );\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLEGROUP tblgroup2 ADD tbl1,tbl2;\nQuery OK, 0 rows affected\n",
            "由于表组 tblgroup2 中包含非分区表和分区表，所以 SHARDING 属性不能更改为 PARTITION 或 ADAPTIVE。",
            "obclient> ALTER TABLEGROUP tblgroup2 SHARDING = 'PARTITION';\nORA-00600: internal error code, arguments: -4179, not all tables are non-partitioned or partitioned, modify tablegroup sharding attribute not allowed\n\nobclient> ALTER TABLEGROUP tblgroup2 SHARDING = 'ADAPTIVE';\nORA-00600: internal error code, arguments: -4179, not all tables are non-partitioned or partitioned, modify tablegroup sharding attribute not allowed\n",
            "创建名为 tblgroup3 的表组，其 SHARDING 属性为 NONE，向表组中添加分区表 tbl1 和分区表 tbl2。",
            "obclient> CREATE TABLEGROUP tblgroup3 SHARDING = 'NONE';\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl1(col1 NUMBER,col2 VARCHAR2(50))\n   PARTITION BY LIST(col1) SUBPARTITION BY LIST (col2)\n     SUBPARTITION TEMPLATE\n     (SUBPARTITION mp0 VALUES ('01'),\n      SUBPARTITION mp1 VALUES ('02')\n      )\n     (PARTITION p0 VALUES('01'),\n      PARTITION p1 VALUES('02')\n     );\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2(col1 NUMBER,col2 VARCHAR2(50))\n   PARTITION BY LIST(col1) SUBPARTITION BY LIST(col2)\n     SUBPARTITION TEMPLATE\n     (SUBPARTITION mp0 VALUES('01'),\n      SUBPARTITION mp1 VALUES('02'),\n      SUBPARTITION mp2 VALUES('03')\n     )\n     (PARTITION p0 VALUES('01'),\n      PARTITION p1 VALUES('02')\n     );\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLEGROUP tblgroup3 ADD tbl1,tbl2;\nQuery OK, 0 rows affected\n",
            "由于表组 tblgroup3 中 tbl1 和 tbl2 的一级分区的分区类型相同，二级分区分区类型不同（二级分区个数不同），所以 SHARDING 属性可以更改为 PARTITION，但是不能更改为 ADAPTIVE。",
            "obclient> ALTER TABLEGROUP tblgroup3 SHARDING = 'PARTITION';\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLEGROUP tblgroup3 SHARDING = 'ADAPTIVE';\nORA-00600: internal error code, arguments: -4179, subpartition num not matched, modify tablegroup sharding attribute not allowed\n",
            "创建名为 tblgroup4 的表组，其 SHARDING 属性为 ADAPTIVE，修改表组中表 tbl1 和表 tbl2 的分区个数，则表组中所有表此时分区方式不一致，表组中不能加入新的表 tbl3。",
            "obclient> CREATE TABLEGROUP tblgroup4 SHARDING = 'ADAPTIVE';\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl1(col1 int,col2 int)\n    PARTITION BY RANGE(col1) SUBPARTITION BY RANGE(col2)\n      SUBPARTITION TEMPLATE\n        (SUBPARTITION mp0 VALUES LESS THAN(2021),\n         SUBPARTITION mp1 VALUES LESS THAN(2022),\n         SUBPARTITION mp2 VALUES LESS THAN(2023)\n        )\n        (PARTITION p0 VALUES LESS THAN(100),\n         PARTITION p1 VALUES LESS THAN(200)\n        );\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2(col1 int,col2 int)\n    PARTITION BY RANGE(col1) SUBPARTITION BY RANGE(col2)\n      SUBPARTITION TEMPLATE\n       (SUBPARTITION mp0 VALUES LESS THAN(2021),\n        SUBPARTITION mp1 VALUES LESS THAN(2022),\n        SUBPARTITION mp2 VALUES LESS THAN(2023)\n       )\n      (PARTITION p0 VALUES LESS THAN(100),\n       PARTITION p1 VALUES LESS THAN(200)\n      );\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLEGROUP tblgroup4 ADD tbl1,tbl2;\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLE tbl1 ADD PARTITION p3 VALUES LESS THAN(400), PARTITION p4 VALUES LESS THAN(500);\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLE tbl2 DROP SUBPARTITION p0smp0,p0smp1;\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl3(col1 int,col2 int)\n    PARTITION BY RANGE(col1) SUBPARTITION BY RANGE(col2)\n      SUBPARTITION TEMPLATE\n     (SUBPARTITION mp0 VALUES LESS THAN(2021),\n      SUBPARTITION mp1 VALUES LESS THAN(2022),\n      SUBPARTITION mp2 VALUES LESS THAN(2023)\n     )\n     (PARTITION p0 VALUES LESS THAN(100),\n      PARTITION p1 VALUES LESS THAN(200)\n      );\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLEGROUP tblgroup4 ADD tbl3;\nORA-00600: internal error code, arguments: -4179, partition num not equal, add table to tablegroup not allowed\n"
        ]
    },
    "ALTER USER": {
        "Title": [
            "ALTER USER"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054337"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "ALTER USER user_name\n    { IDENTIFIED BY password\n    | PROFILE {\"profile_name\" | DEFAULT}\n    | REQUIRE {NONE | SSL | x509 | tls_option_list}\n    | DEFAULT ROLE\n            { role_name[,role_name...]\n            | ALL [EXCEPT role_name[,role_name...]]\n            | NONE\n            }\n    | GRANT CONNECT THROUGH proxy_user_name [with_clause]\n    };\n\ntls_option_list:\n    tls_option\n    | tls_option_list tls_option\n\ntls_option:\n    CIPHER str_value\n    | ISSUER str_value\n    | SUBJECT str_value\n\nwith_clause:\n    WITH ROLE {role_name[, role_name,...]}\n    | WITH NO ROLE \n    | WITH ROLE ALL EXCEPT {role_name[, role_name,...]}\n",
        "Description": [
            "该语句主要用于执行以下操作：",
            "修改数据库用户的密码。",
            "修改数据库用户使用的 Profile。",
            "修改数据库用户连接的加密方式，其它修改用户密码方式，请参见 SET PASSWORD。",
            "修改数据库用户拥有角色的默认角色。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nuser_name\n指定用户名或者被代理的目标用户名。\n\n\nIDENTIFIED BY\n指定用户新密码。\n\n\nPROFILE\n指定用户使用的的 Profile。 \n      \nprofile_name：Profile 文件名。\nDEFAULT：表示忽略此参数的限制。\n\n\n\nREQUIRE\n指定用户使用的加密协议为 NONE、SSL、X509 和 tls_option_list 中的一种。\n\n\nDEFAULT ROLE\n指定用户登录时的默认角色。 \n      \nALL：把用户拥有的所有角色都设置为默认角色。EXCEPT 子句表示列出的角色除外，为可选项。\nNONE：不指定默认角色，即禁用用户的所有角色。 \n        \n注意\n以下情况不能指定 DEFAULT ROLE：\n\n未授予用户的角色。\n通过其他角色授予的角色。\n\n\n\n\n\n\nGRANT CONNECT THROUGH\n指定使用代理用户。更多有关使用代理用户的示例信息，请参见 使用代理用户。\n\n\nproxy_user_name\n代理用户名。授权后，该用户能代表目标用户连接数据库，并使用目标用户的角色权限执行数据库操作。\n\n\nwith_clause\n指定代理用户代理目标用户连接数据库时生效的角色权限。如果不指定该子句，则默认代理用户代理目标用户连接数据库时，目标用户的所有角色权限均生效。详细介绍可参见下文 with_clause。\n\n\n",
            "with_clause",
            "\n注意\n指定代理用户生效的角色权限时，对于带密码的角色权限，需要在连接数据库后手动通过 SET ROLE role_name IDENTIFIED BY role_password; 命令激活该角色。\n",
            "WITH ROLE {role_name[, role_name,...]}",
            "：指定代理用户代理目标用户连接数据库时，自动获取并激活指定的角色权限，即仅生效目标用户中指定的角色权限。",
            "WITH NO ROLE",
            "：指定代理用户代理目标用户连接数据库时，不会自动获取目标用户的任何角色权限，即目标用户的所有角色权限均不生效。",
            "WITH ROLE ALL EXCEPT {role_name[ ,role_name,...]}",
            "：指定代理用户代理目标用户连接数据库时，自动获取并激活目标用户中除指定角色之外的其他所有角色权限。"
        ],
        "Examples": [
            "obclient> ALTER USER user1 IDENTIFIED BY ******;\nQuery OK, 0 rows affected\n",
            "obclient> ALTER USER user1 REQUIRE SSL;\nQuery OK, 0 rows affected\n",
            "obclient> ALTER USER user1 PROFILE \"profile1\";\nQuery OK, 0 rows affected\n",
            "obclient> CREATE ROLE role1;\nQuery OK, 0 rows affected\n\nobclient> CREATE ROLE role2 IDENTIFIED BY ******;\nQuery OK, 0 rows affected\n\nobclient> CREATE ROLE role3 IDENTIFIED BY ******;\nQuery OK, 0 rows affected\n\nobclient> GRANT role1,role2,role3 TO user1;\nQuery OK, 0 rows affected\n\nobclient> ALTER USER user1 DEFAULT ROLE role1;\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "修改用户 user1 的密码。",
            "obclient> ALTER USER user1 IDENTIFIED BY ******;\nQuery OK, 0 rows affected\n",
            "修改用户 user1 连接加密协议为 SSL。",
            "obclient> ALTER USER user1 REQUIRE SSL;\nQuery OK, 0 rows affected\n",
            "修改用户 user1 使用的的 Profile 为 profile1。",
            "obclient> ALTER USER user1 PROFILE \"profile1\";\nQuery OK, 0 rows affected\n",
            "设置用户 user1 的默认角色。",
            "obclient> CREATE ROLE role1;\nQuery OK, 0 rows affected\n\nobclient> CREATE ROLE role2 IDENTIFIED BY ******;\nQuery OK, 0 rows affected\n\nobclient> CREATE ROLE role3 IDENTIFIED BY ******;\nQuery OK, 0 rows affected\n\nobclient> GRANT role1,role2,role3 TO user1;\nQuery OK, 0 rows affected\n\nobclient> ALTER USER user1 DEFAULT ROLE role1;\nQuery OK, 0 rows affected\n",
            "\n说明\n用户 user1 可以直接使用 role1 的权限。role2 和 role3 的权限需要用户 user1 在会话中启用 role2 和 role3 后，用户 user1 才能使用其权限。\n",
            "有关启用角色命令的详细信息，请参见 SET ROLE。"
        ]
    },
    "ANALYZE": {
        "Title": [
            "ANALYZE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054296"
        ],
        "Category": [
            "DCL"
        ],
        "Feature": "ANALYZE\n  TABLE [ schema. ]table_name\n    [ PARTITION (partition) | SUBPARTITION (subpartition) ]\n  { compute_statistics_clause | estimate_statistics_clause } ;\n\ncompute_statistics_clause:\n COMPUTE STATISTICS [ for_clause ]\n\nestimate_statistics_clause:\n     ESTIMATE STATISTICS [ for_clause ]\n     [ SAMPLE integer { ROWS | PERCENT } ]\n\nfor_clause:\n FOR\n     TABLE\n   | ALL [ INDEXED | HIDDEN ] COLUMNS [ SIZE integer ]\n   | COLUMNS [ SIZE integer ]\n     { column | attribute } [ SIZE integer ]\n       [ { column | attribute }\n         [ SIZE integer ]\n       ]\n   [ FOR\n    { TABLE\n    | ALL [ INDEXED | HIDDEN ] COLUMNS\n         [ SIZE integer ]\n    | COLUMNS [ SIZE integer ]\n      { column | attribute } [ SIZE integer ]\n        [ { column | attribute }\n          [ SIZE integer ]\n        ]...\n    }\n   ]...\n",
        "Description": [
            "该语句用于收集表或表分区的统计信息。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nschema\n指定表所属的 Schema。如果省略该参数，默认为当前 Schema。\n\n\ntable_name\n指定要分析的表。\n\n\nPARTITION | SUBPARTITION\n指定要收集统计信息的分区或子分区。如果指定的分区为一级分区，会同时分析该分区下所有子分区的信息。\n\n\ncompute_statistics_clause\n指定 COMPUTE STATISTICS 可以计算分析对象的精确统计信息，并将其存储在数据字典中。分析表时，会同时统计表和列的统计信息。\n\n\nfor_clause\n指定要分析整个表，或者只分析特定的列。 \n      \nFOR TABLE：指定仅收集表的统计信息。\nFOR COLUMNS：指定仅收集指定列和标量对象属性列的统计信息。其中，attribute 指定对象中的特定列名。\nFOR ALL COLUMNS：指定收集所有列和标量对象属性列的统计信息。\nFOR ALL INDEXED COLUMNS：指定收集所有索引列的列统计信息。列统计信息可以基于完整的列，也可以通过指定 SIZE 使用直方图。\nFOR ALL HIDDEN COLUMNS：指定收集所有隐藏列的列统计信息。列统计信息可以基于完整的列，也可以通过指定 SIZE 使用直方图。\nSIZE：指定直方图中的最大存储桶数。取值范围是 [1,2048]，默认值是 75。\n\n\n\nestimate_statistics_clause\n指定 ESTIMATE STATISTICS 可以估计分析对象的统计信息，并将其存储在数据字典中。\n\n\nSAMPLE\n指定用于估计统计信息使用的分析对象中的采样数据量。如果省略该参数，则对 1064 行进行采样。 \n      \nROWS：对表中的 integer 行进行采样。\nPERCENT：对表中行的 integer 百分比进行采样。\n\n\n\n"
        ],
        "Examples": [
            "obclient> ANALYZE TABLE tbl1 COMPUTE STATISTICS;\nQuery OK, 0 rows affected\n",
            "obclient> ANALYZE TABLE tbl1 COMPUTE STATISTICS FOR ALL INDEXED COLUMNS SIZE 100;\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "收集表 tbl1 的统计信息。",
            "obclient> ANALYZE TABLE tbl1 COMPUTE STATISTICS;\nQuery OK, 0 rows affected\n",
            "收集表 tbl1 所有索引列的列统计信息。",
            "obclient> ANALYZE TABLE tbl1 COMPUTE STATISTICS FOR ALL INDEXED COLUMNS SIZE 100;\nQuery OK, 0 rows affected\n"
        ]
    },
    "AUDIT": {
        "Title": [
            "AUDIT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054308"
        ],
        "Category": [
            "DCL"
        ],
        "Feature": "/*语句审计*/\n{AUDIT | NOAUDIT} statement_operation_clause\n                                 [auditing_by_user_clause] [whenever_option]\n\n/*对象审计*/\n{AUDIT | NOAUDIT} object_operation_clause auditing_on_clause [whenever_option]\n\nstatement_operation_clause:\n    statement_operation_list\n    | ALL\n    | ALL STATEMENTS\n\nstatement_operation_list:\n    statement_operation [statement_operation...]\n\nobject_operation_clause:\n    object_operation_list\n    | ALL\n\nobject_operation_list:\n    object_operation [object_operation...]\n\nauditing_on_clause:\n      ON obj_name\n    | ON DEFAULT\n\nauditing_by_user_clause:\n    BY user_name [user_name...]\n\nwhenever_option:\n      WHENEVER NOT SUCCESSFUL\n    | WHENEVER SUCCESSFUL\n\nstatement_operation:\n    ALTER SYSTEM\n    | CLUSTER\n    | CONTEXT\n    | DATABASE LINK\n    | MATERIALIZED VIEW\n    | NOT EXISTS\n    | OUTLINE\n    | PROCEDURE\n    | PROFILE\n    | PUBLIC DATABASE LINK\n    | PUBLIC SYNONYM\n    | ROLE\n    | SEQUENCE\n    | SESSION\n    | SYNONYM\n    | SYSTEM AUDIT\n    | SYSTEM GRANT\n    | TABLE\n    | TABLESPACE\n    | TRIGGER\n    | TYPE\n    | USER\n    | VIEW\n    | ALTER SEQUENCE\n    | ALTER TABLE\n    | COMMENT TABLE\n    | DELETE TABLE\n    | EXECUTE PROCEDURE\n    | GRANT PROCEDURE\n    | GRANT SEQUENCE\n    | GRANT TABLE\n    | GRANT TYPE\n    | INSERT TABLE\n    | SELECT SEQUENCE\n    | SELECT TABLE\n    | UPDATE TABLE\n\nobject_operation:\n    ALTER\n    | AUDIT\n    | COMMENT\n    | DELETE\n    | EXECUTE\n    | FLASHBACK\n    | GRANT\n    | INDEX\n    | INSERT\n    | RENAME\n    | SELECT\n    | UPDATE\n",
        "Description": [
            "该语句用于配置或删除对 SQL 语句的审计规则。",
            "\n说明\n\n配置对 SQL 语句的审计规则时，您必须拥有 AUDIT SYSTEM 系统权限，且需要登录 ORAAUDITOR 用户，密码固定为 ORAAUDITOR。\n配置对 SQL 语句的审计规则后，对所有会话立即生效。\n需要通过系统配置项 audit_trail 开启审计功能，该语句配置的审计规则才能生效。\n\n"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nstatement_operation\n语句审计操作类型。 \n      \n如果指定 ALL，表示所有 审计语句说明表 1 中的操作。\n如果指定 ALL STATEMENTS，表示 statement_operation 中的所有操作。\n\n\n\nobject_operation\n对象审计操作类型。\n\n\nobj_name\n被审计的对象名，支持的对象类型包括：表（Table）、视图（View）和序列（Sequence）。\n\n\nON DEFAULT\n设置默认审计规则，对后续新创建的对象生效。\n\n\nuser_name\n指定用户名。\n\n\nWHENEVER NOT SUCCESSFUL\n指定只有执行失败才触发审计。\n\n\nWHENEVER SUCCESSFUL\n指定只有执行成功才触发审计。\n\n\n",
            "可以审计的 SQL 语句类型如下表所示。",
            "审计语句说明表 1",
            "\n\n\n审计语句\n说明\n\n\n\n\nALTER SYSTEM\n审计 ALTER SYSTEM 语句。\n\n\nCLUSTER\n审计 ADD CLUSTER 和 REMOVE CLUSTER 语句。\n\n\nINDEX\n审计 CREATE INDEX、DROP INDEX、FLASHBACK INDEX 和 PURGE INDEX 语句。\n\n\nNOT EXISTS\n审计因对象不存在导致失败的操作。\n\n\nOUTLINE\n审计 CREATE OUTLINE、ALTER OUTLINE 和 DROP OUTLINE 语句。\n\n\nPROCEDURE\n审计 CREATE PROCEDURE、DROP PROCEDURE、CREATE FUNCTION、DROP FUNCTION、CREATE PACKAGE 和 DROP PACKAGE 语句。\n\n\nPROFILE\n审计 CREATE PROFILE、ALTER PROFILE 和 DROP PROFILE 语句。\n\n\nROLE\n审计 CREATE ROLE、ALTER ROLE、DROP ROLE 和 SET ROLE 语句。\n\n\nSEQUENCE\n审计 CREATE SEQUENCE 和 DROP SEQUENCE 语句。\n\n\nSESSION\n审计登入登出操作。\n\n\nSYNONYM\n审计 CREATE SYNONYM 和 DROP SYNONYM 语句。\n\n\nSYSTEM AUDIT\n审计 AUDIT 和 NOAUDIT 语句。\n\n\nSYSTEM GRANT\n审计 GRANT 和 REVOKE 语句。\n\n\nTABLE\n审计 CREATE TABLE、DROP TABLE 和 TRUNCATE TABLE 语句。\n\n\nTABLESPACE\n审计 CREATE TABLESPACE、ALTER TABLESPACE 和 DROP TABLESPACE 语句。\n\n\nTRIGGER\n审计 CREATE TRIGGER、ALTER TRIGGER 和 DROP TRIGGER 语句。\n\n\nTYPE\n审计 CREATE TYPE、DROP TYPE、CREATE TYPE BODY 和 DROP TYPE BODY 语句。\n\n\nUSER\n审计 CREATE USER、ALTER USER 和 DROP USER 语句。\n\n\nVIEW\n审计 CREATE VIEW 和 DROP VIEW 语句。\n\n\n",
            "审计语句说明表 2",
            "\n\n\n审计语句\n说明\n\n\n\n\nALTER SEQUENCE\n审计 ALTER SEQUENCE 语句。\n\n\nALTER TABLE\n审计 ALTER TABLE 语句。\n\n\nCOMMENT TABLE\n审计 COMMENT ON TABLE 和 COMMENT ON VIEW 语句。\n\n\nDELETE TABLE\n审计 DELETE FROM TABLE 和 DELETE FROM VIEW 语句。\n\n\nEXECUTE PROCEDURE\n审计 CALL 语句。\n\n\nGRANT PROCEDURE\n审计 GRANT obj_privilege ON PROCEDURE | FUNCTION | PACKAGE 和 REVOKE obj_privilege ON PROCEDURE | FUNCTION | PACKAGE 语句。\n\n\nGRANT SEQUENCE\n审计 GRANT obj_privilege ON SEQUENCE 和 REVOKE obj_privilege ON SEQUENCE 语句。\n\n\nGRANT TABLE\n审计 GRANT obj_privilege ON TABLE | VIEW 和 REVOKE obj_privilege ON TABLE | VIEW 语句。\n\n\nGRANT TYPE\n审计 GRANT obj_privilege ON TYPE 和 REVOKE obj_privilege ON TYPE 语句。\n\n\nINSERT TABLE\n审计 INSERT INTO TABLE 和 INSERT INTO VIEW 语句。\n\n\nSELECT SEQUENCE\n审计所有包含 sequence.CURRVAL 或 sequence.NEXTVAL 的语句。\n\n\nSELECT TABLE\n审计 SELECT TABLE 和 SELECT VIEW 语句。\n\n\nUPDATE TABLE\n审计 UPDATE TABLE 和 UPDATE VIEW 语句。\n\n\n"
        ],
        "Examples": [
            "/*将 ORAAUDITOR 用户解锁*/\nobclient> ALTER USER ORAAUDITOR ACCOUNT UNLOCK;\nQuery OK, 0 rows affected\n\n/*登录 ORAAUDITOR 用户*/\n[admin@k08j13249.eu95sqa /home/admin]\n$obclient -h10.XXX.XXX.XXX -P2881 -uORAAUDITOR@Oracle -pORAAUDITOR\n",
            "obclient> AUDIT TABLE BY user1 WHENEVER SUCCESSFUL;\nQuery OK, 0 rows affected\n",
            "obclient> AUDIT INSERT,UPDATE,DELETE ON user2.tbl1;\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "在进行审计前，需要登录为 ORAAUDITOR 用户。",
            "/*将 ORAAUDITOR 用户解锁*/\nobclient> ALTER USER ORAAUDITOR ACCOUNT UNLOCK;\nQuery OK, 0 rows affected\n\n/*登录 ORAAUDITOR 用户*/\n[admin@k08j13249.eu95sqa /home/admin]\n$obclient -h10.XXX.XXX.XXX -P2881 -uORAAUDITOR@Oracle -pORAAUDITOR\n",
            "对用户 user1 所有表的相关操作在执行成功的情况下进行审计。",
            "obclient> AUDIT TABLE BY user1 WHENEVER SUCCESSFUL;\nQuery OK, 0 rows affected\n",
            "对用户 user2 的表 tbl1 的所有 INSERT、UPDATE 和 DELETE 操作进行审计。",
            "obclient> AUDIT INSERT,UPDATE,DELETE ON user2.tbl1;\nQuery OK, 0 rows affected\n"
        ]
    },
    "COMMENT": {
        "Title": [
            "COMMENT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054336"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "COMMENT ON COLUMN\n    [schema.]{table_name. | view_name.}column_name IS 'string';\nCOMMENT ON TABLE\n    [schema.]{table_name | view_name} IS 'string';\n",
        "Description": [
            "该语句将有关表或表列、视图或视图列的注释添加到数据字典中。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nschema\n指定 Schema。如果省略 schema.，则 OceanBase 数据库默认表等要添加注释的对象在当前的 Schema 中。\n\n\ntable_name\n指定表名。\n\n\nview_name\n指定视图名。\n\n\ncolumn_name\n指定列名。\n\n\nstring\n指定注释的文本。如果将 string 设置为空字符串（''），则表示从数据库中删除注释。\n\n\n"
        ],
        "Examples": [
            "obclient> COMMENT ON TABLE tbl1 IS 'Comment of the tbl1';\n",
            "obclient> COMMENT ON COLUMN tbl1.name IS 'Name of person in table tbl1';\n",
            "obclient> COMMENT ON COLUMN tbl1.name IS '';\n",
            "obclient> COMMENT ON TABLE view1 IS 'Comment of the view1';\n",
            "obclient> COMMENT ON COLUMN view1.name IS 'Name of person in view view1';\n",
            "obclient> COMMENT ON COLUMN view1.name IS '';\n"
        ],
        "Detailed Examples": [
            "给表 tbl1 添加注释。",
            "obclient> COMMENT ON TABLE tbl1 IS 'Comment of the tbl1';\n",
            "给表 tbl1 的 name 列添加注释。",
            "obclient> COMMENT ON COLUMN tbl1.name IS 'Name of person in table tbl1';\n",
            "从数据库中删除表 tbl1 的 name 列上的注释。",
            "obclient> COMMENT ON COLUMN tbl1.name IS '';\n",
            "给视图 view1 添加注释。",
            "obclient> COMMENT ON TABLE view1 IS 'Comment of the view1';\n",
            "给视图 view1 的 name 列添加注释。",
            "obclient> COMMENT ON COLUMN view1.name IS 'Name of person in view view1';\n",
            "从数据库中删除视图 view1 的 name 列上的注释。",
            "obclient> COMMENT ON COLUMN view1.name IS '';\n"
        ]
    },
    "COMMIT": {
        "Title": [
            "COMMIT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054312"
        ],
        "Category": [
            "DCL"
        ],
        "Feature": "COMMIT [ WORK ] [ COMMENT 'string' ];\n",
        "Description": [
            "该语句来结束当前的事务并使事务中执行的所有更改永久化。",
            "该语句还会清除事务中的所有保存点并释放事务锁。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nWORK\n为了 SQL 标准兼容性而提供的参数，为可选项。语句 COMMIT; 和 COMMIT WORK; 是等价的。\n\n\nCOMMENT\n提交当前事务并为其关联注释。此注释可以帮助您诊断分布式事务的故障。 说明 如果网络或机器故障阻止此分布式事务正确提交，则 OceanBase 数据库会将注释与事务 ID 一起存储在数据字典中。注释指示发生故障的应用程序，并提供联系提交事务的数据库管理员的信息。\n\n\n"
        ],
        "Examples": [
            "obclient> INSERT INTO tbl1 VALUES (1, 'a',10);\nQuery OK, 1 row affected\n\nobclient> COMMIT;\nQuery OK, 0 rows affected\n",
            "obclient> COMMIT COMMENT 'Transaction code 001 in question, Please contact Zhang XX';\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "向表 tbl1 中插入一行数据并提交此更改。",
            "obclient> INSERT INTO tbl1 VALUES (1, 'a',10);\nQuery OK, 1 row affected\n\nobclient> COMMIT;\nQuery OK, 0 rows affected\n",
            "提交当前事务并为其关联注释。",
            "obclient> COMMIT COMMENT 'Transaction code 001 in question, Please contact Zhang XX';\nQuery OK, 0 rows affected\n"
        ]
    },
    "CREATE CONTEXT": {
        "Title": [
            "CREATE CONTEXT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054340"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "CREATE [ OR REPLACE ] CONTEXT namespace\nUSING [ schema. ] package_name\n[ INITIALIZED { EXTERNALLY | GLOBALLY }\n| ACCESSED GLOBALLY\n] ;\n",
        "Description": [
            "CREATE CONTEXT 语句可以为上下文（一组应用程序定义的属性，用于验证和保护应用程序）创建命名空间，还可以将命名空间与外部创建的用来设置该上下文的包相关联。",
            "用户使用指定包中的 DBMS_SESSION.SET_CONTEXT 过程来设置或重置上下文的属性。",
            "\n注意\n要创建上下文命名空间，您必须具有 CREATE ANY CONTEXT 系统权限。\n"
        ],
        "Illustration": [],
        "Examples": [
            "obclient> CREATE OR REPLACE CONTEXT dev_context USING SYS.DBMS_SESSION ACCESSED GLOBALLY;\nQuery OK, 0 rows affected\n",
            "obclient> CREATE VIEW dev_emp_view AS\n     SELECT * FROM emp\n     WHERE deptno = SYS_CONTEXT('dev_context', 'deptno');\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "创建上下文命名空间 dev_context。",
            "obclient> CREATE OR REPLACE CONTEXT dev_context USING SYS.DBMS_SESSION ACCESSED GLOBALLY;\nQuery OK, 0 rows affected\n",
            "使用 SYS_CONTEXT 函数基于此上下文控制数据访问。如下示例中，emp_mgmt 包已将属性 deptno 定义为指定的部门标识符。您可以通过创建一个基于 deptno 值的视图来限制访问基表员工数据。",
            "obclient> CREATE VIEW dev_emp_view AS\n     SELECT * FROM emp\n     WHERE deptno = SYS_CONTEXT('dev_context', 'deptno');\nQuery OK, 0 rows affected\n"
        ]
    },
    "CREATE DATABASE LINK": {
        "Title": [
            "CREATE DATABASE LINK"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054365"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "CREATE DATABASE LINK dblink_name CONNECT TO user_name@tenant_name\n    IDENTIFIED BY password_str [OB|OCI] HOST 'ip:port[/oracle_sid]' [CLUSTER cluster_name] [MY_NAME local_user_name@local_tenant_name\n            IDENTIFIED BY local_password_str HOST 'local_ip:local_port'];\n\n",
        "Description": [
            "该语句用于创建一个访问指定远端数据库的 dblink。该语句中需要指定 dblink 名称并且提供远端数据库的用户名、租户名、密码、IP 地址、端口号以及访问类型，反向 LINK 需要提供本地数据库的用户名、租户名、密码、IP 地址、端口号，不提供访问类型时默认创建访问远端 OceanBase 数据库的 dblink。",
            "如果远端数据库是 OceanBase 数据库，IP 地址和端口号可以是指定远端 OceanBase 集群中某个 OBServer 节点的 IP 地址和端口号，或者是 OceanBase 集群的 Proxy 的 IP 地址和端口号。当创建 dblink 的端口号是集群的Proxy 的端口号，且 Proxy 是由 ConfigUrl 部署的时候，需要指定 Cluster 名字。当需要反向 LINK 功能时需要额外提供本地 OceanBase 集群中某个 OBServer 的 IP 地址和端口号以及用户名、租户名、密码。",
            "如果远端数据库是 Oracle 数据库，需要显示指定访问类型为 OCI类型，并指定 oracle_sid，且租户名为oracle。"
        ],
        "Illustration": [
            "\n\n\n字段\n描述\n\n\n\n\ndblink_name\n指定要访问的数据库链接的名称。\n\n\nuser_name\n指定远端数据库的用户名。\n\n\ntenant_name\n指定远端数据库的租户名。如果远端数据库是 Oracle，则租户名始终为oracle。\n\n\npassword\n指定远端数据库的用户名的登录密码。密码里有如有除数字、字母以外的特殊字符（~!@#%^&*_-+=|(){}[]:;,.?/ ）时，需要使用双引号把密码括起来避免报语法错误。\n\n\nOB | OCI\nOB 表示指定远端数据库类型为 OceanBase 数据库，OCI 代表指定访问远端数据库类型为 Oracle。两个参数都不提供时，OceanBase 数据库为默认远端数据库类型。\n\n\nip\n指定远端数据库的 IP 地址。如果远端数据库的类型是 OceanBase 数据库，IP 地址可以指定为集群的 Proxy 的 IP 地址，或者集群中某个 OBServer 的 IP 地址。如果指定为 OBServer 的 IP 地址，则要求本地数据库和指定 OBServer 之间的网络是可以互通的。\n\n\nport\n指定远端数据库的端口号。如果远端数据库类型是 OceanBase 数据库，可以指定为集群的 Proxy 的端口号，或者集群中某个 OBServer 的端口号。如果指定为 OBServer 的端口号，则要求本地数据库和指定 OBServer 之间的网络是可以互通的。如果远端数据库类型是 Oracle 数据库，IP 地址为 Oracle 实例的 IP 地址。\n\n\noracle_sid\n远端 Oracle 数据库的 sid。只有远端数据库类型是 Oracle 数据库时才需要指定oracle_sid。\n\n\ncluster_name\n远端 OceanBase 集群名称。只有 IP 和端口号是 Proxy 的，且 Proxy 是在由 ConfigUrl 部署时才需要指定集群名字。集群名字需要使用双引号括起来。\n\n\nlocal_cluster_name\n本地 OceanBase 集群名称。只有 IP 和端口号是 Proxy 的，且 Proxy 是在由 ConfigUrl 部署时才需要指定集群名字。集群名字需要使用双引号括起来。\n\n\nlocal_user\n本地数据库的用户名称。\n\n\nlocal_tenant\n本地数据库的租户名称。\n\n\nlocal_password\n本地数据库的用户名的登录密码，密码里如有除数字、字母以外的特殊字符（~!@#%^&*_-+=|(){}[]:;,.?/ ）时，需要使用双引号把密码括起来避免报语法错误。\n\n\nlocal_ip\n本地数据库集群中某个 OBServer 的 IP 地址。\n\n\nlocal_port\n本地数据库集群中某个 OBServer 的端口号。\n\n\n"
        ],
        "Examples": [
            "obclient> CREATE DATABASE LINK ob_dblink_proxy CONNECT TO ob_testuser@oracle IDENTIFIED BY **1** OB HOST  '10.XXX.XXX.XXX:30084' CLUSTER “ob***”;\nQuery OK, 1 row affected\n",
            "obclient> CREATE DATABASE LINK ob_dblink_reverse_link CONNECT TO ob_testuser2@oracle IDENTIFIED BY **1** OB HOST '10.XXX.XXX.XXX:35305' MY_NAME local_ob_testuser@oracle identified by **2** host '10.XXX.XXX.XXX:35307';\nQuery OK, 1 row affected\n",
            "obclient> CREATE DATABASE LINK orcl_dblink CONNECT TO orcl_testuser@oracle IDENTIFIED BY **1** OCI HOST '10.XXX.XXX.XXX:1521/ORCL';\nQuery OK, 1 row affected\n"
        ],
        "Detailed Examples": [
            "示例 1：创建连接到远端 OceanBase 数据库的 dblink，名称为ob_dblink_proxy。远端数据库的租户使用默认的oracle。Proxy 由 ConfigUrl 部署。集群名字需要用双引号括住，防止集群名字的字母被大写。",
            "obclient> CREATE DATABASE LINK ob_dblink_proxy CONNECT TO ob_testuser@oracle IDENTIFIED BY **1** OB HOST  '10.XXX.XXX.XXX:30084' CLUSTER “ob***”;\nQuery OK, 1 row affected\n",
            "示例 2：创建连接到远端 OceanBase 数据库且带有反向 LINK 的 dblink，名字为 ob_dblink_reverse_link。远端数据库的租户为 oracle。",
            "obclient> CREATE DATABASE LINK ob_dblink_reverse_link CONNECT TO ob_testuser2@oracle IDENTIFIED BY **1** OB HOST '10.XXX.XXX.XXX:35305' MY_NAME local_ob_testuser@oracle identified by **2** host '10.XXX.XXX.XXX:35307';\nQuery OK, 1 row affected\n",
            "示例 3：创建连接到远端 Oracle 数据库的 dblink，名字为orcl_dblink。远端数据库的租户为oracle。",
            "obclient> CREATE DATABASE LINK orcl_dblink CONNECT TO orcl_testuser@oracle IDENTIFIED BY **1** OCI HOST '10.XXX.XXX.XXX:1521/ORCL';\nQuery OK, 1 row affected\n"
        ]
    },
    "CREATE DIRECTORY": {
        "Title": [
            "CREATE DIRECTORY"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054335"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "CREATE [ OR REPLACE ] DIRECTORY directory AS 'path_name';\n",
        "Description": [
            "该语句用来创建路径对象。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nOR REPLACE\n指定 OR REPLACE 表示如果对应的路径对象已经存在，则用新的文件系统路径替代原有的路径定义。\n\n\ndirectory\n指定要创建的路径对象的名称，最大长度为 30 字节。\n\n\npath_name\n指定文件系统路径，定义了共享文件系统所在的绝对路径名。路径名区分大小写。 \n      \n注意\nOceanBase 数据库不会在文件系统上为用户创建路径，用户在指定 path_name 时需要保证路径是真实存在的。\n\n\n\n"
        ],
        "Examples": [
            "obclient -S /home/admin/test421/oceanbase/run/sql.sock -usys@oracle001 -p******\n",
            "obclient [SYS]> SET GLOBAL secure_file_priv = \"/usr/sqldump\";\n",
            "obclient [SYS]> \\q\n",
            "obclient -hxxx.xxx.xxx.xxx -P2881 -utest_user001@oracle001 -p******\n",
            "obclient [TEST_USER001]> CREATE OR REPLACE DIRECTORY sql_file_dir AS '/usr/sqldump';\n"
        ],
        "Detailed Examples": [
            "参照下列步骤来创建路径对象。",
            "设置全局安全路径。",
            "\n注意\n由于安全原因，设置系统变量 secure_file_priv 时，只能通过本地 Socket 连接数据库执行修改该全局变量的 SQL 语句。更多信息，请参见 secure_file_priv。\n",
            "\n通过本地 Unix Socket 连接 OceanBase 数据库，示例如下： obclient -S /home/admin/test421/oceanbase/run/sql.sock -usys@oracle001 -p******\n\n设置全局安全路径。 obclient [SYS]> SET GLOBAL secure_file_priv = \"/usr/sqldump\";\n\n",
            "通过本地 Unix Socket 连接 OceanBase 数据库，示例如下：",
            "obclient -S /home/admin/test421/oceanbase/run/sql.sock -usys@oracle001 -p******\n",
            "设置全局安全路径。",
            "obclient [SYS]> SET GLOBAL secure_file_priv = \"/usr/sqldump\";\n",
            "退出登录。",
            "\n说明\n由于 secure_file_priv 是 GLOBAL 变量，所以需要执行 \\q 退出使之生效。\n",
            "obclient [SYS]> \\q\n",
            "重连数据库。",
            "obclient -hxxx.xxx.xxx.xxx -P2881 -utest_user001@oracle001 -p******\n",
            "创建一个路径对象 sql_file_dir。",
            "obclient [TEST_USER001]> CREATE OR REPLACE DIRECTORY sql_file_dir AS '/usr/sqldump';\n"
        ]
    },
    "CREATE EXTERNAL TABLE": {
        "Title": [
            "CREATE EXTERNAL TABLE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054328"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "CREATE EXTERNAL TABLE <table_name>\n    ( [ <column_name> <column_type> [AS <expr>] ]\n      [ , <column_name> <column_type> [AS <expr>] ]\n      [ , ... ] )\n    LOCATION = '<string>'\n    formatTypeOptions\n    [ PARTITION BY ( <column_name> [, <column_name> ... ] ) ]\n    [ PARTITION_TYPE = USER_SPECIFIED ]\n    [ PATTERN = '<regex_pattern>' ]\n    [AUTO_REFRESH = 'xx']\nformatTypeOptions:\n    FORMAT = (\n      TYPE = 'CSV'\n      LINE_DELIMITER = '<string>' | <expr>\n      FIELD_DELIMITER = '<string>' | <expr>\n      ESCAPE = '<character>' | <expr>\n      FIELD_OPTIONALLY_ENCLOSED_BY = '<character>' | <expr>\n      ENCODING = 'charset'\n      NULL_IF = ('<string>' | <expr>, '<string>' | <expr> ...)\n      SKIP_HEADER = <int>\n      SKIP_BLANK_LINES = { TRUE | FALSE }\n      TRIM_SPACE = { TRUE | FALSE }\n      EMPTY_FIELD_AS_NULL = { TRUE | FALSE }\n    )\n    | FORMAT = (TYPE = 'PARQUET')\n",
        "Description": [
            "该语句用来在数据库中创建一张新的外表。",
            "外表是数据库管理系统中的一项关键功能，通常数据库中的表存放于数据库的存储空间中，而外表的数据存储于外部存储服务中。",
            "创建外表时需要定义数据的文件路径和文件格式，之后用户可以通过外表从外部存储服务中读取文件的数据。外表是只读的，可以在查询语句使用，但是不能执行 DML 操作。外表不支持定义约束和创建索引。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\ntable_name\n要创建的外表的名称。\n\n\ncolumn_name\n外表的列名称。默认情况下，文件中的数据列和外表定义的列是自动按顺序对应起来的。\n\n\ncolumn_type\n定义外表的列类型，但是不能定义约束（例如，DEFAULT、NOT NULL、UNIQUE、CHECK、PRIMARY KEY、FOREIGN KEY 等）。\n\n\nAS \n用于手动指定列映射。当文件中的列顺序与外表的列所定义顺序不一致时，可以通过 metadata$filecol{N} 所表示的伪列来指定外表的列与文件中的第 N 列的对应关系。例如，c2 INT AS (metadata$filecol4) 表示外表的 c2 列对应文件中的第 4 列。需要注意的是，如果指定了手动列映射，那么自动映射关系将会失效，而且所有的列都需要手动定义映射关系。\n\n\nLOCATION\n指定外表文件存放的路径。通常外表的数据文件存放于单独一个目录中，文件夹中可以包含子目录，在创建表时，外表会自动收集该目录中的所有文件。 \n      \n本地 LOCATION 格式为 LOCATION = '[file://] local_file_path'，其中local_file_path 可以为相对路径，也可以为绝对路径。如果填写的是相对路径，则当前目录必须为 OceanBase 数据库的安装目录；secure_file_priv 用于配置 OBServer 节点有权限访问的文件路径。local_file_path 只能是 secure_file_priv 路径的子路径。\n远程 LOCATION 格式为 LOCATION = '{oss\\|cos\\|s3}://$ACCESS_ID:$ACCESS_KEY@$HOST/remote_file_path'，其中 $ACCESS_ID、$ACCESS_KEY 和 $HOST 是访问 OSS、COS 和 S3 时需要配置的访问信息，这些敏感的访问信息会以加密的方式存放在数据库的系统表中。\n\n\n\nFORMAT = ( TYPE = ‘CSV’… )\n指定外部文件的格式为 CSV 类型。LINE_DELIMITER：指定 CSV 文件的行分隔符。默认值为 LINE_DELIMITER='\\n'FIELD_DELIMITER：指定 CSV 文件的列分隔符。默认值为 FIELD_DELIMITER='\\t'。ESCAPE：指定 CSV 文件的转义符号，只能为 1 个字节。默认值为 ESCAPE ='\\'。FIELD_OPTIONALLY_ENCLOSED_BY：指定 CSV 文件中包裹字段值的符号。默认值为空。ENCODING：指定文件的字符集编码格式，当前 Oracle 模式支持的所有字符集请参见 字符集。如果不指定，默认值为 UTF8MB4。NULL_IF：指定被当作 NULL 处理的字符串。默认值为空。SKIP_HEADER：跳过文件头，并指定跳过的行数。SKIP_BLANK_LINES：指定是否跳过空白行。默认值为 FALSE，表示不跳过空白的行。TRIM_SPACE：指定是否删除文件中字段的头部和尾部空格。默认值为 FALSE，表示不删除文件中字段头尾的空格。EMPTY_FIELD_AS_NULL：指定是否将空字符串当作 NULL 处理。默认值为 FALSE，表示不将空字符串当做 NULL 处理。\n\n\nFORMAT = ( TYPE = ‘PARQUET’… )\n指定外部文件的格式为 PARQUET 类型。\n\n\nPATTERN\n指定一个正则模式串，用于过滤 LOCATION 目录下的文件。对于每个 LOCATION 目录下的文件路径，如果能够匹配该模式串，外表会访问这个文件，否则外表会跳过这个文件。如果不指定该参数，则默认可以访问 LOCATION 目录下的所有文件。外表会将LOCATION 指定路径下满足 PATTERN 的文件列表保存在数据库系统表中，外表扫描时会根据这个列表来访问外部的文件。\n\n\nPARTITION_TYPE = USER_SPECIFIED\n当您需要自己手动添加和删除分区，而不是让外表自动管理分区时，需要指定 PARTITION_TYPE = USER_SPECIFIED 字段。\n\n\nAUTO_REFRESH = ‘xx’\n用于外表自动刷新，目前有三个取值。OFF：默认值，表示关闭自动刷新。INTERVAL：让该外表可以通过 dbms_external_table 来管理自动刷新规则。IMMEDIATE：代表每次 SQL 访问外表时，需要去刷新一次该 SQL 相关的外表 META。\n\n\n"
        ],
        "Examples": [
            "obclient> SET GLOBAL secure_file_priv = \"\"\nQuery OK, 0 rows affected\nobclinet> \\q\nBye\n",
            "1,'Dave','Smith','dsmith@outlook.com','friend',32\n2,'Xena','Johnson','xjonson@outlook.com','contact',45\n3,'Fred','Jackon','fjackson@outlook.com','co-worker',19\n4,'Alma','Tyler','atyler@outlook.com','friend',53\n",
            "obclient> CREATE EXTERNAL TABLE contacts (\n    id    INT,\n    firstname  VARCHAR(100),\n    lastname   VARCHAR(100),\n    email      VARCHAR(255),\n    category   CHAR(30),\n    age        NUMBER )\n   LOCATION = '/home/admin/test/'\n   FORMAT = (\n     TYPE = 'CSV'\n     FIELD_DELIMITER = ','\n     FIELD_OPTIONALLY_ENCLOSED_BY =''''\n    )PATTERN ='extdata.csv';\n",
            "obclient> SELECT * FROM contacts;\n+------+-----------+----------+----------------------+--------------------------------+------+\n| ID   | FIRSTNAME | LASTNAME | EMAIL                | CATEGORY                       | AGE  |\n+------+-----------+----------+----------------------+--------------------------------+------+\n|    1 | Dave      | Smith    | dsmith@outlook.com   | friend                         |   32 |\n|    2 | Xena      | Johnson  | xjonson@outlook.com  | contact                        |   45 |\n|    3 | Fred      | Jackon   | fjackson@outlook.com | co-worker                      |   19 |\n|    4 | Alma      | Tyler    | atyler@outlook.com   | friend                         |   53 |\n+------+-----------+----------+----------------------+--------------------------------+------+\n4 rows in set  \n"
        ],
        "Detailed Examples": [
            "准备数据。首先需要设置 secure_file_priv 的路径为 /home/admin/，将要导入的外表数据所对应的 CSV 文件 extdata.csv 放在当前本地连接的 OBServer 节点的 /home/admin/test 路径中。",
            "设置全局安全路径的示例如下。",
            "obclient> SET GLOBAL secure_file_priv = \"\"\nQuery OK, 0 rows affected\nobclinet> \\q\nBye\n",
            "\n说明\n由于 secure_file_priv 是 GLOBAL 变量，所以需要执行 \\q 退出使之生效。\n",
            "CSV 文件中的内容如下：",
            "1,'Dave','Smith','dsmith@outlook.com','friend',32\n2,'Xena','Johnson','xjonson@outlook.com','contact',45\n3,'Fred','Jackon','fjackson@outlook.com','co-worker',19\n4,'Alma','Tyler','atyler@outlook.com','friend',53\n",
            "用户租户登陆数据库后，创建外表 contacts。",
            "obclient> CREATE EXTERNAL TABLE contacts (\n    id    INT,\n    firstname  VARCHAR(100),\n    lastname   VARCHAR(100),\n    email      VARCHAR(255),\n    category   CHAR(30),\n    age        NUMBER )\n   LOCATION = '/home/admin/test/'\n   FORMAT = (\n     TYPE = 'CSV'\n     FIELD_DELIMITER = ','\n     FIELD_OPTIONALLY_ENCLOSED_BY =''''\n    )PATTERN ='extdata.csv';\n",
            "查询外表 contacts 中的数据。",
            "obclient> SELECT * FROM contacts;\n+------+-----------+----------+----------------------+--------------------------------+------+\n| ID   | FIRSTNAME | LASTNAME | EMAIL                | CATEGORY                       | AGE  |\n+------+-----------+----------+----------------------+--------------------------------+------+\n|    1 | Dave      | Smith    | dsmith@outlook.com   | friend                         |   32 |\n|    2 | Xena      | Johnson  | xjonson@outlook.com  | contact                        |   45 |\n|    3 | Fred      | Jackon   | fjackson@outlook.com | co-worker                      |   19 |\n|    4 | Alma      | Tyler    | atyler@outlook.com   | friend                         |   53 |\n+------+-----------+----------+----------------------+--------------------------------+------+\n4 rows in set  \n"
        ]
    },
    "CREATE INDEX": {
        "Title": [
            "CREATE INDEX"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054326"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "CREATE [hint_options]  [UNIQUE] INDEX index_name\n    [USING BTREE] ON table_name (sort_column_key [, sort_column_key...])\n    [INDEXTYPE IS MDSYS.SPATIAL_INDEX] [index_option...] [partition_option] [index_column_group_option]\n\nsort_column_key:  \n    index_expr [ASC] opt_null_pos [ID id]\n\nopt_null_pos:  \n      empty\n    | NULLS LAST\n    | NULLS FIRST\n\nindex_option:  \n      GLOBAL\n    | LOCAL\n    | BLOCK_SIZE [=] integer\n    | COMMENT STRING_VALUE\n    | STORING (column_name_list)\n    | WITH ROWID\n    | WITH PARSER STRING_VALUE\n    | index_using_algorithm\n    | visibility_option\n    | DATA_TABLE_ID [=] data_table_id\n    | INDEX_TABLE_ID [=] index_table_id\n    | MAX_USED_PART_ID [=] used_part_id\n    | physical_attributes_option\n    | parallel_option\n\nparallel_option:  \n      PARALLEL [=] integer\n    | NOPARALLEL\n\nindex_column_group_option：\n    WITH COLUMN GROUP([all columns, ]each column)\n",
        "Description": [
            "该语句用来创建索引。索引是创建在表上的，对数据库表中一列或多列的值进行排序的一种结构。其作用主要在于提高查询的速度，降低数据库系统的性能开销。",
            "OceanBase 数据库当前版本支持的索引类型包含唯一索引和非唯一索引，创建索引时可以通过 STORING(column_name,...) 指定索引表上的冗余列。索引表的冗余列除了包含用户指定添加的列外，还会自动添加上主键表的主键列（如果无主键表则包含 Hidden PK），存储额外的列在索引中可以为数据库优化器提供更多的选择。",
            "\n说明\n在 OceanBase 数据库 Oracle 模式下，如果删除表中的任一索引列，则所创建的索引失效。\n"
        ],
        "Illustration": [
            "\n\n\n参数项\n描述\n\n\n\n\nhint_options\n指定 Hint 选项，为可选项。目前仅支持使用 parallel，如 /*+ parallel(10) */。\n\n\n[UNIQUE]\n可选项，用于指定创建唯一索引。\n\n\nindex_name\n指定待创建的索引名称。\n\n\nUSING BTREE\n可选项，表示创建索引时使用 B-tree 索引结构。 \n      \n说明\n目前仅支持指定为 USING BTREE。\n\n\n\ntable_name\n指定要在其上创建索引的表，可以直接指定表的名字，也可使用 schema_name.table_name 格式指定表名和表所属的数据库名。\n\n\nsort_column_key\n指定一个排序列的键，创建索引时可以指定多个排序列，多个排序列使用英文逗号(,)分开，详细介绍可参见下文 sort_column_key。\n\n\nINDEXTYPE IS MDSYS.SPATIAL_INDEX\n指定创建空间索引。 \n      \n注意\n创建空间索引的列必须在建表时指定 SRID 信息，更多有关创建空间索引的信息，参见 创建空间索引。\n\n\n\nindex_option\n指定索引选项，创建索引时可以指定多个索引选项，多个索引选项使用英文空格分开，详细介绍可参见下文 index_option。\n\n\npartition_option\n指定创建索引分区的选项，支持指定哈希分区、范围分区、列表分区以及外部表分区。\n\n\nindex_column_group_option\n指定索引选项。详细介绍可参见下文 index_column_group_option。\n\n\n",
            "sort_column_key",
            "index_expr：指定排序所依据的列或表达式，但是不允许是布尔表达式，例如 c1=c1。OceanBase 数据库当前版本禁止创建生成列上的函数索引。函数索引所支持的表达式参见 函数索引支持的系统函数列表。",
            "ASC：可选项，表示按升序排序，目前暂不支持降序（DESC）排列。",
            "opt_null_pos：指定空值在排序中的位置，有如下三种取值。",
            "\nempty：表示未指定空值位置，在默认情况下将遵循数据库管理系统的默认行为。\nNULLS LAST：指定空值在排序结果中出现在非空值之后。\nNULLS FIRST：指定空值在排序结果中出现在非空值之前。\n",
            "empty：表示未指定空值位置，在默认情况下将遵循数据库管理系统的默认行为。",
            "NULLS LAST：指定空值在排序结果中出现在非空值之后。",
            "NULLS FIRST：指定空值在排序结果中出现在非空值之前。",
            "ID id：可选项，表示排序键的 ID 号。",
            "例如，在名为 t3 的表上创建一个名为 index3 的索引，指定该索引在 c1 列上按升序进行排序，并指定空值在排序结果中出现在非空值之后。",
            "CREATE INDEX index3 ON t3 (c1 ASC NULLS LAST);\n",
            "index_option",
            "GLOBAL：表示创建全局索引。",
            "LOCAL：表示创建局部索引。",
            "BLOCK_SIZE [=] integer：指定索引块的大小，即每个索引块中的字节数。",
            "COMMENT STRING_VALUE：为索引添加注释。",
            "STORING (column_name_list)：指定要存储在索引中的列。",
            "WITH ROWID：创建包含行标识符的索引。",
            "WITH PARSER STRING_VALUE：指定索引所需的解析器。",
            "index_using_algorithm：指定索引所使用的算法。",
            "visibility_option：指定索引的可见性。",
            "DATA_TABLE_ID [=] data_table_id：指定索引所属的数据表 ID。",
            "INDEX_TABLE_ID [=] index_table_id：指定索引表的 ID。",
            "MAX_USED_PART_ID [=] used_part_id：指定索引的最大已使用分区 ID。",
            "physical_attributes_option：定义索引的物理属性选项。",
            "parallel_option：指定索引的并行情况。",
            "\nPARALLEL [=] integer：指定并行执行的级别，integer 是一个整数，表示执行的并行度。\nNOPARALLEL：指定禁用并行执行。\n",
            "PARALLEL [=] integer：指定并行执行的级别，integer 是一个整数，表示执行的并行度。",
            "NOPARALLEL：指定禁用并行执行。",
            "index_column_group_option",
            "WITH COLUMN GROUP(all columns, each column)",
            "：指定创建行存列存冗余的索引。",
            "WITH COLUMN GROUP(all columns)",
            "：指定创建行存索引。",
            "WITH COLUMN GROUP(each column)",
            "：指定创建列存索引。"
        ],
        "Examples": [
            "CREATE TABLE test_tbl1 (col1 NUMBER, col2 VARCHAR2(50));\n",
            "CREATE INDEX idx1_test_tbl1 ON test_tbl1 (col1) WITH COLUMN GROUP(each column);\n"
        ],
        "Detailed Examples": [
            "使用以下 SQL 语句为表创建列存索引。",
            "使用下面 SQL 语句创建表 test_tbl1。",
            "CREATE TABLE test_tbl1 (col1 NUMBER, col2 VARCHAR2(50));\n",
            "在 test_tbl1 表上创建列存索引 idx1_test_tbl1，引用 col1 列。",
            "CREATE INDEX idx1_test_tbl1 ON test_tbl1 (col1) WITH COLUMN GROUP(each column);\n"
        ]
    },
    "CREATE KEYSTORE": {
        "Title": [
            "CREATE KEYSTORE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054358"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "ADMINISTER KEY MANAGEMENT CREATE KEYSTORE [keystore_name] IDENTIFIED BY [password] ;\n",
        "Description": [
            "该语句用来创建 Keystore 对象，此对象用于存储密钥。在透明加密场景中，需要创建 Keystore 对象，每个租户最多只能创建一个 Keystore 对象。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nkeystore_name\n指定 Keystore 名称。\n\n\npassword\n指定访问控制 Keystore 的密码。\n\n\n"
        ],
        "Examples": [
            "obclient> ADMINISTER KEY MANAGEMENT CREATE KEYSTORE keystore1 IDENTIFIED BY **1***;\n"
        ],
        "Detailed Examples": [
            "创建一个 Keystore 对象 keystore1。",
            "obclient> ADMINISTER KEY MANAGEMENT CREATE KEYSTORE keystore1 IDENTIFIED BY **1***;\n"
        ]
    },
    "CREATE MATERIALIZED VIEW LOG": {
        "Title": [
            "CREATE MATERIALIZED VIEW LOG"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054325"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "CREATE MATERIALIZED VIEW LOG ON [schema.] table [parallel_clause] [with_clause] [mv_log_purge_clause];\n\nparallel_clause:\n    NOPARALLEL \n    | PARALLEL integer\n\nwith_clause:\n    WITH [ {PRIMARY KEY | ROWID | SEQUENCE} \n            [ { , PRIMARY KEY | , ROWID | , SEQUENCE }]... ] \n        (column_name [, column_name]...) \n        [new_values_clause]\n\nnew_values_clause:\n    {INCLUDING | EXCLUDING} NEW VALUES\n\nmv_log_purge_clause:\n    PURGE {IMMEDIATE [ SYNCHRONOUS ]\n        | START WITH datetime_expr [NEXT datetime_expr]\n        | [START WITH datetime_expr] NEXT datetime_expr\n        }\n",
        "Description": [
            "该语句用来创建物化视图日志。",
            "物化视图日志（Materialized View Log，mlog）用于记录用户表（基表）的增量更新数据，以支持物化视图的快速刷新功能。mlog 是一个记录表，追踪基表的变化，并将这些变化应用于相应的物化视图，实现快速刷新。",
            "\n说明\nOceanBase 数据库 mlog 暂时不支持指定 Partition，mlog 的 Partition 和基表的 Partition 是绑定关系。\n"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nschema.\n可选项，指定物化视图日志基表所在的 Schema。如果省略 schema.，则默认基表在您自己的 Schema 中。\n\n\ntable\n指定物化视图日志对应的基表名称。\n\n\nparallel_clause\n可选项，指定创建物化视图表的 dop，即用于指定并行处理物化视图日志的级别。详细介绍可参见下文 parallel_clause。\n\n\nwith_clause\n可选项，指定物化视图日志中包含的辅助列。用于指示是否记录基表发生变化时的主键（PRIMARY KEY）和行标识符（ROWID），并且还可以使用该子句添加序列（SEQUENCE）来为物化视图日志提供额外的排序信息。详细介绍可参见下文 with_clause。\n\n\ncolumn_name\n可选项，指定要在所有已更改行的物化视图日志中记录其值的列名称。\n\n\nnew_values_clause\n可选项，是否在物化视图日志中同时记录更新操作中的旧值和新值。详细介绍可参见下文 new_values_clause。\n\n\nmv_log_purge_clause\n可选项，指定物化视图日志中数据的清除时间。详细介绍可参见下文 mv_log_purge_clause。\n\n\n",
            "parallel_clause",
            "NOPARALLEL：默认配置，并行度为 1。",
            "PARALLEL integer：指定并行度，integer 取值大于等于 1。",
            "with_clause",
            "PRIMARY KEY：表示物化视图日志记录的是基表的主键列。对有主键表才生效，如果不指定，系统会自动为物化视图日志添加这个属性，即物化视图日志默认会包含主键列。",
            "ROWID：表示物化视图日志记录的是基表的行标识符（ROWID）。如果不指定，系统会自动为物化视图日志添加这个属性，即物化视图日志默认会包含 M_ROW$$ 列。",
            "SEQUENCE：表示物化视图日志记录的是事务内的多行更新序号（seq_no）。系统会自动为物化视图日志添加这个属性，即物化视图日志会默认包含 SEQUENCE$$ 列。",
            "new_values_clause",
            "INCLUDING：默认设置，表示可以在物化视图日志中保存新旧值。如果希望物化视图支持快速刷新，则必须指定 INCLUDING NEW VALUES。",
            "EXCLUDING：表示禁用在物化视图日志中记录新值。请不要使用 EXCLUDING NEW VALUES，否则将会报错。",
            "mv_log_purge_clause",
            "\n注意\n只有在物化视图成功刷新后，物化视图日志中的相应数据才会被清除。\n",
            "IMMEDIATE：表示在每次刷新完物化视图后就立即清除相应的物化视图日志。默认值是 SYNCHRONOUS。",
            "\nSYNCHRONOUS：可选项，表示同步地执行清除。\n",
            "SYNCHRONOUS",
            "：可选项，表示同步地执行清除。",
            "START WITH datetime_expr [NEXT datetime_expr]：",
            "\nSTART WITH datetime_expr：表示物化视图日志的首次清除时间。\n[NEXT datetime_expr]：可选项，表示下一次清除物化视图日志的时间。用于设置下一次清除物化视图日志的时间。\n",
            "START WITH datetime_expr",
            "：表示物化视图日志的首次清除时间。",
            "[NEXT datetime_expr]",
            "：可选项，表示下一次清除物化视图日志的时间。用于设置下一次清除物化视图日志的时间。",
            "[START WITH datetime_expr] NEXT datetime_expr：如果未指定 START WITH datetime_expr 参数，仅指定 NEXT datetime_expr 参数，那么物化视图日志的第一次清除时间将设定为 NEXT datetime_expr 参数的值。",
            "\n注意\n请确保 START WITH datetime_expr 和 NEXT datetime_expr 这两个时间表达式设定在未来的时间点，否则会引发错误。\n",
            "建议使用 current_date 表示当前时区时间，时间表达式示例如下：",
            "从当前时间（current_date）开始，每隔 10 秒清理一次过期的物化视图日志记录。",
            "START WITH current_date NEXT current_date + INTERVAL '10' SECOND\n",
            "从当前时间（current_date）开始，每隔 10 小时清理一次过期的物化视图日志记录。",
            "START WITH current_date NEXT current_date + INTERVAL '10' HOUR\n",
            "表示从当前时间（current_date）开始，每隔 1 天清理一次过期的物化视图日志记录。",
            "START WITH current_date NEXT current_date + 1\n"
        ],
        "Examples": [
            "CREATE TABLE test_tbl1 (id NUMBER PRIMARY KEY, name VARCHAR2(20), age NUMBER);\n",
            "CREATE MATERIALIZED VIEW LOG ON test_tbl1 \n  PARALLEL 5 \n  WITH SEQUENCE(name ,age) INCLUDING NEW VALUES\n  PURGE START WITH current_date NEXT current_date + 1;\n",
            "DESC mlog$_test_tbl1;\n",
            "+------------+--------------+------+------+---------+-------+\n| FIELD      | TYPE         | NULL | KEY  | DEFAULT | EXTRA |\n+------------+--------------+------+------+---------+-------+\n| ID         | NUMBER       | NO   | PRI  | NULL    | NULL  |\n| NAME       | VARCHAR2(20) | YES  | NULL | NULL    | NULL  |\n| AGE        | NUMBER       | YES  | NULL | NULL    | NULL  |\n| SEQUENCE$$ | BIGINT       | NO   | PRI  | NULL    | NULL  |\n| DMLTYPE$$  | VARCHAR2(1 ) | YES  | NULL | NULL    | NULL  |\n| OLD_NEW$$  | VARCHAR2(1 ) | YES  | NULL | NULL    | NULL  |\n+------------+--------------+------+------+---------+-------+\n6 rows in set\n"
        ],
        "Detailed Examples": [
            "创建表 test_tbl1。",
            "CREATE TABLE test_tbl1 (id NUMBER PRIMARY KEY, name VARCHAR2(20), age NUMBER);\n",
            "在 test_tbl1 表上创建物化视图日志。指定并行处理物化视图日志的并行度为 5 和物化视图日志记录 name 和 age 列的变更信息，并且会记录变更前后的新值；配置物化视图日志从当前日期开始，每隔 1 天清理一次过期的物化视图日志记录。",
            "CREATE MATERIALIZED VIEW LOG ON test_tbl1 \n  PARALLEL 5 \n  WITH SEQUENCE(name ,age) INCLUDING NEW VALUES\n  PURGE START WITH current_date NEXT current_date + 1;\n",
            "查看表 test_tbl1 上物化视图日志的信息。",
            "DESC mlog$_test_tbl1;\n",
            "返回结果如下：",
            "+------------+--------------+------+------+---------+-------+\n| FIELD      | TYPE         | NULL | KEY  | DEFAULT | EXTRA |\n+------------+--------------+------+------+---------+-------+\n| ID         | NUMBER       | NO   | PRI  | NULL    | NULL  |\n| NAME       | VARCHAR2(20) | YES  | NULL | NULL    | NULL  |\n| AGE        | NUMBER       | YES  | NULL | NULL    | NULL  |\n| SEQUENCE$$ | BIGINT       | NO   | PRI  | NULL    | NULL  |\n| DMLTYPE$$  | VARCHAR2(1 ) | YES  | NULL | NULL    | NULL  |\n| OLD_NEW$$  | VARCHAR2(1 ) | YES  | NULL | NULL    | NULL  |\n+------------+--------------+------+------+---------+-------+\n6 rows in set\n"
        ]
    },
    "CREATE MATERIALIZED VIEW": {
        "Title": [
            "CREATE MATERIALIZED VIEW"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054359"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "CREATE MATERIALIZED VIEW view_name [([column_list] [PRIMARY KEY(column_list)])] [table_option_list] [partition_option] [refresh_clause [query_rewrite_clause] [on_query_computation_clause]] AS view_select_stmt;\n\ncolumn_list:\n    column_name [, column_name ...]\n\nrefresh_clause:\n    REFRESH [COMPLETE | FAST | FORCE] [mv_refresh_on_clause]\n    | NEVER REFRESH\n\nmv_refresh_on_clause:\n    [ON DEMAND] [[START WITH expr] [NEXT expr]]\n\nquery_rewrite_clause:\n    DISABLE QUERY REWRITE\n    | ENABLE QUERY REWRITE\n\non_query_computation_clause:\n    DISABLE ON QUERY COMPUTATION\n    | ENABLE ON QUERY COMPUTATION\n",
        "Description": [
            "该语句用来创建物化视图。",
            "物化视图是一种特殊类型的数据库对象，它存储查询结果的副本，并定期刷新（也可以手动刷新）以保持数据的最新状态。物化视图可以包含聚合，连接和子查询等操作，并且可以被索引和分区，以进一步提高性能。"
        ],
        "Illustration": [
            "\n说明\n在创建物化视图的语句中，不能直接创建索引。要为物化视图创建索引，需要单独使用 CREATE INDEX 语句。\n",
            "\n\n\n参数\n描述\n\n\n\n\nview_name\n指定待创建的物化视图的名称。\n\n\ncolumn_list\n可选项，指定物化视图的列列表。如果想要为视图列指定明确的名称，可以使用 column_list 子句，并在其中使用逗号分隔的列名。 \n      \n说明\n\n\n视图必须具有唯一的列名，不得有重复，就像基表一样。缺省情况下，视图的列名将使用 SELECT 语句中检索的列名。 \n         \n在 column_list 中指定的列名数量必须与 SELECT 语句中检索的列数相同。\n\n\n\n\n\ncolumn_name\n指定物化视图的列名称。缺省情况下，由 SELECT 语句检索的列名将用作视图列名。\n\n\nPRIMARY KEY\n用于指定物化视图的主键。 \n      \n注意\n\n\n如果未指定物化视图的列名称，那么在物化视图的主键中所使用的列名应与 SELECT 语句所检索的列名相同。\n当为物化视图指定列名称时，列名称的列表末尾与 PRIMARY KEY 定义之间应以英文逗号进行分隔。\n\n\n\n\n\ntable_option_list\n可选项，指定物化视图的表选项。与普通表一样，物化视图可以单独设置 Table Option，更多参数信息，请参见 CREATE TABLE。\n\n\npartition_option\n可选项，指定物化视图的分区选项。与普通表一样，物化视图可以单独设置分区，更多参数信息，请参见 CREATE TABLE。\n\n\nrefresh_clause\n可选项，指定物化视图的刷新方式。详细介绍可参见下文 refresh_clause。\n\n\nmv_refresh_on_clause\n可选项，指定物化视图的模式，即刷新时机。详细介绍可参见下文 mv_refresh_on_clause。\n\n\nquery_rewrite_clause\n可选项，指定当前物化视图是否开启自动改写。详细介绍可参见下文 query_rewrite_clause。\n\n\non_query_computation_clause\n可选项，指定当前物化视图是否是实时物化视图。详细介绍可参见下文 on_query_computation_clause。\n\n\nview_select_stmt\n用于定义物化视图数据的查询（SELECT）语句。该语句用于从基表（普通表）中检索数据，并将结果存储到物化视图中。view_select_stmt 的语法与常规 SELECT 语句相同，语法信息请参见 SIMPLE SELECT。\n\n\n",
            "refresh_clause",
            "REFRESH [FAST | COMPLETE | FORCE] [mv_refresh_on_clause]：表示刷新物化视图的方式。",
            "\n[COMPLETE | FAST | FORCE]：指定物化视图的刷新方式。可选项，如果不指定任何刷新方式默认是 FORCE。\n\nCOMPLETE：表示进行全量刷新，即重新计算整个物化视图的数据，确保视图中的数据与源表完全一致。\nFAST：表示进行增量刷新，即只刷新与源表变化相关的数据，避免对整个视图进行完全计算。\n\n注意\n当使用 REFRESH FAST 子句刷新物化视图时，需要在创建物化视图之前提前创建基表的物化视图日志。有关创建物化视图日志的信息，请参见 创建物化视图日志。\n\nFORCE：默认值，表示进行混合刷新，首先尝试增量刷新，如果增量刷新失败，则执行全量刷新。\n\n",
            "[COMPLETE | FAST | FORCE]：指定物化视图的刷新方式。可选项，如果不指定任何刷新方式默认是 FORCE。",
            "\nCOMPLETE：表示进行全量刷新，即重新计算整个物化视图的数据，确保视图中的数据与源表完全一致。\nFAST：表示进行增量刷新，即只刷新与源表变化相关的数据，避免对整个视图进行完全计算。\n\n注意\n当使用 REFRESH FAST 子句刷新物化视图时，需要在创建物化视图之前提前创建基表的物化视图日志。有关创建物化视图日志的信息，请参见 创建物化视图日志。\n\nFORCE：默认值，表示进行混合刷新，首先尝试增量刷新，如果增量刷新失败，则执行全量刷新。\n",
            "COMPLETE：表示进行全量刷新，即重新计算整个物化视图的数据，确保视图中的数据与源表完全一致。",
            "FAST：表示进行增量刷新，即只刷新与源表变化相关的数据，避免对整个视图进行完全计算。",
            "\n注意\n当使用 REFRESH FAST 子句刷新物化视图时，需要在创建物化视图之前提前创建基表的物化视图日志。有关创建物化视图日志的信息，请参见 创建物化视图日志。\n",
            "FORCE：默认值，表示进行混合刷新，首先尝试增量刷新，如果增量刷新失败，则执行全量刷新。",
            "NEVER REFRESH：指定物化视图不需要刷新。即表示物化视图只在创建时进行刷新，并在创建后不允许再次刷新。",
            "mv_refresh_on_clause",
            "\n说明\n除了使用 mv_refresh_on_clause 子句来定义刷新计划，您还可以通过调用 dbms_mviews.refresh 存储过程来手动刷新物化视图。\n",
            "ON DEMAND：可选项，表示按需刷新物化视图。",
            "[[START WITH expr] [NEXT expr]]：可选项，表示定义刷新间隔。",
            "\n[START WITH expr]：可选项，表示刷新计划开始的时间表达式。\n[NEXT expr]：可选项，表示下一次刷新的时间表达式。\n\n注意\n如果使用了 NEXT 子句，刷新计划的时间表达式必须设定在未来的时间点，否则会引发错误。\n\n",
            "[START WITH expr]：可选项，表示刷新计划开始的时间表达式。",
            "[NEXT expr]：可选项，表示下一次刷新的时间表达式。",
            "\n注意\n如果使用了 NEXT 子句，刷新计划的时间表达式必须设定在未来的时间点，否则会引发错误。\n",
            "建议使用 current_date 表示当前时区时间，时间表达式示例如下：",
            "从当前时间（current_date）开始，每隔 10 秒刷新一次物化视图。",
            "START WITH current_date NEXT current_date + INTERVAL '10' SECOND\n",
            "从当前时间（current_date）开始，每隔 10 小时刷新一次物化视图。",
            "START WITH current_date NEXT current_date + INTERVAL '10' HOUR\n",
            "表示从当前时间（current_date）开始，每隔 1 天刷新一次物化视图。",
            "START WITH current_date NEXT current_date + 1\n",
            "query_rewrite_clause",
            "\n注意\n\n\n本功能需要物化视图仅包含 SELECT JOIN 与 WHERE 子句，即 SPJ 查询。对于不满足条件的物化视图，不会报错，但不会被用于改写。\nOceanBase 数据库 Oracle 模式下，创建支持改写的物化视图时必须指定刷新方式（refresh_clause）。\n\n\n",
            "DISABLE QUERY REWRITE",
            "：默认值，指定当前物化视图不开启自动改写。",
            "ENABLE QUERY REWRITE",
            "：指定当前物化视图开启自动改写。",
            "更多物化视图改写的信息，参见 物化视图查询改写。",
            "on_query_computation_clause",
            "\n注意\nOceanBase 数据库 Oracle 模式下，创建实时物化视图必须指定刷新方式（refresh_clause）。\n",
            "DISABLE ON QUERY COMPUTATION",
            "：默认值，指定创建普通物化视图。",
            "ENABLE ON QUERY COMPUTATION",
            "：指定创建实时物化视图。",
            "更多实时物化视图的信息，参见 创建物化视图 中 创建实时物化视图 章节。"
        ],
        "Examples": [
            "CREATE TABLE test_tbl1 (col1 NUMBER PRIMARY KEY, col2 VARCHAR2(20), col3 NUMBER, col4 NUMBER);\n",
            "CREATE MATERIALIZED VIEW mv_test_tbl1\n  PARTITION BY HASH(col1) PARTITIONS 8\n  REFRESH COMPLETE START WITH current_date NEXT current_date + 1\n  AS SELECT col1, col2, col3\n    FROM test_tbl1\n    WHERE col3 >= 30;\n",
            "CREATE MATERIALIZED VIEW mv_test_tbl1(c1, c2, c3, PRIMARY KEY(c1))\n      AS SELECT col1, col2, col3\n        FROM test_tbl1;\n"
        ],
        "Detailed Examples": [
            "创建表 test_tbl1。",
            "CREATE TABLE test_tbl1 (col1 NUMBER PRIMARY KEY, col2 VARCHAR2(20), col3 NUMBER, col4 NUMBER);\n",
            "创建名为 mv_test_tbl1 的物化视图。将物化视图按照 col1 列进行 Hash 分区，并分为 8 个分区；使用完全刷新方法来刷新物化视图，从当前日期开始刷新，并每隔 1 天刷新一次；将 test_tbl1 表中满足条件 col3 >= 30 的记录作为基表进行查询，并将查询结果作为物化视图的数据。",
            "CREATE MATERIALIZED VIEW mv_test_tbl1\n  PARTITION BY HASH(col1) PARTITIONS 8\n  REFRESH COMPLETE START WITH current_date NEXT current_date + 1\n  AS SELECT col1, col2, col3\n    FROM test_tbl1\n    WHERE col3 >= 30;\n",
            "创建名为 mv2_test_tbl1 的物化视图，并指定主键。",
            "CREATE MATERIALIZED VIEW mv_test_tbl1(c1, c2, c3, PRIMARY KEY(c1))\n      AS SELECT col1, col2, col3\n        FROM test_tbl1;\n"
        ]
    },
    "CREATE OUTLINE": {
        "Title": [
            "CREATE OUTLINE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054318"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "/* 使用 SQL_TEXT 创建 Outline */\nCREATE [OR REPLACE] OUTLINE outline_name ON stmt [ TO target_stmt ]\n\n/* 使用 SQL_ID 创建 Outline */\nCREATE OUTLINE outline_name ON sql_id USING HINT  hint;\n",
        "Description": [
            "该语句用来创建 Outline。可以通过两种方式创建 Outline，一种是通过 SQL_TEXT（用户执行的带参数的原始语句），另一种是通过 SQL_ID 创建。",
            "\n注意\n创建 Outline 需要进入对应的用户下执行。\n"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\noutline_name\n指定要创建的 Outline 名称。\n\n\nOR REPLACE\n指定 OR REPLACE 后，如果要创建的 Outline 已存在，则会替换原有的 Outline。\n\n\nstmt\n一般为一个带有 hint 和原始参数的 DML 语句。\n\n\nTO target_stmt\n如果不指定 TO target_stmt，则表示如果数据库接受的 SQL 参数化后与 stmt 去掉 hint 参数化文本相同，则将该 SQL 绑定 stmt 中 hint 生成执行计划；如果期望对含有 hint 的语句进行固定计划，则需要 TO target_stmt 来指明原始的 SQL。 注意 在使用 target_stmt 时，严格要求 stmt 与 target_stmt 在去掉 hint 后完全匹配。\n\n\nsql_id\n如果 sql_id 对应的 SQL 语句已经有 hint，则创建Outline 指定的 hint 会覆盖原始语句中所有 hint。\n\n\nhint\n格式为 /*+ xxx */。有关 Hint 语法的详细信息，请参见 《OceanBase 数据库 SQL 调优指南》中 Optimizer Hint 章节。\n\n\n"
        ],
        "Examples": [
            "obclient> CREATE OUTLINE outline1\nON SELECT/*+ index(tbl1 idx_col2)*/ * FROM tbl1 WHERE col2 = 1;\n",
            "obclient> CREATE OUTLINE outline2\nON 'ED570339F2C856BA96008A29EDF04C74'\nUSING HINT /*+ index(tbl1 idx_col2)*/ ;\n"
        ],
        "Detailed Examples": [
            "使用 SQL_TEXT 创建 outline1。",
            "obclient> CREATE OUTLINE outline1\nON SELECT/*+ index(tbl1 idx_col2)*/ * FROM tbl1 WHERE col2 = 1;\n",
            "使用 SQL_ID 创建 outline2。",
            "obclient> CREATE OUTLINE outline2\nON 'ED570339F2C856BA96008A29EDF04C74'\nUSING HINT /*+ index(tbl1 idx_col2)*/ ;\n"
        ]
    },
    "CREATE PROFILE": {
        "Title": [
            "CREATE PROFILE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054317"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "CREATE PROFILE \"profile_name\" LIMIT\n  { FAILED_LOGIN_ATTEMPTS\n    | PASSWORD_LOCK_TIME\n    | PASSWORD_LIFE_TIME\n    | PASSWORD_VERIFY_FUNCTION\n    | PASSWORD_GRACE_TIME\n    }\n    { integer | UNLIMITED | DEFAULT };\n",
        "Description": [
            "该语句用于创建配置文件。配置文件是对数据库资源的一组限制，如果将配置文件分配给用户，则该用户不能超过这些使用限制。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nprofile_name\n指定要创建的配置文件的名称。\n\n\nFAILED_LOGIN_ATTEMPTS\n指定连续登录用户账户失败的次数。\n\n\nPASSWORD_LOCK_TIME\n当账户在限定的次数内连续尝试登录失败后，指定账户被锁定的天数。\n\n\nPASSWORD_LIFE_TIME\n指定同一密码可用于身份验证的有效天数。\n\n\nPASSWORD_VERIFY_FUNCTION\n允许将 PL 密码复杂性验证脚本作为参数传递给 CREATE PROFILE 语句。对于函数，需要指定密码复杂性验证例程的名称。该函数必须存在于 SYS Schema 中，并且用户必须对该函数具有 EXECUTE 权限。如果指定该参数为 NULL，表示不执行密码验证。如果您为密码参数指定 expr，则表达式可以是除标量子查询表达式之外的任何形式。\n\n\nPASSWORD_GRACE_TIME\n指定解除警告并开始允许账户登录的宽限期天数。\n\n\ninteger\n表示为该参数设置的限制类型格式为整数。\n\n\nUNLIMITED\n表示没有为该参数设置限制。\n\n\nDEFAULT\n表示使用该参数的默认限制。\n\n\n"
        ],
        "Examples": [
            "obclient> CREATE PROFILE \"profile1\" LIMIT\n   FAILED_LOGIN_ATTEMPTS 5\n   PASSWORD_LOCK_TIME 1\n   PASSWORD_LIFE_TIME 60\n   PASSWORD_VERIFY_FUNCTION verify_function\n   PASSWORD_GRACE_TIME DEFAULT;\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "创建密码限制的配置文件 profile1，并将 FAILED_LOGIN_ATTEMPTS 设置为 3 次，PASSWORD_LOCK_TIME 设置为 1 天，PASSWORD_LIFE_TIME 设置为 60 天，PASSWORD_GRACE_TIME 设置为使用默认限制。",
            "obclient> CREATE PROFILE \"profile1\" LIMIT\n   FAILED_LOGIN_ATTEMPTS 5\n   PASSWORD_LOCK_TIME 1\n   PASSWORD_LIFE_TIME 60\n   PASSWORD_VERIFY_FUNCTION verify_function\n   PASSWORD_GRACE_TIME DEFAULT;\nQuery OK, 0 rows affected\n"
        ]
    },
    "CREATE ROLE": {
        "Title": [
            "CREATE ROLE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054363"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "CREATE ROLE role_name\n[ NOT IDENTIFIED\n| IDENTIFIED BY password\n] ;\n",
        "Description": [
            "该语句用于创建角色。您可以使用角色来管理数据库权限。",
            "您可以为角色添加权限，然后将该角色授予用户，用户可以启用该角色并行使该角色授予的权限。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nrole_name\n指定要创建的角色的名称。\n\n\nNOT IDENTIFIED\n指定启用创建的角色时不使用任何验证方法。 说明 如果省略 NOT IDENTIFIED 子句和 IDENTIFIED 子句，则角色默认为 NOT IDENTIFIED。\n\n\nIDENTIFIED BY password\n设定启用角色的密码。 说明 被授予该角色的用户必须指定密码才能使用 SET ROLE 语句启用该角色。\n\n\n"
        ],
        "Examples": [
            "obclient> CREATE ROLE role1;\nQuery OK, 0 rows affected\n",
            "obclient> CREATE ROLE role2 IDENTIFIED BY **1***;\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "创建角色 role1。",
            "obclient> CREATE ROLE role1;\nQuery OK, 0 rows affected\n",
            "创建角色 role2，指定密码为 **1***。",
            "obclient> CREATE ROLE role2 IDENTIFIED BY **1***;\nQuery OK, 0 rows affected\n"
        ]
    },
    "CREATE SEQUENCE": {
        "Title": [
            "CREATE SEQUENCE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054360"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "CREATE SEQUENCE [ schema. ] sequence_name\n{ START WITH int_value\n|[ INCREMENT BY int_value ]\n|[ MINVALUE int_value | NOMINVALUE ]\n|[ MAXVALUE int_value | NOMAXVALUE ]  \n|[ CACHE int_value | NOCACHE ]\n|[ ORDER | NOORDER ]\n|[ CYCLE | NOCYCLE ]  \n}\n;\n",
        "Description": [
            "该语句用来创建序列。序列属于数据库对象，用户可以从序列中生成唯一整数。",
            "如果两个用户同时递增同一个序列，那么每个用户获取的序列号可能会有间隔，一个用户永远无法获得另一个用户所生成的序列号。序列号是独立于表生成的，因此可以对一个或多个表使用相同的序列。",
            "创建序列后，您可以在 SQL 语句中使用 CURRVAL 伪列返回序列当前值或使用 NEXTVAL 伪列返回递增的新值。详细信息，请参见 序列伪列。"
        ],
        "Illustration": [
            "\n\n\n字段\n描述\n\n\n\n\nschema.\n指定包含序列的 Schema。如果省略 Schema，则数据库会在用户当前所在的 Schema 中创建序列。\n\n\nsequence_name\n要创建的序列名称。\n\n\nMINVALUE int_value\n指定序列的最小值，int_value 的取值范围是 [-9223372036854775808，9223372036854775807]。\n\n\nNOMINVALUE\nNOMINVALUE 为默认值。如果指定为 NOMINVALUE，则升序时最小值为 1，降序时最小值为 -9223372036854775808。\n\n\nMAXVALUE int_value\n指定序列的最大值，int_value 的取值范围是 [-9223372036854775808，9223372036854775807]。 注意\n\n同时指定 MINVALUE 和 MAXVALUE 时，MINVALUE 必须小于 MAXVALUE。\nMAXVALUE 和 MINVALUE 之差必须大于等于 INCREMENT BY 中 的 int_value。\n\n\n\nNOMAXVALUE\nNOMAXVALUE 为默认值。如果指定为 NOMAXVALUE，则升序时最大值为9223372036854775807，降序时最大值为 -1。\n\n\nSTART WITH int_value\n指定序列的起始值。int_value 必须小于等于 MAXVALUE，且大于等于 MINVALUE。如果不指定，则升序时默认取值为最小值，降序时默认取值为最大值。\n\n\nINCREMENT BY int_value\n指定序列的自增步数。int_value 不可以为 0。如果指定为正数，则序列为升序；如果指定为负数，则序列为降序。不指定时缺省值为 1。\n\n\nCACHE int_value\n指定在内存中预分配的自增值个数，int_value 默认为 20。CACHE int_value 的值必须大于 1，如果 CACHE INT_VALUE 的值为 1，则等价于 NOCACHE。\n\n\nNOCACHE\n指定序列的值为未预先分配。如果同时省略 CACHE 和 NOCACHE，则数据库默认缓存 20 个序列号。\n\n\nORDER\n指定序列的值按顺序生成。\n\n\nNOORDER\nNOORDER 为默认值，即不保证序列的值按顺序生成。\n\n\nCYCLE\n指定序列的值循环生成，即序列在达到其最大值或最小值后继续生成值。在升序达到最大值后，它会生成最小值。在降序序列达到其最小值后，它会生成其最大值。 注意\n\n如果指定了 CYCLE，而且 INCREMENT BY int_value 小于 0 时，必须指定 MINVALUE。\n如果指定了 CYCLE，CACHE 的数量不能超过一个 CYCLE。\n\n\n\nNOCYCLE\nNOCYCLE 为默认值，指定序列在达到其最大值或最小值后无法生成更多值。\n\n\n"
        ],
        "Examples": [
            "obclient> CREATE SEQUENCE test.seq1 START WITH 1 MINVALUE 1 MAXVALUE 10 INCREMENT BY 2 NOCYCLE NOORDER CACHE 30;\nQuery OK, 0 rows affected\n\nobclient> SELECT seq1.nextval FROM DUAL;\n+--------+\n| nextval|\n+--------+\n| 1      |\n+--------+\n1 row in set\n\nobclient> SELECT seq1.nextval FROM DUAL;\n+--------+\n| nextval|\n+--------+\n| 3      |\n+--------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "在 Schema test 下创建一个序列 seq1 并指定自增步数为 2。如下示例中，对 seq1.nextval 的第一个引用返回 1，第二个引用返回 3。每个后续引用的返回值都比前一个大 2。",
            "obclient> CREATE SEQUENCE test.seq1 START WITH 1 MINVALUE 1 MAXVALUE 10 INCREMENT BY 2 NOCYCLE NOORDER CACHE 30;\nQuery OK, 0 rows affected\n\nobclient> SELECT seq1.nextval FROM DUAL;\n+--------+\n| nextval|\n+--------+\n| 1      |\n+--------+\n1 row in set\n\nobclient> SELECT seq1.nextval FROM DUAL;\n+--------+\n| nextval|\n+--------+\n| 3      |\n+--------+\n1 row in set\n"
        ]
    },
    "CREATE SYNONYM": {
        "Title": [
            "CREATE SYNONYM"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054334"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "CREATE [ OR REPLACE ] [ PUBLIC ] SYNONYM [ synonym_schema. ]synonym_name\nFOR [ object_schema. ]object_name;\n",
        "Description": [
            "该语句用来创建一个同义词。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nOR REPLACE\n表示如果要创建的同义词名称已存在，则使用新的定义重新创建同义词。\n\n\nPUBLIC\n指定 PUBLIC 来创建公共同义词，所有用户都可以使用。用户必须对基础对象具有相应的权限才能使用该同义词。 在解析对象的引用时，仅当对象没有指定 Schema 时，才会使用公共同义词。 如果不指定 PUBLIC，则同义词是私有的，只能当前 Schema 访问，并且同义词名称在当前 Schema 中必须唯一。\n\n\nsynonym_schema\n指定同义词所在的 Schema。如果省略 schema.，则默认同义词在您自己的 Schema 中。如果指定了 PUBLIC，则对同义词不需要指定 schema。\n\n\nsynonym_name\n指定同义词的名称。\n\n\nobject_schema\n指定创建同义词的对象所在的 Schema。如果省略 schema.，则默认创建同义词的对象在您自己的 Schema 中。\n\n\nobject_name\n指定同义词对应对象的名称。\n\n\n"
        ],
        "Examples": [
            "obclient> CREATE TABLE tbl1(col1 INT,col2 INT);\nQuery OK, 0 rows affected\n\nobclient> CREATE SYNONYM syn1 FOR tbl1;\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO syn1 values(1,1);\nQuery OK, 1 row affected\n\nobclient> SELECT * FROM syn1;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    1 |    1 |\n+------+------+\n1 row in set\n",
            "obclient> CREATE PUBLIC SYNONYM syn2 FOR tbl1;\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "创建表的同义词。",
            "obclient> CREATE TABLE tbl1(col1 INT,col2 INT);\nQuery OK, 0 rows affected\n\nobclient> CREATE SYNONYM syn1 FOR tbl1;\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO syn1 values(1,1);\nQuery OK, 1 row affected\n\nobclient> SELECT * FROM syn1;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    1 |    1 |\n+------+------+\n1 row in set\n",
            "创建一个 PUBLIC 同义词",
            "obclient> CREATE PUBLIC SYNONYM syn2 FOR tbl1;\nQuery OK, 0 rows affected\n"
        ]
    },
    "CREATE TABLE": {
        "Title": [
            "CREATE TABLE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054349"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "CREATE [hint_options] [GLOBAL TEMPORARY] TABLE table_name\n      (table_definition_list) [table_option_list] [partition_option] [on_commit_option]\nCREATE [GLOBAL TEMPORARY] TABLE table_name\n      (table_definition_list) [table_option_list] [partition_option] [table_column_group_option] [AS] select;\n\ntable_definition_list:\n    table_definition [, table_definition ...]\n\ntable_definition:\n      column_definition\n     | [,\n        | [CONSTRAINT [constraint_name]] { PRIMARY KEY|UNIQUE } (column_name) //在创建所有列后添加约束\n        | [CONSTRAINT [constraint_name]] FOREIGN KEY (column_name, column_name ...) references_clause constraint_state\n        | [CONSTRAINT [constraint_name]] CHECK(expression) constraint_state\n       ]\n\ncolumn_definition_list:\n    column_definition [, column_definition ...]\n\ncolumn_definition:\n    column_name data_type\n    [VISIBLE|INVISIBLE]\n    {\n    [DEFAULT expression]\n    [NULL | NOT NULL]\n    [CONSTRAINT [constraint_name]] [ PRIMARY KEY|UNIQUE ]       //在创建列时添加约束\n    [CONSTRAINT [constraint_name] CHECK(expression) constraint_state]\n    [CONSTRAINT [constraint_name] references_clause]\n    |\n    [GENERATED ALWAYS] AS (expression) [VIRTUAL]\n    [NULL | NOT NULL] [UNIQUE KEY] [[PRIMARY] KEY] [UNIQUE LOWER_KEY] [COMMENT string] [SKIP_INDEX(skip_index_option_list)]\n    }\n\nskip_index_option_list:\n    skip_index_option [,skip_index_option ...]\n\nskip_index_option:\n    MIN_MAX\n    | SUM\n\nreferences_clause:\n     REFERENCES table_name [ (column_name, column_name ...) ] [ON DELETE {SET NULL | CASCADE}]\n\nconstraint_state:\n    [RELY | NORELY] [USING INDEX index_option_list] [ENABLE | DISABLE] [VALIDATE | NOVALIDATE]\n\nindex_option_list:\n    index_option [ index_option ...]\n\nindex_option:\n      [GLOBAL | LOCAL]\n    | block_size\n    | compression\n    | STORING(column_name_list)\n    | comment\n\ntable_option_list:\n    table_option [ table_option ...]\n\ntable_option:\n      TABLEGROUP = tablegroup_name\n    | block_size\n    | compression\n    | comment\n    | ENABLE ROW MOVEMENT\n    | DISABLE ROW MOVEMENT\n    | physical_attribute\n    | parallel_clause\n    | DUPLICATE_SCOPE [=] 'none|cluster'\n    | TABLE_MODE [=] 'table_mode_value'\n\nphysical_attribute_list:\n    physical_attribute [physical_attribute]\n\nphysical_attribute:\n    PCTFREE [=] num\n    | PCTUSED num\n    | INITRANS num\n    | MAXTRANS num\n    | STORAGE(storage_option [storage_option] ...)\n    | TABLESPACE tablespace\n\nparallel_clause:\n    {NOPARALLEL | PARALLEL integer}\n\ntable_mode_value:\n    NORMAL\n    | QUEUING\n    | MODERATE\n    | SUPER\n    | EXTREME\n\ncompression:\n    NOCOMPRESS\n    | COMPRESS { BASIC | FOR OLTP | FOR QUERY [LOW | HIGH]  | FOR ARCHIVE [LOW | HIGH]}\n\nstorage_option:\n    INITIAL num [K|M|G|T|P|E]\n    | NEXT num [K|M|G|T|P|E]\n    | MINEXTENTS num [K|M|G|T|P|E]\n    | MAXEXTENTS num [K|M|G|T|P|E]\n\npartition_option:\n      PARTITION BY HASH(column_name_list)\n      [subpartition_option] hash_partition_define\n    | PARTITION BY RANGE (column_name_list)\n      [subpartition_option] (range_partition_list)\n    | PARTITION BY LIST (column_name_list)\n      [subpartition_option] (list_partition_list)\n\n/*模板化二级分区*/\nsubpartition_option:\n      SUBPARTITION BY HASH (column_name_list) hash_subpartition_define\n    | SUBPARTITION BY RANGE (column_name_list) SUBPARTITION TEMPLATE\n      (range_subpartition_list)\n    | SUBPARTITION BY LIST (column_name_list) SUBPARTITION TEMPLATE\n      (list_subpartition_list)\n\n/*非模板化二级分区*/\nsubpartition_option:\n      SUBPARTITION BY HASH (column_name_list)\n    | SUBPARTITION BY RANGE (column_name_list)\n    | SUBPARTITION BY LIST (column_name_list)\n\nsubpartition_list:\n      (hash_subpartition_list)\n    | (range_subpartition_list)\n    | (list_subpartition_list)\n\nhash_partition_define:\n      PARTITIONS partition_count [TABLESPACE tablespace] [compression]\n    | (hash_partition_list)\n\nhash_partition_list:\n    hash_partition [, hash_partition ...]\n\nhash_partition:\n    partition [partition_name] [subpartition_list/*仅非模板化二级分区可定义*/]\n\nhash_subpartition_define:\n      SUBPARTITIONS subpartition_count\n    | SUBPARTITION TEMPLATE (hash_subpartition_list)\n\nhash_subpartition_list:\n    hash_subpartition [, hash_subpartition ...]\n\nhash_subpartition:\n    subpartition [subpartition_name]\n\nrange_partition_list:\n    range_partition [, range_partition ...]\n\nrange_partition:\n    PARTITION [partition_name]\n    VALUES LESS THAN {(expression_list) | (MAXVALUE)}\n    [subpartition_list/*仅非模板化二级分区可定义*/]\n    [ID = num] [physical_attribute_list] [compression]\n\nrange_subpartition_list:\n    range_subpartition [, range_subpartition ...]\n\nrange_subpartition:\n    SUBPARTITION subpartition_name\n    VALUES LESS THAN {(expression_list) | MAXVALUE} [physical_attribute_list]\n\nlist_partition_list:\n    list_partition [, list_partition] ...\n\nlist_partition:\n    PARTITION [partition_name]\n    VALUES (DEFAULT | expression_list)\n    [subpartition_list /*仅非模板化二级分区可定义*/]\n    [ID num] [physical_attribute_list] [compression]\n\nlist_subpartition_list:\n    list_subpartition [, list_subpartition] ...\n\nlist_subpartition:\n    SUBPARTITION [partition_name] VALUES (DEFAULT | expression_list) [physical_attribute_list]\n\nexpression_list:\n    expression [, expression ...]\n\ncolumn_name_list:\n    column_name [, column_name ...]\n\npartition_name_list:\n    partition_name [, partition_name ...]\n\npartition_count | subpartition_count:\n    INT_VALUE\n\non_commit_option:\n    ON COMMIT DELETE ROWS\n  | ON COMMIT PRESERVE ROWS\n\ntable_column_group_option：\n    WITH COLUMN GROUP(all columns)\n  | WITH COLUMN GROUP(each column)\n  | WITH COLUMN GROUP(all columns, each column)\n",
        "Description": [
            "该语句用来在数据库中创建一张新表。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nhint_options\n指定 Hint 选项，为可选项。 \n      \n注意\n在当前版本中，CREATE TABLE 语句的 Hint 选项仅限于支持 /*+ parallel(N) */ 类型，其中 N 是并行度。并且该 Hint 选项仅适用于 CREATE TABLE … AS SELECT … 的场景，可以控制在表创建时数据查询和写入操作的并行度。\n\n\n\nGLOBAL TEMPORARY\n将该表创建为临时表。\n\n\nDEFAULT expression\n指定列的默认值。expression 支持包含 Sequence 的函数表达式。\n\n\nBLOCK_SIZE\n指定表的微块大小。\n\n\nCOMPRESSION\n指定存储格式 Flat/Encoding 以及压缩方法，对应如下： \n      \nnocompress：使用 Flat 格式，不进行压缩。\ncompress [basic]：使用 Flat 格式和 lz4_1.0 压缩方法。\ncompress for oltp：使用 Flat 格式和 zstd_1.3.8 压缩方法。\nquery low 或者 query high：使用 Encoding 格式和 lz4_1.0 压缩方法。\narchive low 或者 archive high：使用 Encoding 格式和 zstd_1.3.8 压缩方法。\n\n\n\ntablegroup_name\n指定表所属的 Table Group。\n\n\nFOREIGN KEY\n为创建的表指定外键。如果不指定外键名，则会使用表名 + OBFK + 创建时间命名。（例如，在 2021 年 8 月 1 日 00:00:00 为 t1 表创建的外键名称为 t1_OBFK_1627747200000000）。外键允许跨表交叉引用相关数据，当 DELETE 操作影响与子表相匹配行的父表中键值时，其结果取决于 ON DELETE 子句的引用操作： \n      \nCASCADE：表示从父表中删除或更新行，并自动删除或更新子表中匹配的行。\nSET NULL：表示从父表中删除或更新行，并将子表中的外键列设置为 NULL。\n\n\n\nVISIBLE\n表示列可见，是默认的列状态。\n\n\nINVISIBLE\n表示列不可见，当将一个列设置为 INVISIBLE 后，在查询时该列将不会被默认显示。\n\n\ncomment\n注释。不区分大小写。\n\n\nphysical_attribute\nPCTFREE: 指定宏块保留空间百分比。其它属性 STORAGE、TABLESPACE 等仅为了语法兼容方便迁移，不生效。\n\n\nENABLE/DISABLE ROW MOVEMENT\n是否允许在不同分区间移动以进行分区键更新。\n\n\nON COMMIT DELETE ROWS\n事务级临时表，提交时删除数据。\n\n\nON COMMIT PRESERVE ROWS\n会话级临时表，会话结束时删除数据。\n\n\nparallel_clause\n指定表级别的并行度： \n      \nNOPARALLEL：并行度为 1，为默认配置。\nPARALLEL integer：指定并行度，integer 取值大于等于 1。\n\n\n注意\n当指定并行度时，优先级关系如下：通过 Hint 指定的并行度 > 通过 ALTER SESSION 指定的并行度 > 表级别的并行度。\n\n\n\nDUPLICATE_SCOPE\n指定复制表的属性，取值如下： \n      \nnone：表示该表是一个普通表，为默认值。\n cluster：表示该表是一个复制表，Leader 需要将事务复制到当前租户的所有 F（全能）副本及 R（只读）副本。\n      OceanBase 数据库目前仅支持 cluster 级别的复制表。\n\n\ntable_column_group_option\n指定表列存选项。具体解释如下： \n      \nWITH COLUMN GROUP(all columns, each column)：指定创建行存列存冗余的表。\nWITH COLUMN GROUP(all columns)：指定添加行存表。\nWITH COLUMN GROUP(each column)：指定创建列存表。\n\n\n\nSKIP_INDEX\n标识列的 Skip Index 属性。取值如下： \n      \nMIN_MAX：是 Skip Index 中最通用的聚合数据类型，它会在索引节点粒度下存储被索引列的最大值、最小值和 Null Count。这种类型的数据可以加速下推的 Filter 和 MIN/MAX 聚合的下推。\nSUM：用于加速数值类型的 SUM 聚合的下推。\n\n\n注意\n\n\nJSON 和空间数据类型的列禁止创建 Skip Index。\n生成列禁止创建 Skip Index。\n\n\n\n\n\nTABLE_MODE\n可选项，用于指定合并触发阈值与合并策略，即控制数据转储后的合并行为。取值的详细介绍可参见下文 table_mode_value。\n\n\n",
            "table_mode_value",
            "\n说明\n在以下列出的 TABLE_MODE 模式中，除了 NORMAL 模式之外，所有模式都代表 QUEUING 表。这种 QUEUING 表是最基本的表类型，并且随后列出的几种模式（除了 NORMAL 模式）代表了使用更加积极的合并策略。\n",
            "NORMAL",
            "：默认值，表示正常。在该模式下，数据转储后触发合并的概率极低。",
            "QUEUING",
            "：在该模式下，数据转储后触发合并的概率低。",
            "MODERATE",
            "：表示适度。在该模式下，数据转储后触发合并的概率为中等。",
            "SUPER",
            "：表示超级。在该模式下，数据转储后触发合并的概率高。",
            "EXTREME",
            "：表示极端。在该模式下，转储后触发合并的概率较高。",
            "更多有关合并的信息，请参见 自适应合并。"
        ],
        "Examples": [
            "obclient> CREATE TABLE tbl1 (col1 INT PRIMARY KEY, col2 VARCHAR(50)) ;\nQuery OK, 0 rows affected\n",
            "obclient> CREATE TABLE tbl4 (col1 INT PRIMARY KEY, col2 INT) PARTITION BY HASH(col1) PARTITIONS 8;\nQuery OK, 0 rows affected\n",
            "obclient> CREATE TABLE tbl5 (col1 INT, col2 INT, col3 INT)\n                 PARTITION BY RANGE(col1)\n                 SUBPARTITION BY HASH(col2)  SUBPARTITIONS  5\n                 (PARTITION p0 VALUES LESS THAN(0),\n                  PARTITION p1 VALUES LESS THAN(100));\nQuery OK, 0 rows affected\n",
            "obclient> CREATE TABLE tbl6 (col1 INT, col2 INT, col3 VARCHAR(64))\n                 COMPRESS FOR ARCHIVE\n                 PCTFREE 5;\nQuery OK, 0 rows affected\n",
            "obclient> CREATE GLOBAL TEMPORARY TABLE tbl7(col1 INT) ON COMMIT DELETE ROWS;\nQuery OK, 0 rows affected\n",
            "obclient> CREATE TABLE tbl8 (col1 INT, col2 INT, col3 INT,CONSTRAINT equal_check1 CHECK(col2 = col3 * 2) ENABLE VALIDATE);\nQuery OK, 0 rows affected\n",
            "obclient> CREATE TABLE ref_t1(c1 INT PRIMARY KEY,C2 INT);\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE ref_t2(c1 INT PRIMARY KEY，C2 INT,FOREIGN KEY(c2) REFERENCES ref_t1(c1) ON DELETE SET NULL);\nQuery OK, 0 rows affected\n",
            "obclient> CREATE TABLE tbl9 (col1 INT, col2 INT, col3 INT)\n                 PARTITION BY RANGE(col1)\n                 SUBPARTITION BY RANGE(col2)\n(\n  PARTITION p0 VALUES LESS THAN(100)\n  (\n    SUBPARTITION p0_r1 VALUES LESS THAN(2019),\n    SUBPARTITION p0_r2 VALUES LESS THAN(2020),\n    SUBPARTITION p0_r3 VALUES LESS THAN(2021)\n  ),\n  PARTITION p1 VALUES LESS THAN(200)\n  (\n    SUBPARTITION p1_r1 VALUES LESS THAN(2019),\n    SUBPARTITION p1_r2 VALUES LESS THAN(2020),\n    SUBPARTITION p1_r3 VALUES LESS THAN(2021)\n  ),\n  PARTITION p2 VALUES LESS THAN(300)\n  (\n    SUBPARTITION p2_r1 VALUES LESS THAN(2019),\n    SUBPARTITION p2_r2 VALUES LESS THAN(2020),\n    SUBPARTITION p2_r3 VALUES LESS THAN(2021)\n  )\n);\nQuery OK, 0 rows affected\n",
            "obclient> CREATE TABLE tbl10(col1 INT PRIMARY KEY, col2 INT) PARALLEL 3;\nQuery OK, 0 rows affected\n",
            "obclient> CREATE SEQUENCE SEQ_PERSONIPTVSEQ START WITH 1 MINVALUE 1 MAXVALUE 10 INCREMENT BY 2 NOCYCLE NOORDER CACHE 30;\nQuery OK, 0 rows affected\n\nobclient> SELECT LPAD(SEQ_PERSONIPTVSEQ.NEXTVAL,18,TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS')) FROM DUAL;\n+----------------------------------------------------------------------------+\n| LPAD(SEQ_PERSONIPTVSEQ.NEXTVAL,18,TO_CHAR(SYSDATE,'YYYY-MM-DDHH24:MI:SS')) |\n+----------------------------------------------------------------------------+\n| 2022-07-05 11:34:1                                                         |\n+----------------------------------------------------------------------------+\n1 row in set\n\nobclient> CREATE TABLE FUNC_DEFAULT_TEST ( OID NUMBER(20,0) DEFAULT LPAD(SEQ_PERSONIPTVSEQ.NEXTVAL,18,TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS')) NOT NULL);\nQuery OK, 0 rows affected\n",
            "obclient> CREATE TABLE dup_t1(c1 int) DUPLICATE_SCOPE = 'cluster';\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO dup_t1 VALUES(1);\nQuery OK, 1 row affected\n\nobclient> SELECT * FROM dup_t1;\n+------+\n| c1   |\n+------+\n|    1 |\n+------+\n1 row in set\n",
            "CREATE TABLE tbl1_cg (col1 NUMBER PRIMARY KEY, col2 VARCHAR2(50)) WITH COLUMN GROUP(each column);\n",
            "CREATE TABLE test_skidx(\n  col1 NUMBER SKIP_INDEX(MIN_MAX, SUM),\n  col2 FLOAT SKIP_INDEX(MIN_MAX),\n  col3 VARCHAR2(1024) SKIP_INDEX(MIN_MAX),\n  col4 CHAR(10)\n);\n",
            "CREATE /*+ parallel(5) */ TABLE tbl1 (col1 NUMBER) AS SELECT col1 FROM tbl2;\n"
        ],
        "Detailed Examples": [
            "创建表 tbl1。",
            "obclient> CREATE TABLE tbl1 (col1 INT PRIMARY KEY, col2 VARCHAR(50)) ;\nQuery OK, 0 rows affected\n",
            "创建 Hash 分区，分区数为 8 的表。",
            "obclient> CREATE TABLE tbl4 (col1 INT PRIMARY KEY, col2 INT) PARTITION BY HASH(col1) PARTITIONS 8;\nQuery OK, 0 rows affected\n",
            "创建一级分区为 Range 分区，二级分区为 Hash 分区的表。",
            "obclient> CREATE TABLE tbl5 (col1 INT, col2 INT, col3 INT)\n                 PARTITION BY RANGE(col1)\n                 SUBPARTITION BY HASH(col2)  SUBPARTITIONS  5\n                 (PARTITION p0 VALUES LESS THAN(0),\n                  PARTITION p1 VALUES LESS THAN(100));\nQuery OK, 0 rows affected\n",
            "开启 Encoding 并使用 zstd 压缩，宏块保留空间为 5%。",
            "obclient> CREATE TABLE tbl6 (col1 INT, col2 INT, col3 VARCHAR(64))\n                 COMPRESS FOR ARCHIVE\n                 PCTFREE 5;\nQuery OK, 0 rows affected\n",
            "创建一个事务级临时表。",
            "obclient> CREATE GLOBAL TEMPORARY TABLE tbl7(col1 INT) ON COMMIT DELETE ROWS;\nQuery OK, 0 rows affected\n",
            "创建一个带约束的表。",
            "obclient> CREATE TABLE tbl8 (col1 INT, col2 INT, col3 INT,CONSTRAINT equal_check1 CHECK(col2 = col3 * 2) ENABLE VALIDATE);\nQuery OK, 0 rows affected\n",
            "为表 ref_t2 指定外键，当 DELETE 操作影响与子表相匹配行的父表中键值时，执行 SET NULL 操作。",
            "obclient> CREATE TABLE ref_t1(c1 INT PRIMARY KEY,C2 INT);\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE ref_t2(c1 INT PRIMARY KEY，C2 INT,FOREIGN KEY(c2) REFERENCES ref_t1(c1) ON DELETE SET NULL);\nQuery OK, 0 rows affected\n",
            "创建非模板化的 Range + Range 二级分区表。",
            "obclient> CREATE TABLE tbl9 (col1 INT, col2 INT, col3 INT)\n                 PARTITION BY RANGE(col1)\n                 SUBPARTITION BY RANGE(col2)\n(\n  PARTITION p0 VALUES LESS THAN(100)\n  (\n    SUBPARTITION p0_r1 VALUES LESS THAN(2019),\n    SUBPARTITION p0_r2 VALUES LESS THAN(2020),\n    SUBPARTITION p0_r3 VALUES LESS THAN(2021)\n  ),\n  PARTITION p1 VALUES LESS THAN(200)\n  (\n    SUBPARTITION p1_r1 VALUES LESS THAN(2019),\n    SUBPARTITION p1_r2 VALUES LESS THAN(2020),\n    SUBPARTITION p1_r3 VALUES LESS THAN(2021)\n  ),\n  PARTITION p2 VALUES LESS THAN(300)\n  (\n    SUBPARTITION p2_r1 VALUES LESS THAN(2019),\n    SUBPARTITION p2_r2 VALUES LESS THAN(2020),\n    SUBPARTITION p2_r3 VALUES LESS THAN(2021)\n  )\n);\nQuery OK, 0 rows affected\n",
            "创建表 tbl10 的并行度为 3。",
            "obclient> CREATE TABLE tbl10(col1 INT PRIMARY KEY, col2 INT) PARALLEL 3;\nQuery OK, 0 rows affected\n",
            "使用函数定义列的默认值。",
            "obclient> CREATE SEQUENCE SEQ_PERSONIPTVSEQ START WITH 1 MINVALUE 1 MAXVALUE 10 INCREMENT BY 2 NOCYCLE NOORDER CACHE 30;\nQuery OK, 0 rows affected\n\nobclient> SELECT LPAD(SEQ_PERSONIPTVSEQ.NEXTVAL,18,TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS')) FROM DUAL;\n+----------------------------------------------------------------------------+\n| LPAD(SEQ_PERSONIPTVSEQ.NEXTVAL,18,TO_CHAR(SYSDATE,'YYYY-MM-DDHH24:MI:SS')) |\n+----------------------------------------------------------------------------+\n| 2022-07-05 11:34:1                                                         |\n+----------------------------------------------------------------------------+\n1 row in set\n\nobclient> CREATE TABLE FUNC_DEFAULT_TEST ( OID NUMBER(20,0) DEFAULT LPAD(SEQ_PERSONIPTVSEQ.NEXTVAL,18,TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS')) NOT NULL);\nQuery OK, 0 rows affected\n",
            "创建 cluster 级别的复制表 dup_t1。像普通表一样插入和读写复制表的数据。对于一个读请求，如果使用了 Proxy，读请求可能会路由到任意一个 OBServer 节点；如果直连 OBServer 节点，只要本地副本可读，就会在直连的 OBServer 节点上执行读请求。",
            "obclient> CREATE TABLE dup_t1(c1 int) DUPLICATE_SCOPE = 'cluster';\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO dup_t1 VALUES(1);\nQuery OK, 1 row affected\n\nobclient> SELECT * FROM dup_t1;\n+------+\n| c1   |\n+------+\n|    1 |\n+------+\n1 row in set\n",
            "创建列存表 tbl1_cg。",
            "CREATE TABLE tbl1_cg (col1 NUMBER PRIMARY KEY, col2 VARCHAR2(50)) WITH COLUMN GROUP(each column);\n",
            "创建表时标识列 Skip Index 属性。",
            "CREATE TABLE test_skidx(\n  col1 NUMBER SKIP_INDEX(MIN_MAX, SUM),\n  col2 FLOAT SKIP_INDEX(MIN_MAX),\n  col3 VARCHAR2(1024) SKIP_INDEX(MIN_MAX),\n  col4 CHAR(10)\n);\n",
            "创建表 tbl1，它有一个整数类型的列 col1，并且指定该操作应用 5 个并行度来完成，指定了新表 tbl1 的数据内容将来源于表 tbl2 的查询结果。",
            "CREATE /*+ parallel(5) */ TABLE tbl1 (col1 NUMBER) AS SELECT col1 FROM tbl2;\n"
        ]
    },
    "CREATE TABLEGROUP": {
        "Title": [
            "CREATE TABLEGROUP"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054345"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "CREATE TABLEGROUP tablegroup_name [tablegroup_option];\n\ntablegroup_option:\n   SHARDING = 'NONE' | 'PARTITION' | 'ADAPTIVE'\n",
        "Description": [
            "该语句用来创建表组。",
            "表组主要用于创建一组具有相同分布特征的表，具有相同分布特征的表在进行连接操作时，可以在本地进行，避免跨节点的数据请求。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\ntablegroup_name\n表组名称，最长 64 个字符，字符只能有大小写英文字母，数字和下划线，而且必须以字母或下划线开头，并且不能使用 OceanBase 数据库的关键字。如果要创建的表组名称已存在，并且没有指定 IF NOT EXISTS，则会出现错误。\n\n\nSHARDING\n表组的属性。如果不指定 SHARDING 属性，则默认创建 ADAPTIVE 的表组。SHARDING 取值如下： \n      \nNONE：对加入表组的表没有限制。\nPARTITION：加入表组的表对应的一级分区，需要与表组中所有表的一级分区的分区方式一致，包括分区类型、分区个数和分区值。\nADAPTIVE：加入表组的表对应的一级分区和二级分区，需要与表组中所有表的一级分区和二级分区的分区方式一致，包括分区类型、分区个数和分区值。加入表组中的表必须只能为同一类分区表（一级分区表或者二级分区表）。\n相同的分区方式包括： \n      \n分区类型相同（例如都是 Hash+Range 分区）。\n如果是 Hash 分区，要求引用的列数相同，并且分区个数相同。\n如果是 Range 分区，要求引用的列数相同，并且分区数相同，Range 分割点相同。\n对于二级分区，根据其分区类型，要求和上述一致。\n\n\n"
        ],
        "Examples": [
            "obclient> CREATE TABLEGROUP myTableGroup1;\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE myt1 (c1 NUMBER, c2 NUMBER) TABLEGROUP = myTableGroup1;\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE myt2 (c1 NUMBER, c2 NUMBER) TABLEGROUP = myTableGroup1;\nQuery OK, 0 rows affected\n",
            "obclient> CREATE TABLEGROUP tblgroup1 SHARDING = 'NONE';\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl1 (col NUMBER) TABLEGROUP = tblgroup1;\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2 (col1 NUMBER,col2 VARCHAR2(50)) TABLEGROUP = tblgroup1\n    PARTITION BY LIST(col1)\n      (PARTITION p0 VALUES ('01'),\n       PARTITION p1 VALUES ('02')\n       );\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl3(col1 NUMBER,col2 VARCHAR2(50)) TABLEGROUP = tblgroup1\n    PARTITION BY LIST(col1) SUBPARTITION BY LIST (col2)\n      SUBPARTITION TEMPLATE\n      (SUBPARTITION mp0 VALUES ('01'),\n       SUBPARTITION mp1 VALUES ('02'),\n       SUBPARTITION mp2 VALUES ('03')\n       )\n      (PARTITION p0 VALUES('01'),\n       PARTITION p1 VALUES('02')\n      );\nQuery OK, 0 rows affected\n",
            "obclient> CREATE TABLEGROUP tblgroup2 SHARDING = 'PARTITION';\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl1 (col1 NUMBER,col2 VARCHAR2(50)) TABLEGROUP = tblgroup2\n    PARTITION BY LIST(col1)\n      (PARTITION p0 VALUES ('01'),\n       PARTITION p1 VALUES ('02')\n      );\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2 (col1 NUMBER,col2 VARCHAR2(50)) TABLEGROUP = tblgroup2\n  PARTITION BY LIST(col1)\n    (PARTITION p0 VALUES ('01'),\n     PARTITION p1 VALUES ('02')\n     );\nQuery OK, 0 rows affected\n",
            "obclient> CREATE TABLEGROUP tblgroup3 SHARDING = 'PARTITION';\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl1 (col INT) TABLEGROUP = tblgroup3;\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2 (col1 NUMBER,col2 VARCHAR2(50)) TABLEGROUP = tblgroup3\n  PARTITION BY LIST(col1)\n    (PARTITION p0 VALUES ('01'),\n     PARTITION p1 VALUES ('02')\n     );\nORA-00600: internal error code, arguments: -4179, not all tables are non-partitioned or partitioned, add table to tablegroup not allowed\n",
            "obclient> CREATE TABLEGROUP tblgroup4 SHARDING = 'PARTITION';\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl1 (col1 NUMBER,col2 VARCHAR2(50)) TABLEGROUP = tblgroup4\n    PARTITION BY LIST(col1)\n      (PARTITION p0 VALUES ('01'),\n       PARTITION p1 VALUES ('02')\n      );\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2 (col1 NUMBER,col2 VARCHAR2(50)) TABLEGROUP = tblgroup4\n    PARTITION BY LIST(col1)\n      (PARTITION p0 VALUES ('01'),\n       PARTITION p1 VALUES ('02'),\n       PARTITION p2 VALUES ('03')\n       );\nORA-00600: internal error code, arguments: -4179, partition num not equal, add table to tablegroup not allowed\n",
            "obclient> CREATE TABLEGROUP tblgroup5 SHARDING = 'ADAPTIVE';\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl1(col1 NUMBER,col2 VARCHAR2(50)) TABLEGROUP = tblgroup5\n    PARTITION BY LIST(col1) SUBPARTITION BY LIST (col2)\n      SUBPARTITION TEMPLATE\n      (SUBPARTITION mp0 VALUES ('01'),\n       SUBPARTITION mp1 VALUES ('02'),\n       SUBPARTITION mp2 VALUES ('03')\n       )\n      (PARTITION p0 VALUES('01'),\n       PARTITION p1 VALUES('02')\n      );\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2(col1 NUMBER,col2 VARCHAR2(50)) TABLEGROUP = tblgroup5\n    PARTITION BY LIST(col1) SUBPARTITION BY LIST(col2)\n      SUBPARTITION TEMPLATE\n      (SUBPARTITION mp0 VALUES('01'),\n       SUBPARTITION mp1 VALUES('02'),\n       SUBPARTITION mp2 VALUES('03')\n      )\n      (PARTITION p0 VALUES('01'),\n       PARTITION p1 VALUES('02')\n      );\nQuery OK, 0 rows affected\n",
            "obclient> CREATE TABLEGROUP tblgroup6 SHARDING = 'ADAPTIVE';\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl1 (col INT) TABLEGROUP = tblgroup6;\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2(col1 NUMBER,col2 VARCHAR2(50)) TABLEGROUP = tblgroup6\n    PARTITION BY LIST(col1) SUBPARTITION BY LIST(col2)\n      SUBPARTITION TEMPLATE\n      (SUBPARTITION mp0 VALUES('01'),\n       SUBPARTITION mp1 VALUES('02'),\n       SUBPARTITION mp2 VALUES('03')\n      )\n      (PARTITION p0 VALUES('01'),\n       PARTITION p1 VALUES('02')\n      );\nORA-00600: internal error code, arguments: -4179, not all tables are non-partitioned or partitioned, add table to tablegroup not allowed\n",
            "obclient> CREATE TABLEGROUP tblgroup7 SHARDING = 'ADAPTIVE';\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl1(col1 NUMBER,col2 VARCHAR2(50)) TABLEGROUP = tblgroup7\n    PARTITION BY LIST(col1) SUBPARTITION BY LIST(col2)\n      SUBPARTITION TEMPLATE\n      (SUBPARTITION mp0 VALUES ('01'),\n       SUBPARTITION mp1 VALUES ('02'),\n       SUBPARTITION mp2 VALUES ('03')\n       )\n      (PARTITION p0 VALUES('01'),\n       PARTITION p1 VALUES('02')\n      );\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2(col1 NUMBER,col2 VARCHAR2(50)) TABLEGROUP = tblgroup7\n    PARTITION BY LIST(col1) SUBPARTITION BY LIST(col2)\n      SUBPARTITION TEMPLATE\n      (SUBPARTITION mp0 VALUES('01'),\n       SUBPARTITION mp1 VALUES('02')\n      )\n      (PARTITION p0 VALUES('01'),\n       PARTITION p1 VALUES('02')\n      );\nORA-00600: internal error code, arguments: -4179, subpartition num not matched, add table to tablegroup not allowed\n"
        ],
        "Detailed Examples": [
            "创建名为 myTableGroup1 的表组，并将非分区表 myt1 和 myt2 加入到表组中。",
            "obclient> CREATE TABLEGROUP myTableGroup1;\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE myt1 (c1 NUMBER, c2 NUMBER) TABLEGROUP = myTableGroup1;\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE myt2 (c1 NUMBER, c2 NUMBER) TABLEGROUP = myTableGroup1;\nQuery OK, 0 rows affected\n",
            "创建名为 tblgroup1 的表组，其 SHARDING 属性为 NONE，并将非分区表 tbl1 、一级分区表 tbl2、二级分区表 tbl3 加入到表组中。",
            "obclient> CREATE TABLEGROUP tblgroup1 SHARDING = 'NONE';\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl1 (col NUMBER) TABLEGROUP = tblgroup1;\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2 (col1 NUMBER,col2 VARCHAR2(50)) TABLEGROUP = tblgroup1\n    PARTITION BY LIST(col1)\n      (PARTITION p0 VALUES ('01'),\n       PARTITION p1 VALUES ('02')\n       );\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl3(col1 NUMBER,col2 VARCHAR2(50)) TABLEGROUP = tblgroup1\n    PARTITION BY LIST(col1) SUBPARTITION BY LIST (col2)\n      SUBPARTITION TEMPLATE\n      (SUBPARTITION mp0 VALUES ('01'),\n       SUBPARTITION mp1 VALUES ('02'),\n       SUBPARTITION mp2 VALUES ('03')\n       )\n      (PARTITION p0 VALUES('01'),\n       PARTITION p1 VALUES('02')\n      );\nQuery OK, 0 rows affected\n",
            "创建名为 tblgroup2 的表组，其 SHARDING 属性为 PARTITION，并将分区表 tbl1 和分区表 tbl2 加入到表组中，两者的分区方式一致。",
            "obclient> CREATE TABLEGROUP tblgroup2 SHARDING = 'PARTITION';\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl1 (col1 NUMBER,col2 VARCHAR2(50)) TABLEGROUP = tblgroup2\n    PARTITION BY LIST(col1)\n      (PARTITION p0 VALUES ('01'),\n       PARTITION p1 VALUES ('02')\n      );\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2 (col1 NUMBER,col2 VARCHAR2(50)) TABLEGROUP = tblgroup2\n  PARTITION BY LIST(col1)\n    (PARTITION p0 VALUES ('01'),\n     PARTITION p1 VALUES ('02')\n     );\nQuery OK, 0 rows affected\n",
            "创建名为 tblgroup3 的表组，其 SHARDING 属性为 PARTITION，非分区表 tbl1 和分区表 tbl2 不能同时加入到该表组中。",
            "obclient> CREATE TABLEGROUP tblgroup3 SHARDING = 'PARTITION';\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl1 (col INT) TABLEGROUP = tblgroup3;\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2 (col1 NUMBER,col2 VARCHAR2(50)) TABLEGROUP = tblgroup3\n  PARTITION BY LIST(col1)\n    (PARTITION p0 VALUES ('01'),\n     PARTITION p1 VALUES ('02')\n     );\nORA-00600: internal error code, arguments: -4179, not all tables are non-partitioned or partitioned, add table to tablegroup not allowed\n",
            "创建名为 tblgroup4 的表组，其 SHARDING 属性为 PARTITION，分区表 tbl1 和分区表 tbl2 的分区值不一致，不能同时加入到表组中。",
            "obclient> CREATE TABLEGROUP tblgroup4 SHARDING = 'PARTITION';\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl1 (col1 NUMBER,col2 VARCHAR2(50)) TABLEGROUP = tblgroup4\n    PARTITION BY LIST(col1)\n      (PARTITION p0 VALUES ('01'),\n       PARTITION p1 VALUES ('02')\n      );\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2 (col1 NUMBER,col2 VARCHAR2(50)) TABLEGROUP = tblgroup4\n    PARTITION BY LIST(col1)\n      (PARTITION p0 VALUES ('01'),\n       PARTITION p1 VALUES ('02'),\n       PARTITION p2 VALUES ('03')\n       );\nORA-00600: internal error code, arguments: -4179, partition num not equal, add table to tablegroup not allowed\n",
            "创建名为 tblgroup5 的表组，其 SHARDING 属性为 ADAPTIVE，并将分区表 tbl1 和分区表 tbl2 加入到表组中，两者的分区方式一致。",
            "obclient> CREATE TABLEGROUP tblgroup5 SHARDING = 'ADAPTIVE';\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl1(col1 NUMBER,col2 VARCHAR2(50)) TABLEGROUP = tblgroup5\n    PARTITION BY LIST(col1) SUBPARTITION BY LIST (col2)\n      SUBPARTITION TEMPLATE\n      (SUBPARTITION mp0 VALUES ('01'),\n       SUBPARTITION mp1 VALUES ('02'),\n       SUBPARTITION mp2 VALUES ('03')\n       )\n      (PARTITION p0 VALUES('01'),\n       PARTITION p1 VALUES('02')\n      );\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2(col1 NUMBER,col2 VARCHAR2(50)) TABLEGROUP = tblgroup5\n    PARTITION BY LIST(col1) SUBPARTITION BY LIST(col2)\n      SUBPARTITION TEMPLATE\n      (SUBPARTITION mp0 VALUES('01'),\n       SUBPARTITION mp1 VALUES('02'),\n       SUBPARTITION mp2 VALUES('03')\n      )\n      (PARTITION p0 VALUES('01'),\n       PARTITION p1 VALUES('02')\n      );\nQuery OK, 0 rows affected\n",
            "创建名为 tblgroup6 的表组，其 SHARDING 属性为 ADAPTIVE，非分区表 tbl1 和分区表 tbl2 不能同时加入到表组中。",
            "obclient> CREATE TABLEGROUP tblgroup6 SHARDING = 'ADAPTIVE';\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl1 (col INT) TABLEGROUP = tblgroup6;\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2(col1 NUMBER,col2 VARCHAR2(50)) TABLEGROUP = tblgroup6\n    PARTITION BY LIST(col1) SUBPARTITION BY LIST(col2)\n      SUBPARTITION TEMPLATE\n      (SUBPARTITION mp0 VALUES('01'),\n       SUBPARTITION mp1 VALUES('02'),\n       SUBPARTITION mp2 VALUES('03')\n      )\n      (PARTITION p0 VALUES('01'),\n       PARTITION p1 VALUES('02')\n      );\nORA-00600: internal error code, arguments: -4179, not all tables are non-partitioned or partitioned, add table to tablegroup not allowed\n",
            "创建名为 tblgroup7 的表组，其 SHARDING 属性为 ADAPTIVE，由于分区表 tbl1 和分区表 tbl2 的一级分区的分区类型相同，二级分区分区类型不同（二级分区个数不同），不能同时加入到表组中。",
            "obclient> CREATE TABLEGROUP tblgroup7 SHARDING = 'ADAPTIVE';\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl1(col1 NUMBER,col2 VARCHAR2(50)) TABLEGROUP = tblgroup7\n    PARTITION BY LIST(col1) SUBPARTITION BY LIST(col2)\n      SUBPARTITION TEMPLATE\n      (SUBPARTITION mp0 VALUES ('01'),\n       SUBPARTITION mp1 VALUES ('02'),\n       SUBPARTITION mp2 VALUES ('03')\n       )\n      (PARTITION p0 VALUES('01'),\n       PARTITION p1 VALUES('02')\n      );\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2(col1 NUMBER,col2 VARCHAR2(50)) TABLEGROUP = tblgroup7\n    PARTITION BY LIST(col1) SUBPARTITION BY LIST(col2)\n      SUBPARTITION TEMPLATE\n      (SUBPARTITION mp0 VALUES('01'),\n       SUBPARTITION mp1 VALUES('02')\n      )\n      (PARTITION p0 VALUES('01'),\n       PARTITION p1 VALUES('02')\n      );\nORA-00600: internal error code, arguments: -4179, subpartition num not matched, add table to tablegroup not allowed\n"
        ]
    },
    "CREATE TABLESPACE": {
        "Title": [
            "CREATE TABLESPACE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054362"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "CREATE TABLESPACE tablespace_name [ENCRYPTION USING 'AES-256|AES-128|AES-192|SM4-CBC']\n",
        "Description": [
            "该语句用来创建 TableSpace 逻辑对象，TableSpace 属性支持加密。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\ntablespace_name\n指定要创建的 TableSpace 对象名称。\n\n\nENCRYPTION USING\n加密所使用的关键字。\n\n\nAES-256|AES-128|AES-192|SM4-CBC\n选择所使用的加密算法。\n\n\n"
        ],
        "Examples": [
            "obclient> CREATE TABLESPACE tblspace1;\nQuery OK, 0 rows affected\n",
            "/*创建 Keystore 对象并开启存储密钥*/\nALTER SYSTEM SET TDE_METHOD = 'INTERNAL';\nADMINISTER KEY MANAGEMENT CREATE KEYSTORE my_keystore IDENTIFIED BY abcCBAK123;\n/*创建主加密密钥*/\nADMINISTER KEY MANAGEMENT SET KEYSTORE OPEN IDENTIFIED BY abcCBAK123;\nADMINISTER KEY MANAGEMENT SET KEY IDENTIFIED BY abcCBAK123;\n\nobclient>CREATE TABLESPACE tblspace1 ENCRYPTION USING 'SM4-CBC';\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "创建一个 TableSpace 对象。",
            "obclient> CREATE TABLESPACE tblspace1;\nQuery OK, 0 rows affected\n",
            "创建一个 TableSpace 对象并使用加密。",
            "/*创建 Keystore 对象并开启存储密钥*/\nALTER SYSTEM SET TDE_METHOD = 'INTERNAL';\nADMINISTER KEY MANAGEMENT CREATE KEYSTORE my_keystore IDENTIFIED BY abcCBAK123;\n/*创建主加密密钥*/\nADMINISTER KEY MANAGEMENT SET KEYSTORE OPEN IDENTIFIED BY abcCBAK123;\nADMINISTER KEY MANAGEMENT SET KEY IDENTIFIED BY abcCBAK123;\n\nobclient>CREATE TABLESPACE tblspace1 ENCRYPTION USING 'SM4-CBC';\nQuery OK, 0 rows affected\n"
        ]
    },
    "CREATE USER": {
        "Title": [
            "CREATE USER"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054321"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "CREATE USER user_name\n    IDENTIFIED BY [VALUES] password\n    [REQUIRE {NONE | SSL | X509 | tls_option}]\n    [PROFILE profile_name]\n    [DEFAULT TABLESPACE tablespace_name];\n\ntls_option:\n      CIPHER cipher_name\n    | ISSUER issuer_name\n    | SUBJECT subject_name\n",
        "Description": [
            "CREATE USER 语句用于创建新的 OceanBase 数据库用户。创建新用户后，可以使用新用户连接 OceanBase 数据库。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nuser_name\n用户名，新建用户后，dba_users 表会新增一行该用户的表项。如果同名用户已经存在将会报错。\n\n\nIDENTIFIED BY\n为待创建的用户创建一个密码，此处密码为明文，存入 dba_users 表后，服务器端会变为密文存储下来。如果密码中包含特殊字符 ~!@#%^&*_-+=`|(){}[]:;’,.?/，需使用英文双引号（\"）包含。\n\n\nIDENTIFIED BY VALUES\n为待创建的用户创建一个密码，此处密码为密文，将直接存入 dba_users 表。\n\n\nREQUIRE\n指定用户的密码验证要求，有如下几种取值。 \n      \nNONE：表示用户没有密码验证要求，意味着用户可以使用任何密码或不设置密码。\nSSL：表示用户必须使用 SSL 连接进行身份验证。\nX509：表示用户必须使用 X509 证书进行身份验证。\ntls_option：表示用户必须满足指定的 TLS（Transport Layer Security）要求。\n\n\n\ntls_option\n指定 TLS 要求的具体选项。 \n      \nCIPHER：用于指定 TLS 连接使用的加密算法或密码套件。\nISSUER：用于指定 TLS 证书的发行者（Issuer）。\nSUBJECT：用于指定 TLS 证书的主题（Subject）。\n\n\n\nPROFILE\n指定用户配置文件，用户配置文件是一组预定义的权限和限制，可以应用于创建的用户。\n\n\nDEFAULT TABLESPACE\n指定用户的默认表空间。表空间是用于存储用户数据的逻辑结构。\n\n\n"
        ],
        "Examples": [
            "obclient [SYS]> CREATE USER test1 IDENTIFIED BY \"********\";\n",
            "obclient [SYS]> CREATE USER test2 IDENTIFIED BY VALUES \"********\" REQUIRE SSL;\n"
        ],
        "Detailed Examples": [
            "创建用户 test1，并指定明文密码",
            "obclient [SYS]> CREATE USER test1 IDENTIFIED BY \"********\";\n",
            "创建用户 test2，指定密文密码，同时指定必须使用 SSL 连接进行身份验证",
            "obclient [SYS]> CREATE USER test2 IDENTIFIED BY VALUES \"********\" REQUIRE SSL;\n"
        ]
    },
    "CREATE VIEW": {
        "Title": [
            "CREATE VIEW"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054356"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "CREATE [OR REPLACE] [[NO] FORCE] VIEW view_name [(column_name_list)] AS select_stmt [WITH CHECK OPTION];\n\nselect_stmt:\n    SELECT column_name, [--string] \n        [, column_name, [--string] ...]\n    FROM from_list\n    [WHERE condition]\n\ncolumn_name_list:\n    column_name [, column_name ...]\n",
        "Description": [
            "该语句用于创建视图语句，如果指定了 OR REPLACE 子句，该语句能够替换已有的视图。",
            "视图在数据库中实际上并不是以表的形式存在，视图是作为在 CREATE VIEW 语句中指定的 SELECT 语句的结果而派生出来的，每次使用时视图就会派生。",
            "如果 FROM 子句中引用了两个或多个表或视图，则称该视图为连接视图（Join View）。一个可更新的连接视图，也称为可修改的连接视图，涉及两个或多个基表或视图，并允许 DML 操作。可更新的视图不受限于 WITH READ ONLY 子句。",
            "要实现可更新，视图必须满足多个条件。例如，其中一条通用规则就是对于连接视图的 INSERT、UPDATE 或 DELETE 操作一次只能修改一个基表。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nOR REPLACE\n表示如果要创建的视图名称已存在，则使用新的定义重新创建视图。\n\n\n[NO] FORCE\n如果在创建视图时，不考虑该视图是否存在基表或存在引用的对象类型，以及视图所在 Schema 的所有者是否具有权限，请指定 FORCE。如果只在基表存在且视图所在 Schema 所有者具有权限时才创建视图，请指定 NOFORCE。NOFORCE 是默认设置。\n\n\nview_name\n视图名。\n\n\ncolumn_name_list\n视图必须具有唯一的列名，不得有重复，就像基表那样。默认情况下，由 SELECT 语句检索的列名将用作视图列名。要想为视图列定义明确的名称，可使用可选的 column_name_list 子句，ID 之间使用逗号分隔。column_name_list 中的名称数目必须等于 SELECT语句检索的列数。SELECT 语句检索的列可以是对表列的简单引用。也可以是使用函数、常量值、运算符等的表达式。\n\n\nselect_stmt\n是一种 SELECT 语句。它给出了视图的定义。该语句可以从基表或其他视图进行选择。更多 SELECT 语句信息，参见 SIMPLE SELECT。\n\n\n–string\n可选项，用于给视图添加注释。注释存储在视图定义中。 \n      \n说明\n–string 可以注释在 select_stmt 的任意位置。\n\n\n\nWITH CHECK OPTION\nWITH CHECK OPTION 是一种用于创建视图的语法，它用于确保插入或更新的数据满足视图的定义条件。 \n      \n注意\nOracle 模式下的 WITH CHECK OPTION 语法不支持指定为 LOCAL 或 CASCADED，默认为 CASCADED。\n\n\n\n"
        ],
        "Examples": [
            "obclient [SYS]> CREATE OR REPLACE FORCE VIEW view1(vcol1, vcol2) AS SELECT col1, col2 FROM tbl1;\n",
            "obclient [SYS]> CREATE TABLE tbl2 (col1 INT, col2 INT);\n",
            "obclient [SYS]> CREATE VIEW view2 AS SELECT * FROM tbl2 WHERE tbl2.col2 > 1 WITH CHECK OPTION;\n",
            "obclient [SYS]> CREATE VIEW view3 \n  AS SELECT col1, --col1 comment1\n    col2 --col1 comment2\n    FROM tbl2;\n",
            "obclient [SYS]> SHOW CREATE VIEW view3;\n",
            "+-------+--------------------------------------------------------------------------------------------------------------+----------------------+----------------------+\n| VIEW  | CREATE VIEW                                                                                                  | CHARACTER_SET_CLIENT | COLLATION_CONNECTION |\n+-------+--------------------------------------------------------------------------------------------------------------+----------------------+----------------------+\n| VIEW3 | CREATE VIEW \"VIEW3\" (\"COL1\", \"COL2\")  AS SELECT col1, --col1 comment1\n    col2 --col1 comment2\n    FROM tbl2 | utf8mb4              | utf8mb4_bin          |\n+-------+--------------------------------------------------------------------------------------------------------------+----------------------+----------------------+\n1 row in set\n",
            "obclient [SYS]> SELECT DBMS_METADATA.GET_DDL('VIEW', 'VIEW3', 'SYS') FROM dual;\n",
            "+--------------------------------------------------------------------------------------------------------------+\n| DBMS_METADATA.GET_DDL('VIEW','VIEW3','SYS')                                                                  |\n+--------------------------------------------------------------------------------------------------------------+\n| CREATE VIEW \"VIEW3\" (\"COL1\", \"COL2\")  AS SELECT col1, --col1 comment1\n    col2 --col1 comment2\n    FROM tbl2 |\n+--------------------------------------------------------------------------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "选择表 tbl1 中的 col1、col2 列来创建视图 view1。",
            "obclient [SYS]> CREATE OR REPLACE FORCE VIEW view1(vcol1, vcol2) AS SELECT col1, col2 FROM tbl1;\n",
            "基于表 tbl2 的 col1、col2 列来创建视图 view2，view2 中包含满足 tbl2.col2 > 1 的全部数据。",
            "\n创建表 tbl2。 obclient [SYS]> CREATE TABLE tbl2 (col1 INT, col2 INT);\n\n创建视图 view2。 obclient [SYS]> CREATE VIEW view2 AS SELECT * FROM tbl2 WHERE tbl2.col2 > 1 WITH CHECK OPTION;\n\n",
            "创建表 tbl2。",
            "obclient [SYS]> CREATE TABLE tbl2 (col1 INT, col2 INT);\n",
            "创建视图 view2。",
            "obclient [SYS]> CREATE VIEW view2 AS SELECT * FROM tbl2 WHERE tbl2.col2 > 1 WITH CHECK OPTION;\n",
            "基于表 tbl2 的 col1、col2 列来创建视图 view3，并同时为视图 view3 添加注释。",
            "obclient [SYS]> CREATE VIEW view3 \n  AS SELECT col1, --col1 comment1\n    col2 --col1 comment2\n    FROM tbl2;\n",
            "通过 SHOW CREATE VIEW 或 DBMS_METADATA.GET_DDL 查询视图注释。",
            "\n通过 SHOW CREATE VIEW 查询视图注释。 obclient [SYS]> SHOW CREATE VIEW view3;\n 返回结果如下： +-------+--------------------------------------------------------------------------------------------------------------+----------------------+----------------------+\n| VIEW  | CREATE VIEW                                                                                                  | CHARACTER_SET_CLIENT | COLLATION_CONNECTION |\n+-------+--------------------------------------------------------------------------------------------------------------+----------------------+----------------------+\n| VIEW3 | CREATE VIEW \"VIEW3\" (\"COL1\", \"COL2\")  AS SELECT col1, --col1 comment1\n    col2 --col1 comment2\n    FROM tbl2 | utf8mb4              | utf8mb4_bin          |\n+-------+--------------------------------------------------------------------------------------------------------------+----------------------+----------------------+\n1 row in set\n\n通过 DBMS_METADATA.GET_DDL 查询视图注释。 obclient [SYS]> SELECT DBMS_METADATA.GET_DDL('VIEW', 'VIEW3', 'SYS') FROM dual;\n 返回结果如下： +--------------------------------------------------------------------------------------------------------------+\n| DBMS_METADATA.GET_DDL('VIEW','VIEW3','SYS')                                                                  |\n+--------------------------------------------------------------------------------------------------------------+\n| CREATE VIEW \"VIEW3\" (\"COL1\", \"COL2\")  AS SELECT col1, --col1 comment1\n    col2 --col1 comment2\n    FROM tbl2 |\n+--------------------------------------------------------------------------------------------------------------+\n1 row in set\n\n",
            "通过 SHOW CREATE VIEW 查询视图注释。",
            "obclient [SYS]> SHOW CREATE VIEW view3;\n",
            "返回结果如下：",
            "+-------+--------------------------------------------------------------------------------------------------------------+----------------------+----------------------+\n| VIEW  | CREATE VIEW                                                                                                  | CHARACTER_SET_CLIENT | COLLATION_CONNECTION |\n+-------+--------------------------------------------------------------------------------------------------------------+----------------------+----------------------+\n| VIEW3 | CREATE VIEW \"VIEW3\" (\"COL1\", \"COL2\")  AS SELECT col1, --col1 comment1\n    col2 --col1 comment2\n    FROM tbl2 | utf8mb4              | utf8mb4_bin          |\n+-------+--------------------------------------------------------------------------------------------------------------+----------------------+----------------------+\n1 row in set\n",
            "通过 DBMS_METADATA.GET_DDL 查询视图注释。",
            "obclient [SYS]> SELECT DBMS_METADATA.GET_DDL('VIEW', 'VIEW3', 'SYS') FROM dual;\n",
            "返回结果如下：",
            "+--------------------------------------------------------------------------------------------------------------+\n| DBMS_METADATA.GET_DDL('VIEW','VIEW3','SYS')                                                                  |\n+--------------------------------------------------------------------------------------------------------------+\n| CREATE VIEW \"VIEW3\" (\"COL1\", \"COL2\")  AS SELECT col1, --col1 comment1\n    col2 --col1 comment2\n    FROM tbl2 |\n+--------------------------------------------------------------------------------------------------------------+\n1 row in set\n"
        ]
    },
    "DELETE": {
        "Title": [
            "DELETE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054291"
        ],
        "Category": [
            "DML"
        ],
        "Feature": "DELETE [hint_options] [FROM] table_factor [ WHERE where_condition ]\n    [{ RETURNING | RETURN } returning_exprs [ into_clause ]]\n\ntable_factor:\n    {table_name | table_subquery | '(' table_reference ')' }\n\nwhere_condition:\n    expression\n\nreturning_exprs:\n    projection_col_name [,projection_col_name ...]\n\ninto_clause:\n    { INTO into_var_list | BULK COLLECT INTO into_var_list}\n\ninto_var_list:\n    { USER_VARIABLE | ref_name } [, { USER_VARIABLE | ref_name }...]\n",
        "Description": [
            "该语句用来删除表中符合条件的行，包括单表删除及多表删除两种方式。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nhint_options\n指定 Hint 选项，为可选项。\n\n\ntable_factor\n指定需要删除的表名（基表、可更新视图、特殊子查询）。\n\n\nwhere_condition\n删除的表需要满足的过滤条件。\n\n\nreturning_exprs\n返回删除数据前的投影列。\n\n\ninto_clause\n将删除数据前的投影列插入到指定列表。\n\n\nref_name\n变量名。\n\n\n",
            "\n注意\n特殊子查询是指类似于可更新视图对应的子查询，这类子查询不应该包含复杂的算子（例如 GROUP BY、DISTINCT、WINDOW FUNCTION 等）。\n"
        ],
        "Examples": [
            "obclient> CREATE TABLE tbl1(col1 INT PRIMARY KEY, col2 INT);\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO tbl1 VALUES(1,1),(2,2),(3,3),(4,4);\nQuery OK, 4 rows affected\nRecords: 4  Duplicates: 0  Warnings: 0\n\nobclient> SELECT * FROM tbl1;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    1 |    1 |\n|    2 |    2 |\n|    3 |    3 |\n|    4 |    4 |\n+------+------+\n4 rows in set\n",
            "obclient>DELETE FROM tbl1 WHERE col1 = 2;\nQuery OK, 1 row affected\n\nobclient>SELECT * FROM tbl1;\n+----+------+\n| COL1 | COL2 |\n+----+------+\n|  1 |    1 |\n|  3 |    3 |\n|  4 |    4 |\n+----+------+\n3 rows in set\n",
            "obclient> DELETE FROM (SELECT * FROM tbl1);\nQuery OK, 4 rows affected\n\nobclient> SELECT * FROM tbl1;\nEmpty set\n",
            "obclient> DELETE FROM tbl1 RETURNING col1;\n+----+\n| COL1 |\n+----+\n|  1 |\n|  2 |\n|  3 |\n|  4 |\n+----+\n4 rows in set\n\nobclient>SELECT * FROM t1;\nEmpty set\n"
        ],
        "Detailed Examples": [
            "创建表 tbl1 并插入数据。",
            "obclient> CREATE TABLE tbl1(col1 INT PRIMARY KEY, col2 INT);\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO tbl1 VALUES(1,1),(2,2),(3,3),(4,4);\nQuery OK, 4 rows affected\nRecords: 4  Duplicates: 0  Warnings: 0\n\nobclient> SELECT * FROM tbl1;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    1 |    1 |\n|    2 |    2 |\n|    3 |    3 |\n|    4 |    4 |\n+------+------+\n4 rows in set\n",
            "单表删除：删除 col1=2 的行，其中 col1 列为表 tbl1 中的 Primary Key。",
            "obclient>DELETE FROM tbl1 WHERE col1 = 2;\nQuery OK, 1 row affected\n\nobclient>SELECT * FROM tbl1;\n+----+------+\n| COL1 | COL2 |\n+----+------+\n|  1 |    1 |\n|  3 |    3 |\n|  4 |    4 |\n+----+------+\n3 rows in set\n",
            "单表删除：直接操作子查询进去删除操作。",
            "obclient> DELETE FROM (SELECT * FROM tbl1);\nQuery OK, 4 rows affected\n\nobclient> SELECT * FROM tbl1;\nEmpty set\n",
            "单表删除：包含 RETURNING 子句。",
            "obclient> DELETE FROM tbl1 RETURNING col1;\n+----+\n| COL1 |\n+----+\n|  1 |\n|  2 |\n|  3 |\n|  4 |\n+----+\n4 rows in set\n\nobclient>SELECT * FROM t1;\nEmpty set\n"
        ]
    },
    "DROP CONTEXT": {
        "Title": [
            "DROP CONTEXT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054329"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "DROP CONTEXT namespace;\n",
        "Description": [
            "DROP CONTEXT 语句用于从数据库中删除上下文命名空间。",
            "删除上下文命名空间不会使该命名空间下为用户会话设置的上下文无效。但是，当用户下次尝试设置该上下文时，该上下文将无效。",
            "\n注意\n您必须具有 DROP ANY CONTEXT 系统权限。\n"
        ],
        "Illustration": [
            "namespace 是指定要删除的上下文命名空间的名称。您不能删除内置的命名空间 USERENV。",
            "有关 USERENV 命名空间的信息，请参见函数 SYS_CONTEXT。"
        ],
        "Examples": [
            "obclient> DROP CONTEXT dev_context;\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "删除在 CREATE CONTEXT 中创建的上下文 dev_context。",
            "obclient> DROP CONTEXT dev_context;\nQuery OK, 0 rows affected\n"
        ]
    },
    "DROP DATABASE LINK": {
        "Title": [
            "DROP DATABASE LINK"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054323"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "DROP DATABASE LINK dblink_name;\n",
        "Description": [
            "删除已创建的数据库链接（即 dblink）。",
            "\n说明\n要删除已创建的数据库链接，您必须具有 DROP DATABASE LINK 系统权限。\n"
        ],
        "Illustration": [
            "dblink_name 为要删除的数据库链接的名称。"
        ],
        "Examples": [
            "obclient> DROP DATABASE LINK ob_dblink;\nQuery OK, 1 row affected\n"
        ],
        "Detailed Examples": [
            "obclient> DROP DATABASE LINK ob_dblink;\nQuery OK, 1 row affected\n"
        ]
    },
    "DROP DIRECTORY": {
        "Title": [
            "DROP DIRECTORY"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054346"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "DROP DIRECTORY directory_name;\n",
        "Description": [
            "该语句用来删除路径对象。",
            "\n说明\n删除路径对象必须具有 DROP ANY DIRECTORY 系统权限。\n"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\ndirectory_name\n指定要删除的路径对象。删除路径对象时，不会删除系统中相关联的共享文件系统路径。\n\n\n"
        ],
        "Examples": [
            "obclient> DROP DIRECTORY sql_file_dir;\nQuery OK, 1 row affected\n"
        ],
        "Detailed Examples": [
            "删除一个路径对象 sql_file_dir。",
            "obclient> DROP DIRECTORY sql_file_dir;\nQuery OK, 1 row affected\n"
        ]
    },
    "DROP INDEX": {
        "Title": [
            "DROP INDEX"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054330"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "DROP INDEX [schema.]index_name;\n",
        "Description": [
            "该语句用来删除索引。当索引过多时，维护开销增大，因此需要删除不必要的索引。",
            "删除索引的时候需要等待一段时间才能完全删除。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nschema\n指定 Schema 名称。\n\n\nindex_name\n指定索引名称。\n\n\n"
        ],
        "Examples": [
            "obclient> DROP INDEX tbl1_idx1;\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "删除索引 tbl1_idx1。",
            "obclient> DROP INDEX tbl1_idx1;\nQuery OK, 0 rows affected\n"
        ]
    },
    "DROP MATERIALIZED VIEW LOG": {
        "Title": [
            "DROP MATERIALIZED VIEW LOG"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054357"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "DROP MATERIALIZED VIEW LOG ON [schema.] table;\n",
        "Description": [
            "该语句用来删除物化视图日志。",
            "\n说明\n在删除物化视图日志时，如果基表正在进行某个运行中的事务操作，那么删除操作会被阻塞，直到该事务结束。\n"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nschema.\n可选项，指定物化视图日志基表所在的 Schema。如果省略 schema.，则默认基表在您自己的 Schema 中。\n\n\ntable\n指定物化视图日志对应的基表名称。\n\n\n"
        ],
        "Examples": [
            "obclient [SYS]> DROP MATERIALIZED VIEW LOG ON test_tbl1;\n",
            "Query OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "删除表 test_tbl1 上的物化视图日志。",
            "obclient [SYS]> DROP MATERIALIZED VIEW LOG ON test_tbl1;\n",
            "返回结果如下：",
            "Query OK, 0 rows affected\n"
        ]
    },
    "DROP MATERIALIZED VIEW": {
        "Title": [
            "DROP MATERIALIZED VIEW"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054316"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "DROP MATERIALIZED VIEW [ schema. ] materialized_view;\n",
        "Description": [
            "该语句用来删除物化视图。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nschema.\n可选项，指定物化视图所在的 Schema。如果省略 schema.，则默认在您自己的 Schema 中。\n\n\nmaterialized_view\n指定物化视图的名称。\n\n\n"
        ],
        "Examples": [
            "DROP MATERIALIZED VIEW mv_test_tbl1;\n",
            "Query OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "删除名为 mv_test_tbl1 的物化视图。",
            "DROP MATERIALIZED VIEW mv_test_tbl1;\n",
            "返回结果如下：",
            "Query OK, 0 rows affected\n"
        ]
    },
    "DROP OUTLINE": {
        "Title": [
            "DROP OUTLINE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054322"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "DROP OUTLINE outline_name;  \n",
        "Description": [
            "该语句用于删除 OceanBase 数据库中的 Outline。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\noutline_name\n指定要删除的 Outline 名称。\n\n\n"
        ],
        "Examples": [
            "obclient> DROP OUTLINE outline1;      \nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "删除 Outline outline1。",
            "obclient> DROP OUTLINE outline1;      \nQuery OK, 0 rows affected\n"
        ]
    },
    "DROP PROFILE": {
        "Title": [
            "DROP PROFILE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054343"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "DROP PROFILE \"profile_name\";\n",
        "Description": [
            "该语句用于删除配置文件。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nprofile_name\n指定要删除的配置文件的名称。\n\n\n"
        ],
        "Examples": [
            "obclient> DROP PROFILE \"profile1\";\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "删除配置文件 profile1。",
            "obclient> DROP PROFILE \"profile1\";\nQuery OK, 0 rows affected\n"
        ]
    },
    "DROP ROLE": {
        "Title": [
            "DROP ROLE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054350"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "DROP ROLE role_name ;\n",
        "Description": [
            "该语句用于删除角色。",
            "\n说明\n已删除的角色会从已授予该角色的所有用户和角色中撤消，并将其从数据库中删除。已启用该角色的用户会话不受影响。但是，在角色被删除后，新的用户会话不可以启用该角色。\n"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nrole_name\n指定要删除的角色的名称。\n\n\n"
        ],
        "Examples": [
            "obclient> DROP ROLE role1;\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "删除角色 role1。",
            "obclient> DROP ROLE role1;\nQuery OK, 0 rows affected\n"
        ]
    },
    "DROP SEQUENCE": {
        "Title": [
            "DROP SEQUENCE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054364"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "DROP SEQUENCE [schema. ] sequence_name;\n",
        "Description": [
            "该语句用来删除序列。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nschema.\n指定包含序列的用户。如果不指定 Schema，则默认为当前登录用户的序列。\n\n\nsequence_name\n指定要删除的序列名称。\n\n\n"
        ],
        "Examples": [
            "obclient> DROP SEQUENCE seq1;\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "删除序列 seq1。",
            "obclient> DROP SEQUENCE seq1;\nQuery OK, 0 rows affected\n"
        ]
    },
    "DROP SYNONYM": {
        "Title": [
            "DROP SYNONYM"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054327"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "DROP [PUBLIC] SYNONYM [ schema. ]synonym_name [FORCE];\n",
        "Description": [
            "该语句用来删除一个同义词。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nPUBLIC\n指定 PUBLIC 来删除公共同义词。如果不指定 PUBLIC，则删除私有同义词。\n\n\nschema\n指定同义词所在的 Schema。如果省略 schema.，则默认同义词在您自己的模式中。如果指定了 PUBLIC，则对同义词不需要指定 schema。\n\n\nsynonym_name\nsynonym_name 表示同义词的名称。\n\n\nFORCE\n指定 FORCE，可删除具有依赖表或用户定义类型的同义词。\n\n\n"
        ],
        "Examples": [
            "obclient> DROP SYNONYM user1.syn1;\nQuery OK, 0 rows affected\n",
            "obclient> DROP PUBLIC SYNONYM syn2;\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "删除一个私有同义词。",
            "obclient> DROP SYNONYM user1.syn1;\nQuery OK, 0 rows affected\n",
            "删除一个 PUBLIC 同义词。",
            "obclient> DROP PUBLIC SYNONYM syn2;\nQuery OK, 0 rows affected\n"
        ]
    },
    "DROP TABLE": {
        "Title": [
            "DROP TABLE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054348"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "DROP TABLE table_name [CASCADE CONSTRAINTS] [PURGE];\n",
        "Description": [
            "该语句用于删除 OceanBase 数据库中的表。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\ntable_name\n指定要删除的表名。\n\n\nCASCADE CONSTRAINTS\n级联删除跟 table_name 关联的约束。\n\n\nPURGE\n彻底删除表 (不进回收站)。\n\n\n"
        ],
        "Examples": [
            "obclient> DROP TABLE tbl1;\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "删除表 tbl1。",
            "obclient> DROP TABLE tbl1;\nQuery OK, 0 rows affected\n"
        ]
    },
    "DROP TABLEGROUP": {
        "Title": [
            "DROP TABLEGROUP"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054320"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "DROP TABLEGROUP tablegroup_name;\n",
        "Description": [
            "该语句用来删除表组。",
            "\n注意\n如果有任何表的 TABLEGROUP 属性引用了目标表组，则该表组不允许被删除。\n"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\ntablegroup_name\n指定要删除的表组名称。\n\n\n"
        ],
        "Examples": [
            "obclient> DROP TABLEGROUP tblgroup1;\nORA-00600: internal error code, arguments: -4615, tablegroup is not empty\n",
            "obclient> SHOW TABLEGROUPS;\n+-----------------------+---------------+---------------------+\n| TABLEGROUP_NAME | TABLE_NAME | DATABASE_NAME |\n+-----------------------+---------------+---------------------+\n| TBLGROUP1               | TBL1               | SYS                         |\n\n+-----------------------+---------------+---------------------+\n1 rows in set\n\nobclient> ALTER TABLE tbl1 SET TABLEGROUP '';\nQuery OK, 0 rows affected\n",
            "obclient> DROP TABLEGROUP tblgroup1;\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "删除被表的 TABLEGROUP 属性引用的表组 tblgroup1。",
            "直接删除表组 tblgroup1 报错。",
            "obclient> DROP TABLEGROUP tblgroup1;\nORA-00600: internal error code, arguments: -4615, tablegroup is not empty\n",
            "查看表组信息，并将表 tbl1 移出表组 tblgroup1。",
            "obclient> SHOW TABLEGROUPS;\n+-----------------------+---------------+---------------------+\n| TABLEGROUP_NAME | TABLE_NAME | DATABASE_NAME |\n+-----------------------+---------------+---------------------+\n| TBLGROUP1               | TBL1               | SYS                         |\n\n+-----------------------+---------------+---------------------+\n1 rows in set\n\nobclient> ALTER TABLE tbl1 SET TABLEGROUP '';\nQuery OK, 0 rows affected\n",
            "删除表组 tblgroup1。",
            "obclient> DROP TABLEGROUP tblgroup1;\nQuery OK, 0 rows affected\n"
        ]
    },
    "DROP TABLESPACE": {
        "Title": [
            "DROP TABLESPACE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054355"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "DROP TABLESPACE tablespace_name;\n",
        "Description": [
            "该语句用来删除 TableSpace 逻辑对象，仅在 TableSpace下没有表时可以删除成功。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\ntablespace_name\n指定要删除的 TableSpace 名称。\n\n\n"
        ],
        "Examples": [
            "obclient>  DROP TABLESPACE tblspace1;\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "删除 TableSpace 对象 tblspace1。",
            "obclient>  DROP TABLESPACE tblspace1;\nQuery OK, 0 rows affected\n"
        ]
    },
    "DROP USER": {
        "Title": [
            "DROP USER"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054352"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "DROP USER user_name CASCADE;\n",
        "Description": [
            "该语句用于删除一个 OceanBase 数据库用户。",
            "\n说明\n\n必须拥有 CREATE USER 的系统权限，才可以使用 DROP USER 命令。\nCASCADE 会指定在删除用户前，删除该用户拥有的所有对象，包括权限、数据库、表等。\n\n"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nuser_name\n用户名，只支持删除单个用户。\n\n\n"
        ],
        "Examples": [
            "obclient> DROP USER user1 CASCADE;\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "删除名为 user1 的用户。",
            "obclient> DROP USER user1 CASCADE;\nQuery OK, 0 rows affected\n"
        ]
    },
    "DROP VIEW": {
        "Title": [
            "DROP VIEW"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054338"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "DROP VIEW [schema.] view_name [CASCADE | RESTRICT];\n",
        "Description": [
            "该语句用于删除视图。",
            "\n说明\n该视图必须在您自己的 Schema 中，或者您必须有 DROP ANY VIEW 权限。\n"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nschema.\n指定视图所在的 Schema。如果省略 schema.，则 默认视图在您自己的模式中。\n\n\nview_name\n删除的视图名。\n\n\nCASCADE | RESTRICT\nCASCADE 为级联删除，自动删除依赖此视图的对象。RESTRICT 为约束删除，如果有依赖对象存在，则拒绝删除此视图。 说明 当前版本暂不支持此参数。如果给出，将被解析和忽略。\n\n\n"
        ],
        "Examples": [
            "obclient> DROP VIEW v1;\nQuery OK, 0 rows affected\n",
            "obclient> DROP VIEW user1.v2;\nORA-01031: insufficient privileges\n"
        ],
        "Detailed Examples": [
            "删除视图 v1。",
            "obclient> DROP VIEW v1;\nQuery OK, 0 rows affected\n",
            "如果没有 DROP ANY VIEW 权限，删除视图时提示权限不足。",
            "obclient> DROP VIEW user1.v2;\nORA-01031: insufficient privileges\n"
        ]
    },
    "EXPLAIN": {
        "Title": [
            "EXPLAIN"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054292"
        ],
        "Category": [
            "DML"
        ],
        "Feature": "/*获取表或列的信息*/\n{EXPLAIN | DESCRIBE | DESC} table_name [column_name];\n\n/*获取 SQL 计划信息*/\n{EXPLAIN [INTO table_name ] [SET statement_id = string]  \n | DESCRIBE\n | DESC} [explain_type] [PRETTY | PRETTY_COLOR] dml_statement;\n\nexplain_type：\n    BASIC\n  | OUTLINE\n  | EXTENDED\n  | EXTENDED_NOADDR\n  | PARTITIONS\n  | FORMAT = {TRADITIONAL| JSON}\n\ndml_statement:\n    SELECT statement\n  | DELETE statement\n  | INSERT statement\n  | UPDATE statement\n  | MERGE statement\n",
        "Description": [
            "该语句用于解释 SQL 语句的执行计划，可以是 SELECT、DELETE、INSERT、REPLACE 或 UPDATE 语句。",
            "EXPLAIN 与 DESCRIBE、DESC 互为同义词。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\ntable_name\n指定表名。\n\n\ncolumn_name\n指定表的列名。\n\n\nINTO table_name\n表示将 EXPLAIN 的计划信息保存到指定表内。如果没有指定 INTO table_name，默认查询到 PLAN_TABLE 表内。\n\n\nSET statement_id\n表示当前查询使用字符串标记，以方便后续查询该 SQL 的计划信息。如果没有指定 SET statement_id，默认使用空字符串作为信息标记。\n\n\nPRETTY | PRETTY_COLOR\n将计划树中的父节点和子节点使用树线或彩色树线连接起来，使得执行计划展示更方便阅读。\n\n\nBASIC\n指定输出计划的基础信息，如算子 ID、算子名称、所引用的表名。\n\n\nexplain_type\n指定解释类型。\n\n\nBASIC\n指定输出计划的基础信息，例如算子 ID、算子名称、所引用的表名。\n\n\nOUTLINE\n指定输出的计划信息包含 Outline 信息。\n\n\nEXTENDED\nEXPLAIN 产生附加信息，包括每个算子的输入列和输出列、访问表的分区信息、当前使用的filter信息。如果当前算子使用了索引，显示所使用的索引列及抽取的 Query Range。\n\n\nEXTENDED_NOADDR\n以简约的方式展示附加信息。\n\n\nPARTITIONS\n显示分区相关信息。\n\n\nTRADITIONAL | JSON\n指定 EXPALIN 的输出格式。 \n      \nTRADITIONAL：表格输出格式。\nJSON：使用 KEY:VALUE 输出格式，JSON 显示为JSON 字符串，包括 EXTENDED 和 PARTITIONS 信息。\n\n\n\ndml_statement\nDML 语句。\n\n\n"
        ],
        "Examples": [
            "/* 创建表 test */\nobclient> CREATE TABLE test (statement_id VARCHAR(30), plan_id INT, gmt_create TIMESTAMP,\n   remarks VARCHAR(4000), operator VARCHAR(255), options VARCHAR(255), object_node VARCHAR(40),\n   object_owner VARCHAR(128), object_name VARCHAR(128), object_alias VARCHAR(261), object_instance INT,\n   object_type VARCHAR(30),optimizer VARCHAR(4000), search_columns INT, id INT, parent_id INT, depth INT,\n   position INT,is_last_child INT, cost INT, cardinality INT, bytes INT, rowset INT, other_tag VARCHAR(4000),\n   partition_start VARCHAR(4000), partition_stop VARCHAR(4000), partition_id INT, other VARCHAR(4000),\n   distribution VARCHAR(64), cpu_cost INT, io_cost INT, temp_space INT, access_predicates VARCHAR(4000),\n   filter_predicates VARCHAR(4000),startup_predicates VARCHAR(4000), projection VARCHAR(4000),\n   special_predicates VARCHAR(4000), time INT, qblock_name VARCHAR(128), other_xml VARCHAR(4000));\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE t1(c1 INT);\nQuery OK, 0 rows affected\n\n/* 如果时间格式报错，可以通过如下命令重新设置 TIMESTAMP 格式*/\nobclient> ALTER SESSION SET NLS_TIMESTAMP_FORMAT = 'YYYY-MM-DD HH24:MI:SS.FF';\nQuery OK, 0 rows affected\n\n/* 解释查询计划，并把计划信息保存在指定表 test 内 */\nobclient> EXPLAIN INTO test SELECT COUNT(*) FROM t1;\n+--------------------------------------------------------------------------+\n| Query Plan                                                               |\n+--------------------------------------------------------------------------+\n| =================================================                        |\n| |ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|                        |\n| -------------------------------------------------                        |\n| |0 |SCALAR GROUP BY  |    |1       |2           |                        |\n| |1 |└─TABLE FULL SCAN|T1  |1       |2           |                        |\n| =================================================                        |\n| Outputs & filters:                                                       |\n| -------------------------------------                                    |\n|   0 - output([T_FUN_COUNT_SUM(T_FUN_COUNT(*))]), filter(nil), rowset=256 |\n|       group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])            |\n|   1 - output([T_FUN_COUNT(*)]), filter(nil), rowset=256                  |\n|       access(nil), partitions(p0)                                        |\n|       is_index_back=false, is_global_index=false,                        |\n|       range_key([T1.__pk_increment]), range(MIN ; MAX)always true        |\n+--------------------------------------------------------------------------+\n14 rows in set\n\nobclient> SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY(table_name=>'test'));\n+--------------------------------------------------------------------------+\n| COLUMN_VALUE                                                             |\n+--------------------------------------------------------------------------+\n| =================================================                        |\n| |ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|                        |\n| -------------------------------------------------                        |\n| |0 |SCALAR GROUP BY  |    |1       |2           |                        |\n| |1 |└─TABLE FULL SCAN|T1  |1       |2           |                        |\n| =================================================                        |\n| Outputs & filters:                                                       |\n| -------------------------------------                                    |\n|   0 - output([T_FUN_COUNT_SUM(T_FUN_COUNT(*))]), filter(nil), rowset=256 |\n|       group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])            |\n|   1 - output([T_FUN_COUNT(*)]), filter(nil), rowset=256                  |\n|       access(nil), partitions(p0)                                        |\n|       is_index_back=false, is_global_index=false,                        |\n|       range_key([T1.__pk_increment]), range(MIN ; MAX)always true        |\n+--------------------------------------------------------------------------+\n14 rows in set\n",
            "obclient> EXPLAIN INTO test SET statement_id='test2' SELECT COUNT(*) FROM t1;\n+--------------------------------------------------------------------------+\n| Query Plan                                                               |\n+--------------------------------------------------------------------------+\n| =================================================                        |\n| |ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|                        |\n| -------------------------------------------------                        |\n| |0 |SCALAR GROUP BY  |    |1       |2           |                        |\n| |1 |└─TABLE FULL SCAN|T1  |1       |2           |                        |\n| =================================================                        |\n| Outputs & filters:                                                       |\n| -------------------------------------                                    |\n|   0 - output([T_FUN_COUNT_SUM(T_FUN_COUNT(*))]), filter(nil), rowset=256 |\n|       group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])            |\n|   1 - output([T_FUN_COUNT(*)]), filter(nil), rowset=256                  |\n|       access(nil), partitions(p0)                                        |\n|       is_index_back=false, is_global_index=false,                        |\n|       range_key([T1.__pk_increment]), range(MIN ; MAX)always true        |\n+--------------------------------------------------------------------------+\n14 rows in set\n\nobclient> SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY(table_name=>'test',statement_id=>'test2'));\n+--------------------------------------------------------------------------+\n| COLUMN_VALUE                                                             |\n+--------------------------------------------------------------------------+\n| =================================================                        |\n| |ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|                        |\n| -------------------------------------------------                        |\n| |0 |SCALAR GROUP BY  |    |1       |2           |                        |\n| |1 |└─TABLE FULL SCAN|T1  |1       |2           |                        |\n| =================================================                        |\n| Outputs & filters:                                                       |\n| -------------------------------------                                    |\n|   0 - output([T_FUN_COUNT_SUM(T_FUN_COUNT(*))]), filter(nil), rowset=256 |\n|       group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])            |\n|   1 - output([T_FUN_COUNT(*)]), filter(nil), rowset=256                  |\n|       access(nil), partitions(p0)                                        |\n|       is_index_back=false, is_global_index=false,                        |\n|       range_key([T1.__pk_increment]), range(MIN ; MAX)always true        |\n+--------------------------------------------------------------------------+\n14 rows in set\n",
            "obclient> CREATE TABLE t101(c1 INT,c2 INT);\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE t102(c1 INT,c2 INT);\nQuery OK, 0 rows affected\n",
            "obclient> EXPLAIN t101;\n+-------+------------+------+-----+---------+-------+\n| FIELD | TYPE       | NULL | KEY | DEFAULT | EXTRA |\n+-------+------------+------+-----+---------+-------+\n| C1    | NUMBER(38) | YES  | NULL | NULL    | NULL |\n| C2    | NUMBER(38) | YES  | NULL | NULL    | NULL |\n+-------+------------+------+-----+---------+-------+\n2 rows in set\n",
            "obclient> EXPLAIN t102 c2;\n+-------+------------+------+-----+---------+-------+\n| FIELD | TYPE       | NULL | KEY | DEFAULT | EXTRA |\n+-------+------------+------+-----+---------+-------+\n| C2    | NUMBER(38) | YES  | NULL | NULL    | NULL |\n+-------+------------+------+-----+---------+-------+\n\n1 row in set\n",
            "+------------------------------------------------------------------------------------+\n| Query Plan                                                                         |\n+------------------------------------------------------------------------------------+\n| =================================================                                  |\n| |ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|                                  |\n| -------------------------------------------------                                  |\n| |0 |HASH JOIN        |    |1       |8           |                                  |\n| |1 |├─TABLE FULL SCAN|T102|1       |4           |                                  |\n| |2 |└─TABLE FULL SCAN|T101|1       |4           |                                  |\n| =================================================                                  |\n| Outputs & filters:                                                                 |\n| -------------------------------------                                              |\n|   0 - output([T101.C1], [T101.C2], [T102.C1], [T102.C2]), filter(nil), rowset=16   |\n|       equal_conds([T101.C2 = T102.C2]), other_conds(nil)                           |\n|   1 - output([T102.C2], [T102.C1]), filter([T102.C1 > 4]), rowset=16               |\n|       access([T102.C2], [T102.C1]), partitions(p0)                                 |\n|       is_index_back=false, is_global_index=false, filter_before_indexback[false],  |\n|       range_key([T102.__pk_increment]), range(MIN ; MAX)always true                |\n|   2 - output([T101.C2], [T101.C1]), filter(nil), rowset=16                         |\n|       access([T101.C2], [T101.C1]), partitions(p0)                                 |\n|       is_index_back=false, is_global_index=false,                                  |\n|       range_key([T101.__pk_increment]), range(MIN ; MAX)always true                |\n+------------------------------------------------------------------------------------+\n",
            "obclient> EXPLAIN EXTENDED_NOADDR SELECT * FROM t101,t102 WHERE t101.c2=t102.c2 AND t102.c1 > 4;\n+------------------------------------------------------------------------------------+\n| Query Plan                                                                         |\n+------------------------------------------------------------------------------------+\n| =================================================                                  |\n| |ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|                                  |\n| -------------------------------------------------                                  |\n| |0 |HASH JOIN        |    |1       |8           |                                  |\n| |1 |├─TABLE FULL SCAN|T102|1       |4           |                                  |\n| |2 |└─TABLE FULL SCAN|T101|1       |4           |                                  |\n| =================================================                                  |\n| Outputs & filters:                                                                 |\n| -------------------------------------                                              |\n|   0 - output([T101.C1], [T101.C2], [T102.C1], [T102.C2]), filter(nil), rowset=16   |\n|       equal_conds([T101.C2 = T102.C2]), other_conds(nil)                           |\n|   1 - output([T102.C2], [T102.C1]), filter([T102.C1 > 4]), rowset=16               |\n|       access([T102.C2], [T102.C1]), partitions(p0)                                 |\n|       is_index_back=false, is_global_index=false, filter_before_indexback[false],  |\n|       range_key([T102.__pk_increment]), range(MIN ; MAX)always true                |\n|   2 - output([T101.C2], [T101.C1]), filter(nil), rowset=16                         |\n|       access([T101.C2], [T101.C1]), partitions(p0)                                 |\n|       is_index_back=false, is_global_index=false,                                  |\n|       range_key([T101.__pk_increment]), range(MIN ; MAX)always true                |\n| Used Hint:                                                                         |\n| -------------------------------------                                              |\n|   /*+                                                                              |\n|                                                                                    |\n|   */                                                                               |\n| Qb name trace:                                                                     |\n| -------------------------------------                                              |\n|   stmt_id:0, stmt_type:T_EXPLAIN                                                   |\n|   stmt_id:1, SEL$1                                                                 |\n| Outline Data:                                                                      |\n| -------------------------------------                                              |\n|   /*+                                                                              |\n|       BEGIN_OUTLINE_DATA                                                           |\n|       LEADING(@\"SEL$1\" (\"SYS\".\"T102\"@\"SEL$1\" \"SYS\".\"T101\"@\"SEL$1\"))                |\n|       USE_HASH(@\"SEL$1\" \"SYS\".\"T101\"@\"SEL$1\")                                      |\n|       FULL(@\"SEL$1\" \"SYS\".\"T102\"@\"SEL$1\")                                          |\n|       FULL(@\"SEL$1\" \"SYS\".\"T101\"@\"SEL$1\")                                          |\n|       OPTIMIZER_FEATURES_ENABLE('4.0.0.0')                                         |\n|       END_OUTLINE_DATA                                                             |\n|   */                                                                               |\n| Optimization Info:                                                                 |\n| -------------------------------------                                              |\n|   T102:                                                                            |\n|       table_rows:1                                                                 |\n|       physical_range_rows:1                                                        |\n|       logical_range_rows:1                                                         |\n|       index_back_rows:0                                                            |\n|       output_rows:0                                                                |\n|       table_dop:1                                                                  |\n|       dop_method:Table DOP                                                         |\n|       avaiable_index_name:[T102]                                                   |\n|       stats version:0                                                              |\n|       dynamic sampling level:1                                                     |\n|   T101:                                                                            |\n|       table_rows:1                                                                 |\n|       physical_range_rows:1                                                        |\n|       logical_range_rows:1                                                         |\n|       index_back_rows:0                                                            |\n|       output_rows:1                                                                |\n|       table_dop:1                                                                  |\n|       dop_method:Table DOP                                                         |\n|       avaiable_index_name:[T101]                                                   |\n|       stats version:0                                                              |\n|       dynamic sampling level:1                                                     |\n|   Plan Type:                                                                       |\n|       LOCAL                                                                        |\n|   Note:                                                                            |\n|       Degree of Parallelisim is 1 because of table property                        |\n+------------------------------------------------------------------------------------+\n",
            "obclient> EXPLAIN FORMAT=TRADITIONAL INSERT INTO T101 VALUES(1,1);\n+----------------------------------------------------------------------------------------------------------------------------------------+\n| Query Plan                                                                                                                             |\n+----------------------------------------------------------------------------------------------------------------------------------------+\n| ==================================================                                                                                     |\n| |ID|OPERATOR          |NAME|EST.ROWS|EST.TIME(us)|                                                                                     |\n| --------------------------------------------------                                                                                     |\n| |0 |DISTRIBUTED INSERT|    |1       |13          |                                                                                     |\n| |1 |└─EXPRESSION      |    |1       |1           |                                                                                     |\n| ==================================================                                                                                     |\n| Outputs & filters:                                                                                                                     |\n| -------------------------------------                                                                                                  |\n|   0 - output(nil), filter(nil)                                                                                                         |\n|       columns([{T101: ({T101: (T101.__pk_increment, T101.C1, T101.C2)})}]),                                                            |\n|       column_values([T_HIDDEN_PK], [column_conv(NUMBER,PS:(-1,0),NULL,__values.C1)], [column_conv(NUMBER,PS:(-1,0),NULL,__values.C2)]) |\n|   1 - output([__values.C1], [__values.C2]), filter(nil)                                                                                |\n|       values({1, 1})                                                                                                                   |\n+----------------------------------------------------------------------------------------------------------------------------------------+\n",
            "obclient> EXPLAIN FORMAT=JSON SELECT * FROM t101,t102 WHERE t101.c2=t102.c2 AND t102.c1 > 4;\n+------------------------------------------------------------------+\n| Query Plan                                                       |\n+------------------------------------------------------------------+\n| {                                                                |\n|   \"ID\":0,                                                        |\n|   \"OPERATOR\":\"HASH JOIN \",                                       |\n|   \"NAME\":\"\",                                                     |\n|   \"EST.ROWS\":1,                                                  |\n|   \"EST.TIME(us)\":8,                                              |\n|   \"output\":\"output([T101.C1], [T101.C2], [T102.C1], [T102.C2])\", |\n|   \"CHILD_1\": {                                                   |\n|     \"ID\":1,                                                      |\n|     \"OPERATOR\":\"TABLE FULL SCAN\",                                |\n|     \"NAME\":\"T102\",                                               |\n|     \"EST.ROWS\":1,                                                |\n|     \"EST.TIME(us)\":4,                                            |\n|     \"output\":\"output([T102.C2], [T102.C1])\"                      |\n|   },                                                             |\n|   \"CHILD_2\": {                                                   |\n|     \"ID\":2,                                                      |\n|     \"OPERATOR\":\"TABLE FULL SCAN\",                                |\n|     \"NAME\":\"T101\",                                               |\n|     \"EST.ROWS\":1,                                                |\n|     \"EST.TIME(us)\":4,                                            |\n|     \"output\":\"output([T101.C2], [T101.C1])\"                      |\n|   }                                                              |\n| }                                                                |\n+------------------------------------------------------------------+\n"
        ],
        "Detailed Examples": [
            "解释查询计划，并把计划信息保存在指定表 test 内。",
            "/* 创建表 test */\nobclient> CREATE TABLE test (statement_id VARCHAR(30), plan_id INT, gmt_create TIMESTAMP,\n   remarks VARCHAR(4000), operator VARCHAR(255), options VARCHAR(255), object_node VARCHAR(40),\n   object_owner VARCHAR(128), object_name VARCHAR(128), object_alias VARCHAR(261), object_instance INT,\n   object_type VARCHAR(30),optimizer VARCHAR(4000), search_columns INT, id INT, parent_id INT, depth INT,\n   position INT,is_last_child INT, cost INT, cardinality INT, bytes INT, rowset INT, other_tag VARCHAR(4000),\n   partition_start VARCHAR(4000), partition_stop VARCHAR(4000), partition_id INT, other VARCHAR(4000),\n   distribution VARCHAR(64), cpu_cost INT, io_cost INT, temp_space INT, access_predicates VARCHAR(4000),\n   filter_predicates VARCHAR(4000),startup_predicates VARCHAR(4000), projection VARCHAR(4000),\n   special_predicates VARCHAR(4000), time INT, qblock_name VARCHAR(128), other_xml VARCHAR(4000));\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE t1(c1 INT);\nQuery OK, 0 rows affected\n\n/* 如果时间格式报错，可以通过如下命令重新设置 TIMESTAMP 格式*/\nobclient> ALTER SESSION SET NLS_TIMESTAMP_FORMAT = 'YYYY-MM-DD HH24:MI:SS.FF';\nQuery OK, 0 rows affected\n\n/* 解释查询计划，并把计划信息保存在指定表 test 内 */\nobclient> EXPLAIN INTO test SELECT COUNT(*) FROM t1;\n+--------------------------------------------------------------------------+\n| Query Plan                                                               |\n+--------------------------------------------------------------------------+\n| =================================================                        |\n| |ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|                        |\n| -------------------------------------------------                        |\n| |0 |SCALAR GROUP BY  |    |1       |2           |                        |\n| |1 |└─TABLE FULL SCAN|T1  |1       |2           |                        |\n| =================================================                        |\n| Outputs & filters:                                                       |\n| -------------------------------------                                    |\n|   0 - output([T_FUN_COUNT_SUM(T_FUN_COUNT(*))]), filter(nil), rowset=256 |\n|       group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])            |\n|   1 - output([T_FUN_COUNT(*)]), filter(nil), rowset=256                  |\n|       access(nil), partitions(p0)                                        |\n|       is_index_back=false, is_global_index=false,                        |\n|       range_key([T1.__pk_increment]), range(MIN ; MAX)always true        |\n+--------------------------------------------------------------------------+\n14 rows in set\n\nobclient> SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY(table_name=>'test'));\n+--------------------------------------------------------------------------+\n| COLUMN_VALUE                                                             |\n+--------------------------------------------------------------------------+\n| =================================================                        |\n| |ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|                        |\n| -------------------------------------------------                        |\n| |0 |SCALAR GROUP BY  |    |1       |2           |                        |\n| |1 |└─TABLE FULL SCAN|T1  |1       |2           |                        |\n| =================================================                        |\n| Outputs & filters:                                                       |\n| -------------------------------------                                    |\n|   0 - output([T_FUN_COUNT_SUM(T_FUN_COUNT(*))]), filter(nil), rowset=256 |\n|       group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])            |\n|   1 - output([T_FUN_COUNT(*)]), filter(nil), rowset=256                  |\n|       access(nil), partitions(p0)                                        |\n|       is_index_back=false, is_global_index=false,                        |\n|       range_key([T1.__pk_increment]), range(MIN ; MAX)always true        |\n+--------------------------------------------------------------------------+\n14 rows in set\n",
            "解释查询计划，并为查询设置标识信息。",
            "obclient> EXPLAIN INTO test SET statement_id='test2' SELECT COUNT(*) FROM t1;\n+--------------------------------------------------------------------------+\n| Query Plan                                                               |\n+--------------------------------------------------------------------------+\n| =================================================                        |\n| |ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|                        |\n| -------------------------------------------------                        |\n| |0 |SCALAR GROUP BY  |    |1       |2           |                        |\n| |1 |└─TABLE FULL SCAN|T1  |1       |2           |                        |\n| =================================================                        |\n| Outputs & filters:                                                       |\n| -------------------------------------                                    |\n|   0 - output([T_FUN_COUNT_SUM(T_FUN_COUNT(*))]), filter(nil), rowset=256 |\n|       group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])            |\n|   1 - output([T_FUN_COUNT(*)]), filter(nil), rowset=256                  |\n|       access(nil), partitions(p0)                                        |\n|       is_index_back=false, is_global_index=false,                        |\n|       range_key([T1.__pk_increment]), range(MIN ; MAX)always true        |\n+--------------------------------------------------------------------------+\n14 rows in set\n\nobclient> SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY(table_name=>'test',statement_id=>'test2'));\n+--------------------------------------------------------------------------+\n| COLUMN_VALUE                                                             |\n+--------------------------------------------------------------------------+\n| =================================================                        |\n| |ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|                        |\n| -------------------------------------------------                        |\n| |0 |SCALAR GROUP BY  |    |1       |2           |                        |\n| |1 |└─TABLE FULL SCAN|T1  |1       |2           |                        |\n| =================================================                        |\n| Outputs & filters:                                                       |\n| -------------------------------------                                    |\n|   0 - output([T_FUN_COUNT_SUM(T_FUN_COUNT(*))]), filter(nil), rowset=256 |\n|       group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])            |\n|   1 - output([T_FUN_COUNT(*)]), filter(nil), rowset=256                  |\n|       access(nil), partitions(p0)                                        |\n|       is_index_back=false, is_global_index=false,                        |\n|       range_key([T1.__pk_increment]), range(MIN ; MAX)always true        |\n+--------------------------------------------------------------------------+\n14 rows in set\n",
            "*创建表 t101 和 t102。",
            "obclient> CREATE TABLE t101(c1 INT,c2 INT);\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE t102(c1 INT,c2 INT);\nQuery OK, 0 rows affected\n",
            "获取表 t101 的信息。",
            "obclient> EXPLAIN t101;\n+-------+------------+------+-----+---------+-------+\n| FIELD | TYPE       | NULL | KEY | DEFAULT | EXTRA |\n+-------+------------+------+-----+---------+-------+\n| C1    | NUMBER(38) | YES  | NULL | NULL    | NULL |\n| C2    | NUMBER(38) | YES  | NULL | NULL    | NULL |\n+-------+------------+------+-----+---------+-------+\n2 rows in set\n",
            "获取表 t102 的列 c2 的信息。",
            "obclient> EXPLAIN t102 c2;\n+-------+------------+------+-----+---------+-------+\n| FIELD | TYPE       | NULL | KEY | DEFAULT | EXTRA |\n+-------+------------+------+-----+---------+-------+\n| C2    | NUMBER(38) | YES  | NULL | NULL    | NULL |\n+-------+------------+------+-----+---------+-------+\n\n1 row in set\n",
            "省略 explain_type，返回 SELECT 语句的执行计划信息。",
            "+------------------------------------------------------------------------------------+\n| Query Plan                                                                         |\n+------------------------------------------------------------------------------------+\n| =================================================                                  |\n| |ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|                                  |\n| -------------------------------------------------                                  |\n| |0 |HASH JOIN        |    |1       |8           |                                  |\n| |1 |├─TABLE FULL SCAN|T102|1       |4           |                                  |\n| |2 |└─TABLE FULL SCAN|T101|1       |4           |                                  |\n| =================================================                                  |\n| Outputs & filters:                                                                 |\n| -------------------------------------                                              |\n|   0 - output([T101.C1], [T101.C2], [T102.C1], [T102.C2]), filter(nil), rowset=16   |\n|       equal_conds([T101.C2 = T102.C2]), other_conds(nil)                           |\n|   1 - output([T102.C2], [T102.C1]), filter([T102.C1 > 4]), rowset=16               |\n|       access([T102.C2], [T102.C1]), partitions(p0)                                 |\n|       is_index_back=false, is_global_index=false, filter_before_indexback[false],  |\n|       range_key([T102.__pk_increment]), range(MIN ; MAX)always true                |\n|   2 - output([T101.C2], [T101.C1]), filter(nil), rowset=16                         |\n|       access([T101.C2], [T101.C1]), partitions(p0)                                 |\n|       is_index_back=false, is_global_index=false,                                  |\n|       range_key([T101.__pk_increment]), range(MIN ; MAX)always true                |\n+------------------------------------------------------------------------------------+\n",
            "通过 EXTENDED_NOADDR 关键字输出附加信息。",
            "obclient> EXPLAIN EXTENDED_NOADDR SELECT * FROM t101,t102 WHERE t101.c2=t102.c2 AND t102.c1 > 4;\n+------------------------------------------------------------------------------------+\n| Query Plan                                                                         |\n+------------------------------------------------------------------------------------+\n| =================================================                                  |\n| |ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|                                  |\n| -------------------------------------------------                                  |\n| |0 |HASH JOIN        |    |1       |8           |                                  |\n| |1 |├─TABLE FULL SCAN|T102|1       |4           |                                  |\n| |2 |└─TABLE FULL SCAN|T101|1       |4           |                                  |\n| =================================================                                  |\n| Outputs & filters:                                                                 |\n| -------------------------------------                                              |\n|   0 - output([T101.C1], [T101.C2], [T102.C1], [T102.C2]), filter(nil), rowset=16   |\n|       equal_conds([T101.C2 = T102.C2]), other_conds(nil)                           |\n|   1 - output([T102.C2], [T102.C1]), filter([T102.C1 > 4]), rowset=16               |\n|       access([T102.C2], [T102.C1]), partitions(p0)                                 |\n|       is_index_back=false, is_global_index=false, filter_before_indexback[false],  |\n|       range_key([T102.__pk_increment]), range(MIN ; MAX)always true                |\n|   2 - output([T101.C2], [T101.C1]), filter(nil), rowset=16                         |\n|       access([T101.C2], [T101.C1]), partitions(p0)                                 |\n|       is_index_back=false, is_global_index=false,                                  |\n|       range_key([T101.__pk_increment]), range(MIN ; MAX)always true                |\n| Used Hint:                                                                         |\n| -------------------------------------                                              |\n|   /*+                                                                              |\n|                                                                                    |\n|   */                                                                               |\n| Qb name trace:                                                                     |\n| -------------------------------------                                              |\n|   stmt_id:0, stmt_type:T_EXPLAIN                                                   |\n|   stmt_id:1, SEL$1                                                                 |\n| Outline Data:                                                                      |\n| -------------------------------------                                              |\n|   /*+                                                                              |\n|       BEGIN_OUTLINE_DATA                                                           |\n|       LEADING(@\"SEL$1\" (\"SYS\".\"T102\"@\"SEL$1\" \"SYS\".\"T101\"@\"SEL$1\"))                |\n|       USE_HASH(@\"SEL$1\" \"SYS\".\"T101\"@\"SEL$1\")                                      |\n|       FULL(@\"SEL$1\" \"SYS\".\"T102\"@\"SEL$1\")                                          |\n|       FULL(@\"SEL$1\" \"SYS\".\"T101\"@\"SEL$1\")                                          |\n|       OPTIMIZER_FEATURES_ENABLE('4.0.0.0')                                         |\n|       END_OUTLINE_DATA                                                             |\n|   */                                                                               |\n| Optimization Info:                                                                 |\n| -------------------------------------                                              |\n|   T102:                                                                            |\n|       table_rows:1                                                                 |\n|       physical_range_rows:1                                                        |\n|       logical_range_rows:1                                                         |\n|       index_back_rows:0                                                            |\n|       output_rows:0                                                                |\n|       table_dop:1                                                                  |\n|       dop_method:Table DOP                                                         |\n|       avaiable_index_name:[T102]                                                   |\n|       stats version:0                                                              |\n|       dynamic sampling level:1                                                     |\n|   T101:                                                                            |\n|       table_rows:1                                                                 |\n|       physical_range_rows:1                                                        |\n|       logical_range_rows:1                                                         |\n|       index_back_rows:0                                                            |\n|       output_rows:1                                                                |\n|       table_dop:1                                                                  |\n|       dop_method:Table DOP                                                         |\n|       avaiable_index_name:[T101]                                                   |\n|       stats version:0                                                              |\n|       dynamic sampling level:1                                                     |\n|   Plan Type:                                                                       |\n|       LOCAL                                                                        |\n|   Note:                                                                            |\n|       Degree of Parallelisim is 1 because of table property                        |\n+------------------------------------------------------------------------------------+\n",
            "展示 TRADITIONAL 格式的 INSERT 语句执行计划。",
            "obclient> EXPLAIN FORMAT=TRADITIONAL INSERT INTO T101 VALUES(1,1);\n+----------------------------------------------------------------------------------------------------------------------------------------+\n| Query Plan                                                                                                                             |\n+----------------------------------------------------------------------------------------------------------------------------------------+\n| ==================================================                                                                                     |\n| |ID|OPERATOR          |NAME|EST.ROWS|EST.TIME(us)|                                                                                     |\n| --------------------------------------------------                                                                                     |\n| |0 |DISTRIBUTED INSERT|    |1       |13          |                                                                                     |\n| |1 |└─EXPRESSION      |    |1       |1           |                                                                                     |\n| ==================================================                                                                                     |\n| Outputs & filters:                                                                                                                     |\n| -------------------------------------                                                                                                  |\n|   0 - output(nil), filter(nil)                                                                                                         |\n|       columns([{T101: ({T101: (T101.__pk_increment, T101.C1, T101.C2)})}]),                                                            |\n|       column_values([T_HIDDEN_PK], [column_conv(NUMBER,PS:(-1,0),NULL,__values.C1)], [column_conv(NUMBER,PS:(-1,0),NULL,__values.C2)]) |\n|   1 - output([__values.C1], [__values.C2]), filter(nil)                                                                                |\n|       values({1, 1})                                                                                                                   |\n+----------------------------------------------------------------------------------------------------------------------------------------+\n",
            "展示 JSON 格式的 SELECT 语句执行计划。",
            "obclient> EXPLAIN FORMAT=JSON SELECT * FROM t101,t102 WHERE t101.c2=t102.c2 AND t102.c1 > 4;\n+------------------------------------------------------------------+\n| Query Plan                                                       |\n+------------------------------------------------------------------+\n| {                                                                |\n|   \"ID\":0,                                                        |\n|   \"OPERATOR\":\"HASH JOIN \",                                       |\n|   \"NAME\":\"\",                                                     |\n|   \"EST.ROWS\":1,                                                  |\n|   \"EST.TIME(us)\":8,                                              |\n|   \"output\":\"output([T101.C1], [T101.C2], [T102.C1], [T102.C2])\", |\n|   \"CHILD_1\": {                                                   |\n|     \"ID\":1,                                                      |\n|     \"OPERATOR\":\"TABLE FULL SCAN\",                                |\n|     \"NAME\":\"T102\",                                               |\n|     \"EST.ROWS\":1,                                                |\n|     \"EST.TIME(us)\":4,                                            |\n|     \"output\":\"output([T102.C2], [T102.C1])\"                      |\n|   },                                                             |\n|   \"CHILD_2\": {                                                   |\n|     \"ID\":2,                                                      |\n|     \"OPERATOR\":\"TABLE FULL SCAN\",                                |\n|     \"NAME\":\"T101\",                                               |\n|     \"EST.ROWS\":1,                                                |\n|     \"EST.TIME(us)\":4,                                            |\n|     \"output\":\"output([T101.C2], [T101.C1])\"                      |\n|   }                                                              |\n| }                                                                |\n+------------------------------------------------------------------+\n"
        ]
    },
    "FLASHBACK TABLE BEFORE DROP": {
        "Title": [
            "FLASHBACK TABLE BEFORE DROP"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054302"
        ],
        "Category": [
            "DCL"
        ],
        "Feature": " FLASHBACK TABLE original_name TO BEFORE DROP [RENAME TO database_name.table_name];\n",
        "Description": [
            "用于从回收站中恢复被删除的表。",
            "\n说明\n\n回收站中的表并没有被实际删除，仍然会占用资源。如果需要彻底删除回收站中的内容，可以执行 SQL 语句 PURGE RECYCLEBIN;。\n回收站需要处于开启状态，被删除的表才会进入回收站。 \n     \n可以通过执行 SQL 语句 SHOW VARIABLES LIKE 'recyclebin'; 来查看回收站是否开启。\n可以通过执行 SQL 语句 SET RECYCLEBIN = ON; 来开启回收站。\n\n\n"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\noriginal_name\n指定要恢复表名。 说明 恢复表时，也会同步恢复和表相关的索引。\n\n\nRENAME TO\n修改表名和表所属的库。 如果省略 RENAME TO database_name.table_name，则恢复表的表名为原来的名称。\n\n\n"
        ],
        "Examples": [
            "obclient> SHOW RECYCLEBIN;\n+-----------------------------------+---------------+-------+------------------------------+\n| OBJECT_NAME                       | ORIGINAL_NAME | TYPE  | CREATETIME                   |\n+-----------------------------------+---------------+-------+------------------------------+\n| RECYCLE_$_100004_1634807168766392 | TBL1          | TABLE | 21-OCT-21 05.06.08.767109 PM |\n| RECYCLE_$_100004_1634807177792816 | TBL2          | TABLE | 21-OCT-21 05.06.17.791967 PM |\n+-----------------------------------+---------------+-------+------------------------------+\n2 rows in set (0.00 sec)\n\nobclient> FLASHBACK TABLE tbl1 TO BEFORE DROP;\nQuery OK, 0 rows affected\n\nobclient> SELECT * FROM tbl1;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    1 |    1 |\n+------+------+\n1 row in set\n",
            "obclient> SHOW RECYCLEBIN;\n+-----------------------------------+---------------+-------+------------------------------+\n| OBJECT_NAME                       | ORIGINAL_NAME | TYPE  | CREATETIME                   |\n+-----------------------------------+---------------+-------+------------------------------+\n| RECYCLE_$_100004_1634807168766392 | TBL1          | TABLE | 21-OCT-21 05.06.08.767109 PM |\n| RECYCLE_$_100004_1634807177792816 | TBL2          | TABLE | 21-OCT-21 05.06.17.791967 PM |\n+-----------------------------------+---------------+-------+------------------------------+\n2 rows in set (0.00 sec)\n\nobclient> FLASHBACK TABLE tbl2 TO BEFORE DROP RENAME TO user1.tbl_test;\nQuery OK, 0 rows affected\n\nobclient> SELECT * FROM user1.tbl_test;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    1 |    1 |\n+------+------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "从回收站中恢复被删除的表 tbl1。",
            "obclient> SHOW RECYCLEBIN;\n+-----------------------------------+---------------+-------+------------------------------+\n| OBJECT_NAME                       | ORIGINAL_NAME | TYPE  | CREATETIME                   |\n+-----------------------------------+---------------+-------+------------------------------+\n| RECYCLE_$_100004_1634807168766392 | TBL1          | TABLE | 21-OCT-21 05.06.08.767109 PM |\n| RECYCLE_$_100004_1634807177792816 | TBL2          | TABLE | 21-OCT-21 05.06.17.791967 PM |\n+-----------------------------------+---------------+-------+------------------------------+\n2 rows in set (0.00 sec)\n\nobclient> FLASHBACK TABLE tbl1 TO BEFORE DROP;\nQuery OK, 0 rows affected\n\nobclient> SELECT * FROM tbl1;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    1 |    1 |\n+------+------+\n1 row in set\n",
            "从回收站中恢复被删除的表 tbl2 至 user1 中，表名重命名为 tbl_test。",
            "obclient> SHOW RECYCLEBIN;\n+-----------------------------------+---------------+-------+------------------------------+\n| OBJECT_NAME                       | ORIGINAL_NAME | TYPE  | CREATETIME                   |\n+-----------------------------------+---------------+-------+------------------------------+\n| RECYCLE_$_100004_1634807168766392 | TBL1          | TABLE | 21-OCT-21 05.06.08.767109 PM |\n| RECYCLE_$_100004_1634807177792816 | TBL2          | TABLE | 21-OCT-21 05.06.17.791967 PM |\n+-----------------------------------+---------------+-------+------------------------------+\n2 rows in set (0.00 sec)\n\nobclient> FLASHBACK TABLE tbl2 TO BEFORE DROP RENAME TO user1.tbl_test;\nQuery OK, 0 rows affected\n\nobclient> SELECT * FROM user1.tbl_test;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    1 |    1 |\n+------+------+\n1 row in set\n"
        ]
    },
    "GRANT": {
        "Title": [
            "GRANT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054310"
        ],
        "Category": [
            "DCL"
        ],
        "Feature": "/* 授予对象权限 */\nGRANT {obj_all_col_priv [, obj_all_col_priv...]} \n    ON obj_clause \n    TO {grant_user [, grant_user...]} \n    [WITH GRANT OPTION]\n\n/* 授予系统权限或角色 */\nGRANT obj_all_col_priv [, obj_all_col_priv...] \n    TO grantee_clause \n    [WITH ADMIN OPTION]\n\ngrantee_clause:  \n      grant_user [, grant_user...] \n    | grant_user IDENTIFIED BY password\n\nobj_all_col_priv:  \n      role \n    | sys_and_obj_priv [(column_list)] \n    | ALL [PRIVILEGES] [(column_list)]\n",
        "Description": [
            "该语句用于系统管理员授予用户权限，包括对象权限、系统权限和角色。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nobj_all_col_priv\n指定授予的权限，您可通过授予权限或角色来直接或间接授予用户权限，同时把多个权限赋予用户时，权限类型使用英文逗号（,）隔开。具体的权限类型及其说明请参见 Oracle 模式下的权限分类。\n\n\nobj_clause\n指定授权的对象，授权的对象有如下几种指定方法。 \n      \n指定所有对象，即对象为所有数据库和所有表（*.*）。\n指定特定对象，即对象为特定的数据库（db_name.*）、特定的表（table_name）或特定的数据库中特定的表（db_name.table_name）。\n指定目录对象（[DIRECTORY] relation_name）。\n\n\n\ngrant_user\n指定要授予权限的用户或角色，有如下几种取值。 \n      \nuser [USER_VARIABLE]：授权给具体的用户。\nCONNECT：授权给 CONNECT 角色。\nRESOURCE：授权给 RESOURCE 角色。\nPUBLIC：授权给公共角色。\n\n\n\nIDENTIFIED BY password\n为待授权的用户指定一个密码，此处密码为明文，存入 dba_users 表后，服务器端会变为密文存储下来。如果密码中包含特殊字符 ~!@#%^&*_-+=`|(){}[]:;’,.?/，需使用英文双引号（\"\"）包含。\n\n\nWITH GRANT OPTION\n指定权限是否允许转授，取消授权时级联。\n\n\nWITH ADMIN OPTION\n指定权限是否允许转授，取消授权时不级联。\n\n\nrole\n指定授予的角色，有如下几种取值。 \n      \nrole_name：表示自定义角色的名称。\nDBA：表示数据库管理员角色，具有完全的数据库管理权限。授予 DBA 角色的用户可以执行任何数据库操作。\nRESOURCE：表示 RESOURCE 角色。\nCONNECT：表示 CONNECT 角色。\nPUBLIC：表示公共角色。\n\n\n\n"
        ],
        "Examples": [
            "obclient> GRANT CREATE VIEW TO user1 WITH ADMIN OPTION;\n",
            "obclient> GRANT CONNECT TO user1 IDENTIFIED by '********';\n",
            "GRANT COMMENT ANY TABLE TO role1;\n"
        ],
        "Detailed Examples": [
            "为用户 user1 赋予 CREATE VIEW 权限，并设置允许转授其他用户相同的权限。",
            "obclient> GRANT CREATE VIEW TO user1 WITH ADMIN OPTION;\n",
            "为用户 user1 授予 CONNECT 角色，并修改 user1 的密码。",
            "obclient> GRANT CONNECT TO user1 IDENTIFIED by '********';\n",
            "执行后查看 dba_users 表中 user1 用户的密码，会看到已更新为最新设置的密码。",
            "将 COMMENT ANY TABLE 权限授予角色 role1。",
            "GRANT COMMENT ANY TABLE TO role1;\n"
        ]
    },
    "INSERT": {
        "Title": [
            "INSERT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054289"
        ],
        "Category": [
            "DML"
        ],
        "Feature": "INSERT [hint_options] { single_table_insert | multi_table_insert | overwrite_table_insert};\n\nsingle_table_insert:\n    { INTO insert_table_clause opt_nologging '(' column_list ')' values_clause [{ RETURNING | RETURN } returning_exprs [into_clause]]\n    | INTO insert_table_clause opt_nologging '(' ')' values_clause [{ RETURNING | RETURN } returning_exprs [into_clause]]\n    | INTO insert_table_clause opt_nologging values_clause [{ RETURNING | RETURN } returning_exprs [into_clause]]\n    }\n\nopt_nologging:\n    { NOLOGGING | /*EMPTY*/ }\n\nreturning_exprs:\n    projection_col_name [,projection_col_name ...]\n\ninsert_into_clause:\n    { INTO into_var_list | BULK COLLECT INTO into_var_list}\n\ninto_var_list:\n    { USER_VARIABLE | ref_name } [, { USER_VARIABLE | ref_name }...]\n\nvalues_clause:\n    VALUES ({ expr | DEFAULT } [, { expr | DEFAULT } ]...  )\n\nmulti_table_insert:\n    { ALL { insert_into_clause [ values_clause ] [error_logging_clause] }\n    | conditional_insert_clause\n    } subquery\n\nconditional_insert_clause:\n    [ ALL | FIRST ]\n    WHEN condition\n    THEN insert_into_clause\n    [ values_clause ]\n    [ error_logging_clause ]\n    [ insert_into_clause [ values_clause ] [ error_logging_clause ] ]...\n    [ WHEN condition\n        THEN insert_into_clause\n        [ values_clause ]\n        [ error_logging_clause ]\n        [ insert_into_clause [ values_clause ] [ error_logging_clause ] ]...\n    ]...\n    [ ELSE insert_into_clause\n        [ values_clause ]\n        [ error_logging_clause ]\n        [ insert_into_clause [ values_clause ] [ error_logging_clause ] ]...\n    ]\n\nerror_logging_clause:\n    LOG ERRORS [ INTO [schema.] table_name ] [ (simple_expression) ] [ REJECT LIMIT { integer | UNLIMITED } ]\n\noverwrite_table_insert:\n    [/*+PARALLEL(N)*/] OVERWRITE table_name select_stmt\n",
        "Description": [
            "该语句用于添加一个或多个记录到表中。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nhint_options\n指定 Hint 选项，为可选项。更多使用 Hint 信息，参见 Hint 概述。OceanBase 数据库 Oracle 模式 INSERT INTO SELECT 语句支持 direct Hint 的启用旁路导入，格式为：/*+ direct(bool, int, load_mode)} enable_parallel_dml PARALLEL(N) */。 \n      \nbool：表示写入的数据是否需要排序，true 表示需要排序，false 表示不需要排序。\nint：表示最大容忍的错误行数。\nload_mode：可选参数，表示旁路导入的模式。取值须使用英文单引号包起来，取值如下： \n        \nfull：默认值，表示全量导入。\ninc：表示增量导入，支持 INSERT 和 IGNORE 语义。\ninc_replace：表示增量导入，但不检查主键是否重复，相当于 REPLACE 语义的增量导入。\n\nenable_parallel_dml parallel(N)：加载数据的并行度，N 默认为 4。 \n        \n说明\n一般情况下，enable_parallel_dml Hint 和 parallel Hint 必须配合使用才能开启并行 DML。不过，当目标表的 Schema 上指定了表级别的并行度时，仅需指定 enable_parallel_dml Hint。\n\n 更多使用 INSERT INTO 旁路导入的信息，参见 使用 INSERT INTO SELECT 语句旁路导入数据。 \n      \n注意\n在执行旁路导入任务的过程中，不建议同时进行 OceanBase 数据库的升级操作，因为这可能导致旁路导入任务失败。\n\n\n\nsingle_table_insert\n单表插入。\n\n\ninsert_table_clause\n指定的插入的表，可以是基表、可更新视图、特殊子查询。\n\n\nopt_nologging\n尽量减少插入时的日志信息。\n\n\ncolumn_list\n指定要插入的列名。\n\n\nreturning_exprs\n返回插入数据之后的投影列。\n\n\ninsert_into_clause\n将插入数据之后的列值插入到指定列表中。\n\n\nmulti_table_insert\n多表插入。\n\n\nconditional_insert_clause\n带条件的多表插入。 \n      \nALL：遍历所有匹配条件的分支，只要满足条件就会将数据插入对应的表。\nFIRST：找到第一个满足条件的分支后，将数据插入该分支对应的表，不会再继续检查剩余分支的条件是否满足。\n\n\n\nerror_logging_clause\n将 SQL 错误和受影响的行数列中的值保存在一个错误记录表。\n\n\noverwrite_table_insert\n用于将查询结果替换表中的现有数据，即该语句会先清空表中的旧数据，再将新数据批量写入到表中。有关使用 INSERT OVERWRITE SELECT 语句的示例信息，参见 插入数据 中的 使用 INSERT OVERWRITE SELECT 语句插入数据 章节。 \n      \n注意\n该语句无法在多行事务中操作。因此，为确保操作顺利进行，需先执行 SET autocommit = on; 命令开启自动提交事务。\n\n\n\nselect_stmt\n指定 SELECT 子句。有关查询语句的详细信息，参见 SIMPLE SELECT。\n\n\n",
            "\n注意\n特殊子查询指的类似于可更新视图对应的子查询，这类子查询不应该包含复杂的算子（比如 group by、distinct、window function 等）。\n"
        ],
        "Examples": [
            "obclient> CREATE TABLE tbl1(col1 INT PRIMARY KEY, col2 INT,col3 INT);\nQuery OK, 0 rows affected\n",
            "obclient> INSERT INTO tbl1 VALUES(1,2,3);\nQuery OK, 1 row affected\n\nobclient> SELECT * FROM tbl1;\n+------+------+------+\n| COL1 | COL2 | COL3 |\n+------+------+------+\n|    1 |    2 |    3 |\n+------+------+------+\n1 row in set\n",
            "obclient>INSERT INTO (SELECT * FROM tbl1) VALUES(1,2,3);\nQuery OK, 1 row affected\n\nobclient> SELECT * FROM tbl1;\n+----+------+------+\n| COL1 | COL2   | COL3   |\n+----+------+------+\n|  1 |    2 |    3 |\n+----+------+------+\n1 row in set\n",
            "obclient> INSERT INTO tbl1 VALUES(1,2,3) RETURNING col1;\n+------+\n| COL1 |\n+------+\n|    1 |\n+------+\n1 row in set\n\nobclient> SELECT * FROM tbl1;\n+------+------+------+\n| COL1 | COL2 | COL3 |\n+------+------+------+\n|    1 |    2 |    3 |\n+------+------+------+\n1 row in set\n",
            "obclient> INSERT ALL INTO tbl1 VALUES(1,1,1)\n                                    INTO tbl2 VALUES(2,2,2)\n                SELECT * FROM tbl3 WHERE ROWNUM< 2;\nQuery OK, 2 rows affected\nRecords: 2  Duplicates: 0  Warnings: 0\n\nobclient> SELECT * FROM tbl1;\n+------+------+------+\n| COL1 | COL2 | COL3 |\n+------+------+------+\n|    1 |    1 |    1 |\n+------+------+------+\n1 row in set\n\nobclient> SELECT * FROM tbl2;\n+------+------+------+\n| COL1 | COL2 | COL3 |\n+------+------+------+\n|    2 |    2 |    2 |\n+------+------+------+\n1 row in set\n",
            "obclient> INSERT INTO tbl VALUES(1,2,3);\nQuery OK, 1 row affected\n\nobclient>INSERT ALL\n              WHEN col2 > 1 THEN INTO tbl1 VALUES(1,1,1)\n              WHEN col3 > 1 THEN INTO tbl2 VALUES(2,2,2)\n              ELSE INTO tbl1 VALUES(3,3,3) SELECT col2,col3 FROM tbl;\nQuery OK, 2 rows affected\nRecords: 2  Duplicates: 0  Warnings: 0\n\nobclient> SELECT * FROM tbl1;\n+----+------+------+\n| COL1 | COL2   | COL3   |\n+----+------+------+\n|  1 |    1 |    1 |\n+----+------+------+\n1 row in set\n\nobclient> SELECT * FROM tbl2;\n+----+------+------+\n| COL1 | COL2   | COL3   |\n+----+------+------+\n|  2 |    2 |    2 |\n+----+------+------+\n1 row in set\n",
            "obclient>INSERT INTO tbl VALUES(1,2,3);\nQuery OK, 1 row affected\n\nobclient>INSERT ALL\n              WHEN col2 > 1 THEN INTO tbl1 VALUES(1,1,1) INTO tbl2 VALUES(4,4,4)\n              WHEN col3 > 1 THEN INTO tbl2 VALUES(2,2,2)\n              ELSE INTO tbl1 VALUES(3,3,3) SELECT col2,col3 FROM tbl;\nQuery OK, 3 rows affected\nRecords: 3  Duplicates: 0  Warnings: 0\n\nobclient> SELECT * FROM tbl1;\n+----+------+------+\n| COL1 | COL2   | COL3   |\n+----+------+------+\n|  1 |    1 |    1 |\n+----+------+------+\n1 row in set\n\nobclient> SELECT * FROM tbl2;\n+------+------+------+\n| COL1   | COL2   | COL3   |\n+------+------+------+\n|    4 |    4 |    4 |\n|    2 |    2 |    2 |\n+------+------+------+\n2 rows in set\n",
            "obclient [SYS]> INSERT /*+ direct(true, 0, 'inc_replace') enable_parallel_dml parallel(2) */ INTO tbl2 SELECT * FROM tbl1;\n",
            "Query OK, 8 rows affected\nRecords: 8  Duplicates: 0  Warnings: 0\n"
        ],
        "Detailed Examples": [
            "示例表及数据基于以下定义：",
            "obclient> CREATE TABLE tbl1(col1 INT PRIMARY KEY, col2 INT,col3 INT);\nQuery OK, 0 rows affected\n",
            "单表插入：向表 tbl1 中插入一行数据。",
            "obclient> INSERT INTO tbl1 VALUES(1,2,3);\nQuery OK, 1 row affected\n\nobclient> SELECT * FROM tbl1;\n+------+------+------+\n| COL1 | COL2 | COL3 |\n+------+------+------+\n|    1 |    2 |    3 |\n+------+------+------+\n1 row in set\n",
            "单表插入：直接向子查询中插入数据。",
            "obclient>INSERT INTO (SELECT * FROM tbl1) VALUES(1,2,3);\nQuery OK, 1 row affected\n\nobclient> SELECT * FROM tbl1;\n+----+------+------+\n| COL1 | COL2   | COL3   |\n+----+------+------+\n|  1 |    2 |    3 |\n+----+------+------+\n1 row in set\n",
            "单表插入：包含 RETURNING 子句。",
            "obclient> INSERT INTO tbl1 VALUES(1,2,3) RETURNING col1;\n+------+\n| COL1 |\n+------+\n|    1 |\n+------+\n1 row in set\n\nobclient> SELECT * FROM tbl1;\n+------+------+------+\n| COL1 | COL2 | COL3 |\n+------+------+------+\n|    1 |    2 |    3 |\n+------+------+------+\n1 row in set\n",
            "普通的多表插入：当表 tbl3 中有至少一行数据时，向表 tbl1 插入一行数据 (1,1,1)，向表 tbl2 插入一行数据 (2,2,2)。",
            "obclient> INSERT ALL INTO tbl1 VALUES(1,1,1)\n                                    INTO tbl2 VALUES(2,2,2)\n                SELECT * FROM tbl3 WHERE ROWNUM< 2;\nQuery OK, 2 rows affected\nRecords: 2  Duplicates: 0  Warnings: 0\n\nobclient> SELECT * FROM tbl1;\n+------+------+------+\n| COL1 | COL2 | COL3 |\n+------+------+------+\n|    1 |    1 |    1 |\n+------+------+------+\n1 row in set\n\nobclient> SELECT * FROM tbl2;\n+------+------+------+\n| COL1 | COL2 | COL3 |\n+------+------+------+\n|    2 |    2 |    2 |\n+------+------+------+\n1 row in set\n",
            "带条件的多表插入：使用 INSERT ALL，当表 tbl 中 col2 的值大于 1 时，向表 tbl1 中插入数据 (1,1,1)；当表 tbl 中 col3 的值大于 1 时，向表 tbl2 中插入数据 (2,2,2)；如果都不满足，则向表 tbl1 中插入数据 (3,3,3)。",
            "obclient> INSERT INTO tbl VALUES(1,2,3);\nQuery OK, 1 row affected\n\nobclient>INSERT ALL\n              WHEN col2 > 1 THEN INTO tbl1 VALUES(1,1,1)\n              WHEN col3 > 1 THEN INTO tbl2 VALUES(2,2,2)\n              ELSE INTO tbl1 VALUES(3,3,3) SELECT col2,col3 FROM tbl;\nQuery OK, 2 rows affected\nRecords: 2  Duplicates: 0  Warnings: 0\n\nobclient> SELECT * FROM tbl1;\n+----+------+------+\n| COL1 | COL2   | COL3   |\n+----+------+------+\n|  1 |    1 |    1 |\n+----+------+------+\n1 row in set\n\nobclient> SELECT * FROM tbl2;\n+----+------+------+\n| COL1 | COL2   | COL3   |\n+----+------+------+\n|  2 |    2 |    2 |\n+----+------+------+\n1 row in set\n",
            "带条件的多表插入：使用 INSERT FIRST，当表 tbl 中 col2 的值大于 1 时，向表 tbl1 中插入数据 (1,1,1)，向表 tbl2 中插入数据 (4,4,4)；当表 tbl 中 col3 的值大于 1 时，向表 tbl2 中插入数据 (2,2,2)；如果都不满足，则向表 tbl1 中插入数据 (3,3,3)。",
            "obclient>INSERT INTO tbl VALUES(1,2,3);\nQuery OK, 1 row affected\n\nobclient>INSERT ALL\n              WHEN col2 > 1 THEN INTO tbl1 VALUES(1,1,1) INTO tbl2 VALUES(4,4,4)\n              WHEN col3 > 1 THEN INTO tbl2 VALUES(2,2,2)\n              ELSE INTO tbl1 VALUES(3,3,3) SELECT col2,col3 FROM tbl;\nQuery OK, 3 rows affected\nRecords: 3  Duplicates: 0  Warnings: 0\n\nobclient> SELECT * FROM tbl1;\n+----+------+------+\n| COL1 | COL2   | COL3   |\n+----+------+------+\n|  1 |    1 |    1 |\n+----+------+------+\n1 row in set\n\nobclient> SELECT * FROM tbl2;\n+------+------+------+\n| COL1   | COL2   | COL3   |\n+------+------+------+\n|    4 |    4 |    4 |\n|    2 |    2 |    2 |\n+------+------+------+\n2 rows in set\n",
            "通过 direct Hint 的 load_mode 参数来指定增量旁路导入。",
            "obclient [SYS]> INSERT /*+ direct(true, 0, 'inc_replace') enable_parallel_dml parallel(2) */ INTO tbl2 SELECT * FROM tbl1;\n",
            "返回结果如下：",
            "Query OK, 8 rows affected\nRecords: 8  Duplicates: 0  Warnings: 0\n"
        ]
    },
    "KILL": {
        "Title": [
            "KILL"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054306"
        ],
        "Category": [
            "DCL"
        ],
        "Feature": "KILL [CONNECTION | QUERY] 'session_id'\n",
        "Description": [
            "该语句用来终止一个会话。",
            "\n说明\n如果用户拥有 PROCESS 权限，则用户可以查看所有会话。如果用户拥有 SUPER 权限，用户可以终止所有会话和 SQL 语句。否则，用户只能查看和终止自己的会话和 SQL 语句。\n"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nKILL CONNECTION\n与不含修改符的 KILL 一样，可终止指定的 Client Session ID。\n\n\nKILL QUERY\n可终止连接当前正在执行的语句，但是会保持会话的连接状态。\n\n\nsession_id\n当前会话的 Client Session ID，该 ID 是会话在客户端中的唯一标识。可以通过 SHOW PROCESSLIST 或者 SHOW FULL PROCESSLIST 命令查询。\n\n\n"
        ],
        "Examples": [
            "obclient> SHOW PROCESSLIST;\n+------------+------+----------------------+------+---------+------+--------+------------------+\n| ID         | USER | HOST                 | DB   | COMMAND | TIME | STATE  | INFO             |\n+------------+------+----------------------+------+---------+------+--------+------------------+\n| 3221849635 | SYS  | 10.10.10.10:49142 | SYS  | Sleep   |  426 | SLEEP  | NULL             |\n| 3221656012 | SYS  | 10.10.10.10:57140 | SYS  | Sleep   |  426 | SLEEP  | NULL             |\n| 3221671483 | SYS  | 10.10.10.10:43154 | SYS  | Query   |    0 | ACTIVE | show processlist |\n+------------+------+----------------------+------+---------+------+--------+------------------+\n3 rows in set\n\nobclient> KILL 3221849635;\nQuery OK, 0 rows affected\n\nobclient> KILL QUERY 3221656012;\nQuery OK, 0 rows affected\n\nobclient> KILL CONNECTION 3221671483;\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "查询已连接的会话，再终止会话。",
            "obclient> SHOW PROCESSLIST;\n+------------+------+----------------------+------+---------+------+--------+------------------+\n| ID         | USER | HOST                 | DB   | COMMAND | TIME | STATE  | INFO             |\n+------------+------+----------------------+------+---------+------+--------+------------------+\n| 3221849635 | SYS  | 10.10.10.10:49142 | SYS  | Sleep   |  426 | SLEEP  | NULL             |\n| 3221656012 | SYS  | 10.10.10.10:57140 | SYS  | Sleep   |  426 | SLEEP  | NULL             |\n| 3221671483 | SYS  | 10.10.10.10:43154 | SYS  | Query   |    0 | ACTIVE | show processlist |\n+------------+------+----------------------+------+---------+------+--------+------------------+\n3 rows in set\n\nobclient> KILL 3221849635;\nQuery OK, 0 rows affected\n\nobclient> KILL QUERY 3221656012;\nQuery OK, 0 rows affected\n\nobclient> KILL CONNECTION 3221671483;\nQuery OK, 0 rows affected\n"
        ]
    },
    "LOAD DATA": {
        "Title": [
            "LOAD DATA"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054301"
        ],
        "Category": [
            "DCL"
        ],
        "Feature": "LOAD DATA\n    [/*+ PARALLEL(N) [load_batch_size(M)] [APPEND | direct(bool, int, [load_mode])] */]\n    [REMOTE_OSS | LOCAL] INFILE 'file_name'\n    INTO TABLE table_name\n    [{FIELDS | COLUMNS}\n        [TERMINATED BY 'string']\n        [[OPTIONALLY] ENCLOSED BY 'char']\n        [ESCAPED BY 'char']\n    ]\n    [LINES\n        [STARTING BY 'string']\n        [TERMINATED BY 'string']\n    ]\n    [IGNORE number {LINES | ROWS}]\n    [(column_name_var\n        [, column_name_var] ...)]\n\nload_mode:\n    'full' \n    | 'inc_replace'\n",
        "Description": [
            "该语句用于从外部导入数据。",
            "\n注意\n\n\n带有触发器（Trigger）的表禁止使用 LOAD DATA 语句。\n要从外部文件导入数据，您需要具有 FILE 权限及以下设置： \n     \n加载服务器端文件时，需要提前设置系统变量 secure_file_priv，配置导入或导出文件时可以访问的路径。\n加载客户端本地文件时，需要在启动 MySQL/OBClient 客户端时添加 --local-infile[=1] 选项来启用从本地文件系统加载数据的功能。\n\n\n\n",
            "OceanBase 数据库 LOAD DATA 语句支持加载以下输入文件：",
            "服务器端（OBServer 节点）文件：文件位于 OceanBase 数据库的 OBServer 节点上。可以使用 LOAD DATA INFILE 语句，将服务器端文件中加载数据到数据库表中。",
            "客户端（本地）文件：文件位于客户端本地文件系统中。可以使用 LOAD DATA LOCAL INFILE 语句，将客户端本地文件中的数据加载到数据库表中。",
            "OSS 文件：文件位于 OSS 文件系统。可以使用 LOAD DATA REMOTE_OSS INFILE 语句，将 OSS 文件中的数据加载到数据库表中。",
            "LOAD DATA 目前可以对 CSV 格式的文本文件进行导入，整个导入的过程可以分为以下的流程：",
            "解析文件：OceanBase 数据库会根据用户输入的文件名，读取文件中的数据，并且根据指定的并行度来决定并行或者串行解析输入文件中的数据。",
            "分发数据：由于 OceanBase 是分布式数据库，各个分区的数据可能分布在各个不同的 OBServer 节点，LOAD DATA 会对解析出来的数据进行计算，决定数据需要被发送到哪个 OBServer 节点。",
            "插入数据：当目标 OBServer 节点收到数据后，在本地执行 INSERT 操作将数据插入到对应的分区当中。",
            "要从外部文件导入数据，您需要具有 FILE 权限。您可以使用 GRANT FILE ON *.* TO $user_name; 语句进行授权，其中，$user_name 是需要执行 LOAD DATA 命令的用户。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nparallel(N)\n加载数据的并行度，N 默认为 4。\n\n\nload_batch_size(M)\n指定每次插入的批量大小，M 默认为 100。推荐取值范围为 [100,1000]。\n\n\nAPPEND | direct()\n使用 Hint 启用旁路导入功能。 \n      \n注意\n在执行旁路导入任务的过程中，不建议同时进行 OceanBase 数据库的升级操作，因为这可能导致旁路导入任务失败。\n\n\nAPPEND Hint 默认等同于使用的 direct(true, 0)，同时可以实现在线收集统计信息（GATHER_OPTIMIZER_STATISTICS Hint）的功能。\ndirect() 参数解释如下： \n        \nbool：表示写入的数据是否需要排序，true 表示需要排序，false 表示不需要排序。\nint：表示最大容忍的错误行数。\nload_mode：可选参数，表示旁路导入的模式。取值须使用英文单引号包起来，取值如下： \n          \nfull：默认值，表示全量导入。\ninc：表示增量导入，支持 INSERT 和 IGNORE 语义。\ninc_replace：表示增量导入，但不检查主键是否重复，相当于 REPLACE 语义的增量导入。\n\n\n 更多使用 LOAD DATA 旁路导入的信息，参见 使用 LOAD DATA 语句旁路导入数据/文件。\n\n\nREMOTE_OSS | LOCAL\n可选项， \n      \nREMOTE_OSS 用于指定是否从 OSS 文件系统读取数据。 \n        \n注意\n如果使用了此参数，file_name 必须是一个 OSS 的地址。\n\nLOCAL 用于指定是否从客户端的本地文件系统读取数据。如果不使用 LOCAL 参数，那么将从服务器端（OBServer 节点）的文件系统读取数据。\n\n\n\nfile_name\n指定输入文件的路径和文件名。 file_name 有以下格式： \n      \n导入文件在 OBServer 节点或客户端：/$PATH/$FILENAME。\n导入文件在 OSS 上：oss://$PATH/$FILENAME/?host=$HOST&access_id=$ACCESS_ID&access_key=$ACCESSKEY。\n 参数解释如下： \n      \n$PATH：指定了存储桶中的文件路径，表示文件所在的目录。\n$FILENAME：指定了文件的名称，表示要访问的具体文件。\n$HOST：指定了 OSS 服务的主机名或 CDN 加速的域名，即要访问的 OSS 服务的地址。\n$ACCESS_ID：指定了访问 OSS 服务所需的 Access Key ID，用于身份验证。\n$ACCESSKEY：指定了访问 OSS 服务所需的 Access Key Secret，用于身份验证。\n\n\n说明\n在导入 OSS 上的文件时，需要确保以下信息：\n\n确保访问 OSS 存储桶和文件的权限。你需要拥有足够的权限来读取指定的存储桶和文件。这通常需要在 OSS 控制台或通过 OSS API 设置访问权限，并将访问密钥（Access Key ID 和 Access Key Secret）配置为具有适当权限的凭据。\n确保数据库服务器可以通过网络连接到指定的 $HOST 地址，以访问 OSS 服务。如果使用的是 OSS 服务的 CDN 加速域名，还需要确保 CDN 配置正确，并且网络连接正常。\n\n\n\n\n\ntable_name\n导入数据的表的名称，支持分区表与非分区表。\n\n\nFIELDS | COLUMNS\n指定字段的格式。 \n      \nENCLOSED BY：设置导出值的修饰符。\nTERMINATED BY：设置导出列的结束符。\nESCAPED BY：设置导出值忽略的字符。\n\n\n\nLINES STARTING BY\n指定行起始符。\n\n\nLINES TERMINATED BY\n指定行结束符。\n\n\nIGNORES number { LINES | ROWS }\n忽略前几行，LINES 表示文件的前几行，ROWS 表示由字段分隔符指定的前几行数据。缺省时，会将输入文件中的字段逐个与表中的列进行对应。 如果输入文件中并没有包含所有的列，那么缺少的列按照以下的规则会被默认填充： \n      \n字符类型：空字符串。\n数值类型：0。\n日期类型：0000-00-00。\n\n\n\ncolumn_name_var\n指定导入的列名。\n\n\n"
        ],
        "Examples": [
            "obclient> SET GLOBAL secure_file_priv = \"/\";\n",
            "obclinet> \\q\n",
            "Bye\n",
            "obclient> LOAD DATA INFILE '/home/admin/test.csv' INTO TABLE t1;\n",
            "LOAD DATA /*+ PARALLEL(4) APPEND */ INFILE '/home/admin/test.csv' INTO TABLE t1;\n",
            "LOAD DATA /*+ direct(true,1024) parallel(16) */ REMOTE_OSS INFILE 'oss://antsys-oceanbasebackup/backup_rd/xiaotao.ht/lineitem2.tbl?host=***.oss-cdn.***&access_id=***&access_key=***' INTO TABLE tbl1 FIELDS TERMINATED BY ',';\n",
            "obclient --local-infile -hxxx.xxx.xxx.xxx -P2881 -usys@oracle001 -p******\n",
            "Welcome to the OceanBase.  Commands end with ; or \\g.\nYour OceanBase connection id is 3221548006\nServer version: OceanBase 4.2.2.0 (r100000032024010510-75c47d4be18a399e13c5309de1a81da5caf4e7c0) (Built Jan  5 2024 10:17:55)\n\nCopyright (c) 2000, 2018, OceanBase and/or its affiliates. All rights reserved.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nobclient [SYS]>\n",
            "obclient [SYS]> LOAD DATA LOCAL INFILE '/home/admin/test_data/tbl1.csv' INTO TABLE tbl1 FIELDS TERMINATED BY ',';\n",
            "Query OK, 3 rows affected\nRecords: 3  Deleted: 0  Skipped: 0  Warnings: 0\n"
        ],
        "Detailed Examples": [
            "示例一：从服务器端（OBServer 节点）文件导入数据",
            "设置全局安全路径。",
            "\n注意\n由于安全原因，设置系统变量 secure_file_priv 时，只能通过本地 Socket 连接数据库执行修改该全局变量的 SQL 语句。更多信息，请参见 secure_file_priv。\n",
            "obclient> SET GLOBAL secure_file_priv = \"/\";\n",
            "退出登录。",
            "\n说明\n由于 secure_file_priv 是 GLOBAL 变量，所以需要执行 \\q 退出使之生效。\n",
            "obclinet> \\q\n",
            "返回结果如下：",
            "Bye\n",
            "重连数据库后，使用 LOAD DATA 语句导入数据。",
            "\n普通导入。 obclient> LOAD DATA INFILE '/home/admin/test.csv' INTO TABLE t1;\n\n使用 APPEND Hint 启用旁路导入。 LOAD DATA /*+ PARALLEL(4) APPEND */ INFILE '/home/admin/test.csv' INTO TABLE t1;\n\n",
            "普通导入。",
            "obclient> LOAD DATA INFILE '/home/admin/test.csv' INTO TABLE t1;\n",
            "使用 APPEND Hint 启用旁路导入。",
            "LOAD DATA /*+ PARALLEL(4) APPEND */ INFILE '/home/admin/test.csv' INTO TABLE t1;\n",
            "示例二：从 OSS 文件导入数据",
            "使用 direct(bool, int) Hint 启用旁路导入功能，导入文件可在 OSS 上。",
            "LOAD DATA /*+ direct(true,1024) parallel(16) */ REMOTE_OSS INFILE 'oss://antsys-oceanbasebackup/backup_rd/xiaotao.ht/lineitem2.tbl?host=***.oss-cdn.***&access_id=***&access_key=***' INTO TABLE tbl1 FIELDS TERMINATED BY ',';\n",
            "示例三：从客户端（本地）文件导入数据",
            "使用以下语句，从本地文件导入数据至 OceanBase 数据库表中。",
            "打开终端或命令提示符窗口，并输入以下命令来启动客户端。",
            "obclient --local-infile -hxxx.xxx.xxx.xxx -P2881 -usys@oracle001 -p******\n",
            "返回结果如下：",
            "Welcome to the OceanBase.  Commands end with ; or \\g.\nYour OceanBase connection id is 3221548006\nServer version: OceanBase 4.2.2.0 (r100000032024010510-75c47d4be18a399e13c5309de1a81da5caf4e7c0) (Built Jan  5 2024 10:17:55)\n\nCopyright (c) 2000, 2018, OceanBase and/or its affiliates. All rights reserved.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nobclient [SYS]>\n",
            "\n注意\n为了使用 LOAD DATA LOCAL INFILE 功能，请使用 V2.2.4 或之后的版本的 OBClient 客户端。\n",
            "在客户端中，执行 LOAD DATA LOCAL INFILE 语句来加载本地数据文件。",
            "obclient [SYS]> LOAD DATA LOCAL INFILE '/home/admin/test_data/tbl1.csv' INTO TABLE tbl1 FIELDS TERMINATED BY ',';\n",
            "返回结果如下：",
            "Query OK, 3 rows affected\nRecords: 3  Deleted: 0  Skipped: 0  Warnings: 0\n"
        ]
    },
    "LOCK TABLE": {
        "Title": [
            "LOCK TABLE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054303"
        ],
        "Category": [
            "DCL"
        ],
        "Feature": "LOCK TABLE [ schema. ]table_name\n\n  [ partition_extension_clause]\n    [, [ schema. ] table_name\n      [ partition_extension_clause ]\n     ]...\n  IN lock_mode MODE\n  [ NOWAIT  \n   | WAIT integer\n  ] ;\n\npartition_extension_clause:\n\n    PARTITION (partition_name, ...)\n  | SUBPARTITION (subpartition_name, ...)\n\n",
        "Description": [
            "该语句根据指定模式锁定一个或多个表、表的分区或者二级分区。",
            "上锁的表将保持上锁状态，直至事务提交、回滚或者回滚到上锁前的 Savepoint。",
            "\n说明\n要锁定的表必须在用户自己的 Schema 中，或者用户必须具有 LOCK ANY TABLE 系统权限。\n"
        ],
        "Illustration": [],
        "Examples": [
            "CREATE TABLE TEST(col1 INT, col2 INT)\nPARTITION BY RANGE (col1)\nSUBPARTITION BY RANGE (col2)\n  SUBPARTITION TEMPLATE\n    (\n    SUBPARTITION sp0 VALUES LESS THAN (3),\n    SUBPARTITION sp1 VALUES LESS THAN (6),\n    SUBPARTITION sp2 VALUES LESS THAN (9)\n    )\n(\n  PARTITION p0 VALUES LESS THAN (100),\n  PARTITION p1 VALUES LESS THAN (200),\n  PARTITION p2 VALUES LESS THAN (300)\n);\n",
            "obclient> LOCK TABLE test IN EXCLUSIVE MODE;\nQuery OK, 0 rows affected\n",
            "obclient> LOCK TABLE test PARTITION (p1) IN EXCLUSIVE MODE;\nQuery OK, 0 rows affected\n",
            "obclient> LOCK TABLE test SUBPARTITION (p1ssp1) IN EXCLUSIVE MODE;\nQuery OK, 0 rows affected\n",
            "obclient> LOCK TABLE test PARTITION (p1，p2) IN EXCLUSIVE MODE;\nQuery OK, 0 rows affected\n",
            "obclient> LOCK TABLE test SUBPARTITION (p0ssp1，p1ssp2) IN EXCLUSIVE MODE;\nQuery OK, 0 rows affected\n",
            "obclient> LOCK TABLE test PARTITION (p1, p2), test SUBPARTITION (p0ssp0, p0ssp1) IN EXCLUSIVE MODE;\nQuery OK, 0 rows affected\n",
            "obclient> LOCK TABLE test PARTITION (p0, p3) IN EXCLUSIVE MODE;\nORA-02149: Specified partition does not exist\n",
            "# conn1\nobclient> START TRANSACTION;\nQuery OK, 0 rows affected\nobclient> LOCK TABLE test IN EXCLUSIVE MODE;\nQuery OK, 0 rows affected\n\n# conn2\nobclient> START TRANSACTION;\nQuery OK, 0 rows affected\nobclient> SET ob_trx_timeout = 10000000000; # 10000 秒\nQuery OK, 0 rows affected\nobclient> SET ob_query_timeout = 1000000;   # 1 秒\nQuery OK, 0 rows affected\n\n# 请求客户端在 1 秒后将报出锁冲突的错误\nobclient> LOCK TABLE test IN SHARE MODE;\nORA-30006: resource busy; acquire with WAIT timeout expired\n",
            "# conn1\nobclient> START TRANSACTION;\nQuery OK, 0 rows affected\nobclient> LOCK TABLE test IN EXCLUSIVE MODE;\nQuery OK, 0 rows affected\n\n# conn2\nobclient> START TRANSACTION;\nQuery OK, 0 rows affected\nobclient> LOCK TABLE test IN SHARE MODE NOWAIT;\nORA-00054: resource busy and acquire with NOWAIT specified or timeout expired\n",
            "# conn1\nobclient> START TRANSACTION;\nQuery OK, 0 rows affected\nobclient> LOCK TABLE test IN EXCLUSIVE MODE;\nQuery OK, 0 rows affected\n\n# conn2\nobclient> START TRANSACTION;\nQuery OK, 0 rows affected\n\n# 请求客户端在 1 秒后将报出锁冲突的错误\nobclient> LOCK TABLE test IN SHARE MODE WAIT 1;\nORA-00054: resource busy and acquire with NOWAIT specified or timeout expired\n"
        ],
        "Detailed Examples": [
            "如下示例为创建二级分区表并对其执行分区上锁操作。",
            "创建二级分区表 test。其中，由 SUBPARTITION TEMPLATE 生成的二级分区名称为一级分区名称 + ‘s’ + 二级分区模板名称，例如，p0 分区有二级分区 p0ssp0，p0ssp1 和 p0ssp2。",
            "CREATE TABLE TEST(col1 INT, col2 INT)\nPARTITION BY RANGE (col1)\nSUBPARTITION BY RANGE (col2)\n  SUBPARTITION TEMPLATE\n    (\n    SUBPARTITION sp0 VALUES LESS THAN (3),\n    SUBPARTITION sp1 VALUES LESS THAN (6),\n    SUBPARTITION sp2 VALUES LESS THAN (9)\n    )\n(\n  PARTITION p0 VALUES LESS THAN (100),\n  PARTITION p1 VALUES LESS THAN (200),\n  PARTITION p2 VALUES LESS THAN (300)\n);\n",
            "对整个表 test 上互斥锁。",
            "obclient> LOCK TABLE test IN EXCLUSIVE MODE;\nQuery OK, 0 rows affected\n",
            "对表 test 的一级分区 p1 上互斥锁。",
            "obclient> LOCK TABLE test PARTITION (p1) IN EXCLUSIVE MODE;\nQuery OK, 0 rows affected\n",
            "对表 test 的二级分区 p1ssp1 上互斥锁。",
            "obclient> LOCK TABLE test SUBPARTITION (p1ssp1) IN EXCLUSIVE MODE;\nQuery OK, 0 rows affected\n",
            "对表 test 的多个分区上互斥锁。",
            "obclient> LOCK TABLE test PARTITION (p1，p2) IN EXCLUSIVE MODE;\nQuery OK, 0 rows affected\n",
            "对表 test 的多个二级分区上互斥锁。",
            "obclient> LOCK TABLE test SUBPARTITION (p0ssp1，p1ssp2) IN EXCLUSIVE MODE;\nQuery OK, 0 rows affected\n",
            "对表 test 的多个分区和二级分区上互斥锁。",
            "obclient> LOCK TABLE test PARTITION (p1, p2), test SUBPARTITION (p0ssp0, p0ssp1) IN EXCLUSIVE MODE;\nQuery OK, 0 rows affected\n",
            "对表 test 不存在的分区上互斥锁。如下示例中 p3 分区不存在，但是 p0 分区也不会上锁成功，整条语句将回滚。",
            "obclient> LOCK TABLE test PARTITION (p0, p3) IN EXCLUSIVE MODE;\nORA-02149: Specified partition does not exist\n",
            "在两个客户端上分别对表 test 上锁，其中持锁客户端上互斥锁，请求锁客户端上共享锁。 当 LOCK TABLE 语句不设置 WAIT N/NOWAIT 关键字时，其超时时间将取决于语句超时时间和事务超时时间的最小值，在该示例中即为 1 秒后将报出锁冲突的错误。",
            "# conn1\nobclient> START TRANSACTION;\nQuery OK, 0 rows affected\nobclient> LOCK TABLE test IN EXCLUSIVE MODE;\nQuery OK, 0 rows affected\n\n# conn2\nobclient> START TRANSACTION;\nQuery OK, 0 rows affected\nobclient> SET ob_trx_timeout = 10000000000; # 10000 秒\nQuery OK, 0 rows affected\nobclient> SET ob_query_timeout = 1000000;   # 1 秒\nQuery OK, 0 rows affected\n\n# 请求客户端在 1 秒后将报出锁冲突的错误\nobclient> LOCK TABLE test IN SHARE MODE;\nORA-30006: resource busy; acquire with WAIT timeout expired\n",
            "在两个客户端上分别对表 test 上表锁，其中持锁客户端上互斥锁，请求锁客户端上共享锁，并使用 NOWAIT 关键字。 当 LOCK TABLE 语句设置了 NOWAIT 关键字后，如果遇到表锁冲突将会立即报错，并在报错信息中体现“NOWAIT”信息。该报错信息与语句不设置 WAIT N/NOWAIT 关键字不同。",
            "# conn1\nobclient> START TRANSACTION;\nQuery OK, 0 rows affected\nobclient> LOCK TABLE test IN EXCLUSIVE MODE;\nQuery OK, 0 rows affected\n\n# conn2\nobclient> START TRANSACTION;\nQuery OK, 0 rows affected\nobclient> LOCK TABLE test IN SHARE MODE NOWAIT;\nORA-00054: resource busy and acquire with NOWAIT specified or timeout expired\n",
            "在两个客户端上分别对表 test 上表锁，其中持锁客户端上互斥锁，请求锁客户端上共享锁，并使用 WAIT N 关键字。 当 LOCK TABLE 语句设置了 WAIT N 关键字后，如果遇到表锁冲突将会等待 N 秒，在 N 秒后未解锁将报错，并在报错信息中体现“timeout expired”信息。该报错信息与语句不设置 WAIT N/NOWAIT 关键字不同。",
            "# conn1\nobclient> START TRANSACTION;\nQuery OK, 0 rows affected\nobclient> LOCK TABLE test IN EXCLUSIVE MODE;\nQuery OK, 0 rows affected\n\n# conn2\nobclient> START TRANSACTION;\nQuery OK, 0 rows affected\n\n# 请求客户端在 1 秒后将报出锁冲突的错误\nobclient> LOCK TABLE test IN SHARE MODE WAIT 1;\nORA-00054: resource busy and acquire with NOWAIT specified or timeout expired\n"
        ]
    },
    "MAJOR 和 MINOR": {
        "Title": [
            "MAJOR 和 MINOR"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054339"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "ALTER SYSTEM merge_action;\n\nmerge_action:\n      MAJOR FREEZE [TABLET_ID = tablet_id]\n    | MINOR FREEZE [TABLET_ID = tablet_id]\n    | {SUSPEND | RESUME} MERGE\n    | CLEAR MERGE ERROR\n",
        "Description": [
            "该语句用于普通租户发起自身的存储层合并或转储。手动合并与转储支持租户级别和分区级别。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nMAJOR FREEZE\n发起每日合并。说明 用户租户只能合并自己。\n\n\nMINOR FREEZE\n发起转储。 说明 用户租户只能转储自己。\n\n\n{SUSPEND | RESUME} MERGE\n暂停或恢复每日合并。说明 用户租户只能暂停或恢复自己的每日合并。\n\n\nCLEAR MERGE ERROR\n清理合并出错的标记。说明 用户租户只能清理合并自己的出错标记。\n\n\nTABLET_ID\n指定分区转储。\n\n\n"
        ],
        "Examples": [
            "obclient> ALTER SYSTEM MAJOR FREEZE;\nQuery OK, 0 rows affected\n",
            "obclient> ALTER SYSTEM MAJOR FREEZE TABLET_ID = 5;\nQuery OK, 0 rows affected\n",
            "obclient> ALTER SYSTEM SUSPEND MERGE;\nQuery OK, 0 rows affected\n",
            "obclient> ALTER SYSTEM RESUME MERGE;\nQuery OK, 0 rows affected\n",
            "obclient> ALTER SYSTEM CLEAR MERGE ERROR;\nQuery OK, 0 rows affected\n",
            "obclient> ALTER SYSTEM MINOR FREEZE;\nQuery OK, 0 rows affected\n",
            "obclient> ALTER SYSTEM MINOR FREEZE TABLET_ID = 5;\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "存储层合并相关的示例",
            "普通租户发起自身的每日合并。",
            "obclient> ALTER SYSTEM MAJOR FREEZE;\nQuery OK, 0 rows affected\n",
            "普通租户发起分区级别的每日合并。",
            "obclient> ALTER SYSTEM MAJOR FREEZE TABLET_ID = 5;\nQuery OK, 0 rows affected\n",
            "暂停普通租户自身的每日合并。",
            "obclient> ALTER SYSTEM SUSPEND MERGE;\nQuery OK, 0 rows affected\n",
            "恢复普通租户自身的每日合并。",
            "obclient> ALTER SYSTEM RESUME MERGE;\nQuery OK, 0 rows affected\n",
            "清理合并普通租户自身的出错标记。",
            "obclient> ALTER SYSTEM CLEAR MERGE ERROR;\nQuery OK, 0 rows affected\n",
            "存储层转储的示例",
            "普通租户发起自身的转储。",
            "obclient> ALTER SYSTEM MINOR FREEZE;\nQuery OK, 0 rows affected\n",
            "普通租户发起分区级别的转储。",
            "obclient> ALTER SYSTEM MINOR FREEZE TABLET_ID = 5;\nQuery OK, 0 rows affected\n"
        ]
    },
    "MERGE": {
        "Title": [
            "MERGE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054288"
        ],
        "Category": [
            "DML"
        ],
        "Feature": "MERGE [hint_options] INTO target_table_name [opt_alias]\n    USING source_table_name [opt_alias]\n    ON (expr)\n    [merge_update_clause] [merge_insert_clause]\n\nmerge_update_clause:\n    WHEN MATCHED THEN UPDATE SET update_asgn_list [WHERE expr] [DELETE WHERE expr]\n\nmerge_insert_clause:\n    WHEN NOT MATCHED THEN INSERT opt_insert_columns VALUES '(' insert_vals ')' [WHERE expr]\n",
        "Description": [
            "该语句用来根据一张源表更新一张目标表的数据，可以对目标表进行插入、更新或者删除。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nhint_options\n指定 Hint 选项，为可选项。\n\n\ntarget_table_name\n指定要更新或插入目标表的表名。\n\n\nsource_table_name\n指定要更新或插入的数据来源的表名。\n\n\nON (expr)\n源表和目标表的连接条件。\n\n\nupdate_asgn_list\n更新语句的赋值操作。\n\n\nWHERE expr\n触发更新、删除或者插入操作时的需要满足的条件。\n\n\n"
        ],
        "Examples": [
            "obclient> CREATE TABLE tbl1 (col1 INT, col2 INT);\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2 (col1 INT, col2 INT);\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO tbl1 VALUES(0, 0),(1, null),(2, null);\nQuery OK, 3 row affected\n\nobclient> INSERT INTO tbl2 VALUES(1, 1),(2, 20),(3, 3),(4, 40);\nQuery OK, 4 row affected\n\nobclient> SELECT * FROM tbl1;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    0 |    0 |\n|    1 | NULL |\n|    2 | NULL |\n+------+------+\n3 rows in set\n\nobclient> SELECT * FROM tbl2;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    1 |    1 |\n|    2 |   20 |\n|    3 |    3 |\n|    4 |   40 |\n+------+------+\n4 rows in set\n",
            "obclient>MERGE INTO tbl1 USING tbl2 ON (tbl1.col1 = tbl2.col1)\n       WHEN MATCHED THEN UPDATE SET tbl1.col2 = tbl2.col2 WHERE tbl1.col2 IS NULL DELETE\n       WHERE tbl1.col2 >= 10\n       WHEN NOT MATCHED THEN INSERT VALUES(tbl2.col1, tbl2.col2)\n       WHERE tbl2.col2 < 10;\nQuery OK, 3 rows affected\n\nobclient> SELECT * FROM tbl1;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    0 |    0 |\n|    1 |    1 |\n|    3 |    3 |\n+------+------+\n3 rows in set\n"
        ],
        "Detailed Examples": [
            "示例中的表和数据基于以下定义：",
            "obclient> CREATE TABLE tbl1 (col1 INT, col2 INT);\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2 (col1 INT, col2 INT);\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO tbl1 VALUES(0, 0),(1, null),(2, null);\nQuery OK, 3 row affected\n\nobclient> INSERT INTO tbl2 VALUES(1, 1),(2, 20),(3, 3),(4, 40);\nQuery OK, 4 row affected\n\nobclient> SELECT * FROM tbl1;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    0 |    0 |\n|    1 | NULL |\n|    2 | NULL |\n+------+------+\n3 rows in set\n\nobclient> SELECT * FROM tbl2;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    1 |    1 |\n|    2 |   20 |\n|    3 |    3 |\n|    4 |   40 |\n+------+------+\n4 rows in set\n",
            "根据 tbl2 的数据更新 tbl1 的数据：",
            "如果 tbl1.col1 在 tbl2 中能够找到 tbl1.col1 取值相同的行，如果 tbl1.col2 取值为空，那么使用 tbl2.col2 更新 tbl1.col2；如果更新之后 tbl1.col2 >= 10，那么删除该行。",
            "如果 tbl2.col1 在 tbl1 中找不到取值相同的行，将 tbl2 中的这行插入到 tbl1 中，且只插入满足 tbl2.col2 < 10 的行。",
            "obclient>MERGE INTO tbl1 USING tbl2 ON (tbl1.col1 = tbl2.col1)\n       WHEN MATCHED THEN UPDATE SET tbl1.col2 = tbl2.col2 WHERE tbl1.col2 IS NULL DELETE\n       WHERE tbl1.col2 >= 10\n       WHEN NOT MATCHED THEN INSERT VALUES(tbl2.col1, tbl2.col2)\n       WHERE tbl2.col2 < 10;\nQuery OK, 3 rows affected\n\nobclient> SELECT * FROM tbl1;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    0 |    0 |\n|    1 |    1 |\n|    3 |    3 |\n+------+------+\n3 rows in set\n"
        ]
    },
    "PURGE": {
        "Title": [
            "PURGE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054293"
        ],
        "Category": [
            "DML"
        ],
        "Feature": "PURGE  { {TABLE object_name | INDEX object_name }\n| RECYCLEBIN\n};\n",
        "Description": [
            "该语句用来删除回收站中的表、索引或删除回收站中的全部内容。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nobject_name\n指定要删除的表或索引在回收站中的名称，不支持直接指定表或索引名称。 说明\n\n目前直接删除索引，索引不会进入回收站。\n如果直接删除包含索引的表，那么表和索引都会进入回收站。当删除回收站中的表时，表关联的索引会一起被删除。\n\n\n\nRECYCLEBIN\n清空回收站。 注意 PURGE RECYCLEBIN 会清除回收站中的全部内容，操作时请谨慎。\n\n\n"
        ],
        "Examples": [
            "obclient> CREATE TABLE tbl1(col1 INT,col2 INT);\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2(col1 INT,col2 INT);\nQuery OK, 0 rows affected\n\nobclient> CREATE INDEX tbl1_idx1 ON tbl1(col1);\nQuery OK, 0 rows affected\n\nobclient> CREATE INDEX tbl2_idx2 ON tbl2(col1);\nQuery OK, 0 rows affected\n\nobclient> DROP TABLE tbl1;\nQuery OK, 0 rows affected\n\nobclient> DROP TABLE tbl2;\nQuery OK, 0 rows affected\n\nobclient> SHOW RECYCLEBIN;\n+-----------------------------------+----------------------------------+-------+------------------------------+\n| OBJECT_NAME                       | ORIGINAL_NAME                    | TYPE  | CREATETIME                   |\n+-----------------------------------+----------------------------------+-------+------------------------------+\n| RECYCLE_$_100004_1634626847891416 | __idx_1101710651081601_TBL1_IDX1 | INDEX | 19-OCT-21 03.00.47.891270 PM |\n| RECYCLE_$_100004_1634626847895656 | TBL1                             | TABLE | 19-OCT-21 03.00.47.895431 PM |\n| RECYCLE_$_100004_1634626853379432 | __idx_1101710651081602_TBL2_IDX2 | INDEX | 19-OCT-21 03.00.53.378871 PM |\n| RECYCLE_$_100004_1634626853383304 | TBL2                             | TABLE | 19-OCT-21 03.00.53.383100 PM |\n+-----------------------------------+----------------------------------+-------+------------------------------+\n4 rows in set\n",
            "obclient> PURGE INDEX RECYCLE_$_100004_1634626847891416;\nQuery OK, 0 rows affected\n\nobclient> SHOW RECYCLEBIN;\n+-----------------------------------+----------------------------------+-------+------------------------------+\n| OBJECT_NAME                       | ORIGINAL_NAME                    | TYPE  | CREATETIME                   |\n+-----------------------------------+----------------------------------+-------+------------------------------+\n| RECYCLE_$_100004_1634626847895656 | TBL1                             | TABLE | 19-OCT-21 03.00.47.895431 PM |\n| RECYCLE_$_100004_1634626853379432 | __idx_1101710651081602_TBL2_IDX2 | INDEX | 19-OCT-21 03.00.53.378871 PM |\n| RECYCLE_$_100004_1634626853383304 | TBL2                             | TABLE | 19-OCT-21 03.00.53.383100 PM |\n+-----------------------------------+----------------------------------+-------+------------------------------+\n3 rows in set\n",
            "obclient> PURGE TABLE RECYCLE_$_100004_1634626853383304;\nQuery OK, 0 rows affected\n\nobclient> SHOW RECYCLEBIN;\n+-----------------------------------+---------------+-------+------------------------------+\n| OBJECT_NAME                       | ORIGINAL_NAME | TYPE  | CREATETIME                   |\n+-----------------------------------+---------------+-------+------------------------------+\n| RECYCLE_$_100004_1634626847895656 | TBL1          | TABLE | 19-OCT-21 03.00.47.895431 PM |\n+-----------------------------------+---------------+-------+------------------------------+\n1 row in set\n",
            "obclient> PURGE RECYCLEBIN;\nQuery OK, 0 rows affected\n\nobclient> SHOW RECYCLEBIN;\nEmpty set\n"
        ],
        "Detailed Examples": [
            "示例表及数据基于以下定义：",
            "obclient> CREATE TABLE tbl1(col1 INT,col2 INT);\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2(col1 INT,col2 INT);\nQuery OK, 0 rows affected\n\nobclient> CREATE INDEX tbl1_idx1 ON tbl1(col1);\nQuery OK, 0 rows affected\n\nobclient> CREATE INDEX tbl2_idx2 ON tbl2(col1);\nQuery OK, 0 rows affected\n\nobclient> DROP TABLE tbl1;\nQuery OK, 0 rows affected\n\nobclient> DROP TABLE tbl2;\nQuery OK, 0 rows affected\n\nobclient> SHOW RECYCLEBIN;\n+-----------------------------------+----------------------------------+-------+------------------------------+\n| OBJECT_NAME                       | ORIGINAL_NAME                    | TYPE  | CREATETIME                   |\n+-----------------------------------+----------------------------------+-------+------------------------------+\n| RECYCLE_$_100004_1634626847891416 | __idx_1101710651081601_TBL1_IDX1 | INDEX | 19-OCT-21 03.00.47.891270 PM |\n| RECYCLE_$_100004_1634626847895656 | TBL1                             | TABLE | 19-OCT-21 03.00.47.895431 PM |\n| RECYCLE_$_100004_1634626853379432 | __idx_1101710651081602_TBL2_IDX2 | INDEX | 19-OCT-21 03.00.53.378871 PM |\n| RECYCLE_$_100004_1634626853383304 | TBL2                             | TABLE | 19-OCT-21 03.00.53.383100 PM |\n+-----------------------------------+----------------------------------+-------+------------------------------+\n4 rows in set\n",
            "删除回收站中表 tbl1 的索引。",
            "obclient> PURGE INDEX RECYCLE_$_100004_1634626847891416;\nQuery OK, 0 rows affected\n\nobclient> SHOW RECYCLEBIN;\n+-----------------------------------+----------------------------------+-------+------------------------------+\n| OBJECT_NAME                       | ORIGINAL_NAME                    | TYPE  | CREATETIME                   |\n+-----------------------------------+----------------------------------+-------+------------------------------+\n| RECYCLE_$_100004_1634626847895656 | TBL1                             | TABLE | 19-OCT-21 03.00.47.895431 PM |\n| RECYCLE_$_100004_1634626853379432 | __idx_1101710651081602_TBL2_IDX2 | INDEX | 19-OCT-21 03.00.53.378871 PM |\n| RECYCLE_$_100004_1634626853383304 | TBL2                             | TABLE | 19-OCT-21 03.00.53.383100 PM |\n+-----------------------------------+----------------------------------+-------+------------------------------+\n3 rows in set\n",
            "删除回收站中的表 tbl2。",
            "obclient> PURGE TABLE RECYCLE_$_100004_1634626853383304;\nQuery OK, 0 rows affected\n\nobclient> SHOW RECYCLEBIN;\n+-----------------------------------+---------------+-------+------------------------------+\n| OBJECT_NAME                       | ORIGINAL_NAME | TYPE  | CREATETIME                   |\n+-----------------------------------+---------------+-------+------------------------------+\n| RECYCLE_$_100004_1634626847895656 | TBL1          | TABLE | 19-OCT-21 03.00.47.895431 PM |\n+-----------------------------------+---------------+-------+------------------------------+\n1 row in set\n",
            "清空回收站。",
            "obclient> PURGE RECYCLEBIN;\nQuery OK, 0 rows affected\n\nobclient> SHOW RECYCLEBIN;\nEmpty set\n"
        ]
    },
    "RENAME": {
        "Title": [
            "RENAME"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054354"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "RENAME obj_name TO new_obj_name;\n",
        "Description": [
            "该语句用来对表、视图、私有同义词或序列进行重命名。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nobj_name\n原对象名。\n\n\nnew_obj_name\n新对象名。新对象名不能是已被现有对象使用的名称。\n\n\n"
        ],
        "Examples": [
            "obclient> CREATE TABLE tbl1(col1 INT,col2 INT);\nQuery OK, 0 rows affected\n\nobclient> RENAME tbl1 TO tbl2;\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "创建表 tbl1，并将表 tbl1 的名称改为 tbl2。",
            "obclient> CREATE TABLE tbl1(col1 INT,col2 INT);\nQuery OK, 0 rows affected\n\nobclient> RENAME tbl1 TO tbl2;\nQuery OK, 0 rows affected\n"
        ]
    },
    "REVOKE": {
        "Title": [
            "REVOKE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054295"
        ],
        "Category": [
            "DCL"
        ],
        "Feature": "/*撤销对象权限*/\nREVOKE obj_privileges\n  ON obj_clause FROM user_list;\n\nuser_list:\n  user_name [, user_name ...]\n\nobj_privileges:\n  obj_privilege [, obj_privilege ...]\n\nobj_privilege:\n    ALTER\n  | DELETE\n  | INDEX\n  | INSERT\n  | SELECT\n  | UPDATE\n  | REFERENCES\n  | EXECUTE\n\nobj_clause:\n  relation_name\n  | relation_name '.' relation_name\n  | DIRECTORY relation_name\n\nrelation_name:\n  STR_VALUE\n\n/*撤销系统权限*/\nREVOKE {system_privilege_list | ALL PRIVILEGES}\n  FROM user_list;\nREVOKE ALL [PRIVILEGES], GRANT_OPTION FROM user_list;\n\nsystem_privilege_list:\n  system_privilege [, system_privilege ...]\n\nsystem_privilege:\n  CREATE SESSION\n  | EXEMPT REDACTION POLICY\n  | SYSDBA\n  | SYSOPER\n  | SYSBACKUP\n  | CREATE TABLE\n  | CREATE ANY TABLE\n  | ALTER ANY TABLE\n  | BACKUP ANY TABLE\n  | DROP ANY TABLE\n  | LOCK ANY TABLE\n  | COMMENT ANY TABLE\n  | SELECT ANY TABLE\n  | INSERT ANY TABLE\n  | UPDATE ANY TABLE\n  | DELETE ANY TABLE\n  | FLASHBACK ANY TABLE\n  | CREATE ROLE\n  | DROP ANY ROLE\n  | GRANT ANY ROLE\n  | ALTER ANY ROLE\n  | AUDIT ANY\n  | GRANT ANY PRIVILEGE\n  | GRANT ANY OBJECT PRIVILEGE\n  | CREATE ANY INDEX\n  | ALTER ANY INDEX\n  | DROP ANY INDEX\n  | CREATE ANY VIEW\n  | DROP ANY VIEW\n  | CREATE VIEW\n  | SELECT ANY DICTIONARY\n  | CREATE PROCEDURE\n  | CREATE ANY PROCEDURE\n  | ALTER ANY PROCEDURE\n  | DROP ANY PROCEDURE\n  | EXECUTE ANY PROCEDURE\n  | CREATE SYNONYM\n  | CREATE ANY SYNONYM\n  | DROP ANY SYNONYM\n  | CREATE PUBLIC SYNONYM\n  | DROP PUBLIC SYNONYM\n  | CREATE SEQUENCE\n  | CREATE ANY SEQUENCE\n  | ALTER ANY SEQUENCE\n  | DROP ANY SEQUENCE\n  | SELECT ANY SEQUENCE\n  | CREATE TRIGGER\n  | CREATE ANY TRIGGER\n  | ALTER ANY TRIGGER\n  | DROP ANY TRIGGER\n  | CREATE PROFILE\n  | ALTER PROFILE\n  | DROP PROFILE\n  | CREATE USER\n  | ALTER USER\n  | DROP USER\n  | CREATE TYPE\n  | CREATE ANY TYPE\n  | ALTER ANY TYPE\n  | DROP ANY TYPE\n  | EXECUTE ANY TYPE\n  | UNDER ANY TYPE\n  | PURGE DBA_RECYCLEBIN\n  | CREATE ANY OUTLINE\n  | ALTER ANY OUTLINE\n  | DROP ANY OUTLINE\n  | SYSKM\n  | CREATE TABLESPACE\n  | ALTER TABLESPACE\n  | DROP TABLESPACE\n  | SHOW PROCESS\n  | ALTER SYSTEM\n  | CREATE DATABASE LINK\n  | CREATE PUBLIC DATABASE LINK\n  | DROP DATABASE LINK\n  | ALTER SESSION\n  | ALTER DATABASE\n\n/*撤销角色*/\nREVOKE role_list FROM user_name;\n\nrole_list:\nrole_name [, role_name ...]\n",
        "Description": [
            "该语句用于系统管理员撤销用户的某些权限。",
            "使用说明如下：",
            "用户必须拥有被撤销的权限（例如，user1 要撤销 user2 对表 tbl1 的 SELECT 权限，则 user1 必须拥有表 tbl1 的 SELECT 的权限），并且拥有 GRANT OPTION 权限。",
            "撤销 ALL PRIVILEGES 和 GRANT OPTION 权限时，当前用户必须拥有全局 GRANT OPTION 权限，或者对权限表的 UPDATE 及 DELETE 权限。",
            "当权限没有 GRANT OPTION 时，撤销操作不会级联。例如，用户 user1 给 user2 授予了某些权限，撤回 user1 的权限不会同时也撤回 user2 的相应权限。当拥有 GRANT OPTION 时，撤销操作会级联。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nobj_privileges\n指定撤销的对象权限类型。具体的权限类型及其说明请参见下方权限类型说明表。同时撤销多个权限时，权限类型用\",\"隔开。\n\n\nsystem_privilege\n指定撤销的系统权限类型。同时撤销多个权限时，权限类型用\",\"隔开。\n\n\nobj_clause\n指定撤销权限的层级，relation_name 指定具体对象的名称。权限可以分为以下几个层级： \n      \n全局层级：适用于所有的数据库。\n数据库层级：适用于一个给定数据库中的所有目标。\n表层级：表权限适用于一个给定表中的所有列。\n\n\n\nrole_list\n角色列表。\n\n\n",
            "可以撤销的权限类型如下表所示。",
            "权限类型说明表",
            "\n\n\n权限\n说明\n\n\n\n\nALL PRIVILEGES\n除 GRANT OPTION 以外所有权限。\n\n\nALTER\nALTER TABLE 的权限。\n\n\nCREATE\nCREATE TABLE 的权限。\n\n\nDELETE\nDELETE 的权限。\n\n\nDROP\nDROP 的权限。\n\n\nGRANT OPTION\nGRANT OPTION 的权限。\n\n\nINSERT\nINSERT 的权限。\n\n\nUPDATE\nUPDATE 的权限。\n\n\nSELECT\nSELECT 的权限。\n\n\nINDEX\nCREATE INDEX 和 DROP INDEX 的权限。\n\n\nSHOW VIEW\nSHOW CREATE VIEW 权限。\n\n\nSHOW DATABASES\n全局 SHOW DATABASES 的权限。\n\n\nSUPER\nSET GLOBAL 修改全局系统参数的权限。\n\n\nREFERENCES\n创建指向表的约束的权限。\n\n\nEXECUTE\n执行预处理程序的权限。\n\n\nFLASHBACK\nFLASHBACK 的权限。\n\n\nREAD\nREAD 的权限。\n\n\nWRITE\nWRITE 的权限。\n\n\nCREATE SESSION\n连接到数据库的权限。\n\n\nEXEMPT REDACTION POLICY\n绕过任意现有 REDACTION POLICY 并查看数据的权限。\n\n\nSYSDBA\nSYSDBA 的权限。\n\n\nSYSOPER\nSYSOPER 的权限。\n\n\nSYSBACKUP\nSYSBACKUP 的权限。\n\n\nCREATE TABLE\n在指定用户 Schema 内创建表的权限。\n\n\nCREATE ANY TABLE\n在除 SYS 用户外所有用户 Schema 内创建表的权限。\n\n\nALTER ANY TABLE\n在除 SYS 用户外所有用户 Schema 内修改表的权限。\n\n\nBACKUP ANY TABLE\n在除 SYS 用户外所有用户 Schema 内创建表的权限。\n\n\nDROP ANY TABLE\n在除 SYS 用户外所有用户 Schema 内备份表的权限。\n\n\nLOCK ANY TABLE\n在除 SYS 用户外所有用户 Schema 内锁定表的权限。\n\n\nCOMMENT ANY TABLE\n在除 SYS 用户外所有用户 Schema 内评论表的权限。\n\n\nSELECT ANY TABLE\n在除 SYS 用户外所有用户 Schema 内查看表的权限。\n\n\nINSERT ANY TABLE\n在除 SYS 用户外所有用户 Schema 内的表插入行的权限。\n\n\nUPDATE ANY TABLE\n在除 SYS 用户外所有用户 Schema 内的表更新行的权限。\n\n\nDELETE ANY TABLE\n在除 SYS 用户外所有用户 Schema 内删除表的权限。\n\n\nFLASHBACK ANY TABLE\n在除 SYS 用户外所有用户 Schema 内 FLASHBACK 表的权限。\n\n\nCREATE ROLE\n创建角色的权限。\n\n\nDROP ANY ROLE\n删除任意角色的权限。\n\n\nGRANT ANY ROLE\n授予任意角色的权限。\n\n\nALTER ANY ROLE\n修改任意角色的权限。\n\n\nAUDIT ANY\n在除 SYS 用户外所有用户 Schema 内修改对象的权限。\n\n\nGRANT ANY PRIVILEGE\n授予任意系统权限的权限。\n\n\nGRANT ANY OBJECT PRIVILEGE\n授予任意对象权限的权限。\n\n\nCREATE ANY INDEX\n在除 SYS 用户外所有用户 Schema 内创建索引的权限。\n\n\nALTER ANY INDEX\n在除 SYS 用户外所有用户 Schema 内修改索引的权限。\n\n\nDROP ANY INDEX\n在除 SYS 用户外所有用户 Schema 内删除索引的权限。\n\n\nCREATE ANY VIEW\n在除 SYS 用户外所有用户 Schema 内创建视图的权限。\n\n\nDROP ANY VIEW\n在除 SYS 用户外所有用户 Schema 内删除索引的权限。\n\n\nCREATE VIEW\n在指定用户 Schema 内创建视图的权限。\n\n\nSELECT ANY DICTIONARY\n在指定用户 Schema 内查询 DICTIONARY 的权限。\n\n\nCREATE PROCEDURE\n在指定用户 Schema 内创建 PROCEDURE 的权限。\n\n\nCREATE ANY PROCEDURE\n在除 SYS 用户外所有用户 Schema 内创建PROCEDURE 的权限。\n\n\nALTER ANY PROCEDURE\n在除 SYS 用户外所有用户 Schema 内修改PROCEDURE 的权限。\n\n\nDROP ANY PROCEDURE\n在除 SYS 用户外所有用户 Schema 内删除PROCEDURE 的权限。\n\n\nEXECUTE ANY PROCEDURE\n在除 SYS 用户外所有用户 Schema 内执行PROCEDURE 的权限。\n\n\nCREATE SYNONYM\n在指定用户 Schema 内创建 SYNONYM 的权限。\n\n\nCREATE ANY SYNONYM\n在除 SYS 用户外所有用户 Schema 内创建SYNONYM 的权限。\n\n\nDROP ANY SYNONYM\n在除 SYS 用户外所有用户 Schema 内删除SYNONYM 的权限。\n\n\nCREATE PUBLIC SYNONYM\n创建公共 SYNONYM 的权限。\n\n\nDROP PUBLIC SYNONYM\n删除公共 SYNONYM 的权限。\n\n\nCREATE SEQUENCE\n在指定用户 Schema 内创建 SEQUENCE 的权限。\n\n\nCREATE ANY SEQUENCE\n在除 SYS 用户外所有用户 Schema 内创建SEQUENCE 的权限。\n\n\nALTER ANY SEQUENCE\n在除 SYS 用户外所有用户 Schema 内修改SEQUENCE 的权限。\n\n\nDROP ANY SEQUENCE\n在除 SYS 用户外所有用户 Schema 内删除SEQUENCE 的权限。\n\n\nSELECT ANY SEQUENCE\n在除 SYS 用户外所有用户 Schema 内查询SEQUENCE 的权限。\n\n\nCREATE TRIGGER\n在指定用户 Schema 内创建 TRIGGER 的权限。\n\n\nCREATE ANY TRIGGER\n在除 SYS 用户外所有用户 Schema 内创建TRIGGER 的权限。\n\n\nALTER ANY TRIGGER\n在除 SYS 用户外所有用户 Schema 内修改TRIGGER 的权限。\n\n\nDROP ANY TRIGGER\n在除 SYS 用户外所有用户 Schema 内删除TRIGGER 的权限。\n\n\nCREATE PROFILE\n创建 PROFILE 的权限。\n\n\nALTER PROFILE\n修改 PROFILE 的权限。\n\n\nDROP PROFILE\n删除 PROFILE 的权限。\n\n\nCREATE USER\n创建用户的权限。\n\n\nALTER USER\n修改用户的权限。\n\n\nDROP USER\n删除用户的权限。\n\n\nCREATE TYPE\n在指定用户 Schema 内创建 TYPE 的权限。\n\n\nCREATE ANY TYPE\n在除 SYS 用户外所有用户 Schema 内创建 TYPE 的权限。\n\n\nALTER ANY TYPE\n在除 SYS 用户外所有用户 Schema 内修改 TYPE 的权限。\n\n\nDROP ANY TYPE\n在除 SYS 用户外所有用户 Schema 内删除 TYPE 的权限。\n\n\nEXECUTE ANY TYPE\n在除 SYS 用户外所有用户 Schema 内执行 TYPE 的权限。\n\n\nUNDER ANY TYPE\n在除 SYS 用户外所有用户 Schema 内 TYPE 的基础上创建 SUBTYPE 的权限。\n\n\nPURGE DBA_RECYCLEBIN\n从系统回收站中删除所有对象的权限。\n\n\nCREATE ANY OUTLINE\n在除 SYS 用户外所有用户 Schema 内创建OUTLINE 的权限。\n\n\nALTER ANY OUTLINE\n在除 SYS 用户外所有用户 Schema 内修改OUTLINE 的权限。\n\n\nDROP ANY OUTLINE\n在除 SYS 用户外所有用户 Schema 内删除OUTLINE 的权限。\n\n\nSYSKM\nSYSKM 的权限。\n\n\nCREATE TABLESPACE\n创建表空间的权限。\n\n\nALTER TABLESPACE\n修改表空间的权限。\n\n\nDROP TABLESPACE\n删除表空间的权限。\n\n\nALTER SYSTEM\nALTER SYSTEM 的权限\n\n\nCREATE DATABASE LINK\n在指定用户 Schema 内创建 DATABASE LINK 的权限。\n\n\nCREATE PUBLIC DATABASE LINK\n创建 PUBLIC DATABASE LINK 的权限。\n\n\nDROP DATABASE LINK\n在指定用户 Schema 内删除 DATABASE LINK 的权限。\n\n\nALTER SESSION\n修改 SESSION 的权限。\n\n\nALTER DATABASE\n修改 DATABASE 的权限。\n\n\n"
        ],
        "Examples": [
            "obclient> REVOKE ALL PRIVILEGES FROM user1;\nQuery OK, 0 rows affected\n",
            "obclient> REVOKE SELECT ON user1.tbl1 FROM role1;\nQuery OK, 0 rows affected\n",
            "obclient> REVOKE DROP ANY TABLE FROM user1,user2;\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "撤销用户 user1 的所有权限。",
            "obclient> REVOKE ALL PRIVILEGES FROM user1;\nQuery OK, 0 rows affected\n",
            "撤销角色 role1 对表 user1.tbl1 的 SELECT 对象权限。",
            "obclient> REVOKE SELECT ON user1.tbl1 FROM role1;\nQuery OK, 0 rows affected\n",
            "撤销用户 user1 和用户 user2 的 DROP ANY TABLE 系统权限。",
            "obclient> REVOKE DROP ANY TABLE FROM user1,user2;\nQuery OK, 0 rows affected\n"
        ]
    },
    "ROLLBACK": {
        "Title": [
            "ROLLBACK"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054298"
        ],
        "Category": [
            "DCL"
        ],
        "Feature": "ROLLBACK [WORK][ TO [ SAVEPOINT ] savepoint_name ];\n",
        "Description": [
            "该语句用来撤销在当前事务中完成的工作。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nWORK\n为了 SQL 标准兼容性而提供的参数，为可选项。\n\n\nTO SAVEPOINT\n指定要将当前事务回滚到的保存点，为可选项。如果省略此子句，则该 ROLLBACK 语句将回滚整个事务，并且有以下结果： \n      \n结束交易。\n撤消当前事务中的所有更改。\n清除事务中的所有保存点。\n释放任何事务锁。\n ROLLBACK 与 TO SAVEPOINT 子句一起使用执行以下操作： \n      \n仅回滚保存点之后的事务部分，不会结束交易。\n删除在该保存点之后创建的所有保存点。\n\n\n\n"
        ],
        "Examples": [
            "obclient> CREATE TABLE tbl1 (id INT,name VARCHAR(10),num INT);\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO tbl1 VALUES (1, 'a',10),(2, 'b',20),(3, 'a',30);\nQuery OK, 3 rows affected\nRecords: 3  Duplicates: 0  Warnings: 0\n\nobclient> SELECT * FROM tbl1;\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    1 | a    |   10 |\n|    2 | b    |   20 |\n|    3 | a    |   30 |\n+------+------+------+\n3 rows in set\n",
            "obclient> UPDATE tbl1 SET name = 'c' WHERE id = 3;\nQuery OK, 1 row affected\nRows matched: 1  Changed: 1  Warnings: 0\n\nobclient> SELECT * FROM tbl1;\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    1 | a    |   10 |\n|    2 | b    |   20 |\n|    3 | c    |   30 |\n+------+------+------+\n3 rows in set\n\nobclient> ROLLBACK;\nQuery OK, 0 rows affected\n\nobclient> SELECT * FROM tbl1;\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    1 | a    |   10 |\n|    2 | b    |   20 |\n|    3 | a    |   30 |\n+------+------+------+\n3 rows in set\n",
            "obclient> ROLLBACK TO SAVEPOINT savepoint1;\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "创建示例表 tbl1。",
            "obclient> CREATE TABLE tbl1 (id INT,name VARCHAR(10),num INT);\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO tbl1 VALUES (1, 'a',10),(2, 'b',20),(3, 'a',30);\nQuery OK, 3 rows affected\nRecords: 3  Duplicates: 0  Warnings: 0\n\nobclient> SELECT * FROM tbl1;\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    1 | a    |   10 |\n|    2 | b    |   20 |\n|    3 | a    |   30 |\n+------+------+------+\n3 rows in set\n",
            "更新表 tbl1，将 id = 3 的 name 改为 c，然后回滚整个当前事务。",
            "obclient> UPDATE tbl1 SET name = 'c' WHERE id = 3;\nQuery OK, 1 row affected\nRows matched: 1  Changed: 1  Warnings: 0\n\nobclient> SELECT * FROM tbl1;\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    1 | a    |   10 |\n|    2 | b    |   20 |\n|    3 | c    |   30 |\n+------+------+------+\n3 rows in set\n\nobclient> ROLLBACK;\nQuery OK, 0 rows affected\n\nobclient> SELECT * FROM tbl1;\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    1 | a    |   10 |\n|    2 | b    |   20 |\n|    3 | a    |   30 |\n+------+------+------+\n3 rows in set\n",
            "将当前的事务回滚到保存点 savepoint1。",
            "obclient> ROLLBACK TO SAVEPOINT savepoint1;\nQuery OK, 0 rows affected\n"
        ]
    },
    "SAVEPOINT": {
        "Title": [
            "SAVEPOINT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054304"
        ],
        "Category": [
            "DCL"
        ],
        "Feature": "SAVEPOINT savepoint_name;\n",
        "Description": [
            "该语句用来在提交事务之前创建保存点，可以实现将事务部分回滚。",
            "\n说明\n\n保存点名称在同一个事务范围内是唯一的，后一个保存点会覆盖前一个同名的保存点。\n创建保存点后可以继续处理、提交工作、回滚整个事务或者将事务回滚到指定保存点。有关回事务滚事务的详细信息，请参见 ROLLBACK。\n\n"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nsavepoint_name\n指定保存点的名称。\n\n\n"
        ],
        "Examples": [
            "obclient> CREATE TABLE tbl1 (id INT,name VARCHAR(10),num INT);\nQuery OK, 0 rows affected\n\nobclient>  INSERT INTO tbl1 VALUES (1, 'a',10),(2, 'b',20),(3, 'a',30);\nQuery OK, 3 rows affected\nRecords: 3  Duplicates: 0  Warnings: 0\n\nobclient> SELECT * FROM tbl1;\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    1 | a    |   10 |\n|    2 | b    |   20 |\n|    3 | a    |   30 |\n+------+------+------+\n3 rows in set\n",
            "obclient> UPDATE tbl1 SET name = 'c' WHERE id = 3;\nQuery OK, 1 row affected\nRows matched: 1  Changed: 1  Warnings: 0\n\nobclient> SAVEPOINT savepoint1;\nQuery OK, 0 rows affected\n",
            "obclient> INSERT INTO tbl1 VALUES (4, 'd',40);\nQuery OK, 1 row affected\n\nobclient> SELECT * FROM tbl1;\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    1 | a    |   10 |\n|    2 | b    |   20 |\n|    3 | c    |   30 |\n|    4 | d    |   40 |\n+------+------+------+\n4 rows in set\n",
            "obclient> ROLLBACK TO SAVEPOINT savepoint1;\nQuery OK, 0 rows affected\n\nobclient> SELECT * FROM tbl1;\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    1 | a    |   10 |\n|    2 | b    |   20 |\n|    3 | c    |   30 |\n+------+------+------+\n3 rows in set\n\nobclient> COMMIT;\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "创建示例表 tbl1。",
            "obclient> CREATE TABLE tbl1 (id INT,name VARCHAR(10),num INT);\nQuery OK, 0 rows affected\n\nobclient>  INSERT INTO tbl1 VALUES (1, 'a',10),(2, 'b',20),(3, 'a',30);\nQuery OK, 3 rows affected\nRecords: 3  Duplicates: 0  Warnings: 0\n\nobclient> SELECT * FROM tbl1;\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    1 | a    |   10 |\n|    2 | b    |   20 |\n|    3 | a    |   30 |\n+------+------+------+\n3 rows in set\n",
            "更新表 tbl1，将 id = 3 的 name 改为 c，并创建 savepoint1。",
            "obclient> UPDATE tbl1 SET name = 'c' WHERE id = 3;\nQuery OK, 1 row affected\nRows matched: 1  Changed: 1  Warnings: 0\n\nobclient> SAVEPOINT savepoint1;\nQuery OK, 0 rows affected\n",
            "向表 tbl1 插入一行数据，并查询表 tbl1。",
            "obclient> INSERT INTO tbl1 VALUES (4, 'd',40);\nQuery OK, 1 row affected\n\nobclient> SELECT * FROM tbl1;\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    1 | a    |   10 |\n|    2 | b    |   20 |\n|    3 | c    |   30 |\n|    4 | d    |   40 |\n+------+------+------+\n4 rows in set\n",
            "回滚 savepoint1，并查询表 tbl1。",
            "obclient> ROLLBACK TO SAVEPOINT savepoint1;\nQuery OK, 0 rows affected\n\nobclient> SELECT * FROM tbl1;\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    1 | a    |   10 |\n|    2 | b    |   20 |\n|    3 | c    |   30 |\n+------+------+------+\n3 rows in set\n\nobclient> COMMIT;\nQuery OK, 0 rows affected\n"
        ]
    },
    "SELECT INTO": {
        "Title": [
            "SELECT INTO"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054307"
        ],
        "Category": [
            "DCL"
        ],
        "Feature": "SELECT [/*+parallel(N)*/] column_list_option \nINTO {OUTFILE 'file_name' [ {CHARSET | CHARACTER SET} charset_name] [field_opt] [line_opt] [file_opt]\n     | DUMPFILE 'file_name'\n     | into_var_list}\nFROM table_name_list\n[WHERE where_conditions]\n[GROUP BY group_by_list [HAVING having_search_conditions]]\n[ORDER BY order_expression_list];\n\ncolumn_list_option:\n    column_name [, column_name ...]\n\nfield_opt:\n    {COLUMNS | FIELDS} field_term_list\n\nfield_term_list:\n  field_term [, field_term ...]\n\nfield_term:\n    {[OPTIONALLY] ENCLOSED | TERMINATED | ESCAPED} BY string\n\nline_opt:\n    LINES line_term_list\n\nline_term_list:\n    line_term [, line_term ...]\n\nline_term:\n    {STARTING | TERMINATED} BY string\n\nfile_opt:\n    file_option [, file_option ...]\n\nfile_option:\n    SINGLE [=] {TRUE | FALSE}\n    | MAX_FILE_SIZE [=] {int | string}\n",
        "Description": [
            "该语句用于将查询结果存储在变量或文件中。其中：",
            "SELECT ... INTO OUTFILE 用于将结果集存储在外部文件，并可以指定输出格式。",
            "SELECT ... INTO DUMPFILE 用于向外部文件写入不带格式的单行。",
            "SELECT ... INTO var_list 用于将结果集存储到变量。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nparallel(N)\n可选项，指定执行语句的并行度。\n\n\ncolumn_list_option\n表示导出的列选项。如果要选中全部数据可以用 * 表示。column_name：列名称。更多查询语句列选项的信息，参见 SIMPLE SELECT。\n\n\nfile_name\n用于指定导出文件的路径和文件名。file_name 有以下格式： \n      \n将导出文件保存在 OBServer 节点：/$PATH/$FILENAME。\n将导出文件保存在 OSS 上：oss://$PATH/$FILENAME/?host=$HOST&access_id=$ACCESS_ID&access_key=$ACCESSKEY。\n 参数解释如下： \n      \n$PATH：指定要保存导出文件的路径。 \n        \n导出到 OBServer 节点中就是指定导出文件在 OBServer 节点的路径。\n导出到 OSS 上就是指定存储桶中的文件路径。\n\n$FILENAME：指定要导出文件的名称。当 SINGLE = FALSE 时表示导出文件的前缀，不指定时会生成默认的前缀 data，系统自动生成后缀。\n$HOST：指定 OSS 服务的主机名或 CDN 加速的域名，即要访问的 OSS 服务的地址。\n$ACCESS_ID：指定访问 OSS 服务所需的 Access Key ID，用于身份验证。\n$ACCESSKEY：指定了访问 OSS 服务所需的 Access Key Secret，用于身份验证。\n\n\n说明\n由于阿里云 OSS 有文件大小的限制，对于超过 5 GB 的文件，导出到 OSS 时会被拆分成多个文件，每个文件小于 5 GB。\n\n\n\nCHARSET | CHARACTER SET charset_name\n可选项，指定导出到外部文件的字符集。charset_name 表示字符集的名称。\n\n\nfield_opt\n可选项，导出字段格式选项。指定输出文件中各个字段的格式，通过 FIELDS 或 COLUMNS 子句来指定。详细介绍可参见下文 field_term。\n\n\nline_opt\n可选项，导出数据行的开始和结束符选项。指定输出文件中每一行的开始和结束字符，通过 LINES 子句设置。详细介绍可参见下文 line_term。\n\n\nfile_opt\n可选项，控制是否导出到多个文件和导出到多文件时单个文件的大小。详细介绍可参见下文 file_option。\n\n\nFROM table_name_list\n指定选择数据的对象。\n\n\nWHERE where_conditions\n可选项，指定筛选条件，查询结果中仅包含满足条件的数据。更多查询语句的筛选信息，参见 SIMPLE SELECT。\n\n\nGROUP BY group_by_list\n可选项，指定分组的字段，通常与聚合函数配合使用。 \n      \n说明\nSELECT 子句后面的所有列中，没有使用聚合函数的列，必须出现在 GROUP BY 子句后面。\n\n\n\nHAVING having_search_conditions\n可选项，筛选分组后的各组数据。HAVING 子句与 WHERE 子句类似，但是 HAVING 子句可以使用累计函数（如 SUM、AVG 等）。\n\n\nORDER BY order_expression_list\n可选项，指定结果集按照一个列或者多个列用来 ASC 或 DESC 显示查询结果。不指定 ASC 或者 DESC 时，默认为 ASC。 \n      \nASC：表示升序。\nDESC：表示降序。\n\n\n\n",
            "field_term",
            "[OPTIONALLY] ENCLOSED BY string",
            "：用来指定包裹字段值的符号，默认没有引用符号。例如，",
            "ENCLOSED BY '\"'",
            " 表示字符值放在双引号之间。如果使用了 ",
            "OPTIONALLY",
            " 关键字，则仅对字符串类型的值使用指定字符包裹。",
            "TERMINATED BY string",
            "：用来指定字段值之间的符号。例如，",
            "TERMINATED BY ','",
            " 指定了逗号作为两个字段值之间的标志。",
            "ESCAPED BY string",
            "：用来指定转义字符，以便处理特殊字符或解析特殊格式的数据。默认的转义字符是反斜杠（",
            "\\",
            "）。",
            "line_term",
            "STARTING BY string",
            "：指定每一行开始的字符，默认没有起始符号。",
            "TERMINATED BY string",
            "：指定每一行的结束字符，默认使用换行符。例如，",
            "... LINES TERMINATED BY '\\n' ...",
            " 表示一行将以换行符作为结束标志。",
            "file_option",
            "SINGLE [=] {TRUE | FALSE}：用于控制将数据导出到单个文件或多个文件。",
            "\nSINGLE [=] TRUE：默认值，表示只能导出到单个文件。\nSINGLE [=] FALSE：表示可以导出到多个文件。\n\n注意\n当并行度大于 1 且 SINGLE = FALSE 时，可以导出到多个文件，达到并行读并行写和提高导出速度的效果。\n\n",
            "SINGLE [=] TRUE：默认值，表示只能导出到单个文件。",
            "SINGLE [=] FALSE：表示可以导出到多个文件。",
            "\n注意\n当并行度大于 1 且 SINGLE = FALSE 时，可以导出到多个文件，达到并行读并行写和提高导出速度的效果。\n",
            "MAX_FILE_SIZE [=] {int | string}：用于控制导出时单个文件的大小，仅在 SINGLE = FALSE 时生效。"
        ],
        "Examples": [
            "ssh admin@xxx.xxx.xxx.xxx\n",
            "obclient -S /home/admin/oceanbase/run/sql.sock -usys@oracle001 -p******\n",
            "SET GLOBAL secure_file_priv = \"/home/admin/test_data\";\n",
            "SELECT /*+parallel(2)*/ *\nINTO OUTFILE '/home/admin/test_data/test_tbl1.csv'\n  FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"'\n  LINES TERMINATED BY '\\n'\nFROM test_tbl1;\n",
            "Query OK, 9 rows affected\n",
            "SELECT /*+parallel(2)*/ *\n  INTO OUTFILE '/home/admin/test_data/'\n  FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"'\n  LINES TERMINATED BY '\\n'\n  SINGLE = FALSE MAX_FILE_SIZE = '4MB'\nFROM test_tbl1;\n",
            "Query OK, 9 rows affected\n",
            "SELECT /*+parallel(2)*/ *\n  INTO OUTFILE '/home/admin/test_data/dd2024'\n  FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"'\n  LINES TERMINATED BY '\\n'\n  SINGLE = FALSE MAX_FILE_SIZE = '4MB'\nFROM test_tbl1;\n",
            "Query OK, 9 rows affected\n",
            "[xxx@xxx /home/admin/test_data]# ls\n",
            "data_0_0_0  data_0_1_0  dd2024_0_0_0  dd2024_0_1_0  test_tbl1.csv\n"
        ],
        "Detailed Examples": [
            "设置导出的文件路径。",
            "要导出文件，需要先设置系统变量 secure_file_priv，配置导出文件可以访问的路径。",
            "\n注意\n由于安全原因，设置系统变量 secure_file_priv 时，只能通过本地 Socket 连接数据库执行修改该全局变量的 SQL 语句。更多信息，请参见 secure_file_priv。\n",
            "\n登录到要连接 OceanBase 数据库的 OBServer 节点。 ssh admin@xxx.xxx.xxx.xxx\n\n执行以下命令，通过本地 Unix Socket 连接方式连接租户 mysql001。 obclient -S /home/admin/oceanbase/run/sql.sock -usys@oracle001 -p******\n\n设置导出路径为 /home/admin/test_data。 SET GLOBAL secure_file_priv = \"/home/admin/test_data\";\n\n退出登录。\n",
            "登录到要连接 OceanBase 数据库的 OBServer 节点。",
            "ssh admin@xxx.xxx.xxx.xxx\n",
            "执行以下命令，通过本地 Unix Socket 连接方式连接租户 mysql001。",
            "obclient -S /home/admin/oceanbase/run/sql.sock -usys@oracle001 -p******\n",
            "设置导出路径为 /home/admin/test_data。",
            "SET GLOBAL secure_file_priv = \"/home/admin/test_data\";\n",
            "退出登录。",
            "重新连接数据库后，使用 SELECT INTO OUTFILE 语句导出数据。指定逗号作为两个字段值之间的标志；对字符串类型的值使用 \" 字符包裹；使用换行符作为结束标志。",
            "\n串行写单个文件，指定文件名为 test_tbl1.csv。 SELECT /*+parallel(2)*/ *\nINTO OUTFILE '/home/admin/test_data/test_tbl1.csv'\n  FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"'\n  LINES TERMINATED BY '\\n'\nFROM test_tbl1;\n 返回结果如下： Query OK, 9 rows affected\n\n并行写多个文件，不指定文件名，并且每个文件的大小不超过 4MB。 SELECT /*+parallel(2)*/ *\n  INTO OUTFILE '/home/admin/test_data/'\n  FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"'\n  LINES TERMINATED BY '\\n'\n  SINGLE = FALSE MAX_FILE_SIZE = '4MB'\nFROM test_tbl1;\n 返回结果如下： Query OK, 9 rows affected\n\n并行写多个文件，指定文件名的前缀为 dd2024，并且每个文件的大小不超过 4MB。 SELECT /*+parallel(2)*/ *\n  INTO OUTFILE '/home/admin/test_data/dd2024'\n  FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"'\n  LINES TERMINATED BY '\\n'\n  SINGLE = FALSE MAX_FILE_SIZE = '4MB'\nFROM test_tbl1;\n 返回结果如下： Query OK, 9 rows affected\n\n",
            "\n说明\n\n\n当多个导出任务同时导出到相同路径时，可能出现报错、只导出一部分数据等问题。可以通过合理设置导出路径规避，例如：SELECT /*+parallel(2)*/ * INTO OUTFILE 'test/data' SINGLE = FALSE FROM t1; 和 SELECT /*+parallel(2)*/ * INTO OUTFILE 'test/data' SINGLE = FALSE FROM t2; 同时执行时可能由于导出文件名相同而报错，建议将导出路径设置为 test/data1 和 test/data2。\n当 SINGLE = FALSE，且导出因为 file already exist 等原因失败后，可以清除导出目录下所有与导出目标具有相同前缀的文件，或者删除导出目录再重建，然后再次执行导出操作。例如：SELECT /*+parallel(2)*/ * INTO OUTFILE 'test/data' SINGLE = FALSE FROM t1; 失败后，可以删除 test 目录下所有 data 前缀的文件，或者直接删除 test 目录再重建，然后再次尝试执行导出操作。\n\n\n",
            "串行写单个文件，指定文件名为 test_tbl1.csv。",
            "SELECT /*+parallel(2)*/ *\nINTO OUTFILE '/home/admin/test_data/test_tbl1.csv'\n  FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"'\n  LINES TERMINATED BY '\\n'\nFROM test_tbl1;\n",
            "返回结果如下：",
            "Query OK, 9 rows affected\n",
            "并行写多个文件，不指定文件名，并且每个文件的大小不超过 4MB。",
            "SELECT /*+parallel(2)*/ *\n  INTO OUTFILE '/home/admin/test_data/'\n  FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"'\n  LINES TERMINATED BY '\\n'\n  SINGLE = FALSE MAX_FILE_SIZE = '4MB'\nFROM test_tbl1;\n",
            "返回结果如下：",
            "Query OK, 9 rows affected\n",
            "并行写多个文件，指定文件名的前缀为 dd2024，并且每个文件的大小不超过 4MB。",
            "SELECT /*+parallel(2)*/ *\n  INTO OUTFILE '/home/admin/test_data/dd2024'\n  FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"'\n  LINES TERMINATED BY '\\n'\n  SINGLE = FALSE MAX_FILE_SIZE = '4MB'\nFROM test_tbl1;\n",
            "返回结果如下：",
            "Query OK, 9 rows affected\n",
            "当多个导出任务同时导出到相同路径时，可能出现报错、只导出一部分数据等问题。可以通过合理设置导出路径规避，",
            "例如：",
            "SELECT /*+parallel(2)*/ * INTO OUTFILE 'test/data' SINGLE = FALSE FROM t1;",
            " 和 ",
            "SELECT /*+parallel(2)*/ * INTO OUTFILE 'test/data' SINGLE = FALSE FROM t2;",
            " 同时执行时可能由于导出文件名相同而报错，建议将导出路径设置为 ",
            "test/data1",
            " 和 ",
            "test/data2",
            "。",
            "当 ",
            "SINGLE = FALSE",
            "，且导出因为 file already exist 等原因失败后，可以清除导出目录下所有与导出目标具有相同前缀的文件，或者删除导出目录再重建，然后再次执行导出操作。",
            "例如：",
            "SELECT /*+parallel(2)*/ * INTO OUTFILE 'test/data' SINGLE = FALSE FROM t1;",
            " 失败后，可以删除 ",
            "test",
            " 目录下所有 ",
            "data",
            " 前缀的文件，或者直接删除 ",
            "test",
            " 目录再重建，然后再次尝试执行导出操作。",
            "登录机器，在 OBServer 节点的 /home/admin/test_data 目录下查看导出的文件信息。",
            "[xxx@xxx /home/admin/test_data]# ls\n",
            "返回结果如下：",
            "data_0_0_0  data_0_1_0  dd2024_0_0_0  dd2024_0_1_0  test_tbl1.csv\n",
            "其中，test_tbl1.csv 是串行写单个文件示例导出的文件名；data_0_0_0 和 data_0_1_0 是并行写多个文件，不指定文件名示例导出的文件名；dd2024_0_0_0 和 dd2024_0_1_0 是并行写多个文件，指定文件名的前缀为 dd2024 示例导出的文件名。"
        ]
    },
    "SET NAMES": {
        "Title": [
            "SET NAMES"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054313"
        ],
        "Category": [
            "DCL"
        ],
        "Feature": "SET NAMES 'charset_name' [COLLATE 'collation_name'];\n",
        "Description": [
            "该语句用来设置当前会话的字符集以及字符集排序规则。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\ncharset_name\n指定字符集。\n\n\ncollation_name\n指定字符集的排序规则。如未指定，则使用字符集默认字符集排序规则。\n\n\n",
            "\n说明\n可以通过 SHOW CHARSET; 查询系统支持的字符集，通过 SHOW COLLATION; 查询系统支持的字符集排序规则。\n"
        ],
        "Examples": [
            "obclient> SET NAMES 'gbk';\nQuery OK, 0 rows affected\n\nobclient> SHOW VARIABLES LIKE 'character_set_c%';\n+--------------------------+-------+\n| VARIABLE_NAME            | VALUE |\n+--------------------------+-------+\n| character_set_client     | gbk   |\n| character_set_connection | gbk   |\n+--------------------------+-------+\n2 rows in set\n\nobclient> SHOW VARIABLES LIKE 'collation_connection';\n+----------------------+----------------+\n| VARIABLE_NAME        | VALUE          |\n+----------------------+----------------+\n| collation_connection | gbk_chinese_ci |\n+----------------------+----------------+\n1 row in set\n",
            "obclient> SET NAMES 'utf8mb4' COLLATE 'utf8mb4_general_ci';\nQuery OK, 0 rows affected\n\nobclient> SHOW VARIABLES LIKE 'character_set_c%';\n+--------------------------+---------+\n| VARIABLE_NAME            | VALUE   |\n+--------------------------+---------+\n| character_set_client     | utf8mb4 |\n| character_set_connection | utf8mb4 |\n+--------------------------+---------+\n2 rows in set\n\nobclient> SHOW VARIABLES LIKE 'collation_connection';\n+----------------------+--------------------+\n| VARIABLE_NAME        | VALUE              |\n+----------------------+--------------------+\n| collation_connection | utf8mb4_general_ci |\n+----------------------+--------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "将当前会话的字符集设置为 gbk，默认字符集排序规则。",
            "obclient> SET NAMES 'gbk';\nQuery OK, 0 rows affected\n\nobclient> SHOW VARIABLES LIKE 'character_set_c%';\n+--------------------------+-------+\n| VARIABLE_NAME            | VALUE |\n+--------------------------+-------+\n| character_set_client     | gbk   |\n| character_set_connection | gbk   |\n+--------------------------+-------+\n2 rows in set\n\nobclient> SHOW VARIABLES LIKE 'collation_connection';\n+----------------------+----------------+\n| VARIABLE_NAME        | VALUE          |\n+----------------------+----------------+\n| collation_connection | gbk_chinese_ci |\n+----------------------+----------------+\n1 row in set\n",
            "将当前会话的字符集设置为 utf8mb4，排序规则为 utf8mb4_general_ci。",
            "obclient> SET NAMES 'utf8mb4' COLLATE 'utf8mb4_general_ci';\nQuery OK, 0 rows affected\n\nobclient> SHOW VARIABLES LIKE 'character_set_c%';\n+--------------------------+---------+\n| VARIABLE_NAME            | VALUE   |\n+--------------------------+---------+\n| character_set_client     | utf8mb4 |\n| character_set_connection | utf8mb4 |\n+--------------------------+---------+\n2 rows in set\n\nobclient> SHOW VARIABLES LIKE 'collation_connection';\n+----------------------+--------------------+\n| VARIABLE_NAME        | VALUE              |\n+----------------------+--------------------+\n| collation_connection | utf8mb4_general_ci |\n+----------------------+--------------------+\n1 row in set\n"
        ]
    },
    "SET PASSWORD": {
        "Title": [
            "SET PASSWORD"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054297"
        ],
        "Category": [
            "DCL"
        ],
        "Feature": "SET PASSWORD [FOR user_name] = PASSWORD(password);\n\npassword:\n  STR_VALUE\n",
        "Description": [
            "该语句用于修改 OceanBase 数据库当前登录用户或其他用户的密码。",
            "有关其它修改用户密码的方式，请参见 ALTER USER。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nFOR\n表示修改指定用户的密码，为可选项。必须拥有 ALTER USER 的系统权限，才可以修改指定用户的密码。如果没有指定 FOR 子句，表示修改当前用户的密码。任何成功登录的用户都可以修改当前用户的密码。\n\n\nuser_name\n用户名称。\n\n\npassword\n用户的新密码。\n\n\n"
        ],
        "Examples": [
            "obclient> SET PASSWORD FOR user1 = PASSWORD(**1***);\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "将用户 user1 的密码修改为 **1***。",
            "obclient> SET PASSWORD FOR user1 = PASSWORD(**1***);\nQuery OK, 0 rows affected\n"
        ]
    },
    "SET ROLE": {
        "Title": [
            "SET ROLE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054314"
        ],
        "Category": [
            "DCL"
        ],
        "Feature": "SET ROLE\n{ role_name [ IDENTIFIED BY password ][, role_name [ IDENTIFIED BY password ] ]...\n| ALL [ EXCEPT role_name [, role_name ]... ]\n| NONE\n} ;\n",
        "Description": [
            "该语句来启用或禁用为当前会话授予的角色。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nrole_name\n指定要为当前会话启用的角色名称。\n\n\nIDENTIFIED BY password\n指定角色的密码。如果角色有密码，则您必须指定密码才能启用该角色。\n\n\nALL\n启用为当前会话授予的所有角色。EXCEPT 子句表示列出的角色除外，为可选项。如果您已被直接授予任何具有密码的角色，则不能指定此子句，否则会引发报错。\n\n\nNONE\n禁用当前会话的所有角色。\n\n\n"
        ],
        "Examples": [
            "obclient> SET ROLE role1 IDENTIFIED BY **1***;\nQuery OK, 0 rows affected\n",
            "obclient> SET ROLE ALL;\nORA-01979: missing or invalid password for role 'ROLE2'\n",
            "obclient> SET ROLE ALL EXCEPT role2;\nQuery OK, 0 rows affected\n",
            "obclient> SET ROLE NONE;\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "为当前会话启用由密码 **1*** 标识的角色 role1。",
            "obclient> SET ROLE role1 IDENTIFIED BY **1***;\nQuery OK, 0 rows affected\n",
            "启用授予当前会话的所有角色，当授予的角色中包含具有密码的角色时将报错。",
            "obclient> SET ROLE ALL;\nORA-01979: missing or invalid password for role 'ROLE2'\n",
            "启用授予当前会话除了角色 role2 之外的所有角色。",
            "obclient> SET ROLE ALL EXCEPT role2;\nQuery OK, 0 rows affected\n",
            "禁用为当前会话授予的所有角色。",
            "obclient> SET ROLE NONE;\nQuery OK, 0 rows affected\n"
        ]
    },
    "SET VARIABLE": {
        "Title": [
            "SET VARIABLE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054311"
        ],
        "Category": [
            "DCL"
        ],
        "Feature": "SET variable_name = variable_value[,variable_name = variable_value...];\n",
        "Description": [
            "该语句用来设置用户自定义变量（@）和系统定义的 Session 变量（@@）。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nvariable_name\n指定要设置的变量，可以是用户自定义的变量，也可以是系统变量。如果要设置多个变量，中间用英文逗号 , 分隔。\n\n\nvariable_value\n指定为变量设置的值。\n\n\n"
        ],
        "Examples": [
            "obclient> SET @a = 1, @b = 2, @c = 3;\nQuery OK, 0 rows affected\n\nobclient> SET @@tx_isolation = 'read-committed';\nQuery OK, 0 rows affected\n\n\nobclient> SELECT @a,@b,@c,@@tx_isolation FROM DUAL;\n+------+------+------+----------------+\n| @A   | @B   | @C   | @@TX_ISOLATION |\n+------+------+------+----------------+\n|    1 |    2 |    3 | READ-COMMITTED |\n+------+------+------+----------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SET @a = 1, @b = 2, @c = 3;\nQuery OK, 0 rows affected\n\nobclient> SET @@tx_isolation = 'read-committed';\nQuery OK, 0 rows affected\n\n\nobclient> SELECT @a,@b,@c,@@tx_isolation FROM DUAL;\n+------+------+------+----------------+\n| @A   | @B   | @C   | @@TX_ISOLATION |\n+------+------+------+----------------+\n|    1 |    2 |    3 | READ-COMMITTED |\n+------+------+------+----------------+\n1 row in set\n"
        ]
    },
    "SHOW": {
        "Title": [
            "SHOW"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054299"
        ],
        "Category": [
            "DCL"
        ],
        "Feature": "SHOW {\n   | TABLE STATUS\n   | VARIABLES [like 'variable_name']\n   | CHARSET | CHARACTER SET  \n   | COLLATION\n   | PARAMETERS\n   | TABLEGROUPS\n   | CREATE TABLEGROUP tablegroup_name\n   | CREATE TABLE table_name\n   | CREATE VIEW view_name\n   | ERRORS\n   | GRANTS\n   | PRIVILEGES\n   | RECYCLEBIN\n   | [FULL] PROCESSLIST\n   | TRACE [FORMAT='JSON']\n};\n",
        "Description": [
            "该语句用于展示数据库对象的信息。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nTABLE STATUS\n展示当前用户中所有表的详细信息。\n\n\nVARIABLES [like ‘variable_name’]\n显示变量信息。如果不指定 like 'variable_name'，则显示所有系统变量信息。variable_name 为变量名称。\n\n\nCHARSET | CHARACTER SET\n展示支持的字符集。\n\n\nCOLLATION\n展示支持的字符序。\n\n\nPARAMETERS\n展示所有系统配置项。\n\n\nTABLEGROUPS\n展示表组信息。\n\n\nCREATE TABLEGROUP tablegroup_name\n查看创建表组的语句。tablegroup_name 为表组名称。\n\n\nCREATE TABLE table_name\n查看创建表的语句。table_name 为表名。\n\n\nCREATE VIEW view_name\n查看创建视图的语句。view_name 为视图名称。\n\n\nERRORS\n查看错误信息。\n\n\nGRANTS\n查看当前用户的权限。\n\n\nPRIVILEGES\n查看各项权限的描述。\n\n\nRECYCLEBIN\n查看回收站。\n\n\n[FULL] PROCESSLIST\n查看当前租户进程列表。具体如下： \n      \nSHOW PROCESSLIST 显示简要的进程列表，具体如下： \n        \nID：进程的 ID，即当前会话的 Client Session ID，该 ID 是会话在客户端中的唯一标识。\nUSER：连接的用户名。\nHOST：客户端 IP 和端口（通过 ODP 连接则为 ODP 的 IP 和端口）。\nDB：访问的 Database 名称。\nCOMMAND：当前执行的命令类型，取值 Query、Sleep 等。\nTIME：当前命令执行时间，单位是秒。如果命令发生重试，会清零后重新计算。\nSTATE：当前会话状态，取值 SLEEP、ACTIVE 等。\nINFO：展示当前正在执行的命令，长度限制为 100 个字符，超出部分截断。\n\nSHOW FULL PROCESSLIST：显示完整的进程列表，包括每个进程的详细信息，具体如下： \n        \nID：进程的 ID，即当前会话的 Client Session ID，该 ID 是会话在客户端中的唯一标识。\nUSER：连接的用户名。\nTENANT：连接的租户。\nHOST：客户端 IP 和端口（通过 ODP 连接则为 ODP 的 IP 和端口）。\nDB：访问的 Database 名称。\nCOMMAND：当前执行的命令类型，取值 Query、Sleep 等。\nTIME：当前命令执行时间，单位是秒。如果命令发生重试，会清零后重新计算。\nSTATE：当前会话状态，取值 SLEEP、ACTIVE 等。\nINFO：展示当前正在执行的命令。\nIP：服务器 IP 地址。\nPORT：SQL 端口号。\n\n\n\n说明\n通过 SHOW PROCESSLIST 语句查询当前数据库中会话的数量和会话的 ID 的详细信息，请参见 查看租户会话。\n\n\n\nTRACE [FORMAT=‘JSON’]\n展示 SQL 语句的执行情况。可以选择以 JSON 的格式输出。\n\n\n"
        ],
        "Examples": [
            "obclient> SHOW CREATE TABLE tbl1;\n+-------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| TABLE | CREATE TABLE                                                                                                                                                                          |\n+-------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| TBL1  | CREATE TABLE \"TBL1\" (\n  \"COL1\" NUMBER(38),\n  \"COL2\" NUMBER(38)\n) COMPRESS FOR ARCHIVE REPLICA_NUM = 2 BLOCK_SIZE = 16384 USE_BLOOM_FILTER = FALSE TABLET_SIZE = 134217728 PCTFREE = 0 |\n+-------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n1 row in set\n",
            "obclient> SHOW VARIABLES LIKE 'recyclebin';\n+---------------+-------+\n| VARIABLE_NAME | VALUE |\n+---------------+-------+\n| recyclebin    | ON    |\n+---------------+-------+\n1 row in set\n",
            "obclient> SHOW RECYCLEBIN;\n+-----------------------------------+---------------+-------+------------------------------+\n| OBJECT_NAME                       | ORIGINAL_NAME | TYPE  | CREATETIME                   |\n+-----------------------------------+---------------+-------+------------------------------+\n| RECYCLE_$_100004_1634807168766392 | TBL1          | TABLE | 21-OCT-21 05.06.08.767109 PM |\n| RECYCLE_$_100004_1634807177792816 | V1            | VIEW  | 21-OCT-21 05.06.17.791967 PM |\n+-----------------------------------+---------------+-------+------------------------------+\n2 rows in set\n",
            "obclient> SET ob_enable_show_trace = 1;\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE t1(c1 INT,c2 INT,c3 INT);\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO t1 VALUES(1,1,1);\nQuery OK, 1 rows affected\n\nobclient> INSERT INTO t1 VALUES(2,2,2);\nQuery OK, 1 rows affected\n\nobclient> SELECT/*+PARALLEL(2)*/ COUNT(*) FROM t1;\n+----------+\n| COUNT(*) |\n+----------+\n|        2 |\n+----------+\n1 row in set\n\n\nobclient> SHOW TRACE FORMAT='JSON'\\G\n*************************** 1. row ***************************\nSHOW_TRACE_JSON: [{\"logs\":null,\"tags\":[[{\"sess_id\":3221487706},{\"action_name\":\"\"},{\"module_name\":\"\"},{\"client_info\":\"\"},{\"receive_ts\":1686736593090296},{\"log_trace_id\":\"YB42AC1E87DE-0005FDE6754F77C2-0-0\"}]],\"elapse\":14829,\"end_ts\":\"14-JUN-23 05.56.33.105170 PM\",\"parent\":\"0005fe13-f775-f6ae-7a1d-f670fd124e4b\",\"span_id\":\"0005fe13-f775-f725-9e96-fff3072b9b9a\",\"start_ts\":\"14-JUN-23 05.56.33.090341 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"com_query_process\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":14810,\"end_ts\":\"14-JUN-23 05.56.33.105157 PM\",\"parent\":\"0005fe13-f775-f725-9e96-fff3072b9b9a\",\"span_id\":\"0005fe13-f775-f72b-0b95-3f2260bf1134\",\"start_ts\":\"14-JUN-23 05.56.33.090347 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"mpquery_single_stmt\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":[[{\"sql_text\":\"SHOW TRACE FORMAT='JSON'\"}],[{\"hit_plan\":false}],[{\"sql_id\":\"D2A6E68D54F4B888F9443FD4EABB490C\"},{\"database_id\":201006},{\"plan_hash\":10171894614078661866}]],\"elapse\":3023,\"end_ts\":\"14-JUN-23 05.56.33.093385 PM\",\"parent\":\"0005fe13-f775-f72b-0b95-3f2260bf1134\",\"span_id\":\"0005fe13-f775-f73a-97f4-8cf1d45a057d\",\"start_ts\":\"14-JUN-23 05.56.33.090362 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"sql_compile\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":6,\"end_ts\":\"14-JUN-23 05.56.33.090372 PM\",\"parent\":\"0005fe13-f775-f73a-97f4-8cf1d45a057d\",\"span_id\":\"0005fe13-f775-f73e-81df-abe0749fb2dc\",\"start_ts\":\"14-JUN-23 05.56.33.090366 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"pc_get_plan\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":2953,\"end_ts\":\"14-JUN-23 05.56.33.093369 PM\",\"parent\":\"0005fe13-f775-f73a-97f4-8cf1d45a057d\",\"span_id\":\"0005fe13-f775-f770-5f63-c6244ec2d2bd\",\"start_ts\":\"14-JUN-23 05.56.33.090416 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"hard_parse\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":27,\"end_ts\":\"14-JUN-23 05.56.33.090444 PM\",\"parent\":\"0005fe13-f775-f770-5f63-c6244ec2d2bd\",\"span_id\":\"0005fe13-f775-f771-097e-2e4df274b94d\",\"start_ts\":\"14-JUN-23 05.56.33.090417 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"parse\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":1029,\"end_ts\":\"14-JUN-23 05.56.33.091497 PM\",\"parent\":\"0005fe13-f775-f770-5f63-c6244ec2d2bd\",\"span_id\":\"0005fe13-f775-f7a4-b2f9-37444f7eaa75\",\"start_ts\":\"14-JUN-23 05.56.33.090468 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"resolve\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":983,\"end_ts\":\"14-JUN-23 05.56.33.092530 PM\",\"parent\":\"0005fe13-f775-f770-5f63-c6244ec2d2bd\",\"span_id\":\"0005fe13-f775-fbdb-ad93-a44d9f9c1b6b\",\"start_ts\":\"14-JUN-23 05.56.33.091547 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"rewrite\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":498,\"end_ts\":\"14-JUN-23 05.56.33.093046 PM\",\"parent\":\"0005fe13-f775-f770-5f63-c6244ec2d2bd\",\"span_id\":\"0005fe13-f775-ffc4-6b32-0a4236bfb075\",\"start_ts\":\"14-JUN-23 05.56.33.092548 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"optimize\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":180,\"end_ts\":\"14-JUN-23 05.56.33.093242 PM\",\"parent\":\"0005fe13-f775-f770-5f63-c6244ec2d2bd\",\"span_id\":\"0005fe13-f776-01c6-3512-e03078f5b661\",\"start_ts\":\"14-JUN-23 05.56.33.093062 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"code_generate\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":11691,\"end_ts\":\"14-JUN-23 05.56.33.105088 PM\",\"parent\":\"0005fe13-f775-f72b-0b95-3f2260bf1134\",\"span_id\":\"0005fe13-f776-0315-b92a-3917bb7eb16e\",\"start_ts\":\"14-JUN-23 05.56.33.093397 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"sql_execute\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":37,\"end_ts\":\"14-JUN-23 05.56.33.093434 PM\",\"parent\":\"0005fe13-f776-0315-b92a-3917bb7eb16e\",\"span_id\":\"0005fe13-f776-0315-80dd-31db8fd59a4c\",\"start_ts\":\"14-JUN-23 05.56.33.093397 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"open\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":11559,\"end_ts\":\"14-JUN-23 05.56.33.105002 PM\",\"parent\":\"0005fe13-f776-0315-b92a-3917bb7eb16e\",\"span_id\":\"0005fe13-f776-0343-0d09-20e62196e201\",\"start_ts\":\"14-JUN-23 05.56.33.093443 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"response_result\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":60,\"end_ts\":\"14-JUN-23 05.56.33.093512 PM\",\"parent\":\"0005fe13-f776-0343-0d09-20e62196e201\",\"span_id\":\"0005fe13-f776-034c-ca80-255b49724557\",\"start_ts\":\"14-JUN-23 05.56.33.093452 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"do_local_das_task\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":[[{\"sql_text\":\"START TRANSACTION WITH CONSISTENT SNAPSHOT\"}],[{\"sql_id\":\"7F33FD22651F99E8AB2BAC5428623BCD\"},{\"database_id\":201001}],[{\"hit_plan\":false}]],\"elapse\":111,\"end_ts\":\"14-JUN-23 05.56.33.094108 PM\",\"parent\":\"0005fe13-f776-0343-0d09-20e62196e201\",\"span_id\":\"0005fe13-f776-056d-f2aa-701742ef8bfe\",\"start_ts\":\"14-JUN-23 05.56.33.093997 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"sql_compile\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":7,\"end_ts\":\"14-JUN-23 05.56.33.094005 PM\",\"parent\":\"0005fe13-f776-056d-f2aa-701742ef8bfe\",\"span_id\":\"0005fe13-f776-056e-88fb-dba1544109d5\",\"start_ts\":\"14-JUN-23 05.56.33.093998 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"pc_get_plan\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":65,\"end_ts\":\"14-JUN-23 05.56.33.094097 PM\",\"parent\":\"0005fe13-f776-056d-f2aa-701742ef8bfe\",\"span_id\":\"0005fe13-f776-0590-0540-58a0bf5fe462\",\"start_ts\":\"14-JUN-23 05.56.33.094032 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"hard_parse\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":23,\"end_ts\":\"14-JUN-23 05.56.33.094055 PM\",\"parent\":\"0005fe13-f776-0590-0540-58a0bf5fe462\",\"span_id\":\"0005fe13-f776-0590-099e-6e48209edfab\",\"start_ts\":\"14-JUN-23 05.56.33.094032 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"parse\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":10,\"end_ts\":\"14-JUN-23 05.56.33.094085 PM\",\"parent\":\"0005fe13-f776-0590-0540-58a0bf5fe462\",\"span_id\":\"0005fe13-f776-05bb-b66a-bf3b9895c04d\",\"start_ts\":\"14-JUN-23 05.56.33.094075 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"resolve\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":34,\"end_ts\":\"14-JUN-23 05.56.33.094180 PM\",\"parent\":\"0005fe13-f776-0343-0d09-20e62196e201\",\"span_id\":\"0005fe13-f776-0602-16e1-b249aecff1d9\",\"start_ts\":\"14-JUN-23 05.56.33.094146 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"open\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":25,\"end_ts\":\"14-JUN-23 05.56.33.094171 PM\",\"parent\":\"0005fe13-f776-0602-16e1-b249aecff1d9\",\"span_id\":\"0005fe13-f776-0602-a4d5-c18a35861355\",\"start_ts\":\"14-JUN-23 05.56.33.094146 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"cmd_open\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":[[{\"trans_id\":0}]],\"elapse\":1,\"end_ts\":\"14-JUN-23 05.56.33.094148 PM\",\"parent\":\"0005fe13-f776-0602-a4d5-c18a35861355\",\"span_id\":\"0005fe13-f776-0603-9b42-705d94f589e5\",\"start_ts\":\"14-JUN-23 05.56.33.094147 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"end_transaction\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":1,\"end_ts\":\"14-JUN-23 05.56.33.094202 PM\",\"parent\":\"0005fe13-f776-0343-0d09-20e62196e201\",\"span_id\":\"0005fe13-f776-0639-1902-8ebfa41d0abd\",\"start_ts\":\"14-JUN-23 05.56.33.094201 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"close\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":1150,\"end_ts\":\"14-JUN-23 05.56.33.095400 PM\",\"parent\":\"0005fe13-f776-0343-0d09-20e62196e201\",\"span_id\":\"0005fe13-f776-066a-7b64-42f9c85d5f57\",\"start_ts\":\"14-JUN-23 05.56.33.094250 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"inner_execute_read\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":[[{\"sql_text\":\"SELECT svr_ip, svr_port, tenant_id, trace_id, request_id, span_id, parent_span_id, span_name, ref_type, start_ts, end_ts, tags, logs FROM __all_virtual_trace_span_info WHERE tenant_id = 1004 AND trace_id = '0005fe13-f62f-e8cd-fad7-64c5c4fa3de4'\"}],[{\"sql_id\":\"9B307250A34F95FE531FDC05F9F87300\"},{\"database_id\":201001},{\"plan_hash\":13345609059733987708},{\"hit_plan\":true}]],\"elapse\":98,\"end_ts\":\"14-JUN-23 05.56.33.094360 PM\",\"parent\":\"0005fe13-f776-066a-7b64-42f9c85d5f57\",\"span_id\":\"0005fe13-f776-0676-d9f4-b4878c00d329\",\"start_ts\":\"14-JUN-23 05.56.33.094262 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"sql_compile\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":76,\"end_ts\":\"14-JUN-23 05.56.33.094339 PM\",\"parent\":\"0005fe13-f776-0676-d9f4-b4878c00d329\",\"span_id\":\"0005fe13-f776-0677-e2f1-d2ec6292745b\",\"start_ts\":\"14-JUN-23 05.56.33.094263 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"pc_get_plan\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":5,\"end_ts\":\"14-JUN-23 05.56.33.094375 PM\",\"parent\":\"0005fe13-f776-066a-7b64-42f9c85d5f57\",\"span_id\":\"0005fe13-f776-06e2-3f34-7d006345e36c\",\"start_ts\":\"14-JUN-23 05.56.33.094370 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"open\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":41,\"end_ts\":\"14-JUN-23 05.56.33.094439 PM\",\"parent\":\"0005fe13-f776-066a-7b64-42f9c85d5f57\",\"span_id\":\"0005fe13-f776-06fe-51d8-da0d02773219\",\"start_ts\":\"14-JUN-23 05.56.33.094398 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"do_local_das_task\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":28,\"end_ts\":\"14-JUN-23 05.56.33.096273 PM\",\"parent\":\"0005fe13-f776-0343-0d09-20e62196e201\",\"span_id\":\"0005fe13-f776-0e35-874a-f30554d6aaa5\",\"start_ts\":\"14-JUN-23 05.56.33.096245 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"close\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":12,\"end_ts\":\"14-JUN-23 05.56.33.096259 PM\",\"parent\":\"0005fe13-f776-0e35-874a-f30554d6aaa5\",\"span_id\":\"0005fe13-f776-0e37-77fe-804fdfe8d3e5\",\"start_ts\":\"14-JUN-23 05.56.33.096247 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"close_das_task\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":129,\"end_ts\":\"14-JUN-23 05.56.33.096417 PM\",\"parent\":\"0005fe13-f776-0343-0d09-20e62196e201\",\"span_id\":\"0005fe13-f776-0e60-c6c4-1bc243b72c60\",\"start_ts\":\"14-JUN-23 05.56.33.096288 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"inner_commit\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":[[{\"sql_id\":\"1D0BA376E273B9D622641124D8C59264\"},{\"database_id\":201001}],[{\"sql_text\":\"COMMIT\"}]],\"elapse\":47,\"end_ts\":\"14-JUN-23 05.56.33.096343 PM\",\"parent\":\"0005fe13-f776-0e60-c6c4-1bc243b72c60\",\"span_id\":\"0005fe13-f776-0e68-7082-78d6d27ff6b3\",\"start_ts\":\"14-JUN-23 05.56.33.096296 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"sql_compile\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":40,\"end_ts\":\"14-JUN-23 05.56.33.096337 PM\",\"parent\":\"0005fe13-f776-0e68-7082-78d6d27ff6b3\",\"span_id\":\"0005fe13-f776-0e69-86ed-974f57a2f1bf\",\"start_ts\":\"14-JUN-23 05.56.33.096297 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"hard_parse\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":8,\"end_ts\":\"14-JUN-23 05.56.33.096306 PM\",\"parent\":\"0005fe13-f776-0e69-86ed-974f57a2f1bf\",\"span_id\":\"0005fe13-f776-0e6a-cf72-65f53acbe223\",\"start_ts\":\"14-JUN-23 05.56.33.096298 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"parse\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":5,\"end_ts\":\"14-JUN-23 05.56.33.096326 PM\",\"parent\":\"0005fe13-f776-0e69-86ed-974f57a2f1bf\",\"span_id\":\"0005fe13-f776-0e81-49fb-8ed91cbaf8d8\",\"start_ts\":\"14-JUN-23 05.56.33.096321 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"resolve\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":32,\"end_ts\":\"14-JUN-23 05.56.33.096385 PM\",\"parent\":\"0005fe13-f776-0e60-c6c4-1bc243b72c60\",\"span_id\":\"0005fe13-f776-0ea1-af05-045e858dee98\",\"start_ts\":\"14-JUN-23 05.56.33.096353 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"open\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":27,\"end_ts\":\"14-JUN-23 05.56.33.096380 PM\",\"parent\":\"0005fe13-f776-0ea1-af05-045e858dee98\",\"span_id\":\"0005fe13-f776-0ea1-6e52-5c0a2cda5830\",\"start_ts\":\"14-JUN-23 05.56.33.096353 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"cmd_open\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":[[{\"trans_id\":643503}]],\"elapse\":16,\"end_ts\":\"14-JUN-23 05.56.33.096370 PM\",\"parent\":\"0005fe13-f776-0ea1-6e52-5c0a2cda5830\",\"span_id\":\"0005fe13-f776-0ea2-e9aa-723fc5771a26\",\"start_ts\":\"14-JUN-23 05.56.33.096354 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"end_transaction\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":0,\"end_ts\":\"14-JUN-23 05.56.33.096398 PM\",\"parent\":\"0005fe13-f776-0e60-c6c4-1bc243b72c60\",\"span_id\":\"0005fe13-f776-0ece-38ab-2587028fd24c\",\"start_ts\":\"14-JUN-23 05.56.33.096398 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"close\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":58,\"end_ts\":\"14-JUN-23 05.56.33.105077 PM\",\"parent\":\"0005fe13-f776-0315-b92a-3917bb7eb16e\",\"span_id\":\"0005fe13-f776-307b-7ddf-d182c73d91c2\",\"start_ts\":\"14-JUN-23 05.56.33.105019 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"close\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":15,\"end_ts\":\"14-JUN-23 05.56.33.105036 PM\",\"parent\":\"0005fe13-f776-307b-7ddf-d182c73d91c2\",\"span_id\":\"0005fe13-f776-307d-9ca8-e6153b7afdbe\",\"start_ts\":\"14-JUN-23 05.56.33.105021 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"close_das_task\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882}]\n1 row in set\n"
        ],
        "Detailed Examples": [
            "查看表 tbl1 的创建信息。",
            "obclient> SHOW CREATE TABLE tbl1;\n+-------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| TABLE | CREATE TABLE                                                                                                                                                                          |\n+-------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| TBL1  | CREATE TABLE \"TBL1\" (\n  \"COL1\" NUMBER(38),\n  \"COL2\" NUMBER(38)\n) COMPRESS FOR ARCHIVE REPLICA_NUM = 2 BLOCK_SIZE = 16384 USE_BLOOM_FILTER = FALSE TABLET_SIZE = 134217728 PCTFREE = 0 |\n+-------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n1 row in set\n",
            "查看回收站是否开启。",
            "obclient> SHOW VARIABLES LIKE 'recyclebin';\n+---------------+-------+\n| VARIABLE_NAME | VALUE |\n+---------------+-------+\n| recyclebin    | ON    |\n+---------------+-------+\n1 row in set\n",
            "查看回收站中的内容。",
            "obclient> SHOW RECYCLEBIN;\n+-----------------------------------+---------------+-------+------------------------------+\n| OBJECT_NAME                       | ORIGINAL_NAME | TYPE  | CREATETIME                   |\n+-----------------------------------+---------------+-------+------------------------------+\n| RECYCLE_$_100004_1634807168766392 | TBL1          | TABLE | 21-OCT-21 05.06.08.767109 PM |\n| RECYCLE_$_100004_1634807177792816 | V1            | VIEW  | 21-OCT-21 05.06.17.791967 PM |\n+-----------------------------------+---------------+-------+------------------------------+\n2 rows in set\n",
            "使用 SHOW TRACE 查看某一 SQL 的执行信息，并以 JSON 的格式输出。",
            "obclient> SET ob_enable_show_trace = 1;\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE t1(c1 INT,c2 INT,c3 INT);\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO t1 VALUES(1,1,1);\nQuery OK, 1 rows affected\n\nobclient> INSERT INTO t1 VALUES(2,2,2);\nQuery OK, 1 rows affected\n\nobclient> SELECT/*+PARALLEL(2)*/ COUNT(*) FROM t1;\n+----------+\n| COUNT(*) |\n+----------+\n|        2 |\n+----------+\n1 row in set\n\n\nobclient> SHOW TRACE FORMAT='JSON'\\G\n*************************** 1. row ***************************\nSHOW_TRACE_JSON: [{\"logs\":null,\"tags\":[[{\"sess_id\":3221487706},{\"action_name\":\"\"},{\"module_name\":\"\"},{\"client_info\":\"\"},{\"receive_ts\":1686736593090296},{\"log_trace_id\":\"YB42AC1E87DE-0005FDE6754F77C2-0-0\"}]],\"elapse\":14829,\"end_ts\":\"14-JUN-23 05.56.33.105170 PM\",\"parent\":\"0005fe13-f775-f6ae-7a1d-f670fd124e4b\",\"span_id\":\"0005fe13-f775-f725-9e96-fff3072b9b9a\",\"start_ts\":\"14-JUN-23 05.56.33.090341 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"com_query_process\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":14810,\"end_ts\":\"14-JUN-23 05.56.33.105157 PM\",\"parent\":\"0005fe13-f775-f725-9e96-fff3072b9b9a\",\"span_id\":\"0005fe13-f775-f72b-0b95-3f2260bf1134\",\"start_ts\":\"14-JUN-23 05.56.33.090347 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"mpquery_single_stmt\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":[[{\"sql_text\":\"SHOW TRACE FORMAT='JSON'\"}],[{\"hit_plan\":false}],[{\"sql_id\":\"D2A6E68D54F4B888F9443FD4EABB490C\"},{\"database_id\":201006},{\"plan_hash\":10171894614078661866}]],\"elapse\":3023,\"end_ts\":\"14-JUN-23 05.56.33.093385 PM\",\"parent\":\"0005fe13-f775-f72b-0b95-3f2260bf1134\",\"span_id\":\"0005fe13-f775-f73a-97f4-8cf1d45a057d\",\"start_ts\":\"14-JUN-23 05.56.33.090362 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"sql_compile\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":6,\"end_ts\":\"14-JUN-23 05.56.33.090372 PM\",\"parent\":\"0005fe13-f775-f73a-97f4-8cf1d45a057d\",\"span_id\":\"0005fe13-f775-f73e-81df-abe0749fb2dc\",\"start_ts\":\"14-JUN-23 05.56.33.090366 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"pc_get_plan\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":2953,\"end_ts\":\"14-JUN-23 05.56.33.093369 PM\",\"parent\":\"0005fe13-f775-f73a-97f4-8cf1d45a057d\",\"span_id\":\"0005fe13-f775-f770-5f63-c6244ec2d2bd\",\"start_ts\":\"14-JUN-23 05.56.33.090416 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"hard_parse\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":27,\"end_ts\":\"14-JUN-23 05.56.33.090444 PM\",\"parent\":\"0005fe13-f775-f770-5f63-c6244ec2d2bd\",\"span_id\":\"0005fe13-f775-f771-097e-2e4df274b94d\",\"start_ts\":\"14-JUN-23 05.56.33.090417 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"parse\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":1029,\"end_ts\":\"14-JUN-23 05.56.33.091497 PM\",\"parent\":\"0005fe13-f775-f770-5f63-c6244ec2d2bd\",\"span_id\":\"0005fe13-f775-f7a4-b2f9-37444f7eaa75\",\"start_ts\":\"14-JUN-23 05.56.33.090468 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"resolve\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":983,\"end_ts\":\"14-JUN-23 05.56.33.092530 PM\",\"parent\":\"0005fe13-f775-f770-5f63-c6244ec2d2bd\",\"span_id\":\"0005fe13-f775-fbdb-ad93-a44d9f9c1b6b\",\"start_ts\":\"14-JUN-23 05.56.33.091547 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"rewrite\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":498,\"end_ts\":\"14-JUN-23 05.56.33.093046 PM\",\"parent\":\"0005fe13-f775-f770-5f63-c6244ec2d2bd\",\"span_id\":\"0005fe13-f775-ffc4-6b32-0a4236bfb075\",\"start_ts\":\"14-JUN-23 05.56.33.092548 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"optimize\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":180,\"end_ts\":\"14-JUN-23 05.56.33.093242 PM\",\"parent\":\"0005fe13-f775-f770-5f63-c6244ec2d2bd\",\"span_id\":\"0005fe13-f776-01c6-3512-e03078f5b661\",\"start_ts\":\"14-JUN-23 05.56.33.093062 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"code_generate\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":11691,\"end_ts\":\"14-JUN-23 05.56.33.105088 PM\",\"parent\":\"0005fe13-f775-f72b-0b95-3f2260bf1134\",\"span_id\":\"0005fe13-f776-0315-b92a-3917bb7eb16e\",\"start_ts\":\"14-JUN-23 05.56.33.093397 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"sql_execute\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":37,\"end_ts\":\"14-JUN-23 05.56.33.093434 PM\",\"parent\":\"0005fe13-f776-0315-b92a-3917bb7eb16e\",\"span_id\":\"0005fe13-f776-0315-80dd-31db8fd59a4c\",\"start_ts\":\"14-JUN-23 05.56.33.093397 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"open\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":11559,\"end_ts\":\"14-JUN-23 05.56.33.105002 PM\",\"parent\":\"0005fe13-f776-0315-b92a-3917bb7eb16e\",\"span_id\":\"0005fe13-f776-0343-0d09-20e62196e201\",\"start_ts\":\"14-JUN-23 05.56.33.093443 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"response_result\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":60,\"end_ts\":\"14-JUN-23 05.56.33.093512 PM\",\"parent\":\"0005fe13-f776-0343-0d09-20e62196e201\",\"span_id\":\"0005fe13-f776-034c-ca80-255b49724557\",\"start_ts\":\"14-JUN-23 05.56.33.093452 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"do_local_das_task\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":[[{\"sql_text\":\"START TRANSACTION WITH CONSISTENT SNAPSHOT\"}],[{\"sql_id\":\"7F33FD22651F99E8AB2BAC5428623BCD\"},{\"database_id\":201001}],[{\"hit_plan\":false}]],\"elapse\":111,\"end_ts\":\"14-JUN-23 05.56.33.094108 PM\",\"parent\":\"0005fe13-f776-0343-0d09-20e62196e201\",\"span_id\":\"0005fe13-f776-056d-f2aa-701742ef8bfe\",\"start_ts\":\"14-JUN-23 05.56.33.093997 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"sql_compile\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":7,\"end_ts\":\"14-JUN-23 05.56.33.094005 PM\",\"parent\":\"0005fe13-f776-056d-f2aa-701742ef8bfe\",\"span_id\":\"0005fe13-f776-056e-88fb-dba1544109d5\",\"start_ts\":\"14-JUN-23 05.56.33.093998 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"pc_get_plan\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":65,\"end_ts\":\"14-JUN-23 05.56.33.094097 PM\",\"parent\":\"0005fe13-f776-056d-f2aa-701742ef8bfe\",\"span_id\":\"0005fe13-f776-0590-0540-58a0bf5fe462\",\"start_ts\":\"14-JUN-23 05.56.33.094032 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"hard_parse\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":23,\"end_ts\":\"14-JUN-23 05.56.33.094055 PM\",\"parent\":\"0005fe13-f776-0590-0540-58a0bf5fe462\",\"span_id\":\"0005fe13-f776-0590-099e-6e48209edfab\",\"start_ts\":\"14-JUN-23 05.56.33.094032 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"parse\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":10,\"end_ts\":\"14-JUN-23 05.56.33.094085 PM\",\"parent\":\"0005fe13-f776-0590-0540-58a0bf5fe462\",\"span_id\":\"0005fe13-f776-05bb-b66a-bf3b9895c04d\",\"start_ts\":\"14-JUN-23 05.56.33.094075 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"resolve\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":34,\"end_ts\":\"14-JUN-23 05.56.33.094180 PM\",\"parent\":\"0005fe13-f776-0343-0d09-20e62196e201\",\"span_id\":\"0005fe13-f776-0602-16e1-b249aecff1d9\",\"start_ts\":\"14-JUN-23 05.56.33.094146 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"open\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":25,\"end_ts\":\"14-JUN-23 05.56.33.094171 PM\",\"parent\":\"0005fe13-f776-0602-16e1-b249aecff1d9\",\"span_id\":\"0005fe13-f776-0602-a4d5-c18a35861355\",\"start_ts\":\"14-JUN-23 05.56.33.094146 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"cmd_open\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":[[{\"trans_id\":0}]],\"elapse\":1,\"end_ts\":\"14-JUN-23 05.56.33.094148 PM\",\"parent\":\"0005fe13-f776-0602-a4d5-c18a35861355\",\"span_id\":\"0005fe13-f776-0603-9b42-705d94f589e5\",\"start_ts\":\"14-JUN-23 05.56.33.094147 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"end_transaction\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":1,\"end_ts\":\"14-JUN-23 05.56.33.094202 PM\",\"parent\":\"0005fe13-f776-0343-0d09-20e62196e201\",\"span_id\":\"0005fe13-f776-0639-1902-8ebfa41d0abd\",\"start_ts\":\"14-JUN-23 05.56.33.094201 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"close\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":1150,\"end_ts\":\"14-JUN-23 05.56.33.095400 PM\",\"parent\":\"0005fe13-f776-0343-0d09-20e62196e201\",\"span_id\":\"0005fe13-f776-066a-7b64-42f9c85d5f57\",\"start_ts\":\"14-JUN-23 05.56.33.094250 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"inner_execute_read\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":[[{\"sql_text\":\"SELECT svr_ip, svr_port, tenant_id, trace_id, request_id, span_id, parent_span_id, span_name, ref_type, start_ts, end_ts, tags, logs FROM __all_virtual_trace_span_info WHERE tenant_id = 1004 AND trace_id = '0005fe13-f62f-e8cd-fad7-64c5c4fa3de4'\"}],[{\"sql_id\":\"9B307250A34F95FE531FDC05F9F87300\"},{\"database_id\":201001},{\"plan_hash\":13345609059733987708},{\"hit_plan\":true}]],\"elapse\":98,\"end_ts\":\"14-JUN-23 05.56.33.094360 PM\",\"parent\":\"0005fe13-f776-066a-7b64-42f9c85d5f57\",\"span_id\":\"0005fe13-f776-0676-d9f4-b4878c00d329\",\"start_ts\":\"14-JUN-23 05.56.33.094262 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"sql_compile\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":76,\"end_ts\":\"14-JUN-23 05.56.33.094339 PM\",\"parent\":\"0005fe13-f776-0676-d9f4-b4878c00d329\",\"span_id\":\"0005fe13-f776-0677-e2f1-d2ec6292745b\",\"start_ts\":\"14-JUN-23 05.56.33.094263 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"pc_get_plan\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":5,\"end_ts\":\"14-JUN-23 05.56.33.094375 PM\",\"parent\":\"0005fe13-f776-066a-7b64-42f9c85d5f57\",\"span_id\":\"0005fe13-f776-06e2-3f34-7d006345e36c\",\"start_ts\":\"14-JUN-23 05.56.33.094370 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"open\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":41,\"end_ts\":\"14-JUN-23 05.56.33.094439 PM\",\"parent\":\"0005fe13-f776-066a-7b64-42f9c85d5f57\",\"span_id\":\"0005fe13-f776-06fe-51d8-da0d02773219\",\"start_ts\":\"14-JUN-23 05.56.33.094398 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"do_local_das_task\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":28,\"end_ts\":\"14-JUN-23 05.56.33.096273 PM\",\"parent\":\"0005fe13-f776-0343-0d09-20e62196e201\",\"span_id\":\"0005fe13-f776-0e35-874a-f30554d6aaa5\",\"start_ts\":\"14-JUN-23 05.56.33.096245 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"close\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":12,\"end_ts\":\"14-JUN-23 05.56.33.096259 PM\",\"parent\":\"0005fe13-f776-0e35-874a-f30554d6aaa5\",\"span_id\":\"0005fe13-f776-0e37-77fe-804fdfe8d3e5\",\"start_ts\":\"14-JUN-23 05.56.33.096247 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"close_das_task\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":129,\"end_ts\":\"14-JUN-23 05.56.33.096417 PM\",\"parent\":\"0005fe13-f776-0343-0d09-20e62196e201\",\"span_id\":\"0005fe13-f776-0e60-c6c4-1bc243b72c60\",\"start_ts\":\"14-JUN-23 05.56.33.096288 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"inner_commit\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":[[{\"sql_id\":\"1D0BA376E273B9D622641124D8C59264\"},{\"database_id\":201001}],[{\"sql_text\":\"COMMIT\"}]],\"elapse\":47,\"end_ts\":\"14-JUN-23 05.56.33.096343 PM\",\"parent\":\"0005fe13-f776-0e60-c6c4-1bc243b72c60\",\"span_id\":\"0005fe13-f776-0e68-7082-78d6d27ff6b3\",\"start_ts\":\"14-JUN-23 05.56.33.096296 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"sql_compile\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":40,\"end_ts\":\"14-JUN-23 05.56.33.096337 PM\",\"parent\":\"0005fe13-f776-0e68-7082-78d6d27ff6b3\",\"span_id\":\"0005fe13-f776-0e69-86ed-974f57a2f1bf\",\"start_ts\":\"14-JUN-23 05.56.33.096297 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"hard_parse\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":8,\"end_ts\":\"14-JUN-23 05.56.33.096306 PM\",\"parent\":\"0005fe13-f776-0e69-86ed-974f57a2f1bf\",\"span_id\":\"0005fe13-f776-0e6a-cf72-65f53acbe223\",\"start_ts\":\"14-JUN-23 05.56.33.096298 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"parse\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":5,\"end_ts\":\"14-JUN-23 05.56.33.096326 PM\",\"parent\":\"0005fe13-f776-0e69-86ed-974f57a2f1bf\",\"span_id\":\"0005fe13-f776-0e81-49fb-8ed91cbaf8d8\",\"start_ts\":\"14-JUN-23 05.56.33.096321 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"resolve\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":32,\"end_ts\":\"14-JUN-23 05.56.33.096385 PM\",\"parent\":\"0005fe13-f776-0e60-c6c4-1bc243b72c60\",\"span_id\":\"0005fe13-f776-0ea1-af05-045e858dee98\",\"start_ts\":\"14-JUN-23 05.56.33.096353 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"open\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":27,\"end_ts\":\"14-JUN-23 05.56.33.096380 PM\",\"parent\":\"0005fe13-f776-0ea1-af05-045e858dee98\",\"span_id\":\"0005fe13-f776-0ea1-6e52-5c0a2cda5830\",\"start_ts\":\"14-JUN-23 05.56.33.096353 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"cmd_open\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":[[{\"trans_id\":643503}]],\"elapse\":16,\"end_ts\":\"14-JUN-23 05.56.33.096370 PM\",\"parent\":\"0005fe13-f776-0ea1-6e52-5c0a2cda5830\",\"span_id\":\"0005fe13-f776-0ea2-e9aa-723fc5771a26\",\"start_ts\":\"14-JUN-23 05.56.33.096354 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"end_transaction\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":0,\"end_ts\":\"14-JUN-23 05.56.33.096398 PM\",\"parent\":\"0005fe13-f776-0e60-c6c4-1bc243b72c60\",\"span_id\":\"0005fe13-f776-0ece-38ab-2587028fd24c\",\"start_ts\":\"14-JUN-23 05.56.33.096398 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"close\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":58,\"end_ts\":\"14-JUN-23 05.56.33.105077 PM\",\"parent\":\"0005fe13-f776-0315-b92a-3917bb7eb16e\",\"span_id\":\"0005fe13-f776-307b-7ddf-d182c73d91c2\",\"start_ts\":\"14-JUN-23 05.56.33.105019 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"close\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882},{\"logs\":null,\"tags\":null,\"elapse\":15,\"end_ts\":\"14-JUN-23 05.56.33.105036 PM\",\"parent\":\"0005fe13-f776-307b-7ddf-d182c73d91c2\",\"span_id\":\"0005fe13-f776-307d-9ca8-e6153b7afdbe\",\"start_ts\":\"14-JUN-23 05.56.33.105021 PM\",\"trace_id\":\"0005fe13-f62f-e8cd-fad7-64c5c4fa3de4\",\"span_name\":\"close_das_task\",\"tenant_id\":1004,\"rec_svr_ip\":\"172.xx.xxx.xxx\",\"rec_svr_port\":2882}]\n1 row in set\n"
        ]
    },
    "SHRINK": {
        "Title": [
            "SHRINK"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054305"
        ],
        "Category": [
            "DCL"
        ],
        "Feature": "ALTER TABLE table_name SHRINK SPACE;\n",
        "Description": [
            "该语句会将表的数据重写。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\ntable_name\n表名。\n\n\n"
        ],
        "Examples": [
            "obclient> ALTER TABLE tbl1 SHRINK SPACE;\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "将表 tbl1 的数据重写。",
            "obclient> ALTER TABLE tbl1 SHRINK SPACE;\nQuery OK, 0 rows affected\n"
        ]
    },
    "SIMPLE SELECT": {
        "Title": [
            "SIMPLE SELECT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054666"
        ],
        "Category": [
            "DML"
        ],
        "Feature": "simple_select:\n    SELECT [ hint_options ] [ DISTINCT | UNIQUE | ALL] select_expr_list\n    FROM from_list\n    [WHERE condition]\n    [hierarchical_query_clause]\n    [GROUP BY group_expression_list\n        [{ROLLUP | CUBE | GROUPING SETS} group_expression_list]\n        [HAVING condition]\n     ]\n    [ORDER BY order_expression_list]\n    [FOR UPDATE [OF column] [ {NOWAIT | WAIT integer | SKIP LOCKED } ] ]\n    [row_limiting_clause ]\n\nselect_expr_list:\n    table_name.*\n    | table_alias_name.*\n    | expr [[AS] column_alias_name]\n    | sequence_name.{ CURRVAL|NEXTVAL }@dblink_name\n\nfrom_list:\n    table_reference [, table_reference...]\n\ntable_reference:\n    simple_table\n    | joined_table\n    | pivot_clause\n    | unpivot_clause\n    | table_name@dblink_name\n\n\nsimple_table:\n    (table_factor [partition_option])[table_alias_name]\n    | (select_stmt)  table_alias_name\n    | (table_reference_list)\n\njoined_table:\n    table_reference [INNER] JOIN simple_table [join_condition]\n    | table_reference outer_join_type JOIN simple_table join_condition\n\npartition_option:\n    PARTITION (partition_name_list)\n\npartition_name_list:\n    partition_name [, partition_name...]\n\nouter_join_type:\n    {LEFT | RIGHT | FULL} [OUTER]\n\njoin_condition:\n    ON expression\n\ncondition:\n    expression\n\ngroup_expression_list:\n    group_expression [, group_expression...]\n\ngroup_expression:\n    expression [ASC | DESC]\n\norder_expression_list:\n    order_expression [, order_expression...]\n\norder_expression:\n    expression [ASC | DESC]\n\nrow_limiting_clause:\n    [ OFFSET offset { ROW | ROWS } ]\n    [ FETCH { FIRST | NEXT } [ { rowcount | percent PERCENT } ]\n        { ROW | ROWS } { ONLY | WITH TIES } ]\n\npivot_clause：\n    PIVOT\n    (aggregate_function ( expr ) [[AS] alias ]\n      [, aggregate_function ( expr ) [[AS] alias ]... ]\n     pivot_for_clause\n     pivot_in_clause\n    )\n\npivot_for_clause：\n    FOR { column| ( column [, column... ]) }\n\npivot_in_clause\n    IN\n    ( { { expr| ( expr [, expr...] ) } [ [ AS] alias]... }\n       [, { { expr| ( expr [, expr...] ) } [ [ AS] alias] ...} ]\n     )\n\nunpivot_clause ：\n    UNPIVOT [ {INCLUDE | EXCLUDE} NULLS ]\n    ( { column | ( column [, column... ]) }\n     pivot_for_clause\n     unpivot_in_clause\n     )\n\nunpivot_in_clause：\n    IN\n    ( { column | ( column [, column... ]) }[ AS { literal | ( literal [, literal... ]) } ]\n        [, { column | ( column [, column... ] ) }[ AS {literal | ( literal [, literal... ]) } ]]\n    )\n\nhierarchical_query_clause:\n    [START WITH start_expression] CONNECT BY [NOCYCLE] \n        {PRIOR child_expr = parent_expr \n        | parent_expr = PRIOR child_expr} [ORDER SIBLINGS BY ...]\n",
        "Description": [
            "该语句用于从表或视图中查询数据。"
        ],
        "Illustration": [
            "\n\n\n字段\n描述\n\n\n\n\nhint_options\n指定 Hint 选项，为可选项。\n\n\nDISTINCT | UNIQUE | ALL\n在查询的数据中，可能会包含重复行。 \n      \n指定 DISTINCT 或 UNIQUE，表示在查询结果中相同的行只返回一行。DISTINCT 和 UNIQUE 是同义词。\n指定 ALL，表示在查询结果中返回所有的行。默认为 ALL。\n\n\n\nselect_expr_list\n指定从数据库列出要查询的表达式或列名，用\",“隔开。”*\"表示所有列。 \n      \ntable_name.*：指定从指定的表、视图中选择所有的列。\ntable_alias_name.：指定表、视图的别名。\nexpr [[AS] column_alias_name]：指定查询列或表达式的别名，AS 是可选的。\n\n\n\nFROM table_references\n指定选择数据的对象。\n\n\nPARTITION(partition_list)\n指定查询表的分区信息。例如：partition(p0,p1...)。\n\n\ntable_factor\n指定表名（基表、可更新视图）、特殊子查询等，并支持直接查询函数。\n\n\ntable_alias_name\n指定选择数据对象的别名。\n\n\njoined_table\n指定多表查询的联接方式。 \n      \n[INNER] JOIN 为内联接，INNER 为可选项。仅返回满足联接条件的数据。\n[OUTER] JOIN 为外联接，OUTER 为可选项。\nLEFT [OUTER] 表示左外联接。返回左表中的所有公共列值。\nRIGHT [OUTER] 表示右外联接。返回右表中的所有公共列值。\nFULL [OUTER] 表示全外联接。即除了内联接之外，两个表中未在内联接结果中返回的行将被保留并用空值扩展。\n\n\n\nON expression\n指定多表联接的联接条件。\n\n\nWHERE where_conditions\n指定筛选条件，查询结果中仅包含满足条件的数据，为可选项。where_conditions 为表达式。\n\n\nhierarchical_query_clause\n可选项，指定层次查询选项，详细介绍可参见下文 hierarchical_query_clause。\n\n\nGROUP BY group_by_list\n指定分组的字段，通常与聚合函数配合使用。 说明 如果 SELECT 子句后面的列中没有使用聚合函数的列，则在分组查询中，SELECT 子句后面的列必须出现在 GROUP BY 子句中。\n\n\nROLLUP group_expression_list\n合并 Group By 的分组，产生统计值。\n\n\nCUBE group_expression_list\n根据表达式列表中所有项的每个排列生成的分组进行聚合，并合并 GROUP BY 的分组，产生统计值。说明： \n      \nselect_expr_list 中指定的各项必须也出现在 CUBE expression_list 中。\nGROUP BY 子句可指定多个 CUBE 扩展以及多次出现的其他 GROUP BY 扩展（例如 ROLLUP、CUBE、GROUPING SETS）和各表达式中，参考语法为 SELECT select_expr_list FROM ... GROUP BY [..., ] CUBE (group_expression_list[, group_expression_list...]) [, ...]。\n如果未指定 ORDER BY 子句，则无法保证结果集的顺序。\n分组级别数或总计数为 2 的 n 次幂，其中 n 表示 CUBE 表达式列表中的项数，即分组个数是表达式项数的指数级增长，由此不建议使用表达式项数较大的场景。\n\n\n\nGROUPING SETS group_expression_list\n在一个查询中指定多个数据分组，分别产生统计值，并将指定的分组统计值聚合显示。GROUPING SETS 中可以指定单个字段或字段列表。\n\n\nHAVING search_confitions\n筛选分组后的各组数据。HAVING 子句与 WHERE 子句类似，但是 HAVING 子句可以使用累计函数（如 SUM、AVG 等）。\n\n\nORDER BY order_list\n指定结果集按照一个列或者多个列用来 ASC 或 DESC 显示查询结果。不指定 ASC 或者 DESC 时，默认为 ASC。 \n      \nASC 表示升序。\nDESC 表示降序。\n\n\n\nrow_limiting_clause\n用于限制查询返回的行，实现分页查询功能。可以指定偏移量，以及要返回的行数或行百分比。可以结合 ORDER BY 子句以确保排序顺序，从而获得一致的结果。\n\n\nOFFSET\n指定分页查询开始前要跳过的行数。offset 必须是数值或计算结果为数值的表达式。 \n      \n如果指定负数，则 offset 将被视为 0。\n如果指定为 NULL 或指定为大于或等于查询返回的行数的数量，则返回 0 行。\n如果 offset 包含一个分数，则该分数部分将被截断。\n如果未指定此子句，则偏移量为 0，从第一行开始分页。\n\n\n\nROW | ROWS\n表示单行或者多行，根据行数选择关键字，可以保证语义清晰。\n\n\nFETCH\n指定要返回的行数或行百分比。如果未指定此子句，则返回从 offset+1 开始的所有行。\n\n\nFIRST | NEXT\n表示获取第一个返回的行数或行百分比或者下一个返回的行数或行百分比。\n\n\nrowcount | percent PERCENT\n使用 rowcount 指定要返回的行数。rowcount 必须是一个数字或一个计算结果为数值的表达式。如果指定负数，则 rowcount 将被视为 0。如果 rowcount 大于从 rowcount+1 开始的可用行数，则返回所有可用行。如果 rowcount 包含一个分数，则该分数部分将被截断。如果 rowcount 为 NULL，则返回 0 行。使用 percent PERCENT 指定要返回的指定行总数的百分比。percent 必须是数值或计算为数值的表达式。如果指定为负数，则 percent 将被视为 0。如果 percent 为 NULL，则返回 0行。如果未指定 rowcount 或者 percent``PERCENT，则返回 1 行。\n\n\nONLY | WITH TIES\n指定 ONLY 返回指定的行数或行百分比。指定 WITH TIES 返回与上次获取的行具有相同排序键的其他行。如果使用 WITH TIES，则必须指定 ORDER BY 子句。如果未指定 ORDER BY 子句，则不会返回其他行。\n\n\nFOR UPDATE\n可选项，对查询结果所有行加上排他锁，以阻止其他事务的并发修改，或阻止在某些事务隔离级别时的并发读取。 \n      \nOF column：对于多表 Join 的场景，使用该子句可以指示仅锁定某些表（即 column 指定列所在的表）的查询结果行。\nNOWAIT：立即对查询结果行尝试加锁如果查询结果行中已经有被其他会话加锁的行，则执行失败。\nWAIT integer：等待 Interger 时间后再对查询结果行尝试加锁，如果查询结果行中已经有被其他会话加锁的行，则执行失败。\nSKIP LOCKED：如果查询结果中已经有被其他会话加锁的行，则会跳过这些加锁行，返回未被加锁的行。 \n        \n注意\nSKIP LOCKED 暂不支持多表 JOIN 加锁的场景。\n\n\n\n\npivot_clause\n将行旋转为列的子句。\n\n\naggregate_function\n指定聚合函数。\n\n\nexpr\n指定计算结果为常量值的表达式。 pivot_in_clause 只支持常量表达式。\n\n\nunpivot_clause\n将列旋转为行的子句。\n\n\ndblink_name\n指定要访问的数据库链接（即 dblink）的名称。\n\n\nsequence_name\n通过 dblink 访问远端数据库（包括 OceanBase 数据库和 Oracle 数据库）中的序列值，包括计算 SEQUENCE 对象的 NEXTVAL、CURRVAL 值。\n\n\n",
            "hierarchical_query_clause",
            "在层级查询中，可以在 SELECT 语句的列中使用一个特殊的伪列（pseudo column）LEVEL，表示等级，即节点的层次。由查询的起点开始算起，起点为 1，依次类推。使用层次查询时，才可以使用该字段。更多有关层级查询中伪列的信息，请参见 层次查询伪列。",
            "START WITH start_expression",
            "：可选项，指定层次查询中的根行（Root Row）。",
            "CONNECT BY",
            "：指定如何来确定父子关系，这里通常使用等值表达式，但其他表达式同样支持。",
            "NOCYCLE",
            "：当指定该关键字时，即使返回结果中有循环仍旧可以返回，并可以通过 ",
            "CONNECT_BY_ISCYCLE",
            " 虚拟列来指定哪里出现循环；否则，会给客户端报错。",
            "PRIOR child_expr = parent_expr | parent_expr = PRIOR child_expr",
            "：",
            "PRIOR",
            " 是一元运算符，表示参数中的列来自于父行（Parent Row），与一元的 + 和 - 具有相同的优先级。",
            "ORDER SIBLINGS BY",
            "：指定同一个层级行之间的排列顺序。",
            "\n注意\n如果层次查询中包含了 FOR UPDATE 子句，那么不支持以下的使用场景：\n\n如果子查询使用了 DISTINCT 关键字或者聚合，这种情况下将不能和 FOR UPDATE 一起使用。\n任何包含公共表达式（Common Table Expressions，CTE）的情景都不支持，即带有 WITH ... AS ... 子句的 SELECT 查询不能与 FOR UPDATE 同时使用。\n\n\n",
            "更多有关层次查询的使用信息，请参见 层次查询。"
        ],
        "Examples": [
            "obclient> CREATE TABLE tbl1 (id INT,name VARCHAR(10),num INT);\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO tbl1 VALUES (1, 'a',100),(2, 'b',200),(3, 'a',50);\nQuery OK, 3 rows affected\nRecords: 3  Duplicates: 0  Warnings: 0\n\nobclient> SELECT * FROM tbl1;\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    1 | a    |  100 |\n|    2 | b    |  200 |\n|    3 | a    |   50 |\n+------+------+------+\n3 rows in set\n\nobclient> SELECT name FROM tbl1;\n+------+\n| NAME |\n+------+\n| a    |\n| b    |\n| a    |\n+------+\n3 rows in set\n",
            "obclient> SELECT DISTINCT name FROM tbl1;\n+------+\n| NAME |\n+------+\n| a    |\n| b    |\n+------+\n2 rows in set\n",
            "obclient> SELECT id, name, num/2 AS avg FROM tbl1;\n+------+------+------+\n| ID   | NAME | AVG  |\n+------+------+------+\n|    1 | a    |   50 |\n|    2 | b    |  100 |\n|    3 | a    |   25 |\n+------+------+------+\n3 rows in set\n",
            "obclient> SELECT id, name, num FROM tbl1 WHERE name = 'a';\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    1 | a    |  100 |\n|    3 | a    |   50 |\n+------+------+------+\n2 rows in set\n",
            "obclient> SELECT name,SUM(num)  sum\n                FROM tbl1\n                GROUP BY name\n                HAVING SUM(num) < 160;\n+------+------+\n| NAME | SUM  |\n+------+------+\n| a    |  150 |\n+------+------+\n1 row in set\n",
            "obclient> SELECT * FROM tbl1 ORDER BY num ASC;\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    3 | a    |   50 |\n|    1 | a    |  100 |\n|    2 | b    |  200 |\n+------+------+------+\n3 rows in set\n",
            "obclient> SELECT * FROM tbl1 ORDER BY name DESC,num ASC;\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    2 | b    |  200 |\n|    3 | a    |   50 |\n|    1 | a    |  100 |\n+------+------+------+\n3 rows in set\n",
            "/* 在会话 1 中查询表 tbl1 中 id=1 的行并锁定 */\nobclient> SELECT * FROM tbl1 WHERE id=1 FOR UPDATE;\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    1 | a    |  100 |\n+------+------+------+\n1 row in set\n\n/* 在会话 2 中查询表 tbl1 中 id=1 或 id=2 的行并锁定 */\nobclient> SELECT * FROM tbl1 WHERE id=1 or id=2 FOR UPDATE;\nORA-30006: resource busy; acquire with WAIT timeout expired\n\nobclient> SELECT * FROM tbl1 WHERE id=1 or id=2 FOR UPDATE SKIP LOCKED;\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    2 | b    |  200 |\n+------+------+------+\n1 row in set\n",
            "obclient> CREATE TABLE group_tbl1 (group_id INT,job VARCHAR2(10),name VARCHAR2(10),salary INT);\nQuery OK, 0 rows affected\nobclient> INSERT INTO group_tbl1 VALUES(10,'Coding','Bruce',1000),\n    (10,'Programmer','Clair',1000),\n    (20,'Coding','Jason',2000),\n    (20,'Programmer','Joey',2000),\n    (30,'Coding','Rebecca',3000),\n    (30,'Programmer','Rex',3000);\nQuery OK, 6 rows affected\nRecords: 6  Duplicates: 0  Warnings: 0\n obclient> SELECT * FROM group_tbl1;\n +----------+------------+---------+--------+\n | GROUP_ID | JOB        | NAME    | SALARY |\n +----------+------------+---------+--------+\n |       10 | Coding     | Bruce   |   1000 |\n |       10 | Programmer | Clair   |   1000 |\n |       20 | Coding     | Jason   |   2000 |\n |       20 | Programmer | Joey    |   2000 |\n |       30 | Coding     | Rebecca |   3000 |\n |       30 | Programmer | Rex     |   3000 |\n +----------+------------+---------+--------+\n 6 rows in set\n obclient> SELECT group_id, salary, SUM(salary) FROM group_tbl1 GROUP BY CUBE (group_id, salary);\n +----------+--------+-------------+\n | GROUP_ID | SALARY | SUM(SALARY) |\n +----------+--------+-------------+\n |     NULL |   NULL |       12000 |\n |     NULL |   1000 |        2000 |\n |     NULL |   2000 |        4000 |\n |     NULL |   3000 |        6000 |\n |       10 |   NULL |        2000 |\n |       20 |   NULL |        4000 |\n |       30 |   NULL |        6000 |\n |       10 |   1000 |        2000 |\n |       20 |   2000 |        4000 |\n |       30 |   3000 |        6000 |\n +----------+--------+-------------+\n 10 rows in set\n",
            "obclient> SELECT name, num, COUNT(*) from tbl1 GROUP BY GROUPING SETS(name, num);\n+------+------+----------+\n| NAME | NUM  | COUNT(*) |\n+------+------+----------+\n| a    | NULL |        2 |\n| b    | NULL |        1 |\n| NULL |  100 |        1 |\n| NULL |  200 |        1 |\n| NULL |   50 |        1 |\n+------+------+----------+\n5 rows in set )\n",
            "obclient> CREATE TABLE emp(name VARCHAR2(50), num CHAR, phone VARCHAR2(50));\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO emp VALUES('ZhangSan', '1', '1234-5678'),('ZhangSan', '2', '3219-6066'),('ZhangSan', '3', '5365-9583');\nQuery OK, 3 rows affected\nRecords: 3  Duplicates: 0  Warnings: 0\n\nobclient> SELECT * FROM emp;\n+----------+------+-----------+\n| NAME     | NUM  | PHONE     |\n+----------+------+-----------+\n| ZhangSan | 1    | 1234-5678 |\n| ZhangSan | 2    | 3219-6066 |\n| ZhangSan | 3    | 5365-9583 |\n+----------+------+-----------+\n3 rows in set\n\n/* 将表 emp 中的行转为列 */\nobclient> SELECT * FROM emp PIVOT(MAX(phone) FOR num IN (1 AS home, 2 AS office, 3 AS mobile));\n+----------+-----------+-----------+-----------+\n| NAME     | HOME      | OFFICE    | MOBILE    |\n+----------+-----------+-----------+-----------+\n| ZhangSan | 1234-5678 | 3219-6066 | 5365-9583 |\n+----------+-----------+-----------+-----------+\n1 row in set\n\n/* 将表 emp 中的列转为行 */\nobclient> CREATE VIEW v_emp AS SELECT * FROM emp PIVOT(MAX(phone) FOR num IN (1 AS home, 2 AS office, 3 AS mobile));\nQuery OK, 0 rows affected\n\nobclient>  SELECT * FROM v_emp UNPIVOT(phone FOR num IN (home AS 1, office AS 2, mobile AS 3));\n+----------+-----+-----------+\n| NAME     | NUM | PHONE     |\n+----------+-----+-----------+\n| ZhangSan |   1 | 1234-5678 |\n| ZhangSan |   2 | 3219-6066 |\n| ZhangSan |   3 | 5365-9583 |\n+----------+-----+-----------+\n3 rows in set\n",
            "/*访问远端的 OceanBase 数据库查询数据*/\nobclient> SELECT ID FROM tbl2@ob_dblink;\n+------+\n| ID   |\n+------+\n|    1 |\n|    2 |\n|    3 |\n+------+\n3 rows in set\n\nobclient> SELECT * FROM tbl2@ob_dblink;\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    1 | a    |  100 |\n|    2 | b    |  200 |\n|    3 | a    |   50 |\n+------+------+------+\n3 rows in set\n\n/*访问远端的 Oracle 数据库查询数据*/\nobclient> SELECT ID FROM tbl2@ora_dblink;\n+------+\n| ID   |\n+------+\n|    1 |\n|    2 |\n|    3 |\n+------+\n3 rows in set\n\nobclient> SELECT * FROM tbl2@ora_dblink;\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    1 | a    |  100 |\n|    2 | b    |  200 |\n|    3 | a    |   50 |\n+------+------+------+\n3 rows in set\n\n/*同时查询本地数据库和远端数据库的数据*/\nobclient> SELECT t4.col1,t5.col2 FROM tbl1 t4, tbl2@ob_dblink t5 WHERE t1.col3=t2.col3;\n\n/*同时查询不同的远端数据库的数据*/\nobclient> SELECT * FROM tbl2@ob_dblink t_remote1,tbl2@ora_dblink t_remote2 WHERE t_remote1.col1 = t_remote2.col1;\n",
            "obclient> CREATE TABLE emp(  \n    empno         NUMBER(4,0),  \n    empname       VARCHAR(10),  \n    job           VARCHAR(9),  \n    mgr           NUMBER(4,0),  \n    hiredate      DATE,  \n    sal           NUMBER(7,2),  \n    comm          NUMBER(7,2),        \n    deptno        NUMBER(2,0),   \n    CONSTRAINT PK_emp PRIMARY KEY (empno)\n);\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO emp VALUES (1839,'KING','PRESIDENT',null,'17-DEC-81',5000,null,10)\n   ,(1698,'BLAKE','MANAGER',1839,'01-MAY-81',2850,null,30)\n   ,(1782,'CLARK', 'MANAGER', 1839, '09-JUN-81', 2450, null, 10)\n   ,(1566,'JONES','MANAGER',1839, '02-APR-81',2975,null,40)\n   ,(1788,'SCOTT','ANALYST',1566, '15-JUL-87',3000,null,20)\n   ,(1902,'FORD','ANALYST',1566, '05-OCT-81',3000,null,40)\n   ,(1369,'SMITH','CLERK',1902, '17-NOV-80',800,null,20)\n   ,(1499,'ALLEN','SALESMAN',1698, '20-FEB-81',1600,300,30);\n\nQuery OK, 8 rows affected\nRecords: 8  Duplicates: 0  Warnings: 0\n\nobclient> SELECT empno, empname FROM emp ORDER BY empno FETCH FIRST 3 ROWS ONLY;\n+-------+---------+\n| EMPNO | EMPNAME |\n+-------+---------+\n|  1369 | SMITH   |\n|  1499 | ALLEN   |\n|  1566 | JONES   |\n+-------+---------+\n3 rows in set\n",
            "obclient> SELECT empno, empname\nFROM emp\nORDER BY empno\nFETCH NEXT 3 ROWS ONLY;\n",
            "obclient> SELECT empno, empname sal FROM emp ORDER BY sal\n FETCH FIRST 25 PERCENT ROWS ONLY;\n+-------+-------+\n| EMPNO | SAL   |\n+-------+-------+\n|  1499 | ALLEN |\n|  1698 | BLAKE |\n+-------+-------+\n2 rows in set\n",
            "obclient> SELECT empno, empname sal FROM emp ORDER BY sal\n FETCH FIRST 25 PERCENT ROWS WITH TIES;\n+-------+-------+\n| EMPNO | SAL   |\n+-------+-------+\n|  1499 | ALLEN |\n|  1698 | BLAKE |\n+-------+-------+\n2 rows in set\n",
            "obclient> CREATE TABLE t1 (c1 INT, c2 INT );\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO t1 VALUES ('1','2');\nQuery OK, 1 row affected\n\nobclient> SELECT * FROM (t1) a;\n+------+------+\n| C1   | C2   |\n+------+------+\n|    1 |    2 |\n+------+------+\n1 row in set\n",
            "obclient> SELECT RANDOM(4) FROM GENERATOR(3);\n+---------------------+\n| RANDOM(4)           |\n+---------------------+\n| 5267436225003336391 |\n| -851690886662571060 |\n| 1738617244330437274 |\n+---------------------+\n3 rows in set\n",
            "obclient> CREATE DATABASE LINK seq_link CONNECT TO test@oracle IDENTIFIED BY test HOST '127.xxx.xxx.xxx:2828';\nQuery OK, 0 rows affected\n",
            "obclient> CREATE SEQUENCE my_seq START WITH 1 MINVALUE 1 MAXVALUE 10 INCREMENT BY 2 NOCYCLE NOORDER CACHE 30;\nQuery OK, 0 rows affected\n",
            "obclient> SELECT my_seq.NEXTVAL@seq_link FROM DUAL;\n+---------+\n| NEXTVAL |\n+---------+\n|       1 |\n+---------+\n1 row in set\n\nobclient> SELECT my_seq.CURRVAL@seq_link FROM DUAL;\n+---------+\n| CURRVAL |\n+---------+\n|       1 |\n+---------+\n1 row in set\n\nobclient> SELECT my_seq.NEXTVAL@seq_link FROM DUAL;\n+---------+\n| NEXTVAL |\n+---------+\n|       3 |\n+---------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "从表 tbl1 中读取 name 数据。",
            "obclient> CREATE TABLE tbl1 (id INT,name VARCHAR(10),num INT);\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO tbl1 VALUES (1, 'a',100),(2, 'b',200),(3, 'a',50);\nQuery OK, 3 rows affected\nRecords: 3  Duplicates: 0  Warnings: 0\n\nobclient> SELECT * FROM tbl1;\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    1 | a    |  100 |\n|    2 | b    |  200 |\n|    3 | a    |   50 |\n+------+------+------+\n3 rows in set\n\nobclient> SELECT name FROM tbl1;\n+------+\n| NAME |\n+------+\n| a    |\n| b    |\n| a    |\n+------+\n3 rows in set\n",
            "从表 tbl1 中读取 name 数据并进行去重处理。",
            "obclient> SELECT DISTINCT name FROM tbl1;\n+------+\n| NAME |\n+------+\n| a    |\n| b    |\n+------+\n2 rows in set\n",
            "从表 tbl1 中查询 id、name 和 num，然后把 num 列除以 2 输出，输出的列名为 avg。",
            "obclient> SELECT id, name, num/2 AS avg FROM tbl1;\n+------+------+------+\n| ID   | NAME | AVG  |\n+------+------+------+\n|    1 | a    |   50 |\n|    2 | b    |  100 |\n|    3 | a    |   25 |\n+------+------+------+\n3 rows in set\n",
            "从表 tbl1 中根据筛选条件 name = 'a'，输出对应的 id 、name 和 num。",
            "obclient> SELECT id, name, num FROM tbl1 WHERE name = 'a';\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    1 | a    |  100 |\n|    3 | a    |   50 |\n+------+------+------+\n2 rows in set\n",
            "从表 tbl1 中查询 name，按照 name 分组对 num 求和，查询 num 总和小于 160 的行，并输出。",
            "obclient> SELECT name,SUM(num)  sum\n                FROM tbl1\n                GROUP BY name\n                HAVING SUM(num) < 160;\n+------+------+\n| NAME | SUM  |\n+------+------+\n| a    |  150 |\n+------+------+\n1 row in set\n",
            "从表 tbl1 中查询 id、name 和 num，根据 num 按升序输出查询结果。",
            "obclient> SELECT * FROM tbl1 ORDER BY num ASC;\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    3 | a    |   50 |\n|    1 | a    |  100 |\n|    2 | b    |  200 |\n+------+------+------+\n3 rows in set\n",
            "从表 tbl1 中查询所有列，根据 name 按降序，num 按升序输出查询结果。",
            "obclient> SELECT * FROM tbl1 ORDER BY name DESC,num ASC;\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    2 | b    |  200 |\n|    3 | a    |   50 |\n|    1 | a    |  100 |\n+------+------+------+\n3 rows in set\n",
            "从表 tbl1 中查询指定 id 的行，并使用 FOR UPDATE 子句把查询结果行进行锁定。",
            "/* 在会话 1 中查询表 tbl1 中 id=1 的行并锁定 */\nobclient> SELECT * FROM tbl1 WHERE id=1 FOR UPDATE;\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    1 | a    |  100 |\n+------+------+------+\n1 row in set\n\n/* 在会话 2 中查询表 tbl1 中 id=1 或 id=2 的行并锁定 */\nobclient> SELECT * FROM tbl1 WHERE id=1 or id=2 FOR UPDATE;\nORA-30006: resource busy; acquire with WAIT timeout expired\n\nobclient> SELECT * FROM tbl1 WHERE id=1 or id=2 FOR UPDATE SKIP LOCKED;\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    2 | b    |  200 |\n+------+------+------+\n1 row in set\n",
            "创建表 group_tbl1，并插入数据。执行带有 CUBE 的 GROUP BY 查询语句。",
            "obclient> CREATE TABLE group_tbl1 (group_id INT,job VARCHAR2(10),name VARCHAR2(10),salary INT);\nQuery OK, 0 rows affected\nobclient> INSERT INTO group_tbl1 VALUES(10,'Coding','Bruce',1000),\n    (10,'Programmer','Clair',1000),\n    (20,'Coding','Jason',2000),\n    (20,'Programmer','Joey',2000),\n    (30,'Coding','Rebecca',3000),\n    (30,'Programmer','Rex',3000);\nQuery OK, 6 rows affected\nRecords: 6  Duplicates: 0  Warnings: 0\n obclient> SELECT * FROM group_tbl1;\n +----------+------------+---------+--------+\n | GROUP_ID | JOB        | NAME    | SALARY |\n +----------+------------+---------+--------+\n |       10 | Coding     | Bruce   |   1000 |\n |       10 | Programmer | Clair   |   1000 |\n |       20 | Coding     | Jason   |   2000 |\n |       20 | Programmer | Joey    |   2000 |\n |       30 | Coding     | Rebecca |   3000 |\n |       30 | Programmer | Rex     |   3000 |\n +----------+------------+---------+--------+\n 6 rows in set\n obclient> SELECT group_id, salary, SUM(salary) FROM group_tbl1 GROUP BY CUBE (group_id, salary);\n +----------+--------+-------------+\n | GROUP_ID | SALARY | SUM(SALARY) |\n +----------+--------+-------------+\n |     NULL |   NULL |       12000 |\n |     NULL |   1000 |        2000 |\n |     NULL |   2000 |        4000 |\n |     NULL |   3000 |        6000 |\n |       10 |   NULL |        2000 |\n |       20 |   NULL |        4000 |\n |       30 |   NULL |        6000 |\n |       10 |   1000 |        2000 |\n |       20 |   2000 |        4000 |\n |       30 |   3000 |        6000 |\n +----------+--------+-------------+\n 10 rows in set\n",
            "从表 tbl1 中按 name 和 num 分组查询并统计每个分组中的数量。",
            "obclient> SELECT name, num, COUNT(*) from tbl1 GROUP BY GROUPING SETS(name, num);\n+------+------+----------+\n| NAME | NUM  | COUNT(*) |\n+------+------+----------+\n| a    | NULL |        2 |\n| b    | NULL |        1 |\n| NULL |  100 |        1 |\n| NULL |  200 |        1 |\n| NULL |   50 |        1 |\n+------+------+----------+\n5 rows in set )\n",
            "将表 emp_phone 中的行转为列，再将列转为行。",
            "obclient> CREATE TABLE emp(name VARCHAR2(50), num CHAR, phone VARCHAR2(50));\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO emp VALUES('ZhangSan', '1', '1234-5678'),('ZhangSan', '2', '3219-6066'),('ZhangSan', '3', '5365-9583');\nQuery OK, 3 rows affected\nRecords: 3  Duplicates: 0  Warnings: 0\n\nobclient> SELECT * FROM emp;\n+----------+------+-----------+\n| NAME     | NUM  | PHONE     |\n+----------+------+-----------+\n| ZhangSan | 1    | 1234-5678 |\n| ZhangSan | 2    | 3219-6066 |\n| ZhangSan | 3    | 5365-9583 |\n+----------+------+-----------+\n3 rows in set\n\n/* 将表 emp 中的行转为列 */\nobclient> SELECT * FROM emp PIVOT(MAX(phone) FOR num IN (1 AS home, 2 AS office, 3 AS mobile));\n+----------+-----------+-----------+-----------+\n| NAME     | HOME      | OFFICE    | MOBILE    |\n+----------+-----------+-----------+-----------+\n| ZhangSan | 1234-5678 | 3219-6066 | 5365-9583 |\n+----------+-----------+-----------+-----------+\n1 row in set\n\n/* 将表 emp 中的列转为行 */\nobclient> CREATE VIEW v_emp AS SELECT * FROM emp PIVOT(MAX(phone) FOR num IN (1 AS home, 2 AS office, 3 AS mobile));\nQuery OK, 0 rows affected\n\nobclient>  SELECT * FROM v_emp UNPIVOT(phone FOR num IN (home AS 1, office AS 2, mobile AS 3));\n+----------+-----+-----------+\n| NAME     | NUM | PHONE     |\n+----------+-----+-----------+\n| ZhangSan |   1 | 1234-5678 |\n| ZhangSan |   2 | 3219-6066 |\n| ZhangSan |   3 | 5365-9583 |\n+----------+-----+-----------+\n3 rows in set\n",
            "查询远端数据库的表中数据。",
            "/*访问远端的 OceanBase 数据库查询数据*/\nobclient> SELECT ID FROM tbl2@ob_dblink;\n+------+\n| ID   |\n+------+\n|    1 |\n|    2 |\n|    3 |\n+------+\n3 rows in set\n\nobclient> SELECT * FROM tbl2@ob_dblink;\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    1 | a    |  100 |\n|    2 | b    |  200 |\n|    3 | a    |   50 |\n+------+------+------+\n3 rows in set\n\n/*访问远端的 Oracle 数据库查询数据*/\nobclient> SELECT ID FROM tbl2@ora_dblink;\n+------+\n| ID   |\n+------+\n|    1 |\n|    2 |\n|    3 |\n+------+\n3 rows in set\n\nobclient> SELECT * FROM tbl2@ora_dblink;\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    1 | a    |  100 |\n|    2 | b    |  200 |\n|    3 | a    |   50 |\n+------+------+------+\n3 rows in set\n\n/*同时查询本地数据库和远端数据库的数据*/\nobclient> SELECT t4.col1,t5.col2 FROM tbl1 t4, tbl2@ob_dblink t5 WHERE t1.col3=t2.col3;\n\n/*同时查询不同的远端数据库的数据*/\nobclient> SELECT * FROM tbl2@ob_dblink t_remote1,tbl2@ora_dblink t_remote2 WHERE t_remote1.col1 = t_remote2.col1;\n",
            "分页查询示例",
            "\n查询员工编号 empno 最低的 3 名员工。 obclient> CREATE TABLE emp(  \n    empno         NUMBER(4,0),  \n    empname       VARCHAR(10),  \n    job           VARCHAR(9),  \n    mgr           NUMBER(4,0),  \n    hiredate      DATE,  \n    sal           NUMBER(7,2),  \n    comm          NUMBER(7,2),        \n    deptno        NUMBER(2,0),   \n    CONSTRAINT PK_emp PRIMARY KEY (empno)\n);\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO emp VALUES (1839,'KING','PRESIDENT',null,'17-DEC-81',5000,null,10)\n   ,(1698,'BLAKE','MANAGER',1839,'01-MAY-81',2850,null,30)\n   ,(1782,'CLARK', 'MANAGER', 1839, '09-JUN-81', 2450, null, 10)\n   ,(1566,'JONES','MANAGER',1839, '02-APR-81',2975,null,40)\n   ,(1788,'SCOTT','ANALYST',1566, '15-JUL-87',3000,null,20)\n   ,(1902,'FORD','ANALYST',1566, '05-OCT-81',3000,null,40)\n   ,(1369,'SMITH','CLERK',1902, '17-NOV-80',800,null,20)\n   ,(1499,'ALLEN','SALESMAN',1698, '20-FEB-81',1600,300,30);\n\nQuery OK, 8 rows affected\nRecords: 8  Duplicates: 0  Warnings: 0\n\nobclient> SELECT empno, empname FROM emp ORDER BY empno FETCH FIRST 3 ROWS ONLY;\n+-------+---------+\n| EMPNO | EMPNAME |\n+-------+---------+\n|  1369 | SMITH   |\n|  1499 | ALLEN   |\n|  1566 | JONES   |\n+-------+---------+\n3 rows in set\n\n再继续查询员工编号 empno 最低的 3 名员工。 obclient> SELECT empno, empname\nFROM emp\nORDER BY empno\nFETCH NEXT 3 ROWS ONLY;\n\n查询最低工资员工中前 25% 的员工。 obclient> SELECT empno, empname sal FROM emp ORDER BY sal\n FETCH FIRST 25 PERCENT ROWS ONLY;\n+-------+-------+\n| EMPNO | SAL   |\n+-------+-------+\n|  1499 | ALLEN |\n|  1698 | BLAKE |\n+-------+-------+\n2 rows in set\n\n查询最低工资员工中前 25% 的员工，以及与上一个示例中获取的最后一位员工工资相同的所有其他员工。 obclient> SELECT empno, empname sal FROM emp ORDER BY sal\n FETCH FIRST 25 PERCENT ROWS WITH TIES;\n+-------+-------+\n| EMPNO | SAL   |\n+-------+-------+\n|  1499 | ALLEN |\n|  1698 | BLAKE |\n+-------+-------+\n2 rows in set\n\n",
            "查询员工编号 empno 最低的 3 名员工。",
            "obclient> CREATE TABLE emp(  \n    empno         NUMBER(4,0),  \n    empname       VARCHAR(10),  \n    job           VARCHAR(9),  \n    mgr           NUMBER(4,0),  \n    hiredate      DATE,  \n    sal           NUMBER(7,2),  \n    comm          NUMBER(7,2),        \n    deptno        NUMBER(2,0),   \n    CONSTRAINT PK_emp PRIMARY KEY (empno)\n);\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO emp VALUES (1839,'KING','PRESIDENT',null,'17-DEC-81',5000,null,10)\n   ,(1698,'BLAKE','MANAGER',1839,'01-MAY-81',2850,null,30)\n   ,(1782,'CLARK', 'MANAGER', 1839, '09-JUN-81', 2450, null, 10)\n   ,(1566,'JONES','MANAGER',1839, '02-APR-81',2975,null,40)\n   ,(1788,'SCOTT','ANALYST',1566, '15-JUL-87',3000,null,20)\n   ,(1902,'FORD','ANALYST',1566, '05-OCT-81',3000,null,40)\n   ,(1369,'SMITH','CLERK',1902, '17-NOV-80',800,null,20)\n   ,(1499,'ALLEN','SALESMAN',1698, '20-FEB-81',1600,300,30);\n\nQuery OK, 8 rows affected\nRecords: 8  Duplicates: 0  Warnings: 0\n\nobclient> SELECT empno, empname FROM emp ORDER BY empno FETCH FIRST 3 ROWS ONLY;\n+-------+---------+\n| EMPNO | EMPNAME |\n+-------+---------+\n|  1369 | SMITH   |\n|  1499 | ALLEN   |\n|  1566 | JONES   |\n+-------+---------+\n3 rows in set\n",
            "再继续查询员工编号 empno 最低的 3 名员工。",
            "obclient> SELECT empno, empname\nFROM emp\nORDER BY empno\nFETCH NEXT 3 ROWS ONLY;\n",
            "查询最低工资员工中前 25% 的员工。",
            "obclient> SELECT empno, empname sal FROM emp ORDER BY sal\n FETCH FIRST 25 PERCENT ROWS ONLY;\n+-------+-------+\n| EMPNO | SAL   |\n+-------+-------+\n|  1499 | ALLEN |\n|  1698 | BLAKE |\n+-------+-------+\n2 rows in set\n",
            "查询最低工资员工中前 25% 的员工，以及与上一个示例中获取的最后一位员工工资相同的所有其他员工。",
            "obclient> SELECT empno, empname sal FROM emp ORDER BY sal\n FETCH FIRST 25 PERCENT ROWS WITH TIES;\n+-------+-------+\n| EMPNO | SAL   |\n+-------+-------+\n|  1499 | ALLEN |\n|  1698 | BLAKE |\n+-------+-------+\n2 rows in set\n",
            "查询表 t1 的数据并指定表别名。",
            "obclient> CREATE TABLE t1 (c1 INT, c2 INT );\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO t1 VALUES ('1','2');\nQuery OK, 1 row affected\n\nobclient> SELECT * FROM (t1) a;\n+------+------+\n| C1   | C2   |\n+------+------+\n|    1 |    2 |\n+------+------+\n1 row in set\n",
            "使用 RANDOM() 生成随机数，FROM 子句后直接查询 GENERATOR() 函数。",
            "obclient> SELECT RANDOM(4) FROM GENERATOR(3);\n+---------------------+\n| RANDOM(4)           |\n+---------------------+\n| 5267436225003336391 |\n| -851690886662571060 |\n| 1738617244330437274 |\n+---------------------+\n3 rows in set\n",
            "访问远端数据库中的序列值。",
            "1.登录本地 OceanBase 数据库，创建远端 OceanBase 数据库 Oracle 租户的 dblink。",
            "obclient> CREATE DATABASE LINK seq_link CONNECT TO test@oracle IDENTIFIED BY test HOST '127.xxx.xxx.xxx:2828';\nQuery OK, 0 rows affected\n",
            "2.在远端的 OceanBase 数据库中，创建序列 my_seq。",
            "obclient> CREATE SEQUENCE my_seq START WITH 1 MINVALUE 1 MAXVALUE 10 INCREMENT BY 2 NOCYCLE NOORDER CACHE 30;\nQuery OK, 0 rows affected\n",
            "3.在本地访问远端 OceanBase 数据库的序列值。",
            "obclient> SELECT my_seq.NEXTVAL@seq_link FROM DUAL;\n+---------+\n| NEXTVAL |\n+---------+\n|       1 |\n+---------+\n1 row in set\n\nobclient> SELECT my_seq.CURRVAL@seq_link FROM DUAL;\n+---------+\n| CURRVAL |\n+---------+\n|       1 |\n+---------+\n1 row in set\n\nobclient> SELECT my_seq.NEXTVAL@seq_link FROM DUAL;\n+---------+\n| NEXTVAL |\n+---------+\n|       3 |\n+---------+\n1 row in set\n"
        ]
    },
    "TRANSACTION": {
        "Title": [
            "TRANSACTION"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054300"
        ],
        "Category": [
            "DCL"
        ],
        "Feature": "transaction_stmt:\n      START TRANSACTION [READ ONLY | READ WRITE];\n    | BEGIN [WORK];\n    | COMMIT [WORK];\n    | ROLLBACK [WORK];\n    | SET TRANSACTION {READ ONLY | READ WRITE};\n",
        "Description": [
            "该语句用于开启事务。",
            "数据库事务（Database Transaction）是指作为单个逻辑工作单元执行的一系列操作。事务处理可以用来维护数据库的完整性，保证成批的 SQL 操作全部执行或全部不执行。",
            "显示事务是用户自定义或用户指定的事务。通过 BEGIN 和 BEGIN WORK（BEGIN 和 BEGIN WORK 被作为 START TRANSACTION的别名）语句显示开始，以 COMMIT 或 ROLLBACK 语句显示结束。",
            "\n说明\n\n在事务 COMMIT 前，可以执行一条 SELECT 语句查看本事务中的操作是否已经生效。\n在事务 COMMIT 前，当前事务会话之外的会话都是看不到本事务中的操作的。即在事务 COMMIT 前，只有本事务 Session 的访问能读到最新的结果，本事务 Session 之外的访问是看不到最新结果的。\n如果您想回滚该事务，直接用 ROOLBACK 代替 COMMIT。\n\n"
        ],
        "Illustration": [],
        "Examples": [
            "obclient> CREATE TABLE tbl1 (id INT,name VARCHAR(10),num INT);\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO tbl1 VALUES (1, 'a',100),(2, 'b',200),(3, 'a',50);\nQuery OK, 3 rows affected\nRecords: 3  Duplicates: 0  Warnings: 0\n\nobclient> SELECT * FROM tbl1;\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    1 | a    |  100 |\n|    2 | b    |  200 |\n|    3 | a    |   50 |\n+------+------+------+\n3 rows in set\n",
            "obclient> START TRANSACTION;\nQuery OK, 0 rows affected\n\nobclient> UPDATE tbl1 SET name = 'c' WHERE id = 3;\nQuery OK, 1 row affected\nRows matched: 1  Changed: 1  Warnings: 0\n\nobclient> INSERT INTO tbl1 VALUES (4, 'a', 30);\nQuery OK, 1 row affected\n\nobclient> COMMIT;\nQuery OK, 0 rows affected\n\nobclient> SELECT * FROM tbl1;\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    1 | a    |  100 |\n|    2 | b    |  200 |\n|    3 | c    |   50 |\n|    4 | a    |   30 |\n+------+------+------+\n4 rows in set\n",
            "obclient> BEGIN;\nQuery OK, 0 rows affected\n\nobclient> UPDATE tbl1 SET name = 'c' WHERE id = 3;\nQuery OK, 1 row affected\nRows matched: 1  Changed: 1  Warnings: 0\n\nobclient> INSERT INTO tbl1 VALUES (4, 'd', 300);\nQuery OK, 1 row affected\n\nobclient> SELECT * FROM tbl1;\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    1 | a    |  100 |\n|    2 | b    |  200 |\n|    3 | c    |   50 |\n|    4 | d    |  300 |\n+------+------+------+\n4 rows in set\n\nobclient> ROLLBACK ;\nQuery OK, 0 rows affected\n\nobclient> SELECT * FROM tbl1;\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    1 | a    |  100 |\n|    2 | b    |  200 |\n|    3 | a    |   50 |\n+------+------+------+\n3 rows in set\n"
        ],
        "Detailed Examples": [
            "创建示例表 tbl1。",
            "obclient> CREATE TABLE tbl1 (id INT,name VARCHAR(10),num INT);\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO tbl1 VALUES (1, 'a',100),(2, 'b',200),(3, 'a',50);\nQuery OK, 3 rows affected\nRecords: 3  Duplicates: 0  Warnings: 0\n\nobclient> SELECT * FROM tbl1;\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    1 | a    |  100 |\n|    2 | b    |  200 |\n|    3 | a    |   50 |\n+------+------+------+\n3 rows in set\n",
            "开始执行事务，将 id 为 3 的 name 改为 c，再插入一行。事务提交后，查看表 tbl1 的信息。",
            "obclient> START TRANSACTION;\nQuery OK, 0 rows affected\n\nobclient> UPDATE tbl1 SET name = 'c' WHERE id = 3;\nQuery OK, 1 row affected\nRows matched: 1  Changed: 1  Warnings: 0\n\nobclient> INSERT INTO tbl1 VALUES (4, 'a', 30);\nQuery OK, 1 row affected\n\nobclient> COMMIT;\nQuery OK, 0 rows affected\n\nobclient> SELECT * FROM tbl1;\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    1 | a    |  100 |\n|    2 | b    |  200 |\n|    3 | c    |   50 |\n|    4 | a    |   30 |\n+------+------+------+\n4 rows in set\n",
            "开始执行事务，将 id 为 3 的 name 改为 c，再插入一行，查看表 tbl1 的信息。事务回滚后，再查看表 tbl1 的信息。",
            "obclient> BEGIN;\nQuery OK, 0 rows affected\n\nobclient> UPDATE tbl1 SET name = 'c' WHERE id = 3;\nQuery OK, 1 row affected\nRows matched: 1  Changed: 1  Warnings: 0\n\nobclient> INSERT INTO tbl1 VALUES (4, 'd', 300);\nQuery OK, 1 row affected\n\nobclient> SELECT * FROM tbl1;\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    1 | a    |  100 |\n|    2 | b    |  200 |\n|    3 | c    |   50 |\n|    4 | d    |  300 |\n+------+------+------+\n4 rows in set\n\nobclient> ROLLBACK ;\nQuery OK, 0 rows affected\n\nobclient> SELECT * FROM tbl1;\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    1 | a    |  100 |\n|    2 | b    |  200 |\n|    3 | a    |   50 |\n+------+------+------+\n3 rows in set\n"
        ]
    },
    "TRUNCATE TABLE": {
        "Title": [
            "TRUNCATE TABLE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054319"
        ],
        "Category": [
            "DDL"
        ],
        "Feature": "TRUNCATE [TABLE] [schema.]table_name;\n",
        "Description": [
            "该语句用于完全清空指定表，但是保留表结构，包括表中定义的分区信息。从逻辑上说，该语句与用于删除所有行的 DELETE FROM 语句相同。",
            "执行 TRUNCATE 语句，必须具有表的删除（DROP）权限，如果不是用户自己的表则需要具有 DROP ANY TABLE 权限。",
            "TRUNCATE TABLE 语句与 DELETE FROM 语句有以下不同：",
            "TRUNCATE 操作删除并重新创建表，这比逐行删除要快得多，特别是对于大表。",
            "TRUNCATE TABLE 语句执行结果显示影响行数始终显示为 0 行。",
            "使用 TRUNCATE TABLE 语句，表管理程序不记得最后被使用的 AUTO_INCREMENT 值，但是会从头开始计数。",
            "TRUNCATE 语句不能在进行事务处理和表锁定的过程中进行，如果使用将会报错。",
            "只要表定义文件是合法的，则可以使用 TRUNCATE TABLE 把表重新创建为一个空表，即使数据或索引文件已经被破坏。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nschema.\n指定 Schema。如果省略 schema，则默认该表在当前 Schema 中。\n\n\ntable_name\n指定表名。\n\n\n"
        ],
        "Examples": [
            "obclient> TRUNCATE TABLE tbl1;\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "完全清空表 tb1。",
            "obclient> TRUNCATE TABLE tbl1;\nQuery OK, 0 rows affected\n"
        ]
    },
    "UPDATE": {
        "Title": [
            "UPDATE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054294"
        ],
        "Category": [
            "DML"
        ],
        "Feature": "UPDATE [hint_options] dml_table_clause\n    SET update_asgn_list\n    [ WHERE where_condition]\n    [{ RETURNING | RETURN } returning_exprs [into_clause]]\n\ndml_table_clause:\n    dml_table_name opt_table_alias\n\nupdate_asgn_list:\n    column_name = expr [, expr...]\n\nwhere_condition:\n    expression\n\nreturning_exprs:\n    projection_col_name [,projection_col_name ...]\n\ninto_clause:\n    { INTO into_var_list | BULK COLLECT INTO into_var_list}\n\ninto_var_list:\n    { USER_VARIABLE | ref_name } [,{ USER_VARIABLE | ref_name } ...]\n",
        "Description": [
            "该语句用于修改表中现有的的字段值。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nhint_options\n指定 Hint 选项。\n\n\ndml_table_clause\n指定要更新的表、视图、或特殊子查询返回的列的名称。 说明 如果指定 view，则数据库更新视图的基表。但是不能通过一个视图更新多个基表。\n\n\nwhere_condition\n指定过滤条件。\n\n\nupdate_asgn_list\n指定更新列表。\n\n\nreturning_exprs\n返回修改数据后的投影列。\n\n\ninto_clause\n将修改数据后的投影列插入到指定列表。\n\n\ninto_var_list\n将指定投影列插入到指定变量列表。\n\n\nref_name\n变量名。\n\n\n",
            "\n注意\n特殊子查询指的类似于可更新视图对应的子查询，这类子查询不应该包含复杂的算子（例如 GROUP BY、DISTINCT、WINDOW FUNCTION 等）。\n"
        ],
        "Examples": [
            "obclient> CREATE TABLE tbl1(col1 INT PRIMARY KEY,col2 INT);\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO tbl1 VALUES(1,1),(2,2),(3,3),(4,4),(5,5);\nQuery OK, 5 rows affected\nRecords: 5  Duplicates: 0  Warnings: 0\n\nobclient> SELECT * FROM tbl1;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    1 |    1 |\n|    2 |    2 |\n|    3 |    3 |\n|    4 |    4 |\n|    5 |    5 |\n+------+------+\n5 rows in set\n",
            "obclient> UPDATE tbl1 SET tbl1.col2 = 100  WHERE tbl1.col1 = 1;\nQuery OK, 1 row affected\nRows matched: 1  Changed: 1  Warnings: 0\n\nobclient> SELECT * FROM tbl1;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    1 |  100 |\n|    2 |    2 |\n|    3 |    3 |\n|    4 |    4 |\n|    5 |    5 |\n+------+------+\n5 rows in set\n",
            "obclient> UPDATE (SELECT * FROM tbl1) v SET v.col2 = 10 WHERE v.col1 = 1;\nQuery OK, 1 row affected\nRows matched: 1  Changed: 1  Warnings: 0\n\nobclient> SELECT * FROM tbl1;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    1 |   10 |\n|    2 |    2 |\n|    3 |    3 |\n|    4 |    4 |\n|    5 |    5 |\n+------+------+\n5 rows in set\n",
            "obclient> UPDATE tbl1 SET tbl1.col2 = 100 WHERE tbl1.col1 < 3;\nQuery OK, 2 rows affected\nRows matched: 2  Changed: 2  Warnings: 0\n\nobclient> SELECT * FROM tbl1;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    1 |  100 |\n|    2 |  100 |\n|    3 |    3 |\n|    4 |    4 |\n|    5 |    5 |\n+------+------+\n5 rows in set\n",
            "obclient> UPDATE tbl1 SET tbl1.col2 = 1000 WHERE tbl1.col1 = 1 RETURNING col2;\n+------+\n| COL2 |\n+------+\n| 1000 |\n+------+\n1 row in set\n\nobclient> SELECT * FROM tbl1;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    1 | 1000 |\n|    2 |    2 |\n|    3 |    3 |\n|    4 |    4 |\n|    5 |    5 |\n+------+------+\n5 rows in set\n"
        ],
        "Detailed Examples": [
            "创建示例表 tbl1，并插入测试数据。",
            "obclient> CREATE TABLE tbl1(col1 INT PRIMARY KEY,col2 INT);\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO tbl1 VALUES(1,1),(2,2),(3,3),(4,4),(5,5);\nQuery OK, 5 rows affected\nRecords: 5  Duplicates: 0  Warnings: 0\n\nobclient> SELECT * FROM tbl1;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    1 |    1 |\n|    2 |    2 |\n|    3 |    3 |\n|    4 |    4 |\n|    5 |    5 |\n+------+------+\n5 rows in set\n",
            "单表更新：将表 tbl1 中 tbl1.col1=1 对应的那一行数据的 col2 列值修改为 100。",
            "obclient> UPDATE tbl1 SET tbl1.col2 = 100  WHERE tbl1.col1 = 1;\nQuery OK, 1 row affected\nRows matched: 1  Changed: 1  Warnings: 0\n\nobclient> SELECT * FROM tbl1;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    1 |  100 |\n|    2 |    2 |\n|    3 |    3 |\n|    4 |    4 |\n|    5 |    5 |\n+------+------+\n5 rows in set\n",
            "单表更新：直接操作子查询，将子查询中 v.col1=1 对应的那一行数据的 col2 列值修改为 10。",
            "obclient> UPDATE (SELECT * FROM tbl1) v SET v.col2 = 10 WHERE v.col1 = 1;\nQuery OK, 1 row affected\nRows matched: 1  Changed: 1  Warnings: 0\n\nobclient> SELECT * FROM tbl1;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    1 |   10 |\n|    2 |    2 |\n|    3 |    3 |\n|    4 |    4 |\n|    5 |    5 |\n+------+------+\n5 rows in set\n",
            "单表更新：将表 tbl1 中 tbl1.col1<3 对应的那一行数据的 col2 列值修改为 100。",
            "obclient> UPDATE tbl1 SET tbl1.col2 = 100 WHERE tbl1.col1 < 3;\nQuery OK, 2 rows affected\nRows matched: 2  Changed: 2  Warnings: 0\n\nobclient> SELECT * FROM tbl1;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    1 |  100 |\n|    2 |  100 |\n|    3 |    3 |\n|    4 |    4 |\n|    5 |    5 |\n+------+------+\n5 rows in set\n",
            "单表更新：RETURNING 子句返回修改后数据。",
            "obclient> UPDATE tbl1 SET tbl1.col2 = 1000 WHERE tbl1.col1 = 1 RETURNING col2;\n+------+\n| COL2 |\n+------+\n| 1000 |\n+------+\n1 row in set\n\nobclient> SELECT * FROM tbl1;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    1 | 1000 |\n|    2 |    2 |\n|    3 |    3 |\n|    4 |    4 |\n|    5 |    5 |\n+------+------+\n5 rows in set\n"
        ]
    },
    "WITH CLAUSE": {
        "Title": [
            "WITH CLAUSE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054668"
        ],
        "Category": [
            "DML"
        ],
        "Feature": "with_clause_select:\n    with_clause simple_select\n\nwith_clause:\n    WITH query_table_name [opt_column_alias_name_list] AS ( select_clause )\n\nselect_clause:\n    simple_select | select_clause_set\n\nopt_column_alias_name_list:\n    (column_name_list)\n\ncolumn_name_list:\n    column_name [,column_name...]\n",
        "Description": [
            "如果查询语句中有多个相同的子查询，可以把相同的子查询放在 WITH CLAUSE 中作为公共表达式，在主体查询中直接引用即可。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nquery_table_name\n指定子查询的名称。\n\n\ncolumn_name\n指定列名称。\n\n\n"
        ],
        "Examples": [
            "obclient> CREATE TABLE tbl1(col1 INT,col2 INT,col3 INT);\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO tbl1 VALUES(1,1,1),(2,2,2),(3,3,3);\nQuery OK, 3 rows affected\nRecords: 3  Duplicates: 0  Warnings: 0\n\n/*直接使用表 tbl1 的列名作为 w_tbl1 的列名*/\nobclient> WITH w_tbl1 AS(SELECT * FROM tbl1) SELECT * FROM  w_tbl1;\n+------+------+------+\n| COL1 | COL2 | COL3 |\n+------+------+------+\n|    1 |    1 |    1 |\n|    2 |    2 |    2 |\n|    3 |    3 |    3 |\n+------+------+------+\n3 rows in set\n\n/*直接给 w_tbl1 命名列名*/\n\nobclient> WITH w_tbl1(c1,c2,c3) AS(SELECT * FROM tbl1) SELECT * FROM  w_tbl1;\n+------+------+------+\n| C1   | C2   | C3   |\n+------+------+------+\n|    1 |    1 |    1 |\n|    2 |    2 |    2 |\n|    3 |    3 |    3 |\n+------+------+------+\n3 rows in set\n"
        ],
        "Detailed Examples": [
            "obclient> CREATE TABLE tbl1(col1 INT,col2 INT,col3 INT);\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO tbl1 VALUES(1,1,1),(2,2,2),(3,3,3);\nQuery OK, 3 rows affected\nRecords: 3  Duplicates: 0  Warnings: 0\n\n/*直接使用表 tbl1 的列名作为 w_tbl1 的列名*/\nobclient> WITH w_tbl1 AS(SELECT * FROM tbl1) SELECT * FROM  w_tbl1;\n+------+------+------+\n| COL1 | COL2 | COL3 |\n+------+------+------+\n|    1 |    1 |    1 |\n|    2 |    2 |    2 |\n|    3 |    3 |    3 |\n+------+------+------+\n3 rows in set\n\n/*直接给 w_tbl1 命名列名*/\n\nobclient> WITH w_tbl1(c1,c2,c3) AS(SELECT * FROM tbl1) SELECT * FROM  w_tbl1;\n+------+------+------+\n| C1   | C2   | C3   |\n+------+------+------+\n|    1 |    1 |    1 |\n|    2 |    2 |    2 |\n|    3 |    3 |    3 |\n+------+------+------+\n3 rows in set\n"
        ]
    },
    "集合类 SELECT": {
        "Title": [
            "集合类 SELECT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054667"
        ],
        "Category": [
            "DML"
        ],
        "Feature": "select_clause_set:\n  simple_select [ UNION | UNION ALL | MINUS | INTERSECT] select_clause_set_right\n      [ORDER BY sort_list_columns]\n\nselect_clause_set_right:\n    simple_select  \n    | select_caluse_set\n",
        "Description": [
            "该语句用于对多个 SELECT 查询的结果合并为一个结果。每个 SELECT 的列数和数据类型必须相同，但列长可以不同。"
        ],
        "Illustration": [],
        "Examples": [
            "obclient> CREATE TABLE tbl1 (col1 INT, col2 INT);\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2 (col1 INT, col2 INT);\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO tbl1 VALUES (1, 1), (2, 2),(2,2);\nQuery OK, 3 rows affected\nRecords: 3  Duplicates: 0  Warnings: 0\n\nobclient> INSERT INTO tbl2 VALUES (2, 2),(2, 2),(3,3);\nQuery OK, 3 rows affected\nRecords: 3  Duplicates: 0  Warnings: 0\n\nobclient> SELECT * FROM tbl1;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    1 |    1 |\n|    2 |    2 |\n|    2 |    2 |\n+------+------+\n3 rows in set\n\nobclient> SELECT * FROM tbl2;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    2 |    2 |\n|    2 |    2 |\n|    3 |    3 |\n+------+------+\n3 rows in set\n",
            "obclient> SELECT col1, col2 FROM tbl1 UNION ALL SELECT col1, col2 FROM tbl2;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    1 |    1 |\n|    2 |    2 |\n|    2 |    2 |\n|    2 |    2 |\n|    2 |    2 |\n|    3 |    3 |\n+------+------+\n6 rows in set\n",
            "obclient> SELECT col1, col2 FROM tbl1 UNION SELECT col1, col2 FROM tbl2;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    1 |    1 |\n|    2 |    2 |\n|    3 |    3 |\n+------+------+\n3 rows in set\n",
            "obclient> SELECT col1, col2 FROM tbl1 INTERSECT SELECT col1, col2 FROM tbl2;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    2 |    2 |\n+------+------+\n1 row in set\n",
            "obclient> SELECT col1, col2 FROM tbl1 MINUS SELECT col1, col2 FROM tbl2;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    1 |    1 |\n+------+------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "创建示例表 tbl1 和 tbl2。",
            "obclient> CREATE TABLE tbl1 (col1 INT, col2 INT);\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2 (col1 INT, col2 INT);\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO tbl1 VALUES (1, 1), (2, 2),(2,2);\nQuery OK, 3 rows affected\nRecords: 3  Duplicates: 0  Warnings: 0\n\nobclient> INSERT INTO tbl2 VALUES (2, 2),(2, 2),(3,3);\nQuery OK, 3 rows affected\nRecords: 3  Duplicates: 0  Warnings: 0\n\nobclient> SELECT * FROM tbl1;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    1 |    1 |\n|    2 |    2 |\n|    2 |    2 |\n+------+------+\n3 rows in set\n\nobclient> SELECT * FROM tbl2;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    2 |    2 |\n|    2 |    2 |\n|    3 |    3 |\n+------+------+\n3 rows in set\n",
            "计算 tbl1、tbl2 所有的记录。",
            "obclient> SELECT col1, col2 FROM tbl1 UNION ALL SELECT col1, col2 FROM tbl2;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    1 |    1 |\n|    2 |    2 |\n|    2 |    2 |\n|    2 |    2 |\n|    2 |    2 |\n|    3 |    3 |\n+------+------+\n6 rows in set\n",
            "计算 tbl1、tbl2 的去重后的所有记录。",
            "obclient> SELECT col1, col2 FROM tbl1 UNION SELECT col1, col2 FROM tbl2;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    1 |    1 |\n|    2 |    2 |\n|    3 |    3 |\n+------+------+\n3 rows in set\n",
            "计算在表 tbl1 和 tbl2 共有的数据。",
            "obclient> SELECT col1, col2 FROM tbl1 INTERSECT SELECT col1, col2 FROM tbl2;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    2 |    2 |\n+------+------+\n1 row in set\n",
            "计算在表 tbl1 中存在而在表 tbl2 中不存在的数据。",
            "obclient> SELECT col1, col2 FROM tbl1 MINUS SELECT col1, col2 FROM tbl2;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    1 |    1 |\n+------+------+\n1 row in set\n"
        ]
    }
}