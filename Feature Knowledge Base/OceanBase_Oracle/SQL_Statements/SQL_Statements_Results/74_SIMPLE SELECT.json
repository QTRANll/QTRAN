{
    "HTML": [
        "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054666"
    ],
    "Title": [
        "SIMPLE SELECT"
    ],
    "Feature": [
        "simple_select:\n    SELECT [ hint_options ] [ DISTINCT | UNIQUE | ALL] select_expr_list\n    FROM from_list\n    [WHERE condition]\n    [hierarchical_query_clause]\n    [GROUP BY group_expression_list\n        [{ROLLUP | CUBE | GROUPING SETS} group_expression_list]\n        [HAVING condition]\n     ]\n    [ORDER BY order_expression_list]\n    [FOR UPDATE [OF column] [ {NOWAIT | WAIT integer | SKIP LOCKED } ] ]\n    [row_limiting_clause ]\n\nselect_expr_list:\n    table_name.*\n    | table_alias_name.*\n    | expr [[AS] column_alias_name]\n    | sequence_name.{ CURRVAL|NEXTVAL }@dblink_name\n\nfrom_list:\n    table_reference [, table_reference...]\n\ntable_reference:\n    simple_table\n    | joined_table\n    | pivot_clause\n    | unpivot_clause\n    | table_name@dblink_name\n\n\nsimple_table:\n    (table_factor [partition_option])[table_alias_name]\n    | (select_stmt)  table_alias_name\n    | (table_reference_list)\n\njoined_table:\n    table_reference [INNER] JOIN simple_table [join_condition]\n    | table_reference outer_join_type JOIN simple_table join_condition\n\npartition_option:\n    PARTITION (partition_name_list)\n\npartition_name_list:\n    partition_name [, partition_name...]\n\nouter_join_type:\n    {LEFT | RIGHT | FULL} [OUTER]\n\njoin_condition:\n    ON expression\n\ncondition:\n    expression\n\ngroup_expression_list:\n    group_expression [, group_expression...]\n\ngroup_expression:\n    expression [ASC | DESC]\n\norder_expression_list:\n    order_expression [, order_expression...]\n\norder_expression:\n    expression [ASC | DESC]\n\nrow_limiting_clause:\n    [ OFFSET offset { ROW | ROWS } ]\n    [ FETCH { FIRST | NEXT } [ { rowcount | percent PERCENT } ]\n        { ROW | ROWS } { ONLY | WITH TIES } ]\n\npivot_clause：\n    PIVOT\n    (aggregate_function ( expr ) [[AS] alias ]\n      [, aggregate_function ( expr ) [[AS] alias ]... ]\n     pivot_for_clause\n     pivot_in_clause\n    )\n\npivot_for_clause：\n    FOR { column| ( column [, column... ]) }\n\npivot_in_clause\n    IN\n    ( { { expr| ( expr [, expr...] ) } [ [ AS] alias]... }\n       [, { { expr| ( expr [, expr...] ) } [ [ AS] alias] ...} ]\n     )\n\nunpivot_clause ：\n    UNPIVOT [ {INCLUDE | EXCLUDE} NULLS ]\n    ( { column | ( column [, column... ]) }\n     pivot_for_clause\n     unpivot_in_clause\n     )\n\nunpivot_in_clause：\n    IN\n    ( { column | ( column [, column... ]) }[ AS { literal | ( literal [, literal... ]) } ]\n        [, { column | ( column [, column... ] ) }[ AS {literal | ( literal [, literal... ]) } ]]\n    )\n\nhierarchical_query_clause:\n    [START WITH start_expression] CONNECT BY [NOCYCLE] \n        {PRIOR child_expr = parent_expr \n        | parent_expr = PRIOR child_expr} [ORDER SIBLINGS BY ...]\n"
    ],
    "Description": [
        "该语句用于从表或视图中查询数据。",
        "\n\n\n字段\n描述\n\n\n\n\nhint_options\n指定 Hint 选项，为可选项。\n\n\nDISTINCT | UNIQUE | ALL\n在查询的数据中，可能会包含重复行。 \n      \n指定 DISTINCT 或 UNIQUE，表示在查询结果中相同的行只返回一行。DISTINCT 和 UNIQUE 是同义词。\n指定 ALL，表示在查询结果中返回所有的行。默认为 ALL。\n\n\n\nselect_expr_list\n指定从数据库列出要查询的表达式或列名，用\",“隔开。”*\"表示所有列。 \n      \ntable_name.*：指定从指定的表、视图中选择所有的列。\ntable_alias_name.：指定表、视图的别名。\nexpr [[AS] column_alias_name]：指定查询列或表达式的别名，AS 是可选的。\n\n\n\nFROM table_references\n指定选择数据的对象。\n\n\nPARTITION(partition_list)\n指定查询表的分区信息。例如：partition(p0,p1...)。\n\n\ntable_factor\n指定表名（基表、可更新视图）、特殊子查询等，并支持直接查询函数。\n\n\ntable_alias_name\n指定选择数据对象的别名。\n\n\njoined_table\n指定多表查询的联接方式。 \n      \n[INNER] JOIN 为内联接，INNER 为可选项。仅返回满足联接条件的数据。\n[OUTER] JOIN 为外联接，OUTER 为可选项。\nLEFT [OUTER] 表示左外联接。返回左表中的所有公共列值。\nRIGHT [OUTER] 表示右外联接。返回右表中的所有公共列值。\nFULL [OUTER] 表示全外联接。即除了内联接之外，两个表中未在内联接结果中返回的行将被保留并用空值扩展。\n\n\n\nON expression\n指定多表联接的联接条件。\n\n\nWHERE where_conditions\n指定筛选条件，查询结果中仅包含满足条件的数据，为可选项。where_conditions 为表达式。\n\n\nhierarchical_query_clause\n可选项，指定层次查询选项，详细介绍可参见下文 hierarchical_query_clause。\n\n\nGROUP BY group_by_list\n指定分组的字段，通常与聚合函数配合使用。 说明 如果 SELECT 子句后面的列中没有使用聚合函数的列，则在分组查询中，SELECT 子句后面的列必须出现在 GROUP BY 子句中。\n\n\nROLLUP group_expression_list\n合并 Group By 的分组，产生统计值。\n\n\nCUBE group_expression_list\n根据表达式列表中所有项的每个排列生成的分组进行聚合，并合并 GROUP BY 的分组，产生统计值。说明： \n      \nselect_expr_list 中指定的各项必须也出现在 CUBE expression_list 中。\nGROUP BY 子句可指定多个 CUBE 扩展以及多次出现的其他 GROUP BY 扩展（例如 ROLLUP、CUBE、GROUPING SETS）和各表达式中，参考语法为 SELECT select_expr_list FROM ... GROUP BY [..., ] CUBE (group_expression_list[, group_expression_list...]) [, ...]。\n如果未指定 ORDER BY 子句，则无法保证结果集的顺序。\n分组级别数或总计数为 2 的 n 次幂，其中 n 表示 CUBE 表达式列表中的项数，即分组个数是表达式项数的指数级增长，由此不建议使用表达式项数较大的场景。\n\n\n\nGROUPING SETS group_expression_list\n在一个查询中指定多个数据分组，分别产生统计值，并将指定的分组统计值聚合显示。GROUPING SETS 中可以指定单个字段或字段列表。\n\n\nHAVING search_confitions\n筛选分组后的各组数据。HAVING 子句与 WHERE 子句类似，但是 HAVING 子句可以使用累计函数（如 SUM、AVG 等）。\n\n\nORDER BY order_list\n指定结果集按照一个列或者多个列用来 ASC 或 DESC 显示查询结果。不指定 ASC 或者 DESC 时，默认为 ASC。 \n      \nASC 表示升序。\nDESC 表示降序。\n\n\n\nrow_limiting_clause\n用于限制查询返回的行，实现分页查询功能。可以指定偏移量，以及要返回的行数或行百分比。可以结合 ORDER BY 子句以确保排序顺序，从而获得一致的结果。\n\n\nOFFSET\n指定分页查询开始前要跳过的行数。offset 必须是数值或计算结果为数值的表达式。 \n      \n如果指定负数，则 offset 将被视为 0。\n如果指定为 NULL 或指定为大于或等于查询返回的行数的数量，则返回 0 行。\n如果 offset 包含一个分数，则该分数部分将被截断。\n如果未指定此子句，则偏移量为 0，从第一行开始分页。\n\n\n\nROW | ROWS\n表示单行或者多行，根据行数选择关键字，可以保证语义清晰。\n\n\nFETCH\n指定要返回的行数或行百分比。如果未指定此子句，则返回从 offset+1 开始的所有行。\n\n\nFIRST | NEXT\n表示获取第一个返回的行数或行百分比或者下一个返回的行数或行百分比。\n\n\nrowcount | percent PERCENT\n使用 rowcount 指定要返回的行数。rowcount 必须是一个数字或一个计算结果为数值的表达式。如果指定负数，则 rowcount 将被视为 0。如果 rowcount 大于从 rowcount+1 开始的可用行数，则返回所有可用行。如果 rowcount 包含一个分数，则该分数部分将被截断。如果 rowcount 为 NULL，则返回 0 行。使用 percent PERCENT 指定要返回的指定行总数的百分比。percent 必须是数值或计算为数值的表达式。如果指定为负数，则 percent 将被视为 0。如果 percent 为 NULL，则返回 0行。如果未指定 rowcount 或者 percent``PERCENT，则返回 1 行。\n\n\nONLY | WITH TIES\n指定 ONLY 返回指定的行数或行百分比。指定 WITH TIES 返回与上次获取的行具有相同排序键的其他行。如果使用 WITH TIES，则必须指定 ORDER BY 子句。如果未指定 ORDER BY 子句，则不会返回其他行。\n\n\nFOR UPDATE\n可选项，对查询结果所有行加上排他锁，以阻止其他事务的并发修改，或阻止在某些事务隔离级别时的并发读取。 \n      \nOF column：对于多表 Join 的场景，使用该子句可以指示仅锁定某些表（即 column 指定列所在的表）的查询结果行。\nNOWAIT：立即对查询结果行尝试加锁如果查询结果行中已经有被其他会话加锁的行，则执行失败。\nWAIT integer：等待 Interger 时间后再对查询结果行尝试加锁，如果查询结果行中已经有被其他会话加锁的行，则执行失败。\nSKIP LOCKED：如果查询结果中已经有被其他会话加锁的行，则会跳过这些加锁行，返回未被加锁的行。 \n        \n注意\nSKIP LOCKED 暂不支持多表 JOIN 加锁的场景。\n\n\n\n\npivot_clause\n将行旋转为列的子句。\n\n\naggregate_function\n指定聚合函数。\n\n\nexpr\n指定计算结果为常量值的表达式。 pivot_in_clause 只支持常量表达式。\n\n\nunpivot_clause\n将列旋转为行的子句。\n\n\ndblink_name\n指定要访问的数据库链接（即 dblink）的名称。\n\n\nsequence_name\n通过 dblink 访问远端数据库（包括 OceanBase 数据库和 Oracle 数据库）中的序列值，包括计算 SEQUENCE 对象的 NEXTVAL、CURRVAL 值。\n\n\n",
        "hierarchical_query_clause",
        "在层级查询中，可以在 SELECT 语句的列中使用一个特殊的伪列（pseudo column）LEVEL，表示等级，即节点的层次。由查询的起点开始算起，起点为 1，依次类推。使用层次查询时，才可以使用该字段。更多有关层级查询中伪列的信息，请参见 层次查询伪列。",
        "START WITH start_expression",
        "：可选项，指定层次查询中的根行（Root Row）。",
        "CONNECT BY",
        "：指定如何来确定父子关系，这里通常使用等值表达式，但其他表达式同样支持。",
        "NOCYCLE",
        "：当指定该关键字时，即使返回结果中有循环仍旧可以返回，并可以通过 ",
        "CONNECT_BY_ISCYCLE",
        " 虚拟列来指定哪里出现循环；否则，会给客户端报错。",
        "PRIOR child_expr = parent_expr | parent_expr = PRIOR child_expr",
        "：",
        "PRIOR",
        " 是一元运算符，表示参数中的列来自于父行（Parent Row），与一元的 + 和 - 具有相同的优先级。",
        "ORDER SIBLINGS BY",
        "：指定同一个层级行之间的排列顺序。",
        "\n注意\n如果层次查询中包含了 FOR UPDATE 子句，那么不支持以下的使用场景：\n\n如果子查询使用了 DISTINCT 关键字或者聚合，这种情况下将不能和 FOR UPDATE 一起使用。\n任何包含公共表达式（Common Table Expressions，CTE）的情景都不支持，即带有 WITH ... AS ... 子句的 SELECT 查询不能与 FOR UPDATE 同时使用。\n\n\n",
        "更多有关层次查询的使用信息，请参见 层次查询。"
    ],
    "Examples": [
        "obclient> CREATE TABLE tbl1 (id INT,name VARCHAR(10),num INT);\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO tbl1 VALUES (1, 'a',100),(2, 'b',200),(3, 'a',50);\nQuery OK, 3 rows affected\nRecords: 3  Duplicates: 0  Warnings: 0\n\nobclient> SELECT * FROM tbl1;\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    1 | a    |  100 |\n|    2 | b    |  200 |\n|    3 | a    |   50 |\n+------+------+------+\n3 rows in set\n\nobclient> SELECT name FROM tbl1;\n+------+\n| NAME |\n+------+\n| a    |\n| b    |\n| a    |\n+------+\n3 rows in set\n",
        "obclient> SELECT DISTINCT name FROM tbl1;\n+------+\n| NAME |\n+------+\n| a    |\n| b    |\n+------+\n2 rows in set\n",
        "obclient> SELECT id, name, num/2 AS avg FROM tbl1;\n+------+------+------+\n| ID   | NAME | AVG  |\n+------+------+------+\n|    1 | a    |   50 |\n|    2 | b    |  100 |\n|    3 | a    |   25 |\n+------+------+------+\n3 rows in set\n",
        "obclient> SELECT id, name, num FROM tbl1 WHERE name = 'a';\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    1 | a    |  100 |\n|    3 | a    |   50 |\n+------+------+------+\n2 rows in set\n",
        "obclient> SELECT name,SUM(num)  sum\n                FROM tbl1\n                GROUP BY name\n                HAVING SUM(num) < 160;\n+------+------+\n| NAME | SUM  |\n+------+------+\n| a    |  150 |\n+------+------+\n1 row in set\n",
        "obclient> SELECT * FROM tbl1 ORDER BY num ASC;\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    3 | a    |   50 |\n|    1 | a    |  100 |\n|    2 | b    |  200 |\n+------+------+------+\n3 rows in set\n",
        "obclient> SELECT * FROM tbl1 ORDER BY name DESC,num ASC;\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    2 | b    |  200 |\n|    3 | a    |   50 |\n|    1 | a    |  100 |\n+------+------+------+\n3 rows in set\n",
        "/* 在会话 1 中查询表 tbl1 中 id=1 的行并锁定 */\nobclient> SELECT * FROM tbl1 WHERE id=1 FOR UPDATE;\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    1 | a    |  100 |\n+------+------+------+\n1 row in set\n\n/* 在会话 2 中查询表 tbl1 中 id=1 或 id=2 的行并锁定 */\nobclient> SELECT * FROM tbl1 WHERE id=1 or id=2 FOR UPDATE;\nORA-30006: resource busy; acquire with WAIT timeout expired\n\nobclient> SELECT * FROM tbl1 WHERE id=1 or id=2 FOR UPDATE SKIP LOCKED;\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    2 | b    |  200 |\n+------+------+------+\n1 row in set\n",
        "obclient> CREATE TABLE group_tbl1 (group_id INT,job VARCHAR2(10),name VARCHAR2(10),salary INT);\nQuery OK, 0 rows affected\nobclient> INSERT INTO group_tbl1 VALUES(10,'Coding','Bruce',1000),\n    (10,'Programmer','Clair',1000),\n    (20,'Coding','Jason',2000),\n    (20,'Programmer','Joey',2000),\n    (30,'Coding','Rebecca',3000),\n    (30,'Programmer','Rex',3000);\nQuery OK, 6 rows affected\nRecords: 6  Duplicates: 0  Warnings: 0\n obclient> SELECT * FROM group_tbl1;\n +----------+------------+---------+--------+\n | GROUP_ID | JOB        | NAME    | SALARY |\n +----------+------------+---------+--------+\n |       10 | Coding     | Bruce   |   1000 |\n |       10 | Programmer | Clair   |   1000 |\n |       20 | Coding     | Jason   |   2000 |\n |       20 | Programmer | Joey    |   2000 |\n |       30 | Coding     | Rebecca |   3000 |\n |       30 | Programmer | Rex     |   3000 |\n +----------+------------+---------+--------+\n 6 rows in set\n obclient> SELECT group_id, salary, SUM(salary) FROM group_tbl1 GROUP BY CUBE (group_id, salary);\n +----------+--------+-------------+\n | GROUP_ID | SALARY | SUM(SALARY) |\n +----------+--------+-------------+\n |     NULL |   NULL |       12000 |\n |     NULL |   1000 |        2000 |\n |     NULL |   2000 |        4000 |\n |     NULL |   3000 |        6000 |\n |       10 |   NULL |        2000 |\n |       20 |   NULL |        4000 |\n |       30 |   NULL |        6000 |\n |       10 |   1000 |        2000 |\n |       20 |   2000 |        4000 |\n |       30 |   3000 |        6000 |\n +----------+--------+-------------+\n 10 rows in set\n",
        "obclient> SELECT name, num, COUNT(*) from tbl1 GROUP BY GROUPING SETS(name, num);\n+------+------+----------+\n| NAME | NUM  | COUNT(*) |\n+------+------+----------+\n| a    | NULL |        2 |\n| b    | NULL |        1 |\n| NULL |  100 |        1 |\n| NULL |  200 |        1 |\n| NULL |   50 |        1 |\n+------+------+----------+\n5 rows in set )\n",
        "obclient> CREATE TABLE emp(name VARCHAR2(50), num CHAR, phone VARCHAR2(50));\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO emp VALUES('ZhangSan', '1', '1234-5678'),('ZhangSan', '2', '3219-6066'),('ZhangSan', '3', '5365-9583');\nQuery OK, 3 rows affected\nRecords: 3  Duplicates: 0  Warnings: 0\n\nobclient> SELECT * FROM emp;\n+----------+------+-----------+\n| NAME     | NUM  | PHONE     |\n+----------+------+-----------+\n| ZhangSan | 1    | 1234-5678 |\n| ZhangSan | 2    | 3219-6066 |\n| ZhangSan | 3    | 5365-9583 |\n+----------+------+-----------+\n3 rows in set\n\n/* 将表 emp 中的行转为列 */\nobclient> SELECT * FROM emp PIVOT(MAX(phone) FOR num IN (1 AS home, 2 AS office, 3 AS mobile));\n+----------+-----------+-----------+-----------+\n| NAME     | HOME      | OFFICE    | MOBILE    |\n+----------+-----------+-----------+-----------+\n| ZhangSan | 1234-5678 | 3219-6066 | 5365-9583 |\n+----------+-----------+-----------+-----------+\n1 row in set\n\n/* 将表 emp 中的列转为行 */\nobclient> CREATE VIEW v_emp AS SELECT * FROM emp PIVOT(MAX(phone) FOR num IN (1 AS home, 2 AS office, 3 AS mobile));\nQuery OK, 0 rows affected\n\nobclient>  SELECT * FROM v_emp UNPIVOT(phone FOR num IN (home AS 1, office AS 2, mobile AS 3));\n+----------+-----+-----------+\n| NAME     | NUM | PHONE     |\n+----------+-----+-----------+\n| ZhangSan |   1 | 1234-5678 |\n| ZhangSan |   2 | 3219-6066 |\n| ZhangSan |   3 | 5365-9583 |\n+----------+-----+-----------+\n3 rows in set\n",
        "/*访问远端的 OceanBase 数据库查询数据*/\nobclient> SELECT ID FROM tbl2@ob_dblink;\n+------+\n| ID   |\n+------+\n|    1 |\n|    2 |\n|    3 |\n+------+\n3 rows in set\n\nobclient> SELECT * FROM tbl2@ob_dblink;\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    1 | a    |  100 |\n|    2 | b    |  200 |\n|    3 | a    |   50 |\n+------+------+------+\n3 rows in set\n\n/*访问远端的 Oracle 数据库查询数据*/\nobclient> SELECT ID FROM tbl2@ora_dblink;\n+------+\n| ID   |\n+------+\n|    1 |\n|    2 |\n|    3 |\n+------+\n3 rows in set\n\nobclient> SELECT * FROM tbl2@ora_dblink;\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    1 | a    |  100 |\n|    2 | b    |  200 |\n|    3 | a    |   50 |\n+------+------+------+\n3 rows in set\n\n/*同时查询本地数据库和远端数据库的数据*/\nobclient> SELECT t4.col1,t5.col2 FROM tbl1 t4, tbl2@ob_dblink t5 WHERE t1.col3=t2.col3;\n\n/*同时查询不同的远端数据库的数据*/\nobclient> SELECT * FROM tbl2@ob_dblink t_remote1,tbl2@ora_dblink t_remote2 WHERE t_remote1.col1 = t_remote2.col1;\n",
        "obclient> CREATE TABLE emp(  \n    empno         NUMBER(4,0),  \n    empname       VARCHAR(10),  \n    job           VARCHAR(9),  \n    mgr           NUMBER(4,0),  \n    hiredate      DATE,  \n    sal           NUMBER(7,2),  \n    comm          NUMBER(7,2),        \n    deptno        NUMBER(2,0),   \n    CONSTRAINT PK_emp PRIMARY KEY (empno)\n);\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO emp VALUES (1839,'KING','PRESIDENT',null,'17-DEC-81',5000,null,10)\n   ,(1698,'BLAKE','MANAGER',1839,'01-MAY-81',2850,null,30)\n   ,(1782,'CLARK', 'MANAGER', 1839, '09-JUN-81', 2450, null, 10)\n   ,(1566,'JONES','MANAGER',1839, '02-APR-81',2975,null,40)\n   ,(1788,'SCOTT','ANALYST',1566, '15-JUL-87',3000,null,20)\n   ,(1902,'FORD','ANALYST',1566, '05-OCT-81',3000,null,40)\n   ,(1369,'SMITH','CLERK',1902, '17-NOV-80',800,null,20)\n   ,(1499,'ALLEN','SALESMAN',1698, '20-FEB-81',1600,300,30);\n\nQuery OK, 8 rows affected\nRecords: 8  Duplicates: 0  Warnings: 0\n\nobclient> SELECT empno, empname FROM emp ORDER BY empno FETCH FIRST 3 ROWS ONLY;\n+-------+---------+\n| EMPNO | EMPNAME |\n+-------+---------+\n|  1369 | SMITH   |\n|  1499 | ALLEN   |\n|  1566 | JONES   |\n+-------+---------+\n3 rows in set\n",
        "obclient> SELECT empno, empname\nFROM emp\nORDER BY empno\nFETCH NEXT 3 ROWS ONLY;\n",
        "obclient> SELECT empno, empname sal FROM emp ORDER BY sal\n FETCH FIRST 25 PERCENT ROWS ONLY;\n+-------+-------+\n| EMPNO | SAL   |\n+-------+-------+\n|  1499 | ALLEN |\n|  1698 | BLAKE |\n+-------+-------+\n2 rows in set\n",
        "obclient> SELECT empno, empname sal FROM emp ORDER BY sal\n FETCH FIRST 25 PERCENT ROWS WITH TIES;\n+-------+-------+\n| EMPNO | SAL   |\n+-------+-------+\n|  1499 | ALLEN |\n|  1698 | BLAKE |\n+-------+-------+\n2 rows in set\n",
        "obclient> CREATE TABLE t1 (c1 INT, c2 INT );\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO t1 VALUES ('1','2');\nQuery OK, 1 row affected\n\nobclient> SELECT * FROM (t1) a;\n+------+------+\n| C1   | C2   |\n+------+------+\n|    1 |    2 |\n+------+------+\n1 row in set\n",
        "obclient> SELECT RANDOM(4) FROM GENERATOR(3);\n+---------------------+\n| RANDOM(4)           |\n+---------------------+\n| 5267436225003336391 |\n| -851690886662571060 |\n| 1738617244330437274 |\n+---------------------+\n3 rows in set\n",
        "obclient> CREATE DATABASE LINK seq_link CONNECT TO test@oracle IDENTIFIED BY test HOST '127.xxx.xxx.xxx:2828';\nQuery OK, 0 rows affected\n",
        "obclient> CREATE SEQUENCE my_seq START WITH 1 MINVALUE 1 MAXVALUE 10 INCREMENT BY 2 NOCYCLE NOORDER CACHE 30;\nQuery OK, 0 rows affected\n",
        "obclient> SELECT my_seq.NEXTVAL@seq_link FROM DUAL;\n+---------+\n| NEXTVAL |\n+---------+\n|       1 |\n+---------+\n1 row in set\n\nobclient> SELECT my_seq.CURRVAL@seq_link FROM DUAL;\n+---------+\n| CURRVAL |\n+---------+\n|       1 |\n+---------+\n1 row in set\n\nobclient> SELECT my_seq.NEXTVAL@seq_link FROM DUAL;\n+---------+\n| NEXTVAL |\n+---------+\n|       3 |\n+---------+\n1 row in set\n"
    ],
    "Category": [
        "DML"
    ]
}