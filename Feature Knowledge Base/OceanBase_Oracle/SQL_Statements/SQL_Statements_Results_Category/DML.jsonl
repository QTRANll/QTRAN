{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054291"], "Title": ["DELETE"], "Feature": ["DELETE [hint_options] [FROM] table_factor [ WHERE where_condition ]\n    [{ RETURNING | RETURN } returning_exprs [ into_clause ]]\n\ntable_factor:\n    {table_name | table_subquery | '(' table_reference ')' }\n\nwhere_condition:\n    expression\n\nreturning_exprs:\n    projection_col_name [,projection_col_name ...]\n\ninto_clause:\n    { INTO into_var_list | BULK COLLECT INTO into_var_list}\n\ninto_var_list:\n    { USER_VARIABLE | ref_name } [, { USER_VARIABLE | ref_name }...]\n"], "Description": ["该语句用来删除表中符合条件的行，包括单表删除及多表删除两种方式。", "\n\n\n参数\n描述\n\n\n\n\nhint_options\n指定 Hint 选项，为可选项。\n\n\ntable_factor\n指定需要删除的表名（基表、可更新视图、特殊子查询）。\n\n\nwhere_condition\n删除的表需要满足的过滤条件。\n\n\nreturning_exprs\n返回删除数据前的投影列。\n\n\ninto_clause\n将删除数据前的投影列插入到指定列表。\n\n\nref_name\n变量名。\n\n\n", "\n注意\n特殊子查询是指类似于可更新视图对应的子查询，这类子查询不应该包含复杂的算子（例如 GROUP BY、DISTINCT、WINDOW FUNCTION 等）。\n"], "Examples": ["obclient> CREATE TABLE tbl1(col1 INT PRIMARY KEY, col2 INT);\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO tbl1 VALUES(1,1),(2,2),(3,3),(4,4);\nQuery OK, 4 rows affected\nRecords: 4  Duplicates: 0  Warnings: 0\n\nobclient> SELECT * FROM tbl1;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    1 |    1 |\n|    2 |    2 |\n|    3 |    3 |\n|    4 |    4 |\n+------+------+\n4 rows in set\n", "obclient>DELETE FROM tbl1 WHERE col1 = 2;\nQuery OK, 1 row affected\n\nobclient>SELECT * FROM tbl1;\n+----+------+\n| COL1 | COL2 |\n+----+------+\n|  1 |    1 |\n|  3 |    3 |\n|  4 |    4 |\n+----+------+\n3 rows in set\n", "obclient> DELETE FROM (SELECT * FROM tbl1);\nQuery OK, 4 rows affected\n\nobclient> SELECT * FROM tbl1;\nEmpty set\n", "obclient> DELETE FROM tbl1 RETURNING col1;\n+----+\n| COL1 |\n+----+\n|  1 |\n|  2 |\n|  3 |\n|  4 |\n+----+\n4 rows in set\n\nobclient>SELECT * FROM t1;\nEmpty set\n"], "Category": ["DML"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054292"], "Title": ["EXPLAIN"], "Feature": ["/*获取表或列的信息*/\n{EXPLAIN | DESCRIBE | DESC} table_name [column_name];\n\n/*获取 SQL 计划信息*/\n{EXPLAIN [INTO table_name ] [SET statement_id = string]  \n | DESCRIBE\n | DESC} [explain_type] [PRETTY | PRETTY_COLOR] dml_statement;\n\nexplain_type：\n    BASIC\n  | OUTLINE\n  | EXTENDED\n  | EXTENDED_NOADDR\n  | PARTITIONS\n  | FORMAT = {TRADITIONAL| JSON}\n\ndml_statement:\n    SELECT statement\n  | DELETE statement\n  | INSERT statement\n  | UPDATE statement\n  | MERGE statement\n"], "Description": ["该语句用于解释 SQL 语句的执行计划，可以是 SELECT、DELETE、INSERT、REPLACE 或 UPDATE 语句。", "EXPLAIN 与 DESCRIBE、DESC 互为同义词。", "\n\n\n参数\n描述\n\n\n\n\ntable_name\n指定表名。\n\n\ncolumn_name\n指定表的列名。\n\n\nINTO table_name\n表示将 EXPLAIN 的计划信息保存到指定表内。如果没有指定 INTO table_name，默认查询到 PLAN_TABLE 表内。\n\n\nSET statement_id\n表示当前查询使用字符串标记，以方便后续查询该 SQL 的计划信息。如果没有指定 SET statement_id，默认使用空字符串作为信息标记。\n\n\nPRETTY | PRETTY_COLOR\n将计划树中的父节点和子节点使用树线或彩色树线连接起来，使得执行计划展示更方便阅读。\n\n\nBASIC\n指定输出计划的基础信息，如算子 ID、算子名称、所引用的表名。\n\n\nexplain_type\n指定解释类型。\n\n\nBASIC\n指定输出计划的基础信息，例如算子 ID、算子名称、所引用的表名。\n\n\nOUTLINE\n指定输出的计划信息包含 Outline 信息。\n\n\nEXTENDED\nEXPLAIN 产生附加信息，包括每个算子的输入列和输出列、访问表的分区信息、当前使用的filter信息。如果当前算子使用了索引，显示所使用的索引列及抽取的 Query Range。\n\n\nEXTENDED_NOADDR\n以简约的方式展示附加信息。\n\n\nPARTITIONS\n显示分区相关信息。\n\n\nTRADITIONAL | JSON\n指定 EXPALIN 的输出格式。 \n      \nTRADITIONAL：表格输出格式。\nJSON：使用 KEY:VALUE 输出格式，JSON 显示为JSON 字符串，包括 EXTENDED 和 PARTITIONS 信息。\n\n\n\ndml_statement\nDML 语句。\n\n\n"], "Examples": ["/* 创建表 test */\nobclient> CREATE TABLE test (statement_id VARCHAR(30), plan_id INT, gmt_create TIMESTAMP,\n   remarks VARCHAR(4000), operator VARCHAR(255), options VARCHAR(255), object_node VARCHAR(40),\n   object_owner VARCHAR(128), object_name VARCHAR(128), object_alias VARCHAR(261), object_instance INT,\n   object_type VARCHAR(30),optimizer VARCHAR(4000), search_columns INT, id INT, parent_id INT, depth INT,\n   position INT,is_last_child INT, cost INT, cardinality INT, bytes INT, rowset INT, other_tag VARCHAR(4000),\n   partition_start VARCHAR(4000), partition_stop VARCHAR(4000), partition_id INT, other VARCHAR(4000),\n   distribution VARCHAR(64), cpu_cost INT, io_cost INT, temp_space INT, access_predicates VARCHAR(4000),\n   filter_predicates VARCHAR(4000),startup_predicates VARCHAR(4000), projection VARCHAR(4000),\n   special_predicates VARCHAR(4000), time INT, qblock_name VARCHAR(128), other_xml VARCHAR(4000));\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE t1(c1 INT);\nQuery OK, 0 rows affected\n\n/* 如果时间格式报错，可以通过如下命令重新设置 TIMESTAMP 格式*/\nobclient> ALTER SESSION SET NLS_TIMESTAMP_FORMAT = 'YYYY-MM-DD HH24:MI:SS.FF';\nQuery OK, 0 rows affected\n\n/* 解释查询计划，并把计划信息保存在指定表 test 内 */\nobclient> EXPLAIN INTO test SELECT COUNT(*) FROM t1;\n+--------------------------------------------------------------------------+\n| Query Plan                                                               |\n+--------------------------------------------------------------------------+\n| =================================================                        |\n| |ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|                        |\n| -------------------------------------------------                        |\n| |0 |SCALAR GROUP BY  |    |1       |2           |                        |\n| |1 |└─TABLE FULL SCAN|T1  |1       |2           |                        |\n| =================================================                        |\n| Outputs & filters:                                                       |\n| -------------------------------------                                    |\n|   0 - output([T_FUN_COUNT_SUM(T_FUN_COUNT(*))]), filter(nil), rowset=256 |\n|       group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])            |\n|   1 - output([T_FUN_COUNT(*)]), filter(nil), rowset=256                  |\n|       access(nil), partitions(p0)                                        |\n|       is_index_back=false, is_global_index=false,                        |\n|       range_key([T1.__pk_increment]), range(MIN ; MAX)always true        |\n+--------------------------------------------------------------------------+\n14 rows in set\n\nobclient> SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY(table_name=>'test'));\n+--------------------------------------------------------------------------+\n| COLUMN_VALUE                                                             |\n+--------------------------------------------------------------------------+\n| =================================================                        |\n| |ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|                        |\n| -------------------------------------------------                        |\n| |0 |SCALAR GROUP BY  |    |1       |2           |                        |\n| |1 |└─TABLE FULL SCAN|T1  |1       |2           |                        |\n| =================================================                        |\n| Outputs & filters:                                                       |\n| -------------------------------------                                    |\n|   0 - output([T_FUN_COUNT_SUM(T_FUN_COUNT(*))]), filter(nil), rowset=256 |\n|       group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])            |\n|   1 - output([T_FUN_COUNT(*)]), filter(nil), rowset=256                  |\n|       access(nil), partitions(p0)                                        |\n|       is_index_back=false, is_global_index=false,                        |\n|       range_key([T1.__pk_increment]), range(MIN ; MAX)always true        |\n+--------------------------------------------------------------------------+\n14 rows in set\n", "obclient> EXPLAIN INTO test SET statement_id='test2' SELECT COUNT(*) FROM t1;\n+--------------------------------------------------------------------------+\n| Query Plan                                                               |\n+--------------------------------------------------------------------------+\n| =================================================                        |\n| |ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|                        |\n| -------------------------------------------------                        |\n| |0 |SCALAR GROUP BY  |    |1       |2           |                        |\n| |1 |└─TABLE FULL SCAN|T1  |1       |2           |                        |\n| =================================================                        |\n| Outputs & filters:                                                       |\n| -------------------------------------                                    |\n|   0 - output([T_FUN_COUNT_SUM(T_FUN_COUNT(*))]), filter(nil), rowset=256 |\n|       group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])            |\n|   1 - output([T_FUN_COUNT(*)]), filter(nil), rowset=256                  |\n|       access(nil), partitions(p0)                                        |\n|       is_index_back=false, is_global_index=false,                        |\n|       range_key([T1.__pk_increment]), range(MIN ; MAX)always true        |\n+--------------------------------------------------------------------------+\n14 rows in set\n\nobclient> SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY(table_name=>'test',statement_id=>'test2'));\n+--------------------------------------------------------------------------+\n| COLUMN_VALUE                                                             |\n+--------------------------------------------------------------------------+\n| =================================================                        |\n| |ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|                        |\n| -------------------------------------------------                        |\n| |0 |SCALAR GROUP BY  |    |1       |2           |                        |\n| |1 |└─TABLE FULL SCAN|T1  |1       |2           |                        |\n| =================================================                        |\n| Outputs & filters:                                                       |\n| -------------------------------------                                    |\n|   0 - output([T_FUN_COUNT_SUM(T_FUN_COUNT(*))]), filter(nil), rowset=256 |\n|       group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])            |\n|   1 - output([T_FUN_COUNT(*)]), filter(nil), rowset=256                  |\n|       access(nil), partitions(p0)                                        |\n|       is_index_back=false, is_global_index=false,                        |\n|       range_key([T1.__pk_increment]), range(MIN ; MAX)always true        |\n+--------------------------------------------------------------------------+\n14 rows in set\n", "obclient> CREATE TABLE t101(c1 INT,c2 INT);\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE t102(c1 INT,c2 INT);\nQuery OK, 0 rows affected\n", "obclient> EXPLAIN t101;\n+-------+------------+------+-----+---------+-------+\n| FIELD | TYPE       | NULL | KEY | DEFAULT | EXTRA |\n+-------+------------+------+-----+---------+-------+\n| C1    | NUMBER(38) | YES  | NULL | NULL    | NULL |\n| C2    | NUMBER(38) | YES  | NULL | NULL    | NULL |\n+-------+------------+------+-----+---------+-------+\n2 rows in set\n", "obclient> EXPLAIN t102 c2;\n+-------+------------+------+-----+---------+-------+\n| FIELD | TYPE       | NULL | KEY | DEFAULT | EXTRA |\n+-------+------------+------+-----+---------+-------+\n| C2    | NUMBER(38) | YES  | NULL | NULL    | NULL |\n+-------+------------+------+-----+---------+-------+\n\n1 row in set\n", "+------------------------------------------------------------------------------------+\n| Query Plan                                                                         |\n+------------------------------------------------------------------------------------+\n| =================================================                                  |\n| |ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|                                  |\n| -------------------------------------------------                                  |\n| |0 |HASH JOIN        |    |1       |8           |                                  |\n| |1 |├─TABLE FULL SCAN|T102|1       |4           |                                  |\n| |2 |└─TABLE FULL SCAN|T101|1       |4           |                                  |\n| =================================================                                  |\n| Outputs & filters:                                                                 |\n| -------------------------------------                                              |\n|   0 - output([T101.C1], [T101.C2], [T102.C1], [T102.C2]), filter(nil), rowset=16   |\n|       equal_conds([T101.C2 = T102.C2]), other_conds(nil)                           |\n|   1 - output([T102.C2], [T102.C1]), filter([T102.C1 > 4]), rowset=16               |\n|       access([T102.C2], [T102.C1]), partitions(p0)                                 |\n|       is_index_back=false, is_global_index=false, filter_before_indexback[false],  |\n|       range_key([T102.__pk_increment]), range(MIN ; MAX)always true                |\n|   2 - output([T101.C2], [T101.C1]), filter(nil), rowset=16                         |\n|       access([T101.C2], [T101.C1]), partitions(p0)                                 |\n|       is_index_back=false, is_global_index=false,                                  |\n|       range_key([T101.__pk_increment]), range(MIN ; MAX)always true                |\n+------------------------------------------------------------------------------------+\n", "obclient> EXPLAIN EXTENDED_NOADDR SELECT * FROM t101,t102 WHERE t101.c2=t102.c2 AND t102.c1 > 4;\n+------------------------------------------------------------------------------------+\n| Query Plan                                                                         |\n+------------------------------------------------------------------------------------+\n| =================================================                                  |\n| |ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|                                  |\n| -------------------------------------------------                                  |\n| |0 |HASH JOIN        |    |1       |8           |                                  |\n| |1 |├─TABLE FULL SCAN|T102|1       |4           |                                  |\n| |2 |└─TABLE FULL SCAN|T101|1       |4           |                                  |\n| =================================================                                  |\n| Outputs & filters:                                                                 |\n| -------------------------------------                                              |\n|   0 - output([T101.C1], [T101.C2], [T102.C1], [T102.C2]), filter(nil), rowset=16   |\n|       equal_conds([T101.C2 = T102.C2]), other_conds(nil)                           |\n|   1 - output([T102.C2], [T102.C1]), filter([T102.C1 > 4]), rowset=16               |\n|       access([T102.C2], [T102.C1]), partitions(p0)                                 |\n|       is_index_back=false, is_global_index=false, filter_before_indexback[false],  |\n|       range_key([T102.__pk_increment]), range(MIN ; MAX)always true                |\n|   2 - output([T101.C2], [T101.C1]), filter(nil), rowset=16                         |\n|       access([T101.C2], [T101.C1]), partitions(p0)                                 |\n|       is_index_back=false, is_global_index=false,                                  |\n|       range_key([T101.__pk_increment]), range(MIN ; MAX)always true                |\n| Used Hint:                                                                         |\n| -------------------------------------                                              |\n|   /*+                                                                              |\n|                                                                                    |\n|   */                                                                               |\n| Qb name trace:                                                                     |\n| -------------------------------------                                              |\n|   stmt_id:0, stmt_type:T_EXPLAIN                                                   |\n|   stmt_id:1, SEL$1                                                                 |\n| Outline Data:                                                                      |\n| -------------------------------------                                              |\n|   /*+                                                                              |\n|       BEGIN_OUTLINE_DATA                                                           |\n|       LEADING(@\"SEL$1\" (\"SYS\".\"T102\"@\"SEL$1\" \"SYS\".\"T101\"@\"SEL$1\"))                |\n|       USE_HASH(@\"SEL$1\" \"SYS\".\"T101\"@\"SEL$1\")                                      |\n|       FULL(@\"SEL$1\" \"SYS\".\"T102\"@\"SEL$1\")                                          |\n|       FULL(@\"SEL$1\" \"SYS\".\"T101\"@\"SEL$1\")                                          |\n|       OPTIMIZER_FEATURES_ENABLE('4.0.0.0')                                         |\n|       END_OUTLINE_DATA                                                             |\n|   */                                                                               |\n| Optimization Info:                                                                 |\n| -------------------------------------                                              |\n|   T102:                                                                            |\n|       table_rows:1                                                                 |\n|       physical_range_rows:1                                                        |\n|       logical_range_rows:1                                                         |\n|       index_back_rows:0                                                            |\n|       output_rows:0                                                                |\n|       table_dop:1                                                                  |\n|       dop_method:Table DOP                                                         |\n|       avaiable_index_name:[T102]                                                   |\n|       stats version:0                                                              |\n|       dynamic sampling level:1                                                     |\n|   T101:                                                                            |\n|       table_rows:1                                                                 |\n|       physical_range_rows:1                                                        |\n|       logical_range_rows:1                                                         |\n|       index_back_rows:0                                                            |\n|       output_rows:1                                                                |\n|       table_dop:1                                                                  |\n|       dop_method:Table DOP                                                         |\n|       avaiable_index_name:[T101]                                                   |\n|       stats version:0                                                              |\n|       dynamic sampling level:1                                                     |\n|   Plan Type:                                                                       |\n|       LOCAL                                                                        |\n|   Note:                                                                            |\n|       Degree of Parallelisim is 1 because of table property                        |\n+------------------------------------------------------------------------------------+\n", "obclient> EXPLAIN FORMAT=TRADITIONAL INSERT INTO T101 VALUES(1,1);\n+----------------------------------------------------------------------------------------------------------------------------------------+\n| Query Plan                                                                                                                             |\n+----------------------------------------------------------------------------------------------------------------------------------------+\n| ==================================================                                                                                     |\n| |ID|OPERATOR          |NAME|EST.ROWS|EST.TIME(us)|                                                                                     |\n| --------------------------------------------------                                                                                     |\n| |0 |DISTRIBUTED INSERT|    |1       |13          |                                                                                     |\n| |1 |└─EXPRESSION      |    |1       |1           |                                                                                     |\n| ==================================================                                                                                     |\n| Outputs & filters:                                                                                                                     |\n| -------------------------------------                                                                                                  |\n|   0 - output(nil), filter(nil)                                                                                                         |\n|       columns([{T101: ({T101: (T101.__pk_increment, T101.C1, T101.C2)})}]),                                                            |\n|       column_values([T_HIDDEN_PK], [column_conv(NUMBER,PS:(-1,0),NULL,__values.C1)], [column_conv(NUMBER,PS:(-1,0),NULL,__values.C2)]) |\n|   1 - output([__values.C1], [__values.C2]), filter(nil)                                                                                |\n|       values({1, 1})                                                                                                                   |\n+----------------------------------------------------------------------------------------------------------------------------------------+\n", "obclient> EXPLAIN FORMAT=JSON SELECT * FROM t101,t102 WHERE t101.c2=t102.c2 AND t102.c1 > 4;\n+------------------------------------------------------------------+\n| Query Plan                                                       |\n+------------------------------------------------------------------+\n| {                                                                |\n|   \"ID\":0,                                                        |\n|   \"OPERATOR\":\"HASH JOIN \",                                       |\n|   \"NAME\":\"\",                                                     |\n|   \"EST.ROWS\":1,                                                  |\n|   \"EST.TIME(us)\":8,                                              |\n|   \"output\":\"output([T101.C1], [T101.C2], [T102.C1], [T102.C2])\", |\n|   \"CHILD_1\": {                                                   |\n|     \"ID\":1,                                                      |\n|     \"OPERATOR\":\"TABLE FULL SCAN\",                                |\n|     \"NAME\":\"T102\",                                               |\n|     \"EST.ROWS\":1,                                                |\n|     \"EST.TIME(us)\":4,                                            |\n|     \"output\":\"output([T102.C2], [T102.C1])\"                      |\n|   },                                                             |\n|   \"CHILD_2\": {                                                   |\n|     \"ID\":2,                                                      |\n|     \"OPERATOR\":\"TABLE FULL SCAN\",                                |\n|     \"NAME\":\"T101\",                                               |\n|     \"EST.ROWS\":1,                                                |\n|     \"EST.TIME(us)\":4,                                            |\n|     \"output\":\"output([T101.C2], [T101.C1])\"                      |\n|   }                                                              |\n| }                                                                |\n+------------------------------------------------------------------+\n"], "Category": ["DML"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054289"], "Title": ["INSERT"], "Feature": ["INSERT [hint_options] { single_table_insert | multi_table_insert | overwrite_table_insert};\n\nsingle_table_insert:\n    { INTO insert_table_clause opt_nologging '(' column_list ')' values_clause [{ RETURNING | RETURN } returning_exprs [into_clause]]\n    | INTO insert_table_clause opt_nologging '(' ')' values_clause [{ RETURNING | RETURN } returning_exprs [into_clause]]\n    | INTO insert_table_clause opt_nologging values_clause [{ RETURNING | RETURN } returning_exprs [into_clause]]\n    }\n\nopt_nologging:\n    { NOLOGGING | /*EMPTY*/ }\n\nreturning_exprs:\n    projection_col_name [,projection_col_name ...]\n\ninsert_into_clause:\n    { INTO into_var_list | BULK COLLECT INTO into_var_list}\n\ninto_var_list:\n    { USER_VARIABLE | ref_name } [, { USER_VARIABLE | ref_name }...]\n\nvalues_clause:\n    VALUES ({ expr | DEFAULT } [, { expr | DEFAULT } ]...  )\n\nmulti_table_insert:\n    { ALL { insert_into_clause [ values_clause ] [error_logging_clause] }\n    | conditional_insert_clause\n    } subquery\n\nconditional_insert_clause:\n    [ ALL | FIRST ]\n    WHEN condition\n    THEN insert_into_clause\n    [ values_clause ]\n    [ error_logging_clause ]\n    [ insert_into_clause [ values_clause ] [ error_logging_clause ] ]...\n    [ WHEN condition\n        THEN insert_into_clause\n        [ values_clause ]\n        [ error_logging_clause ]\n        [ insert_into_clause [ values_clause ] [ error_logging_clause ] ]...\n    ]...\n    [ ELSE insert_into_clause\n        [ values_clause ]\n        [ error_logging_clause ]\n        [ insert_into_clause [ values_clause ] [ error_logging_clause ] ]...\n    ]\n\nerror_logging_clause:\n    LOG ERRORS [ INTO [schema.] table_name ] [ (simple_expression) ] [ REJECT LIMIT { integer | UNLIMITED } ]\n\noverwrite_table_insert:\n    [/*+PARALLEL(N)*/] OVERWRITE table_name select_stmt\n"], "Description": ["该语句用于添加一个或多个记录到表中。", "\n\n\n参数\n描述\n\n\n\n\nhint_options\n指定 Hint 选项，为可选项。更多使用 Hint 信息，参见 Hint 概述。OceanBase 数据库 Oracle 模式 INSERT INTO SELECT 语句支持 direct Hint 的启用旁路导入，格式为：/*+ direct(bool, int, load_mode)} enable_parallel_dml PARALLEL(N) */。 \n      \nbool：表示写入的数据是否需要排序，true 表示需要排序，false 表示不需要排序。\nint：表示最大容忍的错误行数。\nload_mode：可选参数，表示旁路导入的模式。取值须使用英文单引号包起来，取值如下： \n        \nfull：默认值，表示全量导入。\ninc：表示增量导入，支持 INSERT 和 IGNORE 语义。\ninc_replace：表示增量导入，但不检查主键是否重复，相当于 REPLACE 语义的增量导入。\n\nenable_parallel_dml parallel(N)：加载数据的并行度，N 默认为 4。 \n        \n说明\n一般情况下，enable_parallel_dml Hint 和 parallel Hint 必须配合使用才能开启并行 DML。不过，当目标表的 Schema 上指定了表级别的并行度时，仅需指定 enable_parallel_dml Hint。\n\n 更多使用 INSERT INTO 旁路导入的信息，参见 使用 INSERT INTO SELECT 语句旁路导入数据。 \n      \n注意\n在执行旁路导入任务的过程中，不建议同时进行 OceanBase 数据库的升级操作，因为这可能导致旁路导入任务失败。\n\n\n\nsingle_table_insert\n单表插入。\n\n\ninsert_table_clause\n指定的插入的表，可以是基表、可更新视图、特殊子查询。\n\n\nopt_nologging\n尽量减少插入时的日志信息。\n\n\ncolumn_list\n指定要插入的列名。\n\n\nreturning_exprs\n返回插入数据之后的投影列。\n\n\ninsert_into_clause\n将插入数据之后的列值插入到指定列表中。\n\n\nmulti_table_insert\n多表插入。\n\n\nconditional_insert_clause\n带条件的多表插入。 \n      \nALL：遍历所有匹配条件的分支，只要满足条件就会将数据插入对应的表。\nFIRST：找到第一个满足条件的分支后，将数据插入该分支对应的表，不会再继续检查剩余分支的条件是否满足。\n\n\n\nerror_logging_clause\n将 SQL 错误和受影响的行数列中的值保存在一个错误记录表。\n\n\noverwrite_table_insert\n用于将查询结果替换表中的现有数据，即该语句会先清空表中的旧数据，再将新数据批量写入到表中。有关使用 INSERT OVERWRITE SELECT 语句的示例信息，参见 插入数据 中的 使用 INSERT OVERWRITE SELECT 语句插入数据 章节。 \n      \n注意\n该语句无法在多行事务中操作。因此，为确保操作顺利进行，需先执行 SET autocommit = on; 命令开启自动提交事务。\n\n\n\nselect_stmt\n指定 SELECT 子句。有关查询语句的详细信息，参见 SIMPLE SELECT。\n\n\n", "\n注意\n特殊子查询指的类似于可更新视图对应的子查询，这类子查询不应该包含复杂的算子（比如 group by、distinct、window function 等）。\n"], "Examples": ["obclient> CREATE TABLE tbl1(col1 INT PRIMARY KEY, col2 INT,col3 INT);\nQuery OK, 0 rows affected\n", "obclient> INSERT INTO tbl1 VALUES(1,2,3);\nQuery OK, 1 row affected\n\nobclient> SELECT * FROM tbl1;\n+------+------+------+\n| COL1 | COL2 | COL3 |\n+------+------+------+\n|    1 |    2 |    3 |\n+------+------+------+\n1 row in set\n", "obclient>INSERT INTO (SELECT * FROM tbl1) VALUES(1,2,3);\nQuery OK, 1 row affected\n\nobclient> SELECT * FROM tbl1;\n+----+------+------+\n| COL1 | COL2   | COL3   |\n+----+------+------+\n|  1 |    2 |    3 |\n+----+------+------+\n1 row in set\n", "obclient> INSERT INTO tbl1 VALUES(1,2,3) RETURNING col1;\n+------+\n| COL1 |\n+------+\n|    1 |\n+------+\n1 row in set\n\nobclient> SELECT * FROM tbl1;\n+------+------+------+\n| COL1 | COL2 | COL3 |\n+------+------+------+\n|    1 |    2 |    3 |\n+------+------+------+\n1 row in set\n", "obclient> INSERT ALL INTO tbl1 VALUES(1,1,1)\n                                    INTO tbl2 VALUES(2,2,2)\n                SELECT * FROM tbl3 WHERE ROWNUM< 2;\nQuery OK, 2 rows affected\nRecords: 2  Duplicates: 0  Warnings: 0\n\nobclient> SELECT * FROM tbl1;\n+------+------+------+\n| COL1 | COL2 | COL3 |\n+------+------+------+\n|    1 |    1 |    1 |\n+------+------+------+\n1 row in set\n\nobclient> SELECT * FROM tbl2;\n+------+------+------+\n| COL1 | COL2 | COL3 |\n+------+------+------+\n|    2 |    2 |    2 |\n+------+------+------+\n1 row in set\n", "obclient> INSERT INTO tbl VALUES(1,2,3);\nQuery OK, 1 row affected\n\nobclient>INSERT ALL\n              WHEN col2 > 1 THEN INTO tbl1 VALUES(1,1,1)\n              WHEN col3 > 1 THEN INTO tbl2 VALUES(2,2,2)\n              ELSE INTO tbl1 VALUES(3,3,3) SELECT col2,col3 FROM tbl;\nQuery OK, 2 rows affected\nRecords: 2  Duplicates: 0  Warnings: 0\n\nobclient> SELECT * FROM tbl1;\n+----+------+------+\n| COL1 | COL2   | COL3   |\n+----+------+------+\n|  1 |    1 |    1 |\n+----+------+------+\n1 row in set\n\nobclient> SELECT * FROM tbl2;\n+----+------+------+\n| COL1 | COL2   | COL3   |\n+----+------+------+\n|  2 |    2 |    2 |\n+----+------+------+\n1 row in set\n", "obclient>INSERT INTO tbl VALUES(1,2,3);\nQuery OK, 1 row affected\n\nobclient>INSERT ALL\n              WHEN col2 > 1 THEN INTO tbl1 VALUES(1,1,1) INTO tbl2 VALUES(4,4,4)\n              WHEN col3 > 1 THEN INTO tbl2 VALUES(2,2,2)\n              ELSE INTO tbl1 VALUES(3,3,3) SELECT col2,col3 FROM tbl;\nQuery OK, 3 rows affected\nRecords: 3  Duplicates: 0  Warnings: 0\n\nobclient> SELECT * FROM tbl1;\n+----+------+------+\n| COL1 | COL2   | COL3   |\n+----+------+------+\n|  1 |    1 |    1 |\n+----+------+------+\n1 row in set\n\nobclient> SELECT * FROM tbl2;\n+------+------+------+\n| COL1   | COL2   | COL3   |\n+------+------+------+\n|    4 |    4 |    4 |\n|    2 |    2 |    2 |\n+------+------+------+\n2 rows in set\n", "obclient [SYS]> INSERT /*+ direct(true, 0, 'inc_replace') enable_parallel_dml parallel(2) */ INTO tbl2 SELECT * FROM tbl1;\n", "Query OK, 8 rows affected\nRecords: 8  Duplicates: 0  Warnings: 0\n"], "Category": ["DML"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054288"], "Title": ["MERGE"], "Feature": ["MERGE [hint_options] INTO target_table_name [opt_alias]\n    USING source_table_name [opt_alias]\n    ON (expr)\n    [merge_update_clause] [merge_insert_clause]\n\nmerge_update_clause:\n    WHEN MATCHED THEN UPDATE SET update_asgn_list [WHERE expr] [DELETE WHERE expr]\n\nmerge_insert_clause:\n    WHEN NOT MATCHED THEN INSERT opt_insert_columns VALUES '(' insert_vals ')' [WHERE expr]\n"], "Description": ["该语句用来根据一张源表更新一张目标表的数据，可以对目标表进行插入、更新或者删除。", "\n\n\n参数\n描述\n\n\n\n\nhint_options\n指定 Hint 选项，为可选项。\n\n\ntarget_table_name\n指定要更新或插入目标表的表名。\n\n\nsource_table_name\n指定要更新或插入的数据来源的表名。\n\n\nON (expr)\n源表和目标表的连接条件。\n\n\nupdate_asgn_list\n更新语句的赋值操作。\n\n\nWHERE expr\n触发更新、删除或者插入操作时的需要满足的条件。\n\n\n"], "Examples": ["obclient> CREATE TABLE tbl1 (col1 INT, col2 INT);\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2 (col1 INT, col2 INT);\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO tbl1 VALUES(0, 0),(1, null),(2, null);\nQuery OK, 3 row affected\n\nobclient> INSERT INTO tbl2 VALUES(1, 1),(2, 20),(3, 3),(4, 40);\nQuery OK, 4 row affected\n\nobclient> SELECT * FROM tbl1;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    0 |    0 |\n|    1 | NULL |\n|    2 | NULL |\n+------+------+\n3 rows in set\n\nobclient> SELECT * FROM tbl2;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    1 |    1 |\n|    2 |   20 |\n|    3 |    3 |\n|    4 |   40 |\n+------+------+\n4 rows in set\n", "obclient>MERGE INTO tbl1 USING tbl2 ON (tbl1.col1 = tbl2.col1)\n       WHEN MATCHED THEN UPDATE SET tbl1.col2 = tbl2.col2 WHERE tbl1.col2 IS NULL DELETE\n       WHERE tbl1.col2 >= 10\n       WHEN NOT MATCHED THEN INSERT VALUES(tbl2.col1, tbl2.col2)\n       WHERE tbl2.col2 < 10;\nQuery OK, 3 rows affected\n\nobclient> SELECT * FROM tbl1;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    0 |    0 |\n|    1 |    1 |\n|    3 |    3 |\n+------+------+\n3 rows in set\n"], "Category": ["DML"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054293"], "Title": ["PURGE"], "Feature": ["PURGE  { {TABLE object_name | INDEX object_name }\n| RECYCLEBIN\n};\n"], "Description": ["该语句用来删除回收站中的表、索引或删除回收站中的全部内容。", "\n\n\n参数\n描述\n\n\n\n\nobject_name\n指定要删除的表或索引在回收站中的名称，不支持直接指定表或索引名称。 说明\n\n目前直接删除索引，索引不会进入回收站。\n如果直接删除包含索引的表，那么表和索引都会进入回收站。当删除回收站中的表时，表关联的索引会一起被删除。\n\n\n\nRECYCLEBIN\n清空回收站。 注意 PURGE RECYCLEBIN 会清除回收站中的全部内容，操作时请谨慎。\n\n\n"], "Examples": ["obclient> CREATE TABLE tbl1(col1 INT,col2 INT);\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2(col1 INT,col2 INT);\nQuery OK, 0 rows affected\n\nobclient> CREATE INDEX tbl1_idx1 ON tbl1(col1);\nQuery OK, 0 rows affected\n\nobclient> CREATE INDEX tbl2_idx2 ON tbl2(col1);\nQuery OK, 0 rows affected\n\nobclient> DROP TABLE tbl1;\nQuery OK, 0 rows affected\n\nobclient> DROP TABLE tbl2;\nQuery OK, 0 rows affected\n\nobclient> SHOW RECYCLEBIN;\n+-----------------------------------+----------------------------------+-------+------------------------------+\n| OBJECT_NAME                       | ORIGINAL_NAME                    | TYPE  | CREATETIME                   |\n+-----------------------------------+----------------------------------+-------+------------------------------+\n| RECYCLE_$_100004_1634626847891416 | __idx_1101710651081601_TBL1_IDX1 | INDEX | 19-OCT-21 03.00.47.891270 PM |\n| RECYCLE_$_100004_1634626847895656 | TBL1                             | TABLE | 19-OCT-21 03.00.47.895431 PM |\n| RECYCLE_$_100004_1634626853379432 | __idx_1101710651081602_TBL2_IDX2 | INDEX | 19-OCT-21 03.00.53.378871 PM |\n| RECYCLE_$_100004_1634626853383304 | TBL2                             | TABLE | 19-OCT-21 03.00.53.383100 PM |\n+-----------------------------------+----------------------------------+-------+------------------------------+\n4 rows in set\n", "obclient> PURGE INDEX RECYCLE_$_100004_1634626847891416;\nQuery OK, 0 rows affected\n\nobclient> SHOW RECYCLEBIN;\n+-----------------------------------+----------------------------------+-------+------------------------------+\n| OBJECT_NAME                       | ORIGINAL_NAME                    | TYPE  | CREATETIME                   |\n+-----------------------------------+----------------------------------+-------+------------------------------+\n| RECYCLE_$_100004_1634626847895656 | TBL1                             | TABLE | 19-OCT-21 03.00.47.895431 PM |\n| RECYCLE_$_100004_1634626853379432 | __idx_1101710651081602_TBL2_IDX2 | INDEX | 19-OCT-21 03.00.53.378871 PM |\n| RECYCLE_$_100004_1634626853383304 | TBL2                             | TABLE | 19-OCT-21 03.00.53.383100 PM |\n+-----------------------------------+----------------------------------+-------+------------------------------+\n3 rows in set\n", "obclient> PURGE TABLE RECYCLE_$_100004_1634626853383304;\nQuery OK, 0 rows affected\n\nobclient> SHOW RECYCLEBIN;\n+-----------------------------------+---------------+-------+------------------------------+\n| OBJECT_NAME                       | ORIGINAL_NAME | TYPE  | CREATETIME                   |\n+-----------------------------------+---------------+-------+------------------------------+\n| RECYCLE_$_100004_1634626847895656 | TBL1          | TABLE | 19-OCT-21 03.00.47.895431 PM |\n+-----------------------------------+---------------+-------+------------------------------+\n1 row in set\n", "obclient> PURGE RECYCLEBIN;\nQuery OK, 0 rows affected\n\nobclient> SHOW RECYCLEBIN;\nEmpty set\n"], "Category": ["DML"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054666"], "Title": ["SIMPLE SELECT"], "Feature": ["simple_select:\n    SELECT [ hint_options ] [ DISTINCT | UNIQUE | ALL] select_expr_list\n    FROM from_list\n    [WHERE condition]\n    [hierarchical_query_clause]\n    [GROUP BY group_expression_list\n        [{ROLLUP | CUBE | GROUPING SETS} group_expression_list]\n        [HAVING condition]\n     ]\n    [ORDER BY order_expression_list]\n    [FOR UPDATE [OF column] [ {NOWAIT | WAIT integer | SKIP LOCKED } ] ]\n    [row_limiting_clause ]\n\nselect_expr_list:\n    table_name.*\n    | table_alias_name.*\n    | expr [[AS] column_alias_name]\n    | sequence_name.{ CURRVAL|NEXTVAL }@dblink_name\n\nfrom_list:\n    table_reference [, table_reference...]\n\ntable_reference:\n    simple_table\n    | joined_table\n    | pivot_clause\n    | unpivot_clause\n    | table_name@dblink_name\n\n\nsimple_table:\n    (table_factor [partition_option])[table_alias_name]\n    | (select_stmt)  table_alias_name\n    | (table_reference_list)\n\njoined_table:\n    table_reference [INNER] JOIN simple_table [join_condition]\n    | table_reference outer_join_type JOIN simple_table join_condition\n\npartition_option:\n    PARTITION (partition_name_list)\n\npartition_name_list:\n    partition_name [, partition_name...]\n\nouter_join_type:\n    {LEFT | RIGHT | FULL} [OUTER]\n\njoin_condition:\n    ON expression\n\ncondition:\n    expression\n\ngroup_expression_list:\n    group_expression [, group_expression...]\n\ngroup_expression:\n    expression [ASC | DESC]\n\norder_expression_list:\n    order_expression [, order_expression...]\n\norder_expression:\n    expression [ASC | DESC]\n\nrow_limiting_clause:\n    [ OFFSET offset { ROW | ROWS } ]\n    [ FETCH { FIRST | NEXT } [ { rowcount | percent PERCENT } ]\n        { ROW | ROWS } { ONLY | WITH TIES } ]\n\npivot_clause：\n    PIVOT\n    (aggregate_function ( expr ) [[AS] alias ]\n      [, aggregate_function ( expr ) [[AS] alias ]... ]\n     pivot_for_clause\n     pivot_in_clause\n    )\n\npivot_for_clause：\n    FOR { column| ( column [, column... ]) }\n\npivot_in_clause\n    IN\n    ( { { expr| ( expr [, expr...] ) } [ [ AS] alias]... }\n       [, { { expr| ( expr [, expr...] ) } [ [ AS] alias] ...} ]\n     )\n\nunpivot_clause ：\n    UNPIVOT [ {INCLUDE | EXCLUDE} NULLS ]\n    ( { column | ( column [, column... ]) }\n     pivot_for_clause\n     unpivot_in_clause\n     )\n\nunpivot_in_clause：\n    IN\n    ( { column | ( column [, column... ]) }[ AS { literal | ( literal [, literal... ]) } ]\n        [, { column | ( column [, column... ] ) }[ AS {literal | ( literal [, literal... ]) } ]]\n    )\n\nhierarchical_query_clause:\n    [START WITH start_expression] CONNECT BY [NOCYCLE] \n        {PRIOR child_expr = parent_expr \n        | parent_expr = PRIOR child_expr} [ORDER SIBLINGS BY ...]\n"], "Description": ["该语句用于从表或视图中查询数据。", "\n\n\n字段\n描述\n\n\n\n\nhint_options\n指定 Hint 选项，为可选项。\n\n\nDISTINCT | UNIQUE | ALL\n在查询的数据中，可能会包含重复行。 \n      \n指定 DISTINCT 或 UNIQUE，表示在查询结果中相同的行只返回一行。DISTINCT 和 UNIQUE 是同义词。\n指定 ALL，表示在查询结果中返回所有的行。默认为 ALL。\n\n\n\nselect_expr_list\n指定从数据库列出要查询的表达式或列名，用\",“隔开。”*\"表示所有列。 \n      \ntable_name.*：指定从指定的表、视图中选择所有的列。\ntable_alias_name.：指定表、视图的别名。\nexpr [[AS] column_alias_name]：指定查询列或表达式的别名，AS 是可选的。\n\n\n\nFROM table_references\n指定选择数据的对象。\n\n\nPARTITION(partition_list)\n指定查询表的分区信息。例如：partition(p0,p1...)。\n\n\ntable_factor\n指定表名（基表、可更新视图）、特殊子查询等，并支持直接查询函数。\n\n\ntable_alias_name\n指定选择数据对象的别名。\n\n\njoined_table\n指定多表查询的联接方式。 \n      \n[INNER] JOIN 为内联接，INNER 为可选项。仅返回满足联接条件的数据。\n[OUTER] JOIN 为外联接，OUTER 为可选项。\nLEFT [OUTER] 表示左外联接。返回左表中的所有公共列值。\nRIGHT [OUTER] 表示右外联接。返回右表中的所有公共列值。\nFULL [OUTER] 表示全外联接。即除了内联接之外，两个表中未在内联接结果中返回的行将被保留并用空值扩展。\n\n\n\nON expression\n指定多表联接的联接条件。\n\n\nWHERE where_conditions\n指定筛选条件，查询结果中仅包含满足条件的数据，为可选项。where_conditions 为表达式。\n\n\nhierarchical_query_clause\n可选项，指定层次查询选项，详细介绍可参见下文 hierarchical_query_clause。\n\n\nGROUP BY group_by_list\n指定分组的字段，通常与聚合函数配合使用。 说明 如果 SELECT 子句后面的列中没有使用聚合函数的列，则在分组查询中，SELECT 子句后面的列必须出现在 GROUP BY 子句中。\n\n\nROLLUP group_expression_list\n合并 Group By 的分组，产生统计值。\n\n\nCUBE group_expression_list\n根据表达式列表中所有项的每个排列生成的分组进行聚合，并合并 GROUP BY 的分组，产生统计值。说明： \n      \nselect_expr_list 中指定的各项必须也出现在 CUBE expression_list 中。\nGROUP BY 子句可指定多个 CUBE 扩展以及多次出现的其他 GROUP BY 扩展（例如 ROLLUP、CUBE、GROUPING SETS）和各表达式中，参考语法为 SELECT select_expr_list FROM ... GROUP BY [..., ] CUBE (group_expression_list[, group_expression_list...]) [, ...]。\n如果未指定 ORDER BY 子句，则无法保证结果集的顺序。\n分组级别数或总计数为 2 的 n 次幂，其中 n 表示 CUBE 表达式列表中的项数，即分组个数是表达式项数的指数级增长，由此不建议使用表达式项数较大的场景。\n\n\n\nGROUPING SETS group_expression_list\n在一个查询中指定多个数据分组，分别产生统计值，并将指定的分组统计值聚合显示。GROUPING SETS 中可以指定单个字段或字段列表。\n\n\nHAVING search_confitions\n筛选分组后的各组数据。HAVING 子句与 WHERE 子句类似，但是 HAVING 子句可以使用累计函数（如 SUM、AVG 等）。\n\n\nORDER BY order_list\n指定结果集按照一个列或者多个列用来 ASC 或 DESC 显示查询结果。不指定 ASC 或者 DESC 时，默认为 ASC。 \n      \nASC 表示升序。\nDESC 表示降序。\n\n\n\nrow_limiting_clause\n用于限制查询返回的行，实现分页查询功能。可以指定偏移量，以及要返回的行数或行百分比。可以结合 ORDER BY 子句以确保排序顺序，从而获得一致的结果。\n\n\nOFFSET\n指定分页查询开始前要跳过的行数。offset 必须是数值或计算结果为数值的表达式。 \n      \n如果指定负数，则 offset 将被视为 0。\n如果指定为 NULL 或指定为大于或等于查询返回的行数的数量，则返回 0 行。\n如果 offset 包含一个分数，则该分数部分将被截断。\n如果未指定此子句，则偏移量为 0，从第一行开始分页。\n\n\n\nROW | ROWS\n表示单行或者多行，根据行数选择关键字，可以保证语义清晰。\n\n\nFETCH\n指定要返回的行数或行百分比。如果未指定此子句，则返回从 offset+1 开始的所有行。\n\n\nFIRST | NEXT\n表示获取第一个返回的行数或行百分比或者下一个返回的行数或行百分比。\n\n\nrowcount | percent PERCENT\n使用 rowcount 指定要返回的行数。rowcount 必须是一个数字或一个计算结果为数值的表达式。如果指定负数，则 rowcount 将被视为 0。如果 rowcount 大于从 rowcount+1 开始的可用行数，则返回所有可用行。如果 rowcount 包含一个分数，则该分数部分将被截断。如果 rowcount 为 NULL，则返回 0 行。使用 percent PERCENT 指定要返回的指定行总数的百分比。percent 必须是数值或计算为数值的表达式。如果指定为负数，则 percent 将被视为 0。如果 percent 为 NULL，则返回 0行。如果未指定 rowcount 或者 percent``PERCENT，则返回 1 行。\n\n\nONLY | WITH TIES\n指定 ONLY 返回指定的行数或行百分比。指定 WITH TIES 返回与上次获取的行具有相同排序键的其他行。如果使用 WITH TIES，则必须指定 ORDER BY 子句。如果未指定 ORDER BY 子句，则不会返回其他行。\n\n\nFOR UPDATE\n可选项，对查询结果所有行加上排他锁，以阻止其他事务的并发修改，或阻止在某些事务隔离级别时的并发读取。 \n      \nOF column：对于多表 Join 的场景，使用该子句可以指示仅锁定某些表（即 column 指定列所在的表）的查询结果行。\nNOWAIT：立即对查询结果行尝试加锁如果查询结果行中已经有被其他会话加锁的行，则执行失败。\nWAIT integer：等待 Interger 时间后再对查询结果行尝试加锁，如果查询结果行中已经有被其他会话加锁的行，则执行失败。\nSKIP LOCKED：如果查询结果中已经有被其他会话加锁的行，则会跳过这些加锁行，返回未被加锁的行。 \n        \n注意\nSKIP LOCKED 暂不支持多表 JOIN 加锁的场景。\n\n\n\n\npivot_clause\n将行旋转为列的子句。\n\n\naggregate_function\n指定聚合函数。\n\n\nexpr\n指定计算结果为常量值的表达式。 pivot_in_clause 只支持常量表达式。\n\n\nunpivot_clause\n将列旋转为行的子句。\n\n\ndblink_name\n指定要访问的数据库链接（即 dblink）的名称。\n\n\nsequence_name\n通过 dblink 访问远端数据库（包括 OceanBase 数据库和 Oracle 数据库）中的序列值，包括计算 SEQUENCE 对象的 NEXTVAL、CURRVAL 值。\n\n\n", "hierarchical_query_clause", "在层级查询中，可以在 SELECT 语句的列中使用一个特殊的伪列（pseudo column）LEVEL，表示等级，即节点的层次。由查询的起点开始算起，起点为 1，依次类推。使用层次查询时，才可以使用该字段。更多有关层级查询中伪列的信息，请参见 层次查询伪列。", "START WITH start_expression", "：可选项，指定层次查询中的根行（Root Row）。", "CONNECT BY", "：指定如何来确定父子关系，这里通常使用等值表达式，但其他表达式同样支持。", "NOCYCLE", "：当指定该关键字时，即使返回结果中有循环仍旧可以返回，并可以通过 ", "CONNECT_BY_ISCYCLE", " 虚拟列来指定哪里出现循环；否则，会给客户端报错。", "PRIOR child_expr = parent_expr | parent_expr = PRIOR child_expr", "：", "PRIOR", " 是一元运算符，表示参数中的列来自于父行（Parent Row），与一元的 + 和 - 具有相同的优先级。", "ORDER SIBLINGS BY", "：指定同一个层级行之间的排列顺序。", "\n注意\n如果层次查询中包含了 FOR UPDATE 子句，那么不支持以下的使用场景：\n\n如果子查询使用了 DISTINCT 关键字或者聚合，这种情况下将不能和 FOR UPDATE 一起使用。\n任何包含公共表达式（Common Table Expressions，CTE）的情景都不支持，即带有 WITH ... AS ... 子句的 SELECT 查询不能与 FOR UPDATE 同时使用。\n\n\n", "更多有关层次查询的使用信息，请参见 层次查询。"], "Examples": ["obclient> CREATE TABLE tbl1 (id INT,name VARCHAR(10),num INT);\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO tbl1 VALUES (1, 'a',100),(2, 'b',200),(3, 'a',50);\nQuery OK, 3 rows affected\nRecords: 3  Duplicates: 0  Warnings: 0\n\nobclient> SELECT * FROM tbl1;\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    1 | a    |  100 |\n|    2 | b    |  200 |\n|    3 | a    |   50 |\n+------+------+------+\n3 rows in set\n\nobclient> SELECT name FROM tbl1;\n+------+\n| NAME |\n+------+\n| a    |\n| b    |\n| a    |\n+------+\n3 rows in set\n", "obclient> SELECT DISTINCT name FROM tbl1;\n+------+\n| NAME |\n+------+\n| a    |\n| b    |\n+------+\n2 rows in set\n", "obclient> SELECT id, name, num/2 AS avg FROM tbl1;\n+------+------+------+\n| ID   | NAME | AVG  |\n+------+------+------+\n|    1 | a    |   50 |\n|    2 | b    |  100 |\n|    3 | a    |   25 |\n+------+------+------+\n3 rows in set\n", "obclient> SELECT id, name, num FROM tbl1 WHERE name = 'a';\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    1 | a    |  100 |\n|    3 | a    |   50 |\n+------+------+------+\n2 rows in set\n", "obclient> SELECT name,SUM(num)  sum\n                FROM tbl1\n                GROUP BY name\n                HAVING SUM(num) < 160;\n+------+------+\n| NAME | SUM  |\n+------+------+\n| a    |  150 |\n+------+------+\n1 row in set\n", "obclient> SELECT * FROM tbl1 ORDER BY num ASC;\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    3 | a    |   50 |\n|    1 | a    |  100 |\n|    2 | b    |  200 |\n+------+------+------+\n3 rows in set\n", "obclient> SELECT * FROM tbl1 ORDER BY name DESC,num ASC;\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    2 | b    |  200 |\n|    3 | a    |   50 |\n|    1 | a    |  100 |\n+------+------+------+\n3 rows in set\n", "/* 在会话 1 中查询表 tbl1 中 id=1 的行并锁定 */\nobclient> SELECT * FROM tbl1 WHERE id=1 FOR UPDATE;\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    1 | a    |  100 |\n+------+------+------+\n1 row in set\n\n/* 在会话 2 中查询表 tbl1 中 id=1 或 id=2 的行并锁定 */\nobclient> SELECT * FROM tbl1 WHERE id=1 or id=2 FOR UPDATE;\nORA-30006: resource busy; acquire with WAIT timeout expired\n\nobclient> SELECT * FROM tbl1 WHERE id=1 or id=2 FOR UPDATE SKIP LOCKED;\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    2 | b    |  200 |\n+------+------+------+\n1 row in set\n", "obclient> CREATE TABLE group_tbl1 (group_id INT,job VARCHAR2(10),name VARCHAR2(10),salary INT);\nQuery OK, 0 rows affected\nobclient> INSERT INTO group_tbl1 VALUES(10,'Coding','Bruce',1000),\n    (10,'Programmer','Clair',1000),\n    (20,'Coding','Jason',2000),\n    (20,'Programmer','Joey',2000),\n    (30,'Coding','Rebecca',3000),\n    (30,'Programmer','Rex',3000);\nQuery OK, 6 rows affected\nRecords: 6  Duplicates: 0  Warnings: 0\n obclient> SELECT * FROM group_tbl1;\n +----------+------------+---------+--------+\n | GROUP_ID | JOB        | NAME    | SALARY |\n +----------+------------+---------+--------+\n |       10 | Coding     | Bruce   |   1000 |\n |       10 | Programmer | Clair   |   1000 |\n |       20 | Coding     | Jason   |   2000 |\n |       20 | Programmer | Joey    |   2000 |\n |       30 | Coding     | Rebecca |   3000 |\n |       30 | Programmer | Rex     |   3000 |\n +----------+------------+---------+--------+\n 6 rows in set\n obclient> SELECT group_id, salary, SUM(salary) FROM group_tbl1 GROUP BY CUBE (group_id, salary);\n +----------+--------+-------------+\n | GROUP_ID | SALARY | SUM(SALARY) |\n +----------+--------+-------------+\n |     NULL |   NULL |       12000 |\n |     NULL |   1000 |        2000 |\n |     NULL |   2000 |        4000 |\n |     NULL |   3000 |        6000 |\n |       10 |   NULL |        2000 |\n |       20 |   NULL |        4000 |\n |       30 |   NULL |        6000 |\n |       10 |   1000 |        2000 |\n |       20 |   2000 |        4000 |\n |       30 |   3000 |        6000 |\n +----------+--------+-------------+\n 10 rows in set\n", "obclient> SELECT name, num, COUNT(*) from tbl1 GROUP BY GROUPING SETS(name, num);\n+------+------+----------+\n| NAME | NUM  | COUNT(*) |\n+------+------+----------+\n| a    | NULL |        2 |\n| b    | NULL |        1 |\n| NULL |  100 |        1 |\n| NULL |  200 |        1 |\n| NULL |   50 |        1 |\n+------+------+----------+\n5 rows in set )\n", "obclient> CREATE TABLE emp(name VARCHAR2(50), num CHAR, phone VARCHAR2(50));\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO emp VALUES('ZhangSan', '1', '1234-5678'),('ZhangSan', '2', '3219-6066'),('ZhangSan', '3', '5365-9583');\nQuery OK, 3 rows affected\nRecords: 3  Duplicates: 0  Warnings: 0\n\nobclient> SELECT * FROM emp;\n+----------+------+-----------+\n| NAME     | NUM  | PHONE     |\n+----------+------+-----------+\n| ZhangSan | 1    | 1234-5678 |\n| ZhangSan | 2    | 3219-6066 |\n| ZhangSan | 3    | 5365-9583 |\n+----------+------+-----------+\n3 rows in set\n\n/* 将表 emp 中的行转为列 */\nobclient> SELECT * FROM emp PIVOT(MAX(phone) FOR num IN (1 AS home, 2 AS office, 3 AS mobile));\n+----------+-----------+-----------+-----------+\n| NAME     | HOME      | OFFICE    | MOBILE    |\n+----------+-----------+-----------+-----------+\n| ZhangSan | 1234-5678 | 3219-6066 | 5365-9583 |\n+----------+-----------+-----------+-----------+\n1 row in set\n\n/* 将表 emp 中的列转为行 */\nobclient> CREATE VIEW v_emp AS SELECT * FROM emp PIVOT(MAX(phone) FOR num IN (1 AS home, 2 AS office, 3 AS mobile));\nQuery OK, 0 rows affected\n\nobclient>  SELECT * FROM v_emp UNPIVOT(phone FOR num IN (home AS 1, office AS 2, mobile AS 3));\n+----------+-----+-----------+\n| NAME     | NUM | PHONE     |\n+----------+-----+-----------+\n| ZhangSan |   1 | 1234-5678 |\n| ZhangSan |   2 | 3219-6066 |\n| ZhangSan |   3 | 5365-9583 |\n+----------+-----+-----------+\n3 rows in set\n", "/*访问远端的 OceanBase 数据库查询数据*/\nobclient> SELECT ID FROM tbl2@ob_dblink;\n+------+\n| ID   |\n+------+\n|    1 |\n|    2 |\n|    3 |\n+------+\n3 rows in set\n\nobclient> SELECT * FROM tbl2@ob_dblink;\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    1 | a    |  100 |\n|    2 | b    |  200 |\n|    3 | a    |   50 |\n+------+------+------+\n3 rows in set\n\n/*访问远端的 Oracle 数据库查询数据*/\nobclient> SELECT ID FROM tbl2@ora_dblink;\n+------+\n| ID   |\n+------+\n|    1 |\n|    2 |\n|    3 |\n+------+\n3 rows in set\n\nobclient> SELECT * FROM tbl2@ora_dblink;\n+------+------+------+\n| ID   | NAME | NUM  |\n+------+------+------+\n|    1 | a    |  100 |\n|    2 | b    |  200 |\n|    3 | a    |   50 |\n+------+------+------+\n3 rows in set\n\n/*同时查询本地数据库和远端数据库的数据*/\nobclient> SELECT t4.col1,t5.col2 FROM tbl1 t4, tbl2@ob_dblink t5 WHERE t1.col3=t2.col3;\n\n/*同时查询不同的远端数据库的数据*/\nobclient> SELECT * FROM tbl2@ob_dblink t_remote1,tbl2@ora_dblink t_remote2 WHERE t_remote1.col1 = t_remote2.col1;\n", "obclient> CREATE TABLE emp(  \n    empno         NUMBER(4,0),  \n    empname       VARCHAR(10),  \n    job           VARCHAR(9),  \n    mgr           NUMBER(4,0),  \n    hiredate      DATE,  \n    sal           NUMBER(7,2),  \n    comm          NUMBER(7,2),        \n    deptno        NUMBER(2,0),   \n    CONSTRAINT PK_emp PRIMARY KEY (empno)\n);\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO emp VALUES (1839,'KING','PRESIDENT',null,'17-DEC-81',5000,null,10)\n   ,(1698,'BLAKE','MANAGER',1839,'01-MAY-81',2850,null,30)\n   ,(1782,'CLARK', 'MANAGER', 1839, '09-JUN-81', 2450, null, 10)\n   ,(1566,'JONES','MANAGER',1839, '02-APR-81',2975,null,40)\n   ,(1788,'SCOTT','ANALYST',1566, '15-JUL-87',3000,null,20)\n   ,(1902,'FORD','ANALYST',1566, '05-OCT-81',3000,null,40)\n   ,(1369,'SMITH','CLERK',1902, '17-NOV-80',800,null,20)\n   ,(1499,'ALLEN','SALESMAN',1698, '20-FEB-81',1600,300,30);\n\nQuery OK, 8 rows affected\nRecords: 8  Duplicates: 0  Warnings: 0\n\nobclient> SELECT empno, empname FROM emp ORDER BY empno FETCH FIRST 3 ROWS ONLY;\n+-------+---------+\n| EMPNO | EMPNAME |\n+-------+---------+\n|  1369 | SMITH   |\n|  1499 | ALLEN   |\n|  1566 | JONES   |\n+-------+---------+\n3 rows in set\n", "obclient> SELECT empno, empname\nFROM emp\nORDER BY empno\nFETCH NEXT 3 ROWS ONLY;\n", "obclient> SELECT empno, empname sal FROM emp ORDER BY sal\n FETCH FIRST 25 PERCENT ROWS ONLY;\n+-------+-------+\n| EMPNO | SAL   |\n+-------+-------+\n|  1499 | ALLEN |\n|  1698 | BLAKE |\n+-------+-------+\n2 rows in set\n", "obclient> SELECT empno, empname sal FROM emp ORDER BY sal\n FETCH FIRST 25 PERCENT ROWS WITH TIES;\n+-------+-------+\n| EMPNO | SAL   |\n+-------+-------+\n|  1499 | ALLEN |\n|  1698 | BLAKE |\n+-------+-------+\n2 rows in set\n", "obclient> CREATE TABLE t1 (c1 INT, c2 INT );\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO t1 VALUES ('1','2');\nQuery OK, 1 row affected\n\nobclient> SELECT * FROM (t1) a;\n+------+------+\n| C1   | C2   |\n+------+------+\n|    1 |    2 |\n+------+------+\n1 row in set\n", "obclient> SELECT RANDOM(4) FROM GENERATOR(3);\n+---------------------+\n| RANDOM(4)           |\n+---------------------+\n| 5267436225003336391 |\n| -851690886662571060 |\n| 1738617244330437274 |\n+---------------------+\n3 rows in set\n", "obclient> CREATE DATABASE LINK seq_link CONNECT TO test@oracle IDENTIFIED BY test HOST '127.xxx.xxx.xxx:2828';\nQuery OK, 0 rows affected\n", "obclient> CREATE SEQUENCE my_seq START WITH 1 MINVALUE 1 MAXVALUE 10 INCREMENT BY 2 NOCYCLE NOORDER CACHE 30;\nQuery OK, 0 rows affected\n", "obclient> SELECT my_seq.NEXTVAL@seq_link FROM DUAL;\n+---------+\n| NEXTVAL |\n+---------+\n|       1 |\n+---------+\n1 row in set\n\nobclient> SELECT my_seq.CURRVAL@seq_link FROM DUAL;\n+---------+\n| CURRVAL |\n+---------+\n|       1 |\n+---------+\n1 row in set\n\nobclient> SELECT my_seq.NEXTVAL@seq_link FROM DUAL;\n+---------+\n| NEXTVAL |\n+---------+\n|       3 |\n+---------+\n1 row in set\n"], "Category": ["DML"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054294"], "Title": ["UPDATE"], "Feature": ["UPDATE [hint_options] dml_table_clause\n    SET update_asgn_list\n    [ WHERE where_condition]\n    [{ RETURNING | RETURN } returning_exprs [into_clause]]\n\ndml_table_clause:\n    dml_table_name opt_table_alias\n\nupdate_asgn_list:\n    column_name = expr [, expr...]\n\nwhere_condition:\n    expression\n\nreturning_exprs:\n    projection_col_name [,projection_col_name ...]\n\ninto_clause:\n    { INTO into_var_list | BULK COLLECT INTO into_var_list}\n\ninto_var_list:\n    { USER_VARIABLE | ref_name } [,{ USER_VARIABLE | ref_name } ...]\n"], "Description": ["该语句用于修改表中现有的的字段值。", "\n\n\n参数\n描述\n\n\n\n\nhint_options\n指定 Hint 选项。\n\n\ndml_table_clause\n指定要更新的表、视图、或特殊子查询返回的列的名称。 说明 如果指定 view，则数据库更新视图的基表。但是不能通过一个视图更新多个基表。\n\n\nwhere_condition\n指定过滤条件。\n\n\nupdate_asgn_list\n指定更新列表。\n\n\nreturning_exprs\n返回修改数据后的投影列。\n\n\ninto_clause\n将修改数据后的投影列插入到指定列表。\n\n\ninto_var_list\n将指定投影列插入到指定变量列表。\n\n\nref_name\n变量名。\n\n\n", "\n注意\n特殊子查询指的类似于可更新视图对应的子查询，这类子查询不应该包含复杂的算子（例如 GROUP BY、DISTINCT、WINDOW FUNCTION 等）。\n"], "Examples": ["obclient> CREATE TABLE tbl1(col1 INT PRIMARY KEY,col2 INT);\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO tbl1 VALUES(1,1),(2,2),(3,3),(4,4),(5,5);\nQuery OK, 5 rows affected\nRecords: 5  Duplicates: 0  Warnings: 0\n\nobclient> SELECT * FROM tbl1;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    1 |    1 |\n|    2 |    2 |\n|    3 |    3 |\n|    4 |    4 |\n|    5 |    5 |\n+------+------+\n5 rows in set\n", "obclient> UPDATE tbl1 SET tbl1.col2 = 100  WHERE tbl1.col1 = 1;\nQuery OK, 1 row affected\nRows matched: 1  Changed: 1  Warnings: 0\n\nobclient> SELECT * FROM tbl1;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    1 |  100 |\n|    2 |    2 |\n|    3 |    3 |\n|    4 |    4 |\n|    5 |    5 |\n+------+------+\n5 rows in set\n", "obclient> UPDATE (SELECT * FROM tbl1) v SET v.col2 = 10 WHERE v.col1 = 1;\nQuery OK, 1 row affected\nRows matched: 1  Changed: 1  Warnings: 0\n\nobclient> SELECT * FROM tbl1;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    1 |   10 |\n|    2 |    2 |\n|    3 |    3 |\n|    4 |    4 |\n|    5 |    5 |\n+------+------+\n5 rows in set\n", "obclient> UPDATE tbl1 SET tbl1.col2 = 100 WHERE tbl1.col1 < 3;\nQuery OK, 2 rows affected\nRows matched: 2  Changed: 2  Warnings: 0\n\nobclient> SELECT * FROM tbl1;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    1 |  100 |\n|    2 |  100 |\n|    3 |    3 |\n|    4 |    4 |\n|    5 |    5 |\n+------+------+\n5 rows in set\n", "obclient> UPDATE tbl1 SET tbl1.col2 = 1000 WHERE tbl1.col1 = 1 RETURNING col2;\n+------+\n| COL2 |\n+------+\n| 1000 |\n+------+\n1 row in set\n\nobclient> SELECT * FROM tbl1;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    1 | 1000 |\n|    2 |    2 |\n|    3 |    3 |\n|    4 |    4 |\n|    5 |    5 |\n+------+------+\n5 rows in set\n"], "Category": ["DML"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054668"], "Title": ["WITH CLAUSE"], "Feature": ["with_clause_select:\n    with_clause simple_select\n\nwith_clause:\n    WITH query_table_name [opt_column_alias_name_list] AS ( select_clause )\n\nselect_clause:\n    simple_select | select_clause_set\n\nopt_column_alias_name_list:\n    (column_name_list)\n\ncolumn_name_list:\n    column_name [,column_name...]\n"], "Description": ["如果查询语句中有多个相同的子查询，可以把相同的子查询放在 WITH CLAUSE 中作为公共表达式，在主体查询中直接引用即可。", "\n\n\n参数\n描述\n\n\n\n\nquery_table_name\n指定子查询的名称。\n\n\ncolumn_name\n指定列名称。\n\n\n"], "Examples": ["obclient> CREATE TABLE tbl1(col1 INT,col2 INT,col3 INT);\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO tbl1 VALUES(1,1,1),(2,2,2),(3,3,3);\nQuery OK, 3 rows affected\nRecords: 3  Duplicates: 0  Warnings: 0\n\n/*直接使用表 tbl1 的列名作为 w_tbl1 的列名*/\nobclient> WITH w_tbl1 AS(SELECT * FROM tbl1) SELECT * FROM  w_tbl1;\n+------+------+------+\n| COL1 | COL2 | COL3 |\n+------+------+------+\n|    1 |    1 |    1 |\n|    2 |    2 |    2 |\n|    3 |    3 |    3 |\n+------+------+------+\n3 rows in set\n\n/*直接给 w_tbl1 命名列名*/\n\nobclient> WITH w_tbl1(c1,c2,c3) AS(SELECT * FROM tbl1) SELECT * FROM  w_tbl1;\n+------+------+------+\n| C1   | C2   | C3   |\n+------+------+------+\n|    1 |    1 |    1 |\n|    2 |    2 |    2 |\n|    3 |    3 |    3 |\n+------+------+------+\n3 rows in set\n"], "Category": ["DML"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054667"], "Title": ["集合类 SELECT"], "Feature": ["select_clause_set:\n  simple_select [ UNION | UNION ALL | MINUS | INTERSECT] select_clause_set_right\n      [ORDER BY sort_list_columns]\n\nselect_clause_set_right:\n    simple_select  \n    | select_caluse_set\n"], "Description": ["该语句用于对多个 SELECT 查询的结果合并为一个结果。每个 SELECT 的列数和数据类型必须相同，但列长可以不同。"], "Examples": ["obclient> CREATE TABLE tbl1 (col1 INT, col2 INT);\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2 (col1 INT, col2 INT);\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO tbl1 VALUES (1, 1), (2, 2),(2,2);\nQuery OK, 3 rows affected\nRecords: 3  Duplicates: 0  Warnings: 0\n\nobclient> INSERT INTO tbl2 VALUES (2, 2),(2, 2),(3,3);\nQuery OK, 3 rows affected\nRecords: 3  Duplicates: 0  Warnings: 0\n\nobclient> SELECT * FROM tbl1;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    1 |    1 |\n|    2 |    2 |\n|    2 |    2 |\n+------+------+\n3 rows in set\n\nobclient> SELECT * FROM tbl2;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    2 |    2 |\n|    2 |    2 |\n|    3 |    3 |\n+------+------+\n3 rows in set\n", "obclient> SELECT col1, col2 FROM tbl1 UNION ALL SELECT col1, col2 FROM tbl2;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    1 |    1 |\n|    2 |    2 |\n|    2 |    2 |\n|    2 |    2 |\n|    2 |    2 |\n|    3 |    3 |\n+------+------+\n6 rows in set\n", "obclient> SELECT col1, col2 FROM tbl1 UNION SELECT col1, col2 FROM tbl2;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    1 |    1 |\n|    2 |    2 |\n|    3 |    3 |\n+------+------+\n3 rows in set\n", "obclient> SELECT col1, col2 FROM tbl1 INTERSECT SELECT col1, col2 FROM tbl2;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    2 |    2 |\n+------+------+\n1 row in set\n", "obclient> SELECT col1, col2 FROM tbl1 MINUS SELECT col1, col2 FROM tbl2;\n+------+------+\n| COL1 | COL2 |\n+------+------+\n|    1 |    1 |\n+------+------+\n1 row in set\n"], "Category": ["DML"]}
