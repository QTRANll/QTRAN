{
    "ALTER DATABASE": {
        "Title": [
            "ALTER DATABASE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053479"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "ALTER {DATABASE|SCHEMA} [database_name] [SET] alter_specification [alter_specification ...];\n\nalter_specification:\n    [DEFAULT] {CHARACTER SET | CHARSET} [=] charset_name\n  | [DEFAULT] COLLATE [=] collation_name\n  | {READ ONLY | READ WRITE}\n  | DEFAULT TABLEGROUP [=] {NULL | table_group_name}\n",
        "Description": [
            "该语句用来修改数据库的属性。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\ndatabase_name\n指定要修改属性的数据库名称。如果不指定，会对当前数据库进行修改。如果当前数据库为空，则返回错误。\n\n\n[DEFAULT] { CHARACTER SET | CHARSET } charset_name\n指定数据库的默认字符集，其中 CHARACTER SET 与 CHARSET 同义。DEFAULT 关键字是可选的，不影响语义。\n\n\n[DEFAULT] COLLATE collation_name\n指定数据库的默认字符序。DEFAULT 关键字是可选的，不影响语义。\n\n\nREAD ONLY | READ WRITE\n设置数据库级只读或读写属性。\n\n\nDEFAULT TABLEGROUP table_group_name\n设置数据库默认表组信息，NULL 表示取消数据库默认表组。\n\n\n"
        ],
        "Examples": [
            "obclient> ALTER DATABASE test2 DEFAULT CHARACTER SET utf8mb4;\nQuery OK, 0 rows affected  \n\nobclient> ALTER DATABASE test2 DEFAULT COLLATE utf8mb4_bin;\nQuery OK, 0 rows affected  \n\nobclient> ALTER DATABASE test2 READ WRITE;\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "修改数据库 test2 的字符集为 UTF8MB4，字符序为 UTF8MB4_BIN，且为读写属性。",
            "obclient> ALTER DATABASE test2 DEFAULT CHARACTER SET utf8mb4;\nQuery OK, 0 rows affected  \n\nobclient> ALTER DATABASE test2 DEFAULT COLLATE utf8mb4_bin;\nQuery OK, 0 rows affected  \n\nobclient> ALTER DATABASE test2 READ WRITE;\nQuery OK, 0 rows affected\n"
        ]
    },
    "ALTER EXTERNAL TABLE": {
        "Title": [
            "ALTER EXTERNAL TABLE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053492"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "ALTER EXTERNAL TABLE table_name REFRESH;\n",
        "Description": [
            "该语句用来手动更新外表的文件。单个文件的表数据可以自动更新，如果外表数据来自于文件列表则不能自动更新，需要进行手动刷新。"
        ],
        "Illustration": [
            "table_name 指定要刷新的外表名称。"
        ],
        "Examples": [
            "obclient> ALTER EXTERNAL TABLE lineitem REFRESH;\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "obclient> ALTER EXTERNAL TABLE lineitem REFRESH;\nQuery OK, 0 rows affected\n"
        ]
    },
    "ALTER INSTANCE ROTATE INNODB MASTER KEY": {
        "Title": [
            "ALTER INSTANCE ROTATE INNODB MASTER KEY"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053450"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "ALTER INSTANCE ROTATE INNODB MASTER KEY;\n",
        "Description": [
            "ALTER INSTANCE ROTATE INNODB MASTER KEY 语句用于用于在使用透明数据加密（Transparent Data Encryption, TDE）时更换或轮转主租户的主加密密钥。这个语句不接受任何参数，它执行了一个单一的功能：密钥轮换。",
            "执行 ALTER INSTANCE ROTATE INNODB MASTER KEY 将生成一个新的主密钥来替代当前的主密钥，新主密钥被安全地存储在一个配置好的密钥库中，所有使用旧主密钥加密的表空间的表空间页（或数据）将逐步被重新加密，切换到新的主密钥。"
        ],
        "Illustration": [
            "\n\n\n字段\n描述\n\n\n\n\nROTATE\n生成一个新的密钥来替换旧的密钥。\n\n\nINNODB MASTER KEY\nMySQL 模式下 InnoDB 存储引擎使用的主加密密钥，该密钥用于加密数据库中的表空间。\n\n\n"
        ],
        "Examples": [
            "/* 设置加密方式为内置的透明加密。*/\nobclient> ALTER SYSTEM SET tde_method='internal';\n/* 显示当前加密方式的配置。 */\nobclient> SHOW PARAMETERS LIKE 'tde_method';\n/* 生成新的主加密密钥。*/\nobclient> ALTER INSTANCE ROTATE INNODB MASTER KEY;\n"
        ],
        "Detailed Examples": [
            "/* 设置加密方式为内置的透明加密。*/\nobclient> ALTER SYSTEM SET tde_method='internal';\n/* 显示当前加密方式的配置。 */\nobclient> SHOW PARAMETERS LIKE 'tde_method';\n/* 生成新的主加密密钥。*/\nobclient> ALTER INSTANCE ROTATE INNODB MASTER KEY;\n"
        ]
    },
    "ALTER OUTLINE": {
        "Title": [
            "ALTER OUTLINE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053463"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "ALTER OUTLINE outline_name ADD stmt [ TO target_stmt ];\n",
        "Description": [
            "该语句用于添加绑定 Outline 和限流规则，仅支持修改使用 SQL_TEXT 创建的 Outline。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\noutline_name\n指定要修改的 Outline 名称。\n\n\nstmt\n一般为一个带有 Hint 和原始参数的 DML 语句。\n\n\nTO target_stmt\n如果不指定 TO target_stmt，则表示如果数据库接受的 SQL 参数化后与 stmt 去掉 Hint 参数化文本相同，则将该 SQL 绑定 stmt 中 Hint 生成执行计划；如果期望对含有 Hint 的语句进行固定计划，则需要 TO target_stmt 来指明原始的 SQL。 注意 在使用 target_stmt 时，严格要求 stmt 与 target_stmt 在去掉 Hint 后完全匹配。\n\n\n"
        ],
        "Examples": [
            "obclient> ALTER OUTLINE ol_1 ADD SELECT /*+max_concurrent(1)*/ * FROM t1 WHERE c1 = 1 and c2 = ?;\nobclient> ALTER OUTLINE ol_1 ADD SELECT /*+max_concurrent(1)*/ * FROM t1 WHERE c1 = ? and c2 = 1;\n",
            "obclient> CREATE OUTLINE ol_2 ON SELECT /*+max_concurrent(1)*/ * FROM t1,t2 WHERE t1.c1 = 1;\nobclient> ALTER OUTLINE ol_2 ADD SELECT /*+use_nl(t2)*/ * FROM t1,t2 WHERE t1.c1 = 1;\n"
        ],
        "Detailed Examples": [
            "通过 ALTER OUTLINE 来添加限流规则。",
            "obclient> ALTER OUTLINE ol_1 ADD SELECT /*+max_concurrent(1)*/ * FROM t1 WHERE c1 = 1 and c2 = ?;\nobclient> ALTER OUTLINE ol_1 ADD SELECT /*+max_concurrent(1)*/ * FROM t1 WHERE c1 = ? and c2 = 1;\n",
            "通过 ALTER OUTLINE 来添加执行计划。",
            "obclient> CREATE OUTLINE ol_2 ON SELECT /*+max_concurrent(1)*/ * FROM t1,t2 WHERE t1.c1 = 1;\nobclient> ALTER OUTLINE ol_2 ADD SELECT /*+use_nl(t2)*/ * FROM t1,t2 WHERE t1.c1 = 1;\n"
        ]
    },
    "ALTER SEQUENCE": {
        "Title": [
            "ALTER SEQUENCE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053490"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "ALTER SEQUENCE [ schema. ] sequence_name\n{ RESTART [ START WITH int_value ]\n|[ MINVALUE int_value | NOMINVALUE ]\n|[ MAXVALUE int_value | NOMAXVALUE ]\n|[ INCREMENT BY int_value ]\n|[ CACHE int_value | NOCACHE ]\n|[ ORDER | NOORDER ]\n|[ CYCLE | NOCYCLE]\n}\n;\n",
        "Description": [
            "该语句用于更改现有序列的增量、最小值和最大值、缓存数量和行为，对应操作仅影响后续的序列号。",
            "\n说明\n用户只能操作属于自己 Schema 中的序列，或者拥有该序列的有 ALTER 对象权限。\n"
        ],
        "Illustration": [
            "\n\n\n字段\n描述\n\n\n\n\nschema.\n指定包含序列的 Schema。如果省略 Schema，则数据库会在用户当前所在的 Schema 中更改序列。\n\n\nsequence_name\n要更改的序列名称。\n\n\nRESTART\n重置序列值。升序时从 MINVALUE 重新开始取值；降序时从 MAXVALUE 重新开始取值；或者，使用 START WITH int_value 从 int_value 处开始取值。\n\n\nMINVALUE int_value\n更改序列的最小值，int_value 的取值范围是 [-(1027-1) ~ (1027-1)]。\n\n\nNOMINVALUE\n如果更改为 NOMINVALUE，则升序时最小值为 1，降序时最小值为 -(1027-1)。\n\n\nMAXVALUE int_value\n更改序列的最大值，int_value 的取值范围是 [(-1027+1) ~ (1028-1)]。新指定的 MAXVALUE 不能小于当前序列号的值。 注意 同时指定 MINVALUE 和 MAXVALUE 时，MINVALUE 必须小于 MAXVALUE。 MAXVALUE 和 MINVALUE 之差必须大于等于 INCREMENT BY 中 的 int_value。\n\n\nNOMAXVALUE\n如果更改为 NOMAXVALUE，则升序时最大值为(1028-1)，降序时最大值为 -1。\n\n\nINCREMENT BY int_value\n更改序列的自增步数。int_value 不可以为 0。如果指定为正数，则序列为升序；如果指定为负数，则序列为降序。不指定时缺省值为 1。\n\n\nCACHE int_value\n更改在内存中预分配的自增值个数，int_value 默认为 20。CACHE int_value 的值必须大于 1，如果 CACHE INT_VALUE 的值为 1，则等价于 NOCACHE。\n\n\nNOCACHE\n更改序列的值为未预先分配。如果同时省略 CACHE 和 NOCACHE，则数据库默认缓存 20 个序列号。\n\n\nORDER\n更改序列的值为按顺序生成。\n\n\nNOORDER\n如果更改为 NOORDER，则指定不保证序列的值按顺序生成。\n\n\nCYCLE\n更改序列的值为循环生成，即序列在达到其最大值或最小值后继续生成值。在升序达到最大值后，它会生成最小值。在降序序列达到其最小值后，它会生成其最大值。 注意\n\n如果指定了 CYCLE，而且 INCREMENT BY 中的 int_value 小于 0 时，必须指定 MINVALUE。\n如果指定了 CYCLE，CACHE 的数量不能超过一个 CYCLE。\n\n\n\nNOCYCLE\nNOCYCLE 为默认值，如果更改为 NOCYCLE，则指定序列在达到其最大值或最小值后无法生成更多值。\n\n\n"
        ],
        "Examples": [
            "obclient> ALTER SEQUENCE seq1 MAXVALUE 1024 CYCLE;\nQuery OK, 0 rows affected\n",
            "obclient> ALTER SEQUENCE seq3 MAXVALUE 1500 INCREMENT BY 5 CYCLE NOCACHE ORDER;\nQuery OK, 0 rows affected\n",
            "obclient> ALTER SEQUENCE seq3 RESTART;\nQuery OK, 0 rows affected\n\nobclient> ALTER SEQUENCE seq3 RESTART START WITH 3;\nQuery OK, 0 rows affected\n",
            "obclient> ALTER SEQUENCE seq3 START WITH 3 RESTART MINVALUE  -100 CYCLE;\nQuery OK, 0 rows affected\n\nobclient> ALTER SEQUENCE seq3 RESTAR START WITH 3 T MINVALUE  -100 CYCLE;\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "修改自增列 seq1 的最大值，并指定自增值循环生成。",
            "obclient> ALTER SEQUENCE seq1 MAXVALUE 1024 CYCLE;\nQuery OK, 0 rows affected\n",
            "更改序列 seq3 的最大值和自增步数，开启 CYCLE 和 ORDER，并指定 NOCACHE 以指示序列的值未预先分配。",
            "obclient> ALTER SEQUENCE seq3 MAXVALUE 1500 INCREMENT BY 5 CYCLE NOCACHE ORDER;\nQuery OK, 0 rows affected\n",
            "重置序列值，并从 3 开始取值。",
            "obclient> ALTER SEQUENCE seq3 RESTART;\nQuery OK, 0 rows affected\n\nobclient> ALTER SEQUENCE seq3 RESTART START WITH 3;\nQuery OK, 0 rows affected\n",
            "RESTART 的位置可以在选项的任意位置。如下示例中的两条重置序列值的 SQL 语句是等价的。",
            "obclient> ALTER SEQUENCE seq3 START WITH 3 RESTART MINVALUE  -100 CYCLE;\nQuery OK, 0 rows affected\n\nobclient> ALTER SEQUENCE seq3 RESTAR START WITH 3 T MINVALUE  -100 CYCLE;\nQuery OK, 0 rows affected\n"
        ]
    },
    "ALTER TABLE": {
        "Title": [
            "ALTER TABLE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053474"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "alter_table_stmt:\n    ALTER TABLE table_name alter_table_action_list;\n\nalter_table_action_list:\n    alter_table_action [, alter_table_action ...]\n\nalter_table_action:\n      ADD [COLUMN] column_definition  \n          [ opt_position_column ]\n    | ADD [COLUMN] (column_definition_list)\n    | ADD [CONSTRAINT [constraint_name]] UNIQUE {INDEX | KEY}\n          [index_name] index_desc\n    | ADD [CONSTRAINT [constraint_name]] FOREIGN KEY\n          [index_name] index_desc\n          REFERENCES reference_definition\n          [match_action][opt_reference_option_list]\n    | ADD PRIMARY KEY (column_name)\n    | ADD CONSTRAINT [constraint_name] CHECK (expression)[[NOT] ENFORCED]\n    | ADD PARTITION (range_partition_list)\n    | ADD {INDEX | KEY} [index_name] [index_type] (key_part,...) [index_option_list][index_column_group_option]\n    | ADD COLUMN GROUP([all columns, ]each column)\n    | ALTER [COLUMN] column_name {\n          SET DEFAULT const_value\n        | DROP DEFAULT\n      }\n    | ALTER {CHECK | CONSTRAINT} symbol [NOT] ENFORCED\n    | ALTER INDEX index_name\n          [VISIBLE | INVISIBLE]\n    | CHANGE [COLUMN] column_name column_definition\n    | DROP [COLUMN] column_name\n    | DROP {PARTITION | SUBPARTITION} partition_name_list\n    | DROP TABLEGROUP\n    | DROP FOREIGN KEY fk_name\n    | DROP PRIMARY KEY [, ADD PRIMARY KEY (column)]\n    | DROP CHECK constraint_name\n    | DROP COLUMN GROUP([all columns, ]each column)\n    | MODIFY [COLUMN] column_definition\n    | RENAME COLUMN old_col_name TO new_col_name\n    | RENAME [TO] table_name\n    | RENAME {INDEX | KEY} old_index_name TO new_index_name\n    | [SET] table_option_list\n    | TRUNCATE {PARTITION | SUBPARTITION} partition_name_list\n    | EXCHANGE PARTITION partition_name WITH TABLE non_partition_table_name WITHOUT VALIDATION\n\ncolumn_definition_list:\n    column_definition [, column_definition ...]\n\ncolumn_definition:\n    column_name data_type\n    [DEFAULT const_value] [AUTO_INCREMENT]\n    [NULL | NOT NULL] [[PRIMARY] KEY] [UNIQUE [KEY]] [COMMENT string_value] [SKIP_INDEX(skip_index_option_list)] [ opt_position_column ]\n\nskip_index_option_list:\n    skip_index_option [,skip_index_option ...]\n\nskip_index_option:\n    MIN_MAX\n    | SUM\n\nopt_position_column:\n    FIRST | BEFORE | AFTER column_name\n\nindex_desc:\n   (column_desc_list) [index_type] [index_option_list]\n\nmatch_action:\n   MATCH {SIMPLE | FULL | PARTIAL}\n\nopt_reference_option_list:\n   reference_option [,reference_option ...]\n\nreference_option:\n   ON {DELETE | UPDATE} {RESTRICT | CASCADE | SET NULL | NO ACTION | SET DEFAULT}\n\ncolumn_desc_list:\n    column_desc [, column_desc ...]\n\ncolumn_desc:\n     column_name [(length)] [ASC | DESC]\n\nkey_part:\n    {index_col_name [(length)] | (expr)} [ASC | DESC]\n\nindex_type:\n    USING BTREE\n\nindex_option_list:\n    index_option [ index_option ...]\n\nindex_option:\n     [GLOBAL | LOCAL]\n    | block_size\n    | compression\n    | STORING(column_name_list)\n    | COMMENT string_value\n\nindex_column_group_option:\n    WITH COLUMN GROUP([all columns, ]each column)\n\ntable_option_list:\n    table_option [ table_option ...]\n\ntable_option:\n      TABLEGROUP = tablegroup_name\n    | block_size\n    |lob_inrow_threshold [=] num\n    | compression\n    | AUTO_INCREMENT [=] INT_VALUE\n    | COMMENT string_value\n    | parallel_clause\n    | TABLE_MODE [=] 'table_mode_value'\n    | AUTO_INCREMENT_CACHE_SIZE [=] INT_VALUE\n\nparallel_clause:\n    {NOPARALLEL | PARALLEL integer}\n\ntable_mode_value:\n    NORMAL\n    | QUEUING\n    | MODERATE\n    | SUPER\n    | EXTREME\n\npartition_option:\n      PARTITION BY HASH(expression)\n      [subpartition_option] PARTITIONS partition_count\n    | PARTITION BY KEY([column_name_list])\n      [subpartition_option] PARTITIONS partition_count\n    | PARTITION BY RANGE {(expression) | COLUMNS (column_name_list)}\n      [subpartition_option] (range_partition_list)\n\nsubpartition_option:\n      SUBPARTITION BY HASH(expression)\n      SUBPARTITIONS subpartition_count\n    | SUBPARTITION BY KEY(column_name_list)\n      SUBPARTITIONS subpartition_count\n    | SUBPARTITION BY RANGE {(expression) | COLUMNS (column_name_list)}\n      (range_subpartition_list)\n\nrange_partition_list:\n    range_partition [, range_partition ...]\n\nrange_partition:\n    PARTITION partition_name\n    VALUES LESS THAN {(expression_list) | MAXVALUE}\n\nrange_subpartition_list:\n    range_subpartition [, range_subpartition ...]\n\nrange_subpartition:\n    SUBPARTITION subpartition_name\n    VALUES LESS THAN {(expression_list) | MAXVALUE}\n\nexpression_list:\n    expression [, expression ...]\n\ncolumn_name_list:\n    column_name [, column_name ...]\n\npartition_name_list:\n    partition_name [, partition_name ...]\n\npartition_count | subpartition_count:\n    INT_VALUE\n",
        "Description": [
            "该语句用来修改已存在的表的结构，例如修改表及表属性、新增列、修改列及属性、删除列等。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nADD [COLUMN]\n增加列，支持增加生成列。\n\n\n[FIRST | BEFORE | AFTER column_name]\n将新增的列作为表的第一列或在 column_name 列之后。 目前，OceanBase 数据库仅支持在 ADD COLUMN 语法中设置列的位置。\n\n\nCHANGE [COLUMN]\n修改列名和列定义，仅支持增加特定字符数据类型（VARCHAR、VARBINARY、CHAR 等）的长度。\n\n\nMODIFY [COLUMN]\n修改列属性。\n\n\nALTER [COLUMN] {SET DEFAULT const_value | DROP DEFAULT}\n修改列的默认值。\n\n\nDROP [COLUMN]\n删除列，不允许删除主键列或者包含索引的列。\n\n\nADD FOREIGN KEY\n增加外键。 如果不指定外键名，则会使用表名 + OBFK + 创建时间命名。（例如，在 2021 年 8 月 1 日 00:00:00 为 t1 表创建的外键名称为 t1_OBFK_1627747200000000）。外键允许跨表交叉引用相关数据，当 UPDATE 或 DELETE 操作影响与子表相匹配行的父表中键值时，其结果取决于 ON UPDATE 和 ON DELETE 子句的引用操作： \n      \nCASCADE：表示从父表中删除或更新行，并自动删除或更新子表中匹配的行。\nSET NULL：表示从父表中删除或更新行，并将子表中的外键列设置为 NULL。\nRESTRICT：表示拒绝对父表的删除或更新操作。\nNO ACTION：指定延迟检查。\n此外还支持 SET DEFAULT 操作。\n\n\nADD PRIMARY KEY\n增加主键。 可以指定一个或多个列作为主键。如果是多个列，它们将组成复合主键。\n\n\nALTER INDEX\n修改索引是否可见，当索引状态为 INVISIBLE 时，SQL 优化器将不会选择该索引。\n\n\nkey_part\n创建（函数）索引。\n\n\nindex_col_name\n指定索引的列名，每个列名后都支持 ASC（升序），不支持 DESC（降序）。默认为升序。 建立索引的排序方式为：首先以 index_col_name 中第一个列的值排序；该列值相同的记录，按下一列名的值排序；以此类推。\n\n\nexpr\n表示合法的函数索引表达式，且允许是布尔表达式，例如 c1=c1。注意 OceanBase 数据库当前版本禁止创建生成列上的函数索引。\n\n\nADD [PARTITION]\n为分区表增加分区。\n\n\nDROP {PARTITION | SUBPARTITION}\n删除分区： \n      \nPARTITION：针对 Range、List 类型的一级分区，删除指定分区（如果指定分区下存在二级分区，会同时删除该分区下所有二级分区），包括分区定义和其中的数据，同时对分区上存在的索引进行维护。\nSUBPARTITION：针对 *-RANGE、*-LIST 类型的二级分区，删除指定二级分区，包括分区定义和其中的数据。同时对分区上存在的索引进行维护。\n 多个分区名称之间用逗号分隔。 注意 删除分区时，请尽量避免该分区上存在活动的事务或查询，否则可能会导致 SQL 语句报错，或者一些异常情况。\n\n\nTRUNCATE {PARTITION | SUBPARTITION}\n删除分区数据： \n      \nPARTITION：针对 Range、List 类型的一级分区，清除指定分区中的全部数据（如果指定分区下存在二级分区，会同时清除该分区下所有二级分区中的数据），同时对分区上存在的索引进行维护。\nSUBPARTITION：针对 *-RANGE、*-LIST 类型的二级分区，清除指定二级分区中的全部数据。同时对分区上存在的索引进行维护。\n 多个分区名称之间用逗号分隔。 注意 删除分区数据时，请尽量避免该分区上存在活动的事务或查询，否则可能会导致 SQL 语句报错，或者一些异常情况。\n\n\nRENAME COLUMN old_col_name TO new_col_name\n修改列名称。仅修改列名，不改变列定义。 \n      \n注意\n\n\n如果目标名称在表中已经存在，则执行会报错。\n如果重命名的列出现了循环，可以正常执行，例如 ALTER TABLE t1 RENAME COLUMN a to b, RENAME COLUMN b to a;。\n如果重命名的列上建有索引，或者有外键约束，RENAME COLUMN 可以正常执行，并且索引定义和外键约束会自动级联修改。\n同一条 ALTER TABLE 语句中不支持同时包含 RENAME COLUMN 和 ADD PARTITION／ALTER COLUMN 的场景。\n\n\n\n\n\nRENAME [TO] table_name\n表重命名。 \n      \n注意\n在 RENAME TABLE 操作过程中，由于加入了表锁定和读写防御措施，这将增加操作的耗时。为了避免对其他用户执行 DDL 操作造成影响，建议不要批量进行 RENAME TABLE 操作。\n\n\n\nRENAME {INDEX | KEY}\n重命名索引或键。\n\n\nDROP [TABLEGROUP]\n删除表组。\n\n\nDROP [FOREIGN KEY]\n删除外键。\n\n\nDROP [PRIMARY KEY]\n删除主键。 \n      \n说明\n对于 MySQL 模式，以下情况不允许删除主键：\n\n该表是包含外键信息的父表。\n该表是子表，但主键列包含外键引用列。\n\n\n\n\n\n[SET] table_option\n设置表级属性，可选以下参数： \n      \nREPLICA_NUM：设置表的副本数（暂不支持）。\ntablegroup_name：设置表所属的表组。\nBLOCK_SIZE：设置表的微块大小，默认为 16384，即 16 KB，取值范围为 [1024,1048576]。\nlob_inrow_threshold：用于配置 INROW 阈值，当 LOB 数据大小超过该阈值时，会转为 OUTROW 存储在 LOB Meta 表中，默认为 4KB。\nCOMPRESSION：设置表的压缩方式，默认为 None，表示不压缩。\nAUTO_INCREMENT：设置表中自增列的下一个取值，可以增大或者减小。 \n        \n注意\n当减小一个表的自增字段的值时，需注意以下情况：如果表中已存在数据并且自增列中的最大值不小于新指定的 AUTO_INCREMENT 值时，新的 AUTO_INCREMENT 值将自动调整为表中自增列现有最大值的下一个取值。例如，自增列当前的最大值为 5，当前 AUTO_INCREMENT 的值是 8，而 AUTO_INCREMENT 设置为介于 0 到 6 之间的任何值，语句执行成功后，实际的 AUTO_INCREMENT 值都会被调整为 6。\n\ncomment：设置表的注释信息。\nPROGRESSIVE_MERGE_NUM：设置渐进合并步数，取值范围为 [0,100]。\nparallel_clause：指定表级别的并行度。\nNOPARALLEL：并行度为 1，默认配置。\nPARALLEL integer：指定并行度，integer 取值大于等于 1。\n\n\n\nCHECK\n更改 CHECK 约束。 支持如下操作： \n      \n添加新的 CHECK 约束。\n删除当前名称为 constraint_name 的 CHECK 约束。\n\n\n\n[NOT] ENFORCED\n是否强制执行名为 constraint_name 的 CHECK 约束。 \n      \n如果省略或指定为 ENFORCED，则创建并强制执行约束，为默认状态。\n如果指定为 NOT ENFORCED，则创建约束但不强制执行。\n\n\n\nADD COLUMN GROUP([all columns, ]each column)\n将表变更为列存表。具体解释如下： \n      \nADD COLUMN GROUP(all columns, each column)：将表变更为行存列存冗余的表。\nADD COLUMN GROUP(each column)：将表变更为列存表。\n\n\n\nDROP COLUMN GROUP([all columns, ]each column)\n移除表的存储格式。具体解释如下： \n      \nDROP COLUMN GROUP(all columns, each column): 移除表的行存列存冗余格式。\nDROP COLUMN GROUP(all columns): 移除表的行存格式。\nDROP COLUMN GROUP(each column): 移除表的列存格式。\n\n\n\nindex_column_group_option\n指定索引选项。具体解释如下： \n      \nWITH COLUMN GROUP(all columns, each column)：指定添加行存列存冗余的索引。\nWITH COLUMN GROUP(all columns)：指定添加行存索引。\nWITH COLUMN GROUP(each column)：指定添加列存索引。\n\n\n\nSKIP_INDEX\n修改列的 Skip Index 属性。取值如下： \n      \nMIN_MAX：是 Skip Index 中最通用的聚合数据类型，它会在索引节点粒度下存储被索引列的最大值、最小值和 Null Count。这种类型的数据可以加速下推的 Filter 和 MIN/MAX 聚合的下推。\nSUM：用于加速数值类型的 SUM 聚合的下推。\n\n\n注意\n\n\nJSON 和空间数据类型的列禁止创建 Skip Index。\n生成列禁止创建 Skip Index。\n\n\n\n\n\nEXCHANGE PARTITION partition_name WITH TABLE non_partition_table_name\n指定分区交换。其中，partition_name 表示分区交换中分区表的分区名称。non_partition_table_name 表示分区交换中非分区表名称。更多分区交换的信息，参见 分区交换。\n\n\nTABLE_MODE\n可选项，用于指定合并触发阈值与合并策略，即控制数据转储后的合并行为。取值的详细介绍可参见下文 table_mode_value。\n\n\nAUTO_INCREMENT_CACHE_SIZE\n用于设置缓存的自增值个数。该参数默认值为 0，表示该项未进行配置，系统将采用租户级别的配置项（auto_increment_cache_size）作为自增列的缓存大小设置。\n\n\n",
            "table_mode_value",
            "\n说明\n在以下列出的 TABLE_MODE 模式中，除了 NORMAL 模式之外，所有模式都代表 QUEUING 表。这种 QUEUING 表是最基本的表类型，并且随后列出的几种模式（除了 NORMAL 模式）代表了使用更加积极的合并策略。\n",
            "NORMAL",
            "：默认值，表示正常。在该模式下，数据转储后触发合并的概率极低。",
            "QUEUING",
            "：在该模式下，数据转储后触发合并的概率低。",
            "MODERATE",
            "：表示适度。在该模式下，数据转储后触发合并的概率为中等。",
            "SUPER",
            "：表示超级。在该模式下，数据转储后触发合并的概率高。",
            "EXTREME",
            "：表示极端。在该模式下，转储后触发合并的概率较高。",
            "更多有关合并的信息，请参见 自适应合并。"
        ],
        "Examples": [
            "obclient> CREATE TABLE tbl1 (c1 INT(11) PRIMARY KEY,c2 VARCHAR(50));\nQuery OK, 0 rows affected\n\nobclient> DESCRIBE tbl1;\n+-------+------------+----------+--------+---------+-------+\n| Field | Type       | Null     | Key    | Default | Extra |\n+-------+------------+----------+--------+---------+-------+\n| c1    | int(11)    | NO       | PRI    | NULL    |       |    \n| c2    | varchar(50)| YES      |        | NULL    |       |   \n+-------+------------+----------+--------+---------+-------+\n",
            "obclient> ALTER TABLE tbl1 ADD c3 INT;\nQuery OK, 1 row affected\n\nobclient> DESCRIBE tbl1;\n+-------+------------+----------+--------+---------+-------+\n| Field | Type       | Null     | Key    | Default | Extra |\n+-------+------------+----------+--------+---------+-------+\n| c1    | int(11)    | NO       | PRI    | NULL    |       |    \n| c2    | varchar(50)| YES      |        | NULL    |       |  \n| c3    | int(11)    | YES      |        | NULL    |       |  \n+-------+------------+----------+--------+---------+-------+\n3 row affected\n",
            "obclient> ALTER TABLE tbl1 DROP c3;\nQuery OK, 1 row affected\n\nobclient> DESCRIBE tbl1;\n+-------+------------+----------+--------+---------+-------+\n| Field | Type       | Null     | Key    | Default | Extra |\n+-------+------------+----------+--------+---------+-------+\n| c1    | int(11)    | NO       | PRI    | NULL    |       |    \n| c2    | varchar(50)| YES      |        | NULL    |       |  \n+-------+------------+----------+--------+---------+-------+\n2 row affected\n",
            "obclient> ALTER TABLE tbl1 CHANGE COLUMN c2 c3 VARCHAR(50);\nQuery OK, 1 row affected\n\nobclient> DESCRIBE tbl1;\n+-------+------------+----------+--------+---------+-------+\n| Field | Type       | Null     | Key    | Default | Extra |\n+-------+------------+----------+--------+---------+-------+\n| c1    | int(11)    | NO       | PRI    | NULL    |       |    \n| c3    | varchar(50)| YES      |        | NULL    |       |  \n+-------+------------+----------+--------+---------+-------+\n2 rows affected\n",
            "obclient> ALTER TABLE tbl1 ADD COLUMN c4 INTEGER FIRST;\nQuery OK, 1 row affected\n\nobclient> DESCRIBE tbl1;\n+-------+------------+----------+--------+---------+-------+\n| Field | Type       | Null     | Key    | Default | Extra |\n+-------+------------+----------+--------+---------+-------+\n| c4    | int(11)    | YES      |        | NULL    |       |  \n| c1    | int(11)    | NO       | PRI    | NULL    |       |    \n| c3    | varchar(50)| YES      |        | NULL    |       |  \n+-------+------------+----------+--------+---------+-------+\n3 row affected\n",
            "obclient> ALTER TABLE tbl1 ADD COLUMN c2 INTEGER AFTER c1;\nQuery OK, 1 row affected\n\nobclient> DESCRIBE tbl1;\n+-------+------------+----------+--------+---------+-------+\n| Field | Type       | Null     | Key    | Default | Extra |\n+-------+------------+----------+--------+---------+-------+\n| c4    | int(11)    | YES      |        | NULL    |       |  \n| c1    | int(11)    | NO       | PRI    | NULL    |       |\n| c2    | int(11)    | YES      |        | NULL    |       |    \n| c3    | varchar(50)| YES      |        | NULL    |       |  \n+-------+------------+----------+--------+---------+-------+\n4 row affected\n",
            "obclient> ALTER TABLE tbl1 ADD COLUMN c5 INT BEFORE c4;\nQuery OK, 1 row affected\n\nobclient> DESCRIBE tbl1;\n+-------+------------+----------+--------+---------+-------+\n| Field | Type       | Null     | Key    | Default | Extra |\n+-------+------------+----------+--------+---------+-------+\n| c5    | int(11)    | YES      |        | NULL    |       |  \n| c4    | int(11)    | YES      |        | NULL    |       |  \n| c1    | int(11)    | NO       | PRI    | NULL    |       |\n| c2    | int(11)    | YES      |        | NULL    |       |    \n| c3    | varchar(50)| YES      |        | NULL    |       |  \n+-------+------------+----------+--------+---------+-------+\n5 row affected\n",
            "obclient> CREATE TABLE tbl2(c1 INT PRIMARY KEY,c2 INT);\nQuery OK, 0 row affected\nobclient> CREATE TABLE tbl3(c1 INT PRIMARY KEY,c2 INT);\nQuery OK, 0 row affected\nobclient> ALTER TABLE tbl2 ADD CONSTRAINT fk1 FOREIGN KEY (c2) REFERENCES tbl3(c1) ON UPDATE SET NULL;\nQuery OK, 0 row affected\n",
            "obclient> ALTER TABLE tbl2 DROP FOREIGN KEY fk1;\nQuery OK, 0 row affected\n",
            "obclient> ALTER TABLE tbl2 DROP PRIMARY KEY;\nQuery OK, 0 row affected\n",
            "obclient> CREATE TABLE tbl2(c1 INT(11) PRIMARY KEY,c2 INT(50));\nQuery OK, 0 row affected\n\nobclient> CREATE INDEX ind1 ON tbl2 (c2 ASC);\nQuery OK, 0 row affected\nobclient> ALTER TABLE tbl2 RENAME INDEX ind1 TO ind2;\nQuery OK, 0 row affected\n",
            "obclient> ALTER TABLE tbl2 ADD INDEX ind3 (c1,c2);\nQuery OK, 0 row affected\n",
            "obclient> SHOW INDEX FROM tbl2;\n+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+-----------+---------------+---------+\n| Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment   | Index_comment | Visible |\n+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+-----------+---------------+---------+\n| tbl2  |          0 | PRIMARY  |            1 | c1          | A         |        NULL | NULL     | NULL   |      | BTREE      | available |               | YES     |\n| tbl2  |          1 | ind2     |            1 | c2          | A         |        NULL | NULL     | NULL   |  YES | BTREE      | available |               | YES     |\n| tbl2  |          1 | ind3     |            1 | c1          | A         |        NULL | NULL     | NULL   |      | BTREE      | available |               | YES     |\n| tbl2  |          1 | ind3     |            2 | c2          | A         |        NULL | NULL     | NULL   |  YES | BTREE      | available |               | YES     |\n+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+-----------+---------------+---------+\n4 rows in set\n",
            "obclient> ALTER TABLE tbl2 DROP INDEX ind2;\nQuery OK, 0 row affected\n",
            "obclient> ALTER TABLE t1_func ADD INDEX ((CONCAT(c1,'a')));\nQuery OK, 0 rows affected\nobclient> ALTER TABLE t1_func ADD INDEX ((c1+1));\nQuery OK, 0 rows affected\nobclient> ALTER TABLE t1_func ADD INDEX i2 ((CONCAT(c1,'a')));\nQuery OK, 0 rows affected\nobclient> SHOW CREATE TABLE t1_func;\nn| Table   | Create Table|\nn| t1_func | CREATE TABLE `t1_func` (\n`c1` int(11) DEFAULT NULL,\n`c2` int(11) DEFAULT NULL,\nKEY `i1` (((`c1` + `c2`) < 1)) BLOCK_SIZE 16384 LOCAL,\nKEY `functional_index` (concat(`c1`,'a')) BLOCK_SIZE 16384 LOCAL,\nKEY `functional_index_2` ((`c1` + 1)) BLOCK_SIZE 16384 LOCAL,\nKEY `i2` (concat(`c1`,'a')) BLOCK_SIZE 16384 LOCAL\n) DEFAULT CHARSET = utf8mb4 ROW_FORMAT = DYNAMIC COMPRESSION = 'zstd_1.3.8' REPLICA_NUM = 1 BLOCK_SIZE = 16384 USE_BLOOM_FILTER = FALSE TABLET_SIZE = 134217728 PCTFREE = 0 |\nn1 row in set\n",
            "CREATE TABLE tbl3 (col1 INT, col2 VARCHAR(50));\n",
            "ALTER TABLE tbl3 ADD INDEX idx1_tbl3 (col1) WITH COLUMN GROUP(each column);\n",
            "obclient> CREATE TABLE t_log_part_by_range (\n    log_id      bigint NOT NULL\n    , log_value varchar(50)\n    , log_date  timestamp NOT NULL  \n) PARTITION BY RANGE(UNIX_TIMESTAMP(log_date))\n(\n    PARTITION M202001 VALUES LESS THAN(UNIX_TIMESTAMP('2020/02/01'))\n    , PARTITION M202002 VALUES LESS THAN(UNIX_TIMESTAMP('2020/03/01'))\n    , PARTITION M202003 VALUES LESS THAN(UNIX_TIMESTAMP('2020/04/01'))\n    , PARTITION M202004 VALUES LESS THAN(UNIX_TIMESTAMP('2020/05/01'))\n    , PARTITION M202005 VALUES LESS THAN(UNIX_TIMESTAMP('2020/06/01'))\n);\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLE t_log_part_by_range TRUNCATE PARTITION M202001, M202002;\nQuery OK, 0 rows affected\n",
            "obclient> CREATE TABLE t_log_part_by_range (\n    log_id      bigint NOT NULL\n    , log_value varchar(50)\n    , log_date  timestamp NOT NULL  \n) PARTITION BY RANGE(UNIX_TIMESTAMP(log_date))\n(\n    PARTITION M202001 VALUES LESS THAN(UNIX_TIMESTAMP('2020/02/01'))\n    , PARTITION M202002 VALUES LESS THAN(UNIX_TIMESTAMP('2020/03/01'))\n    , PARTITION M202003 VALUES LESS THAN(UNIX_TIMESTAMP('2020/04/01'))\n    , PARTITION M202004 VALUES LESS THAN(UNIX_TIMESTAMP('2020/05/01'))\n    , PARTITION M202005 VALUES LESS THAN(UNIX_TIMESTAMP('2020/06/01'))\n);\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLE t_log_part_by_range ADD PARTITION\n         (PARTITION M202006 VALUES LESS THAN(UNIX_TIMESTAMP('2020/07/01'))\n         );\n",
            "obclient> ALTER TABLE tbl3 PARALLEL 2;\n",
            "obclient> CREATE TABLE tbl4 (col1 BIGINT(10) NOT NULL,col2 INT);\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLE tbl4 MODIFY col1 BIGINT(10) AUTO_INCREMENT;\nQuery OK, 0 rows affected\n",
            "obclient> ALTER TABLE tbl4 ADD PRIMARY KEY (col1);\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLE tbl4 DROP PRIMARY KEY,ADD PRIMARY KEY (`col2`);\nQuery OK, 0 rows affected\n",
            "obclient> CREATE TABLE tbl7(col1 VARCHAR(10),col2 VARCHAR(10));\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLE tbl7 ADD CONSTRAINT my_check CHECK (col1> col2) ;\nQuery OK, 0 rows affected\n",
            "obclient> ALTER TABLE tbl7 DROP CHECK my_check;\nQuery OK, 0 rows affected\n",
            "obclient> CREATE TABLE dept(  \n    deptno           NUMBER(2,0),  \n    dname            VARCHAR(14),  \n    location         VARCHAR(13),   \n    CONSTRAINT pk_dept PRIMARY KEY(deptno)  \n);\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE emp(  \n    empno         NUMBER(4,0) NOT NULL,  \n    empname       VARCHAR(10) NOT NULL,  \n    job           VARCHAR(9) NOT NULL,  \n    mgr           NUMBER(4,0) NOT NULL,  \n    hiredate      DATE NOT NULL,  \n    sal           NUMBER(7,2) DEFAULT NULL,\n    comm          NUMBER(7,2) DEFAULT NULL,        \n    deptno        NUMBER(2,0) DEFAULT NULL,   \n    CONSTRAINT PK_emp PRIMARY KEY (empno),\n    CONSTRAINT FK_deptno  FOREIGN KEY (deptno)  REFERENCES dept (deptno)  \n);\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLE emp MODIFY deptno NUMBER(2,0) DEFAULT '12' NOT NULL;\nQuery OK, 0 rows affected\n",
            "obclient> CREATE TABLE tbl8 (a INT, b INT);\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLE tbl8 RENAME COLUMN a TO b;\nERROR 1060 (42S21): Duplicate column name 'b'\n\nobclient> ALTER TABLE tbl8 RENAME COLUMN a TO a;\nQuery OK, 0 rows affected\n",
            "obclient> CREATE TABLE tbl9 (a INT, b INT, index idx_a(a));\nQuery OK, 0 rows affected\n\nobclient> SHOW INDEX FROM tbl9;\n+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+-----------+---------------+---------+------------+\n| Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment   | Index_comment | Visible | Expression |\n+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+-----------+---------------+---------+------------+\n| tbl9  |          1 | idx_a    |            1 | a           | A         |        NULL | NULL     | NULL   | YES  | BTREE      | available |               | YES     | NULL       |\n+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+-----------+---------------+---------+------------+\n1 row in set\n\nobclient> ALTER TABLE tbl9 RENAME COLUMN a TO c;\nQuery OK, 0 rows affected\n\nobclient> SHOW INDEX FROM tbl9;\n+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+-----------+---------------+---------+------------+\n| Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment   | Index_comment | Visible | Expression |\n+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+-----------+---------------+---------+------------+\n| tbl9  |          1 | idx_a    |            1 | c           | A         |        NULL | NULL     | NULL   | YES  | BTREE      | available |               | YES     | NULL       |\n+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+-----------+---------------+---------+------------+\n1 row in set\n",
            "DROP TABLE tbl9;\nobclient> CREATE TABLE tbl9 (c1 INT PRIMARY KEY, c2 BLOB, c3 INT, INDEX i1 (c2(10)));\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLE tbl9 RENAME COLUMN c2 TO c2_, RENAME COLUMN c1 TO c2_1;\nDESC tbl9;\nQuery OK, 0 rows affected\n\nobclient> SHOW INDEX FROM tbl9;\n+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+-----------+---------------+---------+------------+\n| Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment   | Index_comment | Visible | Expression |\n+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+-----------+---------------+---------+------------+\n| tbl9  |          0 | PRIMARY  |            1 | c2_1        | A         |        NULL | NULL     | NULL   |      | BTREE      | available |               | YES     | NULL       |\n| tbl9  |          1 | i1       |            1 | c2_         | A         |        NULL | 10       | NULL   | YES  | BTREE      | available |               | YES     | NULL       |\n+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+-----------+---------------+---------+------------+\n2 rows in set\n",
            "obclient> CREATE TABLE tbl10 (a INT PRIMARY KEY);\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl11(b INT, FOREIGN KEY (b) REFERENCES tbl10(a));\n\nobclient> SHOW CREATE TABLE tbl11;\n+-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Table | Create Table                                                                                                                                                                                                                                                                                                                                                      |\n+-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| tbl11 | CREATE TABLE `tbl11` (\n`b` int(11) DEFAULT NULL,\nCONSTRAINT `tbl11_OBFK_1694681944513338` FOREIGN KEY (`b`) REFERENCES `test`.`tbl10`(`a`) ON UPDATE RESTRICT ON DELETE RESTRICT\n) DEFAULT CHARSET = utf8mb4 ROW_FORMAT = DYNAMIC COMPRESSION = 'zstd_1.3.8' REPLICA_NUM = 1 BLOCK_SIZE =  16384 USE_BLOOM_FILTER = FALSE TABLET_SIZE = 134217728 PCTFREE = 0 |\n+-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n1 row in set\n\nobclient> ALTER TABLE tbl10 RENAME COLUMN a TO c;\nQuery OK, 0 rows affected\n\nobclient> SHOW CREATE TABLE tbl11;\n+-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Table | Create Table                                                                                                                                                                                                                                                                                                                                                      |\n+-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| tbl11 | CREATE TABLE `tbl11` (\n`b` int(11) DEFAULT NULL,\nCONSTRAINT `tbl11_OBFK_1694681944513338` FOREIGN KEY (`b`) REFERENCES `test`.`tbl10`(`c`) ON UPDATE RESTRICT ON DELETE RESTRICT\n) DEFAULT CHARSET = utf8mb4 ROW_FORMAT = DYNAMIC COMPRESSION = 'zstd_1.3.8' REPLICA_NUM = 1 BLOCK_SIZE = 16384 USE_BLOOM_FILTER = FALSE TABLET_SIZE = 134217728 PCTFREE = 0 |\n+-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n1 row in set\n",
            "obclient> CREATE TABLE tbl12(a INT, b INT AS (a + 1), c INT, d INT, CONSTRAINT d_check CHECK(d > 0)) PARTITION BY HASH(c + 1) PARTITIONS 2;\n\nobclient> ALTER TABLE tbl12 RENAME COLUMN a TO e;\nERROR 3108 (HY000): Column 'a' has a generated column dependency\n",
            "obclient> ALTER TABLE tbl12 RENAME COLUMN c TO e;\nERROR 3855 (HY000): Column 'c' has a partitioning function dependency and cannot be dropped or renamed.\n",
            "obclient> ALTER TABLE tbl12 RENAME COLUMN d TO e;\nERROR 3959 (HY000): Check constraint 'd_check' uses column 'd', hence column cannot be dropped or renamed.\n",
            "DROP TABLE IF EXISTS tbl12;\nobclient> CREATE TABLE tbl12(i INT, INDEX ((i+1)));\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLE tbl12 RENAME COLUMN i TO j;\nERROR 3837 (HY000): Column 'i' has a functional index dependency and cannot be dropped or renamed.\n",
            "obclient> CREATE TABLE tbl13(a INT);\nQuery OK, 0 rows affected\n\nobclient> CREATE VIEW v1 AS SELECT a + 1 FROM tbl13;\nQuery OK, 0 rows affected\n\nobclient> SELECT * FROM v1;\nEmpty set\n\nobclient> ALTER TABLE tbl13 RENAME COLUMN a TO b;\nQuery OK, 0 rows affected\n\nobclient> SELECT * FROM v1;\nERROR 1356 (42S22): View 'test.v1' references invalid table(s) or column(s) or function(s) or definer/invoker of view lack rights to use them\n",
            "obclient> CREATE TABLE tbl14(a INT);\nQuery OK, 0 rows affected\n\nobclient> CREATE PROCEDURE proc() SELECT a + 1 FROM tbl14;\nQuery OK, 0 rows affected\n\nobclient> CALL proc();\nEmpty set\n\nobclient> ALTER TABLE tbl14 RENAME COLUMN a TO b;\nQuery OK, 0 rows affected\n\nobclient> CALL proc();\nERROR 1054 (42S22): Unknown column 'a' in 'field list'\n",
            "CREATE TABLE tbl1 (col1 INT PRIMARY KEY, col2 VARCHAR(50));\n",
            "ALTER TABLE tbl1 ADD COLUMN GROUP(all columns, each column);\n",
            "ALTER TABLE tbl1 DROP COLUMN GROUP(all columns, each column);\n",
            "ALTER TABLE tbl1 ADD COLUMN GROUP(each column);\n",
            "ALTER TABLE tbl1 DROP COLUMN GROUP(each column);\n",
            "CREATE TABLE test_skidx(\n  col1 INT SKIP_INDEX(MIN_MAX, SUM),\n  col2 FLOAT SKIP_INDEX(MIN_MAX),\n  col3 VARCHAR(1024) SKIP_INDEX(MIN_MAX),\n  col4 CHAR(10)\n  );\n",
            "ALTER TABLE test_skidx MODIFY COLUMN col2 FLOAT SKIP_INDEX(SUM);\n",
            "ALTER TABLE test_skidx MODIFY COLUMN col4 CHAR(10) SKIP_INDEX(MIN_MAX);\n",
            "ALTER TABLE test_skidx MODIFY COLUMN col1 INT SKIP_INDEX();\n",
            "ALTER TABLE test_skidx MODIFY COLUMN col1 INT;\n"
        ],
        "Detailed Examples": [
            "增加和删除列的操作",
            "创建示例表 tbl1，并执行 DESCRIBE 命令查看表信息。",
            "obclient> CREATE TABLE tbl1 (c1 INT(11) PRIMARY KEY,c2 VARCHAR(50));\nQuery OK, 0 rows affected\n\nobclient> DESCRIBE tbl1;\n+-------+------------+----------+--------+---------+-------+\n| Field | Type       | Null     | Key    | Default | Extra |\n+-------+------------+----------+--------+---------+-------+\n| c1    | int(11)    | NO       | PRI    | NULL    |       |    \n| c2    | varchar(50)| YES      |        | NULL    |       |   \n+-------+------------+----------+--------+---------+-------+\n",
            "增加 c3 列，并执行 DESCRIBE 命令查看表信息。",
            "obclient> ALTER TABLE tbl1 ADD c3 INT;\nQuery OK, 1 row affected\n\nobclient> DESCRIBE tbl1;\n+-------+------------+----------+--------+---------+-------+\n| Field | Type       | Null     | Key    | Default | Extra |\n+-------+------------+----------+--------+---------+-------+\n| c1    | int(11)    | NO       | PRI    | NULL    |       |    \n| c2    | varchar(50)| YES      |        | NULL    |       |  \n| c3    | int(11)    | YES      |        | NULL    |       |  \n+-------+------------+----------+--------+---------+-------+\n3 row affected\n",
            "删除 c3 列，并执行 DESCRIBE 命令查看表信息。",
            "obclient> ALTER TABLE tbl1 DROP c3;\nQuery OK, 1 row affected\n\nobclient> DESCRIBE tbl1;\n+-------+------------+----------+--------+---------+-------+\n| Field | Type       | Null     | Key    | Default | Extra |\n+-------+------------+----------+--------+---------+-------+\n| c1    | int(11)    | NO       | PRI    | NULL    |       |    \n| c2    | varchar(50)| YES      |        | NULL    |       |  \n+-------+------------+----------+--------+---------+-------+\n2 row affected\n",
            "将表 tbl1 的字段 c2 改名为 c3，并执行 DESCRIBE 命令查看表信息。",
            "obclient> ALTER TABLE tbl1 CHANGE COLUMN c2 c3 VARCHAR(50);\nQuery OK, 1 row affected\n\nobclient> DESCRIBE tbl1;\n+-------+------------+----------+--------+---------+-------+\n| Field | Type       | Null     | Key    | Default | Extra |\n+-------+------------+----------+--------+---------+-------+\n| c1    | int(11)    | NO       | PRI    | NULL    |       |    \n| c3    | varchar(50)| YES      |        | NULL    |       |  \n+-------+------------+----------+--------+---------+-------+\n2 rows affected\n",
            "为表 tbl1 添加 c4 列，并将该列设置为表的第一列，并执行 DESCRIBE 命令查看表信息。",
            "obclient> ALTER TABLE tbl1 ADD COLUMN c4 INTEGER FIRST;\nQuery OK, 1 row affected\n\nobclient> DESCRIBE tbl1;\n+-------+------------+----------+--------+---------+-------+\n| Field | Type       | Null     | Key    | Default | Extra |\n+-------+------------+----------+--------+---------+-------+\n| c4    | int(11)    | YES      |        | NULL    |       |  \n| c1    | int(11)    | NO       | PRI    | NULL    |       |    \n| c3    | varchar(50)| YES      |        | NULL    |       |  \n+-------+------------+----------+--------+---------+-------+\n3 row affected\n",
            "在 c1 列后添加 c2 列，并执行 DESCRIBE 命令查看表信息。",
            "obclient> ALTER TABLE tbl1 ADD COLUMN c2 INTEGER AFTER c1;\nQuery OK, 1 row affected\n\nobclient> DESCRIBE tbl1;\n+-------+------------+----------+--------+---------+-------+\n| Field | Type       | Null     | Key    | Default | Extra |\n+-------+------------+----------+--------+---------+-------+\n| c4    | int(11)    | YES      |        | NULL    |       |  \n| c1    | int(11)    | NO       | PRI    | NULL    |       |\n| c2    | int(11)    | YES      |        | NULL    |       |    \n| c3    | varchar(50)| YES      |        | NULL    |       |  \n+-------+------------+----------+--------+---------+-------+\n4 row affected\n",
            "在 c4 列前添加 c5 列，并执行 DESCRIBE 命令查看表信息。",
            "obclient> ALTER TABLE tbl1 ADD COLUMN c5 INT BEFORE c4;\nQuery OK, 1 row affected\n\nobclient> DESCRIBE tbl1;\n+-------+------------+----------+--------+---------+-------+\n| Field | Type       | Null     | Key    | Default | Extra |\n+-------+------------+----------+--------+---------+-------+\n| c5    | int(11)    | YES      |        | NULL    |       |  \n| c4    | int(11)    | YES      |        | NULL    |       |  \n| c1    | int(11)    | NO       | PRI    | NULL    |       |\n| c2    | int(11)    | YES      |        | NULL    |       |    \n| c3    | varchar(50)| YES      |        | NULL    |       |  \n+-------+------------+----------+--------+---------+-------+\n5 row affected\n",
            "为表 tbl2 添加外键约束 fk1。当 UPDATE 操作影响与子表相匹配行的父表中键值时，执行 SET NULL 操作。",
            "obclient> CREATE TABLE tbl2(c1 INT PRIMARY KEY,c2 INT);\nQuery OK, 0 row affected\nobclient> CREATE TABLE tbl3(c1 INT PRIMARY KEY,c2 INT);\nQuery OK, 0 row affected\nobclient> ALTER TABLE tbl2 ADD CONSTRAINT fk1 FOREIGN KEY (c2) REFERENCES tbl3(c1) ON UPDATE SET NULL;\nQuery OK, 0 row affected\n",
            "删除 tbl3 表的外键约束 fk1。",
            "obclient> ALTER TABLE tbl2 DROP FOREIGN KEY fk1;\nQuery OK, 0 row affected\n",
            "删除 tbl2 表的主键。",
            "obclient> ALTER TABLE tbl2 DROP PRIMARY KEY;\nQuery OK, 0 row affected\n",
            "索引操作",
            "将 tbl2 表的索引 ind1 重命名为 ind2。",
            "obclient> CREATE TABLE tbl2(c1 INT(11) PRIMARY KEY,c2 INT(50));\nQuery OK, 0 row affected\n\nobclient> CREATE INDEX ind1 ON tbl2 (c2 ASC);\nQuery OK, 0 row affected\nobclient> ALTER TABLE tbl2 RENAME INDEX ind1 TO ind2;\nQuery OK, 0 row affected\n",
            "在 tbl2 表上创建索引 ind3，引用 c1、c2 列。",
            "obclient> ALTER TABLE tbl2 ADD INDEX ind3 (c1,c2);\nQuery OK, 0 row affected\n",
            "可以通过 SHOW INDEX 语句查看创建的索引。",
            "obclient> SHOW INDEX FROM tbl2;\n+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+-----------+---------------+---------+\n| Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment   | Index_comment | Visible |\n+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+-----------+---------------+---------+\n| tbl2  |          0 | PRIMARY  |            1 | c1          | A         |        NULL | NULL     | NULL   |      | BTREE      | available |               | YES     |\n| tbl2  |          1 | ind2     |            1 | c2          | A         |        NULL | NULL     | NULL   |  YES | BTREE      | available |               | YES     |\n| tbl2  |          1 | ind3     |            1 | c1          | A         |        NULL | NULL     | NULL   |      | BTREE      | available |               | YES     |\n| tbl2  |          1 | ind3     |            2 | c2          | A         |        NULL | NULL     | NULL   |  YES | BTREE      | available |               | YES     |\n+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+-----------+---------------+---------+\n4 rows in set\n",
            "删除 tbl2 表上的索引 ind2。",
            "obclient> ALTER TABLE tbl2 DROP INDEX ind2;\nQuery OK, 0 row affected\n",
            "\n说明\n在实际运维场景中，您可以通过以上方式实现索引的原子性变更。\n",
            "在 t1_func 上添加 3 个函数索引，其中一个名字是 i2，另外两个由系统自动生成的名称，格式为 functional_index 前缀加编号。",
            "obclient> ALTER TABLE t1_func ADD INDEX ((CONCAT(c1,'a')));\nQuery OK, 0 rows affected\nobclient> ALTER TABLE t1_func ADD INDEX ((c1+1));\nQuery OK, 0 rows affected\nobclient> ALTER TABLE t1_func ADD INDEX i2 ((CONCAT(c1,'a')));\nQuery OK, 0 rows affected\nobclient> SHOW CREATE TABLE t1_func;\nn| Table   | Create Table|\n+---------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| t1_func | CREATE TABLE `t1_func` (\n`c1` int(11) DEFAULT NULL,\n`c2` int(11) DEFAULT NULL,\nKEY `i1` (((`c1` + `c2`) < 1)) BLOCK_SIZE 16384 LOCAL,\nKEY `functional_index` (concat(`c1`,'a')) BLOCK_SIZE 16384 LOCAL,\nKEY `functional_index_2` ((`c1` + 1)) BLOCK_SIZE 16384 LOCAL,\nKEY `i2` (concat(`c1`,'a')) BLOCK_SIZE 16384 LOCAL\n) DEFAULT CHARSET = utf8mb4 ROW_FORMAT = DYNAMIC COMPRESSION = 'zstd_1.3.8' REPLICA_NUM = 1 BLOCK_SIZE = 16384 USE_BLOOM_FILTER = FALSE TABLET_SIZE = 134217728 PCTFREE = 0 |\nn1 row in set\n",
            "为表创建列存索引。",
            "\n使用下面 SQL 语句创建表 tbl3。 CREATE TABLE tbl3 (col1 INT, col2 VARCHAR(50));\n\n在 tbl3 表上创建列存索引 idx1_tbl3，引用 col1 列。 ALTER TABLE tbl3 ADD INDEX idx1_tbl3 (col1) WITH COLUMN GROUP(each column);\n\n",
            "使用下面 SQL 语句创建表 tbl3。",
            "CREATE TABLE tbl3 (col1 INT, col2 VARCHAR(50));\n",
            "在 tbl3 表上创建列存索引 idx1_tbl3，引用 col1 列。",
            "ALTER TABLE tbl3 ADD INDEX idx1_tbl3 (col1) WITH COLUMN GROUP(each column);\n",
            "分区操作",
            "清除分区表 t_log_part_by_range 的分区 M202001 和 M202002 中的全部数据。",
            "obclient> CREATE TABLE t_log_part_by_range (\n    log_id      bigint NOT NULL\n    , log_value varchar(50)\n    , log_date  timestamp NOT NULL  \n) PARTITION BY RANGE(UNIX_TIMESTAMP(log_date))\n(\n    PARTITION M202001 VALUES LESS THAN(UNIX_TIMESTAMP('2020/02/01'))\n    , PARTITION M202002 VALUES LESS THAN(UNIX_TIMESTAMP('2020/03/01'))\n    , PARTITION M202003 VALUES LESS THAN(UNIX_TIMESTAMP('2020/04/01'))\n    , PARTITION M202004 VALUES LESS THAN(UNIX_TIMESTAMP('2020/05/01'))\n    , PARTITION M202005 VALUES LESS THAN(UNIX_TIMESTAMP('2020/06/01'))\n);\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLE t_log_part_by_range TRUNCATE PARTITION M202001, M202002;\nQuery OK, 0 rows affected\n",
            "为分区表 t_log_part_by_range 添加分区 M202006。",
            "obclient> CREATE TABLE t_log_part_by_range (\n    log_id      bigint NOT NULL\n    , log_value varchar(50)\n    , log_date  timestamp NOT NULL  \n) PARTITION BY RANGE(UNIX_TIMESTAMP(log_date))\n(\n    PARTITION M202001 VALUES LESS THAN(UNIX_TIMESTAMP('2020/02/01'))\n    , PARTITION M202002 VALUES LESS THAN(UNIX_TIMESTAMP('2020/03/01'))\n    , PARTITION M202003 VALUES LESS THAN(UNIX_TIMESTAMP('2020/04/01'))\n    , PARTITION M202004 VALUES LESS THAN(UNIX_TIMESTAMP('2020/05/01'))\n    , PARTITION M202005 VALUES LESS THAN(UNIX_TIMESTAMP('2020/06/01'))\n);\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLE t_log_part_by_range ADD PARTITION\n         (PARTITION M202006 VALUES LESS THAN(UNIX_TIMESTAMP('2020/07/01'))\n         );\n",
            "修改并行度",
            "修改表 tbl3 的并行度为 2。",
            "obclient> ALTER TABLE tbl3 PARALLEL 2;\n",
            "列类型相关操作",
            "修改表 tbl4 的普通列 col1 为自增列。",
            "obclient> CREATE TABLE tbl4 (col1 BIGINT(10) NOT NULL,col2 INT);\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLE tbl4 MODIFY col1 BIGINT(10) AUTO_INCREMENT;\nQuery OK, 0 rows affected\n",
            "为表 tbl4 增加主键 col1，之后更改主键为 col2。",
            "obclient> ALTER TABLE tbl4 ADD PRIMARY KEY (col1);\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLE tbl4 DROP PRIMARY KEY,ADD PRIMARY KEY (`col2`);\nQuery OK, 0 rows affected\n",
            "添加 CHECK 约束。",
            "obclient> CREATE TABLE tbl7(col1 VARCHAR(10),col2 VARCHAR(10));\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLE tbl7 ADD CONSTRAINT my_check CHECK (col1> col2) ;\nQuery OK, 0 rows affected\n",
            "删除表 tbl7 的 CHECK 约束。",
            "obclient> ALTER TABLE tbl7 DROP CHECK my_check;\nQuery OK, 0 rows affected\n",
            "修改列类型为 NOT NULL。",
            "obclient> CREATE TABLE dept(  \n    deptno           NUMBER(2,0),  \n    dname            VARCHAR(14),  \n    location         VARCHAR(13),   \n    CONSTRAINT pk_dept PRIMARY KEY(deptno)  \n);\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE emp(  \n    empno         NUMBER(4,0) NOT NULL,  \n    empname       VARCHAR(10) NOT NULL,  \n    job           VARCHAR(9) NOT NULL,  \n    mgr           NUMBER(4,0) NOT NULL,  \n    hiredate      DATE NOT NULL,  \n    sal           NUMBER(7,2) DEFAULT NULL,\n    comm          NUMBER(7,2) DEFAULT NULL,        \n    deptno        NUMBER(2,0) DEFAULT NULL,   \n    CONSTRAINT PK_emp PRIMARY KEY (empno),\n    CONSTRAINT FK_deptno  FOREIGN KEY (deptno)  REFERENCES dept (deptno)  \n);\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLE emp MODIFY deptno NUMBER(2,0) DEFAULT '12' NOT NULL;\nQuery OK, 0 rows affected\n",
            "重命名列操作",
            "RENAME COLUMN 不改变列定义，仅修改列名。如果目标名称在表中已经存在，那么 RENAME COLUMN 执行会报错，但是重命名为原名称则不会报错。",
            "obclient> CREATE TABLE tbl8 (a INT, b INT);\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLE tbl8 RENAME COLUMN a TO b;\nERROR 1060 (42S21): Duplicate column name 'b'\n\nobclient> ALTER TABLE tbl8 RENAME COLUMN a TO a;\nQuery OK, 0 rows affected\n",
            "如果重命名的列上建有索引，RENAME COLUMN 可以正常执行，索引定义会自动级联修改。",
            "obclient> CREATE TABLE tbl9 (a INT, b INT, index idx_a(a));\nQuery OK, 0 rows affected\n\nobclient> SHOW INDEX FROM tbl9;\n+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+-----------+---------------+---------+------------+\n| Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment   | Index_comment | Visible | Expression |\n+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+-----------+---------------+---------+------------+\n| tbl9  |          1 | idx_a    |            1 | a           | A         |        NULL | NULL     | NULL   | YES  | BTREE      | available |               | YES     | NULL       |\n+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+-----------+---------------+---------+------------+\n1 row in set\n\nobclient> ALTER TABLE tbl9 RENAME COLUMN a TO c;\nQuery OK, 0 rows affected\n\nobclient> SHOW INDEX FROM tbl9;\n+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+-----------+---------------+---------+------------+\n| Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment   | Index_comment | Visible | Expression |\n+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+-----------+---------------+---------+------------+\n| tbl9  |          1 | idx_a    |            1 | c           | A         |        NULL | NULL     | NULL   | YES  | BTREE      | available |               | YES     | NULL       |\n+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+-----------+---------------+---------+------------+\n1 row in set\n",
            "如果重命名列被前缀索引引用，RENAME COLUMN 可以正常执行，前缀索引支持级联修改。",
            "DROP TABLE tbl9;\nobclient> CREATE TABLE tbl9 (c1 INT PRIMARY KEY, c2 BLOB, c3 INT, INDEX i1 (c2(10)));\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLE tbl9 RENAME COLUMN c2 TO c2_, RENAME COLUMN c1 TO c2_1;\nDESC tbl9;\nQuery OK, 0 rows affected\n\nobclient> SHOW INDEX FROM tbl9;\n+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+-----------+---------------+---------+------------+\n| Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment   | Index_comment | Visible | Expression |\n+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+-----------+---------------+---------+------------+\n| tbl9  |          0 | PRIMARY  |            1 | c2_1        | A         |        NULL | NULL     | NULL   |      | BTREE      | available |               | YES     | NULL       |\n| tbl9  |          1 | i1       |            1 | c2_         | A         |        NULL | 10       | NULL   | YES  | BTREE      | available |               | YES     | NULL       |\n+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+-----------+---------------+---------+------------+\n2 rows in set\n",
            "如果重命名的列上建有外键约束，RENAME COLUMN 可以正常执行，外键约束会自动级联修改。",
            "obclient> CREATE TABLE tbl10 (a INT PRIMARY KEY);\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl11(b INT, FOREIGN KEY (b) REFERENCES tbl10(a));\n\nobclient> SHOW CREATE TABLE tbl11;\n+-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Table | Create Table                                                                                                                                                                                                                                                                                                                                                      |\n+-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| tbl11 | CREATE TABLE `tbl11` (\n`b` int(11) DEFAULT NULL,\nCONSTRAINT `tbl11_OBFK_1694681944513338` FOREIGN KEY (`b`) REFERENCES `test`.`tbl10`(`a`) ON UPDATE RESTRICT ON DELETE RESTRICT\n) DEFAULT CHARSET = utf8mb4 ROW_FORMAT = DYNAMIC COMPRESSION = 'zstd_1.3.8' REPLICA_NUM = 1 BLOCK_SIZE =  16384 USE_BLOOM_FILTER = FALSE TABLET_SIZE = 134217728 PCTFREE = 0 |\n+-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n1 row in set\n\nobclient> ALTER TABLE tbl10 RENAME COLUMN a TO c;\nQuery OK, 0 rows affected\n\nobclient> SHOW CREATE TABLE tbl11;\n+-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Table | Create Table                                                                                                                                                                                                                                                                                                                                                      |\n+-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| tbl11 | CREATE TABLE `tbl11` (\n`b` int(11) DEFAULT NULL,\nCONSTRAINT `tbl11_OBFK_1694681944513338` FOREIGN KEY (`b`) REFERENCES `test`.`tbl10`(`c`) ON UPDATE RESTRICT ON DELETE RESTRICT\n) DEFAULT CHARSET = utf8mb4 ROW_FORMAT = DYNAMIC COMPRESSION = 'zstd_1.3.8' REPLICA_NUM = 1 BLOCK_SIZE = 16384 USE_BLOOM_FILTER = FALSE TABLET_SIZE = 134217728 PCTFREE = 0 |\n+-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n1 row in set\n",
            "OceanBase 数据库在以下场景，不支持修改或者不会自动级联修改：",
            "重命名的列被生成列表达式引用，不支持修改列名，执行会报错。",
            "obclient> CREATE TABLE tbl12(a INT, b INT AS (a + 1), c INT, d INT, CONSTRAINT d_check CHECK(d > 0)) PARTITION BY HASH(c + 1) PARTITIONS 2;\n\nobclient> ALTER TABLE tbl12 RENAME COLUMN a TO e;\nERROR 3108 (HY000): Column 'a' has a generated column dependency\n",
            "重命名的列被分区表达式引用，不支持修改列名，执行会报错。",
            "obclient> ALTER TABLE tbl12 RENAME COLUMN c TO e;\nERROR 3855 (HY000): Column 'c' has a partitioning function dependency and cannot be dropped or renamed.\n",
            "重命名的列被 CHECK 约束引用，不支持修改列名，执行会报错。",
            "obclient> ALTER TABLE tbl12 RENAME COLUMN d TO e;\nERROR 3959 (HY000): Check constraint 'd_check' uses column 'd', hence column cannot be dropped or renamed.\n",
            "重命名的列被函数索引引用，不支持修改列名，执行会报错。",
            "DROP TABLE IF EXISTS tbl12;\nobclient> CREATE TABLE tbl12(i INT, INDEX ((i+1)));\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLE tbl12 RENAME COLUMN i TO j;\nERROR 3837 (HY000): Column 'i' has a functional index dependency and cannot be dropped or renamed.\n",
            "重命名的列被视图引用，RENAME COLUMN 执行成功，查询视图会报错，需要用户手动修改视图定义。",
            "obclient> CREATE TABLE tbl13(a INT);\nQuery OK, 0 rows affected\n\nobclient> CREATE VIEW v1 AS SELECT a + 1 FROM tbl13;\nQuery OK, 0 rows affected\n\nobclient> SELECT * FROM v1;\nEmpty set\n\nobclient> ALTER TABLE tbl13 RENAME COLUMN a TO b;\nQuery OK, 0 rows affected\n\nobclient> SELECT * FROM v1;\nERROR 1356 (42S22): View 'test.v1' references invalid table(s) or column(s) or function(s) or definer/invoker of view lack rights to use them\n",
            "重命名的列被存储过程引用，RENAME COLUMN 执行成功，CALL Procedure 报错，需要用户手动修改。",
            "obclient> CREATE TABLE tbl14(a INT);\nQuery OK, 0 rows affected\n\nobclient> CREATE PROCEDURE proc() SELECT a + 1 FROM tbl14;\nQuery OK, 0 rows affected\n\nobclient> CALL proc();\nEmpty set\n\nobclient> ALTER TABLE tbl14 RENAME COLUMN a TO b;\nQuery OK, 0 rows affected\n\nobclient> CALL proc();\nERROR 1054 (42S22): Unknown column 'a' in 'field list'\n",
            "修改表的列存属性",
            "使用下面 SQL 语句创建表 tbl1。",
            "CREATE TABLE tbl1 (col1 INT PRIMARY KEY, col2 VARCHAR(50));\n",
            "将表 tbl1 的变更为行存列存冗余表，然后再删除行存列存冗余属性。",
            "ALTER TABLE tbl1 ADD COLUMN GROUP(all columns, each column);\n",
            "ALTER TABLE tbl1 DROP COLUMN GROUP(all columns, each column);\n",
            "将表 tbl1 的变更为列存表，然后再删除列存属性。",
            "ALTER TABLE tbl1 ADD COLUMN GROUP(each column);\n",
            "ALTER TABLE tbl1 DROP COLUMN GROUP(each column);\n",
            "修改列的 Skip Index 属性",
            "使用下面 SQL 语句创建表 test_skidx。",
            "CREATE TABLE test_skidx(\n  col1 INT SKIP_INDEX(MIN_MAX, SUM),\n  col2 FLOAT SKIP_INDEX(MIN_MAX),\n  col3 VARCHAR(1024) SKIP_INDEX(MIN_MAX),\n  col4 CHAR(10)\n  );\n",
            "修改表 test_skidx 中列 col2 的 Skip Index 属性为 SUM Skip Index 类型。",
            "ALTER TABLE test_skidx MODIFY COLUMN col2 FLOAT SKIP_INDEX(SUM);\n",
            "建表后新增列的 Skip Index 属性。为表 test_skidx 中列 col4 增加的 MIN_MAX Skip Index 类型。",
            "ALTER TABLE test_skidx MODIFY COLUMN col4 CHAR(10) SKIP_INDEX(MIN_MAX);\n",
            "建表后删除列的 Skip Index 属性。删除表 test_skidx 中列 col1 的 Skip Index 属性。",
            "ALTER TABLE test_skidx MODIFY COLUMN col1 INT SKIP_INDEX();\n",
            "或",
            "ALTER TABLE test_skidx MODIFY COLUMN col1 INT;\n"
        ]
    },
    "ALTER TABLEGROUP": {
        "Title": [
            "ALTER TABLEGROUP"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053453"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "ALTER TABLEGROUP tablegroup_name ADD [TABLE] table_name [, table_name...];\nALTER TABLEGROUP tablegroup_name tablegroup_option;\n\ntablegroup_option:\n    SHARDING = 'NONE' | 'PARTITION' | 'ADAPTIVE'\n",
        "Description": [
            "该语句用于对一个表组增加多张表和修改表组的属性。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\ntablegroup_name\n表组名称。对一个表组增加多张表时，表与表之间以逗号（‘,’）分隔。当添加多个表时，允许表名重复。如果待添加的表已经属于待加入的表组，OceanBase 数据库不会报错。\n\n\nSHARDING\n表组的属性。如果不指定 SHARDING 属性，则默认创建 ADAPTIVE 的表组。SHARDING 取值如下： \n      \nNONE：对加入表组的表没有限制。\nPARTITION：加入表组的表对应的一级分区，需要与表组中所有表的一级分区的分区方式一致，包括分区类型、分区个数和分区 Value。\nADAPTIVE：加入表组的表对应的一级分区和二级分区，需要与表组中所有表的一级分区和二级分区的分区方式一致，包括分区类型、分区个数和分区 Value。\n相同的分区方式包括： \n      \n分区类型相同（例如都是 Hash+Range 分区）。\n如果是 Hash 分区，要求引用的列数相同，并且分区个数相同。\n如果是 Range 分区，要求引用的列数相同，并且分区数相同，Range 分割点相同。\n对于二级分区，根据其分区类型，要求和上述一致。\n\n\n"
        ],
        "Examples": [
            "obclient> CREATE TABLEGROUP tblgroup1 SHARDING = 'NONE';\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl1(col1 INT,col2 VARCHAR(50))\n    PARTITION BY LIST(col1) SUBPARTITION BY LIST COLUMNS(col2)\n      (PARTITION p0 VALUES in (01)\n         (SUBPARTITION mp0 VALUES in ('01'),\n          SUBPARTITION mp1 VALUES in ('02')),\n       PARTITION p1 VALUES in (02)\n          (SUBPARTITION mp3 VALUES in ('01'),\n           SUBPARTITION mp4 VALUES in ('02'))\n       );\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2(col1 INT,col2 VARCHAR(50))\n    PARTITION BY LIST(col1) SUBPARTITION BY LIST COLUMNS(col2)\n      (PARTITION p0 VALUES in (01)\n        (SUBPARTITION mp0 VALUES in ('01'),\n          SUBPARTITION mp1 VALUES in ('02')),\n       PARTITION p1 VALUES in (02)\n         (SUBPARTITION mp3 VALUES in ('01'),\n          SUBPARTITION mp4 VALUES in ('02'))\n       );\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLEGROUP tblgroup1 ADD tbl1,tbl2;\nQuery OK, 0 rows affected\n",
            "obclient> ALTER TABLEGROUP tblgroup1 SHARDING = 'PARTITION';\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLEGROUP tblgroup1 SHARDING = 'ADAPTIVE';\nQuery OK, 0 rows affected\n",
            "obclient> CREATE TABLEGROUP tblgroup2 SHARDING = 'NONE';\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl1 (col INT);\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2 (col1 BIGINT PRIMARY KEY,col2 VARCHAR(50))\n    PARTITION BY LIST(col1)\n      (PARTITION p0 VALUES IN (1, 2, 3),\n       PARTITION p1 VALUES IN (5, 6),\n       PARTITION p2 VALUES IN (DEFAULT)\n      );\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLEGROUP tblgroup2 ADD tbl1,tbl2;\nQuery OK, 0 rows affected\n",
            "obclient> ALTER TABLEGROUP tblgroup2 SHARDING = 'PARTITION';\nERROR 4179 (HY000): not all tables are non-partitioned or partitioned, modify tablegroup sharding attribute not allowed\n\nobclient> ALTER TABLEGROUP tblgroup2 SHARDING = 'ADAPTIVE';\nERROR 4179 (HY000): not all tables are non-partitioned or partitioned, modify tablegroup sharding attribute not allowed\n",
            "obclient> CREATE TABLEGROUP tblgroup3 SHARDING = 'NONE';\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl1(col1 INT,col2 VARCHAR(50))\n   PARTITION BY LIST(col1) SUBPARTITION BY LIST COLUMNS(col2)\n    (PARTITION p0 VALUES in (01)\n      (SUBPARTITION mp0 VALUES in ('01'),\n       SUBPARTITION mp1 VALUES in ('02'),\n       SUBPARTITION mp2 VALUES in ('03')\n       ),\n     PARTITION p1 VALUES in (02)\n       (SUBPARTITION mp3 VALUES in ('01'),\n        SUBPARTITION mp4 VALUES in ('02'),\n        SUBPARTITION mp5 VALUES in ('03'))\n     );\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2(col1 INT,col2 VARCHAR(50))\n   PARTITION BY LIST(col1) SUBPARTITION BY LIST COLUMNS(col2)\n    (PARTITION p0 VALUES in (01)\n      (SUBPARTITION mp0 VALUES in ('01'),\n       SUBPARTITION mp1 VALUES in ('02')),\n     PARTITION p1 VALUES in (02)\n      (SUBPARTITION mp3 VALUES in ('01'),\n       SUBPARTITION mp4 VALUES in ('02'))\n     );\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLEGROUP tblgroup3 ADD tbl1,tbl2;\nQuery OK, 0 rows affected\n",
            "obclient> ALTER TABLEGROUP tblgroup3 SHARDING = 'PARTITION';\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLEGROUP tblgroup3 SHARDING = 'ADAPTIVE';\nERROR 4179 (HY000): subpartition num not matched, modify tablegroup sharding attribute not allowed\n",
            "obclient> CREATE TABLEGROUP tblgroup4 SHARDING = 'ADAPTIVE';\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl1(col1 INT,col2 INT)\n    PARTITION BY RANGE(col1) SUBPARTITION BY RANGE(col2)\n      SUBPARTITION TEMPLATE\n       (SUBPARTITION mp0 VALUES LESS THAN(2020),\n        SUBPARTITION mp1 VALUES LESS THAN(2021),\n        SUBPARTITION mp2 VALUES LESS THAN(2022))\n       (PARTITION p0 VALUES LESS THAN(100),\n        PARTITION p1 VALUES LESS THAN(200));\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2(col1 INT,col2 INT)\n    PARTITION BY RANGE(col1) SUBPARTITION BY RANGE(col2)\n      SUBPARTITION TEMPLATE\n       (SUBPARTITION mp0 VALUES LESS THAN(2020),\n        SUBPARTITION mp1 VALUES LESS THAN(2021),\n        SUBPARTITION mp2 VALUES LESS THAN(2022))\n      (PARTITION p0 VALUES LESS THAN(100),\n       PARTITION p1 VALUES LESS THAN(200));\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLEGROUP tblgroup4 ADD tbl1,tbl2;\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLE tbl1\n    ADD PARTITION (PARTITION p3 VALUES LESS THAN(400),\n                   PARTITION p4 VALUES LESS THAN(500));\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLE tbl2 DROP SUBPARTITION p0smp0,p0smp1;\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl3(col1 INT,col2 INT)\n    PARTITION BY RANGE(col1) SUBPARTITION BY RANGE(col2)\n      SUBPARTITION TEMPLATE\n       (SUBPARTITION mp0 VALUES LESS THAN(2020),\n        SUBPARTITION mp1 VALUES LESS THAN(2021),\n        SUBPARTITION mp2 VALUES LESS THAN(2022))\n       (PARTITION p0 VALUES LESS THAN(100),\n        PARTITION p1 VALUES LESS THAN(200));\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLEGROUP tblgroup4 ADD tbl3;\nERROR 4179 (HY000): partition num not equal, add table to tablegroup not allowed\n"
        ],
        "Detailed Examples": [
            "创建名为 tblgroup1 的表组，其 SHARDING 属性为 NONE，并将分区表 tbl1 和分区表 tbl2 加入到表组中。",
            "obclient> CREATE TABLEGROUP tblgroup1 SHARDING = 'NONE';\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl1(col1 INT,col2 VARCHAR(50))\n    PARTITION BY LIST(col1) SUBPARTITION BY LIST COLUMNS(col2)\n      (PARTITION p0 VALUES in (01)\n         (SUBPARTITION mp0 VALUES in ('01'),\n          SUBPARTITION mp1 VALUES in ('02')),\n       PARTITION p1 VALUES in (02)\n          (SUBPARTITION mp3 VALUES in ('01'),\n           SUBPARTITION mp4 VALUES in ('02'))\n       );\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2(col1 INT,col2 VARCHAR(50))\n    PARTITION BY LIST(col1) SUBPARTITION BY LIST COLUMNS(col2)\n      (PARTITION p0 VALUES in (01)\n        (SUBPARTITION mp0 VALUES in ('01'),\n          SUBPARTITION mp1 VALUES in ('02')),\n       PARTITION p1 VALUES in (02)\n         (SUBPARTITION mp3 VALUES in ('01'),\n          SUBPARTITION mp4 VALUES in ('02'))\n       );\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLEGROUP tblgroup1 ADD tbl1,tbl2;\nQuery OK, 0 rows affected\n",
            "由于 tbl1 和 tbl2 的分区方式一致，所以 SHARDING 属性可以更改为 PARTITION 或 ADAPTIVE。",
            "obclient> ALTER TABLEGROUP tblgroup1 SHARDING = 'PARTITION';\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLEGROUP tblgroup1 SHARDING = 'ADAPTIVE';\nQuery OK, 0 rows affected\n",
            "创建名为 tblgroup2 的表组，其 SHARDING 属性为 NONE，向表组中添加非分区表 tbl1 和分区表 tbl2。",
            "obclient> CREATE TABLEGROUP tblgroup2 SHARDING = 'NONE';\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl1 (col INT);\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2 (col1 BIGINT PRIMARY KEY,col2 VARCHAR(50))\n    PARTITION BY LIST(col1)\n      (PARTITION p0 VALUES IN (1, 2, 3),\n       PARTITION p1 VALUES IN (5, 6),\n       PARTITION p2 VALUES IN (DEFAULT)\n      );\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLEGROUP tblgroup2 ADD tbl1,tbl2;\nQuery OK, 0 rows affected\n",
            "由于表组 tblgroup2 中包含非分区表和分区表，所以 SHARDING 属性不能更改为 PARTITION 或 ADAPTIVE。",
            "obclient> ALTER TABLEGROUP tblgroup2 SHARDING = 'PARTITION';\nERROR 4179 (HY000): not all tables are non-partitioned or partitioned, modify tablegroup sharding attribute not allowed\n\nobclient> ALTER TABLEGROUP tblgroup2 SHARDING = 'ADAPTIVE';\nERROR 4179 (HY000): not all tables are non-partitioned or partitioned, modify tablegroup sharding attribute not allowed\n",
            "创建名为 tblgroup3 的表组，其 SHARDING 属性为 NONE，向表组中添加分区表 tbl1 和分区表 tbl2。",
            "obclient> CREATE TABLEGROUP tblgroup3 SHARDING = 'NONE';\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl1(col1 INT,col2 VARCHAR(50))\n   PARTITION BY LIST(col1) SUBPARTITION BY LIST COLUMNS(col2)\n    (PARTITION p0 VALUES in (01)\n      (SUBPARTITION mp0 VALUES in ('01'),\n       SUBPARTITION mp1 VALUES in ('02'),\n       SUBPARTITION mp2 VALUES in ('03')\n       ),\n     PARTITION p1 VALUES in (02)\n       (SUBPARTITION mp3 VALUES in ('01'),\n        SUBPARTITION mp4 VALUES in ('02'),\n        SUBPARTITION mp5 VALUES in ('03'))\n     );\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2(col1 INT,col2 VARCHAR(50))\n   PARTITION BY LIST(col1) SUBPARTITION BY LIST COLUMNS(col2)\n    (PARTITION p0 VALUES in (01)\n      (SUBPARTITION mp0 VALUES in ('01'),\n       SUBPARTITION mp1 VALUES in ('02')),\n     PARTITION p1 VALUES in (02)\n      (SUBPARTITION mp3 VALUES in ('01'),\n       SUBPARTITION mp4 VALUES in ('02'))\n     );\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLEGROUP tblgroup3 ADD tbl1,tbl2;\nQuery OK, 0 rows affected\n",
            "由于表组 tblgroup3 中 tbl1 和 tbl2 的一级分区的分区类型相同，二级分区分区类型不同（二级分区个数不同），所以 SHARDING 属性可以更改为 PARTITION，但是不能更改为 ADAPTIVE。",
            "obclient> ALTER TABLEGROUP tblgroup3 SHARDING = 'PARTITION';\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLEGROUP tblgroup3 SHARDING = 'ADAPTIVE';\nERROR 4179 (HY000): subpartition num not matched, modify tablegroup sharding attribute not allowed\n",
            "创建名为 tblgroup4 的表组，其 SHARDING 属性为 ADAPTIVE，修改表组中表 tbl1 和表 tbl2 的分区个数，则表组中所有表此时分区方式不一致，表组中不能加入新的表 tbl3。",
            "obclient> CREATE TABLEGROUP tblgroup4 SHARDING = 'ADAPTIVE';\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl1(col1 INT,col2 INT)\n    PARTITION BY RANGE(col1) SUBPARTITION BY RANGE(col2)\n      SUBPARTITION TEMPLATE\n       (SUBPARTITION mp0 VALUES LESS THAN(2020),\n        SUBPARTITION mp1 VALUES LESS THAN(2021),\n        SUBPARTITION mp2 VALUES LESS THAN(2022))\n       (PARTITION p0 VALUES LESS THAN(100),\n        PARTITION p1 VALUES LESS THAN(200));\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2(col1 INT,col2 INT)\n    PARTITION BY RANGE(col1) SUBPARTITION BY RANGE(col2)\n      SUBPARTITION TEMPLATE\n       (SUBPARTITION mp0 VALUES LESS THAN(2020),\n        SUBPARTITION mp1 VALUES LESS THAN(2021),\n        SUBPARTITION mp2 VALUES LESS THAN(2022))\n      (PARTITION p0 VALUES LESS THAN(100),\n       PARTITION p1 VALUES LESS THAN(200));\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLEGROUP tblgroup4 ADD tbl1,tbl2;\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLE tbl1\n    ADD PARTITION (PARTITION p3 VALUES LESS THAN(400),\n                   PARTITION p4 VALUES LESS THAN(500));\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLE tbl2 DROP SUBPARTITION p0smp0,p0smp1;\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl3(col1 INT,col2 INT)\n    PARTITION BY RANGE(col1) SUBPARTITION BY RANGE(col2)\n      SUBPARTITION TEMPLATE\n       (SUBPARTITION mp0 VALUES LESS THAN(2020),\n        SUBPARTITION mp1 VALUES LESS THAN(2021),\n        SUBPARTITION mp2 VALUES LESS THAN(2022))\n       (PARTITION p0 VALUES LESS THAN(100),\n        PARTITION p1 VALUES LESS THAN(200));\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLEGROUP tblgroup4 ADD tbl3;\nERROR 4179 (HY000): partition num not equal, add table to tablegroup not allowed\n"
        ]
    },
    "ALTER TABLESPACE": {
        "Title": [
            "ALTER TABLESPACE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053476"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "ALTER TABLESPACE tablespace_name ENCRYPTION [=] 'tablespace_encryption_option';\n\ntablespace_encryption_option:\n    N\n    | Y\n    | AES-256\n    | AES-256-GCM\n    | AES-128\n    | AES-128-GCM\n    | AES-192\n    | AES-192-GCM\n    | SM4-CBC\n    | SM4-GCM\nALTER TABLESPACE tablespace_name\n  {ADD | DROP} DATAFILE 'file_name'\n  [INITIAL_SIZE [=] size]\n  [WAIT]\n  ENGINE [=] engine_name\n",
        "Description": [
            "该语句用来修改 TableSpace（表空间）加密方式。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\ntablespace_name\n指定要修改的 TableSpace 对象名称。\n\n\ntablespace_encryption_option\n指定要修改的 TableSpace 对象加密所使用的加密算法。加密算法的详细介绍，请参见下文 tablespace_encryption_option。\n\n\n",
            "tablespace_encryption_option",
            "N",
            "：表示不加密。",
            "Y",
            "：如果使用 ",
            "Y",
            "，则表示默认使用 ",
            "AES-256",
            "。",
            "AES-256",
            "：使用 256 位密钥进行加密和解密。",
            "AES-256-GCM",
            "：使用 256 位密钥的 GCM 模式。",
            "AES-128",
            "：使用 128 位密钥进行加密和解密。",
            "AES-128-GCM",
            "：使用 128 位密钥的 GCM 模式。",
            "AES-192",
            "：使用 192 位密钥进行加密和解密。",
            "AES-192-GCM",
            "：使用 192 位密钥的 GCM 模式。",
            "SM4-CBC",
            "：SM4 算法采用 CBC 模式，其中每个数据块都与前一个块加密后的输出进行异或操作再进行加密。",
            "SM4-GCM",
            "：SM4 算法采用 GCM 模式，此模式下 SM4 同时提供了数据加密和认证功能。",
            "\n说明\n\n\nAES (Advanced Encryption Standard) 是一个对称加密算法，意味着相同的密钥用于加密和解密数据。AES 算法本身是基于区块加密的，通常以 128 位的区块对数据进行加密。\nAES-GCM (Galois/Counter Mode) 是一种操作模式，用于对区块加密算法（如 AES）进行处理，提供加密和数据认证（也称为消息认证码）。\nSM4 算法的区块长度是 128 位，密钥长度也是 128 位。\n\n\n"
        ],
        "Examples": [
            "ALTER TABLESPACE tablespace001 ENCRYPTION = 'SM4-GCM';\n"
        ],
        "Detailed Examples": [
            "将未加密的 TableSpace 对象 tablespace001 修改为使用 SM4-GCM 加密算法。",
            "ALTER TABLESPACE tablespace001 ENCRYPTION = 'SM4-GCM';\n"
        ]
    },
    "ALTER USER": {
        "Title": [
            "ALTER USER"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053462"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "ALTER USER 'user_name' IDENTIFIED BY 'password';\nALTER USER 'user_name' [ACCOUNT LOCK | ACCOUNT UNLOCK];\nALTER USER user_name DEFAULT ROLE {NONE | ALL | role_name [, role_name ...]};\n",
        "Description": [
            "该语句主要用于执行以下操作：",
            "修改 OceanBase 数据库用户的密码。",
            "锁定或者解锁用户，且被锁定的用户不允许登录数据库。",
            "\n说明\n除了修改当前用户的口令之外，必须拥有 CREATE USER 的权限，才可以执行本命令。\n",
            "设置用户在登录时默认激活的角色。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nuser_name\n指定用户名称。\n\n\npassword\n指定新密码。\n\n\nACCOUNT LOCK\n指定锁定用户。\n\n\nACCOUNT UNLOCK\n指定解锁用户。\n\n\nNONE\n指定停用用户被授予的所有角色。\n\n\nALL\n指定激活用户下所有的角色。\n\n\nrole_name\n指定角色的名称，激活多个角色时，角色名用英文逗号（,）隔开。\n\n\n"
        ],
        "Examples": [
            "obclient> ALTER USER 'sqluser01' IDENTIFIED BY '******';\n",
            "obclient> ALTER USER 'obsqluser01' ACCOUNT LOCK;\n",
            "obclient> ALTER USER 'obsqluser01' ACCOUNT UNLOCK;\n",
            "ALTER USER user001 DEFAULT ROLE role001, role002;\n"
        ],
        "Detailed Examples": [
            "执行以下命令将用户 sqluser01 的密码修改为 ******。",
            "obclient> ALTER USER 'sqluser01' IDENTIFIED BY '******';\n",
            "锁定用户 obsqluser01。",
            "obclient> ALTER USER 'obsqluser01' ACCOUNT LOCK;\n",
            "解锁用户 obsqluser01。",
            "obclient> ALTER USER 'obsqluser01' ACCOUNT UNLOCK;\n",
            "指定用户 user001 在登录时，默认激活用户被授予的 role001 和 role002 角色。",
            "ALTER USER user001 DEFAULT ROLE role001, role002;\n"
        ]
    },
    "ALTER VIEW": {
        "Title": [
            "ALTER VIEW"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053498"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "ALTER VIEW view_name [(column_name_list)] AS select_stmt;\n\ncolumn_name_list:\n    column_name [, column_name ...]\n",
        "Description": [
            "该语句用于修改视图的定义。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nselect_stmt\n是一种 SELECT 语句。它给出了视图的定义。该语句可以从基表或其他视图进行选择。\n\n\ncolumn_name_list\n视图必须具有唯一的列名，不得有重复，就像基表那样。缺省情况下，由 SELECT 语句检索的列名将用作视图列名。要想为视图列定义明确的名称，可使用可选的 column_name_list 子句，列出由逗号隔开的 ID。column_name_list 中的名称数目必须等于 SELECT语句检索的列数。SELECT 语句检索的列可以是对表列的简单引用。也可以是使用函数、常量值、操作符等的表达式。\n\n\n"
        ],
        "Examples": [
            "obclient> SHOW CREATE VIEW v1;\n+------+-----------------------------------------------------------------------------------------------+----------------------+----------------------+\n| View | Create View                                                                                   | character_set_client | collation_connection |\n+------+-----------------------------------------------------------------------------------------------+----------------------+----------------------+\n| v1   | CREATE VIEW `v1` AS select `test`.`T1`.`c1` AS `d1`,`test`.`T1`.`c2` AS `d2` from `test`.`T1` | utf8mb4              | utf8mb4_general_ci   |\n+------+-----------------------------------------------------------------------------------------------+----------------------+----------------------+\n1 row in set\n\nobclient> ALTER VIEW v1 AS SELECT * FROM t2;\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "将视图 v1 的定义修改为选择 t2 中的数据。",
            "obclient> SHOW CREATE VIEW v1;\n+------+-----------------------------------------------------------------------------------------------+----------------------+----------------------+\n| View | Create View                                                                                   | character_set_client | collation_connection |\n+------+-----------------------------------------------------------------------------------------------+----------------------+----------------------+\n| v1   | CREATE VIEW `v1` AS select `test`.`T1`.`c1` AS `d1`,`test`.`T1`.`c2` AS `d2` from `test`.`T1` | utf8mb4              | utf8mb4_general_ci   |\n+------+-----------------------------------------------------------------------------------------------+----------------------+----------------------+\n1 row in set\n\nobclient> ALTER VIEW v1 AS SELECT * FROM t2;\nQuery OK, 0 rows affected\n"
        ]
    },
    "ANALYZE": {
        "Title": [
            "ANALYZE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053518"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "ANALYZE TABLE table_name UPDATE HISTOGRAM ON column_name_list WITH INT_NUM BUCKETS;\nANALYZE TABLE table_name [use_partition] COMPUTE STATISTICS [ for_clause ];\n\nuse_partition:\n    PARTITION (parition_name [,partition_name,....])\n   | SUBPARTITION(subpartition_name, [,subpartition_name,...])\n\nanalyze_statistics_clause:\n    COMPUTE STATISTICS [analyze_for_clause]\n    | ESTIMATE STATISTICS [analyze_for_clause] [SAMPLE INTNUM {ROWS | PERCENTAGE}]\n\nanalyze_for_clause:\n    FOR TABLE\n    | FOR ALL [INDEXED | HIDDEN] COLUMNS [size_clause]\n    | FOR COLUMNS [size clause] column [size_clause] [,column [size_clause]...]\n\nsize_clause:\n    SIZE integer\n    | SIZE REPEAT\n    | SIZE AUTO\n    | SIZE SKEWONLY\n\ncolumn:\n    column_name\n    | (column_name [, column_name])\n\n",
        "Description": [
            "该语句用于收集表或表分区的统计信息。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\ntable_name\n指定要分析的表。\n\n\nINT_NUM\n整数，即 Buckets 的个数。有关 Buckets 的取值，请参见 method_opt。\n\n\nuse_partition\n指定分区名，如果指定为表名，则不收集分区统计信息。\n\n\ncompute_statistics_clause\n指定 COMPUTE STATISTICS 可以计算分析对象的精确统计信息，并将其存储在数据字典中。分析表时，会同时统计表和列的统计信息。\n\n\nfor_clause\n指定要分析整个表，或者只分析特定的列。 \n      \nFOR TABLE：指定仅收集表的统计信息。\nFOR COLUMNS：指定仅收集指定列和标量对象属性列的统计信息。其中，attribute 指定对象中的特定列名。\nFOR ALL COLUMNS：指定收集所有列和标量对象属性列的统计信息。\nFOR ALL INDEXED COLUMNS：指定收集所有索引列的列统计信息。列统计信息可以基于完整的列，也可以通过指定 SIZE 使用直方图。\nFOR ALL HIDDEN COLUMNS：指定收集所有隐藏列的列统计信息。列统计信息可以基于完整的列，也可以通过指定 SIZE 使用直方图。\nSIZE：指定直方图中的最大存储桶数。取值范围是 [1,2048]，默认值是 256。\n\n\n\nestimate_statistics_clause\n指定 ESTIMATE STATISTICS 可以估计分析对象的统计信息，并将其存储在数据字典中。\n\n\nSAMPLE\n指定用于估计统计信息使用的分析对象中的采样数据量。如果省略该参数，则会根据数据库优化器自动选择一个合适的比例进行采样。 \n      \nROWS：对表中的 integer 行进行采样。\nPERCENT：对表中行的 integer 百分比进行采样。\n\n\n\n"
        ],
        "Examples": [
            "obclient> CREATE TABLE test (c1 NUMBER(30) PRIMARY KEY,c2 VARCHAR(50));\nQuery OK, 0 rows affected\n\nobclient> ANALYZE TABLE test UPDATE HISTOGRAM ON c1,c2 with 30 buckets;\nQuery OK, 0 rows affected\n",
            "obclient> ALTER SYSTEM SET enable_sql_extension = TRUE;\nQuery OK, 0 rows affected\n\nobclient> ANALYZE TABLE test COMPUTE STATISTICS FOR ALL COLUMNS SIZE 128;\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "收集 ",
            "test",
            " 表的统计信息，列的桶个数为 30 个。",
            "obclient> CREATE TABLE test (c1 NUMBER(30) PRIMARY KEY,c2 VARCHAR(50));\nQuery OK, 0 rows affected\n\nobclient> ANALYZE TABLE test UPDATE HISTOGRAM ON c1,c2 with 30 buckets;\nQuery OK, 0 rows affected\n",
            "当 Session 变量 ",
            "enable_sql_extension",
            " 为 ",
            "TRUE",
            " 的时候，使用 Oracle 模式下的语法收集用户 ",
            "user01",
            " 的表 ",
            "test",
            " 的统计信息，所有列的桶个数设定为 128。",
            "obclient> ALTER SYSTEM SET enable_sql_extension = TRUE;\nQuery OK, 0 rows affected\n\nobclient> ANALYZE TABLE test COMPUTE STATISTICS FOR ALL COLUMNS SIZE 128;\nQuery OK, 0 rows affected\n"
        ]
    },
    "CREATE DATABASE LINK": {
        "Title": [
            "CREATE DATABASE LINK"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053486"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "CREATE DATABASE LINK [IF NOT EXISTS] dblink_name CONNECT TO user_name@tenant_name DATABASE database_name IDENTIFIED BY password HOST 'ip:port' [CLUSTER cluster_name];\n",
        "Description": [
            "该语句用于创建一个访问指定远端数据库的 dblink。该语句中需要指定 dblink 名称并且提供远端数据库的用户名称、租户名称、数据库名称、密码、IP 地址、端口号以及集群名称。",
            "在 OceanBase 数据库的 MySQL 模式下，当前仅支持创建本地 OceanBase 集群的 MySQL 租户读取远端的 OceanBase 集群的 MySQL 租户的数据，同一集群下不同 MySQL 租户之间也可以创建 dblink。暂不支持 OceanBase 集群的 MySQL 租户读取原生 MySQL 数据，或者原生 MySQL 读取 OceanBase 集群的 MySQL 租户数据。",
            "OceanBase 数据库的 MySQL 模式下的 dblink 支持如下数据类型的读取。",
            "数值类型：TINYINT、SMALLINT、MEDIUMINT、INT、BIGINT、FLOAT、DOUBLE、DECIMAL。",
            "时间类型：DATE、TIME、YEAR、DATETIME、TIMESTAMP。",
            "字符类型：CHAR、VARCHAR、TINYBLOB、TINYTEXT、BLOB、TEXT、MEDIUMTEXT、LONGBLOB、LONGTEXT。",
            "其他类型：ENUM、SET。"
        ],
        "Illustration": [
            "\n\n\n字段\n描述\n\n\n\n\ndblink_name\n指定要访问的数据库链接的名称。\n\n\nIF NOT EXISTS\n如果指定 IF NOT EXISTS，即使待创建的 dblink 已存在，也不会报错；如果不指定且待创建的 dblink 已存在，则系统会报错。\n\n\nuser_name\n指定远端数据库的用户名称。\n\n\ntenant_name\n指定远端数据库的租户名称。\n\n\npassword\n指定远端数据库的用户名的登录密码。密码里有如有除数字、字母以外的特殊字符（~!@#%^&*_-+=|(){}[]:;,.?/ ）时，需要使用单引号或者双引号把密码括起来，避免报语法错误。\n\n\ndatabase_name\n远端 MySQL 租户的数据库名。通过 dblink 读取数据时，默认访问该数据库，如果需要访问其他数据库可以在 SQL 语句中为表指定特定的数据库。\n\n\nip\n指定远端数据库的 IP 地址。IP 地址可以指定为集群的 Proxy 的 IP 地址，或者集群中某个 OBServer 节点的 IP 地址。如果指定为 OBServer 节点的 IP 地址，则要求本地数据库和指定 OBServer 节点之间的网络是可以互通的。\n\n\nport\n指定远端数据库的端口号。端口号可以指定为集群的 Proxy 的端口号，或者集群中某个 OBServer 节点的端口号。如果指定为 OBServer 的端口号，则要求本地数据库和指定 OBServer 节点之间的网络是可以互通的。\n\n\ncluster_name\n指定远端 OceanBase 集群的名称。只有 IP 和端口号是属于 Proxy 的，并且 Proxy 是在由 ConfigUrl 部署时才需要指定集群名字。集群名字是大小写敏感的，需要使用双引号括起来。\n\n\n"
        ],
        "Examples": [
            "obclient> CREATE DATABASE LINK IF NOT EXISTS ob_dblink  CONNECT TO user1@mysql DATABASE test IDENTIFIED BY '******' HOST 'xx.xx.xx.xx:xx';\nQuery OK, 1 row affected\n",
            "obclient> CREATE DATABASE LINK IF NOT EXISTS  ob_dblink_proxy CONNECT TO user1@mysql DATABASE test IDENTIFIED BY '******' HOST 'xx.xx.xx.xx:xx' CLUSTER \"obcluster\";\nQuery OK, 1 row affected\n"
        ],
        "Detailed Examples": [
            "创建连接到远端 OceanBase 集群某个 OBServer 节点的 dblink，名称为 ob_dblink。远端数据库的租户为 mysql（可以指定任意 MySQL 租户），用户为 user1，数据库为 test。用户按照实际环境指定密码、IP 地址和端口号即可。",
            "obclient> CREATE DATABASE LINK IF NOT EXISTS ob_dblink  CONNECT TO user1@mysql DATABASE test IDENTIFIED BY '******' HOST 'xx.xx.xx.xx:xx';\nQuery OK, 1 row affected\n",
            "创建连接到远端 OceanBase 集群的 dblink，名称为 ob_dblink_proxy。远端数据库的租户为默认的 mysql（可以指定任意 MySQL 租户），用户为 user1，数据库为 test。用户按照实际环境指定密码、IP 地址和端口号即可。",
            "obclient> CREATE DATABASE LINK IF NOT EXISTS  ob_dblink_proxy CONNECT TO user1@mysql DATABASE test IDENTIFIED BY '******' HOST 'xx.xx.xx.xx:xx' CLUSTER \"obcluster\";\nQuery OK, 1 row affected\n",
            "创建好 dblink 后，就可以对其进行查询和删除操作了。详细信息请参见 SELECT。",
            "用户可以通过视图 oceanbase.DBA_DB_LINKS 查询所创建的 dblink 信息。详细信息请参见 DBA_DB_LINKS;"
        ]
    },
    "CREATE DATABASE": {
        "Title": [
            "CREATE DATABASE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053515"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "CREATE {DATABASE | SCHEMA} [IF NOT EXISTS] database_name [database_option...]\n\ndatabase_option:  \n      [DEFAULT] {CHARACTER SET | CHARSET} charset_name \n    | [DEFAULT] COLLATE collate_name \n    | {READ ONLY | READ WRITE} \n    | [DEFAULT] TABLEGROUP {table_group_name | NULL}\n",
        "Description": [
            "该语句用于创建数据库，并可以指定数据库的默认属性（如数据库默认字符集，校验规则等）。",
            "\n说明\nCREATE DATABASE 与 CREATE SCHEMA 是等价的。\n"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nIF NOT EXISTS\n用于指示如果数据库已经存在，则不进行创建。创建数据库时，如果数据库存在且没有指定 IF NOT EXISTS，则会报错。\n\n\ndatabase_name\n指定待创建的数据库名称。\n\n\n[DEFAULT] {CHARACTER SET\nCHARSET} charset_name\n设置数据库的字符集（charset）。\n\n\n[DEFAULT] COLLATE collate_name\n设置数据库的校对规则（collation）。\n\n\n{READ ONLY\nREAD WRITE}\n指定数据库的读写属性。 \n      \nREAD ONLY：将数据库设置为只读模式，禁止对数据库进行写操作。\nREAD WRITE：将数据库设置为读写模式，允许对数据库进行读写操作。\n\n\n\n[DEFAULT] TABLEGROUP {table_group_name\nNULL}\n指定数据库的默认表组（tablegroup）。您可将其设置为指定的表组名称或取消数据库默认表组。\n\n\n"
        ],
        "Examples": [
            "obclient> CREATE DATABASE IF NOT EXISTS test1 DEFAULT CHARACTER SET utf8;\n",
            "obclient> CREATE DATABASE test2 READ WRITE;\n"
        ],
        "Detailed Examples": [
            "创建数据库 test1，并指定字符集为 UTF-8。",
            "obclient> CREATE DATABASE IF NOT EXISTS test1 DEFAULT CHARACTER SET utf8;\n",
            "创建读写属性的数据库 test2。",
            "obclient> CREATE DATABASE test2 READ WRITE;\n"
        ]
    },
    "CREATE EXTERNAL TABLE": {
        "Title": [
            "CREATE EXTERNAL TABLE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053494"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "CREATE EXTERNAL TABLE <table_name>\n    ( [ <column_name> <column_type> [AS <expr>] ]\n      [ , <column_name> <column_type> [AS <expr>] ]\n      [ , ... ] )\n    LOCATION = '<string>'\n    formatTypeOptions\n    [ PARTITION BY ( <column_name> [, <column_name> ... ] ) ]\n    [ PARTITION_TYPE = USER_SPECIFIED ]\n    [ PATTERN = '<regex_pattern>' ]\n    [AUTO_REFRESH = 'xx']\nformatTypeOptions:\n    FORMAT = (\n      TYPE = 'CSV'\n      LINE_DELIMITER = '<string>' | <expr>\n      FIELD_DELIMITER = '<string>' | <expr>\n      ESCAPE = '<character>' | <expr>\n      FIELD_OPTIONALLY_ENCLOSED_BY = '<character>' | <expr>\n      ENCODING = 'charset'\n      NULL_IF = ('<string>' | <expr>, '<string>' | <expr> ...)\n      SKIP_HEADER = <int>\n      SKIP_BLANK_LINES = { TRUE | FALSE }\n      TRIM_SPACE = { TRUE | FALSE }\n      EMPTY_FIELD_AS_NULL = { TRUE | FALSE }\n    )\n    | FORMAT = (TYPE = 'PARQUET')\n",
        "Description": [
            "该语句用来在数据库中创建一张新的外表。",
            "外表是数据库管理系统中的一项关键功能，通常数据库中的表存放于数据库的存储空间中，而外表的数据存储于外部存储服务中。",
            "创建外表时需要定义数据的文件路径和文件格式，之后用户可以通过外表从外部存储服务中读取文件的数据。外表是只读的，可以在查询语句使用，但是不能执行 DML 操作。外表不支持定义约束和创建索引。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\ntable_name\n要创建的外表的名称。\n\n\ncolumn_name\n外表的列名称。默认情况下，文件中的数据列和外表定义的列是自动按顺序对应起来的。\n\n\ncolumn_type\n定义外表的列类型，但是不能定义约束（例如，DEFAULT、NOT NULL、UNIQUE、CHECK、PRIMARY KEY、FOREIGN KEY 等）。\n\n\nAS \n用于手动指定列映射。当文件中的列顺序与外表的列所定义顺序不一致时，可以通过 metadata$filecol{N} 所表示的伪列来指定外表的列与文件中的第 N 列的对应关系。例如，c2 INT AS (metadata$filecol4) 表示外表的 c2 列对应文件中的第 4 列。需要注意的是，如果指定了手动列映射，那么自动映射关系将会失效，而且所有的列都需要手动定义映射关系。\n\n\nLOCATION\n指定外表文件存放的路径。通常外表的数据文件存放于单独一个目录中，文件夹中可以包含子目录，在创建表时，外表会自动收集该目录中的所有文件。 \n      \n本地 LOCATION 格式为 LOCATION = '[file://] local_file_path'，其中 local_file_path 可以为相对路径，也可以为绝对路径。如果填写的是相对路径，则当前目录必须为 OceanBase 数据库的安装目录；secure_file_priv 用于配置 OBServer 节点有权限访问的文件路径。local_file_path 只能是 secure_file_priv 路径的子路径。\n远程 LOCATION 格式为 LOCATION = '{oss\\|cos\\|s3}://$ACCESS_ID:$ACCESS_KEY@$HOST/remote_file_path'，其中 $ACCESS_ID、$ACCESS_KEY 和 $HOST 是访问 OSS、COS 和 S3 时需要配置的访问信息，这些敏感的访问信息会以加密的方式存放在数据库的系统表中。\n\n\n\nFORMAT = ( TYPE = ‘CSV’… )\n指定外部文件的格式为 CSV 类型。LINE_DELIMITER：指定 CSV 文件的行分隔符。默认值为 LINE_DELIMITER='\\n'FIELD_DELIMITER：指定 CSV 文件的列分隔符。默认值为 FIELD_DELIMITER='\\t'。ESCAPE：指定 CSV 文件的转义符号，只能为 1 个字节。默认值为 ESCAPE ='\\'。FIELD_OPTIONALLY_ENCLOSED_BY：指定 CSV 文件中包裹字段值的符号。默认值为空。ENCODING：指定文件的字符集编码格式，当前 MySQL 模式支持的所有字符集请参见 字符集。如果不指定，默认值为 UTF8MB4。NULL_IF：指定被当作 NULL 处理的字符串。默认值为空。SKIP_HEADER：跳过文件头，并指定跳过的行数。SKIP_BLANK_LINES：指定是否跳过空白行。默认值为 FALSE，表示不跳过空白的行。TRIM_SPACE：指定是否删除文件中字段的头部和尾部空格。默认值为 FALSE，表示不删除文件中字段头尾的空格。EMPTY_FIELD_AS_NULL：指定是否将空字符串当作 NULL 处理。默认值为 FALSE，表示不将空字符串当做 NULL 处理。\n\n\nFORMAT = ( TYPE = ‘PARQUET’… )\n指定外部文件的格式为 PARQUET 类型。\n\n\nPATTERN\n指定一个正则模式串，用于过滤 LOCATION 目录下的文件。对于每个 LOCATION 目录下的文件路径，如果能够匹配该模式串，外表会访问这个文件，否则外表会跳过这个文件。如果不指定该参数，则默认可以访问 LOCATION 目录下的所有文件。外表会将LOCATION 指定路径下满足 PATTERN 的文件列表保存在数据库系统表中，外表扫描时会根据这个列表来访问外部的文件。\n\n\nPARTITION_TYPE = USER_SPECIFIED\n当您需要自己手动添加和删除分区，而不是让外表自动管理分区时，需要指定 PARTITION_TYPE = USER_SPECIFIED 字段。\n\n\nAUTO_REFRESH = ‘xx’\n用于外表自动刷新，目前有三个取值。OFF：默认值，表示关闭自动刷新。INTERVAL：让该外表可以通过 dbms_external_table 来管理自动刷新规则。IMMEDIATE：代表每次 SQL 访问外表时，需要去刷新一次该 SQL 相关的外表 META。\n\n\n"
        ],
        "Examples": [
            "obclient> SET GLOBAL secure_file_priv = \"\"\nQuery OK, 0 rows affected\nobclinet> \\q\nBye\n",
            "1,'Dave','Smith','dsmith@outlook.com','friend',32\n2,'Xena','Johnson','xjonson@outlook.com','contact',45\n3,'Fred','Jackon','fjackson@outlook.com','co-worker',19\n4,'Alma','Tyler','atyler@outlook.com','friend',53\n",
            "obclient> CREATE EXTERNAL TABLE contacts (\n    id    INT,\n    firstname  VARCHAR(100),\n    lastname   VARCHAR(100),\n    email      VARCHAR(255),\n    category   CHAR(30),\n    age        NUMBER\n   )\n   LOCATION = '/home/admin/test'\n   FORMAT = (\n     TYPE = 'CSV'\n     FIELD_DELIMITER = ','\n     FIELD_OPTIONALLY_ENCLOSED_BY ='\\''\n    )\n  PATTERN = 'extdata.csv';\n",
            "obclient> SELECT * FROM contacts;\n+----+-----------+----------+----------------------+-----------+------+\n| id | firstname | lastname | email                | category  | age  |\n+----+-----------+----------+----------------------+-----------+------+\n|  1 | Dave      | Smith    | dsmith@outlook.com   | friend    |   32 |\n|  2 | Xena      | Johnson  | xjonson@outlook.com  | contact   |   45 |\n|  3 | Fred      | Jackon   | fjackson@outlook.com | co-worker |   19 |\n|  4 | Alma      | Tyler    | atyler@outlook.com   | friend    |   53 |\n+----+-----------+----------+----------------------+-----------+------+\n4 rows in set  \n"
        ],
        "Detailed Examples": [
            "准备数据。首先需要设置 secure_file_priv 的路径为 /home/admin/，将要导入的外表数据所对应的 CSV 文件 extdata.csv 放在当前本地连接的 OBServer 节点的 /home/admin/test 路径中。",
            "设置全局安全路径的示例如下。",
            "obclient> SET GLOBAL secure_file_priv = \"\"\nQuery OK, 0 rows affected\nobclinet> \\q\nBye\n",
            "\n说明\n由于 secure_file_priv 是 GLOBAL 变量，所以需要执行 \\q 退出使之生效。\n",
            "CSV 文件中的内容如下：",
            "1,'Dave','Smith','dsmith@outlook.com','friend',32\n2,'Xena','Johnson','xjonson@outlook.com','contact',45\n3,'Fred','Jackon','fjackson@outlook.com','co-worker',19\n4,'Alma','Tyler','atyler@outlook.com','friend',53\n",
            "用户租户登陆数据库后，创建外表 contacts。",
            "obclient> CREATE EXTERNAL TABLE contacts (\n    id    INT,\n    firstname  VARCHAR(100),\n    lastname   VARCHAR(100),\n    email      VARCHAR(255),\n    category   CHAR(30),\n    age        NUMBER\n   )\n   LOCATION = '/home/admin/test'\n   FORMAT = (\n     TYPE = 'CSV'\n     FIELD_DELIMITER = ','\n     FIELD_OPTIONALLY_ENCLOSED_BY ='\\''\n    )\n  PATTERN = 'extdata.csv';\n",
            "查询外表 contacts 中的数据。",
            "obclient> SELECT * FROM contacts;\n+----+-----------+----------+----------------------+-----------+------+\n| id | firstname | lastname | email                | category  | age  |\n+----+-----------+----------+----------------------+-----------+------+\n|  1 | Dave      | Smith    | dsmith@outlook.com   | friend    |   32 |\n|  2 | Xena      | Johnson  | xjonson@outlook.com  | contact   |   45 |\n|  3 | Fred      | Jackon   | fjackson@outlook.com | co-worker |   19 |\n|  4 | Alma      | Tyler    | atyler@outlook.com   | friend    |   53 |\n+----+-----------+----------+----------------------+-----------+------+\n4 rows in set  \n"
        ]
    },
    "CREATE INDEX": {
        "Title": [
            "CREATE INDEX"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053496"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "CREATE [hint_options] [SPATIAL | UNIQUE] INDEX [IF NOT EXISTS] index_name \n    [USING BTREE] ON table_name (sort_column_key [, sort_column_key... ]) \n    [index_option...] [partition_option] [index_column_group_option]\n\nsort_column_key:\n      column_name [(integer)] [ASC] [ID id]\n    | (index_expr) [ASC] [ID id]\n\nindex_option:  \n      GLOBAL \n    | LOCAL \n    | BLOCK_SIZE integer \n    | COMMENT STRING_VALUE \n    | STORING (column_name [, column_name...]) \n    | WITH_ROWID \n    | WITH PARSER STRING_VALUE \n    | index_using_algorithm \n    | visibility_option \n    | DATA_TABLE_ID data_table_id \n    | INDEX_TABLE_ID index_table_id \n    | VIRTUAL_COLUMN_ID virtual_column_id \n    | MAX_USED_PART_ID used_part_id \n\nindex_column_group_option：\n    WITH COLUMN GROUP([all columns, ]each column)\n",
        "Description": [
            "该语句用来创建索引。索引是创建在表上的，对数据库表中一列或多列的值进行排序的一种结构。其作用主要在于提高查询的速度，降低数据库系统的性能开销。",
            "OceanBase 数据库当前版本支持的索引类型包含唯一索引和非唯一索引，创建索引时可以通过 STORING(column_name,...) 指定索引表上的冗余列。索引表的冗余列除了包含用户指定添加的列外，还会自动添加上主键表的主键列（如果无主键表则包含 Hidden PK），存储额外的列在索引中可以为数据库优化器提供更多的选择。",
            "\n说明\n在 OceanBase 数据库 MySQL 模式下，如果删除表中的所有索引列，则所创建的索引失效。\n"
        ],
        "Illustration": [
            "\n\n\n参数项\n描述\n\n\n\n\nhint_options\n指定 Hint 选项，为可选项。目前仅支持使用 parallel，如 /*+ parallel(10) */。\n\n\n[SPATIAL | UNIQUE]\n可选项，指定索引的类型。 \n      \nSPATIAL 关键字用于创建空间索引。\nUNIQUE 关键字用于创建唯一索引。\n\n\n\nIF NOT EXISTS\n用于指示如果索引已经存在，则不进行创建。创建索引时，如果索引存在且没有指定 IF NOT EXISTS，则会报错。\n\n\nindex_name\n指定待创建的索引名称。\n\n\nUSING BTREE\n可选项，表示创建索引时使用 B-tree 索引结构。 \n      \n说明\n目前仅支持指定为 USING BTREE。\n\n\n\ntable_name\n指定要在其上创建索引的表，可以直接指定表的名字，也可使用 schema_name.table_name 格式指定表名和表所属的数据库名。\n\n\nsort_column_key\n指定一个排序列的键，创建索引时可以指定多个排序列，多个排序列使用英文逗号（,）分开，详细介绍可参见下文 sort_column_key。\n\n\nindex_option\n指定索引选项，创建索引时可以指定多个索引选项，多个索引选项使用英文空格分开，详细介绍可参见下文 index_option。\n\n\npartition_option\n指定创建索引分区的选项，支持指定哈希分区、键分区、范围分区、列表分区以及外部表分区。\n\n\nindex_column_group_option\n指定索引选项。详细介绍可参见下文 index_column_group_option。\n\n\n",
            "sort_column_key",
            "column_name [(integer)] [ASC] [ID id]：表示指定一个列名作为排序键。",
            "\ncolumn_name：表示要排序的列名。\ninteger：可选项，表示排序键的长度限制。\nASC：可选项，表示按升序排序，目前暂不支持降序（DESC）排列。\nID id：可选项，表示排序键的 ID 号。\n",
            "例如，在名为 t3 的表上创建一个名为 index3 的索引，并指定该索引在 c1 列上按升序进行排序。",
            "CREATE INDEX index3 ON t3 (c1 ASC);\n",
            "column_name：表示要排序的列名。",
            "integer：可选项，表示排序键的长度限制。",
            "ASC：可选项，表示按升序排序，目前暂不支持降序（DESC）排列。",
            "ID id：可选项，表示排序键的 ID 号。",
            "(index_expr) [ASC] [ID id]：表示指定一个索引表达式作为排序键。索引表达式可以使用表达式或函数来定义。它可以包含以下选项：",
            "\n(index_expr)：表示索引表达式，且允许是布尔表达式，例如 c1=c1。OceanBase 数据库当前版本禁止创建生成列上的函数索引。函数索引所支持的表达式参见 函数索引支持的系统函数列表。\nASC：可选项，表示按升序排序，目前暂不支持降序（DESC）排列。\nID id：可选项，表示排序键的 ID 号。\n",
            "例如，在名为 t4 的表上创建一个名为 index4 的索引，指定 c1+c2 作为索引表达式，并按升序进行排序。",
            "CREATE INDEX index4 ON t4 ((c1 + c2) ASC);\n",
            "(index_expr)：表示索引表达式，且允许是布尔表达式，例如 c1=c1。OceanBase 数据库当前版本禁止创建生成列上的函数索引。函数索引所支持的表达式参见 函数索引支持的系统函数列表。",
            "ASC：可选项，表示按升序排序，目前暂不支持降序（DESC）排列。",
            "ID id：可选项，表示排序键的 ID 号。",
            "创建索引时可指定多个排序列，多个排序列使用英文逗号(,)分开。例如，在名为 t5 的表上创建一个名为 index5 的索引，并指定使用 c1 列和 c2+c3 表达式作为索引的排序键。",
            "CREATE INDEX index5 ON t5 (c1, (c2+c3));\n",
            "index_option",
            "GLOBAL：表示创建全局索引。",
            "LOCAL：表示创建局部索引。",
            "BLOCK_SIZE integer：指定索引块的大小，即每个索引块中的字节数。",
            "COMMENT STRING_VALUE：为索引添加注释。",
            "STORING (column_name [, column_name...])：指定要存储在索引中的列，多个列使用英文逗号（,）分开。",
            "WITH_ROWID：创建包含行标识符的索引。",
            "WITH PARSER STRING_VALUE：指定索引所需的解析器。",
            "index_using_algorithm：指定索引所使用的算法。",
            "visibility_option：指定索引的可见性。",
            "DATA_TABLE_ID data_table_id：指定索引所属的数据表 ID。",
            "INDEX_TABLE_ID index_table_id：指定索引表的 ID。",
            "VIRTUAL_COLUMN_ID virtual_column_id：指定虚拟列的 ID。",
            "MAX_USED_PART_ID used_part_id：指定索引的最大使用分区 ID。",
            "index_column_group_option",
            "WITH COLUMN GROUP(all columns, each column)",
            "：指定创建行存列存冗余的索引。",
            "WITH COLUMN GROUP(each column)",
            "：指定创建列存索引。"
        ],
        "Examples": [
            "CREATE TABLE test_tbl1 (col1 INT, col2 VARCHAR(50));\n",
            "CREATE INDEX idx1_test_tbl1 ON test_tbl1 (col1) WITH COLUMN GROUP(each column);\n"
        ],
        "Detailed Examples": [
            "使用以下 SQL 语句为表创建列存索引。",
            "使用下面 SQL 语句创建表 test_tbl1。",
            "CREATE TABLE test_tbl1 (col1 INT, col2 VARCHAR(50));\n",
            "在 test_tbl1 表上创建列存索引 idx1_test_tbl1，引用 col1 列。",
            "CREATE INDEX idx1_test_tbl1 ON test_tbl1 (col1) WITH COLUMN GROUP(each column);\n"
        ]
    },
    "CREATE MATERIALIZED VIEW LOG": {
        "Title": [
            "CREATE MATERIALIZED VIEW LOG"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053513"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "CREATE MATERIALIZED VIEW LOG ON [database.] table [parallel_clause] [with_clause] [mv_log_purge_clause];\n\nparallel_clause:\n    NOPARALLEL \n    | PARALLEL integer\n\nwith_clause:\n    WITH [ {PRIMARY KEY | ROWID | SEQUENCE} \n            [ { , PRIMARY KEY | , ROWID | , SEQUENCE }]... ] \n        (column_name [, column_name]...) \n        [new_values_clause]\n\nnew_values_clause:\n    {INCLUDING | EXCLUDING} NEW VALUES\n\nmv_log_purge_clause:\n    PURGE {IMMEDIATE [ SYNCHRONOUS ]\n        | START WITH datetime_expr [NEXT datetime_expr]\n        | [START WITH datetime_expr] NEXT datetime_expr\n        }\n",
        "Description": [
            "该语句用来创建物化视图日志。",
            "物化视图日志（Materialized View Log，mlog）用于记录用户表（基表）的增量更新数据，以支持物化视图的快速刷新功能。mlog 是一个记录表，追踪基表的变化，并将这些变化应用于相应的物化视图，实现快速刷新。",
            "\n说明\nOceanBase 数据库 mlog 暂时不支持指定 Partition，mlog 的 Partition 和基表的 Partition 是绑定关系。\n"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\ndatabase.\n可选项，指定物化视图日志基表所在的数据库。如果省略 database.，则默认基表在您自己的数据库中。\n\n\ntable\n指定物化视图日志对应的基表名称。\n\n\nparallel_clause\n可选项，指定创建物化视图表的 dop，即用于指定并行处理物化视图日志的级别。详细介绍可参见下文 parallel_clause。\n\n\nwith_clause\n可选项，指定物化视图日志中包含的辅助列。用于指示是否记录基表发生变化时的主键（PRIMARY KEY）和行标识符（ROWID），并且还可以使用该子句添加序列（SEQUENCE）来为物化视图日志提供额外的排序信息。详细介绍可参见下文 with_clause。\n\n\ncolumn_name\n可选项，指定要在所有已更改行的物化视图日志中记录其值的列名称。\n\n\nnew_values_clause\n可选项，是否在物化视图日志中同时记录更新操作中的旧值和新值。详细介绍可参见下文 new_values_clause。\n\n\nmv_log_purge_clause\n可选项，指定物化视图日志中数据的清除时间。详细介绍可参见下文 mv_log_purge_clause。\n\n\n",
            "parallel_clause",
            "NOPARALLEL：默认配置，并行度为 1。",
            "PARALLEL integer：指定并行度，integer 取值大于等于 1。",
            "with_clause",
            "PRIMARY KEY：表示物化视图日志记录的是基表的主键列。对有主键表才生效，如果不指定，系统会自动为物化视图日志添加这个属性，即物化视图日志默认会包含主键列。",
            "ROWID：表示物化视图日志记录的是基表的行标识符（ROWID）。如果不指定，系统会自动为物化视图日志添加这个属性，即物化视图日志默认会包含 M_ROW$$ 列。",
            "SEQUENCE：表示物化视图日志记录的是事务内的多行更新序号（seq_no）。系统会自动为物化视图日志添加这个属性，即物化视图日志会默认包含 SEQUENCE$$ 列。",
            "new_values_clause",
            "INCLUDING：默认设置，表示可以在物化视图日志中保存新旧值。如果希望物化视图支持快速刷新，则必须指定 INCLUDING NEW VALUES。",
            "EXCLUDING：表示禁用在物化视图日志中记录新值。请不要使用 EXCLUDING NEW VALUES，否则将会报错。",
            "mv_log_purge_clause",
            "\n注意\n只有在物化视图成功刷新后，物化视图日志中的相应数据才会被清除。\n",
            "IMMEDIATE：表示在每次刷新完物化视图后就立即清除相应的物化视图日志。默认值是 SYNCHRONOUS。",
            "\nSYNCHRONOUS：可选项，表示同步地执行清除。\n",
            "SYNCHRONOUS",
            "：可选项，表示同步地执行清除。",
            "START WITH datetime_expr [NEXT datetime_expr]：",
            "\nSTART WITH datetime_expr：表示物化视图日志的首次清除时间。\n[NEXT datetime_expr]：可选项，表示下一次清除物化视图日志的时间。用于设置下一次清除物化视图日志的时间。\n",
            "START WITH datetime_expr",
            "：表示物化视图日志的首次清除时间。",
            "[NEXT datetime_expr]",
            "：可选项，表示下一次清除物化视图日志的时间。用于设置下一次清除物化视图日志的时间。",
            "[START WITH datetime_expr] NEXT datetime_expr：如果未指定 START WITH datetime_expr 参数，仅指定 NEXT datetime_expr 参数，那么物化视图日志的第一次清除时间将设定为 NEXT datetime_expr 参数的值。",
            "\n注意\n请确保 START WITH datetime_expr 和 NEXT datetime_expr 这两个时间表达式设定在未来的时间点，否则会引发错误。\n",
            "建议使用 sysdate() 表示当前时区时间，时间表达式示例如下：",
            "START WITH sysdate() NEXT sysdate() + INTERVAL 1 DAY\n",
            "上述子句表示从当前时间（sysdate()）开始，每隔 1 天清理一次过期的物化视图日志记录。"
        ],
        "Examples": [
            "CREATE TABLE test_tbl1 (id INT PRIMARY KEY, name VARCHAR(20), age INT);\n",
            "CREATE MATERIALIZED VIEW LOG ON test_tbl1 \n  PARALLEL 5 \n  WITH SEQUENCE(name ,age) INCLUDING NEW VALUES\n  PURGE START WITH sysdate() NEXT sysdate() + INTERVAL 1 DAY;\n",
            "DESC mlog$_test_tbl1;\n",
            "+------------+-------------+------+------+---------+-------+\n| Field      | Type        | Null | Key  | Default | Extra |\n+------------+-------------+------+------+---------+-------+\n| id         | int(11)     | NO   | PRI  | NULL    |       |\n| name       | varchar(20) | YES  |      | NULL    |       |\n| age        | int(11)     | YES  |      | NULL    |       |\n| SEQUENCE$$ | bigint      | NO   | PRI  | NULL    |       |\n| DMLTYPE$$  | varchar(1)  | YES  |      | NULL    |       |\n| OLD_NEW$$  | varchar(1)  | YES  |      | NULL    |       |\n+------------+-------------+------+------+---------+-------+\n6 rows in set\n"
        ],
        "Detailed Examples": [
            "创建表 test_tbl1。",
            "CREATE TABLE test_tbl1 (id INT PRIMARY KEY, name VARCHAR(20), age INT);\n",
            "在 test_tbl1 表上创建物化视图日志。指定并行处理物化视图日志的并行度为 5 和物化视图日志记录 name 和 age 列的变更信息，并且会记录变更前后的新值；配置物化视图日志从当前日期开始，每隔 1 天清理一次过期的物化视图日志记录。",
            "CREATE MATERIALIZED VIEW LOG ON test_tbl1 \n  PARALLEL 5 \n  WITH SEQUENCE(name ,age) INCLUDING NEW VALUES\n  PURGE START WITH sysdate() NEXT sysdate() + INTERVAL 1 DAY;\n",
            "查看表 test_tbl1 上物化视图日志的信息。",
            "DESC mlog$_test_tbl1;\n",
            "返回结果如下：",
            "+------------+-------------+------+------+---------+-------+\n| Field      | Type        | Null | Key  | Default | Extra |\n+------------+-------------+------+------+---------+-------+\n| id         | int(11)     | NO   | PRI  | NULL    |       |\n| name       | varchar(20) | YES  |      | NULL    |       |\n| age        | int(11)     | YES  |      | NULL    |       |\n| SEQUENCE$$ | bigint      | NO   | PRI  | NULL    |       |\n| DMLTYPE$$  | varchar(1)  | YES  |      | NULL    |       |\n| OLD_NEW$$  | varchar(1)  | YES  |      | NULL    |       |\n+------------+-------------+------+------+---------+-------+\n6 rows in set\n"
        ]
    },
    "CREATE MATERIALIZED VIEW": {
        "Title": [
            "CREATE MATERIALIZED VIEW"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053503"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "CREATE MATERIALIZED VIEW view_name [([column_list] [PRIMARY KEY(column_list)])] [table_option_list] [partition_option] [refresh_clause] [query_rewrite_clause] [on_query_computation_clause] AS view_select_stmt;\n\ncolumn_list:\n    column_name [, column_name ...]\n\nrefresh_clause:\n    REFRESH [COMPLETE | FAST | FORCE] [mv_refresh_on_clause]\n    | NEVER REFRESH\n\nmv_refresh_on_clause:\n    [ON DEMAND] [[START WITH expr] [NEXT expr]]\n\nquery_rewrite_clause:\n    DISABLE QUERY REWRITE\n    | ENABLE QUERY REWRITE\n\non_query_computation_clause:\n    DISABLE ON QUERY COMPUTATION\n    | ENABLE ON QUERY COMPUTATION\n",
        "Description": [
            "该语句用来创建物化视图。",
            "物化视图是一种特殊类型的数据库对象，它存储查询结果的副本，并定期刷新（也可以手动刷新）以保持数据的最新状态。物化视图可以包含聚合，连接和子查询等操作，并且可以被索引和分区，以进一步提高性能。"
        ],
        "Illustration": [
            "\n说明\n在创建物化视图的语句中，不能直接创建索引。您可以使用 CREATE INDEX 语句或者 ALTER TABLE 语句为物化视图创建索引。\n",
            "\n\n\n参数\n描述\n\n\n\n\nview_name\n指定待创建的物化视图的名称。\n\n\ncolumn_list\n可选项，指定物化视图的列列表。如果想要为视图列指定明确的名称，可以使用 column_list 子句，并在其中使用逗号分隔的列名。 \n      \n说明\n\n\n视图必须具有唯一的列名，不得有重复，就像基表一样。缺省情况下，视图的列名将使用 SELECT 语句中检索的列名。 \n         \n在 column_list 中指定的列名数量必须与 SELECT 语句中检索的列数相同。\n\n\n\n\n\ncolumn_name\n指定物化视图的列名称。缺省情况下，由 SELECT 语句检索的列名将用作视图列名。\n\n\nPRIMARY KEY\n用于指定物化视图的主键。 \n      \n注意\n\n\n如果未指定物化视图的列名称，那么在物化视图的主键中所使用的列名应与 SELECT 语句所检索的列名相同。\n当为物化视图指定列名称时，列名称的列表末尾与 PRIMARY KEY 定义之间应以英文逗号进行分隔。\n\n\n\n\n\ntable_option_list\n可选项，指定物化视图的表选项。与普通表一样，物化视图可以单独设置 Table Option，更多参数信息，请参见 CREATE TABLE。\n\n\npartition_option\n可选项，指定物化视图的分区选项。与普通表一样，物化视图可以单独设置分区，更多参数信息，请参见 CREATE TABLE。\n\n\nrefresh_clause\n可选项，指定物化视图的刷新方式。详细介绍可参见下文 refresh_clause。\n\n\nmv_refresh_on_clause\n可选项，指定物化视图的刷新模式，即刷新时机。详细介绍可参见下文 mv_refresh_on_clause。\n\n\nquery_rewrite_clause\n可选项，指定当前物化视图是否开启自动改写。详细介绍可参见下文 query_rewrite_clause。\n\n\non_query_computation_clause\n可选项，指定当前物化视图是否是实时物化视图。详细介绍可参见下文 on_query_computation_clause。\n\n\nview_select_stmt\n用于定义物化视图数据的查询（SELECT）语句。该语句用于从基表（普通表）中检索数据，并将结果存储到物化视图中。view_select_stmt 的语法与常规 SELECT 语句相同，语法信息请参见 SELECT 语句。\n\n\n",
            "refresh_clause",
            "REFRESH [FAST | COMPLETE | FORCE] [mv_refresh_on_clause]：表示刷新物化视图的方式。",
            "\n[COMPLETE | FAST | FORCE]：指定物化视图的刷新方式。可选项，如果不指定任何刷新方式默认是 FORCE。\n\nCOMPLETE：表示进行全量刷新，即重新计算整个物化视图的数据，确保视图中的数据与源表完全一致。\nFAST：表示进行增量刷新，即只刷新与源表变化相关的数据，避免对整个视图进行完全计算。\n\n注意\n当使用 REFRESH FAST 子句刷新物化视图时，需要在创建物化视图之前提前创建基表的物化视图日志。有关创建物化视图日志的信息，请参见 创建物化视图日志。\n\nFORCE：默认值，表示进行混合刷新，首先尝试增量刷新，如果增量刷新失败，则执行全量刷新。\n\n",
            "[COMPLETE | FAST | FORCE]：指定物化视图的刷新方式。可选项，如果不指定任何刷新方式默认是 FORCE。",
            "\nCOMPLETE：表示进行全量刷新，即重新计算整个物化视图的数据，确保视图中的数据与源表完全一致。\nFAST：表示进行增量刷新，即只刷新与源表变化相关的数据，避免对整个视图进行完全计算。\n\n注意\n当使用 REFRESH FAST 子句刷新物化视图时，需要在创建物化视图之前提前创建基表的物化视图日志。有关创建物化视图日志的信息，请参见 创建物化视图日志。\n\nFORCE：默认值，表示进行混合刷新，首先尝试增量刷新，如果增量刷新失败，则执行全量刷新。\n",
            "COMPLETE：表示进行全量刷新，即重新计算整个物化视图的数据，确保视图中的数据与源表完全一致。",
            "FAST：表示进行增量刷新，即只刷新与源表变化相关的数据，避免对整个视图进行完全计算。",
            "\n注意\n当使用 REFRESH FAST 子句刷新物化视图时，需要在创建物化视图之前提前创建基表的物化视图日志。有关创建物化视图日志的信息，请参见 创建物化视图日志。\n",
            "FORCE：默认值，表示进行混合刷新，首先尝试增量刷新，如果增量刷新失败，则执行全量刷新。",
            "NEVER REFRESH：指定物化视图不需要刷新。即表示物化视图只在创建时进行刷新，并在创建后不允许再次刷新。",
            "mv_refresh_on_clause",
            "\n说明\n除了使用 mv_refresh_on_clause 子句来定义刷新计划，您还可以通过调用 dbms_mviews.refresh 存储过程来手动刷新物化视图。\n",
            "ON DEMAND：可选项，表示按需刷新物化视图。",
            "[[START WITH expr] [NEXT expr]]：可选项，表示定义刷新间隔。",
            "\n[START WITH expr]：可选项，表示刷新计划开始的时间表达式。\n[NEXT expr]：可选项，表示下一次刷新的时间表达式。\n\n注意\n如果使用了 NEXT 子句，刷新计划的时间表达式必须设定在未来的时间点，否则会引发错误。\n\n",
            "[START WITH expr]：可选项，表示刷新计划开始的时间表达式。",
            "[NEXT expr]：可选项，表示下一次刷新的时间表达式。",
            "\n注意\n如果使用了 NEXT 子句，刷新计划的时间表达式必须设定在未来的时间点，否则会引发错误。\n",
            "建议使用 sysdate() 表示当前时区时间，时间表达式示例如下：",
            "START WITH sysdate() NEXT sysdate() + INTERVAL 1 DAY\n",
            "上述子句表示从当前时间（sysdate()）开始，每隔 1 天刷新一次物化视图。",
            "query_rewrite_clause",
            "\n注意\n本功能需要物化视图仅包含 SELECT JOIN 与 WHERE 子句，即 SPJ 查询。对于不满足条件的物化视图，不会报错，但不会被用于改写。\n",
            "DISABLE QUERY REWRITE",
            "：默认值，指定当前物化视图不开启自动改写。",
            "ENABLE QUERY REWRITE",
            "：指定当前物化视图开启自动改写。",
            "更多物化视图改写的信息，参见 物化视图查询改写。",
            "on_query_computation_clause",
            "DISABLE ON QUERY COMPUTATION",
            "：默认值，指定创建普通物化视图。",
            "ENABLE ON QUERY COMPUTATION",
            "：指定创建实时物化视图。",
            "更多实时物化视图的信息，参见 创建物化视图 中 创建实时物化视图 章节。"
        ],
        "Examples": [
            "CREATE TABLE test_tbl1 (col1 INT PRIMARY KEY, col2 VARCHAR(20), col3 INT, col4 INT);\n",
            "CREATE MATERIALIZED VIEW mv_test_tbl1\n  PARTITION BY HASH(col1) PARTITIONS 8\n  REFRESH COMPLETE START WITH sysdate() NEXT sysdate() + INTERVAL 1 DAY\n  AS SELECT col1, col2, col3\n    FROM test_tbl1\n    WHERE col3 >= 30;\n",
            "CREATE MATERIALIZED VIEW mv_test_tbl1(c1, c2, c3, PRIMARY KEY(c1))\n      AS SELECT col1, col2, col3\n        FROM test_tbl1;\n"
        ],
        "Detailed Examples": [
            "创建表 test_tbl1。",
            "CREATE TABLE test_tbl1 (col1 INT PRIMARY KEY, col2 VARCHAR(20), col3 INT, col4 INT);\n",
            "创建名为 mv_test_tbl1 的物化视图。将物化视图按照 col1 列进行 Hash 分区，并分为 8 个分区；使用完全刷新方法来刷新物化视图，从当前日期开始刷新，并每隔 1 天刷新一次；将 test_tbl1 表中满足条件 col3 >= 30 的记录作为基表进行查询，并将查询结果作为物化视图的数据。",
            "CREATE MATERIALIZED VIEW mv_test_tbl1\n  PARTITION BY HASH(col1) PARTITIONS 8\n  REFRESH COMPLETE START WITH sysdate() NEXT sysdate() + INTERVAL 1 DAY\n  AS SELECT col1, col2, col3\n    FROM test_tbl1\n    WHERE col3 >= 30;\n",
            "创建名为 mv2_test_tbl1 的物化视图，并指定主键。",
            "CREATE MATERIALIZED VIEW mv_test_tbl1(c1, c2, c3, PRIMARY KEY(c1))\n      AS SELECT col1, col2, col3\n        FROM test_tbl1;\n"
        ]
    },
    "CREATE OUTLINE": {
        "Title": [
            "CREATE OUTLINE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053478"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "CREATE [OR REPLACE] OUTLINE outline_name ON stmt [ TO target_stmt ]\nCREATE OUTLINE outline_name ON sql_id USING HINT hint;\n",
        "Description": [
            "该语句用来创建 Outline。可以通过两种方式创建，一种是通过 SQL_TEXT（用户执行的带参数的原始语句），另一种是通过 SQL_ID 创建。",
            "\n说明\n创建 Outline 需要进入对应的数据库下执行。\n",
            "当 SQL_ID 相同时，使用 SQL_TEXT 方式创建的 Outline 会覆盖 SQL_ID 方式创建的 Outline，SQL_TEXT 方式创建的优先级更高。",
            "此外，OceanBase 数据库通过 SQL_ID 区分不同的 SQL，而 SQL_ID 是通过 SQL_TEXT 取 MD5 加密得到的，相同的 SQL 文本即使多一个换行或制表符，MD5 得到的 SQL_ID 都会不同。在实际生产系统中，推荐通过 SQL_ID 进行 Outline 绑定。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\noutline_name\n指定要创建的 Outline 名称。\n\n\nOR REPLACE\n指定 OR REPLACE 后，如果要创建的 Outline 已存在，则会替换原有的 Outline。\n\n\nstmt\n一般为一个带有 Hint 和原始参数的 DML 语句。\n\n\nTO target_stmt\n如果不指定 TO target_stmt，则表示如果数据库接受的 SQL 参数化后与 stmt 去掉 Hint 参数化文本相同，则将该 SQL 绑定 stmt 中 Hint 生成执行计划；如果期望对含有 Hint 的语句进行固定计划，则需要 TO target_stmt 来指明原始的 SQL。 注意 在使用 target_stmt 时，严格要求 stmt 与 target_stmt 在去掉 Hint 后完全匹配。\n\n\nsql_id\n如果 sql_id 对应的 SQL 语句已经有 Hint，则创建 Outline 指定的 Hint 会覆盖原始语句中所有 Hint。\n\n\nhint\n格式为 /*+ xxx */。\n\n\n"
        ],
        "Examples": [
            "obclient> CREATE OUTLINE otl_idx_c2\nON SELECT/*+ index(t1 idx_c2)*/ * FROM t1 WHERE c2 = 1;\n",
            "obclient> CREATE OUTLINE otl_idx_c2\nON 'ED570339F2C856BA96008A29EDF04C74'\nUSING HINT /*+ index(t1 idx_c2)*/ ;\n"
        ],
        "Detailed Examples": [
            "使用 SQL_TEXT 创建 Outline。",
            "obclient> CREATE OUTLINE otl_idx_c2\nON SELECT/*+ index(t1 idx_c2)*/ * FROM t1 WHERE c2 = 1;\n",
            "使用 SQL_ID 创建 Outline。",
            "obclient> CREATE OUTLINE otl_idx_c2\nON 'ED570339F2C856BA96008A29EDF04C74'\nUSING HINT /*+ index(t1 idx_c2)*/ ;\n"
        ]
    },
    "CREATE RESTORE POINT": {
        "Title": [
            "CREATE RESTORE POINT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053493"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "CREATE RESTORE POINT restore_point;\n",
        "Description": [
            "该语句用来创建还原点（Restore Point）。使用该功能可以保留当前时刻的数据快照，并在之后指定在这个数据快照上进行查询。目前还不支持将数据回滚到该还原点。",
            "创建还原点后，可以在 V$RESTORE_POINT 视图中查询到该还原点的 SNAPSHOT 值，然后通过 SELECT * FROM table_name AS OF SNAPSHOT snapshot; 查询数据快照中的值。",
            "\n注意\n\n\nV4.x 版本暂不支持 CREATE RESTORE POINT 语句。\n系统租户不支持创建和删除还原点。\n\n\n"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nrestore_point\n指定还原点名称。\n\n\n"
        ],
        "Examples": [
            "obclient> CREATE TABLE test1 (c1 INT,c2 INT);\n",
            "obclient> INSERT INTO test1(c1,c2) values (1,1);\n",
            "obclient> CREATE RESTORE POINT rp1;\n",
            "obclient> INSERT INTO test1(c1,c2) values (2, 2),(3,3);\nobclient> commit;\n",
            "obclient> SELECT * FROM test1;\n+------+------+\n| c1   | c2   |\n+------+------+\n|    1 |    1 |\n|    2 |    2 |\n|    3 |    3 |\n+------+------+\n3 rows in set\n",
            "obclient> SELECT * FROM V$RESTORE_POINT;\n",
            "+-----------+------------------+----------------------------+------+\n| TENANT_ID | SNAPSHOT         | TIME                       | NAME |\n+-----------+------------------+----------------------------+------+\n|      1001 | 1630407064663511 | 2021-08-31 18:51:04.665692 | rp1  |\n+-----------+------------------+----------------------------+------+\n1 row in set\n\nobclient> SELECT * FROM test1 AS OF SNAPSHOT 1630407064663511;\n+------+------+\n| c1   | c2   |\n+------+------+\n|    1 |    1 |\n+------+------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "创建一个表 test1。",
            "obclient> CREATE TABLE test1 (c1 INT,c2 INT);\n",
            "插入一行数据。",
            "obclient> INSERT INTO test1(c1,c2) values (1,1);\n",
            "创建一个还原点 rp1。",
            "obclient> CREATE RESTORE POINT rp1;\n",
            "向表 test1 中再插入一些数据并提交。",
            "obclient> INSERT INTO test1(c1,c2) values (2, 2),(3,3);\nobclient> commit;\n",
            "查询表 test1 当前版本的数据。",
            "obclient> SELECT * FROM test1;\n+------+------+\n| c1   | c2   |\n+------+------+\n|    1 |    1 |\n|    2 |    2 |\n|    3 |    3 |\n+------+------+\n3 rows in set\n",
            "查看创建的还原点 rp1 的信息，并根据版本号查看历史版本的数据。",
            "obclient> SELECT * FROM V$RESTORE_POINT;\n",
            "返回结果如下：",
            "+-----------+------------------+----------------------------+------+\n| TENANT_ID | SNAPSHOT         | TIME                       | NAME |\n+-----------+------------------+----------------------------+------+\n|      1001 | 1630407064663511 | 2021-08-31 18:51:04.665692 | rp1  |\n+-----------+------------------+----------------------------+------+\n1 row in set\n\nobclient> SELECT * FROM test1 AS OF SNAPSHOT 1630407064663511;\n+------+------+\n| c1   | c2   |\n+------+------+\n|    1 |    1 |\n+------+------+\n1 row in set\n"
        ]
    },
    "CREATE ROLE": {
        "Title": [
            "CREATE ROLE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053517"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "CREATE ROLE [IF NOT EXISTS] role_name [, role_name ...];\n",
        "Description": [
            "该语句用于创建角色。您可以通过角色来管理权限。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nIF NOT EXISTS\n可选项，如果指定该子句，即使要创建的角色在当前租户中已存在，也不会报错，系统会提示一条 Warning 信息；如果不指定，则会报错。\n\n\nrole_name\n指定要创建的角色的名称，同时创建多个角色时，角色名称用英文逗号（,）隔开。\n\n\n"
        ],
        "Examples": [
            "obclient [test]> CREATE ROLE role001;\n",
            "obclient [test]> CREATE ROLE IF NOT EXISTS role001, role002;\n",
            "Query OK, 0 rows affected, 1 warning\n",
            "+-------+------+-----------------------------------------------+\n| Level | Code | Message                                       |\n+-------+------+-----------------------------------------------+\n| Note  | 3163 | Authorization ID 'role001'@'%' already exists |\n+-------+------+-----------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "创建角色 role001。",
            "obclient [test]> CREATE ROLE role001;\n",
            "同时创建角色 role001 和 role002。",
            "obclient [test]> CREATE ROLE IF NOT EXISTS role001, role002;\n",
            "返回结果如下：",
            "Query OK, 0 rows affected, 1 warning\n",
            "使用 SHOW WARNINGS; 语句查询 Warning 信息，返回结果如下：",
            "+-------+------+-----------------------------------------------+\n| Level | Code | Message                                       |\n+-------+------+-----------------------------------------------+\n| Note  | 3163 | Authorization ID 'role001'@'%' already exists |\n+-------+------+-----------------------------------------------+\n1 row in set\n"
        ]
    },
    "CREATE SEQUENCE": {
        "Title": [
            "CREATE SEQUENCE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053470"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "CREATE SEQUENCE [ IF NOT EXISTS ] [ schema. ] sequence_name\n{ START WITH int_value\n|[ INCREMENT BY int_value ]\n|[ MINVALUE int_value | NOMINVALUE ]\n|[ MAXVALUE int_value | NOMAXVALUE ]  \n|[ CACHE int_value | NOCACHE ]\n|[ ORDER | NOORDER ]\n|[ CYCLE | NOCYCLE ]  \n}\n;\n",
        "Description": [
            "该语句用来创建序列。序列属于数据库对象，用户可以从序列中生成唯一整数。",
            "如果两个用户同时递增同一个序列，那么每个用户获取的序列号可能会有间隔，一个用户永远无法获得另一个用户所生成的序列号。序列号是独立于表生成的，因此可以对一个或多个表使用相同的序列。",
            "创建序列后，您可以在 SQL 语句中使用 CURRVAL 伪列返回序列当前值或使用 NEXTVAL 伪列返回递增的新值。详细信息，请参见 序列伪列。"
        ],
        "Illustration": [
            "\n\n\n字段\n描述\n\n\n\n\nschema.\n指定包含序列的 Schema。如果省略 Schema，则数据库会在用户当前所在的 Schema 中创建序列。\n\n\nsequence_name\n要创建的序列名称。\n\n\nIF NOT EXISTS\n如果要创建的序列名称已存在，并且没有指定 IF NOT EXISTS，则会报错。\n\n\nMINVALUE int_value\n指定序列的最小值，int_value 的取值范围是 [-(1027-1) ~ (1027-1)]。\n\n\nNOMINVALUE\nNOMINVALUE 为默认值。如果指定为 NOMINVALUE，则升序时最小值为 1，降序时最小值为 -(1027-1)。\n\n\nMAXVALUE int_value\n指定序列的最大值，int_value 的取值范围是 [(-1027+1) ~ (1028-1)]。 注意\n\n同时指定 MINVALUE 和 MAXVALUE 时，MINVALUE 必须小于 MAXVALUE。\nMAXVALUE 和 MINVALUE 之差必须大于等于 INCREMENT BY 中 的 int_value。\n\n\n\nNOMAXVALUE\nNOMAXVALUE 为默认值。如果指定为 NOMAXVALUE，则升序时最大值为(1028-1)，降序时最大值为 -1。\n\n\nSTART WITH int_value\n指定序列的起始值。int_value 必须小于等于 MAXVALUE，且大于等于 MINVALUE。如果不指定，则升序时默认取值为最小值，降序时默认取值为最大值。\n\n\nINCREMENT BY int_value\n指定序列的自增步数。int_value 不可以为 0。如果指定为正数，则序列为升序；如果指定为负数，则序列为降序。不指定时缺省值为 1。\n\n\nCACHE int_value\n指定在内存中预分配的自增值个数，int_value 默认为 20。CACHE int_value 的值必须大于 1，如果 CACHE INT_VALUE 的值为 1，则等价于 NOCACHE。\n\n\nNOCACHE\n指定序列的值为未预先分配。如果同时省略 CACHE 和 NOCACHE，则数据库默认缓存 20 个序列号。\n\n\nORDER\n指定序列的值按顺序生成。\n\n\nNOORDER\nNOORDER 为默认值，即不保证序列的值按顺序生成。\n\n\nCYCLE\n指定序列的值循环生成，即序列在达到其最大值或最小值后继续生成值。在升序达到最大值后，它会生成最小值。在降序序列达到其最小值后，它会生成其最大值。 注意\n\n如果指定了 CYCLE，而且 INCREMENT BY int_value 小于 0 时，必须指定 MINVALUE。\n如果指定了 CYCLE，CACHE 的数量不能超过一个 CYCLE。\n \n\n\nNOCYCLE\nNOCYCLE 为默认值，指定序列在达到其最大值或最小值后无法生成更多值。\n\n\n"
        ],
        "Examples": [
            "obclient> CREATE SEQUENCE test.seq1 START WITH 1 MINVALUE 1 MAXVALUE 10 INCREMENT BY 2 NOCYCLE NOORDER CACHE 30;\nQuery OK, 0 rows affected\n\nobclient> SELECT seq1.nextval FROM DUAL;\n+--------+\n| nextval|\n+--------+\n| 1      |\n+--------+\n1 row in set\n\nobclient> SELECT seq1.nextval FROM DUAL;\n+--------+\n| nextval|\n+--------+\n| 3      |\n+--------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "在 test Schema 下创建一个序列 seq1 并指定自增步数为 2。如下示例中，对 seq1.nextval 的第一个引用返回 1，第二个引用返回 3。每个后续引用的返回值都比前一个大 2。",
            "obclient> CREATE SEQUENCE test.seq1 START WITH 1 MINVALUE 1 MAXVALUE 10 INCREMENT BY 2 NOCYCLE NOORDER CACHE 30;\nQuery OK, 0 rows affected\n\nobclient> SELECT seq1.nextval FROM DUAL;\n+--------+\n| nextval|\n+--------+\n| 1      |\n+--------+\n1 row in set\n\nobclient> SELECT seq1.nextval FROM DUAL;\n+--------+\n| nextval|\n+--------+\n| 3      |\n+--------+\n1 row in set\n"
        ]
    },
    "CREATE TABLE": {
        "Title": [
            "CREATE TABLE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053522"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "CREATE [hint_options] TABLE [IF NOT EXISTS] table_name\n      (table_definition_list) [table_option_list] [partition_option] [table_column_group_option] [IGNORE | REPLACE] [AS] select;\n\nCREATE TABLE [IF NOT EXISTS] table_name\n      LIKE table_name;\n\ntable_definition_list:\n    table_definition [, table_definition ...]\n\ntable_definition:\n      column_definition_list\n    | [CONSTRAINT [constraint_name]] PRIMARY KEY index_desc\n    | [CONSTRAINT [constraint_name]] UNIQUE {INDEX | KEY}\n            [index_name] index_desc\n    | [CONSTRAINT [constraint_name]] FOREIGN KEY\n            [index_name] index_desc\n            REFERENCES reference_definition\n            [match_action][opt_reference_option_list]\n    | [FULLTEXT] {INDEX | KEY} [index_name] [index_type] (key_part,...) [WITH PARSER {SPACE | NGRAM | BENG}]\n      [index_option_list] [index_column_group_option]\n    | index_json_clause\n    | [CONSTRAINT [constraint_name]] CHECK(expression) constranit_state\n\ncolumn_definition_list:\n    column_definition [, column_definition ...]\n\ncolumn_definition:\n     column_name data_type\n         [DEFAULT const_value] [AUTO_INCREMENT]\n         [NULL | NOT NULL] [[PRIMARY] KEY] [UNIQUE [KEY]] [COMMENT string_value] [SKIP_INDEX(skip_index_option_list)]\n   | column_name data_type\n         [GENERATED ALWAYS] AS (expr) [VIRTUAL | STORED]\n         [opt_generated_column_attribute]\n\nskip_index_option_list:\n    skip_index_option [,skip_index_option ...]\n\nskip_index_option:\n    MIN_MAX\n    | SUM\n\nindex_desc:\n   (column_desc_list) [index_type] [index_option_list]\n\nmatch_action:\n   MATCH {SIMPLE | FULL | PARTIAL}\n\nopt_reference_option_list:\n   reference_option [,reference_option ...]\n\nreference_option:\n   ON {DELETE | UPDATE} {RESTRICT | CASCADE | SET NULL | NO ACTION | SET DEFAULT}\n\n\nkey_part:\n    {index_col_name [(length)] | (expr)} [ASC | DESC]\n\nindex_type:\n    USING BTREE\n\nindex_option_list:\n    index_option [ index_option ...]\n\nindex_option:\n      [GLOBAL | LOCAL]\n    | block_size\n    | compression\n    | STORING(column_name_list)\n    | COMMENT string_value\n\ntable_option_list:\n    table_option [ table_option ...]\n\ntable_option:\n      [DEFAULT] {CHARSET | CHARACTER SET} [=] charset_name\n    | [DEFAULT] COLLATE [=] collation_name\n    | table_tablegroup\n    | block_size\n    | lob_inrow_threshold [=] num\n    | compression\n    | AUTO_INCREMENT [=] INT_VALUE\n    | COMMENT string_value\n    | ROW_FORMAT [=] REDUNDANT|COMPACT|DYNAMIC|COMPRESSED|DEFAULT\n    | PCTFREE [=] num\n    | parallel_clause\n    | DUPLICATE_SCOPE [=] 'none|cluster'\n    | TABLE_MODE [=] 'table_mode_value'\n    | auto_increment_cache_size [=] INT_VALUE\n\nparallel_clause:\n    {NOPARALLEL | PARALLEL integer}\n\ntable_mode_value:\n    NORMAL\n    | QUEUING\n    | MODERATE\n    | SUPER\n    | EXTREME\n\npartition_option:\n      PARTITION BY HASH(expression)\n      [subpartition_option] PARTITIONS partition_count\n    | PARTITION BY KEY([column_name_list])\n      [subpartition_option] PARTITIONS partition_count\n    | PARTITION BY RANGE {(expression) | COLUMNS (column_name_list)}\n      [subpartition_option] (range_partition_list)\n    | PARTITION BY LIST {(expression) | COLUMNS (column_name_list)}\n      [subpartition_option] PARTITIONS partition_count\n\nsubpartition_option:\n      SUBPARTITION BY HASH(expression)\n      SUBPARTITIONS subpartition_count\n    | SUBPARTITION BY KEY(column_name_list)\n      SUBPARTITIONS subpartition_count\n    | SUBPARTITION BY RANGE {(expression) | COLUMNS (column_name_list)}\n      (range_subpartition_list)\n    | SUBPARTITION BY LIST(expression)\n\nrange_partition_list:\n    range_partition [, range_partition ...]\n\nrange_partition:\n    PARTITION partition_name\n    VALUES LESS THAN {(expression_list) | MAXVALUE}\n\nrange_subpartition_list:\n    range_subpartition [, range_subpartition ...]\n\nrange_subpartition:\n    SUBPARTITION subpartition_name\n    VALUES LESS THAN {(expression_list) | MAXVALUE}\n\nexpression_list:\n    expression [, expression ...]\n\ncolumn_name_list:\n    column_name [, column_name ...]\n\npartition_name_list:\n    partition_name [, partition_name ...]\n\npartition_count | subpartition_count:\n    INT_VALUE\n\ntable_column_group_option/index_column_group_option:\n      WITH COLUMN GROUP(all columns)\n    | WITH COLUMN GROUP(each column)\n    | WITH COLUMN GROUP(all columns, each column)\n\nindex_json_clause:\n    [UNIQUE] INDEX idx_json_name((CAST(json_column_name->'$.json_field_name' AS UNSIGNED ARRAY)))\n    | INDEX idx_json_name(column_name, [column_name, ...] (CAST(json_column_name->'$.json_field_name' AS CHAR(n) ARRAY)))\n",
        "Description": [
            "该语句用来在数据库中创建一张新表。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nhint_options\n指定 Hint 选项，为可选项。 \n      \n注意\n在当前版本中，CREATE TABLE 语句的 Hint 选项仅限于支持 /*+ parallel(N) */ 类型，其中 N 是并行度。并且该 Hint 选项仅适用于 CREATE TABLE … AS SELECT … 的场景，可以控制在表创建时数据查询和写入操作的并行度。\n\n\n\nIF NOT EXISTS\n如果指定 IF NOT EXISTS，即使待创建的表已存在，也不会报错；如果不指定且待创建的表已存在，则系统会报错。\n\n\nIGNORE | REPLACE\n可选项，使用 CREATE TABLE ... SELECT 语句时指示如何处理重复唯一键值的行。当有重复唯一键值的行时，如果不指定 IGNORE 或者 REPLACE 将会报错。 \n      \nIGNORE：如果新表中的唯一键值与复制的数据中的某行发生冲突，那么该冲突行将被忽略，不会被复制到新表中。即 IGNORE 选项会跳过重复的数据，只复制那些不会造成唯一键冲突的行。\nREPLACE：在遇到唯一键值重复的数据行，原新表中的行将被替换为新复制的数据中的行。\n\n\n\nPRIMARY KEY\n为创建的表指定主键。如果不指定，则使用隐藏主键。OceanBase 数据库支持修改表的主键或通过 ALTER TABLE 语句为表添加主键，参见 ALTER TABLE。\n\n\nFOREIGN KEY\n为创建的表指定外键。如果不指定外键名，则会使用表名 + OBFK + 创建时间命名。（例如，在 2021 年 8 月 1 日 00:00:00 为 t1 表创建的外键名称为 t1_OBFK_1627747200000000）。外键允许跨表交叉引用相关数据，当 UPDATE 或 DELETE 操作影响与子表相匹配行的父表中键值时，其结果取决于 ON UPDATE 和 ON DELETE 子句的引用操作： \n      \nCASCADE：表示从父表中删除或更新行，并自动删除或更新子表中匹配的行。\nSET NULL：表示从父表中删除或更新行，并将子表中的外键列设置为 NULL。\nRESTRICT：表示拒绝对父表的删除或更新操作。\nNO ACTION：指定延迟检查。\n此外还支持 SET DEFAULT 操作。\n\n\nFULLTEXT\n可选项，指定创建全文索引。有关创建全文索引的详细信息，参见 创建索引 中的 创建全文索引 章节。 \n      \n注意\n\n\n当前版本只支持创建局部全文索引。\n全文索引功能目前处于实验阶段，不推荐在生产环境中使用，以免影响系统稳定性。\n\n\n\n\n\nWITH PARSER {SPACE | NGRAM | BENG}\n可选项，指定全文索引的分词器。当前版本仅支持 SPACE（空格）、NGRAM 和 BENG（基础英文）三种内置分词器，不指定默认使用 SPACE（空格）分词器。\n\n\nKEY | INDEX\n为创建的表指定键或索引。如果不指定索引名，则会使用索引引用的第一列作为索引名，如果命名存在重复，则会使用下划线（_）+ 序号的方式命名。（例如，使用 c1 列创建的索引如果命名重复，则会将索引命名为 c1_2。） 您可以通过 SHOW INDEX 语句查看表上的索引。\n\n\nkey_part\n创建（函数）索引。\n\n\nindex_col_name\n指定索引的列名，每个列名后都支持 ASC（升序），不支持 DESC（降序）。默认为升序。建立索引的排序方式为：首先以 index_col_name 中第一个列的值排序；该列值相同的记录，按下一列名的值排序；以此类推。\n\n\nexpr\n表示合法的函数索引表达式，且允许是布尔表达式，例如 c1=c1。 \n      \n注意\nOceanBase 数据库当前版本禁止创建生成列上的函数索引。\n\n\n\nROW_FORMAT\n指定表是否开启 Encoding 存储格式。 \n      \nredundant：不开启 Encoding 存储格式。\ncompact：不开启 Encoding 存储格式。\ndynamic：Encoding 存储格式。\ncompressed：Encoding 存储格式。\ndefault：等价 dynamic 模式。\n\n\n\n[GENERATED ALWAYS] AS (expr) [VIRTUAL | STORED]\n创建生成列，expr 为用于计算列值的表达式。 \n      \nVIRTUAL：列值不会被存储，而是在读取行时，在任何 BEFORE 触发器之后立即计算。虚拟列不占用存储空间。\nSTORED：在插入或更新行时评估和存储列值。存储列确实需要存储空间并且可以被索引。\n\n\n\nBLOCK_SIZE\n指定表的微块大小。\n\n\nlob_inrow_threshold\n用于配置 INROW 阈值，当 LOB 数据大小超过该阈值时，会转为 OUTROW 存储在 LOB Meta 表中，默认为 4KB。\n\n\nCOMPRESSION\n指定表的压缩算法，取值如下： \n      \nnone：不使用压缩算法。\nlz4_1.0: 使用 lz4 压缩算法。\nzstd_1.0: 使用 zstd 压缩算法。\nsnappy_1.0: 使用 snappy 压缩算法。\n\n\n\nCHARSET | CHARACTER SET\n指定表中列的默认字符集，可使用的字符集请参见 字符集。\n\n\nCOLLATE\n指定表中列的默认字符序，可使用的字符序请参见 字符序。\n\n\ntable_tablegroup\n指定表所属的 tablegroup。\n\n\nAUTO_INCREMENT\n指定表中自增列的初始值。OceanBase 数据库支持使用自增列作为分区键。\n\n\nCOMMENT\n注释。不区分大小写。\n\n\nPCTFREE\n指定宏块保留空间百分比。\n\n\nparallel_clause\n指定表级别的并行度： \n      \nNOPARALLEL：并行度为 1，默认配置\nPARALLEL integer：指定并行度，integer 取值大于等于 1。\n\n\n\nDUPLICATE_SCOPE\n指定复制表的属性，取值如下： \n      \nnone：表示该表是一个普通表，为默认值。\ncluster：表示该表是一个复制表，Leader 需要将事务复制到当前租户的所有 F（全能）副本及 R（只读）副本。\nOceanBase 数据库目前仅支持 cluster 级别的复制表。\n\n\nCHECK\n限制列中的值的范围。 \n      \n如果对单个列定义 CHECK 约束，那么该列级约束可以写到列定义中，并且可以指定名称。\n如果对一个表定义 CHECK 约束，那么此约束会应用于表中多个列，且允许出现在列的定义前。在删除表时，表中创建的 CHECK 约束也会一起被删除。\n 可以通过如下方式查看约束信息： 使用 SHOW CREATE TABLE 命令 查看 information_schema.TABLE_CONSTRAINTS 视图 查看 information_schema.CHECK_CONSTRAINTS 视图\n\n\nconstraint_name\n约束名称，最多包含 64 个字符。 \n      \n约束名称的开头结尾中间都允许有空格，但需要用\"`“标识名称的开头和结尾。\n约束名称可以包含特殊字符”$“。\n如果约束名称为保留字，需要用”`\"标识，否则会报错。\n在同一 Database 下不允许 CHECK 约束的名称重复。\n\n\n\nexpression\n约束表达式。 \n      \nexpression 不允许为空。\nexpression 结果不能为非布尔类型。\nexpression 不能包含不存在的列。\n\n\n\ntable_column_group_option/index_column_group_option\n指定表或索引的列存选项。具体解释如下： \n      \nWITH COLUMN GROUP(all columns, each column)：指定创建行存列存冗余的表或索引。\nWITH COLUMN GROUP(all columns)：指定添加行存表或索引。\nWITH COLUMN GROUP(each column)：指定创建列存表或索引。\n\n\n\nSKIP_INDEX\n标识列的 Skip Index 属性。 取值如下： \n      \nMIN_MAX：是 Skip Index 中最通用的聚合数据类型，它会在索引节点粒度下存储被索引列的最大值、最小值和 Null Count。这种类型的数据可以加速下推的 Filter 和 MIN/MAX 聚合的下推。\nSUM：用于加速数值类型的 SUM 聚合的下推。\n\n\n注意\n\n\nJSON 和空间数据类型的列禁止创建 Skip Index。\n生成列禁止创建 Skip Index。\n\n\n\n\n\nindex_json_clause\n指定创建多值索引子句。更多多值索引信息，参见 创建索引 下 创建多值索引 章节。 \n      \n注意\n多值索引功能目前处于实验阶段，不推荐在生产环境中使用，以免影响系统稳定性。\n\n\n\njson_column_name\n指定表 JSON 数据类型的列名称。\n\n\nidx_json_name\n指定待创建的多值索引的索引名。\n\n\njson_field_name\nJson 列中需要创建索引的字段名称。\n\n\nTABLE_MODE\n可选项，用于指定合并触发阈值与合并策略，即控制数据转储后的合并行为。取值的详细介绍可参见下文 table_mode_value。\n\n\nauto_increment_cache_size\n可选项，用于设置缓存的自增值个数。该参数默认值为 0，表示该项未进行配置，系统将采用租户级别的配置项（auto_increment_cache_size）作为自增列的缓存大小设置。\n\n\n",
            "table_mode_value",
            "\n说明\n在以下列出的 TABLE_MODE 模式中，除了 NORMAL 模式之外，所有模式都代表 QUEUING 表。这种 QUEUING 表是最基本的表类型，并且随后列出的几种模式（除了 NORMAL 模式）代表了使用更加积极的合并策略。\n",
            "NORMAL",
            "：默认值，表示正常。在该模式下，数据转储后触发合并的概率极低。",
            "QUEUING",
            "：在该模式下，数据转储后触发合并的概率低。",
            "MODERATE",
            "：表示适度。在该模式下，数据转储后触发合并的概率为中等。",
            "SUPER",
            "：表示超级。在该模式下，数据转储后触发合并的概率高。",
            "EXTREME",
            "：表示极端。在该模式下，转储后触发合并的概率较高。",
            "更多有关合并的信息，请参见 自适应合并。"
        ],
        "Examples": [
            "obclient> CREATE TABLE tbl1 (c1 INT PRIMARY KEY, c2 VARCHAR(50));\nQuery OK, 0 rows affected\n",
            "obclient> CREATE TABLE tbl2 (c1 INT PRIMARY KEY, c2 INT, c3 INT, INDEX i1 (c2));\nQuery OK, 0 rows affected\n",
            "obclient> CREATE TABLE tbl3 (c1 INT, c2 INT, INDEX i1 ((c1+1)), UNIQUE KEY ((c1+c2)));\nQuery OK, 0 rows affected\n\nobclient> SHOW CREATE TABLE tbl3;\n+-------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Table | Create Table                                                                                                                                                                                                                                                                                                                                                                     |\n+-------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| tbl3    | CREATE TABLE `tbl3` (\n`c1` int(11) DEFAULT NULL,\n`c2` int(11) DEFAULT NULL,\nUNIQUE KEY `functional_index` ((`c1` + `c2`)) BLOCK_SIZE 16384 LOCAL,\nKEY `i1` ((`c1` + 1)) BLOCK_SIZE 16384 LOCAL\n) DEFAULT CHARSET = utf8mb4 ROW_FORMAT = DYNAMIC COMPRESSION = 'zstd_1.3.8' REPLICA_NUM = 2 BLOCK_SIZE = 16384 USE_BLOOM_FILTER = FALSE TABLET_SIZE = 134217728 PCTFREE = 0 |\n+-------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n",
            "obclient> CREATE TABLE tbl4 (c1 INT PRIMARY KEY, c2 INT) PARTITION BY HASH(c1) PARTITIONS 8;\nQuery OK, 0 rows affected\n",
            "obclient> CREATE TABLE tbl5 (c1 INT, c2 INT, c3 INT) PARTITION BY RANGE(c1)\n     SUBPARTITION BY KEY(c2, c3) SUBPARTITIONS 5\n     (PARTITION p0 VALUES LESS THAN(0), PARTITION p1 VALUES LESS THAN(100));\nQuery OK, 0 rows affected\n",
            "obclient> CREATE TABLE tbl6 (c1 VARCHAR(10),\n                 c2 VARCHAR(10) CHARSET GBK COLLATE gbk_bin)\n             DEFAULT CHARSET utf8 COLLATE utf8mb4_general_ci;\nQuery OK, 0 rows affected\n",
            "obclient> CREATE TABLE tbl7 (c1 INT, c2 INT, c3 VARCHAR(64))\n      COMPRESSION 'zstd_1.0'\n      ROW_FORMAT DYNAMIC\n      PCTFREE 5;\nQuery OK, 0 rows affected\n",
            "obclient> CREATE TABLE tbl8(c1 INT PRIMARY KEY, c2 INT) PARALLEL 3;\nQuery OK, 0 rows affected\n",
            "obclient> CREATE TABLE tbl9(inv_id BIGINT NOT NULL AUTO_INCREMENT,c1 BIGINT,\nPRIMARY KEY (inv_id) ) PARTITION BY HASH(inv_id) PARTITIONS 8;\nQuery OK, 0 rows affected\n",
            "obclient> CREATE TABLE ref_t1(c1 INT PRIMARY KEY, C2 INT);\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE ref_t2(c1 INT PRIMARY KEY, C2 INT,FOREIGN KEY(c2) REFERENCES ref_t1(c1) ON UPDATE SET NULL);\nQuery OK, 0 rows affected\n",
            "obclient> CREATE TABLE tbl10 (col1 INT, col2 INT, col3 INT, CONSTRAINT equal_check1 CHECK(col1 = col3 * 2));\nQuery OK, 0 rows affected\n\nobclient> SHOW CREATE TABLE tbl10;\n+-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Table | Create Table                                                                                                                                                                                                                                                                                                                                               |\n+-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| tbl10  | CREATE TABLE `tbl10` (\n  `col1` int(11) DEFAULT NULL,\n  `col2` int(11) DEFAULT NULL,\n  `col3` int(11) DEFAULT NULL,\n  CONSTRAINT `equal_check1` CHECK ((`col1` = (`col3` * 2)))\n) DEFAULT CHARSET = utf8mb4 ROW_FORMAT = DYNAMIC COMPRESSION = 'zstd_1.3.8' REPLICA_NUM = 1 BLOCK_SIZE = 16384 USE_BLOOM_FILTER = FALSE TABLET_SIZE = 134217728 PCTFREE = 0 |\n+-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n1 row in set\n",
            "obclient> CREATE TABLE tbl11 LIKE tbl10;\nQuery OK, 0 rows affected\n\nobclient> SHOW CREATE TABLE tbl11;\n+-------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Table | Create Table                                                                                                                                                                                                                                                                                                                                                                |\n+-------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| tbl11  | CREATE TABLE `tbl11` (\n  `col1` int(11) DEFAULT NULL,\n  `col2` int(11) DEFAULT NULL,\n  `col3` int(11) DEFAULT NULL,\n  CONSTRAINT `tbl11_OBCHECK_1650793233327894` CHECK ((`col1` = (`col3` * 2)))\n) DEFAULT CHARSET = utf8mb4 ROW_FORMAT = DYNAMIC COMPRESSION = 'zstd_1.3.8' REPLICA_NUM = 1 BLOCK_SIZE = 16384 USE_BLOOM_FILTER = FALSE TABLET_SIZE = 134217728 PCTFREE = 0 |\n+-------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n1 row in set\n",
            "obclient> CREATE RESOURCE UNIT IF NOT EXISTS 2c5g MAX_CPU 2, MEMORY_SIZE '5G';\nQuery OK, 0 rows affected\n",
            "obclient> CREATE RESOURCE POOL tenant_pool UNIT = '2c5g', UNIT_NUM = 2, ZONE_LIST = ('z1', 'z2', 'z3');\nQuery OK, 0 rows affected\n",
            "obclient> CREATE TENANT obmysql resource_pool_list=('tenant_pool'), LOCALITY = \"F@z1, F@z2, R@z3\", PRIMARY_ZONE = \"z1\" SET ob_tcp_invited_nodes='%';\nQuery OK, 0 rows affected\n",
            "obclient> USE test;\nDatabase changed\nobclient> CREATE TABLE dup_t1(c1 INT) DUPLICATE_SCOPE = 'cluster';\nQuery OK, 0 rows affected\n",
            "obclient> SELECT * FROM oceanbase.DBA_OB_LS WHERE FLAG LIKE \"%DUPLICATE%\";\n+-------+--------+--------------+---------------+-------------+---------------------+----------+---------------------+---------------------+-----------+\n| LS_ID | STATUS | PRIMARY_ZONE | UNIT_GROUP_ID | LS_GROUP_ID | CREATE_SCN          | DROP_SCN | SYNC_SCN            | READABLE_SCN        | FLAG      |\n+-------+--------+--------------+---------------+-------------+---------------------+----------+---------------------+---------------------+-----------+\n|  1003 | NORMAL | z1;z2        |             0 |           0 | 1683267390195713284 |     NULL | 1683337744205408139 | 1683337744205408139 | DUPLICATE |\n+-------+--------+--------------+---------------+-------------+---------------------+----------+---------------------+---------------------+-----------+\n1 row in set\n\n",
            "obclient> SELECT * FROM oceanbase.CDB_OB_TABLE_LOCATIONS WHERE TABLE_NAME = \"dup_t1\";\n+-----------+---------------+------------+----------+------------+----------------+-------------------+------------+---------------+-----------+-------+------+----------------+----------+----------+--------------+-----------------+\n| TENANT_ID | DATABASE_NAME | TABLE_NAME | TABLE_ID | TABLE_TYPE | PARTITION_NAME | SUBPARTITION_NAME | INDEX_NAME | DATA_TABLE_ID | TABLET_ID | LS_ID | ZONE | SVR_IP         | SVR_PORT | ROLE     | REPLICA_TYPE | DUPLICATE_SCOPE |\n+-----------+---------------+------------+----------+------------+----------------+-------------------+------------+---------------+-----------+-------+------+----------------+----------+----------+--------------+-----------------+\n|      1002 | test          | dup_t1     |   500002 | USER TABLE | NULL           | NULL              | NULL       |          NULL |    200001 |  1003 | z1   | 11.xxx.xxx.xxx |    36125 | LEADER   | FULL         | CLUSTER         |\n|      1002 | test          | dup_t1     |   500002 | USER TABLE | NULL           | NULL              | NULL       |          NULL |    200001 |  1003 | z1   | 11.xxx.xxx.xxx  |    36124 | FOLLOWER | READONLY     | CLUSTER         |\n|      1002 | test          | dup_t1     |   500002 | USER TABLE | NULL           | NULL              | NULL       |          NULL |    200001 |  1003 | z2   | 11.xxx.xxx.xxx |    36127 | FOLLOWER | FULL         | CLUSTER         |\n|      1002 | test          | dup_t1     |   500002 | USER TABLE | NULL           | NULL              | NULL       |          NULL |    200001 |  1003 | z2   | 11.xxx.xxx.xxx |    36126 | FOLLOWER | READONLY     | CLUSTER         |\n|      1002 | test          | dup_t1     |   500002 | USER TABLE | NULL           | NULL              | NULL       |          NULL |    200001 |  1003 | z3   | 11.xxx.xxx.xxx |    36128 | FOLLOWER | READONLY     | CLUSTER         |\n|      1002 | test          | dup_t1     |   500002 | USER TABLE | NULL           | NULL              | NULL       |          NULL |    200001 |  1003 | z3   | 11.xxx.xxx.xxx  |    36129 | FOLLOWER | READONLY     | CLUSTER         |\n+-----------+---------------+------------+----------+------------+----------------+-------------------+------------+---------------+-----------+-------+------+----------------+----------+----------+--------------+-----------------+\n6 rows in set\n",
            "obclient> INSERT INTO dup_t1 VALUES(1);\nQuery OK, 1 row affected\n\nobclient> SELECT * FROM dup_t1;\n+------+\n| c1   |\n+------+\n|    1 |\n+------+\n1 row in set\n",
            "CREATE TABLE tbl1_cg (col1 INT PRIMARY KEY, col2 VARCHAR(50)) WITH COLUMN GROUP(each column);\n",
            "CREATE TABLE tbl2_cg (col1 INT PRIMARY KEY, col2 INT, col3 INT, INDEX i1 (col2) WITH COLUMN GROUP(each column));\n",
            "CREATE TABLE tbl3_cg (col1 INT PRIMARY KEY, col2 INT, col3 INT, INDEX i1 (col2) WITH COLUMN GROUP(each column)) WITH COLUMN GROUP(each column);\n",
            "CREATE TABLE test_skidx(\n  col1 INT SKIP_INDEX(MIN_MAX, SUM),\n  col2 FLOAT SKIP_INDEX(MIN_MAX),\n  col3 VARCHAR(1024) SKIP_INDEX(MIN_MAX),\n  col4 CHAR(10)\n);\n",
            "CREATE /*+ parallel(5) */ TABLE tbl1 (col1 INT) AS SELECT col1 FROM tbl2;\n"
        ],
        "Detailed Examples": [
            "创建数据库表。",
            "obclient> CREATE TABLE tbl1 (c1 INT PRIMARY KEY, c2 VARCHAR(50));\nQuery OK, 0 rows affected\n",
            "创建带索引的表。",
            "obclient> CREATE TABLE tbl2 (c1 INT PRIMARY KEY, c2 INT, c3 INT, INDEX i1 (c2));\nQuery OK, 0 rows affected\n",
            "创建带有函数索引的表 tbl3。",
            "obclient> CREATE TABLE tbl3 (c1 INT, c2 INT, INDEX i1 ((c1+1)), UNIQUE KEY ((c1+c2)));\nQuery OK, 0 rows affected\n\nobclient> SHOW CREATE TABLE tbl3;\n+-------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Table | Create Table                                                                                                                                                                                                                                                                                                                                                                     |\n+-------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| tbl3    | CREATE TABLE `tbl3` (\n`c1` int(11) DEFAULT NULL,\n`c2` int(11) DEFAULT NULL,\nUNIQUE KEY `functional_index` ((`c1` + `c2`)) BLOCK_SIZE 16384 LOCAL,\nKEY `i1` ((`c1` + 1)) BLOCK_SIZE 16384 LOCAL\n) DEFAULT CHARSET = utf8mb4 ROW_FORMAT = DYNAMIC COMPRESSION = 'zstd_1.3.8' REPLICA_NUM = 2 BLOCK_SIZE = 16384 USE_BLOOM_FILTER = FALSE TABLET_SIZE = 134217728 PCTFREE = 0 |\n+-------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n",
            "创建 Hash 分区，分区数为 8 的表。",
            "obclient> CREATE TABLE tbl4 (c1 INT PRIMARY KEY, c2 INT) PARTITION BY HASH(c1) PARTITIONS 8;\nQuery OK, 0 rows affected\n",
            "创建一级分区为 Range 分区，二级分区为 Key 分区的表。",
            "obclient> CREATE TABLE tbl5 (c1 INT, c2 INT, c3 INT) PARTITION BY RANGE(c1)\n     SUBPARTITION BY KEY(c2, c3) SUBPARTITIONS 5\n     (PARTITION p0 VALUES LESS THAN(0), PARTITION p1 VALUES LESS THAN(100));\nQuery OK, 0 rows affected\n",
            "创建一列为 gbk, 一列为 utf8 的表。",
            "obclient> CREATE TABLE tbl6 (c1 VARCHAR(10),\n                 c2 VARCHAR(10) CHARSET GBK COLLATE gbk_bin)\n             DEFAULT CHARSET utf8 COLLATE utf8mb4_general_ci;\nQuery OK, 0 rows affected\n",
            "开启 Encoding 并使用 zstd 压缩，宏块保留空间为 5%。",
            "obclient> CREATE TABLE tbl7 (c1 INT, c2 INT, c3 VARCHAR(64))\n      COMPRESSION 'zstd_1.0'\n      ROW_FORMAT DYNAMIC\n      PCTFREE 5;\nQuery OK, 0 rows affected\n",
            "创建表 tbl8，并设置并行度为 3。",
            "obclient> CREATE TABLE tbl8(c1 INT PRIMARY KEY, c2 INT) PARALLEL 3;\nQuery OK, 0 rows affected\n",
            "使用自增列作为分区键。",
            "obclient> CREATE TABLE tbl9(inv_id BIGINT NOT NULL AUTO_INCREMENT,c1 BIGINT,\nPRIMARY KEY (inv_id) ) PARTITION BY HASH(inv_id) PARTITIONS 8;\nQuery OK, 0 rows affected\n",
            "为表 ref_t2 指定外键，当 UPDATE 操作影响与子表相匹配行的父表中键值时，执行 SET NULL 操作。",
            "obclient> CREATE TABLE ref_t1(c1 INT PRIMARY KEY, C2 INT);\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE ref_t2(c1 INT PRIMARY KEY, C2 INT,FOREIGN KEY(c2) REFERENCES ref_t1(c1) ON UPDATE SET NULL);\nQuery OK, 0 rows affected\n",
            "创建带 CHECK 约束的表 tbl10，并查看约束信息。",
            "obclient> CREATE TABLE tbl10 (col1 INT, col2 INT, col3 INT, CONSTRAINT equal_check1 CHECK(col1 = col3 * 2));\nQuery OK, 0 rows affected\n\nobclient> SHOW CREATE TABLE tbl10;\n+-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Table | Create Table                                                                                                                                                                                                                                                                                                                                               |\n+-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| tbl10  | CREATE TABLE `tbl10` (\n  `col1` int(11) DEFAULT NULL,\n  `col2` int(11) DEFAULT NULL,\n  `col3` int(11) DEFAULT NULL,\n  CONSTRAINT `equal_check1` CHECK ((`col1` = (`col3` * 2)))\n) DEFAULT CHARSET = utf8mb4 ROW_FORMAT = DYNAMIC COMPRESSION = 'zstd_1.3.8' REPLICA_NUM = 1 BLOCK_SIZE = 16384 USE_BLOOM_FILTER = FALSE TABLET_SIZE = 134217728 PCTFREE = 0 |\n+-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n1 row in set\n",
            "依照表 tbl10 创建表 tbl11，并查看表信息。",
            "obclient> CREATE TABLE tbl11 LIKE tbl10;\nQuery OK, 0 rows affected\n\nobclient> SHOW CREATE TABLE tbl11;\n+-------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Table | Create Table                                                                                                                                                                                                                                                                                                                                                                |\n+-------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| tbl11  | CREATE TABLE `tbl11` (\n  `col1` int(11) DEFAULT NULL,\n  `col2` int(11) DEFAULT NULL,\n  `col3` int(11) DEFAULT NULL,\n  CONSTRAINT `tbl11_OBCHECK_1650793233327894` CHECK ((`col1` = (`col3` * 2)))\n) DEFAULT CHARSET = utf8mb4 ROW_FORMAT = DYNAMIC COMPRESSION = 'zstd_1.3.8' REPLICA_NUM = 1 BLOCK_SIZE = 16384 USE_BLOOM_FILTER = FALSE TABLET_SIZE = 134217728 PCTFREE = 0 |\n+-------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n1 row in set\n",
            "创建 cluster 级别的复制表 dup_t1。",
            "\n登录到 sys 租户，创建一个 Unit。 obclient> CREATE RESOURCE UNIT IF NOT EXISTS 2c5g MAX_CPU 2, MEMORY_SIZE '5G';\nQuery OK, 0 rows affected\n\n创建一个 Unit Num 为 2 的资源池。 obclient> CREATE RESOURCE POOL tenant_pool UNIT = '2c5g', UNIT_NUM = 2, ZONE_LIST = ('z1', 'z2', 'z3');\nQuery OK, 0 rows affected\n\n创建用户租户 obmysql 并指定 Locality 分布。 obclient> CREATE TENANT obmysql resource_pool_list=('tenant_pool'), LOCALITY = \"F@z1, F@z2, R@z3\", PRIMARY_ZONE = \"z1\" SET ob_tcp_invited_nodes='%';\nQuery OK, 0 rows affected\n\n登录到步骤 3 所创建的 obmysql 用户租户，创建一个复制表。 obclient> USE test;\nDatabase changed\nobclient> CREATE TABLE dup_t1(c1 INT) DUPLICATE_SCOPE = 'cluster';\nQuery OK, 0 rows affected\n\n（可选）查看广播日志流信息，复制表会创建在该日志流上。 obclient> SELECT * FROM oceanbase.DBA_OB_LS WHERE FLAG LIKE \"%DUPLICATE%\";\n+-------+--------+--------------+---------------+-------------+---------------------+----------+---------------------+---------------------+-----------+\n| LS_ID | STATUS | PRIMARY_ZONE | UNIT_GROUP_ID | LS_GROUP_ID | CREATE_SCN          | DROP_SCN | SYNC_SCN            | READABLE_SCN        | FLAG      |\n+-------+--------+--------------+---------------+-------------+---------------------+----------+---------------------+---------------------+-----------+\n|  1003 | NORMAL | z1;z2        |             0 |           0 | 1683267390195713284 |     NULL | 1683337744205408139 | 1683337744205408139 | DUPLICATE |\n+-------+--------+--------------+---------------+-------------+---------------------+----------+---------------------+---------------------+-----------+\n1 row in set\n\n\n（可选）在 sys 租户下查看复制表的副本分布，REPLICA_TYPE 字段为副本类型。 obclient> SELECT * FROM oceanbase.CDB_OB_TABLE_LOCATIONS WHERE TABLE_NAME = \"dup_t1\";\n+-----------+---------------+------------+----------+------------+----------------+-------------------+------------+---------------+-----------+-------+------+----------------+----------+----------+--------------+-----------------+\n| TENANT_ID | DATABASE_NAME | TABLE_NAME | TABLE_ID | TABLE_TYPE | PARTITION_NAME | SUBPARTITION_NAME | INDEX_NAME | DATA_TABLE_ID | TABLET_ID | LS_ID | ZONE | SVR_IP         | SVR_PORT | ROLE     | REPLICA_TYPE | DUPLICATE_SCOPE |\n+-----------+---------------+------------+----------+------------+----------------+-------------------+------------+---------------+-----------+-------+------+----------------+----------+----------+--------------+-----------------+\n|      1002 | test          | dup_t1     |   500002 | USER TABLE | NULL           | NULL              | NULL       |          NULL |    200001 |  1003 | z1   | 11.xxx.xxx.xxx |    36125 | LEADER   | FULL         | CLUSTER         |\n|      1002 | test          | dup_t1     |   500002 | USER TABLE | NULL           | NULL              | NULL       |          NULL |    200001 |  1003 | z1   | 11.xxx.xxx.xxx  |    36124 | FOLLOWER | READONLY     | CLUSTER         |\n|      1002 | test          | dup_t1     |   500002 | USER TABLE | NULL           | NULL              | NULL       |          NULL |    200001 |  1003 | z2   | 11.xxx.xxx.xxx |    36127 | FOLLOWER | FULL         | CLUSTER         |\n|      1002 | test          | dup_t1     |   500002 | USER TABLE | NULL           | NULL              | NULL       |          NULL |    200001 |  1003 | z2   | 11.xxx.xxx.xxx |    36126 | FOLLOWER | READONLY     | CLUSTER         |\n|      1002 | test          | dup_t1     |   500002 | USER TABLE | NULL           | NULL              | NULL       |          NULL |    200001 |  1003 | z3   | 11.xxx.xxx.xxx |    36128 | FOLLOWER | READONLY     | CLUSTER         |\n|      1002 | test          | dup_t1     |   500002 | USER TABLE | NULL           | NULL              | NULL       |          NULL |    200001 |  1003 | z3   | 11.xxx.xxx.xxx  |    36129 | FOLLOWER | READONLY     | CLUSTER         |\n+-----------+---------------+------------+----------+------------+----------------+-------------------+------------+---------------+-----------+-------+------+----------------+----------+----------+--------------+-----------------+\n6 rows in set\n\n像普通表一样插入和读写复制表的数据。对于一个读请求，如果使用了 Proxy，读请求可能会路由到任意一个 OBServer 节点；如果直连 OBServer 节点，只要本地副本可读，就会在直连的 OBServer 节点上执行读请求。 obclient> INSERT INTO dup_t1 VALUES(1);\nQuery OK, 1 row affected\n\nobclient> SELECT * FROM dup_t1;\n+------+\n| c1   |\n+------+\n|    1 |\n+------+\n1 row in set\n\n",
            "登录到 sys 租户，创建一个 Unit。",
            "obclient> CREATE RESOURCE UNIT IF NOT EXISTS 2c5g MAX_CPU 2, MEMORY_SIZE '5G';\nQuery OK, 0 rows affected\n",
            "创建一个 Unit Num 为 2 的资源池。",
            "obclient> CREATE RESOURCE POOL tenant_pool UNIT = '2c5g', UNIT_NUM = 2, ZONE_LIST = ('z1', 'z2', 'z3');\nQuery OK, 0 rows affected\n",
            "创建用户租户 obmysql 并指定 Locality 分布。",
            "obclient> CREATE TENANT obmysql resource_pool_list=('tenant_pool'), LOCALITY = \"F@z1, F@z2, R@z3\", PRIMARY_ZONE = \"z1\" SET ob_tcp_invited_nodes='%';\nQuery OK, 0 rows affected\n",
            "登录到步骤 3 所创建的 obmysql 用户租户，创建一个复制表。",
            "obclient> USE test;\nDatabase changed\nobclient> CREATE TABLE dup_t1(c1 INT) DUPLICATE_SCOPE = 'cluster';\nQuery OK, 0 rows affected\n",
            "（可选）查看广播日志流信息，复制表会创建在该日志流上。",
            "obclient> SELECT * FROM oceanbase.DBA_OB_LS WHERE FLAG LIKE \"%DUPLICATE%\";\n+-------+--------+--------------+---------------+-------------+---------------------+----------+---------------------+---------------------+-----------+\n| LS_ID | STATUS | PRIMARY_ZONE | UNIT_GROUP_ID | LS_GROUP_ID | CREATE_SCN          | DROP_SCN | SYNC_SCN            | READABLE_SCN        | FLAG      |\n+-------+--------+--------------+---------------+-------------+---------------------+----------+---------------------+---------------------+-----------+\n|  1003 | NORMAL | z1;z2        |             0 |           0 | 1683267390195713284 |     NULL | 1683337744205408139 | 1683337744205408139 | DUPLICATE |\n+-------+--------+--------------+---------------+-------------+---------------------+----------+---------------------+---------------------+-----------+\n1 row in set\n\n",
            "（可选）在 sys 租户下查看复制表的副本分布，REPLICA_TYPE 字段为副本类型。",
            "obclient> SELECT * FROM oceanbase.CDB_OB_TABLE_LOCATIONS WHERE TABLE_NAME = \"dup_t1\";\n+-----------+---------------+------------+----------+------------+----------------+-------------------+------------+---------------+-----------+-------+------+----------------+----------+----------+--------------+-----------------+\n| TENANT_ID | DATABASE_NAME | TABLE_NAME | TABLE_ID | TABLE_TYPE | PARTITION_NAME | SUBPARTITION_NAME | INDEX_NAME | DATA_TABLE_ID | TABLET_ID | LS_ID | ZONE | SVR_IP         | SVR_PORT | ROLE     | REPLICA_TYPE | DUPLICATE_SCOPE |\n+-----------+---------------+------------+----------+------------+----------------+-------------------+------------+---------------+-----------+-------+------+----------------+----------+----------+--------------+-----------------+\n|      1002 | test          | dup_t1     |   500002 | USER TABLE | NULL           | NULL              | NULL       |          NULL |    200001 |  1003 | z1   | 11.xxx.xxx.xxx |    36125 | LEADER   | FULL         | CLUSTER         |\n|      1002 | test          | dup_t1     |   500002 | USER TABLE | NULL           | NULL              | NULL       |          NULL |    200001 |  1003 | z1   | 11.xxx.xxx.xxx  |    36124 | FOLLOWER | READONLY     | CLUSTER         |\n|      1002 | test          | dup_t1     |   500002 | USER TABLE | NULL           | NULL              | NULL       |          NULL |    200001 |  1003 | z2   | 11.xxx.xxx.xxx |    36127 | FOLLOWER | FULL         | CLUSTER         |\n|      1002 | test          | dup_t1     |   500002 | USER TABLE | NULL           | NULL              | NULL       |          NULL |    200001 |  1003 | z2   | 11.xxx.xxx.xxx |    36126 | FOLLOWER | READONLY     | CLUSTER         |\n|      1002 | test          | dup_t1     |   500002 | USER TABLE | NULL           | NULL              | NULL       |          NULL |    200001 |  1003 | z3   | 11.xxx.xxx.xxx |    36128 | FOLLOWER | READONLY     | CLUSTER         |\n|      1002 | test          | dup_t1     |   500002 | USER TABLE | NULL           | NULL              | NULL       |          NULL |    200001 |  1003 | z3   | 11.xxx.xxx.xxx  |    36129 | FOLLOWER | READONLY     | CLUSTER         |\n+-----------+---------------+------------+----------+------------+----------------+-------------------+------------+---------------+-----------+-------+------+----------------+----------+----------+--------------+-----------------+\n6 rows in set\n",
            "像普通表一样插入和读写复制表的数据。对于一个读请求，如果使用了 Proxy，读请求可能会路由到任意一个 OBServer 节点；如果直连 OBServer 节点，只要本地副本可读，就会在直连的 OBServer 节点上执行读请求。",
            "obclient> INSERT INTO dup_t1 VALUES(1);\nQuery OK, 1 row affected\n\nobclient> SELECT * FROM dup_t1;\n+------+\n| c1   |\n+------+\n|    1 |\n+------+\n1 row in set\n",
            "创建列存表 tbl1_cg。",
            "CREATE TABLE tbl1_cg (col1 INT PRIMARY KEY, col2 VARCHAR(50)) WITH COLUMN GROUP(each column);\n",
            "创建带列存索引的表。",
            "CREATE TABLE tbl2_cg (col1 INT PRIMARY KEY, col2 INT, col3 INT, INDEX i1 (col2) WITH COLUMN GROUP(each column));\n",
            "创建带列存索引的列存表。",
            "CREATE TABLE tbl3_cg (col1 INT PRIMARY KEY, col2 INT, col3 INT, INDEX i1 (col2) WITH COLUMN GROUP(each column)) WITH COLUMN GROUP(each column);\n",
            "创建表时标识列 Skip Index 属性。",
            "CREATE TABLE test_skidx(\n  col1 INT SKIP_INDEX(MIN_MAX, SUM),\n  col2 FLOAT SKIP_INDEX(MIN_MAX),\n  col3 VARCHAR(1024) SKIP_INDEX(MIN_MAX),\n  col4 CHAR(10)\n);\n",
            "创建表 tbl1，它有一个整数类型的列 col1，并且指定该操作应用 5 个并行度来完成，指定了新表 tbl1 的数据内容将来源于表 tbl2 的查询结果。",
            "CREATE /*+ parallel(5) */ TABLE tbl1 (col1 INT) AS SELECT col1 FROM tbl2;\n"
        ]
    },
    "CREATE TABLEGROUP": {
        "Title": [
            "CREATE TABLEGROUP"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053530"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "CREATE TABLEGROUP tablegroup_name [tablegroup_option];\n\ntablegroup_option:\n   SHARDING = 'NONE' | 'PARTITION' | 'ADAPTIVE'\n",
        "Description": [
            "该语句用来创建表组。",
            "表组主要用于创建一组具有相同分布特征的表，具有相同分布特征的表在进行连接操作时，可以在本地进行，避免跨节点的数据请求。",
            "创建表组需要当前用户拥有全局 CREATE 权限。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\ntablegroup_name\n表组名称，最长 64 个字符，字符只能有大小写英文字母，数字和下划线，而且必须以字母或下划线开头，并且不能使用 OceanBase 数据库的关键字。如果要创建的表组名称已存在，并且没有指定 IF NOT EXISTS，则会出现错误。\n\n\nSHARDING\n表组的属性。如果不指定 SHARDING 属性，则默认创建 ADAPTIVE 的表组。SHARDING 取值如下： \n      \nNONE：对加入表组的表没有限制。\nPARTITION：加入表组的表对应的一级分区，需要与表组中所有表的一级分区的分区方式一致，包括分区类型、分区个数和分区值。\nADAPTIVE：加入表组的表对应的一级分区和二级分区，需要与表组中所有表的一级分区和二级分区的分区方式一致，包括分区类型、分区个数和分区值。加入表组中的表必须只能为同一类分区表（一级分区表或者二级分区表）\n相同的分区方式包括： \n      \n分区类型相同（例如都是 Hash+Range 分区）。\n如果是 Hash 分区，要求引用的列数相同，并且分区个数相同。\n如果是 Range 分区，要求引用的列数相同，并且分区数相同，Range 分割点相同。\n对于二级分区，根据其分区类型，要求和上述一致。\n\n\n"
        ],
        "Examples": [
            "obclient> CREATE TABLEGROUP myTableGroup1;\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE myt1 (c1 INT, c2 INT ) TABLEGROUP = myTableGroup1;\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE myt2 (c1 INT, c2 INT ) TABLEGROUP = myTableGroup1;\nQuery OK, 0 rows affected\n",
            "obclient> CREATE TABLEGROUP tblgroup1 SHARDING = 'NONE';\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl1 (col INT) TABLEGROUP = tblgroup1;\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2 (col1 BIGINT PRIMARY KEY,col2 VARCHAR(50)) TABLEGROUP = tblgroup1\n    PARTITION BY LIST(col1)\n      (PARTITION p0 VALUES IN (1, 2, 3),\n       PARTITION p1 VALUES IN (5, 6),\n       PARTITION p2 VALUES IN (DEFAULT)\n       );\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl3(col1 INT,col2 varchar(50)) TABLEGROUP = tblgroup1\n    PARTITION BY LIST(col1) SUBPARTITION BY LIST COLUMNS(col2)\n   (PARTITION p0 VALUES in (01)\n      (SUBPARTITION mp0 VALUES in ('01'),\n       SUBPARTITION mp1 VALUES in ('02'),\n       SUBPARTITION mp2 VALUES in ('03')),\n    PARTITION p1 VALUES in (02)\n      (SUBPARTITION mp3 VALUES in ('01'),\n       SUBPARTITION mp4 VALUES in ('02'),\n       SUBPARTITION mp5 VALUES in ('03'))\n     );\nQuery OK, 0 rows affected\n",
            "obclient> CREATE TABLEGROUP tblgroup2 SHARDING = 'PARTITION';\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl1 (col1 BIGINT PRIMARY KEY,col2 VARCHAR(50)) TABLEGROUP = tblgroup2\n    PARTITION BY LIST(col1)\n      (PARTITION p0 VALUES IN (1, 2, 3),\n       PARTITION p1 VALUES IN (5, 6),\n       PARTITION p2 VALUES IN (DEFAULT)\n      );\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2 (col1 BIGINT PRIMARY KEY,col2 VARCHAR(50)) TABLEGROUP = tblgroup2\n  PARTITION BY LIST(col1)\n    (PARTITION p0 VALUES IN (1, 2, 3),\n     PARTITION p1 VALUES IN (5, 6),\n     PARTITION p2 VALUES IN (DEFAULT)\n     );\nQuery OK, 0 rows affected\n",
            "obclient> CREATE TABLEGROUP tblgroup3 SHARDING = 'PARTITION';\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl1 (col INT) TABLEGROUP = tblgroup3;\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2 (col1 BIGINT PRIMARY KEY,col2 VARCHAR(50)) TABLEGROUP = tblgroup3\n    PARTITION BY LIST(col1)\n      (PARTITION p0 VALUES IN (1, 2, 3),\n       PARTITION p1 VALUES IN (5, 6),\n       PARTITION p2 VALUES IN (DEFAULT)\n       );\nERROR 4179 (HY000): not all tables are non-partitioned or partitioned, add table to tablegroup not allowed\n",
            "obclient> CREATE TABLEGROUP tblgroup4 SHARDING = 'PARTITION';\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl1 (col1 BIGINT PRIMARY KEY,col2 VARCHAR(50)) TABLEGROUP = tblgroup4\n    PARTITION BY LIST(col1)\n      (PARTITION p0 VALUES IN (1, 2, 3),\n       PARTITION p1 VALUES IN (5, 6),\n       PARTITION p2 VALUES IN (DEFAULT)\n       );\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2 (col1 BIGINT PRIMARY KEY,col2 VARCHAR(50)) TABLEGROUP = tblgroup4\n    PARTITION BY LIST(col1)\n      (PARTITION p0 VALUES IN (1, 2, 3),\n       PARTITION p1 VALUES IN (5, 7),\n       PARTITION p2 VALUES IN (DEFAULT)\n       );\nERROR 4179 (HY000): list_part partition value not equal, add table to tablegroup not allowed\n",
            "obclient> CREATE TABLEGROUP tblgroup5 SHARDING = 'ADAPTIVE';\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl1(col1 INT,col2 VARCHAR(50)) TABLEGROUP = tblgroup5\n    PARTITION BY LIST(col1) SUBPARTITION BY LIST COLUMNS(col2)\n      (PARTITION p0 VALUES in (01)\n         (SUBPARTITION mp0 VALUES in ('01'),\n          SUBPARTITION mp1 VALUES in ('02'),\n          SUBPARTITION mp2 VALUES in ('03')),\n       PARTITION p1 VALUES in (02)\n         (SUBPARTITION mp3 VALUES in ('01'),\n          SUBPARTITION mp4 VALUES in ('02'),\n          SUBPARTITION mp5 VALUES in ('03'))\n      );\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2(col1 INT,col2 VARCHAR(50)) TABLEGROUP = tblgroup5\n    PARTITION BY LIST(col1) SUBPARTITION BY LIST COLUMNS(col2)\n      (PARTITION p0 VALUES in (01)\n         (SUBPARTITION mp0 VALUES in ('01'),\n          SUBPARTITION mp1 VALUES in ('02'),\n          SUBPARTITION mp2 VALUES in ('03')),\n       PARTITION p1 VALUES in (02)\n         (SUBPARTITION mp3 VALUES in ('01'),\n          SUBPARTITION mp4 VALUES in ('02'),\n          SUBPARTITION mp5 VALUES in ('03'))\n       );\nQuery OK, 0 rows affected\n",
            "obclient> CREATE TABLEGROUP tblgroup6 SHARDING = 'ADAPTIVE';\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl1 (col int) TABLEGROUP = tblgroup6;\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2(col1 INT,col2 VARCHAR(50)) TABLEGROUP = tblgroup6\n    PARTITION BY LIST(col1) SUBPARTITION BY LIST COLUMNS(col2)\n      (PARTITION p0 VALUES in (01)\n         (SUBPARTITION mp0 VALUES in ('01'),\n          SUBPARTITION mp1 VALUES in ('02'),\n          SUBPARTITION mp2 VALUES in ('03')\n       ),\n      PARTITION p1 VALUES in (02)\n         (SUBPARTITION mp3 VALUES in ('01'),\n          SUBPARTITION mp4 VALUES in ('02'),\n          SUBPARTITION mp5 VALUES in ('03'))\n       );\nERROR 4179 (HY000): not all tables are non-partitioned or partitioned, add table to tablegroup not allowed\n",
            "obclient> CREATE TABLEGROUP tblgroup7 SHARDING = 'ADAPTIVE';\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl1(col1 INT,col2 VARCHAR(50)) TABLEGROUP = tblgroup7\n    PARTITION BY LIST(col1) SUBPARTITION BY LIST COLUMNS(col2)\n      (PARTITION p0 VALUES in (01)\n        (SUBPARTITION mp0 VALUES in ('01'),\n          SUBPARTITION mp1 VALUES in ('02'),\n          SUBPARTITION mp2 VALUES in ('03')\n          ),\n       PARTITION p1 VALUES in (02)\n          (SUBPARTITION mp3 VALUES in ('01'),\n           SUBPARTITION mp4 VALUES in ('02'),\n           SUBPARTITION mp5 VALUES in ('03'))\n      );\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2(col1 INT,col2 VARCHAR(50)) TABLEGROUP = tblgroup7\n    PARTITION BY LIST(col1) SUBPARTITION BY LIST COLUMNS(col2)\n      (PARTITION p0 VALUES in (01)\n         (SUBPARTITION mp0 VALUES in ('01'),\n          SUBPARTITION mp1 VALUES in ('02')),\n       PARTITION p1 VALUES in (02)\n         (SUBPARTITION mp3 VALUES in ('01'),\n          SUBPARTITION mp4 VALUES in ('02'))\n       );\nERROR 4179 (HY000): subpartition num not matched, add table to tablegroup not allowed\n"
        ],
        "Detailed Examples": [
            "创建名为 myTableGroup1 的表组，并将非分区表 myt1 和 myt2 加入到表组中。",
            "obclient> CREATE TABLEGROUP myTableGroup1;\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE myt1 (c1 INT, c2 INT ) TABLEGROUP = myTableGroup1;\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE myt2 (c1 INT, c2 INT ) TABLEGROUP = myTableGroup1;\nQuery OK, 0 rows affected\n",
            "创建名为 tblgroup1 的表组，其 SHARDING 属性为 NONE，并将非分区表 tbl1 、一级分区表 tbl2、二级分区表 tbl3 加入到表组中。",
            "obclient> CREATE TABLEGROUP tblgroup1 SHARDING = 'NONE';\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl1 (col INT) TABLEGROUP = tblgroup1;\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2 (col1 BIGINT PRIMARY KEY,col2 VARCHAR(50)) TABLEGROUP = tblgroup1\n    PARTITION BY LIST(col1)\n      (PARTITION p0 VALUES IN (1, 2, 3),\n       PARTITION p1 VALUES IN (5, 6),\n       PARTITION p2 VALUES IN (DEFAULT)\n       );\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl3(col1 INT,col2 varchar(50)) TABLEGROUP = tblgroup1\n    PARTITION BY LIST(col1) SUBPARTITION BY LIST COLUMNS(col2)\n   (PARTITION p0 VALUES in (01)\n      (SUBPARTITION mp0 VALUES in ('01'),\n       SUBPARTITION mp1 VALUES in ('02'),\n       SUBPARTITION mp2 VALUES in ('03')),\n    PARTITION p1 VALUES in (02)\n      (SUBPARTITION mp3 VALUES in ('01'),\n       SUBPARTITION mp4 VALUES in ('02'),\n       SUBPARTITION mp5 VALUES in ('03'))\n     );\nQuery OK, 0 rows affected\n",
            "创建名为 tblgroup2 的表组，其 SHARDING 属性为 PARTITION，并将分区表 tbl1 和分区表 tbl2 加入到表组中，两者的分区方式一致。",
            "obclient> CREATE TABLEGROUP tblgroup2 SHARDING = 'PARTITION';\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl1 (col1 BIGINT PRIMARY KEY,col2 VARCHAR(50)) TABLEGROUP = tblgroup2\n    PARTITION BY LIST(col1)\n      (PARTITION p0 VALUES IN (1, 2, 3),\n       PARTITION p1 VALUES IN (5, 6),\n       PARTITION p2 VALUES IN (DEFAULT)\n      );\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2 (col1 BIGINT PRIMARY KEY,col2 VARCHAR(50)) TABLEGROUP = tblgroup2\n  PARTITION BY LIST(col1)\n    (PARTITION p0 VALUES IN (1, 2, 3),\n     PARTITION p1 VALUES IN (5, 6),\n     PARTITION p2 VALUES IN (DEFAULT)\n     );\nQuery OK, 0 rows affected\n",
            "创建名为 tblgroup3 的表组，其 SHARDING 属性为 PARTITION，非分区表 tbl1 和分区表 tbl2 不能同时加入到该表组中。",
            "obclient> CREATE TABLEGROUP tblgroup3 SHARDING = 'PARTITION';\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl1 (col INT) TABLEGROUP = tblgroup3;\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2 (col1 BIGINT PRIMARY KEY,col2 VARCHAR(50)) TABLEGROUP = tblgroup3\n    PARTITION BY LIST(col1)\n      (PARTITION p0 VALUES IN (1, 2, 3),\n       PARTITION p1 VALUES IN (5, 6),\n       PARTITION p2 VALUES IN (DEFAULT)\n       );\nERROR 4179 (HY000): not all tables are non-partitioned or partitioned, add table to tablegroup not allowed\n",
            "创建名为 tblgroup4 的表组，其 SHARDING 属性为 PARTITION，分区表 tbl1 和分区表 tbl2 的分区值不一致，不能同时加入到表组中。",
            "obclient> CREATE TABLEGROUP tblgroup4 SHARDING = 'PARTITION';\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl1 (col1 BIGINT PRIMARY KEY,col2 VARCHAR(50)) TABLEGROUP = tblgroup4\n    PARTITION BY LIST(col1)\n      (PARTITION p0 VALUES IN (1, 2, 3),\n       PARTITION p1 VALUES IN (5, 6),\n       PARTITION p2 VALUES IN (DEFAULT)\n       );\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2 (col1 BIGINT PRIMARY KEY,col2 VARCHAR(50)) TABLEGROUP = tblgroup4\n    PARTITION BY LIST(col1)\n      (PARTITION p0 VALUES IN (1, 2, 3),\n       PARTITION p1 VALUES IN (5, 7),\n       PARTITION p2 VALUES IN (DEFAULT)\n       );\nERROR 4179 (HY000): list_part partition value not equal, add table to tablegroup not allowed\n",
            "创建名为 tblgroup5 的表组，其 SHARDING 属性为 ADAPTIVE，并将分区表 tbl1 和分区表 tbl2 加入到表组中，两者的分区方式一致。",
            "obclient> CREATE TABLEGROUP tblgroup5 SHARDING = 'ADAPTIVE';\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl1(col1 INT,col2 VARCHAR(50)) TABLEGROUP = tblgroup5\n    PARTITION BY LIST(col1) SUBPARTITION BY LIST COLUMNS(col2)\n      (PARTITION p0 VALUES in (01)\n         (SUBPARTITION mp0 VALUES in ('01'),\n          SUBPARTITION mp1 VALUES in ('02'),\n          SUBPARTITION mp2 VALUES in ('03')),\n       PARTITION p1 VALUES in (02)\n         (SUBPARTITION mp3 VALUES in ('01'),\n          SUBPARTITION mp4 VALUES in ('02'),\n          SUBPARTITION mp5 VALUES in ('03'))\n      );\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2(col1 INT,col2 VARCHAR(50)) TABLEGROUP = tblgroup5\n    PARTITION BY LIST(col1) SUBPARTITION BY LIST COLUMNS(col2)\n      (PARTITION p0 VALUES in (01)\n         (SUBPARTITION mp0 VALUES in ('01'),\n          SUBPARTITION mp1 VALUES in ('02'),\n          SUBPARTITION mp2 VALUES in ('03')),\n       PARTITION p1 VALUES in (02)\n         (SUBPARTITION mp3 VALUES in ('01'),\n          SUBPARTITION mp4 VALUES in ('02'),\n          SUBPARTITION mp5 VALUES in ('03'))\n       );\nQuery OK, 0 rows affected\n",
            "创建名为 tblgroup6 的表组，其 SHARDING 属性为 ADAPTIVE，非分区表 tbl1 和分区表 tbl2 不能同时加入到表组中。",
            "obclient> CREATE TABLEGROUP tblgroup6 SHARDING = 'ADAPTIVE';\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl1 (col int) TABLEGROUP = tblgroup6;\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2(col1 INT,col2 VARCHAR(50)) TABLEGROUP = tblgroup6\n    PARTITION BY LIST(col1) SUBPARTITION BY LIST COLUMNS(col2)\n      (PARTITION p0 VALUES in (01)\n         (SUBPARTITION mp0 VALUES in ('01'),\n          SUBPARTITION mp1 VALUES in ('02'),\n          SUBPARTITION mp2 VALUES in ('03')\n       ),\n      PARTITION p1 VALUES in (02)\n         (SUBPARTITION mp3 VALUES in ('01'),\n          SUBPARTITION mp4 VALUES in ('02'),\n          SUBPARTITION mp5 VALUES in ('03'))\n       );\nERROR 4179 (HY000): not all tables are non-partitioned or partitioned, add table to tablegroup not allowed\n",
            "创建名为 tblgroup7 的表组，其 SHARDING 属性为 ADAPTIVE，由于分区表 tbl1 和分区表 tbl2 的一级分区的分区类型相同，二级分区分区类型不同（二级分区个数不同），所以不能同时加入到表组中。",
            "obclient> CREATE TABLEGROUP tblgroup7 SHARDING = 'ADAPTIVE';\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl1(col1 INT,col2 VARCHAR(50)) TABLEGROUP = tblgroup7\n    PARTITION BY LIST(col1) SUBPARTITION BY LIST COLUMNS(col2)\n      (PARTITION p0 VALUES in (01)\n        (SUBPARTITION mp0 VALUES in ('01'),\n          SUBPARTITION mp1 VALUES in ('02'),\n          SUBPARTITION mp2 VALUES in ('03')\n          ),\n       PARTITION p1 VALUES in (02)\n          (SUBPARTITION mp3 VALUES in ('01'),\n           SUBPARTITION mp4 VALUES in ('02'),\n           SUBPARTITION mp5 VALUES in ('03'))\n      );\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE tbl2(col1 INT,col2 VARCHAR(50)) TABLEGROUP = tblgroup7\n    PARTITION BY LIST(col1) SUBPARTITION BY LIST COLUMNS(col2)\n      (PARTITION p0 VALUES in (01)\n         (SUBPARTITION mp0 VALUES in ('01'),\n          SUBPARTITION mp1 VALUES in ('02')),\n       PARTITION p1 VALUES in (02)\n         (SUBPARTITION mp3 VALUES in ('01'),\n          SUBPARTITION mp4 VALUES in ('02'))\n       );\nERROR 4179 (HY000): subpartition num not matched, add table to tablegroup not allowed\n"
        ]
    },
    "CREATE TABLESPACE": {
        "Title": [
            "CREATE TABLESPACE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053473"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "CREATE TABLESPACE tablespace_name [ENCRYPTION [=] 'tablespace_encryption_option'];\n\ntablespace_encryption_option:\n    N\n    | Y\n    | AES-256\n    | AES-256-GCM\n    | AES-128\n    | AES-128-GCM\n    | AES-192\n    | AES-192-GCM\n    | SM4-CBC\n    | SM4-GCM\n  CREATE TABLESPACE tablespace_name\n  [ADD DATAFILE 'file_name']\n  [FILE_BLOCK_SIZE = value]\n  USE LOGFILE GROUP logfile_group\n  [EXTENT_SIZE [=] extent_size]\n  [INITIAL_SIZE [=] initial_size]\n  [AUTOEXTEND_SIZE [=] autoextend_size]\n  [MAX_SIZE [=] max_size]\n  [NODEGROUP [=] nodegroup_id]\n  [WAIT]\n  [COMMENT [=] 'string']\n  [ENGINE [=] engine_name]\n",
        "Description": [
            "该语句用来创建 TableSpace（表空间）逻辑对象，TableSpace 属性支持加密。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\ntablespace_name\n指定要创建的 TableSpace 对象名称。\n\n\nENCRYPTION\n可选项，指定加密所使用的关键字，用于指定 TableSpace 所使用的加密算法。如果不通过关键字 ENCRYPTION 指定加密算法，则默认创建不加密的 TableSpace。加密算法的详细介绍，请参见下文 tablespace_encryption_option。\n\n\n",
            "tablespace_encryption_option",
            "N",
            "：表示不加密。",
            "Y",
            "：如果使用 ",
            "Y",
            "，则表示默认使用 ",
            "AES-256",
            "。",
            "AES-256",
            "：使用 256 位密钥进行加密和解密。",
            "AES-256-GCM",
            "：使用 256 位密钥的 GCM 模式。",
            "AES-128",
            "：使用 128 位密钥进行加密和解密。",
            "AES-128-GCM",
            "：使用 128 位密钥的 GCM 模式。",
            "AES-192",
            "：使用 192 位密钥进行加密和解密。",
            "AES-192-GCM",
            "：使用 192 位密钥的 GCM 模式。",
            "SM4-CBC",
            "：SM4 算法采用 CBC 模式，其中每个数据块都与前一个块加密后的输出进行异或操作再进行加密。",
            "SM4-GCM",
            "：SM4 算法采用 GCM 模式，此模式下 SM4 同时提供了数据加密和认证功能。",
            "\n说明\n\n\nAES (Advanced Encryption Standard) 是一个对称加密算法，意味着相同的密钥用于加密和解密数据。AES 算法本身是基于区块加密的，通常以 128 位的区块对数据进行加密。\nAES-GCM (Galois/Counter Mode) 是一种操作模式，用于对区块加密算法（如 AES）进行处理，提供加密和数据认证（也称为消息认证码）。\nSM4 算法的区块长度是 128 位，密钥长度也是 128 位。\n\n\n"
        ],
        "Examples": [
            "CREATE TABLESPACE tablespace001;\n",
            "ALTER SYSTEM SET tde_method = 'internal';\n",
            "SHOW PARAMETERS LIKE 'tde_method';\n",
            "ALTER INSTANCE ROTATE INNODB MASTER KEY;\n",
            "CREATE TABLESPACE tablespace002 ENCRYPTION = 'SM4-GCM';\n"
        ],
        "Detailed Examples": [
            "创建一个未加密的 TableSpace 对象。",
            "CREATE TABLESPACE tablespace001;\n",
            "创建一个使用透明数据加密 (TDE) 的 TableSpace 对象。",
            "\n设置加密方式为内置的透明加密。 ALTER SYSTEM SET tde_method = 'internal';\n\n显示当前加密方式的配置。 SHOW PARAMETERS LIKE 'tde_method';\n\n生成新的主加密密钥。 ALTER INSTANCE ROTATE INNODB MASTER KEY;\n\n\n注意\n尽管该命令可执行，但如果磁盘空间已满，则生成新的主加密密钥将无法完成。\n\n创建一个名为 tablespace2 的加密表空间，使用 SM4-GCM 加密算法。 CREATE TABLESPACE tablespace002 ENCRYPTION = 'SM4-GCM';\n\n",
            "设置加密方式为内置的透明加密。",
            "ALTER SYSTEM SET tde_method = 'internal';\n",
            "显示当前加密方式的配置。",
            "SHOW PARAMETERS LIKE 'tde_method';\n",
            "生成新的主加密密钥。",
            "ALTER INSTANCE ROTATE INNODB MASTER KEY;\n",
            "\n注意\n尽管该命令可执行，但如果磁盘空间已满，则生成新的主加密密钥将无法完成。\n",
            "创建一个名为 tablespace2 的加密表空间，使用 SM4-GCM 加密算法。",
            "CREATE TABLESPACE tablespace002 ENCRYPTION = 'SM4-GCM';\n"
        ]
    },
    "CREATE USER": {
        "Title": [
            "CREATE USER"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053459"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "CREATE USER [IF NOT EXISTS] {user [, user...]}\n    [REQUIRE {NONE | SSL | X509 | tls_option}]\n    [WITH resource_option [resource_option...]];\n\nuser:\n      user_name\n    | user_name IDENTIFIED [WITH auth_plugin] BY password\n    | user_name IDENTIFIED [WITH auth_plugin] BY PASSWORD password\n\ntls_option:\n      CIPHER cipher_name\n    | ISSUER issuer_name\n    | SUBJECT subject_name\n\nresource_option:\n      MAX_CONNECTIONS_PER_HOUR integer\n    | MAX_USER_CONNECTIONS integer  \n",
        "Description": [
            "CREATE USER 语句用于创建新的 OceanBase 数据库用户。创建新用户后，可以使用新用户连接 OceanBase 数据库。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nIF NOT EXISTS\n用于指示如果用户名已存在，则不进行创建。创建用户时，如果要创建的用户名已存在且没有指定 IF NOT EXISTS，则会报错。\n\n\nuser_name\n用户名，新建用户后，mysql.user 表会新增一行该用户的表项。可同时创建多个用户时，使用英文逗号（,）隔开。\n\n\nauth_plugin\n用于指定用户身份验证的方式，目前仅支持 mysql_native_password 身份验证插件。\n\n\nIDENTIFIED BY password\n为待创建的用户创建一个密码，此处密码为明文，存入 mysql.user 表后，服务器端会变为密文存储下来。如果密码中包含特殊字符 ~!@#%^&*_-+=`|(){}[]:;‘,.?/，需使用英文引号（’ 或 \"）包含。\n\n\nIDENTIFIED BY PASSWORD password\n为待创建的用户创建一个密码，此处密码为密文，将直接存入 mysql.user 表。\n\n\nREQUIRE\n指定用户的密码验证要求，有如下几种取值。 \n      \nNONE：表示用户没有密码验证要求，意味着用户可以使用任何密码或不设置密码。\nSSL：表示用户必须使用 SSL 连接进行身份验证。\nX509：表示用户必须使用 X509 证书进行身份验证。\ntls_option：表示用户必须满足指定的 TLS（Transport Layer Security）要求。\n\n\n\ntls_option\n指定 TLS 要求的具体选项。 \n      \nCIPHER：用于指定 TLS 连接使用的加密算法或密码套件。\nISSUER：用于指定 TLS 证书的发行者（Issuer）。\nSUBJECT：用于指定 TLS 证书的主题（Subject）。\n\n\n\nresource_option\n指定用户的资源选项，指定多个资源选项时，使用英文空格隔开。 \n      \nMAX_CONNECTIONS_PER_HOUR：用于指定每小时允许的最大连接数，integer 是一个整数，表示允许的最大连接数。\nMAX_USER_CONNECTIONS：用于指定每个用户允许的最大连接数，integer 是一个整数，表示允许的最大连接数。\n\n\n\n"
        ],
        "Examples": [
            "obclient> CREATE USER IF NOT EXISTS test1 IDENTIFIED BY '********', test2 IDENTIFIED BY '********' WITH MAX_USER_CONNECTIONS 10;\n",
            "obclient> CREATE USER IF NOT EXISTS test3 IDENTIFIED BY PASSWORD '********' REQUIRE SSL;\n",
            "obclient> CREATE USER IF NOT EXISTS test4 IDENTIFIED WITH mysql_native_password BY PASSWORD '********';\n"
        ],
        "Detailed Examples": [
            "创建用户 test1 和 test2，并指定明文密码及用户允许的最大连接数",
            "obclient> CREATE USER IF NOT EXISTS test1 IDENTIFIED BY '********', test2 IDENTIFIED BY '********' WITH MAX_USER_CONNECTIONS 10;\n",
            "创建用户 test3，指定密文密码，同时指定必须使用 SSL 连接进行身份验证",
            "obclient> CREATE USER IF NOT EXISTS test3 IDENTIFIED BY PASSWORD '********' REQUIRE SSL;\n",
            "创建用户 test4，并指定需使用 mysql_native_password 身份验证插件",
            "obclient> CREATE USER IF NOT EXISTS test4 IDENTIFIED WITH mysql_native_password BY PASSWORD '********';\n"
        ]
    },
    "CREATE VIEW": {
        "Title": [
            "CREATE VIEW"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053484"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "create_view_stmt:\n  CREATE [OR REPLACE] VIEW view_name [(column_name_list)] AS select_stmt [WHERE condition WITH {LOCAL | CASCADED} CHECK OPTION];\n\ncolumn_name_list:\n    column_name [, column_name ...]\n",
        "Description": [
            "该语句用于创建视图，如果指定了 OR REPLACE 子句，该语句能够替换已有的视图。",
            "视图在数据库中实际上并不是以表的形式存在，视图是作为在 CREATE VIEW 语句中指定的 SELECT 语句的结果而派生出来的，每次使用时视图就会派生。",
            "如果 FROM 子句中引用了两个或多个表或视图，则称该视图为连接视图（Join View）。一个可更新的连接视图，也称为可修改的连接视图，涉及两个或多个基表或视图，并允许 DML 操作。可更新的视图不受限于 WITH READ ONLY 子句。",
            "要实现可更新，视图必须满足多个条件。例如，其中一条通用规则就是对于连接视图的 INSERT、UPDATE 或 DELETE 操作一次只能修改一个基表。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nOR REPLACE\n表示如果要创建的视图名称已存在，则使用新的定义重新创建视图。\n\n\nview_name\n视图名。\n\n\nselect_stmt\n是一种 SELECT 语句。它给出了视图的定义。该语句可以从基表或其他视图进行选择。\n\n\ncolumn_name_list\n视图必须具有唯一的列名，不得有重复，就像基表那样。缺省情况下，由 SELECT 语句检索的列名将用作视图列名。要想为视图列定义明确的名称，可使用可选的 column_name_list 子句，ID 之间使用逗号分隔。column_name_list 中的名称数目必须等于 SELECT语句检索的列数。SELECT 语句检索的列可以是对表列的简单引用。也可以是使用函数、常量值、运算符等的表达式。\n\n\nWHERE condition WITH CHECK OPTION\nWITH CHECK OPTION 是一种用于创建视图的语法，它用于确保插入或更新的数据满足视图的定义条件。在 MySQL 模式中，WITH CHECK OPTION 子句还可以与 LOCAL/CASCADED 关键字一起使用，以进一步指定数据检查的范围。这两种关键字的区别在于数据检查的范围： \n      \nWITH LOCAL CHECK OPTION ：对本视图进行检查，是否对引用的视图进行检查取决于被引用视图的定义。\nWITH CASCADED CHECK OPTION ：对本视图进行检查，并递归地对引用的所有视图进行检查。\n\n\n\n"
        ],
        "Examples": [
            "obclient> CREATE OR REPLACE VIEW v(vc1, vc2) AS SELECT c1, c2 FROM t;\n",
            "obclient> create table test99(a int);\nQuery OK, 0 rows affected (0.090 sec)\n\nobclient> insert into test99 values(0), (1), (2), (3);\nQuery OK, 4 rows affected (0.046 sec)\nRecords: 4  Duplicates: 0  Warnings: 0\n\nobclient> CREATE OR REPLACE VIEW view1 AS SELECT * FROM test99 WHERE a > 0 WITH LOCAL CHECK OPTION;\nQuery OK, 0 rows affected (0.065 sec)\n",
            "obclient> CREATE OR REPLACE VIEW view2 AS SELECT * FROM view1 WHERE a > 1 WITH CASCADED CHECK OPTION;\nQuery OK, 0 rows affected (0.073 sec)\n"
        ],
        "Detailed Examples": [
            "选择表 t 中的 c1、c2 列来创建视图 v。",
            "obclient> CREATE OR REPLACE VIEW v(vc1, vc2) AS SELECT c1, c2 FROM t;\n",
            "使用 LOCAL CHECK OPTION 创建视图 view1。",
            "obclient> create table test99(a int);\nQuery OK, 0 rows affected (0.090 sec)\n\nobclient> insert into test99 values(0), (1), (2), (3);\nQuery OK, 4 rows affected (0.046 sec)\nRecords: 4  Duplicates: 0  Warnings: 0\n\nobclient> CREATE OR REPLACE VIEW view1 AS SELECT * FROM test99 WHERE a > 0 WITH LOCAL CHECK OPTION;\nQuery OK, 0 rows affected (0.065 sec)\n",
            "使用 CASCADED CHECK OPTION 语法，基于视图 view1 创建视图 view2。",
            "obclient> CREATE OR REPLACE VIEW view2 AS SELECT * FROM view1 WHERE a > 1 WITH CASCADED CHECK OPTION;\nQuery OK, 0 rows affected (0.073 sec)\n"
        ]
    },
    "DEALLOCATE PREPARE": {
        "Title": [
            "DEALLOCATE PREPARE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053524"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "{DEALLOCATE | DROP} PREPARE stmt_name\n",
        "Description": [
            "该语句用于删除准备语句。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nstmt_name\n准备语句的名称。\n\n\n"
        ],
        "Examples": [
            "obclient> PREPARE stmt1 FROM 'PURGE RECYCLEBIN';\nQuery OK, 0 rows affected\n\nobclient> DROP PREPARE stmt1;\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "删除准备的语句。",
            "obclient> PREPARE stmt1 FROM 'PURGE RECYCLEBIN';\nQuery OK, 0 rows affected\n\nobclient> DROP PREPARE stmt1;\nQuery OK, 0 rows affected\n"
        ]
    },
    "DELETE": {
        "Title": [
            "DELETE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053489"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "Single-Table-Delete Syntax:\n    DELETE [hint_options] FROM table_name\n    [PARTITION (partition_name,...)]\n    [WHERE where_condition]\n    [ORDER BY order_expression_list]\n    [LIMIT row_count]\n\nMultiple-Table-Delete Syntax:\n    DELETE [hint_options] table_name[.*] [, table_name[.*]] ...\n    FROM table_references\n    [WHERE where_condition]\nOr:\n    DELETE [hint_options] FROM table_name[.*] [, table_name[.*]] ...\n    USING table_references\n    [WHERE where_condition]\n\nwhere_condition:\n    expression\n\norder_expression_list:\n    order_expression [, order_expression ...]\n\norder_expression:\n    expression [ASC | DESC]\n\nlimit_row_count:\n    INT_VALUE\n\ntable_references:\n    {table_name | joined_table | table_subquery | select_with_parents} [, ...]\n\n",
        "Description": [
            "该语句用来删除表中符合条件的行，包括单表删除及多表删除两种方式。",
            "无论是多表删除还是单表删除都不支持直接对子查询进行删除操作，例如 DELETE FROM (SELECT * FROM t1);。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nhint_options\n指定 hint 选项。\n\n\ntable_name\n指定需要删除的表名。\n\n\npartition_name\n需要删除表的对应分区名。\n\n\nwhere_condition\n删除的表需要满足的过滤条件。\n\n\norder_expression_list\n删除的表的排序键列表。\n\n\nrow_count\n指定待删除的表的行数。指定的值只能为整数。\n\n\ntable_references\n多表删除时指定的待选择的表序列。\n\n\n"
        ],
        "Examples": [
            "obclient> CREATE TABLE t1(c1 INT PRIMARY KEY, c2 INT);\nQuery OK, 0 rows affected\nobclient> SELECT * FROM t1;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  1 |    1 |\n|  2 |    2 |\n|  3 |    3 |\n|  4 |    4 |\n+----+------+\n4 rows in set\n\nobclient> CREATE TABLE t2(c1 INT PRIMARY KEY, c2 INT) PARTITION BY KEY(c1) PARTITIONS 4;\nQuery OK, 0 rows affected\nobclient> SELECT * FROM t2;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  5 |    5 |\n|  1 |    1 |\n|  2 |    2 |\n|  3 |    3 |\n+----+------+\n4 rows in set\n",
            "obclient> DELETE FROM t1 WHERE c1 = 2;\nQuery OK, 1 row affected (0.02 sec)\n\nobclient> SELECT * FROM t1;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  1 |    1 |\n|  3 |    3 |\n|  4 |    4 |\n+----+------+\n3 rows in set\n",
            "obclient> DELETE FROM t1 ORDER BY c2 LIMIT 1;\nQuery OK, 1 row affected\n\nobclient> SELECT * FROM t1;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  2 |    2 |\n|  3 |    3 |\n|  4 |    4 |\n+----+------+\n3 rows in set\n",
            "obclient> DELETE FROM t2 PARTITION(p2);\nQuery OK, 3 rows affected\n\nobclient> SELECT * FROM t2;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  5 |    5 |\n+----+------+\n1 row in set\n",
            "obclient> DELETE t1, t2 FROM t1, t2 WHERE t1.c1 = t2.c1;\nQuery OK, 3 rows affected\n\nobclient> SELECT * FROM t1;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  4 |    4 |\n+----+------+\n1 row in set\n\nobclient> SELECT * FROM t2;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  5 |    5 |\n+----+------+\n1 row in set\n",
            "obclient> DELETE FROM t1, t2 USING t1,t2 WHERE t1.c1 = t2.c1;\nQuery OK, 6 rows affected\n\nobclient> SELECT * FROM t1;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  4 |    4 |\n+----+------+\n1 row in set\n\nobclient> SELECT * FROM t2;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  5 |    5 |\n+----+------+\n1 row in set\n",
            "obclient> DELETE t2 FROM t1,t2 PARTITION(p2) WHERE t1.c1 = t2.c1;\nQuery OK, 3 rows affected\n\nobclient> select * from t2;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  5 |    5 |\n+----+------+\n1 row in set\n",
            "obclient> CREATE VIEW v AS SELECT * FROM t1;\nQuery OK, 0 rows affected\n\nobclient> DELETE FROM v WHERE v.c1 = 1;\nQuery OK, 1 row affected\n\nobclient> SELECT * FROM v;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  2 |    2 |\n|  3 |    3 |\n|  4 |    4 |\n+----+------+\n3 rows in set\n"
        ],
        "Detailed Examples": [
            "示例表及数据基于以下定义：",
            "obclient> CREATE TABLE t1(c1 INT PRIMARY KEY, c2 INT);\nQuery OK, 0 rows affected\nobclient> SELECT * FROM t1;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  1 |    1 |\n|  2 |    2 |\n|  3 |    3 |\n|  4 |    4 |\n+----+------+\n4 rows in set\n\nobclient> CREATE TABLE t2(c1 INT PRIMARY KEY, c2 INT) PARTITION BY KEY(c1) PARTITIONS 4;\nQuery OK, 0 rows affected\nobclient> SELECT * FROM t2;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  5 |    5 |\n|  1 |    1 |\n|  2 |    2 |\n|  3 |    3 |\n+----+------+\n4 rows in set\n",
            "单表删除：删除 c1=2 的行，其中 c1 列为表 t1 中的 Primary Key。",
            "obclient> DELETE FROM t1 WHERE c1 = 2;\nQuery OK, 1 row affected (0.02 sec)\n\nobclient> SELECT * FROM t1;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  1 |    1 |\n|  3 |    3 |\n|  4 |    4 |\n+----+------+\n3 rows in set\n",
            "单表删除：删除表 t1 的按照 c2 列排序之后的第一行数据。",
            "obclient> DELETE FROM t1 ORDER BY c2 LIMIT 1;\nQuery OK, 1 row affected\n\nobclient> SELECT * FROM t1;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  2 |    2 |\n|  3 |    3 |\n|  4 |    4 |\n+----+------+\n3 rows in set\n",
            "单表删除：执行删除表 t2 的 p2 分区的数据。",
            "obclient> DELETE FROM t2 PARTITION(p2);\nQuery OK, 3 rows affected\n\nobclient> SELECT * FROM t2;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  5 |    5 |\n+----+------+\n1 row in set\n",
            "多表删除：删除 t1，t2 表中 t1.c1 = t2.c1 的数据。",
            "obclient> DELETE t1, t2 FROM t1, t2 WHERE t1.c1 = t2.c1;\nQuery OK, 3 rows affected\n\nobclient> SELECT * FROM t1;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  4 |    4 |\n+----+------+\n1 row in set\n\nobclient> SELECT * FROM t2;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  5 |    5 |\n+----+------+\n1 row in set\n",
            "多表删除：删除 t1，t2 表中 t1.c1 = t2.c1 的数据。",
            "obclient> DELETE FROM t1, t2 USING t1,t2 WHERE t1.c1 = t2.c1;\nQuery OK, 6 rows affected\n\nobclient> SELECT * FROM t1;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  4 |    4 |\n+----+------+\n1 row in set\n\nobclient> SELECT * FROM t2;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  5 |    5 |\n+----+------+\n1 row in set\n",
            "多表删除：删除 t2 表中的 p2 分区中和 t1 表中满足 t1.c1 = t2.c1 的数据。",
            "obclient> DELETE t2 FROM t1,t2 PARTITION(p2) WHERE t1.c1 = t2.c1;\nQuery OK, 3 rows affected\n\nobclient> select * from t2;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  5 |    5 |\n+----+------+\n1 row in set\n",
            "对可更新视图 v 进行删除操作。",
            "obclient> CREATE VIEW v AS SELECT * FROM t1;\nQuery OK, 0 rows affected\n\nobclient> DELETE FROM v WHERE v.c1 = 1;\nQuery OK, 1 row affected\n\nobclient> SELECT * FROM v;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  2 |    2 |\n|  3 |    3 |\n|  4 |    4 |\n+----+------+\n3 rows in set\n"
        ]
    },
    "DESCRIBE": {
        "Title": [
            "DESCRIBE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053483"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "{EXPLAIN | DESCRIBE | DESC} table_name [column_name | wild];\n",
        "Description": [
            "该语句用于获取表或列的 Schema 信息。",
            "EXPLAIN 与 DESCRIBE、DESC 互为同义词。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\ntable_name\n指定表名。\n\n\ncolumn_name\n指定表的列名。\n\n\n"
        ],
        "Examples": [
            "obclient> DESCRIBE t1;\n+-------+-------------+------+-----+---------+-------+\n| Field | Type        | Null | Key | Default | Extra |\n+-------+-------------+------+-----+---------+-------+\n| c1    | int(11)     | NO   | PRI | NULL    |       |\n| c2    | int(11)     | YES  |     | NULL    |       |\n| c3    | varchar(20) | YES  |     | NULL    |       |\n+-------+-------------+------+-----+---------+-------+\n3 rows in set\n",
            "obclient> DESCRIBE t1 c1;\n+-------+---------+------+-----+---------+-------+\n| Field | Type    | Null | Key | Default | Extra |\n+-------+---------+------+-----+---------+-------+\n| c1    | int(11) | NO   | PRI | NULL    |       |\n+-------+---------+------+-----+---------+-------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "展示表 t1 的定义。",
            "obclient> DESCRIBE t1;\n+-------+-------------+------+-----+---------+-------+\n| Field | Type        | Null | Key | Default | Extra |\n+-------+-------------+------+-----+---------+-------+\n| c1    | int(11)     | NO   | PRI | NULL    |       |\n| c2    | int(11)     | YES  |     | NULL    |       |\n| c3    | varchar(20) | YES  |     | NULL    |       |\n+-------+-------------+------+-----+---------+-------+\n3 rows in set\n",
            "展示表 t1 的 c1 列定义。",
            "obclient> DESCRIBE t1 c1;\n+-------+---------+------+-----+---------+-------+\n| Field | Type    | Null | Key | Default | Extra |\n+-------+---------+------+-----+---------+-------+\n| c1    | int(11) | NO   | PRI | NULL    |       |\n+-------+---------+------+-----+---------+-------+\n1 row in set\n"
        ]
    },
    "DROP DATABASE LINK": {
        "Title": [
            "DROP DATABASE LINK"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053514"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "DROP DATABASE LINK [IF EXISTS] dblink_name;\n",
        "Description": [
            "该语句用于删除已创建的数据库链接（即 dblink）。",
            "\n功能适用性\n该内容仅适用于 OceanBase 数据库企业版。OceanBase 数据库社区版暂不支持 dblink 功能。\n",
            "\n说明\n要删除已创建的数据库链接，您必须具有 DROP DATABASE LINK 系统权限。\n"
        ],
        "Illustration": [
            "dblink_name 为要删除的数据库链接的名称。"
        ],
        "Examples": [
            "obclient> DROP DATABASE LINK IF EXISTS ob_dblink;\nQuery OK, 1 row affected\n"
        ],
        "Detailed Examples": [
            "obclient> DROP DATABASE LINK IF EXISTS ob_dblink;\nQuery OK, 1 row affected\n"
        ]
    },
    "DROP DATABASE": {
        "Title": [
            "DROP DATABASE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053454"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "drop_database_stmt:\nDROP DATABASE [IF EXISTS] database_name;\n",
        "Description": [
            "该语句用于删除数据库。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nIF EXISTS\n用于防止当数据库不存在时发生错误。\n\n\ndatabase_name\n指定待删除的数据库名。\n\n\n"
        ],
        "Examples": [
            "obclient> DROP DATABASE test2;\nQuery OK, 0 rows affected\n",
            "obclient> DROP DATABASE notest;\nERROR 1008 (HY000): Can't drop database 'notest'; database doesn't exist\n\nobclient> DROP DATABASE IF EXISTS notest;\nQuery OK, 0 rows affected, 1 warning\n\nobclient> SHOW WARNINGS;\n+-------+------+------------------------------------------------------+\n| Level | Code | Message                                              |\n+-------+------+------------------------------------------------------+\n| Note  | 1008 | Can't drop database 'notest'; database doesn't exist |\n+-------+------+------------------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "删除数据库 test2。",
            "obclient> DROP DATABASE test2;\nQuery OK, 0 rows affected\n",
            "删除不存在的数据库 notest。",
            "obclient> DROP DATABASE notest;\nERROR 1008 (HY000): Can't drop database 'notest'; database doesn't exist\n\nobclient> DROP DATABASE IF EXISTS notest;\nQuery OK, 0 rows affected, 1 warning\n\nobclient> SHOW WARNINGS;\n+-------+------+------------------------------------------------------+\n| Level | Code | Message                                              |\n+-------+------+------------------------------------------------------+\n| Note  | 1008 | Can't drop database 'notest'; database doesn't exist |\n+-------+------+------------------------------------------------------+\n1 row in set\n"
        ]
    },
    "DROP INDEX": {
        "Title": [
            "DROP INDEX"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053507"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "DROP INDEX index_name\n   ON table_name;\n",
        "Description": [
            "该语句用来删除索引。当索引过多时，维护开销增大，因此，需要删除不必要的索引。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nindex_name\n指定索引名称。\n\n\ntable_name\n指定表名。\n\n\n"
        ],
        "Examples": [
            "obclient>DROP INDEX idx_test ON tbl_test;\n"
        ],
        "Detailed Examples": [
            "删除表 tbl_test 的索引 idx_test。",
            "obclient>DROP INDEX idx_test ON tbl_test;\n"
        ]
    },
    "DROP MATERIALIZED VIEW LOG": {
        "Title": [
            "DROP MATERIALIZED VIEW LOG"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053482"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "DROP MATERIALIZED VIEW LOG ON [database.] table;\n",
        "Description": [
            "该语句用来删除物化视图日志。",
            "\n说明\n在删除物化视图日志时，如果基表正在进行某个运行中的事务操作，那么删除操作会被阻塞，直到该事务结束。\n"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\ndatabase.\n可选项，指定物化视图日志基表所在的数据库。如果省略 database.，则默认基表在您自己的数据库中。\n\n\ntable\n指定物化视图日志对应的基表名称。\n\n\n"
        ],
        "Examples": [
            "obclient [test_db]> DROP MATERIALIZED VIEW LOG ON test_tbl1;\n",
            "Query OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "删除表 test_tbl1 上的物化视图日志。",
            "obclient [test_db]> DROP MATERIALIZED VIEW LOG ON test_tbl1;\n",
            "返回结果如下：",
            "Query OK, 0 rows affected\n"
        ]
    },
    "DROP MATERIALIZED VIEW": {
        "Title": [
            "DROP MATERIALIZED VIEW"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053495"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "DROP MATERIALIZED VIEW [IF EXISTS] materialized_view_list [opt_drop_behavior];\n\nmaterialized_view_list:\n    [ database. ]materialized_view [,[ database. ]materialized_view]...\n\nopt_drop_behavior:\n    RESTRICT | CASCADE\n",
        "Description": [
            "该语句用来删除物化视图。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nIF EXISTS\n可选项，如果指定 IF EXISTS，即使要删除的物化视图不存在，也不会报错；如果不指定，要删除的物化视图不存在则会报错。\n\n\ndatabase.\n可选项，指定物化视图所在的数据库。如果省略 database.，则默认在您自己的数据库中。\n\n\nmaterialized_view\n指定物化视图的名称。\n\n\nRESTRICT | CASCADE\n可选项，表示删除操作的行为。 \n      \nCASCADE 默认值，表示删除物化视图的同时也删除依赖于它的其他对象。\nRESTRICT 表示如果有其他对象依赖于该物化视图，则不允许删除物化视图。\n\n\n\n"
        ],
        "Examples": [
            "obclient [test_db]> DROP MATERIALIZED VIEW mv_test_tbl1;\n",
            "Query OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "删除 test_db 库下名为 mv_test_tbl1 的物化视图。",
            "obclient [test_db]> DROP MATERIALIZED VIEW mv_test_tbl1;\n",
            "返回结果如下：",
            "Query OK, 0 rows affected\n"
        ]
    },
    "DROP OUTLINE": {
        "Title": [
            "DROP OUTLINE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053502"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "DROP OUTLINE outline_name;  \n",
        "Description": [
            "该语句用于删除 OceanBase 数据库中的 Outline。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\noutline_name\n指定要删除的 Outline 名称。\n\n\n"
        ],
        "Examples": [
            "DROP OUTLINE ol_1;      \n"
        ],
        "Detailed Examples": [
            "删除 Outline ol_1。",
            "DROP OUTLINE ol_1;      \n"
        ]
    },
    "DROP RESTORE POINT": {
        "Title": [
            "DROP RESTORE POINT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053449"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "DROP RESTORE POINT restore_point;\n",
        "Description": [
            "该语句用来删除还原点（Restore Point）。",
            "\n注意\n\n\nV4.x 版本暂不支持 DROP RESTORE POINT 语句。\n系统租户不支持创建和删除还原点。\n\n\n"
        ],
        "Illustration": [
            "Restore Point 功能的使用限制如下：",
            "不支持物理备份。",
            "不支持主备库。",
            "每个租户限制 10 个 Restore Point。",
            "创建 Restore Point 后，如果对创建 Restore Point 前就存在的表执行 DDL 语句，系统会报错。",
            "由于 Restore Point 功能依赖 GTS 维护全局的一致性快照，故在使用 Restore Point 时，需要开启 GTS。",
            "开启 GTS 的 SQL 命令如下。",
            "obclient> SET GLOBAL ob_timestamp_service='GTS';\n",
            "\n\n\n参数\n描述\n\n\n\n\nrestore_point\n指定还原点名称。\n\n\n"
        ],
        "Examples": [
            "obclient> SELECT * FROM V$RESTORE_POINT;\n+-----------+------------------+----------------------------+------+\n| TENANT_ID | SNAPSHOT         | TIME                       | NAME |\n+-----------+------------------+----------------------------+------+\n|      1001 | 1630407064663511 | 2021-08-31 18:51:04.665692 | rp1  |\n+-----------+------------------+----------------------------+------+\n1 row in set\n",
            "obclient> DROP RESTORE POINT rp1;\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "查看租户现有还原点。",
            "obclient> SELECT * FROM V$RESTORE_POINT;\n+-----------+------------------+----------------------------+------+\n| TENANT_ID | SNAPSHOT         | TIME                       | NAME |\n+-----------+------------------+----------------------------+------+\n|      1001 | 1630407064663511 | 2021-08-31 18:51:04.665692 | rp1  |\n+-----------+------------------+----------------------------+------+\n1 row in set\n",
            "删除还原点 rp1。",
            "obclient> DROP RESTORE POINT rp1;\nQuery OK, 0 rows affected\n"
        ]
    },
    "DROP ROLE": {
        "Title": [
            "DROP ROLE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053466"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "DROP ROLE role_name [, role_name ...];\n",
        "Description": [
            "该语句用于删除角色。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nrole_name\n指定要删除的角色名，同时删除多个角色时，角色名称用英文逗号（,）隔开。\n\n\n"
        ],
        "Examples": [
            "DROP ROLE role001;\n"
        ],
        "Detailed Examples": [
            "删除角色 role001。",
            "DROP ROLE role001;\n"
        ]
    },
    "DROP SEQUENCE": {
        "Title": [
            "DROP SEQUENCE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053526"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "DROP SEQUENCE  [IF EXISTS] [schema. ] sequence_name;\n",
        "Description": [
            "该语句用来删除序列。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nschema.\n指定包含序列的用户。如果不指定 Schema，则默认为当前登录用户的序列。\n\n\nIF EXISTS\n如果该序列不存在则不要报错，而是给出信息提示。\n\n\nsequence_name\n指定要删除的序列名称。\n\n\n"
        ],
        "Examples": [
            "obclient> DROP SEQUENCE IF EXISTS seq1;\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "删除序列 seq1。",
            "obclient> DROP SEQUENCE IF EXISTS seq1;\nQuery OK, 0 rows affected\n"
        ]
    },
    "DROP TABLE": {
        "Title": [
            "DROP TABLE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053485"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "DROP {TABLE | TABLES} [IF EXISTS]\ntable_name [,table_name]...\n[RESTRICT | CASCADE]\n",
        "Description": [
            "该语句用于删除 OceanBase 数据库中的表。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\ntable_name\n指定要删除的表名，同时删除多个表时，用\",\"隔开。\n\n\nIF EXISTS\n如果指定 IF EXISTS，即使要删除的表不存在，也不会报错；如果不指定，则会报错。\n\n\nRESTRICT | CASCADE\n用于其它数据库迁移至 OceanBase 数据库的场景。 说明 当前版本暂不支持此参数，如果给出，将被解析和忽略。\n\n\n"
        ],
        "Examples": [
            "obclient> DROP TABLE IF EXISTS test1;\nQuery OK, 0 rows affected\n",
            "obclient> DROP TABLES IF EXISTS test1,test2;\nQuery OK, 0 rows affected\n",
            "obclient> DROP TABLES test1,test2;\nERROR 1051 (42S02): Unknown table 'test.test2'\n"
        ],
        "Detailed Examples": [
            "指定 IF EXISTS，删除表 test1。",
            "obclient> DROP TABLE IF EXISTS test1;\nQuery OK, 0 rows affected\n",
            "指定 IF EXISTS，同时删除表 test1 和 test2。",
            "obclient> DROP TABLES IF EXISTS test1,test2;\nQuery OK, 0 rows affected\n",
            "不指定 IF EXISTS，删除多张表时，只要有一张表不存在，则会报错。",
            "obclient> DROP TABLES test1,test2;\nERROR 1051 (42S02): Unknown table 'test.test2'\n"
        ]
    },
    "DROP TABLEGROUP": {
        "Title": [
            "DROP TABLEGROUP"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053521"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "DROP TABLEGROUP [IF EXISTS] tablegroup_name;\n",
        "Description": [
            "该语句用来删除表组。但是如果有任何表的 TABLEGROUP 属性引用了目标表组，则该表组不允许被删除。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\ntablegroup_name\n表组名称。如果要删除的表组名称不存在，并且没有指定 IF EXISTS，则会出现错误。\n\n\n"
        ],
        "Examples": [
            "obclient> DROP TABLEGROUP Table_Group1;\nQuery OK, 0 rows affected\n",
            "obclient> DROP TABLEGROUP Table_Group1;\nERROR 5151 (42P01): tablegroup not exist\n",
            "obclient> DROP TABLEGROUP IF EXISTS Table_Group1;\nQuery OK, 0 rows affected, 1 warning\n"
        ],
        "Detailed Examples": [
            "删除名为 Table_Group1 的表组。",
            "obclient> DROP TABLEGROUP Table_Group1;\nQuery OK, 0 rows affected\n",
            "删除不存在的表组 Table_Group1。",
            "obclient> DROP TABLEGROUP Table_Group1;\nERROR 5151 (42P01): tablegroup not exist\n",
            "指定 IF EXISTS，删除不存在的表组 Table_Group1。",
            "obclient> DROP TABLEGROUP IF EXISTS Table_Group1;\nQuery OK, 0 rows affected, 1 warning\n"
        ]
    },
    "DROP TABLESPACE": {
        "Title": [
            "DROP TABLESPACE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053452"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "DROP TABLESPACE tablespace_name\n[ENGINE [=] engine_name];\n",
        "Description": [
            "该语句用来删除 TableSpace 逻辑对象，仅在 TableSpace下没有表时可以删除成功。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\ntablespace_name\n指定要删除的 TableSpace 名称。\n\n\nENGINE\n指定使用表空间的存储引擎。当前版本仅支持该关键字语法，功能暂不生效。\n\n\n"
        ],
        "Examples": [
            "DROP TABLESPACE tablespace001;\n"
        ],
        "Detailed Examples": [
            "删除 TableSpace 对象 tablespace001。",
            "DROP TABLESPACE tablespace001;\n"
        ]
    },
    "DROP USER": {
        "Title": [
            "DROP USER"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053461"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "DROP USER [IF EXISTS] user_name [, user_name...];\n",
        "Description": [
            "该语句用于删除一个或多个数据库用户。",
            "\n注意\n\n必须拥有全局的 CREATE USER 权限，才可以使用 DROP USER 命令。\n不能通过 DELETE 方式对 mysql.user 表进行删除操作，只能通过 DROP 命令删除。\n成功删除用户后，该用户的所有权限也会被一同删除。\n\n"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nIF EXISTS\n可选项，当使用它时，尝试删除一个不存在的用户会产生警告而不是错误。如果不使用该子句，则删除一个不存在的用户会引发错误。\n\n\nuser_name\n用户名。同时删除多个用户时，用\",\"隔开。\n\n\n"
        ],
        "Examples": [
            "obclient> DROP USER sqluser01;\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "删除名为 sqluser01 的用户。",
            "obclient> DROP USER sqluser01;\nQuery OK, 0 rows affected\n"
        ]
    },
    "DROP VIEW": {
        "Title": [
            "DROP VIEW"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053499"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "drop_view_stmt:\n    DROP VIEW [IF EXISTS] view_name_list [CASCADE | RESTRICT];\n\nview_name_list:\n    view_name [, view_name_list]\n",
        "Description": [
            "该语句用于删除一个或多个视图。",
            "\n注意\n当前用户必须在每个视图上有 DROP 权限。\n"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nIF EXISTS\n使用 IF EXISTS 关键字可以防止由于视图不存在而出错。\n\n\nview_name_list\n如果 view_name_list 中包含一部分存在和一部分不存在的视图，执行可能报错但是存在的视图依然会被删除。\n\n\nCASCADE | RESTRICT\nCASCADE 为级联删除，自动删除依赖此视图的对象。RESTRICT 为约束删除，如果有依赖对象存在，则拒绝删除此视图。 说明 当前版本暂不支持此参数。如果给出，将被解析和忽略。\n\n\n"
        ],
        "Examples": [
            "obclient> DROP VIEW v1;\nQuery OK, 0 rows affected (0.02 sec)\n",
            "obclient> DROP VIEW IF EXISTS v1,v2;\nQuery OK, 0 rows affected, 1 warning (0.01 sec)\n",
            "obclient> DROP VIEW v1,v2;\nERROR 1051 (42S02): Unknown table 'test.v1'\n"
        ],
        "Detailed Examples": [
            "删除单个视图 v1。",
            "obclient> DROP VIEW v1;\nQuery OK, 0 rows affected (0.02 sec)\n",
            "删除多个视图 v1 和 v2。",
            "obclient> DROP VIEW IF EXISTS v1,v2;\nQuery OK, 0 rows affected, 1 warning (0.01 sec)\n",
            "不使用 IF EXISTS，删除多个视图，如果有一个视图不存在，则会报错。",
            "obclient> DROP VIEW v1,v2;\nERROR 1051 (42S02): Unknown table 'test.v1'\n"
        ]
    },
    "EXECUTE": {
        "Title": [
            "EXECUTE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053511"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "EXECUTE stmt_name\n[USING @var_name [, @var_name] ...]\n",
        "Description": [
            "该语句用于执行准备的语句。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nstmt_name\n准备语句的名称。\n\n\n@var_name\n按顺序填入 stmt_name 中的变量。\n\n\n"
        ],
        "Examples": [
            "obclient> PREPARE stmt1 FROM 'SELECT SQRT(POW(?,2) + POW(?,2)) AS hypotenuse';\nQuery OK, 0 rows affected\n\nobclient> SET @a = 3;\nQuery OK, 0 rows affected\n\nobclient> SET @b = 4;\nQuery OK, 0 rows affected\n\nobclient> EXECUTE stmt1 USING @a, @b;\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "执行准备的语句。",
            "obclient> PREPARE stmt1 FROM 'SELECT SQRT(POW(?,2) + POW(?,2)) AS hypotenuse';\nQuery OK, 0 rows affected\n\nobclient> SET @a = 3;\nQuery OK, 0 rows affected\n\nobclient> SET @b = 4;\nQuery OK, 0 rows affected\n\nobclient> EXECUTE stmt1 USING @a, @b;\nQuery OK, 0 rows affected\n",
            "\n说明\n目前，OceanBase 数据库不支持交互客户端显式结果。\n"
        ]
    },
    "EXPLAIN": {
        "Title": [
            "EXPLAIN"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053520"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "{EXPLAIN [INTO table_name ] [SET statement_id = string]  \n | DESCRIBE\n | DESC}\n[explain_type] [PRETTY | PRETTY_COLOR] dml_statement;\n\nexplain_type：\n    BASIC\n  | OUTLINE\n  | EXTENDED\n  | EXTENDED_NOADDR\n  | PARTITIONS\n  | FORMAT = {TRADITIONAL| JSON}\n\ndml_statement:\n    SELECT statement\n  | DELETE statement\n  | INSERT statement\n  | REPLACE statement\n",
        "Description": [
            "该语句用于解释 SQL 语句的执行计划，可以是 SELECT、DELETE、INSERT、REPLACE 或 UPDATE 语句。",
            "EXPLAIN 与 DESCRIBE、DESC 互为同义词。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nINTO table_name\n表示将 EXPLAIN 的计划信息保存到指定表内。如果没有指定 INTO table_name，默认查询到 PLAN_TABLE 表内。\n\n\nSET statement_id\n表示当前查询使用字符串标记，以方便后续查询该 SQL 的计划信息。如果没有指定 SET statement_id，默认使用空字符串作为信息标记。\n\n\nPRETTY | PRETTY_COLOR\n将计划树中的父节点和子节点使用树线或彩色树线连接起来，使得执行计划展示更方便阅读。\n\n\nBASIC\n指定输出计划的基础信息，如算子 ID、算子名称、所引用的表名。\n\n\nOUTLINE\n指定输出的计划信息包含 OUTLINE 信息。\n\n\nEXTENDED\nEXPLAIN 产生附加信息，包括：每个算子的输入列和输出列，访问表的分区信息，当前使用的 Filter 信息，如果当前算子使用了索引，显示所使用的索引列及抽取的 Query Range。\n\n\nEXTENDED_NOADDR\n以简约的方式展示附加信息。\n\n\nPARTITIONS\n显示分区相关信息。\n\n\nFORMAT = {TRADITIONAL| JSON}\n指定 EXPALIN 的输出格式： \n      \nTRADITIONAL：表格输出格式\nJSON：KEY:VALUE 输出格式，JSON 显示为JSON 字符串，包括 EXTENDED 和 PARTITIONS 信息。\n\n\n\ndml_statement\nDML 语句。\n\n\n"
        ],
        "Examples": [
            "/* 创建表 test */\nobclient> CREATE TABLE test (statement_id VARCHAR(30), plan_id INT, gmt_create TIMESTAMP,\n   remarks VARCHAR(4000), operator VARCHAR(255), options VARCHAR(255), object_node VARCHAR(40),\n   object_owner VARCHAR(128), object_name VARCHAR(128), object_alias VARCHAR(261), object_instance INT,\n   object_type VARCHAR(30),optimizer VARCHAR(4000), search_columns INT, id INT, parent_id INT, depth INT,\n   position INT,is_last_child INT, cost INT, cardinality INT, bytes INT, rowset INT, other_tag VARCHAR(4000),\n   partition_start VARCHAR(4000), partition_stop VARCHAR(4000), partition_id INT, other VARCHAR(4000),\n   distribution VARCHAR(64), cpu_cost INT, io_cost INT, temp_space INT, access_predicates VARCHAR(4000),\n   filter_predicates VARCHAR(4000),startup_predicates VARCHAR(4000), projection VARCHAR(4000),\n   special_predicates VARCHAR(4000), time INT, qblock_name VARCHAR(128), other_xml VARCHAR(4000));\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE t1(c1 INT);\nQuery OK, 0 rows affected\n\n/* 解释查询计划，并把计划信息保存在指定表 test 内 */\nobclient> EXPLAIN INTO test SELECT COUNT(*) FROM t1;\n+--------------------------------------------------------------------------+\n| Query Plan                                                               |\n+--------------------------------------------------------------------------+\n| =================================================                        |\n| |ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|                        |\n| -------------------------------------------------                        |\n| |0 |SCALAR GROUP BY  |    |1       |2           |                        |\n| |1 |└─TABLE FULL SCAN|t1  |1       |2           |                        |\n| =================================================                        |\n| Outputs & filters:                                                       |\n| -------------------------------------                                    |\n|   0 - output([T_FUN_COUNT_SUM(T_FUN_COUNT(*))]), filter(nil), rowset=256 |\n|       group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])            |\n|   1 - output([T_FUN_COUNT(*)]), filter(nil), rowset=256                  |\n|       access(nil), partitions(p0)                                        |\n|       is_index_back=false, is_global_index=false,                        |\n|       range_key([t1.__pk_increment]), range(MIN ; MAX)always true        |\n+--------------------------------------------------------------------------+\n14 rows in set\n\nobclient> SELECT DBMS_XPLAN.DISPLAY('TYPICAL',null,'test')\\G\n*************************** 1. row ***************************\nDBMS_XPLAN.DISPLAY('TYPICAL',null,'test'):\n =================================================\n|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|\n-------------------------------------------------\n|0 |SCALAR GROUP BY  |    |1       |2           |\n|1 |└─TABLE FULL SCAN|t1  |1       |2           |\n=================================================\n\nOutputs & filters:\n-------------------------------------\n  0 - output([T_FUN_COUNT_SUM(T_FUN_COUNT(*))]), filter(nil), rowset=256\n      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])\n  1 - output([T_FUN_COUNT(*)]), filter(nil), rowset=256\n      access(nil), partitions(p0)\n      is_index_back=false, is_global_index=false,\n      range_key([t1.__pk_increment]), range(MIN ; MAX)always true\n1 row in set\n",
            "obclient> EXPLAIN INTO test SET statement_id='test2' SELECT COUNT(*) FROM t1;\n+--------------------------------------------------------------------------+\n| Query Plan                                                               |\n+--------------------------------------------------------------------------+\n| =================================================                        |\n| |ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|                        |\n| -------------------------------------------------                        |\n| |0 |SCALAR GROUP BY  |    |1       |2           |                        |\n| |1 |└─TABLE FULL SCAN|t1  |1       |2           |                        |\n| =================================================                        |\n| Outputs & filters:                                                       |\n| -------------------------------------                                    |\n|   0 - output([T_FUN_COUNT_SUM(T_FUN_COUNT(*))]), filter(nil), rowset=256 |\n|       group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])            |\n|   1 - output([T_FUN_COUNT(*)]), filter(nil), rowset=256                  |\n|       access(nil), partitions(p0)                                        |\n|       is_index_back=false, is_global_index=false,                        |\n|       range_key([t1.__pk_increment]), range(MIN ; MAX)always true        |\n+--------------------------------------------------------------------------+\n14 rows in set\n\nobclient> SELECT DBMS_XPLAN.DISPLAY('TYPICAL','test2','test')\\G\n*************************** 1. row ***************************\nDBMS_XPLAN.DISPLAY('TYPICAL','test2','test'): =================================================\n|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|\n-------------------------------------------------\n|0 |SCALAR GROUP BY  |    |1       |2           |\n|1 |└─TABLE FULL SCAN|t1  |1       |2           |\n=================================================\n\nOutputs & filters:\n-------------------------------------\n  0 - output([T_FUN_COUNT_SUM(T_FUN_COUNT(*))]), filter(nil), rowset=256\n      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])\n  1 - output([T_FUN_COUNT(*)]), filter(nil), rowset=256\n      access(nil), partitions(p0)\n      is_index_back=false, is_global_index=false,\n      range_key([t1.__pk_increment]), range(MIN ; MAX)always true\n1 row in set\n",
            "obclient> EXPLAIN SELECT * FROM t1,t2 WHERE t1.c2=t2.c2 AND t2.c1 > 4;\n+------------------------------------------------------------------------------------+\n| Query Plan                                                                         |\n+------------------------------------------------------------------------------------+\n| =================================================                                  |\n| |ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|                                  |\n| -------------------------------------------------                                  |\n| |0 |HASH JOIN        |    |1       |9           |                                  |\n| |1 |├─TABLE FULL SCAN|t2  |1       |4           |                                  |\n| |2 |└─TABLE FULL SCAN|t1  |2       |4           |                                  |\n| =================================================                                  |\n| Outputs & filters:                                                                 |\n| -------------------------------------                                              |\n|   0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2]), filter(nil), rowset=16           |\n|       equal_conds([t1.c2 = t2.c2]), other_conds(nil)                               |\n|   1 - output([t2.c2], [t2.c1]), filter([t2.c1 > 4]), rowset=16                     |\n|       access([t2.c2], [t2.c1]), partitions(p0)                                     |\n|       is_index_back=false, is_global_index=false, filter_before_indexback[false],  |\n|       range_key([t2.__pk_increment]), range(MIN ; MAX)always true                  |\n|   2 - output([t1.c2], [t1.c1]), filter(nil), rowset=16                             |\n|       access([t1.c2], [t1.c1]), partitions(p0)                                     |\n|       is_index_back=false, is_global_index=false,                                  |\n|       range_key([t1.__pk_increment]), range(MIN ; MAX)always true                  |\n+------------------------------------------------------------------------------------+\n",
            "obclient> EXPLAIN EXTENDED_NOADDR SELECT * FROM t1,t2 WHERE t1.c2=t2.c2 AND t2.c1 > 4;\n+------------------------------------------------------------------------------------+\n| Query Plan                                                                         |\n+------------------------------------------------------------------------------------+\n| =================================================                                  |\n| |ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|                                  |\n| -------------------------------------------------                                  |\n| |0 |HASH JOIN        |    |1       |9           |                                  |\n| |1 |├─TABLE FULL SCAN|t2  |1       |4           |                                  |\n| |2 |└─TABLE FULL SCAN|t1  |2       |4           |                                  |\n| =================================================                                  |\n| Outputs & filters:                                                                 |\n| -------------------------------------                                              |\n|   0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2]), filter(nil), rowset=16           |\n|       equal_conds([t1.c2 = t2.c2]), other_conds(nil)                               |\n|   1 - output([t2.c2], [t2.c1]), filter([t2.c1 > 4]), rowset=16                     |\n|       access([t2.c2], [t2.c1]), partitions(p0)                                     |\n|       is_index_back=false, is_global_index=false, filter_before_indexback[false],  |\n|       range_key([t2.__pk_increment]), range(MIN ; MAX)always true                  |\n|   2 - output([t1.c2], [t1.c1]), filter(nil), rowset=16                             |\n|       access([t1.c2], [t1.c1]), partitions(p0)                                     |\n|       is_index_back=false, is_global_index=false,                                  |\n|       range_key([t1.__pk_increment]), range(MIN ; MAX)always true                  |\n| Used Hint:                                                                         |\n| -------------------------------------                                              |\n|   /*+                                                                              |\n|                                                                                    |\n|   */                                                                               |\n| Qb name trace:                                                                     |\n| -------------------------------------                                              |\n|   stmt_id:0, stmt_type:T_EXPLAIN                                                   |\n|   stmt_id:1, SEL$1                                                                 |\n| Outline Data:                                                                      |\n| -------------------------------------                                              |\n|   /*+                                                                              |\n|       BEGIN_OUTLINE_DATA                                                           |\n|       LEADING(@\"SEL$1\" (\"mysql\".\"t2\"@\"SEL$1\" \"mysql\".\"t1\"@\"SEL$1\"))                |\n|       USE_HASH(@\"SEL$1\" \"mysql\".\"t1\"@\"SEL$1\")                                      |\n|       FULL(@\"SEL$1\" \"mysql\".\"t2\"@\"SEL$1\")                                          |\n|       FULL(@\"SEL$1\" \"mysql\".\"t1\"@\"SEL$1\")                                          |\n|       OPTIMIZER_FEATURES_ENABLE('4.0.0.0')                                         |\n|       END_OUTLINE_DATA                                                             |\n|   */                                                                               |\n| Optimization Info:                                                                 |\n| -------------------------------------                                              |\n|   t2:                                                                              |\n|       table_rows:3                                                                 |\n|       physical_range_rows:3                                                        |\n|       logical_range_rows:3                                                         |\n|       index_back_rows:0                                                            |\n|       output_rows:0                                                                |\n|       table_dop:1                                                                  |\n|       dop_method:Table DOP                                                         |\n|       avaiable_index_name:[t2]                                                     |\n|       stats version:0                                                              |\n|       dynamic sampling level:1                                                     |\n|   t1:                                                                              |\n|       table_rows:2                                                                 |\n|       physical_range_rows:2                                                        |\n|       logical_range_rows:2                                                         |\n|       index_back_rows:0                                                            |\n|       output_rows:2                                                                |\n|       table_dop:1                                                                  |\n|       dop_method:Table DOP                                                         |\n|       avaiable_index_name:[t1]                                                     |\n|       stats version:0                                                              |\n|       dynamic sampling level:1                                                     |\n|   Plan Type:                                                                       |\n|       LOCAL                                                                        |\n|   Note:                                                                            |\n|       Degree of Parallelisim is 1 because of table property                        |\n+------------------------------------------------------------------------------------+\n",
            "obclient> EXPLAIN FORMAT=TRADITIONAL SELECT * FROM t1,t2 WHERE t1.c2=t2.c2 AND t2.c1 > 4;\n+------------------------------------------------------------------------------------+\n| Query Plan                                                                         |\n+------------------------------------------------------------------------------------+\n| =================================================                                  |\n| |ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|                                  |\n| -------------------------------------------------                                  |\n| |0 |HASH JOIN        |    |1       |9           |                                  |\n| |1 |├─TABLE FULL SCAN|t2  |1       |4           |                                  |\n| |2 |└─TABLE FULL SCAN|t1  |2       |4           |                                  |\n| =================================================                                  |\n| Outputs & filters:                                                                 |\n| -------------------------------------                                              |\n|   0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2]), filter(nil), rowset=16           |\n|       equal_conds([t1.c2 = t2.c2]), other_conds(nil)                               |\n|   1 - output([t2.c2], [t2.c1]), filter([t2.c1 > 4]), rowset=16                     |\n|       access([t2.c2], [t2.c1]), partitions(p0)                                     |\n|       is_index_back=false, is_global_index=false, filter_before_indexback[false],  |\n|       range_key([t2.__pk_increment]), range(MIN ; MAX)always true                  |\n|   2 - output([t1.c2], [t1.c1]), filter(nil), rowset=16                             |\n|       access([t1.c2], [t1.c1]), partitions(p0)                                     |\n|       is_index_back=false, is_global_index=false,                                  |\n|       range_key([t1.__pk_increment]), range(MIN ; MAX)always true                  |\n+------------------------------------------------------------------------------------+\n",
            "obclient> EXPLAIN FORMAT=JSON SELECT * FROM t1,t2 WHERE t1.c2=t2.c2 AND t2.c1 > 4;\n+----------------------------------------------------------+\n| Query Plan                                               |\n+----------------------------------------------------------+\n| {                                                        |\n|   \"ID\":0,                                                |\n|   \"OPERATOR\":\"HASH JOIN \",                               |\n|   \"NAME\":\"\",                                             |\n|   \"EST.ROWS\":1,                                          |\n|   \"EST.TIME(us)\":9,                                      |\n|   \"output\":\"output([t1.c1], [t1.c2], [t2.c1], [t2.c2])\", |\n|   \"CHILD_1\": {                                           |\n|     \"ID\":1,                                              |\n|     \"OPERATOR\":\"TABLE FULL SCAN\",                        |\n|     \"NAME\":\"t2\",                                         |\n|     \"EST.ROWS\":1,                                        |\n|     \"EST.TIME(us)\":4,                                    |\n|     \"output\":\"output([t2.c2], [t2.c1])\"                  |\n|   },                                                     |\n|   \"CHILD_2\": {                                           |\n|     \"ID\":2,                                              |\n|     \"OPERATOR\":\"TABLE FULL SCAN\",                        |\n|     \"NAME\":\"t1\",                                         |\n|     \"EST.ROWS\":2,                                        |\n|     \"EST.TIME(us)\":4,                                    |\n|     \"output\":\"output([t1.c2], [t1.c1])\"                  |\n|   }                                                      |\n| }                                                        |\n+----------------------------------------------------------+\n"
        ],
        "Detailed Examples": [
            "解释查询计划，并把计划信息保存在指定表 test 内。",
            "/* 创建表 test */\nobclient> CREATE TABLE test (statement_id VARCHAR(30), plan_id INT, gmt_create TIMESTAMP,\n   remarks VARCHAR(4000), operator VARCHAR(255), options VARCHAR(255), object_node VARCHAR(40),\n   object_owner VARCHAR(128), object_name VARCHAR(128), object_alias VARCHAR(261), object_instance INT,\n   object_type VARCHAR(30),optimizer VARCHAR(4000), search_columns INT, id INT, parent_id INT, depth INT,\n   position INT,is_last_child INT, cost INT, cardinality INT, bytes INT, rowset INT, other_tag VARCHAR(4000),\n   partition_start VARCHAR(4000), partition_stop VARCHAR(4000), partition_id INT, other VARCHAR(4000),\n   distribution VARCHAR(64), cpu_cost INT, io_cost INT, temp_space INT, access_predicates VARCHAR(4000),\n   filter_predicates VARCHAR(4000),startup_predicates VARCHAR(4000), projection VARCHAR(4000),\n   special_predicates VARCHAR(4000), time INT, qblock_name VARCHAR(128), other_xml VARCHAR(4000));\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE t1(c1 INT);\nQuery OK, 0 rows affected\n\n/* 解释查询计划，并把计划信息保存在指定表 test 内 */\nobclient> EXPLAIN INTO test SELECT COUNT(*) FROM t1;\n+--------------------------------------------------------------------------+\n| Query Plan                                                               |\n+--------------------------------------------------------------------------+\n| =================================================                        |\n| |ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|                        |\n| -------------------------------------------------                        |\n| |0 |SCALAR GROUP BY  |    |1       |2           |                        |\n| |1 |└─TABLE FULL SCAN|t1  |1       |2           |                        |\n| =================================================                        |\n| Outputs & filters:                                                       |\n| -------------------------------------                                    |\n|   0 - output([T_FUN_COUNT_SUM(T_FUN_COUNT(*))]), filter(nil), rowset=256 |\n|       group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])            |\n|   1 - output([T_FUN_COUNT(*)]), filter(nil), rowset=256                  |\n|       access(nil), partitions(p0)                                        |\n|       is_index_back=false, is_global_index=false,                        |\n|       range_key([t1.__pk_increment]), range(MIN ; MAX)always true        |\n+--------------------------------------------------------------------------+\n14 rows in set\n\nobclient> SELECT DBMS_XPLAN.DISPLAY('TYPICAL',null,'test')\\G\n*************************** 1. row ***************************\nDBMS_XPLAN.DISPLAY('TYPICAL',null,'test'):\n =================================================\n|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|\n-------------------------------------------------\n|0 |SCALAR GROUP BY  |    |1       |2           |\n|1 |└─TABLE FULL SCAN|t1  |1       |2           |\n=================================================\n\nOutputs & filters:\n-------------------------------------\n  0 - output([T_FUN_COUNT_SUM(T_FUN_COUNT(*))]), filter(nil), rowset=256\n      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])\n  1 - output([T_FUN_COUNT(*)]), filter(nil), rowset=256\n      access(nil), partitions(p0)\n      is_index_back=false, is_global_index=false,\n      range_key([t1.__pk_increment]), range(MIN ; MAX)always true\n1 row in set\n",
            "解释查询计划，并为查询设置标识信息。",
            "obclient> EXPLAIN INTO test SET statement_id='test2' SELECT COUNT(*) FROM t1;\n+--------------------------------------------------------------------------+\n| Query Plan                                                               |\n+--------------------------------------------------------------------------+\n| =================================================                        |\n| |ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|                        |\n| -------------------------------------------------                        |\n| |0 |SCALAR GROUP BY  |    |1       |2           |                        |\n| |1 |└─TABLE FULL SCAN|t1  |1       |2           |                        |\n| =================================================                        |\n| Outputs & filters:                                                       |\n| -------------------------------------                                    |\n|   0 - output([T_FUN_COUNT_SUM(T_FUN_COUNT(*))]), filter(nil), rowset=256 |\n|       group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])            |\n|   1 - output([T_FUN_COUNT(*)]), filter(nil), rowset=256                  |\n|       access(nil), partitions(p0)                                        |\n|       is_index_back=false, is_global_index=false,                        |\n|       range_key([t1.__pk_increment]), range(MIN ; MAX)always true        |\n+--------------------------------------------------------------------------+\n14 rows in set\n\nobclient> SELECT DBMS_XPLAN.DISPLAY('TYPICAL','test2','test')\\G\n*************************** 1. row ***************************\nDBMS_XPLAN.DISPLAY('TYPICAL','test2','test'): =================================================\n|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|\n-------------------------------------------------\n|0 |SCALAR GROUP BY  |    |1       |2           |\n|1 |└─TABLE FULL SCAN|t1  |1       |2           |\n=================================================\n\nOutputs & filters:\n-------------------------------------\n  0 - output([T_FUN_COUNT_SUM(T_FUN_COUNT(*))]), filter(nil), rowset=256\n      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])\n  1 - output([T_FUN_COUNT(*)]), filter(nil), rowset=256\n      access(nil), partitions(p0)\n      is_index_back=false, is_global_index=false,\n      range_key([t1.__pk_increment]), range(MIN ; MAX)always true\n1 row in set\n",
            "省略 explain_type，返回语句的执行计划。",
            "obclient> EXPLAIN SELECT * FROM t1,t2 WHERE t1.c2=t2.c2 AND t2.c1 > 4;\n+------------------------------------------------------------------------------------+\n| Query Plan                                                                         |\n+------------------------------------------------------------------------------------+\n| =================================================                                  |\n| |ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|                                  |\n| -------------------------------------------------                                  |\n| |0 |HASH JOIN        |    |1       |9           |                                  |\n| |1 |├─TABLE FULL SCAN|t2  |1       |4           |                                  |\n| |2 |└─TABLE FULL SCAN|t1  |2       |4           |                                  |\n| =================================================                                  |\n| Outputs & filters:                                                                 |\n| -------------------------------------                                              |\n|   0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2]), filter(nil), rowset=16           |\n|       equal_conds([t1.c2 = t2.c2]), other_conds(nil)                               |\n|   1 - output([t2.c2], [t2.c1]), filter([t2.c1 > 4]), rowset=16                     |\n|       access([t2.c2], [t2.c1]), partitions(p0)                                     |\n|       is_index_back=false, is_global_index=false, filter_before_indexback[false],  |\n|       range_key([t2.__pk_increment]), range(MIN ; MAX)always true                  |\n|   2 - output([t1.c2], [t1.c1]), filter(nil), rowset=16                             |\n|       access([t1.c2], [t1.c1]), partitions(p0)                                     |\n|       is_index_back=false, is_global_index=false,                                  |\n|       range_key([t1.__pk_increment]), range(MIN ; MAX)always true                  |\n+------------------------------------------------------------------------------------+\n",
            "通过 EXTENDED_NOADDR 关键字输出附加信息。",
            "obclient> EXPLAIN EXTENDED_NOADDR SELECT * FROM t1,t2 WHERE t1.c2=t2.c2 AND t2.c1 > 4;\n+------------------------------------------------------------------------------------+\n| Query Plan                                                                         |\n+------------------------------------------------------------------------------------+\n| =================================================                                  |\n| |ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|                                  |\n| -------------------------------------------------                                  |\n| |0 |HASH JOIN        |    |1       |9           |                                  |\n| |1 |├─TABLE FULL SCAN|t2  |1       |4           |                                  |\n| |2 |└─TABLE FULL SCAN|t1  |2       |4           |                                  |\n| =================================================                                  |\n| Outputs & filters:                                                                 |\n| -------------------------------------                                              |\n|   0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2]), filter(nil), rowset=16           |\n|       equal_conds([t1.c2 = t2.c2]), other_conds(nil)                               |\n|   1 - output([t2.c2], [t2.c1]), filter([t2.c1 > 4]), rowset=16                     |\n|       access([t2.c2], [t2.c1]), partitions(p0)                                     |\n|       is_index_back=false, is_global_index=false, filter_before_indexback[false],  |\n|       range_key([t2.__pk_increment]), range(MIN ; MAX)always true                  |\n|   2 - output([t1.c2], [t1.c1]), filter(nil), rowset=16                             |\n|       access([t1.c2], [t1.c1]), partitions(p0)                                     |\n|       is_index_back=false, is_global_index=false,                                  |\n|       range_key([t1.__pk_increment]), range(MIN ; MAX)always true                  |\n| Used Hint:                                                                         |\n| -------------------------------------                                              |\n|   /*+                                                                              |\n|                                                                                    |\n|   */                                                                               |\n| Qb name trace:                                                                     |\n| -------------------------------------                                              |\n|   stmt_id:0, stmt_type:T_EXPLAIN                                                   |\n|   stmt_id:1, SEL$1                                                                 |\n| Outline Data:                                                                      |\n| -------------------------------------                                              |\n|   /*+                                                                              |\n|       BEGIN_OUTLINE_DATA                                                           |\n|       LEADING(@\"SEL$1\" (\"mysql\".\"t2\"@\"SEL$1\" \"mysql\".\"t1\"@\"SEL$1\"))                |\n|       USE_HASH(@\"SEL$1\" \"mysql\".\"t1\"@\"SEL$1\")                                      |\n|       FULL(@\"SEL$1\" \"mysql\".\"t2\"@\"SEL$1\")                                          |\n|       FULL(@\"SEL$1\" \"mysql\".\"t1\"@\"SEL$1\")                                          |\n|       OPTIMIZER_FEATURES_ENABLE('4.0.0.0')                                         |\n|       END_OUTLINE_DATA                                                             |\n|   */                                                                               |\n| Optimization Info:                                                                 |\n| -------------------------------------                                              |\n|   t2:                                                                              |\n|       table_rows:3                                                                 |\n|       physical_range_rows:3                                                        |\n|       logical_range_rows:3                                                         |\n|       index_back_rows:0                                                            |\n|       output_rows:0                                                                |\n|       table_dop:1                                                                  |\n|       dop_method:Table DOP                                                         |\n|       avaiable_index_name:[t2]                                                     |\n|       stats version:0                                                              |\n|       dynamic sampling level:1                                                     |\n|   t1:                                                                              |\n|       table_rows:2                                                                 |\n|       physical_range_rows:2                                                        |\n|       logical_range_rows:2                                                         |\n|       index_back_rows:0                                                            |\n|       output_rows:2                                                                |\n|       table_dop:1                                                                  |\n|       dop_method:Table DOP                                                         |\n|       avaiable_index_name:[t1]                                                     |\n|       stats version:0                                                              |\n|       dynamic sampling level:1                                                     |\n|   Plan Type:                                                                       |\n|       LOCAL                                                                        |\n|   Note:                                                                            |\n|       Degree of Parallelisim is 1 because of table property                        |\n+------------------------------------------------------------------------------------+\n",
            "展示 TRADITIONAL 格式的执行计划。",
            "obclient> EXPLAIN FORMAT=TRADITIONAL SELECT * FROM t1,t2 WHERE t1.c2=t2.c2 AND t2.c1 > 4;\n+------------------------------------------------------------------------------------+\n| Query Plan                                                                         |\n+------------------------------------------------------------------------------------+\n| =================================================                                  |\n| |ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|                                  |\n| -------------------------------------------------                                  |\n| |0 |HASH JOIN        |    |1       |9           |                                  |\n| |1 |├─TABLE FULL SCAN|t2  |1       |4           |                                  |\n| |2 |└─TABLE FULL SCAN|t1  |2       |4           |                                  |\n| =================================================                                  |\n| Outputs & filters:                                                                 |\n| -------------------------------------                                              |\n|   0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2]), filter(nil), rowset=16           |\n|       equal_conds([t1.c2 = t2.c2]), other_conds(nil)                               |\n|   1 - output([t2.c2], [t2.c1]), filter([t2.c1 > 4]), rowset=16                     |\n|       access([t2.c2], [t2.c1]), partitions(p0)                                     |\n|       is_index_back=false, is_global_index=false, filter_before_indexback[false],  |\n|       range_key([t2.__pk_increment]), range(MIN ; MAX)always true                  |\n|   2 - output([t1.c2], [t1.c1]), filter(nil), rowset=16                             |\n|       access([t1.c2], [t1.c1]), partitions(p0)                                     |\n|       is_index_back=false, is_global_index=false,                                  |\n|       range_key([t1.__pk_increment]), range(MIN ; MAX)always true                  |\n+------------------------------------------------------------------------------------+\n",
            "展示 JSON 格式的执行计划。",
            "obclient> EXPLAIN FORMAT=JSON SELECT * FROM t1,t2 WHERE t1.c2=t2.c2 AND t2.c1 > 4;\n+----------------------------------------------------------+\n| Query Plan                                               |\n+----------------------------------------------------------+\n| {                                                        |\n|   \"ID\":0,                                                |\n|   \"OPERATOR\":\"HASH JOIN \",                               |\n|   \"NAME\":\"\",                                             |\n|   \"EST.ROWS\":1,                                          |\n|   \"EST.TIME(us)\":9,                                      |\n|   \"output\":\"output([t1.c1], [t1.c2], [t2.c1], [t2.c2])\", |\n|   \"CHILD_1\": {                                           |\n|     \"ID\":1,                                              |\n|     \"OPERATOR\":\"TABLE FULL SCAN\",                        |\n|     \"NAME\":\"t2\",                                         |\n|     \"EST.ROWS\":1,                                        |\n|     \"EST.TIME(us)\":4,                                    |\n|     \"output\":\"output([t2.c2], [t2.c1])\"                  |\n|   },                                                     |\n|   \"CHILD_2\": {                                           |\n|     \"ID\":2,                                              |\n|     \"OPERATOR\":\"TABLE FULL SCAN\",                        |\n|     \"NAME\":\"t1\",                                         |\n|     \"EST.ROWS\":2,                                        |\n|     \"EST.TIME(us)\":4,                                    |\n|     \"output\":\"output([t1.c2], [t1.c1])\"                  |\n|   }                                                      |\n| }                                                        |\n+----------------------------------------------------------+\n"
        ]
    },
    "FLASHBACK": {
        "Title": [
            "FLASHBACK"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053477"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": " FLASHBACK {TENANT | DATABASE | TABLE} object_name TO BEFORE DROP [RENAME TO flashback_object_name];\n\nflashback_object_name:\n    tenant_name\n  | database_name\n  | database_name.table_name\n",
        "Description": [
            "该语句用于从回收站中恢复被删除的数据库对象，包括租户、数据库、表等。",
            "默认情况下，回收站处于开启状态，该行为由系统变量 recyclebin 控制。您可以通过 SHOW VARIABLES LIKE 'recyclebin' 查看回收站是否开启。有关系统变量 recyclebin 的详细信息，请参见《参考指南》中的 系统变量 章节。",
            "obclient> SHOW VARIABLES LIKE 'recyclebin';\n+---------------+-------+\n| Variable_name | Value |\n+---------------+-------+\n| recyclebin    | ON    |\n+---------------+-------+\n1 row in set\n",
            "如果回收站处于关闭状态，可以通过 SET recyclebin = on 语句开启回收站。回收站中的数据库对象没有被实际删除，仍然会占用资源，如果需要彻底删除，可以执行 PUREGE recyclebin 语句清理回收站。",
            "在删除表后，会同时也会删除从属该表的索引，在通过 FLASHBACK 语句恢复表时，表上的索引也会恢复。特别地，从表中直接删除的索引不会进入回收站，OceanBase 数据库也不支持从回收站中直接回收索引。"
        ],
        "Illustration": [
            "\n\n\n参数\n解释\n\n\n\n\nobject_name\n指定要恢复的数据库对象在回收站中的名称，不支持直接指定名称。 恢复数据库对象时，也会将从属于数据库的表、索引等数据库对象一并恢复。 您可以通过 SHOW RECYCLEBIN 语句查看要恢复的数据库在回收站中的名称。\n\n\nRENAME to\n恢复时将数据库对象重命名。\n\n\ntenant_name\n租户恢复后的名称。\n\n\ndatabase_name\n数据库恢复后的名称\n\n\ndatabase_name.table_name\n表恢复后的名称，其中 database_name 用于指定表恢复后的从属的数据库。\n\n\n"
        ],
        "Examples": [
            "obclient> FLASHBACK TENANT tenant1 TO BEFORE DROP;\nQuery OK, 0 rows affected\n",
            "obclient> CREATE DATABASE da;\nQuery OK, 1 row affected\n\nobclient> DROP DATABASE da;\nQuery OK, 0 rows affected\n\nobclient> SHOW RECYCLEBIN;\n+--------------------------------------------------+---------------+----------+----------------------------+\n| OBJECT_NAME                                      | ORIGINAL_NAME | TYPE     | CREATETIME                 |\n+--------------------------------------------------+---------------+----------+----------------------------+\n| __recycle_$_1_1099511628829_18446744073709551615 | da            | DATABASE | 2017-10-20 17:36:15.838771 |\n+--------------------------------------------------+---------------+----------+----------------------------+\n1 row in set\n\nobclient> FLASHBACK DATABASE __recycle_$_1_1099511628829_18446744073709551615 TO BEFORE DROP;\nQuery OK, 0 rows affected\n",
            "obclient> CREATE TABLE t1(c1 INT PRIMARY KEY,c2 INT,c3 INT);\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLE t1 ADD INDEX ind2 (c2) USING BTREE;\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLE t1 ADD INDEX ind3 (c3) USING BTREE;\nQuery OK, 0 rows affected\n\nobclient> SHOW INDEX FROM t1;\n+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+-----------+---------------+---------+\n| Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment   | Index_comment | Visible |\n+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+-----------+---------------+---------+\n| t1    |          0 | PRIMARY  |            1 | c1          | A         |        NULL | NULL     | NULL   |      | BTREE      | available |               | YES     |\n| t1    |          1 | ind2     |            1 | c2          | A         |        NULL | NULL     | NULL   | YES  | BTREE      | available |               | YES     |\n| t1    |          1 | ind3     |            1 | c3          | A         |        NULL | NULL     | NULL   | YES  | BTREE      | available |               | YES     |\n+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+-----------+---------------+---------+\n3 rows in set\n\nobclient> ALTER TABLE t1 DROP INDEX ind2;\nQuery OK, 0 rows affected\n\nobclient> SHOW RECYCLEBIN;\nEmpty set\n\nobclient> DROP TABLE t1;\nQuery OK, 0 rows affected\n\nobclient> SHOW RECYCLEBIN;\n+---------------------------------+--------------------------+-------+----------------------------+\n| OBJECT_NAME                     | ORIGINAL_NAME            | TYPE  | CREATETIME                 |\n+---------------------------------+--------------------------+-------+----------------------------+\n| __recycle_$_10_1628157070059520 | __idx_1099511677777_ind3 | INDEX | 2021-08-05 17:51:10.060761 |\n| __recycle_$_10_1628157070067712 | t1                       | TABLE | 2021-08-05 17:51:10.068062 |\n+---------------------------------+--------------------------+-------+----------------------------+\n2 rows in set\n\nobclient> FLASHBACK TABLE __recycle_$_10_1628157070067712 TO BEFORE DROP RENAME TO t2;\n\nobclient> SHOW INDEX FROM t2;\n+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+-----------+---------------+---------+\n| Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment   | Index_comment | Visible |\n+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+-----------+---------------+---------+\n| t2    |          0 | PRIMARY  |            1 | c1          | A         |        NULL | NULL     | NULL   |      | BTREE      | available |               | YES     |\n| t2    |          1 | ind3     |            1 | c3          | A         |        NULL | NULL     | NULL   | YES  | BTREE      | available |               | YES     |\n+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+-----------+---------------+---------+\n2 rows in set\n"
        ],
        "Detailed Examples": [
            "从回收站中恢复被删除的租户 tenant1。",
            "obclient> FLASHBACK TENANT tenant1 TO BEFORE DROP;\nQuery OK, 0 rows affected\n",
            "从回收站中恢复删除的数据库。",
            "obclient> CREATE DATABASE da;\nQuery OK, 1 row affected\n\nobclient> DROP DATABASE da;\nQuery OK, 0 rows affected\n\nobclient> SHOW RECYCLEBIN;\n+--------------------------------------------------+---------------+----------+----------------------------+\n| OBJECT_NAME                                      | ORIGINAL_NAME | TYPE     | CREATETIME                 |\n+--------------------------------------------------+---------------+----------+----------------------------+\n| __recycle_$_1_1099511628829_18446744073709551615 | da            | DATABASE | 2017-10-20 17:36:15.838771 |\n+--------------------------------------------------+---------------+----------+----------------------------+\n1 row in set\n\nobclient> FLASHBACK DATABASE __recycle_$_1_1099511628829_18446744073709551615 TO BEFORE DROP;\nQuery OK, 0 rows affected\n",
            "从回收站中恢复被删除的表 t1，重命名为 t2，并查看索引的恢复情况。",
            "obclient> CREATE TABLE t1(c1 INT PRIMARY KEY,c2 INT,c3 INT);\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLE t1 ADD INDEX ind2 (c2) USING BTREE;\nQuery OK, 0 rows affected\n\nobclient> ALTER TABLE t1 ADD INDEX ind3 (c3) USING BTREE;\nQuery OK, 0 rows affected\n\nobclient> SHOW INDEX FROM t1;\n+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+-----------+---------------+---------+\n| Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment   | Index_comment | Visible |\n+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+-----------+---------------+---------+\n| t1    |          0 | PRIMARY  |            1 | c1          | A         |        NULL | NULL     | NULL   |      | BTREE      | available |               | YES     |\n| t1    |          1 | ind2     |            1 | c2          | A         |        NULL | NULL     | NULL   | YES  | BTREE      | available |               | YES     |\n| t1    |          1 | ind3     |            1 | c3          | A         |        NULL | NULL     | NULL   | YES  | BTREE      | available |               | YES     |\n+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+-----------+---------------+---------+\n3 rows in set\n\nobclient> ALTER TABLE t1 DROP INDEX ind2;\nQuery OK, 0 rows affected\n\nobclient> SHOW RECYCLEBIN;\nEmpty set\n\nobclient> DROP TABLE t1;\nQuery OK, 0 rows affected\n\nobclient> SHOW RECYCLEBIN;\n+---------------------------------+--------------------------+-------+----------------------------+\n| OBJECT_NAME                     | ORIGINAL_NAME            | TYPE  | CREATETIME                 |\n+---------------------------------+--------------------------+-------+----------------------------+\n| __recycle_$_10_1628157070059520 | __idx_1099511677777_ind3 | INDEX | 2021-08-05 17:51:10.060761 |\n| __recycle_$_10_1628157070067712 | t1                       | TABLE | 2021-08-05 17:51:10.068062 |\n+---------------------------------+--------------------------+-------+----------------------------+\n2 rows in set\n\nobclient> FLASHBACK TABLE __recycle_$_10_1628157070067712 TO BEFORE DROP RENAME TO t2;\n\nobclient> SHOW INDEX FROM t2;\n+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+-----------+---------------+---------+\n| Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment   | Index_comment | Visible |\n+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+-----------+---------------+---------+\n| t2    |          0 | PRIMARY  |            1 | c1          | A         |        NULL | NULL     | NULL   |      | BTREE      | available |               | YES     |\n| t2    |          1 | ind3     |            1 | c3          | A         |        NULL | NULL     | NULL   | YES  | BTREE      | available |               | YES     |\n+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+-----------+---------------+---------+\n2 rows in set\n"
        ]
    },
    "GRANT": {
        "Title": [
            "GRANT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053467"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "GRANT priv_type[(column_name_list)] [, priv_type[(column_name_list)] ...]\n    ON priv_level \n    TO {user [, user...]} \n    [WITH GRANT OPTION];\n\ncolumn_name_list:\n    column_name [, column_name ...]\n\nuser:\n      user_or_role\n    | user_name IDENTIFIED [WITH auth_plugin] BY password \n    | user_name IDENTIFIED [WITH auth_plugin] BY PASSWORD password\n\nuser_or_role:\n    user_name | role_name\nGRANT role_name [, role_name ...]\n    TO user_or_role [, user_or_role ...]\n    [WITH ADMIN OPTION];\n\nuser_or_role:\n    user_name | role_name\n",
        "Description": [
            "该语句用于给指定的用户或角色授予相应的权限，或者将角色授予用户或角色。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\npriv_type\n指定授予的权限类型，可以授予多个权限，多个权限间使用英文逗号（,）隔开。具体的权限类型及其说明请参见 MySQL 模式下的权限分类。\n\n\ncolumn_name_list\n可选项，用于授予列级权限的列表，授予的权限仅作用于列出的列上。如果不指定，则权限适用于整个表或对象。详细介绍信息，参见 直接授予权限。\n\n\npriv_level\n指定授予权限的层级。可以指定在所有数据库和所有表上生效（*.*）、指定数据库或指定表生效（db_name.*，*.table_name）、或者特定的数据库中特定的表生效（db_name.table_name）。\n\n\nuser\n指定要授予权限的用户，可以是一个或多个用户，多个用户间使用英文逗号（,）隔开。如果用户不存在，该语句会直接创建用户。\n\n\nauth_plugin\n用于指定用户身份验证的方式，目前仅支持 mysql_native_password 身份验证插件。\n\n\nBY password\n为待授权的用户指定一个密码，此处密码为明文，存入 mysql.user 表后，服务器端会变为密文存储下来。如果密码中包含特殊字符 ~!@#%^&*_-+=`|(){}[]:;‘,.?/，需使用英文引号（’’ 或 \"\"）包含。\n\n\nBY PASSWORD password\n为待授权的用户指定一个密码，此处密码为密文，将直接存入 mysql.user 表。\n\n\nWITH GRANT OPTION\n指定权限是否允许转授，取消授权时级联。\n\n\nrole_name\n指定角色的名称。\n\n\nWITH ADMIN OPTION\n指定角色权限是否允许转授，取消授权时不级联。\n\n\n"
        ],
        "Examples": [
            "GRANT CREATE VIEW ON db1.* TO user1 WITH GRANT OPTION;\n",
            "GRANT CREATE ON db1.* TO user1 IDENTIFIED by '********';\n",
            "GRANT CREATE ON db1.* TO user2 IDENTIFIED by '********';\n",
            "GRANT SELECT(col1) ON test.tbl1 TO user001;\n",
            "GRANT role001 TO role002 WITH ADMIN OPTION;\n",
            "GRANT role001 TO user001 WITH ADMIN OPTION;\n"
        ],
        "Detailed Examples": [
            "示例一：授予对象权限",
            "为已存在的用户 user1 赋予数据库 db1 的 CREATE VIEW 权限，并设置允许转授其他用户相同的权限。",
            "GRANT CREATE VIEW ON db1.* TO user1 WITH GRANT OPTION;\n",
            "为已存在的用户 user1 赋予数据库 db1 的 CREATE 权限，并修改 user1 的密码。",
            "GRANT CREATE ON db1.* TO user1 IDENTIFIED by '********';\n",
            "执行后查看 mysql.user 表中 user1 用户的密码，会看到已更新为最新设置的密码。",
            "为不存在的用户 user2 赋予数据库 db1 的 CREATE 权限，并为 user2 设置密码。",
            "GRANT CREATE ON db1.* TO user2 IDENTIFIED by '********';\n",
            "为已存在的用户 user001 赋予数据库 test 中的表 tbl1 列 col1 的 SELECT 权限。",
            "GRANT SELECT(col1) ON test.tbl1 TO user001;\n",
            "示例二：将角色授予用户或角色",
            "将角色 role001 的权限授予角色 role002，并且允许转授。",
            "GRANT role001 TO role002 WITH ADMIN OPTION;\n",
            "将角色 role001 的权限授予用户 user001，并且允许转授。",
            "GRANT role001 TO user001 WITH ADMIN OPTION;\n"
        ]
    },
    "HELP": {
        "Title": [
            "HELP"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053481"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "HELP 'search_string';\n\nsearch_string:\n   contents | data_types | theme\n",
        "Description": [
            "返回帮助表中的搜索结果，搜索字符串可以包含通配符百分号（%）与下划线（_）。",
            "\n说明\nHELP 功能需要加载 help tables 才能正常使用，步骤如下：\n\n复制 fill_help_tables-ob.sql 文件至客户端机器 tmp 目录下。\n登录 sys 租户执行语句 source /tmp/fill_help_tables-ob.sql。\n\n",
            "搜索字符串可以匹配一个类别、多个主题或单个主题：",
            "查看顶级帮助类别的列表：",
            "HELP 'contents';\n",
            "查看各帮助类别主题，例如搜索数据类型 data types：",
            "HELP 'data_types';\n",
            "对于特定的帮助主题，可以使用关联的一个或多个关键字：",
            "HELP 'create table'\n",
            "返回的主题包含以下信息：",
            "\nname：主题名称。\ndescription：该主题的描述性帮助文本。\n",
            "name：主题名称。",
            "description：该主题的描述性帮助文本。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\ncontents\n查看所有帮助信息的目录，您可以按目录名称继续查找帮助信息。\n\n\ndata_types\n查看指定数据类型的帮助信息。\n\n\ntheme\n查看指定主题的帮助信息。\n\n\n"
        ],
        "Examples": [
            "obclient> HELP 'contents';\nYou asked for help about help category: \"Contents\"\nFor more information, type 'help <item>', where <item> is one of the following\ncategories:\n   Data Types\n   Functions\n   Operator\n   Escape character\n   Data Definition\n   Data Manipulation\n   Transaction Statements\n   Prepared Statements\n   Compound Statements\n   Administration\n   Utility\n",
            "obclient> HELP 'Numeric Types';\nYou asked for help about help category: \"Numeric Types\"\nFor more information, type 'help <item>', where <item> is one of the following\ntopics:\n   TINYINT\n   BOOL,BOOLEAN\n   SMALLINT\n   MEDIUMINT\n   INT\n   INTEGER\n   BIGINT\n   FLOAT\n   DOUBLE\n   DOUBLE PRECISION\n   FLOAT(p)\n   DECIMAL\n   NUMERIC\n",
            "obclient> HELP 'KILL';\nName: 'KILL'\nDescription:\n\n  语法：\n\n  KILL [GLOBAL | LOCAL] [CONNECTION | QUERY] 'sessionid'\n\n  每个与OceanBase的连接都在一个独立的线程里运行，您可以使用SHOW PROCESSLIST;语句查看哪些线程正在运行，并使用KILL thread_id语句 终止一个线程。\n\n• KILL CONNECTION与不含修改符的KILL一样：它会终止与给定的thread_id。\n\n• KILL QUERY会终止连接当前正在执行的语句，但是会保持连接的原状。\n如果您拥有PROCESS权限，则您可以查看所有线程。如果您拥有SUPER权限，您可以终止所有线程和语句。否则，您只能查看和终止您自己的线程 和语句。\n",
            "obclient> HELP SELECT\nName: 'SELECT'\nDescription:\n\n  该语句用于查询表中的内容。\n\n  基本查询\n\n  语法：\n\n  SELECT\n    [ALL | DISTINCT]\n      selectexpr [AS othername] [, selectexpr ...]\n      [FROM table_references]\n        [WHERE where_conditions]\n    [GROUP BY group_by_list]\n    [HAVING search_confitions]\n    [ORDER BY order_list]\n    [LIMIT {[offset,] rowcount | rowcount OFFSET offset}]\n        [FOR UPDATE];\n"
        ],
        "Detailed Examples": [
            "查看所有帮助信息的目录。",
            "obclient> HELP 'contents';\nYou asked for help about help category: \"Contents\"\nFor more information, type 'help <item>', where <item> is one of the following\ncategories:\n   Data Types\n   Functions\n   Operator\n   Escape character\n   Data Definition\n   Data Manipulation\n   Transaction Statements\n   Prepared Statements\n   Compound Statements\n   Administration\n   Utility\n",
            "查看 Numeric Type 包含哪些数据类型。",
            "obclient> HELP 'Numeric Types';\nYou asked for help about help category: \"Numeric Types\"\nFor more information, type 'help <item>', where <item> is one of the following\ntopics:\n   TINYINT\n   BOOL,BOOLEAN\n   SMALLINT\n   MEDIUMINT\n   INT\n   INTEGER\n   BIGINT\n   FLOAT\n   DOUBLE\n   DOUBLE PRECISION\n   FLOAT(p)\n   DECIMAL\n   NUMERIC\n",
            "查看 KILL 语句的使用方法。",
            "obclient> HELP 'KILL';\nName: 'KILL'\nDescription:\n\n  语法：\n\n  KILL [GLOBAL | LOCAL] [CONNECTION | QUERY] 'sessionid'\n\n  每个与OceanBase的连接都在一个独立的线程里运行，您可以使用SHOW PROCESSLIST;语句查看哪些线程正在运行，并使用KILL thread_id语句 终止一个线程。\n\n• KILL CONNECTION与不含修改符的KILL一样：它会终止与给定的thread_id。\n\n• KILL QUERY会终止连接当前正在执行的语句，但是会保持连接的原状。\n如果您拥有PROCESS权限，则您可以查看所有线程。如果您拥有SUPER权限，您可以终止所有线程和语句。否则，您只能查看和终止您自己的线程 和语句。\n",
            "查看 SELECT 语句的语法。",
            "obclient> HELP SELECT\nName: 'SELECT'\nDescription:\n\n  该语句用于查询表中的内容。\n\n  基本查询\n\n  语法：\n\n  SELECT\n    [ALL | DISTINCT]\n      selectexpr [AS othername] [, selectexpr ...]\n      [FROM table_references]\n        [WHERE where_conditions]\n    [GROUP BY group_by_list]\n    [HAVING search_confitions]\n    [ORDER BY order_list]\n    [LIMIT {[offset,] rowcount | rowcount OFFSET offset}]\n        [FOR UPDATE];\n"
        ]
    },
    "INSERT": {
        "Title": [
            "INSERT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053510"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "INSERT {into_table_insert | overwrite_table_insert};\n\ninto_table_insert:\n    [/*+ [APPEND | direct(bool, int, [load_mode])] enable_parallel_dml PARALLEL(N) */]\n    [IGNORE] [INTO]\n    single_table_insert\n    [ON DUPLICATE KEY UPDATE update_asgn_list]\n\nload_mode:\n    'full' \n    | 'inc_replace'\n\nsingle_table_insert:\n    {dml_table_name values_clause\n     | dml_table_name '(' ')' values_clause\n     | dml_table_name '(' column_list ')' values_clause\n     | dml_table_name SET update_asgn_list}\n\ndml_table_name:\n    table_name [PARTITION (partition_name,...)]\n\nvalues_clause:\n     {{VALUES | VALUE} ({expr | DEFAULT},...) [, ...]\n      | select_stmt}\n\ncolumn_list\n    column_name [, ...]\n\nupdate_asgn_list:\n     column_name = expr [, ...]\n\noverwrite_table_insert:\n    [/*+PARALLEL(N)*/] OVERWRITE table_name select_stmt;\n",
        "Description": [
            "该语句用于向表中添加一个或多个记录。",
            "不支持直接对子查询进行插入操作，例如 INSERT INTO (SELECT * FROM t1) VALUES(1, 1)。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nAPPEND | direct()\n使用 Hint 启用旁路导入功能。 \n      \n注意\n在执行旁路导入任务的过程中，不建议同时进行 OceanBase 数据库的升级操作，因为这可能导致旁路导入任务失败。\n\n\nAPPEND Hint 默认等同于使用的 direct(true, 0)，同时可以实现在线收集统计信息（GATHER_OPTIMIZER_STATISTICS Hint）的功能。\ndirect() 参数解释如下： \n        \nbool：表示写入的数据是否需要排序，true 表示需要排序，false 表示不需要排序。\nint：表示最大容忍的错误行数。\nload_mode：可选参数，表示旁路导入的模式。取值须使用英文单引号包起来，取值如下： \n          \nfull：默认值，表示全量导入。\ninc：表示增量导入，支持 INSERT 和 IGNORE 语义。\ninc_replace：表示增量导入，但不检查主键是否重复，相当于 REPLACE 语义的增量导入。 \n            \n注意\n当 load_mode 取值为 inc_replace 时，INSERT 语句中不允许有 IGNORE 关键字。\n\n\n\n 更多使用 INSERT INTO 旁路导入的信息，参见 使用 INSERT INTO SELECT 语句旁路导入数据。\n\n\nenable_parallel_dml parallel(N)\n加载数据的并行度，N 默认为 4。 \n      \n说明\n一般情况下，enable_parallel_dml Hint 和 parallel Hint 必须配合使用才能开启并行 DML。不过，当目标表的 Schema 上指定了表级别的并行度时，仅需指定 enable_parallel_dml Hint。\n\n\n\nIGNORE\n在 INSERT 语句执行过程中发生的错误将会被忽略。\n\n\ncolumn_list\n用于指定插入数据的列，同时插入多列时以逗号（,）分隔。\n\n\ntable_name\n指定要插入的表名。\n\n\npartition_name\n插入表指定的分区名。\n\n\nupdate_asgn_list\n赋值语句，例如 c1 = 2。\n\n\nON DUPLICATE KEY UPDATE\n指定对重复主键或唯一键的处理。如果指定了 ON DUPLICATE KEY UPDATE，当要插入的主键或唯一键有重复时，会用配置值替换待插入的值；如果不指定 ON DUPLICATE KEY UPDATE，当要插入的主键或唯一键有重复时，插入报错。\n\n\noverwrite_table_insert\n用于将查询结果替换表中的现有数据，即该语句会先清空表中的旧数据，再将新数据批量写入到表中。有关使用 INSERT OVERWRITE SELECT 语句的示例信息，参见 插入数据 中的 使用 INSERT OVERWRITE SELECT 语句插入数据 章节。 \n      \n注意\n该语句无法在多行事务中操作。因此，为确保操作顺利进行，需先执行 SET autocommit = on; 命令开启自动提交事务。\n\n\n\nselect_stmt\n指定 SELECT 子句。有关查询语句的详细信息，参见 SELECT 语句。\n\n\n"
        ],
        "Examples": [
            "obclient> CREATE TABLE t1(c1 INT PRIMARY KEY, c2 INT) PARTITION BY KEY(c1) PARTITIONS 4;\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE t2(c1 INT PRIMARY KEY, c2 INT);\nQuery OK, 0 rows affected\nobclient> SELECT * FROM t2;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  1 |    1 |\n|  2 |    2 |\n|  3 |    3 |\n|  4 |    4 |\n+----+------+\n4 rows in set\n",
            "obclient>  INSERT INTO t1 VALUES(1,1);\nQuery OK, 1 row affected\n\nobclient> SELECT * FROM t1;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  1 |    1 |\n+----+------+\n1 row in set\n",
            "obclient> INSERT t1 VALUES(1,1),(2,DEFAULT),(2+2,3*4);\nQuery OK, 3 rows affected\nRecords: 3  Duplicates: 0  Warnings: 0\n\nobclient> SELECT * FROM t1;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  1 |    1 |\n|  2 | NULL |\n|  4 |   12 |\n+----+------+\n3 rows in set\n",
            "obclient> INSERT INTO t1 PARTITION(p0) (c1) VALUES(5);\nQuery OK, 1 row affected\nobclient> SELECT * FROM t1 PARTITION(p0);\n+----+------+\n| c1 | c2   |\n+----+------+\n|  5 | NULL |\n+----+------+\n1 row in set\n",
            "obclient> INSERT INTO t1 VALUES(1,1),(1,2) ON DUPLICATE KEY UPDATE c1=100;\nQuery OK, 3 rows affected\nRecords: 2  Duplicates: 1  Warnings: 0\n\nobclient> SELECT * FROM t1;\n+-----+------+\n| c1  | c2   |\n+-----+------+\n| 100 |    1 |\n+-----+------+\n1 row in set\n",
            "obclient> CREATE VIEW v AS SELECT * FROM t1;\nQuery OK, 0 rows affected\nobclient> INSERT INTO v VALUES (1,1);\nQuery OK, 1 row affected\n\nobclient> SELECT * FROM v;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  1 |    1 |\n+----+------+\n1 row in set\n",
            "obclient> INSERT INTO t1 SELECT * FROM t2 WHERE c1>2;\nQuery OK, 2 rows affected\nRecords: 2  Duplicates: 0  Warnings: 0\n\nobclient> SELECT * FROM t1;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  3 |    3 |\n|  4 |    4 |\n+----+------+\n2 rows in set\n"
        ],
        "Detailed Examples": [
            "示例表及数据基于以下定义：",
            "obclient> CREATE TABLE t1(c1 INT PRIMARY KEY, c2 INT) PARTITION BY KEY(c1) PARTITIONS 4;\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE t2(c1 INT PRIMARY KEY, c2 INT);\nQuery OK, 0 rows affected\nobclient> SELECT * FROM t2;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  1 |    1 |\n|  2 |    2 |\n|  3 |    3 |\n|  4 |    4 |\n+----+------+\n4 rows in set\n",
            "向表 t1 中插入一行数数据。",
            "obclient>  INSERT INTO t1 VALUES(1,1);\nQuery OK, 1 row affected\n\nobclient> SELECT * FROM t1;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  1 |    1 |\n+----+------+\n1 row in set\n",
            "向表 t1 中插入多行数据。",
            "obclient> INSERT t1 VALUES(1,1),(2,DEFAULT),(2+2,3*4);\nQuery OK, 3 rows affected\nRecords: 3  Duplicates: 0  Warnings: 0\n\nobclient> SELECT * FROM t1;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  1 |    1 |\n|  2 | NULL |\n|  4 |   12 |\n+----+------+\n3 rows in set\n",
            "向表 t1 指定的 p0 分区插入单行数据。",
            "obclient> INSERT INTO t1 PARTITION(p0) (c1) VALUES(5);\nQuery OK, 1 row affected\nobclient> SELECT * FROM t1 PARTITION(p0);\n+----+------+\n| c1 | c2   |\n+----+------+\n|  5 | NULL |\n+----+------+\n1 row in set\n",
            "向表 t1 中插入重复主键值时利用 ON DUPLICATE KEY UPDATE 功能进行值更新。",
            "obclient> INSERT INTO t1 VALUES(1,1),(1,2) ON DUPLICATE KEY UPDATE c1=100;\nQuery OK, 3 rows affected\nRecords: 2  Duplicates: 1  Warnings: 0\n\nobclient> SELECT * FROM t1;\n+-----+------+\n| c1  | c2   |\n+-----+------+\n| 100 |    1 |\n+-----+------+\n1 row in set\n",
            "向可更新视图 v 的插入值。",
            "obclient> CREATE VIEW v AS SELECT * FROM t1;\nQuery OK, 0 rows affected\nobclient> INSERT INTO v VALUES (1,1);\nQuery OK, 1 row affected\n\nobclient> SELECT * FROM v;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  1 |    1 |\n+----+------+\n1 row in set\n",
            "向 t2 表中插入 t1 的查询结果。",
            "obclient> INSERT INTO t1 SELECT * FROM t2 WHERE c1>2;\nQuery OK, 2 rows affected\nRecords: 2  Duplicates: 0  Warnings: 0\n\nobclient> SELECT * FROM t1;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  3 |    3 |\n|  4 |    4 |\n+----+------+\n2 rows in set\n"
        ]
    },
    "JOIN 子句": {
        "Title": [
            "JOIN 子句"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054471"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "table_references:\n    table_reference [, table_reference ...]\n\ntable_reference:\n    table_factor\n  | joined_table\n\ntable_factor:\n    table_name [partition_option]\n [[AS] alias] [index_hint_list]\n  | table_subquery [AS] alias\n  | ( table_references )\n\njoined_table:\n      table_reference [NATURAL] [[INNER] | CROSS] JOIN table_factor [join_condition]\n    | table_reference outer_join_type JOIN table_factor join_condition\n\npartition_option:\n    PARTITION (partition_name_list)\n\njoin_condition:\n     ON expression\n   | USING (join_column_list)\n\njoin_column_list:\n    column_name [, column_name ...]\n\nouter_join_type:\n    [NATURAL] {LEFT | RIGHT | FULL} [OUTER]\n\nindex_hint_list:\n    index_hint [, index_hint ...]\n\nindex_hint:\n    {USE | FORCE | IGNORE} {KEY | INDEX}\n       [FOR {JOIN | ORDER BY | GROUP BY}] (index_list)\n\nindex_list:\n    index_name [, index_name ...]\n",
        "Description": [
            "JOIN 子句用于表的联接。",
            "数据库中的联接语句用于将数据库中的两个或多个表根据联接条件组合起来。由\"联接\"生成的集合, 可以被保存为表，或者当成表来使用。联接语句的含义是把两张表的属性通过它们的值组合在一起。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nPARTITION (partition_name_list)\n指定表的分区进行联接。\n\n\nNATURAL\n进行自然联接。 NATURAL JOIN 会自动使用相同的列进行联接。\n\n\n[INNER] JOIN\n进行内联接。 在没有指定联接条件时，INNER JOIN 与逗号（,）是等价的，它们都会使用指定的表产生一个笛卡尔积。 注意 逗号（,）作为操作符，优先级小于 INNER JOIN、CROSS JOIN、LEFT JOIN 等，因此如果将逗号与其他联接关键字混合使用，可能会导致 ON 子句的条件错误。\n\n\nCROSS JOIN\nOceanBase 数据库 MySQL 模式中，CROSS JOIN 与 JOIN、INNER JOIN 是等价的。\n\n\nLEFT [OUTER] JOIN\n进行左外联接，左表的一行未在右表中找到的时候，就在右表自动填充 NULL。\n\n\nRIGHT [OUTER] JOIN\n进行右外联接，右表的一行未在左表中找到的时候，就在左表自动填充 NULL。\n\n\nFULL [OUTER] JOIN\n进行外联接，左表或者右表找不匹配行的时候都会自动填充 NULL。\n\n\ncolumn_name\n用于连接的列名。\n\n\nindex_hint\n进行查询是否使用指定的索引。 \n      \nUSE：指示某项操作使用索引。\nFORCE：指示某些操作强制使用索引。\nIGNORE：是指某项操作不使用索引。\nFOR JOIN：指定索引进行连接。\nFOR ORDER BY：指定索引进行排序。\nFOR GROUP BY：指定索引进行分组。\n\n\n\nON expression\n返回重复列的联接条件，适用于使用不同名称的列作为联接条件。\n\n\nUSING (join_column_list)\n不返回重复列的联接条件，仅限于联接的表使用相同名称的列作为联接条件。\n\n\n"
        ],
        "Examples": [
            "obclient> SELECT * FROM a JOIN b ON a.ID=b.ID;\n+------+------+------+------+\n| id   | name | id   | name |\n+------+------+------+------+\n|    1 | A    |    1 |  100 |\n|    3 | A    |    3 |   75 |\n+------+------+------+------+\n2 rows in set\n",
            "obclient> SELECT * FROM a CROSS JOIN b ON a.id=b.id;\n+------+------+------+------+\n| id   | name | id   | name |\n+------+------+------+------+\n|    1 | A    |    1 |  100 |\n|    3 | A    |    3 |   75 |\n+------+------+------+------+\n2 rows in set\n",
            "obclient> SELECT * FROM a NATURAL JOIN b;\nEmpty set\n",
            "obclient> SELECT * FROM a LEFT JOIN b USING(ID);\n+------+------+------+\n| id   | name | name |\n+------+------+------+\n|    1 | A    |  100 |\n|    2 | B    | NULL |\n|    3 | A    |   75 |\n+------+------+------+\n3 rows in set\n",
            "obclient> SELECT * FROM a RIGHT JOIN b USING(ID);\n+------+------+------+\n| id   | name | name |\n+------+------+------+\n|    1 |  100 | A    |\n|    3 |   75 | A    |\n|    4 |   50 | NULL |\n+------+------+------+\n3 rows in set\n",
            "obclient> SELECT * FROM a FULL JOIN b USING(ID);\n+------+------+------+\n| id   | name | name |\n+------+------+------+\n|    1 | A    |  100 |\n|    2 | B    | NULL |\n|    3 | A    |   75 |\n|    4 | NULL |   50 |\n+------+------+------+\n4 rows in set\n"
        ],
        "Detailed Examples": [
            "以如下表 a 与表 b 为例。",
            "对表 a 与表 b 进行内联接。",
            "obclient> SELECT * FROM a JOIN b ON a.ID=b.ID;\n+------+------+------+------+\n| id   | name | id   | name |\n+------+------+------+------+\n|    1 | A    |    1 |  100 |\n|    3 | A    |    3 |   75 |\n+------+------+------+------+\n2 rows in set\n",
            "对表 a 与表 b 进行交叉联接。",
            "obclient> SELECT * FROM a CROSS JOIN b ON a.id=b.id;\n+------+------+------+------+\n| id   | name | id   | name |\n+------+------+------+------+\n|    1 | A    |    1 |  100 |\n|    3 | A    |    3 |   75 |\n+------+------+------+------+\n2 rows in set\n",
            "对表 a 与表 b 进行自然联接。",
            "obclient> SELECT * FROM a NATURAL JOIN b;\nEmpty set\n",
            "对表 a 与表 b 进行左外联接。",
            "obclient> SELECT * FROM a LEFT JOIN b USING(ID);\n+------+------+------+\n| id   | name | name |\n+------+------+------+\n|    1 | A    |  100 |\n|    2 | B    | NULL |\n|    3 | A    |   75 |\n+------+------+------+\n3 rows in set\n",
            "对表 a 与表 b 进行右外联接。",
            "obclient> SELECT * FROM a RIGHT JOIN b USING(ID);\n+------+------+------+\n| id   | name | name |\n+------+------+------+\n|    1 |  100 | A    |\n|    3 |   75 | A    |\n|    4 |   50 | NULL |\n+------+------+------+\n3 rows in set\n",
            "对表 a 与表 b 进行全联接。",
            "obclient> SELECT * FROM a FULL JOIN b USING(ID);\n+------+------+------+\n| id   | name | name |\n+------+------+------+\n|    1 | A    |  100 |\n|    2 | B    | NULL |\n|    3 | A    |   75 |\n|    4 | NULL |   50 |\n+------+------+------+\n4 rows in set\n"
        ]
    },
    "KILL": {
        "Title": [
            "KILL"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053451"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "KILL [CONNECTION | QUERY] 'session_id'\n",
        "Description": [
            "该语句用来终止一个会话。",
            "\n说明\n如果您拥有 PROCESS 权限，则您可以查看所有会话。如果您拥有 SUPER 权限，您可以终止所有会话和语句。否则，您只能查看和终止您自己的会话和语句。\n"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nKILL CONNECTION\n与不含修改符的 KILL 一样，可终止给定的 Client Session ID。\n\n\nKILL QUERY\n可终止连接当前正在执行的语句，但是会保持连接的原状。\n\n\nsession_id\n当前会话的 Client Session ID，该 ID 是会话在客户端中的唯一标识。可以通过 SHOW PROCESSLIST 或者 SHOW FULL PROCESSLIST 命令查询。\n\n\n"
        ],
        "Examples": [
            "obclient [test]> SHOW PROCESSLIST;\n",
            "+------------+------+----------------------+------+---------+-------+--------+------------------+\n| Id         | User | Host                 | db   | Command | Time  | State  | Info             |\n+------------+------+----------------------+------+---------+-------+--------+------------------+\n| 3221487617 | root | xxx.xx.xxx.xxx:54284 | NULL | Sleep   | 21560 | SLEEP  | NULL             |\n| 3221487619 | root | xxx.xx.xxx.xxx:21977 | test | Query   |     0 | ACTIVE | SHOW PROCESSLIST |\n| 3221487628 | root | xxx.xx.xxx.xxx:58550 | NULL | Sleep   |     9 | SLEEP  | NULL             |\n+------------+------+----------------------+------+---------+-------+--------+------------------+\n3 rows in set\n",
            "obclient [test]> KILL 3221487617;\n"
        ],
        "Detailed Examples": [
            "查询已连接的会话，再终止会话。",
            "查询已连接的会话。",
            "obclient [test]> SHOW PROCESSLIST;\n",
            "返回结果如下：",
            "+------------+------+----------------------+------+---------+-------+--------+------------------+\n| Id         | User | Host                 | db   | Command | Time  | State  | Info             |\n+------------+------+----------------------+------+---------+-------+--------+------------------+\n| 3221487617 | root | xxx.xx.xxx.xxx:54284 | NULL | Sleep   | 21560 | SLEEP  | NULL             |\n| 3221487619 | root | xxx.xx.xxx.xxx:21977 | test | Query   |     0 | ACTIVE | SHOW PROCESSLIST |\n| 3221487628 | root | xxx.xx.xxx.xxx:58550 | NULL | Sleep   |     9 | SLEEP  | NULL             |\n+------------+------+----------------------+------+---------+-------+--------+------------------+\n3 rows in set\n",
            "终止会话。",
            "obclient [test]> KILL 3221487617;\n"
        ]
    },
    "LOAD DATA": {
        "Title": [
            "LOAD DATA"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053471"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "LOAD DATA\n    [/*+ PARALLEL(N) [load_batch_size(M)] [APPEND | direct(bool, int, [load_mode])] */]\n    [REMOTE_OSS | LOCAL] INFILE 'file_name'\n    [REPLACE | IGNORE]\n    INTO TABLE table_name\n    [{FIELDS | COLUMNS}\n        [TERMINATED BY 'string']\n        [[OPTIONALLY] ENCLOSED BY 'char']\n        [ESCAPED BY 'char']\n    ]\n    [LINES\n        [STARTING BY 'string']\n        [TERMINATED BY 'string']\n    ]\n    [IGNORE number {LINES | ROWS}]\n    [(column_name_var\n        [, column_name_var] ...)]\n\nload_mode:\n    'full' \n    | 'inc_replace'\n",
        "Description": [
            "该语句用于从外部导入数据。",
            "\n注意\n\n\n带有触发器（Trigger）的表禁止使用 LOAD DATA 语句。\n要从外部文件导入数据，您需要具有 FILE 权限及以下设置： \n     \n加载服务器端文件时，需要提前设置系统变量 secure_file_priv，配置导入或导出文件时可以访问的路径。\n加载客户端本地文件时，需要在启动 MySQL/[OBClient](https://www.oceanbase.com/softwarecenter-cloud) 客户端时添加 --local-infile[=1] 选项来启用从本地文件系统加载数据的功能。\n\n\n\n",
            "OceanBase 数据库 LOAD DATA 语句支持加载以下输入文件：",
            "服务器端（OBServer 节点）文件：文件位于 OceanBase 数据库的 OBServer 节点上。可以使用 LOAD DATA INFILE 语句，将服务器端文件中加载数据到数据库表中。",
            "客户端（本地）文件：文件位于客户端本地文件系统中。可以使用 LOAD DATA LOCAL INFILE 语句，将客户端本地文件中的数据加载到数据库表中。",
            "\n说明\nOceanBase 数据库在执行 LOAD DATA LOCAL INFILE 命令时，系统会自动添加 IGNORE 选项。\n",
            "OSS 文件：文件位于 OSS 文件系统。可以使用 LOAD DATA REMOTE_OSS INFILE 语句，将 OSS 文件中的数据加载到数据库表中。",
            "LOAD DATA 目前可以对 CSV 格式的文本文件进行导入，整个导入的过程可以分为以下的流程：",
            "解析文件：OceanBase 数据库会根据用户输入的文件名，读取文件中的数据，并且根据指定的并行度来决定并行或者串行解析输入文件中的数据。",
            "分发数据：由于 OceanBase 是分布式数据库，各个分区的数据可能分布在各个不同的 OBServer 节点，LOAD DATA 会对解析出来的数据进行计算，决定数据需要被发送到哪个 OBServer 节点。",
            "插入数据：当目标 OBServer 节点收到数据后，在本地执行 INSERT 操作将数据插入到对应的分区当中。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nparallel(N)\n加载数据的并行度，N 默认为 4。\n\n\nload_batch_size(M)\n指定每次插入的批量大小，M 默认为 100。推荐取值范围为 [100,1000]。\n\n\nAPPEND | direct()\n使用 Hint 启用旁路导入功能。 \n      \n注意\n在执行旁路导入任务的过程中，不建议同时进行 OceanBase 数据库的升级操作，因为这可能导致旁路导入任务失败。\n\n\nAPPEND Hint 默认等同于使用的 direct(true, 0)，同时可以实现在线收集统计信息（GATHER_OPTIMIZER_STATISTICS Hint）的功能。\ndirect() 参数解释如下： \n        \nbool：表示写入的数据是否需要排序，true 表示需要排序，false 表示不需要排序。\nint：表示最大容忍的错误行数。\nload_mode：可选参数，表示旁路导入的模式。取值须使用英文单引号包起来，取值如下： \n          \nfull：默认值，表示全量导入。\ninc：表示增量导入，支持 INSERT 和 IGNORE 语义。\ninc_replace：表示增量导入，但不检查主键是否重复，相当于 REPLACE 语义的增量导入。 \n            \n注意\n当 load_mode 取值为 inc_replace 时，LOAD DATA 语句中不允许有 REPLACE 或 IGNORE 关键字。\n\n\n\n 更多使用 LOAD DATA 旁路导入的信息，参见 使用 LOAD DATA 语句旁路导入数据/文件。\n\n\nREMOTE_OSS | LOCAL\n可选项， \n      \nREMOTE_OSS 用于指定是否从 OSS 文件系统读取数据。 \n        \n注意\n如果使用了此参数，file_name 必须是一个 OSS 的地址。\n\nLOCAL 用于指定是否从客户端的本地文件系统读取数据。如果不使用 LOCAL 参数，那么将从服务器端（OBServer 节点）的文件系统读取数据。\n\n\n\nfile_name\n指定输入文件的路径和文件名。 file_name 有以下格式： \n      \n导入文件在 OBServer 节点或客户端：/$PATH/$FILENAME。\n导入文件在 OSS 上：oss://$PATH/$FILENAME/?host=$HOST&access_id=$ACCESS_ID&access_key=$ACCESSKEY。\n 参数解释如下： \n      \n$PATH：指定了存储桶中的文件路径，表示文件所在的目录。\n$FILENAME：指定了文件的名称，表示要访问的具体文件。\n$HOST：指定了 OSS 服务的主机名或 CDN 加速的域名，即要访问的 OSS 服务的地址。\n$ACCESS_ID：指定了访问 OSS 服务所需的 Access Key ID，用于身份验证。\n$ACCESSKEY：指定了访问 OSS 服务所需的 Access Key Secret，用于身份验证。\n\n\n说明\n在导入 OSS 上的文件时，需要确保以下信息：\n\n确保访问 OSS 存储桶和文件的权限。你需要拥有足够的权限来读取指定的存储桶和文件。这通常需要在 OSS 控制台或通过 OSS API 设置访问权限，并将访问密钥（Access Key ID 和 Access Key Secret）配置为具有适当权限的凭据。\n确保数据库服务器可以通过网络连接到指定的 $HOST 地址，以访问 OSS 服务。如果使用的是 OSS 服务的 CDN 加速域名，还需要确保 CDN 配置正确，并且网络连接正常。\n\n\n\n\n\nREPLACE | IGNORE\n如果遇到唯一键冲突，REPLACE 表示覆盖冲突行，IGNORE 表示忽略冲突行。LOAD DATA 通过表的主键来判断数据是否重复，如果表不存在主键，则 REPLACE 与 IGNORE 选项没有区别。缺省时，遇到重复数据的时候，LOAD DATA 会将出现错误的数据记录到日志文件中。 \n      \n注意\n\n\n在 MySQL 模式中执行 LOAD DATA LOCAL INFILE 命令时，系统会自动添加 IGNORE 选项。这种行为提供了与 MySQL 数据库更好的兼容性。\n使用 REPLACE 或者 IGNORE 子句的情况下，如果并行度大于 1，发生冲突的行最后插入的记录可能与串行执行的结果不同。如果需要严格保证冲突记录的插入结果，请不要指定该语句的并行度（或将并行度设置为 1）。\n\n\n\n\n\ntable_name\n导入数据的表的名称，支持分区表与非分区表。\n\n\nFIELDS | COLUMNS\n指定字段的格式。 \n      \nENCLOSED BY：设置导出值的修饰符。\nTERMINATED BY：设置导出列的结束符。\nESCAPED BY：设置导出值忽略的字符。\n\n\n\nLINES STARTING BY\n指定行起始符。\n\n\nLINES TERMINATED BY\n指定行结束符。\n\n\nIGNORES number { LINES | ROWS }\n忽略前几行，LINES 表示文件的前几行，ROWS 表示由字段分隔符指定的前几行数据。缺省时，会将输入文件中的字段逐个与表中的列进行对应。如果输入文件中并没有包含所有的列，那么缺少的列按照以下的规则会被默认填充： \n      \n字符类型：空字符串。\n数值类型：0。\n日期类型：0000-00-00。\n\n\n\ncolumn_name_var\n指定导入的列名。\n\n\n",
            "注意事项",
            "进行旁路导入时的通配符规则",
            "LOAD DATA 语句中，使用 Hint direct 指明是否进行旁路导入。在进行旁路数据导入时，来源于云对象存储服务（OSS）的文件只能指定一个；若需导入多个文件，必须分别使用多条 load data 语句。对于存储于集群内文件系统（server_disk）的数据文件，为便于多文件导入，引入文件通配符功能，适用于 server_disk 和 OSS 类型的文件源，不适用于客户端磁盘（client_disk）。",
            "集群内文件系统（server_disk）旁路导入使用方法",
            "server_disk 示例：",
            "\n匹配文件名：load data /*+ parallel(20) direct(true, 0) */ infile '/xxx/test.*.csv' replace into table t1 fields terminated by '|';\n匹配目录：load data /*+ parallel(20) direct(true, 0) */ infile '/aaa*bb/test.1.csv' replace into table t1 fields terminated by '|';\n同时匹配目录和文件名：load data /*+ parallel(20) direct(true, 0) */ infile '/aaa*bb/test.*.csv' replace into table t1 fields terminated by '|';\n",
            "匹配文件名：load data /*+ parallel(20) direct(true, 0) */ infile '/xxx/test.*.csv' replace into table t1 fields terminated by '|';",
            "匹配目录：load data /*+ parallel(20) direct(true, 0) */ infile '/aaa*bb/test.1.csv' replace into table t1 fields terminated by '|';",
            "同时匹配目录和文件名：load data /*+ parallel(20) direct(true, 0) */ infile '/aaa*bb/test.*.csv' replace into table t1 fields terminated by '|';",
            "server_disk 注意事项：",
            "\n必须存在至少一个匹配的文件，否则报错 OB_FILE_NOT_EXIST。\n对 load data /*+ parallel(20) direct(true, 0) */ infile '/xxx/test.1*.csv,/xxx/test.6*.csv' replace into table t1 fields terminated by '|'; 的输入，/xxx/test.1*.csv,/xxx/test.6*.csv 会被认为是整体匹配，若无匹配则报错 OB_FILE_NOT_EXIST。\n只支持 POSIX 的 GLOB 函数能支持的通配符，例如 test.6*(6|0).csv 和 test.6*({0.csv,6.csv}|.csv) 尽管可通过 ls 命令查找，但 GLOB 函数无法匹配，会报 OB_FILE_NOT_EXIST。\n",
            "必须存在至少一个匹配的文件，否则报错 OB_FILE_NOT_EXIST。",
            "对 load data /*+ parallel(20) direct(true, 0) */ infile '/xxx/test.1*.csv,/xxx/test.6*.csv' replace into table t1 fields terminated by '|'; 的输入，/xxx/test.1*.csv,/xxx/test.6*.csv 会被认为是整体匹配，若无匹配则报错 OB_FILE_NOT_EXIST。",
            "只支持 POSIX 的 GLOB 函数能支持的通配符，例如 test.6*(6|0).csv 和 test.6*({0.csv,6.csv}|.csv) 尽管可通过 ls 命令查找，但 GLOB 函数无法匹配，会报 OB_FILE_NOT_EXIST。",
            "云对象存储服务（OSS）旁路导入使用方法",
            "oss 示例：",
            "\n匹配文件名：load data /*+ parallel(20) direct(true, 0) */ remote_oss infile 'oss://xxx/test.*.csv?host=xxx&access_id=xxx&access_key=xxx' replace into table t1 fields terminated by '|';\n",
            "匹配文件名：",
            "load data /*+ parallel(20) direct(true, 0) */ remote_oss infile 'oss://xxx/test.*.csv?host=xxx&access_id=xxx&access_key=xxx' replace into table t1 fields terminated by '|';",
            "oss 注意事项：",
            "\n不支持目录匹配。例如：load data /*+ parallel(20) direct(true, 0) */ remote_oss infile 'oss://aa*bb/test.*.csv?host=xxx&access_id=xxx&access_key=xxx' replace into table t1 fields terminated by '|'; 会返回 OB_NOT_SUPPORTED。\n文件名通配符只支持 * 和 ?。其他通配符虽然允许输入，但无法匹配任何结果。\n",
            "不支持目录匹配。例如：load data /*+ parallel(20) direct(true, 0) */ remote_oss infile 'oss://aa*bb/test.*.csv?host=xxx&access_id=xxx&access_key=xxx' replace into table t1 fields terminated by '|'; 会返回 OB_NOT_SUPPORTED。",
            "文件名通配符只支持 * 和 ?。其他通配符虽然允许输入，但无法匹配任何结果。",
            "更多信息，参见使用 LOAD DATA 语句旁路导入数据/文件"
        ],
        "Examples": [
            "obclient> SET GLOBAL secure_file_priv = \"/\"\nQuery OK, 0 rows affected\nobclinet> \\q\nBye\n",
            "obclient> LOAD DATA INFILE 'test.sql' INTO TABLE t1;\nQuery OK, 0 rows affected\n",
            "LOAD DATA /*+ PARALLEL(4) APPEND */\n   INFILE '/home/admin/a.csv'\n   INTO TABLE t;\n",
            "load data /*+ parallel(1) direct(false,0)*/ remote_oss infile 'oss://antsys-oceanbasebackup/backup_rd/xiaotao.ht/lineitem2.tbl?host=***.oss-cdn.***&access_id=***&access_key=***' into table lineitem fields terminated by '|' enclosed by '' lines starting by '' terminated by '\\n';\n",
            "obclient --local-infile -hxxx.xxx.xxx.xxx -P2881 -uroot@mysql001 -p****** -A -Dtest\n",
            "Welcome to the OceanBase.  Commands end with ; or \\g.\nYour OceanBase connection id is 3221719526\nServer version: OceanBase 4.2.2.0 (r100000022023121309-f536833402c6efe9364d5a4b61830a858ef24d82) (Built Dec 13 2023 09:58:18)\n\nCopyright (c) 2000, 2018, OceanBase and/or its affiliates. All rights reserved.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nobclient [test]>\n",
            "obclient [test]> LOAD DATA LOCAL INFILE '/home/admin/test_data/tbl1.csv' INTO TABLE tbl1 FIELDS TERMINATED BY ',';\n",
            "Query OK, 3 rows affected\nRecords: 3  Deleted: 0  Skipped: 0  Warnings: 0\n",
            "LOAD DATA /*+ direct(true,1024) parallel(16) */ REMOTE_OSS INFILE 'oss://antsys-oceanbasebackup/backup_rd/xiaotao.ht/lineitem2.tbl?host=***.oss-cdn.***&access_id=***&access_key=***' INTO TABLE tbl1 FIELDS TERMINATED BY ',';\n"
        ],
        "Detailed Examples": [
            "\n说明\nLOAD DATA 加载数据时支持使用 \\N 代表 NULL。\n",
            "从服务器端文件导入数据",
            "示例 1：服务器端文件导入数据。",
            "设置全局安全路径。",
            "obclient> SET GLOBAL secure_file_priv = \"/\"\nQuery OK, 0 rows affected\nobclinet> \\q\nBye\n",
            "\n说明\n由于 secure_file_priv 是 GLOBAL 变量，所以需要执行 \\q 退出使之生效。\n",
            "重连数据库后，从外部文件导入数据。",
            "obclient> LOAD DATA INFILE 'test.sql' INTO TABLE t1;\nQuery OK, 0 rows affected\n",
            "示例 2：使用 APPEND Hint 启用旁路导入功能。",
            "LOAD DATA /*+ PARALLEL(4) APPEND */\n   INFILE '/home/admin/a.csv'\n   INTO TABLE t;\n",
            "示例 3：使用 direct(bool, int) Hint 启用旁路导入功能，旁路导入文件可在 oss 上。",
            "load data /*+ parallel(1) direct(false,0)*/ remote_oss infile 'oss://antsys-oceanbasebackup/backup_rd/xiaotao.ht/lineitem2.tbl?host=***.oss-cdn.***&access_id=***&access_key=***' into table lineitem fields terminated by '|' enclosed by '' lines starting by '' terminated by '\\n';\n",
            "从客户端（本地）文件导入数据",
            "示例 4：使用以下语句，从本地文件导入数据至 OceanBase 数据库表中。",
            "打开终端或命令提示符窗口，并输入以下命令来启动客户端。",
            "obclient --local-infile -hxxx.xxx.xxx.xxx -P2881 -uroot@mysql001 -p****** -A -Dtest\n",
            "返回结果如下：",
            "Welcome to the OceanBase.  Commands end with ; or \\g.\nYour OceanBase connection id is 3221719526\nServer version: OceanBase 4.2.2.0 (r100000022023121309-f536833402c6efe9364d5a4b61830a858ef24d82) (Built Dec 13 2023 09:58:18)\n\nCopyright (c) 2000, 2018, OceanBase and/or its affiliates. All rights reserved.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nobclient [test]>\n",
            "\n注意\n为了使用 LOAD DATA LOCAL INFILE 功能，请使用 V2.2.4 或之后的版本的 OBClient 客户端。如果您没有要求版本的 OBClient 客户端，也可以使用 MySQL 客户端来连接数据库。\n",
            "在客户端中，执行 LOAD DATA LOCAL INFILE 语句来加载本地数据文件。",
            "obclient [test]> LOAD DATA LOCAL INFILE '/home/admin/test_data/tbl1.csv' INTO TABLE tbl1 FIELDS TERMINATED BY ',';\n",
            "返回结果如下：",
            "Query OK, 3 rows affected\nRecords: 3  Deleted: 0  Skipped: 0  Warnings: 0\n",
            "从 OSS 文件导入数据",
            "使用 direct(bool, int) Hint 启用旁路导入功能，导入文件可在 OSS 上。",
            "LOAD DATA /*+ direct(true,1024) parallel(16) */ REMOTE_OSS INFILE 'oss://antsys-oceanbasebackup/backup_rd/xiaotao.ht/lineitem2.tbl?host=***.oss-cdn.***&access_id=***&access_key=***' INTO TABLE tbl1 FIELDS TERMINATED BY ',';\n"
        ]
    },
    "LOCK TABLES": {
        "Title": [
            "LOCK TABLES"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053527"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "LOCK TABLES\n    table_name [ [AS] alias ] lock_type\n    [, table_name [ [AS] alias ] lock_type ]...\n\nlock_type:\n    READ [LOCAL]  \n  | [LOW_PRIORTY] WRITE\n",
        "Description": [
            "该语句根据指定模式锁定一个或多个表、表的分区或者表的二级分区。",
            "\n说明\n当前版本的 OceanBase 数据库对 MySQL 模式下的 LOCK TABLES 语句将被忽略，并不会对表上锁。\n",
            "\n功能适用性\n目前 OceanBase 数据库社区版暂不支持 LOCK TABLES。\n"
        ],
        "Illustration": [],
        "Examples": [
            "obclient> LOCK TABLES test1 as t1 READ LOCAL, test2 as t2 LOW_PRIORITY WRITE;\nQuery OK, 0 row affected\n"
        ],
        "Detailed Examples": [
            "为 test1 表设置读锁，为 test2 表设置写锁。",
            "obclient> LOCK TABLES test1 as t1 READ LOCAL, test2 as t2 LOW_PRIORITY WRITE;\nQuery OK, 0 row affected\n"
        ]
    },
    "MAJOR 和 MINOR": {
        "Title": [
            "MAJOR 和 MINOR"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053469"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "ALTER SYSTEM merge_action;\n\nmerge_action:\n      MAJOR FREEZE [TABLET_ID = tablet_id]\n    | MINOR FREEZE [TABLET_ID = tablet_id]\n    | {SUSPEND | RESUME} MERGE\n    | CLEAR MERGE ERROR\n",
        "Description": [
            "该语句用于普通租户发起自身的存储层合并或转储。手动合并与转储支持租户级别和分区级别。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nMAJOR FREEZE\n发起每日合并。说明 用户租户只能合并自己。\n\n\nMINOR FREEZE\n发起转储。 说明 用户租户只能转储自己。\n\n\n{SUSPEND | RESUME} MERGE\n暂停或恢复每日合并。说明 用户租户只能暂停或恢复自己的每日合并。\n\n\nCLEAR MERGE ERROR\n清理合并出错的标记。说明 用户租户只能清理合并自己的出错标记。\n\n\nTABLET_ID\n指定分区转储。\n\n\n"
        ],
        "Examples": [
            "obclient> ALTER SYSTEM MAJOR FREEZE;\nQuery OK, 0 rows affected\n",
            "obclient> ALTER SYSTEM MAJOR FREEZE TABLET_ID = 5;\nQuery OK, 0 rows affected\n",
            "obclient> ALTER SYSTEM SUSPEND MERGE;\nQuery OK, 0 rows affected\n",
            "obclient> ALTER SYSTEM RESUME MERGE;\nQuery OK, 0 rows affected\n",
            "obclient> ALTER SYSTEM CLEAR MERGE ERROR;\nQuery OK, 0 rows affected\n",
            "obclient> ALTER SYSTEM MINOR FREEZE;\nQuery OK, 0 rows affected\n",
            "obclient> ALTER SYSTEM MINOR FREEZE TABLET_ID = 5;\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "存储层合并相关的示例",
            "普通租户发起自身的每日合并。",
            "obclient> ALTER SYSTEM MAJOR FREEZE;\nQuery OK, 0 rows affected\n",
            "普通租户发起分区级别的每日合并。",
            "obclient> ALTER SYSTEM MAJOR FREEZE TABLET_ID = 5;\nQuery OK, 0 rows affected\n",
            "暂停普通租户自身的每日合并。",
            "obclient> ALTER SYSTEM SUSPEND MERGE;\nQuery OK, 0 rows affected\n",
            "恢复普通租户自身的每日合并。",
            "obclient> ALTER SYSTEM RESUME MERGE;\nQuery OK, 0 rows affected\n",
            "清理合并普通租户自身的出错标记。",
            "obclient> ALTER SYSTEM CLEAR MERGE ERROR;\nQuery OK, 0 rows affected\n",
            "存储层转储的示例",
            "普通租户发起自身的转储。",
            "obclient> ALTER SYSTEM MINOR FREEZE;\nQuery OK, 0 rows affected\n",
            "普通租户发起分区级别的转储。",
            "obclient> ALTER SYSTEM MINOR FREEZE TABLET_ID = 5;\nQuery OK, 0 rows affected\n"
        ]
    },
    "OPTIMIZE": {
        "Title": [
            "OPTIMIZE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053523"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "OPTIMIZE {\n     TABLE table_list\n   | TENANT {ALL | tenant_list}\n};\n\ntable_list:\n   table_name [,table_name ...]\n\ntenant_list:\n    tenant_name [,tenant_name ...]\n",
        "Description": [
            "该语句用于控制开启一轮渐进合并。",
            "渐进合并的轮数由表的 progressive_merge_num 决定，如果没有为表配置 progressive_merge_num，则会使用租户的默认值。",
            "对于租户级合并，仅 sys 租户中可以对其他业务租户发起合并。",
            "对于表级合并，可以在业务租户对本租户的表发起合并。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\ntable_name\n进行渐进合并的表名。\n\n\ntenant_name\n进行渐进合并的租户名。ALL 表示所有租户。\n\n\n"
        ],
        "Examples": [
            "obclient> OPTIMIZE TABLE t1;\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "对 t1 表进行渐进合并。",
            "obclient> OPTIMIZE TABLE t1;\nQuery OK, 0 rows affected\n"
        ]
    },
    "OVER 子句": {
        "Title": [
            "OVER 子句"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054474"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": " [query_partition_clause] [ order_by_clause [win_window]]\n\nwin_window:\n    {ROWS | RANGE} BETWEEN win_bouding AND win_bouding\n  | {ROWS | RANGE} win_bouding\n\nwin_bouding:\n    CURRENT ROW\n  | win_interval {PRECEDING | FOLLOWING}\n\nwin_internal:\n   expr | INTERVAL expr date_unit\n\ndate_unit:\n    DAY\n  | DAY_HOUR\n  | DAY_MICROSECOND\n  | DAY_MINUTE\n  | DAY_SECOND\n  | HOUR\n  | HOUR_MICROSECOND\n  | HOUR_MINUTE\n  | HOUR_SECOND\n  | MICROSECOND\n  | MINUTE\n  | MINUTE_MICROSECOND\n  | MINUTE_SECOND\n  | MONTH\n  | QUARTER\n  | SECOND\n  | SECOND_MICROSECOND\n  | WEEK\n  | YEAR\n  | YEAR_MONTH\n",
        "Description": [
            "OVER 子句用于定义\"窗口\"。",
            "\"窗口\"也称为 Frame，OceanBase 数据库同时支持 ROWS 与 RANGE 两种 Frame 语义，前者是基于物理行偏移的窗口，后者则是基于逻辑值偏移的窗口。",
            "适用于 OVER 子句的函数称为分析函数（某些数据库下也叫做窗口函数），有关分析函数的详细信息，请参见 分析函数 章节。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nROWS\n使用物理窗口，根据 ORDER BY 子句排序后，取的前 N 行及后 N 行的数据计算。\n\n\nRANGE\n使用逻辑窗口，指定当前行对应值的范围取值。\n\n\nCURRENT ROW\n使用当前行作为窗口的边界。\n\n\nwin_interval PRECEDING | FOLLOWING\n指定窗口边界。 \n      \nwin_interval：边界的行数。\nPRECEDING：使用前 N 行。\nFOLLOWING：使用后 N 行。\n\n\n\nINTERVAL expr date_unit\n指定窗口间隔。 \n      \nexpr：用于指定间隔行数。\ndate_unit 用于指定 expr 的单位。\n\n\n\n"
        ],
        "Examples": [
            "obclient> CREATE TABLE employees (manager_id INT,last_name VARCHAR(50),hiredate VARCHAR(50),salary INT);\nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-01', 1700);\nINSERT INTO employees VALUES(100, 'De Haan', '2018-05-01',11000);      \nINSERT INTO employees VALUES(100, 'Errazuriz', '2017-07-21', 1400);\nINSERT INTO employees VALUES(100, 'Hartstein', '2019-05-01',14000);     \nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-22', 1700);\nINSERT INTO employees VALUES(100, 'Weiss',  '2019-07-11',13500);     \nINSERT INTO employees VALUES(100, 'Russell', '2019-10-05', 13000);\nINSERT INTO employees VALUES(100, 'Partners',  '2018-12-01',14000);     \nINSERT INTO employees VALUES(200, 'Ross',  '2019-06-11',13500);     \nINSERT INTO employees VALUES(200, 'Bell', '2019-05-25', 13000);\nINSERT INTO employees VALUES(200, 'Part',  '2018-08-11',14000);  \nCOMMIT;\n",
            "obclient> SELECT last_name, salary, APPROX_COUNT_DISTINCT(salary) OVER (ORDER BY hiredate) \"Variance\"\nFROM employees WHERE manager_id = 100 ORDER BY last_name, salary, \"Variance\";\n+-----------+--------+----------+\n| LAST_NAME | SALARY | Variance |\n+-----------+--------+----------+\n| De Haan   |  11000 |        3 |\n| Errazuriz |   1400 |        2 |\n| Hartstein |  14000 |        4 |\n| Partners  |  14000 |        4 |\n| Raphaely  |   1700 |        1 |\n| Raphaely  |   1700 |        2 |\n| Russell   |  13000 |        6 |\n| Weiss     |  13500 |        5 |\n+-----------+--------+----------+\n"
        ],
        "Detailed Examples": [
            "本节以 employees 表为例。",
            "obclient> CREATE TABLE employees (manager_id INT,last_name VARCHAR(50),hiredate VARCHAR(50),salary INT);\nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-01', 1700);\nINSERT INTO employees VALUES(100, 'De Haan', '2018-05-01',11000);      \nINSERT INTO employees VALUES(100, 'Errazuriz', '2017-07-21', 1400);\nINSERT INTO employees VALUES(100, 'Hartstein', '2019-05-01',14000);     \nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-22', 1700);\nINSERT INTO employees VALUES(100, 'Weiss',  '2019-07-11',13500);     \nINSERT INTO employees VALUES(100, 'Russell', '2019-10-05', 13000);\nINSERT INTO employees VALUES(100, 'Partners',  '2018-12-01',14000);     \nINSERT INTO employees VALUES(200, 'Ross',  '2019-06-11',13500);     \nINSERT INTO employees VALUES(200, 'Bell', '2019-05-25', 13000);\nINSERT INTO employees VALUES(200, 'Part',  '2018-08-11',14000);  \nCOMMIT;\n",
            "对 salary 去重后的行数进行计算。",
            "obclient> SELECT last_name, salary, APPROX_COUNT_DISTINCT(salary) OVER (ORDER BY hiredate) \"Variance\"\nFROM employees WHERE manager_id = 100 ORDER BY last_name, salary, \"Variance\";\n+-----------+--------+----------+\n| LAST_NAME | SALARY | Variance |\n+-----------+--------+----------+\n| De Haan   |  11000 |        3 |\n| Errazuriz |   1400 |        2 |\n| Hartstein |  14000 |        4 |\n| Partners  |  14000 |        4 |\n| Raphaely  |   1700 |        1 |\n| Raphaely  |   1700 |        2 |\n| Russell   |  13000 |        6 |\n| Weiss     |  13500 |        5 |\n+-----------+--------+----------+\n"
        ]
    },
    "PREPARE": {
        "Title": [
            "PREPARE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053528"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "PREPARE stmt_name FROM preparable_stmt\n",
        "Description": [
            "该语句用于准备一个语句并为其指定一个名称，用于稍后引用该语句。可以使用 EXECUTE 执行 Prepared 语句，并使用 DEALLOCATE PREPARE 释放该语句。",
            "\n说明\n\nPrepared 语句仅在当前会话中生效，不适用于其他会话。当会话结束时，所创建的 Prepared 语句不再存在。\n在存储例程中创建的 Prepared 语句具有全局性，则在程序执行完毕后不会释放它。但是在存储程序上下文中的 Prepared 语句不能引用存储过程或函数的参数或局部变量，否则会导致该语句无法在程序外执行。\n\n"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nstmt_name\n指定准备语句的名称。语句名称不区分大小写。\n\n\npreparable_stmt\n指定要准备执行的 SQL 语句。该参数是字符串字面量或包含 SQL 语句文本的用户变量，文本必须表示单个语句，而不是多个语句。该参数可以包含存储过程调用的字符串字面量或用户变量，但用户变量交互时，不能将出参直接赋给用户变量。\n\n\n"
        ],
        "Examples": [
            "/* 使用 SELECT 语句构成 Prepared 语句 */\nobclient> PREPARE stmt1 FROM 'SELECT SQRT(POW(?,2) + POW(?,2)) AS hypotenuse';\nQuery OK, 0 rows affected\n\n/* 设置用户变量 a 和 b */\nobclient> SET @a = 3;\nQuery OK, 0 rows affected\n\nobclient> SET @b = 4;\nQuery OK, 0 rows affected\n\n/* 应用用户变量的值执行 Prepared 语句 */\nobclient> EXECUTE stmt1 USING @a, @b;\n+------------+\n| hypotenuse |\n+------------+\n|          5 |\n+------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "/* 使用 SELECT 语句构成 Prepared 语句 */\nobclient> PREPARE stmt1 FROM 'SELECT SQRT(POW(?,2) + POW(?,2)) AS hypotenuse';\nQuery OK, 0 rows affected\n\n/* 设置用户变量 a 和 b */\nobclient> SET @a = 3;\nQuery OK, 0 rows affected\n\nobclient> SET @b = 4;\nQuery OK, 0 rows affected\n\n/* 应用用户变量的值执行 Prepared 语句 */\nobclient> EXECUTE stmt1 USING @a, @b;\n+------------+\n| hypotenuse |\n+------------+\n|          5 |\n+------------+\n1 row in set\n",
            "\n说明\nOceanBase 数据库在当前版本暂不支持交互客户端显式结果。\n"
        ]
    },
    "PURGE RECYCLEBIN": {
        "Title": [
            "PURGE RECYCLEBIN"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053508"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": " PURGE RECYCLEBIN;\n",
        "Description": [
            "该语句用于清空回收站。",
            "\n注意\nPURGE RECYCLEBIN 会清除回收站中的所有数据库对象，只有 root 用户才能够执行这条语句，操作时请谨慎。\n"
        ],
        "Illustration": [],
        "Examples": [
            "obclient> PURGE RECYCLEBIN;\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "清空回收站。",
            "obclient> PURGE RECYCLEBIN;\nQuery OK, 0 rows affected\n"
        ]
    },
    "PURGE": {
        "Title": [
            "PURGE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053504"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": " PURGE {TENANT | DATABASE | TABLE | INDEX} object_name;\n\nobject_name:\n    tenant_name\n  | database_name\n  | table_name\n  | index_name\n",
        "Description": [
            "该语句用于删除回收站中的数据库对象，只支持删除租户、数据库、表与索引。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\ntenant_name\n指定要删除的租户名称。可以使用删除前的原始租户名，也可以使用在回收站中的名字。回收站中的名字具有唯一性，可以指定确定的租户；原始租户名可能会重复，此时删除的是最早进入回收站的租户。\n\n\ndatabase_name\n指定要删除的数据库在回收站中的名称，不支持直接指定数据库的名称。\n\n\ntable_name\n指定要删除的表在回收站中的名称，不支持直接指定表的名称。\n\n\nindex_name\n指定要删除的索引在回收站中的名称，不支持直接指定索引的名称。\n\n\n"
        ],
        "Examples": [
            "obclient> SHOW RECYCLEBIN;\n+--------------------------------+---------------+--------+----------------------------+\n| OBJECT_NAME                    | ORIGINAL_NAME | TYPE   | CREATETIME                 |\n+--------------------------------+---------------+--------+----------------------------+\n| __recycle_$_1_1599722585571328 | mysql         | TENANT | 2020-09-10 15:36:54.712101 |\n+--------------------------------+---------------+--------+----------------------------+\n1 row in set\n\nobclient> PURGE TENANT mysql;\nQuery OK, 0 rows affected\n\nobclient> SHOW RECYCLEBIN;\nEmpty set\n",
            "obclient> CREATE DATABASE db1;\nQuery OK, 1 row affected\n\nobclient> DROP DATABASE db1;\nQuery OK, 0 rows affected\n\nobclient> SHOW RECYCLEBIN;\n+--------------------------------+---------------+----------+----------------------------+\n| OBJECT_NAME                    | ORIGINAL_NAME | TYPE     | CREATETIME                 |\n+--------------------------------+---------------+----------+----------------------------+\n| __recycle_$_1_1597384386029184 | db1           | DATABASE | 2020-08-14 13:53:06.029367 |\n+--------------------------------+---------------+----------+----------------------------+\n1 row in set\n\nobclient> PURGE DATABASE __recycle_$_1_1597384386029184;\nQuery OK, 0 rows affected\n\nobclient> SHOW RECYCLEBIN;\nEmpty set\n",
            "obclient> CREATE TABLE test(c1 INT);\nQuery OK, 0 rows affected\n\nobclient> DROP TABLE test;\nQuery OK, 0 rows affected\n\nobclient> SHOW RECYCLEBIN;\n+-------------------------------------------+---------------+-------+----------------------------+\n| OBJECT_NAME                               | ORIGINAL_NAME | TYPE  | CREATETIME                 |\n+-------------------------------------------+---------------+-------+----------------------------+\n| __recycle_$_1_1099511628776_1099511677778 | test          | TABLE | 2017-10-20 17:40:22.304025 |\n+-------------------------------------------+---------------+-------+----------------------------+\n1 row in set\n\nobclient> PURGE TABLE __recycle_$_1_1099511628776_1099511677778;\nQuery OK, 0 rows affected\n\nobclient> SHOW RECYCLEBIN;\nEmpty set\n",
            "obclient> CREATE TABLE t1(c1 INT);\nQuery OK, 0 rows affected\n\nobclient> CREATE INDEX idx ON t1(c1);\nQuery OK, 0 rows affected\n\nobclient> DROP TABLE t1;\nQuery OK, 0 rows affected\n\nobclient> SHOW RECYCLEBIN;\n+--------------------------------+----------------------------+-------+----------------------------+\n| OBJECT_NAME                    | ORIGINAL_NAME              | TYPE  | CREATETIME                 |\n+--------------------------------+----------------------------+-------+----------------------------+\n| __recycle_$_1_1597387726700872 | __idx_1101710651081557_idx | INDEX | 2020-08-14 14:48:46.699145 |\n| __recycle_$_1_1597387726712976 | t1                         | TABLE | 2020-08-14 14:48:46.712643 |\n+--------------------------------+----------------------------+-------+----------------------------+\n2 rows in set\n\nobclient> PURGE INDEX __recycle_$_1_1597387726700872;\nQuery OK, 0 rows affected\n\nobclient> SHOW RECYCLEBIN;\n+--------------------------------+----------------------------+-------+----------------------------+\n| OBJECT_NAME                    | ORIGINAL_NAME              | TYPE  | CREATETIME                 |\n+--------------------------------+----------------------------+-------+----------------------------+\n| __recycle_$_1_1597387726700872 | __idx_1101710651081557_idx | INDEX | 2020-08-14 14:48:46.699145 |\n+--------------------------------+----------------------------+-------+----------------------------+\n1 rows in set\n"
        ],
        "Detailed Examples": [
            "删除回收站中的租户 mysql。",
            "obclient> SHOW RECYCLEBIN;\n+--------------------------------+---------------+--------+----------------------------+\n| OBJECT_NAME                    | ORIGINAL_NAME | TYPE   | CREATETIME                 |\n+--------------------------------+---------------+--------+----------------------------+\n| __recycle_$_1_1599722585571328 | mysql         | TENANT | 2020-09-10 15:36:54.712101 |\n+--------------------------------+---------------+--------+----------------------------+\n1 row in set\n\nobclient> PURGE TENANT mysql;\nQuery OK, 0 rows affected\n\nobclient> SHOW RECYCLEBIN;\nEmpty set\n",
            "删除回收站中的数据库 __recycle_$_1_1597384386029184。",
            "obclient> CREATE DATABASE db1;\nQuery OK, 1 row affected\n\nobclient> DROP DATABASE db1;\nQuery OK, 0 rows affected\n\nobclient> SHOW RECYCLEBIN;\n+--------------------------------+---------------+----------+----------------------------+\n| OBJECT_NAME                    | ORIGINAL_NAME | TYPE     | CREATETIME                 |\n+--------------------------------+---------------+----------+----------------------------+\n| __recycle_$_1_1597384386029184 | db1           | DATABASE | 2020-08-14 13:53:06.029367 |\n+--------------------------------+---------------+----------+----------------------------+\n1 row in set\n\nobclient> PURGE DATABASE __recycle_$_1_1597384386029184;\nQuery OK, 0 rows affected\n\nobclient> SHOW RECYCLEBIN;\nEmpty set\n",
            "删除回收站中的表 __recycle_$_1_1099511628776_1099511677778。",
            "obclient> CREATE TABLE test(c1 INT);\nQuery OK, 0 rows affected\n\nobclient> DROP TABLE test;\nQuery OK, 0 rows affected\n\nobclient> SHOW RECYCLEBIN;\n+-------------------------------------------+---------------+-------+----------------------------+\n| OBJECT_NAME                               | ORIGINAL_NAME | TYPE  | CREATETIME                 |\n+-------------------------------------------+---------------+-------+----------------------------+\n| __recycle_$_1_1099511628776_1099511677778 | test          | TABLE | 2017-10-20 17:40:22.304025 |\n+-------------------------------------------+---------------+-------+----------------------------+\n1 row in set\n\nobclient> PURGE TABLE __recycle_$_1_1099511628776_1099511677778;\nQuery OK, 0 rows affected\n\nobclient> SHOW RECYCLEBIN;\nEmpty set\n",
            "删除回收站中的索引 __recycle_$_1_1597387726700872。",
            "obclient> CREATE TABLE t1(c1 INT);\nQuery OK, 0 rows affected\n\nobclient> CREATE INDEX idx ON t1(c1);\nQuery OK, 0 rows affected\n\nobclient> DROP TABLE t1;\nQuery OK, 0 rows affected\n\nobclient> SHOW RECYCLEBIN;\n+--------------------------------+----------------------------+-------+----------------------------+\n| OBJECT_NAME                    | ORIGINAL_NAME              | TYPE  | CREATETIME                 |\n+--------------------------------+----------------------------+-------+----------------------------+\n| __recycle_$_1_1597387726700872 | __idx_1101710651081557_idx | INDEX | 2020-08-14 14:48:46.699145 |\n| __recycle_$_1_1597387726712976 | t1                         | TABLE | 2020-08-14 14:48:46.712643 |\n+--------------------------------+----------------------------+-------+----------------------------+\n2 rows in set\n\nobclient> PURGE INDEX __recycle_$_1_1597387726700872;\nQuery OK, 0 rows affected\n\nobclient> SHOW RECYCLEBIN;\n+--------------------------------+----------------------------+-------+----------------------------+\n| OBJECT_NAME                    | ORIGINAL_NAME              | TYPE  | CREATETIME                 |\n+--------------------------------+----------------------------+-------+----------------------------+\n| __recycle_$_1_1597387726700872 | __idx_1101710651081557_idx | INDEX | 2020-08-14 14:48:46.699145 |\n+--------------------------------+----------------------------+-------+----------------------------+\n1 rows in set\n"
        ]
    },
    "RENAME TABLE": {
        "Title": [
            "RENAME TABLE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053516"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "RENAME TABLE table_name TO [new_database_name.]new_table_name\n   [, table_name2 TO [new_database_name.]new_table_name2 ...];\n",
        "Description": [
            "该语句用来对一个或多个表进行重命名。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\ntable_name\n原表名。\n\n\nnew_table_name\n新表名。\n\n\ntable_name TO [new_database_name.]new_table_name\n多个表重命名时，使用逗号（,）分隔。您可以指定 new_database_name 将表移动到其他数据库中。\n\n\n"
        ],
        "Examples": [
            "obclient> CREATE TABLE t1(c1 INT);\nobclient> CREATE TABLE t2(c1 INT);\n",
            "obclient> RENAME TABLE t1 TO t11;\n",
            "obclient> RENAME TABLE t11 TO t111, t2 TO t22;\n",
            "obclient> RENAME TABLE t22 TO mysql.t22;\n"
        ],
        "Detailed Examples": [
            "创建表 t1 和 t2。",
            "obclient> CREATE TABLE t1(c1 INT);\nobclient> CREATE TABLE t2(c1 INT);\n",
            "将表 t1 重命名为 t11。",
            "obclient> RENAME TABLE t1 TO t11;\n",
            "将表 t11 重命名为 t111，表 t2 重命名为 t22。",
            "obclient> RENAME TABLE t11 TO t111, t2 TO t22;\n",
            "将表 t22 移动到 mysql 数据库中。",
            "obclient> RENAME TABLE t22 TO mysql.t22;\n"
        ]
    },
    "RENAME USER": {
        "Title": [
            "RENAME USER"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053455"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "RENAME USER\n    'old_user_name' TO 'new_user_name'\n  [,'old_user_name' TO 'new_user_name'...];\n",
        "Description": [
            "该语句用于修改 OceanBase 数据库登录用户的用户名。",
            "\n说明\n必须拥有全局 CREATE USER 权限，才可以使用本命令重命名用户。\n"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nold_user_name\n旧用户名。\n\n\nnew_user_name\n新用户名。用户名需要小于或等于 16 字节。\n\n\n‘old_user_name’ TO ‘new_user_name’\n修改用户名。同时修改多个用户名时，用逗号（,）分隔。 修改前后，新旧用户权限保持一致。\n\n\n"
        ],
        "Examples": [
            "obclient> SELECT user FROM mysql.user;\n+-----------+\n| user      |\n+-----------+\n| root      |\n| admin     |\n| sqluser01 |\n| sqluser02 |\n+-----------+\n4 rows in set\n",
            "obclient> RENAME USER 'sqluser01' TO 'obsqluser01';\n",
            "obclient> RENAME USER 'sqluser01' TO 'obsqluser01';\nQuery OK, 0 rows affected\n\nobclient> SELECT user FROM mysql.user;\n+-------------+\n| user        |\n+-------------+\n| root        |\n| admin       |\n| obsqluser01 |\n| sqluser02   |\n+-------------+\n4 rows in set\n"
        ],
        "Detailed Examples": [
            "修改前，执行以下命令，查看用户。",
            "结果如下所示。",
            "obclient> SELECT user FROM mysql.user;\n+-----------+\n| user      |\n+-----------+\n| root      |\n| admin     |\n| sqluser01 |\n| sqluser02 |\n+-----------+\n4 rows in set\n",
            "执行以下命令，将 sqluser01 用户的用户名修改为 obsqluser01。",
            "obclient> RENAME USER 'sqluser01' TO 'obsqluser01';\n",
            "修改后，执行以下命令，查看用户，结果如下所示。",
            "sqluser01 用户的用户名被修改为 obsqluser01。",
            "obclient> RENAME USER 'sqluser01' TO 'obsqluser01';\nQuery OK, 0 rows affected\n\nobclient> SELECT user FROM mysql.user;\n+-------------+\n| user        |\n+-------------+\n| root        |\n| admin       |\n| obsqluser01 |\n| sqluser02   |\n+-------------+\n4 rows in set\n"
        ]
    },
    "REPLACE": {
        "Title": [
            "REPLACE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053509"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "replace_stmt:\n    REPLACE [INTO] table_factor [PARTITION (partition_name_list)] [(column_name_list)]\n    {VALUES | VALUE} column_value_lists;\n\npartition_name_list:\n        partition_name [, partition_name ...]\n\ncolumn_name_list:\n    column_name [, column_name ...]\n\ncolumn_value_lists:\n        (column_value_list) [, (column_value_list) ...]\n\ncolumn_value_list:\n    column_value [, column_value ...]\n\ncolumn_value:\n    {expression | DEFAULT}\n",
        "Description": [
            "该语句用于替换表中的一个或多个记录。如果没有主键或唯一键冲突则插入记录，如果存在冲突则先删除冲突记录再插入新的记录。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\ntable_factor\n替换的表名。\n\n\ncolumn_name_list\n指定替换数据的列。\n\n\npartition_name_list\n替换表指定的分区名。\n\n\n"
        ],
        "Examples": [
            "obclient> CREATE TABLE test (c1 INT PRIMARY KEY, c2 VARCHAR(40));\nQuery OK, 0 rows affected\n",
            "obclient> REPLACE INTO test VALUES (1, 'hello alibaba'),(2, 'hello ob');\nQuery OK, 2 rows affected\nRecords: 2  Duplicates: 0  Warnings: 0\n",
            "obclient> SELECT * FROM test;\n+----+---------------+\n| c1 | c2            |\n+----+---------------+\n|  1 | hello alibaba |\n|  2 | hello ob      |\n+----+---------------+\n2 rows in set\n",
            "obclient> REPLACE INTO test VALUES (3, 'hello alibaba'),(2, 'hello oceanbase');\nQuery OK, 3 rows affected\nRecords: 2  Duplicates: 1  Warnings: 0\n",
            "obclient> SELECT * FROM test;\n+----+-----------------+\n| c1 | c2              |\n+----+-----------------+\n|  1 | hello alibaba   |\n|  2 | hello oceanbase |\n|  3 | hello alibaba   |\n+----+-----------------+\n3 rows in set\n"
        ],
        "Detailed Examples": [
            "本示例基于如下表定义。",
            "obclient> CREATE TABLE test (c1 INT PRIMARY KEY, c2 VARCHAR(40));\nQuery OK, 0 rows affected\n",
            "替换 test 表中的行一和行二的值分别为 'hello alibaba' 和 'hello ob'。",
            "obclient> REPLACE INTO test VALUES (1, 'hello alibaba'),(2, 'hello ob');\nQuery OK, 2 rows affected\nRecords: 2  Duplicates: 0  Warnings: 0\n",
            "查看 test 表中的行一和行二内容。",
            "obclient> SELECT * FROM test;\n+----+---------------+\n| c1 | c2            |\n+----+---------------+\n|  1 | hello alibaba |\n|  2 | hello ob      |\n+----+---------------+\n2 rows in set\n",
            "替换表 test 中的行三和行二的内容分别为 'hello alibaba' 和 'hello oceanbase'。",
            "obclient> REPLACE INTO test VALUES (3, 'hello alibaba'),(2, 'hello oceanbase');\nQuery OK, 3 rows affected\nRecords: 2  Duplicates: 1  Warnings: 0\n",
            "查看 test 表中的行一、行二和行三的内容。",
            "obclient> SELECT * FROM test;\n+----+-----------------+\n| c1 | c2              |\n+----+-----------------+\n|  1 | hello alibaba   |\n|  2 | hello oceanbase |\n|  3 | hello alibaba   |\n+----+-----------------+\n3 rows in set\n"
        ]
    },
    "REVOKE": {
        "Title": [
            "REVOKE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053465"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "REVOKE priv_type[(column_name_list)] [, priv_type[(column_name_list)] ...]\n     ON database.table_name\n     FROM 'user_or_role';\n\npriv_type:\n      ALTER\n    | CREATE\n    | CREATE USER\n    | CREATE VIEW\n    | DELETE\n    | DROP\n    | GRANT OPTION\n    | INDEX\n    | INSERT\n    | PROCESS\n    | SELECT\n    | SHOW DATABASES\n    | SHOW VIEW\n    | SUPER\n    | UPDATE\n    | USAGE\n\ncolumn_name_list:\n    column_name [, column_name ...]\n\nuser_or_role:\n    user_name | role_name\nREVOKE [IF EXISTS] role_name [, role_name ...]\n    FROM user_or_role [, user_or_role ...]\n    [IGNORE UNKNOWN USER];\n\nuser_or_role:\n    user_name | role_name\n",
        "Description": [
            "该语句用于撤销之前分配给用户或角色的权限，或者撤销用户或角色中的角色。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\npriv_type\n指定撤销的权限类型。具体的权限类型及其说明请参见下方权限类型说明表。同时对某个用户撤销多个权限时，权限类型用 “,” 隔开。\n\n\ncolumn_name_list\n可选项，撤销表中的列级权限的列表。如果不指定，则撤销整个表或对象的权限。\n\n\ndatabase.table_name\n指定数据库中的表。用 “*” 代替 database 或 table_name，表示撤销全局权限，即撤销对数据库中所有表的操作权限。\n\n\nuser_name\n指定撤销权限的用户。同时撤销多个用户的授权时，用户名用 “,” 隔开。\n\n\nIF EXISTS | IGNORE UNKNOWN USER\n可选项，当指定的角色或被授权者不存在时，如果使用了 IF EXISTS 和 IGNORE UNKNOWN USER 选项，系统将发出警告而非错误消息。\n\n\nrole_name\n指定角色的名称。\n\n\n",
            "可以撤销的权限类型如下表所示。",
            "\n\n\n权限\n说明\n\n\n\n\nALL PRIVILEGES\n除 GRANT OPTION 以外所有权限。\n\n\nALTER\nALTER TABLE 的权限。\n\n\nCREATE\nCREATE TABLE 的权限。\n\n\nCREATE USER\nCREATE USER、DROPUSER、RENAME USER 和 REVOKE ALL PRIVILEGES 的权限。\n\n\nCREATE TABLEGROUP\n全局 CREATE TABLEGROUP 的权限。\n\n\nDELETE\nDELETE 的权限。\n\n\nDROP\nDROP 的权限。\n\n\nGRANT OPTION\nGRANT OPTION 的权限。\n\n\nINSERT\nINSERT 的权限。\n\n\nSELECT\nSELECT 的权限。\n\n\nUPDATE\nUPDATE 的权限。\n\n\nSUPER\nSET GLOBAL 修改全局系统参数的权限。\n\n\nSHOW DATABASES\n全局 SHOW DATABASES 的权限。\n\n\nINDEX\nCREATE INDEX 与 DROP INDEX 的权限。\n\n\nCREATE VIEW\nCREATE VIEW 与 DROP VIEW 的权限。\n\n\nSHOW VIEW\nSHOW CREATE VIEW 权限。\n\n\n",
            "\n说明\n目前没有 Change Effective Tenant 的权限控制，因此 sys 租户下的用户都可以撤销权限。\n"
        ],
        "Examples": [
            "obclient> GRANT ALL PRIVILEGES ON *.* TO u1;\nQuery OK, 0 rows affected\n\nobclient> SHOW GRANTS FOR u1;\n+-------------------------------------+\n| Grants for u1@%                     |\n+-------------------------------------+\n| GRANT ALL PRIVILEGES ON *.* TO 'u1' |\n+-------------------------------------+\n1 row in set\n\nobclient> REVOKE SELECT ON *.* FROM u1;\nQuery OK, 0 rows affected\n\nobclient> SHOW GRANTS FOR u1;\n+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Grants for u1@%\n                        |\n+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| GRANT ALTER, CREATE, CREATE USER, DELETE, DROP, INSERT, UPDATE, INDEX, CREATE VIEW, SHOW VIEW, SHOW DB, SUPER, PROCESS, FILE, ALTER TENANT, ALTER SYSTEM, CREATE RESOURCE POOL, CREATE RESOURCE UNIT ON *.* TO 'u1' |\n+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n1 row in set\n",
            "obclient [test]> REVOKE role001 FROM role002;\n",
            "obclient [test]> REVOKE role001 FROM user001;\n"
        ],
        "Detailed Examples": [
            "示例一：撤销对象权限",
            "通过撤销 u1 用户的 SELECT 权限，查看 ALL PRIVILEGES 授予了哪些权限。",
            "obclient> GRANT ALL PRIVILEGES ON *.* TO u1;\nQuery OK, 0 rows affected\n\nobclient> SHOW GRANTS FOR u1;\n+-------------------------------------+\n| Grants for u1@%                     |\n+-------------------------------------+\n| GRANT ALL PRIVILEGES ON *.* TO 'u1' |\n+-------------------------------------+\n1 row in set\n\nobclient> REVOKE SELECT ON *.* FROM u1;\nQuery OK, 0 rows affected\n\nobclient> SHOW GRANTS FOR u1;\n+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Grants for u1@%\n                        |\n+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| GRANT ALTER, CREATE, CREATE USER, DELETE, DROP, INSERT, UPDATE, INDEX, CREATE VIEW, SHOW VIEW, SHOW DB, SUPER, PROCESS, FILE, ALTER TENANT, ALTER SYSTEM, CREATE RESOURCE POOL, CREATE RESOURCE UNIT ON *.* TO 'u1' |\n+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n1 row in set\n",
            "示例二：撤销用户或角色中的角色",
            "撤销角色 role002 中的角色 role001。",
            "obclient [test]> REVOKE role001 FROM role002;\n",
            "撤销用户 user001 中的角色 role001。",
            "obclient [test]> REVOKE role001 FROM user001;\n"
        ]
    },
    "SAVEPOINT": {
        "Title": [
            "SAVEPOINT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053487"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "SAVEPOINT savepoint_name;\nROLLBACK [WORK] TO [SAVEPOINT] savepoint_name;\nRELEASE SAVEPOINT savepoint_name;\n",
        "Description": [
            "该语句用来创建事务中的保存点，实现事务的部分回滚。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\n[WORK]\n可选关键字，不影响语义。\n\n\nsavepoint_name\n指定保存点的名称。指定的保存点在事务范围内唯一，同名的保存点会覆盖前一个保存点。 创建保存点后，可以将事务回滚到指定保存点，也可以使用 ROLLBACK 语句回滚整个事务。\n\n\n"
        ],
        "Examples": [],
        "Detailed Examples": [
            "假设一个事务执行了如下语句：",
            "\n\n\nsql_no\n语句\n分区\n\n\n\n\n1\nUPDATE …;\np1, p4\n\n\n\nSAVEPOINT sp1;\n\n\n\n2\nUPDATE …;\np2, p4\n\n\n3\nUPDATE …;\np3, p5\n\n\n\nSAVEPOINT sp2;\n\n\n\n4\nUPDATE …;\np1, p3, p6\n\n\n5\nUPDATE …;\np1, p5\n\n\n\nSAVEPOINT sp3;\n\n\n\n6\nSELECT …;\n\n\n\n7\nUPDATE …;\np5, p6\n\n\n\nSAVEPOINT sp4;\n\n\n\n",
            "记录 Savepoint",
            "用户在提交事务之前可以创建保存点，需要根据保存点创建的顺序，将事务的保存点串成链表。以上事务包含了 7 条 SQL 和 4 个保存点，记录保存点的链表如下图所示，其中每个节点记录了 <savepoint_name, sql_no> 的映射关系：",
            "事务参与者列表",
            "事务为了支持回滚某条 SQL 之后的所有修改，需要将每条语句涉及的参与者以及对应的 sql_no 记录下来，以上事务执行了 7 条 SQL，涉及 p1~p6 共 6 个 Partition：",
            "Savepoint 回滚过程",
            "根据保存点链表查询 savepoint_name 对应的 sql_no。",
            "假设用户执行 ROLLBACK to SAVEPOINT sp2，根据保存点链表查询到 sp2 对应的 sql_no 为 3。",
            "根据事务参与者列表查询 sql_no 对应的 Partition。",
            "根据事务参与者列表查询到 sql_no 大于 3 的语句操作的分区涉及 p1、p3、p5、p6。",
            "回滚分区数据根据 步骤 2 查询到的分区，调度程序向这些分区发起回滚请求，回滚当前事务在这些分区上 sp2 之后的所有修改。",
            "其中 p1、p3、p5 上关于本事务的部分修改被回滚掉，p6 上关于本事务的所有修改都被回滚掉。",
            "更新事务参与者列表信息。",
            "修改事务参与者列表，将 sql_no 大于 3 的操作信息从事务参与者列表中删除，由于 p6 上的所有修改都被回滚掉，因此 p6 可以从参与者列表中删除。",
            "删除无效的保存点。",
            "用户执行 ROLLBACK to SAVEPOINT sp2 成功后，系统会删除 sp3 和 sp4 的保存点，不允许再回滚到sp3 和 sp4。"
        ]
    },
    "SELECT INTO": {
        "Title": [
            "SELECT INTO"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053458"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "select_stmt INTO \n    {OUTFILE 'file_name' [ {CHARSET | CHARACTER SET} charset_name] [field_opt] [line_opt] [file_opt]\n    | DUMPFILE 'file_name'\n    | into_var_list}\n;\n\nfield_opt:\n    {COLUMNS | FIELDS} field_term_list\n\nfield_term_list:\n  field_term [, field_term ...]\n\nfield_term:\n    {[OPTIONALLY] ENCLOSED | TERMINATED | ESCAPED} BY string\n\nline_opt:\n    LINES line_term_list\n\nline_term_list:\n    line_term [, line_term ...]\n\nline_term:\n    {STARTING | TERMINATED} BY string\n\nfile_opt:\n    file_option [, file_option ...]\n\nfile_option:\n    SINGLE [=] {TRUE | FALSE}\n    | MAX_FILE_SIZE [=] {int | string}\n",
        "Description": [
            "该语句用于将查询结果存储在变量或文件中。其中：",
            "SELECT ... INTO OUTFILE 用于将结果集存储在外部文件，并可以指定输出格式。",
            "\n说明\nSELECT ... INTO OUTFILE 输出数据时支持使用 \\N 代表 NULL。\n",
            "SELECT ... INTO DUMPFILE 用于向外部文件写入不带格式的单行。",
            "SELECT ... INTO var_list 用于将结果集存储到变量。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nselect_stmt\n指定要执行的查询语句。select_stmt 必须返回一个结果集，查询语句的具体结构和选项信息，参见 SELECT 语句。 \n      \n说明\nINTO 子句内容的位置也可以在查询语句的 FROM 之前。例如，SELECT * INTO OUTFILE ‘/home/admin/test_data/test_tbl1.csv’ FROM test_tbl1 WHERE id > 5;。\n\n\n\nfile_name\n用于指定导出文件的路径和文件名。file_name 有以下格式： \n      \n将导出文件保存在 OBServer 节点：/$PATH/$FILENAME。\n将导出文件保存在 OSS 上：oss://$PATH/$FILENAME/?host=$HOST&access_id=$ACCESS_ID&access_key=$ACCESSKEY。\n 参数解释如下： \n      \n$PATH：指定要保存导出文件的路径。 \n        \n导出到 OBServer 节点中就是指定导出文件在 OBServer 节点的路径。\n导出到 OSS 上就是指定存储桶中的文件路径。\n\n$FILENAME：指定要导出文件的名称。当 SINGLE = FALSE 时表示导出文件的前缀，不指定时会生成默认的前缀 data，系统自动生成后缀。\n$HOST：指定 OSS 服务的主机名或 CDN 加速的域名，即要访问的 OSS 服务的地址。\n$ACCESS_ID：指定访问 OSS 服务所需的 Access Key ID，用于身份验证。\n$ACCESSKEY：指定了访问 OSS 服务所需的 Access Key Secret，用于身份验证。\n\n\n说明\n由于阿里云 OSS 有文件大小的限制，对于超过 5 GB 的文件，导出到 OSS 时会被拆分成多个文件，每个文件小于 5 GB。\n\n\n\nCHARSET | CHARACTER SET charset_name\n可选项，指定导出到外部文件的字符集。charset_name 表示字符集的名称。\n\n\nfield_opt\n可选项，导出字段格式选项。指定输出文件中各个字段的格式，通过 FIELDS 或 COLUMNS 子句来指定。详细介绍可参见下文 field_term。\n\n\nline_opt\n可选项，导出数据行的开始和结束符选项。指定输出文件中每一行的开始和结束字符，通过 LINES 子句设置。详细介绍可参见下文 line_term。\n\n\nfile_opt\n可选项，控制是否导出到多个文件和导出到多文件时单个文件的大小。详细介绍可参见下文 file_option。\n\n\n",
            "field_term",
            "[OPTIONALLY] ENCLOSED BY string",
            "：用来指定包裹字段值的符号，默认没有引用符号。例如，",
            "ENCLOSED BY '\"'",
            " 表示字符值放在双引号之间。如果使用了 ",
            "OPTIONALLY",
            " 关键字，则仅对字符串类型的值使用指定字符包裹。",
            "TERMINATED BY string",
            "：用来指定字段值之间的符号。例如，",
            "TERMINATED BY ','",
            " 指定了逗号作为两个字段值之间的标志。",
            "ESCAPED BY string",
            "：用来指定转义字符，以便处理特殊字符或解析特殊格式的数据。默认的转义字符是反斜杠（",
            "\\",
            "）。",
            "line_term",
            "STARTING BY string",
            "：指定每一行开始的字符，默认没有起始符号。",
            "TERMINATED BY string",
            "：指定每一行的结束字符，默认使用换行符。例如，",
            "... LINES TERMINATED BY '\\n' ...",
            " 表示一行将以换行符作为结束标志。",
            "file_option",
            "SINGLE [=] {TRUE | FALSE}：用于控制将数据导出到单个文件或多个文件。",
            "\nSINGLE [=] TRUE：默认值，表示只能导出到单个文件。\nSINGLE [=] FALSE：表示可以导出到多个文件。\n\n注意\n当并行度大于 1 且 SINGLE = FALSE 时，可以导出到多个文件，达到并行读并行写和提高导出速度的效果。\n\n",
            "SINGLE [=] TRUE：默认值，表示只能导出到单个文件。",
            "SINGLE [=] FALSE：表示可以导出到多个文件。",
            "\n注意\n当并行度大于 1 且 SINGLE = FALSE 时，可以导出到多个文件，达到并行读并行写和提高导出速度的效果。\n",
            "MAX_FILE_SIZE [=] {int | string}：用于控制导出时单个文件的大小，仅在 SINGLE = FALSE 时生效。"
        ],
        "Examples": [
            "ssh admin@xxx.xxx.xxx.xxx\n",
            "obclient -S /home/admin/oceanbase/run/sql.sock -uroot@mysql001 -p******\n",
            "SET GLOBAL secure_file_priv = \"/home/admin/test_data\";\n",
            "SELECT /*+parallel(2)*/ * FROM test_tbl1\nINTO OUTFILE '/home/admin/test_data/test_tbl1.csv'\n  FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"'\n  LINES TERMINATED BY '\\n';\n",
            "Query OK, 9 rows affected\n",
            "SELECT /*+parallel(2)*/ * FROM test_tbl1\n  INTO OUTFILE '/home/admin/test_data/'\n  FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"'\n  LINES TERMINATED BY '\\n'\n  SINGLE = FALSE MAX_FILE_SIZE = '4MB';\n",
            "Query OK, 9 rows affected\n",
            "SELECT /*+parallel(2)*/ * FROM test_tbl1\n  INTO OUTFILE '/home/admin/test_data/dd2024'\n  FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"'\n  LINES TERMINATED BY '\\n'\n  SINGLE = FALSE MAX_FILE_SIZE = '4MB';\n",
            "Query OK, 9 rows affected\n",
            "[xxx@xxx /home/admin/test_data]# ls\n",
            "data_0_0_0  data_0_1_0  dd2024_0_0_0  dd2024_0_1_0  test_tbl1.csv\n"
        ],
        "Detailed Examples": [
            "设置导出的文件路径。",
            "要导出文件，需要先设置系统变量 secure_file_priv，配置导出文件可以访问的路径。",
            "\n注意\n由于安全原因，设置系统变量 secure_file_priv 时，只能通过本地 Socket 连接数据库执行修改该全局变量的 SQL 语句。更多信息，请参见 secure_file_priv。\n",
            "\n登录到要连接 OceanBase 数据库的 OBServer 节点。 ssh admin@xxx.xxx.xxx.xxx\n\n执行以下命令，通过本地 Unix Socket 连接方式连接租户 mysql001。 obclient -S /home/admin/oceanbase/run/sql.sock -uroot@mysql001 -p******\n\n设置导出路径为 /home/admin/test_data。 SET GLOBAL secure_file_priv = \"/home/admin/test_data\";\n\n退出登录。\n",
            "登录到要连接 OceanBase 数据库的 OBServer 节点。",
            "ssh admin@xxx.xxx.xxx.xxx\n",
            "执行以下命令，通过本地 Unix Socket 连接方式连接租户 mysql001。",
            "obclient -S /home/admin/oceanbase/run/sql.sock -uroot@mysql001 -p******\n",
            "设置导出路径为 /home/admin/test_data。",
            "SET GLOBAL secure_file_priv = \"/home/admin/test_data\";\n",
            "退出登录。",
            "重新连接数据库后，使用 SELECT INTO OUTFILE 语句导出数据。指定逗号作为两个字段值之间的标志；对字符串类型的值使用 \" 字符包裹；使用换行符作为结束标志。",
            "\n串行写单个文件，指定文件名为 test_tbl1.csv。 SELECT /*+parallel(2)*/ * FROM test_tbl1\nINTO OUTFILE '/home/admin/test_data/test_tbl1.csv'\n  FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"'\n  LINES TERMINATED BY '\\n';\n 返回结果如下： Query OK, 9 rows affected\n\n并行写多个文件，不指定文件名（即文件名使用默认前缀 data），并且每个文件的大小不超过 4MB。 SELECT /*+parallel(2)*/ * FROM test_tbl1\n  INTO OUTFILE '/home/admin/test_data/'\n  FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"'\n  LINES TERMINATED BY '\\n'\n  SINGLE = FALSE MAX_FILE_SIZE = '4MB';\n 返回结果如下： Query OK, 9 rows affected\n\n并行写多个文件，指定文件名的前缀为 dd2024，并且每个文件的大小不超过 4MB。 SELECT /*+parallel(2)*/ * FROM test_tbl1\n  INTO OUTFILE '/home/admin/test_data/dd2024'\n  FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"'\n  LINES TERMINATED BY '\\n'\n  SINGLE = FALSE MAX_FILE_SIZE = '4MB';\n 返回结果如下： Query OK, 9 rows affected\n\n",
            "\n说明\n\n\n当多个导出任务同时导出到相同路径时，可能出现报错、只导出一部分数据等问题。可以通过合理设置导出路径规避。例如：SELECT /*+parallel(2)*/ * FROM t1 INTO OUTFILE 'test/data' SINGLE = FALSE; 和 SELECT /*+parallel(2)*/ * FROM t2 INTO OUTFILE 'test/data' SINGLE = FALSE; 同时执行时可能由于导出文件名相同而报错，建议将导出路径设置为 test/data1 和 test/data2。\n当 SINGLE = FALSE，且导出因为 file already exist 等原因失败后，可以清除导出目录下所有与导出目标具有相同前缀的文件，或者删除导出目录再重建，然后再次执行导出操作。例如：SELECT /*+parallel(2)*/ * FROM t1 INTO OUTFILE 'test/data' SINGLE = FALSE; 失败后，可以删除 test 目录下所有 data 前缀的文件，或者直接删除 test 目录再重建，然后再次尝试执行导出操作。\n\n\n",
            "串行写单个文件，指定文件名为 test_tbl1.csv。",
            "SELECT /*+parallel(2)*/ * FROM test_tbl1\nINTO OUTFILE '/home/admin/test_data/test_tbl1.csv'\n  FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"'\n  LINES TERMINATED BY '\\n';\n",
            "返回结果如下：",
            "Query OK, 9 rows affected\n",
            "并行写多个文件，不指定文件名（即文件名使用默认前缀 data），并且每个文件的大小不超过 4MB。",
            "SELECT /*+parallel(2)*/ * FROM test_tbl1\n  INTO OUTFILE '/home/admin/test_data/'\n  FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"'\n  LINES TERMINATED BY '\\n'\n  SINGLE = FALSE MAX_FILE_SIZE = '4MB';\n",
            "返回结果如下：",
            "Query OK, 9 rows affected\n",
            "并行写多个文件，指定文件名的前缀为 dd2024，并且每个文件的大小不超过 4MB。",
            "SELECT /*+parallel(2)*/ * FROM test_tbl1\n  INTO OUTFILE '/home/admin/test_data/dd2024'\n  FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"'\n  LINES TERMINATED BY '\\n'\n  SINGLE = FALSE MAX_FILE_SIZE = '4MB';\n",
            "返回结果如下：",
            "Query OK, 9 rows affected\n",
            "当多个导出任务同时导出到相同路径时，可能出现报错、只导出一部分数据等问题。可以通过合理设置导出路径规避。",
            "例如：",
            "SELECT /*+parallel(2)*/ * FROM t1 INTO OUTFILE 'test/data' SINGLE = FALSE;",
            " 和 ",
            "SELECT /*+parallel(2)*/ * FROM t2 INTO OUTFILE 'test/data' SINGLE = FALSE;",
            " 同时执行时可能由于导出文件名相同而报错，建议将导出路径设置为 ",
            "test/data1",
            " 和 ",
            "test/data2",
            "。",
            "当 ",
            "SINGLE = FALSE",
            "，且导出因为 file already exist 等原因失败后，可以清除导出目录下所有与导出目标具有相同前缀的文件，或者删除导出目录再重建，然后再次执行导出操作。",
            "例如：",
            "SELECT /*+parallel(2)*/ * FROM t1 INTO OUTFILE 'test/data' SINGLE = FALSE;",
            " 失败后，可以删除 ",
            "test",
            " 目录下所有 ",
            "data",
            " 前缀的文件，或者直接删除 ",
            "test",
            " 目录再重建，然后再次尝试执行导出操作。",
            "登录机器，在 OBServer 节点的 /home/admin/test_data 目录下查看导出的文件信息。",
            "[xxx@xxx /home/admin/test_data]# ls\n",
            "返回结果如下：",
            "data_0_0_0  data_0_1_0  dd2024_0_0_0  dd2024_0_1_0  test_tbl1.csv\n",
            "其中，test_tbl1.csv 是串行写单个文件示例导出的文件名；data_0_0_0 和 data_0_1_0 是并行写多个文件，不指定文件名示例导出的文件名；dd2024_0_0_0 和 dd2024_0_1_0 是并行写多个文件，指定文件名的前缀为 dd2024 示例导出的文件名。"
        ]
    },
    "SELECT 语句": {
        "Title": [
            "SELECT 语句"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054473"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "SELECT\n        [/*+ hint statement */]\n        [ALL | DISTINCT | UNIQUE | SQL_CALC_FOUND_ROWS]\n        [STRAIGHT_JOIN]\n        select_expr_list\n        [FROM from_list [WHERE condition]]\n        [GROUP BY group_expression_list [WITH ROLLUP] [HAVING condition]]\n        [ORDER BY order_expression_list]\n        [limit_clause]\n        [FOR UPDATE [opt_for_update_wait]]\n        [LOCK IN SHARE MODE];\nselect_expr:\n table_name.*\n  | table_alias_name.*\n  | expr [[AS] column_alias_name]\n\nfrom_list:\n      DUAL\n    | table_reference [, table_reference ...]\n\ntable_reference:\n      simple_table\n    | joined_table\n    | table_name@dblink_name\n\nsimple_table:\n    table_factor [partition_option]\n        [sample_clause [opt_seed]]\n        [[AS] table_alias_name][index_hint]\n    | (select_stmt [sample_clause [opt_seed])\n        [AS] table_alias_name [index_hint]\n    | (table_reference_list) [index_hint]\n\njoined_table:\n      table_reference [NATURAL][INNER] JOIN simple_table [join_condition]\n    | table_reference outer_join_type JOIN simple_table join_condition\n\npartition_option:\n    PARTITION (partition_name_list)\n\nsample_clause:\n    SAMPLE [BLOCK] [ ALL | BASE | INCR] (sample_percent)\n\nopt_seed:\n    SEED(integer)\n\nindex_hint:\n    {USE | FORCE | IGNORE} {KEY | INDEX}\n       [FOR {JOIN | ORDER BY | GROUP BY}] (index_list)\n\nindex_list:\n    index_name [, index_name ...]\n\npartition_name_list:\n    partition_name [, partition_name ...]\n\nouter_join_type:\n    [NATURAL]{LEFT | RIGHT | FULL} [OUTER]\n\njoin_condition:\n    ON expression\n\ncondition:\n    expression\n\ngroup_expression_list:\n    group_expression [, group_expression ...]\n\ngroup_expression:\n    expression [ASC | DESC]\n\norder_expression_list:\n    order_expression [, order_expression ...]\n\norder_expression:\n    expression [ASC | DESC]\n\nlimit_clause:\n  LIMIT {[offset,] row_count |row_count OFFSET offset}\n\nopt_for_update_wait:\n    WAIT { DECIMAL | INTNUM }\n  | NOWAIT | NO_WAIT\n",
        "Description": [
            "该语句用于查询表中的内容。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nALL | DISTINCT | UNIQUE | SQL_CALC_FOUND_ROWS\n在数据库表中，可能会包含重复值。 \n      \nDISTINCT | UNIQUE：在查询结果中相同的行只显示一行。\nALL：则列出所有的行，缺省为 ALL。\nSQL_CALC_FOUND_ROWS：在带有 LIMIT 子句的查询中，记录全部返回的行数，并可以在接下来执行的 FOUND_ROWS() 函数获取全部行数。\n\n\n\nSTRAIGHT_JOIN\n可选项，强制优化器按照 FROM 子句中所列出的顺序连接表。调优命令，不影响执行结果。 \n      \n注意\nOceanBase 数据库并不完全兼容 MySQL 中的 STRAIGHT_JOIN 语法。当 STRAIGHT_JOIN 能够明确指定表连接的顺序时，OceanBase 数据库会按照这个命令执行。如果 STRAIGHT_JOIN 无法确定唯一的连接顺序，OceanBase 数据库将会忽略这个命令。\n\n\n\nselect_expr\n列出要查询的表达式或列名，以逗号（,）分隔。也可以用星号（*）表示所有列。\n\n\nAS othername\n为输出字段重新命名。\n\n\nFROM table_references\n指明了从哪个表或哪些表中读取数据（支持多表查询）。\n\n\nWHERE where_conditions\n可选项，WHERE 字句用来设置一个筛选条件，查询结果中仅包含满足条件的数据。where_conditions 为表达式。\n\n\nGROUP BY group_by_list\n用于进行分类汇总。\n\n\nWITH ROLLUP\n将各分组进行汇总以表示更高级的聚合（也称为超聚合），并产生额外的行。\n\n\nHAVING search_confitions\nHAVING 字句与 WHERE 字句类似，但是 HAVING 字句可以使用聚合函数（如 SUM，AVG 等）。\n\n\nSAMPLE [BLOCK] [ ALL | BASE | INCR] (sample_percent)\n只扫描一部分记录。 \n      \nBLOCK 表示扫描随机数据块进行，默认为扫描随机行。\nALL 表示扫描所有数据，缺省为 ALL。\nBASE 表示扫描基线数据。\nINCR 表示扫描增量数据。\nsample_percent 表示采样比例，单位为 %，可以使用 INTEGER 或 DECIMAL 类型。\n\n\n\nSEED integer\n采样的种子值，取值范围为 [0,4294967295]，相同的采样种子值总会返回相同的结果。\n\n\n{USE | FORCE | IGNORE} {KEY | INDEX} [FOR {JOIN | ORDER BY | GROUP BY}] (index_list)\n进行查询是否使用指定的索引。 \n      \nUSE：指示某项操作使用索引。\nFORCE：指示某些操作强制使用索引。\nIGNORE：是指某项操作不使用索引。\nFOR JOIN：指定索引进行连接。\nFOR ORDER BY：指定索引进行排序。\nFOR GROUP BY：指定索引进行分组。\n\n\n\nSQL_CALC_FOUND_ROWS\n用来按升序（ASC）或者降序（DESC）显示查询结果。缺省为 ASC。\n\n\n[LIMIT {[offset,] row_count |row_count OFFSET offset}]\n强制 SELECT 语句返回指定的记录数。 LIMIT 接受一个或两个数字参数。参数必须是一个整数常量。 \n      \n如果给定两个参数，第一个参数指定第一个返回记录行的偏移量，第二个参数指定返回记录行的最大数目。 初始记录行的偏移量是 0。\n如果只给定一个参数，它表示返回记录行的最大数目，偏移量为 0。\n\n\n\nFOR UPDATE\n对查询结果所有行上排他锁，以阻止其他事务的并发修改，或阻止在某些事务隔离级别时的并发读取。 \n      \nWAIT：表示等待其他事务释放资源的时间，如果超过该时间，则返回无法获得资源，单位为秒。\nNOWAIT | NO_WAIT：表示不等待其他事务释放资源，直接返回无法获得资源。\n\n\n\nPARTITION(partition_list)\n指定查询表的分区信息。例如 partition(p0,p1...)。\n\n\ndblink_name\n使用 dblink 查询远端数据库表的数据。 \n      \n说明\n该内容仅适用于 OceanBase 数据库企业版。OceanBase 数据库社区版暂不支持 dblink 功能。\n\n\n\nLOCK IN SHARE MODE\n锁定查询结果。\n\n\n"
        ],
        "Examples": [
            "obclient> SELECT name FROM a;\n+------+\n| name |\n+------+\n| a    |\n| b    |\n| a    |\n+------+\n",
            "obclient> SELECT DISTINCT name FROM a;\n+------+\n| name |\n+------+\n| a    |\n| b    |\n+------+\n",
            "obclient> SELECT id, name, num/2 AS avg FROM a;\n+------+------+----------+\n| id   | name | avg      |\n+------+------+----------+\n|    1 | a    |  50.0000 |\n|    2 | b    | 100.0000 |\n|    3 | a    |  25.0000 |\n+------+------+----------+\n",
            "obclient> SELECT id, name, num FROM a WHERE name = 'a';\n+------+------+------+\n| id   | name | num  |\n+------+------+------+\n|    1 | a    |  100 |\n|    3 | a    |   50 |\n+------+------+------+\n",
            "obclient> SELECT id, name, SUM(num) FROM a GROUP BY name;\n+------+------+----------+\n| id   | name | SUM(num) |\n+------+------+----------+\n|    1 | a    |      150 |\n|    2 | b    |      200 |\n+------+------+----------+\n",
            "obclient> SELECT id, name, SUM(num) as sum FROM a GROUP BY name HAVING SUM(num) < 160;\n+------+------+------+\n| id   | name | sum  |\n+------+------+------+\n|    1 | a    |  150 |\n+------+------+------+\n",
            "obclient> SELECT * FROM a ORDER BY num ASC;\n+------+------+------+\n| id   | name | num  |\n+------+------+------+\n|    3 | a    |   50 |\n|    1 | a    |  100 |\n|    2 | b    |  200 |\n+------+------+------+\n",
            "obclient> SELECT * FROM a ORDER BY num DESC;\n+------+------+------+\n| id   | name | num  |\n+------+------+------+\n|    2 | b    |  200 |\n|    1 | a    |  100 |\n|    3 | a    |   50 |\n+------+------+------+\n",
            "obclient> SELECT * FROM a LIMIT 1,2;\n+------+------+------+\n| id   | name | num  |\n+------+------+------+\n|    2 | b    |  200 |\n|    3 | a    |   50 |\n+------+------+------+\n",
            "obclient> SELECT * FROM a LIMIT 1 FOR UPDATE;\n",
            "obclient> SELECT * FROM a ORDER BY id LIMIT 1 FOR UPDATE;\n",
            "obclient> SELECT * FROM a LOCK IN SHARE MODE;\n+------+------+------+\n| id   | name | num  |\n+------+------+------+\n|    1 | a    |  100 |\n|    2 | b    |  200 |\n|    3 | a    |  50 |\n+------+------+------+\n3 row in set\n",
            "obclient> SELECT * FROM number_t@ob_dblink;\n+--------+-------------+---------+---------------------+--------------------------------+\n| c_int  | c_bigint    | c_float |    c_double         |   c_decimal                    |\n+--------+-------------+---------+---------------------+--------------------------------+\n| 214748 | 92233720368 | 3.40282 | 1.7976931348623157  | 123456789123456789.1234567890  |\n+--------+-------------+---------+---------------------+--------------------------------+\n1 row in set\n",
            "obclient> SELECT a.c_decimal, b.c_double FROM number_t a, number_t@ob_dblink b where a.c_int = b.c_int;\n+--------------------------------+---------------------+\n|   c_decimal                    |    c_double         |\n+---------------------+--------------------------------+\n| 123456789123456789.1234567890  |  1.7976931348623157 |\n+---------------------+--------------------------------+\n1 row in set\n",
            "obclient> SELECT * FROM mysql.datetime_t@ob_dblink;\n+-------------+------------+---------+----------------------+----------------------+\n| c_date      | c_time     | c_year  | c_datetime           |  c_timestamp         |\n+-------------+------------+---------+-----------------------+---------------------+\n|  2023-04-13 | 12:12:12   |  2078   | 2100-11-01 12:12:13  | 2100-12-01 21:14:15  |\n+-------------+------------+---------+----------------------+----------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "简单的表查询示例",
            "以如下表 a 为例。",
            "从表 a 中读取 name 数据。",
            "obclient> SELECT name FROM a;\n+------+\n| name |\n+------+\n| a    |\n| b    |\n| a    |\n+------+\n",
            "在查询结果中对 name 进行去重处理。",
            "obclient> SELECT DISTINCT name FROM a;\n+------+\n| name |\n+------+\n| a    |\n| b    |\n+------+\n",
            "从表 a 中查询 id、name、num，然后把 num 列除以 2 输出，输出的列名为 avg。",
            "obclient> SELECT id, name, num/2 AS avg FROM a;\n+------+------+----------+\n| id   | name | avg      |\n+------+------+----------+\n|    1 | a    |  50.0000 |\n|    2 | b    | 100.0000 |\n|    3 | a    |  25.0000 |\n+------+------+----------+\n",
            "从表 a 中根据筛选条件 name = 'a'，输出对应的 id 、name 和 num。",
            "obclient> SELECT id, name, num FROM a WHERE name = 'a';\n+------+------+------+\n| id   | name | num  |\n+------+------+------+\n|    1 | a    |  100 |\n|    3 | a    |   50 |\n+------+------+------+\n",
            "从表 a 中查询 id、name，按照 name 分组对 num 求和，并输出。",
            "obclient> SELECT id, name, SUM(num) FROM a GROUP BY name;\n+------+------+----------+\n| id   | name | SUM(num) |\n+------+------+----------+\n|    1 | a    |      150 |\n|    2 | b    |      200 |\n+------+------+----------+\n",
            "从表 a 中查询 id、name，按照 name 分组对 num 求和，查询 num 总和小于 160 的行，并输出。",
            "obclient> SELECT id, name, SUM(num) as sum FROM a GROUP BY name HAVING SUM(num) < 160;\n+------+------+------+\n| id   | name | sum  |\n+------+------+------+\n|    1 | a    |  150 |\n+------+------+------+\n",
            "从表 a 中查询 id、name、num，根据 num 按升序（ASC）输出查询结果。",
            "obclient> SELECT * FROM a ORDER BY num ASC;\n+------+------+------+\n| id   | name | num  |\n+------+------+------+\n|    3 | a    |   50 |\n|    1 | a    |  100 |\n|    2 | b    |  200 |\n+------+------+------+\n",
            "从表 a 中查询 id、name、num，根据 num 按降序（DESC）输出查询结果。",
            "obclient> SELECT * FROM a ORDER BY num DESC;\n+------+------+------+\n| id   | name | num  |\n+------+------+------+\n|    2 | b    |  200 |\n|    1 | a    |  100 |\n|    3 | a    |   50 |\n+------+------+------+\n",
            "从表 a 中查询 id、name、num，使用 LIMIT 强制从第 2 行开始，返回表 a 的两行结果。",
            "obclient> SELECT * FROM a LIMIT 1,2;\n+------+------+------+\n| id   | name | num  |\n+------+------+------+\n|    2 | b    |  200 |\n|    3 | a    |   50 |\n+------+------+------+\n",
            "可以通过 SELECT ... FOR UPDATE 为表加行级锁。如果使用了 LIMIT 1 子句，则会在查询优化中将算子下压到表扫描的步骤中，只为 LIMIT 返回的行加锁。",
            "obclient> SELECT * FROM a LIMIT 1 FOR UPDATE;\n",
            "如果您使用了 ORDER BY 子句对查询结果进行排序，则会先对结果进行排序，然后再执行 LIMIT 1，因此这种情况下，会为选择的所有行加锁。",
            "obclient> SELECT * FROM a ORDER BY id LIMIT 1 FOR UPDATE;\n",
            "使用 LOCK IN SHARE MODE 锁定对表 a 的查询结果。",
            "obclient> SELECT * FROM a LOCK IN SHARE MODE;\n+------+------+------+\n| id   | name | num  |\n+------+------+------+\n|    1 | a    |  100 |\n|    2 | b    |  200 |\n|    3 | a    |  50 |\n+------+------+------+\n3 row in set\n",
            "使用 dblink 查询数据的示例",
            "读取远端 test 库中的 number_t 表",
            "obclient> SELECT * FROM number_t@ob_dblink;\n+--------+-------------+---------+---------------------+--------------------------------+\n| c_int  | c_bigint    | c_float |    c_double         |   c_decimal                    |\n+--------+-------------+---------+---------------------+--------------------------------+\n| 214748 | 92233720368 | 3.40282 | 1.7976931348623157  | 123456789123456789.1234567890  |\n+--------+-------------+---------+---------------------+--------------------------------+\n1 row in set\n",
            "读取远端 test 库中的 number_t 表，并和本地的 number_t 表做 JOIN 操作。",
            "obclient> SELECT a.c_decimal, b.c_double FROM number_t a, number_t@ob_dblink b where a.c_int = b.c_int;\n+--------------------------------+---------------------+\n|   c_decimal                    |    c_double         |\n+---------------------+--------------------------------+\n| 123456789123456789.1234567890  |  1.7976931348623157 |\n+---------------------+--------------------------------+\n1 row in set\n",
            "读取远端 mysql 库中的 datetime_t 表。",
            "obclient> SELECT * FROM mysql.datetime_t@ob_dblink;\n+-------------+------------+---------+----------------------+----------------------+\n| c_date      | c_time     | c_year  | c_datetime           |  c_timestamp         |\n+-------------+------------+---------+-----------------------+---------------------+\n|  2023-04-13 | 12:12:12   |  2078   | 2100-11-01 12:12:13  | 2100-12-01 21:14:15  |\n+-------------+------------+---------+----------------------+----------------------+\n1 row in set\n"
        ]
    },
    "SET CHARSET": {
        "Title": [
            "SET CHARSET"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053472"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "SET {CHARSET | CHARACTER SET} {DEFAULT | charset_name};\n",
        "Description": [
            "该语句用于设置客户端与结果字符集。"
        ],
        "Illustration": [
            "\n\n\n参数\n解释\n\n\n\n\ncharset_name\n指定客户端与结果字符集，可使用字符集如下： \n      \nutf8\nutf8mb4\ngbk\nutf16\ngb18030\n\n\n\nDEFAULT\n使用系统默认字符集。\n\n\n"
        ],
        "Examples": [
            "obclient> SET CHARSET 'gbk';\nQuery OK, 0 rows affected\n\nobclient> SHOW VARIABLES LIKE '%char%';\n+--------------------------------------+---------+\n| Variable_name                        | Value   |\n+--------------------------------------+---------+\n| character_set_client                 | gbk     |\n| character_set_connection             | utf8mb4 |\n| character_set_database               | utf8mb4 |\n| character_set_filesystem             | binary  |\n| character_set_results                | gbk     |\n| character_set_server                 | utf8mb4 |\n| character_set_system                 | utf8mb4 |\n| validate_password_special_char_count | 0       |\n+--------------------------------------+---------+\n8 rows in set\n"
        ],
        "Detailed Examples": [
            "设置客户端字符集为 gbk。",
            "obclient> SET CHARSET 'gbk';\nQuery OK, 0 rows affected\n\nobclient> SHOW VARIABLES LIKE '%char%';\n+--------------------------------------+---------+\n| Variable_name                        | Value   |\n+--------------------------------------+---------+\n| character_set_client                 | gbk     |\n| character_set_connection             | utf8mb4 |\n| character_set_database               | utf8mb4 |\n| character_set_filesystem             | binary  |\n| character_set_results                | gbk     |\n| character_set_server                 | utf8mb4 |\n| character_set_system                 | utf8mb4 |\n| validate_password_special_char_count | 0       |\n+--------------------------------------+---------+\n8 rows in set\n"
        ]
    },
    "SET DEFAULT ROLE": {
        "Title": [
            "SET DEFAULT ROLE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053488"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "SET DEFAULT ROLE\n    {NONE | ALL | role_name [, role_name ...]}\n    TO user_name [, user_name ...];\n",
        "Description": [
            "该语句用于设置用户登录时默认激活的角色。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nNONE\n指定停用用户被授予的所有角色。\n\n\nALL\n指定激活用户下所有的角色。\n\n\nrole_name\n指定角色的名称，激活多个角色时，角色名用英文逗号（,）隔开。\n\n\nuser_name\n指定用户名称，激活多个用户的角色时，用户名用英文逗号（,）隔开。\n\n\n"
        ],
        "Examples": [
            "obclient [test]> SET DEFAULT ROLE role001, role002 TO user001;\n"
        ],
        "Detailed Examples": [
            "指定用户 user001 在登录时，默认激活用户被授予的角色 role001 和 role002。",
            "obclient [test]> SET DEFAULT ROLE role001, role002 TO user001;\n"
        ]
    },
    "SET NAMES": {
        "Title": [
            "SET NAMES"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053456"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "SET NAMES charset_name [COLLATE collation_name]\n",
        "Description": [
            "设置客户端、连接与结果字符集与字符序。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\ncharset_name\n指定表中列的默认字符集，可使用字符集如下： \n      \nbinary\nutf8mb4\ngbk\nutf16\ngb18030\n\n\n\ncollation_name\n指定表中列的默认字符序，可使用字符序如下： \n      \nbinary\ngbk_bin\ngbk_chinese_ci\nutf8mb4_general_ci\nutf8mb4__general_cs\nutf8mb4_bin\nutf8mb4_unicode_ci\nutf16_general_ci\nutf16_bin\nutf16_unicode_ci\ngb18030_chinese_ci\ngb18030_bin\n\n\n\n"
        ],
        "Examples": [
            "obclient> SET NAMES gbk COLLATE gbk_bin;\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "指定客户端、连接与结果字符集为 gbk，字符序为 gbk_bin。",
            "obclient> SET NAMES gbk COLLATE gbk_bin;\nQuery OK, 0 rows affected\n"
        ]
    },
    "SET PASSWORD": {
        "Title": [
            "SET PASSWORD"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053500"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "SET PASSWORD [FOR user] = password_option;\n\npassword_option: {\nPASSWORD('authstring')\n|'hashstring'\n}\n",
        "Description": [
            "该语句用于修改 OceanBase 数据库当前登录用户或其他用户的密码。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nFOR user\n如果没有 FOR user 子句，表示修改当前用户的密码。任何成功登录的用户都可以修改当前用户的密码。 如果有 FOR user 子句，表示修改指定用户的密码。必须拥有全局（MySQL 库）的 CREATE USER 权限，才可以修改指定用户的密码。\n\n\n"
        ],
        "Examples": [
            "obclient> SET PASSWORD = PASSWORD('**1***');\nQuery OK, 0 rows affected\n",
            "obclient> SET PASSWORD FOR sqluser01 = PASSWORD('**2***');\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "修改当前用户的密码。",
            "obclient> SET PASSWORD = PASSWORD('**1***');\nQuery OK, 0 rows affected\n",
            "修改 sqluser01 用户的密码。",
            "obclient> SET PASSWORD FOR sqluser01 = PASSWORD('**2***');\nQuery OK, 0 rows affected\n"
        ]
    },
    "SET ROLE": {
        "Title": [
            "SET ROLE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053512"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "SET ROLE {\n    DEFAULT\n    | NONE\n    | ALL\n    | ALL EXCEPT role_name [, role_name ...]\n    | role_name [, role_name ...]\n};\n",
        "Description": [
            "该语句用于激活当前登录用户在当前会话（Session）中已被授予的角色。",
            "\n说明\n通过 SET ROLE 语句激活的角色，仅影响当前 Session，不影响之后的 Session。\n"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nDEFAULT\n指定保持默认角色的设置。系统会根据变量 activate_all_roles_on_login 的值以及 SET DEFAULT ROLE 语句或 ALTER USER 语句设置的默认激活的角色来激活角色： \n      \n如果变量 activate_all_roles_on_login 的值为 on，则在会话中激活用户授予的所有角色。\n如果变量 activate_all_roles_on_login 的值为 off，则在会话中激活 SET DEFAULT ROLE 语句或 ALTER USER 语句指定的默认激活的角色。\n\n\n\nNONE\n指定停用用户被授予的所有角色。\n\n\nALL\n指定激活用户被授予的所有角色。\n\n\nALL EXCEPT\n指定不激活用户被授予的角色中的角色。\n\n\nrole_name\n指定角色的名称，激活多个角色时，角色名用英文逗号（,）隔开。\n\n\n"
        ],
        "Examples": [
            "obclient [(none)]> SET ROLE ALL EXCEPT role001;\n",
            "obclient [(none)]> SET ROLE role001, role002;\n"
        ],
        "Detailed Examples": [
            "指定在当前会话中，激活用户被授予的角色中除了角色 role001 以外的其他所有角色。",
            "obclient [(none)]> SET ROLE ALL EXCEPT role001;\n",
            "指定在当前会话中，激活用户的 role001 和 role002 角色。",
            "obclient [(none)]> SET ROLE role001, role002;\n"
        ]
    },
    "SET TRANSACTION": {
        "Title": [
            "SET TRANSACTION"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053506"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "SET [GLOBAL | SESSION | LOCAL] TRANSACTION trans_opt;\n\ntrans_opt:\n   transaction_access_mode\n | isolation_level\n | transaction_access_mode, isolation_level\n | isolation_level, transaction_access_mode\n\ntransaction_access_mode:\n    [READ ONLY | READ WRITE]\n\nisolation_level:\n    ISOLATION LEVEL {\n      READ UNCOMMITED\n    | READ COMMITED\n    | REPEATABLE READ\n    | SERIALIZABLE\n  }\n",
        "Description": [
            "设置事务隔离级别。",
            "OceanBase 数据库的 MySQL 模式支持读已提交、可重复读两种隔离级别。默认的隔离级别为读已提交。",
            "不能在事务执行过程中设置隔离级别，否则会报错。",
            "ERROR:ORA-01453: SET TRANSACTION must be first statement of transaction",
            "在开启可串行化隔离级别时需要确保全局时钟服务（Global Timestamp Service,GTS）是打开的。",
            "Session 需要维护 Session 级别的事务隔离级别，在开启事务时获取 Session 级别的事务隔离级别，该隔离级别可以被事务级别的隔离级别覆盖。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nGLOBAL | SESSION | LOCAL\n声明事务隔离级别的生效范围，默认为空。 \n      \nGLOBAL：适用于所有后续会话，当前会话不受影响。\nSESSION | LOCAL：适用于当前会话中执行的所有后续事务，不影响当前正在进行的事务，如果在事务之间执行，该语句将覆盖任何先前设置命名特征的下一个事务值的语句。\n无声明：适用于会话中执行的下一个单个事务，后续事务恢复使用命名特征的会话值。\n\n\n\nREAD ONLY | READ WRITE\n指定事务的读写模式。\n\n\nREAD UNCOMMITED\n指定事务隔离级别为读未提交。 说明 当前版本暂不支持将事务隔离级别设置为读未提交。\n\n\nREAD COMMITED\n指定事务隔离级别为读已提交。\n\n\nREPEATABLE READ\n指定事务隔离级别为可重复读。\n\n\nSERIALIZABLE\n指定事务隔离级别为可串行化。 说明 OceanBase 数据库不支持将 sys 租户的事务隔离级别设置为可串行化，这是由于不能在 sys 租户开启全局时间戳（GTS）。\n\n\n"
        ],
        "Examples": [
            "obclient> SET TRANSACTION ISOLATION LEVEL READ COMMITTED;\n",
            "obclient> SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;\n"
        ],
        "Detailed Examples": [
            "设置当前会话中下个事务的事务隔离级别为读已提交。",
            "obclient> SET TRANSACTION ISOLATION LEVEL READ COMMITTED;\n",
            "设置当前会话的事务隔离级别为可重复读。",
            "obclient> SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;\n"
        ]
    },
    "SET": {
        "Title": [
            "SET"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053497"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "SET [SESSION | GLOBAL] var_and_val_list;\n\nvar_and_val_list:\n  var_and_val [,var_and_val ...]\n\nvar_and_val:\n   var_value {TO | =} set_expr_or_default\n | var_value = (simple_select)\n",
        "Description": [
            "该语句用于设置变量。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nSESSION | GLOBAL\n设置会话或全局变量，默认为会话级变量。\n\n\nvar_value\n变量名。\n\n\n"
        ],
        "Examples": [
            "obclient> SET @a = 1;\n",
            "obclient> SET GLOBAL secure_file_priv = '';\n",
            "obclient> SET @proxy_route_policy = 'follower_first';\n",
            "obclient> CREATE TABLE tbl1(col INT);\nQuery OK, 0 rows affected\n\nobclient> INSERT into tbl1 VALUES('1'),('2'),('3'),('4'),('5');\nQuery OK, 5 rows affected\nRecords: 5  Duplicates: 0  Warnings: 0\n\nobclient> SET @var1=(SELECT COUNT(*) FROM tbl1);\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "设置用户变量 a。",
            "obclient> SET @a = 1;\n",
            "设置全局系统变量 secure_file_priv，该变量用于控制导入或导出到文件时可以访问的路径。",
            "obclient> SET GLOBAL secure_file_priv = '';\n",
            "设置用户变量 proxy_route_policy，该用户变量用于配置路由策略。",
            "obclient> SET @proxy_route_policy = 'follower_first';\n",
            "通过 SELECT 语句设置变量值。",
            "obclient> CREATE TABLE tbl1(col INT);\nQuery OK, 0 rows affected\n\nobclient> INSERT into tbl1 VALUES('1'),('2'),('3'),('4'),('5');\nQuery OK, 5 rows affected\nRecords: 5  Duplicates: 0  Warnings: 0\n\nobclient> SET @var1=(SELECT COUNT(*) FROM tbl1);\nQuery OK, 0 rows affected\n"
        ]
    },
    "SHOW": {
        "Title": [
            "SHOW"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053464"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "SHOW {\n    [EXTENDED] [FULL] TABLES [{FROM | IN} database_name] [like_or_where_clause]\n   | {DATABASES | SCHEMAS} [STATUS] [like_or_where_clause]\n   | [EXTENDED] [FULL] {COLUMNS | FIELDS} {FROM | IN} rel_name [{FROM | IN} database_name] [like_or_where_clause]\n   | TABLE STATUS [{FROM | IN} database_name] [like_or_where_clause]\n   | PROCEDURE STATUS [{FROM | IN} database_name] [like_or_where_clause]\n   | FUNCTION STATUS [{FROM | IN} database_name] [like_or_where_clause]\n   | {GLOBAL | SESSION | LOCAL} VARIABLES [like_or_where_clause]\n   | {CHARSET | CHARACTER SET} [like_or_where_clause]\n   | TRACE [FORMAT='JSON']\n   | COLLATION [like_or_where_clause]\n   | PARAMETERS [like_or_where_clause] tenant_name\n   | [EXTENDED] {INDEX | INDEXES | KEYS} {FROM | IN} table_name [{FROM | IN} database_name] WHERE opt_hint_value expr\n   | [FULL] PROCESSLIST\n   | TABLEGROUPS [like_or_where_clause]\n   | {GLOBAL | SESSION | LOCAL} STATUS [like_or_where_clause]\n   | TENANT [STATUS]\n   | CREATE TENANT tenant_name\n   | CREATE TABLEGROUP tablegroup_name\n   | CREATE {DATABASE | SCHEMA} [IF NOT EXISTS] database_name\n   | CREATE TABLE table_name\n   | CREATE VIEW view_name\n   | CREATE PROCEDURE proc_name\n   | CREATE FUNCTION func_name\n   | WARNINGS [LIMIT N | LIMIT N,M]\n   | ERRORS [LIMIT N | LIMIT N,M]\n   | COUNT(*) WARNINGS\n   | COUNT(*) ERRORS\n   | GRANTS opt_for_grant_user\n   | [STORAGE] ENGINES\n   | PRIVILEGES\n   | RECYCLEBIN\n   | SEQUENCE [like_or_where_clause]\n   | FUNCTION CODE func_name\n   | PROCEDURE CODE proc_name\n   | ENGIN engine_name {STATUS | MUTEX}\n   | OPEN TABLES [{FROM | IN} db_name] [LIKE 'pattern' | WHERE expr]\n};\n\nlike_or_where_clause:\n    LIKE like_str [ESCAPE] esc_str\n  | WHERE expr\n\nopt_for_grant_user:\n    FOR CURRENT USER\n  | FOR user_name\n",
        "Description": [
            "该语句用于展示数据库对象的信息。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\n[EXTENDED] [FULL] TABLES {FROM | IN} database_name\n展示 database_name 库中所有的表。 \n      \nEXTENDED 关键字用于隐藏的表。由于 OceanBase 数据库当前版本不会产生隐藏表，该参数无实际作用。\nFULL 关键字用于展示表类型。\n\n\n\n{DATABASES | SCHEMAS} [STATUS]\n展示当前租户内的所有数据库。STATUS 关键字用于展示数据库的读写属性。\n\n\n[EXTENDED] [FULL] {COLUMNS | FIELDS} {FROM | IN} rel_name\n展示关系 rel_name 的列。 \n      \nEXTENDED 关键字用于展示数据库内部使用的隐藏列的信息。\nFULL 关键字用于展示列的字符序、权限与注释。\n\n\n\nTABLE STATUS [{FROM | IN} database_name]\n展示 database_name 库中所有表的详细信息。\n\n\nPROCEDURE STATUS [{FROM | IN} database_name]\n展示 database_name 库中所有存储过程的详细信息。\n\n\nFUNCTION STATUS [{FROM | IN} database_name]\n展示 database_name 库中所有函数的详细信息。\n\n\n{GLOBAL | SESSION | LOCAL} VARIABLES\n展示系统变量。\n\n\n{CHARSET | CHARACTER SET}\n展示支持的字符集。\n\n\nTRACE [FORMAT=‘JSON’]\n展示 SQL 语句的执行情况。可以选择以 JSON 的格式输出。\n\n\nCOLLATION\n展示支持的字符序。\n\n\nPARAMETERS [like_or_where_clause] tenant_name\n展示系统配置项。\n\n\n[EXTENDED] {INDEX | INDEXES | KEYS} {FROM | IN} rel_name [{FROM | IN} database_name]\n展示关系 rel_name 上的索引或键。 EXTENDED 关键字用于展示数据库内部使用的隐藏索引的信息。\n\n\n[FULL] PROCESSLIST\n查看当前租户进程列表。具体如下： \n      \nSHOW PROCESSLIST 显示简要的进程列表，具体如下： \n        \nId：进程的 ID，即当前会话的 Client Session ID，该 ID 是会话在客户端中的唯一标识。\nUser：连接的用户名。\nHost：Client 端 IP 和端口（通过 ODP 连接则为 ODP 的 IP 和端口）。\ndb：访问的 Database 名称。\nCommand：当前执行的命令类型，取值 Query、Sleep 等。\nTime：当前命令执行时间，单位是秒。如果命令发生重试，会清零后重新计算。\nState：当前会话状态，取值 SLEEP、ACTIVE 等。\nInfo：展示当前正在执行的命令，长度限制为 100 个字符，超出部分截断。\n\nSHOW FULL PROCESSLIST：显示完整的进程列表，包括每个进程的详细信息，具体如下： \n        \nId：进程的 ID，即当前会话的 Client Session ID，该 ID 是会话在客户端中的唯一标识。\nUser：连接的用户名。\nTenant：连接的租户。\nHost：Client 端 IP 和端口（通过 ODP 连接则为 ODP 的 IP 和端口）。\ndb：访问的 Database 名称。\nCommand：当前执行的命令类型，取值 Query、Sleep 等。\nTime：当前命令执行时间，单位是秒。如果命令发生重试，会清零后重新计算。\nState：当前会话状态，取值 SLEEP、ACTIVE 等。\nInfo：展示当前正在执行的命令。\nIp：服务器 IP 地址。\nPort：SQL 端口号。\n\n\n\n说明\n通过 SHOW PROCESSLIST 语句查询当前数据库中会话的数量和会话的 ID 的详细信息，请参见 查看租户会话。\n\n\n\nTABLEGROUPS\n展示表组信息。\n\n\n{GLOBAL | SESSION | LOCAL} STATUS\n展示会话的状态。\n\n\nTENANT [STATUS]\n展示当前的租户名。STATUS 关键字用于展示租户的读写状态。\n\n\nCREATE TENANT tenant_name\n查看创建租户的语句。sys 租户可查看所有租户的创建语句。业务租户仅能查看自身的创建语句。\n\n\nCREATE TABLEGROUP tablegroup_name\n查看创建表组的语句。\n\n\nCREATE {DATABASE | SCHEMA} [IF NOT EXISTS] database_name\n查看创建数据库的语句。IF NOT EXISTS 关键字用于在创建语句中添加 IF NOT EXISTS。\n\n\nCREATE TABLE table_name\n查看创建表的语句。\n\n\nCREATE VIEW view_name\n查看创建视图的语句。\n\n\nCREATE PROCEDURE proc_name\n查看创建存储过程的语句。\n\n\nCREATE FUNCTION func_name\n查看创建函数的语句。\n\n\nWARNINGS [LIMIT N | LIMIT N,M]\n查看告警。\n\n\nCOUNT(*) WARNINGS\n查看告警数量。\n\n\nERRORS [LIMIT N | LIMIT N,M]\n查看错误。\n\n\nCOUNT(*) ERRORS\n查看错误数量。\n\n\nGRANTS opt_for_grant_user\n查看指定用户的权限。如果不指定用户名，则显示当前用户的权限。当前用户可以查看自己的权限。如果需要查看其他指定用户的权限，必须拥有对 mysql.user 的 SELECT 权限。\n\n\n[STORAGE] ENGINES\n查看存储引擎，OceanBase 数据库的存储引擎为 OceanBase。\n\n\nPRIVILEGES\n查看 MySQL 各项权限的描述。\n\n\nRECYCLEBIN\n查看回收站。\n\n\nSEQUENCE\n查看所创建的序列。\n\n\nPROCEDURE CODE proc_name\n查看存储过程 proc_name 的内部实现。 \n      \n注意\n当前版本仅支持该关键字语法，功能不生效。\n\n\n\nFUNCTION CODE func_name\n查看存储函数 func_name 的内部实现。 \n      \n注意\n当前版本仅支持该关键字语法，功能不生效。\n\n\n\nENGIN engine_name\n查看有关存储引擎的操作信息。 \n      \n注意\n当前版本仅支持该关键字语法，功能不生效。\n\n\n\nOPEN TABLES\n用于查看服务器当前已经打开的表及其状态信息。 \n      \n注意\n当前版本仅支持该关键字语法，功能不生效。\n\n\n\n"
        ],
        "Examples": [
            "obclient> SHOW DATABASES;\n+--------------------+\n| Database           |\n+--------------------+\n| oceanbase          |\n| information_schema |\n| mysql              |\n| SYS                |\n| LBACSYS            |\n| ORAAUDITOR         |\n| test               |\n| db1                |\n+--------------------+\n",
            "obclient> SHOW CHARSET;\n+---------+-----------------------+--------------------+--------+\n| Charset | Description           | Default collation  | Maxlen |\n+---------+-----------------------+--------------------+--------+\n| binary  | Binary pseudo charset | binary             |      1 |\n| utf8mb4 | UTF-8 Unicode         | utf8mb4_general_ci |      4 |\n| gbk     | GBK charset           | gbk_chinese_ci     |      2 |\n| utf16   | UTF-16 Unicode        | utf16_general_ci   |      2 |\n| gb18030 | GB18030 charset       | gb18030_chinese_ci |      4 |\n| latin1  | cp1252 West European  | latin1_swedish_ci  |      1 |\n+---------+-----------------------+--------------------+--------+\n6 rows in set\n",
            "obclient> SHOW COLLATION;\n+--------------------+---------+-----+---------+----------+---------+\n| Collation          | Charset | Id  | Default | Compiled | Sortlen |\n+--------------------+---------+-----+---------+----------+---------+\n| utf8mb4_general_ci | utf8mb4 |  45 | Yes     | Yes      |       1 |\n| utf8mb4_bin        | utf8mb4 |  46 |         | Yes      |       1 |\n| binary             | binary  |  63 | Yes     | Yes      |       1 |\n| gbk_chinese_ci     | gbk     |  28 | Yes     | Yes      |       1 |\n| gbk_bin            | gbk     |  87 |         | Yes      |       1 |\n| utf16_general_ci   | utf16   |  54 | Yes     | Yes      |       1 |\n| utf16_bin          | utf16   |  55 |         | Yes      |       1 |\n| utf8mb4_unicode_ci | utf8mb4 | 224 |         | Yes      |       1 |\n| utf16_unicode_ci   | utf16   | 101 |         | Yes      |       1 |\n| gb18030_chinese_ci | gb18030 | 248 | Yes     | Yes      |       1 |\n| gb18030_bin        | gb18030 | 249 |         | Yes      |       1 |\n| latin1_swedish_ci  | latin1  |   8 | Yes     | Yes      |       1 |\n| latin1_bin         | latin1  |  47 |         | Yes      |       1 |\n+--------------------+---------+-----+---------+----------+---------+\n13 rows in set\n",
            "obclient> SHOW SESSION STATUS;\n+-------------------+--------+\n| Variable_name     | Value  |\n+-------------------+--------+\n| Threads_connected | 16     |\n| Uptime            | 945571 |\n+-------------------+--------+\n",
            "obclient> SHOW PRIVILEGES;\n+----------------+---------------------------------------+-------------------------------------------------------+\n| Privilege      | Context                               | Comment                                               |\n+----------------+---------------------------------------+-------------------------------------------------------+\n| Alter          | Tables                                | To alter the table                                    |\n| Create         | Databases,Tables,Indexes              | To create new databases and tables                    |\n| Create user    | Server Admin                          | To create new users                                   |\n| Create view    | Tables                                | To create new views                                   |\n| Delete         | Tables                                | To delete existing rows                               |\n| Drop           | Databases,Tables                      | To drop databases, tables, and views                  |\n| Grant option   | Databases,Tables,Functions,Procedures | To give to other users those privileges you possess   |\n| Index          | Tables                                | To create or drop indexes                             |\n| Insert         | Tables                                | To insert data into tables                            |\n| Process        | Server Admin                          | To view the plain text of currently executing queries |\n| Select         | Tables                                | To retrieve rows from table                           |\n| Show databases | Server Admin                          | To see all databases with SHOW DATABASES              |\n| Show view      | Tables                                | To see views with SHOW CREATE VIEW                    |\n| Super          | Server Admin                          | To use KILL thread, SET GLOBAL, CHANGE MASTER, etc.   |\n| Update         | Tables                                | To update existing rows                               |\n| Usage          | Server Admin                          | No privileges - allow connect only                    |\n+----------------+---------------------------------------+-------------------------------------------------------+\n",
            "obclient> SHOW RECYCLEBIN;\n+---------------------------------+---------------+-------+----------------------------+\n| OBJECT_NAME                     | ORIGINAL_NAME | TYPE  | CREATETIME                 |\n+---------------------------------+---------------+-------+----------------------------+\n| __recycle_$_10_1629093637659648 | t1            | TABLE | 2021-08-16 14:00:37.660550 |\n| __recycle_$_10_1629093721748992 | t1            | TABLE | 2021-08-16 14:02:01.748691 |\n+---------------------------------+---------------+-------+----------------------------+\n",
            "obclient> CREATE SEQUENCE IF NOT EXISTS s3 ORDER CACHE 100 INCREMENT BY 3 MAXVALUE 99999999999;\nQuery OK, 0 rows affected\n\nobclient> SHOW SEQUENCE LIKE 's%';\n+------------------------+\n| Sequences_in_test (s%) |\n+------------------------+\n| s1                     |\n| s2                     |\n| s3                     |\n+------------------------+\n3 rows in set\n\nobclient> SHOW SEQUENCE WHERE sequence_name='s3';\n+-------------------+\n| Sequences_in_test |\n+-------------------+\n| s3                |\n+-------------------+\n1 row in set\n\nobclient> SHOW SEQUENCE;\n+-------------------+\n| Sequences_in_test |\n+-------------------+\n| a2                |\n| s1                |\n| s2                |\n| s3                |\n+-------------------+\n4 rows in set\n",
            "obclient> SET ob_enable_show_trace = 1;\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE t1(c1 INT,c2 INT,c3 INT);\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO t1 VALUES(1,1,1);\nQuery OK, 1 rows affected\n\nobclient> INSERT INTO t1 VALUES(2,2,2);\nQuery OK, 1 rows affected\n\nobclient> SELECT/*+PARALLEL(2)*/ COUNT(*) FROM t1;\n+----------+\n| COUNT(*) |\n+----------+\n|        2 |\n+----------+\n1 row in set\n\nobclient> SHOW TRACE FORMAT='JSON'\\G\n*************************** 1. row ***************************\nShowTraceJSON: [{\"logs\": null, \"tags\": [[{\"sess_id\": 3221487676}, {\"action_name\": \"\"}, {\"module_name\": \"\"}, {\"client_info\": \"\"}, {\"receive_ts\": 1686734801498147}, {\"log_trace_id\": \"YB42AC1E87DE-0005FDE675EF77C4-0-0\"}]], \"elapse\": 4716, \"end_ts\": \"2023-06-14 17:26:41.502925\", \"parent\": \"0005fe13-8cac-6fd6-8035-4c299e621239\", \"span_id\": \"0005fe13-8cac-7061-6648-1148424d99fa\", \"start_ts\": \"2023-06-14 17:26:41.498209\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"com_query_process\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 4698, \"end_ts\": \"2023-06-14 17:26:41.502914\", \"parent\": \"0005fe13-8cac-7061-6648-1148424d99fa\", \"span_id\": \"0005fe13-8cac-7068-d79c-9a1e3df2f09f\", \"start_ts\": \"2023-06-14 17:26:41.498216\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"mpquery_single_stmt\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": [[{\"sql_text\": \"SHOW TRACE FORMAT='JSON'\"}], [{\"sql_id\": \"D2A6E68D54F4B888F9443FD4EABB490C\"}, {\"database_id\": 500001}, {\"plan_hash\": 13465692160314901852}], [{\"hit_plan\": false}]], \"elapse\": 2623, \"end_ts\": \"2023-06-14 17:26:41.500858\", \"parent\": \"0005fe13-8cac-7068-d79c-9a1e3df2f09f\", \"span_id\": \"0005fe13-8cac-707b-84fc-7259f7a5afa4\", \"start_ts\": \"2023-06-14 17:26:41.498235\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"sql_compile\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 5, \"end_ts\": \"2023-06-14 17:26:41.498244\", \"parent\": \"0005fe13-8cac-707b-84fc-7259f7a5afa4\", \"span_id\": \"0005fe13-8cac-707f-c009-4663739d39ed\", \"start_ts\": \"2023-06-14 17:26:41.498239\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"pc_get_plan\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 2543, \"end_ts\": \"2023-06-14 17:26:41.500841\", \"parent\": \"0005fe13-8cac-707b-84fc-7259f7a5afa4\", \"span_id\": \"0005fe13-8cac-70ba-5c5c-1dbf433776e1\", \"start_ts\": \"2023-06-14 17:26:41.498298\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"hard_parse\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 27, \"end_ts\": \"2023-06-14 17:26:41.498327\", \"parent\": \"0005fe13-8cac-70ba-5c5c-1dbf433776e1\", \"span_id\": \"0005fe13-8cac-70bc-91c6-d074e4c11eb8\", \"start_ts\": \"2023-06-14 17:26:41.498300\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"parse\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 777, \"end_ts\": \"2023-06-14 17:26:41.499126\", \"parent\": \"0005fe13-8cac-70ba-5c5c-1dbf433776e1\", \"span_id\": \"0005fe13-8cac-70ed-8482-917a5e0c16e7\", \"start_ts\": \"2023-06-14 17:26:41.498349\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"resolve\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 855, \"end_ts\": \"2023-06-14 17:26:41.500028\", \"parent\": \"0005fe13-8cac-70ba-5c5c-1dbf433776e1\", \"span_id\": \"0005fe13-8cac-7425-2af1-497b7573f962\", \"start_ts\": \"2023-06-14 17:26:41.499173\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"rewrite\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 477, \"end_ts\": \"2023-06-14 17:26:41.500522\", \"parent\": \"0005fe13-8cac-70ba-5c5c-1dbf433776e1\", \"span_id\": \"0005fe13-8cac-778d-5e60-51648fcad206\", \"start_ts\": \"2023-06-14 17:26:41.500045\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"optimize\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 176, \"end_ts\": \"2023-06-14 17:26:41.500712\", \"parent\": \"0005fe13-8cac-70ba-5c5c-1dbf433776e1\", \"span_id\": \"0005fe13-8cac-7978-2ba6-2d656301eaef\", \"start_ts\": \"2023-06-14 17:26:41.500536\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"code_generate\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 1980, \"end_ts\": \"2023-06-14 17:26:41.502845\", \"parent\": \"0005fe13-8cac-7068-d79c-9a1e3df2f09f\", \"span_id\": \"0005fe13-8cac-7ac1-2183-d9f0749c518d\", \"start_ts\": \"2023-06-14 17:26:41.500865\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"sql_execute\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 21, \"end_ts\": \"2023-06-14 17:26:41.500887\", \"parent\": \"0005fe13-8cac-7ac1-2183-d9f0749c518d\", \"span_id\": \"0005fe13-8cac-7ac2-cc2b-a9dcea52ac30\", \"start_ts\": \"2023-06-14 17:26:41.500866\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"open\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 1874, \"end_ts\": \"2023-06-14 17:26:41.502770\", \"parent\": \"0005fe13-8cac-7ac1-2183-d9f0749c518d\", \"span_id\": \"0005fe13-8cac-7ae0-063a-65a2b4aefdd6\", \"start_ts\": \"2023-06-14 17:26:41.500896\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"response_result\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 44, \"end_ts\": \"2023-06-14 17:26:41.500947\", \"parent\": \"0005fe13-8cac-7ae0-063a-65a2b4aefdd6\", \"span_id\": \"0005fe13-8cac-7ae7-2357-70f9191525f2\", \"start_ts\": \"2023-06-14 17:26:41.500903\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"do_local_das_task\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": [[{\"sql_id\": \"7F33FD22651F99E8AB2BAC5428623BCD\"}, {\"database_id\": 201001}], [{\"sql_text\": \"START TRANSACTION WITH CONSISTENT SNAPSHOT\"}], [{\"hit_plan\": false}]], \"elapse\": 95, \"end_ts\": \"2023-06-14 17:26:41.501466\", \"parent\": \"0005fe13-8cac-7ae0-063a-65a2b4aefdd6\", \"span_id\": \"0005fe13-8cac-7cbb-24eb-6fd68edef4b3\", \"start_ts\": \"2023-06-14 17:26:41.501371\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"sql_compile\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 5, \"end_ts\": \"2023-06-14 17:26:41.501378\", \"parent\": \"0005fe13-8cac-7cbb-24eb-6fd68edef4b3\", \"span_id\": \"0005fe13-8cac-7cbd-d28e-243bd51c8f52\", \"start_ts\": \"2023-06-14 17:26:41.501373\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"pc_get_plan\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 53, \"end_ts\": \"2023-06-14 17:26:41.501456\", \"parent\": \"0005fe13-8cac-7cbb-24eb-6fd68edef4b3\", \"span_id\": \"0005fe13-8cac-7cdb-6744-4e35d589f69e\", \"start_ts\": \"2023-06-14 17:26:41.501403\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"hard_parse\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 14, \"end_ts\": \"2023-06-14 17:26:41.501418\", \"parent\": \"0005fe13-8cac-7cdb-6744-4e35d589f69e\", \"span_id\": \"0005fe13-8cac-7cdc-d22e-b917f1f800ac\", \"start_ts\": \"2023-06-14 17:26:41.501404\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"parse\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 10, \"end_ts\": \"2023-06-14 17:26:41.501446\", \"parent\": \"0005fe13-8cac-7cdb-6744-4e35d589f69e\", \"span_id\": \"0005fe13-8cac-7cfc-a422-4419ea2a8f67\", \"start_ts\": \"2023-06-14 17:26:41.501436\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"resolve\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 32, \"end_ts\": \"2023-06-14 17:26:41.501531\", \"parent\": \"0005fe13-8cac-7ae0-063a-65a2b4aefdd6\", \"span_id\": \"0005fe13-8cac-7d3b-4877-b72cd0df1355\", \"start_ts\": \"2023-06-14 17:26:41.501499\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"open\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 22, \"end_ts\": \"2023-06-14 17:26:41.501522\", \"parent\": \"0005fe13-8cac-7d3b-4877-b72cd0df1355\", \"span_id\": \"0005fe13-8cac-7d3c-4373-3698da80bc1d\", \"start_ts\": \"2023-06-14 17:26:41.501500\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"cmd_open\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": [[{\"trans_id\": 0}]], \"elapse\": 1, \"end_ts\": \"2023-06-14 17:26:41.501502\", \"parent\": \"0005fe13-8cac-7d3c-4373-3698da80bc1d\", \"span_id\": \"0005fe13-8cac-7d3d-8ba4-00096f64fb96\", \"start_ts\": \"2023-06-14 17:26:41.501501\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"end_transaction\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 2, \"end_ts\": \"2023-06-14 17:26:41.501552\", \"parent\": \"0005fe13-8cac-7ae0-063a-65a2b4aefdd6\", \"span_id\": \"0005fe13-8cac-7d6e-608e-1f9e19e7615d\", \"start_ts\": \"2023-06-14 17:26:41.501550\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"close\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 536, \"end_ts\": \"2023-06-14 17:26:41.502144\", \"parent\": \"0005fe13-8cac-7ae0-063a-65a2b4aefdd6\", \"span_id\": \"0005fe13-8cac-7da8-8fe7-73d23fcb23bf\", \"start_ts\": \"2023-06-14 17:26:41.501608\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"inner_execute_read\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": [[{\"sql_text\": \"SELECT svr_ip, svr_port, tenant_id, trace_id, request_id, span_id, parent_span_id, span_name, ref_type, start_ts, end_ts, tags, logs FROM __all_virtual_trace_span_info WHERE tenant_id = 1002 AND trace_id = '0005fe13-8bf2-47d5-2cdd-5d819739c997'\"}], [{\"sql_id\": \"9B307250A34F95FE531FDC05F9F87300\"}, {\"database_id\": 201001}, {\"plan_hash\": 13345609059733987708}, {\"hit_plan\": true}]], \"elapse\": 96, \"end_ts\": \"2023-06-14 17:26:41.501714\", \"parent\": \"0005fe13-8cac-7da8-8fe7-73d23fcb23bf\", \"span_id\": \"0005fe13-8cac-7db2-b9c2-ef1bdb1e916b\", \"start_ts\": \"2023-06-14 17:26:41.501618\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"sql_compile\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 68, \"end_ts\": \"2023-06-14 17:26:41.501687\", \"parent\": \"0005fe13-8cac-7db2-b9c2-ef1bdb1e916b\", \"span_id\": \"0005fe13-8cac-7db3-0fc7-6c76f9923e90\", \"start_ts\": \"2023-06-14 17:26:41.501619\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"pc_get_plan\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 5, \"end_ts\": \"2023-06-14 17:26:41.501730\", \"parent\": \"0005fe13-8cac-7da8-8fe7-73d23fcb23bf\", \"span_id\": \"0005fe13-8cac-7e1d-fffd-bb0c14004d0b\", \"start_ts\": \"2023-06-14 17:26:41.501725\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"open\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 35, \"end_ts\": \"2023-06-14 17:26:41.501788\", \"parent\": \"0005fe13-8cac-7da8-8fe7-73d23fcb23bf\", \"span_id\": \"0005fe13-8cac-7e39-e47b-68b94d34b9f2\", \"start_ts\": \"2023-06-14 17:26:41.501753\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"do_local_das_task\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 32, \"end_ts\": \"2023-06-14 17:26:41.502270\", \"parent\": \"0005fe13-8cac-7ae0-063a-65a2b4aefdd6\", \"span_id\": \"0005fe13-8cac-801e-95e9-f013f18e58ae\", \"start_ts\": \"2023-06-14 17:26:41.502238\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"close\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 12, \"end_ts\": \"2023-06-14 17:26:41.502253\", \"parent\": \"0005fe13-8cac-801e-95e9-f013f18e58ae\", \"span_id\": \"0005fe13-8cac-8021-a2b8-efb5ea82362a\", \"start_ts\": \"2023-06-14 17:26:41.502241\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"close_das_task\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 131, \"end_ts\": \"2023-06-14 17:26:41.502419\", \"parent\": \"0005fe13-8cac-7ae0-063a-65a2b4aefdd6\", \"span_id\": \"0005fe13-8cac-8050-4e15-2c08b254c1a5\", \"start_ts\": \"2023-06-14 17:26:41.502288\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"inner_commit\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": [[{\"sql_text\": \"COMMIT\"}], [{\"sql_id\": \"1D0BA376E273B9D622641124D8C59264\"}, {\"database_id\": 201001}]], \"elapse\": 50, \"end_ts\": \"2023-06-14 17:26:41.502344\", \"parent\": \"0005fe13-8cac-8050-4e15-2c08b254c1a5\", \"span_id\": \"0005fe13-8cac-8056-1325-2808b1b2c771\", \"start_ts\": \"2023-06-14 17:26:41.502294\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"sql_compile\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 43, \"end_ts\": \"2023-06-14 17:26:41.502338\", \"parent\": \"0005fe13-8cac-8056-1325-2808b1b2c771\", \"span_id\": \"0005fe13-8cac-8057-68cd-3b71b27d0efc\", \"start_ts\": \"2023-06-14 17:26:41.502295\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"hard_parse\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 6, \"end_ts\": \"2023-06-14 17:26:41.502302\", \"parent\": \"0005fe13-8cac-8057-68cd-3b71b27d0efc\", \"span_id\": \"0005fe13-8cac-8058-f520-2ec9b2347039\", \"start_ts\": \"2023-06-14 17:26:41.502296\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"parse\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 9, \"end_ts\": \"2023-06-14 17:26:41.502328\", \"parent\": \"0005fe13-8cac-8057-68cd-3b71b27d0efc\", \"span_id\": \"0005fe13-8cac-806f-120c-2d223c5cafed\", \"start_ts\": \"2023-06-14 17:26:41.502319\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"resolve\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 31, \"end_ts\": \"2023-06-14 17:26:41.502381\", \"parent\": \"0005fe13-8cac-8050-4e15-2c08b254c1a5\", \"span_id\": \"0005fe13-8cac-808e-48e0-16311abf387d\", \"start_ts\": \"2023-06-14 17:26:41.502350\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"open\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 26, \"end_ts\": \"2023-06-14 17:26:41.502376\", \"parent\": \"0005fe13-8cac-808e-48e0-16311abf387d\", \"span_id\": \"0005fe13-8cac-808e-d038-2dd226a767c8\", \"start_ts\": \"2023-06-14 17:26:41.502350\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"cmd_open\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": [[{\"trans_id\": 638124}]], \"elapse\": 15, \"end_ts\": \"2023-06-14 17:26:41.502366\", \"parent\": \"0005fe13-8cac-808e-d038-2dd226a767c8\", \"span_id\": \"0005fe13-8cac-808f-c5be-0aea9943a94e\", \"start_ts\": \"2023-06-14 17:26:41.502351\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"end_transaction\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 1, \"end_ts\": \"2023-06-14 17:26:41.502394\", \"parent\": \"0005fe13-8cac-8050-4e15-2c08b254c1a5\", \"span_id\": \"0005fe13-8cac-80b9-b0dc-197d3c4b2ffd\", \"start_ts\": \"2023-06-14 17:26:41.502393\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"close\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 55, \"end_ts\": \"2023-06-14 17:26:41.502838\", \"parent\": \"0005fe13-8cac-7ac1-2183-d9f0749c518d\", \"span_id\": \"0005fe13-8cac-823f-9393-a4c4d9ef623d\", \"start_ts\": \"2023-06-14 17:26:41.502783\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"close\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 5, \"end_ts\": \"2023-06-14 17:26:41.502789\", \"parent\": \"0005fe13-8cac-823f-9393-a4c4d9ef623d\", \"span_id\": \"0005fe13-8cac-8240-73a1-98f019c5455a\", \"start_ts\": \"2023-06-14 17:26:41.502784\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"close_das_task\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": [[{\"trans_id\": 0}]], \"elapse\": 3, \"end_ts\": \"2023-06-14 17:26:41.502828\", \"parent\": \"0005fe13-8cac-823f-9393-a4c4d9ef623d\", \"span_id\": \"0005fe13-8cac-8269-cc9b-b89fe9a1cda3\", \"start_ts\": \"2023-06-14 17:26:41.502825\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"end_transaction\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}]\n1 row in set\n",
            "obclient> SHOW COLUMNS FROM tbl2;\n",
            "  +-------+---------+------+-----+---------+-------+\n  | Field | Type    | Null | Key | Default | Extra |\n  +-------+---------+------+-----+---------+-------+\n  | a     | int(11) | YES  |     | NULL    |       |\n  | b     | int(11) | YES  |     | NULL    |       |\n  +-------+---------+------+-----+---------+-------+\n  2 rows in set\n",
            "obclient> SHOW EXTENDED COLUMNS FROM tbl2;\n",
            "  +----------------+-----------------+------+-----+---------+-------+\n  | Field          | Type            | Null | Key | Default | Extra |\n  +----------------+-----------------+------+-----+---------+-------+\n  | a              | int(11)         | YES  |     | NULL    |       |\n  | b              | int(11)         | YES  |     | NULL    |       |\n  | __pk_increment | bigint unsigned | NO   | PRI | NULL    |       |\n  +----------------+-----------------+------+-----+---------+-------+\n  3 rows in set\n",
            "obclient> SHOW INDEX FROM tbl2;\n",
            "+-------+------------+------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+-----------+---------------+---------+------------+\n| Table | Non_unique | Key_name   | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment   | Index_comment | Visible | Expression |\n+-------+------------+------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+-----------+---------------+---------+------------+\n| tbl2  |          1 | tbl2_index |            1 | a           | A         |        NULL | NULL     | NULL   | YES  | BTREE      | available |               | YES     | NULL       |\n| tbl2  |          1 | tbl2_index |            2 | b           | A         |        NULL | NULL     | NULL   | YES  | BTREE      | available |               | YES     | NULL       |\n+-------+------------+------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+-----------+---------------+---------+------------+\n2 rows in set\n",
            "  obclient> SHOW EXTENDED INDEX FROM tbl2;\n",
            "  +-------+------------+------------+--------------+----------------+-----------+-------------+----------+--------+------+------------+-----------+---------------+---------+------------+\n  | Table | Non_unique | Key_name   | Seq_in_index | Column_name    | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment   | Index_comment | Visible | Expression |\n  +-------+------------+------------+--------------+----------------+-----------+-------------+----------+--------+------+------------+-----------+---------------+---------+------------+\n  | tbl2  |          0 | PRIMARY    |            1 | __pk_increment | A         |        NULL | NULL     | NULL   |      | BTREE      | available |               | YES     | NULL       |\n  | tbl2  |          0 | PRIMARY    |            2 | a              | A         |        NULL | NULL     | NULL   |      | BTREE      | available |               | YES     | NULL       |\n  | tbl2  |          0 | PRIMARY    |            3 | b              | A         |        NULL | NULL     | NULL   |      | BTREE      | available |               | YES     | NULL       |\n  | tbl2  |          1 | tbl2_index |            1 | a              | A         |        NULL | NULL     | NULL   | YES  | BTREE      | available |               | YES     | NULL       |\n  | tbl2  |          1 | tbl2_index |            2 | b              | A         |        NULL | NULL     | NULL   | YES  | BTREE      | available |               | YES     | NULL       |\n  | tbl2  |          1 | tbl2_index |            3 | __pk_increment | A         |        NULL | NULL     | NULL   |      | BTREE      | available |               | YES     | NULL       |\n  +-------+------------+------------+--------------+----------------+-----------+-------------+----------+--------+------+------------+-----------+---------------+---------+------------+\n  6 rows in set\n"
        ],
        "Detailed Examples": [
            "查看当前租户内的所有数据库。",
            "obclient> SHOW DATABASES;\n+--------------------+\n| Database           |\n+--------------------+\n| oceanbase          |\n| information_schema |\n| mysql              |\n| SYS                |\n| LBACSYS            |\n| ORAAUDITOR         |\n| test               |\n| db1                |\n+--------------------+\n",
            "查看支持的字符集。",
            "obclient> SHOW CHARSET;\n+---------+-----------------------+--------------------+--------+\n| Charset | Description           | Default collation  | Maxlen |\n+---------+-----------------------+--------------------+--------+\n| binary  | Binary pseudo charset | binary             |      1 |\n| utf8mb4 | UTF-8 Unicode         | utf8mb4_general_ci |      4 |\n| gbk     | GBK charset           | gbk_chinese_ci     |      2 |\n| utf16   | UTF-16 Unicode        | utf16_general_ci   |      2 |\n| gb18030 | GB18030 charset       | gb18030_chinese_ci |      4 |\n| latin1  | cp1252 West European  | latin1_swedish_ci  |      1 |\n+---------+-----------------------+--------------------+--------+\n6 rows in set\n",
            "查看支持的字符序。",
            "obclient> SHOW COLLATION;\n+--------------------+---------+-----+---------+----------+---------+\n| Collation          | Charset | Id  | Default | Compiled | Sortlen |\n+--------------------+---------+-----+---------+----------+---------+\n| utf8mb4_general_ci | utf8mb4 |  45 | Yes     | Yes      |       1 |\n| utf8mb4_bin        | utf8mb4 |  46 |         | Yes      |       1 |\n| binary             | binary  |  63 | Yes     | Yes      |       1 |\n| gbk_chinese_ci     | gbk     |  28 | Yes     | Yes      |       1 |\n| gbk_bin            | gbk     |  87 |         | Yes      |       1 |\n| utf16_general_ci   | utf16   |  54 | Yes     | Yes      |       1 |\n| utf16_bin          | utf16   |  55 |         | Yes      |       1 |\n| utf8mb4_unicode_ci | utf8mb4 | 224 |         | Yes      |       1 |\n| utf16_unicode_ci   | utf16   | 101 |         | Yes      |       1 |\n| gb18030_chinese_ci | gb18030 | 248 | Yes     | Yes      |       1 |\n| gb18030_bin        | gb18030 | 249 |         | Yes      |       1 |\n| latin1_swedish_ci  | latin1  |   8 | Yes     | Yes      |       1 |\n| latin1_bin         | latin1  |  47 |         | Yes      |       1 |\n+--------------------+---------+-----+---------+----------+---------+\n13 rows in set\n",
            "查看当前的会话状态。",
            "obclient> SHOW SESSION STATUS;\n+-------------------+--------+\n| Variable_name     | Value  |\n+-------------------+--------+\n| Threads_connected | 16     |\n| Uptime            | 945571 |\n+-------------------+--------+\n",
            "查看各权限的含义。",
            "obclient> SHOW PRIVILEGES;\n+----------------+---------------------------------------+-------------------------------------------------------+\n| Privilege      | Context                               | Comment                                               |\n+----------------+---------------------------------------+-------------------------------------------------------+\n| Alter          | Tables                                | To alter the table                                    |\n| Create         | Databases,Tables,Indexes              | To create new databases and tables                    |\n| Create user    | Server Admin                          | To create new users                                   |\n| Create view    | Tables                                | To create new views                                   |\n| Delete         | Tables                                | To delete existing rows                               |\n| Drop           | Databases,Tables                      | To drop databases, tables, and views                  |\n| Grant option   | Databases,Tables,Functions,Procedures | To give to other users those privileges you possess   |\n| Index          | Tables                                | To create or drop indexes                             |\n| Insert         | Tables                                | To insert data into tables                            |\n| Process        | Server Admin                          | To view the plain text of currently executing queries |\n| Select         | Tables                                | To retrieve rows from table                           |\n| Show databases | Server Admin                          | To see all databases with SHOW DATABASES              |\n| Show view      | Tables                                | To see views with SHOW CREATE VIEW                    |\n| Super          | Server Admin                          | To use KILL thread, SET GLOBAL, CHANGE MASTER, etc.   |\n| Update         | Tables                                | To update existing rows                               |\n| Usage          | Server Admin                          | No privileges - allow connect only                    |\n+----------------+---------------------------------------+-------------------------------------------------------+\n",
            "查看回收站。",
            "obclient> SHOW RECYCLEBIN;\n+---------------------------------+---------------+-------+----------------------------+\n| OBJECT_NAME                     | ORIGINAL_NAME | TYPE  | CREATETIME                 |\n+---------------------------------+---------------+-------+----------------------------+\n| __recycle_$_10_1629093637659648 | t1            | TABLE | 2021-08-16 14:00:37.660550 |\n| __recycle_$_10_1629093721748992 | t1            | TABLE | 2021-08-16 14:02:01.748691 |\n+---------------------------------+---------------+-------+----------------------------+\n",
            "查看所创建的序列。",
            "obclient> CREATE SEQUENCE IF NOT EXISTS s3 ORDER CACHE 100 INCREMENT BY 3 MAXVALUE 99999999999;\nQuery OK, 0 rows affected\n\nobclient> SHOW SEQUENCE LIKE 's%';\n+------------------------+\n| Sequences_in_test (s%) |\n+------------------------+\n| s1                     |\n| s2                     |\n| s3                     |\n+------------------------+\n3 rows in set\n\nobclient> SHOW SEQUENCE WHERE sequence_name='s3';\n+-------------------+\n| Sequences_in_test |\n+-------------------+\n| s3                |\n+-------------------+\n1 row in set\n\nobclient> SHOW SEQUENCE;\n+-------------------+\n| Sequences_in_test |\n+-------------------+\n| a2                |\n| s1                |\n| s2                |\n| s3                |\n+-------------------+\n4 rows in set\n",
            "使用 SHOW TRACE 查看某一 SQL 的执行信息，并以 JSON 的格式输出。",
            "obclient> SET ob_enable_show_trace = 1;\nQuery OK, 0 rows affected\n\nobclient> CREATE TABLE t1(c1 INT,c2 INT,c3 INT);\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO t1 VALUES(1,1,1);\nQuery OK, 1 rows affected\n\nobclient> INSERT INTO t1 VALUES(2,2,2);\nQuery OK, 1 rows affected\n\nobclient> SELECT/*+PARALLEL(2)*/ COUNT(*) FROM t1;\n+----------+\n| COUNT(*) |\n+----------+\n|        2 |\n+----------+\n1 row in set\n\nobclient> SHOW TRACE FORMAT='JSON'\\G\n*************************** 1. row ***************************\nShowTraceJSON: [{\"logs\": null, \"tags\": [[{\"sess_id\": 3221487676}, {\"action_name\": \"\"}, {\"module_name\": \"\"}, {\"client_info\": \"\"}, {\"receive_ts\": 1686734801498147}, {\"log_trace_id\": \"YB42AC1E87DE-0005FDE675EF77C4-0-0\"}]], \"elapse\": 4716, \"end_ts\": \"2023-06-14 17:26:41.502925\", \"parent\": \"0005fe13-8cac-6fd6-8035-4c299e621239\", \"span_id\": \"0005fe13-8cac-7061-6648-1148424d99fa\", \"start_ts\": \"2023-06-14 17:26:41.498209\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"com_query_process\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 4698, \"end_ts\": \"2023-06-14 17:26:41.502914\", \"parent\": \"0005fe13-8cac-7061-6648-1148424d99fa\", \"span_id\": \"0005fe13-8cac-7068-d79c-9a1e3df2f09f\", \"start_ts\": \"2023-06-14 17:26:41.498216\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"mpquery_single_stmt\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": [[{\"sql_text\": \"SHOW TRACE FORMAT='JSON'\"}], [{\"sql_id\": \"D2A6E68D54F4B888F9443FD4EABB490C\"}, {\"database_id\": 500001}, {\"plan_hash\": 13465692160314901852}], [{\"hit_plan\": false}]], \"elapse\": 2623, \"end_ts\": \"2023-06-14 17:26:41.500858\", \"parent\": \"0005fe13-8cac-7068-d79c-9a1e3df2f09f\", \"span_id\": \"0005fe13-8cac-707b-84fc-7259f7a5afa4\", \"start_ts\": \"2023-06-14 17:26:41.498235\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"sql_compile\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 5, \"end_ts\": \"2023-06-14 17:26:41.498244\", \"parent\": \"0005fe13-8cac-707b-84fc-7259f7a5afa4\", \"span_id\": \"0005fe13-8cac-707f-c009-4663739d39ed\", \"start_ts\": \"2023-06-14 17:26:41.498239\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"pc_get_plan\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 2543, \"end_ts\": \"2023-06-14 17:26:41.500841\", \"parent\": \"0005fe13-8cac-707b-84fc-7259f7a5afa4\", \"span_id\": \"0005fe13-8cac-70ba-5c5c-1dbf433776e1\", \"start_ts\": \"2023-06-14 17:26:41.498298\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"hard_parse\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 27, \"end_ts\": \"2023-06-14 17:26:41.498327\", \"parent\": \"0005fe13-8cac-70ba-5c5c-1dbf433776e1\", \"span_id\": \"0005fe13-8cac-70bc-91c6-d074e4c11eb8\", \"start_ts\": \"2023-06-14 17:26:41.498300\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"parse\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 777, \"end_ts\": \"2023-06-14 17:26:41.499126\", \"parent\": \"0005fe13-8cac-70ba-5c5c-1dbf433776e1\", \"span_id\": \"0005fe13-8cac-70ed-8482-917a5e0c16e7\", \"start_ts\": \"2023-06-14 17:26:41.498349\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"resolve\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 855, \"end_ts\": \"2023-06-14 17:26:41.500028\", \"parent\": \"0005fe13-8cac-70ba-5c5c-1dbf433776e1\", \"span_id\": \"0005fe13-8cac-7425-2af1-497b7573f962\", \"start_ts\": \"2023-06-14 17:26:41.499173\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"rewrite\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 477, \"end_ts\": \"2023-06-14 17:26:41.500522\", \"parent\": \"0005fe13-8cac-70ba-5c5c-1dbf433776e1\", \"span_id\": \"0005fe13-8cac-778d-5e60-51648fcad206\", \"start_ts\": \"2023-06-14 17:26:41.500045\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"optimize\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 176, \"end_ts\": \"2023-06-14 17:26:41.500712\", \"parent\": \"0005fe13-8cac-70ba-5c5c-1dbf433776e1\", \"span_id\": \"0005fe13-8cac-7978-2ba6-2d656301eaef\", \"start_ts\": \"2023-06-14 17:26:41.500536\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"code_generate\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 1980, \"end_ts\": \"2023-06-14 17:26:41.502845\", \"parent\": \"0005fe13-8cac-7068-d79c-9a1e3df2f09f\", \"span_id\": \"0005fe13-8cac-7ac1-2183-d9f0749c518d\", \"start_ts\": \"2023-06-14 17:26:41.500865\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"sql_execute\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 21, \"end_ts\": \"2023-06-14 17:26:41.500887\", \"parent\": \"0005fe13-8cac-7ac1-2183-d9f0749c518d\", \"span_id\": \"0005fe13-8cac-7ac2-cc2b-a9dcea52ac30\", \"start_ts\": \"2023-06-14 17:26:41.500866\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"open\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 1874, \"end_ts\": \"2023-06-14 17:26:41.502770\", \"parent\": \"0005fe13-8cac-7ac1-2183-d9f0749c518d\", \"span_id\": \"0005fe13-8cac-7ae0-063a-65a2b4aefdd6\", \"start_ts\": \"2023-06-14 17:26:41.500896\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"response_result\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 44, \"end_ts\": \"2023-06-14 17:26:41.500947\", \"parent\": \"0005fe13-8cac-7ae0-063a-65a2b4aefdd6\", \"span_id\": \"0005fe13-8cac-7ae7-2357-70f9191525f2\", \"start_ts\": \"2023-06-14 17:26:41.500903\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"do_local_das_task\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": [[{\"sql_id\": \"7F33FD22651F99E8AB2BAC5428623BCD\"}, {\"database_id\": 201001}], [{\"sql_text\": \"START TRANSACTION WITH CONSISTENT SNAPSHOT\"}], [{\"hit_plan\": false}]], \"elapse\": 95, \"end_ts\": \"2023-06-14 17:26:41.501466\", \"parent\": \"0005fe13-8cac-7ae0-063a-65a2b4aefdd6\", \"span_id\": \"0005fe13-8cac-7cbb-24eb-6fd68edef4b3\", \"start_ts\": \"2023-06-14 17:26:41.501371\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"sql_compile\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 5, \"end_ts\": \"2023-06-14 17:26:41.501378\", \"parent\": \"0005fe13-8cac-7cbb-24eb-6fd68edef4b3\", \"span_id\": \"0005fe13-8cac-7cbd-d28e-243bd51c8f52\", \"start_ts\": \"2023-06-14 17:26:41.501373\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"pc_get_plan\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 53, \"end_ts\": \"2023-06-14 17:26:41.501456\", \"parent\": \"0005fe13-8cac-7cbb-24eb-6fd68edef4b3\", \"span_id\": \"0005fe13-8cac-7cdb-6744-4e35d589f69e\", \"start_ts\": \"2023-06-14 17:26:41.501403\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"hard_parse\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 14, \"end_ts\": \"2023-06-14 17:26:41.501418\", \"parent\": \"0005fe13-8cac-7cdb-6744-4e35d589f69e\", \"span_id\": \"0005fe13-8cac-7cdc-d22e-b917f1f800ac\", \"start_ts\": \"2023-06-14 17:26:41.501404\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"parse\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 10, \"end_ts\": \"2023-06-14 17:26:41.501446\", \"parent\": \"0005fe13-8cac-7cdb-6744-4e35d589f69e\", \"span_id\": \"0005fe13-8cac-7cfc-a422-4419ea2a8f67\", \"start_ts\": \"2023-06-14 17:26:41.501436\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"resolve\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 32, \"end_ts\": \"2023-06-14 17:26:41.501531\", \"parent\": \"0005fe13-8cac-7ae0-063a-65a2b4aefdd6\", \"span_id\": \"0005fe13-8cac-7d3b-4877-b72cd0df1355\", \"start_ts\": \"2023-06-14 17:26:41.501499\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"open\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 22, \"end_ts\": \"2023-06-14 17:26:41.501522\", \"parent\": \"0005fe13-8cac-7d3b-4877-b72cd0df1355\", \"span_id\": \"0005fe13-8cac-7d3c-4373-3698da80bc1d\", \"start_ts\": \"2023-06-14 17:26:41.501500\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"cmd_open\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": [[{\"trans_id\": 0}]], \"elapse\": 1, \"end_ts\": \"2023-06-14 17:26:41.501502\", \"parent\": \"0005fe13-8cac-7d3c-4373-3698da80bc1d\", \"span_id\": \"0005fe13-8cac-7d3d-8ba4-00096f64fb96\", \"start_ts\": \"2023-06-14 17:26:41.501501\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"end_transaction\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 2, \"end_ts\": \"2023-06-14 17:26:41.501552\", \"parent\": \"0005fe13-8cac-7ae0-063a-65a2b4aefdd6\", \"span_id\": \"0005fe13-8cac-7d6e-608e-1f9e19e7615d\", \"start_ts\": \"2023-06-14 17:26:41.501550\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"close\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 536, \"end_ts\": \"2023-06-14 17:26:41.502144\", \"parent\": \"0005fe13-8cac-7ae0-063a-65a2b4aefdd6\", \"span_id\": \"0005fe13-8cac-7da8-8fe7-73d23fcb23bf\", \"start_ts\": \"2023-06-14 17:26:41.501608\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"inner_execute_read\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": [[{\"sql_text\": \"SELECT svr_ip, svr_port, tenant_id, trace_id, request_id, span_id, parent_span_id, span_name, ref_type, start_ts, end_ts, tags, logs FROM __all_virtual_trace_span_info WHERE tenant_id = 1002 AND trace_id = '0005fe13-8bf2-47d5-2cdd-5d819739c997'\"}], [{\"sql_id\": \"9B307250A34F95FE531FDC05F9F87300\"}, {\"database_id\": 201001}, {\"plan_hash\": 13345609059733987708}, {\"hit_plan\": true}]], \"elapse\": 96, \"end_ts\": \"2023-06-14 17:26:41.501714\", \"parent\": \"0005fe13-8cac-7da8-8fe7-73d23fcb23bf\", \"span_id\": \"0005fe13-8cac-7db2-b9c2-ef1bdb1e916b\", \"start_ts\": \"2023-06-14 17:26:41.501618\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"sql_compile\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 68, \"end_ts\": \"2023-06-14 17:26:41.501687\", \"parent\": \"0005fe13-8cac-7db2-b9c2-ef1bdb1e916b\", \"span_id\": \"0005fe13-8cac-7db3-0fc7-6c76f9923e90\", \"start_ts\": \"2023-06-14 17:26:41.501619\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"pc_get_plan\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 5, \"end_ts\": \"2023-06-14 17:26:41.501730\", \"parent\": \"0005fe13-8cac-7da8-8fe7-73d23fcb23bf\", \"span_id\": \"0005fe13-8cac-7e1d-fffd-bb0c14004d0b\", \"start_ts\": \"2023-06-14 17:26:41.501725\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"open\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 35, \"end_ts\": \"2023-06-14 17:26:41.501788\", \"parent\": \"0005fe13-8cac-7da8-8fe7-73d23fcb23bf\", \"span_id\": \"0005fe13-8cac-7e39-e47b-68b94d34b9f2\", \"start_ts\": \"2023-06-14 17:26:41.501753\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"do_local_das_task\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 32, \"end_ts\": \"2023-06-14 17:26:41.502270\", \"parent\": \"0005fe13-8cac-7ae0-063a-65a2b4aefdd6\", \"span_id\": \"0005fe13-8cac-801e-95e9-f013f18e58ae\", \"start_ts\": \"2023-06-14 17:26:41.502238\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"close\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 12, \"end_ts\": \"2023-06-14 17:26:41.502253\", \"parent\": \"0005fe13-8cac-801e-95e9-f013f18e58ae\", \"span_id\": \"0005fe13-8cac-8021-a2b8-efb5ea82362a\", \"start_ts\": \"2023-06-14 17:26:41.502241\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"close_das_task\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 131, \"end_ts\": \"2023-06-14 17:26:41.502419\", \"parent\": \"0005fe13-8cac-7ae0-063a-65a2b4aefdd6\", \"span_id\": \"0005fe13-8cac-8050-4e15-2c08b254c1a5\", \"start_ts\": \"2023-06-14 17:26:41.502288\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"inner_commit\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": [[{\"sql_text\": \"COMMIT\"}], [{\"sql_id\": \"1D0BA376E273B9D622641124D8C59264\"}, {\"database_id\": 201001}]], \"elapse\": 50, \"end_ts\": \"2023-06-14 17:26:41.502344\", \"parent\": \"0005fe13-8cac-8050-4e15-2c08b254c1a5\", \"span_id\": \"0005fe13-8cac-8056-1325-2808b1b2c771\", \"start_ts\": \"2023-06-14 17:26:41.502294\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"sql_compile\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 43, \"end_ts\": \"2023-06-14 17:26:41.502338\", \"parent\": \"0005fe13-8cac-8056-1325-2808b1b2c771\", \"span_id\": \"0005fe13-8cac-8057-68cd-3b71b27d0efc\", \"start_ts\": \"2023-06-14 17:26:41.502295\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"hard_parse\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 6, \"end_ts\": \"2023-06-14 17:26:41.502302\", \"parent\": \"0005fe13-8cac-8057-68cd-3b71b27d0efc\", \"span_id\": \"0005fe13-8cac-8058-f520-2ec9b2347039\", \"start_ts\": \"2023-06-14 17:26:41.502296\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"parse\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 9, \"end_ts\": \"2023-06-14 17:26:41.502328\", \"parent\": \"0005fe13-8cac-8057-68cd-3b71b27d0efc\", \"span_id\": \"0005fe13-8cac-806f-120c-2d223c5cafed\", \"start_ts\": \"2023-06-14 17:26:41.502319\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"resolve\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 31, \"end_ts\": \"2023-06-14 17:26:41.502381\", \"parent\": \"0005fe13-8cac-8050-4e15-2c08b254c1a5\", \"span_id\": \"0005fe13-8cac-808e-48e0-16311abf387d\", \"start_ts\": \"2023-06-14 17:26:41.502350\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"open\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 26, \"end_ts\": \"2023-06-14 17:26:41.502376\", \"parent\": \"0005fe13-8cac-808e-48e0-16311abf387d\", \"span_id\": \"0005fe13-8cac-808e-d038-2dd226a767c8\", \"start_ts\": \"2023-06-14 17:26:41.502350\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"cmd_open\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": [[{\"trans_id\": 638124}]], \"elapse\": 15, \"end_ts\": \"2023-06-14 17:26:41.502366\", \"parent\": \"0005fe13-8cac-808e-d038-2dd226a767c8\", \"span_id\": \"0005fe13-8cac-808f-c5be-0aea9943a94e\", \"start_ts\": \"2023-06-14 17:26:41.502351\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"end_transaction\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 1, \"end_ts\": \"2023-06-14 17:26:41.502394\", \"parent\": \"0005fe13-8cac-8050-4e15-2c08b254c1a5\", \"span_id\": \"0005fe13-8cac-80b9-b0dc-197d3c4b2ffd\", \"start_ts\": \"2023-06-14 17:26:41.502393\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"close\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 55, \"end_ts\": \"2023-06-14 17:26:41.502838\", \"parent\": \"0005fe13-8cac-7ac1-2183-d9f0749c518d\", \"span_id\": \"0005fe13-8cac-823f-9393-a4c4d9ef623d\", \"start_ts\": \"2023-06-14 17:26:41.502783\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"close\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": null, \"elapse\": 5, \"end_ts\": \"2023-06-14 17:26:41.502789\", \"parent\": \"0005fe13-8cac-823f-9393-a4c4d9ef623d\", \"span_id\": \"0005fe13-8cac-8240-73a1-98f019c5455a\", \"start_ts\": \"2023-06-14 17:26:41.502784\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"close_das_task\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}, {\"logs\": null, \"tags\": [[{\"trans_id\": 0}]], \"elapse\": 3, \"end_ts\": \"2023-06-14 17:26:41.502828\", \"parent\": \"0005fe13-8cac-823f-9393-a4c4d9ef623d\", \"span_id\": \"0005fe13-8cac-8269-cc9b-b89fe9a1cda3\", \"start_ts\": \"2023-06-14 17:26:41.502825\", \"trace_id\": \"0005fe13-8cac-6fd6-0b2a-658fb95ee88f\", \"span_name\": \"end_transaction\", \"tenant_id\": 1002, \"rec_svr_ip\": \"172.xx.xxx.xxx\", \"rec_svr_port\": 2882}]\n1 row in set\n",
            "通过 SHOW COLUMNS 查看表 tbl2 的列信息。",
            "obclient> SHOW COLUMNS FROM tbl2;\n",
            "查询结果如下：",
            "  +-------+---------+------+-----+---------+-------+\n  | Field | Type    | Null | Key | Default | Extra |\n  +-------+---------+------+-----+---------+-------+\n  | a     | int(11) | YES  |     | NULL    |       |\n  | b     | int(11) | YES  |     | NULL    |       |\n  +-------+---------+------+-----+---------+-------+\n  2 rows in set\n",
            "通过 SHOW EXTENDED COLUMNS 查看表 tbl2 隐藏的列信息。",
            "obclient> SHOW EXTENDED COLUMNS FROM tbl2;\n",
            "查询结果如下：",
            "  +----------------+-----------------+------+-----+---------+-------+\n  | Field          | Type            | Null | Key | Default | Extra |\n  +----------------+-----------------+------+-----+---------+-------+\n  | a              | int(11)         | YES  |     | NULL    |       |\n  | b              | int(11)         | YES  |     | NULL    |       |\n  | __pk_increment | bigint unsigned | NO   | PRI | NULL    |       |\n  +----------------+-----------------+------+-----+---------+-------+\n  3 rows in set\n",
            "通过 SHOW INDEX 查看表 tbl2 的索引信息。",
            "obclient> SHOW INDEX FROM tbl2;\n",
            "查询结果如下：",
            "+-------+------------+------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+-----------+---------------+---------+------------+\n| Table | Non_unique | Key_name   | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment   | Index_comment | Visible | Expression |\n+-------+------------+------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+-----------+---------------+---------+------------+\n| tbl2  |          1 | tbl2_index |            1 | a           | A         |        NULL | NULL     | NULL   | YES  | BTREE      | available |               | YES     | NULL       |\n| tbl2  |          1 | tbl2_index |            2 | b           | A         |        NULL | NULL     | NULL   | YES  | BTREE      | available |               | YES     | NULL       |\n+-------+------------+------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+-----------+---------------+---------+------------+\n2 rows in set\n",
            "通过 SHOW EXTENDED INDEX 查看表 tbl2 隐藏的索引信息。",
            "  obclient> SHOW EXTENDED INDEX FROM tbl2;\n",
            "查询结果如下：",
            "  +-------+------------+------------+--------------+----------------+-----------+-------------+----------+--------+------+------------+-----------+---------------+---------+------------+\n  | Table | Non_unique | Key_name   | Seq_in_index | Column_name    | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment   | Index_comment | Visible | Expression |\n  +-------+------------+------------+--------------+----------------+-----------+-------------+----------+--------+------+------------+-----------+---------------+---------+------------+\n  | tbl2  |          0 | PRIMARY    |            1 | __pk_increment | A         |        NULL | NULL     | NULL   |      | BTREE      | available |               | YES     | NULL       |\n  | tbl2  |          0 | PRIMARY    |            2 | a              | A         |        NULL | NULL     | NULL   |      | BTREE      | available |               | YES     | NULL       |\n  | tbl2  |          0 | PRIMARY    |            3 | b              | A         |        NULL | NULL     | NULL   |      | BTREE      | available |               | YES     | NULL       |\n  | tbl2  |          1 | tbl2_index |            1 | a              | A         |        NULL | NULL     | NULL   | YES  | BTREE      | available |               | YES     | NULL       |\n  | tbl2  |          1 | tbl2_index |            2 | b              | A         |        NULL | NULL     | NULL   | YES  | BTREE      | available |               | YES     | NULL       |\n  | tbl2  |          1 | tbl2_index |            3 | __pk_increment | A         |        NULL | NULL     | NULL   |      | BTREE      | available |               | YES     | NULL       |\n  +-------+------------+------------+--------------+----------------+-----------+-------------+----------+--------+------+------------+-----------+---------------+---------+------------+\n  6 rows in set\n"
        ]
    },
    "TRANSACTION": {
        "Title": [
            "TRANSACTION"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053505"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "transaction_stmt:\n      START TRANSACTION [READ ONLY | READ WRITE];\n    | BEGIN [WORK];\n    | COMMIT [WORK];\n    | ROLLBACK [WORK];\n    | SET TRANSACTION {READ ONLY | READ WRITE};\n",
        "Description": [
            "该语句用于开启事务。",
            "数据库事务（Database Transaction）是指作为单个逻辑工作单元执行的一系列操作。事务处理可以用来维护数据库的完整性，保证成批的 SQL 操作全部执行或全部不执行。",
            "显示事务是用户自定义或用户指定的事务。通过 BEGIN 和 BEGIN WORK（被作为 START TRANSACTION 的别名）语句显示开始，以 COMMIT 或 ROLLBACK 语句显示结束。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nSTART TRANSACTION [READ ONLY | READ WRITE]\n开启事务语句。一旦开启事务，则随后的 SQL 数据操作语句（即 INSERT 、UPDATE 、DELETE等）直到显式提交时才会生效。READ ONLY 表示事务是只读方式开启，事务内不允许执行修改操作。READ WRITE 表示事务是读写方式开启，默认就是此种模式。\n\n\nBEGIN\nBEGIN 和 BEGIN WORK 被作为 START TRANSACTION 的别名。\n\n\nCOMMIT\n提交当前事务。\n\n\nROLLBACK\n回滚当前事务。\n\n\nSET TRANSACTION {READ ONLY | READ WRITE}\n将当前事务设置成 READ ONLY 或者 READ WRITE 模式。\n\n\n"
        ],
        "Examples": [
            "obclient> START TRANSACTION;\nQuery OK, 0 rows affected\n\nobclient> UPDATE a SET name = 'c' WHERE id = 3;\nQuery OK, 1 rows affected  \n\nobclient> INSERT INTO a VALUES (4, 'a', 30, '2013-06-21 16:09:13');\nQuery OK, 1 rows affected  \n\nobclient> COMMIT;\nQuery OK, 0 rows affected\n",
            "SELECT * FROM a;\n"
        ],
        "Detailed Examples": [
            "假设现有表 a 如下所示。",
            "\n\n\nid\nname\nnum\nsell_date\n\n\n\n\n1\na\n100\n2013-06-21 10:06:43\n\n\n2\nb\n200\n2013-06-21 13:07:21\n\n\n3\na\n50\n2013-06-21 13:08:15\n\n\n",
            "依次执行以下命令开始执行事务，将 id 为 3 的 name 改为 c，并插入一行当前卖出 a 的记录。",
            "obclient> START TRANSACTION;\nQuery OK, 0 rows affected\n\nobclient> UPDATE a SET name = 'c' WHERE id = 3;\nQuery OK, 1 rows affected  \n\nobclient> INSERT INTO a VALUES (4, 'a', 30, '2013-06-21 16:09:13');\nQuery OK, 1 rows affected  \n\nobclient> COMMIT;\nQuery OK, 0 rows affected\n",
            "事务提交后，执行命令查看表 a 信息。",
            "SELECT * FROM a;\n",
            "结果如下：",
            "\n\n\nid\nname\nnum\nsell_date\n\n\n\n\n1\na\n100\n2013-06-21 10:06:43\n\n\n2\nb\n200\n2013-06-21 13:07:21\n\n\n3\nc\n50\n2013-06-21 13:08:15\n\n\n4\na\n30\n2013-06-21 16:09:13\n\n\n",
            "\n注意\n\n在事务还没有 COMMIT 之前，您可以查看下本事务中的操作是否已经生效。例如，可以在 COMMIT 前执行 SQL 语句 SELECT * FROM a;。\n本事务 Session 的访问能读到最新的结果，本事务 Session 之外的访问结果肯定是没有生效，在事务还没有 COMMIT 前，之前做的操作除当前事务连接之外都是不可见的。\n如果想回滚该事务，直接用 ROLLBACK 代替 COMMIT。\n\n"
        ]
    },
    "TRUNCATE TABLE": {
        "Title": [
            "TRUNCATE TABLE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053475"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "TRUNCATE [TABLE] table_name;\n",
        "Description": [
            "该语句用于完全清空指定表，但是保留表结构，包括表中定义的 Partition 信息。从逻辑上说，该语句与用于删除所有行的 DELETE FROM 语句相同。",
            "执行 TRUNCATE 语句，必须具有表的删除（DROP）权限。它属于 DDL 语句。",
            "TRUNCATE TABLE 语句与 DELETE FROM 语句有以下不同：",
            "TRUNCATE 操作删除并重新创建表，这比逐行删除要快得多，特别是对于大表。",
            "TRUNCATE TABLE 语句执行结果显示影响行数始终显示为 0 行。",
            "使用 TRUNCATE TABLE 语句，表管理程序不记得最后被使用的 AUTO_INCREMENT 值，但是会从头开始计数。",
            "TRUNCATE 语句不能在进行事务处理和表锁定的过程中进行，如果使用，将会报错。",
            "只要表定义文件是合法的，则可以使用 TRUNCATE TABLE 把表重新创建为一个空表，即使数据或索引文件已经被破坏。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\ntable_name\n指定表名。\n\n\n"
        ],
        "Examples": [
            "obclient> TRUNCATE TABLE a;\nQuery OK, 0 rows affected\n"
        ],
        "Detailed Examples": [
            "完全清空表 a。",
            "obclient> TRUNCATE TABLE a;\nQuery OK, 0 rows affected\n"
        ]
    },
    "UNION 子句": {
        "Title": [
            "UNION 子句"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054472"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "select_clause_set:\n    select_clause_set_left [ UNION | UNION ALL | MINUS | EXCEPT | INTERSECT] select_clause_set_right\n  [sort_list_columns] [limit_clause]\n",
        "Description": [
            "该语句用于对多个 SELECT 查询的结果进行 UNION、EXCEPT或 INTERSECT 操作。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nselect_clause_set_left\nSELECT 语句，返回用于集合计算的左集合。\n\n\nselect_clause_set_right\nSELECT 语句，返回用于集合计算的右集合。\n\n\nsort_list_columns\n指定集合计算后的分组方式。\n\n\nlimit_clause\n指定集合计算后返回的行数。\n\n\nUNION ALL\n合并两个查询的结果。\n\n\nUNION\n合并两个查询的结果，并去重。\n\n\nMINUS | EXCEPT\n从左查询结果集中去重出现在右查询中的结果，并去重。 说明 MINUS 是 EXCEPT 的同义词。\n\n\nINTERSECT\n保留左查询结果集中出现在右查询中的结果，并去重。\n\n\n"
        ],
        "Examples": [
            "obclient> CREATE TABLE t1 (c1 INT, c2 INT);\nobclient> CREATE TABLE t2 (c1 INT, c2 INT);\nobclient> INSERT INTO t1 VALUES (1, -1), (2, -2);\nobclient> INSERT INTO t2 VALUES (1, 1), (2, -2), (3, 3);\n",
            "obclient> SELECT c1, c2 FROM t1 UNION ALL SELECT c1, c2 FROM t2;\n+------+------+\n| c1   | c2   |\n+------+------+\n|    1 |   -1 |\n|    2 |   -2 |\n|    1 |    1 |\n|    2 |   -2 |\n|    3 |    3 |\n+------+------+\n5 rows in set\n",
            "obclient> SELECT c1, c2 FROM t1 UNION SELECT c1, c2 FROM t2;\n+------+------+\n| c1   | c2   |\n+------+------+\n|    1 |   -1 |\n|    2 |   -2 |\n|    1 |    1 |\n|    3 |    3 |\n+------+------+\n4 rows in set  \n",
            "obclient> SELECT c1, c2 FROM t1 INTERSECT SELECT c1, c2 FROM t2;\n+------+------+\n| c1   | c2   |\n+------+------+\n|    2 |   -2 |\n+------+------+\n1 row in set\n",
            "obclient> SELECT c1, c2 FROM t1 EXCEPT SELECT c1, c2 FROM t2;\n+------+------+\n| c1   | c2   |\n+------+------+\n|    1 |   -1 |\n+------+------+\n1 row in set\n",
            "obclient> SELECT c1, c2 FROM t1 UNION SELECT c1, c2 FROM t2 ORDER BY c2 DESC LIMIT 2;\n+------+------+\n| c1   | c2   |\n+------+------+\n|    3 |    3 |\n|    1 |    1 |\n+------+------+\n2 rows in set\n"
        ],
        "Detailed Examples": [
            "以如下两表的数据为例：",
            "obclient> CREATE TABLE t1 (c1 INT, c2 INT);\nobclient> CREATE TABLE t2 (c1 INT, c2 INT);\nobclient> INSERT INTO t1 VALUES (1, -1), (2, -2);\nobclient> INSERT INTO t2 VALUES (1, 1), (2, -2), (3, 3);\n",
            "查询数据集 t1∪t2 的所有的记录。",
            "obclient> SELECT c1, c2 FROM t1 UNION ALL SELECT c1, c2 FROM t2;\n+------+------+\n| c1   | c2   |\n+------+------+\n|    1 |   -1 |\n|    2 |   -2 |\n|    1 |    1 |\n|    2 |   -2 |\n|    3 |    3 |\n+------+------+\n5 rows in set\n",
            "查询数据集 t1∪t2 的去重后的所有记录。",
            "obclient> SELECT c1, c2 FROM t1 UNION SELECT c1, c2 FROM t2;\n+------+------+\n| c1   | c2   |\n+------+------+\n|    1 |   -1 |\n|    2 |   -2 |\n|    1 |    1 |\n|    3 |    3 |\n+------+------+\n4 rows in set  \n",
            "查询 t1 与 t2 的交集。",
            "obclient> SELECT c1, c2 FROM t1 INTERSECT SELECT c1, c2 FROM t2;\n+------+------+\n| c1   | c2   |\n+------+------+\n|    2 |   -2 |\n+------+------+\n1 row in set\n",
            "查询 t1 与 t2 的差集。",
            "obclient> SELECT c1, c2 FROM t1 EXCEPT SELECT c1, c2 FROM t2;\n+------+------+\n| c1   | c2   |\n+------+------+\n|    1 |   -1 |\n+------+------+\n1 row in set\n",
            "查询 t1 和 t2 并集中按 c2 降序排序的前两行。",
            "obclient> SELECT c1, c2 FROM t1 UNION SELECT c1, c2 FROM t2 ORDER BY c2 DESC LIMIT 2;\n+------+------+\n| c1   | c2   |\n+------+------+\n|    3 |    3 |\n|    1 |    1 |\n+------+------+\n2 rows in set\n"
        ]
    },
    "UPDATE": {
        "Title": [
            "UPDATE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053468"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "UPDATE [IGNORE] table_references\n    SET update_asgn_list\n    [WHERE where_condition]\n    [ORDER BY order_list]\n    [LIMIT row_count];\n\ntable_references:\n    table_name [PARTITION (partition_name,...)] [, ...]\n\nupdate_asgn_list:\n    column_name = expr [, ...]\n\norder_list:\n    column_name [ASC|DESC] [, column_name [ASC|DESC]...]\n",
        "Description": [
            "该语句用于修改表中的字段值。"
        ],
        "Illustration": [
            "不管是多表还是单表更新都不支持直接对子查询进行更新值操作，否则会报错。示例如下：",
            "obclient> UPDATE (SELECT * FROM T1) SET C1 = 100;\nERROR 1288 (HY000): The target table  of the UPDATE is not updatable\n",
            "\n\n\n参数\n描述\n\n\n\n\nIGNORE\n在 INSERT 语句执行过程中发生的错误将会被忽略。\n\n\ntable_references\n指定修改表名，多表修改时，表名以逗号（,）分隔。\n\n\nwhere_condition\n指定过滤条件。\n\n\nrow_count\n限制的行数。\n\n\ntable_name\n插入表名。\n\n\npartition_name\n插入表指定的分区名。\n\n\ncolumn_name\n列名。\n\n\nASC\n按列名升序修改。\n\n\nDESC\n按列名降序修改。\n\n\n"
        ],
        "Examples": [
            "obclient> CREATE TABLE t1(c1 INT PRIMARY KEY, c2 INT);\nQuery OK, 0 rows affected\nobclient> SELECT * FROM t1;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  1 |    1 |\n|  2 |    2 |\n|  3 |    3 |\n|  4 |    4 |\n+----+------+\n4 rows in set\n\nobclient> CREATE TABLE t2(c1 INT PRIMARY KEY, c2 INT) PARTITION BY KEY(c1) PARTITIONS 4;\nQuery OK, 0 rows affected\nobclient> SELECT * FROM t2;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  5 |    5 |\n|  1 |    1 |\n|  2 |    2 |\n|  3 |    3 |\n+----+------+\n4 rows in set\n",
            "obclient> UPDATE t1 SET t1.c2 = 100 WHERE t1.c1 = 1;\nQuery OK, 1 row affected\nRows matched: 1  Changed: 1  Warnings: 0\n\nobclient> SELECT * FROM t1;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  1 |  100 |\n|  2 |    2 |\n|  3 |    3 |\n|  4 |    4 |\n+----+------+\n4 rows in set\n",
            "obclient> UPDATE t1 SET t1.c2 = 100 ORDER BY c2 LIMIT 2;\nQuery OK, 2 rows affected\nRows matched: 2  Changed: 2  Warnings: 0\n\nobclient> SELECT * FROM t1;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  1 |  100 |\n|  2 |  100 |\n|  3 |    3 |\n|  4 |    4 |\n+----+------+\n4 rows in set\n",
            "obclient> UPDATE t2 PARTITION(p2) SET t2.c2 = 100 WHERE t2.c1 > 2;\nQuery OK, 1 row affected\nRows matched: 1  Changed: 1  Warnings: 0\n\nobclient> SELECT * FROM t2;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  5 |    5 |\n|  1 |    1 |\n|  2 |    2 |\n|  3 |  100 |\n+----+------+\n4 rows in set\n",
            "obclient> UPDATE t1,t2 SET t1.c2 = 100, t2.c2 = 200 WHERE t1.c2 = t2.c2;\nQuery OK, 6 rows affected\nRows matched: 6  Changed: 6  Warnings: 0\n\nobclient> SELECT * FROM t1;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  1 |  100 |\n|  2 |  100 |\n|  3 |  100 |\n|  4 |    4 |\n+----+------+\n4 rows in set\n\nobclient> SELECT * FROM t2;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  5 |    5 |\n|  1 |  200 |\n|  2 |  200 |\n|  3 |  200 |\n+----+------+\n4 rows in set\n",
            "obclient> UPDATE t1,t2 PARTITION(p2) SET t1.c2 = 100, t2.c2 = 200 WHERE t1.c2 = t2.c2;\nQuery OK, 6 rows affected\nRows matched: 6  Changed: 6  Warnings: 0\n\nobclient> SELECT * FROM t1;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  1 |  100 |\n|  2 |  100 |\n|  3 |  100 |\n|  4 |    4 |\n+----+------+\n4 rows in set\n\nobclient> SELECT * FROM t2;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  5 |    5 |\n|  1 |  200 |\n|  2 |  200 |\n|  3 |  200 |\n+----+------+\n4 rows in set\n",
            "obclient> CREATE VIEW v AS SELECT * FROM t1;\nQuery OK, 0 rows affected\n\nobclient> UPDATE v SET v.c2 = 100 WHERE v.c1 = 1;\nQuery OK, 1 row affected\nRows matched: 1  Changed: 1  Warnings: 0\n\nobclient> SELECT * FROM v;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  1 |  100 |\n|  2 |    2 |\n|  3 |    3 |\n|  4 |    4 |\n+----+------+\n4 rows in set\n"
        ],
        "Detailed Examples": [
            "创建示例表 t1 和 t2。",
            "obclient> CREATE TABLE t1(c1 INT PRIMARY KEY, c2 INT);\nQuery OK, 0 rows affected\nobclient> SELECT * FROM t1;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  1 |    1 |\n|  2 |    2 |\n|  3 |    3 |\n|  4 |    4 |\n+----+------+\n4 rows in set\n\nobclient> CREATE TABLE t2(c1 INT PRIMARY KEY, c2 INT) PARTITION BY KEY(c1) PARTITIONS 4;\nQuery OK, 0 rows affected\nobclient> SELECT * FROM t2;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  5 |    5 |\n|  1 |    1 |\n|  2 |    2 |\n|  3 |    3 |\n+----+------+\n4 rows in set\n",
            "将表 t1 中 t1.c1=1 对应的那一行数据的 c2 列值修改为 100。",
            "obclient> UPDATE t1 SET t1.c2 = 100 WHERE t1.c1 = 1;\nQuery OK, 1 row affected\nRows matched: 1  Changed: 1  Warnings: 0\n\nobclient> SELECT * FROM t1;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  1 |  100 |\n|  2 |    2 |\n|  3 |    3 |\n|  4 |    4 |\n+----+------+\n4 rows in set\n",
            "将表 t1 中按照 c2 列排序的前两行数据的 c2 列值修改为 100。",
            "obclient> UPDATE t1 SET t1.c2 = 100 ORDER BY c2 LIMIT 2;\nQuery OK, 2 rows affected\nRows matched: 2  Changed: 2  Warnings: 0\n\nobclient> SELECT * FROM t1;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  1 |  100 |\n|  2 |  100 |\n|  3 |    3 |\n|  4 |    4 |\n+----+------+\n4 rows in set\n",
            "将表 t2 中 p2 分区的数据中 t2.c1 > 2 的对应行数据的 c2 列值修改为 100。",
            "obclient> UPDATE t2 PARTITION(p2) SET t2.c2 = 100 WHERE t2.c1 > 2;\nQuery OK, 1 row affected\nRows matched: 1  Changed: 1  Warnings: 0\n\nobclient> SELECT * FROM t2;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  5 |    5 |\n|  1 |    1 |\n|  2 |    2 |\n|  3 |  100 |\n+----+------+\n4 rows in set\n",
            "修改多个表，将 t1 表和 t2 表中满足t1.c1 = t2.c1 对应行的数据 t1 表中的 c2 列值修改为 100，t2 表中的 c2 列值修改为 200。",
            "obclient> UPDATE t1,t2 SET t1.c2 = 100, t2.c2 = 200 WHERE t1.c2 = t2.c2;\nQuery OK, 6 rows affected\nRows matched: 6  Changed: 6  Warnings: 0\n\nobclient> SELECT * FROM t1;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  1 |  100 |\n|  2 |  100 |\n|  3 |  100 |\n|  4 |    4 |\n+----+------+\n4 rows in set\n\nobclient> SELECT * FROM t2;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  5 |    5 |\n|  1 |  200 |\n|  2 |  200 |\n|  3 |  200 |\n+----+------+\n4 rows in set\n",
            "修改多个表。修改 t1 表和 t2 表的 p2 分区中满足 t1.c1 = t2.c1 对应行的数据 t1 表中的 c2 列值修改为 100，t2 表中的 c2 列值修改为 200。",
            "obclient> UPDATE t1,t2 PARTITION(p2) SET t1.c2 = 100, t2.c2 = 200 WHERE t1.c2 = t2.c2;\nQuery OK, 6 rows affected\nRows matched: 6  Changed: 6  Warnings: 0\n\nobclient> SELECT * FROM t1;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  1 |  100 |\n|  2 |  100 |\n|  3 |  100 |\n|  4 |    4 |\n+----+------+\n4 rows in set\n\nobclient> SELECT * FROM t2;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  5 |    5 |\n|  1 |  200 |\n|  2 |  200 |\n|  3 |  200 |\n+----+------+\n4 rows in set\n",
            "对可更新视图 v 进行更新值。",
            "obclient> CREATE VIEW v AS SELECT * FROM t1;\nQuery OK, 0 rows affected\n\nobclient> UPDATE v SET v.c2 = 100 WHERE v.c1 = 1;\nQuery OK, 1 row affected\nRows matched: 1  Changed: 1  Warnings: 0\n\nobclient> SELECT * FROM v;\n+----+------+\n| c1 | c2   |\n+----+------+\n|  1 |  100 |\n|  2 |    2 |\n|  3 |    3 |\n|  4 |    4 |\n+----+------+\n4 rows in set\n"
        ]
    },
    "USE": {
        "Title": [
            "USE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053457"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "USE database_name\n",
        "Description": [
            "该语句用于切换使用的数据库。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\ndatabase_name\n使用的数据库名称。\n\n\n"
        ],
        "Examples": [
            "obclient> USE test\nDatabase changed\n"
        ],
        "Detailed Examples": [
            "切换当前的数据库。",
            "obclient> USE test\nDatabase changed\n"
        ]
    },
    "VALUES": {
        "Title": [
            "VALUES"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001053480"
        ],
        "Category": [
            "No Category"
        ],
        "Feature": "VALUES row_constructor_list [ORDER BY column_designator] [LIMIT number]\n\nrow_constructor_list:\n    ROW(value_list)[, ROW(value_list)][, ...]\n\nvalue_list:\n    value[, value][, ...]\n\ncolumn_designator:\n    column_index\n",
        "Description": [
            "该语句用于返回一组单行或多行数据作为表。",
            "VALUES 是一个表值构造函数，也可用作独立的 SQL 语句与 UNION、EXCEPT 和 INTERSECT 等结合使用。"
        ],
        "Illustration": [
            "\n\n\n参数\n描述\n\n\n\n\nrow_constructor_list\n行构造函数的列表，由 ROW() 行构造函数子句组成，以逗号分隔。ROW() 不能为空，但其包含在括号中每个标量值都可以为 NULL。\n\n\nvalue_list\n一个或多个标量值的列表。标量值可以是字面量或解析为标量值的表达式。同一 VALUES 语句中的每个 ROW() 所包含的 value_list 中必须具有相同数量的值。\n\n\ncolumn_designator\n指定列，列的命名规则为 column_0，column_1，…。使用可选的 ORDER BY 子句按该指定列对行进行排序。\n\n\n"
        ],
        "Examples": [
            "obclient> VALUES ROW(4,6,8), ROW(5,7,9), ROW(1,-2,3) ORDER BY column_0;\n",
            "+----------+----------+----------+\n| column_0 | column_1 | column_2 |\n+----------+----------+----------+\n|        1 |       -2 |        3 |\n|        4 |        6 |        8 |\n|        5 |        7 |        9 |\n+----------+----------+----------+\n3 rows in set\n",
            "obclient> VALUES ROW(\"q\", 23, '2022-12-18'),  ROW(87, \"x+z\", 92.6), ROW(25.0009, \"Well Smith\", '{\"a\": 11, \"b\": 55}');\n",
            "+----------+------------+--------------------+\n| column_0 | column_1   | column_2           |\n+----------+------------+--------------------+\n| q        | 23         | 2022-12-18         |\n| 87       | x+z        | 92.6               |\n| 25.0009  | Well Smith | {\"a\": 11, \"b\": 55} |\n+----------+------------+--------------------+\n",
            "obclient> SELECT 11,22 UNION SELECT 33,44;\n+------+------+\n| 11   | 22   |\n+------+------+\n|   11 |   22 |\n|   33 |   44 |\n+------+------+\n2 rows in set\n\nobclient> VALUES ROW(11,22) UNION VALUES ROW(33,44);\n",
            "+----------+----------+\n| column_0 | column_1 |\n+----------+----------+\n|       11 |       22 |\n|       33 |       44 |\n+----------+----------+\n2 rows in set"
        ],
        "Detailed Examples": [
            "使用 VALUES 输出是一张表并按指定列 column_0 排序。",
            "obclient> VALUES ROW(4,6,8), ROW(5,7,9), ROW(1,-2,3) ORDER BY column_0;\n",
            "示例的输出结果如下：",
            "+----------+----------+----------+\n| column_0 | column_1 | column_2 |\n+----------+----------+----------+\n|        1 |       -2 |        3 |\n|        4 |        6 |        8 |\n|        5 |        7 |        9 |\n+----------+----------+----------+\n3 rows in set\n",
            "VALUES 语句支持同一列中的数据为混合数据类型。",
            "obclient> VALUES ROW(\"q\", 23, '2022-12-18'),  ROW(87, \"x+z\", 92.6), ROW(25.0009, \"Well Smith\", '{\"a\": 11, \"b\": 55}');\n",
            "示例的输出结果如下：",
            "+----------+------------+--------------------+\n| column_0 | column_1   | column_2           |\n+----------+------------+--------------------+\n| q        | 23         | 2022-12-18         |\n| 87       | x+z        | 92.6               |\n| 25.0009  | Well Smith | {\"a\": 11, \"b\": 55} |\n+----------+------------+--------------------+\n",
            "VALUES 与 UNION 一起使用，功能等效于 SELECT。",
            "obclient> SELECT 11,22 UNION SELECT 33,44;\n+------+------+\n| 11   | 22   |\n+------+------+\n|   11 |   22 |\n|   33 |   44 |\n+------+------+\n2 rows in set\n\nobclient> VALUES ROW(11,22) UNION VALUES ROW(33,44);\n",
            "示例的输出结果如下：",
            "+----------+----------+\n| column_0 | column_1 |\n+----------+----------+\n|       11 |       22 |\n|       33 |       44 |\n+----------+----------+\n2 rows in set"
        ]
    }
}