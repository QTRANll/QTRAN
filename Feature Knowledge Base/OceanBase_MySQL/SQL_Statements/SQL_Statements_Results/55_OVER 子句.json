{
    "HTML": [
        "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000001054474"
    ],
    "Title": [
        "OVER 子句"
    ],
    "Feature": [
        " [query_partition_clause] [ order_by_clause [win_window]]\n\nwin_window:\n    {ROWS | RANGE} BETWEEN win_bouding AND win_bouding\n  | {ROWS | RANGE} win_bouding\n\nwin_bouding:\n    CURRENT ROW\n  | win_interval {PRECEDING | FOLLOWING}\n\nwin_internal:\n   expr | INTERVAL expr date_unit\n\ndate_unit:\n    DAY\n  | DAY_HOUR\n  | DAY_MICROSECOND\n  | DAY_MINUTE\n  | DAY_SECOND\n  | HOUR\n  | HOUR_MICROSECOND\n  | HOUR_MINUTE\n  | HOUR_SECOND\n  | MICROSECOND\n  | MINUTE\n  | MINUTE_MICROSECOND\n  | MINUTE_SECOND\n  | MONTH\n  | QUARTER\n  | SECOND\n  | SECOND_MICROSECOND\n  | WEEK\n  | YEAR\n  | YEAR_MONTH\n"
    ],
    "Description": [
        "OVER 子句用于定义\"窗口\"。",
        "\"窗口\"也称为 Frame，OceanBase 数据库同时支持 ROWS 与 RANGE 两种 Frame 语义，前者是基于物理行偏移的窗口，后者则是基于逻辑值偏移的窗口。",
        "适用于 OVER 子句的函数称为分析函数（某些数据库下也叫做窗口函数），有关分析函数的详细信息，请参见 分析函数 章节。",
        "\n\n\n参数\n描述\n\n\n\n\nROWS\n使用物理窗口，根据 ORDER BY 子句排序后，取的前 N 行及后 N 行的数据计算。\n\n\nRANGE\n使用逻辑窗口，指定当前行对应值的范围取值。\n\n\nCURRENT ROW\n使用当前行作为窗口的边界。\n\n\nwin_interval PRECEDING | FOLLOWING\n指定窗口边界。 \n      \nwin_interval：边界的行数。\nPRECEDING：使用前 N 行。\nFOLLOWING：使用后 N 行。\n\n\n\nINTERVAL expr date_unit\n指定窗口间隔。 \n      \nexpr：用于指定间隔行数。\ndate_unit 用于指定 expr 的单位。\n\n\n\n"
    ],
    "Examples": [
        "obclient> CREATE TABLE employees (manager_id INT,last_name VARCHAR(50),hiredate VARCHAR(50),salary INT);\nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-01', 1700);\nINSERT INTO employees VALUES(100, 'De Haan', '2018-05-01',11000);      \nINSERT INTO employees VALUES(100, 'Errazuriz', '2017-07-21', 1400);\nINSERT INTO employees VALUES(100, 'Hartstein', '2019-05-01',14000);     \nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-22', 1700);\nINSERT INTO employees VALUES(100, 'Weiss',  '2019-07-11',13500);     \nINSERT INTO employees VALUES(100, 'Russell', '2019-10-05', 13000);\nINSERT INTO employees VALUES(100, 'Partners',  '2018-12-01',14000);     \nINSERT INTO employees VALUES(200, 'Ross',  '2019-06-11',13500);     \nINSERT INTO employees VALUES(200, 'Bell', '2019-05-25', 13000);\nINSERT INTO employees VALUES(200, 'Part',  '2018-08-11',14000);  \nCOMMIT;\n",
        "obclient> SELECT last_name, salary, APPROX_COUNT_DISTINCT(salary) OVER (ORDER BY hiredate) \"Variance\"\nFROM employees WHERE manager_id = 100 ORDER BY last_name, salary, \"Variance\";\n+-----------+--------+----------+\n| LAST_NAME | SALARY | Variance |\n+-----------+--------+----------+\n| De Haan   |  11000 |        3 |\n| Errazuriz |   1400 |        2 |\n| Hartstein |  14000 |        4 |\n| Partners  |  14000 |        4 |\n| Raphaely  |   1700 |        1 |\n| Raphaely  |   1700 |        2 |\n| Russell   |  13000 |        6 |\n| Weiss     |  13500 |        5 |\n+-----------+--------+----------+\n"
    ],
    "Category": [
        "No Category"
    ]
}