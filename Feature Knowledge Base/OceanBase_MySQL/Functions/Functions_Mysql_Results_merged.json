{
    "ABS": {
        "Title": [
            "ABS"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823339"
        ],
        "Category": [
            "Mathematical Functions"
        ],
        "Feature": "ABS(expr)\n",
        "Description": [],
        "Illustration": [
            "绝对值函数，求表达式绝对值，函数返回值类型与数值表达式的数据类型相同。",
            "支持比较运算，结果为 BOOL 值，被转化为数字类型处理，产生的结果为 1(TRUE)、0 (FALSE)。",
            "如果输入 NULL，返回值为 NULL。",
            "如果输入纯数字的字符串，支持自动转换成数字类型。返回值会被转化为一个 BIGINT。"
        ],
        "Examples": [
            "obclient> SELECT ABS(5), ABS(-5.777), ABS(0), ABS(1/2), ABS(1-5);\n+--------+-------------+--------+----------+----------+\n| ABS(5) | ABS(-5.777) | ABS(0) | ABS(1/2) | ABS(1-5) |\n+--------+-------------+--------+----------+----------+\n|      5 |       5.777 |      0 |   0.5000 |        4 |\n+--------+-------------+--------+----------+----------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT ABS(5), ABS(-5.777), ABS(0), ABS(1/2), ABS(1-5);\n+--------+-------------+--------+----------+----------+\n| ABS(5) | ABS(-5.777) | ABS(0) | ABS(1/2) | ABS(1-5) |\n+--------+-------------+--------+----------+----------+\n|      5 |       5.777 |      0 |   0.5000 |        4 |\n+--------+-------------+--------+----------+----------+\n1 row in set\n"
        ]
    },
    "ACOS": {
        "Title": [
            "ACOS"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823330"
        ],
        "Category": [
            "Mathematical Functions"
        ],
        "Feature": "ACOS(X)\n",
        "Description": [],
        "Illustration": [
            "返回 X 的反余弦值，即余弦为 X 的值。如果 X 的取值不在 [-1,1] 区间内，该函数返回 NULL。"
        ],
        "Examples": [
            "obclient> SELECT ACOS(-10), ACOS(0), ACOS(10), ACOS(-0.5), ACOS(0.5);\n+-----------+--------------------+----------+--------------------+--------------------+\n| ACOS(-10) | ACOS(0)            | ACOS(10) | ACOS(-0.5)         | ACOS(0.5)          |\n+-----------+--------------------+----------+--------------------+--------------------+\n|      NULL | 1.5707963267948966 |     NULL | 2.0943951023931957 | 1.0471975511965979 |\n+-----------+--------------------+----------+--------------------+--------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT ACOS(-10), ACOS(0), ACOS(10), ACOS(-0.5), ACOS(0.5);\n+-----------+--------------------+----------+--------------------+--------------------+\n| ACOS(-10) | ACOS(0)            | ACOS(10) | ACOS(-0.5)         | ACOS(0.5)          |\n+-----------+--------------------+----------+--------------------+--------------------+\n|      NULL | 1.5707963267948966 |     NULL | 2.0943951023931957 | 1.0471975511965979 |\n+-----------+--------------------+----------+--------------------+--------------------+\n1 row in set\n"
        ]
    },
    "ADDDATE": {
        "Title": [
            "ADDDATE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823412"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "ADDDATE(date,INTERVAL expr unit)\nADDDATE(expr,days)\n",
        "Description": [],
        "Illustration": [
            "该函数的第一种声明是 DATE_ADD() 的同义词。有关 unit 参数的详细信息，请参见 DATE_ADD。",
            "该函数的第二种声明用于将 days 指定的天数与 expr 指定的日期相加。"
        ],
        "Examples": [
            "obclient> SELECT ADDDATE('2021-08-01', INTERVAL 31 DAY);\n+----------------------------------------+\n| ADDDATE('2021-08-01', INTERVAL 31 DAY) |\n+----------------------------------------+\n| 2021-09-01                             |\n+----------------------------------------+\n1 row in set\n\nobclient> SELECT ADDDATE('2021-08-01', 31);\n+---------------------------+\n| ADDDATE('2021-08-01', 31) |\n+---------------------------+\n| 2021-09-01                |\n+---------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT ADDDATE('2021-08-01', INTERVAL 31 DAY);\n+----------------------------------------+\n| ADDDATE('2021-08-01', INTERVAL 31 DAY) |\n+----------------------------------------+\n| 2021-09-01                             |\n+----------------------------------------+\n1 row in set\n\nobclient> SELECT ADDDATE('2021-08-01', 31);\n+---------------------------+\n| ADDDATE('2021-08-01', 31) |\n+---------------------------+\n| 2021-09-01                |\n+---------------------------+\n1 row in set\n"
        ]
    },
    "ADDTIME": {
        "Title": [
            "ADDTIME"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823373"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "ADDTIME(expr1,expr2)\n",
        "Description": [],
        "Illustration": [
            "expr1 是时间或日期时间表达式，而 expr2 是时间表达式。ADDTIME() 将 expr2 添加到 expr1 并返回结果。"
        ],
        "Examples": [
            "obclient> SELECT ADDTIME('2022-09-08 23:59:59.999999', '1 1:1:1.000002');\n+---------------------------------------------------------+\n| ADDTIME('2022-09-08 23:59:59.999999', '1 1:1:1.000002') |\n+---------------------------------------------------------+\n| 2022-09-10 01:01:01.000001                              |\n+---------------------------------------------------------+\n1 row in set\n\nobclient> SELECT ADDTIME('01:10:01.999999', '02:01:10.999998');\n+-----------------------------------------------+\n| ADDTIME('01:10:01.999999', '02:01:10.999998') |\n+-----------------------------------------------+\n| 03:11:12.999997                               |\n+-----------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT ADDTIME('2022-09-08 23:59:59.999999', '1 1:1:1.000002');\n+---------------------------------------------------------+\n| ADDTIME('2022-09-08 23:59:59.999999', '1 1:1:1.000002') |\n+---------------------------------------------------------+\n| 2022-09-10 01:01:01.000001                              |\n+---------------------------------------------------------+\n1 row in set\n\nobclient> SELECT ADDTIME('01:10:01.999999', '02:01:10.999998');\n+-----------------------------------------------+\n| ADDTIME('01:10:01.999999', '02:01:10.999998') |\n+-----------------------------------------------+\n| 03:11:12.999997                               |\n+-----------------------------------------------+\n1 row in set\n"
        ]
    },
    "AES_DECRYPT": {
        "Title": [
            "AES_DECRYPT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822988"
        ],
        "Category": [
            "Encryption Functions"
        ],
        "Feature": "AES_DECRYPT(crypt_str,key_str[,init_vector])\n",
        "Description": [],
        "Illustration": [
            "根据密钥 key_str 返回密文 crypt_str 进行 AES 解密的明文。",
            "有关 init_vector 参数的详细信息，请参见 AES_ENCRYPT。"
        ],
        "Examples": [
            "obclient> SELECT AES_DECRYPT(AES_ENCRYPT('oceanbase',UNHEX('F3229A0B371ED2D9441B830D21A390C3')),UNHEX('F3229A0B371ED2D9441B830D21A390C3'));\n+---------------------------------------------------------------------------------------------------------------------------+\n| AES_DECRYPT(AES_ENCRYPT('oceanbase',UNHEX('F3229A0B371ED2D9441B830D21A390C3')),UNHEX('F3229A0B371ED2D9441B830D21A390C3')) |\n+---------------------------------------------------------------------------------------------------------------------------+\n| oceanbase                                                                                                                 |\n+---------------------------------------------------------------------------------------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT AES_DECRYPT(AES_ENCRYPT('oceanbase',UNHEX('F3229A0B371ED2D9441B830D21A390C3')),UNHEX('F3229A0B371ED2D9441B830D21A390C3'));\n+---------------------------------------------------------------------------------------------------------------------------+\n| AES_DECRYPT(AES_ENCRYPT('oceanbase',UNHEX('F3229A0B371ED2D9441B830D21A390C3')),UNHEX('F3229A0B371ED2D9441B830D21A390C3')) |\n+---------------------------------------------------------------------------------------------------------------------------+\n| oceanbase                                                                                                                 |\n+---------------------------------------------------------------------------------------------------------------------------+\n1 row in set\n"
        ]
    },
    "AES_ENCRYPT": {
        "Title": [
            "AES_ENCRYPT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822999"
        ],
        "Category": [
            "Encryption Functions"
        ],
        "Feature": "AES_ENCRYPT(str,key_str[,init_vector])\n",
        "Description": [],
        "Illustration": [
            "使用密钥字符串 key_str 对字符串 str 进行加密并返回加密后的二进制字符串。str 没有长度限制，该函数会将 str 自动填充至加密块的整数倍。密文长度的计算公式为：",
            "16 * (trunc(string_length / 16) + 1)\n",
            "如果任一函数参数为 NULL，则该函数返回 NULL。",
            "AES_ENCRYPT()使用官方 AES（Advanced Encryption Standard）算法实现数据的加密。AES 标准允许使用各种密钥长度，默认为 128 位。也可以使用 196 或 256 位的密钥长度。密钥长度越长，安全性越高，但加密速度降低。 AES_ENCRYPT() 与 AES_DECRYPT() 函数可通过初始化向量控制块加密模式：",
            "block_encryption_mode 系统变量用于控制基于块的加密算法的模式。默认值为 aes-128-ecb，表示使用 128 位密钥长度和 ECB 模式进行加密。",
            "init_vector 参数表示初始化向量：",
            "\n当加密模式需要设置 init_vector 参数时，其长度必须是 16 字节及以上（超过 16 的字节将被忽略）。如果缺少 init_vector，则会发生错误。\n当加密模式不需要设置 init_vector 参数时，则该参数会被忽略。\n",
            "对于需要初始化向量的加密模式，加密和解密必须使用相同的向量。",
            "obclient> SET block_encryption_mode = 'aes-256-cbc';\nobclient> SET @key_str ='My secret passphrase';\nobclient> SET @init_vector = '1111111111111111';\nobclient> SET @crypt_str = AES_ENCRYPT('text',@key_str,@init_vector);\nobclient> SELECT AES_DECRYPT(@crypt_str,@key_str,@init_vector);\n+-----------------------------------------------+\n| AES_DECRYPT(@crypt_str,@key_str,@init_vector) |\n+-----------------------------------------------+\n| text                                          |\n+-----------------------------------------------+\n1 row in set\n",
            "下表列出了块加密模式、支持的 SSL 库以及是否需要初始化向量参数的详细信息。",
            "\n\n\n块加密模式\n支持的 SSL 库\n是否需要初始化向量\n\n\n\n\nECB\nOpenSSL\n否\n\n\nCBC\nOpenSSL\n是\n\n\nCFB1\nOpenSSL\n是\n\n\nCFB8\nOpenSSL\n是\n\n\nCFB128\nOpenSSL\n是\n\n\nOFB\nOpenSSL\n是\n\n\n",
            "当加密模式需要设置 init_vector 参数时，其长度必须是 16 字节及以上（超过 16 的字节将被忽略）。如果缺少 init_vector，则会发生错误。",
            "当加密模式不需要设置 init_vector 参数时，则该参数会被忽略。"
        ],
        "Examples": [
            "obclient> SET @pass=AES_ENCRYPT('hello world', 'key','1111111111111111');\nQuery OK, 0 rows affected\n",
            "obclient> SELECT CHAR_LENGTH(@pass);\n+--------------------+\n| CHAR_LENGTH(@pass) |\n+--------------------+\n|                 16 |\n+--------------------+\n1 row in set\n",
            "obclient> SELECT AES_DECRYPT(@pass, 'key');\nERROR 1582 (42000): Incorrect parameter count\nobclient> SELECT AES_DECRYPT(@pass, 'key','1111111111111111');\n+----------------------------------------------+\n| AES_DECRYPT(@pass, 'key','1111111111111111') |\n+----------------------------------------------+\n| hello world                                  |\n+----------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "将 'hello world' 加密，密钥为 'key'，加密后的串保存于 @pass 中。",
            "obclient> SET @pass=AES_ENCRYPT('hello world', 'key','1111111111111111');\nQuery OK, 0 rows affected\n",
            "查看加密后串的长度（都为 2 的整数次方）。",
            "obclient> SELECT CHAR_LENGTH(@pass);\n+--------------------+\n| CHAR_LENGTH(@pass) |\n+--------------------+\n|                 16 |\n+--------------------+\n1 row in set\n",
            "使用 AES_DECRYPT() 解密。",
            "obclient> SELECT AES_DECRYPT(@pass, 'key');\nERROR 1582 (42000): Incorrect parameter count\nobclient> SELECT AES_DECRYPT(@pass, 'key','1111111111111111');\n+----------------------------------------------+\n| AES_DECRYPT(@pass, 'key','1111111111111111') |\n+----------------------------------------------+\n| hello world                                  |\n+----------------------------------------------+\n1 row in set\n"
        ]
    },
    "ANY_VALUE": {
        "Title": [
            "ANY_VALUE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822953"
        ],
        "Category": [
            "Miscellaneous Functions"
        ],
        "Feature": "ANY_VALUE(arg)\n",
        "Description": [],
        "Illustration": [
            "当 sql_mode 启用 ONLY_FULL_GROUP_BY SQL 模式时，此函数用于运行非 FULL GROUP BY 的操作，抑制 ONLY_FULL_GROUP_BY 值被拒绝。",
            "ANY_VALUE() 会选择被分到同一分组的数据里第一条数据的指定列值作为返回数据。函数的返回值和类型与其参数的返回值和类型相同。",
            "如下示例中，如果 name 是非索引列，当启用 ONLY_FULL_GROUP_BY SQL 模式时，则 GROUP BY 查询将失败，这是因为 city 是一个非聚合列，因此每个 name 组中的 city 值是不确定的。",
            "obclient> CREATE TABLE tbl1(name VARCHAR(20),age VARCHAR(10),city VARCHAR(50));\nobclient> INSERT INTO tbl1 VALUES ('Alex',20,'BeiJing'),('Jim',25,'HangZhou'),('Blair',35,'NanJing');\nobclient>  SET sql_mode='ONLY_FULL_GROUP_BY';\nQuery OK, 0 rows affected\n\nobclient>  SELECT name, city, MAX(age) FROM tbl1 GROUP BY name;\nERROR 1055 (42000): 'test.tbl1.city' is not in GROUP BY\n",
            "一种解决办法是可以更改表以使 name 成为主键或唯一的 NOT NULL 列，这使得 city 由 name 来唯一确定（如果必须允许 NULL 作为有效 name 值，则此方法不适用）。",
            "另一种解决方法是使用 ANY_VALUE() 来引用 city，这样会忽略每个 name 组内 city 值的不确定性并接受查询。ANY_VALUE() 不是聚合函数，它只是起到抑制非确定性测试的作用。",
            "obclient> SELECT name, ANY_VALUE(city), MAX(age) FROM tbl1 GROUP BY name;\n+-------+-----------------+----------+\n| name  | ANY_VALUE(city) | MAX(age) |\n+-------+-----------------+----------+\n| Alex  | BeiJing         | 20       |\n| Jim   | HangZhou        | 25       |\n| Blair | NanJing         | 35       |\n+-------+-----------------+----------+\n3 rows in set\n",
            "还有一种方法是禁用 ONLY_FULL_GROUP_BY。这相当于在启用 ONLY_FULL_GROUP_BY 的情况下使用 ANY_VALUE()，如上所述。"
        ],
        "Examples": [
            "obclient> SELECT name, MAX(age) FROM tbl1;\nERROR 1140 (42000): Mixing of GROUP columns (MIN(),MAX(),COUNT(),...) with no GROUP columns is illegal if there is no GROUP BY clause\nobclient> SELECT ANY_VALUE(name), MAX(age) FROM tbl1;\n+-----------------+----------+\n| ANY_VALUE(name) | MAX(age) |\n+-----------------+----------+\n| Alex            | 35       |\n+-----------------+----------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "在没有 GROUP BY 子句时，则在只有一个分组的情况下为该分组选择哪个 name 值是不确定的，所以查询失败。而 ANY_VALUE() 可以规避此问题并使数据库接受引用聚合函数的查询。",
            "obclient> SELECT name, MAX(age) FROM tbl1;\nERROR 1140 (42000): Mixing of GROUP columns (MIN(),MAX(),COUNT(),...) with no GROUP columns is illegal if there is no GROUP BY clause\nobclient> SELECT ANY_VALUE(name), MAX(age) FROM tbl1;\n+-----------------+----------+\n| ANY_VALUE(name) | MAX(age) |\n+-----------------+----------+\n| Alex            | 35       |\n+-----------------+----------+\n1 row in set\n"
        ]
    },
    "APPROX_COUNT_DISTINCT": {
        "Title": [
            "APPROX_COUNT_DISTINCT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823028"
        ],
        "Category": [
            "Aggregate Functions",
            "Analysis Functions"
        ],
        "Feature": "APPROX_COUNT_DISTINCT(expr)\n",
        "Description": [],
        "Illustration": [
            "对表达式 expr 去重后的行数进行计算，结果只能返回一个值，且该值是近似值，该函数可以进一步用于计算被引用的列的选择性。"
        ],
        "Examples": [
            "obclient> CREATE TABLE employees (manager_id INT,last_name varchar(50),hiredate varchar(50),SALARY INT);\nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-01', 1700);\nINSERT INTO employees VALUES(100, 'De Haan', '2018-05-01',11000);      \nINSERT INTO employees VALUES(100, 'Errazuriz', '2017-07-21', 1400);\nINSERT INTO employees VALUES(100, 'Hartstein', '2019-05-01',14000);     \nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-22', 1700);\nINSERT INTO employees VALUES(100, 'Weiss',  '2019-07-11',13500);     \nINSERT INTO employees VALUES(100, 'Russell', '2019-10-05', 13000);\nINSERT INTO employees VALUES(100, 'Partners',  '2018-12-01',14000);     \nINSERT INTO employees VALUES(200, 'Ross',  '2019-06-11',13500);     \nINSERT INTO employees VALUES(200, 'Bell', '2019-05-25', 13000);\nINSERT INTO employees VALUES(200, 'Part',  '2018-08-11',14000);  \nCOMMIT;\n\nobclient> SELECT last_name, salary, APPROX_COUNT_DISTINCT(salary) OVER (ORDER BY hiredate) \"Variance\" FROM employees WHERE manager_id = 100 ORDER BY last_name, salary, \"Variance\";\n+-----------+--------+----------+\n| last_name | salary | Variance |\n+-----------+--------+----------+\n| De Haan   |  11000 |        3 |\n| Errazuriz |   1400 |        2 |\n| Hartstein |  14000 |        4 |\n| Partners  |  14000 |        4 |\n| Raphaely  |   1700 |        1 |\n| Raphaely  |   1700 |        2 |\n| Russell   |  13000 |        6 |\n| Weiss     |  13500 |        5 |\n+-----------+--------+----------+\n"
        ],
        "Detailed Examples": [
            "obclient> CREATE TABLE employees (manager_id INT,last_name varchar(50),hiredate varchar(50),SALARY INT);\nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-01', 1700);\nINSERT INTO employees VALUES(100, 'De Haan', '2018-05-01',11000);      \nINSERT INTO employees VALUES(100, 'Errazuriz', '2017-07-21', 1400);\nINSERT INTO employees VALUES(100, 'Hartstein', '2019-05-01',14000);     \nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-22', 1700);\nINSERT INTO employees VALUES(100, 'Weiss',  '2019-07-11',13500);     \nINSERT INTO employees VALUES(100, 'Russell', '2019-10-05', 13000);\nINSERT INTO employees VALUES(100, 'Partners',  '2018-12-01',14000);     \nINSERT INTO employees VALUES(200, 'Ross',  '2019-06-11',13500);     \nINSERT INTO employees VALUES(200, 'Bell', '2019-05-25', 13000);\nINSERT INTO employees VALUES(200, 'Part',  '2018-08-11',14000);  \nCOMMIT;\n\nobclient> SELECT last_name, salary, APPROX_COUNT_DISTINCT(salary) OVER (ORDER BY hiredate) \"Variance\" FROM employees WHERE manager_id = 100 ORDER BY last_name, salary, \"Variance\";\n+-----------+--------+----------+\n| last_name | salary | Variance |\n+-----------+--------+----------+\n| De Haan   |  11000 |        3 |\n| Errazuriz |   1400 |        2 |\n| Hartstein |  14000 |        4 |\n| Partners  |  14000 |        4 |\n| Raphaely  |   1700 |        1 |\n| Raphaely  |   1700 |        2 |\n| Russell   |  13000 |        6 |\n| Weiss     |  13500 |        5 |\n+-----------+--------+----------+\n"
        ]
    },
    "ASCII": {
        "Title": [
            "ASCII"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823468"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "ASCII(str)\n",
        "Description": [],
        "Illustration": [
            "返回字符串 str 最左侧字符的 ASCII 码。",
            "如果 str 为空字符串，则该函数返回 0。如果 str 为 NULL，则该函数返回 NULL。"
        ],
        "Examples": [
            "obclient> SELECT ASCII('');\n+-----------+\n| ASCII('') |\n+-----------+\n|         0 |\n+-----------+\n1 row in set\n\nobclient> SELECT ASCII('oceanbase');\n+--------------------+\n| ASCII('oceanbase') |\n+--------------------+\n|                111 |\n+--------------------+\n1 row in set\n\nobclient> SELECT ASCII('Oceanbase');\n+--------------------+\n| ASCII('Oceanbase') |\n+--------------------+\n|                 79 |\n+--------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT ASCII('');\n+-----------+\n| ASCII('') |\n+-----------+\n|         0 |\n+-----------+\n1 row in set\n\nobclient> SELECT ASCII('oceanbase');\n+--------------------+\n| ASCII('oceanbase') |\n+--------------------+\n|                111 |\n+--------------------+\n1 row in set\n\nobclient> SELECT ASCII('Oceanbase');\n+--------------------+\n| ASCII('Oceanbase') |\n+--------------------+\n|                 79 |\n+--------------------+\n1 row in set\n"
        ]
    },
    "ASIN": {
        "Title": [
            "ASIN"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823337"
        ],
        "Category": [
            "Mathematical Functions"
        ],
        "Feature": "ASIN(X)\n",
        "Description": [],
        "Illustration": [
            "返回 X 的反正弦值，即正弦为 X 的值。如果 X 的取值不在 [-1,1] 区间内，该函数返回 NULL。"
        ],
        "Examples": [
            "obclient> SELECT ASIN(-10), ASIN(0), ASIN(10), ASIN(-0.5), ASIN(0.5);\n+-----------+---------+----------+---------------------+--------------------+\n| ASIN(-10) | ASIN(0) | ASIN(10) | ASIN(-0.5)          | ASIN(0.5)          |\n+-----------+---------+----------+---------------------+--------------------+\n|      NULL |       0 |     NULL | -0.5235987755982989 | 0.5235987755982989 |\n+-----------+---------+----------+---------------------+--------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT ASIN(-10), ASIN(0), ASIN(10), ASIN(-0.5), ASIN(0.5);\n+-----------+---------+----------+---------------------+--------------------+\n| ASIN(-10) | ASIN(0) | ASIN(10) | ASIN(-0.5)          | ASIN(0.5)          |\n+-----------+---------+----------+---------------------+--------------------+\n|      NULL |       0 |     NULL | -0.5235987755982989 | 0.5235987755982989 |\n+-----------+---------+----------+---------------------+--------------------+\n1 row in set\n"
        ]
    },
    "ATAN": {
        "Title": [
            "ATAN"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823354"
        ],
        "Category": [
            "Mathematical Functions"
        ],
        "Feature": "ATAN(X)\n",
        "Description": [],
        "Illustration": [
            "返回 X 的反正切值，即正切值为 X 的值。"
        ],
        "Examples": [
            "obclient> SELECT ATAN(-10), ATAN(0), ATAN(10), ATAN(-0.5), ATAN(0.5);\n+---------------------+---------+--------------------+---------------------+--------------------+\n| ATAN(-10)           | ATAN(0) | ATAN(10)           | ATAN(-0.5)          | ATAN(0.5)          |\n+---------------------+---------+--------------------+---------------------+--------------------+\n| -1.4711276743037347 |       0 | 1.4711276743037347 | -0.4636476090008061 | 0.4636476090008061 |\n+---------------------+---------+--------------------+---------------------+--------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT ATAN(-10), ATAN(0), ATAN(10), ATAN(-0.5), ATAN(0.5);\n+---------------------+---------+--------------------+---------------------+--------------------+\n| ATAN(-10)           | ATAN(0) | ATAN(10)           | ATAN(-0.5)          | ATAN(0.5)          |\n+---------------------+---------+--------------------+---------------------+--------------------+\n| -1.4711276743037347 |       0 | 1.4711276743037347 | -0.4636476090008061 | 0.4636476090008061 |\n+---------------------+---------+--------------------+---------------------+--------------------+\n1 row in set\n"
        ]
    },
    "ATAN2": {
        "Title": [
            "ATAN2"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823338"
        ],
        "Category": [
            "Mathematical Functions"
        ],
        "Feature": "ATAN2(X,Y)\n",
        "Description": [],
        "Illustration": [
            "返回 X 与 Y 的反正切。它类似于计算 Y/X 的反正切，两个参数的符号用于确定结果所在的象限。",
            "该函数也可写作 ATAN(X,Y)，请参见 ATAN。"
        ],
        "Examples": [
            "obclient> SELECT ATAN(PI(),0);\n+--------------------+\n| ATAN(PI(),0)       |\n+--------------------+\n| 1.5707963267948966 |\n+--------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT ATAN(PI(),0);\n+--------------------+\n| ATAN(PI(),0)       |\n+--------------------+\n| 1.5707963267948966 |\n+--------------------+\n1 row in set\n"
        ]
    },
    "AVG": {
        "Title": [
            "AVG"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823021"
        ],
        "Category": [
            "Aggregate Functions",
            "Analysis Functions"
        ],
        "Feature": "AVG([DISTINCT | ALL] expr)\n",
        "Description": [],
        "Illustration": [
            "返回指定组中的平均值，空值被忽略。DISTINCT 选项可用于返回 expr 的不同值的平均值。如果找不到匹配的行，则 AVG() 返回 NULL。"
        ],
        "Examples": [
            "obclient> SELECT * FROM oceanbasetest;\n+----+------+------+\n| id | ip   | ip2  |\n+----+------+------+\n|  1 |    4 | NULL |\n|  3 |    3 | NULL |\n|  4 |    3 | NULL |\n+----+------+------+\n3 rows in set\n\nobclient> SELECT avg(ip2), avg(ip), avg(distinct(ip)) FROM oceanbasetest;\n+----------+---------+-------------------+\n| avg(ip2) | avg(ip) | avg(distinct(ip)) |\n+----------+---------+-------------------+\n|     NULL |  3.3333 |            3.5000 |\n+----------+---------+-------------------+\n1 row in set\n\nobclient> SELECT avg(distinct(ip)),avg(ip),avg(ip2) FROM oceanbasetest;\n+-------------------+---------+----------+\n| avg(distinct(ip)) | avg(ip) | avg(ip2) |\n+-------------------+---------+----------+\n|            3.5000 |  3.3333 |     NULL |\n+-------------------+---------+----------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT * FROM oceanbasetest;\n+----+------+------+\n| id | ip   | ip2  |\n+----+------+------+\n|  1 |    4 | NULL |\n|  3 |    3 | NULL |\n|  4 |    3 | NULL |\n+----+------+------+\n3 rows in set\n\nobclient> SELECT avg(ip2), avg(ip), avg(distinct(ip)) FROM oceanbasetest;\n+----------+---------+-------------------+\n| avg(ip2) | avg(ip) | avg(distinct(ip)) |\n+----------+---------+-------------------+\n|     NULL |  3.3333 |            3.5000 |\n+----------+---------+-------------------+\n1 row in set\n\nobclient> SELECT avg(distinct(ip)),avg(ip),avg(ip2) FROM oceanbasetest;\n+-------------------+---------+----------+\n| avg(distinct(ip)) | avg(ip) | avg(ip2) |\n+-------------------+---------+----------+\n|            3.5000 |  3.3333 |     NULL |\n+-------------------+---------+----------+\n1 row in set\n"
        ]
    },
    "BENCHMARK": {
        "Title": [
            "BENCHMARK"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822973"
        ],
        "Category": [
            "Information Functions"
        ],
        "Feature": "BENCHMARK(count,expr)\n",
        "Description": [],
        "Illustration": [
            "BENCHMARK() 函数重复执行表达式 expr 的 count 次，结果返回 0。对不适当的参数会返回 NULL，例如 NULL 值或 count 为负数。",
            "expr 只能是标量表达式。BENCHMARK() 可以用于测量标量表达式的运行性能。运行后的报告时间是客户端的运行时间，而不是服务器端的 CPU 时间。"
        ],
        "Examples": [
            "obclient> SELECT BENCHMARK(100,AES_ENCRYPT('hello','world'));\n+---------------------------------------------+\n| BENCHMARK(100,AES_ENCRYPT('hello','world')) |\n+---------------------------------------------+\n|                                           0 |\n+---------------------------------------------+\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT BENCHMARK(100,AES_ENCRYPT('hello','world'));\n+---------------------------------------------+\n| BENCHMARK(100,AES_ENCRYPT('hello','world')) |\n+---------------------------------------------+\n|                                           0 |\n+---------------------------------------------+\n"
        ]
    },
    "BIN": {
        "Title": [
            "BIN"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823442"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "bin(N)\n",
        "Description": [],
        "Illustration": [
            "返回数字 N 的二进制形式。该函数等价于 CONV(N,10,2)。",
            "如果 N 为 NULL，则返回 NULL。"
        ],
        "Examples": [
            "obclient> SELECT BIN(12);\n+---------+\n| BIN(12) |\n+---------+\n| 1100    |\n+---------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT BIN(12);\n+---------+\n| BIN(12) |\n+---------+\n| 1100    |\n+---------+\n1 row in set\n"
        ]
    },
    "BIN_TO_UUID": {
        "Title": [
            "BIN_TO_UUID"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822937"
        ],
        "Category": [
            "Miscellaneous Functions"
        ],
        "Feature": "BIN_TO_UUID(binary_uuid), BIN_TO_UUID(binary_uuid,swap_flag)\n",
        "Description": [],
        "Illustration": [
            "BIN_TO_UUID() 将二进制 UUID 转换为字符串 UUID 并返回该结果。二进制值 binary_uuid 应该数据类型为 VARBINARY(16) 的 UUID。返回值符合 UUID 版本 1 的值，该值是一个 128 位数字，是由破折号分隔的五个十六进制数组成的 utf8mb3 字符串。格式与 UUID() 函数相同，为 aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeeeee 格式，说明如下：",
            "前三个数字是从时间戳的低、中和高部分生成的。高位部分还包括 UUID 版本号。",
            "第四个数字保留时间唯一性，以防时间戳值失去单一性（例如，夏令时的影响）。",
            "第五个数字是提供空间唯一性的 IEEE 802 节点号。如果不可用，则用一个随机数代替，但无法保证空间唯一性。",
            "如果 UUID 参数为 NULL，则返回值为 NULL。如果某一何参数无效，则会发生错误。",
            "BIN_TO_UUID() 的语法包括单参数和双参数两种形式，说明如下：",
            "单参数形式指定二进制 UUID 值。UUID 值被假定为不会交换其时间低和时间高的部分。返回的字符串结果与二进制参数的顺序相同。",
            "双参数形式指定二进制 UUID 值和 ",
            "swap-flag",
            " 值： \n    ",
            "\n如果 swap_flag 为 0，则双参数形式等同于单参数形式。字符串结果与二进制参数的顺序相同。\n如果 swap_flag 为 1，则假定 UUID 值已交换其时间低和时间高部分。这些部分被交换回它们在结果值中的原始位置。\n",
            "如果 ",
            "swap_flag",
            " 为 0，则双参数形式等同于单参数形式。字符串结果与二进制参数的顺序相同。",
            "如果 ",
            "swap_flag",
            " 为 1，则假定 UUID 值已交换其时间低和时间高部分。这些部分被交换回它们在结果值中的原始位置。",
            "BIN_TO_UUID() 是 UUID_TO_BIN() 的逆函数。有关其使用示例和时间部分交换规则的信息，请参见 UUID_TO_BIN()。"
        ],
        "Examples": [],
        "Detailed Examples": []
    },
    "BIT_AND": {
        "Title": [
            "BIT_AND"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823019"
        ],
        "Category": [
            "Aggregate Functions",
            "Analysis Functions"
        ],
        "Feature": "BIT_AND(expr)\n",
        "Description": [],
        "Illustration": [
            "返回 expr 中所有位的按位与。",
            "结果类型取决于函数参数值被评估为二进制字符串还是数字。当参数值具有二进制字符串类型，并且参数不是十六进制字面量、Bit 字面量或 NULL 字面量时，就会发生二进制字符串求值。否则会发生数值计算，必要时将参数值转换为无符号 64 位整数。",
            "如果没有匹配的行，BIT_AND() 返回一个与参数值长度相同的中性值（所有位都设置为 1）。",
            "除非所有值都为 NULL，否则 NULL 值不会影响结果。在这种情况下，结果是一个与参数值具有相同长度的中性值。"
        ],
        "Examples": [
            "CREATE TABLE product_information(supplier_id INT, product_id INT,list_price numeric, min_price numeric);\nINSERT INTO PRODUCT_INFORMATION VALUES ('102050', '1659', '45', NULL);\nINSERT INTO PRODUCT_INFORMATION VALUES ('102050', '1770', NULL, '70');\nINSERT INTO PRODUCT_INFORMATION VALUES ('102050', '2370', '305', '247');\nINSERT INTO PRODUCT_INFORMATION VALUES ('102050', '2380', '750', '731');\nINSERT INTO PRODUCT_INFORMATION VALUES ('102050', '3255', NULL, NULL);\nINSERT INTO PRODUCT_INFORMATION VALUES ('102050', '1659', '35', NULL);\n\nobclient> SELECT * FROM product_information;\n+-------------+------------+------------+-----------+\n| supplier_id | product_id | list_price | min_price |\n+-------------+------------+------------+-----------+\n|      102050 |       1659 |         45 |      NULL |\n|      102050 |       1770 |       NULL |        70 |\n|      102050 |       2370 |        305 |       247 |\n|      102050 |       2380 |        750 |       731 |\n|      102050 |       3255 |       NULL |      NULL |\n|      102050 |       2380 |        750 |       731 |\n|      102050 |       1659 |         35 |      NULL |\n+-------------+------------+------------+-----------+\n7 rows in set\n\nobclient> SELECT product_id, BIT_AND(list_price) BITS FROM product_information GROUP BY product_id;\n+------------+----------------------+\n| product_id | BITS                 |\n+------------+----------------------+\n|       1659 |                   33 |\n|       1770 | 18446744073709551615 |\n|       2370 |                  305 |\n|       2380 |                  750 |\n|       3255 | 18446744073709551615 |\n+------------+----------------------+\n5 rows in set\n"
        ],
        "Detailed Examples": [
            "CREATE TABLE product_information(supplier_id INT, product_id INT,list_price numeric, min_price numeric);\nINSERT INTO PRODUCT_INFORMATION VALUES ('102050', '1659', '45', NULL);\nINSERT INTO PRODUCT_INFORMATION VALUES ('102050', '1770', NULL, '70');\nINSERT INTO PRODUCT_INFORMATION VALUES ('102050', '2370', '305', '247');\nINSERT INTO PRODUCT_INFORMATION VALUES ('102050', '2380', '750', '731');\nINSERT INTO PRODUCT_INFORMATION VALUES ('102050', '3255', NULL, NULL);\nINSERT INTO PRODUCT_INFORMATION VALUES ('102050', '1659', '35', NULL);\n\nobclient> SELECT * FROM product_information;\n+-------------+------------+------------+-----------+\n| supplier_id | product_id | list_price | min_price |\n+-------------+------------+------------+-----------+\n|      102050 |       1659 |         45 |      NULL |\n|      102050 |       1770 |       NULL |        70 |\n|      102050 |       2370 |        305 |       247 |\n|      102050 |       2380 |        750 |       731 |\n|      102050 |       3255 |       NULL |      NULL |\n|      102050 |       2380 |        750 |       731 |\n|      102050 |       1659 |         35 |      NULL |\n+-------------+------------+------------+-----------+\n7 rows in set\n\nobclient> SELECT product_id, BIT_AND(list_price) BITS FROM product_information GROUP BY product_id;\n+------------+----------------------+\n| product_id | BITS                 |\n+------------+----------------------+\n|       1659 |                   33 |\n|       1770 | 18446744073709551615 |\n|       2370 |                  305 |\n|       2380 |                  750 |\n|       3255 | 18446744073709551615 |\n+------------+----------------------+\n5 rows in set\n"
        ]
    },
    "BIT_COUNT": {
        "Title": [
            "BIT_COUNT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823327"
        ],
        "Category": [
            "Mathematical Functions"
        ],
        "Feature": "BIT_COUNT(N)\n",
        "Description": [],
        "Illustration": [
            "返回 N 转换为二进制后 1 的数量。如果 N 为 NULL，则返回 NULL。"
        ],
        "Examples": [
            "obclient> SELECT BIT_COUNT(42), BIT_COUNT(b'1010');\n+---------------+--------------------+\n| BIT_COUNT(42) | BIT_COUNT(b'1010') |\n+---------------+--------------------+\n|             3 |                  2 |\n+---------------+--------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT BIT_COUNT(42), BIT_COUNT(b'1010');\n+---------------+--------------------+\n| BIT_COUNT(42) | BIT_COUNT(b'1010') |\n+---------------+--------------------+\n|             3 |                  2 |\n+---------------+--------------------+\n1 row in set\n"
        ]
    },
    "BIT_LENGTH": {
        "Title": [
            "BIT_LENGTH"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823469"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "BIT_LENGTH(str)\n",
        "Description": [],
        "Illustration": [
            "返回字符串 str 的比特位长度。"
        ],
        "Examples": [
            "obclient> SELECT BIT_LENGTH('oceanbase');\n+-------------------------+\n| BIT_LENGTH('oceanbase') |\n+-------------------------+\n|                      72 |\n+-------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT BIT_LENGTH('oceanbase');\n+-------------------------+\n| BIT_LENGTH('oceanbase') |\n+-------------------------+\n|                      72 |\n+-------------------------+\n1 row in set\n"
        ]
    },
    "BIT_OR": {
        "Title": [
            "BIT_OR"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823026"
        ],
        "Category": [
            "Aggregate Functions",
            "Analysis Functions"
        ],
        "Feature": "BIT_OR(expr)\n",
        "Description": [],
        "Illustration": [
            "返回 expr 中所有位的按位或。",
            "结果类型取决于函数参数值被评估为二进制字符串还是数字。当参数值具有二进制字符串类型，并且参数不是十六进制字面量、Bit 字面量或 NULL 字面量时，就会发生二进制字符串求值。否则会发生数值计算，必要时将参数值转换为无符号 64 位整数。",
            "如果没有匹配的行，BIT_OR() 返回一个与参数值长度相同的中性值（所有位都设置为 0）。除非所有值都为 NULL，否则 NULL 值不会影响结果。在这种情况下，结果是一个与参数值具有相同长度的中性值。"
        ],
        "Examples": [
            "obclient> CREATE TABLE tbl1 (year YEAR (4), month INT(2)UNSIGNED ZEROFILL, day INT(2) UNSIGNED ZEROFILL);\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO tbl1 VALUES(2021,1,1),(2021,1,22),(2021,1,3),(2021,2,2), (2021,2,23),(2021,2,23);\nQuery OK, 6 rows affected\nRecords: 6  Duplicates: 0  Warnings: 0\n\nobclient> SELECT * FROM tbl1;\n+------+-------+------+\n| year | month | day  |\n+------+-------+------+\n| 2021 |    01 |   01 |\n| 2021 |    01 |   22 |\n| 2021 |    01 |   03 |\n| 2021 |    02 |   02 |\n| 2021 |    02 |   23 |\n| 2021 |    02 |   23 |\n+------+-------+------+\n6 rows in set\n\nobclient> SELECT year,month,BIT_COUNT(BIT_OR(1<<day)) AS days FROM tbl1 GROUP BY year,month;\n+------+-------+------+\n| year | month | days |\n+------+-------+------+\n| 2021 |    01 |    3 |\n| 2021 |    02 |    2 |\n+------+-------+------+\n2 rows in set\n"
        ],
        "Detailed Examples": [
            "obclient> CREATE TABLE tbl1 (year YEAR (4), month INT(2)UNSIGNED ZEROFILL, day INT(2) UNSIGNED ZEROFILL);\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO tbl1 VALUES(2021,1,1),(2021,1,22),(2021,1,3),(2021,2,2), (2021,2,23),(2021,2,23);\nQuery OK, 6 rows affected\nRecords: 6  Duplicates: 0  Warnings: 0\n\nobclient> SELECT * FROM tbl1;\n+------+-------+------+\n| year | month | day  |\n+------+-------+------+\n| 2021 |    01 |   01 |\n| 2021 |    01 |   22 |\n| 2021 |    01 |   03 |\n| 2021 |    02 |   02 |\n| 2021 |    02 |   23 |\n| 2021 |    02 |   23 |\n+------+-------+------+\n6 rows in set\n\nobclient> SELECT year,month,BIT_COUNT(BIT_OR(1<<day)) AS days FROM tbl1 GROUP BY year,month;\n+------+-------+------+\n| year | month | days |\n+------+-------+------+\n| 2021 |    01 |    3 |\n| 2021 |    02 |    2 |\n+------+-------+------+\n2 rows in set\n"
        ]
    },
    "BIT_XOR": {
        "Title": [
            "BIT_XOR"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823018"
        ],
        "Category": [
            "Aggregate Functions",
            "Analysis Functions"
        ],
        "Feature": "BIT_XOR(expr)\n",
        "Description": [],
        "Illustration": [
            "返回 expr 中所有位的按位异或。",
            "结果类型取决于函数参数值被评估为二进制字符串还是数字。当参数值具有二进制字符串类型，并且参数不是十六进制字面量、Bit 字面量或 NULL 字面量时，就会发生二进制字符串求值。否则会发生数值计算，必要时将参数值转换为无符号 64 位整数。",
            "如果没有匹配的行，BIT_XOR() 返回一个与参数值长度相同的中性值（所有位都设置为 0）。",
            "除非所有值都为 NULL，否则 NULL 值不会影响结果。在这种情况下，结果是一个与参数值具有相同长度的中性值。"
        ],
        "Examples": [
            "obclient> SELECT year,month,BIT_COUNT(BIT_XOR(1<<day)) AS days FROM tbl1 GROUP BY year,month;\n+------+-------+------+\n| year | month | days |\n+------+-------+------+\n| 2021 |    01 |    3 |\n| 2021 |    02 |    1 |\n+------+-------+------+\n2 rows in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT year,month,BIT_COUNT(BIT_XOR(1<<day)) AS days FROM tbl1 GROUP BY year,month;\n+------+-------+------+\n| year | month | days |\n+------+-------+------+\n| 2021 |    01 |    3 |\n| 2021 |    02 |    1 |\n+------+-------+------+\n2 rows in set\n"
        ]
    },
    "CASE": {
        "Title": [
            "CASE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823323"
        ],
        "Category": [
            "Flow Control Functions"
        ],
        "Feature": "CASE value WHEN compare-value THEN result [WHEN [compare-value] THEN result ...] [ELSE result] END\nCASE WHEN condition THEN result [WHEN [condition] THEN result ...] [ELSE result] END\n",
        "Description": [],
        "Illustration": [
            "在第一种声明的返回结果中，value = compare-value。而第二种声明的返回结果是第一种条件为真。如果没有匹配的结果值，则返回结果为 ELSE 后的结果，如果没有 ELSE 部分，则返回值为 NULL。"
        ],
        "Examples": [
            "obclient> SELECT CASE 'B' WHEN 'A' THEN 1 WHEN 'B' THEN 2 END;\n+----------------------------------------------+\n| CASE 'B' WHEN 'A' THEN 1 WHEN 'B' THEN 2 END |\n+----------------------------------------------+\n|                                            2 |\n+----------------------------------------------+\n1 row in set\n\nobclient> SELECT CASE CONCAT('A','B') WHEN CONCAT('AB','') THEN 'A' WHEN 'B' THEN 'B' END;\n+--------------------------------------------------------------------------+\n| CASE CONCAT('A','B') WHEN CONCAT('AB','') THEN 'A' WHEN 'B' THEN 'B' END |\n+--------------------------------------------------------------------------+\n| A                                                                        |\n+--------------------------------------------------------------------------+\n1 row in set\n\nobclient> SELECT CASE WHEN 1>0 THEN 'TRUE' ELSE 'FALSE' END;\n+--------------------------------------------+\n| CASE WHEN 1>0 THEN 'TRUE' ELSE 'FALSE' END |\n+--------------------------------------------+\n| TRUE                                       |\n+--------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT CASE 'B' WHEN 'A' THEN 1 WHEN 'B' THEN 2 END;\n+----------------------------------------------+\n| CASE 'B' WHEN 'A' THEN 1 WHEN 'B' THEN 2 END |\n+----------------------------------------------+\n|                                            2 |\n+----------------------------------------------+\n1 row in set\n\nobclient> SELECT CASE CONCAT('A','B') WHEN CONCAT('AB','') THEN 'A' WHEN 'B' THEN 'B' END;\n+--------------------------------------------------------------------------+\n| CASE CONCAT('A','B') WHEN CONCAT('AB','') THEN 'A' WHEN 'B' THEN 'B' END |\n+--------------------------------------------------------------------------+\n| A                                                                        |\n+--------------------------------------------------------------------------+\n1 row in set\n\nobclient> SELECT CASE WHEN 1>0 THEN 'TRUE' ELSE 'FALSE' END;\n+--------------------------------------------+\n| CASE WHEN 1>0 THEN 'TRUE' ELSE 'FALSE' END |\n+--------------------------------------------+\n| TRUE                                       |\n+--------------------------------------------+\n1 row in set\n"
        ]
    },
    "CAST": {
        "Title": [
            "CAST"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823317"
        ],
        "Category": [
            "Cast Functions"
        ],
        "Feature": "CAST(expr AS type)\n",
        "Description": [],
        "Illustration": [
            "CAST() 将某种数据类型的表达式显式转换为另一种数据类型，即将 expr 字段值转换为 type 数据类型。",
            "参数说明",
            "参数解释如下：",
            "expr：表示任何有效的 SQL 表达式。",
            "AS：用于分隔两个参数，在 AS 之前的是要处理的数据，在 AS 之后是要转换的数据类型。",
            "type：表示目标系统所提供的数据类型。支持如下类型：",
            "\nCHAR[(N)] [CHARACTER SET charset_name] 生成具有 CHAR 数据类型的字符串。除了当表达式 expr 为空（长度为 0）时，结果类型为 CHAR(0)。如果指定了可选长度 N，CHAR(N) 会强制转换为使用不超过 N 个参数的字符，短于 N 个字符长度的值不会发生填充；如果没有指定可选长度 N，OceanBase 数据库会根据表达式计算最大长度。如果没有 CHARACTER SET charset_name 子句，CHAR 会生成具有默认字符集的字符串。\nDATE：产生一个 DATE 值。\nDATETIME [ (M) ]：产生一个 DATETIME 值。M 值是可选的，用于指定小数位上秒的精度，范围为 [0,6]。\nDECIMAL [ (M [,D] ) ]：产生一个 DECIMAL 值。M 和 D 值是可选的，它们分别指定最大位数（精度）和小数点后的位数（小数位数）。M 最大值为 65，D 最大值为 30。如果省略 D，则默认为 0; 如果省略 M，则默认为 10。\nSIGNED [INTEGER]：产生一个有符号的 BIGINT 值。\nJSON：生成 JSON 值。有关 JSON 与其他类型的值转换规则，请参见 JSON 数据类型转换。\nTIME [ (M) ]：产生一个 TIME 值。如果给出了可选的 M 值，则它指定小数位上秒的精度。\nUNSIGNED [INTEGER]：产生一个无符号的 BIGINT 值。\n",
            "CHAR[(N)] [CHARACTER SET charset_name]",
            "生成具有 CHAR 数据类型的字符串。除了当表达式 expr 为空（长度为 0）时，结果类型为 CHAR(0)。如果指定了可选长度 N，CHAR(N) 会强制转换为使用不超过 N 个参数的字符，短于 N 个字符长度的值不会发生填充；如果没有指定可选长度 N，OceanBase 数据库会根据表达式计算最大长度。如果没有 CHARACTER SET charset_name 子句，CHAR 会生成具有默认字符集的字符串。",
            "DATE：产生一个 DATE 值。",
            "DATETIME [ (M) ]：产生一个 DATETIME 值。M 值是可选的，用于指定小数位上秒的精度，范围为 [0,6]。",
            "DECIMAL [ (M [,D] ) ]：产生一个 DECIMAL 值。M 和 D 值是可选的，它们分别指定最大位数（精度）和小数点后的位数（小数位数）。M 最大值为 65，D 最大值为 30。如果省略 D，则默认为 0; 如果省略 M，则默认为 10。",
            "SIGNED [INTEGER]：产生一个有符号的 BIGINT 值。",
            "JSON：生成 JSON 值。有关 JSON 与其他类型的值转换规则，请参见 JSON 数据类型转换。",
            "TIME [ (M) ]：产生一个 TIME 值。如果给出了可选的 M 值，则它指定小数位上秒的精度。",
            "UNSIGNED [INTEGER]：产生一个无符号的 BIGINT 值。",
            "使用说明",
            "在使用 CAST 函数进行数据类型转换时，支持以下情况：",
            "两个表达式的数据类型完全相同",
            "两个表达式可隐式转换",
            "必须显式转换数据类型",
            "当用户试图进行不可能的转换，OceanBase 数据库将显示一条错误信息。如果转换时没有指定数据类型的长度，则使用 OceanBase 数据库系统内部最大长度。例如 VARCHAR 是 262,143 字节，NUMBER 是 65 比特位的浮动精度。",
            "CAST() 支持带符号和无符号的 64 比特值的运算。如果您正在使用数字操作符 (例如 +) 而其中一个操作数为无符号整数，则结果为无符号。您可以使用 SIGNED 和 UNSIGNED 对结果进行显式声明，将运算分别指定为带符号或无符号的 64 比特位的整数。如果任意一个操作数为一个浮点值，则结果为一个浮点值。"
        ],
        "Examples": [
            "obclient> SELECT CAST(0 AS DATE);\n+-----------------+\n| CAST(0 AS DATE) |\n+-----------------+\n| 0000-00-00      |\n+-----------------+\n1 row in set\n",
            "obclient> SELECT CAST(123 AS TIME);\n+-------------------+\n| CAST(123 AS TIME) |\n+-------------------+\n| 00:01:23          |\n+-------------------+\n1 row in set\n",
            "obclient> SELECT CAST(123 AS DATETIME(4));\n+--------------------------+\n| CAST(123 AS DATETIME(4)) |\n+--------------------------+\n| 2000-01-23 00:00:00.0000 |\n+--------------------------+\n1 row in set\n",
            "obclient>  SELECT CAST(123 AS DECIMAL(3,2));\n+---------------------------+\n| CAST(123 AS DECIMAL(3,2)) |\n+---------------------------+\n|                      9.99 |\n+---------------------------+\n1 row in set\n",
            "obclient> SELECT CAST(\"123\" AS JSON);\n+---------------------+\n| CAST(\"123\" AS JSON) |\n+---------------------+\n| 123                 |\n+---------------------+\n1 row in set\n",
            "obclient> SELECT CAST(1-2 AS UNSIGNED), CAST(cast(1-2 AS UNSIGNED) AS SIGNED);\n+-----------------------+---------------------------------------+\n| CAST(1-2 AS UNSIGNED) | CAST(cast(1-2 AS UNSIGNED) AS SIGNED) |\n+-----------------------+---------------------------------------+\n|  18446744073709551615 |                                    -1 |\n+-----------------------+---------------------------------------+\n1 row in set\n",
            "obclient> SELECT CAST(1 AS UNSIGNED) - 2.0;\n+---------------------------+\n| CAST(1 AS UNSIGNED) - 2.0 |\n+---------------------------+\n|                      -1.0 |\n+---------------------------+\n1 row in set\n",
            "obclient> SELECT CAST(123 AS CHAR(2));\n+----------------------+\n| CAST(123 AS CHAR(2)) |\n+----------------------+\n| 12                   |\n+----------------------+\n1 row in set\n",
            "obclient> SELECT CAST(1 AS CHAR CHARACTER SET utf8mb4);\n+---------------------------------------+\n| CAST(1 AS CHAR CHARACTER SET utf8mb4) |\n+---------------------------------------+\n| 1                                     |\n+---------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "将数值 0 转换为 DATE 类型。",
            "obclient> SELECT CAST(0 AS DATE);\n+-----------------+\n| CAST(0 AS DATE) |\n+-----------------+\n| 0000-00-00      |\n+-----------------+\n1 row in set\n",
            "将数值 123 转换为 TIME 类型。",
            "obclient> SELECT CAST(123 AS TIME);\n+-------------------+\n| CAST(123 AS TIME) |\n+-------------------+\n| 00:01:23          |\n+-------------------+\n1 row in set\n",
            "将数值 123 转换为 DATETIME 类型。",
            "obclient> SELECT CAST(123 AS DATETIME(4));\n+--------------------------+\n| CAST(123 AS DATETIME(4)) |\n+--------------------------+\n| 2000-01-23 00:00:00.0000 |\n+--------------------------+\n1 row in set\n",
            "将数值 123 转换为 DECIMAL 类型。",
            "obclient>  SELECT CAST(123 AS DECIMAL(3,2));\n+---------------------------+\n| CAST(123 AS DECIMAL(3,2)) |\n+---------------------------+\n|                      9.99 |\n+---------------------------+\n1 row in set\n",
            "将字符串文本 \"123\" 转换为 JSON 类型。",
            "obclient> SELECT CAST(\"123\" AS JSON);\n+---------------------+\n| CAST(\"123\" AS JSON) |\n+---------------------+\n| 123                 |\n+---------------------+\n1 row in set\n",
            "将 \"1-2\"的结果分别使用无符号表示和有符号表示。",
            "obclient> SELECT CAST(1-2 AS UNSIGNED), CAST(cast(1-2 AS UNSIGNED) AS SIGNED);\n+-----------------------+---------------------------------------+\n| CAST(1-2 AS UNSIGNED) | CAST(cast(1-2 AS UNSIGNED) AS SIGNED) |\n+-----------------------+---------------------------------------+\n|  18446744073709551615 |                                    -1 |\n+-----------------------+---------------------------------------+\n1 row in set\n",
            "使用 CAST() 进行数值运算。",
            "obclient> SELECT CAST(1 AS UNSIGNED) - 2.0;\n+---------------------------+\n| CAST(1 AS UNSIGNED) - 2.0 |\n+---------------------------+\n|                      -1.0 |\n+---------------------------+\n1 row in set\n",
            "将数值 123 转换为 CHAR 类型。",
            "obclient> SELECT CAST(123 AS CHAR(2));\n+----------------------+\n| CAST(123 AS CHAR(2)) |\n+----------------------+\n| 12                   |\n+----------------------+\n1 row in set\n",
            "将数值 1 转换为 CHAR 类型并指定字符集。",
            "obclient> SELECT CAST(1 AS CHAR CHARACTER SET utf8mb4);\n+---------------------------------------+\n| CAST(1 AS CHAR CHARACTER SET utf8mb4) |\n+---------------------------------------+\n| 1                                     |\n+---------------------------------------+\n1 row in set\n"
        ]
    },
    "CEIL": {
        "Title": [
            "CEIL"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823345"
        ],
        "Category": [
            "Mathematical Functions"
        ],
        "Feature": "CEIL(expr)\n",
        "Description": [],
        "Illustration": [
            "返回大于等于 expr 的最小整数。",
            "支持比较运算，结果为 BOOL 值，被转化为数字类型处理，产生的结果为 1(TRUE)、0 (FALSE)。",
            "如果输入 NULL，返回值为 NULL。",
            "如果输入纯数字的字符串，支持自动转换成数字类型。",
            "返回值会被转化为一个 BIGINT。"
        ],
        "Examples": [
            "obclient> SELECT CEIL(1.2), CEIL(-1.2), CEIL(1+1.5), CEIL(1=1),CEIL(1<1),CEIL(null);\n+-----------+------------+-------------+-----------+-----------+------------+\n| CEIL(1.2) | CEIL(-1.2) | CEIL(1+1.5) | CEIL(1=1) | CEIL(1<1) | CEIL(null) |\n+-----------+------------+-------------+-----------+-----------+------------+\n|         2 |         -1 |           3 |         1 |         0 |       NULL |\n+-----------+------------+-------------+-----------+-----------+------------+\n1 row in set\n\nobclient> SELECT CEIL(name);\nERROR 1054 (42S22): Unknown column 'name' in 'field list'\n\nobclient> SELECT CEIL('2');\n+-----------+\n| CEIL('2') |\n+-----------+\n|         2 |\n+-----------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT CEIL(1.2), CEIL(-1.2), CEIL(1+1.5), CEIL(1=1),CEIL(1<1),CEIL(null);\n+-----------+------------+-------------+-----------+-----------+------------+\n| CEIL(1.2) | CEIL(-1.2) | CEIL(1+1.5) | CEIL(1=1) | CEIL(1<1) | CEIL(null) |\n+-----------+------------+-------------+-----------+-----------+------------+\n|         2 |         -1 |           3 |         1 |         0 |       NULL |\n+-----------+------------+-------------+-----------+-----------+------------+\n1 row in set\n\nobclient> SELECT CEIL(name);\nERROR 1054 (42S22): Unknown column 'name' in 'field list'\n\nobclient> SELECT CEIL('2');\n+-----------+\n| CEIL('2') |\n+-----------+\n|         2 |\n+-----------+\n1 row in set\n"
        ]
    },
    "CEILING": {
        "Title": [
            "CEILING"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823328"
        ],
        "Category": [
            "Mathematical Functions"
        ],
        "Feature": "CEILING(X)\n",
        "Description": [],
        "Illustration": [
            "返回大于等于 X 的最小整数，该函数是 CEIL() 的别名",
            "支持比较运算，结果为 BOOL 值，被转化为数字类型处理，产生的结果为 1(TRUE)、0 (FALSE)。",
            "如果输入 NULL，返回值为 NULL。",
            "如果输入纯数字的字符串，支持自动转换成数字类型。",
            "返回值会被转化为一个 BIGINT。"
        ],
        "Examples": [
            "obclient> SELECT CEILING(1.23);\n+---------------+\n| CEILING(1.23) |\n+---------------+\n|             2 |\n+---------------+\n1 row in set\n\nobclient> SELECT CEILING(-1.23);\n+----------------+\n| CEILING(-1.23) |\n+----------------+\n|             -1 |\n+----------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT CEILING(1.23);\n+---------------+\n| CEILING(1.23) |\n+---------------+\n|             2 |\n+---------------+\n1 row in set\n\nobclient> SELECT CEILING(-1.23);\n+----------------+\n| CEILING(-1.23) |\n+----------------+\n|             -1 |\n+----------------+\n1 row in set\n"
        ]
    },
    "CHAR": {
        "Title": [
            "CHAR"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823434"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "CHAR(value1,... [USING charset_name])\n",
        "Description": [],
        "Illustration": [
            "将每个参数转换为整数，并返回由这些整数的代码值所给出的字符组成的字符串，并跳过 NULL 值。",
            "此外，如果参数大于 255，则会将该参数被转换为多个结果字节。例如，CHAR(256) 等价于 CHAR(1,0)，CHAR(256*256) 等价于 CHAR(1,0,0)。",
            "默认情况下，CHAR() 返回的字符串的字符集是 binary，您可以通过 USING 子句来指定返回的字符集。",
            "obclient> select CHARSET(char('')), CHARSET(char('' USING utf8mb4));\n+-------------------+---------------------------------+\n| CHARSET(char('')) | CHARSET(char('' USING utf8mb4)) |\n+-------------------+---------------------------------+\n| binary            | utf8mb4                         |\n+-------------------+---------------------------------+\n1 row in set\n",
            "如果返回的值在指定的字符集中是非法的，则会抛出一个 WARNING 提示。特别地，如果 sql_mode 设置为 STRICT_ALL_TABLES 或 STRICT_TRANS_TABLES 时，如果返回的值在指定的字符集中非法，则会返回 NULL。",
            "有关 sql_mode 的详细信息，请参见 sql_mode。",
            "obclient> SET SESSION sql_mode='STRICT_ALL_TABLES';\nobclient> SELECT CHAR(399 USING utf8);\n+----------------------+\n| CHAR(399 USING utf8) |\n+----------------------+\n| NULL                 |\n+----------------------+\n1 row in set, 1 warning\n"
        ],
        "Examples": [
            "obclient> SELECT CHAR(79,99,101,97,110,66,97.4,115,'101');\n+------------------------------------------+\n| CHAR(79,99,101,97,110,66,97.4,115,'101') |\n+------------------------------------------+\n| OceanBase                                |\n+------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT CHAR(79,99,101,97,110,66,97.4,115,'101');\n+------------------------------------------+\n| CHAR(79,99,101,97,110,66,97.4,115,'101') |\n+------------------------------------------+\n| OceanBase                                |\n+------------------------------------------+\n1 row in set\n"
        ]
    },
    "CHARACTER_LENGTH": {
        "Title": [
            "CHARACTER_LENGTH"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823454"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "CHARACTER_LENGTH(str)\n",
        "Description": [],
        "Illustration": [
            "CHARACTER_LENGTH() 是 CHAR_LENGTH() 的同义词。"
        ],
        "Examples": [
            "obclient> SELECT CHARACTER_LENGTH('中国'), LENGTH('中国'),CHARACTER_LENGTH('hello');\n+----------------------------+------------------+---------------------------+\n| CHARACTER_LENGTH('中国')   | LENGTH('中国')   | CHARACTER_LENGTH('hello') |\n+----------------------------+------------------+---------------------------+\n|                          2 |                6 |                         5 |\n+----------------------------+------------------+---------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT CHARACTER_LENGTH('中国'), LENGTH('中国'),CHARACTER_LENGTH('hello');\n+----------------------------+------------------+---------------------------+\n| CHARACTER_LENGTH('中国')   | LENGTH('中国')   | CHARACTER_LENGTH('hello') |\n+----------------------------+------------------+---------------------------+\n|                          2 |                6 |                         5 |\n+----------------------------+------------------+---------------------------+\n1 row in set\n"
        ]
    },
    "CHARSET": {
        "Title": [
            "CHARSET"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822967"
        ],
        "Category": [
            "Information Functions"
        ],
        "Feature": "CHARSET(str)\n",
        "Description": [],
        "Illustration": [
            "返回字符串 str 使用的字符集。"
        ],
        "Examples": [
            "obclient> SELECT CHARSET(\"oceanbaase\");\n+-----------------------+\n| CHARSET(\"oceanbaase\") |\n+-----------------------+\n| utf8mb4               |\n+-----------------------+\n1 row in set\n\nobclient> SELECT CHARSET(CONVERT(\"oceanbase\" USING binary));\n+--------------------------------------------+\n| CHARSET(CONVERT(\"oceanbase\" USING binary)) |\n+--------------------------------------------+\n| binary                                     |\n+--------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT CHARSET(\"oceanbaase\");\n+-----------------------+\n| CHARSET(\"oceanbaase\") |\n+-----------------------+\n| utf8mb4               |\n+-----------------------+\n1 row in set\n\nobclient> SELECT CHARSET(CONVERT(\"oceanbase\" USING binary));\n+--------------------------------------------+\n| CHARSET(CONVERT(\"oceanbase\" USING binary)) |\n+--------------------------------------------+\n| binary                                     |\n+--------------------------------------------+\n1 row in set\n"
        ]
    },
    "CHAR_LENGTH": {
        "Title": [
            "CHAR_LENGTH"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823479"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "CHAR_LENGTH(str)\n",
        "Description": [],
        "Illustration": [
            "返回字符串 str 包含的字符数。",
            "多字节的字符会被计为一个字符，例如，输入 5 个 2 字节字符，LENGTH() 返回 10，而 CHAR_LENGTH() 则返回 5。"
        ],
        "Examples": [
            "obclient> SELECT CHAR_LENGTH('中国'), LENGTH('中国'),CHAR_LENGTH('hello');\n+-----------------------+------------------+----------------------+\n| CHAR_LENGTH('中国')   | LENGTH('中国')   | CHAR_LENGTH('hello') |\n+-----------------------+------------------+----------------------+\n|                     2 |                6 |                    5 |\n+-----------------------+------------------+----------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT CHAR_LENGTH('中国'), LENGTH('中国'),CHAR_LENGTH('hello');\n+-----------------------+------------------+----------------------+\n| CHAR_LENGTH('中国')   | LENGTH('中国')   | CHAR_LENGTH('hello') |\n+-----------------------+------------------+----------------------+\n|                     2 |                6 |                    5 |\n+-----------------------+------------------+----------------------+\n1 row in set\n"
        ]
    },
    "COALESCE": {
        "Title": [
            "COALESCE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822944"
        ],
        "Category": [
            "Miscellaneous Functions"
        ],
        "Feature": "COALESCE(expr, expr, expr,...)\n",
        "Description": [],
        "Illustration": [
            "依次参考各参数表达式，遇到非 NULL 值即停止并返回该值。如果所有的表达式都是空值，最终将返回一个空值。",
            "所有表达式必须是相同类型，或者可以隐性转换为相同的类型。"
        ],
        "Examples": [
            "obclient> SELECT COALESCE(NULL,NULL,3,4,5), COALESCE(NULL,NULL,NULL);\n+---------------------------+--------------------------+\n| COALESCE(NULL,NULL,3,4,5) | COALESCE(NULL,NULL,NULL) |\n+---------------------------+--------------------------+\n|                         3 |                     NULL |\n+---------------------------+--------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT COALESCE(NULL,NULL,3,4,5), COALESCE(NULL,NULL,NULL);\n+---------------------------+--------------------------+\n| COALESCE(NULL,NULL,3,4,5) | COALESCE(NULL,NULL,NULL) |\n+---------------------------+--------------------------+\n|                         3 |                     NULL |\n+---------------------------+--------------------------+\n1 row in set\n"
        ]
    },
    "COERCIBILITY": {
        "Title": [
            "COERCIBILITY"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822974"
        ],
        "Category": [
            "Information Functions"
        ],
        "Feature": "COERCIBILITY(str)\n",
        "Description": [],
        "Illustration": [
            "返回字符串 str 在多语言排序时字符序的优先级。",
            "相同字符集的两个变量在进行比较时，按字符序作为规则。但不同字符集的两个变量时，就需要规定不同字符集间的优先级。例如以下语句：",
            "obclient> SELECT c1 FROM t WHERE c1 = 'Y';\n",
            "如果 c1 与 'Y' 使用相同的字符序，则不会产生歧义。但如果表 t 在 table_option 指定了其他的字符序，或系统变量 collation_connection 使用了不同的字符序，则在比较时使用的哪种字符序，取决于两种字符序的优先级。",
            "各类字符序的优先级如下表所示，值越小优先级越高。",
            "\n\n\n取值\n描述\n例子\n\n\n\n\n0\n显式指定的字符序\n显式 COLLATE 子句。\n\n\n1\n无字符序\n不同字符序字符串的连接。\n\n\n2\n隐式指定的字符序\n列值、系统参数或变量。\n\n\n3\n系统常数\n系统函数例如 USER() 函数的返回值。\n\n\n4\n可降级值\n文字字符串。\n\n\n5\n数字型值\n数值或时间值。\n\n\n6\n可忽略的值\nNULL 或结果为 NULL 的表达式。\n\n\n",
            "OceanBase 数据库使用 Coercibility 值和以下规则来解决歧义：",
            "Coercibility 越小，优先级越高。",
            "如果比较的双方具有相同的 Coercibility 的排序规则，则使用以下补充规则：",
            "\n如果两种字符集都是 Unicode 或都不是 Unicode，字符序不同则返回错误。\n如果一侧字符集使用了 Unicode，另一侧字符集不是 Unicode，则 Unicode 的一侧具有更高的优先级。例如以下语句不会返回错误： obclient> SELECT CONCAT(t1.utf8_column, t2.gbk_column) FROM t1,t2;\n\n对于相同字符集，但字符序分别是 _bin 与 a_ci 或 _cs，则使用 _bin 字符序。\n",
            "如果两种字符集都是 Unicode 或都不是 Unicode，字符序不同则返回错误。",
            "如果一侧字符集使用了 Unicode，另一侧字符集不是 Unicode，则 Unicode 的一侧具有更高的优先级。例如以下语句不会返回错误：",
            "obclient> SELECT CONCAT(t1.utf8_column, t2.gbk_column) FROM t1,t2;\n",
            "对于相同字符集，但字符序分别是 _bin 与 a_ci 或 _cs，则使用 _bin 字符序。"
        ],
        "Examples": [
            "obclient> SELECT COERCIBILITY('oceanbase' COLLATE utf8mb4_bin);\n+-----------------------------------------------+\n| COERCIBILITY('oceanbase' COLLATE utf8mb4_bin) |\n+-----------------------------------------------+\n|                                             0 |\n+-----------------------------------------------+\n1 row in set\n\nobclient> SELECT COERCIBILITY('oceanbase');\n+---------------------------+\n| COERCIBILITY('oceanbase') |\n+---------------------------+\n|                         4 |\n+---------------------------+\n1 row in set\n\nobclient> SELECT COERCIBILITY(user());\n+----------------------+\n| COERCIBILITY(user()) |\n+----------------------+\n|                    3 |\n+----------------------+\n1 row in set\n\nobclient> SELECT COERCIBILITY(1000);\n+--------------------+\n| COERCIBILITY(1000) |\n+--------------------+\n|                  5 |\n+--------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT COERCIBILITY('oceanbase' COLLATE utf8mb4_bin);\n+-----------------------------------------------+\n| COERCIBILITY('oceanbase' COLLATE utf8mb4_bin) |\n+-----------------------------------------------+\n|                                             0 |\n+-----------------------------------------------+\n1 row in set\n\nobclient> SELECT COERCIBILITY('oceanbase');\n+---------------------------+\n| COERCIBILITY('oceanbase') |\n+---------------------------+\n|                         4 |\n+---------------------------+\n1 row in set\n\nobclient> SELECT COERCIBILITY(user());\n+----------------------+\n| COERCIBILITY(user()) |\n+----------------------+\n|                    3 |\n+----------------------+\n1 row in set\n\nobclient> SELECT COERCIBILITY(1000);\n+--------------------+\n| COERCIBILITY(1000) |\n+--------------------+\n|                  5 |\n+--------------------+\n1 row in set\n"
        ]
    },
    "COLLATION": {
        "Title": [
            "COLLATION"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822971"
        ],
        "Category": [
            "Information Functions"
        ],
        "Feature": "COLLATION(str)\n",
        "Description": [],
        "Illustration": [
            "返回字符串 str 的字符序。",
            "您可以通过 SHOW COLLATION 语句查看 OceanBase 数据库支持的字符序。"
        ],
        "Examples": [
            "obclient> SELECT COLLATION(\"oceanbase\");\n+------------------------+\n| COLLATION(\"oceanbase\") |\n+------------------------+\n| utf8mb4_general_ci     |\n+------------------------+\n1 row in set\n\nobclient> SELECT COLLATION(\"oceanbase\" COLLATE utf8mb4_bin);\n+--------------------------------------------+\n| COLLATION(\"oceanbase\" COLLATE utf8mb4_bin) |\n+--------------------------------------------+\n| utf8mb4_bin                                |\n+--------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT COLLATION(\"oceanbase\");\n+------------------------+\n| COLLATION(\"oceanbase\") |\n+------------------------+\n| utf8mb4_general_ci     |\n+------------------------+\n1 row in set\n\nobclient> SELECT COLLATION(\"oceanbase\" COLLATE utf8mb4_bin);\n+--------------------------------------------+\n| COLLATION(\"oceanbase\" COLLATE utf8mb4_bin) |\n+--------------------------------------------+\n| utf8mb4_bin                                |\n+--------------------------------------------+\n1 row in set\n"
        ]
    },
    "COMPRESS": {
        "Title": [
            "COMPRESS"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823001"
        ],
        "Category": [
            "Encryption Functions"
        ],
        "Feature": "COMPRESS(str)\n",
        "Description": [],
        "Illustration": [
            "压缩字符串并将结果作为二进制字符串返回。可以使用 UNCOMPRESS 函数对结果进行解压。"
        ],
        "Examples": [
            "obclient> SELECT COMPRESS('abc');\n+-----------------+\n| COMPRESS('abc') |\n+-----------------+\n|    x?KLJ M'  |\n+-----------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT COMPRESS('abc');\n+-----------------+\n| COMPRESS('abc') |\n+-----------------+\n|    x?KLJ M'  |\n+-----------------+\n1 row in set\n"
        ]
    },
    "CONCAT": {
        "Title": [
            "CONCAT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823474"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "CONCAT(str1, str2, ...)\n",
        "Description": [],
        "Illustration": [
            "把多个字符串连接成一个字符串。如果所有参数都是非二进制字符串，则结果是一个非二进制字符串。如果参数包含任何二进制字符串，则结果是一个二进制字符串。对于数值类型的参数，会被转换为等价的非二进制字符串形式。",
            "参数中包含 NULL 时，返回 NULL。"
        ],
        "Examples": [
            "obclient> SELECT\n     CONCAT('test','obclient', '1.0'),\n     CONCAT('test','obclient', NULL)\n     \\G\n*************************** 1. row ***************************\nCONCAT('test','obclient', '1.0'): testobclient1.0\n CONCAT('test','obclient', NULL): NULL\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT\n     CONCAT('test','obclient', '1.0'),\n     CONCAT('test','obclient', NULL)\n     \\G\n*************************** 1. row ***************************\nCONCAT('test','obclient', '1.0'): testobclient1.0\n CONCAT('test','obclient', NULL): NULL\n1 row in set\n"
        ]
    },
    "CONCAT_WS": {
        "Title": [
            "CONCAT_WS"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823464"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "CONCAT_WS(separator, str1, .., strN)\n",
        "Description": [],
        "Illustration": [
            "把多个字符串连接成一个字符串，相邻字符串间使用 separator 分隔。参数中包含 NULL 时，将忽略 NULL。",
            "该函数不会忽略空字符串。"
        ],
        "Examples": [
            "obclient> SELECT\n     CONCAT_WS('_', 'First', 'Second'),\n     CONCAT_WS('_', 'First', NULL, 'Second')\n     \\G\n*************************** 1. row ***************************\n      CONCAT_WS('_', 'First', 'Second'): First_Second\nCONCAT_WS('_', 'First', NULL, 'Second'): First_Second\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT\n     CONCAT_WS('_', 'First', 'Second'),\n     CONCAT_WS('_', 'First', NULL, 'Second')\n     \\G\n*************************** 1. row ***************************\n      CONCAT_WS('_', 'First', 'Second'): First_Second\nCONCAT_WS('_', 'First', NULL, 'Second'): First_Second\n1 row in set\n"
        ]
    },
    "CONNECTION_ID": {
        "Title": [
            "CONNECTION_ID"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822980"
        ],
        "Category": [
            "Information Functions"
        ],
        "Feature": "CONNECTION_ID()\n",
        "Description": [],
        "Illustration": [
            "该函数返回当前会话的 Client Session ID，该 ID 是会话在客户端中的唯一标识。"
        ],
        "Examples": [
            "obclient [(none)]> SELECT CONNECTION_ID() AS Client_Session_ID;\n",
            "+-------------------+\n| Client_Session_ID |\n+-------------------+\n|        3221488032 |\n+-------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "获取当前会话的 Client Session ID。",
            "obclient [(none)]> SELECT CONNECTION_ID() AS Client_Session_ID;\n",
            "返回结果如下：",
            "+-------------------+\n| Client_Session_ID |\n+-------------------+\n|        3221488032 |\n+-------------------+\n1 row in set\n"
        ]
    },
    "CONV": {
        "Title": [
            "CONV"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823363"
        ],
        "Category": [
            "Mathematical Functions"
        ],
        "Feature": "CONV(N, from_base, to_base)\n",
        "Description": [],
        "Illustration": [
            "不同数基间转换数字。返回值为一个字符串，由 from_base 基转化为 to_base 基。",
            "输入参数 N 可以是一个整数或字符串。最小基数为 2，而最大基数为 36。如果 to_base 是一个负数，则 N 被看作一个带符号数。否则，N 被看作无符号数。",
            "from_base 如果是负数，则被当作整数处理，符号被忽略。",
            "N 参数仅支持 int 类型和字符串类型输入。",
            "from_base 和 to_base 参数仅支持十进制 int 类型输入，且取值范围为 [-36, -2] U [2, 36]。",
            "非法输入将导致报错，其中非法输入包括以下情况：",
            "from_base 或者 to_base 不是一个合法的十进制 int 类型输入；",
            "from_base 或者 to_base 超出 [-36,-2] ∪ [2,36] 的取值范围；",
            "N 不是一个合法的数字表示，例如取值超出 0～9，a～z，A～Z 的字符范围；",
            "N 超出了 from_base 基的取值范围，例如 from_base 为 2，而 N 取值为 3；",
            "N 的取值超出了 BIGINT 的最大表示范围，即 [-9223372036854775807, 9223372036854775807]。"
        ],
        "Examples": [
            "obclient> SELECT CONV(9223372036854775807,10,2);\n+-----------------------------------------------------------------+\n| CONV(9223372036854775807,10,2)                                  |\n+-----------------------------------------------------------------+\n| 111111111111111111111111111111111111111111111111111111111111111 |\n+-----------------------------------------------------------------+\n1 row in set\n\nobclient> SELECT CONV('-acc',21,-7);\n+--------------------+\n| CONV('-acc',21,-7) |\n+--------------------+\n| -16425             |\n+--------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT CONV(9223372036854775807,10,2);\n+-----------------------------------------------------------------+\n| CONV(9223372036854775807,10,2)                                  |\n+-----------------------------------------------------------------+\n| 111111111111111111111111111111111111111111111111111111111111111 |\n+-----------------------------------------------------------------+\n1 row in set\n\nobclient> SELECT CONV('-acc',21,-7);\n+--------------------+\n| CONV('-acc',21,-7) |\n+--------------------+\n| -16425             |\n+--------------------+\n1 row in set\n"
        ]
    },
    "CONVERT": {
        "Title": [
            "CONVERT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823320"
        ],
        "Category": [
            "Cast Functions"
        ],
        "Feature": "CONVERT(expr USING transcoding_name)\nCONVERT(expr,type)\n",
        "Description": [],
        "Illustration": [
            "CONVERT() 函数的两种声明对应两种不同的应用：",
            "CONVERT(expr USING transcoding_name) 用于将表达式 expr 转换为 transcoding_name 指定的字符集。",
            "CONVERT(expr,type) 用于将表达式 expr 转换为 type 指定的数据类型。",
            "在这种用法中，CONVERT(expr,type) 与 CAST(expr AS type) 是完全一致的。有关 CAST 函数的详细信息，请参见 CAST。"
        ],
        "Examples": [
            "obclient> SELECT CHARSET(CONVERT('abc' USING binary));\n+--------------------------------------+\n| charset(CONVERT('abc' USING binary)) |\n+--------------------------------------+\n| binary                               |\n+--------------------------------------+\n1 row in set\n",
            "obclient> SELECT CONVERT('test', CHAR);\n+-----------------------+\n| CONVERT('test', CHAR) |\n+-----------------------+\n| test                  |\n+-----------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "将字符串使用的字符集修改为 BINARY。",
            "obclient> SELECT CHARSET(CONVERT('abc' USING binary));\n+--------------------------------------+\n| charset(CONVERT('abc' USING binary)) |\n+--------------------------------------+\n| binary                               |\n+--------------------------------------+\n1 row in set\n",
            "将字符串的类型指定为 CHAR。",
            "obclient> SELECT CONVERT('test', CHAR);\n+-----------------------+\n| CONVERT('test', CHAR) |\n+-----------------------+\n| test                  |\n+-----------------------+\n1 row in set\n"
        ]
    },
    "CONVERT_TZ": {
        "Title": [
            "CONVERT_TZ"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823392"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "CONVERT_TZ(dt,from_tz,to_tz)\n",
        "Description": [],
        "Illustration": [
            "将日期时间值 dt 从 from_tz 给定的时区转换为 to_tz 给定的时区，并返回结果值。如果 dt 参数无效，则返回 NULL。",
            "如果该值在从 from_tz 转换为 UTC 时超出 TIMESTAMP 类型的支持范围，则不会发生转换。有关 TIMESTAMP 类型范围详细信息，请参见 DATE、DATETIME 和 TIMESTAMP 类型。"
        ],
        "Examples": [
            "obclient> SELECT CONVERT_TZ('2014-01-01 12:00:00','+00:00','+8:00');\n+----------------------------------------------------+\n| CONVERT_TZ('2014-01-01 12:00:00','+00:00','+8:00') |\n+----------------------------------------------------+\n| 2014-01-01 20:00:00                                |\n+----------------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT CONVERT_TZ('2014-01-01 12:00:00','+00:00','+8:00');\n+----------------------------------------------------+\n| CONVERT_TZ('2014-01-01 12:00:00','+00:00','+8:00') |\n+----------------------------------------------------+\n| 2014-01-01 20:00:00                                |\n+----------------------------------------------------+\n1 row in set\n"
        ]
    },
    "COS": {
        "Title": [
            "COS"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823344"
        ],
        "Category": [
            "Mathematical Functions"
        ],
        "Feature": "COS(X)\n",
        "Description": [],
        "Illustration": [
            "返回给定弧度 X 的余弦值。"
        ],
        "Examples": [
            "obclient> SELECT COS(PI());\n+-----------+\n| COS(PI()) |\n+-----------+\n|        -1 |\n+-----------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT COS(PI());\n+-----------+\n| COS(PI()) |\n+-----------+\n|        -1 |\n+-----------+\n1 row in set\n"
        ]
    },
    "COT": {
        "Title": [
            "COT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823331"
        ],
        "Category": [
            "Mathematical Functions"
        ],
        "Feature": "COT(X)\n",
        "Description": [],
        "Illustration": [
            "返回 X 的余切值。"
        ],
        "Examples": [
            "obclient> SELECT COT(-10), COT(10), COT(-0.5), COT(0.5);\n+---------------------+--------------------+--------------------+-------------------+\n| COT(-10)            | COT(10)            | COT(-0.5)          | COT(0.5)          |\n+---------------------+--------------------+--------------------+-------------------+\n| -1.5423510453569202 | 1.5423510453569202 | -1.830487721712452 | 1.830487721712452 |\n+---------------------+--------------------+--------------------+-------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT COT(-10), COT(10), COT(-0.5), COT(0.5);\n+---------------------+--------------------+--------------------+-------------------+\n| COT(-10)            | COT(10)            | COT(-0.5)          | COT(0.5)          |\n+---------------------+--------------------+--------------------+-------------------+\n| -1.5423510453569202 | 1.5423510453569202 | -1.830487721712452 | 1.830487721712452 |\n+---------------------+--------------------+--------------------+-------------------+\n1 row in set\n"
        ]
    },
    "COUNT": {
        "Title": [
            "COUNT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823029"
        ],
        "Category": [
            "Aggregate Functions",
            "Analysis Functions"
        ],
        "Feature": "COUNT([DISTINCT | ALL] expr)\n",
        "Description": [],
        "Illustration": [
            "返回 SELECT 语句检索到的行中非 NULL 值的数目。如果找不到匹配的行，则返回 0。DISTINCT 选项可用于返回 expr 的不同值的数目。",
            "COUNT(*) 的稍微不同之处在于，它返回检索行的数目，不论其是否包含 NULL 值。"
        ],
        "Examples": [
            "obclient> SELECT * FROM test;\n+----+------+------+\n| id | ip   | ip2  |\n+----+------+------+\n|  1 |    4 | NULL |\n|  3 |    3 | NULL |\n|  4 |    3 | NULL |\n+----+------+------+\n3 rows in set\n\nobclient> SELECT COUNT(ip2), COUNT(ip), COUNT(DISTINCT(ip)), COUNT(*) FROM test;\n+------------+-----------+---------------------+----------+\n| count(ip2) | count(ip) | count(distinct(ip)) | count(*) |\n+------------+-----------+---------------------+----------+\n|          0 |         3 |                   2 |        3 |\n+------------+-----------+---------------------+----------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT * FROM test;\n+----+------+------+\n| id | ip   | ip2  |\n+----+------+------+\n|  1 |    4 | NULL |\n|  3 |    3 | NULL |\n|  4 |    3 | NULL |\n+----+------+------+\n3 rows in set\n\nobclient> SELECT COUNT(ip2), COUNT(ip), COUNT(DISTINCT(ip)), COUNT(*) FROM test;\n+------------+-----------+---------------------+----------+\n| count(ip2) | count(ip) | count(distinct(ip)) | count(*) |\n+------------+-----------+---------------------+----------+\n|          0 |         3 |                   2 |        3 |\n+------------+-----------+---------------------+----------+\n1 row in set\n"
        ]
    },
    "CRC32": {
        "Title": [
            "CRC32"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823352"
        ],
        "Category": [
            "Mathematical Functions"
        ],
        "Feature": "CRC32(expr)\n",
        "Description": [],
        "Illustration": [
            "计算循环冗余校验值并返回 32 位无符号值。",
            "参数 expr 应该是一个字符串，如果不是，则可能被视为一个字符串。",
            "如果参数为 NULL，则结果为 NULL。"
        ],
        "Examples": [
            "obclient>SELECT CRC32('hello-world');\n+-----------------------+\n| COS32('hello-world') |\n+-----------------------+\n|               2983461467|\n+-----------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient>SELECT CRC32('hello-world');\n+-----------------------+\n| COS32('hello-world') |\n+-----------------------+\n|               2983461467|\n+-----------------------+\n1 row in set\n"
        ]
    },
    "CUME_DIST": {
        "Title": [
            "CUME_DIST"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823041"
        ],
        "Category": [
            "Analysis Functions"
        ],
        "Feature": "CUME_DIST() OVER ([ query_partition_clause ] order_by_clause)\n",
        "Description": [],
        "Illustration": [
            "该函数计算一个值的分布，返回值为大于 0 小于等于 1 的值。作为一个分析函数，CUME_DIST() 在升序情况下计算比当前行的特定列数值小的数据的占比。"
        ],
        "Examples": [
            "obclient> CREATE TABLE EXPLOYEES(LAST_NAME CHAR(10), SALARY DECIMAL, JOB_ID CHAR(32));\nINSERT INTO EXPLOYEES VALUES('JIM', 2000, 'CLEANER');\nINSERT INTO EXPLOYEES VALUES('MIKE', 12000, 'ENGINEERING');\nINSERT INTO EXPLOYEES VALUES('LILY', 13000, 'ENGINEERING');\nINSERT INTO EXPLOYEES VALUES('IRIS', 11000, 'ENGINEERING');\nINSERT INTO EXPLOYEES VALUES('TOM', 11000, 'ENGINEERING');\nCOMMIT;\nQuery OK, 1 row affected\n\nobclient> SELECT LAST_NAME, CUME_DIST() OVER(PARTITION BY JOB_ID ORDER BY SALARY) CUME_DIST FROM EXPLOYEES;\n+-----------+----------------------------------+\n| LAST_NAME | CUME_DIST                        |\n+-----------+----------------------------------+\n| JIM       | 1.000000000000000000000000000000 |\n| TOM       | 0.500000000000000000000000000000 |\n| IRIS      | 0.500000000000000000000000000000 |\n| MIKE      | 0.750000000000000000000000000000 |\n| LILY      | 1.000000000000000000000000000000 |\n+-----------+----------------------------------+\n5 rows in set\n"
        ],
        "Detailed Examples": [
            "按 job_id 分组并在薪水升序排列的情况下，每行数据在窗口内的排序列上的占比。",
            "obclient> CREATE TABLE EXPLOYEES(LAST_NAME CHAR(10), SALARY DECIMAL, JOB_ID CHAR(32));\nINSERT INTO EXPLOYEES VALUES('JIM', 2000, 'CLEANER');\nINSERT INTO EXPLOYEES VALUES('MIKE', 12000, 'ENGINEERING');\nINSERT INTO EXPLOYEES VALUES('LILY', 13000, 'ENGINEERING');\nINSERT INTO EXPLOYEES VALUES('IRIS', 11000, 'ENGINEERING');\nINSERT INTO EXPLOYEES VALUES('TOM', 11000, 'ENGINEERING');\nCOMMIT;\nQuery OK, 1 row affected\n\nobclient> SELECT LAST_NAME, CUME_DIST() OVER(PARTITION BY JOB_ID ORDER BY SALARY) CUME_DIST FROM EXPLOYEES;\n+-----------+----------------------------------+\n| LAST_NAME | CUME_DIST                        |\n+-----------+----------------------------------+\n| JIM       | 1.000000000000000000000000000000 |\n| TOM       | 0.500000000000000000000000000000 |\n| IRIS      | 0.500000000000000000000000000000 |\n| MIKE      | 0.750000000000000000000000000000 |\n| LILY      | 1.000000000000000000000000000000 |\n+-----------+----------------------------------+\n5 rows in set\n"
        ]
    },
    "CURDATE": {
        "Title": [
            "CURDATE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823370"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "CURDATE()\n",
        "Description": [],
        "Illustration": [
            "返回当前日期，不含时间部分。"
        ],
        "Examples": [
            "obclient> SELECT CURDATE();\n+------------+\n| CURDATE()  |\n+------------+\n| 2018-05-05 |\n+------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT CURDATE();\n+------------+\n| CURDATE()  |\n+------------+\n| 2018-05-05 |\n+------------+\n1 row in set\n"
        ]
    },
    "CURRENT_DATE": {
        "Title": [
            "CURRENT_DATE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823419"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "CURRENT_DATE()\nCURRENT_DATE\n",
        "Description": [],
        "Illustration": [
            "返回当前日期，不含时间部分。该函数是 CURDATE 的别名。"
        ],
        "Examples": [
            "obclient> SELECT CURRENT_DATE;\n+--------------+\n| CURRENT_DATE |\n+--------------+\n| 2021-08-23   |\n+--------------+\n1 row in set\n\nobclient> SELECT CURRENT_DATE();\n+----------------+\n| CURRENT_DATE() |\n+----------------+\n| 2021-08-23     |\n+----------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT CURRENT_DATE;\n+--------------+\n| CURRENT_DATE |\n+--------------+\n| 2021-08-23   |\n+--------------+\n1 row in set\n\nobclient> SELECT CURRENT_DATE();\n+----------------+\n| CURRENT_DATE() |\n+----------------+\n| 2021-08-23     |\n+----------------+\n1 row in set\n"
        ]
    },
    "CURRENT_ROLE": {
        "Title": [
            "CURRENT_ROLE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822969"
        ],
        "Category": [
            "Information Functions"
        ],
        "Feature": "CURRENT_ROLE()\n",
        "Description": [],
        "Illustration": [
            "该函数用于查看当前用户在当前会话中被激活的角色。如果查询结果为 NONE，则表示当前用户没有处于激活状态的角色，只有处于激活状态的角色的权限才能被用户使用。"
        ],
        "Examples": [
            "obclient [(none)]> SELECT CURRENT_ROLE();\n",
            "+-----------------------------+\n| CURRENT_ROLE()              |\n+-----------------------------+\n| `role002`@`%`,`role001`@`%` |\n+-----------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient [(none)]> SELECT CURRENT_ROLE();\n",
            "返回结果如下：",
            "+-----------------------------+\n| CURRENT_ROLE()              |\n+-----------------------------+\n| `role002`@`%`,`role001`@`%` |\n+-----------------------------+\n1 row in set\n"
        ]
    },
    "CURRENT_TIME": {
        "Title": [
            "CURRENT_TIME"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823375"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "CURRENT_TIME([scale])\n",
        "Description": [],
        "Illustration": [
            "返回当前时间，不含日期部分。",
            "scale 表示微秒部分精度，有效值为 0 到 6 的整数，默认值为 0。"
        ],
        "Examples": [
            "obclient> SELECT CURRENT_TIME(6);\n+-----------------+\n| CURRENT_TIME(6) |\n+-----------------+\n| 11:11:45.215311 |\n+-----------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT CURRENT_TIME(6);\n+-----------------+\n| CURRENT_TIME(6) |\n+-----------------+\n| 11:11:45.215311 |\n+-----------------+\n1 row in set\n"
        ]
    },
    "CURRENT_TIMESTAMP": {
        "Title": [
            "CURRENT_TIMESTAMP"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823386"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "CURRENT_TIMESTAMP([scale])\n",
        "Description": [],
        "Illustration": [
            "返回当前时区的日期时间。",
            "scale 表示微秒部分精度，有效值为 0 到 6 的整数，默认值为 0。"
        ],
        "Examples": [
            "obclient> SELECT CURRENT_TIMESTAMP(6);\n+----------------------------+\n| CURRENT_TIMESTAMP(6)       |\n+----------------------------+\n| 2018-05-05 11:35:39.177764 |\n+----------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT CURRENT_TIMESTAMP(6);\n+----------------------------+\n| CURRENT_TIMESTAMP(6)       |\n+----------------------------+\n| 2018-05-05 11:35:39.177764 |\n+----------------------------+\n1 row in set\n"
        ]
    },
    "CURRENT_USER": {
        "Title": [
            "CURRENT_USER"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822985"
        ],
        "Category": [
            "Information Functions"
        ],
        "Feature": "CURRENT_USER()\n",
        "Description": [],
        "Illustration": [
            "OceanBase 数据库通过用户名与主机名的组合定义登录账户，该函数返回登录账户名称的字符串，使用的字符集为 utf8mb4。",
            "在登录 OceanBase 数据库时，OceanBase 数据库会按用户名与主机名进行匹配，例如，创建两个用户 testUser@192.168.%.% 与 testUser@192.%.%.%，则可以在 mysql.USER 表中查询到以下用户：",
            "obclient> SELECT USER,HOST FROM mysql.USER ORDER BY USER,HOST;\n+------------+----------------+\n| user       | host           |\n+------------+----------------+\n...\n| testUser       | 192.%.%.%      |\n| testUser       | 192.168.%.%    |\n...\n+------------+----------------+\n",
            "在 MySQL 租户中，不同用户名与主机名的组合可以拥有不同的权限，在匹配时也会被识别为不同的用户。例如，您可以为 testUser@192.168.%.% 授予 SELECT 与 UPDATE 权限，为 testUser@192.%.%.% 授予 SELECT 权限。",
            "obclient> GRANT SELECT,UPDATE ON *.* TO testUser@192.168.%.% IDENTIFIED BY '******';\nobclient> GRANT SELECT ON *.* TO testUser@192.%.%.% IDENTIFIED BY '******';\n",
            "使用 test 用户登录到 OceanBase 数据库后，执行 CURRENT_USER()。结果如下所示。",
            "[admin@hostname ~]$ obclient -hxxx.xx.xxx.xxx -Pxxxx -utest***@xxx#xxx -p\nobclient> SELECT CURRENT_USER();\n+----------------------+\n| CURRENT_USER()       |\n+----------------------+\n| testUser@192.168.%.% |\n+----------------------+\n1 row in set\n",
            "将 test@192.168.%.% 删除后，再次使用 test 用户连接 OceanBase 数据库，并执行 CURRENT_USER()。结果如下所示。",
            "obclient> DROP USER 'testUser'@'192.168.%.%';\nobclient> \\q\nBye\n\n[admin@hostname ~]$ obclient -hxxx.xx.xxx.xxx -Pxxxx -utest***@xxx#xxx -p\nobclient> SELECT CURRENT_USER();\n+----------------------+\n| CURRENT_USER()       |\n+----------------------+\n| testUser@192.%.%.%   |\n+----------------------+\n1 row in set\n"
        ],
        "Examples": [
            "obclient> SELECT CURRENT_USER();\n+----------------+\n| CURRENT_USER() |\n+----------------+\n| root@%         |\n+----------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "查看当前数据库的登录用户。",
            "obclient> SELECT CURRENT_USER();\n+----------------+\n| CURRENT_USER() |\n+----------------+\n| root@%         |\n+----------------+\n1 row in set\n"
        ]
    },
    "CURTIME": {
        "Title": [
            "CURTIME"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823395"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "CURTIME(scale)\n",
        "Description": [],
        "Illustration": [
            "返回当前时间，不含日期部分。该函数是 CURRENT_TIME() 的别名。",
            "scale 表示微秒部分精度，有效值为 0 到 6 的整数，默认值为 0。"
        ],
        "Examples": [
            "obclient> SELECT CURTIME(0);\n+------------+\n| CURTIME(0) |\n+------------+\n| 16:17:11   |\n+------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT CURTIME(0);\n+------------+\n| CURTIME(0) |\n+------------+\n| 16:17:11   |\n+------------+\n1 row in set\n"
        ]
    },
    "DATABASE": {
        "Title": [
            "DATABASE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822983"
        ],
        "Category": [
            "Information Functions"
        ],
        "Feature": "DATABASE()\n",
        "Description": [],
        "Illustration": [
            "返回当前数据库名称，字符集为 utf8mb4。",
            "如果没有通过 USE 语句指定数据库，则返回 NULL。"
        ],
        "Examples": [
            "obclient> SELECT DATABASE();\n+------------+\n| DATABASE() |\n+------------+\n| oceanbase  |\n+------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "返回当前的数据库名称。",
            "obclient> SELECT DATABASE();\n+------------+\n| DATABASE() |\n+------------+\n| oceanbase  |\n+------------+\n1 row in set\n"
        ]
    },
    "DATE": {
        "Title": [
            "DATE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823422"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "DATE(expr)\n",
        "Description": [],
        "Illustration": [
            "返回时间或时间日期表达式 expr 的日期。"
        ],
        "Examples": [
            "obclient> SELECT DATE('2021-07-14 19:12:03');\n+-----------------------------+\n| DATE('2021-07-14 19:12:03') |\n+-----------------------------+\n| 2021-07-14                  |\n+-----------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT DATE('2021-07-14 19:12:03');\n+-----------------------------+\n| DATE('2021-07-14 19:12:03') |\n+-----------------------------+\n| 2021-07-14                  |\n+-----------------------------+\n1 row in set\n"
        ]
    },
    "DATEDIFF": {
        "Title": [
            "DATEDIFF"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823388"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "DATEDIFF(date1, date2)\n",
        "Description": [],
        "Illustration": [
            "返回 date1 和 date2 之间的天数。",
            "计算中只用到参数的日期部分，忽略时间部分。"
        ],
        "Examples": [
            "obclient> SELECT DATEDIFF('2015-06-19','1994-12-17');\n+-------------------------------------+\n| DATEDIFF('2015-06-19','1994-12-17') |\n+-------------------------------------+\n|                                7489 |\n+-------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT DATEDIFF('2015-06-19','1994-12-17');\n+-------------------------------------+\n| DATEDIFF('2015-06-19','1994-12-17') |\n+-------------------------------------+\n|                                7489 |\n+-------------------------------------+\n1 row in set\n"
        ]
    },
    "DATE_ADD": {
        "Title": [
            "DATE_ADD"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823371"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "DATE_ADD(date, INTERVAL expr unit)\n",
        "Description": [],
        "Illustration": [
            "DATE_ADD 函数用于向指定日期添加一段时间，并返回计算结果。",
            "参数说明如下：",
            "date 表示日期时间基准，可以是日期类型、时间类型与日期时间类型。",
            "expr 表示时间间隔，可以为负值。",
            "unit 表示时间间隔单位。",
            "以下为所有时间间隔单位列表：",
            "\n\n\n单位\n类型\n含义\n格式\n\n\n\n\nMICROSECOND\n独立\n微秒\nMICROSECONDS\n\n\nSECOND\n独立\n秒\nSECONDS\n\n\nMINUTE\n独立\n分钟\nMINUTES\n\n\nHOUR\n独立\n小时\nHOURS\n\n\nDAY\n独立\n天\nDAYS\n\n\nWEEK\n独立\n周\nWEEKS\n\n\nMONTH\n独立\n月\nMONTHS\n\n\nQUARTER\n独立\n季度\nQUARTERS\n\n\nYEAR\n独立\n年\nYEARS\n\n\nSECOND_MICROSECOND\n组合\n秒到微秒\n'SECONDS.MICROSECONDS'\n\n\nMINUTE_MICROSECOND\n组合\n分钟到微秒\n'MINUTES:SECONDS.MICROSECONDS'\n\n\nMINUTE_SECOND\n组合\n分钟到秒\n'MINUTES:SECONDS'\n\n\nHOUR_MICROSECOND\n组合\n小时到微秒\n'HOURS:MINUTES:SECONDS.MICROSECONDS'\n\n\nHOUR_SECOND\n组合\n小时到秒\n'HOURS:MINUTES:SECONDS'\n\n\nHOUR_MINUTE\n组合\n小时到分钟\n'HOURS:MINUTES'\n\n\nDAY_SECOND\n组合\n天到秒\n'DAYS HOURS:MINUTES:SECONDS'\n\n\nDAY_MINUTE\n组合\n天到分钟\n'DDAYSD HOURS:MINUTES'\n\n\nDAY_HOUR\n组合\n天到小时\n'DAYS HOURS'\n\n\nYEAR_MONTH\n组合\n年到月\n'YEARS-MONTHS'\n\n\n"
        ],
        "Examples": [
            "obclient> SELECT\n     DATE_ADD(NOW(), INTERVAL 5 DAY),\n     DATE_ADD('2021-01-10', INTERVAL 5 MICROSECOND),\n     DATE_ADD('2021-01-10', INTERVAL 5 SECOND),\n     DATE_ADD('2021-01-10', INTERVAL 5 MINUTE),\n     DATE_ADD('2021-01-10', INTERVAL 5 HOUR),\n     DATE_ADD('2021-01-10', INTERVAL 5 DAY),\n     DATE_ADD('2021-01-10', INTERVAL 5 WEEK),\n     DATE_ADD('2021-01-10', INTERVAL 5 MONTH),\n     DATE_ADD('2021-01-10', INTERVAL 5 QUARTER),\n     DATE_ADD('2021-01-10', INTERVAL 5 YEAR),\n     DATE_ADD('2021-01-10', INTERVAL '5.000005' SECOND_MICROSECOND),\n     DATE_ADD('2021-01-10', INTERVAL '05:05.000005' MINUTE_MICROSECOND),\n     DATE_ADD('2021-01-10', INTERVAL '05:05' MINUTE_SECOND),\n     DATE_ADD('2021-01-10', INTERVAL '05:05:05.000005' HOUR_MICROSECOND),\n     DATE_ADD('2021-01-10', INTERVAL '05:05:05' HOUR_SECOND),\n     DATE_ADD('2021-01-10', INTERVAL '05:05' HOUR_MINUTE),\n     DATE_ADD('2021-01-10', INTERVAL '01 05:05:05.000005' DAY_MICROSECOND),\n     DATE_ADD('2021-01-10', INTERVAL '01 05:05:05' DAY_SECOND),\n     DATE_ADD('2021-01-10', INTERVAL '01 05:05' DAY_MINUTE),\n     DATE_ADD('2021-01-10', INTERVAL '01 05' DAY_HOUR),\n     DATE_ADD('2021-01-10', INTERVAL '1-01' YEAR_MONTH)\n     \\G\n*************************** 1. row ***************************\n                                      DATE_ADD(NOW(), INTERVAL 5 DAY): 2021-04-21 16:04:53\n                       DATE_ADD('2014-01-10', INTERVAL 5 MICROSECOND): 2021-01-10 00:00:00.000005\n                            DATE_ADD('2014-01-10', INTERVAL 5 SECOND): 2021-01-10 00:00:05\n                            DATE_ADD('2014-01-10', INTERVAL 5 MINUTE): 2021-01-10 00:05:00\n                              DATE_ADD('2014-01-10', INTERVAL 5 HOUR): 2021-01-10 05:00:00\n                               DATE_ADD('2014-01-10', INTERVAL 5 DAY): 2021-01-15\n                              DATE_ADD('2014-01-10', INTERVAL 5 WEEK): 2021-02-14\n                             DATE_ADD('2014-01-10', INTERVAL 5 MONTH): 2021-06-10\n                           DATE_ADD('2014-01-10', INTERVAL 5 QUARTER): 2021-04-10\n                              DATE_ADD('2014-01-10', INTERVAL 5 YEAR): 2021-01-10\n       DATE_ADD('2014-01-10', INTERVAL '5.000005' SECOND_MICROSECOND): 2021-01-10 00:00:05.000005\n   DATE_ADD('2014-01-10', INTERVAL '05:05.000005' MINUTE_MICROSECOND): 2021-01-10 00:05:05.000005\n               DATE_ADD('2014-01-10', INTERVAL '05:05' MINUTE_SECOND): 2021-01-10 00:05:05\n  DATE_ADD('2014-01-10', INTERVAL '05:05:05.000005' HOUR_MICROSECOND): 2021-01-10 05:05:05.000005\n              DATE_ADD('2014-01-10', INTERVAL '05:05:05' HOUR_SECOND): 2021-01-10 05:05:05\n                 DATE_ADD('2014-01-10', INTERVAL '05:05' HOUR_MINUTE): 2021-01-10 05:05:00\nDATE_ADD('2014-01-10', INTERVAL '01 05:05:05.000005' DAY_MICROSECOND): 2021-01-11 05:05:05.000005\n            DATE_ADD('2014-01-10', INTERVAL '01 05:05:05' DAY_SECOND): 2021-01-11 05:05:05\n               DATE_ADD('2014-01-10', INTERVAL '01 05:05' DAY_MINUTE): 2021-01-11 05:05:00\n                    DATE_ADD('2014-01-10', INTERVAL '01 05' DAY_HOUR): 2021-01-11 05:00:00\n                   DATE_ADD('2014-01-10', INTERVAL '1-01' YEAR_MONTH): 2021-02-10\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT\n     DATE_ADD(NOW(), INTERVAL 5 DAY),\n     DATE_ADD('2021-01-10', INTERVAL 5 MICROSECOND),\n     DATE_ADD('2021-01-10', INTERVAL 5 SECOND),\n     DATE_ADD('2021-01-10', INTERVAL 5 MINUTE),\n     DATE_ADD('2021-01-10', INTERVAL 5 HOUR),\n     DATE_ADD('2021-01-10', INTERVAL 5 DAY),\n     DATE_ADD('2021-01-10', INTERVAL 5 WEEK),\n     DATE_ADD('2021-01-10', INTERVAL 5 MONTH),\n     DATE_ADD('2021-01-10', INTERVAL 5 QUARTER),\n     DATE_ADD('2021-01-10', INTERVAL 5 YEAR),\n     DATE_ADD('2021-01-10', INTERVAL '5.000005' SECOND_MICROSECOND),\n     DATE_ADD('2021-01-10', INTERVAL '05:05.000005' MINUTE_MICROSECOND),\n     DATE_ADD('2021-01-10', INTERVAL '05:05' MINUTE_SECOND),\n     DATE_ADD('2021-01-10', INTERVAL '05:05:05.000005' HOUR_MICROSECOND),\n     DATE_ADD('2021-01-10', INTERVAL '05:05:05' HOUR_SECOND),\n     DATE_ADD('2021-01-10', INTERVAL '05:05' HOUR_MINUTE),\n     DATE_ADD('2021-01-10', INTERVAL '01 05:05:05.000005' DAY_MICROSECOND),\n     DATE_ADD('2021-01-10', INTERVAL '01 05:05:05' DAY_SECOND),\n     DATE_ADD('2021-01-10', INTERVAL '01 05:05' DAY_MINUTE),\n     DATE_ADD('2021-01-10', INTERVAL '01 05' DAY_HOUR),\n     DATE_ADD('2021-01-10', INTERVAL '1-01' YEAR_MONTH)\n     \\G\n*************************** 1. row ***************************\n                                      DATE_ADD(NOW(), INTERVAL 5 DAY): 2021-04-21 16:04:53\n                       DATE_ADD('2014-01-10', INTERVAL 5 MICROSECOND): 2021-01-10 00:00:00.000005\n                            DATE_ADD('2014-01-10', INTERVAL 5 SECOND): 2021-01-10 00:00:05\n                            DATE_ADD('2014-01-10', INTERVAL 5 MINUTE): 2021-01-10 00:05:00\n                              DATE_ADD('2014-01-10', INTERVAL 5 HOUR): 2021-01-10 05:00:00\n                               DATE_ADD('2014-01-10', INTERVAL 5 DAY): 2021-01-15\n                              DATE_ADD('2014-01-10', INTERVAL 5 WEEK): 2021-02-14\n                             DATE_ADD('2014-01-10', INTERVAL 5 MONTH): 2021-06-10\n                           DATE_ADD('2014-01-10', INTERVAL 5 QUARTER): 2021-04-10\n                              DATE_ADD('2014-01-10', INTERVAL 5 YEAR): 2021-01-10\n       DATE_ADD('2014-01-10', INTERVAL '5.000005' SECOND_MICROSECOND): 2021-01-10 00:00:05.000005\n   DATE_ADD('2014-01-10', INTERVAL '05:05.000005' MINUTE_MICROSECOND): 2021-01-10 00:05:05.000005\n               DATE_ADD('2014-01-10', INTERVAL '05:05' MINUTE_SECOND): 2021-01-10 00:05:05\n  DATE_ADD('2014-01-10', INTERVAL '05:05:05.000005' HOUR_MICROSECOND): 2021-01-10 05:05:05.000005\n              DATE_ADD('2014-01-10', INTERVAL '05:05:05' HOUR_SECOND): 2021-01-10 05:05:05\n                 DATE_ADD('2014-01-10', INTERVAL '05:05' HOUR_MINUTE): 2021-01-10 05:05:00\nDATE_ADD('2014-01-10', INTERVAL '01 05:05:05.000005' DAY_MICROSECOND): 2021-01-11 05:05:05.000005\n            DATE_ADD('2014-01-10', INTERVAL '01 05:05:05' DAY_SECOND): 2021-01-11 05:05:05\n               DATE_ADD('2014-01-10', INTERVAL '01 05:05' DAY_MINUTE): 2021-01-11 05:05:00\n                    DATE_ADD('2014-01-10', INTERVAL '01 05' DAY_HOUR): 2021-01-11 05:00:00\n                   DATE_ADD('2014-01-10', INTERVAL '1-01' YEAR_MONTH): 2021-02-10\n1 row in set\n"
        ]
    },
    "DATE_FORMAT": {
        "Title": [
            "DATE_FORMAT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823428"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "DATE_FORMAT(date, format)\n",
        "Description": [],
        "Illustration": [
            "将日期时间以指定格式输出。date 表示日期时间，format 表示输出格式。",
            "以下为所有输出格式列表：",
            "\n\n\n格式符\n含义\n格式\n\n\n\n\n%a\n星期的英文缩写。\nSun..Sat\n\n\n%b\n月份的英文缩写。\nJan..Dec\n\n\n%c\n月份的数字形式。\n1..12\n\n\n%D\n日的英文缩写。\n1st..31st\n\n\n%d\n日的数字形式。\n01..31\n\n\n%e\n日的数字形式。\n1.. 31\n\n\n%f\n微秒。\n000000..999999\n\n\n%H\n小时。\n00..23\n\n\n%h\n小时。\n01..12\n\n\n%I\n小时。\n01..12\n\n\n%i\n分钟。\n00..59\n\n\n%j\n一年中的第几天。\n001..366\n\n\n%k\n小时。\n0..23\n\n\n%l\n小时。\n0..12\n\n\n%M\n月份的英文名称。\nJanuary..December\n\n\n%m\n月份的数字形式。\n01..12\n\n\n%p\n上午或下午。\nAM/PM\n\n\n%r\n12 小时制时间。\nhh:mm:ss AM/PM\n\n\n%S\n秒。\n00..59\n\n\n%s\n秒。\n00..59\n\n\n%T\n24 小时制时间。\nhh:mm:ss\n\n\n%U\n一年中的第几周，周日为每周第一天。\n00..53\n\n\n%u\n一年中的第几周，周一为每周第一天。\n00..53\n\n\n%V\n一年中的第几周，周日为每周第一天（和 %X 同时使用）。\n01..53\n\n\n%v\n一年中的第几周，周一为每周第一天（和 %x 同时使用）。\n01..53\n\n\n%W\n星期的英文名称。\nSunday..Saturday\n\n\n%w\n一周中的第几天。\n0=Sunday..6=Saturday\n\n\n%X\n一周所属的年份，周日为每周第一天（和 %V 同时使用）。\n\n\n\n%x\n一周所属的年份，周一为每周第一天（和 %v 同时使用）。\n\n\n\n%Y\n四位年份。\n\n\n\n%y\n两位年份。\n\n\n\n%%\n文字字符，输出一个 %。\n\n\n\n"
        ],
        "Examples": [
            "obclient> SELECT\n          DATE_FORMAT('2014-01-01', '%Y-%M-%d'),\n          DATE_FORMAT('2014-01-01', '%X-%V'),\n          DATE_FORMAT('2014-01-01', '%U')\n          \\G\n*************************** 1. row ***************************\nDATE_FORMAT('2014-01-01', '%Y-%M-%d'): 2014-January-01\n   DATE_FORMAT('2014-01-01', '%X-%V'): 2013-52\n      DATE_FORMAT('2014-01-01', '%U'): 00\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT\n          DATE_FORMAT('2014-01-01', '%Y-%M-%d'),\n          DATE_FORMAT('2014-01-01', '%X-%V'),\n          DATE_FORMAT('2014-01-01', '%U')\n          \\G\n*************************** 1. row ***************************\nDATE_FORMAT('2014-01-01', '%Y-%M-%d'): 2014-January-01\n   DATE_FORMAT('2014-01-01', '%X-%V'): 2013-52\n      DATE_FORMAT('2014-01-01', '%U'): 00\n1 row in set\n"
        ]
    },
    "DATE_SUB": {
        "Title": [
            "DATE_SUB"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823381"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "DATE_SUB(date,INTERVAL expr unit)\n",
        "Description": [],
        "Illustration": [
            "返回日期时间 date 减去 expr 后的值。",
            "date 表示日期时间基准，可以是 DATE 类型、TIME 类型或 DATETIME 类型。",
            "expr 表示时间间隔，可以为负值。",
            "unit 表示时间间隔单位。",
            "以下为所有时间间隔单位列表：",
            "\n\n\n单位\n类型\n含义\n格式\n\n\n\n\nMICROSECOND\n独立\n微秒\nMICROSECONDS\n\n\nSECOND\n独立\n秒\nSECONDS\n\n\nMINUTE\n独立\n分钟\nMINUTES\n\n\nHOUR\n独立\n小时\nHOURS\n\n\nDAY\n独立\n天\nDAYS\n\n\nWEEK\n独立\n周\nWEEKS\n\n\nMONTH\n独立\n月\nMONTHS\n\n\nQUARTER\n独立\n季度\nQUARTERS\n\n\nYEAR\n独立\n年\nYEARS\n\n\nSECOND_MICROSECOND\n组合\n秒到微秒\n'SECONDS.MICROSECONDS'\n\n\nMINUTE_MICROSECOND\n组合\n分钟到微秒\n'MINUTES:SECONDS.MICROSECONDS'\n\n\nMINUTE_SECOND\n组合\n分钟到秒\n'MINUTES:SECONDS'\n\n\nHOUR_MICROSECOND\n组合\n小时到微秒\n'HOURS:MINUTES:SECONDS.MICROSECONDS'\n\n\nHOUR_SECOND\n组合\n小时到秒\n'HOURS:MINUTES:SECONDS'\n\n\nHOUR_MINUTE\n组合\n小时到分钟\n'HOURS:MINUTES'\n\n\nDAY_SECOND\n组合\n天到秒\n'DAYS HOURS:MINUTES:SECONDS'\n\n\nDAY_MINUTE\n组合\n天到分钟\n'DDAYSD HOURS:MINUTES'\n\n\nDAY_HOUR\n组合\n天到小时\n'DAYS HOURS'\n\n\nYEAR_MONTH\n组合\n年到月\n'YEARS-MONTHS'\n\n\n"
        ],
        "Examples": [
            "obclient> SELECT\n     DATE_SUB(NOW(), INTERVAL 5 DAY),\n     DATE_SUB('2014-01-10', INTERVAL 5 MICROSECOND),\n     DATE_SUB('2014-01-10', INTERVAL 5 SECOND),\n     DATE_SUB('2014-01-10', INTERVAL 5 MINUTE),\n     DATE_SUB('2014-01-10', INTERVAL 5 HOUR),\n     DATE_SUB('2014-01-10', INTERVAL 5 DAY),\n     DATE_SUB('2014-01-10', INTERVAL 5 WEEK),\n     DATE_SUB('2014-01-10', INTERVAL 5 MONTH),\n     DATE_SUB('2014-01-10', INTERVAL 5 QUARTER),\n     DATE_SUB('2014-01-10', INTERVAL 5 YEAR),\n     DATE_SUB('2014-01-10', INTERVAL '5.000005' SECOND_MICROSECOND),\n     DATE_SUB('2014-01-10', INTERVAL '05:05.000005' MINUTE_MICROSECOND),\n     DATE_SUB('2014-01-10', INTERVAL '05:05' MINUTE_SECOND),\n     DATE_SUB('2014-01-10', INTERVAL '05:05:05.000005' HOUR_MICROSECOND),\n     DATE_SUB('2014-01-10', INTERVAL '05:05:05' HOUR_SECOND),\n     DATE_SUB('2014-01-10', INTERVAL '05:05' HOUR_MINUTE),\n     DATE_SUB('2014-01-10', INTERVAL '01 05:05:05.000005' DAY_MICROSECOND),\n     DATE_SUB('2014-01-10', INTERVAL '01 05:05:05' DAY_SECOND),\n     DATE_SUB('2014-01-10', INTERVAL '01 05:05' DAY_MINUTE),\n     DATE_SUB('2014-01-10', INTERVAL '01 05' DAY_HOUR),\n     DATE_SUB('2014-01-10', INTERVAL '1-01' YEAR_MONTH)\n     \\G\n*************************** 1. row ***************************\n                                      DATE_SUB(NOW(), INTERVAL 5 DAY): 2021-08-18 14:56:32\n                       DATE_SUB('2014-01-10', INTERVAL 5 MICROSECOND): 2014-01-09 23:59:59.999995\n                            DATE_SUB('2014-01-10', INTERVAL 5 SECOND): 2014-01-09 23:59:55\n                            DATE_SUB('2014-01-10', INTERVAL 5 MINUTE): 2014-01-09 23:55:00\n                              DATE_SUB('2014-01-10', INTERVAL 5 HOUR): 2014-01-09 19:00:00\n                               DATE_SUB('2014-01-10', INTERVAL 5 DAY): 2014-01-05\n                              DATE_SUB('2014-01-10', INTERVAL 5 WEEK): 2013-12-06\n                             DATE_SUB('2014-01-10', INTERVAL 5 MONTH): 2013-08-10\n                           DATE_SUB('2014-01-10', INTERVAL 5 QUARTER): 2012-10-10\n                              DATE_SUB('2014-01-10', INTERVAL 5 YEAR): 2009-01-10\n       DATE_SUB('2014-01-10', INTERVAL '5.000005' SECOND_MICROSECOND): 2014-01-09 23:59:54.999995\n   DATE_SUB('2014-01-10', INTERVAL '05:05.000005' MINUTE_MICROSECOND): 2014-01-09 23:54:54.999995\n               DATE_SUB('2014-01-10', INTERVAL '05:05' MINUTE_SECOND): 2014-01-09 23:54:55\n  DATE_SUB('2014-01-10', INTERVAL '05:05:05.000005' HOUR_MICROSECOND): 2014-01-09 18:54:54.999995\n              DATE_SUB('2014-01-10', INTERVAL '05:05:05' HOUR_SECOND): 2014-01-09 18:54:55\n                 DATE_SUB('2014-01-10', INTERVAL '05:05' HOUR_MINUTE): 2014-01-09 18:55:00\nDATE_SUB('2014-01-10', INTERVAL '01 05:05:05.000005' DAY_MICROSECOND): 2014-01-08 18:54:54.999995\n            DATE_SUB('2014-01-10', INTERVAL '01 05:05:05' DAY_SECOND): 2014-01-08 18:54:55\n               DATE_SUB('2014-01-10', INTERVAL '01 05:05' DAY_MINUTE): 2014-01-08 18:55:00\n                    DATE_SUB('2014-01-10', INTERVAL '01 05' DAY_HOUR): 2014-01-08 19:00:00\n                   DATE_SUB('2014-01-10', INTERVAL '1-01' YEAR_MONTH): 2012-12-10\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT\n     DATE_SUB(NOW(), INTERVAL 5 DAY),\n     DATE_SUB('2014-01-10', INTERVAL 5 MICROSECOND),\n     DATE_SUB('2014-01-10', INTERVAL 5 SECOND),\n     DATE_SUB('2014-01-10', INTERVAL 5 MINUTE),\n     DATE_SUB('2014-01-10', INTERVAL 5 HOUR),\n     DATE_SUB('2014-01-10', INTERVAL 5 DAY),\n     DATE_SUB('2014-01-10', INTERVAL 5 WEEK),\n     DATE_SUB('2014-01-10', INTERVAL 5 MONTH),\n     DATE_SUB('2014-01-10', INTERVAL 5 QUARTER),\n     DATE_SUB('2014-01-10', INTERVAL 5 YEAR),\n     DATE_SUB('2014-01-10', INTERVAL '5.000005' SECOND_MICROSECOND),\n     DATE_SUB('2014-01-10', INTERVAL '05:05.000005' MINUTE_MICROSECOND),\n     DATE_SUB('2014-01-10', INTERVAL '05:05' MINUTE_SECOND),\n     DATE_SUB('2014-01-10', INTERVAL '05:05:05.000005' HOUR_MICROSECOND),\n     DATE_SUB('2014-01-10', INTERVAL '05:05:05' HOUR_SECOND),\n     DATE_SUB('2014-01-10', INTERVAL '05:05' HOUR_MINUTE),\n     DATE_SUB('2014-01-10', INTERVAL '01 05:05:05.000005' DAY_MICROSECOND),\n     DATE_SUB('2014-01-10', INTERVAL '01 05:05:05' DAY_SECOND),\n     DATE_SUB('2014-01-10', INTERVAL '01 05:05' DAY_MINUTE),\n     DATE_SUB('2014-01-10', INTERVAL '01 05' DAY_HOUR),\n     DATE_SUB('2014-01-10', INTERVAL '1-01' YEAR_MONTH)\n     \\G\n*************************** 1. row ***************************\n                                      DATE_SUB(NOW(), INTERVAL 5 DAY): 2021-08-18 14:56:32\n                       DATE_SUB('2014-01-10', INTERVAL 5 MICROSECOND): 2014-01-09 23:59:59.999995\n                            DATE_SUB('2014-01-10', INTERVAL 5 SECOND): 2014-01-09 23:59:55\n                            DATE_SUB('2014-01-10', INTERVAL 5 MINUTE): 2014-01-09 23:55:00\n                              DATE_SUB('2014-01-10', INTERVAL 5 HOUR): 2014-01-09 19:00:00\n                               DATE_SUB('2014-01-10', INTERVAL 5 DAY): 2014-01-05\n                              DATE_SUB('2014-01-10', INTERVAL 5 WEEK): 2013-12-06\n                             DATE_SUB('2014-01-10', INTERVAL 5 MONTH): 2013-08-10\n                           DATE_SUB('2014-01-10', INTERVAL 5 QUARTER): 2012-10-10\n                              DATE_SUB('2014-01-10', INTERVAL 5 YEAR): 2009-01-10\n       DATE_SUB('2014-01-10', INTERVAL '5.000005' SECOND_MICROSECOND): 2014-01-09 23:59:54.999995\n   DATE_SUB('2014-01-10', INTERVAL '05:05.000005' MINUTE_MICROSECOND): 2014-01-09 23:54:54.999995\n               DATE_SUB('2014-01-10', INTERVAL '05:05' MINUTE_SECOND): 2014-01-09 23:54:55\n  DATE_SUB('2014-01-10', INTERVAL '05:05:05.000005' HOUR_MICROSECOND): 2014-01-09 18:54:54.999995\n              DATE_SUB('2014-01-10', INTERVAL '05:05:05' HOUR_SECOND): 2014-01-09 18:54:55\n                 DATE_SUB('2014-01-10', INTERVAL '05:05' HOUR_MINUTE): 2014-01-09 18:55:00\nDATE_SUB('2014-01-10', INTERVAL '01 05:05:05.000005' DAY_MICROSECOND): 2014-01-08 18:54:54.999995\n            DATE_SUB('2014-01-10', INTERVAL '01 05:05:05' DAY_SECOND): 2014-01-08 18:54:55\n               DATE_SUB('2014-01-10', INTERVAL '01 05:05' DAY_MINUTE): 2014-01-08 18:55:00\n                    DATE_SUB('2014-01-10', INTERVAL '01 05' DAY_HOUR): 2014-01-08 19:00:00\n                   DATE_SUB('2014-01-10', INTERVAL '1-01' YEAR_MONTH): 2012-12-10\n1 row in set\n"
        ]
    },
    "DAY": {
        "Title": [
            "DAY"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823374"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "DAY(date)\n",
        "Description": [],
        "Illustration": [
            "返回 date 中月份的日期，范围为 1 到 31。DAY() 是 DAYOFMONTH() 的同义词。"
        ],
        "Examples": [
            "obclient> SELECT DAY('2008-12-31');\n+--------------------------+\n| DAY('2008-12-31') |\n+--------------------------+\n|                       31 |\n+--------------------------+\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT DAY('2008-12-31');\n+--------------------------+\n| DAY('2008-12-31') |\n+--------------------------+\n|                       31 |\n+--------------------------+\n"
        ]
    },
    "DAYNAME": {
        "Title": [
            "DAYNAME"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823383"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "DAYNAME(date)\n",
        "Description": [],
        "Illustration": [
            "返回日期所对应的工作日名称。"
        ],
        "Examples": [
            "obclient> SELECT DAYNAME('2022-09-08');\n+-----------------------+\n| DAYNAME('2022-09-08') |\n+-----------------------+\n| Thursday              |\n+-----------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT DAYNAME('2022-09-08');\n+-----------------------+\n| DAYNAME('2022-09-08') |\n+-----------------------+\n| Thursday              |\n+-----------------------+\n1 row in set\n"
        ]
    },
    "DAYOFMONTH": {
        "Title": [
            "DAYOFMONTH"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823378"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "DAYOFMONTH(date)\n",
        "Description": [],
        "Illustration": [
            "返回日期或时间日期 date 在一个月中的位置。"
        ],
        "Examples": [
            "obclient> SELECT DAYOFMONTH('2008-12-31');\n+--------------------------+\n| DAYOFMONTH('2008-12-31') |\n+--------------------------+\n|                       31 |\n+--------------------------+\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT DAYOFMONTH('2008-12-31');\n+--------------------------+\n| DAYOFMONTH('2008-12-31') |\n+--------------------------+\n|                       31 |\n+--------------------------+\n"
        ]
    },
    "DAYOFWEEK": {
        "Title": [
            "DAYOFWEEK"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823427"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "DAYOFWEEK(date)\n",
        "Description": [],
        "Illustration": [
            "返回日期或时间日期 date 在一周中的位置，从周日开始计算。"
        ],
        "Examples": [
            "obclient> SELECT DAYOFWEEK('2021-07-15');\n+-------------------------+\n| DAYOFWEEK('2021-07-15') |\n+-------------------------+\n|                       5 |\n+-------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT DAYOFWEEK('2021-07-15');\n+-------------------------+\n| DAYOFWEEK('2021-07-15') |\n+-------------------------+\n|                       5 |\n+-------------------------+\n1 row in set\n"
        ]
    },
    "DAYOFYEAR": {
        "Title": [
            "DAYOFYEAR"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823409"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "DAYOFYEAR(date)\n",
        "Description": [],
        "Illustration": [
            "返回日期或时间日期 date 在一年中的位置。"
        ],
        "Examples": [
            "obclient> SELECT DAYOFYEAR('2021-07-15');\n+-------------------------+\n| DAYOFYEAR('2021-07-15') |\n+-------------------------+\n|                     196 |\n+-------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT DAYOFYEAR('2021-07-15');\n+-------------------------+\n| DAYOFYEAR('2021-07-15') |\n+-------------------------+\n|                     196 |\n+-------------------------+\n1 row in set\n"
        ]
    },
    "DECODE": {
        "Title": [
            "DECODE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822996"
        ],
        "Category": [
            "Encryption Functions"
        ],
        "Feature": "DECODE(crypt_str,pass_str)\n",
        "Description": [],
        "Illustration": [
            "DECODE() 使用 pass_str 作为密码对加密的字符串 crypt_str 进行解密并返回解密后的字符串。"
        ],
        "Examples": [
            "obclient> SELECT DECODE(ENCODE('secret','cry'), 'cry');\n+---------------------------------------+\n| DECODE(ENCODE('secret','cry'), 'cry') |\n+---------------------------------------+\n| secret                                |\n+---------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT DECODE(ENCODE('secret','cry'), 'cry');\n+---------------------------------------+\n| DECODE(ENCODE('secret','cry'), 'cry') |\n+---------------------------------------+\n| secret                                |\n+---------------------------------------+\n1 row in set\n"
        ]
    },
    "DEFAULT": {
        "Title": [
            "DEFAULT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822948"
        ],
        "Category": [
            "Miscellaneous Functions"
        ],
        "Feature": "DEFAULT(col_name)\n",
        "Description": [],
        "Illustration": [
            "返回表列的默认值，如果指定的列没有默认值，则会返回 NULL。"
        ],
        "Examples": [
            "obclient> CREATE TABLE t1 (id int,i int DEFAULT 1);\nQuery OK, 0 rows affected\nobclient> INSERT INTO t1 VALUES (1,3);\nQuery OK, 1 row affected\nobclient> UPDATE t1 SET i = DEFAULT(i)+1 WHERE id < 100;\nQuery OK, 1 row affected\nRows matched: 1  Changed: 1  Warnings: 0\nobclient> SELECT * FROM t;\n+------+------+\n| id   | i    |\n+------+------+\n|    1 |    2 |\n+------+------+\n1 row in set\n\nobclient> CREATE TABLE t2 (id int,i int);\nQuery OK, 0 rows affected\nobclient> INSERT INTO t2 VALUES (1,3);\nQuery OK, 1 row affected\nobclient> UPDATE t2 SET i = DEFAULT(i)+1 WHERE id < 100;\nobclient> SELECT * FROM t2;\n+------+------+\n| id   | i    |\n+------+------+\n|    1 | NULL |\n+------+------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> CREATE TABLE t1 (id int,i int DEFAULT 1);\nQuery OK, 0 rows affected\nobclient> INSERT INTO t1 VALUES (1,3);\nQuery OK, 1 row affected\nobclient> UPDATE t1 SET i = DEFAULT(i)+1 WHERE id < 100;\nQuery OK, 1 row affected\nRows matched: 1  Changed: 1  Warnings: 0\nobclient> SELECT * FROM t;\n+------+------+\n| id   | i    |\n+------+------+\n|    1 |    2 |\n+------+------+\n1 row in set\n\nobclient> CREATE TABLE t2 (id int,i int);\nQuery OK, 0 rows affected\nobclient> INSERT INTO t2 VALUES (1,3);\nQuery OK, 1 row affected\nobclient> UPDATE t2 SET i = DEFAULT(i)+1 WHERE id < 100;\nobclient> SELECT * FROM t2;\n+------+------+\n| id   | i    |\n+------+------+\n|    1 | NULL |\n+------+------+\n1 row in set\n"
        ]
    },
    "DEGREES": {
        "Title": [
            "DEGREES"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823343"
        ],
        "Category": [
            "Mathematical Functions"
        ],
        "Feature": "DEGREES(x)\n",
        "Description": [],
        "Illustration": [
            "DEGREES() 函数将参数 x 从弧度转换为度数并返回。"
        ],
        "Examples": [
            "obclient> SELECT DEGREES(PI());\n+---------------+\n| DEGREES(PI()) |\n+---------------+\n|           180 |\n+---------------+\n1 row in set\n\nobclient> SELECT DEGREES(PI()/2);\n+-------------------+\n| DEGREES(PI()/2) |\n+-------------------+\n|                90 |\n+-------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "如下示例分别将 PI() 的值和 PI()/2 的值转为对应的度数。",
            "obclient> SELECT DEGREES(PI());\n+---------------+\n| DEGREES(PI()) |\n+---------------+\n|           180 |\n+---------------+\n1 row in set\n\nobclient> SELECT DEGREES(PI()/2);\n+-------------------+\n| DEGREES(PI()/2) |\n+-------------------+\n|                90 |\n+-------------------+\n1 row in set\n"
        ]
    },
    "DENSE_RANK": {
        "Title": [
            "DENSE_RANK"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823038"
        ],
        "Category": [
            "Analysis Functions"
        ],
        "Feature": "DENSE_RANK() OVER([ query_partition_clause ] order_by_clause)\n",
        "Description": [],
        "Illustration": [
            "计算每一行数据在某列上的排序，该列由 order_by_clause 中的列决定。",
            "排名是连续的整数。对于相同排名的行，排名数值相同。"
        ],
        "Examples": [
            "CREATE TABLE employees(LAST_NAME CHAR(10), SALARY DECIMAL, JOB_ID CHAR(32));\nINSERT INTO employees VALUES('JIM', 2000, 'CLEANER');\nINSERT INTO employees VALUES('MIKE', 12000, 'ENGINEERING');\nINSERT INTO employees VALUES('LILY', 13000, 'ENGINEERING');\nINSERT INTO employees VALUES('IRIS', 11000, 'ENGINEERING');\nINSERT INTO employees VALUES('TOM', 11000, 'ENGINEERING');\nCOMMIT;\nQuery OK, 1 row affected\n\nobclient> SELECT LAST_NAME, RANK() OVER(PARTITION BY JOB_ID ORDER BY SALARY) RANK, DENSE_RANK() OVER(PARTITION BY JOB_ID ORDER BY SALARY) DENSE_RANK, PERCENT_RANK() OVER(PARTITION BY JOB_ID ORDER BY SALARY) PERCENT_RANK FROM employees;\n+-----------+------+------------+----------------------------------+\n| LAST_NAME | RANK | DENSE_RANK | PERCENT_RANK                     |\n+-----------+------+------------+----------------------------------+\n| JIM       |    1 |          1 | 0.000000000000000000000000000000 |\n| TOM       |    1 |          1 | 0.000000000000000000000000000000 |\n| IRIS      |    1 |          1 | 0.000000000000000000000000000000 |\n| MIKE      |    3 |          2 | 0.666666666666666666666666666667 |\n| LILY      |    4 |          3 | 1.000000000000000000000000000000 |\n+-----------+------+------------+----------------------------------+\n5 rows in set\n"
        ],
        "Detailed Examples": [
            "CREATE TABLE employees(LAST_NAME CHAR(10), SALARY DECIMAL, JOB_ID CHAR(32));\nINSERT INTO employees VALUES('JIM', 2000, 'CLEANER');\nINSERT INTO employees VALUES('MIKE', 12000, 'ENGINEERING');\nINSERT INTO employees VALUES('LILY', 13000, 'ENGINEERING');\nINSERT INTO employees VALUES('IRIS', 11000, 'ENGINEERING');\nINSERT INTO employees VALUES('TOM', 11000, 'ENGINEERING');\nCOMMIT;\nQuery OK, 1 row affected\n\nobclient> SELECT LAST_NAME, RANK() OVER(PARTITION BY JOB_ID ORDER BY SALARY) RANK, DENSE_RANK() OVER(PARTITION BY JOB_ID ORDER BY SALARY) DENSE_RANK, PERCENT_RANK() OVER(PARTITION BY JOB_ID ORDER BY SALARY) PERCENT_RANK FROM employees;\n+-----------+------+------------+----------------------------------+\n| LAST_NAME | RANK | DENSE_RANK | PERCENT_RANK                     |\n+-----------+------+------------+----------------------------------+\n| JIM       |    1 |          1 | 0.000000000000000000000000000000 |\n| TOM       |    1 |          1 | 0.000000000000000000000000000000 |\n| IRIS      |    1 |          1 | 0.000000000000000000000000000000 |\n| MIKE      |    3 |          2 | 0.666666666666666666666666666667 |\n| LILY      |    4 |          3 | 1.000000000000000000000000000000 |\n+-----------+------+------------+----------------------------------+\n5 rows in set\n"
        ]
    },
    "DES_DECRYPT": {
        "Title": [
            "DES_DECRYPT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822990"
        ],
        "Category": [
            "Encryption Functions"
        ],
        "Feature": "DES_DECRYPT(crypt_str[,key_str])\n",
        "Description": [],
        "Illustration": [
            "该函数用于解密由函数 DES_ENCRYPT() 加密的字符串。如果发生错误，该函数返回 NULL。 此功能仅在 OceanBase 数据库已配置为支持 SSL 时才有效。",
            "key_str 参数用于传递解密消息的密钥。如果没有指定 key_str 参数，DES_DECRYPT() 函数会检查加密字符串的第一个字节以确定用于加密原始字符串的 DES 密钥编号，然后从 DES 密钥文件中读取密钥以解密字符串。由此，要求用户必须具有 SUPER 权限。",
            "如果 crypt_str 参数不是加密字符串，则直接返回该字符串。"
        ],
        "Examples": [
            "obclient> SELECT DES_DECRYPT(DES_ENCRYPT('secret','cry'), 'cry');\n+-------------------------------------------------+\n| DES_DECRYPT(DES_ENCRYPT('secret','cry'), 'cry') |\n+-------------------------------------------------+\n| secret                                          |\n+-------------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT DES_DECRYPT(DES_ENCRYPT('secret','cry'), 'cry');\n+-------------------------------------------------+\n| DES_DECRYPT(DES_ENCRYPT('secret','cry'), 'cry') |\n+-------------------------------------------------+\n| secret                                          |\n+-------------------------------------------------+\n1 row in set\n"
        ]
    },
    "DES_ENCRYPT": {
        "Title": [
            "DES_ENCRYPT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822994"
        ],
        "Category": [
            "Encryption Functions"
        ],
        "Feature": "DES_ENCRYPT(str[,{key_num|key_str}])\n",
        "Description": [],
        "Illustration": [
            "此功能仅在 OceanBase 数据库已配置为支持 SSL 时才有效。",
            "key_str 参数用于传递加密密钥，用于加密 str。如果没有指定该参数，则使用 DES 密钥文件中的第一个密钥。key_num 参数的取值是 DES 密钥文件中的密钥编号（0 到 9）。",
            "返回字符串是一个二进制字符串，其中第一个字符是 CHAR(128 | key_num)。如果发生错误，DES_ENCRYPT() 返回 NULL。128 是为了更容易识别加密密钥。如果使用字符串密钥，则 key_num 为 127。",
            "结果中的字符串长度根据以下公式计算得出：",
            "new_len = orig_len + (8 - (orig_len % 8)) + 1\n",
            "DES 密钥文件中的每一行的格式为 key_num des_key_str_。每个 key_num 值必须是 0 到 9 范围内的数字。文件中的行可以按任何顺序排列。des_key_str 是用于加密信息的字符串。 数字和密钥之间至少应有一个空格。如果您没有为 DES_ENCRYPT() 指定任何密钥参数，则第一个密钥作为默认密钥。",
            "\n说明\nOceanBase 数据库当前版本还不支持用 --des_key_file 编辑 DES 密钥文件，所以目前 DES_ENCRYPT() 和 DES_DECRYPT() 从密钥文件中读到的密钥是和 MySQL 8.0 的默认密钥文件一样的。\n"
        ],
        "Examples": [
            "obclient [test]> SELECT DES_ENCRYPT('text', CONCAT('ob_random_salt','ob_secret_password'));\n+--------------------------------------------------------------------+\n| DES_ENCRYPT('text', CONCAT('ob_random_salt','ob_secret_password')) |\n+--------------------------------------------------------------------+\n| ]\u0005UA                                                              |\n+--------------------------------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient [test]> SELECT DES_ENCRYPT('text', CONCAT('ob_random_salt','ob_secret_password'));\n+--------------------------------------------------------------------+\n| DES_ENCRYPT('text', CONCAT('ob_random_salt','ob_secret_password')) |\n+--------------------------------------------------------------------+\n| ]\u0005UA                                                              |\n+--------------------------------------------------------------------+\n1 row in set\n"
        ]
    },
    "ELT": {
        "Title": [
            "ELT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823482"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "ELT(N, str1, str2, str3,...)\n",
        "Description": [],
        "Illustration": [
            "返回检索的字符串的索引。",
            "如果 N=1，则返回值为 str1；如果 N=2，则返回值为 str2；以此类推。如果 N 小于 1 或大于参数的数目，则返回值为 NULL。",
            "ELT() 是 FIELD() 的补数。"
        ],
        "Examples": [
            "obclient> SELECT ELT(3, 'abc1', 'abc2', 'abc', 'abc4', 'abc'), ELT(0, 'null1', NULL);\n+----------------------------------------------+-----------------------+\n| ELT(3, 'abc1', 'abc2', 'abc', 'abc4', 'abc') | ELT(0, 'NULL1', NULL) |\n+----------------------------------------------+-----------------------+\n| abc                                          | NULL                  |\n+----------------------------------------------+-----------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT ELT(3, 'abc1', 'abc2', 'abc', 'abc4', 'abc'), ELT(0, 'null1', NULL);\n+----------------------------------------------+-----------------------+\n| ELT(3, 'abc1', 'abc2', 'abc', 'abc4', 'abc') | ELT(0, 'NULL1', NULL) |\n+----------------------------------------------+-----------------------+\n| abc                                          | NULL                  |\n+----------------------------------------------+-----------------------+\n1 row in set\n"
        ]
    },
    "ENCODE": {
        "Title": [
            "ENCODE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822992"
        ],
        "Category": [
            "Encryption Functions"
        ],
        "Feature": "ENCODE(str,pass_str)\n",
        "Description": [],
        "Illustration": [
            "ENCODE() 使用 pass_str 作为密码加密字符串。返回的结果是一个与 str 长度相同的二进制字符串。要解密该结果，请使用 DECODE()。"
        ],
        "Examples": [
            "obclient> SELECT ENCODE('text', CONCAT('ob_random_salt','ob_secret_password'))\n+---------------------------------------------------------------+\n| ENCODE('text', CONCAT('ob_random_salt','ob_secret_password')) |\n+---------------------------------------------------------------+\n5\u0016+                                                          |\n+---------------------------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "使用 ENCODE() 时必须使用盐值来降低风险。",
            "obclient> SELECT ENCODE('text', CONCAT('ob_random_salt','ob_secret_password'))\n+---------------------------------------------------------------+\n| ENCODE('text', CONCAT('ob_random_salt','ob_secret_password')) |\n+---------------------------------------------------------------+\n5\u0016+                                                          |\n+---------------------------------------------------------------+\n1 row in set\n"
        ]
    },
    "ENCRYPT": {
        "Title": [
            "ENCRYPT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822987"
        ],
        "Category": [
            "Encryption Functions"
        ],
        "Feature": "ENCRYPT(str[,salt])\n",
        "Description": [],
        "Illustration": [
            "ENCRYPT() 使用 Unix crypt() 调用加密 str 并返回二进制字符串。salt 参数必须是至少包含两个字符的字符串，否则结果为 NULL。如果没有指定 salt 参数，则使用随机值。",
            "因为系统调用需要一个以零字节结尾的字符串，所以不建议将 ENCRYPT() 与 ucs2、utf16、utf16le 或 utf32 多字节字符集一起使用。",
            "如果系统不支持 crypt()，则 ENCRYPT() 始终返回 NULL。"
        ],
        "Examples": [
            "obclient> SELECT ENCRYPT('hello');\n+------------------+\n| ENCRYPT('hello') |\n+------------------+\n| XROflfjMAx1GA    |\n+------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT ENCRYPT('hello');\n+------------------+\n| ENCRYPT('hello') |\n+------------------+\n| XROflfjMAx1GA    |\n+------------------+\n1 row in set\n"
        ]
    },
    "EXP": {
        "Title": [
            "EXP"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823334"
        ],
        "Category": [
            "Mathematical Functions"
        ],
        "Feature": "EXP(X)\n",
        "Description": [],
        "Illustration": [
            "返回自然底数 e 的 X 次幂。"
        ],
        "Examples": [
            "obclient> SELECT EXP(2);\n+------------------+\n| EXP(2)           |\n+------------------+\n| 7.38905609893065 |\n+------------------+\n1 row in set\n\nobclient> SELECT EXP(0);\n+--------+\n| EXP(0) |\n+--------+\n|      1 |\n+--------+\n1 row in set\n\nobclient> SELECT EXP(-2);\n+--------------------+\n| EXP(-2)            |\n+--------------------+\n| 0.1353352832366127 |\n+--------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT EXP(2);\n+------------------+\n| EXP(2)           |\n+------------------+\n| 7.38905609893065 |\n+------------------+\n1 row in set\n\nobclient> SELECT EXP(0);\n+--------+\n| EXP(0) |\n+--------+\n|      1 |\n+--------+\n1 row in set\n\nobclient> SELECT EXP(-2);\n+--------------------+\n| EXP(-2)            |\n+--------------------+\n| 0.1353352832366127 |\n+--------------------+\n1 row in set\n"
        ]
    },
    "EXPORT_SET": {
        "Title": [
            "EXPORT_SET"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823430"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "EXPORT_SET(bits,on,off[,separator[,number_of_bits]])\n",
        "Description": [],
        "Illustration": [
            "返回一个字符串，对于在 bits 值中设置的位，会得到一个 on 字符串；对于未在 bits 值中设置的位，都会得到一个 off 字符串。从右到左检查 bits 中的位（即从低位到高位）。",
            "字符串从左到右添加到结果中，由 separator 字符串分隔（默认为逗号字符\",\"）。检查的位数由 number_of_bits 给出，如果未指定，则默认为 64 位。如果大于 64 位，则 number_of_bits 将被静默剪裁为 64 位。number_of_bits 被视为无符号整数，因此值 -1 与 64 实际上相同。"
        ],
        "Examples": [
            "obclient> SELECT EXPORT_SET(6, '1','0',',', 10);\n+--------------------------------+\n| EXPORT_SET(6, '1','0',',', 10) |\n+--------------------------------+\n| 0,1,1,0,0,0,0,0,0,0            |\n+--------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT EXPORT_SET(6, '1','0',',', 10);\n+--------------------------------+\n| EXPORT_SET(6, '1','0',',', 10) |\n+--------------------------------+\n| 0,1,1,0,0,0,0,0,0,0            |\n+--------------------------------+\n1 row in set\n"
        ]
    },
    "EXTRACT": {
        "Title": [
            "EXTRACT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823385"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "EXTRACT(unit FROM date)\n",
        "Description": [],
        "Illustration": [
            "以整数类型返回 date 的指定部分值。如果指定多个部分，则将所有值按顺序拼接。",
            "有关参数 unit 的详细信息，请参见 DATE_ADD。当 unit 为 WEEK 时，以周日为每周第一天。"
        ],
        "Examples": [
            "obclient> SELECT EXTRACT(WEEK FROM '2013-01-01'),\n     EXTRACT(WEEK FROM '2013-01-06'),\n     EXTRACT(YEAR_MONTH FROM '2012-03-09'),\n     EXTRACT(DAY FROM NOW())\\G;\n*************************** 1. row ***************************\n      EXTRACT(WEEK FROM '2013-01-01'): 0\n      EXTRACT(WEEK FROM '2013-01-06'): 1\nEXTRACT(YEAR_MONTH FROM '2012-03-09'): 201203\n              EXTRACT(DAY FROM NOW()): 16\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT EXTRACT(WEEK FROM '2013-01-01'),\n     EXTRACT(WEEK FROM '2013-01-06'),\n     EXTRACT(YEAR_MONTH FROM '2012-03-09'),\n     EXTRACT(DAY FROM NOW())\\G;\n*************************** 1. row ***************************\n      EXTRACT(WEEK FROM '2013-01-01'): 0\n      EXTRACT(WEEK FROM '2013-01-06'): 1\nEXTRACT(YEAR_MONTH FROM '2012-03-09'): 201203\n              EXTRACT(DAY FROM NOW()): 16\n1 row in set\n"
        ]
    },
    "EXTRACTVALUE": {
        "Title": [
            "EXTRACTVALUE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823284"
        ],
        "Category": [
            "XML Functions"
        ],
        "Feature": "EXTRACTVALUE(xml_frag, xpath_expr)\n",
        "Description": [
            "该函数用于从 XML 字符串中提取指定路径的值。"
        ],
        "Illustration": [
            "\n\n\n字段\n说明\n\n\n\n\nxml_frag\n指定的 XML 字符串，可以是一个 XML 文档或片段。\n\n\nxpath_expr\n指定要提取的值的路径（XPath）表达式。\n\n\n",
            "返回类型为 LONGTEXT。"
        ],
        "Examples": [
            "obclient [test_db]> SELECT EXTRACTVALUE('<a><b>x</b><b>y</b></a>', '/a/b');\n",
            "+-------------------------------------------------+\n| EXTRACTVALUE('<a><b>x</b><b>y</b></a>', '/a/b') |\n+-------------------------------------------------+\n| x y                                             |\n+-------------------------------------------------+\n1 row in set\n",
            "obclient [test_db]> SELECT EXTRACTVALUE('<a><b>x</b><b>y</b></a>', '/a/c');\n",
            "+-------------------------------------------------+\n| EXTRACTVALUE('<a><b>x</b><b>y</b></a>', '/a/c') |\n+-------------------------------------------------+\n|                                                 |\n+-------------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "匹配到多个结果用空格分开。",
            "使用 EXTRACTVALUE 函数从给定的 XML 字符串 <a><b>x</b><b>y</b></a> 中提取特定节点的值，要提取的节点路径为 /a/b。",
            "obclient [test_db]> SELECT EXTRACTVALUE('<a><b>x</b><b>y</b></a>', '/a/b');\n",
            "返回结果如下：",
            "+-------------------------------------------------+\n| EXTRACTVALUE('<a><b>x</b><b>y</b></a>', '/a/b') |\n+-------------------------------------------------+\n| x y                                             |\n+-------------------------------------------------+\n1 row in set\n",
            "没有匹配到结果返回空字符串。",
            "obclient [test_db]> SELECT EXTRACTVALUE('<a><b>x</b><b>y</b></a>', '/a/c');\n",
            "返回结果如下：",
            "+-------------------------------------------------+\n| EXTRACTVALUE('<a><b>x</b><b>y</b></a>', '/a/c') |\n+-------------------------------------------------+\n|                                                 |\n+-------------------------------------------------+\n1 row in set\n"
        ]
    },
    "FIELD": {
        "Title": [
            "FIELD"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823484"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "FIELD(str,str1,str2,str3,...)\n",
        "Description": [],
        "Illustration": [
            "返回参数 str 在 str1, str2, str3,... 列表中的索引位置（从 1 开始的位置）。在找不到 str 的情况下，返回值为 0。",
            "如果所有的对于 FIELD() 的参数均为字符串，则所有参数均按照字符串进行比较。如果所有的参数均为数字，则按照数字进行比较。否则，参数均按照 DOUBLE 类型进行比较。",
            "如果 str 为 NULL，则返回值为 0，原因是 NULL 不能同任何值进行同等比较。FILED() 是 ELT() 的补数。"
        ],
        "Examples": [
            "obclient> SELECT FIELD('abc','abc1','abc2','abc','abc4','abc'), FIELD(NULL, 'null1', NULL);\n+-----------------------------------------------+----------------------------+\n| FIELD('abc','abc1','abc2','abc','abc4','abc') | FIELD(NULL, 'null1', NULL) |\n+-----------------------------------------------+----------------------------+\n|                                             3 |                          0 |\n+-----------------------------------------------+----------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT FIELD('abc','abc1','abc2','abc','abc4','abc'), FIELD(NULL, 'null1', NULL);\n+-----------------------------------------------+----------------------------+\n| FIELD('abc','abc1','abc2','abc','abc4','abc') | FIELD(NULL, 'null1', NULL) |\n+-----------------------------------------------+----------------------------+\n|                                             3 |                          0 |\n+-----------------------------------------------+----------------------------+\n1 row in set\n"
        ]
    },
    "FIND_IN_SET": {
        "Title": [
            "FIND_IN_SET"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823480"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "FIND_IN_SET(str,strlist)\n",
        "Description": [],
        "Illustration": [
            "返回字符串集合 strlist 中指定字符串 str 的位置，从 1 开始。如果 str 不存在于 strlist，则返回 0。如果 str 或 strlist 为 NULL，则返回 NULL。",
            "str 字符串中不能包含逗号（,）。"
        ],
        "Examples": [
            "obclient> SELECT FIND_IN_SET('b','a,b,c,d');\n+----------------------------+\n| FIND_IN_SET('b','a,b,c,d') |\n+----------------------------+\n|                          2 |\n+----------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT FIND_IN_SET('b','a,b,c,d');\n+----------------------------+\n| FIND_IN_SET('b','a,b,c,d') |\n+----------------------------+\n|                          2 |\n+----------------------------+\n1 row in set\n"
        ]
    },
    "FIRST_VALUE": {
        "Title": [
            "FIRST_VALUE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823052"
        ],
        "Category": [
            "Analysis Functions"
        ],
        "Feature": "FIRST_VALUE { (expr) [ {RESPECT | IGNORE} NULLS ] | (expr [ {RESPECT | IGNORE} NULLS ])} OVER (analytic_clause)\n",
        "Description": [],
        "Illustration": [
            "返回表达式 expr 的第一个值。"
        ],
        "Examples": [
            "obclient> CREATE TABLE EXPLOYEES(LAST_NAME CHAR(10), SALARY DECIMAL, JOB_ID CHAR(32));\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('JIM', 2000, 'CLEANER');\nQuery OK, 1 row affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('MIKE', 12000, 'ENGINEERING');\nQuery OK, 1 row affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('LILY', 13000, 'ENGINEERING');\nQuery OK, 1 row affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('TOM', 11000, 'ENGINEERING');\nQuery OK, 1 row affected\n\nobclient> SELECT LAST_NAME, FIRST_VALUE(SALARY) OVER(PARTITION BY JOB_ID) FIRST_S, LAST_VALUE(SALARY) OVER(PARTITION BY JOB_ID) LAST_S, NTH_VALUE(SALARY,2) OVER(PARTITION BY JOB_ID) 2ND_S FROM EXPLOYEES;\n+-----------+---------+--------+-------+\n| LAST_NAME | FIRST_S | LAST_S | 2ND_S |\n+-----------+---------+--------+-------+\n| JIM       |    2000 |   2000 |  NULL |\n| MIKE      |   12000 |  11000 | 13000 |\n| LILY      |   12000 |  11000 | 13000 |\n| TOM       |   12000 |  11000 | 13000 |\n+-----------+---------+--------+-------+\n4 rows in set\n"
        ],
        "Detailed Examples": [
            "obclient> CREATE TABLE EXPLOYEES(LAST_NAME CHAR(10), SALARY DECIMAL, JOB_ID CHAR(32));\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('JIM', 2000, 'CLEANER');\nQuery OK, 1 row affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('MIKE', 12000, 'ENGINEERING');\nQuery OK, 1 row affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('LILY', 13000, 'ENGINEERING');\nQuery OK, 1 row affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('TOM', 11000, 'ENGINEERING');\nQuery OK, 1 row affected\n\nobclient> SELECT LAST_NAME, FIRST_VALUE(SALARY) OVER(PARTITION BY JOB_ID) FIRST_S, LAST_VALUE(SALARY) OVER(PARTITION BY JOB_ID) LAST_S, NTH_VALUE(SALARY,2) OVER(PARTITION BY JOB_ID) 2ND_S FROM EXPLOYEES;\n+-----------+---------+--------+-------+\n| LAST_NAME | FIRST_S | LAST_S | 2ND_S |\n+-----------+---------+--------+-------+\n| JIM       |    2000 |   2000 |  NULL |\n| MIKE      |   12000 |  11000 | 13000 |\n| LILY      |   12000 |  11000 | 13000 |\n| TOM       |   12000 |  11000 | 13000 |\n+-----------+---------+--------+-------+\n4 rows in set\n"
        ]
    },
    "FLOOR": {
        "Title": [
            "FLOOR"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823349"
        ],
        "Category": [
            "Mathematical Functions"
        ],
        "Feature": "FLOOR(expr)\n",
        "Description": [],
        "Illustration": [
            "和 CEIL(expr) 函数功能类似，返回小于或者等于指定表达式的最大整数。",
            "支持比较运算，结果为 BOOLEAN 值，被转化为数字类型处理，产生的结果为 1(TRUE)、0 (FALSE)。",
            "如果输入 NULL，返回值为 NULL。",
            "如果输入纯数字的字符串，支持自动转换成数字类型。",
            "返回值会被转化为一个 BIGINT。"
        ],
        "Examples": [
            "obclient> SELECT FLOOR(1.2), FLOOR(-1.2), FLOOR(1+1.5), FLOOR(1=1),FLOOR(1<1),FLOOR(null);\n+------------+-------------+--------------+------------+------------+-------------+\n| FLOOR(1.2) | FLOOR(-1.2) | FLOOR(1+1.5) | FLOOR(1=1) | FLOOR(1<1) | FLOOR(null) |\n+------------+-------------+--------------+------------+------------+-------------+\n|          1 |          -2 |            2 |          1 |          0 |        NULL |\n+------------+-------------+--------------+------------+------------+-------------+\n1 row in set\n\nobclient> SELECT FLOOR('2');\n+------------+\n| FLOOR('2') |\n+------------+\n|          2 |\n+------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT FLOOR(1.2), FLOOR(-1.2), FLOOR(1+1.5), FLOOR(1=1),FLOOR(1<1),FLOOR(null);\n+------------+-------------+--------------+------------+------------+-------------+\n| FLOOR(1.2) | FLOOR(-1.2) | FLOOR(1+1.5) | FLOOR(1=1) | FLOOR(1<1) | FLOOR(null) |\n+------------+-------------+--------------+------------+------------+-------------+\n|          1 |          -2 |            2 |          1 |          0 |        NULL |\n+------------+-------------+--------------+------------+------------+-------------+\n1 row in set\n\nobclient> SELECT FLOOR('2');\n+------------+\n| FLOOR('2') |\n+------------+\n|          2 |\n+------------+\n1 row in set\n"
        ]
    },
    "FORMAT": {
        "Title": [
            "FORMAT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823437"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "FORMAT(X,D)\n",
        "Description": [],
        "Illustration": [
            "把数字 X 格式转换为 #,###,###.## 格式，四舍五入到 D 位小数，并以字符串形式返回结果。",
            "如果整数部分超过三位，会用逗号（,）作为千分位分隔符。",
            "如果 D 为 0，则结果没有小数点或小数部分。"
        ],
        "Examples": [
            "obclient> SELECT FORMAT(12332.123456, 4) FROM DUAL;\n+-------------------------+\n| format(12332.123456, 4) |\n+-------------------------+\n| 12,332.1235             |\n+-------------------------+\n1 row in set\n\nobclient> SELECT FORMAT(12332.1, 4) FROM DUAL;\n+--------------------+\n| format(12332.1, 4) |\n+--------------------+\n| 12,332.1000        |\n+--------------------+\n1 row in set\n\nobclient> SELECT FORMAT(12332.2, 0) FROM DUAL;\n+--------------------+\n| format(12332.2, 0) |\n+--------------------+\n| 12,332             |\n+--------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT FORMAT(12332.123456, 4) FROM DUAL;\n+-------------------------+\n| format(12332.123456, 4) |\n+-------------------------+\n| 12,332.1235             |\n+-------------------------+\n1 row in set\n\nobclient> SELECT FORMAT(12332.1, 4) FROM DUAL;\n+--------------------+\n| format(12332.1, 4) |\n+--------------------+\n| 12,332.1000        |\n+--------------------+\n1 row in set\n\nobclient> SELECT FORMAT(12332.2, 0) FROM DUAL;\n+--------------------+\n| format(12332.2, 0) |\n+--------------------+\n| 12,332             |\n+--------------------+\n1 row in set\n"
        ]
    },
    "FORMAT_BYTES": {
        "Title": [
            "FORMAT_BYTES"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822935"
        ],
        "Category": [
            "Performance Schema Functions"
        ],
        "Feature": "FORMAT_BYTES(count)\n",
        "Description": [],
        "Illustration": [
            "FORMAT_BYTES() 将 count 转换为可读的格式并返回一个由值和单位标识组成的字符串，结果表示字节数。该字符串包含的字节数会四舍五入到小数点后 2 位并包含至少 3 位有效数字。小于 1024 字节的数字表示为整数且不进行四舍五入。如果 count 为 NULL，则返回 NULL。",
            "单位标识符取决于字节计数参数的大小，如下表所示。",
            "\n\n\n参数值\n结果单位\n单位标识符\n\n\n\n\n最多 1023 字节\nbytes\nbytes\n\n\n最多 10242− 1 字节\nkibibytes\nKiB\n\n\n最多 10243− 1 字节\nmebibytes\nMiB\n\n\n最多 10244− 1字节\ngibibytes\nGiB\n\n\n最多 10245− 1字节\ntebibytes\nTiB\n\n\n最多 10246− 1字节\npebibytes\nPiB\n\n\n10246 字节及以上\nexbibytes\nEiB\n\n\n"
        ],
        "Examples": [
            "obclient> SELECT FORMAT_BYTES(128), FORMAT_BYTES(18446644073709551615);\n+-------------------+------------------------------------+\n| FORMAT_BYTES(128) | FORMAT_BYTES(18446644073709551615) |\n+-------------------+------------------------------------+\n|  128 bytes        | 16.00 EiB                          |\n+-------------------+------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT FORMAT_BYTES(128), FORMAT_BYTES(18446644073709551615);\n+-------------------+------------------------------------+\n| FORMAT_BYTES(128) | FORMAT_BYTES(18446644073709551615) |\n+-------------------+------------------------------------+\n|  128 bytes        | 16.00 EiB                          |\n+-------------------+------------------------------------+\n1 row in set\n"
        ]
    },
    "FORMAT_PICO_TIME": {
        "Title": [
            "FORMAT_PICO_TIME"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822936"
        ],
        "Category": [
            "Performance Schema Functions"
        ],
        "Feature": "FORMAT_PICO_TIME(time_val)\n",
        "Description": [],
        "Illustration": [
            "FORMAT_PICO_TIME() 将 time_val 转换为可读的格式并返回一个由值和单位标识符组成的字符串，结果表示 Performance Schema 延迟或等待时间（以皮秒为单位）。该字符串包含的字节数会四舍五入到小数点后 2 位并包含至少 3 位有效数字。小于 1 纳秒的时间表示为整数且不进行四舍五入。",
            "如果 time_val 为 NULL，则此函数返回 NULL。",
            "单位标识符取决于 time_val 参数的大小，如下表所示。",
            "\n\n\n参数值\n结果单位\n单位标识符\n\n\n\n\n最多 103 − 1\npicoseconds\nps\n\n\n最多 106 − 1\nnanoseconds\nns\n\n\n最多 109 − 1\nmicroseconds\nus\n\n\n最多 1012 − 1\nmilliseconds\nms\n\n\n最多 60×1012 − 1\nseconds\ns\n\n\n最多 3.6×1015 − 1\nminutes\nmin\n\n\n最多 8.64×1016 − 1\nhours\nh\n\n\n8.64×1016 及以上\ndays\nd\n\n\n"
        ],
        "Examples": [
            "obclient> SELECT FORMAT_PICO_TIME(2401), FORMAT_PICO_TIME(188732396662000);\n+------------------------+-----------------------------------+\n| FORMAT_PICO_TIME(2401) | FORMAT_PICO_TIME(188732396662000) |\n+------------------------+-----------------------------------+\n| 2.40 ns                | 3.15 min                          |\n+------------------------+-----------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT FORMAT_PICO_TIME(2401), FORMAT_PICO_TIME(188732396662000);\n+------------------------+-----------------------------------+\n| FORMAT_PICO_TIME(2401) | FORMAT_PICO_TIME(188732396662000) |\n+------------------------+-----------------------------------+\n| 2.40 ns                | 3.15 min                          |\n+------------------------+-----------------------------------+\n1 row in set\n"
        ]
    },
    "FOUND_ROWS": {
        "Title": [
            "FOUND_ROWS"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822979"
        ],
        "Category": [
            "Information Functions"
        ],
        "Feature": "FOUND_ROWS()\n",
        "Description": [],
        "Illustration": [
            "一个 SELECT 语句可能包含一个 LIMIT 子句，用来限制数据库服务器端返回客户端的行数。在某些情况下，不需要再次运行该语句而得知在没有 LIMIT 时到底该语句返回了多少行。我们可以在 SELECT 语句中选择使用 SQL_CALC_FOUND_ROWS，然后调用 FOUND_ROWS() 函数，获取该语句在没有 LIMIT 时返回的行数。",
            "如下例所示：",
            "obclient> SELECT SQL_CALC_FOUND_ROWS * FROM tbl_name\n     WHERE id > 100 LIMIT 10;\nobclient> SELECT FOUND_ROWS();\n",
            "第二个 SELECT 语句返回一个数字，表示在没有 LIMIT 子句的情况下，第一个 SELECT 语句返回了多少行。如果上述的 SELECT 语句不使用 SQL_CALC_FOUND_ROWS 选项，使用 LIMIT 和不使用 LIMIT 时，FOUND_ROWS() 可能会返回不同的结果。",
            "通过 FOUND_ROWS() 函数返回的有效行数是瞬时的，并且不能越过 SELECT SQL_CALC_FOUND_ROWS 语句后面的语句。如果您后续还需要用到这个值，就需要将其保存。",
            "如下例所示：",
            "obclient> SELECT SQL_CALC_FOUND_ROWS * FROM ... ;\nobclient> SET @rows = FOUND_ROWS();\n",
            "假如您正在使用 SQL_CALC_FOUND_ROWS，系统必须计算出在全部结果集合中有多少行。尽管如此，这也还是比不用 LIMIT 而再次运行查询要快，原因是结果集合不需要被发送到客户端。",
            "SQL_CALC_FOUND_ROWS 和 FOUND_ROWS() 在当您希望限制一个查询返回的行数时是很有用的，同时还能不需要再次运行查询就可以确定全部结果集合中的行数。例如提供页式显示的 Web 脚本时，该显示包含显示搜索结果其他部分的页的链接。使用 FOUND_ROWS() 可以确定剩下的结果需要多少其他的页。",
            "SQL_CALC_FOUND_ROWS 和 FOUND_ROWS() 的应用对于 UNION 查询比对于简单 SELECT 语句更为复杂，原因是在 UNION 中，LIMIT 可能会出现在多个位置。它可能适用于 UNION 中的独立的 SELECT 语句，或是整个的 UNION 结果。",
            "SQL_CALC_FOUND_ROWS 对于 UNION 的期望结果是在没有全局的 LIMIT 的条件下，返回应有的行数。SQL_CALC_FOUND_ROWS 和 UNION 一同使用的条件是：",
            "SQL_CALC_FOUND_ROWS 关键词必须出现在 UNION 的第一个 SELECT 中。",
            "FOUND_ROWS() 的值只有在使用 UNION ALL 时才是精确的。如果使用不带 ALL 的 UNION，则会发生两次删除，而 FOUND_ROWS() 的值是近似的。",
            "如果 UNION 中没有出现 LIMIT，则 SQL_CALC_FOUND_ROWS 被忽略，返回临时表中所创建的用来处理 UNION 的行数。"
        ],
        "Examples": [
            "obclient> SELECT SQL_CALC_FOUND_ROWS * FROM t2;\nobclient> SELECT FOUND_ROWS();\n+--------------+\n| FOUND_ROWS() |\n+--------------+\n|            3 |\n+--------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT SQL_CALC_FOUND_ROWS * FROM t2;\nobclient> SELECT FOUND_ROWS();\n+--------------+\n| FOUND_ROWS() |\n+--------------+\n|            3 |\n+--------------+\n1 row in set\n"
        ]
    },
    "FROM_BASE64": {
        "Title": [
            "FROM_BASE64"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823450"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "FROM_BASE64(str)\n",
        "Description": [],
        "Illustration": [
            "解码一个 base-64 编码的字符串，并以二进制字符串的形式返回。通常用来对 TO_BASE64() 编码的字符串进行解码，详细信息请参见 TO_BASE64()。"
        ],
        "Examples": [
            "obclient> SELECT FROM_BASE64('T0I=');\n+---------------------+\n| FROM_BASE64('T0I=') |\n+---------------------+\n| OB                  |\n+---------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT FROM_BASE64('T0I=');\n+---------------------+\n| FROM_BASE64('T0I=') |\n+---------------------+\n| OB                  |\n+---------------------+\n1 row in set\n"
        ]
    },
    "FROM_DAYS": {
        "Title": [
            "FROM_DAYS"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823401"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "FROM_DAYS(N)\n",
        "Description": [],
        "Illustration": [
            "返回指定天数 N 对应的 DATE 值。天数指距离 0000-01-01 的天数。"
        ],
        "Examples": [
            "obclient> SELECT FROM_DAYS(736271), FROM_DAYS(700000);\n+-------------------+-------------------+\n| FROM_DAYS(736271) | FROM_DAYS(700000) |\n+-------------------+-------------------+\n| 2015-11-04        | 1916-07-15        |\n+-------------------+-------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT FROM_DAYS(736271), FROM_DAYS(700000);\n+-------------------+-------------------+\n| FROM_DAYS(736271) | FROM_DAYS(700000) |\n+-------------------+-------------------+\n| 2015-11-04        | 1916-07-15        |\n+-------------------+-------------------+\n1 row in set\n"
        ]
    },
    "FROM_UNIXTIME": {
        "Title": [
            "FROM_UNIXTIME"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823425"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "FROM_UNIXTIME(unix_timestamp)\nFROM_UNIXTIME(unix_timestamp, format)\n",
        "Description": [],
        "Illustration": [
            "FROM_UNIXTIME() 的返回值遵循如下规则：",
            "不指定 format 参数时，返回 DATETIME 类型值，不考虑时区。",
            "指定 format 参数时，返回指定格式的日期时间字符串。",
            "unix_timestamp 指 UNIX 时间戳，即距离 1970-01-01 00:00:00 的秒数。",
            "有关 format 支持的格式的详细信息，请参见 DATE_FORMAT。"
        ],
        "Examples": [
            "obclient> SELECT FROM_UNIXTIME(UNIX_TIMESTAMP(), '%Y %D %M %h:%i:%s %x');\n+---------------------------------------------------------+\n| FROM_UNIXTIME(UNIX_TIMESTAMP(), '%Y %D %M %h:%i:%s %x') |\n+---------------------------------------------------------+\n| 2018 5th May 08:41:26 2018                              |\n+---------------------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT FROM_UNIXTIME(UNIX_TIMESTAMP(), '%Y %D %M %h:%i:%s %x');\n+---------------------------------------------------------+\n| FROM_UNIXTIME(UNIX_TIMESTAMP(), '%Y %D %M %h:%i:%s %x') |\n+---------------------------------------------------------+\n| 2018 5th May 08:41:26 2018                              |\n+---------------------------------------------------------+\n1 row in set\n"
        ]
    },
    "GENERATOR": {
        "Title": [
            "GENERATOR"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823361"
        ],
        "Category": [
            "Mathematical Functions"
        ],
        "Feature": "GENERATOR(N)\n",
        "Description": [],
        "Illustration": [
            "该函数为 Table Function 框架中的一个内置函数，即允许在 Table Function 中调用它，最终返回 N 行数据。N 是一个大于等于 0 的 64 位正整数。",
            "Table function 是一种在 SQL 语言中使用的函数，它能够返回一张数据表作为结果。与传统的 SQL 函数只能返回标量值不同，Table Function 可以返回多行、多列的数据集。",
            "TABLE(GENERATOR(N)) 并不真的生成任何数据，它只会产生连续 N 个 “行”，如果需要生成数据，需要在 SELECT 后面添加具体的表达式，例如常量、变量、函数、UDF 等。TABLE(GENERATOR(N)) 可以用于并行执行，例如并行 SELECT、并行 DML 等，但是负责读取 TABLE(GENERATOR(N)) 生成行的线程只会有一个，也就是说，包含 TABLE(GENERATOR(N)) 的 DFO 的 DOP=1。"
        ],
        "Examples": [
            "obclient> SELECT COUNT(*) FROM TABLE(GENERATOR(100000));\n+----------+\n| COUNT(*) |\n+----------+\n|   100000 |\n+----------+\n1 row in set\n\nobclient> SELECT NORMAL(0, 1, RANDOM()) FROM TABLE(GENERATOR(5));\n+------------------------+\n| NORMAL(0, 1, RANDOM()) |\n|------------------------|\n|           0.227384164  |\n|           0.9945290748 |\n|          -0.2045078571 |\n|          -1.594607893  |\n|          -0.8213296842 |\n+------------------------+\n5 rows in set\n\nobclient> SELECT RANDSTR(1, ZIPF(1, 5, RANDOM())) str FROM TABLE(GENERATOR(5));\n+------------------------+\n|                    str |\n|------------------------|\n|                     A  |\n|                     D  |\n|                     A  |\n|                     A  |\n|                     C  |\n+------------------------+\n5 rows in set\n",
            "obclient> CREATE TABLE t1 (c1 BIGINT);\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO t1 VALUES (1), (2);\nQuery OK, 2 rows affected\nRecords: 2  Duplicates: 0  Warnings: 0\n\nobclient> SELECT c1, RANDOM(1) FROM t1, TABLE(GENERATOR(3));\n+------+----------------------+\n| c1   | random(1)            |\n+------+----------------------+\n|    1 | -6753783847308464280 |\n|    2 | -6707106347154343346 |\n|    1 |  -899926183391115878 |\n|    2 | -8835543475904200562 |\n|    1 | -2750444335953844424 |\n|    2 |  7588216632478230601 |\n+------+----------------------+\n6 rows in set\n\nobclient> EXPLAIN SELECT c1, RANDOM(1) FROM t1, TABLE(GENERATOR(3));\n+------------------------------------------------------------------------+\n| Query Plan                                                             |\n+------------------------------------------------------------------------+\n| ==================================================================     |\n| |ID|OPERATOR                   |NAME       |EST.ROWS|EST.TIME(us)|     |\n| ------------------------------------------------------------------     |\n| |0 |NESTED-LOOP JOIN CARTESIAN |           |398     |14          |     |\n| |1 |├─FUNCTION_TABLE           |FUNC_TABLE1|199     |1           |     |\n| |2 |└─MATERIAL                 |           |2       |2           |     |\n| |3 |  └─TABLE FULL SCAN        |t1         |2       |2           |     |\n| ==================================================================     |\n| Outputs & filters:                                                     |\n| -------------------------------------                                  |\n|   0 - output([t1.c1], [RANDOM(1)]), filter(nil), rowset=256            |\n|       conds(nil), nl_params_(nil), use_batch=false                     |\n|   1 - output(nil), filter(nil)                                         |\n|       value(GENERATOR(3))                                              |\n|   2 - output([t1.c1]), filter(nil), rowset=256                         |\n|   3 - output([t1.c1]), filter(nil), rowset=256                         |\n|       access([t1.c1]), partitions(p0)                                  |\n|       is_index_back=false, is_global_index=false,                      |\n|       range_key([t1.__pk_increment]), range(MIN ; MAX)always true      |\n+------------------------------------------------------------------------+\n19 rows in set\n\nobclient> SELECT /*+ PARALLEL(2) */ c1, RANDOM(1) FROM t1, TABLE(GENERATOR(3));\n+------+----------------------+\n| c1   | random(1)            |\n+------+----------------------+\n|    1 | -6753783847308464280 |\n|    2 | -6707106347154343346 |\n|    1 |  -899926183391115878 |\n|    2 | -8835543475904200562 |\n|    1 | -2750444335953844424 |\n|    2 |  7588216632478230601 |\n+------+----------------------+\n6 rows in set\n\nobclient> EXPLAIN SELECT /*+ PARALLEL(2) */ c1, RANDOM(1) FROM t1, TABLE(GENERATOR(3));\n+------------------------------------------------------------------------+\n| Query Plan                                                             |\n+------------------------------------------------------------------------+\n| ==================================================================     |\n| |ID|OPERATOR                   |NAME       |EST.ROWS|EST.TIME(us)|     |\n| ------------------------------------------------------------------     |\n| |0 |NESTED-LOOP JOIN CARTESIAN |           |398     |13          |     |\n| |1 |├─FUNCTION_TABLE           |FUNC_TABLE1|199     |1           |     |\n| |2 |└─MATERIAL                 |           |2       |2           |     |\n| |3 |  └─PX COORDINATOR         |           |2       |2           |     |\n| |4 |    └─EXCHANGE OUT DISTR   |:EX10000   |2       |2           |     |\n| |5 |      └─PX BLOCK ITERATOR  |           |2       |1           |     |\n| |6 |        └─TABLE FULL SCAN  |t1         |2       |1           |     |\n| ==================================================================     |\n| Outputs & filters:                                                     |\n| -------------------------------------                                  |\n|   0 - output([t1.c1], [RANDOM(1)]), filter(nil), rowset=256            |\n|       conds(nil), nl_params_(nil), use_batch=false                     |\n|   1 - output(nil), filter(nil)                                         |\n|       value(GENERATOR(3))                                              |\n|   2 - output([t1.c1]), filter(nil), rowset=256                         |\n|   3 - output([t1.c1]), filter(nil), rowset=256                         |\n|   4 - output([t1.c1]), filter(nil), rowset=256                         |\n|       dop=2                                                            |\n|   5 - output([t1.c1]), filter(nil), rowset=256                         |\n|   6 - output([t1.c1]), filter(nil), rowset=256                         |\n|       access([t1.c1]), partitions(p0)                                  |\n|       is_index_back=false, is_global_index=false,                      |\n|       range_key([t1.__pk_increment]), range(MIN ; MAX)always true      |\n+------------------------------------------------------------------------+\n26 rows in set\n"
        ],
        "Detailed Examples": [
            "如下示例为使用 GENERATOR() 函数生成符合条件的随机数。",
            "obclient> SELECT COUNT(*) FROM TABLE(GENERATOR(100000));\n+----------+\n| COUNT(*) |\n+----------+\n|   100000 |\n+----------+\n1 row in set\n\nobclient> SELECT NORMAL(0, 1, RANDOM()) FROM TABLE(GENERATOR(5));\n+------------------------+\n| NORMAL(0, 1, RANDOM()) |\n|------------------------|\n|           0.227384164  |\n|           0.9945290748 |\n|          -0.2045078571 |\n|          -1.594607893  |\n|          -0.8213296842 |\n+------------------------+\n5 rows in set\n\nobclient> SELECT RANDSTR(1, ZIPF(1, 5, RANDOM())) str FROM TABLE(GENERATOR(5));\n+------------------------+\n|                    str |\n|------------------------|\n|                     A  |\n|                     D  |\n|                     A  |\n|                     A  |\n|                     C  |\n+------------------------+\n5 rows in set\n",
            "GENERATOR() 函数也可以和其它表做 Join，示例如下：",
            "obclient> CREATE TABLE t1 (c1 BIGINT);\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO t1 VALUES (1), (2);\nQuery OK, 2 rows affected\nRecords: 2  Duplicates: 0  Warnings: 0\n\nobclient> SELECT c1, RANDOM(1) FROM t1, TABLE(GENERATOR(3));\n+------+----------------------+\n| c1   | random(1)            |\n+------+----------------------+\n|    1 | -6753783847308464280 |\n|    2 | -6707106347154343346 |\n|    1 |  -899926183391115878 |\n|    2 | -8835543475904200562 |\n|    1 | -2750444335953844424 |\n|    2 |  7588216632478230601 |\n+------+----------------------+\n6 rows in set\n\nobclient> EXPLAIN SELECT c1, RANDOM(1) FROM t1, TABLE(GENERATOR(3));\n+------------------------------------------------------------------------+\n| Query Plan                                                             |\n+------------------------------------------------------------------------+\n| ==================================================================     |\n| |ID|OPERATOR                   |NAME       |EST.ROWS|EST.TIME(us)|     |\n| ------------------------------------------------------------------     |\n| |0 |NESTED-LOOP JOIN CARTESIAN |           |398     |14          |     |\n| |1 |├─FUNCTION_TABLE           |FUNC_TABLE1|199     |1           |     |\n| |2 |└─MATERIAL                 |           |2       |2           |     |\n| |3 |  └─TABLE FULL SCAN        |t1         |2       |2           |     |\n| ==================================================================     |\n| Outputs & filters:                                                     |\n| -------------------------------------                                  |\n|   0 - output([t1.c1], [RANDOM(1)]), filter(nil), rowset=256            |\n|       conds(nil), nl_params_(nil), use_batch=false                     |\n|   1 - output(nil), filter(nil)                                         |\n|       value(GENERATOR(3))                                              |\n|   2 - output([t1.c1]), filter(nil), rowset=256                         |\n|   3 - output([t1.c1]), filter(nil), rowset=256                         |\n|       access([t1.c1]), partitions(p0)                                  |\n|       is_index_back=false, is_global_index=false,                      |\n|       range_key([t1.__pk_increment]), range(MIN ; MAX)always true      |\n+------------------------------------------------------------------------+\n19 rows in set\n\nobclient> SELECT /*+ PARALLEL(2) */ c1, RANDOM(1) FROM t1, TABLE(GENERATOR(3));\n+------+----------------------+\n| c1   | random(1)            |\n+------+----------------------+\n|    1 | -6753783847308464280 |\n|    2 | -6707106347154343346 |\n|    1 |  -899926183391115878 |\n|    2 | -8835543475904200562 |\n|    1 | -2750444335953844424 |\n|    2 |  7588216632478230601 |\n+------+----------------------+\n6 rows in set\n\nobclient> EXPLAIN SELECT /*+ PARALLEL(2) */ c1, RANDOM(1) FROM t1, TABLE(GENERATOR(3));\n+------------------------------------------------------------------------+\n| Query Plan                                                             |\n+------------------------------------------------------------------------+\n| ==================================================================     |\n| |ID|OPERATOR                   |NAME       |EST.ROWS|EST.TIME(us)|     |\n| ------------------------------------------------------------------     |\n| |0 |NESTED-LOOP JOIN CARTESIAN |           |398     |13          |     |\n| |1 |├─FUNCTION_TABLE           |FUNC_TABLE1|199     |1           |     |\n| |2 |└─MATERIAL                 |           |2       |2           |     |\n| |3 |  └─PX COORDINATOR         |           |2       |2           |     |\n| |4 |    └─EXCHANGE OUT DISTR   |:EX10000   |2       |2           |     |\n| |5 |      └─PX BLOCK ITERATOR  |           |2       |1           |     |\n| |6 |        └─TABLE FULL SCAN  |t1         |2       |1           |     |\n| ==================================================================     |\n| Outputs & filters:                                                     |\n| -------------------------------------                                  |\n|   0 - output([t1.c1], [RANDOM(1)]), filter(nil), rowset=256            |\n|       conds(nil), nl_params_(nil), use_batch=false                     |\n|   1 - output(nil), filter(nil)                                         |\n|       value(GENERATOR(3))                                              |\n|   2 - output([t1.c1]), filter(nil), rowset=256                         |\n|   3 - output([t1.c1]), filter(nil), rowset=256                         |\n|   4 - output([t1.c1]), filter(nil), rowset=256                         |\n|       dop=2                                                            |\n|   5 - output([t1.c1]), filter(nil), rowset=256                         |\n|   6 - output([t1.c1]), filter(nil), rowset=256                         |\n|       access([t1.c1]), partitions(p0)                                  |\n|       is_index_back=false, is_global_index=false,                      |\n|       range_key([t1.__pk_increment]), range(MIN ; MAX)always true      |\n+------------------------------------------------------------------------+\n26 rows in set\n"
        ]
    },
    "GET_FORMAT": {
        "Title": [
            "GET_FORMAT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823382"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "GET_FORMAT({DATE | TIME | DATETIME | TIMESTAMP}, {'EUR' | 'USA' | 'JIS' | 'ISO' | 'INTERNAL'})\n",
        "Description": [],
        "Illustration": [
            "该函数返回指定格式的字符串，可以与 DATE_FORMAT 或 STR_TO_DATE 函数一起使用。根据第一个参数和第二个参数不同取值的组合，可以产生如下表所示的字符串格式（结果中使用的格式符说明请参考 DATE_FORMAT 函数）。",
            "\n\n\n函数调用\n结果\n\n\n\n\nGET_FORMAT(DATE,'USA')\n'%m.%d.%Y'\n\n\nGET_FORMAT(DATE,'JIS')\n'%Y-%m-%d'\n\n\nGET_FORMAT(DATE,'ISO')\n'%Y-%m-%d'\n\n\nGET_FORMAT(DATE,'EUR')\n'%d.%m.%Y'\n\n\nGET_FORMAT(DATE,'INTERNAL')\n'%Y%m%d'\n\n\nGET_FORMAT(DATETIME,'USA')\n'%Y-%m-%d %H.%i.%s'\n\n\nGET_FORMAT(DATETIME,'JIS')\n'%Y-%m-%d %H:%i:%s'\n\n\nGET_FORMAT(DATETIME,'ISO')\n'%Y-%m-%d %H:%i:%s'\n\n\nGET_FORMAT(DATETIME,'EUR')\n'%Y-%m-%d %H.%i.%s'\n\n\nGET_FORMAT(DATETIME,'INTERNAL')\n'%Y%m%d%H%i%s'\n\n\nGET_FORMAT(TIME,'USA')\n'%h:%i:%s %p'\n\n\nGET_FORMAT(TIME,'JIS')\n'%H:%i:%s'\n\n\nGET_FORMAT(TIME,'ISO')\n'%H:%i:%s'\n\n\nGET_FORMAT(TIME,'EUR')\n'%H.%i.%s'\n\n\nGET_FORMAT(TIME,'INTERNAL')\n'%H%i%s'\n\n\nGET_FORMAT(TIMESTAMP,'USA')\n'%Y-%m-%d %H.%i.%s'\n\n\nGET_FORMAT(TIMESTAMP,'JIS')\n'%Y-%m-%d %H:%i:%s'\n\n\nGET_FORMAT(TIMESTAMP,'ISO')\n'%Y-%m-%d %H:%i:%s'\n\n\nGET_FORMAT(TIMESTAMP,'EUR')\n'%Y-%m-%d %H.%i.%s'\n\n\nGET_FORMAT(TIMESTAMP,'INTERNAL')\n'%Y%m%d%H%i%s'\n\n\n"
        ],
        "Examples": [
            "obclient> SELECT DATE_FORMAT('2003-10-03',GET_FORMAT(DATE,'EUR'));\n+--------------------------------------------------+\n| DATE_FORMAT('2003-10-03',GET_FORMAT(DATE,'EUR')) |\n+--------------------------------------------------+\n| 03.10.2003                                       |\n+--------------------------------------------------+\n1 row in set\n\nobclient> SELECT STR_TO_DATE('10.31.2003',GET_FORMAT(DATE,'USA'));\n+--------------------------------------------------+\n| STR_TO_DATE('10.31.2003',GET_FORMAT(DATE,'USA')) |\n+--------------------------------------------------+\n| 2003-10-31 00:00:00.000000                       |\n+--------------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT DATE_FORMAT('2003-10-03',GET_FORMAT(DATE,'EUR'));\n+--------------------------------------------------+\n| DATE_FORMAT('2003-10-03',GET_FORMAT(DATE,'EUR')) |\n+--------------------------------------------------+\n| 03.10.2003                                       |\n+--------------------------------------------------+\n1 row in set\n\nobclient> SELECT STR_TO_DATE('10.31.2003',GET_FORMAT(DATE,'USA'));\n+--------------------------------------------------+\n| STR_TO_DATE('10.31.2003',GET_FORMAT(DATE,'USA')) |\n+--------------------------------------------------+\n| 2003-10-31 00:00:00.000000                       |\n+--------------------------------------------------+\n1 row in set\n"
        ]
    },
    "GET_LOCK": {
        "Title": [
            "GET_LOCK"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823003"
        ],
        "Category": [
            "Locking Functions"
        ],
        "Feature": "GET_LOCK('str', timeout)\n",
        "Description": [
            "该函数用于尝试获取一个带有特定名称（str）的锁。当一个会话成功地获取了一个特定名称的锁之后，其他任何会话在尝试获取同名的锁时都会被阻塞（即被迫等待），直到原来持有该锁的会话释放该锁为止。",
            "使用 GET_LOCK() 函数获取的锁可以通过执行 RELEASE_LOCK() 来显式释放，除此之外，当会话终止时，无论是正常结束还是异常结束，该会话持有的锁都会被隐式释放。",
            "\n注意\n使用 GET_LOCK() 获得的锁不会因事务的提交或回滚而被释放。\n"
        ],
        "Illustration": [
            "参数解释",
            "str: 指定锁的名称，字符串类型。",
            "timeout: 指定等待锁释放的超时时间（以秒为单位）。取值如下：",
            "\n取值可以是一个 0 或者正数。\n也可以是负值，则表示等待时间是无限的，即会话将一直等待直至获取到锁。\n",
            "取值可以是一个 0 或者正数。",
            "也可以是负值，则表示等待时间是无限的，即会话将一直等待直至获取到锁。",
            "返回值",
            "返回 1：表示锁已成功获取。此时调用 ",
            "GET_LOCK",
            " 的那个会话拥有了锁，其他任何尝试获取同名锁的操作都将不会成功，除非这个锁被释放。",
            "返回 0：表示获取锁的尝试由于超时而失败。这通常意味着锁已经被另一个会话获取并且在超时期间没有被释放。",
            "返回 ",
            "NULL",
            "：表示尝试获取锁时发生错误，这可能是由于内存不足，或者尝试获取锁的线程被强制结束。"
        ],
        "Examples": [
            "obclient [(none)]> SELECT GET_LOCK('my_lock', 10);\n",
            "+-------------------------+\n| GET_LOCK('my_lock', 10) |\n+-------------------------+\n|                       1 |\n+-------------------------+\n1 row in set\n",
            "obclient [(none)]> SELECT GET_LOCK('my_lock', 10);\n",
            "+-------------------------+\n| GET_LOCK('my_lock', 10) |\n+-------------------------+\n|                       0 |\n+-------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "在会话 1 中执行下面命令，尝试获取名为 my_lock 的锁，最多等待 10 秒。",
            "obclient [(none)]> SELECT GET_LOCK('my_lock', 10);\n",
            "返回结果如下：",
            "+-------------------------+\n| GET_LOCK('my_lock', 10) |\n+-------------------------+\n|                       1 |\n+-------------------------+\n1 row in set\n",
            "返回结果为 1，表示锁 my_lock 已成功获取。",
            "在会话 2 中执行下面命令，尝试获取名为 my_lock 的锁，最多等待 10 秒。",
            "obclient [(none)]> SELECT GET_LOCK('my_lock', 10);\n",
            "返回结果如下：",
            "+-------------------------+\n| GET_LOCK('my_lock', 10) |\n+-------------------------+\n|                       0 |\n+-------------------------+\n1 row in set\n",
            "返回结果为 0，表示获取锁 my_lock 的尝试由于超时而失败。"
        ]
    },
    "GREATEST": {
        "Title": [
            "GREATEST"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823366"
        ],
        "Category": [
            "Comparison Functions"
        ],
        "Feature": "GREATEST(value1, ...)\n",
        "Description": [],
        "Illustration": [
            "返回参数的最大值，和函数 LEAST() 相反。",
            "参数至少为两个（如果只提供一个参数，则会报错）。如果参数中有 NULL，则该函数返回为 NULL。",
            "当参数中同时存在数值和字符时，把字符隐式转换为数值类型处理，不能转换的报错。"
        ],
        "Examples": [
            "obclient> SELECT GREATEST(2,1), GREATEST('2',1,0), GREATEST('a','b','c'), GREATEST('a', NULL, 'c'), GREATEST('2014-05-15','2014-06-01')\\G\n*************************** 1. row ***************************\n                      GREATEST(2,1): 2\n                  GREATEST('2',1,0): 2\n              GREATEST('a','b','c'): c\n           GREATEST('a', NULL, 'c'): NULL\nGREATEST('2014-05-15','2014-06-01'): 2014-06-01\n1 row in set\n\nobclient> SELECT GREATEST(2);\nERROR 1582 (42000): Incorrect parameter count in the call to native function 'greatest'\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT GREATEST(2,1), GREATEST('2',1,0), GREATEST('a','b','c'), GREATEST('a', NULL, 'c'), GREATEST('2014-05-15','2014-06-01')\\G\n*************************** 1. row ***************************\n                      GREATEST(2,1): 2\n                  GREATEST('2',1,0): 2\n              GREATEST('a','b','c'): c\n           GREATEST('a', NULL, 'c'): NULL\nGREATEST('2014-05-15','2014-06-01'): 2014-06-01\n1 row in set\n\nobclient> SELECT GREATEST(2);\nERROR 1582 (42000): Incorrect parameter count in the call to native function 'greatest'\n"
        ]
    },
    "GROUPING": {
        "Title": [
            "GROUPING"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823027"
        ],
        "Category": [
            "Aggregate Functions"
        ],
        "Feature": "GROUPING(expr)\n",
        "Description": [],
        "Illustration": [
            "GROUP BY 可以通过 WITH ROLLUP 子句将各分组进行汇总以表示更高级的聚合（也称为超聚合），并产生额外的行。例如以下 SQL 可以将销售额按年度分组，并输出各分组的汇总。",
            "其中 year 为 NULL 的行即超聚合行。",
            "obclient> SELECT year, SUM(profit) AS profit\n       FROM sales\n       GROUP BY year WITH ROLLUP;\n+------+--------+\n| year | profit |\n+------+--------+\n| 2000 |   4525 |\n| 2001 |   3010 |\n| NULL |   7535 |\n+------+--------+\n",
            "WITH ROLLUP 修饰多个 GROUP BY 列时，结果会更加复杂。在这种情况下，每一个分组都会产生一个超聚合行。例如以下 SQL 会产生额外的超聚合行。",
            "obclient> SELECT year, country, product, SUM(profit) AS profit\n       FROM sales\n       GROUP BY year, country, product WITH ROLLUP;\n+------+---------+------------+--------+\n| year | country | product    | profit |\n+------+---------+------------+--------+\n| 2000 | Finland | Computer   |   1500 |\n| 2000 | Finland | Phone      |    100 |\n| 2000 | Finland | NULL       |   1600 |\n| 2000 | India   | Calculator |    150 |\n| 2000 | India   | Computer   |   1200 |\n| 2000 | India   | NULL       |   1350 |\n| 2000 | USA     | Calculator |     75 |\n| 2000 | USA     | Computer   |   1500 |\n| 2000 | USA     | NULL       |   1575 |\n| 2000 | NULL    | NULL       |   4525 |\n| 2001 | Finland | Phone      |     10 |\n| 2001 | Finland | NULL       |     10 |\n| 2001 | USA     | Calculator |     50 |\n| 2001 | USA     | Computer   |   2700 |\n| 2001 | USA     | TV         |    250 |\n| 2001 | USA     | NULL       |   3000 |\n| 2001 | NULL    | NULL       |   3010 |\n| NULL | NULL    | NULL       |   7535 |\n+------+---------+------------+--------+\n",
            "GROUPING 函数用于对超聚合行进行区分，如果返回的行是超聚合行，则该函数返回 1，否则返回 0。",
            "例如对上述 SQL 进行改写，利用 GROUPING 函数的特性添加判断。",
            "obclient>  SELECT\n         IF(GROUPING(year), 'All years', year) AS year,\n         IF(GROUPING(country), 'All countries', country) AS country,\n         IF(GROUPING(product), 'All products', product) AS product,\n         SUM(profit) AS profit\n       FROM sales\n       GROUP BY year, country, product WITH ROLLUP;\n+-----------+---------------+--------------+--------+\n| year      | country       | product      | profit |\n+-----------+---------------+--------------+--------+\n| 2000      | Finland       | Computer     |   1500 |\n| 2000      | Finland       | Phone        |    100 |\n| 2000      | Finland       | All products |   1600 |\n| 2000      | India         | Calculator   |    150 |\n| 2000      | India         | Computer     |   1200 |\n| 2000      | India         | All products |   1350 |\n| 2000      | USA           | Calculator   |     75 |\n| 2000      | USA           | Computer     |   1500 |\n| 2000      | USA           | All products |   1575 |\n| 2000      | All countries | All products |   4525 |\n| 2001      | Finland       | Phone        |     10 |\n| 2001      | Finland       | All products |     10 |\n| 2001      | USA           | Calculator   |     50 |\n| 2001      | USA           | Computer     |   2700 |\n| 2001      | USA           | TV           |    250 |\n| 2001      | USA           | All products |   3000 |\n| 2001      | All countries | All products |   3010 |\n| All years | All countries | All products |   7535 |\n+-----------+---------------+--------------+--------+\n"
        ],
        "Examples": [
            "obclient> CREATE TABLE employees (manager_id INT,last_name varchar(50),hiredate varchar(50),SALARY INT);\nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-01', 1700);\nINSERT INTO employees VALUES(100, 'De Haan', '2018-05-01',11000);      \nINSERT INTO employees VALUES(100, 'Errazuriz', '2017-07-21', 1400);\nINSERT INTO employees VALUES(100, 'Hartstein', '2019-05-01',14000);     \nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-22', 1700);\nINSERT INTO employees VALUES(100, 'Weiss',  '2019-07-11',13500);     \nINSERT INTO employees VALUES(100, 'Russell', '2019-10-05', 13000);\nINSERT INTO employees VALUES(100, 'Partners',  '2018-12-01',14000);     \nINSERT INTO employees VALUES(200, 'Ross',  '2019-06-11',13500);     \nINSERT INTO employees VALUES(200, 'Bell', '2019-05-25', 13000);\nINSERT INTO employees VALUES(200, 'Part',  '2018-08-11',14000);   \nCOMMIT;\n\nobclient> SELECT IF(GROUPING(manager_id),'manager_id',manager_id) AS manager_id,SUM(SALARY) FROM employees GROUP BY manager_id WITH ROLLUP;\n+------------+-------------+\n| manager_id | SUM(SALARY) |\n+------------+-------------+\n| 100        |       70300 |\n| 200        |       40500 |\n| manager_id |      110800 |\n+------------+-------------+\n3 rows in set\n"
        ],
        "Detailed Examples": [
            "obclient> CREATE TABLE employees (manager_id INT,last_name varchar(50),hiredate varchar(50),SALARY INT);\nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-01', 1700);\nINSERT INTO employees VALUES(100, 'De Haan', '2018-05-01',11000);      \nINSERT INTO employees VALUES(100, 'Errazuriz', '2017-07-21', 1400);\nINSERT INTO employees VALUES(100, 'Hartstein', '2019-05-01',14000);     \nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-22', 1700);\nINSERT INTO employees VALUES(100, 'Weiss',  '2019-07-11',13500);     \nINSERT INTO employees VALUES(100, 'Russell', '2019-10-05', 13000);\nINSERT INTO employees VALUES(100, 'Partners',  '2018-12-01',14000);     \nINSERT INTO employees VALUES(200, 'Ross',  '2019-06-11',13500);     \nINSERT INTO employees VALUES(200, 'Bell', '2019-05-25', 13000);\nINSERT INTO employees VALUES(200, 'Part',  '2018-08-11',14000);   \nCOMMIT;\n\nobclient> SELECT IF(GROUPING(manager_id),'manager_id',manager_id) AS manager_id,SUM(SALARY) FROM employees GROUP BY manager_id WITH ROLLUP;\n+------------+-------------+\n| manager_id | SUM(SALARY) |\n+------------+-------------+\n| 100        |       70300 |\n| 200        |       40500 |\n| manager_id |      110800 |\n+------------+-------------+\n3 rows in set\n"
        ]
    },
    "GROUP_CONCAT": {
        "Title": [
            "GROUP_CONCAT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823015"
        ],
        "Category": [
            "Aggregate Functions"
        ],
        "Feature": "GROUP_CONCAT([DISTINCT] expr [,expr ...]\n             [ORDER BY {unsigned_integer | col_name | expr}\n                 [ASC | DESC] [,col_name ...]]\n             [SEPARATOR str_val])\n",
        "Description": [],
        "Illustration": [
            "返回带有来自一个组的连接的非 NULL 值的字符串结果。",
            "ORDER BY 用于指定排序列，ASC 表示生序排列，DESC 表示降序排列，默认为 ASC。",
            "SEPARATOR 用于指定连接字符串间的分隔符，默认分隔符为 ,。"
        ],
        "Examples": [
            "obclient> SELECT * FROM book;     //表book（书编号，书名，出版社）\n+--------+--------------------------------+-----------------------------+\n| bookid | bookname                       | publishname                 |\n+--------+--------------------------------+-----------------------------+\n|      1 | git help                       | alibaba group publisher     |\n|      2 | MySQL性能优化                  | 浙江大学图文出版社          |\n|      3 | JAVA编程指南                   | 机械工业出版社              |\n|      3 | JAVA编程指南                   | 机械工业出版社              |\n|      4 | 大规模分布式存储系统           | 机械工业出版社              |\n+--------+--------------------------------+-----------------------------+\n5 rows in set   \n\n//查找书名信息\nobclient> SELECT GROUP_CONCAT(bookname) FROM book GROUP BY bookname;\n+-----------------------------------+\n| GROUP_CONCAT(bookname)            |\n+-----------------------------------+\n| git help                          |\n| JAVA编程指南,JAVA编程指南         |\n| MySQL性能优化                     |\n| 大规模分布式存储系统              |\n+-----------------------------------+\n4 rows in set\n\n//查找书名信息，书名唯一\nobclient> SELECT GROUP_CONCAT(distinct(bookname)) FROM book GROUP BY bookname;\n+----------------------------------+\n| GROUP_CONCAT(distinct(bookname)) |\n+----------------------------------+\n| git help                         |\n| JAVA编程指南                     |\n| MySQL性能优化                    |\n| 大规模分布式存储系统             |\n+----------------------------------+\n4 rows in set    \n\n//查找书名和出版社信息，以书名分组，出版社信息降序排序显示\nobclient> SELECT bookname, GROUP_CONCAT(publishname ORDER BY publishname DESC SEPARATOR ';' ) FROM book GROUP BY bookname;\n+--------------------------------+---------------------------------------------------------------------+\n| bookname                       | GROUP_CONCAT(publishname ORDER BY publishname DESC SEPARATOR ';' ) |\n+--------------------------------+---------------------------------------------------------------------+\n| git help                       | alibaba group publisher                                             |\n| JAVA编程指南                   | 机械工业出版社;机械工业出版社                                       |\n| MySQL性能优化                  | 浙江大学图文出版社                                                  |\n| 大规模分布式存储系统           | 机械工业出版社                                                      |\n+--------------------------------+---------------------------------------------------------------------+\n4 rows in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT * FROM book;     //表book（书编号，书名，出版社）\n+--------+--------------------------------+-----------------------------+\n| bookid | bookname                       | publishname                 |\n+--------+--------------------------------+-----------------------------+\n|      1 | git help                       | alibaba group publisher     |\n|      2 | MySQL性能优化                  | 浙江大学图文出版社          |\n|      3 | JAVA编程指南                   | 机械工业出版社              |\n|      3 | JAVA编程指南                   | 机械工业出版社              |\n|      4 | 大规模分布式存储系统           | 机械工业出版社              |\n+--------+--------------------------------+-----------------------------+\n5 rows in set   \n\n//查找书名信息\nobclient> SELECT GROUP_CONCAT(bookname) FROM book GROUP BY bookname;\n+-----------------------------------+\n| GROUP_CONCAT(bookname)            |\n+-----------------------------------+\n| git help                          |\n| JAVA编程指南,JAVA编程指南         |\n| MySQL性能优化                     |\n| 大规模分布式存储系统              |\n+-----------------------------------+\n4 rows in set\n\n//查找书名信息，书名唯一\nobclient> SELECT GROUP_CONCAT(distinct(bookname)) FROM book GROUP BY bookname;\n+----------------------------------+\n| GROUP_CONCAT(distinct(bookname)) |\n+----------------------------------+\n| git help                         |\n| JAVA编程指南                     |\n| MySQL性能优化                    |\n| 大规模分布式存储系统             |\n+----------------------------------+\n4 rows in set    \n\n//查找书名和出版社信息，以书名分组，出版社信息降序排序显示\nobclient> SELECT bookname, GROUP_CONCAT(publishname ORDER BY publishname DESC SEPARATOR ';' ) FROM book GROUP BY bookname;\n+--------------------------------+---------------------------------------------------------------------+\n| bookname                       | GROUP_CONCAT(publishname ORDER BY publishname DESC SEPARATOR ';' ) |\n+--------------------------------+---------------------------------------------------------------------+\n| git help                       | alibaba group publisher                                             |\n| JAVA编程指南                   | 机械工业出版社;机械工业出版社                                       |\n| MySQL性能优化                  | 浙江大学图文出版社                                                  |\n| 大规模分布式存储系统           | 机械工业出版社                                                      |\n+--------------------------------+---------------------------------------------------------------------+\n4 rows in set\n"
        ]
    },
    "HEX": {
        "Title": [
            "HEX"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823456"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "HEX(str)\n",
        "Description": [],
        "Illustration": [
            "将数字或字符串 str 转化为十六进制字符串，其中 str 中的每个字符的每个字节都转换为两个十六进制数字。",
            "对于数字类型的参数 N，UNHEX(N) 并不是 HEX(N) 的逆运算，对于这种情况，您可以使用 CONV(HEX(N),16,10) 替代。"
        ],
        "Examples": [
            "obclient> SELECT HEX(255), HEX('abc');\n+----------+------------+\n| HEX(255) | HEX('abc') |\n+----------+------------+\n| FF       | 616263     |\n+----------+------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT HEX(255), HEX('abc');\n+----------+------------+\n| HEX(255) | HEX('abc') |\n+----------+------------+\n| FF       | 616263     |\n+----------+------------+\n1 row in set\n"
        ]
    },
    "HOUR": {
        "Title": [
            "HOUR"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823404"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "HOUR(time)\n",
        "Description": [],
        "Illustration": [
            "返回时间类型 time 的小时部分的数值。"
        ],
        "Examples": [
            "obclient> SELECT HOUR('10:05:03');\n+------------------+\n| HOUR('10:05:03') |\n+------------------+\n|               10 |\n+------------------+\n1 row in set\n\nobclient> SELECT HOUR('272:59:59');\n+-------------------+\n| HOUR('272:59:59') |\n+-------------------+\n|               272 |\n+-------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT HOUR('10:05:03');\n+------------------+\n| HOUR('10:05:03') |\n+------------------+\n|               10 |\n+------------------+\n1 row in set\n\nobclient> SELECT HOUR('272:59:59');\n+-------------------+\n| HOUR('272:59:59') |\n+-------------------+\n|               272 |\n+-------------------+\n1 row in set\n"
        ]
    },
    "ICU_VERSION": {
        "Title": [
            "ICU_VERSION"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822977"
        ],
        "Category": [
            "Information Functions"
        ],
        "Feature": "ICU_VERSION()\n",
        "Description": [],
        "Illustration": [
            "该函数返回支持正则表达式操作的 ICU 库的版本。 OceanBase 数据库使用 International Components for Unicode (ICU) 实现对正则表达式的支持，ICU 提供完整的 Unicode 支持并且是多字节安全的。"
        ],
        "Examples": [
            "obclient> SELECT ICU_VERSION();\n+---------------+\n| ICU_VERSION() |\n+---------------+\n| 69.1          |\n+---------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT ICU_VERSION();\n+---------------+\n| ICU_VERSION() |\n+---------------+\n| 69.1          |\n+---------------+\n1 row in set\n"
        ]
    },
    "IF": {
        "Title": [
            "IF"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823324"
        ],
        "Category": [
            "Flow Control Functions"
        ],
        "Feature": "IF(expr1,expr2,expr3)\n",
        "Description": [],
        "Illustration": [
            "如果 expr1 的值为 TRUE（即：expr1<>0 且 expr1<>NULL），返回结果为 expr2；否则返回结果为 expr3。",
            "IF() 返回结果可以是数值或字符串类型，它取决于使用的内容。",
            "如果 expr2, expr3 中只有一个明确是 NULL，则 IF() 函数的结果类型为非 NULL 表达式的结果类型。"
        ],
        "Examples": [
            "obclient> SELECT IF(5>6, 'T','F'), IF (5>6, 1, 0), IF(NULL, 'TRUE', 'FALSE'), IF(0, 'TRUE', 'FALSE')\\G\n*************************** 1. row ***************************\n         IF(5>6, 'T','F'): F\n           IF (5>6, 1, 0): 0\nIF(NULL, 'TRUE', 'FALSE'): FALSE\n   IF(0, 'TRUE', 'FALSE'): FALSE\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT IF(5>6, 'T','F'), IF (5>6, 1, 0), IF(NULL, 'TRUE', 'FALSE'), IF(0, 'TRUE', 'FALSE')\\G\n*************************** 1. row ***************************\n         IF(5>6, 'T','F'): F\n           IF (5>6, 1, 0): 0\nIF(NULL, 'TRUE', 'FALSE'): FALSE\n   IF(0, 'TRUE', 'FALSE'): FALSE\n1 row in set\n"
        ]
    },
    "IFNULL": {
        "Title": [
            "IFNULL"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823325"
        ],
        "Category": [
            "Flow Control Functions"
        ],
        "Feature": "IFNULL(expr1, expr2)\n",
        "Description": [],
        "Illustration": [
            "假设 expr1 不为 NULL，则 IFNULL() 的返回值为 expr1；否则其返回值为 expr2。IFNULL() 的返回值是数值或字符串，具体情况取决于其所使用的语境。",
            "IFNULL() 的默认返回值类型按照以下方式计算：",
            "\n\n\n表达式\n返回值\n\n\n\n\nexpr1 或 expr2 返回值为一个字符串。\n字符串\n\n\nexpr1 或 expr2 返回值为一个浮点值。\n浮点\n\n\nexpr1 或 expr2 返回值为一个整数。\n整数\n\n\n",
            "假如 expr1 和 expr2 都是字符串，且其中任何一个字符串区分大小写，则返回结果是区分大小写。"
        ],
        "Examples": [
            "obclient> SELECT IFNULL('abc', null), IFNULL(NULL+1, NULL+2), IFNULL(1/0, 0/1);\n+---------------------+------------------------+------------------+\n| IFNULL('abc', null) | IFNULL(NULL+1, NULL+2) | IFNULL(1/0, 0/1) |\n+---------------------+------------------------+------------------+\n| abc                 |                   NULL |           0.0000 |\n+---------------------+------------------------+------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT IFNULL('abc', null), IFNULL(NULL+1, NULL+2), IFNULL(1/0, 0/1);\n+---------------------+------------------------+------------------+\n| IFNULL('abc', null) | IFNULL(NULL+1, NULL+2) | IFNULL(1/0, 0/1) |\n+---------------------+------------------------+------------------+\n| abc                 |                   NULL |           0.0000 |\n+---------------------+------------------------+------------------+\n1 row in set\n"
        ]
    },
    "INET6_ATON": {
        "Title": [
            "INET6_ATON"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822952"
        ],
        "Category": [
            "Miscellaneous Functions"
        ],
        "Feature": "INET6_ATON(expr)\n",
        "Description": [],
        "Illustration": [
            "将指定的 IPv6 或 IPv4 网络地址返回为一个二进制字符串，该字符串以网络字节顺序（大端）表示地址值。",
            "由于数字格式的 IPv6 地址需要的字节数比最大整数类型的字节要多，因此此函数返回 VARBINARY 数据类型，其中 VARBINARY(16) 表示 IPv6 地址，VARBINARY(4) 表示 IPv4 地址。如果参数不是有效地址，则返回 NULL。",
            "INET6_ATON() 对有效参数有如下限制：",
            "不允许在尾部使用 Zone ID，例如 fc50::3%1 或 fc50::3%eth1。",
            "不允许在尾部使用网络掩码，如 2002:45f:3:ba::/64 或 198.xx.100.0/24。",
            "仅支持使用无类地址表示 IPv4 地址的值。诸如 198.51.1 之类的有类地址会被拒绝。",
            "不允许在尾部使用端口号，例如 198.xx.100.2:8082。",
            "地址中不允许使用十六进制数字，例如 198.0xa0.1.2。",
            "不支持八进制数：198.xx.010.1 被视为 198.xx.10.1，而不是 198.xx.8.1。",
            "这些 IPv4 限制也适用于具有 IPv4 地址部分的 IPv6 地址，例如 IPv4 兼容地址或 IPv4 映射地址。",
            "要将以 INT 数据类型表示的 IPv4 地址 expr 转换为以 VARBINARY 值表示的 IPv6 地址，请使用以下表达式：",
            "INET6_ATON(INET_NTOA(expr))\n"
        ],
        "Examples": [
            "obclient> SELECT HEX(INET6_ATON('fdfe::5a55:caff:fefa:9089'));\n+----------------------------------------------+\n| HEX(INET6_ATON('fdfe::5a55:caff:fefa:9089')) |\n+----------------------------------------------+\n| FDFE0000000000005A55CAFFFEFA9089         |\n+----------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT HEX(INET6_ATON('fdfe::5a55:caff:fefa:9089'));\n+----------------------------------------------+\n| HEX(INET6_ATON('fdfe::5a55:caff:fefa:9089')) |\n+----------------------------------------------+\n| FDFE0000000000005A55CAFFFEFA9089         |\n+----------------------------------------------+\n1 row in set\n"
        ]
    },
    "INET6_NTOA": {
        "Title": [
            "INET6_NTOA"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822950"
        ],
        "Category": [
            "Miscellaneous Functions"
        ],
        "Feature": "INET6_NTOA(expr)\n",
        "Description": [],
        "Illustration": [
            "将以数字形式表示的 IPv6 或 IPv4 网络地址返回为二进制字符串，该地址的字符串可以作为连接字符集中的字符串。如果参数不是有效地址，则返回 NULL。",
            "INET6_NTOA() 具有以下属性：",
            "不使用系统函数来执行转换，因此输出字符串与平台无关。",
            "返回字符串的最大长度为 39 (4 x 8 + 7)。",
            "返回字符串使用小写字母表示 IPv6 地址。"
        ],
        "Examples": [
            "obclient> SELECT INET6_NTOA(INET6_ATON('fdfe::5a55:caff:fefa:9089'));\n+------------------------------------------------------------+\n|  INET6_NTOA(INET6_ATON('fdfe::5a55:caff:fefa:9089')) |\n+------------------------------------------------------------+\n|                            fdfe::5a55:caff:fefa:9089 |\n+------------------------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT INET6_NTOA(INET6_ATON('fdfe::5a55:caff:fefa:9089'));\n+------------------------------------------------------------+\n|  INET6_NTOA(INET6_ATON('fdfe::5a55:caff:fefa:9089')) |\n+------------------------------------------------------------+\n|                            fdfe::5a55:caff:fefa:9089 |\n+------------------------------------------------------------+\n1 row in set\n"
        ]
    },
    "INET_ATON": {
        "Title": [
            "INET_ATON"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822938"
        ],
        "Category": [
            "Miscellaneous Functions"
        ],
        "Feature": "INET_ATON(expr)\n",
        "Description": [],
        "Illustration": [
            "将 IPv4 网络地址表示为字符串，并返回一个整数，该整数按照网络字节顺序（大端）表示地址值。如果参数无效，则返回 NULL。",
            "\n注意\n请使用 INT UNSIGNED 列存储由 INET_ATON() 生成的值，不能使用带符号的 INT。如果使用带符号的列，则当第一个八位字节的 IP 地址大于 127 时会无法正确存储对应的值。\n"
        ],
        "Examples": [
            "obclient> SELECT INET_ATON('1.1.1.1');\n+----------------------+\n|  INET_ATON('1.1.1.1') |\n+----------------------+\n|             16843009 |\n+----------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT INET_ATON('1.1.1.1');\n+----------------------+\n|  INET_ATON('1.1.1.1') |\n+----------------------+\n|             16843009 |\n+----------------------+\n1 row in set\n"
        ]
    },
    "INET_NTOA": {
        "Title": [
            "INET_NTOA"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822946"
        ],
        "Category": [
            "Miscellaneous Functions"
        ],
        "Feature": "INET_NTOA(expr)\n",
        "Description": [],
        "Illustration": [
            "将按照网络字节顺序表示的 IPv4 网络地址的数值，返回为使用\".\"点隔的 IP 地址字符串并作为连接字符集中的字符串。如果参数无效，则返回 NULL。"
        ],
        "Examples": [
            "obclient> SELECT INET_NTOA(16843009);\n+---------------------+\n| INET_NTOA(16843009) |\n+---------------------+\n| 1.1.1.1             |\n+---------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT INET_NTOA(16843009);\n+---------------------+\n| INET_NTOA(16843009) |\n+---------------------+\n| 1.1.1.1             |\n+---------------------+\n1 row in set\n"
        ]
    },
    "INSERT": {
        "Title": [
            "INSERT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823440"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "INSERT (str1,pos,len,str2)\n",
        "Description": [],
        "Illustration": [
            "返回字符串 str1，字符串中起始于 pos 位置，长度为 len 的子字符串将被 str2 取代。如果 pos 超过字符串长度，则返回值为原始字符串。假如 len 的长度大于其它字符串的长度，则从位置 pos 开始替换。如果任何一个参数为 NULL，则返回值为 NULL。该函数支持多字节字元。",
            "str1 和 str2 必须是字符串，pos 和 len 必须是整数。任意参数为 NULL，结果总为 NULL。",
            "str1 和 str2 中的文字符被视为字节流。",
            "pos 值为负数或者大于 str1 长度时，返回 str1。",
            "当 len 小于 0，或大于 str1 的长度时，返回结果为 str1 从开头到 pos 位置的串，和 str2 的组合串。"
        ],
        "Examples": [
            "obclient> SELECT INSERT('Quadratic',-2,100,'What'), INSERT('Quadratic',7,3,'What'),\n      INSERT('Quadratic',-1,3,'What'), INSERT('Quadratic',10,3,'What'), INSERT('Quadratic',5,-1,''),\n      INSERT('Quadratic',7,-1,'What')\\G\n*************************** 1. row ***************************\nINSERT('Quadratic',-2,100,'What'): Quadratic\n   INSERT('Quadratic',7,3,'What'): QuadraWhat\n  INSERT('Quadratic',-1,3,'What'): Quadratic\n  INSERT('Quadratic',10,3,'What'): Quadratic\n      INSERT('Quadratic',5,-1,''): Quad\n  INSERT('Quadratic',7,-1,'What'): QuadraWhat\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT INSERT('Quadratic',-2,100,'What'), INSERT('Quadratic',7,3,'What'),\n      INSERT('Quadratic',-1,3,'What'), INSERT('Quadratic',10,3,'What'), INSERT('Quadratic',5,-1,''),\n      INSERT('Quadratic',7,-1,'What')\\G\n*************************** 1. row ***************************\nINSERT('Quadratic',-2,100,'What'): Quadratic\n   INSERT('Quadratic',7,3,'What'): QuadraWhat\n  INSERT('Quadratic',-1,3,'What'): Quadratic\n  INSERT('Quadratic',10,3,'What'): Quadratic\n      INSERT('Quadratic',5,-1,''): Quad\n  INSERT('Quadratic',7,-1,'What'): QuadraWhat\n1 row in set\n"
        ]
    },
    "INSTR": {
        "Title": [
            "INSTR"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823467"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "INSTR(str,substr)\n",
        "Description": [],
        "Illustration": [
            "返回字符串 str 中子字符串的第一个出现位置。这和 LOCATE() 的双参数形式相同，除非参数的顺序被颠倒。"
        ],
        "Examples": [
            "obclient> SELECT INSTR('foobarbar', 'bar'), INSTR('xbar', 'foobar');\n+---------------------------+-------------------------+\n| INSTR('foobarbar', 'bar') | INSTR('xbar', 'foobar') |\n+---------------------------+-------------------------+\n|                         4 |                       0 |\n+---------------------------+-------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT INSTR('foobarbar', 'bar'), INSTR('xbar', 'foobar');\n+---------------------------+-------------------------+\n| INSTR('foobarbar', 'bar') | INSTR('xbar', 'foobar') |\n+---------------------------+-------------------------+\n|                         4 |                       0 |\n+---------------------------+-------------------------+\n1 row in set\n"
        ]
    },
    "INT2IP": {
        "Title": [
            "INT2IP"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823478"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "INT2IP(int_value)\n",
        "Description": [],
        "Illustration": [
            "将整数 int_value 转换成 IP 地址。",
            "假设输入的数值为 s，则返回的 IP 地址 s4.s3.s2.s1 的计算方式为：",
            "s1：s mod 2^8^",
            "s2：s - s1 / 2^8^ mod 2^8^",
            "s3：((s - s1) / 2^8^ - s2 )/ 2^8^ mod 2^8^",
            "s4：(((s - s1) / 2^8^ - s2 )/ 2^8^ - s3)/ 2^8^ mod 2^8^",
            "如果输入大于 4294967295 的值或 NULL 值，则返回 NULL。"
        ],
        "Examples": [
            "obclient> SELECT\n     INT2IP(16777216),\n     HEX(16777216),\n     INT2IP(1)\n     \\G\n*************************** 1. row ***************************\nINT2IP(16777216): 1.0.0.0\n   HEX(16777216): 1000000\n       INT2IP(1): 0.0.0.1\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT\n     INT2IP(16777216),\n     HEX(16777216),\n     INT2IP(1)\n     \\G\n*************************** 1. row ***************************\nINT2IP(16777216): 1.0.0.0\n   HEX(16777216): 1000000\n       INT2IP(1): 0.0.0.1\n1 row in set\n"
        ]
    },
    "INTERVAL": {
        "Title": [
            "INTERVAL"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823365"
        ],
        "Category": [
            "Comparison Functions"
        ],
        "Feature": "INTERVAL(N,N1,N2,N3,...)\n",
        "Description": [],
        "Illustration": [
            "返回 N 与其他参数组成的列表 N1,N2,... 的比较情况。本文以 N~1~、N~2~、....、N~n~ 分别表示参数 N1,N2...,Nn。",
            "依次将 N 与 N~n~ 进行比较：",
            "如果 N 为 NULL，则返回 NULL。",
            "如果 N 小于 N~1~，则返回 0。",
            "如果存在一正整数 n，对任意正整数 m 小于等于 n，都有 N 大于等于 N~m~，但 N 小于 N~n+1~，则返回 n。（如果 N~m~ 为 NULL，则也认为 N 大于等于 N~m~）。"
        ],
        "Examples": [
            "obclient> SELECT INTERVAL(23, 1, 15, 17, 30, 44, 200);\n+--------------------------------------+\n| INTERVAL(23, 1, 15, 17, 30, 44, 200) |\n+--------------------------------------+\n|                                    3 |\n+--------------------------------------+\n1 row in set\n\nobclient> SELECT INTERVAL(23, 1, 15, 17, NULL, 44, 200);\n+----------------------------------------+\n| INTERVAL(23, 1, 15, 17, NULL, 44, 200) |\n+----------------------------------------+\n|                                      4 |\n+----------------------------------------+\n1 row in set\n\nobclient> SELECT INTERVAL(23, 1, 15, 17, 30, 17, 200);\n+--------------------------------------+\n| INTERVAL(23, 1, 15, 17, 30, 17, 200) |\n+--------------------------------------+\n|                                    3 |\n+--------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT INTERVAL(23, 1, 15, 17, 30, 44, 200);\n+--------------------------------------+\n| INTERVAL(23, 1, 15, 17, 30, 44, 200) |\n+--------------------------------------+\n|                                    3 |\n+--------------------------------------+\n1 row in set\n\nobclient> SELECT INTERVAL(23, 1, 15, 17, NULL, 44, 200);\n+----------------------------------------+\n| INTERVAL(23, 1, 15, 17, NULL, 44, 200) |\n+----------------------------------------+\n|                                      4 |\n+----------------------------------------+\n1 row in set\n\nobclient> SELECT INTERVAL(23, 1, 15, 17, 30, 17, 200);\n+--------------------------------------+\n| INTERVAL(23, 1, 15, 17, 30, 17, 200) |\n+--------------------------------------+\n|                                    3 |\n+--------------------------------------+\n1 row in set\n"
        ]
    },
    "IP2INT": {
        "Title": [
            "IP2INT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823459"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "IP2INT('ip_addr')\n",
        "Description": [],
        "Illustration": [
            "将 IP 地址 ip_addr 转换成整数。",
            "假设输入的 IP 形如 s1.s2.s3.s4，则返回值的计算规则为：",
            "s1 * 2^24^ + s2 * 2^16^ + s3 * 2^8^+ s4"
        ],
        "Examples": [
            "obclient> SELECT\n     IP2INT('0.0.0.1'),\n     HEX(IP2INT('0.0.0.1')),\n     HEX(IP2INT('1.0.0.0'))\n     \\G\n*************************** 1. row ***************************\n     IP2INT('0.0.0.1'): 1\nHEX(IP2INT('0.0.0.1')): 1\nHEX(IP2INT('1.0.0.0')): 1000000\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT\n     IP2INT('0.0.0.1'),\n     HEX(IP2INT('0.0.0.1')),\n     HEX(IP2INT('1.0.0.0'))\n     \\G\n*************************** 1. row ***************************\n     IP2INT('0.0.0.1'): 1\nHEX(IP2INT('0.0.0.1')): 1\nHEX(IP2INT('1.0.0.0')): 1000000\n1 row in set\n"
        ]
    },
    "ISNULL": {
        "Title": [
            "ISNULL"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823367"
        ],
        "Category": [
            "Comparison Functions"
        ],
        "Feature": "ISNULL(expr)\n",
        "Description": [],
        "Illustration": [
            "如果参数 expr 为 NULL，那么 ISNULL() 的返回值为 1，否则返回值为 0。",
            "ISNULL() 函数可以用来代替等号（=）判断一个值是否为 NULL。（使用等号将一个值与 NULL 比较总是返回 NULL）ISNULL() 函数同 IS NULL 比较操作符具有一些相同的特性，有关比较操作符，请参见 比较运算符。"
        ],
        "Examples": [
            "obclient> SELECT ISNULL(null), ISNULL('test'), ISNULL(123.456), ISNULL('10:00');\n+--------------+----------------+-----------------+-----------------+\n| ISNULL(null) | ISNULL('test') | ISNULL(123.456) | ISNULL('10:00') |\n+--------------+----------------+-----------------+-----------------+\n|            1 |              0 |               0 |               0 |\n+--------------+----------------+-----------------+-----------------+\n1 row in set\n\nobclient> SELECT ISNULL(null+1);\n+----------------+\n| ISNULL(null+1) |\n+----------------+\n|              1 |\n+----------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT ISNULL(null), ISNULL('test'), ISNULL(123.456), ISNULL('10:00');\n+--------------+----------------+-----------------+-----------------+\n| ISNULL(null) | ISNULL('test') | ISNULL(123.456) | ISNULL('10:00') |\n+--------------+----------------+-----------------+-----------------+\n|            1 |              0 |               0 |               0 |\n+--------------+----------------+-----------------+-----------------+\n1 row in set\n\nobclient> SELECT ISNULL(null+1);\n+----------------+\n| ISNULL(null+1) |\n+----------------+\n|              1 |\n+----------------+\n1 row in set\n"
        ]
    },
    "IS_FREE_LOCK": {
        "Title": [
            "IS_FREE_LOCK"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823007"
        ],
        "Category": [
            "Locking Functions"
        ],
        "Feature": "IS_FREE_LOCK('str')\n",
        "Description": [
            "该函数用来检查由字符串 str 命名的锁是否是自由的，即用来检测一个命名锁是否被其他会话持有。"
        ],
        "Illustration": [
            "参数解释",
            "str：指定要检查的锁的名称，字符串类型。",
            "返回值",
            "返回 1：表示锁是自由的，即没有会话持有此锁。",
            "返回 0：表示锁已经被某个会话持有，即此锁并不是自由的。"
        ],
        "Examples": [
            "obclient [(none)]> SELECT IS_FREE_LOCK('my_lock');\n",
            "+-------------------------+\n| IS_FREE_LOCK('my_lock') |\n+-------------------------+\n|                       0 |\n+-------------------------+\n1 row in set\n",
            "obclient [(none)]> SELECT IS_USED_LOCK('my_lock');\n",
            "+-------------------------+\n| IS_USED_LOCK('my_lock') |\n+-------------------------+\n|              3221487701 |\n+-------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "检查名为 my_lock 的锁是否可用。",
            "obclient [(none)]> SELECT IS_FREE_LOCK('my_lock');\n",
            "返回结果如下：",
            "+-------------------------+\n| IS_FREE_LOCK('my_lock') |\n+-------------------------+\n|                       0 |\n+-------------------------+\n1 row in set\n",
            "返回结果为 0，表示锁 my_lock 已经被某个会话持有。可以通过执行 IS_USED_LOCK() 来查询占用该锁会话的连接标识符（会话 ID），示例如下：",
            "obclient [(none)]> SELECT IS_USED_LOCK('my_lock');\n",
            "返回结果如下：",
            "+-------------------------+\n| IS_USED_LOCK('my_lock') |\n+-------------------------+\n|              3221487701 |\n+-------------------------+\n1 row in set\n"
        ]
    },
    "IS_IPV4": {
        "Title": [
            "IS_IPV4"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822943"
        ],
        "Category": [
            "Miscellaneous Functions"
        ],
        "Feature": "IS_IPV4(expr)\n",
        "Description": [],
        "Illustration": [
            "如果参数 expr 是有效的 IPv4 地址字符串，则返回 1，否则返回 0。",
            "对于指定的参数，如果 IS_IPV4() 返回 1，则 INET_ATON() 和 INET6_ATON() 返回非 NULL。反之却是不正确的，在某些情况下，当 IS_IPV4() 返回 0 时，INET_ATON() 返回非 NULL。IS_IPV4() 对 IPv4 地址的要求比 INET_ATON() 更严格，INET6_ATON() 在检查 IPv4 地址方面与 IS_IPV4() 一样强大。"
        ],
        "Examples": [
            "obclient> SELECT IS_IPV4('10.x.x.9'), IS_IPV4('10.x.x.256');\n+---------------------+-----------------------+\n| IS_IPV4('10.x.x.9') | IS_IPV4('10.x.x.256') |\n+---------------------+-----------------------+\n|                   1 |                     0 |\n+---------------------+-----------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT IS_IPV4('10.x.x.9'), IS_IPV4('10.x.x.256');\n+---------------------+-----------------------+\n| IS_IPV4('10.x.x.9') | IS_IPV4('10.x.x.256') |\n+---------------------+-----------------------+\n|                   1 |                     0 |\n+---------------------+-----------------------+\n1 row in set\n"
        ]
    },
    "IS_IPV4_COMPAT": {
        "Title": [
            "IS_IPV4_COMPAT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822949"
        ],
        "Category": [
            "Miscellaneous Functions"
        ],
        "Feature": "IS_IPV4_COMPAT(expr)\n",
        "Description": [],
        "Illustration": [
            "将以数字形式表示的 IPv6 地址作为二进制字符串，由 INET6_ATON() 返回。",
            "如果参数是有效的兼容 IPv4 的 IPv6 地址，则返回 1，否则返回 0。兼容 IPv4 地址的格式为 ::ipv4_address。IPv4 兼容地址的 IPv4 部分也可以使用十六进制表示。"
        ],
        "Examples": [
            "obclient> SELECT IS_IPV4_COMPAT(INET6_ATON('::10.x.x.x'));\n+------------------------------------------+\n| IS_IPV4_COMPAT(INET6_ATON('::10.x.x.x')) |\n+------------------------------------------+\n|                                        1 |\n+------------------------------------------+\n1 row in set\n\nobclient> SELECT HEX(INET6_ATON('10.10.10.10'));\n+---------------------------------+\n| HEX(INET6_ATON('10.10.10.10')) |\n+---------------------------------+\n| C6336501                        |\n+---------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT IS_IPV4_COMPAT(INET6_ATON('::10.x.x.x'));\n+------------------------------------------+\n| IS_IPV4_COMPAT(INET6_ATON('::10.x.x.x')) |\n+------------------------------------------+\n|                                        1 |\n+------------------------------------------+\n1 row in set\n\nobclient> SELECT HEX(INET6_ATON('10.10.10.10'));\n+---------------------------------+\n| HEX(INET6_ATON('10.10.10.10')) |\n+---------------------------------+\n| C6336501                        |\n+---------------------------------+\n1 row in set\n"
        ]
    },
    "IS_IPV6": {
        "Title": [
            "IS_IPV6"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822941"
        ],
        "Category": [
            "Miscellaneous Functions"
        ],
        "Feature": "IS_IPV6(expr)\n",
        "Description": [],
        "Illustration": [
            "如果参数 expr 是有效的 IPv6 地址字符串，则返回 1，否则返回 0。此函数不会将 IPv4 地址视为有效的 IPv6 地址。",
            "对于指定的参数，如果 IS_IPV6() 返回 1，则 INET6_ATON() 返回非 NULL。"
        ],
        "Examples": [
            "obclient> SELECT IS_IPV6('10.x.x.x'), IS_IPV6('::1');\n+---------------------+----------------+\n| IS_IPV6('10.x.x.x') | IS_IPV6('::1') |\n+---------------------+----------------+\n|                   0 |              1 |\n+---------------------+----------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT IS_IPV6('10.x.x.x'), IS_IPV6('::1');\n+---------------------+----------------+\n| IS_IPV6('10.x.x.x') | IS_IPV6('::1') |\n+---------------------+----------------+\n|                   0 |              1 |\n+---------------------+----------------+\n1 row in set\n"
        ]
    },
    "IS_USED_LOCK": {
        "Title": [
            "IS_USED_LOCK"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823004"
        ],
        "Category": [
            "Locking Functions"
        ],
        "Feature": "IS_USED_LOCK('str')\n",
        "Description": [
            "该函数用于检测由字符串 str 命名的锁是否正在被某个会话使用（即锁是否已经被获取）。"
        ],
        "Illustration": [
            "参数解释",
            "str: 指定要检查的锁的名称，字符串类型。",
            "返回值",
            "返回会话 ID：表示锁已被使用。这一个数字代表着获取该锁的客户端会话。",
            "返回 NULL：表示锁没有被任何会话使用。"
        ],
        "Examples": [
            "obclient [(none)]> SELECT IS_USED_LOCK('my_lock');\n",
            "+-------------------------+\n| IS_USED_LOCK('my_lock') |\n+-------------------------+\n|              3221487701 |\n+-------------------------+\n1 row in set\n",
            "obclient [(none)]> SELECT * FROM oceanbase.GV$OB_PROCESSLIST WHERE ID = 3221487701\\G\n",
            "*************************** 1. row ***************************\n           SVR_IP: xxx.xxx.xxx.xx1\n         SVR_PORT: 2882\n         SQL_PORT: 2881\n               ID: 3221487701\n             USER: root\n             HOST: xxx.xxx.xxx.xx2:61470\n               DB: NULL\n           TENANT: mysql001\n          COMMAND: Sleep\n             TIME: 1014.214143\n       TOTAL_TIME: 1014.214143\n            STATE: SLEEP\n             INFO: NULL\n     PROXY_SESSID: NULL\n    MASTER_SESSID: NULL\n   USER_CLIENT_IP: xxx.xxx.xxx.xx2\n        USER_HOST: %\n        RETRY_CNT: 0\n       RETRY_INFO: 0\n           SQL_ID:\n         TRANS_ID: 0\n        THREAD_ID: 0\n       SSL_CIPHER: NULL\n         TRACE_ID: NULL\n      TRANS_STATE:\n           ACTION:\n           MODULE:\n      CLIENT_INFO:\n            LEVEL: 1\nSAMPLE_PERCENTAGE: 10\n    RECORD_POLICY: SAMPLE_AND_SLOW_QUERY\n           LB_VID: NULL\n           LB_VIP: NULL\n         LB_VPORT: NULL\n         IN_BYTES: 448\n        OUT_BYTES: 0\n USER_CLIENT_PORT: 61470\n   TOTAL_CPU_TIME: 0\n1 row in set\n"
        ],
        "Detailed Examples": [
            "检查名为 my_lock 的锁是否被某个会话使用。并返回使用者的会话 ID。",
            "obclient [(none)]> SELECT IS_USED_LOCK('my_lock');\n",
            "返回结果如下：",
            "+-------------------------+\n| IS_USED_LOCK('my_lock') |\n+-------------------------+\n|              3221487701 |\n+-------------------------+\n1 row in set\n",
            "返回结果为 3221487701，表示锁 my_lock 已经被会话 ID 为 3221487701 的会话使用。可以通过视图 oceanbase.GV$OB_PROCESSLIST 来查询占用该锁会话的信息，示例如下：",
            "obclient [(none)]> SELECT * FROM oceanbase.GV$OB_PROCESSLIST WHERE ID = 3221487701\\G\n",
            "返回结果如下：",
            "*************************** 1. row ***************************\n           SVR_IP: xxx.xxx.xxx.xx1\n         SVR_PORT: 2882\n         SQL_PORT: 2881\n               ID: 3221487701\n             USER: root\n             HOST: xxx.xxx.xxx.xx2:61470\n               DB: NULL\n           TENANT: mysql001\n          COMMAND: Sleep\n             TIME: 1014.214143\n       TOTAL_TIME: 1014.214143\n            STATE: SLEEP\n             INFO: NULL\n     PROXY_SESSID: NULL\n    MASTER_SESSID: NULL\n   USER_CLIENT_IP: xxx.xxx.xxx.xx2\n        USER_HOST: %\n        RETRY_CNT: 0\n       RETRY_INFO: 0\n           SQL_ID:\n         TRANS_ID: 0\n        THREAD_ID: 0\n       SSL_CIPHER: NULL\n         TRACE_ID: NULL\n      TRANS_STATE:\n           ACTION:\n           MODULE:\n      CLIENT_INFO:\n            LEVEL: 1\nSAMPLE_PERCENTAGE: 10\n    RECORD_POLICY: SAMPLE_AND_SLOW_QUERY\n           LB_VID: NULL\n           LB_VIP: NULL\n         LB_VPORT: NULL\n         IN_BYTES: 448\n        OUT_BYTES: 0\n USER_CLIENT_PORT: 61470\n   TOTAL_CPU_TIME: 0\n1 row in set\n"
        ]
    },
    "IS_UUID": {
        "Title": [
            "IS_UUID"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822954"
        ],
        "Category": [
            "Miscellaneous Functions"
        ],
        "Feature": "IS_UUID(string_uuid)\n",
        "Description": [],
        "Illustration": [
            "如果参数是有效的 UUID 字符串格式，则返回 1；如果参数不是有效的 UUID，则返回 0；如果参数为 NULL，则返回 NULL。 “有效”的意思是该值是可以解析的格式。也就是说，它具有正确的长度并且仅包含允许的字符（用于表示十六进制数字的字母以及可选的破折号和大括号）。如下格式最常见：",
            "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee\n",
            "如下格式也是允许的：",
            "aaaaaaaabbbbccccddddeeeeeeeeeeee\n{aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee}\n"
        ],
        "Examples": [
            "obclient> SELECT IS_UUID('6ccd780c-abcd-1026-9564-5b8c656024db');\n+-------------------------------------------------+\n| IS_UUID('6ccd780c-abcd-1026-9564-5b8c656024db') |\n+-------------------------------------------------+\n|                                               1 |\n+-------------------------------------------------+\n1 row in set\n\nobclient> SELECT IS_UUID('6CCD780C-ABCD-1026-9564-5B8C656024DB');\n+-------------------------------------------------+\n| IS_UUID('6CCD780C-ABCD-1026-9564-5B8C656024DB') |\n+-------------------------------------------------+\n|                                               1 |\n+-------------------------------------------------+\n1 row in set\n\nobclient> SELECT IS_UUID('6ccd780cabcd102695645b8c656024db');\n+---------------------------------------------+\n| IS_UUID('6ccd780cabcd102695645b8c656024db') |\n+---------------------------------------------+\n|                                           1 |\n+---------------------------------------------+\n1 row in set\n\nobclient> SELECT IS_UUID('{6ccd780c-abcd-1026-9564-5b8c656024db}');\n+---------------------------------------------------+\n| IS_UUID('{6ccd780c-abcd-1026-9564-5b8c656024db}') |\n+---------------------------------------------------+\n|                                                 1 |\n+---------------------------------------------------+\n1 row in set\n\nobclient> SELECT IS_UUID('6ccd780c-abcd-1026-9564-5b8c6560');\n+---------------------------------------------+\n| IS_UUID('6ccd780c-abcd-1026-9564-5b8c6560') |\n+---------------------------------------------+\n|                                           0 |\n+---------------------------------------------+\n1 row in set\n\nobclient> SELECT IS_UUID(RAND());\n+-----------------+\n| IS_UUID(RAND()) |\n+-----------------+\n|               0 |\n+-----------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT IS_UUID('6ccd780c-abcd-1026-9564-5b8c656024db');\n+-------------------------------------------------+\n| IS_UUID('6ccd780c-abcd-1026-9564-5b8c656024db') |\n+-------------------------------------------------+\n|                                               1 |\n+-------------------------------------------------+\n1 row in set\n\nobclient> SELECT IS_UUID('6CCD780C-ABCD-1026-9564-5B8C656024DB');\n+-------------------------------------------------+\n| IS_UUID('6CCD780C-ABCD-1026-9564-5B8C656024DB') |\n+-------------------------------------------------+\n|                                               1 |\n+-------------------------------------------------+\n1 row in set\n\nobclient> SELECT IS_UUID('6ccd780cabcd102695645b8c656024db');\n+---------------------------------------------+\n| IS_UUID('6ccd780cabcd102695645b8c656024db') |\n+---------------------------------------------+\n|                                           1 |\n+---------------------------------------------+\n1 row in set\n\nobclient> SELECT IS_UUID('{6ccd780c-abcd-1026-9564-5b8c656024db}');\n+---------------------------------------------------+\n| IS_UUID('{6ccd780c-abcd-1026-9564-5b8c656024db}') |\n+---------------------------------------------------+\n|                                                 1 |\n+---------------------------------------------------+\n1 row in set\n\nobclient> SELECT IS_UUID('6ccd780c-abcd-1026-9564-5b8c6560');\n+---------------------------------------------+\n| IS_UUID('6ccd780c-abcd-1026-9564-5b8c6560') |\n+---------------------------------------------+\n|                                           0 |\n+---------------------------------------------+\n1 row in set\n\nobclient> SELECT IS_UUID(RAND());\n+-----------------+\n| IS_UUID(RAND()) |\n+-----------------+\n|               0 |\n+-----------------+\n1 row in set\n"
        ]
    },
    "JSON_APPEND": {
        "Title": [
            "JSON_APPEND"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823294"
        ],
        "Category": [
            "JSON Functions"
        ],
        "Feature": "JSON_APPEND(json_doc, path, val[, path, val] ...)\n",
        "Description": [
            "该函数用于将指定的值附加到 JSON 文档中指定数组的末尾并返回结果。是函数 JSON_ARRAY_APPEND() 的别名。"
        ],
        "Illustration": [
            "json_doc 参数用于指定 JSON 文档，path 为路径参数。如果任何参数为 NULL，则返回 NULL。",
            "以下情况都会发生报错：",
            "json_doc 参数不是有效的 JSON 文档。",
            "path 参数不是有效的路径表达式。",
            "path 参数包含 * 或 ** 通配符。",
            "路径值对 path-value 按照从左到右的顺序进行评估。通过评估的 path-value 对所生成的文档作为评估下一对的新值。",
            "如果路径对应的值是一个标量或对象值，则该值将自动包裹在数组中，并将新值添加到该数组中。JSON 文档中未经路径识别所属数组的 path-value 对将被忽略。"
        ],
        "Examples": [
            "obclient> SET @jn = '[\"a\", [\"b\", \"c\"], \"d\",\"e\"]';\n",
            "obclient> SELECT JSON_APPEND(@jn, '$[1]', 1);\n",
            "+--------------------------------+\n| JSON_APPEND(@jn, '$[1]', 1)    |\n+--------------------------------+\n| [\"a\", [\"b\", \"c\", 1], \"d\", \"e\"] |\n+--------------------------------+\n1 row in set\n",
            "obclient> SELECT JSON_APPEND(@jn, '$[0]', 2);\n",
            "+----------------------------------+\n| JSON_APPEND(@jn, '$[0]', 2)      |\n+----------------------------------+\n| [[\"a\", 2], [\"b\", \"c\"], \"d\", \"e\"] |\n+----------------------------------+\n1 row in set\n",
            "obclient> SELECT JSON_APPEND(@jn, '$[1][0]', 3);\n",
            "+----------------------------------+\n| JSON_APPEND(@jn, '$[1][0]', 3)   |\n+----------------------------------+\n| [\"a\", [[\"b\", 3], \"c\"], \"d\", \"e\"] |\n+----------------------------------+\n1 row in set\n",
            "obclient> SET @jemp = '{\"a\": 1, \"b\": [2, 3], \"c\": 4}';\n",
            "obclient> SELECT JSON_APPEND(@jemp, '$.b', 'x');\n",
            "+------------------------------------+\n| JSON_APPEND(@jemp, '$.b', 'x')     |\n+------------------------------------+\n| {\"a\": 1, \"b\": [2, 3, \"x\"], \"c\": 4} |\n+------------------------------------+\n1 row in set\n",
            "obclient> SELECT JSON_APPEND(@jemp, '$.c', 'y');\n",
            "+--------------------------------------+\n| JSON_APPEND(@jemp, '$.c', 'y')       |\n+--------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": [4, \"y\"]} |\n+--------------------------------------+\n1 row in set\n",
            "obclient> SET @temp = '{\"a\": 5}';\n",
            "obclient> SELECT JSON_APPEND(@temp, '$', 'z');\n",
            "+------------------------------+\n| JSON_APPEND(@temp, '$', 'z') |\n+------------------------------+\n| [{\"a\": 5}, \"z\"]              |\n+------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "如下示例中，定义了一个用户变量 @jn，包含一个 JSON 字符串，且该 JSON 字符串表示一个 JSON 数组。",
            "obclient> SET @jn = '[\"a\", [\"b\", \"c\"], \"d\",\"e\"]';\n",
            "将值 1 追加到变量 @jn 中路径为 $[1] 的数组尾部。",
            "obclient> SELECT JSON_APPEND(@jn, '$[1]', 1);\n",
            "这里，$[1] 对应的是 JSON 数组中的第二个元素。返回结果如下：",
            "+--------------------------------+\n| JSON_APPEND(@jn, '$[1]', 1)    |\n+--------------------------------+\n| [\"a\", [\"b\", \"c\", 1], \"d\", \"e\"] |\n+--------------------------------+\n1 row in set\n",
            "将值 2 追加到变量 @jn 中路径为 $[0] 的数组尾部。",
            "obclient> SELECT JSON_APPEND(@jn, '$[0]', 2);\n",
            "这里，$[0] 对应的是 JSON 数组中的第一个元素。返回结果如下：",
            "+----------------------------------+\n| JSON_APPEND(@jn, '$[0]', 2)      |\n+----------------------------------+\n| [[\"a\", 2], [\"b\", \"c\"], \"d\", \"e\"] |\n+----------------------------------+\n1 row in set\n",
            "由于 [\"b\", \"c\"] 是一个数组，我们可以将值 3 追加到变量 @jn 中路径为 $[1][0] 的数组尾部。",
            "obclient> SELECT JSON_APPEND(@jn, '$[1][0]', 3);\n",
            "返回结果如下：",
            "+----------------------------------+\n| JSON_APPEND(@jn, '$[1][0]', 3)   |\n+----------------------------------+\n| [\"a\", [[\"b\", 3], \"c\"], \"d\", \"e\"] |\n+----------------------------------+\n1 row in set\n",
            "如下示例中，定义了一个用户变量 @jemp，包含一个 JSON 字符串，且该 JSON 字符串表示一个对象。该对象中包含三个键值对：\"a\" 的值是数字 1；\"b\" 的值是一个包含数字 2 和 3 的数组；\"c\" 的值是数字 4。",
            "obclient> SET @jemp = '{\"a\": 1, \"b\": [2, 3], \"c\": 4}';\n",
            "将字符串 x 追加到变量 @jemp 中路径为 $.b 的数组尾部。",
            "obclient> SELECT JSON_APPEND(@jemp, '$.b', 'x');\n",
            "这里，$.b 表示 \"b\" 键对应的数组。返回结果如下：",
            "+------------------------------------+\n| JSON_APPEND(@jemp, '$.b', 'x')     |\n+------------------------------------+\n| {\"a\": 1, \"b\": [2, 3, \"x\"], \"c\": 4} |\n+------------------------------------+\n1 row in set\n",
            "同样，将字符串 y 追加到变量 @jemp 中路径为 $.c 的数组尾部。",
            "obclient> SELECT JSON_APPEND(@jemp, '$.c', 'y');\n",
            "这里，$.c 表示 \"c\" 键对应的数组。返回结果如下：",
            "+--------------------------------------+\n| JSON_APPEND(@jemp, '$.c', 'y')       |\n+--------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": [4, \"y\"]} |\n+--------------------------------------+\n1 row in set\n",
            "如下示例中，定义了一个用户变量 @temp，包含一个简单的 JSON 对象。在该对象中，键是 \"a\"，值是数字 5。",
            "obclient> SET @temp = '{\"a\": 5}';\n",
            "将字符串 z 追加到变量 @temp 中路径为 $ 的数组尾部。",
            "obclient> SELECT JSON_APPEND(@temp, '$', 'z');\n",
            "需要注意的是，指定路径为 $，其表示的是 JSON 文档的根级别，也就是整个 JSON 对象，而不是向 JSON 对象中添加键值对。返回结果如下：",
            "+------------------------------+\n| JSON_APPEND(@temp, '$', 'z') |\n+------------------------------+\n| [{\"a\": 5}, \"z\"]              |\n+------------------------------+\n1 row in set\n"
        ]
    },
    "JSON_ARRAY": {
        "Title": [
            "JSON_ARRAY"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823315"
        ],
        "Category": [
            "JSON Functions"
        ],
        "Feature": "JSON_ARRAY([val[, val] ...])\n",
        "Description": [
            "该函数根据输入的（可能为空）值的列表返回包含这些值的 JSON 数组。"
        ],
        "Illustration": [
            "参数 val 表示输入的值。"
        ],
        "Examples": [
            "obclient> SELECT JSON_ARRAY(1, \"abcd\", NULL, TRUE, CURTIME(),'[a,b,c]','{\"d\":100}');\n+---------------------------------------------------------------------+\n| JSON_ARRAY(1, \"abcd\", NULL, TRUE, CURTIME(),'[a,b,c]','{\"d\":100}')   |\n+---------------------------------------------------------------------+\n| [1, \"abcd\", null, true, \"21:49:37.000000\", \"[a,b,c]\", \"{\\\"d\\\":100}\"] |\n+---------------------------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_ARRAY(NULL);\n+------------------+\n| JSON_ARRAY(NULL) |\n+------------------+\n| [null]           |\n+------------------+\n1 row in set\n\nobclient> SELECT JSON_ARRAY();\n+--------------+\n| JSON_ARRAY() |\n+--------------+\n| []           |\n+--------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT JSON_ARRAY(1, \"abcd\", NULL, TRUE, CURTIME(),'[a,b,c]','{\"d\":100}');\n+---------------------------------------------------------------------+\n| JSON_ARRAY(1, \"abcd\", NULL, TRUE, CURTIME(),'[a,b,c]','{\"d\":100}')   |\n+---------------------------------------------------------------------+\n| [1, \"abcd\", null, true, \"21:49:37.000000\", \"[a,b,c]\", \"{\\\"d\\\":100}\"] |\n+---------------------------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_ARRAY(NULL);\n+------------------+\n| JSON_ARRAY(NULL) |\n+------------------+\n| [null]           |\n+------------------+\n1 row in set\n\nobclient> SELECT JSON_ARRAY();\n+--------------+\n| JSON_ARRAY() |\n+--------------+\n| []           |\n+--------------+\n1 row in set\n"
        ]
    },
    "JSON_ARRAYAGG": {
        "Title": [
            "JSON_ARRAYAGG"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823303"
        ],
        "Category": [
            "JSON Functions"
        ],
        "Feature": "JSON_ARRAYAGG(col_or_expr)[over_clause]\n",
        "Description": [
            "该函数将结果集聚合为单个 JSON 数组，其元素由行组成。此数组中元素的顺序未定义。",
            "该函数作用于计算为单个值的列或表达式。"
        ],
        "Illustration": [
            "参数 col_or_expr 为列或表达式。如果结果不包含行，或者出现错误，则返回 NULL。",
            "\n注意\n该函数暂不支持窗口函数，即 OVER 子句。\n"
        ],
        "Examples": [
            "obclient> CREATE TABLE tbl1 (oid INT, attr VARCHAR(100), value VARCHAR(100));\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO tbl1 VALUES (2, 'color', 'red'),(2, 'fabric', 'silk'),(3,'color','green'),(3,'shape','square');\nQuery OK, 4 rows affected\nRecords: 4  Duplicates: 0  Warnings: 0\n\nobclient> SELECT oid, JSON_ARRAYAGG(attr) AS attributes FROM tbl1 GROUP BY oid;\n+------+---------------------+\n| oid  | attributes          |\n+------+---------------------+\n|    2 | [\"color\", \"fabric\"] |\n|    3 | [\"color\", \"shape\"]  |\n+------+---------------------+\n2 rows in set\n\nobclient> INSERT INTO tbl1 SELECT * FROM tbl1;\nQuery OK, 4 rows affected\nRecords: 4  Duplicates: 0  Warnings: 0\n\nobclient> SELECT oid, JSON_ARRAYAGG(attr) AS attributes FROM tbl1 GROUP BY oid;\n+------+----------------------------------------+\n| oid  | attributes                             |\n+------+----------------------------------------+\n|    2 | [\"color\", \"fabric\", \"color\", \"fabric\"] |\n|    3 | [\"color\", \"shape\", \"color\", \"shape\"]   |\n+------+----------------------------------------+\n2 rows in set\n"
        ],
        "Detailed Examples": [
            "obclient> CREATE TABLE tbl1 (oid INT, attr VARCHAR(100), value VARCHAR(100));\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO tbl1 VALUES (2, 'color', 'red'),(2, 'fabric', 'silk'),(3,'color','green'),(3,'shape','square');\nQuery OK, 4 rows affected\nRecords: 4  Duplicates: 0  Warnings: 0\n\nobclient> SELECT oid, JSON_ARRAYAGG(attr) AS attributes FROM tbl1 GROUP BY oid;\n+------+---------------------+\n| oid  | attributes          |\n+------+---------------------+\n|    2 | [\"color\", \"fabric\"] |\n|    3 | [\"color\", \"shape\"]  |\n+------+---------------------+\n2 rows in set\n\nobclient> INSERT INTO tbl1 SELECT * FROM tbl1;\nQuery OK, 4 rows affected\nRecords: 4  Duplicates: 0  Warnings: 0\n\nobclient> SELECT oid, JSON_ARRAYAGG(attr) AS attributes FROM tbl1 GROUP BY oid;\n+------+----------------------------------------+\n| oid  | attributes                             |\n+------+----------------------------------------+\n|    2 | [\"color\", \"fabric\", \"color\", \"fabric\"] |\n|    3 | [\"color\", \"shape\", \"color\", \"shape\"]   |\n+------+----------------------------------------+\n2 rows in set\n"
        ]
    },
    "JSON_ARRAY_APPEND": {
        "Title": [
            "JSON_ARRAY_APPEND"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823295"
        ],
        "Category": [
            "JSON Functions"
        ],
        "Feature": "JSON_ARRAY_APPEND(json_doc, path, val[, path, val] ...)\n",
        "Description": [
            "该函数用于将指定的值附加到 JSON 文档中指定数组的末尾并返回结果。是函数 JSON_APPEND() 的别名。"
        ],
        "Illustration": [
            "json_doc 参数用于指定 JSON 文档，path 为路径参数。如果任何参数为 NULL，则返回 NULL。",
            "以下情况都会发生报错：",
            "json_doc 参数不是有效的 JSON 文档。",
            "path 参数不是有效的路径表达式。",
            "path 参数包含 * 或 ** 通配符。",
            "路径值对 path-value 按照从左到右的顺序进行评估。通过评估的 path-value 对所生成的文档作为评估下一对的新值。",
            "如果路径对应的值是一个标量或对象值，则该值将自动包裹在数组中，并将新值添加到该数组中。JSON 文档中未经路径识别所属数组的 path-value 对将被忽略。"
        ],
        "Examples": [
            "obclient> SET @jn = '[\"a\", [\"b\", \"c\"], \"d\",\"e\"]';\n",
            "obclient> SELECT JSON_ARRAY_APPEND(@jn, '$[1]', 1);\n",
            "+-----------------------------------+\n| JSON_ARRAY_APPEND(@jn, '$[1]', 1) |\n+-----------------------------------+\n| [\"a\", [\"b\", \"c\", 1], \"d\", \"e\"]    |\n+-----------------------------------+\n1 row in set\n",
            "obclient> SELECT JSON_ARRAY_APPEND(@jn, '$[0]', 2);\n",
            "+-----------------------------------+\n| JSON_ARRAY_APPEND(@jn, '$[0]', 2) |\n+-----------------------------------+\n| [[\"a\", 2], [\"b\", \"c\"], \"d\", \"e\"]  |\n+-----------------------------------+\n1 row in set\n",
            "obclient> SELECT JSON_ARRAY_APPEND(@jn, '$[1][0]', 3);\n",
            "+--------------------------------------+\n| JSON_ARRAY_APPEND(@jn, '$[1][0]', 3) |\n+--------------------------------------+\n| [\"a\", [[\"b\", 3], \"c\"], \"d\", \"e\"]     |\n+--------------------------------------+\n1 row in set\n",
            "obclient> SET @jemp = '{\"a\": 1, \"b\": [2, 3], \"c\": 4}';\n",
            "obclient> SELECT JSON_ARRAY_APPEND(@jemp, '$.b', 'x');\n",
            "+--------------------------------------+\n| JSON_ARRAY_APPEND(@jemp, '$.b', 'x') |\n+--------------------------------------+\n| {\"a\": 1, \"b\": [2, 3, \"x\"], \"c\": 4}   |\n+--------------------------------------+\n1 row in set\n",
            "obclient> SELECT JSON_ARRAY_APPEND(@jemp, '$.c', 'y');\n",
            "+--------------------------------------+\n| JSON_ARRAY_APPEND(@jemp, '$.c', 'y') |\n+--------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": [4, \"y\"]} |\n+--------------------------------------+\n1 row in set\n",
            "obclient> SET @temp = '{\"a\": 5}';\n",
            "obclient> SELECT JSON_ARRAY_APPEND(@temp, '$', 'z');\n",
            "+------------------------------------+\n| JSON_ARRAY_APPEND(@temp, '$', 'z') |\n+------------------------------------+\n| [{\"a\": 5}, \"z\"]                    |\n+------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "如下示例中，定义了一个用户变量 @jn，包含一个 JSON 字符串，且该 JSON 字符串表示一个 JSON 数组。",
            "obclient> SET @jn = '[\"a\", [\"b\", \"c\"], \"d\",\"e\"]';\n",
            "将值 1 追加到变量 @jn 中路径为 $[1] 的数组尾部。",
            "obclient> SELECT JSON_ARRAY_APPEND(@jn, '$[1]', 1);\n",
            "这里，$[1] 对应的是 JSON 数组中的第二个元素。返回结果如下：",
            "+-----------------------------------+\n| JSON_ARRAY_APPEND(@jn, '$[1]', 1) |\n+-----------------------------------+\n| [\"a\", [\"b\", \"c\", 1], \"d\", \"e\"]    |\n+-----------------------------------+\n1 row in set\n",
            "将值 2 追加到变量 @jn 中路径为 $[0] 的数组尾部。",
            "obclient> SELECT JSON_ARRAY_APPEND(@jn, '$[0]', 2);\n",
            "这里，$[0] 对应的是 JSON 数组中的第一个元素。返回结果如下：",
            "+-----------------------------------+\n| JSON_ARRAY_APPEND(@jn, '$[0]', 2) |\n+-----------------------------------+\n| [[\"a\", 2], [\"b\", \"c\"], \"d\", \"e\"]  |\n+-----------------------------------+\n1 row in set\n",
            "由于 [\"b\", \"c\"] 是一个数组，我们可以将值 3 追加到变量 @jn 中路径为 $[1][0] 的数组尾部。",
            "obclient> SELECT JSON_ARRAY_APPEND(@jn, '$[1][0]', 3);\n",
            "返回结果如下：",
            "+--------------------------------------+\n| JSON_ARRAY_APPEND(@jn, '$[1][0]', 3) |\n+--------------------------------------+\n| [\"a\", [[\"b\", 3], \"c\"], \"d\", \"e\"]     |\n+--------------------------------------+\n1 row in set\n",
            "如下示例中，定义了一个用户变量 @jemp，包含一个 JSON 字符串，且该 JSON 字符串表示一个对象。该对象中包含三个键值对：\"a\" 的值是数字 1；\"b\" 的值是一个包含数字 2 和 3 的数组；\"c\" 的值是数字 4。",
            "obclient> SET @jemp = '{\"a\": 1, \"b\": [2, 3], \"c\": 4}';\n",
            "将字符串 x 追加到变量 @jemp 中路径为 $.b 的数组尾部。",
            "obclient> SELECT JSON_ARRAY_APPEND(@jemp, '$.b', 'x');\n",
            "这里，$.b 表示 \"b\" 键对应的数组。返回结果如下：",
            "+--------------------------------------+\n| JSON_ARRAY_APPEND(@jemp, '$.b', 'x') |\n+--------------------------------------+\n| {\"a\": 1, \"b\": [2, 3, \"x\"], \"c\": 4}   |\n+--------------------------------------+\n1 row in set\n",
            "同样，将字符串 y 追加到变量 @jemp 中路径为 $.c 的数组尾部。",
            "obclient> SELECT JSON_ARRAY_APPEND(@jemp, '$.c', 'y');\n",
            "这里，$.c 表示 \"c\" 键对应的数组。返回结果如下：",
            "+--------------------------------------+\n| JSON_ARRAY_APPEND(@jemp, '$.c', 'y') |\n+--------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": [4, \"y\"]} |\n+--------------------------------------+\n1 row in set\n",
            "如下示例中，定义了一个用户变量 @temp，包含一个简单的 JSON 对象。在该对象中，键是 \"a\"，值是数字 5。",
            "obclient> SET @temp = '{\"a\": 5}';\n",
            "将字符串 z 追加到变量 @temp 中路径为 $ 的数组尾部。",
            "obclient> SELECT JSON_ARRAY_APPEND(@temp, '$', 'z');\n",
            "需要注意的是，指定路径为 $，其表示的是 JSON 文档的根级别，也就是整个 JSON 对象，而不是向 JSON 对象中添加键值对。返回结果如下：",
            "+------------------------------------+\n| JSON_ARRAY_APPEND(@temp, '$', 'z') |\n+------------------------------------+\n| [{\"a\": 5}, \"z\"]                    |\n+------------------------------------+\n1 row in set\n"
        ]
    },
    "JSON_ARRAY_INSERT": {
        "Title": [
            "JSON_ARRAY_INSERT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823293"
        ],
        "Category": [
            "JSON Functions"
        ],
        "Feature": "JSON_ARRAY_INSERT(json_doc, path, val[, path, val] ...)\n",
        "Description": [
            "该函数用于将数组插入文档中并返回修改后的文档。"
        ],
        "Illustration": [
            "json_doc 参数用于指定 JSON 文档，path 为路径参数。如果任何参数为 NULL，则返回 NULL。",
            "以下情况都会发生报错：",
            "json_doc 参数不是有效的 JSON 文档。",
            "path 参数不是有效的路径表达式。",
            "path 参数包含 * 或 ** 通配符。",
            "路径值对 path-value 按照从左到右的顺序进行评估。通过评估的 path-value 对所生成的文档作为评估下一对的新值。",
            "JSON 文档中未经路径识别所属数组的 path-value 对将被忽略。",
            "如果路径识别了某一数组元素，则在该元素位置插入相应的值，将所有后续值向右移动。如果路径识别的数组位置超出数组末尾的位置，则将值插入到数组末尾。"
        ],
        "Examples": [
            "obclient> SET @jn = '[\"a\", {\"b\": [1, 2]}, [3, 4]]';\nQuery OK, 0 rows affected\n\nobclient> SELECT JSON_ARRAY_INSERT(@jn, '$[1]', 'x');\n+------------------------------------+\n| JSON_ARRAY_INSERT(@jn, '$[1]', 'x') |\n+------------------------------------+\n| [\"a\", \"x\", {\"b\": [1, 2]}, [3, 4]]  |\n+------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_ARRAY_INSERT(@jn, '$[50]', 'x');\n+--------------------------------------+\n| JSON_ARRAY_INSERT(@jn, '$[100]', 'x') |\n+--------------------------------------+\n| [\"a\", {\"b\": [1, 2]}, [3, 4], \"x\"]    |\n+--------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_ARRAY_INSERT(@jn, '$[1].b[0]', 'x');\n+-----------------------------------------+\n| JSON_ARRAY_INSERT(@jn, '$[1].b[0]', 'x') |\n+-----------------------------------------+\n| [\"a\", {\"b\": [\"x\", 1, 2]}, [3, 4]]       |\n+-----------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_ARRAY_INSERT(@jn, '$[2][1]', 'y');\n+---------------------------------------+\n| JSON_ARRAY_INSERT(@jn, '$[2][1]', 'y') |\n+---------------------------------------+\n| [\"a\", {\"b\": [1, 2]}, [3, \"y\", 4]]     |\n+---------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_ARRAY_INSERT(@n, '$[0]', 'x', '$[2][1]', 'y');\n+----------------------------------------------------+\n| JSON_ARRAY_INSERT(@jn, '$[0]', 'x', '$[2][1]', 'y') |\n+----------------------------------------------------+\n| [\"x\", \"a\", {\"b\": [1, 2]}, [3, 4]]                  |\n+----------------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SET @jn = '[\"a\", {\"b\": [1, 2]}, [3, 4]]';\nQuery OK, 0 rows affected\n\nobclient> SELECT JSON_ARRAY_INSERT(@jn, '$[1]', 'x');\n+------------------------------------+\n| JSON_ARRAY_INSERT(@jn, '$[1]', 'x') |\n+------------------------------------+\n| [\"a\", \"x\", {\"b\": [1, 2]}, [3, 4]]  |\n+------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_ARRAY_INSERT(@jn, '$[50]', 'x');\n+--------------------------------------+\n| JSON_ARRAY_INSERT(@jn, '$[100]', 'x') |\n+--------------------------------------+\n| [\"a\", {\"b\": [1, 2]}, [3, 4], \"x\"]    |\n+--------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_ARRAY_INSERT(@jn, '$[1].b[0]', 'x');\n+-----------------------------------------+\n| JSON_ARRAY_INSERT(@jn, '$[1].b[0]', 'x') |\n+-----------------------------------------+\n| [\"a\", {\"b\": [\"x\", 1, 2]}, [3, 4]]       |\n+-----------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_ARRAY_INSERT(@jn, '$[2][1]', 'y');\n+---------------------------------------+\n| JSON_ARRAY_INSERT(@jn, '$[2][1]', 'y') |\n+---------------------------------------+\n| [\"a\", {\"b\": [1, 2]}, [3, \"y\", 4]]     |\n+---------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_ARRAY_INSERT(@n, '$[0]', 'x', '$[2][1]', 'y');\n+----------------------------------------------------+\n| JSON_ARRAY_INSERT(@jn, '$[0]', 'x', '$[2][1]', 'y') |\n+----------------------------------------------------+\n| [\"x\", \"a\", {\"b\": [1, 2]}, [3, 4]]                  |\n+----------------------------------------------------+\n1 row in set\n"
        ]
    },
    "JSON_CONTAINS": {
        "Title": [
            "JSON_CONTAINS"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823309"
        ],
        "Category": [
            "JSON Functions"
        ],
        "Feature": "JSON_CONTAINS(target, candidate[, path])\n",
        "Description": [
            "该函数用于检验指定 JSON 文档是否包含在目标 JSON 文档中，或者是否在目标文档的指定路径上找到指定元素（如果提供了 path 参数）。如果指定 JSON 文档包含在目标 JSON 文档中，该函数返回 1，否则返回 0。",
            "如果只需要检查指定路径中是否存在数据，请使用 JSON_CONTAINS_PATH() 代替。"
        ],
        "Illustration": [
            "参数 candidate 用于指定 JSON 文档，参数 target 表示目标 JSON 文档。",
            "如果任意参数为 NULL，或者 path 参数未被识别为目标文档的一部分，则返回 NULL。",
            "以下情况都会发生报错：",
            "candidate 或 target 参数不是有效的 JSON 文档。",
            "path 参数不是有效的路径表达式。",
            "path 参数包含 * 或 ** 通配符。",
            "该函数遵循以下的规则：",
            "单个元素相等的前提是两个标量值的 JSON_TYPE() 相同，并且可以进行比较。如果是数值类型，可以直接进行比较。",
            "对于数组，当且仅当 candidate 数组的所有元素都包含在 target 数组中时，candidate 数组才包含在 target 数组中。",
            "对于对象，当且仅当 candidate 对象的所有 key 都需要包含在 target 对象中，而且每个 key 对应的 value 也要和目标对象对应的 key 相同时，candidate 对象才包含在 target 对象中。"
        ],
        "Examples": [
            "obclient> SET @jn = '{\"a\": 1, \"b\": 2, \"c\": {\"d\": 4}}';\nQuery OK, 0 rows affected\n\nobclient> SET @jn2 = '1';\nQuery OK, 0 rows affected\n\nobclient> SELECT JSON_CONTAINS(@jn, @jn2, '$.a');\n+---------------------------------+\n| JSON_CONTAINS(@jn, @jn2, '$.a') |\n+---------------------------------+\n|                               1 |\n+---------------------------------+\n1 row in set\n\nobclient> SELECT JSON_CONTAINS(@jn, @jn2, '$.b');\n+---------------------------------+\n| JSON_CONTAINS(@jn, @jn2, '$.b') |\n+---------------------------------+\n|                               0 |\n+---------------------------------+\n1 row in set\n\nobclient> SET @jn2 = '{\"d\": 4}';\nQuery OK, 0 rows affected\n\nobclient> SELECT JSON_CONTAINS(@jn, @jn2, '$.a');\n+---------------------------------+\n| JSON_CONTAINS(@jn, @jn2, '$.a') |\n+---------------------------------+\n|                               0 |\n+---------------------------------+\n1 row in set\n\nobclient> SELECT JSON_CONTAINS(@jn, @jn2, '$.c');\n+---------------------------------+\n| JSON_CONTAINS(@jn, @jn2, '$.c') |\n+---------------------------------+\n|                               1 |\n+---------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SET @jn = '{\"a\": 1, \"b\": 2, \"c\": {\"d\": 4}}';\nQuery OK, 0 rows affected\n\nobclient> SET @jn2 = '1';\nQuery OK, 0 rows affected\n\nobclient> SELECT JSON_CONTAINS(@jn, @jn2, '$.a');\n+---------------------------------+\n| JSON_CONTAINS(@jn, @jn2, '$.a') |\n+---------------------------------+\n|                               1 |\n+---------------------------------+\n1 row in set\n\nobclient> SELECT JSON_CONTAINS(@jn, @jn2, '$.b');\n+---------------------------------+\n| JSON_CONTAINS(@jn, @jn2, '$.b') |\n+---------------------------------+\n|                               0 |\n+---------------------------------+\n1 row in set\n\nobclient> SET @jn2 = '{\"d\": 4}';\nQuery OK, 0 rows affected\n\nobclient> SELECT JSON_CONTAINS(@jn, @jn2, '$.a');\n+---------------------------------+\n| JSON_CONTAINS(@jn, @jn2, '$.a') |\n+---------------------------------+\n|                               0 |\n+---------------------------------+\n1 row in set\n\nobclient> SELECT JSON_CONTAINS(@jn, @jn2, '$.c');\n+---------------------------------+\n| JSON_CONTAINS(@jn, @jn2, '$.c') |\n+---------------------------------+\n|                               1 |\n+---------------------------------+\n1 row in set\n"
        ]
    },
    "JSON_CONTAINS_PATH": {
        "Title": [
            "JSON_CONTAINS_PATH"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823310"
        ],
        "Category": [
            "JSON Functions"
        ],
        "Feature": "JSON_CONTAINS_PATH(json_doc, one_or_all, path[, path] ...)\n",
        "Description": [
            "该函数用于检验一个或多个指定的路径是否包含于目标 JSON 文档中。如果包含在目标 JSON 文档中，该函数返回 1，否则返回 0。"
        ],
        "Illustration": [
            "参数 json_doc 用于指定 JSON 文档，path 为路径参数。如果任何参数为 NULL，则返回 NULL。",
            "对于 one_or_all 参数，可选值如下：",
            "'one'：如果文档中至少存在一个路径，则返回 1，否则返回 0。",
            "'all'：如果文档中存在所有路径，则返回 1，否则返回 0。",
            "以下情况都会发生报错：",
            "json_doc 参数不是有效的 JSON 文档。",
            "任意 path 参数不是有效的路径表达式。",
            "one_or_all 参数不为 'one' 或者 'all'。"
        ],
        "Examples": [
            "obclient> SET @jn = '{\"a\": 1, \"b\": 2, \"c\": {\"d\": 4}}';\nQuery OK, 0 rows affected\n\nobclient> SELECT JSON_CONTAINS_PATH(@jn, 'one', '$.a', '$.e');\n+---------------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'one', '$.a', '$.e') |\n+---------------------------------------------+\n|                                           1 |\n+---------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_CONTAINS_PATH(@jn, 'all', '$.a', '$.e');\n+---------------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'all', '$.a', '$.e') |\n+---------------------------------------------+\n|                                           0 |\n+---------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_CONTAINS_PATH(@jn, 'one', '$.c.d');\n+----------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'one', '$.c.d') |\n+----------------------------------------+\n|                                      1 |\n+----------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_CONTAINS_PATH(@jn, 'one', '$.a.d');\n+----------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'one', '$.a.d') |\n+----------------------------------------+\n|                                      0 |\n+----------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SET @jn = '{\"a\": 1, \"b\": 2, \"c\": {\"d\": 4}}';\nQuery OK, 0 rows affected\n\nobclient> SELECT JSON_CONTAINS_PATH(@jn, 'one', '$.a', '$.e');\n+---------------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'one', '$.a', '$.e') |\n+---------------------------------------------+\n|                                           1 |\n+---------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_CONTAINS_PATH(@jn, 'all', '$.a', '$.e');\n+---------------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'all', '$.a', '$.e') |\n+---------------------------------------------+\n|                                           0 |\n+---------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_CONTAINS_PATH(@jn, 'one', '$.c.d');\n+----------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'one', '$.c.d') |\n+----------------------------------------+\n|                                      1 |\n+----------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_CONTAINS_PATH(@jn, 'one', '$.a.d');\n+----------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'one', '$.a.d') |\n+----------------------------------------+\n|                                      0 |\n+----------------------------------------+\n1 row in set\n"
        ]
    },
    "JSON_DEPTH": {
        "Title": [
            "JSON_DEPTH"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823286"
        ],
        "Category": [
            "JSON Functions"
        ],
        "Feature": "JSON_DEPTH(json_doc)\n",
        "Description": [
            "返回 JSON 文档的最大深度。"
        ],
        "Illustration": [
            "json_doc 参数用于指定 JSON 文档。如果参数为 NULL，则返回 NULL。",
            "如果参数不是有效的 JSON 文档，则会发生错误。",
            "空数组、空对象或标量值的深度为 1。仅包含深度为 1 的元素的非空数组深度为 2，仅包含深度为 1 的成员值的非空对象的深度为 2。否则，JSON 文档的深度大于 2。"
        ],
        "Examples": [
            "obclient> SELECT JSON_DEPTH('{}'), JSON_DEPTH('[]'), JSON_DEPTH('true');\n+------------------+------------------+--------------------+\n| JSON_DEPTH('{}') | JSON_DEPTH('[]') | JSON_DEPTH('true') |\n+------------------+------------------+--------------------+\n|                1 |                1 |                  1 |\n+------------------+------------------+--------------------+\n1 row in set\n\nobclient> SELECT JSON_DEPTH('[101, 202]'), JSON_DEPTH('[[], {}]');\n+--------------------------+------------------------+\n| JSON_DEPTH('[101, 202]') | JSON_DEPTH('[[], {}]') |\n+--------------------------+------------------------+\n|                        2 |                      2 |\n+--------------------------+------------------------+\n1 row in set\n\nobclient> SELECT JSON_DEPTH('[101, {\"a\": 202}]');\n+---------------------------------+\n| JSON_DEPTH('[101, {\"a\": 202}]') |\n+---------------------------------+\n|                               3 |\n+---------------------------------+\n1 row in set\n\nobclient> SELECT JSON_DEPTH('{\"a\":101, \"v\":\"aaa\"}');\n+------------------------------------+\n| JSON_DEPTH('{\"a\":101, \"v\":\"aaa\"}') |\n+------------------------------------+\n|                                  2 |\n+------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT JSON_DEPTH('{}'), JSON_DEPTH('[]'), JSON_DEPTH('true');\n+------------------+------------------+--------------------+\n| JSON_DEPTH('{}') | JSON_DEPTH('[]') | JSON_DEPTH('true') |\n+------------------+------------------+--------------------+\n|                1 |                1 |                  1 |\n+------------------+------------------+--------------------+\n1 row in set\n\nobclient> SELECT JSON_DEPTH('[101, 202]'), JSON_DEPTH('[[], {}]');\n+--------------------------+------------------------+\n| JSON_DEPTH('[101, 202]') | JSON_DEPTH('[[], {}]') |\n+--------------------------+------------------------+\n|                        2 |                      2 |\n+--------------------------+------------------------+\n1 row in set\n\nobclient> SELECT JSON_DEPTH('[101, {\"a\": 202}]');\n+---------------------------------+\n| JSON_DEPTH('[101, {\"a\": 202}]') |\n+---------------------------------+\n|                               3 |\n+---------------------------------+\n1 row in set\n\nobclient> SELECT JSON_DEPTH('{\"a\":101, \"v\":\"aaa\"}');\n+------------------------------------+\n| JSON_DEPTH('{\"a\":101, \"v\":\"aaa\"}') |\n+------------------------------------+\n|                                  2 |\n+------------------------------------+\n1 row in set\n"
        ]
    },
    "JSON_EXTRACT": {
        "Title": [
            "JSON_EXTRACT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823308"
        ],
        "Category": [
            "JSON Functions"
        ],
        "Feature": "JSON_EXTRACT(json_doc, path[, path] ...)\n",
        "Description": [
            "该函数用于从 JSON 文档中指定的路径返回数据。如果任何参数为 NULL 或在文档中没有定位到路径，则返回 NULL。"
        ],
        "Illustration": [
            "参数 json_doc 用于指定 JSON 文档，path 为路径参数。如果参数 json_doc 不是有效的 JSON 文档或任意 path 参数不是有效的路径表达式，则会发生错误。",
            "返回值由 path 参数的所有匹配值组成。如果这些参数返回多个值，则匹配值将自动包裹为一个数组，顺序与生成它们的路径相对应。否则，返回单个匹配值。"
        ],
        "Examples": [
            "obclient> SELECT JSON_EXTRACT('[10, 20, [30, 40]]', '$[0]');\n+--------------------------------------------+\n| JSON_EXTRACT('[10, 20, [30, 40]]', '$[0]') |\n+--------------------------------------------+\n| 10                                         |\n+--------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_EXTRACT('[10, 20, [30, 40]]', '$[2][1]');\n+-----------------------------------------------+\n| JSON_EXTRACT('[10, 20, [30, 40]]', '$[2][1]') |\n+-----------------------------------------------+\n| 40                                            |\n+-----------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT JSON_EXTRACT('[10, 20, [30, 40]]', '$[0]');\n+--------------------------------------------+\n| JSON_EXTRACT('[10, 20, [30, 40]]', '$[0]') |\n+--------------------------------------------+\n| 10                                         |\n+--------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_EXTRACT('[10, 20, [30, 40]]', '$[2][1]');\n+-----------------------------------------------+\n| JSON_EXTRACT('[10, 20, [30, 40]]', '$[2][1]') |\n+-----------------------------------------------+\n| 40                                            |\n+-----------------------------------------------+\n1 row in set\n"
        ]
    },
    "JSON_INSERT": {
        "Title": [
            "JSON_INSERT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823291"
        ],
        "Category": [
            "JSON Functions"
        ],
        "Feature": "JSON_INSERT(json_doc, path, val[, path, val] ...)\n",
        "Description": [
            "该函数将数据插入 JSON 文档并返回结果。"
        ],
        "Illustration": [
            "json_doc 参数用于指定 JSON 文档，path 为路径参数。如果任何参数为 NULL，则返回 NULL。",
            "以下情况都会发生报错：",
            "json_doc 参数不是有效的 JSON 文档。",
            "path 参数不是有效的路径表达式。",
            "path 参数包含 * 或 ** 通配符。",
            "路径值对 path-value 按照从左到右的顺序进行评估。通过 path-value 对所生成的文档作为评估下一对的新值。",
            "文档中现有路径的 path-value 对将被忽略并且不会覆盖现有文档值。如果路径识别出以下某一类型的值，则文档中不存在路径的 path-value 对会将值添加到文档中：",
            "现有对象中不存在的成员。该成员被添加到对象并与新值相关联。",
            "超出现有数组末尾的位置。此时使用新值扩展数组。如果现有值不是数组，则将其自动包裹为数组，然后使用新值进行扩展。",
            "否则，文档中不存在的路径的路径值对将被忽略且无效。"
        ],
        "Examples": [
            "obclient> SET @jn = '{ \"a\": 1, \"b\": [2, 3]}';\nQuery OK, 0 rows affected\n\nobclient> SELECT JSON_INSERT(@jn, '$.a', 10, '$.c', '[true, false]');\n+-----------------------------------------------------+\n| JSON_INSERT(@jn, '$.a', 10, '$.c', '[true, false]') |\n+-----------------------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": \"[true, false]\"}         |\n+-----------------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SET @jn = '{ \"a\": 1, \"b\": [2, 3]}';\nQuery OK, 0 rows affected\n\nobclient> SELECT JSON_INSERT(@jn, '$.a', 10, '$.c', '[true, false]');\n+-----------------------------------------------------+\n| JSON_INSERT(@jn, '$.a', 10, '$.c', '[true, false]') |\n+-----------------------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": \"[true, false]\"}         |\n+-----------------------------------------------------+\n1 row in set\n"
        ]
    },
    "JSON_KEYS": {
        "Title": [
            "JSON_KEYS"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823312"
        ],
        "Category": [
            "JSON Functions"
        ],
        "Feature": "JSON_KEYS(json_doc[, path])\n",
        "Description": [
            "该函数从 JSON 对象的顶层值开始搜索，返回对应路径的 Key 的数组。"
        ],
        "Illustration": [
            "参数 json_doc 用于指定 JSON 文档，path 为路径参数。如果任何参数为 NULL，则返回 NULL。",
            "如果 json_doc 参数指定的不是对象，或者 path（如果给出）不对应任何路径，返回 NULL。",
            "以下情况都会发生报错：",
            "json_doc 参数 不是有效的 JSON 文档。",
            "path 参数不是有效的路径表达式。",
            "path 参数包含 * 或 ** 通配符。",
            "如果选定的对象为空，则结果为空。如果顶层值嵌套了子对象，则返回值不包括来自这些子对象的 Key。"
        ],
        "Examples": [
            "obclient> SELECT JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 20}}', '$.b');\n+----------------------------------------------+\n| JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 20}}', '$.b') |\n+----------------------------------------------+\n| [\"c\"]                                        |\n+----------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 20}}');\n+---------------------------------------+\n| JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 20}}') |\n+---------------------------------------+\n| [\"a\", \"b\"]                            |\n+---------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 20}}', '$.b');\n+----------------------------------------------+\n| JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 20}}', '$.b') |\n+----------------------------------------------+\n| [\"c\"]                                        |\n+----------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 20}}');\n+---------------------------------------+\n| JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 20}}') |\n+---------------------------------------+\n| [\"a\", \"b\"]                            |\n+---------------------------------------+\n1 row in set\n"
        ]
    },
    "JSON_LENGTH": {
        "Title": [
            "JSON_LENGTH"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823285"
        ],
        "Category": [
            "JSON Functions"
        ],
        "Feature": "JSON_LENGTH(json_doc[, path])\n",
        "Description": [
            "该函数返回 JSON 文档的长度。如果给出了 path 参数，则返回由路径标识的文档中值的长度。"
        ],
        "Illustration": [
            "json_doc 参数用于指定 JSON 文档，path 为路径参数。如果任何参数为 NULL 或 path 参数未标识文档中的值，则返回 NULL。",
            "以下情况都会发生报错：",
            "json_doc 参数不是有效的 JSON 文档。",
            "path 参数不是有效的路径表达式。",
            "path 参数包含 * 或 ** 通配符。",
            "JSON 文档的长度定义如下：",
            "标量的长度为 1。",
            "数组的长度是数组元素的数量。",
            "对象的长度是对象成员的数量。",
            "不计算嵌套数组或对象的长度。"
        ],
        "Examples": [
            "obclient> SELECT JSON_LENGTH('[1, 2, {\"a\": 3}, 4]');\n+------------------------------------+\n| JSON_LENGTH('[1, 2, {\"a\": 3}, 4]') |\n+------------------------------------+\n|                                  4 |\n+------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_LENGTH('{\"a\": 1, \"b\": {\"c\": 303}}');\n+------------------------------------------+\n| JSON_LENGTH('{\"a\": 1, \"b\": {\"c\": 303}}') |\n+------------------------------------------+\n|                                        2 |\n+------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_LENGTH('{\"a\": 1, \"b\": {\"c\": 30}}', '$.b');\n+------------------------------------------------+\n| JSON_LENGTH('{\"a\": 1, \"b\": {\"c\": 30}}', '$.b') |\n+------------------------------------------------+\n|                                              1 |\n+------------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT JSON_LENGTH('[1, 2, {\"a\": 3}, 4]');\n+------------------------------------+\n| JSON_LENGTH('[1, 2, {\"a\": 3}, 4]') |\n+------------------------------------+\n|                                  4 |\n+------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_LENGTH('{\"a\": 1, \"b\": {\"c\": 303}}');\n+------------------------------------------+\n| JSON_LENGTH('{\"a\": 1, \"b\": {\"c\": 303}}') |\n+------------------------------------------+\n|                                        2 |\n+------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_LENGTH('{\"a\": 1, \"b\": {\"c\": 30}}', '$.b');\n+------------------------------------------------+\n| JSON_LENGTH('{\"a\": 1, \"b\": {\"c\": 30}}', '$.b') |\n+------------------------------------------------+\n|                                              1 |\n+------------------------------------------------+\n1 row in set\n"
        ]
    },
    "JSON_MERGE": {
        "Title": [
            "JSON_MERGE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823297"
        ],
        "Category": [
            "JSON Functions"
        ],
        "Feature": "JSON_MERGE(json_doc, json_doc[, json_doc] ...)\n",
        "Description": [
            "该函数用于合并多个 JSON 文档。该函数是 JSON_MERGE_PRESERVE() 的同义词。"
        ],
        "Illustration": [
            "json_doc 参数指定需要合并的 JSON 文档。"
        ],
        "Examples": [
            "obclient> SELECT JSON_MERGE('[1, 2, 3]', '[true, false]', '{\"a\":100}');\n+-------------------------------------------------------+\n| JSON_MERGE('[1, 2, 3]', '[true, false]', '{\"a\":100}') |\n+-------------------------------------------------------+\n| [1, 2, 3, true, false, {\"a\": 100}]                    |\n+-------------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_MERGE('{\"1\": 2}', '[true, false]', '{\"a\":100}');\n+------------------------------------------------------+\n| JSON_MERGE('{\"1\": 2}', '[true, false]', '{\"a\":100}') |\n+------------------------------------------------------+\n| [{\"1\": 2}, true, false, {\"a\": 100}]                  |\n+------------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_MERGE('{\"1\": 2}',  '{\"a\":100}');\n+--------------------------------------+\n| JSON_MERGE('{\"1\": 2}',  '{\"a\":100}') |\n+--------------------------------------+\n| {\"1\": 2, \"a\": 100}                   |\n+--------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT JSON_MERGE('[1, 2, 3]', '[true, false]', '{\"a\":100}');\n+-------------------------------------------------------+\n| JSON_MERGE('[1, 2, 3]', '[true, false]', '{\"a\":100}') |\n+-------------------------------------------------------+\n| [1, 2, 3, true, false, {\"a\": 100}]                    |\n+-------------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_MERGE('{\"1\": 2}', '[true, false]', '{\"a\":100}');\n+------------------------------------------------------+\n| JSON_MERGE('{\"1\": 2}', '[true, false]', '{\"a\":100}') |\n+------------------------------------------------------+\n| [{\"1\": 2}, true, false, {\"a\": 100}]                  |\n+------------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_MERGE('{\"1\": 2}',  '{\"a\":100}');\n+--------------------------------------+\n| JSON_MERGE('{\"1\": 2}',  '{\"a\":100}') |\n+--------------------------------------+\n| {\"1\": 2, \"a\": 100}                   |\n+--------------------------------------+\n1 row in set\n"
        ]
    },
    "JSON_MERGE_PATCH": {
        "Title": [
            "JSON_MERGE_PATCH"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823299"
        ],
        "Category": [
            "JSON Functions"
        ],
        "Feature": "JSON_MERGE_PATCH(json_doc, json_doc[, json_doc] ...)\n",
        "Description": [
            "该函数依据 RFC 7396 标准对两个或多个 JSON 文档执行合并，并返回合并结果，结果不保留具有重复键的成员。如果某一个参数所传递的文档无效，则会引发错误。"
        ],
        "Illustration": [
            "参数 json_doc 指定需要合并的 JSON 文档。",
            "JSON_MERGE_PATCH() 执行合并的规则如下：",
            "如果第一个参数不是对象，则将其视为空对象与第二个参数合并作为合并结果。",
            "如果第二个参数不是对象，则合并结果是第二个参数。",
            "如果两个参数都是对象，则合并结果是具有以下成员的对象：",
            "\n第一个对象的所有成员在第二个对象中没有具有相同键的对应成员。\n第二个对象的所有成员在第一个对象中没有对应的键，并且其值不是 JSON 的 null 字面量。\n所有成员的键都存在于第一个和第二个对象中，并且在第二个对象中的值不是 JSON 的 null 字面量。 这些成员的值是递归合并第一个对象中的值与第二个对象中的值的结果。\n",
            "第一个对象的所有成员在第二个对象中没有具有相同键的对应成员。",
            "第二个对象的所有成员在第一个对象中没有对应的键，并且其值不是 JSON 的 null 字面量。",
            "所有成员的键都存在于第一个和第二个对象中，并且在第二个对象中的值不是 JSON 的 null 字面量。 这些成员的值是递归合并第一个对象中的值与第二个对象中的值的结果。"
        ],
        "Examples": [
            "obclient> SELECT JSON_MERGE_PATCH('[1, 2, 3]', '[true, false]');\n+------------------------------------------------+\n| JSON_MERGE_PATCH('[1, 2, 3]', '[true, false]') |\n+------------------------------------------------+\n| [true, false]                                  |\n+------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_MERGE_PATCH('{\"name\": \"x\"}', '{\"id\": 23}');\n+-------------------------------------------------+\n| JSON_MERGE_PATCH('{\"name\": \"x\"}', '{\"id\": 23}') |\n+-------------------------------------------------+\n| {\"id\": 23, \"name\": \"x\"}                         |\n+-------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_MERGE_PATCH('1', 'true');\n+-------------------------------+\n| JSON_MERGE_PATCH('1', 'true') |\n+-------------------------------+\n| true                          |\n+-------------------------------+\n1 row in set\n\nobclient> SELECT JSON_MERGE_PATCH('[1, 2, 3]', '{\"id\": 45}');\n+---------------------------------------------+\n| JSON_MERGE_PATCH('[1, 2, 3]', '{\"id\": 45}') |\n+---------------------------------------------+\n| {\"id\": 45}                                  |\n+---------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }','{ \"a\": 3, \"c\":4 }');\n+-----------------------------------------------------------+\n| JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }','{ \"a\": 3, \"c\":4 }') |\n+-----------------------------------------------------------+\n| {\"a\": 3, \"b\": 2, \"c\": 4}                                  |\n+-----------------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }',NULL);\n+--------------------------------------------+\n| JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }',NULL) |\n+--------------------------------------------+\n| NULL                                       |\n+--------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }','{ \"a\": 3, \"c\":4 }', '{ \"a\": 5, \"d\":6 }');\n+--------------------------------------------------------------------------------+\n| JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }','{ \"a\": 3, \"c\":4 }', '{ \"a\": 5, \"d\":6 }') |\n+--------------------------------------------------------------------------------+\n| {\"a\": 5, \"b\": 2, \"c\": 4, \"d\": 6}                                               |\n+--------------------------------------------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT JSON_MERGE_PATCH('[1, 2, 3]', '[true, false]');\n+------------------------------------------------+\n| JSON_MERGE_PATCH('[1, 2, 3]', '[true, false]') |\n+------------------------------------------------+\n| [true, false]                                  |\n+------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_MERGE_PATCH('{\"name\": \"x\"}', '{\"id\": 23}');\n+-------------------------------------------------+\n| JSON_MERGE_PATCH('{\"name\": \"x\"}', '{\"id\": 23}') |\n+-------------------------------------------------+\n| {\"id\": 23, \"name\": \"x\"}                         |\n+-------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_MERGE_PATCH('1', 'true');\n+-------------------------------+\n| JSON_MERGE_PATCH('1', 'true') |\n+-------------------------------+\n| true                          |\n+-------------------------------+\n1 row in set\n\nobclient> SELECT JSON_MERGE_PATCH('[1, 2, 3]', '{\"id\": 45}');\n+---------------------------------------------+\n| JSON_MERGE_PATCH('[1, 2, 3]', '{\"id\": 45}') |\n+---------------------------------------------+\n| {\"id\": 45}                                  |\n+---------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }','{ \"a\": 3, \"c\":4 }');\n+-----------------------------------------------------------+\n| JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }','{ \"a\": 3, \"c\":4 }') |\n+-----------------------------------------------------------+\n| {\"a\": 3, \"b\": 2, \"c\": 4}                                  |\n+-----------------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }',NULL);\n+--------------------------------------------+\n| JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }',NULL) |\n+--------------------------------------------+\n| NULL                                       |\n+--------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }','{ \"a\": 3, \"c\":4 }', '{ \"a\": 5, \"d\":6 }');\n+--------------------------------------------------------------------------------+\n| JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }','{ \"a\": 3, \"c\":4 }', '{ \"a\": 5, \"d\":6 }') |\n+--------------------------------------------------------------------------------+\n| {\"a\": 5, \"b\": 2, \"c\": 4, \"d\": 6}                                               |\n+--------------------------------------------------------------------------------+\n1 row in set\n"
        ]
    },
    "JSON_MERGE_PRESERVE": {
        "Title": [
            "JSON_MERGE_PRESERVE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823296"
        ],
        "Category": [
            "JSON Functions"
        ],
        "Feature": "JSON_MERGE_PRESERVE(json_doc, json_doc[, json_doc] ...)\n",
        "Description": [
            "合并两个或多个 JSON 文档并返回合并结果。"
        ],
        "Illustration": [
            "参数 json_doc 指定需要合并的 JSON 文档。",
            "如果任何参数为 NULL，则返回 NULL。如果任何参数不是有效的 JSON 文档，则会报错。",
            "JSON_MERGE_PRESERVE() 合并规则如下：",
            "相邻数组合并为一个数组。",
            "相邻的对象合并为一个对象。",
            "标量值自动包裹为数组并且合并为数组。",
            "通过将对象自动包裹为数组来合并相邻的数组和对象。"
        ],
        "Examples": [
            "obclient> SELECT JSON_MERGE_PRESERVE('[1, 2, 3]', '[true, false]');\n+---------------------------------------------------+\n| JSON_MERGE_PRESERVE('[1, 2, 3]', '[true, false]') |\n+---------------------------------------------------+\n| [1, 2, 3, true, false]                            |\n+---------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_MERGE_PRESERVE('{\"name\": \"apple\"}', '{\"id\": 56}');\n+--------------------------------------------------------+\n| JSON_MERGE_PRESERVE('{\"name\": \"apple\"}', '{\"id\": 56}') |\n+--------------------------------------------------------+\n| {\"id\": 56, \"name\": \"apple\"}                            |\n+--------------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_MERGE_PRESERVE('1', 'true');\n+----------------------------------+\n| JSON_MERGE_PRESERVE('1', 'true') |\n+----------------------------------+\n| [1, true]                        |\n+----------------------------------+\n1 row in set\n\nobclient> SELECT JSON_MERGE_PRESERVE('[1, 2, 3]', '{\"id\": 56}');\n+------------------------------------------------+\n| JSON_MERGE_PRESERVE('[1, 2, 3]', '{\"id\": 56}') |\n+------------------------------------------------+\n| [1, 2, 3, {\"id\": 56}]                          |\n+------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_MERGE_PRESERVE('{ \"a\": 1, \"b\": 2, \"c\": 5}',  '{ \"a\": 3, \"c\": 4 }');\n+-------------------------------------------------------------------------+\n| JSON_MERGE_PRESERVE('{ \"a\": 1, \"b\": 2, \"c\": 5}',  '{ \"a\": 3, \"c\": 4 }') |\n+-------------------------------------------------------------------------+\n| {\"a\": [1, 3], \"b\": 2, \"c\": [5, 4]}                                      |\n+-------------------------------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_MERGE_PRESERVE('{ \"a\": 1, \"b\": 2 }','{ \"a\": 3, \"c\": 4 }', '{ \"a\": 5, \"d\": 6 }');\n+--------------------------------------------------------------------------------------+\n| JSON_MERGE_PRESERVE('{ \"a\": 1, \"b\": 2 }','{ \"a\": 3, \"c\": 4 }', '{ \"a\": 5, \"d\": 6 }') |\n+--------------------------------------------------------------------------------------+\n| {\"a\": [1, 3, 5], \"b\": 2, \"c\": 4, \"d\": 6}                                             |\n+--------------------------------------------------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT JSON_MERGE_PRESERVE('[1, 2, 3]', '[true, false]');\n+---------------------------------------------------+\n| JSON_MERGE_PRESERVE('[1, 2, 3]', '[true, false]') |\n+---------------------------------------------------+\n| [1, 2, 3, true, false]                            |\n+---------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_MERGE_PRESERVE('{\"name\": \"apple\"}', '{\"id\": 56}');\n+--------------------------------------------------------+\n| JSON_MERGE_PRESERVE('{\"name\": \"apple\"}', '{\"id\": 56}') |\n+--------------------------------------------------------+\n| {\"id\": 56, \"name\": \"apple\"}                            |\n+--------------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_MERGE_PRESERVE('1', 'true');\n+----------------------------------+\n| JSON_MERGE_PRESERVE('1', 'true') |\n+----------------------------------+\n| [1, true]                        |\n+----------------------------------+\n1 row in set\n\nobclient> SELECT JSON_MERGE_PRESERVE('[1, 2, 3]', '{\"id\": 56}');\n+------------------------------------------------+\n| JSON_MERGE_PRESERVE('[1, 2, 3]', '{\"id\": 56}') |\n+------------------------------------------------+\n| [1, 2, 3, {\"id\": 56}]                          |\n+------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_MERGE_PRESERVE('{ \"a\": 1, \"b\": 2, \"c\": 5}',  '{ \"a\": 3, \"c\": 4 }');\n+-------------------------------------------------------------------------+\n| JSON_MERGE_PRESERVE('{ \"a\": 1, \"b\": 2, \"c\": 5}',  '{ \"a\": 3, \"c\": 4 }') |\n+-------------------------------------------------------------------------+\n| {\"a\": [1, 3], \"b\": 2, \"c\": [5, 4]}                                      |\n+-------------------------------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_MERGE_PRESERVE('{ \"a\": 1, \"b\": 2 }','{ \"a\": 3, \"c\": 4 }', '{ \"a\": 5, \"d\": 6 }');\n+--------------------------------------------------------------------------------------+\n| JSON_MERGE_PRESERVE('{ \"a\": 1, \"b\": 2 }','{ \"a\": 3, \"c\": 4 }', '{ \"a\": 5, \"d\": 6 }') |\n+--------------------------------------------------------------------------------------+\n| {\"a\": [1, 3, 5], \"b\": 2, \"c\": 4, \"d\": 6}                                             |\n+--------------------------------------------------------------------------------------+\n1 row in set\n"
        ]
    },
    "JSON_OBJECT": {
        "Title": [
            "JSON_OBJECT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823316"
        ],
        "Category": [
            "JSON Functions"
        ],
        "Feature": "JSON_OBJECT([key, val[, key, val] ...])\n",
        "Description": [
            "该函数根据用户输入的 key-value 对返回相应的 JSON 对象。"
        ],
        "Illustration": [
            "key, val 表示一个键值对。如果参数数量为奇数，则会发生报错。"
        ],
        "Examples": [
            "obclient> SELECT JSON_OBJECT('id', 69, 'name', 'apple');\n+----------------------------------------+\n| JSON_OBJECT('id', 69, 'name', 'apple') |\n+----------------------------------------+\n| {\"id\": 69, \"name\": \"apple\"}            |\n+----------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_OBJECT('id', 69, 'name', 'apple', 100);\nERROR 1582 (42000): Incorrect parameter count in the call to native function 'JSON_OBJECT'\n\nobclient> SELECT JSON_OBJECT('id', 69, 'name', 'apple', 100, 'good');\n+-----------------------------------------------------+\n| JSON_OBJECT('id', 69, 'name', 'apple', 100, 'good') |\n+-----------------------------------------------------+\n| {\"id\": 69, \"100\": \"good\", \"name\": \"apple\"}          |\n+-----------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_OBJECT();\n+---------------+\n| JSON_OBJECT() |\n+---------------+\n| {}            |\n+---------------+\n1 row in set\n\nobclient> SELECT JSON_OBJECT('id', 69, 'name', 'apple', '[100,200]','{names:tim}');\n+-------------------------------------------------------------------+\n| JSON_OBJECT('id', 69, 'name', 'apple', '[100,200]','{names:tim}') |\n+-------------------------------------------------------------------+\n| {\"id\": 69, \"name\": \"apple\", \"[100,200]\": \"{names:tim}\"}           |\n+-------------------------------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT JSON_OBJECT('id', 69, 'name', 'apple');\n+----------------------------------------+\n| JSON_OBJECT('id', 69, 'name', 'apple') |\n+----------------------------------------+\n| {\"id\": 69, \"name\": \"apple\"}            |\n+----------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_OBJECT('id', 69, 'name', 'apple', 100);\nERROR 1582 (42000): Incorrect parameter count in the call to native function 'JSON_OBJECT'\n\nobclient> SELECT JSON_OBJECT('id', 69, 'name', 'apple', 100, 'good');\n+-----------------------------------------------------+\n| JSON_OBJECT('id', 69, 'name', 'apple', 100, 'good') |\n+-----------------------------------------------------+\n| {\"id\": 69, \"100\": \"good\", \"name\": \"apple\"}          |\n+-----------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_OBJECT();\n+---------------+\n| JSON_OBJECT() |\n+---------------+\n| {}            |\n+---------------+\n1 row in set\n\nobclient> SELECT JSON_OBJECT('id', 69, 'name', 'apple', '[100,200]','{names:tim}');\n+-------------------------------------------------------------------+\n| JSON_OBJECT('id', 69, 'name', 'apple', '[100,200]','{names:tim}') |\n+-------------------------------------------------------------------+\n| {\"id\": 69, \"name\": \"apple\", \"[100,200]\": \"{names:tim}\"}           |\n+-------------------------------------------------------------------+\n1 row in set\n"
        ]
    },
    "JSON_OBJECTAGG": {
        "Title": [
            "JSON_OBJECTAGG"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823302"
        ],
        "Category": [
            "JSON Functions"
        ],
        "Feature": "JSON_OBJECTAGG(key, value) [over_clause]\n",
        "Description": [
            "该函数将两个列名或表达式作为参数，第一个用作键，第二个用作值，并返回包含键值对的 JSON 对象。"
        ],
        "Illustration": [
            "key, value 表示键值对。如果结果不包含行，或者出现错误，则返回 NULL。如果任何键名称为 NULL 或参数数量不等于 2，则会发生错误。",
            "根据 JSON 文本的要求，对象中不能存在重复的键值，所以重复的键值会被删除。由于聚合操作机制 是逐行处理结果集，所以最后一个重复键的值会被保留，而 SELECT 语句 返回的数据行可能是无序的，所以最后哪个 value 被保留，取决于返回数据的顺序。",
            "\n注意\n该函数暂不支持窗口函数，即 OVER 子句。\n"
        ],
        "Examples": [
            "obclient> SELECT oid, JSON_OBJECTAGG(attr, value) AS attributes FROM tbl1 GROUP BY oid;\n+------+---------------------------------------+\n| oid  | attributes                            |\n+------+---------------------------------------+\n|    2 | {\"color\": \"red\", \"fabric\": \"silk\"}    |\n|    3 | {\"color\": \"green\", \"shape\": \"square\"} |\n+------+---------------------------------------+\n2 rows in set\n\nobclient> CREATE TABLE tbl2(c VARCHAR(10), i INT);\nQuery OK, 0 rows affected\n\nobclient>  INSERT INTO tbl2 VALUES ('key', 3), ('key', 4), ('key', 5);\nQuery OK, 3 rows affected\nRecords: 3  Duplicates: 0  Warnings: 0\n\nobclient> SELECT c, i FROM tbl2;\n+------+------+\n| c    | i    |\n+------+------+\n| key  |    3 |\n| key  |    4 |\n| key  |    5 |\n+------+------+\n3 rows in set\n\nobclient> SELECT JSON_OBJECTAGG(c, i) FROM tbl2;\n+----------------------+\n| JSON_OBJECTAGG(c, i) |\n+----------------------+\n| {\"key\": 5}           |\n+----------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT oid, JSON_OBJECTAGG(attr, value) AS attributes FROM tbl1 GROUP BY oid;\n+------+---------------------------------------+\n| oid  | attributes                            |\n+------+---------------------------------------+\n|    2 | {\"color\": \"red\", \"fabric\": \"silk\"}    |\n|    3 | {\"color\": \"green\", \"shape\": \"square\"} |\n+------+---------------------------------------+\n2 rows in set\n\nobclient> CREATE TABLE tbl2(c VARCHAR(10), i INT);\nQuery OK, 0 rows affected\n\nobclient>  INSERT INTO tbl2 VALUES ('key', 3), ('key', 4), ('key', 5);\nQuery OK, 3 rows affected\nRecords: 3  Duplicates: 0  Warnings: 0\n\nobclient> SELECT c, i FROM tbl2;\n+------+------+\n| c    | i    |\n+------+------+\n| key  |    3 |\n| key  |    4 |\n| key  |    5 |\n+------+------+\n3 rows in set\n\nobclient> SELECT JSON_OBJECTAGG(c, i) FROM tbl2;\n+----------------------+\n| JSON_OBJECTAGG(c, i) |\n+----------------------+\n| {\"key\": 5}           |\n+----------------------+\n1 row in set\n"
        ]
    },
    "JSON_OVERLAPS": {
        "Title": [
            "JSON_OVERLAPS"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823311"
        ],
        "Category": [
            "JSON Functions"
        ],
        "Feature": "JSON_OVERLAPS(json_doc1, json_doc2)\n",
        "Description": [
            "该函数用于比较两个 JSON 文档。如果两个文档具有共同的键值对（key-value）或数组元素，则返回 1，否则返回 0。"
        ],
        "Illustration": [
            "参数 json_doc1 和 json_doc2 分别指定两个用于比较的 JSON 文档。如果两个参数都是标量，则函数执行简单的相等性测试。",
            "该函数与 JSON_CONTAINS() 对应，它要求搜索的数组的所有元素都存在于被搜索的数组中。因此，JSON_CONTAINS() 对搜索键执行 AND 运算，而 JSON_OVERLAPS() 执行 OR 运算。",
            "在比较两个数组时，如果它们共享一个或多个数组元素，则 JSON_OVERLAPS() 返回 1，否则返回 0。",
            "在 WHERE 子句中使用 JSON_OVERLAPS() 对 InnoDB 表的 JSON 列的查询，可以使用多值索引进行优化。"
        ],
        "Examples": [
            "obclient> SELECT JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,3,5]\");\n+---------------------------------------+\n| JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,3,5]\") |\n+---------------------------------------+\n|                                     1 |\n+---------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,4,6]\");\n+---------------------------------------+\n| JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,4,6]\") |\n+---------------------------------------+\n|                                     0 |\n+---------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_OVERLAPS('[[1,2],[3,4],5]', '[1,[2,3],[4,5]]');\n+-----------------------------------------------------+\n| JSON_OVERLAPS('[[1,2],[3,4],5]', '[1,[2,3],[4,5]]') |\n+-----------------------------------------------------+\n|                                                   0 |\n+-----------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_OVERLAPS('2', '2');\n+-------------------------+\n| JSON_OVERLAPS('2', '2') |\n+-------------------------+\n|                       1 |\n+-------------------------+\n1 row in set\n\nobclient> SELECT JSON_OVERLAPS('[4,5,6,7]', '5');\n+---------------------------------+\n| JSON_OVERLAPS('[4,5,6,7]', '5') |\n+---------------------------------+\n|                               1 |\n+---------------------------------+\n1 row in set\n\n/* 该函数不执行数据类型转换*/\nobclient> SELECT JSON_OVERLAPS('[4,\"5\",6,7]', '5');\n+-----------------------------------+\n| JSON_OVERLAPS('[4,\"5\",6,7]', '5') |\n+-----------------------------------+\n|                                 0 |\n+-----------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,3,5]\");\n+---------------------------------------+\n| JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,3,5]\") |\n+---------------------------------------+\n|                                     1 |\n+---------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,4,6]\");\n+---------------------------------------+\n| JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,4,6]\") |\n+---------------------------------------+\n|                                     0 |\n+---------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_OVERLAPS('[[1,2],[3,4],5]', '[1,[2,3],[4,5]]');\n+-----------------------------------------------------+\n| JSON_OVERLAPS('[[1,2],[3,4],5]', '[1,[2,3],[4,5]]') |\n+-----------------------------------------------------+\n|                                                   0 |\n+-----------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_OVERLAPS('2', '2');\n+-------------------------+\n| JSON_OVERLAPS('2', '2') |\n+-------------------------+\n|                       1 |\n+-------------------------+\n1 row in set\n\nobclient> SELECT JSON_OVERLAPS('[4,5,6,7]', '5');\n+---------------------------------+\n| JSON_OVERLAPS('[4,5,6,7]', '5') |\n+---------------------------------+\n|                               1 |\n+---------------------------------+\n1 row in set\n\n/* 该函数不执行数据类型转换*/\nobclient> SELECT JSON_OVERLAPS('[4,\"5\",6,7]', '5');\n+-----------------------------------+\n| JSON_OVERLAPS('[4,\"5\",6,7]', '5') |\n+-----------------------------------+\n|                                 0 |\n+-----------------------------------+\n1 row in set\n"
        ]
    },
    "JSON_PRETTY": {
        "Title": [
            "JSON_PRETTY"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823305"
        ],
        "Category": [
            "JSON Functions"
        ],
        "Feature": "JSON_PRETTY(json_val)\n",
        "Description": [
            "该函数对 JSON 值按照格式打印。类似于 PHP 等。"
        ],
        "Illustration": [
            "参数 json_val 必须是 JSON 值或 JSON 值的有效字符串表示形式。此值中存在的无关空格和换行符对输出没有影响。如果该值不是 JSON 文档，或者无法进行解析，则该函数将执行失败并显示错误。",
            "对于 NULL 值，该函数返回 NULL。",
            "此函数的输出格式遵循以下规则：",
            "每个数组元素或对象成员出现在单独的行上，与其父元素相比缩进一个级别。",
            "每一级缩进都会添加两个前导空格。",
            "分隔单个数组元素或对象成员的逗号，打印在分隔两个元素或成员的换行符之前。",
            "对象成员的键和值由冒号后加空格 (': ') 分隔。",
            "空对象或数组打印在一行上。左括号和右括号之间不打印空格。",
            "字符串标量和键名中的特殊字符使用与 JSON_QUOTE() 函数相同的转义规则。"
        ],
        "Examples": [
            "obclient> SELECT JSON_PRETTY('1234');\n+--------------------+\n| JSON_PRETTY('1234') |\n+--------------------+\n| 1234                |\n+--------------------+\n1 row in set\n\nobclient> SELECT JSON_PRETTY(\"[1,3,5,7]\");\n+--------------------------+\n| JSON_PRETTY(\"[1,3,5,7]\") |\n+--------------------------+\n| [\n  1,\n  3,\n  5,\n  7\n]   |\n+--------------------------+\n1 row in set\n\nobclient> SELECT JSON_PRETTY('{\"a\":\"10\",\"b\":\"20\",\"c\":\"30\"}');\n+---------------------------------------------+\n| JSON_PRETTY('{\"a\":\"10\",\"b\":\"20\",\"c\":\"30\"}') |\n+---------------------------------------------+\n| {\n  \"a\": \"10\",\n  \"b\": \"20\",\n  \"c\": \"30\"\n}   |\n+---------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT JSON_PRETTY('1234');\n+--------------------+\n| JSON_PRETTY('1234') |\n+--------------------+\n| 1234                |\n+--------------------+\n1 row in set\n\nobclient> SELECT JSON_PRETTY(\"[1,3,5,7]\");\n+--------------------------+\n| JSON_PRETTY(\"[1,3,5,7]\") |\n+--------------------------+\n| [\n  1,\n  3,\n  5,\n  7\n]   |\n+--------------------------+\n1 row in set\n\nobclient> SELECT JSON_PRETTY('{\"a\":\"10\",\"b\":\"20\",\"c\":\"30\"}');\n+---------------------------------------------+\n| JSON_PRETTY('{\"a\":\"10\",\"b\":\"20\",\"c\":\"30\"}') |\n+---------------------------------------------+\n| {\n  \"a\": \"10\",\n  \"b\": \"20\",\n  \"c\": \"30\"\n}   |\n+---------------------------------------------+\n1 row in set\n"
        ]
    },
    "JSON_QUOTE": {
        "Title": [
            "JSON_QUOTE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823314"
        ],
        "Category": [
            "JSON Functions"
        ],
        "Feature": "JSON_QUOTE(string)\n",
        "Description": [
            "通过用双引号字符包裹字符串并转义内部引号和其他字符，将字符串引用为 JSON 值，然后将结果作为 utf8mb4 字符串返回。",
            "此函数通常用于生成有效的 JSON 字符串文字以包含在 JSON 文档中，便于进行处理。"
        ],
        "Illustration": [
            "string 表示要引用的字符串。如果参数为 NULL，则返回 NULL。"
        ],
        "Examples": [
            "obclient> SELECT JSON_QUOTE('null'), JSON_QUOTE('\"null\"');\n+--------------------+----------------------+\n| JSON_QUOTE('null') | JSON_QUOTE('\"null\"') |\n+--------------------+----------------------+\n| \"null\"             | \"\\\"null\\\"\"           |\n+--------------------+----------------------+\n1 row in set\n\nobclient> SELECT JSON_QUOTE('[1, 2, 3, 4, 5]');\n+-------------------------------+\n| JSON_QUOTE('[1, 2, 3, 4, 5]') |\n+-------------------------------+\n| \"[1, 2, 3, 4, 5]\"             |\n+-------------------------------+\n1 row in set\n\nobclient> SELECT JSON_QUOTE('{\"name\":sam, \"scores\":[100,200,300]}');\n+----------------------------------------------------+\n| JSON_QUOTE('{\"name\":sam, \"scores\":[100,200,300]}') |\n+----------------------------------------------------+\n| \"{\\\"name\\\":sam, \\\"scores\\\":[100,200,300]}\"         |\n+----------------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT JSON_QUOTE('null'), JSON_QUOTE('\"null\"');\n+--------------------+----------------------+\n| JSON_QUOTE('null') | JSON_QUOTE('\"null\"') |\n+--------------------+----------------------+\n| \"null\"             | \"\\\"null\\\"\"           |\n+--------------------+----------------------+\n1 row in set\n\nobclient> SELECT JSON_QUOTE('[1, 2, 3, 4, 5]');\n+-------------------------------+\n| JSON_QUOTE('[1, 2, 3, 4, 5]') |\n+-------------------------------+\n| \"[1, 2, 3, 4, 5]\"             |\n+-------------------------------+\n1 row in set\n\nobclient> SELECT JSON_QUOTE('{\"name\":sam, \"scores\":[100,200,300]}');\n+----------------------------------------------------+\n| JSON_QUOTE('{\"name\":sam, \"scores\":[100,200,300]}') |\n+----------------------------------------------------+\n| \"{\\\"name\\\":sam, \\\"scores\\\":[100,200,300]}\"         |\n+----------------------------------------------------+\n1 row in set\n"
        ]
    },
    "JSON_REMOVE": {
        "Title": [
            "JSON_REMOVE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823292"
        ],
        "Category": [
            "JSON Functions"
        ],
        "Feature": "JSON_REMOVE(json_doc, path[, path] ...)\n",
        "Description": [
            "该函数用于从 JSON 文档中删除数据并返回结果。"
        ],
        "Illustration": [
            "json_doc 参数用于指定 JSON 文档，path 为路径参数。如果任何参数为 NULL，则返回 NULL。",
            "以下情况都会发生报错：",
            "json_doc 参数不是有效的 JSON 文档。",
            "path 参数不是有效的路径表达式。",
            "path 参数是 $。",
            "path 参数包含 * 或 ** 通配符。",
            "path 参数按照从左到右进行计算，即通过评估一条路径产生的文档作为评估下一条路径的新值。",
            "如果要移除的元素在文档中不存在，则不会产生错误。在这种情况下，路径不会影响文档。"
        ],
        "Examples": [
            "obclient> SET @jn = '[\"a\", [\"b\", \"c\"], \"d\"]';\nQuery OK, 0 rows affected\n\nobclient> SELECT JSON_REMOVE(@jn, '$[1]');\n+--------------------------+\n| JSON_REMOVE(@jn, '$[1]') |\n+--------------------------+\n| [\"a\", \"d\"]               |\n+--------------------------+\n1 row in set\n\nobclient> SELECT JSON_REMOVE(@jn, '$[7]');\n+--------------------------+\n| JSON_REMOVE(@jn, '$[7]') |\n+--------------------------+\n| [\"a\", [\"b\", \"c\"], \"d\"]   |\n+--------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SET @jn = '[\"a\", [\"b\", \"c\"], \"d\"]';\nQuery OK, 0 rows affected\n\nobclient> SELECT JSON_REMOVE(@jn, '$[1]');\n+--------------------------+\n| JSON_REMOVE(@jn, '$[1]') |\n+--------------------------+\n| [\"a\", \"d\"]               |\n+--------------------------+\n1 row in set\n\nobclient> SELECT JSON_REMOVE(@jn, '$[7]');\n+--------------------------+\n| JSON_REMOVE(@jn, '$[7]') |\n+--------------------------+\n| [\"a\", [\"b\", \"c\"], \"d\"]   |\n+--------------------------+\n1 row in set\n"
        ]
    },
    "JSON_REPLACE": {
        "Title": [
            "JSON_REPLACE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823298"
        ],
        "Category": [
            "JSON Functions"
        ],
        "Feature": "JSON_REPLACE(json_doc, path, val[, path, val] ...)\n",
        "Description": [
            "该函数用于替换 JSON 文档中的现有值并返回结果。"
        ],
        "Illustration": [
            "json_doc 参数用于指定 JSON 文档，path 为路径参数。如果任何参数为 NULL，则返回 NULL。",
            "以下情况都会发生报错：",
            "json_doc 参数不是有效的 JSON 文档。",
            "path 参数不是有效的路径表达式。",
            "path 参数包含 * 或 ** 通配符。",
            "路径值对 path-value 按照从左到右的顺序进行评估。通过 path-value 对所生成的文档作为评估下一对的新值。",
            "文档中现有路径的 path-value 对会用新值覆盖现有文档值。文档中不存在路径的 path-value 将被忽略且无效。"
        ],
        "Examples": [
            "obclient> SET @jn = '{ \"a\": 1, \"b\": [2, 3, 4]}';\nQuery OK, 0 rows affected\n\nobclient> SELECT JSON_REPLACE(@jn, '$.a', 10, '$.c', '[true, false]');\n+------------------------------------------------------+\n| JSON_REPLACE(@jn, '$.a', 10, '$.c', '[true, false]') |\n+------------------------------------------------------+\n| {\"a\": 10, \"b\": [2, 3, 4]}                            |\n+------------------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SET @jn = '{ \"a\": 1, \"b\": [2, 3, 4]}';\nQuery OK, 0 rows affected\n\nobclient> SELECT JSON_REPLACE(@jn, '$.a', 10, '$.c', '[true, false]');\n+------------------------------------------------------+\n| JSON_REPLACE(@jn, '$.a', 10, '$.c', '[true, false]') |\n+------------------------------------------------------+\n| {\"a\": 10, \"b\": [2, 3, 4]}                            |\n+------------------------------------------------------+\n1 row in set\n"
        ]
    },
    "JSON_SCHEMA_VALID": {
        "Title": [
            "JSON_SCHEMA_VALID"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823301"
        ],
        "Category": [
            "JSON Functions"
        ],
        "Feature": "JSON_SCHEMA_VALID(schema, document)\n",
        "Description": [
            "该函数用于验证 JSON 文档。如果 JSON 文档符合 JSON Schema 规范，则返回 1。如果不符合 JSON Schema 规范，则返回 0。可用于列约束。"
        ],
        "Illustration": [
            "参数 schema 用于指定 JSON Schema，且 Schema 必须是有效的 JSON 对象。",
            "\nJSON Schema 中支持使用 required 属性来强制必须包含的属性。\nJSON Schema 中支持 id、 $schema、description 和 type 属性，但不要求必须提供这些属性。\n",
            "JSON Schema 中支持使用 required 属性来强制必须包含的属性。",
            "JSON Schema 中支持 id、 $schema、description 和 type 属性，但不要求必须提供这些属性。",
            "参数 document 用于指定待验证的 JSON 文档，该 JSON 文档必须是有效的 JSON 文档。",
            "如果其中有一个参数不是有效的 JSON，该函数就会引发错误。"
        ],
        "Examples": [
            "obclient [infotest]> SELECT JSON_SCHEMA_VALID('{\"type\": \"string\"}', '\"JSON_doc\"');\n",
            "+-------------------------------------------------------+\n| JSON_SCHEMA_VALID('{\"type\": \"string\"}', '\"JSON_doc\"') |\n+-------------------------------------------------------+\n|                                                     1 |\n+-------------------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "以下示例中，通过 '{\"type\": \"string\"}' 定义了一个 JSON Schema，且该 Schema 指明了有效的 JSON 数据应该是一个字符串类型。'\"JSON_doc\"' 是待验证的 JSON 文档。",
            "\n注意\n该语句中，字符串 JSON_doc 被双引号（\"）包裹，表示它是一个有效的 JSON 字符串，而不仅仅是普通的字符串。在 JSON 中，字符串值必须被双引号包裹。\n",
            "obclient [infotest]> SELECT JSON_SCHEMA_VALID('{\"type\": \"string\"}', '\"JSON_doc\"');\n",
            "返回结果如下：",
            "+-------------------------------------------------------+\n| JSON_SCHEMA_VALID('{\"type\": \"string\"}', '\"JSON_doc\"') |\n+-------------------------------------------------------+\n|                                                     1 |\n+-------------------------------------------------------+\n1 row in set\n",
            "本示例中，由于 JSON 文档是一个有效的 JSON 字符串，符合 Schema 所规定的字符串类型，故函数返回 1，表示验证通过。"
        ]
    },
    "JSON_SCHEMA_VALIDATION_REPORT": {
        "Title": [
            "JSON_SCHEMA_VALIDATION_REPORT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823300"
        ],
        "Category": [
            "JSON Functions"
        ],
        "Feature": "JSON_SCHEMA_VALIDATION_REPORT(schema, document)\n",
        "Description": [
            "该函数用于返回一个详细的验证报告。"
        ],
        "Illustration": [
            "参数 schema 用于指定 JSON Schema，且 Schema 必须是有效的 JSON 对象。",
            "\nJSON Schema 中支持使用 required 属性来强制必须包含的属性。\nJSON Schema 中支持 id、 $schema、description 和 type 属性，但不要求必须提供这些属性。\n",
            "JSON Schema 中支持使用 required 属性来强制必须包含的属性。",
            "JSON Schema 中支持 id、 $schema、description 和 type 属性，但不要求必须提供这些属性。",
            "参数 document 用于指定待验证的 JSON 文档，该 JSON 文档必须是有效的 JSON 文档。",
            "如果其中有一个参数不是有效的 JSON，该函数就会引发错误。",
            "不同于 JSON_SCHEMA_VALID() 函数，JSON_SCHEMA_VALIDATION_REPORT() 函数用于返回一个详细的验证报告，且该报告是一个 JSON 对象。如果 JSON 文档符合 JSON Schema 规范，则该函数将返回一个 valid 属性值为 true 的 JSON 对象；如果 JSON 文档不符合 JSON Schema 规范，则该函数将返回一个非空的 JSON 对象，其中包含了验证失败的详细信息。",
            "验证失败的信息中主要包含以下属性信息：",
            "valid：验证失败时，该值始终为 false。",
            "reason：显示验证失败的原因。",
            "schema-location：指示 JSON Schema 中验证失败的位置。",
            "document-location：指示 JSON 文档中验证失败的位置。",
            "schema-failed-keyword：显示 JSON Schema 中违反规范的关键字或属性名称。"
        ],
        "Examples": [
            "obclient [infotest]> SELECT JSON_SCHEMA_VALIDATION_REPORT('{\"type\": \"string\"}', '\"JSON_doc\"');\n",
            "+-------------------------------------------------------------------+\n| JSON_SCHEMA_VALIDATION_REPORT('{\"type\": \"string\"}', '\"JSON_doc\"') |\n+-------------------------------------------------------------------+\n| {\"valid\": true}                                                   |\n+-------------------------------------------------------------------+\n1 row in set\n",
            "obclient [infotest]> SET @schema = '{\"type\": \"object\", \"properties\": {\"age\": {\"type\": \"integer\", \"minimum\": 18}}, \"required\": [\"age\"]}';\n",
            "obclient [infotest]> SET @document = '{\"age\": 17}';\n",
            "obclient [infotest]> SELECT JSON_SCHEMA_VALIDATION_REPORT(@schema, @document);\n",
            "+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| JSON_SCHEMA_VALIDATION_REPORT(@schema, @document)                                                                                                                                                                                                |\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| {\"valid\": false, \"reason\": \"The JSON document location '#/age' failed requirement 'minimum' at JSON Schema location '#/properties/age\", \"schema-location\": \"#/properties/age\", \"document-location\": \"#/age\", \"schema-failed-keyword\": \"minimum\"} |\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "如下示例中，通过 '{\"type\": \"string\"}' 定义了一个 JSON Schema，且该 Schema 指明了有效的 JSON 数据应该是一个字符串类型。'\"JSON_doc\"' 是一个有效的 JSON 字符串，符合 Schema 所规定的字符串类型。",
            "obclient [infotest]> SELECT JSON_SCHEMA_VALIDATION_REPORT('{\"type\": \"string\"}', '\"JSON_doc\"');\n",
            "返回结果如下：",
            "+-------------------------------------------------------------------+\n| JSON_SCHEMA_VALIDATION_REPORT('{\"type\": \"string\"}', '\"JSON_doc\"') |\n+-------------------------------------------------------------------+\n| {\"valid\": true}                                                   |\n+-------------------------------------------------------------------+\n1 row in set\n",
            "如下示例中，定义了一个 JSON Schema，要求其 age 属性必须是一个大于等于 18 的整数。",
            "obclient [infotest]> SET @schema = '{\"type\": \"object\", \"properties\": {\"age\": {\"type\": \"integer\", \"minimum\": 18}}, \"required\": [\"age\"]}';\n",
            "定义一个 JSON 文档，其 age 值为 17，不符合 JSON Schema 规范。",
            "obclient [infotest]> SET @document = '{\"age\": 17}';\n",
            "使用 JSON_SCHEMA_VALIDATION_REPORT() 函数获取验证报告。",
            "obclient [infotest]> SELECT JSON_SCHEMA_VALIDATION_REPORT(@schema, @document);\n",
            "返回结果如下：",
            "+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| JSON_SCHEMA_VALIDATION_REPORT(@schema, @document)                                                                                                                                                                                                |\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| {\"valid\": false, \"reason\": \"The JSON document location '#/age' failed requirement 'minimum' at JSON Schema location '#/properties/age\", \"schema-location\": \"#/properties/age\", \"document-location\": \"#/age\", \"schema-failed-keyword\": \"minimum\"} |\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n1 row in set\n"
        ]
    },
    "JSON_SEARCH": {
        "Title": [
            "JSON_SEARCH"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823306"
        ],
        "Category": [
            "JSON Functions"
        ],
        "Feature": "JSON_SEARCH(json_doc, one_or_all, search_str[, escape_char[, path] ...])\n",
        "Description": [
            "该函数返回 JSON 文档中指定字符串的路径。"
        ],
        "Illustration": [
            "参数 json_doc 用于指定 JSON 文档，search_str 为搜索字符串参数，escape_char 参数指定常量表达式，path 为路径参数。",
            "如果任何参数为 NULL，则返回 NULL；如果文档中不存在路径或未找到指定字符串，也会返回 NULL。",
            "对于 one_or_all 参数，可选值如下：",
            "'one'：在第一次匹配后搜索终止并返回一个路径字符串。",
            "'all'：搜索返回所有匹配的路径字符串，不会包含重复的路径。如果有多个字符串，它们会自动包裹为一个数组。数组元素的顺序不保证是有序的。",
            "对于 search_str 参数，% 和 _ 字符与 LIKE 运算符的作用相同，含义如下：",
            "% 表示匹配任意数量的字符（包括零个字符）。",
            "_ 表示正好匹配一个字符。",
            "如果要在搜索字符串中指定 % 或 _字符，请在其前面加上转义字符。如果缺少 escape_char 参数或者为NULL，则转义字符默认值为 \\。否则，escape_char 必须是一个空的常量或字符。",
            "无论数据库的编码值为多少，search_str 和 path 总是作为 utf8mb4 字符串使用。",
            "以下情况会发生报错：",
            "json_doc 参数指定的不是有效的 JSON 文档。",
            "path 参数不是有效的路径表达式。",
            "one_or_all 参数不为 'one' 或者 'all'。",
            "escape_char 不是常量表达式。"
        ],
        "Examples": [
            "obclient> SET @jn = '[\"abcd\", [{\"k\": \"10\"}, \"efg\"], {\"x\":\"abcd\"}, {\"y\":\"cdef\"}]';\nQuery OK, 0 rows affected\n\nobclient> SELECT JSON_SEARCH(@jn, 'one', 'abcd');\n+---------------------------------+\n| JSON_SEARCH(@jn, 'one', 'abcd') |\n+---------------------------------+\n| \"$[0]\"                          |\n+---------------------------------+\n1 row in set\n\nobclient> SELECT JSON_SEARCH(@jn, 'all', 'abcd');\n+---------------------------------+\n| JSON_SEARCH(@jn, 'all', 'abcd') |\n+---------------------------------+\n| [\"$[0]\", \"$[2].x\"]              |\n+---------------------------------+\n1 row in set\n\nobclient> SELECT JSON_SEARCH(@jn, 'all', 'ghk');\n+--------------------------------+\n| JSON_SEARCH(@jn, 'all', 'ghk') |\n+--------------------------------+\n| NULL                           |\n+--------------------------------+\n1 row in set\n\nobclient> SELECT JSON_SEARCH(@jn, 'all', '10');\n+-------------------------------+\n| JSON_SEARCH(@jn, 'all', '10') |\n+-------------------------------+\n| \"$[1][0].k\"                   |\n+-------------------------------+\n1 row in set\n\nobclient> SELECT JSON_SEARCH(@jn, 'all', '10', NULL, '$');\n+------------------------------------------+\n| JSON_SEARCH(@jn, 'all', '10', NULL, '$') |\n+------------------------------------------+\n| \"$[1][0].k\"                              |\n+------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_SEARCH(@jn, 'all', '10', NULL, '$[*]');\n+---------------------------------------------+\n| JSON_SEARCH(@jn, 'all', '10', NULL, '$[*]') |\n+---------------------------------------------+\n| \"$[1][0].k\"                                 |\n+---------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_SEARCH(@jn, 'all', '10', NULL, '$[*][0].k');\n+--------------------------------------------------+\n| JSON_SEARCH(@jn, 'all', '10', NULL, '$[*][0].k') |\n+--------------------------------------------------+\n| \"$[1][0].k\"                                      |\n+--------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_SEARCH(@jn, 'all', '10', NULL, '$[1]');\n+---------------------------------------------+\n| JSON_SEARCH(@jn, 'all', '10', NULL, '$[1]') |\n+---------------------------------------------+\n| \"$[1][0].k\"                                 |\n+---------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_SEARCH(@jn, 'all', '10', NULL, '$[1][0]');\n+------------------------------------------------+\n| JSON_SEARCH(@jn, 'all', '10', NULL, '$[1][0]') |\n+------------------------------------------------+\n| \"$[1][0].k\"                                    |\n+------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_SEARCH(@jn, 'all', 'abc', NULL, '$[2]');\n+----------------------------------------------+\n| JSON_SEARCH(@jn, 'all', 'abc', NULL, '$[2]') |\n+----------------------------------------------+\n| NULL                                         |\n+----------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_SEARCH(@jn, 'all', '%a%');\n+--------------------------------+\n| JSON_SEARCH(@jn, 'all', '%a%') |\n+--------------------------------+\n| [\"$[0]\", \"$[2].x\"]             |\n+--------------------------------+\n1 row in set\n\nobclient> SELECT JSON_SEARCH(@jn, 'all', '%b%');\n+-------------------------------+\n| JSON_SEARCH(@jn, 'all', '%b%') |\n+-------------------------------+\n| [\"$[0]\", \"$[2].x\", \"$[3].y\"]  |\n+-------------------------------+\n1 row in set\n\nobclient> SELECT JSON_SEARCH(@jn, 'all', '%b%', NULL, '$[0]');\n+---------------------------------------------+\n| JSON_SEARCH(@jn, 'all', '%b%', NULL, '$[0]') |\n+---------------------------------------------+\n| \"$[0]\"                                      |\n+---------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_SEARCH(@jn, 'all', '%b%', NULL, '$[2]');\n+---------------------------------------------+\n| JSON_SEARCH(@jn, 'all', '%b%', NULL, '$[2]') |\n+---------------------------------------------+\n| \"$[2].x\"                                    |\n+---------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_SEARCH(@jn, 'all', '%b%', NULL, '$[1]');\n+---------------------------------------------+\n| JSON_SEARCH(@jn, 'all', '%b%', NULL, '$[1]') |\n+---------------------------------------------+\n| NULL                                        |\n+---------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_SEARCH(@jn, 'all', '%b%', '', '$[1]');\n+-------------------------------------------+\n| JSON_SEARCH(@jn, 'all', '%b%', '', '$[1]') |\n+-------------------------------------------+\n| NULL                                      |\n+-------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SET @jn = '[\"abcd\", [{\"k\": \"10\"}, \"efg\"], {\"x\":\"abcd\"}, {\"y\":\"cdef\"}]';\nQuery OK, 0 rows affected\n\nobclient> SELECT JSON_SEARCH(@jn, 'one', 'abcd');\n+---------------------------------+\n| JSON_SEARCH(@jn, 'one', 'abcd') |\n+---------------------------------+\n| \"$[0]\"                          |\n+---------------------------------+\n1 row in set\n\nobclient> SELECT JSON_SEARCH(@jn, 'all', 'abcd');\n+---------------------------------+\n| JSON_SEARCH(@jn, 'all', 'abcd') |\n+---------------------------------+\n| [\"$[0]\", \"$[2].x\"]              |\n+---------------------------------+\n1 row in set\n\nobclient> SELECT JSON_SEARCH(@jn, 'all', 'ghk');\n+--------------------------------+\n| JSON_SEARCH(@jn, 'all', 'ghk') |\n+--------------------------------+\n| NULL                           |\n+--------------------------------+\n1 row in set\n\nobclient> SELECT JSON_SEARCH(@jn, 'all', '10');\n+-------------------------------+\n| JSON_SEARCH(@jn, 'all', '10') |\n+-------------------------------+\n| \"$[1][0].k\"                   |\n+-------------------------------+\n1 row in set\n\nobclient> SELECT JSON_SEARCH(@jn, 'all', '10', NULL, '$');\n+------------------------------------------+\n| JSON_SEARCH(@jn, 'all', '10', NULL, '$') |\n+------------------------------------------+\n| \"$[1][0].k\"                              |\n+------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_SEARCH(@jn, 'all', '10', NULL, '$[*]');\n+---------------------------------------------+\n| JSON_SEARCH(@jn, 'all', '10', NULL, '$[*]') |\n+---------------------------------------------+\n| \"$[1][0].k\"                                 |\n+---------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_SEARCH(@jn, 'all', '10', NULL, '$[*][0].k');\n+--------------------------------------------------+\n| JSON_SEARCH(@jn, 'all', '10', NULL, '$[*][0].k') |\n+--------------------------------------------------+\n| \"$[1][0].k\"                                      |\n+--------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_SEARCH(@jn, 'all', '10', NULL, '$[1]');\n+---------------------------------------------+\n| JSON_SEARCH(@jn, 'all', '10', NULL, '$[1]') |\n+---------------------------------------------+\n| \"$[1][0].k\"                                 |\n+---------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_SEARCH(@jn, 'all', '10', NULL, '$[1][0]');\n+------------------------------------------------+\n| JSON_SEARCH(@jn, 'all', '10', NULL, '$[1][0]') |\n+------------------------------------------------+\n| \"$[1][0].k\"                                    |\n+------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_SEARCH(@jn, 'all', 'abc', NULL, '$[2]');\n+----------------------------------------------+\n| JSON_SEARCH(@jn, 'all', 'abc', NULL, '$[2]') |\n+----------------------------------------------+\n| NULL                                         |\n+----------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_SEARCH(@jn, 'all', '%a%');\n+--------------------------------+\n| JSON_SEARCH(@jn, 'all', '%a%') |\n+--------------------------------+\n| [\"$[0]\", \"$[2].x\"]             |\n+--------------------------------+\n1 row in set\n\nobclient> SELECT JSON_SEARCH(@jn, 'all', '%b%');\n+-------------------------------+\n| JSON_SEARCH(@jn, 'all', '%b%') |\n+-------------------------------+\n| [\"$[0]\", \"$[2].x\", \"$[3].y\"]  |\n+-------------------------------+\n1 row in set\n\nobclient> SELECT JSON_SEARCH(@jn, 'all', '%b%', NULL, '$[0]');\n+---------------------------------------------+\n| JSON_SEARCH(@jn, 'all', '%b%', NULL, '$[0]') |\n+---------------------------------------------+\n| \"$[0]\"                                      |\n+---------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_SEARCH(@jn, 'all', '%b%', NULL, '$[2]');\n+---------------------------------------------+\n| JSON_SEARCH(@jn, 'all', '%b%', NULL, '$[2]') |\n+---------------------------------------------+\n| \"$[2].x\"                                    |\n+---------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_SEARCH(@jn, 'all', '%b%', NULL, '$[1]');\n+---------------------------------------------+\n| JSON_SEARCH(@jn, 'all', '%b%', NULL, '$[1]') |\n+---------------------------------------------+\n| NULL                                        |\n+---------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_SEARCH(@jn, 'all', '%b%', '', '$[1]');\n+-------------------------------------------+\n| JSON_SEARCH(@jn, 'all', '%b%', '', '$[1]') |\n+-------------------------------------------+\n| NULL                                      |\n+-------------------------------------------+\n1 row in set\n"
        ]
    },
    "JSON_SET": {
        "Title": [
            "JSON_SET"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823289"
        ],
        "Category": [
            "JSON Functions"
        ],
        "Feature": "JSON_SET(json_doc, path, val[, path, val] ...)\n",
        "Description": [
            "该函数用于在 JSON 文档中插入或更新数据并返回结果。"
        ],
        "Illustration": [
            "json_doc 参数用于指定 JSON 文档，path 为路径参数。如果任何参数为 NULL 或 path（如果给定）未定位到对象，则返回 NULL。",
            "以下情况都会发生报错：",
            "json_doc 参数不是有效的 JSON 文档。",
            "path 参数不是有效的路径表达式。",
            "path 参数包含 * 或 ** 通配符。",
            "路径值对 path-value 按照从左到右的顺序进行评估。通过 path-value 对所生成的文档作为评估下一对的新值。",
            "文档中现有路径的 path-value 对会用新值覆盖现有文档值。如果路径标识的对象不存在，则文档中不存在路径的路径值对会按照如下规则添加到文档中：",
            "现有对象中不存在的成员。该成员被添加到对象并与新值相关联。",
            "超出现有数组末尾的位置。此时使用新值扩展数组。如果现有值不是数组，则将其自动包裹为数组，然后使用新值进行扩展。",
            "否则，文档中不存在的路径的路径值对将被忽略且无效。"
        ],
        "Examples": [
            "obclient> SET @jn = '{ \"a\": 1, \"b\": [2, 3]}';\nQuery OK, 0 rows affected\n\nobclient> SELECT JSON_SET(@jn, '$.a', 10, '$.c', '[true, false]');\n+--------------------------------------------------+\n| JSON_SET(@jn, '$.a', 10, '$.c', '[true, false]') |\n+--------------------------------------------------+\n| {\"a\": 10, \"b\": [2, 3], \"c\": \"[true, false]\"}     |\n+--------------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SET @jn = '{ \"a\": 1, \"b\": [2, 3]}';\nQuery OK, 0 rows affected\n\nobclient> SELECT JSON_SET(@jn, '$.a', 10, '$.c', '[true, false]');\n+--------------------------------------------------+\n| JSON_SET(@jn, '$.a', 10, '$.c', '[true, false]') |\n+--------------------------------------------------+\n| {\"a\": 10, \"b\": [2, 3], \"c\": \"[true, false]\"}     |\n+--------------------------------------------------+\n1 row in set\n"
        ]
    },
    "JSON_STORAGE_SIZE": {
        "Title": [
            "JSON_STORAGE_SIZE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823304"
        ],
        "Category": [
            "JSON Functions"
        ],
        "Feature": "JSON_STORAGE_SIZE(json_val)\n",
        "Description": [
            "此函数返回用于存储 JSON 文档的二进制字节数。当参数是一个 JSON 列时，会用于存储 JSON 文档。JSON 的部分更新不会改变该函数的返回值。"
        ],
        "Illustration": [
            "json_val 参数必须是有效的 JSON 文档或可以解析为一个字符串。在 json_val 是字符串的情况下，该函数将字符串解析为 JSON 并将其转换为二进制后返回存储空间的二进制字节数。",
            "当 json_val 不为 NULL 并且不是或无法成功解析为 JSON 文档时，会报错。",
            "如果参数为 NULL，则返回 NULL。"
        ],
        "Examples": [
            "obclient> CREATE TABLE jtbl (jcol JSON);\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO jtbl VALUES  ('{\"a\": 1000, \"b\": \"wxyz\", \"c\": \"[1, 3, 5, 7]\"}');\nQuery OK, 1 row affected\n\nobclient> SELECT jcol,JSON_STORAGE_SIZE(jcol) AS Size FROM jtbl;\n+-----------------------------------------------+------+\n| jcol                                          | Size |\n+-----------------------------------------------+------+\n| {\"a\": 1000, \"b\": \"wxyz\", \"c\": \"[1, 3, 5, 7]\"} |   41 |\n+-----------------------------------------------+------+\n1 row in set\n\nobclient> SET @jn = '[100, \"sakila\", [1, 3, 5], 425.05]';\nQuery OK, 0 rows affected\n\nobclient> SELECT @jn, JSON_STORAGE_SIZE(@jn) AS Size;\n+------------------------------------+------+\n| @jn                                | Size |\n+------------------------------------+------+\n| [100, \"sakila\", [1, 3, 5], 425.05] |   38 |\n+------------------------------------+------+\n1 row in set\n\nobclient> SET @jn = JSON_SET(@jn, '$[1]', \"json\");\nQuery OK, 0 rows affected\n\nobclient> SELECT @jn, JSON_STORAGE_SIZE(@jn) AS Size;\n+----------------------------------+------+\n| @jn                              | Size |\n+----------------------------------+------+\n| [100, \"json\", [1, 3, 5], 425.05] |   36 |\n+----------------------------------+------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> CREATE TABLE jtbl (jcol JSON);\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO jtbl VALUES  ('{\"a\": 1000, \"b\": \"wxyz\", \"c\": \"[1, 3, 5, 7]\"}');\nQuery OK, 1 row affected\n\nobclient> SELECT jcol,JSON_STORAGE_SIZE(jcol) AS Size FROM jtbl;\n+-----------------------------------------------+------+\n| jcol                                          | Size |\n+-----------------------------------------------+------+\n| {\"a\": 1000, \"b\": \"wxyz\", \"c\": \"[1, 3, 5, 7]\"} |   41 |\n+-----------------------------------------------+------+\n1 row in set\n\nobclient> SET @jn = '[100, \"sakila\", [1, 3, 5], 425.05]';\nQuery OK, 0 rows affected\n\nobclient> SELECT @jn, JSON_STORAGE_SIZE(@jn) AS Size;\n+------------------------------------+------+\n| @jn                                | Size |\n+------------------------------------+------+\n| [100, \"sakila\", [1, 3, 5], 425.05] |   38 |\n+------------------------------------+------+\n1 row in set\n\nobclient> SET @jn = JSON_SET(@jn, '$[1]', \"json\");\nQuery OK, 0 rows affected\n\nobclient> SELECT @jn, JSON_STORAGE_SIZE(@jn) AS Size;\n+----------------------------------+------+\n| @jn                              | Size |\n+----------------------------------+------+\n| [100, \"json\", [1, 3, 5], 425.05] |   36 |\n+----------------------------------+------+\n1 row in set\n"
        ]
    },
    "JSON_TYPE": {
        "Title": [
            "JSON_TYPE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823288"
        ],
        "Category": [
            "JSON Functions"
        ],
        "Feature": "JSON_TYPE(json_val)\n",
        "Description": [
            "该函数返回代表 JSON 值类型的 utf8mb4 字符串。"
        ],
        "Illustration": [
            "参数 json_val 可以是对象、数组或标量类型。",
            "如果参数为 NULL，则返回 NULL。如果参数不是有效的 JSON 值，则会报错。"
        ],
        "Examples": [
            "obclient> SET @jn = '{\"a\": [10, true]}';\nQuery OK, 0 rows affected\n\nobclient> SELECT JSON_TYPE(JSON_EXTRACT(@jn, '$.a'));\n+-------------------------------------+\n| JSON_TYPE(JSON_EXTRACT(@jn, '$.a')) |\n+-------------------------------------+\n| ARRAY                               |\n+-------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_TYPE(JSON_EXTRACT(@jn, '$.a[0]'));\n+----------------------------------------+\n| JSON_TYPE(JSON_EXTRACT(@jn, '$.a[0]')) |\n+----------------------------------------+\n| INTEGER                                |\n+----------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_TYPE(JSON_EXTRACT(@jn, '$.a[1]'));\n+----------------------------------------+\n| JSON_TYPE(JSON_EXTRACT(@jn, '$.a[1]')) |\n+----------------------------------------+\n| BOOLEAN                                |\n+----------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_TYPE(NULL);\n+-----------------+\n| JSON_TYPE(NULL) |\n+-----------------+\n| NULL            |\n+-----------------+\n1 row in set\n\nobclient> SELECT JSON_TYPE(1);\nERROR 3146 (22032): Invalid data type for JSON data in argument 1\nto function json_type; a JSON string or JSON type is required.\n"
        ],
        "Detailed Examples": [
            "obclient> SET @jn = '{\"a\": [10, true]}';\nQuery OK, 0 rows affected\n\nobclient> SELECT JSON_TYPE(JSON_EXTRACT(@jn, '$.a'));\n+-------------------------------------+\n| JSON_TYPE(JSON_EXTRACT(@jn, '$.a')) |\n+-------------------------------------+\n| ARRAY                               |\n+-------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_TYPE(JSON_EXTRACT(@jn, '$.a[0]'));\n+----------------------------------------+\n| JSON_TYPE(JSON_EXTRACT(@jn, '$.a[0]')) |\n+----------------------------------------+\n| INTEGER                                |\n+----------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_TYPE(JSON_EXTRACT(@jn, '$.a[1]'));\n+----------------------------------------+\n| JSON_TYPE(JSON_EXTRACT(@jn, '$.a[1]')) |\n+----------------------------------------+\n| BOOLEAN                                |\n+----------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_TYPE(NULL);\n+-----------------+\n| JSON_TYPE(NULL) |\n+-----------------+\n| NULL            |\n+-----------------+\n1 row in set\n\nobclient> SELECT JSON_TYPE(1);\nERROR 3146 (22032): Invalid data type for JSON data in argument 1\nto function json_type; a JSON string or JSON type is required.\n"
        ]
    },
    "JSON_UNQUOTE": {
        "Title": [
            "JSON_UNQUOTE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823290"
        ],
        "Category": [
            "JSON Functions"
        ],
        "Feature": "JSON_UNQUOTE(json_val)\n",
        "Description": [
            "该函数用于取消引用 JSON 值并将结果作为 utf8mb4 字符串返回。"
        ],
        "Illustration": [
            "参数 json_val 为引用的 JSON 值。如果参数为 NULL，则返回 NULL。",
            "如果值以双引号开头和结尾，但不是有效的 JSON 字符串字面量，则会发生错误。"
        ],
        "Examples": [
            "obclient> SET @jn = '\"abcd\"';\nQuery OK, 0 rows affected\n\nobclient> SELECT @jn, JSON_UNQUOTE(@jn);\n+--------+-------------------+\n| @jn    | JSON_UNQUOTE(@jn) |\n+--------+-------------------+\n| \"abcd\" | abcd              |\n+--------+-------------------+\n1 row in set\n\nobclient> SET @jn = '[1, 2, 3, 4]';\nQuery OK, 0 rows affected\n\nobclient> SELECT @jn, JSON_UNQUOTE(@jn);\n+--------------+-------------------+\n| @jn          | JSON_UNQUOTE(@jn) |\n+--------------+-------------------+\n| [1, 2, 3, 4] | [1, 2, 3, 4]      |\n+--------------+-------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SET @jn = '\"abcd\"';\nQuery OK, 0 rows affected\n\nobclient> SELECT @jn, JSON_UNQUOTE(@jn);\n+--------+-------------------+\n| @jn    | JSON_UNQUOTE(@jn) |\n+--------+-------------------+\n| \"abcd\" | abcd              |\n+--------+-------------------+\n1 row in set\n\nobclient> SET @jn = '[1, 2, 3, 4]';\nQuery OK, 0 rows affected\n\nobclient> SELECT @jn, JSON_UNQUOTE(@jn);\n+--------------+-------------------+\n| @jn          | JSON_UNQUOTE(@jn) |\n+--------------+-------------------+\n| [1, 2, 3, 4] | [1, 2, 3, 4]      |\n+--------------+-------------------+\n1 row in set\n"
        ]
    },
    "JSON_VALID": {
        "Title": [
            "JSON_VALID"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823287"
        ],
        "Category": [
            "JSON Functions"
        ],
        "Feature": "JSON_VALID(val)\n",
        "Description": [
            "该函数用于判断输入值是否为有效的 JSON，如果是有效的 JSON 返回 1，否则返回 0。"
        ],
        "Illustration": [
            "参数 val 为输入值。如果参数为 NULL，则返回 NULL。"
        ],
        "Examples": [
            "obclient> SELECT JSON_VALID('{\"a\": 1}');\n+------------------------+\n| JSON_VALID('{\"a\": 1}') |\n+------------------------+\n|                      1 |\n+------------------------+\n1 row in set\n\nobclient> SELECT JSON_VALID('oceanbase'), JSON_VALID('\"oceanbase\"');\n+-------------------------+---------------------------+\n| JSON_VALID('oceanbase') | JSON_VALID('\"oceanbase\"') |\n+-------------------------+---------------------------+\n|                       0 |                         1 |\n+-------------------------+---------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT JSON_VALID('{\"a\": 1}');\n+------------------------+\n| JSON_VALID('{\"a\": 1}') |\n+------------------------+\n|                      1 |\n+------------------------+\n1 row in set\n\nobclient> SELECT JSON_VALID('oceanbase'), JSON_VALID('\"oceanbase\"');\n+-------------------------+---------------------------+\n| JSON_VALID('oceanbase') | JSON_VALID('\"oceanbase\"') |\n+-------------------------+---------------------------+\n|                       0 |                         1 |\n+-------------------------+---------------------------+\n1 row in set\n"
        ]
    },
    "JSON_VALUE": {
        "Title": [
            "JSON_VALUE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823313"
        ],
        "Category": [
            "JSON Functions"
        ],
        "Feature": "JSON_VALUE(json_doc, path [RETURNING type] [on_empty] [on_error])\n\non_empty:\n    {NULL | ERROR | DEFAULT value} ON EMPTY\n\non_error:\n    {NULL | ERROR | DEFAULT value} ON ERROR\n",
        "Description": [
            "该函数从指定路径中提取 JSON 文档中的值，并返回提取的值，还可以选择将其转换为所需数据类型。"
        ],
        "Illustration": [
            "参数解释",
            "相关参数解释如下：",
            "json_doc 参数指定有效的 JSON 文档。",
            "path 参数是指向文档中某个位置的 JSON 路径，必须是字符串。",
            "type 参数是支持如下数据类型：",
            "\nFLOAT\nDOUBLE\nDECIMAL\nSIGNED\nUNSIGNED\nDATE\nTIME\nDATETIME\nYEAR (不支持 YEAR(1) 和 YEAR(2))\nCHAR\nJSON\n",
            "FLOAT",
            "DOUBLE",
            "DECIMAL",
            "SIGNED",
            "UNSIGNED",
            "DATE",
            "TIME",
            "DATETIME",
            "YEAR (不支持 YEAR(1) 和 YEAR(2))",
            "CHAR",
            "JSON",
            "如果没有使用 RETURNING 子句，则该函数的返回类型为 VARCHAR(512)。 当没有为返回类型指定字符集时，JSON_VALUE() 使用 utf8mb4 和二进制排序规则，并区分大小写； 如果将 utf8mb4 指定为结果的字符集，则服务器使用此字符集的默认排序规则，不用区分大小写。",
            "当在指定路径中未找到数据时，on_empty 子句用于指定 JSON_VALUE() 的行为。该子句取值如下：",
            "\nNULL ON EMPTY：JSON_VALUE() 返回 NULL。这是 ON EMPTY 的默认行为。\nDEFAULT value ON EMPTY'：返回所提供的 value 值，该值的类型必须与返回类型相匹配。\nERROR ON EMPTY：函数抛出错误。\n",
            "NULL ON EMPTY：JSON_VALUE() 返回 NULL。这是 ON EMPTY 的默认行为。",
            "DEFAULT value ON EMPTY'：返回所提供的 value 值，该值的类型必须与返回类型相匹配。",
            "ERROR ON EMPTY：函数抛出错误。",
            "当发生错误时，on_error 取值如下：",
            "\nNULL ON ERROR：JSON_VALUE() 返回 NULL；如果未使用 ON ERROR 子句，则这是默认行为。\nDEFAULT value ON ERROR：返回所提供的 value 值，该值的类型必须与返回类型的值相匹配。\nERROR ON ERROR：抛出错误。\n",
            "\n注意\nON EMPTY 的位置（如果使用）必须在所有 ON ERROR 子句之前，错误的顺序会导致语法错误。\n",
            "NULL ON ERROR：JSON_VALUE() 返回 NULL；如果未使用 ON ERROR 子句，则这是默认行为。",
            "DEFAULT value ON ERROR：返回所提供的 value 值，该值的类型必须与返回类型的值相匹配。",
            "ERROR ON ERROR：抛出错误。",
            "错误处理",
            "通常，JSON_VALUE() 会检查所有 JSON 输入（文档和路径）的有效性。如果其中任何一个为无效，则会抛出 SQL 错误，而不触发 ON ERROR 子句。",
            "如果发生以下某一事件，就会触发 ON ERROR：",
            "尝试提取对象或数组时，输入的路径在 JSON 文档中被解析为多个路径。",
            "转换错误。例如，尝试将 'asdf' 转换为 UNSIGNED 值。",
            "数据截断。",
            "即使指定了 NULL ON ERROR 或 DEFAULT ... ON ERROR，转换错误总是会触发告警。",
            "当源 JSON 文档 (json_doc) 在指定位置（path）不包含任何数据时，会触发 ON EMPTY 子句。"
        ],
        "Examples": [
            "obclient> SELECT JSON_VALUE('{\"fname\": \"Smith\", \"lname\": \"Will\"}', '$.fname');\n+--------------------------------------------------------------+\n| JSON_VALUE('{\"fname\": \"Smith\", \"lname\": \"Will\"}', '$.fname') |\n+--------------------------------------------------------------+\n| Smith                                                        |\n+--------------------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_VALUE('{\"item\": \"shoes\", \"price\": \"69.73\"}', '$.price'\n     RETURNING DECIMAL(4,2)) AS price;\n+-------+\n| price |\n+-------+\n| 69.73 |\n+-------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT JSON_VALUE('{\"fname\": \"Smith\", \"lname\": \"Will\"}', '$.fname');\n+--------------------------------------------------------------+\n| JSON_VALUE('{\"fname\": \"Smith\", \"lname\": \"Will\"}', '$.fname') |\n+--------------------------------------------------------------+\n| Smith                                                        |\n+--------------------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_VALUE('{\"item\": \"shoes\", \"price\": \"69.73\"}', '$.price'\n     RETURNING DECIMAL(4,2)) AS price;\n+-------+\n| price |\n+-------+\n| 69.73 |\n+-------+\n1 row in set\n"
        ]
    },
    "LAG": {
        "Title": [
            "LAG"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823039"
        ],
        "Category": [
            "Analysis Functions"
        ],
        "Feature": "LAG { ( value_expr [, offset [, default]]) [ { RESPECT | IGNORE } NULLS ] | ( value_expr [ { RESPECT | IGNORE } NULLS ] [, offset [, default]] )} OVER ([ query_partition_clause ] order_by_clause)\n",
        "Description": [],
        "Illustration": [
            "在一次查询中取出当前行的同一个字段的后面第 offset 行的数据，这种操作可以使用相同表的自连接来实现，但 LAG() 窗口函数有更高的效率。"
        ],
        "Examples": [
            "obclient> CREATE TABLE EXPLOYEES(LAST_NAME CHAR(10), SALARY DECIMAL, JOB_ID CHAR(32));\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('JIM', 2000, 'CLEANER');\nQuery OK, 1 row affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('MIKE', 12000, 'ENGINEERING');\nQuery OK, 1 row affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('LILY', 13000, 'ENGINEERING');\nQuery OK, 1 row affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('TOM', 11000, 'ENGINEERING');\nQuery OK, 1 row affected\n\nobclient> SELECT LAST_NAME, LEAD(SALARY) OVER(ORDER BY SALARY) LEAD, LAG(SALARY) OVER(ORDER BY SALARY) LAG FROM EXPLOYEES;\n+-----------+-------+-------+\n| LAST_NAME | LEAD  | LAG   |\n+-----------+-------+-------+\n| JIM       | 11000 |  NULL |\n| TOM       | 12000 |  2000 |\n| MIKE      | 13000 | 11000 |\n| LILY      |  NULL | 12000 |\n+-----------+-------+-------+\n4 rows in set\n"
        ],
        "Detailed Examples": [
            "obclient> CREATE TABLE EXPLOYEES(LAST_NAME CHAR(10), SALARY DECIMAL, JOB_ID CHAR(32));\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('JIM', 2000, 'CLEANER');\nQuery OK, 1 row affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('MIKE', 12000, 'ENGINEERING');\nQuery OK, 1 row affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('LILY', 13000, 'ENGINEERING');\nQuery OK, 1 row affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('TOM', 11000, 'ENGINEERING');\nQuery OK, 1 row affected\n\nobclient> SELECT LAST_NAME, LEAD(SALARY) OVER(ORDER BY SALARY) LEAD, LAG(SALARY) OVER(ORDER BY SALARY) LAG FROM EXPLOYEES;\n+-----------+-------+-------+\n| LAST_NAME | LEAD  | LAG   |\n+-----------+-------+-------+\n| JIM       | 11000 |  NULL |\n| TOM       | 12000 |  2000 |\n| MIKE      | 13000 | 11000 |\n| LILY      |  NULL | 12000 |\n+-----------+-------+-------+\n4 rows in set\n"
        ]
    },
    "LAST_DAY": {
        "Title": [
            "LAST_DAY"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823408"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "LAST_DAY(date)\n",
        "Description": [],
        "Illustration": [
            "返回 date 当月最后一天的日期值。"
        ],
        "Examples": [
            "obclient> SELECT LAST_DAY('2004-02-05');\n+------------------------+\n| LAST_DAY('2004-02-05') |\n+------------------------+\n| 2004-02-29             |\n+------------------------+\n1 row in set\n\nobclient> SELECT LAST_DAY('2004-01-01 01:01:01');\n+---------------------------------+\n| LAST_DAY('2004-01-01 01:01:01') |\n+---------------------------------+\n| 2004-01-31                      |\n+---------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT LAST_DAY('2004-02-05');\n+------------------------+\n| LAST_DAY('2004-02-05') |\n+------------------------+\n| 2004-02-29             |\n+------------------------+\n1 row in set\n\nobclient> SELECT LAST_DAY('2004-01-01 01:01:01');\n+---------------------------------+\n| LAST_DAY('2004-01-01 01:01:01') |\n+---------------------------------+\n| 2004-01-31                      |\n+---------------------------------+\n1 row in set\n"
        ]
    },
    "LAST_INSERT_ID": {
        "Title": [
            "LAST_INSERT_ID"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822968"
        ],
        "Category": [
            "Information Functions"
        ],
        "Feature": "LAST_INSERT_ID()\n",
        "Description": [],
        "Illustration": [
            "返回本 Session 最后一次插入的自增字段值。",
            "特别地，如果最近一条 INSERT 插入多条记录，LAST_INSERT_ID() 返回第一条记录的自增字段值。"
        ],
        "Examples": [
            "obclient> CREATE TABLE t1(c1 INT,c2 INT AUTO_INCREMENT);\nobclient> SELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                0 |\n+------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> CREATE TABLE t1(c1 INT,c2 INT AUTO_INCREMENT);\nobclient> SELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                0 |\n+------------------+\n1 row in set\n"
        ]
    },
    "LAST_VALUE": {
        "Title": [
            "LAST_VALUE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823056"
        ],
        "Category": [
            "Analysis Functions"
        ],
        "Feature": "LAST_VALUE { (expr) [ {RESPECT | IGNORE} NULLS ] | (expr [ {RESPECT | IGNORE} NULLS ])} OVER (analytic_clause)\n",
        "Description": [],
        "Illustration": [
            "返回表达式 expr 的最后一个值。"
        ],
        "Examples": [
            "obclient> CREATE TABLE EXPLOYEES(LAST_NAME CHAR(10), SALARY DECIMAL, JOB_ID CHAR(32));\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('JIM', 2000, 'CLEANER');\nQuery OK, 1 row affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('MIKE', 12000, 'ENGINEERING');\nQuery OK, 1 row affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('LILY', 13000, 'ENGINEERING');\nQuery OK, 1 row affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('TOM', 11000, 'ENGINEERING');\nQuery OK, 1 row affected\n\nobclient> SELECT LAST_NAME, FIRST_VALUE(SALARY) OVER(PARTITION BY JOB_ID) FIRST_S, LAST_VALUE(SALARY) OVER(PARTITION BY JOB_ID) LAST_S, NTH_VALUE(SALARY,2) OVER(PARTITION BY JOB_ID) 2ND_S FROM EXPLOYEES;\n+-----------+---------+--------+-------+\n| LAST_NAME | FIRST_S | LAST_S | 2ND_S |\n+-----------+---------+--------+-------+\n| JIM       |    2000 |   2000 |  NULL |\n| MIKE      |   12000 |  11000 | 13000 |\n| LILY      |   12000 |  11000 | 13000 |\n| TOM       |   12000 |  11000 | 13000 |\n+-----------+---------+--------+-------+\n4 rows in set\n"
        ],
        "Detailed Examples": [
            "obclient> CREATE TABLE EXPLOYEES(LAST_NAME CHAR(10), SALARY DECIMAL, JOB_ID CHAR(32));\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('JIM', 2000, 'CLEANER');\nQuery OK, 1 row affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('MIKE', 12000, 'ENGINEERING');\nQuery OK, 1 row affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('LILY', 13000, 'ENGINEERING');\nQuery OK, 1 row affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('TOM', 11000, 'ENGINEERING');\nQuery OK, 1 row affected\n\nobclient> SELECT LAST_NAME, FIRST_VALUE(SALARY) OVER(PARTITION BY JOB_ID) FIRST_S, LAST_VALUE(SALARY) OVER(PARTITION BY JOB_ID) LAST_S, NTH_VALUE(SALARY,2) OVER(PARTITION BY JOB_ID) 2ND_S FROM EXPLOYEES;\n+-----------+---------+--------+-------+\n| LAST_NAME | FIRST_S | LAST_S | 2ND_S |\n+-----------+---------+--------+-------+\n| JIM       |    2000 |   2000 |  NULL |\n| MIKE      |   12000 |  11000 | 13000 |\n| LILY      |   12000 |  11000 | 13000 |\n| TOM       |   12000 |  11000 | 13000 |\n+-----------+---------+--------+-------+\n4 rows in set\n"
        ]
    },
    "LCASE": {
        "Title": [
            "LCASE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823452"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "LCASE(str)\n",
        "Description": [],
        "Illustration": [
            "将字符串中的大写字母转化为小写字母。",
            "该函数是 LOWER() 的同义词。"
        ],
        "Examples": [
            "obclient> SELECT LCASE('OBCLIENT您好！');\n+----------------------------+\n| LCASE('OBCLIENT您好！')    |\n+----------------------------+\n| obclient您好！             |\n+----------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT LCASE('OBCLIENT您好！');\n+----------------------------+\n| LCASE('OBCLIENT您好！')    |\n+----------------------------+\n| obclient您好！             |\n+----------------------------+\n1 row in set\n"
        ]
    },
    "LEAD": {
        "Title": [
            "LEAD"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823058"
        ],
        "Category": [
            "Analysis Functions"
        ],
        "Feature": "LEAD { ( value_expr [, offset [, default]]) [ { RESPECT | IGNORE } NULLS ] | ( value_expr [ { RESPECT | IGNORE } NULLS ] [, offset [, default]] )} OVER ([ query_partition_clause ] order_by_clause)\n",
        "Description": [],
        "Illustration": [
            "LEAD 函数用户在一次查询中取出当前行的同一个字段的后面第 N 行的数据，这种操作可以使用相同表的自连接来实现，但 LEAD() 窗口函数有更高的效率。"
        ],
        "Examples": [
            "obclient> CREATE TABLE EXPLOYEES(LAST_NAME CHAR(10), SALARY DECIMAL, JOB_ID CHAR(32));\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('JIM', 2000, 'CLEANER');\nQuery OK, 1 row affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('MIKE', 12000, 'ENGINEERING');\nQuery OK, 1 row affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('LILY', 13000, 'ENGINEERING');\nQuery OK, 1 row affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('TOM', 11000, 'ENGINEERING');\nQuery OK, 1 row affected\n\nobclient> SELECT LAST_NAME, LEAD(SALARY) OVER(ORDER BY SALARY) LEAD, LAG(SALARY) OVER(ORDER BY SALARY) LAG FROM EXPLOYEES;\n+-----------+-------+-------+\n| LAST_NAME | LEAD  | LAG   |\n+-----------+-------+-------+\n| JIM       | 11000 |  NULL |\n| TOM       | 12000 |  2000 |\n| MIKE      | 13000 | 11000 |\n| LILY      |  NULL | 12000 |\n+-----------+-------+-------+\n4 rows in set\n"
        ],
        "Detailed Examples": [
            "obclient> CREATE TABLE EXPLOYEES(LAST_NAME CHAR(10), SALARY DECIMAL, JOB_ID CHAR(32));\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('JIM', 2000, 'CLEANER');\nQuery OK, 1 row affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('MIKE', 12000, 'ENGINEERING');\nQuery OK, 1 row affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('LILY', 13000, 'ENGINEERING');\nQuery OK, 1 row affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('TOM', 11000, 'ENGINEERING');\nQuery OK, 1 row affected\n\nobclient> SELECT LAST_NAME, LEAD(SALARY) OVER(ORDER BY SALARY) LEAD, LAG(SALARY) OVER(ORDER BY SALARY) LAG FROM EXPLOYEES;\n+-----------+-------+-------+\n| LAST_NAME | LEAD  | LAG   |\n+-----------+-------+-------+\n| JIM       | 11000 |  NULL |\n| TOM       | 12000 |  2000 |\n| MIKE      | 13000 | 11000 |\n| LILY      |  NULL | 12000 |\n+-----------+-------+-------+\n4 rows in set\n"
        ]
    },
    "LEAST": {
        "Title": [
            "LEAST"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823364"
        ],
        "Category": [
            "Comparison Functions"
        ],
        "Feature": "LEAST(value1, ...)\n",
        "Description": [],
        "Illustration": [
            "返回参数的最小值，和 GREATEST() 函数相对。",
            "参数至少为两个；如果参数中有 NULL，返回值为 NULL。",
            "当参数中同时存在数值和字符时，把字符隐式转换为数值类型处理，不能转换的报错。"
        ],
        "Examples": [
            "obclient> SELECT LEAST(2, null), LEAST('2',4,9), LEAST('a','b','c'), LEAST('a',NULL,'c'), LEAST('2014-05-15','2014-06-01')\\G\n*************************** 1. row ***************************\n                  LEAST(2, null): NULL\n                  LEAST('2',4,9): 2\n              LEAST('a','b','c'): a\n             LEAST('a',NULL,'c'): NULL\nLEAST('2014-05-15','2014-06-01'): 2014-05-15\n1 row in set\n\nobclient> SELECT LEAST(2);\nERROR 1582 (42000): Incorrect parameter count in the call to native function 'LEAST'\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT LEAST(2, null), LEAST('2',4,9), LEAST('a','b','c'), LEAST('a',NULL,'c'), LEAST('2014-05-15','2014-06-01')\\G\n*************************** 1. row ***************************\n                  LEAST(2, null): NULL\n                  LEAST('2',4,9): 2\n              LEAST('a','b','c'): a\n             LEAST('a',NULL,'c'): NULL\nLEAST('2014-05-15','2014-06-01'): 2014-05-15\n1 row in set\n\nobclient> SELECT LEAST(2);\nERROR 1582 (42000): Incorrect parameter count in the call to native function 'LEAST'\n"
        ]
    },
    "LEFT": {
        "Title": [
            "LEFT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823433"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "LEFT(str,len)\n",
        "Description": [],
        "Illustration": [
            "返回字符串 str 从左侧起的 len 个字符，如果 str 或 len 为 NULL，则返回 NULL。",
            "该函数是多字节安全的。"
        ],
        "Examples": [
            "obclient> SELECT LEFT('oceanbase', 5);\n+----------------------+\n| LEFT('oceanbase', 5) |\n+----------------------+\n| ocean                |\n+----------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT LEFT('oceanbase', 5);\n+----------------------+\n| LEFT('oceanbase', 5) |\n+----------------------+\n| ocean                |\n+----------------------+\n1 row in set\n"
        ]
    },
    "LENGTH": {
        "Title": [
            "LENGTH"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823462"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "LENGTH(str)\n",
        "Description": [],
        "Illustration": [
            "返回 str 的字节长度。",
            "多字节的字符会被计算为多个字符。例如，输入 5 个 2 字节字符，CHAR_LENGTH() 返回 5，而 LENGTH() 则返回 10。"
        ],
        "Examples": [
            "obclient> SELECT LENGTH('中国'), LENGTH('hello');\n+------------------+-----------------+\n| LENGTH('中国') | LENGTH('hello') |\n+------------------+-----------------+\n|                6 |               5 |\n+------------------+-----------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT LENGTH('中国'), LENGTH('hello');\n+------------------+-----------------+\n| LENGTH('中国') | LENGTH('hello') |\n+------------------+-----------------+\n|                6 |               5 |\n+------------------+-----------------+\n1 row in set\n"
        ]
    },
    "LN": {
        "Title": [
            "LN"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823353"
        ],
        "Category": [
            "Mathematical Functions"
        ],
        "Feature": "LN(X)\n",
        "Description": [],
        "Illustration": [
            "返回 X 的自然对数，即 X 的以 e 为底的对数。如果 X 小于或等于 0，则返回 NULL，并上报警告 Invalid argument for logarithm。",
            "此函数与 LOG(X) 同义。"
        ],
        "Examples": [
            "obclient> SELECT LN(-10), LN(0), LN(10), LN(-3.14), LN(3.14);\n+---------+-------+-------------------+-----------+-------------------+\n| LN(-10) | LN(0) | LN(10)            | LN(-3.14) | LN(3.14)          |\n+---------+-------+-------------------+-----------+-------------------+\n|    NULL |  NULL | 2.302585092994046 |      NULL | 1.144222799920162 |\n+---------+-------+-------------------+-----------+-------------------+\n1 row in set, 3 warnings\n\nobclient> SHOW WARNINGS;\n+---------+------+--------------------------------+\n| Level   | Code | Message                        |\n+---------+------+--------------------------------+\n| Warning | 3020 | Invalid argument for logarithm |\n| Warning | 3020 | Invalid argument for logarithm |\n| Warning | 3020 | Invalid argument for logarithm |\n+---------+------+--------------------------------+\n3 rows in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT LN(-10), LN(0), LN(10), LN(-3.14), LN(3.14);\n+---------+-------+-------------------+-----------+-------------------+\n| LN(-10) | LN(0) | LN(10)            | LN(-3.14) | LN(3.14)          |\n+---------+-------+-------------------+-----------+-------------------+\n|    NULL |  NULL | 2.302585092994046 |      NULL | 1.144222799920162 |\n+---------+-------+-------------------+-----------+-------------------+\n1 row in set, 3 warnings\n\nobclient> SHOW WARNINGS;\n+---------+------+--------------------------------+\n| Level   | Code | Message                        |\n+---------+------+--------------------------------+\n| Warning | 3020 | Invalid argument for logarithm |\n| Warning | 3020 | Invalid argument for logarithm |\n| Warning | 3020 | Invalid argument for logarithm |\n+---------+------+--------------------------------+\n3 rows in set\n"
        ]
    },
    "LOCALTIME": {
        "Title": [
            "LOCALTIME"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823389"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "LOCALTIME\nLOCALTIME([scale])\n",
        "Description": [],
        "Illustration": [
            "返回当前日期时间。LOCALTIME 和 LOCALTIME() 是 NOW() 的同义词。",
            "scale 表示微秒部分的精度，有效值为 0 到 6 的整数，默认值为 0。"
        ],
        "Examples": [
            "obclient> SELECT LOCALTIME(0);\n+---------------------+\n| LOCALTIME(0)        |\n+---------------------+\n| 2021-08-25 17:20:31 |\n+---------------------+\n1 row in set\n\nobclient> SELECT LOCALTIME(6);\n+----------------------------+\n| LOCALTIME(6)               |\n+----------------------------+\n| 2021-08-25 17:20:41.358574 |\n+----------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT LOCALTIME(0);\n+---------------------+\n| LOCALTIME(0)        |\n+---------------------+\n| 2021-08-25 17:20:31 |\n+---------------------+\n1 row in set\n\nobclient> SELECT LOCALTIME(6);\n+----------------------------+\n| LOCALTIME(6)               |\n+----------------------------+\n| 2021-08-25 17:20:41.358574 |\n+----------------------------+\n1 row in set\n"
        ]
    },
    "LOCALTIMESTAMP": {
        "Title": [
            "LOCALTIMESTAMP"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823415"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "LOCALTIMESTAMP([scale])\n",
        "Description": [],
        "Illustration": [
            "返回当前日期和时间，scale 表示微秒部分精度，有效值为 0 到 6 的整数。LOCALTIMESTAMP 和 LOCALTIMESTAMP() 是 NOW() 的同义词。"
        ],
        "Examples": [
            "obclient> SELECT LOCALTIMESTAMP,LOCALTIMESTAMP(0),LOCALTIMESTAMP(6);\n+---------------------+---------------------+----------------------------+\n| LOCALTIMESTAMP      | LOCALTIMESTAMP(0)   | LOCALTIMESTAMP(6)          |\n+---------------------+---------------------+----------------------------+\n| 2021-08-25 17:17:08 | 2021-08-25 17:17:08 | 2021-08-25 17:17:08.952508 |\n+---------------------+---------------------+----------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT LOCALTIMESTAMP,LOCALTIMESTAMP(0),LOCALTIMESTAMP(6);\n+---------------------+---------------------+----------------------------+\n| LOCALTIMESTAMP      | LOCALTIMESTAMP(0)   | LOCALTIMESTAMP(6)          |\n+---------------------+---------------------+----------------------------+\n| 2021-08-25 17:17:08 | 2021-08-25 17:17:08 | 2021-08-25 17:17:08.952508 |\n+---------------------+---------------------+----------------------------+\n1 row in set\n"
        ]
    },
    "LOCATE": {
        "Title": [
            "LOCATE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823447"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "LOCATE(substr,str)\nLOCATE(substr,str,pos)\n",
        "Description": [],
        "Illustration": [
            "第一个语法返回字符串 str 中子字符串 substr 的第一个出现位置。第二个语法返回字符串 str 中子字符串 substr 的第一个出现位置，起始位置在 pos。如果 substr 不在 str 中，则返回值为 0。"
        ],
        "Examples": [
            "obclient> SELECT LOCATE('bar', 'foobarbar'), LOCATE('xbar', 'foobar'), LOCATE('bar', 'foobarbar',5);\n+----------------------------+--------------------------+------------------------------+\n| LOCATE('bar', 'foobarbar') | LOCATE('xbar', 'foobar') | LOCATE('bar', 'foobarbar',5) |\n+----------------------------+--------------------------+------------------------------+\n|                          4 |                        0 |                            7 |\n+----------------------------+--------------------------+------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT LOCATE('bar', 'foobarbar'), LOCATE('xbar', 'foobar'), LOCATE('bar', 'foobarbar',5);\n+----------------------------+--------------------------+------------------------------+\n| LOCATE('bar', 'foobarbar') | LOCATE('xbar', 'foobar') | LOCATE('bar', 'foobarbar',5) |\n+----------------------------+--------------------------+------------------------------+\n|                          4 |                        0 |                            7 |\n+----------------------------+--------------------------+------------------------------+\n1 row in set\n"
        ]
    },
    "LOG": {
        "Title": [
            "LOG"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823356"
        ],
        "Category": [
            "Mathematical Functions"
        ],
        "Feature": "LOG([B,]X)\n",
        "Description": [],
        "Illustration": [
            "LOG(X) 返回 X 的自然对数，即 X 的以 e 为底的对数。如果 X 小于或等于 0，则返回 NULL，并上报警告 Invalid argument for logarithm。只提供 X 时，该函数与 LN(X) 函数相同。",
            "LOG(B,X) 返回以 B 为底 X 的对数。如果 X 小于或等于 0，或者 B 小于或等于 1，则返回 NULL。"
        ],
        "Examples": [
            "obclient> SELECT LOG(-10), LOG(0), LOG(10), LOG(-3.14), LOG(3.14);\n+----------+--------+-------------------+------------+-------------------+\n| LOG(-10) | LOG(0) | LOG(10)           | LOG(-3.14) | LOG(3.14)         |\n+----------+--------+-------------------+------------+-------------------+\n|     NULL |   NULL | 2.302585092994046 |       NULL | 1.144222799920162 |\n+----------+--------+-------------------+------------+-------------------+\n1 row in set, 3 warnings\n\nobclient> SELECT LOG(10, 100), LOG(1,100);\n+--------------+------------+\n| LOG(10, 100) | LOG(1,100) |\n+--------------+------------+\n|            2 |       NULL |\n+--------------+------------+\n1 row in set, 1 warning\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT LOG(-10), LOG(0), LOG(10), LOG(-3.14), LOG(3.14);\n+----------+--------+-------------------+------------+-------------------+\n| LOG(-10) | LOG(0) | LOG(10)           | LOG(-3.14) | LOG(3.14)         |\n+----------+--------+-------------------+------------+-------------------+\n|     NULL |   NULL | 2.302585092994046 |       NULL | 1.144222799920162 |\n+----------+--------+-------------------+------------+-------------------+\n1 row in set, 3 warnings\n\nobclient> SELECT LOG(10, 100), LOG(1,100);\n+--------------+------------+\n| LOG(10, 100) | LOG(1,100) |\n+--------------+------------+\n|            2 |       NULL |\n+--------------+------------+\n1 row in set, 1 warning\n"
        ]
    },
    "LOG10": {
        "Title": [
            "LOG10"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823336"
        ],
        "Category": [
            "Mathematical Functions"
        ],
        "Feature": "LOG10(X)\n",
        "Description": [],
        "Illustration": [
            "返回以 10 为底的 X 的指数。"
        ],
        "Examples": [
            "obclient> SELECT LOG10(1000);\n+-------------+\n| LOG10(1000) |\n+-------------+\n|           3 |\n+-------------+\n1 row in set\n\nobclient> SELECT LOG10(-1000);\n+--------------+\n| LOG10(-1000) |\n+--------------+\n|         NULL |\n+--------------+\n1 row in set, 1 warning\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT LOG10(1000);\n+-------------+\n| LOG10(1000) |\n+-------------+\n|           3 |\n+-------------+\n1 row in set\n\nobclient> SELECT LOG10(-1000);\n+--------------+\n| LOG10(-1000) |\n+--------------+\n|         NULL |\n+--------------+\n1 row in set, 1 warning\n"
        ]
    },
    "LOG2": {
        "Title": [
            "LOG2"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823340"
        ],
        "Category": [
            "Mathematical Functions"
        ],
        "Feature": "LOG2(X)\n",
        "Description": [],
        "Illustration": [
            "返回以 2 为底的 X 的指数。"
        ],
        "Examples": [
            "obclient> SELECT LOG2(65536);\n+-------------+\n| LOG2(65536) |\n+-------------+\n|          16 |\n+-------------+\n1 row in set\n\nobclient> SELECT LOG2(-65536);\n+--------------+\n| LOG2(-65536) |\n+--------------+\n|         NULL |\n+--------------+\n1 row in set, 1 warning\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT LOG2(65536);\n+-------------+\n| LOG2(65536) |\n+-------------+\n|          16 |\n+-------------+\n1 row in set\n\nobclient> SELECT LOG2(-65536);\n+--------------+\n| LOG2(-65536) |\n+--------------+\n|         NULL |\n+--------------+\n1 row in set, 1 warning\n"
        ]
    },
    "LOWER": {
        "Title": [
            "LOWER"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823477"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "LOWER(str)\n",
        "Description": [],
        "Illustration": [
            "将字符串中的大写字母转化为小写字母。",
            "该函数是 LCASE() 的同义词。"
        ],
        "Examples": [
            "obclient> SELECT LOWER('OBCLIENT您好！');\n+-----------------------------+\n| LOWER('OBCLIENT您好！') |\n+-----------------------------+\n| obclient您好！          |\n+-----------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT LOWER('OBCLIENT您好！');\n+-----------------------------+\n| LOWER('OBCLIENT您好！') |\n+-----------------------------+\n| obclient您好！          |\n+-----------------------------+\n1 row in set\n"
        ]
    },
    "LPAD": {
        "Title": [
            "LPAD"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823470"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "LPAD(str,len,padstr)\n",
        "Description": [],
        "Illustration": [
            "使用字符串 padstr 从左侧填充字符串 str，直到长度为 len 时为止。",
            "如果 str 长度大于 len，则返回 str 左边 len 个字符。如果 str 长度小于 len，且 padstr 和 str 连接后大于 len，则返回连接后的右边 len 个字符。"
        ],
        "Examples": [
            "obclient> SELECT LPAD('Base',9,'Ocean');\n+------------------------+\n| LPAD('Base',9,'Ocean') |\n+------------------------+\n| OceanBase              |\n+------------------------+\n1 row in set\n\nobclient> SELECT LPAD('Base',1,'Ocean');\n+------------------------+\n| LPAD('Base',1,'Ocean') |\n+------------------------+\n| B                      |\n+------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT LPAD('Base',9,'Ocean');\n+------------------------+\n| LPAD('Base',9,'Ocean') |\n+------------------------+\n| OceanBase              |\n+------------------------+\n1 row in set\n\nobclient> SELECT LPAD('Base',1,'Ocean');\n+------------------------+\n| LPAD('Base',1,'Ocean') |\n+------------------------+\n| B                      |\n+------------------------+\n1 row in set\n"
        ]
    },
    "LTRIM": {
        "Title": [
            "LTRIM"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823475"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "LTRIM(str)\n",
        "Description": [],
        "Illustration": [
            "删除字符串左侧的空格。"
        ],
        "Examples": [
            "obclient> SELECT LTRIM('    obclient    ') AS ltrim;\n+--------------+\n| ltrim        |\n+--------------+\n| obclient     |\n+--------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT LTRIM('    obclient    ') AS ltrim;\n+--------------+\n| ltrim        |\n+--------------+\n| obclient     |\n+--------------+\n1 row in set\n"
        ]
    },
    "MAKEDATE": {
        "Title": [
            "MAKEDATE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823416"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "MAKEDATE(year,dayofyear)\n",
        "Description": [],
        "Illustration": [
            "返回指定 year 年份第 dayofyear 天的日期值。dayofyear 取值必须大于 0，否则返回 NULL。",
            "如果 dayofyear 大于 366，则会将多余的值添加到 year 指定的年份，如果相加后 year 大于 9999，则该函数返回 NULL。"
        ],
        "Examples": [
            "obclient> SELECT MAKEDATE(2011,31), MAKEDATE(2011,32);\n+-------------------+-------------------+\n| MAKEDATE(2011,31) | MAKEDATE(2011,32) |\n+-------------------+-------------------+\n| 2011-01-31        | 2011-02-01        |\n+-------------------+-------------------+\n1 row in set\n\nobclient> SELECT MAKEDATE(2011,0);\n+------------------+\n| MAKEDATE(2011,0) |\n+------------------+\n| NULL             |\n+------------------+\n1 row in set\n\nobclient> SELECT MAKEDATE(2011,2917923);\n+------------------------+\n| MAKEDATE(2011,2917923) |\n+------------------------+\n| NULL                   |\n+------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT MAKEDATE(2011,31), MAKEDATE(2011,32);\n+-------------------+-------------------+\n| MAKEDATE(2011,31) | MAKEDATE(2011,32) |\n+-------------------+-------------------+\n| 2011-01-31        | 2011-02-01        |\n+-------------------+-------------------+\n1 row in set\n\nobclient> SELECT MAKEDATE(2011,0);\n+------------------+\n| MAKEDATE(2011,0) |\n+------------------+\n| NULL             |\n+------------------+\n1 row in set\n\nobclient> SELECT MAKEDATE(2011,2917923);\n+------------------------+\n| MAKEDATE(2011,2917923) |\n+------------------------+\n| NULL                   |\n+------------------------+\n1 row in set\n"
        ]
    },
    "MAKETIME": {
        "Title": [
            "MAKETIME"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823368"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "MAKETIME(hour,minute,second)\n",
        "Description": [],
        "Illustration": [
            "返回由 hour:minute:second 指定的时间值，其中 second 可以有小数部分。"
        ],
        "Examples": [
            "obclient> SELECT MAKETIME(12,15,30);\n+--------------------+\n| MAKETIME(12,15,30) |\n+--------------------+\n| 12:15:30.000000    |\n+--------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT MAKETIME(12,15,30);\n+--------------------+\n| MAKETIME(12,15,30) |\n+--------------------+\n| 12:15:30.000000    |\n+--------------------+\n1 row in set\n"
        ]
    },
    "MAKE_SET": {
        "Title": [
            "MAKE_SET"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823436"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "MAKE_SET(bits,str1,str2,...)\n",
        "Description": [],
        "Illustration": [
            "返回将 bits 指定位为 1 的字符串的集合，以逗号（,）分隔。str1 对应 2^0^ 位，str2 对应 2^1^ 位，以此类推。如果对应位的 strn 不存在，则返回 NULL。",
            "例如，将 bits 指定为 5，换算为二进制为 0101，则返回 str1 与 str3。"
        ],
        "Examples": [
            "obclient> SELECT MAKE_SET(1,'a','b','c');\n+-------------------------+\n| MAKE_SET(1,'a','b','c') |\n+-------------------------+\n| a                       |\n+-------------------------+\n1 row in set\n\nobclient> SELECT MAKE_SET(1 | 4,'hello','ocean','base');\n+----------------------------------------+\n| MAKE_SET(1 | 4,'hello','ocean','base') |\n+----------------------------------------+\n| hello,base                             |\n+----------------------------------------+\n1 row in set\n\nobclient> SELECT MAKE_SET(1 | 4,'hello','ocean',NULL,'base');\n+---------------------------------------------+\n| MAKE_SET(1 | 4,'hello','ocean',NULL,'base') |\n+---------------------------------------------+\n| hello                                       |\n+---------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT MAKE_SET(1,'a','b','c');\n+-------------------------+\n| MAKE_SET(1,'a','b','c') |\n+-------------------------+\n| a                       |\n+-------------------------+\n1 row in set\n\nobclient> SELECT MAKE_SET(1 | 4,'hello','ocean','base');\n+----------------------------------------+\n| MAKE_SET(1 | 4,'hello','ocean','base') |\n+----------------------------------------+\n| hello,base                             |\n+----------------------------------------+\n1 row in set\n\nobclient> SELECT MAKE_SET(1 | 4,'hello','ocean',NULL,'base');\n+---------------------------------------------+\n| MAKE_SET(1 | 4,'hello','ocean',NULL,'base') |\n+---------------------------------------------+\n| hello                                       |\n+---------------------------------------------+\n1 row in set\n"
        ]
    },
    "MAX": {
        "Title": [
            "MAX"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823017"
        ],
        "Category": [
            "Aggregate Functions",
            "Analysis Functions"
        ],
        "Feature": "MAX([DISTINCT | ALL] expr)\n",
        "Description": [],
        "Illustration": [
            "返回指定数据中的最大值。",
            "MAX() 的取值可以是一个字符串参数，在这些情况下，它们返回最大字符串值。DISTINCT 关键字表示只计算不同值，缺省为 ALL。"
        ],
        "Examples": [
            "obclient> SELECT MAX(num) FROM a;\n+-----------------+\n| MAX(num)        |\n+-----------------+\n|              30 |\n+-----------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "假设表 a 有三行数据：id=1,num=10、id=2,num=20 与 id=3,num=30，选取其中 num 的最大值。",
            "obclient> SELECT MAX(num) FROM a;\n+-----------------+\n| MAX(num)        |\n+-----------------+\n|              30 |\n+-----------------+\n1 row in set\n"
        ]
    },
    "MD5": {
        "Title": [
            "MD5"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822991"
        ],
        "Category": [
            "Encryption Functions"
        ],
        "Feature": "MD5(str)\n",
        "Description": [],
        "Illustration": [
            "返回字符串的 MD5 128 位校验和。",
            "返回值为 32 位十六进制数字组成的字符串，如果 str 为 NULL 则返回 NULL。"
        ],
        "Examples": [
            "obclient> SELECT MD5(1);\n+----------------------------------+\n| MD5(1)                           |\n+----------------------------------+\n| c4ca4238a0b923820dcc509a6f75849b |\n+----------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT MD5(1);\n+----------------------------------+\n| MD5(1)                           |\n+----------------------------------+\n| c4ca4238a0b923820dcc509a6f75849b |\n+----------------------------------+\n1 row in set\n"
        ]
    },
    "MEMBER OF": {
        "Title": [
            "MEMBER OF"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823307"
        ],
        "Category": [
            "JSON Functions"
        ],
        "Feature": "value MEMBER OF(json_array)\n",
        "Description": [
            "如果被检索的元素和 JSON 数组中的任意一个元素相同，则该函数返回 1，否则返回 0。"
        ],
        "Illustration": [
            "如果 value 是 json_array 的元素，则返回 1，否则返回 0。",
            "value 必须是标量或 JSON 文档；如果它是标量，则运算符会将其视为 JSON 数组的元素。"
        ],
        "Examples": [
            "obclient> SELECT 45 MEMBER OF('[123, \"abc\", 45, \"ab\", 10]');\n+--------------------------------------------+\n| 45 MEMBER OF('[123, \"abc\", 45, \"ab\", 10]') |\n+--------------------------------------------+\n|                                          1 |\n+--------------------------------------------+\n1 row in set\n\nobclient> SELECT 'cd' MEMBER OF('[23, \"abc\", 17, \"cd\", 10]');\n+---------------------------------------------+\n| 'cd' MEMBER OF('[23, \"abc\", 17, \"cd\", 10]') |\n+---------------------------------------------+\n|                                           1 |\n+---------------------------------------------+\n1 row in set\n\nobclient> SELECT 5 MEMBER OF('[123, \"abc\", 45, \"ab\", 10]');\n+-------------------------------------------+\n| 5 MEMBER OF('[123, \"abc\", 45, \"ab\", 10]') |\n+-------------------------------------------+\n|                                         0 |\n+-------------------------------------------+\n1 row in set\n\nobclient> SELECT\n       45 MEMBER OF('[23, \"abc\", \"45\", \"ab\", 10]'),\n      \"45\" MEMBER OF('[23, \"abc\", 45, \"ab\", 10]')\\G\n*************************** 1. row ***************************\n45 MEMBER OF('[23, \"abc\", \"45\", \"ab\", 10]'): 0\n\"45\" MEMBER OF('[23, \"abc\", 45, \"ab\", 10]'): 0\n1 row in set\n\nobclient> SELECT CAST('[4,5]' AS JSON) MEMBER OF('[[3,2],[4,5]]');\n+--------------------------------------------------+\n| CAST('[4,5]' AS JSON) MEMBER OF('[[3,2],[4,5]]') |\n+--------------------------------------------------+\n|                                                1 |\n+--------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_ARRAY(4,5) MEMBER OF('[[3,2],[4,5]]');\n+--------------------------------------------+\n| JSON_ARRAY(4,5) MEMBER OF('[[3,2],[4,5]]') |\n+--------------------------------------------+\n|                                          1 |\n+--------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT 45 MEMBER OF('[123, \"abc\", 45, \"ab\", 10]');\n+--------------------------------------------+\n| 45 MEMBER OF('[123, \"abc\", 45, \"ab\", 10]') |\n+--------------------------------------------+\n|                                          1 |\n+--------------------------------------------+\n1 row in set\n\nobclient> SELECT 'cd' MEMBER OF('[23, \"abc\", 17, \"cd\", 10]');\n+---------------------------------------------+\n| 'cd' MEMBER OF('[23, \"abc\", 17, \"cd\", 10]') |\n+---------------------------------------------+\n|                                           1 |\n+---------------------------------------------+\n1 row in set\n\nobclient> SELECT 5 MEMBER OF('[123, \"abc\", 45, \"ab\", 10]');\n+-------------------------------------------+\n| 5 MEMBER OF('[123, \"abc\", 45, \"ab\", 10]') |\n+-------------------------------------------+\n|                                         0 |\n+-------------------------------------------+\n1 row in set\n\nobclient> SELECT\n       45 MEMBER OF('[23, \"abc\", \"45\", \"ab\", 10]'),\n      \"45\" MEMBER OF('[23, \"abc\", 45, \"ab\", 10]')\\G\n*************************** 1. row ***************************\n45 MEMBER OF('[23, \"abc\", \"45\", \"ab\", 10]'): 0\n\"45\" MEMBER OF('[23, \"abc\", 45, \"ab\", 10]'): 0\n1 row in set\n\nobclient> SELECT CAST('[4,5]' AS JSON) MEMBER OF('[[3,2],[4,5]]');\n+--------------------------------------------------+\n| CAST('[4,5]' AS JSON) MEMBER OF('[[3,2],[4,5]]') |\n+--------------------------------------------------+\n|                                                1 |\n+--------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_ARRAY(4,5) MEMBER OF('[[3,2],[4,5]]');\n+--------------------------------------------+\n| JSON_ARRAY(4,5) MEMBER OF('[[3,2],[4,5]]') |\n+--------------------------------------------+\n|                                          1 |\n+--------------------------------------------+\n1 row in set\n"
        ]
    },
    "MICROSECOND": {
        "Title": [
            "MICROSECOND"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823398"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "MICROSECOND(expr)\n",
        "Description": [],
        "Illustration": [
            "返回时间或日期时间表达式 expr 的微秒数。"
        ],
        "Examples": [
            "obclient> SELECT MICROSECOND('12:00:00.999999');\n+--------------------------------+\n| MICROSECOND('12:00:00.999999') |\n+--------------------------------+\n|                         999999 |\n+--------------------------------+\n1 row in set\n\nobclient> SELECT MICROSECOND('2021-07-15 18:20:17.000010');\n+-------------------------------------------+\n| MICROSECOND('2021-07-15 18:20:17.000010') |\n+-------------------------------------------+\n|                                        10 |\n+-------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT MICROSECOND('12:00:00.999999');\n+--------------------------------+\n| MICROSECOND('12:00:00.999999') |\n+--------------------------------+\n|                         999999 |\n+--------------------------------+\n1 row in set\n\nobclient> SELECT MICROSECOND('2021-07-15 18:20:17.000010');\n+-------------------------------------------+\n| MICROSECOND('2021-07-15 18:20:17.000010') |\n+-------------------------------------------+\n|                                        10 |\n+-------------------------------------------+\n1 row in set\n"
        ]
    },
    "MID": {
        "Title": [
            "MID"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823473"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "MID(str,pos,len)\n",
        "Description": [],
        "Illustration": [
            "返回 str 的子字符串，起始位置为 pos，长度为 len。参数中包含 NULL 时，返回 NULL。",
            "不指定 len 时，返回的子字符串从 pos 位置开始到 str 结尾。",
            "pos 值为负数时，从 str 尾部向头部倒序确定起始位置。",
            "len 小于等于 0，或 pos 指定的起始位置非法时，返回空字符串。",
            "该函数是 SUBSTRING(str,pos,len) 的别名。"
        ],
        "Examples": [
            "obclient> SELECT MID('OceanBase',6);\n+--------------------+\n| MID('OceanBase',6) |\n+--------------------+\n| Base               |\n+--------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT MID('OceanBase',6);\n+--------------------+\n| MID('OceanBase',6) |\n+--------------------+\n| Base               |\n+--------------------+\n1 row in set\n"
        ]
    },
    "MIN": {
        "Title": [
            "MIN"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823024"
        ],
        "Category": [
            "Aggregate Functions",
            "Analysis Functions"
        ],
        "Feature": "MIN([DISTINCT | ALL] expr)\n",
        "Description": [],
        "Illustration": [
            "返回指定数据中的最小值。",
            "MIN() 的取值可以是字符串参数，结果返回最小字符串值。DISTINCT 关键字表示只计算不同值，缺省为 ALL。"
        ],
        "Examples": [
            "obclient> SELECT MIN(num) FROM a;\n+----------------+\n| MIN(num)       |\n+----------------+\n|             10 |\n+----------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "假设表 a 有三行数据：id=1,num=10、id=2,num=20 与 id=3,num=30，选取其中 num 的最小值：",
            "obclient> SELECT MIN(num) FROM a;\n+----------------+\n| MIN(num)       |\n+----------------+\n|             10 |\n+----------------+\n1 row in set\n"
        ]
    },
    "MINUTE": {
        "Title": [
            "MINUTE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823384"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "MINUTE(time)\n",
        "Description": [],
        "Illustration": [
            "返回时间 time 中的分钟数。"
        ],
        "Examples": [
            "obclient> SELECT MINUTE('18:20:17');\n+--------------------+\n| MINUTE('18:20:17') |\n+--------------------+\n|                 20 |\n+--------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT MINUTE('18:20:17');\n+--------------------+\n| MINUTE('18:20:17') |\n+--------------------+\n|                 20 |\n+--------------------+\n1 row in set\n"
        ]
    },
    "MOD": {
        "Title": [
            "MOD"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823359"
        ],
        "Category": [
            "Mathematical Functions"
        ],
        "Feature": "MOD(N,M)\n",
        "Description": [],
        "Illustration": [
            "取余函数。MOD(N,M)、N % M 与 N MOD M 三种形式是等效的。",
            "MOD() 对于带有小数部分的数值也起作用，它返回除法运算后的精确余数。",
            "N 或 M 中任何一个参数为 NULL，返回值都为 NULL。M 为 0 时，也返回 NULL。"
        ],
        "Examples": [
            "obclient> SELECT MOD(29,19), 29 MOD 19, 29 % 19;\n+------------+-----------+---------+\n| MOD(29,19) | 29 MOD 19 | 29 % 19 |\n+------------+-----------+---------+\n|         10 |        10 |      10 |\n+------------+-----------+---------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT MOD(29,19), 29 MOD 19, 29 % 19;\n+------------+-----------+---------+\n| MOD(29,19) | 29 MOD 19 | 29 % 19 |\n+------------+-----------+---------+\n|         10 |        10 |      10 |\n+------------+-----------+---------+\n1 row in set\n"
        ]
    },
    "MONTH": {
        "Title": [
            "MONTH"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823397"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "MONTH(date)\n",
        "Description": [],
        "Illustration": [
            "返回 date 的月份信息。"
        ],
        "Examples": [
            "obclient> SELECT MONTH('2008-02-03');\n+---------------------+\n| MONTH('2008-02-03') |\n+---------------------+\n|                   2 |\n+---------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT MONTH('2008-02-03');\n+---------------------+\n| MONTH('2008-02-03') |\n+---------------------+\n|                   2 |\n+---------------------+\n1 row in set\n"
        ]
    },
    "MONTHNAME": {
        "Title": [
            "MONTHNAME"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823424"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "MONTHNAME(date)\n",
        "Description": [],
        "Illustration": [
            "返回指定日期 date 的月份全称。"
        ],
        "Examples": [
            "obclient> SELECT MONTHNAME('2008-02-03');\n+-------------------------+\n| MONTHNAME('2008-02-03') |\n+-------------------------+\n| February                |\n+-------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT MONTHNAME('2008-02-03');\n+-------------------------+\n| MONTHNAME('2008-02-03') |\n+-------------------------+\n| February                |\n+-------------------------+\n1 row in set\n"
        ]
    },
    "NAME_CONST": {
        "Title": [
            "NAME_CONST"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822947"
        ],
        "Category": [
            "Miscellaneous Functions"
        ],
        "Feature": "NAME_CONST(name,value)\n",
        "Description": [],
        "Illustration": [
            "该函数返回值定的值。参数 value应该是常量。",
            "NAME_CONST() 使所生成结果集的列具有指定的名称。"
        ],
        "Examples": [
            "obclient> SELECT NAME_CONST('my_id', 101);\n+-------+\n| my_id |\n+-------+\n|   101 |\n+-------+\n1 row in set\n",
            "SELECT 101 AS my_id;\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT NAME_CONST('my_id', 101);\n+-------+\n| my_id |\n+-------+\n|   101 |\n+-------+\n1 row in set\n",
            "您也可以通过设置简单的别名，获得与上述示例完全相同的结果，如下所示：",
            "SELECT 101 AS my_id;\n"
        ]
    },
    "NEG": {
        "Title": [
            "NEG"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823347"
        ],
        "Category": [
            "Mathematical Functions"
        ],
        "Feature": "NEG(expr)\n",
        "Description": [],
        "Illustration": [
            "求补函数，对操作数执行求补运算，即用零减去操作数，然后结果返回操作数。",
            "支持比较运算，结果为 BOOL 值，被转化为数字类型处理，产生的结果为 1(TRUE)、0 (FALSE)，再对结果求补。"
        ],
        "Examples": [
            "obclient> SELECT NEG(1), NEG(1+1), NEG(2*3), NEG(1=1), NEG(5<1);\n+--------+----------+----------+----------+----------+\n| NEG(1) | NEG(1+1) | NEG(2*3) | NEG(1=1) | NEG(5<1) |\n+--------+----------+----------+----------+----------+\n|     -1 |       -2 |       -6 |       -1 |        0 |\n+--------+----------+----------+----------+----------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT NEG(1), NEG(1+1), NEG(2*3), NEG(1=1), NEG(5<1);\n+--------+----------+----------+----------+----------+\n| NEG(1) | NEG(1+1) | NEG(2*3) | NEG(1=1) | NEG(5<1) |\n+--------+----------+----------+----------+----------+\n|     -1 |       -2 |       -6 |       -1 |        0 |\n+--------+----------+----------+----------+----------+\n1 row in set\n"
        ]
    },
    "NORMAL": {
        "Title": [
            "NORMAL"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823351"
        ],
        "Category": [
            "Mathematical Functions"
        ],
        "Feature": "NORMAL(<mean> , <stddev> , <gen>)\n",
        "Description": [],
        "Illustration": [
            "该函数返回一个符合正态分布（Normal Distribution，又称高斯分布）的浮点数。",
            "mean",
            " 表示均值，",
            "stddev",
            " 表示标准差。",
            "mean",
            " 和 ",
            "stddev",
            " 的取值必须是标量值，不随行迭代而变。例如，整形或浮点型常量、标量函数等。 \n    ",
            "\nmean 和 stddev 的取值可以是 1、2、ABS(-10)；PL 里还可以是 @v1、1+@v3 等。\nmean 和 stddev 的取值不可以是 RAND()、RANDOM()、RAND(2)、t1.c1、ABS(-t1.c1)、1+c2 等。\n",
            "mean",
            " 和 ",
            "stddev",
            " 的取值可以是 ",
            "1",
            "、",
            "2",
            "、",
            "ABS(-10)",
            "；PL 里还可以是 ",
            "@v1",
            "、",
            "1+@v3",
            " 等。",
            "mean",
            " 和 ",
            "stddev",
            " 的取值不可以是 ",
            "RAND()",
            "、",
            "RANDOM()",
            "、",
            "RAND(2)",
            "、",
            "t1.c1",
            "、",
            "ABS(-t1.c1)",
            "、",
            "1+c2",
            " 等。",
            "随机值生成算法基于 ",
            "std::normal_distribution",
            "，采用了 “Marsaglia Polar Method”算法，该算法会消耗较多 CPU。",
            "gen",
            " 是一个数值生成函数，通常使用 ",
            "RANDOM()",
            " 函数生成。如果传入值是一个常量，则 ",
            "NORMAL()",
            " 函数返回值也为一个定值。"
        ],
        "Examples": [
            "obclient> SELECT v, COUNT(*) FROM (SELECT ROUND(NORMAL(3, 0.1, RANDOM()), 1) v FROM TABLE(GENERATOR(1000000))) x GROUP BY v ORDER BY v;\n+------+----------+\n| v    | COUNT(*) |\n+------+----------+\n|  2.5 |        4 |\n|  2.6 |      238 |\n|  2.7 |     5979 |\n|  2.8 |    60889 |\n|  2.9 |   241991 |\n|  3.0 |   382951 |\n|  3.1 |   241306 |\n|  3.2 |    60533 |\n|  3.3 |     5861 |\n|  3.4 |      243 |\n|  3.5 |        5 |\n+------+----------+\n11 rows in set\n",
            "obclient> SELECT COUNT(NORMAL(0, 1, RANDOM())) v FROM TABLE(GENERATOR(1000000));\n+---------+\n| V       |\n+---------+\n| 1000000 |\n+---------+\n1 row in set (1.49 sec)\n"
        ],
        "Detailed Examples": [
            "如下示例为对 100 万个符合正态分布的随机数值进行取值（只保留小数点后一位），并统计数量。",
            "obclient> SELECT v, COUNT(*) FROM (SELECT ROUND(NORMAL(3, 0.1, RANDOM()), 1) v FROM TABLE(GENERATOR(1000000))) x GROUP BY v ORDER BY v;\n+------+----------+\n| v    | COUNT(*) |\n+------+----------+\n|  2.5 |        4 |\n|  2.6 |      238 |\n|  2.7 |     5979 |\n|  2.8 |    60889 |\n|  2.9 |   241991 |\n|  3.0 |   382951 |\n|  3.1 |   241306 |\n|  3.2 |    60533 |\n|  3.3 |     5861 |\n|  3.4 |      243 |\n|  3.5 |        5 |\n+------+----------+\n11 rows in set\n",
            "如下示例为生成 100 万个符合正态分布的随机数值，耗时 1.5 秒。",
            "obclient> SELECT COUNT(NORMAL(0, 1, RANDOM())) v FROM TABLE(GENERATOR(1000000));\n+---------+\n| V       |\n+---------+\n| 1000000 |\n+---------+\n1 row in set (1.49 sec)\n"
        ]
    },
    "NOW": {
        "Title": [
            "NOW"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823396"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "NOW([scale])\n",
        "Description": [],
        "Illustration": [
            "返回当前日期时间，考虑时区设置。该函数为 CURRENT_TIMESTAMP() 的别名。",
            "scale 表示微秒部分精度，有效值为 0 到 6 的整数，默认值为 0。"
        ],
        "Examples": [
            "obclient> SELECT NOW(6);\n+----------------------------+\n| NOW(6)                     |\n+----------------------------+\n| 2021-07-20 16:30:54.816317 |\n+----------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT NOW(6);\n+----------------------------+\n| NOW(6)                     |\n+----------------------------+\n| 2021-07-20 16:30:54.816317 |\n+----------------------------+\n1 row in set\n"
        ]
    },
    "NTH_VALUE": {
        "Title": [
            "NTH_VALUE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823043"
        ],
        "Category": [
            "Analysis Functions"
        ],
        "Feature": "NTH_VALUE (measure_expr, n) [ FROM { FIRST | LAST } ] [ { RESPECT | IGNORE } NULLS ] OVER (analytic_clause)\n",
        "Description": [],
        "Illustration": [
            "返回表达式 expr 的第 n 个值，方向由 [ FROM { FIRST | LAST } ] 确定，默认为 FROM FIRST，含有是否忽略 NULL 值的标志。其窗口为统一的 analytic_clause。",
            "其中，n 必须为正数，如果 n 是 NULL，函数将返回错误；如果 n 大于窗口内所有的行数，此函数将返回 NULL。"
        ],
        "Examples": [
            "obclient> CREATE TABLE EXPLOYEES(LAST_NAME CHAR(10), SALARY DECIMAL, JOB_ID CHAR(32));\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('JIM', 2000, 'CLEANER');\nQuery OK, 1 row affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('MIKE', 12000, 'ENGINEERING');\nQuery OK, 1 row affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('LILY', 13000, 'ENGINEERING');\nQuery OK, 1 row affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('TOM', 11000, 'ENGINEERING');\nQuery OK, 1 row affected\n\nobclient> SELECT LAST_NAME, FIRST_VALUE(SALARY) OVER(PARTITION BY JOB_ID) FIRST_S, LAST_VALUE(SALARY) OVER(PARTITION BY JOB_ID) LAST_S, NTH_VALUE(SALARY,2) OVER(PARTITION BY JOB_ID) 2ND_S FROM EXPLOYEES;\n+-----------+---------+--------+-------+\n| LAST_NAME | FIRST_S | LAST_S | 2ND_S |\n+-----------+---------+--------+-------+\n| JIM       |    2000 |   2000 |  NULL |\n| MIKE      |   12000 |  11000 | 13000 |\n| LILY      |   12000 |  11000 | 13000 |\n| TOM       |   12000 |  11000 | 13000 |\n+-----------+---------+--------+-------+\n4 rows in set\n"
        ],
        "Detailed Examples": [
            "obclient> CREATE TABLE EXPLOYEES(LAST_NAME CHAR(10), SALARY DECIMAL, JOB_ID CHAR(32));\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('JIM', 2000, 'CLEANER');\nQuery OK, 1 row affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('MIKE', 12000, 'ENGINEERING');\nQuery OK, 1 row affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('LILY', 13000, 'ENGINEERING');\nQuery OK, 1 row affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('TOM', 11000, 'ENGINEERING');\nQuery OK, 1 row affected\n\nobclient> SELECT LAST_NAME, FIRST_VALUE(SALARY) OVER(PARTITION BY JOB_ID) FIRST_S, LAST_VALUE(SALARY) OVER(PARTITION BY JOB_ID) LAST_S, NTH_VALUE(SALARY,2) OVER(PARTITION BY JOB_ID) 2ND_S FROM EXPLOYEES;\n+-----------+---------+--------+-------+\n| LAST_NAME | FIRST_S | LAST_S | 2ND_S |\n+-----------+---------+--------+-------+\n| JIM       |    2000 |   2000 |  NULL |\n| MIKE      |   12000 |  11000 | 13000 |\n| LILY      |   12000 |  11000 | 13000 |\n| TOM       |   12000 |  11000 | 13000 |\n+-----------+---------+--------+-------+\n4 rows in set\n"
        ]
    },
    "NTILE": {
        "Title": [
            "NTILE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823046"
        ],
        "Category": [
            "Analysis Functions"
        ],
        "Feature": "NTILE(expr) OVER ([ query_partition_clause ] order_by_clause)\n",
        "Description": [],
        "Illustration": [
            "将分区中已经排序的行划分为大小尽可能相同的指定数量的分组，并返回给每行组号。expr 如果是 NULL，则返回 NULL。"
        ],
        "Examples": [
            "obclient> CREATE TABLE employees(LAST_NAME CHAR(10), SALARY DECIMAL, JOB_ID CHAR(32));\nINSERT INTO employees VALUES('JIM', 2000, 'CLEANER');\nINSERT INTO employees VALUES('MIKE', 12000, 'ENGINEERING');\nINSERT INTO employees VALUES('LILY', 13000, 'ENGINEERING');\nINSERT INTO employees VALUES('TOM', 11000, 'ENGINEERING');\nCOMMIT;\nQuery OK, 0 rows affected\n\nobclient> SELECT LAST_NAME, NTILE(10) OVER(PARTITION BY JOB_ID ORDER BY SALARY) NTL FROM employees;\n+-----------+------+\n| LAST_NAME | NTL  |\n+-----------+------+\n| JIM       |    1 |\n| TOM       |    1 |\n| MIKE      |    2 |\n| LILY      |    3 |\n+-----------+------+\n4 rows in set\n"
        ],
        "Detailed Examples": [
            "obclient> CREATE TABLE employees(LAST_NAME CHAR(10), SALARY DECIMAL, JOB_ID CHAR(32));\nINSERT INTO employees VALUES('JIM', 2000, 'CLEANER');\nINSERT INTO employees VALUES('MIKE', 12000, 'ENGINEERING');\nINSERT INTO employees VALUES('LILY', 13000, 'ENGINEERING');\nINSERT INTO employees VALUES('TOM', 11000, 'ENGINEERING');\nCOMMIT;\nQuery OK, 0 rows affected\n\nobclient> SELECT LAST_NAME, NTILE(10) OVER(PARTITION BY JOB_ID ORDER BY SALARY) NTL FROM employees;\n+-----------+------+\n| LAST_NAME | NTL  |\n+-----------+------+\n| JIM       |    1 |\n| TOM       |    1 |\n| MIKE      |    2 |\n| LILY      |    3 |\n+-----------+------+\n4 rows in set\n"
        ]
    },
    "NULLIF": {
        "Title": [
            "NULLIF"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823321"
        ],
        "Category": [
            "Flow Control Functions"
        ],
        "Feature": "NULLIF(expr1, expr2)\n",
        "Description": [],
        "Illustration": [
            "如果 expr1 = expr2 成立，那么返回值为 NULL，否则返回值为 expr1。这和 CASE WHEN",
            "expr1 = expr2 THEN NULL ELSE expr1 END 相同。注意，如果参数不相等，则两次求得的值为 expr1。"
        ],
        "Examples": [
            "obclient> SELECT NULLIF('ABC', 123), NULLIF('123',123), NULLIF(NULL, 'abc');\n+--------------------+-------------------+---------------------+\n| NULLIF('ABC', 123) | NULLIF('123',123) | NULLIF(NULL, 'abc') |\n+--------------------+-------------------+---------------------+\n| ABC                | NULL              | NULL                |\n+--------------------+-------------------+---------------------+\n1 row in set, 1 warning\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT NULLIF('ABC', 123), NULLIF('123',123), NULLIF(NULL, 'abc');\n+--------------------+-------------------+---------------------+\n| NULLIF('ABC', 123) | NULLIF('123',123) | NULLIF(NULL, 'abc') |\n+--------------------+-------------------+---------------------+\n| ABC                | NULL              | NULL                |\n+--------------------+-------------------+---------------------+\n1 row in set, 1 warning\n"
        ]
    },
    "NVL": {
        "Title": [
            "NVL"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822939"
        ],
        "Category": [
            "Miscellaneous Functions"
        ],
        "Feature": "NVL(str1,replace_with)\n",
        "Description": [],
        "Illustration": [
            "将 NULL 值替换为指定值，如果 str1 为 NULL，则返回 replace_with 指定的值。其中 str1 一般是一个列名。replace_with 可以是直接值（即硬编码）、对其他列的引用或者表达式。",
            "这种自动替换 NULL 值的能力可以提供更为完善的输出。"
        ],
        "Examples": [
            "obclient> SELECT NVL(NULL, 0), NVL(NULL, 'a');\n+--------------+----------------+\n| NVL(NULL, 0) | NVL(NULL, 'a') |\n+--------------+----------------+\n|            0 | a              |\n+--------------+----------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT NVL(NULL, 0), NVL(NULL, 'a');\n+--------------+----------------+\n| NVL(NULL, 0) | NVL(NULL, 'a') |\n+--------------+----------------+\n|            0 | a              |\n+--------------+----------------+\n1 row in set\n"
        ]
    },
    "OB_TRANSACTION_ID": {
        "Title": [
            "OB_TRANSACTION_ID"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822982"
        ],
        "Category": [
            "Information Functions"
        ],
        "Feature": "OB_TRANSACTION_ID()\n",
        "Description": [],
        "Illustration": [
            "当前会话处于活跃事务中，则返回所处的事务 ID 整数值，大于 0。",
            "当前会话如果未处于活跃事务中，返回 0。"
        ],
        "Examples": [
            "obclient [test]> BEGIN;\n",
            "obclient [test]> SELECT OB_TRANSACTION_ID();\n",
            "+---------------------+\n| OB_TRANSACTION_ID() |\n+---------------------+\n|            14565563 |\n+---------------------+\n1 row in set\n",
            "obclient [test]> COMMIT;\n",
            "obclient [test]> SELECT OB_TRANSACTION_ID();\n",
            "+---------------------+\n| OB_TRANSACTION_ID() |\n+---------------------+\n|                   0 |\n+---------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "查询当前会话处于活跃事务中的事务 ID。",
            "开启事务。",
            "obclient [test]> BEGIN;\n",
            "查询当前事务 ID。",
            "obclient [test]> SELECT OB_TRANSACTION_ID();\n",
            "返回结果如下：",
            "+---------------------+\n| OB_TRANSACTION_ID() |\n+---------------------+\n|            14565563 |\n+---------------------+\n1 row in set\n",
            "提交事务。",
            "obclient [test]> COMMIT;\n",
            "查询当前未处于活跃事务中的事务 ID。",
            "obclient [test]> SELECT OB_TRANSACTION_ID();\n",
            "返回结果如下：",
            "+---------------------+\n| OB_TRANSACTION_ID() |\n+---------------------+\n|                   0 |\n+---------------------+\n1 row in set\n"
        ]
    },
    "OB_VERSION": {
        "Title": [
            "OB_VERSION"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822981"
        ],
        "Category": [
            "Information Functions"
        ],
        "Feature": "OB_VERSION()\n",
        "Description": [],
        "Illustration": [
            "返回当前 OceanBase 数据库的版本信息，字符集为 utf8mb4。"
        ],
        "Examples": [
            "obclient> SELECT OB_VERSION();\n+--------------+\n| OB_VERSION() |\n+--------------+\n| 4.1.0.0      |\n+--------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT OB_VERSION();\n+--------------+\n| OB_VERSION() |\n+--------------+\n| 4.1.0.0      |\n+--------------+\n1 row in set\n"
        ]
    },
    "OCT": {
        "Title": [
            "OCT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823485"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "OCT(N)\n",
        "Description": [
            "返回 N 的八进制值，该函数等价于 CONV(N,10,8)。",
            "如果 N 为 NULL，则该函数返回 NULL。"
        ],
        "Illustration": [],
        "Examples": [
            "obclient> SELECT OCT(12);\n+---------+\n| OCT(12) |\n+---------+\n| 14      |\n+---------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT OCT(12);\n+---------+\n| OCT(12) |\n+---------+\n| 14      |\n+---------+\n1 row in set\n"
        ]
    },
    "OCTET_LENGTH": {
        "Title": [
            "OCTET_LENGTH"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823481"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "OCTET_LENGTH(str)\n",
        "Description": [],
        "Illustration": [
            "OCTET_LENGTH() 是 LENGTH() 的同义词。"
        ],
        "Examples": [
            "obclient> SELECT OCTET_LENGTH('中国'), OCTET_LENGTH('hello');\n+------------------------+-----------------------+\n| OCTET_LENGTH('中国')   | OCTET_LENGTH('hello') |\n+------------------------+-----------------------+\n|                      6 |                     5 |\n+------------------------+-----------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT OCTET_LENGTH('中国'), OCTET_LENGTH('hello');\n+------------------------+-----------------------+\n| OCTET_LENGTH('中国')   | OCTET_LENGTH('hello') |\n+------------------------+-----------------------+\n|                      6 |                     5 |\n+------------------------+-----------------------+\n1 row in set\n"
        ]
    },
    "ORA_DECODE": {
        "Title": [
            "ORA_DECODE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823322"
        ],
        "Category": [
            "Flow Control Functions"
        ],
        "Feature": "ORA_DECODE(condition, value1, return_val1, value2, return_val2, ... valuen, return_val, omit_val)\n",
        "Description": [],
        "Illustration": [
            "ORA_DECODE() 函数功能等同于 Oracle 数据库的 DECODE() 函数功能。",
            "该函数的含义如下：",
            "IF 条件=值1\nTHEN RETURN(返回值1)\nELSIF 条件=值2\nTHEN RETURN(返回值2)\n......\nELSIF 条件=值n\nTHEN RETURN(返回值n)\nELSE RETURN(缺省值)\nEND IF\n"
        ],
        "Examples": [
            "obclient> SELECT * FROM films ORDER BY ORA_DECODE(id,1,'lala',2,'mua');\n\n+------+--------------+-------------+--------+\n| id   | release_year | category_id | rating |\n+------+--------------+-------------+--------+\n|    3 |         2015 |           3 |   9.00 |\n|    4 |         2016 |           2 |   8.20 |\n|    5 |         2016 |           1 |   8.40 |\n|    6 |         2017 |           2 |   7.00 |\n|    1 |         2015 |           1 |   8.00 |\n|    2 |         2015 |           2 |   8.50 |\n+------+--------------+-------------+--------+\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT * FROM films ORDER BY ORA_DECODE(id,1,'lala',2,'mua');\n\n+------+--------------+-------------+--------+\n| id   | release_year | category_id | rating |\n+------+--------------+-------------+--------+\n|    3 |         2015 |           3 |   9.00 |\n|    4 |         2016 |           2 |   8.20 |\n|    5 |         2016 |           1 |   8.40 |\n|    6 |         2017 |           2 |   7.00 |\n|    1 |         2015 |           1 |   8.00 |\n|    2 |         2015 |           2 |   8.50 |\n+------+--------------+-------------+--------+\n"
        ]
    },
    "ORD": {
        "Title": [
            "ORD"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823449"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "ORD(str)\n",
        "Description": [],
        "Illustration": [
            "返回字符串最左侧字符的字符码。单字节编码如果最左侧字符是多字节编码字符，返回值计算规则如下：",
            "(1st byte code)\n+ (2nd byte code * 256)\n+ (3rd byte code * 256^2) ...\n",
            "如果最左边的字符不是多字节字符，则 ORD() 返回与 ASCII() 函数相同的值。"
        ],
        "Examples": [
            "obclient> SELECT ORD('中国');\n+---------------+\n| ORD('中国') |\n+---------------+\n|      14989485 |\n+---------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT ORD('中国');\n+---------------+\n| ORD('中国') |\n+---------------+\n|      14989485 |\n+---------------+\n1 row in set\n"
        ]
    },
    "PERCENT_RANK": {
        "Title": [
            "PERCENT_RANK"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823053"
        ],
        "Category": [
            "Analysis Functions"
        ],
        "Feature": "PERCENT_RANK( ) OVER ([ query_partition_clause ] order_by_clause)\n",
        "Description": [],
        "Illustration": [
            "计算每一行数据在某列上的排序，该列由 order_by_clause 中的列决定，并返回百分比结果。"
        ],
        "Examples": [
            "obclient> CREATE TABLE EXPLOYEES(LAST_NAME CHAR(10), SALARY DECIMAL, JOB_ID CHAR(32));\nobclient> INSERT INTO EXPLOYEES VALUES('JIM', 2000, 'CLEANER');\nobclient> INSERT INTO EXPLOYEES VALUES('MIKE', 12000, 'ENGINEERING');\nobclient> INSERT INTO EXPLOYEES VALUES('LILY', 13000, 'ENGINEERING');\nobclient> INSERT INTO EXPLOYEES VALUES('IRIS', 11000, 'ENGINEERING');\nobclient> INSERT INTO EXPLOYEES VALUES('TOM', 11000, 'ENGINEERING');\n\nobclient> SELECT LAST_NAME, RANK() OVER(PARTITION BY JOB_ID ORDER BY SALARY) RANK, DENSE_RANK() OVER(PARTITION BY JOB_ID ORDER BY SALARY) DENSE_RANK, PERCENT_RANK() OVER(PARTITION BY JOB_ID ORDER BY SALARY) PERCENT_RANK FROM EXPLOYEES;\n+-----------+------+------------+----------------------------------+\n| LAST_NAME | RANK | DENSE_RANK | PERCENT_RANK                     |\n+-----------+------+------------+----------------------------------+\n| JIM       |    1 |          1 | 0.000000000000000000000000000000 |\n| TOM       |    1 |          1 | 0.000000000000000000000000000000 |\n| IRIS      |    1 |          1 | 0.000000000000000000000000000000 |\n| MIKE      |    3 |          2 | 0.666666666666666666666666666667 |\n| LILY      |    4 |          3 | 1.000000000000000000000000000000 |\n+-----------+------+------------+----------------------------------+\n5 rows in set\n"
        ],
        "Detailed Examples": [
            "obclient> CREATE TABLE EXPLOYEES(LAST_NAME CHAR(10), SALARY DECIMAL, JOB_ID CHAR(32));\nobclient> INSERT INTO EXPLOYEES VALUES('JIM', 2000, 'CLEANER');\nobclient> INSERT INTO EXPLOYEES VALUES('MIKE', 12000, 'ENGINEERING');\nobclient> INSERT INTO EXPLOYEES VALUES('LILY', 13000, 'ENGINEERING');\nobclient> INSERT INTO EXPLOYEES VALUES('IRIS', 11000, 'ENGINEERING');\nobclient> INSERT INTO EXPLOYEES VALUES('TOM', 11000, 'ENGINEERING');\n\nobclient> SELECT LAST_NAME, RANK() OVER(PARTITION BY JOB_ID ORDER BY SALARY) RANK, DENSE_RANK() OVER(PARTITION BY JOB_ID ORDER BY SALARY) DENSE_RANK, PERCENT_RANK() OVER(PARTITION BY JOB_ID ORDER BY SALARY) PERCENT_RANK FROM EXPLOYEES;\n+-----------+------+------------+----------------------------------+\n| LAST_NAME | RANK | DENSE_RANK | PERCENT_RANK                     |\n+-----------+------+------------+----------------------------------+\n| JIM       |    1 |          1 | 0.000000000000000000000000000000 |\n| TOM       |    1 |          1 | 0.000000000000000000000000000000 |\n| IRIS      |    1 |          1 | 0.000000000000000000000000000000 |\n| MIKE      |    3 |          2 | 0.666666666666666666666666666667 |\n| LILY      |    4 |          3 | 1.000000000000000000000000000000 |\n+-----------+------+------------+----------------------------------+\n5 rows in set\n"
        ]
    },
    "PERIOD_ADD": {
        "Title": [
            "PERIOD_ADD"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823400"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "PERIOD_ADD(P,N)\n",
        "Description": [],
        "Illustration": [
            "向时间段 P 添加 N 个月。其中 P 的格式为 YYMM 或 YYYYMM。",
            "返回值的格式为 YYYYMM。",
            "\n说明\n参数 P 不能是 DATE 类型，即非日期值。\n"
        ],
        "Examples": [
            "obclient> SELECT PERIOD_ADD(200801,2);\n+----------------------+\n| PERIOD_ADD(200801,2) |\n+----------------------+\n|               200803 |\n+----------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT PERIOD_ADD(200801,2);\n+----------------------+\n| PERIOD_ADD(200801,2) |\n+----------------------+\n|               200803 |\n+----------------------+\n1 row in set\n"
        ]
    },
    "PERIOD_DIFF": {
        "Title": [
            "PERIOD_DIFF"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823377"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "PERIOD_DIFF(p1, p2)\n",
        "Description": [],
        "Illustration": [
            "以月份为单位返回两个日期之间的间隔。日期只能包含年月信息，格式只能为 YYYYMM 或 YYMM。"
        ],
        "Examples": [
            "obclient> SELECT PERIOD_DIFF(200802, 200703);\n+----------------------------+\n| PERIOD_DIFF(200802,200703) |\n+----------------------------+\n|                         11 |\n+----------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT PERIOD_DIFF(200802, 200703);\n+----------------------------+\n| PERIOD_DIFF(200802,200703) |\n+----------------------------+\n|                         11 |\n+----------------------------+\n1 row in set\n"
        ]
    },
    "PI": {
        "Title": [
            "PI"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823357"
        ],
        "Category": [
            "Mathematical Functions"
        ],
        "Feature": "PI()\n",
        "Description": [],
        "Illustration": [
            "返回 π 的值（圆周率）。"
        ],
        "Examples": [
            "obclient> SELECT PI();\n+----------+\n| PI()     |\n+----------+\n| 3.141593 |\n+----------+\n1 row in set\n\nobclient> SELECT ROUND(2*PI(),2);\n+----------------+\n| ROUND(2*PI(),2)|\n+----------------+\n| 6.28           |\n+----------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT PI();\n+----------+\n| PI()     |\n+----------+\n| 3.141593 |\n+----------+\n1 row in set\n\nobclient> SELECT ROUND(2*PI(),2);\n+----------------+\n| ROUND(2*PI(),2)|\n+----------------+\n| 6.28           |\n+----------------+\n1 row in set\n"
        ]
    },
    "POSITION": {
        "Title": [
            "POSITION"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823443"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "POSITION(substr IN str)\n",
        "Description": [],
        "Illustration": [
            "回字符串 str 中子字符串 substr 的第一个出现位置。"
        ],
        "Examples": [
            "obclient> SELECT POSITION('bar' IN 'foobarbar');\n+--------------------------------+\n| POSITION('bar' IN 'foobarbar') |\n+--------------------------------+\n|                              4 |\n+--------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT POSITION('bar' IN 'foobarbar');\n+--------------------------------+\n| POSITION('bar' IN 'foobarbar') |\n+--------------------------------+\n|                              4 |\n+--------------------------------+\n1 row in set\n"
        ]
    },
    "POW": {
        "Title": [
            "POW"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823358"
        ],
        "Category": [
            "Mathematical Functions"
        ],
        "Feature": "POW(X,Y)\n",
        "Description": [],
        "Illustration": [
            "返回 X 的 Y 次方。",
            "X 与 Y 中任何一个参数为 NULL，返回值都为 NULL。"
        ],
        "Examples": [
            "obclient> SELECT POW(4,2), POW(4,-2), POW(1,NULL);\n+----------+-----------+-------------+\n| POW(4,2) | POW(4,-2) | POW(1,NULL) |\n+----------+-----------+-------------+\n|       16 |    0.0625 |        NULL |\n+----------+-----------+-------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT POW(4,2), POW(4,-2), POW(1,NULL);\n+----------+-----------+-------------+\n| POW(4,2) | POW(4,-2) | POW(1,NULL) |\n+----------+-----------+-------------+\n|       16 |    0.0625 |        NULL |\n+----------+-----------+-------------+\n1 row in set\n"
        ]
    },
    "POWER": {
        "Title": [
            "POWER"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823332"
        ],
        "Category": [
            "Mathematical Functions"
        ],
        "Feature": "POWER(X,Y)\n",
        "Description": [],
        "Illustration": [
            "返回 X 的 Y 次方，该函数是 POW() 的别名。",
            "X 与 Y 中任何一个参数为 NULL，返回值都为 NULL。"
        ],
        "Examples": [
            "obclient> SELECT POWER(2,8);\n+------------+\n| POWER(2,8) |\n+------------+\n|        256 |\n+------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT POWER(2,8);\n+------------+\n| POWER(2,8) |\n+------------+\n|        256 |\n+------------+\n1 row in set\n"
        ]
    },
    "QUARTER": {
        "Title": [
            "QUARTER"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823410"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "QUARTER(date)\n",
        "Description": [],
        "Illustration": [
            "返回指定日期的季度值，取值范围为 [1,4]。"
        ],
        "Examples": [
            "obclient> SELECT QUARTER(NOW()), NOW();\n+----------------+---------------------+\n| QUARTER(NOW()) | NOW()               |\n+----------------+---------------------+\n|              3 | 2021-07-12 19:45:01 |\n+----------------+---------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT QUARTER(NOW()), NOW();\n+----------------+---------------------+\n| QUARTER(NOW()) | NOW()               |\n+----------------+---------------------+\n|              3 | 2021-07-12 19:45:01 |\n+----------------+---------------------+\n1 row in set\n"
        ]
    },
    "QUOTE": {
        "Title": [
            "QUOTE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823444"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "quote(str)\n",
        "Description": [],
        "Illustration": [
            "引用一个字符串以产生一个结果可以作为 SQL 语句中正确地转义数据值。",
            "对于一般情况，返回的字符串会在原字符串前后加单引号（'）。",
            "对于每个反斜杠（\\）、单引号（'）、ASCII 编码的 NUL 值与 Control+Z，会在前面加反斜杠（\\）。",
            "如果参数为 NULL，则返回值为不包括单引号的 'NULL' 字符串。"
        ],
        "Examples": [
            "obclient> SELECT QUOTE('Don\\'t!');\n+------------------+\n| QUOTE('Don\\'t!') |\n+------------------+\n| 'Don\\'t!'        |\n+------------------+\n1 row in set\n\nobclient> SELECT QUOTE(NULL);\n+-------------+\n| QUOTE(NULL) |\n+-------------+\n| NULL        |\n+-------------+\n1 row in set\n\nobclient> SELECT LENGTH(QUOTE(NULL));\n+---------------------+\n| LENGth(QUOTE(NULL)) |\n+---------------------+\n|                   4 |\n+---------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT QUOTE('Don\\'t!');\n+------------------+\n| QUOTE('Don\\'t!') |\n+------------------+\n| 'Don\\'t!'        |\n+------------------+\n1 row in set\n\nobclient> SELECT QUOTE(NULL);\n+-------------+\n| QUOTE(NULL) |\n+-------------+\n| NULL        |\n+-------------+\n1 row in set\n\nobclient> SELECT LENGTH(QUOTE(NULL));\n+---------------------+\n| LENGth(QUOTE(NULL)) |\n+---------------------+\n|                   4 |\n+---------------------+\n1 row in set\n"
        ]
    },
    "RADIANS": {
        "Title": [
            "RADIANS"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823335"
        ],
        "Category": [
            "Mathematical Functions"
        ],
        "Feature": "RADIANS(X)\n",
        "Description": [],
        "Illustration": [
            "该函数将角度转换为弧度，返回 X 的弧度值。其中，π 弧度等于 180 度。"
        ],
        "Examples": [
            "obclient> SELECT RADIANS(-10), RADIANS(0), RADIANS(10), RADIANS(-0.5), RADIANS(0.5);\n+----------------------+------------+---------------------+-----------------------+----------------------+\n| RADIANS(-10)         | RADIANS(0) | RADIANS(10)         | RADIANS(-0.5)         | RADIANS(0.5)         |\n+----------------------+------------+---------------------+-----------------------+----------------------+\n| -0.17453292519943295 |          0 | 0.17453292519943295 | -0.008726646259971648 | 0.008726646259971648 |\n+----------------------+------------+---------------------+-----------------------+----------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT RADIANS(-10), RADIANS(0), RADIANS(10), RADIANS(-0.5), RADIANS(0.5);\n+----------------------+------------+---------------------+-----------------------+----------------------+\n| RADIANS(-10)         | RADIANS(0) | RADIANS(10)         | RADIANS(-0.5)         | RADIANS(0.5)         |\n+----------------------+------------+---------------------+-----------------------+----------------------+\n| -0.17453292519943295 |          0 | 0.17453292519943295 | -0.008726646259971648 | 0.008726646259971648 |\n+----------------------+------------+---------------------+-----------------------+----------------------+\n1 row in set\n"
        ]
    },
    "RAND": {
        "Title": [
            "RAND"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823341"
        ],
        "Category": [
            "Mathematical Functions"
        ],
        "Feature": "RAND([N])\n",
        "Description": [],
        "Illustration": [
            "RAND([N]) 函数接受 0 个或者 1 个参数（N 被称为随机数种子），返回一个范围是 [0,1.0) 的随机浮点数。如果想获得一个范围在 [i, j) 的随机整数，可以使用表达式 FLOOR(I + RAND() * (j - i))。",
            "如果参数 N 不指定，那么在执行之前会使用随机种子初始化，之后 RAND() 会根据这个初始化值来生成随机数，所以 RAND() 每次会生成不同的随机数序列。",
            "如果参数 N 指定，那么 N 会作为随机数种子来生成随机数。根据 N 是否是常量，分成以下两种情况：",
            "如果 N 是常量，那么 N 在执行之前会被当成随机种子初始化，之后 RAND(N) 会根据这个初始化值来生成随机数。相同的 N 值会生成相同的随机数序列。",
            "如果 N 是变量（比如 N 是一个列值），那么 N 会在每次执行的时候作为随机数种子来生成随机数。相同的 N 值会生成相同的随机数。",
            "除了出现在 SECLET 语句中，RAND([N]) 也可以出现在 WHERE、ORDER BY 和 GROUP BY 语句中，它的执行方式还是按照上述规则执行。例如，如果想随机的对一个表进行排序，可以使用 SELECT FROM T1 ORDER BY RAND()。如果想随机取样一个表的 100 行，可以使用 SELECT FROM T1 ORDER BY RAND() LIMIT 100。"
        ],
        "Examples": [
            "obclient> SELECT A, B, RAND() FROM T3;\n+------+------+---------------------+\n| A    | B    | RAND()              |\n+------+------+---------------------+\n|    1 |    1 |   0.641815407799385 |\n|    2 |    2 | 0.16825051248841966 |\n|    3 |    3 |  0.9158063697775886 |\n+------+------+---------------------+\n3 rows in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT A, B, RAND() FROM T3;\n+------+------+---------------------+\n| A    | B    | RAND()              |\n+------+------+---------------------+\n|    1 |    1 |   0.641815407799385 |\n|    2 |    2 | 0.16825051248841966 |\n|    3 |    3 |  0.9158063697775886 |\n+------+------+---------------------+\n3 rows in set\n"
        ]
    },
    "RANDOM": {
        "Title": [
            "RANDOM"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823329"
        ],
        "Category": [
            "Mathematical Functions"
        ],
        "Feature": "RANDOM(seed)\n",
        "Description": [],
        "Illustration": [
            "该函数生成一个 64 位的整数伪随机值。",
            "seed",
            " 为整数类型，不同 ",
            "seed",
            " 可以生成不同的随机数值序列。",
            "RANDOM()",
            " 使用了 MT19937 伪随机数生成算法，其随机空间非常大，生成 2",
            "19937",
            " - 1 个随机元素后才会重复生成相同序列。"
        ],
        "Examples": [
            "obclient> SELECT RANDOM(4) FROM TABLE(GENERATOR(3));\n+---------------------+\n| RANDOM(4)           |\n+---------------------+\n| 5267436225003336391 |\n| -851690886662571060 |\n| 1738617244330437274 |\n+---------------------+\n3 rows in set\n",
            "obclient> SELECT UNIFORM(1, 100, RANDOM()) FROM TABLE(GENERATOR(4));\n+---------------------------+\n| UNIFORM(1, 100, RANDOM()) |\n+---------------------------+\n|                        66 |\n|                        71 |\n|                        52 |\n|                        14 |\n+---------------------------+\n4 rows in set\n",
            "obclient> SELECT * FROM t1;\n+------+\n| c1   |\n+------+\n|    3 |\n|    4 |\n|    5 |\n|    1 |\n|    1 |\n+------+\n5 rows in set\n\nobclient> SELECT t1.c1, RAND(t1.c1), RANDOM(t1.c1) FROM TABLE(GENERATOR(1)), t1;\n+------+---------------------+----------------------+\n| c1   | RAND(t1.c1)         | RANDOM(t1.c1)        |\n+------+---------------------+----------------------+\n|    3 |  0.9057697559760601 |  1084041170817055659 |\n|    4 | 0.15595286540310166 |  5267436225003336391 |\n|    5 | 0.40613597483014313 |  3192483991702052534 |\n|    1 | 0.40540353712197724 | -6753783847308464280 |\n|    1 | 0.40540353712197724 | -6753783847308464280 |\n+------+---------------------+----------------------+\n5 rows in set\n"
        ],
        "Detailed Examples": [
            "如下示例为使用 RANDOM() 生成随机数。",
            "obclient> SELECT RANDOM(4) FROM TABLE(GENERATOR(3));\n+---------------------+\n| RANDOM(4)           |\n+---------------------+\n| 5267436225003336391 |\n| -851690886662571060 |\n| 1738617244330437274 |\n+---------------------+\n3 rows in set\n",
            "如下示例为将 RANDOM() 的结果作为分布函数的随机输入。",
            "obclient> SELECT UNIFORM(1, 100, RANDOM()) FROM TABLE(GENERATOR(4));\n+---------------------------+\n| UNIFORM(1, 100, RANDOM()) |\n+---------------------------+\n|                        66 |\n|                        71 |\n|                        52 |\n|                        14 |\n+---------------------------+\n4 rows in set\n",
            "如下示例为特殊场景，当 RANDOM() 参数输入为变量时，每次都会重新计算 seed。",
            "obclient> SELECT * FROM t1;\n+------+\n| c1   |\n+------+\n|    3 |\n|    4 |\n|    5 |\n|    1 |\n|    1 |\n+------+\n5 rows in set\n\nobclient> SELECT t1.c1, RAND(t1.c1), RANDOM(t1.c1) FROM TABLE(GENERATOR(1)), t1;\n+------+---------------------+----------------------+\n| c1   | RAND(t1.c1)         | RANDOM(t1.c1)        |\n+------+---------------------+----------------------+\n|    3 |  0.9057697559760601 |  1084041170817055659 |\n|    4 | 0.15595286540310166 |  5267436225003336391 |\n|    5 | 0.40613597483014313 |  3192483991702052534 |\n|    1 | 0.40540353712197724 | -6753783847308464280 |\n|    1 | 0.40540353712197724 | -6753783847308464280 |\n+------+---------------------+----------------------+\n5 rows in set\n"
        ]
    },
    "RANDOM_BYTES": {
        "Title": [
            "RANDOM_BYTES"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822995"
        ],
        "Category": [
            "Encryption Functions"
        ],
        "Feature": "RANDOM_BYTES(len)\n",
        "Description": [],
        "Illustration": [
            "返回 len 字节长度的随机二进制字符串，长度 len 的合法取值为 [1~1024]。"
        ],
        "Examples": [
            "obclient [test]> select RANDOM_BYTES(2);\n+-----------------+\n| RANDOM_BYTES(2) |\n+-----------------+\n| H              |\n+-----------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient [test]> select RANDOM_BYTES(2);\n+-----------------+\n| RANDOM_BYTES(2) |\n+-----------------+\n| H              |\n+-----------------+\n1 row in set\n"
        ]
    },
    "RANDSTR": {
        "Title": [
            "RANDSTR"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823333"
        ],
        "Category": [
            "Mathematical Functions"
        ],
        "Feature": "RANDSTR(N, gen)\n",
        "Description": [],
        "Illustration": [
            "该函数按照指定长度生成一个随机字符串，字符串中的字符包含 A-Z、a-z 和 0-9。",
            "N 为生成的随机字符串长度：",
            "\n当 N < 0 时，返回 NULL。\n当 N = 0 时，返回空字符串。\n当 N > 0 并且 N <= max_allowed_packet 时，返回长度为 N 的随机字符串。\n当 N > max_allowed_packet 时，返回 NULL。其中 max_allowed_packet 为系统变量，默认值为 16777216。\n",
            "当 ",
            "N < 0",
            " 时，返回 ",
            "NULL",
            "。",
            "当 ",
            "N = 0",
            " 时，返回空字符串。",
            "当 ",
            "N > 0",
            " 并且 ",
            "N <= max_allowed_packet",
            " 时，返回长度为 N 的随机字符串。",
            "当 ",
            "N > max_allowed_packet",
            " 时，返回 ",
            "NULL",
            "。其中 ",
            "max_allowed_packet",
            " 为系统变量，默认值为 16777216。",
            "gen 为分布函数，可取值如下：",
            "\n常量，则每次调用 RANDSTR() 都会生成相同的随机串。\n返回整数值的随机函数，例如 RANDOM()。\n分布函数，例如均匀分布、zipf 分布、高斯分布等。\n",
            "常量，则每次调用 ",
            "RANDSTR()",
            " 都会生成相同的随机串。",
            "返回整数值的随机函数，例如 ",
            "RANDOM()",
            "。",
            "分布函数，例如均匀分布、zipf 分布、高斯分布等。",
            "随机串的生成算法：采用 LCG 算法生成 N 个随机值，据此选出 N 个字符组成随机串。所以当 N 很大时会消耗较多 CPU。例如下面生成了一个长度为 300 M 的随机串，耗时 1.7 秒。",
            "obclient> SELECT LENGTH(RANDSTR(300000000, 1)) FROM DUAL;;\n+------------------------------+\n| LENGTH(RANDSTR(300000000,1)) |\n+------------------------------+\n|                    300000000 |\n+------------------------------+\n1 row in set (1.73 sec)\n"
        ],
        "Examples": [
            "obclient> SELECT RANDSTR(10, RANDOM()) FROM TABLE(GENERATOR(7));\n+-----------------------+\n| RANDSTR(10, RANDOM()) |\n+-----------------------+\n| TGfdBAZ1BP            |\n| VvMbD2bChR            |\n| VNSB6MpgQw            |\n| 3QWYQYQVJ4            |\n| CpyE58jM0o            |\n| vBvsJBGGmX            |\n| rg3Pkde0UJ            |\n+-----------------------+\n7 rows in set\n",
            "obclient> SELECT RANDSTR(1, ZIPF(1, 10, RANDOM())) s, COUNT(*) FROM TABLE(GENERATOR(1000)) GROUP BY s ORDER BY 1 ASC;\n+------+----------+\n| s    | COUNT(*) |\n+------+----------+\n| 0    |       27 |\n| 1    |       41 |\n| 4    |       32 |\n| 5    |       54 |\n| 8    |       64 |\n| 9    |       69 |\n| C    |       88 |\n| D    |      125 |\n| G    |      168 |\n| H    |      332 |\n+------+----------+\n10 rows in set\n",
            "obclient> SELECT RANDSTR(5, 40) FROM DUAL;\n+----------------+\n| RANDSTR(5, 40) |\n+----------------+\n| UU3g0          |\n+----------------+\n1 row in set\n\nobclient> SELECT RANDSTR(1, 40) FROM DUAL;\n+----------------+\n| RANDSTR(1, 40) |\n+----------------+\n| U              |\n+----------------+\n1 row in set\n\nobclient> SELECT RANDSTR(0, 40) FROM DUAL;\n+----------------+\n| RANDSTR(0, 40) |\n+----------------+\n|                |\n+----------------+\n1 row in set\n\nobclient> SELECT RANDSTR(-1, 40) FROM DUAL;\n+-----------------+\n| RANDSTR(-1, 40) |\n+-----------------+\n| NULL            |\n+-----------------+\n1 row in set\n",
            "obclient> SELECT RANDSTR(10, 1442) FROM TABLE(GENERATOR(7));\n+-------------------+\n| RANDSTR(10, 1442) |\n+-------------------+\n| 4dTm5bOtGc        |\n| 4dTm5bOtGc        |\n| 4dTm5bOtGc        |\n| 4dTm5bOtGc        |\n| 4dTm5bOtGc        |\n| 4dTm5bOtGc        |\n| 4dTm5bOtGc        |\n+-------------------+\n7 rows in set\n\nobclient> SELECT RANDSTR(10, 1442) FROM TABLE(GENERATOR(7));\n+-------------------+\n| RANDSTR(10, 1442) |\n+-------------------+\n| 4dTm5bOtGc        |\n| 4dTm5bOtGc        |\n| 4dTm5bOtGc        |\n| 4dTm5bOtGc        |\n| 4dTm5bOtGc        |\n| 4dTm5bOtGc        |\n| 4dTm5bOtGc        |\n+-------------------+\n7 rows in set\n"
        ],
        "Detailed Examples": [
            "如下示例为通过 RANDSTR() 函数生成长度为 10 的随机字符串。",
            "obclient> SELECT RANDSTR(10, RANDOM()) FROM TABLE(GENERATOR(7));\n+-----------------------+\n| RANDSTR(10, RANDOM()) |\n+-----------------------+\n| TGfdBAZ1BP            |\n| VvMbD2bChR            |\n| VNSB6MpgQw            |\n| 3QWYQYQVJ4            |\n| CpyE58jM0o            |\n| vBvsJBGGmX            |\n| rg3Pkde0UJ            |\n+-----------------------+\n7 rows in set\n",
            "RANDSTR() 通过 gen 参数可以控制生成的随机字符串的频率。如下示例中，生成 1000 个长度为 1 的字符串，它们的分布符合 zipf 分布规律。",
            "obclient> SELECT RANDSTR(1, ZIPF(1, 10, RANDOM())) s, COUNT(*) FROM TABLE(GENERATOR(1000)) GROUP BY s ORDER BY 1 ASC;\n+------+----------+\n| s    | COUNT(*) |\n+------+----------+\n| 0    |       27 |\n| 1    |       41 |\n| 4    |       32 |\n| 5    |       54 |\n| 8    |       64 |\n| 9    |       69 |\n| C    |       88 |\n| D    |      125 |\n| G    |      168 |\n| H    |      332 |\n+------+----------+\n10 rows in set\n",
            "RANDSTR() 函数通过控制 N 参数的大小，可以生成长度不同的字符串，如下例所示。",
            "obclient> SELECT RANDSTR(5, 40) FROM DUAL;\n+----------------+\n| RANDSTR(5, 40) |\n+----------------+\n| UU3g0          |\n+----------------+\n1 row in set\n\nobclient> SELECT RANDSTR(1, 40) FROM DUAL;\n+----------------+\n| RANDSTR(1, 40) |\n+----------------+\n| U              |\n+----------------+\n1 row in set\n\nobclient> SELECT RANDSTR(0, 40) FROM DUAL;\n+----------------+\n| RANDSTR(0, 40) |\n+----------------+\n|                |\n+----------------+\n1 row in set\n\nobclient> SELECT RANDSTR(-1, 40) FROM DUAL;\n+-----------------+\n| RANDSTR(-1, 40) |\n+-----------------+\n| NULL            |\n+-----------------+\n1 row in set\n",
            "当 gen 为常量时，反复执行 RANDSTR() 函数，会生成相同的随机字符串，如下例所示。",
            "obclient> SELECT RANDSTR(10, 1442) FROM TABLE(GENERATOR(7));\n+-------------------+\n| RANDSTR(10, 1442) |\n+-------------------+\n| 4dTm5bOtGc        |\n| 4dTm5bOtGc        |\n| 4dTm5bOtGc        |\n| 4dTm5bOtGc        |\n| 4dTm5bOtGc        |\n| 4dTm5bOtGc        |\n| 4dTm5bOtGc        |\n+-------------------+\n7 rows in set\n\nobclient> SELECT RANDSTR(10, 1442) FROM TABLE(GENERATOR(7));\n+-------------------+\n| RANDSTR(10, 1442) |\n+-------------------+\n| 4dTm5bOtGc        |\n| 4dTm5bOtGc        |\n| 4dTm5bOtGc        |\n| 4dTm5bOtGc        |\n| 4dTm5bOtGc        |\n| 4dTm5bOtGc        |\n| 4dTm5bOtGc        |\n+-------------------+\n7 rows in set\n"
        ]
    },
    "RANK": {
        "Title": [
            "RANK"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823040"
        ],
        "Category": [
            "Analysis Functions"
        ],
        "Feature": "RANK() OVER ([ query_partition_clause ] order_by_clause\n",
        "Description": [],
        "Illustration": [
            "计算每一行数据在某列的秩，该列由 order_by_clause 中的列决定。",
            "对于秩相同的行，返回值会产生跳跃。"
        ],
        "Examples": [
            "obclient> CREATE TABLE EXPLOYEES(LAST_NAME CHAR(10), SALARY DECIMAL, JOB_ID CHAR(32));\nINSERT INTO EXPLOYEES VALUES('JIM', 2000, 'CLEANER');\nINSERT INTO EXPLOYEES VALUES('MIKE', 12000, 'ENGINEERING');\nINSERT INTO EXPLOYEES VALUES('LILY', 13000, 'ENGINEERING');\nINSERT INTO EXPLOYEES VALUES('IRIS', 11000, 'ENGINEERING');\nINSERT INTO EXPLOYEES VALUES('TOM', 11000, 'ENGINEERING');\nCOMMIT;\nQuery OK, 1 row affected\n\nobclient> SELECT LAST_NAME, RANK() OVER(PARTITION BY JOB_ID ORDER BY SALARY) RANK, DENSE_RANK() OVER(PARTITION BY JOB_ID ORDER BY SALARY) DENSE_RANK, PERCENT_RANK() OVER(PARTITION BY JOB_ID ORDER BY SALARY) PERCENT_RANK FROM EXPLOYEES;\n+-----------+------+------------+----------------------------------+\n| LAST_NAME | RANK | DENSE_RANK | PERCENT_RANK                     |\n+-----------+------+------------+----------------------------------+\n| JIM       |    1 |          1 | 0.000000000000000000000000000000 |\n| TOM       |    1 |          1 | 0.000000000000000000000000000000 |\n| IRIS      |    1 |          1 | 0.000000000000000000000000000000 |\n| MIKE      |    3 |          2 | 0.666666666666666666666666666667 |\n| LILY      |    4 |          3 | 1.000000000000000000000000000000 |\n+-----------+------+------------+----------------------------------+\n5 rows in set\n"
        ],
        "Detailed Examples": [
            "obclient> CREATE TABLE EXPLOYEES(LAST_NAME CHAR(10), SALARY DECIMAL, JOB_ID CHAR(32));\nINSERT INTO EXPLOYEES VALUES('JIM', 2000, 'CLEANER');\nINSERT INTO EXPLOYEES VALUES('MIKE', 12000, 'ENGINEERING');\nINSERT INTO EXPLOYEES VALUES('LILY', 13000, 'ENGINEERING');\nINSERT INTO EXPLOYEES VALUES('IRIS', 11000, 'ENGINEERING');\nINSERT INTO EXPLOYEES VALUES('TOM', 11000, 'ENGINEERING');\nCOMMIT;\nQuery OK, 1 row affected\n\nobclient> SELECT LAST_NAME, RANK() OVER(PARTITION BY JOB_ID ORDER BY SALARY) RANK, DENSE_RANK() OVER(PARTITION BY JOB_ID ORDER BY SALARY) DENSE_RANK, PERCENT_RANK() OVER(PARTITION BY JOB_ID ORDER BY SALARY) PERCENT_RANK FROM EXPLOYEES;\n+-----------+------+------------+----------------------------------+\n| LAST_NAME | RANK | DENSE_RANK | PERCENT_RANK                     |\n+-----------+------+------------+----------------------------------+\n| JIM       |    1 |          1 | 0.000000000000000000000000000000 |\n| TOM       |    1 |          1 | 0.000000000000000000000000000000 |\n| IRIS      |    1 |          1 | 0.000000000000000000000000000000 |\n| MIKE      |    3 |          2 | 0.666666666666666666666666666667 |\n| LILY      |    4 |          3 | 1.000000000000000000000000000000 |\n+-----------+------+------------+----------------------------------+\n5 rows in set\n"
        ]
    },
    "REGEXP": {
        "Title": [
            "REGEXP"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823446"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "str [NOT] REGEXP | RLIKE pat\n",
        "Description": [],
        "Illustration": [
            "正则匹配。参数中包含 NULL 时，返回 NULL。"
        ],
        "Examples": [
            "obclient> SELECT\n     1234 REGEXP 1,\n     'hello' RLIKE 'h%'\n     \\G\n*************************** 1. row ***************************\n     1234 REGEXP 1: 1\n'hello' RLIKE 'h%': 0\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT\n     1234 REGEXP 1,\n     'hello' RLIKE 'h%'\n     \\G\n*************************** 1. row ***************************\n     1234 REGEXP 1: 1\n'hello' RLIKE 'h%': 0\n1 row in set\n"
        ]
    },
    "REGEXP_INSTR": {
        "Title": [
            "REGEXP_INSTR"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823457"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "REGEXP_INSTR(expr, pat [, pos [, occurrence [, return_option [, match_type ]]]])\n",
        "Description": [],
        "Illustration": [
            "返回表达式 expr 中满足表达式 pat 的子字符串的起始位置。如果不存在满足匹配规则的子字符串则返回 0，如果 expr 或 pat 为 NULL，则该函数也返回 NULL。返回值所表示的位置从 1 开始。",
            "pos 表示从表达式 expr 的第几个字符开始搜索，缺省为 1。",
            "occurrence 表示 expr 中第几次出现 pat 的位置，缺省为 1。",
            "return_option 表示返回值的类型，缺省为 0。",
            "\n取值为 0 时，表示 REGEXP_INSTR() 返回匹配到的第一个字符的位置。\n取值为 1 时，表示 REGEXP_INSTR() 返回匹配到的最后一个字符的位置。\n",
            "取值为 0 时，表示 REGEXP_INSTR() 返回匹配到的第一个字符的位置。",
            "取值为 1 时，表示 REGEXP_INSTR() 返回匹配到的最后一个字符的位置。",
            "match_type 表示匹配规则。有关匹配规则的详细信息，请参见 REGEXP_LIKE。"
        ],
        "Examples": [
            "obclient> SELECT REGEXP_INSTR('ocean base oceanbase', 'ocean');\n+-----------------------------------------------+\n| REGEXP_INSTR('ocean base oceanbase', 'ocean') |\n+-----------------------------------------------+\n|                                             1 |\n+-----------------------------------------------+\n1 row in set\n\nobclient> SELECT REGEXP_INSTR('ocean base oceanbase', 'ocean',2);\n+-------------------------------------------------+\n| REGEXP_INSTR('ocean base oceanbase', 'ocean',2) |\n+-------------------------------------------------+\n|                                               12 |\n+-------------------------------------------------+\n1 row in set\n\nobclient> SELECT REGEXP_INSTR('ocean base oceanbase', 'ocean',1,2);\n+---------------------------------------------------+\n| REGEXP_INSTR('ocean base oceanbase', 'ocean',1,2) |\n+---------------------------------------------------+\n|                                                12 |\n+---------------------------------------------------+\n1 row in set\n\nobclient> SELECT REGEXP_INSTR('ocean base oceanbase', 'ocean',1,2,1);\n+-----------------------------------------------------+\n| REGEXP_INSTR('ocean base oceanbase', 'ocean',1,2,1) |\n+-----------------------------------------------------+\n|                                                  17 |\n+-----------------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT REGEXP_INSTR('ocean base oceanbase', 'ocean');\n+-----------------------------------------------+\n| REGEXP_INSTR('ocean base oceanbase', 'ocean') |\n+-----------------------------------------------+\n|                                             1 |\n+-----------------------------------------------+\n1 row in set\n\nobclient> SELECT REGEXP_INSTR('ocean base oceanbase', 'ocean',2);\n+-------------------------------------------------+\n| REGEXP_INSTR('ocean base oceanbase', 'ocean',2) |\n+-------------------------------------------------+\n|                                               12 |\n+-------------------------------------------------+\n1 row in set\n\nobclient> SELECT REGEXP_INSTR('ocean base oceanbase', 'ocean',1,2);\n+---------------------------------------------------+\n| REGEXP_INSTR('ocean base oceanbase', 'ocean',1,2) |\n+---------------------------------------------------+\n|                                                12 |\n+---------------------------------------------------+\n1 row in set\n\nobclient> SELECT REGEXP_INSTR('ocean base oceanbase', 'ocean',1,2,1);\n+-----------------------------------------------------+\n| REGEXP_INSTR('ocean base oceanbase', 'ocean',1,2,1) |\n+-----------------------------------------------------+\n|                                                  17 |\n+-----------------------------------------------------+\n1 row in set\n"
        ]
    },
    "REGEXP_LIKE": {
        "Title": [
            "REGEXP_LIKE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823466"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "REGEXP_LIKE(expr, pat[, match_type])\n",
        "Description": [],
        "Illustration": [
            "如果字符串 expr 匹配到正则表达式 pat 中指定的值，则返回 1，否则返回 0。如果 expr 或 pat 为 NULL，则返回 NULL。",
            "match_type 具有以下取值，表示匹配模式：",
            "c 表示区分大小写。",
            "i 表示不区分大小写。",
            "m 表示识别字符串中的换行符。默认情况下，只匹配字符串表达式开始和结束处的换行符。",
            "n 表示句号 . 仅字符匹配换行符（\\n）。默认情况下，. 匹配任何非换行符（\\n）的单字符。",
            "u 表示仅匹配 Unix 行结尾。只有换行符（\\n）可以被 .、^ 与 $ 识别为行结尾。"
        ],
        "Examples": [
            "obclient> SELECT REGEXP_LIKE('OceanBase', 'OCEANBASE');\n+---------------------------------------+\n| REGEXP_LIKE('OceanBase', 'OCEANBASE') |\n+---------------------------------------+\n|                                     1 |\n+---------------------------------------+\n1 row in set\n\nobclient> SELECT REGEXP_LIKE('OceanBase', 'OCEANBASE','c');\n+-------------------------------------------+\n| REGEXP_LIKE('OceanBase', 'OCEANBASE','c') |\n+-------------------------------------------+\n|                                         0 |\n+-------------------------------------------+\n1 row in set\n\nobclient> SELECT REGEXP_LIKE('Ocean\\nBase', 'OCEAN.BASE');\n+------------------------------------------+\n| REGEXP_LIKE('Ocean\\nBase', 'OCEAN.BASE') |\n+------------------------------------------+\n|                                        0 |\n+------------------------------------------+\n1 row in set\n\nobclient> SELECT REGEXP_LIKE('Ocean\\nBase', 'OCEAN.BASE','n');\n+----------------------------------------------+\n| REGEXP_LIKE('Ocean\\nBase', 'OCEAN.BASE','n') |\n+----------------------------------------------+\n|                                            1 |\n+----------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT REGEXP_LIKE('OceanBase', 'OCEANBASE');\n+---------------------------------------+\n| REGEXP_LIKE('OceanBase', 'OCEANBASE') |\n+---------------------------------------+\n|                                     1 |\n+---------------------------------------+\n1 row in set\n\nobclient> SELECT REGEXP_LIKE('OceanBase', 'OCEANBASE','c');\n+-------------------------------------------+\n| REGEXP_LIKE('OceanBase', 'OCEANBASE','c') |\n+-------------------------------------------+\n|                                         0 |\n+-------------------------------------------+\n1 row in set\n\nobclient> SELECT REGEXP_LIKE('Ocean\\nBase', 'OCEAN.BASE');\n+------------------------------------------+\n| REGEXP_LIKE('Ocean\\nBase', 'OCEAN.BASE') |\n+------------------------------------------+\n|                                        0 |\n+------------------------------------------+\n1 row in set\n\nobclient> SELECT REGEXP_LIKE('Ocean\\nBase', 'OCEAN.BASE','n');\n+----------------------------------------------+\n| REGEXP_LIKE('Ocean\\nBase', 'OCEAN.BASE','n') |\n+----------------------------------------------+\n|                                            1 |\n+----------------------------------------------+\n1 row in set\n"
        ]
    },
    "REGEXP_REPLACE": {
        "Title": [
            "REGEXP_REPLACE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823455"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "REGEXP_REPLACE(expr, pat, repl[, pos[, occurrence[, match_type]]])\n",
        "Description": [],
        "Illustration": [
            "将字符串 expr 中匹配 pat 的子字符串替换为 repl 指定的字符串，并返回替换后的字符串。如果 expr、pat 或 repl 为 NULL，则该函数返回 NULL。",
            "pos 表示从表达式 expr 的第几个字符开始搜索，缺省为 1。",
            "occurrence 表示将第几次匹配替换为 repl，默认为 0，表示替换所有匹配的子字符串。",
            "match_type 表示匹配规则。有关匹配规则的详细信息，请参见 REGEXP_LIKE。"
        ],
        "Examples": [
            "obclient> SELECT REGEXP_REPLACE('OceanBase', 'a', '2');\n+---------------------------------------+\n| REGEXP_REPLACE('OceanBase', 'a', '2') |\n+---------------------------------------+\n| Oce2nB2se                             |\n+---------------------------------------+\n1 row in set\n\nobclient> SELECT REGEXP_REPLACE('OceanBase', 'a', '2',7);\n+-----------------------------------------+\n| REGEXP_REPLACE('OceanBase', 'a', '2',7) |\n+-----------------------------------------+\n| OceanB2se                               |\n+-----------------------------------------+\n1 row in set\n\nobclient> SELECT REGEXP_REPLACE('OceanBase', 'a', '2',1,2);\n+-------------------------------------------+\n| REGEXP_REPLACE('OceanBase', 'a', '2',1,2) |\n+-------------------------------------------+\n| OceanB2se                                 |\n+-------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT REGEXP_REPLACE('OceanBase', 'a', '2');\n+---------------------------------------+\n| REGEXP_REPLACE('OceanBase', 'a', '2') |\n+---------------------------------------+\n| Oce2nB2se                             |\n+---------------------------------------+\n1 row in set\n\nobclient> SELECT REGEXP_REPLACE('OceanBase', 'a', '2',7);\n+-----------------------------------------+\n| REGEXP_REPLACE('OceanBase', 'a', '2',7) |\n+-----------------------------------------+\n| OceanB2se                               |\n+-----------------------------------------+\n1 row in set\n\nobclient> SELECT REGEXP_REPLACE('OceanBase', 'a', '2',1,2);\n+-------------------------------------------+\n| REGEXP_REPLACE('OceanBase', 'a', '2',1,2) |\n+-------------------------------------------+\n| OceanB2se                                 |\n+-------------------------------------------+\n1 row in set\n"
        ]
    },
    "REGEXP_SUBSTR": {
        "Title": [
            "REGEXP_SUBSTR"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823438"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "REGEXP_SUBSTR(str,pattern,[position[,occurrence[,match_param[,subexpr]]]])\n",
        "Description": [],
        "Illustration": [
            "在 str 中搜索匹配正则表达式 pattern 的子串，如果子串不存在，则返回 NULL。该函数支持多字节字元。除 match_param 外，其他任意参数为 NULL，结果为 NULL。参数解释如下：",
            "str 表示待搜索的字符串，支持多字节字元。",
            "pattern 表示正则表达式，正则表达式规则兼容 MySQL 数据库。",
            "position 表示搜索的开始位置。必须是大于 0 的正整数，小于等于 0 报错，输入为 NULL 返回 NULL，默认值为 1，表示从第一个字符开始搜索。",
            "occurrence 表示返回第几次匹配的值。必须是大于等于 0 的正整数，小于等于 0 报错，输入为 NULL 返回 NULL，默认值是 1，表示返回第一次匹配的结果。",
            "match_param 表示匹配规则，字符串类型。有关匹配规则的详细信息，请参见 REGEXP_LIKE。",
            "subexpr 表示返回正则表达式中第几个组的值。大于等于 0 的整数，小于 0 则报错。默认值是 0，表示返回满足整个 pattern 的子串。"
        ],
        "Examples": [
            "obclient> SELECT REGEXP_SUBSTR('I have 2 apples and 100 bucks!', '[[:blank:]][[:alnum:]]*', 1, 1) FROM DUAL;\n+----------------------------------------------------------------------------------+\n| regexp_substr('I have 2 apples and 100 bucks!', '[[:blank:]][[:alnum:]]*', 1, 1) |\n+----------------------------------------------------------------------------------+\n|  have                                                                            |\n+----------------------------------------------------------------------------------+\n1 row in set\n\nobclient> SELECT REGEXP_SUBSTR('foothebar', 'foo(.*)(bar)', 1, 1, 'c', 1) FROM DUAL;\n+----------------------------------------------------------+\n| regexp_substr('foothebar', 'foo(.*)(bar)', 1, 1, 'c', 1) |\n+----------------------------------------------------------+\n| the                                                      |\n+----------------------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT REGEXP_SUBSTR('I have 2 apples and 100 bucks!', '[[:blank:]][[:alnum:]]*', 1, 1) FROM DUAL;\n+----------------------------------------------------------------------------------+\n| regexp_substr('I have 2 apples and 100 bucks!', '[[:blank:]][[:alnum:]]*', 1, 1) |\n+----------------------------------------------------------------------------------+\n|  have                                                                            |\n+----------------------------------------------------------------------------------+\n1 row in set\n\nobclient> SELECT REGEXP_SUBSTR('foothebar', 'foo(.*)(bar)', 1, 1, 'c', 1) FROM DUAL;\n+----------------------------------------------------------+\n| regexp_substr('foothebar', 'foo(.*)(bar)', 1, 1, 'c', 1) |\n+----------------------------------------------------------+\n| the                                                      |\n+----------------------------------------------------------+\n1 row in set\n"
        ]
    },
    "RELEASE_ALL_LOCKS()": {
        "Title": [
            "RELEASE_ALL_LOCKS()"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823005"
        ],
        "Category": [
            "Locking Functions"
        ],
        "Feature": "RELEASE_ALL_LOCKS()\n",
        "Description": [
            "该函数用于释放当前会话所持有的所有命名锁，并返回成功释放的锁的数量。"
        ],
        "Illustration": [
            "参数解释",
            "无参数。",
            "返回值",
            "返回成功释放的锁的数量。如果当前会话没有持有任何锁，那么返回值为 0。"
        ],
        "Examples": [
            "obclient [(none)]> SELECT RELEASE_ALL_LOCKS();\n",
            "+---------------------+\n| RELEASE_ALL_LOCKS() |\n+---------------------+\n|                   1 |\n+---------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "释放当前会话持有的所有命名锁。",
            "obclient [(none)]> SELECT RELEASE_ALL_LOCKS();\n",
            "返回结果如下：",
            "+---------------------+\n| RELEASE_ALL_LOCKS() |\n+---------------------+\n|                   1 |\n+---------------------+\n1 row in set\n",
            "返回结果为 1，表示当前会话持有的 1 个命名锁，并成功释放。"
        ]
    },
    "RELEASE_LOCK": {
        "Title": [
            "RELEASE_LOCK"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823002"
        ],
        "Category": [
            "Locking Functions"
        ],
        "Feature": "RELEASE_LOCK('str')\n",
        "Description": [
            "该函数用于释放当前会话之前使用 GET_LOCK() 函数获取命名锁（即名为 str 的锁）。"
        ],
        "Illustration": [
            "参数解释",
            "str: 指定要释放的锁的名称，字符串类型。",
            "返回值",
            "返回 1：表示当前会话持有该锁，并且该锁被成功释放。",
            "返回 0：表示当前会话不是该锁的持有者，该锁没有被当前会话释放。",
            "返回 ",
            "NULL",
            "：表示该锁不存在，即没有通过 ",
            "GET_LOCK()",
            " 获取锁，或者该锁已经之前被释放过了。"
        ],
        "Examples": [
            "obclient [(none)]> SELECT RELEASE_LOCK('my_lock');\n",
            "+-------------------------+\n| RELEASE_LOCK('my_lock') |\n+-------------------------+\n|                       0 |\n+-------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "释放名为 my_lock 的锁。",
            "obclient [(none)]> SELECT RELEASE_LOCK('my_lock');\n",
            "返回结果如下：",
            "+-------------------------+\n| RELEASE_LOCK('my_lock') |\n+-------------------------+\n|                       0 |\n+-------------------------+\n1 row in set\n",
            "返回结果为 0，表示当前会话不是锁 my_lock 的持有者，该锁没有被当前会话释放。"
        ]
    },
    "REPEAT": {
        "Title": [
            "REPEAT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823483"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "REPEAT(str, count)\n",
        "Description": [],
        "Illustration": [
            "返回 str 重复 count 次组成的字符串。count 小于等于 0 时，返回空字符串。参数中包含 NULL 时，返回 NULL。"
        ],
        "Examples": [
            "obclient> SELECT\n     REPEAT('1', -1),\n     REPEAT(null, null),\n     REPEAT('Abc', 4)\n     \\G\n*************************** 1. row ***************************\n   REPEAT('1', -1):\nREPEAT(null, null): NULL\n  REPEAT('Abc', 4): AbcAbcAbcAbc\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT\n     REPEAT('1', -1),\n     REPEAT(null, null),\n     REPEAT('Abc', 4)\n     \\G\n*************************** 1. row ***************************\n   REPEAT('1', -1):\nREPEAT(null, null): NULL\n  REPEAT('Abc', 4): AbcAbcAbcAbc\n1 row in set\n"
        ]
    },
    "REPLACE": {
        "Title": [
            "REPLACE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823439"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "REPLACE(str, from_str, to_str)\n",
        "Description": [
            "REPLACE() 函数用于替换字符串中的子字符串。这个函数会在 str 中查找所有的 from_str 并将其替换为 to_str。如果 str 中没有找到匹配的 from_str，则原始字符串将保持不变。",
            "REPLACE() 中任何参数为 NULL 的情况下，则结果返回 NULL。",
            "REPLACE() 函数是区分大小写的，这意味着它将考虑字符串的大小写。如果您想进行大小写不敏感的替换，可以使用 REPLACE(UPPER(str), UPPER(from_str), to_str) 或 REPLACE(LOWER(str), LOWER(from_str), to_str) 来确保在不考虑大小写的情况下执行替换。",
            "REPLACE() 函数是多字节安全的。"
        ],
        "Illustration": [
            "\n\n\n参数\n必选/可选\n说明\n\n\n\n\nstr\n必选\n原始字符串，要进行替换的目标。\n\n\nfrom_str\n必选\n要替换的子字符串。\n\n\nto_str\n必选\n替换后的新字符串。\n\n\n"
        ],
        "Examples": [
            "obclient> SELECT REPLACE('abc.efg.gpg.nowdew.abc.dabc.e', 'abc.', 'www');\n",
            "+---------------------------------------------------------+\n| REPLACE('abc.efg.gpg.nowdew.abc.dabc.e', 'abc.', 'www') |\n+---------------------------------------------------------+\n| wwwefg.gpg.nowdew.wwwdwwwe                              |\n+---------------------------------------------------------+\n1 row in set\n",
            "obclient> SELECT REPLACE('abc.efg.gpg.nowdew.abc.dabc.e', NULL, 'www');\n",
            "+-------------------------------------------------------+\n| REPLACE('abc.efg.gpg.nowdew.abc.dabc.e', NULL, 'www') |\n+-------------------------------------------------------+\n| NULL                                                  |\n+-------------------------------------------------------+\n1 row in set\n",
            "obclient> SELECT REPLACE('abc.efg.gpg.nowdew.abc.dabc.e', 'abc.', 'WWW');\n",
            "+---------------------------------------------------------+\n| REPLACE('abc.efg.gpg.nowdew.abc.dabc.e', 'abc.', 'WWW') |\n+---------------------------------------------------------+\n| WWWefg.gpg.nowdew.WWWdWWWe                              |\n+---------------------------------------------------------+\n1 row in set\n",
            "obclient> SELECT REPLACE(UPPER('Hello World'), UPPER('world'), 'Universe');\n",
            "+-----------------------------------------------------------+\n| REPLACE(UPPER('Hello World'), UPPER('world'), 'Universe') |\n+-----------------------------------------------------------+\n| HELLO Universe                                            |\n+-----------------------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "示例 1：下面的查询示例使用 ",
            "REPLACE",
            " 函数将原始字符串中的所有子字符串 ",
            "abc.",
            " 替换为 ",
            "www",
            "。",
            "obclient> SELECT REPLACE('abc.efg.gpg.nowdew.abc.dabc.e', 'abc.', 'www');\n",
            "返回结果如下：",
            "+---------------------------------------------------------+\n| REPLACE('abc.efg.gpg.nowdew.abc.dabc.e', 'abc.', 'www') |\n+---------------------------------------------------------+\n| wwwefg.gpg.nowdew.wwwdwwwe                              |\n+---------------------------------------------------------+\n1 row in set\n",
            "示例 2：下面的查询示例使用 ",
            "REPLACE",
            " 函数，将原始字符串中的 ",
            "NULL",
            " 替换为 ",
            "www",
            "，由于要替换的子字符串为 ",
            "NULL",
            "，整个表达式的结果将返回 ",
            "NULL",
            "。",
            "obclient> SELECT REPLACE('abc.efg.gpg.nowdew.abc.dabc.e', NULL, 'www');\n",
            "返回结果如下：",
            "+-------------------------------------------------------+\n| REPLACE('abc.efg.gpg.nowdew.abc.dabc.e', NULL, 'www') |\n+-------------------------------------------------------+\n| NULL                                                  |\n+-------------------------------------------------------+\n1 row in set\n",
            "示例 3：下面的查询示例使用 ",
            "REPLACE",
            " 函数，将原始字符串中的 ",
            "abc.",
            " 替换为 ",
            "WWW",
            "，由于 ",
            "REPLACE()",
            " 函数区分大小写，整个表达式的结果将返回 ",
            "WWWefg.gpg.nowdew.WWWdWWWe",
            "。",
            "obclient> SELECT REPLACE('abc.efg.gpg.nowdew.abc.dabc.e', 'abc.', 'WWW');\n",
            "返回结果如下：",
            "+---------------------------------------------------------+\n| REPLACE('abc.efg.gpg.nowdew.abc.dabc.e', 'abc.', 'WWW') |\n+---------------------------------------------------------+\n| WWWefg.gpg.nowdew.WWWdWWWe                              |\n+---------------------------------------------------------+\n1 row in set\n",
            "示例 4：下面的查询示例中，",
            "Hello World",
            " 会被转换为大写 ",
            "HELLO WORLD",
            "，而 ",
            "world",
            " 也会被转换为大写。因此，这个查询会返回结果 ",
            "HELLO Universe",
            "，因为它将大写的 ",
            "WORLD",
            " 替换为 ",
            "Universe",
            "。",
            "obclient> SELECT REPLACE(UPPER('Hello World'), UPPER('world'), 'Universe');\n",
            "返回结果如下：",
            "+-----------------------------------------------------------+\n| REPLACE(UPPER('Hello World'), UPPER('world'), 'Universe') |\n+-----------------------------------------------------------+\n| HELLO Universe                                            |\n+-----------------------------------------------------------+\n1 row in set\n"
        ]
    },
    "REVERSE": {
        "Title": [
            "REVERSE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823472"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "REVERSE(str)\n",
        "Description": [],
        "Illustration": [
            "返回字符串 str 的倒序排列。",
            "该函数是多字节安全的。"
        ],
        "Examples": [
            "obclient> SELECT REVERSE('oceanbase');\n+----------------------+\n| REVERSE('oceanbase') |\n+----------------------+\n| esabnaeco            |\n+----------------------+\n1 row in set\n\nobclient> SELECT REVERSE(1000);\n+---------------+\n| REVERSE(1000) |\n+---------------+\n| 0001          |\n+---------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT REVERSE('oceanbase');\n+----------------------+\n| REVERSE('oceanbase') |\n+----------------------+\n| esabnaeco            |\n+----------------------+\n1 row in set\n\nobclient> SELECT REVERSE(1000);\n+---------------+\n| REVERSE(1000) |\n+---------------+\n| 0001          |\n+---------------+\n1 row in set\n"
        ]
    },
    "RIGHT": {
        "Title": [
            "RIGHT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823463"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "RIGHT(str,len)\n",
        "Description": [],
        "Illustration": [
            "返回字符串 str 从右侧起的 len 个字符，如果 str 或 len 为 NULL，则返回 NULL。",
            "该函数是多字节安全的。"
        ],
        "Examples": [
            "obclient> SELECT RIGHT('oceanbase',4);\n+----------------------+\n| RIGHT('oceanbase',4) |\n+----------------------+\n| base                 |\n+----------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT RIGHT('oceanbase',4);\n+----------------------+\n| RIGHT('oceanbase',4) |\n+----------------------+\n| base                 |\n+----------------------+\n1 row in set\n"
        ]
    },
    "RLIKE": {
        "Title": [
            "RLIKE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823460"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "str RLIKE pat\n",
        "Description": [],
        "Illustration": [
            "字符串是否匹配正则表达式。如果字符串 str 与指定的正则表达式匹配，则返回 1，否则返回 0。如果字符串 str 或者 pat 其中任一个是 NULL，返回值是 NULL。",
            "该函数是 REGEXP() 的同义词。"
        ],
        "Examples": [
            "obclient> SELECT 'hello world!' RLIKE '^hello','hello world!' RLIKE '^hello$';\n+-------------------------------+--------------------------------+\n| 'hello world!' RLIKE '^hello' | 'hello world!' RLIKE '^hello$' |\n+-------------------------------+--------------------------------+\n|                             1 |                              0 |\n+-------------------------------+--------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT 'hello world!' RLIKE '^hello','hello world!' RLIKE '^hello$';\n+-------------------------------+--------------------------------+\n| 'hello world!' RLIKE '^hello' | 'hello world!' RLIKE '^hello$' |\n+-------------------------------+--------------------------------+\n|                             1 |                              0 |\n+-------------------------------+--------------------------------+\n1 row in set\n"
        ]
    },
    "ROUND": {
        "Title": [
            "ROUND"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823346"
        ],
        "Category": [
            "Mathematical Functions"
        ],
        "Feature": "ROUND(X)\nROUND(X,D)\n",
        "Description": [],
        "Illustration": [
            "返回一个数值，四舍五入到指定的长度或精度。",
            "返回参数 X, 其值接近于最近似的整数。在有两个参数的情况下，返回 X，其值保留到小数点后 D 位，而第 D 位的保留方式为四舍五入。如果要接保留 X 值小数点左边的 D 位，可将 D 设为负值。",
            "返回值的类型同第一个自变量相同（假设它是一个整数、双精度数或小数）。这意味着对于一个整数参数，结果也是一个整数（无小数部分）。",
            "对于准确值数字，ROUND() 使用\"四舍五入\"或\"舍入成最接近的数\"的规则：对于一个分数部分为 .5 或大于 .5 的值，正数则上舍入到邻近的整数值，负数则下舍入临近的整数值。（换言之, 其舍入的方向是数轴上远离零的方向）。对于一个分数部分小于 .5 的值，正数则下舍入下一个整数值，负数则下舍入邻近的整数值，而正数则上舍入邻近的整数值。",
            "对于近似值数字，ROUND() 遵循\"四舍 > 五入 > 五取最接近的偶数\"的规则，即一个带有任何小数部分的值会被舍入成最接近的偶数整数。"
        ],
        "Examples": [
            "obclient> SELECT ROUND(2.15,2);\n+---------------+\n| ROUND(2.15,2) |\n+---------------+\n|          2.15 |\n+---------------+\n1 row in set\n\nobclient> SELECT ROUND(2555e-2,1);\n+------------------+\n| ROUND(2555e-2,1) |\n+------------------+\n|             25.6 |\n+------------------+\n1 row in set\n\nobclient> SELECT ROUND(25e-1),  ROUND(25.3e-1),  ROUND(35e-1);\n+--------------+----------------+--------------+\n| ROUND(25e-1) | ROUND(25.3e-1) | ROUND(35e-1) |\n+--------------+----------------+--------------+\n|            2 |              3 |            4 |\n+--------------+----------------+--------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT ROUND(2.15,2);\n+---------------+\n| ROUND(2.15,2) |\n+---------------+\n|          2.15 |\n+---------------+\n1 row in set\n\nobclient> SELECT ROUND(2555e-2,1);\n+------------------+\n| ROUND(2555e-2,1) |\n+------------------+\n|             25.6 |\n+------------------+\n1 row in set\n\nobclient> SELECT ROUND(25e-1),  ROUND(25.3e-1),  ROUND(35e-1);\n+--------------+----------------+--------------+\n| ROUND(25e-1) | ROUND(25.3e-1) | ROUND(35e-1) |\n+--------------+----------------+--------------+\n|            2 |              3 |            4 |\n+--------------+----------------+--------------+\n1 row in set\n"
        ]
    },
    "ROW_COUNT": {
        "Title": [
            "ROW_COUNT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822975"
        ],
        "Category": [
            "Information Functions"
        ],
        "Feature": "ROW_COUNT()\n",
        "Description": [],
        "Illustration": [
            "返回执行的 SQL 语句影响的行数。",
            "ROW_COUNT 根据不同语句返回不同的值:",
            "DDL 语句：返回 0。",
            "除 SELECT 外的 DML 语句：影响的行数。",
            "特别地，UPDATE 语句会返回实际影响的行数。",
            "SELECT 语句：如果 SELECT 语句的执行结果是一个集合，则返回 -1，如果 SELECT 语句影响到了行的状态，则返回被影响的行数。",
            "例如，SELECT .... INTO 语句会返回插入的行数。"
        ],
        "Examples": [
            "obclient> INSERT INTO t VALUES(1),(2),(3);\nQuery OK, 3 rows affected (0.02 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n\nobclient> SELECT ROW_COUNT();\n+-------------+\n| ROW_COUNT() |\n+-------------+\n|           3 |\n+-------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> INSERT INTO t VALUES(1),(2),(3);\nQuery OK, 3 rows affected (0.02 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n\nobclient> SELECT ROW_COUNT();\n+-------------+\n| ROW_COUNT() |\n+-------------+\n|           3 |\n+-------------+\n1 row in set\n"
        ]
    },
    "ROW_NUMBER": {
        "Title": [
            "ROW_NUMBER"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823033"
        ],
        "Category": [
            "Analysis Functions"
        ],
        "Feature": "ROW_NUMBER() OVER ([ query_partition_clause ] order_by_clause)\n",
        "Description": [],
        "Illustration": [
            "按照 order_by_clause 子句中指定的行的顺序，为每一行分配一个编号。"
        ],
        "Examples": [
            "obclient> CREATE TABLE employees(LAST_NAME CHAR(10), SALARY DECIMAL, JOB_ID CHAR(32));\nINSERT INTO employees VALUES('JIM', 2000, 'CLEANER');\nINSERT INTO employees VALUES('MIKE', 12000, 'ENGINEERING');\nINSERT INTO employees VALUES('LILY', 13000, 'ENGINEERING');\nINSERT INTO employees VALUES('TOM', 11000, 'ENGINEERING');\nCOMMIT;\nQuery OK, 1 row affected\n\nobclient> SELECT LAST_NAME, ROW_NUMBER() OVER(PARTITION BY JOB_ID ORDER BY SALARY) NTL FROM employees;\n+-----------+------+\n| LAST_NAME | NTL  |\n+-----------+------+\n| JIM       |    1 |\n| TOM       |    1 |\n| MIKE      |    2 |\n| LILY      |    3 |\n+-----------+------+\n4 rows in set\n"
        ],
        "Detailed Examples": [
            "obclient> CREATE TABLE employees(LAST_NAME CHAR(10), SALARY DECIMAL, JOB_ID CHAR(32));\nINSERT INTO employees VALUES('JIM', 2000, 'CLEANER');\nINSERT INTO employees VALUES('MIKE', 12000, 'ENGINEERING');\nINSERT INTO employees VALUES('LILY', 13000, 'ENGINEERING');\nINSERT INTO employees VALUES('TOM', 11000, 'ENGINEERING');\nCOMMIT;\nQuery OK, 1 row affected\n\nobclient> SELECT LAST_NAME, ROW_NUMBER() OVER(PARTITION BY JOB_ID ORDER BY SALARY) NTL FROM employees;\n+-----------+------+\n| LAST_NAME | NTL  |\n+-----------+------+\n| JIM       |    1 |\n| TOM       |    1 |\n| MIKE      |    2 |\n| LILY      |    3 |\n+-----------+------+\n4 rows in set\n"
        ]
    },
    "RPAD": {
        "Title": [
            "RPAD"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823451"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "RPAD(str,len,padstr)\n",
        "Description": [],
        "Illustration": [
            "使用字符串 padstr 从右侧填充字符串 str，直到长度为 len 时为止。",
            "如果 str 长度大于 len，则返回 str 左边 len 个字符。",
            "如果 str 长度小于 len，str 和 padstr 连接后大于 len，则返回连接后的左边 len 个字符。",
            "如果 str 长度小于 len，str 和 padstr 连接后小于 len，则返回 str 与多个重复 padstr 连接（总长度大于等于 len）后的左边 len 个字符。"
        ],
        "Examples": [
            "obclient> SELECT RPAD('hi',5,'?');\n+------------------+\n| RPAD('hi',5,'?') |\n+------------------+\n| hi???            |\n+------------------+\n1 row in set\n\nobclient> SELECT RPAD('hi',1,'?');\n+------------------+\n| RPAD('hi',1,'?') |\n+------------------+\n| h                |\n+------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT RPAD('hi',5,'?');\n+------------------+\n| RPAD('hi',5,'?') |\n+------------------+\n| hi???            |\n+------------------+\n1 row in set\n\nobclient> SELECT RPAD('hi',1,'?');\n+------------------+\n| RPAD('hi',1,'?') |\n+------------------+\n| h                |\n+------------------+\n1 row in set\n"
        ]
    },
    "RTRIM": {
        "Title": [
            "RTRIM"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823476"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "RTRIM(str)\n",
        "Description": [],
        "Illustration": [
            "删除字符串 str 右侧的空格。"
        ],
        "Examples": [
            "obclient> SELECT RTRIM('    obclient    ') AS rtrim;\n+--------------+\n| rtrim        |\n+--------------+\n|     obclient |\n+--------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT RTRIM('    obclient    ') AS rtrim;\n+--------------+\n| rtrim        |\n+--------------+\n|     obclient |\n+--------------+\n1 row in set\n"
        ]
    },
    "SCHEMA": {
        "Title": [
            "SCHEMA"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822978"
        ],
        "Category": [
            "Information Functions"
        ],
        "Feature": "SCHEMA()\n",
        "Description": [],
        "Illustration": [
            "返回当前 Schema 名称。此函数是 DATABASE() 的同义词。"
        ],
        "Examples": [
            "obclient> SELECT SCHEMA();\n+----------+\n| SCHEMA() |\n+----------+\n| test     |\n+----------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "如下示例为查询当前的 Schema 名称。",
            "obclient> SELECT SCHEMA();\n+----------+\n| SCHEMA() |\n+----------+\n| test     |\n+----------+\n1 row in set\n"
        ]
    },
    "SCN_TO_TIMESTAMP": {
        "Title": [
            "SCN_TO_TIMESTAMP"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823318"
        ],
        "Category": [
            "Cast Functions"
        ],
        "Feature": "SCN_TO_TIMESTAMP(number)\n",
        "Description": [],
        "Illustration": [
            "SCN_TO_TIMESTAMP() 函数将 SCN 作为参数，并返回与该 SCN 关联的时间戳。返回值是 DATETIME 类型。"
        ],
        "Examples": [
            "obclient [oceanbase]> SELECT MAX_SCN, SCN_TO_TIMESTAMP(MAX_SCN) FROM gv$ob_log_stat;\n+---------------------+----------------------------+\n| MAX_SCN             | SCN_TO_TIMESTAMP(MAX_SCN)  |\n+---------------------+----------------------------+\n| 1676966395664862550 | 2023-02-21 15:59:55.664862 |\n| 1676966395664862550 | 2023-02-21 15:59:55.664862 |\n+---------------------+----------------------------+\n2 rows in set\n"
        ],
        "Detailed Examples": [
            "obclient [oceanbase]> SELECT MAX_SCN, SCN_TO_TIMESTAMP(MAX_SCN) FROM gv$ob_log_stat;\n+---------------------+----------------------------+\n| MAX_SCN             | SCN_TO_TIMESTAMP(MAX_SCN)  |\n+---------------------+----------------------------+\n| 1676966395664862550 | 2023-02-21 15:59:55.664862 |\n| 1676966395664862550 | 2023-02-21 15:59:55.664862 |\n+---------------------+----------------------------+\n2 rows in set\n",
            "\n说明\ngv$ob_log_stat 是展示日志流日志同步状态的内部表，其 max_scn 字段是一个 SCN 类型，通过 SCN_TO_TIMESTAMP() 函数将 SCN 转换为时间戳。\n"
        ]
    },
    "SECOND": {
        "Title": [
            "SECOND"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823403"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "SECOND(time)\n",
        "Description": [],
        "Illustration": [
            "返回时间 time 中的秒数。"
        ],
        "Examples": [
            "obclient> SELECT SECOND('18:20:17');\n+--------------------+\n| SECOND('18:20:17') |\n+--------------------+\n|                 17 |\n+--------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT SECOND('18:20:17');\n+--------------------+\n| SECOND('18:20:17') |\n+--------------------+\n|                 17 |\n+--------------------+\n1 row in set\n"
        ]
    },
    "SEC_TO_TIME": {
        "Title": [
            "SEC_TO_TIME"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823407"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "SEC_TO_TIME(seconds)\n",
        "Description": [],
        "Illustration": [
            "返回 seconds 转换为的时间类型。结果的范围仅限于 TIME 数据类型的范围。"
        ],
        "Examples": [
            "obclient> SELECT SEC_TO_TIME(2378);\n+-------------------+\n| SEC_TO_TIME(2378) |\n+-------------------+\n| 00:39:38          |\n+-------------------+\n1 row in set\n\nobclient> SELECT SEC_TO_TIME(2378) + 0;\n+-----------------------+\n| SEC_TO_TIME(2378) + 0 |\n+-----------------------+\n|                  3938 |\n+-----------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT SEC_TO_TIME(2378);\n+-------------------+\n| SEC_TO_TIME(2378) |\n+-------------------+\n| 00:39:38          |\n+-------------------+\n1 row in set\n\nobclient> SELECT SEC_TO_TIME(2378) + 0;\n+-----------------------+\n| SEC_TO_TIME(2378) + 0 |\n+-----------------------+\n|                  3938 |\n+-----------------------+\n1 row in set\n"
        ]
    },
    "SESSION_USER": {
        "Title": [
            "SESSION_USER"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822972"
        ],
        "Category": [
            "Information Functions"
        ],
        "Feature": "SESSION_USER()\n",
        "Description": [],
        "Illustration": [
            "返回当前的用户名与主机名，返回值使用的字符集为 utf8mb4。",
            "该函数是 USER() 的同义词。"
        ],
        "Examples": [
            "obclient> SELECT SESSION_USER();\n+---------------------+\n| SESSION_USER()      |\n+---------------------+\n| root@100.0.0.1 |\n+---------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT SESSION_USER();\n+---------------------+\n| SESSION_USER()      |\n+---------------------+\n| root@100.0.0.1 |\n+---------------------+\n1 row in set\n"
        ]
    },
    "SHA": {
        "Title": [
            "SHA"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822997"
        ],
        "Category": [
            "Encryption Functions"
        ],
        "Feature": "SHA(str)\n",
        "Description": [],
        "Illustration": [
            "计算并返回给定字符串的 SHA-1 160 位校验和，该值以 40 个十六进制数字的字符串形式返回。等效于 SHA1() 函数。"
        ],
        "Examples": [
            "obclient [test]> SELECT SHA('OB');\n+------------------------------------------+\n| SHA('OB')                                |\n+------------------------------------------+\n| 29a6de2fd8618f31afb281a608c57995b7eb105d |\n+------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient [test]> SELECT SHA('OB');\n+------------------------------------------+\n| SHA('OB')                                |\n+------------------------------------------+\n| 29a6de2fd8618f31afb281a608c57995b7eb105d |\n+------------------------------------------+\n1 row in set\n"
        ]
    },
    "SHA1": {
        "Title": [
            "SHA1"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823000"
        ],
        "Category": [
            "Encryption Functions"
        ],
        "Feature": "SHA1(str)\n",
        "Description": [],
        "Illustration": [
            "计算并返回给定字符串的 SHA-1 160 位校验和，该值以 40 个十六进制数字的字符串形式返回。等效于 SHA() 函数。"
        ],
        "Examples": [
            "obclient [test]> SELECT SHA1('OB');\n+------------------------------------------+\n| SHA1('OB')                               |\n+------------------------------------------+\n| 29a6de2fd8618f31afb281a608c57995b7eb105d |\n+------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient [test]> SELECT SHA1('OB');\n+------------------------------------------+\n| SHA1('OB')                               |\n+------------------------------------------+\n| 29a6de2fd8618f31afb281a608c57995b7eb105d |\n+------------------------------------------+\n1 row in set\n"
        ]
    },
    "SHA2": {
        "Title": [
            "SHA2"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822989"
        ],
        "Category": [
            "Encryption Functions"
        ],
        "Feature": "SHA2(str,len)\n",
        "Description": [],
        "Illustration": [
            "函数计算并返回给定字符串的 SHA-2 摘要，包括：SHA-224、SHA-256、SHA-384 和 SHA-512 算法。str 是要散列的明文字符串，len 指示结果的所需位长度，其值必须为 224、256、384、512 或 0（相当于 256）。"
        ],
        "Examples": [
            "obclient [test]> SELECT SHA2('OB',224);\n+----------------------------------------------------------+\n| SHA2('OB',224)                                           |\n+----------------------------------------------------------+\n| 00ac28313083c3a30fa0c671f01829ff0fd3253938d0c0225c4c670e |\n+----------------------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient [test]> SELECT SHA2('OB',224);\n+----------------------------------------------------------+\n| SHA2('OB',224)                                           |\n+----------------------------------------------------------+\n| 00ac28313083c3a30fa0c671f01829ff0fd3253938d0c0225c4c670e |\n+----------------------------------------------------------+\n1 row in set\n"
        ]
    },
    "SIGN": {
        "Title": [
            "SIGN"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823362"
        ],
        "Category": [
            "Mathematical Functions"
        ],
        "Feature": "SIGN(X)\n",
        "Description": [],
        "Illustration": [
            "SIGN(X) 返回参数的符号，该符号取决于 X 的值为负、零或正。支持浮点数与十六进制数。返回结果为：",
            "负值：-1",
            "零值：0",
            "正值：1",
            "该函数支持比较运算，结果会被转换为数字类型处理，生成的结果为 1(TRUE)或 0 (FALSE)。",
            "如果输入 NULL，返回值为 NULL。"
        ],
        "Examples": [
            "obclient> SELECT SIGN(-32), SIGN(0), SIGN(234);\n+-----------+---------+-----------+\n| SIGN(-32) | SIGN(0) | SIGN(234) |\n+-----------+---------+-----------+\n|        -1 |       0 |         1 |\n+-----------+---------+-----------+\n1 row in set\n\nobclient> SELECT SIGN(NULL),SIGN(FALSE),SIGN(0X01);\n+------------+-------------+------------+\n| SIGN(NULL) | SIGN(FALSE) | SIGN(0X01) |\n+------------+-------------+------------+\n|       NULL |           0 |          1 |\n+------------+-------------+------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT SIGN(-32), SIGN(0), SIGN(234);\n+-----------+---------+-----------+\n| SIGN(-32) | SIGN(0) | SIGN(234) |\n+-----------+---------+-----------+\n|        -1 |       0 |         1 |\n+-----------+---------+-----------+\n1 row in set\n\nobclient> SELECT SIGN(NULL),SIGN(FALSE),SIGN(0X01);\n+------------+-------------+------------+\n| SIGN(NULL) | SIGN(FALSE) | SIGN(0X01) |\n+------------+-------------+------------+\n|       NULL |           0 |          1 |\n+------------+-------------+------------+\n1 row in set\n"
        ]
    },
    "SIN": {
        "Title": [
            "SIN"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823342"
        ],
        "Category": [
            "Mathematical Functions"
        ],
        "Feature": "SIN(X)\n",
        "Description": [],
        "Illustration": [
            "返回给定弧度 X 的正弦值。"
        ],
        "Examples": [
            "obclient> SELECT SIN(PI());\n+------------------------+\n| SIN(PI())              |\n+------------------------+\n| 1.2246467991473532e-16 |\n+------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT SIN(PI());\n+------------------------+\n| SIN(PI())              |\n+------------------------+\n| 1.2246467991473532e-16 |\n+------------------------+\n1 row in set\n"
        ]
    },
    "SLEEP": {
        "Title": [
            "SLEEP"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822951"
        ],
        "Category": [
            "Miscellaneous Functions"
        ],
        "Feature": "SLEEP(duration)\n",
        "Description": [],
        "Illustration": [
            "SLEEP 函数根据 duration 指定的数值暂停相应的时间（单位为秒），并在暂停结束后返回 0。",
            "如果 SLEEP 单独执行且没有被中断，返回结果 0。",
            "如果 SLEEP 单独执行期间被中断，返回结果 1，但不会返回任何错误码。",
            "如果 SLEEP 是查询的一部分，且暂停期间被中断，将会返回错误码 ERROR 1317。"
        ],
        "Examples": [
            "obclient> SELECT SLEEP(1000);\n+------------------+\n| SLEEP(1000) |\n+------------------+\n|          0 |\n+------------------+\n\nobclient> SELECT SLEEP(1000);\n+------------------+\n| SLEEP(1000) |\n+------------------+\n|          1 |\n+------------------+\n\nobclient> SELECT 1 FROM t1 WHERE SLEEP(1000);\nERROR 1317 (70100): Query execution was interrupted\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT SLEEP(1000);\n+------------------+\n| SLEEP(1000) |\n+------------------+\n|          0 |\n+------------------+\n\nobclient> SELECT SLEEP(1000);\n+------------------+\n| SLEEP(1000) |\n+------------------+\n|          1 |\n+------------------+\n\nobclient> SELECT 1 FROM t1 WHERE SLEEP(1000);\nERROR 1317 (70100): Query execution was interrupted\n"
        ]
    },
    "SOUNDEX": {
        "Title": [
            "SOUNDEX"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823432"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "SOUNDEX(str)\n",
        "Description": [],
        "Illustration": [
            "返回由四个字符组成的代码以评估两个字符串在发音时的相似性。"
        ],
        "Examples": [
            "obclient> SELECT SOUNDEX('a');\n+--------------+\n| SOUNDEX('a') |\n+--------------+\n| A000         |\n+--------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT SOUNDEX('a');\n+--------------+\n| SOUNDEX('a') |\n+--------------+\n| A000         |\n+--------------+\n1 row in set\n"
        ]
    },
    "SPACE": {
        "Title": [
            "SPACE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823461"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "SPACE(N)\n",
        "Description": [],
        "Illustration": [
            "返回包含 N 个空格的字符串。"
        ],
        "Examples": [
            "obclient> SELECT SPACE(5);\n+----------+\n| SPACE(5) |\n+----------+\n|          |\n+----------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "返回包含 5 个空格的字符串。",
            "obclient> SELECT SPACE(5);\n+----------+\n| SPACE(5) |\n+----------+\n|          |\n+----------+\n1 row in set\n"
        ]
    },
    "SQRT": {
        "Title": [
            "SQRT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823360"
        ],
        "Category": [
            "Mathematical Functions"
        ],
        "Feature": "SQRT(X)\n",
        "Description": [],
        "Illustration": [
            "返回 X 的平方根。"
        ],
        "Examples": [
            "obclient> SELECT SQRT(4);\n+---------+\n| SQRT(4) |\n+---------+\n|       2 |\n+---------+\n1 row in set\n\nobclient> SELECT SQRT(5);\n+------------------+\n| SQRT(5)          |\n+------------------+\n| 2.23606797749979 |\n+------------------+\n1 row in set\n\nobclient> SELECT SQRT(-16);\n+-----------+\n| SQRT(-16) |\n+-----------+\n|      NULL |\n+-----------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT SQRT(4);\n+---------+\n| SQRT(4) |\n+---------+\n|       2 |\n+---------+\n1 row in set\n\nobclient> SELECT SQRT(5);\n+------------------+\n| SQRT(5)          |\n+------------------+\n| 2.23606797749979 |\n+------------------+\n1 row in set\n\nobclient> SELECT SQRT(-16);\n+-----------+\n| SQRT(-16) |\n+-----------+\n|      NULL |\n+-----------+\n1 row in set\n"
        ]
    },
    "STD": {
        "Title": [
            "STD"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823014"
        ],
        "Category": [
            "Aggregate Functions",
            "Analysis Functions"
        ],
        "Feature": "STD(expr)\n",
        "Description": [],
        "Illustration": [
            "返回表达式 expr 的总体标准差，该函数是 STDDEV_POP() 的别名。",
            "如果没有匹配到行，则该函数返回 NULL。"
        ],
        "Examples": [
            "obclient> CREATE TABLE employees (manager_id INT,last_name varchar(50),hiredate varchar(50),SALARY INT);\nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-01', 1700);\nINSERT INTO employees VALUES(100, 'De Haan', '2018-05-01',11000);      \nINSERT INTO employees VALUES(100, 'Errazuriz', '2017-07-21', 1400);\nINSERT INTO employees VALUES(100, 'Hartstein', '2019-05-01',14000);     \nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-22', 1700);\nINSERT INTO employees VALUES(100, 'Weiss',  '2019-07-11',13500);     \nINSERT INTO employees VALUES(100, 'Russell', '2019-10-05', 13000);\nINSERT INTO employees VALUES(100, 'Partners',  '2018-12-01',14000);     \nINSERT INTO employees VALUES(200, 'Ross',  '2019-06-11',13500);     \nINSERT INTO employees VALUES(200, 'Bell', '2019-05-25', 13000);\nINSERT INTO employees VALUES(200, 'Part',  '2018-08-11',14000);   \nCOMMIT;\n\nobclient> SELECT STD(salary) FROM employees;\n+-------------------+\n| STD(salary)       |\n+-------------------+\n| 5249.950806538513 |\n+-------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> CREATE TABLE employees (manager_id INT,last_name varchar(50),hiredate varchar(50),SALARY INT);\nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-01', 1700);\nINSERT INTO employees VALUES(100, 'De Haan', '2018-05-01',11000);      \nINSERT INTO employees VALUES(100, 'Errazuriz', '2017-07-21', 1400);\nINSERT INTO employees VALUES(100, 'Hartstein', '2019-05-01',14000);     \nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-22', 1700);\nINSERT INTO employees VALUES(100, 'Weiss',  '2019-07-11',13500);     \nINSERT INTO employees VALUES(100, 'Russell', '2019-10-05', 13000);\nINSERT INTO employees VALUES(100, 'Partners',  '2018-12-01',14000);     \nINSERT INTO employees VALUES(200, 'Ross',  '2019-06-11',13500);     \nINSERT INTO employees VALUES(200, 'Bell', '2019-05-25', 13000);\nINSERT INTO employees VALUES(200, 'Part',  '2018-08-11',14000);   \nCOMMIT;\n\nobclient> SELECT STD(salary) FROM employees;\n+-------------------+\n| STD(salary)       |\n+-------------------+\n| 5249.950806538513 |\n+-------------------+\n1 row in set\n"
        ]
    },
    "STDDEV": {
        "Title": [
            "STDDEV"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823023"
        ],
        "Category": [
            "Aggregate Functions",
            "Analysis Functions"
        ],
        "Feature": "STDDEV(expr)\n",
        "Description": [],
        "Illustration": [
            "返回表达式 expr 的总体标准差。如果没有匹配到行，则该函数返回 NULL。",
            "该函数是 STDDEV_POP() 的别名。"
        ],
        "Examples": [
            "obclient> CREATE TABLE employees (manager_id INT,last_name varchar(50),hiredate varchar(50),SALARY INT);\nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-01', 1700);\nINSERT INTO employees VALUES(100, 'De Haan', '2018-05-01',11000);      \nINSERT INTO employees VALUES(100, 'Errazuriz', '2017-07-21', 1400);\nINSERT INTO employees VALUES(100, 'Hartstein', '2019-05-01',14000);     \nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-22', 1700);\nINSERT INTO employees VALUES(100, 'Weiss',  '2019-07-11',13500);     \nINSERT INTO employees VALUES(100, 'Russell', '2019-10-05', 13000);\nINSERT INTO employees VALUES(100, 'Partners',  '2018-12-01',14000);     \nINSERT INTO employees VALUES(200, 'Ross',  '2019-06-11',13500);     \nINSERT INTO employees VALUES(200, 'Bell', '2019-05-25', 13000);\nINSERT INTO employees VALUES(200, 'Part',  '2018-08-11',14000);   \nCOMMIT;\n\nobclient> SELECT STDDEV(salary) FROM employees;\n+-------------------+\n| STDDEV(salary)    |\n+-------------------+\n| 5249.950806538513 |\n+-------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> CREATE TABLE employees (manager_id INT,last_name varchar(50),hiredate varchar(50),SALARY INT);\nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-01', 1700);\nINSERT INTO employees VALUES(100, 'De Haan', '2018-05-01',11000);      \nINSERT INTO employees VALUES(100, 'Errazuriz', '2017-07-21', 1400);\nINSERT INTO employees VALUES(100, 'Hartstein', '2019-05-01',14000);     \nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-22', 1700);\nINSERT INTO employees VALUES(100, 'Weiss',  '2019-07-11',13500);     \nINSERT INTO employees VALUES(100, 'Russell', '2019-10-05', 13000);\nINSERT INTO employees VALUES(100, 'Partners',  '2018-12-01',14000);     \nINSERT INTO employees VALUES(200, 'Ross',  '2019-06-11',13500);     \nINSERT INTO employees VALUES(200, 'Bell', '2019-05-25', 13000);\nINSERT INTO employees VALUES(200, 'Part',  '2018-08-11',14000);   \nCOMMIT;\n\nobclient> SELECT STDDEV(salary) FROM employees;\n+-------------------+\n| STDDEV(salary)    |\n+-------------------+\n| 5249.950806538513 |\n+-------------------+\n1 row in set\n"
        ]
    },
    "STDDEV_POP": {
        "Title": [
            "STDDEV_POP"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823016"
        ],
        "Category": [
            "Aggregate Functions",
            "Analysis Functions"
        ],
        "Feature": "STDDEV_POP(expr)\n",
        "Description": [],
        "Illustration": [
            "返回表达式 expr 的总体标准差。",
            "如果没有匹配到行，则该函数返回 NULL。"
        ],
        "Examples": [
            "obclient> CREATE TABLE employees (manager_id INT,last_name varchar(50),hiredate varchar(50),SALARY INT);\nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-01', 1700);\nINSERT INTO employees VALUES(100, 'De Haan', '2018-05-01',11000);      \nINSERT INTO employees VALUES(100, 'Errazuriz', '2017-07-21', 1400);\nINSERT INTO employees VALUES(100, 'Hartstein', '2019-05-01',14000);     \nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-22', 1700);\nINSERT INTO employees VALUES(100, 'Weiss',  '2019-07-11',13500);     \nINSERT INTO employees VALUES(100, 'Russell', '2019-10-05', 13000);\nINSERT INTO employees VALUES(100, 'Partners',  '2018-12-01',14000);     \nINSERT INTO employees VALUES(200, 'Ross',  '2019-06-11',13500);     \nINSERT INTO employees VALUES(200, 'Bell', '2019-05-25', 13000);\nINSERT INTO employees VALUES(200, 'Part',  '2018-08-11',14000);   \nCOMMIT;\n\nobclient> SELECT STDDEV_POP(salary) FROM employees;\n+--------------------+\n| STDDEV_POP(salary) |\n+--------------------+\n|  5249.950806538513 |\n+--------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> CREATE TABLE employees (manager_id INT,last_name varchar(50),hiredate varchar(50),SALARY INT);\nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-01', 1700);\nINSERT INTO employees VALUES(100, 'De Haan', '2018-05-01',11000);      \nINSERT INTO employees VALUES(100, 'Errazuriz', '2017-07-21', 1400);\nINSERT INTO employees VALUES(100, 'Hartstein', '2019-05-01',14000);     \nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-22', 1700);\nINSERT INTO employees VALUES(100, 'Weiss',  '2019-07-11',13500);     \nINSERT INTO employees VALUES(100, 'Russell', '2019-10-05', 13000);\nINSERT INTO employees VALUES(100, 'Partners',  '2018-12-01',14000);     \nINSERT INTO employees VALUES(200, 'Ross',  '2019-06-11',13500);     \nINSERT INTO employees VALUES(200, 'Bell', '2019-05-25', 13000);\nINSERT INTO employees VALUES(200, 'Part',  '2018-08-11',14000);   \nCOMMIT;\n\nobclient> SELECT STDDEV_POP(salary) FROM employees;\n+--------------------+\n| STDDEV_POP(salary) |\n+--------------------+\n|  5249.950806538513 |\n+--------------------+\n1 row in set\n"
        ]
    },
    "STDDEV_SAMP": {
        "Title": [
            "STDDEV_SAMP"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823031"
        ],
        "Category": [
            "Aggregate Functions",
            "Analysis Functions"
        ],
        "Feature": "STDDEV_SAMP(expr)\n",
        "Description": [],
        "Illustration": [
            "返回 expr 的样本标准差，该函数返回 VAR_SAMP() 函数结果的平方根。有关 VAR_SAMP() 函数的详细信息，请参见 VAR_SAMP。",
            "如果没有匹配到行，则该函数返回 NULL。"
        ],
        "Examples": [
            "obclient> CREATE TABLE employees (manager_id INT,last_name VARCHAR(50),hiredate VARCHAR(50),salary INT);\nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-01', 1700);\nINSERT INTO employees VALUES(100, 'De Haan', '2018-05-01',11000);      \nINSERT INTO employees VALUES(100, 'Errazuriz', '2017-07-21', 1400);\nINSERT INTO employees VALUES(100, 'Hartstein', '2019-05-01',14000);     \nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-22', 1700);\nINSERT INTO employees VALUES(100, 'Weiss',  '2019-07-11',13500);     \nINSERT INTO employees VALUES(100, 'Russell', '2019-10-05', 13000);\nINSERT INTO employees VALUES(100, 'Partners',  '2018-12-01',14000);     \nINSERT INTO employees VALUES(200, 'Ross',  '2019-06-11',13500);     \nINSERT INTO employees VALUES(200, 'Bell', '2019-05-25', 13000);\nINSERT INTO employees VALUES(200, 'Part',  '2018-08-11',14000);   \nCOMMIT;\n\n\nobclient> SELECT STDDEV_SAMP(salary) FROM employees;\n+---------------------+\n| STDDEV_SAMP(salary) |\n+---------------------+\n|   5506.194858355616 |\n+---------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> CREATE TABLE employees (manager_id INT,last_name VARCHAR(50),hiredate VARCHAR(50),salary INT);\nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-01', 1700);\nINSERT INTO employees VALUES(100, 'De Haan', '2018-05-01',11000);      \nINSERT INTO employees VALUES(100, 'Errazuriz', '2017-07-21', 1400);\nINSERT INTO employees VALUES(100, 'Hartstein', '2019-05-01',14000);     \nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-22', 1700);\nINSERT INTO employees VALUES(100, 'Weiss',  '2019-07-11',13500);     \nINSERT INTO employees VALUES(100, 'Russell', '2019-10-05', 13000);\nINSERT INTO employees VALUES(100, 'Partners',  '2018-12-01',14000);     \nINSERT INTO employees VALUES(200, 'Ross',  '2019-06-11',13500);     \nINSERT INTO employees VALUES(200, 'Bell', '2019-05-25', 13000);\nINSERT INTO employees VALUES(200, 'Part',  '2018-08-11',14000);   \nCOMMIT;\n\n\nobclient> SELECT STDDEV_SAMP(salary) FROM employees;\n+---------------------+\n| STDDEV_SAMP(salary) |\n+---------------------+\n|   5506.194858355616 |\n+---------------------+\n1 row in set\n"
        ]
    },
    "STRCMP": {
        "Title": [
            "STRCMP"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823448"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "STRCMP(expr1,expr2)\n",
        "Description": [],
        "Illustration": [
            "如果字符串 expr1 与 expr2 一致，则返回 0。如果 expr1 是 expr2 的子串，则返回 -1；如果 expr2 是 expr1 的子串，则返回 1。"
        ],
        "Examples": [
            "obclient> SELECT STRCMP('text', 'text2');\n+-------------------------+\n| STRCMP('text', 'text2') |\n+-------------------------+\n|                      -1 |\n+-------------------------+\n1 row in set\n\nobclient> SELECT STRCMP('text2', 'text');\n+-------------------------+\n| STRCMP('text2', 'text') |\n+-------------------------+\n|                       1 |\n+-------------------------+\n1 row in set\n\nobclient> SELECT STRCMP('text', 'text');\n+------------------------+\n| STRCMP('text', 'text') |\n+------------------------+\n|                      0 |\n+------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT STRCMP('text', 'text2');\n+-------------------------+\n| STRCMP('text', 'text2') |\n+-------------------------+\n|                      -1 |\n+-------------------------+\n1 row in set\n\nobclient> SELECT STRCMP('text2', 'text');\n+-------------------------+\n| STRCMP('text2', 'text') |\n+-------------------------+\n|                       1 |\n+-------------------------+\n1 row in set\n\nobclient> SELECT STRCMP('text', 'text');\n+------------------------+\n| STRCMP('text', 'text') |\n+------------------------+\n|                      0 |\n+------------------------+\n1 row in set\n"
        ]
    },
    "STR_TO_DATE": {
        "Title": [
            "STR_TO_DATE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823394"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "STR_TO_DATE(str, format)\n",
        "Description": [],
        "Illustration": [
            "使用 format 将 str 转换为 DATETIME 值、DATE 值或 TIME 值。返回值类型取决于 format 包含日期时间的哪些部分。",
            "如果 str 或 format 为 NULL，则该函数返回 NULL。",
            "如果 str 非有效的日期格式，则返回值会根据 sql_mode 的设置有所不同：",
            "\nsql_mode 包含了 NO_ZERO_IN_DATE：返回 NULL。\nsql_mode 不包含 NO_ZERO_IN_DATE：\n\n如果 str 为 INT 类型，并且 str < 0，则返回 0000-00-00 00:00:00，并提示 Warning。 obclient> SELECT STR_TO_DATE(-100,'%Y-%b-%D %r');\n+---------------------------------+\n| STR_TO_DATE(-100,'%Y-%b-%D %r') |\n+---------------------------------+\n| 0000-00-00 00:00:00             |\n+---------------------------------+\n1 row in set, 1 warning\n\n如果 str 为 INT 类型，并且 0 ≤ str ≤ 69，则返回 1999-11-30 00:00:00 加 str 的年份； obclient> SELECT STR_TO_DATE(0,'%Y-%b-%D %r');\n+------------------------------+\n| STR_TO_DATE(0,'%Y-%b-%D %r') |\n+------------------------------+\n| 1999-11-30 00:00:00          |\n+------------------------------+\n1 row in set\n\n如果 str 为 INT 类型，并且 69 < str ≤ 99，则返回 1969-11-30 00:00:00 加 str - 70 的年份。 obclient> SELECT STR_TO_DATE(88,'%Y-%b-%D %r');\n+-------------------------------+\n| STR_TO_DATE(88,'%Y-%b-%D %r') |\n+-------------------------------+\n| 1987-11-30 00:00:00           |\n+-------------------------------+\n1 row in set\n\n如果 str 为 INT 类型，并且 100 < str ≤ 9999，则返回 0099-11-30 00:00:00 加 str - 100 的年份。 obclient> SELECT STR_TO_DATE(2088,'%Y-%b-%D %r');\n+---------------------------------+\n| STR_TO_DATE(2088,'%Y-%b-%D %r') |\n+---------------------------------+\n| 2087-11-30 00:00:00             |\n+---------------------------------+\n1 row in set\n\n如果 str为 INT 类型，并且 str > 10000，则返回 NULL，并提示 Warning。 obclient> SELECT STR_TO_DATE(10001,'%Y-%b-%D %r');\n+----------------------------------+\n| STR_TO_DATE(10001,'%Y-%b-%D %r') |\n+----------------------------------+\n| NULL                             |\n+----------------------------------+\n1 row in set, 1 warning\n\n如果 str 为字符串，则会将字符串尽可能转换为日期时间，并返回 1999-11-30 00:00:00 加 str 作为类型的日期时间；如果不能转换为日期时间，则返回 NULL。 obclient> SELECT STR_TO_DATE('a2014-Jan-1st 5:5:5 pm', '%Y-%b-%D %r');\n+------------------------------------------------------+\n| STR_TO_DATE('a2014-Jan-1st 5:5:5 pm', '%Y-%b-%D %r') |\n+------------------------------------------------------+\n| NULL                                                 |\n+------------------------------------------------------+\n1 row in set, 1 warning\n\nobclient> SELECT STR_TO_DATE('a2014-Jan-1st 5:5:5 pm', 'a%Y-%b-%D %r');\n+-------------------------------------------------------+\n| STR_TO_DATE('a2014-Jan-1st 5:5:5 pm', 'a%Y-%b-%D %r') |\n+-------------------------------------------------------+\n| 2014-01-01 05:05:05                                   |\n+-------------------------------------------------------+\n1 row in set\n\n如果 str 为其他类型，则返回 NULL，并提示 Warning。 obclient> SELECT STR_TO_DATE(1.6,'%Y-%b-%D %r');\n+--------------------------------+\n| STR_TO_DATE(1.6,'%Y-%b-%D %r') |\n+--------------------------------+\n| NULL                           |\n+--------------------------------+\n1 row in set, 1 warning\n\nobclient> SELECT STR_TO_DATE(pi(),'%Y-%b-%D %r');\n+---------------------------------+\n| STR_TO_DATE(pi(),'%Y-%b-%D %r') |\n+---------------------------------+\n| NULL                            |\n+---------------------------------+\n1 row in set, 1 warning\n\n\n",
            "sql_mode 包含了 NO_ZERO_IN_DATE：返回 NULL。",
            "sql_mode 不包含 NO_ZERO_IN_DATE：",
            "\n如果 str 为 INT 类型，并且 str < 0，则返回 0000-00-00 00:00:00，并提示 Warning。 obclient> SELECT STR_TO_DATE(-100,'%Y-%b-%D %r');\n+---------------------------------+\n| STR_TO_DATE(-100,'%Y-%b-%D %r') |\n+---------------------------------+\n| 0000-00-00 00:00:00             |\n+---------------------------------+\n1 row in set, 1 warning\n\n如果 str 为 INT 类型，并且 0 ≤ str ≤ 69，则返回 1999-11-30 00:00:00 加 str 的年份； obclient> SELECT STR_TO_DATE(0,'%Y-%b-%D %r');\n+------------------------------+\n| STR_TO_DATE(0,'%Y-%b-%D %r') |\n+------------------------------+\n| 1999-11-30 00:00:00          |\n+------------------------------+\n1 row in set\n\n如果 str 为 INT 类型，并且 69 < str ≤ 99，则返回 1969-11-30 00:00:00 加 str - 70 的年份。 obclient> SELECT STR_TO_DATE(88,'%Y-%b-%D %r');\n+-------------------------------+\n| STR_TO_DATE(88,'%Y-%b-%D %r') |\n+-------------------------------+\n| 1987-11-30 00:00:00           |\n+-------------------------------+\n1 row in set\n\n如果 str 为 INT 类型，并且 100 < str ≤ 9999，则返回 0099-11-30 00:00:00 加 str - 100 的年份。 obclient> SELECT STR_TO_DATE(2088,'%Y-%b-%D %r');\n+---------------------------------+\n| STR_TO_DATE(2088,'%Y-%b-%D %r') |\n+---------------------------------+\n| 2087-11-30 00:00:00             |\n+---------------------------------+\n1 row in set\n\n如果 str为 INT 类型，并且 str > 10000，则返回 NULL，并提示 Warning。 obclient> SELECT STR_TO_DATE(10001,'%Y-%b-%D %r');\n+----------------------------------+\n| STR_TO_DATE(10001,'%Y-%b-%D %r') |\n+----------------------------------+\n| NULL                             |\n+----------------------------------+\n1 row in set, 1 warning\n\n如果 str 为字符串，则会将字符串尽可能转换为日期时间，并返回 1999-11-30 00:00:00 加 str 作为类型的日期时间；如果不能转换为日期时间，则返回 NULL。 obclient> SELECT STR_TO_DATE('a2014-Jan-1st 5:5:5 pm', '%Y-%b-%D %r');\n+------------------------------------------------------+\n| STR_TO_DATE('a2014-Jan-1st 5:5:5 pm', '%Y-%b-%D %r') |\n+------------------------------------------------------+\n| NULL                                                 |\n+------------------------------------------------------+\n1 row in set, 1 warning\n\nobclient> SELECT STR_TO_DATE('a2014-Jan-1st 5:5:5 pm', 'a%Y-%b-%D %r');\n+-------------------------------------------------------+\n| STR_TO_DATE('a2014-Jan-1st 5:5:5 pm', 'a%Y-%b-%D %r') |\n+-------------------------------------------------------+\n| 2014-01-01 05:05:05                                   |\n+-------------------------------------------------------+\n1 row in set\n\n如果 str 为其他类型，则返回 NULL，并提示 Warning。 obclient> SELECT STR_TO_DATE(1.6,'%Y-%b-%D %r');\n+--------------------------------+\n| STR_TO_DATE(1.6,'%Y-%b-%D %r') |\n+--------------------------------+\n| NULL                           |\n+--------------------------------+\n1 row in set, 1 warning\n\nobclient> SELECT STR_TO_DATE(pi(),'%Y-%b-%D %r');\n+---------------------------------+\n| STR_TO_DATE(pi(),'%Y-%b-%D %r') |\n+---------------------------------+\n| NULL                            |\n+---------------------------------+\n1 row in set, 1 warning\n\n",
            "如果 str 为 INT 类型，并且 str < 0，则返回 0000-00-00 00:00:00，并提示 Warning。",
            "obclient> SELECT STR_TO_DATE(-100,'%Y-%b-%D %r');\n+---------------------------------+\n| STR_TO_DATE(-100,'%Y-%b-%D %r') |\n+---------------------------------+\n| 0000-00-00 00:00:00             |\n+---------------------------------+\n1 row in set, 1 warning\n",
            "如果 str 为 INT 类型，并且 0 ≤ str ≤ 69，则返回 1999-11-30 00:00:00 加 str 的年份；",
            "obclient> SELECT STR_TO_DATE(0,'%Y-%b-%D %r');\n+------------------------------+\n| STR_TO_DATE(0,'%Y-%b-%D %r') |\n+------------------------------+\n| 1999-11-30 00:00:00          |\n+------------------------------+\n1 row in set\n",
            "如果 str 为 INT 类型，并且 69 < str ≤ 99，则返回 1969-11-30 00:00:00 加 str - 70 的年份。",
            "obclient> SELECT STR_TO_DATE(88,'%Y-%b-%D %r');\n+-------------------------------+\n| STR_TO_DATE(88,'%Y-%b-%D %r') |\n+-------------------------------+\n| 1987-11-30 00:00:00           |\n+-------------------------------+\n1 row in set\n",
            "如果 str 为 INT 类型，并且 100 < str ≤ 9999，则返回 0099-11-30 00:00:00 加 str - 100 的年份。",
            "obclient> SELECT STR_TO_DATE(2088,'%Y-%b-%D %r');\n+---------------------------------+\n| STR_TO_DATE(2088,'%Y-%b-%D %r') |\n+---------------------------------+\n| 2087-11-30 00:00:00             |\n+---------------------------------+\n1 row in set\n",
            "如果 str为 INT 类型，并且 str > 10000，则返回 NULL，并提示 Warning。",
            "obclient> SELECT STR_TO_DATE(10001,'%Y-%b-%D %r');\n+----------------------------------+\n| STR_TO_DATE(10001,'%Y-%b-%D %r') |\n+----------------------------------+\n| NULL                             |\n+----------------------------------+\n1 row in set, 1 warning\n",
            "如果 str 为字符串，则会将字符串尽可能转换为日期时间，并返回 1999-11-30 00:00:00 加 str 作为类型的日期时间；如果不能转换为日期时间，则返回 NULL。",
            "obclient> SELECT STR_TO_DATE('a2014-Jan-1st 5:5:5 pm', '%Y-%b-%D %r');\n+------------------------------------------------------+\n| STR_TO_DATE('a2014-Jan-1st 5:5:5 pm', '%Y-%b-%D %r') |\n+------------------------------------------------------+\n| NULL                                                 |\n+------------------------------------------------------+\n1 row in set, 1 warning\n\nobclient> SELECT STR_TO_DATE('a2014-Jan-1st 5:5:5 pm', 'a%Y-%b-%D %r');\n+-------------------------------------------------------+\n| STR_TO_DATE('a2014-Jan-1st 5:5:5 pm', 'a%Y-%b-%D %r') |\n+-------------------------------------------------------+\n| 2014-01-01 05:05:05                                   |\n+-------------------------------------------------------+\n1 row in set\n",
            "如果 str 为其他类型，则返回 NULL，并提示 Warning。",
            "obclient> SELECT STR_TO_DATE(1.6,'%Y-%b-%D %r');\n+--------------------------------+\n| STR_TO_DATE(1.6,'%Y-%b-%D %r') |\n+--------------------------------+\n| NULL                           |\n+--------------------------------+\n1 row in set, 1 warning\n\nobclient> SELECT STR_TO_DATE(pi(),'%Y-%b-%D %r');\n+---------------------------------+\n| STR_TO_DATE(pi(),'%Y-%b-%D %r') |\n+---------------------------------+\n| NULL                            |\n+---------------------------------+\n1 row in set, 1 warning\n",
            "有关 format 支持的格式，请参见 DATE_FORMAT。"
        ],
        "Examples": [
            "obclient> SELECT STR_TO_DATE('2014-Jan-1st 5:5:5 pm', '%Y-%b-%D %r');\n+-----------------------------------------------------+\n| STR_TO_DATE('2014-Jan-1st 5:5:5 pm', '%Y-%b-%D %r') |\n+-----------------------------------------------------+\n| 2014-01-01 05:05:05                                 |\n+-----------------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT STR_TO_DATE('2014-Jan-1st 5:5:5 pm', '%Y-%b-%D %r');\n+-----------------------------------------------------+\n| STR_TO_DATE('2014-Jan-1st 5:5:5 pm', '%Y-%b-%D %r') |\n+-----------------------------------------------------+\n| 2014-01-01 05:05:05                                 |\n+-----------------------------------------------------+\n1 row in set\n"
        ]
    },
    "SUBDATE": {
        "Title": [
            "SUBDATE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823406"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "SUBDATE(date,INTERVAL expr unit)\n\nSUBDATE(expr,days)\n",
        "Description": [],
        "Illustration": [
            "当 SUBDATE() 使用第二个参数 INTERVAL 的形式调用时，该函数是 DATE_SUB() 的同义词，用于返回日期时间 date 减去 expr 后的值。",
            "有关 INTERVAL 和 unit 参数的信息，请参见 DATE_ADD。",
            "SUBDATE(expr,days) 允许使用 days 的整数值。在这种情况下，它被解释为从日期或日期时间表达式 expr 中减去的天数。"
        ],
        "Examples": [
            "obclient> SELECT DATE_SUB('2022-01-02', INTERVAL 31 DAY);\n+-----------------------------------------+\n| DATE_SUB('2022-01-02', INTERVAL 31 DAY) |\n+-----------------------------------------+\n| 2021-12-02                              |\n+-----------------------------------------+\n1 row in set\n\nobclient> SELECT SUBDATE('2022-01-02', INTERVAL 31 DAY);\n+----------------------------------------+\n| SUBDATE('2022-01-02', INTERVAL 31 DAY) |\n+----------------------------------------+\n| 2021-12-02                             |\n+----------------------------------------+\n1 row in set\n\nobclient> SELECT SUBDATE('2022-01-02 12:00:00', 31);\n+------------------------------------+\n| SUBDATE('2022-01-02 12:00:00', 31) |\n+------------------------------------+\n| 2021-12-02 12:00:00                |\n+------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT DATE_SUB('2022-01-02', INTERVAL 31 DAY);\n+-----------------------------------------+\n| DATE_SUB('2022-01-02', INTERVAL 31 DAY) |\n+-----------------------------------------+\n| 2021-12-02                              |\n+-----------------------------------------+\n1 row in set\n\nobclient> SELECT SUBDATE('2022-01-02', INTERVAL 31 DAY);\n+----------------------------------------+\n| SUBDATE('2022-01-02', INTERVAL 31 DAY) |\n+----------------------------------------+\n| 2021-12-02                             |\n+----------------------------------------+\n1 row in set\n\nobclient> SELECT SUBDATE('2022-01-02 12:00:00', 31);\n+------------------------------------+\n| SUBDATE('2022-01-02 12:00:00', 31) |\n+------------------------------------+\n| 2021-12-02 12:00:00                |\n+------------------------------------+\n1 row in set\n"
        ]
    },
    "SUBSTR": {
        "Title": [
            "SUBSTR"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823465"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "SUBSTR(str, pos)\nSUBSTR(str, pos, len)\nSUBSTR(str FROM pos)         \nSUBSTR(str FROM pos FOR len)\n",
        "Description": [],
        "Illustration": [
            "返回 str 的子字符串，起始位置为 pos，长度为 len。参数中包含 NULL 时，返回 NULL。",
            "不指定 len 时，返回的子字符串从 pos 位置开始到 str 结尾。",
            "pos 值为负数时，从 str 尾部向头部倒序确定起始位置。",
            "len 小于等于 0，或 pos 指定的起始位置非法时，返回空字符串。"
        ],
        "Examples": [
            "obclient> SELECT\n     SUBSTR('abcdefg', 3),\n     SUBSTR('abcdefg', 3, 2),\n     SUBSTR('abcdefg', -3),\n     SUBSTR('abcdefg', 3, -2),\n     SUBSTR('abcdefg' from -4 for 2)\n     \\G\n*************************** 1. row ***************************\n           SUBSTR('abcdefg', 3): cdefg\n        SUBSTR('abcdefg', 3, 2): cd\n          SUBSTR('abcdefg', -3): efg\n       SUBSTR('abcdefg', 3, -2):\nSUBSTR('abcdefg' from -4 for 2): de\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT\n     SUBSTR('abcdefg', 3),\n     SUBSTR('abcdefg', 3, 2),\n     SUBSTR('abcdefg', -3),\n     SUBSTR('abcdefg', 3, -2),\n     SUBSTR('abcdefg' from -4 for 2)\n     \\G\n*************************** 1. row ***************************\n           SUBSTR('abcdefg', 3): cdefg\n        SUBSTR('abcdefg', 3, 2): cd\n          SUBSTR('abcdefg', -3): efg\n       SUBSTR('abcdefg', 3, -2):\nSUBSTR('abcdefg' from -4 for 2): de\n1 row in set\n"
        ]
    },
    "SUBSTRING": {
        "Title": [
            "SUBSTRING"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823458"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "SUBSTRING(str, pos)  \nSUBSTRING(str, pos, len)         \nSUBSTRING(str FROM pos)      \nSUBSTRING(str FROM pos FOR len)\n",
        "Description": [],
        "Illustration": [
            "返回 str 的子字符串，起始位置为 pos，长度为 len。参数中包含 NULL 时，返回 NULL。该函数是 SUBSTR() 的别名。",
            "不指定 len 时，返回的子字符串从 pos 位置开始到 str 结尾。",
            "pos 值为负数时，从 str 尾部向头部倒序确定起始位置。",
            "len 小于等于 0，或 pos 指定的起始位置非法时，返回空字符串。"
        ],
        "Examples": [
            "obclient> SELECT\n    SUBSTRING('abcdefg', 3),\n    SUBSTRING('abcdefg', 3, 2),\n    SUBSTRING('abcdefg', -3),\n    SUBSTRING('abcdefg', 3, -2),\n    SUBSTRING('abcdefg' from -4 for 2)\n    \\G\n*************************** 1. row ***************************\n           SUBSTRING('abcdefg', 3): cdefg\n        SUBSTRING('abcdefg', 3, 2): cd\n          SUBSTRING('abcdefg', -3): efg\n       SUBSTRING('abcdefg', 3, -2):\nSUBSTRING('abcdefg' from -4 for 2): de\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT\n    SUBSTRING('abcdefg', 3),\n    SUBSTRING('abcdefg', 3, 2),\n    SUBSTRING('abcdefg', -3),\n    SUBSTRING('abcdefg', 3, -2),\n    SUBSTRING('abcdefg' from -4 for 2)\n    \\G\n*************************** 1. row ***************************\n           SUBSTRING('abcdefg', 3): cdefg\n        SUBSTRING('abcdefg', 3, 2): cd\n          SUBSTRING('abcdefg', -3): efg\n       SUBSTRING('abcdefg', 3, -2):\nSUBSTRING('abcdefg' from -4 for 2): de\n1 row in set\n"
        ]
    },
    "SUBSTRING_INDEX": {
        "Title": [
            "SUBSTRING_INDEX"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823441"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "SUBSTRING_INDEX(str, delim, count)\n",
        "Description": [],
        "Illustration": [
            "在定界符 delim 以及 count 出现前，从字符串 str 返回字符串。",
            "如果 count 为正值，则返回最终定界符（从左边开始）左边的一切内容。",
            "如果 count 为负值，则返回定界符（从右边开始）右边的一切内容。",
            "如果任意一个参数为 NULL，返回 NULL；",
            "如果 str 或 delim 为空字符串，则返回空串；",
            "如果 count=0，也返回空串。",
            "*str、delim 和 count 参数支持数值与字符串的隐式转换。"
        ],
        "Examples": [
            "obclient> SELECT SUBSTRING_INDEX('ABCDABC', 'ABC', 0), SUBSTRING_INDEX('ABCDABC', 'ABC', 1), SUBSTRING_INDEX('ABCDABC', 'ABC', 2), SUBSTRING_INDEX('ABCDABC', 'ABC', 3), SUBSTRING_INDEX('ABCDABC', 'ABC', -1), SUBSTRING_INDEX('ABCDABC', 'ABC', -2), SUBSTRING_INDEX('ABCDABC', 'ABC', -3)\\G\n*************************** 1. row ***************************\n SUBSTRING_INDEX('ABCDABC', 'ABC', 0):\n SUBSTRING_INDEX('ABCDABC', 'ABC', 1):\n SUBSTRING_INDEX('ABCDABC', 'ABC', 2): ABCD\n SUBSTRING_INDEX('ABCDABC', 'ABC', 3): ABCDABC\nSUBSTRING_INDEX('ABCDABC', 'ABC', -1):\nSUBSTRING_INDEX('ABCDABC', 'ABC', -2): DABC\nSUBSTRING_INDEX('ABCDABC', 'ABC', -3): ABCDABC\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT SUBSTRING_INDEX('ABCDABC', 'ABC', 0), SUBSTRING_INDEX('ABCDABC', 'ABC', 1), SUBSTRING_INDEX('ABCDABC', 'ABC', 2), SUBSTRING_INDEX('ABCDABC', 'ABC', 3), SUBSTRING_INDEX('ABCDABC', 'ABC', -1), SUBSTRING_INDEX('ABCDABC', 'ABC', -2), SUBSTRING_INDEX('ABCDABC', 'ABC', -3)\\G\n*************************** 1. row ***************************\n SUBSTRING_INDEX('ABCDABC', 'ABC', 0):\n SUBSTRING_INDEX('ABCDABC', 'ABC', 1):\n SUBSTRING_INDEX('ABCDABC', 'ABC', 2): ABCD\n SUBSTRING_INDEX('ABCDABC', 'ABC', 3): ABCDABC\nSUBSTRING_INDEX('ABCDABC', 'ABC', -1):\nSUBSTRING_INDEX('ABCDABC', 'ABC', -2): DABC\nSUBSTRING_INDEX('ABCDABC', 'ABC', -3): ABCDABC\n1 row in set\n"
        ]
    },
    "SUBTIME": {
        "Title": [
            "SUBTIME"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823411"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "SUBTIME(expr1,expr2)\n",
        "Description": [],
        "Illustration": [
            "返回时间或时间日期表达式 expr1 与时间表达式 expr2 的差值，返回值的格式与 expr1 保持一致。"
        ],
        "Examples": [
            "obclient> SELECT SUBTIME('2021-07-14 19:12:59.999999','1 1:1:1.000002');\n+--------------------------------------------------------+\n| SUBTIME('2021-07-14 19:12:59.999999','1 1:1:1.000002') |\n+--------------------------------------------------------+\n| 2021-07-13 18:11:58.999997                             |\n+--------------------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT SUBTIME('2021-07-14 19:12:59.999999','1 1:1:1.000002');\n+--------------------------------------------------------+\n| SUBTIME('2021-07-14 19:12:59.999999','1 1:1:1.000002') |\n+--------------------------------------------------------+\n| 2021-07-13 18:11:58.999997                             |\n+--------------------------------------------------------+\n1 row in set\n"
        ]
    },
    "SUM": {
        "Title": [
            "SUM"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823025"
        ],
        "Category": [
            "Aggregate Functions",
            "Analysis Functions"
        ],
        "Feature": "SUM([DISTINCT | ALL] expr)\n",
        "Description": [],
        "Illustration": [
            "返回 expr 的总数。如果集合中无任何行，则返回 NULL。DISTINCT 关键字可用于求得 expr 不同值的总和。",
            "如果找不到匹配的行，该函数也会返回 NULL。"
        ],
        "Examples": [
            "obclient> SELECT * FROM oceanbasetest;\n+------+------+------+\n| id   | ip   | ip2  |\n+------+------+------+\n|    1 |    4 | NULL |\n|    3 |    3 | NULL |\n|    4 |    3 | NULL |\n+------+------+------+\n3 rows in set\n\nobclient> SELECT SUM(ip2),SUM(ip),SUM(DISTINCT(ip)) FROM oceanbasetest;\n+----------+---------+-------------------+\n| sum(ip2) | sum(ip) | sum(distinct(ip)) |\n+----------+---------+-------------------+\n|     NULL |      10 |                 7 |\n+----------+---------+-------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT * FROM oceanbasetest;\n+------+------+------+\n| id   | ip   | ip2  |\n+------+------+------+\n|    1 |    4 | NULL |\n|    3 |    3 | NULL |\n|    4 |    3 | NULL |\n+------+------+------+\n3 rows in set\n\nobclient> SELECT SUM(ip2),SUM(ip),SUM(DISTINCT(ip)) FROM oceanbasetest;\n+----------+---------+-------------------+\n| sum(ip2) | sum(ip) | sum(distinct(ip)) |\n+----------+---------+-------------------+\n|     NULL |      10 |                 7 |\n+----------+---------+-------------------+\n1 row in set\n"
        ]
    },
    "SYSDATE": {
        "Title": [
            "SYSDATE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823417"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "SYSDATE(fsp)\n",
        "Description": [],
        "Illustration": [
            "返回当前日期和时间，格式为 %Y-%m-%d %H.%i.%s。",
            "fsp 表示秒精度，即返回值的小数位秒部分包含多少位数字。有效值为 0 到 6 的整数，默认值为 0。"
        ],
        "Examples": [
            "obclient> SELECT SYSDATE();\n+---------------------+\n| SYSDATE()           |\n+---------------------+\n| 2021-07-15 14:10:06 |\n+---------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT SYSDATE();\n+---------------------+\n| SYSDATE()           |\n+---------------------+\n| 2021-07-15 14:10:06 |\n+---------------------+\n1 row in set\n"
        ]
    },
    "SYSTEM_USER": {
        "Title": [
            "SYSTEM_USER"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822970"
        ],
        "Category": [
            "Information Functions"
        ],
        "Feature": "SYSTEM_USER()\n",
        "Description": [],
        "Illustration": [
            "返回当前的用户名与主机名，该函数是 USER() 的同义词。"
        ],
        "Examples": [
            "obclient> SELECT SYSTEM_USER();\n+---------------------+\n| SYSTEM_USER()       |\n+---------------------+\n| root@xxx.xx.xxx.xxx |\n+---------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT SYSTEM_USER();\n+---------------------+\n| SYSTEM_USER()       |\n+---------------------+\n| root@xxx.xx.xxx.xxx |\n+---------------------+\n1 row in set\n"
        ]
    },
    "TAN": {
        "Title": [
            "TAN"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823348"
        ],
        "Category": [
            "Mathematical Functions"
        ],
        "Feature": "TAN(X)\n",
        "Description": [],
        "Illustration": [
            "返回给定弧度 X 的正切值。"
        ],
        "Examples": [
            "obclient> SELECT TAN(PI());\n+-------------------------+\n| TAN(PI())               |\n+-------------------------+\n| -1.2246467991473532e-16 |\n+-------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT TAN(PI());\n+-------------------------+\n| TAN(PI())               |\n+-------------------------+\n| -1.2246467991473532e-16 |\n+-------------------------+\n1 row in set\n"
        ]
    },
    "TIME": {
        "Title": [
            "TIME"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823429"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "TIME(datetime)\n",
        "Description": [],
        "Illustration": [
            "以 TIME 类型返回 datetime 的时间信息。"
        ],
        "Examples": [
            "obclient> SELECT TIME('2003-12-31 01:02:03');\n+-----------------------------+\n| TIME('2003-12-31 01:02:03') |\n+-----------------------------+\n| 01:02:03.000000             |\n+-----------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT TIME('2003-12-31 01:02:03');\n+-----------------------------+\n| TIME('2003-12-31 01:02:03') |\n+-----------------------------+\n| 01:02:03.000000             |\n+-----------------------------+\n1 row in set\n"
        ]
    },
    "TIMEDIFF": {
        "Title": [
            "TIMEDIFF"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823376"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "TIMEDIFF(date1, date2)\n",
        "Description": [],
        "Illustration": [
            "以 TIME 类型返回两个日期时间的时间间隔。"
        ],
        "Examples": [
            "obclient> SELECT\n     TIMEDIFF('2015-06-06 12:12:12', '2014-06-05 11:11:11'),\n     TIMEDIFF('2015-06-06 12:12:12', '2015-06-05 11:11:11')\n     \\G\n*************************** 1. row ***************************\nTIMEDIFF('2015-06-06 12:12:12', '2014-06-05 11:11:11'): 838:59:59\nTIMEDIFF('2015-06-06 12:12:12', '2015-06-05 11:11:11'): 25:01:01\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT\n     TIMEDIFF('2015-06-06 12:12:12', '2014-06-05 11:11:11'),\n     TIMEDIFF('2015-06-06 12:12:12', '2015-06-05 11:11:11')\n     \\G\n*************************** 1. row ***************************\nTIMEDIFF('2015-06-06 12:12:12', '2014-06-05 11:11:11'): 838:59:59\nTIMEDIFF('2015-06-06 12:12:12', '2015-06-05 11:11:11'): 25:01:01\n1 row in set\n"
        ]
    },
    "TIMESTAMP": {
        "Title": [
            "TIMESTAMP"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823372"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "TIMESTAMP(expr)\nTIMESTAMP(expr1,expr2)\n",
        "Description": [],
        "Illustration": [
            "第一种声明返回日期时间表达式 expr 的日期时间值。",
            "第二种声明返回日期时间表达式 expr1 与时间表达式 expr2 相加，返回日期时间表达式，如果 expr2 中包含日期，则也只取其中的时间值。",
            "如果任一参数为 NULL，则该函数返回 NULL。"
        ],
        "Examples": [
            "obclient> SELECT TIMESTAMP('2020-12-31');\n+----------------------------+\n| TIMESTAMP('2020-12-31')    |\n+----------------------------+\n| 2020-12-31 00:00:00.000000 |\n+----------------------------+\n1 row in set\n\nobclient> SELECT TIMESTAMP('2020-12-31 12:00:00','12:00:00');\n+---------------------------------------------+\n| TIMESTAMP('2020-12-31 12:00:00','12:00:00') |\n+---------------------------------------------+\n| 2021-01-01 00:00:00.000000                  |\n+---------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT TIMESTAMP('2020-12-31');\n+----------------------------+\n| TIMESTAMP('2020-12-31')    |\n+----------------------------+\n| 2020-12-31 00:00:00.000000 |\n+----------------------------+\n1 row in set\n\nobclient> SELECT TIMESTAMP('2020-12-31 12:00:00','12:00:00');\n+---------------------------------------------+\n| TIMESTAMP('2020-12-31 12:00:00','12:00:00') |\n+---------------------------------------------+\n| 2021-01-01 00:00:00.000000                  |\n+---------------------------------------------+\n1 row in set\n"
        ]
    },
    "TIMESTAMPADD": {
        "Title": [
            "TIMESTAMPADD"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823420"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "TIMESTAMPADD(unit, interval_expr, date)\n",
        "Description": [],
        "Illustration": [
            "日期时间的算术计算。",
            "该函数的作用与 DATE_ADD 相同，但 unit 只能是以下单位：",
            "MICROSECOND",
            "SECOND",
            "MINUTE",
            "HOUR",
            "DAY",
            "WEEK",
            "MONTH",
            "QUARTER",
            "YEAR"
        ],
        "Examples": [
            "obclient> SELECT\n     TIMESTAMPADD(DAY, -5, '2010-01-01 00:00:00'),\n     DATE_ADD('2010-01-01 00:00:00', INTERVAL -5 DAY)\n     \\G\n*************************** 1. row ***************************\n    TIMESTAMPADD(DAY, -5, '2010-01-01 00:00:00'): 2009-12-27 00:00:00\nDATE_ADD('2010-01-01 00:00:00', INTERVAL -5 DAY): 2009-12-27 00:00:00\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT\n     TIMESTAMPADD(DAY, -5, '2010-01-01 00:00:00'),\n     DATE_ADD('2010-01-01 00:00:00', INTERVAL -5 DAY)\n     \\G\n*************************** 1. row ***************************\n    TIMESTAMPADD(DAY, -5, '2010-01-01 00:00:00'): 2009-12-27 00:00:00\nDATE_ADD('2010-01-01 00:00:00', INTERVAL -5 DAY): 2009-12-27 00:00:00\n1 row in set\n"
        ]
    },
    "TIMESTAMPDIFF": {
        "Title": [
            "TIMESTAMPDIFF"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823405"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "TIMESTAMPDIFF(unit, date1, date2)\n",
        "Description": [],
        "Illustration": [
            "以 unit 为单位返回两个日期时间的间隔。unit 只能为 DATE_ADD 中的独立单位。"
        ],
        "Examples": [
            "obclient> SELECT\n     TIMESTAMPDIFF(SECOND, NOW(), '2011-01-01 11:11:11'),\n     TIMESTAMPDIFF(DAY, '2011-01-01 11:11:11', NOW())\n     \\G\n*************************** 1. row ***************************\nTIMESTAMPDIFF(SECOND, NOW(), '2011-01-01 11:11:11'): -231677498\n   TIMESTAMPDIFF(DAY, '2011-01-01 11:11:11', NOW()): 2681\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT\n     TIMESTAMPDIFF(SECOND, NOW(), '2011-01-01 11:11:11'),\n     TIMESTAMPDIFF(DAY, '2011-01-01 11:11:11', NOW())\n     \\G\n*************************** 1. row ***************************\nTIMESTAMPDIFF(SECOND, NOW(), '2011-01-01 11:11:11'): -231677498\n   TIMESTAMPDIFF(DAY, '2011-01-01 11:11:11', NOW()): 2681\n1 row in set\n"
        ]
    },
    "TIMESTAMP_TO_SCN": {
        "Title": [
            "TIMESTAMP_TO_SCN"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823319"
        ],
        "Category": [
            "Cast Functions"
        ],
        "Feature": "TIMESTAMP_TO_SCN(timestamp)\n",
        "Description": [],
        "Illustration": [
            "TIMESTAMP_TO_SCN() 函数将时间戳类型的参数作为输入并返回对应的 SCN（System Change Number）。该函数输入参数类型为 DATETIME 类型，返回的数据类型为 UINT64_T。"
        ],
        "Examples": [
            "obclient> SELECT TIMESTAMP_TO_SCN(\"2023-02-21 00:00:01\");\n+-----------------------------------------+\n| timestamp_to_scn(\"2023-02-21 00:00:01\") |\n+-----------------------------------------+\n|                     1676908801000000000 |\n+-----------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT TIMESTAMP_TO_SCN(\"2023-02-21 00:00:01\");\n+-----------------------------------------+\n| timestamp_to_scn(\"2023-02-21 00:00:01\") |\n+-----------------------------------------+\n|                     1676908801000000000 |\n+-----------------------------------------+\n1 row in set\n"
        ]
    },
    "TIME_FORMAT": {
        "Title": [
            "TIME_FORMAT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823380"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "TIME_FORMAT(time,format)\n",
        "Description": [],
        "Illustration": [
            "用法与 DATE_FORMAT 函数类似，但 format 只支持小时、分钟、秒和微秒的格式符。",
            "如果时间值 time 包含大于 23 的小时部分，%H 和 %k 小时格式说明符生成大于 0..23 的值，其他小时格式说明符生成小时值（模 12）。"
        ],
        "Examples": [
            "obclient> SELECT TIME_FORMAT('100:00:00', '%H %k %h %I %l');\n+--------------------------------------------+\n| TIME_FORMAT('100:00:00', '%H %k %h %I %l') |\n+--------------------------------------------+\n| 100 100 04 04 4                            |\n+--------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT TIME_FORMAT('100:00:00', '%H %k %h %I %l');\n+--------------------------------------------+\n| TIME_FORMAT('100:00:00', '%H %k %h %I %l') |\n+--------------------------------------------+\n| 100 100 04 04 4                            |\n+--------------------------------------------+\n1 row in set\n"
        ]
    },
    "TIME_TO_SEC": {
        "Title": [
            "TIME_TO_SEC"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823402"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "TIME_TO_SEC(time)\n",
        "Description": [],
        "Illustration": [
            "将时间类型参数 time 转换为秒。"
        ],
        "Examples": [
            "obclient> SELECT TIME_TO_SEC('22:23:00');\n+-------------------------+\n| TIME_TO_SEC('22:23:00') |\n+-------------------------+\n|                   80580 |\n+-------------------------+\n1 row in set\n\nobclient> SELECT TIME_TO_SEC('00:39:38');\n+-------------------------+\n| TIME_TO_SEC('00:39:38') |\n+-------------------------+\n|                    2378 |\n+-------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT TIME_TO_SEC('22:23:00');\n+-------------------------+\n| TIME_TO_SEC('22:23:00') |\n+-------------------------+\n|                   80580 |\n+-------------------------+\n1 row in set\n\nobclient> SELECT TIME_TO_SEC('00:39:38');\n+-------------------------+\n| TIME_TO_SEC('00:39:38') |\n+-------------------------+\n|                    2378 |\n+-------------------------+\n1 row in set\n"
        ]
    },
    "TIME_TO_USEC": {
        "Title": [
            "TIME_TO_USEC"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823413"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "TIME_TO_USEC(date)\n",
        "Description": [],
        "Illustration": [
            "将 date 值转换为距离 1970-01-01 00:00:00.000000 的微秒数，并考虑时区信息。",
            "date 可以表示日期，也可以表示日期时间。"
        ],
        "Examples": [
            "obclient> SELECT TIME_TO_USEC('2014-03-25'), TIME_TO_USEC(NOW());\n+----------------------------+---------------------+\n| TIME_TO_USEC('2014-03-25') | TIME_TO_USEC(NOW()) |\n+----------------------------+---------------------+\n|           1395676800000000 |    1525528100000000 |\n+----------------------------+---------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT TIME_TO_USEC('2014-03-25'), TIME_TO_USEC(NOW());\n+----------------------------+---------------------+\n| TIME_TO_USEC('2014-03-25') | TIME_TO_USEC(NOW()) |\n+----------------------------+---------------------+\n|           1395676800000000 |    1525528100000000 |\n+----------------------------+---------------------+\n1 row in set\n"
        ]
    },
    "TO_BASE64": {
        "Title": [
            "TO_BASE64"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823486"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "TO_BASE64(str)\n",
        "Description": [],
        "Illustration": [
            "将字符串参数转换为 base-64 编码形式。可以使用 FROM_BASE64 函数对 Base-64 编码的字符串进行解码，详细信息请参见 FROM_BASE64()。"
        ],
        "Examples": [
            "obclient> SELECT TO_BASE64('OB');\n+-----------------+\n| TO_BASE64('OB')\n+-----------------+\n| T0I=            |\n+-----------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT TO_BASE64('OB');\n+-----------------+\n| TO_BASE64('OB')\n+-----------------+\n| T0I=            |\n+-----------------+\n1 row in set\n"
        ]
    },
    "TO_DAYS": {
        "Title": [
            "TO_DAYS"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823414"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "TO_DAYS(date)\n",
        "Description": [],
        "Illustration": [
            "返回指定 date 值对应的天数。天数指距离 0000-01-01 的天数。"
        ],
        "Examples": [
            "obclient> SELECT TO_DAYS('2015-11-04'), TO_DAYS('20151104');\n+-----------------------+---------------------+\n| TO_DAYS('2015-11-04') | TO_DAYS('20151104') |\n+-----------------------+---------------------+\n|                736271 |              736271 |\n+-----------------------+---------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT TO_DAYS('2015-11-04'), TO_DAYS('20151104');\n+-----------------------+---------------------+\n| TO_DAYS('2015-11-04') | TO_DAYS('20151104') |\n+-----------------------+---------------------+\n|                736271 |              736271 |\n+-----------------------+---------------------+\n1 row in set\n"
        ]
    },
    "TO_SECONDS": {
        "Title": [
            "TO_SECONDS"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823369"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "TO_SECONDS(expr)\n",
        "Description": [],
        "Illustration": [
            "返回时间或日期时间表达式 expr 自公元零年起的秒数。如果 expr 为 NULL，则返回 NULL。"
        ],
        "Examples": [
            "obclient> SELECT TO_SECONDS(950501);\n+--------------------+\n| TO_SECONDS(950501) |\n+--------------------+\n|        62966505600 |\n+--------------------+\n1 row in set\n\nobclient> SELECT TO_SECONDS('2021-07-15');\n+--------------------------+\n| TO_SECONDS('2021-07-15') |\n+--------------------------+\n|              63793526400 |\n+--------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT TO_SECONDS(950501);\n+--------------------+\n| TO_SECONDS(950501) |\n+--------------------+\n|        62966505600 |\n+--------------------+\n1 row in set\n\nobclient> SELECT TO_SECONDS('2021-07-15');\n+--------------------------+\n| TO_SECONDS('2021-07-15') |\n+--------------------------+\n|              63793526400 |\n+--------------------------+\n1 row in set\n"
        ]
    },
    "TRIM": {
        "Title": [
            "TRIM"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823445"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "TRIM([[{BOTH | LEADING | TRAILING}] [remstr] FROM] str\n",
        "Description": [],
        "Illustration": [
            "删除字符串所有前缀和/或后缀，默认为 BOTH。参数中包含 NULL 时，返回 NULL。"
        ],
        "Examples": [
            "obclient> SELECT\n     TRIM(' bar '),\n     TRIM(LEADING 'x' FROM 'xxxbarxxx'),\n     TRIM(BOTH 'x' FROM 'xxxbarxxx'),\n     TRIM(TRAILING 'x' FROM 'xxxbarxxx')\n     \\G\n*************************** 1. row ***************************\n                      TRIM(' bar '): bar\n TRIM(LEADING 'x' FROM 'xxxbarxxx'): barxxx\n    TRIM(BOTH 'x' FROM 'xxxbarxxx'): bar\nTRIM(TRAILING 'x' FROM 'xxxbarxxx'): xxxbar\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT\n     TRIM(' bar '),\n     TRIM(LEADING 'x' FROM 'xxxbarxxx'),\n     TRIM(BOTH 'x' FROM 'xxxbarxxx'),\n     TRIM(TRAILING 'x' FROM 'xxxbarxxx')\n     \\G\n*************************** 1. row ***************************\n                      TRIM(' bar '): bar\n TRIM(LEADING 'x' FROM 'xxxbarxxx'): barxxx\n    TRIM(BOTH 'x' FROM 'xxxbarxxx'): bar\nTRIM(TRAILING 'x' FROM 'xxxbarxxx'): xxxbar\n1 row in set\n"
        ]
    },
    "TRUNCATE": {
        "Title": [
            "TRUNCATE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823355"
        ],
        "Category": [
            "Mathematical Functions"
        ],
        "Feature": "TRUNCATE(X,D)\n",
        "Description": [],
        "Illustration": [
            "返回 X 保留 D 位小数的结果。如果 D 为 0，则返回 X 的整数部分。如果 D 为负数，则使 X 的小数点左侧的 D 位数变成 0。"
        ],
        "Examples": [
            "obclient> SELECT TRUNCATE(3.27,1);\n+------------------+\n| TRUNCATE(3.27,1) |\n+------------------+\n|              3.2 |\n+------------------+\n1 row in set\n\nobclient> SELECT TRUNCATE(3.27,0);\n+------------------+\n| TRUNCATE(3.27,0) |\n+------------------+\n|                3 |\n+------------------+\n1 row in set\n\nobclient> SELECT TRUNCATE(3.27,-1);\n+-------------------+\n| TRUNCATE(3.27,-1) |\n+-------------------+\n|                 0 |\n+-------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT TRUNCATE(3.27,1);\n+------------------+\n| TRUNCATE(3.27,1) |\n+------------------+\n|              3.2 |\n+------------------+\n1 row in set\n\nobclient> SELECT TRUNCATE(3.27,0);\n+------------------+\n| TRUNCATE(3.27,0) |\n+------------------+\n|                3 |\n+------------------+\n1 row in set\n\nobclient> SELECT TRUNCATE(3.27,-1);\n+-------------------+\n| TRUNCATE(3.27,-1) |\n+-------------------+\n|                 0 |\n+-------------------+\n1 row in set\n"
        ]
    },
    "UCASE": {
        "Title": [
            "UCASE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823431"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "UCASE(str)\n",
        "Description": [],
        "Illustration": [
            "将字符串 str 中的小写字母转化为大写字母。该函数是 UPPER() 函数的同义词。"
        ],
        "Examples": [
            "obclient> SELECT UCASE('obclient您好！');\n+----------------------------+\n| UCASE('obclient您好！')    |\n+----------------------------+\n| OBCLIENT您好！             |\n+----------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT UCASE('obclient您好！');\n+----------------------------+\n| UCASE('obclient您好！')    |\n+----------------------------+\n| OBCLIENT您好！             |\n+----------------------------+\n1 row in set\n"
        ]
    },
    "UNCOMPRESS": {
        "Title": [
            "UNCOMPRESS"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822993"
        ],
        "Category": [
            "Encryption Functions"
        ],
        "Feature": "UNCOMPRESS(str)\n",
        "Description": [],
        "Illustration": [
            "解压缩由 COMPRESS() 函数压缩的字符串。"
        ],
        "Examples": [
            "obclient [test]> SELECT UNCOMPRESS(COMPRESS('abc'));\n+-----------------------------+\n| UNCOMPRESS(COMPRESS('abc')) |\n+-----------------------------+\n| abc                         |\n+-----------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient [test]> SELECT UNCOMPRESS(COMPRESS('abc'));\n+-----------------------------+\n| UNCOMPRESS(COMPRESS('abc')) |\n+-----------------------------+\n| abc                         |\n+-----------------------------+\n1 row in set\n"
        ]
    },
    "UNCOMPRESSED_LENGTH": {
        "Title": [
            "UNCOMPRESSED_LENGTH"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822998"
        ],
        "Category": [
            "Encryption Functions"
        ],
        "Feature": "UNCOMPRESSED_LENGTH(str)\n",
        "Description": [],
        "Illustration": [
            "返回压缩字符串在 COMPRESS() 函数压缩前的长度。"
        ],
        "Examples": [
            "obclient [test]> SELECT UNCOMPRESSED_LENGTH(COMPRESS('abc'));\n+--------------------------------------+\n| UNCOMPRESSED_LENGTH(COMPRESS('abc')) |\n+--------------------------------------+\n|                                    3 |\n+--------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient [test]> SELECT UNCOMPRESSED_LENGTH(COMPRESS('abc'));\n+--------------------------------------+\n| UNCOMPRESSED_LENGTH(COMPRESS('abc')) |\n+--------------------------------------+\n|                                    3 |\n+--------------------------------------+\n1 row in set\n"
        ]
    },
    "UNHEX": {
        "Title": [
            "UNHEX"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823453"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "UNHEX(str)\n",
        "Description": [],
        "Illustration": [
            "将字符串 str 中的十六进制数字转换为字节，该函数返回二进制字符串。",
            "字符串 str 中的字符必须为 0~9、A~F 与 a~f 中的值，如果字符串中含有任何非十六进制字符，则该函数返回 NULL。",
            "如果 str 是 BINARY 数据类型的列，并存在使用 0x00 填充的字节，则该函数也会返回 NULL。对于数字类型的参数 N，UNHEX(N) 并不是 HEX(N) 的逆运算，对于这种情况，您可以使用 CONV(HEX(N),16,10) 替代。",
            "特别地，您可以在客户端连接串中使用 --binary-as-hex 参数，表示将二进制字符串使用十六进制来表示。"
        ],
        "Examples": [
            "obclient> SELECT UNHEX('4f6365616e42617365');\n+-----------------------------+\n| UNHEX('4f6365616e42617365') |\n+-----------------------------+\n| OceanBase                   |\n+-----------------------------+\n1 row in set\n\nobclient> SELECT X'4f6365616e42617365';\n+-----------------------+\n| X'4f6365616e42617365' |\n+-----------------------+\n| OceanBase             |\n+-----------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT UNHEX('4f6365616e42617365');\n+-----------------------------+\n| UNHEX('4f6365616e42617365') |\n+-----------------------------+\n| OceanBase                   |\n+-----------------------------+\n1 row in set\n\nobclient> SELECT X'4f6365616e42617365';\n+-----------------------+\n| X'4f6365616e42617365' |\n+-----------------------+\n| OceanBase             |\n+-----------------------+\n1 row in set\n"
        ]
    },
    "UNIFORM": {
        "Title": [
            "UNIFORM"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823326"
        ],
        "Category": [
            "Mathematical Functions"
        ],
        "Feature": "UNIFORM(<min> , <max> , <gen>)\n",
        "Description": [],
        "Illustration": [
            "该函数返回一个符合均匀分布（Uniform Distribution）的整数或浮点数。",
            "min",
            ", ",
            "max",
            " 的取值必须是标量值，不随行迭代而变。例如，常量、标量函数等。PL 里还可以是 ",
            "@v1",
            "、",
            "1+@v3",
            " 等。",
            "MySQL 模式下，当 ",
            "min",
            " 或 ",
            "max",
            " 均为整数时，",
            "UNIFORM()",
            " 函数的输出结果为整数；否则，",
            "UNIFORM()",
            " 函数的输出结果为浮点数。",
            "gen",
            " 是一个数值生成函数，通常使用 ",
            "RANDOM()",
            " 函数生成。如果传入值是一个常量，则 ",
            "UNIFORM()",
            " 函数返回值也为一个定值。"
        ],
        "Examples": [
            "obclient> SELECT v, COUNT(*) FROM (SELECT UNIFORM(1, 10, RANDOM()) v FROM TABLE(GENERATOR(1000000))) x GROUP BY v ORDER BY v;\n+------+----------+\n| v    | count(*) |\n+------+----------+\n|    1 |   100738 |\n|    2 |   100119 |\n|    3 |   100223 |\n|    4 |    99537 |\n|    5 |   100125 |\n|    6 |   100001 |\n|    7 |   100275 |\n|    8 |    99235 |\n|    9 |    99837 |\n|   10 |    99910 |\n+------+----------+\n10 rows in set\n",
            "obclient> SELECT UNIFORM(0.0, 10, RANDOM()) FROM TABLE(GENERATOR(4)) ORDER BY 1;\n+----------------------------+\n| UNIFORM(0.0, 10, RANDOM()) |\n+----------------------------+\n|         2.3520877625884653 |\n|          4.155845987385725 |\n|          8.323930497420852 |\n|          9.844002748532109 |\n+----------------------------+\n4 rows in set\n\nobclient> SELECT UNIFORM(0, 10, RANDOM()) FROM TABLE(GENERATOR(4)) ORDER BY 1;\n+--------------------------+\n| UNIFORM(0, 10, RANDOM()) |\n+--------------------------+\n|                        0 |\n|                        4 |\n|                        8 |\n|                        9 |\n+--------------------------+\n4 rows in set\n"
        ],
        "Detailed Examples": [
            "如下示例为均匀生成 1~10 之间的整数。",
            "obclient> SELECT v, COUNT(*) FROM (SELECT UNIFORM(1, 10, RANDOM()) v FROM TABLE(GENERATOR(1000000))) x GROUP BY v ORDER BY v;\n+------+----------+\n| v    | count(*) |\n+------+----------+\n|    1 |   100738 |\n|    2 |   100119 |\n|    3 |   100223 |\n|    4 |    99537 |\n|    5 |   100125 |\n|    6 |   100001 |\n|    7 |   100275 |\n|    8 |    99235 |\n|    9 |    99837 |\n|   10 |    99910 |\n+------+----------+\n10 rows in set\n",
            "如下示例说明返回的结果类型和参数的类型有关。",
            "obclient> SELECT UNIFORM(0.0, 10, RANDOM()) FROM TABLE(GENERATOR(4)) ORDER BY 1;\n+----------------------------+\n| UNIFORM(0.0, 10, RANDOM()) |\n+----------------------------+\n|         2.3520877625884653 |\n|          4.155845987385725 |\n|          8.323930497420852 |\n|          9.844002748532109 |\n+----------------------------+\n4 rows in set\n\nobclient> SELECT UNIFORM(0, 10, RANDOM()) FROM TABLE(GENERATOR(4)) ORDER BY 1;\n+--------------------------+\n| UNIFORM(0, 10, RANDOM()) |\n+--------------------------+\n|                        0 |\n|                        4 |\n|                        8 |\n|                        9 |\n+--------------------------+\n4 rows in set\n"
        ]
    },
    "UNIX_TIMESTAMP": {
        "Title": [
            "UNIX_TIMESTAMP"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823418"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "UNIX_TIMESTAMP()\nUNIX_TIMESTAMP(date)\n",
        "Description": [],
        "Illustration": [
            "不指定 date 参数时，返回当前时间距离 '1970-01-01 00:00:00' 的秒数，需要考虑时区信息。",
            "指定 date 参数时，返回指定时间距离 '1970-01-01 00:00:00' 的秒数，需要考虑时区信息。"
        ],
        "Examples": [
            "obclient> SELECT UNIX_TIMESTAMP(), TIME_TO_USEC(NOW());\n+------------------+---------------------+\n| UNIX_TIMESTAMP() | TIME_TO_USEC(NOW()) |\n+------------------+---------------------+\n|       1525570561 |    1525570561000000 |\n+------------------+---------------------+\n1 row in set\n\nobclient> SELECT UNIX_TIMESTAMP('1997-10-04 22:23:00');\n+---------------------------------------+\n| UNIX_TIMESTAMP('1997-10-04 22:23:00') |\n+---------------------------------------+\n|                             875974980 |\n+---------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT UNIX_TIMESTAMP(), TIME_TO_USEC(NOW());\n+------------------+---------------------+\n| UNIX_TIMESTAMP() | TIME_TO_USEC(NOW()) |\n+------------------+---------------------+\n|       1525570561 |    1525570561000000 |\n+------------------+---------------------+\n1 row in set\n\nobclient> SELECT UNIX_TIMESTAMP('1997-10-04 22:23:00');\n+---------------------------------------+\n| UNIX_TIMESTAMP('1997-10-04 22:23:00') |\n+---------------------------------------+\n|                             875974980 |\n+---------------------------------------+\n1 row in set\n"
        ]
    },
    "UPDATEXML": {
        "Title": [
            "UPDATEXML"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823283"
        ],
        "Category": [
            "XML Functions"
        ],
        "Feature": "UPDATEXML(xml_target, xpath_expr, new_xml)\n",
        "Description": [
            "该函数用于更新 XML 字符串中指定路径的节点内容。"
        ],
        "Illustration": [
            "\n说明\n将 xml_target 中被 xpath_expr 指定的部分替换为 new_xml。如果 xpath_expr 没有匹配到结果或者匹配到多个结果，就返回 xml_target 原始结果。\n",
            "\n\n\n字段\n说明\n\n\n\n\nxml_target\n指定的 XML 字符串，可以是一个 XML 文档或片段。\n\n\nxpath_expr\n指定要更新的节点的路径（XPath）表达式。\n\n\nnew_xml\n指定要替换节点的新 XML 片段。\n\n\n",
            "返回类型为 LONGTEXT。"
        ],
        "Examples": [
            "obclient [test_db]> SELECT UPDATEXML('<a/><b/>', '/a', '<x>carrot</x>');\n",
            "+----------------------------------------------+\n| UPDATEXML('<a/><b/>', '/a', '<x>carrot</x>') |\n+----------------------------------------------+\n| <x>carrot</x><b></b>                         |\n+----------------------------------------------+\n1 row in set\n",
            "obclient [test_db]> SELECT UPDATEXML('<root><a>aaa</a></root>', '/root/a', '<b>bbb</b>');\n",
            "+---------------------------------------------------------------+\n| UPDATEXML('<root><a>aaa</a></root>', '/root/a', '<b>bbb</b>') |\n+---------------------------------------------------------------+\n| <root><b>bbb</b></root>                                       |\n+---------------------------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "使用 UPDATEXML 函数将 XML 字符串中的 </a> 节点替换为 <x>carrot</x> 节点，并返回更新后的 XML 字符串。<a/><b/> 表示一个包含了两个节点 <a> 和 <b> 的根节点。",
            "obclient [test_db]> SELECT UPDATEXML('<a/><b/>', '/a', '<x>carrot</x>');\n",
            "返回结果如下：",
            "+----------------------------------------------+\n| UPDATEXML('<a/><b/>', '/a', '<x>carrot</x>') |\n+----------------------------------------------+\n| <x>carrot</x><b></b>                         |\n+----------------------------------------------+\n1 row in set\n",
            "使用 UPDATEXML 函数将 XML 字符串中的 root 节点下的 a 节点替换为 <b>bbb</b> 节点，并返回更新后的 XML 字符串。",
            "obclient [test_db]> SELECT UPDATEXML('<root><a>aaa</a></root>', '/root/a', '<b>bbb</b>');\n",
            "返回结果如下：",
            "+---------------------------------------------------------------+\n| UPDATEXML('<root><a>aaa</a></root>', '/root/a', '<b>bbb</b>') |\n+---------------------------------------------------------------+\n| <root><b>bbb</b></root>                                       |\n+---------------------------------------------------------------+\n1 row in set\n"
        ]
    },
    "UPPER": {
        "Title": [
            "UPPER"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823471"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "UPPER(str)\n",
        "Description": [],
        "Illustration": [
            "将字符串 str 中的小写字母转化为大写字母。"
        ],
        "Examples": [
            "obclient> obclient> SELECT UPPER('obclient您好！');\n+----------------------------+\n| UPPER('obclient您好！')    |\n+----------------------------+\n| OBCLIENT您好！             |\n+----------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> obclient> SELECT UPPER('obclient您好！');\n+----------------------------+\n| UPPER('obclient您好！')    |\n+----------------------------+\n| OBCLIENT您好！             |\n+----------------------------+\n1 row in set\n"
        ]
    },
    "USEC_TO_TIME": {
        "Title": [
            "USEC_TO_TIME"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823423"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "USEC_TO_TIME(usec)\n",
        "Description": [
            "USEC_TO_TIME 函数用于将微秒数（usec）转换为 TIMESTAMP 类型的值。OceanBase 数据库使用的时区是 UTC（协调世界时）。因此，将微秒数转换为 TIMESTAMP 时，系统会考虑时区信息，并以 UTC 时区为准。"
        ],
        "Illustration": [
            "\n\n\n参数\n说明\n\n\n\n\nusec\n需要转换为 TIMESTAMP 类型值。usec 表示距离 1970-01-01 00:00:00.000000 的微秒数。\n\n\n"
        ],
        "Examples": [
            "obclient> SELECT USEC_TO_TIME(1);\n+----------------------------+\n| USEC_TO_TIME(1)            |\n+----------------------------+\n| 1970-01-01 08:00:00.000001 |\n+----------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT USEC_TO_TIME(1);\n+----------------------------+\n| USEC_TO_TIME(1)            |\n+----------------------------+\n| 1970-01-01 08:00:00.000001 |\n+----------------------------+\n1 row in set\n"
        ]
    },
    "USER": {
        "Title": [
            "USER"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822976"
        ],
        "Category": [
            "Information Functions"
        ],
        "Feature": "USER()\n",
        "Description": [],
        "Illustration": [
            "返回当前的用户名与主机名，返回值使用的字符集为 utf8mb4。"
        ],
        "Examples": [
            "obclient> SELECT USER();\n+---------------------+\n| USER()              |\n+---------------------+\n| root@xxx.xx.xxx.xxx |\n+---------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT USER();\n+---------------------+\n| USER()              |\n+---------------------+\n| root@xxx.xx.xxx.xxx |\n+---------------------+\n1 row in set\n"
        ]
    },
    "UTC_DATE": {
        "Title": [
            "UTC_DATE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823391"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "UTC_DATE([fsp])\n",
        "Description": [],
        "Illustration": [
            "将当前 UTC 日期以 %Y-%m-%d 格式返回。",
            "fsp 参数用于指定日期精度，有效值为 0 到 6 之间的整数。"
        ],
        "Examples": [
            "obclient> SELECT UTC_DATE(), UTC_DATE() + 0, UTC_DATE() + 6;\n+------------+----------------+----------------+\n| UTC_DATE() | UTC_DATE() + 0 | UTC_DATE() + 6 |\n+------------+----------------+----------------+\n| 2021-07-14 |       20210714 |       20210720 |\n+------------+----------------+----------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT UTC_DATE(), UTC_DATE() + 0, UTC_DATE() + 6;\n+------------+----------------+----------------+\n| UTC_DATE() | UTC_DATE() + 0 | UTC_DATE() + 6 |\n+------------+----------------+----------------+\n| 2021-07-14 |       20210714 |       20210720 |\n+------------+----------------+----------------+\n1 row in set\n"
        ]
    },
    "UTC_TIME": {
        "Title": [
            "UTC_TIME"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823393"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "UTC_TIME([fsp])\n",
        "Description": [],
        "Illustration": [
            "将当前 UTC 时间以 %H:%i:%s 格式返回。",
            "fsp 参数用于指定分秒精度，有效值为 0 到 6 之间的整数。"
        ],
        "Examples": [
            "obclient> SELECT UTC_TIME(), UTC_TIME() + 0, UTC_TIME() + 6;\n+------------+----------------+----------------+\n| UTC_TIME() | UTC_TIME() + 0 | UTC_TIME() + 6 |\n+------------+----------------+----------------+\n| 13:07:35   |         130735 |         130741 |\n+------------+----------------+----------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT UTC_TIME(), UTC_TIME() + 0, UTC_TIME() + 6;\n+------------+----------------+----------------+\n| UTC_TIME() | UTC_TIME() + 0 | UTC_TIME() + 6 |\n+------------+----------------+----------------+\n| 13:07:35   |         130735 |         130741 |\n+------------+----------------+----------------+\n1 row in set\n"
        ]
    },
    "UTC_TIMESTAMP": {
        "Title": [
            "UTC_TIMESTAMP"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823390"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "UTC_TIMESTAMP([fsp])\n",
        "Description": [],
        "Illustration": [
            "将当前 UTC 时间以 %Y-%m-%d %H:%i:%s 格式返回。",
            "fsp 参数用于指定分秒精度，有效值为 0 到 6 之间的整数。"
        ],
        "Examples": [
            "obclient> SELECT UTC_TIMESTAMP(), UTC_TIMESTAMP() + 0, UTC_TIMESTAMP() + 6;\n+---------------------+---------------------+---------------------+\n| UTC_TIMESTAMP()     | UTC_TIMESTAMP() + 0 | UTC_TIMESTAMP() + 6 |\n+---------------------+---------------------+---------------------+\n| 2021-07-13 13:10:28 |      20210713131028 |      20210713131034 |\n+---------------------+---------------------+---------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT UTC_TIMESTAMP(), UTC_TIMESTAMP() + 0, UTC_TIMESTAMP() + 6;\n+---------------------+---------------------+---------------------+\n| UTC_TIMESTAMP()     | UTC_TIMESTAMP() + 0 | UTC_TIMESTAMP() + 6 |\n+---------------------+---------------------+---------------------+\n| 2021-07-13 13:10:28 |      20210713131028 |      20210713131034 |\n+---------------------+---------------------+---------------------+\n1 row in set\n"
        ]
    },
    "UUID": {
        "Title": [
            "UUID"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822940"
        ],
        "Category": [
            "Miscellaneous Functions"
        ],
        "Feature": "uuid()\n",
        "Description": [],
        "Illustration": [
            "生成一个全局唯一 ID。"
        ],
        "Examples": [
            "obclient> SELECT UUID();\n+--------------------------------------+\n| UUID()                               |\n+--------------------------------------+\n| eef95d17-e944-11eb-824a-ca1fa9040697 |\n+--------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT UUID();\n+--------------------------------------+\n| UUID()                               |\n+--------------------------------------+\n| eef95d17-e944-11eb-824a-ca1fa9040697 |\n+--------------------------------------+\n1 row in set\n"
        ]
    },
    "UUID_SHORT": {
        "Title": [
            "UUID_SHORT"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822945"
        ],
        "Category": [
            "Miscellaneous Functions"
        ],
        "Feature": "UUID_SHORT()\n",
        "Description": [],
        "Illustration": [
            "以 64 位无符号整数形式返回\"短\"通用标识符。",
            "如果满足以下条件，则 UUID_SHORT() 的返回值是保证唯一的：",
            "当前服务器的 server_id 值介于 0 到 255 之间，并且在一组源服务器和副本服务器中是唯一的。如果server_id 总数大于 256，则生成的\"短\"通用标识符无法保证空间唯一性，尽管此函数不会报错。",
            "不要在 OBServer 重新启动期间设置服务器主机的系统时间。",
            "在 OBServer 重新启动期间平均每秒调用 UUID_SHORT() 少于 1600 万次。",
            "UUID_SHORT() 返回值的构造如下：",
            "(server_id & 255) << 56\n+ (server_startup_time_in_seconds << 24)\n+ incremented_variable++;\n"
        ],
        "Examples": [
            "obclient> SELECT UUID_SHORT();\n+-----------------------+\n|          UUID_SHORT() |\n+-----------------------+\n| 92395783831158784 |\n+-----------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT UUID_SHORT();\n+-----------------------+\n|          UUID_SHORT() |\n+-----------------------+\n| 92395783831158784 |\n+-----------------------+\n1 row in set\n"
        ]
    },
    "UUID_TO_BIN": {
        "Title": [
            "UUID_TO_BIN"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822955"
        ],
        "Category": [
            "Miscellaneous Functions"
        ],
        "Feature": "UUID_TO_BIN(string_uuid), UUID_TO_BIN(string_uuid, swap_flag)\n",
        "Description": [],
        "Illustration": [
            "UUID_TO_BIN() 将字符串 UUID 转换为二进制 UUID 并返回结果。有关字符串 UUID 格式的详细信息，请参见 **IS_UUID()**。 UUID_TO_BIN() 返回的二进制 UUID 是一个 VARBINARY(16) 值。如果 UUID 参数为 NULL，则返回值为 NULL。如果某一参数无效，则会发生报错。 UUID_TO_BIN() 的语法包括单参数和双参数两种形式，说明如下：",
            "单参数形式指定字符串 UUID 值。二进制结果与字符串参数的顺序相同。",
            "双参数形式指定字符串 UUID 值和 ",
            "swap_flag",
            " 值： \n    ",
            "\n如果 swap_flag 为 0，则双参数形式等同于单参数形式，返回的二进制结果与字符串参数的顺序相同。\n如果 swap_flag 为 1，则返回值的格式是不同的，会将时间低和时间高部分（分别是十六进制数字的第一组和第三组）进行交换，即将变化较快的部分向右移动。如果结果存储在索引列中，可以提高索引的效率。\n",
            "如果 ",
            "swap_flag",
            " 为 0，则双参数形式等同于单参数形式，返回的二进制结果与字符串参数的顺序相同。",
            "如果 ",
            "swap_flag",
            " 为 1，则返回值的格式是不同的，会将时间低和时间高部分（分别是十六进制数字的第一组和第三组）进行交换，即将变化较快的部分向右移动。如果结果存储在索引列中，可以提高索引的效率。",
            "时间部分的交换被假定为使用 UUID 版本 1 的值，例如由 UUID() 函数生成的值。对于不遵循版本 1 格式的其他方式生成的 UUID 值，时间部分的交换是不适用的。"
        ],
        "Examples": [
            "SET @uuid = '6ccd780c-abcd-1026-9564-5b8c656024db';\n",
            "obclient> SELECT HEX(UUID_TO_BIN(@uuid));\n+----------------------------------+\n| HEX(UUID_TO_BIN(@uuid))          |\n+----------------------------------+\n| 6CCD780CABCD102695645B8C656024DB |\n+----------------------------------+\n1 row in set\n\nobclient> SELECT HEX(UUID_TO_BIN(@uuid, 0));\n+----------------------------------+\n| HEX(UUID_TO_BIN(@uuid, 0))       |\n+----------------------------------+\n| 6CCD780CABCD102695645B8C656024DB |\n+----------------------------------+\n1 row in set\n\nobclient> SELECT HEX(UUID_TO_BIN(@uuid, 1));\n+----------------------------------+\n| HEX(UUID_TO_BIN(@uuid, 1))       |\n+----------------------------------+\n| 1026ABCD6CCD780C95645B8C656024DB |\n+----------------------------------+\n1 row in set\n",
            "obclient> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid));\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid))      |\n+--------------------------------------+\n| 6ccd780c-abcd-1026-9564-5b8c656024db |\n+--------------------------------------+\n1 row in set\n\nobclient> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid,0),0);\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid,0),0)  |\n+--------------------------------------+\n| 6ccd780c-abcd-1026-9564-5b8c656024db |\n+--------------------------------------+\n1 row in set\n\nobclient> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid,1),1);\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid,1),1)  |\n+--------------------------------------+\n| 6ccd780c-abcd-1026-9564-5b8c656024db |\n+--------------------------------------+\n1 row in set\n",
            "obclient> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid,0),1);\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid,0),1)  |\n+--------------------------------------+\n| abcd1026-780c-6ccd-9564-5b8c656024db |\n+--------------------------------------+\n1 row in set\n\nobclient> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid,1),0);\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid,1),0)  |\n+--------------------------------------+\n| 1026abcd-6ccd-780c-9564-5b8c656024db |\n+--------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "以如下字符串 UUID 值为例：",
            "SET @uuid = '6ccd780c-abcd-1026-9564-5b8c656024db';\n",
            "使用两种形式的 UUID_TO_BIN() 进行转换：",
            "obclient> SELECT HEX(UUID_TO_BIN(@uuid));\n+----------------------------------+\n| HEX(UUID_TO_BIN(@uuid))          |\n+----------------------------------+\n| 6CCD780CABCD102695645B8C656024DB |\n+----------------------------------+\n1 row in set\n\nobclient> SELECT HEX(UUID_TO_BIN(@uuid, 0));\n+----------------------------------+\n| HEX(UUID_TO_BIN(@uuid, 0))       |\n+----------------------------------+\n| 6CCD780CABCD102695645B8C656024DB |\n+----------------------------------+\n1 row in set\n\nobclient> SELECT HEX(UUID_TO_BIN(@uuid, 1));\n+----------------------------------+\n| HEX(UUID_TO_BIN(@uuid, 1))       |\n+----------------------------------+\n| 1026ABCD6CCD780C95645B8C656024DB |\n+----------------------------------+\n1 row in set\n",
            "使用 BIN_TO_UUID() 将 UUID_TO_BIN() 返回的二进制 UUID 转换为字符串 UUID。如果您使用第二个参数 1 调用 UUID_TO_BIN() 通过交换时间部分来生成二进制 UUID，您还应该将第二个参数 1 传递给 BIN_TO_UUID()，这样才能在将二进制 UUID 转换回字符串 UUID 时取消交换时间部分。",
            "obclient> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid));\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid))      |\n+--------------------------------------+\n| 6ccd780c-abcd-1026-9564-5b8c656024db |\n+--------------------------------------+\n1 row in set\n\nobclient> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid,0),0);\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid,0),0)  |\n+--------------------------------------+\n| 6ccd780c-abcd-1026-9564-5b8c656024db |\n+--------------------------------------+\n1 row in set\n\nobclient> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid,1),1);\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid,1),1)  |\n+--------------------------------------+\n| 6ccd780c-abcd-1026-9564-5b8c656024db |\n+--------------------------------------+\n1 row in set\n",
            "如果两个方向的时间部分交换的转换方式不相同，则原始 UUID 无法正确恢复：",
            "obclient> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid,0),1);\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid,0),1)  |\n+--------------------------------------+\n| abcd1026-780c-6ccd-9564-5b8c656024db |\n+--------------------------------------+\n1 row in set\n\nobclient> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid,1),0);\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid,1),0)  |\n+--------------------------------------+\n| 1026abcd-6ccd-780c-9564-5b8c656024db |\n+--------------------------------------+\n1 row in set\n"
        ]
    },
    "VALIDATE_PASSWORD_STRENGTH": {
        "Title": [
            "VALIDATE_PASSWORD_STRENGTH"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822986"
        ],
        "Category": [
            "Encryption Functions"
        ],
        "Feature": "VALIDATE_PASSWORD_STRENGTH(str)\n",
        "Description": [],
        "Illustration": [
            "对指定的密码字符串，返回一个整数以指示密码的强度。返回值范围从 0（弱）到 100（强）。密码评估涉及的系统变量，可通过 SHOW VARIABLES LIKE 'validate_password%'; 进行查看。"
        ],
        "Examples": [
            "obclient [test]> SELECT VALIDATE_PASSWORD_STRENGTH('ob$_@123');\n+----------------------------------------------+\n| VALIDATE_PASSWORD_STRENGTH('ob$_@123') |\n+----------------------------------------------+\n|                                          100 |\n+----------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient [test]> SELECT VALIDATE_PASSWORD_STRENGTH('ob$_@123');\n+----------------------------------------------+\n| VALIDATE_PASSWORD_STRENGTH('ob$_@123') |\n+----------------------------------------------+\n|                                          100 |\n+----------------------------------------------+\n1 row in set\n"
        ]
    },
    "VALUES": {
        "Title": [
            "VALUES"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822942"
        ],
        "Category": [
            "Miscellaneous Functions"
        ],
        "Feature": "VALUES(col_name)\n",
        "Description": [],
        "Illustration": [
            "VALUES() 函数仅用于 INSERT ... ON DUPLICATE KEY UPDATE 语句，在其他用法中，该函数只会返回 NULL。",
            "对于 INSERT ... ON DUPLICATE KEY UPDATE 语句，UPDATE 子句可以使用 VALUES(col_name) 函数引用 INSERT 语句中的列值。"
        ],
        "Examples": [
            "obclient> INSERT INTO table (a,b,c) VALUES (1,2,3),(4,5,6) ON DUPLICATE KEY UPDATE c=VALUES(a)+VALUES(b);\nQuery OK, 2 rows affected\nRecords: 2  Duplicates: 0  Warnings: 0\n"
        ],
        "Detailed Examples": [
            "obclient> INSERT INTO table (a,b,c) VALUES (1,2,3),(4,5,6) ON DUPLICATE KEY UPDATE c=VALUES(a)+VALUES(b);\nQuery OK, 2 rows affected\nRecords: 2  Duplicates: 0  Warnings: 0\n"
        ]
    },
    "VARIANCE": {
        "Title": [
            "VARIANCE"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823022"
        ],
        "Category": [
            "Aggregate Functions",
            "Analysis Functions"
        ],
        "Feature": "VARIANCE(expr)\n",
        "Description": [],
        "Illustration": [
            "返回表达式 expr 的总体标准方差，该函数是 VAR_POP() 的别名。",
            "如果没有匹配到行，则该函数返回 NULL。"
        ],
        "Examples": [
            "obclient> CREATE TABLE employees (manager_id INT,last_name VARCHAR(50),hiredate VARCHAR(50),salary INT);\nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-01', 1700);\nINSERT INTO employees VALUES(100, 'De Haan', '2018-05-01',11000);      \nINSERT INTO employees VALUES(100, 'Errazuriz', '2017-07-21', 1400);\nINSERT INTO employees VALUES(100, 'Hartstein', '2019-05-01',14000);     \nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-22', 1700);\nINSERT INTO employees VALUES(100, 'Weiss',  '2019-07-11',13500);     \nINSERT INTO employees VALUES(100, 'Russell', '2019-10-05', 13000);\nINSERT INTO employees VALUES(100, 'Partners',  '2018-12-01',14000);     \nINSERT INTO employees VALUES(200, 'Ross',  '2019-06-11',13500);     \nINSERT INTO employees VALUES(200, 'Bell', '2019-05-25', 13000);\nINSERT INTO employees VALUES(200, 'Part',  '2018-08-11',14000);   \nCOMMIT;\n\nobclient> SELECT VARIANCE(salary) FROM employees;\n+-------------------+\n| VARIANCE(salary)  |\n+-------------------+\n| 27561983.47107438 |\n+-------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> CREATE TABLE employees (manager_id INT,last_name VARCHAR(50),hiredate VARCHAR(50),salary INT);\nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-01', 1700);\nINSERT INTO employees VALUES(100, 'De Haan', '2018-05-01',11000);      \nINSERT INTO employees VALUES(100, 'Errazuriz', '2017-07-21', 1400);\nINSERT INTO employees VALUES(100, 'Hartstein', '2019-05-01',14000);     \nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-22', 1700);\nINSERT INTO employees VALUES(100, 'Weiss',  '2019-07-11',13500);     \nINSERT INTO employees VALUES(100, 'Russell', '2019-10-05', 13000);\nINSERT INTO employees VALUES(100, 'Partners',  '2018-12-01',14000);     \nINSERT INTO employees VALUES(200, 'Ross',  '2019-06-11',13500);     \nINSERT INTO employees VALUES(200, 'Bell', '2019-05-25', 13000);\nINSERT INTO employees VALUES(200, 'Part',  '2018-08-11',14000);   \nCOMMIT;\n\nobclient> SELECT VARIANCE(salary) FROM employees;\n+-------------------+\n| VARIANCE(salary)  |\n+-------------------+\n| 27561983.47107438 |\n+-------------------+\n1 row in set\n"
        ]
    },
    "VAR_POP": {
        "Title": [
            "VAR_POP"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823030"
        ],
        "Category": [
            "Aggregate Functions",
            "Analysis Functions"
        ],
        "Feature": "VAR_POP(expr)\n",
        "Description": [],
        "Illustration": [
            "返回表达式 expr 的总体标准方差。",
            "如果没有匹配到行，则该函数返回 NULL。"
        ],
        "Examples": [
            "obclient> CREATE TABLE employees (manager_id INT,last_name VARCHAR(50),hiredate VARCHAR(50),salary INT);\nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-01', 1700);\nINSERT INTO employees VALUES(100, 'De Haan', '2018-05-01',11000);      \nINSERT INTO employees VALUES(100, 'Errazuriz', '2017-07-21', 1400);\nINSERT INTO employees VALUES(100, 'Hartstein', '2019-05-01',14000);     \nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-22', 1700);\nINSERT INTO employees VALUES(100, 'Weiss',  '2019-07-11',13500);     \nINSERT INTO employees VALUES(100, 'Russell', '2019-10-05', 13000);\nINSERT INTO employees VALUES(100, 'Partners',  '2018-12-01',14000);     \nINSERT INTO employees VALUES(200, 'Ross',  '2019-06-11',13500);     \nINSERT INTO employees VALUES(200, 'Bell', '2019-05-25', 13000);\nINSERT INTO employees VALUES(200, 'Part',  '2018-08-11',14000);   \nCOMMIT;\n\nobclient> SELECT VAR_POP(salary) FROM employees;\n+-------------------+\n| VAR_POP(salary)   |\n+-------------------+\n| 27561983.47107438 |\n+-------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> CREATE TABLE employees (manager_id INT,last_name VARCHAR(50),hiredate VARCHAR(50),salary INT);\nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-01', 1700);\nINSERT INTO employees VALUES(100, 'De Haan', '2018-05-01',11000);      \nINSERT INTO employees VALUES(100, 'Errazuriz', '2017-07-21', 1400);\nINSERT INTO employees VALUES(100, 'Hartstein', '2019-05-01',14000);     \nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-22', 1700);\nINSERT INTO employees VALUES(100, 'Weiss',  '2019-07-11',13500);     \nINSERT INTO employees VALUES(100, 'Russell', '2019-10-05', 13000);\nINSERT INTO employees VALUES(100, 'Partners',  '2018-12-01',14000);     \nINSERT INTO employees VALUES(200, 'Ross',  '2019-06-11',13500);     \nINSERT INTO employees VALUES(200, 'Bell', '2019-05-25', 13000);\nINSERT INTO employees VALUES(200, 'Part',  '2018-08-11',14000);   \nCOMMIT;\n\nobclient> SELECT VAR_POP(salary) FROM employees;\n+-------------------+\n| VAR_POP(salary)   |\n+-------------------+\n| 27561983.47107438 |\n+-------------------+\n1 row in set\n"
        ]
    },
    "VAR_SAMP": {
        "Title": [
            "VAR_SAMP"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823020"
        ],
        "Category": [
            "Aggregate Functions",
            "Analysis Functions"
        ],
        "Feature": "VAR_SAMP(expr)\n",
        "Description": [],
        "Illustration": [
            "返回 expr 的样本方差。当计算包含一个值的表达式的样本方差时，该函数返回 NULL。",
            "如果没有匹配到行，则该函数返回 NULL。"
        ],
        "Examples": [
            "obclient> CREATE TABLE employees (manager_id INT,last_name varchar(50),hiredate varchar(50),SALARY INT);\nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-01', 1700);\nINSERT INTO employees VALUES(100, 'De Haan', '2018-05-01',11000);      \nINSERT INTO employees VALUES(100, 'Errazuriz', '2017-07-21', 1400);\nINSERT INTO employees VALUES(100, 'Hartstein', '2019-05-01',14000);     \nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-22', 1700);\nINSERT INTO employees VALUES(100, 'Weiss',  '2019-07-11',13500);     \nINSERT INTO employees VALUES(100, 'Russell', '2019-10-05', 13000);\nINSERT INTO employees VALUES(100, 'Partners',  '2018-12-01',14000);     \nINSERT INTO employees VALUES(200, 'Ross',  '2019-06-11',13500);     \nINSERT INTO employees VALUES(200, 'Bell', '2019-05-25', 13000);\nINSERT INTO employees VALUES(200, 'Part',  '2018-08-11',14000);   \nCOMMIT;\n\n\nobclient> SELECT VAR_SAMP(salary) FROM employees;\n+-----------------------------------------------+\n| VAR_SAMP(salary)                              |\n+-----------------------------------------------+\n| 30318181.818181818181818181818181818181818181 |\n+-----------------------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> CREATE TABLE employees (manager_id INT,last_name varchar(50),hiredate varchar(50),SALARY INT);\nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-01', 1700);\nINSERT INTO employees VALUES(100, 'De Haan', '2018-05-01',11000);      \nINSERT INTO employees VALUES(100, 'Errazuriz', '2017-07-21', 1400);\nINSERT INTO employees VALUES(100, 'Hartstein', '2019-05-01',14000);     \nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-22', 1700);\nINSERT INTO employees VALUES(100, 'Weiss',  '2019-07-11',13500);     \nINSERT INTO employees VALUES(100, 'Russell', '2019-10-05', 13000);\nINSERT INTO employees VALUES(100, 'Partners',  '2018-12-01',14000);     \nINSERT INTO employees VALUES(200, 'Ross',  '2019-06-11',13500);     \nINSERT INTO employees VALUES(200, 'Bell', '2019-05-25', 13000);\nINSERT INTO employees VALUES(200, 'Part',  '2018-08-11',14000);   \nCOMMIT;\n\n\nobclient> SELECT VAR_SAMP(salary) FROM employees;\n+-----------------------------------------------+\n| VAR_SAMP(salary)                              |\n+-----------------------------------------------+\n| 30318181.818181818181818181818181818181818181 |\n+-----------------------------------------------+\n1 row in set\n"
        ]
    },
    "VERSION": {
        "Title": [
            "VERSION"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822984"
        ],
        "Category": [
            "Information Functions"
        ],
        "Feature": "VERSION()\n",
        "Description": [],
        "Illustration": [
            "返回当前 OceanBase 数据库与 MySQL 兼容的版本号，字符集为 utf8mb4。"
        ],
        "Examples": [
            "obclient> SELECT VERSION();\n+---------------------------+\n| VERSION()                 |\n+---------------------------+\n| 5.7.25-OceanBase-v4.1.0.0 |\n+---------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT VERSION();\n+---------------------------+\n| VERSION()                 |\n+---------------------------+\n| 5.7.25-OceanBase-v4.1.0.0 |\n+---------------------------+\n1 row in set\n"
        ]
    },
    "WEEK": {
        "Title": [
            "WEEK"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823387"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "WEEK(date[,mode])\n",
        "Description": [],
        "Illustration": [
            "返回日期或日期时间类型 date 所指定的周在一年中的位置。",
            "mode 参数表示确定周数计算的逻辑，其取值范围与含义如下表所示。",
            "\n\n\n取值\n周的第一天\n范围\n含义\n\n\n\n\n0\n星期日\n0~53\n第一个星期日的周记为该年的第一周\n\n\n1\n星期一\n0~53\n包含四天以上的周记为该年的第一周\n\n\n2\n星期日\n1~53\n第一个星期日的周记为该年的第一周\n\n\n3\n星期一\n1~53\n包含四天以上的周记为该年的第一周\n\n\n4\n星期日\n0~53\n包含四天以上的周记为该年的第一周\n\n\n5\n星期一\n0~53\n第一个星期一的周记为该年的第一周\n\n\n6\n星期日\n1~53\n包含四天以上的周记为该年的第一周\n\n\n7\n星期一\n1~53\n第一个星期一的周记为该年的第一周\n\n\n",
            "\n说明\n如果指定的日期是该年的第一天，则该函数可能会返回上一年的最后一周。\n"
        ],
        "Examples": [
            "obclient> SELECT WEEK('2021-01-01',0);\n+----------------------+\n| WEEK('2021-01-01',0) |\n+----------------------+\n|                    0 |\n+----------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT WEEK('2021-01-01',0);\n+----------------------+\n| WEEK('2021-01-01',0) |\n+----------------------+\n|                    0 |\n+----------------------+\n1 row in set\n"
        ]
    },
    "WEEKDAY": {
        "Title": [
            "WEEKDAY"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823399"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "WEEKDAY(date)\n",
        "Description": [],
        "Illustration": [
            "返回日期或日期时间类型 date 在一周中的位置。"
        ],
        "Examples": [
            "obclient> SELECT WEEKDAY('2021-07-16 00:00:00');\n+--------------------------------+\n| WEEKDAY('2020-07-16 00:00:00') |\n+--------------------------------+\n|                              5 |\n+--------------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT WEEKDAY('2021-07-16 00:00:00');\n+--------------------------------+\n| WEEKDAY('2020-07-16 00:00:00') |\n+--------------------------------+\n|                              5 |\n+--------------------------------+\n1 row in set\n"
        ]
    },
    "WEEKOFYEAR": {
        "Title": [
            "WEEKOFYEAR"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823426"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "WEEKOFYEAR(date)\n",
        "Description": [],
        "Illustration": [
            "返回日期或时间日期类型 date 所指定的周在一年中的位置。"
        ],
        "Examples": [
            "obclient> SELECT WEEKOFYEAR('2020-07-16');\n+--------------------------+\n| WEEKOFYEAR('2020-07-16') |\n+--------------------------+\n|                       29 |\n+--------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT WEEKOFYEAR('2020-07-16');\n+--------------------------+\n| WEEKOFYEAR('2020-07-16') |\n+--------------------------+\n|                       29 |\n+--------------------------+\n1 row in set\n"
        ]
    },
    "WEIGHT_STRING": {
        "Title": [
            "WEIGHT_STRING"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823435"
        ],
        "Category": [
            "String Functions"
        ],
        "Feature": "WEIGHT_STRING(str [AS {CHAR|BINARY}(N)] [LEVEL levels] [flags])\n\nlevels:\n   N [ASC|DESC|REVERSE] [, N [ASC|DESC|REVERSE]] ...\n",
        "Description": [],
        "Illustration": [
            "WEIGHT_STRING() 函数返回输入字符串的权重，返回值是一个二进制字符串，表示字符串的比较和排序值。比较规则如下：",
            "如果 WEIGHT_STRING(str1) = WEIGHT_STRING(str2)，则 str1 = str2（即 str1 和 str2 相等）。",
            "如果 WEIGHT_STRING(str1) < WEIGHT_STRING(str2)，则 str1 < str2（即 str1 排在 str2 之前）。",
            "WEIGHT_STRING() 函数仅供内部调试使用，可用于测试和调试排序规则，尤其是在添加新排序规则的场景。",
            "语法说明",
            "WEIGHT_STRING() 函数的语法解释如下：",
            "\n\n\n关键字\n说明\n\n\n\n\nstr\n输入的字符串表达式。 \n      \n如果输入是非二进制（字符）的字符串，例如 CHAR、VARCHAR 或 TEXT 值，则返回值包含字符串的排序规则权重。\n如果输入是二进制（字节）的字符串，例如 BINARY、VARBINARY 或 BLOB 值，则返回值与输入相同（二进制字符串中每个字节的权重就是字节值）。\n如果输入为 NULL，则返回 NULL。\n 对于非 NULL 返回值，如果其长度在 VARBINARY 的最大长度范围内，则该值的数据类型为 VARBINARY，否则数据类型为 BLOB。\n\n\nAS\n该子句将输入字符串转换为指定的类型和长度，为可选项。\n\n\nLEVEL\n该子句指定返回值的权重级别，为可选项。\n\n\nflags\n此参数暂未使用，为可选项。\n\n\n",
            "AS 子句使用说明",
            "AS 子句可以将输入字符串强制转换为非二进制或二进制字符串，并将其强制设置为指定长度，使用说明如下：",
            "AS CHAR(N) 将字符串转换为非二进制字符串，并在右侧用空格填充到 N（N>=1） 个字符的长度。如果 N 小于输入字符串的长度，则字符串将被截断为 N 个字符，而且截断时不会发出告警。",
            "AS BINARY(N) 将字符串转换为二进制字符串，N 以字节（不是字符）为单位，填充使用 0x00 字节（不是空格）。",
            "示例如下：",
            "obclient> SELECT HEX(WEIGHT_STRING('ab' AS CHAR(4)));\n+-------------------------------------+\n| HEX(WEIGHT_STRING('ab' AS CHAR(4))) |\n+-------------------------------------+\n| 41422020                            |\n+-------------------------------------+\n1 row in set\n\nobclient> SELECT HEX(WEIGHT_STRING('ab' AS BINARY(4)));\n+---------------------------------------+\n| HEX(WEIGHT_STRING('ab' AS BINARY(4))) |\n+---------------------------------------+\n| 61620000                              |\n+---------------------------------------+\n1 row in set\n",
            "LEVEL 子句使用说明",
            "LEVEL 子句可以用来指定返回值应该包含排序规则级别的权重。多个级别可以使用逗号（，）分隔形成列表的形式，连续多个级别可以使用破折号（-）标定范围。例如 LEVEL1-5。",
            "一般遵从以下规则：",
            "任何小于 1 的级别都被视为 1。任何大于输入字符串排序规则最大值的级别都被视为排序规则的最大值。最大值因排序规则而异，但永远不会大于 6。",
            "在级别列表中的级别必须按递增顺序排列。在某个级别范围内，如果第二个数字小于第一个数字，则将其视为与第一个数字相同（例如，3-2 与 3-3 等同）。",
            "如果省略 LEVEL 子句，则假定 LEVEL 1 - max，其中 max 是排序规则的最大级别。",
            "如果 LEVEL 子句使用列表表示法（而不是范围表示法），则级别编号后面可以使用以下修饰符：",
            "\nASC：返回权重且不做任何修改。这是默认设置。\nDESC：返回按位反转的权重。\nREVERSE：以相反的顺序返回权重（即反转字符串，第一个字符排在最后，最后一个字符排在前）。\n",
            "ASC：返回权重且不做任何修改。这是默认设置。",
            "DESC：返回按位反转的权重。",
            "REVERSE：以相反的顺序返回权重（即反转字符串，第一个字符排在最后，最后一个字符排在前）。",
            "示例如下：",
            "obclient> SELECT HEX(WEIGHT_STRING(0x56af LEVEL 1));\n+------------------------------------+\n| HEX(WEIGHT_STRING(0x56af LEVEL 1)) |\n+------------------------------------+\n| 56AF                               |\n+------------------------------------+\n1 row in set\n\nobclient> SELECT HEX(WEIGHT_STRING(0x56af LEVEL 1 DESC));\n+-----------------------------------------+\n| HEX(WEIGHT_STRING(0x56af LEVEL 1 DESC)) |\n+-----------------------------------------+\n| A950                                    |\n+-----------------------------------------+\n1 row in set\n\nobclient> SELECT HEX(WEIGHT_STRING(0x56af LEVEL 1 REVERSE ));\n+---------------------------------------------+\n| HEX(WEIGHT_STRING(0x56af LEVEL 1 REVERSE )) |\n+---------------------------------------------+\n| AF56                                        |\n+---------------------------------------------+\n1 row in set\n\nobclient> SELECT HEX(WEIGHT_STRING(0x56af LEVEL 1 DESC REVERSE ));\n+--------------------------------------------------+\n| HEX(WEIGHT_STRING(0x56af LEVEL 1 DESC REVERSE )) |\n+--------------------------------------------------+\n| 50A9                                             |\n+--------------------------------------------------+\n1 row in set\n"
        ],
        "Examples": [
            "obclient> SET @s = CAST('AB' AS BINARY);\nQuery OK, 0 rows affected\n\nobclient> SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));\n+------+---------+------------------------+\n| @s   | HEX(@s) | HEX(WEIGHT_STRING(@s)) |\n+------+---------+------------------------+\n| AB   | 4142    | 4142                   |\n+------+---------+------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "求二进制字符串\"AB\"的权重，并使用 HEX() 来显示 WEIGHT_STRING() 结果。",
            "obclient> SET @s = CAST('AB' AS BINARY);\nQuery OK, 0 rows affected\n\nobclient> SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));\n+------+---------+------------------------+\n| @s   | HEX(@s) | HEX(WEIGHT_STRING(@s)) |\n+------+---------+------------------------+\n| AB   | 4142    | 4142                   |\n+------+---------+------------------------+\n1 row in set\n"
        ]
    },
    "YEAR": {
        "Title": [
            "YEAR"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823421"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "YEAR(date)\n",
        "Description": [],
        "Illustration": [
            "返回 date 值的年份信息。"
        ],
        "Examples": [
            "obclient> SELECT YEAR('1987-01-01');\n+--------------------+\n| YEAR('1987-01-01') |\n+--------------------+\n|               1987 |\n+--------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT YEAR('1987-01-01');\n+--------------------+\n| YEAR('1987-01-01') |\n+--------------------+\n|               1987 |\n+--------------------+\n1 row in set\n"
        ]
    },
    "YEARWEEK": {
        "Title": [
            "YEARWEEK"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823379"
        ],
        "Category": [
            "Date and Time Functions"
        ],
        "Feature": "YEARWEEK(date[,mode])\n",
        "Description": [],
        "Illustration": [
            "返回日期或日期时间类型 date 的年份，以及周在一年中的位置。",
            "mode 参数表示确定周数计算的逻辑，其取值范围与含义如下表所示。",
            "\n\n\n取值\n周的第一天\n范围\n含义\n\n\n\n\n0\n星期日\n0~53\n第一个星期日的周记为该年的第一周\n\n\n1\n星期一\n0~53\n包含四天以上的周记为该年的第一周\n\n\n2\n星期日\n1~53\n第一个星期日的周记为该年的第一周\n\n\n3\n星期一\n1~53\n包含四天以上的周记为该年的第一周\n\n\n4\n星期日\n0~53\n包含四天以上的周记为该年的第一周\n\n\n5\n星期一\n0~53\n第一个星期一的周记为该年的第一周\n\n\n6\n星期日\n1~53\n包含四天以上的周记为该年的第一周\n\n\n7\n星期一\n1~53\n第一个星期一的周记为该年的第一周\n\n\n",
            "\n说明\n如果指定的日期是该年的第一天，则该函数可能会返回上一年的最后一周。\n"
        ],
        "Examples": [
            "obclient> SELECT YEARWEEK('2021-01-01');\n+------------------------+\n| YEARWEEK('2021-01-01') |\n+------------------------+\n|                 202052 |\n+------------------------+\n1 row in set\n"
        ],
        "Detailed Examples": [
            "obclient> SELECT YEARWEEK('2021-01-01');\n+------------------------+\n| YEARWEEK('2021-01-01') |\n+------------------------+\n|                 202052 |\n+------------------------+\n1 row in set\n"
        ]
    },
    "ZIPF": {
        "Title": [
            "ZIPF"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823350"
        ],
        "Category": [
            "Mathematical Functions"
        ],
        "Feature": "ZIPF(<s> , <N> , <gen>)\n",
        "Description": [],
        "Illustration": [
            "该函数返回一个符合齐夫分布（Zipf-distributed）的整数，取值范围为 [0, N)，分区的特征指数为 s。",
            "s",
            " 为特征指数，",
            "s",
            " 越大生成的序列越倾斜。将序列绘制成曲线时，曲线越陡峭。",
            "s",
            " 和 ",
            "N",
            " 取值要求：必须是一个标量值，不随行迭代而变。例如，整形或浮点型常量、标量函数等，PL 里还可以是 ",
            "@v1",
            "、",
            "1+@v3",
            " 等。",
            "s",
            " 的取值范围为 [1, +∞)，",
            "N",
            " 的取值范围为 [1，16777215]。",
            "zipf",
            " 算法实现时消耗的存储、计算资源和 ",
            "N",
            " 的取值相关。算法空间复杂度为 ",
            "O(N)",
            "，每生成一个整数的时间复杂度为 ",
            "O(logN)",
            "。所以，",
            "N",
            " 的取值范围被限制为 [1, 16777215]。",
            "gen",
            " 是一个数值生成函数，通常使用 ",
            "RANDOM()",
            " 函数生成。如果传入值是一个常量，则 ",
            "zipf()",
            " 函数返回值也为一个定值。"
        ],
        "Examples": [
            "obclient> SELECT ZIPF(1, 10, RANDOM()) FROM TABLE(GENERATOR(6));\n+-----------------------+\n| ZIPF(1, 10, RANDOM()) |\n+-----------------------+\n|                     4 |\n|                     5 |\n|                     2 |\n|                     1 |\n|                     0 |\n|                     2 |\n+-----------------------+\n6 rows in set\n\nobclient> SELECT ZIPF(1, 10, 0415) FROM TABLE(GENERATOR(6));\n+-------------------+\n| ZIPF(1, 10, 0415) |\n+-------------------+\n|                 8 |\n|                 8 |\n|                 8 |\n|                 8 |\n|                 8 |\n|                 8 |\n+-------------------+\n6 rows in set\n\nobclient> SELECT ZIPF(ABS(-1), 23, RANDOM()) FROM DUAL;\n+-----------------------------+\n| ZIPF(ABS(-1), 23, RANDOM()) |\n+-----------------------------+\n|                           1 |\n+-----------------------------+\n1 row in set\n",
            "obclient> SELECT  COUNT(*), ZIPF(1, 10, RANDOM()) v FROM TABLE(GENERATOR(10000)) GROUP BY v ORDER BY 1;\n+----------+------+\n| COUNT(*) | v    |\n+----------+------+\n|      350 |    9 |\n|      369 |    8 |\n|      450 |    7 |\n|      488 |    6 |\n|      559 |    5 |\n|      727 |    4 |\n|      877 |    3 |\n|     1100 |    2 |\n|     1755 |    1 |\n|     3325 |    0 |\n+----------+------+\n10 rows in set\n\nobclient> SELECT COUNT(*), ZIPF(2, 10, RANDOM()) v FROM TABLE(GENERATOR(10000)) GROUP BY v ORDER BY 1;\n+----------+------+\n| COUNT(*) | v    |\n+----------+------+\n|       69 |    9 |\n|       73 |    8 |\n|      102 |    7 |\n|      118 |    6 |\n|      187 |    5 |\n|      260 |    4 |\n|      419 |    3 |\n|      679 |    2 |\n|     1632 |    1 |\n|     6461 |    0 |\n+----------+------+\n10 rows in set\n\nobclient> SELECT COUNT(*), ZIPF(3, 10, RANDOM()) v FROM TABLE(GENERATOR(10000)) GROUP BY v ORDER BY 1;\n+----------+------+\n| COUNT(*) | v    |\n+----------+------+\n|        6 |    9 |\n|       12 |    8 |\n|       15 |    7 |\n|       35 |    5 |\n|       40 |    6 |\n|       77 |    4 |\n|      118 |    3 |\n|      292 |    2 |\n|     1106 |    1 |\n|     8299 |    0 |\n+----------+------+\n10 rows in set\n\nobclient> SELECT COUNT(*), ZIPF(4, 10, RANDOM()) v FROM TABLE(GENERATOR(10000)) GROUP BY v ORDER BY 1;\n+----------+------+\n| COUNT(*) | v    |\n+----------+------+\n|        1 |    8 |\n|        1 |    7 |\n|        1 |    9 |\n|        2 |    5 |\n|        6 |    6 |\n|       19 |    4 |\n|       35 |    3 |\n|      120 |    2 |\n|      548 |    1 |\n|     9267 |    0 |\n+----------+------+\n10 rows in set\n\nobclient> SELECT COUNT(*), ZIPF(5, 10, RANDOM()) v FROM TABLE(GENERATOR(10000)) GROUP BY v ORDER BY 1;\n+----------+------+\n| COUNT(*) | v    |\n+----------+------+\n|        2 |    5 |\n|        3 |    4 |\n|       18 |    3 |\n|       31 |    2 |\n|      309 |    1 |\n|     9637 |    0 |\n+----------+------+\n6 rows in set\n"
        ],
        "Detailed Examples": [
            "如下示例为使用 ZIPF() 函数返回符合齐夫分布的整数。",
            "obclient> SELECT ZIPF(1, 10, RANDOM()) FROM TABLE(GENERATOR(6));\n+-----------------------+\n| ZIPF(1, 10, RANDOM()) |\n+-----------------------+\n|                     4 |\n|                     5 |\n|                     2 |\n|                     1 |\n|                     0 |\n|                     2 |\n+-----------------------+\n6 rows in set\n\nobclient> SELECT ZIPF(1, 10, 0415) FROM TABLE(GENERATOR(6));\n+-------------------+\n| ZIPF(1, 10, 0415) |\n+-------------------+\n|                 8 |\n|                 8 |\n|                 8 |\n|                 8 |\n|                 8 |\n|                 8 |\n+-------------------+\n6 rows in set\n\nobclient> SELECT ZIPF(ABS(-1), 23, RANDOM()) FROM DUAL;\n+-----------------------------+\n| ZIPF(ABS(-1), 23, RANDOM()) |\n+-----------------------------+\n|                           1 |\n+-----------------------------+\n1 row in set\n",
            "ZIPF() 函数的 s 取值对分布存在影响，示例如下。",
            "obclient> SELECT  COUNT(*), ZIPF(1, 10, RANDOM()) v FROM TABLE(GENERATOR(10000)) GROUP BY v ORDER BY 1;\n+----------+------+\n| COUNT(*) | v    |\n+----------+------+\n|      350 |    9 |\n|      369 |    8 |\n|      450 |    7 |\n|      488 |    6 |\n|      559 |    5 |\n|      727 |    4 |\n|      877 |    3 |\n|     1100 |    2 |\n|     1755 |    1 |\n|     3325 |    0 |\n+----------+------+\n10 rows in set\n\nobclient> SELECT COUNT(*), ZIPF(2, 10, RANDOM()) v FROM TABLE(GENERATOR(10000)) GROUP BY v ORDER BY 1;\n+----------+------+\n| COUNT(*) | v    |\n+----------+------+\n|       69 |    9 |\n|       73 |    8 |\n|      102 |    7 |\n|      118 |    6 |\n|      187 |    5 |\n|      260 |    4 |\n|      419 |    3 |\n|      679 |    2 |\n|     1632 |    1 |\n|     6461 |    0 |\n+----------+------+\n10 rows in set\n\nobclient> SELECT COUNT(*), ZIPF(3, 10, RANDOM()) v FROM TABLE(GENERATOR(10000)) GROUP BY v ORDER BY 1;\n+----------+------+\n| COUNT(*) | v    |\n+----------+------+\n|        6 |    9 |\n|       12 |    8 |\n|       15 |    7 |\n|       35 |    5 |\n|       40 |    6 |\n|       77 |    4 |\n|      118 |    3 |\n|      292 |    2 |\n|     1106 |    1 |\n|     8299 |    0 |\n+----------+------+\n10 rows in set\n\nobclient> SELECT COUNT(*), ZIPF(4, 10, RANDOM()) v FROM TABLE(GENERATOR(10000)) GROUP BY v ORDER BY 1;\n+----------+------+\n| COUNT(*) | v    |\n+----------+------+\n|        1 |    8 |\n|        1 |    7 |\n|        1 |    9 |\n|        2 |    5 |\n|        6 |    6 |\n|       19 |    4 |\n|       35 |    3 |\n|      120 |    2 |\n|      548 |    1 |\n|     9267 |    0 |\n+----------+------+\n10 rows in set\n\nobclient> SELECT COUNT(*), ZIPF(5, 10, RANDOM()) v FROM TABLE(GENERATOR(10000)) GROUP BY v ORDER BY 1;\n+----------+------+\n| COUNT(*) | v    |\n+----------+------+\n|        2 |    5 |\n|        3 |    4 |\n|       18 |    3 |\n|       31 |    2 |\n|      309 |    1 |\n|     9637 |    0 |\n+----------+------+\n6 rows in set\n"
        ]
    },
    "`JSON_TABLE` 函数": {
        "Title": [
            "`JSON_TABLE` 函数"
        ],
        "HTML": [
            "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822934"
        ],
        "Category": [
            "JSON Functions"
        ],
        "Feature": "JSON_TABLE(expr, path_literal COLUMNS (column_list)) [AS] alias\n\ncolumn_list:\n    column[, column...]\n\ncolumn:\n    column_name FOR ORDINALITY\n    | column_name data_type PATH path_literal [json_value_on_empty_clause] [json_value_on_error_clause]\n    | column_name data_type EXISTS PATH path_literal\n    | NESTED [PATH] path_literal COLUMNS (column_list)\n\njson_value_on_empty_clause:\n    {NULL | DEFAULT json_string | ERROR} ON EMPTY\n\njson_value_on_error_clause:\n    {NULL | DEFAULT json_string | ERROR} ON ERROR\n",
        "Description": [
            "JSON_TABLE() 函数子级路径（path），可以从嵌套的 JSON 数据中提取所需信息。",
            "JSON_TABLE() 函数用于将 JSON 数据从半结构化数据转为结构化数据，即从 JSON 文档中提取数据并返回具有指定列的关系表。通过将 JSON 数据的各个部分映射到一个虚拟表的行和列，它创建了一个清晰的表结构，这不仅便于执行查询操作，还允许用户将这些数据插入到新的表或视图中以进行进一步处理。",
            "JSON_TABLE() 为每一个 JSON 值提供了列输出，对于 JSON 内的数组，也提供了多行（列）输出。"
        ],
        "Illustration": [
            "JSON_TABLE() 必须用在 SELECT 语句的 FROM 子句中。",
            "JSON_TABLE() 函数语法说明如下：",
            "expr: 指定转换为 JSON 数据的输入表达式，如果表达式不可以转成 JSON 数据则会报错。",
            "path_literal：指定 Path 路径的字符串，输入其他类型数据或者非正确的 Path 路径信息则会报错。",
            "column_list：指定所输入的列定义信息，在表达式中至少包含一个列定义参数，否则会报错。",
            "column：指定具体的列定义信息，具体可以分为如下四类：",
            "\ncolumn_name FOR ORDINALITYFOR 子句用于为当前输出行提供行号，其中 column_name 是 INT 类型的列。\ncolumn_name data_type PATH path_literal [json_value_on_empty_clause] [json_value_on_error_clause] 子句用于提取 path_literal 指定的数据为 JSON 并强制转换为列类型。如果缺失值会触发可选的 json_value_on_empty_clause 子句。\ncolumn_name data_type EXISTS PATH path_literal 子句：如果 path_literal 指定的位置存在任何数据，则此列返回 1，否则返回 0。\nNESTED [PATH] path_literal COLUMNS (column_list) 子句表示重复的嵌套结构，可以在其中继续定义 column 的四种列类型。\n",
            "column_name FOR ORDINALITYFOR 子句用于为当前输出行提供行号，其中 column_name 是 INT 类型的列。",
            "column_name data_type PATH path_literal [json_value_on_empty_clause] [json_value_on_error_clause] 子句用于提取 path_literal 指定的数据为 JSON 并强制转换为列类型。如果缺失值会触发可选的 json_value_on_empty_clause 子句。",
            "column_name data_type EXISTS PATH path_literal 子句：如果 path_literal 指定的位置存在任何数据，则此列返回 1，否则返回 0。",
            "NESTED [PATH] path_literal COLUMNS (column_list) 子句表示重复的嵌套结构，可以在其中继续定义 column 的四种列类型。",
            "data_type：指定数据类型，当前支持 OceanBase 数据库 MySQL 模式下除 ENUM 和 SET 之外的所有数据类型。",
            "alias：指定表别名。",
            "json_value_on_empty_clause：如果经过 Path 筛选的数据是空值时用户可选的预期行为，可选行为包含三种：NULL、ERROR 和默认值 DEFAULT。",
            "\nNULL ON EMPTY：将该列设置为 NULL，为默认行为。\nDEFAULT json_string：将 json_string 解析为默认值取代 JSON 对象或者数组。OceanBase 数据库允许行为默认值为任意类型的常量数据。\nERROR ON EMPTY：抛出错误。\n",
            "NULL ON EMPTY",
            "：将该列设置为 ",
            "NULL",
            "，为默认行为。",
            "DEFAULT json_string",
            "：将 ",
            "json_string",
            " 解析为默认值取代 JSON 对象或者数组。OceanBase 数据库允许行为默认值为任意类型的常量数据。",
            "ERROR ON EMPTY",
            "：抛出错误。",
            "json_value_on_error_clause：如果表达式执行期间发生错误，用户可以使用预期的行为去覆盖该错误，可选择的行为包含三种：NULL、ERROR 和默认值 DEFAULT。可选行为和 json_value_on_empty_clause 一致。",
            "以下场景会触发可选的 json_value_on_error_clause 子句。",
            "\nexpr 不是格式正确的 JSON 数据\n使用 JSON 路径表达式计算 JSON 数据时发现非标量值\n使用 JSON 路径表达式计算 JSON 数据时未找到匹配项。\n所指定的返回值数据类型不够大，无法容纳返回值。\n",
            "expr 不是格式正确的 JSON 数据",
            "使用 JSON 路径表达式计算 JSON 数据时发现非标量值",
            "使用 JSON 路径表达式计算 JSON 数据时未找到匹配项。",
            "所指定的返回值数据类型不够大，无法容纳返回值。"
        ],
        "Examples": [],
        "Detailed Examples": []
    }
}