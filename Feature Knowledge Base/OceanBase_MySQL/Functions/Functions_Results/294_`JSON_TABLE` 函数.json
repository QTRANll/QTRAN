{
    "HTML": [
        "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822934"
    ],
    "Title": [
        "`JSON_TABLE` 函数"
    ],
    "Feature": [
        "JSON_TABLE(expr, path_literal COLUMNS (column_list)) [AS] alias\n\ncolumn_list:\n    column[, column...]\n\ncolumn:\n    column_name FOR ORDINALITY\n    | column_name data_type PATH path_literal [json_value_on_empty_clause] [json_value_on_error_clause]\n    | column_name data_type EXISTS PATH path_literal\n    | NESTED [PATH] path_literal COLUMNS (column_list)\n\njson_value_on_empty_clause:\n    {NULL | DEFAULT json_string | ERROR} ON EMPTY\n\njson_value_on_error_clause:\n    {NULL | DEFAULT json_string | ERROR} ON ERROR\n"
    ],
    "Description": [
        "JSON_TABLE() 函数子级路径（path），可以从嵌套的 JSON 数据中提取所需信息。",
        "JSON_TABLE() 函数用于将 JSON 数据从半结构化数据转为结构化数据，即从 JSON 文档中提取数据并返回具有指定列的关系表。通过将 JSON 数据的各个部分映射到一个虚拟表的行和列，它创建了一个清晰的表结构，这不仅便于执行查询操作，还允许用户将这些数据插入到新的表或视图中以进行进一步处理。",
        "JSON_TABLE() 为每一个 JSON 值提供了列输出，对于 JSON 内的数组，也提供了多行（列）输出。",
        "JSON_TABLE() 必须用在 SELECT 语句的 FROM 子句中。",
        "JSON_TABLE() 函数语法说明如下：",
        "expr: 指定转换为 JSON 数据的输入表达式，如果表达式不可以转成 JSON 数据则会报错。",
        "path_literal：指定 Path 路径的字符串，输入其他类型数据或者非正确的 Path 路径信息则会报错。",
        "column_list：指定所输入的列定义信息，在表达式中至少包含一个列定义参数，否则会报错。",
        "column：指定具体的列定义信息，具体可以分为如下四类：",
        "\ncolumn_name FOR ORDINALITYFOR 子句用于为当前输出行提供行号，其中 column_name 是 INT 类型的列。\ncolumn_name data_type PATH path_literal [json_value_on_empty_clause] [json_value_on_error_clause] 子句用于提取 path_literal 指定的数据为 JSON 并强制转换为列类型。如果缺失值会触发可选的 json_value_on_empty_clause 子句。\ncolumn_name data_type EXISTS PATH path_literal 子句：如果 path_literal 指定的位置存在任何数据，则此列返回 1，否则返回 0。\nNESTED [PATH] path_literal COLUMNS (column_list) 子句表示重复的嵌套结构，可以在其中继续定义 column 的四种列类型。\n",
        "column_name FOR ORDINALITYFOR 子句用于为当前输出行提供行号，其中 column_name 是 INT 类型的列。",
        "column_name data_type PATH path_literal [json_value_on_empty_clause] [json_value_on_error_clause] 子句用于提取 path_literal 指定的数据为 JSON 并强制转换为列类型。如果缺失值会触发可选的 json_value_on_empty_clause 子句。",
        "column_name data_type EXISTS PATH path_literal 子句：如果 path_literal 指定的位置存在任何数据，则此列返回 1，否则返回 0。",
        "NESTED [PATH] path_literal COLUMNS (column_list) 子句表示重复的嵌套结构，可以在其中继续定义 column 的四种列类型。",
        "data_type：指定数据类型，当前支持 OceanBase 数据库 MySQL 模式下除 ENUM 和 SET 之外的所有数据类型。",
        "alias：指定表别名。",
        "json_value_on_empty_clause：如果经过 Path 筛选的数据是空值时用户可选的预期行为，可选行为包含三种：NULL、ERROR 和默认值 DEFAULT。",
        "\nNULL ON EMPTY：将该列设置为 NULL，为默认行为。\nDEFAULT json_string：将 json_string 解析为默认值取代 JSON 对象或者数组。OceanBase 数据库允许行为默认值为任意类型的常量数据。\nERROR ON EMPTY：抛出错误。\n",
        "NULL ON EMPTY",
        "：将该列设置为 ",
        "NULL",
        "，为默认行为。",
        "DEFAULT json_string",
        "：将 ",
        "json_string",
        " 解析为默认值取代 JSON 对象或者数组。OceanBase 数据库允许行为默认值为任意类型的常量数据。",
        "ERROR ON EMPTY",
        "：抛出错误。",
        "json_value_on_error_clause：如果表达式执行期间发生错误，用户可以使用预期的行为去覆盖该错误，可选择的行为包含三种：NULL、ERROR 和默认值 DEFAULT。可选行为和 json_value_on_empty_clause 一致。",
        "以下场景会触发可选的 json_value_on_error_clause 子句。",
        "\nexpr 不是格式正确的 JSON 数据\n使用 JSON 路径表达式计算 JSON 数据时发现非标量值\n使用 JSON 路径表达式计算 JSON 数据时未找到匹配项。\n所指定的返回值数据类型不够大，无法容纳返回值。\n",
        "expr 不是格式正确的 JSON 数据",
        "使用 JSON 路径表达式计算 JSON 数据时发现非标量值",
        "使用 JSON 路径表达式计算 JSON 数据时未找到匹配项。",
        "所指定的返回值数据类型不够大，无法容纳返回值。"
    ],
    "Examples": [],
    "Category": [
        "JSON Functions"
    ]
}