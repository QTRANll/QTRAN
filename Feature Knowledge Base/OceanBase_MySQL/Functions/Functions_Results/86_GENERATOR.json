{
    "HTML": [
        "https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823361"
    ],
    "Title": [
        "GENERATOR"
    ],
    "Feature": [
        "GENERATOR(N)\n"
    ],
    "Description": [
        "该函数为 Table Function 框架中的一个内置函数，即允许在 Table Function 中调用它，最终返回 N 行数据。N 是一个大于等于 0 的 64 位正整数。",
        "Table function 是一种在 SQL 语言中使用的函数，它能够返回一张数据表作为结果。与传统的 SQL 函数只能返回标量值不同，Table Function 可以返回多行、多列的数据集。",
        "TABLE(GENERATOR(N)) 并不真的生成任何数据，它只会产生连续 N 个 “行”，如果需要生成数据，需要在 SELECT 后面添加具体的表达式，例如常量、变量、函数、UDF 等。TABLE(GENERATOR(N)) 可以用于并行执行，例如并行 SELECT、并行 DML 等，但是负责读取 TABLE(GENERATOR(N)) 生成行的线程只会有一个，也就是说，包含 TABLE(GENERATOR(N)) 的 DFO 的 DOP=1。"
    ],
    "Examples": [
        "obclient> SELECT COUNT(*) FROM TABLE(GENERATOR(100000));\n+----------+\n| COUNT(*) |\n+----------+\n|   100000 |\n+----------+\n1 row in set\n\nobclient> SELECT NORMAL(0, 1, RANDOM()) FROM TABLE(GENERATOR(5));\n+------------------------+\n| NORMAL(0, 1, RANDOM()) |\n|------------------------|\n|           0.227384164  |\n|           0.9945290748 |\n|          -0.2045078571 |\n|          -1.594607893  |\n|          -0.8213296842 |\n+------------------------+\n5 rows in set\n\nobclient> SELECT RANDSTR(1, ZIPF(1, 5, RANDOM())) str FROM TABLE(GENERATOR(5));\n+------------------------+\n|                    str |\n|------------------------|\n|                     A  |\n|                     D  |\n|                     A  |\n|                     A  |\n|                     C  |\n+------------------------+\n5 rows in set\n",
        "obclient> CREATE TABLE t1 (c1 BIGINT);\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO t1 VALUES (1), (2);\nQuery OK, 2 rows affected\nRecords: 2  Duplicates: 0  Warnings: 0\n\nobclient> SELECT c1, RANDOM(1) FROM t1, TABLE(GENERATOR(3));\n+------+----------------------+\n| c1   | random(1)            |\n+------+----------------------+\n|    1 | -6753783847308464280 |\n|    2 | -6707106347154343346 |\n|    1 |  -899926183391115878 |\n|    2 | -8835543475904200562 |\n|    1 | -2750444335953844424 |\n|    2 |  7588216632478230601 |\n+------+----------------------+\n6 rows in set\n\nobclient> EXPLAIN SELECT c1, RANDOM(1) FROM t1, TABLE(GENERATOR(3));\n+------------------------------------------------------------------------+\n| Query Plan                                                             |\n+------------------------------------------------------------------------+\n| ==================================================================     |\n| |ID|OPERATOR                   |NAME       |EST.ROWS|EST.TIME(us)|     |\n| ------------------------------------------------------------------     |\n| |0 |NESTED-LOOP JOIN CARTESIAN |           |398     |14          |     |\n| |1 |├─FUNCTION_TABLE           |FUNC_TABLE1|199     |1           |     |\n| |2 |└─MATERIAL                 |           |2       |2           |     |\n| |3 |  └─TABLE FULL SCAN        |t1         |2       |2           |     |\n| ==================================================================     |\n| Outputs & filters:                                                     |\n| -------------------------------------                                  |\n|   0 - output([t1.c1], [RANDOM(1)]), filter(nil), rowset=256            |\n|       conds(nil), nl_params_(nil), use_batch=false                     |\n|   1 - output(nil), filter(nil)                                         |\n|       value(GENERATOR(3))                                              |\n|   2 - output([t1.c1]), filter(nil), rowset=256                         |\n|   3 - output([t1.c1]), filter(nil), rowset=256                         |\n|       access([t1.c1]), partitions(p0)                                  |\n|       is_index_back=false, is_global_index=false,                      |\n|       range_key([t1.__pk_increment]), range(MIN ; MAX)always true      |\n+------------------------------------------------------------------------+\n19 rows in set\n\nobclient> SELECT /*+ PARALLEL(2) */ c1, RANDOM(1) FROM t1, TABLE(GENERATOR(3));\n+------+----------------------+\n| c1   | random(1)            |\n+------+----------------------+\n|    1 | -6753783847308464280 |\n|    2 | -6707106347154343346 |\n|    1 |  -899926183391115878 |\n|    2 | -8835543475904200562 |\n|    1 | -2750444335953844424 |\n|    2 |  7588216632478230601 |\n+------+----------------------+\n6 rows in set\n\nobclient> EXPLAIN SELECT /*+ PARALLEL(2) */ c1, RANDOM(1) FROM t1, TABLE(GENERATOR(3));\n+------------------------------------------------------------------------+\n| Query Plan                                                             |\n+------------------------------------------------------------------------+\n| ==================================================================     |\n| |ID|OPERATOR                   |NAME       |EST.ROWS|EST.TIME(us)|     |\n| ------------------------------------------------------------------     |\n| |0 |NESTED-LOOP JOIN CARTESIAN |           |398     |13          |     |\n| |1 |├─FUNCTION_TABLE           |FUNC_TABLE1|199     |1           |     |\n| |2 |└─MATERIAL                 |           |2       |2           |     |\n| |3 |  └─PX COORDINATOR         |           |2       |2           |     |\n| |4 |    └─EXCHANGE OUT DISTR   |:EX10000   |2       |2           |     |\n| |5 |      └─PX BLOCK ITERATOR  |           |2       |1           |     |\n| |6 |        └─TABLE FULL SCAN  |t1         |2       |1           |     |\n| ==================================================================     |\n| Outputs & filters:                                                     |\n| -------------------------------------                                  |\n|   0 - output([t1.c1], [RANDOM(1)]), filter(nil), rowset=256            |\n|       conds(nil), nl_params_(nil), use_batch=false                     |\n|   1 - output(nil), filter(nil)                                         |\n|       value(GENERATOR(3))                                              |\n|   2 - output([t1.c1]), filter(nil), rowset=256                         |\n|   3 - output([t1.c1]), filter(nil), rowset=256                         |\n|   4 - output([t1.c1]), filter(nil), rowset=256                         |\n|       dop=2                                                            |\n|   5 - output([t1.c1]), filter(nil), rowset=256                         |\n|   6 - output([t1.c1]), filter(nil), rowset=256                         |\n|       access([t1.c1]), partitions(p0)                                  |\n|       is_index_back=false, is_global_index=false,                      |\n|       range_key([t1.__pk_increment]), range(MIN ; MAX)always true      |\n+------------------------------------------------------------------------+\n26 rows in set\n"
    ],
    "Category": [
        "Mathematical Functions"
    ]
}