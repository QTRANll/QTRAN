{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822946"], "Title": ["INET_NTOA"], "Feature": ["INET_NTOA(expr)\n"], "Description": ["将按照网络字节顺序表示的 IPv4 网络地址的数值，返回为使用\".\"点隔的 IP 地址字符串并作为连接字符集中的字符串。如果参数无效，则返回 NULL。"], "Examples": ["obclient> SELECT INET_NTOA(16843009);\n+---------------------+\n| INET_NTOA(16843009) |\n+---------------------+\n| 1.1.1.1             |\n+---------------------+\n1 row in set\n"], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822943"], "Title": ["IS_IPV4"], "Feature": ["IS_IPV4(expr)\n"], "Description": ["如果参数 expr 是有效的 IPv4 地址字符串，则返回 1，否则返回 0。", "对于指定的参数，如果 IS_IPV4() 返回 1，则 INET_ATON() 和 INET6_ATON() 返回非 NULL。反之却是不正确的，在某些情况下，当 IS_IPV4() 返回 0 时，INET_ATON() 返回非 NULL。IS_IPV4() 对 IPv4 地址的要求比 INET_ATON() 更严格，INET6_ATON() 在检查 IPv4 地址方面与 IS_IPV4() 一样强大。"], "Examples": ["obclient> SELECT IS_IPV4('10.x.x.9'), IS_IPV4('10.x.x.256');\n+---------------------+-----------------------+\n| IS_IPV4('10.x.x.9') | IS_IPV4('10.x.x.256') |\n+---------------------+-----------------------+\n|                   1 |                     0 |\n+---------------------+-----------------------+\n1 row in set\n"], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822949"], "Title": ["IS_IPV4_COMPAT"], "Feature": ["IS_IPV4_COMPAT(expr)\n"], "Description": ["将以数字形式表示的 IPv6 地址作为二进制字符串，由 INET6_ATON() 返回。", "如果参数是有效的兼容 IPv4 的 IPv6 地址，则返回 1，否则返回 0。兼容 IPv4 地址的格式为 ::ipv4_address。IPv4 兼容地址的 IPv4 部分也可以使用十六进制表示。"], "Examples": ["obclient> SELECT IS_IPV4_COMPAT(INET6_ATON('::10.x.x.x'));\n+------------------------------------------+\n| IS_IPV4_COMPAT(INET6_ATON('::10.x.x.x')) |\n+------------------------------------------+\n|                                        1 |\n+------------------------------------------+\n1 row in set\n\nobclient> SELECT HEX(INET6_ATON('10.10.10.10'));\n+---------------------------------+\n| HEX(INET6_ATON('10.10.10.10')) |\n+---------------------------------+\n| C6336501                        |\n+---------------------------------+\n1 row in set\n"], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822941"], "Title": ["IS_IPV6"], "Feature": ["IS_IPV6(expr)\n"], "Description": ["如果参数 expr 是有效的 IPv6 地址字符串，则返回 1，否则返回 0。此函数不会将 IPv4 地址视为有效的 IPv6 地址。", "对于指定的参数，如果 IS_IPV6() 返回 1，则 INET6_ATON() 返回非 NULL。"], "Examples": ["obclient> SELECT IS_IPV6('10.x.x.x'), IS_IPV6('::1');\n+---------------------+----------------+\n| IS_IPV6('10.x.x.x') | IS_IPV6('::1') |\n+---------------------+----------------+\n|                   0 |              1 |\n+---------------------+----------------+\n1 row in set\n"], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822954"], "Title": ["IS_UUID"], "Feature": ["IS_UUID(string_uuid)\n"], "Description": ["如果参数是有效的 UUID 字符串格式，则返回 1；如果参数不是有效的 UUID，则返回 0；如果参数为 NULL，则返回 NULL。 “有效”的意思是该值是可以解析的格式。也就是说，它具有正确的长度并且仅包含允许的字符（用于表示十六进制数字的字母以及可选的破折号和大括号）。如下格式最常见：", "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee\n", "如下格式也是允许的：", "aaaaaaaabbbbccccddddeeeeeeeeeeee\n{aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee}\n"], "Examples": ["obclient> SELECT IS_UUID('6ccd780c-abcd-1026-9564-5b8c656024db');\n+-------------------------------------------------+\n| IS_UUID('6ccd780c-abcd-1026-9564-5b8c656024db') |\n+-------------------------------------------------+\n|                                               1 |\n+-------------------------------------------------+\n1 row in set\n\nobclient> SELECT IS_UUID('6CCD780C-ABCD-1026-9564-5B8C656024DB');\n+-------------------------------------------------+\n| IS_UUID('6CCD780C-ABCD-1026-9564-5B8C656024DB') |\n+-------------------------------------------------+\n|                                               1 |\n+-------------------------------------------------+\n1 row in set\n\nobclient> SELECT IS_UUID('6ccd780cabcd102695645b8c656024db');\n+---------------------------------------------+\n| IS_UUID('6ccd780cabcd102695645b8c656024db') |\n+---------------------------------------------+\n|                                           1 |\n+---------------------------------------------+\n1 row in set\n\nobclient> SELECT IS_UUID('{6ccd780c-abcd-1026-9564-5b8c656024db}');\n+---------------------------------------------------+\n| IS_UUID('{6ccd780c-abcd-1026-9564-5b8c656024db}') |\n+---------------------------------------------------+\n|                                                 1 |\n+---------------------------------------------------+\n1 row in set\n\nobclient> SELECT IS_UUID('6ccd780c-abcd-1026-9564-5b8c6560');\n+---------------------------------------------+\n| IS_UUID('6ccd780c-abcd-1026-9564-5b8c6560') |\n+---------------------------------------------+\n|                                           0 |\n+---------------------------------------------+\n1 row in set\n\nobclient> SELECT IS_UUID(RAND());\n+-----------------+\n| IS_UUID(RAND()) |\n+-----------------+\n|               0 |\n+-----------------+\n1 row in set\n"], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822937"], "Title": ["BIN_TO_UUID"], "Feature": ["BIN_TO_UUID(binary_uuid), BIN_TO_UUID(binary_uuid,swap_flag)\n"], "Description": ["BIN_TO_UUID() 将二进制 UUID 转换为字符串 UUID 并返回该结果。二进制值 binary_uuid 应该数据类型为 VARBINARY(16) 的 UUID。返回值符合 UUID 版本 1 的值，该值是一个 128 位数字，是由破折号分隔的五个十六进制数组成的 utf8mb3 字符串。格式与 UUID() 函数相同，为 aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeeeee 格式，说明如下：", "前三个数字是从时间戳的低、中和高部分生成的。高位部分还包括 UUID 版本号。", "第四个数字保留时间唯一性，以防时间戳值失去单一性（例如，夏令时的影响）。", "第五个数字是提供空间唯一性的 IEEE 802 节点号。如果不可用，则用一个随机数代替，但无法保证空间唯一性。", "如果 UUID 参数为 NULL，则返回值为 NULL。如果某一何参数无效，则会发生错误。", "BIN_TO_UUID() 的语法包括单参数和双参数两种形式，说明如下：", "单参数形式指定二进制 UUID 值。UUID 值被假定为不会交换其时间低和时间高的部分。返回的字符串结果与二进制参数的顺序相同。", "双参数形式指定二进制 UUID 值和 ", "swap-flag", " 值： \n    ", "\n如果 swap_flag 为 0，则双参数形式等同于单参数形式。字符串结果与二进制参数的顺序相同。\n如果 swap_flag 为 1，则假定 UUID 值已交换其时间低和时间高部分。这些部分被交换回它们在结果值中的原始位置。\n", "如果 ", "swap_flag", " 为 0，则双参数形式等同于单参数形式。字符串结果与二进制参数的顺序相同。", "如果 ", "swap_flag", " 为 1，则假定 UUID 值已交换其时间低和时间高部分。这些部分被交换回它们在结果值中的原始位置。", "BIN_TO_UUID() 是 UUID_TO_BIN() 的逆函数。有关其使用示例和时间部分交换规则的信息，请参见 UUID_TO_BIN()。"], "Examples": [], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822947"], "Title": ["NAME_CONST"], "Feature": ["NAME_CONST(name,value)\n"], "Description": ["该函数返回值定的值。参数 value应该是常量。", "NAME_CONST() 使所生成结果集的列具有指定的名称。"], "Examples": ["obclient> SELECT NAME_CONST('my_id', 101);\n+-------+\n| my_id |\n+-------+\n|   101 |\n+-------+\n1 row in set\n", "SELECT 101 AS my_id;\n"], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822939"], "Title": ["NVL"], "Feature": ["NVL(str1,replace_with)\n"], "Description": ["将 NULL 值替换为指定值，如果 str1 为 NULL，则返回 replace_with 指定的值。其中 str1 一般是一个列名。replace_with 可以是直接值（即硬编码）、对其他列的引用或者表达式。", "这种自动替换 NULL 值的能力可以提供更为完善的输出。"], "Examples": ["obclient> SELECT NVL(NULL, 0), NVL(NULL, 'a');\n+--------------+----------------+\n| NVL(NULL, 0) | NVL(NULL, 'a') |\n+--------------+----------------+\n|            0 | a              |\n+--------------+----------------+\n1 row in set\n"], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822951"], "Title": ["SLEEP"], "Feature": ["SLEEP(duration)\n"], "Description": ["SLEEP 函数根据 duration 指定的数值暂停相应的时间（单位为秒），并在暂停结束后返回 0。", "如果 SLEEP 单独执行且没有被中断，返回结果 0。", "如果 SLEEP 单独执行期间被中断，返回结果 1，但不会返回任何错误码。", "如果 SLEEP 是查询的一部分，且暂停期间被中断，将会返回错误码 ERROR 1317。"], "Examples": ["obclient> SELECT SLEEP(1000);\n+------------------+\n| SLEEP(1000) |\n+------------------+\n|          0 |\n+------------------+\n\nobclient> SELECT SLEEP(1000);\n+------------------+\n| SLEEP(1000) |\n+------------------+\n|          1 |\n+------------------+\n\nobclient> SELECT 1 FROM t1 WHERE SLEEP(1000);\nERROR 1317 (70100): Query execution was interrupted\n"], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822940"], "Title": ["UUID"], "Feature": ["uuid()\n"], "Description": ["生成一个全局唯一 ID。"], "Examples": ["obclient> SELECT UUID();\n+--------------------------------------+\n| UUID()                               |\n+--------------------------------------+\n| eef95d17-e944-11eb-824a-ca1fa9040697 |\n+--------------------------------------+\n1 row in set\n"], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822945"], "Title": ["UUID_SHORT"], "Feature": ["UUID_SHORT()\n"], "Description": ["以 64 位无符号整数形式返回\"短\"通用标识符。", "如果满足以下条件，则 UUID_SHORT() 的返回值是保证唯一的：", "当前服务器的 server_id 值介于 0 到 255 之间，并且在一组源服务器和副本服务器中是唯一的。如果server_id 总数大于 256，则生成的\"短\"通用标识符无法保证空间唯一性，尽管此函数不会报错。", "不要在 OBServer 重新启动期间设置服务器主机的系统时间。", "在 OBServer 重新启动期间平均每秒调用 UUID_SHORT() 少于 1600 万次。", "UUID_SHORT() 返回值的构造如下：", "(server_id & 255) << 56\n+ (server_startup_time_in_seconds << 24)\n+ incremented_variable++;\n"], "Examples": ["obclient> SELECT UUID_SHORT();\n+-----------------------+\n|          UUID_SHORT() |\n+-----------------------+\n| 92395783831158784 |\n+-----------------------+\n1 row in set\n"], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822955"], "Title": ["UUID_TO_BIN"], "Feature": ["UUID_TO_BIN(string_uuid), UUID_TO_BIN(string_uuid, swap_flag)\n"], "Description": ["UUID_TO_BIN() 将字符串 UUID 转换为二进制 UUID 并返回结果。有关字符串 UUID 格式的详细信息，请参见 **IS_UUID()**。 UUID_TO_BIN() 返回的二进制 UUID 是一个 VARBINARY(16) 值。如果 UUID 参数为 NULL，则返回值为 NULL。如果某一参数无效，则会发生报错。 UUID_TO_BIN() 的语法包括单参数和双参数两种形式，说明如下：", "单参数形式指定字符串 UUID 值。二进制结果与字符串参数的顺序相同。", "双参数形式指定字符串 UUID 值和 ", "swap_flag", " 值： \n    ", "\n如果 swap_flag 为 0，则双参数形式等同于单参数形式，返回的二进制结果与字符串参数的顺序相同。\n如果 swap_flag 为 1，则返回值的格式是不同的，会将时间低和时间高部分（分别是十六进制数字的第一组和第三组）进行交换，即将变化较快的部分向右移动。如果结果存储在索引列中，可以提高索引的效率。\n", "如果 ", "swap_flag", " 为 0，则双参数形式等同于单参数形式，返回的二进制结果与字符串参数的顺序相同。", "如果 ", "swap_flag", " 为 1，则返回值的格式是不同的，会将时间低和时间高部分（分别是十六进制数字的第一组和第三组）进行交换，即将变化较快的部分向右移动。如果结果存储在索引列中，可以提高索引的效率。", "时间部分的交换被假定为使用 UUID 版本 1 的值，例如由 UUID() 函数生成的值。对于不遵循版本 1 格式的其他方式生成的 UUID 值，时间部分的交换是不适用的。"], "Examples": ["SET @uuid = '6ccd780c-abcd-1026-9564-5b8c656024db';\n", "obclient> SELECT HEX(UUID_TO_BIN(@uuid));\n+----------------------------------+\n| HEX(UUID_TO_BIN(@uuid))          |\n+----------------------------------+\n| 6CCD780CABCD102695645B8C656024DB |\n+----------------------------------+\n1 row in set\n\nobclient> SELECT HEX(UUID_TO_BIN(@uuid, 0));\n+----------------------------------+\n| HEX(UUID_TO_BIN(@uuid, 0))       |\n+----------------------------------+\n| 6CCD780CABCD102695645B8C656024DB |\n+----------------------------------+\n1 row in set\n\nobclient> SELECT HEX(UUID_TO_BIN(@uuid, 1));\n+----------------------------------+\n| HEX(UUID_TO_BIN(@uuid, 1))       |\n+----------------------------------+\n| 1026ABCD6CCD780C95645B8C656024DB |\n+----------------------------------+\n1 row in set\n", "obclient> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid));\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid))      |\n+--------------------------------------+\n| 6ccd780c-abcd-1026-9564-5b8c656024db |\n+--------------------------------------+\n1 row in set\n\nobclient> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid,0),0);\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid,0),0)  |\n+--------------------------------------+\n| 6ccd780c-abcd-1026-9564-5b8c656024db |\n+--------------------------------------+\n1 row in set\n\nobclient> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid,1),1);\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid,1),1)  |\n+--------------------------------------+\n| 6ccd780c-abcd-1026-9564-5b8c656024db |\n+--------------------------------------+\n1 row in set\n", "obclient> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid,0),1);\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid,0),1)  |\n+--------------------------------------+\n| abcd1026-780c-6ccd-9564-5b8c656024db |\n+--------------------------------------+\n1 row in set\n\nobclient> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid,1),0);\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid,1),0)  |\n+--------------------------------------+\n| 1026abcd-6ccd-780c-9564-5b8c656024db |\n+--------------------------------------+\n1 row in set\n"], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822942"], "Title": ["VALUES"], "Feature": ["VALUES(col_name)\n"], "Description": ["VALUES() 函数仅用于 INSERT ... ON DUPLICATE KEY UPDATE 语句，在其他用法中，该函数只会返回 NULL。", "对于 INSERT ... ON DUPLICATE KEY UPDATE 语句，UPDATE 子句可以使用 VALUES(col_name) 函数引用 INSERT 语句中的列值。"], "Examples": ["obclient> INSERT INTO table (a,b,c) VALUES (1,2,3),(4,5,6) ON DUPLICATE KEY UPDATE c=VALUES(a)+VALUES(b);\nQuery OK, 2 rows affected\nRecords: 2  Duplicates: 0  Warnings: 0\n"], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822944"], "Title": ["COALESCE"], "Feature": ["COALESCE(expr, expr, expr,...)\n"], "Description": ["依次参考各参数表达式，遇到非 NULL 值即停止并返回该值。如果所有的表达式都是空值，最终将返回一个空值。", "所有表达式必须是相同类型，或者可以隐性转换为相同的类型。"], "Examples": ["obclient> SELECT COALESCE(NULL,NULL,3,4,5), COALESCE(NULL,NULL,NULL);\n+---------------------------+--------------------------+\n| COALESCE(NULL,NULL,3,4,5) | COALESCE(NULL,NULL,NULL) |\n+---------------------------+--------------------------+\n|                         3 |                     NULL |\n+---------------------------+--------------------------+\n1 row in set\n"], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822948"], "Title": ["DEFAULT"], "Feature": ["DEFAULT(col_name)\n"], "Description": ["返回表列的默认值，如果指定的列没有默认值，则会返回 NULL。"], "Examples": ["obclient> CREATE TABLE t1 (id int,i int DEFAULT 1);\nQuery OK, 0 rows affected\nobclient> INSERT INTO t1 VALUES (1,3);\nQuery OK, 1 row affected\nobclient> UPDATE t1 SET i = DEFAULT(i)+1 WHERE id < 100;\nQuery OK, 1 row affected\nRows matched: 1  Changed: 1  Warnings: 0\nobclient> SELECT * FROM t;\n+------+------+\n| id   | i    |\n+------+------+\n|    1 |    2 |\n+------+------+\n1 row in set\n\nobclient> CREATE TABLE t2 (id int,i int);\nQuery OK, 0 rows affected\nobclient> INSERT INTO t2 VALUES (1,3);\nQuery OK, 1 row affected\nobclient> UPDATE t2 SET i = DEFAULT(i)+1 WHERE id < 100;\nobclient> SELECT * FROM t2;\n+------+------+\n| id   | i    |\n+------+------+\n|    1 | NULL |\n+------+------+\n1 row in set\n"], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822953"], "Title": ["ANY_VALUE"], "Feature": ["ANY_VALUE(arg)\n"], "Description": ["当 sql_mode 启用 ONLY_FULL_GROUP_BY SQL 模式时，此函数用于运行非 FULL GROUP BY 的操作，抑制 ONLY_FULL_GROUP_BY 值被拒绝。", "ANY_VALUE() 会选择被分到同一分组的数据里第一条数据的指定列值作为返回数据。函数的返回值和类型与其参数的返回值和类型相同。", "如下示例中，如果 name 是非索引列，当启用 ONLY_FULL_GROUP_BY SQL 模式时，则 GROUP BY 查询将失败，这是因为 city 是一个非聚合列，因此每个 name 组中的 city 值是不确定的。", "obclient> CREATE TABLE tbl1(name VARCHAR(20),age VARCHAR(10),city VARCHAR(50));\nobclient> INSERT INTO tbl1 VALUES ('Alex',20,'BeiJing'),('Jim',25,'HangZhou'),('Blair',35,'NanJing');\nobclient>  SET sql_mode='ONLY_FULL_GROUP_BY';\nQuery OK, 0 rows affected\n\nobclient>  SELECT name, city, MAX(age) FROM tbl1 GROUP BY name;\nERROR 1055 (42000): 'test.tbl1.city' is not in GROUP BY\n", "一种解决办法是可以更改表以使 name 成为主键或唯一的 NOT NULL 列，这使得 city 由 name 来唯一确定（如果必须允许 NULL 作为有效 name 值，则此方法不适用）。", "另一种解决方法是使用 ANY_VALUE() 来引用 city，这样会忽略每个 name 组内 city 值的不确定性并接受查询。ANY_VALUE() 不是聚合函数，它只是起到抑制非确定性测试的作用。", "obclient> SELECT name, ANY_VALUE(city), MAX(age) FROM tbl1 GROUP BY name;\n+-------+-----------------+----------+\n| name  | ANY_VALUE(city) | MAX(age) |\n+-------+-----------------+----------+\n| Alex  | BeiJing         | 20       |\n| Jim   | HangZhou        | 25       |\n| Blair | NanJing         | 35       |\n+-------+-----------------+----------+\n3 rows in set\n", "还有一种方法是禁用 ONLY_FULL_GROUP_BY。这相当于在启用 ONLY_FULL_GROUP_BY 的情况下使用 ANY_VALUE()，如上所述。"], "Examples": ["obclient> SELECT name, MAX(age) FROM tbl1;\nERROR 1140 (42000): Mixing of GROUP columns (MIN(),MAX(),COUNT(),...) with no GROUP columns is illegal if there is no GROUP BY clause\nobclient> SELECT ANY_VALUE(name), MAX(age) FROM tbl1;\n+-----------------+----------+\n| ANY_VALUE(name) | MAX(age) |\n+-----------------+----------+\n| Alex            | 35       |\n+-----------------+----------+\n1 row in set\n"], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822952"], "Title": ["INET6_ATON"], "Feature": ["INET6_ATON(expr)\n"], "Description": ["将指定的 IPv6 或 IPv4 网络地址返回为一个二进制字符串，该字符串以网络字节顺序（大端）表示地址值。", "由于数字格式的 IPv6 地址需要的字节数比最大整数类型的字节要多，因此此函数返回 VARBINARY 数据类型，其中 VARBINARY(16) 表示 IPv6 地址，VARBINARY(4) 表示 IPv4 地址。如果参数不是有效地址，则返回 NULL。", "INET6_ATON() 对有效参数有如下限制：", "不允许在尾部使用 Zone ID，例如 fc50::3%1 或 fc50::3%eth1。", "不允许在尾部使用网络掩码，如 2002:45f:3:ba::/64 或 198.xx.100.0/24。", "仅支持使用无类地址表示 IPv4 地址的值。诸如 198.51.1 之类的有类地址会被拒绝。", "不允许在尾部使用端口号，例如 198.xx.100.2:8082。", "地址中不允许使用十六进制数字，例如 198.0xa0.1.2。", "不支持八进制数：198.xx.010.1 被视为 198.xx.10.1，而不是 198.xx.8.1。", "这些 IPv4 限制也适用于具有 IPv4 地址部分的 IPv6 地址，例如 IPv4 兼容地址或 IPv4 映射地址。", "要将以 INT 数据类型表示的 IPv4 地址 expr 转换为以 VARBINARY 值表示的 IPv6 地址，请使用以下表达式：", "INET6_ATON(INET_NTOA(expr))\n"], "Examples": ["obclient> SELECT HEX(INET6_ATON('fdfe::5a55:caff:fefa:9089'));\n+----------------------------------------------+\n| HEX(INET6_ATON('fdfe::5a55:caff:fefa:9089')) |\n+----------------------------------------------+\n| FDFE0000000000005A55CAFFFEFA9089         |\n+----------------------------------------------+\n1 row in set\n"], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822950"], "Title": ["INET6_NTOA"], "Feature": ["INET6_NTOA(expr)\n"], "Description": ["将以数字形式表示的 IPv6 或 IPv4 网络地址返回为二进制字符串，该地址的字符串可以作为连接字符集中的字符串。如果参数不是有效地址，则返回 NULL。", "INET6_NTOA() 具有以下属性：", "不使用系统函数来执行转换，因此输出字符串与平台无关。", "返回字符串的最大长度为 39 (4 x 8 + 7)。", "返回字符串使用小写字母表示 IPv6 地址。"], "Examples": ["obclient> SELECT INET6_NTOA(INET6_ATON('fdfe::5a55:caff:fefa:9089'));\n+------------------------------------------------------------+\n|  INET6_NTOA(INET6_ATON('fdfe::5a55:caff:fefa:9089')) |\n+------------------------------------------------------------+\n|                            fdfe::5a55:caff:fefa:9089 |\n+------------------------------------------------------------+\n1 row in set\n"], "Category": ["Miscellaneous Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822938"], "Title": ["INET_ATON"], "Feature": ["INET_ATON(expr)\n"], "Description": ["将 IPv4 网络地址表示为字符串，并返回一个整数，该整数按照网络字节顺序（大端）表示地址值。如果参数无效，则返回 NULL。", "\n注意\n请使用 INT UNSIGNED 列存储由 INET_ATON() 生成的值，不能使用带符号的 INT。如果使用带符号的列，则当第一个八位字节的 IP 地址大于 127 时会无法正确存储对应的值。\n"], "Examples": ["obclient> SELECT INET_ATON('1.1.1.1');\n+----------------------+\n|  INET_ATON('1.1.1.1') |\n+----------------------+\n|             16843009 |\n+----------------------+\n1 row in set\n"], "Category": ["Miscellaneous Functions"]}
