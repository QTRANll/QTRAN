{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823021"], "Title": ["AVG"], "Feature": ["AVG([DISTINCT | ALL] expr)\n"], "Description": ["返回指定组中的平均值，空值被忽略。DISTINCT 选项可用于返回 expr 的不同值的平均值。如果找不到匹配的行，则 AVG() 返回 NULL。"], "Examples": ["obclient> SELECT * FROM oceanbasetest;\n+----+------+------+\n| id | ip   | ip2  |\n+----+------+------+\n|  1 |    4 | NULL |\n|  3 |    3 | NULL |\n|  4 |    3 | NULL |\n+----+------+------+\n3 rows in set\n\nobclient> SELECT avg(ip2), avg(ip), avg(distinct(ip)) FROM oceanbasetest;\n+----------+---------+-------------------+\n| avg(ip2) | avg(ip) | avg(distinct(ip)) |\n+----------+---------+-------------------+\n|     NULL |  3.3333 |            3.5000 |\n+----------+---------+-------------------+\n1 row in set\n\nobclient> SELECT avg(distinct(ip)),avg(ip),avg(ip2) FROM oceanbasetest;\n+-------------------+---------+----------+\n| avg(distinct(ip)) | avg(ip) | avg(ip2) |\n+-------------------+---------+----------+\n|            3.5000 |  3.3333 |     NULL |\n+-------------------+---------+----------+\n1 row in set\n"], "Category": ["Aggregate Functions", "Analysis Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823017"], "Title": ["MAX"], "Feature": ["MAX([DISTINCT | ALL] expr)\n"], "Description": ["返回指定数据中的最大值。", "MAX() 的取值可以是一个字符串参数，在这些情况下，它们返回最大字符串值。DISTINCT 关键字表示只计算不同值，缺省为 ALL。"], "Examples": ["obclient> SELECT MAX(num) FROM a;\n+-----------------+\n| MAX(num)        |\n+-----------------+\n|              30 |\n+-----------------+\n1 row in set\n"], "Category": ["Aggregate Functions", "Analysis Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823019"], "Title": ["BIT_AND"], "Feature": ["BIT_AND(expr)\n"], "Description": ["返回 expr 中所有位的按位与。", "结果类型取决于函数参数值被评估为二进制字符串还是数字。当参数值具有二进制字符串类型，并且参数不是十六进制字面量、Bit 字面量或 NULL 字面量时，就会发生二进制字符串求值。否则会发生数值计算，必要时将参数值转换为无符号 64 位整数。", "如果没有匹配的行，BIT_AND() 返回一个与参数值长度相同的中性值（所有位都设置为 1）。", "除非所有值都为 NULL，否则 NULL 值不会影响结果。在这种情况下，结果是一个与参数值具有相同长度的中性值。"], "Examples": ["CREATE TABLE product_information(supplier_id INT, product_id INT,list_price numeric, min_price numeric);\nINSERT INTO PRODUCT_INFORMATION VALUES ('102050', '1659', '45', NULL);\nINSERT INTO PRODUCT_INFORMATION VALUES ('102050', '1770', NULL, '70');\nINSERT INTO PRODUCT_INFORMATION VALUES ('102050', '2370', '305', '247');\nINSERT INTO PRODUCT_INFORMATION VALUES ('102050', '2380', '750', '731');\nINSERT INTO PRODUCT_INFORMATION VALUES ('102050', '3255', NULL, NULL);\nINSERT INTO PRODUCT_INFORMATION VALUES ('102050', '1659', '35', NULL);\n\nobclient> SELECT * FROM product_information;\n+-------------+------------+------------+-----------+\n| supplier_id | product_id | list_price | min_price |\n+-------------+------------+------------+-----------+\n|      102050 |       1659 |         45 |      NULL |\n|      102050 |       1770 |       NULL |        70 |\n|      102050 |       2370 |        305 |       247 |\n|      102050 |       2380 |        750 |       731 |\n|      102050 |       3255 |       NULL |      NULL |\n|      102050 |       2380 |        750 |       731 |\n|      102050 |       1659 |         35 |      NULL |\n+-------------+------------+------------+-----------+\n7 rows in set\n\nobclient> SELECT product_id, BIT_AND(list_price) BITS FROM product_information GROUP BY product_id;\n+------------+----------------------+\n| product_id | BITS                 |\n+------------+----------------------+\n|       1659 |                   33 |\n|       1770 | 18446744073709551615 |\n|       2370 |                  305 |\n|       2380 |                  750 |\n|       3255 | 18446744073709551615 |\n+------------+----------------------+\n5 rows in set\n"], "Category": ["Aggregate Functions", "Analysis Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823024"], "Title": ["MIN"], "Feature": ["MIN([DISTINCT | ALL] expr)\n"], "Description": ["返回指定数据中的最小值。", "MIN() 的取值可以是字符串参数，结果返回最小字符串值。DISTINCT 关键字表示只计算不同值，缺省为 ALL。"], "Examples": ["obclient> SELECT MIN(num) FROM a;\n+----------------+\n| MIN(num)       |\n+----------------+\n|             10 |\n+----------------+\n1 row in set\n"], "Category": ["Aggregate Functions", "Analysis Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823026"], "Title": ["BIT_OR"], "Feature": ["BIT_OR(expr)\n"], "Description": ["返回 expr 中所有位的按位或。", "结果类型取决于函数参数值被评估为二进制字符串还是数字。当参数值具有二进制字符串类型，并且参数不是十六进制字面量、Bit 字面量或 NULL 字面量时，就会发生二进制字符串求值。否则会发生数值计算，必要时将参数值转换为无符号 64 位整数。", "如果没有匹配的行，BIT_OR() 返回一个与参数值长度相同的中性值（所有位都设置为 0）。除非所有值都为 NULL，否则 NULL 值不会影响结果。在这种情况下，结果是一个与参数值具有相同长度的中性值。"], "Examples": ["obclient> CREATE TABLE tbl1 (year YEAR (4), month INT(2)UNSIGNED ZEROFILL, day INT(2) UNSIGNED ZEROFILL);\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO tbl1 VALUES(2021,1,1),(2021,1,22),(2021,1,3),(2021,2,2), (2021,2,23),(2021,2,23);\nQuery OK, 6 rows affected\nRecords: 6  Duplicates: 0  Warnings: 0\n\nobclient> SELECT * FROM tbl1;\n+------+-------+------+\n| year | month | day  |\n+------+-------+------+\n| 2021 |    01 |   01 |\n| 2021 |    01 |   22 |\n| 2021 |    01 |   03 |\n| 2021 |    02 |   02 |\n| 2021 |    02 |   23 |\n| 2021 |    02 |   23 |\n+------+-------+------+\n6 rows in set\n\nobclient> SELECT year,month,BIT_COUNT(BIT_OR(1<<day)) AS days FROM tbl1 GROUP BY year,month;\n+------+-------+------+\n| year | month | days |\n+------+-------+------+\n| 2021 |    01 |    3 |\n| 2021 |    02 |    2 |\n+------+-------+------+\n2 rows in set\n"], "Category": ["Aggregate Functions", "Analysis Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823018"], "Title": ["BIT_XOR"], "Feature": ["BIT_XOR(expr)\n"], "Description": ["返回 expr 中所有位的按位异或。", "结果类型取决于函数参数值被评估为二进制字符串还是数字。当参数值具有二进制字符串类型，并且参数不是十六进制字面量、Bit 字面量或 NULL 字面量时，就会发生二进制字符串求值。否则会发生数值计算，必要时将参数值转换为无符号 64 位整数。", "如果没有匹配的行，BIT_XOR() 返回一个与参数值长度相同的中性值（所有位都设置为 0）。", "除非所有值都为 NULL，否则 NULL 值不会影响结果。在这种情况下，结果是一个与参数值具有相同长度的中性值。"], "Examples": ["obclient> SELECT year,month,BIT_COUNT(BIT_XOR(1<<day)) AS days FROM tbl1 GROUP BY year,month;\n+------+-------+------+\n| year | month | days |\n+------+-------+------+\n| 2021 |    01 |    3 |\n| 2021 |    02 |    1 |\n+------+-------+------+\n2 rows in set\n"], "Category": ["Aggregate Functions", "Analysis Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823014"], "Title": ["STD"], "Feature": ["STD(expr)\n"], "Description": ["返回表达式 expr 的总体标准差，该函数是 STDDEV_POP() 的别名。", "如果没有匹配到行，则该函数返回 NULL。"], "Examples": ["obclient> CREATE TABLE employees (manager_id INT,last_name varchar(50),hiredate varchar(50),SALARY INT);\nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-01', 1700);\nINSERT INTO employees VALUES(100, 'De Haan', '2018-05-01',11000);      \nINSERT INTO employees VALUES(100, 'Errazuriz', '2017-07-21', 1400);\nINSERT INTO employees VALUES(100, 'Hartstein', '2019-05-01',14000);     \nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-22', 1700);\nINSERT INTO employees VALUES(100, 'Weiss',  '2019-07-11',13500);     \nINSERT INTO employees VALUES(100, 'Russell', '2019-10-05', 13000);\nINSERT INTO employees VALUES(100, 'Partners',  '2018-12-01',14000);     \nINSERT INTO employees VALUES(200, 'Ross',  '2019-06-11',13500);     \nINSERT INTO employees VALUES(200, 'Bell', '2019-05-25', 13000);\nINSERT INTO employees VALUES(200, 'Part',  '2018-08-11',14000);   \nCOMMIT;\n\nobclient> SELECT STD(salary) FROM employees;\n+-------------------+\n| STD(salary)       |\n+-------------------+\n| 5249.950806538513 |\n+-------------------+\n1 row in set\n"], "Category": ["Aggregate Functions", "Analysis Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823023"], "Title": ["STDDEV"], "Feature": ["STDDEV(expr)\n"], "Description": ["返回表达式 expr 的总体标准差。如果没有匹配到行，则该函数返回 NULL。", "该函数是 STDDEV_POP() 的别名。"], "Examples": ["obclient> CREATE TABLE employees (manager_id INT,last_name varchar(50),hiredate varchar(50),SALARY INT);\nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-01', 1700);\nINSERT INTO employees VALUES(100, 'De Haan', '2018-05-01',11000);      \nINSERT INTO employees VALUES(100, 'Errazuriz', '2017-07-21', 1400);\nINSERT INTO employees VALUES(100, 'Hartstein', '2019-05-01',14000);     \nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-22', 1700);\nINSERT INTO employees VALUES(100, 'Weiss',  '2019-07-11',13500);     \nINSERT INTO employees VALUES(100, 'Russell', '2019-10-05', 13000);\nINSERT INTO employees VALUES(100, 'Partners',  '2018-12-01',14000);     \nINSERT INTO employees VALUES(200, 'Ross',  '2019-06-11',13500);     \nINSERT INTO employees VALUES(200, 'Bell', '2019-05-25', 13000);\nINSERT INTO employees VALUES(200, 'Part',  '2018-08-11',14000);   \nCOMMIT;\n\nobclient> SELECT STDDEV(salary) FROM employees;\n+-------------------+\n| STDDEV(salary)    |\n+-------------------+\n| 5249.950806538513 |\n+-------------------+\n1 row in set\n"], "Category": ["Aggregate Functions", "Analysis Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823016"], "Title": ["STDDEV_POP"], "Feature": ["STDDEV_POP(expr)\n"], "Description": ["返回表达式 expr 的总体标准差。", "如果没有匹配到行，则该函数返回 NULL。"], "Examples": ["obclient> CREATE TABLE employees (manager_id INT,last_name varchar(50),hiredate varchar(50),SALARY INT);\nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-01', 1700);\nINSERT INTO employees VALUES(100, 'De Haan', '2018-05-01',11000);      \nINSERT INTO employees VALUES(100, 'Errazuriz', '2017-07-21', 1400);\nINSERT INTO employees VALUES(100, 'Hartstein', '2019-05-01',14000);     \nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-22', 1700);\nINSERT INTO employees VALUES(100, 'Weiss',  '2019-07-11',13500);     \nINSERT INTO employees VALUES(100, 'Russell', '2019-10-05', 13000);\nINSERT INTO employees VALUES(100, 'Partners',  '2018-12-01',14000);     \nINSERT INTO employees VALUES(200, 'Ross',  '2019-06-11',13500);     \nINSERT INTO employees VALUES(200, 'Bell', '2019-05-25', 13000);\nINSERT INTO employees VALUES(200, 'Part',  '2018-08-11',14000);   \nCOMMIT;\n\nobclient> SELECT STDDEV_POP(salary) FROM employees;\n+--------------------+\n| STDDEV_POP(salary) |\n+--------------------+\n|  5249.950806538513 |\n+--------------------+\n1 row in set\n"], "Category": ["Aggregate Functions", "Analysis Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823031"], "Title": ["STDDEV_SAMP"], "Feature": ["STDDEV_SAMP(expr)\n"], "Description": ["返回 expr 的样本标准差，该函数返回 VAR_SAMP() 函数结果的平方根。有关 VAR_SAMP() 函数的详细信息，请参见 VAR_SAMP。", "如果没有匹配到行，则该函数返回 NULL。"], "Examples": ["obclient> CREATE TABLE employees (manager_id INT,last_name VARCHAR(50),hiredate VARCHAR(50),salary INT);\nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-01', 1700);\nINSERT INTO employees VALUES(100, 'De Haan', '2018-05-01',11000);      \nINSERT INTO employees VALUES(100, 'Errazuriz', '2017-07-21', 1400);\nINSERT INTO employees VALUES(100, 'Hartstein', '2019-05-01',14000);     \nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-22', 1700);\nINSERT INTO employees VALUES(100, 'Weiss',  '2019-07-11',13500);     \nINSERT INTO employees VALUES(100, 'Russell', '2019-10-05', 13000);\nINSERT INTO employees VALUES(100, 'Partners',  '2018-12-01',14000);     \nINSERT INTO employees VALUES(200, 'Ross',  '2019-06-11',13500);     \nINSERT INTO employees VALUES(200, 'Bell', '2019-05-25', 13000);\nINSERT INTO employees VALUES(200, 'Part',  '2018-08-11',14000);   \nCOMMIT;\n\n\nobclient> SELECT STDDEV_SAMP(salary) FROM employees;\n+---------------------+\n| STDDEV_SAMP(salary) |\n+---------------------+\n|   5506.194858355616 |\n+---------------------+\n1 row in set\n"], "Category": ["Aggregate Functions", "Analysis Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823025"], "Title": ["SUM"], "Feature": ["SUM([DISTINCT | ALL] expr)\n"], "Description": ["返回 expr 的总数。如果集合中无任何行，则返回 NULL。DISTINCT 关键字可用于求得 expr 不同值的总和。", "如果找不到匹配的行，该函数也会返回 NULL。"], "Examples": ["obclient> SELECT * FROM oceanbasetest;\n+------+------+------+\n| id   | ip   | ip2  |\n+------+------+------+\n|    1 |    4 | NULL |\n|    3 |    3 | NULL |\n|    4 |    3 | NULL |\n+------+------+------+\n3 rows in set\n\nobclient> SELECT SUM(ip2),SUM(ip),SUM(DISTINCT(ip)) FROM oceanbasetest;\n+----------+---------+-------------------+\n| sum(ip2) | sum(ip) | sum(distinct(ip)) |\n+----------+---------+-------------------+\n|     NULL |      10 |                 7 |\n+----------+---------+-------------------+\n1 row in set\n"], "Category": ["Aggregate Functions", "Analysis Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823022"], "Title": ["VARIANCE"], "Feature": ["VARIANCE(expr)\n"], "Description": ["返回表达式 expr 的总体标准方差，该函数是 VAR_POP() 的别名。", "如果没有匹配到行，则该函数返回 NULL。"], "Examples": ["obclient> CREATE TABLE employees (manager_id INT,last_name VARCHAR(50),hiredate VARCHAR(50),salary INT);\nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-01', 1700);\nINSERT INTO employees VALUES(100, 'De Haan', '2018-05-01',11000);      \nINSERT INTO employees VALUES(100, 'Errazuriz', '2017-07-21', 1400);\nINSERT INTO employees VALUES(100, 'Hartstein', '2019-05-01',14000);     \nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-22', 1700);\nINSERT INTO employees VALUES(100, 'Weiss',  '2019-07-11',13500);     \nINSERT INTO employees VALUES(100, 'Russell', '2019-10-05', 13000);\nINSERT INTO employees VALUES(100, 'Partners',  '2018-12-01',14000);     \nINSERT INTO employees VALUES(200, 'Ross',  '2019-06-11',13500);     \nINSERT INTO employees VALUES(200, 'Bell', '2019-05-25', 13000);\nINSERT INTO employees VALUES(200, 'Part',  '2018-08-11',14000);   \nCOMMIT;\n\nobclient> SELECT VARIANCE(salary) FROM employees;\n+-------------------+\n| VARIANCE(salary)  |\n+-------------------+\n| 27561983.47107438 |\n+-------------------+\n1 row in set\n"], "Category": ["Aggregate Functions", "Analysis Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823030"], "Title": ["VAR_POP"], "Feature": ["VAR_POP(expr)\n"], "Description": ["返回表达式 expr 的总体标准方差。", "如果没有匹配到行，则该函数返回 NULL。"], "Examples": ["obclient> CREATE TABLE employees (manager_id INT,last_name VARCHAR(50),hiredate VARCHAR(50),salary INT);\nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-01', 1700);\nINSERT INTO employees VALUES(100, 'De Haan', '2018-05-01',11000);      \nINSERT INTO employees VALUES(100, 'Errazuriz', '2017-07-21', 1400);\nINSERT INTO employees VALUES(100, 'Hartstein', '2019-05-01',14000);     \nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-22', 1700);\nINSERT INTO employees VALUES(100, 'Weiss',  '2019-07-11',13500);     \nINSERT INTO employees VALUES(100, 'Russell', '2019-10-05', 13000);\nINSERT INTO employees VALUES(100, 'Partners',  '2018-12-01',14000);     \nINSERT INTO employees VALUES(200, 'Ross',  '2019-06-11',13500);     \nINSERT INTO employees VALUES(200, 'Bell', '2019-05-25', 13000);\nINSERT INTO employees VALUES(200, 'Part',  '2018-08-11',14000);   \nCOMMIT;\n\nobclient> SELECT VAR_POP(salary) FROM employees;\n+-------------------+\n| VAR_POP(salary)   |\n+-------------------+\n| 27561983.47107438 |\n+-------------------+\n1 row in set\n"], "Category": ["Aggregate Functions", "Analysis Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823020"], "Title": ["VAR_SAMP"], "Feature": ["VAR_SAMP(expr)\n"], "Description": ["返回 expr 的样本方差。当计算包含一个值的表达式的样本方差时，该函数返回 NULL。", "如果没有匹配到行，则该函数返回 NULL。"], "Examples": ["obclient> CREATE TABLE employees (manager_id INT,last_name varchar(50),hiredate varchar(50),SALARY INT);\nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-01', 1700);\nINSERT INTO employees VALUES(100, 'De Haan', '2018-05-01',11000);      \nINSERT INTO employees VALUES(100, 'Errazuriz', '2017-07-21', 1400);\nINSERT INTO employees VALUES(100, 'Hartstein', '2019-05-01',14000);     \nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-22', 1700);\nINSERT INTO employees VALUES(100, 'Weiss',  '2019-07-11',13500);     \nINSERT INTO employees VALUES(100, 'Russell', '2019-10-05', 13000);\nINSERT INTO employees VALUES(100, 'Partners',  '2018-12-01',14000);     \nINSERT INTO employees VALUES(200, 'Ross',  '2019-06-11',13500);     \nINSERT INTO employees VALUES(200, 'Bell', '2019-05-25', 13000);\nINSERT INTO employees VALUES(200, 'Part',  '2018-08-11',14000);   \nCOMMIT;\n\n\nobclient> SELECT VAR_SAMP(salary) FROM employees;\n+-----------------------------------------------+\n| VAR_SAMP(salary)                              |\n+-----------------------------------------------+\n| 30318181.818181818181818181818181818181818181 |\n+-----------------------------------------------+\n1 row in set\n"], "Category": ["Aggregate Functions", "Analysis Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823029"], "Title": ["COUNT"], "Feature": ["COUNT([DISTINCT | ALL] expr)\n"], "Description": ["返回 SELECT 语句检索到的行中非 NULL 值的数目。如果找不到匹配的行，则返回 0。DISTINCT 选项可用于返回 expr 的不同值的数目。", "COUNT(*) 的稍微不同之处在于，它返回检索行的数目，不论其是否包含 NULL 值。"], "Examples": ["obclient> SELECT * FROM test;\n+----+------+------+\n| id | ip   | ip2  |\n+----+------+------+\n|  1 |    4 | NULL |\n|  3 |    3 | NULL |\n|  4 |    3 | NULL |\n+----+------+------+\n3 rows in set\n\nobclient> SELECT COUNT(ip2), COUNT(ip), COUNT(DISTINCT(ip)), COUNT(*) FROM test;\n+------------+-----------+---------------------+----------+\n| count(ip2) | count(ip) | count(distinct(ip)) | count(*) |\n+------------+-----------+---------------------+----------+\n|          0 |         3 |                   2 |        3 |\n+------------+-----------+---------------------+----------+\n1 row in set\n"], "Category": ["Aggregate Functions", "Analysis Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823028"], "Title": ["APPROX_COUNT_DISTINCT"], "Feature": ["APPROX_COUNT_DISTINCT(expr)\n"], "Description": ["对表达式 expr 去重后的行数进行计算，结果只能返回一个值，且该值是近似值，该函数可以进一步用于计算被引用的列的选择性。"], "Examples": ["obclient> CREATE TABLE employees (manager_id INT,last_name varchar(50),hiredate varchar(50),SALARY INT);\nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-01', 1700);\nINSERT INTO employees VALUES(100, 'De Haan', '2018-05-01',11000);      \nINSERT INTO employees VALUES(100, 'Errazuriz', '2017-07-21', 1400);\nINSERT INTO employees VALUES(100, 'Hartstein', '2019-05-01',14000);     \nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-22', 1700);\nINSERT INTO employees VALUES(100, 'Weiss',  '2019-07-11',13500);     \nINSERT INTO employees VALUES(100, 'Russell', '2019-10-05', 13000);\nINSERT INTO employees VALUES(100, 'Partners',  '2018-12-01',14000);     \nINSERT INTO employees VALUES(200, 'Ross',  '2019-06-11',13500);     \nINSERT INTO employees VALUES(200, 'Bell', '2019-05-25', 13000);\nINSERT INTO employees VALUES(200, 'Part',  '2018-08-11',14000);  \nCOMMIT;\n\nobclient> SELECT last_name, salary, APPROX_COUNT_DISTINCT(salary) OVER (ORDER BY hiredate) \"Variance\" FROM employees WHERE manager_id = 100 ORDER BY last_name, salary, \"Variance\";\n+-----------+--------+----------+\n| last_name | salary | Variance |\n+-----------+--------+----------+\n| De Haan   |  11000 |        3 |\n| Errazuriz |   1400 |        2 |\n| Hartstein |  14000 |        4 |\n| Partners  |  14000 |        4 |\n| Raphaely  |   1700 |        1 |\n| Raphaely  |   1700 |        2 |\n| Russell   |  13000 |        6 |\n| Weiss     |  13500 |        5 |\n+-----------+--------+----------+\n"], "Category": ["Aggregate Functions", "Analysis Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823027"], "Title": ["GROUPING"], "Feature": ["GROUPING(expr)\n"], "Description": ["GROUP BY 可以通过 WITH ROLLUP 子句将各分组进行汇总以表示更高级的聚合（也称为超聚合），并产生额外的行。例如以下 SQL 可以将销售额按年度分组，并输出各分组的汇总。", "其中 year 为 NULL 的行即超聚合行。", "obclient> SELECT year, SUM(profit) AS profit\n       FROM sales\n       GROUP BY year WITH ROLLUP;\n+------+--------+\n| year | profit |\n+------+--------+\n| 2000 |   4525 |\n| 2001 |   3010 |\n| NULL |   7535 |\n+------+--------+\n", "WITH ROLLUP 修饰多个 GROUP BY 列时，结果会更加复杂。在这种情况下，每一个分组都会产生一个超聚合行。例如以下 SQL 会产生额外的超聚合行。", "obclient> SELECT year, country, product, SUM(profit) AS profit\n       FROM sales\n       GROUP BY year, country, product WITH ROLLUP;\n+------+---------+------------+--------+\n| year | country | product    | profit |\n+------+---------+------------+--------+\n| 2000 | Finland | Computer   |   1500 |\n| 2000 | Finland | Phone      |    100 |\n| 2000 | Finland | NULL       |   1600 |\n| 2000 | India   | Calculator |    150 |\n| 2000 | India   | Computer   |   1200 |\n| 2000 | India   | NULL       |   1350 |\n| 2000 | USA     | Calculator |     75 |\n| 2000 | USA     | Computer   |   1500 |\n| 2000 | USA     | NULL       |   1575 |\n| 2000 | NULL    | NULL       |   4525 |\n| 2001 | Finland | Phone      |     10 |\n| 2001 | Finland | NULL       |     10 |\n| 2001 | USA     | Calculator |     50 |\n| 2001 | USA     | Computer   |   2700 |\n| 2001 | USA     | TV         |    250 |\n| 2001 | USA     | NULL       |   3000 |\n| 2001 | NULL    | NULL       |   3010 |\n| NULL | NULL    | NULL       |   7535 |\n+------+---------+------------+--------+\n", "GROUPING 函数用于对超聚合行进行区分，如果返回的行是超聚合行，则该函数返回 1，否则返回 0。", "例如对上述 SQL 进行改写，利用 GROUPING 函数的特性添加判断。", "obclient>  SELECT\n         IF(GROUPING(year), 'All years', year) AS year,\n         IF(GROUPING(country), 'All countries', country) AS country,\n         IF(GROUPING(product), 'All products', product) AS product,\n         SUM(profit) AS profit\n       FROM sales\n       GROUP BY year, country, product WITH ROLLUP;\n+-----------+---------------+--------------+--------+\n| year      | country       | product      | profit |\n+-----------+---------------+--------------+--------+\n| 2000      | Finland       | Computer     |   1500 |\n| 2000      | Finland       | Phone        |    100 |\n| 2000      | Finland       | All products |   1600 |\n| 2000      | India         | Calculator   |    150 |\n| 2000      | India         | Computer     |   1200 |\n| 2000      | India         | All products |   1350 |\n| 2000      | USA           | Calculator   |     75 |\n| 2000      | USA           | Computer     |   1500 |\n| 2000      | USA           | All products |   1575 |\n| 2000      | All countries | All products |   4525 |\n| 2001      | Finland       | Phone        |     10 |\n| 2001      | Finland       | All products |     10 |\n| 2001      | USA           | Calculator   |     50 |\n| 2001      | USA           | Computer     |   2700 |\n| 2001      | USA           | TV           |    250 |\n| 2001      | USA           | All products |   3000 |\n| 2001      | All countries | All products |   3010 |\n| All years | All countries | All products |   7535 |\n+-----------+---------------+--------------+--------+\n"], "Examples": ["obclient> CREATE TABLE employees (manager_id INT,last_name varchar(50),hiredate varchar(50),SALARY INT);\nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-01', 1700);\nINSERT INTO employees VALUES(100, 'De Haan', '2018-05-01',11000);      \nINSERT INTO employees VALUES(100, 'Errazuriz', '2017-07-21', 1400);\nINSERT INTO employees VALUES(100, 'Hartstein', '2019-05-01',14000);     \nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-22', 1700);\nINSERT INTO employees VALUES(100, 'Weiss',  '2019-07-11',13500);     \nINSERT INTO employees VALUES(100, 'Russell', '2019-10-05', 13000);\nINSERT INTO employees VALUES(100, 'Partners',  '2018-12-01',14000);     \nINSERT INTO employees VALUES(200, 'Ross',  '2019-06-11',13500);     \nINSERT INTO employees VALUES(200, 'Bell', '2019-05-25', 13000);\nINSERT INTO employees VALUES(200, 'Part',  '2018-08-11',14000);   \nCOMMIT;\n\nobclient> SELECT IF(GROUPING(manager_id),'manager_id',manager_id) AS manager_id,SUM(SALARY) FROM employees GROUP BY manager_id WITH ROLLUP;\n+------------+-------------+\n| manager_id | SUM(SALARY) |\n+------------+-------------+\n| 100        |       70300 |\n| 200        |       40500 |\n| manager_id |      110800 |\n+------------+-------------+\n3 rows in set\n"], "Category": ["Aggregate Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823015"], "Title": ["GROUP_CONCAT"], "Feature": ["GROUP_CONCAT([DISTINCT] expr [,expr ...]\n             [ORDER BY {unsigned_integer | col_name | expr}\n                 [ASC | DESC] [,col_name ...]]\n             [SEPARATOR str_val])\n"], "Description": ["返回带有来自一个组的连接的非 NULL 值的字符串结果。", "ORDER BY 用于指定排序列，ASC 表示生序排列，DESC 表示降序排列，默认为 ASC。", "SEPARATOR 用于指定连接字符串间的分隔符，默认分隔符为 ,。"], "Examples": ["obclient> SELECT * FROM book;     //表book（书编号，书名，出版社）\n+--------+--------------------------------+-----------------------------+\n| bookid | bookname                       | publishname                 |\n+--------+--------------------------------+-----------------------------+\n|      1 | git help                       | alibaba group publisher     |\n|      2 | MySQL性能优化                  | 浙江大学图文出版社          |\n|      3 | JAVA编程指南                   | 机械工业出版社              |\n|      3 | JAVA编程指南                   | 机械工业出版社              |\n|      4 | 大规模分布式存储系统           | 机械工业出版社              |\n+--------+--------------------------------+-----------------------------+\n5 rows in set   \n\n//查找书名信息\nobclient> SELECT GROUP_CONCAT(bookname) FROM book GROUP BY bookname;\n+-----------------------------------+\n| GROUP_CONCAT(bookname)            |\n+-----------------------------------+\n| git help                          |\n| JAVA编程指南,JAVA编程指南         |\n| MySQL性能优化                     |\n| 大规模分布式存储系统              |\n+-----------------------------------+\n4 rows in set\n\n//查找书名信息，书名唯一\nobclient> SELECT GROUP_CONCAT(distinct(bookname)) FROM book GROUP BY bookname;\n+----------------------------------+\n| GROUP_CONCAT(distinct(bookname)) |\n+----------------------------------+\n| git help                         |\n| JAVA编程指南                     |\n| MySQL性能优化                    |\n| 大规模分布式存储系统             |\n+----------------------------------+\n4 rows in set    \n\n//查找书名和出版社信息，以书名分组，出版社信息降序排序显示\nobclient> SELECT bookname, GROUP_CONCAT(publishname ORDER BY publishname DESC SEPARATOR ';' ) FROM book GROUP BY bookname;\n+--------------------------------+---------------------------------------------------------------------+\n| bookname                       | GROUP_CONCAT(publishname ORDER BY publishname DESC SEPARATOR ';' ) |\n+--------------------------------+---------------------------------------------------------------------+\n| git help                       | alibaba group publisher                                             |\n| JAVA编程指南                   | 机械工业出版社;机械工业出版社                                       |\n| MySQL性能优化                  | 浙江大学图文出版社                                                  |\n| 大规模分布式存储系统           | 机械工业出版社                                                      |\n+--------------------------------+---------------------------------------------------------------------+\n4 rows in set\n"], "Category": ["Aggregate Functions"]}
