{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823021"], "Title": ["AVG"], "Feature": ["AVG([DISTINCT | ALL] expr)\n"], "Description": ["返回指定组中的平均值，空值被忽略。DISTINCT 选项可用于返回 expr 的不同值的平均值。如果找不到匹配的行，则 AVG() 返回 NULL。"], "Examples": ["obclient> SELECT * FROM oceanbasetest;\n+----+------+------+\n| id | ip   | ip2  |\n+----+------+------+\n|  1 |    4 | NULL |\n|  3 |    3 | NULL |\n|  4 |    3 | NULL |\n+----+------+------+\n3 rows in set\n\nobclient> SELECT avg(ip2), avg(ip), avg(distinct(ip)) FROM oceanbasetest;\n+----------+---------+-------------------+\n| avg(ip2) | avg(ip) | avg(distinct(ip)) |\n+----------+---------+-------------------+\n|     NULL |  3.3333 |            3.5000 |\n+----------+---------+-------------------+\n1 row in set\n\nobclient> SELECT avg(distinct(ip)),avg(ip),avg(ip2) FROM oceanbasetest;\n+-------------------+---------+----------+\n| avg(distinct(ip)) | avg(ip) | avg(ip2) |\n+-------------------+---------+----------+\n|            3.5000 |  3.3333 |     NULL |\n+-------------------+---------+----------+\n1 row in set\n"], "Category": ["Aggregate Functions", "Analysis Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823039"], "Title": ["LAG"], "Feature": ["LAG { ( value_expr [, offset [, default]]) [ { RESPECT | IGNORE } NULLS ] | ( value_expr [ { RESPECT | IGNORE } NULLS ] [, offset [, default]] )} OVER ([ query_partition_clause ] order_by_clause)\n"], "Description": ["在一次查询中取出当前行的同一个字段的后面第 offset 行的数据，这种操作可以使用相同表的自连接来实现，但 LAG() 窗口函数有更高的效率。"], "Examples": ["obclient> CREATE TABLE EXPLOYEES(LAST_NAME CHAR(10), SALARY DECIMAL, JOB_ID CHAR(32));\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('JIM', 2000, 'CLEANER');\nQuery OK, 1 row affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('MIKE', 12000, 'ENGINEERING');\nQuery OK, 1 row affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('LILY', 13000, 'ENGINEERING');\nQuery OK, 1 row affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('TOM', 11000, 'ENGINEERING');\nQuery OK, 1 row affected\n\nobclient> SELECT LAST_NAME, LEAD(SALARY) OVER(ORDER BY SALARY) LEAD, LAG(SALARY) OVER(ORDER BY SALARY) LAG FROM EXPLOYEES;\n+-----------+-------+-------+\n| LAST_NAME | LEAD  | LAG   |\n+-----------+-------+-------+\n| JIM       | 11000 |  NULL |\n| TOM       | 12000 |  2000 |\n| MIKE      | 13000 | 11000 |\n| LILY      |  NULL | 12000 |\n+-----------+-------+-------+\n4 rows in set\n"], "Category": ["Analysis Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823056"], "Title": ["LAST_VALUE"], "Feature": ["LAST_VALUE { (expr) [ {RESPECT | IGNORE} NULLS ] | (expr [ {RESPECT | IGNORE} NULLS ])} OVER (analytic_clause)\n"], "Description": ["返回表达式 expr 的最后一个值。"], "Examples": ["obclient> CREATE TABLE EXPLOYEES(LAST_NAME CHAR(10), SALARY DECIMAL, JOB_ID CHAR(32));\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('JIM', 2000, 'CLEANER');\nQuery OK, 1 row affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('MIKE', 12000, 'ENGINEERING');\nQuery OK, 1 row affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('LILY', 13000, 'ENGINEERING');\nQuery OK, 1 row affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('TOM', 11000, 'ENGINEERING');\nQuery OK, 1 row affected\n\nobclient> SELECT LAST_NAME, FIRST_VALUE(SALARY) OVER(PARTITION BY JOB_ID) FIRST_S, LAST_VALUE(SALARY) OVER(PARTITION BY JOB_ID) LAST_S, NTH_VALUE(SALARY,2) OVER(PARTITION BY JOB_ID) 2ND_S FROM EXPLOYEES;\n+-----------+---------+--------+-------+\n| LAST_NAME | FIRST_S | LAST_S | 2ND_S |\n+-----------+---------+--------+-------+\n| JIM       |    2000 |   2000 |  NULL |\n| MIKE      |   12000 |  11000 | 13000 |\n| LILY      |   12000 |  11000 | 13000 |\n| TOM       |   12000 |  11000 | 13000 |\n+-----------+---------+--------+-------+\n4 rows in set\n"], "Category": ["Analysis Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823058"], "Title": ["LEAD"], "Feature": ["LEAD { ( value_expr [, offset [, default]]) [ { RESPECT | IGNORE } NULLS ] | ( value_expr [ { RESPECT | IGNORE } NULLS ] [, offset [, default]] )} OVER ([ query_partition_clause ] order_by_clause)\n"], "Description": ["LEAD 函数用户在一次查询中取出当前行的同一个字段的后面第 N 行的数据，这种操作可以使用相同表的自连接来实现，但 LEAD() 窗口函数有更高的效率。"], "Examples": ["obclient> CREATE TABLE EXPLOYEES(LAST_NAME CHAR(10), SALARY DECIMAL, JOB_ID CHAR(32));\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('JIM', 2000, 'CLEANER');\nQuery OK, 1 row affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('MIKE', 12000, 'ENGINEERING');\nQuery OK, 1 row affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('LILY', 13000, 'ENGINEERING');\nQuery OK, 1 row affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('TOM', 11000, 'ENGINEERING');\nQuery OK, 1 row affected\n\nobclient> SELECT LAST_NAME, LEAD(SALARY) OVER(ORDER BY SALARY) LEAD, LAG(SALARY) OVER(ORDER BY SALARY) LAG FROM EXPLOYEES;\n+-----------+-------+-------+\n| LAST_NAME | LEAD  | LAG   |\n+-----------+-------+-------+\n| JIM       | 11000 |  NULL |\n| TOM       | 12000 |  2000 |\n| MIKE      | 13000 | 11000 |\n| LILY      |  NULL | 12000 |\n+-----------+-------+-------+\n4 rows in set\n"], "Category": ["Analysis Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823017"], "Title": ["MAX"], "Feature": ["MAX([DISTINCT | ALL] expr)\n"], "Description": ["返回指定数据中的最大值。", "MAX() 的取值可以是一个字符串参数，在这些情况下，它们返回最大字符串值。DISTINCT 关键字表示只计算不同值，缺省为 ALL。"], "Examples": ["obclient> SELECT MAX(num) FROM a;\n+-----------------+\n| MAX(num)        |\n+-----------------+\n|              30 |\n+-----------------+\n1 row in set\n"], "Category": ["Aggregate Functions", "Analysis Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823019"], "Title": ["BIT_AND"], "Feature": ["BIT_AND(expr)\n"], "Description": ["返回 expr 中所有位的按位与。", "结果类型取决于函数参数值被评估为二进制字符串还是数字。当参数值具有二进制字符串类型，并且参数不是十六进制字面量、Bit 字面量或 NULL 字面量时，就会发生二进制字符串求值。否则会发生数值计算，必要时将参数值转换为无符号 64 位整数。", "如果没有匹配的行，BIT_AND() 返回一个与参数值长度相同的中性值（所有位都设置为 1）。", "除非所有值都为 NULL，否则 NULL 值不会影响结果。在这种情况下，结果是一个与参数值具有相同长度的中性值。"], "Examples": ["CREATE TABLE product_information(supplier_id INT, product_id INT,list_price numeric, min_price numeric);\nINSERT INTO PRODUCT_INFORMATION VALUES ('102050', '1659', '45', NULL);\nINSERT INTO PRODUCT_INFORMATION VALUES ('102050', '1770', NULL, '70');\nINSERT INTO PRODUCT_INFORMATION VALUES ('102050', '2370', '305', '247');\nINSERT INTO PRODUCT_INFORMATION VALUES ('102050', '2380', '750', '731');\nINSERT INTO PRODUCT_INFORMATION VALUES ('102050', '3255', NULL, NULL);\nINSERT INTO PRODUCT_INFORMATION VALUES ('102050', '1659', '35', NULL);\n\nobclient> SELECT * FROM product_information;\n+-------------+------------+------------+-----------+\n| supplier_id | product_id | list_price | min_price |\n+-------------+------------+------------+-----------+\n|      102050 |       1659 |         45 |      NULL |\n|      102050 |       1770 |       NULL |        70 |\n|      102050 |       2370 |        305 |       247 |\n|      102050 |       2380 |        750 |       731 |\n|      102050 |       3255 |       NULL |      NULL |\n|      102050 |       2380 |        750 |       731 |\n|      102050 |       1659 |         35 |      NULL |\n+-------------+------------+------------+-----------+\n7 rows in set\n\nobclient> SELECT product_id, BIT_AND(list_price) BITS FROM product_information GROUP BY product_id;\n+------------+----------------------+\n| product_id | BITS                 |\n+------------+----------------------+\n|       1659 |                   33 |\n|       1770 | 18446744073709551615 |\n|       2370 |                  305 |\n|       2380 |                  750 |\n|       3255 | 18446744073709551615 |\n+------------+----------------------+\n5 rows in set\n"], "Category": ["Aggregate Functions", "Analysis Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823024"], "Title": ["MIN"], "Feature": ["MIN([DISTINCT | ALL] expr)\n"], "Description": ["返回指定数据中的最小值。", "MIN() 的取值可以是字符串参数，结果返回最小字符串值。DISTINCT 关键字表示只计算不同值，缺省为 ALL。"], "Examples": ["obclient> SELECT MIN(num) FROM a;\n+----------------+\n| MIN(num)       |\n+----------------+\n|             10 |\n+----------------+\n1 row in set\n"], "Category": ["Aggregate Functions", "Analysis Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823043"], "Title": ["NTH_VALUE"], "Feature": ["NTH_VALUE (measure_expr, n) [ FROM { FIRST | LAST } ] [ { RESPECT | IGNORE } NULLS ] OVER (analytic_clause)\n"], "Description": ["返回表达式 expr 的第 n 个值，方向由 [ FROM { FIRST | LAST } ] 确定，默认为 FROM FIRST，含有是否忽略 NULL 值的标志。其窗口为统一的 analytic_clause。", "其中，n 必须为正数，如果 n 是 NULL，函数将返回错误；如果 n 大于窗口内所有的行数，此函数将返回 NULL。"], "Examples": ["obclient> CREATE TABLE EXPLOYEES(LAST_NAME CHAR(10), SALARY DECIMAL, JOB_ID CHAR(32));\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('JIM', 2000, 'CLEANER');\nQuery OK, 1 row affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('MIKE', 12000, 'ENGINEERING');\nQuery OK, 1 row affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('LILY', 13000, 'ENGINEERING');\nQuery OK, 1 row affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('TOM', 11000, 'ENGINEERING');\nQuery OK, 1 row affected\n\nobclient> SELECT LAST_NAME, FIRST_VALUE(SALARY) OVER(PARTITION BY JOB_ID) FIRST_S, LAST_VALUE(SALARY) OVER(PARTITION BY JOB_ID) LAST_S, NTH_VALUE(SALARY,2) OVER(PARTITION BY JOB_ID) 2ND_S FROM EXPLOYEES;\n+-----------+---------+--------+-------+\n| LAST_NAME | FIRST_S | LAST_S | 2ND_S |\n+-----------+---------+--------+-------+\n| JIM       |    2000 |   2000 |  NULL |\n| MIKE      |   12000 |  11000 | 13000 |\n| LILY      |   12000 |  11000 | 13000 |\n| TOM       |   12000 |  11000 | 13000 |\n+-----------+---------+--------+-------+\n4 rows in set\n"], "Category": ["Analysis Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823046"], "Title": ["NTILE"], "Feature": ["NTILE(expr) OVER ([ query_partition_clause ] order_by_clause)\n"], "Description": ["将分区中已经排序的行划分为大小尽可能相同的指定数量的分组，并返回给每行组号。expr 如果是 NULL，则返回 NULL。"], "Examples": ["obclient> CREATE TABLE employees(LAST_NAME CHAR(10), SALARY DECIMAL, JOB_ID CHAR(32));\nINSERT INTO employees VALUES('JIM', 2000, 'CLEANER');\nINSERT INTO employees VALUES('MIKE', 12000, 'ENGINEERING');\nINSERT INTO employees VALUES('LILY', 13000, 'ENGINEERING');\nINSERT INTO employees VALUES('TOM', 11000, 'ENGINEERING');\nCOMMIT;\nQuery OK, 0 rows affected\n\nobclient> SELECT LAST_NAME, NTILE(10) OVER(PARTITION BY JOB_ID ORDER BY SALARY) NTL FROM employees;\n+-----------+------+\n| LAST_NAME | NTL  |\n+-----------+------+\n| JIM       |    1 |\n| TOM       |    1 |\n| MIKE      |    2 |\n| LILY      |    3 |\n+-----------+------+\n4 rows in set\n"], "Category": ["Analysis Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823053"], "Title": ["PERCENT_RANK"], "Feature": ["PERCENT_RANK( ) OVER ([ query_partition_clause ] order_by_clause)\n"], "Description": ["计算每一行数据在某列上的排序，该列由 order_by_clause 中的列决定，并返回百分比结果。"], "Examples": ["obclient> CREATE TABLE EXPLOYEES(LAST_NAME CHAR(10), SALARY DECIMAL, JOB_ID CHAR(32));\nobclient> INSERT INTO EXPLOYEES VALUES('JIM', 2000, 'CLEANER');\nobclient> INSERT INTO EXPLOYEES VALUES('MIKE', 12000, 'ENGINEERING');\nobclient> INSERT INTO EXPLOYEES VALUES('LILY', 13000, 'ENGINEERING');\nobclient> INSERT INTO EXPLOYEES VALUES('IRIS', 11000, 'ENGINEERING');\nobclient> INSERT INTO EXPLOYEES VALUES('TOM', 11000, 'ENGINEERING');\n\nobclient> SELECT LAST_NAME, RANK() OVER(PARTITION BY JOB_ID ORDER BY SALARY) RANK, DENSE_RANK() OVER(PARTITION BY JOB_ID ORDER BY SALARY) DENSE_RANK, PERCENT_RANK() OVER(PARTITION BY JOB_ID ORDER BY SALARY) PERCENT_RANK FROM EXPLOYEES;\n+-----------+------+------------+----------------------------------+\n| LAST_NAME | RANK | DENSE_RANK | PERCENT_RANK                     |\n+-----------+------+------------+----------------------------------+\n| JIM       |    1 |          1 | 0.000000000000000000000000000000 |\n| TOM       |    1 |          1 | 0.000000000000000000000000000000 |\n| IRIS      |    1 |          1 | 0.000000000000000000000000000000 |\n| MIKE      |    3 |          2 | 0.666666666666666666666666666667 |\n| LILY      |    4 |          3 | 1.000000000000000000000000000000 |\n+-----------+------+------------+----------------------------------+\n5 rows in set\n"], "Category": ["Analysis Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823026"], "Title": ["BIT_OR"], "Feature": ["BIT_OR(expr)\n"], "Description": ["返回 expr 中所有位的按位或。", "结果类型取决于函数参数值被评估为二进制字符串还是数字。当参数值具有二进制字符串类型，并且参数不是十六进制字面量、Bit 字面量或 NULL 字面量时，就会发生二进制字符串求值。否则会发生数值计算，必要时将参数值转换为无符号 64 位整数。", "如果没有匹配的行，BIT_OR() 返回一个与参数值长度相同的中性值（所有位都设置为 0）。除非所有值都为 NULL，否则 NULL 值不会影响结果。在这种情况下，结果是一个与参数值具有相同长度的中性值。"], "Examples": ["obclient> CREATE TABLE tbl1 (year YEAR (4), month INT(2)UNSIGNED ZEROFILL, day INT(2) UNSIGNED ZEROFILL);\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO tbl1 VALUES(2021,1,1),(2021,1,22),(2021,1,3),(2021,2,2), (2021,2,23),(2021,2,23);\nQuery OK, 6 rows affected\nRecords: 6  Duplicates: 0  Warnings: 0\n\nobclient> SELECT * FROM tbl1;\n+------+-------+------+\n| year | month | day  |\n+------+-------+------+\n| 2021 |    01 |   01 |\n| 2021 |    01 |   22 |\n| 2021 |    01 |   03 |\n| 2021 |    02 |   02 |\n| 2021 |    02 |   23 |\n| 2021 |    02 |   23 |\n+------+-------+------+\n6 rows in set\n\nobclient> SELECT year,month,BIT_COUNT(BIT_OR(1<<day)) AS days FROM tbl1 GROUP BY year,month;\n+------+-------+------+\n| year | month | days |\n+------+-------+------+\n| 2021 |    01 |    3 |\n| 2021 |    02 |    2 |\n+------+-------+------+\n2 rows in set\n"], "Category": ["Aggregate Functions", "Analysis Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823040"], "Title": ["RANK"], "Feature": ["RANK() OVER ([ query_partition_clause ] order_by_clause\n"], "Description": ["计算每一行数据在某列的秩，该列由 order_by_clause 中的列决定。", "对于秩相同的行，返回值会产生跳跃。"], "Examples": ["obclient> CREATE TABLE EXPLOYEES(LAST_NAME CHAR(10), SALARY DECIMAL, JOB_ID CHAR(32));\nINSERT INTO EXPLOYEES VALUES('JIM', 2000, 'CLEANER');\nINSERT INTO EXPLOYEES VALUES('MIKE', 12000, 'ENGINEERING');\nINSERT INTO EXPLOYEES VALUES('LILY', 13000, 'ENGINEERING');\nINSERT INTO EXPLOYEES VALUES('IRIS', 11000, 'ENGINEERING');\nINSERT INTO EXPLOYEES VALUES('TOM', 11000, 'ENGINEERING');\nCOMMIT;\nQuery OK, 1 row affected\n\nobclient> SELECT LAST_NAME, RANK() OVER(PARTITION BY JOB_ID ORDER BY SALARY) RANK, DENSE_RANK() OVER(PARTITION BY JOB_ID ORDER BY SALARY) DENSE_RANK, PERCENT_RANK() OVER(PARTITION BY JOB_ID ORDER BY SALARY) PERCENT_RANK FROM EXPLOYEES;\n+-----------+------+------------+----------------------------------+\n| LAST_NAME | RANK | DENSE_RANK | PERCENT_RANK                     |\n+-----------+------+------------+----------------------------------+\n| JIM       |    1 |          1 | 0.000000000000000000000000000000 |\n| TOM       |    1 |          1 | 0.000000000000000000000000000000 |\n| IRIS      |    1 |          1 | 0.000000000000000000000000000000 |\n| MIKE      |    3 |          2 | 0.666666666666666666666666666667 |\n| LILY      |    4 |          3 | 1.000000000000000000000000000000 |\n+-----------+------+------------+----------------------------------+\n5 rows in set\n"], "Category": ["Analysis Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823018"], "Title": ["BIT_XOR"], "Feature": ["BIT_XOR(expr)\n"], "Description": ["返回 expr 中所有位的按位异或。", "结果类型取决于函数参数值被评估为二进制字符串还是数字。当参数值具有二进制字符串类型，并且参数不是十六进制字面量、Bit 字面量或 NULL 字面量时，就会发生二进制字符串求值。否则会发生数值计算，必要时将参数值转换为无符号 64 位整数。", "如果没有匹配的行，BIT_XOR() 返回一个与参数值长度相同的中性值（所有位都设置为 0）。", "除非所有值都为 NULL，否则 NULL 值不会影响结果。在这种情况下，结果是一个与参数值具有相同长度的中性值。"], "Examples": ["obclient> SELECT year,month,BIT_COUNT(BIT_XOR(1<<day)) AS days FROM tbl1 GROUP BY year,month;\n+------+-------+------+\n| year | month | days |\n+------+-------+------+\n| 2021 |    01 |    3 |\n| 2021 |    02 |    1 |\n+------+-------+------+\n2 rows in set\n"], "Category": ["Aggregate Functions", "Analysis Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823033"], "Title": ["ROW_NUMBER"], "Feature": ["ROW_NUMBER() OVER ([ query_partition_clause ] order_by_clause)\n"], "Description": ["按照 order_by_clause 子句中指定的行的顺序，为每一行分配一个编号。"], "Examples": ["obclient> CREATE TABLE employees(LAST_NAME CHAR(10), SALARY DECIMAL, JOB_ID CHAR(32));\nINSERT INTO employees VALUES('JIM', 2000, 'CLEANER');\nINSERT INTO employees VALUES('MIKE', 12000, 'ENGINEERING');\nINSERT INTO employees VALUES('LILY', 13000, 'ENGINEERING');\nINSERT INTO employees VALUES('TOM', 11000, 'ENGINEERING');\nCOMMIT;\nQuery OK, 1 row affected\n\nobclient> SELECT LAST_NAME, ROW_NUMBER() OVER(PARTITION BY JOB_ID ORDER BY SALARY) NTL FROM employees;\n+-----------+------+\n| LAST_NAME | NTL  |\n+-----------+------+\n| JIM       |    1 |\n| TOM       |    1 |\n| MIKE      |    2 |\n| LILY      |    3 |\n+-----------+------+\n4 rows in set\n"], "Category": ["Analysis Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823014"], "Title": ["STD"], "Feature": ["STD(expr)\n"], "Description": ["返回表达式 expr 的总体标准差，该函数是 STDDEV_POP() 的别名。", "如果没有匹配到行，则该函数返回 NULL。"], "Examples": ["obclient> CREATE TABLE employees (manager_id INT,last_name varchar(50),hiredate varchar(50),SALARY INT);\nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-01', 1700);\nINSERT INTO employees VALUES(100, 'De Haan', '2018-05-01',11000);      \nINSERT INTO employees VALUES(100, 'Errazuriz', '2017-07-21', 1400);\nINSERT INTO employees VALUES(100, 'Hartstein', '2019-05-01',14000);     \nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-22', 1700);\nINSERT INTO employees VALUES(100, 'Weiss',  '2019-07-11',13500);     \nINSERT INTO employees VALUES(100, 'Russell', '2019-10-05', 13000);\nINSERT INTO employees VALUES(100, 'Partners',  '2018-12-01',14000);     \nINSERT INTO employees VALUES(200, 'Ross',  '2019-06-11',13500);     \nINSERT INTO employees VALUES(200, 'Bell', '2019-05-25', 13000);\nINSERT INTO employees VALUES(200, 'Part',  '2018-08-11',14000);   \nCOMMIT;\n\nobclient> SELECT STD(salary) FROM employees;\n+-------------------+\n| STD(salary)       |\n+-------------------+\n| 5249.950806538513 |\n+-------------------+\n1 row in set\n"], "Category": ["Aggregate Functions", "Analysis Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823023"], "Title": ["STDDEV"], "Feature": ["STDDEV(expr)\n"], "Description": ["返回表达式 expr 的总体标准差。如果没有匹配到行，则该函数返回 NULL。", "该函数是 STDDEV_POP() 的别名。"], "Examples": ["obclient> CREATE TABLE employees (manager_id INT,last_name varchar(50),hiredate varchar(50),SALARY INT);\nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-01', 1700);\nINSERT INTO employees VALUES(100, 'De Haan', '2018-05-01',11000);      \nINSERT INTO employees VALUES(100, 'Errazuriz', '2017-07-21', 1400);\nINSERT INTO employees VALUES(100, 'Hartstein', '2019-05-01',14000);     \nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-22', 1700);\nINSERT INTO employees VALUES(100, 'Weiss',  '2019-07-11',13500);     \nINSERT INTO employees VALUES(100, 'Russell', '2019-10-05', 13000);\nINSERT INTO employees VALUES(100, 'Partners',  '2018-12-01',14000);     \nINSERT INTO employees VALUES(200, 'Ross',  '2019-06-11',13500);     \nINSERT INTO employees VALUES(200, 'Bell', '2019-05-25', 13000);\nINSERT INTO employees VALUES(200, 'Part',  '2018-08-11',14000);   \nCOMMIT;\n\nobclient> SELECT STDDEV(salary) FROM employees;\n+-------------------+\n| STDDEV(salary)    |\n+-------------------+\n| 5249.950806538513 |\n+-------------------+\n1 row in set\n"], "Category": ["Aggregate Functions", "Analysis Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823016"], "Title": ["STDDEV_POP"], "Feature": ["STDDEV_POP(expr)\n"], "Description": ["返回表达式 expr 的总体标准差。", "如果没有匹配到行，则该函数返回 NULL。"], "Examples": ["obclient> CREATE TABLE employees (manager_id INT,last_name varchar(50),hiredate varchar(50),SALARY INT);\nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-01', 1700);\nINSERT INTO employees VALUES(100, 'De Haan', '2018-05-01',11000);      \nINSERT INTO employees VALUES(100, 'Errazuriz', '2017-07-21', 1400);\nINSERT INTO employees VALUES(100, 'Hartstein', '2019-05-01',14000);     \nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-22', 1700);\nINSERT INTO employees VALUES(100, 'Weiss',  '2019-07-11',13500);     \nINSERT INTO employees VALUES(100, 'Russell', '2019-10-05', 13000);\nINSERT INTO employees VALUES(100, 'Partners',  '2018-12-01',14000);     \nINSERT INTO employees VALUES(200, 'Ross',  '2019-06-11',13500);     \nINSERT INTO employees VALUES(200, 'Bell', '2019-05-25', 13000);\nINSERT INTO employees VALUES(200, 'Part',  '2018-08-11',14000);   \nCOMMIT;\n\nobclient> SELECT STDDEV_POP(salary) FROM employees;\n+--------------------+\n| STDDEV_POP(salary) |\n+--------------------+\n|  5249.950806538513 |\n+--------------------+\n1 row in set\n"], "Category": ["Aggregate Functions", "Analysis Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823031"], "Title": ["STDDEV_SAMP"], "Feature": ["STDDEV_SAMP(expr)\n"], "Description": ["返回 expr 的样本标准差，该函数返回 VAR_SAMP() 函数结果的平方根。有关 VAR_SAMP() 函数的详细信息，请参见 VAR_SAMP。", "如果没有匹配到行，则该函数返回 NULL。"], "Examples": ["obclient> CREATE TABLE employees (manager_id INT,last_name VARCHAR(50),hiredate VARCHAR(50),salary INT);\nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-01', 1700);\nINSERT INTO employees VALUES(100, 'De Haan', '2018-05-01',11000);      \nINSERT INTO employees VALUES(100, 'Errazuriz', '2017-07-21', 1400);\nINSERT INTO employees VALUES(100, 'Hartstein', '2019-05-01',14000);     \nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-22', 1700);\nINSERT INTO employees VALUES(100, 'Weiss',  '2019-07-11',13500);     \nINSERT INTO employees VALUES(100, 'Russell', '2019-10-05', 13000);\nINSERT INTO employees VALUES(100, 'Partners',  '2018-12-01',14000);     \nINSERT INTO employees VALUES(200, 'Ross',  '2019-06-11',13500);     \nINSERT INTO employees VALUES(200, 'Bell', '2019-05-25', 13000);\nINSERT INTO employees VALUES(200, 'Part',  '2018-08-11',14000);   \nCOMMIT;\n\n\nobclient> SELECT STDDEV_SAMP(salary) FROM employees;\n+---------------------+\n| STDDEV_SAMP(salary) |\n+---------------------+\n|   5506.194858355616 |\n+---------------------+\n1 row in set\n"], "Category": ["Aggregate Functions", "Analysis Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823025"], "Title": ["SUM"], "Feature": ["SUM([DISTINCT | ALL] expr)\n"], "Description": ["返回 expr 的总数。如果集合中无任何行，则返回 NULL。DISTINCT 关键字可用于求得 expr 不同值的总和。", "如果找不到匹配的行，该函数也会返回 NULL。"], "Examples": ["obclient> SELECT * FROM oceanbasetest;\n+------+------+------+\n| id   | ip   | ip2  |\n+------+------+------+\n|    1 |    4 | NULL |\n|    3 |    3 | NULL |\n|    4 |    3 | NULL |\n+------+------+------+\n3 rows in set\n\nobclient> SELECT SUM(ip2),SUM(ip),SUM(DISTINCT(ip)) FROM oceanbasetest;\n+----------+---------+-------------------+\n| sum(ip2) | sum(ip) | sum(distinct(ip)) |\n+----------+---------+-------------------+\n|     NULL |      10 |                 7 |\n+----------+---------+-------------------+\n1 row in set\n"], "Category": ["Aggregate Functions", "Analysis Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823022"], "Title": ["VARIANCE"], "Feature": ["VARIANCE(expr)\n"], "Description": ["返回表达式 expr 的总体标准方差，该函数是 VAR_POP() 的别名。", "如果没有匹配到行，则该函数返回 NULL。"], "Examples": ["obclient> CREATE TABLE employees (manager_id INT,last_name VARCHAR(50),hiredate VARCHAR(50),salary INT);\nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-01', 1700);\nINSERT INTO employees VALUES(100, 'De Haan', '2018-05-01',11000);      \nINSERT INTO employees VALUES(100, 'Errazuriz', '2017-07-21', 1400);\nINSERT INTO employees VALUES(100, 'Hartstein', '2019-05-01',14000);     \nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-22', 1700);\nINSERT INTO employees VALUES(100, 'Weiss',  '2019-07-11',13500);     \nINSERT INTO employees VALUES(100, 'Russell', '2019-10-05', 13000);\nINSERT INTO employees VALUES(100, 'Partners',  '2018-12-01',14000);     \nINSERT INTO employees VALUES(200, 'Ross',  '2019-06-11',13500);     \nINSERT INTO employees VALUES(200, 'Bell', '2019-05-25', 13000);\nINSERT INTO employees VALUES(200, 'Part',  '2018-08-11',14000);   \nCOMMIT;\n\nobclient> SELECT VARIANCE(salary) FROM employees;\n+-------------------+\n| VARIANCE(salary)  |\n+-------------------+\n| 27561983.47107438 |\n+-------------------+\n1 row in set\n"], "Category": ["Aggregate Functions", "Analysis Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823030"], "Title": ["VAR_POP"], "Feature": ["VAR_POP(expr)\n"], "Description": ["返回表达式 expr 的总体标准方差。", "如果没有匹配到行，则该函数返回 NULL。"], "Examples": ["obclient> CREATE TABLE employees (manager_id INT,last_name VARCHAR(50),hiredate VARCHAR(50),salary INT);\nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-01', 1700);\nINSERT INTO employees VALUES(100, 'De Haan', '2018-05-01',11000);      \nINSERT INTO employees VALUES(100, 'Errazuriz', '2017-07-21', 1400);\nINSERT INTO employees VALUES(100, 'Hartstein', '2019-05-01',14000);     \nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-22', 1700);\nINSERT INTO employees VALUES(100, 'Weiss',  '2019-07-11',13500);     \nINSERT INTO employees VALUES(100, 'Russell', '2019-10-05', 13000);\nINSERT INTO employees VALUES(100, 'Partners',  '2018-12-01',14000);     \nINSERT INTO employees VALUES(200, 'Ross',  '2019-06-11',13500);     \nINSERT INTO employees VALUES(200, 'Bell', '2019-05-25', 13000);\nINSERT INTO employees VALUES(200, 'Part',  '2018-08-11',14000);   \nCOMMIT;\n\nobclient> SELECT VAR_POP(salary) FROM employees;\n+-------------------+\n| VAR_POP(salary)   |\n+-------------------+\n| 27561983.47107438 |\n+-------------------+\n1 row in set\n"], "Category": ["Aggregate Functions", "Analysis Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823020"], "Title": ["VAR_SAMP"], "Feature": ["VAR_SAMP(expr)\n"], "Description": ["返回 expr 的样本方差。当计算包含一个值的表达式的样本方差时，该函数返回 NULL。", "如果没有匹配到行，则该函数返回 NULL。"], "Examples": ["obclient> CREATE TABLE employees (manager_id INT,last_name varchar(50),hiredate varchar(50),SALARY INT);\nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-01', 1700);\nINSERT INTO employees VALUES(100, 'De Haan', '2018-05-01',11000);      \nINSERT INTO employees VALUES(100, 'Errazuriz', '2017-07-21', 1400);\nINSERT INTO employees VALUES(100, 'Hartstein', '2019-05-01',14000);     \nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-22', 1700);\nINSERT INTO employees VALUES(100, 'Weiss',  '2019-07-11',13500);     \nINSERT INTO employees VALUES(100, 'Russell', '2019-10-05', 13000);\nINSERT INTO employees VALUES(100, 'Partners',  '2018-12-01',14000);     \nINSERT INTO employees VALUES(200, 'Ross',  '2019-06-11',13500);     \nINSERT INTO employees VALUES(200, 'Bell', '2019-05-25', 13000);\nINSERT INTO employees VALUES(200, 'Part',  '2018-08-11',14000);   \nCOMMIT;\n\n\nobclient> SELECT VAR_SAMP(salary) FROM employees;\n+-----------------------------------------------+\n| VAR_SAMP(salary)                              |\n+-----------------------------------------------+\n| 30318181.818181818181818181818181818181818181 |\n+-----------------------------------------------+\n1 row in set\n"], "Category": ["Aggregate Functions", "Analysis Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823029"], "Title": ["COUNT"], "Feature": ["COUNT([DISTINCT | ALL] expr)\n"], "Description": ["返回 SELECT 语句检索到的行中非 NULL 值的数目。如果找不到匹配的行，则返回 0。DISTINCT 选项可用于返回 expr 的不同值的数目。", "COUNT(*) 的稍微不同之处在于，它返回检索行的数目，不论其是否包含 NULL 值。"], "Examples": ["obclient> SELECT * FROM test;\n+----+------+------+\n| id | ip   | ip2  |\n+----+------+------+\n|  1 |    4 | NULL |\n|  3 |    3 | NULL |\n|  4 |    3 | NULL |\n+----+------+------+\n3 rows in set\n\nobclient> SELECT COUNT(ip2), COUNT(ip), COUNT(DISTINCT(ip)), COUNT(*) FROM test;\n+------------+-----------+---------------------+----------+\n| count(ip2) | count(ip) | count(distinct(ip)) | count(*) |\n+------------+-----------+---------------------+----------+\n|          0 |         3 |                   2 |        3 |\n+------------+-----------+---------------------+----------+\n1 row in set\n"], "Category": ["Aggregate Functions", "Analysis Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823041"], "Title": ["CUME_DIST"], "Feature": ["CUME_DIST() OVER ([ query_partition_clause ] order_by_clause)\n"], "Description": ["该函数计算一个值的分布，返回值为大于 0 小于等于 1 的值。作为一个分析函数，CUME_DIST() 在升序情况下计算比当前行的特定列数值小的数据的占比。"], "Examples": ["obclient> CREATE TABLE EXPLOYEES(LAST_NAME CHAR(10), SALARY DECIMAL, JOB_ID CHAR(32));\nINSERT INTO EXPLOYEES VALUES('JIM', 2000, 'CLEANER');\nINSERT INTO EXPLOYEES VALUES('MIKE', 12000, 'ENGINEERING');\nINSERT INTO EXPLOYEES VALUES('LILY', 13000, 'ENGINEERING');\nINSERT INTO EXPLOYEES VALUES('IRIS', 11000, 'ENGINEERING');\nINSERT INTO EXPLOYEES VALUES('TOM', 11000, 'ENGINEERING');\nCOMMIT;\nQuery OK, 1 row affected\n\nobclient> SELECT LAST_NAME, CUME_DIST() OVER(PARTITION BY JOB_ID ORDER BY SALARY) CUME_DIST FROM EXPLOYEES;\n+-----------+----------------------------------+\n| LAST_NAME | CUME_DIST                        |\n+-----------+----------------------------------+\n| JIM       | 1.000000000000000000000000000000 |\n| TOM       | 0.500000000000000000000000000000 |\n| IRIS      | 0.500000000000000000000000000000 |\n| MIKE      | 0.750000000000000000000000000000 |\n| LILY      | 1.000000000000000000000000000000 |\n+-----------+----------------------------------+\n5 rows in set\n"], "Category": ["Analysis Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823038"], "Title": ["DENSE_RANK"], "Feature": ["DENSE_RANK() OVER([ query_partition_clause ] order_by_clause)\n"], "Description": ["计算每一行数据在某列上的排序，该列由 order_by_clause 中的列决定。", "排名是连续的整数。对于相同排名的行，排名数值相同。"], "Examples": ["CREATE TABLE employees(LAST_NAME CHAR(10), SALARY DECIMAL, JOB_ID CHAR(32));\nINSERT INTO employees VALUES('JIM', 2000, 'CLEANER');\nINSERT INTO employees VALUES('MIKE', 12000, 'ENGINEERING');\nINSERT INTO employees VALUES('LILY', 13000, 'ENGINEERING');\nINSERT INTO employees VALUES('IRIS', 11000, 'ENGINEERING');\nINSERT INTO employees VALUES('TOM', 11000, 'ENGINEERING');\nCOMMIT;\nQuery OK, 1 row affected\n\nobclient> SELECT LAST_NAME, RANK() OVER(PARTITION BY JOB_ID ORDER BY SALARY) RANK, DENSE_RANK() OVER(PARTITION BY JOB_ID ORDER BY SALARY) DENSE_RANK, PERCENT_RANK() OVER(PARTITION BY JOB_ID ORDER BY SALARY) PERCENT_RANK FROM employees;\n+-----------+------+------------+----------------------------------+\n| LAST_NAME | RANK | DENSE_RANK | PERCENT_RANK                     |\n+-----------+------+------------+----------------------------------+\n| JIM       |    1 |          1 | 0.000000000000000000000000000000 |\n| TOM       |    1 |          1 | 0.000000000000000000000000000000 |\n| IRIS      |    1 |          1 | 0.000000000000000000000000000000 |\n| MIKE      |    3 |          2 | 0.666666666666666666666666666667 |\n| LILY      |    4 |          3 | 1.000000000000000000000000000000 |\n+-----------+------+------------+----------------------------------+\n5 rows in set\n"], "Category": ["Analysis Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823052"], "Title": ["FIRST_VALUE"], "Feature": ["FIRST_VALUE { (expr) [ {RESPECT | IGNORE} NULLS ] | (expr [ {RESPECT | IGNORE} NULLS ])} OVER (analytic_clause)\n"], "Description": ["返回表达式 expr 的第一个值。"], "Examples": ["obclient> CREATE TABLE EXPLOYEES(LAST_NAME CHAR(10), SALARY DECIMAL, JOB_ID CHAR(32));\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('JIM', 2000, 'CLEANER');\nQuery OK, 1 row affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('MIKE', 12000, 'ENGINEERING');\nQuery OK, 1 row affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('LILY', 13000, 'ENGINEERING');\nQuery OK, 1 row affected\n\nobclient> INSERT INTO EXPLOYEES VALUES('TOM', 11000, 'ENGINEERING');\nQuery OK, 1 row affected\n\nobclient> SELECT LAST_NAME, FIRST_VALUE(SALARY) OVER(PARTITION BY JOB_ID) FIRST_S, LAST_VALUE(SALARY) OVER(PARTITION BY JOB_ID) LAST_S, NTH_VALUE(SALARY,2) OVER(PARTITION BY JOB_ID) 2ND_S FROM EXPLOYEES;\n+-----------+---------+--------+-------+\n| LAST_NAME | FIRST_S | LAST_S | 2ND_S |\n+-----------+---------+--------+-------+\n| JIM       |    2000 |   2000 |  NULL |\n| MIKE      |   12000 |  11000 | 13000 |\n| LILY      |   12000 |  11000 | 13000 |\n| TOM       |   12000 |  11000 | 13000 |\n+-----------+---------+--------+-------+\n4 rows in set\n"], "Category": ["Analysis Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823028"], "Title": ["APPROX_COUNT_DISTINCT"], "Feature": ["APPROX_COUNT_DISTINCT(expr)\n"], "Description": ["对表达式 expr 去重后的行数进行计算，结果只能返回一个值，且该值是近似值，该函数可以进一步用于计算被引用的列的选择性。"], "Examples": ["obclient> CREATE TABLE employees (manager_id INT,last_name varchar(50),hiredate varchar(50),SALARY INT);\nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-01', 1700);\nINSERT INTO employees VALUES(100, 'De Haan', '2018-05-01',11000);      \nINSERT INTO employees VALUES(100, 'Errazuriz', '2017-07-21', 1400);\nINSERT INTO employees VALUES(100, 'Hartstein', '2019-05-01',14000);     \nINSERT INTO employees VALUES(100, 'Raphaely', '2017-07-22', 1700);\nINSERT INTO employees VALUES(100, 'Weiss',  '2019-07-11',13500);     \nINSERT INTO employees VALUES(100, 'Russell', '2019-10-05', 13000);\nINSERT INTO employees VALUES(100, 'Partners',  '2018-12-01',14000);     \nINSERT INTO employees VALUES(200, 'Ross',  '2019-06-11',13500);     \nINSERT INTO employees VALUES(200, 'Bell', '2019-05-25', 13000);\nINSERT INTO employees VALUES(200, 'Part',  '2018-08-11',14000);  \nCOMMIT;\n\nobclient> SELECT last_name, salary, APPROX_COUNT_DISTINCT(salary) OVER (ORDER BY hiredate) \"Variance\" FROM employees WHERE manager_id = 100 ORDER BY last_name, salary, \"Variance\";\n+-----------+--------+----------+\n| last_name | salary | Variance |\n+-----------+--------+----------+\n| De Haan   |  11000 |        3 |\n| Errazuriz |   1400 |        2 |\n| Hartstein |  14000 |        4 |\n| Partners  |  14000 |        4 |\n| Raphaely  |   1700 |        1 |\n| Raphaely  |   1700 |        2 |\n| Russell   |  13000 |        6 |\n| Weiss     |  13500 |        5 |\n+-----------+--------+----------+\n"], "Category": ["Aggregate Functions", "Analysis Functions"]}
