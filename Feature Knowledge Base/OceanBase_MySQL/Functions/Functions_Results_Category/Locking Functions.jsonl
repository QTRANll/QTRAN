{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823007"], "Title": ["IS_FREE_LOCK"], "Feature": ["IS_FREE_LOCK('str')\n"], "Description": ["该函数用来检查由字符串 str 命名的锁是否是自由的，即用来检测一个命名锁是否被其他会话持有。", "参数解释", "str：指定要检查的锁的名称，字符串类型。", "返回值", "返回 1：表示锁是自由的，即没有会话持有此锁。", "返回 0：表示锁已经被某个会话持有，即此锁并不是自由的。"], "Examples": ["obclient [(none)]> SELECT IS_FREE_LOCK('my_lock');\n", "+-------------------------+\n| IS_FREE_LOCK('my_lock') |\n+-------------------------+\n|                       0 |\n+-------------------------+\n1 row in set\n", "obclient [(none)]> SELECT IS_USED_LOCK('my_lock');\n", "+-------------------------+\n| IS_USED_LOCK('my_lock') |\n+-------------------------+\n|              3221487701 |\n+-------------------------+\n1 row in set\n"], "Category": ["Locking Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823004"], "Title": ["IS_USED_LOCK"], "Feature": ["IS_USED_LOCK('str')\n"], "Description": ["该函数用于检测由字符串 str 命名的锁是否正在被某个会话使用（即锁是否已经被获取）。", "参数解释", "str: 指定要检查的锁的名称，字符串类型。", "返回值", "返回会话 ID：表示锁已被使用。这一个数字代表着获取该锁的客户端会话。", "返回 NULL：表示锁没有被任何会话使用。"], "Examples": ["obclient [(none)]> SELECT IS_USED_LOCK('my_lock');\n", "+-------------------------+\n| IS_USED_LOCK('my_lock') |\n+-------------------------+\n|              3221487701 |\n+-------------------------+\n1 row in set\n", "obclient [(none)]> SELECT * FROM oceanbase.GV$OB_PROCESSLIST WHERE ID = 3221487701\\G\n", "*************************** 1. row ***************************\n           SVR_IP: xxx.xxx.xxx.xx1\n         SVR_PORT: 2882\n         SQL_PORT: 2881\n               ID: 3221487701\n             USER: root\n             HOST: xxx.xxx.xxx.xx2:61470\n               DB: NULL\n           TENANT: mysql001\n          COMMAND: Sleep\n             TIME: 1014.214143\n       TOTAL_TIME: 1014.214143\n            STATE: SLEEP\n             INFO: NULL\n     PROXY_SESSID: NULL\n    MASTER_SESSID: NULL\n   USER_CLIENT_IP: xxx.xxx.xxx.xx2\n        USER_HOST: %\n        RETRY_CNT: 0\n       RETRY_INFO: 0\n           SQL_ID:\n         TRANS_ID: 0\n        THREAD_ID: 0\n       SSL_CIPHER: NULL\n         TRACE_ID: NULL\n      TRANS_STATE:\n           ACTION:\n           MODULE:\n      CLIENT_INFO:\n            LEVEL: 1\nSAMPLE_PERCENTAGE: 10\n    RECORD_POLICY: SAMPLE_AND_SLOW_QUERY\n           LB_VID: NULL\n           LB_VIP: NULL\n         LB_VPORT: NULL\n         IN_BYTES: 448\n        OUT_BYTES: 0\n USER_CLIENT_PORT: 61470\n   TOTAL_CPU_TIME: 0\n1 row in set\n"], "Category": ["Locking Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823005"], "Title": ["RELEASE_ALL_LOCKS()"], "Feature": ["RELEASE_ALL_LOCKS()\n"], "Description": ["该函数用于释放当前会话所持有的所有命名锁，并返回成功释放的锁的数量。", "参数解释", "无参数。", "返回值", "返回成功释放的锁的数量。如果当前会话没有持有任何锁，那么返回值为 0。"], "Examples": ["obclient [(none)]> SELECT RELEASE_ALL_LOCKS();\n", "+---------------------+\n| RELEASE_ALL_LOCKS() |\n+---------------------+\n|                   1 |\n+---------------------+\n1 row in set\n"], "Category": ["Locking Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823002"], "Title": ["RELEASE_LOCK"], "Feature": ["RELEASE_LOCK('str')\n"], "Description": ["该函数用于释放当前会话之前使用 GET_LOCK() 函数获取命名锁（即名为 str 的锁）。", "参数解释", "str: 指定要释放的锁的名称，字符串类型。", "返回值", "返回 1：表示当前会话持有该锁，并且该锁被成功释放。", "返回 0：表示当前会话不是该锁的持有者，该锁没有被当前会话释放。", "返回 ", "NULL", "：表示该锁不存在，即没有通过 ", "GET_LOCK()", " 获取锁，或者该锁已经之前被释放过了。"], "Examples": ["obclient [(none)]> SELECT RELEASE_LOCK('my_lock');\n", "+-------------------------+\n| RELEASE_LOCK('my_lock') |\n+-------------------------+\n|                       0 |\n+-------------------------+\n1 row in set\n"], "Category": ["Locking Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823003"], "Title": ["GET_LOCK"], "Feature": ["GET_LOCK('str', timeout)\n"], "Description": ["该函数用于尝试获取一个带有特定名称（str）的锁。当一个会话成功地获取了一个特定名称的锁之后，其他任何会话在尝试获取同名的锁时都会被阻塞（即被迫等待），直到原来持有该锁的会话释放该锁为止。", "使用 GET_LOCK() 函数获取的锁可以通过执行 RELEASE_LOCK() 来显式释放，除此之外，当会话终止时，无论是正常结束还是异常结束，该会话持有的锁都会被隐式释放。", "\n注意\n使用 GET_LOCK() 获得的锁不会因事务的提交或回滚而被释放。\n", "参数解释", "str: 指定锁的名称，字符串类型。", "timeout: 指定等待锁释放的超时时间（以秒为单位）。取值如下：", "\n取值可以是一个 0 或者正数。\n也可以是负值，则表示等待时间是无限的，即会话将一直等待直至获取到锁。\n", "取值可以是一个 0 或者正数。", "也可以是负值，则表示等待时间是无限的，即会话将一直等待直至获取到锁。", "返回值", "返回 1：表示锁已成功获取。此时调用 ", "GET_LOCK", " 的那个会话拥有了锁，其他任何尝试获取同名锁的操作都将不会成功，除非这个锁被释放。", "返回 0：表示获取锁的尝试由于超时而失败。这通常意味着锁已经被另一个会话获取并且在超时期间没有被释放。", "返回 ", "NULL", "：表示尝试获取锁时发生错误，这可能是由于内存不足，或者尝试获取锁的线程被强制结束。"], "Examples": ["obclient [(none)]> SELECT GET_LOCK('my_lock', 10);\n", "+-------------------------+\n| GET_LOCK('my_lock', 10) |\n+-------------------------+\n|                       1 |\n+-------------------------+\n1 row in set\n", "obclient [(none)]> SELECT GET_LOCK('my_lock', 10);\n", "+-------------------------+\n| GET_LOCK('my_lock', 10) |\n+-------------------------+\n|                       0 |\n+-------------------------+\n1 row in set\n"], "Category": ["Locking Functions"]}
