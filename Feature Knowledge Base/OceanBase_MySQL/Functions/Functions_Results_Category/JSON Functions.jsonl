{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823294"], "Title": ["JSON_APPEND"], "Feature": ["JSON_APPEND(json_doc, path, val[, path, val] ...)\n"], "Description": ["该函数用于将指定的值附加到 JSON 文档中指定数组的末尾并返回结果。是函数 JSON_ARRAY_APPEND() 的别名。", "json_doc 参数用于指定 JSON 文档，path 为路径参数。如果任何参数为 NULL，则返回 NULL。", "以下情况都会发生报错：", "json_doc 参数不是有效的 JSON 文档。", "path 参数不是有效的路径表达式。", "path 参数包含 * 或 ** 通配符。", "路径值对 path-value 按照从左到右的顺序进行评估。通过评估的 path-value 对所生成的文档作为评估下一对的新值。", "如果路径对应的值是一个标量或对象值，则该值将自动包裹在数组中，并将新值添加到该数组中。JSON 文档中未经路径识别所属数组的 path-value 对将被忽略。"], "Examples": ["obclient> SET @jn = '[\"a\", [\"b\", \"c\"], \"d\",\"e\"]';\n", "obclient> SELECT JSON_APPEND(@jn, '$[1]', 1);\n", "+--------------------------------+\n| JSON_APPEND(@jn, '$[1]', 1)    |\n+--------------------------------+\n| [\"a\", [\"b\", \"c\", 1], \"d\", \"e\"] |\n+--------------------------------+\n1 row in set\n", "obclient> SELECT JSON_APPEND(@jn, '$[0]', 2);\n", "+----------------------------------+\n| JSON_APPEND(@jn, '$[0]', 2)      |\n+----------------------------------+\n| [[\"a\", 2], [\"b\", \"c\"], \"d\", \"e\"] |\n+----------------------------------+\n1 row in set\n", "obclient> SELECT JSON_APPEND(@jn, '$[1][0]', 3);\n", "+----------------------------------+\n| JSON_APPEND(@jn, '$[1][0]', 3)   |\n+----------------------------------+\n| [\"a\", [[\"b\", 3], \"c\"], \"d\", \"e\"] |\n+----------------------------------+\n1 row in set\n", "obclient> SET @jemp = '{\"a\": 1, \"b\": [2, 3], \"c\": 4}';\n", "obclient> SELECT JSON_APPEND(@jemp, '$.b', 'x');\n", "+------------------------------------+\n| JSON_APPEND(@jemp, '$.b', 'x')     |\n+------------------------------------+\n| {\"a\": 1, \"b\": [2, 3, \"x\"], \"c\": 4} |\n+------------------------------------+\n1 row in set\n", "obclient> SELECT JSON_APPEND(@jemp, '$.c', 'y');\n", "+--------------------------------------+\n| JSON_APPEND(@jemp, '$.c', 'y')       |\n+--------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": [4, \"y\"]} |\n+--------------------------------------+\n1 row in set\n", "obclient> SET @temp = '{\"a\": 5}';\n", "obclient> SELECT JSON_APPEND(@temp, '$', 'z');\n", "+------------------------------+\n| JSON_APPEND(@temp, '$', 'z') |\n+------------------------------+\n| [{\"a\": 5}, \"z\"]              |\n+------------------------------+\n1 row in set\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823315"], "Title": ["JSON_ARRAY"], "Feature": ["JSON_ARRAY([val[, val] ...])\n"], "Description": ["该函数根据输入的（可能为空）值的列表返回包含这些值的 JSON 数组。", "参数 val 表示输入的值。"], "Examples": ["obclient> SELECT JSON_ARRAY(1, \"abcd\", NULL, TRUE, CURTIME(),'[a,b,c]','{\"d\":100}');\n+---------------------------------------------------------------------+\n| JSON_ARRAY(1, \"abcd\", NULL, TRUE, CURTIME(),'[a,b,c]','{\"d\":100}')   |\n+---------------------------------------------------------------------+\n| [1, \"abcd\", null, true, \"21:49:37.000000\", \"[a,b,c]\", \"{\\\"d\\\":100}\"] |\n+---------------------------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_ARRAY(NULL);\n+------------------+\n| JSON_ARRAY(NULL) |\n+------------------+\n| [null]           |\n+------------------+\n1 row in set\n\nobclient> SELECT JSON_ARRAY();\n+--------------+\n| JSON_ARRAY() |\n+--------------+\n| []           |\n+--------------+\n1 row in set\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823303"], "Title": ["JSON_ARRAYAGG"], "Feature": ["JSON_ARRAYAGG(col_or_expr)[over_clause]\n"], "Description": ["该函数将结果集聚合为单个 JSON 数组，其元素由行组成。此数组中元素的顺序未定义。", "该函数作用于计算为单个值的列或表达式。", "参数 col_or_expr 为列或表达式。如果结果不包含行，或者出现错误，则返回 NULL。", "\n注意\n该函数暂不支持窗口函数，即 OVER 子句。\n"], "Examples": ["obclient> CREATE TABLE tbl1 (oid INT, attr VARCHAR(100), value VARCHAR(100));\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO tbl1 VALUES (2, 'color', 'red'),(2, 'fabric', 'silk'),(3,'color','green'),(3,'shape','square');\nQuery OK, 4 rows affected\nRecords: 4  Duplicates: 0  Warnings: 0\n\nobclient> SELECT oid, JSON_ARRAYAGG(attr) AS attributes FROM tbl1 GROUP BY oid;\n+------+---------------------+\n| oid  | attributes          |\n+------+---------------------+\n|    2 | [\"color\", \"fabric\"] |\n|    3 | [\"color\", \"shape\"]  |\n+------+---------------------+\n2 rows in set\n\nobclient> INSERT INTO tbl1 SELECT * FROM tbl1;\nQuery OK, 4 rows affected\nRecords: 4  Duplicates: 0  Warnings: 0\n\nobclient> SELECT oid, JSON_ARRAYAGG(attr) AS attributes FROM tbl1 GROUP BY oid;\n+------+----------------------------------------+\n| oid  | attributes                             |\n+------+----------------------------------------+\n|    2 | [\"color\", \"fabric\", \"color\", \"fabric\"] |\n|    3 | [\"color\", \"shape\", \"color\", \"shape\"]   |\n+------+----------------------------------------+\n2 rows in set\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823295"], "Title": ["JSON_ARRAY_APPEND"], "Feature": ["JSON_ARRAY_APPEND(json_doc, path, val[, path, val] ...)\n"], "Description": ["该函数用于将指定的值附加到 JSON 文档中指定数组的末尾并返回结果。是函数 JSON_APPEND() 的别名。", "json_doc 参数用于指定 JSON 文档，path 为路径参数。如果任何参数为 NULL，则返回 NULL。", "以下情况都会发生报错：", "json_doc 参数不是有效的 JSON 文档。", "path 参数不是有效的路径表达式。", "path 参数包含 * 或 ** 通配符。", "路径值对 path-value 按照从左到右的顺序进行评估。通过评估的 path-value 对所生成的文档作为评估下一对的新值。", "如果路径对应的值是一个标量或对象值，则该值将自动包裹在数组中，并将新值添加到该数组中。JSON 文档中未经路径识别所属数组的 path-value 对将被忽略。"], "Examples": ["obclient> SET @jn = '[\"a\", [\"b\", \"c\"], \"d\",\"e\"]';\n", "obclient> SELECT JSON_ARRAY_APPEND(@jn, '$[1]', 1);\n", "+-----------------------------------+\n| JSON_ARRAY_APPEND(@jn, '$[1]', 1) |\n+-----------------------------------+\n| [\"a\", [\"b\", \"c\", 1], \"d\", \"e\"]    |\n+-----------------------------------+\n1 row in set\n", "obclient> SELECT JSON_ARRAY_APPEND(@jn, '$[0]', 2);\n", "+-----------------------------------+\n| JSON_ARRAY_APPEND(@jn, '$[0]', 2) |\n+-----------------------------------+\n| [[\"a\", 2], [\"b\", \"c\"], \"d\", \"e\"]  |\n+-----------------------------------+\n1 row in set\n", "obclient> SELECT JSON_ARRAY_APPEND(@jn, '$[1][0]', 3);\n", "+--------------------------------------+\n| JSON_ARRAY_APPEND(@jn, '$[1][0]', 3) |\n+--------------------------------------+\n| [\"a\", [[\"b\", 3], \"c\"], \"d\", \"e\"]     |\n+--------------------------------------+\n1 row in set\n", "obclient> SET @jemp = '{\"a\": 1, \"b\": [2, 3], \"c\": 4}';\n", "obclient> SELECT JSON_ARRAY_APPEND(@jemp, '$.b', 'x');\n", "+--------------------------------------+\n| JSON_ARRAY_APPEND(@jemp, '$.b', 'x') |\n+--------------------------------------+\n| {\"a\": 1, \"b\": [2, 3, \"x\"], \"c\": 4}   |\n+--------------------------------------+\n1 row in set\n", "obclient> SELECT JSON_ARRAY_APPEND(@jemp, '$.c', 'y');\n", "+--------------------------------------+\n| JSON_ARRAY_APPEND(@jemp, '$.c', 'y') |\n+--------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": [4, \"y\"]} |\n+--------------------------------------+\n1 row in set\n", "obclient> SET @temp = '{\"a\": 5}';\n", "obclient> SELECT JSON_ARRAY_APPEND(@temp, '$', 'z');\n", "+------------------------------------+\n| JSON_ARRAY_APPEND(@temp, '$', 'z') |\n+------------------------------------+\n| [{\"a\": 5}, \"z\"]                    |\n+------------------------------------+\n1 row in set\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823293"], "Title": ["JSON_ARRAY_INSERT"], "Feature": ["JSON_ARRAY_INSERT(json_doc, path, val[, path, val] ...)\n"], "Description": ["该函数用于将数组插入文档中并返回修改后的文档。", "json_doc 参数用于指定 JSON 文档，path 为路径参数。如果任何参数为 NULL，则返回 NULL。", "以下情况都会发生报错：", "json_doc 参数不是有效的 JSON 文档。", "path 参数不是有效的路径表达式。", "path 参数包含 * 或 ** 通配符。", "路径值对 path-value 按照从左到右的顺序进行评估。通过评估的 path-value 对所生成的文档作为评估下一对的新值。", "JSON 文档中未经路径识别所属数组的 path-value 对将被忽略。", "如果路径识别了某一数组元素，则在该元素位置插入相应的值，将所有后续值向右移动。如果路径识别的数组位置超出数组末尾的位置，则将值插入到数组末尾。"], "Examples": ["obclient> SET @jn = '[\"a\", {\"b\": [1, 2]}, [3, 4]]';\nQuery OK, 0 rows affected\n\nobclient> SELECT JSON_ARRAY_INSERT(@jn, '$[1]', 'x');\n+------------------------------------+\n| JSON_ARRAY_INSERT(@jn, '$[1]', 'x') |\n+------------------------------------+\n| [\"a\", \"x\", {\"b\": [1, 2]}, [3, 4]]  |\n+------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_ARRAY_INSERT(@jn, '$[50]', 'x');\n+--------------------------------------+\n| JSON_ARRAY_INSERT(@jn, '$[100]', 'x') |\n+--------------------------------------+\n| [\"a\", {\"b\": [1, 2]}, [3, 4], \"x\"]    |\n+--------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_ARRAY_INSERT(@jn, '$[1].b[0]', 'x');\n+-----------------------------------------+\n| JSON_ARRAY_INSERT(@jn, '$[1].b[0]', 'x') |\n+-----------------------------------------+\n| [\"a\", {\"b\": [\"x\", 1, 2]}, [3, 4]]       |\n+-----------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_ARRAY_INSERT(@jn, '$[2][1]', 'y');\n+---------------------------------------+\n| JSON_ARRAY_INSERT(@jn, '$[2][1]', 'y') |\n+---------------------------------------+\n| [\"a\", {\"b\": [1, 2]}, [3, \"y\", 4]]     |\n+---------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_ARRAY_INSERT(@n, '$[0]', 'x', '$[2][1]', 'y');\n+----------------------------------------------------+\n| JSON_ARRAY_INSERT(@jn, '$[0]', 'x', '$[2][1]', 'y') |\n+----------------------------------------------------+\n| [\"x\", \"a\", {\"b\": [1, 2]}, [3, 4]]                  |\n+----------------------------------------------------+\n1 row in set\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823309"], "Title": ["JSON_CONTAINS"], "Feature": ["JSON_CONTAINS(target, candidate[, path])\n"], "Description": ["该函数用于检验指定 JSON 文档是否包含在目标 JSON 文档中，或者是否在目标文档的指定路径上找到指定元素（如果提供了 path 参数）。如果指定 JSON 文档包含在目标 JSON 文档中，该函数返回 1，否则返回 0。", "如果只需要检查指定路径中是否存在数据，请使用 JSON_CONTAINS_PATH() 代替。", "参数 candidate 用于指定 JSON 文档，参数 target 表示目标 JSON 文档。", "如果任意参数为 NULL，或者 path 参数未被识别为目标文档的一部分，则返回 NULL。", "以下情况都会发生报错：", "candidate 或 target 参数不是有效的 JSON 文档。", "path 参数不是有效的路径表达式。", "path 参数包含 * 或 ** 通配符。", "该函数遵循以下的规则：", "单个元素相等的前提是两个标量值的 JSON_TYPE() 相同，并且可以进行比较。如果是数值类型，可以直接进行比较。", "对于数组，当且仅当 candidate 数组的所有元素都包含在 target 数组中时，candidate 数组才包含在 target 数组中。", "对于对象，当且仅当 candidate 对象的所有 key 都需要包含在 target 对象中，而且每个 key 对应的 value 也要和目标对象对应的 key 相同时，candidate 对象才包含在 target 对象中。"], "Examples": ["obclient> SET @jn = '{\"a\": 1, \"b\": 2, \"c\": {\"d\": 4}}';\nQuery OK, 0 rows affected\n\nobclient> SET @jn2 = '1';\nQuery OK, 0 rows affected\n\nobclient> SELECT JSON_CONTAINS(@jn, @jn2, '$.a');\n+---------------------------------+\n| JSON_CONTAINS(@jn, @jn2, '$.a') |\n+---------------------------------+\n|                               1 |\n+---------------------------------+\n1 row in set\n\nobclient> SELECT JSON_CONTAINS(@jn, @jn2, '$.b');\n+---------------------------------+\n| JSON_CONTAINS(@jn, @jn2, '$.b') |\n+---------------------------------+\n|                               0 |\n+---------------------------------+\n1 row in set\n\nobclient> SET @jn2 = '{\"d\": 4}';\nQuery OK, 0 rows affected\n\nobclient> SELECT JSON_CONTAINS(@jn, @jn2, '$.a');\n+---------------------------------+\n| JSON_CONTAINS(@jn, @jn2, '$.a') |\n+---------------------------------+\n|                               0 |\n+---------------------------------+\n1 row in set\n\nobclient> SELECT JSON_CONTAINS(@jn, @jn2, '$.c');\n+---------------------------------+\n| JSON_CONTAINS(@jn, @jn2, '$.c') |\n+---------------------------------+\n|                               1 |\n+---------------------------------+\n1 row in set\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823310"], "Title": ["JSON_CONTAINS_PATH"], "Feature": ["JSON_CONTAINS_PATH(json_doc, one_or_all, path[, path] ...)\n"], "Description": ["该函数用于检验一个或多个指定的路径是否包含于目标 JSON 文档中。如果包含在目标 JSON 文档中，该函数返回 1，否则返回 0。", "参数 json_doc 用于指定 JSON 文档，path 为路径参数。如果任何参数为 NULL，则返回 NULL。", "对于 one_or_all 参数，可选值如下：", "'one'：如果文档中至少存在一个路径，则返回 1，否则返回 0。", "'all'：如果文档中存在所有路径，则返回 1，否则返回 0。", "以下情况都会发生报错：", "json_doc 参数不是有效的 JSON 文档。", "任意 path 参数不是有效的路径表达式。", "one_or_all 参数不为 'one' 或者 'all'。"], "Examples": ["obclient> SET @jn = '{\"a\": 1, \"b\": 2, \"c\": {\"d\": 4}}';\nQuery OK, 0 rows affected\n\nobclient> SELECT JSON_CONTAINS_PATH(@jn, 'one', '$.a', '$.e');\n+---------------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'one', '$.a', '$.e') |\n+---------------------------------------------+\n|                                           1 |\n+---------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_CONTAINS_PATH(@jn, 'all', '$.a', '$.e');\n+---------------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'all', '$.a', '$.e') |\n+---------------------------------------------+\n|                                           0 |\n+---------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_CONTAINS_PATH(@jn, 'one', '$.c.d');\n+----------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'one', '$.c.d') |\n+----------------------------------------+\n|                                      1 |\n+----------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_CONTAINS_PATH(@jn, 'one', '$.a.d');\n+----------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'one', '$.a.d') |\n+----------------------------------------+\n|                                      0 |\n+----------------------------------------+\n1 row in set\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823286"], "Title": ["JSON_DEPTH"], "Feature": ["JSON_DEPTH(json_doc)\n"], "Description": ["返回 JSON 文档的最大深度。", "json_doc 参数用于指定 JSON 文档。如果参数为 NULL，则返回 NULL。", "如果参数不是有效的 JSON 文档，则会发生错误。", "空数组、空对象或标量值的深度为 1。仅包含深度为 1 的元素的非空数组深度为 2，仅包含深度为 1 的成员值的非空对象的深度为 2。否则，JSON 文档的深度大于 2。"], "Examples": ["obclient> SELECT JSON_DEPTH('{}'), JSON_DEPTH('[]'), JSON_DEPTH('true');\n+------------------+------------------+--------------------+\n| JSON_DEPTH('{}') | JSON_DEPTH('[]') | JSON_DEPTH('true') |\n+------------------+------------------+--------------------+\n|                1 |                1 |                  1 |\n+------------------+------------------+--------------------+\n1 row in set\n\nobclient> SELECT JSON_DEPTH('[101, 202]'), JSON_DEPTH('[[], {}]');\n+--------------------------+------------------------+\n| JSON_DEPTH('[101, 202]') | JSON_DEPTH('[[], {}]') |\n+--------------------------+------------------------+\n|                        2 |                      2 |\n+--------------------------+------------------------+\n1 row in set\n\nobclient> SELECT JSON_DEPTH('[101, {\"a\": 202}]');\n+---------------------------------+\n| JSON_DEPTH('[101, {\"a\": 202}]') |\n+---------------------------------+\n|                               3 |\n+---------------------------------+\n1 row in set\n\nobclient> SELECT JSON_DEPTH('{\"a\":101, \"v\":\"aaa\"}');\n+------------------------------------+\n| JSON_DEPTH('{\"a\":101, \"v\":\"aaa\"}') |\n+------------------------------------+\n|                                  2 |\n+------------------------------------+\n1 row in set\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823308"], "Title": ["JSON_EXTRACT"], "Feature": ["JSON_EXTRACT(json_doc, path[, path] ...)\n"], "Description": ["该函数用于从 JSON 文档中指定的路径返回数据。如果任何参数为 NULL 或在文档中没有定位到路径，则返回 NULL。", "参数 json_doc 用于指定 JSON 文档，path 为路径参数。如果参数 json_doc 不是有效的 JSON 文档或任意 path 参数不是有效的路径表达式，则会发生错误。", "返回值由 path 参数的所有匹配值组成。如果这些参数返回多个值，则匹配值将自动包裹为一个数组，顺序与生成它们的路径相对应。否则，返回单个匹配值。"], "Examples": ["obclient> SELECT JSON_EXTRACT('[10, 20, [30, 40]]', '$[0]');\n+--------------------------------------------+\n| JSON_EXTRACT('[10, 20, [30, 40]]', '$[0]') |\n+--------------------------------------------+\n| 10                                         |\n+--------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_EXTRACT('[10, 20, [30, 40]]', '$[2][1]');\n+-----------------------------------------------+\n| JSON_EXTRACT('[10, 20, [30, 40]]', '$[2][1]') |\n+-----------------------------------------------+\n| 40                                            |\n+-----------------------------------------------+\n1 row in set\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823291"], "Title": ["JSON_INSERT"], "Feature": ["JSON_INSERT(json_doc, path, val[, path, val] ...)\n"], "Description": ["该函数将数据插入 JSON 文档并返回结果。", "json_doc 参数用于指定 JSON 文档，path 为路径参数。如果任何参数为 NULL，则返回 NULL。", "以下情况都会发生报错：", "json_doc 参数不是有效的 JSON 文档。", "path 参数不是有效的路径表达式。", "path 参数包含 * 或 ** 通配符。", "路径值对 path-value 按照从左到右的顺序进行评估。通过 path-value 对所生成的文档作为评估下一对的新值。", "文档中现有路径的 path-value 对将被忽略并且不会覆盖现有文档值。如果路径识别出以下某一类型的值，则文档中不存在路径的 path-value 对会将值添加到文档中：", "现有对象中不存在的成员。该成员被添加到对象并与新值相关联。", "超出现有数组末尾的位置。此时使用新值扩展数组。如果现有值不是数组，则将其自动包裹为数组，然后使用新值进行扩展。", "否则，文档中不存在的路径的路径值对将被忽略且无效。"], "Examples": ["obclient> SET @jn = '{ \"a\": 1, \"b\": [2, 3]}';\nQuery OK, 0 rows affected\n\nobclient> SELECT JSON_INSERT(@jn, '$.a', 10, '$.c', '[true, false]');\n+-----------------------------------------------------+\n| JSON_INSERT(@jn, '$.a', 10, '$.c', '[true, false]') |\n+-----------------------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": \"[true, false]\"}         |\n+-----------------------------------------------------+\n1 row in set\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823312"], "Title": ["JSON_KEYS"], "Feature": ["JSON_KEYS(json_doc[, path])\n"], "Description": ["该函数从 JSON 对象的顶层值开始搜索，返回对应路径的 Key 的数组。", "参数 json_doc 用于指定 JSON 文档，path 为路径参数。如果任何参数为 NULL，则返回 NULL。", "如果 json_doc 参数指定的不是对象，或者 path（如果给出）不对应任何路径，返回 NULL。", "以下情况都会发生报错：", "json_doc 参数 不是有效的 JSON 文档。", "path 参数不是有效的路径表达式。", "path 参数包含 * 或 ** 通配符。", "如果选定的对象为空，则结果为空。如果顶层值嵌套了子对象，则返回值不包括来自这些子对象的 Key。"], "Examples": ["obclient> SELECT JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 20}}', '$.b');\n+----------------------------------------------+\n| JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 20}}', '$.b') |\n+----------------------------------------------+\n| [\"c\"]                                        |\n+----------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 20}}');\n+---------------------------------------+\n| JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 20}}') |\n+---------------------------------------+\n| [\"a\", \"b\"]                            |\n+---------------------------------------+\n1 row in set\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823285"], "Title": ["JSON_LENGTH"], "Feature": ["JSON_LENGTH(json_doc[, path])\n"], "Description": ["该函数返回 JSON 文档的长度。如果给出了 path 参数，则返回由路径标识的文档中值的长度。", "json_doc 参数用于指定 JSON 文档，path 为路径参数。如果任何参数为 NULL 或 path 参数未标识文档中的值，则返回 NULL。", "以下情况都会发生报错：", "json_doc 参数不是有效的 JSON 文档。", "path 参数不是有效的路径表达式。", "path 参数包含 * 或 ** 通配符。", "JSON 文档的长度定义如下：", "标量的长度为 1。", "数组的长度是数组元素的数量。", "对象的长度是对象成员的数量。", "不计算嵌套数组或对象的长度。"], "Examples": ["obclient> SELECT JSON_LENGTH('[1, 2, {\"a\": 3}, 4]');\n+------------------------------------+\n| JSON_LENGTH('[1, 2, {\"a\": 3}, 4]') |\n+------------------------------------+\n|                                  4 |\n+------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_LENGTH('{\"a\": 1, \"b\": {\"c\": 303}}');\n+------------------------------------------+\n| JSON_LENGTH('{\"a\": 1, \"b\": {\"c\": 303}}') |\n+------------------------------------------+\n|                                        2 |\n+------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_LENGTH('{\"a\": 1, \"b\": {\"c\": 30}}', '$.b');\n+------------------------------------------------+\n| JSON_LENGTH('{\"a\": 1, \"b\": {\"c\": 30}}', '$.b') |\n+------------------------------------------------+\n|                                              1 |\n+------------------------------------------------+\n1 row in set\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823297"], "Title": ["JSON_MERGE"], "Feature": ["JSON_MERGE(json_doc, json_doc[, json_doc] ...)\n"], "Description": ["该函数用于合并多个 JSON 文档。该函数是 JSON_MERGE_PRESERVE() 的同义词。", "json_doc 参数指定需要合并的 JSON 文档。"], "Examples": ["obclient> SELECT JSON_MERGE('[1, 2, 3]', '[true, false]', '{\"a\":100}');\n+-------------------------------------------------------+\n| JSON_MERGE('[1, 2, 3]', '[true, false]', '{\"a\":100}') |\n+-------------------------------------------------------+\n| [1, 2, 3, true, false, {\"a\": 100}]                    |\n+-------------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_MERGE('{\"1\": 2}', '[true, false]', '{\"a\":100}');\n+------------------------------------------------------+\n| JSON_MERGE('{\"1\": 2}', '[true, false]', '{\"a\":100}') |\n+------------------------------------------------------+\n| [{\"1\": 2}, true, false, {\"a\": 100}]                  |\n+------------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_MERGE('{\"1\": 2}',  '{\"a\":100}');\n+--------------------------------------+\n| JSON_MERGE('{\"1\": 2}',  '{\"a\":100}') |\n+--------------------------------------+\n| {\"1\": 2, \"a\": 100}                   |\n+--------------------------------------+\n1 row in set\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823299"], "Title": ["JSON_MERGE_PATCH"], "Feature": ["JSON_MERGE_PATCH(json_doc, json_doc[, json_doc] ...)\n"], "Description": ["该函数依据 RFC 7396 标准对两个或多个 JSON 文档执行合并，并返回合并结果，结果不保留具有重复键的成员。如果某一个参数所传递的文档无效，则会引发错误。", "参数 json_doc 指定需要合并的 JSON 文档。", "JSON_MERGE_PATCH() 执行合并的规则如下：", "如果第一个参数不是对象，则将其视为空对象与第二个参数合并作为合并结果。", "如果第二个参数不是对象，则合并结果是第二个参数。", "如果两个参数都是对象，则合并结果是具有以下成员的对象：", "\n第一个对象的所有成员在第二个对象中没有具有相同键的对应成员。\n第二个对象的所有成员在第一个对象中没有对应的键，并且其值不是 JSON 的 null 字面量。\n所有成员的键都存在于第一个和第二个对象中，并且在第二个对象中的值不是 JSON 的 null 字面量。 这些成员的值是递归合并第一个对象中的值与第二个对象中的值的结果。\n", "第一个对象的所有成员在第二个对象中没有具有相同键的对应成员。", "第二个对象的所有成员在第一个对象中没有对应的键，并且其值不是 JSON 的 null 字面量。", "所有成员的键都存在于第一个和第二个对象中，并且在第二个对象中的值不是 JSON 的 null 字面量。 这些成员的值是递归合并第一个对象中的值与第二个对象中的值的结果。"], "Examples": ["obclient> SELECT JSON_MERGE_PATCH('[1, 2, 3]', '[true, false]');\n+------------------------------------------------+\n| JSON_MERGE_PATCH('[1, 2, 3]', '[true, false]') |\n+------------------------------------------------+\n| [true, false]                                  |\n+------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_MERGE_PATCH('{\"name\": \"x\"}', '{\"id\": 23}');\n+-------------------------------------------------+\n| JSON_MERGE_PATCH('{\"name\": \"x\"}', '{\"id\": 23}') |\n+-------------------------------------------------+\n| {\"id\": 23, \"name\": \"x\"}                         |\n+-------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_MERGE_PATCH('1', 'true');\n+-------------------------------+\n| JSON_MERGE_PATCH('1', 'true') |\n+-------------------------------+\n| true                          |\n+-------------------------------+\n1 row in set\n\nobclient> SELECT JSON_MERGE_PATCH('[1, 2, 3]', '{\"id\": 45}');\n+---------------------------------------------+\n| JSON_MERGE_PATCH('[1, 2, 3]', '{\"id\": 45}') |\n+---------------------------------------------+\n| {\"id\": 45}                                  |\n+---------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }','{ \"a\": 3, \"c\":4 }');\n+-----------------------------------------------------------+\n| JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }','{ \"a\": 3, \"c\":4 }') |\n+-----------------------------------------------------------+\n| {\"a\": 3, \"b\": 2, \"c\": 4}                                  |\n+-----------------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }',NULL);\n+--------------------------------------------+\n| JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }',NULL) |\n+--------------------------------------------+\n| NULL                                       |\n+--------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }','{ \"a\": 3, \"c\":4 }', '{ \"a\": 5, \"d\":6 }');\n+--------------------------------------------------------------------------------+\n| JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }','{ \"a\": 3, \"c\":4 }', '{ \"a\": 5, \"d\":6 }') |\n+--------------------------------------------------------------------------------+\n| {\"a\": 5, \"b\": 2, \"c\": 4, \"d\": 6}                                               |\n+--------------------------------------------------------------------------------+\n1 row in set\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823296"], "Title": ["JSON_MERGE_PRESERVE"], "Feature": ["JSON_MERGE_PRESERVE(json_doc, json_doc[, json_doc] ...)\n"], "Description": ["合并两个或多个 JSON 文档并返回合并结果。", "参数 json_doc 指定需要合并的 JSON 文档。", "如果任何参数为 NULL，则返回 NULL。如果任何参数不是有效的 JSON 文档，则会报错。", "JSON_MERGE_PRESERVE() 合并规则如下：", "相邻数组合并为一个数组。", "相邻的对象合并为一个对象。", "标量值自动包裹为数组并且合并为数组。", "通过将对象自动包裹为数组来合并相邻的数组和对象。"], "Examples": ["obclient> SELECT JSON_MERGE_PRESERVE('[1, 2, 3]', '[true, false]');\n+---------------------------------------------------+\n| JSON_MERGE_PRESERVE('[1, 2, 3]', '[true, false]') |\n+---------------------------------------------------+\n| [1, 2, 3, true, false]                            |\n+---------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_MERGE_PRESERVE('{\"name\": \"apple\"}', '{\"id\": 56}');\n+--------------------------------------------------------+\n| JSON_MERGE_PRESERVE('{\"name\": \"apple\"}', '{\"id\": 56}') |\n+--------------------------------------------------------+\n| {\"id\": 56, \"name\": \"apple\"}                            |\n+--------------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_MERGE_PRESERVE('1', 'true');\n+----------------------------------+\n| JSON_MERGE_PRESERVE('1', 'true') |\n+----------------------------------+\n| [1, true]                        |\n+----------------------------------+\n1 row in set\n\nobclient> SELECT JSON_MERGE_PRESERVE('[1, 2, 3]', '{\"id\": 56}');\n+------------------------------------------------+\n| JSON_MERGE_PRESERVE('[1, 2, 3]', '{\"id\": 56}') |\n+------------------------------------------------+\n| [1, 2, 3, {\"id\": 56}]                          |\n+------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_MERGE_PRESERVE('{ \"a\": 1, \"b\": 2, \"c\": 5}',  '{ \"a\": 3, \"c\": 4 }');\n+-------------------------------------------------------------------------+\n| JSON_MERGE_PRESERVE('{ \"a\": 1, \"b\": 2, \"c\": 5}',  '{ \"a\": 3, \"c\": 4 }') |\n+-------------------------------------------------------------------------+\n| {\"a\": [1, 3], \"b\": 2, \"c\": [5, 4]}                                      |\n+-------------------------------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_MERGE_PRESERVE('{ \"a\": 1, \"b\": 2 }','{ \"a\": 3, \"c\": 4 }', '{ \"a\": 5, \"d\": 6 }');\n+--------------------------------------------------------------------------------------+\n| JSON_MERGE_PRESERVE('{ \"a\": 1, \"b\": 2 }','{ \"a\": 3, \"c\": 4 }', '{ \"a\": 5, \"d\": 6 }') |\n+--------------------------------------------------------------------------------------+\n| {\"a\": [1, 3, 5], \"b\": 2, \"c\": 4, \"d\": 6}                                             |\n+--------------------------------------------------------------------------------------+\n1 row in set\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823316"], "Title": ["JSON_OBJECT"], "Feature": ["JSON_OBJECT([key, val[, key, val] ...])\n"], "Description": ["该函数根据用户输入的 key-value 对返回相应的 JSON 对象。", "key, val 表示一个键值对。如果参数数量为奇数，则会发生报错。"], "Examples": ["obclient> SELECT JSON_OBJECT('id', 69, 'name', 'apple');\n+----------------------------------------+\n| JSON_OBJECT('id', 69, 'name', 'apple') |\n+----------------------------------------+\n| {\"id\": 69, \"name\": \"apple\"}            |\n+----------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_OBJECT('id', 69, 'name', 'apple', 100);\nERROR 1582 (42000): Incorrect parameter count in the call to native function 'JSON_OBJECT'\n\nobclient> SELECT JSON_OBJECT('id', 69, 'name', 'apple', 100, 'good');\n+-----------------------------------------------------+\n| JSON_OBJECT('id', 69, 'name', 'apple', 100, 'good') |\n+-----------------------------------------------------+\n| {\"id\": 69, \"100\": \"good\", \"name\": \"apple\"}          |\n+-----------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_OBJECT();\n+---------------+\n| JSON_OBJECT() |\n+---------------+\n| {}            |\n+---------------+\n1 row in set\n\nobclient> SELECT JSON_OBJECT('id', 69, 'name', 'apple', '[100,200]','{names:tim}');\n+-------------------------------------------------------------------+\n| JSON_OBJECT('id', 69, 'name', 'apple', '[100,200]','{names:tim}') |\n+-------------------------------------------------------------------+\n| {\"id\": 69, \"name\": \"apple\", \"[100,200]\": \"{names:tim}\"}           |\n+-------------------------------------------------------------------+\n1 row in set\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823302"], "Title": ["JSON_OBJECTAGG"], "Feature": ["JSON_OBJECTAGG(key, value) [over_clause]\n"], "Description": ["该函数将两个列名或表达式作为参数，第一个用作键，第二个用作值，并返回包含键值对的 JSON 对象。", "key, value 表示键值对。如果结果不包含行，或者出现错误，则返回 NULL。如果任何键名称为 NULL 或参数数量不等于 2，则会发生错误。", "根据 JSON 文本的要求，对象中不能存在重复的键值，所以重复的键值会被删除。由于聚合操作机制 是逐行处理结果集，所以最后一个重复键的值会被保留，而 SELECT 语句 返回的数据行可能是无序的，所以最后哪个 value 被保留，取决于返回数据的顺序。", "\n注意\n该函数暂不支持窗口函数，即 OVER 子句。\n"], "Examples": ["obclient> SELECT oid, JSON_OBJECTAGG(attr, value) AS attributes FROM tbl1 GROUP BY oid;\n+------+---------------------------------------+\n| oid  | attributes                            |\n+------+---------------------------------------+\n|    2 | {\"color\": \"red\", \"fabric\": \"silk\"}    |\n|    3 | {\"color\": \"green\", \"shape\": \"square\"} |\n+------+---------------------------------------+\n2 rows in set\n\nobclient> CREATE TABLE tbl2(c VARCHAR(10), i INT);\nQuery OK, 0 rows affected\n\nobclient>  INSERT INTO tbl2 VALUES ('key', 3), ('key', 4), ('key', 5);\nQuery OK, 3 rows affected\nRecords: 3  Duplicates: 0  Warnings: 0\n\nobclient> SELECT c, i FROM tbl2;\n+------+------+\n| c    | i    |\n+------+------+\n| key  |    3 |\n| key  |    4 |\n| key  |    5 |\n+------+------+\n3 rows in set\n\nobclient> SELECT JSON_OBJECTAGG(c, i) FROM tbl2;\n+----------------------+\n| JSON_OBJECTAGG(c, i) |\n+----------------------+\n| {\"key\": 5}           |\n+----------------------+\n1 row in set\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823311"], "Title": ["JSON_OVERLAPS"], "Feature": ["JSON_OVERLAPS(json_doc1, json_doc2)\n"], "Description": ["该函数用于比较两个 JSON 文档。如果两个文档具有共同的键值对（key-value）或数组元素，则返回 1，否则返回 0。", "参数 json_doc1 和 json_doc2 分别指定两个用于比较的 JSON 文档。如果两个参数都是标量，则函数执行简单的相等性测试。", "该函数与 JSON_CONTAINS() 对应，它要求搜索的数组的所有元素都存在于被搜索的数组中。因此，JSON_CONTAINS() 对搜索键执行 AND 运算，而 JSON_OVERLAPS() 执行 OR 运算。", "在比较两个数组时，如果它们共享一个或多个数组元素，则 JSON_OVERLAPS() 返回 1，否则返回 0。", "在 WHERE 子句中使用 JSON_OVERLAPS() 对 InnoDB 表的 JSON 列的查询，可以使用多值索引进行优化。"], "Examples": ["obclient> SELECT JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,3,5]\");\n+---------------------------------------+\n| JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,3,5]\") |\n+---------------------------------------+\n|                                     1 |\n+---------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,4,6]\");\n+---------------------------------------+\n| JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,4,6]\") |\n+---------------------------------------+\n|                                     0 |\n+---------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_OVERLAPS('[[1,2],[3,4],5]', '[1,[2,3],[4,5]]');\n+-----------------------------------------------------+\n| JSON_OVERLAPS('[[1,2],[3,4],5]', '[1,[2,3],[4,5]]') |\n+-----------------------------------------------------+\n|                                                   0 |\n+-----------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_OVERLAPS('2', '2');\n+-------------------------+\n| JSON_OVERLAPS('2', '2') |\n+-------------------------+\n|                       1 |\n+-------------------------+\n1 row in set\n\nobclient> SELECT JSON_OVERLAPS('[4,5,6,7]', '5');\n+---------------------------------+\n| JSON_OVERLAPS('[4,5,6,7]', '5') |\n+---------------------------------+\n|                               1 |\n+---------------------------------+\n1 row in set\n\n/* 该函数不执行数据类型转换*/\nobclient> SELECT JSON_OVERLAPS('[4,\"5\",6,7]', '5');\n+-----------------------------------+\n| JSON_OVERLAPS('[4,\"5\",6,7]', '5') |\n+-----------------------------------+\n|                                 0 |\n+-----------------------------------+\n1 row in set\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823305"], "Title": ["JSON_PRETTY"], "Feature": ["JSON_PRETTY(json_val)\n"], "Description": ["该函数对 JSON 值按照格式打印。类似于 PHP 等。", "参数 json_val 必须是 JSON 值或 JSON 值的有效字符串表示形式。此值中存在的无关空格和换行符对输出没有影响。如果该值不是 JSON 文档，或者无法进行解析，则该函数将执行失败并显示错误。", "对于 NULL 值，该函数返回 NULL。", "此函数的输出格式遵循以下规则：", "每个数组元素或对象成员出现在单独的行上，与其父元素相比缩进一个级别。", "每一级缩进都会添加两个前导空格。", "分隔单个数组元素或对象成员的逗号，打印在分隔两个元素或成员的换行符之前。", "对象成员的键和值由冒号后加空格 (': ') 分隔。", "空对象或数组打印在一行上。左括号和右括号之间不打印空格。", "字符串标量和键名中的特殊字符使用与 JSON_QUOTE() 函数相同的转义规则。"], "Examples": ["obclient> SELECT JSON_PRETTY('1234');\n+--------------------+\n| JSON_PRETTY('1234') |\n+--------------------+\n| 1234                |\n+--------------------+\n1 row in set\n\nobclient> SELECT JSON_PRETTY(\"[1,3,5,7]\");\n+--------------------------+\n| JSON_PRETTY(\"[1,3,5,7]\") |\n+--------------------------+\n| [\n  1,\n  3,\n  5,\n  7\n]   |\n+--------------------------+\n1 row in set\n\nobclient> SELECT JSON_PRETTY('{\"a\":\"10\",\"b\":\"20\",\"c\":\"30\"}');\n+---------------------------------------------+\n| JSON_PRETTY('{\"a\":\"10\",\"b\":\"20\",\"c\":\"30\"}') |\n+---------------------------------------------+\n| {\n  \"a\": \"10\",\n  \"b\": \"20\",\n  \"c\": \"30\"\n}   |\n+---------------------------------------------+\n1 row in set\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823314"], "Title": ["JSON_QUOTE"], "Feature": ["JSON_QUOTE(string)\n"], "Description": ["通过用双引号字符包裹字符串并转义内部引号和其他字符，将字符串引用为 JSON 值，然后将结果作为 utf8mb4 字符串返回。", "此函数通常用于生成有效的 JSON 字符串文字以包含在 JSON 文档中，便于进行处理。", "string 表示要引用的字符串。如果参数为 NULL，则返回 NULL。"], "Examples": ["obclient> SELECT JSON_QUOTE('null'), JSON_QUOTE('\"null\"');\n+--------------------+----------------------+\n| JSON_QUOTE('null') | JSON_QUOTE('\"null\"') |\n+--------------------+----------------------+\n| \"null\"             | \"\\\"null\\\"\"           |\n+--------------------+----------------------+\n1 row in set\n\nobclient> SELECT JSON_QUOTE('[1, 2, 3, 4, 5]');\n+-------------------------------+\n| JSON_QUOTE('[1, 2, 3, 4, 5]') |\n+-------------------------------+\n| \"[1, 2, 3, 4, 5]\"             |\n+-------------------------------+\n1 row in set\n\nobclient> SELECT JSON_QUOTE('{\"name\":sam, \"scores\":[100,200,300]}');\n+----------------------------------------------------+\n| JSON_QUOTE('{\"name\":sam, \"scores\":[100,200,300]}') |\n+----------------------------------------------------+\n| \"{\\\"name\\\":sam, \\\"scores\\\":[100,200,300]}\"         |\n+----------------------------------------------------+\n1 row in set\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823292"], "Title": ["JSON_REMOVE"], "Feature": ["JSON_REMOVE(json_doc, path[, path] ...)\n"], "Description": ["该函数用于从 JSON 文档中删除数据并返回结果。", "json_doc 参数用于指定 JSON 文档，path 为路径参数。如果任何参数为 NULL，则返回 NULL。", "以下情况都会发生报错：", "json_doc 参数不是有效的 JSON 文档。", "path 参数不是有效的路径表达式。", "path 参数是 $。", "path 参数包含 * 或 ** 通配符。", "path 参数按照从左到右进行计算，即通过评估一条路径产生的文档作为评估下一条路径的新值。", "如果要移除的元素在文档中不存在，则不会产生错误。在这种情况下，路径不会影响文档。"], "Examples": ["obclient> SET @jn = '[\"a\", [\"b\", \"c\"], \"d\"]';\nQuery OK, 0 rows affected\n\nobclient> SELECT JSON_REMOVE(@jn, '$[1]');\n+--------------------------+\n| JSON_REMOVE(@jn, '$[1]') |\n+--------------------------+\n| [\"a\", \"d\"]               |\n+--------------------------+\n1 row in set\n\nobclient> SELECT JSON_REMOVE(@jn, '$[7]');\n+--------------------------+\n| JSON_REMOVE(@jn, '$[7]') |\n+--------------------------+\n| [\"a\", [\"b\", \"c\"], \"d\"]   |\n+--------------------------+\n1 row in set\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823298"], "Title": ["JSON_REPLACE"], "Feature": ["JSON_REPLACE(json_doc, path, val[, path, val] ...)\n"], "Description": ["该函数用于替换 JSON 文档中的现有值并返回结果。", "json_doc 参数用于指定 JSON 文档，path 为路径参数。如果任何参数为 NULL，则返回 NULL。", "以下情况都会发生报错：", "json_doc 参数不是有效的 JSON 文档。", "path 参数不是有效的路径表达式。", "path 参数包含 * 或 ** 通配符。", "路径值对 path-value 按照从左到右的顺序进行评估。通过 path-value 对所生成的文档作为评估下一对的新值。", "文档中现有路径的 path-value 对会用新值覆盖现有文档值。文档中不存在路径的 path-value 将被忽略且无效。"], "Examples": ["obclient> SET @jn = '{ \"a\": 1, \"b\": [2, 3, 4]}';\nQuery OK, 0 rows affected\n\nobclient> SELECT JSON_REPLACE(@jn, '$.a', 10, '$.c', '[true, false]');\n+------------------------------------------------------+\n| JSON_REPLACE(@jn, '$.a', 10, '$.c', '[true, false]') |\n+------------------------------------------------------+\n| {\"a\": 10, \"b\": [2, 3, 4]}                            |\n+------------------------------------------------------+\n1 row in set\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823301"], "Title": ["JSON_SCHEMA_VALID"], "Feature": ["JSON_SCHEMA_VALID(schema, document)\n"], "Description": ["该函数用于验证 JSON 文档。如果 JSON 文档符合 JSON Schema 规范，则返回 1。如果不符合 JSON Schema 规范，则返回 0。可用于列约束。", "参数 schema 用于指定 JSON Schema，且 Schema 必须是有效的 JSON 对象。", "\nJSON Schema 中支持使用 required 属性来强制必须包含的属性。\nJSON Schema 中支持 id、 $schema、description 和 type 属性，但不要求必须提供这些属性。\n", "JSON Schema 中支持使用 required 属性来强制必须包含的属性。", "JSON Schema 中支持 id、 $schema、description 和 type 属性，但不要求必须提供这些属性。", "参数 document 用于指定待验证的 JSON 文档，该 JSON 文档必须是有效的 JSON 文档。", "如果其中有一个参数不是有效的 JSON，该函数就会引发错误。"], "Examples": ["obclient [infotest]> SELECT JSON_SCHEMA_VALID('{\"type\": \"string\"}', '\"JSON_doc\"');\n", "+-------------------------------------------------------+\n| JSON_SCHEMA_VALID('{\"type\": \"string\"}', '\"JSON_doc\"') |\n+-------------------------------------------------------+\n|                                                     1 |\n+-------------------------------------------------------+\n1 row in set\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823300"], "Title": ["JSON_SCHEMA_VALIDATION_REPORT"], "Feature": ["JSON_SCHEMA_VALIDATION_REPORT(schema, document)\n"], "Description": ["该函数用于返回一个详细的验证报告。", "参数 schema 用于指定 JSON Schema，且 Schema 必须是有效的 JSON 对象。", "\nJSON Schema 中支持使用 required 属性来强制必须包含的属性。\nJSON Schema 中支持 id、 $schema、description 和 type 属性，但不要求必须提供这些属性。\n", "JSON Schema 中支持使用 required 属性来强制必须包含的属性。", "JSON Schema 中支持 id、 $schema、description 和 type 属性，但不要求必须提供这些属性。", "参数 document 用于指定待验证的 JSON 文档，该 JSON 文档必须是有效的 JSON 文档。", "如果其中有一个参数不是有效的 JSON，该函数就会引发错误。", "不同于 JSON_SCHEMA_VALID() 函数，JSON_SCHEMA_VALIDATION_REPORT() 函数用于返回一个详细的验证报告，且该报告是一个 JSON 对象。如果 JSON 文档符合 JSON Schema 规范，则该函数将返回一个 valid 属性值为 true 的 JSON 对象；如果 JSON 文档不符合 JSON Schema 规范，则该函数将返回一个非空的 JSON 对象，其中包含了验证失败的详细信息。", "验证失败的信息中主要包含以下属性信息：", "valid：验证失败时，该值始终为 false。", "reason：显示验证失败的原因。", "schema-location：指示 JSON Schema 中验证失败的位置。", "document-location：指示 JSON 文档中验证失败的位置。", "schema-failed-keyword：显示 JSON Schema 中违反规范的关键字或属性名称。"], "Examples": ["obclient [infotest]> SELECT JSON_SCHEMA_VALIDATION_REPORT('{\"type\": \"string\"}', '\"JSON_doc\"');\n", "+-------------------------------------------------------------------+\n| JSON_SCHEMA_VALIDATION_REPORT('{\"type\": \"string\"}', '\"JSON_doc\"') |\n+-------------------------------------------------------------------+\n| {\"valid\": true}                                                   |\n+-------------------------------------------------------------------+\n1 row in set\n", "obclient [infotest]> SET @schema = '{\"type\": \"object\", \"properties\": {\"age\": {\"type\": \"integer\", \"minimum\": 18}}, \"required\": [\"age\"]}';\n", "obclient [infotest]> SET @document = '{\"age\": 17}';\n", "obclient [infotest]> SELECT JSON_SCHEMA_VALIDATION_REPORT(@schema, @document);\n", "+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| JSON_SCHEMA_VALIDATION_REPORT(@schema, @document)                                                                                                                                                                                                |\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| {\"valid\": false, \"reason\": \"The JSON document location '#/age' failed requirement 'minimum' at JSON Schema location '#/properties/age\", \"schema-location\": \"#/properties/age\", \"document-location\": \"#/age\", \"schema-failed-keyword\": \"minimum\"} |\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n1 row in set\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823306"], "Title": ["JSON_SEARCH"], "Feature": ["JSON_SEARCH(json_doc, one_or_all, search_str[, escape_char[, path] ...])\n"], "Description": ["该函数返回 JSON 文档中指定字符串的路径。", "参数 json_doc 用于指定 JSON 文档，search_str 为搜索字符串参数，escape_char 参数指定常量表达式，path 为路径参数。", "如果任何参数为 NULL，则返回 NULL；如果文档中不存在路径或未找到指定字符串，也会返回 NULL。", "对于 one_or_all 参数，可选值如下：", "'one'：在第一次匹配后搜索终止并返回一个路径字符串。", "'all'：搜索返回所有匹配的路径字符串，不会包含重复的路径。如果有多个字符串，它们会自动包裹为一个数组。数组元素的顺序不保证是有序的。", "对于 search_str 参数，% 和 _ 字符与 LIKE 运算符的作用相同，含义如下：", "% 表示匹配任意数量的字符（包括零个字符）。", "_ 表示正好匹配一个字符。", "如果要在搜索字符串中指定 % 或 _字符，请在其前面加上转义字符。如果缺少 escape_char 参数或者为NULL，则转义字符默认值为 \\。否则，escape_char 必须是一个空的常量或字符。", "无论数据库的编码值为多少，search_str 和 path 总是作为 utf8mb4 字符串使用。", "以下情况会发生报错：", "json_doc 参数指定的不是有效的 JSON 文档。", "path 参数不是有效的路径表达式。", "one_or_all 参数不为 'one' 或者 'all'。", "escape_char 不是常量表达式。"], "Examples": ["obclient> SET @jn = '[\"abcd\", [{\"k\": \"10\"}, \"efg\"], {\"x\":\"abcd\"}, {\"y\":\"cdef\"}]';\nQuery OK, 0 rows affected\n\nobclient> SELECT JSON_SEARCH(@jn, 'one', 'abcd');\n+---------------------------------+\n| JSON_SEARCH(@jn, 'one', 'abcd') |\n+---------------------------------+\n| \"$[0]\"                          |\n+---------------------------------+\n1 row in set\n\nobclient> SELECT JSON_SEARCH(@jn, 'all', 'abcd');\n+---------------------------------+\n| JSON_SEARCH(@jn, 'all', 'abcd') |\n+---------------------------------+\n| [\"$[0]\", \"$[2].x\"]              |\n+---------------------------------+\n1 row in set\n\nobclient> SELECT JSON_SEARCH(@jn, 'all', 'ghk');\n+--------------------------------+\n| JSON_SEARCH(@jn, 'all', 'ghk') |\n+--------------------------------+\n| NULL                           |\n+--------------------------------+\n1 row in set\n\nobclient> SELECT JSON_SEARCH(@jn, 'all', '10');\n+-------------------------------+\n| JSON_SEARCH(@jn, 'all', '10') |\n+-------------------------------+\n| \"$[1][0].k\"                   |\n+-------------------------------+\n1 row in set\n\nobclient> SELECT JSON_SEARCH(@jn, 'all', '10', NULL, '$');\n+------------------------------------------+\n| JSON_SEARCH(@jn, 'all', '10', NULL, '$') |\n+------------------------------------------+\n| \"$[1][0].k\"                              |\n+------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_SEARCH(@jn, 'all', '10', NULL, '$[*]');\n+---------------------------------------------+\n| JSON_SEARCH(@jn, 'all', '10', NULL, '$[*]') |\n+---------------------------------------------+\n| \"$[1][0].k\"                                 |\n+---------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_SEARCH(@jn, 'all', '10', NULL, '$[*][0].k');\n+--------------------------------------------------+\n| JSON_SEARCH(@jn, 'all', '10', NULL, '$[*][0].k') |\n+--------------------------------------------------+\n| \"$[1][0].k\"                                      |\n+--------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_SEARCH(@jn, 'all', '10', NULL, '$[1]');\n+---------------------------------------------+\n| JSON_SEARCH(@jn, 'all', '10', NULL, '$[1]') |\n+---------------------------------------------+\n| \"$[1][0].k\"                                 |\n+---------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_SEARCH(@jn, 'all', '10', NULL, '$[1][0]');\n+------------------------------------------------+\n| JSON_SEARCH(@jn, 'all', '10', NULL, '$[1][0]') |\n+------------------------------------------------+\n| \"$[1][0].k\"                                    |\n+------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_SEARCH(@jn, 'all', 'abc', NULL, '$[2]');\n+----------------------------------------------+\n| JSON_SEARCH(@jn, 'all', 'abc', NULL, '$[2]') |\n+----------------------------------------------+\n| NULL                                         |\n+----------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_SEARCH(@jn, 'all', '%a%');\n+--------------------------------+\n| JSON_SEARCH(@jn, 'all', '%a%') |\n+--------------------------------+\n| [\"$[0]\", \"$[2].x\"]             |\n+--------------------------------+\n1 row in set\n\nobclient> SELECT JSON_SEARCH(@jn, 'all', '%b%');\n+-------------------------------+\n| JSON_SEARCH(@jn, 'all', '%b%') |\n+-------------------------------+\n| [\"$[0]\", \"$[2].x\", \"$[3].y\"]  |\n+-------------------------------+\n1 row in set\n\nobclient> SELECT JSON_SEARCH(@jn, 'all', '%b%', NULL, '$[0]');\n+---------------------------------------------+\n| JSON_SEARCH(@jn, 'all', '%b%', NULL, '$[0]') |\n+---------------------------------------------+\n| \"$[0]\"                                      |\n+---------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_SEARCH(@jn, 'all', '%b%', NULL, '$[2]');\n+---------------------------------------------+\n| JSON_SEARCH(@jn, 'all', '%b%', NULL, '$[2]') |\n+---------------------------------------------+\n| \"$[2].x\"                                    |\n+---------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_SEARCH(@jn, 'all', '%b%', NULL, '$[1]');\n+---------------------------------------------+\n| JSON_SEARCH(@jn, 'all', '%b%', NULL, '$[1]') |\n+---------------------------------------------+\n| NULL                                        |\n+---------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_SEARCH(@jn, 'all', '%b%', '', '$[1]');\n+-------------------------------------------+\n| JSON_SEARCH(@jn, 'all', '%b%', '', '$[1]') |\n+-------------------------------------------+\n| NULL                                      |\n+-------------------------------------------+\n1 row in set\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823289"], "Title": ["JSON_SET"], "Feature": ["JSON_SET(json_doc, path, val[, path, val] ...)\n"], "Description": ["该函数用于在 JSON 文档中插入或更新数据并返回结果。", "json_doc 参数用于指定 JSON 文档，path 为路径参数。如果任何参数为 NULL 或 path（如果给定）未定位到对象，则返回 NULL。", "以下情况都会发生报错：", "json_doc 参数不是有效的 JSON 文档。", "path 参数不是有效的路径表达式。", "path 参数包含 * 或 ** 通配符。", "路径值对 path-value 按照从左到右的顺序进行评估。通过 path-value 对所生成的文档作为评估下一对的新值。", "文档中现有路径的 path-value 对会用新值覆盖现有文档值。如果路径标识的对象不存在，则文档中不存在路径的路径值对会按照如下规则添加到文档中：", "现有对象中不存在的成员。该成员被添加到对象并与新值相关联。", "超出现有数组末尾的位置。此时使用新值扩展数组。如果现有值不是数组，则将其自动包裹为数组，然后使用新值进行扩展。", "否则，文档中不存在的路径的路径值对将被忽略且无效。"], "Examples": ["obclient> SET @jn = '{ \"a\": 1, \"b\": [2, 3]}';\nQuery OK, 0 rows affected\n\nobclient> SELECT JSON_SET(@jn, '$.a', 10, '$.c', '[true, false]');\n+--------------------------------------------------+\n| JSON_SET(@jn, '$.a', 10, '$.c', '[true, false]') |\n+--------------------------------------------------+\n| {\"a\": 10, \"b\": [2, 3], \"c\": \"[true, false]\"}     |\n+--------------------------------------------------+\n1 row in set\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823304"], "Title": ["JSON_STORAGE_SIZE"], "Feature": ["JSON_STORAGE_SIZE(json_val)\n"], "Description": ["此函数返回用于存储 JSON 文档的二进制字节数。当参数是一个 JSON 列时，会用于存储 JSON 文档。JSON 的部分更新不会改变该函数的返回值。", "json_val 参数必须是有效的 JSON 文档或可以解析为一个字符串。在 json_val 是字符串的情况下，该函数将字符串解析为 JSON 并将其转换为二进制后返回存储空间的二进制字节数。", "当 json_val 不为 NULL 并且不是或无法成功解析为 JSON 文档时，会报错。", "如果参数为 NULL，则返回 NULL。"], "Examples": ["obclient> CREATE TABLE jtbl (jcol JSON);\nQuery OK, 0 rows affected\n\nobclient> INSERT INTO jtbl VALUES  ('{\"a\": 1000, \"b\": \"wxyz\", \"c\": \"[1, 3, 5, 7]\"}');\nQuery OK, 1 row affected\n\nobclient> SELECT jcol,JSON_STORAGE_SIZE(jcol) AS Size FROM jtbl;\n+-----------------------------------------------+------+\n| jcol                                          | Size |\n+-----------------------------------------------+------+\n| {\"a\": 1000, \"b\": \"wxyz\", \"c\": \"[1, 3, 5, 7]\"} |   41 |\n+-----------------------------------------------+------+\n1 row in set\n\nobclient> SET @jn = '[100, \"sakila\", [1, 3, 5], 425.05]';\nQuery OK, 0 rows affected\n\nobclient> SELECT @jn, JSON_STORAGE_SIZE(@jn) AS Size;\n+------------------------------------+------+\n| @jn                                | Size |\n+------------------------------------+------+\n| [100, \"sakila\", [1, 3, 5], 425.05] |   38 |\n+------------------------------------+------+\n1 row in set\n\nobclient> SET @jn = JSON_SET(@jn, '$[1]', \"json\");\nQuery OK, 0 rows affected\n\nobclient> SELECT @jn, JSON_STORAGE_SIZE(@jn) AS Size;\n+----------------------------------+------+\n| @jn                              | Size |\n+----------------------------------+------+\n| [100, \"json\", [1, 3, 5], 425.05] |   36 |\n+----------------------------------+------+\n1 row in set\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823288"], "Title": ["JSON_TYPE"], "Feature": ["JSON_TYPE(json_val)\n"], "Description": ["该函数返回代表 JSON 值类型的 utf8mb4 字符串。", "参数 json_val 可以是对象、数组或标量类型。", "如果参数为 NULL，则返回 NULL。如果参数不是有效的 JSON 值，则会报错。"], "Examples": ["obclient> SET @jn = '{\"a\": [10, true]}';\nQuery OK, 0 rows affected\n\nobclient> SELECT JSON_TYPE(JSON_EXTRACT(@jn, '$.a'));\n+-------------------------------------+\n| JSON_TYPE(JSON_EXTRACT(@jn, '$.a')) |\n+-------------------------------------+\n| ARRAY                               |\n+-------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_TYPE(JSON_EXTRACT(@jn, '$.a[0]'));\n+----------------------------------------+\n| JSON_TYPE(JSON_EXTRACT(@jn, '$.a[0]')) |\n+----------------------------------------+\n| INTEGER                                |\n+----------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_TYPE(JSON_EXTRACT(@jn, '$.a[1]'));\n+----------------------------------------+\n| JSON_TYPE(JSON_EXTRACT(@jn, '$.a[1]')) |\n+----------------------------------------+\n| BOOLEAN                                |\n+----------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_TYPE(NULL);\n+-----------------+\n| JSON_TYPE(NULL) |\n+-----------------+\n| NULL            |\n+-----------------+\n1 row in set\n\nobclient> SELECT JSON_TYPE(1);\nERROR 3146 (22032): Invalid data type for JSON data in argument 1\nto function json_type; a JSON string or JSON type is required.\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823290"], "Title": ["JSON_UNQUOTE"], "Feature": ["JSON_UNQUOTE(json_val)\n"], "Description": ["该函数用于取消引用 JSON 值并将结果作为 utf8mb4 字符串返回。", "参数 json_val 为引用的 JSON 值。如果参数为 NULL，则返回 NULL。", "如果值以双引号开头和结尾，但不是有效的 JSON 字符串字面量，则会发生错误。"], "Examples": ["obclient> SET @jn = '\"abcd\"';\nQuery OK, 0 rows affected\n\nobclient> SELECT @jn, JSON_UNQUOTE(@jn);\n+--------+-------------------+\n| @jn    | JSON_UNQUOTE(@jn) |\n+--------+-------------------+\n| \"abcd\" | abcd              |\n+--------+-------------------+\n1 row in set\n\nobclient> SET @jn = '[1, 2, 3, 4]';\nQuery OK, 0 rows affected\n\nobclient> SELECT @jn, JSON_UNQUOTE(@jn);\n+--------------+-------------------+\n| @jn          | JSON_UNQUOTE(@jn) |\n+--------------+-------------------+\n| [1, 2, 3, 4] | [1, 2, 3, 4]      |\n+--------------+-------------------+\n1 row in set\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823287"], "Title": ["JSON_VALID"], "Feature": ["JSON_VALID(val)\n"], "Description": ["该函数用于判断输入值是否为有效的 JSON，如果是有效的 JSON 返回 1，否则返回 0。", "参数 val 为输入值。如果参数为 NULL，则返回 NULL。"], "Examples": ["obclient> SELECT JSON_VALID('{\"a\": 1}');\n+------------------------+\n| JSON_VALID('{\"a\": 1}') |\n+------------------------+\n|                      1 |\n+------------------------+\n1 row in set\n\nobclient> SELECT JSON_VALID('oceanbase'), JSON_VALID('\"oceanbase\"');\n+-------------------------+---------------------------+\n| JSON_VALID('oceanbase') | JSON_VALID('\"oceanbase\"') |\n+-------------------------+---------------------------+\n|                       0 |                         1 |\n+-------------------------+---------------------------+\n1 row in set\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823313"], "Title": ["JSON_VALUE"], "Feature": ["JSON_VALUE(json_doc, path [RETURNING type] [on_empty] [on_error])\n\non_empty:\n    {NULL | ERROR | DEFAULT value} ON EMPTY\n\non_error:\n    {NULL | ERROR | DEFAULT value} ON ERROR\n"], "Description": ["该函数从指定路径中提取 JSON 文档中的值，并返回提取的值，还可以选择将其转换为所需数据类型。", "参数解释", "相关参数解释如下：", "json_doc 参数指定有效的 JSON 文档。", "path 参数是指向文档中某个位置的 JSON 路径，必须是字符串。", "type 参数是支持如下数据类型：", "\nFLOAT\nDOUBLE\nDECIMAL\nSIGNED\nUNSIGNED\nDATE\nTIME\nDATETIME\nYEAR (不支持 YEAR(1) 和 YEAR(2))\nCHAR\nJSON\n", "FLOAT", "DOUBLE", "DECIMAL", "SIGNED", "UNSIGNED", "DATE", "TIME", "DATETIME", "YEAR (不支持 YEAR(1) 和 YEAR(2))", "CHAR", "JSON", "如果没有使用 RETURNING 子句，则该函数的返回类型为 VARCHAR(512)。 当没有为返回类型指定字符集时，JSON_VALUE() 使用 utf8mb4 和二进制排序规则，并区分大小写； 如果将 utf8mb4 指定为结果的字符集，则服务器使用此字符集的默认排序规则，不用区分大小写。", "当在指定路径中未找到数据时，on_empty 子句用于指定 JSON_VALUE() 的行为。该子句取值如下：", "\nNULL ON EMPTY：JSON_VALUE() 返回 NULL。这是 ON EMPTY 的默认行为。\nDEFAULT value ON EMPTY'：返回所提供的 value 值，该值的类型必须与返回类型相匹配。\nERROR ON EMPTY：函数抛出错误。\n", "NULL ON EMPTY：JSON_VALUE() 返回 NULL。这是 ON EMPTY 的默认行为。", "DEFAULT value ON EMPTY'：返回所提供的 value 值，该值的类型必须与返回类型相匹配。", "ERROR ON EMPTY：函数抛出错误。", "当发生错误时，on_error 取值如下：", "\nNULL ON ERROR：JSON_VALUE() 返回 NULL；如果未使用 ON ERROR 子句，则这是默认行为。\nDEFAULT value ON ERROR：返回所提供的 value 值，该值的类型必须与返回类型的值相匹配。\nERROR ON ERROR：抛出错误。\n", "\n注意\nON EMPTY 的位置（如果使用）必须在所有 ON ERROR 子句之前，错误的顺序会导致语法错误。\n", "NULL ON ERROR：JSON_VALUE() 返回 NULL；如果未使用 ON ERROR 子句，则这是默认行为。", "DEFAULT value ON ERROR：返回所提供的 value 值，该值的类型必须与返回类型的值相匹配。", "ERROR ON ERROR：抛出错误。", "错误处理", "通常，JSON_VALUE() 会检查所有 JSON 输入（文档和路径）的有效性。如果其中任何一个为无效，则会抛出 SQL 错误，而不触发 ON ERROR 子句。", "如果发生以下某一事件，就会触发 ON ERROR：", "尝试提取对象或数组时，输入的路径在 JSON 文档中被解析为多个路径。", "转换错误。例如，尝试将 'asdf' 转换为 UNSIGNED 值。", "数据截断。", "即使指定了 NULL ON ERROR 或 DEFAULT ... ON ERROR，转换错误总是会触发告警。", "当源 JSON 文档 (json_doc) 在指定位置（path）不包含任何数据时，会触发 ON EMPTY 子句。"], "Examples": ["obclient> SELECT JSON_VALUE('{\"fname\": \"Smith\", \"lname\": \"Will\"}', '$.fname');\n+--------------------------------------------------------------+\n| JSON_VALUE('{\"fname\": \"Smith\", \"lname\": \"Will\"}', '$.fname') |\n+--------------------------------------------------------------+\n| Smith                                                        |\n+--------------------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_VALUE('{\"item\": \"shoes\", \"price\": \"69.73\"}', '$.price'\n     RETURNING DECIMAL(4,2)) AS price;\n+-------+\n| price |\n+-------+\n| 69.73 |\n+-------+\n1 row in set\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000823307"], "Title": ["MEMBER OF"], "Feature": ["value MEMBER OF(json_array)\n"], "Description": ["如果被检索的元素和 JSON 数组中的任意一个元素相同，则该函数返回 1，否则返回 0。", "如果 value 是 json_array 的元素，则返回 1，否则返回 0。", "value 必须是标量或 JSON 文档；如果它是标量，则运算符会将其视为 JSON 数组的元素。"], "Examples": ["obclient> SELECT 45 MEMBER OF('[123, \"abc\", 45, \"ab\", 10]');\n+--------------------------------------------+\n| 45 MEMBER OF('[123, \"abc\", 45, \"ab\", 10]') |\n+--------------------------------------------+\n|                                          1 |\n+--------------------------------------------+\n1 row in set\n\nobclient> SELECT 'cd' MEMBER OF('[23, \"abc\", 17, \"cd\", 10]');\n+---------------------------------------------+\n| 'cd' MEMBER OF('[23, \"abc\", 17, \"cd\", 10]') |\n+---------------------------------------------+\n|                                           1 |\n+---------------------------------------------+\n1 row in set\n\nobclient> SELECT 5 MEMBER OF('[123, \"abc\", 45, \"ab\", 10]');\n+-------------------------------------------+\n| 5 MEMBER OF('[123, \"abc\", 45, \"ab\", 10]') |\n+-------------------------------------------+\n|                                         0 |\n+-------------------------------------------+\n1 row in set\n\nobclient> SELECT\n       45 MEMBER OF('[23, \"abc\", \"45\", \"ab\", 10]'),\n      \"45\" MEMBER OF('[23, \"abc\", 45, \"ab\", 10]')\\G\n*************************** 1. row ***************************\n45 MEMBER OF('[23, \"abc\", \"45\", \"ab\", 10]'): 0\n\"45\" MEMBER OF('[23, \"abc\", 45, \"ab\", 10]'): 0\n1 row in set\n\nobclient> SELECT CAST('[4,5]' AS JSON) MEMBER OF('[[3,2],[4,5]]');\n+--------------------------------------------------+\n| CAST('[4,5]' AS JSON) MEMBER OF('[[3,2],[4,5]]') |\n+--------------------------------------------------+\n|                                                1 |\n+--------------------------------------------------+\n1 row in set\n\nobclient> SELECT JSON_ARRAY(4,5) MEMBER OF('[[3,2],[4,5]]');\n+--------------------------------------------+\n| JSON_ARRAY(4,5) MEMBER OF('[[3,2],[4,5]]') |\n+--------------------------------------------+\n|                                          1 |\n+--------------------------------------------+\n1 row in set\n"], "Category": ["JSON Functions"]}
{"HTML": ["https://www.oceanbase.com/docs/enterprise-oceanbase-database-cn-1000000000822934"], "Title": ["`JSON_TABLE` 函数"], "Feature": ["JSON_TABLE(expr, path_literal COLUMNS (column_list)) [AS] alias\n\ncolumn_list:\n    column[, column...]\n\ncolumn:\n    column_name FOR ORDINALITY\n    | column_name data_type PATH path_literal [json_value_on_empty_clause] [json_value_on_error_clause]\n    | column_name data_type EXISTS PATH path_literal\n    | NESTED [PATH] path_literal COLUMNS (column_list)\n\njson_value_on_empty_clause:\n    {NULL | DEFAULT json_string | ERROR} ON EMPTY\n\njson_value_on_error_clause:\n    {NULL | DEFAULT json_string | ERROR} ON ERROR\n"], "Description": ["JSON_TABLE() 函数子级路径（path），可以从嵌套的 JSON 数据中提取所需信息。", "JSON_TABLE() 函数用于将 JSON 数据从半结构化数据转为结构化数据，即从 JSON 文档中提取数据并返回具有指定列的关系表。通过将 JSON 数据的各个部分映射到一个虚拟表的行和列，它创建了一个清晰的表结构，这不仅便于执行查询操作，还允许用户将这些数据插入到新的表或视图中以进行进一步处理。", "JSON_TABLE() 为每一个 JSON 值提供了列输出，对于 JSON 内的数组，也提供了多行（列）输出。", "JSON_TABLE() 必须用在 SELECT 语句的 FROM 子句中。", "JSON_TABLE() 函数语法说明如下：", "expr: 指定转换为 JSON 数据的输入表达式，如果表达式不可以转成 JSON 数据则会报错。", "path_literal：指定 Path 路径的字符串，输入其他类型数据或者非正确的 Path 路径信息则会报错。", "column_list：指定所输入的列定义信息，在表达式中至少包含一个列定义参数，否则会报错。", "column：指定具体的列定义信息，具体可以分为如下四类：", "\ncolumn_name FOR ORDINALITYFOR 子句用于为当前输出行提供行号，其中 column_name 是 INT 类型的列。\ncolumn_name data_type PATH path_literal [json_value_on_empty_clause] [json_value_on_error_clause] 子句用于提取 path_literal 指定的数据为 JSON 并强制转换为列类型。如果缺失值会触发可选的 json_value_on_empty_clause 子句。\ncolumn_name data_type EXISTS PATH path_literal 子句：如果 path_literal 指定的位置存在任何数据，则此列返回 1，否则返回 0。\nNESTED [PATH] path_literal COLUMNS (column_list) 子句表示重复的嵌套结构，可以在其中继续定义 column 的四种列类型。\n", "column_name FOR ORDINALITYFOR 子句用于为当前输出行提供行号，其中 column_name 是 INT 类型的列。", "column_name data_type PATH path_literal [json_value_on_empty_clause] [json_value_on_error_clause] 子句用于提取 path_literal 指定的数据为 JSON 并强制转换为列类型。如果缺失值会触发可选的 json_value_on_empty_clause 子句。", "column_name data_type EXISTS PATH path_literal 子句：如果 path_literal 指定的位置存在任何数据，则此列返回 1，否则返回 0。", "NESTED [PATH] path_literal COLUMNS (column_list) 子句表示重复的嵌套结构，可以在其中继续定义 column 的四种列类型。", "data_type：指定数据类型，当前支持 OceanBase 数据库 MySQL 模式下除 ENUM 和 SET 之外的所有数据类型。", "alias：指定表别名。", "json_value_on_empty_clause：如果经过 Path 筛选的数据是空值时用户可选的预期行为，可选行为包含三种：NULL、ERROR 和默认值 DEFAULT。", "\nNULL ON EMPTY：将该列设置为 NULL，为默认行为。\nDEFAULT json_string：将 json_string 解析为默认值取代 JSON 对象或者数组。OceanBase 数据库允许行为默认值为任意类型的常量数据。\nERROR ON EMPTY：抛出错误。\n", "NULL ON EMPTY", "：将该列设置为 ", "NULL", "，为默认行为。", "DEFAULT json_string", "：将 ", "json_string", " 解析为默认值取代 JSON 对象或者数组。OceanBase 数据库允许行为默认值为任意类型的常量数据。", "ERROR ON EMPTY", "：抛出错误。", "json_value_on_error_clause：如果表达式执行期间发生错误，用户可以使用预期的行为去覆盖该错误，可选择的行为包含三种：NULL、ERROR 和默认值 DEFAULT。可选行为和 json_value_on_empty_clause 一致。", "以下场景会触发可选的 json_value_on_error_clause 子句。", "\nexpr 不是格式正确的 JSON 数据\n使用 JSON 路径表达式计算 JSON 数据时发现非标量值\n使用 JSON 路径表达式计算 JSON 数据时未找到匹配项。\n所指定的返回值数据类型不够大，无法容纳返回值。\n", "expr 不是格式正确的 JSON 数据", "使用 JSON 路径表达式计算 JSON 数据时发现非标量值", "使用 JSON 路径表达式计算 JSON 数据时未找到匹配项。", "所指定的返回值数据类型不够大，无法容纳返回值。"], "Examples": [], "Category": ["JSON Functions"]}
