{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/arithmetic-functions"], "Title": ["plus"], "Feature": ["plus(a, b)"], "Description": ["plus", "Calculates the sum of two values a and b.", "Syntax", "plus(a, b)", "It is possible to add an integer and a date or date with time. The former operation increments the number of days in the date, the latter operation increments the number of seconds in the date with time.", "Alias: a + b (operator)"], "Examples": ["plus(a, b)"], "Category": ["Arithmetic Functions"], "index": 0, "vector_txt": "0:Feature: plus(a, b)\nDescription: plusCalculates the sum of two values a and b.Syntaxplus(a, b)It is possible to add an integer and a date or date with time. The former operation increments the number of days in the date, the latter operation increments the number of seconds in the date with time.Alias: a + b (operator)\nExamples: plus(a, b)\nCategory: Arithmetic Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDateTime64OrZero"], "Feature": ["toDateTime64OrZero(expr, scale, [timezone])"], "Description": ["toDateTime64OrZero", "Like toDateTime64, this function converts an input value to a value of type DateTime64 but returns the min value of DateTime64 if an invalid argument is received.", "Syntax", "toDateTime64OrZero(expr, scale, [timezone])", "Arguments", "expr \u2014 The value. String, UInt32, Float or DateTime.scale - Tick size (precision): 10-precision seconds. Valid range: [ 0 : 9 ].timezone (optional) - Time zone of the specified DateTime64 object.", "Returned value", "A calendar date and time of day, with sub-second precision, otherwise the minimum value of DateTime64: 1970-01-01 01:00:00.000. DateTime64."], "Examples": ["SELECT toDateTime64OrZero('2008-10-12 00:00:00 00:30:30', 3) AS invalid_arg"], "Category": ["Type Conversion Functions"], "index": 1, "vector_txt": "1:Feature: toDateTime64OrZero(expr, scale, [timezone])\nDescription: toDateTime64OrZeroLike toDateTime64, this function converts an input value to a value of type DateTime64 but returns the min value of DateTime64 if an invalid argument is received.SyntaxtoDateTime64OrZero(expr, scale, [timezone])Argumentsexpr \u2014 The value. String, UInt32, Float or DateTime.scale - Tick size (precision): 10-precision seconds. Valid range: [ 0 : 9 ].timezone (optional) - Time zone of the specified DateTime64 object.Returned valueA calendar date and time of day, with sub-second precision, otherwise the minimum value of DateTime64: 1970-01-01 01:00:00.000. DateTime64.\nExamples: SELECT toDateTime64OrZero('2008-10-12 00:00:00 00:30:30', 3) AS invalid_arg\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDateTime64OrNull"], "Feature": ["toDateTime64OrNull(expr, scale, [timezone])"], "Description": ["toDateTime64OrNull", "Like toDateTime64, this function converts an input value to a value of type DateTime64 but returns NULL if an invalid argument is received.", "Syntax", "toDateTime64OrNull(expr, scale, [timezone])", "Arguments", "expr \u2014 The value. String, UInt32, Float or DateTime.scale - Tick size (precision): 10-precision seconds. Valid range: [ 0 : 9 ].timezone (optional) - Time zone of the specified DateTime64 object.", "Returned value", "A calendar date and time of day, with sub-second precision, otherwise NULL. DateTime64/NULL."], "Examples": ["SELECT    toDateTime64OrNull('1976-10-18 00:00:00.30', 3) AS valid_arg,    toDateTime64OrNull('1976-10-18 00:00:00 30', 3) AS invalid_arg"], "Category": ["Type Conversion Functions"], "index": 2, "vector_txt": "2:Feature: toDateTime64OrNull(expr, scale, [timezone])\nDescription: toDateTime64OrNullLike toDateTime64, this function converts an input value to a value of type DateTime64 but returns NULL if an invalid argument is received.SyntaxtoDateTime64OrNull(expr, scale, [timezone])Argumentsexpr \u2014 The value. String, UInt32, Float or DateTime.scale - Tick size (precision): 10-precision seconds. Valid range: [ 0 : 9 ].timezone (optional) - Time zone of the specified DateTime64 object.Returned valueA calendar date and time of day, with sub-second precision, otherwise NULL. DateTime64/NULL.\nExamples: SELECT    toDateTime64OrNull('1976-10-18 00:00:00.30', 3) AS valid_arg,    toDateTime64OrNull('1976-10-18 00:00:00 30', 3) AS invalid_arg\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDateTime64OrDefault"], "Feature": ["toDateTime64OrNull(expr, scale, [timezone, default])"], "Description": ["toDateTime64OrDefault", "Like toDateTime64, this function converts an input value to a value of type DateTime64,\nbut returns either the default value of DateTime64\nor the provided default if an invalid argument is received.", "Syntax", "toDateTime64OrNull(expr, scale, [timezone, default])", "Arguments", "expr \u2014 The value. String, UInt32, Float or DateTime.scale - Tick size (precision): 10-precision seconds. Valid range: [ 0 : 9 ].timezone (optional) - Time zone of the specified DateTime64 object.default (optional) - Default value to return if an invalid argument is received. DateTime64.", "Returned value", "A calendar date and time of day, with sub-second precision, otherwise the minimum value of DateTime64 or the default value if provided. DateTime64."], "Examples": ["SELECT    toDateTime64OrDefault('1976-10-18 00:00:00 30', 3) AS invalid_arg,    toDateTime64OrDefault('1976-10-18 00:00:00 30', 3, 'UTC', toDateTime64('2001-01-01 00:00:00.00',3)) AS invalid_arg_with_default"], "Category": ["Type Conversion Functions"], "index": 3, "vector_txt": "3:Feature: toDateTime64OrNull(expr, scale, [timezone, default])\nDescription: toDateTime64OrDefaultLike toDateTime64, this function converts an input value to a value of type DateTime64,\nbut returns either the default value of DateTime64\nor the provided default if an invalid argument is received.SyntaxtoDateTime64OrNull(expr, scale, [timezone, default])Argumentsexpr \u2014 The value. String, UInt32, Float or DateTime.scale - Tick size (precision): 10-precision seconds. Valid range: [ 0 : 9 ].timezone (optional) - Time zone of the specified DateTime64 object.default (optional) - Default value to return if an invalid argument is received. DateTime64.Returned valueA calendar date and time of day, with sub-second precision, otherwise the minimum value of DateTime64 or the default value if provided. DateTime64.\nExamples: SELECT    toDateTime64OrDefault('1976-10-18 00:00:00 30', 3) AS invalid_arg,    toDateTime64OrDefault('1976-10-18 00:00:00 30', 3, 'UTC', toDateTime64('2001-01-01 00:00:00.00',3)) AS invalid_arg_with_default\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDecimal32"], "Feature": ["toDecimal32(expr, S)"], "Description": ["toDecimal32", "Converts an input value to a value of type Decimal(9, S) with scale of S. Throws an exception in case of an error.", "Syntax", "toDecimal32(expr, S)", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression.S \u2014 Scale parameter between 0 and 9, specifying how many digits the fractional part of a number can have. UInt8.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values or string representations of type Float32/64.", "Unsupported arguments:", "Values or string representations of Float32/64 values NaN and Inf (case-insensitive).String representations of binary and hexadecimal values, e.g. SELECT toDecimal32('0xc0fe', 1);.", "NoteAn overflow can occur if the value of expr exceeds the bounds of Decimal32: ( -1 * 10^(9 - S), 1 * 10^(9 - S) ).\nExcessive digits in a fraction are discarded (not rounded).\nExcessive digits in the integer part will lead to an exception.", "DangerConversions drop extra digits and could operate in an unexpected way when working with Float32/Float64 inputs as the operations are performed using floating point instructions.\nFor example: toDecimal32(1.15, 2) is equal to 1.14 because 1.15 * 100 in floating point is 114.99.\nYou can use a String input so the operations use the underlying integer type: toDecimal32('1.15', 2) = 1.15", "Returned value", "Value of type Decimal(9, S). Decimal32(S)."], "Examples": ["SELECT    toDecimal32(2, 1) AS a, toTypeName(a) AS type_a,    toDecimal32(4.2, 2) AS b, toTypeName(b) AS type_b,    toDecimal32('4.2', 3) AS c, toTypeName(c) AS type_cFORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 4, "vector_txt": "4:Feature: toDecimal32(expr, S)\nDescription: toDecimal32Converts an input value to a value of type Decimal(9, S) with scale of S. Throws an exception in case of an error.SyntaxtoDecimal32(expr, S)Argumentsexpr \u2014 Expression returning a number or a string representation of a number. Expression.S \u2014 Scale parameter between 0 and 9, specifying how many digits the fractional part of a number can have. UInt8.Supported arguments:Values or string representations of type (U)Int8/16/32/64/128/256.Values or string representations of type Float32/64.Unsupported arguments:Values or string representations of Float32/64 values NaN and Inf (case-insensitive).String representations of binary and hexadecimal values, e.g. SELECT toDecimal32('0xc0fe', 1);.NoteAn overflow can occur if the value of expr exceeds the bounds of Decimal32: ( -1 * 10^(9 - S), 1 * 10^(9 - S) ).\nExcessive digits in a fraction are discarded (not rounded).\nExcessive digits in the integer part will lead to an exception.DangerConversions drop extra digits and could operate in an unexpected way when working with Float32/Float64 inputs as the operations are performed using floating point instructions.\nFor example: toDecimal32(1.15, 2) is equal to 1.14 because 1.15 * 100 in floating point is 114.99.\nYou can use a String input so the operations use the underlying integer type: toDecimal32('1.15', 2) = 1.15Returned valueValue of type Decimal(9, S). Decimal32(S).\nExamples: SELECT    toDecimal32(2, 1) AS a, toTypeName(a) AS type_a,    toDecimal32(4.2, 2) AS b, toTypeName(b) AS type_b,    toDecimal32('4.2', 3) AS c, toTypeName(c) AS type_cFORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDecimal32OrZero"], "Feature": ["toDecimal32OrZero(expr, S)"], "Description": ["toDecimal32OrZero", "Like toDecimal32, this function converts an input value to a value of type Decimal(9, S) but returns 0 in case of an error.", "Syntax", "toDecimal32OrZero(expr, S)", "Arguments", "expr \u2014 A String representation of a number. String.S \u2014 Scale parameter between 0 and 9, specifying how many digits the fractional part of a number can have. UInt8.", "Supported arguments:", "String representations of type (U)Int8/16/32/64/128/256.String representations of type Float32/64.", "Unsupported arguments:", "String representations of Float32/64 values NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toDecimal32OrZero('0xc0fe', 1);.", "NoteAn overflow can occur if the value of expr exceeds the bounds of Decimal32: ( -1 * 10^(9 - S), 1 * 10^(9 - S) ).\nExcessive digits in a fraction are discarded (not rounded).\nExcessive digits in the integer part will lead to an error.", "Returned value", "Value of type Decimal(9, S) if successful, otherwise 0 with S decimal places. Decimal32(S)."], "Examples": ["SELECT    toDecimal32OrZero(toString(-1.111), 5) AS a,    toTypeName(a),    toDecimal32OrZero(toString('Inf'), 5) as b,    toTypeName(b)FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 5, "vector_txt": "5:Feature: toDecimal32OrZero(expr, S)\nDescription: toDecimal32OrZeroLike toDecimal32, this function converts an input value to a value of type Decimal(9, S) but returns 0 in case of an error.SyntaxtoDecimal32OrZero(expr, S)Argumentsexpr \u2014 A String representation of a number. String.S \u2014 Scale parameter between 0 and 9, specifying how many digits the fractional part of a number can have. UInt8.Supported arguments:String representations of type (U)Int8/16/32/64/128/256.String representations of type Float32/64.Unsupported arguments:String representations of Float32/64 values NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toDecimal32OrZero('0xc0fe', 1);.NoteAn overflow can occur if the value of expr exceeds the bounds of Decimal32: ( -1 * 10^(9 - S), 1 * 10^(9 - S) ).\nExcessive digits in a fraction are discarded (not rounded).\nExcessive digits in the integer part will lead to an error.Returned valueValue of type Decimal(9, S) if successful, otherwise 0 with S decimal places. Decimal32(S).\nExamples: SELECT    toDecimal32OrZero(toString(-1.111), 5) AS a,    toTypeName(a),    toDecimal32OrZero(toString('Inf'), 5) as b,    toTypeName(b)FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDecimal32OrNull"], "Feature": ["toDecimal32OrNull(expr, S)"], "Description": ["toDecimal32OrNull", "Like toDecimal32, this function converts an input value to a value of type Nullable(Decimal(9, S)) but returns 0 in case of an error.", "Syntax", "toDecimal32OrNull(expr, S)", "Arguments", "expr \u2014 A String representation of a number. String.S \u2014 Scale parameter between 0 and 9, specifying how many digits the fractional part of a number can have. UInt8.", "Supported arguments:", "String representations of type (U)Int8/16/32/64/128/256.String representations of type Float32/64.", "Unsupported arguments:", "String representations of Float32/64 values NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toDecimal32OrNull('0xc0fe', 1);.", "NoteAn overflow can occur if the value of expr exceeds the bounds of Decimal32: ( -1 * 10^(9 - S), 1 * 10^(9 - S) ).\nExcessive digits in a fraction are discarded (not rounded).\nExcessive digits in the integer part will lead to an error.", "Returned value", "Value of type Nullable(Decimal(9, S)) if successful, otherwise value NULL of the same type. Decimal32(S)."], "Examples": ["SELECT    toDecimal32OrNull(toString(-1.111), 5) AS a,    toTypeName(a),    toDecimal32OrNull(toString('Inf'), 5) as b,    toTypeName(b)FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 6, "vector_txt": "6:Feature: toDecimal32OrNull(expr, S)\nDescription: toDecimal32OrNullLike toDecimal32, this function converts an input value to a value of type Nullable(Decimal(9, S)) but returns 0 in case of an error.SyntaxtoDecimal32OrNull(expr, S)Argumentsexpr \u2014 A String representation of a number. String.S \u2014 Scale parameter between 0 and 9, specifying how many digits the fractional part of a number can have. UInt8.Supported arguments:String representations of type (U)Int8/16/32/64/128/256.String representations of type Float32/64.Unsupported arguments:String representations of Float32/64 values NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toDecimal32OrNull('0xc0fe', 1);.NoteAn overflow can occur if the value of expr exceeds the bounds of Decimal32: ( -1 * 10^(9 - S), 1 * 10^(9 - S) ).\nExcessive digits in a fraction are discarded (not rounded).\nExcessive digits in the integer part will lead to an error.Returned valueValue of type Nullable(Decimal(9, S)) if successful, otherwise value NULL of the same type. Decimal32(S).\nExamples: SELECT    toDecimal32OrNull(toString(-1.111), 5) AS a,    toTypeName(a),    toDecimal32OrNull(toString('Inf'), 5) as b,    toTypeName(b)FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDecimal32OrDefault"], "Feature": ["toDecimal32OrDefault(expr, S[, default])"], "Description": ["toDecimal32OrDefault", "Like toDecimal32, this function converts an input value to a value of type Decimal(9, S) but returns the default value in case of an error.", "Syntax", "toDecimal32OrDefault(expr, S[, default])", "Arguments", "expr \u2014 A String representation of a number. String.S \u2014 Scale parameter between 0 and 9, specifying how many digits the fractional part of a number can have. UInt8.default (optional) \u2014 The default value to return if parsing to type Decimal32(S) is unsuccessful. Decimal32(S).", "Supported arguments:", "String representations of type (U)Int8/16/32/64/128/256.String representations of type Float32/64.", "Unsupported arguments:", "String representations of Float32/64 values NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toDecimal32OrDefault('0xc0fe', 1);.", "NoteAn overflow can occur if the value of expr exceeds the bounds of Decimal32: ( -1 * 10^(9 - S), 1 * 10^(9 - S) ).\nExcessive digits in a fraction are discarded (not rounded).\nExcessive digits in the integer part will lead to an error.", "DangerConversions drop extra digits and could operate in an unexpected way when working with Float32/Float64 inputs as the operations are performed using floating point instructions.\nFor example: toDecimal32OrDefault(1.15, 2) is equal to 1.14 because 1.15 * 100 in floating point is 114.99.\nYou can use a String input so the operations use the underlying integer type: toDecimal32OrDefault('1.15', 2) = 1.15", "Returned value", "Value of type Decimal(9, S) if successful, otherwise returns the default value if passed or 0 if not. Decimal32(S)."], "Examples": ["SELECT    toDecimal32OrDefault(toString(0.0001), 5) AS a,    toTypeName(a),    toDecimal32OrDefault('Inf', 0, CAST('-1', 'Decimal32(0)')) AS b,    toTypeName(b)FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 7, "vector_txt": "7:Feature: toDecimal32OrDefault(expr, S[, default])\nDescription: toDecimal32OrDefaultLike toDecimal32, this function converts an input value to a value of type Decimal(9, S) but returns the default value in case of an error.SyntaxtoDecimal32OrDefault(expr, S[, default])Argumentsexpr \u2014 A String representation of a number. String.S \u2014 Scale parameter between 0 and 9, specifying how many digits the fractional part of a number can have. UInt8.default (optional) \u2014 The default value to return if parsing to type Decimal32(S) is unsuccessful. Decimal32(S).Supported arguments:String representations of type (U)Int8/16/32/64/128/256.String representations of type Float32/64.Unsupported arguments:String representations of Float32/64 values NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toDecimal32OrDefault('0xc0fe', 1);.NoteAn overflow can occur if the value of expr exceeds the bounds of Decimal32: ( -1 * 10^(9 - S), 1 * 10^(9 - S) ).\nExcessive digits in a fraction are discarded (not rounded).\nExcessive digits in the integer part will lead to an error.DangerConversions drop extra digits and could operate in an unexpected way when working with Float32/Float64 inputs as the operations are performed using floating point instructions.\nFor example: toDecimal32OrDefault(1.15, 2) is equal to 1.14 because 1.15 * 100 in floating point is 114.99.\nYou can use a String input so the operations use the underlying integer type: toDecimal32OrDefault('1.15', 2) = 1.15Returned valueValue of type Decimal(9, S) if successful, otherwise returns the default value if passed or 0 if not. Decimal32(S).\nExamples: SELECT    toDecimal32OrDefault(toString(0.0001), 5) AS a,    toTypeName(a),    toDecimal32OrDefault('Inf', 0, CAST('-1', 'Decimal32(0)')) AS b,    toTypeName(b)FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDecimal64"], "Feature": ["toDecimal64(expr, S)"], "Description": ["toDecimal64", "Converts an input value to a value of type Decimal(18, S) with scale of S. Throws an exception in case of an error.", "Syntax", "toDecimal64(expr, S)", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression.S \u2014 Scale parameter between 0 and 18, specifying how many digits the fractional part of a number can have. UInt8.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values or string representations of type Float32/64.", "Unsupported arguments:", "Values or string representations of Float32/64 values NaN and Inf (case-insensitive).String representations of binary and hexadecimal values, e.g. SELECT toDecimal64('0xc0fe', 1);.", "NoteAn overflow can occur if the value of expr exceeds the bounds of Decimal64: ( -1 * 10^(18 - S), 1 * 10^(18 - S) ).\nExcessive digits in a fraction are discarded (not rounded).\nExcessive digits in the integer part will lead to an exception.", "DangerConversions drop extra digits and could operate in an unexpected way when working with Float32/Float64 inputs as the operations are performed using floating point instructions.\nFor example: toDecimal64(1.15, 2) is equal to 1.14 because 1.15 * 100 in floating point is 114.99.\nYou can use a String input so the operations use the underlying integer type: toDecimal64('1.15', 2) = 1.15", "Returned value", "Value of type Decimal(18, S). Decimal64(S)."], "Examples": ["SELECT    toDecimal64(2, 1) AS a, toTypeName(a) AS type_a,    toDecimal64(4.2, 2) AS b, toTypeName(b) AS type_b,    toDecimal64('4.2', 3) AS c, toTypeName(c) AS type_cFORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 8, "vector_txt": "8:Feature: toDecimal64(expr, S)\nDescription: toDecimal64Converts an input value to a value of type Decimal(18, S) with scale of S. Throws an exception in case of an error.SyntaxtoDecimal64(expr, S)Argumentsexpr \u2014 Expression returning a number or a string representation of a number. Expression.S \u2014 Scale parameter between 0 and 18, specifying how many digits the fractional part of a number can have. UInt8.Supported arguments:Values or string representations of type (U)Int8/16/32/64/128/256.Values or string representations of type Float32/64.Unsupported arguments:Values or string representations of Float32/64 values NaN and Inf (case-insensitive).String representations of binary and hexadecimal values, e.g. SELECT toDecimal64('0xc0fe', 1);.NoteAn overflow can occur if the value of expr exceeds the bounds of Decimal64: ( -1 * 10^(18 - S), 1 * 10^(18 - S) ).\nExcessive digits in a fraction are discarded (not rounded).\nExcessive digits in the integer part will lead to an exception.DangerConversions drop extra digits and could operate in an unexpected way when working with Float32/Float64 inputs as the operations are performed using floating point instructions.\nFor example: toDecimal64(1.15, 2) is equal to 1.14 because 1.15 * 100 in floating point is 114.99.\nYou can use a String input so the operations use the underlying integer type: toDecimal64('1.15', 2) = 1.15Returned valueValue of type Decimal(18, S). Decimal64(S).\nExamples: SELECT    toDecimal64(2, 1) AS a, toTypeName(a) AS type_a,    toDecimal64(4.2, 2) AS b, toTypeName(b) AS type_b,    toDecimal64('4.2', 3) AS c, toTypeName(c) AS type_cFORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDecimal64OrZero"], "Feature": ["toDecimal64OrZero(expr, S)"], "Description": ["toDecimal64OrZero", "Like toDecimal64, this function converts an input value to a value of type Decimal(18, S) but returns 0 in case of an error.", "Syntax", "toDecimal64OrZero(expr, S)", "Arguments", "expr \u2014 A String representation of a number. String.S \u2014 Scale parameter between 0 and 18, specifying how many digits the fractional part of a number can have. UInt8.", "Supported arguments:", "String representations of type (U)Int8/16/32/64/128/256.String representations of type Float32/64.", "Unsupported arguments:", "String representations of Float32/64 values NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toDecimal64OrZero('0xc0fe', 1);.", "NoteAn overflow can occur if the value of expr exceeds the bounds of Decimal64: ( -1 * 10^(18 - S), 1 * 10^(18 - S) ).\nExcessive digits in a fraction are discarded (not rounded).\nExcessive digits in the integer part will lead to an error.", "Returned value", "Value of type Decimal(18, S) if successful, otherwise 0 with S decimal places. Decimal64(S)."], "Examples": ["SELECT    toDecimal64OrZero(toString(0.0001), 18) AS a,    toTypeName(a),    toDecimal64OrZero(toString('Inf'), 18) as b,    toTypeName(b)FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 9, "vector_txt": "9:Feature: toDecimal64OrZero(expr, S)\nDescription: toDecimal64OrZeroLike toDecimal64, this function converts an input value to a value of type Decimal(18, S) but returns 0 in case of an error.SyntaxtoDecimal64OrZero(expr, S)Argumentsexpr \u2014 A String representation of a number. String.S \u2014 Scale parameter between 0 and 18, specifying how many digits the fractional part of a number can have. UInt8.Supported arguments:String representations of type (U)Int8/16/32/64/128/256.String representations of type Float32/64.Unsupported arguments:String representations of Float32/64 values NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toDecimal64OrZero('0xc0fe', 1);.NoteAn overflow can occur if the value of expr exceeds the bounds of Decimal64: ( -1 * 10^(18 - S), 1 * 10^(18 - S) ).\nExcessive digits in a fraction are discarded (not rounded).\nExcessive digits in the integer part will lead to an error.Returned valueValue of type Decimal(18, S) if successful, otherwise 0 with S decimal places. Decimal64(S).\nExamples: SELECT    toDecimal64OrZero(toString(0.0001), 18) AS a,    toTypeName(a),    toDecimal64OrZero(toString('Inf'), 18) as b,    toTypeName(b)FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDecimal64OrNull"], "Feature": ["toDecimal64OrNull(expr, S)"], "Description": ["toDecimal64OrNull", "Like toDecimal64, this function converts an input value to a value of type Nullable(Decimal(18, S)) but returns 0 in case of an error.", "Syntax", "toDecimal64OrNull(expr, S)", "Arguments", "expr \u2014 A String representation of a number. String.S \u2014 Scale parameter between 0 and 18, specifying how many digits the fractional part of a number can have. UInt8.", "Supported arguments:", "String representations of type (U)Int8/16/32/64/128/256.String representations of type Float32/64.", "Unsupported arguments:", "String representations of Float32/64 values NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toDecimal64OrNull('0xc0fe', 1);.", "NoteAn overflow can occur if the value of expr exceeds the bounds of Decimal64: ( -1 * 10^(18 - S), 1 * 10^(18 - S) ).\nExcessive digits in a fraction are discarded (not rounded).\nExcessive digits in the integer part will lead to an error.", "Returned value", "Value of type Nullable(Decimal(18, S)) if successful, otherwise value NULL of the same type. Decimal64(S)."], "Examples": ["SELECT    toDecimal64OrNull(toString(0.0001), 18) AS a,    toTypeName(a),    toDecimal64OrNull(toString('Inf'), 18) as b,    toTypeName(b)FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 10, "vector_txt": "10:Feature: toDecimal64OrNull(expr, S)\nDescription: toDecimal64OrNullLike toDecimal64, this function converts an input value to a value of type Nullable(Decimal(18, S)) but returns 0 in case of an error.SyntaxtoDecimal64OrNull(expr, S)Argumentsexpr \u2014 A String representation of a number. String.S \u2014 Scale parameter between 0 and 18, specifying how many digits the fractional part of a number can have. UInt8.Supported arguments:String representations of type (U)Int8/16/32/64/128/256.String representations of type Float32/64.Unsupported arguments:String representations of Float32/64 values NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toDecimal64OrNull('0xc0fe', 1);.NoteAn overflow can occur if the value of expr exceeds the bounds of Decimal64: ( -1 * 10^(18 - S), 1 * 10^(18 - S) ).\nExcessive digits in a fraction are discarded (not rounded).\nExcessive digits in the integer part will lead to an error.Returned valueValue of type Nullable(Decimal(18, S)) if successful, otherwise value NULL of the same type. Decimal64(S).\nExamples: SELECT    toDecimal64OrNull(toString(0.0001), 18) AS a,    toTypeName(a),    toDecimal64OrNull(toString('Inf'), 18) as b,    toTypeName(b)FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayFirstIndex(func, arr1, ...)"], "Feature": ["arrayFirstIndex(func, arr1, ...)"], "Description": ["arrayFirstIndex(func, arr1, ...)", "Returns the index of the first element in the arr1 array for which func(arr1[i], ..., arrN[i]) returns something other than 0.", "Note that the arrayFirstIndex is a higher-order function. You must pass a lambda function to it as the first argument, and it can\u2019t be omitted."], "Examples": [], "Category": ["Arrays Functions"], "index": 11, "vector_txt": "11:Feature: arrayFirstIndex(func, arr1, ...)\nDescription: arrayFirstIndex(func, arr1, ...)Returns the index of the first element in the arr1 array for which func(arr1[i], ..., arrN[i]) returns something other than 0.Note that the arrayFirstIndex is a higher-order function. You must pass a lambda function to it as the first argument, and it can\u2019t be omitted.\nExamples: \nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDecimal64OrDefault"], "Feature": ["toDecimal64OrDefault(expr, S[, default])"], "Description": ["toDecimal64OrDefault", "Like toDecimal64, this function converts an input value to a value of type Decimal(18, S) but returns the default value in case of an error.", "Syntax", "toDecimal64OrDefault(expr, S[, default])", "Arguments", "expr \u2014 A String representation of a number. String.S \u2014 Scale parameter between 0 and 18, specifying how many digits the fractional part of a number can have. UInt8.default (optional) \u2014 The default value to return if parsing to type Decimal64(S) is unsuccessful. Decimal64(S).", "Supported arguments:", "String representations of type (U)Int8/16/32/64/128/256.String representations of type Float32/64.", "Unsupported arguments:", "String representations of Float32/64 values NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toDecimal64OrDefault('0xc0fe', 1);.", "NoteAn overflow can occur if the value of expr exceeds the bounds of Decimal64: ( -1 * 10^(18 - S), 1 * 10^(18 - S) ).\nExcessive digits in a fraction are discarded (not rounded).\nExcessive digits in the integer part will lead to an error.", "DangerConversions drop extra digits and could operate in an unexpected way when working with Float32/Float64 inputs as the operations are performed using floating point instructions.\nFor example: toDecimal64OrDefault(1.15, 2) is equal to 1.14 because 1.15 * 100 in floating point is 114.99.\nYou can use a String input so the operations use the underlying integer type: toDecimal64OrDefault('1.15', 2) = 1.15", "Returned value", "Value of type Decimal(18, S) if successful, otherwise returns the default value if passed or 0 if not. Decimal64(S)."], "Examples": ["SELECT    toDecimal64OrDefault(toString(0.0001), 18) AS a,    toTypeName(a),    toDecimal64OrDefault('Inf', 0, CAST('-1', 'Decimal64(0)')) AS b,    toTypeName(b)FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 12, "vector_txt": "12:Feature: toDecimal64OrDefault(expr, S[, default])\nDescription: toDecimal64OrDefaultLike toDecimal64, this function converts an input value to a value of type Decimal(18, S) but returns the default value in case of an error.SyntaxtoDecimal64OrDefault(expr, S[, default])Argumentsexpr \u2014 A String representation of a number. String.S \u2014 Scale parameter between 0 and 18, specifying how many digits the fractional part of a number can have. UInt8.default (optional) \u2014 The default value to return if parsing to type Decimal64(S) is unsuccessful. Decimal64(S).Supported arguments:String representations of type (U)Int8/16/32/64/128/256.String representations of type Float32/64.Unsupported arguments:String representations of Float32/64 values NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toDecimal64OrDefault('0xc0fe', 1);.NoteAn overflow can occur if the value of expr exceeds the bounds of Decimal64: ( -1 * 10^(18 - S), 1 * 10^(18 - S) ).\nExcessive digits in a fraction are discarded (not rounded).\nExcessive digits in the integer part will lead to an error.DangerConversions drop extra digits and could operate in an unexpected way when working with Float32/Float64 inputs as the operations are performed using floating point instructions.\nFor example: toDecimal64OrDefault(1.15, 2) is equal to 1.14 because 1.15 * 100 in floating point is 114.99.\nYou can use a String input so the operations use the underlying integer type: toDecimal64OrDefault('1.15', 2) = 1.15Returned valueValue of type Decimal(18, S) if successful, otherwise returns the default value if passed or 0 if not. Decimal64(S).\nExamples: SELECT    toDecimal64OrDefault(toString(0.0001), 18) AS a,    toTypeName(a),    toDecimal64OrDefault('Inf', 0, CAST('-1', 'Decimal64(0)')) AS b,    toTypeName(b)FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDecimal128"], "Feature": ["toDecimal128(expr, S)"], "Description": ["toDecimal128", "Converts an input value to a value of type Decimal(38, S) with scale of S. Throws an exception in case of an error.", "Syntax", "toDecimal128(expr, S)", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression.S \u2014 Scale parameter between 0 and 38, specifying how many digits the fractional part of a number can have. UInt8.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values or string representations of type Float32/64.", "Unsupported arguments:", "Values or string representations of Float32/64 values NaN and Inf (case-insensitive).String representations of binary and hexadecimal values, e.g. SELECT toDecimal128('0xc0fe', 1);.", "NoteAn overflow can occur if the value of expr exceeds the bounds of Decimal128: ( -1 * 10^(38 - S), 1 * 10^(38 - S) ).\nExcessive digits in a fraction are discarded (not rounded).\nExcessive digits in the integer part will lead to an exception.", "DangerConversions drop extra digits and could operate in an unexpected way when working with Float32/Float64 inputs as the operations are performed using floating point instructions.\nFor example: toDecimal128(1.15, 2) is equal to 1.14 because 1.15 * 100 in floating point is 114.99.\nYou can use a String input so the operations use the underlying integer type: toDecimal128('1.15', 2) = 1.15", "Returned value", "Value of type Decimal(38, S). Decimal128(S)."], "Examples": ["SELECT    toDecimal128(99, 1) AS a, toTypeName(a) AS type_a,    toDecimal128(99.67, 2) AS b, toTypeName(b) AS type_b,    toDecimal128('99.67', 3) AS c, toTypeName(c) AS type_cFORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 13, "vector_txt": "13:Feature: toDecimal128(expr, S)\nDescription: toDecimal128Converts an input value to a value of type Decimal(38, S) with scale of S. Throws an exception in case of an error.SyntaxtoDecimal128(expr, S)Argumentsexpr \u2014 Expression returning a number or a string representation of a number. Expression.S \u2014 Scale parameter between 0 and 38, specifying how many digits the fractional part of a number can have. UInt8.Supported arguments:Values or string representations of type (U)Int8/16/32/64/128/256.Values or string representations of type Float32/64.Unsupported arguments:Values or string representations of Float32/64 values NaN and Inf (case-insensitive).String representations of binary and hexadecimal values, e.g. SELECT toDecimal128('0xc0fe', 1);.NoteAn overflow can occur if the value of expr exceeds the bounds of Decimal128: ( -1 * 10^(38 - S), 1 * 10^(38 - S) ).\nExcessive digits in a fraction are discarded (not rounded).\nExcessive digits in the integer part will lead to an exception.DangerConversions drop extra digits and could operate in an unexpected way when working with Float32/Float64 inputs as the operations are performed using floating point instructions.\nFor example: toDecimal128(1.15, 2) is equal to 1.14 because 1.15 * 100 in floating point is 114.99.\nYou can use a String input so the operations use the underlying integer type: toDecimal128('1.15', 2) = 1.15Returned valueValue of type Decimal(38, S). Decimal128(S).\nExamples: SELECT    toDecimal128(99, 1) AS a, toTypeName(a) AS type_a,    toDecimal128(99.67, 2) AS b, toTypeName(b) AS type_b,    toDecimal128('99.67', 3) AS c, toTypeName(c) AS type_cFORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDecimal128OrZero"], "Feature": ["toDecimal128OrZero(expr, S)"], "Description": ["toDecimal128OrZero", "Like toDecimal128, this function converts an input value to a value of type Decimal(38, S) but returns 0 in case of an error.", "Syntax", "toDecimal128OrZero(expr, S)", "Arguments", "expr \u2014 A String representation of a number. String.S \u2014 Scale parameter between 0 and 38, specifying how many digits the fractional part of a number can have. UInt8.", "Supported arguments:", "String representations of type (U)Int8/16/32/64/128/256.String representations of type Float32/64.", "Unsupported arguments:", "String representations of Float32/64 values NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toDecimal128OrZero('0xc0fe', 1);.", "NoteAn overflow can occur if the value of expr exceeds the bounds of Decimal128: ( -1 * 10^(38 - S), 1 * 10^(38 - S) ).\nExcessive digits in a fraction are discarded (not rounded).\nExcessive digits in the integer part will lead to an error.", "Returned value", "Value of type Decimal(38, S) if successful, otherwise 0 with S decimal places. Decimal128(S)."], "Examples": ["SELECT    toDecimal128OrZero(toString(0.0001), 38) AS a,    toTypeName(a),    toDecimal128OrZero(toString('Inf'), 38) as b,    toTypeName(b)FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 14, "vector_txt": "14:Feature: toDecimal128OrZero(expr, S)\nDescription: toDecimal128OrZeroLike toDecimal128, this function converts an input value to a value of type Decimal(38, S) but returns 0 in case of an error.SyntaxtoDecimal128OrZero(expr, S)Argumentsexpr \u2014 A String representation of a number. String.S \u2014 Scale parameter between 0 and 38, specifying how many digits the fractional part of a number can have. UInt8.Supported arguments:String representations of type (U)Int8/16/32/64/128/256.String representations of type Float32/64.Unsupported arguments:String representations of Float32/64 values NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toDecimal128OrZero('0xc0fe', 1);.NoteAn overflow can occur if the value of expr exceeds the bounds of Decimal128: ( -1 * 10^(38 - S), 1 * 10^(38 - S) ).\nExcessive digits in a fraction are discarded (not rounded).\nExcessive digits in the integer part will lead to an error.Returned valueValue of type Decimal(38, S) if successful, otherwise 0 with S decimal places. Decimal128(S).\nExamples: SELECT    toDecimal128OrZero(toString(0.0001), 38) AS a,    toTypeName(a),    toDecimal128OrZero(toString('Inf'), 38) as b,    toTypeName(b)FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDecimal128OrNull"], "Feature": ["toDecimal128OrNull(expr, S)"], "Description": ["toDecimal128OrNull", "Like toDecimal128, this function converts an input value to a value of type Nullable(Decimal(38, S)) but returns 0 in case of an error.", "Syntax", "toDecimal128OrNull(expr, S)", "Arguments", "expr \u2014 A String representation of a number. String.S \u2014 Scale parameter between 0 and 38, specifying how many digits the fractional part of a number can have. UInt8.", "Supported arguments:", "String representations of type (U)Int8/16/32/64/128/256.String representations of type Float32/64.", "Unsupported arguments:", "String representations of Float32/64 values NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toDecimal128OrNull('0xc0fe', 1);.", "NoteAn overflow can occur if the value of expr exceeds the bounds of Decimal128: ( -1 * 10^(38 - S), 1 * 10^(38 - S) ).\nExcessive digits in a fraction are discarded (not rounded).\nExcessive digits in the integer part will lead to an error.", "Returned value", "Value of type Nullable(Decimal(38, S)) if successful, otherwise value NULL of the same type. Decimal128(S)."], "Examples": ["SELECT    toDecimal128OrNull(toString(1/42), 38) AS a,    toTypeName(a),    toDecimal128OrNull(toString('Inf'), 38) as b,    toTypeName(b)FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 15, "vector_txt": "15:Feature: toDecimal128OrNull(expr, S)\nDescription: toDecimal128OrNullLike toDecimal128, this function converts an input value to a value of type Nullable(Decimal(38, S)) but returns 0 in case of an error.SyntaxtoDecimal128OrNull(expr, S)Argumentsexpr \u2014 A String representation of a number. String.S \u2014 Scale parameter between 0 and 38, specifying how many digits the fractional part of a number can have. UInt8.Supported arguments:String representations of type (U)Int8/16/32/64/128/256.String representations of type Float32/64.Unsupported arguments:String representations of Float32/64 values NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toDecimal128OrNull('0xc0fe', 1);.NoteAn overflow can occur if the value of expr exceeds the bounds of Decimal128: ( -1 * 10^(38 - S), 1 * 10^(38 - S) ).\nExcessive digits in a fraction are discarded (not rounded).\nExcessive digits in the integer part will lead to an error.Returned valueValue of type Nullable(Decimal(38, S)) if successful, otherwise value NULL of the same type. Decimal128(S).\nExamples: SELECT    toDecimal128OrNull(toString(1/42), 38) AS a,    toTypeName(a),    toDecimal128OrNull(toString('Inf'), 38) as b,    toTypeName(b)FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDecimal128OrDefault"], "Feature": ["toDecimal128OrDefault(expr, S[, default])"], "Description": ["toDecimal128OrDefault", "Like toDecimal128, this function converts an input value to a value of type Decimal(38, S) but returns the default value in case of an error.", "Syntax", "toDecimal128OrDefault(expr, S[, default])", "Arguments", "expr \u2014 A String representation of a number. String.S \u2014 Scale parameter between 0 and 38, specifying how many digits the fractional part of a number can have. UInt8.default (optional) \u2014 The default value to return if parsing to type Decimal128(S) is unsuccessful. Decimal128(S).", "Supported arguments:", "String representations of type (U)Int8/16/32/64/128/256.String representations of type Float32/64.", "Unsupported arguments:", "String representations of Float32/64 values NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toDecimal128OrDefault('0xc0fe', 1);.", "NoteAn overflow can occur if the value of expr exceeds the bounds of Decimal128: ( -1 * 10^(38 - S), 1 * 10^(38 - S) ).\nExcessive digits in a fraction are discarded (not rounded).\nExcessive digits in the integer part will lead to an error.", "DangerConversions drop extra digits and could operate in an unexpected way when working with Float32/Float64 inputs as the operations are performed using floating point instructions.\nFor example: toDecimal128OrDefault(1.15, 2) is equal to 1.14 because 1.15 * 100 in floating point is 114.99.\nYou can use a String input so the operations use the underlying integer type: toDecimal128OrDefault('1.15', 2) = 1.15", "Returned value", "Value of type Decimal(38, S) if successful, otherwise returns the default value if passed or 0 if not. Decimal128(S)."], "Examples": ["SELECT    toDecimal128OrDefault(toString(1/42), 18) AS a,    toTypeName(a),    toDecimal128OrDefault('Inf', 0, CAST('-1', 'Decimal128(0)')) AS b,    toTypeName(b)FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 16, "vector_txt": "16:Feature: toDecimal128OrDefault(expr, S[, default])\nDescription: toDecimal128OrDefaultLike toDecimal128, this function converts an input value to a value of type Decimal(38, S) but returns the default value in case of an error.SyntaxtoDecimal128OrDefault(expr, S[, default])Argumentsexpr \u2014 A String representation of a number. String.S \u2014 Scale parameter between 0 and 38, specifying how many digits the fractional part of a number can have. UInt8.default (optional) \u2014 The default value to return if parsing to type Decimal128(S) is unsuccessful. Decimal128(S).Supported arguments:String representations of type (U)Int8/16/32/64/128/256.String representations of type Float32/64.Unsupported arguments:String representations of Float32/64 values NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toDecimal128OrDefault('0xc0fe', 1);.NoteAn overflow can occur if the value of expr exceeds the bounds of Decimal128: ( -1 * 10^(38 - S), 1 * 10^(38 - S) ).\nExcessive digits in a fraction are discarded (not rounded).\nExcessive digits in the integer part will lead to an error.DangerConversions drop extra digits and could operate in an unexpected way when working with Float32/Float64 inputs as the operations are performed using floating point instructions.\nFor example: toDecimal128OrDefault(1.15, 2) is equal to 1.14 because 1.15 * 100 in floating point is 114.99.\nYou can use a String input so the operations use the underlying integer type: toDecimal128OrDefault('1.15', 2) = 1.15Returned valueValue of type Decimal(38, S) if successful, otherwise returns the default value if passed or 0 if not. Decimal128(S).\nExamples: SELECT    toDecimal128OrDefault(toString(1/42), 18) AS a,    toTypeName(a),    toDecimal128OrDefault('Inf', 0, CAST('-1', 'Decimal128(0)')) AS b,    toTypeName(b)FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDecimal256"], "Feature": ["toDecimal256(expr, S)"], "Description": ["toDecimal256", "Converts an input value to a value of type Decimal(76, S) with scale of S. Throws an exception in case of an error.", "Syntax", "toDecimal256(expr, S)", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression.S \u2014 Scale parameter between 0 and 76, specifying how many digits the fractional part of a number can have. UInt8.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values or string representations of type Float32/64.", "Unsupported arguments:", "Values or string representations of Float32/64 values NaN and Inf (case-insensitive).String representations of binary and hexadecimal values, e.g. SELECT toDecimal256('0xc0fe', 1);.", "NoteAn overflow can occur if the value of expr exceeds the bounds of Decimal256: ( -1 * 10^(76 - S), 1 * 10^(76 - S) ).\nExcessive digits in a fraction are discarded (not rounded).\nExcessive digits in the integer part will lead to an exception.", "DangerConversions drop extra digits and could operate in an unexpected way when working with Float32/Float64 inputs as the operations are performed using floating point instructions.\nFor example: toDecimal256(1.15, 2) is equal to 1.14 because 1.15 * 100 in floating point is 114.99.\nYou can use a String input so the operations use the underlying integer type: toDecimal256('1.15', 2) = 1.15", "Returned value", "Value of type Decimal(76, S). Decimal256(S)."], "Examples": ["SELECT    toDecimal256(99, 1) AS a, toTypeName(a) AS type_a,    toDecimal256(99.67, 2) AS b, toTypeName(b) AS type_b,    toDecimal256('99.67', 3) AS c, toTypeName(c) AS type_cFORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 17, "vector_txt": "17:Feature: toDecimal256(expr, S)\nDescription: toDecimal256Converts an input value to a value of type Decimal(76, S) with scale of S. Throws an exception in case of an error.SyntaxtoDecimal256(expr, S)Argumentsexpr \u2014 Expression returning a number or a string representation of a number. Expression.S \u2014 Scale parameter between 0 and 76, specifying how many digits the fractional part of a number can have. UInt8.Supported arguments:Values or string representations of type (U)Int8/16/32/64/128/256.Values or string representations of type Float32/64.Unsupported arguments:Values or string representations of Float32/64 values NaN and Inf (case-insensitive).String representations of binary and hexadecimal values, e.g. SELECT toDecimal256('0xc0fe', 1);.NoteAn overflow can occur if the value of expr exceeds the bounds of Decimal256: ( -1 * 10^(76 - S), 1 * 10^(76 - S) ).\nExcessive digits in a fraction are discarded (not rounded).\nExcessive digits in the integer part will lead to an exception.DangerConversions drop extra digits and could operate in an unexpected way when working with Float32/Float64 inputs as the operations are performed using floating point instructions.\nFor example: toDecimal256(1.15, 2) is equal to 1.14 because 1.15 * 100 in floating point is 114.99.\nYou can use a String input so the operations use the underlying integer type: toDecimal256('1.15', 2) = 1.15Returned valueValue of type Decimal(76, S). Decimal256(S).\nExamples: SELECT    toDecimal256(99, 1) AS a, toTypeName(a) AS type_a,    toDecimal256(99.67, 2) AS b, toTypeName(b) AS type_b,    toDecimal256('99.67', 3) AS c, toTypeName(c) AS type_cFORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDecimal256OrZero"], "Feature": ["toDecimal256OrZero(expr, S)"], "Description": ["toDecimal256OrZero", "Like toDecimal256, this function converts an input value to a value of type Decimal(76, S) but returns 0 in case of an error.", "Syntax", "toDecimal256OrZero(expr, S)", "Arguments", "expr \u2014 A String representation of a number. String.S \u2014 Scale parameter between 0 and 76, specifying how many digits the fractional part of a number can have. UInt8.", "Supported arguments:", "String representations of type (U)Int8/16/32/64/128/256.String representations of type Float32/64.", "Unsupported arguments:", "String representations of Float32/64 values NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toDecimal256OrZero('0xc0fe', 1);.", "NoteAn overflow can occur if the value of expr exceeds the bounds of Decimal256: ( -1 * 10^(76 - S), 1 * 10^(76 - S) ).\nExcessive digits in a fraction are discarded (not rounded).\nExcessive digits in the integer part will lead to an error.", "Returned value", "Value of type Decimal(76, S) if successful, otherwise 0 with S decimal places. Decimal256(S)."], "Examples": ["SELECT    toDecimal256OrZero(toString(0.0001), 76) AS a,    toTypeName(a),    toDecimal256OrZero(toString('Inf'), 76) as b,    toTypeName(b)FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 18, "vector_txt": "18:Feature: toDecimal256OrZero(expr, S)\nDescription: toDecimal256OrZeroLike toDecimal256, this function converts an input value to a value of type Decimal(76, S) but returns 0 in case of an error.SyntaxtoDecimal256OrZero(expr, S)Argumentsexpr \u2014 A String representation of a number. String.S \u2014 Scale parameter between 0 and 76, specifying how many digits the fractional part of a number can have. UInt8.Supported arguments:String representations of type (U)Int8/16/32/64/128/256.String representations of type Float32/64.Unsupported arguments:String representations of Float32/64 values NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toDecimal256OrZero('0xc0fe', 1);.NoteAn overflow can occur if the value of expr exceeds the bounds of Decimal256: ( -1 * 10^(76 - S), 1 * 10^(76 - S) ).\nExcessive digits in a fraction are discarded (not rounded).\nExcessive digits in the integer part will lead to an error.Returned valueValue of type Decimal(76, S) if successful, otherwise 0 with S decimal places. Decimal256(S).\nExamples: SELECT    toDecimal256OrZero(toString(0.0001), 76) AS a,    toTypeName(a),    toDecimal256OrZero(toString('Inf'), 76) as b,    toTypeName(b)FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDecimal256OrNull"], "Feature": ["toDecimal256OrNull(expr, S)"], "Description": ["toDecimal256OrNull", "Like toDecimal256, this function converts an input value to a value of type Nullable(Decimal(76, S)) but returns 0 in case of an error.", "Syntax", "toDecimal256OrNull(expr, S)", "Arguments", "expr \u2014 A String representation of a number. String.S \u2014 Scale parameter between 0 and 76, specifying how many digits the fractional part of a number can have. UInt8.", "Supported arguments:", "String representations of type (U)Int8/16/32/64/128/256.String representations of type Float32/64.", "Unsupported arguments:", "String representations of Float32/64 values NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toDecimal256OrNull('0xc0fe', 1);.", "NoteAn overflow can occur if the value of expr exceeds the bounds of Decimal256: ( -1 * 10^(76 - S), 1 * 10^(76 - S) ).\nExcessive digits in a fraction are discarded (not rounded).\nExcessive digits in the integer part will lead to an error.", "Returned value", "Value of type Nullable(Decimal(76, S)) if successful, otherwise value NULL of the same type. Decimal256(S)."], "Examples": ["SELECT    toDecimal256OrNull(toString(1/42), 76) AS a,    toTypeName(a),    toDecimal256OrNull(toString('Inf'), 76) as b,    toTypeName(b)FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 19, "vector_txt": "19:Feature: toDecimal256OrNull(expr, S)\nDescription: toDecimal256OrNullLike toDecimal256, this function converts an input value to a value of type Nullable(Decimal(76, S)) but returns 0 in case of an error.SyntaxtoDecimal256OrNull(expr, S)Argumentsexpr \u2014 A String representation of a number. String.S \u2014 Scale parameter between 0 and 76, specifying how many digits the fractional part of a number can have. UInt8.Supported arguments:String representations of type (U)Int8/16/32/64/128/256.String representations of type Float32/64.Unsupported arguments:String representations of Float32/64 values NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toDecimal256OrNull('0xc0fe', 1);.NoteAn overflow can occur if the value of expr exceeds the bounds of Decimal256: ( -1 * 10^(76 - S), 1 * 10^(76 - S) ).\nExcessive digits in a fraction are discarded (not rounded).\nExcessive digits in the integer part will lead to an error.Returned valueValue of type Nullable(Decimal(76, S)) if successful, otherwise value NULL of the same type. Decimal256(S).\nExamples: SELECT    toDecimal256OrNull(toString(1/42), 76) AS a,    toTypeName(a),    toDecimal256OrNull(toString('Inf'), 76) as b,    toTypeName(b)FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDecimal256OrDefault"], "Feature": ["toDecimal256OrDefault(expr, S[, default])"], "Description": ["toDecimal256OrDefault", "Like toDecimal256, this function converts an input value to a value of type Decimal(76, S) but returns the default value in case of an error.", "Syntax", "toDecimal256OrDefault(expr, S[, default])", "Arguments", "expr \u2014 A String representation of a number. String.S \u2014 Scale parameter between 0 and 76, specifying how many digits the fractional part of a number can have. UInt8.default (optional) \u2014 The default value to return if parsing to type Decimal256(S) is unsuccessful. Decimal256(S).", "Supported arguments:", "String representations of type (U)Int8/16/32/64/128/256.String representations of type Float32/64.", "Unsupported arguments:", "String representations of Float32/64 values NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toDecimal256OrDefault('0xc0fe', 1);.", "NoteAn overflow can occur if the value of expr exceeds the bounds of Decimal256: ( -1 * 10^(76 - S), 1 * 10^(76 - S) ).\nExcessive digits in a fraction are discarded (not rounded).\nExcessive digits in the integer part will lead to an error.", "DangerConversions drop extra digits and could operate in an unexpected way when working with Float32/Float64 inputs as the operations are performed using floating point instructions.\nFor example: toDecimal256OrDefault(1.15, 2) is equal to 1.14 because 1.15 * 100 in floating point is 114.99.\nYou can use a String input so the operations use the underlying integer type: toDecimal256OrDefault('1.15', 2) = 1.15", "Returned value", "Value of type Decimal(76, S) if successful, otherwise returns the default value if passed or 0 if not. Decimal256(S)."], "Examples": ["SELECT    toDecimal256OrDefault(toString(1/42), 76) AS a,    toTypeName(a),    toDecimal256OrDefault('Inf', 0, CAST('-1', 'Decimal256(0)')) AS b,    toTypeName(b)FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 20, "vector_txt": "20:Feature: toDecimal256OrDefault(expr, S[, default])\nDescription: toDecimal256OrDefaultLike toDecimal256, this function converts an input value to a value of type Decimal(76, S) but returns the default value in case of an error.SyntaxtoDecimal256OrDefault(expr, S[, default])Argumentsexpr \u2014 A String representation of a number. String.S \u2014 Scale parameter between 0 and 76, specifying how many digits the fractional part of a number can have. UInt8.default (optional) \u2014 The default value to return if parsing to type Decimal256(S) is unsuccessful. Decimal256(S).Supported arguments:String representations of type (U)Int8/16/32/64/128/256.String representations of type Float32/64.Unsupported arguments:String representations of Float32/64 values NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toDecimal256OrDefault('0xc0fe', 1);.NoteAn overflow can occur if the value of expr exceeds the bounds of Decimal256: ( -1 * 10^(76 - S), 1 * 10^(76 - S) ).\nExcessive digits in a fraction are discarded (not rounded).\nExcessive digits in the integer part will lead to an error.DangerConversions drop extra digits and could operate in an unexpected way when working with Float32/Float64 inputs as the operations are performed using floating point instructions.\nFor example: toDecimal256OrDefault(1.15, 2) is equal to 1.14 because 1.15 * 100 in floating point is 114.99.\nYou can use a String input so the operations use the underlying integer type: toDecimal256OrDefault('1.15', 2) = 1.15Returned valueValue of type Decimal(76, S) if successful, otherwise returns the default value if passed or 0 if not. Decimal256(S).\nExamples: SELECT    toDecimal256OrDefault(toString(1/42), 76) AS a,    toTypeName(a),    toDecimal256OrDefault('Inf', 0, CAST('-1', 'Decimal256(0)')) AS b,    toTypeName(b)FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toString"], "Feature": ["toString"], "Description": ["toString", "Functions for converting between numbers, strings (but not fixed strings), dates, and dates with times.\nAll these functions accept one argument.", "When converting to or from a string, the value is formatted or parsed using the same rules as for the TabSeparated format (and almost all other text formats). If the string can\u2019t be parsed, an exception is thrown and the request is canceled.", "When converting dates to numbers or vice versa, the date corresponds to the number of days since the beginning of the Unix epoch.\nWhen converting dates with times to numbers or vice versa, the date with time corresponds to the number of seconds since the beginning of the Unix epoch.", "The date and date-with-time formats for the toDate/toDateTime functions are defined as follows:", "YYYY-MM-DDYYYY-MM-DD hh:mm:ss", "As an exception, if converting from UInt32, Int32, UInt64, or Int64 numeric types to Date, and if the number is greater than or equal to 65536, the number is interpreted as a Unix timestamp (and not as the number of days) and is rounded to the date. This allows support for the common occurrence of writing toDate(unix_timestamp), which otherwise would be an error and would require writing the more cumbersome toDate(toDateTime(unix_timestamp)).", "Conversion between a date and a date with time is performed the natural way: by adding a null time or dropping the time.", "Conversion between numeric types uses the same rules as assignments between different numeric types in C++.", "Additionally, the toString function of the DateTime argument can take a second String argument containing the name of the time zone. Example: Asia/Yekaterinburg In this case, the time is formatted according to the specified time zone."], "Examples": ["SELECT    now() AS ts,    time_zone,    toString(ts, time_zone) AS str_tz_datetimeFROM system.time_zonesWHERE time_zone LIKE 'Europe%'LIMIT 10"], "Category": ["Type Conversion Functions"], "index": 21, "vector_txt": "21:Feature: toString\nDescription: toStringFunctions for converting between numbers, strings (but not fixed strings), dates, and dates with times.\nAll these functions accept one argument.When converting to or from a string, the value is formatted or parsed using the same rules as for the TabSeparated format (and almost all other text formats). If the string can\u2019t be parsed, an exception is thrown and the request is canceled.When converting dates to numbers or vice versa, the date corresponds to the number of days since the beginning of the Unix epoch.\nWhen converting dates with times to numbers or vice versa, the date with time corresponds to the number of seconds since the beginning of the Unix epoch.The date and date-with-time formats for the toDate/toDateTime functions are defined as follows:YYYY-MM-DDYYYY-MM-DD hh:mm:ssAs an exception, if converting from UInt32, Int32, UInt64, or Int64 numeric types to Date, and if the number is greater than or equal to 65536, the number is interpreted as a Unix timestamp (and not as the number of days) and is rounded to the date. This allows support for the common occurrence of writing toDate(unix_timestamp), which otherwise would be an error and would require writing the more cumbersome toDate(toDateTime(unix_timestamp)).Conversion between a date and a date with time is performed the natural way: by adding a null time or dropping the time.Conversion between numeric types uses the same rules as assignments between different numeric types in C++.Additionally, the toString function of the DateTime argument can take a second String argument containing the name of the time zone. Example: Asia/Yekaterinburg In this case, the time is formatted according to the specified time zone.\nExamples: SELECT    now() AS ts,    time_zone,    toString(ts, time_zone) AS str_tz_datetimeFROM system.time_zonesWHERE time_zone LIKE 'Europe%'LIMIT 10\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayLastIndex(func, arr1, ...)"], "Feature": ["arrayLastIndex(func, arr1, ...)"], "Description": ["arrayLastIndex(func, arr1, ...)", "Returns the index of the last element in the arr1 array for which func(arr1[i], ..., arrN[i]) returns something other than 0.", "Note that the arrayLastIndex is a higher-order function. You must pass a lambda function to it as the first argument, and it can\u2019t be omitted."], "Examples": [], "Category": ["Arrays Functions"], "index": 22, "vector_txt": "22:Feature: arrayLastIndex(func, arr1, ...)\nDescription: arrayLastIndex(func, arr1, ...)Returns the index of the last element in the arr1 array for which func(arr1[i], ..., arrN[i]) returns something other than 0.Note that the arrayLastIndex is a higher-order function. You must pass a lambda function to it as the first argument, and it can\u2019t be omitted.\nExamples: \nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toFixedString"], "Feature": ["toFixedString(s, N)"], "Description": ["toFixedString", "Converts a String type argument to a FixedString(N) type (a string of fixed length N).\nIf the string has fewer bytes than N, it is padded with null bytes to the right. If the string has more bytes than N, an exception is thrown.", "Syntax", "toFixedString(s, N)", "Arguments", "s \u2014 A String to convert to a fixed string. String.N \u2014 Length N. UInt8", "Returned value", "An N length fixed string of s. FixedString."], "Examples": ["SELECT toFixedString('foo', 8) AS s;"], "Category": ["Type Conversion Functions"], "index": 23, "vector_txt": "23:Feature: toFixedString(s, N)\nDescription: toFixedStringConverts a String type argument to a FixedString(N) type (a string of fixed length N).\nIf the string has fewer bytes than N, it is padded with null bytes to the right. If the string has more bytes than N, an exception is thrown.SyntaxtoFixedString(s, N)Argumentss \u2014 A String to convert to a fixed string. String.N \u2014 Length N. UInt8Returned valueAn N length fixed string of s. FixedString.\nExamples: SELECT toFixedString('foo', 8) AS s;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toStringCutToZero"], "Feature": ["toStringCutToZero(s)"], "Description": ["toStringCutToZero", "Accepts a String or FixedString argument. Returns the String with the content truncated at the first zero byte found.", "Syntax", "toStringCutToZero(s)"], "Examples": ["SELECT toFixedString('foo', 8) AS s, toStringCutToZero(s) AS s_cut;", "SELECT toFixedString('foo\\0bar', 8) AS s, toStringCutToZero(s) AS s_cut;"], "Category": ["Type Conversion Functions"], "index": 24, "vector_txt": "24:Feature: toStringCutToZero(s)\nDescription: toStringCutToZeroAccepts a String or FixedString argument. Returns the String with the content truncated at the first zero byte found.SyntaxtoStringCutToZero(s)\nExamples: SELECT toFixedString('foo', 8) AS s, toStringCutToZero(s) AS s_cut;SELECT toFixedString('foo\\0bar', 8) AS s, toStringCutToZero(s) AS s_cut;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDecimalString"], "Feature": ["toDecimalString(number, scale)"], "Description": ["toDecimalString", "Converts a numeric value to String with the number of fractional digits in the output specified by the user.", "Syntax", "toDecimalString(number, scale)", "Arguments", "number \u2014 Value to be represented as String, Int, UInt, Float, Decimal,scale \u2014 Number of fractional digits, UInt8.Maximum scale for Decimal and Int, UInt types is 77 (it is the maximum possible number of significant digits for Decimal),Maximum scale for Float is 60.", "Returned value", "Input value represented as String with given number of fractional digits (scale).\nThe number is rounded up or down according to common arithmetic in case requested scale is smaller than original number's scale."], "Examples": ["SELECT toDecimalString(CAST('64.32', 'Float64'), 5);"], "Category": ["Type Conversion Functions"], "index": 25, "vector_txt": "25:Feature: toDecimalString(number, scale)\nDescription: toDecimalStringConverts a numeric value to String with the number of fractional digits in the output specified by the user.SyntaxtoDecimalString(number, scale)Argumentsnumber \u2014 Value to be represented as String, Int, UInt, Float, Decimal,scale \u2014 Number of fractional digits, UInt8.Maximum scale for Decimal and Int, UInt types is 77 (it is the maximum possible number of significant digits for Decimal),Maximum scale for Float is 60.Returned valueInput value represented as String with given number of fractional digits (scale).\nThe number is rounded up or down according to common arithmetic in case requested scale is smaller than original number's scale.\nExamples: SELECT toDecimalString(CAST('64.32', 'Float64'), 5);\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["reinterpretAsUInt8"], "Feature": ["reinterpretAsUInt8(x)"], "Description": ["reinterpretAsUInt8", "Performs byte reinterpretation by treating the input value as a value of type UInt8. Unlike CAST, the function does not attempt to preserve the original value - if the target type is not able to represent the input type, the output is meaningless.", "Syntax", "reinterpretAsUInt8(x)", "Parameters", "x: value to byte reinterpret as UInt8. (U)Int*, Float, Date, DateTime, UUID, String or FixedString.", "Returned value", "Reinterpreted value x as UInt8. UInt8."], "Examples": ["SELECT    toInt8(257) AS x,    toTypeName(x),    reinterpretAsUInt8(x) AS res,    toTypeName(res);"], "Category": ["Type Conversion Functions"], "index": 26, "vector_txt": "26:Feature: reinterpretAsUInt8(x)\nDescription: reinterpretAsUInt8Performs byte reinterpretation by treating the input value as a value of type UInt8. Unlike CAST, the function does not attempt to preserve the original value - if the target type is not able to represent the input type, the output is meaningless.SyntaxreinterpretAsUInt8(x)Parametersx: value to byte reinterpret as UInt8. (U)Int*, Float, Date, DateTime, UUID, String or FixedString.Returned valueReinterpreted value x as UInt8. UInt8.\nExamples: SELECT    toInt8(257) AS x,    toTypeName(x),    reinterpretAsUInt8(x) AS res,    toTypeName(res);\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["reinterpretAsUInt16"], "Feature": ["reinterpretAsUInt16(x)"], "Description": ["reinterpretAsUInt16", "Performs byte reinterpretation by treating the input value as a value of type UInt16. Unlike CAST, the function does not attempt to preserve the original value - if the target type is not able to represent the input type, the output is meaningless.", "Syntax", "reinterpretAsUInt16(x)", "Parameters", "x: value to byte reinterpret as UInt16. (U)Int*, Float, Date, DateTime, UUID, String or FixedString.", "Returned value", "Reinterpreted value x as UInt16. UInt16."], "Examples": ["SELECT    toUInt8(257) AS x,    toTypeName(x),    reinterpretAsUInt16(x) AS res,    toTypeName(res);"], "Category": ["Type Conversion Functions"], "index": 27, "vector_txt": "27:Feature: reinterpretAsUInt16(x)\nDescription: reinterpretAsUInt16Performs byte reinterpretation by treating the input value as a value of type UInt16. Unlike CAST, the function does not attempt to preserve the original value - if the target type is not able to represent the input type, the output is meaningless.SyntaxreinterpretAsUInt16(x)Parametersx: value to byte reinterpret as UInt16. (U)Int*, Float, Date, DateTime, UUID, String or FixedString.Returned valueReinterpreted value x as UInt16. UInt16.\nExamples: SELECT    toUInt8(257) AS x,    toTypeName(x),    reinterpretAsUInt16(x) AS res,    toTypeName(res);\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["reinterpretAsUInt32"], "Feature": ["reinterpretAsUInt32(x)"], "Description": ["reinterpretAsUInt32", "Performs byte reinterpretation by treating the input value as a value of type UInt32. Unlike CAST, the function does not attempt to preserve the original value - if the target type is not able to represent the input type, the output is meaningless.", "Syntax", "reinterpretAsUInt32(x)", "Parameters", "x: value to byte reinterpret as UInt32. (U)Int*, Float, Date, DateTime, UUID, String or FixedString.", "Returned value", "Reinterpreted value x as UInt32. UInt32."], "Examples": ["SELECT    toUInt16(257) AS x,    toTypeName(x),    reinterpretAsUInt32(x) AS res,    toTypeName(res)"], "Category": ["Type Conversion Functions"], "index": 28, "vector_txt": "28:Feature: reinterpretAsUInt32(x)\nDescription: reinterpretAsUInt32Performs byte reinterpretation by treating the input value as a value of type UInt32. Unlike CAST, the function does not attempt to preserve the original value - if the target type is not able to represent the input type, the output is meaningless.SyntaxreinterpretAsUInt32(x)Parametersx: value to byte reinterpret as UInt32. (U)Int*, Float, Date, DateTime, UUID, String or FixedString.Returned valueReinterpreted value x as UInt32. UInt32.\nExamples: SELECT    toUInt16(257) AS x,    toTypeName(x),    reinterpretAsUInt32(x) AS res,    toTypeName(res)\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["reinterpretAsUInt64"], "Feature": ["reinterpretAsUInt64(x)"], "Description": ["reinterpretAsUInt64", "Performs byte reinterpretation by treating the input value as a value of type UInt64. Unlike CAST, the function does not attempt to preserve the original value - if the target type is not able to represent the input type, the output is meaningless.", "Syntax", "reinterpretAsUInt64(x)", "Parameters", "x: value to byte reinterpret as UInt64. (U)Int*, Float, Date, DateTime, UUID, String or FixedString.", "Returned value", "Reinterpreted value x as UInt64. UInt64."], "Examples": ["SELECT    toUInt32(257) AS x,    toTypeName(x),    reinterpretAsUInt64(x) AS res,    toTypeName(res)"], "Category": ["Type Conversion Functions"], "index": 29, "vector_txt": "29:Feature: reinterpretAsUInt64(x)\nDescription: reinterpretAsUInt64Performs byte reinterpretation by treating the input value as a value of type UInt64. Unlike CAST, the function does not attempt to preserve the original value - if the target type is not able to represent the input type, the output is meaningless.SyntaxreinterpretAsUInt64(x)Parametersx: value to byte reinterpret as UInt64. (U)Int*, Float, Date, DateTime, UUID, String or FixedString.Returned valueReinterpreted value x as UInt64. UInt64.\nExamples: SELECT    toUInt32(257) AS x,    toTypeName(x),    reinterpretAsUInt64(x) AS res,    toTypeName(res)\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["reinterpretAsUInt128"], "Feature": ["reinterpretAsUInt128(x)"], "Description": ["reinterpretAsUInt128", "Performs byte reinterpretation by treating the input value as a value of type UInt128. Unlike CAST, the function does not attempt to preserve the original value - if the target type is not able to represent the input type, the output is meaningless.", "Syntax", "reinterpretAsUInt128(x)", "Parameters", "x: value to byte reinterpret as UInt128. (U)Int*, Float, Date, DateTime, UUID, String or FixedString.", "Returned value", "Reinterpreted value x as UInt128. UInt128."], "Examples": ["SELECT    toUInt64(257) AS x,    toTypeName(x),    reinterpretAsUInt128(x) AS res,    toTypeName(res)"], "Category": ["Type Conversion Functions"], "index": 30, "vector_txt": "30:Feature: reinterpretAsUInt128(x)\nDescription: reinterpretAsUInt128Performs byte reinterpretation by treating the input value as a value of type UInt128. Unlike CAST, the function does not attempt to preserve the original value - if the target type is not able to represent the input type, the output is meaningless.SyntaxreinterpretAsUInt128(x)Parametersx: value to byte reinterpret as UInt128. (U)Int*, Float, Date, DateTime, UUID, String or FixedString.Returned valueReinterpreted value x as UInt128. UInt128.\nExamples: SELECT    toUInt64(257) AS x,    toTypeName(x),    reinterpretAsUInt128(x) AS res,    toTypeName(res)\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["reinterpretAsUInt256"], "Feature": ["reinterpretAsUInt256(x)"], "Description": ["reinterpretAsUInt256", "Performs byte reinterpretation by treating the input value as a value of type UInt256. Unlike CAST, the function does not attempt to preserve the original value - if the target type is not able to represent the input type, the output is meaningless.  ", "Syntax", "reinterpretAsUInt256(x)", "Parameters", "x: value to byte reinterpret as UInt256. (U)Int*, Float, Date, DateTime, UUID, String or FixedString.", "Returned value", "Reinterpreted value x as UInt256. UInt256."], "Examples": ["SELECT    toUInt128(257) AS x,    toTypeName(x),    reinterpretAsUInt256(x) AS res,    toTypeName(res)"], "Category": ["Type Conversion Functions"], "index": 31, "vector_txt": "31:Feature: reinterpretAsUInt256(x)\nDescription: reinterpretAsUInt256Performs byte reinterpretation by treating the input value as a value of type UInt256. Unlike CAST, the function does not attempt to preserve the original value - if the target type is not able to represent the input type, the output is meaningless.  SyntaxreinterpretAsUInt256(x)Parametersx: value to byte reinterpret as UInt256. (U)Int*, Float, Date, DateTime, UUID, String or FixedString.Returned valueReinterpreted value x as UInt256. UInt256.\nExamples: SELECT    toUInt128(257) AS x,    toTypeName(x),    reinterpretAsUInt256(x) AS res,    toTypeName(res)\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["reinterpretAsInt8"], "Feature": ["reinterpretAsInt8(x)"], "Description": ["reinterpretAsInt8", "Performs byte reinterpretation by treating the input value as a value of type Int8. Unlike CAST, the function does not attempt to preserve the original value - if the target type is not able to represent the input type, the output is meaningless.", "Syntax", "reinterpretAsInt8(x)", "Parameters", "x: value to byte reinterpret as Int8. (U)Int*, Float, Date, DateTime, UUID, String or FixedString.", "Returned value", "Reinterpreted value x as Int8. Int8."], "Examples": ["SELECT    toUInt8(257) AS x,    toTypeName(x),    reinterpretAsInt8(x) AS res,    toTypeName(res);"], "Category": ["Type Conversion Functions"], "index": 32, "vector_txt": "32:Feature: reinterpretAsInt8(x)\nDescription: reinterpretAsInt8Performs byte reinterpretation by treating the input value as a value of type Int8. Unlike CAST, the function does not attempt to preserve the original value - if the target type is not able to represent the input type, the output is meaningless.SyntaxreinterpretAsInt8(x)Parametersx: value to byte reinterpret as Int8. (U)Int*, Float, Date, DateTime, UUID, String or FixedString.Returned valueReinterpreted value x as Int8. Int8.\nExamples: SELECT    toUInt8(257) AS x,    toTypeName(x),    reinterpretAsInt8(x) AS res,    toTypeName(res);\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayMin"], "Feature": ["arrayMin([func,] arr)"], "Description": ["arrayMin", "Returns the minimum of elements in the source array.", "If the func function is specified, returns the mininum of elements converted by this function.", "Note that the arrayMin is a higher-order function. You can pass a lambda function to it as the first argument.", "Syntax", "arrayMin([func,] arr)", "Arguments", "func \u2014 Function. Expression.arr \u2014 Array. Array.", "Returned value", "The minimum of function values (or the array minimum).", "NoteIf func is specified, then the return type matches the return value type of func, otherwise it matches the type of the array elements."], "Examples": ["SELECT arrayMin([1, 2, 4]) AS res;", "SELECT arrayMin(x -> (-x), [1, 2, 4]) AS res;"], "Category": ["Arrays Functions"], "index": 33, "vector_txt": "33:Feature: arrayMin([func,] arr)\nDescription: arrayMinReturns the minimum of elements in the source array.If the func function is specified, returns the mininum of elements converted by this function.Note that the arrayMin is a higher-order function. You can pass a lambda function to it as the first argument.SyntaxarrayMin([func,] arr)Argumentsfunc \u2014 Function. Expression.arr \u2014 Array. Array.Returned valueThe minimum of function values (or the array minimum).NoteIf func is specified, then the return type matches the return value type of func, otherwise it matches the type of the array elements.\nExamples: SELECT arrayMin([1, 2, 4]) AS res;SELECT arrayMin(x -> (-x), [1, 2, 4]) AS res;\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["reinterpretAsInt16"], "Feature": ["reinterpretAsInt16(x)"], "Description": ["reinterpretAsInt16", "Performs byte reinterpretation by treating the input value as a value of type Int16. Unlike CAST, the function does not attempt to preserve the original value - if the target type is not able to represent the input type, the output is meaningless.  ", "Syntax", "reinterpretAsInt16(x)", "Parameters", "x: value to byte reinterpret as Int16. (U)Int*, Float, Date, DateTime, UUID, String or FixedString.", "Returned value", "Reinterpreted value x as Int16. Int16."], "Examples": ["SELECT    toInt8(257) AS x,    toTypeName(x),    reinterpretAsInt16(x) AS res,    toTypeName(res);"], "Category": ["Type Conversion Functions"], "index": 34, "vector_txt": "34:Feature: reinterpretAsInt16(x)\nDescription: reinterpretAsInt16Performs byte reinterpretation by treating the input value as a value of type Int16. Unlike CAST, the function does not attempt to preserve the original value - if the target type is not able to represent the input type, the output is meaningless.  SyntaxreinterpretAsInt16(x)Parametersx: value to byte reinterpret as Int16. (U)Int*, Float, Date, DateTime, UUID, String or FixedString.Returned valueReinterpreted value x as Int16. Int16.\nExamples: SELECT    toInt8(257) AS x,    toTypeName(x),    reinterpretAsInt16(x) AS res,    toTypeName(res);\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["reinterpretAsInt32"], "Feature": ["reinterpretAsInt32(x)"], "Description": ["reinterpretAsInt32", "Performs byte reinterpretation by treating the input value as a value of type Int32. Unlike CAST, the function does not attempt to preserve the original value - if the target type is not able to represent the input type, the output is meaningless.", "Syntax", "reinterpretAsInt32(x)", "Parameters", "x: value to byte reinterpret as Int32. (U)Int*, Float, Date, DateTime, UUID, String or FixedString.", "Returned value", "Reinterpreted value x as Int32. Int32."], "Examples": ["SELECT    toInt16(257) AS x,    toTypeName(x),    reinterpretAsInt32(x) AS res,    toTypeName(res);"], "Category": ["Type Conversion Functions"], "index": 35, "vector_txt": "35:Feature: reinterpretAsInt32(x)\nDescription: reinterpretAsInt32Performs byte reinterpretation by treating the input value as a value of type Int32. Unlike CAST, the function does not attempt to preserve the original value - if the target type is not able to represent the input type, the output is meaningless.SyntaxreinterpretAsInt32(x)Parametersx: value to byte reinterpret as Int32. (U)Int*, Float, Date, DateTime, UUID, String or FixedString.Returned valueReinterpreted value x as Int32. Int32.\nExamples: SELECT    toInt16(257) AS x,    toTypeName(x),    reinterpretAsInt32(x) AS res,    toTypeName(res);\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["reinterpretAsInt64"], "Feature": ["reinterpretAsInt64(x)"], "Description": ["reinterpretAsInt64", "Performs byte reinterpretation by treating the input value as a value of type Int64. Unlike CAST, the function does not attempt to preserve the original value - if the target type is not able to represent the input type, the output is meaningless.", "Syntax", "reinterpretAsInt64(x)", "Parameters", "x: value to byte reinterpret as Int64. (U)Int*, Float, Date, DateTime, UUID, String or FixedString.", "Returned value", "Reinterpreted value x as Int64. Int64."], "Examples": ["SELECT    toInt32(257) AS x,    toTypeName(x),    reinterpretAsInt64(x) AS res,    toTypeName(res);"], "Category": ["Type Conversion Functions"], "index": 36, "vector_txt": "36:Feature: reinterpretAsInt64(x)\nDescription: reinterpretAsInt64Performs byte reinterpretation by treating the input value as a value of type Int64. Unlike CAST, the function does not attempt to preserve the original value - if the target type is not able to represent the input type, the output is meaningless.SyntaxreinterpretAsInt64(x)Parametersx: value to byte reinterpret as Int64. (U)Int*, Float, Date, DateTime, UUID, String or FixedString.Returned valueReinterpreted value x as Int64. Int64.\nExamples: SELECT    toInt32(257) AS x,    toTypeName(x),    reinterpretAsInt64(x) AS res,    toTypeName(res);\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["reinterpretAsInt128"], "Feature": ["reinterpretAsInt128(x)"], "Description": ["reinterpretAsInt128", "Performs byte reinterpretation by treating the input value as a value of type Int128. Unlike CAST, the function does not attempt to preserve the original value - if the target type is not able to represent the input type, the output is meaningless.", "Syntax", "reinterpretAsInt128(x)", "Parameters", "x: value to byte reinterpret as Int128. (U)Int*, Float, Date, DateTime, UUID, String or FixedString.", "Returned value", "Reinterpreted value x as Int128. Int128."], "Examples": ["SELECT    toInt64(257) AS x,    toTypeName(x),    reinterpretAsInt128(x) AS res,    toTypeName(res);"], "Category": ["Type Conversion Functions"], "index": 37, "vector_txt": "37:Feature: reinterpretAsInt128(x)\nDescription: reinterpretAsInt128Performs byte reinterpretation by treating the input value as a value of type Int128. Unlike CAST, the function does not attempt to preserve the original value - if the target type is not able to represent the input type, the output is meaningless.SyntaxreinterpretAsInt128(x)Parametersx: value to byte reinterpret as Int128. (U)Int*, Float, Date, DateTime, UUID, String or FixedString.Returned valueReinterpreted value x as Int128. Int128.\nExamples: SELECT    toInt64(257) AS x,    toTypeName(x),    reinterpretAsInt128(x) AS res,    toTypeName(res);\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["reinterpretAsInt256"], "Feature": ["reinterpretAsInt256(x)"], "Description": ["reinterpretAsInt256", "Performs byte reinterpretation by treating the input value as a value of type Int256. Unlike CAST, the function does not attempt to preserve the original value - if the target type is not able to represent the input type, the output is meaningless.", "Syntax", "reinterpretAsInt256(x)", "Parameters", "x: value to byte reinterpret as Int256. (U)Int*, Float, Date, DateTime, UUID, String or FixedString.", "Returned value", "Reinterpreted value x as Int256. Int256."], "Examples": ["SELECT    toInt128(257) AS x,    toTypeName(x),    reinterpretAsInt256(x) AS res,    toTypeName(res);"], "Category": ["Type Conversion Functions"], "index": 38, "vector_txt": "38:Feature: reinterpretAsInt256(x)\nDescription: reinterpretAsInt256Performs byte reinterpretation by treating the input value as a value of type Int256. Unlike CAST, the function does not attempt to preserve the original value - if the target type is not able to represent the input type, the output is meaningless.SyntaxreinterpretAsInt256(x)Parametersx: value to byte reinterpret as Int256. (U)Int*, Float, Date, DateTime, UUID, String or FixedString.Returned valueReinterpreted value x as Int256. Int256.\nExamples: SELECT    toInt128(257) AS x,    toTypeName(x),    reinterpretAsInt256(x) AS res,    toTypeName(res);\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["reinterpretAsFloat32"], "Feature": ["reinterpretAsFloat32(x)"], "Description": ["reinterpretAsFloat32", "Performs byte reinterpretation by treating the input value as a value of type Float32. Unlike CAST, the function does not attempt to preserve the original value - if the target type is not able to represent the input type, the output is meaningless.", "Syntax", "reinterpretAsFloat32(x)", "Parameters", "x: value to reinterpret as Float32. (U)Int*, Float, Date, DateTime, UUID, String or FixedString.", "Returned value", "Reinterpreted value x as Float32. Float32."], "Examples": ["SELECT reinterpretAsUInt32(toFloat32(0.2)) as x, reinterpretAsFloat32(x);"], "Category": ["Type Conversion Functions"], "index": 39, "vector_txt": "39:Feature: reinterpretAsFloat32(x)\nDescription: reinterpretAsFloat32Performs byte reinterpretation by treating the input value as a value of type Float32. Unlike CAST, the function does not attempt to preserve the original value - if the target type is not able to represent the input type, the output is meaningless.SyntaxreinterpretAsFloat32(x)Parametersx: value to reinterpret as Float32. (U)Int*, Float, Date, DateTime, UUID, String or FixedString.Returned valueReinterpreted value x as Float32. Float32.\nExamples: SELECT reinterpretAsUInt32(toFloat32(0.2)) as x, reinterpretAsFloat32(x);\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["reinterpretAsFloat64"], "Feature": ["reinterpretAsFloat64(x)"], "Description": ["reinterpretAsFloat64", "Performs byte reinterpretation by treating the input value as a value of type Float64. Unlike CAST, the function does not attempt to preserve the original value - if the target type is not able to represent the input type, the output is meaningless.", "Syntax", "reinterpretAsFloat64(x)", "Parameters", "x: value to reinterpret as Float64. (U)Int*, Float, Date, DateTime, UUID, String or FixedString.", "Returned value", "Reinterpreted value x as Float64. Float64."], "Examples": ["SELECT reinterpretAsUInt64(toFloat64(0.2)) as x, reinterpretAsFloat64(x);"], "Category": ["Type Conversion Functions"], "index": 40, "vector_txt": "40:Feature: reinterpretAsFloat64(x)\nDescription: reinterpretAsFloat64Performs byte reinterpretation by treating the input value as a value of type Float64. Unlike CAST, the function does not attempt to preserve the original value - if the target type is not able to represent the input type, the output is meaningless.SyntaxreinterpretAsFloat64(x)Parametersx: value to reinterpret as Float64. (U)Int*, Float, Date, DateTime, UUID, String or FixedString.Returned valueReinterpreted value x as Float64. Float64.\nExamples: SELECT reinterpretAsUInt64(toFloat64(0.2)) as x, reinterpretAsFloat64(x);\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["reinterpretAsDate"], "Feature": ["reinterpretAsDate(x)"], "Description": ["reinterpretAsDate", "Accepts a string, fixed string or numeric value and interprets the bytes as a number in host order (little endian). It returns a date from the interpreted number as the number of days since the beginning of the Unix Epoch.", "Syntax", "reinterpretAsDate(x)", "Parameters", "x: number of days since the beginning of the Unix Epoch. (U)Int*, Float, Date, DateTime, UUID, String or FixedString.", "Returned value", "Date. Date.", "Implementation details", "NoteIf the provided string isn\u2019t long enough, the function works as if the string is padded with the necessary number of null bytes. If the string is longer than needed, the extra bytes are ignored."], "Examples": ["SELECT reinterpretAsDate(65), reinterpretAsDate('A');"], "Category": ["Type Conversion Functions"], "index": 41, "vector_txt": "41:Feature: reinterpretAsDate(x)\nDescription: reinterpretAsDateAccepts a string, fixed string or numeric value and interprets the bytes as a number in host order (little endian). It returns a date from the interpreted number as the number of days since the beginning of the Unix Epoch.SyntaxreinterpretAsDate(x)Parametersx: number of days since the beginning of the Unix Epoch. (U)Int*, Float, Date, DateTime, UUID, String or FixedString.Returned valueDate. Date.Implementation detailsNoteIf the provided string isn\u2019t long enough, the function works as if the string is padded with the necessary number of null bytes. If the string is longer than needed, the extra bytes are ignored.\nExamples: SELECT reinterpretAsDate(65), reinterpretAsDate('A');\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["reinterpretAsDateTime"], "Feature": ["reinterpretAsDateTime(x)"], "Description": ["reinterpretAsDateTime", "These functions accept a string and interpret the bytes placed at the beginning of the string as a number in host order (little endian). Returns a date with time interpreted as the number of seconds since the beginning of the Unix Epoch.", "Syntax", "reinterpretAsDateTime(x)", "Parameters", "x: number of seconds since the beginning of the Unix Epoch. (U)Int*, Float, Date, DateTime, UUID, String or FixedString.", "Returned value", "Date and Time. DateTime.", "Implementation details", "NoteIf the provided string isn\u2019t long enough, the function works as if the string is padded with the necessary number of null bytes. If the string is longer than needed, the extra bytes are ignored."], "Examples": ["SELECT reinterpretAsDateTime(65), reinterpretAsDateTime('A');"], "Category": ["Type Conversion Functions"], "index": 42, "vector_txt": "42:Feature: reinterpretAsDateTime(x)\nDescription: reinterpretAsDateTimeThese functions accept a string and interpret the bytes placed at the beginning of the string as a number in host order (little endian). Returns a date with time interpreted as the number of seconds since the beginning of the Unix Epoch.SyntaxreinterpretAsDateTime(x)Parametersx: number of seconds since the beginning of the Unix Epoch. (U)Int*, Float, Date, DateTime, UUID, String or FixedString.Returned valueDate and Time. DateTime.Implementation detailsNoteIf the provided string isn\u2019t long enough, the function works as if the string is padded with the necessary number of null bytes. If the string is longer than needed, the extra bytes are ignored.\nExamples: SELECT reinterpretAsDateTime(65), reinterpretAsDateTime('A');\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["reinterpretAsString"], "Feature": ["reinterpretAsString(x)"], "Description": ["reinterpretAsString", "This function accepts a number, date or date with time and returns a string containing bytes representing the corresponding value in host order (little endian). Null bytes are dropped from the end. For example, a UInt32 type value of 255 is a string that is one byte long.", "Syntax", "reinterpretAsString(x)", "Parameters", "x: value to reinterpret to string. (U)Int*, Float, Date, DateTime.", "Returned value", "String containing bytes representing x. String."], "Examples": ["SELECT    reinterpretAsString(toDateTime('1970-01-01 01:01:05')),    reinterpretAsString(toDate('1970-03-07'));"], "Category": ["Type Conversion Functions"], "index": 43, "vector_txt": "43:Feature: reinterpretAsString(x)\nDescription: reinterpretAsStringThis function accepts a number, date or date with time and returns a string containing bytes representing the corresponding value in host order (little endian). Null bytes are dropped from the end. For example, a UInt32 type value of 255 is a string that is one byte long.SyntaxreinterpretAsString(x)Parametersx: value to reinterpret to string. (U)Int*, Float, Date, DateTime.Returned valueString containing bytes representing x. String.\nExamples: SELECT    reinterpretAsString(toDateTime('1970-01-01 01:01:05')),    reinterpretAsString(toDate('1970-03-07'));\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayMax"], "Feature": ["arrayMax([func,] arr)"], "Description": ["arrayMax", "Returns the maximum of elements in the source array.", "If the func function is specified, returns the maximum of elements converted by this function.", "Note that the arrayMax is a higher-order function. You can pass a lambda function to it as the first argument.", "Syntax", "arrayMax([func,] arr)", "Arguments", "func \u2014 Function. Expression.arr \u2014 Array. Array.", "Returned value", "The maximum of function values (or the array maximum).", "Noteif func is specified then the return type matches the return value type of func, otherwise it matches the type of the array elements."], "Examples": ["SELECT arrayMax([1, 2, 4]) AS res;", "SELECT arrayMax(x -> (-x), [1, 2, 4]) AS res;"], "Category": ["Arrays Functions"], "index": 44, "vector_txt": "44:Feature: arrayMax([func,] arr)\nDescription: arrayMaxReturns the maximum of elements in the source array.If the func function is specified, returns the maximum of elements converted by this function.Note that the arrayMax is a higher-order function. You can pass a lambda function to it as the first argument.SyntaxarrayMax([func,] arr)Argumentsfunc \u2014 Function. Expression.arr \u2014 Array. Array.Returned valueThe maximum of function values (or the array maximum).Noteif func is specified then the return type matches the return value type of func, otherwise it matches the type of the array elements.\nExamples: SELECT arrayMax([1, 2, 4]) AS res;SELECT arrayMax(x -> (-x), [1, 2, 4]) AS res;\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["reinterpretAsFixedString"], "Feature": ["reinterpretAsFixedString(x)"], "Description": ["reinterpretAsFixedString", "This function accepts a number, date or date with time and returns a FixedString containing bytes representing the corresponding value in host order (little endian). Null bytes are dropped from the end. For example, a UInt32 type value of 255 is a FixedString that is one byte long.", "Syntax", "reinterpretAsFixedString(x)", "Parameters", "x: value to reinterpret to string. (U)Int*, Float, Date, DateTime.", "Returned value", "Fixed string containing bytes representing x. FixedString."], "Examples": ["SELECT    reinterpretAsFixedString(toDateTime('1970-01-01 01:01:05')),    reinterpretAsFixedString(toDate('1970-03-07'));"], "Category": ["Type Conversion Functions"], "index": 45, "vector_txt": "45:Feature: reinterpretAsFixedString(x)\nDescription: reinterpretAsFixedStringThis function accepts a number, date or date with time and returns a FixedString containing bytes representing the corresponding value in host order (little endian). Null bytes are dropped from the end. For example, a UInt32 type value of 255 is a FixedString that is one byte long.SyntaxreinterpretAsFixedString(x)Parametersx: value to reinterpret to string. (U)Int*, Float, Date, DateTime.Returned valueFixed string containing bytes representing x. FixedString.\nExamples: SELECT    reinterpretAsFixedString(toDateTime('1970-01-01 01:01:05')),    reinterpretAsFixedString(toDate('1970-03-07'));\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["reinterpretAsUUID"], "Feature": ["reinterpretAsUUID(fixed_string)"], "Description": ["reinterpretAsUUID", "NoteIn addition to the UUID functions listed here, there is dedicated UUID function documentation.", "Accepts a 16 byte string and returns a UUID containing bytes representing the corresponding value in network byte order (big-endian). If the string isn't long enough, the function works as if the string is padded with the necessary number of null bytes to the end. If the string is longer than 16 bytes, the extra bytes at the end are ignored.", "Syntax", "reinterpretAsUUID(fixed_string)", "Arguments", "fixed_string \u2014 Big-endian byte string. FixedString.", "Returned value", "The UUID type value. UUID."], "Examples": ["SELECT reinterpretAsUUID(reverse(unhex('000102030405060708090a0b0c0d0e0f')));", "WITH    generateUUIDv4() AS uuid,    identity(lower(hex(reverse(reinterpretAsString(uuid))))) AS str,    reinterpretAsUUID(reverse(unhex(str))) AS uuid2SELECT uuid = uuid2;"], "Category": ["Type Conversion Functions"], "index": 46, "vector_txt": "46:Feature: reinterpretAsUUID(fixed_string)\nDescription: reinterpretAsUUIDNoteIn addition to the UUID functions listed here, there is dedicated UUID function documentation.Accepts a 16 byte string and returns a UUID containing bytes representing the corresponding value in network byte order (big-endian). If the string isn't long enough, the function works as if the string is padded with the necessary number of null bytes to the end. If the string is longer than 16 bytes, the extra bytes at the end are ignored.SyntaxreinterpretAsUUID(fixed_string)Argumentsfixed_string \u2014 Big-endian byte string. FixedString.Returned valueThe UUID type value. UUID.\nExamples: SELECT reinterpretAsUUID(reverse(unhex('000102030405060708090a0b0c0d0e0f')));WITH    generateUUIDv4() AS uuid,    identity(lower(hex(reverse(reinterpretAsString(uuid))))) AS str,    reinterpretAsUUID(reverse(unhex(str))) AS uuid2SELECT uuid = uuid2;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["reinterpret"], "Feature": ["reinterpret(x, type)"], "Description": ["reinterpret", "Uses the same source in-memory bytes sequence for x value and reinterprets it to destination type.", "Syntax", "reinterpret(x, type)", "Arguments", "x \u2014 Any type.type \u2014 Destination type. String.", "Returned value", "Destination type value."], "Examples": ["SELECT reinterpret(toInt8(-1), 'UInt8') as int_to_uint,    reinterpret(toInt8(1), 'Float32') as int_to_float,    reinterpret('1', 'UInt32') as string_to_int;"], "Category": ["Type Conversion Functions"], "index": 47, "vector_txt": "47:Feature: reinterpret(x, type)\nDescription: reinterpretUses the same source in-memory bytes sequence for x value and reinterprets it to destination type.Syntaxreinterpret(x, type)Argumentsx \u2014 Any type.type \u2014 Destination type. String.Returned valueDestination type value.\nExamples: SELECT reinterpret(toInt8(-1), 'UInt8') as int_to_uint,    reinterpret(toInt8(1), 'Float32') as int_to_float,    reinterpret('1', 'UInt32') as string_to_int;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["CAST"], "Feature": ["CAST(x, T)CAST(x AS t)x::t"], "Description": ["CAST", "Converts an input value to the specified data type. Unlike the reinterpret function, CAST tries to present the same value using the new data type. If the conversion can not be done then an exception is raised.\nSeveral syntax variants are supported.", "Syntax", "CAST(x, T)CAST(x AS t)x::t", "Arguments", "x \u2014 A value to convert. May be of any type.T \u2014 The name of the target data type. String.t \u2014 The target data type.", "Returned value", "Converted value.", "NoteIf the input value does not fit the bounds of the target type, the result overflows. For example, CAST(-1, 'UInt8') returns 255."], "Examples": ["SELECT    CAST(toInt8(-1), 'UInt8') AS cast_int_to_uint,    CAST(1.5 AS Decimal(3,2)) AS cast_float_to_decimal,    '1'::Int32 AS cast_string_to_int;", "SELECT    '2016-06-15 23:00:00' AS timestamp,    CAST(timestamp AS DateTime) AS datetime,    CAST(timestamp AS Date) AS date,    CAST(timestamp, 'String') AS string,    CAST(timestamp, 'FixedString(22)') AS fixed_string;", "SELECT toTypeName(x) FROM t_null;", "SELECT toTypeName(CAST(x, 'Nullable(UInt16)')) FROM t_null;"], "Category": ["Type Conversion Functions"], "index": 48, "vector_txt": "48:Feature: CAST(x, T)CAST(x AS t)x::t\nDescription: CASTConverts an input value to the specified data type. Unlike the reinterpret function, CAST tries to present the same value using the new data type. If the conversion can not be done then an exception is raised.\nSeveral syntax variants are supported.SyntaxCAST(x, T)CAST(x AS t)x::tArgumentsx \u2014 A value to convert. May be of any type.T \u2014 The name of the target data type. String.t \u2014 The target data type.Returned valueConverted value.NoteIf the input value does not fit the bounds of the target type, the result overflows. For example, CAST(-1, 'UInt8') returns 255.\nExamples: SELECT    CAST(toInt8(-1), 'UInt8') AS cast_int_to_uint,    CAST(1.5 AS Decimal(3,2)) AS cast_float_to_decimal,    '1'::Int32 AS cast_string_to_int;SELECT    '2016-06-15 23:00:00' AS timestamp,    CAST(timestamp AS DateTime) AS datetime,    CAST(timestamp AS Date) AS date,    CAST(timestamp, 'String') AS string,    CAST(timestamp, 'FixedString(22)') AS fixed_string;SELECT toTypeName(x) FROM t_null;SELECT toTypeName(CAST(x, 'Nullable(UInt16)')) FROM t_null;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["accurateCast(x, T)"], "Feature": ["accurateCast(x, T)"], "Description": ["accurateCast(x, T)", "Converts x to the T data type.", "The difference from cast is that accurateCast does not allow overflow of numeric types during cast if type value x does not fit the bounds of type T. For example, accurateCast(-1, 'UInt8') throws an exception."], "Examples": ["SELECT cast(-1, 'UInt8') as uint8;", "SELECT accurateCast(-1, 'UInt8') as uint8;"], "Category": ["Type Conversion Functions"], "index": 49, "vector_txt": "49:Feature: accurateCast(x, T)\nDescription: accurateCast(x, T)Converts x to the T data type.The difference from cast is that accurateCast does not allow overflow of numeric types during cast if type value x does not fit the bounds of type T. For example, accurateCast(-1, 'UInt8') throws an exception.\nExamples: SELECT cast(-1, 'UInt8') as uint8;SELECT accurateCast(-1, 'UInt8') as uint8;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["accurateCastOrNull(x, T)"], "Feature": ["accurateCastOrNull(x, T)"], "Description": ["accurateCastOrNull(x, T)", "Converts input value x to the specified data type T. Always returns Nullable type and returns NULL if the casted value is not representable in the target type.", "Syntax", "accurateCastOrNull(x, T)", "Arguments", "x \u2014 Input value.T \u2014 The name of the returned data type.", "Returned value", "The value, converted to the specified data type T."], "Examples": ["SELECT toTypeName(accurateCastOrNull(5, 'UInt8'));", "SELECT    accurateCastOrNull(-1, 'UInt8') as uint8,    accurateCastOrNull(128, 'Int8') as int8,    accurateCastOrNull('Test', 'FixedString(2)') as fixed_string;"], "Category": ["Type Conversion Functions"], "index": 50, "vector_txt": "50:Feature: accurateCastOrNull(x, T)\nDescription: accurateCastOrNull(x, T)Converts input value x to the specified data type T. Always returns Nullable type and returns NULL if the casted value is not representable in the target type.SyntaxaccurateCastOrNull(x, T)Argumentsx \u2014 Input value.T \u2014 The name of the returned data type.Returned valueThe value, converted to the specified data type T.\nExamples: SELECT toTypeName(accurateCastOrNull(5, 'UInt8'));SELECT    accurateCastOrNull(-1, 'UInt8') as uint8,    accurateCastOrNull(128, 'Int8') as int8,    accurateCastOrNull('Test', 'FixedString(2)') as fixed_string;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["accurateCastOrDefault(x, T[, default_value])"], "Feature": ["accurateCastOrDefault(x, T)"], "Description": ["accurateCastOrDefault(x, T[, default_value])", "Converts input value x to the specified data type T. Returns default type value or default_value if specified if the casted value is not representable in the target type.", "Syntax", "accurateCastOrDefault(x, T)", "Arguments", "x \u2014 Input value.T \u2014 The name of the returned data type.default_value \u2014 Default value of returned data type.", "Returned value", "The value converted to the specified data type T."], "Examples": ["SELECT toTypeName(accurateCastOrDefault(5, 'UInt8'));", "SELECT    accurateCastOrDefault(-1, 'UInt8') as uint8,    accurateCastOrDefault(-1, 'UInt8', 5) as uint8_default,    accurateCastOrDefault(128, 'Int8') as int8,    accurateCastOrDefault(128, 'Int8', 5) as int8_default,    accurateCastOrDefault('Test', 'FixedString(2)') as fixed_string,    accurateCastOrDefault('Test', 'FixedString(2)', 'Te') as fixed_string_default;"], "Category": ["Type Conversion Functions"], "index": 51, "vector_txt": "51:Feature: accurateCastOrDefault(x, T)\nDescription: accurateCastOrDefault(x, T[, default_value])Converts input value x to the specified data type T. Returns default type value or default_value if specified if the casted value is not representable in the target type.SyntaxaccurateCastOrDefault(x, T)Argumentsx \u2014 Input value.T \u2014 The name of the returned data type.default_value \u2014 Default value of returned data type.Returned valueThe value converted to the specified data type T.\nExamples: SELECT toTypeName(accurateCastOrDefault(5, 'UInt8'));SELECT    accurateCastOrDefault(-1, 'UInt8') as uint8,    accurateCastOrDefault(-1, 'UInt8', 5) as uint8_default,    accurateCastOrDefault(128, 'Int8') as int8,    accurateCastOrDefault(128, 'Int8', 5) as int8_default,    accurateCastOrDefault('Test', 'FixedString(2)') as fixed_string,    accurateCastOrDefault('Test', 'FixedString(2)', 'Te') as fixed_string_default;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toIntervalYear"], "Feature": ["toIntervalYear(n)"], "Description": ["toIntervalYear", "Returns an interval of n years of data type IntervalYear.", "Syntax", "toIntervalYear(n)", "Arguments", "n \u2014 Number of years. Integer numbers or string representations thereof, and float numbers. (U)Int*/Float*/String.", "Returned values", "Interval of n years. IntervalYear."], "Examples": ["WITH    toDate('2024-06-15') AS date,    toIntervalYear(1) AS interval_to_yearSELECT date + interval_to_year AS result"], "Category": ["Type Conversion Functions"], "index": 52, "vector_txt": "52:Feature: toIntervalYear(n)\nDescription: toIntervalYearReturns an interval of n years of data type IntervalYear.SyntaxtoIntervalYear(n)Argumentsn \u2014 Number of years. Integer numbers or string representations thereof, and float numbers. (U)Int*/Float*/String.Returned valuesInterval of n years. IntervalYear.\nExamples: WITH    toDate('2024-06-15') AS date,    toIntervalYear(1) AS interval_to_yearSELECT date + interval_to_year AS result\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toIntervalQuarter"], "Feature": ["toIntervalQuarter(n)"], "Description": ["toIntervalQuarter", "Returns an interval of n quarters of data type IntervalQuarter.", "Syntax", "toIntervalQuarter(n)", "Arguments", "n \u2014 Number of quarters. Integer numbers or string representations thereof, and float numbers. (U)Int*/Float*/String.", "Returned values", "Interval of n quarters. IntervalQuarter."], "Examples": ["WITH    toDate('2024-06-15') AS date,    toIntervalQuarter(1) AS interval_to_quarterSELECT date + interval_to_quarter AS result"], "Category": ["Type Conversion Functions"], "index": 53, "vector_txt": "53:Feature: toIntervalQuarter(n)\nDescription: toIntervalQuarterReturns an interval of n quarters of data type IntervalQuarter.SyntaxtoIntervalQuarter(n)Argumentsn \u2014 Number of quarters. Integer numbers or string representations thereof, and float numbers. (U)Int*/Float*/String.Returned valuesInterval of n quarters. IntervalQuarter.\nExamples: WITH    toDate('2024-06-15') AS date,    toIntervalQuarter(1) AS interval_to_quarterSELECT date + interval_to_quarter AS result\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toIntervalMonth"], "Feature": ["toIntervalMonth(n)"], "Description": ["toIntervalMonth", "Returns an interval of n months of data type IntervalMonth.", "Syntax", "toIntervalMonth(n)", "Arguments", "n \u2014 Number of months. Integer numbers or string representations thereof, and float numbers. (U)Int*/Float*/String.", "Returned values", "Interval of n months. IntervalMonth."], "Examples": ["WITH    toDate('2024-06-15') AS date,    toIntervalMonth(1) AS interval_to_monthSELECT date + interval_to_month AS result"], "Category": ["Type Conversion Functions"], "index": 54, "vector_txt": "54:Feature: toIntervalMonth(n)\nDescription: toIntervalMonthReturns an interval of n months of data type IntervalMonth.SyntaxtoIntervalMonth(n)Argumentsn \u2014 Number of months. Integer numbers or string representations thereof, and float numbers. (U)Int*/Float*/String.Returned valuesInterval of n months. IntervalMonth.\nExamples: WITH    toDate('2024-06-15') AS date,    toIntervalMonth(1) AS interval_to_monthSELECT date + interval_to_month AS result\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arraySum"], "Feature": ["arraySum([func,] arr)"], "Description": ["arraySum", "Returns the sum of elements in the source array.", "If the func function is specified, returns the sum of elements converted by this function.", "Note that the arraySum is a higher-order function. You can pass a lambda function to it as the first argument.", "Syntax", "arraySum([func,] arr)", "Arguments", "func \u2014 Function. Expression.arr \u2014 Array. Array.", "Returned value", "The sum of the function values (or the array sum).", "NoteReturn type:For decimal numbers in the source array (or for converted values, if func is specified) \u2014 Decimal128.For floating point numbers \u2014 Float64.For numeric unsigned \u2014 UInt64. For numeric signed \u2014 Int64."], "Examples": ["SELECT arraySum([2, 3]) AS res;", "SELECT arraySum(x -> x*x, [2, 3]) AS res;"], "Category": ["Arrays Functions"], "index": 55, "vector_txt": "55:Feature: arraySum([func,] arr)\nDescription: arraySumReturns the sum of elements in the source array.If the func function is specified, returns the sum of elements converted by this function.Note that the arraySum is a higher-order function. You can pass a lambda function to it as the first argument.SyntaxarraySum([func,] arr)Argumentsfunc \u2014 Function. Expression.arr \u2014 Array. Array.Returned valueThe sum of the function values (or the array sum).NoteReturn type:For decimal numbers in the source array (or for converted values, if func is specified) \u2014 Decimal128.For floating point numbers \u2014 Float64.For numeric unsigned \u2014 UInt64. For numeric signed \u2014 Int64.\nExamples: SELECT arraySum([2, 3]) AS res;SELECT arraySum(x -> x*x, [2, 3]) AS res;\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toIntervalWeek"], "Feature": ["toIntervalWeek(n)"], "Description": ["toIntervalWeek", "Returns an interval of n weeks of data type IntervalWeek.", "Syntax", "toIntervalWeek(n)", "Arguments", "n \u2014 Number of weeks. Integer numbers or string representations thereof, and float numbers. (U)Int*/Float*/String.", "Returned values", "Interval of n weeks. IntervalWeek."], "Examples": ["WITH    toDate('2024-06-15') AS date,    toIntervalWeek(1) AS interval_to_weekSELECT date + interval_to_week AS result"], "Category": ["Type Conversion Functions"], "index": 56, "vector_txt": "56:Feature: toIntervalWeek(n)\nDescription: toIntervalWeekReturns an interval of n weeks of data type IntervalWeek.SyntaxtoIntervalWeek(n)Argumentsn \u2014 Number of weeks. Integer numbers or string representations thereof, and float numbers. (U)Int*/Float*/String.Returned valuesInterval of n weeks. IntervalWeek.\nExamples: WITH    toDate('2024-06-15') AS date,    toIntervalWeek(1) AS interval_to_weekSELECT date + interval_to_week AS result\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toIntervalDay"], "Feature": ["toIntervalDay(n)"], "Description": ["toIntervalDay", "Returns an interval of n days of data type IntervalDay.", "Syntax", "toIntervalDay(n)", "Arguments", "n \u2014 Number of days. Integer numbers or string representations thereof, and float numbers. (U)Int*/Float*/String.", "Returned values", "Interval of n days. IntervalDay."], "Examples": ["WITH    toDate('2024-06-15') AS date,    toIntervalDay(5) AS interval_to_daysSELECT date + interval_to_days AS result"], "Category": ["Type Conversion Functions"], "index": 57, "vector_txt": "57:Feature: toIntervalDay(n)\nDescription: toIntervalDayReturns an interval of n days of data type IntervalDay.SyntaxtoIntervalDay(n)Argumentsn \u2014 Number of days. Integer numbers or string representations thereof, and float numbers. (U)Int*/Float*/String.Returned valuesInterval of n days. IntervalDay.\nExamples: WITH    toDate('2024-06-15') AS date,    toIntervalDay(5) AS interval_to_daysSELECT date + interval_to_days AS result\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toIntervalHour"], "Feature": ["toIntervalHour(n)"], "Description": ["toIntervalHour", "Returns an interval of n hours of data type IntervalHour.", "Syntax", "toIntervalHour(n)", "Arguments", "n \u2014 Number of hours. Integer numbers or string representations thereof, and float numbers. (U)Int*/Float*/String.", "Returned values", "Interval of n hours. IntervalHour."], "Examples": ["WITH    toDate('2024-06-15') AS date,    toIntervalHour(12) AS interval_to_hoursSELECT date + interval_to_hours AS result"], "Category": ["Type Conversion Functions"], "index": 58, "vector_txt": "58:Feature: toIntervalHour(n)\nDescription: toIntervalHourReturns an interval of n hours of data type IntervalHour.SyntaxtoIntervalHour(n)Argumentsn \u2014 Number of hours. Integer numbers or string representations thereof, and float numbers. (U)Int*/Float*/String.Returned valuesInterval of n hours. IntervalHour.\nExamples: WITH    toDate('2024-06-15') AS date,    toIntervalHour(12) AS interval_to_hoursSELECT date + interval_to_hours AS result\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toIntervalMinute"], "Feature": ["toIntervalMinute(n)"], "Description": ["toIntervalMinute", "Returns an interval of n minutes of data type IntervalMinute.", "Syntax", "toIntervalMinute(n)", "Arguments", "n \u2014 Number of minutes. Integer numbers or string representations thereof, and float numbers. (U)Int*/Float*/String.", "Returned values", "Interval of n minutes. IntervalMinute."], "Examples": ["WITH    toDate('2024-06-15') AS date,    toIntervalMinute(12) AS interval_to_minutesSELECT date + interval_to_minutes AS result"], "Category": ["Type Conversion Functions"], "index": 59, "vector_txt": "59:Feature: toIntervalMinute(n)\nDescription: toIntervalMinuteReturns an interval of n minutes of data type IntervalMinute.SyntaxtoIntervalMinute(n)Argumentsn \u2014 Number of minutes. Integer numbers or string representations thereof, and float numbers. (U)Int*/Float*/String.Returned valuesInterval of n minutes. IntervalMinute.\nExamples: WITH    toDate('2024-06-15') AS date,    toIntervalMinute(12) AS interval_to_minutesSELECT date + interval_to_minutes AS result\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toIntervalSecond"], "Feature": ["toIntervalSecond(n)"], "Description": ["toIntervalSecond", "Returns an interval of n seconds of data type IntervalSecond.", "Syntax", "toIntervalSecond(n)", "Arguments", "n \u2014 Number of seconds. Integer numbers or string representations thereof, and float numbers. (U)Int*/Float*/String.", "Returned values", "Interval of n seconds. IntervalSecond."], "Examples": ["WITH    toDate('2024-06-15') AS date,    toIntervalSecond(30) AS interval_to_secondsSELECT date + interval_to_seconds AS result"], "Category": ["Type Conversion Functions"], "index": 60, "vector_txt": "60:Feature: toIntervalSecond(n)\nDescription: toIntervalSecondReturns an interval of n seconds of data type IntervalSecond.SyntaxtoIntervalSecond(n)Argumentsn \u2014 Number of seconds. Integer numbers or string representations thereof, and float numbers. (U)Int*/Float*/String.Returned valuesInterval of n seconds. IntervalSecond.\nExamples: WITH    toDate('2024-06-15') AS date,    toIntervalSecond(30) AS interval_to_secondsSELECT date + interval_to_seconds AS result\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toIntervalMillisecond"], "Feature": ["toIntervalMillisecond(n)"], "Description": ["toIntervalMillisecond", "Returns an interval of n milliseconds of data type IntervalMillisecond.", "Syntax", "toIntervalMillisecond(n)", "Arguments", "n \u2014 Number of milliseconds. Integer numbers or string representations thereof, and float numbers. (U)Int*/Float*/String.", "Returned values", "Interval of n milliseconds. IntervalMilliseconds."], "Examples": ["WITH    toDateTime('2024-06-15') AS date,    toIntervalMillisecond(30) AS interval_to_millisecondsSELECT date + interval_to_milliseconds AS result"], "Category": ["Type Conversion Functions"], "index": 61, "vector_txt": "61:Feature: toIntervalMillisecond(n)\nDescription: toIntervalMillisecondReturns an interval of n milliseconds of data type IntervalMillisecond.SyntaxtoIntervalMillisecond(n)Argumentsn \u2014 Number of milliseconds. Integer numbers or string representations thereof, and float numbers. (U)Int*/Float*/String.Returned valuesInterval of n milliseconds. IntervalMilliseconds.\nExamples: WITH    toDateTime('2024-06-15') AS date,    toIntervalMillisecond(30) AS interval_to_millisecondsSELECT date + interval_to_milliseconds AS result\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toIntervalMicrosecond"], "Feature": ["toIntervalMicrosecond(n)"], "Description": ["toIntervalMicrosecond", "Returns an interval of n microseconds of data type IntervalMicrosecond.", "Syntax", "toIntervalMicrosecond(n)", "Arguments", "n \u2014 Number of microseconds. Integer numbers or string representations thereof, and float numbers. (U)Int*/Float*/String.", "Returned values", "Interval of n microseconds. IntervalMicrosecond."], "Examples": ["WITH    toDateTime('2024-06-15') AS date,    toIntervalMicrosecond(30) AS interval_to_microsecondsSELECT date + interval_to_microseconds AS result"], "Category": ["Type Conversion Functions"], "index": 62, "vector_txt": "62:Feature: toIntervalMicrosecond(n)\nDescription: toIntervalMicrosecondReturns an interval of n microseconds of data type IntervalMicrosecond.SyntaxtoIntervalMicrosecond(n)Argumentsn \u2014 Number of microseconds. Integer numbers or string representations thereof, and float numbers. (U)Int*/Float*/String.Returned valuesInterval of n microseconds. IntervalMicrosecond.\nExamples: WITH    toDateTime('2024-06-15') AS date,    toIntervalMicrosecond(30) AS interval_to_microsecondsSELECT date + interval_to_microseconds AS result\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toIntervalNanosecond"], "Feature": ["toIntervalNanosecond(n)"], "Description": ["toIntervalNanosecond", "Returns an interval of n nanoseconds of data type IntervalNanosecond.", "Syntax", "toIntervalNanosecond(n)", "Arguments", "n \u2014 Number of nanoseconds. Integer numbers or string representations thereof, and float numbers. (U)Int*/Float*/String.", "Returned values", "Interval of n nanoseconds. IntervalNanosecond."], "Examples": ["WITH    toDateTime('2024-06-15') AS date,    toIntervalNanosecond(30) AS interval_to_nanosecondsSELECT date + interval_to_nanoseconds AS result"], "Category": ["Type Conversion Functions"], "index": 63, "vector_txt": "63:Feature: toIntervalNanosecond(n)\nDescription: toIntervalNanosecondReturns an interval of n nanoseconds of data type IntervalNanosecond.SyntaxtoIntervalNanosecond(n)Argumentsn \u2014 Number of nanoseconds. Integer numbers or string representations thereof, and float numbers. (U)Int*/Float*/String.Returned valuesInterval of n nanoseconds. IntervalNanosecond.\nExamples: WITH    toDateTime('2024-06-15') AS date,    toIntervalNanosecond(30) AS interval_to_nanosecondsSELECT date + interval_to_nanoseconds AS result\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["parseDateTime"], "Feature": ["parseDateTime(str[, format[, timezone]])"], "Description": ["parseDateTime", "Converts a String to DateTime according to a MySQL format string.", "This function is the opposite operation of function formatDateTime.", "Syntax", "parseDateTime(str[, format[, timezone]])", "Arguments", "str \u2014 The String to be parsedformat \u2014 The format string. Optional. %Y-%m-%d %H:%i:%s if not specified.timezone \u2014 Timezone. Optional.", "Returned value(s)", "Returns DateTime values parsed from input string according to a MySQL style format string.", "Supported format specifiers", "All format specifiers listed in formatDateTime except:", "%Q: Quarter (1-4)"], "Examples": ["SELECT parseDateTime('2021-01-04+23:00:00', '%Y-%m-%d+%H:%i:%s')\u250c\u2500parseDateTime('2021-01-04+23:00:00', '%Y-%m-%d+%H:%i:%s')\u2500\u2510\u2502                                       2021-01-04 23:00:00 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Category": ["Type Conversion Functions"], "index": 64, "vector_txt": "64:Feature: parseDateTime(str[, format[, timezone]])\nDescription: parseDateTimeConverts a String to DateTime according to a MySQL format string.This function is the opposite operation of function formatDateTime.SyntaxparseDateTime(str[, format[, timezone]])Argumentsstr \u2014 The String to be parsedformat \u2014 The format string. Optional. %Y-%m-%d %H:%i:%s if not specified.timezone \u2014 Timezone. Optional.Returned value(s)Returns DateTime values parsed from input string according to a MySQL style format string.Supported format specifiersAll format specifiers listed in formatDateTime except:%Q: Quarter (1-4)\nExamples: SELECT parseDateTime('2021-01-04+23:00:00', '%Y-%m-%d+%H:%i:%s')\u250c\u2500parseDateTime('2021-01-04+23:00:00', '%Y-%m-%d+%H:%i:%s')\u2500\u2510\u2502                                       2021-01-04 23:00:00 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["parseDateTimeOrZero"], "Feature": ["parseDateTimeOrZero"], "Description": ["parseDateTimeOrZero", "Same as for parseDateTime except that it returns zero date when it encounters a date format that cannot be processed."], "Examples": [], "Category": ["Type Conversion Functions"], "index": 65, "vector_txt": "65:Feature: parseDateTimeOrZero\nDescription: parseDateTimeOrZeroSame as for parseDateTime except that it returns zero date when it encounters a date format that cannot be processed.\nExamples: \nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayAvg"], "Feature": ["arrayAvg([func,] arr)"], "Description": ["arrayAvg", "Returns the average of elements in the source array.", "If the func function is specified, returns the average of elements converted by this function.", "Note that the arrayAvg is a higher-order function. You can pass a lambda function to it as the first argument.", "Syntax", "arrayAvg([func,] arr)", "Arguments", "func \u2014 Function. Expression.arr \u2014 Array. Array.", "Returned value", "The average of function values (or the array average). Float64."], "Examples": ["SELECT arrayAvg([1, 2, 4]) AS res;", "SELECT arrayAvg(x -> (x * x), [2, 4]) AS res;"], "Category": ["Arrays Functions"], "index": 66, "vector_txt": "66:Feature: arrayAvg([func,] arr)\nDescription: arrayAvgReturns the average of elements in the source array.If the func function is specified, returns the average of elements converted by this function.Note that the arrayAvg is a higher-order function. You can pass a lambda function to it as the first argument.SyntaxarrayAvg([func,] arr)Argumentsfunc \u2014 Function. Expression.arr \u2014 Array. Array.Returned valueThe average of function values (or the array average). Float64.\nExamples: SELECT arrayAvg([1, 2, 4]) AS res;SELECT arrayAvg(x -> (x * x), [2, 4]) AS res;\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["parseDateTimeOrNull"], "Feature": ["parseDateTimeOrNull"], "Description": ["parseDateTimeOrNull", "Same as for parseDateTime except that it returns NULL when it encounters a date format that cannot be processed.", "Alias: str_to_date."], "Examples": [], "Category": ["Type Conversion Functions"], "index": 67, "vector_txt": "67:Feature: parseDateTimeOrNull\nDescription: parseDateTimeOrNullSame as for parseDateTime except that it returns NULL when it encounters a date format that cannot be processed.Alias: str_to_date.\nExamples: \nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["parseDateTimeInJodaSyntax"], "Feature": ["parseDateTimeInJodaSyntax(str[, format[, timezone]])"], "Description": ["parseDateTimeInJodaSyntax", "Similar to parseDateTime, except that the format string is in Joda instead of MySQL syntax.", "This function is the opposite operation of function formatDateTimeInJodaSyntax.", "Syntax", "parseDateTimeInJodaSyntax(str[, format[, timezone]])", "Arguments", "str \u2014 The String to be parsedformat \u2014 The format string. Optional. yyyy-MM-dd HH:mm:ss if not specified.timezone \u2014 Timezone. Optional.", "Returned value(s)", "Returns DateTime values parsed from input string according to a Joda style format.", "Supported format specifiers", "All format specifiers listed in formatDateTimeInJoda are supported, except:", "S: fraction of secondz: time zoneZ: time zone offset/id"], "Examples": ["SELECT parseDateTimeInJodaSyntax('2023-02-24 14:53:31', 'yyyy-MM-dd HH:mm:ss', 'Europe/Minsk')\u250c\u2500parseDateTimeInJodaSyntax('2023-02-24 14:53:31', 'yyyy-MM-dd HH:mm:ss', 'Europe/Minsk')\u2500\u2510\u2502                                                                     2023-02-24 14:53:31 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Category": ["Type Conversion Functions"], "index": 68, "vector_txt": "68:Feature: parseDateTimeInJodaSyntax(str[, format[, timezone]])\nDescription: parseDateTimeInJodaSyntaxSimilar to parseDateTime, except that the format string is in Joda instead of MySQL syntax.This function is the opposite operation of function formatDateTimeInJodaSyntax.SyntaxparseDateTimeInJodaSyntax(str[, format[, timezone]])Argumentsstr \u2014 The String to be parsedformat \u2014 The format string. Optional. yyyy-MM-dd HH:mm:ss if not specified.timezone \u2014 Timezone. Optional.Returned value(s)Returns DateTime values parsed from input string according to a Joda style format.Supported format specifiersAll format specifiers listed in formatDateTimeInJoda are supported, except:S: fraction of secondz: time zoneZ: time zone offset/id\nExamples: SELECT parseDateTimeInJodaSyntax('2023-02-24 14:53:31', 'yyyy-MM-dd HH:mm:ss', 'Europe/Minsk')\u250c\u2500parseDateTimeInJodaSyntax('2023-02-24 14:53:31', 'yyyy-MM-dd HH:mm:ss', 'Europe/Minsk')\u2500\u2510\u2502                                                                     2023-02-24 14:53:31 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["parseDateTimeInJodaSyntaxOrZero"], "Feature": ["parseDateTimeInJodaSyntaxOrZero"], "Description": ["parseDateTimeInJodaSyntaxOrZero", "Same as for parseDateTimeInJodaSyntax except that it returns zero date when it encounters a date format that cannot be processed."], "Examples": [], "Category": ["Type Conversion Functions"], "index": 69, "vector_txt": "69:Feature: parseDateTimeInJodaSyntaxOrZero\nDescription: parseDateTimeInJodaSyntaxOrZeroSame as for parseDateTimeInJodaSyntax except that it returns zero date when it encounters a date format that cannot be processed.\nExamples: \nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["parseDateTimeInJodaSyntaxOrNull"], "Feature": ["parseDateTimeInJodaSyntaxOrNull"], "Description": ["parseDateTimeInJodaSyntaxOrNull", "Same as for parseDateTimeInJodaSyntax except that it returns NULL when it encounters a date format that cannot be processed."], "Examples": [], "Category": ["Type Conversion Functions"], "index": 70, "vector_txt": "70:Feature: parseDateTimeInJodaSyntaxOrNull\nDescription: parseDateTimeInJodaSyntaxOrNullSame as for parseDateTimeInJodaSyntax except that it returns NULL when it encounters a date format that cannot be processed.\nExamples: \nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["parseDateTimeBestEffort"], "Feature": ["parseDateTimeBestEffort"], "Description": ["parseDateTimeBestEffort"], "Examples": [], "Category": ["Type Conversion Functions"], "index": 71, "vector_txt": "71:Feature: parseDateTimeBestEffort\nDescription: parseDateTimeBestEffort\nExamples: \nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["parseDateTime32BestEffort"], "Feature": ["parseDateTimeBestEffort(time_string [, time_zone])"], "Description": ["parseDateTime32BestEffort", "Converts a date and time in the String representation to DateTime data type.", "The function parses ISO 8601, RFC 1123 - 5.2.14 RFC-822 Date and Time Specification, ClickHouse\u2019s and some other date and time formats.", "Syntax", "parseDateTimeBestEffort(time_string [, time_zone])", "Arguments", "time_string \u2014 String containing a date and time to convert. String.time_zone \u2014 Time zone. The function parses time_string according to the time zone. String.", "Supported non-standard formats", "A string containing 9..10 digit unix timestamp.A string with a date and a time component: YYYYMMDDhhmmss, DD/MM/YYYY hh:mm:ss, DD-MM-YY hh:mm, YYYY-MM-DD hh:mm:ss, etc.A string with a date, but no time component: YYYY, YYYYMM, YYYY*MM, DD/MM/YYYY, DD-MM-YY etc.A string with a day and time: DD, DD hh, DD hh:mm. In this case MM is substituted by 01.A string that includes the date and time along with time zone offset information: YYYY-MM-DD hh:mm:ss \u00b1h:mm, etc. For example, 2020-12-12 17:36:00 -5:00.A syslog timestamp: Mmm dd hh:mm:ss. For example, Jun  9 14:20:32.", "For all of the formats with separator the function parses months names expressed by their full name or by the first three letters of a month name. Examples: 24/DEC/18, 24-Dec-18, 01-September-2018.\nIf the year is not specified, it is considered to be equal to the current year. If the resulting DateTime happen to be in the future (even by a second after the current moment), then the current year is substituted by the previous year.", "Returned value", "time_string converted to the DateTime data type."], "Examples": ["SELECT parseDateTimeBestEffort('23/10/2020 12:12:57')AS parseDateTimeBestEffort;", "SELECT parseDateTimeBestEffort('Sat, 18 Aug 2018 07:22:16 GMT', 'Asia/Istanbul')AS parseDateTimeBestEffort;", "SELECT parseDateTimeBestEffort('1284101485')AS parseDateTimeBestEffort;", "SELECT parseDateTimeBestEffort('2018-10-23 10:12:12')AS parseDateTimeBestEffort;", "SELECT toYear(now()) as year, parseDateTimeBestEffort('10 20:19');", "WITH    now() AS ts_now,    formatDateTime(ts_around, '%b %e %T') AS syslog_argSELECT    ts_now,    syslog_arg,    parseDateTimeBestEffort(syslog_arg)FROM (SELECT arrayJoin([ts_now - 30, ts_now + 30]) AS ts_around);"], "Category": ["Type Conversion Functions"], "index": 72, "vector_txt": "72:Feature: parseDateTimeBestEffort(time_string [, time_zone])\nDescription: parseDateTime32BestEffortConverts a date and time in the String representation to DateTime data type.The function parses ISO 8601, RFC 1123 - 5.2.14 RFC-822 Date and Time Specification, ClickHouse\u2019s and some other date and time formats.SyntaxparseDateTimeBestEffort(time_string [, time_zone])Argumentstime_string \u2014 String containing a date and time to convert. String.time_zone \u2014 Time zone. The function parses time_string according to the time zone. String.Supported non-standard formatsA string containing 9..10 digit unix timestamp.A string with a date and a time component: YYYYMMDDhhmmss, DD/MM/YYYY hh:mm:ss, DD-MM-YY hh:mm, YYYY-MM-DD hh:mm:ss, etc.A string with a date, but no time component: YYYY, YYYYMM, YYYY*MM, DD/MM/YYYY, DD-MM-YY etc.A string with a day and time: DD, DD hh, DD hh:mm. In this case MM is substituted by 01.A string that includes the date and time along with time zone offset information: YYYY-MM-DD hh:mm:ss \u00b1h:mm, etc. For example, 2020-12-12 17:36:00 -5:00.A syslog timestamp: Mmm dd hh:mm:ss. For example, Jun  9 14:20:32.For all of the formats with separator the function parses months names expressed by their full name or by the first three letters of a month name. Examples: 24/DEC/18, 24-Dec-18, 01-September-2018.\nIf the year is not specified, it is considered to be equal to the current year. If the resulting DateTime happen to be in the future (even by a second after the current moment), then the current year is substituted by the previous year.Returned valuetime_string converted to the DateTime data type.\nExamples: SELECT parseDateTimeBestEffort('23/10/2020 12:12:57')AS parseDateTimeBestEffort;SELECT parseDateTimeBestEffort('Sat, 18 Aug 2018 07:22:16 GMT', 'Asia/Istanbul')AS parseDateTimeBestEffort;SELECT parseDateTimeBestEffort('1284101485')AS parseDateTimeBestEffort;SELECT parseDateTimeBestEffort('2018-10-23 10:12:12')AS parseDateTimeBestEffort;SELECT toYear(now()) as year, parseDateTimeBestEffort('10 20:19');WITH    now() AS ts_now,    formatDateTime(ts_around, '%b %e %T') AS syslog_argSELECT    ts_now,    syslog_arg,    parseDateTimeBestEffort(syslog_arg)FROM (SELECT arrayJoin([ts_now - 30, ts_now + 30]) AS ts_around);\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["parseDateTimeBestEffortUS"], "Feature": ["parseDateTimeBestEffortUS"], "Description": ["parseDateTimeBestEffortUS", "This function behaves like parseDateTimeBestEffort for ISO date formats, e.g. YYYY-MM-DD hh:mm:ss, and other date formats where the month and date components can be unambiguously extracted, e.g. YYYYMMDDhhmmss, YYYY-MM, DD hh, or YYYY-MM-DD hh:mm:ss \u00b1h:mm. If the month and the date components cannot be unambiguously extracted, e.g. MM/DD/YYYY, MM-DD-YYYY, or MM-DD-YY, it prefers the US date format instead of DD/MM/YYYY, DD-MM-YYYY, or DD-MM-YY. As an exception from the latter, if the month is bigger than 12 and smaller or equal than 31, this function falls back to the behavior of parseDateTimeBestEffort, e.g. 15/08/2020 is parsed as 2020-08-15."], "Examples": [], "Category": ["Type Conversion Functions"], "index": 73, "vector_txt": "73:Feature: parseDateTimeBestEffortUS\nDescription: parseDateTimeBestEffortUSThis function behaves like parseDateTimeBestEffort for ISO date formats, e.g. YYYY-MM-DD hh:mm:ss, and other date formats where the month and date components can be unambiguously extracted, e.g. YYYYMMDDhhmmss, YYYY-MM, DD hh, or YYYY-MM-DD hh:mm:ss \u00b1h:mm. If the month and the date components cannot be unambiguously extracted, e.g. MM/DD/YYYY, MM-DD-YYYY, or MM-DD-YY, it prefers the US date format instead of DD/MM/YYYY, DD-MM-YYYY, or DD-MM-YY. As an exception from the latter, if the month is bigger than 12 and smaller or equal than 31, this function falls back to the behavior of parseDateTimeBestEffort, e.g. 15/08/2020 is parsed as 2020-08-15.\nExamples: \nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["parseDateTimeBestEffortOrNull"], "Feature": ["parseDateTimeBestEffortOrNull"], "Description": ["parseDateTimeBestEffortOrNull"], "Examples": [], "Category": ["Type Conversion Functions"], "index": 74, "vector_txt": "74:Feature: parseDateTimeBestEffortOrNull\nDescription: parseDateTimeBestEffortOrNull\nExamples: \nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["parseDateTime32BestEffortOrNull"], "Feature": ["parseDateTime32BestEffortOrNull"], "Description": ["parseDateTime32BestEffortOrNull", "Same as for parseDateTimeBestEffort except that it returns NULL when it encounters a date format that cannot be processed."], "Examples": [], "Category": ["Type Conversion Functions"], "index": 75, "vector_txt": "75:Feature: parseDateTime32BestEffortOrNull\nDescription: parseDateTime32BestEffortOrNullSame as for parseDateTimeBestEffort except that it returns NULL when it encounters a date format that cannot be processed.\nExamples: \nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["parseDateTimeBestEffortOrZero"], "Feature": ["parseDateTimeBestEffortOrZero"], "Description": ["parseDateTimeBestEffortOrZero"], "Examples": [], "Category": ["Type Conversion Functions"], "index": 76, "vector_txt": "76:Feature: parseDateTimeBestEffortOrZero\nDescription: parseDateTimeBestEffortOrZero\nExamples: \nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayCumSum([func,] arr1, ...)"], "Feature": ["arrayCumSum(arr)"], "Description": ["arrayCumSum([func,] arr1, ...)", "Returns an array of the partial (running) sums of the elements in the source array arr1. If func is specified, then the sum is computed from applying func to arr1, arr2, ..., arrN, i.e. func(arr1[i], ..., arrN[i]).", "Syntax", "arrayCumSum(arr)", "Arguments", "arr \u2014 Array of numeric values.", "Returned value", "Returns an array of the partial sums of the elements in the source array. UInt*, Int*, Float*."], "Examples": ["SELECT arrayCumSum([1, 1, 1, 1]) AS res"], "Category": ["Arrays Functions"], "index": 77, "vector_txt": "77:Feature: arrayCumSum(arr)\nDescription: arrayCumSum([func,] arr1, ...)Returns an array of the partial (running) sums of the elements in the source array arr1. If func is specified, then the sum is computed from applying func to arr1, arr2, ..., arrN, i.e. func(arr1[i], ..., arrN[i]).SyntaxarrayCumSum(arr)Argumentsarr \u2014 Array of numeric values.Returned valueReturns an array of the partial sums of the elements in the source array. UInt*, Int*, Float*.\nExamples: SELECT arrayCumSum([1, 1, 1, 1]) AS res\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["parseDateTime32BestEffortOrZero"], "Feature": ["parseDateTime32BestEffortOrZero"], "Description": ["parseDateTime32BestEffortOrZero", "Same as for parseDateTimeBestEffort except that it returns zero date or zero date time when it encounters a date format that cannot be processed."], "Examples": [], "Category": ["Type Conversion Functions"], "index": 78, "vector_txt": "78:Feature: parseDateTime32BestEffortOrZero\nDescription: parseDateTime32BestEffortOrZeroSame as for parseDateTimeBestEffort except that it returns zero date or zero date time when it encounters a date format that cannot be processed.\nExamples: \nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["parseDateTimeBestEffortUSOrNull"], "Feature": ["parseDateTimeBestEffortUSOrNull"], "Description": ["parseDateTimeBestEffortUSOrNull", "Same as parseDateTimeBestEffortUS function except that it returns NULL when it encounters a date format that cannot be processed."], "Examples": [], "Category": ["Type Conversion Functions"], "index": 79, "vector_txt": "79:Feature: parseDateTimeBestEffortUSOrNull\nDescription: parseDateTimeBestEffortUSOrNullSame as parseDateTimeBestEffortUS function except that it returns NULL when it encounters a date format that cannot be processed.\nExamples: \nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["parseDateTimeBestEffortUSOrZero"], "Feature": ["parseDateTimeBestEffortUSOrZero"], "Description": ["parseDateTimeBestEffortUSOrZero", "Same as parseDateTimeBestEffortUS function except that it returns zero date (1970-01-01) or zero date with time (1970-01-01 00:00:00) when it encounters a date format that cannot be processed."], "Examples": [], "Category": ["Type Conversion Functions"], "index": 80, "vector_txt": "80:Feature: parseDateTimeBestEffortUSOrZero\nDescription: parseDateTimeBestEffortUSOrZeroSame as parseDateTimeBestEffortUS function except that it returns zero date (1970-01-01) or zero date with time (1970-01-01 00:00:00) when it encounters a date format that cannot be processed.\nExamples: \nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["parseDateTime64BestEffort"], "Feature": ["parseDateTime64BestEffort(time_string [, precision [, time_zone]])"], "Description": ["parseDateTime64BestEffort", "Same as parseDateTimeBestEffort function but also parse milliseconds and microseconds and returns DateTime data type.", "Syntax", "parseDateTime64BestEffort(time_string [, precision [, time_zone]])", "Arguments", "time_string \u2014 String containing a date or date with time to convert. String.precision \u2014 Required precision. 3 \u2014 for milliseconds, 6 \u2014 for microseconds. Default \u2014 3. Optional. UInt8.time_zone \u2014 Timezone. The function parses time_string according to the timezone. Optional. String.", "Returned value", "time_string converted to the DateTime data type."], "Examples": ["SELECT parseDateTime64BestEffort('2021-01-01') AS a, toTypeName(a) AS tUNION ALLSELECT parseDateTime64BestEffort('2021-01-01 01:01:00.12346') AS a, toTypeName(a) AS tUNION ALLSELECT parseDateTime64BestEffort('2021-01-01 01:01:00.12346',6) AS a, toTypeName(a) AS tUNION ALLSELECT parseDateTime64BestEffort('2021-01-01 01:01:00.12346',3,'Asia/Istanbul') AS a, toTypeName(a) AS tFORMAT PrettyCompactMonoBlock;"], "Category": ["Type Conversion Functions"], "index": 81, "vector_txt": "81:Feature: parseDateTime64BestEffort(time_string [, precision [, time_zone]])\nDescription: parseDateTime64BestEffortSame as parseDateTimeBestEffort function but also parse milliseconds and microseconds and returns DateTime data type.SyntaxparseDateTime64BestEffort(time_string [, precision [, time_zone]])Argumentstime_string \u2014 String containing a date or date with time to convert. String.precision \u2014 Required precision. 3 \u2014 for milliseconds, 6 \u2014 for microseconds. Default \u2014 3. Optional. UInt8.time_zone \u2014 Timezone. The function parses time_string according to the timezone. Optional. String.Returned valuetime_string converted to the DateTime data type.\nExamples: SELECT parseDateTime64BestEffort('2021-01-01') AS a, toTypeName(a) AS tUNION ALLSELECT parseDateTime64BestEffort('2021-01-01 01:01:00.12346') AS a, toTypeName(a) AS tUNION ALLSELECT parseDateTime64BestEffort('2021-01-01 01:01:00.12346',6) AS a, toTypeName(a) AS tUNION ALLSELECT parseDateTime64BestEffort('2021-01-01 01:01:00.12346',3,'Asia/Istanbul') AS a, toTypeName(a) AS tFORMAT PrettyCompactMonoBlock;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["parseDateTime64BestEffortUS"], "Feature": ["parseDateTime64BestEffortUS"], "Description": ["parseDateTime64BestEffortUS", "Same as for parseDateTime64BestEffort, except that this function prefers US date format (MM/DD/YYYY etc.) in case of ambiguity."], "Examples": [], "Category": ["Type Conversion Functions"], "index": 82, "vector_txt": "82:Feature: parseDateTime64BestEffortUS\nDescription: parseDateTime64BestEffortUSSame as for parseDateTime64BestEffort, except that this function prefers US date format (MM/DD/YYYY etc.) in case of ambiguity.\nExamples: \nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["parseDateTime64BestEffortOrNull"], "Feature": ["parseDateTime64BestEffortOrNull"], "Description": ["parseDateTime64BestEffortOrNull", "Same as for parseDateTime64BestEffort except that it returns NULL when it encounters a date format that cannot be processed."], "Examples": [], "Category": ["Type Conversion Functions"], "index": 83, "vector_txt": "83:Feature: parseDateTime64BestEffortOrNull\nDescription: parseDateTime64BestEffortOrNullSame as for parseDateTime64BestEffort except that it returns NULL when it encounters a date format that cannot be processed.\nExamples: \nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["parseDateTime64BestEffortOrZero"], "Feature": ["parseDateTime64BestEffortOrZero"], "Description": ["parseDateTime64BestEffortOrZero", "Same as for parseDateTime64BestEffort except that it returns zero date or zero date time when it encounters a date format that cannot be processed."], "Examples": [], "Category": ["Type Conversion Functions"], "index": 84, "vector_txt": "84:Feature: parseDateTime64BestEffortOrZero\nDescription: parseDateTime64BestEffortOrZeroSame as for parseDateTime64BestEffort except that it returns zero date or zero date time when it encounters a date format that cannot be processed.\nExamples: \nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["parseDateTime64BestEffortUSOrNull"], "Feature": ["parseDateTime64BestEffortUSOrNull"], "Description": ["parseDateTime64BestEffortUSOrNull", "Same as for parseDateTime64BestEffort, except that this function prefers US date format (MM/DD/YYYY etc.) in case of ambiguity and returns NULL when it encounters a date format that cannot be processed."], "Examples": [], "Category": ["Type Conversion Functions"], "index": 85, "vector_txt": "85:Feature: parseDateTime64BestEffortUSOrNull\nDescription: parseDateTime64BestEffortUSOrNullSame as for parseDateTime64BestEffort, except that this function prefers US date format (MM/DD/YYYY etc.) in case of ambiguity and returns NULL when it encounters a date format that cannot be processed.\nExamples: \nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["parseDateTime64BestEffortUSOrZero"], "Feature": ["parseDateTime64BestEffortUSOrZero"], "Description": ["parseDateTime64BestEffortUSOrZero", "Same as for parseDateTime64BestEffort, except that this function prefers US date format (MM/DD/YYYY etc.) in case of ambiguity and returns zero date or zero date time when it encounters a date format that cannot be processed."], "Examples": [], "Category": ["Type Conversion Functions"], "index": 86, "vector_txt": "86:Feature: parseDateTime64BestEffortUSOrZero\nDescription: parseDateTime64BestEffortUSOrZeroSame as for parseDateTime64BestEffort, except that this function prefers US date format (MM/DD/YYYY etc.) in case of ambiguity and returns zero date or zero date time when it encounters a date format that cannot be processed.\nExamples: \nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toLowCardinality"], "Feature": ["toLowCardinality(expr)"], "Description": ["toLowCardinality", "Converts input parameter to the LowCardinality version of same data type.", "To convert data from the LowCardinality data type use the CAST function. For example, CAST(x as String).", "Syntax", "toLowCardinality(expr)", "Arguments", "expr \u2014 Expression resulting in one of the supported data types.", "Returned values", "Result of expr. LowCardinality of the type of expr."], "Examples": ["SELECT toLowCardinality('1');"], "Category": ["Type Conversion Functions"], "index": 87, "vector_txt": "87:Feature: toLowCardinality(expr)\nDescription: toLowCardinalityConverts input parameter to the LowCardinality version of same data type.To convert data from the LowCardinality data type use the CAST function. For example, CAST(x as String).SyntaxtoLowCardinality(expr)Argumentsexpr \u2014 Expression resulting in one of the supported data types.Returned valuesResult of expr. LowCardinality of the type of expr.\nExamples: SELECT toLowCardinality('1');\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayCumSumNonNegative([func,] arr1, ...)"], "Feature": ["arrayCumSumNonNegative(arr)"], "Description": ["arrayCumSumNonNegative([func,] arr1, ...)", "Same as arrayCumSum, returns an array of the partial (running) sums of the elements in the source array. If func is specified, then the sum is computed from applying func to arr1, arr2, ..., arrN, i.e. func(arr1[i], ..., arrN[i]). Unlike arrayCumSum, if the current running sum is smaller than 0, it is replaced by 0.", "Syntax", "arrayCumSumNonNegative(arr)", "Arguments", "arr \u2014 Array of numeric values.", "Returned value", "Returns an array of non-negative partial sums of elements in the source array. UInt*, Int*, Float*.", "SELECT arrayCumSumNonNegative([1, 1, -4, 1]) AS res", "\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 [1,2,0,1] \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "Note that the arraySumNonNegative is a higher-order function. You can pass a lambda function to it as the first argument."], "Examples": ["arrayCumSumNonNegative(arr)", "SELECT arrayCumSumNonNegative([1, 1, -4, 1]) AS res"], "Category": ["Arrays Functions"], "index": 88, "vector_txt": "88:Feature: arrayCumSumNonNegative(arr)\nDescription: arrayCumSumNonNegative([func,] arr1, ...)Same as arrayCumSum, returns an array of the partial (running) sums of the elements in the source array. If func is specified, then the sum is computed from applying func to arr1, arr2, ..., arrN, i.e. func(arr1[i], ..., arrN[i]). Unlike arrayCumSum, if the current running sum is smaller than 0, it is replaced by 0.SyntaxarrayCumSumNonNegative(arr)Argumentsarr \u2014 Array of numeric values.Returned valueReturns an array of non-negative partial sums of elements in the source array. UInt*, Int*, Float*.SELECT arrayCumSumNonNegative([1, 1, -4, 1]) AS res\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 [1,2,0,1] \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518Note that the arraySumNonNegative is a higher-order function. You can pass a lambda function to it as the first argument.\nExamples: arrayCumSumNonNegative(arr)SELECT arrayCumSumNonNegative([1, 1, -4, 1]) AS res\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUnixTimestamp64Milli"], "Feature": ["toUnixTimestamp64Milli(value)"], "Description": ["toUnixTimestamp64Milli", "Converts a DateTime64 to a Int64 value with fixed millisecond precision. The input value is scaled up or down appropriately depending on its precision.", "NoteThe output value is a timestamp in UTC, not in the timezone of DateTime64.", "Syntax", "toUnixTimestamp64Milli(value)", "Arguments", "value \u2014 DateTime64 value with any precision. DateTime64.", "Returned value", "value converted to the Int64 data type. Int64."], "Examples": ["WITH toDateTime64('2009-02-13 23:31:31.011', 3, 'UTC') AS dt64SELECT toUnixTimestamp64Milli(dt64);"], "Category": ["Type Conversion Functions"], "index": 89, "vector_txt": "89:Feature: toUnixTimestamp64Milli(value)\nDescription: toUnixTimestamp64MilliConverts a DateTime64 to a Int64 value with fixed millisecond precision. The input value is scaled up or down appropriately depending on its precision.NoteThe output value is a timestamp in UTC, not in the timezone of DateTime64.SyntaxtoUnixTimestamp64Milli(value)Argumentsvalue \u2014 DateTime64 value with any precision. DateTime64.Returned valuevalue converted to the Int64 data type. Int64.\nExamples: WITH toDateTime64('2009-02-13 23:31:31.011', 3, 'UTC') AS dt64SELECT toUnixTimestamp64Milli(dt64);\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUnixTimestamp64Micro"], "Feature": ["toUnixTimestamp64Micro(value)"], "Description": ["toUnixTimestamp64Micro", "Converts a DateTime64 to a Int64 value with fixed microsecond precision. The input value is scaled up or down appropriately depending on its precision.", "NoteThe output value is a timestamp in UTC, not in the timezone of DateTime64.", "Syntax", "toUnixTimestamp64Micro(value)", "Arguments", "value \u2014 DateTime64 value with any precision. DateTime64.", "Returned value", "value converted to the Int64 data type. Int64."], "Examples": ["WITH toDateTime64('1970-01-15 06:56:07.891011', 6, 'UTC') AS dt64SELECT toUnixTimestamp64Micro(dt64);"], "Category": ["Type Conversion Functions"], "index": 90, "vector_txt": "90:Feature: toUnixTimestamp64Micro(value)\nDescription: toUnixTimestamp64MicroConverts a DateTime64 to a Int64 value with fixed microsecond precision. The input value is scaled up or down appropriately depending on its precision.NoteThe output value is a timestamp in UTC, not in the timezone of DateTime64.SyntaxtoUnixTimestamp64Micro(value)Argumentsvalue \u2014 DateTime64 value with any precision. DateTime64.Returned valuevalue converted to the Int64 data type. Int64.\nExamples: WITH toDateTime64('1970-01-15 06:56:07.891011', 6, 'UTC') AS dt64SELECT toUnixTimestamp64Micro(dt64);\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUnixTimestamp64Nano"], "Feature": ["toUnixTimestamp64Nano(value)"], "Description": ["toUnixTimestamp64Nano", "Converts a DateTime64 to a Int64 value with fixed nanosecond precision. The input value is scaled up or down appropriately depending on its precision.", "NoteThe output value is a timestamp in UTC, not in the timezone of DateTime64.", "Syntax", "toUnixTimestamp64Nano(value)", "Arguments", "value \u2014 DateTime64 value with any precision. DateTime64.", "Returned value", "value converted to the Int64 data type. Int64."], "Examples": ["WITH toDateTime64('1970-01-01 00:20:34.567891011', 9, 'UTC') AS dt64SELECT toUnixTimestamp64Nano(dt64);"], "Category": ["Type Conversion Functions"], "index": 91, "vector_txt": "91:Feature: toUnixTimestamp64Nano(value)\nDescription: toUnixTimestamp64NanoConverts a DateTime64 to a Int64 value with fixed nanosecond precision. The input value is scaled up or down appropriately depending on its precision.NoteThe output value is a timestamp in UTC, not in the timezone of DateTime64.SyntaxtoUnixTimestamp64Nano(value)Argumentsvalue \u2014 DateTime64 value with any precision. DateTime64.Returned valuevalue converted to the Int64 data type. Int64.\nExamples: WITH toDateTime64('1970-01-01 00:20:34.567891011', 9, 'UTC') AS dt64SELECT toUnixTimestamp64Nano(dt64);\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["fromUnixTimestamp64Milli"], "Feature": ["fromUnixTimestamp64Milli(value[, timezone])"], "Description": ["fromUnixTimestamp64Milli", "Converts an Int64 to a DateTime64 value with fixed millisecond precision and optional timezone. The input value is scaled up or down appropriately depending on its precision.", "NotePlease note that input value is treated as a UTC timestamp, not timestamp at the given (or implicit) timezone.", "Syntax", "fromUnixTimestamp64Milli(value[, timezone])", "Arguments", "value \u2014 value with any precision. Int64.timezone \u2014 (optional) timezone name of the result. String.", "Returned value", "value converted to DateTime64 with precision 3. DateTime64."], "Examples": ["WITH CAST(1234567891011, 'Int64') AS i64SELECT    fromUnixTimestamp64Milli(i64, 'UTC') AS x,    toTypeName(x);"], "Category": ["Type Conversion Functions"], "index": 92, "vector_txt": "92:Feature: fromUnixTimestamp64Milli(value[, timezone])\nDescription: fromUnixTimestamp64MilliConverts an Int64 to a DateTime64 value with fixed millisecond precision and optional timezone. The input value is scaled up or down appropriately depending on its precision.NotePlease note that input value is treated as a UTC timestamp, not timestamp at the given (or implicit) timezone.SyntaxfromUnixTimestamp64Milli(value[, timezone])Argumentsvalue \u2014 value with any precision. Int64.timezone \u2014 (optional) timezone name of the result. String.Returned valuevalue converted to DateTime64 with precision 3. DateTime64.\nExamples: WITH CAST(1234567891011, 'Int64') AS i64SELECT    fromUnixTimestamp64Milli(i64, 'UTC') AS x,    toTypeName(x);\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["fromUnixTimestamp64Micro"], "Feature": ["fromUnixTimestamp64Micro(value[, timezone])"], "Description": ["fromUnixTimestamp64Micro", "Converts an Int64 to a DateTime64 value with fixed microsecond precision and optional timezone. The input value is scaled up or down appropriately depending on its precision.", "NotePlease note that input value is treated as a UTC timestamp, not timestamp at the given (or implicit) timezone.", "Syntax", "fromUnixTimestamp64Micro(value[, timezone])", "Arguments", "value \u2014 value with any precision. Int64.timezone \u2014 (optional) timezone name of the result. String.", "Returned value", "value converted to DateTime64 with precision 6. DateTime64."], "Examples": ["WITH CAST(1234567891011, 'Int64') AS i64SELECT    fromUnixTimestamp64Micro(i64, 'UTC') AS x,    toTypeName(x);"], "Category": ["Type Conversion Functions"], "index": 93, "vector_txt": "93:Feature: fromUnixTimestamp64Micro(value[, timezone])\nDescription: fromUnixTimestamp64MicroConverts an Int64 to a DateTime64 value with fixed microsecond precision and optional timezone. The input value is scaled up or down appropriately depending on its precision.NotePlease note that input value is treated as a UTC timestamp, not timestamp at the given (or implicit) timezone.SyntaxfromUnixTimestamp64Micro(value[, timezone])Argumentsvalue \u2014 value with any precision. Int64.timezone \u2014 (optional) timezone name of the result. String.Returned valuevalue converted to DateTime64 with precision 6. DateTime64.\nExamples: WITH CAST(1234567891011, 'Int64') AS i64SELECT    fromUnixTimestamp64Micro(i64, 'UTC') AS x,    toTypeName(x);\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["fromUnixTimestamp64Nano"], "Feature": ["fromUnixTimestamp64Nano(value[, timezone])"], "Description": ["fromUnixTimestamp64Nano", "Converts an Int64 to a DateTime64 value with fixed nanosecond precision and optional timezone. The input value is scaled up or down appropriately depending on its precision.", "NotePlease note that input value is treated as a UTC timestamp, not timestamp at the given (or implicit) timezone.", "Syntax", "fromUnixTimestamp64Nano(value[, timezone])", "Arguments", "value \u2014 value with any precision. Int64.timezone \u2014 (optional) timezone name of the result. String.", "Returned value", "value converted to DateTime64 with precision 9. DateTime64."], "Examples": ["WITH CAST(1234567891011, 'Int64') AS i64SELECT    fromUnixTimestamp64Nano(i64, 'UTC') AS x,    toTypeName(x);"], "Category": ["Type Conversion Functions"], "index": 94, "vector_txt": "94:Feature: fromUnixTimestamp64Nano(value[, timezone])\nDescription: fromUnixTimestamp64NanoConverts an Int64 to a DateTime64 value with fixed nanosecond precision and optional timezone. The input value is scaled up or down appropriately depending on its precision.NotePlease note that input value is treated as a UTC timestamp, not timestamp at the given (or implicit) timezone.SyntaxfromUnixTimestamp64Nano(value[, timezone])Argumentsvalue \u2014 value with any precision. Int64.timezone \u2014 (optional) timezone name of the result. String.Returned valuevalue converted to DateTime64 with precision 9. DateTime64.\nExamples: WITH CAST(1234567891011, 'Int64') AS i64SELECT    fromUnixTimestamp64Nano(i64, 'UTC') AS x,    toTypeName(x);\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["formatRow"], "Feature": ["formatRow(format, x, y, ...)"], "Description": ["formatRow", "Converts arbitrary expressions into a string via given format.", "Syntax", "formatRow(format, x, y, ...)", "Arguments", "format \u2014 Text format. For example, CSV, TSV.x,y, ... \u2014 Expressions.", "Returned value", "A formatted string. (for text formats it's usually terminated with the new line character)."], "Examples": ["SELECT formatRow('CSV', number, 'good')FROM numbers(3);", "SELECT formatRow('CustomSeparated', number, 'good')FROM numbers(3)SETTINGS format_custom_result_before_delimiter='<prefix>\\n', format_custom_result_after_delimiter='<suffix>'"], "Category": ["Type Conversion Functions"], "index": 95, "vector_txt": "95:Feature: formatRow(format, x, y, ...)\nDescription: formatRowConverts arbitrary expressions into a string via given format.SyntaxformatRow(format, x, y, ...)Argumentsformat \u2014 Text format. For example, CSV, TSV.x,y, ... \u2014 Expressions.Returned valueA formatted string. (for text formats it's usually terminated with the new line character).\nExamples: SELECT formatRow('CSV', number, 'good')FROM numbers(3);SELECT formatRow('CustomSeparated', number, 'good')FROM numbers(3)SETTINGS format_custom_result_before_delimiter='<prefix>\\n', format_custom_result_after_delimiter='<suffix>'\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["formatRowNoNewline"], "Feature": ["formatRowNoNewline(format, x, y, ...)"], "Description": ["formatRowNoNewline", "Converts arbitrary expressions into a string via given format. Differs from formatRow in that this function trims the last \\n if any.", "Syntax", "formatRowNoNewline(format, x, y, ...)", "Arguments", "format \u2014 Text format. For example, CSV, TSV.x,y, ... \u2014 Expressions.", "Returned value", "A formatted string."], "Examples": ["SELECT formatRowNoNewline('CSV', number, 'good')FROM numbers(3);"], "Category": ["Type Conversion Functions"], "index": 96, "vector_txt": "96:Feature: formatRowNoNewline(format, x, y, ...)\nDescription: formatRowNoNewlineConverts arbitrary expressions into a string via given format. Differs from formatRow in that this function trims the last \\n if any.SyntaxformatRowNoNewline(format, x, y, ...)Argumentsformat \u2014 Text format. For example, CSV, TSV.x,y, ... \u2014 Expressions.Returned valueA formatted string.\nExamples: SELECT formatRowNoNewline('CSV', number, 'good')FROM numbers(3);\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/ulid-functions"], "Title": ["generateULID"], "Feature": ["generateULID([x])"], "Description": ["generateULID", "Generates the ULID.", "Syntax", "generateULID([x])", "Arguments", "x \u2014 Expression resulting in any of the supported data types. The resulting value is discarded, but the expression itself if used for bypassing common subexpression elimination if the function is called multiple times in one query. Optional parameter.", "Returned value", "The FixedString type value.", "Usage example", "SELECT generateULID()", "\u250c\u2500generateULID()\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 01GNB2S2FGN2P93QPXDNB4EN2R \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "Usage example if it is needed to generate multiple values in one row", "SELECT generateULID(1), generateULID(2)", "\u250c\u2500generateULID(1)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500generateULID(2)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 01GNB2SGG4RHKVNT9ZGA4FFMNP \u2502 01GNB2SGG4V0HMQVH4VBVPSSRB \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Examples": ["generateULID([x])", "SELECT generateULID()", "SELECT generateULID(1), generateULID(2)"], "Category": ["ULID Functions"], "index": 97, "vector_txt": "97:Feature: generateULID([x])\nDescription: generateULIDGenerates the ULID.SyntaxgenerateULID([x])Argumentsx \u2014 Expression resulting in any of the supported data types. The resulting value is discarded, but the expression itself if used for bypassing common subexpression elimination if the function is called multiple times in one query. Optional parameter.Returned valueThe FixedString type value.Usage exampleSELECT generateULID()\u250c\u2500generateULID()\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 01GNB2S2FGN2P93QPXDNB4EN2R \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518Usage example if it is needed to generate multiple values in one rowSELECT generateULID(1), generateULID(2)\u250c\u2500generateULID(1)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500generateULID(2)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 01GNB2SGG4RHKVNT9ZGA4FFMNP \u2502 01GNB2SGG4V0HMQVH4VBVPSSRB \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nExamples: generateULID([x])SELECT generateULID()SELECT generateULID(1), generateULID(2)\nCategory: ULID Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/ulid-functions"], "Title": ["ULIDStringToDateTime"], "Feature": ["ULIDStringToDateTime(ulid[, timezone])"], "Description": ["ULIDStringToDateTime", "This function extracts the timestamp from a ULID.", "Syntax", "ULIDStringToDateTime(ulid[, timezone])", "Arguments", "ulid \u2014 Input ULID. String or FixedString(26).timezone \u2014 Timezone name for the returned value (optional). String.", "Returned value", "Timestamp with milliseconds precision. DateTime64(3).", "Usage example", "SELECT ULIDStringToDateTime('01GNB2S2FGN2P93QPXDNB4EN2R')", "\u250c\u2500ULIDStringToDateTime('01GNB2S2FGN2P93QPXDNB4EN2R')\u2500\u2510\u2502                            2022-12-28 00:40:37.616 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Examples": ["ULIDStringToDateTime(ulid[, timezone])", "SELECT ULIDStringToDateTime('01GNB2S2FGN2P93QPXDNB4EN2R')"], "Category": ["ULID Functions"], "index": 98, "vector_txt": "98:Feature: ULIDStringToDateTime(ulid[, timezone])\nDescription: ULIDStringToDateTimeThis function extracts the timestamp from a ULID.SyntaxULIDStringToDateTime(ulid[, timezone])Argumentsulid \u2014 Input ULID. String or FixedString(26).timezone \u2014 Timezone name for the returned value (optional). String.Returned valueTimestamp with milliseconds precision. DateTime64(3).Usage exampleSELECT ULIDStringToDateTime('01GNB2S2FGN2P93QPXDNB4EN2R')\u250c\u2500ULIDStringToDateTime('01GNB2S2FGN2P93QPXDNB4EN2R')\u2500\u2510\u2502                            2022-12-28 00:40:37.616 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nExamples: ULIDStringToDateTime(ulid[, timezone])SELECT ULIDStringToDateTime('01GNB2S2FGN2P93QPXDNB4EN2R')\nCategory: ULID Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayProduct"], "Feature": ["arrayProduct(arr)"], "Description": ["arrayProduct", "Multiplies elements of an array.", "Syntax", "arrayProduct(arr)", "Arguments", "arr \u2014 Array of numeric values.", "Returned value", "A product of array's elements. Float64."], "Examples": ["SELECT arrayProduct([1,2,3,4,5,6]) as res;", "SELECT arrayProduct([toDecimal64(1,8), toDecimal64(2,8), toDecimal64(3,8)]) as res, toTypeName(res);"], "Category": ["Arrays Functions"], "index": 99, "vector_txt": "99:Feature: arrayProduct(arr)\nDescription: arrayProductMultiplies elements of an array.SyntaxarrayProduct(arr)Argumentsarr \u2014 Array of numeric values.Returned valueA product of array's elements. Float64.\nExamples: SELECT arrayProduct([1,2,3,4,5,6]) as res;SELECT arrayProduct([toDecimal64(1,8), toDecimal64(2,8), toDecimal64(3,8)]) as res, toTypeName(res);\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/ulid-functions"], "Title": ["See Also"], "Feature": ["See Also"], "Description": ["See Also", "UUID"], "Examples": [], "Category": ["ULID Functions"], "index": 100, "vector_txt": "100:Feature: See Also\nDescription: See AlsoUUID\nExamples: \nCategory: ULID Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/url-functions"], "Title": ["Functions that Extract Parts of a URL"], "Feature": ["domain(url)"], "Description": ["Functions that Extract Parts of a URL", "If the relevant part isn\u2019t present in a URL, an empty string is returned.", "protocol", "Extracts the protocol from a URL.", "Examples of typical returned values: http, https, ftp, mailto, tel, magnet.", "domain", "Extracts the hostname from a URL.", "Syntax", "domain(url)", "Arguments", "url \u2014 URL. String.", "The URL can be specified with or without a protocol. Examples:", "svn+ssh://some.svn-hosting.com:80/repo/trunksome.svn-hosting.com:80/repo/trunkhttps://clickhouse.com/time/", "For these examples, the domain function returns the following results:", "some.svn-hosting.comsome.svn-hosting.comclickhouse.com", "Returned values", "Host name if the input string can be parsed as a URL, otherwise an empty string. String."], "Examples": ["SELECT domain('svn+ssh://some.svn-hosting.com:80/repo/trunk');", "domainRFC(url)", "SELECT    domain('http://user:password@example.com:8080/path?query=value#fragment'),    domainRFC('http://user:password@example.com:8080/path?query=value#fragment');", "domainWithoutWWW(url)", "SELECT domainWithoutWWW('http://paul@www.example.com:80/');", "domainWithoutWWWRFC(url)", "SELECT    domainWithoutWWW('http://user:password@www.example.com:8080/path?query=value#fragment'),    domainWithoutWWWRFC('http://user:password@www.example.com:8080/path?query=value#fragment');", "topLevelDomain(url)", "SELECT topLevelDomain('svn+ssh://www.some.svn-hosting.com:80/repo/trunk');", "topLevelDomainRFC(url)", "SELECT topLevelDomain('http://foo:foo%41bar@foo.com'), topLevelDomainRFC('http://foo:foo%41bar@foo.com');", "firstSignificantSubdomain(url)", "SELECT firstSignificantSubdomain('http://www.example.com/a/b/c?a=b')", "firstSignificantSubdomainRFC(url)", "SELECT    firstSignificantSubdomain('http://user:password@example.com:8080/path?query=value#fragment'),    firstSignificantSubdomainRFC('http://user:password@example.com:8080/path?query=value#fragment');", "cutToFirstSignificantSubdomain(url)", "SELECT    cutToFirstSignificantSubdomain('https://news.clickhouse.com.tr/'),    cutToFirstSignificantSubdomain('www.tr'),    cutToFirstSignificantSubdomain('tr');", "cutToFirstSignificantSubdomainRFC(url)", "SELECT    cutToFirstSignificantSubdomain('http://user:password@example.com:8080'),    cutToFirstSignificantSubdomainRFC('http://user:password@example.com:8080');", "cutToFirstSignificantSubdomainWithWWW(url)", "SELECT    cutToFirstSignificantSubdomainWithWWW('https://news.clickhouse.com.tr/'),    cutToFirstSignificantSubdomainWithWWW('www.tr'),    cutToFirstSignificantSubdomainWithWWW('tr');", "cutToFirstSignificantSubdomainWithWWW(url)", "SELECT    cutToFirstSignificantSubdomainWithWWW('http:%2F%2Fwwwww.nova@mail.ru/economicheskiy'),    cutToFirstSignificantSubdomainWithWWWRFC('http:%2F%2Fwwwww.nova@mail.ru/economicheskiy');", "cutToFirstSignificantSubdomain(url, tld)", "SELECT cutToFirstSignificantSubdomainCustom('bar.foo.there-is-no-such-domain', 'public_suffix_list');", "cutToFirstSignificantSubdomainRFC(url, tld)", "cutToFirstSignificantSubdomainCustomWithWWW(url, tld)", "SELECT cutToFirstSignificantSubdomainCustomWithWWW('www.foo', 'public_suffix_list');", "cutToFirstSignificantSubdomainCustomWithWWWRFC(url, tld)", "firstSignificantSubdomainCustom(url, tld)", "SELECT firstSignificantSubdomainCustom('bar.foo.there-is-no-such-domain', 'public_suffix_list');", "firstSignificantSubdomainCustomRFC(url, tld)", "port(url [, default_port = 0])", "SELECT port('http://paul@www.example.com:80/');", "portRFC(url [, default_port = 0])", "SELECT    port('http://user:password@example.com:8080'),    portRFC('http://user:password@example.com:8080');", "protocol(url)", "SELECT protocol('https://clickhouse.com/');", "SELECT encodeURLComponent('http://127.0.0.1:8123/?query=SELECT 1;') AS EncodedURL;", "SELECT decodeURLComponent('http://127.0.0.1:8123/?query=SELECT%201%3B') AS DecodedURL;", "SELECT encodeURLFormComponent('http://127.0.0.1:8123/?query=SELECT 1 2+3') AS EncodedURL;", "SELECT decodeURLFormComponent('http://127.0.0.1:8123/?query=SELECT%201+2%2B3') AS DecodedURL;", "netloc(url)", "SELECT netloc('http://paul@www.example.com:80/');"], "Category": ["URLs Functions"], "index": 101, "vector_txt": "101:Feature: domain(url)\nDescription: Functions that Extract Parts of a URLIf the relevant part isn\u2019t present in a URL, an empty string is returned.protocolExtracts the protocol from a URL.Examples of typical returned values: http, https, ftp, mailto, tel, magnet.domainExtracts the hostname from a URL.Syntaxdomain(url)Argumentsurl \u2014 URL. String.The URL can be specified with or without a protocol. Examples:svn+ssh://some.svn-hosting.com:80/repo/trunksome.svn-hosting.com:80/repo/trunkhttps://clickhouse.com/time/For these examples, the domain function returns the following results:some.svn-hosting.comsome.svn-hosting.comclickhouse.comReturned valuesHost name if the input string can be parsed as a URL, otherwise an empty string. String.\nExamples: SELECT domain('svn+ssh://some.svn-hosting.com:80/repo/trunk');domainRFC(url)SELECT    domain('http://user:password@example.com:8080/path?query=value#fragment'),    domainRFC('http://user:password@example.com:8080/path?query=value#fragment');domainWithoutWWW(url)SELECT domainWithoutWWW('http://paul@www.example.com:80/');domainWithoutWWWRFC(url)SELECT    domainWithoutWWW('http://user:password@www.example.com:8080/path?query=value#fragment'),    domainWithoutWWWRFC('http://user:password@www.example.com:8080/path?query=value#fragment');topLevelDomain(url)SELECT topLevelDomain('svn+ssh://www.some.svn-hosting.com:80/repo/trunk');topLevelDomainRFC(url)SELECT topLevelDomain('http://foo:foo%41bar@foo.com'), topLevelDomainRFC('http://foo:foo%41bar@foo.com');firstSignificantSubdomain(url)SELECT firstSignificantSubdomain('http://www.example.com/a/b/c?a=b')firstSignificantSubdomainRFC(url)SELECT    firstSignificantSubdomain('http://user:password@example.com:8080/path?query=value#fragment'),    firstSignificantSubdomainRFC('http://user:password@example.com:8080/path?query=value#fragment');cutToFirstSignificantSubdomain(url)SELECT    cutToFirstSignificantSubdomain('https://news.clickhouse.com.tr/'),    cutToFirstSignificantSubdomain('www.tr'),    cutToFirstSignificantSubdomain('tr');cutToFirstSignificantSubdomainRFC(url)SELECT    cutToFirstSignificantSubdomain('http://user:password@example.com:8080'),    cutToFirstSignificantSubdomainRFC('http://user:password@example.com:8080');cutToFirstSignificantSubdomainWithWWW(url)SELECT    cutToFirstSignificantSubdomainWithWWW('https://news.clickhouse.com.tr/'),    cutToFirstSignificantSubdomainWithWWW('www.tr'),    cutToFirstSignificantSubdomainWithWWW('tr');cutToFirstSignificantSubdomainWithWWW(url)SELECT    cutToFirstSignificantSubdomainWithWWW('http:%2F%2Fwwwww.nova@mail.ru/economicheskiy'),    cutToFirstSignificantSubdomainWithWWWRFC('http:%2F%2Fwwwww.nova@mail.ru/economicheskiy');cutToFirstSignificantSubdomain(url, tld)SELECT cutToFirstSignificantSubdomainCustom('bar.foo.there-is-no-such-domain', 'public_suffix_list');cutToFirstSignificantSubdomainRFC(url, tld)cutToFirstSignificantSubdomainCustomWithWWW(url, tld)SELECT cutToFirstSignificantSubdomainCustomWithWWW('www.foo', 'public_suffix_list');cutToFirstSignificantSubdomainCustomWithWWWRFC(url, tld)firstSignificantSubdomainCustom(url, tld)SELECT firstSignificantSubdomainCustom('bar.foo.there-is-no-such-domain', 'public_suffix_list');firstSignificantSubdomainCustomRFC(url, tld)port(url [, default_port = 0])SELECT port('http://paul@www.example.com:80/');portRFC(url [, default_port = 0])SELECT    port('http://user:password@example.com:8080'),    portRFC('http://user:password@example.com:8080');protocol(url)SELECT protocol('https://clickhouse.com/');SELECT encodeURLComponent('http://127.0.0.1:8123/?query=SELECT 1;') AS EncodedURL;SELECT decodeURLComponent('http://127.0.0.1:8123/?query=SELECT%201%3B') AS DecodedURL;SELECT encodeURLFormComponent('http://127.0.0.1:8123/?query=SELECT 1 2+3') AS EncodedURL;SELECT decodeURLFormComponent('http://127.0.0.1:8123/?query=SELECT%201+2%2B3') AS DecodedURL;netloc(url)SELECT netloc('http://paul@www.example.com:80/');\nCategory: URLs Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/url-functions"], "Title": ["Functions that remove part of a URL"], "Feature": ["cutURLParameter(url, name)"], "Description": ["Functions that remove part of a URL", "If the URL does not have anything similar, the URL remains unchanged.", "cutWWW", "Removes leading www. (if present) from the URL\u2019s domain.", "cutQueryString", "Removes query string, including the question mark.", "cutFragment", "Removes the fragment identifier, including the number sign.", "cutQueryStringAndFragment", "Removes the query string and fragment identifier, including the question mark and number sign.", "cutURLParameter(url, name)", "Removes the name parameter from a URL, if present.\nThis function does not encode or decode characters in parameter names, e.g. Client ID and Client%20ID are treated as different parameter names.", "Syntax", "cutURLParameter(url, name)", "Arguments", "url \u2014 URL. String.name \u2014 name of URL parameter. String or Array of Strings.", "Returned value", "url with name URL parameter removed. String."], "Examples": ["SELECT    cutURLParameter('http://bigmir.net/?a=b&c=d&e=f#g', 'a') as url_without_a,    cutURLParameter('http://bigmir.net/?a=b&c=d&e=f#g', ['c', 'e']) as url_without_c_and_e;"], "Category": ["URLs Functions"], "index": 102, "vector_txt": "102:Feature: cutURLParameter(url, name)\nDescription: Functions that remove part of a URLIf the URL does not have anything similar, the URL remains unchanged.cutWWWRemoves leading www. (if present) from the URL\u2019s domain.cutQueryStringRemoves query string, including the question mark.cutFragmentRemoves the fragment identifier, including the number sign.cutQueryStringAndFragmentRemoves the query string and fragment identifier, including the question mark and number sign.cutURLParameter(url, name)Removes the name parameter from a URL, if present.\nThis function does not encode or decode characters in parameter names, e.g. Client ID and Client%20ID are treated as different parameter names.SyntaxcutURLParameter(url, name)Argumentsurl \u2014 URL. String.name \u2014 name of URL parameter. String or Array of Strings.Returned valueurl with name URL parameter removed. String.\nExamples: SELECT    cutURLParameter('http://bigmir.net/?a=b&c=d&e=f#g', 'a') as url_without_a,    cutURLParameter('http://bigmir.net/?a=b&c=d&e=f#g', ['c', 'e']) as url_without_c_and_e;\nCategory: URLs Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/uuid-functions"], "Title": ["generateUUIDv4"], "Feature": ["generateUUIDv4([expr])"], "Description": ["generateUUIDv4", "Generates a version 4 UUID.", "Syntax", "generateUUIDv4([expr])", "Arguments", "expr \u2014 An arbitrary expression used to bypass common subexpression elimination if the function is called multiple times in a query. The value of the expression has no effect on the returned UUID. Optional.", "Returned value", "A value of type UUIDv4."], "Examples": ["CREATE TABLE tab (uuid UUID) ENGINE = Memory;INSERT INTO tab SELECT generateUUIDv4();SELECT * FROM tab;", "SELECT generateUUIDv4(1), generateUUIDv4(2);\u250c\u2500generateUUIDv4(1)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500generateUUIDv4(2)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 2d49dc6e-ddce-4cd0-afb8-790956df54c1 \u2502 8abf8c13-7dea-4fdf-af3e-0e18767770e6 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Category": ["UUIDs Functions"], "index": 103, "vector_txt": "103:Feature: generateUUIDv4([expr])\nDescription: generateUUIDv4Generates a version 4 UUID.SyntaxgenerateUUIDv4([expr])Argumentsexpr \u2014 An arbitrary expression used to bypass common subexpression elimination if the function is called multiple times in a query. The value of the expression has no effect on the returned UUID. Optional.Returned valueA value of type UUIDv4.\nExamples: CREATE TABLE tab (uuid UUID) ENGINE = Memory;INSERT INTO tab SELECT generateUUIDv4();SELECT * FROM tab;SELECT generateUUIDv4(1), generateUUIDv4(2);\u250c\u2500generateUUIDv4(1)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500generateUUIDv4(2)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 2d49dc6e-ddce-4cd0-afb8-790956df54c1 \u2502 8abf8c13-7dea-4fdf-af3e-0e18767770e6 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nCategory: UUIDs Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/uuid-functions"], "Title": ["generateUUIDv7"], "Feature": ["generateUUIDv7([expr])"], "Description": ["generateUUIDv7", "Generates a version 7 UUID.", "The generated UUID contains the current Unix timestamp in milliseconds (48 bits), followed by version \"7\" (4 bits), a counter (42 bit) to distinguish UUIDs within a millisecond (including a variant field \"2\", 2 bit), and a random field (32 bits).\nFor any given timestamp (unix_ts_ms), the counter starts at a random value and is incremented by 1 for each new UUID until the timestamp changes.\nIn case the counter overflows, the timestamp field is incremented by 1 and the counter is reset to a random new start value.", "Function generateUUIDv7 guarantees that the counter field within a timestamp increments monotonically across all function invocations in concurrently running threads and queries.", " 0                   1                   2                   3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\u251c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u2524|                           unix_ts_ms                          |\u251c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u2524|          unix_ts_ms           |  ver  |   counter_high_bits   |\u251c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u2524|var|                   counter_low_bits                        |\u251c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u2524|                            rand_b                             |\u2514\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2518", "NoteAs of April 2024, version 7 UUIDs are in draft status and their layout may change in future.", "Syntax", "generateUUIDv7([expr])", "Arguments", "expr \u2014 An arbitrary expression used to bypass common subexpression elimination if the function is called multiple times in a query. The value of the expression has no effect on the returned UUID. Optional.", "Returned value", "A value of type UUIDv7."], "Examples": ["CREATE TABLE tab (uuid UUID) ENGINE = Memory;INSERT INTO tab SELECT generateUUIDv7();SELECT * FROM tab;", "SELECT generateUUIDv7(1), generateUUIDv7(2);\u250c\u2500generateUUIDv7(1)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500generateUUIDv7(2)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 018f05c9-4ab8-7b86-b64e-c9f03fbd45d1 \u2502 018f05c9-4ab8-7b86-b64e-c9f12efb7e16 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Category": ["UUIDs Functions"], "index": 104, "vector_txt": "104:Feature: generateUUIDv7([expr])\nDescription: generateUUIDv7Generates a version 7 UUID.The generated UUID contains the current Unix timestamp in milliseconds (48 bits), followed by version \"7\" (4 bits), a counter (42 bit) to distinguish UUIDs within a millisecond (including a variant field \"2\", 2 bit), and a random field (32 bits).\nFor any given timestamp (unix_ts_ms), the counter starts at a random value and is incremented by 1 for each new UUID until the timestamp changes.\nIn case the counter overflows, the timestamp field is incremented by 1 and the counter is reset to a random new start value.Function generateUUIDv7 guarantees that the counter field within a timestamp increments monotonically across all function invocations in concurrently running threads and queries. 0                   1                   2                   3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\u251c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u2524|                           unix_ts_ms                          |\u251c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u2524|          unix_ts_ms           |  ver  |   counter_high_bits   |\u251c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u2524|var|                   counter_low_bits                        |\u251c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u2524|                            rand_b                             |\u2514\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2518NoteAs of April 2024, version 7 UUIDs are in draft status and their layout may change in future.SyntaxgenerateUUIDv7([expr])Argumentsexpr \u2014 An arbitrary expression used to bypass common subexpression elimination if the function is called multiple times in a query. The value of the expression has no effect on the returned UUID. Optional.Returned valueA value of type UUIDv7.\nExamples: CREATE TABLE tab (uuid UUID) ENGINE = Memory;INSERT INTO tab SELECT generateUUIDv7();SELECT * FROM tab;SELECT generateUUIDv7(1), generateUUIDv7(2);\u250c\u2500generateUUIDv7(1)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500generateUUIDv7(2)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 018f05c9-4ab8-7b86-b64e-c9f03fbd45d1 \u2502 018f05c9-4ab8-7b86-b64e-c9f12efb7e16 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nCategory: UUIDs Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/uuid-functions"], "Title": ["empty"], "Feature": ["empty(UUID)"], "Description": ["empty", "Checks whether the input UUID is empty.", "Syntax", "empty(UUID)", "The UUID is considered empty if it contains all zeros (zero UUID).", "The function also works for Arrays and Strings.", "Arguments", "x \u2014 A UUID. UUID.", "Returned value", "Returns 1 for an empty UUID or 0 for a non-empty UUID. UInt8."], "Examples": ["SELECT empty(generateUUIDv4());"], "Category": ["UUIDs Functions"], "index": 105, "vector_txt": "105:Feature: empty(UUID)\nDescription: emptyChecks whether the input UUID is empty.Syntaxempty(UUID)The UUID is considered empty if it contains all zeros (zero UUID).The function also works for Arrays and Strings.Argumentsx \u2014 A UUID. UUID.Returned valueReturns 1 for an empty UUID or 0 for a non-empty UUID. UInt8.\nExamples: SELECT empty(generateUUIDv4());\nCategory: UUIDs Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/uuid-functions"], "Title": ["notEmpty"], "Feature": ["notEmpty(UUID)"], "Description": ["notEmpty", "Checks whether the input UUID is non-empty.", "Syntax", "notEmpty(UUID)", "The UUID is considered empty if it contains all zeros (zero UUID).", "The function also works for Arrays or Strings.", "Arguments", "x \u2014 A UUID. UUID.", "Returned value", "Returns 1 for a non-empty UUID or 0 for an empty UUID. UInt8."], "Examples": ["SELECT notEmpty(generateUUIDv4());"], "Category": ["UUIDs Functions"], "index": 106, "vector_txt": "106:Feature: notEmpty(UUID)\nDescription: notEmptyChecks whether the input UUID is non-empty.SyntaxnotEmpty(UUID)The UUID is considered empty if it contains all zeros (zero UUID).The function also works for Arrays or Strings.Argumentsx \u2014 A UUID. UUID.Returned valueReturns 1 for a non-empty UUID or 0 for an empty UUID. UInt8.\nExamples: SELECT notEmpty(generateUUIDv4());\nCategory: UUIDs Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/uuid-functions"], "Title": ["toUUID"], "Feature": ["toUUID"], "Description": ["toUUID", "Converts a value of type String to a UUID.", "toUUID(string)", "Returned value", "The UUID type value.", "Usage example", "SELECT toUUID('61f0c404-5cb3-11e7-907b-a6006ad3dba0') AS uuid", "Result:", "\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500uuid\u2500\u2510\u2502 61f0c404-5cb3-11e7-907b-a6006ad3dba0 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Examples": ["toUUID(string)", "SELECT toUUID('61f0c404-5cb3-11e7-907b-a6006ad3dba0') AS uuid"], "Category": ["UUIDs Functions"], "index": 107, "vector_txt": "107:Feature: toUUID\nDescription: toUUIDConverts a value of type String to a UUID.toUUID(string)Returned valueThe UUID type value.Usage exampleSELECT toUUID('61f0c404-5cb3-11e7-907b-a6006ad3dba0') AS uuidResult:\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500uuid\u2500\u2510\u2502 61f0c404-5cb3-11e7-907b-a6006ad3dba0 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nExamples: toUUID(string)SELECT toUUID('61f0c404-5cb3-11e7-907b-a6006ad3dba0') AS uuid\nCategory: UUIDs Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/uuid-functions"], "Title": ["toUUIDOrDefault"], "Feature": ["toUUIDOrDefault"], "Description": ["toUUIDOrDefault", "Arguments", "string \u2014 String of 36 characters or FixedString(36). String.default \u2014 UUID to be used as the default if the first argument cannot be converted to a UUID type. UUID.", "Returned value", "UUID", "toUUIDOrDefault(string, default)", "Returned value", "The UUID type value.", "Usage examples", "This first example returns the first argument converted to a UUID type as it can be converted:", "SELECT toUUIDOrDefault('61f0c404-5cb3-11e7-907b-a6006ad3dba0', cast('59f0c404-5cb3-11e7-907b-a6006ad3dba0' as UUID));", "Result:", "\u250c\u2500toUUIDOrDefault('61f0c404-5cb3-11e7-907b-a6006ad3dba0', CAST('59f0c404-5cb3-11e7-907b-a6006ad3dba0', 'UUID'))\u2500\u2510\u2502 61f0c404-5cb3-11e7-907b-a6006ad3dba0                                                                          \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "This second example returns the second argument (the provided default UUID) as the first argument cannot be converted to a UUID type:", "SELECT toUUIDOrDefault('-----61f0c404-5cb3-11e7-907b-a6006ad3dba0', cast('59f0c404-5cb3-11e7-907b-a6006ad3dba0' as UUID));", "Result:", "\u250c\u2500toUUIDOrDefault('-----61f0c404-5cb3-11e7-907b-a6006ad3dba0', CAST('59f0c404-5cb3-11e7-907b-a6006ad3dba0', 'UUID'))\u2500\u2510\u2502 59f0c404-5cb3-11e7-907b-a6006ad3dba0                                                                               \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Examples": ["toUUIDOrDefault(string, default)", "SELECT toUUIDOrDefault('61f0c404-5cb3-11e7-907b-a6006ad3dba0', cast('59f0c404-5cb3-11e7-907b-a6006ad3dba0' as UUID));", "SELECT toUUIDOrDefault('-----61f0c404-5cb3-11e7-907b-a6006ad3dba0', cast('59f0c404-5cb3-11e7-907b-a6006ad3dba0' as UUID));"], "Category": ["UUIDs Functions"], "index": 108, "vector_txt": "108:Feature: toUUIDOrDefault\nDescription: toUUIDOrDefaultArgumentsstring \u2014 String of 36 characters or FixedString(36). String.default \u2014 UUID to be used as the default if the first argument cannot be converted to a UUID type. UUID.Returned valueUUIDtoUUIDOrDefault(string, default)Returned valueThe UUID type value.Usage examplesThis first example returns the first argument converted to a UUID type as it can be converted:SELECT toUUIDOrDefault('61f0c404-5cb3-11e7-907b-a6006ad3dba0', cast('59f0c404-5cb3-11e7-907b-a6006ad3dba0' as UUID));Result:\u250c\u2500toUUIDOrDefault('61f0c404-5cb3-11e7-907b-a6006ad3dba0', CAST('59f0c404-5cb3-11e7-907b-a6006ad3dba0', 'UUID'))\u2500\u2510\u2502 61f0c404-5cb3-11e7-907b-a6006ad3dba0                                                                          \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518This second example returns the second argument (the provided default UUID) as the first argument cannot be converted to a UUID type:SELECT toUUIDOrDefault('-----61f0c404-5cb3-11e7-907b-a6006ad3dba0', cast('59f0c404-5cb3-11e7-907b-a6006ad3dba0' as UUID));Result:\u250c\u2500toUUIDOrDefault('-----61f0c404-5cb3-11e7-907b-a6006ad3dba0', CAST('59f0c404-5cb3-11e7-907b-a6006ad3dba0', 'UUID'))\u2500\u2510\u2502 59f0c404-5cb3-11e7-907b-a6006ad3dba0                                                                               \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nExamples: toUUIDOrDefault(string, default)SELECT toUUIDOrDefault('61f0c404-5cb3-11e7-907b-a6006ad3dba0', cast('59f0c404-5cb3-11e7-907b-a6006ad3dba0' as UUID));SELECT toUUIDOrDefault('-----61f0c404-5cb3-11e7-907b-a6006ad3dba0', cast('59f0c404-5cb3-11e7-907b-a6006ad3dba0' as UUID));\nCategory: UUIDs Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/uuid-functions"], "Title": ["toUUIDOrNull"], "Feature": ["toUUIDOrNull"], "Description": ["toUUIDOrNull", "Takes an argument of type String and tries to parse it into UUID. If failed, returns NULL.", "toUUIDOrNull(string)", "Returned value", "The Nullable(UUID) type value.", "Usage example", "SELECT toUUIDOrNull('61f0c404-5cb3-11e7-907b-a6006ad3dba0T') AS uuid", "Result:", "\u250c\u2500uuid\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Examples": ["toUUIDOrNull(string)", "SELECT toUUIDOrNull('61f0c404-5cb3-11e7-907b-a6006ad3dba0T') AS uuid"], "Category": ["UUIDs Functions"], "index": 109, "vector_txt": "109:Feature: toUUIDOrNull\nDescription: toUUIDOrNullTakes an argument of type String and tries to parse it into UUID. If failed, returns NULL.toUUIDOrNull(string)Returned valueThe Nullable(UUID) type value.Usage exampleSELECT toUUIDOrNull('61f0c404-5cb3-11e7-907b-a6006ad3dba0T') AS uuidResult:\u250c\u2500uuid\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nExamples: toUUIDOrNull(string)SELECT toUUIDOrNull('61f0c404-5cb3-11e7-907b-a6006ad3dba0T') AS uuid\nCategory: UUIDs Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayRotateLeft"], "Feature": ["arrayRotateLeft(arr, n)"], "Description": ["arrayRotateLeft", "Rotates an array to the left by the specified number of elements.\nIf the number of elements is negative, the array is rotated to the right.", "Syntax", "arrayRotateLeft(arr, n)", "Arguments", "arr \u2014 Array.n \u2014 Number of elements to rotate.", "Returned value", "An array rotated to the left by the specified number of elements. Array."], "Examples": ["SELECT arrayRotateLeft([1,2,3,4,5,6], 2) as res;", "SELECT arrayRotateLeft([1,2,3,4,5,6], -2) as res;", "SELECT arrayRotateLeft(['a','b','c','d','e'], 3) as res;"], "Category": ["Arrays Functions"], "index": 110, "vector_txt": "110:Feature: arrayRotateLeft(arr, n)\nDescription: arrayRotateLeftRotates an array to the left by the specified number of elements.\nIf the number of elements is negative, the array is rotated to the right.SyntaxarrayRotateLeft(arr, n)Argumentsarr \u2014 Array.n \u2014 Number of elements to rotate.Returned valueAn array rotated to the left by the specified number of elements. Array.\nExamples: SELECT arrayRotateLeft([1,2,3,4,5,6], 2) as res;SELECT arrayRotateLeft([1,2,3,4,5,6], -2) as res;SELECT arrayRotateLeft(['a','b','c','d','e'], 3) as res;\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/arithmetic-functions"], "Title": ["modulo"], "Feature": ["modulo(a, b)"], "Description": ["modulo", "Calculates the remainder of the division of two values a by b.", "The result type is an integer if both inputs are integers. If one of the inputs is a floating-point number, the result type is Float64.", "The remainder is computed like in C++. Truncated division is used for negative numbers.", "An exception is thrown when dividing by zero or when dividing a minimal negative number by minus one.", "Syntax", "modulo(a, b)", "Alias: a % b (operator)"], "Examples": ["modulo(a, b)"], "Category": ["Arithmetic Functions"], "index": 111, "vector_txt": "111:Feature: modulo(a, b)\nDescription: moduloCalculates the remainder of the division of two values a by b.The result type is an integer if both inputs are integers. If one of the inputs is a floating-point number, the result type is Float64.The remainder is computed like in C++. Truncated division is used for negative numbers.An exception is thrown when dividing by zero or when dividing a minimal negative number by minus one.Syntaxmodulo(a, b)Alias: a % b (operator)\nExamples: modulo(a, b)\nCategory: Arithmetic Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/uuid-functions"], "Title": ["toUUIDOrZero"], "Feature": ["toUUIDOrZero"], "Description": ["toUUIDOrZero", "It takes an argument of type String and tries to parse it into UUID. If failed, returns zero UUID.", "toUUIDOrZero(string)", "Returned value", "The UUID type value.", "Usage example", "SELECT toUUIDOrZero('61f0c404-5cb3-11e7-907b-a6006ad3dba0T') AS uuid", "Result:", "\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500uuid\u2500\u2510\u2502 00000000-0000-0000-0000-000000000000 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Examples": ["toUUIDOrZero(string)", "SELECT toUUIDOrZero('61f0c404-5cb3-11e7-907b-a6006ad3dba0T') AS uuid"], "Category": ["UUIDs Functions"], "index": 112, "vector_txt": "112:Feature: toUUIDOrZero\nDescription: toUUIDOrZeroIt takes an argument of type String and tries to parse it into UUID. If failed, returns zero UUID.toUUIDOrZero(string)Returned valueThe UUID type value.Usage exampleSELECT toUUIDOrZero('61f0c404-5cb3-11e7-907b-a6006ad3dba0T') AS uuidResult:\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500uuid\u2500\u2510\u2502 00000000-0000-0000-0000-000000000000 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nExamples: toUUIDOrZero(string)SELECT toUUIDOrZero('61f0c404-5cb3-11e7-907b-a6006ad3dba0T') AS uuid\nCategory: UUIDs Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/uuid-functions"], "Title": ["UUIDStringToNum"], "Feature": ["UUIDStringToNum(string[, variant = 1])"], "Description": ["UUIDStringToNum", "Accepts string containing 36 characters in the format xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx, and returns a FixedString(16) as its binary representation, with its format optionally specified by variant (Big-endian by default).", "Syntax", "UUIDStringToNum(string[, variant = 1])", "Arguments", "string \u2014 A String of 36 characters or FixedStringvariant \u2014 Integer, representing a variant as specified by RFC4122. 1 = Big-endian (default), 2 = Microsoft.", "Returned value", "FixedString(16)", "Usage examples", "SELECT    '612f3c40-5d3b-217e-707b-6a546a3d7b29' AS uuid,    UUIDStringToNum(uuid) AS bytes", "Result:", "\u250c\u2500uuid\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500bytes\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 612f3c40-5d3b-217e-707b-6a546a3d7b29 \u2502 a/<@];!~p{jTj={) \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "SELECT    '612f3c40-5d3b-217e-707b-6a546a3d7b29' AS uuid,    UUIDStringToNum(uuid, 2) AS bytes", "Result:", "\u250c\u2500uuid\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500bytes\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 612f3c40-5d3b-217e-707b-6a546a3d7b29 \u2502 @</a;]~!p{jTj={) \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Examples": ["UUIDStringToNum(string[, variant = 1])", "SELECT    '612f3c40-5d3b-217e-707b-6a546a3d7b29' AS uuid,    UUIDStringToNum(uuid) AS bytes", "SELECT    '612f3c40-5d3b-217e-707b-6a546a3d7b29' AS uuid,    UUIDStringToNum(uuid, 2) AS bytes"], "Category": ["UUIDs Functions"], "index": 113, "vector_txt": "113:Feature: UUIDStringToNum(string[, variant = 1])\nDescription: UUIDStringToNumAccepts string containing 36 characters in the format xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx, and returns a FixedString(16) as its binary representation, with its format optionally specified by variant (Big-endian by default).SyntaxUUIDStringToNum(string[, variant = 1])Argumentsstring \u2014 A String of 36 characters or FixedStringvariant \u2014 Integer, representing a variant as specified by RFC4122. 1 = Big-endian (default), 2 = Microsoft.Returned valueFixedString(16)Usage examplesSELECT    '612f3c40-5d3b-217e-707b-6a546a3d7b29' AS uuid,    UUIDStringToNum(uuid) AS bytesResult:\u250c\u2500uuid\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500bytes\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 612f3c40-5d3b-217e-707b-6a546a3d7b29 \u2502 a/<@];!~p{jTj={) \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT    '612f3c40-5d3b-217e-707b-6a546a3d7b29' AS uuid,    UUIDStringToNum(uuid, 2) AS bytesResult:\u250c\u2500uuid\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500bytes\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 612f3c40-5d3b-217e-707b-6a546a3d7b29 \u2502 @</a;]~!p{jTj={) \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nExamples: UUIDStringToNum(string[, variant = 1])SELECT    '612f3c40-5d3b-217e-707b-6a546a3d7b29' AS uuid,    UUIDStringToNum(uuid) AS bytesSELECT    '612f3c40-5d3b-217e-707b-6a546a3d7b29' AS uuid,    UUIDStringToNum(uuid, 2) AS bytes\nCategory: UUIDs Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/uuid-functions"], "Title": ["UUIDNumToString"], "Feature": ["UUIDNumToString(binary[, variant = 1])"], "Description": ["UUIDNumToString", "Accepts binary containing a binary representation of a UUID, with its format optionally specified by variant (Big-endian by default), and returns a string containing 36 characters in text format.", "Syntax", "UUIDNumToString(binary[, variant = 1])", "Arguments", "binary \u2014 FixedString(16) as a binary representation of a UUID.variant \u2014 Integer, representing a variant as specified by RFC4122. 1 = Big-endian (default), 2 = Microsoft.", "Returned value", "String.", "Usage example", "SELECT    'a/<@];!~p{jTj={)' AS bytes,    UUIDNumToString(toFixedString(bytes, 16)) AS uuid", "Result:", "\u250c\u2500bytes\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500uuid\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 a/<@];!~p{jTj={) \u2502 612f3c40-5d3b-217e-707b-6a546a3d7b29 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "SELECT    '@</a;]~!p{jTj={)' AS bytes,    UUIDNumToString(toFixedString(bytes, 16), 2) AS uuid", "Result:", "\u250c\u2500bytes\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500uuid\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 @</a;]~!p{jTj={) \u2502 612f3c40-5d3b-217e-707b-6a546a3d7b29 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Examples": ["UUIDNumToString(binary[, variant = 1])", "SELECT    'a/<@];!~p{jTj={)' AS bytes,    UUIDNumToString(toFixedString(bytes, 16)) AS uuid", "SELECT    '@</a;]~!p{jTj={)' AS bytes,    UUIDNumToString(toFixedString(bytes, 16), 2) AS uuid"], "Category": ["UUIDs Functions"], "index": 114, "vector_txt": "114:Feature: UUIDNumToString(binary[, variant = 1])\nDescription: UUIDNumToStringAccepts binary containing a binary representation of a UUID, with its format optionally specified by variant (Big-endian by default), and returns a string containing 36 characters in text format.SyntaxUUIDNumToString(binary[, variant = 1])Argumentsbinary \u2014 FixedString(16) as a binary representation of a UUID.variant \u2014 Integer, representing a variant as specified by RFC4122. 1 = Big-endian (default), 2 = Microsoft.Returned valueString.Usage exampleSELECT    'a/<@];!~p{jTj={)' AS bytes,    UUIDNumToString(toFixedString(bytes, 16)) AS uuidResult:\u250c\u2500bytes\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500uuid\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 a/<@];!~p{jTj={) \u2502 612f3c40-5d3b-217e-707b-6a546a3d7b29 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT    '@</a;]~!p{jTj={)' AS bytes,    UUIDNumToString(toFixedString(bytes, 16), 2) AS uuidResult:\u250c\u2500bytes\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500uuid\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 @</a;]~!p{jTj={) \u2502 612f3c40-5d3b-217e-707b-6a546a3d7b29 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nExamples: UUIDNumToString(binary[, variant = 1])SELECT    'a/<@];!~p{jTj={)' AS bytes,    UUIDNumToString(toFixedString(bytes, 16)) AS uuidSELECT    '@</a;]~!p{jTj={)' AS bytes,    UUIDNumToString(toFixedString(bytes, 16), 2) AS uuid\nCategory: UUIDs Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/uuid-functions"], "Title": ["UUIDToNum"], "Feature": ["UUIDToNum(uuid[, variant = 1])"], "Description": ["UUIDToNum", "Accepts a UUID and returns its binary representation as a FixedString(16), with its format optionally specified by variant (Big-endian by default). This function replaces calls to two separate functions UUIDStringToNum(toString(uuid)) so no intermediate conversion from UUID to string is required to extract bytes from a UUID.", "Syntax", "UUIDToNum(uuid[, variant = 1])", "Arguments", "uuid \u2014 UUID.variant \u2014 Integer, representing a variant as specified by RFC4122. 1 = Big-endian (default), 2 = Microsoft.", "Returned value", "The binary representation of the UUID.", "Usage examples", "SELECT    toUUID('612f3c40-5d3b-217e-707b-6a546a3d7b29') AS uuid,    UUIDToNum(uuid) AS bytes", "Result:", "\u250c\u2500uuid\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500bytes\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 612f3c40-5d3b-217e-707b-6a546a3d7b29 \u2502 a/<@];!~p{jTj={) \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "SELECT    toUUID('612f3c40-5d3b-217e-707b-6a546a3d7b29') AS uuid,    UUIDToNum(uuid, 2) AS bytes", "Result:", "\u250c\u2500uuid\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500bytes\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 612f3c40-5d3b-217e-707b-6a546a3d7b29 \u2502 @</a;]~!p{jTj={) \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Examples": ["UUIDToNum(uuid[, variant = 1])", "SELECT    toUUID('612f3c40-5d3b-217e-707b-6a546a3d7b29') AS uuid,    UUIDToNum(uuid) AS bytes", "SELECT    toUUID('612f3c40-5d3b-217e-707b-6a546a3d7b29') AS uuid,    UUIDToNum(uuid, 2) AS bytes"], "Category": ["UUIDs Functions"], "index": 115, "vector_txt": "115:Feature: UUIDToNum(uuid[, variant = 1])\nDescription: UUIDToNumAccepts a UUID and returns its binary representation as a FixedString(16), with its format optionally specified by variant (Big-endian by default). This function replaces calls to two separate functions UUIDStringToNum(toString(uuid)) so no intermediate conversion from UUID to string is required to extract bytes from a UUID.SyntaxUUIDToNum(uuid[, variant = 1])Argumentsuuid \u2014 UUID.variant \u2014 Integer, representing a variant as specified by RFC4122. 1 = Big-endian (default), 2 = Microsoft.Returned valueThe binary representation of the UUID.Usage examplesSELECT    toUUID('612f3c40-5d3b-217e-707b-6a546a3d7b29') AS uuid,    UUIDToNum(uuid) AS bytesResult:\u250c\u2500uuid\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500bytes\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 612f3c40-5d3b-217e-707b-6a546a3d7b29 \u2502 a/<@];!~p{jTj={) \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT    toUUID('612f3c40-5d3b-217e-707b-6a546a3d7b29') AS uuid,    UUIDToNum(uuid, 2) AS bytesResult:\u250c\u2500uuid\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500bytes\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 612f3c40-5d3b-217e-707b-6a546a3d7b29 \u2502 @</a;]~!p{jTj={) \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nExamples: UUIDToNum(uuid[, variant = 1])SELECT    toUUID('612f3c40-5d3b-217e-707b-6a546a3d7b29') AS uuid,    UUIDToNum(uuid) AS bytesSELECT    toUUID('612f3c40-5d3b-217e-707b-6a546a3d7b29') AS uuid,    UUIDToNum(uuid, 2) AS bytes\nCategory: UUIDs Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/uuid-functions"], "Title": ["UUIDv7ToDateTime"], "Feature": ["UUIDv7ToDateTime(uuid[, timezone])"], "Description": ["UUIDv7ToDateTime", "Returns the timestamp component of a UUID version 7.", "Syntax", "UUIDv7ToDateTime(uuid[, timezone])", "Arguments", "uuid \u2014 UUID of version 7.timezone \u2014 Timezone name for the returned value (optional). String.", "Returned value", "Timestamp with milliseconds precision. If the UUID is not a valid version 7 UUID, it returns 1970-01-01 00:00:00.000. DateTime64(3).", "Usage examples", "SELECT UUIDv7ToDateTime(toUUID('018f05c9-4ab8-7b86-b64e-c9f03fbd45d1'))", "Result:", "\u250c\u2500UUIDv7ToDateTime(toUUID('018f05c9-4ab8-7b86-b64e-c9f03fbd45d1'))\u2500\u2510\u2502                                          2024-04-22 15:30:29.048 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "SELECT UUIDv7ToDateTime(toUUID('018f05c9-4ab8-7b86-b64e-c9f03fbd45d1'), 'America/New_York')", "Result:", "\u250c\u2500UUIDv7ToDateTime(toUUID('018f05c9-4ab8-7b86-b64e-c9f03fbd45d1'), 'America/New_York')\u2500\u2510\u2502                                                              2024-04-22 08:30:29.048 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Examples": ["UUIDv7ToDateTime(uuid[, timezone])", "SELECT UUIDv7ToDateTime(toUUID('018f05c9-4ab8-7b86-b64e-c9f03fbd45d1'))", "SELECT UUIDv7ToDateTime(toUUID('018f05c9-4ab8-7b86-b64e-c9f03fbd45d1'), 'America/New_York')"], "Category": ["UUIDs Functions"], "index": 116, "vector_txt": "116:Feature: UUIDv7ToDateTime(uuid[, timezone])\nDescription: UUIDv7ToDateTimeReturns the timestamp component of a UUID version 7.SyntaxUUIDv7ToDateTime(uuid[, timezone])Argumentsuuid \u2014 UUID of version 7.timezone \u2014 Timezone name for the returned value (optional). String.Returned valueTimestamp with milliseconds precision. If the UUID is not a valid version 7 UUID, it returns 1970-01-01 00:00:00.000. DateTime64(3).Usage examplesSELECT UUIDv7ToDateTime(toUUID('018f05c9-4ab8-7b86-b64e-c9f03fbd45d1'))Result:\u250c\u2500UUIDv7ToDateTime(toUUID('018f05c9-4ab8-7b86-b64e-c9f03fbd45d1'))\u2500\u2510\u2502                                          2024-04-22 15:30:29.048 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT UUIDv7ToDateTime(toUUID('018f05c9-4ab8-7b86-b64e-c9f03fbd45d1'), 'America/New_York')Result:\u250c\u2500UUIDv7ToDateTime(toUUID('018f05c9-4ab8-7b86-b64e-c9f03fbd45d1'), 'America/New_York')\u2500\u2510\u2502                                                              2024-04-22 08:30:29.048 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nExamples: UUIDv7ToDateTime(uuid[, timezone])SELECT UUIDv7ToDateTime(toUUID('018f05c9-4ab8-7b86-b64e-c9f03fbd45d1'))SELECT UUIDv7ToDateTime(toUUID('018f05c9-4ab8-7b86-b64e-c9f03fbd45d1'), 'America/New_York')\nCategory: UUIDs Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/uuid-functions"], "Title": ["serverUUID"], "Feature": ["serverUUID()"], "Description": ["serverUUID", "Returns the random UUID generated during the first start of the ClickHouse server. The UUID is stored in file uuid in the ClickHouse server directory (e.g. /var/lib/clickhouse/) and retained between server restarts.", "Syntax", "serverUUID()", "Returned value", "The UUID of the server. UUID."], "Examples": ["serverUUID()"], "Category": ["UUIDs Functions"], "index": 117, "vector_txt": "117:Feature: serverUUID()\nDescription: serverUUIDReturns the random UUID generated during the first start of the ClickHouse server. The UUID is stored in file uuid in the ClickHouse server directory (e.g. /var/lib/clickhouse/) and retained between server restarts.SyntaxserverUUID()Returned valueThe UUID of the server. UUID.\nExamples: serverUUID()\nCategory: UUIDs Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/uuid-functions"], "Title": ["generateSnowflakeID"], "Feature": ["generateSnowflakeID([expr, [machine_id]])"], "Description": ["generateSnowflakeID", "Generates a Snowflake ID.", "The generated Snowflake ID contains the current Unix timestamp in milliseconds (41 + 1 top zero bits), followed by a machine id (10 bits), and a counter (12 bits) to distinguish IDs within a millisecond.\nFor any given timestamp (unix_ts_ms), the counter starts at 0 and is incremented by 1 for each new Snowflake ID until the timestamp changes.\nIn case the counter overflows, the timestamp field is incremented by 1 and the counter is reset to 0.", "Function generateSnowflakeID guarantees that the counter field within a timestamp increments monotonically across all function invocations in concurrently running threads and queries.", "NoteThe generated Snowflake IDs are based on the UNIX epoch 1970-01-01.\nWhile no standard or recommendation exists for the epoch of Snowflake IDs, implementations in other systems may use a different epoch, e.g. Twitter/X (2010-11-04) or Mastodon (2015-01-01).", " 0                   1                   2                   3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\u251c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u2524|0|                         timestamp                           |\u251c\u2500\u253c                 \u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u2524|                   |     machine_id    |    machine_seq_num    |\u2514\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2518", "Syntax", "generateSnowflakeID([expr, [machine_id]])", "Arguments", "expr \u2014 An arbitrary expression used to bypass common subexpression elimination if the function is called multiple times in a query. The value of the expression has no effect on the returned Snowflake ID. Optional.machine_id \u2014 A machine ID, the lowest 10 bits are used. Int64. Optional.", "Returned value", "A value of type UInt64."], "Examples": ["CREATE TABLE tab (id UInt64) ENGINE = Memory;INSERT INTO tab SELECT generateSnowflakeID();SELECT * FROM tab;", "SELECT generateSnowflakeID(1), generateSnowflakeID(2);\u250c\u2500generateSnowflakeID(1)\u2500\u252c\u2500generateSnowflakeID(2)\u2500\u2510\u2502    7199081609652224000 \u2502    7199081609652224001 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Category": ["UUIDs Functions"], "index": 118, "vector_txt": "118:Feature: generateSnowflakeID([expr, [machine_id]])\nDescription: generateSnowflakeIDGenerates a Snowflake ID.The generated Snowflake ID contains the current Unix timestamp in milliseconds (41 + 1 top zero bits), followed by a machine id (10 bits), and a counter (12 bits) to distinguish IDs within a millisecond.\nFor any given timestamp (unix_ts_ms), the counter starts at 0 and is incremented by 1 for each new Snowflake ID until the timestamp changes.\nIn case the counter overflows, the timestamp field is incremented by 1 and the counter is reset to 0.Function generateSnowflakeID guarantees that the counter field within a timestamp increments monotonically across all function invocations in concurrently running threads and queries.NoteThe generated Snowflake IDs are based on the UNIX epoch 1970-01-01.\nWhile no standard or recommendation exists for the epoch of Snowflake IDs, implementations in other systems may use a different epoch, e.g. Twitter/X (2010-11-04) or Mastodon (2015-01-01). 0                   1                   2                   3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\u251c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u2524|0|                         timestamp                           |\u251c\u2500\u253c                 \u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u2524|                   |     machine_id    |    machine_seq_num    |\u2514\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2518SyntaxgenerateSnowflakeID([expr, [machine_id]])Argumentsexpr \u2014 An arbitrary expression used to bypass common subexpression elimination if the function is called multiple times in a query. The value of the expression has no effect on the returned Snowflake ID. Optional.machine_id \u2014 A machine ID, the lowest 10 bits are used. Int64. Optional.Returned valueA value of type UInt64.\nExamples: CREATE TABLE tab (id UInt64) ENGINE = Memory;INSERT INTO tab SELECT generateSnowflakeID();SELECT * FROM tab;SELECT generateSnowflakeID(1), generateSnowflakeID(2);\u250c\u2500generateSnowflakeID(1)\u2500\u252c\u2500generateSnowflakeID(2)\u2500\u2510\u2502    7199081609652224000 \u2502    7199081609652224001 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nCategory: UUIDs Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/uuid-functions"], "Title": ["snowflakeToDateTime"], "Feature": ["snowflakeToDateTime(value[, time_zone])"], "Description": ["snowflakeToDateTime", "DangerThis function is deprecated and can only be used if setting allow_deprecated_snowflake_conversion_functions is enabled.\nThe function will be removed at some point in future.", "Extracts the timestamp component of a Snowflake ID in DateTime format.", "Syntax", "snowflakeToDateTime(value[, time_zone])", "Arguments", "value \u2014 Snowflake ID. Int64.time_zone \u2014 Timezone. The function parses time_string according to the timezone. Optional. String.", "Returned value", "The timestamp component of value as a DateTime value."], "Examples": ["SELECT snowflakeToDateTime(CAST('1426860702823350272', 'Int64'), 'UTC');"], "Category": ["UUIDs Functions"], "index": 119, "vector_txt": "119:Feature: snowflakeToDateTime(value[, time_zone])\nDescription: snowflakeToDateTimeDangerThis function is deprecated and can only be used if setting allow_deprecated_snowflake_conversion_functions is enabled.\nThe function will be removed at some point in future.Extracts the timestamp component of a Snowflake ID in DateTime format.SyntaxsnowflakeToDateTime(value[, time_zone])Argumentsvalue \u2014 Snowflake ID. Int64.time_zone \u2014 Timezone. The function parses time_string according to the timezone. Optional. String.Returned valueThe timestamp component of value as a DateTime value.\nExamples: SELECT snowflakeToDateTime(CAST('1426860702823350272', 'Int64'), 'UTC');\nCategory: UUIDs Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/uuid-functions"], "Title": ["snowflakeToDateTime64"], "Feature": ["snowflakeToDateTime64(value[, time_zone])"], "Description": ["snowflakeToDateTime64", "DangerThis function is deprecated and can only be used if setting allow_deprecated_snowflake_conversion_functions is enabled.\nThe function will be removed at some point in future.", "Extracts the timestamp component of a Snowflake ID in DateTime64 format.", "Syntax", "snowflakeToDateTime64(value[, time_zone])", "Arguments", "value \u2014 Snowflake ID. Int64.time_zone \u2014 Timezone. The function parses time_string according to the timezone. Optional. String.", "Returned value", "The timestamp component of value as a DateTime64 with scale = 3, i.e. millisecond precision."], "Examples": ["SELECT snowflakeToDateTime64(CAST('1426860802823350272', 'Int64'), 'UTC');"], "Category": ["UUIDs Functions"], "index": 120, "vector_txt": "120:Feature: snowflakeToDateTime64(value[, time_zone])\nDescription: snowflakeToDateTime64DangerThis function is deprecated and can only be used if setting allow_deprecated_snowflake_conversion_functions is enabled.\nThe function will be removed at some point in future.Extracts the timestamp component of a Snowflake ID in DateTime64 format.SyntaxsnowflakeToDateTime64(value[, time_zone])Argumentsvalue \u2014 Snowflake ID. Int64.time_zone \u2014 Timezone. The function parses time_string according to the timezone. Optional. String.Returned valueThe timestamp component of value as a DateTime64 with scale = 3, i.e. millisecond precision.\nExamples: SELECT snowflakeToDateTime64(CAST('1426860802823350272', 'Int64'), 'UTC');\nCategory: UUIDs Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/uuid-functions"], "Title": ["dateTimeToSnowflake"], "Feature": ["dateTimeToSnowflake(value)"], "Description": ["dateTimeToSnowflake", "DangerThis function is deprecated and can only be used if setting allow_deprecated_snowflake_conversion_functions is enabled.\nThe function will be removed at some point in future.", "Converts a DateTime value to the first Snowflake ID at the giving time.", "Syntax", "dateTimeToSnowflake(value)", "Arguments", "value \u2014 Date with time. DateTime.", "Returned value", "Input value converted to the Int64 data type as the first Snowflake ID at that time."], "Examples": ["WITH toDateTime('2021-08-15 18:57:56', 'Asia/Shanghai') AS dt SELECT dateTimeToSnowflake(dt);"], "Category": ["UUIDs Functions"], "index": 121, "vector_txt": "121:Feature: dateTimeToSnowflake(value)\nDescription: dateTimeToSnowflakeDangerThis function is deprecated and can only be used if setting allow_deprecated_snowflake_conversion_functions is enabled.\nThe function will be removed at some point in future.Converts a DateTime value to the first Snowflake ID at the giving time.SyntaxdateTimeToSnowflake(value)Argumentsvalue \u2014 Date with time. DateTime.Returned valueInput value converted to the Int64 data type as the first Snowflake ID at that time.\nExamples: WITH toDateTime('2021-08-15 18:57:56', 'Asia/Shanghai') AS dt SELECT dateTimeToSnowflake(dt);\nCategory: UUIDs Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayRotateRight"], "Feature": ["arrayRotateRight(arr, n)"], "Description": ["arrayRotateRight", "Rotates an array to the right by the specified number of elements.\nIf the number of elements is negative, the array is rotated to the left.", "Syntax", "arrayRotateRight(arr, n)", "Arguments", "arr \u2014 Array.n \u2014 Number of elements to rotate.", "Returned value", "An array rotated to the right by the specified number of elements. Array."], "Examples": ["SELECT arrayRotateRight([1,2,3,4,5,6], 2) as res;", "SELECT arrayRotateRight([1,2,3,4,5,6], -2) as res;", "SELECT arrayRotateRight(['a','b','c','d','e'], 3) as res;"], "Category": ["Arrays Functions"], "index": 122, "vector_txt": "122:Feature: arrayRotateRight(arr, n)\nDescription: arrayRotateRightRotates an array to the right by the specified number of elements.\nIf the number of elements is negative, the array is rotated to the left.SyntaxarrayRotateRight(arr, n)Argumentsarr \u2014 Array.n \u2014 Number of elements to rotate.Returned valueAn array rotated to the right by the specified number of elements. Array.\nExamples: SELECT arrayRotateRight([1,2,3,4,5,6], 2) as res;SELECT arrayRotateRight([1,2,3,4,5,6], -2) as res;SELECT arrayRotateRight(['a','b','c','d','e'], 3) as res;\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/uuid-functions"], "Title": ["dateTime64ToSnowflake"], "Feature": ["dateTime64ToSnowflake(value)"], "Description": ["dateTime64ToSnowflake", "DangerThis function is deprecated and can only be used if setting allow_deprecated_snowflake_conversion_functions is enabled.\nThe function will be removed at some point in future.", "Convert a DateTime64 to the first Snowflake ID at the giving time.", "Syntax", "dateTime64ToSnowflake(value)", "Arguments", "value \u2014 Date with time. DateTime64.", "Returned value", "Input value converted to the Int64 data type as the first Snowflake ID at that time."], "Examples": ["WITH toDateTime64('2021-08-15 18:57:56.492', 3, 'Asia/Shanghai') AS dt64 SELECT dateTime64ToSnowflake(dt64);"], "Category": ["UUIDs Functions"], "index": 123, "vector_txt": "123:Feature: dateTime64ToSnowflake(value)\nDescription: dateTime64ToSnowflakeDangerThis function is deprecated and can only be used if setting allow_deprecated_snowflake_conversion_functions is enabled.\nThe function will be removed at some point in future.Convert a DateTime64 to the first Snowflake ID at the giving time.SyntaxdateTime64ToSnowflake(value)Argumentsvalue \u2014 Date with time. DateTime64.Returned valueInput value converted to the Int64 data type as the first Snowflake ID at that time.\nExamples: WITH toDateTime64('2021-08-15 18:57:56.492', 3, 'Asia/Shanghai') AS dt64 SELECT dateTime64ToSnowflake(dt64);\nCategory: UUIDs Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/uuid-functions"], "Title": ["snowflakeIDToDateTime"], "Feature": ["snowflakeIDToDateTime(value[, epoch[, time_zone]])"], "Description": ["snowflakeIDToDateTime", "Returns the timestamp component of a Snowflake ID as a value of type DateTime.", "Syntax", "snowflakeIDToDateTime(value[, epoch[, time_zone]])", "Arguments", "value \u2014 Snowflake ID. UInt64.epoch - Epoch of the Snowflake ID in milliseconds since 1970-01-01. Defaults to 0 (1970-01-01). For the Twitter/X epoch (2015-01-01), provide 1288834974657. Optional. UInt*.time_zone \u2014 Timezone. The function parses time_string according to the timezone. Optional. String.", "Returned value", "The timestamp component of value as a DateTime value."], "Examples": ["SELECT snowflakeIDToDateTime(7204436857747984384) AS res"], "Category": ["UUIDs Functions"], "index": 124, "vector_txt": "124:Feature: snowflakeIDToDateTime(value[, epoch[, time_zone]])\nDescription: snowflakeIDToDateTimeReturns the timestamp component of a Snowflake ID as a value of type DateTime.SyntaxsnowflakeIDToDateTime(value[, epoch[, time_zone]])Argumentsvalue \u2014 Snowflake ID. UInt64.epoch - Epoch of the Snowflake ID in milliseconds since 1970-01-01. Defaults to 0 (1970-01-01). For the Twitter/X epoch (2015-01-01), provide 1288834974657. Optional. UInt*.time_zone \u2014 Timezone. The function parses time_string according to the timezone. Optional. String.Returned valueThe timestamp component of value as a DateTime value.\nExamples: SELECT snowflakeIDToDateTime(7204436857747984384) AS res\nCategory: UUIDs Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/uuid-functions"], "Title": ["snowflakeIDToDateTime64"], "Feature": ["snowflakeIDToDateTime64(value[, epoch[, time_zone]])"], "Description": ["snowflakeIDToDateTime64", "Returns the timestamp component of a Snowflake ID as a value of type DateTime64.", "Syntax", "snowflakeIDToDateTime64(value[, epoch[, time_zone]])", "Arguments", "value \u2014 Snowflake ID. UInt64.epoch - Epoch of the Snowflake ID in milliseconds since 1970-01-01. Defaults to 0 (1970-01-01). For the Twitter/X epoch (2015-01-01), provide 1288834974657. Optional. UInt*.time_zone \u2014 Timezone. The function parses time_string according to the timezone. Optional. String.", "Returned value", "The timestamp component of value as a DateTime64 with scale = 3, i.e. millisecond precision."], "Examples": ["SELECT snowflakeIDToDateTime64(7204436857747984384) AS res"], "Category": ["UUIDs Functions"], "index": 125, "vector_txt": "125:Feature: snowflakeIDToDateTime64(value[, epoch[, time_zone]])\nDescription: snowflakeIDToDateTime64Returns the timestamp component of a Snowflake ID as a value of type DateTime64.SyntaxsnowflakeIDToDateTime64(value[, epoch[, time_zone]])Argumentsvalue \u2014 Snowflake ID. UInt64.epoch - Epoch of the Snowflake ID in milliseconds since 1970-01-01. Defaults to 0 (1970-01-01). For the Twitter/X epoch (2015-01-01), provide 1288834974657. Optional. UInt*.time_zone \u2014 Timezone. The function parses time_string according to the timezone. Optional. String.Returned valueThe timestamp component of value as a DateTime64 with scale = 3, i.e. millisecond precision.\nExamples: SELECT snowflakeIDToDateTime64(7204436857747984384) AS res\nCategory: UUIDs Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/uuid-functions"], "Title": ["dateTimeToSnowflakeID"], "Feature": ["dateTimeToSnowflakeID(value[, epoch])"], "Description": ["dateTimeToSnowflakeID", "Converts a DateTime value to the first Snowflake ID at the giving time.", "Syntax", "dateTimeToSnowflakeID(value[, epoch])", "Arguments", "value \u2014 Date with time. DateTime.epoch - Epoch of the Snowflake ID in milliseconds since 1970-01-01. Defaults to 0 (1970-01-01). For the Twitter/X epoch (2015-01-01), provide 1288834974657. Optional. UInt*.", "Returned value", "Input value converted to UInt64 as the first Snowflake ID at that time."], "Examples": ["SELECT toDateTime('2021-08-15 18:57:56', 'Asia/Shanghai') AS dt, dateTimeToSnowflakeID(dt) AS res;"], "Category": ["UUIDs Functions"], "index": 126, "vector_txt": "126:Feature: dateTimeToSnowflakeID(value[, epoch])\nDescription: dateTimeToSnowflakeIDConverts a DateTime value to the first Snowflake ID at the giving time.SyntaxdateTimeToSnowflakeID(value[, epoch])Argumentsvalue \u2014 Date with time. DateTime.epoch - Epoch of the Snowflake ID in milliseconds since 1970-01-01. Defaults to 0 (1970-01-01). For the Twitter/X epoch (2015-01-01), provide 1288834974657. Optional. UInt*.Returned valueInput value converted to UInt64 as the first Snowflake ID at that time.\nExamples: SELECT toDateTime('2021-08-15 18:57:56', 'Asia/Shanghai') AS dt, dateTimeToSnowflakeID(dt) AS res;\nCategory: UUIDs Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/uuid-functions"], "Title": ["dateTime64ToSnowflakeID"], "Feature": ["dateTime64ToSnowflakeID(value[, epoch])"], "Description": ["dateTime64ToSnowflakeID", "Convert a DateTime64 to the first Snowflake ID at the giving time.", "Syntax", "dateTime64ToSnowflakeID(value[, epoch])", "Arguments", "value \u2014 Date with time. DateTime64.epoch - Epoch of the Snowflake ID in milliseconds since 1970-01-01. Defaults to 0 (1970-01-01). For the Twitter/X epoch (2015-01-01), provide 1288834974657. Optional. UInt*.", "Returned value", "Input value converted to UInt64 as the first Snowflake ID at that time."], "Examples": ["SELECT toDateTime('2021-08-15 18:57:56.493', 3, 'Asia/Shanghai') AS dt, dateTime64ToSnowflakeID(dt) AS res;"], "Category": ["UUIDs Functions"], "index": 127, "vector_txt": "127:Feature: dateTime64ToSnowflakeID(value[, epoch])\nDescription: dateTime64ToSnowflakeIDConvert a DateTime64 to the first Snowflake ID at the giving time.SyntaxdateTime64ToSnowflakeID(value[, epoch])Argumentsvalue \u2014 Date with time. DateTime64.epoch - Epoch of the Snowflake ID in milliseconds since 1970-01-01. Defaults to 0 (1970-01-01). For the Twitter/X epoch (2015-01-01), provide 1288834974657. Optional. UInt*.Returned valueInput value converted to UInt64 as the first Snowflake ID at that time.\nExamples: SELECT toDateTime('2021-08-15 18:57:56.493', 3, 'Asia/Shanghai') AS dt, dateTime64ToSnowflakeID(dt) AS res;\nCategory: UUIDs Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/uuid-functions"], "Title": ["See also"], "Feature": ["See also"], "Description": ["See also", "dictGetUUID"], "Examples": [], "Category": ["UUIDs Functions"], "index": 128, "vector_txt": "128:Feature: See also\nDescription: See alsodictGetUUID\nExamples: \nCategory: UUIDs Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/aggthrow"], "Title": ["aggThrow"], "Feature": ["aggThrow(throw_prob)"], "Description": ["aggThrow", "This function can be used for the purpose of testing exception safety. It will throw an exception on creation with the specified probability.", "Syntax", "aggThrow(throw_prob)", "Arguments", "throw_prob \u2014 Probability to throw on creation. Float64.", "Returned value", "An exception: Code: 503. DB::Exception: Aggregate function aggThrow has thrown exception successfully."], "Examples": ["SELECT number % 2 AS even, aggThrow(number) FROM numbers(10) GROUP BY even;"], "Category": ["Aggregate Functions"], "index": 129, "vector_txt": "129:Feature: aggThrow(throw_prob)\nDescription: aggThrowThis function can be used for the purpose of testing exception safety. It will throw an exception on creation with the specified probability.SyntaxaggThrow(throw_prob)Argumentsthrow_prob \u2014 Probability to throw on creation. Float64.Returned valueAn exception: Code: 503. DB::Exception: Aggregate function aggThrow has thrown exception successfully.\nExamples: SELECT number % 2 AS even, aggThrow(number) FROM numbers(10) GROUP BY even;\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/analysis_of_variance"], "Title": ["analysisOfVariance"], "Feature": ["analysisOfVariance(val, group_no)"], "Description": ["analysisOfVariance", "Provides a statistical test for one-way analysis of variance (ANOVA test). It is a test over several groups of normally distributed observations to find out whether all groups have the same mean or not. ", "Syntax", "analysisOfVariance(val, group_no)", "Aliases: anova", "Parameters", "val: value. group_no : group number that val belongs to.", "NoteGroups are enumerated starting from 0 and there should be at least two groups to perform a test.\nThere should be at least one group with the number of observations greater than one.", "Returned value", "(f_statistic, p_value). Tuple(Float64, Float64)."], "Examples": ["SELECT analysisOfVariance(number, number % 2) FROM numbers(1048575);"], "Category": ["Aggregate Functions"], "index": 130, "vector_txt": "130:Feature: analysisOfVariance(val, group_no)\nDescription: analysisOfVarianceProvides a statistical test for one-way analysis of variance (ANOVA test). It is a test over several groups of normally distributed observations to find out whether all groups have the same mean or not. SyntaxanalysisOfVariance(val, group_no)Aliases: anovaParametersval: value. group_no : group number that val belongs to.NoteGroups are enumerated starting from 0 and there should be at least two groups to perform a test.\nThere should be at least one group with the number of observations greater than one.Returned value(f_statistic, p_value). Tuple(Float64, Float64).\nExamples: SELECT analysisOfVariance(number, number % 2) FROM numbers(1048575);\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/any"], "Title": ["any"], "Feature": ["any(column) [RESPECT NULLS]"], "Description": ["any", "Selects the first encountered value of a column, ignoring any NULL values.", "Syntax", "any(column) [RESPECT NULLS]", "Aliases: any_value, first_value.", "Parameters", "column: The column name. ", "Returned value", "NoteSupports the RESPECT NULLS modifier after the function name. Using this modifier will ensure the function selects the first value passed, regardless of whether it is NULL or not.", "NoteThe return type of the function is the same as the input, except for LowCardinality which is discarded. This means that given no rows as input it will return the default value of that type (0 for integers, or Null for a Nullable() column). You might use the -OrNull combinator ) to modify this behaviour.", "DangerThe query can be executed in any order and even in a different order each time, so the result of this function is indeterminate.\nTo get a determinate result, you can use the min or max function instead of any.", "Implementation details", "In some cases, you can rely on the order of execution. This applies to cases when SELECT comes from a subquery that uses ORDER BY.", "When a SELECT query has the GROUP BY clause or at least one aggregate function, ClickHouse (in contrast to MySQL) requires that all expressions in the SELECT, HAVING, and ORDER BY clauses be calculated from keys or from aggregate functions. In other words, each column selected from the table must be used either in keys or inside aggregate functions. To get behavior like in MySQL, you can put the other columns in the any aggregate function."], "Examples": ["CREATE TABLE any_nulls (city Nullable(String)) ENGINE=Log;INSERT INTO any_nulls (city) VALUES (NULL), ('Amsterdam'), ('New York'), ('Tokyo'), ('Valencia'), (NULL);SELECT any(city) FROM any_nulls;"], "Category": ["Aggregate Functions"], "index": 131, "vector_txt": "131:Feature: any(column) [RESPECT NULLS]\nDescription: anySelects the first encountered value of a column, ignoring any NULL values.Syntaxany(column) [RESPECT NULLS]Aliases: any_value, first_value.Parameterscolumn: The column name. Returned valueNoteSupports the RESPECT NULLS modifier after the function name. Using this modifier will ensure the function selects the first value passed, regardless of whether it is NULL or not.NoteThe return type of the function is the same as the input, except for LowCardinality which is discarded. This means that given no rows as input it will return the default value of that type (0 for integers, or Null for a Nullable() column). You might use the -OrNull combinator ) to modify this behaviour.DangerThe query can be executed in any order and even in a different order each time, so the result of this function is indeterminate.\nTo get a determinate result, you can use the min or max function instead of any.Implementation detailsIn some cases, you can rely on the order of execution. This applies to cases when SELECT comes from a subquery that uses ORDER BY.When a SELECT query has the GROUP BY clause or at least one aggregate function, ClickHouse (in contrast to MySQL) requires that all expressions in the SELECT, HAVING, and ORDER BY clauses be calculated from keys or from aggregate functions. In other words, each column selected from the table must be used either in keys or inside aggregate functions. To get behavior like in MySQL, you can put the other columns in the any aggregate function.\nExamples: CREATE TABLE any_nulls (city Nullable(String)) ENGINE=Log;INSERT INTO any_nulls (city) VALUES (NULL), ('Amsterdam'), ('New York'), ('Tokyo'), ('Valencia'), (NULL);SELECT any(city) FROM any_nulls;\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/anyheavy"], "Title": ["anyHeavy"], "Feature": ["anyHeavy(column)"], "Description": ["anyHeavy", "Selects a frequently occurring value using the heavy hitters algorithm. If there is a value that occurs more than in half the cases in each of the query\u2019s execution threads, this value is returned. Normally, the result is nondeterministic.", "anyHeavy(column)", "Arguments", "column \u2013 The column name."], "Examples": ["SELECT anyHeavy(AirlineID) AS resFROM ontime"], "Category": ["Aggregate Functions"], "index": 132, "vector_txt": "132:Feature: anyHeavy(column)\nDescription: anyHeavySelects a frequently occurring value using the heavy hitters algorithm. If there is a value that occurs more than in half the cases in each of the query\u2019s execution threads, this value is returned. Normally, the result is nondeterministic.anyHeavy(column)Argumentscolumn \u2013 The column name.\nExamples: SELECT anyHeavy(AirlineID) AS resFROM ontime\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayShiftLeft"], "Feature": ["arrayShiftLeft(arr, n[, default])"], "Description": ["arrayShiftLeft", "Shifts an array to the left by the specified number of elements.\nNew elements are filled with the provided argument or the default value of the array element type.\nIf the number of elements is negative, the array is shifted to the right.", "Syntax", "arrayShiftLeft(arr, n[, default])", "Arguments", "arr \u2014 Array.n \u2014 Number of elements to shift.default \u2014 Optional. Default value for new elements.", "Returned value", "An array shifted to the left by the specified number of elements. Array."], "Examples": ["SELECT arrayShiftLeft([1,2,3,4,5,6], 2) as res;", "SELECT arrayShiftLeft([1,2,3,4,5,6], -2) as res;", "SELECT arrayShiftLeft([1,2,3,4,5,6], 2, 42) as res;", "SELECT arrayShiftLeft(['a','b','c','d','e','f'], 3, 'foo') as res;", "SELECT arrayShiftLeft([1,2,3,4,5,6] :: Array(UInt16), 2, 4242) as res;"], "Category": ["Arrays Functions"], "index": 133, "vector_txt": "133:Feature: arrayShiftLeft(arr, n[, default])\nDescription: arrayShiftLeftShifts an array to the left by the specified number of elements.\nNew elements are filled with the provided argument or the default value of the array element type.\nIf the number of elements is negative, the array is shifted to the right.SyntaxarrayShiftLeft(arr, n[, default])Argumentsarr \u2014 Array.n \u2014 Number of elements to shift.default \u2014 Optional. Default value for new elements.Returned valueAn array shifted to the left by the specified number of elements. Array.\nExamples: SELECT arrayShiftLeft([1,2,3,4,5,6], 2) as res;SELECT arrayShiftLeft([1,2,3,4,5,6], -2) as res;SELECT arrayShiftLeft([1,2,3,4,5,6], 2, 42) as res;SELECT arrayShiftLeft(['a','b','c','d','e','f'], 3, 'foo') as res;SELECT arrayShiftLeft([1,2,3,4,5,6] :: Array(UInt16), 2, 4242) as res;\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/anylast"], "Title": ["anyLast"], "Feature": ["anyLast(column) [RESPECT NULLS]"], "Description": ["anyLast", "Selects the last value encountered, ignoring any NULL values by default. The result is just as indeterminate as for the any function.", "Syntax", "anyLast(column) [RESPECT NULLS]", "Parameters", "column: The column name. ", "NoteSupports the RESPECT NULLS modifier after the function name. Using this modifier will ensure the function selects the first value passed, regardless of whether it is NULL or not.", "Returned value", "The last value encountered."], "Examples": ["CREATE TABLE any_last_nulls (city Nullable(String)) ENGINE=Log;INSERT INTO any_last_nulls (city) VALUES ('Amsterdam'),(NULL),('New York'),('Tokyo'),('Valencia'),(NULL);SELECT anyLast(city) FROM any_last_nulls;"], "Category": ["Aggregate Functions"], "index": 134, "vector_txt": "134:Feature: anyLast(column) [RESPECT NULLS]\nDescription: anyLastSelects the last value encountered, ignoring any NULL values by default. The result is just as indeterminate as for the any function.SyntaxanyLast(column) [RESPECT NULLS]Parameterscolumn: The column name. NoteSupports the RESPECT NULLS modifier after the function name. Using this modifier will ensure the function selects the first value passed, regardless of whether it is NULL or not.Returned valueThe last value encountered.\nExamples: CREATE TABLE any_last_nulls (city Nullable(String)) ENGINE=Log;INSERT INTO any_last_nulls (city) VALUES ('Amsterdam'),(NULL),('New York'),('Tokyo'),('Valencia'),(NULL);SELECT anyLast(city) FROM any_last_nulls;\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/approxtopk"], "Title": ["approx_top_k"], "Feature": ["approx_top_k(N)(column)approx_top_k(N, reserved)(column)"], "Description": ["approx_top_k", "Returns an array of the approximately most frequent values and their counts in the specified column. The resulting array is sorted in descending order of approximate frequency of values (not by the values themselves).", "approx_top_k(N)(column)approx_top_k(N, reserved)(column)", "This function does not provide a guaranteed result. In certain situations, errors might occur and it might return frequent values that aren\u2019t the most frequent values.", "We recommend using the N < 10 value; performance is reduced with large N values. Maximum value of N = 65536.", "Parameters", "N \u2014 The number of elements to return. Optional. Default value: 10.reserved \u2014 Defines, how many cells reserved for values. If uniq(column) > reserved, result of topK function will be approximate. Optional. Default value: N * 3.", "Arguments", "column \u2014 The value to calculate frequency."], "Examples": ["SELECT approx_top_k(2)(k)FROM VALUES('k Char, w UInt64', ('y', 1), ('y', 1), ('x', 5), ('y', 1), ('z', 10));"], "Category": ["Aggregate Functions"], "index": 135, "vector_txt": "135:Feature: approx_top_k(N)(column)approx_top_k(N, reserved)(column)\nDescription: approx_top_kReturns an array of the approximately most frequent values and their counts in the specified column. The resulting array is sorted in descending order of approximate frequency of values (not by the values themselves).approx_top_k(N)(column)approx_top_k(N, reserved)(column)This function does not provide a guaranteed result. In certain situations, errors might occur and it might return frequent values that aren\u2019t the most frequent values.We recommend using the N < 10 value; performance is reduced with large N values. Maximum value of N = 65536.ParametersN \u2014 The number of elements to return. Optional. Default value: 10.reserved \u2014 Defines, how many cells reserved for values. If uniq(column) > reserved, result of topK function will be approximate. Optional. Default value: N * 3.Argumentscolumn \u2014 The value to calculate frequency.\nExamples: SELECT approx_top_k(2)(k)FROM VALUES('k Char, w UInt64', ('y', 1), ('y', 1), ('x', 5), ('y', 1), ('z', 10));\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/approxtopk"], "Title": ["approx_top_count"], "Feature": ["approx_top_count"], "Description": ["approx_top_count", "Is an alias to approx_top_k function", "See Also", "topKtopKWeightedapprox_top_sum"], "Examples": [], "Category": ["Aggregate Functions"], "index": 136, "vector_txt": "136:Feature: approx_top_count\nDescription: approx_top_countIs an alias to approx_top_k functionSee AlsotopKtopKWeightedapprox_top_sum\nExamples: \nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/approxtopsum"], "Title": ["approx_top_sum"], "Feature": ["approx_top_sum(N)(column, weight)approx_top_sum(N, reserved)(column, weight)"], "Description": ["approx_top_sum", "Returns an array of the approximately most frequent values and their counts in the specified column. The resulting array is sorted in descending order of approximate frequency of values (not by the values themselves). Additionally, the weight of the value is taken into account.", "approx_top_sum(N)(column, weight)approx_top_sum(N, reserved)(column, weight)", "This function does not provide a guaranteed result. In certain situations, errors might occur and it might return frequent values that aren\u2019t the most frequent values.", "We recommend using the N < 10 value; performance is reduced with large N values. Maximum value of N = 65536.", "Parameters", "N \u2014 The number of elements to return. Optional. Default value: 10.reserved \u2014 Defines, how many cells reserved for values. If uniq(column) > reserved, result of topK function will be approximate. Optional. Default value: N * 3.", "Arguments", "column \u2014 The value to calculate frequency.weight \u2014 The weight. Every value is accounted weight times for frequency calculation. UInt64."], "Examples": ["SELECT approx_top_sum(2)(k, w)FROM VALUES('k Char, w UInt64', ('y', 1), ('y', 1), ('x', 5), ('y', 1), ('z', 10))"], "Category": ["Aggregate Functions"], "index": 137, "vector_txt": "137:Feature: approx_top_sum(N)(column, weight)approx_top_sum(N, reserved)(column, weight)\nDescription: approx_top_sumReturns an array of the approximately most frequent values and their counts in the specified column. The resulting array is sorted in descending order of approximate frequency of values (not by the values themselves). Additionally, the weight of the value is taken into account.approx_top_sum(N)(column, weight)approx_top_sum(N, reserved)(column, weight)This function does not provide a guaranteed result. In certain situations, errors might occur and it might return frequent values that aren\u2019t the most frequent values.We recommend using the N < 10 value; performance is reduced with large N values. Maximum value of N = 65536.ParametersN \u2014 The number of elements to return. Optional. Default value: 10.reserved \u2014 Defines, how many cells reserved for values. If uniq(column) > reserved, result of topK function will be approximate. Optional. Default value: N * 3.Argumentscolumn \u2014 The value to calculate frequency.weight \u2014 The weight. Every value is accounted weight times for frequency calculation. UInt64.\nExamples: SELECT approx_top_sum(2)(k, w)FROM VALUES('k Char, w UInt64', ('y', 1), ('y', 1), ('x', 5), ('y', 1), ('z', 10))\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/argmax"], "Title": ["argMax"], "Feature": ["argMax(arg, val)"], "Description": ["argMax", "Calculates the arg value for a maximum val value. If there are multiple rows with equal val being the maximum, which of the associated arg is returned is not deterministic.\nBoth parts the arg and the max behave as aggregate functions, they both skip Null during processing and return not Null values if not Null values are available.", "Syntax", "argMax(arg, val)", "Arguments", "arg \u2014 Argument.val \u2014 Value.", "Returned value", "arg value that corresponds to maximum val value.", "Type: matches arg type."], "Examples": ["SELECT argMax(user, salary) FROM salary;", "CREATE TABLE test(    a Nullable(String),    b Nullable(Int64))ENGINE = Memory ASSELECT *FROM VALUES(('a', 1), ('b', 2), ('c', 2), (NULL, 3), (NULL, NULL), ('d', NULL));select * from test;\u250c\u2500a\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500b\u2500\u2510\u2502 a    \u2502    1 \u2502\u2502 b    \u2502    2 \u2502\u2502 c    \u2502    2 \u2502\u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502    3 \u2502\u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502\u2502 d    \u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT argMax(a, b), max(b) FROM test;\u250c\u2500argMax(a, b)\u2500\u252c\u2500max(b)\u2500\u2510\u2502 b            \u2502      3 \u2502 -- argMax = 'b' because it the first not Null value, max(b) is from another row!\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT argMax(tuple(a), b) FROM test;\u250c\u2500argMax(tuple(a), b)\u2500\u2510\u2502 (NULL)              \u2502 -- The a `Tuple` that contains only a `NULL` value is not `NULL`, so the aggregate functions won't skip that row because of that `NULL` value\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT (argMax((a, b), b) as t).1 argMaxA, t.2 argMaxB FROM test;\u250c\u2500argMaxA\u2500\u252c\u2500argMaxB\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38    \u2502       3 \u2502 -- you can use Tuple and get both (all - tuple(*)) columns for the according max(b)\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT argMax(a, b), max(b) FROM test WHERE a IS NULL AND b IS NULL;\u250c\u2500argMax(a, b)\u2500\u252c\u2500max(b)\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38         \u2502   \u1d3a\u1d41\u1d38\u1d38 \u2502 -- All aggregated rows contains at least one `NULL` value because of the filter, so all rows are skipped, therefore the result will be `NULL`\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT argMax(a, (b,a)) FROM test;\u250c\u2500argMax(a, tuple(b, a))\u2500\u2510\u2502 c                      \u2502 -- There are two rows with b=2, `Tuple` in the `Max` allows to get not the first `arg`\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT argMax(a, tuple(b)) FROM test;\u250c\u2500argMax(a, tuple(b))\u2500\u2510\u2502 b                   \u2502 -- `Tuple` can be used in `Max` to not skip Nulls in `Max`\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Category": ["Aggregate Functions"], "index": 138, "vector_txt": "138:Feature: argMax(arg, val)\nDescription: argMaxCalculates the arg value for a maximum val value. If there are multiple rows with equal val being the maximum, which of the associated arg is returned is not deterministic.\nBoth parts the arg and the max behave as aggregate functions, they both skip Null during processing and return not Null values if not Null values are available.SyntaxargMax(arg, val)Argumentsarg \u2014 Argument.val \u2014 Value.Returned valuearg value that corresponds to maximum val value.Type: matches arg type.\nExamples: SELECT argMax(user, salary) FROM salary;CREATE TABLE test(    a Nullable(String),    b Nullable(Int64))ENGINE = Memory ASSELECT *FROM VALUES(('a', 1), ('b', 2), ('c', 2), (NULL, 3), (NULL, NULL), ('d', NULL));select * from test;\u250c\u2500a\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500b\u2500\u2510\u2502 a    \u2502    1 \u2502\u2502 b    \u2502    2 \u2502\u2502 c    \u2502    2 \u2502\u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502    3 \u2502\u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502\u2502 d    \u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT argMax(a, b), max(b) FROM test;\u250c\u2500argMax(a, b)\u2500\u252c\u2500max(b)\u2500\u2510\u2502 b            \u2502      3 \u2502 -- argMax = 'b' because it the first not Null value, max(b) is from another row!\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT argMax(tuple(a), b) FROM test;\u250c\u2500argMax(tuple(a), b)\u2500\u2510\u2502 (NULL)              \u2502 -- The a `Tuple` that contains only a `NULL` value is not `NULL`, so the aggregate functions won't skip that row because of that `NULL` value\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT (argMax((a, b), b) as t).1 argMaxA, t.2 argMaxB FROM test;\u250c\u2500argMaxA\u2500\u252c\u2500argMaxB\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38    \u2502       3 \u2502 -- you can use Tuple and get both (all - tuple(*)) columns for the according max(b)\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT argMax(a, b), max(b) FROM test WHERE a IS NULL AND b IS NULL;\u250c\u2500argMax(a, b)\u2500\u252c\u2500max(b)\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38         \u2502   \u1d3a\u1d41\u1d38\u1d38 \u2502 -- All aggregated rows contains at least one `NULL` value because of the filter, so all rows are skipped, therefore the result will be `NULL`\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT argMax(a, (b,a)) FROM test;\u250c\u2500argMax(a, tuple(b, a))\u2500\u2510\u2502 c                      \u2502 -- There are two rows with b=2, `Tuple` in the `Max` allows to get not the first `arg`\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT argMax(a, tuple(b)) FROM test;\u250c\u2500argMax(a, tuple(b))\u2500\u2510\u2502 b                   \u2502 -- `Tuple` can be used in `Max` to not skip Nulls in `Max`\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/argmin"], "Title": ["argMin"], "Feature": ["argMin(arg, val)"], "Description": ["argMin", "Calculates the arg value for a minimum val value. If there are multiple rows with equal val being the maximum, which of the associated arg is returned is not deterministic.\nBoth parts the arg and the min behave as aggregate functions, they both skip Null during processing and return not Null values if not Null values are available.", "Syntax", "argMin(arg, val)", "Arguments", "arg \u2014 Argument.val \u2014 Value.", "Returned value", "arg value that corresponds to minimum val value.", "Type: matches arg type."], "Examples": ["SELECT argMin(user, salary) FROM salary", "CREATE TABLE test(    a Nullable(String),    b Nullable(Int64))ENGINE = Memory ASSELECT *FROM VALUES((NULL, 0), ('a', 1), ('b', 2), ('c', 2), (NULL, NULL), ('d', NULL));select * from test;\u250c\u2500a\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500b\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502    0 \u2502\u2502 a    \u2502    1 \u2502\u2502 b    \u2502    2 \u2502\u2502 c    \u2502    2 \u2502\u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502\u2502 d    \u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT argMin(a, b), min(b) FROM test;\u250c\u2500argMin(a, b)\u2500\u252c\u2500min(b)\u2500\u2510\u2502 a            \u2502      0 \u2502 -- argMin = a because it the first not `NULL` value, min(b) is from another row!\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT argMin(tuple(a), b) FROM test;\u250c\u2500argMin(tuple(a), b)\u2500\u2510\u2502 (NULL)              \u2502 -- The a `Tuple` that contains only a `NULL` value is not `NULL`, so the aggregate functions won't skip that row because of that `NULL` value\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT (argMin((a, b), b) as t).1 argMinA, t.2 argMinB from test;\u250c\u2500argMinA\u2500\u252c\u2500argMinB\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38    \u2502       0 \u2502 -- you can use `Tuple` and get both (all - tuple(*)) columns for the according max(b)\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT argMin(a, b), min(b) FROM test WHERE a IS NULL and b IS NULL;\u250c\u2500argMin(a, b)\u2500\u252c\u2500min(b)\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38         \u2502   \u1d3a\u1d41\u1d38\u1d38 \u2502 -- All aggregated rows contains at least one `NULL` value because of the filter, so all rows are skipped, therefore the result will be `NULL`\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT argMin(a, (b, a)), min(tuple(b, a)) FROM test;\u250c\u2500argMin(a, tuple(b, a))\u2500\u252c\u2500min(tuple(b, a))\u2500\u2510\u2502 d                      \u2502 (NULL,NULL)      \u2502 -- 'd' is the first not `NULL` value for the min\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT argMin((a, b), (b, a)), min(tuple(b, a)) FROM test;\u250c\u2500argMin(tuple(a, b), tuple(b, a))\u2500\u252c\u2500min(tuple(b, a))\u2500\u2510\u2502 (NULL,NULL)                      \u2502 (NULL,NULL)      \u2502 -- argMin returns (NULL,NULL) here because `Tuple` allows to don't skip `NULL` and min(tuple(b, a)) in this case is minimal value for this dataset\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT argMin(a, tuple(b)) FROM test;\u250c\u2500argMin(a, tuple(b))\u2500\u2510\u2502 d                   \u2502 -- `Tuple` can be used in `min` to not skip rows with `NULL` values as b.\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Category": ["Aggregate Functions"], "index": 139, "vector_txt": "139:Feature: argMin(arg, val)\nDescription: argMinCalculates the arg value for a minimum val value. If there are multiple rows with equal val being the maximum, which of the associated arg is returned is not deterministic.\nBoth parts the arg and the min behave as aggregate functions, they both skip Null during processing and return not Null values if not Null values are available.SyntaxargMin(arg, val)Argumentsarg \u2014 Argument.val \u2014 Value.Returned valuearg value that corresponds to minimum val value.Type: matches arg type.\nExamples: SELECT argMin(user, salary) FROM salaryCREATE TABLE test(    a Nullable(String),    b Nullable(Int64))ENGINE = Memory ASSELECT *FROM VALUES((NULL, 0), ('a', 1), ('b', 2), ('c', 2), (NULL, NULL), ('d', NULL));select * from test;\u250c\u2500a\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500b\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502    0 \u2502\u2502 a    \u2502    1 \u2502\u2502 b    \u2502    2 \u2502\u2502 c    \u2502    2 \u2502\u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502\u2502 d    \u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT argMin(a, b), min(b) FROM test;\u250c\u2500argMin(a, b)\u2500\u252c\u2500min(b)\u2500\u2510\u2502 a            \u2502      0 \u2502 -- argMin = a because it the first not `NULL` value, min(b) is from another row!\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT argMin(tuple(a), b) FROM test;\u250c\u2500argMin(tuple(a), b)\u2500\u2510\u2502 (NULL)              \u2502 -- The a `Tuple` that contains only a `NULL` value is not `NULL`, so the aggregate functions won't skip that row because of that `NULL` value\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT (argMin((a, b), b) as t).1 argMinA, t.2 argMinB from test;\u250c\u2500argMinA\u2500\u252c\u2500argMinB\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38    \u2502       0 \u2502 -- you can use `Tuple` and get both (all - tuple(*)) columns for the according max(b)\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT argMin(a, b), min(b) FROM test WHERE a IS NULL and b IS NULL;\u250c\u2500argMin(a, b)\u2500\u252c\u2500min(b)\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38         \u2502   \u1d3a\u1d41\u1d38\u1d38 \u2502 -- All aggregated rows contains at least one `NULL` value because of the filter, so all rows are skipped, therefore the result will be `NULL`\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT argMin(a, (b, a)), min(tuple(b, a)) FROM test;\u250c\u2500argMin(a, tuple(b, a))\u2500\u252c\u2500min(tuple(b, a))\u2500\u2510\u2502 d                      \u2502 (NULL,NULL)      \u2502 -- 'd' is the first not `NULL` value for the min\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT argMin((a, b), (b, a)), min(tuple(b, a)) FROM test;\u250c\u2500argMin(tuple(a, b), tuple(b, a))\u2500\u252c\u2500min(tuple(b, a))\u2500\u2510\u2502 (NULL,NULL)                      \u2502 (NULL,NULL)      \u2502 -- argMin returns (NULL,NULL) here because `Tuple` allows to don't skip `NULL` and min(tuple(b, a)) in this case is minimal value for this dataset\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT argMin(a, tuple(b)) FROM test;\u250c\u2500argMin(a, tuple(b))\u2500\u2510\u2502 d                   \u2502 -- `Tuple` can be used in `min` to not skip rows with `NULL` values as b.\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/array_concat_agg"], "Title": ["array_concat_agg"], "Feature": ["array_concat_agg"], "Description": ["array_concat_agg", "Alias of groupArrayArray. The function is case insensitive."], "Examples": ["SELECT array_concat_agg(a) AS aFROM t\u250c\u2500a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 [1,2,3,4,5,6] \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Category": ["Aggregate Functions"], "index": 140, "vector_txt": "140:Feature: array_concat_agg\nDescription: array_concat_aggAlias of groupArrayArray. The function is case insensitive.\nExamples: SELECT array_concat_agg(a) AS aFROM t\u250c\u2500a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 [1,2,3,4,5,6] \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/avg"], "Title": ["avg"], "Feature": ["avg(x)"], "Description": ["avg", "Calculates the arithmetic mean.", "Syntax", "avg(x)", "Arguments", "x \u2014 input values, must be Integer, Float, or Decimal.", "Returned value", "The arithmetic mean, always as Float64.NaN if the input parameter x is empty."], "Examples": ["SELECT avg(x) FROM values('x Int8', 0, 1, 2, 3, 4, 5);", "CREATE table test (t UInt8) ENGINE = Memory;"], "Category": ["Aggregate Functions"], "index": 141, "vector_txt": "141:Feature: avg(x)\nDescription: avgCalculates the arithmetic mean.Syntaxavg(x)Argumentsx \u2014 input values, must be Integer, Float, or Decimal.Returned valueThe arithmetic mean, always as Float64.NaN if the input parameter x is empty.\nExamples: SELECT avg(x) FROM values('x Int8', 0, 1, 2, 3, 4, 5);CREATE table test (t UInt8) ENGINE = Memory;\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/avgweighted"], "Title": ["avgWeighted"], "Feature": ["avgWeighted(x, weight)"], "Description": ["avgWeighted", "Calculates the weighted arithmetic mean.", "Syntax", "avgWeighted(x, weight)", "Arguments", "x \u2014 Values.weight \u2014 Weights of the values.", "x and weight must both be\nInteger or floating-point,\nbut may have different types.", "Returned value", "NaN if all the weights are equal to 0 or the supplied weights parameter is empty.Weighted mean otherwise.", "Return type is always Float64."], "Examples": ["SELECT avgWeighted(x, w)FROM values('x Int8, w Int8', (4, 1), (1, 0), (10, 2))", "SELECT avgWeighted(x, w)FROM values('x Int8, w Float64', (4, 1), (1, 0), (10, 2))", "SELECT avgWeighted(x, w)FROM values('x Int8, w Int8', (0, 0), (1, 0), (10, 0))", "CREATE table test (t UInt8) ENGINE = Memory;SELECT avgWeighted(t) FROM test"], "Category": ["Aggregate Functions"], "index": 142, "vector_txt": "142:Feature: avgWeighted(x, weight)\nDescription: avgWeightedCalculates the weighted arithmetic mean.SyntaxavgWeighted(x, weight)Argumentsx \u2014 Values.weight \u2014 Weights of the values.x and weight must both be\nInteger or floating-point,\nbut may have different types.Returned valueNaN if all the weights are equal to 0 or the supplied weights parameter is empty.Weighted mean otherwise.Return type is always Float64.\nExamples: SELECT avgWeighted(x, w)FROM values('x Int8, w Int8', (4, 1), (1, 0), (10, 2))SELECT avgWeighted(x, w)FROM values('x Int8, w Float64', (4, 1), (1, 0), (10, 2))SELECT avgWeighted(x, w)FROM values('x Int8, w Int8', (0, 0), (1, 0), (10, 0))CREATE table test (t UInt8) ENGINE = Memory;SELECT avgWeighted(t) FROM test\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/contingency"], "Title": ["contingency"], "Feature": ["contingency(column1, column2)"], "Description": ["contingency", "The contingency function calculates the contingency coefficient, a value that measures the association between two columns in a table. The computation is similar to the cramersV function but with a different denominator in the square root.", "Syntax", "contingency(column1, column2)", "Arguments", "column1 and column2 are the columns to be compared", "Returned value", "a value between 0 and 1. The larger the result, the closer the association of the two columns.", "Return type is always Float64."], "Examples": ["SELECT    cramersV(a, b),    contingency(a ,b)FROM    (        SELECT            number % 10 AS a,            number % 4 AS b        FROM            numbers(150)    );"], "Category": ["Aggregate Functions"], "index": 143, "vector_txt": "143:Feature: contingency(column1, column2)\nDescription: contingencyThe contingency function calculates the contingency coefficient, a value that measures the association between two columns in a table. The computation is similar to the cramersV function but with a different denominator in the square root.Syntaxcontingency(column1, column2)Argumentscolumn1 and column2 are the columns to be comparedReturned valuea value between 0 and 1. The larger the result, the closer the association of the two columns.Return type is always Float64.\nExamples: SELECT    cramersV(a, b),    contingency(a ,b)FROM    (        SELECT            number % 10 AS a,            number % 4 AS b        FROM            numbers(150)    );\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayShiftRight"], "Feature": ["arrayShiftRight(arr, n[, default])"], "Description": ["arrayShiftRight", "Shifts an array to the right by the specified number of elements.\nNew elements are filled with the provided argument or the default value of the array element type.\nIf the number of elements is negative, the array is shifted to the left.", "Syntax", "arrayShiftRight(arr, n[, default])", "Arguments", "arr \u2014 Array.n \u2014 Number of elements to shift.default \u2014 Optional. Default value for new elements.", "Returned value", "An array shifted to the right by the specified number of elements. Array."], "Examples": ["SELECT arrayShiftRight([1,2,3,4,5,6], 2) as res;", "SELECT arrayShiftRight([1,2,3,4,5,6], -2) as res;", "SELECT arrayShiftRight([1,2,3,4,5,6], 2, 42) as res;", "SELECT arrayShiftRight(['a','b','c','d','e','f'], 3, 'foo') as res;", "SELECT arrayShiftRight([1,2,3,4,5,6] :: Array(UInt16), 2, 4242) as res;"], "Category": ["Arrays Functions"], "index": 144, "vector_txt": "144:Feature: arrayShiftRight(arr, n[, default])\nDescription: arrayShiftRightShifts an array to the right by the specified number of elements.\nNew elements are filled with the provided argument or the default value of the array element type.\nIf the number of elements is negative, the array is shifted to the left.SyntaxarrayShiftRight(arr, n[, default])Argumentsarr \u2014 Array.n \u2014 Number of elements to shift.default \u2014 Optional. Default value for new elements.Returned valueAn array shifted to the right by the specified number of elements. Array.\nExamples: SELECT arrayShiftRight([1,2,3,4,5,6], 2) as res;SELECT arrayShiftRight([1,2,3,4,5,6], -2) as res;SELECT arrayShiftRight([1,2,3,4,5,6], 2, 42) as res;SELECT arrayShiftRight(['a','b','c','d','e','f'], 3, 'foo') as res;SELECT arrayShiftRight([1,2,3,4,5,6] :: Array(UInt16), 2, 4242) as res;\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/corr"], "Title": ["corr"], "Feature": ["corr(x, y)"], "Description": ["corr", "Calculates the Pearson correlation coefficient:", "\u03a3(x\u2212x\u02c9)(y\u2212y\u02c9)\u03a3(x\u2212x\u02c9)2\u2217\u03a3(y\u2212y\u02c9)2\\frac{\\Sigma{(x - \\bar{x})(y - \\bar{y})}}{\\sqrt{\\Sigma{(x - \\bar{x})^2} * \\Sigma{(y - \\bar{y})^2}}}\u03a3(x\u2212x\u02c9)2\u2217\u03a3(y\u2212y\u02c9)2\u03a3(x\u2212x\u02c9)(y\u2212y\u02c9)", "NoteThis function uses a numerically unstable algorithm. If you need numerical stability in calculations, use the corrStable function. It is slower but provides a more accurate result.", "Syntax", "corr(x, y)", "Arguments", "x \u2014 first variable. (U)Int*, Float*, Decimal.y \u2014 second variable. (U)Int*, Float*, Decimal.", "Returned Value", "The Pearson correlation coefficient. Float64."], "Examples": ["DROP TABLE IF EXISTS series;CREATE TABLE series(    i UInt32,    x_value Float64,    y_value Float64)ENGINE = Memory;INSERT INTO series(i, x_value, y_value) VALUES (1, 5.6, -4.4),(2, -9.6, 3),(3, -1.3, -4),(4, 5.3, 9.7),(5, 4.4, 0.037),(6, -8.6, -7.8),(7, 5.1, 9.3),(8, 7.9, -3.6),(9, -8.2, 0.62),(10, -3, 7.3);", "SELECT corr(x_value, y_value)FROM series;"], "Category": ["Aggregate Functions"], "index": 145, "vector_txt": "145:Feature: corr(x, y)\nDescription: corrCalculates the Pearson correlation coefficient:\u03a3(x\u2212x\u02c9)(y\u2212y\u02c9)\u03a3(x\u2212x\u02c9)2\u2217\u03a3(y\u2212y\u02c9)2\\frac{\\Sigma{(x - \\bar{x})(y - \\bar{y})}}{\\sqrt{\\Sigma{(x - \\bar{x})^2} * \\Sigma{(y - \\bar{y})^2}}}\u03a3(x\u2212x\u02c9)2\u2217\u03a3(y\u2212y\u02c9)2\u03a3(x\u2212x\u02c9)(y\u2212y\u02c9)NoteThis function uses a numerically unstable algorithm. If you need numerical stability in calculations, use the corrStable function. It is slower but provides a more accurate result.Syntaxcorr(x, y)Argumentsx \u2014 first variable. (U)Int*, Float*, Decimal.y \u2014 second variable. (U)Int*, Float*, Decimal.Returned ValueThe Pearson correlation coefficient. Float64.\nExamples: DROP TABLE IF EXISTS series;CREATE TABLE series(    i UInt32,    x_value Float64,    y_value Float64)ENGINE = Memory;INSERT INTO series(i, x_value, y_value) VALUES (1, 5.6, -4.4),(2, -9.6, 3),(3, -1.3, -4),(4, 5.3, 9.7),(5, 4.4, 0.037),(6, -8.6, -7.8),(7, 5.1, 9.3),(8, 7.9, -3.6),(9, -8.2, 0.62),(10, -3, 7.3);SELECT corr(x_value, y_value)FROM series;\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/corrmatrix"], "Title": ["corrMatrix"], "Feature": ["corrMatrix(x[, ...])"], "Description": ["corrMatrix", "Computes the correlation matrix over N variables.", "Syntax", "corrMatrix(x[, ...])", "Arguments", "x \u2014 a variable number of parameters. (U)Int*, Float*, Decimal.", "Returned value", "Correlation matrix. Array(Array(Float64))."], "Examples": ["DROP TABLE IF EXISTS test;CREATE TABLE test(    a UInt32,    b Float64,    c Float64,    d Float64)ENGINE = Memory;INSERT INTO test(a, b, c, d) VALUES (1, 5.6, -4.4, 2.6), (2, -9.6, 3, 3.3), (3, -1.3, -4, 1.2), (4, 5.3, 9.7, 2.3), (5, 4.4, 0.037, 1.222), (6, -8.6, -7.8, 2.1233), (7, 5.1, 9.3, 8.1222), (8, 7.9, -3.6, 9.837), (9, -8.2, 0.62, 8.43555), (10, -3, 7.3, 6.762);", "SELECT arrayMap(x -> round(x, 3), arrayJoin(corrMatrix(a, b, c, d))) AS corrMatrixFROM test;"], "Category": ["Aggregate Functions"], "index": 146, "vector_txt": "146:Feature: corrMatrix(x[, ...])\nDescription: corrMatrixComputes the correlation matrix over N variables.SyntaxcorrMatrix(x[, ...])Argumentsx \u2014 a variable number of parameters. (U)Int*, Float*, Decimal.Returned valueCorrelation matrix. Array(Array(Float64)).\nExamples: DROP TABLE IF EXISTS test;CREATE TABLE test(    a UInt32,    b Float64,    c Float64,    d Float64)ENGINE = Memory;INSERT INTO test(a, b, c, d) VALUES (1, 5.6, -4.4, 2.6), (2, -9.6, 3, 3.3), (3, -1.3, -4, 1.2), (4, 5.3, 9.7, 2.3), (5, 4.4, 0.037, 1.222), (6, -8.6, -7.8, 2.1233), (7, 5.1, 9.3, 8.1222), (8, 7.9, -3.6, 9.837), (9, -8.2, 0.62, 8.43555), (10, -3, 7.3, 6.762);SELECT arrayMap(x -> round(x, 3), arrayJoin(corrMatrix(a, b, c, d))) AS corrMatrixFROM test;\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/corrstable"], "Title": ["corrStable"], "Feature": ["corrStable(x, y)"], "Description": ["corrStable", "Calculates the Pearson correlation coefficient: ", "\u03a3(x\u2212x\u02c9)(y\u2212y\u02c9)\u03a3(x\u2212x\u02c9)2\u2217\u03a3(y\u2212y\u02c9)2\\frac{\\Sigma{(x - \\bar{x})(y - \\bar{y})}}{\\sqrt{\\Sigma{(x - \\bar{x})^2} * \\Sigma{(y - \\bar{y})^2}}}\u03a3(x\u2212x\u02c9)2\u2217\u03a3(y\u2212y\u02c9)2\u03a3(x\u2212x\u02c9)(y\u2212y\u02c9)", "Similar to the corr function, but uses a numerically stable algorithm. As a result, corrStable is slower than corr but produces a more accurate result.", "Syntax", "corrStable(x, y)", "Arguments", "x \u2014 first variable. (U)Int*, Float*, Decimal.y \u2014 second variable. (U)Int*, Float*, Decimal.", "Returned Value", "The Pearson correlation coefficient. Float64."], "Examples": ["DROP TABLE IF EXISTS series;CREATE TABLE series(    i UInt32,    x_value Float64,    y_value Float64)ENGINE = Memory;INSERT INTO series(i, x_value, y_value) VALUES (1, 5.6, -4.4),(2, -9.6, 3),(3, -1.3, -4),(4, 5.3, 9.7),(5, 4.4, 0.037),(6, -8.6, -7.8),(7, 5.1, 9.3),(8, 7.9, -3.6),(9, -8.2, 0.62),(10, -3, 7.3);", "SELECT corrStable(x_value, y_value)FROM series;"], "Category": ["Aggregate Functions"], "index": 147, "vector_txt": "147:Feature: corrStable(x, y)\nDescription: corrStableCalculates the Pearson correlation coefficient: \u03a3(x\u2212x\u02c9)(y\u2212y\u02c9)\u03a3(x\u2212x\u02c9)2\u2217\u03a3(y\u2212y\u02c9)2\\frac{\\Sigma{(x - \\bar{x})(y - \\bar{y})}}{\\sqrt{\\Sigma{(x - \\bar{x})^2} * \\Sigma{(y - \\bar{y})^2}}}\u03a3(x\u2212x\u02c9)2\u2217\u03a3(y\u2212y\u02c9)2\u03a3(x\u2212x\u02c9)(y\u2212y\u02c9)Similar to the corr function, but uses a numerically stable algorithm. As a result, corrStable is slower than corr but produces a more accurate result.SyntaxcorrStable(x, y)Argumentsx \u2014 first variable. (U)Int*, Float*, Decimal.y \u2014 second variable. (U)Int*, Float*, Decimal.Returned ValueThe Pearson correlation coefficient. Float64.\nExamples: DROP TABLE IF EXISTS series;CREATE TABLE series(    i UInt32,    x_value Float64,    y_value Float64)ENGINE = Memory;INSERT INTO series(i, x_value, y_value) VALUES (1, 5.6, -4.4),(2, -9.6, 3),(3, -1.3, -4),(4, 5.3, 9.7),(5, 4.4, 0.037),(6, -8.6, -7.8),(7, 5.1, 9.3),(8, 7.9, -3.6),(9, -8.2, 0.62),(10, -3, 7.3);SELECT corrStable(x_value, y_value)FROM series;\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/count"], "Title": ["count"], "Feature": ["count"], "Description": ["count", "Counts the number of rows or not-NULL values.", "ClickHouse supports the following syntaxes for count:", "count(expr) or COUNT(DISTINCT expr).count() or COUNT(*). The count() syntax is ClickHouse-specific.", "Arguments", "The function can take:", "Zero parameters.One expression.", "Returned value", "If the function is called without parameters it counts the number of rows.If the expression is passed, then the function counts how many times this expression returned not null. If the expression returns a Nullable-type value, then the result of count stays not Nullable. The function returns 0 if the expression returned NULL for all the rows.", "In both cases the type of the returned value is UInt64.", "Details", "ClickHouse supports the COUNT(DISTINCT ...) syntax. The behavior of this construction depends on the count_distinct_implementation setting. It defines which of the uniq* functions is used to perform the operation. The default is the uniqExact function.", "The SELECT count() FROM table query is optimized by default using metadata from MergeTree. If you need to use row-level security, disable optimization using the optimize_trivial_count_query setting.", "However SELECT count(nullable_column) FROM table query can be optimized by enabling the optimize_functions_to_subcolumns setting. With optimize_functions_to_subcolumns = 1 the function reads only null subcolumn instead of reading and processing the whole column data. The query SELECT count(n) FROM table transforms to SELECT sum(NOT n.null) FROM table.", "Improving COUNT(DISTINCT expr) performance", "If your COUNT(DISTINCT expr) query is slow, consider adding a GROUP BY clause as this improves parallelization. You can also use a projection to create an index on the target column used with COUNT(DISTINCT target_col)."], "Examples": ["SELECT count() FROM t", "SELECT name, value FROM system.settings WHERE name = 'count_distinct_implementation'", "SELECT count(DISTINCT num) FROM t"], "Category": ["Aggregate Functions"], "index": 148, "vector_txt": "148:Feature: count\nDescription: countCounts the number of rows or not-NULL values.ClickHouse supports the following syntaxes for count:count(expr) or COUNT(DISTINCT expr).count() or COUNT(*). The count() syntax is ClickHouse-specific.ArgumentsThe function can take:Zero parameters.One expression.Returned valueIf the function is called without parameters it counts the number of rows.If the expression is passed, then the function counts how many times this expression returned not null. If the expression returns a Nullable-type value, then the result of count stays not Nullable. The function returns 0 if the expression returned NULL for all the rows.In both cases the type of the returned value is UInt64.DetailsClickHouse supports the COUNT(DISTINCT ...) syntax. The behavior of this construction depends on the count_distinct_implementation setting. It defines which of the uniq* functions is used to perform the operation. The default is the uniqExact function.The SELECT count() FROM table query is optimized by default using metadata from MergeTree. If you need to use row-level security, disable optimization using the optimize_trivial_count_query setting.However SELECT count(nullable_column) FROM table query can be optimized by enabling the optimize_functions_to_subcolumns setting. With optimize_functions_to_subcolumns = 1 the function reads only null subcolumn instead of reading and processing the whole column data. The query SELECT count(n) FROM table transforms to SELECT sum(NOT n.null) FROM table.Improving COUNT(DISTINCT expr) performanceIf your COUNT(DISTINCT expr) query is slow, consider adding a GROUP BY clause as this improves parallelization. You can also use a projection to create an index on the target column used with COUNT(DISTINCT target_col).\nExamples: SELECT count() FROM tSELECT name, value FROM system.settings WHERE name = 'count_distinct_implementation'SELECT count(DISTINCT num) FROM t\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/covarpop"], "Title": ["covarPop"], "Feature": ["covarPop(x, y)"], "Description": ["covarPop", "Calculates the population covariance:", "\u03a3(x\u2212x\u02c9)(y\u2212y\u02c9)n\\frac{\\Sigma{(x - \\bar{x})(y - \\bar{y})}}{n}n\u03a3(x\u2212x\u02c9)(y\u2212y\u02c9)", "NoteThis function uses a numerically unstable algorithm. If you need numerical stability in calculations, use the covarPopStable function. It works slower but provides a lower computational error.", "Syntax", "covarPop(x, y)", "Arguments", "x \u2014 first variable. (U)Int*, Float*, Decimal.y \u2014 second variable. (U)Int*, Float*, Decimal.", "Returned Value", "The population covariance between x and y. Float64."], "Examples": ["DROP TABLE IF EXISTS series;CREATE TABLE series(i UInt32, x_value Float64, y_value Float64) ENGINE = Memory;INSERT INTO series(i, x_value, y_value) VALUES (1, 5.6, -4.4),(2, -9.6, 3),(3, -1.3, -4),(4, 5.3, 9.7),(5, 4.4, 0.037),(6, -8.6, -7.8),(7, 5.1, 9.3),(8, 7.9, -3.6),(9, -8.2, 0.62),(10, -3, 7.3);", "SELECT covarPop(x_value, y_value)FROM series;"], "Category": ["Aggregate Functions"], "index": 149, "vector_txt": "149:Feature: covarPop(x, y)\nDescription: covarPopCalculates the population covariance:\u03a3(x\u2212x\u02c9)(y\u2212y\u02c9)n\\frac{\\Sigma{(x - \\bar{x})(y - \\bar{y})}}{n}n\u03a3(x\u2212x\u02c9)(y\u2212y\u02c9)NoteThis function uses a numerically unstable algorithm. If you need numerical stability in calculations, use the covarPopStable function. It works slower but provides a lower computational error.SyntaxcovarPop(x, y)Argumentsx \u2014 first variable. (U)Int*, Float*, Decimal.y \u2014 second variable. (U)Int*, Float*, Decimal.Returned ValueThe population covariance between x and y. Float64.\nExamples: DROP TABLE IF EXISTS series;CREATE TABLE series(i UInt32, x_value Float64, y_value Float64) ENGINE = Memory;INSERT INTO series(i, x_value, y_value) VALUES (1, 5.6, -4.4),(2, -9.6, 3),(3, -1.3, -4),(4, 5.3, 9.7),(5, 4.4, 0.037),(6, -8.6, -7.8),(7, 5.1, 9.3),(8, 7.9, -3.6),(9, -8.2, 0.62),(10, -3, 7.3);SELECT covarPop(x_value, y_value)FROM series;\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/covarpopmatrix"], "Title": ["covarPopMatrix"], "Feature": ["covarPopMatrix(x[, ...])"], "Description": ["covarPopMatrix", "Returns the population covariance matrix over N variables.", "Syntax", "covarPopMatrix(x[, ...])", "Arguments", "x \u2014 a variable number of parameters. (U)Int*, Float*, Decimal.", "Returned Value", "Population covariance matrix. Array(Array(Float64))."], "Examples": ["DROP TABLE IF EXISTS test;CREATE TABLE test(    a UInt32,    b Float64,    c Float64,    d Float64)ENGINE = Memory;INSERT INTO test(a, b, c, d) VALUES (1, 5.6, -4.4, 2.6), (2, -9.6, 3, 3.3), (3, -1.3, -4, 1.2), (4, 5.3, 9.7, 2.3), (5, 4.4, 0.037, 1.222), (6, -8.6, -7.8, 2.1233), (7, 5.1, 9.3, 8.1222), (8, 7.9, -3.6, 9.837), (9, -8.2, 0.62, 8.43555), (10, -3, 7.3, 6.762);", "SELECT arrayMap(x -> round(x, 3), arrayJoin(covarPopMatrix(a, b, c, d))) AS covarPopMatrixFROM test;"], "Category": ["Aggregate Functions"], "index": 150, "vector_txt": "150:Feature: covarPopMatrix(x[, ...])\nDescription: covarPopMatrixReturns the population covariance matrix over N variables.SyntaxcovarPopMatrix(x[, ...])Argumentsx \u2014 a variable number of parameters. (U)Int*, Float*, Decimal.Returned ValuePopulation covariance matrix. Array(Array(Float64)).\nExamples: DROP TABLE IF EXISTS test;CREATE TABLE test(    a UInt32,    b Float64,    c Float64,    d Float64)ENGINE = Memory;INSERT INTO test(a, b, c, d) VALUES (1, 5.6, -4.4, 2.6), (2, -9.6, 3, 3.3), (3, -1.3, -4, 1.2), (4, 5.3, 9.7, 2.3), (5, 4.4, 0.037, 1.222), (6, -8.6, -7.8, 2.1233), (7, 5.1, 9.3, 8.1222), (8, 7.9, -3.6, 9.837), (9, -8.2, 0.62, 8.43555), (10, -3, 7.3, 6.762);SELECT arrayMap(x -> round(x, 3), arrayJoin(covarPopMatrix(a, b, c, d))) AS covarPopMatrixFROM test;\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/covarpopstable"], "Title": ["covarPopStable"], "Feature": ["covarPop(x, y)"], "Description": ["covarPopStable", "Calculates the value of the population covariance:", "\u03a3(x\u2212x\u02c9)(y\u2212y\u02c9)n\\frac{\\Sigma{(x - \\bar{x})(y - \\bar{y})}}{n}n\u03a3(x\u2212x\u02c9)(y\u2212y\u02c9)", "It is similar to the covarPop function, but uses a numerically stable algorithm. As a result, covarPopStable is slower than covarPop but produces a more accurate result.", "Syntax", "covarPop(x, y)", "Arguments", "x \u2014 first variable. (U)Int*, Float*, Decimal.y \u2014 second variable. (U)Int*, Float*, Decimal.", "Returned Value", "The population covariance between x and y. Float64."], "Examples": ["DROP TABLE IF EXISTS series;CREATE TABLE series(i UInt32, x_value Float64, y_value Float64) ENGINE = Memory;INSERT INTO series(i, x_value, y_value) VALUES (1, 5.6,-4.4),(2, -9.6,3),(3, -1.3,-4),(4, 5.3,9.7),(5, 4.4,0.037),(6, -8.6,-7.8),(7, 5.1,9.3),(8, 7.9,-3.6),(9, -8.2,0.62),(10, -3,7.3);", "SELECT covarPopStable(x_value, y_value)FROM(    SELECT        x_value,        y_value    FROM series);"], "Category": ["Aggregate Functions"], "index": 151, "vector_txt": "151:Feature: covarPop(x, y)\nDescription: covarPopStableCalculates the value of the population covariance:\u03a3(x\u2212x\u02c9)(y\u2212y\u02c9)n\\frac{\\Sigma{(x - \\bar{x})(y - \\bar{y})}}{n}n\u03a3(x\u2212x\u02c9)(y\u2212y\u02c9)It is similar to the covarPop function, but uses a numerically stable algorithm. As a result, covarPopStable is slower than covarPop but produces a more accurate result.SyntaxcovarPop(x, y)Argumentsx \u2014 first variable. (U)Int*, Float*, Decimal.y \u2014 second variable. (U)Int*, Float*, Decimal.Returned ValueThe population covariance between x and y. Float64.\nExamples: DROP TABLE IF EXISTS series;CREATE TABLE series(i UInt32, x_value Float64, y_value Float64) ENGINE = Memory;INSERT INTO series(i, x_value, y_value) VALUES (1, 5.6,-4.4),(2, -9.6,3),(3, -1.3,-4),(4, 5.3,9.7),(5, 4.4,0.037),(6, -8.6,-7.8),(7, 5.1,9.3),(8, 7.9,-3.6),(9, -8.2,0.62),(10, -3,7.3);SELECT covarPopStable(x_value, y_value)FROM(    SELECT        x_value,        y_value    FROM series);\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/covarsamp"], "Title": ["covarSamp"], "Feature": ["covarSamp(x, y)"], "Description": ["covarSamp", "Calculates the value of \u03a3((x - x\u0305)(y - y\u0305)) / (n - 1).", "NoteThis function uses a numerically unstable algorithm. If you need numerical stability in calculations, use the covarSampStable function. It works slower but provides a lower computational error.", "Syntax", "covarSamp(x, y)", "Arguments", "x \u2014 first variable. (U)Int*, Float*, Decimal.y \u2014 second variable. (U)Int*, Float*, Decimal.", "Returned Value", "The sample covariance between x and y. For n <= 1, nan is returned. Float64."], "Examples": ["DROP TABLE IF EXISTS series;CREATE TABLE series(i UInt32, x_value Float64, y_value Float64) ENGINE = Memory;INSERT INTO series(i, x_value, y_value) VALUES (1, 5.6,-4.4),(2, -9.6,3),(3, -1.3,-4),(4, 5.3,9.7),(5, 4.4,0.037),(6, -8.6,-7.8),(7, 5.1,9.3),(8, 7.9,-3.6),(9, -8.2,0.62),(10, -3,7.3);", "SELECT covarSamp(x_value, y_value)FROM(    SELECT        x_value,        y_value    FROM series);", "SELECT covarSamp(x_value, y_value)FROM(    SELECT        x_value,        y_value    FROM series LIMIT 1);"], "Category": ["Aggregate Functions"], "index": 152, "vector_txt": "152:Feature: covarSamp(x, y)\nDescription: covarSampCalculates the value of \u03a3((x - x\u0305)(y - y\u0305)) / (n - 1).NoteThis function uses a numerically unstable algorithm. If you need numerical stability in calculations, use the covarSampStable function. It works slower but provides a lower computational error.SyntaxcovarSamp(x, y)Argumentsx \u2014 first variable. (U)Int*, Float*, Decimal.y \u2014 second variable. (U)Int*, Float*, Decimal.Returned ValueThe sample covariance between x and y. For n <= 1, nan is returned. Float64.\nExamples: DROP TABLE IF EXISTS series;CREATE TABLE series(i UInt32, x_value Float64, y_value Float64) ENGINE = Memory;INSERT INTO series(i, x_value, y_value) VALUES (1, 5.6,-4.4),(2, -9.6,3),(3, -1.3,-4),(4, 5.3,9.7),(5, 4.4,0.037),(6, -8.6,-7.8),(7, 5.1,9.3),(8, 7.9,-3.6),(9, -8.2,0.62),(10, -3,7.3);SELECT covarSamp(x_value, y_value)FROM(    SELECT        x_value,        y_value    FROM series);SELECT covarSamp(x_value, y_value)FROM(    SELECT        x_value,        y_value    FROM series LIMIT 1);\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/covarsampmatrix"], "Title": ["covarSampMatrix"], "Feature": ["covarSampMatrix(x[, ...])"], "Description": ["covarSampMatrix", "Returns the sample covariance matrix over N variables.", "Syntax", "covarSampMatrix(x[, ...])", "Arguments", "x \u2014 a variable number of parameters. (U)Int*, Float*, Decimal.", "Returned Value", "Sample covariance matrix. Array(Array(Float64))."], "Examples": ["DROP TABLE IF EXISTS test;CREATE TABLE test(    a UInt32,    b Float64,    c Float64,    d Float64)ENGINE = Memory;INSERT INTO test(a, b, c, d) VALUES (1, 5.6, -4.4, 2.6), (2, -9.6, 3, 3.3), (3, -1.3, -4, 1.2), (4, 5.3, 9.7, 2.3), (5, 4.4, 0.037, 1.222), (6, -8.6, -7.8, 2.1233), (7, 5.1, 9.3, 8.1222), (8, 7.9, -3.6, 9.837), (9, -8.2, 0.62, 8.43555), (10, -3, 7.3, 6.762);", "SELECT arrayMap(x -> round(x, 3), arrayJoin(covarSampMatrix(a, b, c, d))) AS covarSampMatrixFROM test;"], "Category": ["Aggregate Functions"], "index": 153, "vector_txt": "153:Feature: covarSampMatrix(x[, ...])\nDescription: covarSampMatrixReturns the sample covariance matrix over N variables.SyntaxcovarSampMatrix(x[, ...])Argumentsx \u2014 a variable number of parameters. (U)Int*, Float*, Decimal.Returned ValueSample covariance matrix. Array(Array(Float64)).\nExamples: DROP TABLE IF EXISTS test;CREATE TABLE test(    a UInt32,    b Float64,    c Float64,    d Float64)ENGINE = Memory;INSERT INTO test(a, b, c, d) VALUES (1, 5.6, -4.4, 2.6), (2, -9.6, 3, 3.3), (3, -1.3, -4, 1.2), (4, 5.3, 9.7, 2.3), (5, 4.4, 0.037, 1.222), (6, -8.6, -7.8, 2.1233), (7, 5.1, 9.3, 8.1222), (8, 7.9, -3.6, 9.837), (9, -8.2, 0.62, 8.43555), (10, -3, 7.3, 6.762);SELECT arrayMap(x -> round(x, 3), arrayJoin(covarSampMatrix(a, b, c, d))) AS covarSampMatrixFROM test;\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/covarsampstable"], "Title": ["covarSampStable"], "Feature": ["covarSampStable(x, y)"], "Description": ["covarSampStable", "Calculates the value of \u03a3((x - x\u0305)(y - y\u0305)) / (n - 1). Similar to covarSamp but works slower while providing a lower computational error.", "Syntax", "covarSampStable(x, y)", "Arguments", "x \u2014 first variable. (U)Int*, Float*, Decimal.y \u2014 second variable. (U)Int*, Float*, Decimal.", "Returned Value", "The sample covariance between x and y. For n <= 1, inf is returned. Float64."], "Examples": ["DROP TABLE IF EXISTS series;CREATE TABLE series(i UInt32, x_value Float64, y_value Float64) ENGINE = Memory;INSERT INTO series(i, x_value, y_value) VALUES (1, 5.6,-4.4),(2, -9.6,3),(3, -1.3,-4),(4, 5.3,9.7),(5, 4.4,0.037),(6, -8.6,-7.8),(7, 5.1,9.3),(8, 7.9,-3.6),(9, -8.2,0.62),(10, -3,7.3);", "SELECT covarSampStable(x_value, y_value)FROM(    SELECT        x_value,        y_value    FROM series);", "SELECT covarSampStable(x_value, y_value)FROM(    SELECT        x_value,        y_value    FROM series LIMIT 1);"], "Category": ["Aggregate Functions"], "index": 154, "vector_txt": "154:Feature: covarSampStable(x, y)\nDescription: covarSampStableCalculates the value of \u03a3((x - x\u0305)(y - y\u0305)) / (n - 1). Similar to covarSamp but works slower while providing a lower computational error.SyntaxcovarSampStable(x, y)Argumentsx \u2014 first variable. (U)Int*, Float*, Decimal.y \u2014 second variable. (U)Int*, Float*, Decimal.Returned ValueThe sample covariance between x and y. For n <= 1, inf is returned. Float64.\nExamples: DROP TABLE IF EXISTS series;CREATE TABLE series(i UInt32, x_value Float64, y_value Float64) ENGINE = Memory;INSERT INTO series(i, x_value, y_value) VALUES (1, 5.6,-4.4),(2, -9.6,3),(3, -1.3,-4),(4, 5.3,9.7),(5, 4.4,0.037),(6, -8.6,-7.8),(7, 5.1,9.3),(8, 7.9,-3.6),(9, -8.2,0.62),(10, -3,7.3);SELECT covarSampStable(x_value, y_value)FROM(    SELECT        x_value,        y_value    FROM series);SELECT covarSampStable(x_value, y_value)FROM(    SELECT        x_value,        y_value    FROM series LIMIT 1);\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayRandomSample"], "Feature": ["arrayRandomSample(arr, samples)"], "Description": ["arrayRandomSample", "Function arrayRandomSample returns a subset with samples-many random elements of an input array. If samples exceeds the size of the input array, the sample size is limited to the size of the array, i.e. all array elements are returned but their order is not guaranteed. The function can handle both flat arrays and nested arrays.", "Syntax", "arrayRandomSample(arr, samples)", "Arguments", "arr \u2014 The input array from which to sample elements. (Array(T))samples \u2014 The number of elements to include in the random sample (UInt*)", "Returned Value", "An array containing a random sample of elements from the input array. Array."], "Examples": ["SELECT arrayRandomSample(['apple', 'banana', 'cherry', 'date'], 2) as res;", "SELECT arrayRandomSample([[1, 2], [3, 4], [5, 6]], 2) as res;", "SELECT arrayRandomSample([1, 2, 3], 5) as res;"], "Category": ["Arrays Functions"], "index": 155, "vector_txt": "155:Feature: arrayRandomSample(arr, samples)\nDescription: arrayRandomSampleFunction arrayRandomSample returns a subset with samples-many random elements of an input array. If samples exceeds the size of the input array, the sample size is limited to the size of the array, i.e. all array elements are returned but their order is not guaranteed. The function can handle both flat arrays and nested arrays.SyntaxarrayRandomSample(arr, samples)Argumentsarr \u2014 The input array from which to sample elements. (Array(T))samples \u2014 The number of elements to include in the random sample (UInt*)Returned ValueAn array containing a random sample of elements from the input array. Array.\nExamples: SELECT arrayRandomSample(['apple', 'banana', 'cherry', 'date'], 2) as res;SELECT arrayRandomSample([[1, 2], [3, 4], [5, 6]], 2) as res;SELECT arrayRandomSample([1, 2, 3], 5) as res;\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/cramersv"], "Title": ["cramersV"], "Feature": ["cramersV(column1, column2)"], "Description": ["cramersV", "Cramer's V (sometimes referred to as Cramer's phi) is a measure of association between two columns in a table. The result of the cramersV function ranges from 0 (corresponding to no association between the variables) to 1 and can reach 1 only when each value is completely determined by the other. It may be viewed as the association between two variables as a percentage of their maximum possible variation.", "NoteFor a bias corrected version of Cramer's V see: cramersVBiasCorrected", "Syntax", "cramersV(column1, column2)", "Parameters", "column1: first column to be compared.column2: second column to be compared.", "Returned value", "a value between 0 (corresponding to no association between the columns' values) to 1 (complete association).", "Type: always Float64."], "Examples": ["SELECT    cramersV(a, b)FROM    (        SELECT            number % 3 AS a,            number % 5 AS b        FROM            numbers(150)    );", "SELECT    cramersV(a, b)FROM    (        SELECT            number % 10 AS a,            number % 5 AS b        FROM            numbers(150)    );"], "Category": ["Aggregate Functions"], "index": 156, "vector_txt": "156:Feature: cramersV(column1, column2)\nDescription: cramersVCramer's V (sometimes referred to as Cramer's phi) is a measure of association between two columns in a table. The result of the cramersV function ranges from 0 (corresponding to no association between the variables) to 1 and can reach 1 only when each value is completely determined by the other. It may be viewed as the association between two variables as a percentage of their maximum possible variation.NoteFor a bias corrected version of Cramer's V see: cramersVBiasCorrectedSyntaxcramersV(column1, column2)Parameterscolumn1: first column to be compared.column2: second column to be compared.Returned valuea value between 0 (corresponding to no association between the columns' values) to 1 (complete association).Type: always Float64.\nExamples: SELECT    cramersV(a, b)FROM    (        SELECT            number % 3 AS a,            number % 5 AS b        FROM            numbers(150)    );SELECT    cramersV(a, b)FROM    (        SELECT            number % 10 AS a,            number % 5 AS b        FROM            numbers(150)    );\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/cramersvbiascorrected"], "Title": ["cramersVBiasCorrected"], "Feature": ["cramersVBiasCorrected(column1, column2)"], "Description": ["cramersVBiasCorrected", "Cramer's V is a measure of association between two columns in a table. The result of the cramersV function ranges from 0 (corresponding to no association between the variables) to 1 and can reach 1 only when each value is completely determined by the other. The function can be heavily biased, so this version of Cramer's V uses the bias correction.", "Syntax", "cramersVBiasCorrected(column1, column2)", "Parameters", "column1: first column to be compared.column2: second column to be compared.", "Returned value", "a value between 0 (corresponding to no association between the columns' values) to 1 (complete association).", "Type: always Float64."], "Examples": ["SELECT    cramersV(a, b),    cramersVBiasCorrected(a ,b)FROM    (        SELECT            number % 10 AS a,            number % 4 AS b        FROM            numbers(150)    );"], "Category": ["Aggregate Functions"], "index": 157, "vector_txt": "157:Feature: cramersVBiasCorrected(column1, column2)\nDescription: cramersVBiasCorrectedCramer's V is a measure of association between two columns in a table. The result of the cramersV function ranges from 0 (corresponding to no association between the variables) to 1 and can reach 1 only when each value is completely determined by the other. The function can be heavily biased, so this version of Cramer's V uses the bias correction.SyntaxcramersVBiasCorrected(column1, column2)Parameterscolumn1: first column to be compared.column2: second column to be compared.Returned valuea value between 0 (corresponding to no association between the columns' values) to 1 (complete association).Type: always Float64.\nExamples: SELECT    cramersV(a, b),    cramersVBiasCorrected(a ,b)FROM    (        SELECT            number % 10 AS a,            number % 4 AS b        FROM            numbers(150)    );\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/deltasum"], "Title": ["See Also"], "Feature": ["See Also"], "Description": ["See Also", "runningDifference"], "Examples": [], "Category": ["Aggregate Functions"], "index": 158, "vector_txt": "158:Feature: See Also\nDescription: See AlsorunningDifference\nExamples: \nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/entropy"], "Title": ["entropy"], "Feature": ["entropy(val)"], "Description": ["entropy", "Calculates Shannon entropy of a column of values.", "Syntax", "entropy(val)", "Arguments", "val \u2014 Column of values of any type.", "Returned value", "Shannon entropy.", "Type: Float64."], "Examples": ["CREATE TABLE entropy (`vals` UInt32,`strings` String) ENGINE = Memory;INSERT INTO entropy VALUES (1, 'A'), (1, 'A'), (1,'A'), (1,'A'), (2,'B'), (2,'B'), (2,'C'), (2,'D');SELECT entropy(vals), entropy(strings) FROM entropy;"], "Category": ["Aggregate Functions"], "index": 159, "vector_txt": "159:Feature: entropy(val)\nDescription: entropyCalculates Shannon entropy of a column of values.Syntaxentropy(val)Argumentsval \u2014 Column of values of any type.Returned valueShannon entropy.Type: Float64.\nExamples: CREATE TABLE entropy (`vals` UInt32,`strings` String) ENGINE = Memory;INSERT INTO entropy VALUES (1, 'A'), (1, 'A'), (1,'A'), (1,'A'), (2,'B'), (2,'B'), (2,'C'), (2,'D');SELECT entropy(vals), entropy(strings) FROM entropy;\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/exponentialMovingAverage"], "Title": ["exponentialMovingAverage"], "Feature": ["exponentialMovingAverage(x)(value, timeunit)"], "Description": ["exponentialMovingAverage", "Calculates the exponential moving average of values for the determined time.", "Syntax", "exponentialMovingAverage(x)(value, timeunit)", "Each value corresponds to the determinate timeunit. The half-life x is the time lag at which the exponential weights decay by one-half. The function returns a weighted average: the older the time point, the less weight the corresponding value is considered to be.", "Arguments", "value \u2014 Value. Integer, Float or Decimal.timeunit \u2014 Timeunit. Integer, Float or Decimal. Timeunit is not timestamp (seconds), it's -- an index of the time interval. Can be calculated using intDiv.", "Parameters", "x \u2014 Half-life period. Integer, Float or Decimal.", "Returned values", "Returns an exponentially smoothed moving average of the values for the past x time at the latest point of time.", "Type: Float64."], "Examples": ["SELECT exponentialMovingAverage(5)(temperature, timestamp);", "SELECT    value,    time,    round(exp_smooth, 3),    bar(exp_smooth, 0, 1, 50) AS barFROM(    SELECT        (number = 0) OR (number >= 25) AS value,        number AS time,        exponentialMovingAverage(10)(value, time) OVER (Rows BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth    FROM numbers(50))", "CREATE TABLE dataENGINE = Memory ASSELECT    10 AS value,    toDateTime('2020-01-01') + (3600 * number) AS timeFROM numbers_mt(10);-- Calculate timeunit using intDivSELECT    value,    time,    exponentialMovingAverage(1)(value, intDiv(toUInt32(time), 3600)) OVER (ORDER BY time ASC) AS res,    intDiv(toUInt32(time), 3600) AS timeunitFROM dataORDER BY time ASC;\u250c\u2500value\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500time\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500res\u2500\u252c\u2500timeunit\u2500\u2510\u2502    10 \u2502 2020-01-01 00:00:00 \u2502           5 \u2502   438288 \u2502\u2502    10 \u2502 2020-01-01 01:00:00 \u2502         7.5 \u2502   438289 \u2502\u2502    10 \u2502 2020-01-01 02:00:00 \u2502        8.75 \u2502   438290 \u2502\u2502    10 \u2502 2020-01-01 03:00:00 \u2502       9.375 \u2502   438291 \u2502\u2502    10 \u2502 2020-01-01 04:00:00 \u2502      9.6875 \u2502   438292 \u2502\u2502    10 \u2502 2020-01-01 05:00:00 \u2502     9.84375 \u2502   438293 \u2502\u2502    10 \u2502 2020-01-01 06:00:00 \u2502    9.921875 \u2502   438294 \u2502\u2502    10 \u2502 2020-01-01 07:00:00 \u2502   9.9609375 \u2502   438295 \u2502\u2502    10 \u2502 2020-01-01 08:00:00 \u2502  9.98046875 \u2502   438296 \u2502\u2502    10 \u2502 2020-01-01 09:00:00 \u2502 9.990234375 \u2502   438297 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518-- Calculate timeunit using toRelativeHourNumSELECT    value,    time,    exponentialMovingAverage(1)(value, toRelativeHourNum(time)) OVER (ORDER BY time ASC) AS res,    toRelativeHourNum(time) AS timeunitFROM dataORDER BY time ASC;\u250c\u2500value\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500time\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500res\u2500\u252c\u2500timeunit\u2500\u2510\u2502    10 \u2502 2020-01-01 00:00:00 \u2502           5 \u2502   438288 \u2502\u2502    10 \u2502 2020-01-01 01:00:00 \u2502         7.5 \u2502   438289 \u2502\u2502    10 \u2502 2020-01-01 02:00:00 \u2502        8.75 \u2502   438290 \u2502\u2502    10 \u2502 2020-01-01 03:00:00 \u2502       9.375 \u2502   438291 \u2502\u2502    10 \u2502 2020-01-01 04:00:00 \u2502      9.6875 \u2502   438292 \u2502\u2502    10 \u2502 2020-01-01 05:00:00 \u2502     9.84375 \u2502   438293 \u2502\u2502    10 \u2502 2020-01-01 06:00:00 \u2502    9.921875 \u2502   438294 \u2502\u2502    10 \u2502 2020-01-01 07:00:00 \u2502   9.9609375 \u2502   438295 \u2502\u2502    10 \u2502 2020-01-01 08:00:00 \u2502  9.98046875 \u2502   438296 \u2502\u2502    10 \u2502 2020-01-01 09:00:00 \u2502 9.990234375 \u2502   438297 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Category": ["Aggregate Functions"], "index": 160, "vector_txt": "160:Feature: exponentialMovingAverage(x)(value, timeunit)\nDescription: exponentialMovingAverageCalculates the exponential moving average of values for the determined time.SyntaxexponentialMovingAverage(x)(value, timeunit)Each value corresponds to the determinate timeunit. The half-life x is the time lag at which the exponential weights decay by one-half. The function returns a weighted average: the older the time point, the less weight the corresponding value is considered to be.Argumentsvalue \u2014 Value. Integer, Float or Decimal.timeunit \u2014 Timeunit. Integer, Float or Decimal. Timeunit is not timestamp (seconds), it's -- an index of the time interval. Can be calculated using intDiv.Parametersx \u2014 Half-life period. Integer, Float or Decimal.Returned valuesReturns an exponentially smoothed moving average of the values for the past x time at the latest point of time.Type: Float64.\nExamples: SELECT exponentialMovingAverage(5)(temperature, timestamp);SELECT    value,    time,    round(exp_smooth, 3),    bar(exp_smooth, 0, 1, 50) AS barFROM(    SELECT        (number = 0) OR (number >= 25) AS value,        number AS time,        exponentialMovingAverage(10)(value, time) OVER (Rows BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth    FROM numbers(50))CREATE TABLE dataENGINE = Memory ASSELECT    10 AS value,    toDateTime('2020-01-01') + (3600 * number) AS timeFROM numbers_mt(10);-- Calculate timeunit using intDivSELECT    value,    time,    exponentialMovingAverage(1)(value, intDiv(toUInt32(time), 3600)) OVER (ORDER BY time ASC) AS res,    intDiv(toUInt32(time), 3600) AS timeunitFROM dataORDER BY time ASC;\u250c\u2500value\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500time\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500res\u2500\u252c\u2500timeunit\u2500\u2510\u2502    10 \u2502 2020-01-01 00:00:00 \u2502           5 \u2502   438288 \u2502\u2502    10 \u2502 2020-01-01 01:00:00 \u2502         7.5 \u2502   438289 \u2502\u2502    10 \u2502 2020-01-01 02:00:00 \u2502        8.75 \u2502   438290 \u2502\u2502    10 \u2502 2020-01-01 03:00:00 \u2502       9.375 \u2502   438291 \u2502\u2502    10 \u2502 2020-01-01 04:00:00 \u2502      9.6875 \u2502   438292 \u2502\u2502    10 \u2502 2020-01-01 05:00:00 \u2502     9.84375 \u2502   438293 \u2502\u2502    10 \u2502 2020-01-01 06:00:00 \u2502    9.921875 \u2502   438294 \u2502\u2502    10 \u2502 2020-01-01 07:00:00 \u2502   9.9609375 \u2502   438295 \u2502\u2502    10 \u2502 2020-01-01 08:00:00 \u2502  9.98046875 \u2502   438296 \u2502\u2502    10 \u2502 2020-01-01 09:00:00 \u2502 9.990234375 \u2502   438297 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518-- Calculate timeunit using toRelativeHourNumSELECT    value,    time,    exponentialMovingAverage(1)(value, toRelativeHourNum(time)) OVER (ORDER BY time ASC) AS res,    toRelativeHourNum(time) AS timeunitFROM dataORDER BY time ASC;\u250c\u2500value\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500time\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500res\u2500\u252c\u2500timeunit\u2500\u2510\u2502    10 \u2502 2020-01-01 00:00:00 \u2502           5 \u2502   438288 \u2502\u2502    10 \u2502 2020-01-01 01:00:00 \u2502         7.5 \u2502   438289 \u2502\u2502    10 \u2502 2020-01-01 02:00:00 \u2502        8.75 \u2502   438290 \u2502\u2502    10 \u2502 2020-01-01 03:00:00 \u2502       9.375 \u2502   438291 \u2502\u2502    10 \u2502 2020-01-01 04:00:00 \u2502      9.6875 \u2502   438292 \u2502\u2502    10 \u2502 2020-01-01 05:00:00 \u2502     9.84375 \u2502   438293 \u2502\u2502    10 \u2502 2020-01-01 06:00:00 \u2502    9.921875 \u2502   438294 \u2502\u2502    10 \u2502 2020-01-01 07:00:00 \u2502   9.9609375 \u2502   438295 \u2502\u2502    10 \u2502 2020-01-01 08:00:00 \u2502  9.98046875 \u2502   438296 \u2502\u2502    10 \u2502 2020-01-01 09:00:00 \u2502 9.990234375 \u2502   438297 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/exponentialTimeDecayedAvg"], "Title": ["exponentialTimeDecayedAvg"], "Feature": ["exponentialTimeDecayedAvg(x)(v, t)"], "Description": ["exponentialTimeDecayedAvg", "Returns the exponentially smoothed weighted moving average of values of a time series at point t in time.", "Syntax", "exponentialTimeDecayedAvg(x)(v, t)", "Arguments", "v \u2014 Value. Integer, Float or Decimal.t \u2014 Time. Integer, Float or Decimal, DateTime, DateTime64.", "Parameters", "x \u2014 Half-life period. Integer, Float or Decimal.", "Returned values", "Returns an exponentially smoothed weighted moving average at index t in time. Float64."], "Examples": ["SELECT    value,    time,    round(exp_smooth, 3),    bar(exp_smooth, 0, 5, 50) AS barFROM    (    SELECT    (number = 0) OR (number >= 25) AS value,    number AS time,    exponentialTimeDecayedAvg(10)(value, time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth    FROM numbers(50)    );", "   \u250c\u2500value\u2500\u252c\u2500time\u2500\u252c\u2500round(exp_smooth, 3)\u2500\u252c\u2500bar\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25101. \u2502     1 \u2502    0 \u2502                    1 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u25022. \u2502     0 \u2502    1 \u2502                0.475 \u2502 \u2588\u2588\u2588\u2588\u258a      \u25023. \u2502     0 \u2502    2 \u2502                0.301 \u2502 \u2588\u2588\u2588        \u25024. \u2502     0 \u2502    3 \u2502                0.214 \u2502 \u2588\u2588\u258f        \u25025. \u2502     0 \u2502    4 \u2502                0.162 \u2502 \u2588\u258c         \u25026. \u2502     0 \u2502    5 \u2502                0.128 \u2502 \u2588\u258e         \u25027. \u2502     0 \u2502    6 \u2502                0.104 \u2502 \u2588          \u25028. \u2502     0 \u2502    7 \u2502                0.086 \u2502 \u258a          \u25029. \u2502     0 \u2502    8 \u2502                0.072 \u2502 \u258b          \u25020. \u2502     0 \u2502    9 \u2502                0.061 \u2502 \u258c          \u25021. \u2502     0 \u2502   10 \u2502                0.052 \u2502 \u258c          \u25022. \u2502     0 \u2502   11 \u2502                0.045 \u2502 \u258d          \u25023. \u2502     0 \u2502   12 \u2502                0.039 \u2502 \u258d          \u25024. \u2502     0 \u2502   13 \u2502                0.034 \u2502 \u258e          \u25025. \u2502     0 \u2502   14 \u2502                 0.03 \u2502 \u258e          \u25026. \u2502     0 \u2502   15 \u2502                0.027 \u2502 \u258e          \u25027. \u2502     0 \u2502   16 \u2502                0.024 \u2502 \u258f          \u25028. \u2502     0 \u2502   17 \u2502                0.021 \u2502 \u258f          \u25029. \u2502     0 \u2502   18 \u2502                0.018 \u2502 \u258f          \u25020. \u2502     0 \u2502   19 \u2502                0.016 \u2502 \u258f          \u25021. \u2502     0 \u2502   20 \u2502                0.015 \u2502 \u258f          \u25022. \u2502     0 \u2502   21 \u2502                0.013 \u2502 \u258f          \u25023. \u2502     0 \u2502   22 \u2502                0.012 \u2502            \u25024. \u2502     0 \u2502   23 \u2502                 0.01 \u2502            \u25025. \u2502     0 \u2502   24 \u2502                0.009 \u2502            \u25026. \u2502     1 \u2502   25 \u2502                0.111 \u2502 \u2588          \u25027. \u2502     1 \u2502   26 \u2502                0.202 \u2502 \u2588\u2588         \u25028. \u2502     1 \u2502   27 \u2502                0.283 \u2502 \u2588\u2588\u258a        \u25029. \u2502     1 \u2502   28 \u2502                0.355 \u2502 \u2588\u2588\u2588\u258c       \u25020. \u2502     1 \u2502   29 \u2502                 0.42 \u2502 \u2588\u2588\u2588\u2588\u258f      \u25021. \u2502     1 \u2502   30 \u2502                0.477 \u2502 \u2588\u2588\u2588\u2588\u258a      \u25022. \u2502     1 \u2502   31 \u2502                0.529 \u2502 \u2588\u2588\u2588\u2588\u2588\u258e     \u25023. \u2502     1 \u2502   32 \u2502                0.576 \u2502 \u2588\u2588\u2588\u2588\u2588\u258a     \u25024. \u2502     1 \u2502   33 \u2502                0.618 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u258f    \u25025. \u2502     1 \u2502   34 \u2502                0.655 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u258c    \u25026. \u2502     1 \u2502   35 \u2502                0.689 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2589    \u25027. \u2502     1 \u2502   36 \u2502                0.719 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f   \u25028. \u2502     1 \u2502   37 \u2502                0.747 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d   \u25029. \u2502     1 \u2502   38 \u2502                0.771 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b   \u25020. \u2502     1 \u2502   39 \u2502                0.793 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589   \u25021. \u2502     1 \u2502   40 \u2502                0.813 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  \u25022. \u2502     1 \u2502   41 \u2502                0.831 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  \u25023. \u2502     1 \u2502   42 \u2502                0.848 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  \u25024. \u2502     1 \u2502   43 \u2502                0.862 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  \u25025. \u2502     1 \u2502   44 \u2502                0.876 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  \u25026. \u2502     1 \u2502   45 \u2502                0.888 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  \u25027. \u2502     1 \u2502   46 \u2502                0.898 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  \u25028. \u2502     1 \u2502   47 \u2502                0.908 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u25029. \u2502     1 \u2502   48 \u2502                0.917 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f \u25020. \u2502     1 \u2502   49 \u2502                0.925 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f \u2502   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Category": ["Aggregate Functions"], "index": 161, "vector_txt": "161:Feature: exponentialTimeDecayedAvg(x)(v, t)\nDescription: exponentialTimeDecayedAvgReturns the exponentially smoothed weighted moving average of values of a time series at point t in time.SyntaxexponentialTimeDecayedAvg(x)(v, t)Argumentsv \u2014 Value. Integer, Float or Decimal.t \u2014 Time. Integer, Float or Decimal, DateTime, DateTime64.Parametersx \u2014 Half-life period. Integer, Float or Decimal.Returned valuesReturns an exponentially smoothed weighted moving average at index t in time. Float64.\nExamples: SELECT    value,    time,    round(exp_smooth, 3),    bar(exp_smooth, 0, 5, 50) AS barFROM    (    SELECT    (number = 0) OR (number >= 25) AS value,    number AS time,    exponentialTimeDecayedAvg(10)(value, time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth    FROM numbers(50)    );   \u250c\u2500value\u2500\u252c\u2500time\u2500\u252c\u2500round(exp_smooth, 3)\u2500\u252c\u2500bar\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25101. \u2502     1 \u2502    0 \u2502                    1 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u25022. \u2502     0 \u2502    1 \u2502                0.475 \u2502 \u2588\u2588\u2588\u2588\u258a      \u25023. \u2502     0 \u2502    2 \u2502                0.301 \u2502 \u2588\u2588\u2588        \u25024. \u2502     0 \u2502    3 \u2502                0.214 \u2502 \u2588\u2588\u258f        \u25025. \u2502     0 \u2502    4 \u2502                0.162 \u2502 \u2588\u258c         \u25026. \u2502     0 \u2502    5 \u2502                0.128 \u2502 \u2588\u258e         \u25027. \u2502     0 \u2502    6 \u2502                0.104 \u2502 \u2588          \u25028. \u2502     0 \u2502    7 \u2502                0.086 \u2502 \u258a          \u25029. \u2502     0 \u2502    8 \u2502                0.072 \u2502 \u258b          \u25020. \u2502     0 \u2502    9 \u2502                0.061 \u2502 \u258c          \u25021. \u2502     0 \u2502   10 \u2502                0.052 \u2502 \u258c          \u25022. \u2502     0 \u2502   11 \u2502                0.045 \u2502 \u258d          \u25023. \u2502     0 \u2502   12 \u2502                0.039 \u2502 \u258d          \u25024. \u2502     0 \u2502   13 \u2502                0.034 \u2502 \u258e          \u25025. \u2502     0 \u2502   14 \u2502                 0.03 \u2502 \u258e          \u25026. \u2502     0 \u2502   15 \u2502                0.027 \u2502 \u258e          \u25027. \u2502     0 \u2502   16 \u2502                0.024 \u2502 \u258f          \u25028. \u2502     0 \u2502   17 \u2502                0.021 \u2502 \u258f          \u25029. \u2502     0 \u2502   18 \u2502                0.018 \u2502 \u258f          \u25020. \u2502     0 \u2502   19 \u2502                0.016 \u2502 \u258f          \u25021. \u2502     0 \u2502   20 \u2502                0.015 \u2502 \u258f          \u25022. \u2502     0 \u2502   21 \u2502                0.013 \u2502 \u258f          \u25023. \u2502     0 \u2502   22 \u2502                0.012 \u2502            \u25024. \u2502     0 \u2502   23 \u2502                 0.01 \u2502            \u25025. \u2502     0 \u2502   24 \u2502                0.009 \u2502            \u25026. \u2502     1 \u2502   25 \u2502                0.111 \u2502 \u2588          \u25027. \u2502     1 \u2502   26 \u2502                0.202 \u2502 \u2588\u2588         \u25028. \u2502     1 \u2502   27 \u2502                0.283 \u2502 \u2588\u2588\u258a        \u25029. \u2502     1 \u2502   28 \u2502                0.355 \u2502 \u2588\u2588\u2588\u258c       \u25020. \u2502     1 \u2502   29 \u2502                 0.42 \u2502 \u2588\u2588\u2588\u2588\u258f      \u25021. \u2502     1 \u2502   30 \u2502                0.477 \u2502 \u2588\u2588\u2588\u2588\u258a      \u25022. \u2502     1 \u2502   31 \u2502                0.529 \u2502 \u2588\u2588\u2588\u2588\u2588\u258e     \u25023. \u2502     1 \u2502   32 \u2502                0.576 \u2502 \u2588\u2588\u2588\u2588\u2588\u258a     \u25024. \u2502     1 \u2502   33 \u2502                0.618 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u258f    \u25025. \u2502     1 \u2502   34 \u2502                0.655 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u258c    \u25026. \u2502     1 \u2502   35 \u2502                0.689 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2589    \u25027. \u2502     1 \u2502   36 \u2502                0.719 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f   \u25028. \u2502     1 \u2502   37 \u2502                0.747 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d   \u25029. \u2502     1 \u2502   38 \u2502                0.771 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b   \u25020. \u2502     1 \u2502   39 \u2502                0.793 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589   \u25021. \u2502     1 \u2502   40 \u2502                0.813 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  \u25022. \u2502     1 \u2502   41 \u2502                0.831 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  \u25023. \u2502     1 \u2502   42 \u2502                0.848 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  \u25024. \u2502     1 \u2502   43 \u2502                0.862 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  \u25025. \u2502     1 \u2502   44 \u2502                0.876 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  \u25026. \u2502     1 \u2502   45 \u2502                0.888 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  \u25027. \u2502     1 \u2502   46 \u2502                0.898 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  \u25028. \u2502     1 \u2502   47 \u2502                0.908 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u25029. \u2502     1 \u2502   48 \u2502                0.917 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f \u25020. \u2502     1 \u2502   49 \u2502                0.925 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f \u2502   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/exponentialTimeDecayedCount"], "Title": ["exponentialTimeDecayedCount"], "Feature": ["exponentialTimeDecayedCount(x)(t)"], "Description": ["exponentialTimeDecayedCount", "Returns the cumulative exponential decay over a time series at the index t in time.", "Syntax", "exponentialTimeDecayedCount(x)(t)", "Arguments", "t \u2014 Time. Integer, Float or Decimal, DateTime, DateTime64.", "Parameters", "x \u2014 Half-life period. Integer, Float or Decimal.", "Returned values", "Returns the cumulative exponential decay at the given point in time. Float64."], "Examples": ["SELECT    value,    time,    round(exp_smooth, 3),    bar(exp_smooth, 0, 20, 50) AS barFROM(    SELECT        (number % 5) = 0 AS value,        number AS time,        exponentialTimeDecayedCount(10)(time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth    FROM numbers(50));"], "Category": ["Aggregate Functions"], "index": 162, "vector_txt": "162:Feature: exponentialTimeDecayedCount(x)(t)\nDescription: exponentialTimeDecayedCountReturns the cumulative exponential decay over a time series at the index t in time.SyntaxexponentialTimeDecayedCount(x)(t)Argumentst \u2014 Time. Integer, Float or Decimal, DateTime, DateTime64.Parametersx \u2014 Half-life period. Integer, Float or Decimal.Returned valuesReturns the cumulative exponential decay at the given point in time. Float64.\nExamples: SELECT    value,    time,    round(exp_smooth, 3),    bar(exp_smooth, 0, 20, 50) AS barFROM(    SELECT        (number % 5) = 0 AS value,        number AS time,        exponentialTimeDecayedCount(10)(time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth    FROM numbers(50));\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/exponentialTimeDecayedMax"], "Title": ["exponentialTimeDecayedMax"], "Feature": ["exponentialTimeDecayedMax(x)(value, timeunit)"], "Description": ["exponentialTimeDecayedMax", "Returns the maximum of the computed exponentially smoothed moving average at index t in time with that at t-1. ", "Syntax", "exponentialTimeDecayedMax(x)(value, timeunit)", "Arguments", "value \u2014 Value. Integer, Float or Decimal.timeunit \u2014 Timeunit. Integer, Float or Decimal, DateTime, DateTime64.", "Parameters", "x \u2014 Half-life period. Integer, Float or Decimal.", "Returned values", "Returns the maximum of the exponentially smoothed weighted moving average at t and t-1. Float64."], "Examples": ["SELECT    value,    time,    round(exp_smooth, 3),    bar(exp_smooth, 0, 5, 50) AS barFROM    (    SELECT    (number = 0) OR (number >= 25) AS value,    number AS time,    exponentialTimeDecayedMax(10)(value, time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth    FROM numbers(50)    );"], "Category": ["Aggregate Functions"], "index": 163, "vector_txt": "163:Feature: exponentialTimeDecayedMax(x)(value, timeunit)\nDescription: exponentialTimeDecayedMaxReturns the maximum of the computed exponentially smoothed moving average at index t in time with that at t-1. SyntaxexponentialTimeDecayedMax(x)(value, timeunit)Argumentsvalue \u2014 Value. Integer, Float or Decimal.timeunit \u2014 Timeunit. Integer, Float or Decimal, DateTime, DateTime64.Parametersx \u2014 Half-life period. Integer, Float or Decimal.Returned valuesReturns the maximum of the exponentially smoothed weighted moving average at t and t-1. Float64.\nExamples: SELECT    value,    time,    round(exp_smooth, 3),    bar(exp_smooth, 0, 5, 50) AS barFROM    (    SELECT    (number = 0) OR (number >= 25) AS value,    number AS time,    exponentialTimeDecayedMax(10)(value, time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth    FROM numbers(50)    );\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/exponentialTimeDecayedSum"], "Title": ["exponentialTimeDecayedSum"], "Feature": ["exponentialTimeDecayedSum(x)(v, t)"], "Description": ["exponentialTimeDecayedSum", "Returns the sum of exponentially smoothed moving average values of a time series at the index t in time.", "Syntax", "exponentialTimeDecayedSum(x)(v, t)", "Arguments", "v \u2014 Value. Integer, Float or Decimal.t \u2014 Time. Integer, Float or Decimal, DateTime, DateTime64.", "Parameters", "x \u2014 Half-life period. Integer, Float or Decimal.", "Returned values", "Returns the sum of exponentially smoothed moving average values at the given point in time. Float64."], "Examples": ["SELECT    value,    time,    round(exp_smooth, 3),    bar(exp_smooth, 0, 10, 50) AS barFROM    (    SELECT    (number = 0) OR (number >= 25) AS value,    number AS time,    exponentialTimeDecayedSum(10)(value, time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth    FROM numbers(50)    );"], "Category": ["Aggregate Functions"], "index": 164, "vector_txt": "164:Feature: exponentialTimeDecayedSum(x)(v, t)\nDescription: exponentialTimeDecayedSumReturns the sum of exponentially smoothed moving average values of a time series at the index t in time.SyntaxexponentialTimeDecayedSum(x)(v, t)Argumentsv \u2014 Value. Integer, Float or Decimal.t \u2014 Time. Integer, Float or Decimal, DateTime, DateTime64.Parametersx \u2014 Half-life period. Integer, Float or Decimal.Returned valuesReturns the sum of exponentially smoothed moving average values at the given point in time. Float64.\nExamples: SELECT    value,    time,    round(exp_smooth, 3),    bar(exp_smooth, 0, 10, 50) AS barFROM    (    SELECT    (number = 0) OR (number >= 25) AS value,    number AS time,    exponentialTimeDecayedSum(10)(value, time) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS exp_smooth    FROM numbers(50)    );\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/window-functions/first_value"], "Title": ["first_value"], "Feature": ["first_value (column_name) [[RESPECT NULLS] | [IGNORE NULLS]]  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])"], "Description": ["first_value", "Returns the first value evaluated within its ordered frame. By default, NULL arguments are skipped, however the RESPECT NULLS modifier can be used to override this behaviour.", "Syntax", "first_value (column_name) [[RESPECT NULLS] | [IGNORE NULLS]]  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])", "Alias: any.", "NoteUsing the optional modifier RESPECT NULLS after first_value(column_name) will ensure that NULL arguments are not skipped.\nSee NULL processing for more information.", "For more detail on window function syntax see: Window Functions - Syntax.", "Returned value", "The first value evaluated within its ordered frame."], "Examples": ["DROP TABLE IF EXISTS salaries;CREATE TABLE salaries(    `team` String,    `player` String,    `salary` UInt32,    `position` String)Engine = Memory;INSERT INTO salaries FORMAT Values    ('Port Elizabeth Barbarians', 'Gary Chen', 196000, 'F'),    ('New Coreystad Archdukes', 'Charles Juarez', 190000, 'F'),    ('Port Elizabeth Barbarians', 'Michael Stanley', 100000, 'D'),    ('New Coreystad Archdukes', 'Scott Harrison', 180000, 'D'),    ('Port Elizabeth Barbarians', 'Robert George', 195000, 'M'),    ('South Hampton Seagulls', 'Douglas Benson', 150000, 'M'),    ('South Hampton Seagulls', 'James Henderson', 140000, 'M');", "SELECT player, salary,        first_value(player) OVER (ORDER BY salary DESC) AS highest_paid_playerFROM salaries;"], "Category": ["Window Functions"], "index": 165, "vector_txt": "165:Feature: first_value (column_name) [[RESPECT NULLS] | [IGNORE NULLS]]  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])\nDescription: first_valueReturns the first value evaluated within its ordered frame. By default, NULL arguments are skipped, however the RESPECT NULLS modifier can be used to override this behaviour.Syntaxfirst_value (column_name) [[RESPECT NULLS] | [IGNORE NULLS]]  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])Alias: any.NoteUsing the optional modifier RESPECT NULLS after first_value(column_name) will ensure that NULL arguments are not skipped.\nSee NULL processing for more information.For more detail on window function syntax see: Window Functions - Syntax.Returned valueThe first value evaluated within its ordered frame.\nExamples: DROP TABLE IF EXISTS salaries;CREATE TABLE salaries(    `team` String,    `player` String,    `salary` UInt32,    `position` String)Engine = Memory;INSERT INTO salaries FORMAT Values    ('Port Elizabeth Barbarians', 'Gary Chen', 196000, 'F'),    ('New Coreystad Archdukes', 'Charles Juarez', 190000, 'F'),    ('Port Elizabeth Barbarians', 'Michael Stanley', 100000, 'D'),    ('New Coreystad Archdukes', 'Scott Harrison', 180000, 'D'),    ('Port Elizabeth Barbarians', 'Robert George', 195000, 'M'),    ('South Hampton Seagulls', 'Douglas Benson', 150000, 'M'),    ('South Hampton Seagulls', 'James Henderson', 140000, 'M');SELECT player, salary,        first_value(player) OVER (ORDER BY salary DESC) AS highest_paid_playerFROM salaries;\nCategory: Window Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["Distance functions"], "Feature": ["Distance functions"], "Description": ["Distance functions", "All supported functions are described in distance functions documentation."], "Examples": [], "Category": ["Arrays Functions"], "index": 166, "vector_txt": "166:Feature: Distance functions\nDescription: Distance functionsAll supported functions are described in distance functions documentation.\nExamples: \nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/flame_graph"], "Title": ["Syntax"], "Feature": ["flameGraph(traces, [size], [ptr])"], "Description": ["Syntax", "flameGraph(traces, [size], [ptr])"], "Examples": ["flameGraph(traces, [size], [ptr])"], "Category": ["Aggregate Functions"], "index": 167, "vector_txt": "167:Feature: flameGraph(traces, [size], [ptr])\nDescription: SyntaxflameGraph(traces, [size], [ptr])\nExamples: flameGraph(traces, [size], [ptr])\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/flame_graph"], "Title": ["Parameters"], "Feature": ["Parameters"], "Description": ["Parameters", "traces \u2014 a stacktrace. Array(UInt64).size \u2014 an allocation size for memory profiling. (optional - default 1). UInt64.ptr \u2014 an allocation address. (optional - default 0). UInt64.", "NoteIn the case where ptr != 0, a flameGraph will map allocations (size > 0) and deallocations (size < 0) with the same size and ptr.\nOnly allocations which were not freed are shown. Non mapped deallocations are ignored."], "Examples": [], "Category": ["Aggregate Functions"], "index": 168, "vector_txt": "168:Feature: Parameters\nDescription: Parameterstraces \u2014 a stacktrace. Array(UInt64).size \u2014 an allocation size for memory profiling. (optional - default 1). UInt64.ptr \u2014 an allocation address. (optional - default 0). UInt64.NoteIn the case where ptr != 0, a flameGraph will map allocations (size > 0) and deallocations (size < 0) with the same size and ptr.\nOnly allocations which were not freed are shown. Non mapped deallocations are ignored.\nExamples: \nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/flame_graph"], "Title": ["Returned value"], "Feature": ["Returned value"], "Description": ["Returned value", "An array of strings for use with flamegraph.pl utility. Array(String)."], "Examples": [], "Category": ["Aggregate Functions"], "index": 169, "vector_txt": "169:Feature: Returned value\nDescription: Returned valueAn array of strings for use with flamegraph.pl utility. Array(String).\nExamples: \nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/flame_graph"], "Title": ["Examples"], "Feature": ["Examples"], "Description": [], "Examples": ["SET query_profiler_cpu_time_period_ns=10000000;SELECT SearchPhrase, COUNT(DISTINCT UserID) AS u FROM hits WHERE SearchPhrase <> '' GROUP BY SearchPhrase ORDER BY u DESC LIMIT 10;", "SET memory_profiler_sample_probability=1, max_untracked_memory=1;SELECT SearchPhrase, COUNT(DISTINCT UserID) AS u FROM hits WHERE SearchPhrase <> '' GROUP BY SearchPhrase ORDER BY u DESC LIMIT 10;", "SET memory_profiler_sample_probability=1, max_untracked_memory=1, use_uncompressed_cache=1, merge_tree_max_rows_to_use_cache=100000000000, merge_tree_max_bytes_to_use_cache=1000000000000;SELECT SearchPhrase, COUNT(DISTINCT UserID) AS u FROM hits WHERE SearchPhrase <> '' GROUP BY SearchPhrase ORDER BY u DESC LIMIT 10;", "SET memory_profiler_sample_probability=1, max_untracked_memory=1;SELECT SearchPhrase, COUNT(DISTINCT UserID) AS u FROM hits WHERE SearchPhrase <> '' GROUP BY SearchPhrase ORDER BY u DESC LIMIT 10;", "SELECT event_time, m, formatReadableSize(max(s) as m) FROM (SELECT event_time, sum(size) OVER (ORDER BY event_time) AS s FROM system.trace_log WHERE query_id = 'xxx' AND trace_type = 'MemorySample') GROUP BY event_time ORDER BY event_time;", "SELECT argMax(event_time, s), max(s) FROM (SELECT event_time, sum(size) OVER (ORDER BY event_time) AS s FROM system.trace_log WHERE query_id = 'xxx' AND trace_type = 'MemorySample');"], "Category": ["Aggregate Functions"], "index": 170, "vector_txt": "170:Feature: Examples\nDescription: \nExamples: SET query_profiler_cpu_time_period_ns=10000000;SELECT SearchPhrase, COUNT(DISTINCT UserID) AS u FROM hits WHERE SearchPhrase <> '' GROUP BY SearchPhrase ORDER BY u DESC LIMIT 10;SET memory_profiler_sample_probability=1, max_untracked_memory=1;SELECT SearchPhrase, COUNT(DISTINCT UserID) AS u FROM hits WHERE SearchPhrase <> '' GROUP BY SearchPhrase ORDER BY u DESC LIMIT 10;SET memory_profiler_sample_probability=1, max_untracked_memory=1, use_uncompressed_cache=1, merge_tree_max_rows_to_use_cache=100000000000, merge_tree_max_bytes_to_use_cache=1000000000000;SELECT SearchPhrase, COUNT(DISTINCT UserID) AS u FROM hits WHERE SearchPhrase <> '' GROUP BY SearchPhrase ORDER BY u DESC LIMIT 10;SET memory_profiler_sample_probability=1, max_untracked_memory=1;SELECT SearchPhrase, COUNT(DISTINCT UserID) AS u FROM hits WHERE SearchPhrase <> '' GROUP BY SearchPhrase ORDER BY u DESC LIMIT 10;SELECT event_time, m, formatReadableSize(max(s) as m) FROM (SELECT event_time, sum(size) OVER (ORDER BY event_time) AS s FROM system.trace_log WHERE query_id = 'xxx' AND trace_type = 'MemorySample') GROUP BY event_time ORDER BY event_time;SELECT argMax(event_time, s), max(s) FROM (SELECT event_time, sum(size) OVER (ORDER BY event_time) AS s FROM system.trace_log WHERE query_id = 'xxx' AND trace_type = 'MemorySample');\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/grouparray"], "Title": ["groupArray"], "Feature": ["groupArray"], "Description": ["groupArray", "Syntax: groupArray(x) or groupArray(max_size)(x)", "Creates an array of argument values.\nValues can be added to the array in any (indeterminate) order.", "The second version (with the max_size parameter) limits the size of the resulting array to max_size elements. For example, groupArray(1)(x) is equivalent to [any (x)].", "In some cases, you can still rely on the order of execution. This applies to cases when SELECT comes from a subquery that uses ORDER BY if the subquery result is small enough."], "Examples": ["select id, groupArray(10)(name) from default.ck group by id;"], "Category": ["Aggregate Functions"], "index": 171, "vector_txt": "171:Feature: groupArray\nDescription: groupArraySyntax: groupArray(x) or groupArray(max_size)(x)Creates an array of argument values.\nValues can be added to the array in any (indeterminate) order.The second version (with the max_size parameter) limits the size of the resulting array to max_size elements. For example, groupArray(1)(x) is equivalent to [any (x)].In some cases, you can still rely on the order of execution. This applies to cases when SELECT comes from a subquery that uses ORDER BY if the subquery result is small enough.\nExamples: select id, groupArray(10)(name) from default.ck group by id;\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/grouparrayinsertat"], "Title": ["groupArrayInsertAt"], "Feature": ["groupArrayInsertAt(default_x, size)(x, pos)"], "Description": ["groupArrayInsertAt", "Inserts a value into the array at the specified position.", "Syntax", "groupArrayInsertAt(default_x, size)(x, pos)", "If in one query several values are inserted into the same position, the function behaves in the following ways:", "If a query is executed in a single thread, the first one of the inserted values is used.If a query is executed in multiple threads, the resulting value is an undetermined one of the inserted values.", "Arguments", "x \u2014 Value to be inserted. Expression resulting in one of the supported data types.pos \u2014 Position at which the specified element x is to be inserted. Index numbering in the array starts from zero. UInt32.default_x \u2014 Default value for substituting in empty positions. Optional parameter. Expression resulting in the data type configured for the x parameter. If default_x is not defined, the default values are used.size \u2014 Length of the resulting array. Optional parameter. When using this parameter, the default value default_x must be specified. UInt32.", "Returned value", "Array with inserted values.", "Type: Array."], "Examples": ["SELECT groupArrayInsertAt(toString(number), number * 2) FROM numbers(5);", "SELECT groupArrayInsertAt('-')(toString(number), number * 2) FROM numbers(5);", "SELECT groupArrayInsertAt('-', 5)(toString(number), number * 2) FROM numbers(5);", "SELECT groupArrayInsertAt(number, 0) FROM numbers_mt(10) SETTINGS max_block_size = 1;"], "Category": ["Aggregate Functions"], "index": 172, "vector_txt": "172:Feature: groupArrayInsertAt(default_x, size)(x, pos)\nDescription: groupArrayInsertAtInserts a value into the array at the specified position.SyntaxgroupArrayInsertAt(default_x, size)(x, pos)If in one query several values are inserted into the same position, the function behaves in the following ways:If a query is executed in a single thread, the first one of the inserted values is used.If a query is executed in multiple threads, the resulting value is an undetermined one of the inserted values.Argumentsx \u2014 Value to be inserted. Expression resulting in one of the supported data types.pos \u2014 Position at which the specified element x is to be inserted. Index numbering in the array starts from zero. UInt32.default_x \u2014 Default value for substituting in empty positions. Optional parameter. Expression resulting in the data type configured for the x parameter. If default_x is not defined, the default values are used.size \u2014 Length of the resulting array. Optional parameter. When using this parameter, the default value default_x must be specified. UInt32.Returned valueArray with inserted values.Type: Array.\nExamples: SELECT groupArrayInsertAt(toString(number), number * 2) FROM numbers(5);SELECT groupArrayInsertAt('-')(toString(number), number * 2) FROM numbers(5);SELECT groupArrayInsertAt('-', 5)(toString(number), number * 2) FROM numbers(5);SELECT groupArrayInsertAt(number, 0) FROM numbers_mt(10) SETTINGS max_block_size = 1;\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/grouparrayintersect"], "Title": ["groupArrayIntersect"], "Feature": ["groupArrayIntersect(x)"], "Description": ["groupArrayIntersect", "Return an intersection of given arrays (Return all items of arrays, that are in all given arrays).", "Syntax", "groupArrayIntersect(x)", "Arguments", "x \u2014 Argument (column name or expression).", "Returned values", "Array that contains elements that are in all arrays.", "Type: Array."], "Examples": ["SELECT groupArrayIntersect(a) as intersection FROM numbers;"], "Category": ["Aggregate Functions"], "index": 173, "vector_txt": "173:Feature: groupArrayIntersect(x)\nDescription: groupArrayIntersectReturn an intersection of given arrays (Return all items of arrays, that are in all given arrays).SyntaxgroupArrayIntersect(x)Argumentsx \u2014 Argument (column name or expression).Returned valuesArray that contains elements that are in all arrays.Type: Array.\nExamples: SELECT groupArrayIntersect(a) as intersection FROM numbers;\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/grouparraylast"], "Title": ["groupArrayLast"], "Feature": ["groupArrayLast"], "Description": ["groupArrayLast", "Syntax: groupArrayLast(max_size)(x)", "Creates an array of last argument values.\nFor example, groupArrayLast(1)(x) is equivalent to [anyLast (x)].", "In some cases, you can still rely on the order of execution. This applies to cases when SELECT comes from a subquery that uses ORDER BY if the subquery result is small enough."], "Examples": ["select groupArrayLast(2)(number+1) numbers from numbers(10)", "select groupArray(2)(number+1) numbers from numbers(10)"], "Category": ["Aggregate Functions"], "index": 174, "vector_txt": "174:Feature: groupArrayLast\nDescription: groupArrayLastSyntax: groupArrayLast(max_size)(x)Creates an array of last argument values.\nFor example, groupArrayLast(1)(x) is equivalent to [anyLast (x)].In some cases, you can still rely on the order of execution. This applies to cases when SELECT comes from a subquery that uses ORDER BY if the subquery result is small enough.\nExamples: select groupArrayLast(2)(number+1) numbers from numbers(10)select groupArray(2)(number+1) numbers from numbers(10)\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/grouparraymovingavg"], "Title": ["groupArrayMovingAvg"], "Feature": ["groupArrayMovingAvg(numbers_for_summing)groupArrayMovingAvg(window_size)(numbers_for_summing)"], "Description": ["groupArrayMovingAvg", "Calculates the moving average of input values.", "groupArrayMovingAvg(numbers_for_summing)groupArrayMovingAvg(window_size)(numbers_for_summing)", "The function can take the window size as a parameter. If left unspecified, the function takes the window size equal to the number of rows in the column.", "Arguments", "numbers_for_summing \u2014 Expression resulting in a numeric data type value.window_size \u2014 Size of the calculation window.", "Returned values", "Array of the same size and type as the input data.", "The function uses rounding towards zero. It truncates the decimal places insignificant for the resulting data type."], "Examples": ["CREATE TABLE t(    `int` UInt8,    `float` Float32,    `dec` Decimal32(2))ENGINE = TinyLog", "SELECT    groupArrayMovingAvg(int) AS I,    groupArrayMovingAvg(float) AS F,    groupArrayMovingAvg(dec) AS DFROM t", "SELECT    groupArrayMovingAvg(2)(int) AS I,    groupArrayMovingAvg(2)(float) AS F,    groupArrayMovingAvg(2)(dec) AS DFROM t"], "Category": ["Aggregate Functions"], "index": 175, "vector_txt": "175:Feature: groupArrayMovingAvg(numbers_for_summing)groupArrayMovingAvg(window_size)(numbers_for_summing)\nDescription: groupArrayMovingAvgCalculates the moving average of input values.groupArrayMovingAvg(numbers_for_summing)groupArrayMovingAvg(window_size)(numbers_for_summing)The function can take the window size as a parameter. If left unspecified, the function takes the window size equal to the number of rows in the column.Argumentsnumbers_for_summing \u2014 Expression resulting in a numeric data type value.window_size \u2014 Size of the calculation window.Returned valuesArray of the same size and type as the input data.The function uses rounding towards zero. It truncates the decimal places insignificant for the resulting data type.\nExamples: CREATE TABLE t(    `int` UInt8,    `float` Float32,    `dec` Decimal32(2))ENGINE = TinyLogSELECT    groupArrayMovingAvg(int) AS I,    groupArrayMovingAvg(float) AS F,    groupArrayMovingAvg(dec) AS DFROM tSELECT    groupArrayMovingAvg(2)(int) AS I,    groupArrayMovingAvg(2)(float) AS F,    groupArrayMovingAvg(2)(dec) AS DFROM t\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/grouparraymovingsum"], "Title": ["groupArrayMovingSum"], "Feature": ["groupArrayMovingSum(numbers_for_summing)groupArrayMovingSum(window_size)(numbers_for_summing)"], "Description": ["groupArrayMovingSum", "Calculates the moving sum of input values.", "groupArrayMovingSum(numbers_for_summing)groupArrayMovingSum(window_size)(numbers_for_summing)", "The function can take the window size as a parameter. If left unspecified, the function takes the window size equal to the number of rows in the column.", "Arguments", "numbers_for_summing \u2014 Expression resulting in a numeric data type value.window_size \u2014 Size of the calculation window.", "Returned values", "Array of the same size and type as the input data."], "Examples": ["CREATE TABLE t(    `int` UInt8,    `float` Float32,    `dec` Decimal32(2))ENGINE = TinyLog", "SELECT    groupArrayMovingSum(int) AS I,    groupArrayMovingSum(float) AS F,    groupArrayMovingSum(dec) AS DFROM t", "SELECT    groupArrayMovingSum(2)(int) AS I,    groupArrayMovingSum(2)(float) AS F,    groupArrayMovingSum(2)(dec) AS DFROM t"], "Category": ["Aggregate Functions"], "index": 176, "vector_txt": "176:Feature: groupArrayMovingSum(numbers_for_summing)groupArrayMovingSum(window_size)(numbers_for_summing)\nDescription: groupArrayMovingSumCalculates the moving sum of input values.groupArrayMovingSum(numbers_for_summing)groupArrayMovingSum(window_size)(numbers_for_summing)The function can take the window size as a parameter. If left unspecified, the function takes the window size equal to the number of rows in the column.Argumentsnumbers_for_summing \u2014 Expression resulting in a numeric data type value.window_size \u2014 Size of the calculation window.Returned valuesArray of the same size and type as the input data.\nExamples: CREATE TABLE t(    `int` UInt8,    `float` Float32,    `dec` Decimal32(2))ENGINE = TinyLogSELECT    groupArrayMovingSum(int) AS I,    groupArrayMovingSum(float) AS F,    groupArrayMovingSum(dec) AS DFROM tSELECT    groupArrayMovingSum(2)(int) AS I,    groupArrayMovingSum(2)(float) AS F,    groupArrayMovingSum(2)(dec) AS DFROM t\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-join"], "Title": ["arrayJoin function"], "Feature": ["arrayJoin function"], "Description": ["arrayJoin function", "This is a very unusual function.", "Normal functions do not change a set of rows, but just change the values in each row (map).\nAggregate functions compress a set of rows (fold or reduce).\nThe arrayJoin function takes each row and generates a set of rows (unfold).", "This function takes an array as an argument, and propagates the source row to multiple rows for the number of elements in the array.\nAll the values in columns are simply copied, except the values in the column where this function is applied; it is replaced with the corresponding array value."], "Examples": ["SELECT arrayJoin([1, 2, 3] AS src) AS dst, 'Hello', src", "SELECT sum(1) AS impressionsFROM(    SELECT ['Istanbul', 'Berlin', 'Bobruisk'] AS cities)WHERE arrayJoin(cities) IN ['Istanbul', 'Berlin'];", "SELECT    sum(1) AS impressions,    arrayJoin(cities) AS city,    arrayJoin(browsers) AS browserFROM(    SELECT        ['Istanbul', 'Berlin', 'Bobruisk'] AS cities,        ['Firefox', 'Chrome', 'Chrome'] AS browsers)GROUP BY    2,    3", "SELECT    arrayJoin(dice) as first_throw,    /* arrayJoin(dice) as second_throw */ -- is technically correct, but will annihilate result set    arrayJoin(arrayConcat(dice, [])) as second_throw -- intentionally changed expression to force re-evaluationFROM (    SELECT [1, 2, 3, 4, 5, 6] as dice);", "SELECT    sum(1) AS impressions,    city,    browserFROM(    SELECT        ['Istanbul', 'Berlin', 'Bobruisk'] AS cities,        ['Firefox', 'Chrome', 'Chrome'] AS browsers)ARRAY JOIN    cities AS city,    browsers AS browserGROUP BY    2,    3", "SELECT    sum(1) AS impressions,    (arrayJoin(arrayZip(cities, browsers)) AS t).1 AS city,    t.2 AS browserFROM(    SELECT        ['Istanbul', 'Berlin', 'Bobruisk'] AS cities,        ['Firefox', 'Chrome', 'Chrome'] AS browsers)GROUP BY    2,    3"], "Category": ["arrayJoin Functions"], "index": 177, "vector_txt": "177:Feature: arrayJoin function\nDescription: arrayJoin functionThis is a very unusual function.Normal functions do not change a set of rows, but just change the values in each row (map).\nAggregate functions compress a set of rows (fold or reduce).\nThe arrayJoin function takes each row and generates a set of rows (unfold).This function takes an array as an argument, and propagates the source row to multiple rows for the number of elements in the array.\nAll the values in columns are simply copied, except the values in the column where this function is applied; it is replaced with the corresponding array value.\nExamples: SELECT arrayJoin([1, 2, 3] AS src) AS dst, 'Hello', srcSELECT sum(1) AS impressionsFROM(    SELECT ['Istanbul', 'Berlin', 'Bobruisk'] AS cities)WHERE arrayJoin(cities) IN ['Istanbul', 'Berlin'];SELECT    sum(1) AS impressions,    arrayJoin(cities) AS city,    arrayJoin(browsers) AS browserFROM(    SELECT        ['Istanbul', 'Berlin', 'Bobruisk'] AS cities,        ['Firefox', 'Chrome', 'Chrome'] AS browsers)GROUP BY    2,    3SELECT    arrayJoin(dice) as first_throw,    /* arrayJoin(dice) as second_throw */ -- is technically correct, but will annihilate result set    arrayJoin(arrayConcat(dice, [])) as second_throw -- intentionally changed expression to force re-evaluationFROM (    SELECT [1, 2, 3, 4, 5, 6] as dice);SELECT    sum(1) AS impressions,    city,    browserFROM(    SELECT        ['Istanbul', 'Berlin', 'Bobruisk'] AS cities,        ['Firefox', 'Chrome', 'Chrome'] AS browsers)ARRAY JOIN    cities AS city,    browsers AS browserGROUP BY    2,    3SELECT    sum(1) AS impressions,    (arrayJoin(arrayZip(cities, browsers)) AS t).1 AS city,    t.2 AS browserFROM(    SELECT        ['Istanbul', 'Berlin', 'Bobruisk'] AS cities,        ['Firefox', 'Chrome', 'Chrome'] AS browsers)GROUP BY    2,    3\nCategory: arrayJoin Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/grouparraysample"], "Title": ["groupArraySample"], "Feature": ["groupArraySample(max_size[, seed])(x)"], "Description": ["groupArraySample", "Creates an array of sample argument values. The size of the resulting array is limited to max_size elements. Argument values are selected and added to the array randomly.", "Syntax", "groupArraySample(max_size[, seed])(x)", "Arguments", "max_size \u2014 Maximum size of the resulting array. UInt64.seed \u2014 Seed for the random number generator. Optional. UInt64. Default value: 123456.x \u2014 Argument (column name or expression).", "Returned values", "Array of randomly selected x arguments.", "Type: Array."], "Examples": ["SELECT groupArraySample(3)(color) as newcolors FROM colors;", "SELECT groupArraySample(3, 987654321)(color) as newcolors FROM colors;", "SELECT groupArraySample(3)(concat('light-', color)) as newcolors FROM colors;"], "Category": ["Aggregate Functions"], "index": 178, "vector_txt": "178:Feature: groupArraySample(max_size[, seed])(x)\nDescription: groupArraySampleCreates an array of sample argument values. The size of the resulting array is limited to max_size elements. Argument values are selected and added to the array randomly.SyntaxgroupArraySample(max_size[, seed])(x)Argumentsmax_size \u2014 Maximum size of the resulting array. UInt64.seed \u2014 Seed for the random number generator. Optional. UInt64. Default value: 123456.x \u2014 Argument (column name or expression).Returned valuesArray of randomly selected x arguments.Type: Array.\nExamples: SELECT groupArraySample(3)(color) as newcolors FROM colors;SELECT groupArraySample(3, 987654321)(color) as newcolors FROM colors;SELECT groupArraySample(3)(concat('light-', color)) as newcolors FROM colors;\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/grouparraysorted"], "Title": ["groupArraySorted"], "Feature": ["groupArraySorted"], "Description": ["groupArraySorted", " Returns an array with the first N items in ascending order.", "groupArraySorted(N)(column)", " Arguments", "N \u2013 The number of elements to return.column \u2013 The value (Integer, String, Float and other Generic types).ExampleGets the first 10 numbers:SELECT groupArraySorted(10)(number) FROM numbers(100)\u250c\u2500groupArraySorted(10)(number)\u2500\u2510\u2502 [0,1,2,3,4,5,6,7,8,9]        \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", " Gets all the String implementations of all numbers in column:", "SELECT groupArraySorted(5)(str) FROM (SELECT toString(number) as str FROM numbers(5));", "\u250c\u2500groupArraySorted(5)(str)\u2500\u2510\u2502 ['0','1','2','3','4']    \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Examples": ["groupArraySorted(N)(column)", "SELECT groupArraySorted(5)(str) FROM (SELECT toString(number) as str FROM numbers(5));"], "Category": ["Aggregate Functions"], "index": 179, "vector_txt": "179:Feature: groupArraySorted\nDescription: groupArraySorted Returns an array with the first N items in ascending order.groupArraySorted(N)(column) ArgumentsN \u2013 The number of elements to return.column \u2013 The value (Integer, String, Float and other Generic types).ExampleGets the first 10 numbers:SELECT groupArraySorted(10)(number) FROM numbers(100)\u250c\u2500groupArraySorted(10)(number)\u2500\u2510\u2502 [0,1,2,3,4,5,6,7,8,9]        \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Gets all the String implementations of all numbers in column:SELECT groupArraySorted(5)(str) FROM (SELECT toString(number) as str FROM numbers(5));\u250c\u2500groupArraySorted(5)(str)\u2500\u2510\u2502 ['0','1','2','3','4']    \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nExamples: groupArraySorted(N)(column)SELECT groupArraySorted(5)(str) FROM (SELECT toString(number) as str FROM numbers(5));\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/groupbitand"], "Title": ["groupBitAnd"], "Feature": ["groupBitAnd(expr)"], "Description": ["groupBitAnd", "Applies bit-wise AND for series of numbers.", "groupBitAnd(expr)", "Arguments", "expr \u2013 An expression that results in UInt* or Int* type.", "Return value", "Value of the UInt* or Int* type."], "Examples": ["SELECT groupBitAnd(num) FROM t"], "Category": ["Aggregate Functions"], "index": 180, "vector_txt": "180:Feature: groupBitAnd(expr)\nDescription: groupBitAndApplies bit-wise AND for series of numbers.groupBitAnd(expr)Argumentsexpr \u2013 An expression that results in UInt* or Int* type.Return valueValue of the UInt* or Int* type.\nExamples: SELECT groupBitAnd(num) FROM t\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/groupbitmap"], "Title": ["groupBitmap"], "Feature": ["groupBitmap(expr)"], "Description": ["groupBitmap", "Bitmap or Aggregate calculations from a unsigned integer column, return cardinality of type UInt64, if add suffix -State, then return bitmap object.", "groupBitmap(expr)", "Arguments", "expr \u2013 An expression that results in UInt* type.", "Return value", "Value of the UInt64 type."], "Examples": ["SELECT groupBitmap(UserID) as num FROM t"], "Category": ["Aggregate Functions"], "index": 181, "vector_txt": "181:Feature: groupBitmap(expr)\nDescription: groupBitmapBitmap or Aggregate calculations from a unsigned integer column, return cardinality of type UInt64, if add suffix -State, then return bitmap object.groupBitmap(expr)Argumentsexpr \u2013 An expression that results in UInt* type.Return valueValue of the UInt64 type.\nExamples: SELECT groupBitmap(UserID) as num FROM t\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/groupbitor"], "Title": ["groupBitOr"], "Feature": ["groupBitOr(expr)"], "Description": ["groupBitOr", "Applies bit-wise OR for series of numbers.", "groupBitOr(expr)", "Arguments", "expr \u2013 An expression that results in UInt* or Int* type.", "Returned value", "Value of the UInt* or Int* type."], "Examples": ["SELECT groupBitOr(num) FROM t"], "Category": ["Aggregate Functions"], "index": 182, "vector_txt": "182:Feature: groupBitOr(expr)\nDescription: groupBitOrApplies bit-wise OR for series of numbers.groupBitOr(expr)Argumentsexpr \u2013 An expression that results in UInt* or Int* type.Returned valueValue of the UInt* or Int* type.\nExamples: SELECT groupBitOr(num) FROM t\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/groupbitxor"], "Title": ["groupBitXor"], "Feature": ["groupBitXor(expr)"], "Description": ["groupBitXor", "Applies bit-wise XOR for series of numbers.", "groupBitXor(expr)", "Arguments", "expr \u2013 An expression that results in UInt* or Int* type.", "Return value", "Value of the UInt* or Int* type."], "Examples": ["SELECT groupBitXor(num) FROM t"], "Category": ["Aggregate Functions"], "index": 183, "vector_txt": "183:Feature: groupBitXor(expr)\nDescription: groupBitXorApplies bit-wise XOR for series of numbers.groupBitXor(expr)Argumentsexpr \u2013 An expression that results in UInt* or Int* type.Return valueValue of the UInt* or Int* type.\nExamples: SELECT groupBitXor(num) FROM t\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/groupuniqarray"], "Title": ["groupUniqArray"], "Feature": ["groupUniqArray"], "Description": ["groupUniqArray", "Syntax: groupUniqArray(x) or groupUniqArray(max_size)(x)", "Creates an array from different argument values. Memory consumption is the same as for the uniqExact function.", "The second version (with the max_size parameter) limits the size of the resulting array to max_size elements.\nFor example, groupUniqArray(1)(x) is equivalent to [any(x)]."], "Examples": [], "Category": ["Aggregate Functions"], "index": 184, "vector_txt": "184:Feature: groupUniqArray\nDescription: groupUniqArraySyntax: groupUniqArray(x) or groupUniqArray(max_size)(x)Creates an array from different argument values. Memory consumption is the same as for the uniqExact function.The second version (with the max_size parameter) limits the size of the resulting array to max_size elements.\nFor example, groupUniqArray(1)(x) is equivalent to [any(x)].\nExamples: \nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/kolmogorovsmirnovtest"], "Title": ["kolmogorovSmirnovTest"], "Feature": ["kolmogorovSmirnovTest([alternative, computation_method])(sample_data, sample_index)"], "Description": ["kolmogorovSmirnovTest", "Applies Kolmogorov-Smirnov's test to samples from two populations.", "Syntax", "kolmogorovSmirnovTest([alternative, computation_method])(sample_data, sample_index)", "Values of both samples are in the sample_data column. If sample_index equals to 0 then the value in that row belongs to the sample from the first population. Otherwise it belongs to the sample from the second population.\nSamples must belong to continuous, one-dimensional probability distributions.", "Arguments", "sample_data \u2014 Sample data. Integer, Float or Decimal.sample_index \u2014 Sample index. Integer.", "Parameters", "alternative \u2014 alternative hypothesis. (Optional, default: 'two-sided'.) String.\nLet F(x) and G(x) be the CDFs of the first and second distributions respectively.'two-sided'\nThe null hypothesis is that samples come from the same distribution, e.g. F(x) = G(x) for all x.\nAnd the alternative is that the distributions are not identical.'greater'\nThe null hypothesis is that values in the first sample are stochastically smaller than those in the second one,\ne.g. the CDF of first distribution lies above and hence to the left of that for the second one.\nWhich in fact means that F(x) >= G(x) for all x. And the alternative in this case is that F(x) < G(x) for at least one x.'less'.\nThe null hypothesis is that values in the first sample are stochastically greater than those in the second one,\ne.g. the CDF of first distribution lies below and hence to the right of that for the second one.\nWhich in fact means that F(x) <= G(x) for all x. And the alternative in this case is that F(x) > G(x) for at least one x.computation_method \u2014 the method used to compute p-value. (Optional, default: 'auto'.) String.'exact' - calculation is performed using precise probability distribution of the test statistics. Compute intensive and wasteful except for small samples.'asymp' ('asymptotic') - calculation is performed using an approximation. For large sample sizes, the exact and asymptotic p-values are very similar.'auto'  - the 'exact' method is used when a maximum number of samples is less than 10'000.", "Returned values", "Tuple with two elements:", "calculated statistic. Float64.calculated p-value. Float64."], "Examples": ["SELECT kolmogorovSmirnovTest('less', 'exact')(value, num)FROM(    SELECT        randNormal(0, 10) AS value,        0 AS num    FROM numbers(10000)    UNION ALL    SELECT        randNormal(0, 10) AS value,        1 AS num    FROM numbers(10000))", "SELECT kolmogorovSmirnovTest('two-sided', 'exact')(value, num)FROM(    SELECT        randStudentT(10) AS value,        0 AS num    FROM numbers(100)    UNION ALL    SELECT        randNormal(0, 10) AS value,        1 AS num    FROM numbers(100))"], "Category": ["Aggregate Functions"], "index": 185, "vector_txt": "185:Feature: kolmogorovSmirnovTest([alternative, computation_method])(sample_data, sample_index)\nDescription: kolmogorovSmirnovTestApplies Kolmogorov-Smirnov's test to samples from two populations.SyntaxkolmogorovSmirnovTest([alternative, computation_method])(sample_data, sample_index)Values of both samples are in the sample_data column. If sample_index equals to 0 then the value in that row belongs to the sample from the first population. Otherwise it belongs to the sample from the second population.\nSamples must belong to continuous, one-dimensional probability distributions.Argumentssample_data \u2014 Sample data. Integer, Float or Decimal.sample_index \u2014 Sample index. Integer.Parametersalternative \u2014 alternative hypothesis. (Optional, default: 'two-sided'.) String.\nLet F(x) and G(x) be the CDFs of the first and second distributions respectively.'two-sided'\nThe null hypothesis is that samples come from the same distribution, e.g. F(x) = G(x) for all x.\nAnd the alternative is that the distributions are not identical.'greater'\nThe null hypothesis is that values in the first sample are stochastically smaller than those in the second one,\ne.g. the CDF of first distribution lies above and hence to the left of that for the second one.\nWhich in fact means that F(x) >= G(x) for all x. And the alternative in this case is that F(x) < G(x) for at least one x.'less'.\nThe null hypothesis is that values in the first sample are stochastically greater than those in the second one,\ne.g. the CDF of first distribution lies below and hence to the right of that for the second one.\nWhich in fact means that F(x) <= G(x) for all x. And the alternative in this case is that F(x) > G(x) for at least one x.computation_method \u2014 the method used to compute p-value. (Optional, default: 'auto'.) String.'exact' - calculation is performed using precise probability distribution of the test statistics. Compute intensive and wasteful except for small samples.'asymp' ('asymptotic') - calculation is performed using an approximation. For large sample sizes, the exact and asymptotic p-values are very similar.'auto'  - the 'exact' method is used when a maximum number of samples is less than 10'000.Returned valuesTuple with two elements:calculated statistic. Float64.calculated p-value. Float64.\nExamples: SELECT kolmogorovSmirnovTest('less', 'exact')(value, num)FROM(    SELECT        randNormal(0, 10) AS value,        0 AS num    FROM numbers(10000)    UNION ALL    SELECT        randNormal(0, 10) AS value,        1 AS num    FROM numbers(10000))SELECT kolmogorovSmirnovTest('two-sided', 'exact')(value, num)FROM(    SELECT        randStudentT(10) AS value,        0 AS num    FROM numbers(100)    UNION ALL    SELECT        randNormal(0, 10) AS value,        1 AS num    FROM numbers(100))\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/kurtpop"], "Title": ["kurtPop"], "Feature": ["kurtPop(expr)"], "Description": ["kurtPop", "Computes the kurtosis of a sequence.", "kurtPop(expr)", "Arguments", "expr \u2014 Expression returning a number.", "Returned value", "The kurtosis of the given distribution. Type \u2014 Float64"], "Examples": ["SELECT kurtPop(value) FROM series_with_value_column;"], "Category": ["Aggregate Functions"], "index": 186, "vector_txt": "186:Feature: kurtPop(expr)\nDescription: kurtPopComputes the kurtosis of a sequence.kurtPop(expr)Argumentsexpr \u2014 Expression returning a number.Returned valueThe kurtosis of the given distribution. Type \u2014 Float64\nExamples: SELECT kurtPop(value) FROM series_with_value_column;\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/kurtsamp"], "Title": ["kurtSamp"], "Feature": ["kurtSamp(expr)"], "Description": ["kurtSamp", "Computes the sample kurtosis of a sequence.", "It represents an unbiased estimate of the kurtosis of a random variable if passed values form its sample.", "kurtSamp(expr)", "Arguments", "expr \u2014 Expression returning a number.", "Returned value", "The kurtosis of the given distribution. Type \u2014 Float64. If n <= 1 (n is a size of the sample), then the function returns nan."], "Examples": ["SELECT kurtSamp(value) FROM series_with_value_column;"], "Category": ["Aggregate Functions"], "index": 187, "vector_txt": "187:Feature: kurtSamp(expr)\nDescription: kurtSampComputes the sample kurtosis of a sequence.It represents an unbiased estimate of the kurtosis of a random variable if passed values form its sample.kurtSamp(expr)Argumentsexpr \u2014 Expression returning a number.Returned valueThe kurtosis of the given distribution. Type \u2014 Float64. If n <= 1 (n is a size of the sample), then the function returns nan.\nExamples: SELECT kurtSamp(value) FROM series_with_value_column;\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bit-functions"], "Title": ["bitAnd(a, b)"], "Feature": ["bitAnd(a, b)"], "Description": ["bitAnd(a, b)"], "Examples": [], "Category": ["Bit Functions"], "index": 188, "vector_txt": "188:Feature: bitAnd(a, b)\nDescription: bitAnd(a, b)\nExamples: \nCategory: Bit Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/largestTriangleThreeBuckets"], "Title": ["largestTriangleThreeBuckets"], "Feature": ["largestTriangleThreeBuckets(n)(x, y)"], "Description": ["largestTriangleThreeBuckets", "Applies the Largest-Triangle-Three-Buckets algorithm to the input data.\nThe algorithm is used for downsampling time series data for visualization. It is designed to operate on series sorted by x coordinate.\nIt works by dividing the sorted series into buckets and then finding the largest triangle in each bucket. The number of buckets is equal to the number of points in the resulting series.\nthe function will sort data by x and then apply the downsampling algorithm to the sorted data.", "Syntax", "largestTriangleThreeBuckets(n)(x, y)", "Alias: lttb.", "Arguments", "x \u2014 x coordinate. Integer , Float , Decimal  , Date, Date32, DateTime, DateTime64.y \u2014 y coordinate. Integer , Float , Decimal  , Date, Date32, DateTime, DateTime64.", "NaNs are ignored in the provided series, meaning that any NaN values will be excluded from the analysis. This ensures that the function operates only on valid numerical data.", "Parameters", "n \u2014 number of points in the resulting series. UInt64.", "Returned values", "Array of Tuple with two elements:"], "Examples": ["SELECT largestTriangleThreeBuckets(4)(x, y) FROM largestTriangleThreeBuckets_test;"], "Category": ["Aggregate Functions"], "index": 189, "vector_txt": "189:Feature: largestTriangleThreeBuckets(n)(x, y)\nDescription: largestTriangleThreeBucketsApplies the Largest-Triangle-Three-Buckets algorithm to the input data.\nThe algorithm is used for downsampling time series data for visualization. It is designed to operate on series sorted by x coordinate.\nIt works by dividing the sorted series into buckets and then finding the largest triangle in each bucket. The number of buckets is equal to the number of points in the resulting series.\nthe function will sort data by x and then apply the downsampling algorithm to the sorted data.SyntaxlargestTriangleThreeBuckets(n)(x, y)Alias: lttb.Argumentsx \u2014 x coordinate. Integer , Float , Decimal  , Date, Date32, DateTime, DateTime64.y \u2014 y coordinate. Integer , Float , Decimal  , Date, Date32, DateTime, DateTime64.NaNs are ignored in the provided series, meaning that any NaN values will be excluded from the analysis. This ensures that the function operates only on valid numerical data.Parametersn \u2014 number of points in the resulting series. UInt64.Returned valuesArray of Tuple with two elements:\nExamples: SELECT largestTriangleThreeBuckets(4)(x, y) FROM largestTriangleThreeBuckets_test;\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/window-functions/last_value"], "Title": ["last_value"], "Feature": ["last_value (column_name) [[RESPECT NULLS] | [IGNORE NULLS]]  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])"], "Description": ["last_value", "Returns the last value evaluated within its ordered frame. By default, NULL arguments are skipped, however the RESPECT NULLS modifier can be used to override this behaviour.", "Syntax", "last_value (column_name) [[RESPECT NULLS] | [IGNORE NULLS]]  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])", "Alias: anyLast.", "NoteUsing the optional modifier RESPECT NULLS after first_value(column_name) will ensure that NULL arguments are not skipped.\nSee NULL processing for more information.", "For more detail on window function syntax see: Window Functions - Syntax.", "Returned value", "The last value evaluated within its ordered frame."], "Examples": ["DROP TABLE IF EXISTS salaries;CREATE TABLE salaries(    `team` String,    `player` String,    `salary` UInt32,    `position` String)Engine = Memory;INSERT INTO salaries FORMAT Values    ('Port Elizabeth Barbarians', 'Gary Chen', 196000, 'F'),    ('New Coreystad Archdukes', 'Charles Juarez', 190000, 'F'),    ('Port Elizabeth Barbarians', 'Michael Stanley', 100000, 'D'),    ('New Coreystad Archdukes', 'Scott Harrison', 180000, 'D'),    ('Port Elizabeth Barbarians', 'Robert George', 195000, 'M'),    ('South Hampton Seagulls', 'Douglas Benson', 150000, 'M'),    ('South Hampton Seagulls', 'James Henderson', 140000, 'M');", "SELECT player, salary,       last_value(player) OVER (ORDER BY salary DESC RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS lowest_paid_playerFROM salaries;"], "Category": ["Window Functions"], "index": 190, "vector_txt": "190:Feature: last_value (column_name) [[RESPECT NULLS] | [IGNORE NULLS]]  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])\nDescription: last_valueReturns the last value evaluated within its ordered frame. By default, NULL arguments are skipped, however the RESPECT NULLS modifier can be used to override this behaviour.Syntaxlast_value (column_name) [[RESPECT NULLS] | [IGNORE NULLS]]  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])Alias: anyLast.NoteUsing the optional modifier RESPECT NULLS after first_value(column_name) will ensure that NULL arguments are not skipped.\nSee NULL processing for more information.For more detail on window function syntax see: Window Functions - Syntax.Returned valueThe last value evaluated within its ordered frame.\nExamples: DROP TABLE IF EXISTS salaries;CREATE TABLE salaries(    `team` String,    `player` String,    `salary` UInt32,    `position` String)Engine = Memory;INSERT INTO salaries FORMAT Values    ('Port Elizabeth Barbarians', 'Gary Chen', 196000, 'F'),    ('New Coreystad Archdukes', 'Charles Juarez', 190000, 'F'),    ('Port Elizabeth Barbarians', 'Michael Stanley', 100000, 'D'),    ('New Coreystad Archdukes', 'Scott Harrison', 180000, 'D'),    ('Port Elizabeth Barbarians', 'Robert George', 195000, 'M'),    ('South Hampton Seagulls', 'Douglas Benson', 150000, 'M'),    ('South Hampton Seagulls', 'James Henderson', 140000, 'M');SELECT player, salary,       last_value(player) OVER (ORDER BY salary DESC RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS lowest_paid_playerFROM salaries;\nCategory: Window Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/mannwhitneyutest"], "Title": ["mannWhitneyUTest"], "Feature": ["mannWhitneyUTest[(alternative[, continuity_correction])](sample_data, sample_index)"], "Description": ["mannWhitneyUTest", "Applies the Mann-Whitney rank test to samples from two populations.", "Syntax", "mannWhitneyUTest[(alternative[, continuity_correction])](sample_data, sample_index)", "Values of both samples are in the sample_data column. If sample_index equals to 0 then the value in that row belongs to the sample from the first population. Otherwise it belongs to the sample from the second population.\nThe null hypothesis is that two populations are stochastically equal. Also one-sided hypothesises can be tested. This test does not assume that data have normal distribution.", "Arguments", "sample_data \u2014 sample data. Integer, Float or Decimal.sample_index \u2014 sample index. Integer.", "Parameters", "alternative \u2014 alternative hypothesis. (Optional, default: 'two-sided'.) String.'two-sided';'greater';'less'.continuity_correction \u2014 if not 0 then continuity correction in the normal approximation for the p-value is applied. (Optional, default: 1.) UInt64.", "Returned values", "Tuple with two elements:", "calculated U-statistic. Float64.calculated p-value. Float64."], "Examples": ["SELECT mannWhitneyUTest('greater')(sample_data, sample_index) FROM mww_ttest;"], "Category": ["Aggregate Functions"], "index": 191, "vector_txt": "191:Feature: mannWhitneyUTest[(alternative[, continuity_correction])](sample_data, sample_index)\nDescription: mannWhitneyUTestApplies the Mann-Whitney rank test to samples from two populations.SyntaxmannWhitneyUTest[(alternative[, continuity_correction])](sample_data, sample_index)Values of both samples are in the sample_data column. If sample_index equals to 0 then the value in that row belongs to the sample from the first population. Otherwise it belongs to the sample from the second population.\nThe null hypothesis is that two populations are stochastically equal. Also one-sided hypothesises can be tested. This test does not assume that data have normal distribution.Argumentssample_data \u2014 sample data. Integer, Float or Decimal.sample_index \u2014 sample index. Integer.Parametersalternative \u2014 alternative hypothesis. (Optional, default: 'two-sided'.) String.'two-sided';'greater';'less'.continuity_correction \u2014 if not 0 then continuity correction in the normal approximation for the p-value is applied. (Optional, default: 1.) UInt64.Returned valuesTuple with two elements:calculated U-statistic. Float64.calculated p-value. Float64.\nExamples: SELECT mannWhitneyUTest('greater')(sample_data, sample_index) FROM mww_ttest;\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/maxintersections"], "Title": ["maxIntersections"], "Feature": ["maxIntersections(start_column, end_column)"], "Description": ["maxIntersections", "Aggregate function that calculates the maximum number of times that a group of intervals intersects each other (if all the intervals intersect at least once).", "The syntax is:", "maxIntersections(start_column, end_column)", "Arguments", "start_column \u2013 the numeric column that represents the start of each interval. If start_column is NULL or 0 then the interval will be skipped.end_column - the numeric column that represents the end of each interval. If end_column is NULL or 0 then the interval will be skipped.", "Returned value", "Returns the maximum number of intersected intervals."], "Examples": ["CREATE TABLE my_events (    start UInt32,    end UInt32)Engine = MergeTreeORDER BY tuple();INSERT INTO my_events VALUES   (1, 3),   (1, 6),   (2, 5),   (3, 7);", "SELECT maxIntersections(start, end) FROM my_events;"], "Category": ["Aggregate Functions"], "index": 192, "vector_txt": "192:Feature: maxIntersections(start_column, end_column)\nDescription: maxIntersectionsAggregate function that calculates the maximum number of times that a group of intervals intersects each other (if all the intervals intersect at least once).The syntax is:maxIntersections(start_column, end_column)Argumentsstart_column \u2013 the numeric column that represents the start of each interval. If start_column is NULL or 0 then the interval will be skipped.end_column - the numeric column that represents the end of each interval. If end_column is NULL or 0 then the interval will be skipped.Returned valueReturns the maximum number of intersected intervals.\nExamples: CREATE TABLE my_events (    start UInt32,    end UInt32)Engine = MergeTreeORDER BY tuple();INSERT INTO my_events VALUES   (1, 3),   (1, 6),   (2, 5),   (3, 7);SELECT maxIntersections(start, end) FROM my_events;\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/maxintersectionsposition"], "Title": ["maxIntersectionsPosition"], "Feature": ["maxIntersectionsPosition(start_column, end_column)"], "Description": ["maxIntersectionsPosition", "Aggregate function that calculates the positions of the occurrences of the maxIntersections function.", "The syntax is:", "maxIntersectionsPosition(start_column, end_column)", "Arguments", "start_column \u2013 the numeric column that represents the start of each interval. If start_column is NULL or 0 then the interval will be skipped.end_column - the numeric column that represents the end of each interval. If end_column is NULL or 0 then the interval will be skipped.", "Returned value", "Returns the start positions of the maximum number of intersected intervals."], "Examples": ["CREATE TABLE my_events (    start UInt32,    end UInt32)Engine = MergeTreeORDER BY tuple();INSERT INTO my_events VALUES   (1, 3),   (1, 6),   (2, 5),   (3, 7);", "SELECT maxIntersectionsPosition(start, end) FROM my_events;"], "Category": ["Aggregate Functions"], "index": 193, "vector_txt": "193:Feature: maxIntersectionsPosition(start_column, end_column)\nDescription: maxIntersectionsPositionAggregate function that calculates the positions of the occurrences of the maxIntersections function.The syntax is:maxIntersectionsPosition(start_column, end_column)Argumentsstart_column \u2013 the numeric column that represents the start of each interval. If start_column is NULL or 0 then the interval will be skipped.end_column - the numeric column that represents the end of each interval. If end_column is NULL or 0 then the interval will be skipped.Returned valueReturns the start positions of the maximum number of intersected intervals.\nExamples: CREATE TABLE my_events (    start UInt32,    end UInt32)Engine = MergeTreeORDER BY tuple();INSERT INTO my_events VALUES   (1, 3),   (1, 6),   (2, 5),   (3, 7);SELECT maxIntersectionsPosition(start, end) FROM my_events;\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/maxmap"], "Title": ["maxMap"], "Feature": ["maxMap(key, value)"], "Description": ["maxMap", "Calculates the maximum from value array according to the keys specified in the key array.", "Syntax", "maxMap(key, value)", "or", "maxMap(Tuple(key, value))", "Alias: maxMappedArrays", "NotePassing a tuple of keys and value arrays is identical to passing two arrays of keys and values.The number of elements in key and value must be the same for each row that is totaled.", "Parameters", "key \u2014 Array of keys. Array.value \u2014 Array of values. Array.", "Returned value", "Returns a tuple of two arrays: keys in sorted order, and values calculated for the corresponding keys. Tuple(Array, Array)."], "Examples": ["SELECT maxMap(a, b)FROM values('a Array(Char), b Array(Int64)', (['x', 'y'], [2, 2]), (['y', 'z'], [3, 1]))"], "Category": ["Aggregate Functions"], "index": 194, "vector_txt": "194:Feature: maxMap(key, value)\nDescription: maxMapCalculates the maximum from value array according to the keys specified in the key array.SyntaxmaxMap(key, value)ormaxMap(Tuple(key, value))Alias: maxMappedArraysNotePassing a tuple of keys and value arrays is identical to passing two arrays of keys and values.The number of elements in key and value must be the same for each row that is totaled.Parameterskey \u2014 Array of keys. Array.value \u2014 Array of values. Array.Returned valueReturns a tuple of two arrays: keys in sorted order, and values calculated for the corresponding keys. Tuple(Array, Array).\nExamples: SELECT maxMap(a, b)FROM values('a Array(Char), b Array(Int64)', (['x', 'y'], [2, 2]), (['y', 'z'], [3, 1]))\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/meanztest"], "Title": ["meanZTest"], "Feature": ["meanZTest(population_variance_x, population_variance_y, confidence_level)(sample_data, sample_index)"], "Description": ["meanZTest", "Applies mean z-test to samples from two populations.", "Syntax", "meanZTest(population_variance_x, population_variance_y, confidence_level)(sample_data, sample_index)", "Values of both samples are in the sample_data column. If sample_index equals to 0 then the value in that row belongs to the sample from the first population. Otherwise it belongs to the sample from the second population.\nThe null hypothesis is that means of populations are equal. Normal distribution is assumed. Populations may have unequal variance and the variances are known.", "Arguments", "sample_data \u2014 Sample data. Integer, Float or Decimal.sample_index \u2014 Sample index. Integer.", "Parameters", "population_variance_x \u2014 Variance for population x. Float.population_variance_y \u2014 Variance for population y. Float.confidence_level \u2014 Confidence level in order to calculate confidence intervals. Float.", "Returned values", "Tuple with four elements:", "calculated t-statistic. Float64.calculated p-value. Float64.calculated confidence-interval-low. Float64.calculated confidence-interval-high. Float64."], "Examples": ["SELECT meanZTest(0.7, 0.45, 0.95)(sample_data, sample_index) FROM mean_ztest"], "Category": ["Aggregate Functions"], "index": 195, "vector_txt": "195:Feature: meanZTest(population_variance_x, population_variance_y, confidence_level)(sample_data, sample_index)\nDescription: meanZTestApplies mean z-test to samples from two populations.SyntaxmeanZTest(population_variance_x, population_variance_y, confidence_level)(sample_data, sample_index)Values of both samples are in the sample_data column. If sample_index equals to 0 then the value in that row belongs to the sample from the first population. Otherwise it belongs to the sample from the second population.\nThe null hypothesis is that means of populations are equal. Normal distribution is assumed. Populations may have unequal variance and the variances are known.Argumentssample_data \u2014 Sample data. Integer, Float or Decimal.sample_index \u2014 Sample index. Integer.Parameterspopulation_variance_x \u2014 Variance for population x. Float.population_variance_y \u2014 Variance for population y. Float.confidence_level \u2014 Confidence level in order to calculate confidence intervals. Float.Returned valuesTuple with four elements:calculated t-statistic. Float64.calculated p-value. Float64.calculated confidence-interval-low. Float64.calculated confidence-interval-high. Float64.\nExamples: SELECT meanZTest(0.7, 0.45, 0.95)(sample_data, sample_index) FROM mean_ztest\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/median"], "Title": ["median"], "Feature": ["median"], "Description": ["median", "The median* functions are the aliases for the corresponding quantile* functions. They calculate median of a numeric data sample.", "Functions:", "median \u2014 Alias for quantile.medianDeterministic \u2014 Alias for quantileDeterministic.medianExact \u2014 Alias for quantileExact.medianExactWeighted \u2014 Alias for quantileExactWeighted.medianTiming \u2014 Alias for quantileTiming.medianTimingWeighted \u2014 Alias for quantileTimingWeighted.medianTDigest \u2014 Alias for quantileTDigest.medianTDigestWeighted \u2014 Alias for quantileTDigestWeighted.medianBFloat16 \u2014 Alias for quantileBFloat16.medianDD \u2014 Alias for quantileDD."], "Examples": ["SELECT medianDeterministic(val, 1) FROM t;"], "Category": ["Aggregate Functions"], "index": 196, "vector_txt": "196:Feature: median\nDescription: medianThe median* functions are the aliases for the corresponding quantile* functions. They calculate median of a numeric data sample.Functions:median \u2014 Alias for quantile.medianDeterministic \u2014 Alias for quantileDeterministic.medianExact \u2014 Alias for quantileExact.medianExactWeighted \u2014 Alias for quantileExactWeighted.medianTiming \u2014 Alias for quantileTiming.medianTimingWeighted \u2014 Alias for quantileTimingWeighted.medianTDigest \u2014 Alias for quantileTDigest.medianTDigestWeighted \u2014 Alias for quantileTDigestWeighted.medianBFloat16 \u2014 Alias for quantileBFloat16.medianDD \u2014 Alias for quantileDD.\nExamples: SELECT medianDeterministic(val, 1) FROM t;\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/minmap"], "Title": ["minMap"], "Feature": ["`minMap(key, value)`"], "Description": ["minMap", "Calculates the minimum from value array according to the keys specified in the key array.", "Syntax", "`minMap(key, value)`", "or", "minMap(Tuple(key, value))", "Alias: minMappedArrays", "NotePassing a tuple of keys and value arrays is identical to passing an array of keys and an array of values.The number of elements in key and value must be the same for each row that is totaled.", "Parameters", "key \u2014 Array of keys. Array.value \u2014 Array of values. Array.", "Returned value", "Returns a tuple of two arrays: keys in sorted order, and values calculated for the corresponding keys. Tuple(Array, Array)."], "Examples": ["SELECT minMap(a, b)FROM values('a Array(Int32), b Array(Int64)', ([1, 2], [2, 2]), ([2, 3], [1, 1]))"], "Category": ["Aggregate Functions"], "index": 197, "vector_txt": "197:Feature: `minMap(key, value)`\nDescription: minMapCalculates the minimum from value array according to the keys specified in the key array.Syntax`minMap(key, value)`orminMap(Tuple(key, value))Alias: minMappedArraysNotePassing a tuple of keys and value arrays is identical to passing an array of keys and an array of values.The number of elements in key and value must be the same for each row that is totaled.Parameterskey \u2014 Array of keys. Array.value \u2014 Array of values. Array.Returned valueReturns a tuple of two arrays: keys in sorted order, and values calculated for the corresponding keys. Tuple(Array, Array).\nExamples: SELECT minMap(a, b)FROM values('a Array(Int32), b Array(Int64)', ([1, 2], [2, 2]), ([2, 3], [1, 1]))\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/quantile"], "Title": ["quantile"], "Feature": ["quantile(level)(expr)"], "Description": ["quantile", "Computes an approximate quantile of a numeric data sequence.", "This function applies reservoir sampling with a reservoir size up to 8192 and a random number generator for sampling. The result is non-deterministic. To get an exact quantile, use the quantileExact function.", "When using multiple quantile* functions with different levels in a query, the internal states are not combined (that is, the query works less efficiently than it could). In this case, use the quantiles function.", "Note that for an empty numeric sequence, quantile will return NaN, but its quantile* variants will return either NaN or a default value for the sequence type, depending on the variant.", "Syntax", "quantile(level)(expr)", "Alias: median.", "Arguments", "level \u2014 Level of quantile. Optional parameter. Constant floating-point number from 0 to 1. We recommend using a level value in the range of [0.01, 0.99]. Default value: 0.5. At level=0.5 the function calculates median.expr \u2014 Expression over the column values resulting in numeric data types, Date or DateTime.", "Returned value", "Approximate quantile of the specified level.", "Type:", "Float64 for numeric data type input.Date if input values have the Date type.DateTime if input values have the DateTime type."], "Examples": ["SELECT quantile(val) FROM t"], "Category": ["Aggregate Functions"], "index": 198, "vector_txt": "198:Feature: quantile(level)(expr)\nDescription: quantileComputes an approximate quantile of a numeric data sequence.This function applies reservoir sampling with a reservoir size up to 8192 and a random number generator for sampling. The result is non-deterministic. To get an exact quantile, use the quantileExact function.When using multiple quantile* functions with different levels in a query, the internal states are not combined (that is, the query works less efficiently than it could). In this case, use the quantiles function.Note that for an empty numeric sequence, quantile will return NaN, but its quantile* variants will return either NaN or a default value for the sequence type, depending on the variant.Syntaxquantile(level)(expr)Alias: median.Argumentslevel \u2014 Level of quantile. Optional parameter. Constant floating-point number from 0 to 1. We recommend using a level value in the range of [0.01, 0.99]. Default value: 0.5. At level=0.5 the function calculates median.expr \u2014 Expression over the column values resulting in numeric data types, Date or DateTime.Returned valueApproximate quantile of the specified level.Type:Float64 for numeric data type input.Date if input values have the Date type.DateTime if input values have the DateTime type.\nExamples: SELECT quantile(val) FROM t\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bit-functions"], "Title": ["bitOr(a, b)"], "Feature": ["bitOr(a, b)"], "Description": ["bitOr(a, b)"], "Examples": [], "Category": ["Bit Functions"], "index": 199, "vector_txt": "199:Feature: bitOr(a, b)\nDescription: bitOr(a, b)\nExamples: \nCategory: Bit Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/quantilebfloat16"], "Title": ["quantileBFloat16Weighted"], "Feature": ["quantileBFloat16Weighted"], "Description": ["quantileBFloat16Weighted", "Like quantileBFloat16 but takes into account the weight of each sequence member.", "See Also", "medianquantiles"], "Examples": [], "Category": ["Aggregate Functions"], "index": 200, "vector_txt": "200:Feature: quantileBFloat16Weighted\nDescription: quantileBFloat16WeightedLike quantileBFloat16 but takes into account the weight of each sequence member.See Alsomedianquantiles\nExamples: \nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/quantiledeterministic"], "Title": ["quantileDeterministic"], "Feature": ["quantileDeterministic(level)(expr, determinator)"], "Description": ["quantileDeterministic", "Computes an approximate quantile of a numeric data sequence.", "This function applies reservoir sampling with a reservoir size up to 8192 and deterministic algorithm of sampling. The result is deterministic. To get an exact quantile, use the quantileExact function.", "When using multiple quantile* functions with different levels in a query, the internal states are not combined (that is, the query works less efficiently than it could). In this case, use the quantiles function.", "Syntax", "quantileDeterministic(level)(expr, determinator)", "Alias: medianDeterministic.", "Arguments", "level \u2014 Level of quantile. Optional parameter. Constant floating-point number from 0 to 1. We recommend using a level value in the range of [0.01, 0.99]. Default value: 0.5. At level=0.5 the function calculates median.expr \u2014 Expression over the column values resulting in numeric data types, Date or DateTime.determinator \u2014 Number whose hash is used instead of a random number generator in the reservoir sampling algorithm to make the result of sampling deterministic. As a determinator you can use any deterministic positive number, for example, a user id or an event id. If the same determinator value occurs too often, the function works incorrectly.", "Returned value", "Approximate quantile of the specified level.", "Type:", "Float64 for numeric data type input.Date if input values have the Date type.DateTime if input values have the DateTime type."], "Examples": ["SELECT quantileDeterministic(val, 1) FROM t"], "Category": ["Aggregate Functions"], "index": 201, "vector_txt": "201:Feature: quantileDeterministic(level)(expr, determinator)\nDescription: quantileDeterministicComputes an approximate quantile of a numeric data sequence.This function applies reservoir sampling with a reservoir size up to 8192 and deterministic algorithm of sampling. The result is deterministic. To get an exact quantile, use the quantileExact function.When using multiple quantile* functions with different levels in a query, the internal states are not combined (that is, the query works less efficiently than it could). In this case, use the quantiles function.SyntaxquantileDeterministic(level)(expr, determinator)Alias: medianDeterministic.Argumentslevel \u2014 Level of quantile. Optional parameter. Constant floating-point number from 0 to 1. We recommend using a level value in the range of [0.01, 0.99]. Default value: 0.5. At level=0.5 the function calculates median.expr \u2014 Expression over the column values resulting in numeric data types, Date or DateTime.determinator \u2014 Number whose hash is used instead of a random number generator in the reservoir sampling algorithm to make the result of sampling deterministic. As a determinator you can use any deterministic positive number, for example, a user id or an event id. If the same determinator value occurs too often, the function works incorrectly.Returned valueApproximate quantile of the specified level.Type:Float64 for numeric data type input.Date if input values have the Date type.DateTime if input values have the DateTime type.\nExamples: SELECT quantileDeterministic(val, 1) FROM t\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/quantileexact"], "Title": ["quantileExact"], "Feature": ["quantileExact(level)(expr)"], "Description": ["quantileExact", "Exactly computes the quantile of a numeric data sequence.", "To get exact value, all the passed values are combined into an array, which is then partially sorted. Therefore, the function consumes O(n) memory, where n is a number of values that were passed. However, for a small number of values, the function is very effective.", "When using multiple quantile* functions with different levels in a query, the internal states are not combined (that is, the query works less efficiently than it could). In this case, use the quantiles function.", "Syntax", "quantileExact(level)(expr)", "Alias: medianExact.", "Arguments", "level \u2014 Level of quantile. Optional parameter. Constant floating-point number from 0 to 1. We recommend using a level value in the range of [0.01, 0.99]. Default value: 0.5. At level=0.5 the function calculates median.expr \u2014 Expression over the column values resulting in numeric data types, Date or DateTime.", "Returned value", "Quantile of the specified level.", "Type:", "Float64 for numeric data type input.Date if input values have the Date type.DateTime if input values have the DateTime type."], "Examples": ["SELECT quantileExact(number) FROM numbers(10)"], "Category": ["Aggregate Functions"], "index": 202, "vector_txt": "202:Feature: quantileExact(level)(expr)\nDescription: quantileExactExactly computes the quantile of a numeric data sequence.To get exact value, all the passed values are combined into an array, which is then partially sorted. Therefore, the function consumes O(n) memory, where n is a number of values that were passed. However, for a small number of values, the function is very effective.When using multiple quantile* functions with different levels in a query, the internal states are not combined (that is, the query works less efficiently than it could). In this case, use the quantiles function.SyntaxquantileExact(level)(expr)Alias: medianExact.Argumentslevel \u2014 Level of quantile. Optional parameter. Constant floating-point number from 0 to 1. We recommend using a level value in the range of [0.01, 0.99]. Default value: 0.5. At level=0.5 the function calculates median.expr \u2014 Expression over the column values resulting in numeric data types, Date or DateTime.Returned valueQuantile of the specified level.Type:Float64 for numeric data type input.Date if input values have the Date type.DateTime if input values have the DateTime type.\nExamples: SELECT quantileExact(number) FROM numbers(10)\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/quantileexact"], "Title": ["quantileExactLow"], "Feature": ["quantileExactLow(level)(expr)"], "Description": ["quantileExactLow", "Similar to quantileExact, this computes the exact quantile of a numeric data sequence.", "To get the exact value, all the passed values are combined into an array, which is then fully sorted.  The sorting algorithm's complexity is O(N\u00b7log(N)), where N = std::distance(first, last) comparisons.", "The return value depends on the quantile level and the number of elements in the selection, i.e. if the level is 0.5, then the function returns the lower median value for an even number of elements and the middle median value for an odd number of elements. Median is calculated similarly to the median_low implementation which is used in python.", "For all other levels, the element at the index corresponding to the value of level * size_of_array is returned. For example:", "SELECT quantileExactLow(0.1)(number) FROM numbers(10)\u250c\u2500quantileExactLow(0.1)(number)\u2500\u2510\u2502                             1 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "When using multiple quantile* functions with different levels in a query, the internal states are not combined (that is, the query works less efficiently than it could). In this case, use the quantiles function.", "Syntax", "quantileExactLow(level)(expr)", "Alias: medianExactLow.", "Arguments", "level \u2014 Level of quantile. Optional parameter. Constant floating-point number from 0 to 1. We recommend using a level value in the range of [0.01, 0.99]. Default value: 0.5. At level=0.5 the function calculates median.expr \u2014 Expression over the column values resulting in numeric data types, Date or DateTime.", "Returned value", "Quantile of the specified level.", "Type:", "Float64 for numeric data type input.Date if input values have the Date type.DateTime if input values have the DateTime type."], "Examples": ["SELECT quantileExactLow(number) FROM numbers(10)"], "Category": ["Aggregate Functions"], "index": 203, "vector_txt": "203:Feature: quantileExactLow(level)(expr)\nDescription: quantileExactLowSimilar to quantileExact, this computes the exact quantile of a numeric data sequence.To get the exact value, all the passed values are combined into an array, which is then fully sorted.  The sorting algorithm's complexity is O(N\u00b7log(N)), where N = std::distance(first, last) comparisons.The return value depends on the quantile level and the number of elements in the selection, i.e. if the level is 0.5, then the function returns the lower median value for an even number of elements and the middle median value for an odd number of elements. Median is calculated similarly to the median_low implementation which is used in python.For all other levels, the element at the index corresponding to the value of level * size_of_array is returned. For example:SELECT quantileExactLow(0.1)(number) FROM numbers(10)\u250c\u2500quantileExactLow(0.1)(number)\u2500\u2510\u2502                             1 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518When using multiple quantile* functions with different levels in a query, the internal states are not combined (that is, the query works less efficiently than it could). In this case, use the quantiles function.SyntaxquantileExactLow(level)(expr)Alias: medianExactLow.Argumentslevel \u2014 Level of quantile. Optional parameter. Constant floating-point number from 0 to 1. We recommend using a level value in the range of [0.01, 0.99]. Default value: 0.5. At level=0.5 the function calculates median.expr \u2014 Expression over the column values resulting in numeric data types, Date or DateTime.Returned valueQuantile of the specified level.Type:Float64 for numeric data type input.Date if input values have the Date type.DateTime if input values have the DateTime type.\nExamples: SELECT quantileExactLow(number) FROM numbers(10)\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/quantileexact"], "Title": ["quantileExactHigh"], "Feature": ["quantileExactHigh(level)(expr)"], "Description": ["quantileExactHigh", "Similar to quantileExact, this computes the exact quantile of a numeric data sequence.", "All the passed values are combined into an array, which is then fully sorted, to get the exact value.  The sorting algorithm's complexity is O(N\u00b7log(N)), where N = std::distance(first, last) comparisons.", "The return value depends on the quantile level and the number of elements in the selection, i.e. if the level is 0.5, then the function returns the higher median value for an even number of elements and the middle median value for an odd number of elements. Median is calculated similarly to the median_high implementation which is used in python. For all other levels, the element at the index corresponding to the value of level * size_of_array is returned.", "This implementation behaves exactly similar to the current quantileExact implementation.", "When using multiple quantile* functions with different levels in a query, the internal states are not combined (that is, the query works less efficiently than it could). In this case, use the quantiles function.", "Syntax", "quantileExactHigh(level)(expr)", "Alias: medianExactHigh.", "Arguments", "level \u2014 Level of quantile. Optional parameter. Constant floating-point number from 0 to 1. We recommend using a level value in the range of [0.01, 0.99]. Default value: 0.5. At level=0.5 the function calculates median.expr \u2014 Expression over the column values resulting in numeric data types, Date or DateTime.", "Returned value", "Quantile of the specified level.", "Type:", "Float64 for numeric data type input.Date if input values have the Date type.DateTime if input values have the DateTime type."], "Examples": ["SELECT quantileExactHigh(number) FROM numbers(10)"], "Category": ["Aggregate Functions"], "index": 204, "vector_txt": "204:Feature: quantileExactHigh(level)(expr)\nDescription: quantileExactHighSimilar to quantileExact, this computes the exact quantile of a numeric data sequence.All the passed values are combined into an array, which is then fully sorted, to get the exact value.  The sorting algorithm's complexity is O(N\u00b7log(N)), where N = std::distance(first, last) comparisons.The return value depends on the quantile level and the number of elements in the selection, i.e. if the level is 0.5, then the function returns the higher median value for an even number of elements and the middle median value for an odd number of elements. Median is calculated similarly to the median_high implementation which is used in python. For all other levels, the element at the index corresponding to the value of level * size_of_array is returned.This implementation behaves exactly similar to the current quantileExact implementation.When using multiple quantile* functions with different levels in a query, the internal states are not combined (that is, the query works less efficiently than it could). In this case, use the quantiles function.SyntaxquantileExactHigh(level)(expr)Alias: medianExactHigh.Argumentslevel \u2014 Level of quantile. Optional parameter. Constant floating-point number from 0 to 1. We recommend using a level value in the range of [0.01, 0.99]. Default value: 0.5. At level=0.5 the function calculates median.expr \u2014 Expression over the column values resulting in numeric data types, Date or DateTime.Returned valueQuantile of the specified level.Type:Float64 for numeric data type input.Date if input values have the Date type.DateTime if input values have the DateTime type.\nExamples: SELECT quantileExactHigh(number) FROM numbers(10)\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/quantileexact"], "Title": ["quantileExactExclusive"], "Feature": ["quantileExactExclusive(level)(expr)"], "Description": ["quantileExactExclusive", "Exactly computes the quantile of a numeric data sequence.", "To get exact value, all the passed values are combined into an array, which is then partially sorted. Therefore, the function consumes O(n) memory, where n is a number of values that were passed. However, for a small number of values, the function is very effective.", "This function is equivalent to PERCENTILE.EXC Excel function, (type R6).", "When using multiple quantileExactExclusive functions with different levels in a query, the internal states are not combined (that is, the query works less efficiently than it could). In this case, use the quantilesExactExclusive function.", "Syntax", "quantileExactExclusive(level)(expr)", "Arguments", "expr \u2014 Expression over the column values resulting in numeric data types, Date or DateTime.", "Parameters", "level \u2014 Level of quantile. Optional. Possible values: (0, 1) \u2014 bounds not included. Default value: 0.5. At level=0.5 the function calculates median. Float.", "Returned value", "Quantile of the specified level.", "Type:", "Float64 for numeric data type input.Date if input values have the Date type.DateTime if input values have the DateTime type."], "Examples": ["CREATE TABLE num AS numbers(1000);SELECT quantileExactExclusive(0.6)(x) FROM (SELECT number AS x FROM num);"], "Category": ["Aggregate Functions"], "index": 205, "vector_txt": "205:Feature: quantileExactExclusive(level)(expr)\nDescription: quantileExactExclusiveExactly computes the quantile of a numeric data sequence.To get exact value, all the passed values are combined into an array, which is then partially sorted. Therefore, the function consumes O(n) memory, where n is a number of values that were passed. However, for a small number of values, the function is very effective.This function is equivalent to PERCENTILE.EXC Excel function, (type R6).When using multiple quantileExactExclusive functions with different levels in a query, the internal states are not combined (that is, the query works less efficiently than it could). In this case, use the quantilesExactExclusive function.SyntaxquantileExactExclusive(level)(expr)Argumentsexpr \u2014 Expression over the column values resulting in numeric data types, Date or DateTime.Parameterslevel \u2014 Level of quantile. Optional. Possible values: (0, 1) \u2014 bounds not included. Default value: 0.5. At level=0.5 the function calculates median. Float.Returned valueQuantile of the specified level.Type:Float64 for numeric data type input.Date if input values have the Date type.DateTime if input values have the DateTime type.\nExamples: CREATE TABLE num AS numbers(1000);SELECT quantileExactExclusive(0.6)(x) FROM (SELECT number AS x FROM num);\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/quantileexact"], "Title": ["quantileExactInclusive"], "Feature": ["quantileExactInclusive(level)(expr)"], "Description": ["quantileExactInclusive", "Exactly computes the quantile of a numeric data sequence.", "To get exact value, all the passed values are combined into an array, which is then partially sorted. Therefore, the function consumes O(n) memory, where n is a number of values that were passed. However, for a small number of values, the function is very effective.", "This function is equivalent to PERCENTILE.INC Excel function, (type R7).", "When using multiple quantileExactInclusive functions with different levels in a query, the internal states are not combined (that is, the query works less efficiently than it could). In this case, use the quantilesExactInclusive function.", "Syntax", "quantileExactInclusive(level)(expr)", "Arguments", "expr \u2014 Expression over the column values resulting in numeric data types, Date or DateTime.", "Parameters", "level \u2014 Level of quantile. Optional. Possible values: [0, 1] \u2014 bounds included. Default value: 0.5. At level=0.5 the function calculates median. Float.", "Returned value", "Quantile of the specified level.", "Type:", "Float64 for numeric data type input.Date if input values have the Date type.DateTime if input values have the DateTime type."], "Examples": ["CREATE TABLE num AS numbers(1000);SELECT quantileExactInclusive(0.6)(x) FROM (SELECT number AS x FROM num);"], "Category": ["Aggregate Functions"], "index": 206, "vector_txt": "206:Feature: quantileExactInclusive(level)(expr)\nDescription: quantileExactInclusiveExactly computes the quantile of a numeric data sequence.To get exact value, all the passed values are combined into an array, which is then partially sorted. Therefore, the function consumes O(n) memory, where n is a number of values that were passed. However, for a small number of values, the function is very effective.This function is equivalent to PERCENTILE.INC Excel function, (type R7).When using multiple quantileExactInclusive functions with different levels in a query, the internal states are not combined (that is, the query works less efficiently than it could). In this case, use the quantilesExactInclusive function.SyntaxquantileExactInclusive(level)(expr)Argumentsexpr \u2014 Expression over the column values resulting in numeric data types, Date or DateTime.Parameterslevel \u2014 Level of quantile. Optional. Possible values: [0, 1] \u2014 bounds included. Default value: 0.5. At level=0.5 the function calculates median. Float.Returned valueQuantile of the specified level.Type:Float64 for numeric data type input.Date if input values have the Date type.DateTime if input values have the DateTime type.\nExamples: CREATE TABLE num AS numbers(1000);SELECT quantileExactInclusive(0.6)(x) FROM (SELECT number AS x FROM num);\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/quantileexactweighted"], "Title": ["quantileExactWeighted"], "Feature": ["quantileExactWeighted(level)(expr, weight)"], "Description": ["quantileExactWeighted", "Exactly computes the quantile of a numeric data sequence, taking into account the weight of each element.", "To get exact value, all the passed values are combined into an array, which is then partially sorted. Each value is counted with its weight, as if it is present weight times. A hash table is used in the algorithm. Because of this, if the passed values are frequently repeated, the function consumes less RAM than quantileExact. You can use this function instead of quantileExact and specify the weight 1.", "When using multiple quantile* functions with different levels in a query, the internal states are not combined (that is, the query works less efficiently than it could). In this case, use the quantiles function.", "Syntax", "quantileExactWeighted(level)(expr, weight)", "Alias: medianExactWeighted.", "Arguments", "level \u2014 Level of quantile. Optional parameter. Constant floating-point number from 0 to 1. We recommend using a level value in the range of [0.01, 0.99]. Default value: 0.5. At level=0.5 the function calculates median.expr \u2014 Expression over the column values resulting in numeric data types, Date or DateTime.weight \u2014 Column with weights of sequence members. Weight is a number of value occurrences.", "Returned value", "Quantile of the specified level.", "Type:", "Float64 for numeric data type input.Date if input values have the Date type.DateTime if input values have the DateTime type."], "Examples": ["SELECT quantileExactWeighted(n, val) FROM t"], "Category": ["Aggregate Functions"], "index": 207, "vector_txt": "207:Feature: quantileExactWeighted(level)(expr, weight)\nDescription: quantileExactWeightedExactly computes the quantile of a numeric data sequence, taking into account the weight of each element.To get exact value, all the passed values are combined into an array, which is then partially sorted. Each value is counted with its weight, as if it is present weight times. A hash table is used in the algorithm. Because of this, if the passed values are frequently repeated, the function consumes less RAM than quantileExact. You can use this function instead of quantileExact and specify the weight 1.When using multiple quantile* functions with different levels in a query, the internal states are not combined (that is, the query works less efficiently than it could). In this case, use the quantiles function.SyntaxquantileExactWeighted(level)(expr, weight)Alias: medianExactWeighted.Argumentslevel \u2014 Level of quantile. Optional parameter. Constant floating-point number from 0 to 1. We recommend using a level value in the range of [0.01, 0.99]. Default value: 0.5. At level=0.5 the function calculates median.expr \u2014 Expression over the column values resulting in numeric data types, Date or DateTime.weight \u2014 Column with weights of sequence members. Weight is a number of value occurrences.Returned valueQuantile of the specified level.Type:Float64 for numeric data type input.Date if input values have the Date type.DateTime if input values have the DateTime type.\nExamples: SELECT quantileExactWeighted(n, val) FROM t\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/quantileGK"], "Title": ["quantileGK"], "Feature": ["quantileGK(accuracy, level)(expr)"], "Description": ["quantileGK", "Computes the quantile of a numeric data sequence using the Greenwald-Khanna algorithm. The Greenwald-Khanna algorithm is an algorithm used to compute quantiles on a stream of data in a highly efficient manner. It was introduced by Michael Greenwald and Sanjeev Khanna in 2001. It is widely used in databases and big data systems where computing accurate quantiles on a large stream of data in real-time is necessary. The algorithm is highly efficient, taking only O(log n) space and O(log log n) time per item (where n is the size of the input). It is also highly accurate, providing an approximate quantile value with high probability.", "quantileGK is different from other quantile functions in ClickHouse, because it enables user to control the accuracy of the approximate quantile result.", "Syntax", "quantileGK(accuracy, level)(expr)", "Alias: medianGK.", "Arguments", "accuracy \u2014 Accuracy of quantile. Constant positive integer. Larger accuracy value means less error. For example, if the accuracy argument is set to 100, the computed quantile will have an error no greater than 1% with high probability. There is a trade-off between the accuracy of the computed quantiles and the computational complexity of the algorithm. A larger accuracy requires more memory and computational resources to compute the quantile accurately, while a smaller accuracy argument allows for a faster and more memory-efficient computation but with a slightly lower accuracy.level \u2014 Level of quantile. Optional parameter. Constant floating-point number from 0 to 1. Default value: 0.5. At level=0.5 the function calculates median.expr \u2014 Expression over the column values resulting in numeric data types, Date or DateTime.", "Returned value", "Quantile of the specified level and accuracy.", "Type:", "Float64 for numeric data type input.Date if input values have the Date type.DateTime if input values have the DateTime type."], "Examples": ["SELECT quantileGK(1, 0.25)(number + 1)FROM numbers(1000)\u250c\u2500quantileGK(1, 0.25)(plus(number, 1))\u2500\u2510\u2502                                    1 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT quantileGK(10, 0.25)(number + 1)FROM numbers(1000)\u250c\u2500quantileGK(10, 0.25)(plus(number, 1))\u2500\u2510\u2502                                   156 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT quantileGK(100, 0.25)(number + 1)FROM numbers(1000)\u250c\u2500quantileGK(100, 0.25)(plus(number, 1))\u2500\u2510\u2502                                    251 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT quantileGK(1000, 0.25)(number + 1)FROM numbers(1000)\u250c\u2500quantileGK(1000, 0.25)(plus(number, 1))\u2500\u2510\u2502                                     249 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Category": ["Aggregate Functions"], "index": 208, "vector_txt": "208:Feature: quantileGK(accuracy, level)(expr)\nDescription: quantileGKComputes the quantile of a numeric data sequence using the Greenwald-Khanna algorithm. The Greenwald-Khanna algorithm is an algorithm used to compute quantiles on a stream of data in a highly efficient manner. It was introduced by Michael Greenwald and Sanjeev Khanna in 2001. It is widely used in databases and big data systems where computing accurate quantiles on a large stream of data in real-time is necessary. The algorithm is highly efficient, taking only O(log n) space and O(log log n) time per item (where n is the size of the input). It is also highly accurate, providing an approximate quantile value with high probability.quantileGK is different from other quantile functions in ClickHouse, because it enables user to control the accuracy of the approximate quantile result.SyntaxquantileGK(accuracy, level)(expr)Alias: medianGK.Argumentsaccuracy \u2014 Accuracy of quantile. Constant positive integer. Larger accuracy value means less error. For example, if the accuracy argument is set to 100, the computed quantile will have an error no greater than 1% with high probability. There is a trade-off between the accuracy of the computed quantiles and the computational complexity of the algorithm. A larger accuracy requires more memory and computational resources to compute the quantile accurately, while a smaller accuracy argument allows for a faster and more memory-efficient computation but with a slightly lower accuracy.level \u2014 Level of quantile. Optional parameter. Constant floating-point number from 0 to 1. Default value: 0.5. At level=0.5 the function calculates median.expr \u2014 Expression over the column values resulting in numeric data types, Date or DateTime.Returned valueQuantile of the specified level and accuracy.Type:Float64 for numeric data type input.Date if input values have the Date type.DateTime if input values have the DateTime type.\nExamples: SELECT quantileGK(1, 0.25)(number + 1)FROM numbers(1000)\u250c\u2500quantileGK(1, 0.25)(plus(number, 1))\u2500\u2510\u2502                                    1 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT quantileGK(10, 0.25)(number + 1)FROM numbers(1000)\u250c\u2500quantileGK(10, 0.25)(plus(number, 1))\u2500\u2510\u2502                                   156 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT quantileGK(100, 0.25)(number + 1)FROM numbers(1000)\u250c\u2500quantileGK(100, 0.25)(plus(number, 1))\u2500\u2510\u2502                                    251 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT quantileGK(1000, 0.25)(number + 1)FROM numbers(1000)\u250c\u2500quantileGK(1000, 0.25)(plus(number, 1))\u2500\u2510\u2502                                     249 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/quantileInterpolatedWeighted"], "Title": ["quantileInterpolatedWeighted"], "Feature": ["quantileInterpolatedWeighted(level)(expr, weight)"], "Description": ["quantileInterpolatedWeighted", "Computes quantile of a numeric data sequence using linear interpolation, taking into account the weight of each element.", "To get the interpolated value, all the passed values are combined into an array, which are then sorted by their corresponding weights. Quantile interpolation is then performed using the weighted percentile method by building a cumulative distribution based on weights and then a linear interpolation is performed using the weights and the values to compute the quantiles.", "When using multiple quantile* functions with different levels in a query, the internal states are not combined (that is, the query works less efficiently than it could). In this case, use the quantiles function.", "Syntax", "quantileInterpolatedWeighted(level)(expr, weight)", "Alias: medianInterpolatedWeighted.", "Arguments", "level \u2014 Level of quantile. Optional parameter. Constant floating-point number from 0 to 1. We recommend using a level value in the range of [0.01, 0.99]. Default value: 0.5. At level=0.5 the function calculates median.expr \u2014 Expression over the column values resulting in numeric data types, Date or DateTime.weight \u2014 Column with weights of sequence members. Weight is a number of value occurrences.", "Returned value", "Quantile of the specified level.", "Type:", "Float64 for numeric data type input.Date if input values have the Date type.DateTime if input values have the DateTime type."], "Examples": ["SELECT quantileInterpolatedWeighted(n, val) FROM t"], "Category": ["Aggregate Functions"], "index": 209, "vector_txt": "209:Feature: quantileInterpolatedWeighted(level)(expr, weight)\nDescription: quantileInterpolatedWeightedComputes quantile of a numeric data sequence using linear interpolation, taking into account the weight of each element.To get the interpolated value, all the passed values are combined into an array, which are then sorted by their corresponding weights. Quantile interpolation is then performed using the weighted percentile method by building a cumulative distribution based on weights and then a linear interpolation is performed using the weights and the values to compute the quantiles.When using multiple quantile* functions with different levels in a query, the internal states are not combined (that is, the query works less efficiently than it could). In this case, use the quantiles function.SyntaxquantileInterpolatedWeighted(level)(expr, weight)Alias: medianInterpolatedWeighted.Argumentslevel \u2014 Level of quantile. Optional parameter. Constant floating-point number from 0 to 1. We recommend using a level value in the range of [0.01, 0.99]. Default value: 0.5. At level=0.5 the function calculates median.expr \u2014 Expression over the column values resulting in numeric data types, Date or DateTime.weight \u2014 Column with weights of sequence members. Weight is a number of value occurrences.Returned valueQuantile of the specified level.Type:Float64 for numeric data type input.Date if input values have the Date type.DateTime if input values have the DateTime type.\nExamples: SELECT quantileInterpolatedWeighted(n, val) FROM t\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bit-functions"], "Title": ["bitXor(a, b)"], "Feature": ["bitXor(a, b)"], "Description": ["bitXor(a, b)"], "Examples": [], "Category": ["Bit Functions"], "index": 210, "vector_txt": "210:Feature: bitXor(a, b)\nDescription: bitXor(a, b)\nExamples: \nCategory: Bit Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/quantiles"], "Title": ["quantiles"], "Feature": ["quantiles"], "Description": ["quantiles", "Syntax: quantiles(level1, level2, ...)(x)", "All the quantile functions also have corresponding quantiles functions: quantiles, quantilesDeterministic, quantilesTiming, quantilesTimingWeighted, quantilesExact, quantilesExactWeighted, quantileInterpolatedWeighted, quantilesTDigest, quantilesBFloat16, quantilesDD. These functions calculate all the quantiles of the listed levels in one pass, and return an array of the resulting values."], "Examples": [], "Category": ["Aggregate Functions"], "index": 211, "vector_txt": "211:Feature: quantiles\nDescription: quantilesSyntax: quantiles(level1, level2, ...)(x)All the quantile functions also have corresponding quantiles functions: quantiles, quantilesDeterministic, quantilesTiming, quantilesTimingWeighted, quantilesExact, quantilesExactWeighted, quantileInterpolatedWeighted, quantilesTDigest, quantilesBFloat16, quantilesDD. These functions calculate all the quantiles of the listed levels in one pass, and return an array of the resulting values.\nExamples: \nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/quantiles"], "Title": ["quantilesExactExclusive"], "Feature": ["quantilesExactExclusive(level1, level2, ...)(expr)"], "Description": ["quantilesExactExclusive", "Exactly computes the quantiles of a numeric data sequence.", "To get exact value, all the passed values are combined into an array, which is then partially sorted. Therefore, the function consumes O(n) memory, where n is a number of values that were passed. However, for a small number of values, the function is very effective.", "This function is equivalent to PERCENTILE.EXC Excel function, (type R6).", "Works more efficiently with sets of levels than quantileExactExclusive.", "Syntax", "quantilesExactExclusive(level1, level2, ...)(expr)", "Arguments", "expr \u2014 Expression over the column values resulting in numeric data types, Date or DateTime.", "Parameters", "level \u2014 Levels of quantiles. Possible values: (0, 1) \u2014 bounds not included. Float.", "Returned value", "Array of quantiles of the specified levels.", "Type of array values:", "Float64 for numeric data type input.Date if input values have the Date type.DateTime if input values have the DateTime type."], "Examples": ["CREATE TABLE num AS numbers(1000);SELECT quantilesExactExclusive(0.25, 0.5, 0.75, 0.9, 0.95, 0.99, 0.999)(x) FROM (SELECT number AS x FROM num);"], "Category": ["Aggregate Functions"], "index": 212, "vector_txt": "212:Feature: quantilesExactExclusive(level1, level2, ...)(expr)\nDescription: quantilesExactExclusiveExactly computes the quantiles of a numeric data sequence.To get exact value, all the passed values are combined into an array, which is then partially sorted. Therefore, the function consumes O(n) memory, where n is a number of values that were passed. However, for a small number of values, the function is very effective.This function is equivalent to PERCENTILE.EXC Excel function, (type R6).Works more efficiently with sets of levels than quantileExactExclusive.SyntaxquantilesExactExclusive(level1, level2, ...)(expr)Argumentsexpr \u2014 Expression over the column values resulting in numeric data types, Date or DateTime.Parameterslevel \u2014 Levels of quantiles. Possible values: (0, 1) \u2014 bounds not included. Float.Returned valueArray of quantiles of the specified levels.Type of array values:Float64 for numeric data type input.Date if input values have the Date type.DateTime if input values have the DateTime type.\nExamples: CREATE TABLE num AS numbers(1000);SELECT quantilesExactExclusive(0.25, 0.5, 0.75, 0.9, 0.95, 0.99, 0.999)(x) FROM (SELECT number AS x FROM num);\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/quantiles"], "Title": ["quantilesExactInclusive"], "Feature": ["quantilesExactInclusive(level1, level2, ...)(expr)"], "Description": ["quantilesExactInclusive", "Exactly computes the quantiles of a numeric data sequence.", "To get exact value, all the passed values are combined into an array, which is then partially sorted. Therefore, the function consumes O(n) memory, where n is a number of values that were passed. However, for a small number of values, the function is very effective.", "This function is equivalent to PERCENTILE.INC Excel function, (type R7).", "Works more efficiently with sets of levels than quantileExactInclusive.", "Syntax", "quantilesExactInclusive(level1, level2, ...)(expr)", "Arguments", "expr \u2014 Expression over the column values resulting in numeric data types, Date or DateTime.", "Parameters", "level \u2014 Levels of quantiles. Possible values: [0, 1] \u2014 bounds included. Float.", "Returned value", "Array of quantiles of the specified levels.", "Type of array values:", "Float64 for numeric data type input.Date if input values have the Date type.DateTime if input values have the DateTime type."], "Examples": ["CREATE TABLE num AS numbers(1000);SELECT quantilesExactInclusive(0.25, 0.5, 0.75, 0.9, 0.95, 0.99, 0.999)(x) FROM (SELECT number AS x FROM num);"], "Category": ["Aggregate Functions"], "index": 213, "vector_txt": "213:Feature: quantilesExactInclusive(level1, level2, ...)(expr)\nDescription: quantilesExactInclusiveExactly computes the quantiles of a numeric data sequence.To get exact value, all the passed values are combined into an array, which is then partially sorted. Therefore, the function consumes O(n) memory, where n is a number of values that were passed. However, for a small number of values, the function is very effective.This function is equivalent to PERCENTILE.INC Excel function, (type R7).Works more efficiently with sets of levels than quantileExactInclusive.SyntaxquantilesExactInclusive(level1, level2, ...)(expr)Argumentsexpr \u2014 Expression over the column values resulting in numeric data types, Date or DateTime.Parameterslevel \u2014 Levels of quantiles. Possible values: [0, 1] \u2014 bounds included. Float.Returned valueArray of quantiles of the specified levels.Type of array values:Float64 for numeric data type input.Date if input values have the Date type.DateTime if input values have the DateTime type.\nExamples: CREATE TABLE num AS numbers(1000);SELECT quantilesExactInclusive(0.25, 0.5, 0.75, 0.9, 0.95, 0.99, 0.999)(x) FROM (SELECT number AS x FROM num);\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/quantiles"], "Title": ["quantilesGK"], "Feature": ["quantilesGK(accuracy, level1, level2, ...)(expr)"], "Description": ["quantilesGK", "quantilesGK works similarly with quantileGK but allows us to calculate quantities at different levels simultaneously and returns an array.", "Syntax", "quantilesGK(accuracy, level1, level2, ...)(expr)", "Returned value", "Array of quantiles of the specified levels.", "Type of array values:", "Float64 for numeric data type input.Date if input values have the Date type.DateTime if input values have the DateTime type."], "Examples": ["SELECT quantilesGK(1, 0.25, 0.5, 0.75)(number + 1)FROM numbers(1000)\u250c\u2500quantilesGK(1, 0.25, 0.5, 0.75)(plus(number, 1))\u2500\u2510\u2502 [1,1,1]                                          \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT quantilesGK(10, 0.25, 0.5, 0.75)(number + 1)FROM numbers(1000)\u250c\u2500quantilesGK(10, 0.25, 0.5, 0.75)(plus(number, 1))\u2500\u2510\u2502 [156,413,659]                                     \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT quantilesGK(100, 0.25, 0.5, 0.75)(number + 1)FROM numbers(1000)\u250c\u2500quantilesGK(100, 0.25, 0.5, 0.75)(plus(number, 1))\u2500\u2510\u2502 [251,498,741]                                      \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT quantilesGK(1000, 0.25, 0.5, 0.75)(number + 1)FROM numbers(1000)\u250c\u2500quantilesGK(1000, 0.25, 0.5, 0.75)(plus(number, 1))\u2500\u2510\u2502 [249,499,749]                                       \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Category": ["Aggregate Functions"], "index": 214, "vector_txt": "214:Feature: quantilesGK(accuracy, level1, level2, ...)(expr)\nDescription: quantilesGKquantilesGK works similarly with quantileGK but allows us to calculate quantities at different levels simultaneously and returns an array.SyntaxquantilesGK(accuracy, level1, level2, ...)(expr)Returned valueArray of quantiles of the specified levels.Type of array values:Float64 for numeric data type input.Date if input values have the Date type.DateTime if input values have the DateTime type.\nExamples: SELECT quantilesGK(1, 0.25, 0.5, 0.75)(number + 1)FROM numbers(1000)\u250c\u2500quantilesGK(1, 0.25, 0.5, 0.75)(plus(number, 1))\u2500\u2510\u2502 [1,1,1]                                          \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT quantilesGK(10, 0.25, 0.5, 0.75)(number + 1)FROM numbers(1000)\u250c\u2500quantilesGK(10, 0.25, 0.5, 0.75)(plus(number, 1))\u2500\u2510\u2502 [156,413,659]                                     \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT quantilesGK(100, 0.25, 0.5, 0.75)(number + 1)FROM numbers(1000)\u250c\u2500quantilesGK(100, 0.25, 0.5, 0.75)(plus(number, 1))\u2500\u2510\u2502 [251,498,741]                                      \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT quantilesGK(1000, 0.25, 0.5, 0.75)(number + 1)FROM numbers(1000)\u250c\u2500quantilesGK(1000, 0.25, 0.5, 0.75)(plus(number, 1))\u2500\u2510\u2502 [249,499,749]                                       \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/quantiletdigest"], "Title": ["quantileTDigest"], "Feature": ["quantileTDigest(level)(expr)"], "Description": ["quantileTDigest", "Computes an approximate quantile of a numeric data sequence using the t-digest algorithm.", "Memory consumption is log(n), where n is a number of values. The result depends on the order of running the query, and is nondeterministic.", "The performance of the function is lower than performance of quantile or quantileTiming. In terms of the ratio of State size to precision, this function is much better than quantile.", "When using multiple quantile* functions with different levels in a query, the internal states are not combined (that is, the query works less efficiently than it could). In this case, use the quantiles function.", "Syntax", "quantileTDigest(level)(expr)", "Alias: medianTDigest.", "Arguments", "level \u2014 Level of quantile. Optional parameter. Constant floating-point number from 0 to 1. We recommend using a level value in the range of [0.01, 0.99]. Default value: 0.5. At level=0.5 the function calculates median.expr \u2014 Expression over the column values resulting in numeric data types, Date or DateTime.", "Returned value", "Approximate quantile of the specified level.", "Type:", "Float64 for numeric data type input.Date if input values have the Date type.DateTime if input values have the DateTime type."], "Examples": ["SELECT quantileTDigest(number) FROM numbers(10)"], "Category": ["Aggregate Functions"], "index": 215, "vector_txt": "215:Feature: quantileTDigest(level)(expr)\nDescription: quantileTDigestComputes an approximate quantile of a numeric data sequence using the t-digest algorithm.Memory consumption is log(n), where n is a number of values. The result depends on the order of running the query, and is nondeterministic.The performance of the function is lower than performance of quantile or quantileTiming. In terms of the ratio of State size to precision, this function is much better than quantile.When using multiple quantile* functions with different levels in a query, the internal states are not combined (that is, the query works less efficiently than it could). In this case, use the quantiles function.SyntaxquantileTDigest(level)(expr)Alias: medianTDigest.Argumentslevel \u2014 Level of quantile. Optional parameter. Constant floating-point number from 0 to 1. We recommend using a level value in the range of [0.01, 0.99]. Default value: 0.5. At level=0.5 the function calculates median.expr \u2014 Expression over the column values resulting in numeric data types, Date or DateTime.Returned valueApproximate quantile of the specified level.Type:Float64 for numeric data type input.Date if input values have the Date type.DateTime if input values have the DateTime type.\nExamples: SELECT quantileTDigest(number) FROM numbers(10)\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/quantiletdigestweighted"], "Title": ["quantileTDigestWeighted"], "Feature": ["quantileTDigestWeighted(level)(expr, weight)"], "Description": ["quantileTDigestWeighted", "Computes an approximate quantile of a numeric data sequence using the t-digest algorithm. The function takes into account the weight of each sequence member. The maximum error is 1%. Memory consumption is log(n), where n is a number of values.", "The performance of the function is lower than performance of quantile or quantileTiming. In terms of the ratio of State size to precision, this function is much better than quantile.", "The result depends on the order of running the query, and is nondeterministic.", "When using multiple quantile* functions with different levels in a query, the internal states are not combined (that is, the query works less efficiently than it could). In this case, use the quantiles function.", "NoteUsing quantileTDigestWeighted is not recommended for tiny data sets and can lead to significant error. In this case, consider possibility of using quantileTDigest instead.", "Syntax", "quantileTDigestWeighted(level)(expr, weight)", "Alias: medianTDigestWeighted.", "Arguments", "level \u2014 Level of quantile. Optional parameter. Constant floating-point number from 0 to 1. We recommend using a level value in the range of [0.01, 0.99]. Default value: 0.5. At level=0.5 the function calculates median.expr \u2014 Expression over the column values resulting in numeric data types, Date or DateTime.weight \u2014 Column with weights of sequence elements. Weight is a number of value occurrences.", "Returned value", "Approximate quantile of the specified level.", "Type:", "Float64 for numeric data type input.Date if input values have the Date type.DateTime if input values have the DateTime type."], "Examples": ["SELECT quantileTDigestWeighted(number, 1) FROM numbers(10)"], "Category": ["Aggregate Functions"], "index": 216, "vector_txt": "216:Feature: quantileTDigestWeighted(level)(expr, weight)\nDescription: quantileTDigestWeightedComputes an approximate quantile of a numeric data sequence using the t-digest algorithm. The function takes into account the weight of each sequence member. The maximum error is 1%. Memory consumption is log(n), where n is a number of values.The performance of the function is lower than performance of quantile or quantileTiming. In terms of the ratio of State size to precision, this function is much better than quantile.The result depends on the order of running the query, and is nondeterministic.When using multiple quantile* functions with different levels in a query, the internal states are not combined (that is, the query works less efficiently than it could). In this case, use the quantiles function.NoteUsing quantileTDigestWeighted is not recommended for tiny data sets and can lead to significant error. In this case, consider possibility of using quantileTDigest instead.SyntaxquantileTDigestWeighted(level)(expr, weight)Alias: medianTDigestWeighted.Argumentslevel \u2014 Level of quantile. Optional parameter. Constant floating-point number from 0 to 1. We recommend using a level value in the range of [0.01, 0.99]. Default value: 0.5. At level=0.5 the function calculates median.expr \u2014 Expression over the column values resulting in numeric data types, Date or DateTime.weight \u2014 Column with weights of sequence elements. Weight is a number of value occurrences.Returned valueApproximate quantile of the specified level.Type:Float64 for numeric data type input.Date if input values have the Date type.DateTime if input values have the DateTime type.\nExamples: SELECT quantileTDigestWeighted(number, 1) FROM numbers(10)\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/quantiletiming"], "Title": ["quantileTiming"], "Feature": ["quantileTiming(level)(expr)"], "Description": ["quantileTiming", "With the determined precision computes the quantile of a numeric data sequence.", "The result is deterministic (it does not depend on the query processing order). The function is optimized for working with sequences which describe distributions like loading web pages times or backend response times.", "When using multiple quantile* functions with different levels in a query, the internal states are not combined (that is, the query works less efficiently than it could). In this case, use the quantiles function.", "Syntax", "quantileTiming(level)(expr)", "Alias: medianTiming.", "Arguments", "level \u2014 Level of quantile. Optional parameter. Constant floating-point number from 0 to 1. We recommend using a level value in the range of [0.01, 0.99]. Default value: 0.5. At level=0.5 the function calculates median.expr \u2014 Expression over a column values returning a Float*-type number.If negative values are passed to the function, the behavior is undefined.If the value is greater than 30,000 (a page loading time of more than 30 seconds), it is assumed to be 30,000.", "Accuracy", "The calculation is accurate if:", "Total number of values does not exceed 5670.Total number of values exceeds 5670, but the page loading time is less than 1024ms.", "Otherwise, the result of the calculation is rounded to the nearest multiple of 16 ms.", "NoteFor calculating page loading time quantiles, this function is more effective and accurate than quantile.", "Returned value", "Quantile of the specified level.", "Type: Float32.", "NoteIf no values are passed to the function (when using quantileTimingIf), NaN is returned. The purpose of this is to differentiate these cases from cases that result in zero. See ORDER BY clause for notes on sorting NaN values."], "Examples": ["SELECT quantileTiming(response_time) FROM t"], "Category": ["Aggregate Functions"], "index": 217, "vector_txt": "217:Feature: quantileTiming(level)(expr)\nDescription: quantileTimingWith the determined precision computes the quantile of a numeric data sequence.The result is deterministic (it does not depend on the query processing order). The function is optimized for working with sequences which describe distributions like loading web pages times or backend response times.When using multiple quantile* functions with different levels in a query, the internal states are not combined (that is, the query works less efficiently than it could). In this case, use the quantiles function.SyntaxquantileTiming(level)(expr)Alias: medianTiming.Argumentslevel \u2014 Level of quantile. Optional parameter. Constant floating-point number from 0 to 1. We recommend using a level value in the range of [0.01, 0.99]. Default value: 0.5. At level=0.5 the function calculates median.expr \u2014 Expression over a column values returning a Float*-type number.If negative values are passed to the function, the behavior is undefined.If the value is greater than 30,000 (a page loading time of more than 30 seconds), it is assumed to be 30,000.AccuracyThe calculation is accurate if:Total number of values does not exceed 5670.Total number of values exceeds 5670, but the page loading time is less than 1024ms.Otherwise, the result of the calculation is rounded to the nearest multiple of 16 ms.NoteFor calculating page loading time quantiles, this function is more effective and accurate than quantile.Returned valueQuantile of the specified level.Type: Float32.NoteIf no values are passed to the function (when using quantileTimingIf), NaN is returned. The purpose of this is to differentiate these cases from cases that result in zero. See ORDER BY clause for notes on sorting NaN values.\nExamples: SELECT quantileTiming(response_time) FROM t\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/quantiletimingweighted"], "Title": ["quantileTimingWeighted"], "Feature": ["quantileTimingWeighted(level)(expr, weight)"], "Description": ["quantileTimingWeighted", "With the determined precision computes the quantile of a numeric data sequence according to the weight of each sequence member.", "The result is deterministic (it does not depend on the query processing order). The function is optimized for working with sequences which describe distributions like loading web pages times or backend response times.", "When using multiple quantile* functions with different levels in a query, the internal states are not combined (that is, the query works less efficiently than it could). In this case, use the quantiles function.", "Syntax", "quantileTimingWeighted(level)(expr, weight)", "Alias: medianTimingWeighted.", "Arguments", "level \u2014 Level of quantile. Optional parameter. Constant floating-point number from 0 to 1. We recommend using a level value in the range of [0.01, 0.99]. Default value: 0.5. At level=0.5 the function calculates median.expr \u2014 Expression over a column values returning a Float*-type number.  - If negative values are passed to the function, the behavior is undefined.  - If the value is greater than 30,000 (a page loading time of more than 30 seconds), it is assumed to be 30,000.weight \u2014 Column with weights of sequence elements. Weight is a number of value occurrences.", "Accuracy", "The calculation is accurate if:", "Total number of values does not exceed 5670.Total number of values exceeds 5670, but the page loading time is less than 1024ms.", "Otherwise, the result of the calculation is rounded to the nearest multiple of 16 ms.", "NoteFor calculating page loading time quantiles, this function is more effective and accurate than quantile.", "Returned value", "Quantile of the specified level.", "Type: Float32.", "NoteIf no values are passed to the function (when using quantileTimingIf), NaN is returned. The purpose of this is to differentiate these cases from cases that result in zero. See ORDER BY clause for notes on sorting NaN values."], "Examples": ["SELECT quantileTimingWeighted(response_time, weight) FROM t"], "Category": ["Aggregate Functions"], "index": 218, "vector_txt": "218:Feature: quantileTimingWeighted(level)(expr, weight)\nDescription: quantileTimingWeightedWith the determined precision computes the quantile of a numeric data sequence according to the weight of each sequence member.The result is deterministic (it does not depend on the query processing order). The function is optimized for working with sequences which describe distributions like loading web pages times or backend response times.When using multiple quantile* functions with different levels in a query, the internal states are not combined (that is, the query works less efficiently than it could). In this case, use the quantiles function.SyntaxquantileTimingWeighted(level)(expr, weight)Alias: medianTimingWeighted.Argumentslevel \u2014 Level of quantile. Optional parameter. Constant floating-point number from 0 to 1. We recommend using a level value in the range of [0.01, 0.99]. Default value: 0.5. At level=0.5 the function calculates median.expr \u2014 Expression over a column values returning a Float*-type number.  - If negative values are passed to the function, the behavior is undefined.  - If the value is greater than 30,000 (a page loading time of more than 30 seconds), it is assumed to be 30,000.weight \u2014 Column with weights of sequence elements. Weight is a number of value occurrences.AccuracyThe calculation is accurate if:Total number of values does not exceed 5670.Total number of values exceeds 5670, but the page loading time is less than 1024ms.Otherwise, the result of the calculation is rounded to the nearest multiple of 16 ms.NoteFor calculating page loading time quantiles, this function is more effective and accurate than quantile.Returned valueQuantile of the specified level.Type: Float32.NoteIf no values are passed to the function (when using quantileTimingIf), NaN is returned. The purpose of this is to differentiate these cases from cases that result in zero. See ORDER BY clause for notes on sorting NaN values.\nExamples: SELECT quantileTimingWeighted(response_time, weight) FROM t\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/quantiletimingweighted"], "Title": ["quantilesTimingWeighted"], "Feature": ["quantilesTimingWeighted"], "Description": ["quantilesTimingWeighted", "Same as quantileTimingWeighted, but accept multiple parameters with quantile levels and return an Array filled with many values of that quantiles."], "Examples": ["SELECT quantilesTimingWeighted(0,5, 0.99)(response_time, weight) FROM t"], "Category": ["Aggregate Functions"], "index": 219, "vector_txt": "219:Feature: quantilesTimingWeighted\nDescription: quantilesTimingWeightedSame as quantileTimingWeighted, but accept multiple parameters with quantile levels and return an Array filled with many values of that quantiles.\nExamples: SELECT quantilesTimingWeighted(0,5, 0.99)(response_time, weight) FROM t\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/rankCorr"], "Title": ["rankCorr"], "Feature": ["rankCorr(x, y)"], "Description": ["rankCorr", "Computes a rank correlation coefficient.", "Syntax", "rankCorr(x, y)", "Arguments", "x \u2014 Arbitrary value. Float32 or Float64.y \u2014 Arbitrary value. Float32 or Float64.", "Returned value(s)", "Returns a rank correlation coefficient of the ranks of x and y. The value of the correlation coefficient ranges from -1 to +1. If less than two arguments are passed, the function will return an exception. The value close to +1 denotes a high linear relationship, and with an increase of one random variable, the second random variable also increases. The value close to -1 denotes a high linear relationship, and with an increase of one random variable, the second random variable decreases. The value close or equal to 0 denotes no relationship between the two random variables.", "Type: Float64."], "Examples": ["SELECT rankCorr(number, number) FROM numbers(100);", "SELECT roundBankers(rankCorr(exp(number), sin(number)), 3) FROM numbers(100);"], "Category": ["Aggregate Functions"], "index": 220, "vector_txt": "220:Feature: rankCorr(x, y)\nDescription: rankCorrComputes a rank correlation coefficient.SyntaxrankCorr(x, y)Argumentsx \u2014 Arbitrary value. Float32 or Float64.y \u2014 Arbitrary value. Float32 or Float64.Returned value(s)Returns a rank correlation coefficient of the ranks of x and y. The value of the correlation coefficient ranges from -1 to +1. If less than two arguments are passed, the function will return an exception. The value close to +1 denotes a high linear relationship, and with an increase of one random variable, the second random variable also increases. The value close to -1 denotes a high linear relationship, and with an increase of one random variable, the second random variable decreases. The value close or equal to 0 denotes no relationship between the two random variables.Type: Float64.\nExamples: SELECT rankCorr(number, number) FROM numbers(100);SELECT roundBankers(rankCorr(exp(number), sin(number)), 3) FROM numbers(100);\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bit-functions"], "Title": ["bitNot(a)"], "Feature": ["bitNot(a)"], "Description": ["bitNot(a)"], "Examples": [], "Category": ["Bit Functions"], "index": 221, "vector_txt": "221:Feature: bitNot(a)\nDescription: bitNot(a)\nExamples: \nCategory: Bit Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/arithmetic-functions"], "Title": ["moduloOrZero"], "Feature": ["moduloOrZero(a, b)"], "Description": ["moduloOrZero", "Like modulo but returns zero when the divisor is zero.", "Syntax", "moduloOrZero(a, b)"], "Examples": ["moduloOrZero(a, b)"], "Category": ["Arithmetic Functions"], "index": 222, "vector_txt": "222:Feature: moduloOrZero(a, b)\nDescription: moduloOrZeroLike modulo but returns zero when the divisor is zero.SyntaxmoduloOrZero(a, b)\nExamples: moduloOrZero(a, b)\nCategory: Arithmetic Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/simplelinearregression"], "Title": ["simpleLinearRegression"], "Feature": ["simpleLinearRegression(x, y)"], "Description": ["simpleLinearRegression", "Performs simple (unidimensional) linear regression.", "simpleLinearRegression(x, y)", "Parameters:", "x \u2014 Column with explanatory variable values.y \u2014 Column with dependent variable values.", "Returned values:", "Constants (a, b) of the resulting line y = a*x + b."], "Examples": ["SELECT arrayReduce('simpleLinearRegression', [0, 1, 2, 3], [0, 1, 2, 3])", "SELECT arrayReduce('simpleLinearRegression', [0, 1, 2, 3], [3, 4, 5, 6])"], "Category": ["Aggregate Functions"], "index": 223, "vector_txt": "223:Feature: simpleLinearRegression(x, y)\nDescription: simpleLinearRegressionPerforms simple (unidimensional) linear regression.simpleLinearRegression(x, y)Parameters:x \u2014 Column with explanatory variable values.y \u2014 Column with dependent variable values.Returned values:Constants (a, b) of the resulting line y = a*x + b.\nExamples: SELECT arrayReduce('simpleLinearRegression', [0, 1, 2, 3], [0, 1, 2, 3])SELECT arrayReduce('simpleLinearRegression', [0, 1, 2, 3], [3, 4, 5, 6])\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/singlevalueornull"], "Title": ["singleValueOrNull"], "Feature": ["singleValueOrNull(x)"], "Description": ["singleValueOrNull", "The aggregate function singleValueOrNull is used to implement subquery operators, such as x = ALL (SELECT ...). It checks if there is only one unique non-NULL value in the data.\nIf there is only one unique value, it returns it. If there are zero or at least two distinct values, it returns NULL.", "Syntax", "singleValueOrNull(x)", "Parameters", "x \u2014 Column of any data type (except Map, Array or Tuple which cannot be of type Nullable).", "Returned values", "The unique value, if there is only one unique non-NULL value in x.NULL, if there are zero or at least two distinct values."], "Examples": ["CREATE TABLE test (x UInt8 NULL) ENGINE=Log;INSERT INTO test (x) VALUES (NULL), (NULL), (5), (NULL), (NULL);SELECT singleValueOrNull(x) FROM test;", "INSERT INTO test (x) VALUES (10);SELECT singleValueOrNull(x) FROM test;"], "Category": ["Aggregate Functions"], "index": 224, "vector_txt": "224:Feature: singleValueOrNull(x)\nDescription: singleValueOrNullThe aggregate function singleValueOrNull is used to implement subquery operators, such as x = ALL (SELECT ...). It checks if there is only one unique non-NULL value in the data.\nIf there is only one unique value, it returns it. If there are zero or at least two distinct values, it returns NULL.SyntaxsingleValueOrNull(x)Parametersx \u2014 Column of any data type (except Map, Array or Tuple which cannot be of type Nullable).Returned valuesThe unique value, if there is only one unique non-NULL value in x.NULL, if there are zero or at least two distinct values.\nExamples: CREATE TABLE test (x UInt8 NULL) ENGINE=Log;INSERT INTO test (x) VALUES (NULL), (NULL), (5), (NULL), (NULL);SELECT singleValueOrNull(x) FROM test;INSERT INTO test (x) VALUES (10);SELECT singleValueOrNull(x) FROM test;\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/skewpop"], "Title": ["skewPop"], "Feature": ["skewPop(expr)"], "Description": ["skewPop", "Computes the skewness of a sequence.", "skewPop(expr)", "Arguments", "expr \u2014 Expression returning a number.", "Returned value", "The skewness of the given distribution. Type \u2014 Float64"], "Examples": ["SELECT skewPop(value) FROM series_with_value_column;"], "Category": ["Aggregate Functions"], "index": 225, "vector_txt": "225:Feature: skewPop(expr)\nDescription: skewPopComputes the skewness of a sequence.skewPop(expr)Argumentsexpr \u2014 Expression returning a number.Returned valueThe skewness of the given distribution. Type \u2014 Float64\nExamples: SELECT skewPop(value) FROM series_with_value_column;\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/skewsamp"], "Title": ["skewSamp"], "Feature": ["skewSamp(expr)"], "Description": ["skewSamp", "Computes the sample skewness of a sequence.", "It represents an unbiased estimate of the skewness of a random variable if passed values form its sample.", "skewSamp(expr)", "Arguments", "expr \u2014 Expression returning a number.", "Returned value", "The skewness of the given distribution. Type \u2014 Float64. If n <= 1 (n is the size of the sample), then the function returns nan."], "Examples": ["SELECT skewSamp(value) FROM series_with_value_column;"], "Category": ["Aggregate Functions"], "index": 226, "vector_txt": "226:Feature: skewSamp(expr)\nDescription: skewSampComputes the sample skewness of a sequence.It represents an unbiased estimate of the skewness of a random variable if passed values form its sample.skewSamp(expr)Argumentsexpr \u2014 Expression returning a number.Returned valueThe skewness of the given distribution. Type \u2014 Float64. If n <= 1 (n is the size of the sample), then the function returns nan.\nExamples: SELECT skewSamp(value) FROM series_with_value_column;\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/sparkbar"], "Title": ["sparkbar"], "Feature": ["sparkbar(buckets[, min_x, max_x])(x, y)"], "Description": ["sparkbar", "The function plots a frequency histogram for values x and the repetition rate y of these values over the interval [min_x, max_x].\nRepetitions for all x falling into the same bucket are averaged, so data should be pre-aggregated.\nNegative repetitions are ignored.", "If no interval is specified, then the minimum x is used as the interval start, and the maximum x \u2014 as the interval end.\nOtherwise, values outside the interval are ignored.", "Syntax", "sparkbar(buckets[, min_x, max_x])(x, y)", "Parameters", "buckets \u2014 The number of segments. Type: Integer.min_x \u2014 The interval start. Optional parameter.max_x \u2014 The interval end. Optional parameter.", "Arguments", "x \u2014 The field with values.y \u2014 The field with the frequency of values.", "Returned value", "The frequency histogram."], "Examples": ["CREATE TABLE spark_bar_data (`value` Int64, `event_date` Date) ENGINE = MergeTree ORDER BY event_date;INSERT INTO spark_bar_data VALUES (1,'2020-01-01'), (3,'2020-01-02'), (4,'2020-01-02'), (-3,'2020-01-02'), (5,'2020-01-03'), (2,'2020-01-04'), (3,'2020-01-05'), (7,'2020-01-06'), (6,'2020-01-07'), (8,'2020-01-08'), (2,'2020-01-11');SELECT sparkbar(9)(event_date,cnt) FROM (SELECT sum(value) as cnt, event_date FROM spark_bar_data GROUP BY event_date);SELECT sparkbar(9, toDate('2020-01-01'), toDate('2020-01-10'))(event_date,cnt) FROM (SELECT sum(value) as cnt, event_date FROM spark_bar_data GROUP BY event_date);"], "Category": ["Aggregate Functions"], "index": 227, "vector_txt": "227:Feature: sparkbar(buckets[, min_x, max_x])(x, y)\nDescription: sparkbarThe function plots a frequency histogram for values x and the repetition rate y of these values over the interval [min_x, max_x].\nRepetitions for all x falling into the same bucket are averaged, so data should be pre-aggregated.\nNegative repetitions are ignored.If no interval is specified, then the minimum x is used as the interval start, and the maximum x \u2014 as the interval end.\nOtherwise, values outside the interval are ignored.Syntaxsparkbar(buckets[, min_x, max_x])(x, y)Parametersbuckets \u2014 The number of segments. Type: Integer.min_x \u2014 The interval start. Optional parameter.max_x \u2014 The interval end. Optional parameter.Argumentsx \u2014 The field with values.y \u2014 The field with the frequency of values.Returned valueThe frequency histogram.\nExamples: CREATE TABLE spark_bar_data (`value` Int64, `event_date` Date) ENGINE = MergeTree ORDER BY event_date;INSERT INTO spark_bar_data VALUES (1,'2020-01-01'), (3,'2020-01-02'), (4,'2020-01-02'), (-3,'2020-01-02'), (5,'2020-01-03'), (2,'2020-01-04'), (3,'2020-01-05'), (7,'2020-01-06'), (6,'2020-01-07'), (8,'2020-01-08'), (2,'2020-01-11');SELECT sparkbar(9)(event_date,cnt) FROM (SELECT sum(value) as cnt, event_date FROM spark_bar_data GROUP BY event_date);SELECT sparkbar(9, toDate('2020-01-01'), toDate('2020-01-10'))(event_date,cnt) FROM (SELECT sum(value) as cnt, event_date FROM spark_bar_data GROUP BY event_date);\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/stddevpop"], "Title": ["stddevPop"], "Feature": ["stddevPop(x)"], "Description": ["stddevPop", "The result is equal to the square root of varPop.", "Aliases: STD, STDDEV_POP.", "NoteThis function uses a numerically unstable algorithm. If you need numerical stability in calculations, use the stddevPopStable function. It works slower but provides a lower computational error.", "Syntax", "stddevPop(x)", "Parameters", "x: Population of values to find the standard deviation of. (U)Int*, Float*, Decimal*.", "Returned value", "Square root of standard deviation of x. Float64."], "Examples": ["DROP TABLE IF EXISTS test_data;CREATE TABLE test_data(    population UInt8,)ENGINE = Log;INSERT INTO test_data VALUES (3),(3),(3),(4),(4),(5),(5),(7),(11),(15);SELECT    stddevPop(population) AS stddevFROM test_data;"], "Category": ["Aggregate Functions"], "index": 228, "vector_txt": "228:Feature: stddevPop(x)\nDescription: stddevPopThe result is equal to the square root of varPop.Aliases: STD, STDDEV_POP.NoteThis function uses a numerically unstable algorithm. If you need numerical stability in calculations, use the stddevPopStable function. It works slower but provides a lower computational error.SyntaxstddevPop(x)Parametersx: Population of values to find the standard deviation of. (U)Int*, Float*, Decimal*.Returned valueSquare root of standard deviation of x. Float64.\nExamples: DROP TABLE IF EXISTS test_data;CREATE TABLE test_data(    population UInt8,)ENGINE = Log;INSERT INTO test_data VALUES (3),(3),(3),(4),(4),(5),(5),(7),(11),(15);SELECT    stddevPop(population) AS stddevFROM test_data;\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/stddevpopstable"], "Title": ["stddevPopStable"], "Feature": ["stddevPopStable(x)"], "Description": ["stddevPopStable", "The result is equal to the square root of varPop. Unlike stddevPop, this function uses a numerically stable algorithm. It works slower but provides a lower computational error.", "Syntax", "stddevPopStable(x)", "Parameters", "x: Population of values to find the standard deviation of. (U)Int*, Float*, Decimal*.", "Returned value", "Square root of standard deviation of x. Float64."], "Examples": ["DROP TABLE IF EXISTS test_data;CREATE TABLE test_data(    population Float64,)ENGINE = Log;INSERT INTO test_data SELECT randUniform(5.5, 10) FROM numbers(1000000)SELECT    stddevPopStable(population) AS stddevFROM test_data;"], "Category": ["Aggregate Functions"], "index": 229, "vector_txt": "229:Feature: stddevPopStable(x)\nDescription: stddevPopStableThe result is equal to the square root of varPop. Unlike stddevPop, this function uses a numerically stable algorithm. It works slower but provides a lower computational error.SyntaxstddevPopStable(x)Parametersx: Population of values to find the standard deviation of. (U)Int*, Float*, Decimal*.Returned valueSquare root of standard deviation of x. Float64.\nExamples: DROP TABLE IF EXISTS test_data;CREATE TABLE test_data(    population Float64,)ENGINE = Log;INSERT INTO test_data SELECT randUniform(5.5, 10) FROM numbers(1000000)SELECT    stddevPopStable(population) AS stddevFROM test_data;\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/stddevsamp"], "Title": ["stddevSamp"], "Feature": ["stddevSamp(x)"], "Description": ["stddevSamp", "The result is equal to the square root of varSamp.", "Alias: STDDEV_SAMP.", "NoteThis function uses a numerically unstable algorithm. If you need numerical stability in calculations, use the stddevSampStable function. It works slower but provides a lower computational error.", "Syntax", "stddevSamp(x)", "Parameters", "x: Values for which to find the square root of sample variance. (U)Int*, Float*, Decimal*.", "Returned value", "Square root of sample variance of x. Float64."], "Examples": ["DROP TABLE IF EXISTS test_data;CREATE TABLE test_data(    population UInt8,)ENGINE = Log;INSERT INTO test_data VALUES (3),(3),(3),(4),(4),(5),(5),(7),(11),(15);SELECT    stddevSamp(population)FROM test_data;"], "Category": ["Aggregate Functions"], "index": 230, "vector_txt": "230:Feature: stddevSamp(x)\nDescription: stddevSampThe result is equal to the square root of varSamp.Alias: STDDEV_SAMP.NoteThis function uses a numerically unstable algorithm. If you need numerical stability in calculations, use the stddevSampStable function. It works slower but provides a lower computational error.SyntaxstddevSamp(x)Parametersx: Values for which to find the square root of sample variance. (U)Int*, Float*, Decimal*.Returned valueSquare root of sample variance of x. Float64.\nExamples: DROP TABLE IF EXISTS test_data;CREATE TABLE test_data(    population UInt8,)ENGINE = Log;INSERT INTO test_data VALUES (3),(3),(3),(4),(4),(5),(5),(7),(11),(15);SELECT    stddevSamp(population)FROM test_data;\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/stddevsampstable"], "Title": ["stddevSampStable"], "Feature": ["stddevSampStable(x)"], "Description": ["stddevSampStable", "The result is equal to the square root of varSamp. Unlike stddevSamp This function uses a numerically stable algorithm. It works slower but provides a lower computational error.", "Syntax", "stddevSampStable(x)", "Parameters", "x: Values for which to find the square root of sample variance. (U)Int*, Float*, Decimal*.", "Returned value", "Square root of sample variance of x. Float64."], "Examples": ["DROP TABLE IF EXISTS test_data;CREATE TABLE test_data(    population UInt8,)ENGINE = Log;INSERT INTO test_data VALUES (3),(3),(3),(4),(4),(5),(5),(7),(11),(15);SELECT    stddevSampStable(population)FROM test_data;"], "Category": ["Aggregate Functions"], "index": 231, "vector_txt": "231:Feature: stddevSampStable(x)\nDescription: stddevSampStableThe result is equal to the square root of varSamp. Unlike stddevSamp This function uses a numerically stable algorithm. It works slower but provides a lower computational error.SyntaxstddevSampStable(x)Parametersx: Values for which to find the square root of sample variance. (U)Int*, Float*, Decimal*.Returned valueSquare root of sample variance of x. Float64.\nExamples: DROP TABLE IF EXISTS test_data;CREATE TABLE test_data(    population UInt8,)ENGINE = Log;INSERT INTO test_data VALUES (3),(3),(3),(4),(4),(5),(5),(7),(11),(15);SELECT    stddevSampStable(population)FROM test_data;\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/stochasticlinearregression"], "Title": ["stochasticLinearRegression"], "Feature": ["stochasticLinearRegression"], "Description": ["stochasticLinearRegression", "This function implements stochastic linear regression. It supports custom parameters for learning rate, L2 regularization coefficient, mini-batch size, and has a few methods for updating weights (Adam (used by default), simple SGD, Momentum, and Nesterov).", "Parameters", "There are 4 customizable parameters. They are passed to the function sequentially, but there is no need to pass all four - default values will be used, however good model required some parameter tuning.", "stochasticLinearRegression(0.00001, 0.1, 15, 'Adam')", "learning rate is the coefficient on step length, when the gradient descent step is performed. A learning rate that is too big may cause infinite weights of the model. Default is 0.00001.l2 regularization coefficient which may help to prevent overfitting. Default is 0.1.mini-batch size sets the number of elements, which gradients will be computed and summed to perform one step of gradient descent. Pure stochastic descent uses one element, however, having small batches (about 10 elements) makes gradient steps more stable. Default is 15.method for updating weights, they are: Adam (by default), SGD, Momentum, and Nesterov. Momentum and Nesterov require a little bit more computations and memory, however, they happen to be useful in terms of speed of convergence and stability of stochastic gradient methods.", "Usage", "stochasticLinearRegression is used in two steps: fitting the model and predicting on new data. In order to fit the model and save its state for later usage, we use the -State combinator, which saves the state (e.g. model weights).\nTo predict, we use the function evalMLMethod, which takes a state as an argument as well as features to predict on.", "1. Fitting", "Such query may be used.", "CREATE TABLE IF NOT EXISTS train_data(    param1 Float64,    param2 Float64,    target Float64) ENGINE = Memory;CREATE TABLE your_model ENGINE = Memory AS SELECTstochasticLinearRegressionState(0.1, 0.0, 5, 'SGD')(target, param1, param2)AS state FROM train_data;", "Here, we also need to insert data into the train_data table. The number of parameters is not fixed, it depends only on the number of arguments passed into linearRegressionState. They all must be numeric values.\nNote that the column with target value (which we would like to learn to predict) is inserted as the first argument.", "2. Predicting", "After saving a state into the table, we may use it multiple times for prediction or even merge with other states and create new, even better models.", "WITH (SELECT state FROM your_model) AS model SELECTevalMLMethod(model, param1, param2) FROM test_data", "The query will return a column of predicted values. Note that first argument of evalMLMethod is AggregateFunctionState object, next are columns of features.", "test_data is a table like train_data but may not contain target value.", "Notes", "To merge two models user may create such query:\nsql  SELECT state1 + state2 FROM your_models\nwhere your_models table contains both models. This query will return new AggregateFunctionState object.User may fetch weights of the created model for its own purposes without saving the model if no -State combinator is used.\nsql  SELECT stochasticLinearRegression(0.01)(target, param1, param2) FROM train_data\nSuch query will fit the model and return its weights - first are weights, which correspond to the parameters of the model, the last one is bias. So in the example above the query will return a column with 3 values.", "See Also", "stochasticLogisticRegressionDifference between linear and logistic regressions"], "Examples": ["CREATE TABLE IF NOT EXISTS train_data(    param1 Float64,    param2 Float64,    target Float64) ENGINE = Memory;CREATE TABLE your_model ENGINE = Memory AS SELECTstochasticLinearRegressionState(0.1, 0.0, 5, 'SGD')(target, param1, param2)AS state FROM train_data;", "WITH (SELECT state FROM your_model) AS model SELECTevalMLMethod(model, param1, param2) FROM test_data"], "Category": ["Aggregate Functions"], "index": 232, "vector_txt": "232:Feature: stochasticLinearRegression\nDescription: stochasticLinearRegressionThis function implements stochastic linear regression. It supports custom parameters for learning rate, L2 regularization coefficient, mini-batch size, and has a few methods for updating weights (Adam (used by default), simple SGD, Momentum, and Nesterov).ParametersThere are 4 customizable parameters. They are passed to the function sequentially, but there is no need to pass all four - default values will be used, however good model required some parameter tuning.stochasticLinearRegression(0.00001, 0.1, 15, 'Adam')learning rate is the coefficient on step length, when the gradient descent step is performed. A learning rate that is too big may cause infinite weights of the model. Default is 0.00001.l2 regularization coefficient which may help to prevent overfitting. Default is 0.1.mini-batch size sets the number of elements, which gradients will be computed and summed to perform one step of gradient descent. Pure stochastic descent uses one element, however, having small batches (about 10 elements) makes gradient steps more stable. Default is 15.method for updating weights, they are: Adam (by default), SGD, Momentum, and Nesterov. Momentum and Nesterov require a little bit more computations and memory, however, they happen to be useful in terms of speed of convergence and stability of stochastic gradient methods.UsagestochasticLinearRegression is used in two steps: fitting the model and predicting on new data. In order to fit the model and save its state for later usage, we use the -State combinator, which saves the state (e.g. model weights).\nTo predict, we use the function evalMLMethod, which takes a state as an argument as well as features to predict on.1. FittingSuch query may be used.CREATE TABLE IF NOT EXISTS train_data(    param1 Float64,    param2 Float64,    target Float64) ENGINE = Memory;CREATE TABLE your_model ENGINE = Memory AS SELECTstochasticLinearRegressionState(0.1, 0.0, 5, 'SGD')(target, param1, param2)AS state FROM train_data;Here, we also need to insert data into the train_data table. The number of parameters is not fixed, it depends only on the number of arguments passed into linearRegressionState. They all must be numeric values.\nNote that the column with target value (which we would like to learn to predict) is inserted as the first argument.2. PredictingAfter saving a state into the table, we may use it multiple times for prediction or even merge with other states and create new, even better models.WITH (SELECT state FROM your_model) AS model SELECTevalMLMethod(model, param1, param2) FROM test_dataThe query will return a column of predicted values. Note that first argument of evalMLMethod is AggregateFunctionState object, next are columns of features.test_data is a table like train_data but may not contain target value.NotesTo merge two models user may create such query:\nsql  SELECT state1 + state2 FROM your_models\nwhere your_models table contains both models. This query will return new AggregateFunctionState object.User may fetch weights of the created model for its own purposes without saving the model if no -State combinator is used.\nsql  SELECT stochasticLinearRegression(0.01)(target, param1, param2) FROM train_data\nSuch query will fit the model and return its weights - first are weights, which correspond to the parameters of the model, the last one is bias. So in the example above the query will return a column with 3 values.See AlsostochasticLogisticRegressionDifference between linear and logistic regressions\nExamples: CREATE TABLE IF NOT EXISTS train_data(    param1 Float64,    param2 Float64,    target Float64) ENGINE = Memory;CREATE TABLE your_model ENGINE = Memory AS SELECTstochasticLinearRegressionState(0.1, 0.0, 5, 'SGD')(target, param1, param2)AS state FROM train_data;WITH (SELECT state FROM your_model) AS model SELECTevalMLMethod(model, param1, param2) FROM test_data\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bit-functions"], "Title": ["bitShiftLeft(a, b)"], "Feature": ["bitShiftLeft(a, b)"], "Description": ["bitShiftLeft(a, b)", "Shifts the binary representation of a value to the left by a specified number of bit positions.", "A FixedString or a String is treated as a single multibyte value.", "Bits of a FixedString value are lost as they are shifted out. On the contrary, a String value is extended with additional bytes, so no bits are lost.", "Syntax", "bitShiftLeft(a, b)", "Arguments", "a \u2014 A value to shift. Integer types, String or FixedString.b \u2014 The number of shift positions. Unsigned integer types, 64 bit types or less are allowed.", "Returned value", "Shifted value.", "The type of the returned value is the same as the type of the input value."], "Examples": ["SELECT 99 AS a, bin(a), bitShiftLeft(a, 2) AS a_shifted, bin(a_shifted);SELECT 'abc' AS a, hex(a), bitShiftLeft(a, 4) AS a_shifted, hex(a_shifted);SELECT toFixedString('abc', 3) AS a, hex(a), bitShiftLeft(a, 4) AS a_shifted, hex(a_shifted);"], "Category": ["Bit Functions"], "index": 233, "vector_txt": "233:Feature: bitShiftLeft(a, b)\nDescription: bitShiftLeft(a, b)Shifts the binary representation of a value to the left by a specified number of bit positions.A FixedString or a String is treated as a single multibyte value.Bits of a FixedString value are lost as they are shifted out. On the contrary, a String value is extended with additional bytes, so no bits are lost.SyntaxbitShiftLeft(a, b)Argumentsa \u2014 A value to shift. Integer types, String or FixedString.b \u2014 The number of shift positions. Unsigned integer types, 64 bit types or less are allowed.Returned valueShifted value.The type of the returned value is the same as the type of the input value.\nExamples: SELECT 99 AS a, bin(a), bitShiftLeft(a, 2) AS a_shifted, bin(a_shifted);SELECT 'abc' AS a, hex(a), bitShiftLeft(a, 4) AS a_shifted, hex(a_shifted);SELECT toFixedString('abc', 3) AS a, hex(a), bitShiftLeft(a, 4) AS a_shifted, hex(a_shifted);\nCategory: Bit Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/stochasticlogisticregression"], "Title": ["stochasticLogisticRegression"], "Feature": ["stochasticLogisticRegression"], "Description": ["stochasticLogisticRegression", "This function implements stochastic logistic regression. It can be used for binary classification problem, supports the same custom parameters as stochasticLinearRegression and works the same way.", "Parameters", "Parameters are exactly the same as in stochasticLinearRegression:\nlearning rate, l2 regularization coefficient, mini-batch size, method for updating weights.\nFor more information see parameters.", "stochasticLogisticRegression(1.0, 1.0, 10, 'SGD')", "1. Fitting", "See the `Fitting` section in the [stochasticLinearRegression](#stochasticlinearregression-usage-fitting) description.Predicted labels have to be in \\[-1, 1\\].", "2. Predicting", "Using saved state we can predict probability of object having label `1`.``` sqlWITH (SELECT state FROM your_model) AS model SELECTevalMLMethod(model, param1, param2) FROM test_data```The query will return a column of probabilities. Note that first argument of `evalMLMethod` is `AggregateFunctionState` object, next are columns of features.We can also set a bound of probability, which assigns elements to different labels.``` sqlSELECT ans < 1.1 AND ans > 0.5 FROM(WITH (SELECT state FROM your_model) AS model SELECTevalMLMethod(model, param1, param2) AS ans FROM test_data)```Then the result will be labels.`test_data` is a table like `train_data` but may not contain target value.", "See Also", "stochasticLinearRegressionDifference between linear and logistic regressions."], "Examples": [], "Category": ["Aggregate Functions"], "index": 234, "vector_txt": "234:Feature: stochasticLogisticRegression\nDescription: stochasticLogisticRegressionThis function implements stochastic logistic regression. It can be used for binary classification problem, supports the same custom parameters as stochasticLinearRegression and works the same way.ParametersParameters are exactly the same as in stochasticLinearRegression:\nlearning rate, l2 regularization coefficient, mini-batch size, method for updating weights.\nFor more information see parameters.stochasticLogisticRegression(1.0, 1.0, 10, 'SGD')1. FittingSee the `Fitting` section in the [stochasticLinearRegression](#stochasticlinearregression-usage-fitting) description.Predicted labels have to be in \\[-1, 1\\].2. PredictingUsing saved state we can predict probability of object having label `1`.``` sqlWITH (SELECT state FROM your_model) AS model SELECTevalMLMethod(model, param1, param2) FROM test_data```The query will return a column of probabilities. Note that first argument of `evalMLMethod` is `AggregateFunctionState` object, next are columns of features.We can also set a bound of probability, which assigns elements to different labels.``` sqlSELECT ans < 1.1 AND ans > 0.5 FROM(WITH (SELECT state FROM your_model) AS model SELECTevalMLMethod(model, param1, param2) AS ans FROM test_data)```Then the result will be labels.`test_data` is a table like `train_data` but may not contain target value.See AlsostochasticLinearRegressionDifference between linear and logistic regressions.\nExamples: \nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/studentttest"], "Title": ["studentTTest"], "Feature": ["studentTTest([confidence_level])(sample_data, sample_index)"], "Description": ["studentTTest", "Applies Student's t-test to samples from two populations.", "Syntax", "studentTTest([confidence_level])(sample_data, sample_index)", "Values of both samples are in the sample_data column. If sample_index equals to 0 then the value in that row belongs to the sample from the first population. Otherwise it belongs to the sample from the second population.\nThe null hypothesis is that means of populations are equal. Normal distribution with equal variances is assumed.", "Arguments", "sample_data \u2014 Sample data. Integer, Float or Decimal.sample_index \u2014 Sample index. Integer.", "Parameters", "confidence_level \u2014 Confidence level in order to calculate confidence intervals. Float.", "Returned values", "Tuple with two or four elements (if the optional confidence_level is specified):", "calculated t-statistic. Float64.calculated p-value. Float64.[calculated confidence-interval-low. Float64.][calculated confidence-interval-high. Float64.]"], "Examples": ["SELECT studentTTest(sample_data, sample_index) FROM student_ttest;"], "Category": ["Aggregate Functions"], "index": 235, "vector_txt": "235:Feature: studentTTest([confidence_level])(sample_data, sample_index)\nDescription: studentTTestApplies Student's t-test to samples from two populations.SyntaxstudentTTest([confidence_level])(sample_data, sample_index)Values of both samples are in the sample_data column. If sample_index equals to 0 then the value in that row belongs to the sample from the first population. Otherwise it belongs to the sample from the second population.\nThe null hypothesis is that means of populations are equal. Normal distribution with equal variances is assumed.Argumentssample_data \u2014 Sample data. Integer, Float or Decimal.sample_index \u2014 Sample index. Integer.Parametersconfidence_level \u2014 Confidence level in order to calculate confidence intervals. Float.Returned valuesTuple with two or four elements (if the optional confidence_level is specified):calculated t-statistic. Float64.calculated p-value. Float64.[calculated confidence-interval-low. Float64.][calculated confidence-interval-high. Float64.]\nExamples: SELECT studentTTest(sample_data, sample_index) FROM student_ttest;\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/sum"], "Title": ["sum"], "Feature": ["sum(num)"], "Description": ["sum", "Calculates the sum. Only works for numbers.", "Syntax", "sum(num)", "Parameters", "num: Column of numeric values. (U)Int*, Float*, Decimal*.", "Returned value", "The sum of the values. (U)Int*, Float*, Decimal*."], "Examples": ["CREATE TABLE employees(    `id` UInt32,    `name` String,    `salary` UInt32)ENGINE = Log", "INSERT INTO employees VALUES    (87432, 'John Smith', 45680),    (59018, 'Jane Smith', 72350),    (20376, 'Ivan Ivanovich', 58900),    (71245, 'Anastasia Ivanovna', 89210);", "SELECT sum(salary) FROM employees;"], "Category": ["Aggregate Functions"], "index": 236, "vector_txt": "236:Feature: sum(num)\nDescription: sumCalculates the sum. Only works for numbers.Syntaxsum(num)Parametersnum: Column of numeric values. (U)Int*, Float*, Decimal*.Returned valueThe sum of the values. (U)Int*, Float*, Decimal*.\nExamples: CREATE TABLE employees(    `id` UInt32,    `name` String,    `salary` UInt32)ENGINE = LogINSERT INTO employees VALUES    (87432, 'John Smith', 45680),    (59018, 'Jane Smith', 72350),    (20376, 'Ivan Ivanovich', 58900),    (71245, 'Anastasia Ivanovna', 89210);SELECT sum(salary) FROM employees;\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/summap"], "Title": ["sumMap"], "Feature": ["CREATE TABLE sum_map(    date Date,    timeslot DateTime,    statusMap Nested(        status UInt16,        requests UInt64    ),    statusMapTuple Tuple(Array(Int32), Array(Int32))) ENGINE = Log;"], "Description": ["sumMap", "Totals a value array according to the keys specified in the key array. Returns a tuple of two arrays: keys in sorted order, and values summed for the corresponding keys without overflow.", "Syntax", "sumMap(key <Array>, value <Array>) Array type.sumMap(Tuple(key <Array>, value <Array>)) Tuple type.", "Alias: sumMappedArrays.", "Arguments ", "key: Array of keys.value: Array of values.", "Passing a tuple of key and value arrays is a synonym to passing separately an array of keys and an array of values.", "NoteThe number of elements in key and value must be the same for each row that is totaled.", "Returned Value ", "Returns a tuple of two arrays: keys in sorted order, and values summed for the corresponding keys."], "Examples": ["CREATE TABLE sum_map(    date Date,    timeslot DateTime,    statusMap Nested(        status UInt16,        requests UInt64    ),    statusMapTuple Tuple(Array(Int32), Array(Int32))) ENGINE = Log;", "INSERT INTO sum_map VALUES    ('2000-01-01', '2000-01-01 00:00:00', [1, 2, 3], [10, 10, 10], ([1, 2, 3], [10, 10, 10])),    ('2000-01-01', '2000-01-01 00:00:00', [3, 4, 5], [10, 10, 10], ([3, 4, 5], [10, 10, 10])),    ('2000-01-01', '2000-01-01 00:01:00', [4, 5, 6], [10, 10, 10], ([4, 5, 6], [10, 10, 10])),    ('2000-01-01', '2000-01-01 00:01:00', [6, 7, 8], [10, 10, 10], ([6, 7, 8], [10, 10, 10]));", "SELECT    timeslot,    sumMap(statusMap.status, statusMap.requests),    sumMap(statusMapTuple)FROM sum_mapGROUP BY timeslot"], "Category": ["Aggregate Functions"], "index": 237, "vector_txt": "237:Feature: CREATE TABLE sum_map(    date Date,    timeslot DateTime,    statusMap Nested(        status UInt16,        requests UInt64    ),    statusMapTuple Tuple(Array(Int32), Array(Int32))) ENGINE = Log;\nDescription: sumMapTotals a value array according to the keys specified in the key array. Returns a tuple of two arrays: keys in sorted order, and values summed for the corresponding keys without overflow.SyntaxsumMap(key <Array>, value <Array>) Array type.sumMap(Tuple(key <Array>, value <Array>)) Tuple type.Alias: sumMappedArrays.Arguments key: Array of keys.value: Array of values.Passing a tuple of key and value arrays is a synonym to passing separately an array of keys and an array of values.NoteThe number of elements in key and value must be the same for each row that is totaled.Returned Value Returns a tuple of two arrays: keys in sorted order, and values summed for the corresponding keys.\nExamples: CREATE TABLE sum_map(    date Date,    timeslot DateTime,    statusMap Nested(        status UInt16,        requests UInt64    ),    statusMapTuple Tuple(Array(Int32), Array(Int32))) ENGINE = Log;INSERT INTO sum_map VALUES    ('2000-01-01', '2000-01-01 00:00:00', [1, 2, 3], [10, 10, 10], ([1, 2, 3], [10, 10, 10])),    ('2000-01-01', '2000-01-01 00:00:00', [3, 4, 5], [10, 10, 10], ([3, 4, 5], [10, 10, 10])),    ('2000-01-01', '2000-01-01 00:01:00', [4, 5, 6], [10, 10, 10], ([4, 5, 6], [10, 10, 10])),    ('2000-01-01', '2000-01-01 00:01:00', [6, 7, 8], [10, 10, 10], ([6, 7, 8], [10, 10, 10]));SELECT    timeslot,    sumMap(statusMap.status, statusMap.requests),    sumMap(statusMapTuple)FROM sum_mapGROUP BY timeslot\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/summapwithoverflow"], "Title": ["sumMapWithOverflow"], "Feature": ["CREATE TABLE sum_map(    date Date,    timeslot DateTime,    statusMap Nested(        status UInt8,        requests UInt8    ),    statusMapTuple Tuple(Array(Int8), Array(Int8))) ENGINE = Log;"], "Description": ["sumMapWithOverflow", "Totals a value array according to the keys specified in the key array. Returns a tuple of two arrays: keys in sorted order, and values summed for the corresponding keys.\nIt differs from the sumMap function in that it does summation with overflow - i.e. returns the same data type for the summation as the argument data type.", "Syntax", "sumMapWithOverflow(key <Array>, value <Array>) Array type.sumMapWithOverflow(Tuple(key <Array>, value <Array>)) Tuple type.", "Arguments ", "key: Array of keys.value: Array of values.", "Passing a tuple of key and value arrays is a synonym to passing separately an array of keys and an array of values.", "NoteThe number of elements in key and value must be the same for each row that is totaled.", "Returned Value ", "Returns a tuple of two arrays: keys in sorted order, and values summed for the corresponding keys."], "Examples": ["CREATE TABLE sum_map(    date Date,    timeslot DateTime,    statusMap Nested(        status UInt8,        requests UInt8    ),    statusMapTuple Tuple(Array(Int8), Array(Int8))) ENGINE = Log;", "INSERT INTO sum_map VALUES    ('2000-01-01', '2000-01-01 00:00:00', [1, 2, 3], [10, 10, 10], ([1, 2, 3], [10, 10, 10])),    ('2000-01-01', '2000-01-01 00:00:00', [3, 4, 5], [10, 10, 10], ([3, 4, 5], [10, 10, 10])),    ('2000-01-01', '2000-01-01 00:01:00', [4, 5, 6], [10, 10, 10], ([4, 5, 6], [10, 10, 10])),    ('2000-01-01', '2000-01-01 00:01:00', [6, 7, 8], [10, 10, 10], ([6, 7, 8], [10, 10, 10]));", "SELECT    timeslot,    toTypeName(sumMap(statusMap.status, statusMap.requests)),    toTypeName(sumMapWithOverflow(statusMap.status, statusMap.requests)),FROM sum_mapGROUP BY timeslot", "SELECT    timeslot,    toTypeName(sumMap(statusMapTuple)),    toTypeName(sumMapWithOverflow(statusMapTuple)),FROM sum_mapGROUP BY timeslot"], "Category": ["Aggregate Functions"], "index": 238, "vector_txt": "238:Feature: CREATE TABLE sum_map(    date Date,    timeslot DateTime,    statusMap Nested(        status UInt8,        requests UInt8    ),    statusMapTuple Tuple(Array(Int8), Array(Int8))) ENGINE = Log;\nDescription: sumMapWithOverflowTotals a value array according to the keys specified in the key array. Returns a tuple of two arrays: keys in sorted order, and values summed for the corresponding keys.\nIt differs from the sumMap function in that it does summation with overflow - i.e. returns the same data type for the summation as the argument data type.SyntaxsumMapWithOverflow(key <Array>, value <Array>) Array type.sumMapWithOverflow(Tuple(key <Array>, value <Array>)) Tuple type.Arguments key: Array of keys.value: Array of values.Passing a tuple of key and value arrays is a synonym to passing separately an array of keys and an array of values.NoteThe number of elements in key and value must be the same for each row that is totaled.Returned Value Returns a tuple of two arrays: keys in sorted order, and values summed for the corresponding keys.\nExamples: CREATE TABLE sum_map(    date Date,    timeslot DateTime,    statusMap Nested(        status UInt8,        requests UInt8    ),    statusMapTuple Tuple(Array(Int8), Array(Int8))) ENGINE = Log;INSERT INTO sum_map VALUES    ('2000-01-01', '2000-01-01 00:00:00', [1, 2, 3], [10, 10, 10], ([1, 2, 3], [10, 10, 10])),    ('2000-01-01', '2000-01-01 00:00:00', [3, 4, 5], [10, 10, 10], ([3, 4, 5], [10, 10, 10])),    ('2000-01-01', '2000-01-01 00:01:00', [4, 5, 6], [10, 10, 10], ([4, 5, 6], [10, 10, 10])),    ('2000-01-01', '2000-01-01 00:01:00', [6, 7, 8], [10, 10, 10], ([6, 7, 8], [10, 10, 10]));SELECT    timeslot,    toTypeName(sumMap(statusMap.status, statusMap.requests)),    toTypeName(sumMapWithOverflow(statusMap.status, statusMap.requests)),FROM sum_mapGROUP BY timeslotSELECT    timeslot,    toTypeName(sumMap(statusMapTuple)),    toTypeName(sumMapWithOverflow(statusMapTuple)),FROM sum_mapGROUP BY timeslot\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/sumwithoverflow"], "Title": ["sumWithOverflow"], "Feature": ["sumWithOverflow(num)"], "Description": ["sumWithOverflow", "Computes the sum of the numbers, using the same data type for the result as for the input parameters. If the sum exceeds the maximum value for this data type, it is calculated with overflow.", "Only works for numbers.", "Syntax", "sumWithOverflow(num)", "Parameters", "num: Column of numeric values. (U)Int*, Float*, Decimal*.", "Returned value", "The sum of the values. (U)Int*, Float*, Decimal*."], "Examples": ["CREATE TABLE employees(    `id` UInt32,    `name` String,    `monthly_salary` UInt16)ENGINE = Log", "SELECT    sum(monthly_salary) AS no_overflow,    sumWithOverflow(monthly_salary) AS overflow,    toTypeName(no_overflow),    toTypeName(overflow)FROM employees", "SELECT     sum(monthly_salary) AS no_overflow,    sumWithOverflow(monthly_salary) AS overflow,    toTypeName(no_overflow),    toTypeName(overflow),    FROM employees;"], "Category": ["Aggregate Functions"], "index": 239, "vector_txt": "239:Feature: sumWithOverflow(num)\nDescription: sumWithOverflowComputes the sum of the numbers, using the same data type for the result as for the input parameters. If the sum exceeds the maximum value for this data type, it is calculated with overflow.Only works for numbers.SyntaxsumWithOverflow(num)Parametersnum: Column of numeric values. (U)Int*, Float*, Decimal*.Returned valueThe sum of the values. (U)Int*, Float*, Decimal*.\nExamples: CREATE TABLE employees(    `id` UInt32,    `name` String,    `monthly_salary` UInt16)ENGINE = LogSELECT    sum(monthly_salary) AS no_overflow,    sumWithOverflow(monthly_salary) AS overflow,    toTypeName(no_overflow),    toTypeName(overflow)FROM employeesSELECT     sum(monthly_salary) AS no_overflow,    sumWithOverflow(monthly_salary) AS overflow,    toTypeName(no_overflow),    toTypeName(overflow),    FROM employees;\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/theilsu"], "Title": ["theilsU"], "Feature": ["theilsU(column1, column2)"], "Description": ["theilsU", "The theilsU function calculates the Theil's U uncertainty coefficient, a value that measures the association between two columns in a table. Its values range from \u22121.0 (100% negative association, or perfect inversion) to +1.0 (100% positive association, or perfect agreement). A value of 0.0 indicates the absence of association.", "Syntax", "theilsU(column1, column2)", "Arguments", "column1 and column2 are the columns to be compared", "Returned value", "a value between -1 and 1", "Return type is always Float64."], "Examples": ["SELECT    theilsU(a ,b)FROM    (        SELECT            number % 10 AS a,            number % 4 AS b        FROM            numbers(150)    );"], "Category": ["Aggregate Functions"], "index": 240, "vector_txt": "240:Feature: theilsU(column1, column2)\nDescription: theilsUThe theilsU function calculates the Theil's U uncertainty coefficient, a value that measures the association between two columns in a table. Its values range from \u22121.0 (100% negative association, or perfect inversion) to +1.0 (100% positive association, or perfect agreement). A value of 0.0 indicates the absence of association.SyntaxtheilsU(column1, column2)Argumentscolumn1 and column2 are the columns to be comparedReturned valuea value between -1 and 1Return type is always Float64.\nExamples: SELECT    theilsU(a ,b)FROM    (        SELECT            number % 10 AS a,            number % 4 AS b        FROM            numbers(150)    );\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/topk"], "Title": ["topK"], "Feature": ["topK(N)(column)topK(N, load_factor)(column)topK(N, load_factor, 'counts')(column)"], "Description": ["topK", "Returns an array of the approximately most frequent values in the specified column. The resulting array is sorted in descending order of approximate frequency of values (not by the values themselves).", "Implements the Filtered Space-Saving algorithm for analyzing TopK, based on the reduce-and-combine algorithm from Parallel Space Saving.", "topK(N)(column)topK(N, load_factor)(column)topK(N, load_factor, 'counts')(column)", "This function does not provide a guaranteed result. In certain situations, errors might occur and it might return frequent values that aren\u2019t the most frequent values.", "We recommend using the N < 10 value; performance is reduced with large N values. Maximum value of N = 65536.", "Parameters", "N \u2014 The number of elements to return. Optional. Default value: 10.load_factor \u2014 Defines, how many cells reserved for values. If uniq(column) > N * load_factor, result of topK function will be approximate. Optional. Default value: 3.counts \u2014 Defines, should result contain approximate count and error value.", "Arguments", "column \u2014 The value to calculate frequency."], "Examples": ["SELECT topK(3)(AirlineID) AS resFROM ontime"], "Category": ["Aggregate Functions"], "index": 241, "vector_txt": "241:Feature: topK(N)(column)topK(N, load_factor)(column)topK(N, load_factor, 'counts')(column)\nDescription: topKReturns an array of the approximately most frequent values in the specified column. The resulting array is sorted in descending order of approximate frequency of values (not by the values themselves).Implements the Filtered Space-Saving algorithm for analyzing TopK, based on the reduce-and-combine algorithm from Parallel Space Saving.topK(N)(column)topK(N, load_factor)(column)topK(N, load_factor, 'counts')(column)This function does not provide a guaranteed result. In certain situations, errors might occur and it might return frequent values that aren\u2019t the most frequent values.We recommend using the N < 10 value; performance is reduced with large N values. Maximum value of N = 65536.ParametersN \u2014 The number of elements to return. Optional. Default value: 10.load_factor \u2014 Defines, how many cells reserved for values. If uniq(column) > N * load_factor, result of topK function will be approximate. Optional. Default value: 3.counts \u2014 Defines, should result contain approximate count and error value.Argumentscolumn \u2014 The value to calculate frequency.\nExamples: SELECT topK(3)(AirlineID) AS resFROM ontime\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/topkweighted"], "Title": ["topKWeighted"], "Feature": ["topKWeighted(N)(column, weight)topKWeighted(N, load_factor)(column, weight)topKWeighted(N, load_factor, 'counts')(column, weight)"], "Description": ["topKWeighted", "Returns an array of the approximately most frequent values in the specified column. The resulting array is sorted in descending order of approximate frequency of values (not by the values themselves). Additionally, the weight of the value is taken into account.", "Syntax", "topKWeighted(N)(column, weight)topKWeighted(N, load_factor)(column, weight)topKWeighted(N, load_factor, 'counts')(column, weight)", "Parameters", "N \u2014 The number of elements to return. Optional. Default value: 10.load_factor \u2014 Defines, how many cells reserved for values. If uniq(column) > N * load_factor, result of topK function will be approximate. Optional. Default value: 3.counts \u2014 Defines, should result contain approximate count and error value.", "Arguments", "column \u2014 The value.weight \u2014 The weight. Every value is accounted weight times for frequency calculation. UInt64.", "Returned value", "Returns an array of the values with maximum approximate sum of weights."], "Examples": ["SELECT topKWeighted(2)(k, w) FROMVALUES('k Char, w UInt64', ('y', 1), ('y', 1), ('x', 5), ('y', 1), ('z', 10))", "SELECT topKWeighted(2, 10, 'counts')(k, w)FROM VALUES('k Char, w UInt64', ('y', 1), ('y', 1), ('x', 5), ('y', 1), ('z', 10))"], "Category": ["Aggregate Functions"], "index": 242, "vector_txt": "242:Feature: topKWeighted(N)(column, weight)topKWeighted(N, load_factor)(column, weight)topKWeighted(N, load_factor, 'counts')(column, weight)\nDescription: topKWeightedReturns an array of the approximately most frequent values in the specified column. The resulting array is sorted in descending order of approximate frequency of values (not by the values themselves). Additionally, the weight of the value is taken into account.SyntaxtopKWeighted(N)(column, weight)topKWeighted(N, load_factor)(column, weight)topKWeighted(N, load_factor, 'counts')(column, weight)ParametersN \u2014 The number of elements to return. Optional. Default value: 10.load_factor \u2014 Defines, how many cells reserved for values. If uniq(column) > N * load_factor, result of topK function will be approximate. Optional. Default value: 3.counts \u2014 Defines, should result contain approximate count and error value.Argumentscolumn \u2014 The value.weight \u2014 The weight. Every value is accounted weight times for frequency calculation. UInt64.Returned valueReturns an array of the values with maximum approximate sum of weights.\nExamples: SELECT topKWeighted(2)(k, w) FROMVALUES('k Char, w UInt64', ('y', 1), ('y', 1), ('x', 5), ('y', 1), ('z', 10))SELECT topKWeighted(2, 10, 'counts')(k, w)FROM VALUES('k Char, w UInt64', ('y', 1), ('y', 1), ('x', 5), ('y', 1), ('z', 10))\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/uniq"], "Title": ["uniq"], "Feature": ["uniq"], "Description": ["uniq", "Calculates the approximate number of different values of the argument.", "uniq(x[, ...])", "Arguments", "The function takes a variable number of parameters. Parameters can be Tuple, Array, Date, DateTime, String, or numeric types.", "Returned value", "A UInt64-type number.", "Implementation details", "Function:", "Calculates a hash for all parameters in the aggregate, then uses it in calculations.Uses an adaptive sampling algorithm. For the calculation state, the function uses a sample of element hash values up to 65536. This algorithm is very accurate and very efficient on the CPU. When the query contains several of these functions, using uniq is almost as fast as using other aggregate functions.Provides the result deterministically (it does not depend on the query processing order).", "We recommend using this function in almost all scenarios.", "See Also", "uniqCombineduniqCombined64uniqHLL12uniqExactuniqTheta"], "Examples": ["uniq(x[, ...])"], "Category": ["Aggregate Functions"], "index": 243, "vector_txt": "243:Feature: uniq\nDescription: uniqCalculates the approximate number of different values of the argument.uniq(x[, ...])ArgumentsThe function takes a variable number of parameters. Parameters can be Tuple, Array, Date, DateTime, String, or numeric types.Returned valueA UInt64-type number.Implementation detailsFunction:Calculates a hash for all parameters in the aggregate, then uses it in calculations.Uses an adaptive sampling algorithm. For the calculation state, the function uses a sample of element hash values up to 65536. This algorithm is very accurate and very efficient on the CPU. When the query contains several of these functions, using uniq is almost as fast as using other aggregate functions.Provides the result deterministically (it does not depend on the query processing order).We recommend using this function in almost all scenarios.See AlsouniqCombineduniqCombined64uniqHLL12uniqExactuniqTheta\nExamples: uniq(x[, ...])\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bit-functions"], "Title": ["bitShiftRight(a, b)"], "Feature": ["bitShiftRight(a, b)"], "Description": ["bitShiftRight(a, b)", "Shifts the binary representation of a value to the right by a specified number of bit positions.", "A FixedString or a String is treated as a single multibyte value. Note that the length of a String value is reduced as bits are shifted out.", "Syntax", "bitShiftRight(a, b)", "Arguments", "a \u2014 A value to shift. Integer types, String or FixedString.b \u2014 The number of shift positions. Unsigned integer types, 64 bit types or less are allowed.", "Returned value", "Shifted value.", "The type of the returned value is the same as the type of the input value."], "Examples": ["SELECT 101 AS a, bin(a), bitShiftRight(a, 2) AS a_shifted, bin(a_shifted);SELECT 'abc' AS a, hex(a), bitShiftRight(a, 12) AS a_shifted, hex(a_shifted);SELECT toFixedString('abc', 3) AS a, hex(a), bitShiftRight(a, 12) AS a_shifted, hex(a_shifted);"], "Category": ["Bit Functions"], "index": 244, "vector_txt": "244:Feature: bitShiftRight(a, b)\nDescription: bitShiftRight(a, b)Shifts the binary representation of a value to the right by a specified number of bit positions.A FixedString or a String is treated as a single multibyte value. Note that the length of a String value is reduced as bits are shifted out.SyntaxbitShiftRight(a, b)Argumentsa \u2014 A value to shift. Integer types, String or FixedString.b \u2014 The number of shift positions. Unsigned integer types, 64 bit types or less are allowed.Returned valueShifted value.The type of the returned value is the same as the type of the input value.\nExamples: SELECT 101 AS a, bin(a), bitShiftRight(a, 2) AS a_shifted, bin(a_shifted);SELECT 'abc' AS a, hex(a), bitShiftRight(a, 12) AS a_shifted, hex(a_shifted);SELECT toFixedString('abc', 3) AS a, hex(a), bitShiftRight(a, 12) AS a_shifted, hex(a_shifted);\nCategory: Bit Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/uniqcombined"], "Title": ["uniqCombined"], "Feature": ["uniqCombined(HLL_precision)(x[, ...])"], "Description": ["uniqCombined", "Calculates the approximate number of different argument values.", "uniqCombined(HLL_precision)(x[, ...])", "The uniqCombined function is a good choice for calculating the number of different values.", "Arguments", "HLL_precision: The base-2 logarithm of the number of cells in HyperLogLog. Optional, you can use the function as uniqCombined(x[, ...]). The default value for HLL_precision is 17, which is effectively 96 KiB of space (2^17 cells, 6 bits each).X: A variable number of parameters. Parameters can be Tuple, Array, Date, DateTime, String, or numeric types.", "Returned value", "A number UInt64-type number.", "Implementation details", "The uniqCombined function:", "Calculates a hash (64-bit hash for String and 32-bit otherwise) for all parameters in the aggregate, then uses it in calculations.Uses a combination of three algorithms: array, hash table, and HyperLogLog with an error correction table.For a small number of distinct elements, an array is used. When the set size is larger, a hash table is used. For a larger number of elements, HyperLogLog is used, which will occupy a fixed amount of memory.Provides the result deterministically (it does not depend on the query processing order).", "NoteSince it uses a 32-bit hash for non-String types, the result will have very high error for cardinalities significantly larger than UINT_MAX (error will raise quickly after a few tens of billions of distinct values), hence in this case you should use uniqCombined64.", "Compared to the uniq function, the uniqCombined function:", "Consumes several times less memory.Calculates with several times higher accuracy.Usually has slightly lower performance. In some scenarios, uniqCombined can perform better than uniq, for example, with distributed queries that transmit a large number of aggregation states over the network."], "Examples": ["SELECT uniqCombined(number) FROM numbers(1e6);"], "Category": ["Aggregate Functions"], "index": 245, "vector_txt": "245:Feature: uniqCombined(HLL_precision)(x[, ...])\nDescription: uniqCombinedCalculates the approximate number of different argument values.uniqCombined(HLL_precision)(x[, ...])The uniqCombined function is a good choice for calculating the number of different values.ArgumentsHLL_precision: The base-2 logarithm of the number of cells in HyperLogLog. Optional, you can use the function as uniqCombined(x[, ...]). The default value for HLL_precision is 17, which is effectively 96 KiB of space (2^17 cells, 6 bits each).X: A variable number of parameters. Parameters can be Tuple, Array, Date, DateTime, String, or numeric types.Returned valueA number UInt64-type number.Implementation detailsThe uniqCombined function:Calculates a hash (64-bit hash for String and 32-bit otherwise) for all parameters in the aggregate, then uses it in calculations.Uses a combination of three algorithms: array, hash table, and HyperLogLog with an error correction table.For a small number of distinct elements, an array is used. When the set size is larger, a hash table is used. For a larger number of elements, HyperLogLog is used, which will occupy a fixed amount of memory.Provides the result deterministically (it does not depend on the query processing order).NoteSince it uses a 32-bit hash for non-String types, the result will have very high error for cardinalities significantly larger than UINT_MAX (error will raise quickly after a few tens of billions of distinct values), hence in this case you should use uniqCombined64.Compared to the uniq function, the uniqCombined function:Consumes several times less memory.Calculates with several times higher accuracy.Usually has slightly lower performance. In some scenarios, uniqCombined can perform better than uniq, for example, with distributed queries that transmit a large number of aggregation states over the network.\nExamples: SELECT uniqCombined(number) FROM numbers(1e6);\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/uniqcombined64"], "Title": ["uniqCombined64"], "Feature": ["uniqCombined64(HLL_precision)(x[, ...])"], "Description": ["uniqCombined64", "Calculates the approximate number of different argument values. It is the same as uniqCombined, but uses a 64-bit hash for all data types rather than just for the String data type.", "uniqCombined64(HLL_precision)(x[, ...])", "Parameters", "HLL_precision: The base-2 logarithm of the number of cells in HyperLogLog. Optionally, you can use the function as uniqCombined64(x[, ...]). The default value for HLL_precision is 17, which is effectively 96 KiB of space (2^17 cells, 6 bits each).X: A variable number of parameters. Parameters can be Tuple, Array, Date, DateTime, String, or numeric types.", "Returned value", "A number UInt64-type number.", "Implementation details", "The uniqCombined64 function:", "Calculates a hash (64-bit hash for all data types) for all parameters in the aggregate, then uses it in calculations.Uses a combination of three algorithms: array, hash table, and HyperLogLog with an error correction table.For a small number of distinct elements, an array is used. When the set size is larger, a hash table is used. For a larger number of elements, HyperLogLog is used, which will occupy a fixed amount of memory.Provides the result deterministically (it does not depend on the query processing order).", "NoteSince it uses 64-bit hash for all types, the result does not suffer from very high error for cardinalities significantly larger than UINT_MAX like uniqCombined does, which uses a 32-bit hash for non-String types.", "Compared to the uniq function, the uniqCombined64 function:", "Consumes several times less memory.Calculates with several times higher accuracy."], "Examples": ["SELECT uniqCombined64(number) FROM numbers(1e10);", "SELECT uniqCombined(number) FROM numbers(1e10);"], "Category": ["Aggregate Functions"], "index": 246, "vector_txt": "246:Feature: uniqCombined64(HLL_precision)(x[, ...])\nDescription: uniqCombined64Calculates the approximate number of different argument values. It is the same as uniqCombined, but uses a 64-bit hash for all data types rather than just for the String data type.uniqCombined64(HLL_precision)(x[, ...])ParametersHLL_precision: The base-2 logarithm of the number of cells in HyperLogLog. Optionally, you can use the function as uniqCombined64(x[, ...]). The default value for HLL_precision is 17, which is effectively 96 KiB of space (2^17 cells, 6 bits each).X: A variable number of parameters. Parameters can be Tuple, Array, Date, DateTime, String, or numeric types.Returned valueA number UInt64-type number.Implementation detailsThe uniqCombined64 function:Calculates a hash (64-bit hash for all data types) for all parameters in the aggregate, then uses it in calculations.Uses a combination of three algorithms: array, hash table, and HyperLogLog with an error correction table.For a small number of distinct elements, an array is used. When the set size is larger, a hash table is used. For a larger number of elements, HyperLogLog is used, which will occupy a fixed amount of memory.Provides the result deterministically (it does not depend on the query processing order).NoteSince it uses 64-bit hash for all types, the result does not suffer from very high error for cardinalities significantly larger than UINT_MAX like uniqCombined does, which uses a 32-bit hash for non-String types.Compared to the uniq function, the uniqCombined64 function:Consumes several times less memory.Calculates with several times higher accuracy.\nExamples: SELECT uniqCombined64(number) FROM numbers(1e10);SELECT uniqCombined(number) FROM numbers(1e10);\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/uniqexact"], "Title": ["uniqExact"], "Feature": ["uniqExact"], "Description": ["uniqExact", "Calculates the exact number of different argument values.", "uniqExact(x[, ...])", "Use the uniqExact function if you absolutely need an exact result. Otherwise use the uniq function.", "The uniqExact function uses more memory than uniq, because the size of the state has unbounded growth as the number of different values increases.", "Arguments", "The function takes a variable number of parameters. Parameters can be Tuple, Array, Date, DateTime, String, or numeric types.", "See Also", "uniquniqCombineduniqHLL12uniqTheta"], "Examples": ["uniqExact(x[, ...])"], "Category": ["Aggregate Functions"], "index": 247, "vector_txt": "247:Feature: uniqExact\nDescription: uniqExactCalculates the exact number of different argument values.uniqExact(x[, ...])Use the uniqExact function if you absolutely need an exact result. Otherwise use the uniq function.The uniqExact function uses more memory than uniq, because the size of the state has unbounded growth as the number of different values increases.ArgumentsThe function takes a variable number of parameters. Parameters can be Tuple, Array, Date, DateTime, String, or numeric types.See AlsouniquniqCombineduniqHLL12uniqTheta\nExamples: uniqExact(x[, ...])\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/uniqhll12"], "Title": ["uniqHLL12"], "Feature": ["uniqHLL12"], "Description": ["uniqHLL12", "Calculates the approximate number of different argument values, using the HyperLogLog algorithm.", "uniqHLL12(x[, ...])", "Arguments", "The function takes a variable number of parameters. Parameters can be Tuple, Array, Date, DateTime, String, or numeric types.", "Returned value", "A UInt64-type number.", "Implementation details", "Function:", "Calculates a hash for all parameters in the aggregate, then uses it in calculations.Uses the HyperLogLog algorithm to approximate the number of different argument values.  2^12 5-bit cells are used. The size of the state is slightly more than 2.5 KB. The result is not very accurate (up to ~10% error) for small data sets (<10K elements). However, the result is fairly accurate for high-cardinality data sets (10K-100M), with a maximum error of ~1.6%. Starting from 100M, the estimation error increases, and the function will return very inaccurate results for data sets with extremely high cardinality (1B+ elements).Provides the determinate result (it does not depend on the query processing order).", "We do not recommend using this function. In most cases, use the uniq or uniqCombined function.", "See Also", "uniquniqCombineduniqExactuniqTheta"], "Examples": ["uniqHLL12(x[, ...])"], "Category": ["Aggregate Functions"], "index": 248, "vector_txt": "248:Feature: uniqHLL12\nDescription: uniqHLL12Calculates the approximate number of different argument values, using the HyperLogLog algorithm.uniqHLL12(x[, ...])ArgumentsThe function takes a variable number of parameters. Parameters can be Tuple, Array, Date, DateTime, String, or numeric types.Returned valueA UInt64-type number.Implementation detailsFunction:Calculates a hash for all parameters in the aggregate, then uses it in calculations.Uses the HyperLogLog algorithm to approximate the number of different argument values.  2^12 5-bit cells are used. The size of the state is slightly more than 2.5 KB. The result is not very accurate (up to ~10% error) for small data sets (<10K elements). However, the result is fairly accurate for high-cardinality data sets (10K-100M), with a maximum error of ~1.6%. Starting from 100M, the estimation error increases, and the function will return very inaccurate results for data sets with extremely high cardinality (1B+ elements).Provides the determinate result (it does not depend on the query processing order).We do not recommend using this function. In most cases, use the uniq or uniqCombined function.See AlsouniquniqCombineduniqExactuniqTheta\nExamples: uniqHLL12(x[, ...])\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/varPop"], "Title": ["varPop"], "Feature": ["varPop(x)"], "Description": ["varPop", "Calculates the population variance.", "Syntax", "varPop(x)", "Alias: VAR_POP.", "Parameters", "x: Population of values to find the population variance of. (U)Int*, Float*, Decimal*.", "Returned value", "Returns the population variance of x. Float64."], "Examples": ["DROP TABLE IF EXISTS test_data;CREATE TABLE test_data(    x UInt8,)ENGINE = Memory;INSERT INTO test_data VALUES (3), (3), (3), (4), (4), (5), (5), (7), (11), (15);SELECT    varPop(x) AS var_popFROM test_data;"], "Category": ["Aggregate Functions"], "index": 249, "vector_txt": "249:Feature: varPop(x)\nDescription: varPopCalculates the population variance.SyntaxvarPop(x)Alias: VAR_POP.Parametersx: Population of values to find the population variance of. (U)Int*, Float*, Decimal*.Returned valueReturns the population variance of x. Float64.\nExamples: DROP TABLE IF EXISTS test_data;CREATE TABLE test_data(    x UInt8,)ENGINE = Memory;INSERT INTO test_data VALUES (3), (3), (3), (4), (4), (5), (5), (7), (11), (15);SELECT    varPop(x) AS var_popFROM test_data;\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/varpopstable"], "Title": ["varPopStable"], "Feature": ["varPopStable(x)"], "Description": ["varPopStable", "Returns the population variance. Unlike varPop, this function uses a numerically stable algorithm. It works slower but provides a lower computational error.", "Syntax", "varPopStable(x)", "Alias: VAR_POP_STABLE.", "Parameters", "x: Population of values to find the population variance of. (U)Int*, Float*, Decimal*.", "Returned value", "Returns the population variance of x. Float64."], "Examples": ["DROP TABLE IF EXISTS test_data;CREATE TABLE test_data(    x UInt8,)ENGINE = Memory;INSERT INTO test_data VALUES (3),(3),(3),(4),(4),(5),(5),(7),(11),(15);SELECT    varPopStable(x) AS var_pop_stableFROM test_data;"], "Category": ["Aggregate Functions"], "index": 250, "vector_txt": "250:Feature: varPopStable(x)\nDescription: varPopStableReturns the population variance. Unlike varPop, this function uses a numerically stable algorithm. It works slower but provides a lower computational error.SyntaxvarPopStable(x)Alias: VAR_POP_STABLE.Parametersx: Population of values to find the population variance of. (U)Int*, Float*, Decimal*.Returned valueReturns the population variance of x. Float64.\nExamples: DROP TABLE IF EXISTS test_data;CREATE TABLE test_data(    x UInt8,)ENGINE = Memory;INSERT INTO test_data VALUES (3),(3),(3),(4),(4),(5),(5),(7),(11),(15);SELECT    varPopStable(x) AS var_pop_stableFROM test_data;\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/varSamp"], "Title": ["varSamp"], "Feature": ["varSamp(x)"], "Description": ["varSamp", "Calculate the sample variance of a data set.", "Syntax", "varSamp(x)", "Alias: VAR_SAMP.", "Parameters", "x: The population for which you want to calculate the sample variance. (U)Int*, Float*, Decimal*.", "Returned value", "Returns the sample variance of the input data set x. Float64.", "Implementation details", "The varSamp function calculates the sample variance using the following formula:", "\u2211(x\u2212mean(x))2(n\u22121)\\sum\\frac{(x - \\text{mean}(x))^2}{(n - 1)}\u2211(n\u22121)(x\u2212mean(x))2", "Where:", "x is each individual data point in the data set.mean(x) is the arithmetic mean of the data set.n is the number of data points in the data set.", "The function assumes that the input data set represents a sample from a larger population. If you want to calculate the variance of the entire population (when you have the complete data set), you should use varPop instead."], "Examples": ["DROP TABLE IF EXISTS test_data;CREATE TABLE test_data(    x Float64)ENGINE = Memory;INSERT INTO test_data VALUES (10.5), (12.3), (9.8), (11.2), (10.7);SELECT round(varSamp(x),3) AS var_samp FROM test_data;"], "Category": ["Aggregate Functions"], "index": 251, "vector_txt": "251:Feature: varSamp(x)\nDescription: varSampCalculate the sample variance of a data set.SyntaxvarSamp(x)Alias: VAR_SAMP.Parametersx: The population for which you want to calculate the sample variance. (U)Int*, Float*, Decimal*.Returned valueReturns the sample variance of the input data set x. Float64.Implementation detailsThe varSamp function calculates the sample variance using the following formula:\u2211(x\u2212mean(x))2(n\u22121)\\sum\\frac{(x - \\text{mean}(x))^2}{(n - 1)}\u2211(n\u22121)(x\u2212mean(x))2Where:x is each individual data point in the data set.mean(x) is the arithmetic mean of the data set.n is the number of data points in the data set.The function assumes that the input data set represents a sample from a larger population. If you want to calculate the variance of the entire population (when you have the complete data set), you should use varPop instead.\nExamples: DROP TABLE IF EXISTS test_data;CREATE TABLE test_data(    x Float64)ENGINE = Memory;INSERT INTO test_data VALUES (10.5), (12.3), (9.8), (11.2), (10.7);SELECT round(varSamp(x),3) AS var_samp FROM test_data;\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/varsampstable"], "Title": ["varSampStable"], "Feature": ["varSampStable(x)"], "Description": ["varSampStable", "Calculate the sample variance of a data set. Unlike varSamp, this function uses a numerically stable algorithm. It works slower but provides a lower computational error.", "Syntax", "varSampStable(x)", "Alias: VAR_SAMP_STABLE", "Parameters", "x: The population for which you want to calculate the sample variance. (U)Int*, Float*, Decimal*.", "Returned value", "Returns the sample variance of the input data set. Float64.", "Implementation details", "The varSampStable function calculates the sample variance using the same formula as the varSamp:", "\u2211(x\u2212mean(x))2(n\u22121)\\sum\\frac{(x - \\text{mean}(x))^2}{(n - 1)}\u2211(n\u22121)(x\u2212mean(x))2", "Where:", "x is each individual data point in the data set.mean(x) is the arithmetic mean of the data set.n is the number of data points in the data set."], "Examples": ["DROP TABLE IF EXISTS test_data;CREATE TABLE test_data(    x Float64)ENGINE = Memory;INSERT INTO test_data VALUES (10.5), (12.3), (9.8), (11.2), (10.7);SELECT round(varSampStable(x),3) AS var_samp_stable FROM test_data;"], "Category": ["Aggregate Functions"], "index": 252, "vector_txt": "252:Feature: varSampStable(x)\nDescription: varSampStableCalculate the sample variance of a data set. Unlike varSamp, this function uses a numerically stable algorithm. It works slower but provides a lower computational error.SyntaxvarSampStable(x)Alias: VAR_SAMP_STABLEParametersx: The population for which you want to calculate the sample variance. (U)Int*, Float*, Decimal*.Returned valueReturns the sample variance of the input data set. Float64.Implementation detailsThe varSampStable function calculates the sample variance using the same formula as the varSamp:\u2211(x\u2212mean(x))2(n\u22121)\\sum\\frac{(x - \\text{mean}(x))^2}{(n - 1)}\u2211(n\u22121)(x\u2212mean(x))2Where:x is each individual data point in the data set.mean(x) is the arithmetic mean of the data set.n is the number of data points in the data set.\nExamples: DROP TABLE IF EXISTS test_data;CREATE TABLE test_data(    x Float64)ENGINE = Memory;INSERT INTO test_data VALUES (10.5), (12.3), (9.8), (11.2), (10.7);SELECT round(varSampStable(x),3) AS var_samp_stable FROM test_data;\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/welchttest"], "Title": ["welchTTest"], "Feature": ["welchTTest([confidence_level])(sample_data, sample_index)"], "Description": ["welchTTest", "Applies Welch's t-test to samples from two populations.", "Syntax", "welchTTest([confidence_level])(sample_data, sample_index)", "Values of both samples are in the sample_data column. If sample_index equals to 0 then the value in that row belongs to the sample from the first population. Otherwise it belongs to the sample from the second population.\nThe null hypothesis is that means of populations are equal. Normal distribution is assumed. Populations may have unequal variance.", "Arguments", "sample_data \u2014 Sample data. Integer, Float or Decimal.sample_index \u2014 Sample index. Integer.", "Parameters", "confidence_level \u2014 Confidence level in order to calculate confidence intervals. Float.", "Returned values", "Tuple with two or four elements (if the optional confidence_level is specified)", "calculated t-statistic. Float64.calculated p-value. Float64.calculated confidence-interval-low. Float64.calculated confidence-interval-high. Float64."], "Examples": ["SELECT welchTTest(sample_data, sample_index) FROM welch_ttest;"], "Category": ["Aggregate Functions"], "index": 253, "vector_txt": "253:Feature: welchTTest([confidence_level])(sample_data, sample_index)\nDescription: welchTTestApplies Welch's t-test to samples from two populations.SyntaxwelchTTest([confidence_level])(sample_data, sample_index)Values of both samples are in the sample_data column. If sample_index equals to 0 then the value in that row belongs to the sample from the first population. Otherwise it belongs to the sample from the second population.\nThe null hypothesis is that means of populations are equal. Normal distribution is assumed. Populations may have unequal variance.Argumentssample_data \u2014 Sample data. Integer, Float or Decimal.sample_index \u2014 Sample index. Integer.Parametersconfidence_level \u2014 Confidence level in order to calculate confidence intervals. Float.Returned valuesTuple with two or four elements (if the optional confidence_level is specified)calculated t-statistic. Float64.calculated p-value. Float64.calculated confidence-interval-low. Float64.calculated confidence-interval-high. Float64.\nExamples: SELECT welchTTest(sample_data, sample_index) FROM welch_ttest;\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/distinctdynamictypes"], "Title": ["distinctDynamicTypes"], "Feature": ["distinctDynamicTypes(dynamic)"], "Description": ["distinctDynamicTypes", "Calculates the list of distinct data types stored in Dynamic column.", "Syntax", "distinctDynamicTypes(dynamic)", "Arguments", "dynamic \u2014 Dynamic column.", "Returned Value", "The sorted list of data type names Array(String)."], "Examples": ["DROP TABLE IF EXISTS test_dynamic;CREATE TABLE test_dynamic(d Dynamic) ENGINE = Memory;INSERT INTO test_dynamic VALUES (42), (NULL), ('Hello'), ([1, 2, 3]), ('2020-01-01'), (map(1, 2)), (43), ([4, 5]), (NULL), ('World'), (map(3, 4))", "SELECT distinctDynamicTypes(d) FROM test_dynamic;"], "Category": ["Aggregate Functions"], "index": 254, "vector_txt": "254:Feature: distinctDynamicTypes(dynamic)\nDescription: distinctDynamicTypesCalculates the list of distinct data types stored in Dynamic column.SyntaxdistinctDynamicTypes(dynamic)Argumentsdynamic \u2014 Dynamic column.Returned ValueThe sorted list of data type names Array(String).\nExamples: DROP TABLE IF EXISTS test_dynamic;CREATE TABLE test_dynamic(d Dynamic) ENGINE = Memory;INSERT INTO test_dynamic VALUES (42), (NULL), ('Hello'), ([1, 2, 3]), ('2020-01-01'), (map(1, 2)), (43), ([4, 5]), (NULL), ('World'), (map(3, 4))SELECT distinctDynamicTypes(d) FROM test_dynamic;\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bit-functions"], "Title": ["bitRotateLeft(a, b)"], "Feature": ["bitRotateLeft(a, b)"], "Description": ["bitRotateLeft(a, b)"], "Examples": [], "Category": ["Bit Functions"], "index": 255, "vector_txt": "255:Feature: bitRotateLeft(a, b)\nDescription: bitRotateLeft(a, b)\nExamples: \nCategory: Bit Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/distinctjsonpaths"], "Title": ["distinctJSONPaths"], "Feature": ["distinctJSONPaths(json)"], "Description": ["distinctJSONPaths", "Calculates the list of distinct paths stored in JSON column.", "Syntax", "distinctJSONPaths(json)", "Arguments", "json \u2014 JSON column.", "Returned Value", "The sorted list of paths Array(String)."], "Examples": ["DROP TABLE IF EXISTS test_json;CREATE TABLE test_json(json JSON) ENGINE = Memory;INSERT INTO test_json VALUES ('{\"a\" : 42, \"b\" : \"Hello\"}'), ('{\"b\" : [1, 2, 3], \"c\" : {\"d\" : {\"e\" : \"2020-01-01\"}}}'), ('{\"a\" : 43, \"c\" : {\"d\" : {\"f\" : [{\"g\" : 42}]}}}')", "SELECT distinctJSONPaths(json) FROM test_json;"], "Category": ["Aggregate Functions"], "index": 256, "vector_txt": "256:Feature: distinctJSONPaths(json)\nDescription: distinctJSONPathsCalculates the list of distinct paths stored in JSON column.SyntaxdistinctJSONPaths(json)Argumentsjson \u2014 JSON column.Returned ValueThe sorted list of paths Array(String).\nExamples: DROP TABLE IF EXISTS test_json;CREATE TABLE test_json(json JSON) ENGINE = Memory;INSERT INTO test_json VALUES ('{\"a\" : 42, \"b\" : \"Hello\"}'), ('{\"b\" : [1, 2, 3], \"c\" : {\"d\" : {\"e\" : \"2020-01-01\"}}}'), ('{\"a\" : 43, \"c\" : {\"d\" : {\"f\" : [{\"g\" : 42}]}}}')SELECT distinctJSONPaths(json) FROM test_json;\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/reference/distinctjsonpaths"], "Title": ["distinctJSONPathsAndTypes"], "Feature": ["distinctJSONPathsAndTypes(json)"], "Description": ["distinctJSONPathsAndTypes", "Calculates the list of distinct paths and their types stored in JSON column.", "Syntax", "distinctJSONPathsAndTypes(json)", "Arguments", "json \u2014 JSON column.", "Returned Value", "The sorted map of paths and types Map(String, Array(String))."], "Examples": ["DROP TABLE IF EXISTS test_json;CREATE TABLE test_json(json JSON) ENGINE = Memory;INSERT INTO test_json VALUES ('{\"a\" : 42, \"b\" : \"Hello\"}'), ('{\"b\" : [1, 2, 3], \"c\" : {\"d\" : {\"e\" : \"2020-01-01\"}}}'), ('{\"a\" : 43, \"c\" : {\"d\" : {\"f\" : [{\"g\" : 42}]}}}')", "SELECT distinctJSONPathsAndTypes(json) FROM test_json;", "DROP TABLE IF EXISTS test_json;CREATE TABLE test_json(json JSON(a UInt32)) ENGINE = Memory;INSERT INTO test_json VALUES ('{\"b\" : \"Hello\"}'), ('{\"b\" : \"World\", \"c\" : [1, 2, 3]}');", "SELECT json FROM test_json;", "SELECT distinctJSONPaths(json) FROM test_json;", "SELECT distinctJSONPathsAndTypes(json) FROM test_json;"], "Category": ["Aggregate Functions"], "index": 257, "vector_txt": "257:Feature: distinctJSONPathsAndTypes(json)\nDescription: distinctJSONPathsAndTypesCalculates the list of distinct paths and their types stored in JSON column.SyntaxdistinctJSONPathsAndTypes(json)Argumentsjson \u2014 JSON column.Returned ValueThe sorted map of paths and types Map(String, Array(String)).\nExamples: DROP TABLE IF EXISTS test_json;CREATE TABLE test_json(json JSON) ENGINE = Memory;INSERT INTO test_json VALUES ('{\"a\" : 42, \"b\" : \"Hello\"}'), ('{\"b\" : [1, 2, 3], \"c\" : {\"d\" : {\"e\" : \"2020-01-01\"}}}'), ('{\"a\" : 43, \"c\" : {\"d\" : {\"f\" : [{\"g\" : 42}]}}}')SELECT distinctJSONPathsAndTypes(json) FROM test_json;DROP TABLE IF EXISTS test_json;CREATE TABLE test_json(json JSON(a UInt32)) ENGINE = Memory;INSERT INTO test_json VALUES ('{\"b\" : \"Hello\"}'), ('{\"b\" : \"World\", \"c\" : [1, 2, 3]}');SELECT json FROM test_json;SELECT distinctJSONPaths(json) FROM test_json;SELECT distinctJSONPathsAndTypes(json) FROM test_json;\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/parametric-functions"], "Title": ["histogram"], "Feature": ["histogram(number_of_bins)(values)"], "Description": ["histogram", "Calculates an adaptive histogram. It does not guarantee precise results.", "histogram(number_of_bins)(values)", "The functions uses A Streaming Parallel Decision Tree Algorithm. The borders of histogram bins are adjusted as new data enters a function. In common case, the widths of bins are not equal.", "Arguments", "values \u2014 Expression resulting in input values.", "Parameters", "number_of_bins \u2014 Upper limit for the number of bins in the histogram. The function automatically calculates the number of bins. It tries to reach the specified number of bins, but if it fails, it uses fewer bins.", "Returned values", "Array of Tuples of the following format:  ```  [(lower_1, upper_1, height_1), ... (lower_N, upper_N, height_N)]  ```  - `lower` \u2014 Lower bound of the bin.  - `upper` \u2014 Upper bound of the bin.  - `height` \u2014 Calculated height of the bin."], "Examples": ["SELECT histogram(5)(number + 1)FROM (    SELECT *    FROM system.numbers    LIMIT 20)", "WITH histogram(5)(rand() % 100) AS histSELECT    arrayJoin(hist).3 AS height,    bar(height, 0, 6, 5) AS barFROM(    SELECT *    FROM system.numbers    LIMIT 20)"], "Category": ["Aggregate Functions"], "index": 258, "vector_txt": "258:Feature: histogram(number_of_bins)(values)\nDescription: histogramCalculates an adaptive histogram. It does not guarantee precise results.histogram(number_of_bins)(values)The functions uses A Streaming Parallel Decision Tree Algorithm. The borders of histogram bins are adjusted as new data enters a function. In common case, the widths of bins are not equal.Argumentsvalues \u2014 Expression resulting in input values.Parametersnumber_of_bins \u2014 Upper limit for the number of bins in the histogram. The function automatically calculates the number of bins. It tries to reach the specified number of bins, but if it fails, it uses fewer bins.Returned valuesArray of Tuples of the following format:  ```  [(lower_1, upper_1, height_1), ... (lower_N, upper_N, height_N)]  ```  - `lower` \u2014 Lower bound of the bin.  - `upper` \u2014 Upper bound of the bin.  - `height` \u2014 Calculated height of the bin.\nExamples: SELECT histogram(5)(number + 1)FROM (    SELECT *    FROM system.numbers    LIMIT 20)WITH histogram(5)(rand() % 100) AS histSELECT    arrayJoin(hist).3 AS height,    bar(height, 0, 6, 5) AS barFROM(    SELECT *    FROM system.numbers    LIMIT 20)\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/parametric-functions"], "Title": ["sequenceMatch"], "Feature": ["sequenceMatch(pattern)(timestamp, cond1, cond2, ...)"], "Description": ["sequenceMatch", "Checks whether the sequence contains an event chain that matches the pattern.", "Syntax", "sequenceMatch(pattern)(timestamp, cond1, cond2, ...)", "NoteEvents that occur at the same second may lay in the sequence in an undefined order affecting the result.", "Arguments", "timestamp \u2014 Column considered to contain time data. Typical data types are Date and DateTime. You can also use any of the supported UInt data types.cond1, cond2 \u2014 Conditions that describe the chain of events. Data type: UInt8. You can pass up to 32 condition arguments. The function takes only the events described in these conditions into account. If the sequence contains data that isn\u2019t described in a condition, the function skips them.", "Parameters", "pattern \u2014 Pattern string. See Pattern syntax.", "Returned values", "1, if the pattern is matched.0, if the pattern isn\u2019t matched.", "Type: UInt8.", "Pattern syntax", "(?N) \u2014 Matches the condition argument at position N. Conditions are numbered in the [1, 32] range. For example, (?1) matches the argument passed to the cond1 parameter..* \u2014 Matches any number of events. You do not need conditional arguments to match this element of the pattern.(?t operator value) \u2014 Sets the time in seconds that should separate two events. For example, pattern (?1)(?t>1800)(?2) matches events that occur more than 1800 seconds from each other. An arbitrary number of any events can lay between these events. You can use the >=, >, <, <=, == operators."], "Examples": ["SELECT sequenceMatch('(?1)(?2)')(time, number = 1, number = 2) FROM t", "SELECT sequenceMatch('(?1)(?2)')(time, number = 1, number = 2, number = 3) FROM t", "SELECT sequenceMatch('(?1)(?2)')(time, number = 1, number = 2, number = 4) FROM t"], "Category": ["Aggregate Functions"], "index": 259, "vector_txt": "259:Feature: sequenceMatch(pattern)(timestamp, cond1, cond2, ...)\nDescription: sequenceMatchChecks whether the sequence contains an event chain that matches the pattern.SyntaxsequenceMatch(pattern)(timestamp, cond1, cond2, ...)NoteEvents that occur at the same second may lay in the sequence in an undefined order affecting the result.Argumentstimestamp \u2014 Column considered to contain time data. Typical data types are Date and DateTime. You can also use any of the supported UInt data types.cond1, cond2 \u2014 Conditions that describe the chain of events. Data type: UInt8. You can pass up to 32 condition arguments. The function takes only the events described in these conditions into account. If the sequence contains data that isn\u2019t described in a condition, the function skips them.Parameterspattern \u2014 Pattern string. See Pattern syntax.Returned values1, if the pattern is matched.0, if the pattern isn\u2019t matched.Type: UInt8.Pattern syntax(?N) \u2014 Matches the condition argument at position N. Conditions are numbered in the [1, 32] range. For example, (?1) matches the argument passed to the cond1 parameter..* \u2014 Matches any number of events. You do not need conditional arguments to match this element of the pattern.(?t operator value) \u2014 Sets the time in seconds that should separate two events. For example, pattern (?1)(?t>1800)(?2) matches events that occur more than 1800 seconds from each other. An arbitrary number of any events can lay between these events. You can use the >=, >, <, <=, == operators.\nExamples: SELECT sequenceMatch('(?1)(?2)')(time, number = 1, number = 2) FROM tSELECT sequenceMatch('(?1)(?2)')(time, number = 1, number = 2, number = 3) FROM tSELECT sequenceMatch('(?1)(?2)')(time, number = 1, number = 2, number = 4) FROM t\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/parametric-functions"], "Title": ["sequenceCount"], "Feature": ["sequenceCount(pattern)(timestamp, cond1, cond2, ...)"], "Description": ["sequenceCount", "Counts the number of event chains that matched the pattern. The function searches event chains that do not overlap. It starts to search for the next chain after the current chain is matched.", "NoteEvents that occur at the same second may lay in the sequence in an undefined order affecting the result.", "Syntax", "sequenceCount(pattern)(timestamp, cond1, cond2, ...)", "Arguments", "timestamp \u2014 Column considered to contain time data. Typical data types are Date and DateTime. You can also use any of the supported UInt data types.cond1, cond2 \u2014 Conditions that describe the chain of events. Data type: UInt8. You can pass up to 32 condition arguments. The function takes only the events described in these conditions into account. If the sequence contains data that isn\u2019t described in a condition, the function skips them.", "Parameters", "pattern \u2014 Pattern string. See Pattern syntax.", "Returned values", "Number of non-overlapping event chains that are matched.", "Type: UInt64."], "Examples": ["SELECT sequenceCount('(?1).*(?2)')(time, number = 1, number = 2) FROM t"], "Category": ["Aggregate Functions"], "index": 260, "vector_txt": "260:Feature: sequenceCount(pattern)(timestamp, cond1, cond2, ...)\nDescription: sequenceCountCounts the number of event chains that matched the pattern. The function searches event chains that do not overlap. It starts to search for the next chain after the current chain is matched.NoteEvents that occur at the same second may lay in the sequence in an undefined order affecting the result.SyntaxsequenceCount(pattern)(timestamp, cond1, cond2, ...)Argumentstimestamp \u2014 Column considered to contain time data. Typical data types are Date and DateTime. You can also use any of the supported UInt data types.cond1, cond2 \u2014 Conditions that describe the chain of events. Data type: UInt8. You can pass up to 32 condition arguments. The function takes only the events described in these conditions into account. If the sequence contains data that isn\u2019t described in a condition, the function skips them.Parameterspattern \u2014 Pattern string. See Pattern syntax.Returned valuesNumber of non-overlapping event chains that are matched.Type: UInt64.\nExamples: SELECT sequenceCount('(?1).*(?2)')(time, number = 1, number = 2) FROM t\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/parametric-functions"], "Title": ["windowFunnel"], "Feature": ["windowFunnel(window, [mode, [mode, ... ]])(timestamp, cond1, cond2, ..., condN)"], "Description": ["windowFunnel", "Searches for event chains in a sliding time window and calculates the maximum number of events that occurred from the chain.", "The function works according to the algorithm:", "The function searches for data that triggers the first condition in the chain and sets the event counter to 1. This is the moment when the sliding window starts.If events from the chain occur sequentially within the window, the counter is incremented. If the sequence of events is disrupted, the counter isn\u2019t incremented.If the data has multiple event chains at varying points of completion, the function will only output the size of the longest chain.", "Syntax", "windowFunnel(window, [mode, [mode, ... ]])(timestamp, cond1, cond2, ..., condN)", "Arguments", "timestamp \u2014 Name of the column containing the timestamp. Data types supported: Date, DateTime and other unsigned integer types (note that even though timestamp supports the UInt64 type, it\u2019s value can\u2019t exceed the Int64 maximum, which is 2^63 - 1).cond \u2014 Conditions or data describing the chain of events. UInt8.", "Parameters", "window \u2014 Length of the sliding window, it is the time interval between the first and the last condition. The unit of window depends on the timestamp itself and varies. Determined using the expression timestamp of cond1 <= timestamp of cond2 <= ... <= timestamp of condN <= timestamp of cond1 + window.mode \u2014 It is an optional argument. One or more modes can be set.'strict_deduplication' \u2014 If the same condition holds for the sequence of events, then such repeating event interrupts further processing.'strict_order' \u2014 Don't allow interventions of other events. E.g. in the case of A->B->D->C, it stops finding A->B->C at the D and the max event level is 2.'strict_increase' \u2014 Apply conditions only to events with strictly increasing timestamps.", "Returned value", "The maximum number of consecutive triggered conditions from the chain within the sliding time window.\nAll the chains in the selection are analyzed.", "Type: Integer."], "Examples": ["SELECT    level,    count() AS cFROM(    SELECT        user_id,        windowFunnel(6048000000000000)(timestamp, eventID = 1003, eventID = 1009, eventID = 1007, eventID = 1010) AS level    FROM trend    WHERE (event_date >= '2019-01-01') AND (event_date <= '2019-02-02')    GROUP BY user_id)GROUP BY levelORDER BY level ASC;"], "Category": ["Aggregate Functions"], "index": 261, "vector_txt": "261:Feature: windowFunnel(window, [mode, [mode, ... ]])(timestamp, cond1, cond2, ..., condN)\nDescription: windowFunnelSearches for event chains in a sliding time window and calculates the maximum number of events that occurred from the chain.The function works according to the algorithm:The function searches for data that triggers the first condition in the chain and sets the event counter to 1. This is the moment when the sliding window starts.If events from the chain occur sequentially within the window, the counter is incremented. If the sequence of events is disrupted, the counter isn\u2019t incremented.If the data has multiple event chains at varying points of completion, the function will only output the size of the longest chain.SyntaxwindowFunnel(window, [mode, [mode, ... ]])(timestamp, cond1, cond2, ..., condN)Argumentstimestamp \u2014 Name of the column containing the timestamp. Data types supported: Date, DateTime and other unsigned integer types (note that even though timestamp supports the UInt64 type, it\u2019s value can\u2019t exceed the Int64 maximum, which is 2^63 - 1).cond \u2014 Conditions or data describing the chain of events. UInt8.Parameterswindow \u2014 Length of the sliding window, it is the time interval between the first and the last condition. The unit of window depends on the timestamp itself and varies. Determined using the expression timestamp of cond1 <= timestamp of cond2 <= ... <= timestamp of condN <= timestamp of cond1 + window.mode \u2014 It is an optional argument. One or more modes can be set.'strict_deduplication' \u2014 If the same condition holds for the sequence of events, then such repeating event interrupts further processing.'strict_order' \u2014 Don't allow interventions of other events. E.g. in the case of A->B->D->C, it stops finding A->B->C at the D and the max event level is 2.'strict_increase' \u2014 Apply conditions only to events with strictly increasing timestamps.Returned valueThe maximum number of consecutive triggered conditions from the chain within the sliding time window.\nAll the chains in the selection are analyzed.Type: Integer.\nExamples: SELECT    level,    count() AS cFROM(    SELECT        user_id,        windowFunnel(6048000000000000)(timestamp, eventID = 1003, eventID = 1009, eventID = 1007, eventID = 1010) AS level    FROM trend    WHERE (event_date >= '2019-01-01') AND (event_date <= '2019-02-02')    GROUP BY user_id)GROUP BY levelORDER BY level ASC;\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/parametric-functions"], "Title": ["retention"], "Feature": ["retention(cond1, cond2, ..., cond32);"], "Description": ["retention", "The function takes as arguments a set of conditions from 1 to 32 arguments of type UInt8 that indicate whether a certain condition was met for the event.\nAny condition can be specified as an argument (as in WHERE).", "The conditions, except the first, apply in pairs: the result of the second will be true if the first and second are true, of the third if the first and third are true, etc.", "Syntax", "retention(cond1, cond2, ..., cond32);", "Arguments", "cond \u2014 An expression that returns a UInt8 result (1 or 0).", "Returned value", "The array of 1 or 0.", "1 \u2014 Condition was met for the event.0 \u2014 Condition wasn\u2019t met for the event.", "Type: UInt8."], "Examples": ["CREATE TABLE retention_test(date Date, uid Int32) ENGINE = Memory;INSERT INTO retention_test SELECT '2020-01-01', number FROM numbers(5);INSERT INTO retention_test SELECT '2020-01-02', number FROM numbers(10);INSERT INTO retention_test SELECT '2020-01-03', number FROM numbers(15);", "SELECT * FROM retention_test", "SELECT    uid,    retention(date = '2020-01-01', date = '2020-01-02', date = '2020-01-03') AS rFROM retention_testWHERE date IN ('2020-01-01', '2020-01-02', '2020-01-03')GROUP BY uidORDER BY uid ASC", "SELECT    sum(r[1]) AS r1,    sum(r[2]) AS r2,    sum(r[3]) AS r3FROM(    SELECT        uid,        retention(date = '2020-01-01', date = '2020-01-02', date = '2020-01-03') AS r    FROM retention_test    WHERE date IN ('2020-01-01', '2020-01-02', '2020-01-03')    GROUP BY uid)"], "Category": ["Aggregate Functions"], "index": 262, "vector_txt": "262:Feature: retention(cond1, cond2, ..., cond32);\nDescription: retentionThe function takes as arguments a set of conditions from 1 to 32 arguments of type UInt8 that indicate whether a certain condition was met for the event.\nAny condition can be specified as an argument (as in WHERE).The conditions, except the first, apply in pairs: the result of the second will be true if the first and second are true, of the third if the first and third are true, etc.Syntaxretention(cond1, cond2, ..., cond32);Argumentscond \u2014 An expression that returns a UInt8 result (1 or 0).Returned valueThe array of 1 or 0.1 \u2014 Condition was met for the event.0 \u2014 Condition wasn\u2019t met for the event.Type: UInt8.\nExamples: CREATE TABLE retention_test(date Date, uid Int32) ENGINE = Memory;INSERT INTO retention_test SELECT '2020-01-01', number FROM numbers(5);INSERT INTO retention_test SELECT '2020-01-02', number FROM numbers(10);INSERT INTO retention_test SELECT '2020-01-03', number FROM numbers(15);SELECT * FROM retention_testSELECT    uid,    retention(date = '2020-01-01', date = '2020-01-02', date = '2020-01-03') AS rFROM retention_testWHERE date IN ('2020-01-01', '2020-01-02', '2020-01-03')GROUP BY uidORDER BY uid ASCSELECT    sum(r[1]) AS r1,    sum(r[2]) AS r2,    sum(r[3]) AS r3FROM(    SELECT        uid,        retention(date = '2020-01-01', date = '2020-01-02', date = '2020-01-03') AS r    FROM retention_test    WHERE date IN ('2020-01-01', '2020-01-02', '2020-01-03')    GROUP BY uid)\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/parametric-functions"], "Title": ["uniqUpTo(N)(x)"], "Feature": ["uniqUpTo(N)(x)"], "Description": ["uniqUpTo(N)(x)", "Calculates the number of different values of the argument up to a specified limit, N. If the number of different argument values is greater than N, this function returns N + 1, otherwise it calculates the exact value. ", "Recommended for use with small Ns, up to 10. The maximum value of N is 100.", "For the state of an aggregate function, this function uses the amount of memory equal to 1 + N * the size of one value of bytes.\nWhen dealing with strings, this function stores a non-cryptographic hash of 8 bytes; the calculation is approximated for strings.", "For example, if you had a table that logs every search query made by users on your website. Each row in the table represents a single search query, with columns for the user ID, the search query, and the timestamp of the query. You can use uniqUpTo to generate a report that shows only the keywords that produced at least 5 unique users.", "SELECT SearchPhraseFROM SearchLogGROUP BY SearchPhraseHAVING uniqUpTo(4)(UserID) >= 5", "uniqUpTo(4)(UserID) calculates the number of unique UserID values for each SearchPhrase, but it only counts up to 4 unique values. If there are more than 4 unique UserID values for a SearchPhrase, the function returns 5 (4 + 1). The HAVING clause then filters out the SearchPhrase values for which the number of unique UserID values is less than 5. This will give you a list of search keywords that were used by at least 5 unique users."], "Examples": ["SELECT SearchPhraseFROM SearchLogGROUP BY SearchPhraseHAVING uniqUpTo(4)(UserID) >= 5"], "Category": ["Aggregate Functions"], "index": 263, "vector_txt": "263:Feature: uniqUpTo(N)(x)\nDescription: uniqUpTo(N)(x)Calculates the number of different values of the argument up to a specified limit, N. If the number of different argument values is greater than N, this function returns N + 1, otherwise it calculates the exact value. Recommended for use with small Ns, up to 10. The maximum value of N is 100.For the state of an aggregate function, this function uses the amount of memory equal to 1 + N * the size of one value of bytes.\nWhen dealing with strings, this function stores a non-cryptographic hash of 8 bytes; the calculation is approximated for strings.For example, if you had a table that logs every search query made by users on your website. Each row in the table represents a single search query, with columns for the user ID, the search query, and the timestamp of the query. You can use uniqUpTo to generate a report that shows only the keywords that produced at least 5 unique users.SELECT SearchPhraseFROM SearchLogGROUP BY SearchPhraseHAVING uniqUpTo(4)(UserID) >= 5uniqUpTo(4)(UserID) calculates the number of unique UserID values for each SearchPhrase, but it only counts up to 4 unique values. If there are more than 4 unique UserID values for a SearchPhrase, the function returns 5 (4 + 1). The HAVING clause then filters out the SearchPhrase values for which the number of unique UserID values is less than 5. This will give you a list of search keywords that were used by at least 5 unique users.\nExamples: SELECT SearchPhraseFROM SearchLogGROUP BY SearchPhraseHAVING uniqUpTo(4)(UserID) >= 5\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/parametric-functions"], "Title": ["sumMapFiltered"], "Feature": ["CREATE TABLE sum_map(    `date` Date,    `timeslot` DateTime,    `statusMap` Nested(status UInt16, requests UInt64))ENGINE = LogINSERT INTO sum_map VALUES     ('2000-01-01', '2000-01-01 00:00:00', [1, 2, 3], [10, 10, 10]),     ('2000-01-01', '2000-01-01 00:00:00', [3, 4, 5], [10, 10, 10]),    ('2000-01-01', '2000-01-01 00:01:00', [4, 5, 6], [10, 10, 10]),     ('2000-01-01', '2000-01-01 00:01:00', [6, 7, 8], [10, 10, 10]);"], "Description": ["sumMapFiltered", "This function behaves the same as sumMap except that it also accepts an array of keys to filter with as a parameter. This can be especially useful when working with a high cardinality of keys.", "Syntax", "sumMapFiltered(keys_to_keep)(keys, values)", "Parameters", "keys_to_keep: Array of keys to filter with.keys: Array of keys.values: Array of values.", "Returned Value ", "Returns a tuple of two arrays: keys in sorted order, and values summed for the corresponding keys."], "Examples": ["CREATE TABLE sum_map(    `date` Date,    `timeslot` DateTime,    `statusMap` Nested(status UInt16, requests UInt64))ENGINE = LogINSERT INTO sum_map VALUES     ('2000-01-01', '2000-01-01 00:00:00', [1, 2, 3], [10, 10, 10]),     ('2000-01-01', '2000-01-01 00:00:00', [3, 4, 5], [10, 10, 10]),    ('2000-01-01', '2000-01-01 00:01:00', [4, 5, 6], [10, 10, 10]),     ('2000-01-01', '2000-01-01 00:01:00', [6, 7, 8], [10, 10, 10]);", "SELECT sumMapFiltered([1, 4, 8])(statusMap.status, statusMap.requests) FROM sum_map;"], "Category": ["Aggregate Functions"], "index": 264, "vector_txt": "264:Feature: CREATE TABLE sum_map(    `date` Date,    `timeslot` DateTime,    `statusMap` Nested(status UInt16, requests UInt64))ENGINE = LogINSERT INTO sum_map VALUES     ('2000-01-01', '2000-01-01 00:00:00', [1, 2, 3], [10, 10, 10]),     ('2000-01-01', '2000-01-01 00:00:00', [3, 4, 5], [10, 10, 10]),    ('2000-01-01', '2000-01-01 00:01:00', [4, 5, 6], [10, 10, 10]),     ('2000-01-01', '2000-01-01 00:01:00', [6, 7, 8], [10, 10, 10]);\nDescription: sumMapFilteredThis function behaves the same as sumMap except that it also accepts an array of keys to filter with as a parameter. This can be especially useful when working with a high cardinality of keys.SyntaxsumMapFiltered(keys_to_keep)(keys, values)Parameterskeys_to_keep: Array of keys to filter with.keys: Array of keys.values: Array of values.Returned Value Returns a tuple of two arrays: keys in sorted order, and values summed for the corresponding keys.\nExamples: CREATE TABLE sum_map(    `date` Date,    `timeslot` DateTime,    `statusMap` Nested(status UInt16, requests UInt64))ENGINE = LogINSERT INTO sum_map VALUES     ('2000-01-01', '2000-01-01 00:00:00', [1, 2, 3], [10, 10, 10]),     ('2000-01-01', '2000-01-01 00:00:00', [3, 4, 5], [10, 10, 10]),    ('2000-01-01', '2000-01-01 00:01:00', [4, 5, 6], [10, 10, 10]),     ('2000-01-01', '2000-01-01 00:01:00', [6, 7, 8], [10, 10, 10]);SELECT sumMapFiltered([1, 4, 8])(statusMap.status, statusMap.requests) FROM sum_map;\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/parametric-functions"], "Title": ["sumMapFilteredWithOverflow"], "Feature": ["CREATE TABLE sum_map(    `date` Date,    `timeslot` DateTime,    `statusMap` Nested(status UInt8, requests UInt8))ENGINE = LogINSERT INTO sum_map VALUES     ('2000-01-01', '2000-01-01 00:00:00', [1, 2, 3], [10, 10, 10]),     ('2000-01-01', '2000-01-01 00:00:00', [3, 4, 5], [10, 10, 10]),    ('2000-01-01', '2000-01-01 00:01:00', [4, 5, 6], [10, 10, 10]),     ('2000-01-01', '2000-01-01 00:01:00', [6, 7, 8], [10, 10, 10]);"], "Description": ["sumMapFilteredWithOverflow", "This function behaves the same as sumMap except that it also accepts an array of keys to filter with as a parameter. This can be especially useful when working with a high cardinality of keys. It differs from the sumMapFiltered function in that it does summation with overflow - i.e. returns the same data type for the summation as the argument data type.", "Syntax", "sumMapFilteredWithOverflow(keys_to_keep)(keys, values)", "Parameters", "keys_to_keep: Array of keys to filter with.keys: Array of keys.values: Array of values.", "Returned Value ", "Returns a tuple of two arrays: keys in sorted order, and values summed for the corresponding keys."], "Examples": ["CREATE TABLE sum_map(    `date` Date,    `timeslot` DateTime,    `statusMap` Nested(status UInt8, requests UInt8))ENGINE = LogINSERT INTO sum_map VALUES     ('2000-01-01', '2000-01-01 00:00:00', [1, 2, 3], [10, 10, 10]),     ('2000-01-01', '2000-01-01 00:00:00', [3, 4, 5], [10, 10, 10]),    ('2000-01-01', '2000-01-01 00:01:00', [4, 5, 6], [10, 10, 10]),     ('2000-01-01', '2000-01-01 00:01:00', [6, 7, 8], [10, 10, 10]);", "SELECT sumMapFilteredWithOverflow([1, 4, 8])(statusMap.status, statusMap.requests) as summap_overflow, toTypeName(summap_overflow) FROM sum_map;", "SELECT sumMapFiltered([1, 4, 8])(statusMap.status, statusMap.requests) as summap, toTypeName(summap) FROM sum_map;"], "Category": ["Aggregate Functions"], "index": 265, "vector_txt": "265:Feature: CREATE TABLE sum_map(    `date` Date,    `timeslot` DateTime,    `statusMap` Nested(status UInt8, requests UInt8))ENGINE = LogINSERT INTO sum_map VALUES     ('2000-01-01', '2000-01-01 00:00:00', [1, 2, 3], [10, 10, 10]),     ('2000-01-01', '2000-01-01 00:00:00', [3, 4, 5], [10, 10, 10]),    ('2000-01-01', '2000-01-01 00:01:00', [4, 5, 6], [10, 10, 10]),     ('2000-01-01', '2000-01-01 00:01:00', [6, 7, 8], [10, 10, 10]);\nDescription: sumMapFilteredWithOverflowThis function behaves the same as sumMap except that it also accepts an array of keys to filter with as a parameter. This can be especially useful when working with a high cardinality of keys. It differs from the sumMapFiltered function in that it does summation with overflow - i.e. returns the same data type for the summation as the argument data type.SyntaxsumMapFilteredWithOverflow(keys_to_keep)(keys, values)Parameterskeys_to_keep: Array of keys to filter with.keys: Array of keys.values: Array of values.Returned Value Returns a tuple of two arrays: keys in sorted order, and values summed for the corresponding keys.\nExamples: CREATE TABLE sum_map(    `date` Date,    `timeslot` DateTime,    `statusMap` Nested(status UInt8, requests UInt8))ENGINE = LogINSERT INTO sum_map VALUES     ('2000-01-01', '2000-01-01 00:00:00', [1, 2, 3], [10, 10, 10]),     ('2000-01-01', '2000-01-01 00:00:00', [3, 4, 5], [10, 10, 10]),    ('2000-01-01', '2000-01-01 00:01:00', [4, 5, 6], [10, 10, 10]),     ('2000-01-01', '2000-01-01 00:01:00', [6, 7, 8], [10, 10, 10]);SELECT sumMapFilteredWithOverflow([1, 4, 8])(statusMap.status, statusMap.requests) as summap_overflow, toTypeName(summap_overflow) FROM sum_map;SELECT sumMapFiltered([1, 4, 8])(statusMap.status, statusMap.requests) as summap, toTypeName(summap) FROM sum_map;\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bit-functions"], "Title": ["bitRotateRight(a, b)"], "Feature": ["bitRotateRight(a, b)"], "Description": ["bitRotateRight(a, b)"], "Examples": [], "Category": ["Bit Functions"], "index": 266, "vector_txt": "266:Feature: bitRotateRight(a, b)\nDescription: bitRotateRight(a, b)\nExamples: \nCategory: Bit Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/aggregate-functions/parametric-functions"], "Title": ["sequenceNextNode"], "Feature": ["sequenceNextNode(direction, base)(timestamp, event_column, base_condition, event1, event2, event3, ...)"], "Description": ["sequenceNextNode", "Returns a value of the next event that matched an event chain.", "Experimental function, SET allow_experimental_funnel_functions = 1 to enable it.", "Syntax", "sequenceNextNode(direction, base)(timestamp, event_column, base_condition, event1, event2, event3, ...)", "Parameters", "direction \u2014 Used to navigate to directions.forward \u2014 Moving forward.backward \u2014 Moving backward.base \u2014 Used to set the base point.head \u2014 Set the base point to the first event.tail \u2014 Set the base point to the last event.first_match \u2014 Set the base point to the first matched event1.last_match \u2014 Set the base point to the last matched event1.", "Arguments", "timestamp \u2014 Name of the column containing the timestamp. Data types supported: Date, DateTime and other unsigned integer types.event_column \u2014 Name of the column containing the value of the next event to be returned. Data types supported: String and Nullable(String).base_condition \u2014 Condition that the base point must fulfill.event1, event2, ... \u2014 Conditions describing the chain of events. UInt8.", "Returned values", "event_column[next_index] \u2014 If the pattern is matched and next value exists.NULL - If the pattern isn\u2019t matched or next value doesn't exist.", "Type: Nullable(String)."], "Examples": ["CREATE TABLE test_flow (    dt DateTime,    id int,    page String)ENGINE = MergeTree()PARTITION BY toYYYYMMDD(dt)ORDER BY id;INSERT INTO test_flow VALUES (1, 1, 'A') (2, 1, 'B') (3, 1, 'C') (4, 1, 'D') (5, 1, 'E');SELECT id, sequenceNextNode('forward', 'head')(dt, page, page = 'A', page = 'A', page = 'B') as next_flow FROM test_flow GROUP BY id;", "ALTER TABLE test_flow DELETE WHERE 1 = 1 settings mutations_sync = 1;INSERT INTO test_flow VALUES (1, 1, 'Home') (2, 1, 'Gift') (3, 1, 'Exit');INSERT INTO test_flow VALUES (1, 2, 'Home') (2, 2, 'Home') (3, 2, 'Gift') (4, 2, 'Basket');INSERT INTO test_flow VALUES (1, 3, 'Gift') (2, 3, 'Home') (3, 3, 'Gift') (4, 3, 'Basket');", "SELECT id, sequenceNextNode('forward', 'head')(dt, page, page = 'Home', page = 'Home', page = 'Gift') FROM test_flow GROUP BY id;                  dt   id   page 1970-01-01 09:00:01    1   Home // Base point, Matched with Home 1970-01-01 09:00:02    1   Gift // Matched with Gift 1970-01-01 09:00:03    1   Exit // The result 1970-01-01 09:00:01    2   Home // Base point, Matched with Home 1970-01-01 09:00:02    2   Home // Unmatched with Gift 1970-01-01 09:00:03    2   Gift 1970-01-01 09:00:04    2   Basket 1970-01-01 09:00:01    3   Gift // Base point, Unmatched with Home 1970-01-01 09:00:02    3   Home 1970-01-01 09:00:03    3   Gift 1970-01-01 09:00:04    3   Basket", "SELECT id, sequenceNextNode('backward', 'tail')(dt, page, page = 'Basket', page = 'Basket', page = 'Gift') FROM test_flow GROUP BY id;                 dt   id   page1970-01-01 09:00:01    1   Home1970-01-01 09:00:02    1   Gift1970-01-01 09:00:03    1   Exit // Base point, Unmatched with Basket1970-01-01 09:00:01    2   Home1970-01-01 09:00:02    2   Home // The result1970-01-01 09:00:03    2   Gift // Matched with Gift1970-01-01 09:00:04    2   Basket // Base point, Matched with Basket1970-01-01 09:00:01    3   Gift1970-01-01 09:00:02    3   Home // The result1970-01-01 09:00:03    3   Gift // Base point, Matched with Gift1970-01-01 09:00:04    3   Basket // Base point, Matched with Basket", "SELECT id, sequenceNextNode('forward', 'first_match')(dt, page, page = 'Gift', page = 'Gift') FROM test_flow GROUP BY id;                 dt   id   page1970-01-01 09:00:01    1   Home1970-01-01 09:00:02    1   Gift // Base point1970-01-01 09:00:03    1   Exit // The result1970-01-01 09:00:01    2   Home1970-01-01 09:00:02    2   Home1970-01-01 09:00:03    2   Gift // Base point1970-01-01 09:00:04    2   Basket  The result1970-01-01 09:00:01    3   Gift // Base point1970-01-01 09:00:02    3   Home // The result1970-01-01 09:00:03    3   Gift1970-01-01 09:00:04    3   Basket", "SELECT id, sequenceNextNode('forward', 'first_match')(dt, page, page = 'Gift', page = 'Gift', page = 'Home') FROM test_flow GROUP BY id;                 dt   id   page1970-01-01 09:00:01    1   Home1970-01-01 09:00:02    1   Gift // Base point1970-01-01 09:00:03    1   Exit // Unmatched with Home1970-01-01 09:00:01    2   Home1970-01-01 09:00:02    2   Home1970-01-01 09:00:03    2   Gift // Base point1970-01-01 09:00:04    2   Basket // Unmatched with Home1970-01-01 09:00:01    3   Gift // Base point1970-01-01 09:00:02    3   Home // Matched with Home1970-01-01 09:00:03    3   Gift // The result1970-01-01 09:00:04    3   Basket", "SELECT id, sequenceNextNode('backward', 'last_match')(dt, page, page = 'Gift', page = 'Gift') FROM test_flow GROUP BY id;                 dt   id   page1970-01-01 09:00:01    1   Home // The result1970-01-01 09:00:02    1   Gift // Base point1970-01-01 09:00:03    1   Exit1970-01-01 09:00:01    2   Home1970-01-01 09:00:02    2   Home // The result1970-01-01 09:00:03    2   Gift // Base point1970-01-01 09:00:04    2   Basket1970-01-01 09:00:01    3   Gift1970-01-01 09:00:02    3   Home // The result1970-01-01 09:00:03    3   Gift // Base point1970-01-01 09:00:04    3   Basket", "SELECT id, sequenceNextNode('backward', 'last_match')(dt, page, page = 'Gift', page = 'Gift', page = 'Home') FROM test_flow GROUP BY id;                 dt   id   page1970-01-01 09:00:01    1   Home // Matched with Home, the result is null1970-01-01 09:00:02    1   Gift // Base point1970-01-01 09:00:03    1   Exit1970-01-01 09:00:01    2   Home // The result1970-01-01 09:00:02    2   Home // Matched with Home1970-01-01 09:00:03    2   Gift // Base point1970-01-01 09:00:04    2   Basket1970-01-01 09:00:01    3   Gift // The result1970-01-01 09:00:02    3   Home // Matched with Home1970-01-01 09:00:03    3   Gift // Base point1970-01-01 09:00:04    3   Basket", "CREATE TABLE test_flow_basecond(    `dt` DateTime,    `id` int,    `page` String,    `ref` String)ENGINE = MergeTreePARTITION BY toYYYYMMDD(dt)ORDER BY id;INSERT INTO test_flow_basecond VALUES (1, 1, 'A', 'ref4') (2, 1, 'A', 'ref3') (3, 1, 'B', 'ref2') (4, 1, 'B', 'ref1');", "SELECT id, sequenceNextNode('forward', 'head')(dt, page, ref = 'ref1', page = 'A') FROM test_flow_basecond GROUP BY id;                  dt   id   page   ref 1970-01-01 09:00:01    1   A      ref4 // The head can not be base point because the ref column of the head unmatched with 'ref1'. 1970-01-01 09:00:02    1   A      ref3 1970-01-01 09:00:03    1   B      ref2 1970-01-01 09:00:04    1   B      ref1", "SELECT id, sequenceNextNode('backward', 'tail')(dt, page, ref = 'ref4', page = 'B') FROM test_flow_basecond GROUP BY id;                  dt   id   page   ref 1970-01-01 09:00:01    1   A      ref4 1970-01-01 09:00:02    1   A      ref3 1970-01-01 09:00:03    1   B      ref2 1970-01-01 09:00:04    1   B      ref1 // The tail can not be base point because the ref column of the tail unmatched with 'ref4'.", "SELECT id, sequenceNextNode('forward', 'first_match')(dt, page, ref = 'ref3', page = 'A') FROM test_flow_basecond GROUP BY id;                  dt   id   page   ref 1970-01-01 09:00:01    1   A      ref4 // This row can not be base point because the ref column unmatched with 'ref3'. 1970-01-01 09:00:02    1   A      ref3 // Base point 1970-01-01 09:00:03    1   B      ref2 // The result 1970-01-01 09:00:04    1   B      ref1", "SELECT id, sequenceNextNode('backward', 'last_match')(dt, page, ref = 'ref2', page = 'B') FROM test_flow_basecond GROUP BY id;                  dt   id   page   ref 1970-01-01 09:00:01    1   A      ref4 1970-01-01 09:00:02    1   A      ref3 // The result 1970-01-01 09:00:03    1   B      ref2 // Base point 1970-01-01 09:00:04    1   B      ref1 // This row can not be base point because the ref column unmatched with 'ref2'."], "Category": ["Aggregate Functions"], "index": 267, "vector_txt": "267:Feature: sequenceNextNode(direction, base)(timestamp, event_column, base_condition, event1, event2, event3, ...)\nDescription: sequenceNextNodeReturns a value of the next event that matched an event chain.Experimental function, SET allow_experimental_funnel_functions = 1 to enable it.SyntaxsequenceNextNode(direction, base)(timestamp, event_column, base_condition, event1, event2, event3, ...)Parametersdirection \u2014 Used to navigate to directions.forward \u2014 Moving forward.backward \u2014 Moving backward.base \u2014 Used to set the base point.head \u2014 Set the base point to the first event.tail \u2014 Set the base point to the last event.first_match \u2014 Set the base point to the first matched event1.last_match \u2014 Set the base point to the last matched event1.Argumentstimestamp \u2014 Name of the column containing the timestamp. Data types supported: Date, DateTime and other unsigned integer types.event_column \u2014 Name of the column containing the value of the next event to be returned. Data types supported: String and Nullable(String).base_condition \u2014 Condition that the base point must fulfill.event1, event2, ... \u2014 Conditions describing the chain of events. UInt8.Returned valuesevent_column[next_index] \u2014 If the pattern is matched and next value exists.NULL - If the pattern isn\u2019t matched or next value doesn't exist.Type: Nullable(String).\nExamples: CREATE TABLE test_flow (    dt DateTime,    id int,    page String)ENGINE = MergeTree()PARTITION BY toYYYYMMDD(dt)ORDER BY id;INSERT INTO test_flow VALUES (1, 1, 'A') (2, 1, 'B') (3, 1, 'C') (4, 1, 'D') (5, 1, 'E');SELECT id, sequenceNextNode('forward', 'head')(dt, page, page = 'A', page = 'A', page = 'B') as next_flow FROM test_flow GROUP BY id;ALTER TABLE test_flow DELETE WHERE 1 = 1 settings mutations_sync = 1;INSERT INTO test_flow VALUES (1, 1, 'Home') (2, 1, 'Gift') (3, 1, 'Exit');INSERT INTO test_flow VALUES (1, 2, 'Home') (2, 2, 'Home') (3, 2, 'Gift') (4, 2, 'Basket');INSERT INTO test_flow VALUES (1, 3, 'Gift') (2, 3, 'Home') (3, 3, 'Gift') (4, 3, 'Basket');SELECT id, sequenceNextNode('forward', 'head')(dt, page, page = 'Home', page = 'Home', page = 'Gift') FROM test_flow GROUP BY id;                  dt   id   page 1970-01-01 09:00:01    1   Home // Base point, Matched with Home 1970-01-01 09:00:02    1   Gift // Matched with Gift 1970-01-01 09:00:03    1   Exit // The result 1970-01-01 09:00:01    2   Home // Base point, Matched with Home 1970-01-01 09:00:02    2   Home // Unmatched with Gift 1970-01-01 09:00:03    2   Gift 1970-01-01 09:00:04    2   Basket 1970-01-01 09:00:01    3   Gift // Base point, Unmatched with Home 1970-01-01 09:00:02    3   Home 1970-01-01 09:00:03    3   Gift 1970-01-01 09:00:04    3   BasketSELECT id, sequenceNextNode('backward', 'tail')(dt, page, page = 'Basket', page = 'Basket', page = 'Gift') FROM test_flow GROUP BY id;                 dt   id   page1970-01-01 09:00:01    1   Home1970-01-01 09:00:02    1   Gift1970-01-01 09:00:03    1   Exit // Base point, Unmatched with Basket1970-01-01 09:00:01    2   Home1970-01-01 09:00:02    2   Home // The result1970-01-01 09:00:03    2   Gift // Matched with Gift1970-01-01 09:00:04    2   Basket // Base point, Matched with Basket1970-01-01 09:00:01    3   Gift1970-01-01 09:00:02    3   Home // The result1970-01-01 09:00:03    3   Gift // Base point, Matched with Gift1970-01-01 09:00:04    3   Basket // Base point, Matched with BasketSELECT id, sequenceNextNode('forward', 'first_match')(dt, page, page = 'Gift', page = 'Gift') FROM test_flow GROUP BY id;                 dt   id   page1970-01-01 09:00:01    1   Home1970-01-01 09:00:02    1   Gift // Base point1970-01-01 09:00:03    1   Exit // The result1970-01-01 09:00:01    2   Home1970-01-01 09:00:02    2   Home1970-01-01 09:00:03    2   Gift // Base point1970-01-01 09:00:04    2   Basket  The result1970-01-01 09:00:01    3   Gift // Base point1970-01-01 09:00:02    3   Home // The result1970-01-01 09:00:03    3   Gift1970-01-01 09:00:04    3   BasketSELECT id, sequenceNextNode('forward', 'first_match')(dt, page, page = 'Gift', page = 'Gift', page = 'Home') FROM test_flow GROUP BY id;                 dt   id   page1970-01-01 09:00:01    1   Home1970-01-01 09:00:02    1   Gift // Base point1970-01-01 09:00:03    1   Exit // Unmatched with Home1970-01-01 09:00:01    2   Home1970-01-01 09:00:02    2   Home1970-01-01 09:00:03    2   Gift // Base point1970-01-01 09:00:04    2   Basket // Unmatched with Home1970-01-01 09:00:01    3   Gift // Base point1970-01-01 09:00:02    3   Home // Matched with Home1970-01-01 09:00:03    3   Gift // The result1970-01-01 09:00:04    3   BasketSELECT id, sequenceNextNode('backward', 'last_match')(dt, page, page = 'Gift', page = 'Gift') FROM test_flow GROUP BY id;                 dt   id   page1970-01-01 09:00:01    1   Home // The result1970-01-01 09:00:02    1   Gift // Base point1970-01-01 09:00:03    1   Exit1970-01-01 09:00:01    2   Home1970-01-01 09:00:02    2   Home // The result1970-01-01 09:00:03    2   Gift // Base point1970-01-01 09:00:04    2   Basket1970-01-01 09:00:01    3   Gift1970-01-01 09:00:02    3   Home // The result1970-01-01 09:00:03    3   Gift // Base point1970-01-01 09:00:04    3   BasketSELECT id, sequenceNextNode('backward', 'last_match')(dt, page, page = 'Gift', page = 'Gift', page = 'Home') FROM test_flow GROUP BY id;                 dt   id   page1970-01-01 09:00:01    1   Home // Matched with Home, the result is null1970-01-01 09:00:02    1   Gift // Base point1970-01-01 09:00:03    1   Exit1970-01-01 09:00:01    2   Home // The result1970-01-01 09:00:02    2   Home // Matched with Home1970-01-01 09:00:03    2   Gift // Base point1970-01-01 09:00:04    2   Basket1970-01-01 09:00:01    3   Gift // The result1970-01-01 09:00:02    3   Home // Matched with Home1970-01-01 09:00:03    3   Gift // Base point1970-01-01 09:00:04    3   BasketCREATE TABLE test_flow_basecond(    `dt` DateTime,    `id` int,    `page` String,    `ref` String)ENGINE = MergeTreePARTITION BY toYYYYMMDD(dt)ORDER BY id;INSERT INTO test_flow_basecond VALUES (1, 1, 'A', 'ref4') (2, 1, 'A', 'ref3') (3, 1, 'B', 'ref2') (4, 1, 'B', 'ref1');SELECT id, sequenceNextNode('forward', 'head')(dt, page, ref = 'ref1', page = 'A') FROM test_flow_basecond GROUP BY id;                  dt   id   page   ref 1970-01-01 09:00:01    1   A      ref4 // The head can not be base point because the ref column of the head unmatched with 'ref1'. 1970-01-01 09:00:02    1   A      ref3 1970-01-01 09:00:03    1   B      ref2 1970-01-01 09:00:04    1   B      ref1SELECT id, sequenceNextNode('backward', 'tail')(dt, page, ref = 'ref4', page = 'B') FROM test_flow_basecond GROUP BY id;                  dt   id   page   ref 1970-01-01 09:00:01    1   A      ref4 1970-01-01 09:00:02    1   A      ref3 1970-01-01 09:00:03    1   B      ref2 1970-01-01 09:00:04    1   B      ref1 // The tail can not be base point because the ref column of the tail unmatched with 'ref4'.SELECT id, sequenceNextNode('forward', 'first_match')(dt, page, ref = 'ref3', page = 'A') FROM test_flow_basecond GROUP BY id;                  dt   id   page   ref 1970-01-01 09:00:01    1   A      ref4 // This row can not be base point because the ref column unmatched with 'ref3'. 1970-01-01 09:00:02    1   A      ref3 // Base point 1970-01-01 09:00:03    1   B      ref2 // The result 1970-01-01 09:00:04    1   B      ref1SELECT id, sequenceNextNode('backward', 'last_match')(dt, page, ref = 'ref2', page = 'B') FROM test_flow_basecond GROUP BY id;                  dt   id   page   ref 1970-01-01 09:00:01    1   A      ref4 1970-01-01 09:00:02    1   A      ref3 // The result 1970-01-01 09:00:03    1   B      ref2 // Base point 1970-01-01 09:00:04    1   B      ref1 // This row can not be base point because the ref column unmatched with 'ref2'.\nCategory: Aggregate Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/azureBlobStorage"], "Title": ["Virtual Columns"], "Feature": ["Virtual Columns"], "Description": ["Virtual Columns", "_path \u2014 Path to the file. Type: LowCardinalty(String)._file \u2014 Name of the file. Type: LowCardinalty(String)._size \u2014 Size of the file in bytes. Type: Nullable(UInt64). If the file size is unknown, the value is NULL._time \u2014 Last modified time of the file. Type: Nullable(DateTime). If the time is unknown, the value is NULL.", "See Also", "AzureBlobStorage Table Engine"], "Examples": [], "Category": ["Table Functions"], "index": 268, "vector_txt": "268:Feature: Virtual Columns\nDescription: Virtual Columns_path \u2014 Path to the file. Type: LowCardinalty(String)._file \u2014 Name of the file. Type: LowCardinalty(String)._size \u2014 Size of the file in bytes. Type: Nullable(UInt64). If the file size is unknown, the value is NULL._time \u2014 Last modified time of the file. Type: Nullable(DateTime). If the time is unknown, the value is NULL.See AlsoAzureBlobStorage Table Engine\nExamples: \nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/azureBlobStorage"], "Title": ["Hive-style partitioning"], "Feature": ["Hive-style partitioning"], "Description": ["Hive-style partitioning", "When setting use_hive_partitioning is set to 1, ClickHouse will detect Hive-style partitioning in the path (/name=value/) and will allow to use partition columns as virtual columns in the query. These virtual columns will have the same names as in the partitioned path, but starting with _."], "Examples": ["SET use_hive_partitioning = 1;SELECT * from azureBlobStorage(config, storage_account_url='...', container='...', blob_path='http://data/path/date=*/country=*/code=*/*.parquet') where _date > '2020-01-01' and _country = 'Netherlands' and _code = 42;"], "Category": ["Table Functions"], "index": 269, "vector_txt": "269:Feature: Hive-style partitioning\nDescription: Hive-style partitioningWhen setting use_hive_partitioning is set to 1, ClickHouse will detect Hive-style partitioning in the path (/name=value/) and will allow to use partition columns as virtual columns in the query. These virtual columns will have the same names as in the partitioned path, but starting with _.\nExamples: SET use_hive_partitioning = 1;SELECT * from azureBlobStorage(config, storage_account_url='...', container='...', blob_path='http://data/path/date=*/country=*/code=*/*.parquet') where _date > '2020-01-01' and _country = 'Netherlands' and _code = 42;\nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/deltalake"], "Title": ["Syntax"], "Feature": ["deltaLake(url [,aws_access_key_id, aws_secret_access_key] [,format] [,structure] [,compression])"], "Description": ["Syntax", "deltaLake(url [,aws_access_key_id, aws_secret_access_key] [,format] [,structure] [,compression])"], "Examples": ["deltaLake(url [,aws_access_key_id, aws_secret_access_key] [,format] [,structure] [,compression])"], "Category": ["Table Functions"], "index": 270, "vector_txt": "270:Feature: deltaLake(url [,aws_access_key_id, aws_secret_access_key] [,format] [,structure] [,compression])\nDescription: SyntaxdeltaLake(url [,aws_access_key_id, aws_secret_access_key] [,format] [,structure] [,compression])\nExamples: deltaLake(url [,aws_access_key_id, aws_secret_access_key] [,format] [,structure] [,compression])\nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/deltalake"], "Title": ["Arguments"], "Feature": ["Arguments"], "Description": ["Arguments", "url \u2014 Bucket url with path to existing Delta Lake table in S3.aws_access_key_id, aws_secret_access_key - Long-term credentials for the AWS account user.  You can use these to authenticate your requests. These parameters are optional. If credentials are not specified, they are used from the ClickHouse configuration. For more information see Using S3 for Data Storage.format \u2014 The format of the file.structure \u2014 Structure of the table. Format 'column1_name column1_type, column2_name column2_type, ...'.compression \u2014 Parameter is optional. Supported values: none, gzip/gz, brotli/br, xz/LZMA, zstd/zst. By default, compression will be autodetected by the file extension.", "Returned value", "A table with the specified structure for reading data in the specified Delta Lake table in S3."], "Examples": ["SELECT    URL,    UserAgentFROM deltaLake('https://clickhouse-public-datasets.s3.amazonaws.com/delta_lake/hits/')WHERE URL IS NOT NULLLIMIT 2"], "Category": ["Table Functions"], "index": 271, "vector_txt": "271:Feature: Arguments\nDescription: Argumentsurl \u2014 Bucket url with path to existing Delta Lake table in S3.aws_access_key_id, aws_secret_access_key - Long-term credentials for the AWS account user.  You can use these to authenticate your requests. These parameters are optional. If credentials are not specified, they are used from the ClickHouse configuration. For more information see Using S3 for Data Storage.format \u2014 The format of the file.structure \u2014 Structure of the table. Format 'column1_name column1_type, column2_name column2_type, ...'.compression \u2014 Parameter is optional. Supported values: none, gzip/gz, brotli/br, xz/LZMA, zstd/zst. By default, compression will be autodetected by the file extension.Returned valueA table with the specified structure for reading data in the specified Delta Lake table in S3.\nExamples: SELECT    URL,    UserAgentFROM deltaLake('https://clickhouse-public-datasets.s3.amazonaws.com/delta_lake/hits/')WHERE URL IS NOT NULLLIMIT 2\nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/engines/table-functions/executable"], "Title": ["Syntax"], "Feature": ["executable(script_name, format, structure, [input_query...] [,SETTINGS ...])"], "Description": ["Syntax", "The executable table function requires three parameters and accepts an optional list of input queries:", "executable(script_name, format, structure, [input_query...] [,SETTINGS ...])", "script_name: the file name of the script. saved in the user_scripts folder (the default folder of the user_scripts_path setting)format: the format of the generated tablestructure: the table schema of the generated tableinput_query: an optional query (or collection or queries) whose results are passed to the script via stdin", "NoteIf you are going to invoke the same script repeatedly with the same input queries, consider using the Executable table engine.", "The following Python script is named generate_random.py and is saved in the user_scripts folder. It reads in a number i and prints i random strings, with each string preceded by a number that is separated by a tab:", "#!/usr/local/bin/python3.9import sysimport stringimport randomdef main():    # Read input value    for number in sys.stdin:        i = int(number)        # Generate some random rows        for id in range(0, i):            letters = string.ascii_letters            random_string =  ''.join(random.choices(letters ,k=10))            print(str(id) + '\\t' + random_string + '\\n', end='')        # Flush results to stdout        sys.stdout.flush()if __name__ == \"__main__\":    main()", "Let's invoke the script and have it generate 10 random strings:", "SELECT * FROM executable('generate_random.py', TabSeparated, 'id UInt32, random String', (SELECT 10))", "The response looks like:", "\u250c\u2500id\u2500\u252c\u2500random\u2500\u2500\u2500\u2500\u2500\u2510\u2502  0 \u2502 xheXXCiSkH \u2502\u2502  1 \u2502 AqxvHAoTrl \u2502\u2502  2 \u2502 JYvPCEbIkY \u2502\u2502  3 \u2502 sWgnqJwGRm \u2502\u2502  4 \u2502 fTZGrjcLon \u2502\u2502  5 \u2502 ZQINGktPnd \u2502\u2502  6 \u2502 YFSvGGoezb \u2502\u2502  7 \u2502 QyMJJZOOia \u2502\u2502  8 \u2502 NfiyDDhmcI \u2502\u2502  9 \u2502 REJRdJpWrg \u2502\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Examples": ["executable(script_name, format, structure, [input_query...] [,SETTINGS ...])", "SELECT * FROM executable('generate_random.py', TabSeparated, 'id UInt32, random String', (SELECT 10))"], "Category": ["Table Functions"], "index": 272, "vector_txt": "272:Feature: executable(script_name, format, structure, [input_query...] [,SETTINGS ...])\nDescription: SyntaxThe executable table function requires three parameters and accepts an optional list of input queries:executable(script_name, format, structure, [input_query...] [,SETTINGS ...])script_name: the file name of the script. saved in the user_scripts folder (the default folder of the user_scripts_path setting)format: the format of the generated tablestructure: the table schema of the generated tableinput_query: an optional query (or collection or queries) whose results are passed to the script via stdinNoteIf you are going to invoke the same script repeatedly with the same input queries, consider using the Executable table engine.The following Python script is named generate_random.py and is saved in the user_scripts folder. It reads in a number i and prints i random strings, with each string preceded by a number that is separated by a tab:#!/usr/local/bin/python3.9import sysimport stringimport randomdef main():    # Read input value    for number in sys.stdin:        i = int(number)        # Generate some random rows        for id in range(0, i):            letters = string.ascii_letters            random_string =  ''.join(random.choices(letters ,k=10))            print(str(id) + '\\t' + random_string + '\\n', end='')        # Flush results to stdout        sys.stdout.flush()if __name__ == \"__main__\":    main()Let's invoke the script and have it generate 10 random strings:SELECT * FROM executable('generate_random.py', TabSeparated, 'id UInt32, random String', (SELECT 10))The response looks like:\u250c\u2500id\u2500\u252c\u2500random\u2500\u2500\u2500\u2500\u2500\u2510\u2502  0 \u2502 xheXXCiSkH \u2502\u2502  1 \u2502 AqxvHAoTrl \u2502\u2502  2 \u2502 JYvPCEbIkY \u2502\u2502  3 \u2502 sWgnqJwGRm \u2502\u2502  4 \u2502 fTZGrjcLon \u2502\u2502  5 \u2502 ZQINGktPnd \u2502\u2502  6 \u2502 YFSvGGoezb \u2502\u2502  7 \u2502 QyMJJZOOia \u2502\u2502  8 \u2502 NfiyDDhmcI \u2502\u2502  9 \u2502 REJRdJpWrg \u2502\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nExamples: executable(script_name, format, structure, [input_query...] [,SETTINGS ...])SELECT * FROM executable('generate_random.py', TabSeparated, 'id UInt32, random String', (SELECT 10))\nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/engines/table-functions/executable"], "Title": ["Settings"], "Feature": ["Settings"], "Description": ["Settings", "send_chunk_header - controls whether to send row count before sending a chunk of data to process. Default value is false.pool_size \u2014 Size of pool. If 0 is specified as pool_size then there is no pool size restrictions. Default value is 16.max_command_execution_time \u2014 Maximum executable script command execution time for processing block of data. Specified in seconds. Default value is 10.command_termination_timeout \u2014 executable script should contain main read-write loop. After table function is destroyed, pipe is closed, and executable file will have command_termination_timeout seconds to shutdown, before ClickHouse will send SIGTERM signal to child process. Specified in seconds. Default value is 10.command_read_timeout - timeout for reading data from command stdout in milliseconds. Default value 10000.command_write_timeout - timeout for writing data to command stdin in milliseconds. Default value 10000."], "Examples": [], "Category": ["Table Functions"], "index": 273, "vector_txt": "273:Feature: Settings\nDescription: Settingssend_chunk_header - controls whether to send row count before sending a chunk of data to process. Default value is false.pool_size \u2014 Size of pool. If 0 is specified as pool_size then there is no pool size restrictions. Default value is 16.max_command_execution_time \u2014 Maximum executable script command execution time for processing block of data. Specified in seconds. Default value is 10.command_termination_timeout \u2014 executable script should contain main read-write loop. After table function is destroyed, pipe is closed, and executable file will have command_termination_timeout seconds to shutdown, before ClickHouse will send SIGTERM signal to child process. Specified in seconds. Default value is 10.command_read_timeout - timeout for reading data from command stdout in milliseconds. Default value 10000.command_write_timeout - timeout for writing data to command stdin in milliseconds. Default value 10000.\nExamples: \nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/engines/table-functions/executable"], "Title": ["Passing Query Results to a Script"], "Feature": ["Passing Query Results to a Script"], "Description": ["Passing Query Results to a Script", "Be sure to check out the example in the Executable table engine on how to pass query results to a script. Here is how you execute the same script in that example using the executable table function:", "SELECT * FROM executable(    'sentiment.py',    TabSeparated,    'id UInt64, sentiment Float32',    (SELECT id, comment FROM hackernews WHERE id > 0 AND comment != '' LIMIT 20));"], "Examples": ["SELECT * FROM executable(    'sentiment.py',    TabSeparated,    'id UInt64, sentiment Float32',    (SELECT id, comment FROM hackernews WHERE id > 0 AND comment != '' LIMIT 20));"], "Category": ["Table Functions"], "index": 274, "vector_txt": "274:Feature: Passing Query Results to a Script\nDescription: Passing Query Results to a ScriptBe sure to check out the example in the Executable table engine on how to pass query results to a script. Here is how you execute the same script in that example using the executable table function:SELECT * FROM executable(    'sentiment.py',    TabSeparated,    'id UInt64, sentiment Float32',    (SELECT id, comment FROM hackernews WHERE id > 0 AND comment != '' LIMIT 20));\nExamples: SELECT * FROM executable(    'sentiment.py',    TabSeparated,    'id UInt64, sentiment Float32',    (SELECT id, comment FROM hackernews WHERE id > 0 AND comment != '' LIMIT 20));\nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/file"], "Title": ["Examples for Writing to a File"], "Feature": ["Examples for Writing to a File"], "Description": ["Examples for Writing to a File", "Write to a TSV file", "INSERT INTO TABLE FUNCTIONfile('test.tsv', 'TSV', 'column1 UInt32, column2 UInt32, column3 UInt32')VALUES (1, 2, 3), (3, 2, 1), (1, 3, 2)", "As a result, the data is written into the file test.tsv:", "# cat /var/lib/clickhouse/user_files/test.tsv1   2   33   2   11   3   2", "Partitioned write to multiple TSV files", "If you specify a PARTITION BY expression when inserting data into a table function of type file(), then a separate file is created for each partition. Splitting the data into separate files helps to improve performance of read operations.", "INSERT INTO TABLE FUNCTIONfile('test_{_partition_id}.tsv', 'TSV', 'column1 UInt32, column2 UInt32, column3 UInt32')PARTITION BY column3VALUES (1, 2, 3), (3, 2, 1), (1, 3, 2)", "As a result, the data is written into three files: test_1.tsv, test_2.tsv, and test_3.tsv.", "# cat /var/lib/clickhouse/user_files/test_1.tsv3   2   1# cat /var/lib/clickhouse/user_files/test_2.tsv1   3   2# cat /var/lib/clickhouse/user_files/test_3.tsv1   2   3"], "Examples": ["INSERT INTO TABLE FUNCTIONfile('test.tsv', 'TSV', 'column1 UInt32, column2 UInt32, column3 UInt32')VALUES (1, 2, 3), (3, 2, 1), (1, 3, 2)", "INSERT INTO TABLE FUNCTIONfile('test_{_partition_id}.tsv', 'TSV', 'column1 UInt32, column2 UInt32, column3 UInt32')PARTITION BY column3VALUES (1, 2, 3), (3, 2, 1), (1, 3, 2)"], "Category": ["Table Functions"], "index": 275, "vector_txt": "275:Feature: Examples for Writing to a File\nDescription: Examples for Writing to a FileWrite to a TSV fileINSERT INTO TABLE FUNCTIONfile('test.tsv', 'TSV', 'column1 UInt32, column2 UInt32, column3 UInt32')VALUES (1, 2, 3), (3, 2, 1), (1, 3, 2)As a result, the data is written into the file test.tsv:# cat /var/lib/clickhouse/user_files/test.tsv1   2   33   2   11   3   2Partitioned write to multiple TSV filesIf you specify a PARTITION BY expression when inserting data into a table function of type file(), then a separate file is created for each partition. Splitting the data into separate files helps to improve performance of read operations.INSERT INTO TABLE FUNCTIONfile('test_{_partition_id}.tsv', 'TSV', 'column1 UInt32, column2 UInt32, column3 UInt32')PARTITION BY column3VALUES (1, 2, 3), (3, 2, 1), (1, 3, 2)As a result, the data is written into three files: test_1.tsv, test_2.tsv, and test_3.tsv.# cat /var/lib/clickhouse/user_files/test_1.tsv3   2   1# cat /var/lib/clickhouse/user_files/test_2.tsv1   3   2# cat /var/lib/clickhouse/user_files/test_3.tsv1   2   3\nExamples: INSERT INTO TABLE FUNCTIONfile('test.tsv', 'TSV', 'column1 UInt32, column2 UInt32, column3 UInt32')VALUES (1, 2, 3), (3, 2, 1), (1, 3, 2)INSERT INTO TABLE FUNCTIONfile('test_{_partition_id}.tsv', 'TSV', 'column1 UInt32, column2 UInt32, column3 UInt32')PARTITION BY column3VALUES (1, 2, 3), (3, 2, 1), (1, 3, 2)\nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/file"], "Title": ["Examples for Reading from a File"], "Feature": ["Examples for Reading from a File"], "Description": ["Examples for Reading from a File", "SELECT from a CSV file", "First, set user_files_path in the server configuration and prepare a file test.csv:", "$ grep user_files_path /etc/clickhouse-server/config.xml    <user_files_path>/var/lib/clickhouse/user_files/</user_files_path>$ cat /var/lib/clickhouse/user_files/test.csv    1,2,3    3,2,1    78,43,45", "Then, read data from test.csv into a table and select its first two rows:", "SELECT * FROMfile('test.csv', 'CSV', 'column1 UInt32, column2 UInt32, column3 UInt32')LIMIT 2;", "\u250c\u2500column1\u2500\u252c\u2500column2\u2500\u252c\u2500column3\u2500\u2510\u2502       1 \u2502       2 \u2502       3 \u2502\u2502       3 \u2502       2 \u2502       1 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "Inserting data from a file into a table", "INSERT INTO FUNCTIONfile('test.csv', 'CSV', 'column1 UInt32, column2 UInt32, column3 UInt32')VALUES (1, 2, 3), (3, 2, 1);", "SELECT * FROMfile('test.csv', 'CSV', 'column1 UInt32, column2 UInt32, column3 UInt32');", "\u250c\u2500column1\u2500\u252c\u2500column2\u2500\u252c\u2500column3\u2500\u2510\u2502       1 \u2502       2 \u2502       3 \u2502\u2502       3 \u2502       2 \u2502       1 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "Reading data from table.csv, located in archive1.zip or/and archive2.zip:", "SELECT * FROM file('user_files/archives/archive{1..2}.zip :: table.csv');"], "Examples": ["SELECT * FROMfile('test.csv', 'CSV', 'column1 UInt32, column2 UInt32, column3 UInt32')LIMIT 2;", "INSERT INTO FUNCTIONfile('test.csv', 'CSV', 'column1 UInt32, column2 UInt32, column3 UInt32')VALUES (1, 2, 3), (3, 2, 1);", "SELECT * FROMfile('test.csv', 'CSV', 'column1 UInt32, column2 UInt32, column3 UInt32');", "SELECT * FROM file('user_files/archives/archive{1..2}.zip :: table.csv');"], "Category": ["Table Functions"], "index": 276, "vector_txt": "276:Feature: Examples for Reading from a File\nDescription: Examples for Reading from a FileSELECT from a CSV fileFirst, set user_files_path in the server configuration and prepare a file test.csv:$ grep user_files_path /etc/clickhouse-server/config.xml    <user_files_path>/var/lib/clickhouse/user_files/</user_files_path>$ cat /var/lib/clickhouse/user_files/test.csv    1,2,3    3,2,1    78,43,45Then, read data from test.csv into a table and select its first two rows:SELECT * FROMfile('test.csv', 'CSV', 'column1 UInt32, column2 UInt32, column3 UInt32')LIMIT 2;\u250c\u2500column1\u2500\u252c\u2500column2\u2500\u252c\u2500column3\u2500\u2510\u2502       1 \u2502       2 \u2502       3 \u2502\u2502       3 \u2502       2 \u2502       1 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518Inserting data from a file into a tableINSERT INTO FUNCTIONfile('test.csv', 'CSV', 'column1 UInt32, column2 UInt32, column3 UInt32')VALUES (1, 2, 3), (3, 2, 1);SELECT * FROMfile('test.csv', 'CSV', 'column1 UInt32, column2 UInt32, column3 UInt32');\u250c\u2500column1\u2500\u252c\u2500column2\u2500\u252c\u2500column3\u2500\u2510\u2502       1 \u2502       2 \u2502       3 \u2502\u2502       3 \u2502       2 \u2502       1 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518Reading data from table.csv, located in archive1.zip or/and archive2.zip:SELECT * FROM file('user_files/archives/archive{1..2}.zip :: table.csv');\nExamples: SELECT * FROMfile('test.csv', 'CSV', 'column1 UInt32, column2 UInt32, column3 UInt32')LIMIT 2;INSERT INTO FUNCTIONfile('test.csv', 'CSV', 'column1 UInt32, column2 UInt32, column3 UInt32')VALUES (1, 2, 3), (3, 2, 1);SELECT * FROMfile('test.csv', 'CSV', 'column1 UInt32, column2 UInt32, column3 UInt32');SELECT * FROM file('user_files/archives/archive{1..2}.zip :: table.csv');\nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bit-functions"], "Title": ["bitSlice(s, offset, length)"], "Feature": ["bitSlice(s, offset[, length])"], "Description": ["bitSlice(s, offset, length)", "Returns a substring starting with the bit from the \u2018offset\u2019 index that is \u2018length\u2019 bits long. bits indexing starts from\n1", "Syntax", "bitSlice(s, offset[, length])", "Arguments", "s \u2014 s is String or FixedString.offset \u2014 The start index with bit, A positive value indicates an offset on the left, and a negative value is an indent on the right. Numbering of the bits begins with 1.length \u2014 The length of substring with bit. If you specify a negative value, the function returns an open substring [offset, array_length - length]. If you omit the value, the function returns the substring [offset, the_end_string]. If length exceeds s, it will be truncate.If length isn't multiple of 8, will fill 0 on the right.", "Returned value", "The substring. String"], "Examples": ["select bin('Hello'), bin(bitSlice('Hello', 1, 8))select bin('Hello'), bin(bitSlice('Hello', 1, 2))select bin('Hello'), bin(bitSlice('Hello', 1, 9))select bin('Hello'), bin(bitSlice('Hello', -4, 8))"], "Category": ["Bit Functions"], "index": 277, "vector_txt": "277:Feature: bitSlice(s, offset[, length])\nDescription: bitSlice(s, offset, length)Returns a substring starting with the bit from the \u2018offset\u2019 index that is \u2018length\u2019 bits long. bits indexing starts from\n1SyntaxbitSlice(s, offset[, length])Argumentss \u2014 s is String or FixedString.offset \u2014 The start index with bit, A positive value indicates an offset on the left, and a negative value is an indent on the right. Numbering of the bits begins with 1.length \u2014 The length of substring with bit. If you specify a negative value, the function returns an open substring [offset, array_length - length]. If you omit the value, the function returns the substring [offset, the_end_string]. If length exceeds s, it will be truncate.If length isn't multiple of 8, will fill 0 on the right.Returned valueThe substring. String\nExamples: select bin('Hello'), bin(bitSlice('Hello', 1, 8))select bin('Hello'), bin(bitSlice('Hello', 1, 2))select bin('Hello'), bin(bitSlice('Hello', 1, 9))select bin('Hello'), bin(bitSlice('Hello', -4, 8))\nCategory: Bit Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/file"], "Title": ["Globs in path"], "Feature": ["Globs in path"], "Description": ["Globs in path", "Paths may use globbing. Files must match the whole path pattern, not only the suffix or prefix. There is one exception that if the path refers to an existing\ndirectory and does not use globs, a * will be implicitly added to the path so\nall the files in the directory are selected.", "* \u2014 Represents arbitrarily many characters except / but including the empty string.? \u2014 Represents an arbitrary single character.{some_string,another_string,yet_another_one} \u2014 Substitutes any of strings 'some_string', 'another_string', 'yet_another_one'. The strings can contain the / symbol.{N..M} \u2014 Represents any number >= N and <= M.** - Represents all files inside a folder recursively.", "Constructions with {} are similar to the remote and hdfs table functions."], "Examples": ["SELECT count(*) FROM file('{some,another}_dir/some_file_{1..3}', 'TSV', 'name String, value UInt32');", "SELECT count(*) FROM file('{some,another}_dir/*', 'TSV', 'name String, value UInt32');", "SELECT count(*) FROM file('some_dir', 'TSV', 'name String, value UInt32');", "SELECT count(*) FROM file('big_dir/file{0..9}{0..9}{0..9}', 'CSV', 'name String, value UInt32');", "SELECT count(*) FROM file('big_dir/**', 'CSV', 'name String, value UInt32');", "SELECT count(*) FROM file('big_dir/**/file002', 'CSV', 'name String, value UInt32');"], "Category": ["Table Functions"], "index": 278, "vector_txt": "278:Feature: Globs in path\nDescription: Globs in pathPaths may use globbing. Files must match the whole path pattern, not only the suffix or prefix. There is one exception that if the path refers to an existing\ndirectory and does not use globs, a * will be implicitly added to the path so\nall the files in the directory are selected.* \u2014 Represents arbitrarily many characters except / but including the empty string.? \u2014 Represents an arbitrary single character.{some_string,another_string,yet_another_one} \u2014 Substitutes any of strings 'some_string', 'another_string', 'yet_another_one'. The strings can contain the / symbol.{N..M} \u2014 Represents any number >= N and <= M.** - Represents all files inside a folder recursively.Constructions with {} are similar to the remote and hdfs table functions.\nExamples: SELECT count(*) FROM file('{some,another}_dir/some_file_{1..3}', 'TSV', 'name String, value UInt32');SELECT count(*) FROM file('{some,another}_dir/*', 'TSV', 'name String, value UInt32');SELECT count(*) FROM file('some_dir', 'TSV', 'name String, value UInt32');SELECT count(*) FROM file('big_dir/file{0..9}{0..9}{0..9}', 'CSV', 'name String, value UInt32');SELECT count(*) FROM file('big_dir/**', 'CSV', 'name String, value UInt32');SELECT count(*) FROM file('big_dir/**/file002', 'CSV', 'name String, value UInt32');\nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/file"], "Title": ["Virtual Columns"], "Feature": ["Virtual Columns"], "Description": ["Virtual Columns", "_path \u2014 Path to the file. Type: LowCardinalty(String)._file \u2014 Name of the file. Type: LowCardinalty(String)._size \u2014 Size of the file in bytes. Type: Nullable(UInt64). If the file size is unknown, the value is NULL._time \u2014 Last modified time of the file. Type: Nullable(DateTime). If the time is unknown, the value is NULL."], "Examples": [], "Category": ["Table Functions"], "index": 279, "vector_txt": "279:Feature: Virtual Columns\nDescription: Virtual Columns_path \u2014 Path to the file. Type: LowCardinalty(String)._file \u2014 Name of the file. Type: LowCardinalty(String)._size \u2014 Size of the file in bytes. Type: Nullable(UInt64). If the file size is unknown, the value is NULL._time \u2014 Last modified time of the file. Type: Nullable(DateTime). If the time is unknown, the value is NULL.\nExamples: \nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/file"], "Title": ["Hive-style partitioning"], "Feature": ["Hive-style partitioning"], "Description": ["Hive-style partitioning", "When setting use_hive_partitioning is set to 1, ClickHouse will detect Hive-style partitioning in the path (/name=value/) and will allow to use partition columns as virtual columns in the query. These virtual columns will have the same names as in the partitioned path, but starting with _."], "Examples": ["SET use_hive_partitioning = 1;SELECT * from file('data/path/date=*/country=*/code=*/*.parquet') where _date > '2020-01-01' and _country = 'Netherlands' and _code = 42;"], "Category": ["Table Functions"], "index": 280, "vector_txt": "280:Feature: Hive-style partitioning\nDescription: Hive-style partitioningWhen setting use_hive_partitioning is set to 1, ClickHouse will detect Hive-style partitioning in the path (/name=value/) and will allow to use partition columns as virtual columns in the query. These virtual columns will have the same names as in the partitioned path, but starting with _.\nExamples: SET use_hive_partitioning = 1;SELECT * from file('data/path/date=*/country=*/code=*/*.parquet') where _date > '2020-01-01' and _country = 'Netherlands' and _code = 42;\nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/file"], "Title": ["Settings"], "Feature": ["Settings"], "Description": ["Settings", "engine_file_empty_if_not_exists - allows to select empty data from a file that doesn't exist. Disabled by default.engine_file_truncate_on_insert - allows to truncate file before insert into it. Disabled by default.engine_file_allow_create_multiple_files - allows to create a new file on each insert if format has suffix. Disabled by default.engine_file_skip_empty_files - allows to skip empty files while reading. Disabled by default.storage_file_read_method - method of reading data from storage file, one of: read, pread, mmap (only for clickhouse-local). Default value: pread for clickhouse-server, mmap for clickhouse-local.", "See Also", "Virtual columnsRename files after processing"], "Examples": [], "Category": ["Table Functions"], "index": 281, "vector_txt": "281:Feature: Settings\nDescription: Settingsengine_file_empty_if_not_exists - allows to select empty data from a file that doesn't exist. Disabled by default.engine_file_truncate_on_insert - allows to truncate file before insert into it. Disabled by default.engine_file_allow_create_multiple_files - allows to create a new file on each insert if format has suffix. Disabled by default.engine_file_skip_empty_files - allows to skip empty files while reading. Disabled by default.storage_file_read_method - method of reading data from storage file, one of: read, pread, mmap (only for clickhouse-local). Default value: pread for clickhouse-server, mmap for clickhouse-local.See AlsoVirtual columnsRename files after processing\nExamples: \nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/fileCluster"], "Title": ["Globs in Path"], "Feature": ["Globs in Path"], "Description": ["Globs in Path", "All patterns supported by File table function are supported by FileCluster.", "See Also", "File table function"], "Examples": [], "Category": ["Table Functions"], "index": 282, "vector_txt": "282:Feature: Globs in Path\nDescription: Globs in PathAll patterns supported by File table function are supported by FileCluster.See AlsoFile table function\nExamples: \nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/format"], "Title": ["format"], "Feature": ["format(format_name, [structure], data)"], "Description": ["format", "Parses data from arguments according to specified input format. If structure argument is not specified, it's extracted from the data.", "Syntax", "format(format_name, [structure], data)", "Parameters", "format_name \u2014 The format of the data.structure - Structure of the table. Optional. Format 'column1_name column1_type, column2_name column2_type, ...'.data \u2014 String literal or constant expression that returns a string containing data in specified format", "Returned value", "A table with data parsed from data argument according to specified format and specified or extracted structure."], "Examples": ["SELECT * FROM format(JSONEachRow,$${\"a\": \"Hello\", \"b\": 111}{\"a\": \"World\", \"b\": 123}{\"a\": \"Hello\", \"b\": 112}{\"a\": \"World\", \"b\": 124}$$)", "DESC format(JSONEachRow,$${\"a\": \"Hello\", \"b\": 111}{\"a\": \"World\", \"b\": 123}{\"a\": \"Hello\", \"b\": 112}{\"a\": \"World\", \"b\": 124}$$)", "SELECT * FROM format(JSONEachRow, 'a String, b UInt32',$${\"a\": \"Hello\", \"b\": 111}{\"a\": \"World\", \"b\": 123}{\"a\": \"Hello\", \"b\": 112}{\"a\": \"World\", \"b\": 124}$$)"], "Category": ["Table Functions"], "index": 283, "vector_txt": "283:Feature: format(format_name, [structure], data)\nDescription: formatParses data from arguments according to specified input format. If structure argument is not specified, it's extracted from the data.Syntaxformat(format_name, [structure], data)Parametersformat_name \u2014 The format of the data.structure - Structure of the table. Optional. Format 'column1_name column1_type, column2_name column2_type, ...'.data \u2014 String literal or constant expression that returns a string containing data in specified formatReturned valueA table with data parsed from data argument according to specified format and specified or extracted structure.\nExamples: SELECT * FROM format(JSONEachRow,$${\"a\": \"Hello\", \"b\": 111}{\"a\": \"World\", \"b\": 123}{\"a\": \"Hello\", \"b\": 112}{\"a\": \"World\", \"b\": 124}$$)DESC format(JSONEachRow,$${\"a\": \"Hello\", \"b\": 111}{\"a\": \"World\", \"b\": 123}{\"a\": \"Hello\", \"b\": 112}{\"a\": \"World\", \"b\": 124}$$)SELECT * FROM format(JSONEachRow, 'a String, b UInt32',$${\"a\": \"Hello\", \"b\": 111}{\"a\": \"World\", \"b\": 123}{\"a\": \"Hello\", \"b\": 112}{\"a\": \"World\", \"b\": 124}$$)\nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/gcs"], "Title": ["Usage"], "Feature": ["Usage"], "Description": ["Usage", "Suppose that we have several files with following URIs on GCS:", "'https://storage.googleapis.com/my-test-bucket-768/some_prefix/some_file_1.csv''https://storage.googleapis.com/my-test-bucket-768/some_prefix/some_file_2.csv''https://storage.googleapis.com/my-test-bucket-768/some_prefix/some_file_3.csv''https://storage.googleapis.com/my-test-bucket-768/some_prefix/some_file_4.csv''https://storage.googleapis.com/my-test-bucket-768/another_prefix/some_file_1.csv''https://storage.googleapis.com/my-test-bucket-768/another_prefix/some_file_2.csv''https://storage.googleapis.com/my-test-bucket-768/another_prefix/some_file_3.csv''https://storage.googleapis.com/my-test-bucket-768/another_prefix/some_file_4.csv'", "Count the amount of rows in files ending with numbers from 1 to 3:", "SELECT count(*)FROM gcs('https://storage.googleapis.com/my-test-bucket-768/{some,another}_prefix/some_file_{1..3}.csv', 'CSV', 'name String, value UInt32')", "\u250c\u2500count()\u2500\u2510\u2502      18 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "Count the total amount of rows in all files in these two directories:", "SELECT count(*)FROM gcs('https://storage.googleapis.com/my-test-bucket-768/{some,another}_prefix/*', 'CSV', 'name String, value UInt32')", "\u250c\u2500count()\u2500\u2510\u2502      24 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "DangerIf your listing of files contains number ranges with leading zeros, use the construction with braces for each digit separately or use ?.", "Count the total amount of rows in files named file-000.csv, file-001.csv, ... , file-999.csv:", "SELECT count(*)FROM gcs('https://storage.googleapis.com/my-test-bucket-768/big_prefix/file-{000..999}.csv', 'CSV', 'name String, value UInt32');", "\u250c\u2500count()\u2500\u2510\u2502      12 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "Insert data into file test-data.csv.gz:", "INSERT INTO FUNCTION gcs('https://storage.googleapis.com/my-test-bucket-768/test-data.csv.gz', 'CSV', 'name String, value UInt32', 'gzip')VALUES ('test-data', 1), ('test-data-2', 2);", "Insert data into file test-data.csv.gz from existing table:", "INSERT INTO FUNCTION gcs('https://storage.googleapis.com/my-test-bucket-768/test-data.csv.gz', 'CSV', 'name String, value UInt32', 'gzip')SELECT name, value FROM existing_table;", "Glob ** can be used for recursive directory traversal. Consider the below example, it will fetch all files from my-test-bucket-768 directory recursively:", "SELECT * FROM gcs('https://storage.googleapis.com/my-test-bucket-768/**', 'CSV', 'name String, value UInt32', 'gzip');", "The below get data from all test-data.csv.gz files from any folder inside my-test-bucket directory recursively:", "SELECT * FROM gcs('https://storage.googleapis.com/my-test-bucket-768/**/test-data.csv.gz', 'CSV', 'name String, value UInt32', 'gzip');", "For production use cases it is recommended to use named collections. Here is the example:", "CREATE NAMED COLLECTION creds AS        access_key_id = '***',        secret_access_key = '***';SELECT count(*)FROM gcs(creds, url='https://s3-object-url.csv')"], "Examples": ["SELECT count(*)FROM gcs('https://storage.googleapis.com/my-test-bucket-768/{some,another}_prefix/some_file_{1..3}.csv', 'CSV', 'name String, value UInt32')", "SELECT count(*)FROM gcs('https://storage.googleapis.com/my-test-bucket-768/{some,another}_prefix/*', 'CSV', 'name String, value UInt32')", "SELECT count(*)FROM gcs('https://storage.googleapis.com/my-test-bucket-768/big_prefix/file-{000..999}.csv', 'CSV', 'name String, value UInt32');", "INSERT INTO FUNCTION gcs('https://storage.googleapis.com/my-test-bucket-768/test-data.csv.gz', 'CSV', 'name String, value UInt32', 'gzip')VALUES ('test-data', 1), ('test-data-2', 2);", "INSERT INTO FUNCTION gcs('https://storage.googleapis.com/my-test-bucket-768/test-data.csv.gz', 'CSV', 'name String, value UInt32', 'gzip')SELECT name, value FROM existing_table;", "SELECT * FROM gcs('https://storage.googleapis.com/my-test-bucket-768/**', 'CSV', 'name String, value UInt32', 'gzip');", "SELECT * FROM gcs('https://storage.googleapis.com/my-test-bucket-768/**/test-data.csv.gz', 'CSV', 'name String, value UInt32', 'gzip');", "CREATE NAMED COLLECTION creds AS        access_key_id = '***',        secret_access_key = '***';SELECT count(*)FROM gcs(creds, url='https://s3-object-url.csv')"], "Category": ["Table Functions"], "index": 284, "vector_txt": "284:Feature: Usage\nDescription: UsageSuppose that we have several files with following URIs on GCS:'https://storage.googleapis.com/my-test-bucket-768/some_prefix/some_file_1.csv''https://storage.googleapis.com/my-test-bucket-768/some_prefix/some_file_2.csv''https://storage.googleapis.com/my-test-bucket-768/some_prefix/some_file_3.csv''https://storage.googleapis.com/my-test-bucket-768/some_prefix/some_file_4.csv''https://storage.googleapis.com/my-test-bucket-768/another_prefix/some_file_1.csv''https://storage.googleapis.com/my-test-bucket-768/another_prefix/some_file_2.csv''https://storage.googleapis.com/my-test-bucket-768/another_prefix/some_file_3.csv''https://storage.googleapis.com/my-test-bucket-768/another_prefix/some_file_4.csv'Count the amount of rows in files ending with numbers from 1 to 3:SELECT count(*)FROM gcs('https://storage.googleapis.com/my-test-bucket-768/{some,another}_prefix/some_file_{1..3}.csv', 'CSV', 'name String, value UInt32')\u250c\u2500count()\u2500\u2510\u2502      18 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518Count the total amount of rows in all files in these two directories:SELECT count(*)FROM gcs('https://storage.googleapis.com/my-test-bucket-768/{some,another}_prefix/*', 'CSV', 'name String, value UInt32')\u250c\u2500count()\u2500\u2510\u2502      24 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518DangerIf your listing of files contains number ranges with leading zeros, use the construction with braces for each digit separately or use ?.Count the total amount of rows in files named file-000.csv, file-001.csv, ... , file-999.csv:SELECT count(*)FROM gcs('https://storage.googleapis.com/my-test-bucket-768/big_prefix/file-{000..999}.csv', 'CSV', 'name String, value UInt32');\u250c\u2500count()\u2500\u2510\u2502      12 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518Insert data into file test-data.csv.gz:INSERT INTO FUNCTION gcs('https://storage.googleapis.com/my-test-bucket-768/test-data.csv.gz', 'CSV', 'name String, value UInt32', 'gzip')VALUES ('test-data', 1), ('test-data-2', 2);Insert data into file test-data.csv.gz from existing table:INSERT INTO FUNCTION gcs('https://storage.googleapis.com/my-test-bucket-768/test-data.csv.gz', 'CSV', 'name String, value UInt32', 'gzip')SELECT name, value FROM existing_table;Glob ** can be used for recursive directory traversal. Consider the below example, it will fetch all files from my-test-bucket-768 directory recursively:SELECT * FROM gcs('https://storage.googleapis.com/my-test-bucket-768/**', 'CSV', 'name String, value UInt32', 'gzip');The below get data from all test-data.csv.gz files from any folder inside my-test-bucket directory recursively:SELECT * FROM gcs('https://storage.googleapis.com/my-test-bucket-768/**/test-data.csv.gz', 'CSV', 'name String, value UInt32', 'gzip');For production use cases it is recommended to use named collections. Here is the example:CREATE NAMED COLLECTION creds AS        access_key_id = '***',        secret_access_key = '***';SELECT count(*)FROM gcs(creds, url='https://s3-object-url.csv')\nExamples: SELECT count(*)FROM gcs('https://storage.googleapis.com/my-test-bucket-768/{some,another}_prefix/some_file_{1..3}.csv', 'CSV', 'name String, value UInt32')SELECT count(*)FROM gcs('https://storage.googleapis.com/my-test-bucket-768/{some,another}_prefix/*', 'CSV', 'name String, value UInt32')SELECT count(*)FROM gcs('https://storage.googleapis.com/my-test-bucket-768/big_prefix/file-{000..999}.csv', 'CSV', 'name String, value UInt32');INSERT INTO FUNCTION gcs('https://storage.googleapis.com/my-test-bucket-768/test-data.csv.gz', 'CSV', 'name String, value UInt32', 'gzip')VALUES ('test-data', 1), ('test-data-2', 2);INSERT INTO FUNCTION gcs('https://storage.googleapis.com/my-test-bucket-768/test-data.csv.gz', 'CSV', 'name String, value UInt32', 'gzip')SELECT name, value FROM existing_table;SELECT * FROM gcs('https://storage.googleapis.com/my-test-bucket-768/**', 'CSV', 'name String, value UInt32', 'gzip');SELECT * FROM gcs('https://storage.googleapis.com/my-test-bucket-768/**/test-data.csv.gz', 'CSV', 'name String, value UInt32', 'gzip');CREATE NAMED COLLECTION creds AS        access_key_id = '***',        secret_access_key = '***';SELECT count(*)FROM gcs(creds, url='https://s3-object-url.csv')\nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/gcs"], "Title": ["Partitioned Write"], "Feature": ["Partitioned Write"], "Description": ["Partitioned Write", "If you specify PARTITION BY expression when inserting data into GCS table, a separate file is created for each partition value. Splitting the data into separate files helps to improve reading operations efficiency."], "Examples": ["INSERT INTO TABLE FUNCTION    gcs('http://bucket.amazonaws.com/my_bucket/file_{_partition_id}.csv', 'CSV', 'a String, b UInt32, c UInt32')    PARTITION BY a VALUES ('x', 2, 3), ('x', 4, 5), ('y', 11, 12), ('y', 13, 14), ('z', 21, 22), ('z', 23, 24);", "INSERT INTO TABLE FUNCTION    gcs('http://bucket.amazonaws.com/my_bucket_{_partition_id}/file.csv', 'CSV', 'a UInt32, b UInt32, c UInt32')    PARTITION BY a VALUES (1, 2, 3), (1, 4, 5), (10, 11, 12), (10, 13, 14), (20, 21, 22), (20, 23, 24);"], "Category": ["Table Functions"], "index": 285, "vector_txt": "285:Feature: Partitioned Write\nDescription: Partitioned WriteIf you specify PARTITION BY expression when inserting data into GCS table, a separate file is created for each partition value. Splitting the data into separate files helps to improve reading operations efficiency.\nExamples: INSERT INTO TABLE FUNCTION    gcs('http://bucket.amazonaws.com/my_bucket/file_{_partition_id}.csv', 'CSV', 'a String, b UInt32, c UInt32')    PARTITION BY a VALUES ('x', 2, 3), ('x', 4, 5), ('y', 11, 12), ('y', 13, 14), ('z', 21, 22), ('z', 23, 24);INSERT INTO TABLE FUNCTION    gcs('http://bucket.amazonaws.com/my_bucket_{_partition_id}/file.csv', 'CSV', 'a UInt32, b UInt32, c UInt32')    PARTITION BY a VALUES (1, 2, 3), (1, 4, 5), (10, 11, 12), (10, 13, 14), (20, 21, 22), (20, 23, 24);\nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/fuzzJSON"], "Title": ["Usage Example"], "Feature": ["Usage Example"], "Description": ["Usage Example", "CREATE NAMED COLLECTION json_fuzzer AS json_str='{}';SELECT * FROM fuzzJSON(json_fuzzer) LIMIT 3;", "{\"52Xz2Zd4vKNcuP2\":true}{\"UPbOhOQAdPKIg91\":3405264103600403024}{\"X0QUWu8yT\":[]}", "SELECT * FROM fuzzJSON(json_fuzzer, json_str='{\"name\" : \"value\"}', random_seed=1234) LIMIT 3;", "{\"key\":\"value\", \"mxPG0h1R5\":\"L-YQLv@9hcZbOIGrAn10%GA\"}{\"BRE3\":true}{\"key\":\"value\", \"SWzJdEJZ04nrpSfy\":[{\"3Q23y\":[]}]}", "SELECT * FROM fuzzJSON(json_fuzzer, json_str='{\"students\" : [\"Alice\", \"Bob\"]}', reuse_output=true) LIMIT 3;", "{\"students\":[\"Alice\", \"Bob\"], \"nwALnRMc4pyKD9Krv\":[]}{\"students\":[\"1rNY5ZNs0wU&82t_P\", \"Bob\"], \"wLNRGzwDiMKdw\":[{}]}{\"xeEk\":[\"1rNY5ZNs0wU&82t_P\", \"Bob\"], \"wLNRGzwDiMKdw\":[{}, {}]}", "SELECT * FROM fuzzJSON(json_fuzzer, json_str='{\"students\" : [\"Alice\", \"Bob\"]}', max_output_length=512) LIMIT 3;", "{\"students\":[\"Alice\", \"Bob\"], \"BREhhXj5\":true}{\"NyEsSWzJdeJZ04s\":[\"Alice\", 5737924650575683711, 5346334167565345826], \"BjVO2X9L\":true}{\"NyEsSWzJdeJZ04s\":[\"Alice\", 5737924650575683711, 5346334167565345826], \"BjVO2X9L\":true, \"k1SXzbSIz\":[{}]}", "SELECT * FROM fuzzJSON('{\"id\":1}', 1234) LIMIT 3;", "{\"id\":1, \"mxPG0h1R5\":\"L-YQLv@9hcZbOIGrAn10%GA\"}{\"BRjE\":16137826149911306846}{\"XjKE\":15076727133550123563}", "SELECT * FROM fuzzJSON(json_nc, json_str='{\"name\" : \"FuzzJSON\"}', random_seed=1337, malform_output=true) LIMIT 3;", "U\"name\":\"FuzzJSON*\"SpByjZKtr2VAyHCO\"falseh{\"name\"keFuzzJSON, \"g6vVO7TCIk\":jTt^{\"DBhz\":YFuzzJSON5}"], "Examples": ["CREATE NAMED COLLECTION json_fuzzer AS json_str='{}';SELECT * FROM fuzzJSON(json_fuzzer) LIMIT 3;", "SELECT * FROM fuzzJSON(json_fuzzer, json_str='{\"name\" : \"value\"}', random_seed=1234) LIMIT 3;", "SELECT * FROM fuzzJSON(json_fuzzer, json_str='{\"students\" : [\"Alice\", \"Bob\"]}', reuse_output=true) LIMIT 3;", "SELECT * FROM fuzzJSON(json_fuzzer, json_str='{\"students\" : [\"Alice\", \"Bob\"]}', max_output_length=512) LIMIT 3;", "SELECT * FROM fuzzJSON('{\"id\":1}', 1234) LIMIT 3;", "SELECT * FROM fuzzJSON(json_nc, json_str='{\"name\" : \"FuzzJSON\"}', random_seed=1337, malform_output=true) LIMIT 3;"], "Category": ["Table Functions"], "index": 286, "vector_txt": "286:Feature: Usage Example\nDescription: Usage ExampleCREATE NAMED COLLECTION json_fuzzer AS json_str='{}';SELECT * FROM fuzzJSON(json_fuzzer) LIMIT 3;{\"52Xz2Zd4vKNcuP2\":true}{\"UPbOhOQAdPKIg91\":3405264103600403024}{\"X0QUWu8yT\":[]}SELECT * FROM fuzzJSON(json_fuzzer, json_str='{\"name\" : \"value\"}', random_seed=1234) LIMIT 3;{\"key\":\"value\", \"mxPG0h1R5\":\"L-YQLv@9hcZbOIGrAn10%GA\"}{\"BRE3\":true}{\"key\":\"value\", \"SWzJdEJZ04nrpSfy\":[{\"3Q23y\":[]}]}SELECT * FROM fuzzJSON(json_fuzzer, json_str='{\"students\" : [\"Alice\", \"Bob\"]}', reuse_output=true) LIMIT 3;{\"students\":[\"Alice\", \"Bob\"], \"nwALnRMc4pyKD9Krv\":[]}{\"students\":[\"1rNY5ZNs0wU&82t_P\", \"Bob\"], \"wLNRGzwDiMKdw\":[{}]}{\"xeEk\":[\"1rNY5ZNs0wU&82t_P\", \"Bob\"], \"wLNRGzwDiMKdw\":[{}, {}]}SELECT * FROM fuzzJSON(json_fuzzer, json_str='{\"students\" : [\"Alice\", \"Bob\"]}', max_output_length=512) LIMIT 3;{\"students\":[\"Alice\", \"Bob\"], \"BREhhXj5\":true}{\"NyEsSWzJdeJZ04s\":[\"Alice\", 5737924650575683711, 5346334167565345826], \"BjVO2X9L\":true}{\"NyEsSWzJdeJZ04s\":[\"Alice\", 5737924650575683711, 5346334167565345826], \"BjVO2X9L\":true, \"k1SXzbSIz\":[{}]}SELECT * FROM fuzzJSON('{\"id\":1}', 1234) LIMIT 3;{\"id\":1, \"mxPG0h1R5\":\"L-YQLv@9hcZbOIGrAn10%GA\"}{\"BRjE\":16137826149911306846}{\"XjKE\":15076727133550123563}SELECT * FROM fuzzJSON(json_nc, json_str='{\"name\" : \"FuzzJSON\"}', random_seed=1337, malform_output=true) LIMIT 3;U\"name\":\"FuzzJSON*\"SpByjZKtr2VAyHCO\"falseh{\"name\"keFuzzJSON, \"g6vVO7TCIk\":jTt^{\"DBhz\":YFuzzJSON5}\nExamples: CREATE NAMED COLLECTION json_fuzzer AS json_str='{}';SELECT * FROM fuzzJSON(json_fuzzer) LIMIT 3;SELECT * FROM fuzzJSON(json_fuzzer, json_str='{\"name\" : \"value\"}', random_seed=1234) LIMIT 3;SELECT * FROM fuzzJSON(json_fuzzer, json_str='{\"students\" : [\"Alice\", \"Bob\"]}', reuse_output=true) LIMIT 3;SELECT * FROM fuzzJSON(json_fuzzer, json_str='{\"students\" : [\"Alice\", \"Bob\"]}', max_output_length=512) LIMIT 3;SELECT * FROM fuzzJSON('{\"id\":1}', 1234) LIMIT 3;SELECT * FROM fuzzJSON(json_nc, json_str='{\"name\" : \"FuzzJSON\"}', random_seed=1337, malform_output=true) LIMIT 3;\nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/fuzzQuery"], "Title": ["Usage Example"], "Feature": ["Usage Example"], "Description": ["Usage Example", "SELECT * FROM fuzzQuery('SELECT materialize(\\'a\\' AS key) GROUP BY key') LIMIT 2;", "   \u250c\u2500query\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25101. \u2502 SELECT 'a' AS key GROUP BY key                                 \u25022. \u2502 EXPLAIN PIPELINE compact = true SELECT 'a' AS key GROUP BY key \u2502   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Examples": ["SELECT * FROM fuzzQuery('SELECT materialize(\\'a\\' AS key) GROUP BY key') LIMIT 2;"], "Category": ["Table Functions"], "index": 287, "vector_txt": "287:Feature: Usage Example\nDescription: Usage ExampleSELECT * FROM fuzzQuery('SELECT materialize(\\'a\\' AS key) GROUP BY key') LIMIT 2;   \u250c\u2500query\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25101. \u2502 SELECT 'a' AS key GROUP BY key                                 \u25022. \u2502 EXPLAIN PIPELINE compact = true SELECT 'a' AS key GROUP BY key \u2502   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nExamples: SELECT * FROM fuzzQuery('SELECT materialize(\\'a\\' AS key) GROUP BY key') LIMIT 2;\nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bit-functions"], "Title": ["byteSlice(s, offset, length)"], "Feature": ["byteSlice(s, offset, length)"], "Description": ["byteSlice(s, offset, length)", "See function substring."], "Examples": [], "Category": ["Bit Functions"], "index": 288, "vector_txt": "288:Feature: byteSlice(s, offset, length)\nDescription: byteSlice(s, offset, length)See function substring.\nExamples: \nCategory: Bit Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/generate"], "Title": ["Usage Example"], "Feature": ["Usage Example"], "Description": ["Usage Example", "SELECT * FROM generateRandom('a Array(Int8), d Decimal32(4), c Tuple(DateTime64(3), UUID)', 1, 10, 2) LIMIT 3;", "\u250c\u2500a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500d\u2500\u252c\u2500c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 [77]     \u2502 -124167.6723 \u2502 ('2061-04-17 21:59:44.573','3f72f405-ec3e-13c8-44ca-66ef335f7835') \u2502\u2502 [32,110] \u2502 -141397.7312 \u2502 ('1979-02-09 03:43:48.526','982486d1-5a5d-a308-e525-7bd8b80ffa73') \u2502\u2502 [68]     \u2502  -67417.0770 \u2502 ('2080-03-12 14:17:31.269','110425e5-413f-10a6-05ba-fa6b3e929f15') \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "CREATE TABLE random (a Array(Int8), d Decimal32(4), c Tuple(DateTime64(3), UUID)) engine=Memory;INSERT INTO random SELECT * FROM generateRandom() LIMIT 2;SELECT * FROM random;", "\u250c\u2500a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500d\u2500\u252c\u2500c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 []                           \u2502   68091.8197 \u2502 ('2037-10-02 12:44:23.368','039ecab7-81c2-45ee-208c-844e5c6c5652') \u2502\u2502 [8,-83,0,-22,65,9,-30,28,64] \u2502 -186233.4909 \u2502 ('2062-01-11 00:06:04.124','69563ea1-5ad1-f870-16d8-67061da0df25') \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "In combination with generateRandomStructure:", "SELECT * FROM generateRandom(generateRandomStructure(4, 101), 101) LIMIT 3;", "\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500c1\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500c2\u2500\u252c\u2500c3\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 1996-04-15 06:40:05 \u2502 33954608387.2844801 \u2502 ['232.78.216.176','9.244.59.211','211.21.80.152','44.49.94.109','165.77.195.182','68.167.134.239','212.13.24.185','1.197.255.35','192.55.131.232'] \u2502 45d9:2b52:ab6:1c59:185b:515:c5b6:b781   \u2502\u2502 2063-01-13 01:22:27 \u2502 36155064970.9514454 \u2502 ['176.140.188.101']                                                                                                                                \u2502 c65a:2626:41df:8dee:ec99:f68d:c6dd:6b30 \u2502\u2502 2090-02-28 14:50:56 \u2502  3864327452.3901373 \u2502 ['155.114.30.32']                                                                                                                                  \u2502 57e9:5229:93ab:fbf3:aae7:e0e4:d1eb:86b  \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "With missing structure argument (in this case the structure is random):", "SELECT * FROM generateRandom() LIMIT 3;", "\u250c\u2500\u2500\u2500c1\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500c2\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500c3\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500c4\u2500\u252c\u2500c5\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 -128 \u2502  317300854 \u2502 2030-08-16 08:22:20.65 \u2502 1994-08-16 12:08:56.745 \u2502 R0qgiC46 \u2502\u2502   40 \u2502 -744906827 \u2502 2059-04-16 06:31:36.98 \u2502 1975-07-16 16:28:43.893 \u2502 PuH4M*MZ \u2502\u2502  -55 \u2502  698652232 \u2502 2052-08-04 20:13:39.68 \u2502 1998-09-20 03:48:29.279 \u2502          \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "With random seed both for random structure and random data:", "SELECT * FROM generateRandom(11) LIMIT 3;", "\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500c1\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500c2\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500c3\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500c4\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500c5\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500c6\u2500\u252c\u2500c7\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500c8\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500c9\u2500\u2510\u2502  -77422512305044606600216318673365695785 \u2502   636812099959807642229.503817849012019401335326013846687285151335352272727523 \u2502 -34944452809785978175157829109276115789694605299387223845886143311647505037529 \u2502  544473976 \u2502 111220388331710079615337037674887514156741572807049614590010583571763691328563 \u2502       22016.22623506465 \u2502 {'2052-01-31 20:25:33':4306400876908509081044405485378623663,'1993-04-16 15:58:49':164367354809499452887861212674772770279,'2101-08-19 03:07:18':-60676948945963385477105077735447194811,'2039-12-22 22:31:39':-59227773536703059515222628111999932330} \u2502 a7b2:8f58:4d07:6707:4189:80cf:92f5:902d \u2502 1950-07-14 \u2502\u2502 -159940486888657488786004075627859832441 \u2502  629206527868163085099.8195700356331771569105231840157308480121506729741348442 \u2502 -53203761250367440823323469081755775164053964440214841464405368882783634063735 \u2502 2187136525 \u2502  94881662451116595672491944222189810087991610568040618106057495823910493624275 \u2502 1.3095786748458954e-104 \u2502 {}                                                                                                                                                                                                                                                      \u2502 a051:e3da:2e0a:c69:7835:aed6:e8b:3817   \u2502 1943-03-25 \u2502\u2502   -5239084224358020595591895205940528518 \u2502 -529937657954363597180.1709207212648004850138812370209091520162977548101577846 \u2502  47490343304582536176125359129223180987770215457970451211489086575421345731671 \u2502 1637451978 \u2502 101899445785010192893461828129714741298630410942962837910400961787305271699002 \u2502  2.4344456058391296e223 \u2502 {'2013-12-22 17:42:43':80271108282641375975566414544777036006,'2041-03-08 10:28:17':169706054082247533128707458270535852845,'1986-08-31 23:07:38':-54371542820364299444195390357730624136,'2094-04-23 21:26:50':7944954483303909347454597499139023465}  \u2502 1293:a726:e899:9bfc:8c6f:2aa1:22c9:b635 \u2502 1924-11-20 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "Note: generateRandom(generateRandomStructure(), [random seed], max_string_length, max_array_length) with large enough max_array_length can generate really huge output due to possible big nesting depth (up to 16) of complex types (Array, Tuple, Map, Nested)."], "Examples": ["SELECT * FROM generateRandom('a Array(Int8), d Decimal32(4), c Tuple(DateTime64(3), UUID)', 1, 10, 2) LIMIT 3;", "CREATE TABLE random (a Array(Int8), d Decimal32(4), c Tuple(DateTime64(3), UUID)) engine=Memory;INSERT INTO random SELECT * FROM generateRandom() LIMIT 2;SELECT * FROM random;", "SELECT * FROM generateRandom(generateRandomStructure(4, 101), 101) LIMIT 3;", "SELECT * FROM generateRandom() LIMIT 3;", "SELECT * FROM generateRandom(11) LIMIT 3;"], "Category": ["Table Functions"], "index": 289, "vector_txt": "289:Feature: Usage Example\nDescription: Usage ExampleSELECT * FROM generateRandom('a Array(Int8), d Decimal32(4), c Tuple(DateTime64(3), UUID)', 1, 10, 2) LIMIT 3;\u250c\u2500a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500d\u2500\u252c\u2500c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 [77]     \u2502 -124167.6723 \u2502 ('2061-04-17 21:59:44.573','3f72f405-ec3e-13c8-44ca-66ef335f7835') \u2502\u2502 [32,110] \u2502 -141397.7312 \u2502 ('1979-02-09 03:43:48.526','982486d1-5a5d-a308-e525-7bd8b80ffa73') \u2502\u2502 [68]     \u2502  -67417.0770 \u2502 ('2080-03-12 14:17:31.269','110425e5-413f-10a6-05ba-fa6b3e929f15') \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518CREATE TABLE random (a Array(Int8), d Decimal32(4), c Tuple(DateTime64(3), UUID)) engine=Memory;INSERT INTO random SELECT * FROM generateRandom() LIMIT 2;SELECT * FROM random;\u250c\u2500a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500d\u2500\u252c\u2500c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 []                           \u2502   68091.8197 \u2502 ('2037-10-02 12:44:23.368','039ecab7-81c2-45ee-208c-844e5c6c5652') \u2502\u2502 [8,-83,0,-22,65,9,-30,28,64] \u2502 -186233.4909 \u2502 ('2062-01-11 00:06:04.124','69563ea1-5ad1-f870-16d8-67061da0df25') \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518In combination with generateRandomStructure:SELECT * FROM generateRandom(generateRandomStructure(4, 101), 101) LIMIT 3;\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500c1\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500c2\u2500\u252c\u2500c3\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 1996-04-15 06:40:05 \u2502 33954608387.2844801 \u2502 ['232.78.216.176','9.244.59.211','211.21.80.152','44.49.94.109','165.77.195.182','68.167.134.239','212.13.24.185','1.197.255.35','192.55.131.232'] \u2502 45d9:2b52:ab6:1c59:185b:515:c5b6:b781   \u2502\u2502 2063-01-13 01:22:27 \u2502 36155064970.9514454 \u2502 ['176.140.188.101']                                                                                                                                \u2502 c65a:2626:41df:8dee:ec99:f68d:c6dd:6b30 \u2502\u2502 2090-02-28 14:50:56 \u2502  3864327452.3901373 \u2502 ['155.114.30.32']                                                                                                                                  \u2502 57e9:5229:93ab:fbf3:aae7:e0e4:d1eb:86b  \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518With missing structure argument (in this case the structure is random):SELECT * FROM generateRandom() LIMIT 3;\u250c\u2500\u2500\u2500c1\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500c2\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500c3\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500c4\u2500\u252c\u2500c5\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 -128 \u2502  317300854 \u2502 2030-08-16 08:22:20.65 \u2502 1994-08-16 12:08:56.745 \u2502 R0qgiC46 \u2502\u2502   40 \u2502 -744906827 \u2502 2059-04-16 06:31:36.98 \u2502 1975-07-16 16:28:43.893 \u2502 PuH4M*MZ \u2502\u2502  -55 \u2502  698652232 \u2502 2052-08-04 20:13:39.68 \u2502 1998-09-20 03:48:29.279 \u2502          \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518With random seed both for random structure and random data:SELECT * FROM generateRandom(11) LIMIT 3;\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500c1\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500c2\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500c3\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500c4\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500c5\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500c6\u2500\u252c\u2500c7\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500c8\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500c9\u2500\u2510\u2502  -77422512305044606600216318673365695785 \u2502   636812099959807642229.503817849012019401335326013846687285151335352272727523 \u2502 -34944452809785978175157829109276115789694605299387223845886143311647505037529 \u2502  544473976 \u2502 111220388331710079615337037674887514156741572807049614590010583571763691328563 \u2502       22016.22623506465 \u2502 {'2052-01-31 20:25:33':4306400876908509081044405485378623663,'1993-04-16 15:58:49':164367354809499452887861212674772770279,'2101-08-19 03:07:18':-60676948945963385477105077735447194811,'2039-12-22 22:31:39':-59227773536703059515222628111999932330} \u2502 a7b2:8f58:4d07:6707:4189:80cf:92f5:902d \u2502 1950-07-14 \u2502\u2502 -159940486888657488786004075627859832441 \u2502  629206527868163085099.8195700356331771569105231840157308480121506729741348442 \u2502 -53203761250367440823323469081755775164053964440214841464405368882783634063735 \u2502 2187136525 \u2502  94881662451116595672491944222189810087991610568040618106057495823910493624275 \u2502 1.3095786748458954e-104 \u2502 {}                                                                                                                                                                                                                                                      \u2502 a051:e3da:2e0a:c69:7835:aed6:e8b:3817   \u2502 1943-03-25 \u2502\u2502   -5239084224358020595591895205940528518 \u2502 -529937657954363597180.1709207212648004850138812370209091520162977548101577846 \u2502  47490343304582536176125359129223180987770215457970451211489086575421345731671 \u2502 1637451978 \u2502 101899445785010192893461828129714741298630410942962837910400961787305271699002 \u2502  2.4344456058391296e223 \u2502 {'2013-12-22 17:42:43':80271108282641375975566414544777036006,'2041-03-08 10:28:17':169706054082247533128707458270535852845,'1986-08-31 23:07:38':-54371542820364299444195390357730624136,'2094-04-23 21:26:50':7944954483303909347454597499139023465}  \u2502 1293:a726:e899:9bfc:8c6f:2aa1:22c9:b635 \u2502 1924-11-20 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518Note: generateRandom(generateRandomStructure(), [random seed], max_string_length, max_array_length) with large enough max_array_length can generate really huge output due to possible big nesting depth (up to 16) of complex types (Array, Tuple, Map, Nested).\nExamples: SELECT * FROM generateRandom('a Array(Int8), d Decimal32(4), c Tuple(DateTime64(3), UUID)', 1, 10, 2) LIMIT 3;CREATE TABLE random (a Array(Int8), d Decimal32(4), c Tuple(DateTime64(3), UUID)) engine=Memory;INSERT INTO random SELECT * FROM generateRandom() LIMIT 2;SELECT * FROM random;SELECT * FROM generateRandom(generateRandomStructure(4, 101), 101) LIMIT 3;SELECT * FROM generateRandom() LIMIT 3;SELECT * FROM generateRandom(11) LIMIT 3;\nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/generate"], "Title": ["Related content"], "Feature": ["Related content"], "Description": ["Related content", "Blog: Generating random data in ClickHouse"], "Examples": [], "Category": ["Table Functions"], "index": 290, "vector_txt": "290:Feature: Related content\nDescription: Related contentBlog: Generating random data in ClickHouse\nExamples: \nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/mergeTreeIndex"], "Title": ["Usage Example"], "Feature": ["Usage Example"], "Description": ["Usage Example", "CREATE TABLE test_table(    `id` UInt64,    `n` UInt64,    `arr` Array(UInt64))ENGINE = MergeTreeORDER BY idSETTINGS index_granularity = 3, min_bytes_for_wide_part = 0, min_rows_for_wide_part = 8;INSERT INTO test_table SELECT number, number, range(number % 5) FROM numbers(5);INSERT INTO test_table SELECT number, number, range(number % 5) FROM numbers(10, 10);", "SELECT * FROM mergeTreeIndex(currentDatabase(), test_table, with_marks = true);", "\u250c\u2500part_name\u2500\u252c\u2500mark_number\u2500\u252c\u2500rows_in_granule\u2500\u252c\u2500id\u2500\u252c\u2500id.mark\u2500\u252c\u2500n.mark\u2500\u2500\u252c\u2500arr.size0.mark\u2500\u252c\u2500arr.mark\u2500\u2510\u2502 all_1_1_0 \u2502           0 \u2502               3 \u2502  0 \u2502 (0,0)   \u2502 (42,0)  \u2502 (NULL,NULL)    \u2502 (84,0)   \u2502\u2502 all_1_1_0 \u2502           1 \u2502               2 \u2502  3 \u2502 (133,0) \u2502 (172,0) \u2502 (NULL,NULL)    \u2502 (211,0)  \u2502\u2502 all_1_1_0 \u2502           2 \u2502               0 \u2502  4 \u2502 (271,0) \u2502 (271,0) \u2502 (NULL,NULL)    \u2502 (271,0)  \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u250c\u2500part_name\u2500\u252c\u2500mark_number\u2500\u252c\u2500rows_in_granule\u2500\u252c\u2500id\u2500\u252c\u2500id.mark\u2500\u252c\u2500n.mark\u2500\u252c\u2500arr.size0.mark\u2500\u252c\u2500arr.mark\u2500\u2510\u2502 all_2_2_0 \u2502           0 \u2502               3 \u2502 10 \u2502 (0,0)   \u2502 (0,0)  \u2502 (0,0)          \u2502 (0,0)    \u2502\u2502 all_2_2_0 \u2502           1 \u2502               3 \u2502 13 \u2502 (0,24)  \u2502 (0,24) \u2502 (0,24)         \u2502 (0,24)   \u2502\u2502 all_2_2_0 \u2502           2 \u2502               3 \u2502 16 \u2502 (0,48)  \u2502 (0,48) \u2502 (0,48)         \u2502 (0,80)   \u2502\u2502 all_2_2_0 \u2502           3 \u2502               1 \u2502 19 \u2502 (0,72)  \u2502 (0,72) \u2502 (0,72)         \u2502 (0,128)  \u2502\u2502 all_2_2_0 \u2502           4 \u2502               0 \u2502 19 \u2502 (0,80)  \u2502 (0,80) \u2502 (0,80)         \u2502 (0,160)  \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "DESCRIBE mergeTreeIndex(currentDatabase(), test_table, with_marks = true) SETTINGS describe_compact_output = 1;", "\u250c\u2500name\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500type\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 part_name       \u2502 String                                                                                           \u2502\u2502 mark_number     \u2502 UInt64                                                                                           \u2502\u2502 rows_in_granule \u2502 UInt64                                                                                           \u2502\u2502 id              \u2502 UInt64                                                                                           \u2502\u2502 id.mark         \u2502 Tuple(offset_in_compressed_file Nullable(UInt64), offset_in_decompressed_block Nullable(UInt64)) \u2502\u2502 n.mark          \u2502 Tuple(offset_in_compressed_file Nullable(UInt64), offset_in_decompressed_block Nullable(UInt64)) \u2502\u2502 arr.size0.mark  \u2502 Tuple(offset_in_compressed_file Nullable(UInt64), offset_in_decompressed_block Nullable(UInt64)) \u2502\u2502 arr.mark        \u2502 Tuple(offset_in_compressed_file Nullable(UInt64), offset_in_decompressed_block Nullable(UInt64)) \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Examples": ["CREATE TABLE test_table(    `id` UInt64,    `n` UInt64,    `arr` Array(UInt64))ENGINE = MergeTreeORDER BY idSETTINGS index_granularity = 3, min_bytes_for_wide_part = 0, min_rows_for_wide_part = 8;INSERT INTO test_table SELECT number, number, range(number % 5) FROM numbers(5);INSERT INTO test_table SELECT number, number, range(number % 5) FROM numbers(10, 10);", "SELECT * FROM mergeTreeIndex(currentDatabase(), test_table, with_marks = true);", "DESCRIBE mergeTreeIndex(currentDatabase(), test_table, with_marks = true) SETTINGS describe_compact_output = 1;"], "Category": ["Table Functions"], "index": 291, "vector_txt": "291:Feature: Usage Example\nDescription: Usage ExampleCREATE TABLE test_table(    `id` UInt64,    `n` UInt64,    `arr` Array(UInt64))ENGINE = MergeTreeORDER BY idSETTINGS index_granularity = 3, min_bytes_for_wide_part = 0, min_rows_for_wide_part = 8;INSERT INTO test_table SELECT number, number, range(number % 5) FROM numbers(5);INSERT INTO test_table SELECT number, number, range(number % 5) FROM numbers(10, 10);SELECT * FROM mergeTreeIndex(currentDatabase(), test_table, with_marks = true);\u250c\u2500part_name\u2500\u252c\u2500mark_number\u2500\u252c\u2500rows_in_granule\u2500\u252c\u2500id\u2500\u252c\u2500id.mark\u2500\u252c\u2500n.mark\u2500\u2500\u252c\u2500arr.size0.mark\u2500\u252c\u2500arr.mark\u2500\u2510\u2502 all_1_1_0 \u2502           0 \u2502               3 \u2502  0 \u2502 (0,0)   \u2502 (42,0)  \u2502 (NULL,NULL)    \u2502 (84,0)   \u2502\u2502 all_1_1_0 \u2502           1 \u2502               2 \u2502  3 \u2502 (133,0) \u2502 (172,0) \u2502 (NULL,NULL)    \u2502 (211,0)  \u2502\u2502 all_1_1_0 \u2502           2 \u2502               0 \u2502  4 \u2502 (271,0) \u2502 (271,0) \u2502 (NULL,NULL)    \u2502 (271,0)  \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u250c\u2500part_name\u2500\u252c\u2500mark_number\u2500\u252c\u2500rows_in_granule\u2500\u252c\u2500id\u2500\u252c\u2500id.mark\u2500\u252c\u2500n.mark\u2500\u252c\u2500arr.size0.mark\u2500\u252c\u2500arr.mark\u2500\u2510\u2502 all_2_2_0 \u2502           0 \u2502               3 \u2502 10 \u2502 (0,0)   \u2502 (0,0)  \u2502 (0,0)          \u2502 (0,0)    \u2502\u2502 all_2_2_0 \u2502           1 \u2502               3 \u2502 13 \u2502 (0,24)  \u2502 (0,24) \u2502 (0,24)         \u2502 (0,24)   \u2502\u2502 all_2_2_0 \u2502           2 \u2502               3 \u2502 16 \u2502 (0,48)  \u2502 (0,48) \u2502 (0,48)         \u2502 (0,80)   \u2502\u2502 all_2_2_0 \u2502           3 \u2502               1 \u2502 19 \u2502 (0,72)  \u2502 (0,72) \u2502 (0,72)         \u2502 (0,128)  \u2502\u2502 all_2_2_0 \u2502           4 \u2502               0 \u2502 19 \u2502 (0,80)  \u2502 (0,80) \u2502 (0,80)         \u2502 (0,160)  \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518DESCRIBE mergeTreeIndex(currentDatabase(), test_table, with_marks = true) SETTINGS describe_compact_output = 1;\u250c\u2500name\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500type\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 part_name       \u2502 String                                                                                           \u2502\u2502 mark_number     \u2502 UInt64                                                                                           \u2502\u2502 rows_in_granule \u2502 UInt64                                                                                           \u2502\u2502 id              \u2502 UInt64                                                                                           \u2502\u2502 id.mark         \u2502 Tuple(offset_in_compressed_file Nullable(UInt64), offset_in_decompressed_block Nullable(UInt64)) \u2502\u2502 n.mark          \u2502 Tuple(offset_in_compressed_file Nullable(UInt64), offset_in_decompressed_block Nullable(UInt64)) \u2502\u2502 arr.size0.mark  \u2502 Tuple(offset_in_compressed_file Nullable(UInt64), offset_in_decompressed_block Nullable(UInt64)) \u2502\u2502 arr.mark        \u2502 Tuple(offset_in_compressed_file Nullable(UInt64), offset_in_decompressed_block Nullable(UInt64)) \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nExamples: CREATE TABLE test_table(    `id` UInt64,    `n` UInt64,    `arr` Array(UInt64))ENGINE = MergeTreeORDER BY idSETTINGS index_granularity = 3, min_bytes_for_wide_part = 0, min_rows_for_wide_part = 8;INSERT INTO test_table SELECT number, number, range(number % 5) FROM numbers(5);INSERT INTO test_table SELECT number, number, range(number % 5) FROM numbers(10, 10);SELECT * FROM mergeTreeIndex(currentDatabase(), test_table, with_marks = true);DESCRIBE mergeTreeIndex(currentDatabase(), test_table, with_marks = true) SETTINGS describe_compact_output = 1;\nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/hdfs"], "Title": ["Globs in path"], "Feature": ["Globs in path"], "Description": ["Globs in path", "Paths may use globbing. Files must match the whole path pattern, not only the suffix or prefix.", "* \u2014 Represents arbitrarily many characters except / but including the empty string.** \u2014 Represents all files inside a folder recursively.? \u2014 Represents an arbitrary single character.{some_string,another_string,yet_another_one} \u2014 Substitutes any of strings 'some_string', 'another_string', 'yet_another_one'. The strings can contain the / symbol.{N..M} \u2014 Represents any number >= N and <= M.", "Constructions with {} are similar to the remote and file table functions."], "Examples": ["SELECT count(*)FROM hdfs('hdfs://hdfs1:9000/{some,another}_dir/some_file_{1..3}', 'TSV', 'name String, value UInt32')", "SELECT count(*)FROM hdfs('hdfs://hdfs1:9000/{some,another}_dir/*', 'TSV', 'name String, value UInt32')", "SELECT count(*)FROM hdfs('hdfs://hdfs1:9000/big_dir/file{0..9}{0..9}{0..9}', 'CSV', 'name String, value UInt32')"], "Category": ["Table Functions"], "index": 292, "vector_txt": "292:Feature: Globs in path\nDescription: Globs in pathPaths may use globbing. Files must match the whole path pattern, not only the suffix or prefix.* \u2014 Represents arbitrarily many characters except / but including the empty string.** \u2014 Represents all files inside a folder recursively.? \u2014 Represents an arbitrary single character.{some_string,another_string,yet_another_one} \u2014 Substitutes any of strings 'some_string', 'another_string', 'yet_another_one'. The strings can contain the / symbol.{N..M} \u2014 Represents any number >= N and <= M.Constructions with {} are similar to the remote and file table functions.\nExamples: SELECT count(*)FROM hdfs('hdfs://hdfs1:9000/{some,another}_dir/some_file_{1..3}', 'TSV', 'name String, value UInt32')SELECT count(*)FROM hdfs('hdfs://hdfs1:9000/{some,another}_dir/*', 'TSV', 'name String, value UInt32')SELECT count(*)FROM hdfs('hdfs://hdfs1:9000/big_dir/file{0..9}{0..9}{0..9}', 'CSV', 'name String, value UInt32')\nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/hdfs"], "Title": ["Virtual Columns"], "Feature": ["Virtual Columns"], "Description": ["Virtual Columns", "_path \u2014 Path to the file. Type: LowCardinalty(String)._file \u2014 Name of the file. Type: LowCardinalty(String)._size \u2014 Size of the file in bytes. Type: Nullable(UInt64). If the size is unknown, the value is NULL._time \u2014 Last modified time of the file. Type: Nullable(DateTime). If the time is unknown, the value is NULL."], "Examples": [], "Category": ["Table Functions"], "index": 293, "vector_txt": "293:Feature: Virtual Columns\nDescription: Virtual Columns_path \u2014 Path to the file. Type: LowCardinalty(String)._file \u2014 Name of the file. Type: LowCardinalty(String)._size \u2014 Size of the file in bytes. Type: Nullable(UInt64). If the size is unknown, the value is NULL._time \u2014 Last modified time of the file. Type: Nullable(DateTime). If the time is unknown, the value is NULL.\nExamples: \nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/hdfs"], "Title": ["Hive-style partitioning"], "Feature": ["Hive-style partitioning"], "Description": ["Hive-style partitioning", "When setting use_hive_partitioning is set to 1, ClickHouse will detect Hive-style partitioning in the path (/name=value/) and will allow to use partition columns as virtual columns in the query. These virtual columns will have the same names as in the partitioned path, but starting with _."], "Examples": ["SET use_hive_partitioning = 1;SELECT * from HDFS('hdfs://hdfs1:9000/data/path/date=*/country=*/code=*/*.parquet') where _date > '2020-01-01' and _country = 'Netherlands' and _code = 42;"], "Category": ["Table Functions"], "index": 294, "vector_txt": "294:Feature: Hive-style partitioning\nDescription: Hive-style partitioningWhen setting use_hive_partitioning is set to 1, ClickHouse will detect Hive-style partitioning in the path (/name=value/) and will allow to use partition columns as virtual columns in the query. These virtual columns will have the same names as in the partitioned path, but starting with _.\nExamples: SET use_hive_partitioning = 1;SELECT * from HDFS('hdfs://hdfs1:9000/data/path/date=*/country=*/code=*/*.parquet') where _date > '2020-01-01' and _country = 'Netherlands' and _code = 42;\nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/hdfs"], "Title": ["Storage Settings"], "Feature": ["Storage Settings"], "Description": ["Storage Settings", "hdfs_truncate_on_insert - allows to truncate file before insert into it. Disabled by default.hdfs_create_new_file_on_insert - allows to create a new file on each insert if format has suffix. Disabled by default.hdfs_skip_empty_files - allows to skip empty files while reading. Disabled by default.ignore_access_denied_multidirectory_globs - allows to ignore permission denied errors for multi-directory globs.", "See Also", "Virtual columns"], "Examples": [], "Category": ["Table Functions"], "index": 295, "vector_txt": "295:Feature: Storage Settings\nDescription: Storage Settingshdfs_truncate_on_insert - allows to truncate file before insert into it. Disabled by default.hdfs_create_new_file_on_insert - allows to create a new file on each insert if format has suffix. Disabled by default.hdfs_skip_empty_files - allows to skip empty files while reading. Disabled by default.ignore_access_denied_multidirectory_globs - allows to ignore permission denied errors for multi-directory globs.See AlsoVirtual columns\nExamples: \nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/hdfsCluster"], "Title": ["hdfsCluster Table Function"], "Feature": ["hdfsCluster(cluster_name, URI, format, structure)"], "Description": ["hdfsCluster Table Function", "Allows processing files from HDFS in parallel from many nodes in a specified cluster. On initiator it creates a connection to all nodes in the cluster, discloses asterisks in HDFS file path, and dispatches each file dynamically. On the worker node it asks the initiator about the next task to process and processes it. This is repeated until all tasks are finished.", "Syntax", "hdfsCluster(cluster_name, URI, format, structure)", "Arguments", "cluster_name \u2014 Name of a cluster that is used to build a set of addresses and connection parameters to remote and local servers.URI \u2014 URI to a file or a bunch of files. Supports following wildcards in readonly mode: *, **, ?, {'abc','def'} and {N..M} where N, M \u2014 numbers, abc, def \u2014 strings. For more information see Wildcards In Path.format \u2014 The format of the file.structure \u2014 Structure of the table. Format 'column1_name column1_type, column2_name column2_type, ...'.", "Returned value", "A table with the specified structure for reading data in the specified file."], "Examples": ["SELECT count(*)FROM hdfsCluster('cluster_simple', 'hdfs://hdfs1:9000/{some,another}_dir/some_file_{1..3}', 'TSV', 'name String, value UInt32')", "SELECT count(*)FROM hdfsCluster('cluster_simple', 'hdfs://hdfs1:9000/{some,another}_dir/*', 'TSV', 'name String, value UInt32')"], "Category": ["Table Functions"], "index": 296, "vector_txt": "296:Feature: hdfsCluster(cluster_name, URI, format, structure)\nDescription: hdfsCluster Table FunctionAllows processing files from HDFS in parallel from many nodes in a specified cluster. On initiator it creates a connection to all nodes in the cluster, discloses asterisks in HDFS file path, and dispatches each file dynamically. On the worker node it asks the initiator about the next task to process and processes it. This is repeated until all tasks are finished.SyntaxhdfsCluster(cluster_name, URI, format, structure)Argumentscluster_name \u2014 Name of a cluster that is used to build a set of addresses and connection parameters to remote and local servers.URI \u2014 URI to a file or a bunch of files. Supports following wildcards in readonly mode: *, **, ?, {'abc','def'} and {N..M} where N, M \u2014 numbers, abc, def \u2014 strings. For more information see Wildcards In Path.format \u2014 The format of the file.structure \u2014 Structure of the table. Format 'column1_name column1_type, column2_name column2_type, ...'.Returned valueA table with the specified structure for reading data in the specified file.\nExamples: SELECT count(*)FROM hdfsCluster('cluster_simple', 'hdfs://hdfs1:9000/{some,another}_dir/some_file_{1..3}', 'TSV', 'name String, value UInt32')SELECT count(*)FROM hdfsCluster('cluster_simple', 'hdfs://hdfs1:9000/{some,another}_dir/*', 'TSV', 'name String, value UInt32')\nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/hudi"], "Title": ["Syntax"], "Feature": ["hudi(url [,aws_access_key_id, aws_secret_access_key] [,format] [,structure] [,compression])"], "Description": ["Syntax", "hudi(url [,aws_access_key_id, aws_secret_access_key] [,format] [,structure] [,compression])"], "Examples": ["hudi(url [,aws_access_key_id, aws_secret_access_key] [,format] [,structure] [,compression])"], "Category": ["Table Functions"], "index": 297, "vector_txt": "297:Feature: hudi(url [,aws_access_key_id, aws_secret_access_key] [,format] [,structure] [,compression])\nDescription: Syntaxhudi(url [,aws_access_key_id, aws_secret_access_key] [,format] [,structure] [,compression])\nExamples: hudi(url [,aws_access_key_id, aws_secret_access_key] [,format] [,structure] [,compression])\nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/hudi"], "Title": ["Arguments"], "Feature": ["Arguments"], "Description": ["Arguments", "url \u2014 Bucket url with the path to an existing Hudi table in S3.aws_access_key_id, aws_secret_access_key - Long-term credentials for the AWS account user.  You can use these to authenticate your requests. These parameters are optional. If credentials are not specified, they are used from the ClickHouse configuration. For more information see Using S3 for Data Storage.format \u2014 The format of the file.structure \u2014 Structure of the table. Format 'column1_name column1_type, column2_name column2_type, ...'.compression \u2014 Parameter is optional. Supported values: none, gzip/gz, brotli/br, xz/LZMA, zstd/zst. By default, compression will be autodetected by the file extension.", "Returned value", "A table with the specified structure for reading data in the specified Hudi table in S3.", "See Also", "Hudi engine"], "Examples": [], "Category": ["Table Functions"], "index": 298, "vector_txt": "298:Feature: Arguments\nDescription: Argumentsurl \u2014 Bucket url with the path to an existing Hudi table in S3.aws_access_key_id, aws_secret_access_key - Long-term credentials for the AWS account user.  You can use these to authenticate your requests. These parameters are optional. If credentials are not specified, they are used from the ClickHouse configuration. For more information see Using S3 for Data Storage.format \u2014 The format of the file.structure \u2014 Structure of the table. Format 'column1_name column1_type, column2_name column2_type, ...'.compression \u2014 Parameter is optional. Supported values: none, gzip/gz, brotli/br, xz/LZMA, zstd/zst. By default, compression will be autodetected by the file extension.Returned valueA table with the specified structure for reading data in the specified Hudi table in S3.See AlsoHudi engine\nExamples: \nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bit-functions"], "Title": ["bitTest"], "Feature": ["SELECT bitTest(number, index)"], "Description": ["bitTest", "Takes any integer and converts it into binary form, returns the value of a bit at specified position. Counting is right-to-left, starting at 0.", "Syntax", "SELECT bitTest(number, index)", "Arguments", "number \u2013 Integer number.index \u2013 Position of bit.", "Returned value", "Value of the bit at the specified position. UInt8."], "Examples": ["SELECT bitTest(43, 1);", "SELECT bitTest(43, 2);"], "Category": ["Bit Functions"], "index": 299, "vector_txt": "299:Feature: SELECT bitTest(number, index)\nDescription: bitTestTakes any integer and converts it into binary form, returns the value of a bit at specified position. Counting is right-to-left, starting at 0.SyntaxSELECT bitTest(number, index)Argumentsnumber \u2013 Integer number.index \u2013 Position of bit.Returned valueValue of the bit at the specified position. UInt8.\nExamples: SELECT bitTest(43, 1);SELECT bitTest(43, 2);\nCategory: Bit Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/iceberg"], "Title": ["Syntax"], "Feature": ["icebergS3(url [, NOSIGN | access_key_id, secret_access_key, [session_token]] [,format] [,compression_method])icebergS3(named_collection[, option=value [,..]])icebergAzure(connection_string|storage_account_url, container_name, blobpath, [,account_name], [,account_key] [,format] [,compression_method])icebergAzure(named_collection[, option=value [,..]])icebergHDFS(path_to_table, [,format] [,compression_method])icebergHDFS(named_collection[, option=value [,..]])icebergLocal(path_to_table, [,format] [,compression_method])icebergLocal(named_collection[, option=value [,..]])"], "Description": ["Syntax", "icebergS3(url [, NOSIGN | access_key_id, secret_access_key, [session_token]] [,format] [,compression_method])icebergS3(named_collection[, option=value [,..]])icebergAzure(connection_string|storage_account_url, container_name, blobpath, [,account_name], [,account_key] [,format] [,compression_method])icebergAzure(named_collection[, option=value [,..]])icebergHDFS(path_to_table, [,format] [,compression_method])icebergHDFS(named_collection[, option=value [,..]])icebergLocal(path_to_table, [,format] [,compression_method])icebergLocal(named_collection[, option=value [,..]])"], "Examples": ["icebergS3(url [, NOSIGN | access_key_id, secret_access_key, [session_token]] [,format] [,compression_method])icebergS3(named_collection[, option=value [,..]])icebergAzure(connection_string|storage_account_url, container_name, blobpath, [,account_name], [,account_key] [,format] [,compression_method])icebergAzure(named_collection[, option=value [,..]])icebergHDFS(path_to_table, [,format] [,compression_method])icebergHDFS(named_collection[, option=value [,..]])icebergLocal(path_to_table, [,format] [,compression_method])icebergLocal(named_collection[, option=value [,..]])"], "Category": ["Table Functions"], "index": 300, "vector_txt": "300:Feature: icebergS3(url [, NOSIGN | access_key_id, secret_access_key, [session_token]] [,format] [,compression_method])icebergS3(named_collection[, option=value [,..]])icebergAzure(connection_string|storage_account_url, container_name, blobpath, [,account_name], [,account_key] [,format] [,compression_method])icebergAzure(named_collection[, option=value [,..]])icebergHDFS(path_to_table, [,format] [,compression_method])icebergHDFS(named_collection[, option=value [,..]])icebergLocal(path_to_table, [,format] [,compression_method])icebergLocal(named_collection[, option=value [,..]])\nDescription: SyntaxicebergS3(url [, NOSIGN | access_key_id, secret_access_key, [session_token]] [,format] [,compression_method])icebergS3(named_collection[, option=value [,..]])icebergAzure(connection_string|storage_account_url, container_name, blobpath, [,account_name], [,account_key] [,format] [,compression_method])icebergAzure(named_collection[, option=value [,..]])icebergHDFS(path_to_table, [,format] [,compression_method])icebergHDFS(named_collection[, option=value [,..]])icebergLocal(path_to_table, [,format] [,compression_method])icebergLocal(named_collection[, option=value [,..]])\nExamples: icebergS3(url [, NOSIGN | access_key_id, secret_access_key, [session_token]] [,format] [,compression_method])icebergS3(named_collection[, option=value [,..]])icebergAzure(connection_string|storage_account_url, container_name, blobpath, [,account_name], [,account_key] [,format] [,compression_method])icebergAzure(named_collection[, option=value [,..]])icebergHDFS(path_to_table, [,format] [,compression_method])icebergHDFS(named_collection[, option=value [,..]])icebergLocal(path_to_table, [,format] [,compression_method])icebergLocal(named_collection[, option=value [,..]])\nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/iceberg"], "Title": ["Arguments"], "Feature": ["Arguments"], "Description": ["Arguments", "Description of the arguments coincides with description of arguments in table functions s3, azureBlobStorage, HDFS and file correspondingly.\nformat stands for the format of data files in the Iceberg table.", "Returned value\nA table with the specified structure for reading data in the specified Iceberg table."], "Examples": ["SELECT * FROM icebergS3('http://test.s3.amazonaws.com/clickhouse-bucket/test_table', 'test', 'test')"], "Category": ["Table Functions"], "index": 301, "vector_txt": "301:Feature: Arguments\nDescription: ArgumentsDescription of the arguments coincides with description of arguments in table functions s3, azureBlobStorage, HDFS and file correspondingly.\nformat stands for the format of data files in the Iceberg table.Returned value\nA table with the specified structure for reading data in the specified Iceberg table.\nExamples: SELECT * FROM icebergS3('http://test.s3.amazonaws.com/clickhouse-bucket/test_table', 'test', 'test')\nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/iceberg"], "Title": ["Defining a named collection"], "Feature": ["Defining a named collection"], "Description": ["Defining a named collection", "Here is an example of configuring a named collection for storing the URL and credentials:", "<clickhouse>    <named_collections>        <iceberg_conf>            <url>http://test.s3.amazonaws.com/clickhouse-bucket/</url>            <access_key_id>test<access_key_id>            <secret_access_key>test</secret_access_key>            <format>auto</format>            <structure>auto</structure>        </iceberg_conf>    </named_collections></clickhouse>", "SELECT * FROM icebergS3(iceberg_conf, filename = 'test_table')DESCRIBE icebergS3(iceberg_conf, filename = 'test_table')", "Aliases", "Table function iceberg is an alias to icebergS3 now.", "See Also", "Iceberg engine"], "Examples": ["SELECT * FROM icebergS3(iceberg_conf, filename = 'test_table')DESCRIBE icebergS3(iceberg_conf, filename = 'test_table')"], "Category": ["Table Functions"], "index": 302, "vector_txt": "302:Feature: Defining a named collection\nDescription: Defining a named collectionHere is an example of configuring a named collection for storing the URL and credentials:<clickhouse>    <named_collections>        <iceberg_conf>            <url>http://test.s3.amazonaws.com/clickhouse-bucket/</url>            <access_key_id>test<access_key_id>            <secret_access_key>test</secret_access_key>            <format>auto</format>            <structure>auto</structure>        </iceberg_conf>    </named_collections></clickhouse>SELECT * FROM icebergS3(iceberg_conf, filename = 'test_table')DESCRIBE icebergS3(iceberg_conf, filename = 'test_table')AliasesTable function iceberg is an alias to icebergS3 now.See AlsoIceberg engine\nExamples: SELECT * FROM icebergS3(iceberg_conf, filename = 'test_table')DESCRIBE icebergS3(iceberg_conf, filename = 'test_table')\nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/input"], "Title": ["input"], "Feature": ["input"], "Description": ["input", "input(structure) - table function that allows effectively convert and insert data sent to the\nserver with given structure to the table with another structure.", "structure - structure of data sent to the server in following format 'column1_name column1_type, column2_name column2_type, ...'.\nFor example, 'id UInt32, name String'.", "This function can be used only in INSERT SELECT query and only once but otherwise behaves like ordinary table function\n(for example, it can be used in subquery, etc.).", "Data can be sent in any way like for ordinary INSERT query and passed in any available format\nthat must be specified in the end of query (unlike ordinary INSERT SELECT).", "The main feature of this function is that when server receives data from client it simultaneously converts it\naccording to the list of expressions in the SELECT clause and inserts into the target table. Temporary table\nwith all transferred data is not created."], "Examples": [], "Category": ["Table Functions"], "index": 303, "vector_txt": "303:Feature: input\nDescription: inputinput(structure) - table function that allows effectively convert and insert data sent to the\nserver with given structure to the table with another structure.structure - structure of data sent to the server in following format 'column1_name column1_type, column2_name column2_type, ...'.\nFor example, 'id UInt32, name String'.This function can be used only in INSERT SELECT query and only once but otherwise behaves like ordinary table function\n(for example, it can be used in subquery, etc.).Data can be sent in any way like for ordinary INSERT query and passed in any available format\nthat must be specified in the end of query (unlike ordinary INSERT SELECT).The main feature of this function is that when server receives data from client it simultaneously converts it\naccording to the list of expressions in the SELECT clause and inserts into the target table. Temporary table\nwith all transferred data is not created.\nExamples: \nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/jdbc"], "Title": ["jdbc"], "Feature": ["jdbc"], "Description": ["jdbc", "Noteclickhouse-jdbc-bridge contains experimental codes and is no longer supported. It may contain reliability issues and security vulnerabilities. Use it at your own risk.\nClickHouse recommend using built-in table functions in ClickHouse which provide a better alternative for ad-hoc querying scenarios (Postgres, MySQL, MongoDB, etc).", "jdbc(datasource, schema, table) - returns table that is connected via JDBC driver.", "This table function requires separate clickhouse-jdbc-bridge program to be running.\nIt supports Nullable types (based on DDL of remote table that is queried)."], "Examples": ["SELECT * FROM jdbc('jdbc:mysql://localhost:3306/?user=root&password=root', 'schema', 'table')", "SELECT * FROM jdbc('mysql://localhost:3306/?user=root&password=root', 'select * from schema.table')", "SELECT * FROM jdbc('mysql-dev?p1=233', 'num Int32', 'select toInt32OrZero(''{{p1}}'') as num')", "SELECT *FROM jdbc('mysql-dev?p1=233', 'num Int32', 'select toInt32OrZero(''{{p1}}'') as num')", "SELECT a.datasource AS server1, b.datasource AS server2, b.name AS dbFROM jdbc('mysql-dev?datasource_column', 'show databases') aINNER JOIN jdbc('self?datasource_column', 'show databases') b ON a.Database = b.name"], "Category": ["Table Functions"], "index": 304, "vector_txt": "304:Feature: jdbc\nDescription: jdbcNoteclickhouse-jdbc-bridge contains experimental codes and is no longer supported. It may contain reliability issues and security vulnerabilities. Use it at your own risk.\nClickHouse recommend using built-in table functions in ClickHouse which provide a better alternative for ad-hoc querying scenarios (Postgres, MySQL, MongoDB, etc).jdbc(datasource, schema, table) - returns table that is connected via JDBC driver.This table function requires separate clickhouse-jdbc-bridge program to be running.\nIt supports Nullable types (based on DDL of remote table that is queried).\nExamples: SELECT * FROM jdbc('jdbc:mysql://localhost:3306/?user=root&password=root', 'schema', 'table')SELECT * FROM jdbc('mysql://localhost:3306/?user=root&password=root', 'select * from schema.table')SELECT * FROM jdbc('mysql-dev?p1=233', 'num Int32', 'select toInt32OrZero(''{{p1}}'') as num')SELECT *FROM jdbc('mysql-dev?p1=233', 'num Int32', 'select toInt32OrZero(''{{p1}}'') as num')SELECT a.datasource AS server1, b.datasource AS server2, b.name AS dbFROM jdbc('mysql-dev?datasource_column', 'show databases') aINNER JOIN jdbc('self?datasource_column', 'show databases') b ON a.Database = b.name\nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/merge"], "Title": ["merge"], "Feature": ["merge(['db_name',] 'tables_regexp')"], "Description": ["merge", "Creates a temporary Merge table. The table structure is taken from the first table encountered that matches the regular expression.", "Syntax", "merge(['db_name',] 'tables_regexp')", "Arguments", "db_name \u2014 Possible values (optional, default is currentDatabase()):database name,constant expression that returns a string with a database name, for example, currentDatabase(),REGEXP(expression), where expression is a regular expression to match the DB names.tables_regexp \u2014 A regular expression to match the table names in the specified DB or DBs.", "See Also", "Merge table engine"], "Examples": ["merge(['db_name',] 'tables_regexp')"], "Category": ["Table Functions"], "index": 305, "vector_txt": "305:Feature: merge(['db_name',] 'tables_regexp')\nDescription: mergeCreates a temporary Merge table. The table structure is taken from the first table encountered that matches the regular expression.Syntaxmerge(['db_name',] 'tables_regexp')Argumentsdb_name \u2014 Possible values (optional, default is currentDatabase()):database name,constant expression that returns a string with a database name, for example, currentDatabase(),REGEXP(expression), where expression is a regular expression to match the DB names.tables_regexp \u2014 A regular expression to match the table names in the specified DB or DBs.See AlsoMerge table engine\nExamples: merge(['db_name',] 'tables_regexp')\nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/mongodb"], "Title": ["mongodb"], "Feature": ["mongodb(host:port, database, collection, user, password, structure [, options])"], "Description": ["mongodb", "Allows SELECT queries to be performed on data that is stored on a remote MongoDB server.", "Syntax", "mongodb(host:port, database, collection, user, password, structure [, options])", "Arguments", "host:port \u2014 MongoDB server address.database \u2014 Remote database name.collection \u2014 Remote collection name.user \u2014 MongoDB user.password \u2014 User password.structure - The schema for the ClickHouse table returned from this function.options - MongoDB connection string options (optional parameter).", "TipIf you are using the MongoDB Atlas cloud offering please add these options:'connectTimeoutMS=10000&ssl=true&authSource=admin'", "Also, you can connect by URI:", "mongodb(uri, collection, structure)", "Arguments", "uri \u2014 Connection string.collection \u2014 Remote collection name.structure \u2014 The schema for the ClickHouse table returned from this function.", "Returned Value", "A table object with the same columns as the original MongoDB table."], "Examples": ["db.createUser({user:\"test_user\",pwd:\"password\",roles:[{role:\"readWrite\",db:\"test\"}]})db.createCollection(\"my_collection\")db.my_collection.insertOne(    { log_type: \"event\", host: \"120.5.33.9\", command: \"check-cpu-usage -w 75 -c 90\" })db.my_collection.insertOne(    { log_type: \"event\", host: \"120.5.33.4\", command: \"system-check\"})", "SELECT * FROM mongodb(    '127.0.0.1:27017',    'test',    'my_collection',    'test_user',    'password',    'log_type String, host String, command String',    'connectTimeoutMS=10000')", "SELECT * FROM mongodb(    'mongodb://test_user:password@127.0.0.1:27017/test?connectionTimeoutMS=10000',    'my_collection',    'log_type String, host String, command String')"], "Category": ["Table Functions"], "index": 306, "vector_txt": "306:Feature: mongodb(host:port, database, collection, user, password, structure [, options])\nDescription: mongodbAllows SELECT queries to be performed on data that is stored on a remote MongoDB server.Syntaxmongodb(host:port, database, collection, user, password, structure [, options])Argumentshost:port \u2014 MongoDB server address.database \u2014 Remote database name.collection \u2014 Remote collection name.user \u2014 MongoDB user.password \u2014 User password.structure - The schema for the ClickHouse table returned from this function.options - MongoDB connection string options (optional parameter).TipIf you are using the MongoDB Atlas cloud offering please add these options:'connectTimeoutMS=10000&ssl=true&authSource=admin'Also, you can connect by URI:mongodb(uri, collection, structure)Argumentsuri \u2014 Connection string.collection \u2014 Remote collection name.structure \u2014 The schema for the ClickHouse table returned from this function.Returned ValueA table object with the same columns as the original MongoDB table.\nExamples: db.createUser({user:\"test_user\",pwd:\"password\",roles:[{role:\"readWrite\",db:\"test\"}]})db.createCollection(\"my_collection\")db.my_collection.insertOne(    { log_type: \"event\", host: \"120.5.33.9\", command: \"check-cpu-usage -w 75 -c 90\" })db.my_collection.insertOne(    { log_type: \"event\", host: \"120.5.33.4\", command: \"system-check\"})SELECT * FROM mongodb(    '127.0.0.1:27017',    'test',    'my_collection',    'test_user',    'password',    'log_type String, host String, command String',    'connectTimeoutMS=10000')SELECT * FROM mongodb(    'mongodb://test_user:password@127.0.0.1:27017/test?connectionTimeoutMS=10000',    'my_collection',    'log_type String, host String, command String')\nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/mysql"], "Title": ["mysql"], "Feature": ["mysql({host:port, database, table, user, password[, replace_query, on_duplicate_clause] | named_collection[, option=value [,..]]})"], "Description": ["mysql", "Allows SELECT and INSERT queries to be performed on data that is stored on a remote MySQL server.", "Syntax", "mysql({host:port, database, table, user, password[, replace_query, on_duplicate_clause] | named_collection[, option=value [,..]]})", "Parameters", "host:port \u2014 MySQL server address.database \u2014 Remote database name.table \u2014 Remote table name.user \u2014 MySQL user.password \u2014 User password.replace_query \u2014 Flag that converts INSERT INTO queries to REPLACE INTO. Possible values:0 - The query is executed as INSERT INTO.1 - The query is executed as REPLACE INTO.on_duplicate_clause \u2014 The ON DUPLICATE KEY on_duplicate_clause expression that is added to the INSERT query. Can be specified only with replace_query = 0 (if you simultaneously pass replace_query = 1 and on_duplicate_clause, ClickHouse generates an exception).\nExample: INSERT INTO t (c1,c2) VALUES ('a', 2) ON DUPLICATE KEY UPDATE c2 = c2 + 1;on_duplicate_clause here is UPDATE c2 = c2 + 1. See the MySQL documentation to find which on_duplicate_clause you can use with the ON DUPLICATE KEY clause.", "Arguments also can be passed using named collections. In this case host and port should be specified separately. This approach is recommended for production environment.", "Simple WHERE clauses such as =, !=, >, >=, <, <= are currently executed on the MySQL server.", "The rest of the conditions and the LIMIT sampling constraint are executed in ClickHouse only after the query to MySQL finishes.", "Supports multiple replicas that must be listed by |. For example:", "SELECT name FROM mysql(`mysql{1|2|3}:3306`, 'mysql_database', 'mysql_table', 'user', 'password');", "or", "SELECT name FROM mysql(`mysql1:3306|mysql2:3306|mysql3:3306`, 'mysql_database', 'mysql_table', 'user', 'password');", "Returned Value", "A table object with the same columns as the original MySQL table.", "NoteIn the INSERT query to distinguish table function mysql(...) from table name with column names list, you must use keywords FUNCTION or TABLE FUNCTION. See examples below."], "Examples": ["SELECT * FROM mysql('localhost:3306', 'test', 'test', 'bayonet', '123');", "CREATE NAMED COLLECTION creds AS        host = 'localhost',        port = 3306,        database = 'test',        user = 'bayonet',        password = '123';SELECT * FROM mysql(creds, table='test');", "INSERT INTO FUNCTION mysql('localhost:3306', 'test', 'test', 'bayonet', '123', 1) (int_id, float) VALUES (1, 3);INSERT INTO TABLE FUNCTION mysql('localhost:3306', 'test', 'test', 'bayonet', '123', 0, 'UPDATE int_id = int_id + 1') (int_id, float) VALUES (1, 4);SELECT * FROM mysql('localhost:3306', 'test', 'test', 'bayonet', '123');", "CREATE TABLE mysql_copy(   `id` UInt64,   `datetime` DateTime('UTC'),   `description` String,)ENGINE = MergeTreeORDER BY (id,datetime);INSERT INTO mysql_copySELECT * FROM mysql('host:port', 'database', 'table', 'user', 'password');", "INSERT INTO mysql_copySELECT * FROM mysql('host:port', 'database', 'table', 'user', 'password')WHERE id > (SELECT max(id) from mysql_copy);"], "Category": ["Table Functions"], "index": 307, "vector_txt": "307:Feature: mysql({host:port, database, table, user, password[, replace_query, on_duplicate_clause] | named_collection[, option=value [,..]]})\nDescription: mysqlAllows SELECT and INSERT queries to be performed on data that is stored on a remote MySQL server.Syntaxmysql({host:port, database, table, user, password[, replace_query, on_duplicate_clause] | named_collection[, option=value [,..]]})Parametershost:port \u2014 MySQL server address.database \u2014 Remote database name.table \u2014 Remote table name.user \u2014 MySQL user.password \u2014 User password.replace_query \u2014 Flag that converts INSERT INTO queries to REPLACE INTO. Possible values:0 - The query is executed as INSERT INTO.1 - The query is executed as REPLACE INTO.on_duplicate_clause \u2014 The ON DUPLICATE KEY on_duplicate_clause expression that is added to the INSERT query. Can be specified only with replace_query = 0 (if you simultaneously pass replace_query = 1 and on_duplicate_clause, ClickHouse generates an exception).\nExample: INSERT INTO t (c1,c2) VALUES ('a', 2) ON DUPLICATE KEY UPDATE c2 = c2 + 1;on_duplicate_clause here is UPDATE c2 = c2 + 1. See the MySQL documentation to find which on_duplicate_clause you can use with the ON DUPLICATE KEY clause.Arguments also can be passed using named collections. In this case host and port should be specified separately. This approach is recommended for production environment.Simple WHERE clauses such as =, !=, >, >=, <, <= are currently executed on the MySQL server.The rest of the conditions and the LIMIT sampling constraint are executed in ClickHouse only after the query to MySQL finishes.Supports multiple replicas that must be listed by |. For example:SELECT name FROM mysql(`mysql{1|2|3}:3306`, 'mysql_database', 'mysql_table', 'user', 'password');orSELECT name FROM mysql(`mysql1:3306|mysql2:3306|mysql3:3306`, 'mysql_database', 'mysql_table', 'user', 'password');Returned ValueA table object with the same columns as the original MySQL table.NoteIn the INSERT query to distinguish table function mysql(...) from table name with column names list, you must use keywords FUNCTION or TABLE FUNCTION. See examples below.\nExamples: SELECT * FROM mysql('localhost:3306', 'test', 'test', 'bayonet', '123');CREATE NAMED COLLECTION creds AS        host = 'localhost',        port = 3306,        database = 'test',        user = 'bayonet',        password = '123';SELECT * FROM mysql(creds, table='test');INSERT INTO FUNCTION mysql('localhost:3306', 'test', 'test', 'bayonet', '123', 1) (int_id, float) VALUES (1, 3);INSERT INTO TABLE FUNCTION mysql('localhost:3306', 'test', 'test', 'bayonet', '123', 0, 'UPDATE int_id = int_id + 1') (int_id, float) VALUES (1, 4);SELECT * FROM mysql('localhost:3306', 'test', 'test', 'bayonet', '123');CREATE TABLE mysql_copy(   `id` UInt64,   `datetime` DateTime('UTC'),   `description` String,)ENGINE = MergeTreeORDER BY (id,datetime);INSERT INTO mysql_copySELECT * FROM mysql('host:port', 'database', 'table', 'user', 'password');INSERT INTO mysql_copySELECT * FROM mysql('host:port', 'database', 'table', 'user', 'password')WHERE id > (SELECT max(id) from mysql_copy);\nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/numbers"], "Title": ["numbers"], "Feature": ["SELECT * FROM numbers(10);SELECT * FROM numbers(0, 10);SELECT * FROM system.numbers LIMIT 10;SELECT * FROM system.numbers WHERE number BETWEEN 0 AND 9;SELECT * FROM system.numbers WHERE number IN (0, 1, 2, 3, 4, 5, 6, 7, 8, 9);"], "Description": ["numbers", "numbers(N) \u2013 Returns a table with the single \u2018number\u2019 column (UInt64) that contains integers from 0 to N-1.\nnumbers(N, M) - Returns a table with the single \u2018number\u2019 column (UInt64) that contains integers from N to (N + M - 1).\nnumbers(N, M, S) - Returns a table with the single \u2018number\u2019 column (UInt64) that contains integers from N to (N + M - 1) with step S.", "Similar to the system.numbers table, it can be used for testing and generating successive values, numbers(N, M) more efficient than system.numbers.", "The following queries are equivalent:", "SELECT * FROM numbers(10);SELECT * FROM numbers(0, 10);SELECT * FROM system.numbers LIMIT 10;SELECT * FROM system.numbers WHERE number BETWEEN 0 AND 9;SELECT * FROM system.numbers WHERE number IN (0, 1, 2, 3, 4, 5, 6, 7, 8, 9);", "And the following queries are equivalent:", "SELECT number * 2 FROM numbers(10);SELECT (number - 10) * 2 FROM numbers(10, 10);SELECT * FROM numbers(0, 20, 2);"], "Examples": ["-- Generate a sequence of dates from 2010-01-01 to 2010-12-31select toDate('2010-01-01') + number as d FROM numbers(365);"], "Category": ["Table Functions"], "index": 308, "vector_txt": "308:Feature: SELECT * FROM numbers(10);SELECT * FROM numbers(0, 10);SELECT * FROM system.numbers LIMIT 10;SELECT * FROM system.numbers WHERE number BETWEEN 0 AND 9;SELECT * FROM system.numbers WHERE number IN (0, 1, 2, 3, 4, 5, 6, 7, 8, 9);\nDescription: numbersnumbers(N) \u2013 Returns a table with the single \u2018number\u2019 column (UInt64) that contains integers from 0 to N-1.\nnumbers(N, M) - Returns a table with the single \u2018number\u2019 column (UInt64) that contains integers from N to (N + M - 1).\nnumbers(N, M, S) - Returns a table with the single \u2018number\u2019 column (UInt64) that contains integers from N to (N + M - 1) with step S.Similar to the system.numbers table, it can be used for testing and generating successive values, numbers(N, M) more efficient than system.numbers.The following queries are equivalent:SELECT * FROM numbers(10);SELECT * FROM numbers(0, 10);SELECT * FROM system.numbers LIMIT 10;SELECT * FROM system.numbers WHERE number BETWEEN 0 AND 9;SELECT * FROM system.numbers WHERE number IN (0, 1, 2, 3, 4, 5, 6, 7, 8, 9);And the following queries are equivalent:SELECT number * 2 FROM numbers(10);SELECT (number - 10) * 2 FROM numbers(10, 10);SELECT * FROM numbers(0, 20, 2);\nExamples: -- Generate a sequence of dates from 2010-01-01 to 2010-12-31select toDate('2010-01-01') + number as d FROM numbers(365);\nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/timeSeriesData"], "Title": ["timeSeriesData"], "Feature": ["timeSeriesData"], "Description": ["timeSeriesData", "timeSeriesData(db_name.time_series_table) - Returns the data table\nused by table db_name.time_series_table which table engine is TimeSeries:", "CREATE TABLE db_name.time_series_table ENGINE=TimeSeries DATA data_table", "The function also works if the data table is inner:", "CREATE TABLE db_name.time_series_table ENGINE=TimeSeries DATA INNER UUID '01234567-89ab-cdef-0123-456789abcdef'", "The following queries are equivalent:", "SELECT * FROM timeSeriesData(db_name.time_series_table);SELECT * FROM timeSeriesData('db_name.time_series_table');SELECT * FROM timeSeriesData('db_name', 'time_series_table');"], "Examples": ["CREATE TABLE db_name.time_series_table ENGINE=TimeSeries DATA data_table", "CREATE TABLE db_name.time_series_table ENGINE=TimeSeries DATA INNER UUID '01234567-89ab-cdef-0123-456789abcdef'", "SELECT * FROM timeSeriesData(db_name.time_series_table);SELECT * FROM timeSeriesData('db_name.time_series_table');SELECT * FROM timeSeriesData('db_name', 'time_series_table');"], "Category": ["Table Functions"], "index": 309, "vector_txt": "309:Feature: timeSeriesData\nDescription: timeSeriesDatatimeSeriesData(db_name.time_series_table) - Returns the data table\nused by table db_name.time_series_table which table engine is TimeSeries:CREATE TABLE db_name.time_series_table ENGINE=TimeSeries DATA data_tableThe function also works if the data table is inner:CREATE TABLE db_name.time_series_table ENGINE=TimeSeries DATA INNER UUID '01234567-89ab-cdef-0123-456789abcdef'The following queries are equivalent:SELECT * FROM timeSeriesData(db_name.time_series_table);SELECT * FROM timeSeriesData('db_name.time_series_table');SELECT * FROM timeSeriesData('db_name', 'time_series_table');\nExamples: CREATE TABLE db_name.time_series_table ENGINE=TimeSeries DATA data_tableCREATE TABLE db_name.time_series_table ENGINE=TimeSeries DATA INNER UUID '01234567-89ab-cdef-0123-456789abcdef'SELECT * FROM timeSeriesData(db_name.time_series_table);SELECT * FROM timeSeriesData('db_name.time_series_table');SELECT * FROM timeSeriesData('db_name', 'time_series_table');\nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bit-functions"], "Title": ["bitTestAll"], "Feature": ["SELECT bitTestAll(number, index1, index2, index3, index4, ...)"], "Description": ["bitTestAll", "Returns result of logical conjunction (AND operator) of all bits at given positions. Counting is right-to-left, starting at 0.", "The conjunction for bit-wise operations:", "0 AND 0 = 0", "0 AND 1 = 0", "1 AND 0 = 0", "1 AND 1 = 1", "Syntax", "SELECT bitTestAll(number, index1, index2, index3, index4, ...)", "Arguments", "number \u2013 Integer number.index1, index2, index3, index4 \u2013 Positions of bit. For example, for set of positions (index1, index2, index3, index4) is true if and only if all of its positions are true (index1 \u22c0 index2, \u22c0 index3 \u22c0 index4).", "Returned value", "Result of the logical conjunction. UInt8."], "Examples": ["SELECT bitTestAll(43, 0, 1, 3, 5);", "SELECT bitTestAll(43, 0, 1, 3, 5, 2);"], "Category": ["Bit Functions"], "index": 310, "vector_txt": "310:Feature: SELECT bitTestAll(number, index1, index2, index3, index4, ...)\nDescription: bitTestAllReturns result of logical conjunction (AND operator) of all bits at given positions. Counting is right-to-left, starting at 0.The conjunction for bit-wise operations:0 AND 0 = 00 AND 1 = 01 AND 0 = 01 AND 1 = 1SyntaxSELECT bitTestAll(number, index1, index2, index3, index4, ...)Argumentsnumber \u2013 Integer number.index1, index2, index3, index4 \u2013 Positions of bit. For example, for set of positions (index1, index2, index3, index4) is true if and only if all of its positions are true (index1 \u22c0 index2, \u22c0 index3 \u22c0 index4).Returned valueResult of the logical conjunction. UInt8.\nExamples: SELECT bitTestAll(43, 0, 1, 3, 5);SELECT bitTestAll(43, 0, 1, 3, 5, 2);\nCategory: Bit Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/timeSeriesMetrics"], "Title": ["timeSeriesMetrics"], "Feature": ["timeSeriesMetrics"], "Description": ["timeSeriesMetrics", "timeSeriesMetrics(db_name.time_series_table) - Returns the metrics table\nused by table db_name.time_series_table which table engine is TimeSeries:", "CREATE TABLE db_name.time_series_table ENGINE=TimeSeries METRICS metrics_table", "The function also works if the metrics table is inner:", "CREATE TABLE db_name.time_series_table ENGINE=TimeSeries METRICS INNER UUID '01234567-89ab-cdef-0123-456789abcdef'", "The following queries are equivalent:", "SELECT * FROM timeSeriesMetrics(db_name.time_series_table);SELECT * FROM timeSeriesMetrics('db_name.time_series_table');SELECT * FROM timeSeriesMetrics('db_name', 'time_series_table');"], "Examples": ["CREATE TABLE db_name.time_series_table ENGINE=TimeSeries METRICS metrics_table", "CREATE TABLE db_name.time_series_table ENGINE=TimeSeries METRICS INNER UUID '01234567-89ab-cdef-0123-456789abcdef'", "SELECT * FROM timeSeriesMetrics(db_name.time_series_table);SELECT * FROM timeSeriesMetrics('db_name.time_series_table');SELECT * FROM timeSeriesMetrics('db_name', 'time_series_table');"], "Category": ["Table Functions"], "index": 311, "vector_txt": "311:Feature: timeSeriesMetrics\nDescription: timeSeriesMetricstimeSeriesMetrics(db_name.time_series_table) - Returns the metrics table\nused by table db_name.time_series_table which table engine is TimeSeries:CREATE TABLE db_name.time_series_table ENGINE=TimeSeries METRICS metrics_tableThe function also works if the metrics table is inner:CREATE TABLE db_name.time_series_table ENGINE=TimeSeries METRICS INNER UUID '01234567-89ab-cdef-0123-456789abcdef'The following queries are equivalent:SELECT * FROM timeSeriesMetrics(db_name.time_series_table);SELECT * FROM timeSeriesMetrics('db_name.time_series_table');SELECT * FROM timeSeriesMetrics('db_name', 'time_series_table');\nExamples: CREATE TABLE db_name.time_series_table ENGINE=TimeSeries METRICS metrics_tableCREATE TABLE db_name.time_series_table ENGINE=TimeSeries METRICS INNER UUID '01234567-89ab-cdef-0123-456789abcdef'SELECT * FROM timeSeriesMetrics(db_name.time_series_table);SELECT * FROM timeSeriesMetrics('db_name.time_series_table');SELECT * FROM timeSeriesMetrics('db_name', 'time_series_table');\nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/timeSeriesTags"], "Title": ["timeSeriesTags"], "Feature": ["timeSeriesTags"], "Description": ["timeSeriesTags", "timeSeriesTags(db_name.time_series_table) - Returns the tags table\nused by table db_name.time_series_table which table engine is TimeSeries:", "CREATE TABLE db_name.time_series_table ENGINE=TimeSeries TAGS tags_table", "The function also works if the tags table is inner:", "CREATE TABLE db_name.time_series_table ENGINE=TimeSeries TAGS INNER UUID '01234567-89ab-cdef-0123-456789abcdef'", "The following queries are equivalent:", "SELECT * FROM timeSeriesTags(db_name.time_series_table);SELECT * FROM timeSeriesTags('db_name.time_series_table');SELECT * FROM timeSeriesTags('db_name', 'time_series_table');"], "Examples": ["CREATE TABLE db_name.time_series_table ENGINE=TimeSeries TAGS tags_table", "CREATE TABLE db_name.time_series_table ENGINE=TimeSeries TAGS INNER UUID '01234567-89ab-cdef-0123-456789abcdef'", "SELECT * FROM timeSeriesTags(db_name.time_series_table);SELECT * FROM timeSeriesTags('db_name.time_series_table');SELECT * FROM timeSeriesTags('db_name', 'time_series_table');"], "Category": ["Table Functions"], "index": 312, "vector_txt": "312:Feature: timeSeriesTags\nDescription: timeSeriesTagstimeSeriesTags(db_name.time_series_table) - Returns the tags table\nused by table db_name.time_series_table which table engine is TimeSeries:CREATE TABLE db_name.time_series_table ENGINE=TimeSeries TAGS tags_tableThe function also works if the tags table is inner:CREATE TABLE db_name.time_series_table ENGINE=TimeSeries TAGS INNER UUID '01234567-89ab-cdef-0123-456789abcdef'The following queries are equivalent:SELECT * FROM timeSeriesTags(db_name.time_series_table);SELECT * FROM timeSeriesTags('db_name.time_series_table');SELECT * FROM timeSeriesTags('db_name', 'time_series_table');\nExamples: CREATE TABLE db_name.time_series_table ENGINE=TimeSeries TAGS tags_tableCREATE TABLE db_name.time_series_table ENGINE=TimeSeries TAGS INNER UUID '01234567-89ab-cdef-0123-456789abcdef'SELECT * FROM timeSeriesTags(db_name.time_series_table);SELECT * FROM timeSeriesTags('db_name.time_series_table');SELECT * FROM timeSeriesTags('db_name', 'time_series_table');\nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/generate_series"], "Title": ["generate_series"], "Feature": ["generate_series"], "Description": ["generate_series", "generate_series(START, STOP) - Returns a table with the single \u2018generate_series\u2019 column (UInt64) that contains integers from start to stop inclusively.", "generate_series(START, STOP, STEP) - Returns a table with the single \u2018generate_series\u2019 column (UInt64) that contains integers from start to stop inclusively with spacing between values given by STEP. ", "The following queries return tables with the same content but different column names:", "SELECT * FROM numbers(10, 5);SELECT * FROM generate_series(10, 14);", "And the following queries return tables with the same content but different column names (but the second option is more efficient):", "SELECT * FROM numbers(10, 11) WHERE number % 3 == (10 % 3);SELECT * FROM generate_series(10, 20, 3) ;"], "Examples": ["SELECT * FROM numbers(10, 5);SELECT * FROM generate_series(10, 14);", "SELECT * FROM numbers(10, 11) WHERE number % 3 == (10 % 3);SELECT * FROM generate_series(10, 20, 3) ;"], "Category": ["Table Functions"], "index": 313, "vector_txt": "313:Feature: generate_series\nDescription: generate_seriesgenerate_series(START, STOP) - Returns a table with the single \u2018generate_series\u2019 column (UInt64) that contains integers from start to stop inclusively.generate_series(START, STOP, STEP) - Returns a table with the single \u2018generate_series\u2019 column (UInt64) that contains integers from start to stop inclusively with spacing between values given by STEP. The following queries return tables with the same content but different column names:SELECT * FROM numbers(10, 5);SELECT * FROM generate_series(10, 14);And the following queries return tables with the same content but different column names (but the second option is more efficient):SELECT * FROM numbers(10, 11) WHERE number % 3 == (10 % 3);SELECT * FROM generate_series(10, 20, 3) ;\nExamples: SELECT * FROM numbers(10, 5);SELECT * FROM generate_series(10, 14);SELECT * FROM numbers(10, 11) WHERE number % 3 == (10 % 3);SELECT * FROM generate_series(10, 20, 3) ;\nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/odbc"], "Title": ["Usage Example"], "Feature": ["Usage Example"], "Description": ["Usage Example", "Getting data from the local MySQL installation via ODBC", "This example is checked for Ubuntu Linux 18.04 and MySQL server 5.7.", "Ensure that unixODBC and MySQL Connector are installed.", "By default (if installed from packages), ClickHouse starts as user clickhouse. Thus you need to create and configure this user in the MySQL server.", "$ sudo mysql", "mysql> CREATE USER 'clickhouse'@'localhost' IDENTIFIED BY 'clickhouse';mysql> GRANT ALL PRIVILEGES ON *.* TO 'clickhouse'@'clickhouse' WITH GRANT OPTION;", "Then configure the connection in /etc/odbc.ini.", "$ cat /etc/odbc.ini[mysqlconn]DRIVER = /usr/local/lib/libmyodbc5w.soSERVER = 127.0.0.1PORT = 3306DATABASE = testUSERNAME = clickhousePASSWORD = clickhouse", "You can check the connection using the isql utility from the unixODBC installation.", "$ isql -v mysqlconn+-------------------------+| Connected!                            ||                                       |...", "Table in MySQL:", "mysql> CREATE TABLE `test`.`test` (    ->   `int_id` INT NOT NULL AUTO_INCREMENT,    ->   `int_nullable` INT NULL DEFAULT NULL,    ->   `float` FLOAT NOT NULL,    ->   `float_nullable` FLOAT NULL DEFAULT NULL,    ->   PRIMARY KEY (`int_id`));Query OK, 0 rows affected (0,09 sec)mysql> insert into test (`int_id`, `float`) VALUES (1,2);Query OK, 1 row affected (0,00 sec)mysql> select * from test;+------+----------+-----+----------+| int_id | int_nullable | float | float_nullable |+------+----------+-----+----------+|      1 |         NULL |     2 |           NULL |+------+----------+-----+----------+1 row in set (0,00 sec)", "Retrieving data from the MySQL table in ClickHouse:", "SELECT * FROM odbc('DSN=mysqlconn', 'test', 'test')", "\u250c\u2500int_id\u2500\u252c\u2500int_nullable\u2500\u252c\u2500float\u2500\u252c\u2500float_nullable\u2500\u2510\u2502      1 \u2502            0 \u2502     2 \u2502              0 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Examples": ["mysql> CREATE USER 'clickhouse'@'localhost' IDENTIFIED BY 'clickhouse';mysql> GRANT ALL PRIVILEGES ON *.* TO 'clickhouse'@'clickhouse' WITH GRANT OPTION;", "SELECT * FROM odbc('DSN=mysqlconn', 'test', 'test')"], "Category": ["Table Functions"], "index": 314, "vector_txt": "314:Feature: Usage Example\nDescription: Usage ExampleGetting data from the local MySQL installation via ODBCThis example is checked for Ubuntu Linux 18.04 and MySQL server 5.7.Ensure that unixODBC and MySQL Connector are installed.By default (if installed from packages), ClickHouse starts as user clickhouse. Thus you need to create and configure this user in the MySQL server.$ sudo mysqlmysql> CREATE USER 'clickhouse'@'localhost' IDENTIFIED BY 'clickhouse';mysql> GRANT ALL PRIVILEGES ON *.* TO 'clickhouse'@'clickhouse' WITH GRANT OPTION;Then configure the connection in /etc/odbc.ini.$ cat /etc/odbc.ini[mysqlconn]DRIVER = /usr/local/lib/libmyodbc5w.soSERVER = 127.0.0.1PORT = 3306DATABASE = testUSERNAME = clickhousePASSWORD = clickhouseYou can check the connection using the isql utility from the unixODBC installation.$ isql -v mysqlconn+-------------------------+| Connected!                            ||                                       |...Table in MySQL:mysql> CREATE TABLE `test`.`test` (    ->   `int_id` INT NOT NULL AUTO_INCREMENT,    ->   `int_nullable` INT NULL DEFAULT NULL,    ->   `float` FLOAT NOT NULL,    ->   `float_nullable` FLOAT NULL DEFAULT NULL,    ->   PRIMARY KEY (`int_id`));Query OK, 0 rows affected (0,09 sec)mysql> insert into test (`int_id`, `float`) VALUES (1,2);Query OK, 1 row affected (0,00 sec)mysql> select * from test;+------+----------+-----+----------+| int_id | int_nullable | float | float_nullable |+------+----------+-----+----------+|      1 |         NULL |     2 |           NULL |+------+----------+-----+----------+1 row in set (0,00 sec)Retrieving data from the MySQL table in ClickHouse:SELECT * FROM odbc('DSN=mysqlconn', 'test', 'test')\u250c\u2500int_id\u2500\u252c\u2500int_nullable\u2500\u252c\u2500float\u2500\u252c\u2500float_nullable\u2500\u2510\u2502      1 \u2502            0 \u2502     2 \u2502              0 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nExamples: mysql> CREATE USER 'clickhouse'@'localhost' IDENTIFIED BY 'clickhouse';mysql> GRANT ALL PRIVILEGES ON *.* TO 'clickhouse'@'clickhouse' WITH GRANT OPTION;SELECT * FROM odbc('DSN=mysqlconn', 'test', 'test')\nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/odbc"], "Title": ["See Also"], "Feature": ["See Also"], "Description": ["See Also", "ODBC dictionariesODBC table engine."], "Examples": [], "Category": ["Table Functions"], "index": 315, "vector_txt": "315:Feature: See Also\nDescription: See AlsoODBC dictionariesODBC table engine.\nExamples: \nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/postgresql"], "Title": ["Implementation Details"], "Feature": ["SELECT name FROM postgresql(`postgres{1|2|3}:5432`, 'postgres_database', 'postgres_table', 'user', 'password');"], "Description": ["Implementation Details", "SELECT queries on PostgreSQL side run as COPY (SELECT ...) TO STDOUT inside read-only PostgreSQL transaction with commit after each SELECT query.", "Simple WHERE clauses such as =, !=, >, >=, <, <=, and IN are executed on the PostgreSQL server.", "All joins, aggregations, sorting, IN [ array ] conditions and the LIMIT sampling constraint are executed in ClickHouse only after the query to PostgreSQL finishes.", "INSERT queries on PostgreSQL side run as COPY \"table_name\" (field1, field2, ... fieldN) FROM STDIN inside PostgreSQL transaction with auto-commit after each INSERT statement.", "PostgreSQL Array types converts into ClickHouse arrays.", "NoteBe careful, in PostgreSQL an array data type column like Integer[] may contain arrays of different dimensions in different rows, but in ClickHouse it is only allowed to have multidimensional arrays of the same dimension in all rows.", "Supports multiple replicas that must be listed by |. For example:", "SELECT name FROM postgresql(`postgres{1|2|3}:5432`, 'postgres_database', 'postgres_table', 'user', 'password');", "or", "SELECT name FROM postgresql(`postgres1:5431|postgres2:5432`, 'postgres_database', 'postgres_table', 'user', 'password');", "Supports replicas priority for PostgreSQL dictionary source. The bigger the number in map, the less the priority. The highest priority is 0."], "Examples": ["SELECT * FROM postgresql('localhost:5432', 'test', 'test', 'postgresql_user', 'password') WHERE str IN ('test');", "CREATE NAMED COLLECTION mypg AS        host = 'localhost',        port = 5432,        database = 'test',        user = 'postgresql_user',        password = 'password';SELECT * FROM postgresql(mypg, table='test') WHERE str IN ('test');", "INSERT INTO TABLE FUNCTION postgresql('localhost:5432', 'test', 'test', 'postgrsql_user', 'password') (int_id, float) VALUES (2, 3);SELECT * FROM postgresql('localhost:5432', 'test', 'test', 'postgresql_user', 'password');", "CREATE TABLE pg_table_schema_with_dots (a UInt32)        ENGINE PostgreSQL('localhost:5432', 'clickhouse', 'nice.table', 'postgrsql_user', 'password', 'nice.schema');"], "Category": ["Table Functions"], "index": 316, "vector_txt": "316:Feature: SELECT name FROM postgresql(`postgres{1|2|3}:5432`, 'postgres_database', 'postgres_table', 'user', 'password');\nDescription: Implementation DetailsSELECT queries on PostgreSQL side run as COPY (SELECT ...) TO STDOUT inside read-only PostgreSQL transaction with commit after each SELECT query.Simple WHERE clauses such as =, !=, >, >=, <, <=, and IN are executed on the PostgreSQL server.All joins, aggregations, sorting, IN [ array ] conditions and the LIMIT sampling constraint are executed in ClickHouse only after the query to PostgreSQL finishes.INSERT queries on PostgreSQL side run as COPY \"table_name\" (field1, field2, ... fieldN) FROM STDIN inside PostgreSQL transaction with auto-commit after each INSERT statement.PostgreSQL Array types converts into ClickHouse arrays.NoteBe careful, in PostgreSQL an array data type column like Integer[] may contain arrays of different dimensions in different rows, but in ClickHouse it is only allowed to have multidimensional arrays of the same dimension in all rows.Supports multiple replicas that must be listed by |. For example:SELECT name FROM postgresql(`postgres{1|2|3}:5432`, 'postgres_database', 'postgres_table', 'user', 'password');orSELECT name FROM postgresql(`postgres1:5431|postgres2:5432`, 'postgres_database', 'postgres_table', 'user', 'password');Supports replicas priority for PostgreSQL dictionary source. The bigger the number in map, the less the priority. The highest priority is 0.\nExamples: SELECT * FROM postgresql('localhost:5432', 'test', 'test', 'postgresql_user', 'password') WHERE str IN ('test');CREATE NAMED COLLECTION mypg AS        host = 'localhost',        port = 5432,        database = 'test',        user = 'postgresql_user',        password = 'password';SELECT * FROM postgresql(mypg, table='test') WHERE str IN ('test');INSERT INTO TABLE FUNCTION postgresql('localhost:5432', 'test', 'test', 'postgrsql_user', 'password') (int_id, float) VALUES (2, 3);SELECT * FROM postgresql('localhost:5432', 'test', 'test', 'postgresql_user', 'password');CREATE TABLE pg_table_schema_with_dots (a UInt32)        ENGINE PostgreSQL('localhost:5432', 'clickhouse', 'nice.table', 'postgrsql_user', 'password', 'nice.schema');\nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/postgresql"], "Title": ["Related content"], "Feature": ["Related content"], "Description": ["Related content", "Blog: ClickHouse and PostgreSQL - a match made in data heaven - part 1Blog: ClickHouse and PostgreSQL - a Match Made in Data Heaven - part 2", "Replicating or migrating Postgres data with with PeerDB", "In addition to table functions, you can always use PeerDB by ClickHouse to set up a continuous data pipeline from Postgres to ClickHouse. PeerDB is a tool designed specifically to replicate data from Postgres to ClickHouse using change data capture (CDC)."], "Examples": [], "Category": ["Table Functions"], "index": 317, "vector_txt": "317:Feature: Related content\nDescription: Related contentBlog: ClickHouse and PostgreSQL - a match made in data heaven - part 1Blog: ClickHouse and PostgreSQL - a Match Made in Data Heaven - part 2Replicating or migrating Postgres data with with PeerDBIn addition to table functions, you can always use PeerDB by ClickHouse to set up a continuous data pipeline from Postgres to ClickHouse. PeerDB is a tool designed specifically to replicate data from Postgres to ClickHouse using change data capture (CDC).\nExamples: \nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/redis"], "Title": ["Usage Example"], "Feature": ["Usage Example"], "Description": ["Usage Example", "Read from Redis:", "SELECT * FROM redis(    'redis1:6379',    'key',    'key String, v1 String, v2 UInt32')", "Insert into Redis:", "INSERT INTO TABLE FUNCTION redis(    'redis1:6379',    'key',    'key String, v1 String, v2 UInt32') values ('1', '1', 1);", "See Also", "The Redis table engineUsing redis as a dictionary source"], "Examples": ["SELECT * FROM redis(    'redis1:6379',    'key',    'key String, v1 String, v2 UInt32')", "INSERT INTO TABLE FUNCTION redis(    'redis1:6379',    'key',    'key String, v1 String, v2 UInt32') values ('1', '1', 1);"], "Category": ["Table Functions"], "index": 318, "vector_txt": "318:Feature: Usage Example\nDescription: Usage ExampleRead from Redis:SELECT * FROM redis(    'redis1:6379',    'key',    'key String, v1 String, v2 UInt32')Insert into Redis:INSERT INTO TABLE FUNCTION redis(    'redis1:6379',    'key',    'key String, v1 String, v2 UInt32') values ('1', '1', 1);See AlsoThe Redis table engineUsing redis as a dictionary source\nExamples: SELECT * FROM redis(    'redis1:6379',    'key',    'key String, v1 String, v2 UInt32')INSERT INTO TABLE FUNCTION redis(    'redis1:6379',    'key',    'key String, v1 String, v2 UInt32') values ('1', '1', 1);\nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/remote"], "Title": ["Syntax"], "Feature": ["remote(addresses_expr, [db, table, user [, password], sharding_key])remote(addresses_expr, [db.table, user [, password], sharding_key])remote(named_collection[, option=value [,..]])remoteSecure(addresses_expr, [db, table, user [, password], sharding_key])remoteSecure(addresses_expr, [db.table, user [, password], sharding_key])remoteSecure(named_collection[, option=value [,..]])"], "Description": ["Syntax", "remote(addresses_expr, [db, table, user [, password], sharding_key])remote(addresses_expr, [db.table, user [, password], sharding_key])remote(named_collection[, option=value [,..]])remoteSecure(addresses_expr, [db, table, user [, password], sharding_key])remoteSecure(addresses_expr, [db.table, user [, password], sharding_key])remoteSecure(named_collection[, option=value [,..]])"], "Examples": ["remote(addresses_expr, [db, table, user [, password], sharding_key])remote(addresses_expr, [db.table, user [, password], sharding_key])remote(named_collection[, option=value [,..]])remoteSecure(addresses_expr, [db, table, user [, password], sharding_key])remoteSecure(addresses_expr, [db.table, user [, password], sharding_key])remoteSecure(named_collection[, option=value [,..]])"], "Category": ["Table Functions"], "index": 319, "vector_txt": "319:Feature: remote(addresses_expr, [db, table, user [, password], sharding_key])remote(addresses_expr, [db.table, user [, password], sharding_key])remote(named_collection[, option=value [,..]])remoteSecure(addresses_expr, [db, table, user [, password], sharding_key])remoteSecure(addresses_expr, [db.table, user [, password], sharding_key])remoteSecure(named_collection[, option=value [,..]])\nDescription: Syntaxremote(addresses_expr, [db, table, user [, password], sharding_key])remote(addresses_expr, [db.table, user [, password], sharding_key])remote(named_collection[, option=value [,..]])remoteSecure(addresses_expr, [db, table, user [, password], sharding_key])remoteSecure(addresses_expr, [db.table, user [, password], sharding_key])remoteSecure(named_collection[, option=value [,..]])\nExamples: remote(addresses_expr, [db, table, user [, password], sharding_key])remote(addresses_expr, [db.table, user [, password], sharding_key])remote(named_collection[, option=value [,..]])remoteSecure(addresses_expr, [db, table, user [, password], sharding_key])remoteSecure(addresses_expr, [db.table, user [, password], sharding_key])remoteSecure(named_collection[, option=value [,..]])\nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/remote"], "Title": ["Parameters"], "Feature": ["Parameters"], "Description": ["Parameters", "addresses_expr \u2014 A remote server address or an expression that generates multiple addresses of remote servers. Format: host or host:port.  The host can be specified as a server name, or as a IPv4 or IPv6 address. An IPv6 address must be specified in square brackets.  The port is the TCP port on the remote server. If the port is omitted, it uses tcp_port from the server config file for table function remote (by default, 9000) and tcp_port_secure for table function remoteSecure (by default, 9440).  For IPv6 addresses, a port is required.  If only parameter addresses_expr is specified, db and table will use system.one by default.  Type: String.db \u2014 Database name. Type: String.table \u2014 Table name. Type: String.user \u2014 User name. If not specified, default is used. Type: String.password \u2014 User password. If not specified, an empty password is used. Type: String.sharding_key \u2014 Sharding key to support distributing data across nodes. For example: insert into remote('127.0.0.1:9000,127.0.0.2', db, table, 'default', rand()). Type: UInt32.", "Arguments also can be passed using named collections."], "Examples": [], "Category": ["Table Functions"], "index": 320, "vector_txt": "320:Feature: Parameters\nDescription: Parametersaddresses_expr \u2014 A remote server address or an expression that generates multiple addresses of remote servers. Format: host or host:port.  The host can be specified as a server name, or as a IPv4 or IPv6 address. An IPv6 address must be specified in square brackets.  The port is the TCP port on the remote server. If the port is omitted, it uses tcp_port from the server config file for table function remote (by default, 9000) and tcp_port_secure for table function remoteSecure (by default, 9440).  For IPv6 addresses, a port is required.  If only parameter addresses_expr is specified, db and table will use system.one by default.  Type: String.db \u2014 Database name. Type: String.table \u2014 Table name. Type: String.user \u2014 User name. If not specified, default is used. Type: String.password \u2014 User password. If not specified, an empty password is used. Type: String.sharding_key \u2014 Sharding key to support distributing data across nodes. For example: insert into remote('127.0.0.1:9000,127.0.0.2', db, table, 'default', rand()). Type: UInt32.Arguments also can be passed using named collections.\nExamples: \nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bit-functions"], "Title": ["bitTestAny"], "Feature": ["SELECT bitTestAny(number, index1, index2, index3, index4, ...)"], "Description": ["bitTestAny", "Returns result of logical disjunction (OR operator) of all bits at given positions. Counting is right-to-left, starting at 0.", "The disjunction for bit-wise operations:", "0 OR 0 = 0", "0 OR 1 = 1", "1 OR 0 = 1", "1 OR 1 = 1", "Syntax", "SELECT bitTestAny(number, index1, index2, index3, index4, ...)", "Arguments", "number \u2013 Integer number.index1, index2, index3, index4 \u2013 Positions of bit.", "Returned value", "Result of the logical disjunction. UInt8."], "Examples": ["SELECT bitTestAny(43, 0, 2);", "SELECT bitTestAny(43, 4, 2);"], "Category": ["Bit Functions"], "index": 321, "vector_txt": "321:Feature: SELECT bitTestAny(number, index1, index2, index3, index4, ...)\nDescription: bitTestAnyReturns result of logical disjunction (OR operator) of all bits at given positions. Counting is right-to-left, starting at 0.The disjunction for bit-wise operations:0 OR 0 = 00 OR 1 = 11 OR 0 = 11 OR 1 = 1SyntaxSELECT bitTestAny(number, index1, index2, index3, index4, ...)Argumentsnumber \u2013 Integer number.index1, index2, index3, index4 \u2013 Positions of bit.Returned valueResult of the logical disjunction. UInt8.\nExamples: SELECT bitTestAny(43, 0, 2);SELECT bitTestAny(43, 4, 2);\nCategory: Bit Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/remote"], "Title": ["Returned value"], "Feature": ["Returned value"], "Description": ["Returned value", "A table located on a remote server."], "Examples": [], "Category": ["Table Functions"], "index": 322, "vector_txt": "322:Feature: Returned value\nDescription: Returned valueA table located on a remote server.\nExamples: \nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/remote"], "Title": ["Usage"], "Feature": ["Usage"], "Description": ["Usage", "As table functions remote and remoteSecure re-establish the connection for each request, it is recommended to use a Distributed table instead. Also, if hostnames are set, the names are resolved, and errors are not counted when working with various replicas. When processing a large number of queries, always create the Distributed table ahead of time, and do not use the remote table function.", "The remote table function can be useful in the following cases:", "One-time data migration from one system to anotherAccessing a specific server for data comparison, debugging, and testing, i.e. ad-hoc connections.Queries between various ClickHouse clusters for research purposes.Infrequent distributed requests that are made manually.Distributed requests where the set of servers is re-defined each time.", "Addresses", "example01-01-1example01-01-1:9440example01-01-1:9000localhost127.0.0.1[::]:9440[::]:9000[2a02:6b8:0:1111::11]:9000", "Multiple addresses can be comma-separated. In this case, ClickHouse will use distributed processing and send the query to all specified addresses (like shards with different data). Example:", "example01-01-1,example01-02-1"], "Examples": [], "Category": ["Table Functions"], "index": 323, "vector_txt": "323:Feature: Usage\nDescription: UsageAs table functions remote and remoteSecure re-establish the connection for each request, it is recommended to use a Distributed table instead. Also, if hostnames are set, the names are resolved, and errors are not counted when working with various replicas. When processing a large number of queries, always create the Distributed table ahead of time, and do not use the remote table function.The remote table function can be useful in the following cases:One-time data migration from one system to anotherAccessing a specific server for data comparison, debugging, and testing, i.e. ad-hoc connections.Queries between various ClickHouse clusters for research purposes.Infrequent distributed requests that are made manually.Distributed requests where the set of servers is re-defined each time.Addressesexample01-01-1example01-01-1:9440example01-01-1:9000localhost127.0.0.1[::]:9440[::]:9000[2a02:6b8:0:1111::11]:9000Multiple addresses can be comma-separated. In this case, ClickHouse will use distributed processing and send the query to all specified addresses (like shards with different data). Example:example01-01-1,example01-02-1\nExamples: \nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/remote"], "Title": ["Examples"], "Feature": ["Examples"], "Description": [], "Examples": ["SELECT * FROM remote('127.0.0.1', db.remote_engine_table) LIMIT 3;", "CREATE NAMED COLLECTION creds AS        host = '127.0.0.1',        database = 'db';SELECT * FROM remote(creds, table='remote_engine_table') LIMIT 3;", "CREATE TABLE remote_table (name String, value UInt32) ENGINE=Memory;INSERT INTO FUNCTION remote('127.0.0.1', currentDatabase(), 'remote_table') VALUES ('test', 42);SELECT * FROM remote_table;", "INSERT INTO FUNCTIONremoteSecure('remote.clickhouse.cloud:9440', 'imdb.actors', 'USER', 'PASSWORD')SELECT * from imdb.actors"], "Category": ["Table Functions"], "index": 324, "vector_txt": "324:Feature: Examples\nDescription: \nExamples: SELECT * FROM remote('127.0.0.1', db.remote_engine_table) LIMIT 3;CREATE NAMED COLLECTION creds AS        host = '127.0.0.1',        database = 'db';SELECT * FROM remote(creds, table='remote_engine_table') LIMIT 3;CREATE TABLE remote_table (name String, value UInt32) ENGINE=Memory;INSERT INTO FUNCTION remote('127.0.0.1', currentDatabase(), 'remote_table') VALUES ('test', 42);SELECT * FROM remote_table;INSERT INTO FUNCTIONremoteSecure('remote.clickhouse.cloud:9440', 'imdb.actors', 'USER', 'PASSWORD')SELECT * from imdb.actors\nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/remote"], "Title": ["Globbing"], "Feature": ["Globbing"], "Description": ["Globbing", "Patterns in curly brackets { } are used to generate a set of shards and to specify replicas. If there are multiple pairs of curly brackets, then the direct product of the corresponding sets is generated.", "The following pattern types are supported.", "{a,b,c} - Represents any of alternative strings a, b or c. The pattern is replaced with a in the first shard address and replaced with b in the second shard address and so on. For instance, example0{1,2}-1 generates addresses example01-1 and example02-1.{N..M} - A range of numbers. This pattern generates shard addresses with incrementing indices from N to (and including) M. For instance, example0{1..2}-1 generates example01-1 and example02-1.{0n..0m} - A range of numbers with leading zeroes. This pattern preserves leading zeroes in indices. For instance, example{01..03}-1 generates example01-1, example02-1 and example03-1.{a|b} - Any number of variants separated by a |. The pattern specifies replicas. For instance, example01-{1|2} generates replicas example01-1 and example01-2.", "The query will be sent to the first healthy replica. However, for remote the replicas are iterated in the order currently set in the load_balancing setting.\nThe number of generated addresses is limited by table_function_remote_max_addresses setting."], "Examples": [], "Category": ["Table Functions"], "index": 325, "vector_txt": "325:Feature: Globbing\nDescription: GlobbingPatterns in curly brackets { } are used to generate a set of shards and to specify replicas. If there are multiple pairs of curly brackets, then the direct product of the corresponding sets is generated.The following pattern types are supported.{a,b,c} - Represents any of alternative strings a, b or c. The pattern is replaced with a in the first shard address and replaced with b in the second shard address and so on. For instance, example0{1,2}-1 generates addresses example01-1 and example02-1.{N..M} - A range of numbers. This pattern generates shard addresses with incrementing indices from N to (and including) M. For instance, example0{1..2}-1 generates example01-1 and example02-1.{0n..0m} - A range of numbers with leading zeroes. This pattern preserves leading zeroes in indices. For instance, example{01..03}-1 generates example01-1, example02-1 and example03-1.{a|b} - Any number of variants separated by a |. The pattern specifies replicas. For instance, example01-{1|2} generates replicas example01-1 and example01-2.The query will be sent to the first healthy replica. However, for remote the replicas are iterated in the order currently set in the load_balancing setting.\nThe number of generated addresses is limited by table_function_remote_max_addresses setting.\nExamples: \nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/s3"], "Title": ["Usage"], "Feature": ["Usage"], "Description": ["Usage", "Suppose that we have several files with following URIs on S3:", "'https://clickhouse-public-datasets.s3.amazonaws.com/my-test-bucket-768/some_prefix/some_file_1.csv''https://clickhouse-public-datasets.s3.amazonaws.com/my-test-bucket-768/some_prefix/some_file_2.csv''https://clickhouse-public-datasets.s3.amazonaws.com/my-test-bucket-768/some_prefix/some_file_3.csv''https://clickhouse-public-datasets.s3.amazonaws.com/my-test-bucket-768/some_prefix/some_file_4.csv''https://clickhouse-public-datasets.s3.amazonaws.com/my-test-bucket-768/another_prefix/some_file_1.csv''https://clickhouse-public-datasets.s3.amazonaws.com/my-test-bucket-768/another_prefix/some_file_2.csv''https://clickhouse-public-datasets.s3.amazonaws.com/my-test-bucket-768/another_prefix/some_file_3.csv''https://clickhouse-public-datasets.s3.amazonaws.com/my-test-bucket-768/another_prefix/some_file_4.csv'", "Count the amount of rows in files ending with numbers from 1 to 3:", "SELECT count(*)FROM s3('https://clickhouse-public-datasets.s3.amazonaws.com/my-test-bucket-768/{some,another}_prefix/some_file_{1..3}.csv', 'CSV', 'name String, value UInt32')", "\u250c\u2500count()\u2500\u2510\u2502      18 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "Count the total amount of rows in all files in these two directories:", "SELECT count(*)FROM s3('https://clickhouse-public-datasets.s3.amazonaws.com/my-test-bucket-768/{some,another}_prefix/*', 'CSV', 'name String, value UInt32')", "\u250c\u2500count()\u2500\u2510\u2502      24 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "TipIf your listing of files contains number ranges with leading zeros, use the construction with braces for each digit separately or use ?.", "Count the total amount of rows in files named file-000.csv, file-001.csv, ... , file-999.csv:", "SELECT count(*)FROM s3('https://clickhouse-public-datasets.s3.amazonaws.com/my-test-bucket-768/big_prefix/file-{000..999}.csv', 'CSV', 'name String, value UInt32');", "\u250c\u2500count()\u2500\u2510\u2502      12 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "Insert data into file test-data.csv.gz:", "INSERT INTO FUNCTION s3('https://clickhouse-public-datasets.s3.amazonaws.com/my-test-bucket-768/test-data.csv.gz', 'CSV', 'name String, value UInt32', 'gzip')VALUES ('test-data', 1), ('test-data-2', 2);", "Insert data into file test-data.csv.gz from existing table:", "INSERT INTO FUNCTION s3('https://clickhouse-public-datasets.s3.amazonaws.com/my-test-bucket-768/test-data.csv.gz', 'CSV', 'name String, value UInt32', 'gzip')SELECT name, value FROM existing_table;", "Glob ** can be used for recursive directory traversal. Consider the below example, it will fetch all files from my-test-bucket-768 directory recursively:", "SELECT * FROM s3('https://clickhouse-public-datasets.s3.amazonaws.com/my-test-bucket-768/**', 'CSV', 'name String, value UInt32', 'gzip');", "The below get data from all test-data.csv.gz files from any folder inside my-test-bucket directory recursively:", "SELECT * FROM s3('https://clickhouse-public-datasets.s3.amazonaws.com/my-test-bucket-768/**/test-data.csv.gz', 'CSV', 'name String, value UInt32', 'gzip');", "Note. It is possible to specify custom URL mappers in the server configuration file. Example:", "SELECT * FROM s3('s3://clickhouse-public-datasets/my-test-bucket-768/**/test-data.csv.gz', 'CSV', 'name String, value UInt32', 'gzip');", "The URL 's3://clickhouse-public-datasets/my-test-bucket-768/**/test-data.csv.gz' would be replaced to 'http://clickhouse-public-datasets.s3.amazonaws.com/my-test-bucket-768/**/test-data.csv.gz'", "Custom mapper can be added into config.xml:", "<url_scheme_mappers>   <s3>      <to>https://{bucket}.s3.amazonaws.com</to>   </s3>   <gs>      <to>https://{bucket}.storage.googleapis.com</to>   </gs>   <oss>      <to>https://{bucket}.oss.aliyuncs.com</to>   </oss></url_scheme_mappers>", "For production use cases it is recommended to use named collections. Here is the example:", "CREATE NAMED COLLECTION creds AS        access_key_id = '***',        secret_access_key = '***';SELECT count(*)FROM s3(creds, url='https://s3-object-url.csv')"], "Examples": ["SELECT count(*)FROM s3('https://clickhouse-public-datasets.s3.amazonaws.com/my-test-bucket-768/{some,another}_prefix/some_file_{1..3}.csv', 'CSV', 'name String, value UInt32')", "SELECT count(*)FROM s3('https://clickhouse-public-datasets.s3.amazonaws.com/my-test-bucket-768/{some,another}_prefix/*', 'CSV', 'name String, value UInt32')", "SELECT count(*)FROM s3('https://clickhouse-public-datasets.s3.amazonaws.com/my-test-bucket-768/big_prefix/file-{000..999}.csv', 'CSV', 'name String, value UInt32');", "INSERT INTO FUNCTION s3('https://clickhouse-public-datasets.s3.amazonaws.com/my-test-bucket-768/test-data.csv.gz', 'CSV', 'name String, value UInt32', 'gzip')VALUES ('test-data', 1), ('test-data-2', 2);", "INSERT INTO FUNCTION s3('https://clickhouse-public-datasets.s3.amazonaws.com/my-test-bucket-768/test-data.csv.gz', 'CSV', 'name String, value UInt32', 'gzip')SELECT name, value FROM existing_table;", "SELECT * FROM s3('https://clickhouse-public-datasets.s3.amazonaws.com/my-test-bucket-768/**', 'CSV', 'name String, value UInt32', 'gzip');", "SELECT * FROM s3('https://clickhouse-public-datasets.s3.amazonaws.com/my-test-bucket-768/**/test-data.csv.gz', 'CSV', 'name String, value UInt32', 'gzip');", "SELECT * FROM s3('s3://clickhouse-public-datasets/my-test-bucket-768/**/test-data.csv.gz', 'CSV', 'name String, value UInt32', 'gzip');", "CREATE NAMED COLLECTION creds AS        access_key_id = '***',        secret_access_key = '***';SELECT count(*)FROM s3(creds, url='https://s3-object-url.csv')"], "Category": ["Table Functions"], "index": 326, "vector_txt": "326:Feature: Usage\nDescription: UsageSuppose that we have several files with following URIs on S3:'https://clickhouse-public-datasets.s3.amazonaws.com/my-test-bucket-768/some_prefix/some_file_1.csv''https://clickhouse-public-datasets.s3.amazonaws.com/my-test-bucket-768/some_prefix/some_file_2.csv''https://clickhouse-public-datasets.s3.amazonaws.com/my-test-bucket-768/some_prefix/some_file_3.csv''https://clickhouse-public-datasets.s3.amazonaws.com/my-test-bucket-768/some_prefix/some_file_4.csv''https://clickhouse-public-datasets.s3.amazonaws.com/my-test-bucket-768/another_prefix/some_file_1.csv''https://clickhouse-public-datasets.s3.amazonaws.com/my-test-bucket-768/another_prefix/some_file_2.csv''https://clickhouse-public-datasets.s3.amazonaws.com/my-test-bucket-768/another_prefix/some_file_3.csv''https://clickhouse-public-datasets.s3.amazonaws.com/my-test-bucket-768/another_prefix/some_file_4.csv'Count the amount of rows in files ending with numbers from 1 to 3:SELECT count(*)FROM s3('https://clickhouse-public-datasets.s3.amazonaws.com/my-test-bucket-768/{some,another}_prefix/some_file_{1..3}.csv', 'CSV', 'name String, value UInt32')\u250c\u2500count()\u2500\u2510\u2502      18 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518Count the total amount of rows in all files in these two directories:SELECT count(*)FROM s3('https://clickhouse-public-datasets.s3.amazonaws.com/my-test-bucket-768/{some,another}_prefix/*', 'CSV', 'name String, value UInt32')\u250c\u2500count()\u2500\u2510\u2502      24 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518TipIf your listing of files contains number ranges with leading zeros, use the construction with braces for each digit separately or use ?.Count the total amount of rows in files named file-000.csv, file-001.csv, ... , file-999.csv:SELECT count(*)FROM s3('https://clickhouse-public-datasets.s3.amazonaws.com/my-test-bucket-768/big_prefix/file-{000..999}.csv', 'CSV', 'name String, value UInt32');\u250c\u2500count()\u2500\u2510\u2502      12 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518Insert data into file test-data.csv.gz:INSERT INTO FUNCTION s3('https://clickhouse-public-datasets.s3.amazonaws.com/my-test-bucket-768/test-data.csv.gz', 'CSV', 'name String, value UInt32', 'gzip')VALUES ('test-data', 1), ('test-data-2', 2);Insert data into file test-data.csv.gz from existing table:INSERT INTO FUNCTION s3('https://clickhouse-public-datasets.s3.amazonaws.com/my-test-bucket-768/test-data.csv.gz', 'CSV', 'name String, value UInt32', 'gzip')SELECT name, value FROM existing_table;Glob ** can be used for recursive directory traversal. Consider the below example, it will fetch all files from my-test-bucket-768 directory recursively:SELECT * FROM s3('https://clickhouse-public-datasets.s3.amazonaws.com/my-test-bucket-768/**', 'CSV', 'name String, value UInt32', 'gzip');The below get data from all test-data.csv.gz files from any folder inside my-test-bucket directory recursively:SELECT * FROM s3('https://clickhouse-public-datasets.s3.amazonaws.com/my-test-bucket-768/**/test-data.csv.gz', 'CSV', 'name String, value UInt32', 'gzip');Note. It is possible to specify custom URL mappers in the server configuration file. Example:SELECT * FROM s3('s3://clickhouse-public-datasets/my-test-bucket-768/**/test-data.csv.gz', 'CSV', 'name String, value UInt32', 'gzip');The URL 's3://clickhouse-public-datasets/my-test-bucket-768/**/test-data.csv.gz' would be replaced to 'http://clickhouse-public-datasets.s3.amazonaws.com/my-test-bucket-768/**/test-data.csv.gz'Custom mapper can be added into config.xml:<url_scheme_mappers>   <s3>      <to>https://{bucket}.s3.amazonaws.com</to>   </s3>   <gs>      <to>https://{bucket}.storage.googleapis.com</to>   </gs>   <oss>      <to>https://{bucket}.oss.aliyuncs.com</to>   </oss></url_scheme_mappers>For production use cases it is recommended to use named collections. Here is the example:CREATE NAMED COLLECTION creds AS        access_key_id = '***',        secret_access_key = '***';SELECT count(*)FROM s3(creds, url='https://s3-object-url.csv')\nExamples: SELECT count(*)FROM s3('https://clickhouse-public-datasets.s3.amazonaws.com/my-test-bucket-768/{some,another}_prefix/some_file_{1..3}.csv', 'CSV', 'name String, value UInt32')SELECT count(*)FROM s3('https://clickhouse-public-datasets.s3.amazonaws.com/my-test-bucket-768/{some,another}_prefix/*', 'CSV', 'name String, value UInt32')SELECT count(*)FROM s3('https://clickhouse-public-datasets.s3.amazonaws.com/my-test-bucket-768/big_prefix/file-{000..999}.csv', 'CSV', 'name String, value UInt32');INSERT INTO FUNCTION s3('https://clickhouse-public-datasets.s3.amazonaws.com/my-test-bucket-768/test-data.csv.gz', 'CSV', 'name String, value UInt32', 'gzip')VALUES ('test-data', 1), ('test-data-2', 2);INSERT INTO FUNCTION s3('https://clickhouse-public-datasets.s3.amazonaws.com/my-test-bucket-768/test-data.csv.gz', 'CSV', 'name String, value UInt32', 'gzip')SELECT name, value FROM existing_table;SELECT * FROM s3('https://clickhouse-public-datasets.s3.amazonaws.com/my-test-bucket-768/**', 'CSV', 'name String, value UInt32', 'gzip');SELECT * FROM s3('https://clickhouse-public-datasets.s3.amazonaws.com/my-test-bucket-768/**/test-data.csv.gz', 'CSV', 'name String, value UInt32', 'gzip');SELECT * FROM s3('s3://clickhouse-public-datasets/my-test-bucket-768/**/test-data.csv.gz', 'CSV', 'name String, value UInt32', 'gzip');CREATE NAMED COLLECTION creds AS        access_key_id = '***',        secret_access_key = '***';SELECT count(*)FROM s3(creds, url='https://s3-object-url.csv')\nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/s3"], "Title": ["Partitioned Write"], "Feature": ["Partitioned Write"], "Description": ["Partitioned Write", "If you specify PARTITION BY expression when inserting data into S3 table, a separate file is created for each partition value. Splitting the data into separate files helps to improve reading operations efficiency."], "Examples": ["INSERT INTO TABLE FUNCTION    s3('http://bucket.amazonaws.com/my_bucket/file_{_partition_id}.csv', 'CSV', 'a String, b UInt32, c UInt32')    PARTITION BY a VALUES ('x', 2, 3), ('x', 4, 5), ('y', 11, 12), ('y', 13, 14), ('z', 21, 22), ('z', 23, 24);", "INSERT INTO TABLE FUNCTION    s3('http://bucket.amazonaws.com/my_bucket_{_partition_id}/file.csv', 'CSV', 'a UInt32, b UInt32, c UInt32')    PARTITION BY a VALUES (1, 2, 3), (1, 4, 5), (10, 11, 12), (10, 13, 14), (20, 21, 22), (20, 23, 24);"], "Category": ["Table Functions"], "index": 327, "vector_txt": "327:Feature: Partitioned Write\nDescription: Partitioned WriteIf you specify PARTITION BY expression when inserting data into S3 table, a separate file is created for each partition value. Splitting the data into separate files helps to improve reading operations efficiency.\nExamples: INSERT INTO TABLE FUNCTION    s3('http://bucket.amazonaws.com/my_bucket/file_{_partition_id}.csv', 'CSV', 'a String, b UInt32, c UInt32')    PARTITION BY a VALUES ('x', 2, 3), ('x', 4, 5), ('y', 11, 12), ('y', 13, 14), ('z', 21, 22), ('z', 23, 24);INSERT INTO TABLE FUNCTION    s3('http://bucket.amazonaws.com/my_bucket_{_partition_id}/file.csv', 'CSV', 'a UInt32, b UInt32, c UInt32')    PARTITION BY a VALUES (1, 2, 3), (1, 4, 5), (10, 11, 12), (10, 13, 14), (20, 21, 22), (20, 23, 24);\nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/s3"], "Title": ["Accessing public buckets"], "Feature": ["Accessing public buckets"], "Description": ["Accessing public buckets", "ClickHouse tries to fetch credentials from many different types of sources.\nSometimes, it can produce problems when accessing some buckets that are public causing the client to return 403 error code.\nThis issue can be avoided by using NOSIGN keyword, forcing the client to ignore all the credentials, and not sign the requests.", "SELECT *FROM s3(   'https://datasets-documentation.s3.eu-west-3.amazonaws.com/aapl_stock.csv',   NOSIGN,   'CSVWithNames')LIMIT 5;"], "Examples": ["SELECT *FROM s3(   'https://datasets-documentation.s3.eu-west-3.amazonaws.com/aapl_stock.csv',   NOSIGN,   'CSVWithNames')LIMIT 5;"], "Category": ["Table Functions"], "index": 328, "vector_txt": "328:Feature: Accessing public buckets\nDescription: Accessing public bucketsClickHouse tries to fetch credentials from many different types of sources.\nSometimes, it can produce problems when accessing some buckets that are public causing the client to return 403 error code.\nThis issue can be avoided by using NOSIGN keyword, forcing the client to ignore all the credentials, and not sign the requests.SELECT *FROM s3(   'https://datasets-documentation.s3.eu-west-3.amazonaws.com/aapl_stock.csv',   NOSIGN,   'CSVWithNames')LIMIT 5;\nExamples: SELECT *FROM s3(   'https://datasets-documentation.s3.eu-west-3.amazonaws.com/aapl_stock.csv',   NOSIGN,   'CSVWithNames')LIMIT 5;\nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/s3"], "Title": ["Working with archives"], "Feature": ["Working with archives"], "Description": ["Working with archives", "Suppose that we have several archive files with following URIs on S3:", "'https://s3-us-west-1.amazonaws.com/umbrella-static/top-1m-2018-01-10.csv.zip''https://s3-us-west-1.amazonaws.com/umbrella-static/top-1m-2018-01-11.csv.zip''https://s3-us-west-1.amazonaws.com/umbrella-static/top-1m-2018-01-12.csv.zip'", "Extracting data from these archives is possible using ::. Globs can be used both in the url part as well as in the part after :: (responsible for the name of a file inside the archive).", "SELECT *FROM s3(   'https://s3-us-west-1.amazonaws.com/umbrella-static/top-1m-2018-01-1{0..2}.csv.zip :: *.csv');"], "Examples": ["SELECT *FROM s3(   'https://s3-us-west-1.amazonaws.com/umbrella-static/top-1m-2018-01-1{0..2}.csv.zip :: *.csv');"], "Category": ["Table Functions"], "index": 329, "vector_txt": "329:Feature: Working with archives\nDescription: Working with archivesSuppose that we have several archive files with following URIs on S3:'https://s3-us-west-1.amazonaws.com/umbrella-static/top-1m-2018-01-10.csv.zip''https://s3-us-west-1.amazonaws.com/umbrella-static/top-1m-2018-01-11.csv.zip''https://s3-us-west-1.amazonaws.com/umbrella-static/top-1m-2018-01-12.csv.zip'Extracting data from these archives is possible using ::. Globs can be used both in the url part as well as in the part after :: (responsible for the name of a file inside the archive).SELECT *FROM s3(   'https://s3-us-west-1.amazonaws.com/umbrella-static/top-1m-2018-01-1{0..2}.csv.zip :: *.csv');\nExamples: SELECT *FROM s3(   'https://s3-us-west-1.amazonaws.com/umbrella-static/top-1m-2018-01-1{0..2}.csv.zip :: *.csv');\nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/s3"], "Title": ["Virtual Columns"], "Feature": ["Virtual Columns"], "Description": ["Virtual Columns", "_path \u2014 Path to the file. Type: LowCardinalty(String). In case of archive, shows path in a format: \"{path_to_archive}::{path_to_file_inside_archive}\"_file \u2014 Name of the file. Type: LowCardinalty(String). In case of archive shows name of the file inside the archive._size \u2014 Size of the file in bytes. Type: Nullable(UInt64). If the file size is unknown, the value is NULL. In case of archive shows uncompressed file size of the file inside the archive. _time \u2014 Last modified time of the file. Type: Nullable(DateTime). If the time is unknown, the value is NULL."], "Examples": [], "Category": ["Table Functions"], "index": 330, "vector_txt": "330:Feature: Virtual Columns\nDescription: Virtual Columns_path \u2014 Path to the file. Type: LowCardinalty(String). In case of archive, shows path in a format: \"{path_to_archive}::{path_to_file_inside_archive}\"_file \u2014 Name of the file. Type: LowCardinalty(String). In case of archive shows name of the file inside the archive._size \u2014 Size of the file in bytes. Type: Nullable(UInt64). If the file size is unknown, the value is NULL. In case of archive shows uncompressed file size of the file inside the archive. _time \u2014 Last modified time of the file. Type: Nullable(DateTime). If the time is unknown, the value is NULL.\nExamples: \nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/s3"], "Title": ["Hive-style partitioning"], "Feature": ["Hive-style partitioning"], "Description": ["Hive-style partitioning", "When setting use_hive_partitioning is set to 1, ClickHouse will detect Hive-style partitioning in the path (/name=value/) and will allow to use partition columns as virtual columns in the query. These virtual columns will have the same names as in the partitioned path, but starting with _."], "Examples": ["SET use_hive_partitioning = 1;SELECT * from s3('s3://data/path/date=*/country=*/code=*/*.parquet') where _date > '2020-01-01' and _country = 'Netherlands' and _code = 42;"], "Category": ["Table Functions"], "index": 331, "vector_txt": "331:Feature: Hive-style partitioning\nDescription: Hive-style partitioningWhen setting use_hive_partitioning is set to 1, ClickHouse will detect Hive-style partitioning in the path (/name=value/) and will allow to use partition columns as virtual columns in the query. These virtual columns will have the same names as in the partitioned path, but starting with _.\nExamples: SET use_hive_partitioning = 1;SELECT * from s3('s3://data/path/date=*/country=*/code=*/*.parquet') where _date > '2020-01-01' and _country = 'Netherlands' and _code = 42;\nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bit-functions"], "Title": ["bitCount"], "Feature": ["bitCount(x)"], "Description": ["bitCount", "Calculates the number of bits set to one in the binary representation of a number.", "Syntax", "bitCount(x)", "Arguments", "x \u2014 Integer or floating-point number. The function uses the value representation in memory. It allows supporting floating-point numbers.", "Returned value", "Number of bits set to one in the input number. UInt8.", "NoteThe function does not convert the input value to a larger type (sign extension). So, for example, bitCount(toUInt8(-1)) = 8."], "Examples": ["SELECT bitCount(333);"], "Category": ["Bit Functions"], "index": 332, "vector_txt": "332:Feature: bitCount(x)\nDescription: bitCountCalculates the number of bits set to one in the binary representation of a number.SyntaxbitCount(x)Argumentsx \u2014 Integer or floating-point number. The function uses the value representation in memory. It allows supporting floating-point numbers.Returned valueNumber of bits set to one in the input number. UInt8.NoteThe function does not convert the input value to a larger type (sign extension). So, for example, bitCount(toUInt8(-1)) = 8.\nExamples: SELECT bitCount(333);\nCategory: Bit Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/arithmetic-functions"], "Title": ["positiveModulo(a, b)"], "Feature": ["positiveModulo(a, b)"], "Description": ["positiveModulo(a, b)", "Like modulo but always returns a non-negative number.", "This function is 4-5 times slower than modulo.", "Syntax", "positiveModulo(a, b)", "Alias:", "positive_modulo(a, b)pmod(a, b)"], "Examples": ["SELECT positiveModulo(-1, 10)"], "Category": ["Arithmetic Functions"], "index": 333, "vector_txt": "333:Feature: positiveModulo(a, b)\nDescription: positiveModulo(a, b)Like modulo but always returns a non-negative number.This function is 4-5 times slower than modulo.SyntaxpositiveModulo(a, b)Alias:positive_modulo(a, b)pmod(a, b)\nExamples: SELECT positiveModulo(-1, 10)\nCategory: Arithmetic Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/s3"], "Title": ["Storage Settings"], "Feature": ["Storage Settings"], "Description": ["Storage Settings", "s3_truncate_on_insert - allows to truncate file before insert into it. Disabled by default.s3_create_new_file_on_insert - allows to create a new file on each insert if format has suffix. Disabled by default.s3_skip_empty_files - allows to skip empty files while reading. Disabled by default.", "See Also", "S3 engine"], "Examples": [], "Category": ["Table Functions"], "index": 334, "vector_txt": "334:Feature: Storage Settings\nDescription: Storage Settingss3_truncate_on_insert - allows to truncate file before insert into it. Disabled by default.s3_create_new_file_on_insert - allows to create a new file on each insert if format has suffix. Disabled by default.s3_skip_empty_files - allows to skip empty files while reading. Disabled by default.See AlsoS3 engine\nExamples: \nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/url"], "Title": ["Globs in URL"], "Feature": ["Globs in URL"], "Description": ["Globs in URL", "Patterns in curly brackets { } are used to generate a set of shards or to specify failover addresses. Supported pattern types and examples see in the description of the remote function.\nCharacter | inside patterns is used to specify failover addresses. They are iterated in the same order as listed in the pattern. The number of generated addresses is limited by glob_expansion_max_elements setting."], "Examples": [], "Category": ["Table Functions"], "index": 335, "vector_txt": "335:Feature: Globs in URL\nDescription: Globs in URLPatterns in curly brackets { } are used to generate a set of shards or to specify failover addresses. Supported pattern types and examples see in the description of the remote function.\nCharacter | inside patterns is used to specify failover addresses. They are iterated in the same order as listed in the pattern. The number of generated addresses is limited by glob_expansion_max_elements setting.\nExamples: \nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/url"], "Title": ["Virtual Columns"], "Feature": ["Virtual Columns"], "Description": ["Virtual Columns", "_path \u2014 Path to the URL. Type: LowCardinalty(String)._file \u2014 Resource name of the URL. Type: LowCardinalty(String)._size \u2014 Size of the resource in bytes. Type: Nullable(UInt64). If the size is unknown, the value is NULL._time \u2014 Last modified time of the file. Type: Nullable(DateTime). If the time is unknown, the value is NULL._headers - HTTP response headers. Type: Map(LowCardinality(String), LowCardinality(String))."], "Examples": [], "Category": ["Table Functions"], "index": 336, "vector_txt": "336:Feature: Virtual Columns\nDescription: Virtual Columns_path \u2014 Path to the URL. Type: LowCardinalty(String)._file \u2014 Resource name of the URL. Type: LowCardinalty(String)._size \u2014 Size of the resource in bytes. Type: Nullable(UInt64). If the size is unknown, the value is NULL._time \u2014 Last modified time of the file. Type: Nullable(DateTime). If the time is unknown, the value is NULL._headers - HTTP response headers. Type: Map(LowCardinality(String), LowCardinality(String)).\nExamples: \nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/url"], "Title": ["Hive-style partitioning"], "Feature": ["Hive-style partitioning"], "Description": ["Hive-style partitioning", "When setting use_hive_partitioning is set to 1, ClickHouse will detect Hive-style partitioning in the path (/name=value/) and will allow to use partition columns as virtual columns in the query. These virtual columns will have the same names as in the partitioned path, but starting with _."], "Examples": ["SET use_hive_partitioning = 1;SELECT * from url('http://data/path/date=*/country=*/code=*/*.parquet') where _date > '2020-01-01' and _country = 'Netherlands' and _code = 42;"], "Category": ["Table Functions"], "index": 337, "vector_txt": "337:Feature: Hive-style partitioning\nDescription: Hive-style partitioningWhen setting use_hive_partitioning is set to 1, ClickHouse will detect Hive-style partitioning in the path (/name=value/) and will allow to use partition columns as virtual columns in the query. These virtual columns will have the same names as in the partitioned path, but starting with _.\nExamples: SET use_hive_partitioning = 1;SELECT * from url('http://data/path/date=*/country=*/code=*/*.parquet') where _date > '2020-01-01' and _country = 'Netherlands' and _code = 42;\nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/url"], "Title": ["Storage Settings"], "Feature": ["Storage Settings"], "Description": ["Storage Settings", "engine_url_skip_empty_files - allows to skip empty files while reading. Disabled by default.enable_url_encoding - allows to enable/disable decoding/encoding path in uri. Enabled by default.", "See Also", "Virtual columns"], "Examples": [], "Category": ["Table Functions"], "index": 338, "vector_txt": "338:Feature: Storage Settings\nDescription: Storage Settingsengine_url_skip_empty_files - allows to skip empty files while reading. Disabled by default.enable_url_encoding - allows to enable/disable decoding/encoding path in uri. Enabled by default.See AlsoVirtual columns\nExamples: \nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/urlCluster"], "Title": ["Globs in URL"], "Feature": ["Globs in URL"], "Description": ["Globs in URL", "Patterns in curly brackets { } are used to generate a set of shards or to specify failover addresses. Supported pattern types and examples see in the description of the remote function.\nCharacter | inside patterns is used to specify failover addresses. They are iterated in the same order as listed in the pattern. The number of generated addresses is limited by glob_expansion_max_elements setting.", "See Also", "HDFS engineURL table function"], "Examples": [], "Category": ["Table Functions"], "index": 339, "vector_txt": "339:Feature: Globs in URL\nDescription: Globs in URLPatterns in curly brackets { } are used to generate a set of shards or to specify failover addresses. Supported pattern types and examples see in the description of the remote function.\nCharacter | inside patterns is used to specify failover addresses. They are iterated in the same order as listed in the pattern. The number of generated addresses is limited by glob_expansion_max_elements setting.See AlsoHDFS engineURL table function\nExamples: \nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/table-functions/loop"], "Title": ["loop"], "Feature": ["SELECT ... FROM loop(database, table);SELECT ... FROM loop(database.table);SELECT ... FROM loop(table);SELECT ... FROM loop(other_table_function(...));"], "Description": ["loop", "Syntax", "SELECT ... FROM loop(database, table);SELECT ... FROM loop(database.table);SELECT ... FROM loop(table);SELECT ... FROM loop(other_table_function(...));", "Parameters", "database \u2014 database name.table \u2014 table name.other_table_function(...) \u2014 other table function.\nExample: SELECT * FROM loop(numbers(10));other_table_function(...) here is numbers(10).", "Returned Value", "Infinite loop to return query results."], "Examples": ["SELECT * FROM loop(test_database, test_table);SELECT * FROM loop(test_database.test_table);SELECT * FROM loop(test_table);", "SELECT * FROM loop(numbers(3)) LIMIT 7;   \u250c\u2500number\u2500\u25101. \u2502      0 \u25022. \u2502      1 \u25023. \u2502      2 \u2502   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u250c\u2500number\u2500\u25104. \u2502      0 \u25025. \u2502      1 \u25026. \u2502      2 \u2502   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u250c\u2500number\u2500\u25107. \u2502      0 \u2502   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "SELECT * FROM loop(mysql('localhost:3306', 'test', 'test', 'user', 'password'));..."], "Category": ["Table Functions"], "index": 340, "vector_txt": "340:Feature: SELECT ... FROM loop(database, table);SELECT ... FROM loop(database.table);SELECT ... FROM loop(table);SELECT ... FROM loop(other_table_function(...));\nDescription: loopSyntaxSELECT ... FROM loop(database, table);SELECT ... FROM loop(database.table);SELECT ... FROM loop(table);SELECT ... FROM loop(other_table_function(...));Parametersdatabase \u2014 database name.table \u2014 table name.other_table_function(...) \u2014 other table function.\nExample: SELECT * FROM loop(numbers(10));other_table_function(...) here is numbers(10).Returned ValueInfinite loop to return query results.\nExamples: SELECT * FROM loop(test_database, test_table);SELECT * FROM loop(test_database.test_table);SELECT * FROM loop(test_table);SELECT * FROM loop(numbers(3)) LIMIT 7;   \u250c\u2500number\u2500\u25101. \u2502      0 \u25022. \u2502      1 \u25023. \u2502      2 \u2502   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u250c\u2500number\u2500\u25104. \u2502      0 \u25025. \u2502      1 \u25026. \u2502      2 \u2502   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u250c\u2500number\u2500\u25107. \u2502      0 \u2502   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT * FROM loop(mysql('localhost:3306', 'test', 'test', 'user', 'password'));...\nCategory: Table Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/window-functions/row_number"], "Title": ["row_number"], "Feature": ["row_number (column_name)  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])"], "Description": ["row_number", "Numbers the current row within its partition starting from 1.", "Syntax", "row_number (column_name)  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])", "For more detail on window function syntax see: Window Functions - Syntax.", "Returned value", "A number for the current row within its partition. UInt64."], "Examples": ["CREATE TABLE salaries(    `team` String,    `player` String,    `salary` UInt32,    `position` String)Engine = Memory;INSERT INTO salaries FORMAT Values    ('Port Elizabeth Barbarians', 'Gary Chen', 195000, 'F'),    ('New Coreystad Archdukes', 'Charles Juarez', 190000, 'F'),    ('Port Elizabeth Barbarians', 'Michael Stanley', 150000, 'D'),    ('New Coreystad Archdukes', 'Scott Harrison', 150000, 'D'),    ('Port Elizabeth Barbarians', 'Robert George', 195000, 'M');", "SELECT player, salary,        row_number() OVER (ORDER BY salary DESC) AS row_numberFROM salaries;"], "Category": ["Window Functions"], "index": 341, "vector_txt": "341:Feature: row_number (column_name)  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])\nDescription: row_numberNumbers the current row within its partition starting from 1.Syntaxrow_number (column_name)  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])For more detail on window function syntax see: Window Functions - Syntax.Returned valueA number for the current row within its partition. UInt64.\nExamples: CREATE TABLE salaries(    `team` String,    `player` String,    `salary` UInt32,    `position` String)Engine = Memory;INSERT INTO salaries FORMAT Values    ('Port Elizabeth Barbarians', 'Gary Chen', 195000, 'F'),    ('New Coreystad Archdukes', 'Charles Juarez', 190000, 'F'),    ('Port Elizabeth Barbarians', 'Michael Stanley', 150000, 'D'),    ('New Coreystad Archdukes', 'Scott Harrison', 150000, 'D'),    ('Port Elizabeth Barbarians', 'Robert George', 195000, 'M');SELECT player, salary,        row_number() OVER (ORDER BY salary DESC) AS row_numberFROM salaries;\nCategory: Window Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/window-functions/nth_value"], "Title": ["nth_value"], "Feature": ["nth_value (x, offset)  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])"], "Description": ["nth_value", "Returns the first non-NULL value evaluated against the nth row (offset) in its ordered frame.", "Syntax", "nth_value (x, offset)  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])", "For more detail on window function syntax see: Window Functions - Syntax.", "Parameters", "x \u2014 Column name.offset \u2014 nth row to evaluate current row against.", "Returned value", "The first non-NULL value evaluated against the nth row (offset) in its ordered frame."], "Examples": ["DROP TABLE IF EXISTS salaries;CREATE TABLE salaries(    `team` String,    `player` String,    `salary` UInt32,    `position` String)Engine = Memory;INSERT INTO salaries FORMAT Values    ('Port Elizabeth Barbarians', 'Gary Chen', 195000, 'F'),    ('New Coreystad Archdukes', 'Charles Juarez', 190000, 'F'),    ('Port Elizabeth Barbarians', 'Michael Stanley', 100000, 'D'),    ('New Coreystad Archdukes', 'Scott Harrison', 180000, 'D'),    ('Port Elizabeth Barbarians', 'Robert George', 195000, 'M'),    ('South Hampton Seagulls', 'Douglas Benson', 150000, 'M'),    ('South Hampton Seagulls', 'James Henderson', 140000, 'M');", "SELECT player, salary, nth_value(player,3) OVER(ORDER BY salary DESC) AS third_highest_salary FROM salaries;"], "Category": ["Window Functions"], "index": 342, "vector_txt": "342:Feature: nth_value (x, offset)  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])\nDescription: nth_valueReturns the first non-NULL value evaluated against the nth row (offset) in its ordered frame.Syntaxnth_value (x, offset)  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])For more detail on window function syntax see: Window Functions - Syntax.Parametersx \u2014 Column name.offset \u2014 nth row to evaluate current row against.Returned valueThe first non-NULL value evaluated against the nth row (offset) in its ordered frame.\nExamples: DROP TABLE IF EXISTS salaries;CREATE TABLE salaries(    `team` String,    `player` String,    `salary` UInt32,    `position` String)Engine = Memory;INSERT INTO salaries FORMAT Values    ('Port Elizabeth Barbarians', 'Gary Chen', 195000, 'F'),    ('New Coreystad Archdukes', 'Charles Juarez', 190000, 'F'),    ('Port Elizabeth Barbarians', 'Michael Stanley', 100000, 'D'),    ('New Coreystad Archdukes', 'Scott Harrison', 180000, 'D'),    ('Port Elizabeth Barbarians', 'Robert George', 195000, 'M'),    ('South Hampton Seagulls', 'Douglas Benson', 150000, 'M'),    ('South Hampton Seagulls', 'James Henderson', 140000, 'M');SELECT player, salary, nth_value(player,3) OVER(ORDER BY salary DESC) AS third_highest_salary FROM salaries;\nCategory: Window Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/window-functions/rank"], "Title": ["rank"], "Feature": ["rank (column_name)  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])"], "Description": ["rank", "Ranks the current row within its partition with gaps. In other words, if the value of any row it encounters is equal to the value of a previous row then it will receive the same rank as that previous row.\nThe rank of the next row is then equal to the rank of the previous row plus a gap equal to the number of times the previous rank was given.", "The dense_rank function provides the same behaviour but without gaps in ranking. ", "Syntax", "rank (column_name)  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])", "For more detail on window function syntax see: Window Functions - Syntax.", "Returned value", "A number for the current row within its partition, including gaps. UInt64."], "Examples": ["CREATE TABLE salaries(    `team` String,    `player` String,    `salary` UInt32,    `position` String)Engine = Memory;INSERT INTO salaries FORMAT Values    ('Port Elizabeth Barbarians', 'Gary Chen', 195000, 'F'),    ('New Coreystad Archdukes', 'Charles Juarez', 190000, 'F'),    ('Port Elizabeth Barbarians', 'Michael Stanley', 150000, 'D'),    ('New Coreystad Archdukes', 'Scott Harrison', 150000, 'D'),    ('Port Elizabeth Barbarians', 'Robert George', 195000, 'M'),    ('South Hampton Seagulls', 'Douglas Benson', 150000, 'M'),    ('South Hampton Seagulls', 'James Henderson', 140000, 'M');", "SELECT player, salary,        rank() OVER (ORDER BY salary DESC) AS rankFROM salaries;"], "Category": ["Window Functions"], "index": 343, "vector_txt": "343:Feature: rank (column_name)  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])\nDescription: rankRanks the current row within its partition with gaps. In other words, if the value of any row it encounters is equal to the value of a previous row then it will receive the same rank as that previous row.\nThe rank of the next row is then equal to the rank of the previous row plus a gap equal to the number of times the previous rank was given.The dense_rank function provides the same behaviour but without gaps in ranking. Syntaxrank (column_name)  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])For more detail on window function syntax see: Window Functions - Syntax.Returned valueA number for the current row within its partition, including gaps. UInt64.\nExamples: CREATE TABLE salaries(    `team` String,    `player` String,    `salary` UInt32,    `position` String)Engine = Memory;INSERT INTO salaries FORMAT Values    ('Port Elizabeth Barbarians', 'Gary Chen', 195000, 'F'),    ('New Coreystad Archdukes', 'Charles Juarez', 190000, 'F'),    ('Port Elizabeth Barbarians', 'Michael Stanley', 150000, 'D'),    ('New Coreystad Archdukes', 'Scott Harrison', 150000, 'D'),    ('Port Elizabeth Barbarians', 'Robert George', 195000, 'M'),    ('South Hampton Seagulls', 'Douglas Benson', 150000, 'M'),    ('South Hampton Seagulls', 'James Henderson', 140000, 'M');SELECT player, salary,        rank() OVER (ORDER BY salary DESC) AS rankFROM salaries;\nCategory: Window Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bit-functions"], "Title": ["bitHammingDistance"], "Feature": ["bitHammingDistance(int1, int2)"], "Description": ["bitHammingDistance", "Returns the Hamming Distance between the bit representations of two integer values. Can be used with SimHash functions for detection of semi-duplicate strings. The smaller is the distance, the more likely those strings are the same.", "Syntax", "bitHammingDistance(int1, int2)", "Arguments", "int1 \u2014 First integer value. Int64.int2 \u2014 Second integer value. Int64.", "Returned value", "The Hamming distance. UInt8."], "Examples": ["SELECT bitHammingDistance(111, 121);", "SELECT bitHammingDistance(ngramSimHash('cat ate rat'), ngramSimHash('rat ate cat'));"], "Category": ["Bit Functions"], "index": 344, "vector_txt": "344:Feature: bitHammingDistance(int1, int2)\nDescription: bitHammingDistanceReturns the Hamming Distance between the bit representations of two integer values. Can be used with SimHash functions for detection of semi-duplicate strings. The smaller is the distance, the more likely those strings are the same.SyntaxbitHammingDistance(int1, int2)Argumentsint1 \u2014 First integer value. Int64.int2 \u2014 Second integer value. Int64.Returned valueThe Hamming distance. UInt8.\nExamples: SELECT bitHammingDistance(111, 121);SELECT bitHammingDistance(ngramSimHash('cat ate rat'), ngramSimHash('rat ate cat'));\nCategory: Bit Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/window-functions/dense_rank"], "Title": ["dense_rank"], "Feature": ["dense_rank (column_name)  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])"], "Description": ["dense_rank", "Ranks the current row within its partition without gaps. In other words, if the value of any new row encountered is equal to the value of one of the previous rows then it will receive the next successive rank without any gaps in ranking.", "The rank function provides the same behaviour, but with gaps in ranking.", "Syntax", "Alias: denseRank (case-sensitive)", "dense_rank (column_name)  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])", "For more detail on window function syntax see: Window Functions - Syntax.", "Returned value", "A number for the current row within its partition, without gaps in ranking. UInt64."], "Examples": ["CREATE TABLE salaries(    `team` String,    `player` String,    `salary` UInt32,    `position` String)Engine = Memory;INSERT INTO salaries FORMAT Values    ('Port Elizabeth Barbarians', 'Gary Chen', 195000, 'F'),    ('New Coreystad Archdukes', 'Charles Juarez', 190000, 'F'),    ('Port Elizabeth Barbarians', 'Michael Stanley', 150000, 'D'),    ('New Coreystad Archdukes', 'Scott Harrison', 150000, 'D'),    ('Port Elizabeth Barbarians', 'Robert George', 195000, 'M'),    ('South Hampton Seagulls', 'Douglas Benson', 150000, 'M'),    ('South Hampton Seagulls', 'James Henderson', 140000, 'M');", "SELECT player, salary,        dense_rank() OVER (ORDER BY salary DESC) AS dense_rankFROM salaries;"], "Category": ["Window Functions"], "index": 345, "vector_txt": "345:Feature: dense_rank (column_name)  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])\nDescription: dense_rankRanks the current row within its partition without gaps. In other words, if the value of any new row encountered is equal to the value of one of the previous rows then it will receive the next successive rank without any gaps in ranking.The rank function provides the same behaviour, but with gaps in ranking.SyntaxAlias: denseRank (case-sensitive)dense_rank (column_name)  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])For more detail on window function syntax see: Window Functions - Syntax.Returned valueA number for the current row within its partition, without gaps in ranking. UInt64.\nExamples: CREATE TABLE salaries(    `team` String,    `player` String,    `salary` UInt32,    `position` String)Engine = Memory;INSERT INTO salaries FORMAT Values    ('Port Elizabeth Barbarians', 'Gary Chen', 195000, 'F'),    ('New Coreystad Archdukes', 'Charles Juarez', 190000, 'F'),    ('Port Elizabeth Barbarians', 'Michael Stanley', 150000, 'D'),    ('New Coreystad Archdukes', 'Scott Harrison', 150000, 'D'),    ('Port Elizabeth Barbarians', 'Robert George', 195000, 'M'),    ('South Hampton Seagulls', 'Douglas Benson', 150000, 'M'),    ('South Hampton Seagulls', 'James Henderson', 140000, 'M');SELECT player, salary,        dense_rank() OVER (ORDER BY salary DESC) AS dense_rankFROM salaries;\nCategory: Window Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/window-functions/percent_rank"], "Title": ["percent_rank"], "Feature": ["percent_rank (column_name)  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING]] | [window_name])FROM table_nameWINDOW window_name as ([PARTITION BY grouping_column] [ORDER BY sorting_column] RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)"], "Description": ["percent_rank", "returns the relative rank (i.e. percentile) of rows within a window partition.", "Syntax", "Alias: percentRank (case-sensitive)", "percent_rank (column_name)  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING]] | [window_name])FROM table_nameWINDOW window_name as ([PARTITION BY grouping_column] [ORDER BY sorting_column] RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)", "The default and required window frame definition is RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING.", "For more detail on window function syntax see: Window Functions - Syntax."], "Examples": ["CREATE TABLE salaries(    `team` String,    `player` String,    `salary` UInt32,    `position` String)Engine = Memory;INSERT INTO salaries FORMAT Values    ('Port Elizabeth Barbarians', 'Gary Chen', 195000, 'F'),    ('New Coreystad Archdukes', 'Charles Juarez', 190000, 'F'),    ('Port Elizabeth Barbarians', 'Michael Stanley', 150000, 'D'),    ('New Coreystad Archdukes', 'Scott Harrison', 150000, 'D'),    ('Port Elizabeth Barbarians', 'Robert George', 195000, 'M'),    ('South Hampton Seagulls', 'Douglas Benson', 150000, 'M'),    ('South Hampton Seagulls', 'James Henderson', 140000, 'M');", "SELECT player, salary,        percent_rank() OVER (ORDER BY salary DESC) AS percent_rankFROM salaries;"], "Category": ["Window Functions"], "index": 346, "vector_txt": "346:Feature: percent_rank (column_name)  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING]] | [window_name])FROM table_nameWINDOW window_name as ([PARTITION BY grouping_column] [ORDER BY sorting_column] RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)\nDescription: percent_rankreturns the relative rank (i.e. percentile) of rows within a window partition.SyntaxAlias: percentRank (case-sensitive)percent_rank (column_name)  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING]] | [window_name])FROM table_nameWINDOW window_name as ([PARTITION BY grouping_column] [ORDER BY sorting_column] RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)The default and required window frame definition is RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING.For more detail on window function syntax see: Window Functions - Syntax.\nExamples: CREATE TABLE salaries(    `team` String,    `player` String,    `salary` UInt32,    `position` String)Engine = Memory;INSERT INTO salaries FORMAT Values    ('Port Elizabeth Barbarians', 'Gary Chen', 195000, 'F'),    ('New Coreystad Archdukes', 'Charles Juarez', 190000, 'F'),    ('Port Elizabeth Barbarians', 'Michael Stanley', 150000, 'D'),    ('New Coreystad Archdukes', 'Scott Harrison', 150000, 'D'),    ('Port Elizabeth Barbarians', 'Robert George', 195000, 'M'),    ('South Hampton Seagulls', 'Douglas Benson', 150000, 'M'),    ('South Hampton Seagulls', 'James Henderson', 140000, 'M');SELECT player, salary,        percent_rank() OVER (ORDER BY salary DESC) AS percent_rankFROM salaries;\nCategory: Window Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/window-functions/lagInFrame"], "Title": ["lagInFrame"], "Feature": ["lagInFrame(x[, offset[, default]])  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])"], "Description": ["lagInFrame", "Returns a value evaluated at the row that is at a specified physical offset row before the current row within the ordered frame.", "Syntax", "lagInFrame(x[, offset[, default]])  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])", "For more detail on window function syntax see: Window Functions - Syntax.", "Parameters", "x \u2014 Column name. offset \u2014 Offset to apply. (U)Int*. (Optional - 1 by default).default \u2014 Value to return if calculated row exceeds the boundaries of the window frame. (Optional - default value of column type when omitted).", "Returned value", "Value evaluated at the row that is at a specified physical offset before the current row within the ordered frame."], "Examples": ["CREATE TABLE stock_prices(    `date`   Date,    `open`   Float32, -- opening price    `high`   Float32, -- daily high    `low`    Float32, -- daily low    `close`  Float32, -- closing price    `volume` UInt32   -- trade volume)Engine = Memory;INSERT INTO stock_prices FORMAT Values    ('2024-06-03', 113.62, 115.00, 112.00, 115.00, 438392000),    ('2024-06-04', 115.72, 116.60, 114.04, 116.44, 403324000),    ('2024-06-05', 118.37, 122.45, 117.47, 122.44, 528402000),    ('2024-06-06', 124.05, 125.59, 118.32, 121.00, 664696000),    ('2024-06-07', 119.77, 121.69, 118.02, 120.89, 412386000);", "SELECT    date,    close,    lagInFrame(close, 1, close) OVER (ORDER BY date ASC) AS previous_day_close,    COALESCE(ROUND(close - previous_day_close, 2)) AS delta,    COALESCE(ROUND((delta / previous_day_close) * 100, 2)) AS percent_changeFROM stock_pricesORDER BY date DESC;"], "Category": ["Window Functions"], "index": 347, "vector_txt": "347:Feature: lagInFrame(x[, offset[, default]])  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])\nDescription: lagInFrameReturns a value evaluated at the row that is at a specified physical offset row before the current row within the ordered frame.SyntaxlagInFrame(x[, offset[, default]])  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])For more detail on window function syntax see: Window Functions - Syntax.Parametersx \u2014 Column name. offset \u2014 Offset to apply. (U)Int*. (Optional - 1 by default).default \u2014 Value to return if calculated row exceeds the boundaries of the window frame. (Optional - default value of column type when omitted).Returned valueValue evaluated at the row that is at a specified physical offset before the current row within the ordered frame.\nExamples: CREATE TABLE stock_prices(    `date`   Date,    `open`   Float32, -- opening price    `high`   Float32, -- daily high    `low`    Float32, -- daily low    `close`  Float32, -- closing price    `volume` UInt32   -- trade volume)Engine = Memory;INSERT INTO stock_prices FORMAT Values    ('2024-06-03', 113.62, 115.00, 112.00, 115.00, 438392000),    ('2024-06-04', 115.72, 116.60, 114.04, 116.44, 403324000),    ('2024-06-05', 118.37, 122.45, 117.47, 122.44, 528402000),    ('2024-06-06', 124.05, 125.59, 118.32, 121.00, 664696000),    ('2024-06-07', 119.77, 121.69, 118.02, 120.89, 412386000);SELECT    date,    close,    lagInFrame(close, 1, close) OVER (ORDER BY date ASC) AS previous_day_close,    COALESCE(ROUND(close - previous_day_close, 2)) AS delta,    COALESCE(ROUND((delta / previous_day_close) * 100, 2)) AS percent_changeFROM stock_pricesORDER BY date DESC;\nCategory: Window Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/window-functions/leadInFrame"], "Title": ["leadInFrame"], "Feature": ["leadInFrame(x[, offset[, default]])  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])"], "Description": ["leadInFrame", "Returns a value evaluated at the row that is offset rows after the current row within the ordered frame.", "Syntax", "leadInFrame(x[, offset[, default]])  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])", "For more detail on window function syntax see: Window Functions - Syntax.", "Parameters", "x \u2014 Column name.offset \u2014 Offset to apply. (U)Int*. (Optional - 1 by default).default \u2014 Value to return if calculated row exceeds the boundaries of the window frame. (Optional - default value of column type when omitted).", "Returned value", "value evaluated at the row that is offset rows after the current row within the ordered frame."], "Examples": ["CREATE OR REPLACE VIEW nobel_prize_laureates AS FROM file('nobel_laureates_data.csv') SELECT *;", "FROM nobel_prize_laureates SELECT fullName, leadInFrame(year, 1, year) OVER (PARTITION BY category ORDER BY year) AS year, category, motivation WHERE category == 'physics' ORDER BY year DESC LIMIT 9;"], "Category": ["Window Functions"], "index": 348, "vector_txt": "348:Feature: leadInFrame(x[, offset[, default]])  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])\nDescription: leadInFrameReturns a value evaluated at the row that is offset rows after the current row within the ordered frame.SyntaxleadInFrame(x[, offset[, default]])  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])For more detail on window function syntax see: Window Functions - Syntax.Parametersx \u2014 Column name.offset \u2014 Offset to apply. (U)Int*. (Optional - 1 by default).default \u2014 Value to return if calculated row exceeds the boundaries of the window frame. (Optional - default value of column type when omitted).Returned valuevalue evaluated at the row that is offset rows after the current row within the ordered frame.\nExamples: CREATE OR REPLACE VIEW nobel_prize_laureates AS FROM file('nobel_laureates_data.csv') SELECT *;FROM nobel_prize_laureates SELECT fullName, leadInFrame(year, 1, year) OVER (PARTITION BY category ORDER BY year) AS year, category, motivation WHERE category == 'physics' ORDER BY year DESC LIMIT 9;\nCategory: Window Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bitmap-functions"], "Title": ["bitmapBuild"], "Feature": ["bitmapBuild(array)"], "Description": ["bitmapBuild", "Builds a bitmap from an unsigned integer array.", "Syntax", "bitmapBuild(array)", "Arguments", "array \u2013 Unsigned integer array."], "Examples": ["SELECT bitmapBuild([1, 2, 3, 4, 5]) AS res, toTypeName(res);"], "Category": ["Bitmap Functions"], "index": 349, "vector_txt": "349:Feature: bitmapBuild(array)\nDescription: bitmapBuildBuilds a bitmap from an unsigned integer array.SyntaxbitmapBuild(array)Argumentsarray \u2013 Unsigned integer array.\nExamples: SELECT bitmapBuild([1, 2, 3, 4, 5]) AS res, toTypeName(res);\nCategory: Bitmap Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bitmap-functions"], "Title": ["bitmapToArray"], "Feature": ["bitmapToArray(bitmap)"], "Description": ["bitmapToArray", "Converts bitmap to an integer array.", "Syntax", "bitmapToArray(bitmap)", "Arguments", "bitmap \u2013 Bitmap object."], "Examples": ["SELECT bitmapToArray(bitmapBuild([1, 2, 3, 4, 5])) AS res;"], "Category": ["Bitmap Functions"], "index": 350, "vector_txt": "350:Feature: bitmapToArray(bitmap)\nDescription: bitmapToArrayConverts bitmap to an integer array.SyntaxbitmapToArray(bitmap)Argumentsbitmap \u2013 Bitmap object.\nExamples: SELECT bitmapToArray(bitmapBuild([1, 2, 3, 4, 5])) AS res;\nCategory: Bitmap Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bitmap-functions"], "Title": ["bitmapSubsetInRange"], "Feature": ["bitmapSubsetInRange(bitmap, range_start, range_end)"], "Description": ["bitmapSubsetInRange", "Returns the subset of a bitmap with bits within a value interval.", "Syntax", "bitmapSubsetInRange(bitmap, range_start, range_end)", "Arguments", "bitmap \u2013 Bitmap object.range_start \u2013 Start of the range (inclusive). UInt32.range_end \u2013 End of the range (exclusive). UInt32."], "Examples": ["SELECT bitmapToArray(bitmapSubsetInRange(bitmapBuild([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,100,200,500]), toUInt32(30), toUInt32(200))) AS res;"], "Category": ["Bitmap Functions"], "index": 351, "vector_txt": "351:Feature: bitmapSubsetInRange(bitmap, range_start, range_end)\nDescription: bitmapSubsetInRangeReturns the subset of a bitmap with bits within a value interval.SyntaxbitmapSubsetInRange(bitmap, range_start, range_end)Argumentsbitmap \u2013 Bitmap object.range_start \u2013 Start of the range (inclusive). UInt32.range_end \u2013 End of the range (exclusive). UInt32.\nExamples: SELECT bitmapToArray(bitmapSubsetInRange(bitmapBuild([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,100,200,500]), toUInt32(30), toUInt32(200))) AS res;\nCategory: Bitmap Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bitmap-functions"], "Title": ["bitmapSubsetLimit"], "Feature": ["bitmapSubsetLimit(bitmap, range_start, cardinality_limit)"], "Description": ["bitmapSubsetLimit", "Returns a subset of a bitmap with smallest bit value range_start and at most cardinality_limit elements.", "Syntax", "bitmapSubsetLimit(bitmap, range_start, cardinality_limit)", "Arguments", "bitmap \u2013 Bitmap object.range_start \u2013 Start of the range (inclusive). UInt32.cardinality_limit \u2013 Maximum cardinality of the subset. UInt32."], "Examples": ["SELECT bitmapToArray(bitmapSubsetLimit(bitmapBuild([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,100,200,500]), toUInt32(30), toUInt32(200))) AS res;"], "Category": ["Bitmap Functions"], "index": 352, "vector_txt": "352:Feature: bitmapSubsetLimit(bitmap, range_start, cardinality_limit)\nDescription: bitmapSubsetLimitReturns a subset of a bitmap with smallest bit value range_start and at most cardinality_limit elements.SyntaxbitmapSubsetLimit(bitmap, range_start, cardinality_limit)Argumentsbitmap \u2013 Bitmap object.range_start \u2013 Start of the range (inclusive). UInt32.cardinality_limit \u2013 Maximum cardinality of the subset. UInt32.\nExamples: SELECT bitmapToArray(bitmapSubsetLimit(bitmapBuild([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,100,200,500]), toUInt32(30), toUInt32(200))) AS res;\nCategory: Bitmap Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bitmap-functions"], "Title": ["subBitmap"], "Feature": ["subBitmap(bitmap, offset, cardinality_limit)"], "Description": ["subBitmap", "Returns a subset of the bitmap, starting from position offset. The maximum cardinality of the returned bitmap is cardinality_limit.", "Syntax", "subBitmap(bitmap, offset, cardinality_limit)", "Arguments", "bitmap \u2013 The bitmap. Bitmap object.offset \u2013 The position of the first element of the subset. UInt32.cardinality_limit \u2013 The maximum number of elements in the subset. UInt32."], "Examples": ["SELECT bitmapToArray(subBitmap(bitmapBuild([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,100,200,500]), toUInt32(10), toUInt32(10))) AS res;"], "Category": ["Bitmap Functions"], "index": 353, "vector_txt": "353:Feature: subBitmap(bitmap, offset, cardinality_limit)\nDescription: subBitmapReturns a subset of the bitmap, starting from position offset. The maximum cardinality of the returned bitmap is cardinality_limit.SyntaxsubBitmap(bitmap, offset, cardinality_limit)Argumentsbitmap \u2013 The bitmap. Bitmap object.offset \u2013 The position of the first element of the subset. UInt32.cardinality_limit \u2013 The maximum number of elements in the subset. UInt32.\nExamples: SELECT bitmapToArray(subBitmap(bitmapBuild([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,100,200,500]), toUInt32(10), toUInt32(10))) AS res;\nCategory: Bitmap Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bitmap-functions"], "Title": ["bitmapContains"], "Feature": ["bitmapContains(bitmap, needle)"], "Description": ["bitmapContains", "Checks whether the bitmap contains an element.", "bitmapContains(bitmap, needle)", "Arguments", "bitmap \u2013 Bitmap object.needle \u2013 Searched bit value. UInt32.", "Returned values", "0 \u2014 If bitmap does not contain needle. UInt8.1 \u2014 If bitmap contains needle. UInt8."], "Examples": ["SELECT bitmapContains(bitmapBuild([1,5,7,9]), toUInt32(9)) AS res;"], "Category": ["Bitmap Functions"], "index": 354, "vector_txt": "354:Feature: bitmapContains(bitmap, needle)\nDescription: bitmapContainsChecks whether the bitmap contains an element.bitmapContains(bitmap, needle)Argumentsbitmap \u2013 Bitmap object.needle \u2013 Searched bit value. UInt32.Returned values0 \u2014 If bitmap does not contain needle. UInt8.1 \u2014 If bitmap contains needle. UInt8.\nExamples: SELECT bitmapContains(bitmapBuild([1,5,7,9]), toUInt32(9)) AS res;\nCategory: Bitmap Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bitmap-functions"], "Title": ["bitmapHasAny"], "Feature": ["bitmapHasAny(bitmap1, bitmap2)"], "Description": ["bitmapHasAny", "Checks whether two bitmaps intersect.", "If bitmap2 contains exactly one element, consider using bitmapContains instead as it works more efficiently.", "Syntax", "bitmapHasAny(bitmap1, bitmap2)", "Arguments", "bitmap1 \u2013 Bitmap object 1.bitmap2 \u2013 Bitmap object 2.", "Return values", "1, if bitmap1 and bitmap2 have at least one shared element.0, otherwise."], "Examples": ["SELECT bitmapHasAny(bitmapBuild([1,2,3]),bitmapBuild([3,4,5])) AS res;"], "Category": ["Bitmap Functions"], "index": 355, "vector_txt": "355:Feature: bitmapHasAny(bitmap1, bitmap2)\nDescription: bitmapHasAnyChecks whether two bitmaps intersect.If bitmap2 contains exactly one element, consider using bitmapContains instead as it works more efficiently.SyntaxbitmapHasAny(bitmap1, bitmap2)Argumentsbitmap1 \u2013 Bitmap object 1.bitmap2 \u2013 Bitmap object 2.Return values1, if bitmap1 and bitmap2 have at least one shared element.0, otherwise.\nExamples: SELECT bitmapHasAny(bitmapBuild([1,2,3]),bitmapBuild([3,4,5])) AS res;\nCategory: Bitmap Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bitmap-functions"], "Title": ["bitmapHasAll"], "Feature": ["bitmapHasAll(bitmap1, bitmap2)"], "Description": ["bitmapHasAll", "Returns 1 if the first bitmap contains all elements of the second bitmap, otherwise 0.\nIf the second bitmap is empty, returns 1.", "Also see hasAll(array, array).", "Syntax", "bitmapHasAll(bitmap1, bitmap2)", "Arguments", "bitmap1 \u2013 Bitmap object 1.bitmap2 \u2013 Bitmap object 2."], "Examples": ["SELECT bitmapHasAll(bitmapBuild([1,2,3]),bitmapBuild([3,4,5])) AS res;"], "Category": ["Bitmap Functions"], "index": 356, "vector_txt": "356:Feature: bitmapHasAll(bitmap1, bitmap2)\nDescription: bitmapHasAllReturns 1 if the first bitmap contains all elements of the second bitmap, otherwise 0.\nIf the second bitmap is empty, returns 1.Also see hasAll(array, array).SyntaxbitmapHasAll(bitmap1, bitmap2)Argumentsbitmap1 \u2013 Bitmap object 1.bitmap2 \u2013 Bitmap object 2.\nExamples: SELECT bitmapHasAll(bitmapBuild([1,2,3]),bitmapBuild([3,4,5])) AS res;\nCategory: Bitmap Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bitmap-functions"], "Title": ["bitmapCardinality"], "Feature": ["bitmapCardinality(bitmap)"], "Description": ["bitmapCardinality", "Returns the cardinality of a bitmap.", "Syntax", "bitmapCardinality(bitmap)", "Arguments", "bitmap \u2013 Bitmap object."], "Examples": ["SELECT bitmapCardinality(bitmapBuild([1, 2, 3, 4, 5])) AS res;"], "Category": ["Bitmap Functions"], "index": 357, "vector_txt": "357:Feature: bitmapCardinality(bitmap)\nDescription: bitmapCardinalityReturns the cardinality of a bitmap.SyntaxbitmapCardinality(bitmap)Argumentsbitmap \u2013 Bitmap object.\nExamples: SELECT bitmapCardinality(bitmapBuild([1, 2, 3, 4, 5])) AS res;\nCategory: Bitmap Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/arithmetic-functions"], "Title": ["negate"], "Feature": ["negate(a)"], "Description": ["negate", "Negates a value a. The result is always signed.", "Syntax", "negate(a)", "Alias: -a"], "Examples": ["negate(a)"], "Category": ["Arithmetic Functions"], "index": 358, "vector_txt": "358:Feature: negate(a)\nDescription: negateNegates a value a. The result is always signed.Syntaxnegate(a)Alias: -a\nExamples: negate(a)\nCategory: Arithmetic Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bitmap-functions"], "Title": ["bitmapMin"], "Feature": ["bitmapMin(bitmap)"], "Description": ["bitmapMin", "Computes the smallest bit set in a bitmap, or UINT32_MAX if the bitmap is empty.", "Syntax", "bitmapMin(bitmap)", "Arguments", "bitmap \u2013 Bitmap object."], "Examples": ["SELECT bitmapMin(bitmapBuild([1, 2, 3, 4, 5])) AS res;"], "Category": ["Bitmap Functions"], "index": 359, "vector_txt": "359:Feature: bitmapMin(bitmap)\nDescription: bitmapMinComputes the smallest bit set in a bitmap, or UINT32_MAX if the bitmap is empty.SyntaxbitmapMin(bitmap)Argumentsbitmap \u2013 Bitmap object.\nExamples: SELECT bitmapMin(bitmapBuild([1, 2, 3, 4, 5])) AS res;\nCategory: Bitmap Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bitmap-functions"], "Title": ["bitmapMax"], "Feature": ["bitmapMax(bitmap)"], "Description": ["bitmapMax", "Computes the greatest bit set in a bitmap, or 0 if the bitmap is empty.", "Syntax", "bitmapMax(bitmap)", "Arguments", "bitmap \u2013 Bitmap object."], "Examples": ["SELECT bitmapMax(bitmapBuild([1, 2, 3, 4, 5])) AS res;"], "Category": ["Bitmap Functions"], "index": 360, "vector_txt": "360:Feature: bitmapMax(bitmap)\nDescription: bitmapMaxComputes the greatest bit set in a bitmap, or 0 if the bitmap is empty.SyntaxbitmapMax(bitmap)Argumentsbitmap \u2013 Bitmap object.\nExamples: SELECT bitmapMax(bitmapBuild([1, 2, 3, 4, 5])) AS res;\nCategory: Bitmap Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bitmap-functions"], "Title": ["bitmapTransform"], "Feature": ["bitmapTransform(bitmap, from_array, to_array)"], "Description": ["bitmapTransform", "Replaces at most N bits in a bitmap. The old and new value of the i-th replaced bit is given by from_array[i] and to_array[i].", "The result depends on the array ordering if from_array and to_array.", "Syntax", "bitmapTransform(bitmap, from_array, to_array)", "Arguments", "bitmap \u2013 Bitmap object.from_array \u2013 UInt32 array. For idx in range [0, from_array.size()), if bitmap contains from_array[idx], then replace it with to_array[idx].to_array \u2013 UInt32 array with the same size as from_array."], "Examples": ["SELECT bitmapToArray(bitmapTransform(bitmapBuild([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), cast([5,999,2] as Array(UInt32)), cast([2,888,20] as Array(UInt32)))) AS res;"], "Category": ["Bitmap Functions"], "index": 361, "vector_txt": "361:Feature: bitmapTransform(bitmap, from_array, to_array)\nDescription: bitmapTransformReplaces at most N bits in a bitmap. The old and new value of the i-th replaced bit is given by from_array[i] and to_array[i].The result depends on the array ordering if from_array and to_array.SyntaxbitmapTransform(bitmap, from_array, to_array)Argumentsbitmap \u2013 Bitmap object.from_array \u2013 UInt32 array. For idx in range [0, from_array.size()), if bitmap contains from_array[idx], then replace it with to_array[idx].to_array \u2013 UInt32 array with the same size as from_array.\nExamples: SELECT bitmapToArray(bitmapTransform(bitmapBuild([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), cast([5,999,2] as Array(UInt32)), cast([2,888,20] as Array(UInt32)))) AS res;\nCategory: Bitmap Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bitmap-functions"], "Title": ["bitmapAnd"], "Feature": ["bitmapAnd(bitmap,bitmap)"], "Description": ["bitmapAnd", "Computes the logical conjunction of two bitmaps.", "Syntax", "bitmapAnd(bitmap,bitmap)", "Arguments", "bitmap \u2013 Bitmap object."], "Examples": ["SELECT bitmapToArray(bitmapAnd(bitmapBuild([1,2,3]),bitmapBuild([3,4,5]))) AS res;"], "Category": ["Bitmap Functions"], "index": 362, "vector_txt": "362:Feature: bitmapAnd(bitmap,bitmap)\nDescription: bitmapAndComputes the logical conjunction of two bitmaps.SyntaxbitmapAnd(bitmap,bitmap)Argumentsbitmap \u2013 Bitmap object.\nExamples: SELECT bitmapToArray(bitmapAnd(bitmapBuild([1,2,3]),bitmapBuild([3,4,5]))) AS res;\nCategory: Bitmap Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bitmap-functions"], "Title": ["bitmapOr"], "Feature": ["bitmapOr(bitmap,bitmap)"], "Description": ["bitmapOr", "Computes the logical disjunction of two bitmaps.", "Syntax", "bitmapOr(bitmap,bitmap)", "Arguments", "bitmap \u2013 Bitmap object."], "Examples": ["SELECT bitmapToArray(bitmapOr(bitmapBuild([1,2,3]),bitmapBuild([3,4,5]))) AS res;"], "Category": ["Bitmap Functions"], "index": 363, "vector_txt": "363:Feature: bitmapOr(bitmap,bitmap)\nDescription: bitmapOrComputes the logical disjunction of two bitmaps.SyntaxbitmapOr(bitmap,bitmap)Argumentsbitmap \u2013 Bitmap object.\nExamples: SELECT bitmapToArray(bitmapOr(bitmapBuild([1,2,3]),bitmapBuild([3,4,5]))) AS res;\nCategory: Bitmap Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bitmap-functions"], "Title": ["bitmapXor"], "Feature": ["bitmapXor(bitmap,bitmap)"], "Description": ["bitmapXor", "Xor-s two bitmaps.", "Syntax", "bitmapXor(bitmap,bitmap)", "Arguments", "bitmap \u2013 Bitmap object."], "Examples": ["SELECT bitmapToArray(bitmapXor(bitmapBuild([1,2,3]),bitmapBuild([3,4,5]))) AS res;"], "Category": ["Bitmap Functions"], "index": 364, "vector_txt": "364:Feature: bitmapXor(bitmap,bitmap)\nDescription: bitmapXorXor-s two bitmaps.SyntaxbitmapXor(bitmap,bitmap)Argumentsbitmap \u2013 Bitmap object.\nExamples: SELECT bitmapToArray(bitmapXor(bitmapBuild([1,2,3]),bitmapBuild([3,4,5]))) AS res;\nCategory: Bitmap Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bitmap-functions"], "Title": ["bitmapAndnot"], "Feature": ["bitmapAndnot(bitmap,bitmap)"], "Description": ["bitmapAndnot", "Computes the logical conjunction of two bitmaps and negates the result.", "Syntax", "bitmapAndnot(bitmap,bitmap)", "Arguments", "bitmap \u2013 Bitmap object."], "Examples": ["SELECT bitmapToArray(bitmapAndnot(bitmapBuild([1,2,3]),bitmapBuild([3,4,5]))) AS res;"], "Category": ["Bitmap Functions"], "index": 365, "vector_txt": "365:Feature: bitmapAndnot(bitmap,bitmap)\nDescription: bitmapAndnotComputes the logical conjunction of two bitmaps and negates the result.SyntaxbitmapAndnot(bitmap,bitmap)Argumentsbitmap \u2013 Bitmap object.\nExamples: SELECT bitmapToArray(bitmapAndnot(bitmapBuild([1,2,3]),bitmapBuild([3,4,5]))) AS res;\nCategory: Bitmap Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bitmap-functions"], "Title": ["bitmapAndCardinality"], "Feature": ["bitmapAndCardinality(bitmap,bitmap)"], "Description": ["bitmapAndCardinality", "Returns the cardinality of the logical conjunction of two bitmaps.", "Syntax", "bitmapAndCardinality(bitmap,bitmap)", "Arguments", "bitmap \u2013 Bitmap object."], "Examples": ["SELECT bitmapAndCardinality(bitmapBuild([1,2,3]),bitmapBuild([3,4,5])) AS res;"], "Category": ["Bitmap Functions"], "index": 366, "vector_txt": "366:Feature: bitmapAndCardinality(bitmap,bitmap)\nDescription: bitmapAndCardinalityReturns the cardinality of the logical conjunction of two bitmaps.SyntaxbitmapAndCardinality(bitmap,bitmap)Argumentsbitmap \u2013 Bitmap object.\nExamples: SELECT bitmapAndCardinality(bitmapBuild([1,2,3]),bitmapBuild([3,4,5])) AS res;\nCategory: Bitmap Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bitmap-functions"], "Title": ["bitmapOrCardinality"], "Feature": ["bitmapOrCardinality(bitmap,bitmap)"], "Description": ["bitmapOrCardinality", "Returns the cardinality of the logical disjunction of two bitmaps.", "bitmapOrCardinality(bitmap,bitmap)", "Arguments", "bitmap \u2013 Bitmap object."], "Examples": ["SELECT bitmapOrCardinality(bitmapBuild([1,2,3]),bitmapBuild([3,4,5])) AS res;"], "Category": ["Bitmap Functions"], "index": 367, "vector_txt": "367:Feature: bitmapOrCardinality(bitmap,bitmap)\nDescription: bitmapOrCardinalityReturns the cardinality of the logical disjunction of two bitmaps.bitmapOrCardinality(bitmap,bitmap)Argumentsbitmap \u2013 Bitmap object.\nExamples: SELECT bitmapOrCardinality(bitmapBuild([1,2,3]),bitmapBuild([3,4,5])) AS res;\nCategory: Bitmap Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bitmap-functions"], "Title": ["bitmapXorCardinality"], "Feature": ["bitmapXorCardinality(bitmap,bitmap)"], "Description": ["bitmapXorCardinality", "Returns the cardinality of the XOR of two bitmaps.", "bitmapXorCardinality(bitmap,bitmap)", "Arguments", "bitmap \u2013 Bitmap object."], "Examples": ["SELECT bitmapXorCardinality(bitmapBuild([1,2,3]),bitmapBuild([3,4,5])) AS res;"], "Category": ["Bitmap Functions"], "index": 368, "vector_txt": "368:Feature: bitmapXorCardinality(bitmap,bitmap)\nDescription: bitmapXorCardinalityReturns the cardinality of the XOR of two bitmaps.bitmapXorCardinality(bitmap,bitmap)Argumentsbitmap \u2013 Bitmap object.\nExamples: SELECT bitmapXorCardinality(bitmapBuild([1,2,3]),bitmapBuild([3,4,5])) AS res;\nCategory: Bitmap Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/arithmetic-functions"], "Title": ["abs"], "Feature": ["abs(a)"], "Description": ["abs", "Calculates the absolute value of a. Has no effect if a is of an unsigned type. If a is of a signed type, it returns an unsigned number.", "Syntax", "abs(a)"], "Examples": ["abs(a)"], "Category": ["Arithmetic Functions"], "index": 369, "vector_txt": "369:Feature: abs(a)\nDescription: absCalculates the absolute value of a. Has no effect if a is of an unsigned type. If a is of a signed type, it returns an unsigned number.Syntaxabs(a)\nExamples: abs(a)\nCategory: Arithmetic Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bitmap-functions"], "Title": ["bitmapAndnotCardinality"], "Feature": ["bitmapAndnotCardinality(bitmap,bitmap)"], "Description": ["bitmapAndnotCardinality", "Returns the cardinality of the AND-NOT operation of two bitmaps.", "bitmapAndnotCardinality(bitmap,bitmap)", "Arguments", "bitmap \u2013 Bitmap object."], "Examples": ["SELECT bitmapAndnotCardinality(bitmapBuild([1,2,3]),bitmapBuild([3,4,5])) AS res;"], "Category": ["Bitmap Functions"], "index": 370, "vector_txt": "370:Feature: bitmapAndnotCardinality(bitmap,bitmap)\nDescription: bitmapAndnotCardinalityReturns the cardinality of the AND-NOT operation of two bitmaps.bitmapAndnotCardinality(bitmap,bitmap)Argumentsbitmap \u2013 Bitmap object.\nExamples: SELECT bitmapAndnotCardinality(bitmapBuild([1,2,3]),bitmapBuild([3,4,5])) AS res;\nCategory: Bitmap Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/comparison-functions"], "Title": ["equals, =, == operators"], "Feature": ["equals(a, b)"], "Description": ["equals, =, == operators", "Syntax", "equals(a, b)", "Alias:", "a = b (operator)a == b (operator)"], "Examples": ["equals(a, b)"], "Category": ["Comparison Functions"], "index": 371, "vector_txt": "371:Feature: equals(a, b)\nDescription: equals, =, == operatorsSyntaxequals(a, b)Alias:a = b (operator)a == b (operator)\nExamples: equals(a, b)\nCategory: Comparison Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/comparison-functions"], "Title": ["notEquals, !=, <> operators"], "Feature": ["notEquals(a, b)"], "Description": ["notEquals, !=, <> operators", "Syntax", "notEquals(a, b)", "Alias:", "a != b (operator)a <> b (operator)"], "Examples": ["notEquals(a, b)"], "Category": ["Comparison Functions"], "index": 372, "vector_txt": "372:Feature: notEquals(a, b)\nDescription: notEquals, !=, <> operatorsSyntaxnotEquals(a, b)Alias:a != b (operator)a <> b (operator)\nExamples: notEquals(a, b)\nCategory: Comparison Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/comparison-functions"], "Title": ["less, < operator"], "Feature": ["less(a, b)"], "Description": ["less, < operator", "Syntax", "less(a, b)", "Alias:", "a < b (operator)"], "Examples": ["less(a, b)"], "Category": ["Comparison Functions"], "index": 373, "vector_txt": "373:Feature: less(a, b)\nDescription: less, < operatorSyntaxless(a, b)Alias:a < b (operator)\nExamples: less(a, b)\nCategory: Comparison Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/comparison-functions"], "Title": ["greater, > operator"], "Feature": ["greater(a, b)"], "Description": ["greater, > operator", "Syntax", "greater(a, b)", "Alias:", "a > b (operator)"], "Examples": ["greater(a, b)"], "Category": ["Comparison Functions"], "index": 374, "vector_txt": "374:Feature: greater(a, b)\nDescription: greater, > operatorSyntaxgreater(a, b)Alias:a > b (operator)\nExamples: greater(a, b)\nCategory: Comparison Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/comparison-functions"], "Title": ["lessOrEquals, <= operator"], "Feature": ["lessOrEquals(a, b)"], "Description": ["lessOrEquals, <= operator", "Syntax", "lessOrEquals(a, b)", "Alias:", "a <= b (operator)"], "Examples": ["lessOrEquals(a, b)"], "Category": ["Comparison Functions"], "index": 375, "vector_txt": "375:Feature: lessOrEquals(a, b)\nDescription: lessOrEquals, <= operatorSyntaxlessOrEquals(a, b)Alias:a <= b (operator)\nExamples: lessOrEquals(a, b)\nCategory: Comparison Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/comparison-functions"], "Title": ["greaterOrEquals, >= operator"], "Feature": ["greaterOrEquals(a, b)"], "Description": ["greaterOrEquals, >= operator", "Syntax", "greaterOrEquals(a, b)", "Alias:", "a >= b (operator)"], "Examples": ["greaterOrEquals(a, b)"], "Category": ["Comparison Functions"], "index": 376, "vector_txt": "376:Feature: greaterOrEquals(a, b)\nDescription: greaterOrEquals, >= operatorSyntaxgreaterOrEquals(a, b)Alias:a >= b (operator)\nExamples: greaterOrEquals(a, b)\nCategory: Comparison Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/conditional-functions"], "Title": ["if"], "Feature": ["if(cond, then, else)"], "Description": ["if", "Performs conditional branching.", "If the condition cond evaluates to a non-zero value, the function returns the result of the expression then. If cond evaluates to zero or NULL, then the result of the else expression is returned.", "Setting short_circuit_function_evaluation controls whether short-circuit evaluation is used. If enabled, the then expression is evaluated only on rows where cond is true and the else expression where cond is false. For example, with short-circuit evaluation, no division-by-zero exception is thrown when executing the query SELECT if(number = 0, 0, intDiv(42, number)) FROM numbers(10).", "then and else must be of a similar type.", "Syntax", "if(cond, then, else)", "Alias: cond ? then : else (ternary operator)", "Arguments", "cond \u2013 The evaluated condition. UInt8, Nullable(UInt8) or NULL.then \u2013 The expression returned if condition is true.else \u2013 The expression returned if condition is false or NULL.", "Returned values", "The result of either the then and else expressions, depending on condition cond."], "Examples": ["SELECT if(1, plus(2, 2), plus(2, 6));"], "Category": ["Conditional Functions"], "index": 377, "vector_txt": "377:Feature: if(cond, then, else)\nDescription: ifPerforms conditional branching.If the condition cond evaluates to a non-zero value, the function returns the result of the expression then. If cond evaluates to zero or NULL, then the result of the else expression is returned.Setting short_circuit_function_evaluation controls whether short-circuit evaluation is used. If enabled, the then expression is evaluated only on rows where cond is true and the else expression where cond is false. For example, with short-circuit evaluation, no division-by-zero exception is thrown when executing the query SELECT if(number = 0, 0, intDiv(42, number)) FROM numbers(10).then and else must be of a similar type.Syntaxif(cond, then, else)Alias: cond ? then : else (ternary operator)Argumentscond \u2013 The evaluated condition. UInt8, Nullable(UInt8) or NULL.then \u2013 The expression returned if condition is true.else \u2013 The expression returned if condition is false or NULL.Returned valuesThe result of either the then and else expressions, depending on condition cond.\nExamples: SELECT if(1, plus(2, 2), plus(2, 6));\nCategory: Conditional Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/conditional-functions"], "Title": ["multiIf"], "Feature": ["multiIf(cond_1, then_1, cond_2, then_2, ..., else)"], "Description": ["multiIf", "Allows to write the CASE operator more compactly in the query.", "Syntax", "multiIf(cond_1, then_1, cond_2, then_2, ..., else)", "Setting short_circuit_function_evaluation controls whether short-circuit evaluation is used. If enabled, the then_i expression is evaluated only on rows where ((NOT cond_1) AND (NOT cond_2) AND ... AND (NOT cond_{i-1}) AND cond_i) is true, cond_i will be evaluated only on rows where ((NOT cond_1) AND (NOT cond_2) AND ... AND (NOT cond_{i-1})) is true. For example, with short-circuit evaluation, no division-by-zero exception is thrown when executing the query SELECT multiIf(number = 2, intDiv(1, number), number = 5) FROM numbers(10).", "Arguments", "The function accepts 2N+1 parameters:", "cond_N \u2014 The N-th evaluated condition which controls if then_N is returned.then_N \u2014 The result of the function when cond_N is true.else \u2014 The result of the function if none of conditions is true.", "Returned values", "The result of either any of the then_N or else expressions, depending on the conditions cond_N."], "Examples": ["SELECT    left,    right,    multiIf(left < right, 'left is smaller', left > right, 'left is greater', left = right, 'Both equal', 'Null value') AS resultFROM LEFT_RIGHT\u250c\u2500left\u2500\u252c\u2500right\u2500\u252c\u2500result\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502     4 \u2502 Null value      \u2502\u2502    1 \u2502     3 \u2502 left is smaller \u2502\u2502    2 \u2502     2 \u2502 Both equal      \u2502\u2502    3 \u2502     1 \u2502 left is greater \u2502\u2502    4 \u2502  \u1d3a\u1d41\u1d38\u1d38 \u2502 Null value      \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Category": ["Conditional Functions"], "index": 378, "vector_txt": "378:Feature: multiIf(cond_1, then_1, cond_2, then_2, ..., else)\nDescription: multiIfAllows to write the CASE operator more compactly in the query.SyntaxmultiIf(cond_1, then_1, cond_2, then_2, ..., else)Setting short_circuit_function_evaluation controls whether short-circuit evaluation is used. If enabled, the then_i expression is evaluated only on rows where ((NOT cond_1) AND (NOT cond_2) AND ... AND (NOT cond_{i-1}) AND cond_i) is true, cond_i will be evaluated only on rows where ((NOT cond_1) AND (NOT cond_2) AND ... AND (NOT cond_{i-1})) is true. For example, with short-circuit evaluation, no division-by-zero exception is thrown when executing the query SELECT multiIf(number = 2, intDiv(1, number), number = 5) FROM numbers(10).ArgumentsThe function accepts 2N+1 parameters:cond_N \u2014 The N-th evaluated condition which controls if then_N is returned.then_N \u2014 The result of the function when cond_N is true.else \u2014 The result of the function if none of conditions is true.Returned valuesThe result of either any of the then_N or else expressions, depending on the conditions cond_N.\nExamples: SELECT    left,    right,    multiIf(left < right, 'left is smaller', left > right, 'left is greater', left = right, 'Both equal', 'Null value') AS resultFROM LEFT_RIGHT\u250c\u2500left\u2500\u252c\u2500right\u2500\u252c\u2500result\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502     4 \u2502 Null value      \u2502\u2502    1 \u2502     3 \u2502 left is smaller \u2502\u2502    2 \u2502     2 \u2502 Both equal      \u2502\u2502    3 \u2502     1 \u2502 left is greater \u2502\u2502    4 \u2502  \u1d3a\u1d41\u1d38\u1d38 \u2502 Null value      \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nCategory: Conditional Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/conditional-functions"], "Title": ["Using Conditional Results Directly"], "Feature": ["Using Conditional Results Directly"], "Description": ["Using Conditional Results Directly", "Conditionals always result to 0, 1 or NULL. So you can use conditional results directly like this:", "SELECT left < right AS is_smallFROM LEFT_RIGHT\u250c\u2500is_small\u2500\u2510\u2502     \u1d3a\u1d41\u1d38\u1d38 \u2502\u2502        1 \u2502\u2502        0 \u2502\u2502        0 \u2502\u2502     \u1d3a\u1d41\u1d38\u1d38 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Examples": ["SELECT left < right AS is_smallFROM LEFT_RIGHT\u250c\u2500is_small\u2500\u2510\u2502     \u1d3a\u1d41\u1d38\u1d38 \u2502\u2502        1 \u2502\u2502        0 \u2502\u2502        0 \u2502\u2502     \u1d3a\u1d41\u1d38\u1d38 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Category": ["Conditional Functions"], "index": 379, "vector_txt": "379:Feature: Using Conditional Results Directly\nDescription: Using Conditional Results DirectlyConditionals always result to 0, 1 or NULL. So you can use conditional results directly like this:SELECT left < right AS is_smallFROM LEFT_RIGHT\u250c\u2500is_small\u2500\u2510\u2502     \u1d3a\u1d41\u1d38\u1d38 \u2502\u2502        1 \u2502\u2502        0 \u2502\u2502        0 \u2502\u2502     \u1d3a\u1d41\u1d38\u1d38 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nExamples: SELECT left < right AS is_smallFROM LEFT_RIGHT\u250c\u2500is_small\u2500\u2510\u2502     \u1d3a\u1d41\u1d38\u1d38 \u2502\u2502        1 \u2502\u2502        0 \u2502\u2502        0 \u2502\u2502     \u1d3a\u1d41\u1d38\u1d38 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nCategory: Conditional Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/arithmetic-functions"], "Title": ["gcd"], "Feature": ["gcd(a, b)"], "Description": ["gcd", "Returns the greatest common divisor of two values a and b.", "An exception is thrown when dividing by zero or when dividing a minimal negative number by minus one.", "Syntax", "gcd(a, b)"], "Examples": ["gcd(a, b)"], "Category": ["Arithmetic Functions"], "index": 380, "vector_txt": "380:Feature: gcd(a, b)\nDescription: gcdReturns the greatest common divisor of two values a and b.An exception is thrown when dividing by zero or when dividing a minimal negative number by minus one.Syntaxgcd(a, b)\nExamples: gcd(a, b)\nCategory: Arithmetic Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/conditional-functions"], "Title": ["NULL Values in Conditionals"], "Feature": ["NULL Values in Conditionals"], "Description": ["NULL Values in Conditionals", "When NULL values are involved in conditionals, the result will also be NULL.", "SELECT    NULL < 1,    2 < NULL,    NULL < NULL,    NULL = NULL\u250c\u2500less(NULL, 1)\u2500\u252c\u2500less(2, NULL)\u2500\u252c\u2500less(NULL, NULL)\u2500\u252c\u2500equals(NULL, NULL)\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38          \u2502 \u1d3a\u1d41\u1d38\u1d38          \u2502 \u1d3a\u1d41\u1d38\u1d38             \u2502 \u1d3a\u1d41\u1d38\u1d38               \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "So you should construct your queries carefully if the types are Nullable.", "The following example demonstrates this by failing to add equals condition to multiIf.", "SELECT    left,    right,    multiIf(left < right, 'left is smaller', left > right, 'right is smaller', 'Both equal') AS faulty_resultFROM LEFT_RIGHT\u250c\u2500left\u2500\u252c\u2500right\u2500\u252c\u2500faulty_result\u2500\u2500\u2500\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502     4 \u2502 Both equal       \u2502\u2502    1 \u2502     3 \u2502 left is smaller  \u2502\u2502    2 \u2502     2 \u2502 Both equal       \u2502\u2502    3 \u2502     1 \u2502 right is smaller \u2502\u2502    4 \u2502  \u1d3a\u1d41\u1d38\u1d38 \u2502 Both equal       \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Examples": ["SELECT    NULL < 1,    2 < NULL,    NULL < NULL,    NULL = NULL\u250c\u2500less(NULL, 1)\u2500\u252c\u2500less(2, NULL)\u2500\u252c\u2500less(NULL, NULL)\u2500\u252c\u2500equals(NULL, NULL)\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38          \u2502 \u1d3a\u1d41\u1d38\u1d38          \u2502 \u1d3a\u1d41\u1d38\u1d38             \u2502 \u1d3a\u1d41\u1d38\u1d38               \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "SELECT    left,    right,    multiIf(left < right, 'left is smaller', left > right, 'right is smaller', 'Both equal') AS faulty_resultFROM LEFT_RIGHT\u250c\u2500left\u2500\u252c\u2500right\u2500\u252c\u2500faulty_result\u2500\u2500\u2500\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502     4 \u2502 Both equal       \u2502\u2502    1 \u2502     3 \u2502 left is smaller  \u2502\u2502    2 \u2502     2 \u2502 Both equal       \u2502\u2502    3 \u2502     1 \u2502 right is smaller \u2502\u2502    4 \u2502  \u1d3a\u1d41\u1d38\u1d38 \u2502 Both equal       \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Category": ["Conditional Functions"], "index": 381, "vector_txt": "381:Feature: NULL Values in Conditionals\nDescription: NULL Values in ConditionalsWhen NULL values are involved in conditionals, the result will also be NULL.SELECT    NULL < 1,    2 < NULL,    NULL < NULL,    NULL = NULL\u250c\u2500less(NULL, 1)\u2500\u252c\u2500less(2, NULL)\u2500\u252c\u2500less(NULL, NULL)\u2500\u252c\u2500equals(NULL, NULL)\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38          \u2502 \u1d3a\u1d41\u1d38\u1d38          \u2502 \u1d3a\u1d41\u1d38\u1d38             \u2502 \u1d3a\u1d41\u1d38\u1d38               \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518So you should construct your queries carefully if the types are Nullable.The following example demonstrates this by failing to add equals condition to multiIf.SELECT    left,    right,    multiIf(left < right, 'left is smaller', left > right, 'right is smaller', 'Both equal') AS faulty_resultFROM LEFT_RIGHT\u250c\u2500left\u2500\u252c\u2500right\u2500\u252c\u2500faulty_result\u2500\u2500\u2500\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502     4 \u2502 Both equal       \u2502\u2502    1 \u2502     3 \u2502 left is smaller  \u2502\u2502    2 \u2502     2 \u2502 Both equal       \u2502\u2502    3 \u2502     1 \u2502 right is smaller \u2502\u2502    4 \u2502  \u1d3a\u1d41\u1d38\u1d38 \u2502 Both equal       \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nExamples: SELECT    NULL < 1,    2 < NULL,    NULL < NULL,    NULL = NULL\u250c\u2500less(NULL, 1)\u2500\u252c\u2500less(2, NULL)\u2500\u252c\u2500less(NULL, NULL)\u2500\u252c\u2500equals(NULL, NULL)\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38          \u2502 \u1d3a\u1d41\u1d38\u1d38          \u2502 \u1d3a\u1d41\u1d38\u1d38             \u2502 \u1d3a\u1d41\u1d38\u1d38               \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT    left,    right,    multiIf(left < right, 'left is smaller', left > right, 'right is smaller', 'Both equal') AS faulty_resultFROM LEFT_RIGHT\u250c\u2500left\u2500\u252c\u2500right\u2500\u252c\u2500faulty_result\u2500\u2500\u2500\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502     4 \u2502 Both equal       \u2502\u2502    1 \u2502     3 \u2502 left is smaller  \u2502\u2502    2 \u2502     2 \u2502 Both equal       \u2502\u2502    3 \u2502     1 \u2502 right is smaller \u2502\u2502    4 \u2502  \u1d3a\u1d41\u1d38\u1d38 \u2502 Both equal       \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nCategory: Conditional Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/conditional-functions"], "Title": ["greatest"], "Feature": ["greatest"], "Description": ["greatest", "Returns the greatest across a list of values.  All of the list members must be of comparable types."], "Examples": ["SELECT greatest(1, 2, toUInt8(3), 3.) result,  toTypeName(result) type;", "SELECT greatest(['hello'], ['there'], ['world'])", "SELECT greatest(toDateTime32(now() + toIntervalDay(1)), toDateTime64(now(), 3))"], "Category": ["Conditional Functions"], "index": 382, "vector_txt": "382:Feature: greatest\nDescription: greatestReturns the greatest across a list of values.  All of the list members must be of comparable types.\nExamples: SELECT greatest(1, 2, toUInt8(3), 3.) result,  toTypeName(result) type;SELECT greatest(['hello'], ['there'], ['world'])SELECT greatest(toDateTime32(now() + toIntervalDay(1)), toDateTime64(now(), 3))\nCategory: Conditional Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/conditional-functions"], "Title": ["least"], "Feature": ["least"], "Description": ["least", "Returns the least across a list of values.  All of the list members must be of comparable types."], "Examples": ["SELECT least(1, 2, toUInt8(3), 3.) result,  toTypeName(result) type;", "SELECT least(['hello'], ['there'], ['world'])", "SELECT least(toDateTime32(now() + toIntervalDay(1)), toDateTime64(now(), 3))"], "Category": ["Conditional Functions"], "index": 383, "vector_txt": "383:Feature: least\nDescription: leastReturns the least across a list of values.  All of the list members must be of comparable types.\nExamples: SELECT least(1, 2, toUInt8(3), 3.) result,  toTypeName(result) type;SELECT least(['hello'], ['there'], ['world'])SELECT least(toDateTime32(now() + toIntervalDay(1)), toDateTime64(now(), 3))\nCategory: Conditional Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/conditional-functions"], "Title": ["clamp"], "Feature": ["clamp(value, min, max)"], "Description": ["clamp", "Constrain the return value between A and B.", "Syntax", "clamp(value, min, max)", "Arguments", "value \u2013 Input value.min \u2013 Limit the lower bound.max \u2013 Limit the upper bound.", "Returned values", "If the value is less than the minimum value, return the minimum value; if it is greater than the maximum value, return the maximum value; otherwise, return the current value."], "Examples": ["SELECT clamp(1, 2, 3) result,  toTypeName(result) type;"], "Category": ["Conditional Functions"], "index": 384, "vector_txt": "384:Feature: clamp(value, min, max)\nDescription: clampConstrain the return value between A and B.Syntaxclamp(value, min, max)Argumentsvalue \u2013 Input value.min \u2013 Limit the lower bound.max \u2013 Limit the upper bound.Returned valuesIf the value is less than the minimum value, return the minimum value; if it is greater than the maximum value, return the maximum value; otherwise, return the current value.\nExamples: SELECT clamp(1, 2, 3) result,  toTypeName(result) type;\nCategory: Conditional Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["makeDate"], "Feature": ["makeDate(year, month, day);makeDate(year, day_of_year);"], "Description": ["makeDate", "Creates a Date", "from a year, month and day argument, orfrom a year and day of year argument.", "Syntax", "makeDate(year, month, day);makeDate(year, day_of_year);", "Alias:", "MAKEDATE(year, month, day);MAKEDATE(year, day_of_year);", "Arguments", "year \u2014 Year. Integer, Float or Decimal.month \u2014 Month. Integer, Float or Decimal.day \u2014 Day. Integer, Float or Decimal.day_of_year \u2014 Day of the year. Integer, Float or Decimal.", "Returned value", "A date created from the arguments. Date."], "Examples": ["SELECT makeDate(2023, 2, 28) AS Date;", "SELECT makeDate(2023, 42) AS Date;"], "Category": ["Dates and Times Functions"], "index": 385, "vector_txt": "385:Feature: makeDate(year, month, day);makeDate(year, day_of_year);\nDescription: makeDateCreates a Datefrom a year, month and day argument, orfrom a year and day of year argument.SyntaxmakeDate(year, month, day);makeDate(year, day_of_year);Alias:MAKEDATE(year, month, day);MAKEDATE(year, day_of_year);Argumentsyear \u2014 Year. Integer, Float or Decimal.month \u2014 Month. Integer, Float or Decimal.day \u2014 Day. Integer, Float or Decimal.day_of_year \u2014 Day of the year. Integer, Float or Decimal.Returned valueA date created from the arguments. Date.\nExamples: SELECT makeDate(2023, 2, 28) AS Date;SELECT makeDate(2023, 42) AS Date;\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["makeDate32"], "Feature": ["makeDate32(year, [month,] day)"], "Description": ["makeDate32", "Creates a date of type Date32 from a year, month, day (or optionally a year and a day).", "Syntax", "makeDate32(year, [month,] day)", "Arguments", "year \u2014 Year. Integer, Float or Decimal.month \u2014 Month (optional). Integer, Float or Decimal.day \u2014 Day. Integer, Float or Decimal.", "NoteIf month is omitted then day should take a value between 1 and 365, otherwise it should take a value between 1 and 31.", "Returned values", "A date created from the arguments. Date32."], "Examples": ["SELECT makeDate32(2024, 1, 1);", "SELECT makeDate32(2024, 100);"], "Category": ["Dates and Times Functions"], "index": 386, "vector_txt": "386:Feature: makeDate32(year, [month,] day)\nDescription: makeDate32Creates a date of type Date32 from a year, month, day (or optionally a year and a day).SyntaxmakeDate32(year, [month,] day)Argumentsyear \u2014 Year. Integer, Float or Decimal.month \u2014 Month (optional). Integer, Float or Decimal.day \u2014 Day. Integer, Float or Decimal.NoteIf month is omitted then day should take a value between 1 and 365, otherwise it should take a value between 1 and 31.Returned valuesA date created from the arguments. Date32.\nExamples: SELECT makeDate32(2024, 1, 1);SELECT makeDate32(2024, 100);\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["makeDateTime"], "Feature": ["makeDateTime(year, month, day, hour, minute, second[, timezone])"], "Description": ["makeDateTime", "Creates a DateTime from a year, month, day, hour, minute and second argument.", "Syntax", "makeDateTime(year, month, day, hour, minute, second[, timezone])", "Arguments", "year \u2014 Year. Integer, Float or Decimal.month \u2014 Month. Integer, Float or Decimal.day \u2014 Day. Integer, Float or Decimal.hour \u2014 Hour. Integer, Float or Decimal.minute \u2014 Minute. Integer, Float or Decimal.second \u2014 Second. Integer, Float or Decimal.timezone \u2014 Timezone for the returned value (optional).", "Returned value", "A date with time created from the arguments. DateTime."], "Examples": ["SELECT makeDateTime(2023, 2, 28, 17, 12, 33) AS DateTime;"], "Category": ["Dates and Times Functions"], "index": 387, "vector_txt": "387:Feature: makeDateTime(year, month, day, hour, minute, second[, timezone])\nDescription: makeDateTimeCreates a DateTime from a year, month, day, hour, minute and second argument.SyntaxmakeDateTime(year, month, day, hour, minute, second[, timezone])Argumentsyear \u2014 Year. Integer, Float or Decimal.month \u2014 Month. Integer, Float or Decimal.day \u2014 Day. Integer, Float or Decimal.hour \u2014 Hour. Integer, Float or Decimal.minute \u2014 Minute. Integer, Float or Decimal.second \u2014 Second. Integer, Float or Decimal.timezone \u2014 Timezone for the returned value (optional).Returned valueA date with time created from the arguments. DateTime.\nExamples: SELECT makeDateTime(2023, 2, 28, 17, 12, 33) AS DateTime;\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["makeDateTime64"], "Feature": ["makeDateTime64(year, month, day, hour, minute, second[, precision])"], "Description": ["makeDateTime64", "Creates a DateTime64 data type value from its components: year, month, day, hour, minute, second. With optional sub-second precision.", "Syntax", "makeDateTime64(year, month, day, hour, minute, second[, precision])", "Arguments", "year \u2014 Year (0-9999). Integer, Float or Decimal.month \u2014 Month (1-12). Integer, Float or Decimal.day \u2014 Day (1-31). Integer, Float or Decimal.hour \u2014 Hour (0-23). Integer, Float or Decimal.minute \u2014 Minute (0-59). Integer, Float or Decimal.second \u2014 Second (0-59). Integer, Float or Decimal.precision \u2014 Optional precision of the sub-second component (0-9). Integer.", "Returned value", "A date and time created from the supplied arguments. DateTime64.  "], "Examples": ["SELECT makeDateTime64(2023, 5, 15, 10, 30, 45, 779, 5);"], "Category": ["Dates and Times Functions"], "index": 388, "vector_txt": "388:Feature: makeDateTime64(year, month, day, hour, minute, second[, precision])\nDescription: makeDateTime64Creates a DateTime64 data type value from its components: year, month, day, hour, minute, second. With optional sub-second precision.SyntaxmakeDateTime64(year, month, day, hour, minute, second[, precision])Argumentsyear \u2014 Year (0-9999). Integer, Float or Decimal.month \u2014 Month (1-12). Integer, Float or Decimal.day \u2014 Day (1-31). Integer, Float or Decimal.hour \u2014 Hour (0-23). Integer, Float or Decimal.minute \u2014 Minute (0-59). Integer, Float or Decimal.second \u2014 Second (0-59). Integer, Float or Decimal.precision \u2014 Optional precision of the sub-second component (0-9). Integer.Returned valueA date and time created from the supplied arguments. DateTime64.  \nExamples: SELECT makeDateTime64(2023, 5, 15, 10, 30, 45, 779, 5);\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["timestamp"], "Feature": ["timestamp(expr[, expr_time])"], "Description": ["timestamp", "Converts the first argument 'expr' to type DateTime64(6).\nIf a second argument 'expr_time' is provided, it adds the specified time to the converted value.", "Syntax", "timestamp(expr[, expr_time])", "Alias: TIMESTAMP", "Arguments", "expr - Date or date with time. String.expr_time - Optional parameter. Time to add. String."], "Examples": ["SELECT timestamp('2023-12-31') as ts;", "SELECT timestamp('2023-12-31 12:00:00', '12:00:00.11') as ts;"], "Category": ["Dates and Times Functions"], "index": 389, "vector_txt": "389:Feature: timestamp(expr[, expr_time])\nDescription: timestampConverts the first argument 'expr' to type DateTime64(6).\nIf a second argument 'expr_time' is provided, it adds the specified time to the converted value.Syntaxtimestamp(expr[, expr_time])Alias: TIMESTAMPArgumentsexpr - Date or date with time. String.expr_time - Optional parameter. Time to add. String.\nExamples: SELECT timestamp('2023-12-31') as ts;SELECT timestamp('2023-12-31 12:00:00', '12:00:00.11') as ts;\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["timeZone"], "Feature": ["timeZone()"], "Description": ["timeZone", "Returns the timezone of the current session, i.e. the value of setting session_timezone.\nIf the function is executed in the context of a distributed table, then it generates a normal column with values relevant to each shard, otherwise it produces a constant value.", "Syntax", "timeZone()", "Alias: timezone.", "Returned value", "Timezone. String."], "Examples": ["SELECT timezone()"], "Category": ["Dates and Times Functions"], "index": 390, "vector_txt": "390:Feature: timeZone()\nDescription: timeZoneReturns the timezone of the current session, i.e. the value of setting session_timezone.\nIf the function is executed in the context of a distributed table, then it generates a normal column with values relevant to each shard, otherwise it produces a constant value.SyntaxtimeZone()Alias: timezone.Returned valueTimezone. String.\nExamples: SELECT timezone()\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/arithmetic-functions"], "Title": ["lcm(a, b)"], "Feature": ["lcm(a, b)"], "Description": ["lcm(a, b)", "Returns the least common multiple of two values a and b.", "An exception is thrown when dividing by zero or when dividing a minimal negative number by minus one.", "Syntax", "lcm(a, b)"], "Examples": ["lcm(a, b)"], "Category": ["Arithmetic Functions"], "index": 391, "vector_txt": "391:Feature: lcm(a, b)\nDescription: lcm(a, b)Returns the least common multiple of two values a and b.An exception is thrown when dividing by zero or when dividing a minimal negative number by minus one.Syntaxlcm(a, b)\nExamples: lcm(a, b)\nCategory: Arithmetic Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["serverTimeZone"], "Feature": ["serverTimeZone()"], "Description": ["serverTimeZone", "Returns the timezone of the server, i.e. the value of setting timezone.\nIf the function is executed in the context of a distributed table, then it generates a normal column with values relevant to each shard. Otherwise, it produces a constant value.", "Syntax", "serverTimeZone()", "Alias: serverTimezone.", "Returned value", "Timezone. String."], "Examples": ["SELECT serverTimeZone()"], "Category": ["Dates and Times Functions"], "index": 392, "vector_txt": "392:Feature: serverTimeZone()\nDescription: serverTimeZoneReturns the timezone of the server, i.e. the value of setting timezone.\nIf the function is executed in the context of a distributed table, then it generates a normal column with values relevant to each shard. Otherwise, it produces a constant value.SyntaxserverTimeZone()Alias: serverTimezone.Returned valueTimezone. String.\nExamples: SELECT serverTimeZone()\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toTimeZone"], "Feature": ["toTimezone(value, timezone)"], "Description": ["toTimeZone", "Converts a date or date with time to the specified time zone. Does not change the internal value (number of unix seconds) of the data, only the value's time zone attribute and the value's string representation changes.", "Syntax", "toTimezone(value, timezone)", "Alias: toTimezone.", "Arguments", "value \u2014 Time or date and time. DateTime64.timezone \u2014 Timezone for the returned value. String. This argument is a constant, because toTimezone changes the timezone of a column (timezone is an attribute of DateTime* types).", "Returned value", "Date and time. DateTime."], "Examples": ["SELECT toDateTime('2019-01-01 00:00:00', 'UTC') AS time_utc,    toTypeName(time_utc) AS type_utc,    toInt32(time_utc) AS int32utc,    toTimeZone(time_utc, 'Asia/Yekaterinburg') AS time_yekat,    toTypeName(time_yekat) AS type_yekat,    toInt32(time_yekat) AS int32yekat,    toTimeZone(time_utc, 'US/Samoa') AS time_samoa,    toTypeName(time_samoa) AS type_samoa,    toInt32(time_samoa) AS int32samoaFORMAT Vertical;"], "Category": ["Dates and Times Functions"], "index": 393, "vector_txt": "393:Feature: toTimezone(value, timezone)\nDescription: toTimeZoneConverts a date or date with time to the specified time zone. Does not change the internal value (number of unix seconds) of the data, only the value's time zone attribute and the value's string representation changes.SyntaxtoTimezone(value, timezone)Alias: toTimezone.Argumentsvalue \u2014 Time or date and time. DateTime64.timezone \u2014 Timezone for the returned value. String. This argument is a constant, because toTimezone changes the timezone of a column (timezone is an attribute of DateTime* types).Returned valueDate and time. DateTime.\nExamples: SELECT toDateTime('2019-01-01 00:00:00', 'UTC') AS time_utc,    toTypeName(time_utc) AS type_utc,    toInt32(time_utc) AS int32utc,    toTimeZone(time_utc, 'Asia/Yekaterinburg') AS time_yekat,    toTypeName(time_yekat) AS type_yekat,    toInt32(time_yekat) AS int32yekat,    toTimeZone(time_utc, 'US/Samoa') AS time_samoa,    toTypeName(time_samoa) AS type_samoa,    toInt32(time_samoa) AS int32samoaFORMAT Vertical;\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["timeZoneOf"], "Feature": ["timeZoneOf(value)"], "Description": ["timeZoneOf", "Returns the timezone name of DateTime or DateTime64 data types.", "Syntax", "timeZoneOf(value)", "Alias: timezoneOf.", "Arguments", "value \u2014 Date and time. DateTime or DateTime64.", "Returned value", "Timezone name. String."], "Examples": ["SELECT timezoneOf(now());"], "Category": ["Dates and Times Functions"], "index": 394, "vector_txt": "394:Feature: timeZoneOf(value)\nDescription: timeZoneOfReturns the timezone name of DateTime or DateTime64 data types.SyntaxtimeZoneOf(value)Alias: timezoneOf.Argumentsvalue \u2014 Date and time. DateTime or DateTime64.Returned valueTimezone name. String.\nExamples: SELECT timezoneOf(now());\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["timeZoneOffset"], "Feature": ["timeZoneOffset(value)"], "Description": ["timeZoneOffset", "Returns the timezone offset in seconds from UTC.\nThe function daylight saving time and historical timezone changes at the specified date and time into account.\nThe IANA timezone database is used to calculate the offset.", "Syntax", "timeZoneOffset(value)", "Alias: timezoneOffset.", "Arguments", "value \u2014 Date and time. DateTime or DateTime64.", "Returned value", "Offset from UTC in seconds. Int32."], "Examples": ["SELECT toDateTime('2021-04-21 10:20:30', 'America/New_York') AS Time, toTypeName(Time) AS Type,       timeZoneOffset(Time) AS Offset_in_seconds, (Offset_in_seconds / 3600) AS Offset_in_hours;"], "Category": ["Dates and Times Functions"], "index": 395, "vector_txt": "395:Feature: timeZoneOffset(value)\nDescription: timeZoneOffsetReturns the timezone offset in seconds from UTC.\nThe function daylight saving time and historical timezone changes at the specified date and time into account.\nThe IANA timezone database is used to calculate the offset.SyntaxtimeZoneOffset(value)Alias: timezoneOffset.Argumentsvalue \u2014 Date and time. DateTime or DateTime64.Returned valueOffset from UTC in seconds. Int32.\nExamples: SELECT toDateTime('2021-04-21 10:20:30', 'America/New_York') AS Time, toTypeName(Time) AS Type,       timeZoneOffset(Time) AS Offset_in_seconds, (Offset_in_seconds / 3600) AS Offset_in_hours;\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toYear"], "Feature": ["toYear(value)"], "Description": ["toYear", "Returns the year component (AD) of a date or date with time.", "Syntax", "toYear(value)", "Alias: YEAR", "Arguments", "value - a Date, Date32, DateTime or DateTime64", "Returned value", "The year of the given date/time. UInt16."], "Examples": ["SELECT toYear(toDateTime('2023-04-21 10:20:30'))"], "Category": ["Dates and Times Functions"], "index": 396, "vector_txt": "396:Feature: toYear(value)\nDescription: toYearReturns the year component (AD) of a date or date with time.SyntaxtoYear(value)Alias: YEARArgumentsvalue - a Date, Date32, DateTime or DateTime64Returned valueThe year of the given date/time. UInt16.\nExamples: SELECT toYear(toDateTime('2023-04-21 10:20:30'))\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toQuarter"], "Feature": ["toQuarter(value)"], "Description": ["toQuarter", "Returns the quarter (1-4) of a date or date with time.", "Syntax", "toQuarter(value)", "Alias: QUARTER", "Arguments", "value - a Date, Date32, DateTime or DateTime64", "Returned value", "The quarter of the year (1, 2, 3 or 4) of the given date/time. UInt8."], "Examples": ["SELECT toQuarter(toDateTime('2023-04-21 10:20:30'))"], "Category": ["Dates and Times Functions"], "index": 397, "vector_txt": "397:Feature: toQuarter(value)\nDescription: toQuarterReturns the quarter (1-4) of a date or date with time.SyntaxtoQuarter(value)Alias: QUARTERArgumentsvalue - a Date, Date32, DateTime or DateTime64Returned valueThe quarter of the year (1, 2, 3 or 4) of the given date/time. UInt8.\nExamples: SELECT toQuarter(toDateTime('2023-04-21 10:20:30'))\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toMonth"], "Feature": ["toMonth(value)"], "Description": ["toMonth", "Returns the month component (1-12) of a date or date with time.", "Syntax", "toMonth(value)", "Alias: MONTH", "Arguments", "value - a Date, Date32, DateTime or DateTime64", "Returned value", "The month of the year (1 - 12) of the given date/time. UInt8."], "Examples": ["SELECT toMonth(toDateTime('2023-04-21 10:20:30'))"], "Category": ["Dates and Times Functions"], "index": 398, "vector_txt": "398:Feature: toMonth(value)\nDescription: toMonthReturns the month component (1-12) of a date or date with time.SyntaxtoMonth(value)Alias: MONTHArgumentsvalue - a Date, Date32, DateTime or DateTime64Returned valueThe month of the year (1 - 12) of the given date/time. UInt8.\nExamples: SELECT toMonth(toDateTime('2023-04-21 10:20:30'))\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toDayOfYear"], "Feature": ["toDayOfYear(value)"], "Description": ["toDayOfYear", "Returns the number of the day within the year (1-366) of a date or date with time.", "Syntax", "toDayOfYear(value)", "Alias: DAYOFYEAR", "Arguments", "value - a Date, Date32, DateTime or DateTime64", "Returned value", "The day of the year (1 - 366) of the given date/time. UInt16."], "Examples": ["SELECT toDayOfYear(toDateTime('2023-04-21 10:20:30'))"], "Category": ["Dates and Times Functions"], "index": 399, "vector_txt": "399:Feature: toDayOfYear(value)\nDescription: toDayOfYearReturns the number of the day within the year (1-366) of a date or date with time.SyntaxtoDayOfYear(value)Alias: DAYOFYEARArgumentsvalue - a Date, Date32, DateTime or DateTime64Returned valueThe day of the year (1 - 366) of the given date/time. UInt16.\nExamples: SELECT toDayOfYear(toDateTime('2023-04-21 10:20:30'))\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toDayOfMonth"], "Feature": ["toDayOfMonth(value)"], "Description": ["toDayOfMonth", "Returns the number of the day within the month (1-31) of a date or date with time.", "Syntax", "toDayOfMonth(value)", "Aliases: DAYOFMONTH, DAY", "Arguments", "value - a Date, Date32, DateTime or DateTime64", "Returned value", "The day of the month (1 - 31) of the given date/time. UInt8."], "Examples": ["SELECT toDayOfMonth(toDateTime('2023-04-21 10:20:30'))"], "Category": ["Dates and Times Functions"], "index": 400, "vector_txt": "400:Feature: toDayOfMonth(value)\nDescription: toDayOfMonthReturns the number of the day within the month (1-31) of a date or date with time.SyntaxtoDayOfMonth(value)Aliases: DAYOFMONTH, DAYArgumentsvalue - a Date, Date32, DateTime or DateTime64Returned valueThe day of the month (1 - 31) of the given date/time. UInt8.\nExamples: SELECT toDayOfMonth(toDateTime('2023-04-21 10:20:30'))\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toDayOfWeek"], "Feature": ["toDayOfWeek(t[, mode[, timezone]])"], "Description": ["toDayOfWeek", "Returns the number of the day within the week of a date or date with time.", "The two-argument form of toDayOfWeek() enables you to specify whether the week starts on Monday or Sunday, and whether the return value should be in the range from 0 to 6 or 1 to 7. If the mode argument is omitted, the default mode is 0. The time zone of the date can be specified as the third argument.", "ModeFirst day of weekRange0Monday1-7: Monday = 1, Tuesday = 2, ..., Sunday = 71Monday0-6: Monday = 0, Tuesday = 1, ..., Sunday = 62Sunday0-6: Sunday = 0, Monday = 1, ..., Saturday = 63Sunday1-7: Sunday = 1, Monday = 2, ..., Saturday = 7", "Syntax", "toDayOfWeek(t[, mode[, timezone]])", "Alias: DAYOFWEEK.", "Arguments", "t - a Date, Date32, DateTime or DateTime64mode - determines what the first day of the week is. Possible values are 0, 1, 2 or 3. See the table above for the differences.timezone - optional parameter, it behaves like any other conversion function", "The first argument can also be specified as String in a format supported by parseDateTime64BestEffort(). Support for string arguments exists only for reasons of compatibility with MySQL which is expected by certain 3rd party tools. As string argument support may in future be made dependent on new MySQL-compatibility settings and because string parsing is generally slow, it is recommended to not use it.", "Returned value", "The day of the week (1-7), depending on the chosen mode, of the given date/time"], "Examples": ["SELECT    toDayOfWeek(toDateTime('2023-04-21')),    toDayOfWeek(toDateTime('2023-04-21'), 1)"], "Category": ["Dates and Times Functions"], "index": 401, "vector_txt": "401:Feature: toDayOfWeek(t[, mode[, timezone]])\nDescription: toDayOfWeekReturns the number of the day within the week of a date or date with time.The two-argument form of toDayOfWeek() enables you to specify whether the week starts on Monday or Sunday, and whether the return value should be in the range from 0 to 6 or 1 to 7. If the mode argument is omitted, the default mode is 0. The time zone of the date can be specified as the third argument.ModeFirst day of weekRange0Monday1-7: Monday = 1, Tuesday = 2, ..., Sunday = 71Monday0-6: Monday = 0, Tuesday = 1, ..., Sunday = 62Sunday0-6: Sunday = 0, Monday = 1, ..., Saturday = 63Sunday1-7: Sunday = 1, Monday = 2, ..., Saturday = 7SyntaxtoDayOfWeek(t[, mode[, timezone]])Alias: DAYOFWEEK.Argumentst - a Date, Date32, DateTime or DateTime64mode - determines what the first day of the week is. Possible values are 0, 1, 2 or 3. See the table above for the differences.timezone - optional parameter, it behaves like any other conversion functionThe first argument can also be specified as String in a format supported by parseDateTime64BestEffort(). Support for string arguments exists only for reasons of compatibility with MySQL which is expected by certain 3rd party tools. As string argument support may in future be made dependent on new MySQL-compatibility settings and because string parsing is generally slow, it is recommended to not use it.Returned valueThe day of the week (1-7), depending on the chosen mode, of the given date/time\nExamples: SELECT    toDayOfWeek(toDateTime('2023-04-21')),    toDayOfWeek(toDateTime('2023-04-21'), 1)\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/arithmetic-functions"], "Title": ["max2"], "Feature": ["max2(a, b)"], "Description": ["max2", "Returns the bigger of two values a and b. The returned value is of type Float64.", "Syntax", "max2(a, b)"], "Examples": ["SELECT max2(-1, 2);"], "Category": ["Arithmetic Functions"], "index": 402, "vector_txt": "402:Feature: max2(a, b)\nDescription: max2Returns the bigger of two values a and b. The returned value is of type Float64.Syntaxmax2(a, b)\nExamples: SELECT max2(-1, 2);\nCategory: Arithmetic Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toHour"], "Feature": ["toHour(value)"], "Description": ["toHour", "Returns the hour component (0-24) of a date with time.", "Assumes that if clocks are moved ahead, it is by one hour and occurs at 2 a.m., and if clocks are moved back, it is by one hour and occurs at 3 a.m. (which is not always exactly when it occurs - it depends on the timezone).", "Syntax", "toHour(value)", "Alias: HOUR", "Arguments", "value - a DateTime or DateTime64", "Returned value", "The hour of the day (0 - 23) of the given date/time. UInt8."], "Examples": ["SELECT toHour(toDateTime('2023-04-21 10:20:30'))"], "Category": ["Dates and Times Functions"], "index": 403, "vector_txt": "403:Feature: toHour(value)\nDescription: toHourReturns the hour component (0-24) of a date with time.Assumes that if clocks are moved ahead, it is by one hour and occurs at 2 a.m., and if clocks are moved back, it is by one hour and occurs at 3 a.m. (which is not always exactly when it occurs - it depends on the timezone).SyntaxtoHour(value)Alias: HOURArgumentsvalue - a DateTime or DateTime64Returned valueThe hour of the day (0 - 23) of the given date/time. UInt8.\nExamples: SELECT toHour(toDateTime('2023-04-21 10:20:30'))\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toMinute"], "Feature": ["toMinute(value)"], "Description": ["toMinute", "Returns the minute component (0-59) a date with time.", "Syntax", "toMinute(value)", "Alias: MINUTE", "Arguments", "value - a DateTime or DateTime64", "Returned value", "The minute of the hour (0 - 59) of the given date/time. UInt8."], "Examples": ["SELECT toMinute(toDateTime('2023-04-21 10:20:30'))"], "Category": ["Dates and Times Functions"], "index": 404, "vector_txt": "404:Feature: toMinute(value)\nDescription: toMinuteReturns the minute component (0-59) a date with time.SyntaxtoMinute(value)Alias: MINUTEArgumentsvalue - a DateTime or DateTime64Returned valueThe minute of the hour (0 - 59) of the given date/time. UInt8.\nExamples: SELECT toMinute(toDateTime('2023-04-21 10:20:30'))\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toSecond"], "Feature": ["toSecond(value)"], "Description": ["toSecond", "Returns the second component (0-59) of a date with time. Leap seconds are not considered.", "Syntax", "toSecond(value)", "Alias: SECOND", "Arguments", "value - a DateTime or DateTime64", "Returned value", "The second in the minute (0 - 59) of the given date/time. UInt8."], "Examples": ["SELECT toSecond(toDateTime('2023-04-21 10:20:30'))"], "Category": ["Dates and Times Functions"], "index": 405, "vector_txt": "405:Feature: toSecond(value)\nDescription: toSecondReturns the second component (0-59) of a date with time. Leap seconds are not considered.SyntaxtoSecond(value)Alias: SECONDArgumentsvalue - a DateTime or DateTime64Returned valueThe second in the minute (0 - 59) of the given date/time. UInt8.\nExamples: SELECT toSecond(toDateTime('2023-04-21 10:20:30'))\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toMillisecond"], "Feature": ["toMillisecond(value)"], "Description": ["toMillisecond", "Returns the millisecond component (0-999) of a date with time.", "Syntax", "toMillisecond(value)", "*Arguments**", "value - DateTime or DateTime64", "Alias: MILLISECOND", "SELECT toMillisecond(toDateTime64('2023-04-21 10:20:30.456', 3))", "Result:", "\u250c\u2500\u2500toMillisecond(toDateTime64('2023-04-21 10:20:30.456', 3))\u2500\u2510\u2502                                                        456 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "Returned value", "The millisecond in the minute (0 - 59) of the given date/time. UInt16."], "Examples": ["toMillisecond(value)", "SELECT toMillisecond(toDateTime64('2023-04-21 10:20:30.456', 3))"], "Category": ["Dates and Times Functions"], "index": 406, "vector_txt": "406:Feature: toMillisecond(value)\nDescription: toMillisecondReturns the millisecond component (0-999) of a date with time.SyntaxtoMillisecond(value)*Arguments**value - DateTime or DateTime64Alias: MILLISECONDSELECT toMillisecond(toDateTime64('2023-04-21 10:20:30.456', 3))Result:\u250c\u2500\u2500toMillisecond(toDateTime64('2023-04-21 10:20:30.456', 3))\u2500\u2510\u2502                                                        456 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518Returned valueThe millisecond in the minute (0 - 59) of the given date/time. UInt16.\nExamples: toMillisecond(value)SELECT toMillisecond(toDateTime64('2023-04-21 10:20:30.456', 3))\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toUnixTimestamp"], "Feature": ["toUnixTimestamp(date)toUnixTimestamp(str, [timezone])"], "Description": ["toUnixTimestamp", "Converts a string, a date or a date with time to the Unix Timestamp in UInt32 representation.", "If the function is called with a string, it accepts an optional timezone argument.", "Syntax", "toUnixTimestamp(date)toUnixTimestamp(str, [timezone])", "Returned value", "Returns the unix timestamp. UInt32."], "Examples": ["SELECT    '2017-11-05 08:07:47' AS dt_str,    toUnixTimestamp(dt_str) AS from_str,    toUnixTimestamp(dt_str, 'Asia/Tokyo') AS from_str_tokyo,    toUnixTimestamp(toDateTime(dt_str)) AS from_datetime,    toUnixTimestamp(toDateTime64(dt_str, 0)) AS from_datetime64,    toUnixTimestamp(toDate(dt_str)) AS from_date,    toUnixTimestamp(toDate32(dt_str)) AS from_date32FORMAT Vertical;"], "Category": ["Dates and Times Functions"], "index": 407, "vector_txt": "407:Feature: toUnixTimestamp(date)toUnixTimestamp(str, [timezone])\nDescription: toUnixTimestampConverts a string, a date or a date with time to the Unix Timestamp in UInt32 representation.If the function is called with a string, it accepts an optional timezone argument.SyntaxtoUnixTimestamp(date)toUnixTimestamp(str, [timezone])Returned valueReturns the unix timestamp. UInt32.\nExamples: SELECT    '2017-11-05 08:07:47' AS dt_str,    toUnixTimestamp(dt_str) AS from_str,    toUnixTimestamp(dt_str, 'Asia/Tokyo') AS from_str_tokyo,    toUnixTimestamp(toDateTime(dt_str)) AS from_datetime,    toUnixTimestamp(toDateTime64(dt_str, 0)) AS from_datetime64,    toUnixTimestamp(toDate(dt_str)) AS from_date,    toUnixTimestamp(toDate32(dt_str)) AS from_date32FORMAT Vertical;\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toStartOfYear"], "Feature": ["toStartOfYear(value)"], "Description": ["toStartOfYear", "Rounds down a date or date with time to the first day of the year. Returns the date as a Date object.", "Syntax", "toStartOfYear(value)", "Arguments", "value - a Date, Date32, DateTime or DateTime64", "Returned value", "The first day of the year of the input date/time. Date."], "Examples": ["SELECT toStartOfYear(toDateTime('2023-04-21 10:20:30'))"], "Category": ["Dates and Times Functions"], "index": 408, "vector_txt": "408:Feature: toStartOfYear(value)\nDescription: toStartOfYearRounds down a date or date with time to the first day of the year. Returns the date as a Date object.SyntaxtoStartOfYear(value)Argumentsvalue - a Date, Date32, DateTime or DateTime64Returned valueThe first day of the year of the input date/time. Date.\nExamples: SELECT toStartOfYear(toDateTime('2023-04-21 10:20:30'))\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toStartOfISOYear"], "Feature": ["toStartOfISOYear(value)"], "Description": ["toStartOfISOYear", "Rounds down a date or date with time to the first day of the ISO year, which can be different than a \"regular\" year. (See https://en.wikipedia.org/wiki/ISO_week_date.)", "Syntax", "toStartOfISOYear(value)", "Arguments", "value - a Date, Date32, DateTime or DateTime64", "Returned value", "The first day of the year of the input date/time. Date."], "Examples": ["SELECT toStartOfISOYear(toDateTime('2023-04-21 10:20:30'))"], "Category": ["Dates and Times Functions"], "index": 409, "vector_txt": "409:Feature: toStartOfISOYear(value)\nDescription: toStartOfISOYearRounds down a date or date with time to the first day of the ISO year, which can be different than a \"regular\" year. (See https://en.wikipedia.org/wiki/ISO_week_date.)SyntaxtoStartOfISOYear(value)Argumentsvalue - a Date, Date32, DateTime or DateTime64Returned valueThe first day of the year of the input date/time. Date.\nExamples: SELECT toStartOfISOYear(toDateTime('2023-04-21 10:20:30'))\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toStartOfQuarter"], "Feature": ["toStartOfQuarter(value)"], "Description": ["toStartOfQuarter", "Rounds down a date or date with time to the first day of the quarter. The first day of the quarter is either 1 January, 1 April, 1 July, or 1 October.\nReturns the date.", "Syntax", "toStartOfQuarter(value)", "Arguments", "value - a Date, Date32, DateTime or DateTime64", "Returned value", "The first day of the quarter of the given date/time. Date."], "Examples": ["SELECT toStartOfQuarter(toDateTime('2023-04-21 10:20:30'))"], "Category": ["Dates and Times Functions"], "index": 410, "vector_txt": "410:Feature: toStartOfQuarter(value)\nDescription: toStartOfQuarterRounds down a date or date with time to the first day of the quarter. The first day of the quarter is either 1 January, 1 April, 1 July, or 1 October.\nReturns the date.SyntaxtoStartOfQuarter(value)Argumentsvalue - a Date, Date32, DateTime or DateTime64Returned valueThe first day of the quarter of the given date/time. Date.\nExamples: SELECT toStartOfQuarter(toDateTime('2023-04-21 10:20:30'))\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toStartOfMonth"], "Feature": ["toStartOfMonth(value)"], "Description": ["toStartOfMonth", "Rounds down a date or date with time to the first day of the month. Returns the date.", "Syntax", "toStartOfMonth(value)", "Arguments", "value - a Date, Date32, DateTime or DateTime64", "Returned value", "The first day of the month of the given date/time. Date."], "Examples": ["SELECT toStartOfMonth(toDateTime('2023-04-21 10:20:30'))"], "Category": ["Dates and Times Functions"], "index": 411, "vector_txt": "411:Feature: toStartOfMonth(value)\nDescription: toStartOfMonthRounds down a date or date with time to the first day of the month. Returns the date.SyntaxtoStartOfMonth(value)Argumentsvalue - a Date, Date32, DateTime or DateTime64Returned valueThe first day of the month of the given date/time. Date.\nExamples: SELECT toStartOfMonth(toDateTime('2023-04-21 10:20:30'))\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toLastDayOfMonth"], "Feature": ["toLastDayOfMonth(value)"], "Description": ["toLastDayOfMonth", "Rounds a date or date with time to the last day of the month. Returns the date.", "Syntax", "toLastDayOfMonth(value)", "Alias: LAST_DAY", "Arguments", "value - a Date, Date32, DateTime or DateTime64", "Returned value", "The last day of the month of the given date/time=. Date."], "Examples": ["SELECT toLastDayOfMonth(toDateTime('2023-04-21 10:20:30'))"], "Category": ["Dates and Times Functions"], "index": 412, "vector_txt": "412:Feature: toLastDayOfMonth(value)\nDescription: toLastDayOfMonthRounds a date or date with time to the last day of the month. Returns the date.SyntaxtoLastDayOfMonth(value)Alias: LAST_DAYArgumentsvalue - a Date, Date32, DateTime or DateTime64Returned valueThe last day of the month of the given date/time=. Date.\nExamples: SELECT toLastDayOfMonth(toDateTime('2023-04-21 10:20:30'))\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/arithmetic-functions"], "Title": ["min2"], "Feature": ["min2(a, b)"], "Description": ["min2", "Returns the smaller of two values a and b. The returned value is of type Float64.", "Syntax", "min2(a, b)"], "Examples": ["SELECT min2(-1, 2);"], "Category": ["Arithmetic Functions"], "index": 413, "vector_txt": "413:Feature: min2(a, b)\nDescription: min2Returns the smaller of two values a and b. The returned value is of type Float64.Syntaxmin2(a, b)\nExamples: SELECT min2(-1, 2);\nCategory: Arithmetic Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toMonday"], "Feature": ["toMonday(value)"], "Description": ["toMonday", "Rounds down a date or date with time to the nearest Monday. Returns the date.", "Syntax", "toMonday(value)", "Arguments", "value - a Date, Date32, DateTime or DateTime64", "Returned value", "The date of the nearest Monday on or prior to the given date. Date."], "Examples": ["SELECT    toMonday(toDateTime('2023-04-21 10:20:30')), /* a Friday */    toMonday(toDate('2023-04-24')), /* already a Monday */"], "Category": ["Dates and Times Functions"], "index": 414, "vector_txt": "414:Feature: toMonday(value)\nDescription: toMondayRounds down a date or date with time to the nearest Monday. Returns the date.SyntaxtoMonday(value)Argumentsvalue - a Date, Date32, DateTime or DateTime64Returned valueThe date of the nearest Monday on or prior to the given date. Date.\nExamples: SELECT    toMonday(toDateTime('2023-04-21 10:20:30')), /* a Friday */    toMonday(toDate('2023-04-24')), /* already a Monday */\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toStartOfWeek"], "Feature": ["toStartOfWeek(t[, mode[, timezone]])"], "Description": ["toStartOfWeek", "Rounds a date or date with time down to the nearest Sunday or Monday. Returns the date. The mode argument works exactly like the mode argument in function toWeek(). If no mode is specified, it defaults to 0.", "Syntax", "toStartOfWeek(t[, mode[, timezone]])", "Arguments", "t - a Date, Date32, DateTime or DateTime64mode - determines the first day of the week as described in the toWeek() functiontimezone - Optional parameter, it behaves like any other conversion function", "Returned value", "The date of the nearest Sunday or Monday on or prior to the given date, depending on the mode. Date."], "Examples": ["SELECT    toStartOfWeek(toDateTime('2023-04-21 10:20:30')), /* a Friday */    toStartOfWeek(toDateTime('2023-04-21 10:20:30'), 1), /* a Friday */    toStartOfWeek(toDate('2023-04-24')), /* a Monday */    toStartOfWeek(toDate('2023-04-24'), 1) /* a Monday */FORMAT Vertical"], "Category": ["Dates and Times Functions"], "index": 415, "vector_txt": "415:Feature: toStartOfWeek(t[, mode[, timezone]])\nDescription: toStartOfWeekRounds a date or date with time down to the nearest Sunday or Monday. Returns the date. The mode argument works exactly like the mode argument in function toWeek(). If no mode is specified, it defaults to 0.SyntaxtoStartOfWeek(t[, mode[, timezone]])Argumentst - a Date, Date32, DateTime or DateTime64mode - determines the first day of the week as described in the toWeek() functiontimezone - Optional parameter, it behaves like any other conversion functionReturned valueThe date of the nearest Sunday or Monday on or prior to the given date, depending on the mode. Date.\nExamples: SELECT    toStartOfWeek(toDateTime('2023-04-21 10:20:30')), /* a Friday */    toStartOfWeek(toDateTime('2023-04-21 10:20:30'), 1), /* a Friday */    toStartOfWeek(toDate('2023-04-24')), /* a Monday */    toStartOfWeek(toDate('2023-04-24'), 1) /* a Monday */FORMAT Vertical\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toLastDayOfWeek"], "Feature": ["toLastDayOfWeek(t[, mode[, timezone]])"], "Description": ["toLastDayOfWeek", "Rounds a date or date with time up to the nearest Saturday or Sunday. Returns the date.\nThe mode argument works exactly like the mode argument in function toWeek(). If no mode is specified, mode is assumed as 0.", "Syntax", "toLastDayOfWeek(t[, mode[, timezone]])", "Arguments", "t - a Date, Date32, DateTime or DateTime64mode - determines the last day of the week as described in the toWeek functiontimezone - Optional parameter, it behaves like any other conversion function", "Returned value", "The date of the nearest Sunday or Monday on or after the given date, depending on the mode. Date."], "Examples": ["SELECT    toLastDayOfWeek(toDateTime('2023-04-21 10:20:30')), /* a Friday */    toLastDayOfWeek(toDateTime('2023-04-21 10:20:30'), 1), /* a Friday */    toLastDayOfWeek(toDate('2023-04-22')), /* a Saturday */    toLastDayOfWeek(toDate('2023-04-22'), 1) /* a Saturday */FORMAT Vertical"], "Category": ["Dates and Times Functions"], "index": 416, "vector_txt": "416:Feature: toLastDayOfWeek(t[, mode[, timezone]])\nDescription: toLastDayOfWeekRounds a date or date with time up to the nearest Saturday or Sunday. Returns the date.\nThe mode argument works exactly like the mode argument in function toWeek(). If no mode is specified, mode is assumed as 0.SyntaxtoLastDayOfWeek(t[, mode[, timezone]])Argumentst - a Date, Date32, DateTime or DateTime64mode - determines the last day of the week as described in the toWeek functiontimezone - Optional parameter, it behaves like any other conversion functionReturned valueThe date of the nearest Sunday or Monday on or after the given date, depending on the mode. Date.\nExamples: SELECT    toLastDayOfWeek(toDateTime('2023-04-21 10:20:30')), /* a Friday */    toLastDayOfWeek(toDateTime('2023-04-21 10:20:30'), 1), /* a Friday */    toLastDayOfWeek(toDate('2023-04-22')), /* a Saturday */    toLastDayOfWeek(toDate('2023-04-22'), 1) /* a Saturday */FORMAT Vertical\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toStartOfDay"], "Feature": ["toStartOfDay(value)"], "Description": ["toStartOfDay", "Rounds down a date with time to the start of the day.", "Syntax", "toStartOfDay(value)", "Arguments", "value - a Date, Date32, DateTime or DateTime64", "Returned value", "The start of the day of the given date/time. DateTime."], "Examples": ["SELECT toStartOfDay(toDateTime('2023-04-21 10:20:30'))"], "Category": ["Dates and Times Functions"], "index": 417, "vector_txt": "417:Feature: toStartOfDay(value)\nDescription: toStartOfDayRounds down a date with time to the start of the day.SyntaxtoStartOfDay(value)Argumentsvalue - a Date, Date32, DateTime or DateTime64Returned valueThe start of the day of the given date/time. DateTime.\nExamples: SELECT toStartOfDay(toDateTime('2023-04-21 10:20:30'))\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toStartOfHour"], "Feature": ["toStartOfHour(value)"], "Description": ["toStartOfHour", "Rounds down a date with time to the start of the hour.", "Syntax", "toStartOfHour(value)", "Arguments", "value - a  DateTime or DateTime64", "Returned value", "The start of the hour of the given date/time. DateTime."], "Examples": ["SELECT    toStartOfHour(toDateTime('2023-04-21 10:20:30')),    toStartOfHour(toDateTime64('2023-04-21', 6))"], "Category": ["Dates and Times Functions"], "index": 418, "vector_txt": "418:Feature: toStartOfHour(value)\nDescription: toStartOfHourRounds down a date with time to the start of the hour.SyntaxtoStartOfHour(value)Argumentsvalue - a  DateTime or DateTime64Returned valueThe start of the hour of the given date/time. DateTime.\nExamples: SELECT    toStartOfHour(toDateTime('2023-04-21 10:20:30')),    toStartOfHour(toDateTime64('2023-04-21', 6))\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toStartOfMinute"], "Feature": ["toStartOfMinute(value)"], "Description": ["toStartOfMinute", "Rounds down a date with time to the start of the minute.", "Syntax", "toStartOfMinute(value)", "Arguments", "value - a  DateTime or DateTime64", "Returned value", "The start of the minute of the given date/time. DateTime."], "Examples": ["SELECT    toStartOfMinute(toDateTime('2023-04-21 10:20:30')),    toStartOfMinute(toDateTime64('2023-04-21 10:20:30.5300', 8))FORMAT Vertical"], "Category": ["Dates and Times Functions"], "index": 419, "vector_txt": "419:Feature: toStartOfMinute(value)\nDescription: toStartOfMinuteRounds down a date with time to the start of the minute.SyntaxtoStartOfMinute(value)Argumentsvalue - a  DateTime or DateTime64Returned valueThe start of the minute of the given date/time. DateTime.\nExamples: SELECT    toStartOfMinute(toDateTime('2023-04-21 10:20:30')),    toStartOfMinute(toDateTime64('2023-04-21 10:20:30.5300', 8))FORMAT Vertical\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toStartOfSecond"], "Feature": ["toStartOfSecond(value, [timezone])"], "Description": ["toStartOfSecond", "Truncates sub-seconds.", "Syntax", "toStartOfSecond(value, [timezone])", "Arguments", "value \u2014 Date and time. DateTime64.timezone \u2014 Timezone for the returned value (optional). If not specified, the function uses the timezone of the value parameter. String.", "Returned value", "Input value without sub-seconds. DateTime64."], "Examples": ["WITH toDateTime64('2020-01-01 10:20:30.999', 3) AS dt64SELECT toStartOfSecond(dt64);", "WITH toDateTime64('2020-01-01 10:20:30.999', 3) AS dt64SELECT toStartOfSecond(dt64, 'Asia/Istanbul');"], "Category": ["Dates and Times Functions"], "index": 420, "vector_txt": "420:Feature: toStartOfSecond(value, [timezone])\nDescription: toStartOfSecondTruncates sub-seconds.SyntaxtoStartOfSecond(value, [timezone])Argumentsvalue \u2014 Date and time. DateTime64.timezone \u2014 Timezone for the returned value (optional). If not specified, the function uses the timezone of the value parameter. String.Returned valueInput value without sub-seconds. DateTime64.\nExamples: WITH toDateTime64('2020-01-01 10:20:30.999', 3) AS dt64SELECT toStartOfSecond(dt64);WITH toDateTime64('2020-01-01 10:20:30.999', 3) AS dt64SELECT toStartOfSecond(dt64, 'Asia/Istanbul');\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toStartOfMillisecond"], "Feature": ["toStartOfMillisecond(value, [timezone])"], "Description": ["toStartOfMillisecond", "Rounds down a date with time to the start of the milliseconds.", "Syntax", "toStartOfMillisecond(value, [timezone])", "Arguments", "value \u2014 Date and time. DateTime64.timezone \u2014 Timezone for the returned value (optional). If not specified, the function uses the timezone of the value parameter. String.", "Returned value", "Input value with sub-milliseconds. DateTime64."], "Examples": ["WITH toDateTime64('2020-01-01 10:20:30.999999999', 9) AS dt64SELECT toStartOfMillisecond(dt64);", "\u250c\u2500toStartOfMillisecond(dt64, 'Asia/Istanbul')\u2500\u2510\u2502               2020-01-01 12:20:30.999000000 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Category": ["Dates and Times Functions"], "index": 421, "vector_txt": "421:Feature: toStartOfMillisecond(value, [timezone])\nDescription: toStartOfMillisecondRounds down a date with time to the start of the milliseconds.SyntaxtoStartOfMillisecond(value, [timezone])Argumentsvalue \u2014 Date and time. DateTime64.timezone \u2014 Timezone for the returned value (optional). If not specified, the function uses the timezone of the value parameter. String.Returned valueInput value with sub-milliseconds. DateTime64.\nExamples: WITH toDateTime64('2020-01-01 10:20:30.999999999', 9) AS dt64SELECT toStartOfMillisecond(dt64);\u250c\u2500toStartOfMillisecond(dt64, 'Asia/Istanbul')\u2500\u2510\u2502               2020-01-01 12:20:30.999000000 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toStartOfMicrosecond"], "Feature": ["toStartOfMicrosecond(value, [timezone])"], "Description": ["toStartOfMicrosecond", "Rounds down a date with time to the start of the microseconds.", "Syntax", "toStartOfMicrosecond(value, [timezone])", "Arguments", "value \u2014 Date and time. DateTime64.timezone \u2014 Timezone for the returned value (optional). If not specified, the function uses the timezone of the value parameter. String.", "Returned value", "Input value with sub-microseconds. DateTime64."], "Examples": ["WITH toDateTime64('2020-01-01 10:20:30.999999999', 9) AS dt64SELECT toStartOfMicrosecond(dt64);", "WITH toDateTime64('2020-01-01 10:20:30.999999999', 9) AS dt64SELECT toStartOfMicrosecond(dt64, 'Asia/Istanbul');"], "Category": ["Dates and Times Functions"], "index": 422, "vector_txt": "422:Feature: toStartOfMicrosecond(value, [timezone])\nDescription: toStartOfMicrosecondRounds down a date with time to the start of the microseconds.SyntaxtoStartOfMicrosecond(value, [timezone])Argumentsvalue \u2014 Date and time. DateTime64.timezone \u2014 Timezone for the returned value (optional). If not specified, the function uses the timezone of the value parameter. String.Returned valueInput value with sub-microseconds. DateTime64.\nExamples: WITH toDateTime64('2020-01-01 10:20:30.999999999', 9) AS dt64SELECT toStartOfMicrosecond(dt64);WITH toDateTime64('2020-01-01 10:20:30.999999999', 9) AS dt64SELECT toStartOfMicrosecond(dt64, 'Asia/Istanbul');\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toStartOfNanosecond"], "Feature": ["toStartOfNanosecond(value, [timezone])"], "Description": ["toStartOfNanosecond", "Rounds down a date with time to the start of the nanoseconds.", "Syntax", "toStartOfNanosecond(value, [timezone])", "Arguments", "value \u2014 Date and time. DateTime64.timezone \u2014 Timezone for the returned value (optional). If not specified, the function uses the timezone of the value parameter. String.", "Returned value", "Input value with nanoseconds. DateTime64."], "Examples": ["WITH toDateTime64('2020-01-01 10:20:30.999999999', 9) AS dt64SELECT toStartOfNanosecond(dt64);", "WITH toDateTime64('2020-01-01 10:20:30.999999999', 9) AS dt64SELECT toStartOfNanosecond(dt64, 'Asia/Istanbul');"], "Category": ["Dates and Times Functions"], "index": 423, "vector_txt": "423:Feature: toStartOfNanosecond(value, [timezone])\nDescription: toStartOfNanosecondRounds down a date with time to the start of the nanoseconds.SyntaxtoStartOfNanosecond(value, [timezone])Argumentsvalue \u2014 Date and time. DateTime64.timezone \u2014 Timezone for the returned value (optional). If not specified, the function uses the timezone of the value parameter. String.Returned valueInput value with nanoseconds. DateTime64.\nExamples: WITH toDateTime64('2020-01-01 10:20:30.999999999', 9) AS dt64SELECT toStartOfNanosecond(dt64);WITH toDateTime64('2020-01-01 10:20:30.999999999', 9) AS dt64SELECT toStartOfNanosecond(dt64, 'Asia/Istanbul');\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/arithmetic-functions"], "Title": ["multiplyDecimal"], "Feature": ["multiplyDecimal(a, b[, result_scale])"], "Description": ["multiplyDecimal", "Multiplies two decimals a and b. The result value will be of type Decimal256.", "The scale of the result can be explicitly specified by result_scale. If result_scale is not specified, it is assumed to be the maximum scale of the input values.", "This function work significantly slower than usual multiply. In case no control over the result precision is needed and/or fast computation is desired, consider using multiply.", "Syntax", "multiplyDecimal(a, b[, result_scale])", "Arguments", "a \u2014 First value. Decimal.b \u2014 Second value. Decimal.result_scale \u2014 Scale of result. Int/UInt.", "Returned value", "The result of multiplication with given scale. Decimal256."], "Examples": ["SELECT toDecimal64(-12.647, 3) * toDecimal32(2.1239, 4);SELECT toDecimal64(-12.647, 3) as a, toDecimal32(2.1239, 4) as b, multiplyDecimal(a, b);", "SELECT    toDecimal64(-12.647987876, 9) AS a,    toDecimal64(123.967645643, 9) AS b,    multiplyDecimal(a, b);SELECT    toDecimal64(-12.647987876, 9) AS a,    toDecimal64(123.967645643, 9) AS b,    a * b;"], "Category": ["Arithmetic Functions"], "index": 424, "vector_txt": "424:Feature: multiplyDecimal(a, b[, result_scale])\nDescription: multiplyDecimalMultiplies two decimals a and b. The result value will be of type Decimal256.The scale of the result can be explicitly specified by result_scale. If result_scale is not specified, it is assumed to be the maximum scale of the input values.This function work significantly slower than usual multiply. In case no control over the result precision is needed and/or fast computation is desired, consider using multiply.SyntaxmultiplyDecimal(a, b[, result_scale])Argumentsa \u2014 First value. Decimal.b \u2014 Second value. Decimal.result_scale \u2014 Scale of result. Int/UInt.Returned valueThe result of multiplication with given scale. Decimal256.\nExamples: SELECT toDecimal64(-12.647, 3) * toDecimal32(2.1239, 4);SELECT toDecimal64(-12.647, 3) as a, toDecimal32(2.1239, 4) as b, multiplyDecimal(a, b);SELECT    toDecimal64(-12.647987876, 9) AS a,    toDecimal64(123.967645643, 9) AS b,    multiplyDecimal(a, b);SELECT    toDecimal64(-12.647987876, 9) AS a,    toDecimal64(123.967645643, 9) AS b,    a * b;\nCategory: Arithmetic Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/arithmetic-functions"], "Title": ["minus"], "Feature": ["minus(a, b)"], "Description": ["minus", "Calculates the difference of two values a and b. The result is always signed.", "Similar to plus, it is possible to subtract an integer from a date or date with time.", "Syntax", "minus(a, b)", "Alias: a - b (operator)"], "Examples": ["minus(a, b)"], "Category": ["Arithmetic Functions"], "index": 425, "vector_txt": "425:Feature: minus(a, b)\nDescription: minusCalculates the difference of two values a and b. The result is always signed.Similar to plus, it is possible to subtract an integer from a date or date with time.Syntaxminus(a, b)Alias: a - b (operator)\nExamples: minus(a, b)\nCategory: Arithmetic Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toStartOfFiveMinutes"], "Feature": ["toStartOfFiveMinutes(value)"], "Description": ["toStartOfFiveMinutes", "Rounds down a date with time to the start of the five-minute interval.", "Syntax", "toStartOfFiveMinutes(value)", "Arguments", "value - a  DateTime or DateTime64", "Returned value", "The start of the five-minute interval of the given date/time. DateTime."], "Examples": ["SELECT    toStartOfFiveMinutes(toDateTime('2023-04-21 10:17:00')),    toStartOfFiveMinutes(toDateTime('2023-04-21 10:20:00')),    toStartOfFiveMinutes(toDateTime('2023-04-21 10:23:00'))FORMAT Vertical"], "Category": ["Dates and Times Functions"], "index": 426, "vector_txt": "426:Feature: toStartOfFiveMinutes(value)\nDescription: toStartOfFiveMinutesRounds down a date with time to the start of the five-minute interval.SyntaxtoStartOfFiveMinutes(value)Argumentsvalue - a  DateTime or DateTime64Returned valueThe start of the five-minute interval of the given date/time. DateTime.\nExamples: SELECT    toStartOfFiveMinutes(toDateTime('2023-04-21 10:17:00')),    toStartOfFiveMinutes(toDateTime('2023-04-21 10:20:00')),    toStartOfFiveMinutes(toDateTime('2023-04-21 10:23:00'))FORMAT Vertical\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toStartOfTenMinutes"], "Feature": ["toStartOfTenMinutes(value)"], "Description": ["toStartOfTenMinutes", "Rounds down a date with time to the start of the ten-minute interval.", "Syntax", "toStartOfTenMinutes(value)", "Arguments", "value - a  DateTime or DateTime64", "Returned value", "The start of the ten-minute interval of the given date/time. DateTime."], "Examples": ["SELECT    toStartOfTenMinutes(toDateTime('2023-04-21 10:17:00')),    toStartOfTenMinutes(toDateTime('2023-04-21 10:20:00')),    toStartOfTenMinutes(toDateTime('2023-04-21 10:23:00'))FORMAT Vertical"], "Category": ["Dates and Times Functions"], "index": 427, "vector_txt": "427:Feature: toStartOfTenMinutes(value)\nDescription: toStartOfTenMinutesRounds down a date with time to the start of the ten-minute interval.SyntaxtoStartOfTenMinutes(value)Argumentsvalue - a  DateTime or DateTime64Returned valueThe start of the ten-minute interval of the given date/time. DateTime.\nExamples: SELECT    toStartOfTenMinutes(toDateTime('2023-04-21 10:17:00')),    toStartOfTenMinutes(toDateTime('2023-04-21 10:20:00')),    toStartOfTenMinutes(toDateTime('2023-04-21 10:23:00'))FORMAT Vertical\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toStartOfFifteenMinutes"], "Feature": ["toStartOfFifteenMinutes(value)"], "Description": ["toStartOfFifteenMinutes", "Rounds down the date with time to the start of the fifteen-minute interval.", "Syntax", "toStartOfFifteenMinutes(value)", "Arguments", "value - a  DateTime or DateTime64", "Returned value", "The start of the fifteen-minute interval of the given date/time. DateTime."], "Examples": ["SELECT    toStartOfFifteenMinutes(toDateTime('2023-04-21 10:17:00')),    toStartOfFifteenMinutes(toDateTime('2023-04-21 10:20:00')),    toStartOfFifteenMinutes(toDateTime('2023-04-21 10:23:00'))FORMAT Vertical"], "Category": ["Dates and Times Functions"], "index": 428, "vector_txt": "428:Feature: toStartOfFifteenMinutes(value)\nDescription: toStartOfFifteenMinutesRounds down the date with time to the start of the fifteen-minute interval.SyntaxtoStartOfFifteenMinutes(value)Argumentsvalue - a  DateTime or DateTime64Returned valueThe start of the fifteen-minute interval of the given date/time. DateTime.\nExamples: SELECT    toStartOfFifteenMinutes(toDateTime('2023-04-21 10:17:00')),    toStartOfFifteenMinutes(toDateTime('2023-04-21 10:20:00')),    toStartOfFifteenMinutes(toDateTime('2023-04-21 10:23:00'))FORMAT Vertical\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toStartOfInterval"], "Feature": ["toStartOfInterval(value, INTERVAL x unit[, time_zone])toStartOfInterval(value, INTERVAL x unit[, origin[, time_zone]])"], "Description": ["toStartOfInterval", "This function generalizes other toStartOf*() functions with toStartOfInterval(date_or_date_with_time, INTERVAL x unit [, time_zone]) syntax.\nFor example,", "toStartOfInterval(t, INTERVAL 1 YEAR) returns the same as toStartOfYear(t),toStartOfInterval(t, INTERVAL 1 MONTH) returns the same as toStartOfMonth(t),toStartOfInterval(t, INTERVAL 1 DAY) returns the same as toStartOfDay(t),toStartOfInterval(t, INTERVAL 15 MINUTE) returns the same as toStartOfFifteenMinutes(t).", "The calculation is performed relative to specific points in time:", "IntervalStartYEARyear 0QUARTER1900 Q1MONTH1900 JanuaryWEEK1970, 1st week (01-05)DAY1970-01-01HOUR(*)MINUTE1970-01-01 00:00:00SECOND1970-01-01 00:00:00MILLISECOND1970-01-01 00:00:00MICROSECOND1970-01-01 00:00:00NANOSECOND1970-01-01 00:00:00", "(*) hour intervals are special: the calculation is always performed relative to 00:00:00 (midnight) of the current day. As a result, only\nhour values between 1 and 23 are useful.", "If unit WEEK was specified, toStartOfInterval assumes that weeks start on Monday. Note that this behavior is different from that of function toStartOfWeek in which weeks start by default on Sunday.", "Syntax", "toStartOfInterval(value, INTERVAL x unit[, time_zone])toStartOfInterval(value, INTERVAL x unit[, origin[, time_zone]])", "Aliases: time_bucket, date_bin.", "The second overload emulates TimescaleDB's time_bucket() function, respectively PostgreSQL's date_bin() function, e.g.", "SELECT toStartOfInterval(toDateTime('2023-01-01 14:45:00'), INTERVAL 1 MINUTE, toDateTime('2023-01-01 14:35:30'));", "Result:", "\u250c\u2500\u2500\u2500toStartOfInterval(...)\u2500\u2510\u2502      2023-01-01 14:44:30 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "See Also", "date_trunc"], "Examples": ["toStartOfInterval(value, INTERVAL x unit[, time_zone])toStartOfInterval(value, INTERVAL x unit[, origin[, time_zone]])"], "Category": ["Dates and Times Functions"], "index": 429, "vector_txt": "429:Feature: toStartOfInterval(value, INTERVAL x unit[, time_zone])toStartOfInterval(value, INTERVAL x unit[, origin[, time_zone]])\nDescription: toStartOfIntervalThis function generalizes other toStartOf*() functions with toStartOfInterval(date_or_date_with_time, INTERVAL x unit [, time_zone]) syntax.\nFor example,toStartOfInterval(t, INTERVAL 1 YEAR) returns the same as toStartOfYear(t),toStartOfInterval(t, INTERVAL 1 MONTH) returns the same as toStartOfMonth(t),toStartOfInterval(t, INTERVAL 1 DAY) returns the same as toStartOfDay(t),toStartOfInterval(t, INTERVAL 15 MINUTE) returns the same as toStartOfFifteenMinutes(t).The calculation is performed relative to specific points in time:IntervalStartYEARyear 0QUARTER1900 Q1MONTH1900 JanuaryWEEK1970, 1st week (01-05)DAY1970-01-01HOUR(*)MINUTE1970-01-01 00:00:00SECOND1970-01-01 00:00:00MILLISECOND1970-01-01 00:00:00MICROSECOND1970-01-01 00:00:00NANOSECOND1970-01-01 00:00:00(*) hour intervals are special: the calculation is always performed relative to 00:00:00 (midnight) of the current day. As a result, only\nhour values between 1 and 23 are useful.If unit WEEK was specified, toStartOfInterval assumes that weeks start on Monday. Note that this behavior is different from that of function toStartOfWeek in which weeks start by default on Sunday.SyntaxtoStartOfInterval(value, INTERVAL x unit[, time_zone])toStartOfInterval(value, INTERVAL x unit[, origin[, time_zone]])Aliases: time_bucket, date_bin.The second overload emulates TimescaleDB's time_bucket() function, respectively PostgreSQL's date_bin() function, e.g.SELECT toStartOfInterval(toDateTime('2023-01-01 14:45:00'), INTERVAL 1 MINUTE, toDateTime('2023-01-01 14:35:30'));Result:\u250c\u2500\u2500\u2500toStartOfInterval(...)\u2500\u2510\u2502      2023-01-01 14:44:30 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518See Alsodate_trunc\nExamples: toStartOfInterval(value, INTERVAL x unit[, time_zone])toStartOfInterval(value, INTERVAL x unit[, origin[, time_zone]])\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toTime"], "Feature": ["toTime(date[,timezone])"], "Description": ["toTime", "Converts a date with time to a certain fixed date, while preserving the time.", "Syntax", "toTime(date[,timezone])", "Arguments", "date \u2014 Date to convert to a time. Date/DateTime/DateTime64.timezone (optional) \u2014 Timezone for the returned value. String.", "Returned value", "DateTime with date equated to 1970-01-02 while preserving the time. DateTime.", "NoteIf the date input argument contained sub-second components,\nthey will be dropped in the returned DateTime value with second-accuracy."], "Examples": ["SELECT toTime(toDateTime64('1970-12-10 01:20:30.3000',3)) AS result, toTypeName(result);"], "Category": ["Dates and Times Functions"], "index": 430, "vector_txt": "430:Feature: toTime(date[,timezone])\nDescription: toTimeConverts a date with time to a certain fixed date, while preserving the time.SyntaxtoTime(date[,timezone])Argumentsdate \u2014 Date to convert to a time. Date/DateTime/DateTime64.timezone (optional) \u2014 Timezone for the returned value. String.Returned valueDateTime with date equated to 1970-01-02 while preserving the time. DateTime.NoteIf the date input argument contained sub-second components,\nthey will be dropped in the returned DateTime value with second-accuracy.\nExamples: SELECT toTime(toDateTime64('1970-12-10 01:20:30.3000',3)) AS result, toTypeName(result);\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toRelativeYearNum"], "Feature": ["toRelativeYearNum(date)"], "Description": ["toRelativeYearNum", "Converts a date, or date with time, to the number of years elapsed since a certain fixed point in the past.", "Syntax", "toRelativeYearNum(date)", "Arguments", "date \u2014 Date or date with time. Date/DateTime/DateTime64.", "Returned value", "The number of years from a fixed reference point in the past. UInt16."], "Examples": ["SELECT    toRelativeYearNum(toDate('2002-12-08')) AS y1,    toRelativeYearNum(toDate('2010-10-26')) AS y2"], "Category": ["Dates and Times Functions"], "index": 431, "vector_txt": "431:Feature: toRelativeYearNum(date)\nDescription: toRelativeYearNumConverts a date, or date with time, to the number of years elapsed since a certain fixed point in the past.SyntaxtoRelativeYearNum(date)Argumentsdate \u2014 Date or date with time. Date/DateTime/DateTime64.Returned valueThe number of years from a fixed reference point in the past. UInt16.\nExamples: SELECT    toRelativeYearNum(toDate('2002-12-08')) AS y1,    toRelativeYearNum(toDate('2010-10-26')) AS y2\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toRelativeQuarterNum"], "Feature": ["toRelativeQuarterNum(date)"], "Description": ["toRelativeQuarterNum", "Converts a date, or date with time, to the number of quarters elapsed since a certain fixed point in the past.", "Syntax", "toRelativeQuarterNum(date)", "Arguments", "date \u2014 Date or date with time. Date/DateTime/DateTime64.", "Returned value", "The number of quarters from a fixed reference point in the past. UInt32."], "Examples": ["SELECT  toRelativeQuarterNum(toDate('1993-11-25')) AS q1,  toRelativeQuarterNum(toDate('2005-01-05')) AS q2"], "Category": ["Dates and Times Functions"], "index": 432, "vector_txt": "432:Feature: toRelativeQuarterNum(date)\nDescription: toRelativeQuarterNumConverts a date, or date with time, to the number of quarters elapsed since a certain fixed point in the past.SyntaxtoRelativeQuarterNum(date)Argumentsdate \u2014 Date or date with time. Date/DateTime/DateTime64.Returned valueThe number of quarters from a fixed reference point in the past. UInt32.\nExamples: SELECT  toRelativeQuarterNum(toDate('1993-11-25')) AS q1,  toRelativeQuarterNum(toDate('2005-01-05')) AS q2\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toRelativeMonthNum"], "Feature": ["toRelativeMonthNum(date)"], "Description": ["toRelativeMonthNum", "Converts a date, or date with time, to the number of months elapsed since a certain fixed point in the past.", "Syntax", "toRelativeMonthNum(date)", "Arguments", "date \u2014 Date or date with time. Date/DateTime/DateTime64.", "Returned value", "The number of months from a fixed reference point in the past. UInt32."], "Examples": ["SELECT  toRelativeMonthNum(toDate('2001-04-25')) AS m1,  toRelativeMonthNum(toDate('2009-07-08')) AS m2"], "Category": ["Dates and Times Functions"], "index": 433, "vector_txt": "433:Feature: toRelativeMonthNum(date)\nDescription: toRelativeMonthNumConverts a date, or date with time, to the number of months elapsed since a certain fixed point in the past.SyntaxtoRelativeMonthNum(date)Argumentsdate \u2014 Date or date with time. Date/DateTime/DateTime64.Returned valueThe number of months from a fixed reference point in the past. UInt32.\nExamples: SELECT  toRelativeMonthNum(toDate('2001-04-25')) AS m1,  toRelativeMonthNum(toDate('2009-07-08')) AS m2\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toRelativeWeekNum"], "Feature": ["toRelativeWeekNum(date)"], "Description": ["toRelativeWeekNum", "Converts a date, or date with time, to the number of weeks elapsed since a certain fixed point in the past.", "Syntax", "toRelativeWeekNum(date)", "Arguments", "date \u2014 Date or date with time. Date/DateTime/DateTime64.", "Returned value", "The number of weeks from a fixed reference point in the past. UInt32."], "Examples": ["SELECT  toRelativeWeekNum(toDate('2000-02-29')) AS w1,  toRelativeWeekNum(toDate('2001-01-12')) AS w2"], "Category": ["Dates and Times Functions"], "index": 434, "vector_txt": "434:Feature: toRelativeWeekNum(date)\nDescription: toRelativeWeekNumConverts a date, or date with time, to the number of weeks elapsed since a certain fixed point in the past.SyntaxtoRelativeWeekNum(date)Argumentsdate \u2014 Date or date with time. Date/DateTime/DateTime64.Returned valueThe number of weeks from a fixed reference point in the past. UInt32.\nExamples: SELECT  toRelativeWeekNum(toDate('2000-02-29')) AS w1,  toRelativeWeekNum(toDate('2001-01-12')) AS w2\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toRelativeDayNum"], "Feature": ["toRelativeDayNum(date)"], "Description": ["toRelativeDayNum", "Converts a date, or date with time, to the number of days elapsed since a certain fixed point in the past.", "Syntax", "toRelativeDayNum(date)", "Arguments", "date \u2014 Date or date with time. Date/DateTime/DateTime64.", "Returned value", "The number of days from a fixed reference point in the past. UInt32."], "Examples": ["SELECT  toRelativeDayNum(toDate('1993-10-05')) AS d1,  toRelativeDayNum(toDate('2000-09-20')) AS d2"], "Category": ["Dates and Times Functions"], "index": 435, "vector_txt": "435:Feature: toRelativeDayNum(date)\nDescription: toRelativeDayNumConverts a date, or date with time, to the number of days elapsed since a certain fixed point in the past.SyntaxtoRelativeDayNum(date)Argumentsdate \u2014 Date or date with time. Date/DateTime/DateTime64.Returned valueThe number of days from a fixed reference point in the past. UInt32.\nExamples: SELECT  toRelativeDayNum(toDate('1993-10-05')) AS d1,  toRelativeDayNum(toDate('2000-09-20')) AS d2\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/arithmetic-functions"], "Title": ["divideDecimal"], "Feature": ["divideDecimal(a, b[, result_scale])"], "Description": ["divideDecimal", "Divides two decimals a and b. The result value will be of type Decimal256.", "The scale of the result can be explicitly specified by result_scale. If result_scale is not specified, it is assumed to be the maximum scale of the input values.", "This function work significantly slower than usual divide. In case no control over the result precision is needed and/or fast computation is desired, consider using divide.", "Syntax", "divideDecimal(a, b[, result_scale])", "Arguments", "a \u2014 First value: Decimal.b \u2014 Second value: Decimal.result_scale \u2014 Scale of result: Int/UInt.", "Returned value", "The result of division with given scale. Decimal256."], "Examples": ["SELECT toDecimal64(-12, 1) / toDecimal32(2.1, 1);SELECT toDecimal64(-12, 1) as a, toDecimal32(2.1, 1) as b, divideDecimal(a, b, 1), divideDecimal(a, b, 5);", "SELECT toDecimal64(-12, 0) / toDecimal32(2.1, 1);SELECT toDecimal64(-12, 0) as a, toDecimal32(2.1, 1) as b, divideDecimal(a, b, 1), divideDecimal(a, b, 5);"], "Category": ["Arithmetic Functions"], "index": 436, "vector_txt": "436:Feature: divideDecimal(a, b[, result_scale])\nDescription: divideDecimalDivides two decimals a and b. The result value will be of type Decimal256.The scale of the result can be explicitly specified by result_scale. If result_scale is not specified, it is assumed to be the maximum scale of the input values.This function work significantly slower than usual divide. In case no control over the result precision is needed and/or fast computation is desired, consider using divide.SyntaxdivideDecimal(a, b[, result_scale])Argumentsa \u2014 First value: Decimal.b \u2014 Second value: Decimal.result_scale \u2014 Scale of result: Int/UInt.Returned valueThe result of division with given scale. Decimal256.\nExamples: SELECT toDecimal64(-12, 1) / toDecimal32(2.1, 1);SELECT toDecimal64(-12, 1) as a, toDecimal32(2.1, 1) as b, divideDecimal(a, b, 1), divideDecimal(a, b, 5);SELECT toDecimal64(-12, 0) / toDecimal32(2.1, 1);SELECT toDecimal64(-12, 0) as a, toDecimal32(2.1, 1) as b, divideDecimal(a, b, 1), divideDecimal(a, b, 5);\nCategory: Arithmetic Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toRelativeHourNum"], "Feature": ["toRelativeHourNum(date)"], "Description": ["toRelativeHourNum", "Converts a date, or date with time, to the number of hours elapsed since a certain fixed point in the past.", "Syntax", "toRelativeHourNum(date)", "Arguments", "date \u2014 Date or date with time. Date/DateTime/DateTime64.", "Returned value", "The number of hours from a fixed reference point in the past. UInt32."], "Examples": ["SELECT  toRelativeHourNum(toDateTime('1993-10-05 05:20:36')) AS h1,  toRelativeHourNum(toDateTime('2000-09-20 14:11:29')) AS h2"], "Category": ["Dates and Times Functions"], "index": 437, "vector_txt": "437:Feature: toRelativeHourNum(date)\nDescription: toRelativeHourNumConverts a date, or date with time, to the number of hours elapsed since a certain fixed point in the past.SyntaxtoRelativeHourNum(date)Argumentsdate \u2014 Date or date with time. Date/DateTime/DateTime64.Returned valueThe number of hours from a fixed reference point in the past. UInt32.\nExamples: SELECT  toRelativeHourNum(toDateTime('1993-10-05 05:20:36')) AS h1,  toRelativeHourNum(toDateTime('2000-09-20 14:11:29')) AS h2\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toRelativeMinuteNum"], "Feature": ["toRelativeMinuteNum(date)"], "Description": ["toRelativeMinuteNum", "Converts a date, or date with time, to the number of minutes elapsed since a certain fixed point in the past.", "Syntax", "toRelativeMinuteNum(date)", "Arguments", "date \u2014 Date or date with time. Date/DateTime/DateTime64.", "Returned value", "The number of minutes from a fixed reference point in the past. UInt32."], "Examples": ["SELECT  toRelativeMinuteNum(toDateTime('1993-10-05 05:20:36')) AS m1,  toRelativeMinuteNum(toDateTime('2000-09-20 14:11:29')) AS m2"], "Category": ["Dates and Times Functions"], "index": 438, "vector_txt": "438:Feature: toRelativeMinuteNum(date)\nDescription: toRelativeMinuteNumConverts a date, or date with time, to the number of minutes elapsed since a certain fixed point in the past.SyntaxtoRelativeMinuteNum(date)Argumentsdate \u2014 Date or date with time. Date/DateTime/DateTime64.Returned valueThe number of minutes from a fixed reference point in the past. UInt32.\nExamples: SELECT  toRelativeMinuteNum(toDateTime('1993-10-05 05:20:36')) AS m1,  toRelativeMinuteNum(toDateTime('2000-09-20 14:11:29')) AS m2\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toRelativeSecondNum"], "Feature": ["toRelativeSecondNum(date)"], "Description": ["toRelativeSecondNum", "Converts a date, or date with time, to the number of the seconds elapsed since a certain fixed point in the past.", "Syntax", "toRelativeSecondNum(date)", "Arguments", "date \u2014 Date or date with time. Date/DateTime/DateTime64.", "Returned value", "The number of seconds from a fixed reference point in the past. UInt32."], "Examples": ["SELECT  toRelativeSecondNum(toDateTime('1993-10-05 05:20:36')) AS s1,  toRelativeSecondNum(toDateTime('2000-09-20 14:11:29')) AS s2"], "Category": ["Dates and Times Functions"], "index": 439, "vector_txt": "439:Feature: toRelativeSecondNum(date)\nDescription: toRelativeSecondNumConverts a date, or date with time, to the number of the seconds elapsed since a certain fixed point in the past.SyntaxtoRelativeSecondNum(date)Argumentsdate \u2014 Date or date with time. Date/DateTime/DateTime64.Returned valueThe number of seconds from a fixed reference point in the past. UInt32.\nExamples: SELECT  toRelativeSecondNum(toDateTime('1993-10-05 05:20:36')) AS s1,  toRelativeSecondNum(toDateTime('2000-09-20 14:11:29')) AS s2\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toISOYear"], "Feature": ["toISOYear(value)"], "Description": ["toISOYear", "Converts a date, or date with time, to the ISO year as a UInt16 number.", "Syntax", "toISOYear(value)", "Arguments", "value \u2014 The value with date or date with time. Date, Date32, DateTime or DateTime64", "Returned value", "The input value converted to a ISO year number. UInt16."], "Examples": ["SELECT  toISOYear(toDate('2024/10/02')) as year1,  toISOYear(toDateTime('2024-10-02 01:30:00')) as year2"], "Category": ["Dates and Times Functions"], "index": 440, "vector_txt": "440:Feature: toISOYear(value)\nDescription: toISOYearConverts a date, or date with time, to the ISO year as a UInt16 number.SyntaxtoISOYear(value)Argumentsvalue \u2014 The value with date or date with time. Date, Date32, DateTime or DateTime64Returned valueThe input value converted to a ISO year number. UInt16.\nExamples: SELECT  toISOYear(toDate('2024/10/02')) as year1,  toISOYear(toDateTime('2024-10-02 01:30:00')) as year2\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toISOWeek"], "Feature": ["toISOWeek(value)"], "Description": ["toISOWeek", "Converts a date, or date with time, to a UInt8 number containing the ISO Week number.", "Syntax", "toISOWeek(value)", "Arguments", "value \u2014 The value with date or date with time.", "Returned value", "value converted to the current ISO week number. UInt8."], "Examples": ["SELECT  toISOWeek(toDate('2024/10/02')) AS week1,  toISOWeek(toDateTime('2024/10/02 01:30:00')) AS week2"], "Category": ["Dates and Times Functions"], "index": 441, "vector_txt": "441:Feature: toISOWeek(value)\nDescription: toISOWeekConverts a date, or date with time, to a UInt8 number containing the ISO Week number.SyntaxtoISOWeek(value)Argumentsvalue \u2014 The value with date or date with time.Returned valuevalue converted to the current ISO week number. UInt8.\nExamples: SELECT  toISOWeek(toDate('2024/10/02')) AS week1,  toISOWeek(toDateTime('2024/10/02 01:30:00')) AS week2\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toWeek"], "Feature": ["toWeek(t[, mode[, time_zone]])"], "Description": ["toWeek", "This function returns the week number for date or datetime. The two-argument form of toWeek() enables you to specify whether the week starts on Sunday or Monday and whether the return value should be in the range from 0 to 53 or from 1 to 53. If the mode argument is omitted, the default mode is 0.", "toISOWeek() is a compatibility function that is equivalent to toWeek(date,3).", "The following table describes how the mode argument works.", "ModeFirst day of weekRangeWeek 1 is the first week ...0Sunday0-53with a Sunday in this year1Monday0-53with 4 or more days this year2Sunday1-53with a Sunday in this year3Monday1-53with 4 or more days this year4Sunday0-53with 4 or more days this year5Monday0-53with a Monday in this year6Sunday1-53with 4 or more days this year7Monday1-53with a Monday in this year8Sunday1-53contains January 19Monday1-53contains January 1", "For mode values with a meaning of \u201cwith 4 or more days this year,\u201d weeks are numbered according to ISO 8601:1988:", "If the week containing January 1 has 4 or more days in the new year, it is week 1.Otherwise, it is the last week of the previous year, and the next week is week 1.", "For mode values with a meaning of \u201ccontains January 1\u201d, the week contains January 1 is week 1.\nIt does not matter how many days in the new year the week contained, even if it contained only one day.\nI.e. if the last week of December contains January 1 of the next year, it will be week 1 of the next year.", "Syntax", "toWeek(t[, mode[, time_zone]])", "Alias: WEEK", "Arguments", "t \u2013 Date or DateTime.mode \u2013 Optional parameter, Range of values is [0,9], default is 0.Timezone \u2013 Optional parameter, it behaves like any other conversion function.", "The first argument can also be specified as String in a format supported by parseDateTime64BestEffort(). Support for string arguments exists only for reasons of compatibility with MySQL which is expected by certain 3rd party tools. As string argument support may in future be made dependent on new MySQL-compatibility settings and because string parsing is generally slow, it is recommended to not use it."], "Examples": ["SELECT toDate('2016-12-27') AS date, toWeek(date) AS week0, toWeek(date,1) AS week1, toWeek(date,9) AS week9;"], "Category": ["Dates and Times Functions"], "index": 442, "vector_txt": "442:Feature: toWeek(t[, mode[, time_zone]])\nDescription: toWeekThis function returns the week number for date or datetime. The two-argument form of toWeek() enables you to specify whether the week starts on Sunday or Monday and whether the return value should be in the range from 0 to 53 or from 1 to 53. If the mode argument is omitted, the default mode is 0.toISOWeek() is a compatibility function that is equivalent to toWeek(date,3).The following table describes how the mode argument works.ModeFirst day of weekRangeWeek 1 is the first week ...0Sunday0-53with a Sunday in this year1Monday0-53with 4 or more days this year2Sunday1-53with a Sunday in this year3Monday1-53with 4 or more days this year4Sunday0-53with 4 or more days this year5Monday0-53with a Monday in this year6Sunday1-53with 4 or more days this year7Monday1-53with a Monday in this year8Sunday1-53contains January 19Monday1-53contains January 1For mode values with a meaning of \u201cwith 4 or more days this year,\u201d weeks are numbered according to ISO 8601:1988:If the week containing January 1 has 4 or more days in the new year, it is week 1.Otherwise, it is the last week of the previous year, and the next week is week 1.For mode values with a meaning of \u201ccontains January 1\u201d, the week contains January 1 is week 1.\nIt does not matter how many days in the new year the week contained, even if it contained only one day.\nI.e. if the last week of December contains January 1 of the next year, it will be week 1 of the next year.SyntaxtoWeek(t[, mode[, time_zone]])Alias: WEEKArgumentst \u2013 Date or DateTime.mode \u2013 Optional parameter, Range of values is [0,9], default is 0.Timezone \u2013 Optional parameter, it behaves like any other conversion function.The first argument can also be specified as String in a format supported by parseDateTime64BestEffort(). Support for string arguments exists only for reasons of compatibility with MySQL which is expected by certain 3rd party tools. As string argument support may in future be made dependent on new MySQL-compatibility settings and because string parsing is generally slow, it is recommended to not use it.\nExamples: SELECT toDate('2016-12-27') AS date, toWeek(date) AS week0, toWeek(date,1) AS week1, toWeek(date,9) AS week9;\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toYearWeek"], "Feature": ["toYearWeek(t[, mode[, timezone]])"], "Description": ["toYearWeek", "Returns year and week for a date. The year in the result may be different from the year in the date argument for the first and the last week of the year.", "The mode argument works like the mode argument to toWeek(). For the single-argument syntax, a mode value of 0 is used.", "toISOYear() is a compatibility function that is equivalent to intDiv(toYearWeek(date,3),100).", "DangerThe week number returned by toYearWeek() can be different from what the toWeek() returns. toWeek() always returns week number in the context of the given year, and in case toWeek() returns 0, toYearWeek() returns the value corresponding to the last week of previous year. See prev_yearWeek in example below.", "Syntax", "toYearWeek(t[, mode[, timezone]])", "Alias: YEARWEEK", "The first argument can also be specified as String in a format supported by parseDateTime64BestEffort(). Support for string arguments exists only for reasons of compatibility with MySQL which is expected by certain 3rd party tools. As string argument support may in future be made dependent on new MySQL-compatibility settings and because string parsing is generally slow, it is recommended to not use it."], "Examples": ["SELECT toDate('2016-12-27') AS date, toYearWeek(date) AS yearWeek0, toYearWeek(date,1) AS yearWeek1, toYearWeek(date,9) AS yearWeek9, toYearWeek(toDate('2022-01-01')) AS prev_yearWeek;"], "Category": ["Dates and Times Functions"], "index": 443, "vector_txt": "443:Feature: toYearWeek(t[, mode[, timezone]])\nDescription: toYearWeekReturns year and week for a date. The year in the result may be different from the year in the date argument for the first and the last week of the year.The mode argument works like the mode argument to toWeek(). For the single-argument syntax, a mode value of 0 is used.toISOYear() is a compatibility function that is equivalent to intDiv(toYearWeek(date,3),100).DangerThe week number returned by toYearWeek() can be different from what the toWeek() returns. toWeek() always returns week number in the context of the given year, and in case toWeek() returns 0, toYearWeek() returns the value corresponding to the last week of previous year. See prev_yearWeek in example below.SyntaxtoYearWeek(t[, mode[, timezone]])Alias: YEARWEEKThe first argument can also be specified as String in a format supported by parseDateTime64BestEffort(). Support for string arguments exists only for reasons of compatibility with MySQL which is expected by certain 3rd party tools. As string argument support may in future be made dependent on new MySQL-compatibility settings and because string parsing is generally slow, it is recommended to not use it.\nExamples: SELECT toDate('2016-12-27') AS date, toYearWeek(date) AS yearWeek0, toYearWeek(date,1) AS yearWeek1, toYearWeek(date,9) AS yearWeek9, toYearWeek(toDate('2022-01-01')) AS prev_yearWeek;\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toDaysSinceYearZero"], "Feature": ["toDaysSinceYearZero(date[, time_zone])"], "Description": ["toDaysSinceYearZero", "Returns for a given date, the number of days passed since 1 January 0000 in the proleptic Gregorian calendar defined by ISO 8601. The calculation is the same as in MySQL's TO_DAYS() function.", "Syntax", "toDaysSinceYearZero(date[, time_zone])", "Alias: TO_DAYS", "Arguments", "date \u2014 The date to calculate the number of days passed since year zero from. Date, Date32, DateTime or DateTime64.time_zone \u2014 A String type const value or an expression represent the time zone. String types", "Returned value", "The number of days passed since date 0000-01-01. UInt32."], "Examples": ["SELECT toDaysSinceYearZero(toDate('2023-09-08'));"], "Category": ["Dates and Times Functions"], "index": 444, "vector_txt": "444:Feature: toDaysSinceYearZero(date[, time_zone])\nDescription: toDaysSinceYearZeroReturns for a given date, the number of days passed since 1 January 0000 in the proleptic Gregorian calendar defined by ISO 8601. The calculation is the same as in MySQL's TO_DAYS() function.SyntaxtoDaysSinceYearZero(date[, time_zone])Alias: TO_DAYSArgumentsdate \u2014 The date to calculate the number of days passed since year zero from. Date, Date32, DateTime or DateTime64.time_zone \u2014 A String type const value or an expression represent the time zone. String typesReturned valueThe number of days passed since date 0000-01-01. UInt32.\nExamples: SELECT toDaysSinceYearZero(toDate('2023-09-08'));\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["fromDaysSinceYearZero"], "Feature": ["fromDaysSinceYearZero(days)"], "Description": ["fromDaysSinceYearZero", "Returns for a given number of days passed since 1 January 0000 the corresponding date in the proleptic Gregorian calendar defined by ISO 8601. The calculation is the same as in MySQL's FROM_DAYS() function.", "The result is undefined if it cannot be represented within the bounds of the Date type.", "Syntax", "fromDaysSinceYearZero(days)", "Alias: FROM_DAYS", "Arguments", "days \u2014 The number of days passed since year zero.", "Returned value", "The date corresponding to the number of days passed since year zero. Date."], "Examples": ["SELECT fromDaysSinceYearZero(739136), fromDaysSinceYearZero(toDaysSinceYearZero(toDate('2023-09-08')));"], "Category": ["Dates and Times Functions"], "index": 445, "vector_txt": "445:Feature: fromDaysSinceYearZero(days)\nDescription: fromDaysSinceYearZeroReturns for a given number of days passed since 1 January 0000 the corresponding date in the proleptic Gregorian calendar defined by ISO 8601. The calculation is the same as in MySQL's FROM_DAYS() function.The result is undefined if it cannot be represented within the bounds of the Date type.SyntaxfromDaysSinceYearZero(days)Alias: FROM_DAYSArgumentsdays \u2014 The number of days passed since year zero.Returned valueThe date corresponding to the number of days passed since year zero. Date.\nExamples: SELECT fromDaysSinceYearZero(739136), fromDaysSinceYearZero(toDaysSinceYearZero(toDate('2023-09-08')));\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["fromDaysSinceYearZero32"], "Feature": ["fromDaysSinceYearZero32"], "Description": ["fromDaysSinceYearZero32", "Like fromDaysSinceYearZero but returns a Date32."], "Examples": [], "Category": ["Dates and Times Functions"], "index": 446, "vector_txt": "446:Feature: fromDaysSinceYearZero32\nDescription: fromDaysSinceYearZero32Like fromDaysSinceYearZero but returns a Date32.\nExamples: \nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/arithmetic-functions"], "Title": ["byteSwap"], "Feature": ["byteSwap(a)"], "Description": ["byteSwap", "Reverses the bytes of an integer, i.e. changes its endianness.", "Syntax", "byteSwap(a)"], "Examples": ["byteSwap(3351772109)"], "Category": ["Arithmetic Functions"], "index": 447, "vector_txt": "447:Feature: byteSwap(a)\nDescription: byteSwapReverses the bytes of an integer, i.e. changes its endianness.SyntaxbyteSwap(a)\nExamples: byteSwap(3351772109)\nCategory: Arithmetic Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["age"], "Feature": ["age('unit', startdate, enddate, [timezone])"], "Description": ["age", "Returns the unit component of the difference between startdate and enddate. The difference is calculated using a precision of 1 nanosecond.\nE.g. the difference between 2021-12-29 and 2022-01-01 is 3 days for day unit, 0 months for month unit, 0 years for year unit.", "For an alternative to age, see function date_diff.", "Syntax", "age('unit', startdate, enddate, [timezone])", "Arguments", "unit \u2014 The type of interval for result. String.\nPossible values:nanosecond, nanoseconds, nsmicrosecond, microseconds, us, umillisecond, milliseconds, mssecond, seconds, ss, sminute, minutes, mi, nhour, hours, hh, hday, days, dd, dweek, weeks, wk, wwmonth, months, mm, mquarter, quarters, qq, qyear, years, yyyy, yystartdate \u2014 The first time value to subtract (the subtrahend). Date, Date32, DateTime or DateTime64.enddate \u2014 The second time value to subtract from (the minuend). Date, Date32, DateTime or DateTime64.timezone \u2014 Timezone name (optional). If specified, it is applied to both startdate and enddate. If not specified, timezones of startdate and enddate are used. If they are not the same, the result is unspecified. String.", "Returned value", "Difference between enddate and startdate expressed in unit. Int."], "Examples": ["SELECT age('hour', toDateTime('2018-01-01 22:30:00'), toDateTime('2018-01-02 23:00:00'));", "SELECT    toDate('2022-01-01') AS e,    toDate('2021-12-29') AS s,    age('day', s, e) AS day_age,    age('month', s, e) AS month__age,    age('year', s, e) AS year_age;"], "Category": ["Dates and Times Functions"], "index": 448, "vector_txt": "448:Feature: age('unit', startdate, enddate, [timezone])\nDescription: ageReturns the unit component of the difference between startdate and enddate. The difference is calculated using a precision of 1 nanosecond.\nE.g. the difference between 2021-12-29 and 2022-01-01 is 3 days for day unit, 0 months for month unit, 0 years for year unit.For an alternative to age, see function date_diff.Syntaxage('unit', startdate, enddate, [timezone])Argumentsunit \u2014 The type of interval for result. String.\nPossible values:nanosecond, nanoseconds, nsmicrosecond, microseconds, us, umillisecond, milliseconds, mssecond, seconds, ss, sminute, minutes, mi, nhour, hours, hh, hday, days, dd, dweek, weeks, wk, wwmonth, months, mm, mquarter, quarters, qq, qyear, years, yyyy, yystartdate \u2014 The first time value to subtract (the subtrahend). Date, Date32, DateTime or DateTime64.enddate \u2014 The second time value to subtract from (the minuend). Date, Date32, DateTime or DateTime64.timezone \u2014 Timezone name (optional). If specified, it is applied to both startdate and enddate. If not specified, timezones of startdate and enddate are used. If they are not the same, the result is unspecified. String.Returned valueDifference between enddate and startdate expressed in unit. Int.\nExamples: SELECT age('hour', toDateTime('2018-01-01 22:30:00'), toDateTime('2018-01-02 23:00:00'));SELECT    toDate('2022-01-01') AS e,    toDate('2021-12-29') AS s,    age('day', s, e) AS day_age,    age('month', s, e) AS month__age,    age('year', s, e) AS year_age;\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["date_diff"], "Feature": ["date_diff('unit', startdate, enddate, [timezone])"], "Description": ["date_diff", "Returns the count of the specified unit boundaries crossed between the startdate and the enddate.\nThe difference is calculated using relative units, e.g. the difference between 2021-12-29 and 2022-01-01 is 3 days for unit day (see toRelativeDayNum), 1 month for unit month (see toRelativeMonthNum) and 1 year for unit year (see toRelativeYearNum).", "If unit week was specified, date_diff assumes that weeks start on Monday. Note that this behavior is different from that of function toWeek() in which weeks start by default on Sunday.", "For an alternative to date_diff, see function age.", "Syntax", "date_diff('unit', startdate, enddate, [timezone])", "Aliases: dateDiff, DATE_DIFF, timestampDiff, timestamp_diff, TIMESTAMP_DIFF.", "Arguments", "unit \u2014 The type of interval for result. String.\nPossible values:nanosecond, nanoseconds, nsmicrosecond, microseconds, us, umillisecond, milliseconds, mssecond, seconds, ss, sminute, minutes, mi, nhour, hours, hh, hday, days, dd, dweek, weeks, wk, wwmonth, months, mm, mquarter, quarters, qq, qyear, years, yyyy, yystartdate \u2014 The first time value to subtract (the subtrahend). Date, Date32, DateTime or DateTime64.enddate \u2014 The second time value to subtract from (the minuend). Date, Date32, DateTime or DateTime64.timezone \u2014 Timezone name (optional). If specified, it is applied to both startdate and enddate. If not specified, timezones of startdate and enddate are used. If they are not the same, the result is unspecified. String.", "Returned value", "Difference between enddate and startdate expressed in unit. Int."], "Examples": ["SELECT dateDiff('hour', toDateTime('2018-01-01 22:00:00'), toDateTime('2018-01-02 23:00:00'));", "SELECT    toDate('2022-01-01') AS e,    toDate('2021-12-29') AS s,    dateDiff('day', s, e) AS day_diff,    dateDiff('month', s, e) AS month__diff,    dateDiff('year', s, e) AS year_diff;"], "Category": ["Dates and Times Functions"], "index": 449, "vector_txt": "449:Feature: date_diff('unit', startdate, enddate, [timezone])\nDescription: date_diffReturns the count of the specified unit boundaries crossed between the startdate and the enddate.\nThe difference is calculated using relative units, e.g. the difference between 2021-12-29 and 2022-01-01 is 3 days for unit day (see toRelativeDayNum), 1 month for unit month (see toRelativeMonthNum) and 1 year for unit year (see toRelativeYearNum).If unit week was specified, date_diff assumes that weeks start on Monday. Note that this behavior is different from that of function toWeek() in which weeks start by default on Sunday.For an alternative to date_diff, see function age.Syntaxdate_diff('unit', startdate, enddate, [timezone])Aliases: dateDiff, DATE_DIFF, timestampDiff, timestamp_diff, TIMESTAMP_DIFF.Argumentsunit \u2014 The type of interval for result. String.\nPossible values:nanosecond, nanoseconds, nsmicrosecond, microseconds, us, umillisecond, milliseconds, mssecond, seconds, ss, sminute, minutes, mi, nhour, hours, hh, hday, days, dd, dweek, weeks, wk, wwmonth, months, mm, mquarter, quarters, qq, qyear, years, yyyy, yystartdate \u2014 The first time value to subtract (the subtrahend). Date, Date32, DateTime or DateTime64.enddate \u2014 The second time value to subtract from (the minuend). Date, Date32, DateTime or DateTime64.timezone \u2014 Timezone name (optional). If specified, it is applied to both startdate and enddate. If not specified, timezones of startdate and enddate are used. If they are not the same, the result is unspecified. String.Returned valueDifference between enddate and startdate expressed in unit. Int.\nExamples: SELECT dateDiff('hour', toDateTime('2018-01-01 22:00:00'), toDateTime('2018-01-02 23:00:00'));SELECT    toDate('2022-01-01') AS e,    toDate('2021-12-29') AS s,    dateDiff('day', s, e) AS day_diff,    dateDiff('month', s, e) AS month__diff,    dateDiff('year', s, e) AS year_diff;\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["date_trunc"], "Feature": ["date_trunc(unit, value[, timezone])"], "Description": ["date_trunc", "Truncates date and time data to the specified part of date.", "Syntax", "date_trunc(unit, value[, timezone])", "Alias: dateTrunc.", "Arguments", "unit \u2014 The type of interval to truncate the result. String Literal.\nPossible values:nanosecond - Compatible only with DateTime64microsecond - Compatible only with DateTime64milisecond - Compatible only with DateTime64secondminutehourdayweekmonthquarteryearunit argument is case-insensitive.value \u2014 Date and time. Date, Date32, DateTime or DateTime64.timezone \u2014 Timezone name for the returned value (optional). If not specified, the function uses the timezone of the value parameter. String.", "Returned value", "Value, truncated to the specified part of date. DateTime."], "Examples": ["SELECT now(), date_trunc('hour', now());", "SELECT now(), date_trunc('hour', now(), 'Asia/Istanbul');"], "Category": ["Dates and Times Functions"], "index": 450, "vector_txt": "450:Feature: date_trunc(unit, value[, timezone])\nDescription: date_truncTruncates date and time data to the specified part of date.Syntaxdate_trunc(unit, value[, timezone])Alias: dateTrunc.Argumentsunit \u2014 The type of interval to truncate the result. String Literal.\nPossible values:nanosecond - Compatible only with DateTime64microsecond - Compatible only with DateTime64milisecond - Compatible only with DateTime64secondminutehourdayweekmonthquarteryearunit argument is case-insensitive.value \u2014 Date and time. Date, Date32, DateTime or DateTime64.timezone \u2014 Timezone name for the returned value (optional). If not specified, the function uses the timezone of the value parameter. String.Returned valueValue, truncated to the specified part of date. DateTime.\nExamples: SELECT now(), date_trunc('hour', now());SELECT now(), date_trunc('hour', now(), 'Asia/Istanbul');\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["date_add"], "Feature": ["date_add(unit, value, date)"], "Description": ["date_add", "Adds the time interval or date interval to the provided date or date with time.", "If the addition results in a value outside the bounds of the data type, the result is undefined.", "Syntax", "date_add(unit, value, date)", "Alternative syntax:", "date_add(date, INTERVAL value unit)", "Aliases: dateAdd, DATE_ADD.", "Arguments", "unit \u2014 The type of interval to add. Note: This is not a String and must therefore not be quoted.\nPossible values:secondminutehourdayweekmonthquarteryearvalue \u2014 Value of interval to add. Int.date \u2014 The date or date with time to which value is added. Date, Date32, DateTime or DateTime64.", "Returned value", "Date or date with time obtained by adding value, expressed in unit, to date. Date, Date32, DateTime or DateTime64."], "Examples": ["SELECT date_add(YEAR, 3, toDate('2018-01-01'));", "SELECT date_add(toDate('2018-01-01'), INTERVAL 3 YEAR);"], "Category": ["Dates and Times Functions"], "index": 451, "vector_txt": "451:Feature: date_add(unit, value, date)\nDescription: date_addAdds the time interval or date interval to the provided date or date with time.If the addition results in a value outside the bounds of the data type, the result is undefined.Syntaxdate_add(unit, value, date)Alternative syntax:date_add(date, INTERVAL value unit)Aliases: dateAdd, DATE_ADD.Argumentsunit \u2014 The type of interval to add. Note: This is not a String and must therefore not be quoted.\nPossible values:secondminutehourdayweekmonthquarteryearvalue \u2014 Value of interval to add. Int.date \u2014 The date or date with time to which value is added. Date, Date32, DateTime or DateTime64.Returned valueDate or date with time obtained by adding value, expressed in unit, to date. Date, Date32, DateTime or DateTime64.\nExamples: SELECT date_add(YEAR, 3, toDate('2018-01-01'));SELECT date_add(toDate('2018-01-01'), INTERVAL 3 YEAR);\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["date_sub"], "Feature": ["date_sub(unit, value, date)"], "Description": ["date_sub", "Subtracts the time interval or date interval from the provided date or date with time.", "If the subtraction results in a value outside the bounds of the data type, the result is undefined.", "Syntax", "date_sub(unit, value, date)", "Alternative syntax:", "date_sub(date, INTERVAL value unit)", "Aliases: dateSub, DATE_SUB.", "Arguments", "unit \u2014 The type of interval to subtract. Note: This is not a String and must therefore not be quoted.  Possible values:secondminutehourdayweekmonthquarteryearvalue \u2014 Value of interval to subtract. Int.date \u2014 The date or date with time from which value is subtracted. Date, Date32, DateTime or DateTime64.", "Returned value", "Date or date with time obtained by subtracting value, expressed in unit, from date. Date, Date32, DateTime or DateTime64."], "Examples": ["SELECT date_sub(YEAR, 3, toDate('2018-01-01'));", "SELECT date_sub(toDate('2018-01-01'), INTERVAL 3 YEAR);"], "Category": ["Dates and Times Functions"], "index": 452, "vector_txt": "452:Feature: date_sub(unit, value, date)\nDescription: date_subSubtracts the time interval or date interval from the provided date or date with time.If the subtraction results in a value outside the bounds of the data type, the result is undefined.Syntaxdate_sub(unit, value, date)Alternative syntax:date_sub(date, INTERVAL value unit)Aliases: dateSub, DATE_SUB.Argumentsunit \u2014 The type of interval to subtract. Note: This is not a String and must therefore not be quoted.  Possible values:secondminutehourdayweekmonthquarteryearvalue \u2014 Value of interval to subtract. Int.date \u2014 The date or date with time from which value is subtracted. Date, Date32, DateTime or DateTime64.Returned valueDate or date with time obtained by subtracting value, expressed in unit, from date. Date, Date32, DateTime or DateTime64.\nExamples: SELECT date_sub(YEAR, 3, toDate('2018-01-01'));SELECT date_sub(toDate('2018-01-01'), INTERVAL 3 YEAR);\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["timestamp_add"], "Feature": ["timestamp_add(date, INTERVAL value unit)"], "Description": ["timestamp_add", "Adds the specified time value with the provided date or date time value.", "If the addition results in a value outside the bounds of the data type, the result is undefined.", "Syntax", "timestamp_add(date, INTERVAL value unit)", "Aliases: timeStampAdd, TIMESTAMP_ADD.", "Arguments", "date \u2014 Date or date with time. Date, Date32, DateTime or DateTime64.value \u2014 Value of interval to add. Int.unit \u2014 The type of interval to add. String.\nPossible values:secondminutehourdayweekmonthquarteryear", "Returned value", "Date or date with time with the specified value expressed in unit added to date. Date, Date32, DateTime or DateTime64."], "Examples": ["select timestamp_add(toDate('2018-01-01'), INTERVAL 3 MONTH);"], "Category": ["Dates and Times Functions"], "index": 453, "vector_txt": "453:Feature: timestamp_add(date, INTERVAL value unit)\nDescription: timestamp_addAdds the specified time value with the provided date or date time value.If the addition results in a value outside the bounds of the data type, the result is undefined.Syntaxtimestamp_add(date, INTERVAL value unit)Aliases: timeStampAdd, TIMESTAMP_ADD.Argumentsdate \u2014 Date or date with time. Date, Date32, DateTime or DateTime64.value \u2014 Value of interval to add. Int.unit \u2014 The type of interval to add. String.\nPossible values:secondminutehourdayweekmonthquarteryearReturned valueDate or date with time with the specified value expressed in unit added to date. Date, Date32, DateTime or DateTime64.\nExamples: select timestamp_add(toDate('2018-01-01'), INTERVAL 3 MONTH);\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["timestamp_sub"], "Feature": ["timestamp_sub(unit, value, date)"], "Description": ["timestamp_sub", "Subtracts the time interval from the provided date or date with time.", "If the subtraction results in a value outside the bounds of the data type, the result is undefined.", "Syntax", "timestamp_sub(unit, value, date)", "Aliases: timeStampSub, TIMESTAMP_SUB.", "Arguments", "unit \u2014 The type of interval to subtract. String.\nPossible values:secondminutehourdayweekmonthquarteryearvalue \u2014 Value of interval to subtract. Int.date \u2014 Date or date with time. Date, Date32, DateTime or DateTime64.", "Returned value", "Date or date with time obtained by subtracting value, expressed in unit, from date. Date, Date32, DateTime or DateTime64."], "Examples": ["select timestamp_sub(MONTH, 5, toDateTime('2018-12-18 01:02:03'));"], "Category": ["Dates and Times Functions"], "index": 454, "vector_txt": "454:Feature: timestamp_sub(unit, value, date)\nDescription: timestamp_subSubtracts the time interval from the provided date or date with time.If the subtraction results in a value outside the bounds of the data type, the result is undefined.Syntaxtimestamp_sub(unit, value, date)Aliases: timeStampSub, TIMESTAMP_SUB.Argumentsunit \u2014 The type of interval to subtract. String.\nPossible values:secondminutehourdayweekmonthquarteryearvalue \u2014 Value of interval to subtract. Int.date \u2014 Date or date with time. Date, Date32, DateTime or DateTime64.Returned valueDate or date with time obtained by subtracting value, expressed in unit, from date. Date, Date32, DateTime or DateTime64.\nExamples: select timestamp_sub(MONTH, 5, toDateTime('2018-12-18 01:02:03'));\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["addDate"], "Feature": ["addDate(date, interval)"], "Description": ["addDate", "Adds the time interval to the provided date, date with time or String-encoded date / date with time.", "If the addition results in a value outside the bounds of the data type, the result is undefined.", "Syntax", "addDate(date, interval)", "Arguments", "date \u2014 The date or date with time to which interval is added. Date, Date32, DateTime, DateTime64, or Stringinterval \u2014 Interval to add. Interval.", "Returned value", "Date or date with time obtained by adding interval to date. Date, Date32, DateTime or DateTime64."], "Examples": ["SELECT addDate(toDate('2018-01-01'), INTERVAL 3 YEAR);"], "Category": ["Dates and Times Functions"], "index": 455, "vector_txt": "455:Feature: addDate(date, interval)\nDescription: addDateAdds the time interval to the provided date, date with time or String-encoded date / date with time.If the addition results in a value outside the bounds of the data type, the result is undefined.SyntaxaddDate(date, interval)Argumentsdate \u2014 The date or date with time to which interval is added. Date, Date32, DateTime, DateTime64, or Stringinterval \u2014 Interval to add. Interval.Returned valueDate or date with time obtained by adding interval to date. Date, Date32, DateTime or DateTime64.\nExamples: SELECT addDate(toDate('2018-01-01'), INTERVAL 3 YEAR);\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["subDate"], "Feature": ["subDate(date, interval)"], "Description": ["subDate", "Subtracts the time interval from the provided date, date with time or String-encoded date / date with time.", "If the subtraction results in a value outside the bounds of the data type, the result is undefined.", "Syntax", "subDate(date, interval)", "Arguments", "date \u2014 The date or date with time from which interval is subtracted. Date, Date32, DateTime, DateTime64, or Stringinterval \u2014 Interval to subtract. Interval.", "Returned value", "Date or date with time obtained by subtracting interval from date. Date, Date32, DateTime or DateTime64."], "Examples": ["SELECT subDate(toDate('2018-01-01'), INTERVAL 3 YEAR);"], "Category": ["Dates and Times Functions"], "index": 456, "vector_txt": "456:Feature: subDate(date, interval)\nDescription: subDateSubtracts the time interval from the provided date, date with time or String-encoded date / date with time.If the subtraction results in a value outside the bounds of the data type, the result is undefined.SyntaxsubDate(date, interval)Argumentsdate \u2014 The date or date with time from which interval is subtracted. Date, Date32, DateTime, DateTime64, or Stringinterval \u2014 Interval to subtract. Interval.Returned valueDate or date with time obtained by subtracting interval from date. Date, Date32, DateTime or DateTime64.\nExamples: SELECT subDate(toDate('2018-01-01'), INTERVAL 3 YEAR);\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["now"], "Feature": ["now([timezone])"], "Description": ["now", "Returns the current date and time at the moment of query analysis. The function is a constant expression.", "Alias: current_timestamp.", "Syntax", "now([timezone])", "Arguments", "timezone \u2014 Timezone name for the returned value (optional). String.", "Returned value", "Current date and time. DateTime."], "Examples": ["SELECT now();", "SELECT now('Asia/Istanbul');"], "Category": ["Dates and Times Functions"], "index": 457, "vector_txt": "457:Feature: now([timezone])\nDescription: nowReturns the current date and time at the moment of query analysis. The function is a constant expression.Alias: current_timestamp.Syntaxnow([timezone])Argumentstimezone \u2014 Timezone name for the returned value (optional). String.Returned valueCurrent date and time. DateTime.\nExamples: SELECT now();SELECT now('Asia/Istanbul');\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["empty"], "Feature": ["empty([x])"], "Description": ["empty", "Checks whether the input array is empty.", "Syntax", "empty([x])", "An array is considered empty if it does not contain any elements.", "NoteCan be optimized by enabling the optimize_functions_to_subcolumns setting. With optimize_functions_to_subcolumns = 1 the function reads only size0 subcolumn instead of reading and processing the whole array column. The query SELECT empty(arr) FROM TABLE; transforms to SELECT arr.size0 = 0 FROM TABLE;.", "The function also works for strings or UUID.", "Arguments", "[x] \u2014 Input array. Array.", "Returned value", "Returns 1 for an empty array or 0 for a non-empty array. UInt8."], "Examples": ["SELECT empty([]);"], "Category": ["Arrays Functions"], "index": 458, "vector_txt": "458:Feature: empty([x])\nDescription: emptyChecks whether the input array is empty.Syntaxempty([x])An array is considered empty if it does not contain any elements.NoteCan be optimized by enabling the optimize_functions_to_subcolumns setting. With optimize_functions_to_subcolumns = 1 the function reads only size0 subcolumn instead of reading and processing the whole array column. The query SELECT empty(arr) FROM TABLE; transforms to SELECT arr.size0 = 0 FROM TABLE;.The function also works for strings or UUID.Arguments[x] \u2014 Input array. Array.Returned valueReturns 1 for an empty array or 0 for a non-empty array. UInt8.\nExamples: SELECT empty([]);\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["now64"], "Feature": ["now64([scale], [timezone])"], "Description": ["now64", "Returns the current date and time with sub-second precision at the moment of query analysis. The function is a constant expression.", "Syntax", "now64([scale], [timezone])", "Arguments", "scale - Tick size (precision): 10-precision seconds. Valid range: [ 0 : 9 ]. Typically, are used - 3 (default) (milliseconds), 6 (microseconds), 9 (nanoseconds).timezone \u2014 Timezone name for the returned value (optional). String.", "Returned value", "Current date and time with sub-second precision. DateTime64."], "Examples": ["SELECT now64(), now64(9, 'Asia/Istanbul');"], "Category": ["Dates and Times Functions"], "index": 459, "vector_txt": "459:Feature: now64([scale], [timezone])\nDescription: now64Returns the current date and time with sub-second precision at the moment of query analysis. The function is a constant expression.Syntaxnow64([scale], [timezone])Argumentsscale - Tick size (precision): 10-precision seconds. Valid range: [ 0 : 9 ]. Typically, are used - 3 (default) (milliseconds), 6 (microseconds), 9 (nanoseconds).timezone \u2014 Timezone name for the returned value (optional). String.Returned valueCurrent date and time with sub-second precision. DateTime64.\nExamples: SELECT now64(), now64(9, 'Asia/Istanbul');\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["nowInBlock"], "Feature": ["nowInBlock([timezone])"], "Description": ["nowInBlock", "Returns the current date and time at the moment of processing of each block of data. In contrast to the function now, it is not a constant expression, and the returned value will be different in different blocks for long-running queries.", "It makes sense to use this function to generate the current time in long-running INSERT SELECT queries.", "Syntax", "nowInBlock([timezone])", "Arguments", "timezone \u2014 Timezone name for the returned value (optional). String.", "Returned value", "Current date and time at the moment of processing of each block of data. DateTime."], "Examples": ["SELECT    now(),    nowInBlock(),    sleep(1)FROM numbers(3)SETTINGS max_block_size = 1FORMAT PrettyCompactMonoBlock"], "Category": ["Dates and Times Functions"], "index": 460, "vector_txt": "460:Feature: nowInBlock([timezone])\nDescription: nowInBlockReturns the current date and time at the moment of processing of each block of data. In contrast to the function now, it is not a constant expression, and the returned value will be different in different blocks for long-running queries.It makes sense to use this function to generate the current time in long-running INSERT SELECT queries.SyntaxnowInBlock([timezone])Argumentstimezone \u2014 Timezone name for the returned value (optional). String.Returned valueCurrent date and time at the moment of processing of each block of data. DateTime.\nExamples: SELECT    now(),    nowInBlock(),    sleep(1)FROM numbers(3)SETTINGS max_block_size = 1FORMAT PrettyCompactMonoBlock\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["today"], "Feature": ["today()"], "Description": ["today", "Returns the current date at moment of query analysis. It is the same as \u2018toDate(now())\u2019 and has aliases: curdate, current_date.", "Syntax", "today()", "Arguments", "None", "Returned value", "Current date. DateTime."], "Examples": ["SELECT today() AS today, curdate() AS curdate, current_date() AS current_date FORMAT Pretty"], "Category": ["Dates and Times Functions"], "index": 461, "vector_txt": "461:Feature: today()\nDescription: todayReturns the current date at moment of query analysis. It is the same as \u2018toDate(now())\u2019 and has aliases: curdate, current_date.Syntaxtoday()ArgumentsNoneReturned valueCurrent date. DateTime.\nExamples: SELECT today() AS today, curdate() AS curdate, current_date() AS current_date FORMAT Pretty\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["yesterday"], "Feature": ["yesterday"], "Description": ["yesterday", "Accepts zero arguments and returns yesterday\u2019s date at one of the moments of query analysis.\nThe same as \u2018today() - 1\u2019."], "Examples": [], "Category": ["Dates and Times Functions"], "index": 462, "vector_txt": "462:Feature: yesterday\nDescription: yesterdayAccepts zero arguments and returns yesterday\u2019s date at one of the moments of query analysis.\nThe same as \u2018today() - 1\u2019.\nExamples: \nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["timeSlot"], "Feature": ["timeSlot"], "Description": ["timeSlot", "Rounds the time to the half hour."], "Examples": [], "Category": ["Dates and Times Functions"], "index": 463, "vector_txt": "463:Feature: timeSlot\nDescription: timeSlotRounds the time to the half hour.\nExamples: \nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toYYYYMM"], "Feature": ["toYYYYMM"], "Description": ["toYYYYMM", "Converts a date or date with time to a UInt32 number containing the year and month number (YYYY * 100 + MM). Accepts a second optional timezone argument. If provided, the timezone must be a string constant.", "This function is the opposite of function YYYYMMDDToDate()."], "Examples": ["SELECT    toYYYYMM(now(), 'US/Eastern')"], "Category": ["Dates and Times Functions"], "index": 464, "vector_txt": "464:Feature: toYYYYMM\nDescription: toYYYYMMConverts a date or date with time to a UInt32 number containing the year and month number (YYYY * 100 + MM). Accepts a second optional timezone argument. If provided, the timezone must be a string constant.This function is the opposite of function YYYYMMDDToDate().\nExamples: SELECT    toYYYYMM(now(), 'US/Eastern')\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toYYYYMMDD"], "Feature": ["toYYYYMMDD"], "Description": ["toYYYYMMDD", "Converts a date or date with time to a UInt32 number containing the year and month number (YYYY * 10000 + MM * 100 + DD). Accepts a second optional timezone argument. If provided, the timezone must be a string constant."], "Examples": ["SELECT toYYYYMMDD(now(), 'US/Eastern')"], "Category": ["Dates and Times Functions"], "index": 465, "vector_txt": "465:Feature: toYYYYMMDD\nDescription: toYYYYMMDDConverts a date or date with time to a UInt32 number containing the year and month number (YYYY * 10000 + MM * 100 + DD). Accepts a second optional timezone argument. If provided, the timezone must be a string constant.\nExamples: SELECT toYYYYMMDD(now(), 'US/Eastern')\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toYYYYMMDDhhmmss"], "Feature": ["toYYYYMMDDhhmmss"], "Description": ["toYYYYMMDDhhmmss", "Converts a date or date with time to a UInt64 number containing the year and month number (YYYY * 10000000000 + MM * 100000000 + DD * 1000000 + hh * 10000 + mm * 100 + ss). Accepts a second optional timezone argument. If provided, the timezone must be a string constant."], "Examples": ["SELECT toYYYYMMDDhhmmss(now(), 'US/Eastern')"], "Category": ["Dates and Times Functions"], "index": 466, "vector_txt": "466:Feature: toYYYYMMDDhhmmss\nDescription: toYYYYMMDDhhmmssConverts a date or date with time to a UInt64 number containing the year and month number (YYYY * 10000000000 + MM * 100000000 + DD * 1000000 + hh * 10000 + mm * 100 + ss). Accepts a second optional timezone argument. If provided, the timezone must be a string constant.\nExamples: SELECT toYYYYMMDDhhmmss(now(), 'US/Eastern')\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["YYYYMMDDToDate"], "Feature": ["YYYYMMDDToDate(yyyymmdd);"], "Description": ["YYYYMMDDToDate", "Converts a number containing the year, month and day number to a Date.", "This function is the opposite of function toYYYYMMDD().", "The output is undefined if the input does not encode a valid Date value.", "Syntax", "YYYYMMDDToDate(yyyymmdd);", "Arguments", "yyyymmdd - A number representing the year, month and day. Integer, Float or Decimal.", "Returned value", "a date created from the arguments. Date."], "Examples": ["SELECT YYYYMMDDToDate(20230911);"], "Category": ["Dates and Times Functions"], "index": 467, "vector_txt": "467:Feature: YYYYMMDDToDate(yyyymmdd);\nDescription: YYYYMMDDToDateConverts a number containing the year, month and day number to a Date.This function is the opposite of function toYYYYMMDD().The output is undefined if the input does not encode a valid Date value.SyntaxYYYYMMDDToDate(yyyymmdd);Argumentsyyyymmdd - A number representing the year, month and day. Integer, Float or Decimal.Returned valuea date created from the arguments. Date.\nExamples: SELECT YYYYMMDDToDate(20230911);\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["YYYYMMDDToDate32"], "Feature": ["YYYYMMDDToDate32"], "Description": ["YYYYMMDDToDate32", "Like function YYYYMMDDToDate() but produces a Date32."], "Examples": [], "Category": ["Dates and Times Functions"], "index": 468, "vector_txt": "468:Feature: YYYYMMDDToDate32\nDescription: YYYYMMDDToDate32Like function YYYYMMDDToDate() but produces a Date32.\nExamples: \nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["notEmpty"], "Feature": ["notEmpty([x])"], "Description": ["notEmpty", "Checks whether the input array is non-empty.", "Syntax", "notEmpty([x])", "An array is considered non-empty if it contains at least one element.", "NoteCan be optimized by enabling the optimize_functions_to_subcolumns setting. With optimize_functions_to_subcolumns = 1 the function reads only size0 subcolumn instead of reading and processing the whole array column. The query SELECT notEmpty(arr) FROM table transforms to SELECT arr.size0 != 0 FROM TABLE.", "The function also works for strings or UUID.", "Arguments", "[x] \u2014 Input array. Array.", "Returned value", "Returns 1 for a non-empty array or 0 for an empty array. UInt8."], "Examples": ["SELECT notEmpty([1,2]);"], "Category": ["Arrays Functions"], "index": 469, "vector_txt": "469:Feature: notEmpty([x])\nDescription: notEmptyChecks whether the input array is non-empty.SyntaxnotEmpty([x])An array is considered non-empty if it contains at least one element.NoteCan be optimized by enabling the optimize_functions_to_subcolumns setting. With optimize_functions_to_subcolumns = 1 the function reads only size0 subcolumn instead of reading and processing the whole array column. The query SELECT notEmpty(arr) FROM table transforms to SELECT arr.size0 != 0 FROM TABLE.The function also works for strings or UUID.Arguments[x] \u2014 Input array. Array.Returned valueReturns 1 for a non-empty array or 0 for an empty array. UInt8.\nExamples: SELECT notEmpty([1,2]);\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["YYYYMMDDhhmmssToDateTime"], "Feature": ["YYYYMMDDhhmmssToDateTime(yyyymmddhhmmss[, timezone]);"], "Description": ["YYYYMMDDhhmmssToDateTime", "Converts a number containing the year, month, day, hours, minute and second number to a DateTime.", "The output is undefined if the input does not encode a valid DateTime value.", "This function is the opposite of function toYYYYMMDDhhmmss().", "Syntax", "YYYYMMDDhhmmssToDateTime(yyyymmddhhmmss[, timezone]);", "Arguments", "yyyymmddhhmmss - A number representing the year, month and day. Integer, Float or Decimal.timezone - Timezone for the returned value (optional).", "Returned value", "a date with time created from the arguments. DateTime."], "Examples": ["SELECT YYYYMMDDToDateTime(20230911131415);"], "Category": ["Dates and Times Functions"], "index": 470, "vector_txt": "470:Feature: YYYYMMDDhhmmssToDateTime(yyyymmddhhmmss[, timezone]);\nDescription: YYYYMMDDhhmmssToDateTimeConverts a number containing the year, month, day, hours, minute and second number to a DateTime.The output is undefined if the input does not encode a valid DateTime value.This function is the opposite of function toYYYYMMDDhhmmss().SyntaxYYYYMMDDhhmmssToDateTime(yyyymmddhhmmss[, timezone]);Argumentsyyyymmddhhmmss - A number representing the year, month and day. Integer, Float or Decimal.timezone - Timezone for the returned value (optional).Returned valuea date with time created from the arguments. DateTime.\nExamples: SELECT YYYYMMDDToDateTime(20230911131415);\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["YYYYMMDDhhmmssToDateTime64"], "Feature": ["YYYYMMDDhhmmssToDateTime64"], "Description": ["YYYYMMDDhhmmssToDateTime64", "Like function YYYYMMDDhhmmssToDate() but produces a DateTime64.", "Accepts an additional, optional precision parameter after the timezone parameter."], "Examples": [], "Category": ["Dates and Times Functions"], "index": 471, "vector_txt": "471:Feature: YYYYMMDDhhmmssToDateTime64\nDescription: YYYYMMDDhhmmssToDateTime64Like function YYYYMMDDhhmmssToDate() but produces a DateTime64.Accepts an additional, optional precision parameter after the timezone parameter.\nExamples: \nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["changeYear"], "Feature": ["changeYear(date_or_datetime, value)"], "Description": ["changeYear", "Changes the year component of a date or date time.", "Syntax", "changeYear(date_or_datetime, value)", "Arguments", "date_or_datetime - a Date, Date32, DateTime or DateTime64value - a new value of the year. Integer.", "Returned value", "The same type as date_or_datetime."], "Examples": ["SELECT changeYear(toDate('1999-01-01'), 2000), changeYear(toDateTime64('1999-01-01 00:00:00.000', 3), 2000);"], "Category": ["Dates and Times Functions"], "index": 472, "vector_txt": "472:Feature: changeYear(date_or_datetime, value)\nDescription: changeYearChanges the year component of a date or date time.SyntaxchangeYear(date_or_datetime, value)Argumentsdate_or_datetime - a Date, Date32, DateTime or DateTime64value - a new value of the year. Integer.Returned valueThe same type as date_or_datetime.\nExamples: SELECT changeYear(toDate('1999-01-01'), 2000), changeYear(toDateTime64('1999-01-01 00:00:00.000', 3), 2000);\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["changeMonth"], "Feature": ["changeMonth(date_or_datetime, value)"], "Description": ["changeMonth", "Changes the month component of a date or date time.", "Syntax", "changeMonth(date_or_datetime, value)", "Arguments", "date_or_datetime - a Date, Date32, DateTime or DateTime64value - a new value of the month. Integer.", "Returned value", "Returns a value of same type as date_or_datetime."], "Examples": ["SELECT changeMonth(toDate('1999-01-01'), 2), changeMonth(toDateTime64('1999-01-01 00:00:00.000', 3), 2);"], "Category": ["Dates and Times Functions"], "index": 473, "vector_txt": "473:Feature: changeMonth(date_or_datetime, value)\nDescription: changeMonthChanges the month component of a date or date time.SyntaxchangeMonth(date_or_datetime, value)Argumentsdate_or_datetime - a Date, Date32, DateTime or DateTime64value - a new value of the month. Integer.Returned valueReturns a value of same type as date_or_datetime.\nExamples: SELECT changeMonth(toDate('1999-01-01'), 2), changeMonth(toDateTime64('1999-01-01 00:00:00.000', 3), 2);\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["changeDay"], "Feature": ["changeDay(date_or_datetime, value)"], "Description": ["changeDay", "Changes the day component of a date or date time.", "Syntax", "changeDay(date_or_datetime, value)", "Arguments", "date_or_datetime - a Date, Date32, DateTime or DateTime64value - a new value of the day. Integer.", "Returned value", "Returns a value of same type as date_or_datetime."], "Examples": ["SELECT changeDay(toDate('1999-01-01'), 5), changeDay(toDateTime64('1999-01-01 00:00:00.000', 3), 5);"], "Category": ["Dates and Times Functions"], "index": 474, "vector_txt": "474:Feature: changeDay(date_or_datetime, value)\nDescription: changeDayChanges the day component of a date or date time.SyntaxchangeDay(date_or_datetime, value)Argumentsdate_or_datetime - a Date, Date32, DateTime or DateTime64value - a new value of the day. Integer.Returned valueReturns a value of same type as date_or_datetime.\nExamples: SELECT changeDay(toDate('1999-01-01'), 5), changeDay(toDateTime64('1999-01-01 00:00:00.000', 3), 5);\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["changeHour"], "Feature": ["changeHour(date_or_datetime, value)"], "Description": ["changeHour", "Changes the hour component of a date or date time.", "Syntax", "changeHour(date_or_datetime, value)", "Arguments", "date_or_datetime - a Date, Date32, DateTime or DateTime64value - a new value of the hour. Integer.", "Returned value", "Returns a value of same type as date_or_datetime. If the input is a Date, return DateTime. If the input is a Date32, return DateTime64."], "Examples": ["SELECT changeHour(toDate('1999-01-01'), 14), changeHour(toDateTime64('1999-01-01 00:00:00.000', 3), 14);"], "Category": ["Dates and Times Functions"], "index": 475, "vector_txt": "475:Feature: changeHour(date_or_datetime, value)\nDescription: changeHourChanges the hour component of a date or date time.SyntaxchangeHour(date_or_datetime, value)Argumentsdate_or_datetime - a Date, Date32, DateTime or DateTime64value - a new value of the hour. Integer.Returned valueReturns a value of same type as date_or_datetime. If the input is a Date, return DateTime. If the input is a Date32, return DateTime64.\nExamples: SELECT changeHour(toDate('1999-01-01'), 14), changeHour(toDateTime64('1999-01-01 00:00:00.000', 3), 14);\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["changeMinute"], "Feature": ["changeMinute(date_or_datetime, value)"], "Description": ["changeMinute", "Changes the minute component of a date or date time.", "Syntax", "changeMinute(date_or_datetime, value)", "Arguments", "date_or_datetime - a Date, Date32, DateTime or DateTime64value - a new value of the minute. Integer.", "Returned value", "Returns a value of same type as date_or_datetime. If the input is a Date, return DateTime. If the input is a Date32, return DateTime64."], "Examples": ["    SELECT changeMinute(toDate('1999-01-01'), 15), changeMinute(toDateTime64('1999-01-01 00:00:00.000', 3), 15);"], "Category": ["Dates and Times Functions"], "index": 476, "vector_txt": "476:Feature: changeMinute(date_or_datetime, value)\nDescription: changeMinuteChanges the minute component of a date or date time.SyntaxchangeMinute(date_or_datetime, value)Argumentsdate_or_datetime - a Date, Date32, DateTime or DateTime64value - a new value of the minute. Integer.Returned valueReturns a value of same type as date_or_datetime. If the input is a Date, return DateTime. If the input is a Date32, return DateTime64.\nExamples:     SELECT changeMinute(toDate('1999-01-01'), 15), changeMinute(toDateTime64('1999-01-01 00:00:00.000', 3), 15);\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["changeSecond"], "Feature": ["changeSecond(date_or_datetime, value)"], "Description": ["changeSecond", "Changes the second component of a date or date time.", "Syntax", "changeSecond(date_or_datetime, value)", "Arguments", "date_or_datetime - a Date, Date32, DateTime or DateTime64value - a new value of the second. Integer.", "Returned value", "Returns a value of same type as date_or_datetime. If the input is a Date, return DateTime. If the input is a Date32, return DateTime64."], "Examples": ["SELECT changeSecond(toDate('1999-01-01'), 15), changeSecond(toDateTime64('1999-01-01 00:00:00.000', 3), 15);"], "Category": ["Dates and Times Functions"], "index": 477, "vector_txt": "477:Feature: changeSecond(date_or_datetime, value)\nDescription: changeSecondChanges the second component of a date or date time.SyntaxchangeSecond(date_or_datetime, value)Argumentsdate_or_datetime - a Date, Date32, DateTime or DateTime64value - a new value of the second. Integer.Returned valueReturns a value of same type as date_or_datetime. If the input is a Date, return DateTime. If the input is a Date32, return DateTime64.\nExamples: SELECT changeSecond(toDate('1999-01-01'), 15), changeSecond(toDateTime64('1999-01-01 00:00:00.000', 3), 15);\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["addYears"], "Feature": ["addYears(date, num)"], "Description": ["addYears", "Adds a specified number of years to a date, a date with time or a string-encoded date / date with time.", "Syntax", "addYears(date, num)", "Parameters", "date: Date / date with time to add specified number of years to. Date/Date32/DateTime/DateTime64, String.num: Number of years to add. (U)Int*, Float*.", "Returned value", "Returns date plus num years. Date/Date32/DateTime/DateTime64."], "Examples": ["WITH    toDate('2024-01-01') AS date,    toDateTime('2024-01-01 00:00:00') AS date_time,    '2024-01-01 00:00:00' AS date_time_stringSELECT    addYears(date, 1) AS add_years_with_date,    addYears(date_time, 1) AS add_years_with_date_time,    addYears(date_time_string, 1) AS add_years_with_date_time_string"], "Category": ["Dates and Times Functions"], "index": 478, "vector_txt": "478:Feature: addYears(date, num)\nDescription: addYearsAdds a specified number of years to a date, a date with time or a string-encoded date / date with time.SyntaxaddYears(date, num)Parametersdate: Date / date with time to add specified number of years to. Date/Date32/DateTime/DateTime64, String.num: Number of years to add. (U)Int*, Float*.Returned valueReturns date plus num years. Date/Date32/DateTime/DateTime64.\nExamples: WITH    toDate('2024-01-01') AS date,    toDateTime('2024-01-01 00:00:00') AS date_time,    '2024-01-01 00:00:00' AS date_time_stringSELECT    addYears(date, 1) AS add_years_with_date,    addYears(date_time, 1) AS add_years_with_date_time,    addYears(date_time_string, 1) AS add_years_with_date_time_string\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["addQuarters"], "Feature": ["addQuarters(date, num)"], "Description": ["addQuarters", "Adds a specified number of quarters to a date, a date with time or a string-encoded date / date with time.", "Syntax", "addQuarters(date, num)", "Parameters", "date: Date / date with time to add specified number of quarters to. Date/Date32/DateTime/DateTime64, String.num: Number of quarters to add. (U)Int*, Float*.", "Returned value", "Returns date plus num quarters. Date/Date32/DateTime/DateTime64."], "Examples": ["WITH    toDate('2024-01-01') AS date,    toDateTime('2024-01-01 00:00:00') AS date_time,    '2024-01-01 00:00:00' AS date_time_stringSELECT    addQuarters(date, 1) AS add_quarters_with_date,    addQuarters(date_time, 1) AS add_quarters_with_date_time,    addQuarters(date_time_string, 1) AS add_quarters_with_date_time_string"], "Category": ["Dates and Times Functions"], "index": 479, "vector_txt": "479:Feature: addQuarters(date, num)\nDescription: addQuartersAdds a specified number of quarters to a date, a date with time or a string-encoded date / date with time.SyntaxaddQuarters(date, num)Parametersdate: Date / date with time to add specified number of quarters to. Date/Date32/DateTime/DateTime64, String.num: Number of quarters to add. (U)Int*, Float*.Returned valueReturns date plus num quarters. Date/Date32/DateTime/DateTime64.\nExamples: WITH    toDate('2024-01-01') AS date,    toDateTime('2024-01-01 00:00:00') AS date_time,    '2024-01-01 00:00:00' AS date_time_stringSELECT    addQuarters(date, 1) AS add_quarters_with_date,    addQuarters(date_time, 1) AS add_quarters_with_date_time,    addQuarters(date_time_string, 1) AS add_quarters_with_date_time_string\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["length"], "Feature": ["length"], "Description": ["length", "Returns the number of items in the array.\nThe result type is UInt64.\nThe function also works for strings.", "Can be optimized by enabling the optimize_functions_to_subcolumns setting. With optimize_functions_to_subcolumns = 1 the function reads only size0 subcolumn instead of reading and processing the whole array column. The query SELECT length(arr) FROM table transforms to SELECT arr.size0 FROM TABLE.", "Alias: OCTET_LENGTH"], "Examples": [], "Category": ["Arrays Functions"], "index": 480, "vector_txt": "480:Feature: length\nDescription: lengthReturns the number of items in the array.\nThe result type is UInt64.\nThe function also works for strings.Can be optimized by enabling the optimize_functions_to_subcolumns setting. With optimize_functions_to_subcolumns = 1 the function reads only size0 subcolumn instead of reading and processing the whole array column. The query SELECT length(arr) FROM table transforms to SELECT arr.size0 FROM TABLE.Alias: OCTET_LENGTH\nExamples: \nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["addMonths"], "Feature": ["addMonths(date, num)"], "Description": ["addMonths", "Adds a specified number of months to a date, a date with time or a string-encoded date / date with time.", "Syntax", "addMonths(date, num)", "Parameters", "date: Date / date with time to add specified number of months to. Date/Date32/DateTime/DateTime64, String.num: Number of months to add. (U)Int*, Float*.", "Returned value", "Returns date plus num months. Date/Date32/DateTime/DateTime64."], "Examples": ["WITH    toDate('2024-01-01') AS date,    toDateTime('2024-01-01 00:00:00') AS date_time,    '2024-01-01 00:00:00' AS date_time_stringSELECT    addMonths(date, 6) AS add_months_with_date,    addMonths(date_time, 6) AS add_months_with_date_time,    addMonths(date_time_string, 6) AS add_months_with_date_time_string"], "Category": ["Dates and Times Functions"], "index": 481, "vector_txt": "481:Feature: addMonths(date, num)\nDescription: addMonthsAdds a specified number of months to a date, a date with time or a string-encoded date / date with time.SyntaxaddMonths(date, num)Parametersdate: Date / date with time to add specified number of months to. Date/Date32/DateTime/DateTime64, String.num: Number of months to add. (U)Int*, Float*.Returned valueReturns date plus num months. Date/Date32/DateTime/DateTime64.\nExamples: WITH    toDate('2024-01-01') AS date,    toDateTime('2024-01-01 00:00:00') AS date_time,    '2024-01-01 00:00:00' AS date_time_stringSELECT    addMonths(date, 6) AS add_months_with_date,    addMonths(date_time, 6) AS add_months_with_date_time,    addMonths(date_time_string, 6) AS add_months_with_date_time_string\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["addWeeks"], "Feature": ["addWeeks(date, num)"], "Description": ["addWeeks", "Adds a specified number of weeks to a date, a date with time or a string-encoded date / date with time.", "Syntax", "addWeeks(date, num)", "Parameters", "date: Date / date with time to add specified number of weeks to. Date/Date32/DateTime/DateTime64, String.num: Number of weeks to add. (U)Int*, Float*.", "Returned value", "Returns date plus num weeks. Date/Date32/DateTime/DateTime64."], "Examples": ["WITH    toDate('2024-01-01') AS date,    toDateTime('2024-01-01 00:00:00') AS date_time,    '2024-01-01 00:00:00' AS date_time_stringSELECT    addWeeks(date, 5) AS add_weeks_with_date,    addWeeks(date_time, 5) AS add_weeks_with_date_time,    addWeeks(date_time_string, 5) AS add_weeks_with_date_time_string"], "Category": ["Dates and Times Functions"], "index": 482, "vector_txt": "482:Feature: addWeeks(date, num)\nDescription: addWeeksAdds a specified number of weeks to a date, a date with time or a string-encoded date / date with time.SyntaxaddWeeks(date, num)Parametersdate: Date / date with time to add specified number of weeks to. Date/Date32/DateTime/DateTime64, String.num: Number of weeks to add. (U)Int*, Float*.Returned valueReturns date plus num weeks. Date/Date32/DateTime/DateTime64.\nExamples: WITH    toDate('2024-01-01') AS date,    toDateTime('2024-01-01 00:00:00') AS date_time,    '2024-01-01 00:00:00' AS date_time_stringSELECT    addWeeks(date, 5) AS add_weeks_with_date,    addWeeks(date_time, 5) AS add_weeks_with_date_time,    addWeeks(date_time_string, 5) AS add_weeks_with_date_time_string\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["addDays"], "Feature": ["addDays(date, num)"], "Description": ["addDays", "Adds a specified number of days to a date, a date with time or a string-encoded date / date with time.", "Syntax", "addDays(date, num)", "Parameters", "date: Date / date with time to add specified number of days to. Date/Date32/DateTime/DateTime64, String.num: Number of days to add. (U)Int*, Float*.", "Returned value", "Returns date plus num days. Date/Date32/DateTime/DateTime64."], "Examples": ["WITH    toDate('2024-01-01') AS date,    toDateTime('2024-01-01 00:00:00') AS date_time,    '2024-01-01 00:00:00' AS date_time_stringSELECT    addDays(date, 5) AS add_days_with_date,    addDays(date_time, 5) AS add_days_with_date_time,    addDays(date_time_string, 5) AS add_days_with_date_time_string"], "Category": ["Dates and Times Functions"], "index": 483, "vector_txt": "483:Feature: addDays(date, num)\nDescription: addDaysAdds a specified number of days to a date, a date with time or a string-encoded date / date with time.SyntaxaddDays(date, num)Parametersdate: Date / date with time to add specified number of days to. Date/Date32/DateTime/DateTime64, String.num: Number of days to add. (U)Int*, Float*.Returned valueReturns date plus num days. Date/Date32/DateTime/DateTime64.\nExamples: WITH    toDate('2024-01-01') AS date,    toDateTime('2024-01-01 00:00:00') AS date_time,    '2024-01-01 00:00:00' AS date_time_stringSELECT    addDays(date, 5) AS add_days_with_date,    addDays(date_time, 5) AS add_days_with_date_time,    addDays(date_time_string, 5) AS add_days_with_date_time_string\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["addHours"], "Feature": ["addHours(date, num)"], "Description": ["addHours", "Adds a specified number of days to a date, a date with time or a string-encoded date / date with time.", "Syntax", "addHours(date, num)", "Parameters", "date: Date / date with time to add specified number of hours to. Date/Date32/DateTime/DateTime64, String.num: Number of hours to add. (U)Int*, Float*.", "Returned value\no", "Returns date plus num hours. Date/Date32/DateTime/DateTime64."], "Examples": ["WITH    toDate('2024-01-01') AS date,    toDateTime('2024-01-01 00:00:00') AS date_time,    '2024-01-01 00:00:00' AS date_time_stringSELECT    addHours(date, 12) AS add_hours_with_date,    addHours(date_time, 12) AS add_hours_with_date_time,    addHours(date_time_string, 12) AS add_hours_with_date_time_string"], "Category": ["Dates and Times Functions"], "index": 484, "vector_txt": "484:Feature: addHours(date, num)\nDescription: addHoursAdds a specified number of days to a date, a date with time or a string-encoded date / date with time.SyntaxaddHours(date, num)Parametersdate: Date / date with time to add specified number of hours to. Date/Date32/DateTime/DateTime64, String.num: Number of hours to add. (U)Int*, Float*.Returned value\noReturns date plus num hours. Date/Date32/DateTime/DateTime64.\nExamples: WITH    toDate('2024-01-01') AS date,    toDateTime('2024-01-01 00:00:00') AS date_time,    '2024-01-01 00:00:00' AS date_time_stringSELECT    addHours(date, 12) AS add_hours_with_date,    addHours(date_time, 12) AS add_hours_with_date_time,    addHours(date_time_string, 12) AS add_hours_with_date_time_string\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["addMinutes"], "Feature": ["addMinutes(date, num)"], "Description": ["addMinutes", "Adds a specified number of minutes to a date, a date with time or a string-encoded date / date with time.", "Syntax", "addMinutes(date, num)", "Parameters", "date: Date / date with time to add specified number of minutes to. Date/Date32/DateTime/DateTime64, String.num: Number of minutes to add. (U)Int*, Float*.", "Returned value", "Returns date plus num minutes. Date/Date32/DateTime/DateTime64."], "Examples": ["WITH    toDate('2024-01-01') AS date,    toDateTime('2024-01-01 00:00:00') AS date_time,    '2024-01-01 00:00:00' AS date_time_stringSELECT    addMinutes(date, 20) AS add_minutes_with_date,    addMinutes(date_time, 20) AS add_minutes_with_date_time,    addMinutes(date_time_string, 20) AS add_minutes_with_date_time_string"], "Category": ["Dates and Times Functions"], "index": 485, "vector_txt": "485:Feature: addMinutes(date, num)\nDescription: addMinutesAdds a specified number of minutes to a date, a date with time or a string-encoded date / date with time.SyntaxaddMinutes(date, num)Parametersdate: Date / date with time to add specified number of minutes to. Date/Date32/DateTime/DateTime64, String.num: Number of minutes to add. (U)Int*, Float*.Returned valueReturns date plus num minutes. Date/Date32/DateTime/DateTime64.\nExamples: WITH    toDate('2024-01-01') AS date,    toDateTime('2024-01-01 00:00:00') AS date_time,    '2024-01-01 00:00:00' AS date_time_stringSELECT    addMinutes(date, 20) AS add_minutes_with_date,    addMinutes(date_time, 20) AS add_minutes_with_date_time,    addMinutes(date_time_string, 20) AS add_minutes_with_date_time_string\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["addSeconds"], "Feature": ["addSeconds(date, num)"], "Description": ["addSeconds", "Adds a specified number of seconds to a date, a date with time or a string-encoded date / date with time.", "Syntax", "addSeconds(date, num)", "Parameters", "date: Date / date with time to add specified number of seconds to. Date/Date32/DateTime/DateTime64, String.num: Number of seconds to add. (U)Int*, Float*.", "Returned value", "Returns date plus num seconds. Date/Date32/DateTime/DateTime64."], "Examples": ["WITH    toDate('2024-01-01') AS date,    toDateTime('2024-01-01 00:00:00') AS date_time,    '2024-01-01 00:00:00' AS date_time_stringSELECT    addSeconds(date, 30) AS add_seconds_with_date,    addSeconds(date_time, 30) AS add_seconds_with_date_time,    addSeconds(date_time_string, 30) AS add_seconds_with_date_time_string"], "Category": ["Dates and Times Functions"], "index": 486, "vector_txt": "486:Feature: addSeconds(date, num)\nDescription: addSecondsAdds a specified number of seconds to a date, a date with time or a string-encoded date / date with time.SyntaxaddSeconds(date, num)Parametersdate: Date / date with time to add specified number of seconds to. Date/Date32/DateTime/DateTime64, String.num: Number of seconds to add. (U)Int*, Float*.Returned valueReturns date plus num seconds. Date/Date32/DateTime/DateTime64.\nExamples: WITH    toDate('2024-01-01') AS date,    toDateTime('2024-01-01 00:00:00') AS date_time,    '2024-01-01 00:00:00' AS date_time_stringSELECT    addSeconds(date, 30) AS add_seconds_with_date,    addSeconds(date_time, 30) AS add_seconds_with_date_time,    addSeconds(date_time_string, 30) AS add_seconds_with_date_time_string\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["addMilliseconds"], "Feature": ["addMilliseconds(date_time, num)"], "Description": ["addMilliseconds", "Adds a specified number of milliseconds to a date with time or a string-encoded date with time.", "Syntax", "addMilliseconds(date_time, num)", "Parameters", "date_time: Date with time to add specified number of milliseconds to. DateTime/DateTime64, String.num: Number of milliseconds to add. (U)Int*, Float*.", "Returned value", "Returns date_time plus num milliseconds. DateTime64."], "Examples": ["WITH    toDateTime('2024-01-01 00:00:00') AS date_time,    '2024-01-01 00:00:00' AS date_time_stringSELECT    addMilliseconds(date_time, 1000) AS add_milliseconds_with_date_time,    addMilliseconds(date_time_string, 1000) AS add_milliseconds_with_date_time_string"], "Category": ["Dates and Times Functions"], "index": 487, "vector_txt": "487:Feature: addMilliseconds(date_time, num)\nDescription: addMillisecondsAdds a specified number of milliseconds to a date with time or a string-encoded date with time.SyntaxaddMilliseconds(date_time, num)Parametersdate_time: Date with time to add specified number of milliseconds to. DateTime/DateTime64, String.num: Number of milliseconds to add. (U)Int*, Float*.Returned valueReturns date_time plus num milliseconds. DateTime64.\nExamples: WITH    toDateTime('2024-01-01 00:00:00') AS date_time,    '2024-01-01 00:00:00' AS date_time_stringSELECT    addMilliseconds(date_time, 1000) AS add_milliseconds_with_date_time,    addMilliseconds(date_time_string, 1000) AS add_milliseconds_with_date_time_string\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["addMicroseconds"], "Feature": ["addMicroseconds(date_time, num)"], "Description": ["addMicroseconds", "Adds a specified number of microseconds to a date with time or a string-encoded date with time.", "Syntax", "addMicroseconds(date_time, num)", "Parameters", "date_time: Date with time to add specified number of microseconds to. DateTime/DateTime64, String.num: Number of microseconds to add. (U)Int*, Float*.", "Returned value", "Returns date_time plus num microseconds. DateTime64."], "Examples": ["WITH    toDateTime('2024-01-01 00:00:00') AS date_time,    '2024-01-01 00:00:00' AS date_time_stringSELECT    addMicroseconds(date_time, 1000000) AS add_microseconds_with_date_time,    addMicroseconds(date_time_string, 1000000) AS add_microseconds_with_date_time_string"], "Category": ["Dates and Times Functions"], "index": 488, "vector_txt": "488:Feature: addMicroseconds(date_time, num)\nDescription: addMicrosecondsAdds a specified number of microseconds to a date with time or a string-encoded date with time.SyntaxaddMicroseconds(date_time, num)Parametersdate_time: Date with time to add specified number of microseconds to. DateTime/DateTime64, String.num: Number of microseconds to add. (U)Int*, Float*.Returned valueReturns date_time plus num microseconds. DateTime64.\nExamples: WITH    toDateTime('2024-01-01 00:00:00') AS date_time,    '2024-01-01 00:00:00' AS date_time_stringSELECT    addMicroseconds(date_time, 1000000) AS add_microseconds_with_date_time,    addMicroseconds(date_time_string, 1000000) AS add_microseconds_with_date_time_string\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["addNanoseconds"], "Feature": ["addNanoseconds(date_time, num)"], "Description": ["addNanoseconds", "Adds a specified number of microseconds to a date with time or a string-encoded date with time.", "Syntax", "addNanoseconds(date_time, num)", "Parameters", "date_time: Date with time to add specified number of nanoseconds to. DateTime/DateTime64, String.num: Number of nanoseconds to add. (U)Int*, Float*.", "Returned value", "Returns date_time plus num nanoseconds. DateTime64."], "Examples": ["WITH    toDateTime('2024-01-01 00:00:00') AS date_time,    '2024-01-01 00:00:00' AS date_time_stringSELECT    addNanoseconds(date_time, 1000) AS add_nanoseconds_with_date_time,    addNanoseconds(date_time_string, 1000) AS add_nanoseconds_with_date_time_string"], "Category": ["Dates and Times Functions"], "index": 489, "vector_txt": "489:Feature: addNanoseconds(date_time, num)\nDescription: addNanosecondsAdds a specified number of microseconds to a date with time or a string-encoded date with time.SyntaxaddNanoseconds(date_time, num)Parametersdate_time: Date with time to add specified number of nanoseconds to. DateTime/DateTime64, String.num: Number of nanoseconds to add. (U)Int*, Float*.Returned valueReturns date_time plus num nanoseconds. DateTime64.\nExamples: WITH    toDateTime('2024-01-01 00:00:00') AS date_time,    '2024-01-01 00:00:00' AS date_time_stringSELECT    addNanoseconds(date_time, 1000) AS add_nanoseconds_with_date_time,    addNanoseconds(date_time_string, 1000) AS add_nanoseconds_with_date_time_string\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["addInterval"], "Feature": ["addInterval(interval_1, interval_2)"], "Description": ["addInterval", "Adds an interval to another interval or tuple of intervals.", "Syntax", "addInterval(interval_1, interval_2)", "Parameters", "interval_1: First interval or tuple of intervals. interval, tuple(interval).interval_2: Second interval to be added. interval.", "Returned value", "Returns a tuple of intervals. tuple(interval).", "NoteIntervals of the same type will be combined into a single interval. For instance if toIntervalDay(1) and toIntervalDay(2) are passed then the result will be (3) rather than (1,1)."], "Examples": ["SELECT addInterval(INTERVAL 1 DAY, INTERVAL 1 MONTH);SELECT addInterval((INTERVAL 1 DAY, INTERVAL 1 YEAR), INTERVAL 1 MONTH);SELECT addInterval(INTERVAL 2 DAY, INTERVAL 1 DAY);"], "Category": ["Dates and Times Functions"], "index": 490, "vector_txt": "490:Feature: addInterval(interval_1, interval_2)\nDescription: addIntervalAdds an interval to another interval or tuple of intervals.SyntaxaddInterval(interval_1, interval_2)Parametersinterval_1: First interval or tuple of intervals. interval, tuple(interval).interval_2: Second interval to be added. interval.Returned valueReturns a tuple of intervals. tuple(interval).NoteIntervals of the same type will be combined into a single interval. For instance if toIntervalDay(1) and toIntervalDay(2) are passed then the result will be (3) rather than (1,1).\nExamples: SELECT addInterval(INTERVAL 1 DAY, INTERVAL 1 MONTH);SELECT addInterval((INTERVAL 1 DAY, INTERVAL 1 YEAR), INTERVAL 1 MONTH);SELECT addInterval(INTERVAL 2 DAY, INTERVAL 1 DAY);\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["emptyArrayUInt8"], "Feature": ["emptyArrayUInt8()"], "Description": ["emptyArrayUInt8", "Returns an empty UInt8 array.", "Syntax", "emptyArrayUInt8()", "Arguments", "None.", "Returned value", "An empty array."], "Examples": ["SELECT emptyArrayUInt8();"], "Category": ["Arrays Functions"], "index": 491, "vector_txt": "491:Feature: emptyArrayUInt8()\nDescription: emptyArrayUInt8Returns an empty UInt8 array.SyntaxemptyArrayUInt8()ArgumentsNone.Returned valueAn empty array.\nExamples: SELECT emptyArrayUInt8();\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["addTupleOfIntervals"], "Feature": ["addTupleOfIntervals(interval_1, interval_2)"], "Description": ["addTupleOfIntervals", "Consecutively adds a tuple of intervals to a Date or a DateTime.", "Syntax", "addTupleOfIntervals(interval_1, interval_2)", "Parameters", "date: First interval or interval of tuples. date/date32/datetime/datetime64.intervals: Tuple of intervals to add to date. tuple(interval).", "Returned value", "Returns date with added intervals. date/date32/datetime/datetime64."], "Examples": ["WITH toDate('2018-01-01') AS dateSELECT addTupleOfIntervals(date, (INTERVAL 1 DAY, INTERVAL 1 MONTH, INTERVAL 1 YEAR))"], "Category": ["Dates and Times Functions"], "index": 492, "vector_txt": "492:Feature: addTupleOfIntervals(interval_1, interval_2)\nDescription: addTupleOfIntervalsConsecutively adds a tuple of intervals to a Date or a DateTime.SyntaxaddTupleOfIntervals(interval_1, interval_2)Parametersdate: First interval or interval of tuples. date/date32/datetime/datetime64.intervals: Tuple of intervals to add to date. tuple(interval).Returned valueReturns date with added intervals. date/date32/datetime/datetime64.\nExamples: WITH toDate('2018-01-01') AS dateSELECT addTupleOfIntervals(date, (INTERVAL 1 DAY, INTERVAL 1 MONTH, INTERVAL 1 YEAR))\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["subtractYears"], "Feature": ["subtractYears(date, num)"], "Description": ["subtractYears", "Subtracts a specified number of years from a date, a date with time or a string-encoded date / date with time.", "Syntax", "subtractYears(date, num)", "Parameters", "date: Date / date with time to subtract specified number of years from. Date/Date32/DateTime/DateTime64, String.num: Number of years to subtract. (U)Int*, Float*.", "Returned value", "Returns date minus num years. Date/Date32/DateTime/DateTime64."], "Examples": ["WITH    toDate('2024-01-01') AS date,    toDateTime('2024-01-01 00:00:00') AS date_time,    '2024-01-01 00:00:00' AS date_time_stringSELECT    subtractYears(date, 1) AS subtract_years_with_date,    subtractYears(date_time, 1) AS subtract_years_with_date_time,    subtractYears(date_time_string, 1) AS subtract_years_with_date_time_string"], "Category": ["Dates and Times Functions"], "index": 493, "vector_txt": "493:Feature: subtractYears(date, num)\nDescription: subtractYearsSubtracts a specified number of years from a date, a date with time or a string-encoded date / date with time.SyntaxsubtractYears(date, num)Parametersdate: Date / date with time to subtract specified number of years from. Date/Date32/DateTime/DateTime64, String.num: Number of years to subtract. (U)Int*, Float*.Returned valueReturns date minus num years. Date/Date32/DateTime/DateTime64.\nExamples: WITH    toDate('2024-01-01') AS date,    toDateTime('2024-01-01 00:00:00') AS date_time,    '2024-01-01 00:00:00' AS date_time_stringSELECT    subtractYears(date, 1) AS subtract_years_with_date,    subtractYears(date_time, 1) AS subtract_years_with_date_time,    subtractYears(date_time_string, 1) AS subtract_years_with_date_time_string\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["subtractQuarters"], "Feature": ["subtractQuarters(date, num)"], "Description": ["subtractQuarters", "Subtracts a specified number of quarters from a date, a date with time or a string-encoded date / date with time.", "Syntax", "subtractQuarters(date, num)", "Parameters", "date: Date / date with time to subtract specified number of quarters from. Date/Date32/DateTime/DateTime64, String.num: Number of quarters to subtract. (U)Int*, Float*.", "Returned value", "Returns date minus num quarters. Date/Date32/DateTime/DateTime64."], "Examples": ["WITH    toDate('2024-01-01') AS date,    toDateTime('2024-01-01 00:00:00') AS date_time,    '2024-01-01 00:00:00' AS date_time_stringSELECT    subtractQuarters(date, 1) AS subtract_quarters_with_date,    subtractQuarters(date_time, 1) AS subtract_quarters_with_date_time,    subtractQuarters(date_time_string, 1) AS subtract_quarters_with_date_time_string"], "Category": ["Dates and Times Functions"], "index": 494, "vector_txt": "494:Feature: subtractQuarters(date, num)\nDescription: subtractQuartersSubtracts a specified number of quarters from a date, a date with time or a string-encoded date / date with time.SyntaxsubtractQuarters(date, num)Parametersdate: Date / date with time to subtract specified number of quarters from. Date/Date32/DateTime/DateTime64, String.num: Number of quarters to subtract. (U)Int*, Float*.Returned valueReturns date minus num quarters. Date/Date32/DateTime/DateTime64.\nExamples: WITH    toDate('2024-01-01') AS date,    toDateTime('2024-01-01 00:00:00') AS date_time,    '2024-01-01 00:00:00' AS date_time_stringSELECT    subtractQuarters(date, 1) AS subtract_quarters_with_date,    subtractQuarters(date_time, 1) AS subtract_quarters_with_date_time,    subtractQuarters(date_time_string, 1) AS subtract_quarters_with_date_time_string\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["subtractMonths"], "Feature": ["subtractMonths(date, num)"], "Description": ["subtractMonths", "Subtracts a specified number of months from a date, a date with time or a string-encoded date / date with time.", "Syntax", "subtractMonths(date, num)", "Parameters", "date: Date / date with time to subtract specified number of months from. Date/Date32/DateTime/DateTime64, String.num: Number of months to subtract. (U)Int*, Float*.", "Returned value", "Returns date minus num months. Date/Date32/DateTime/DateTime64."], "Examples": ["WITH    toDate('2024-01-01') AS date,    toDateTime('2024-01-01 00:00:00') AS date_time,    '2024-01-01 00:00:00' AS date_time_stringSELECT    subtractMonths(date, 1) AS subtract_months_with_date,    subtractMonths(date_time, 1) AS subtract_months_with_date_time,    subtractMonths(date_time_string, 1) AS subtract_months_with_date_time_string"], "Category": ["Dates and Times Functions"], "index": 495, "vector_txt": "495:Feature: subtractMonths(date, num)\nDescription: subtractMonthsSubtracts a specified number of months from a date, a date with time or a string-encoded date / date with time.SyntaxsubtractMonths(date, num)Parametersdate: Date / date with time to subtract specified number of months from. Date/Date32/DateTime/DateTime64, String.num: Number of months to subtract. (U)Int*, Float*.Returned valueReturns date minus num months. Date/Date32/DateTime/DateTime64.\nExamples: WITH    toDate('2024-01-01') AS date,    toDateTime('2024-01-01 00:00:00') AS date_time,    '2024-01-01 00:00:00' AS date_time_stringSELECT    subtractMonths(date, 1) AS subtract_months_with_date,    subtractMonths(date_time, 1) AS subtract_months_with_date_time,    subtractMonths(date_time_string, 1) AS subtract_months_with_date_time_string\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["subtractWeeks"], "Feature": ["subtractWeeks(date, num)"], "Description": ["subtractWeeks", "Subtracts a specified number of weeks from a date, a date with time or a string-encoded date / date with time.", "Syntax", "subtractWeeks(date, num)", "Parameters", "date: Date / date with time to subtract specified number of weeks from. Date/Date32/DateTime/DateTime64, String.num: Number of weeks to subtract. (U)Int*, Float*.", "Returned value", "Returns date minus num weeks. Date/Date32/DateTime/DateTime64."], "Examples": ["WITH    toDate('2024-01-01') AS date,    toDateTime('2024-01-01 00:00:00') AS date_time,    '2024-01-01 00:00:00' AS date_time_stringSELECT    subtractWeeks(date, 1) AS subtract_weeks_with_date,    subtractWeeks(date_time, 1) AS subtract_weeks_with_date_time,    subtractWeeks(date_time_string, 1) AS subtract_weeks_with_date_time_string"], "Category": ["Dates and Times Functions"], "index": 496, "vector_txt": "496:Feature: subtractWeeks(date, num)\nDescription: subtractWeeksSubtracts a specified number of weeks from a date, a date with time or a string-encoded date / date with time.SyntaxsubtractWeeks(date, num)Parametersdate: Date / date with time to subtract specified number of weeks from. Date/Date32/DateTime/DateTime64, String.num: Number of weeks to subtract. (U)Int*, Float*.Returned valueReturns date minus num weeks. Date/Date32/DateTime/DateTime64.\nExamples: WITH    toDate('2024-01-01') AS date,    toDateTime('2024-01-01 00:00:00') AS date_time,    '2024-01-01 00:00:00' AS date_time_stringSELECT    subtractWeeks(date, 1) AS subtract_weeks_with_date,    subtractWeeks(date_time, 1) AS subtract_weeks_with_date_time,    subtractWeeks(date_time_string, 1) AS subtract_weeks_with_date_time_string\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["subtractDays"], "Feature": ["subtractDays(date, num)"], "Description": ["subtractDays", "Subtracts a specified number of days from a date, a date with time or a string-encoded date / date with time.", "Syntax", "subtractDays(date, num)", "Parameters", "date: Date / date with time to subtract specified number of days from. Date/Date32/DateTime/DateTime64, String.num: Number of days to subtract. (U)Int*, Float*.", "Returned value", "Returns date minus num days. Date/Date32/DateTime/DateTime64."], "Examples": ["WITH    toDate('2024-01-01') AS date,    toDateTime('2024-01-01 00:00:00') AS date_time,    '2024-01-01 00:00:00' AS date_time_stringSELECT    subtractDays(date, 31) AS subtract_days_with_date,    subtractDays(date_time, 31) AS subtract_days_with_date_time,    subtractDays(date_time_string, 31) AS subtract_days_with_date_time_string"], "Category": ["Dates and Times Functions"], "index": 497, "vector_txt": "497:Feature: subtractDays(date, num)\nDescription: subtractDaysSubtracts a specified number of days from a date, a date with time or a string-encoded date / date with time.SyntaxsubtractDays(date, num)Parametersdate: Date / date with time to subtract specified number of days from. Date/Date32/DateTime/DateTime64, String.num: Number of days to subtract. (U)Int*, Float*.Returned valueReturns date minus num days. Date/Date32/DateTime/DateTime64.\nExamples: WITH    toDate('2024-01-01') AS date,    toDateTime('2024-01-01 00:00:00') AS date_time,    '2024-01-01 00:00:00' AS date_time_stringSELECT    subtractDays(date, 31) AS subtract_days_with_date,    subtractDays(date_time, 31) AS subtract_days_with_date_time,    subtractDays(date_time_string, 31) AS subtract_days_with_date_time_string\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["subtractHours"], "Feature": ["subtractHours(date, num)"], "Description": ["subtractHours", "Subtracts a specified number of hours from a date, a date with time or a string-encoded date / date with time.", "Syntax", "subtractHours(date, num)", "Parameters", "date: Date / date with time to subtract specified number of hours from. Date/Date32/Datetime/Datetime64, String.num: Number of hours to subtract. (U)Int*, Float*.", "Returned value", "Returns date minus num hours. Date/Date32/Datetime/DateTime64."], "Examples": ["WITH    toDate('2024-01-01') AS date,    toDateTime('2024-01-01 00:00:00') AS date_time,    '2024-01-01 00:00:00' AS date_time_stringSELECT    subtractHours(date, 12) AS subtract_hours_with_date,    subtractHours(date_time, 12) AS subtract_hours_with_date_time,    subtractHours(date_time_string, 12) AS subtract_hours_with_date_time_string"], "Category": ["Dates and Times Functions"], "index": 498, "vector_txt": "498:Feature: subtractHours(date, num)\nDescription: subtractHoursSubtracts a specified number of hours from a date, a date with time or a string-encoded date / date with time.SyntaxsubtractHours(date, num)Parametersdate: Date / date with time to subtract specified number of hours from. Date/Date32/Datetime/Datetime64, String.num: Number of hours to subtract. (U)Int*, Float*.Returned valueReturns date minus num hours. Date/Date32/Datetime/DateTime64.\nExamples: WITH    toDate('2024-01-01') AS date,    toDateTime('2024-01-01 00:00:00') AS date_time,    '2024-01-01 00:00:00' AS date_time_stringSELECT    subtractHours(date, 12) AS subtract_hours_with_date,    subtractHours(date_time, 12) AS subtract_hours_with_date_time,    subtractHours(date_time_string, 12) AS subtract_hours_with_date_time_string\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["subtractMinutes"], "Feature": ["subtractMinutes(date, num)"], "Description": ["subtractMinutes", "Subtracts a specified number of minutes from a date, a date with time or a string-encoded date / date with time.", "Syntax", "subtractMinutes(date, num)", "Parameters", "date: Date / date with time to subtract specified number of minutes from. Date/Date32/DateTime/DateTime64, String.num: Number of minutes to subtract. (U)Int*, Float*.", "Returned value", "Returns date minus num minutes. Date/Date32/DateTime/DateTime64."], "Examples": ["WITH    toDate('2024-01-01') AS date,    toDateTime('2024-01-01 00:00:00') AS date_time,    '2024-01-01 00:00:00' AS date_time_stringSELECT    subtractMinutes(date, 30) AS subtract_minutes_with_date,    subtractMinutes(date_time, 30) AS subtract_minutes_with_date_time,    subtractMinutes(date_time_string, 30) AS subtract_minutes_with_date_time_string"], "Category": ["Dates and Times Functions"], "index": 499, "vector_txt": "499:Feature: subtractMinutes(date, num)\nDescription: subtractMinutesSubtracts a specified number of minutes from a date, a date with time or a string-encoded date / date with time.SyntaxsubtractMinutes(date, num)Parametersdate: Date / date with time to subtract specified number of minutes from. Date/Date32/DateTime/DateTime64, String.num: Number of minutes to subtract. (U)Int*, Float*.Returned valueReturns date minus num minutes. Date/Date32/DateTime/DateTime64.\nExamples: WITH    toDate('2024-01-01') AS date,    toDateTime('2024-01-01 00:00:00') AS date_time,    '2024-01-01 00:00:00' AS date_time_stringSELECT    subtractMinutes(date, 30) AS subtract_minutes_with_date,    subtractMinutes(date_time, 30) AS subtract_minutes_with_date_time,    subtractMinutes(date_time_string, 30) AS subtract_minutes_with_date_time_string\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["subtractSeconds"], "Feature": ["subtractSeconds(date, num)"], "Description": ["subtractSeconds", "Subtracts a specified number of seconds from a date, a date with time or a string-encoded date / date with time.", "Syntax", "subtractSeconds(date, num)", "Parameters", "date: Date / date with time to subtract specified number of seconds from. Date/Date32/DateTime/DateTime64, String.num: Number of seconds to subtract. (U)Int*, Float*.", "Returned value", "Returns date minus num seconds. Date/Date32/DateTime/DateTime64."], "Examples": ["WITH    toDate('2024-01-01') AS date,    toDateTime('2024-01-01 00:00:00') AS date_time,    '2024-01-01 00:00:00' AS date_time_stringSELECT    subtractSeconds(date, 60) AS subtract_seconds_with_date,    subtractSeconds(date_time, 60) AS subtract_seconds_with_date_time,    subtractSeconds(date_time_string, 60) AS subtract_seconds_with_date_time_string"], "Category": ["Dates and Times Functions"], "index": 500, "vector_txt": "500:Feature: subtractSeconds(date, num)\nDescription: subtractSecondsSubtracts a specified number of seconds from a date, a date with time or a string-encoded date / date with time.SyntaxsubtractSeconds(date, num)Parametersdate: Date / date with time to subtract specified number of seconds from. Date/Date32/DateTime/DateTime64, String.num: Number of seconds to subtract. (U)Int*, Float*.Returned valueReturns date minus num seconds. Date/Date32/DateTime/DateTime64.\nExamples: WITH    toDate('2024-01-01') AS date,    toDateTime('2024-01-01 00:00:00') AS date_time,    '2024-01-01 00:00:00' AS date_time_stringSELECT    subtractSeconds(date, 60) AS subtract_seconds_with_date,    subtractSeconds(date_time, 60) AS subtract_seconds_with_date_time,    subtractSeconds(date_time_string, 60) AS subtract_seconds_with_date_time_string\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["subtractMilliseconds"], "Feature": ["subtractMilliseconds(date_time, num)"], "Description": ["subtractMilliseconds", "Subtracts a specified number of milliseconds from a date with time or a string-encoded date with time.", "Syntax", "subtractMilliseconds(date_time, num)", "Parameters", "date_time: Date with time to subtract specified number of milliseconds from. DateTime/DateTime64, String.num: Number of milliseconds to subtract. (U)Int*, Float*.", "Returned value", "Returns date_time minus num milliseconds. DateTime64."], "Examples": ["WITH    toDateTime('2024-01-01 00:00:00') AS date_time,    '2024-01-01 00:00:00' AS date_time_stringSELECT    subtractMilliseconds(date_time, 1000) AS subtract_milliseconds_with_date_time,    subtractMilliseconds(date_time_string, 1000) AS subtract_milliseconds_with_date_time_string"], "Category": ["Dates and Times Functions"], "index": 501, "vector_txt": "501:Feature: subtractMilliseconds(date_time, num)\nDescription: subtractMillisecondsSubtracts a specified number of milliseconds from a date with time or a string-encoded date with time.SyntaxsubtractMilliseconds(date_time, num)Parametersdate_time: Date with time to subtract specified number of milliseconds from. DateTime/DateTime64, String.num: Number of milliseconds to subtract. (U)Int*, Float*.Returned valueReturns date_time minus num milliseconds. DateTime64.\nExamples: WITH    toDateTime('2024-01-01 00:00:00') AS date_time,    '2024-01-01 00:00:00' AS date_time_stringSELECT    subtractMilliseconds(date_time, 1000) AS subtract_milliseconds_with_date_time,    subtractMilliseconds(date_time_string, 1000) AS subtract_milliseconds_with_date_time_string\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["emptyArrayUInt16"], "Feature": ["emptyArrayUInt16()"], "Description": ["emptyArrayUInt16", "Returns an empty UInt16 array.", "Syntax", "emptyArrayUInt16()", "Arguments", "None.", "Returned value", "An empty array."], "Examples": ["SELECT emptyArrayUInt16();"], "Category": ["Arrays Functions"], "index": 502, "vector_txt": "502:Feature: emptyArrayUInt16()\nDescription: emptyArrayUInt16Returns an empty UInt16 array.SyntaxemptyArrayUInt16()ArgumentsNone.Returned valueAn empty array.\nExamples: SELECT emptyArrayUInt16();\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["subtractMicroseconds"], "Feature": ["subtractMicroseconds(date_time, num)"], "Description": ["subtractMicroseconds", "Subtracts a specified number of microseconds from a date with time or a string-encoded date with time.", "Syntax", "subtractMicroseconds(date_time, num)", "Parameters", "date_time: Date with time to subtract specified number of microseconds from. DateTime/DateTime64, String.num: Number of microseconds to subtract. (U)Int*, Float*.", "Returned value", "Returns date_time minus num microseconds. DateTime64."], "Examples": ["WITH    toDateTime('2024-01-01 00:00:00') AS date_time,    '2024-01-01 00:00:00' AS date_time_stringSELECT    subtractMicroseconds(date_time, 1000000) AS subtract_microseconds_with_date_time,    subtractMicroseconds(date_time_string, 1000000) AS subtract_microseconds_with_date_time_string"], "Category": ["Dates and Times Functions"], "index": 503, "vector_txt": "503:Feature: subtractMicroseconds(date_time, num)\nDescription: subtractMicrosecondsSubtracts a specified number of microseconds from a date with time or a string-encoded date with time.SyntaxsubtractMicroseconds(date_time, num)Parametersdate_time: Date with time to subtract specified number of microseconds from. DateTime/DateTime64, String.num: Number of microseconds to subtract. (U)Int*, Float*.Returned valueReturns date_time minus num microseconds. DateTime64.\nExamples: WITH    toDateTime('2024-01-01 00:00:00') AS date_time,    '2024-01-01 00:00:00' AS date_time_stringSELECT    subtractMicroseconds(date_time, 1000000) AS subtract_microseconds_with_date_time,    subtractMicroseconds(date_time_string, 1000000) AS subtract_microseconds_with_date_time_string\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["subtractNanoseconds"], "Feature": ["subtractNanoseconds(date_time, num)"], "Description": ["subtractNanoseconds", "Subtracts a specified number of nanoseconds from a date with time or a string-encoded date with time.", "Syntax", "subtractNanoseconds(date_time, num)", "Parameters", "date_time: Date with time to subtract specified number of nanoseconds from. DateTime/DateTime64, String.num: Number of nanoseconds to subtract. (U)Int*, Float*.", "Returned value", "Returns date_time minus num nanoseconds. DateTime64."], "Examples": ["WITH    toDateTime('2024-01-01 00:00:00') AS date_time,    '2024-01-01 00:00:00' AS date_time_stringSELECT    subtractNanoseconds(date_time, 1000) AS subtract_nanoseconds_with_date_time,    subtractNanoseconds(date_time_string, 1000) AS subtract_nanoseconds_with_date_time_string"], "Category": ["Dates and Times Functions"], "index": 504, "vector_txt": "504:Feature: subtractNanoseconds(date_time, num)\nDescription: subtractNanosecondsSubtracts a specified number of nanoseconds from a date with time or a string-encoded date with time.SyntaxsubtractNanoseconds(date_time, num)Parametersdate_time: Date with time to subtract specified number of nanoseconds from. DateTime/DateTime64, String.num: Number of nanoseconds to subtract. (U)Int*, Float*.Returned valueReturns date_time minus num nanoseconds. DateTime64.\nExamples: WITH    toDateTime('2024-01-01 00:00:00') AS date_time,    '2024-01-01 00:00:00' AS date_time_stringSELECT    subtractNanoseconds(date_time, 1000) AS subtract_nanoseconds_with_date_time,    subtractNanoseconds(date_time_string, 1000) AS subtract_nanoseconds_with_date_time_string\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["subtractInterval"], "Feature": ["subtractInterval(interval_1, interval_2)"], "Description": ["subtractInterval", "Adds a negated interval to another interval or tuple of intervals.", "Syntax", "subtractInterval(interval_1, interval_2)", "Parameters", "interval_1: First interval or interval of tuples. interval, tuple(interval).interval_2: Second interval to be negated. interval.", "Returned value", "Returns a tuple of intervals. tuple(interval).", "NoteIntervals of the same type will be combined into a single interval. For instance if toIntervalDay(2) and toIntervalDay(1) are passed then the result will be (1) rather than (2,1)"], "Examples": ["SELECT subtractInterval(INTERVAL 1 DAY, INTERVAL 1 MONTH);SELECT subtractInterval((INTERVAL 1 DAY, INTERVAL 1 YEAR), INTERVAL 1 MONTH);SELECT subtractInterval(INTERVAL 2 DAY, INTERVAL 1 DAY);"], "Category": ["Dates and Times Functions"], "index": 505, "vector_txt": "505:Feature: subtractInterval(interval_1, interval_2)\nDescription: subtractIntervalAdds a negated interval to another interval or tuple of intervals.SyntaxsubtractInterval(interval_1, interval_2)Parametersinterval_1: First interval or interval of tuples. interval, tuple(interval).interval_2: Second interval to be negated. interval.Returned valueReturns a tuple of intervals. tuple(interval).NoteIntervals of the same type will be combined into a single interval. For instance if toIntervalDay(2) and toIntervalDay(1) are passed then the result will be (1) rather than (2,1)\nExamples: SELECT subtractInterval(INTERVAL 1 DAY, INTERVAL 1 MONTH);SELECT subtractInterval((INTERVAL 1 DAY, INTERVAL 1 YEAR), INTERVAL 1 MONTH);SELECT subtractInterval(INTERVAL 2 DAY, INTERVAL 1 DAY);\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["subtractTupleOfIntervals"], "Feature": ["subtractTupleOfIntervals(interval_1, interval_2)"], "Description": ["subtractTupleOfIntervals", "Consecutively subtracts a tuple of intervals from a Date or a DateTime.", "Syntax", "subtractTupleOfIntervals(interval_1, interval_2)", "Parameters", "date: First interval or interval of tuples. Date/Date32/DateTime/DateTime64.intervals: Tuple of intervals to subtract from date. tuple(interval).", "Returned value", "Returns date with subtracted intervals. Date/Date32/DateTime/DateTime64."], "Examples": ["WITH toDate('2018-01-01') AS date SELECT subtractTupleOfIntervals(date, (INTERVAL 1 DAY, INTERVAL 1 YEAR))"], "Category": ["Dates and Times Functions"], "index": 506, "vector_txt": "506:Feature: subtractTupleOfIntervals(interval_1, interval_2)\nDescription: subtractTupleOfIntervalsConsecutively subtracts a tuple of intervals from a Date or a DateTime.SyntaxsubtractTupleOfIntervals(interval_1, interval_2)Parametersdate: First interval or interval of tuples. Date/Date32/DateTime/DateTime64.intervals: Tuple of intervals to subtract from date. tuple(interval).Returned valueReturns date with subtracted intervals. Date/Date32/DateTime/DateTime64.\nExamples: WITH toDate('2018-01-01') AS date SELECT subtractTupleOfIntervals(date, (INTERVAL 1 DAY, INTERVAL 1 YEAR))\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["timeSlots"], "Feature": ["timeSlots(StartTime, Duration,\\[, Size\\])"], "Description": ["timeSlots", "For a time interval starting at \u2018StartTime\u2019 and continuing for \u2018Duration\u2019 seconds, it returns an array of moments in time, consisting of points from this interval rounded down to the \u2018Size\u2019 in seconds. \u2018Size\u2019 is an optional parameter set to 1800 (30 minutes) by default.\nThis is necessary, for example, when searching for pageviews in the corresponding session.\nAccepts DateTime and DateTime64 as \u2019StartTime\u2019 argument. For DateTime, \u2019Duration\u2019 and \u2019Size\u2019 arguments must be UInt32. For \u2019DateTime64\u2019 they must be Decimal64.\nReturns an array of DateTime/DateTime64 (return type matches the type of \u2019StartTime\u2019). For DateTime64, the return value's scale can differ from the scale of \u2019StartTime\u2019 --- the highest scale among all given arguments is taken.", "Syntax", "timeSlots(StartTime, Duration,\\[, Size\\])"], "Examples": ["SELECT timeSlots(toDateTime('2012-01-01 12:20:00'), toUInt32(600));SELECT timeSlots(toDateTime('1980-12-12 21:01:02', 'UTC'), toUInt32(600), 299);SELECT timeSlots(toDateTime64('1980-12-12 21:01:02.1234', 4, 'UTC'), toDecimal64(600.1, 1), toDecimal64(299, 0));"], "Category": ["Dates and Times Functions"], "index": 507, "vector_txt": "507:Feature: timeSlots(StartTime, Duration,\\[, Size\\])\nDescription: timeSlotsFor a time interval starting at \u2018StartTime\u2019 and continuing for \u2018Duration\u2019 seconds, it returns an array of moments in time, consisting of points from this interval rounded down to the \u2018Size\u2019 in seconds. \u2018Size\u2019 is an optional parameter set to 1800 (30 minutes) by default.\nThis is necessary, for example, when searching for pageviews in the corresponding session.\nAccepts DateTime and DateTime64 as \u2019StartTime\u2019 argument. For DateTime, \u2019Duration\u2019 and \u2019Size\u2019 arguments must be UInt32. For \u2019DateTime64\u2019 they must be Decimal64.\nReturns an array of DateTime/DateTime64 (return type matches the type of \u2019StartTime\u2019). For DateTime64, the return value's scale can differ from the scale of \u2019StartTime\u2019 --- the highest scale among all given arguments is taken.SyntaxtimeSlots(StartTime, Duration,\\[, Size\\])\nExamples: SELECT timeSlots(toDateTime('2012-01-01 12:20:00'), toUInt32(600));SELECT timeSlots(toDateTime('1980-12-12 21:01:02', 'UTC'), toUInt32(600), 299);SELECT timeSlots(toDateTime64('1980-12-12 21:01:02.1234', 4, 'UTC'), toDecimal64(600.1, 1), toDecimal64(299, 0));\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["formatDateTime"], "Feature": ["formatDateTime(Time, Format[, Timezone])"], "Description": ["formatDateTime", "Formats a Time according to the given Format string. Format is a constant expression, so you cannot have multiple formats for a single result column.", "formatDateTime uses MySQL datetime format style, refer to https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_date-format.", "The opposite operation of this function is parseDateTime.", "Alias: DATE_FORMAT.", "Syntax", "formatDateTime(Time, Format[, Timezone])", "Returned value(s)", "Returns time and date values according to the determined format.", "Replacement fields", "Using replacement fields, you can define a pattern for the resulting string. \u201cExample\u201d column shows formatting result for 2018-01-02 22:33:44.", "PlaceholderDescriptionExample%aabbreviated weekday name (Mon-Sun)Mon%babbreviated month name (Jan-Dec)Jan%cmonth as an integer number (01-12), see 'Note 3' below01%Cyear divided by 100 and truncated to integer (00-99)20%dday of the month, zero-padded (01-31)02%DShort MM/DD/YY date, equivalent to %m/%d/%y01/02/18%eday of the month, space-padded (1-31)\u00a0 2%ffractional second, see 'Note 1' below1234560%Fshort YYYY-MM-DD date, equivalent to %Y-%m-%d2018-01-02%gtwo-digit year format, aligned to ISO 8601, abbreviated from four-digit notation18%Gfour-digit year format for ISO week number, calculated from the week-based year defined by the ISO 8601 standard, normally useful only with %V2018%hhour in 12h format (01-12)09%Hhour in 24h format (00-23)22%iminute (00-59)33%Ihour in 12h format (01-12)10%jday of the year (001-366)002%khour in 24h format (00-23), see 'Note 3' below14%lhour in 12h format (01-12), see 'Note 3' below09%mmonth as an integer number (01-12)01%Mfull month name (January-December), see 'Note 2' belowJanuary%nnew-line character (\u2018\u2019)%pAM or PM designationPM%QQuarter (1-4)1%r12-hour HH:MM AM/PM time, equivalent to %h:%i %p10:30 PM%R24-hour HH:MM time, equivalent to %H:%i22:33%ssecond (00-59)44%Ssecond (00-59)44%thorizontal-tab character (\u2019)%TISO 8601 time format (HH:MM:SS), equivalent to %H:%i:%S22:33:44%uISO 8601 weekday as number with Monday as 1 (1-7)2%VISO 8601 week number (01-53)01%wweekday as a integer number with Sunday as 0 (0-6)2%Wfull weekday name (Monday-Sunday)Monday%yYear, last two digits (00-99)18%YYear2018%zTime offset from UTC as +HHMM or -HHMM-0500%%a % sign%", "Note 1: In ClickHouse versions earlier than v23.4, %f prints a single zero (0) if the formatted value is a Date, Date32 or DateTime (which have no fractional seconds) or a DateTime64 with a precision of 0. The previous behavior can be restored using setting formatdatetime_f_prints_single_zero = 1.", "Note 2: In ClickHouse versions earlier than v23.4, %M prints the minute (00-59) instead of the full month name (January-December). The previous behavior can be restored using setting formatdatetime_parsedatetime_m_is_month_name = 0.", "Note 3: In ClickHouse versions earlier than v23.11, function parseDateTime() required leading zeros for formatters %c (month) and %l/%k (hour), e.g. 07. In later versions, the leading zero may be omitted, e.g. 7. The previous behavior can be restored using setting parsedatetime_parse_without_leading_zeros = 0. Note that function formatDateTime() by default still prints leading zeros for %c and %l/%k to not break existing use cases. This behavior can be changed by setting formatdatetime_format_without_leading_zeros = 1."], "Examples": ["SELECT formatDateTime(toDate('2010-01-04'), '%g')", "SELECT formatDateTime(toDateTime64('2010-01-04 12:34:56.123456', 7), '%f')", "SELECT    now() AS ts,    time_zone,    formatDateTime(ts, '%T', time_zone) AS str_tz_timeFROM system.time_zonesWHERE time_zone LIKE 'Europe%'LIMIT 10\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500ts\u2500\u252c\u2500time_zone\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500str_tz_time\u2500\u2510\u2502 2023-09-08 19:13:40 \u2502 Europe/Amsterdam  \u2502 21:13:40    \u2502\u2502 2023-09-08 19:13:40 \u2502 Europe/Andorra    \u2502 21:13:40    \u2502\u2502 2023-09-08 19:13:40 \u2502 Europe/Astrakhan  \u2502 23:13:40    \u2502\u2502 2023-09-08 19:13:40 \u2502 Europe/Athens     \u2502 22:13:40    \u2502\u2502 2023-09-08 19:13:40 \u2502 Europe/Belfast    \u2502 20:13:40    \u2502\u2502 2023-09-08 19:13:40 \u2502 Europe/Belgrade   \u2502 21:13:40    \u2502\u2502 2023-09-08 19:13:40 \u2502 Europe/Berlin     \u2502 21:13:40    \u2502\u2502 2023-09-08 19:13:40 \u2502 Europe/Bratislava \u2502 21:13:40    \u2502\u2502 2023-09-08 19:13:40 \u2502 Europe/Brussels   \u2502 21:13:40    \u2502\u2502 2023-09-08 19:13:40 \u2502 Europe/Bucharest  \u2502 22:13:40    \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Category": ["Dates and Times Functions"], "index": 508, "vector_txt": "508:Feature: formatDateTime(Time, Format[, Timezone])\nDescription: formatDateTimeFormats a Time according to the given Format string. Format is a constant expression, so you cannot have multiple formats for a single result column.formatDateTime uses MySQL datetime format style, refer to https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_date-format.The opposite operation of this function is parseDateTime.Alias: DATE_FORMAT.SyntaxformatDateTime(Time, Format[, Timezone])Returned value(s)Returns time and date values according to the determined format.Replacement fieldsUsing replacement fields, you can define a pattern for the resulting string. \u201cExample\u201d column shows formatting result for 2018-01-02 22:33:44.PlaceholderDescriptionExample%aabbreviated weekday name (Mon-Sun)Mon%babbreviated month name (Jan-Dec)Jan%cmonth as an integer number (01-12), see 'Note 3' below01%Cyear divided by 100 and truncated to integer (00-99)20%dday of the month, zero-padded (01-31)02%DShort MM/DD/YY date, equivalent to %m/%d/%y01/02/18%eday of the month, space-padded (1-31)\u00a0 2%ffractional second, see 'Note 1' below1234560%Fshort YYYY-MM-DD date, equivalent to %Y-%m-%d2018-01-02%gtwo-digit year format, aligned to ISO 8601, abbreviated from four-digit notation18%Gfour-digit year format for ISO week number, calculated from the week-based year defined by the ISO 8601 standard, normally useful only with %V2018%hhour in 12h format (01-12)09%Hhour in 24h format (00-23)22%iminute (00-59)33%Ihour in 12h format (01-12)10%jday of the year (001-366)002%khour in 24h format (00-23), see 'Note 3' below14%lhour in 12h format (01-12), see 'Note 3' below09%mmonth as an integer number (01-12)01%Mfull month name (January-December), see 'Note 2' belowJanuary%nnew-line character (\u2018\u2019)%pAM or PM designationPM%QQuarter (1-4)1%r12-hour HH:MM AM/PM time, equivalent to %h:%i %p10:30 PM%R24-hour HH:MM time, equivalent to %H:%i22:33%ssecond (00-59)44%Ssecond (00-59)44%thorizontal-tab character (\u2019)%TISO 8601 time format (HH:MM:SS), equivalent to %H:%i:%S22:33:44%uISO 8601 weekday as number with Monday as 1 (1-7)2%VISO 8601 week number (01-53)01%wweekday as a integer number with Sunday as 0 (0-6)2%Wfull weekday name (Monday-Sunday)Monday%yYear, last two digits (00-99)18%YYear2018%zTime offset from UTC as +HHMM or -HHMM-0500%%a % sign%Note 1: In ClickHouse versions earlier than v23.4, %f prints a single zero (0) if the formatted value is a Date, Date32 or DateTime (which have no fractional seconds) or a DateTime64 with a precision of 0. The previous behavior can be restored using setting formatdatetime_f_prints_single_zero = 1.Note 2: In ClickHouse versions earlier than v23.4, %M prints the minute (00-59) instead of the full month name (January-December). The previous behavior can be restored using setting formatdatetime_parsedatetime_m_is_month_name = 0.Note 3: In ClickHouse versions earlier than v23.11, function parseDateTime() required leading zeros for formatters %c (month) and %l/%k (hour), e.g. 07. In later versions, the leading zero may be omitted, e.g. 7. The previous behavior can be restored using setting parsedatetime_parse_without_leading_zeros = 0. Note that function formatDateTime() by default still prints leading zeros for %c and %l/%k to not break existing use cases. This behavior can be changed by setting formatdatetime_format_without_leading_zeros = 1.\nExamples: SELECT formatDateTime(toDate('2010-01-04'), '%g')SELECT formatDateTime(toDateTime64('2010-01-04 12:34:56.123456', 7), '%f')SELECT    now() AS ts,    time_zone,    formatDateTime(ts, '%T', time_zone) AS str_tz_timeFROM system.time_zonesWHERE time_zone LIKE 'Europe%'LIMIT 10\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500ts\u2500\u252c\u2500time_zone\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500str_tz_time\u2500\u2510\u2502 2023-09-08 19:13:40 \u2502 Europe/Amsterdam  \u2502 21:13:40    \u2502\u2502 2023-09-08 19:13:40 \u2502 Europe/Andorra    \u2502 21:13:40    \u2502\u2502 2023-09-08 19:13:40 \u2502 Europe/Astrakhan  \u2502 23:13:40    \u2502\u2502 2023-09-08 19:13:40 \u2502 Europe/Athens     \u2502 22:13:40    \u2502\u2502 2023-09-08 19:13:40 \u2502 Europe/Belfast    \u2502 20:13:40    \u2502\u2502 2023-09-08 19:13:40 \u2502 Europe/Belgrade   \u2502 21:13:40    \u2502\u2502 2023-09-08 19:13:40 \u2502 Europe/Berlin     \u2502 21:13:40    \u2502\u2502 2023-09-08 19:13:40 \u2502 Europe/Bratislava \u2502 21:13:40    \u2502\u2502 2023-09-08 19:13:40 \u2502 Europe/Brussels   \u2502 21:13:40    \u2502\u2502 2023-09-08 19:13:40 \u2502 Europe/Bucharest  \u2502 22:13:40    \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["formatDateTimeInJodaSyntax"], "Feature": ["formatDateTimeInJodaSyntax"], "Description": ["formatDateTimeInJodaSyntax", "Similar to formatDateTime, except that it formats datetime in Joda style instead of MySQL style. Refer to https://joda-time.sourceforge.net/apidocs/org/joda/time/format/DateTimeFormat.html.", "The opposite operation of this function is parseDateTimeInJodaSyntax.", "Replacement fields", "Using replacement fields, you can define a pattern for the resulting string.", "PlaceholderDescriptionPresentationExamplesGeratextADCcentury of era (>=0)number20Yyear of era (>=0)year1996xweekyear (not supported yet)year1996wweek of weekyear (not supported yet)number27eday of weeknumber2Eday of weektextTuesday; Tueyyearyear1996Dday of yearnumber189Mmonth of yearmonthJuly; Jul; 07dday of monthnumber10ahalfday of daytextPMKhour of halfday (0~11)number0hclockhour of halfday (1~12)number12Hhour of day (0~23)number0kclockhour of day (1~24)number24mminute of hournumber30ssecond of minutenumber55Sfraction of second (not supported yet)number978ztime zone (short name not supported yet)textPacific Standard Time; PSTZtime zone offset/id (not supported yet)zone-0800; -08:00; America/Los_Angeles'escape for textdelimiter''single quoteliteral'"], "Examples": ["SELECT formatDateTimeInJodaSyntax(toDateTime('2010-01-04 12:34:56'), 'yyyy-MM-dd HH:mm:ss')"], "Category": ["Dates and Times Functions"], "index": 509, "vector_txt": "509:Feature: formatDateTimeInJodaSyntax\nDescription: formatDateTimeInJodaSyntaxSimilar to formatDateTime, except that it formats datetime in Joda style instead of MySQL style. Refer to https://joda-time.sourceforge.net/apidocs/org/joda/time/format/DateTimeFormat.html.The opposite operation of this function is parseDateTimeInJodaSyntax.Replacement fieldsUsing replacement fields, you can define a pattern for the resulting string.PlaceholderDescriptionPresentationExamplesGeratextADCcentury of era (>=0)number20Yyear of era (>=0)year1996xweekyear (not supported yet)year1996wweek of weekyear (not supported yet)number27eday of weeknumber2Eday of weektextTuesday; Tueyyearyear1996Dday of yearnumber189Mmonth of yearmonthJuly; Jul; 07dday of monthnumber10ahalfday of daytextPMKhour of halfday (0~11)number0hclockhour of halfday (1~12)number12Hhour of day (0~23)number0kclockhour of day (1~24)number24mminute of hournumber30ssecond of minutenumber55Sfraction of second (not supported yet)number978ztime zone (short name not supported yet)textPacific Standard Time; PSTZtime zone offset/id (not supported yet)zone-0800; -08:00; America/Los_Angeles'escape for textdelimiter''single quoteliteral'\nExamples: SELECT formatDateTimeInJodaSyntax(toDateTime('2010-01-04 12:34:56'), 'yyyy-MM-dd HH:mm:ss')\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["dateName"], "Feature": ["dateName(date_part, date)"], "Description": ["dateName", "Returns specified part of date.", "Syntax", "dateName(date_part, date)", "Arguments", "date_part \u2014 Date part. Possible values: 'year', 'quarter', 'month', 'week', 'dayofyear', 'day', 'weekday', 'hour', 'minute', 'second'. String.date \u2014 Date. Date, Date32, DateTime or DateTime64.timezone \u2014 Timezone. Optional. String.", "Returned value", "The specified part of date. String"], "Examples": ["WITH toDateTime('2021-04-14 11:22:33') AS date_valueSELECT    dateName('year', date_value),    dateName('month', date_value),    dateName('day', date_value);"], "Category": ["Dates and Times Functions"], "index": 510, "vector_txt": "510:Feature: dateName(date_part, date)\nDescription: dateNameReturns specified part of date.SyntaxdateName(date_part, date)Argumentsdate_part \u2014 Date part. Possible values: 'year', 'quarter', 'month', 'week', 'dayofyear', 'day', 'weekday', 'hour', 'minute', 'second'. String.date \u2014 Date. Date, Date32, DateTime or DateTime64.timezone \u2014 Timezone. Optional. String.Returned valueThe specified part of date. String\nExamples: WITH toDateTime('2021-04-14 11:22:33') AS date_valueSELECT    dateName('year', date_value),    dateName('month', date_value),    dateName('day', date_value);\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["monthName"], "Feature": ["monthName(date)"], "Description": ["monthName", "Returns name of the month.", "Syntax", "monthName(date)", "Arguments", "date \u2014 Date or date with time. Date, DateTime or DateTime64.", "Returned value", "The name of the month. String"], "Examples": ["WITH toDateTime('2021-04-14 11:22:33') AS date_valueSELECT monthName(date_value);"], "Category": ["Dates and Times Functions"], "index": 511, "vector_txt": "511:Feature: monthName(date)\nDescription: monthNameReturns name of the month.SyntaxmonthName(date)Argumentsdate \u2014 Date or date with time. Date, DateTime or DateTime64.Returned valueThe name of the month. String\nExamples: WITH toDateTime('2021-04-14 11:22:33') AS date_valueSELECT monthName(date_value);\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["fromUnixTimestamp"], "Feature": ["fromUnixTimestamp"], "Description": ["fromUnixTimestamp", "This function converts a Unix timestamp to a calendar date and a time of a day.", "It can be called in two ways:", "When given a single argument of type Integer, it returns a value of type DateTime, i.e. behaves like toDateTime.", "Alias: FROM_UNIXTIME."], "Examples": ["SELECT fromUnixTimestamp(423543535);", "SELECT fromUnixTimestamp(1234334543, '%Y-%m-%d %R:%S') AS DateTime;"], "Category": ["Dates and Times Functions"], "index": 512, "vector_txt": "512:Feature: fromUnixTimestamp\nDescription: fromUnixTimestampThis function converts a Unix timestamp to a calendar date and a time of a day.It can be called in two ways:When given a single argument of type Integer, it returns a value of type DateTime, i.e. behaves like toDateTime.Alias: FROM_UNIXTIME.\nExamples: SELECT fromUnixTimestamp(423543535);SELECT fromUnixTimestamp(1234334543, '%Y-%m-%d %R:%S') AS DateTime;\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["emptyArrayUInt32"], "Feature": ["emptyArrayUInt32()"], "Description": ["emptyArrayUInt32", "Returns an empty UInt32 array.", "Syntax", "emptyArrayUInt32()", "Arguments", "None.", "Returned value", "An empty array."], "Examples": ["SELECT emptyArrayUInt32();"], "Category": ["Arrays Functions"], "index": 513, "vector_txt": "513:Feature: emptyArrayUInt32()\nDescription: emptyArrayUInt32Returns an empty UInt32 array.SyntaxemptyArrayUInt32()ArgumentsNone.Returned valueAn empty array.\nExamples: SELECT emptyArrayUInt32();\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["fromUnixTimestampInJodaSyntax"], "Feature": ["fromUnixTimestampInJodaSyntax"], "Description": ["fromUnixTimestampInJodaSyntax", "Same as fromUnixTimestamp but when called in the second way (two or three arguments), the formatting is performed using Joda style instead of MySQL style."], "Examples": ["SELECT fromUnixTimestampInJodaSyntax(1234334543, 'yyyy-MM-dd HH:mm:ss', 'UTC') AS DateTime;"], "Category": ["Dates and Times Functions"], "index": 514, "vector_txt": "514:Feature: fromUnixTimestampInJodaSyntax\nDescription: fromUnixTimestampInJodaSyntaxSame as fromUnixTimestamp but when called in the second way (two or three arguments), the formatting is performed using Joda style instead of MySQL style.\nExamples: SELECT fromUnixTimestampInJodaSyntax(1234334543, 'yyyy-MM-dd HH:mm:ss', 'UTC') AS DateTime;\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toModifiedJulianDay"], "Feature": ["toModifiedJulianDay(date)"], "Description": ["toModifiedJulianDay", "Converts a Proleptic Gregorian calendar date in text form YYYY-MM-DD to a Modified Julian Day number in Int32. This function supports date from 0000-01-01 to 9999-12-31. It raises an exception if the argument cannot be parsed as a date, or the date is invalid.", "Syntax", "toModifiedJulianDay(date)", "Arguments", "date \u2014 Date in text form. String or FixedString.", "Returned value", "Modified Julian Day number. Int32."], "Examples": ["SELECT toModifiedJulianDay('2020-01-01');"], "Category": ["Dates and Times Functions"], "index": 515, "vector_txt": "515:Feature: toModifiedJulianDay(date)\nDescription: toModifiedJulianDayConverts a Proleptic Gregorian calendar date in text form YYYY-MM-DD to a Modified Julian Day number in Int32. This function supports date from 0000-01-01 to 9999-12-31. It raises an exception if the argument cannot be parsed as a date, or the date is invalid.SyntaxtoModifiedJulianDay(date)Argumentsdate \u2014 Date in text form. String or FixedString.Returned valueModified Julian Day number. Int32.\nExamples: SELECT toModifiedJulianDay('2020-01-01');\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toModifiedJulianDayOrNull"], "Feature": ["toModifiedJulianDayOrNull(date)"], "Description": ["toModifiedJulianDayOrNull", "Similar to toModifiedJulianDay(), but instead of raising exceptions it returns NULL.", "Syntax", "toModifiedJulianDayOrNull(date)", "Arguments", "date \u2014 Date in text form. String or FixedString.", "Returned value", "Modified Julian Day number. Nullable(Int32)."], "Examples": ["SELECT toModifiedJulianDayOrNull('2020-01-01');"], "Category": ["Dates and Times Functions"], "index": 516, "vector_txt": "516:Feature: toModifiedJulianDayOrNull(date)\nDescription: toModifiedJulianDayOrNullSimilar to toModifiedJulianDay(), but instead of raising exceptions it returns NULL.SyntaxtoModifiedJulianDayOrNull(date)Argumentsdate \u2014 Date in text form. String or FixedString.Returned valueModified Julian Day number. Nullable(Int32).\nExamples: SELECT toModifiedJulianDayOrNull('2020-01-01');\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["fromModifiedJulianDay"], "Feature": ["fromModifiedJulianDay(day)"], "Description": ["fromModifiedJulianDay", "Converts a Modified Julian Day number to a Proleptic Gregorian calendar date in text form YYYY-MM-DD. This function supports day number from -678941 to 2973483 (which represent 0000-01-01 and 9999-12-31 respectively). It raises an exception if the day number is outside of the supported range.", "Syntax", "fromModifiedJulianDay(day)", "Arguments", "day \u2014 Modified Julian Day number. Any integral types.", "Returned value", "Date in text form. String"], "Examples": ["SELECT fromModifiedJulianDay(58849);"], "Category": ["Dates and Times Functions"], "index": 517, "vector_txt": "517:Feature: fromModifiedJulianDay(day)\nDescription: fromModifiedJulianDayConverts a Modified Julian Day number to a Proleptic Gregorian calendar date in text form YYYY-MM-DD. This function supports day number from -678941 to 2973483 (which represent 0000-01-01 and 9999-12-31 respectively). It raises an exception if the day number is outside of the supported range.SyntaxfromModifiedJulianDay(day)Argumentsday \u2014 Modified Julian Day number. Any integral types.Returned valueDate in text form. String\nExamples: SELECT fromModifiedJulianDay(58849);\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["fromModifiedJulianDayOrNull"], "Feature": ["fromModifiedJulianDayOrNull(day)"], "Description": ["fromModifiedJulianDayOrNull", "Similar to fromModifiedJulianDayOrNull(), but instead of raising exceptions it returns NULL.", "Syntax", "fromModifiedJulianDayOrNull(day)", "Arguments", "day \u2014 Modified Julian Day number. Any integral types.", "Returned value", "Date in text form. Nullable(String)"], "Examples": ["SELECT fromModifiedJulianDayOrNull(58849);"], "Category": ["Dates and Times Functions"], "index": 518, "vector_txt": "518:Feature: fromModifiedJulianDayOrNull(day)\nDescription: fromModifiedJulianDayOrNullSimilar to fromModifiedJulianDayOrNull(), but instead of raising exceptions it returns NULL.SyntaxfromModifiedJulianDayOrNull(day)Argumentsday \u2014 Modified Julian Day number. Any integral types.Returned valueDate in text form. Nullable(String)\nExamples: SELECT fromModifiedJulianDayOrNull(58849);\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["toUTCTimestamp"], "Feature": ["toUTCTimestamp(time_val, time_zone)"], "Description": ["toUTCTimestamp", "Convert DateTime/DateTime64 type value from other time zone to UTC timezone timestamp", "Syntax", "toUTCTimestamp(time_val, time_zone)", "Arguments", "time_val \u2014 A DateTime/DateTime64 type const value or an expression . DateTime/DateTime64 typestime_zone \u2014 A String type const value or an expression represent the time zone. String types", "Returned value", "DateTime/DateTime64 in text form"], "Examples": ["SELECT toUTCTimestamp(toDateTime('2023-03-16'), 'Asia/Shanghai');"], "Category": ["Dates and Times Functions"], "index": 519, "vector_txt": "519:Feature: toUTCTimestamp(time_val, time_zone)\nDescription: toUTCTimestampConvert DateTime/DateTime64 type value from other time zone to UTC timezone timestampSyntaxtoUTCTimestamp(time_val, time_zone)Argumentstime_val \u2014 A DateTime/DateTime64 type const value or an expression . DateTime/DateTime64 typestime_zone \u2014 A String type const value or an expression represent the time zone. String typesReturned valueDateTime/DateTime64 in text form\nExamples: SELECT toUTCTimestamp(toDateTime('2023-03-16'), 'Asia/Shanghai');\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["fromUTCTimestamp"], "Feature": ["fromUTCTimestamp(time_val, time_zone)"], "Description": ["fromUTCTimestamp", "Convert DateTime/DateTime64 type value from UTC timezone to other time zone timestamp", "Syntax", "fromUTCTimestamp(time_val, time_zone)", "Arguments", "time_val \u2014 A DateTime/DateTime64 type const value or an expression . DateTime/DateTime64 typestime_zone \u2014 A String type const value or an expression represent the time zone. String types", "Returned value", "DateTime/DateTime64 in text form"], "Examples": ["SELECT fromUTCTimestamp(toDateTime64('2023-03-16 10:00:00', 3), 'Asia/Shanghai');"], "Category": ["Dates and Times Functions"], "index": 520, "vector_txt": "520:Feature: fromUTCTimestamp(time_val, time_zone)\nDescription: fromUTCTimestampConvert DateTime/DateTime64 type value from UTC timezone to other time zone timestampSyntaxfromUTCTimestamp(time_val, time_zone)Argumentstime_val \u2014 A DateTime/DateTime64 type const value or an expression . DateTime/DateTime64 typestime_zone \u2014 A String type const value or an expression represent the time zone. String typesReturned valueDateTime/DateTime64 in text form\nExamples: SELECT fromUTCTimestamp(toDateTime64('2023-03-16 10:00:00', 3), 'Asia/Shanghai');\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["UTCTimestamp"], "Feature": ["UTCTimestamp()"], "Description": ["UTCTimestamp", "Returns the current date and time at the moment of query analysis. The function is a constant expression.", "NoteThis function gives the same result that now('UTC') would. It was added only for MySQL support and now is the preferred usage.", "Syntax", "UTCTimestamp()", "Alias: UTC_timestamp.", "Returned value", "Returns the current date and time at the moment of query analysis. DateTime."], "Examples": ["SELECT UTCTimestamp();"], "Category": ["Dates and Times Functions"], "index": 521, "vector_txt": "521:Feature: UTCTimestamp()\nDescription: UTCTimestampReturns the current date and time at the moment of query analysis. The function is a constant expression.NoteThis function gives the same result that now('UTC') would. It was added only for MySQL support and now is the preferred usage.SyntaxUTCTimestamp()Alias: UTC_timestamp.Returned valueReturns the current date and time at the moment of query analysis. DateTime.\nExamples: SELECT UTCTimestamp();\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["timeDiff"], "Feature": ["timeDiff(first_datetime, second_datetime)"], "Description": ["timeDiff", "Returns the difference between two dates or dates with time values. The difference is calculated in units of seconds. It is same as dateDiff and was added only for MySQL support. dateDiff is preferred.", "Syntax", "timeDiff(first_datetime, second_datetime)", "*Arguments**", "first_datetime \u2014 A DateTime/DateTime64 type const value or an expression . DateTime/DateTime64 typessecond_datetime \u2014 A DateTime/DateTime64 type const value or an expression . DateTime/DateTime64 types", "Returned value", "The difference between two dates or dates with time values in seconds."], "Examples": ["timeDiff(toDateTime64('1927-01-01 00:00:00', 3), toDate32('1927-01-02'));"], "Category": ["Dates and Times Functions"], "index": 522, "vector_txt": "522:Feature: timeDiff(first_datetime, second_datetime)\nDescription: timeDiffReturns the difference between two dates or dates with time values. The difference is calculated in units of seconds. It is same as dateDiff and was added only for MySQL support. dateDiff is preferred.SyntaxtimeDiff(first_datetime, second_datetime)*Arguments**first_datetime \u2014 A DateTime/DateTime64 type const value or an expression . DateTime/DateTime64 typessecond_datetime \u2014 A DateTime/DateTime64 type const value or an expression . DateTime/DateTime64 typesReturned valueThe difference between two dates or dates with time values in seconds.\nExamples: timeDiff(toDateTime64('1927-01-01 00:00:00', 3), toDate32('1927-01-02'));\nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/date-time-functions"], "Title": ["Related content"], "Feature": ["Related content"], "Description": ["Related content", "Blog: Working with time series data in ClickHouse"], "Examples": [], "Category": ["Dates and Times Functions"], "index": 523, "vector_txt": "523:Feature: Related content\nDescription: Related contentBlog: Working with time series data in ClickHouse\nExamples: \nCategory: Dates and Times Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["emptyArrayUInt64"], "Feature": ["emptyArrayUInt64()"], "Description": ["emptyArrayUInt64", "Returns an empty UInt64 array.", "Syntax", "emptyArrayUInt64()", "Arguments", "None.", "Returned value", "An empty array."], "Examples": ["SELECT emptyArrayUInt64();"], "Category": ["Arrays Functions"], "index": 524, "vector_txt": "524:Feature: emptyArrayUInt64()\nDescription: emptyArrayUInt64Returns an empty UInt64 array.SyntaxemptyArrayUInt64()ArgumentsNone.Returned valueAn empty array.\nExamples: SELECT emptyArrayUInt64();\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/ext-dict-functions"], "Title": ["dictGet, dictGetOrDefault, dictGetOrNull"], "Feature": ["dictGet, dictGetOrDefault, dictGetOrNull"], "Description": ["dictGet, dictGetOrDefault, dictGetOrNull", "Retrieves values from a dictionary.", "dictGet('dict_name', attr_names, id_expr)dictGetOrDefault('dict_name', attr_names, id_expr, default_value_expr)dictGetOrNull('dict_name', attr_name, id_expr)", "Arguments", "dict_name \u2014 Name of the dictionary. String literal.attr_names \u2014 Name of the column of the dictionary, String literal, or tuple of column names, Tuple(String literal).id_expr \u2014 Key value. Expression returning dictionary key-type value or Tuple-type value depending on the dictionary configuration.default_value_expr \u2014 Values returned if the dictionary does not contain a row with the id_expr key. Expression or Tuple(Expression), returning the value (or values) in the data types configured for the attr_names attribute.", "Returned value", "If ClickHouse parses the attribute successfully in the attribute\u2019s data type, functions return the value of the dictionary attribute that corresponds to id_expr.If there is no the key, corresponding to id_expr, in the dictionary, then:  - `dictGet` returns the content of the `<null_value>` element specified for the attribute in the dictionary configuration.  - `dictGetOrDefault` returns the value passed as the `default_value_expr` parameter.  - `dictGetOrNull` returns `NULL` in case key was not found in dictionary.", "ClickHouse throws an exception if it cannot parse the value of the attribute or the value does not match the attribute data type.", "Example for simple key dictionary", "Create a text file ext-dict-test.csv containing the following:", "1,12,2", "The first column is id, the second column is c1.", "Configure the dictionary:", "<clickhouse>    <dictionary>        <name>ext-dict-test</name>        <source>            <file>                <path>/path-to/ext-dict-test.csv</path>                <format>CSV</format>            </file>        </source>        <layout>            <flat />        </layout>        <structure>            <id>                <name>id</name>            </id>            <attribute>                <name>c1</name>                <type>UInt32</type>                <null_value></null_value>            </attribute>        </structure>        <lifetime>0</lifetime>    </dictionary></clickhouse>", "Perform the query:", "SELECT    dictGetOrDefault('ext-dict-test', 'c1', number + 1, toUInt32(number * 10)) AS val,    toTypeName(val) AS typeFROM system.numbersLIMIT 3;", "\u250c\u2500val\u2500\u252c\u2500type\u2500\u2500\u2500\u2510\u2502   1 \u2502 UInt32 \u2502\u2502   2 \u2502 UInt32 \u2502\u2502  20 \u2502 UInt32 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "Example for complex key dictionary", "Create a text file ext-dict-mult.csv containing the following:", "1,1,'1'2,2,'2'3,3,'3'", "The first column is id, the second is c1, the third is c2.", "Configure the dictionary:", "<clickhouse>    <dictionary>        <name>ext-dict-mult</name>        <source>            <file>                <path>/path-to/ext-dict-mult.csv</path>                <format>CSV</format>            </file>        </source>        <layout>            <flat />        </layout>        <structure>            <id>                <name>id</name>            </id>            <attribute>                <name>c1</name>                <type>UInt32</type>                <null_value></null_value>            </attribute>            <attribute>                <name>c2</name>                <type>String</type>                <null_value></null_value>            </attribute>        </structure>        <lifetime>0</lifetime>    </dictionary></clickhouse>", "Perform the query:", "SELECT    dictGet('ext-dict-mult', ('c1','c2'), number + 1) AS val,    toTypeName(val) AS typeFROM system.numbersLIMIT 3;", "\u250c\u2500val\u2500\u2500\u2500\u2500\u2500\u252c\u2500type\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 (1,'1') \u2502 Tuple(UInt8, String)  \u2502\u2502 (2,'2') \u2502 Tuple(UInt8, String)  \u2502\u2502 (3,'3') \u2502 Tuple(UInt8, String)  \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "Example for range key dictionary", "Input table:", "CREATE TABLE range_key_dictionary_source_table(    key UInt64,    start_date Date,    end_date Date,    value String,    value_nullable Nullable(String))ENGINE = TinyLog();INSERT INTO range_key_dictionary_source_table VALUES(1, toDate('2019-05-20'), toDate('2019-05-20'), 'First', 'First');INSERT INTO range_key_dictionary_source_table VALUES(2, toDate('2019-05-20'), toDate('2019-05-20'), 'Second', NULL);INSERT INTO range_key_dictionary_source_table VALUES(3, toDate('2019-05-20'), toDate('2019-05-20'), 'Third', 'Third');", "Create the dictionary:", "CREATE DICTIONARY range_key_dictionary(    key UInt64,    start_date Date,    end_date Date,    value String,    value_nullable Nullable(String))PRIMARY KEY keySOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() TABLE 'range_key_dictionary_source_table'))LIFETIME(MIN 1 MAX 1000)LAYOUT(RANGE_HASHED())RANGE(MIN start_date MAX end_date);", "Perform the query:", "SELECT    (number, toDate('2019-05-20')),    dictHas('range_key_dictionary', number, toDate('2019-05-20')),    dictGetOrNull('range_key_dictionary', 'value', number, toDate('2019-05-20')),    dictGetOrNull('range_key_dictionary', 'value_nullable', number, toDate('2019-05-20')),    dictGetOrNull('range_key_dictionary', ('value', 'value_nullable'), number, toDate('2019-05-20'))FROM system.numbers LIMIT 5 FORMAT TabSeparated;", "Result:", "(0,'2019-05-20')        0       \\N      \\N      (NULL,NULL)(1,'2019-05-20')        1       First   First   ('First','First')(2,'2019-05-20')        1       Second  \\N      ('Second',NULL)(3,'2019-05-20')        1       Third   Third   ('Third','Third')(4,'2019-05-20')        0       \\N      \\N      (NULL,NULL)", "See Also", "Dictionaries"], "Examples": ["dictGet('dict_name', attr_names, id_expr)dictGetOrDefault('dict_name', attr_names, id_expr, default_value_expr)dictGetOrNull('dict_name', attr_name, id_expr)", "SELECT    dictGetOrDefault('ext-dict-test', 'c1', number + 1, toUInt32(number * 10)) AS val,    toTypeName(val) AS typeFROM system.numbersLIMIT 3;", "SELECT    dictGet('ext-dict-mult', ('c1','c2'), number + 1) AS val,    toTypeName(val) AS typeFROM system.numbersLIMIT 3;", "CREATE TABLE range_key_dictionary_source_table(    key UInt64,    start_date Date,    end_date Date,    value String,    value_nullable Nullable(String))ENGINE = TinyLog();INSERT INTO range_key_dictionary_source_table VALUES(1, toDate('2019-05-20'), toDate('2019-05-20'), 'First', 'First');INSERT INTO range_key_dictionary_source_table VALUES(2, toDate('2019-05-20'), toDate('2019-05-20'), 'Second', NULL);INSERT INTO range_key_dictionary_source_table VALUES(3, toDate('2019-05-20'), toDate('2019-05-20'), 'Third', 'Third');", "CREATE DICTIONARY range_key_dictionary(    key UInt64,    start_date Date,    end_date Date,    value String,    value_nullable Nullable(String))PRIMARY KEY keySOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() TABLE 'range_key_dictionary_source_table'))LIFETIME(MIN 1 MAX 1000)LAYOUT(RANGE_HASHED())RANGE(MIN start_date MAX end_date);", "SELECT    (number, toDate('2019-05-20')),    dictHas('range_key_dictionary', number, toDate('2019-05-20')),    dictGetOrNull('range_key_dictionary', 'value', number, toDate('2019-05-20')),    dictGetOrNull('range_key_dictionary', 'value_nullable', number, toDate('2019-05-20')),    dictGetOrNull('range_key_dictionary', ('value', 'value_nullable'), number, toDate('2019-05-20'))FROM system.numbers LIMIT 5 FORMAT TabSeparated;"], "Category": ["Dictionaries Functions"], "index": 525, "vector_txt": "525:Feature: dictGet, dictGetOrDefault, dictGetOrNull\nDescription: dictGet, dictGetOrDefault, dictGetOrNullRetrieves values from a dictionary.dictGet('dict_name', attr_names, id_expr)dictGetOrDefault('dict_name', attr_names, id_expr, default_value_expr)dictGetOrNull('dict_name', attr_name, id_expr)Argumentsdict_name \u2014 Name of the dictionary. String literal.attr_names \u2014 Name of the column of the dictionary, String literal, or tuple of column names, Tuple(String literal).id_expr \u2014 Key value. Expression returning dictionary key-type value or Tuple-type value depending on the dictionary configuration.default_value_expr \u2014 Values returned if the dictionary does not contain a row with the id_expr key. Expression or Tuple(Expression), returning the value (or values) in the data types configured for the attr_names attribute.Returned valueIf ClickHouse parses the attribute successfully in the attribute\u2019s data type, functions return the value of the dictionary attribute that corresponds to id_expr.If there is no the key, corresponding to id_expr, in the dictionary, then:  - `dictGet` returns the content of the `<null_value>` element specified for the attribute in the dictionary configuration.  - `dictGetOrDefault` returns the value passed as the `default_value_expr` parameter.  - `dictGetOrNull` returns `NULL` in case key was not found in dictionary.ClickHouse throws an exception if it cannot parse the value of the attribute or the value does not match the attribute data type.Example for simple key dictionaryCreate a text file ext-dict-test.csv containing the following:1,12,2The first column is id, the second column is c1.Configure the dictionary:<clickhouse>    <dictionary>        <name>ext-dict-test</name>        <source>            <file>                <path>/path-to/ext-dict-test.csv</path>                <format>CSV</format>            </file>        </source>        <layout>            <flat />        </layout>        <structure>            <id>                <name>id</name>            </id>            <attribute>                <name>c1</name>                <type>UInt32</type>                <null_value></null_value>            </attribute>        </structure>        <lifetime>0</lifetime>    </dictionary></clickhouse>Perform the query:SELECT    dictGetOrDefault('ext-dict-test', 'c1', number + 1, toUInt32(number * 10)) AS val,    toTypeName(val) AS typeFROM system.numbersLIMIT 3;\u250c\u2500val\u2500\u252c\u2500type\u2500\u2500\u2500\u2510\u2502   1 \u2502 UInt32 \u2502\u2502   2 \u2502 UInt32 \u2502\u2502  20 \u2502 UInt32 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518Example for complex key dictionaryCreate a text file ext-dict-mult.csv containing the following:1,1,'1'2,2,'2'3,3,'3'The first column is id, the second is c1, the third is c2.Configure the dictionary:<clickhouse>    <dictionary>        <name>ext-dict-mult</name>        <source>            <file>                <path>/path-to/ext-dict-mult.csv</path>                <format>CSV</format>            </file>        </source>        <layout>            <flat />        </layout>        <structure>            <id>                <name>id</name>            </id>            <attribute>                <name>c1</name>                <type>UInt32</type>                <null_value></null_value>            </attribute>            <attribute>                <name>c2</name>                <type>String</type>                <null_value></null_value>            </attribute>        </structure>        <lifetime>0</lifetime>    </dictionary></clickhouse>Perform the query:SELECT    dictGet('ext-dict-mult', ('c1','c2'), number + 1) AS val,    toTypeName(val) AS typeFROM system.numbersLIMIT 3;\u250c\u2500val\u2500\u2500\u2500\u2500\u2500\u252c\u2500type\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 (1,'1') \u2502 Tuple(UInt8, String)  \u2502\u2502 (2,'2') \u2502 Tuple(UInt8, String)  \u2502\u2502 (3,'3') \u2502 Tuple(UInt8, String)  \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518Example for range key dictionaryInput table:CREATE TABLE range_key_dictionary_source_table(    key UInt64,    start_date Date,    end_date Date,    value String,    value_nullable Nullable(String))ENGINE = TinyLog();INSERT INTO range_key_dictionary_source_table VALUES(1, toDate('2019-05-20'), toDate('2019-05-20'), 'First', 'First');INSERT INTO range_key_dictionary_source_table VALUES(2, toDate('2019-05-20'), toDate('2019-05-20'), 'Second', NULL);INSERT INTO range_key_dictionary_source_table VALUES(3, toDate('2019-05-20'), toDate('2019-05-20'), 'Third', 'Third');Create the dictionary:CREATE DICTIONARY range_key_dictionary(    key UInt64,    start_date Date,    end_date Date,    value String,    value_nullable Nullable(String))PRIMARY KEY keySOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() TABLE 'range_key_dictionary_source_table'))LIFETIME(MIN 1 MAX 1000)LAYOUT(RANGE_HASHED())RANGE(MIN start_date MAX end_date);Perform the query:SELECT    (number, toDate('2019-05-20')),    dictHas('range_key_dictionary', number, toDate('2019-05-20')),    dictGetOrNull('range_key_dictionary', 'value', number, toDate('2019-05-20')),    dictGetOrNull('range_key_dictionary', 'value_nullable', number, toDate('2019-05-20')),    dictGetOrNull('range_key_dictionary', ('value', 'value_nullable'), number, toDate('2019-05-20'))FROM system.numbers LIMIT 5 FORMAT TabSeparated;Result:(0,'2019-05-20')        0       \\N      \\N      (NULL,NULL)(1,'2019-05-20')        1       First   First   ('First','First')(2,'2019-05-20')        1       Second  \\N      ('Second',NULL)(3,'2019-05-20')        1       Third   Third   ('Third','Third')(4,'2019-05-20')        0       \\N      \\N      (NULL,NULL)See AlsoDictionaries\nExamples: dictGet('dict_name', attr_names, id_expr)dictGetOrDefault('dict_name', attr_names, id_expr, default_value_expr)dictGetOrNull('dict_name', attr_name, id_expr)SELECT    dictGetOrDefault('ext-dict-test', 'c1', number + 1, toUInt32(number * 10)) AS val,    toTypeName(val) AS typeFROM system.numbersLIMIT 3;SELECT    dictGet('ext-dict-mult', ('c1','c2'), number + 1) AS val,    toTypeName(val) AS typeFROM system.numbersLIMIT 3;CREATE TABLE range_key_dictionary_source_table(    key UInt64,    start_date Date,    end_date Date,    value String,    value_nullable Nullable(String))ENGINE = TinyLog();INSERT INTO range_key_dictionary_source_table VALUES(1, toDate('2019-05-20'), toDate('2019-05-20'), 'First', 'First');INSERT INTO range_key_dictionary_source_table VALUES(2, toDate('2019-05-20'), toDate('2019-05-20'), 'Second', NULL);INSERT INTO range_key_dictionary_source_table VALUES(3, toDate('2019-05-20'), toDate('2019-05-20'), 'Third', 'Third');CREATE DICTIONARY range_key_dictionary(    key UInt64,    start_date Date,    end_date Date,    value String,    value_nullable Nullable(String))PRIMARY KEY keySOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() TABLE 'range_key_dictionary_source_table'))LIFETIME(MIN 1 MAX 1000)LAYOUT(RANGE_HASHED())RANGE(MIN start_date MAX end_date);SELECT    (number, toDate('2019-05-20')),    dictHas('range_key_dictionary', number, toDate('2019-05-20')),    dictGetOrNull('range_key_dictionary', 'value', number, toDate('2019-05-20')),    dictGetOrNull('range_key_dictionary', 'value_nullable', number, toDate('2019-05-20')),    dictGetOrNull('range_key_dictionary', ('value', 'value_nullable'), number, toDate('2019-05-20'))FROM system.numbers LIMIT 5 FORMAT TabSeparated;\nCategory: Dictionaries Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/ext-dict-functions"], "Title": ["dictHas"], "Feature": ["dictHas"], "Description": ["dictHas", "Checks whether a key is present in a dictionary.", "dictHas('dict_name', id_expr)", "Arguments", "dict_name \u2014 Name of the dictionary. String literal.id_expr \u2014 Key value. Expression returning dictionary key-type value or Tuple-type value depending on the dictionary configuration.", "Returned value", "0, if there is no key. UInt8.1, if there is a key. UInt8."], "Examples": ["dictHas('dict_name', id_expr)"], "Category": ["Dictionaries Functions"], "index": 526, "vector_txt": "526:Feature: dictHas\nDescription: dictHasChecks whether a key is present in a dictionary.dictHas('dict_name', id_expr)Argumentsdict_name \u2014 Name of the dictionary. String literal.id_expr \u2014 Key value. Expression returning dictionary key-type value or Tuple-type value depending on the dictionary configuration.Returned value0, if there is no key. UInt8.1, if there is a key. UInt8.\nExamples: dictHas('dict_name', id_expr)\nCategory: Dictionaries Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/ext-dict-functions"], "Title": ["dictGetHierarchy"], "Feature": ["dictGetHierarchy('dict_name', key)"], "Description": ["dictGetHierarchy", "Creates an array, containing all the parents of a key in the hierarchical dictionary.", "Syntax", "dictGetHierarchy('dict_name', key)", "Arguments", "dict_name \u2014 Name of the dictionary. String literal.key \u2014 Key value. Expression returning a UInt64-type value.", "Returned value", "Parents for the key. Array(UInt64)."], "Examples": ["dictGetHierarchy('dict_name', key)"], "Category": ["Dictionaries Functions"], "index": 527, "vector_txt": "527:Feature: dictGetHierarchy('dict_name', key)\nDescription: dictGetHierarchyCreates an array, containing all the parents of a key in the hierarchical dictionary.SyntaxdictGetHierarchy('dict_name', key)Argumentsdict_name \u2014 Name of the dictionary. String literal.key \u2014 Key value. Expression returning a UInt64-type value.Returned valueParents for the key. Array(UInt64).\nExamples: dictGetHierarchy('dict_name', key)\nCategory: Dictionaries Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/ext-dict-functions"], "Title": ["dictIsIn"], "Feature": ["dictIsIn"], "Description": ["dictIsIn", "Checks the ancestor of a key through the whole hierarchical chain in the dictionary.", "dictIsIn('dict_name', child_id_expr, ancestor_id_expr)", "Arguments", "dict_name \u2014 Name of the dictionary. String literal.child_id_expr \u2014 Key to be checked. Expression returning a UInt64-type value.ancestor_id_expr \u2014 Alleged ancestor of the child_id_expr key. Expression returning a UInt64-type value.", "Returned value", "0, if child_id_expr is not a child of ancestor_id_expr. UInt8.1, if child_id_expr is a child of ancestor_id_expr or if child_id_expr is an ancestor_id_expr. UInt8."], "Examples": ["dictIsIn('dict_name', child_id_expr, ancestor_id_expr)"], "Category": ["Dictionaries Functions"], "index": 528, "vector_txt": "528:Feature: dictIsIn\nDescription: dictIsInChecks the ancestor of a key through the whole hierarchical chain in the dictionary.dictIsIn('dict_name', child_id_expr, ancestor_id_expr)Argumentsdict_name \u2014 Name of the dictionary. String literal.child_id_expr \u2014 Key to be checked. Expression returning a UInt64-type value.ancestor_id_expr \u2014 Alleged ancestor of the child_id_expr key. Expression returning a UInt64-type value.Returned value0, if child_id_expr is not a child of ancestor_id_expr. UInt8.1, if child_id_expr is a child of ancestor_id_expr or if child_id_expr is an ancestor_id_expr. UInt8.\nExamples: dictIsIn('dict_name', child_id_expr, ancestor_id_expr)\nCategory: Dictionaries Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/ext-dict-functions"], "Title": ["dictGetChildren"], "Feature": ["dictGetChildren(dict_name, key)"], "Description": ["dictGetChildren", "Returns first-level children as an array of indexes. It is the inverse transformation for dictGetHierarchy.", "Syntax", "dictGetChildren(dict_name, key)", "Arguments", "dict_name \u2014 Name of the dictionary. String literal.key \u2014 Key value. Expression returning a UInt64-type value.", "Returned values", "First-level descendants for the key. Array(UInt64)."], "Examples": ["SELECT dictGetChildren('hierarchy_flat_dictionary', number) FROM system.numbers LIMIT 4;"], "Category": ["Dictionaries Functions"], "index": 529, "vector_txt": "529:Feature: dictGetChildren(dict_name, key)\nDescription: dictGetChildrenReturns first-level children as an array of indexes. It is the inverse transformation for dictGetHierarchy.SyntaxdictGetChildren(dict_name, key)Argumentsdict_name \u2014 Name of the dictionary. String literal.key \u2014 Key value. Expression returning a UInt64-type value.Returned valuesFirst-level descendants for the key. Array(UInt64).\nExamples: SELECT dictGetChildren('hierarchy_flat_dictionary', number) FROM system.numbers LIMIT 4;\nCategory: Dictionaries Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/ext-dict-functions"], "Title": ["dictGetDescendant"], "Feature": ["dictGetDescendants(dict_name, key, level)"], "Description": ["dictGetDescendant", "Returns all descendants as if dictGetChildren function was applied level times recursively.", "Syntax", "dictGetDescendants(dict_name, key, level)", "Arguments", "dict_name \u2014 Name of the dictionary. String literal.key \u2014 Key value. Expression returning a UInt64-type value.level \u2014 Hierarchy level. If level = 0 returns all descendants to the end. UInt8.", "Returned values", "Descendants for the key. Array(UInt64)."], "Examples": ["SELECT dictGetDescendants('hierarchy_flat_dictionary', number) FROM system.numbers LIMIT 4;", "SELECT dictGetDescendants('hierarchy_flat_dictionary', number, 1) FROM system.numbers LIMIT 4;"], "Category": ["Dictionaries Functions"], "index": 530, "vector_txt": "530:Feature: dictGetDescendants(dict_name, key, level)\nDescription: dictGetDescendantReturns all descendants as if dictGetChildren function was applied level times recursively.SyntaxdictGetDescendants(dict_name, key, level)Argumentsdict_name \u2014 Name of the dictionary. String literal.key \u2014 Key value. Expression returning a UInt64-type value.level \u2014 Hierarchy level. If level = 0 returns all descendants to the end. UInt8.Returned valuesDescendants for the key. Array(UInt64).\nExamples: SELECT dictGetDescendants('hierarchy_flat_dictionary', number) FROM system.numbers LIMIT 4;SELECT dictGetDescendants('hierarchy_flat_dictionary', number, 1) FROM system.numbers LIMIT 4;\nCategory: Dictionaries Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/ext-dict-functions"], "Title": ["dictGetAll"], "Feature": ["dictGetAll('dict_name', attr_names, id_expr[, limit])"], "Description": ["dictGetAll", "Retrieves the attribute values of all nodes that matched each key in a regular expression tree dictionary.", "Besides returning values of type Array(T) instead of T, this function behaves similarly to dictGet.", "Syntax", "dictGetAll('dict_name', attr_names, id_expr[, limit])", "Arguments", "dict_name \u2014 Name of the dictionary. String literal.attr_names \u2014 Name of the column of the dictionary, String literal, or tuple of column names, Tuple(String literal).id_expr \u2014 Key value. Expression returning array of dictionary key-type value or Tuple-type value depending on the dictionary configuration.limit - Maximum length for each value array returned. When truncating, child nodes are given precedence over parent nodes, and otherwise the defined list order for the regexp tree dictionary is respected. If unspecified, array length is unlimited.", "Returned value", "If ClickHouse parses the attribute successfully in the attribute\u2019s data type as defined in the dictionary, returns an array of dictionary attribute values that correspond to id_expr for each attribute specified by attr_names.If there is no key corresponding to id_expr in the dictionary, then an empty array is returned.", "ClickHouse throws an exception if it cannot parse the value of the attribute or the value does not match the attribute data type."], "Examples": ["CREATE DICTIONARY regexp_dict(    regexp String,    tag String)PRIMARY KEY(regexp)SOURCE(YAMLRegExpTree(PATH '/var/lib/clickhouse/user_files/regexp_tree.yaml'))LAYOUT(regexp_tree)...", "SELECT dictGetAll('regexp_dict', 'tag', 'foobarbaz');", "SELECT dictGetAll('regexp_dict', 'tag', 'foobarbaz', 2);"], "Category": ["Dictionaries Functions"], "index": 531, "vector_txt": "531:Feature: dictGetAll('dict_name', attr_names, id_expr[, limit])\nDescription: dictGetAllRetrieves the attribute values of all nodes that matched each key in a regular expression tree dictionary.Besides returning values of type Array(T) instead of T, this function behaves similarly to dictGet.SyntaxdictGetAll('dict_name', attr_names, id_expr[, limit])Argumentsdict_name \u2014 Name of the dictionary. String literal.attr_names \u2014 Name of the column of the dictionary, String literal, or tuple of column names, Tuple(String literal).id_expr \u2014 Key value. Expression returning array of dictionary key-type value or Tuple-type value depending on the dictionary configuration.limit - Maximum length for each value array returned. When truncating, child nodes are given precedence over parent nodes, and otherwise the defined list order for the regexp tree dictionary is respected. If unspecified, array length is unlimited.Returned valueIf ClickHouse parses the attribute successfully in the attribute\u2019s data type as defined in the dictionary, returns an array of dictionary attribute values that correspond to id_expr for each attribute specified by attr_names.If there is no key corresponding to id_expr in the dictionary, then an empty array is returned.ClickHouse throws an exception if it cannot parse the value of the attribute or the value does not match the attribute data type.\nExamples: CREATE DICTIONARY regexp_dict(    regexp String,    tag String)PRIMARY KEY(regexp)SOURCE(YAMLRegExpTree(PATH '/var/lib/clickhouse/user_files/regexp_tree.yaml'))LAYOUT(regexp_tree)...SELECT dictGetAll('regexp_dict', 'tag', 'foobarbaz');SELECT dictGetAll('regexp_dict', 'tag', 'foobarbaz', 2);\nCategory: Dictionaries Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/ext-dict-functions"], "Title": ["Other Functions"], "Feature": ["dictGet[Type]('dict_name', 'attr_name', id_expr)dictGet[Type]OrDefault('dict_name', 'attr_name', id_expr, default_value_expr)"], "Description": ["Other Functions", "ClickHouse supports specialized functions that convert dictionary attribute values to a specific data type regardless of the dictionary configuration.", "Functions:", "dictGetInt8, dictGetInt16, dictGetInt32, dictGetInt64dictGetUInt8, dictGetUInt16, dictGetUInt32, dictGetUInt64dictGetFloat32, dictGetFloat64dictGetDatedictGetDateTimedictGetUUIDdictGetStringdictGetIPv4, dictGetIPv6", "All these functions have the OrDefault modification. For example, dictGetDateOrDefault.", "Syntax:", "dictGet[Type]('dict_name', 'attr_name', id_expr)dictGet[Type]OrDefault('dict_name', 'attr_name', id_expr, default_value_expr)", "Arguments", "dict_name \u2014 Name of the dictionary. String literal.attr_name \u2014 Name of the column of the dictionary. String literal.id_expr \u2014 Key value. Expression returning a UInt64 or Tuple-type value depending on the dictionary configuration.default_value_expr \u2014 Value returned if the dictionary does not contain a row with the id_expr key. Expression returning the value in the data type configured for the attr_name attribute.", "Returned value", "If ClickHouse parses the attribute successfully in the attribute\u2019s data type, functions return the value of the dictionary attribute that corresponds to id_expr.If there is no requested id_expr in the dictionary then:  - `dictGet[Type]` returns the content of the `<null_value>` element specified for the attribute in the dictionary configuration.  - `dictGet[Type]OrDefault` returns the value passed as the `default_value_expr` parameter.", "ClickHouse throws an exception if it cannot parse the value of the attribute or the value does not match the attribute data type."], "Examples": ["dictGet[Type]('dict_name', 'attr_name', id_expr)dictGet[Type]OrDefault('dict_name', 'attr_name', id_expr, default_value_expr)"], "Category": ["Dictionaries Functions"], "index": 532, "vector_txt": "532:Feature: dictGet[Type]('dict_name', 'attr_name', id_expr)dictGet[Type]OrDefault('dict_name', 'attr_name', id_expr, default_value_expr)\nDescription: Other FunctionsClickHouse supports specialized functions that convert dictionary attribute values to a specific data type regardless of the dictionary configuration.Functions:dictGetInt8, dictGetInt16, dictGetInt32, dictGetInt64dictGetUInt8, dictGetUInt16, dictGetUInt32, dictGetUInt64dictGetFloat32, dictGetFloat64dictGetDatedictGetDateTimedictGetUUIDdictGetStringdictGetIPv4, dictGetIPv6All these functions have the OrDefault modification. For example, dictGetDateOrDefault.Syntax:dictGet[Type]('dict_name', 'attr_name', id_expr)dictGet[Type]OrDefault('dict_name', 'attr_name', id_expr, default_value_expr)Argumentsdict_name \u2014 Name of the dictionary. String literal.attr_name \u2014 Name of the column of the dictionary. String literal.id_expr \u2014 Key value. Expression returning a UInt64 or Tuple-type value depending on the dictionary configuration.default_value_expr \u2014 Value returned if the dictionary does not contain a row with the id_expr key. Expression returning the value in the data type configured for the attr_name attribute.Returned valueIf ClickHouse parses the attribute successfully in the attribute\u2019s data type, functions return the value of the dictionary attribute that corresponds to id_expr.If there is no requested id_expr in the dictionary then:  - `dictGet[Type]` returns the content of the `<null_value>` element specified for the attribute in the dictionary configuration.  - `dictGet[Type]OrDefault` returns the value passed as the `default_value_expr` parameter.ClickHouse throws an exception if it cannot parse the value of the attribute or the value does not match the attribute data type.\nExamples: dictGet[Type]('dict_name', 'attr_name', id_expr)dictGet[Type]OrDefault('dict_name', 'attr_name', id_expr, default_value_expr)\nCategory: Dictionaries Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/distance-functions"], "Title": ["L1Norm"], "Feature": ["L1Norm(vector)"], "Description": ["L1Norm", "Calculates the sum of absolute values of a vector.", "Syntax", "L1Norm(vector)", "Alias: normL1.", "Arguments", "vector \u2014 Tuple or Array.", "Returned value", "L1-norm or taxicab geometry distance. UInt, Float or Decimal."], "Examples": ["SELECT L1Norm((1, 2));"], "Category": ["Distance Functions"], "index": 533, "vector_txt": "533:Feature: L1Norm(vector)\nDescription: L1NormCalculates the sum of absolute values of a vector.SyntaxL1Norm(vector)Alias: normL1.Argumentsvector \u2014 Tuple or Array.Returned valueL1-norm or taxicab geometry distance. UInt, Float or Decimal.\nExamples: SELECT L1Norm((1, 2));\nCategory: Distance Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/distance-functions"], "Title": ["L2Norm"], "Feature": ["L2Norm(vector)"], "Description": ["L2Norm", "Calculates the square root of the sum of the squares of the vector values.", "Syntax", "L2Norm(vector)", "Alias: normL2.", "Arguments", "vector \u2014 Tuple or Array.", "Returned value", "L2-norm or Euclidean distance. Float."], "Examples": ["SELECT L2Norm((1, 2));"], "Category": ["Distance Functions"], "index": 534, "vector_txt": "534:Feature: L2Norm(vector)\nDescription: L2NormCalculates the square root of the sum of the squares of the vector values.SyntaxL2Norm(vector)Alias: normL2.Argumentsvector \u2014 Tuple or Array.Returned valueL2-norm or Euclidean distance. Float.\nExamples: SELECT L2Norm((1, 2));\nCategory: Distance Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["emptyArrayInt8"], "Feature": ["emptyArrayInt8()"], "Description": ["emptyArrayInt8", "Returns an empty Int8 array.", "Syntax", "emptyArrayInt8()", "Arguments", "None.", "Returned value", "An empty array."], "Examples": ["SELECT emptyArrayInt8();"], "Category": ["Arrays Functions"], "index": 535, "vector_txt": "535:Feature: emptyArrayInt8()\nDescription: emptyArrayInt8Returns an empty Int8 array.SyntaxemptyArrayInt8()ArgumentsNone.Returned valueAn empty array.\nExamples: SELECT emptyArrayInt8();\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/arithmetic-functions"], "Title": ["multiply"], "Feature": ["multiply(a, b)"], "Description": ["multiply", "Calculates the product of two values a and b.", "Syntax", "multiply(a, b)", "Alias: a * b (operator)"], "Examples": ["multiply(a, b)"], "Category": ["Arithmetic Functions"], "index": 536, "vector_txt": "536:Feature: multiply(a, b)\nDescription: multiplyCalculates the product of two values a and b.Syntaxmultiply(a, b)Alias: a * b (operator)\nExamples: multiply(a, b)\nCategory: Arithmetic Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/distance-functions"], "Title": ["L2SquaredNorm"], "Feature": ["L2SquaredNorm(vector)"], "Description": ["L2SquaredNorm", "Calculates the square root of the sum of the squares of the vector values (the L2Norm) squared.", "Syntax", "L2SquaredNorm(vector)", "Alias: normL2Squared.", "*Arguments", "vector \u2014 Tuple or Array.", "Returned value", "L2-norm squared. Float."], "Examples": ["SELECT L2SquaredNorm((1, 2));"], "Category": ["Distance Functions"], "index": 537, "vector_txt": "537:Feature: L2SquaredNorm(vector)\nDescription: L2SquaredNormCalculates the square root of the sum of the squares of the vector values (the L2Norm) squared.SyntaxL2SquaredNorm(vector)Alias: normL2Squared.*Argumentsvector \u2014 Tuple or Array.Returned valueL2-norm squared. Float.\nExamples: SELECT L2SquaredNorm((1, 2));\nCategory: Distance Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/distance-functions"], "Title": ["LinfNorm"], "Feature": ["LinfNorm(vector)"], "Description": ["LinfNorm", "Calculates the maximum of absolute values of a vector.", "Syntax", "LinfNorm(vector)", "Alias: normLinf.", "Arguments", "vector \u2014 Tuple or Array.", "Returned value", "Linf-norm or the maximum absolute value. Float."], "Examples": ["SELECT LinfNorm((1, -2));"], "Category": ["Distance Functions"], "index": 538, "vector_txt": "538:Feature: LinfNorm(vector)\nDescription: LinfNormCalculates the maximum of absolute values of a vector.SyntaxLinfNorm(vector)Alias: normLinf.Argumentsvector \u2014 Tuple or Array.Returned valueLinf-norm or the maximum absolute value. Float.\nExamples: SELECT LinfNorm((1, -2));\nCategory: Distance Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/distance-functions"], "Title": ["LpNorm"], "Feature": ["LpNorm(vector, p)"], "Description": ["LpNorm", "Calculates the root of p-th power of the sum of the absolute values of a vector in the power of p.", "Syntax", "LpNorm(vector, p)", "Alias: normLp.", "Arguments", "vector \u2014 Tuple or Array.p \u2014 The power. Possible values: real number in [1; inf). UInt or Float.", "Returned value", "Lp-norm. Float."], "Examples": ["SELECT LpNorm((1, -2), 2);"], "Category": ["Distance Functions"], "index": 539, "vector_txt": "539:Feature: LpNorm(vector, p)\nDescription: LpNormCalculates the root of p-th power of the sum of the absolute values of a vector in the power of p.SyntaxLpNorm(vector, p)Alias: normLp.Argumentsvector \u2014 Tuple or Array.p \u2014 The power. Possible values: real number in [1; inf). UInt or Float.Returned valueLp-norm. Float.\nExamples: SELECT LpNorm((1, -2), 2);\nCategory: Distance Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/distance-functions"], "Title": ["L1Distance"], "Feature": ["L1Distance(vector1, vector2)"], "Description": ["L1Distance", "Calculates the distance between two points (the values of the vectors are the coordinates) in L1 space (1-norm (taxicab geometry distance)).", "Syntax", "L1Distance(vector1, vector2)", "Alias: distanceL1.", "Arguments", "vector1 \u2014 First vector. Tuple or Array.vector2 \u2014 Second vector. Tuple or Array.", "Returned value", "1-norm distance. Float."], "Examples": ["SELECT L1Distance((1, 2), (2, 3));"], "Category": ["Distance Functions"], "index": 540, "vector_txt": "540:Feature: L1Distance(vector1, vector2)\nDescription: L1DistanceCalculates the distance between two points (the values of the vectors are the coordinates) in L1 space (1-norm (taxicab geometry distance)).SyntaxL1Distance(vector1, vector2)Alias: distanceL1.Argumentsvector1 \u2014 First vector. Tuple or Array.vector2 \u2014 Second vector. Tuple or Array.Returned value1-norm distance. Float.\nExamples: SELECT L1Distance((1, 2), (2, 3));\nCategory: Distance Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/distance-functions"], "Title": ["L2Distance"], "Feature": ["L2Distance(vector1, vector2)"], "Description": ["L2Distance", "Calculates the distance between two points (the values of the vectors are the coordinates) in Euclidean space (Euclidean distance).", "Syntax", "L2Distance(vector1, vector2)", "Alias: distanceL2.", "Arguments", "vector1 \u2014 First vector. Tuple or Array.vector2 \u2014 Second vector. Tuple or Array.", "Returned value", "2-norm distance. Float."], "Examples": ["SELECT L2Distance((1, 2), (2, 3));"], "Category": ["Distance Functions"], "index": 541, "vector_txt": "541:Feature: L2Distance(vector1, vector2)\nDescription: L2DistanceCalculates the distance between two points (the values of the vectors are the coordinates) in Euclidean space (Euclidean distance).SyntaxL2Distance(vector1, vector2)Alias: distanceL2.Argumentsvector1 \u2014 First vector. Tuple or Array.vector2 \u2014 Second vector. Tuple or Array.Returned value2-norm distance. Float.\nExamples: SELECT L2Distance((1, 2), (2, 3));\nCategory: Distance Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/distance-functions"], "Title": ["L2SquaredDistance"], "Feature": ["L2SquaredDistance(vector1, vector2)"], "Description": ["L2SquaredDistance", "Calculates the sum of the squares of the difference between the corresponding elements of two vectors.", "Syntax", "L2SquaredDistance(vector1, vector2)", "Alias: distanceL2Squared.", "Arguments", "vector1 \u2014 First vector. Tuple or Array.vector2 \u2014 Second vector. Tuple or Array.", "Returned value", "Sum of the squares of the difference between the corresponding elements of two vectors. Float."], "Examples": ["SELECT L2SquaredDistance([1, 2, 3], [0, 0, 0])"], "Category": ["Distance Functions"], "index": 542, "vector_txt": "542:Feature: L2SquaredDistance(vector1, vector2)\nDescription: L2SquaredDistanceCalculates the sum of the squares of the difference between the corresponding elements of two vectors.SyntaxL2SquaredDistance(vector1, vector2)Alias: distanceL2Squared.Argumentsvector1 \u2014 First vector. Tuple or Array.vector2 \u2014 Second vector. Tuple or Array.Returned valueSum of the squares of the difference between the corresponding elements of two vectors. Float.\nExamples: SELECT L2SquaredDistance([1, 2, 3], [0, 0, 0])\nCategory: Distance Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/distance-functions"], "Title": ["LinfDistance"], "Feature": ["LinfDistance(vector1, vector2)"], "Description": ["LinfDistance", "Calculates the distance between two points (the values of the vectors are the coordinates) in L_{inf} space (maximum norm).", "Syntax", "LinfDistance(vector1, vector2)", "Alias: distanceLinf.", "Arguments", "vector1 \u2014 First vector. Tuple or Array.vector1 \u2014 Second vector. Tuple or Array.", "Returned value", "Infinity-norm distance. Float."], "Examples": ["SELECT LinfDistance((1, 2), (2, 3));"], "Category": ["Distance Functions"], "index": 543, "vector_txt": "543:Feature: LinfDistance(vector1, vector2)\nDescription: LinfDistanceCalculates the distance between two points (the values of the vectors are the coordinates) in L_{inf} space (maximum norm).SyntaxLinfDistance(vector1, vector2)Alias: distanceLinf.Argumentsvector1 \u2014 First vector. Tuple or Array.vector1 \u2014 Second vector. Tuple or Array.Returned valueInfinity-norm distance. Float.\nExamples: SELECT LinfDistance((1, 2), (2, 3));\nCategory: Distance Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/distance-functions"], "Title": ["LpDistance"], "Feature": ["LpDistance(vector1, vector2, p)"], "Description": ["LpDistance", "Calculates the distance between two points (the values of the vectors are the coordinates) in Lp space (p-norm distance).", "Syntax", "LpDistance(vector1, vector2, p)", "Alias: distanceLp.", "Arguments", "vector1 \u2014 First vector. Tuple or Array.vector2 \u2014 Second vector. Tuple or Array.p \u2014 The power. Possible values: real number from [1; inf). UInt or Float.", "Returned value", "p-norm distance. Float."], "Examples": ["SELECT LpDistance((1, 2), (2, 3), 3);"], "Category": ["Distance Functions"], "index": 544, "vector_txt": "544:Feature: LpDistance(vector1, vector2, p)\nDescription: LpDistanceCalculates the distance between two points (the values of the vectors are the coordinates) in Lp space (p-norm distance).SyntaxLpDistance(vector1, vector2, p)Alias: distanceLp.Argumentsvector1 \u2014 First vector. Tuple or Array.vector2 \u2014 Second vector. Tuple or Array.p \u2014 The power. Possible values: real number from [1; inf). UInt or Float.Returned valuep-norm distance. Float.\nExamples: SELECT LpDistance((1, 2), (2, 3), 3);\nCategory: Distance Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/distance-functions"], "Title": ["L1Normalize"], "Feature": ["L1Normalize(tuple)"], "Description": ["L1Normalize", "Calculates the unit vector of a given vector (the values of the tuple are the coordinates) in L1 space (taxicab geometry).", "Syntax", "L1Normalize(tuple)", "Alias: normalizeL1.", "Arguments", "tuple \u2014 Tuple.", "Returned value", "Unit vector. Tuple of Float."], "Examples": ["SELECT L1Normalize((1, 2));"], "Category": ["Distance Functions"], "index": 545, "vector_txt": "545:Feature: L1Normalize(tuple)\nDescription: L1NormalizeCalculates the unit vector of a given vector (the values of the tuple are the coordinates) in L1 space (taxicab geometry).SyntaxL1Normalize(tuple)Alias: normalizeL1.Argumentstuple \u2014 Tuple.Returned valueUnit vector. Tuple of Float.\nExamples: SELECT L1Normalize((1, 2));\nCategory: Distance Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/distance-functions"], "Title": ["L2Normalize"], "Feature": ["L2Normalize(tuple)"], "Description": ["L2Normalize", "Calculates the unit vector of a given vector (the values of the tuple are the coordinates) in Euclidean space (using Euclidean distance).", "Syntax", "L2Normalize(tuple)", "Alias: normalizeL1.", "Arguments", "tuple \u2014 Tuple.", "Returned value", "Unit vector. Tuple of Float."], "Examples": ["SELECT L2Normalize((3, 4));"], "Category": ["Distance Functions"], "index": 546, "vector_txt": "546:Feature: L2Normalize(tuple)\nDescription: L2NormalizeCalculates the unit vector of a given vector (the values of the tuple are the coordinates) in Euclidean space (using Euclidean distance).SyntaxL2Normalize(tuple)Alias: normalizeL1.Argumentstuple \u2014 Tuple.Returned valueUnit vector. Tuple of Float.\nExamples: SELECT L2Normalize((3, 4));\nCategory: Distance Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["emptyArrayInt16"], "Feature": ["emptyArrayInt16()"], "Description": ["emptyArrayInt16", "Returns an empty Int16 array.", "Syntax", "emptyArrayInt16()", "Arguments", "None.", "Returned value", "An empty array."], "Examples": ["SELECT emptyArrayInt16();"], "Category": ["Arrays Functions"], "index": 547, "vector_txt": "547:Feature: emptyArrayInt16()\nDescription: emptyArrayInt16Returns an empty Int16 array.SyntaxemptyArrayInt16()ArgumentsNone.Returned valueAn empty array.\nExamples: SELECT emptyArrayInt16();\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/distance-functions"], "Title": ["LinfNormalize"], "Feature": ["LinfNormalize(tuple)"], "Description": ["LinfNormalize", "Calculates the unit vector of a given vector (the values of the tuple are the coordinates) in L_{inf} space (using maximum norm).", "Syntax", "LinfNormalize(tuple)", "Alias: normalizeLinf .", "Arguments", "tuple \u2014 Tuple.", "Returned value", "Unit vector. Tuple of Float."], "Examples": ["SELECT LinfNormalize((3, 4));"], "Category": ["Distance Functions"], "index": 548, "vector_txt": "548:Feature: LinfNormalize(tuple)\nDescription: LinfNormalizeCalculates the unit vector of a given vector (the values of the tuple are the coordinates) in L_{inf} space (using maximum norm).SyntaxLinfNormalize(tuple)Alias: normalizeLinf .Argumentstuple \u2014 Tuple.Returned valueUnit vector. Tuple of Float.\nExamples: SELECT LinfNormalize((3, 4));\nCategory: Distance Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/distance-functions"], "Title": ["LpNormalize"], "Feature": ["LpNormalize(tuple, p)"], "Description": ["LpNormalize", "Calculates the unit vector of a given vector (the values of the tuple are the coordinates) in Lp space (using p-norm).", "Syntax", "LpNormalize(tuple, p)", "Alias: normalizeLp .", "Arguments", "tuple \u2014 Tuple.p \u2014 The power. Possible values: any number from [1;inf). UInt or Float.", "Returned value", "Unit vector. Tuple of Float."], "Examples": ["SELECT LpNormalize((3, 4),5);"], "Category": ["Distance Functions"], "index": 549, "vector_txt": "549:Feature: LpNormalize(tuple, p)\nDescription: LpNormalizeCalculates the unit vector of a given vector (the values of the tuple are the coordinates) in Lp space (using p-norm).SyntaxLpNormalize(tuple, p)Alias: normalizeLp .Argumentstuple \u2014 Tuple.p \u2014 The power. Possible values: any number from [1;inf). UInt or Float.Returned valueUnit vector. Tuple of Float.\nExamples: SELECT LpNormalize((3, 4),5);\nCategory: Distance Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/distance-functions"], "Title": ["cosineDistance"], "Feature": ["cosineDistance(vector1, vector2)"], "Description": ["cosineDistance", "Calculates the cosine distance between two vectors (the values of the tuples are the coordinates). The smaller the returned value is, the more similar are the vectors.", "Syntax", "cosineDistance(vector1, vector2)", "Arguments", "vector1 \u2014 First tuple. Tuple or Array.vector2 \u2014 Second tuple. Tuple or Array.", "Returned value", "Cosine of the angle between two vectors subtracted from one. Float."], "Examples": ["SELECT cosineDistance((1, 2), (2, 3));"], "Category": ["Distance Functions"], "index": 550, "vector_txt": "550:Feature: cosineDistance(vector1, vector2)\nDescription: cosineDistanceCalculates the cosine distance between two vectors (the values of the tuples are the coordinates). The smaller the returned value is, the more similar are the vectors.SyntaxcosineDistance(vector1, vector2)Argumentsvector1 \u2014 First tuple. Tuple or Array.vector2 \u2014 Second tuple. Tuple or Array.Returned valueCosine of the angle between two vectors subtracted from one. Float.\nExamples: SELECT cosineDistance((1, 2), (2, 3));\nCategory: Distance Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/ym-dict-functions"], "Title": ["regionToName"], "Feature": ["regionToName(id\\[, lang\\])"], "Description": ["regionToName", "Accepts a region ID and geobase and returns a string of the name of the region in the corresponding language. If the region with the specified ID does not exist, an empty string is returned.", "Syntax", "regionToName(id\\[, lang\\])", "Parameters", "id \u2014 Region ID from the geobase. UInt32.geobase \u2014 Dictionary key. See Multiple Geobases. String. Optional.", "Returned value", "Name of the region in the corresponding language specified by geobase. String.Otherwise, an empty string. "], "Examples": ["SELECT regionToName(number::UInt32,'en') FROM numbers(0,5);"], "Category": ["Embedded Dictionaries Functions"], "index": 551, "vector_txt": "551:Feature: regionToName(id\\[, lang\\])\nDescription: regionToNameAccepts a region ID and geobase and returns a string of the name of the region in the corresponding language. If the region with the specified ID does not exist, an empty string is returned.SyntaxregionToName(id\\[, lang\\])Parametersid \u2014 Region ID from the geobase. UInt32.geobase \u2014 Dictionary key. See Multiple Geobases. String. Optional.Returned valueName of the region in the corresponding language specified by geobase. String.Otherwise, an empty string. \nExamples: SELECT regionToName(number::UInt32,'en') FROM numbers(0,5);\nCategory: Embedded Dictionaries Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/ym-dict-functions"], "Title": ["regionToCity"], "Feature": ["regionToCity(id [, geobase])"], "Description": ["regionToCity", "Accepts a region ID from the geobase. If this region is a city or part of a city, it returns the region ID for the appropriate city. Otherwise, returns 0.", "Syntax", "regionToCity(id [, geobase])", "Parameters", "id \u2014 Region ID from the geobase. UInt32.geobase \u2014 Dictionary key. See Multiple Geobases. String. Optional.", "Returned value", "Region ID for the appropriate city, if it exists. UInt32.0, if there is none."], "Examples": ["SELECT regionToName(number::UInt32, 'en'), regionToCity(number::UInt32) AS id, regionToName(id, 'en') FROM numbers(13);"], "Category": ["Embedded Dictionaries Functions"], "index": 552, "vector_txt": "552:Feature: regionToCity(id [, geobase])\nDescription: regionToCityAccepts a region ID from the geobase. If this region is a city or part of a city, it returns the region ID for the appropriate city. Otherwise, returns 0.SyntaxregionToCity(id [, geobase])Parametersid \u2014 Region ID from the geobase. UInt32.geobase \u2014 Dictionary key. See Multiple Geobases. String. Optional.Returned valueRegion ID for the appropriate city, if it exists. UInt32.0, if there is none.\nExamples: SELECT regionToName(number::UInt32, 'en'), regionToCity(number::UInt32) AS id, regionToName(id, 'en') FROM numbers(13);\nCategory: Embedded Dictionaries Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/ym-dict-functions"], "Title": ["regionToArea"], "Feature": ["regionToArea(id [, geobase])"], "Description": ["regionToArea", "Converts a region to an area (type 5 in the geobase). In every other way, this function is the same as \u2018regionToCity\u2019.", "Syntax", "regionToArea(id [, geobase])", "Parameters", "id \u2014 Region ID from the geobase. UInt32.geobase \u2014 Dictionary key. See Multiple Geobases. String. Optional.", "Returned value", "Region ID for the appropriate area, if it exists. UInt32.0, if there is none."], "Examples": ["SELECT DISTINCT regionToName(regionToArea(toUInt32(number), 'ua'))FROM system.numbersLIMIT 15"], "Category": ["Embedded Dictionaries Functions"], "index": 553, "vector_txt": "553:Feature: regionToArea(id [, geobase])\nDescription: regionToAreaConverts a region to an area (type 5 in the geobase). In every other way, this function is the same as \u2018regionToCity\u2019.SyntaxregionToArea(id [, geobase])Parametersid \u2014 Region ID from the geobase. UInt32.geobase \u2014 Dictionary key. See Multiple Geobases. String. Optional.Returned valueRegion ID for the appropriate area, if it exists. UInt32.0, if there is none.\nExamples: SELECT DISTINCT regionToName(regionToArea(toUInt32(number), 'ua'))FROM system.numbersLIMIT 15\nCategory: Embedded Dictionaries Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/ym-dict-functions"], "Title": ["regionToDistrict"], "Feature": ["regionToDistrict(id [, geobase])"], "Description": ["regionToDistrict", "Converts a region to a federal district (type 4 in the geobase). In every other way, this function is the same as \u2018regionToCity\u2019.", "Syntax", "regionToDistrict(id [, geobase])", "Parameters", "id \u2014 Region ID from the geobase. UInt32.geobase \u2014 Dictionary key. See Multiple Geobases. String. Optional.", "Returned value", "Region ID for the appropriate city, if it exists. UInt32.0, if there is none."], "Examples": ["SELECT DISTINCT regionToName(regionToDistrict(toUInt32(number), 'ua'))FROM system.numbersLIMIT 15"], "Category": ["Embedded Dictionaries Functions"], "index": 554, "vector_txt": "554:Feature: regionToDistrict(id [, geobase])\nDescription: regionToDistrictConverts a region to a federal district (type 4 in the geobase). In every other way, this function is the same as \u2018regionToCity\u2019.SyntaxregionToDistrict(id [, geobase])Parametersid \u2014 Region ID from the geobase. UInt32.geobase \u2014 Dictionary key. See Multiple Geobases. String. Optional.Returned valueRegion ID for the appropriate city, if it exists. UInt32.0, if there is none.\nExamples: SELECT DISTINCT regionToName(regionToDistrict(toUInt32(number), 'ua'))FROM system.numbersLIMIT 15\nCategory: Embedded Dictionaries Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/ym-dict-functions"], "Title": ["regionToCountry"], "Feature": ["regionToCountry(id [, geobase])"], "Description": ["regionToCountry", "Converts a region to a country (type 3 in the geobase). In every other way, this function is the same as \u2018regionToCity\u2019.", "Syntax", "regionToCountry(id [, geobase])", "Parameters", "id \u2014 Region ID from the geobase. UInt32.geobase \u2014 Dictionary key. See Multiple Geobases. String. Optional.", "Returned value", "Region ID for the appropriate country, if it exists. UInt32.0, if there is none."], "Examples": ["SELECT regionToName(number::UInt32, 'en'), regionToCountry(number::UInt32) AS id, regionToName(id, 'en') FROM numbers(13);"], "Category": ["Embedded Dictionaries Functions"], "index": 555, "vector_txt": "555:Feature: regionToCountry(id [, geobase])\nDescription: regionToCountryConverts a region to a country (type 3 in the geobase). In every other way, this function is the same as \u2018regionToCity\u2019.SyntaxregionToCountry(id [, geobase])Parametersid \u2014 Region ID from the geobase. UInt32.geobase \u2014 Dictionary key. See Multiple Geobases. String. Optional.Returned valueRegion ID for the appropriate country, if it exists. UInt32.0, if there is none.\nExamples: SELECT regionToName(number::UInt32, 'en'), regionToCountry(number::UInt32) AS id, regionToName(id, 'en') FROM numbers(13);\nCategory: Embedded Dictionaries Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/ym-dict-functions"], "Title": ["regionToContinent"], "Feature": ["regionToContinent(id [, geobase])"], "Description": ["regionToContinent", "Converts a region to a continent (type 1 in the geobase). In every other way, this function is the same as \u2018regionToCity\u2019.", "Syntax", "regionToContinent(id [, geobase])", "Parameters", "id \u2014 Region ID from the geobase. UInt32.geobase \u2014 Dictionary key. See Multiple Geobases. String. Optional.", "Returned value", "Region ID for the appropriate continent, if it exists. UInt32.0, if there is none."], "Examples": ["SELECT regionToName(number::UInt32, 'en'), regionToContinent(number::UInt32) AS id, regionToName(id, 'en') FROM numbers(13);"], "Category": ["Embedded Dictionaries Functions"], "index": 556, "vector_txt": "556:Feature: regionToContinent(id [, geobase])\nDescription: regionToContinentConverts a region to a continent (type 1 in the geobase). In every other way, this function is the same as \u2018regionToCity\u2019.SyntaxregionToContinent(id [, geobase])Parametersid \u2014 Region ID from the geobase. UInt32.geobase \u2014 Dictionary key. See Multiple Geobases. String. Optional.Returned valueRegion ID for the appropriate continent, if it exists. UInt32.0, if there is none.\nExamples: SELECT regionToName(number::UInt32, 'en'), regionToContinent(number::UInt32) AS id, regionToName(id, 'en') FROM numbers(13);\nCategory: Embedded Dictionaries Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/ym-dict-functions"], "Title": ["regionToTopContinent"], "Feature": ["regionToTopContinent(id[, geobase])"], "Description": ["regionToTopContinent", "Finds the highest continent in the hierarchy for the region.", "Syntax", "regionToTopContinent(id[, geobase])", "Parameters", "id \u2014 Region ID from the geobase. UInt32.geobase \u2014 Dictionary key. See Multiple Geobases. String. Optional.", "Returned value", "Identifier of the top level continent (the latter when you climb the hierarchy of regions).UInt32.0, if there is none."], "Examples": ["SELECT regionToName(number::UInt32, 'en'), regionToTopContinent(number::UInt32) AS id, regionToName(id, 'en') FROM numbers(13);"], "Category": ["Embedded Dictionaries Functions"], "index": 557, "vector_txt": "557:Feature: regionToTopContinent(id[, geobase])\nDescription: regionToTopContinentFinds the highest continent in the hierarchy for the region.SyntaxregionToTopContinent(id[, geobase])Parametersid \u2014 Region ID from the geobase. UInt32.geobase \u2014 Dictionary key. See Multiple Geobases. String. Optional.Returned valueIdentifier of the top level continent (the latter when you climb the hierarchy of regions).UInt32.0, if there is none.\nExamples: SELECT regionToName(number::UInt32, 'en'), regionToTopContinent(number::UInt32) AS id, regionToName(id, 'en') FROM numbers(13);\nCategory: Embedded Dictionaries Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["emptyArrayInt32"], "Feature": ["emptyArrayInt32()"], "Description": ["emptyArrayInt32", "Returns an empty Int32 array.", "Syntax", "emptyArrayInt32()", "Arguments", "None.", "Returned value", "An empty array."], "Examples": ["SELECT emptyArrayInt32();"], "Category": ["Arrays Functions"], "index": 558, "vector_txt": "558:Feature: emptyArrayInt32()\nDescription: emptyArrayInt32Returns an empty Int32 array.SyntaxemptyArrayInt32()ArgumentsNone.Returned valueAn empty array.\nExamples: SELECT emptyArrayInt32();\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/ym-dict-functions"], "Title": ["regionToPopulation"], "Feature": ["regionToPopulation(id[, geobase])"], "Description": ["regionToPopulation", "Gets the population for a region. The population can be recorded in files with the geobase. See the section \u201cDictionaries\u201d. If the population is not recorded for the region, it returns 0. In the geobase, the population might be recorded for child regions, but not for parent regions.", "Syntax", "regionToPopulation(id[, geobase])", "Parameters", "id \u2014 Region ID from the geobase. UInt32.geobase \u2014 Dictionary key. See Multiple Geobases. String. Optional.", "Returned value", "Population for the region. UInt32.0, if there is none."], "Examples": ["SELECT regionToName(number::UInt32, 'en'), regionToPopulation(number::UInt32) AS id, regionToName(id, 'en') FROM numbers(13);"], "Category": ["Embedded Dictionaries Functions"], "index": 559, "vector_txt": "559:Feature: regionToPopulation(id[, geobase])\nDescription: regionToPopulationGets the population for a region. The population can be recorded in files with the geobase. See the section \u201cDictionaries\u201d. If the population is not recorded for the region, it returns 0. In the geobase, the population might be recorded for child regions, but not for parent regions.SyntaxregionToPopulation(id[, geobase])Parametersid \u2014 Region ID from the geobase. UInt32.geobase \u2014 Dictionary key. See Multiple Geobases. String. Optional.Returned valuePopulation for the region. UInt32.0, if there is none.\nExamples: SELECT regionToName(number::UInt32, 'en'), regionToPopulation(number::UInt32) AS id, regionToName(id, 'en') FROM numbers(13);\nCategory: Embedded Dictionaries Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/ym-dict-functions"], "Title": ["regionIn"], "Feature": ["regionIn(lhs, rhs\\[, geobase\\])"], "Description": ["regionIn", "Checks whether a lhs region belongs to a rhs region. Returns a UInt8 number equal to 1 if it belongs, or 0 if it does not belong.", "Syntax", "regionIn(lhs, rhs\\[, geobase\\])", "Parameters", "lhs \u2014 Lhs region ID from the geobase. UInt32.rhs \u2014 Rhs region ID from the geobase. UInt32.geobase \u2014 Dictionary key. See Multiple Geobases. String. Optional.", "Returned value", "1, if it belongs. UInt8.0, if it doesn't belong.", "Implementation details", "The relationship is reflexive \u2013 any region also belongs to itself."], "Examples": ["SELECT regionToName(n1.number::UInt32, 'en') || (regionIn(n1.number::UInt32, n2.number::UInt32) ? ' is in ' : ' is not in ') || regionToName(n2.number::UInt32, 'en') FROM numbers(1,2) AS n1 CROSS JOIN numbers(1,5) AS n2;"], "Category": ["Embedded Dictionaries Functions"], "index": 560, "vector_txt": "560:Feature: regionIn(lhs, rhs\\[, geobase\\])\nDescription: regionInChecks whether a lhs region belongs to a rhs region. Returns a UInt8 number equal to 1 if it belongs, or 0 if it does not belong.SyntaxregionIn(lhs, rhs\\[, geobase\\])Parameterslhs \u2014 Lhs region ID from the geobase. UInt32.rhs \u2014 Rhs region ID from the geobase. UInt32.geobase \u2014 Dictionary key. See Multiple Geobases. String. Optional.Returned value1, if it belongs. UInt8.0, if it doesn't belong.Implementation detailsThe relationship is reflexive \u2013 any region also belongs to itself.\nExamples: SELECT regionToName(n1.number::UInt32, 'en') || (regionIn(n1.number::UInt32, n2.number::UInt32) ? ' is in ' : ' is not in ') || regionToName(n2.number::UInt32, 'en') FROM numbers(1,2) AS n1 CROSS JOIN numbers(1,5) AS n2;\nCategory: Embedded Dictionaries Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/ym-dict-functions"], "Title": ["regionHierarchy"], "Feature": ["regionHierarchy(id\\[, geobase\\])"], "Description": ["regionHierarchy", "Accepts a UInt32 number \u2013 the region ID from the geobase. Returns an array of region IDs consisting of the passed region and all parents along the chain.", "Syntax", "regionHierarchy(id\\[, geobase\\])", "Parameters", "id \u2014 Region ID from the geobase. UInt32.geobase \u2014 Dictionary key. See Multiple Geobases. String. Optional.", "Returned value", "Array of region IDs consisting of the passed region and all parents along the chain. Array(UInt32)."], "Examples": ["SELECT regionHierarchy(number::UInt32) AS arr, arrayMap(id -> regionToName(id, 'en'), arr) FROM numbers(5);"], "Category": ["Embedded Dictionaries Functions"], "index": 561, "vector_txt": "561:Feature: regionHierarchy(id\\[, geobase\\])\nDescription: regionHierarchyAccepts a UInt32 number \u2013 the region ID from the geobase. Returns an array of region IDs consisting of the passed region and all parents along the chain.SyntaxregionHierarchy(id\\[, geobase\\])Parametersid \u2014 Region ID from the geobase. UInt32.geobase \u2014 Dictionary key. See Multiple Geobases. String. Optional.Returned valueArray of region IDs consisting of the passed region and all parents along the chain. Array(UInt32).\nExamples: SELECT regionHierarchy(number::UInt32) AS arr, arrayMap(id -> regionToName(id, 'en'), arr) FROM numbers(5);\nCategory: Embedded Dictionaries Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/coordinates"], "Title": ["greatCircleDistance"], "Feature": ["greatCircleDistance(lon1Deg, lat1Deg, lon2Deg, lat2Deg)"], "Description": ["greatCircleDistance", "Calculates the distance between two points on the Earth\u2019s surface using the great-circle formula.", "greatCircleDistance(lon1Deg, lat1Deg, lon2Deg, lat2Deg)", "Input parameters", "lon1Deg \u2014 Longitude of the first point in degrees. Range: [-180\u00b0, 180\u00b0].lat1Deg \u2014 Latitude of the first point in degrees. Range: [-90\u00b0, 90\u00b0].lon2Deg \u2014 Longitude of the second point in degrees. Range: [-180\u00b0, 180\u00b0].lat2Deg \u2014 Latitude of the second point in degrees. Range: [-90\u00b0, 90\u00b0].", "Positive values correspond to North latitude and East longitude, and negative values correspond to South latitude and West longitude.", "Returned value", "The distance between two points on the Earth\u2019s surface, in meters.", "Generates an exception when the input parameter values fall outside of the range."], "Examples": ["SELECT greatCircleDistance(55.755831, 37.617673, -55.755831, -37.617673) AS greatCircleDistance"], "Category": ["Geo Functions"], "index": 562, "vector_txt": "562:Feature: greatCircleDistance(lon1Deg, lat1Deg, lon2Deg, lat2Deg)\nDescription: greatCircleDistanceCalculates the distance between two points on the Earth\u2019s surface using the great-circle formula.greatCircleDistance(lon1Deg, lat1Deg, lon2Deg, lat2Deg)Input parameterslon1Deg \u2014 Longitude of the first point in degrees. Range: [-180\u00b0, 180\u00b0].lat1Deg \u2014 Latitude of the first point in degrees. Range: [-90\u00b0, 90\u00b0].lon2Deg \u2014 Longitude of the second point in degrees. Range: [-180\u00b0, 180\u00b0].lat2Deg \u2014 Latitude of the second point in degrees. Range: [-90\u00b0, 90\u00b0].Positive values correspond to North latitude and East longitude, and negative values correspond to South latitude and West longitude.Returned valueThe distance between two points on the Earth\u2019s surface, in meters.Generates an exception when the input parameter values fall outside of the range.\nExamples: SELECT greatCircleDistance(55.755831, 37.617673, -55.755831, -37.617673) AS greatCircleDistance\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/coordinates"], "Title": ["geoDistance"], "Feature": ["geoDistance(lon1Deg, lat1Deg, lon2Deg, lat2Deg)"], "Description": ["geoDistance", "Similar to greatCircleDistance but calculates the distance on WGS-84 ellipsoid instead of sphere. This is more precise approximation of the Earth Geoid.\nThe performance is the same as for greatCircleDistance (no performance drawback). It is recommended to use geoDistance to calculate the distances on Earth.", "Technical note: for close enough points we calculate the distance using planar approximation with the metric on the tangent plane at the midpoint of the coordinates.", "geoDistance(lon1Deg, lat1Deg, lon2Deg, lat2Deg)", "Input parameters", "lon1Deg \u2014 Longitude of the first point in degrees. Range: [-180\u00b0, 180\u00b0].lat1Deg \u2014 Latitude of the first point in degrees. Range: [-90\u00b0, 90\u00b0].lon2Deg \u2014 Longitude of the second point in degrees. Range: [-180\u00b0, 180\u00b0].lat2Deg \u2014 Latitude of the second point in degrees. Range: [-90\u00b0, 90\u00b0].", "Positive values correspond to North latitude and East longitude, and negative values correspond to South latitude and West longitude.", "Returned value", "The distance between two points on the Earth\u2019s surface, in meters.", "Generates an exception when the input parameter values fall outside of the range."], "Examples": ["SELECT geoDistance(38.8976, -77.0366, 39.9496, -75.1503) AS geoDistance"], "Category": ["Geo Functions"], "index": 563, "vector_txt": "563:Feature: geoDistance(lon1Deg, lat1Deg, lon2Deg, lat2Deg)\nDescription: geoDistanceSimilar to greatCircleDistance but calculates the distance on WGS-84 ellipsoid instead of sphere. This is more precise approximation of the Earth Geoid.\nThe performance is the same as for greatCircleDistance (no performance drawback). It is recommended to use geoDistance to calculate the distances on Earth.Technical note: for close enough points we calculate the distance using planar approximation with the metric on the tangent plane at the midpoint of the coordinates.geoDistance(lon1Deg, lat1Deg, lon2Deg, lat2Deg)Input parameterslon1Deg \u2014 Longitude of the first point in degrees. Range: [-180\u00b0, 180\u00b0].lat1Deg \u2014 Latitude of the first point in degrees. Range: [-90\u00b0, 90\u00b0].lon2Deg \u2014 Longitude of the second point in degrees. Range: [-180\u00b0, 180\u00b0].lat2Deg \u2014 Latitude of the second point in degrees. Range: [-90\u00b0, 90\u00b0].Positive values correspond to North latitude and East longitude, and negative values correspond to South latitude and West longitude.Returned valueThe distance between two points on the Earth\u2019s surface, in meters.Generates an exception when the input parameter values fall outside of the range.\nExamples: SELECT geoDistance(38.8976, -77.0366, 39.9496, -75.1503) AS geoDistance\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/coordinates"], "Title": ["greatCircleAngle"], "Feature": ["greatCircleAngle(lon1Deg, lat1Deg, lon2Deg, lat2Deg)"], "Description": ["greatCircleAngle", "Calculates the central angle between two points on the Earth\u2019s surface using the great-circle formula.", "greatCircleAngle(lon1Deg, lat1Deg, lon2Deg, lat2Deg)", "Input parameters", "lon1Deg \u2014 Longitude of the first point in degrees.lat1Deg \u2014 Latitude of the first point in degrees.lon2Deg \u2014 Longitude of the second point in degrees.lat2Deg \u2014 Latitude of the second point in degrees.", "Returned value", "The central angle between two points in degrees."], "Examples": ["SELECT greatCircleAngle(0, 0, 45, 0) AS arc"], "Category": ["Geo Functions"], "index": 564, "vector_txt": "564:Feature: greatCircleAngle(lon1Deg, lat1Deg, lon2Deg, lat2Deg)\nDescription: greatCircleAngleCalculates the central angle between two points on the Earth\u2019s surface using the great-circle formula.greatCircleAngle(lon1Deg, lat1Deg, lon2Deg, lat2Deg)Input parameterslon1Deg \u2014 Longitude of the first point in degrees.lat1Deg \u2014 Latitude of the first point in degrees.lon2Deg \u2014 Longitude of the second point in degrees.lat2Deg \u2014 Latitude of the second point in degrees.Returned valueThe central angle between two points in degrees.\nExamples: SELECT greatCircleAngle(0, 0, 45, 0) AS arc\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/coordinates"], "Title": ["pointInEllipses"], "Feature": ["pointInEllipses(x, y, x\u2080, y\u2080, a\u2080, b\u2080,...,x\u2099, y\u2099, a\u2099, b\u2099)"], "Description": ["pointInEllipses", "Checks whether the point belongs to at least one of the ellipses.\nCoordinates are geometric in the Cartesian coordinate system.", "pointInEllipses(x, y, x\u2080, y\u2080, a\u2080, b\u2080,...,x\u2099, y\u2099, a\u2099, b\u2099)", "Input parameters", "x, y \u2014 Coordinates of a point on the plane.x\u1d62, y\u1d62 \u2014 Coordinates of the center of the i-th ellipsis.a\u1d62, b\u1d62 \u2014 Axes of the i-th ellipsis in units of x, y coordinates.", "The input parameters must be 2+4\u22c5n, where n is the number of ellipses.", "Returned values", "1 if the point is inside at least one of the ellipses; 0if it is not."], "Examples": ["SELECT pointInEllipses(10., 10., 10., 9.1, 1., 0.9999)"], "Category": ["Geo Functions"], "index": 565, "vector_txt": "565:Feature: pointInEllipses(x, y, x\u2080, y\u2080, a\u2080, b\u2080,...,x\u2099, y\u2099, a\u2099, b\u2099)\nDescription: pointInEllipsesChecks whether the point belongs to at least one of the ellipses.\nCoordinates are geometric in the Cartesian coordinate system.pointInEllipses(x, y, x\u2080, y\u2080, a\u2080, b\u2080,...,x\u2099, y\u2099, a\u2099, b\u2099)Input parametersx, y \u2014 Coordinates of a point on the plane.x\u1d62, y\u1d62 \u2014 Coordinates of the center of the i-th ellipsis.a\u1d62, b\u1d62 \u2014 Axes of the i-th ellipsis in units of x, y coordinates.The input parameters must be 2+4\u22c5n, where n is the number of ellipses.Returned values1 if the point is inside at least one of the ellipses; 0if it is not.\nExamples: SELECT pointInEllipses(10., 10., 10., 9.1, 1., 0.9999)\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/coordinates"], "Title": ["pointInPolygon"], "Feature": ["pointInPolygon((x, y), [(a, b), (c, d) ...], ...)"], "Description": ["pointInPolygon", "Checks whether the point belongs to the polygon on the plane.", "pointInPolygon((x, y), [(a, b), (c, d) ...], ...)", "Input values", "(x, y) \u2014 Coordinates of a point on the plane. Data type \u2014 Tuple \u2014 A tuple of two numbers.[(a, b), (c, d) ...] \u2014 Polygon vertices. Data type \u2014 Array. Each vertex is represented by a pair of coordinates (a, b). Vertices should be specified in a clockwise or counterclockwise order. The minimum number of vertices is 3. The polygon must be constant.The function also supports polygons with holes (cut out sections). In this case, add polygons that define the cut out sections using additional arguments of the function. The function does not support non-simply-connected polygons.", "Returned values", "1 if the point is inside the polygon, 0 if it is not.\nIf the point is on the polygon boundary, the function may return either 0 or 1."], "Examples": ["SELECT pointInPolygon((3., 3.), [(6, 0), (8, 4), (5, 8), (0, 2)]) AS res"], "Category": ["Geo Functions"], "index": 566, "vector_txt": "566:Feature: pointInPolygon((x, y), [(a, b), (c, d) ...], ...)\nDescription: pointInPolygonChecks whether the point belongs to the polygon on the plane.pointInPolygon((x, y), [(a, b), (c, d) ...], ...)Input values(x, y) \u2014 Coordinates of a point on the plane. Data type \u2014 Tuple \u2014 A tuple of two numbers.[(a, b), (c, d) ...] \u2014 Polygon vertices. Data type \u2014 Array. Each vertex is represented by a pair of coordinates (a, b). Vertices should be specified in a clockwise or counterclockwise order. The minimum number of vertices is 3. The polygon must be constant.The function also supports polygons with holes (cut out sections). In this case, add polygons that define the cut out sections using additional arguments of the function. The function does not support non-simply-connected polygons.Returned values1 if the point is inside the polygon, 0 if it is not.\nIf the point is on the polygon boundary, the function may return either 0 or 1.\nExamples: SELECT pointInPolygon((3., 3.), [(6, 0), (8, 4), (5, 8), (0, 2)]) AS res\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/geohash"], "Title": ["Geohash"], "Feature": ["Geohash"], "Description": ["Geohash", "Geohash is the geocode system, which subdivides Earth\u2019s surface into buckets of grid shape and encodes each cell into a short string of letters and digits. It is a hierarchical data structure, so the longer the geohash string is, the more precise the geographic location will be.", "If you need to manually convert geographic coordinates to geohash strings, you can use geohash.org."], "Examples": [], "Category": ["Geo Functions"], "index": 567, "vector_txt": "567:Feature: Geohash\nDescription: GeohashGeohash is the geocode system, which subdivides Earth\u2019s surface into buckets of grid shape and encodes each cell into a short string of letters and digits. It is a hierarchical data structure, so the longer the geohash string is, the more precise the geographic location will be.If you need to manually convert geographic coordinates to geohash strings, you can use geohash.org.\nExamples: \nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/geohash"], "Title": ["geohashEncode"], "Feature": ["geohashEncode(longitude, latitude, [precision])"], "Description": ["geohashEncode", "Encodes latitude and longitude as a geohash-string.", "Syntax", "geohashEncode(longitude, latitude, [precision])", "Input values", "longitude \u2014 Longitude part of the coordinate you want to encode. Floating in range[-180\u00b0, 180\u00b0]. Float. latitude \u2014 Latitude part of the coordinate you want to encode. Floating in range [-90\u00b0, 90\u00b0]. Float.precision (optional) \u2014 Length of the resulting encoded string. Defaults to 12. Integer in the range [1, 12]. Int8.", "NoteAll coordinate parameters must be of the same type: either Float32 or Float64.For the precision parameter, any value less than 1 or greater than 12 is silently converted to 12.", "Returned values", "Alphanumeric string of the encoded coordinate (modified version of the base32-encoding alphabet is used). String."], "Examples": ["SELECT geohashEncode(-5.60302734375, 42.593994140625, 0) AS res;"], "Category": ["Geo Functions"], "index": 568, "vector_txt": "568:Feature: geohashEncode(longitude, latitude, [precision])\nDescription: geohashEncodeEncodes latitude and longitude as a geohash-string.SyntaxgeohashEncode(longitude, latitude, [precision])Input valueslongitude \u2014 Longitude part of the coordinate you want to encode. Floating in range[-180\u00b0, 180\u00b0]. Float. latitude \u2014 Latitude part of the coordinate you want to encode. Floating in range [-90\u00b0, 90\u00b0]. Float.precision (optional) \u2014 Length of the resulting encoded string. Defaults to 12. Integer in the range [1, 12]. Int8.NoteAll coordinate parameters must be of the same type: either Float32 or Float64.For the precision parameter, any value less than 1 or greater than 12 is silently converted to 12.Returned valuesAlphanumeric string of the encoded coordinate (modified version of the base32-encoding alphabet is used). String.\nExamples: SELECT geohashEncode(-5.60302734375, 42.593994140625, 0) AS res;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["emptyArrayInt64"], "Feature": ["emptyArrayInt64()"], "Description": ["emptyArrayInt64", "Returns an empty Int64 array.", "Syntax", "emptyArrayInt64()", "Arguments", "None.", "Returned value", "An empty array."], "Examples": ["SELECT emptyArrayInt64();"], "Category": ["Arrays Functions"], "index": 569, "vector_txt": "569:Feature: emptyArrayInt64()\nDescription: emptyArrayInt64Returns an empty Int64 array.SyntaxemptyArrayInt64()ArgumentsNone.Returned valueAn empty array.\nExamples: SELECT emptyArrayInt64();\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/geohash"], "Title": ["geohashDecode"], "Feature": ["geohashDecode(hash_str)"], "Description": ["geohashDecode", "Decodes any geohash-encoded string into longitude and latitude.", "Syntax", "geohashDecode(hash_str)", "Input values", "hash_str \u2014 Geohash-encoded string.", "Returned values", "Tuple (longitude, latitude) of Float64 values of longitude and latitude. Tuple(Float64)"], "Examples": ["SELECT geohashDecode('ezs42') AS res;"], "Category": ["Geo Functions"], "index": 570, "vector_txt": "570:Feature: geohashDecode(hash_str)\nDescription: geohashDecodeDecodes any geohash-encoded string into longitude and latitude.SyntaxgeohashDecode(hash_str)Input valueshash_str \u2014 Geohash-encoded string.Returned valuesTuple (longitude, latitude) of Float64 values of longitude and latitude. Tuple(Float64)\nExamples: SELECT geohashDecode('ezs42') AS res;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/geohash"], "Title": ["geohashesInBox"], "Feature": ["geohashesInBox(longitude_min, latitude_min, longitude_max, latitude_max, precision)"], "Description": ["geohashesInBox", "Returns an array of geohash-encoded strings of given precision that fall inside and intersect boundaries of given box, basically a 2D grid flattened into array.", "Syntax", "geohashesInBox(longitude_min, latitude_min, longitude_max, latitude_max, precision)", "Arguments", "longitude_min \u2014 Minimum longitude. Range: [-180\u00b0, 180\u00b0]. Float.latitude_min \u2014 Minimum latitude. Range: [-90\u00b0, 90\u00b0]. Float.longitude_max \u2014 Maximum longitude. Range: [-180\u00b0, 180\u00b0]. Float.latitude_max \u2014 Maximum latitude. Range: [-90\u00b0, 90\u00b0]. Float.precision \u2014 Geohash precision. Range: [1, 12]. UInt8.", "NoteAll coordinate parameters must be of the same type: either Float32 or Float64.", "Returned values", "Array of precision-long strings of geohash-boxes covering provided area, you should not rely on order of items. Array(String).[] - Empty array if minimum latitude and longitude values aren\u2019t less than corresponding maximum values.", "NoteFunction throws an exception if resulting array is over 10\u2019000\u2019000 items long."], "Examples": ["SELECT geohashesInBox(24.48, 40.56, 24.785, 40.81, 4) AS thasos;"], "Category": ["Geo Functions"], "index": 571, "vector_txt": "571:Feature: geohashesInBox(longitude_min, latitude_min, longitude_max, latitude_max, precision)\nDescription: geohashesInBoxReturns an array of geohash-encoded strings of given precision that fall inside and intersect boundaries of given box, basically a 2D grid flattened into array.SyntaxgeohashesInBox(longitude_min, latitude_min, longitude_max, latitude_max, precision)Argumentslongitude_min \u2014 Minimum longitude. Range: [-180\u00b0, 180\u00b0]. Float.latitude_min \u2014 Minimum latitude. Range: [-90\u00b0, 90\u00b0]. Float.longitude_max \u2014 Maximum longitude. Range: [-180\u00b0, 180\u00b0]. Float.latitude_max \u2014 Maximum latitude. Range: [-90\u00b0, 90\u00b0]. Float.precision \u2014 Geohash precision. Range: [1, 12]. UInt8.NoteAll coordinate parameters must be of the same type: either Float32 or Float64.Returned valuesArray of precision-long strings of geohash-boxes covering provided area, you should not rely on order of items. Array(String).[] - Empty array if minimum latitude and longitude values aren\u2019t less than corresponding maximum values.NoteFunction throws an exception if resulting array is over 10\u2019000\u2019000 items long.\nExamples: SELECT geohashesInBox(24.48, 40.56, 24.785, 40.81, 4) AS thasos;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["H3 Index"], "Feature": ["H3 Index"], "Description": ["H3 Index", "H3 is a geographical indexing system where Earth\u2019s surface divided into a grid of even hexagonal cells. This system is hierarchical, i. e. each hexagon on the top level (\"parent\") can be split into seven even but smaller ones (\"children\"), and so on.", "The level of the hierarchy is called resolution and can receive a value from 0 till 15, where 0 is the base level with the largest and coarsest cells.", "A latitude and longitude pair can be transformed to a 64-bit H3 index, identifying a grid cell.", "The H3 index is used primarily for bucketing locations and other geospatial manipulations.", "The full description of the H3 system is available at the Uber Engineering site."], "Examples": [], "Category": ["Geo Functions"], "index": 572, "vector_txt": "572:Feature: H3 Index\nDescription: H3 IndexH3 is a geographical indexing system where Earth\u2019s surface divided into a grid of even hexagonal cells. This system is hierarchical, i. e. each hexagon on the top level (\"parent\") can be split into seven even but smaller ones (\"children\"), and so on.The level of the hierarchy is called resolution and can receive a value from 0 till 15, where 0 is the base level with the largest and coarsest cells.A latitude and longitude pair can be transformed to a 64-bit H3 index, identifying a grid cell.The H3 index is used primarily for bucketing locations and other geospatial manipulations.The full description of the H3 system is available at the Uber Engineering site.\nExamples: \nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3IsValid"], "Feature": ["h3IsValid(h3index)"], "Description": ["h3IsValid", "Verifies whether the number is a valid H3 index.", "Syntax", "h3IsValid(h3index)", "Parameter", "h3index \u2014 Hexagon index number. UInt64.", "Returned values", "1 \u2014 The number is a valid H3 index. UInt8.0 \u2014 The number is not a valid H3 index. UInt8."], "Examples": ["SELECT h3IsValid(630814730351855103) AS h3IsValid;"], "Category": ["Geo Functions"], "index": 573, "vector_txt": "573:Feature: h3IsValid(h3index)\nDescription: h3IsValidVerifies whether the number is a valid H3 index.Syntaxh3IsValid(h3index)Parameterh3index \u2014 Hexagon index number. UInt64.Returned values1 \u2014 The number is a valid H3 index. UInt8.0 \u2014 The number is not a valid H3 index. UInt8.\nExamples: SELECT h3IsValid(630814730351855103) AS h3IsValid;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3GetResolution"], "Feature": ["h3GetResolution(h3index)"], "Description": ["h3GetResolution", "Defines the resolution of the given H3 index.", "Syntax", "h3GetResolution(h3index)", "Parameter", "h3index \u2014 Hexagon index number. UInt64.", "Returned values", "Index resolution. Range: [0, 15]. UInt8.If the index is not valid, the function returns a random value. Use h3IsValid to verify the index. UInt8."], "Examples": ["SELECT h3GetResolution(639821929606596015) AS resolution;"], "Category": ["Geo Functions"], "index": 574, "vector_txt": "574:Feature: h3GetResolution(h3index)\nDescription: h3GetResolutionDefines the resolution of the given H3 index.Syntaxh3GetResolution(h3index)Parameterh3index \u2014 Hexagon index number. UInt64.Returned valuesIndex resolution. Range: [0, 15]. UInt8.If the index is not valid, the function returns a random value. Use h3IsValid to verify the index. UInt8.\nExamples: SELECT h3GetResolution(639821929606596015) AS resolution;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3EdgeAngle"], "Feature": ["h3EdgeAngle(resolution)"], "Description": ["h3EdgeAngle", "Calculates the average length of the H3 hexagon edge in grades.", "Syntax", "h3EdgeAngle(resolution)", "Parameter", "resolution \u2014 Index resolution. UInt8. Range: [0, 15].", "Returned values", "The average length of the H3 hexagon edge in grades. Float64."], "Examples": ["SELECT h3EdgeAngle(10) AS edgeAngle;"], "Category": ["Geo Functions"], "index": 575, "vector_txt": "575:Feature: h3EdgeAngle(resolution)\nDescription: h3EdgeAngleCalculates the average length of the H3 hexagon edge in grades.Syntaxh3EdgeAngle(resolution)Parameterresolution \u2014 Index resolution. UInt8. Range: [0, 15].Returned valuesThe average length of the H3 hexagon edge in grades. Float64.\nExamples: SELECT h3EdgeAngle(10) AS edgeAngle;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3EdgeLengthM"], "Feature": ["h3EdgeLengthM(resolution)"], "Description": ["h3EdgeLengthM", "Calculates the average length of the H3 hexagon edge in meters.", "Syntax", "h3EdgeLengthM(resolution)", "Parameter", "resolution \u2014 Index resolution. UInt8. Range: [0, 15].", "Returned values", "The average length of the H3 hexagon edge in meters. Float64."], "Examples": ["SELECT h3EdgeLengthM(15) AS edgeLengthM;"], "Category": ["Geo Functions"], "index": 576, "vector_txt": "576:Feature: h3EdgeLengthM(resolution)\nDescription: h3EdgeLengthMCalculates the average length of the H3 hexagon edge in meters.Syntaxh3EdgeLengthM(resolution)Parameterresolution \u2014 Index resolution. UInt8. Range: [0, 15].Returned valuesThe average length of the H3 hexagon edge in meters. Float64.\nExamples: SELECT h3EdgeLengthM(15) AS edgeLengthM;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3EdgeLengthKm"], "Feature": ["h3EdgeLengthKm(resolution)"], "Description": ["h3EdgeLengthKm", "Calculates the average length of the H3 hexagon edge in kilometers.", "Syntax", "h3EdgeLengthKm(resolution)", "Parameter", "resolution \u2014 Index resolution. UInt8. Range: [0, 15].", "Returned values", "The average length of the H3 hexagon edge in kilometers. Float64."], "Examples": ["SELECT h3EdgeLengthKm(15) AS edgeLengthKm;"], "Category": ["Geo Functions"], "index": 577, "vector_txt": "577:Feature: h3EdgeLengthKm(resolution)\nDescription: h3EdgeLengthKmCalculates the average length of the H3 hexagon edge in kilometers.Syntaxh3EdgeLengthKm(resolution)Parameterresolution \u2014 Index resolution. UInt8. Range: [0, 15].Returned valuesThe average length of the H3 hexagon edge in kilometers. Float64.\nExamples: SELECT h3EdgeLengthKm(15) AS edgeLengthKm;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["geoToH3"], "Feature": ["geoToH3(lon, lat, resolution)"], "Description": ["geoToH3", "Returns H3 point index (lon, lat) with specified resolution.", "Syntax", "geoToH3(lon, lat, resolution)", "Arguments", "lon \u2014 Longitude. Float64.lat \u2014 Latitude. Float64.resolution \u2014 Index resolution. Range: [0, 15]. UInt8.", "Returned values", "Hexagon index number. UInt64.0 in case of error. UInt64."], "Examples": ["SELECT geoToH3(37.79506683, 55.71290588, 15) AS h3Index;"], "Category": ["Geo Functions"], "index": 578, "vector_txt": "578:Feature: geoToH3(lon, lat, resolution)\nDescription: geoToH3Returns H3 point index (lon, lat) with specified resolution.SyntaxgeoToH3(lon, lat, resolution)Argumentslon \u2014 Longitude. Float64.lat \u2014 Latitude. Float64.resolution \u2014 Index resolution. Range: [0, 15]. UInt8.Returned valuesHexagon index number. UInt64.0 in case of error. UInt64.\nExamples: SELECT geoToH3(37.79506683, 55.71290588, 15) AS h3Index;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3ToGeo"], "Feature": ["h3ToGeo(h3Index)"], "Description": ["h3ToGeo", "Returns the centroid longitude and latitude corresponding to the provided H3 index.", "Syntax", "h3ToGeo(h3Index)", "Arguments", "h3Index \u2014 H3 Index. UInt64.", "Returned values", "A tuple consisting of two values: tuple(lon,lat). lon \u2014 Longitude. Float64. lat \u2014 Latitude. Float64."], "Examples": ["SELECT h3ToGeo(644325524701193974) AS coordinates;"], "Category": ["Geo Functions"], "index": 579, "vector_txt": "579:Feature: h3ToGeo(h3Index)\nDescription: h3ToGeoReturns the centroid longitude and latitude corresponding to the provided H3 index.Syntaxh3ToGeo(h3Index)Argumentsh3Index \u2014 H3 Index. UInt64.Returned valuesA tuple consisting of two values: tuple(lon,lat). lon \u2014 Longitude. Float64. lat \u2014 Latitude. Float64.\nExamples: SELECT h3ToGeo(644325524701193974) AS coordinates;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["emptyArrayFloat32"], "Feature": ["emptyArrayFloat32()"], "Description": ["emptyArrayFloat32", "Returns an empty Float32 array.", "Syntax", "emptyArrayFloat32()", "Arguments", "None.", "Returned value", "An empty array."], "Examples": ["SELECT emptyArrayFloat32();"], "Category": ["Arrays Functions"], "index": 580, "vector_txt": "580:Feature: emptyArrayFloat32()\nDescription: emptyArrayFloat32Returns an empty Float32 array.SyntaxemptyArrayFloat32()ArgumentsNone.Returned valueAn empty array.\nExamples: SELECT emptyArrayFloat32();\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3ToGeoBoundary"], "Feature": ["h3ToGeoBoundary(h3Index)"], "Description": ["h3ToGeoBoundary", "Returns array of pairs (lon, lat), which corresponds to the boundary of the provided H3 index.", "Syntax", "h3ToGeoBoundary(h3Index)", "Arguments", "h3Index \u2014 H3 Index. UInt64.", "Returned values", "Array of pairs '(lon, lat)'. Array(Float64, Float64)."], "Examples": ["SELECT h3ToGeoBoundary(644325524701193974) AS coordinates;"], "Category": ["Geo Functions"], "index": 581, "vector_txt": "581:Feature: h3ToGeoBoundary(h3Index)\nDescription: h3ToGeoBoundaryReturns array of pairs (lon, lat), which corresponds to the boundary of the provided H3 index.Syntaxh3ToGeoBoundary(h3Index)Argumentsh3Index \u2014 H3 Index. UInt64.Returned valuesArray of pairs '(lon, lat)'. Array(Float64, Float64).\nExamples: SELECT h3ToGeoBoundary(644325524701193974) AS coordinates;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3kRing"], "Feature": ["h3kRing(h3index, k)"], "Description": ["h3kRing", " Lists all the H3 hexagons in the raduis of k from the given hexagon in random order.", "Syntax", "h3kRing(h3index, k)", "Arguments", "h3index \u2014 Hexagon index number. UInt64.k \u2014 Radius. integer", "Returned values", "Array of H3 indexes. Array(UInt64)."], "Examples": ["SELECT arrayJoin(h3kRing(644325529233966508, 1)) AS h3index;"], "Category": ["Geo Functions"], "index": 582, "vector_txt": "582:Feature: h3kRing(h3index, k)\nDescription: h3kRing Lists all the H3 hexagons in the raduis of k from the given hexagon in random order.Syntaxh3kRing(h3index, k)Argumentsh3index \u2014 Hexagon index number. UInt64.k \u2014 Radius. integerReturned valuesArray of H3 indexes. Array(UInt64).\nExamples: SELECT arrayJoin(h3kRing(644325529233966508, 1)) AS h3index;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3GetBaseCell"], "Feature": ["h3GetBaseCell(index)"], "Description": ["h3GetBaseCell", "Returns the base cell number of the H3 index.", "Syntax", "h3GetBaseCell(index)", "Parameter", "index \u2014 Hexagon index number. UInt64.", "Returned value", "Hexagon base cell number. UInt8."], "Examples": ["SELECT h3GetBaseCell(612916788725809151) AS basecell;"], "Category": ["Geo Functions"], "index": 583, "vector_txt": "583:Feature: h3GetBaseCell(index)\nDescription: h3GetBaseCellReturns the base cell number of the H3 index.Syntaxh3GetBaseCell(index)Parameterindex \u2014 Hexagon index number. UInt64.Returned valueHexagon base cell number. UInt8.\nExamples: SELECT h3GetBaseCell(612916788725809151) AS basecell;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3HexAreaM2"], "Feature": ["h3HexAreaM2(resolution)"], "Description": ["h3HexAreaM2", "Returns average hexagon area in square meters at the given resolution.", "Syntax", "h3HexAreaM2(resolution)", "Parameter", "resolution \u2014 Index resolution. Range: [0, 15]. UInt8.", "Returned value", "Area in square meters. Float64."], "Examples": ["SELECT h3HexAreaM2(13) AS area;"], "Category": ["Geo Functions"], "index": 584, "vector_txt": "584:Feature: h3HexAreaM2(resolution)\nDescription: h3HexAreaM2Returns average hexagon area in square meters at the given resolution.Syntaxh3HexAreaM2(resolution)Parameterresolution \u2014 Index resolution. Range: [0, 15]. UInt8.Returned valueArea in square meters. Float64.\nExamples: SELECT h3HexAreaM2(13) AS area;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3HexAreaKm2"], "Feature": ["h3HexAreaKm2(resolution)"], "Description": ["h3HexAreaKm2", "Returns average hexagon area in square kilometers at the given resolution.", "Syntax", "h3HexAreaKm2(resolution)", "Parameter", "resolution \u2014 Index resolution. Range: [0, 15]. UInt8.", "Returned value", "Area in square kilometers. Float64."], "Examples": ["SELECT h3HexAreaKm2(13) AS area;"], "Category": ["Geo Functions"], "index": 585, "vector_txt": "585:Feature: h3HexAreaKm2(resolution)\nDescription: h3HexAreaKm2Returns average hexagon area in square kilometers at the given resolution.Syntaxh3HexAreaKm2(resolution)Parameterresolution \u2014 Index resolution. Range: [0, 15]. UInt8.Returned valueArea in square kilometers. Float64.\nExamples: SELECT h3HexAreaKm2(13) AS area;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3IndexesAreNeighbors"], "Feature": ["h3IndexesAreNeighbors(index1, index2)"], "Description": ["h3IndexesAreNeighbors", "Returns whether or not the provided H3 indexes are neighbors.", "Syntax", "h3IndexesAreNeighbors(index1, index2)", "Arguments", "index1 \u2014 Hexagon index number. UInt64.index2 \u2014 Hexagon index number. UInt64.", "Returned value", "1 \u2014 Indexes are neighbours. UInt8.0 \u2014 Indexes are not neighbours. UInt8."], "Examples": ["SELECT h3IndexesAreNeighbors(617420388351344639, 617420388352655359) AS n;"], "Category": ["Geo Functions"], "index": 586, "vector_txt": "586:Feature: h3IndexesAreNeighbors(index1, index2)\nDescription: h3IndexesAreNeighborsReturns whether or not the provided H3 indexes are neighbors.Syntaxh3IndexesAreNeighbors(index1, index2)Argumentsindex1 \u2014 Hexagon index number. UInt64.index2 \u2014 Hexagon index number. UInt64.Returned value1 \u2014 Indexes are neighbours. UInt8.0 \u2014 Indexes are not neighbours. UInt8.\nExamples: SELECT h3IndexesAreNeighbors(617420388351344639, 617420388352655359) AS n;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3ToChildren"], "Feature": ["h3ToChildren(index, resolution)"], "Description": ["h3ToChildren", "Returns an array of child indexes for the given H3 index.", "Syntax", "h3ToChildren(index, resolution)", "Arguments", "index \u2014 Hexagon index number. UInt64.resolution \u2014 Index resolution. Range: [0, 15]. UInt8.", "Returned values", "Array of the child H3-indexes. Array(UInt64)."], "Examples": ["SELECT h3ToChildren(599405990164561919, 6) AS children;"], "Category": ["Geo Functions"], "index": 587, "vector_txt": "587:Feature: h3ToChildren(index, resolution)\nDescription: h3ToChildrenReturns an array of child indexes for the given H3 index.Syntaxh3ToChildren(index, resolution)Argumentsindex \u2014 Hexagon index number. UInt64.resolution \u2014 Index resolution. Range: [0, 15]. UInt8.Returned valuesArray of the child H3-indexes. Array(UInt64).\nExamples: SELECT h3ToChildren(599405990164561919, 6) AS children;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3ToParent"], "Feature": ["h3ToParent(index, resolution)"], "Description": ["h3ToParent", "Returns the parent (coarser) index containing the given H3 index.", "Syntax", "h3ToParent(index, resolution)", "Arguments", "index \u2014 Hexagon index number. UInt64.resolution \u2014 Index resolution. Range: [0, 15]. UInt8.", "Returned value", "Parent H3 index. UInt64."], "Examples": ["SELECT h3ToParent(599405990164561919, 3) AS parent;"], "Category": ["Geo Functions"], "index": 588, "vector_txt": "588:Feature: h3ToParent(index, resolution)\nDescription: h3ToParentReturns the parent (coarser) index containing the given H3 index.Syntaxh3ToParent(index, resolution)Argumentsindex \u2014 Hexagon index number. UInt64.resolution \u2014 Index resolution. Range: [0, 15]. UInt8.Returned valueParent H3 index. UInt64.\nExamples: SELECT h3ToParent(599405990164561919, 3) AS parent;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3ToString"], "Feature": ["h3ToString(index)"], "Description": ["h3ToString", "Converts the H3Index representation of the index to the string representation.", "h3ToString(index)", "Parameter", "index \u2014 Hexagon index number. UInt64.", "Returned value", "String representation of the H3 index. String."], "Examples": ["SELECT h3ToString(617420388352917503) AS h3_string;"], "Category": ["Geo Functions"], "index": 589, "vector_txt": "589:Feature: h3ToString(index)\nDescription: h3ToStringConverts the H3Index representation of the index to the string representation.h3ToString(index)Parameterindex \u2014 Hexagon index number. UInt64.Returned valueString representation of the H3 index. String.\nExamples: SELECT h3ToString(617420388352917503) AS h3_string;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["stringToH3"], "Feature": ["stringToH3(index_str)"], "Description": ["stringToH3", "Converts the string representation to the H3Index (UInt64) representation.", "Syntax", "stringToH3(index_str)", "Parameter", "index_str \u2014 String representation of the H3 index. String.", "Returned value", "Hexagon index number. Returns 0 on error. UInt64."], "Examples": ["SELECT stringToH3('89184926cc3ffff') AS index;"], "Category": ["Geo Functions"], "index": 590, "vector_txt": "590:Feature: stringToH3(index_str)\nDescription: stringToH3Converts the string representation to the H3Index (UInt64) representation.SyntaxstringToH3(index_str)Parameterindex_str \u2014 String representation of the H3 index. String.Returned valueHexagon index number. Returns 0 on error. UInt64.\nExamples: SELECT stringToH3('89184926cc3ffff') AS index;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["emptyArrayFloat64"], "Feature": ["emptyArrayFloat64()"], "Description": ["emptyArrayFloat64", "Returns an empty Float64 array.", "Syntax", "emptyArrayFloat64()", "Arguments", "None.", "Returned value", "An empty array."], "Examples": ["SELECT emptyArrayFloat64();"], "Category": ["Arrays Functions"], "index": 591, "vector_txt": "591:Feature: emptyArrayFloat64()\nDescription: emptyArrayFloat64Returns an empty Float64 array.SyntaxemptyArrayFloat64()ArgumentsNone.Returned valueAn empty array.\nExamples: SELECT emptyArrayFloat64();\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3GetResolution"], "Feature": ["h3GetResolution(index)"], "Description": ["h3GetResolution", "Returns the resolution of the H3 index.", "Syntax", "h3GetResolution(index)", "Parameter", "index \u2014 Hexagon index number. UInt64.", "Returned value", "Index resolution. Range: [0, 15]. UInt8."], "Examples": ["SELECT h3GetResolution(617420388352917503) AS res;"], "Category": ["Geo Functions"], "index": 592, "vector_txt": "592:Feature: h3GetResolution(index)\nDescription: h3GetResolutionReturns the resolution of the H3 index.Syntaxh3GetResolution(index)Parameterindex \u2014 Hexagon index number. UInt64.Returned valueIndex resolution. Range: [0, 15]. UInt8.\nExamples: SELECT h3GetResolution(617420388352917503) AS res;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3IsResClassIII"], "Feature": ["h3IsResClassIII(index)"], "Description": ["h3IsResClassIII", "Returns whether H3 index has a resolution with Class III orientation.", "Syntax", "h3IsResClassIII(index)", "Parameter", "index \u2014 Hexagon index number. UInt64.", "Returned value", "1 \u2014 Index has a resolution with Class III orientation. UInt8.0 \u2014 Index doesn't have a resolution with Class III orientation. UInt8."], "Examples": ["SELECT h3IsResClassIII(617420388352917503) AS res;"], "Category": ["Geo Functions"], "index": 593, "vector_txt": "593:Feature: h3IsResClassIII(index)\nDescription: h3IsResClassIIIReturns whether H3 index has a resolution with Class III orientation.Syntaxh3IsResClassIII(index)Parameterindex \u2014 Hexagon index number. UInt64.Returned value1 \u2014 Index has a resolution with Class III orientation. UInt8.0 \u2014 Index doesn't have a resolution with Class III orientation. UInt8.\nExamples: SELECT h3IsResClassIII(617420388352917503) AS res;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3IsPentagon"], "Feature": ["h3IsPentagon(index)"], "Description": ["h3IsPentagon", "Returns whether this H3 index represents a pentagonal cell.", "Syntax", "h3IsPentagon(index)", "Parameter", "index \u2014 Hexagon index number. UInt64.", "Returned value", "1 \u2014 Index represents a pentagonal cell. UInt8.0 \u2014 Index doesn't represent a pentagonal cell. UInt8."], "Examples": ["SELECT h3IsPentagon(644721767722457330) AS pentagon;"], "Category": ["Geo Functions"], "index": 594, "vector_txt": "594:Feature: h3IsPentagon(index)\nDescription: h3IsPentagonReturns whether this H3 index represents a pentagonal cell.Syntaxh3IsPentagon(index)Parameterindex \u2014 Hexagon index number. UInt64.Returned value1 \u2014 Index represents a pentagonal cell. UInt8.0 \u2014 Index doesn't represent a pentagonal cell. UInt8.\nExamples: SELECT h3IsPentagon(644721767722457330) AS pentagon;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3GetFaces"], "Feature": ["h3GetFaces(index)"], "Description": ["h3GetFaces", "Returns icosahedron faces intersected by a given H3 index.", "Syntax", "h3GetFaces(index)", "Parameter", "index \u2014 Hexagon index number. UInt64.", "Returned values", "Array containing icosahedron faces intersected by a given H3 index. Array(UInt64)."], "Examples": ["SELECT h3GetFaces(599686042433355775) AS faces;"], "Category": ["Geo Functions"], "index": 595, "vector_txt": "595:Feature: h3GetFaces(index)\nDescription: h3GetFacesReturns icosahedron faces intersected by a given H3 index.Syntaxh3GetFaces(index)Parameterindex \u2014 Hexagon index number. UInt64.Returned valuesArray containing icosahedron faces intersected by a given H3 index. Array(UInt64).\nExamples: SELECT h3GetFaces(599686042433355775) AS faces;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3CellAreaM2"], "Feature": ["h3CellAreaM2(index)"], "Description": ["h3CellAreaM2", "Returns the exact area of a specific cell in square meters corresponding to the given input H3 index.", "Syntax", "h3CellAreaM2(index)", "Parameter", "index \u2014 Hexagon index number. UInt64.", "Returned value", "Cell area in square meters. Float64."], "Examples": ["SELECT h3CellAreaM2(579205133326352383) AS area;"], "Category": ["Geo Functions"], "index": 596, "vector_txt": "596:Feature: h3CellAreaM2(index)\nDescription: h3CellAreaM2Returns the exact area of a specific cell in square meters corresponding to the given input H3 index.Syntaxh3CellAreaM2(index)Parameterindex \u2014 Hexagon index number. UInt64.Returned valueCell area in square meters. Float64.\nExamples: SELECT h3CellAreaM2(579205133326352383) AS area;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3CellAreaRads2"], "Feature": ["h3CellAreaRads2(index)"], "Description": ["h3CellAreaRads2", "Returns the exact area of a specific cell in square radians corresponding to the given input H3 index.", "Syntax", "h3CellAreaRads2(index)", "Parameter", "index \u2014 Hexagon index number. UInt64.", "Returned value", "Cell area in square radians. Float64."], "Examples": ["SELECT h3CellAreaRads2(579205133326352383) AS area;"], "Category": ["Geo Functions"], "index": 597, "vector_txt": "597:Feature: h3CellAreaRads2(index)\nDescription: h3CellAreaRads2Returns the exact area of a specific cell in square radians corresponding to the given input H3 index.Syntaxh3CellAreaRads2(index)Parameterindex \u2014 Hexagon index number. UInt64.Returned valueCell area in square radians. Float64.\nExamples: SELECT h3CellAreaRads2(579205133326352383) AS area;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3ToCenterChild"], "Feature": ["h3ToCenterChild(index, resolution)"], "Description": ["h3ToCenterChild", "Returns the center child (finer) H3 index contained by given H3 at the given resolution.", "Syntax", "h3ToCenterChild(index, resolution)", "Parameter", "index \u2014 Hexagon index number. UInt64.resolution \u2014 Index resolution. Range: [0, 15]. UInt8.", "Returned values", "H3 index of the center child contained by given H3 at the given resolution. UInt64."], "Examples": ["SELECT h3ToCenterChild(577023702256844799,1) AS centerToChild;"], "Category": ["Geo Functions"], "index": 598, "vector_txt": "598:Feature: h3ToCenterChild(index, resolution)\nDescription: h3ToCenterChildReturns the center child (finer) H3 index contained by given H3 at the given resolution.Syntaxh3ToCenterChild(index, resolution)Parameterindex \u2014 Hexagon index number. UInt64.resolution \u2014 Index resolution. Range: [0, 15]. UInt8.Returned valuesH3 index of the center child contained by given H3 at the given resolution. UInt64.\nExamples: SELECT h3ToCenterChild(577023702256844799,1) AS centerToChild;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3ExactEdgeLengthM"], "Feature": ["h3ExactEdgeLengthM(index)"], "Description": ["h3ExactEdgeLengthM", "Returns the exact edge length of the unidirectional edge represented by the input h3 index in meters.", "Syntax", "h3ExactEdgeLengthM(index)", "Parameter", "index \u2014 Hexagon index number. UInt64.", "Returned value", "Exact edge length in meters. Float64."], "Examples": ["SELECT h3ExactEdgeLengthM(1310277011704381439) AS exactEdgeLengthM;;"], "Category": ["Geo Functions"], "index": 599, "vector_txt": "599:Feature: h3ExactEdgeLengthM(index)\nDescription: h3ExactEdgeLengthMReturns the exact edge length of the unidirectional edge represented by the input h3 index in meters.Syntaxh3ExactEdgeLengthM(index)Parameterindex \u2014 Hexagon index number. UInt64.Returned valueExact edge length in meters. Float64.\nExamples: SELECT h3ExactEdgeLengthM(1310277011704381439) AS exactEdgeLengthM;;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3ExactEdgeLengthKm"], "Feature": ["h3ExactEdgeLengthKm(index)"], "Description": ["h3ExactEdgeLengthKm", "Returns the exact edge length of the unidirectional edge represented by the input h3 index in kilometers.", "Syntax", "h3ExactEdgeLengthKm(index)", "Parameter", "index \u2014 Hexagon index number. UInt64.", "Returned value", "Exact edge length in kilometers. Float64."], "Examples": ["SELECT h3ExactEdgeLengthKm(1310277011704381439) AS exactEdgeLengthKm;;"], "Category": ["Geo Functions"], "index": 600, "vector_txt": "600:Feature: h3ExactEdgeLengthKm(index)\nDescription: h3ExactEdgeLengthKmReturns the exact edge length of the unidirectional edge represented by the input h3 index in kilometers.Syntaxh3ExactEdgeLengthKm(index)Parameterindex \u2014 Hexagon index number. UInt64.Returned valueExact edge length in kilometers. Float64.\nExamples: SELECT h3ExactEdgeLengthKm(1310277011704381439) AS exactEdgeLengthKm;;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3ExactEdgeLengthRads"], "Feature": ["h3ExactEdgeLengthRads(index)"], "Description": ["h3ExactEdgeLengthRads", "Returns the exact edge length of the unidirectional edge represented by the input h3 index in radians.", "Syntax", "h3ExactEdgeLengthRads(index)", "Parameter", "index \u2014 Hexagon index number. UInt64.", "Returned value", "Exact edge length in radians. Float64."], "Examples": ["SELECT h3ExactEdgeLengthRads(1310277011704381439) AS exactEdgeLengthRads;;"], "Category": ["Geo Functions"], "index": 601, "vector_txt": "601:Feature: h3ExactEdgeLengthRads(index)\nDescription: h3ExactEdgeLengthRadsReturns the exact edge length of the unidirectional edge represented by the input h3 index in radians.Syntaxh3ExactEdgeLengthRads(index)Parameterindex \u2014 Hexagon index number. UInt64.Returned valueExact edge length in radians. Float64.\nExamples: SELECT h3ExactEdgeLengthRads(1310277011704381439) AS exactEdgeLengthRads;;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["emptyArrayDate"], "Feature": ["emptyArrayDate()"], "Description": ["emptyArrayDate", "Returns an empty Date array.", "Syntax", "emptyArrayDate()", "Arguments", "None.", "Returned value", "An empty array."], "Examples": ["SELECT emptyArrayDate();"], "Category": ["Arrays Functions"], "index": 602, "vector_txt": "602:Feature: emptyArrayDate()\nDescription: emptyArrayDateReturns an empty Date array.SyntaxemptyArrayDate()ArgumentsNone.Returned valueAn empty array.\nExamples: SELECT emptyArrayDate();\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3NumHexagons"], "Feature": ["h3NumHexagons(resolution)"], "Description": ["h3NumHexagons", "Returns the number of unique H3 indices at the given resolution.", "Syntax", "h3NumHexagons(resolution)", "Parameter", "resolution \u2014 Index resolution. Range: [0, 15]. UInt8.", "Returned value", "Number of H3 indices. Int64."], "Examples": ["SELECT h3NumHexagons(3) AS numHexagons;"], "Category": ["Geo Functions"], "index": 603, "vector_txt": "603:Feature: h3NumHexagons(resolution)\nDescription: h3NumHexagonsReturns the number of unique H3 indices at the given resolution.Syntaxh3NumHexagons(resolution)Parameterresolution \u2014 Index resolution. Range: [0, 15]. UInt8.Returned valueNumber of H3 indices. Int64.\nExamples: SELECT h3NumHexagons(3) AS numHexagons;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3PointDistM"], "Feature": ["h3PointDistM(lat1, lon1, lat2, lon2)"], "Description": ["h3PointDistM", "Returns the \"great circle\" or \"haversine\" distance between pairs of GeoCoord points (latitude/longitude) pairs in meters.", "Syntax", "h3PointDistM(lat1, lon1, lat2, lon2)", "Arguments", "lat1, lon1 \u2014 Latitude and Longitude of point1 in degrees. Float64.lat2, lon2 \u2014 Latitude and Longitude of point2 in degrees. Float64.", "Returned values", "Haversine or great circle distance in meters.Float64."], "Examples": ["select h3PointDistM(-10.0 ,0.0, 10.0, 0.0) as h3PointDistM;"], "Category": ["Geo Functions"], "index": 604, "vector_txt": "604:Feature: h3PointDistM(lat1, lon1, lat2, lon2)\nDescription: h3PointDistMReturns the \"great circle\" or \"haversine\" distance between pairs of GeoCoord points (latitude/longitude) pairs in meters.Syntaxh3PointDistM(lat1, lon1, lat2, lon2)Argumentslat1, lon1 \u2014 Latitude and Longitude of point1 in degrees. Float64.lat2, lon2 \u2014 Latitude and Longitude of point2 in degrees. Float64.Returned valuesHaversine or great circle distance in meters.Float64.\nExamples: select h3PointDistM(-10.0 ,0.0, 10.0, 0.0) as h3PointDistM;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3PointDistKm"], "Feature": ["h3PointDistKm(lat1, lon1, lat2, lon2)"], "Description": ["h3PointDistKm", "Returns the \"great circle\" or \"haversine\" distance between pairs of GeoCoord points (latitude/longitude) pairs in kilometers.", "Syntax", "h3PointDistKm(lat1, lon1, lat2, lon2)", "Arguments", "lat1, lon1 \u2014 Latitude and Longitude of point1 in degrees. Float64.lat2, lon2 \u2014 Latitude and Longitude of point2 in degrees. Float64.", "Returned values", "Haversine or great circle distance in kilometers. Float64."], "Examples": ["select h3PointDistKm(-10.0 ,0.0, 10.0, 0.0) as h3PointDistKm;"], "Category": ["Geo Functions"], "index": 605, "vector_txt": "605:Feature: h3PointDistKm(lat1, lon1, lat2, lon2)\nDescription: h3PointDistKmReturns the \"great circle\" or \"haversine\" distance between pairs of GeoCoord points (latitude/longitude) pairs in kilometers.Syntaxh3PointDistKm(lat1, lon1, lat2, lon2)Argumentslat1, lon1 \u2014 Latitude and Longitude of point1 in degrees. Float64.lat2, lon2 \u2014 Latitude and Longitude of point2 in degrees. Float64.Returned valuesHaversine or great circle distance in kilometers. Float64.\nExamples: select h3PointDistKm(-10.0 ,0.0, 10.0, 0.0) as h3PointDistKm;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3PointDistRads"], "Feature": ["h3PointDistRads(lat1, lon1, lat2, lon2)"], "Description": ["h3PointDistRads", "Returns the \"great circle\" or \"haversine\" distance between pairs of GeoCoord points (latitude/longitude) pairs in radians.", "Syntax", "h3PointDistRads(lat1, lon1, lat2, lon2)", "Arguments", "lat1, lon1 \u2014 Latitude and Longitude of point1 in degrees. Float64.lat2, lon2 \u2014 Latitude and Longitude of point2 in degrees. Float64.", "Returned values", "Haversine or great circle distance in radians. Float64."], "Examples": ["select h3PointDistRads(-10.0 ,0.0, 10.0, 0.0) as h3PointDistRads;"], "Category": ["Geo Functions"], "index": 606, "vector_txt": "606:Feature: h3PointDistRads(lat1, lon1, lat2, lon2)\nDescription: h3PointDistRadsReturns the \"great circle\" or \"haversine\" distance between pairs of GeoCoord points (latitude/longitude) pairs in radians.Syntaxh3PointDistRads(lat1, lon1, lat2, lon2)Argumentslat1, lon1 \u2014 Latitude and Longitude of point1 in degrees. Float64.lat2, lon2 \u2014 Latitude and Longitude of point2 in degrees. Float64.Returned valuesHaversine or great circle distance in radians. Float64.\nExamples: select h3PointDistRads(-10.0 ,0.0, 10.0, 0.0) as h3PointDistRads;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3GetRes0Indexes"], "Feature": ["h3GetRes0Indexes()"], "Description": ["h3GetRes0Indexes", "Returns an array of all the resolution 0 H3 indexes.", "Syntax", "h3GetRes0Indexes()", "Returned values", "Array of all the resolution 0 H3 indexes. Array(UInt64)."], "Examples": ["select h3GetRes0Indexes as indexes ;"], "Category": ["Geo Functions"], "index": 607, "vector_txt": "607:Feature: h3GetRes0Indexes()\nDescription: h3GetRes0IndexesReturns an array of all the resolution 0 H3 indexes.Syntaxh3GetRes0Indexes()Returned valuesArray of all the resolution 0 H3 indexes. Array(UInt64).\nExamples: select h3GetRes0Indexes as indexes ;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3GetPentagonIndexes"], "Feature": ["h3GetPentagonIndexes(resolution)"], "Description": ["h3GetPentagonIndexes", "Returns all the pentagon H3 indexes at the specified resolution.", "Syntax", "h3GetPentagonIndexes(resolution)", "Parameter", "resolution \u2014 Index resolution. Range: [0, 15]. UInt8.", "Returned value", "Array of all pentagon H3 indexes. Array(UInt64)."], "Examples": ["SELECT h3GetPentagonIndexes(3) AS indexes;"], "Category": ["Geo Functions"], "index": 608, "vector_txt": "608:Feature: h3GetPentagonIndexes(resolution)\nDescription: h3GetPentagonIndexesReturns all the pentagon H3 indexes at the specified resolution.Syntaxh3GetPentagonIndexes(resolution)Parameterresolution \u2014 Index resolution. Range: [0, 15]. UInt8.Returned valueArray of all pentagon H3 indexes. Array(UInt64).\nExamples: SELECT h3GetPentagonIndexes(3) AS indexes;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3Line"], "Feature": ["h3Line(start,end)"], "Description": ["h3Line", "Returns the line of indices between the two indices that are provided.", "Syntax", "h3Line(start,end)", "Parameter", "start \u2014 Hexagon index number that represents a starting point. UInt64.end \u2014 Hexagon index number that represents an ending point. UInt64.", "Returned value", "Array of h3 indexes representing the line of indices between the two provided indices. Array(UInt64)."], "Examples": [" SELECT h3Line(590080540275638271,590103561300344831) as indexes;"], "Category": ["Geo Functions"], "index": 609, "vector_txt": "609:Feature: h3Line(start,end)\nDescription: h3LineReturns the line of indices between the two indices that are provided.Syntaxh3Line(start,end)Parameterstart \u2014 Hexagon index number that represents a starting point. UInt64.end \u2014 Hexagon index number that represents an ending point. UInt64.Returned valueArray of h3 indexes representing the line of indices between the two provided indices. Array(UInt64).\nExamples:  SELECT h3Line(590080540275638271,590103561300344831) as indexes;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3Distance"], "Feature": ["h3Distance(start,end)"], "Description": ["h3Distance", "Returns the distance in grid cells between the two indices that are provided.", "Syntax", "h3Distance(start,end)", "Parameter", "start \u2014 Hexagon index number that represents a starting point. UInt64.end \u2014 Hexagon index number that represents an ending point. UInt64.", "Returned value", "Number of grid cells. Int64.", "Returns a negative number if finding the distance fails."], "Examples": [" SELECT h3Distance(590080540275638271,590103561300344831) as distance;"], "Category": ["Geo Functions"], "index": 610, "vector_txt": "610:Feature: h3Distance(start,end)\nDescription: h3DistanceReturns the distance in grid cells between the two indices that are provided.Syntaxh3Distance(start,end)Parameterstart \u2014 Hexagon index number that represents a starting point. UInt64.end \u2014 Hexagon index number that represents an ending point. UInt64.Returned valueNumber of grid cells. Int64.Returns a negative number if finding the distance fails.\nExamples:  SELECT h3Distance(590080540275638271,590103561300344831) as distance;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3HexRing"], "Feature": ["h3HexRing(index, k)"], "Description": ["h3HexRing", "Returns the indexes of the hexagonal ring centered at the provided origin h3Index and length k.", "Returns 0 if no pentagonal distortion was encountered.", "Syntax", "h3HexRing(index, k)", "Parameter", "index \u2014 Hexagon index number that represents the origin. UInt64.k \u2014 Distance. UInt64.", "Returned values", "Array of H3 indexes. Array(UInt64)."], "Examples": [" SELECT h3HexRing(590080540275638271, toUInt16(1)) AS hexRing;"], "Category": ["Geo Functions"], "index": 611, "vector_txt": "611:Feature: h3HexRing(index, k)\nDescription: h3HexRingReturns the indexes of the hexagonal ring centered at the provided origin h3Index and length k.Returns 0 if no pentagonal distortion was encountered.Syntaxh3HexRing(index, k)Parameterindex \u2014 Hexagon index number that represents the origin. UInt64.k \u2014 Distance. UInt64.Returned valuesArray of H3 indexes. Array(UInt64).\nExamples:  SELECT h3HexRing(590080540275638271, toUInt16(1)) AS hexRing;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3GetUnidirectionalEdge"], "Feature": ["h3GetUnidirectionalEdge(originIndex, destinationIndex)"], "Description": ["h3GetUnidirectionalEdge", "Returns a unidirectional edge H3 index based on the provided origin and destination and returns 0 on error.", "Syntax", "h3GetUnidirectionalEdge(originIndex, destinationIndex)", "Parameter", "originIndex \u2014 Origin Hexagon index number. UInt64.destinationIndex \u2014 Destination Hexagon index number. UInt64.", "Returned value", "Unidirectional Edge Hexagon Index number. UInt64."], "Examples": [" SELECT h3GetUnidirectionalEdge(599686042433355775, 599686043507097599) as edge;"], "Category": ["Geo Functions"], "index": 612, "vector_txt": "612:Feature: h3GetUnidirectionalEdge(originIndex, destinationIndex)\nDescription: h3GetUnidirectionalEdgeReturns a unidirectional edge H3 index based on the provided origin and destination and returns 0 on error.Syntaxh3GetUnidirectionalEdge(originIndex, destinationIndex)ParameteroriginIndex \u2014 Origin Hexagon index number. UInt64.destinationIndex \u2014 Destination Hexagon index number. UInt64.Returned valueUnidirectional Edge Hexagon Index number. UInt64.\nExamples:  SELECT h3GetUnidirectionalEdge(599686042433355775, 599686043507097599) as edge;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["emptyArrayDateTime"], "Feature": ["[]"], "Description": ["emptyArrayDateTime", "Returns an empty DateTime array.", "Syntax", "[]", "Arguments", "None.", "Returned value", "An empty array."], "Examples": ["SELECT emptyArrayDateTime();"], "Category": ["Arrays Functions"], "index": 613, "vector_txt": "613:Feature: []\nDescription: emptyArrayDateTimeReturns an empty DateTime array.Syntax[]ArgumentsNone.Returned valueAn empty array.\nExamples: SELECT emptyArrayDateTime();\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3UnidirectionalEdgeIsValid"], "Feature": ["h3UnidirectionalEdgeisValid(index)"], "Description": ["h3UnidirectionalEdgeIsValid", "Determines if the provided H3Index is a valid unidirectional edge index. Returns 1 if it's a unidirectional edge and 0 otherwise.", "Syntax", "h3UnidirectionalEdgeisValid(index)", "Parameter", "index \u2014 Hexagon index number. UInt64.", "Returned value", "1 \u2014 The H3 index is a valid unidirectional edge. UInt8.0 \u2014 The H3 index is not a valid unidirectional edge. UInt8."], "Examples": [" SELECT h3UnidirectionalEdgeIsValid(1248204388774707199) as validOrNot;"], "Category": ["Geo Functions"], "index": 614, "vector_txt": "614:Feature: h3UnidirectionalEdgeisValid(index)\nDescription: h3UnidirectionalEdgeIsValidDetermines if the provided H3Index is a valid unidirectional edge index. Returns 1 if it's a unidirectional edge and 0 otherwise.Syntaxh3UnidirectionalEdgeisValid(index)Parameterindex \u2014 Hexagon index number. UInt64.Returned value1 \u2014 The H3 index is a valid unidirectional edge. UInt8.0 \u2014 The H3 index is not a valid unidirectional edge. UInt8.\nExamples:  SELECT h3UnidirectionalEdgeIsValid(1248204388774707199) as validOrNot;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3GetOriginIndexFromUnidirectionalEdge"], "Feature": ["h3GetOriginIndexFromUnidirectionalEdge(edge)"], "Description": ["h3GetOriginIndexFromUnidirectionalEdge", "Returns the origin hexagon index from the unidirectional edge H3Index.", "Syntax", "h3GetOriginIndexFromUnidirectionalEdge(edge)", "Parameter", "edge \u2014 Hexagon index number that represents a unidirectional edge. UInt64.", "Returned value", "Origin Hexagon Index number. UInt64."], "Examples": [" SELECT h3GetOriginIndexFromUnidirectionalEdge(1248204388774707197) as origin;"], "Category": ["Geo Functions"], "index": 615, "vector_txt": "615:Feature: h3GetOriginIndexFromUnidirectionalEdge(edge)\nDescription: h3GetOriginIndexFromUnidirectionalEdgeReturns the origin hexagon index from the unidirectional edge H3Index.Syntaxh3GetOriginIndexFromUnidirectionalEdge(edge)Parameteredge \u2014 Hexagon index number that represents a unidirectional edge. UInt64.Returned valueOrigin Hexagon Index number. UInt64.\nExamples:  SELECT h3GetOriginIndexFromUnidirectionalEdge(1248204388774707197) as origin;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3GetDestinationIndexFromUnidirectionalEdge"], "Feature": ["h3GetDestinationIndexFromUnidirectionalEdge(edge)"], "Description": ["h3GetDestinationIndexFromUnidirectionalEdge", "Returns the destination hexagon index from the unidirectional edge H3Index.", "Syntax", "h3GetDestinationIndexFromUnidirectionalEdge(edge)", "Parameter", "edge \u2014 Hexagon index number that represents a unidirectional edge. UInt64.", "Returned value", "Destination Hexagon Index number. UInt64."], "Examples": [" SELECT h3GetDestinationIndexFromUnidirectionalEdge(1248204388774707197) as destination;"], "Category": ["Geo Functions"], "index": 616, "vector_txt": "616:Feature: h3GetDestinationIndexFromUnidirectionalEdge(edge)\nDescription: h3GetDestinationIndexFromUnidirectionalEdgeReturns the destination hexagon index from the unidirectional edge H3Index.Syntaxh3GetDestinationIndexFromUnidirectionalEdge(edge)Parameteredge \u2014 Hexagon index number that represents a unidirectional edge. UInt64.Returned valueDestination Hexagon Index number. UInt64.\nExamples:  SELECT h3GetDestinationIndexFromUnidirectionalEdge(1248204388774707197) as destination;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3GetIndexesFromUnidirectionalEdge"], "Feature": ["h3GetIndexesFromUnidirectionalEdge(edge)"], "Description": ["h3GetIndexesFromUnidirectionalEdge", "Returns the origin and destination hexagon indexes from the given unidirectional edge H3Index.", "Syntax", "h3GetIndexesFromUnidirectionalEdge(edge)", "Parameter", "edge \u2014 Hexagon index number that represents a unidirectional edge. UInt64.", "Returned value", "A tuple consisting of two values tuple(origin,destination):", "origin \u2014 Origin Hexagon index number. UInt64.destination \u2014 Destination Hexagon index number. UInt64.", "Returns (0,0) if the provided input is not valid."], "Examples": [" SELECT h3GetIndexesFromUnidirectionalEdge(1248204388774707199) as indexes;"], "Category": ["Geo Functions"], "index": 617, "vector_txt": "617:Feature: h3GetIndexesFromUnidirectionalEdge(edge)\nDescription: h3GetIndexesFromUnidirectionalEdgeReturns the origin and destination hexagon indexes from the given unidirectional edge H3Index.Syntaxh3GetIndexesFromUnidirectionalEdge(edge)Parameteredge \u2014 Hexagon index number that represents a unidirectional edge. UInt64.Returned valueA tuple consisting of two values tuple(origin,destination):origin \u2014 Origin Hexagon index number. UInt64.destination \u2014 Destination Hexagon index number. UInt64.Returns (0,0) if the provided input is not valid.\nExamples:  SELECT h3GetIndexesFromUnidirectionalEdge(1248204388774707199) as indexes;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3GetUnidirectionalEdgesFromHexagon"], "Feature": ["h3GetUnidirectionalEdgesFromHexagon(index)"], "Description": ["h3GetUnidirectionalEdgesFromHexagon", "Provides all of the unidirectional edges from the provided H3Index.", "Syntax", "h3GetUnidirectionalEdgesFromHexagon(index)", "Parameter", "index \u2014 Hexagon index number that represents a unidirectional edge. UInt64.", "Returned value", "Array of h3 indexes representing each unidirectional edge. Array(UInt64)."], "Examples": [" SELECT h3GetUnidirectionalEdgesFromHexagon(1248204388774707199) as edges;"], "Category": ["Geo Functions"], "index": 618, "vector_txt": "618:Feature: h3GetUnidirectionalEdgesFromHexagon(index)\nDescription: h3GetUnidirectionalEdgesFromHexagonProvides all of the unidirectional edges from the provided H3Index.Syntaxh3GetUnidirectionalEdgesFromHexagon(index)Parameterindex \u2014 Hexagon index number that represents a unidirectional edge. UInt64.Returned valueArray of h3 indexes representing each unidirectional edge. Array(UInt64).\nExamples:  SELECT h3GetUnidirectionalEdgesFromHexagon(1248204388774707199) as edges;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3GetUnidirectionalEdgeBoundary"], "Feature": ["h3GetUnidirectionalEdgeBoundary(index)"], "Description": ["h3GetUnidirectionalEdgeBoundary", "Returns the coordinates defining the unidirectional edge.", "Syntax", "h3GetUnidirectionalEdgeBoundary(index)", "Parameter", "index \u2014 Hexagon index number that represents a unidirectional edge. UInt64.", "Returned value", "Array of pairs '(lon, lat)'. Array(Float64, Float64)."], "Examples": [" SELECT h3GetUnidirectionalEdgeBoundary(1248204388774707199) as boundary;"], "Category": ["Geo Functions"], "index": 619, "vector_txt": "619:Feature: h3GetUnidirectionalEdgeBoundary(index)\nDescription: h3GetUnidirectionalEdgeBoundaryReturns the coordinates defining the unidirectional edge.Syntaxh3GetUnidirectionalEdgeBoundary(index)Parameterindex \u2014 Hexagon index number that represents a unidirectional edge. UInt64.Returned valueArray of pairs '(lon, lat)'. Array(Float64, Float64).\nExamples:  SELECT h3GetUnidirectionalEdgeBoundary(1248204388774707199) as boundary;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/polygons"], "Title": ["WKT"], "Feature": ["WKT(geo_data)"], "Description": ["WKT", "Returns a WKT (Well Known Text) geometric object from various Geo Data Types. Supported WKT objects are:", "POINTPOLYGONMULTIPOLYGONLINESTRINGMULTILINESTRING", "Syntax", "WKT(geo_data)", "Parameters", "geo_data can be one of the following Geo Data Types or their underlying primitive types:", "PointRingPolygonMultiPolygonLineStringMultiLineString", "Returned value", "WKT geometric object POINT is returned for a Point.WKT geometric object POLYGON is returned for a PolygonWKT geometric object MULTIPOLYGON is returned for a MultiPolygon.WKT geometric object LINESTRING is returned for a LineString.WKT geometric object MULTILINESTRING is returned for a MultiLineString."], "Examples": ["SELECT wkt((0., 0.));", "SELECT wkt([(0., 0.), (10., 0.), (10., 10.), (0., 10.)]);", "SELECT wkt([[[(0., 0.), (10., 0.), (10., 10.), (0., 10.)], [(4., 4.), (5., 4.), (5., 5.), (4., 5.)]], [[(-10., -10.), (-10., -9.), (-9., 10.)]]]);"], "Category": ["Geo Functions"], "index": 620, "vector_txt": "620:Feature: WKT(geo_data)\nDescription: WKTReturns a WKT (Well Known Text) geometric object from various Geo Data Types. Supported WKT objects are:POINTPOLYGONMULTIPOLYGONLINESTRINGMULTILINESTRINGSyntaxWKT(geo_data)Parametersgeo_data can be one of the following Geo Data Types or their underlying primitive types:PointRingPolygonMultiPolygonLineStringMultiLineStringReturned valueWKT geometric object POINT is returned for a Point.WKT geometric object POLYGON is returned for a PolygonWKT geometric object MULTIPOLYGON is returned for a MultiPolygon.WKT geometric object LINESTRING is returned for a LineString.WKT geometric object MULTILINESTRING is returned for a MultiLineString.\nExamples: SELECT wkt((0., 0.));SELECT wkt([(0., 0.), (10., 0.), (10., 10.), (0., 10.)]);SELECT wkt([[[(0., 0.), (10., 0.), (10., 10.), (0., 10.)], [(4., 4.), (5., 4.), (5., 5.), (4., 5.)]], [[(-10., -10.), (-10., -9.), (-9., 10.)]]]);\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/polygons"], "Title": ["readWKTMultiPolygon"], "Feature": ["readWKTMultiPolygon"], "Description": ["readWKTMultiPolygon", "Converts a WKT (Well Known Text) MultiPolygon into a MultiPolygon type."], "Examples": ["SELECT    toTypeName(readWKTMultiPolygon('MULTIPOLYGON(((2 0,10 0,10 10,0 10,2 0),(4 4,5 4,5 5,4 5,4 4)),((-10 -10,-10 -9,-9 10,-10 -10)))')) AS type,    readWKTMultiPolygon('MULTIPOLYGON(((2 0,10 0,10 10,0 10,2 0),(4 4,5 4,5 5,4 5,4 4)),((-10 -10,-10 -9,-9 10,-10 -10)))') AS output FORMAT Markdown"], "Category": ["Geo Functions"], "index": 621, "vector_txt": "621:Feature: readWKTMultiPolygon\nDescription: readWKTMultiPolygonConverts a WKT (Well Known Text) MultiPolygon into a MultiPolygon type.\nExamples: SELECT    toTypeName(readWKTMultiPolygon('MULTIPOLYGON(((2 0,10 0,10 10,0 10,2 0),(4 4,5 4,5 5,4 5,4 4)),((-10 -10,-10 -9,-9 10,-10 -10)))')) AS type,    readWKTMultiPolygon('MULTIPOLYGON(((2 0,10 0,10 10,0 10,2 0),(4 4,5 4,5 5,4 5,4 4)),((-10 -10,-10 -9,-9 10,-10 -10)))') AS output FORMAT Markdown\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/polygons"], "Title": ["readWKTPolygon"], "Feature": ["readWKTPolygon"], "Description": ["readWKTPolygon", "Converts a WKT (Well Known Text) MultiPolygon into a Polygon type."], "Examples": ["SELECT    toTypeName(readWKTPolygon('POLYGON((2 0,10 0,10 10,0 10,2 0))')) AS type,    readWKTPolygon('POLYGON((2 0,10 0,10 10,0 10,2 0))') AS outputFORMAT Markdown"], "Category": ["Geo Functions"], "index": 622, "vector_txt": "622:Feature: readWKTPolygon\nDescription: readWKTPolygonConverts a WKT (Well Known Text) MultiPolygon into a Polygon type.\nExamples: SELECT    toTypeName(readWKTPolygon('POLYGON((2 0,10 0,10 10,0 10,2 0))')) AS type,    readWKTPolygon('POLYGON((2 0,10 0,10 10,0 10,2 0))') AS outputFORMAT Markdown\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/polygons"], "Title": ["readWKTPoint"], "Feature": ["readWKTPoint(wkt_string)"], "Description": ["readWKTPoint", "The readWKTPoint function in ClickHouse parses a Well-Known Text (WKT) representation of a Point geometry and returns a point in the internal ClickHouse format.", "Syntax", "readWKTPoint(wkt_string)", "Arguments", "wkt_string: The input WKT string representing a Point geometry.", "Returned value", "The function returns a ClickHouse internal representation of the Point geometry."], "Examples": ["SELECT readWKTPoint('POINT (1.2 3.4)');"], "Category": ["Geo Functions"], "index": 623, "vector_txt": "623:Feature: readWKTPoint(wkt_string)\nDescription: readWKTPointThe readWKTPoint function in ClickHouse parses a Well-Known Text (WKT) representation of a Point geometry and returns a point in the internal ClickHouse format.SyntaxreadWKTPoint(wkt_string)Argumentswkt_string: The input WKT string representing a Point geometry.Returned valueThe function returns a ClickHouse internal representation of the Point geometry.\nExamples: SELECT readWKTPoint('POINT (1.2 3.4)');\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["emptyArrayString"], "Feature": ["emptyArrayString()"], "Description": ["emptyArrayString", "Returns an empty String array.", "Syntax", "emptyArrayString()", "Arguments", "None.", "Returned value", "An empty array."], "Examples": ["SELECT emptyArrayString();"], "Category": ["Arrays Functions"], "index": 624, "vector_txt": "624:Feature: emptyArrayString()\nDescription: emptyArrayStringReturns an empty String array.SyntaxemptyArrayString()ArgumentsNone.Returned valueAn empty array.\nExamples: SELECT emptyArrayString();\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/polygons"], "Title": ["readWKTLineString"], "Feature": ["readWKTLineString(wkt_string)"], "Description": ["readWKTLineString", "Parses a Well-Known Text (WKT) representation of a LineString geometry and returns it in the internal ClickHouse format.", "Syntax", "readWKTLineString(wkt_string)", "Arguments", "wkt_string: The input WKT string representing a LineString geometry.", "Returned value", "The function returns a ClickHouse internal representation of the linestring geometry."], "Examples": ["SELECT readWKTLineString('LINESTRING (1 1, 2 2, 3 3, 1 1)');"], "Category": ["Geo Functions"], "index": 625, "vector_txt": "625:Feature: readWKTLineString(wkt_string)\nDescription: readWKTLineStringParses a Well-Known Text (WKT) representation of a LineString geometry and returns it in the internal ClickHouse format.SyntaxreadWKTLineString(wkt_string)Argumentswkt_string: The input WKT string representing a LineString geometry.Returned valueThe function returns a ClickHouse internal representation of the linestring geometry.\nExamples: SELECT readWKTLineString('LINESTRING (1 1, 2 2, 3 3, 1 1)');\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/polygons"], "Title": ["readWKTMultiLineString"], "Feature": ["readWKTMultiLineString(wkt_string)"], "Description": ["readWKTMultiLineString", "Parses a Well-Known Text (WKT) representation of a MultiLineString geometry and returns it in the internal ClickHouse format.", "Syntax", "readWKTMultiLineString(wkt_string)", "Arguments", "wkt_string: The input WKT string representing a MultiLineString geometry.", "Returned value", "The function returns a ClickHouse internal representation of the multilinestring geometry."], "Examples": ["SELECT readWKTMultiLineString('MULTILINESTRING ((1 1, 2 2, 3 3), (4 4, 5 5, 6 6))');"], "Category": ["Geo Functions"], "index": 626, "vector_txt": "626:Feature: readWKTMultiLineString(wkt_string)\nDescription: readWKTMultiLineStringParses a Well-Known Text (WKT) representation of a MultiLineString geometry and returns it in the internal ClickHouse format.SyntaxreadWKTMultiLineString(wkt_string)Argumentswkt_string: The input WKT string representing a MultiLineString geometry.Returned valueThe function returns a ClickHouse internal representation of the multilinestring geometry.\nExamples: SELECT readWKTMultiLineString('MULTILINESTRING ((1 1, 2 2, 3 3), (4 4, 5 5, 6 6))');\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/polygons"], "Title": ["readWKTRing"], "Feature": ["readWKTRing(wkt_string)"], "Description": ["readWKTRing", "Parses a Well-Known Text (WKT) representation of a Polygon geometry and returns a ring (closed linestring) in the internal ClickHouse format.", "Syntax", "readWKTRing(wkt_string)", "Arguments", "wkt_string: The input WKT string representing a Polygon geometry.", "Returned value", "The function returns a ClickHouse internal representation of the ring (closed linestring) geometry."], "Examples": ["SELECT readWKTRing('POLYGON ((1 1, 2 2, 3 3, 1 1))');"], "Category": ["Geo Functions"], "index": 627, "vector_txt": "627:Feature: readWKTRing(wkt_string)\nDescription: readWKTRingParses a Well-Known Text (WKT) representation of a Polygon geometry and returns a ring (closed linestring) in the internal ClickHouse format.SyntaxreadWKTRing(wkt_string)Argumentswkt_string: The input WKT string representing a Polygon geometry.Returned valueThe function returns a ClickHouse internal representation of the ring (closed linestring) geometry.\nExamples: SELECT readWKTRing('POLYGON ((1 1, 2 2, 3 3, 1 1))');\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/polygons"], "Title": ["polygonsWithinSpherical"], "Feature": ["polygonsWithinSpherical"], "Description": ["polygonsWithinSpherical", "Returns true or false depending on whether or not one polygon lies completely inside another polygon. Reference https://www.boost.org/doc/libs/1_62_0/libs/geometry/doc/html/geometry/reference/algorithms/within/within_2.html"], "Examples": ["select polygonsWithinSpherical([[[(4.3613577, 50.8651821), (4.349556, 50.8535879), (4.3602419, 50.8435626), (4.3830299, 50.8428851), (4.3904543, 50.8564867), (4.3613148, 50.8651279)]]], [[[(4.346693, 50.858306), (4.367945, 50.852455), (4.366227, 50.840809), (4.344961, 50.833264), (4.338074, 50.848677), (4.346693, 50.858306)]]]);"], "Category": ["Geo Functions"], "index": 628, "vector_txt": "628:Feature: polygonsWithinSpherical\nDescription: polygonsWithinSphericalReturns true or false depending on whether or not one polygon lies completely inside another polygon. Reference https://www.boost.org/doc/libs/1_62_0/libs/geometry/doc/html/geometry/reference/algorithms/within/within_2.html\nExamples: select polygonsWithinSpherical([[[(4.3613577, 50.8651821), (4.349556, 50.8535879), (4.3602419, 50.8435626), (4.3830299, 50.8428851), (4.3904543, 50.8564867), (4.3613148, 50.8651279)]]], [[[(4.346693, 50.858306), (4.367945, 50.852455), (4.366227, 50.840809), (4.344961, 50.833264), (4.338074, 50.848677), (4.346693, 50.858306)]]]);\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/polygons"], "Title": ["polygonsDistanceSpherical"], "Feature": ["polygonsDistanceSpherical"], "Description": ["polygonsDistanceSpherical", "Calculates the minimal distance between two points where one point belongs to the first polygon and the second to another polygon. Spherical means that coordinates are interpreted as coordinates on a pure and ideal sphere, which is not true for the Earth. Using this type of coordinate system speeds up execution, but of course is not precise."], "Examples": ["SELECT polygonsDistanceSpherical([[[(0, 0), (0, 0.1), (0.1, 0.1), (0.1, 0)]]], [[[(10., 10.), (10., 40.), (40., 40.), (40., 10.), (10., 10.)]]])"], "Category": ["Geo Functions"], "index": 629, "vector_txt": "629:Feature: polygonsDistanceSpherical\nDescription: polygonsDistanceSphericalCalculates the minimal distance between two points where one point belongs to the first polygon and the second to another polygon. Spherical means that coordinates are interpreted as coordinates on a pure and ideal sphere, which is not true for the Earth. Using this type of coordinate system speeds up execution, but of course is not precise.\nExamples: SELECT polygonsDistanceSpherical([[[(0, 0), (0, 0.1), (0.1, 0.1), (0.1, 0)]]], [[[(10., 10.), (10., 40.), (40., 40.), (40., 10.), (10., 10.)]]])\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/polygons"], "Title": ["polygonsDistanceCartesian"], "Feature": ["polygonsDistanceCartesian"], "Description": ["polygonsDistanceCartesian", "Calculates distance between two polygons"], "Examples": ["SELECT polygonsDistanceCartesian([[[(0, 0), (0, 0.1), (0.1, 0.1), (0.1, 0)]]], [[[(10., 10.), (10., 40.), (40., 40.), (40., 10.), (10., 10.)]]])"], "Category": ["Geo Functions"], "index": 630, "vector_txt": "630:Feature: polygonsDistanceCartesian\nDescription: polygonsDistanceCartesianCalculates distance between two polygons\nExamples: SELECT polygonsDistanceCartesian([[[(0, 0), (0, 0.1), (0.1, 0.1), (0.1, 0)]]], [[[(10., 10.), (10., 40.), (40., 40.), (40., 10.), (10., 10.)]]])\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/polygons"], "Title": ["polygonsEqualsCartesian"], "Feature": ["polygonsEqualsCartesian"], "Description": ["polygonsEqualsCartesian", "Returns true if two polygons are equal"], "Examples": ["SELECT polygonsEqualsCartesian([[[(1., 1.), (1., 4.), (4., 4.), (4., 1.)]]], [[[(1., 1.), (1., 4.), (4., 4.), (4., 1.), (1., 1.)]]])"], "Category": ["Geo Functions"], "index": 631, "vector_txt": "631:Feature: polygonsEqualsCartesian\nDescription: polygonsEqualsCartesianReturns true if two polygons are equal\nExamples: SELECT polygonsEqualsCartesian([[[(1., 1.), (1., 4.), (4., 4.), (4., 1.)]]], [[[(1., 1.), (1., 4.), (4., 4.), (4., 1.), (1., 1.)]]])\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/polygons"], "Title": ["polygonsSymDifferenceSpherical"], "Feature": ["polygonsSymDifferenceSpherical"], "Description": ["polygonsSymDifferenceSpherical", "Calculates the spatial set theoretic symmetric difference (XOR) between two polygons"], "Examples": ["SELECT wkt(arraySort(polygonsSymDifferenceSpherical([[(50., 50.), (50., -50.), (-50., -50.), (-50., 50.), (50., 50.)], [(10., 10.), (10., 40.), (40., 40.), (40., 10.), (10., 10.)], [(-10., -10.), (-10., -40.), (-40., -40.), (-40., -10.), (-10., -10.)]], [[(-20., -20.), (-20., 20.), (20., 20.), (20., -20.), (-20., -20.)]])));"], "Category": ["Geo Functions"], "index": 632, "vector_txt": "632:Feature: polygonsSymDifferenceSpherical\nDescription: polygonsSymDifferenceSphericalCalculates the spatial set theoretic symmetric difference (XOR) between two polygons\nExamples: SELECT wkt(arraySort(polygonsSymDifferenceSpherical([[(50., 50.), (50., -50.), (-50., -50.), (-50., 50.), (50., 50.)], [(10., 10.), (10., 40.), (40., 40.), (40., 10.), (10., 10.)], [(-10., -10.), (-10., -40.), (-40., -40.), (-40., -10.), (-10., -10.)]], [[(-20., -20.), (-20., 20.), (20., 20.), (20., -20.), (-20., -20.)]])));\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/polygons"], "Title": ["polygonsSymDifferenceCartesian"], "Feature": ["polygonsSymDifferenceCartesian"], "Description": ["polygonsSymDifferenceCartesian", "The same as polygonsSymDifferenceSpherical, but the coordinates are in the Cartesian coordinate system; which is more close to the model of the real Earth."], "Examples": ["SELECT wkt(polygonsSymDifferenceCartesian([[[(0, 0), (0, 3), (1, 2.9), (2, 2.6), (2.6, 2), (2.9, 1), (3, 0), (0, 0)]]], [[[(1., 1.), (1., 4.), (4., 4.), (4., 1.), (1., 1.)]]]))"], "Category": ["Geo Functions"], "index": 633, "vector_txt": "633:Feature: polygonsSymDifferenceCartesian\nDescription: polygonsSymDifferenceCartesianThe same as polygonsSymDifferenceSpherical, but the coordinates are in the Cartesian coordinate system; which is more close to the model of the real Earth.\nExamples: SELECT wkt(polygonsSymDifferenceCartesian([[[(0, 0), (0, 3), (1, 2.9), (2, 2.6), (2.6, 2), (2.9, 1), (3, 0), (0, 0)]]], [[[(1., 1.), (1., 4.), (4., 4.), (4., 1.), (1., 1.)]]]))\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/polygons"], "Title": ["polygonsIntersectionSpherical"], "Feature": ["polygonsIntersectionSpherical"], "Description": ["polygonsIntersectionSpherical", "Calculates the intersection (AND) between polygons, coordinates are spherical."], "Examples": ["SELECT wkt(arrayMap(a -> arrayMap(b -> arrayMap(c -> (round(c.1, 6), round(c.2, 6)), b), a), polygonsIntersectionSpherical([[[(4.3613577, 50.8651821), (4.349556, 50.8535879), (4.3602419, 50.8435626), (4.3830299, 50.8428851), (4.3904543, 50.8564867), (4.3613148, 50.8651279)]]], [[[(4.346693, 50.858306), (4.367945, 50.852455), (4.366227, 50.840809), (4.344961, 50.833264), (4.338074, 50.848677), (4.346693, 50.858306)]]])))"], "Category": ["Geo Functions"], "index": 634, "vector_txt": "634:Feature: polygonsIntersectionSpherical\nDescription: polygonsIntersectionSphericalCalculates the intersection (AND) between polygons, coordinates are spherical.\nExamples: SELECT wkt(arrayMap(a -> arrayMap(b -> arrayMap(c -> (round(c.1, 6), round(c.2, 6)), b), a), polygonsIntersectionSpherical([[[(4.3613577, 50.8651821), (4.349556, 50.8535879), (4.3602419, 50.8435626), (4.3830299, 50.8428851), (4.3904543, 50.8564867), (4.3613148, 50.8651279)]]], [[[(4.346693, 50.858306), (4.367945, 50.852455), (4.366227, 50.840809), (4.344961, 50.833264), (4.338074, 50.848677), (4.346693, 50.858306)]]])))\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["emptyArrayToSingle"], "Feature": ["emptyArrayToSingle"], "Description": ["emptyArrayToSingle", "Accepts an empty array and returns a one-element array that is equal to the default value."], "Examples": [], "Category": ["Arrays Functions"], "index": 635, "vector_txt": "635:Feature: emptyArrayToSingle\nDescription: emptyArrayToSingleAccepts an empty array and returns a one-element array that is equal to the default value.\nExamples: \nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/polygons"], "Title": ["polygonsWithinCartesian"], "Feature": ["polygonsWithinCartesian"], "Description": ["polygonsWithinCartesian", "Returns true if the second polygon is within the first polygon."], "Examples": ["SELECT polygonsWithinCartesian([[[(2., 2.), (2., 3.), (3., 3.), (3., 2.)]]], [[[(1., 1.), (1., 4.), (4., 4.), (4., 1.), (1., 1.)]]])"], "Category": ["Geo Functions"], "index": 636, "vector_txt": "636:Feature: polygonsWithinCartesian\nDescription: polygonsWithinCartesianReturns true if the second polygon is within the first polygon.\nExamples: SELECT polygonsWithinCartesian([[[(2., 2.), (2., 3.), (3., 3.), (3., 2.)]]], [[[(1., 1.), (1., 4.), (4., 4.), (4., 1.), (1., 1.)]]])\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/polygons"], "Title": ["polygonConvexHullCartesian"], "Feature": ["polygonConvexHullCartesian"], "Description": ["polygonConvexHullCartesian", "Calculates a convex hull. Reference", "Coordinates are in Cartesian coordinate system."], "Examples": ["SELECT wkt(polygonConvexHullCartesian([[[(0., 0.), (0., 5.), (5., 5.), (5., 0.), (2., 3.)]]]))"], "Category": ["Geo Functions"], "index": 637, "vector_txt": "637:Feature: polygonConvexHullCartesian\nDescription: polygonConvexHullCartesianCalculates a convex hull. ReferenceCoordinates are in Cartesian coordinate system.\nExamples: SELECT wkt(polygonConvexHullCartesian([[[(0., 0.), (0., 5.), (5., 5.), (5., 0.), (2., 3.)]]]))\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/polygons"], "Title": ["polygonAreaSpherical"], "Feature": ["polygonAreaSpherical"], "Description": ["polygonAreaSpherical", "Calculates the surface area of a polygon."], "Examples": ["SELECT round(polygonAreaSpherical([[[(4.346693, 50.858306), (4.367945, 50.852455), (4.366227, 50.840809), (4.344961, 50.833264), (4.338074, 50.848677), (4.346693, 50.858306)]]]), 14)"], "Category": ["Geo Functions"], "index": 638, "vector_txt": "638:Feature: polygonAreaSpherical\nDescription: polygonAreaSphericalCalculates the surface area of a polygon.\nExamples: SELECT round(polygonAreaSpherical([[[(4.346693, 50.858306), (4.367945, 50.852455), (4.366227, 50.840809), (4.344961, 50.833264), (4.338074, 50.848677), (4.346693, 50.858306)]]]), 14)\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/polygons"], "Title": ["polygonsUnionSpherical"], "Feature": ["polygonsUnionSpherical"], "Description": ["polygonsUnionSpherical", "Calculates a union (OR)."], "Examples": ["SELECT wkt(polygonsUnionSpherical([[[(4.3613577, 50.8651821), (4.349556, 50.8535879), (4.3602419, 50.8435626), (4.3830299, 50.8428851), (4.3904543, 50.8564867), (4.3613148, 50.8651279)]]], [[[(4.346693, 50.858306), (4.367945, 50.852455), (4.366227, 50.840809), (4.344961, 50.833264), (4.338074, 50.848677), (4.346693, 50.858306)]]]))"], "Category": ["Geo Functions"], "index": 639, "vector_txt": "639:Feature: polygonsUnionSpherical\nDescription: polygonsUnionSphericalCalculates a union (OR).\nExamples: SELECT wkt(polygonsUnionSpherical([[[(4.3613577, 50.8651821), (4.349556, 50.8535879), (4.3602419, 50.8435626), (4.3830299, 50.8428851), (4.3904543, 50.8564867), (4.3613148, 50.8651279)]]], [[[(4.346693, 50.858306), (4.367945, 50.852455), (4.366227, 50.840809), (4.344961, 50.833264), (4.338074, 50.848677), (4.346693, 50.858306)]]]))\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/polygons"], "Title": ["polygonPerimeterSpherical"], "Feature": ["polygonPerimeterSpherical"], "Description": ["polygonPerimeterSpherical", "Calculates the perimeter of the polygon."], "Examples": ["SELECT round(polygonPerimeterSpherical([(30.010654, -15.646227), (30.050238, -15.640129), (30.090029, -15.629381), (30.130129, -15.623696), (30.16992, -15.632171), (30.195552, -15.649121), (30.207231, -15.653152), (30.223147, -15.649741), (30.231002, -15.644677), (30.246091, -15.632068), (30.254876, -15.628864), (30.280094, -15.632275), (30.296196, -15.639042), (30.32805, -15.652428), (30.356679, -15.651498), (30.396263, -15.635995), (30.39771, -15.716817), (30.39926, -15.812005), (30.401327, -15.931688), (30.402568, -16.001244), (30.514809, -16.000418), (30.586587, -16.000004), (30.74973, -15.998867), (30.857424, -15.998144), (30.901865, -16.007136), (30.942173, -16.034524), (30.958296, -16.05106), (30.973075, -16.062016), (30.989767, -16.06429), (31.012039, -16.054885), (31.023718, -16.045169), (31.042218, -16.024912), (31.056895, -16.017574), (31.065421, -16.019641), (31.073328, -16.025532), (31.080872, -16.025946), (31.089037, -16.01189), (31.1141, -15.996904), (31.15849, -16.000211), (31.259983, -16.023465), (31.278897, -16.030287), (31.29533, -16.041655), (31.309592, -16.059019), (31.328351, -16.092815), (31.340908, -16.106664), (31.360339, -16.116896), (31.37026, -16.123718), (31.374601, -16.132916), (31.377754, -16.142218), (31.384006, -16.148832), (31.387727, -16.149556), (31.395582, -16.147695), (31.399613, -16.147282), (31.404315, -16.149866), (31.404057, -16.154517), (31.402713, -16.159374), (31.404574, -16.162268), (31.424107, -16.164749), (31.445708, -16.164955), (31.465655, -16.167746), (31.480641, -16.177978), (31.519192, -16.196478), (31.686107, -16.207227), (31.710705, -16.217872), (31.738197, -16.239783), (31.798761, -16.303655), (31.818088, -16.319571), (31.86005, -16.340759), (31.871935, -16.35037), (31.88072, -16.368044), (31.88563, -16.406284), (31.894363, -16.421477), (31.910279, -16.428919), (32.014149, -16.444938), (32.211759, -16.440184), (32.290463, -16.45176), (32.393661, -16.491757), (32.5521, -16.553355), (32.671783, -16.599761), (32.6831, -16.609889), (32.687906, -16.624255), (32.68863, -16.647303), (32.698655, -16.686784), (32.725217, -16.706421), (32.73095, -16.708656), (32.731314, -16.708798), (32.739893, -16.703217), (32.753845, -16.697946), (32.769348, -16.695466), (32.800664, -16.697326), (32.862004, -16.710452), (32.893372, -16.712415), (32.909598, -16.708075), (32.93957, -16.689781), (32.95621, -16.683063), (32.968509, -16.681615999999998), (32.961585, -16.710348), (32.933369, -16.815768), (32.916213, -16.847911), (32.900503, -16.867755), (32.828776, -16.935141), (32.83012, -16.941549), (32.886757, -17.038184), (32.928512, -17.109497), (32.954143, -17.167168), (32.967786, -17.22887), (32.96909, -17.266115), (32.969439, -17.276102), (32.973212, -17.297909), (32.983599, -17.317753), (32.992384, -17.324678), (33.014656, -17.336667), (33.021633, -17.345555), (33.022459, -17.361471), (33.016258, -17.377181), (33.011651, -17.383991), (32.997448, -17.404983), (32.958174, -17.478467), (32.951663, -17.486218), (32.942981, -17.491593), (32.936573, -17.498311), (32.936676, -17.509369), (32.947218, -17.543166), (32.951663, -17.551434), (32.969129, -17.56456), (33.006646, -17.580993), (33.020392, -17.598563), (33.024526, -17.619233), (33.020599, -17.638457), (33.004063, -17.675561), (33.000238, -17.713905), (33.003184, -17.757726), (32.999102, -17.794313), (32.973573, -17.810643), (32.957037, -17.817981), (32.946082, -17.834724), (32.939674, -17.855498), (32.936883, -17.875032), (32.938433, -17.894566), (32.950267, -17.922574), (32.952128, -17.940247), (32.948149, -17.95327), (32.940397, -17.959988), (32.932439, -17.964949), (32.927375, -17.972907), (32.928977, -17.982312), (32.941224, -17.996265), (32.940294, -18.004843), (32.934919, -18.024583), (32.93709, -18.047114), (32.972282, -18.150261), (32.975537, -18.183333), (32.974865, -18.190775), (32.965925, -18.212169), (32.958174, -18.225398), (32.952283, -18.233046), (32.950525999999996, -18.241314), (32.95497, -18.256301), (32.970163, -18.277488), (33.016878, -18.313661), (33.034965, -18.332885), (33.042768, -18.352005), (33.038066, -18.363064), (33.00923, -18.383941), (32.988198, -18.41319), (32.985356, -18.412467), (32.986803, -18.422285), (32.999515, -18.436651), (33.003029, -18.446883), (32.996414, -18.46714), (32.978586, -18.48006), (32.956624, -18.489878), (32.937142, -18.50104), (32.919313, -18.510032), (32.900296, -18.515303), (32.88314, -18.522124), (32.870737, -18.535767), (32.868257, -18.552613), (32.871668, -18.57318), (32.884483, -18.609044), (32.914559, -18.665888), (32.92231, -18.693173), (32.920243, -18.726246), (32.913267, -18.753014), (32.902518, -18.774512), (32.885207, -18.787844), (32.858852, -18.790015), (32.817924, -18.787018), (32.787642, -18.791255), (32.69142, -18.83425), (32.68987, -18.843241), (32.696794, -18.897192), (32.703202, -18.911868), (32.71576, -18.919826), (32.705063, -18.927474), (32.692247, -18.934295), (32.682532, -18.942667), (32.681085, -18.954966), (32.68863, -18.97729), (32.690283, -18.988246), (32.68863, -19.000958), (32.691058, -19.01429), (32.698965, -19.022249), (32.710282, -19.025969), (32.723873, -19.026589), (32.785988, -19.017701), (32.803351, -19.019561), (32.814203, -19.023799), (32.819991, -19.028346), (32.822988, -19.035168), (32.825262, -19.046847), (32.830223, -19.059146), (32.83813, -19.066897), (32.847483, -19.073925), (32.855906, -19.083744), (32.862262, -19.118057), (32.83322, -19.241977), (32.832187, -19.266678), (32.828673, -19.284558), (32.820715, -19.301301), (32.806142, -19.323419), (32.768831, -19.363623), (32.766454, -19.373442), (32.768521, -19.402794), (32.762217, -19.443412), (32.763354, -19.463979), (32.773947, -19.475864), (32.793119, -19.476691), (32.811309, -19.474521), (32.825365, -19.479172), (32.832187, -19.500876), (32.832497000000004, -19.519273), (32.825365, -19.59162), (32.825675, -19.600818), (32.828156, -19.610636), (32.829603, -19.623659), (32.825365, -19.633271), (32.819474, -19.641952), (32.81627, -19.652081), (32.819629, -19.674302), (32.83105, -19.685154), (32.849137, -19.689081), (32.872184, -19.690218), (32.894715, -19.684327), (32.924584, -19.655285), (32.943188, -19.64929), (32.960964, -19.658799), (32.962411, -19.679056), (32.954143, -19.717813), (32.962411, -19.735383), (32.979051, -19.751403), (33.0006, -19.764322), (33.022769, -19.773107), (33.032795, -19.784166), (33.029642, -19.80339), (33.022873, -19.826851), (33.021322, -19.868088), (33.001995, -19.927), (32.998378, -20.000897), (33.004373, -20.024255), (33.007266, -20.032006), (32.95373, -20.030249), (32.940087, -20.041515), (32.934299, -20.072107), (32.926548, -20.086473), (32.910683, -20.091124), (32.894405, -20.094018), (32.88531, -20.10301), (32.877869, -20.151689), (32.872908, -20.167192), (32.859265, -20.190859), (32.857095, -20.200575), (32.858335, -20.207499), (32.865053, -20.220935), (32.86557, -20.228893), (32.858438, -20.259486), (32.852961, -20.273852), (32.845209, -20.286668), (32.800767, -20.338551), (32.735862, -20.414205), (32.704443, -20.471773), (32.671783, -20.531821), (32.646462, -20.557969), (32.603674, -20.56479), (32.556545, -20.559312), (32.513136, -20.564583), (32.481614, -20.603031), (32.471072, -20.645509), (32.469108, -20.68685), (32.483474, -20.794233), (32.49722, -20.898103), (32.491019, -20.936344), (32.467661, -20.980165), (32.417122, -21.040937), (32.339814, -21.134058), (32.345343, -21.142843), (32.359864, -21.151421), (32.368856, -21.162997), (32.373352, -21.163617), (32.377744, -21.16341), (32.380638, -21.165477), (32.380535, -21.172195), (32.376866, -21.178499), (32.37299, -21.183977), (32.37175, -21.187905), (32.444613, -21.304693), (32.445849, -21.308994), (32.447197, -21.313685), (32.408543, -21.290327), (32.37299, -21.327948), (32.324517, -21.378177), (32.272221, -21.432541), (32.219718, -21.486904), (32.167318, -21.541268), (32.114814, -21.595632), (32.062415, -21.649995), (32.010015, -21.704462), (31.957615, -21.758826), (31.905215, -21.813189), (31.852712, -21.867553), (31.800312, -21.92202), (31.747808, -21.976384), (31.695512, -22.030747), (31.643112, -22.085214), (31.590712, -22.139578), (31.538209, -22.193941), (31.485809, -22.248305), (31.433822, -22.302048), (31.36871, -22.345043), (31.288922, -22.39734), (31.265616, -22.365507), (31.255642, -22.357962), (31.24572, -22.357549), (31.229597, -22.363957), (31.221536, -22.364887), (31.213474, -22.36189), (31.197868, -22.352588), (31.190685, -22.350624), (31.183657, -22.34556), (31.163348, -22.322616), (31.152599, -22.316414), (31.137717, -22.318482), (31.10454, -22.333364), (31.097048, -22.334922), (31.087642, -22.336878), (31.07033, -22.333674), (31.036121, -22.319618), (30.927187, -22.295744), (30.867087, -22.289646), (30.83789, -22.282308), (30.805282, -22.294504), (30.693919, -22.302772), (30.674282, -22.30856), (30.647410999999998, -22.32644), (30.632424, -22.330677), (30.625551, -22.32861), (30.610307, -22.318688), (30.601108, -22.316414), (30.57217, -22.316621), (30.507367, -22.309593), (30.488454, -22.310213), (30.46923, -22.315071), (30.431713, -22.331194), (30.412696, -22.336878), (30.372078, -22.343493), (30.334975, -22.344733), (30.300765, -22.336982), (30.269346, -22.316414), (30.25529, -22.304736), (30.240407, -22.296157), (30.2217, -22.290886), (30.196999, -22.289129), (30.15266, -22.294814), (30.13509, -22.293574), (30.111113, -22.282308), (30.082587, -22.262878), (30.067911, -22.25709), (30.038145, -22.253783), (30.035872, -22.250579), (30.034528, -22.246135), (30.015511, -22.227014), (30.005279, -22.22226), (29.983782, -22.217713), (29.973963, -22.213992), (29.946678, -22.198282), (29.932105, -22.194355), (29.896035, -22.191358), (29.871489, -22.179265), (29.837331, -22.172444), (29.779246, -22.136374), (29.758886, -22.130896), (29.691448, -22.1341), (29.679614, -22.138338), (29.661424, -22.126452), (29.641064, -22.129242), (29.60396, -22.145055), (29.570164, -22.141955), (29.551043, -22.145986), (29.542517, -22.162522), (29.53182, -22.172444), (29.506912, -22.170067), (29.456889, -22.158801), (29.436115, -22.163142), (29.399528, -22.182159), (29.378031, -22.192908), (29.363250999999998, -22.192288), (29.356947, -22.190944000000002), (29.350074, -22.186707), (29.273644, -22.125108), (29.26734, -22.115807), (29.259588, -22.096066), (29.254111, -22.087074), (29.244395, -22.075706), (29.239331, -22.072605), (29.144867, -22.075292), (29.10797, -22.069194), (29.070763, -22.051004), (29.040532, -22.020929), (29.021567, -21.982791), (29.013815, -21.940417), (29.017949, -21.898145), (29.028905, -21.876648), (29.045441, -21.852567), (29.057637, -21.829209), (29.05526, -21.809985), (29.038723, -21.797893), (28.998726, -21.786008), (28.980846, -21.774845), (28.951907, -21.768334), (28.891032, -21.764924), (28.860853, -21.757379), (28.714195, -21.693507), (28.66841, -21.679968), (28.629704, -21.651339), (28.6157, -21.647101), (28.585934, -21.644414), (28.553998, -21.636559), (28.542939, -21.638316), (28.532501, -21.643071), (28.497309, -21.651546), (28.481393, -21.657437), (28.464598, -21.660331), (28.443101, -21.655783), (28.361762, -21.616302), (28.321919, -21.603486), (28.284867, -21.596872), (28.165702, -21.595218), (28.090771, -21.581266), (28.032893, -21.577855), (28.016563, -21.572894), (28.002559, -21.564212), (27.990415, -21.551913), (27.984731, -21.542922), (27.975739, -21.522561), (27.970571, -21.514396), (27.963698, -21.510469), (27.958066, -21.511502), (27.953208, -21.510469), (27.949281, -21.500754), (27.954448, -21.487835), (27.950418, -21.482047), (27.943338, -21.479876), (27.939876, -21.478016), (27.941943, -21.468508), (27.949642, -21.456519), (27.953001, -21.448664), (27.950211, -21.438329), (27.920549, -21.381174), (27.904219, -21.364741), (27.897811, -21.35544), (27.896157, -21.347895), (27.896674, -21.332392), (27.8944, -21.32433), (27.884995, -21.310171), (27.849132, -21.269657), (27.823604, -21.231726), (27.793838, -21.197413), (27.724385, -21.149664), (27.709192, -21.134471), (27.674775, -21.090133), (27.666611, -21.071219), (27.666817, -21.053753), (27.678961, -21.000733), (27.680356, -20.979649), (27.672657, -20.923528), (27.672605, -20.913709), (27.675085, -20.891282), (27.674775, -20.879913), (27.676016, -20.866684), (27.681803, -20.857589), (27.689038, -20.849011), (27.694412, -20.837744999999998), (27.709605, -20.756716), (27.707332, -20.716719), (27.682475, -20.637344), (27.690382, -20.60148), (27.702629, -20.566134), (27.705575, -20.526653), (27.698133, -20.509083), (27.683767, -20.49606), (27.66599, -20.489136), (27.625786, -20.488619), (27.590853, -20.473323), (27.534112, -20.483038), (27.45391, -20.473323), (27.340739, -20.473013), (27.306012, -20.477354), (27.268392, -20.49575), (27.283998, -20.35147), (27.266015, -20.234164), (27.214907, -20.110451), (27.201781, -20.092984), (27.183746, -20.082339), (27.16292, -20.076551), (27.141888, -20.073347), (27.129692, -20.072934), (27.119771, -20.073864), (27.109642, -20.073244), (27.097343, -20.068903), (27.086491, -20.060532), (27.069231, -20.03738), (27.060136, -20.027562), (27.02665, -20.010095), (26.9943, -20.006788), (26.961072, -20.007201), (26.925054, -20.000897), (26.811882, -19.94643), (26.774469, -19.939815), (26.750801, -19.939609), (26.730957, -19.935888), (26.713904, -19.927413), (26.698608, -19.91253), (26.684758, -19.894547), (26.67717, -19.886815), (26.673803, -19.883385), (26.659437, -19.875737), (26.614065, -19.863438), (26.595565, -19.855583), (26.581922, -19.842147), (26.574791, -19.819513), (26.566316, -19.800806), (26.549263, -19.784063), (26.508852, -19.759258), (26.489731, -19.75192), (26.450251, -19.743342), (26.431854, -19.73652), (26.412837, -19.71957), (26.385242, -19.679056), (26.362711, -19.667584), (26.332325, -19.662416), (26.324367, -19.659109), (26.312171, -19.651358), (26.312481, -19.649601), (26.319096, -19.646293), (26.326331, -19.633891), (26.333462, -19.613014), (26.330981, -19.604952), (26.32106, -19.592033), (26.313205, -19.584178), (26.30349, -19.577254), (26.292638, -19.572499), (26.239101, -19.571466), (26.194452, -19.560200000000002), (26.155488, -19.537153), (26.13027, -19.501082), (26.034359, -19.243734), (26.011414, -19.199809), (25.981132, -19.161775), (25.956534, -19.122088), (25.948576, -19.103277), (25.944855, -19.079196), (25.948059, -19.058732), (25.964389, -19.021629), (25.9678, -19.000958), (25.967449, -18.999925), (25.940721, -18.921273), (25.815251, -18.813993), (25.779491, -18.738752), (25.773393, -18.665578), (25.761921, -18.630335), (25.736909, -18.608734), (25.698255, -18.590234), (25.669523, -18.566049), (25.622084, -18.501143), (25.608442, -18.487708), (25.574439, -18.465693), (25.508499, -18.399134), (25.49558, -18.378877), (25.490516, -18.365545), (25.481163, -18.323377), (25.473204, -18.303429), (25.440855, -18.2532), (25.408816, -18.175995), (25.387525, -18.138995), (25.357449, -18.115844), (25.323446, -18.09662), (25.296368, -18.068612), (25.255026, -18.001122), (25.226088, -17.931876), (25.21937, -17.908001), (25.21937, -17.879786), (25.259781, -17.794107), (25.266705, -17.800928), (25.285412, -17.809299), (25.315901, -17.83214), (25.335538, -17.841235), (25.345254, -17.842579), (25.376466, -17.841235), (25.409539, -17.853018), (25.420288, -17.854878), (25.49558, -17.854878), (25.500748, -17.856015), (25.510153, -17.861183), (25.516458, -17.862319), (25.522142, -17.860149), (25.530927, -17.850951), (25.536818, -17.848677), (25.603997, -17.836171), (25.657017, -17.81395), (25.681409, -17.81147), (25.694224, -17.819428), (25.70642, -17.829867), (25.743834, -17.839375), (25.765951, -17.849814), (25.786002, -17.862216), (25.794683, -17.872655), (25.804399, -17.888158), (25.849667, -17.906658), (25.86362, -17.923814), (25.847497, -17.929395), (25.846153, -17.943658), (25.853490999999998, -17.959988), (25.86362, -17.971563), (25.924495, -17.998952), (25.966973, -18.000502), (25.978548, -17.998952), (26.033739, -17.971563), (26.04056, -17.978488), (26.046554, -17.966292), (26.062471, -17.962882), (26.081178, -17.962365), (26.095234, -17.958541), (26.096164, -17.954614), (26.0942, -17.941901), (26.095234, -17.938077), (26.101228, -17.935803), (26.118591, -17.931566), (26.135438, -17.922574), (26.158589, -17.918337), (26.167477, -17.913582), (26.203031, -17.887227), (26.211919, -17.882783), (26.221117, -17.886297), (26.228249, -17.894669), (26.233933, -17.903971), (26.239204, -17.910172), (26.248299, -17.913376), (26.294291, -17.918543), (26.3038, -17.922781), (26.311965, -17.928362), (26.318269, -17.934356), (26.325504, -17.93601), (26.362711, -17.930636), (26.408599, -17.939007), (26.485494, -17.979315), (26.527145, -17.992027), (26.553604, -17.996471), (26.570243, -18.002879), (26.583369, -18.013215), (26.598872, -18.029958), (26.612721, -18.041223), (26.628844, -18.049181), (26.685689, -18.066751), (26.700003, -18.069232), (26.71194, -18.065821), (26.740569, -18.0405), (26.753591, -18.032955), (26.769714, -18.029028), (26.794002, -18.026237), (26.88826, -17.984586), (26.912031, -17.992027), (26.94867, -17.968876), (26.95916, -17.964742), (27.006289, -17.962675), (27.021275, -17.958541), (27.048457, -17.944278), (27.078171, -17.916993), (27.11543, -17.882163), (27.149019, -17.842476), (27.146539, -17.818911), (27.145299, -17.794107), (27.146952, -17.783875), (27.157081, -17.769302), (27.422078, -17.504822), (27.524294, -17.415112), (27.577314, -17.363125), (27.604495, -17.312792), (27.624856, -17.233314), (27.641186, -17.198484), (27.777301, -17.001183), (27.816886, -16.959636), (27.868562, -16.929663), (28.022993, -16.865393), (28.113922, -16.827551), (28.21252, -16.748589), (28.280113, -16.706524), (28.643295, -16.568755), (28.690734, -16.56028), (28.718794, -16.56028), (28.73285, -16.55811), (28.741377, -16.550668), (28.761117, -16.532271), (28.769282, -16.515218), (28.808866, -16.486279), (28.822509, -16.470776), (28.829124, -16.434603), (28.833051, -16.426438), (28.857236, -16.388198), (28.857029, -16.36546), (28.840492, -16.323602), (28.836772, -16.306342), (28.840286, -16.284741), (28.86416, -16.231205), (28.847107, -16.202679), (28.852481, -16.162785), (28.8654, -16.121237), (28.870981, -16.087234), (28.868501, -16.08217), (28.86385, -16.076589), (28.859303, -16.069561), (28.857236, -16.060466), (28.860336, -16.049407), (28.874082, -16.028943), (28.877183, -16.022018), (28.898887, -15.995457), (28.932373, -15.963727), (28.946862, -15.957235), (28.951287, -15.955252), (28.972784, -15.951428), (29.018053, -15.950602), (29.042341, -15.946261), (29.055053, -15.934375), (29.076344, -15.895411), (29.086162, -15.884559), (29.102182, -15.870916), (29.121716, -15.859341), (29.141869, -15.854483), (29.150964, -15.848799), (29.186311, -15.812832), (29.406969, -15.714233), (29.422059, -15.711030000000001), (29.508462, -15.703588), (29.526239, -15.692839), (29.563446, -15.662144), (29.587217, -15.655736), (29.608559, -15.658422999999999), (29.62799, -15.663591), (29.648505, -15.666588), (29.672793, -15.663281), (29.73005, -15.644677), (29.773252, -15.638062), (29.814283, -15.619666), (29.837331, -15.614808), (29.881773, -15.618839), (29.967504, -15.641473), (30.010654, -15.646227)]), 6)"], "Category": ["Geo Functions"], "index": 640, "vector_txt": "640:Feature: polygonPerimeterSpherical\nDescription: polygonPerimeterSphericalCalculates the perimeter of the polygon.\nExamples: SELECT round(polygonPerimeterSpherical([(30.010654, -15.646227), (30.050238, -15.640129), (30.090029, -15.629381), (30.130129, -15.623696), (30.16992, -15.632171), (30.195552, -15.649121), (30.207231, -15.653152), (30.223147, -15.649741), (30.231002, -15.644677), (30.246091, -15.632068), (30.254876, -15.628864), (30.280094, -15.632275), (30.296196, -15.639042), (30.32805, -15.652428), (30.356679, -15.651498), (30.396263, -15.635995), (30.39771, -15.716817), (30.39926, -15.812005), (30.401327, -15.931688), (30.402568, -16.001244), (30.514809, -16.000418), (30.586587, -16.000004), (30.74973, -15.998867), (30.857424, -15.998144), (30.901865, -16.007136), (30.942173, -16.034524), (30.958296, -16.05106), (30.973075, -16.062016), (30.989767, -16.06429), (31.012039, -16.054885), (31.023718, -16.045169), (31.042218, -16.024912), (31.056895, -16.017574), (31.065421, -16.019641), (31.073328, -16.025532), (31.080872, -16.025946), (31.089037, -16.01189), (31.1141, -15.996904), (31.15849, -16.000211), (31.259983, -16.023465), (31.278897, -16.030287), (31.29533, -16.041655), (31.309592, -16.059019), (31.328351, -16.092815), (31.340908, -16.106664), (31.360339, -16.116896), (31.37026, -16.123718), (31.374601, -16.132916), (31.377754, -16.142218), (31.384006, -16.148832), (31.387727, -16.149556), (31.395582, -16.147695), (31.399613, -16.147282), (31.404315, -16.149866), (31.404057, -16.154517), (31.402713, -16.159374), (31.404574, -16.162268), (31.424107, -16.164749), (31.445708, -16.164955), (31.465655, -16.167746), (31.480641, -16.177978), (31.519192, -16.196478), (31.686107, -16.207227), (31.710705, -16.217872), (31.738197, -16.239783), (31.798761, -16.303655), (31.818088, -16.319571), (31.86005, -16.340759), (31.871935, -16.35037), (31.88072, -16.368044), (31.88563, -16.406284), (31.894363, -16.421477), (31.910279, -16.428919), (32.014149, -16.444938), (32.211759, -16.440184), (32.290463, -16.45176), (32.393661, -16.491757), (32.5521, -16.553355), (32.671783, -16.599761), (32.6831, -16.609889), (32.687906, -16.624255), (32.68863, -16.647303), (32.698655, -16.686784), (32.725217, -16.706421), (32.73095, -16.708656), (32.731314, -16.708798), (32.739893, -16.703217), (32.753845, -16.697946), (32.769348, -16.695466), (32.800664, -16.697326), (32.862004, -16.710452), (32.893372, -16.712415), (32.909598, -16.708075), (32.93957, -16.689781), (32.95621, -16.683063), (32.968509, -16.681615999999998), (32.961585, -16.710348), (32.933369, -16.815768), (32.916213, -16.847911), (32.900503, -16.867755), (32.828776, -16.935141), (32.83012, -16.941549), (32.886757, -17.038184), (32.928512, -17.109497), (32.954143, -17.167168), (32.967786, -17.22887), (32.96909, -17.266115), (32.969439, -17.276102), (32.973212, -17.297909), (32.983599, -17.317753), (32.992384, -17.324678), (33.014656, -17.336667), (33.021633, -17.345555), (33.022459, -17.361471), (33.016258, -17.377181), (33.011651, -17.383991), (32.997448, -17.404983), (32.958174, -17.478467), (32.951663, -17.486218), (32.942981, -17.491593), (32.936573, -17.498311), (32.936676, -17.509369), (32.947218, -17.543166), (32.951663, -17.551434), (32.969129, -17.56456), (33.006646, -17.580993), (33.020392, -17.598563), (33.024526, -17.619233), (33.020599, -17.638457), (33.004063, -17.675561), (33.000238, -17.713905), (33.003184, -17.757726), (32.999102, -17.794313), (32.973573, -17.810643), (32.957037, -17.817981), (32.946082, -17.834724), (32.939674, -17.855498), (32.936883, -17.875032), (32.938433, -17.894566), (32.950267, -17.922574), (32.952128, -17.940247), (32.948149, -17.95327), (32.940397, -17.959988), (32.932439, -17.964949), (32.927375, -17.972907), (32.928977, -17.982312), (32.941224, -17.996265), (32.940294, -18.004843), (32.934919, -18.024583), (32.93709, -18.047114), (32.972282, -18.150261), (32.975537, -18.183333), (32.974865, -18.190775), (32.965925, -18.212169), (32.958174, -18.225398), (32.952283, -18.233046), (32.950525999999996, -18.241314), (32.95497, -18.256301), (32.970163, -18.277488), (33.016878, -18.313661), (33.034965, -18.332885), (33.042768, -18.352005), (33.038066, -18.363064), (33.00923, -18.383941), (32.988198, -18.41319), (32.985356, -18.412467), (32.986803, -18.422285), (32.999515, -18.436651), (33.003029, -18.446883), (32.996414, -18.46714), (32.978586, -18.48006), (32.956624, -18.489878), (32.937142, -18.50104), (32.919313, -18.510032), (32.900296, -18.515303), (32.88314, -18.522124), (32.870737, -18.535767), (32.868257, -18.552613), (32.871668, -18.57318), (32.884483, -18.609044), (32.914559, -18.665888), (32.92231, -18.693173), (32.920243, -18.726246), (32.913267, -18.753014), (32.902518, -18.774512), (32.885207, -18.787844), (32.858852, -18.790015), (32.817924, -18.787018), (32.787642, -18.791255), (32.69142, -18.83425), (32.68987, -18.843241), (32.696794, -18.897192), (32.703202, -18.911868), (32.71576, -18.919826), (32.705063, -18.927474), (32.692247, -18.934295), (32.682532, -18.942667), (32.681085, -18.954966), (32.68863, -18.97729), (32.690283, -18.988246), (32.68863, -19.000958), (32.691058, -19.01429), (32.698965, -19.022249), (32.710282, -19.025969), (32.723873, -19.026589), (32.785988, -19.017701), (32.803351, -19.019561), (32.814203, -19.023799), (32.819991, -19.028346), (32.822988, -19.035168), (32.825262, -19.046847), (32.830223, -19.059146), (32.83813, -19.066897), (32.847483, -19.073925), (32.855906, -19.083744), (32.862262, -19.118057), (32.83322, -19.241977), (32.832187, -19.266678), (32.828673, -19.284558), (32.820715, -19.301301), (32.806142, -19.323419), (32.768831, -19.363623), (32.766454, -19.373442), (32.768521, -19.402794), (32.762217, -19.443412), (32.763354, -19.463979), (32.773947, -19.475864), (32.793119, -19.476691), (32.811309, -19.474521), (32.825365, -19.479172), (32.832187, -19.500876), (32.832497000000004, -19.519273), (32.825365, -19.59162), (32.825675, -19.600818), (32.828156, -19.610636), (32.829603, -19.623659), (32.825365, -19.633271), (32.819474, -19.641952), (32.81627, -19.652081), (32.819629, -19.674302), (32.83105, -19.685154), (32.849137, -19.689081), (32.872184, -19.690218), (32.894715, -19.684327), (32.924584, -19.655285), (32.943188, -19.64929), (32.960964, -19.658799), (32.962411, -19.679056), (32.954143, -19.717813), (32.962411, -19.735383), (32.979051, -19.751403), (33.0006, -19.764322), (33.022769, -19.773107), (33.032795, -19.784166), (33.029642, -19.80339), (33.022873, -19.826851), (33.021322, -19.868088), (33.001995, -19.927), (32.998378, -20.000897), (33.004373, -20.024255), (33.007266, -20.032006), (32.95373, -20.030249), (32.940087, -20.041515), (32.934299, -20.072107), (32.926548, -20.086473), (32.910683, -20.091124), (32.894405, -20.094018), (32.88531, -20.10301), (32.877869, -20.151689), (32.872908, -20.167192), (32.859265, -20.190859), (32.857095, -20.200575), (32.858335, -20.207499), (32.865053, -20.220935), (32.86557, -20.228893), (32.858438, -20.259486), (32.852961, -20.273852), (32.845209, -20.286668), (32.800767, -20.338551), (32.735862, -20.414205), (32.704443, -20.471773), (32.671783, -20.531821), (32.646462, -20.557969), (32.603674, -20.56479), (32.556545, -20.559312), (32.513136, -20.564583), (32.481614, -20.603031), (32.471072, -20.645509), (32.469108, -20.68685), (32.483474, -20.794233), (32.49722, -20.898103), (32.491019, -20.936344), (32.467661, -20.980165), (32.417122, -21.040937), (32.339814, -21.134058), (32.345343, -21.142843), (32.359864, -21.151421), (32.368856, -21.162997), (32.373352, -21.163617), (32.377744, -21.16341), (32.380638, -21.165477), (32.380535, -21.172195), (32.376866, -21.178499), (32.37299, -21.183977), (32.37175, -21.187905), (32.444613, -21.304693), (32.445849, -21.308994), (32.447197, -21.313685), (32.408543, -21.290327), (32.37299, -21.327948), (32.324517, -21.378177), (32.272221, -21.432541), (32.219718, -21.486904), (32.167318, -21.541268), (32.114814, -21.595632), (32.062415, -21.649995), (32.010015, -21.704462), (31.957615, -21.758826), (31.905215, -21.813189), (31.852712, -21.867553), (31.800312, -21.92202), (31.747808, -21.976384), (31.695512, -22.030747), (31.643112, -22.085214), (31.590712, -22.139578), (31.538209, -22.193941), (31.485809, -22.248305), (31.433822, -22.302048), (31.36871, -22.345043), (31.288922, -22.39734), (31.265616, -22.365507), (31.255642, -22.357962), (31.24572, -22.357549), (31.229597, -22.363957), (31.221536, -22.364887), (31.213474, -22.36189), (31.197868, -22.352588), (31.190685, -22.350624), (31.183657, -22.34556), (31.163348, -22.322616), (31.152599, -22.316414), (31.137717, -22.318482), (31.10454, -22.333364), (31.097048, -22.334922), (31.087642, -22.336878), (31.07033, -22.333674), (31.036121, -22.319618), (30.927187, -22.295744), (30.867087, -22.289646), (30.83789, -22.282308), (30.805282, -22.294504), (30.693919, -22.302772), (30.674282, -22.30856), (30.647410999999998, -22.32644), (30.632424, -22.330677), (30.625551, -22.32861), (30.610307, -22.318688), (30.601108, -22.316414), (30.57217, -22.316621), (30.507367, -22.309593), (30.488454, -22.310213), (30.46923, -22.315071), (30.431713, -22.331194), (30.412696, -22.336878), (30.372078, -22.343493), (30.334975, -22.344733), (30.300765, -22.336982), (30.269346, -22.316414), (30.25529, -22.304736), (30.240407, -22.296157), (30.2217, -22.290886), (30.196999, -22.289129), (30.15266, -22.294814), (30.13509, -22.293574), (30.111113, -22.282308), (30.082587, -22.262878), (30.067911, -22.25709), (30.038145, -22.253783), (30.035872, -22.250579), (30.034528, -22.246135), (30.015511, -22.227014), (30.005279, -22.22226), (29.983782, -22.217713), (29.973963, -22.213992), (29.946678, -22.198282), (29.932105, -22.194355), (29.896035, -22.191358), (29.871489, -22.179265), (29.837331, -22.172444), (29.779246, -22.136374), (29.758886, -22.130896), (29.691448, -22.1341), (29.679614, -22.138338), (29.661424, -22.126452), (29.641064, -22.129242), (29.60396, -22.145055), (29.570164, -22.141955), (29.551043, -22.145986), (29.542517, -22.162522), (29.53182, -22.172444), (29.506912, -22.170067), (29.456889, -22.158801), (29.436115, -22.163142), (29.399528, -22.182159), (29.378031, -22.192908), (29.363250999999998, -22.192288), (29.356947, -22.190944000000002), (29.350074, -22.186707), (29.273644, -22.125108), (29.26734, -22.115807), (29.259588, -22.096066), (29.254111, -22.087074), (29.244395, -22.075706), (29.239331, -22.072605), (29.144867, -22.075292), (29.10797, -22.069194), (29.070763, -22.051004), (29.040532, -22.020929), (29.021567, -21.982791), (29.013815, -21.940417), (29.017949, -21.898145), (29.028905, -21.876648), (29.045441, -21.852567), (29.057637, -21.829209), (29.05526, -21.809985), (29.038723, -21.797893), (28.998726, -21.786008), (28.980846, -21.774845), (28.951907, -21.768334), (28.891032, -21.764924), (28.860853, -21.757379), (28.714195, -21.693507), (28.66841, -21.679968), (28.629704, -21.651339), (28.6157, -21.647101), (28.585934, -21.644414), (28.553998, -21.636559), (28.542939, -21.638316), (28.532501, -21.643071), (28.497309, -21.651546), (28.481393, -21.657437), (28.464598, -21.660331), (28.443101, -21.655783), (28.361762, -21.616302), (28.321919, -21.603486), (28.284867, -21.596872), (28.165702, -21.595218), (28.090771, -21.581266), (28.032893, -21.577855), (28.016563, -21.572894), (28.002559, -21.564212), (27.990415, -21.551913), (27.984731, -21.542922), (27.975739, -21.522561), (27.970571, -21.514396), (27.963698, -21.510469), (27.958066, -21.511502), (27.953208, -21.510469), (27.949281, -21.500754), (27.954448, -21.487835), (27.950418, -21.482047), (27.943338, -21.479876), (27.939876, -21.478016), (27.941943, -21.468508), (27.949642, -21.456519), (27.953001, -21.448664), (27.950211, -21.438329), (27.920549, -21.381174), (27.904219, -21.364741), (27.897811, -21.35544), (27.896157, -21.347895), (27.896674, -21.332392), (27.8944, -21.32433), (27.884995, -21.310171), (27.849132, -21.269657), (27.823604, -21.231726), (27.793838, -21.197413), (27.724385, -21.149664), (27.709192, -21.134471), (27.674775, -21.090133), (27.666611, -21.071219), (27.666817, -21.053753), (27.678961, -21.000733), (27.680356, -20.979649), (27.672657, -20.923528), (27.672605, -20.913709), (27.675085, -20.891282), (27.674775, -20.879913), (27.676016, -20.866684), (27.681803, -20.857589), (27.689038, -20.849011), (27.694412, -20.837744999999998), (27.709605, -20.756716), (27.707332, -20.716719), (27.682475, -20.637344), (27.690382, -20.60148), (27.702629, -20.566134), (27.705575, -20.526653), (27.698133, -20.509083), (27.683767, -20.49606), (27.66599, -20.489136), (27.625786, -20.488619), (27.590853, -20.473323), (27.534112, -20.483038), (27.45391, -20.473323), (27.340739, -20.473013), (27.306012, -20.477354), (27.268392, -20.49575), (27.283998, -20.35147), (27.266015, -20.234164), (27.214907, -20.110451), (27.201781, -20.092984), (27.183746, -20.082339), (27.16292, -20.076551), (27.141888, -20.073347), (27.129692, -20.072934), (27.119771, -20.073864), (27.109642, -20.073244), (27.097343, -20.068903), (27.086491, -20.060532), (27.069231, -20.03738), (27.060136, -20.027562), (27.02665, -20.010095), (26.9943, -20.006788), (26.961072, -20.007201), (26.925054, -20.000897), (26.811882, -19.94643), (26.774469, -19.939815), (26.750801, -19.939609), (26.730957, -19.935888), (26.713904, -19.927413), (26.698608, -19.91253), (26.684758, -19.894547), (26.67717, -19.886815), (26.673803, -19.883385), (26.659437, -19.875737), (26.614065, -19.863438), (26.595565, -19.855583), (26.581922, -19.842147), (26.574791, -19.819513), (26.566316, -19.800806), (26.549263, -19.784063), (26.508852, -19.759258), (26.489731, -19.75192), (26.450251, -19.743342), (26.431854, -19.73652), (26.412837, -19.71957), (26.385242, -19.679056), (26.362711, -19.667584), (26.332325, -19.662416), (26.324367, -19.659109), (26.312171, -19.651358), (26.312481, -19.649601), (26.319096, -19.646293), (26.326331, -19.633891), (26.333462, -19.613014), (26.330981, -19.604952), (26.32106, -19.592033), (26.313205, -19.584178), (26.30349, -19.577254), (26.292638, -19.572499), (26.239101, -19.571466), (26.194452, -19.560200000000002), (26.155488, -19.537153), (26.13027, -19.501082), (26.034359, -19.243734), (26.011414, -19.199809), (25.981132, -19.161775), (25.956534, -19.122088), (25.948576, -19.103277), (25.944855, -19.079196), (25.948059, -19.058732), (25.964389, -19.021629), (25.9678, -19.000958), (25.967449, -18.999925), (25.940721, -18.921273), (25.815251, -18.813993), (25.779491, -18.738752), (25.773393, -18.665578), (25.761921, -18.630335), (25.736909, -18.608734), (25.698255, -18.590234), (25.669523, -18.566049), (25.622084, -18.501143), (25.608442, -18.487708), (25.574439, -18.465693), (25.508499, -18.399134), (25.49558, -18.378877), (25.490516, -18.365545), (25.481163, -18.323377), (25.473204, -18.303429), (25.440855, -18.2532), (25.408816, -18.175995), (25.387525, -18.138995), (25.357449, -18.115844), (25.323446, -18.09662), (25.296368, -18.068612), (25.255026, -18.001122), (25.226088, -17.931876), (25.21937, -17.908001), (25.21937, -17.879786), (25.259781, -17.794107), (25.266705, -17.800928), (25.285412, -17.809299), (25.315901, -17.83214), (25.335538, -17.841235), (25.345254, -17.842579), (25.376466, -17.841235), (25.409539, -17.853018), (25.420288, -17.854878), (25.49558, -17.854878), (25.500748, -17.856015), (25.510153, -17.861183), (25.516458, -17.862319), (25.522142, -17.860149), (25.530927, -17.850951), (25.536818, -17.848677), (25.603997, -17.836171), (25.657017, -17.81395), (25.681409, -17.81147), (25.694224, -17.819428), (25.70642, -17.829867), (25.743834, -17.839375), (25.765951, -17.849814), (25.786002, -17.862216), (25.794683, -17.872655), (25.804399, -17.888158), (25.849667, -17.906658), (25.86362, -17.923814), (25.847497, -17.929395), (25.846153, -17.943658), (25.853490999999998, -17.959988), (25.86362, -17.971563), (25.924495, -17.998952), (25.966973, -18.000502), (25.978548, -17.998952), (26.033739, -17.971563), (26.04056, -17.978488), (26.046554, -17.966292), (26.062471, -17.962882), (26.081178, -17.962365), (26.095234, -17.958541), (26.096164, -17.954614), (26.0942, -17.941901), (26.095234, -17.938077), (26.101228, -17.935803), (26.118591, -17.931566), (26.135438, -17.922574), (26.158589, -17.918337), (26.167477, -17.913582), (26.203031, -17.887227), (26.211919, -17.882783), (26.221117, -17.886297), (26.228249, -17.894669), (26.233933, -17.903971), (26.239204, -17.910172), (26.248299, -17.913376), (26.294291, -17.918543), (26.3038, -17.922781), (26.311965, -17.928362), (26.318269, -17.934356), (26.325504, -17.93601), (26.362711, -17.930636), (26.408599, -17.939007), (26.485494, -17.979315), (26.527145, -17.992027), (26.553604, -17.996471), (26.570243, -18.002879), (26.583369, -18.013215), (26.598872, -18.029958), (26.612721, -18.041223), (26.628844, -18.049181), (26.685689, -18.066751), (26.700003, -18.069232), (26.71194, -18.065821), (26.740569, -18.0405), (26.753591, -18.032955), (26.769714, -18.029028), (26.794002, -18.026237), (26.88826, -17.984586), (26.912031, -17.992027), (26.94867, -17.968876), (26.95916, -17.964742), (27.006289, -17.962675), (27.021275, -17.958541), (27.048457, -17.944278), (27.078171, -17.916993), (27.11543, -17.882163), (27.149019, -17.842476), (27.146539, -17.818911), (27.145299, -17.794107), (27.146952, -17.783875), (27.157081, -17.769302), (27.422078, -17.504822), (27.524294, -17.415112), (27.577314, -17.363125), (27.604495, -17.312792), (27.624856, -17.233314), (27.641186, -17.198484), (27.777301, -17.001183), (27.816886, -16.959636), (27.868562, -16.929663), (28.022993, -16.865393), (28.113922, -16.827551), (28.21252, -16.748589), (28.280113, -16.706524), (28.643295, -16.568755), (28.690734, -16.56028), (28.718794, -16.56028), (28.73285, -16.55811), (28.741377, -16.550668), (28.761117, -16.532271), (28.769282, -16.515218), (28.808866, -16.486279), (28.822509, -16.470776), (28.829124, -16.434603), (28.833051, -16.426438), (28.857236, -16.388198), (28.857029, -16.36546), (28.840492, -16.323602), (28.836772, -16.306342), (28.840286, -16.284741), (28.86416, -16.231205), (28.847107, -16.202679), (28.852481, -16.162785), (28.8654, -16.121237), (28.870981, -16.087234), (28.868501, -16.08217), (28.86385, -16.076589), (28.859303, -16.069561), (28.857236, -16.060466), (28.860336, -16.049407), (28.874082, -16.028943), (28.877183, -16.022018), (28.898887, -15.995457), (28.932373, -15.963727), (28.946862, -15.957235), (28.951287, -15.955252), (28.972784, -15.951428), (29.018053, -15.950602), (29.042341, -15.946261), (29.055053, -15.934375), (29.076344, -15.895411), (29.086162, -15.884559), (29.102182, -15.870916), (29.121716, -15.859341), (29.141869, -15.854483), (29.150964, -15.848799), (29.186311, -15.812832), (29.406969, -15.714233), (29.422059, -15.711030000000001), (29.508462, -15.703588), (29.526239, -15.692839), (29.563446, -15.662144), (29.587217, -15.655736), (29.608559, -15.658422999999999), (29.62799, -15.663591), (29.648505, -15.666588), (29.672793, -15.663281), (29.73005, -15.644677), (29.773252, -15.638062), (29.814283, -15.619666), (29.837331, -15.614808), (29.881773, -15.618839), (29.967504, -15.641473), (30.010654, -15.646227)]), 6)\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/polygons"], "Title": ["polygonsIntersectionCartesian"], "Feature": ["polygonsIntersectionCartesian"], "Description": ["polygonsIntersectionCartesian", "Calculates the intersection of polygons."], "Examples": ["SELECT wkt(polygonsIntersectionCartesian([[[(0., 0.), (0., 3.), (1., 2.9), (2., 2.6), (2.6, 2.), (2.9, 1.), (3., 0.), (0., 0.)]]], [[[(1., 1.), (1., 4.), (4., 4.), (4., 1.), (1., 1.)]]]))"], "Category": ["Geo Functions"], "index": 641, "vector_txt": "641:Feature: polygonsIntersectionCartesian\nDescription: polygonsIntersectionCartesianCalculates the intersection of polygons.\nExamples: SELECT wkt(polygonsIntersectionCartesian([[[(0., 0.), (0., 3.), (1., 2.9), (2., 2.6), (2.6, 2.), (2.9, 1.), (3., 0.), (0., 0.)]]], [[[(1., 1.), (1., 4.), (4., 4.), (4., 1.), (1., 1.)]]]))\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/polygons"], "Title": ["polygonAreaCartesian"], "Feature": ["polygonAreaCartesian"], "Description": ["polygonAreaCartesian", "Calculates the area of a polygon"], "Examples": ["SELECT polygonAreaCartesian([[[(0., 0.), (0., 5.), (5., 5.), (5., 0.)]]])"], "Category": ["Geo Functions"], "index": 642, "vector_txt": "642:Feature: polygonAreaCartesian\nDescription: polygonAreaCartesianCalculates the area of a polygon\nExamples: SELECT polygonAreaCartesian([[[(0., 0.), (0., 5.), (5., 5.), (5., 0.)]]])\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/polygons"], "Title": ["polygonPerimeterCartesian"], "Feature": ["polygonPerimeterCartesian"], "Description": ["polygonPerimeterCartesian", "Calculates the perimeter of a polygon."], "Examples": ["SELECT polygonPerimeterCartesian([[[(0., 0.), (0., 5.), (5., 5.), (5., 0.)]]])"], "Category": ["Geo Functions"], "index": 643, "vector_txt": "643:Feature: polygonPerimeterCartesian\nDescription: polygonPerimeterCartesianCalculates the perimeter of a polygon.\nExamples: SELECT polygonPerimeterCartesian([[[(0., 0.), (0., 5.), (5., 5.), (5., 0.)]]])\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/polygons"], "Title": ["polygonsUnionCartesian"], "Feature": ["polygonsUnionCartesian"], "Description": ["polygonsUnionCartesian", "Calculates the union of polygons."], "Examples": ["SELECT wkt(polygonsUnionCartesian([[[(0., 0.), (0., 3.), (1., 2.9), (2., 2.6), (2.6, 2.), (2.9, 1), (3., 0.), (0., 0.)]]], [[[(1., 1.), (1., 4.), (4., 4.), (4., 1.), (1., 1.)]]]))"], "Category": ["Geo Functions"], "index": 644, "vector_txt": "644:Feature: polygonsUnionCartesian\nDescription: polygonsUnionCartesianCalculates the union of polygons.\nExamples: SELECT wkt(polygonsUnionCartesian([[[(0., 0.), (0., 3.), (1., 2.9), (2., 2.6), (2.6, 2.), (2.9, 1), (3., 0.), (0., 0.)]]], [[[(1., 1.), (1., 4.), (4., 4.), (4., 1.), (1., 1.)]]]))\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/s2"], "Title": ["S2Index"], "Feature": ["S2Index"], "Description": ["S2Index", "S2 is a geographical indexing system where all geographical data is represented on a three-dimensional sphere (similar to a globe).", "In the S2 library points are represented as the S2 Index - a specific number which encodes internally a point on the surface of a unit sphere, unlike traditional (latitude, longitude) pairs. To get the S2 point index for a given point specified in the format (latitude, longitude) use the geoToS2 function. Also, you can use the s2ToGeo function for getting geographical coordinates corresponding to the specified S2 point index."], "Examples": [], "Category": ["Geo Functions"], "index": 645, "vector_txt": "645:Feature: S2Index\nDescription: S2IndexS2 is a geographical indexing system where all geographical data is represented on a three-dimensional sphere (similar to a globe).In the S2 library points are represented as the S2 Index - a specific number which encodes internally a point on the surface of a unit sphere, unlike traditional (latitude, longitude) pairs. To get the S2 point index for a given point specified in the format (latitude, longitude) use the geoToS2 function. Also, you can use the s2ToGeo function for getting geographical coordinates corresponding to the specified S2 point index.\nExamples: \nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["range(end), range([start, ] end [, step])"], "Feature": ["range([start, ] end [, step])"], "Description": ["range(end), range([start, ] end [, step])", "Returns an array of numbers from start to end - 1 by step. The supported types are UInt8, UInt16, UInt32, UInt64, Int8, Int16, Int32, Int64.", "Syntax", "range([start, ] end [, step])", "Arguments", "start \u2014 The first element of the array. Optional, required if step is used. Default value: 0.end \u2014 The number before which the array is constructed. Required.step \u2014 Determines the incremental step between each element in the array. Optional. Default value: 1.", "Returned value", "Array of numbers from start to end - 1 by step.", "Implementation details", "All arguments start, end, step must be below data types: UInt8, UInt16, UInt32, UInt64,Int8, Int16, Int32, Int64, as well as elements of the returned array, which's type is a super type of all arguments.An exception is thrown if query results in arrays with a total length of more than number of elements specified by the function_range_max_elements_in_block setting.Returns Null if any argument has Nullable(Nothing) type. An exception is thrown if any argument has Null value (Nullable(T) type)."], "Examples": ["SELECT range(5), range(1, 5), range(1, 5, 2), range(-1, 5, 2);"], "Category": ["Arrays Functions"], "index": 646, "vector_txt": "646:Feature: range([start, ] end [, step])\nDescription: range(end), range([start, ] end [, step])Returns an array of numbers from start to end - 1 by step. The supported types are UInt8, UInt16, UInt32, UInt64, Int8, Int16, Int32, Int64.Syntaxrange([start, ] end [, step])Argumentsstart \u2014 The first element of the array. Optional, required if step is used. Default value: 0.end \u2014 The number before which the array is constructed. Required.step \u2014 Determines the incremental step between each element in the array. Optional. Default value: 1.Returned valueArray of numbers from start to end - 1 by step.Implementation detailsAll arguments start, end, step must be below data types: UInt8, UInt16, UInt32, UInt64,Int8, Int16, Int32, Int64, as well as elements of the returned array, which's type is a super type of all arguments.An exception is thrown if query results in arrays with a total length of more than number of elements specified by the function_range_max_elements_in_block setting.Returns Null if any argument has Nullable(Nothing) type. An exception is thrown if any argument has Null value (Nullable(T) type).\nExamples: SELECT range(5), range(1, 5), range(1, 5, 2), range(-1, 5, 2);\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/arithmetic-functions"], "Title": ["divide"], "Feature": ["divide(a, b)"], "Description": ["divide", "Calculates the quotient of two values a and b. The result type is always Float64. Integer division is provided by the intDiv function.", "Division by 0 returns inf, -inf, or nan.", "Syntax", "divide(a, b)", "Alias: a / b (operator)"], "Examples": ["divide(a, b)"], "Category": ["Arithmetic Functions"], "index": 647, "vector_txt": "647:Feature: divide(a, b)\nDescription: divideCalculates the quotient of two values a and b. The result type is always Float64. Integer division is provided by the intDiv function.Division by 0 returns inf, -inf, or nan.Syntaxdivide(a, b)Alias: a / b (operator)\nExamples: divide(a, b)\nCategory: Arithmetic Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/s2"], "Title": ["geoToS2"], "Feature": ["geoToS2(lon, lat)"], "Description": ["geoToS2", "Returns S2 point index corresponding to the provided coordinates (longitude, latitude).", "Syntax", "geoToS2(lon, lat)", "Arguments", "lon \u2014 Longitude. Float64.lat \u2014 Latitude. Float64.", "Returned values", "S2 point index. UInt64."], "Examples": ["SELECT geoToS2(37.79506683, 55.71290588) AS s2Index;"], "Category": ["Geo Functions"], "index": 648, "vector_txt": "648:Feature: geoToS2(lon, lat)\nDescription: geoToS2Returns S2 point index corresponding to the provided coordinates (longitude, latitude).SyntaxgeoToS2(lon, lat)Argumentslon \u2014 Longitude. Float64.lat \u2014 Latitude. Float64.Returned valuesS2 point index. UInt64.\nExamples: SELECT geoToS2(37.79506683, 55.71290588) AS s2Index;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/s2"], "Title": ["s2ToGeo"], "Feature": ["s2ToGeo(s2index)"], "Description": ["s2ToGeo", "Returns geo coordinates (longitude, latitude) corresponding to the provided S2 point index.", "Syntax", "s2ToGeo(s2index)", "Arguments", "s2index \u2014 S2 Index. UInt64.", "Returned values", "A tuple consisting of two values: lon. Float64.lat. Float64."], "Examples": ["SELECT s2ToGeo(4704772434919038107) AS s2Coodrinates;"], "Category": ["Geo Functions"], "index": 649, "vector_txt": "649:Feature: s2ToGeo(s2index)\nDescription: s2ToGeoReturns geo coordinates (longitude, latitude) corresponding to the provided S2 point index.Syntaxs2ToGeo(s2index)Argumentss2index \u2014 S2 Index. UInt64.Returned valuesA tuple consisting of two values: lon. Float64.lat. Float64.\nExamples: SELECT s2ToGeo(4704772434919038107) AS s2Coodrinates;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/s2"], "Title": ["s2GetNeighbors"], "Feature": ["s2GetNeighbors(s2index)"], "Description": ["s2GetNeighbors", "Returns S2 neighbor indexes corresponding to the provided S2. Each cell in the S2 system is a quadrilateral bounded by four geodesics. So, each cell has 4 neighbors.", "Syntax", "s2GetNeighbors(s2index)", "Arguments", "s2index \u2014 S2 Index. UInt64.", "Returned value", "An array consisting of 4 neighbor indexes: array[s2index1, s2index3, s2index2, s2index4]. Array(UInt64)."], "Examples": ["SELECT s2GetNeighbors(5074766849661468672) AS s2Neighbors;"], "Category": ["Geo Functions"], "index": 650, "vector_txt": "650:Feature: s2GetNeighbors(s2index)\nDescription: s2GetNeighborsReturns S2 neighbor indexes corresponding to the provided S2. Each cell in the S2 system is a quadrilateral bounded by four geodesics. So, each cell has 4 neighbors.Syntaxs2GetNeighbors(s2index)Argumentss2index \u2014 S2 Index. UInt64.Returned valueAn array consisting of 4 neighbor indexes: array[s2index1, s2index3, s2index2, s2index4]. Array(UInt64).\nExamples: SELECT s2GetNeighbors(5074766849661468672) AS s2Neighbors;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/s2"], "Title": ["s2CellsIntersect"], "Feature": ["s2CellsIntersect(s2index1, s2index2)"], "Description": ["s2CellsIntersect", "Determines if the two provided S2 cells intersect or not.", "Syntax", "s2CellsIntersect(s2index1, s2index2)", "Arguments", "siIndex1, s2index2 \u2014 S2 Index. UInt64.", "Returned value", "1 \u2014 If the cells intersect. UInt8.0 \u2014 If the cells don't intersect. UInt8."], "Examples": ["SELECT s2CellsIntersect(9926595209846587392, 9926594385212866560) AS intersect;"], "Category": ["Geo Functions"], "index": 651, "vector_txt": "651:Feature: s2CellsIntersect(s2index1, s2index2)\nDescription: s2CellsIntersectDetermines if the two provided S2 cells intersect or not.Syntaxs2CellsIntersect(s2index1, s2index2)ArgumentssiIndex1, s2index2 \u2014 S2 Index. UInt64.Returned value1 \u2014 If the cells intersect. UInt8.0 \u2014 If the cells don't intersect. UInt8.\nExamples: SELECT s2CellsIntersect(9926595209846587392, 9926594385212866560) AS intersect;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/s2"], "Title": ["s2CapContains"], "Feature": ["s2CapContains(center, degrees, point)"], "Description": ["s2CapContains", "Determines if a cap contains a S2 point. A cap represents a part of the sphere that has been cut off by a plane. It is defined by a point on a sphere and a radius in degrees.", "Syntax", "s2CapContains(center, degrees, point)", "Arguments", "center \u2014 S2 point index corresponding to the cap. UInt64.degrees \u2014 Radius of the cap in degrees. Float64.point \u2014 S2 point index. UInt64.", "Returned value", "1 \u2014 If the cap contains the S2 point index. UInt8.0 \u2014 If the cap doesn't contain the S2 point index. UInt8."], "Examples": ["SELECT s2CapContains(1157339245694594829, 1.0, 1157347770437378819) AS capContains;"], "Category": ["Geo Functions"], "index": 652, "vector_txt": "652:Feature: s2CapContains(center, degrees, point)\nDescription: s2CapContainsDetermines if a cap contains a S2 point. A cap represents a part of the sphere that has been cut off by a plane. It is defined by a point on a sphere and a radius in degrees.Syntaxs2CapContains(center, degrees, point)Argumentscenter \u2014 S2 point index corresponding to the cap. UInt64.degrees \u2014 Radius of the cap in degrees. Float64.point \u2014 S2 point index. UInt64.Returned value1 \u2014 If the cap contains the S2 point index. UInt8.0 \u2014 If the cap doesn't contain the S2 point index. UInt8.\nExamples: SELECT s2CapContains(1157339245694594829, 1.0, 1157347770437378819) AS capContains;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/s2"], "Title": ["s2CapUnion"], "Feature": ["s2CapUnion(center1, radius1, center2, radius2)"], "Description": ["s2CapUnion", "Determines the smallest cap that contains the given two input caps. A cap represents a portion of the sphere that has been cut off by a plane. It is defined by a point on a sphere and a radius in degrees.", "Syntax", "s2CapUnion(center1, radius1, center2, radius2)", "Arguments", "center1, center2 \u2014 S2 point indexes corresponding to the two input caps. UInt64.radius1, radius2 \u2014 Radius of the two input caps in degrees. Float64.", "Returned values", "center \u2014 S2 point index corresponding the center of the smallest cap containing the two input caps. UInt64.radius \u2014 Radius of the smallest cap containing the two input caps. Float64."], "Examples": ["SELECT s2CapUnion(3814912406305146967, 1.0, 1157347770437378819, 1.0) AS capUnion;"], "Category": ["Geo Functions"], "index": 653, "vector_txt": "653:Feature: s2CapUnion(center1, radius1, center2, radius2)\nDescription: s2CapUnionDetermines the smallest cap that contains the given two input caps. A cap represents a portion of the sphere that has been cut off by a plane. It is defined by a point on a sphere and a radius in degrees.Syntaxs2CapUnion(center1, radius1, center2, radius2)Argumentscenter1, center2 \u2014 S2 point indexes corresponding to the two input caps. UInt64.radius1, radius2 \u2014 Radius of the two input caps in degrees. Float64.Returned valuescenter \u2014 S2 point index corresponding the center of the smallest cap containing the two input caps. UInt64.radius \u2014 Radius of the smallest cap containing the two input caps. Float64.\nExamples: SELECT s2CapUnion(3814912406305146967, 1.0, 1157347770437378819, 1.0) AS capUnion;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/s2"], "Title": ["s2RectAdd"], "Feature": ["s2RectAdd(s2pointLow, s2pointHigh, s2Point)"], "Description": ["s2RectAdd", "Increases the size of the bounding rectangle to include the given S2 point. In the S2 system, a rectangle is represented by a type of S2Region called a S2LatLngRect that represents a rectangle in latitude-longitude space.", "Syntax", "s2RectAdd(s2pointLow, s2pointHigh, s2Point)", "Arguments", "s2PointLow \u2014 Low S2 point index corresponding to the rectangle. UInt64.s2PointHigh \u2014 High S2 point index corresponding to the rectangle. UInt64.s2Point \u2014 Target S2 point index that the bound rectangle should be grown to include. UInt64.", "Returned values", "s2PointLow \u2014 Low S2 cell id corresponding to the grown rectangle. UInt64.s2PointHigh \u2014 Height S2 cell id corresponding to the grown rectangle. UInt64."], "Examples": ["SELECT s2RectAdd(5178914411069187297, 5177056748191934217, 5179056748191934217) AS rectAdd;"], "Category": ["Geo Functions"], "index": 654, "vector_txt": "654:Feature: s2RectAdd(s2pointLow, s2pointHigh, s2Point)\nDescription: s2RectAddIncreases the size of the bounding rectangle to include the given S2 point. In the S2 system, a rectangle is represented by a type of S2Region called a S2LatLngRect that represents a rectangle in latitude-longitude space.Syntaxs2RectAdd(s2pointLow, s2pointHigh, s2Point)Argumentss2PointLow \u2014 Low S2 point index corresponding to the rectangle. UInt64.s2PointHigh \u2014 High S2 point index corresponding to the rectangle. UInt64.s2Point \u2014 Target S2 point index that the bound rectangle should be grown to include. UInt64.Returned valuess2PointLow \u2014 Low S2 cell id corresponding to the grown rectangle. UInt64.s2PointHigh \u2014 Height S2 cell id corresponding to the grown rectangle. UInt64.\nExamples: SELECT s2RectAdd(5178914411069187297, 5177056748191934217, 5179056748191934217) AS rectAdd;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/s2"], "Title": ["s2RectContains"], "Feature": ["s2RectContains(s2PointLow, s2PointHi, s2Point)"], "Description": ["s2RectContains", "Determines if a given rectangle contains a S2 point. In the S2 system, a rectangle is represented by a type of S2Region called a S2LatLngRect that represents a rectangle in latitude-longitude space.", "Syntax", "s2RectContains(s2PointLow, s2PointHi, s2Point)", "Arguments", "s2PointLow \u2014 Low S2 point index corresponding to the rectangle. UInt64.s2PointHigh \u2014 High S2 point index corresponding to the rectangle. UInt64.s2Point \u2014 Target S2 point index. UInt64.", "Returned value", "1 \u2014 If the rectangle contains the given S2 point.0 \u2014 If the rectangle doesn't contain the given S2 point."], "Examples": ["SELECT s2RectContains(5179062030687166815, 5177056748191934217, 5177914411069187297) AS rectContains;"], "Category": ["Geo Functions"], "index": 655, "vector_txt": "655:Feature: s2RectContains(s2PointLow, s2PointHi, s2Point)\nDescription: s2RectContainsDetermines if a given rectangle contains a S2 point. In the S2 system, a rectangle is represented by a type of S2Region called a S2LatLngRect that represents a rectangle in latitude-longitude space.Syntaxs2RectContains(s2PointLow, s2PointHi, s2Point)Argumentss2PointLow \u2014 Low S2 point index corresponding to the rectangle. UInt64.s2PointHigh \u2014 High S2 point index corresponding to the rectangle. UInt64.s2Point \u2014 Target S2 point index. UInt64.Returned value1 \u2014 If the rectangle contains the given S2 point.0 \u2014 If the rectangle doesn't contain the given S2 point.\nExamples: SELECT s2RectContains(5179062030687166815, 5177056748191934217, 5177914411069187297) AS rectContains;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/s2"], "Title": ["s2RectUnion"], "Feature": ["s2RectUnion(s2Rect1PointLow, s2Rect1PointHi, s2Rect2PointLow, s2Rect2PointHi)"], "Description": ["s2RectUnion", "Returns the smallest rectangle containing the union of this rectangle and the given rectangle. In the S2 system, a rectangle is represented by a type of S2Region called a S2LatLngRect that represents a rectangle in latitude-longitude space.", "Syntax", "s2RectUnion(s2Rect1PointLow, s2Rect1PointHi, s2Rect2PointLow, s2Rect2PointHi)", "Arguments", "s2Rect1PointLow, s2Rect1PointHi \u2014 Low and High S2 point indexes corresponding to the first rectangle. UInt64.s2Rect2PointLow, s2Rect2PointHi \u2014 Low and High S2 point indexes corresponding to the second rectangle. UInt64.", "Returned values", "s2UnionRect2PointLow \u2014 Low S2 cell id corresponding to the union rectangle. UInt64.s2UnionRect2PointHi \u2014 High S2 cell id corresponding to the union rectangle. UInt64."], "Examples": ["SELECT s2RectUnion(5178914411069187297, 5177056748191934217, 5179062030687166815, 5177056748191934217) AS rectUnion;"], "Category": ["Geo Functions"], "index": 656, "vector_txt": "656:Feature: s2RectUnion(s2Rect1PointLow, s2Rect1PointHi, s2Rect2PointLow, s2Rect2PointHi)\nDescription: s2RectUnionReturns the smallest rectangle containing the union of this rectangle and the given rectangle. In the S2 system, a rectangle is represented by a type of S2Region called a S2LatLngRect that represents a rectangle in latitude-longitude space.Syntaxs2RectUnion(s2Rect1PointLow, s2Rect1PointHi, s2Rect2PointLow, s2Rect2PointHi)Argumentss2Rect1PointLow, s2Rect1PointHi \u2014 Low and High S2 point indexes corresponding to the first rectangle. UInt64.s2Rect2PointLow, s2Rect2PointHi \u2014 Low and High S2 point indexes corresponding to the second rectangle. UInt64.Returned valuess2UnionRect2PointLow \u2014 Low S2 cell id corresponding to the union rectangle. UInt64.s2UnionRect2PointHi \u2014 High S2 cell id corresponding to the union rectangle. UInt64.\nExamples: SELECT s2RectUnion(5178914411069187297, 5177056748191934217, 5179062030687166815, 5177056748191934217) AS rectUnion;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/s2"], "Title": ["s2RectIntersection"], "Feature": ["s2RectIntersection(s2Rect1PointLow, s2Rect1PointHi, s2Rect2PointLow, s2Rect2PointHi)"], "Description": ["s2RectIntersection", "Returns the smallest rectangle containing the intersection of this rectangle and the given rectangle. In the S2 system, a rectangle is represented by a type of S2Region called a S2LatLngRect that represents a rectangle in latitude-longitude space.", "Syntax", "s2RectIntersection(s2Rect1PointLow, s2Rect1PointHi, s2Rect2PointLow, s2Rect2PointHi)", "Arguments", "s2Rect1PointLow, s2Rect1PointHi \u2014 Low and High S2 point indexes corresponding to the first rectangle. UInt64.s2Rect2PointLow, s2Rect2PointHi \u2014 Low and High S2 point indexes corresponding to the second rectangle. UInt64.", "Returned values", "s2UnionRect2PointLow \u2014 Low S2 cell id corresponding to the rectangle containing the intersection of the given rectangles. UInt64.s2UnionRect2PointHi \u2014 High S2 cell id corresponding to the rectangle containing the intersection of the given rectangles. UInt64."], "Examples": ["SELECT s2RectIntersection(5178914411069187297, 5177056748191934217, 5179062030687166815, 5177056748191934217) AS rectIntersection;"], "Category": ["Geo Functions"], "index": 657, "vector_txt": "657:Feature: s2RectIntersection(s2Rect1PointLow, s2Rect1PointHi, s2Rect2PointLow, s2Rect2PointHi)\nDescription: s2RectIntersectionReturns the smallest rectangle containing the intersection of this rectangle and the given rectangle. In the S2 system, a rectangle is represented by a type of S2Region called a S2LatLngRect that represents a rectangle in latitude-longitude space.Syntaxs2RectIntersection(s2Rect1PointLow, s2Rect1PointHi, s2Rect2PointLow, s2Rect2PointHi)Argumentss2Rect1PointLow, s2Rect1PointHi \u2014 Low and High S2 point indexes corresponding to the first rectangle. UInt64.s2Rect2PointLow, s2Rect2PointHi \u2014 Low and High S2 point indexes corresponding to the second rectangle. UInt64.Returned valuess2UnionRect2PointLow \u2014 Low S2 cell id corresponding to the rectangle containing the intersection of the given rectangles. UInt64.s2UnionRect2PointHi \u2014 High S2 cell id corresponding to the rectangle containing the intersection of the given rectangles. UInt64.\nExamples: SELECT s2RectIntersection(5178914411069187297, 5177056748191934217, 5179062030687166815, 5177056748191934217) AS rectIntersection;\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["array(x1, ...), operator [x1, ...]"], "Feature": ["array(x1, ...), operator [x1, ...]"], "Description": ["array(x1, ...), operator [x1, ...]", "Creates an array from the function arguments.\nThe arguments must be constants and have types that have the smallest common type. At least one argument must be passed, because otherwise it isn\u2019t clear which type of array to create. That is, you can\u2019t use this function to create an empty array (to do that, use the \u2018emptyArray*\u2019 function described above).\nReturns an \u2018Array(T)\u2019 type result, where \u2018T\u2019 is the smallest common type out of the passed arguments."], "Examples": [], "Category": ["Arrays Functions"], "index": 658, "vector_txt": "658:Feature: array(x1, ...), operator [x1, ...]\nDescription: array(x1, ...), operator [x1, ...]Creates an array from the function arguments.\nThe arguments must be constants and have types that have the smallest common type. At least one argument must be passed, because otherwise it isn\u2019t clear which type of array to create. That is, you can\u2019t use this function to create an empty array (to do that, use the \u2018emptyArray*\u2019 function described above).\nReturns an \u2018Array(T)\u2019 type result, where \u2018T\u2019 is the smallest common type out of the passed arguments.\nExamples: \nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/svg"], "Title": ["Svg"], "Feature": ["Svg(geometry,[style])"], "Description": ["Svg", "Returns a string of select SVG element tags from Geo data.", "Syntax", "Svg(geometry,[style])", "Aliases: SVG, svg", "Parameters", "geometry \u2014 Geo data. Geo.style \u2014 Optional style name. String.", "Returned value", "The SVG representation of the geometry. String.SVG circleSVG polygonSVG path"], "Examples": ["SELECT SVG((0., 0.))", "SELECT SVG([(0., 0.), (10, 0), (10, 10), (0, 10)])", "SELECT SVG([[(0., 0.), (10, 0), (10, 10), (0, 10)], [(4., 4.), (5, 4), (5, 5), (4, 5)]])"], "Category": ["Geo Functions"], "index": 659, "vector_txt": "659:Feature: Svg(geometry,[style])\nDescription: SvgReturns a string of select SVG element tags from Geo data.SyntaxSvg(geometry,[style])Aliases: SVG, svgParametersgeometry \u2014 Geo data. Geo.style \u2014 Optional style name. String.Returned valueThe SVG representation of the geometry. String.SVG circleSVG polygonSVG path\nExamples: SELECT SVG((0., 0.))SELECT SVG([(0., 0.), (10, 0), (10, 10), (0, 10)])SELECT SVG([[(0., 0.), (10, 0), (10, 10), (0, 10)], [(4., 4.), (5, 4), (5, 5), (4, 5)]])\nCategory: Geo Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/encoding-functions"], "Title": ["char"], "Feature": ["char(number_1, [number_2, ..., number_n]);"], "Description": ["char", "Returns the string with the length as the number of passed arguments and each byte has the value of corresponding argument. Accepts multiple arguments of numeric types. If the value of argument is out of range of UInt8 data type, it is converted to UInt8 with possible rounding and overflow.", "Syntax", "char(number_1, [number_2, ..., number_n]);", "Arguments", "number_1, number_2, ..., number_n \u2014 Numerical arguments interpreted as integers. Types: Int, Float.", "Returned value", "a string of given bytes. String."], "Examples": ["SELECT char(104.1, 101, 108.9, 108.9, 111) AS hello;", "SELECT char(0xD0, 0xBF, 0xD1, 0x80, 0xD0, 0xB8, 0xD0, 0xB2, 0xD0, 0xB5, 0xD1, 0x82) AS hello;", "SELECT char(0xE4, 0xBD, 0xA0, 0xE5, 0xA5, 0xBD) AS hello;"], "Category": ["Encoding Functions"], "index": 660, "vector_txt": "660:Feature: char(number_1, [number_2, ..., number_n]);\nDescription: charReturns the string with the length as the number of passed arguments and each byte has the value of corresponding argument. Accepts multiple arguments of numeric types. If the value of argument is out of range of UInt8 data type, it is converted to UInt8 with possible rounding and overflow.Syntaxchar(number_1, [number_2, ..., number_n]);Argumentsnumber_1, number_2, ..., number_n \u2014 Numerical arguments interpreted as integers. Types: Int, Float.Returned valuea string of given bytes. String.\nExamples: SELECT char(104.1, 101, 108.9, 108.9, 111) AS hello;SELECT char(0xD0, 0xBF, 0xD1, 0x80, 0xD0, 0xB8, 0xD0, 0xB2, 0xD0, 0xB5, 0xD1, 0x82) AS hello;SELECT char(0xE4, 0xBD, 0xA0, 0xE5, 0xA5, 0xBD) AS hello;\nCategory: Encoding Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/encoding-functions"], "Title": ["hex"], "Feature": ["hex(arg)"], "Description": ["hex", "Returns a string containing the argument\u2019s hexadecimal representation.", "Alias: HEX.", "Syntax", "hex(arg)", "The function is using uppercase letters A-F and not using any prefixes (like 0x) or suffixes (like h).", "For integer arguments, it prints hex digits (\u201cnibbles\u201d) from the most significant to least significant (big-endian or \u201chuman-readable\u201d order). It starts with the most significant non-zero byte (leading zero bytes are omitted) but always prints both digits of every byte even if the leading digit is zero.", "Values of type Date and DateTime are formatted as corresponding integers (the number of days since Epoch for Date and the value of Unix Timestamp for DateTime).", "For String and FixedString, all bytes are simply encoded as two hexadecimal numbers. Zero bytes are not omitted.", "Values of Float and Decimal types are encoded as their representation in memory. As we support little-endian architecture, they are encoded in little-endian. Zero leading/trailing bytes are not omitted.", "Values of UUID type are encoded as big-endian order string.", "Arguments", "arg \u2014 A value to convert to hexadecimal. Types: String, UInt, Float, Decimal, Date or DateTime.", "Returned value", "A string with the hexadecimal representation of the argument. String."], "Examples": ["SELECT hex(1);", "SELECT hex(toFloat32(number)) AS hex_presentation FROM numbers(15, 2);", "SELECT hex(toFloat64(number)) AS hex_presentation FROM numbers(15, 2);", "SELECT lower(hex(toUUID('61f0c404-5cb3-11e7-907b-a6006ad3dba0'))) as uuid_hex"], "Category": ["Encoding Functions"], "index": 661, "vector_txt": "661:Feature: hex(arg)\nDescription: hexReturns a string containing the argument\u2019s hexadecimal representation.Alias: HEX.Syntaxhex(arg)The function is using uppercase letters A-F and not using any prefixes (like 0x) or suffixes (like h).For integer arguments, it prints hex digits (\u201cnibbles\u201d) from the most significant to least significant (big-endian or \u201chuman-readable\u201d order). It starts with the most significant non-zero byte (leading zero bytes are omitted) but always prints both digits of every byte even if the leading digit is zero.Values of type Date and DateTime are formatted as corresponding integers (the number of days since Epoch for Date and the value of Unix Timestamp for DateTime).For String and FixedString, all bytes are simply encoded as two hexadecimal numbers. Zero bytes are not omitted.Values of Float and Decimal types are encoded as their representation in memory. As we support little-endian architecture, they are encoded in little-endian. Zero leading/trailing bytes are not omitted.Values of UUID type are encoded as big-endian order string.Argumentsarg \u2014 A value to convert to hexadecimal. Types: String, UInt, Float, Decimal, Date or DateTime.Returned valueA string with the hexadecimal representation of the argument. String.\nExamples: SELECT hex(1);SELECT hex(toFloat32(number)) AS hex_presentation FROM numbers(15, 2);SELECT hex(toFloat64(number)) AS hex_presentation FROM numbers(15, 2);SELECT lower(hex(toUUID('61f0c404-5cb3-11e7-907b-a6006ad3dba0'))) as uuid_hex\nCategory: Encoding Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/encoding-functions"], "Title": ["unhex"], "Feature": ["unhex(arg)"], "Description": ["unhex", "Performs the opposite operation of hex. It interprets each pair of hexadecimal digits (in the argument) as a number and converts it to the byte represented by the number. The return value is a binary string (BLOB).", "If you want to convert the result to a number, you can use the reverse and reinterpretAs<Type> functions.", "NoteIf unhex is invoked from within the clickhouse-client, binary strings display using UTF-8.", "Alias: UNHEX.", "Syntax", "unhex(arg)", "Arguments", "arg \u2014 A string containing any number of hexadecimal digits. String, FixedString.", "Supports both uppercase and lowercase letters A-F. The number of hexadecimal digits does not have to be even. If it is odd, the last digit is interpreted as the least significant half of the 00-0F byte. If the argument string contains anything other than hexadecimal digits, some implementation-defined result is returned (an exception isn\u2019t thrown). For a numeric argument the inverse of hex(N) is not performed by unhex().", "Returned value", "A binary string (BLOB). String."], "Examples": ["SELECT unhex('303132'), UNHEX('4D7953514C');", "SELECT reinterpretAsUInt64(reverse(unhex('FFF'))) AS num;"], "Category": ["Encoding Functions"], "index": 662, "vector_txt": "662:Feature: unhex(arg)\nDescription: unhexPerforms the opposite operation of hex. It interprets each pair of hexadecimal digits (in the argument) as a number and converts it to the byte represented by the number. The return value is a binary string (BLOB).If you want to convert the result to a number, you can use the reverse and reinterpretAs<Type> functions.NoteIf unhex is invoked from within the clickhouse-client, binary strings display using UTF-8.Alias: UNHEX.Syntaxunhex(arg)Argumentsarg \u2014 A string containing any number of hexadecimal digits. String, FixedString.Supports both uppercase and lowercase letters A-F. The number of hexadecimal digits does not have to be even. If it is odd, the last digit is interpreted as the least significant half of the 00-0F byte. If the argument string contains anything other than hexadecimal digits, some implementation-defined result is returned (an exception isn\u2019t thrown). For a numeric argument the inverse of hex(N) is not performed by unhex().Returned valueA binary string (BLOB). String.\nExamples: SELECT unhex('303132'), UNHEX('4D7953514C');SELECT reinterpretAsUInt64(reverse(unhex('FFF'))) AS num;\nCategory: Encoding Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/encoding-functions"], "Title": ["bin"], "Feature": ["bin(arg)"], "Description": ["bin", "Returns a string containing the argument\u2019s binary representation.", "Syntax", "bin(arg)", "Alias: BIN.", "For integer arguments, it prints bin digits from the most significant to least significant (big-endian or \u201chuman-readable\u201d order). It starts with the most significant non-zero byte (leading zero bytes are omitted) but always prints eight digits of every byte if the leading digit is zero.", "Values of type Date and DateTime are formatted as corresponding integers (the number of days since Epoch for Date and the value of Unix Timestamp for DateTime).", "For String and FixedString, all bytes are simply encoded as eight binary numbers. Zero bytes are not omitted.", "Values of Float and Decimal types are encoded as their representation in memory. As we support little-endian architecture, they are encoded in little-endian. Zero leading/trailing bytes are not omitted.", "Values of UUID type are encoded as big-endian order string.", "Arguments", "arg \u2014 A value to convert to binary. String, FixedString, UInt, Float, Decimal, Date, or DateTime.", "Returned value", "A string with the binary representation of the argument. String."], "Examples": ["SELECT bin(14);", "SELECT bin(toFloat32(number)) AS bin_presentation FROM numbers(15, 2);", "SELECT bin(toFloat64(number)) AS bin_presentation FROM numbers(15, 2);", "SELECT bin(toUUID('61f0c404-5cb3-11e7-907b-a6006ad3dba0')) as bin_uuid"], "Category": ["Encoding Functions"], "index": 663, "vector_txt": "663:Feature: bin(arg)\nDescription: binReturns a string containing the argument\u2019s binary representation.Syntaxbin(arg)Alias: BIN.For integer arguments, it prints bin digits from the most significant to least significant (big-endian or \u201chuman-readable\u201d order). It starts with the most significant non-zero byte (leading zero bytes are omitted) but always prints eight digits of every byte if the leading digit is zero.Values of type Date and DateTime are formatted as corresponding integers (the number of days since Epoch for Date and the value of Unix Timestamp for DateTime).For String and FixedString, all bytes are simply encoded as eight binary numbers. Zero bytes are not omitted.Values of Float and Decimal types are encoded as their representation in memory. As we support little-endian architecture, they are encoded in little-endian. Zero leading/trailing bytes are not omitted.Values of UUID type are encoded as big-endian order string.Argumentsarg \u2014 A value to convert to binary. String, FixedString, UInt, Float, Decimal, Date, or DateTime.Returned valueA string with the binary representation of the argument. String.\nExamples: SELECT bin(14);SELECT bin(toFloat32(number)) AS bin_presentation FROM numbers(15, 2);SELECT bin(toFloat64(number)) AS bin_presentation FROM numbers(15, 2);SELECT bin(toUUID('61f0c404-5cb3-11e7-907b-a6006ad3dba0')) as bin_uuid\nCategory: Encoding Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/encoding-functions"], "Title": ["unbin"], "Feature": ["unbin(arg)"], "Description": ["unbin", "Interprets each pair of binary digits (in the argument) as a number and converts it to the byte represented by the number. The functions performs the opposite operation to bin.", "Syntax", "unbin(arg)", "Alias: UNBIN.", "For a numeric argument unbin() does not return the inverse of bin(). If you want to convert the result to a number, you can use the reverse and reinterpretAs<Type> functions.", "NoteIf unbin is invoked from within the clickhouse-client, binary strings are displayed using UTF-8.", "Supports binary digits 0 and 1. The number of binary digits does not have to be multiples of eight. If the argument string contains anything other than binary digits, some implementation-defined result is returned (an exception isn\u2019t thrown).", "Arguments", "arg \u2014 A string containing any number of binary digits. String.", "Returned value", "A binary string (BLOB). String."], "Examples": ["SELECT UNBIN('001100000011000100110010'), UNBIN('0100110101111001010100110101000101001100');", "SELECT reinterpretAsUInt64(reverse(unbin('1110'))) AS num;"], "Category": ["Encoding Functions"], "index": 664, "vector_txt": "664:Feature: unbin(arg)\nDescription: unbinInterprets each pair of binary digits (in the argument) as a number and converts it to the byte represented by the number. The functions performs the opposite operation to bin.Syntaxunbin(arg)Alias: UNBIN.For a numeric argument unbin() does not return the inverse of bin(). If you want to convert the result to a number, you can use the reverse and reinterpretAs<Type> functions.NoteIf unbin is invoked from within the clickhouse-client, binary strings are displayed using UTF-8.Supports binary digits 0 and 1. The number of binary digits does not have to be multiples of eight. If the argument string contains anything other than binary digits, some implementation-defined result is returned (an exception isn\u2019t thrown).Argumentsarg \u2014 A string containing any number of binary digits. String.Returned valueA binary string (BLOB). String.\nExamples: SELECT UNBIN('001100000011000100110010'), UNBIN('0100110101111001010100110101000101001100');SELECT reinterpretAsUInt64(reverse(unbin('1110'))) AS num;\nCategory: Encoding Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/encoding-functions"], "Title": ["bitmaskToList(num)"], "Feature": ["bitmaskToList(num)"], "Description": ["bitmaskToList(num)", "Accepts an integer. Returns a string containing the list of powers of two that total the source number when summed. They are comma-separated without spaces in text format, in ascending order."], "Examples": [], "Category": ["Encoding Functions"], "index": 665, "vector_txt": "665:Feature: bitmaskToList(num)\nDescription: bitmaskToList(num)Accepts an integer. Returns a string containing the list of powers of two that total the source number when summed. They are comma-separated without spaces in text format, in ascending order.\nExamples: \nCategory: Encoding Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/encoding-functions"], "Title": ["bitmaskToArray(num)"], "Feature": ["bitmaskToArray(num)"], "Description": ["bitmaskToArray(num)", "Accepts an integer. Returns an array of UInt64 numbers containing the list of powers of two that total the source number when summed. Numbers in the array are in ascending order."], "Examples": [], "Category": ["Encoding Functions"], "index": 666, "vector_txt": "666:Feature: bitmaskToArray(num)\nDescription: bitmaskToArray(num)Accepts an integer. Returns an array of UInt64 numbers containing the list of powers of two that total the source number when summed. Numbers in the array are in ascending order.\nExamples: \nCategory: Encoding Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/encoding-functions"], "Title": ["bitPositionsToArray(num)"], "Feature": ["bitPositionsToArray(arg)"], "Description": ["bitPositionsToArray(num)", "Accepts an integer and converts it to an unsigned integer. Returns an array of UInt64 numbers containing the list of positions of bits of arg that equal 1, in ascending order.", "Syntax", "bitPositionsToArray(arg)", "Arguments", "arg \u2014 Integer value. Int/UInt.", "Returned value", "An array containing a list of positions of bits that equal 1, in ascending order. Array(UInt64)."], "Examples": ["SELECT bitPositionsToArray(toInt8(1)) AS bit_positions;", "SELECT bitPositionsToArray(toInt8(-1)) AS bit_positions;"], "Category": ["Encoding Functions"], "index": 667, "vector_txt": "667:Feature: bitPositionsToArray(arg)\nDescription: bitPositionsToArray(num)Accepts an integer and converts it to an unsigned integer. Returns an array of UInt64 numbers containing the list of positions of bits of arg that equal 1, in ascending order.SyntaxbitPositionsToArray(arg)Argumentsarg \u2014 Integer value. Int/UInt.Returned valueAn array containing a list of positions of bits that equal 1, in ascending order. Array(UInt64).\nExamples: SELECT bitPositionsToArray(toInt8(1)) AS bit_positions;SELECT bitPositionsToArray(toInt8(-1)) AS bit_positions;\nCategory: Encoding Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/encoding-functions"], "Title": ["mortonEncode"], "Feature": ["mortonEncode(args)"], "Description": ["mortonEncode", "Calculates the Morton encoding (ZCurve) for a list of unsigned integers.", "The function has two modes of operation:", "SimpleExpanded", "Simple mode", "Accepts up to 8 unsigned integers as arguments and produces a UInt64 code.", "Syntax", "mortonEncode(args)", "Parameters", "args: up to 8 unsigned integers or columns of the aforementioned type.", "Returned value", "A UInt64 code. UInt64"], "Examples": ["SELECT mortonEncode(1, 2, 3);", "mortonEncode(range_mask, args)", "SELECT mortonEncode((1,2), 1024, 16);", "SELECT mortonEncode(1);", "SELECT mortonEncode(tuple(2), 128);", "create table morton_numbers(    n1 UInt32,    n2 UInt32,    n3 UInt16,    n4 UInt16,    n5 UInt8,    n6 UInt8,    n7 UInt8,    n8 UInt8)Engine=MergeTree()ORDER BY n1 SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';insert into morton_numbers (*) values(1,2,3,4,5,6,7,8);", "SELECT mortonEncode(n1, n2, n3, n4, n5, n6, n7, n8) FROM morton_numbers;"], "Category": ["Encoding Functions"], "index": 668, "vector_txt": "668:Feature: mortonEncode(args)\nDescription: mortonEncodeCalculates the Morton encoding (ZCurve) for a list of unsigned integers.The function has two modes of operation:SimpleExpandedSimple modeAccepts up to 8 unsigned integers as arguments and produces a UInt64 code.SyntaxmortonEncode(args)Parametersargs: up to 8 unsigned integers or columns of the aforementioned type.Returned valueA UInt64 code. UInt64\nExamples: SELECT mortonEncode(1, 2, 3);mortonEncode(range_mask, args)SELECT mortonEncode((1,2), 1024, 16);SELECT mortonEncode(1);SELECT mortonEncode(tuple(2), 128);create table morton_numbers(    n1 UInt32,    n2 UInt32,    n3 UInt16,    n4 UInt16,    n5 UInt8,    n6 UInt8,    n7 UInt8,    n8 UInt8)Engine=MergeTree()ORDER BY n1 SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';insert into morton_numbers (*) values(1,2,3,4,5,6,7,8);SELECT mortonEncode(n1, n2, n3, n4, n5, n6, n7, n8) FROM morton_numbers;\nCategory: Encoding Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayWithConstant(length, elem)"], "Feature": ["arrayWithConstant(length, elem)"], "Description": ["arrayWithConstant(length, elem)", "Creates an array of length length filled with the constant elem."], "Examples": [], "Category": ["Arrays Functions"], "index": 669, "vector_txt": "669:Feature: arrayWithConstant(length, elem)\nDescription: arrayWithConstant(length, elem)Creates an array of length length filled with the constant elem.\nExamples: \nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/encoding-functions"], "Title": ["mortonDecode"], "Feature": ["mortonDecode(tuple_size, code)"], "Description": ["mortonDecode", "Decodes a Morton encoding (ZCurve) into the corresponding unsigned integer tuple.", "As with the mortonEncode function, this function has two modes of operation:", "SimpleExpanded", "Simple mode", "Accepts a resulting tuple size as the first argument and the code as the second argument.", "Syntax", "mortonDecode(tuple_size, code)", "Parameters", "tuple_size: integer value no more than 8.code: UInt64 code.", "Returned value", "tuple of the specified size. UInt64"], "Examples": ["SELECT mortonDecode(3, 53);", "SELECT mortonDecode(1, 1);", "SELECT mortonDecode(tuple(2), 32768);", "create table morton_numbers(    n1 UInt32,    n2 UInt32,    n3 UInt16,    n4 UInt16,    n5 UInt8,    n6 UInt8,    n7 UInt8,    n8 UInt8)Engine=MergeTree()ORDER BY n1 SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';insert into morton_numbers (*) values(1,2,3,4,5,6,7,8);", "select untuple(mortonDecode(8, mortonEncode(n1, n2, n3, n4, n5, n6, n7, n8))) from morton_numbers;"], "Category": ["Encoding Functions"], "index": 670, "vector_txt": "670:Feature: mortonDecode(tuple_size, code)\nDescription: mortonDecodeDecodes a Morton encoding (ZCurve) into the corresponding unsigned integer tuple.As with the mortonEncode function, this function has two modes of operation:SimpleExpandedSimple modeAccepts a resulting tuple size as the first argument and the code as the second argument.SyntaxmortonDecode(tuple_size, code)Parameterstuple_size: integer value no more than 8.code: UInt64 code.Returned valuetuple of the specified size. UInt64\nExamples: SELECT mortonDecode(3, 53);SELECT mortonDecode(1, 1);SELECT mortonDecode(tuple(2), 32768);create table morton_numbers(    n1 UInt32,    n2 UInt32,    n3 UInt16,    n4 UInt16,    n5 UInt8,    n6 UInt8,    n7 UInt8,    n8 UInt8)Engine=MergeTree()ORDER BY n1 SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';insert into morton_numbers (*) values(1,2,3,4,5,6,7,8);select untuple(mortonDecode(8, mortonEncode(n1, n2, n3, n4, n5, n6, n7, n8))) from morton_numbers;\nCategory: Encoding Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/encoding-functions"], "Title": ["hilbertEncode"], "Feature": ["hilbertEncode(args)"], "Description": ["hilbertEncode", "Calculates code for Hilbert Curve for a list of unsigned integers.", "The function has two modes of operation:", "SimpleExpanded", "Simple mode", "Simple: accepts up to 2 unsigned integers as arguments and produces a UInt64 code.", "Syntax", "hilbertEncode(args)", "Parameters", "args: up to 2 unsigned integers or columns of the aforementioned type.", "Returned value", "A UInt64 code", "Type: UInt64"], "Examples": ["SELECT hilbertEncode(3, 4);", "hilbertEncode(range_mask, args)", "SELECT hilbertEncode((10,6), 1024, 16);", "SELECT hilbertEncode(1);", "SELECT hilbertEncode(tuple(2), 128);", "create table hilbert_numbers(    n1 UInt32,    n2 UInt32)Engine=MergeTree()ORDER BY n1 SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';insert into hilbert_numbers (*) values(1,2);", "SELECT hilbertEncode(n1, n2) FROM hilbert_numbers;"], "Category": ["Encoding Functions"], "index": 671, "vector_txt": "671:Feature: hilbertEncode(args)\nDescription: hilbertEncodeCalculates code for Hilbert Curve for a list of unsigned integers.The function has two modes of operation:SimpleExpandedSimple modeSimple: accepts up to 2 unsigned integers as arguments and produces a UInt64 code.SyntaxhilbertEncode(args)Parametersargs: up to 2 unsigned integers or columns of the aforementioned type.Returned valueA UInt64 codeType: UInt64\nExamples: SELECT hilbertEncode(3, 4);hilbertEncode(range_mask, args)SELECT hilbertEncode((10,6), 1024, 16);SELECT hilbertEncode(1);SELECT hilbertEncode(tuple(2), 128);create table hilbert_numbers(    n1 UInt32,    n2 UInt32)Engine=MergeTree()ORDER BY n1 SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';insert into hilbert_numbers (*) values(1,2);SELECT hilbertEncode(n1, n2) FROM hilbert_numbers;\nCategory: Encoding Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/encoding-functions"], "Title": ["hilbertDecode"], "Feature": ["hilbertDecode(tuple_size, code)"], "Description": ["hilbertDecode", "Decodes a Hilbert curve index back into a tuple of unsigned integers, representing coordinates in multi-dimensional space.", "As with the hilbertEncode function, this function has two modes of operation:", "SimpleExpanded", "Simple mode", "Accepts up to 2 unsigned integers as arguments and produces a UInt64 code.", "Syntax", "hilbertDecode(tuple_size, code)", "Parameters", "tuple_size: integer value no more than 2.code: UInt64 code.", "Returned value", "tuple of the specified size.", "Type: UInt64"], "Examples": ["SELECT hilbertDecode(2, 31);", "SELECT hilbertDecode(1, 1);", "SELECT hilbertDecode(tuple(2), 32768);", "create table hilbert_numbers(    n1 UInt32,    n2 UInt32)Engine=MergeTree()ORDER BY n1 SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';insert into hilbert_numbers (*) values(1,2);", "select untuple(hilbertDecode(2, hilbertEncode(n1, n2))) from hilbert_numbers;"], "Category": ["Encoding Functions"], "index": 672, "vector_txt": "672:Feature: hilbertDecode(tuple_size, code)\nDescription: hilbertDecodeDecodes a Hilbert curve index back into a tuple of unsigned integers, representing coordinates in multi-dimensional space.As with the hilbertEncode function, this function has two modes of operation:SimpleExpandedSimple modeAccepts up to 2 unsigned integers as arguments and produces a UInt64 code.SyntaxhilbertDecode(tuple_size, code)Parameterstuple_size: integer value no more than 2.code: UInt64 code.Returned valuetuple of the specified size.Type: UInt64\nExamples: SELECT hilbertDecode(2, 31);SELECT hilbertDecode(1, 1);SELECT hilbertDecode(tuple(2), 32768);create table hilbert_numbers(    n1 UInt32,    n2 UInt32)Engine=MergeTree()ORDER BY n1 SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';insert into hilbert_numbers (*) values(1,2);select untuple(hilbertDecode(2, hilbertEncode(n1, n2))) from hilbert_numbers;\nCategory: Encoding Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/encryption-functions"], "Title": ["encrypt"], "Feature": ["encrypt('mode', 'plaintext', 'key' [, iv, aad])"], "Description": ["encrypt", "This function encrypts data using these modes:", "aes-128-ecb, aes-192-ecb, aes-256-ecbaes-128-cbc, aes-192-cbc, aes-256-cbcaes-128-ofb, aes-192-ofb, aes-256-ofbaes-128-gcm, aes-192-gcm, aes-256-gcmaes-128-ctr, aes-192-ctr, aes-256-ctr", "Syntax", "encrypt('mode', 'plaintext', 'key' [, iv, aad])", "Arguments", "mode \u2014 Encryption mode. String.plaintext \u2014 Text that need to be encrypted. String.key \u2014 Encryption key. String.iv \u2014 Initialization vector. Required for -gcm modes, optional for others. String.aad \u2014 Additional authenticated data. It isn't encrypted, but it affects decryption. Works only in -gcm modes, for others would throw an exception. String.", "Returned value", "Ciphertext binary string. String."], "Examples": ["CREATE TABLE encryption_test(    `comment` String,    `secret` String)ENGINE = Memory;", "INSERT INTO encryption_test VALUES('aes-256-ofb no IV', encrypt('aes-256-ofb', 'Secret', '12345678910121314151617181920212')),\\('aes-256-ofb no IV, different key', encrypt('aes-256-ofb', 'Secret', 'keykeykeykeykeykeykeykeykeykeyke')),\\('aes-256-ofb with IV', encrypt('aes-256-ofb', 'Secret', '12345678910121314151617181920212', 'iviviviviviviviv')),\\('aes-256-cbc no IV', encrypt('aes-256-cbc', 'Secret', '12345678910121314151617181920212'));", "SELECT comment, hex(secret) FROM encryption_test;", "INSERT INTO encryption_test VALUES('aes-256-gcm', encrypt('aes-256-gcm', 'Secret', '12345678910121314151617181920212', 'iviviviviviviviv')), \\('aes-256-gcm with AAD', encrypt('aes-256-gcm', 'Secret', '12345678910121314151617181920212', 'iviviviviviviviv', 'aad'));SELECT comment, hex(secret) FROM encryption_test WHERE comment LIKE '%gcm%';"], "Category": ["Encryption Functions"], "index": 673, "vector_txt": "673:Feature: encrypt('mode', 'plaintext', 'key' [, iv, aad])\nDescription: encryptThis function encrypts data using these modes:aes-128-ecb, aes-192-ecb, aes-256-ecbaes-128-cbc, aes-192-cbc, aes-256-cbcaes-128-ofb, aes-192-ofb, aes-256-ofbaes-128-gcm, aes-192-gcm, aes-256-gcmaes-128-ctr, aes-192-ctr, aes-256-ctrSyntaxencrypt('mode', 'plaintext', 'key' [, iv, aad])Argumentsmode \u2014 Encryption mode. String.plaintext \u2014 Text that need to be encrypted. String.key \u2014 Encryption key. String.iv \u2014 Initialization vector. Required for -gcm modes, optional for others. String.aad \u2014 Additional authenticated data. It isn't encrypted, but it affects decryption. Works only in -gcm modes, for others would throw an exception. String.Returned valueCiphertext binary string. String.\nExamples: CREATE TABLE encryption_test(    `comment` String,    `secret` String)ENGINE = Memory;INSERT INTO encryption_test VALUES('aes-256-ofb no IV', encrypt('aes-256-ofb', 'Secret', '12345678910121314151617181920212')),\\('aes-256-ofb no IV, different key', encrypt('aes-256-ofb', 'Secret', 'keykeykeykeykeykeykeykeykeykeyke')),\\('aes-256-ofb with IV', encrypt('aes-256-ofb', 'Secret', '12345678910121314151617181920212', 'iviviviviviviviv')),\\('aes-256-cbc no IV', encrypt('aes-256-cbc', 'Secret', '12345678910121314151617181920212'));SELECT comment, hex(secret) FROM encryption_test;INSERT INTO encryption_test VALUES('aes-256-gcm', encrypt('aes-256-gcm', 'Secret', '12345678910121314151617181920212', 'iviviviviviviviv')), \\('aes-256-gcm with AAD', encrypt('aes-256-gcm', 'Secret', '12345678910121314151617181920212', 'iviviviviviviviv', 'aad'));SELECT comment, hex(secret) FROM encryption_test WHERE comment LIKE '%gcm%';\nCategory: Encryption Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/encryption-functions"], "Title": ["aes_encrypt_mysql"], "Feature": ["aes_encrypt_mysql('mode', 'plaintext', 'key' [, iv])"], "Description": ["aes_encrypt_mysql", "Compatible with mysql encryption and resulting ciphertext can be decrypted with AES_DECRYPT function.", "Will produce the same ciphertext as encrypt on equal inputs. But when key or iv are longer than they should normally be, aes_encrypt_mysql will stick to what MySQL's aes_encrypt does: 'fold' key and ignore excess bits of iv.", "Supported encryption modes:", "aes-128-ecb, aes-192-ecb, aes-256-ecbaes-128-cbc, aes-192-cbc, aes-256-cbcaes-128-ofb, aes-192-ofb, aes-256-ofb", "Syntax", "aes_encrypt_mysql('mode', 'plaintext', 'key' [, iv])", "Arguments", "mode \u2014 Encryption mode. String.plaintext \u2014 Text that needs to be encrypted. String.key \u2014 Encryption key. If key is longer than required by mode, MySQL-specific key folding is performed. String.iv \u2014 Initialization vector. Optional, only first 16 bytes are taken into account String.", "Returned value", "Ciphertext binary string. String."], "Examples": ["SELECT encrypt('aes-256-ofb', 'Secret', '12345678910121314151617181920212', 'iviviviviviviviv') = aes_encrypt_mysql('aes-256-ofb', 'Secret', '12345678910121314151617181920212', 'iviviviviviviviv') AS ciphertexts_equal;", "SELECT encrypt('aes-256-ofb', 'Secret', '123456789101213141516171819202122', 'iviviviviviviviv123');", "SELECT hex(aes_encrypt_mysql('aes-256-ofb', 'Secret', '123456789101213141516171819202122', 'iviviviviviviviv123')) AS ciphertext;", "SELECT hex(aes_encrypt_mysql('aes-256-ofb', 'Secret', '123456789101213141516171819202122', 'iviviviviviviviv123456')) AS ciphertext", "mysql> SET  block_encryption_mode='aes-256-ofb';Query OK, 0 rows affected (0.00 sec)mysql> SELECT aes_encrypt('Secret', '123456789101213141516171819202122', 'iviviviviviviviv123456') as ciphertext;+------------------------+| ciphertext             |+------------------------+| 0x24E9E4966469         |+------------------------+1 row in set (0.00 sec)"], "Category": ["Encryption Functions"], "index": 674, "vector_txt": "674:Feature: aes_encrypt_mysql('mode', 'plaintext', 'key' [, iv])\nDescription: aes_encrypt_mysqlCompatible with mysql encryption and resulting ciphertext can be decrypted with AES_DECRYPT function.Will produce the same ciphertext as encrypt on equal inputs. But when key or iv are longer than they should normally be, aes_encrypt_mysql will stick to what MySQL's aes_encrypt does: 'fold' key and ignore excess bits of iv.Supported encryption modes:aes-128-ecb, aes-192-ecb, aes-256-ecbaes-128-cbc, aes-192-cbc, aes-256-cbcaes-128-ofb, aes-192-ofb, aes-256-ofbSyntaxaes_encrypt_mysql('mode', 'plaintext', 'key' [, iv])Argumentsmode \u2014 Encryption mode. String.plaintext \u2014 Text that needs to be encrypted. String.key \u2014 Encryption key. If key is longer than required by mode, MySQL-specific key folding is performed. String.iv \u2014 Initialization vector. Optional, only first 16 bytes are taken into account String.Returned valueCiphertext binary string. String.\nExamples: SELECT encrypt('aes-256-ofb', 'Secret', '12345678910121314151617181920212', 'iviviviviviviviv') = aes_encrypt_mysql('aes-256-ofb', 'Secret', '12345678910121314151617181920212', 'iviviviviviviviv') AS ciphertexts_equal;SELECT encrypt('aes-256-ofb', 'Secret', '123456789101213141516171819202122', 'iviviviviviviviv123');SELECT hex(aes_encrypt_mysql('aes-256-ofb', 'Secret', '123456789101213141516171819202122', 'iviviviviviviviv123')) AS ciphertext;SELECT hex(aes_encrypt_mysql('aes-256-ofb', 'Secret', '123456789101213141516171819202122', 'iviviviviviviviv123456')) AS ciphertextmysql> SET  block_encryption_mode='aes-256-ofb';Query OK, 0 rows affected (0.00 sec)mysql> SELECT aes_encrypt('Secret', '123456789101213141516171819202122', 'iviviviviviviviv123456') as ciphertext;+------------------------+| ciphertext             |+------------------------+| 0x24E9E4966469         |+------------------------+1 row in set (0.00 sec)\nCategory: Encryption Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/encryption-functions"], "Title": ["decrypt"], "Feature": ["decrypt('mode', 'ciphertext', 'key' [, iv, aad])"], "Description": ["decrypt", "This function decrypts ciphertext into a plaintext using these modes:", "aes-128-ecb, aes-192-ecb, aes-256-ecbaes-128-cbc, aes-192-cbc, aes-256-cbcaes-128-ofb, aes-192-ofb, aes-256-ofbaes-128-gcm, aes-192-gcm, aes-256-gcmaes-128-ctr, aes-192-ctr, aes-256-ctr", "Syntax", "decrypt('mode', 'ciphertext', 'key' [, iv, aad])", "Arguments", "mode \u2014 Decryption mode. String.ciphertext \u2014 Encrypted text that needs to be decrypted. String.key \u2014 Decryption key. String.iv \u2014 Initialization vector. Required for -gcm modes, Optional for others. String.aad \u2014 Additional authenticated data. Won't decrypt if this value is incorrect. Works only in -gcm modes, for others would throw an exception. String.", "Returned value", "Decrypted String. String."], "Examples": ["SELECT comment, hex(secret) FROM encryption_test;", "SELECT comment, decrypt('aes-256-cfb128', secret, '12345678910121314151617181920212') as plaintext FROM encryption_test"], "Category": ["Encryption Functions"], "index": 675, "vector_txt": "675:Feature: decrypt('mode', 'ciphertext', 'key' [, iv, aad])\nDescription: decryptThis function decrypts ciphertext into a plaintext using these modes:aes-128-ecb, aes-192-ecb, aes-256-ecbaes-128-cbc, aes-192-cbc, aes-256-cbcaes-128-ofb, aes-192-ofb, aes-256-ofbaes-128-gcm, aes-192-gcm, aes-256-gcmaes-128-ctr, aes-192-ctr, aes-256-ctrSyntaxdecrypt('mode', 'ciphertext', 'key' [, iv, aad])Argumentsmode \u2014 Decryption mode. String.ciphertext \u2014 Encrypted text that needs to be decrypted. String.key \u2014 Decryption key. String.iv \u2014 Initialization vector. Required for -gcm modes, Optional for others. String.aad \u2014 Additional authenticated data. Won't decrypt if this value is incorrect. Works only in -gcm modes, for others would throw an exception. String.Returned valueDecrypted String. String.\nExamples: SELECT comment, hex(secret) FROM encryption_test;SELECT comment, decrypt('aes-256-cfb128', secret, '12345678910121314151617181920212') as plaintext FROM encryption_test\nCategory: Encryption Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/encryption-functions"], "Title": ["tryDecrypt"], "Feature": ["tryDecrypt"], "Description": ["tryDecrypt", "Similar to decrypt, but returns NULL if decryption fails because of using the wrong key."], "Examples": ["CREATE TABLE decrypt_null (  dt DateTime,  user_id UInt32,  encrypted String,  iv String) ENGINE = Memory;", "INSERT INTO decrypt_null VALUES    ('2022-08-02 00:00:00', 1, encrypt('aes-256-gcm', 'value1', 'keykeykeykeykeykeykeykeykeykey01', 'iv1'), 'iv1'),    ('2022-09-02 00:00:00', 2, encrypt('aes-256-gcm', 'value2', 'keykeykeykeykeykeykeykeykeykey02', 'iv2'), 'iv2'),    ('2022-09-02 00:00:01', 3, encrypt('aes-256-gcm', 'value3', 'keykeykeykeykeykeykeykeykeykey03', 'iv3'), 'iv3');", "SELECT    dt,    user_id,    tryDecrypt('aes-256-gcm', encrypted, 'keykeykeykeykeykeykeykeykeykey02', iv) AS valueFROM decrypt_nullORDER BY user_id ASC"], "Category": ["Encryption Functions"], "index": 676, "vector_txt": "676:Feature: tryDecrypt\nDescription: tryDecryptSimilar to decrypt, but returns NULL if decryption fails because of using the wrong key.\nExamples: CREATE TABLE decrypt_null (  dt DateTime,  user_id UInt32,  encrypted String,  iv String) ENGINE = Memory;INSERT INTO decrypt_null VALUES    ('2022-08-02 00:00:00', 1, encrypt('aes-256-gcm', 'value1', 'keykeykeykeykeykeykeykeykeykey01', 'iv1'), 'iv1'),    ('2022-09-02 00:00:00', 2, encrypt('aes-256-gcm', 'value2', 'keykeykeykeykeykeykeykeykeykey02', 'iv2'), 'iv2'),    ('2022-09-02 00:00:01', 3, encrypt('aes-256-gcm', 'value3', 'keykeykeykeykeykeykeykeykeykey03', 'iv3'), 'iv3');SELECT    dt,    user_id,    tryDecrypt('aes-256-gcm', encrypted, 'keykeykeykeykeykeykeykeykeykey02', iv) AS valueFROM decrypt_nullORDER BY user_id ASC\nCategory: Encryption Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/encryption-functions"], "Title": ["aes_decrypt_mysql"], "Feature": ["aes_decrypt_mysql('mode', 'ciphertext', 'key' [, iv])"], "Description": ["aes_decrypt_mysql", "Compatible with mysql encryption and decrypts data encrypted with AES_ENCRYPT function.", "Will produce same plaintext as decrypt on equal inputs. But when key or iv are longer than they should normally be, aes_decrypt_mysql will stick to what MySQL's aes_decrypt does: 'fold' key and ignore excess bits of IV.", "Supported decryption modes:", "aes-128-ecb, aes-192-ecb, aes-256-ecbaes-128-cbc, aes-192-cbc, aes-256-cbcaes-128-cfb128aes-128-ofb, aes-192-ofb, aes-256-ofb", "Syntax", "aes_decrypt_mysql('mode', 'ciphertext', 'key' [, iv])", "Arguments", "mode \u2014 Decryption mode. String.ciphertext \u2014 Encrypted text that needs to be decrypted. String.key \u2014 Decryption key. String.iv \u2014 Initialization vector. Optional. String.", "Returned value", "Decrypted String. String."], "Examples": ["mysql> SET  block_encryption_mode='aes-256-ofb';Query OK, 0 rows affected (0.00 sec)mysql> SELECT aes_encrypt('Secret', '123456789101213141516171819202122', 'iviviviviviviviv123456') as ciphertext;+------------------------+| ciphertext             |+------------------------+| 0x24E9E4966469         |+------------------------+1 row in set (0.00 sec)", "SELECT aes_decrypt_mysql('aes-256-ofb', unhex('24E9E4966469'), '123456789101213141516171819202122', 'iviviviviviviviv123456') AS plaintext"], "Category": ["Encryption Functions"], "index": 677, "vector_txt": "677:Feature: aes_decrypt_mysql('mode', 'ciphertext', 'key' [, iv])\nDescription: aes_decrypt_mysqlCompatible with mysql encryption and decrypts data encrypted with AES_ENCRYPT function.Will produce same plaintext as decrypt on equal inputs. But when key or iv are longer than they should normally be, aes_decrypt_mysql will stick to what MySQL's aes_decrypt does: 'fold' key and ignore excess bits of IV.Supported decryption modes:aes-128-ecb, aes-192-ecb, aes-256-ecbaes-128-cbc, aes-192-cbc, aes-256-cbcaes-128-cfb128aes-128-ofb, aes-192-ofb, aes-256-ofbSyntaxaes_decrypt_mysql('mode', 'ciphertext', 'key' [, iv])Argumentsmode \u2014 Decryption mode. String.ciphertext \u2014 Encrypted text that needs to be decrypted. String.key \u2014 Decryption key. String.iv \u2014 Initialization vector. Optional. String.Returned valueDecrypted String. String.\nExamples: mysql> SET  block_encryption_mode='aes-256-ofb';Query OK, 0 rows affected (0.00 sec)mysql> SELECT aes_encrypt('Secret', '123456789101213141516171819202122', 'iviviviviviviviv123456') as ciphertext;+------------------------+| ciphertext             |+------------------------+| 0x24E9E4966469         |+------------------------+1 row in set (0.00 sec)SELECT aes_decrypt_mysql('aes-256-ofb', unhex('24E9E4966469'), '123456789101213141516171819202122', 'iviviviviviviviv123456') AS plaintext\nCategory: Encryption Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/files"], "Title": ["file"], "Feature": ["file(path[, default])"], "Description": ["file", "Reads a file as string and loads the data into the specified column. The file content is not interpreted.", "Also see table function file.", "Syntax", "file(path[, default])", "Arguments", "path \u2014 The path of the file relative to user_files_path. Supports wildcards *, **, ?, {abc,def} and {N..M} where N, M are numbers and 'abc', 'def' are strings.default \u2014 The value returned if the file does not exist or cannot be accessed. Supported data types: String and NULL."], "Examples": ["INSERT INTO table SELECT file('a.txt'), file('b.txt');"], "Category": ["Files Functions"], "index": 678, "vector_txt": "678:Feature: file(path[, default])\nDescription: fileReads a file as string and loads the data into the specified column. The file content is not interpreted.Also see table function file.Syntaxfile(path[, default])Argumentspath \u2014 The path of the file relative to user_files_path. Supports wildcards *, **, ?, {abc,def} and {N..M} where N, M are numbers and 'abc', 'def' are strings.default \u2014 The value returned if the file does not exist or cannot be accessed. Supported data types: String and NULL.\nExamples: INSERT INTO table SELECT file('a.txt'), file('b.txt');\nCategory: Files Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["halfMD5"], "Feature": ["halfMD5(par1, ...)"], "Description": ["halfMD5", "Interprets all the input parameters as strings and calculates the MD5 hash value for each of them. Then combines hashes, takes the first 8 bytes of the hash of the resulting string, and interprets them as UInt64 in big-endian byte order.", "halfMD5(par1, ...)", "The function is relatively slow (5 million short strings per second per processor core).\nConsider using the sipHash64 function instead.", "Arguments", "The function takes a variable number of input parameters. Arguments can be any of the supported data types. For some data types calculated value of hash function may be the same for the same values even if types of arguments differ (integers of different size, named and unnamed Tuple with the same data, Map and the corresponding Array(Tuple(key, value)) type with the same data).", "Returned Value", "A UInt64 data type hash value."], "Examples": ["SELECT halfMD5(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS halfMD5hash, toTypeName(halfMD5hash) AS type;"], "Category": ["Hash Functions"], "index": 679, "vector_txt": "679:Feature: halfMD5(par1, ...)\nDescription: halfMD5Interprets all the input parameters as strings and calculates the MD5 hash value for each of them. Then combines hashes, takes the first 8 bytes of the hash of the resulting string, and interprets them as UInt64 in big-endian byte order.halfMD5(par1, ...)The function is relatively slow (5 million short strings per second per processor core).\nConsider using the sipHash64 function instead.ArgumentsThe function takes a variable number of input parameters. Arguments can be any of the supported data types. For some data types calculated value of hash function may be the same for the same values even if types of arguments differ (integers of different size, named and unnamed Tuple with the same data, Map and the corresponding Array(Tuple(key, value)) type with the same data).Returned ValueA UInt64 data type hash value.\nExamples: SELECT halfMD5(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS halfMD5hash, toTypeName(halfMD5hash) AS type;\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayConcat"], "Feature": ["arrayConcat(arrays)"], "Description": ["arrayConcat", "Combines arrays passed as arguments.", "arrayConcat(arrays)", "Arguments", "arrays \u2013 Arbitrary number of arguments of Array type."], "Examples": ["SELECT arrayConcat([1, 2], [3, 4], [5, 6]) AS res"], "Category": ["Arrays Functions"], "index": 680, "vector_txt": "680:Feature: arrayConcat(arrays)\nDescription: arrayConcatCombines arrays passed as arguments.arrayConcat(arrays)Argumentsarrays \u2013 Arbitrary number of arguments of Array type.\nExamples: SELECT arrayConcat([1, 2], [3, 4], [5, 6]) AS res\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["MD4"], "Feature": ["MD4"], "Description": ["MD4", "Calculates the MD4 from a string and returns the resulting set of bytes as FixedString(16)."], "Examples": [], "Category": ["Hash Functions"], "index": 681, "vector_txt": "681:Feature: MD4\nDescription: MD4Calculates the MD4 from a string and returns the resulting set of bytes as FixedString(16).\nExamples: \nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["MD5"], "Feature": ["MD5"], "Description": ["MD5", "Calculates the MD5 from a string and returns the resulting set of bytes as FixedString(16).\nIf you do not need MD5 in particular, but you need a decent cryptographic 128-bit hash, use the \u2018sipHash128\u2019 function instead.\nIf you want to get the same result as output by the md5sum utility, use lower(hex(MD5(s)))."], "Examples": [], "Category": ["Hash Functions"], "index": 682, "vector_txt": "682:Feature: MD5\nDescription: MD5Calculates the MD5 from a string and returns the resulting set of bytes as FixedString(16).\nIf you do not need MD5 in particular, but you need a decent cryptographic 128-bit hash, use the \u2018sipHash128\u2019 function instead.\nIf you want to get the same result as output by the md5sum utility, use lower(hex(MD5(s))).\nExamples: \nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["RIPEMD160"], "Feature": ["RIPEMD160(input)"], "Description": ["RIPEMD160", "Produces RIPEMD-160 hash value.", "Syntax", "RIPEMD160(input)", "Parameters", "input: Input string. String", "Returned value", "A 160-bit RIPEMD-160 hash value of type FixedString(20)."], "Examples": ["SELECT HEX(RIPEMD160('The quick brown fox jumps over the lazy dog'));"], "Category": ["Hash Functions"], "index": 683, "vector_txt": "683:Feature: RIPEMD160(input)\nDescription: RIPEMD160Produces RIPEMD-160 hash value.SyntaxRIPEMD160(input)Parametersinput: Input string. StringReturned valueA 160-bit RIPEMD-160 hash value of type FixedString(20).\nExamples: SELECT HEX(RIPEMD160('The quick brown fox jumps over the lazy dog'));\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["sipHash64"], "Feature": ["sipHash64(par1,...)"], "Description": ["sipHash64", "Produces a 64-bit SipHash hash value.", "sipHash64(par1,...)", "This is a cryptographic hash function. It works at least three times faster than the MD5 hash function.", "The function interprets all the input parameters as strings and calculates the hash value for each of them. It then combines the hashes by the following algorithm:", "The first and the second hash value are concatenated to an array which is hashed.The previously calculated hash value and the hash of the third input parameter are hashed in a similar way.This calculation is repeated for all remaining hash values of the original input.", "Arguments", "The function takes a variable number of input parameters of any of the supported data types.", "Returned Value", "A UInt64 data type hash value.", "Note that the calculated hash values may be equal for the same input values of different argument types. This affects for example integer types of different size, named and unnamed Tuple with the same data, Map and the corresponding Array(Tuple(key, value)) type with the same data."], "Examples": ["SELECT sipHash64(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS SipHash, toTypeName(SipHash) AS type;"], "Category": ["Hash Functions"], "index": 684, "vector_txt": "684:Feature: sipHash64(par1,...)\nDescription: sipHash64Produces a 64-bit SipHash hash value.sipHash64(par1,...)This is a cryptographic hash function. It works at least three times faster than the MD5 hash function.The function interprets all the input parameters as strings and calculates the hash value for each of them. It then combines the hashes by the following algorithm:The first and the second hash value are concatenated to an array which is hashed.The previously calculated hash value and the hash of the third input parameter are hashed in a similar way.This calculation is repeated for all remaining hash values of the original input.ArgumentsThe function takes a variable number of input parameters of any of the supported data types.Returned ValueA UInt64 data type hash value.Note that the calculated hash values may be equal for the same input values of different argument types. This affects for example integer types of different size, named and unnamed Tuple with the same data, Map and the corresponding Array(Tuple(key, value)) type with the same data.\nExamples: SELECT sipHash64(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS SipHash, toTypeName(SipHash) AS type;\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["sipHash64Keyed"], "Feature": ["sipHash64Keyed((k0, k1), par1,...)"], "Description": ["sipHash64Keyed", "Same as sipHash64 but additionally takes an explicit key argument instead of using a fixed key.", "Syntax", "sipHash64Keyed((k0, k1), par1,...)", "Arguments", "Same as sipHash64, but the first argument is a tuple of two UInt64 values representing the key.", "Returned value", "A UInt64 data type hash value."], "Examples": ["SELECT sipHash64Keyed((506097522914230528, 1084818905618843912), array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS SipHash, toTypeName(SipHash) AS type;"], "Category": ["Hash Functions"], "index": 685, "vector_txt": "685:Feature: sipHash64Keyed((k0, k1), par1,...)\nDescription: sipHash64KeyedSame as sipHash64 but additionally takes an explicit key argument instead of using a fixed key.SyntaxsipHash64Keyed((k0, k1), par1,...)ArgumentsSame as sipHash64, but the first argument is a tuple of two UInt64 values representing the key.Returned valueA UInt64 data type hash value.\nExamples: SELECT sipHash64Keyed((506097522914230528, 1084818905618843912), array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS SipHash, toTypeName(SipHash) AS type;\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["sipHash128"], "Feature": ["sipHash128(par1,...)"], "Description": ["sipHash128", "Like sipHash64 but produces a 128-bit hash value, i.e. the final xor-folding state is done up to 128 bits.", "NoteThis 128-bit variant differs from the reference implementation and it's weaker.\nThis version exists because, when it was written, there was no official 128-bit extension for SipHash.\nNew projects should probably use sipHash128Reference.", "Syntax", "sipHash128(par1,...)", "Arguments", "Same as for sipHash64.", "Returned value", "A 128-bit SipHash hash value of type FixedString(16)."], "Examples": ["SELECT hex(sipHash128('foo', '\\x01', 3));"], "Category": ["Hash Functions"], "index": 686, "vector_txt": "686:Feature: sipHash128(par1,...)\nDescription: sipHash128Like sipHash64 but produces a 128-bit hash value, i.e. the final xor-folding state is done up to 128 bits.NoteThis 128-bit variant differs from the reference implementation and it's weaker.\nThis version exists because, when it was written, there was no official 128-bit extension for SipHash.\nNew projects should probably use sipHash128Reference.SyntaxsipHash128(par1,...)ArgumentsSame as for sipHash64.Returned valueA 128-bit SipHash hash value of type FixedString(16).\nExamples: SELECT hex(sipHash128('foo', '\\x01', 3));\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["sipHash128Keyed"], "Feature": ["sipHash128Keyed((k0, k1), par1,...)"], "Description": ["sipHash128Keyed", "Same as sipHash128 but additionally takes an explicit key argument instead of using a fixed key.", "NoteThis 128-bit variant differs from the reference implementation and it's weaker.\nThis version exists because, when it was written, there was no official 128-bit extension for SipHash.\nNew projects should probably use sipHash128ReferenceKeyed.", "Syntax", "sipHash128Keyed((k0, k1), par1,...)", "Arguments", "Same as sipHash128, but the first argument is a tuple of two UInt64 values representing the key.", "Returned value", "A 128-bit SipHash hash value of type FixedString(16)."], "Examples": ["SELECT hex(sipHash128Keyed((506097522914230528, 1084818905618843912),'foo', '\\x01', 3));"], "Category": ["Hash Functions"], "index": 687, "vector_txt": "687:Feature: sipHash128Keyed((k0, k1), par1,...)\nDescription: sipHash128KeyedSame as sipHash128 but additionally takes an explicit key argument instead of using a fixed key.NoteThis 128-bit variant differs from the reference implementation and it's weaker.\nThis version exists because, when it was written, there was no official 128-bit extension for SipHash.\nNew projects should probably use sipHash128ReferenceKeyed.SyntaxsipHash128Keyed((k0, k1), par1,...)ArgumentsSame as sipHash128, but the first argument is a tuple of two UInt64 values representing the key.Returned valueA 128-bit SipHash hash value of type FixedString(16).\nExamples: SELECT hex(sipHash128Keyed((506097522914230528, 1084818905618843912),'foo', '\\x01', 3));\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["sipHash128Reference"], "Feature": ["sipHash128Reference(par1,...)"], "Description": ["sipHash128Reference", "Like sipHash128 but implements the 128-bit algorithm from the original authors of SipHash.", "Syntax", "sipHash128Reference(par1,...)", "Arguments", "Same as for sipHash128.", "Returned value", "A 128-bit SipHash hash value of type FixedString(16)."], "Examples": ["SELECT hex(sipHash128Reference('foo', '\\x01', 3));"], "Category": ["Hash Functions"], "index": 688, "vector_txt": "688:Feature: sipHash128Reference(par1,...)\nDescription: sipHash128ReferenceLike sipHash128 but implements the 128-bit algorithm from the original authors of SipHash.SyntaxsipHash128Reference(par1,...)ArgumentsSame as for sipHash128.Returned valueA 128-bit SipHash hash value of type FixedString(16).\nExamples: SELECT hex(sipHash128Reference('foo', '\\x01', 3));\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["sipHash128ReferenceKeyed"], "Feature": ["sipHash128ReferenceKeyed((k0, k1), par1,...)"], "Description": ["sipHash128ReferenceKeyed", "Same as sipHash128Reference but additionally takes an explicit key argument instead of using a fixed key.", "Syntax", "sipHash128ReferenceKeyed((k0, k1), par1,...)", "Arguments", "Same as sipHash128Reference, but the first argument is a tuple of two UInt64 values representing the key.", "Returned value", "A 128-bit SipHash hash value of type FixedString(16)."], "Examples": ["SELECT hex(sipHash128ReferenceKeyed((506097522914230528, 1084818905618843912),'foo', '\\x01', 3));"], "Category": ["Hash Functions"], "index": 689, "vector_txt": "689:Feature: sipHash128ReferenceKeyed((k0, k1), par1,...)\nDescription: sipHash128ReferenceKeyedSame as sipHash128Reference but additionally takes an explicit key argument instead of using a fixed key.SyntaxsipHash128ReferenceKeyed((k0, k1), par1,...)ArgumentsSame as sipHash128Reference, but the first argument is a tuple of two UInt64 values representing the key.Returned valueA 128-bit SipHash hash value of type FixedString(16).\nExamples: SELECT hex(sipHash128ReferenceKeyed((506097522914230528, 1084818905618843912),'foo', '\\x01', 3));\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["cityHash64"], "Feature": ["cityHash64(par1,...)"], "Description": ["cityHash64", "Produces a 64-bit CityHash hash value.", "cityHash64(par1,...)", "This is a fast non-cryptographic hash function. It uses the CityHash algorithm for string parameters and implementation-specific fast non-cryptographic hash function for parameters with other data types. The function uses the CityHash combinator to get the final results.", "Note that Google changed the algorithm of CityHash after it has been added to ClickHouse. In other words, ClickHouse's cityHash64 and Google's upstream CityHash now produce different results. ClickHouse cityHash64 corresponds to CityHash v1.0.2.", "Arguments", "The function takes a variable number of input parameters. Arguments can be any of the supported data types. For some data types calculated value of hash function may be the same for the same values even if types of arguments differ (integers of different size, named and unnamed Tuple with the same data, Map and the corresponding Array(Tuple(key, value)) type with the same data).", "Returned Value", "A UInt64 data type hash value."], "Examples": ["SELECT cityHash64(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS CityHash, toTypeName(CityHash) AS type;", "SELECT groupBitXor(cityHash64(*)) FROM table"], "Category": ["Hash Functions"], "index": 690, "vector_txt": "690:Feature: cityHash64(par1,...)\nDescription: cityHash64Produces a 64-bit CityHash hash value.cityHash64(par1,...)This is a fast non-cryptographic hash function. It uses the CityHash algorithm for string parameters and implementation-specific fast non-cryptographic hash function for parameters with other data types. The function uses the CityHash combinator to get the final results.Note that Google changed the algorithm of CityHash after it has been added to ClickHouse. In other words, ClickHouse's cityHash64 and Google's upstream CityHash now produce different results. ClickHouse cityHash64 corresponds to CityHash v1.0.2.ArgumentsThe function takes a variable number of input parameters. Arguments can be any of the supported data types. For some data types calculated value of hash function may be the same for the same values even if types of arguments differ (integers of different size, named and unnamed Tuple with the same data, Map and the corresponding Array(Tuple(key, value)) type with the same data).Returned ValueA UInt64 data type hash value.\nExamples: SELECT cityHash64(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS CityHash, toTypeName(CityHash) AS type;SELECT groupBitXor(cityHash64(*)) FROM table\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayElement(arr, n), operator arr[n]"], "Feature": ["arrayElement(arr, n), operator arr[n]"], "Description": ["arrayElement(arr, n), operator arr[n]", "Get the element with the index n from the array arr. n must be any integer type.\nIndexes in an array begin from one.", "Negative indexes are supported. In this case, it selects the corresponding element numbered from the end. For example, arr[-1] is the last item in the array.", "If the index falls outside of the bounds of an array, it returns some default value (0 for numbers, an empty string for strings, etc.), except for the case with a non-constant array and a constant index 0 (in this case there will be an error Array indices are 1-based)."], "Examples": [], "Category": ["Arrays Functions"], "index": 691, "vector_txt": "691:Feature: arrayElement(arr, n), operator arr[n]\nDescription: arrayElement(arr, n), operator arr[n]Get the element with the index n from the array arr. n must be any integer type.\nIndexes in an array begin from one.Negative indexes are supported. In this case, it selects the corresponding element numbered from the end. For example, arr[-1] is the last item in the array.If the index falls outside of the bounds of an array, it returns some default value (0 for numbers, an empty string for strings, etc.), except for the case with a non-constant array and a constant index 0 (in this case there will be an error Array indices are 1-based).\nExamples: \nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["intHash32"], "Feature": ["intHash32(int)"], "Description": ["intHash32", "Calculates a 32-bit hash code from any type of integer.\nThis is a relatively fast non-cryptographic hash function of average quality for numbers.", "Syntax", "intHash32(int)", "Arguments", "int \u2014 Integer to hash. (U)Int*.", "Returned value", "32-bit hash code. UInt32."], "Examples": ["SELECT intHash32(42);"], "Category": ["Hash Functions"], "index": 692, "vector_txt": "692:Feature: intHash32(int)\nDescription: intHash32Calculates a 32-bit hash code from any type of integer.\nThis is a relatively fast non-cryptographic hash function of average quality for numbers.SyntaxintHash32(int)Argumentsint \u2014 Integer to hash. (U)Int*.Returned value32-bit hash code. UInt32.\nExamples: SELECT intHash32(42);\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["intHash64"], "Feature": ["intHash64(int)"], "Description": ["intHash64", "Calculates a 64-bit hash code from any type of integer.\nThis is a relatively fast non-cryptographic hash function of average quality for numbers.\nIt works faster than intHash32.", "Syntax", "intHash64(int)", "Arguments", "int \u2014 Integer to hash. (U)Int*.", "Returned value", "64-bit hash code. UInt64."], "Examples": ["SELECT intHash64(42);"], "Category": ["Hash Functions"], "index": 693, "vector_txt": "693:Feature: intHash64(int)\nDescription: intHash64Calculates a 64-bit hash code from any type of integer.\nThis is a relatively fast non-cryptographic hash function of average quality for numbers.\nIt works faster than intHash32.SyntaxintHash64(int)Argumentsint \u2014 Integer to hash. (U)Int*.Returned value64-bit hash code. UInt64.\nExamples: SELECT intHash64(42);\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["SHA1, SHA224, SHA256, SHA512, SHA512_256"], "Feature": ["SHA1('s')...SHA512('s')"], "Description": ["SHA1, SHA224, SHA256, SHA512, SHA512_256", "Calculates SHA-1, SHA-224, SHA-256, SHA-512, SHA-512-256 hash from a string and returns the resulting set of bytes as FixedString.", "Syntax", "SHA1('s')...SHA512('s')", "The function works fairly slowly (SHA-1 processes about 5 million short strings per second per processor core, while SHA-224 and SHA-256 process about 2.2 million).\nWe recommend using this function only in cases when you need a specific hash function and you can\u2019t select it.\nEven in these cases, we recommend applying the function offline and pre-calculating values when inserting them into the table, instead of applying it in SELECT queries.", "Arguments", "s \u2014 Input string for SHA hash calculation. String.", "Returned value", "SHA hash as a hex-unencoded FixedString. SHA-1 returns as FixedString(20), SHA-224 as FixedString(28), SHA-256 \u2014 FixedString(32), SHA-512 \u2014 FixedString(64). FixedString."], "Examples": ["SELECT hex(SHA1('abc'));"], "Category": ["Hash Functions"], "index": 694, "vector_txt": "694:Feature: SHA1('s')...SHA512('s')\nDescription: SHA1, SHA224, SHA256, SHA512, SHA512_256Calculates SHA-1, SHA-224, SHA-256, SHA-512, SHA-512-256 hash from a string and returns the resulting set of bytes as FixedString.SyntaxSHA1('s')...SHA512('s')The function works fairly slowly (SHA-1 processes about 5 million short strings per second per processor core, while SHA-224 and SHA-256 process about 2.2 million).\nWe recommend using this function only in cases when you need a specific hash function and you can\u2019t select it.\nEven in these cases, we recommend applying the function offline and pre-calculating values when inserting them into the table, instead of applying it in SELECT queries.Argumentss \u2014 Input string for SHA hash calculation. String.Returned valueSHA hash as a hex-unencoded FixedString. SHA-1 returns as FixedString(20), SHA-224 as FixedString(28), SHA-256 \u2014 FixedString(32), SHA-512 \u2014 FixedString(64). FixedString.\nExamples: SELECT hex(SHA1('abc'));\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["BLAKE3"], "Feature": ["BLAKE3('s')"], "Description": ["BLAKE3", "Calculates BLAKE3 hash string and returns the resulting set of bytes as FixedString.", "Syntax", "BLAKE3('s')", "This cryptographic hash-function is integrated into ClickHouse with BLAKE3 Rust library. The function is rather fast and shows approximately two times faster performance compared to SHA-2, while generating hashes of the same length as SHA-256.", "Arguments", "s - input string for BLAKE3 hash calculation. String.", "Return value", "BLAKE3 hash as a byte array with type FixedString(32). FixedString."], "Examples": ["SELECT hex(BLAKE3('ABC'))", "\u250c\u2500hex(BLAKE3('ABC'))\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 D1717274597CF0289694F75D96D444B992A096F1AFD8E7BBFA6EBB1D360FEDFC \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Category": ["Hash Functions"], "index": 695, "vector_txt": "695:Feature: BLAKE3('s')\nDescription: BLAKE3Calculates BLAKE3 hash string and returns the resulting set of bytes as FixedString.SyntaxBLAKE3('s')This cryptographic hash-function is integrated into ClickHouse with BLAKE3 Rust library. The function is rather fast and shows approximately two times faster performance compared to SHA-2, while generating hashes of the same length as SHA-256.Argumentss - input string for BLAKE3 hash calculation. String.Return valueBLAKE3 hash as a byte array with type FixedString(32). FixedString.\nExamples: SELECT hex(BLAKE3('ABC'))\u250c\u2500hex(BLAKE3('ABC'))\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 D1717274597CF0289694F75D96D444B992A096F1AFD8E7BBFA6EBB1D360FEDFC \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["URLHash(url[, N])"], "Feature": ["URLHash(url[, N])"], "Description": ["URLHash(url[, N])", "A fast, decent-quality non-cryptographic hash function for a string obtained from a URL using some type of normalization.\nURLHash(s) \u2013 Calculates a hash from a string without one of the trailing symbols /,? or # at the end, if present.\nURLHash(s, N) \u2013 Calculates a hash from a string up to the N level in the URL hierarchy, without one of the trailing symbols /,? or # at the end, if present.\nLevels are the same as in URLHierarchy."], "Examples": [], "Category": ["Hash Functions"], "index": 696, "vector_txt": "696:Feature: URLHash(url[, N])\nDescription: URLHash(url[, N])A fast, decent-quality non-cryptographic hash function for a string obtained from a URL using some type of normalization.\nURLHash(s) \u2013 Calculates a hash from a string without one of the trailing symbols /,? or # at the end, if present.\nURLHash(s, N) \u2013 Calculates a hash from a string up to the N level in the URL hierarchy, without one of the trailing symbols /,? or # at the end, if present.\nLevels are the same as in URLHierarchy.\nExamples: \nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["farmFingerprint64"], "Feature": ["farmFingerprint64"], "Description": ["farmFingerprint64"], "Examples": [], "Category": ["Hash Functions"], "index": 697, "vector_txt": "697:Feature: farmFingerprint64\nDescription: farmFingerprint64\nExamples: \nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["farmHash64"], "Feature": ["farmFingerprint64(par1, ...)farmHash64(par1, ...)"], "Description": ["farmHash64", "Produces a 64-bit FarmHash or Fingerprint value. farmFingerprint64 is preferred for a stable and portable value.", "farmFingerprint64(par1, ...)farmHash64(par1, ...)", "These functions use the Fingerprint64 and Hash64 methods respectively from all available methods.", "Arguments", "The function takes a variable number of input parameters. Arguments can be any of the supported data types. For some data types calculated value of hash function may be the same for the same values even if types of arguments differ (integers of different size, named and unnamed Tuple with the same data, Map and the corresponding Array(Tuple(key, value)) type with the same data).", "Returned Value", "A UInt64 data type hash value."], "Examples": ["SELECT farmHash64(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS FarmHash, toTypeName(FarmHash) AS type;"], "Category": ["Hash Functions"], "index": 698, "vector_txt": "698:Feature: farmFingerprint64(par1, ...)farmHash64(par1, ...)\nDescription: farmHash64Produces a 64-bit FarmHash or Fingerprint value. farmFingerprint64 is preferred for a stable and portable value.farmFingerprint64(par1, ...)farmHash64(par1, ...)These functions use the Fingerprint64 and Hash64 methods respectively from all available methods.ArgumentsThe function takes a variable number of input parameters. Arguments can be any of the supported data types. For some data types calculated value of hash function may be the same for the same values even if types of arguments differ (integers of different size, named and unnamed Tuple with the same data, Map and the corresponding Array(Tuple(key, value)) type with the same data).Returned ValueA UInt64 data type hash value.\nExamples: SELECT farmHash64(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS FarmHash, toTypeName(FarmHash) AS type;\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["javaHash"], "Feature": ["SELECT javaHash('')"], "Description": ["javaHash", "Calculates JavaHash from a string,\nByte,\nShort,\nInteger,\nLong.\nThis hash function is neither fast nor having a good quality. The only reason to use it is when this algorithm is already used in another system and you have to calculate exactly the same result.", "Note that Java only support calculating signed integers hash, so if you want to calculate unsigned integers hash you must cast it to proper signed ClickHouse types.", "Syntax", "SELECT javaHash('')", "Returned value", "A Int32 data type hash value."], "Examples": ["SELECT javaHash(toInt32(123));", "SELECT javaHash('Hello, world!');"], "Category": ["Hash Functions"], "index": 699, "vector_txt": "699:Feature: SELECT javaHash('')\nDescription: javaHashCalculates JavaHash from a string,\nByte,\nShort,\nInteger,\nLong.\nThis hash function is neither fast nor having a good quality. The only reason to use it is when this algorithm is already used in another system and you have to calculate exactly the same result.Note that Java only support calculating signed integers hash, so if you want to calculate unsigned integers hash you must cast it to proper signed ClickHouse types.SyntaxSELECT javaHash('')Returned valueA Int32 data type hash value.\nExamples: SELECT javaHash(toInt32(123));SELECT javaHash('Hello, world!');\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["javaHashUTF16LE"], "Feature": ["javaHashUTF16LE(stringUtf16le)"], "Description": ["javaHashUTF16LE", "Calculates JavaHash from a string, assuming it contains bytes representing a string in UTF-16LE encoding.", "Syntax", "javaHashUTF16LE(stringUtf16le)", "Arguments", "stringUtf16le \u2014 a string in UTF-16LE encoding.", "Returned value", "A Int32 data type hash value."], "Examples": ["SELECT javaHashUTF16LE(convertCharset('test', 'utf-8', 'utf-16le'));"], "Category": ["Hash Functions"], "index": 700, "vector_txt": "700:Feature: javaHashUTF16LE(stringUtf16le)\nDescription: javaHashUTF16LECalculates JavaHash from a string, assuming it contains bytes representing a string in UTF-16LE encoding.SyntaxjavaHashUTF16LE(stringUtf16le)ArgumentsstringUtf16le \u2014 a string in UTF-16LE encoding.Returned valueA Int32 data type hash value.\nExamples: SELECT javaHashUTF16LE(convertCharset('test', 'utf-8', 'utf-16le'));\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["hiveHash"], "Feature": ["SELECT hiveHash('')"], "Description": ["hiveHash", "Calculates HiveHash from a string.", "SELECT hiveHash('')", "This is just JavaHash with zeroed out sign bit. This function is used in Apache Hive for versions before 3.0. This hash function is neither fast nor having a good quality. The only reason to use it is when this algorithm is already used in another system and you have to calculate exactly the same result.", "Returned value", "hiveHash hash value. Int32."], "Examples": ["SELECT hiveHash('Hello, world!');"], "Category": ["Hash Functions"], "index": 701, "vector_txt": "701:Feature: SELECT hiveHash('')\nDescription: hiveHashCalculates HiveHash from a string.SELECT hiveHash('')This is just JavaHash with zeroed out sign bit. This function is used in Apache Hive for versions before 3.0. This hash function is neither fast nor having a good quality. The only reason to use it is when this algorithm is already used in another system and you have to calculate exactly the same result.Returned valuehiveHash hash value. Int32.\nExamples: SELECT hiveHash('Hello, world!');\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["has(arr, elem)"], "Feature": ["has(arr, elem)"], "Description": ["has(arr, elem)", "Checks whether the \u2018arr\u2019 array has the \u2018elem\u2019 element.\nReturns 0 if the element is not in the array, or 1 if it is.", "NULL is processed as a value.", "SELECT has([1, 2, NULL], NULL)", "\u250c\u2500has([1, 2, NULL], NULL)\u2500\u2510\u2502                       1 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Examples": ["SELECT has([1, 2, NULL], NULL)"], "Category": ["Arrays Functions"], "index": 702, "vector_txt": "702:Feature: has(arr, elem)\nDescription: has(arr, elem)Checks whether the \u2018arr\u2019 array has the \u2018elem\u2019 element.\nReturns 0 if the element is not in the array, or 1 if it is.NULL is processed as a value.SELECT has([1, 2, NULL], NULL)\u250c\u2500has([1, 2, NULL], NULL)\u2500\u2510\u2502                       1 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nExamples: SELECT has([1, 2, NULL], NULL)\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["metroHash64"], "Feature": ["metroHash64(par1, ...)"], "Description": ["metroHash64", "Produces a 64-bit MetroHash hash value.", "metroHash64(par1, ...)", "Arguments", "The function takes a variable number of input parameters. Arguments can be any of the supported data types. For some data types calculated value of hash function may be the same for the same values even if types of arguments differ (integers of different size, named and unnamed Tuple with the same data, Map and the corresponding Array(Tuple(key, value)) type with the same data).", "Returned Value", "A UInt64 data type hash value."], "Examples": ["SELECT metroHash64(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS MetroHash, toTypeName(MetroHash) AS type;"], "Category": ["Hash Functions"], "index": 703, "vector_txt": "703:Feature: metroHash64(par1, ...)\nDescription: metroHash64Produces a 64-bit MetroHash hash value.metroHash64(par1, ...)ArgumentsThe function takes a variable number of input parameters. Arguments can be any of the supported data types. For some data types calculated value of hash function may be the same for the same values even if types of arguments differ (integers of different size, named and unnamed Tuple with the same data, Map and the corresponding Array(Tuple(key, value)) type with the same data).Returned ValueA UInt64 data type hash value.\nExamples: SELECT metroHash64(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS MetroHash, toTypeName(MetroHash) AS type;\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["jumpConsistentHash"], "Feature": ["jumpConsistentHash"], "Description": ["jumpConsistentHash", "Calculates JumpConsistentHash form a UInt64.\nAccepts two arguments: a UInt64-type key and the number of buckets. Returns Int32.\nFor more information, see the link: JumpConsistentHash"], "Examples": [], "Category": ["Hash Functions"], "index": 704, "vector_txt": "704:Feature: jumpConsistentHash\nDescription: jumpConsistentHashCalculates JumpConsistentHash form a UInt64.\nAccepts two arguments: a UInt64-type key and the number of buckets. Returns Int32.\nFor more information, see the link: JumpConsistentHash\nExamples: \nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["kostikConsistentHash"], "Feature": ["kostikConsistentHash(input, n)"], "Description": ["kostikConsistentHash", "An O(1) time and space consistent hash algorithm by Konstantin 'kostik' Oblakov. Previously yandexConsistentHash.", "Syntax", "kostikConsistentHash(input, n)", "Alias: yandexConsistentHash (left for backwards compatibility sake).", "Parameters", "input: A UInt64-type key UInt64.n: Number of buckets. UInt16.", "Returned value", "A UInt16 data type hash value.", "Implementation details", "It is efficient only if n <= 32768."], "Examples": ["SELECT kostikConsistentHash(16045690984833335023, 2);"], "Category": ["Hash Functions"], "index": 705, "vector_txt": "705:Feature: kostikConsistentHash(input, n)\nDescription: kostikConsistentHashAn O(1) time and space consistent hash algorithm by Konstantin 'kostik' Oblakov. Previously yandexConsistentHash.SyntaxkostikConsistentHash(input, n)Alias: yandexConsistentHash (left for backwards compatibility sake).Parametersinput: A UInt64-type key UInt64.n: Number of buckets. UInt16.Returned valueA UInt16 data type hash value.Implementation detailsIt is efficient only if n <= 32768.\nExamples: SELECT kostikConsistentHash(16045690984833335023, 2);\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["murmurHash2_32, murmurHash2_64"], "Feature": ["murmurHash2_32(par1, ...)murmurHash2_64(par1, ...)"], "Description": ["murmurHash2_32, murmurHash2_64", "Produces a MurmurHash2 hash value.", "murmurHash2_32(par1, ...)murmurHash2_64(par1, ...)", "Arguments", "Both functions take a variable number of input parameters. Arguments can be any of the supported data types. For some data types calculated value of hash function may be the same for the same values even if types of arguments differ (integers of different size, named and unnamed Tuple with the same data, Map and the corresponding Array(Tuple(key, value)) type with the same data).", "Returned Value", "The murmurHash2_32 function returns hash value having the UInt32 data type.The murmurHash2_64 function returns hash value having the UInt64 data type."], "Examples": ["SELECT murmurHash2_64(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS MurmurHash2, toTypeName(MurmurHash2) AS type;"], "Category": ["Hash Functions"], "index": 706, "vector_txt": "706:Feature: murmurHash2_32(par1, ...)murmurHash2_64(par1, ...)\nDescription: murmurHash2_32, murmurHash2_64Produces a MurmurHash2 hash value.murmurHash2_32(par1, ...)murmurHash2_64(par1, ...)ArgumentsBoth functions take a variable number of input parameters. Arguments can be any of the supported data types. For some data types calculated value of hash function may be the same for the same values even if types of arguments differ (integers of different size, named and unnamed Tuple with the same data, Map and the corresponding Array(Tuple(key, value)) type with the same data).Returned ValueThe murmurHash2_32 function returns hash value having the UInt32 data type.The murmurHash2_64 function returns hash value having the UInt64 data type.\nExamples: SELECT murmurHash2_64(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS MurmurHash2, toTypeName(MurmurHash2) AS type;\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["gccMurmurHash"], "Feature": ["gccMurmurHash(par1, ...)"], "Description": ["gccMurmurHash", "Calculates a 64-bit MurmurHash2 hash value using the same hash seed as gcc. It is portable between Clang and GCC builds.", "Syntax", "gccMurmurHash(par1, ...)", "Arguments", "par1, ... \u2014 A variable number of parameters that can be any of the supported data types.", "Returned value", "Calculated hash value. UInt64."], "Examples": ["SELECT    gccMurmurHash(1, 2, 3) AS res1,    gccMurmurHash(('a', [1, 2, 3], 4, (4, ['foo', 'bar'], 1, (1, 2)))) AS res2"], "Category": ["Hash Functions"], "index": 707, "vector_txt": "707:Feature: gccMurmurHash(par1, ...)\nDescription: gccMurmurHashCalculates a 64-bit MurmurHash2 hash value using the same hash seed as gcc. It is portable between Clang and GCC builds.SyntaxgccMurmurHash(par1, ...)Argumentspar1, ... \u2014 A variable number of parameters that can be any of the supported data types.Returned valueCalculated hash value. UInt64.\nExamples: SELECT    gccMurmurHash(1, 2, 3) AS res1,    gccMurmurHash(('a', [1, 2, 3], 4, (4, ['foo', 'bar'], 1, (1, 2)))) AS res2\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["kafkaMurmurHash"], "Feature": ["MurmurHash(par1, ...)"], "Description": ["kafkaMurmurHash", "Calculates a 32-bit MurmurHash2 hash value using the same hash seed as Kafka and without the highest bit to be compatible with Default Partitioner.", "Syntax", "MurmurHash(par1, ...)", "Arguments", "par1, ... \u2014 A variable number of parameters that can be any of the supported data types.", "Returned value", "Calculated hash value. UInt32."], "Examples": ["SELECT    kafkaMurmurHash('foobar') AS res1,    kafkaMurmurHash(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS res2"], "Category": ["Hash Functions"], "index": 708, "vector_txt": "708:Feature: MurmurHash(par1, ...)\nDescription: kafkaMurmurHashCalculates a 32-bit MurmurHash2 hash value using the same hash seed as Kafka and without the highest bit to be compatible with Default Partitioner.SyntaxMurmurHash(par1, ...)Argumentspar1, ... \u2014 A variable number of parameters that can be any of the supported data types.Returned valueCalculated hash value. UInt32.\nExamples: SELECT    kafkaMurmurHash('foobar') AS res1,    kafkaMurmurHash(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS res2\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["murmurHash3_32, murmurHash3_64"], "Feature": ["murmurHash3_32(par1, ...)murmurHash3_64(par1, ...)"], "Description": ["murmurHash3_32, murmurHash3_64", "Produces a MurmurHash3 hash value.", "murmurHash3_32(par1, ...)murmurHash3_64(par1, ...)", "Arguments", "Both functions take a variable number of input parameters. Arguments can be any of the supported data types. For some data types calculated value of hash function may be the same for the same values even if types of arguments differ (integers of different size, named and unnamed Tuple with the same data, Map and the corresponding Array(Tuple(key, value)) type with the same data).", "Returned Value", "The murmurHash3_32 function returns a UInt32 data type hash value.The murmurHash3_64 function returns a UInt64 data type hash value."], "Examples": ["SELECT murmurHash3_32(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS MurmurHash3, toTypeName(MurmurHash3) AS type;"], "Category": ["Hash Functions"], "index": 709, "vector_txt": "709:Feature: murmurHash3_32(par1, ...)murmurHash3_64(par1, ...)\nDescription: murmurHash3_32, murmurHash3_64Produces a MurmurHash3 hash value.murmurHash3_32(par1, ...)murmurHash3_64(par1, ...)ArgumentsBoth functions take a variable number of input parameters. Arguments can be any of the supported data types. For some data types calculated value of hash function may be the same for the same values even if types of arguments differ (integers of different size, named and unnamed Tuple with the same data, Map and the corresponding Array(Tuple(key, value)) type with the same data).Returned ValueThe murmurHash3_32 function returns a UInt32 data type hash value.The murmurHash3_64 function returns a UInt64 data type hash value.\nExamples: SELECT murmurHash3_32(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS MurmurHash3, toTypeName(MurmurHash3) AS type;\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["murmurHash3_128"], "Feature": ["murmurHash3_128(expr)"], "Description": ["murmurHash3_128", "Produces a 128-bit MurmurHash3 hash value.", "Syntax", "murmurHash3_128(expr)", "Arguments", "expr \u2014 A list of expressions. String.", "Returned value", "A 128-bit MurmurHash3 hash value. FixedString(16)."], "Examples": ["SELECT hex(murmurHash3_128('foo', 'foo', 'foo'));"], "Category": ["Hash Functions"], "index": 710, "vector_txt": "710:Feature: murmurHash3_128(expr)\nDescription: murmurHash3_128Produces a 128-bit MurmurHash3 hash value.SyntaxmurmurHash3_128(expr)Argumentsexpr \u2014 A list of expressions. String.Returned valueA 128-bit MurmurHash3 hash value. FixedString(16).\nExamples: SELECT hex(murmurHash3_128('foo', 'foo', 'foo'));\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["xxh3"], "Feature": ["xxh3(expr)"], "Description": ["xxh3", "Produces a 64-bit xxh3 hash value.", "Syntax", "xxh3(expr)", "Arguments", "expr \u2014 A list of expressions of any data type.", "Returned value", "A 64-bit xxh3 hash value. UInt64."], "Examples": ["SELECT xxh3('Hello', 'world')"], "Category": ["Hash Functions"], "index": 711, "vector_txt": "711:Feature: xxh3(expr)\nDescription: xxh3Produces a 64-bit xxh3 hash value.Syntaxxxh3(expr)Argumentsexpr \u2014 A list of expressions of any data type.Returned valueA 64-bit xxh3 hash value. UInt64.\nExamples: SELECT xxh3('Hello', 'world')\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["xxHash32, xxHash64"], "Feature": ["SELECT xxHash32('')ORSELECT xxHash64('')"], "Description": ["xxHash32, xxHash64", "Calculates xxHash from a string. It is proposed in two flavors, 32 and 64 bits.", "SELECT xxHash32('')ORSELECT xxHash64('')", "Returned value", "Hash value. UInt32/64.", "NoteThe return type will be UInt32 for xxHash32 and UInt64 for xxHash64."], "Examples": ["SELECT xxHash32('Hello, world!');"], "Category": ["Hash Functions"], "index": 712, "vector_txt": "712:Feature: SELECT xxHash32('')ORSELECT xxHash64('')\nDescription: xxHash32, xxHash64Calculates xxHash from a string. It is proposed in two flavors, 32 and 64 bits.SELECT xxHash32('')ORSELECT xxHash64('')Returned valueHash value. UInt32/64.NoteThe return type will be UInt32 for xxHash32 and UInt64 for xxHash64.\nExamples: SELECT xxHash32('Hello, world!');\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayElementOrNull(arr, n)"], "Feature": ["arrayElementOrNull(arr, n)"], "Description": ["arrayElementOrNull(arr, n)", "Get the element with the index nfrom the array arr. n must be any integer type.\nIndexes in an array begin from one.", "Negative indexes are supported. In this case, it selects the corresponding element numbered from the end. For example, arr[-1] is the last item in the array.", "If the index falls outside of the bounds of an array, it returns NULL instead of a default value."], "Examples": ["SELECT arrayElementOrNull([1, 2, 3], 2), arrayElementOrNull([1, 2, 3], 4)"], "Category": ["Arrays Functions"], "index": 713, "vector_txt": "713:Feature: arrayElementOrNull(arr, n)\nDescription: arrayElementOrNull(arr, n)Get the element with the index nfrom the array arr. n must be any integer type.\nIndexes in an array begin from one.Negative indexes are supported. In this case, it selects the corresponding element numbered from the end. For example, arr[-1] is the last item in the array.If the index falls outside of the bounds of an array, it returns NULL instead of a default value.\nExamples: SELECT arrayElementOrNull([1, 2, 3], 2), arrayElementOrNull([1, 2, 3], 4)\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["ngramSimHash"], "Feature": ["ngramSimHash(string[, ngramsize])"], "Description": ["ngramSimHash", "Splits a ASCII string into n-grams of ngramsize symbols and returns the n-gram simhash. Is case sensitive.", "Can be used for detection of semi-duplicate strings with bitHammingDistance. The smaller is the Hamming Distance of the calculated simhashes of two strings, the more likely these strings are the same.", "Syntax", "ngramSimHash(string[, ngramsize])", "Arguments", "string \u2014 String. String.ngramsize \u2014 The size of an n-gram. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.", "Returned value", "Hash value. UInt64."], "Examples": ["SELECT ngramSimHash('ClickHouse') AS Hash;"], "Category": ["Hash Functions"], "index": 714, "vector_txt": "714:Feature: ngramSimHash(string[, ngramsize])\nDescription: ngramSimHashSplits a ASCII string into n-grams of ngramsize symbols and returns the n-gram simhash. Is case sensitive.Can be used for detection of semi-duplicate strings with bitHammingDistance. The smaller is the Hamming Distance of the calculated simhashes of two strings, the more likely these strings are the same.SyntaxngramSimHash(string[, ngramsize])Argumentsstring \u2014 String. String.ngramsize \u2014 The size of an n-gram. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.Returned valueHash value. UInt64.\nExamples: SELECT ngramSimHash('ClickHouse') AS Hash;\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["ngramSimHashCaseInsensitive"], "Feature": ["ngramSimHashCaseInsensitive(string[, ngramsize])"], "Description": ["ngramSimHashCaseInsensitive", "Splits a ASCII string into n-grams of ngramsize symbols and returns the n-gram simhash. Is case insensitive.", "Can be used for detection of semi-duplicate strings with bitHammingDistance. The smaller is the Hamming Distance of the calculated simhashes of two strings, the more likely these strings are the same.", "Syntax", "ngramSimHashCaseInsensitive(string[, ngramsize])", "Arguments", "string \u2014 String. String.ngramsize \u2014 The size of an n-gram. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.", "Returned value", "Hash value. UInt64."], "Examples": ["SELECT ngramSimHashCaseInsensitive('ClickHouse') AS Hash;"], "Category": ["Hash Functions"], "index": 715, "vector_txt": "715:Feature: ngramSimHashCaseInsensitive(string[, ngramsize])\nDescription: ngramSimHashCaseInsensitiveSplits a ASCII string into n-grams of ngramsize symbols and returns the n-gram simhash. Is case insensitive.Can be used for detection of semi-duplicate strings with bitHammingDistance. The smaller is the Hamming Distance of the calculated simhashes of two strings, the more likely these strings are the same.SyntaxngramSimHashCaseInsensitive(string[, ngramsize])Argumentsstring \u2014 String. String.ngramsize \u2014 The size of an n-gram. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.Returned valueHash value. UInt64.\nExamples: SELECT ngramSimHashCaseInsensitive('ClickHouse') AS Hash;\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["ngramSimHashUTF8"], "Feature": ["ngramSimHashUTF8(string[, ngramsize])"], "Description": ["ngramSimHashUTF8", "Splits a UTF-8 string into n-grams of ngramsize symbols and returns the n-gram simhash. Is case sensitive.", "Can be used for detection of semi-duplicate strings with bitHammingDistance. The smaller is the Hamming Distance of the calculated simhashes of two strings, the more likely these strings are the same.", "Syntax", "ngramSimHashUTF8(string[, ngramsize])", "Arguments", "string \u2014 String. String.ngramsize \u2014 The size of an n-gram. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.", "Returned value", "Hash value. UInt64."], "Examples": ["SELECT ngramSimHashUTF8('ClickHouse') AS Hash;"], "Category": ["Hash Functions"], "index": 716, "vector_txt": "716:Feature: ngramSimHashUTF8(string[, ngramsize])\nDescription: ngramSimHashUTF8Splits a UTF-8 string into n-grams of ngramsize symbols and returns the n-gram simhash. Is case sensitive.Can be used for detection of semi-duplicate strings with bitHammingDistance. The smaller is the Hamming Distance of the calculated simhashes of two strings, the more likely these strings are the same.SyntaxngramSimHashUTF8(string[, ngramsize])Argumentsstring \u2014 String. String.ngramsize \u2014 The size of an n-gram. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.Returned valueHash value. UInt64.\nExamples: SELECT ngramSimHashUTF8('ClickHouse') AS Hash;\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["ngramSimHashCaseInsensitiveUTF8"], "Feature": ["ngramSimHashCaseInsensitiveUTF8(string[, ngramsize])"], "Description": ["ngramSimHashCaseInsensitiveUTF8", "Splits a UTF-8 string into n-grams of ngramsize symbols and returns the n-gram simhash. Is case insensitive.", "Can be used for detection of semi-duplicate strings with bitHammingDistance. The smaller is the Hamming Distance of the calculated simhashes of two strings, the more likely these strings are the same.", "Syntax", "ngramSimHashCaseInsensitiveUTF8(string[, ngramsize])", "Arguments", "string \u2014 String. String.ngramsize \u2014 The size of an n-gram. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.", "Returned value", "Hash value. UInt64."], "Examples": ["SELECT ngramSimHashCaseInsensitiveUTF8('ClickHouse') AS Hash;"], "Category": ["Hash Functions"], "index": 717, "vector_txt": "717:Feature: ngramSimHashCaseInsensitiveUTF8(string[, ngramsize])\nDescription: ngramSimHashCaseInsensitiveUTF8Splits a UTF-8 string into n-grams of ngramsize symbols and returns the n-gram simhash. Is case insensitive.Can be used for detection of semi-duplicate strings with bitHammingDistance. The smaller is the Hamming Distance of the calculated simhashes of two strings, the more likely these strings are the same.SyntaxngramSimHashCaseInsensitiveUTF8(string[, ngramsize])Argumentsstring \u2014 String. String.ngramsize \u2014 The size of an n-gram. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.Returned valueHash value. UInt64.\nExamples: SELECT ngramSimHashCaseInsensitiveUTF8('ClickHouse') AS Hash;\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["wordShingleSimHash"], "Feature": ["wordShingleSimHash(string[, shinglesize])"], "Description": ["wordShingleSimHash", "Splits a ASCII string into parts (shingles) of shinglesize words and returns the word shingle simhash. Is case sensitive.", "Can be used for detection of semi-duplicate strings with bitHammingDistance. The smaller is the Hamming Distance of the calculated simhashes of two strings, the more likely these strings are the same.", "Syntax", "wordShingleSimHash(string[, shinglesize])", "Arguments", "string \u2014 String. String.shinglesize \u2014 The size of a word shingle. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.", "Returned value", "Hash value. UInt64."], "Examples": ["SELECT wordShingleSimHash('ClickHouse\u00ae is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).') AS Hash;"], "Category": ["Hash Functions"], "index": 718, "vector_txt": "718:Feature: wordShingleSimHash(string[, shinglesize])\nDescription: wordShingleSimHashSplits a ASCII string into parts (shingles) of shinglesize words and returns the word shingle simhash. Is case sensitive.Can be used for detection of semi-duplicate strings with bitHammingDistance. The smaller is the Hamming Distance of the calculated simhashes of two strings, the more likely these strings are the same.SyntaxwordShingleSimHash(string[, shinglesize])Argumentsstring \u2014 String. String.shinglesize \u2014 The size of a word shingle. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.Returned valueHash value. UInt64.\nExamples: SELECT wordShingleSimHash('ClickHouse\u00ae is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).') AS Hash;\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["wordShingleSimHashCaseInsensitive"], "Feature": ["wordShingleSimHashCaseInsensitive(string[, shinglesize])"], "Description": ["wordShingleSimHashCaseInsensitive", "Splits a ASCII string into parts (shingles) of shinglesize words and returns the word shingle simhash. Is case insensitive.", "Can be used for detection of semi-duplicate strings with bitHammingDistance. The smaller is the Hamming Distance of the calculated simhashes of two strings, the more likely these strings are the same.", "Syntax", "wordShingleSimHashCaseInsensitive(string[, shinglesize])", "Arguments", "string \u2014 String. String.shinglesize \u2014 The size of a word shingle. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.", "Returned value", "Hash value. UInt64."], "Examples": ["SELECT wordShingleSimHashCaseInsensitive('ClickHouse\u00ae is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).') AS Hash;"], "Category": ["Hash Functions"], "index": 719, "vector_txt": "719:Feature: wordShingleSimHashCaseInsensitive(string[, shinglesize])\nDescription: wordShingleSimHashCaseInsensitiveSplits a ASCII string into parts (shingles) of shinglesize words and returns the word shingle simhash. Is case insensitive.Can be used for detection of semi-duplicate strings with bitHammingDistance. The smaller is the Hamming Distance of the calculated simhashes of two strings, the more likely these strings are the same.SyntaxwordShingleSimHashCaseInsensitive(string[, shinglesize])Argumentsstring \u2014 String. String.shinglesize \u2014 The size of a word shingle. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.Returned valueHash value. UInt64.\nExamples: SELECT wordShingleSimHashCaseInsensitive('ClickHouse\u00ae is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).') AS Hash;\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["wordShingleSimHashUTF8"], "Feature": ["wordShingleSimHashUTF8(string[, shinglesize])"], "Description": ["wordShingleSimHashUTF8", "Splits a UTF-8 string into parts (shingles) of shinglesize words and returns the word shingle simhash. Is case sensitive.", "Can be used for detection of semi-duplicate strings with bitHammingDistance. The smaller is the Hamming Distance of the calculated simhashes of two strings, the more likely these strings are the same.", "Syntax", "wordShingleSimHashUTF8(string[, shinglesize])", "Arguments", "string \u2014 String. String.shinglesize \u2014 The size of a word shingle. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.", "Returned value", "Hash value. UInt64."], "Examples": ["SELECT wordShingleSimHashUTF8('ClickHouse\u00ae is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).') AS Hash;"], "Category": ["Hash Functions"], "index": 720, "vector_txt": "720:Feature: wordShingleSimHashUTF8(string[, shinglesize])\nDescription: wordShingleSimHashUTF8Splits a UTF-8 string into parts (shingles) of shinglesize words and returns the word shingle simhash. Is case sensitive.Can be used for detection of semi-duplicate strings with bitHammingDistance. The smaller is the Hamming Distance of the calculated simhashes of two strings, the more likely these strings are the same.SyntaxwordShingleSimHashUTF8(string[, shinglesize])Argumentsstring \u2014 String. String.shinglesize \u2014 The size of a word shingle. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.Returned valueHash value. UInt64.\nExamples: SELECT wordShingleSimHashUTF8('ClickHouse\u00ae is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).') AS Hash;\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["wordShingleSimHashCaseInsensitiveUTF8"], "Feature": ["wordShingleSimHashCaseInsensitiveUTF8(string[, shinglesize])"], "Description": ["wordShingleSimHashCaseInsensitiveUTF8", "Splits a UTF-8 string into parts (shingles) of shinglesize words and returns the word shingle simhash. Is case insensitive.", "Can be used for detection of semi-duplicate strings with bitHammingDistance. The smaller is the Hamming Distance of the calculated simhashes of two strings, the more likely these strings are the same.", "Syntax", "wordShingleSimHashCaseInsensitiveUTF8(string[, shinglesize])", "Arguments", "string \u2014 String. String.shinglesize \u2014 The size of a word shingle. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.", "Returned value", "Hash value. UInt64."], "Examples": ["SELECT wordShingleSimHashCaseInsensitiveUTF8('ClickHouse\u00ae is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).') AS Hash;"], "Category": ["Hash Functions"], "index": 721, "vector_txt": "721:Feature: wordShingleSimHashCaseInsensitiveUTF8(string[, shinglesize])\nDescription: wordShingleSimHashCaseInsensitiveUTF8Splits a UTF-8 string into parts (shingles) of shinglesize words and returns the word shingle simhash. Is case insensitive.Can be used for detection of semi-duplicate strings with bitHammingDistance. The smaller is the Hamming Distance of the calculated simhashes of two strings, the more likely these strings are the same.SyntaxwordShingleSimHashCaseInsensitiveUTF8(string[, shinglesize])Argumentsstring \u2014 String. String.shinglesize \u2014 The size of a word shingle. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.Returned valueHash value. UInt64.\nExamples: SELECT wordShingleSimHashCaseInsensitiveUTF8('ClickHouse\u00ae is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).') AS Hash;\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["wyHash64"], "Feature": ["wyHash64(string)"], "Description": ["wyHash64", "Produces a 64-bit wyHash64 hash value.", "Syntax", "wyHash64(string)", "Arguments", "string \u2014 String. String.", "Returned value", "Hash value. UInt64."], "Examples": ["SELECT wyHash64('ClickHouse') AS Hash;"], "Category": ["Hash Functions"], "index": 722, "vector_txt": "722:Feature: wyHash64(string)\nDescription: wyHash64Produces a 64-bit wyHash64 hash value.SyntaxwyHash64(string)Argumentsstring \u2014 String. String.Returned valueHash value. UInt64.\nExamples: SELECT wyHash64('ClickHouse') AS Hash;\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["ngramMinHash"], "Feature": ["ngramMinHash(string[, ngramsize, hashnum])"], "Description": ["ngramMinHash", "Splits a ASCII string into n-grams of ngramsize symbols and calculates hash values for each n-gram. Uses hashnum minimum hashes to calculate the minimum hash and hashnum maximum hashes to calculate the maximum hash. Returns a tuple with these hashes. Is case sensitive.", "Can be used for detection of semi-duplicate strings with tupleHammingDistance. For two strings: if one of the returned hashes is the same for both strings, we think that those strings are the same.", "Syntax", "ngramMinHash(string[, ngramsize, hashnum])", "Arguments", "string \u2014 String. String.ngramsize \u2014 The size of an n-gram. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.hashnum \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from 1 to 25. Default value: 6. UInt8.", "Returned value", "Tuple with two hashes \u2014 the minimum and the maximum. Tuple(UInt64, UInt64)."], "Examples": ["SELECT ngramMinHash('ClickHouse') AS Tuple;"], "Category": ["Hash Functions"], "index": 723, "vector_txt": "723:Feature: ngramMinHash(string[, ngramsize, hashnum])\nDescription: ngramMinHashSplits a ASCII string into n-grams of ngramsize symbols and calculates hash values for each n-gram. Uses hashnum minimum hashes to calculate the minimum hash and hashnum maximum hashes to calculate the maximum hash. Returns a tuple with these hashes. Is case sensitive.Can be used for detection of semi-duplicate strings with tupleHammingDistance. For two strings: if one of the returned hashes is the same for both strings, we think that those strings are the same.SyntaxngramMinHash(string[, ngramsize, hashnum])Argumentsstring \u2014 String. String.ngramsize \u2014 The size of an n-gram. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.hashnum \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from 1 to 25. Default value: 6. UInt8.Returned valueTuple with two hashes \u2014 the minimum and the maximum. Tuple(UInt64, UInt64).\nExamples: SELECT ngramMinHash('ClickHouse') AS Tuple;\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["hasAll"], "Feature": ["hasAll(set, subset)"], "Description": ["hasAll", "Checks whether one array is a subset of another.", "hasAll(set, subset)", "Arguments", "set \u2013 Array of any type with a set of elements.subset \u2013 Array of any type that shares a common supertype with set containing elements that should be tested to be a subset of set.", "Return values", "1, if set contains all of the elements from subset.0, otherwise.", "Raises an exception NO_COMMON_TYPE if the set and subset elements do not share a common supertype.", "Peculiar properties", "An empty array is a subset of any array.Null processed as a value.Order of values in both of arrays does not matter."], "Examples": [], "Category": ["Arrays Functions"], "index": 724, "vector_txt": "724:Feature: hasAll(set, subset)\nDescription: hasAllChecks whether one array is a subset of another.hasAll(set, subset)Argumentsset \u2013 Array of any type with a set of elements.subset \u2013 Array of any type that shares a common supertype with set containing elements that should be tested to be a subset of set.Return values1, if set contains all of the elements from subset.0, otherwise.Raises an exception NO_COMMON_TYPE if the set and subset elements do not share a common supertype.Peculiar propertiesAn empty array is a subset of any array.Null processed as a value.Order of values in both of arrays does not matter.\nExamples: \nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["ngramMinHashCaseInsensitive"], "Feature": ["ngramMinHashCaseInsensitive(string[, ngramsize, hashnum])"], "Description": ["ngramMinHashCaseInsensitive", "Splits a ASCII string into n-grams of ngramsize symbols and calculates hash values for each n-gram. Uses hashnum minimum hashes to calculate the minimum hash and hashnum maximum hashes to calculate the maximum hash. Returns a tuple with these hashes. Is case insensitive.", "Can be used for detection of semi-duplicate strings with tupleHammingDistance. For two strings: if one of the returned hashes is the same for both strings, we think that those strings are the same.", "Syntax", "ngramMinHashCaseInsensitive(string[, ngramsize, hashnum])", "Arguments", "string \u2014 String. String.ngramsize \u2014 The size of an n-gram. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.hashnum \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from 1 to 25. Default value: 6. UInt8.", "Returned value", "Tuple with two hashes \u2014 the minimum and the maximum. Tuple(UInt64, UInt64)."], "Examples": ["SELECT ngramMinHashCaseInsensitive('ClickHouse') AS Tuple;"], "Category": ["Hash Functions"], "index": 725, "vector_txt": "725:Feature: ngramMinHashCaseInsensitive(string[, ngramsize, hashnum])\nDescription: ngramMinHashCaseInsensitiveSplits a ASCII string into n-grams of ngramsize symbols and calculates hash values for each n-gram. Uses hashnum minimum hashes to calculate the minimum hash and hashnum maximum hashes to calculate the maximum hash. Returns a tuple with these hashes. Is case insensitive.Can be used for detection of semi-duplicate strings with tupleHammingDistance. For two strings: if one of the returned hashes is the same for both strings, we think that those strings are the same.SyntaxngramMinHashCaseInsensitive(string[, ngramsize, hashnum])Argumentsstring \u2014 String. String.ngramsize \u2014 The size of an n-gram. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.hashnum \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from 1 to 25. Default value: 6. UInt8.Returned valueTuple with two hashes \u2014 the minimum and the maximum. Tuple(UInt64, UInt64).\nExamples: SELECT ngramMinHashCaseInsensitive('ClickHouse') AS Tuple;\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["ngramMinHashUTF8"], "Feature": ["ngramMinHashUTF8(string[, ngramsize, hashnum])"], "Description": ["ngramMinHashUTF8", "Splits a UTF-8 string into n-grams of ngramsize symbols and calculates hash values for each n-gram. Uses hashnum minimum hashes to calculate the minimum hash and hashnum maximum hashes to calculate the maximum hash. Returns a tuple with these hashes. Is case sensitive.", "Can be used for detection of semi-duplicate strings with tupleHammingDistance. For two strings: if one of the returned hashes is the same for both strings, we think that those strings are the same.", "Syntax", "ngramMinHashUTF8(string[, ngramsize, hashnum])", "Arguments", "string \u2014 String. String.ngramsize \u2014 The size of an n-gram. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.hashnum \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from 1 to 25. Default value: 6. UInt8.", "Returned value", "Tuple with two hashes \u2014 the minimum and the maximum. Tuple(UInt64, UInt64)."], "Examples": ["SELECT ngramMinHashUTF8('ClickHouse') AS Tuple;"], "Category": ["Hash Functions"], "index": 726, "vector_txt": "726:Feature: ngramMinHashUTF8(string[, ngramsize, hashnum])\nDescription: ngramMinHashUTF8Splits a UTF-8 string into n-grams of ngramsize symbols and calculates hash values for each n-gram. Uses hashnum minimum hashes to calculate the minimum hash and hashnum maximum hashes to calculate the maximum hash. Returns a tuple with these hashes. Is case sensitive.Can be used for detection of semi-duplicate strings with tupleHammingDistance. For two strings: if one of the returned hashes is the same for both strings, we think that those strings are the same.SyntaxngramMinHashUTF8(string[, ngramsize, hashnum])Argumentsstring \u2014 String. String.ngramsize \u2014 The size of an n-gram. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.hashnum \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from 1 to 25. Default value: 6. UInt8.Returned valueTuple with two hashes \u2014 the minimum and the maximum. Tuple(UInt64, UInt64).\nExamples: SELECT ngramMinHashUTF8('ClickHouse') AS Tuple;\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["ngramMinHashCaseInsensitiveUTF8"], "Feature": ["ngramMinHashCaseInsensitiveUTF8(string [, ngramsize, hashnum])"], "Description": ["ngramMinHashCaseInsensitiveUTF8", "Splits a UTF-8 string into n-grams of ngramsize symbols and calculates hash values for each n-gram. Uses hashnum minimum hashes to calculate the minimum hash and hashnum maximum hashes to calculate the maximum hash. Returns a tuple with these hashes. Is case insensitive.", "Can be used for detection of semi-duplicate strings with tupleHammingDistance. For two strings: if one of the returned hashes is the same for both strings, we think that those strings are the same.", "Syntax", "ngramMinHashCaseInsensitiveUTF8(string [, ngramsize, hashnum])", "Arguments", "string \u2014 String. String.ngramsize \u2014 The size of an n-gram. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.hashnum \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from 1 to 25. Default value: 6. UInt8.", "Returned value", "Tuple with two hashes \u2014 the minimum and the maximum. Tuple(UInt64, UInt64)."], "Examples": ["SELECT ngramMinHashCaseInsensitiveUTF8('ClickHouse') AS Tuple;"], "Category": ["Hash Functions"], "index": 727, "vector_txt": "727:Feature: ngramMinHashCaseInsensitiveUTF8(string [, ngramsize, hashnum])\nDescription: ngramMinHashCaseInsensitiveUTF8Splits a UTF-8 string into n-grams of ngramsize symbols and calculates hash values for each n-gram. Uses hashnum minimum hashes to calculate the minimum hash and hashnum maximum hashes to calculate the maximum hash. Returns a tuple with these hashes. Is case insensitive.Can be used for detection of semi-duplicate strings with tupleHammingDistance. For two strings: if one of the returned hashes is the same for both strings, we think that those strings are the same.SyntaxngramMinHashCaseInsensitiveUTF8(string [, ngramsize, hashnum])Argumentsstring \u2014 String. String.ngramsize \u2014 The size of an n-gram. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.hashnum \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from 1 to 25. Default value: 6. UInt8.Returned valueTuple with two hashes \u2014 the minimum and the maximum. Tuple(UInt64, UInt64).\nExamples: SELECT ngramMinHashCaseInsensitiveUTF8('ClickHouse') AS Tuple;\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["ngramMinHashArg"], "Feature": ["ngramMinHashArg(string[, ngramsize, hashnum])"], "Description": ["ngramMinHashArg", "Splits a ASCII string into n-grams of ngramsize symbols and returns the n-grams with minimum and maximum hashes, calculated by the ngramMinHash function with the same input. Is case sensitive.", "Syntax", "ngramMinHashArg(string[, ngramsize, hashnum])", "Arguments", "string \u2014 String. String.ngramsize \u2014 The size of an n-gram. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.hashnum \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from 1 to 25. Default value: 6. UInt8.", "Returned value", "Tuple with two tuples with hashnum n-grams each. Tuple(Tuple(String), Tuple(String))."], "Examples": ["SELECT ngramMinHashArg('ClickHouse') AS Tuple;"], "Category": ["Hash Functions"], "index": 728, "vector_txt": "728:Feature: ngramMinHashArg(string[, ngramsize, hashnum])\nDescription: ngramMinHashArgSplits a ASCII string into n-grams of ngramsize symbols and returns the n-grams with minimum and maximum hashes, calculated by the ngramMinHash function with the same input. Is case sensitive.SyntaxngramMinHashArg(string[, ngramsize, hashnum])Argumentsstring \u2014 String. String.ngramsize \u2014 The size of an n-gram. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.hashnum \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from 1 to 25. Default value: 6. UInt8.Returned valueTuple with two tuples with hashnum n-grams each. Tuple(Tuple(String), Tuple(String)).\nExamples: SELECT ngramMinHashArg('ClickHouse') AS Tuple;\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["ngramMinHashArgCaseInsensitive"], "Feature": ["ngramMinHashArgCaseInsensitive(string[, ngramsize, hashnum])"], "Description": ["ngramMinHashArgCaseInsensitive", "Splits a ASCII string into n-grams of ngramsize symbols and returns the n-grams with minimum and maximum hashes, calculated by the ngramMinHashCaseInsensitive function with the same input. Is case insensitive.", "Syntax", "ngramMinHashArgCaseInsensitive(string[, ngramsize, hashnum])", "Arguments", "string \u2014 String. String.ngramsize \u2014 The size of an n-gram. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.hashnum \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from 1 to 25. Default value: 6. UInt8.", "Returned value", "Tuple with two tuples with hashnum n-grams each. Tuple(Tuple(String), Tuple(String))."], "Examples": ["SELECT ngramMinHashArgCaseInsensitive('ClickHouse') AS Tuple;"], "Category": ["Hash Functions"], "index": 729, "vector_txt": "729:Feature: ngramMinHashArgCaseInsensitive(string[, ngramsize, hashnum])\nDescription: ngramMinHashArgCaseInsensitiveSplits a ASCII string into n-grams of ngramsize symbols and returns the n-grams with minimum and maximum hashes, calculated by the ngramMinHashCaseInsensitive function with the same input. Is case insensitive.SyntaxngramMinHashArgCaseInsensitive(string[, ngramsize, hashnum])Argumentsstring \u2014 String. String.ngramsize \u2014 The size of an n-gram. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.hashnum \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from 1 to 25. Default value: 6. UInt8.Returned valueTuple with two tuples with hashnum n-grams each. Tuple(Tuple(String), Tuple(String)).\nExamples: SELECT ngramMinHashArgCaseInsensitive('ClickHouse') AS Tuple;\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["ngramMinHashArgUTF8"], "Feature": ["ngramMinHashArgUTF8(string[, ngramsize, hashnum])"], "Description": ["ngramMinHashArgUTF8", "Splits a UTF-8 string into n-grams of ngramsize symbols and returns the n-grams with minimum and maximum hashes, calculated by the ngramMinHashUTF8 function with the same input. Is case sensitive.", "Syntax", "ngramMinHashArgUTF8(string[, ngramsize, hashnum])", "Arguments", "string \u2014 String. String.ngramsize \u2014 The size of an n-gram. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.hashnum \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from 1 to 25. Default value: 6. UInt8.", "Returned value", "Tuple with two tuples with hashnum n-grams each. Tuple(Tuple(String), Tuple(String))."], "Examples": ["SELECT ngramMinHashArgUTF8('ClickHouse') AS Tuple;"], "Category": ["Hash Functions"], "index": 730, "vector_txt": "730:Feature: ngramMinHashArgUTF8(string[, ngramsize, hashnum])\nDescription: ngramMinHashArgUTF8Splits a UTF-8 string into n-grams of ngramsize symbols and returns the n-grams with minimum and maximum hashes, calculated by the ngramMinHashUTF8 function with the same input. Is case sensitive.SyntaxngramMinHashArgUTF8(string[, ngramsize, hashnum])Argumentsstring \u2014 String. String.ngramsize \u2014 The size of an n-gram. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.hashnum \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from 1 to 25. Default value: 6. UInt8.Returned valueTuple with two tuples with hashnum n-grams each. Tuple(Tuple(String), Tuple(String)).\nExamples: SELECT ngramMinHashArgUTF8('ClickHouse') AS Tuple;\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["ngramMinHashArgCaseInsensitiveUTF8"], "Feature": ["ngramMinHashArgCaseInsensitiveUTF8(string[, ngramsize, hashnum])"], "Description": ["ngramMinHashArgCaseInsensitiveUTF8", "Splits a UTF-8 string into n-grams of ngramsize symbols and returns the n-grams with minimum and maximum hashes, calculated by the ngramMinHashCaseInsensitiveUTF8 function with the same input. Is case insensitive.", "Syntax", "ngramMinHashArgCaseInsensitiveUTF8(string[, ngramsize, hashnum])", "Arguments", "string \u2014 String. String.ngramsize \u2014 The size of an n-gram. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.hashnum \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from 1 to 25. Default value: 6. UInt8.", "Returned value", "Tuple with two tuples with hashnum n-grams each. Tuple(Tuple(String), Tuple(String))."], "Examples": ["SELECT ngramMinHashArgCaseInsensitiveUTF8('ClickHouse') AS Tuple;"], "Category": ["Hash Functions"], "index": 731, "vector_txt": "731:Feature: ngramMinHashArgCaseInsensitiveUTF8(string[, ngramsize, hashnum])\nDescription: ngramMinHashArgCaseInsensitiveUTF8Splits a UTF-8 string into n-grams of ngramsize symbols and returns the n-grams with minimum and maximum hashes, calculated by the ngramMinHashCaseInsensitiveUTF8 function with the same input. Is case insensitive.SyntaxngramMinHashArgCaseInsensitiveUTF8(string[, ngramsize, hashnum])Argumentsstring \u2014 String. String.ngramsize \u2014 The size of an n-gram. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.hashnum \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from 1 to 25. Default value: 6. UInt8.Returned valueTuple with two tuples with hashnum n-grams each. Tuple(Tuple(String), Tuple(String)).\nExamples: SELECT ngramMinHashArgCaseInsensitiveUTF8('ClickHouse') AS Tuple;\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["wordShingleMinHash"], "Feature": ["wordShingleMinHash(string[, shinglesize, hashnum])"], "Description": ["wordShingleMinHash", "Splits a ASCII string into parts (shingles) of shinglesize words and calculates hash values for each word shingle. Uses hashnum minimum hashes to calculate the minimum hash and hashnum maximum hashes to calculate the maximum hash. Returns a tuple with these hashes. Is case sensitive.", "Can be used for detection of semi-duplicate strings with tupleHammingDistance. For two strings: if one of the returned hashes is the same for both strings, we think that those strings are the same.", "Syntax", "wordShingleMinHash(string[, shinglesize, hashnum])", "Arguments", "string \u2014 String. String.shinglesize \u2014 The size of a word shingle. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.hashnum \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from 1 to 25. Default value: 6. UInt8.", "Returned value", "Tuple with two hashes \u2014 the minimum and the maximum. Tuple(UInt64, UInt64)."], "Examples": ["SELECT wordShingleMinHash('ClickHouse\u00ae is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).') AS Tuple;"], "Category": ["Hash Functions"], "index": 732, "vector_txt": "732:Feature: wordShingleMinHash(string[, shinglesize, hashnum])\nDescription: wordShingleMinHashSplits a ASCII string into parts (shingles) of shinglesize words and calculates hash values for each word shingle. Uses hashnum minimum hashes to calculate the minimum hash and hashnum maximum hashes to calculate the maximum hash. Returns a tuple with these hashes. Is case sensitive.Can be used for detection of semi-duplicate strings with tupleHammingDistance. For two strings: if one of the returned hashes is the same for both strings, we think that those strings are the same.SyntaxwordShingleMinHash(string[, shinglesize, hashnum])Argumentsstring \u2014 String. String.shinglesize \u2014 The size of a word shingle. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.hashnum \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from 1 to 25. Default value: 6. UInt8.Returned valueTuple with two hashes \u2014 the minimum and the maximum. Tuple(UInt64, UInt64).\nExamples: SELECT wordShingleMinHash('ClickHouse\u00ae is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).') AS Tuple;\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["wordShingleMinHashCaseInsensitive"], "Feature": ["wordShingleMinHashCaseInsensitive(string[, shinglesize, hashnum])"], "Description": ["wordShingleMinHashCaseInsensitive", "Splits a ASCII string into parts (shingles) of shinglesize words and calculates hash values for each word shingle. Uses hashnum minimum hashes to calculate the minimum hash and hashnum maximum hashes to calculate the maximum hash. Returns a tuple with these hashes. Is case insensitive.", "Can be used for detection of semi-duplicate strings with tupleHammingDistance. For two strings: if one of the returned hashes is the same for both strings, we think that those strings are the same.", "Syntax", "wordShingleMinHashCaseInsensitive(string[, shinglesize, hashnum])", "Arguments", "string \u2014 String. String.shinglesize \u2014 The size of a word shingle. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.hashnum \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from 1 to 25. Default value: 6. UInt8.", "Returned value", "Tuple with two hashes \u2014 the minimum and the maximum. Tuple(UInt64, UInt64)."], "Examples": ["SELECT wordShingleMinHashCaseInsensitive('ClickHouse\u00ae is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).') AS Tuple;"], "Category": ["Hash Functions"], "index": 733, "vector_txt": "733:Feature: wordShingleMinHashCaseInsensitive(string[, shinglesize, hashnum])\nDescription: wordShingleMinHashCaseInsensitiveSplits a ASCII string into parts (shingles) of shinglesize words and calculates hash values for each word shingle. Uses hashnum minimum hashes to calculate the minimum hash and hashnum maximum hashes to calculate the maximum hash. Returns a tuple with these hashes. Is case insensitive.Can be used for detection of semi-duplicate strings with tupleHammingDistance. For two strings: if one of the returned hashes is the same for both strings, we think that those strings are the same.SyntaxwordShingleMinHashCaseInsensitive(string[, shinglesize, hashnum])Argumentsstring \u2014 String. String.shinglesize \u2014 The size of a word shingle. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.hashnum \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from 1 to 25. Default value: 6. UInt8.Returned valueTuple with two hashes \u2014 the minimum and the maximum. Tuple(UInt64, UInt64).\nExamples: SELECT wordShingleMinHashCaseInsensitive('ClickHouse\u00ae is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).') AS Tuple;\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["wordShingleMinHashUTF8"], "Feature": ["wordShingleMinHashUTF8(string[, shinglesize, hashnum])"], "Description": ["wordShingleMinHashUTF8", "Splits a UTF-8 string into parts (shingles) of shinglesize words and calculates hash values for each word shingle. Uses hashnum minimum hashes to calculate the minimum hash and hashnum maximum hashes to calculate the maximum hash. Returns a tuple with these hashes. Is case sensitive.", "Can be used for detection of semi-duplicate strings with tupleHammingDistance. For two strings: if one of the returned hashes is the same for both strings, we think that those strings are the same.", "Syntax", "wordShingleMinHashUTF8(string[, shinglesize, hashnum])", "Arguments", "string \u2014 String. String.shinglesize \u2014 The size of a word shingle. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.hashnum \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from 1 to 25. Default value: 6. UInt8.", "Returned value", "Tuple with two hashes \u2014 the minimum and the maximum. Tuple(UInt64, UInt64)."], "Examples": ["SELECT wordShingleMinHashUTF8('ClickHouse\u00ae is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).') AS Tuple;"], "Category": ["Hash Functions"], "index": 734, "vector_txt": "734:Feature: wordShingleMinHashUTF8(string[, shinglesize, hashnum])\nDescription: wordShingleMinHashUTF8Splits a UTF-8 string into parts (shingles) of shinglesize words and calculates hash values for each word shingle. Uses hashnum minimum hashes to calculate the minimum hash and hashnum maximum hashes to calculate the maximum hash. Returns a tuple with these hashes. Is case sensitive.Can be used for detection of semi-duplicate strings with tupleHammingDistance. For two strings: if one of the returned hashes is the same for both strings, we think that those strings are the same.SyntaxwordShingleMinHashUTF8(string[, shinglesize, hashnum])Argumentsstring \u2014 String. String.shinglesize \u2014 The size of a word shingle. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.hashnum \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from 1 to 25. Default value: 6. UInt8.Returned valueTuple with two hashes \u2014 the minimum and the maximum. Tuple(UInt64, UInt64).\nExamples: SELECT wordShingleMinHashUTF8('ClickHouse\u00ae is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).') AS Tuple;\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["hasAny"], "Feature": ["hasAny(array1, array2)"], "Description": ["hasAny", "Checks whether two arrays have intersection by some elements.", "hasAny(array1, array2)", "Arguments", "array1 \u2013 Array of any type with a set of elements.array2 \u2013 Array of any type that shares a common supertype with array1.", "Return values", "1, if array1 and array2 have one similar element at least.0, otherwise.", "Raises an exception NO_COMMON_TYPE if the array1 and array2 elements do not share a common supertype.", "Peculiar properties", "Null processed as a value.Order of values in both of arrays does not matter."], "Examples": [], "Category": ["Arrays Functions"], "index": 735, "vector_txt": "735:Feature: hasAny(array1, array2)\nDescription: hasAnyChecks whether two arrays have intersection by some elements.hasAny(array1, array2)Argumentsarray1 \u2013 Array of any type with a set of elements.array2 \u2013 Array of any type that shares a common supertype with array1.Return values1, if array1 and array2 have one similar element at least.0, otherwise.Raises an exception NO_COMMON_TYPE if the array1 and array2 elements do not share a common supertype.Peculiar propertiesNull processed as a value.Order of values in both of arrays does not matter.\nExamples: \nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["wordShingleMinHashCaseInsensitiveUTF8"], "Feature": ["wordShingleMinHashCaseInsensitiveUTF8(string[, shinglesize, hashnum])"], "Description": ["wordShingleMinHashCaseInsensitiveUTF8", "Splits a UTF-8 string into parts (shingles) of shinglesize words and calculates hash values for each word shingle. Uses hashnum minimum hashes to calculate the minimum hash and hashnum maximum hashes to calculate the maximum hash. Returns a tuple with these hashes. Is case insensitive.", "Can be used for detection of semi-duplicate strings with tupleHammingDistance. For two strings: if one of the returned hashes is the same for both strings, we think that those strings are the same.", "Syntax", "wordShingleMinHashCaseInsensitiveUTF8(string[, shinglesize, hashnum])", "Arguments", "string \u2014 String. String.shinglesize \u2014 The size of a word shingle. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.hashnum \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from 1 to 25. Default value: 6. UInt8.", "Returned value", "Tuple with two hashes \u2014 the minimum and the maximum. Tuple(UInt64, UInt64)."], "Examples": ["SELECT wordShingleMinHashCaseInsensitiveUTF8('ClickHouse\u00ae is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).') AS Tuple;"], "Category": ["Hash Functions"], "index": 736, "vector_txt": "736:Feature: wordShingleMinHashCaseInsensitiveUTF8(string[, shinglesize, hashnum])\nDescription: wordShingleMinHashCaseInsensitiveUTF8Splits a UTF-8 string into parts (shingles) of shinglesize words and calculates hash values for each word shingle. Uses hashnum minimum hashes to calculate the minimum hash and hashnum maximum hashes to calculate the maximum hash. Returns a tuple with these hashes. Is case insensitive.Can be used for detection of semi-duplicate strings with tupleHammingDistance. For two strings: if one of the returned hashes is the same for both strings, we think that those strings are the same.SyntaxwordShingleMinHashCaseInsensitiveUTF8(string[, shinglesize, hashnum])Argumentsstring \u2014 String. String.shinglesize \u2014 The size of a word shingle. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.hashnum \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from 1 to 25. Default value: 6. UInt8.Returned valueTuple with two hashes \u2014 the minimum and the maximum. Tuple(UInt64, UInt64).\nExamples: SELECT wordShingleMinHashCaseInsensitiveUTF8('ClickHouse\u00ae is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).') AS Tuple;\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["wordShingleMinHashArg"], "Feature": ["wordShingleMinHashArg(string[, shinglesize, hashnum])"], "Description": ["wordShingleMinHashArg", "Splits a ASCII string into parts (shingles) of shinglesize words each and returns the shingles with minimum and maximum word hashes, calculated by the wordshingleMinHash function with the same input. Is case sensitive.", "Syntax", "wordShingleMinHashArg(string[, shinglesize, hashnum])", "Arguments", "string \u2014 String. String.shinglesize \u2014 The size of a word shingle. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.hashnum \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from 1 to 25. Default value: 6. UInt8.", "Returned value", "Tuple with two tuples with hashnum word shingles each. Tuple(Tuple(String), Tuple(String))."], "Examples": ["SELECT wordShingleMinHashArg('ClickHouse\u00ae is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).', 1, 3) AS Tuple;"], "Category": ["Hash Functions"], "index": 737, "vector_txt": "737:Feature: wordShingleMinHashArg(string[, shinglesize, hashnum])\nDescription: wordShingleMinHashArgSplits a ASCII string into parts (shingles) of shinglesize words each and returns the shingles with minimum and maximum word hashes, calculated by the wordshingleMinHash function with the same input. Is case sensitive.SyntaxwordShingleMinHashArg(string[, shinglesize, hashnum])Argumentsstring \u2014 String. String.shinglesize \u2014 The size of a word shingle. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.hashnum \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from 1 to 25. Default value: 6. UInt8.Returned valueTuple with two tuples with hashnum word shingles each. Tuple(Tuple(String), Tuple(String)).\nExamples: SELECT wordShingleMinHashArg('ClickHouse\u00ae is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).', 1, 3) AS Tuple;\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["wordShingleMinHashArgCaseInsensitive"], "Feature": ["wordShingleMinHashArgCaseInsensitive(string[, shinglesize, hashnum])"], "Description": ["wordShingleMinHashArgCaseInsensitive", "Splits a ASCII string into parts (shingles) of shinglesize words each and returns the shingles with minimum and maximum word hashes, calculated by the wordShingleMinHashCaseInsensitive function with the same input. Is case insensitive.", "Syntax", "wordShingleMinHashArgCaseInsensitive(string[, shinglesize, hashnum])", "Arguments", "string \u2014 String. String.shinglesize \u2014 The size of a word shingle. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.hashnum \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from 1 to 25. Default value: 6. UInt8.", "Returned value", "Tuple with two tuples with hashnum word shingles each. Tuple(Tuple(String), Tuple(String))."], "Examples": ["SELECT wordShingleMinHashArgCaseInsensitive('ClickHouse\u00ae is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).', 1, 3) AS Tuple;"], "Category": ["Hash Functions"], "index": 738, "vector_txt": "738:Feature: wordShingleMinHashArgCaseInsensitive(string[, shinglesize, hashnum])\nDescription: wordShingleMinHashArgCaseInsensitiveSplits a ASCII string into parts (shingles) of shinglesize words each and returns the shingles with minimum and maximum word hashes, calculated by the wordShingleMinHashCaseInsensitive function with the same input. Is case insensitive.SyntaxwordShingleMinHashArgCaseInsensitive(string[, shinglesize, hashnum])Argumentsstring \u2014 String. String.shinglesize \u2014 The size of a word shingle. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.hashnum \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from 1 to 25. Default value: 6. UInt8.Returned valueTuple with two tuples with hashnum word shingles each. Tuple(Tuple(String), Tuple(String)).\nExamples: SELECT wordShingleMinHashArgCaseInsensitive('ClickHouse\u00ae is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).', 1, 3) AS Tuple;\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["wordShingleMinHashArgUTF8"], "Feature": ["wordShingleMinHashArgUTF8(string[, shinglesize, hashnum])"], "Description": ["wordShingleMinHashArgUTF8", "Splits a UTF-8 string into parts (shingles) of shinglesize words each and returns the shingles with minimum and maximum word hashes, calculated by the wordShingleMinHashUTF8 function with the same input. Is case sensitive.", "Syntax", "wordShingleMinHashArgUTF8(string[, shinglesize, hashnum])", "Arguments", "string \u2014 String. String.shinglesize \u2014 The size of a word shingle. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.hashnum \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from 1 to 25. Default value: 6. UInt8.", "Returned value", "Tuple with two tuples with hashnum word shingles each. Tuple(Tuple(String), Tuple(String))."], "Examples": ["SELECT wordShingleMinHashArgUTF8('ClickHouse\u00ae is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).', 1, 3) AS Tuple;"], "Category": ["Hash Functions"], "index": 739, "vector_txt": "739:Feature: wordShingleMinHashArgUTF8(string[, shinglesize, hashnum])\nDescription: wordShingleMinHashArgUTF8Splits a UTF-8 string into parts (shingles) of shinglesize words each and returns the shingles with minimum and maximum word hashes, calculated by the wordShingleMinHashUTF8 function with the same input. Is case sensitive.SyntaxwordShingleMinHashArgUTF8(string[, shinglesize, hashnum])Argumentsstring \u2014 String. String.shinglesize \u2014 The size of a word shingle. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.hashnum \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from 1 to 25. Default value: 6. UInt8.Returned valueTuple with two tuples with hashnum word shingles each. Tuple(Tuple(String), Tuple(String)).\nExamples: SELECT wordShingleMinHashArgUTF8('ClickHouse\u00ae is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).', 1, 3) AS Tuple;\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["wordShingleMinHashArgCaseInsensitiveUTF8"], "Feature": ["wordShingleMinHashArgCaseInsensitiveUTF8(string[, shinglesize, hashnum])"], "Description": ["wordShingleMinHashArgCaseInsensitiveUTF8", "Splits a UTF-8 string into parts (shingles) of shinglesize words each and returns the shingles with minimum and maximum word hashes, calculated by the wordShingleMinHashCaseInsensitiveUTF8 function with the same input. Is case insensitive.", "Syntax", "wordShingleMinHashArgCaseInsensitiveUTF8(string[, shinglesize, hashnum])", "Arguments", "string \u2014 String. String.shinglesize \u2014 The size of a word shingle. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.hashnum \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from 1 to 25. Default value: 6. UInt8.", "Returned value", "Tuple with two tuples with hashnum word shingles each. Tuple(Tuple(String), Tuple(String))."], "Examples": ["SELECT wordShingleMinHashArgCaseInsensitiveUTF8('ClickHouse\u00ae is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).', 1, 3) AS Tuple;"], "Category": ["Hash Functions"], "index": 740, "vector_txt": "740:Feature: wordShingleMinHashArgCaseInsensitiveUTF8(string[, shinglesize, hashnum])\nDescription: wordShingleMinHashArgCaseInsensitiveUTF8Splits a UTF-8 string into parts (shingles) of shinglesize words each and returns the shingles with minimum and maximum word hashes, calculated by the wordShingleMinHashCaseInsensitiveUTF8 function with the same input. Is case insensitive.SyntaxwordShingleMinHashArgCaseInsensitiveUTF8(string[, shinglesize, hashnum])Argumentsstring \u2014 String. String.shinglesize \u2014 The size of a word shingle. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.hashnum \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from 1 to 25. Default value: 6. UInt8.Returned valueTuple with two tuples with hashnum word shingles each. Tuple(Tuple(String), Tuple(String)).\nExamples: SELECT wordShingleMinHashArgCaseInsensitiveUTF8('ClickHouse\u00ae is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).', 1, 3) AS Tuple;\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["sqidEncode"], "Feature": ["sqidEncode(number1, ...)"], "Description": ["sqidEncode", "Encodes numbers as a Sqid which is a YouTube-like ID string.\nThe output alphabet is abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.\nDo not use this function for hashing - the generated IDs can be decoded back into the original numbers.", "Syntax", "sqidEncode(number1, ...)", "Alias: sqid", "Arguments", "A variable number of UInt8, UInt16, UInt32 or UInt64 numbers.", "Returned Value", "A sqid String."], "Examples": ["SELECT sqidEncode(1, 2, 3, 4, 5);"], "Category": ["Hash Functions"], "index": 741, "vector_txt": "741:Feature: sqidEncode(number1, ...)\nDescription: sqidEncodeEncodes numbers as a Sqid which is a YouTube-like ID string.\nThe output alphabet is abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.\nDo not use this function for hashing - the generated IDs can be decoded back into the original numbers.SyntaxsqidEncode(number1, ...)Alias: sqidArgumentsA variable number of UInt8, UInt16, UInt32 or UInt64 numbers.Returned ValueA sqid String.\nExamples: SELECT sqidEncode(1, 2, 3, 4, 5);\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["sqidDecode"], "Feature": ["sqidDecode(sqid)"], "Description": ["sqidDecode", "Decodes a Sqid back into its original numbers.\nReturns an empty array in case the input string is not a valid sqid.", "Syntax", "sqidDecode(sqid)", "Arguments", "A sqid - String", "Returned Value", "The sqid transformed to numbers Array(UInt64)."], "Examples": ["SELECT sqidDecode('gXHfJ1C6dN');"], "Category": ["Hash Functions"], "index": 742, "vector_txt": "742:Feature: sqidDecode(sqid)\nDescription: sqidDecodeDecodes a Sqid back into its original numbers.\nReturns an empty array in case the input string is not a valid sqid.SyntaxsqidDecode(sqid)ArgumentsA sqid - StringReturned ValueThe sqid transformed to numbers Array(UInt64).\nExamples: SELECT sqidDecode('gXHfJ1C6dN');\nCategory: Hash Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/ip-address-functions"], "Title": ["IPv4NumToString(num)"], "Feature": ["IPv4NumToString(num)"], "Description": ["IPv4NumToString(num)", "Takes a UInt32 number. Interprets it as an IPv4 address in big endian. Returns a string containing the corresponding IPv4 address in the format A.B.C.d (dot-separated numbers in decimal form).", "Alias: INET_NTOA."], "Examples": [], "Category": ["IP Addresses Functions"], "index": 743, "vector_txt": "743:Feature: IPv4NumToString(num)\nDescription: IPv4NumToString(num)Takes a UInt32 number. Interprets it as an IPv4 address in big endian. Returns a string containing the corresponding IPv4 address in the format A.B.C.d (dot-separated numbers in decimal form).Alias: INET_NTOA.\nExamples: \nCategory: IP Addresses Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/ip-address-functions"], "Title": ["IPv4StringToNum(s)"], "Feature": ["IPv4StringToNum(s)"], "Description": ["IPv4StringToNum(s)", "The reverse function of IPv4NumToString. If the IPv4 address has an invalid format, it throws exception.", "Alias: INET_ATON."], "Examples": [], "Category": ["IP Addresses Functions"], "index": 744, "vector_txt": "744:Feature: IPv4StringToNum(s)\nDescription: IPv4StringToNum(s)The reverse function of IPv4NumToString. If the IPv4 address has an invalid format, it throws exception.Alias: INET_ATON.\nExamples: \nCategory: IP Addresses Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/ip-address-functions"], "Title": ["IPv4StringToNumOrDefault(s)"], "Feature": ["IPv4StringToNumOrDefault(s)"], "Description": ["IPv4StringToNumOrDefault(s)", "Same as IPv4StringToNum, but if the IPv4 address has an invalid format, it returns 0."], "Examples": [], "Category": ["IP Addresses Functions"], "index": 745, "vector_txt": "745:Feature: IPv4StringToNumOrDefault(s)\nDescription: IPv4StringToNumOrDefault(s)Same as IPv4StringToNum, but if the IPv4 address has an invalid format, it returns 0.\nExamples: \nCategory: IP Addresses Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["hasSubstr"], "Feature": ["hasSubstr(array1, array2)"], "Description": ["hasSubstr", "Checks whether all the elements of array2 appear in array1 in the same exact order. Therefore, the function will return 1, if and only if array1 = prefix + array2 + suffix.", "hasSubstr(array1, array2)", "In other words, the functions will check whether all the elements of array2 are contained in array1 like\nthe hasAll function. In addition, it will check that the elements are observed in the same order in both array1 and array2.", "For Example:", "hasSubstr([1,2,3,4], [2,3]) returns 1. However, hasSubstr([1,2,3,4], [3,2]) will return 0.hasSubstr([1,2,3,4], [1,2,3]) returns 1. However, hasSubstr([1,2,3,4], [1,2,4]) will return 0.", "Arguments", "array1 \u2013 Array of any type with a set of elements.array2 \u2013 Array of any type with a set of elements.", "Return values", "1, if array1 contains array2.0, otherwise.", "Raises an exception NO_COMMON_TYPE if the array1 and array2 elements do not share a common supertype.", "Peculiar properties", "The function will return 1 if array2 is empty.Null processed as a value. In other words hasSubstr([1, 2, NULL, 3, 4], [2,3]) will return 0. However, hasSubstr([1, 2, NULL, 3, 4], [2,NULL,3]) will return 1Order of values in both of arrays does matter."], "Examples": [], "Category": ["Arrays Functions"], "index": 746, "vector_txt": "746:Feature: hasSubstr(array1, array2)\nDescription: hasSubstrChecks whether all the elements of array2 appear in array1 in the same exact order. Therefore, the function will return 1, if and only if array1 = prefix + array2 + suffix.hasSubstr(array1, array2)In other words, the functions will check whether all the elements of array2 are contained in array1 like\nthe hasAll function. In addition, it will check that the elements are observed in the same order in both array1 and array2.For Example:hasSubstr([1,2,3,4], [2,3]) returns 1. However, hasSubstr([1,2,3,4], [3,2]) will return 0.hasSubstr([1,2,3,4], [1,2,3]) returns 1. However, hasSubstr([1,2,3,4], [1,2,4]) will return 0.Argumentsarray1 \u2013 Array of any type with a set of elements.array2 \u2013 Array of any type with a set of elements.Return values1, if array1 contains array2.0, otherwise.Raises an exception NO_COMMON_TYPE if the array1 and array2 elements do not share a common supertype.Peculiar propertiesThe function will return 1 if array2 is empty.Null processed as a value. In other words hasSubstr([1, 2, NULL, 3, 4], [2,3]) will return 0. However, hasSubstr([1, 2, NULL, 3, 4], [2,NULL,3]) will return 1Order of values in both of arrays does matter.\nExamples: \nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/ip-address-functions"], "Title": ["IPv4StringToNumOrNull(s)"], "Feature": ["IPv4StringToNumOrNull(s)"], "Description": ["IPv4StringToNumOrNull(s)", "Same as IPv4StringToNum, but if the IPv4 address has an invalid format, it returns null."], "Examples": [], "Category": ["IP Addresses Functions"], "index": 747, "vector_txt": "747:Feature: IPv4StringToNumOrNull(s)\nDescription: IPv4StringToNumOrNull(s)Same as IPv4StringToNum, but if the IPv4 address has an invalid format, it returns null.\nExamples: \nCategory: IP Addresses Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/ip-address-functions"], "Title": ["IPv4NumToStringClassC(num)"], "Feature": ["IPv4NumToStringClassC(num)"], "Description": ["IPv4NumToStringClassC(num)", "Similar to IPv4NumToString, but using xxx instead of the last octet."], "Examples": ["SELECT    IPv4NumToStringClassC(ClientIP) AS k,    count() AS cFROM test.hitsGROUP BY kORDER BY c DESCLIMIT 10", "SELECT IPv6NumToString(toFixedString(unhex('2A0206B8000000000000000000000011'), 16)) AS addr;", "SELECT    IPv6NumToString(ClientIP6 AS k),    count() AS cFROM hits_allWHERE EventDate = today() AND substring(ClientIP6, 1, 12) != unhex('00000000000000000000FFFF')GROUP BY kORDER BY c DESCLIMIT 10", "SELECT    IPv6NumToString(ClientIP6 AS k),    count() AS cFROM hits_allWHERE EventDate = today()GROUP BY kORDER BY c DESCLIMIT 10"], "Category": ["IP Addresses Functions"], "index": 748, "vector_txt": "748:Feature: IPv4NumToStringClassC(num)\nDescription: IPv4NumToStringClassC(num)Similar to IPv4NumToString, but using xxx instead of the last octet.\nExamples: SELECT    IPv4NumToStringClassC(ClientIP) AS k,    count() AS cFROM test.hitsGROUP BY kORDER BY c DESCLIMIT 10SELECT IPv6NumToString(toFixedString(unhex('2A0206B8000000000000000000000011'), 16)) AS addr;SELECT    IPv6NumToString(ClientIP6 AS k),    count() AS cFROM hits_allWHERE EventDate = today() AND substring(ClientIP6, 1, 12) != unhex('00000000000000000000FFFF')GROUP BY kORDER BY c DESCLIMIT 10SELECT    IPv6NumToString(ClientIP6 AS k),    count() AS cFROM hits_allWHERE EventDate = today()GROUP BY kORDER BY c DESCLIMIT 10\nCategory: IP Addresses Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/ip-address-functions"], "Title": ["IPv6StringToNum"], "Feature": ["IPv6StringToNum(string)"], "Description": ["IPv6StringToNum", "The reverse function of IPv6NumToString. If the IPv6 address has an invalid format, it throws exception.", "If the input string contains a valid IPv4 address, returns its IPv6 equivalent.\nHEX can be uppercase or lowercase.", "Alias: INET6_ATON.", "Syntax", "IPv6StringToNum(string)", "Argument", "string \u2014 IP address. String.", "Returned value", "IPv6 address in binary format. FixedString(16)."], "Examples": ["SELECT addr, cutIPv6(IPv6StringToNum(addr), 0, 0) FROM (SELECT ['notaddress', '127.0.0.1', '1111::ffff'] AS addr) ARRAY JOIN addr;"], "Category": ["IP Addresses Functions"], "index": 749, "vector_txt": "749:Feature: IPv6StringToNum(string)\nDescription: IPv6StringToNumThe reverse function of IPv6NumToString. If the IPv6 address has an invalid format, it throws exception.If the input string contains a valid IPv4 address, returns its IPv6 equivalent.\nHEX can be uppercase or lowercase.Alias: INET6_ATON.SyntaxIPv6StringToNum(string)Argumentstring \u2014 IP address. String.Returned valueIPv6 address in binary format. FixedString(16).\nExamples: SELECT addr, cutIPv6(IPv6StringToNum(addr), 0, 0) FROM (SELECT ['notaddress', '127.0.0.1', '1111::ffff'] AS addr) ARRAY JOIN addr;\nCategory: IP Addresses Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/ip-address-functions"], "Title": ["IPv6StringToNumOrDefault(s)"], "Feature": ["IPv6StringToNumOrDefault(s)"], "Description": ["IPv6StringToNumOrDefault(s)", "Same as IPv6StringToNum, but if the IPv6 address has an invalid format, it returns 0."], "Examples": [], "Category": ["IP Addresses Functions"], "index": 750, "vector_txt": "750:Feature: IPv6StringToNumOrDefault(s)\nDescription: IPv6StringToNumOrDefault(s)Same as IPv6StringToNum, but if the IPv6 address has an invalid format, it returns 0.\nExamples: \nCategory: IP Addresses Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/ip-address-functions"], "Title": ["IPv6StringToNumOrNull(s)"], "Feature": ["IPv6StringToNumOrNull(s)"], "Description": ["IPv6StringToNumOrNull(s)", "Same as IPv6StringToNum, but if the IPv6 address has an invalid format, it returns null."], "Examples": [], "Category": ["IP Addresses Functions"], "index": 751, "vector_txt": "751:Feature: IPv6StringToNumOrNull(s)\nDescription: IPv6StringToNumOrNull(s)Same as IPv6StringToNum, but if the IPv6 address has an invalid format, it returns null.\nExamples: \nCategory: IP Addresses Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/ip-address-functions"], "Title": ["IPv4ToIPv6(x)"], "Feature": ["IPv4ToIPv6(x)"], "Description": ["IPv4ToIPv6(x)", "Takes a UInt32 number. Interprets it as an IPv4 address in big endian. Returns a FixedString(16) value containing the IPv6 address in binary format. Examples:", "SELECT IPv6NumToString(IPv4ToIPv6(IPv4StringToNum('192.168.0.1'))) AS addr;", "\u250c\u2500addr\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 ::ffff:192.168.0.1 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Examples": ["SELECT IPv6NumToString(IPv4ToIPv6(IPv4StringToNum('192.168.0.1'))) AS addr;"], "Category": ["IP Addresses Functions"], "index": 752, "vector_txt": "752:Feature: IPv4ToIPv6(x)\nDescription: IPv4ToIPv6(x)Takes a UInt32 number. Interprets it as an IPv4 address in big endian. Returns a FixedString(16) value containing the IPv6 address in binary format. Examples:SELECT IPv6NumToString(IPv4ToIPv6(IPv4StringToNum('192.168.0.1'))) AS addr;\u250c\u2500addr\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 ::ffff:192.168.0.1 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nExamples: SELECT IPv6NumToString(IPv4ToIPv6(IPv4StringToNum('192.168.0.1'))) AS addr;\nCategory: IP Addresses Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/ip-address-functions"], "Title": ["cutIPv6(x, bytesToCutForIPv6, bytesToCutForIPv4)"], "Feature": ["cutIPv6(x, bytesToCutForIPv6, bytesToCutForIPv4)"], "Description": ["cutIPv6(x, bytesToCutForIPv6, bytesToCutForIPv4)", "Accepts a FixedString(16) value containing the IPv6 address in binary format. Returns a string containing the address of the specified number of bytes removed in text format. For example:", "WITH    IPv6StringToNum('2001:0DB8:AC10:FE01:FEED:BABE:CAFE:F00D') AS ipv6,    IPv4ToIPv6(IPv4StringToNum('192.168.0.1')) AS ipv4SELECT    cutIPv6(ipv6, 2, 0),    cutIPv6(ipv4, 0, 2)", "\u250c\u2500cutIPv6(ipv6, 2, 0)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500cutIPv6(ipv4, 0, 2)\u2500\u2510\u2502 2001:db8:ac10:fe01:feed:babe:cafe:0 \u2502 ::ffff:192.168.0.0  \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Examples": ["WITH    IPv6StringToNum('2001:0DB8:AC10:FE01:FEED:BABE:CAFE:F00D') AS ipv6,    IPv4ToIPv6(IPv4StringToNum('192.168.0.1')) AS ipv4SELECT    cutIPv6(ipv6, 2, 0),    cutIPv6(ipv4, 0, 2)"], "Category": ["IP Addresses Functions"], "index": 753, "vector_txt": "753:Feature: cutIPv6(x, bytesToCutForIPv6, bytesToCutForIPv4)\nDescription: cutIPv6(x, bytesToCutForIPv6, bytesToCutForIPv4)Accepts a FixedString(16) value containing the IPv6 address in binary format. Returns a string containing the address of the specified number of bytes removed in text format. For example:WITH    IPv6StringToNum('2001:0DB8:AC10:FE01:FEED:BABE:CAFE:F00D') AS ipv6,    IPv4ToIPv6(IPv4StringToNum('192.168.0.1')) AS ipv4SELECT    cutIPv6(ipv6, 2, 0),    cutIPv6(ipv4, 0, 2)\u250c\u2500cutIPv6(ipv6, 2, 0)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500cutIPv6(ipv4, 0, 2)\u2500\u2510\u2502 2001:db8:ac10:fe01:feed:babe:cafe:0 \u2502 ::ffff:192.168.0.0  \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nExamples: WITH    IPv6StringToNum('2001:0DB8:AC10:FE01:FEED:BABE:CAFE:F00D') AS ipv6,    IPv4ToIPv6(IPv4StringToNum('192.168.0.1')) AS ipv4SELECT    cutIPv6(ipv6, 2, 0),    cutIPv6(ipv4, 0, 2)\nCategory: IP Addresses Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/ip-address-functions"], "Title": ["IPv4CIDRToRange(ipv4, Cidr),"], "Feature": ["IPv4CIDRToRange(ipv4, Cidr),"], "Description": ["IPv4CIDRToRange(ipv4, Cidr),", "Accepts an IPv4 and an UInt8 value containing the CIDR. Return a tuple with two IPv4 containing the lower range and the higher range of the subnet.", "SELECT IPv4CIDRToRange(toIPv4('192.168.5.2'), 16);", "\u250c\u2500IPv4CIDRToRange(toIPv4('192.168.5.2'), 16)\u2500\u2510\u2502 ('192.168.0.0','192.168.255.255')          \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Examples": ["SELECT IPv4CIDRToRange(toIPv4('192.168.5.2'), 16);"], "Category": ["IP Addresses Functions"], "index": 754, "vector_txt": "754:Feature: IPv4CIDRToRange(ipv4, Cidr),\nDescription: IPv4CIDRToRange(ipv4, Cidr),Accepts an IPv4 and an UInt8 value containing the CIDR. Return a tuple with two IPv4 containing the lower range and the higher range of the subnet.SELECT IPv4CIDRToRange(toIPv4('192.168.5.2'), 16);\u250c\u2500IPv4CIDRToRange(toIPv4('192.168.5.2'), 16)\u2500\u2510\u2502 ('192.168.0.0','192.168.255.255')          \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nExamples: SELECT IPv4CIDRToRange(toIPv4('192.168.5.2'), 16);\nCategory: IP Addresses Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/ip-address-functions"], "Title": ["IPv6CIDRToRange(ipv6, Cidr),"], "Feature": ["IPv6CIDRToRange(ipv6, Cidr),"], "Description": ["IPv6CIDRToRange(ipv6, Cidr),", "Accepts an IPv6 and an UInt8 value containing the CIDR. Return a tuple with two IPv6 containing the lower range and the higher range of the subnet.", "SELECT IPv6CIDRToRange(toIPv6('2001:0db8:0000:85a3:0000:0000:ac1f:8001'), 32);", "\u250c\u2500IPv6CIDRToRange(toIPv6('2001:0db8:0000:85a3:0000:0000:ac1f:8001'), 32)\u2500\u2510\u2502 ('2001:db8::','2001:db8:ffff:ffff:ffff:ffff:ffff:ffff')                \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Examples": ["SELECT IPv6CIDRToRange(toIPv6('2001:0db8:0000:85a3:0000:0000:ac1f:8001'), 32);"], "Category": ["IP Addresses Functions"], "index": 755, "vector_txt": "755:Feature: IPv6CIDRToRange(ipv6, Cidr),\nDescription: IPv6CIDRToRange(ipv6, Cidr),Accepts an IPv6 and an UInt8 value containing the CIDR. Return a tuple with two IPv6 containing the lower range and the higher range of the subnet.SELECT IPv6CIDRToRange(toIPv6('2001:0db8:0000:85a3:0000:0000:ac1f:8001'), 32);\u250c\u2500IPv6CIDRToRange(toIPv6('2001:0db8:0000:85a3:0000:0000:ac1f:8001'), 32)\u2500\u2510\u2502 ('2001:db8::','2001:db8:ffff:ffff:ffff:ffff:ffff:ffff')                \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nExamples: SELECT IPv6CIDRToRange(toIPv6('2001:0db8:0000:85a3:0000:0000:ac1f:8001'), 32);\nCategory: IP Addresses Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/ip-address-functions"], "Title": ["toIPv4(string)"], "Feature": ["toIPv4(string)"], "Description": ["toIPv4(string)", "An alias to IPv4StringToNum() that takes a string form of IPv4 address and returns value of IPv4 type, which is binary equal to value returned by IPv4StringToNum().", "WITH    '171.225.130.45' as IPv4_stringSELECT    toTypeName(IPv4StringToNum(IPv4_string)),    toTypeName(toIPv4(IPv4_string))", "\u250c\u2500toTypeName(IPv4StringToNum(IPv4_string))\u2500\u252c\u2500toTypeName(toIPv4(IPv4_string))\u2500\u2510\u2502 UInt32                                   \u2502 IPv4                            \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "WITH    '171.225.130.45' as IPv4_stringSELECT    hex(IPv4StringToNum(IPv4_string)),    hex(toIPv4(IPv4_string))", "\u250c\u2500hex(IPv4StringToNum(IPv4_string))\u2500\u252c\u2500hex(toIPv4(IPv4_string))\u2500\u2510\u2502 ABE1822D                          \u2502 ABE1822D                 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Examples": ["WITH    '171.225.130.45' as IPv4_stringSELECT    toTypeName(IPv4StringToNum(IPv4_string)),    toTypeName(toIPv4(IPv4_string))", "WITH    '171.225.130.45' as IPv4_stringSELECT    hex(IPv4StringToNum(IPv4_string)),    hex(toIPv4(IPv4_string))"], "Category": ["IP Addresses Functions"], "index": 756, "vector_txt": "756:Feature: toIPv4(string)\nDescription: toIPv4(string)An alias to IPv4StringToNum() that takes a string form of IPv4 address and returns value of IPv4 type, which is binary equal to value returned by IPv4StringToNum().WITH    '171.225.130.45' as IPv4_stringSELECT    toTypeName(IPv4StringToNum(IPv4_string)),    toTypeName(toIPv4(IPv4_string))\u250c\u2500toTypeName(IPv4StringToNum(IPv4_string))\u2500\u252c\u2500toTypeName(toIPv4(IPv4_string))\u2500\u2510\u2502 UInt32                                   \u2502 IPv4                            \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518WITH    '171.225.130.45' as IPv4_stringSELECT    hex(IPv4StringToNum(IPv4_string)),    hex(toIPv4(IPv4_string))\u250c\u2500hex(IPv4StringToNum(IPv4_string))\u2500\u252c\u2500hex(toIPv4(IPv4_string))\u2500\u2510\u2502 ABE1822D                          \u2502 ABE1822D                 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nExamples: WITH    '171.225.130.45' as IPv4_stringSELECT    toTypeName(IPv4StringToNum(IPv4_string)),    toTypeName(toIPv4(IPv4_string))WITH    '171.225.130.45' as IPv4_stringSELECT    hex(IPv4StringToNum(IPv4_string)),    hex(toIPv4(IPv4_string))\nCategory: IP Addresses Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["indexOf(arr, x)"], "Feature": ["indexOf(arr, x)"], "Description": ["indexOf(arr, x)", "Returns the index of the first \u2018x\u2019 element (starting from 1) if it is in the array, or 0 if it is not."], "Examples": ["SELECT indexOf([1, 3, NULL, NULL], NULL)"], "Category": ["Arrays Functions"], "index": 757, "vector_txt": "757:Feature: indexOf(arr, x)\nDescription: indexOf(arr, x)Returns the index of the first \u2018x\u2019 element (starting from 1) if it is in the array, or 0 if it is not.\nExamples: SELECT indexOf([1, 3, NULL, NULL], NULL)\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/arithmetic-functions"], "Title": ["intDiv"], "Feature": ["intDiv(a, b)"], "Description": ["intDiv", "Performs an integer division of two values a by b, i.e. computes the quotient rounded down to the next smallest integer.", "The result has the same width as the dividend (the first parameter).", "An exception is thrown when dividing by zero, when the quotient does not fit in the range of the dividend, or when dividing a minimal negative number by minus one.", "Syntax", "intDiv(a, b)"], "Examples": ["SELECT    intDiv(toFloat64(1), 0.001) AS res,    toTypeName(res)", "SELECT    intDiv(1, 0.001) AS res,    toTypeName(res)"], "Category": ["Arithmetic Functions"], "index": 758, "vector_txt": "758:Feature: intDiv(a, b)\nDescription: intDivPerforms an integer division of two values a by b, i.e. computes the quotient rounded down to the next smallest integer.The result has the same width as the dividend (the first parameter).An exception is thrown when dividing by zero, when the quotient does not fit in the range of the dividend, or when dividing a minimal negative number by minus one.SyntaxintDiv(a, b)\nExamples: SELECT    intDiv(toFloat64(1), 0.001) AS res,    toTypeName(res)SELECT    intDiv(1, 0.001) AS res,    toTypeName(res)\nCategory: Arithmetic Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/ip-address-functions"], "Title": ["toIPv4OrDefault(string)"], "Feature": ["toIPv4OrDefault(value)"], "Description": ["toIPv4OrDefault(string)", "Same as toIPv4, but if the IPv4 address has an invalid format, it returns 0.0.0.0 (0 IPv4).", "Syntax", "toIPv4OrDefault(value)", "Arguments", "value \u2014 A string-encoded IPv4 address. String", "Returned value", "value converted to an IPv4 address. IPv4."], "Examples": ["SELECT  toIPv4OrDefault('192.168.0.1') AS s1,  toIPv4OrDefault('192.168.0') AS s2"], "Category": ["IP Addresses Functions"], "index": 759, "vector_txt": "759:Feature: toIPv4OrDefault(value)\nDescription: toIPv4OrDefault(string)Same as toIPv4, but if the IPv4 address has an invalid format, it returns 0.0.0.0 (0 IPv4).SyntaxtoIPv4OrDefault(value)Argumentsvalue \u2014 A string-encoded IPv4 address. StringReturned valuevalue converted to an IPv4 address. IPv4.\nExamples: SELECT  toIPv4OrDefault('192.168.0.1') AS s1,  toIPv4OrDefault('192.168.0') AS s2\nCategory: IP Addresses Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/ip-address-functions"], "Title": ["toIPv4OrNull(string)"], "Feature": ["toIPv4OrNull(value)"], "Description": ["toIPv4OrNull(string)", "Same as toIPv4, but if the IPv4 address has an invalid format, it returns null.", "Syntax", "toIPv4OrNull(value)", "Arguments", "value \u2014 A string-encoded IPv4 address. String", "Returned value", "value converted to an IPv4 address. IPv4."], "Examples": ["SELECT  toIPv4OrNull('192.168.0.1') AS s1,  toIPv4OrNull('192.168.0') AS s2"], "Category": ["IP Addresses Functions"], "index": 760, "vector_txt": "760:Feature: toIPv4OrNull(value)\nDescription: toIPv4OrNull(string)Same as toIPv4, but if the IPv4 address has an invalid format, it returns null.SyntaxtoIPv4OrNull(value)Argumentsvalue \u2014 A string-encoded IPv4 address. StringReturned valuevalue converted to an IPv4 address. IPv4.\nExamples: SELECT  toIPv4OrNull('192.168.0.1') AS s1,  toIPv4OrNull('192.168.0') AS s2\nCategory: IP Addresses Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/ip-address-functions"], "Title": ["toIPv6OrDefault(string)"], "Feature": ["toIPv6OrDefault(string)"], "Description": ["toIPv6OrDefault(string)", "Same as toIPv6, but if the IPv6 address has an invalid format, it returns :: (0 IPv6)."], "Examples": [], "Category": ["IP Addresses Functions"], "index": 761, "vector_txt": "761:Feature: toIPv6OrDefault(string)\nDescription: toIPv6OrDefault(string)Same as toIPv6, but if the IPv6 address has an invalid format, it returns :: (0 IPv6).\nExamples: \nCategory: IP Addresses Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/ip-address-functions"], "Title": ["toIPv6OrNull(string)"], "Feature": ["toIPv6OrNull(string)"], "Description": ["toIPv6OrNull(string)", "Same as toIPv6, but if the IPv6 address has an invalid format, it returns null."], "Examples": [], "Category": ["IP Addresses Functions"], "index": 762, "vector_txt": "762:Feature: toIPv6OrNull(string)\nDescription: toIPv6OrNull(string)Same as toIPv6, but if the IPv6 address has an invalid format, it returns null.\nExamples: \nCategory: IP Addresses Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/ip-address-functions"], "Title": ["toIPv6"], "Feature": ["toIPv6(string)"], "Description": ["toIPv6", "Converts a string form of IPv6 address to IPv6 type. If the IPv6 address has an invalid format, returns an empty value.\nSimilar to IPv6StringToNum function, which converts IPv6 address to binary format.", "If the input string contains a valid IPv4 address, then the IPv6 equivalent of the IPv4 address is returned.", "Syntax", "toIPv6(string)", "Argument", "string \u2014 IP address. String", "Returned value", "IP address. IPv6."], "Examples": ["WITH '2001:438:ffff::407d:1bc1' AS IPv6_stringSELECT    hex(IPv6StringToNum(IPv6_string)),    hex(toIPv6(IPv6_string));", "SELECT toIPv6('127.0.0.1');"], "Category": ["IP Addresses Functions"], "index": 763, "vector_txt": "763:Feature: toIPv6(string)\nDescription: toIPv6Converts a string form of IPv6 address to IPv6 type. If the IPv6 address has an invalid format, returns an empty value.\nSimilar to IPv6StringToNum function, which converts IPv6 address to binary format.If the input string contains a valid IPv4 address, then the IPv6 equivalent of the IPv4 address is returned.SyntaxtoIPv6(string)Argumentstring \u2014 IP address. StringReturned valueIP address. IPv6.\nExamples: WITH '2001:438:ffff::407d:1bc1' AS IPv6_stringSELECT    hex(IPv6StringToNum(IPv6_string)),    hex(toIPv6(IPv6_string));SELECT toIPv6('127.0.0.1');\nCategory: IP Addresses Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/ip-address-functions"], "Title": ["IPv6StringToNumOrDefault(s)"], "Feature": ["IPv6StringToNumOrDefault(s)"], "Description": ["IPv6StringToNumOrDefault(s)", "Same as toIPv6, but if the IPv6 address has an invalid format, it returns 0."], "Examples": [], "Category": ["IP Addresses Functions"], "index": 764, "vector_txt": "764:Feature: IPv6StringToNumOrDefault(s)\nDescription: IPv6StringToNumOrDefault(s)Same as toIPv6, but if the IPv6 address has an invalid format, it returns 0.\nExamples: \nCategory: IP Addresses Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/ip-address-functions"], "Title": ["IPv6StringToNumOrNull(s)"], "Feature": ["IPv6StringToNumOrNull(s)"], "Description": ["IPv6StringToNumOrNull(s)", "Same as toIPv6, but if the IPv6 address has an invalid format, it returns null."], "Examples": [], "Category": ["IP Addresses Functions"], "index": 765, "vector_txt": "765:Feature: IPv6StringToNumOrNull(s)\nDescription: IPv6StringToNumOrNull(s)Same as toIPv6, but if the IPv6 address has an invalid format, it returns null.\nExamples: \nCategory: IP Addresses Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/ip-address-functions"], "Title": ["isIPv4String"], "Feature": ["isIPv4String(string)"], "Description": ["isIPv4String", "Determines whether the input string is an IPv4 address or not. If string is IPv6 address returns 0.", "Syntax", "isIPv4String(string)", "Arguments", "string \u2014 IP address. String.", "Returned value", "1 if string is IPv4 address, 0 otherwise. UInt8."], "Examples": ["SELECT addr, isIPv4String(addr) FROM ( SELECT ['0.0.0.0', '127.0.0.1', '::ffff:127.0.0.1'] AS addr ) ARRAY JOIN addr;"], "Category": ["IP Addresses Functions"], "index": 766, "vector_txt": "766:Feature: isIPv4String(string)\nDescription: isIPv4StringDetermines whether the input string is an IPv4 address or not. If string is IPv6 address returns 0.SyntaxisIPv4String(string)Argumentsstring \u2014 IP address. String.Returned value1 if string is IPv4 address, 0 otherwise. UInt8.\nExamples: SELECT addr, isIPv4String(addr) FROM ( SELECT ['0.0.0.0', '127.0.0.1', '::ffff:127.0.0.1'] AS addr ) ARRAY JOIN addr;\nCategory: IP Addresses Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/ip-address-functions"], "Title": ["isIPv6String"], "Feature": ["isIPv6String(string)"], "Description": ["isIPv6String", "Determines whether the input string is an IPv6 address or not. If string is IPv4 address returns 0.", "Syntax", "isIPv6String(string)", "Arguments", "string \u2014 IP address. String.", "Returned value", "1 if string is IPv6 address, 0 otherwise. UInt8."], "Examples": ["SELECT addr, isIPv6String(addr) FROM ( SELECT ['::', '1111::ffff', '::ffff:127.0.0.1', '127.0.0.1'] AS addr ) ARRAY JOIN addr;"], "Category": ["IP Addresses Functions"], "index": 767, "vector_txt": "767:Feature: isIPv6String(string)\nDescription: isIPv6StringDetermines whether the input string is an IPv6 address or not. If string is IPv4 address returns 0.SyntaxisIPv6String(string)Argumentsstring \u2014 IP address. String.Returned value1 if string is IPv6 address, 0 otherwise. UInt8.\nExamples: SELECT addr, isIPv6String(addr) FROM ( SELECT ['::', '1111::ffff', '::ffff:127.0.0.1', '127.0.0.1'] AS addr ) ARRAY JOIN addr;\nCategory: IP Addresses Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/ip-address-functions"], "Title": ["isIPAddressInRange"], "Feature": ["isIPAddressInRange(address, prefix)"], "Description": ["isIPAddressInRange", "Determines if an IP address is contained in a network represented in the CIDR notation. Returns 1 if true, or 0 otherwise.", "Syntax", "isIPAddressInRange(address, prefix)", "This function accepts both IPv4 and IPv6 addresses (and networks) represented as strings. It returns 0 if the IP version of the address and the CIDR don't match.", "Arguments", "address \u2014 An IPv4 or IPv6 address. String.prefix \u2014 An IPv4 or IPv6 network prefix in CIDR. String.", "Returned value", "1 or 0. UInt8."], "Examples": ["SELECT isIPAddressInRange('127.0.0.1', '127.0.0.0/8');", "SELECT isIPAddressInRange('127.0.0.1', 'ffff::/16');", "SELECT isIPAddressInRange('::ffff:192.168.0.1', '::ffff:192.168.0.4/128');"], "Category": ["IP Addresses Functions"], "index": 768, "vector_txt": "768:Feature: isIPAddressInRange(address, prefix)\nDescription: isIPAddressInRangeDetermines if an IP address is contained in a network represented in the CIDR notation. Returns 1 if true, or 0 otherwise.SyntaxisIPAddressInRange(address, prefix)This function accepts both IPv4 and IPv6 addresses (and networks) represented as strings. It returns 0 if the IP version of the address and the CIDR don't match.Argumentsaddress \u2014 An IPv4 or IPv6 address. String.prefix \u2014 An IPv4 or IPv6 network prefix in CIDR. String.Returned value1 or 0. UInt8.\nExamples: SELECT isIPAddressInRange('127.0.0.1', '127.0.0.0/8');SELECT isIPAddressInRange('127.0.0.1', 'ffff::/16');SELECT isIPAddressInRange('::ffff:192.168.0.1', '::ffff:192.168.0.4/128');\nCategory: IP Addresses Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayCount([func,] arr1, ...)"], "Feature": ["arrayCount([func,] arr1, ...)"], "Description": ["arrayCount([func,] arr1, ...)", "Returns the number of elements for which func(arr1[i], ..., arrN[i]) returns something other than 0. If func is not specified, it returns the number of non-zero elements in the array.", "Note that the arrayCount is a higher-order function. You can pass a lambda function to it as the first argument."], "Examples": [], "Category": ["Arrays Functions"], "index": 769, "vector_txt": "769:Feature: arrayCount([func,] arr1, ...)\nDescription: arrayCount([func,] arr1, ...)Returns the number of elements for which func(arr1[i], ..., arrN[i]) returns something other than 0. If func is not specified, it returns the number of non-zero elements in the array.Note that the arrayCount is a higher-order function. You can pass a lambda function to it as the first argument.\nExamples: \nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/introspection"], "Title": ["addressToLine"], "Feature": ["addressToLine(address_of_binary_instruction)"], "Description": ["addressToLine", "Converts virtual memory address inside ClickHouse server process to the filename and the line number in ClickHouse source code.", "If you use official ClickHouse packages, you need to install the clickhouse-common-static-dbg package.", "Syntax", "addressToLine(address_of_binary_instruction)", "Arguments", "address_of_binary_instruction (UInt64) \u2014 Address of instruction in a running process.", "Returned value", "Source code filename and the line number in this file delimited by colon.\nFor example, /build/obj-x86_64-linux-gnu/../src/Common/ThreadPool.cpp:199, where 199 is a line number.Name of a binary, if the function couldn\u2019t find the debug information.Empty string, if the address is not valid.", "Type: String."], "Examples": ["SET allow_introspection_functions=1;", "SELECT * FROM system.trace_log LIMIT 1 \\G;", "SELECT addressToLine(94784076370703) \\G;", "SELECT    arrayStringConcat(arrayMap(x -> addressToLine(x), trace), '\\n') AS trace_source_code_linesFROM system.trace_logLIMIT 1\\G"], "Category": ["Introspection Functions"], "index": 770, "vector_txt": "770:Feature: addressToLine(address_of_binary_instruction)\nDescription: addressToLineConverts virtual memory address inside ClickHouse server process to the filename and the line number in ClickHouse source code.If you use official ClickHouse packages, you need to install the clickhouse-common-static-dbg package.SyntaxaddressToLine(address_of_binary_instruction)Argumentsaddress_of_binary_instruction (UInt64) \u2014 Address of instruction in a running process.Returned valueSource code filename and the line number in this file delimited by colon.\nFor example, /build/obj-x86_64-linux-gnu/../src/Common/ThreadPool.cpp:199, where 199 is a line number.Name of a binary, if the function couldn\u2019t find the debug information.Empty string, if the address is not valid.Type: String.\nExamples: SET allow_introspection_functions=1;SELECT * FROM system.trace_log LIMIT 1 \\G;SELECT addressToLine(94784076370703) \\G;SELECT    arrayStringConcat(arrayMap(x -> addressToLine(x), trace), '\\n') AS trace_source_code_linesFROM system.trace_logLIMIT 1\\G\nCategory: Introspection Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/introspection"], "Title": ["addressToLineWithInlines"], "Feature": ["addressToLineWithInlines(address_of_binary_instruction)"], "Description": ["addressToLineWithInlines", "Similar to addressToLine, but returns an Array with all inline functions. As a result of this, it is slower than addressToLine.", "NoteIf you use official ClickHouse packages, you need to install the clickhouse-common-static-dbg package.", "Syntax", "addressToLineWithInlines(address_of_binary_instruction)", "Arguments", "address_of_binary_instruction (UInt64) \u2014 Address of instruction in a running process.", "Returned value", "An array whose first element is the source code filename and line number in the file delimited by a colon. From the second element onwards, inline functions' source code filenames, line numbers and function names are listed. If the function couldn\u2019t find the debug information, then an array with a single element equal to the name of the binary is returned, otherwise an empty array is returned if the address is not valid. Array(String)."], "Examples": ["SET allow_introspection_functions=1;", "SELECT addressToLineWithInlines(531055181::UInt64);", "SELECT    ta, addressToLineWithInlines(arrayJoin(trace) as ta)FROM system.trace_logWHERE    query_id = '5e173544-2020-45de-b645-5deebe2aae54';"], "Category": ["Introspection Functions"], "index": 771, "vector_txt": "771:Feature: addressToLineWithInlines(address_of_binary_instruction)\nDescription: addressToLineWithInlinesSimilar to addressToLine, but returns an Array with all inline functions. As a result of this, it is slower than addressToLine.NoteIf you use official ClickHouse packages, you need to install the clickhouse-common-static-dbg package.SyntaxaddressToLineWithInlines(address_of_binary_instruction)Argumentsaddress_of_binary_instruction (UInt64) \u2014 Address of instruction in a running process.Returned valueAn array whose first element is the source code filename and line number in the file delimited by a colon. From the second element onwards, inline functions' source code filenames, line numbers and function names are listed. If the function couldn\u2019t find the debug information, then an array with a single element equal to the name of the binary is returned, otherwise an empty array is returned if the address is not valid. Array(String).\nExamples: SET allow_introspection_functions=1;SELECT addressToLineWithInlines(531055181::UInt64);SELECT    ta, addressToLineWithInlines(arrayJoin(trace) as ta)FROM system.trace_logWHERE    query_id = '5e173544-2020-45de-b645-5deebe2aae54';\nCategory: Introspection Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/introspection"], "Title": ["addressToSymbol"], "Feature": ["addressToSymbol(address_of_binary_instruction)"], "Description": ["addressToSymbol", "Converts virtual memory address inside ClickHouse server process to the symbol from ClickHouse object files.", "Syntax", "addressToSymbol(address_of_binary_instruction)", "Arguments", "address_of_binary_instruction (UInt64) \u2014 Address of instruction in a running process.", "Returned value", "Symbol from ClickHouse object files. String.Empty string, if the address is not valid. String."], "Examples": ["SET allow_introspection_functions=1;", "SELECT * FROM system.trace_log LIMIT 1 \\G;", "SELECT addressToSymbol(94138803686098) \\G;", "SELECT    arrayStringConcat(arrayMap(x -> addressToSymbol(x), trace), '\\n') AS trace_symbolsFROM system.trace_logLIMIT 1\\G"], "Category": ["Introspection Functions"], "index": 772, "vector_txt": "772:Feature: addressToSymbol(address_of_binary_instruction)\nDescription: addressToSymbolConverts virtual memory address inside ClickHouse server process to the symbol from ClickHouse object files.SyntaxaddressToSymbol(address_of_binary_instruction)Argumentsaddress_of_binary_instruction (UInt64) \u2014 Address of instruction in a running process.Returned valueSymbol from ClickHouse object files. String.Empty string, if the address is not valid. String.\nExamples: SET allow_introspection_functions=1;SELECT * FROM system.trace_log LIMIT 1 \\G;SELECT addressToSymbol(94138803686098) \\G;SELECT    arrayStringConcat(arrayMap(x -> addressToSymbol(x), trace), '\\n') AS trace_symbolsFROM system.trace_logLIMIT 1\\G\nCategory: Introspection Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/introspection"], "Title": ["demangle"], "Feature": ["demangle(symbol)"], "Description": ["demangle", "Converts a symbol that you can get using the addressToSymbol function to the C++ function name.", "Syntax", "demangle(symbol)", "Arguments", "symbol (String) \u2014 Symbol from an object file.", "Returned value", "Name of the C++ function, or an empty string if the symbol is not valid. String."], "Examples": ["SET allow_introspection_functions=1;", "SELECT * FROM system.trace_log LIMIT 1 \\G;", "SELECT demangle(addressToSymbol(94138803686098)) \\G;", "SELECT    arrayStringConcat(arrayMap(x -> demangle(addressToSymbol(x)), trace), '\\n') AS trace_functionsFROM system.trace_logLIMIT 1\\G"], "Category": ["Introspection Functions"], "index": 773, "vector_txt": "773:Feature: demangle(symbol)\nDescription: demangleConverts a symbol that you can get using the addressToSymbol function to the C++ function name.Syntaxdemangle(symbol)Argumentssymbol (String) \u2014 Symbol from an object file.Returned valueName of the C++ function, or an empty string if the symbol is not valid. String.\nExamples: SET allow_introspection_functions=1;SELECT * FROM system.trace_log LIMIT 1 \\G;SELECT demangle(addressToSymbol(94138803686098)) \\G;SELECT    arrayStringConcat(arrayMap(x -> demangle(addressToSymbol(x)), trace), '\\n') AS trace_functionsFROM system.trace_logLIMIT 1\\G\nCategory: Introspection Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/introspection"], "Title": ["tid"], "Feature": ["tid()"], "Description": ["tid", "Returns id of the thread, in which current Block is processed.", "Syntax", "tid()", "Returned value", "Current thread id. Uint64."], "Examples": ["SELECT tid();"], "Category": ["Introspection Functions"], "index": 774, "vector_txt": "774:Feature: tid()\nDescription: tidReturns id of the thread, in which current Block is processed.Syntaxtid()Returned valueCurrent thread id. Uint64.\nExamples: SELECT tid();\nCategory: Introspection Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/introspection"], "Title": ["logTrace"], "Feature": ["logTrace('message')"], "Description": ["logTrace", "Emits trace log message to server log for each Block.", "Syntax", "logTrace('message')", "Arguments", "message \u2014 Message that is emitted to server log. String.", "Returned value", "Always returns 0."], "Examples": ["SELECT logTrace('logTrace message');"], "Category": ["Introspection Functions"], "index": 775, "vector_txt": "775:Feature: logTrace('message')\nDescription: logTraceEmits trace log message to server log for each Block.SyntaxlogTrace('message')Argumentsmessage \u2014 Message that is emitted to server log. String.Returned valueAlways returns 0.\nExamples: SELECT logTrace('logTrace message');\nCategory: Introspection Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/json-functions"], "Title": ["simpleJSON (visitParam) functions"], "Feature": ["simpleJSONHas(json, field_name)"], "Description": ["simpleJSON (visitParam) functions", "ClickHouse has special functions for working with simplified JSON. All these JSON functions are based on strong assumptions about what the JSON can be. They try to do as little as possible to get the job done as quickly as possible.", "The following assumptions are made:", "The field name (function argument) must be a constant.The field name is somehow canonically encoded in JSON. For example: simpleJSONHas('{\"abc\":\"def\"}', 'abc') = 1, but simpleJSONHas('{\"\\\\u0061\\\\u0062\\\\u0063\":\"def\"}', 'abc') = 0Fields are searched for on any nesting level, indiscriminately. If there are multiple matching fields, the first occurrence is used.The JSON does not have space characters outside of string literals.", "simpleJSONHas", "Checks whether there is a field named field_name.  The result is UInt8.", "Syntax", "simpleJSONHas(json, field_name)", "Alias: visitParamHas.", "Parameters", "json \u2014 The JSON in which the field is searched for. Stringfield_name \u2014 The name of the field to search for. String literal", "Returned value", "Returns 1 if the field exists, 0 otherwise. UInt8."], "Examples": ["CREATE TABLE jsons(    `json` String)ENGINE = Memory;INSERT INTO jsons VALUES ('{\"foo\":\"true\",\"qux\":1}');SELECT simpleJSONHas(json, 'foo') FROM jsons;SELECT simpleJSONHas(json, 'bar') FROM jsons;", "simpleJSONExtractUInt(json, field_name)", "CREATE TABLE jsons(    `json` String)ENGINE = Memory;INSERT INTO jsons VALUES ('{\"foo\":\"4e3\"}');INSERT INTO jsons VALUES ('{\"foo\":3.4}');INSERT INTO jsons VALUES ('{\"foo\":5}');INSERT INTO jsons VALUES ('{\"foo\":\"not1number\"}');INSERT INTO jsons VALUES ('{\"baz\":2}');SELECT simpleJSONExtractUInt(json, 'foo') FROM jsons ORDER BY json;", "simpleJSONExtractInt(json, field_name)", "CREATE TABLE jsons(    `json` String)ENGINE = Memory;INSERT INTO jsons VALUES ('{\"foo\":\"-4e3\"}');INSERT INTO jsons VALUES ('{\"foo\":-3.4}');INSERT INTO jsons VALUES ('{\"foo\":5}');INSERT INTO jsons VALUES ('{\"foo\":\"not1number\"}');INSERT INTO jsons VALUES ('{\"baz\":2}');SELECT simpleJSONExtractInt(json, 'foo') FROM jsons ORDER BY json;", "simpleJSONExtractFloat(json, field_name)", "CREATE TABLE jsons(    `json` String)ENGINE = Memory;INSERT INTO jsons VALUES ('{\"foo\":\"-4e3\"}');INSERT INTO jsons VALUES ('{\"foo\":-3.4}');INSERT INTO jsons VALUES ('{\"foo\":5}');INSERT INTO jsons VALUES ('{\"foo\":\"not1number\"}');INSERT INTO jsons VALUES ('{\"baz\":2}');SELECT simpleJSONExtractFloat(json, 'foo') FROM jsons ORDER BY json;", "simpleJSONExtractBool(json, field_name)", "CREATE TABLE jsons(    `json` String)ENGINE = Memory;INSERT INTO jsons VALUES ('{\"foo\":false,\"bar\":true}');INSERT INTO jsons VALUES ('{\"foo\":\"true\",\"qux\":1}');SELECT simpleJSONExtractBool(json, 'bar') FROM jsons ORDER BY json;SELECT simpleJSONExtractBool(json, 'foo') FROM jsons ORDER BY json;", "simpleJSONExtractRaw(json, field_name)", "CREATE TABLE jsons(    `json` String)ENGINE = Memory;INSERT INTO jsons VALUES ('{\"foo\":\"-4e3\"}');INSERT INTO jsons VALUES ('{\"foo\":-3.4}');INSERT INTO jsons VALUES ('{\"foo\":5}');INSERT INTO jsons VALUES ('{\"foo\":{\"def\":[1,2,3]}}');INSERT INTO jsons VALUES ('{\"baz\":2}');SELECT simpleJSONExtractRaw(json, 'foo') FROM jsons ORDER BY json;", "simpleJSONExtractString(json, field_name)", "CREATE TABLE jsons(    `json` String)ENGINE = Memory;INSERT INTO jsons VALUES ('{\"foo\":\"\\\\n\\\\u0000\"}');INSERT INTO jsons VALUES ('{\"foo\":\"\\\\u263\"}');INSERT INTO jsons VALUES ('{\"foo\":\"\\\\u263a\"}');INSERT INTO jsons VALUES ('{\"foo\":\"hello}');SELECT simpleJSONExtractString(json, 'foo') FROM jsons ORDER BY json;"], "Category": ["JSON Functions"], "index": 776, "vector_txt": "776:Feature: simpleJSONHas(json, field_name)\nDescription: simpleJSON (visitParam) functionsClickHouse has special functions for working with simplified JSON. All these JSON functions are based on strong assumptions about what the JSON can be. They try to do as little as possible to get the job done as quickly as possible.The following assumptions are made:The field name (function argument) must be a constant.The field name is somehow canonically encoded in JSON. For example: simpleJSONHas('{\"abc\":\"def\"}', 'abc') = 1, but simpleJSONHas('{\"\\\\u0061\\\\u0062\\\\u0063\":\"def\"}', 'abc') = 0Fields are searched for on any nesting level, indiscriminately. If there are multiple matching fields, the first occurrence is used.The JSON does not have space characters outside of string literals.simpleJSONHasChecks whether there is a field named field_name.  The result is UInt8.SyntaxsimpleJSONHas(json, field_name)Alias: visitParamHas.Parametersjson \u2014 The JSON in which the field is searched for. Stringfield_name \u2014 The name of the field to search for. String literalReturned valueReturns 1 if the field exists, 0 otherwise. UInt8.\nExamples: CREATE TABLE jsons(    `json` String)ENGINE = Memory;INSERT INTO jsons VALUES ('{\"foo\":\"true\",\"qux\":1}');SELECT simpleJSONHas(json, 'foo') FROM jsons;SELECT simpleJSONHas(json, 'bar') FROM jsons;simpleJSONExtractUInt(json, field_name)CREATE TABLE jsons(    `json` String)ENGINE = Memory;INSERT INTO jsons VALUES ('{\"foo\":\"4e3\"}');INSERT INTO jsons VALUES ('{\"foo\":3.4}');INSERT INTO jsons VALUES ('{\"foo\":5}');INSERT INTO jsons VALUES ('{\"foo\":\"not1number\"}');INSERT INTO jsons VALUES ('{\"baz\":2}');SELECT simpleJSONExtractUInt(json, 'foo') FROM jsons ORDER BY json;simpleJSONExtractInt(json, field_name)CREATE TABLE jsons(    `json` String)ENGINE = Memory;INSERT INTO jsons VALUES ('{\"foo\":\"-4e3\"}');INSERT INTO jsons VALUES ('{\"foo\":-3.4}');INSERT INTO jsons VALUES ('{\"foo\":5}');INSERT INTO jsons VALUES ('{\"foo\":\"not1number\"}');INSERT INTO jsons VALUES ('{\"baz\":2}');SELECT simpleJSONExtractInt(json, 'foo') FROM jsons ORDER BY json;simpleJSONExtractFloat(json, field_name)CREATE TABLE jsons(    `json` String)ENGINE = Memory;INSERT INTO jsons VALUES ('{\"foo\":\"-4e3\"}');INSERT INTO jsons VALUES ('{\"foo\":-3.4}');INSERT INTO jsons VALUES ('{\"foo\":5}');INSERT INTO jsons VALUES ('{\"foo\":\"not1number\"}');INSERT INTO jsons VALUES ('{\"baz\":2}');SELECT simpleJSONExtractFloat(json, 'foo') FROM jsons ORDER BY json;simpleJSONExtractBool(json, field_name)CREATE TABLE jsons(    `json` String)ENGINE = Memory;INSERT INTO jsons VALUES ('{\"foo\":false,\"bar\":true}');INSERT INTO jsons VALUES ('{\"foo\":\"true\",\"qux\":1}');SELECT simpleJSONExtractBool(json, 'bar') FROM jsons ORDER BY json;SELECT simpleJSONExtractBool(json, 'foo') FROM jsons ORDER BY json;simpleJSONExtractRaw(json, field_name)CREATE TABLE jsons(    `json` String)ENGINE = Memory;INSERT INTO jsons VALUES ('{\"foo\":\"-4e3\"}');INSERT INTO jsons VALUES ('{\"foo\":-3.4}');INSERT INTO jsons VALUES ('{\"foo\":5}');INSERT INTO jsons VALUES ('{\"foo\":{\"def\":[1,2,3]}}');INSERT INTO jsons VALUES ('{\"baz\":2}');SELECT simpleJSONExtractRaw(json, 'foo') FROM jsons ORDER BY json;simpleJSONExtractString(json, field_name)CREATE TABLE jsons(    `json` String)ENGINE = Memory;INSERT INTO jsons VALUES ('{\"foo\":\"\\\\n\\\\u0000\"}');INSERT INTO jsons VALUES ('{\"foo\":\"\\\\u263\"}');INSERT INTO jsons VALUES ('{\"foo\":\"\\\\u263a\"}');INSERT INTO jsons VALUES ('{\"foo\":\"hello}');SELECT simpleJSONExtractString(json, 'foo') FROM jsons ORDER BY json;\nCategory: JSON Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/json-functions"], "Title": ["JSONExtract functions"], "Feature": ["isValidJSON(json)"], "Description": ["JSONExtract functions", "The following functions are based on simdjson, and designed for more complex JSON parsing requirements.", "isValidJSON", "Checks that passed string is valid JSON.", "Syntax", "isValidJSON(json)"], "Examples": ["SELECT isValidJSON('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}') = 1SELECT isValidJSON('not a json') = 0", "JSONHas(json [, indices_or_keys]...)", "SELECT JSONHas('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}', 'b') = 1SELECT JSONHas('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}', 'b', 4) = 0", "SELECT JSONExtractKey('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}', 1) = 'a'SELECT JSONExtractKey('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}', 2) = 'b'SELECT JSONExtractKey('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}', -1) = 'b'SELECT JSONExtractKey('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}', -2) = 'a'SELECT JSONExtractString('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}', 1) = 'hello'", "JSONLength(json [, indices_or_keys]...)", "SELECT JSONLength('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}', 'b') = 3SELECT JSONLength('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}') = 2", "JSONType(json [, indices_or_keys]...)", "SELECT JSONType('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}') = 'Object'SELECT JSONType('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}', 'a') = 'String'SELECT JSONType('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}', 'b') = 'Array'", "JSONExtractUInt(json [, indices_or_keys]...)", "SELECT JSONExtractUInt('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}', 'b', -1) as x, toTypeName(x);", "JSONExtractInt(json [, indices_or_keys]...)", "SELECT JSONExtractInt('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}', 'b', -1) as x, toTypeName(x);", "JSONExtractFloat(json [, indices_or_keys]...)", "SELECT JSONExtractFloat('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}', 'b', 2) as x, toTypeName(x);", "JSONExtractBool(json\\[, indices_or_keys\\]...)", "SELECT JSONExtractBool('{\"passed\": true}', 'passed');", "JSONExtractString(json [, indices_or_keys]...)", "SELECT JSONExtractString('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}', 'a') = 'hello'SELECT JSONExtractString('{\"abc\":\"\\\\n\\\\u0000\"}', 'abc') = '\\n\\0'SELECT JSONExtractString('{\"abc\":\"\\\\u263a\"}', 'abc') = '\u263a'SELECT JSONExtractString('{\"abc\":\"\\\\u263\"}', 'abc') = ''SELECT JSONExtractString('{\"abc\":\"hello}', 'abc') = ''", "JSONExtract(json [, indices_or_keys...], return_type)", "SELECT JSONExtract('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}', 'Tuple(String, Array(Float64))') = ('hello',[-100,200,300])SELECT JSONExtract('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}', 'Tuple(b Array(Float64), a String)') = ([-100,200,300],'hello')SELECT JSONExtract('{\"a\": \"hello\", \"b\": \"world\"}', 'Map(String, String)') = map('a',  'hello', 'b', 'world');SELECT JSONExtract('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}', 'b', 'Array(Nullable(Int8))') = [-100, NULL, NULL]SELECT JSONExtract('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}', 'b', 4, 'Nullable(Int64)') = NULLSELECT JSONExtract('{\"passed\": true}', 'passed', 'UInt8') = 1SELECT JSONExtract('{\"day\": \"Thursday\"}', 'day', 'Enum8(\\'Sunday\\' = 0, \\'Monday\\' = 1, \\'Tuesday\\' = 2, \\'Wednesday\\' = 3, \\'Thursday\\' = 4, \\'Friday\\' = 5, \\'Saturday\\' = 6)') = 'Thursday'SELECT JSONExtract('{\"day\": 5}', 'day', 'Enum8(\\'Sunday\\' = 0, \\'Monday\\' = 1, \\'Tuesday\\' = 2, \\'Wednesday\\' = 3, \\'Thursday\\' = 4, \\'Friday\\' = 5, \\'Saturday\\' = 6)') = 'Friday'", "JSONExtractKeysAndValues(json [, indices_or_keys...], value_type)", "SELECT JSONExtractKeysAndValues('{\"x\": {\"a\": 5, \"b\": 7, \"c\": 11}}', 'x', 'Int8') = [('a',5),('b',7),('c',11)];", "JSONExtractKeys(json[, a, b, c...])", "SELECT JSONExtractKeys('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}');", "JSONExtractRaw(json [, indices_or_keys]...)", "SELECT JSONExtractRaw('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}', 'b') = '[-100, 200.0, 300]';", "JSONExtractArrayRaw(json [, indices_or_keys...])", "SELECT JSONExtractArrayRaw('{\"a\": \"hello\", \"b\": [-100, 200.0, \"hello\"]}', 'b') = ['-100', '200.0', '\"hello\"'];", "JSONExtractKeysAndValuesRaw(json[, p, a, t, h])", "SELECT JSONExtractKeysAndValuesRaw('{\"a\": [-100, 200.0], \"b\":{\"c\": {\"d\": \"hello\", \"f\": \"world\"}}}');", "SELECT JSONExtractKeysAndValuesRaw('{\"a\": [-100, 200.0], \"b\":{\"c\": {\"d\": \"hello\", \"f\": \"world\"}}}', 'b');", "SELECT JSONExtractKeysAndValuesRaw('{\"a\": [-100, 200.0], \"b\":{\"c\": {\"d\": \"hello\", \"f\": \"world\"}}}', -1, 'c');", "JSON_EXISTS(json, path)", "SELECT JSON_EXISTS('{\"hello\":1}', '$.hello');SELECT JSON_EXISTS('{\"hello\":{\"world\":1}}', '$.hello.world');SELECT JSON_EXISTS('{\"hello\":[\"world\"]}', '$.hello[*]');SELECT JSON_EXISTS('{\"hello\":[\"world\"]}', '$.hello[0]');", "JSON_QUERY(json, path)", "SELECT JSON_QUERY('{\"hello\":\"world\"}', '$.hello');SELECT JSON_QUERY('{\"array\":[[0, 1, 2, 3, 4, 5], [0, -1, -2, -3, -4, -5]]}', '$.array[*][0 to 2, 4]');SELECT JSON_QUERY('{\"hello\":2}', '$.hello');SELECT toTypeName(JSON_QUERY('{\"hello\":2}', '$.hello'));", "JSON_VALUE(json, path)", "SELECT JSON_VALUE('{\"hello\":\"world\"}', '$.hello');SELECT JSON_VALUE('{\"array\":[[0, 1, 2, 3, 4, 5], [0, -1, -2, -3, -4, -5]]}', '$.array[*][0 to 2, 4]');SELECT JSON_VALUE('{\"hello\":2}', '$.hello');SELECT toTypeName(JSON_VALUE('{\"hello\":2}', '$.hello'));select JSON_VALUE('{\"hello\":\"world\"}', '$.b') settings function_json_value_return_type_allow_nullable=true;select JSON_VALUE('{\"hello\":{\"world\":\"!\"}}', '$.hello') settings function_json_value_return_type_allow_complex=true;", "toJSONString(value)", "SELECT toJSONString(map('key1', 1, 'key2', 2));SELECT toJSONString(tuple(1.25, NULL, NaN, +inf, -inf, [])) SETTINGS output_format_json_quote_denormals = 1;", "JSONArrayLength(json)", "SELECT    JSONArrayLength(''),    JSONArrayLength('[1,2,3]')\u250c\u2500JSONArrayLength('')\u2500\u252c\u2500JSONArrayLength('[1,2,3]')\u2500\u2510\u2502                \u1d3a\u1d41\u1d38\u1d38 \u2502                          3 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "jsonMergePatch(json1, json2, ...)", "SELECT jsonMergePatch('{\"a\":1}', '{\"name\": \"joey\"}', '{\"name\": \"tom\"}', '{\"name\": \"zoey\"}') AS res\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 {\"a\":1,\"name\":\"zoey\"} \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "JSONAllPaths(json)", "CREATE TABLE test (json JSON(max_dynamic_paths=1)) ENGINE = Memory;INSERT INTO test FORMAT JSONEachRow {\"json\" : {\"a\" : 42}}, {\"json\" : {\"b\" : \"Hello\"}}, {\"json\" : {\"a\" : [1, 2, 3], \"c\" : \"2020-01-01\"}}SELECT json, JSONAllPaths(json) FROM test;", "JSONAllPathsWithTypes(json)", "CREATE TABLE test (json JSON(max_dynamic_paths=1)) ENGINE = Memory;INSERT INTO test FORMAT JSONEachRow {\"json\" : {\"a\" : 42}}, {\"json\" : {\"b\" : \"Hello\"}}, {\"json\" : {\"a\" : [1, 2, 3], \"c\" : \"2020-01-01\"}}SELECT json, JSONAllPathsWithTypes(json) FROM test;", "JSONDynamicPaths(json)", "CREATE TABLE test (json JSON(max_dynamic_paths=1)) ENGINE = Memory;INSERT INTO test FORMAT JSONEachRow {\"json\" : {\"a\" : 42}}, {\"json\" : {\"b\" : \"Hello\"}}, {\"json\" : {\"a\" : [1, 2, 3], \"c\" : \"2020-01-01\"}}SELECT json, JSONDynamicPaths(json) FROM test;", "JSONAllPathsWithTypes(json)", "CREATE TABLE test (json JSON(max_dynamic_paths=1)) ENGINE = Memory;INSERT INTO test FORMAT JSONEachRow {\"json\" : {\"a\" : 42}}, {\"json\" : {\"b\" : \"Hello\"}}, {\"json\" : {\"a\" : [1, 2, 3], \"c\" : \"2020-01-01\"}}SELECT json, JSONDynamicPathsWithTypes(json) FROM test;", "JSONSharedDataPaths(json)", "CREATE TABLE test (json JSON(max_dynamic_paths=1)) ENGINE = Memory;INSERT INTO test FORMAT JSONEachRow {\"json\" : {\"a\" : 42}}, {\"json\" : {\"b\" : \"Hello\"}}, {\"json\" : {\"a\" : [1, 2, 3], \"c\" : \"2020-01-01\"}}SELECT json, JSONSharedDataPaths(json) FROM test;", "JSONSharedDataPathsWithTypes(json)", "CREATE TABLE test (json JSON(max_dynamic_paths=1)) ENGINE = Memory;INSERT INTO test FORMAT JSONEachRow {\"json\" : {\"a\" : 42}}, {\"json\" : {\"b\" : \"Hello\"}}, {\"json\" : {\"a\" : [1, 2, 3], \"c\" : \"2020-01-01\"}}SELECT json, JSONSharedDataPathsWithTypes(json) FROM test;"], "Category": ["JSON Functions"], "index": 777, "vector_txt": "777:Feature: isValidJSON(json)\nDescription: JSONExtract functionsThe following functions are based on simdjson, and designed for more complex JSON parsing requirements.isValidJSONChecks that passed string is valid JSON.SyntaxisValidJSON(json)\nExamples: SELECT isValidJSON('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}') = 1SELECT isValidJSON('not a json') = 0JSONHas(json [, indices_or_keys]...)SELECT JSONHas('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}', 'b') = 1SELECT JSONHas('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}', 'b', 4) = 0SELECT JSONExtractKey('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}', 1) = 'a'SELECT JSONExtractKey('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}', 2) = 'b'SELECT JSONExtractKey('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}', -1) = 'b'SELECT JSONExtractKey('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}', -2) = 'a'SELECT JSONExtractString('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}', 1) = 'hello'JSONLength(json [, indices_or_keys]...)SELECT JSONLength('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}', 'b') = 3SELECT JSONLength('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}') = 2JSONType(json [, indices_or_keys]...)SELECT JSONType('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}') = 'Object'SELECT JSONType('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}', 'a') = 'String'SELECT JSONType('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}', 'b') = 'Array'JSONExtractUInt(json [, indices_or_keys]...)SELECT JSONExtractUInt('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}', 'b', -1) as x, toTypeName(x);JSONExtractInt(json [, indices_or_keys]...)SELECT JSONExtractInt('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}', 'b', -1) as x, toTypeName(x);JSONExtractFloat(json [, indices_or_keys]...)SELECT JSONExtractFloat('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}', 'b', 2) as x, toTypeName(x);JSONExtractBool(json\\[, indices_or_keys\\]...)SELECT JSONExtractBool('{\"passed\": true}', 'passed');JSONExtractString(json [, indices_or_keys]...)SELECT JSONExtractString('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}', 'a') = 'hello'SELECT JSONExtractString('{\"abc\":\"\\\\n\\\\u0000\"}', 'abc') = '\\n\\0'SELECT JSONExtractString('{\"abc\":\"\\\\u263a\"}', 'abc') = '\u263a'SELECT JSONExtractString('{\"abc\":\"\\\\u263\"}', 'abc') = ''SELECT JSONExtractString('{\"abc\":\"hello}', 'abc') = ''JSONExtract(json [, indices_or_keys...], return_type)SELECT JSONExtract('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}', 'Tuple(String, Array(Float64))') = ('hello',[-100,200,300])SELECT JSONExtract('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}', 'Tuple(b Array(Float64), a String)') = ([-100,200,300],'hello')SELECT JSONExtract('{\"a\": \"hello\", \"b\": \"world\"}', 'Map(String, String)') = map('a',  'hello', 'b', 'world');SELECT JSONExtract('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}', 'b', 'Array(Nullable(Int8))') = [-100, NULL, NULL]SELECT JSONExtract('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}', 'b', 4, 'Nullable(Int64)') = NULLSELECT JSONExtract('{\"passed\": true}', 'passed', 'UInt8') = 1SELECT JSONExtract('{\"day\": \"Thursday\"}', 'day', 'Enum8(\\'Sunday\\' = 0, \\'Monday\\' = 1, \\'Tuesday\\' = 2, \\'Wednesday\\' = 3, \\'Thursday\\' = 4, \\'Friday\\' = 5, \\'Saturday\\' = 6)') = 'Thursday'SELECT JSONExtract('{\"day\": 5}', 'day', 'Enum8(\\'Sunday\\' = 0, \\'Monday\\' = 1, \\'Tuesday\\' = 2, \\'Wednesday\\' = 3, \\'Thursday\\' = 4, \\'Friday\\' = 5, \\'Saturday\\' = 6)') = 'Friday'JSONExtractKeysAndValues(json [, indices_or_keys...], value_type)SELECT JSONExtractKeysAndValues('{\"x\": {\"a\": 5, \"b\": 7, \"c\": 11}}', 'x', 'Int8') = [('a',5),('b',7),('c',11)];JSONExtractKeys(json[, a, b, c...])SELECT JSONExtractKeys('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}');JSONExtractRaw(json [, indices_or_keys]...)SELECT JSONExtractRaw('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}', 'b') = '[-100, 200.0, 300]';JSONExtractArrayRaw(json [, indices_or_keys...])SELECT JSONExtractArrayRaw('{\"a\": \"hello\", \"b\": [-100, 200.0, \"hello\"]}', 'b') = ['-100', '200.0', '\"hello\"'];JSONExtractKeysAndValuesRaw(json[, p, a, t, h])SELECT JSONExtractKeysAndValuesRaw('{\"a\": [-100, 200.0], \"b\":{\"c\": {\"d\": \"hello\", \"f\": \"world\"}}}');SELECT JSONExtractKeysAndValuesRaw('{\"a\": [-100, 200.0], \"b\":{\"c\": {\"d\": \"hello\", \"f\": \"world\"}}}', 'b');SELECT JSONExtractKeysAndValuesRaw('{\"a\": [-100, 200.0], \"b\":{\"c\": {\"d\": \"hello\", \"f\": \"world\"}}}', -1, 'c');JSON_EXISTS(json, path)SELECT JSON_EXISTS('{\"hello\":1}', '$.hello');SELECT JSON_EXISTS('{\"hello\":{\"world\":1}}', '$.hello.world');SELECT JSON_EXISTS('{\"hello\":[\"world\"]}', '$.hello[*]');SELECT JSON_EXISTS('{\"hello\":[\"world\"]}', '$.hello[0]');JSON_QUERY(json, path)SELECT JSON_QUERY('{\"hello\":\"world\"}', '$.hello');SELECT JSON_QUERY('{\"array\":[[0, 1, 2, 3, 4, 5], [0, -1, -2, -3, -4, -5]]}', '$.array[*][0 to 2, 4]');SELECT JSON_QUERY('{\"hello\":2}', '$.hello');SELECT toTypeName(JSON_QUERY('{\"hello\":2}', '$.hello'));JSON_VALUE(json, path)SELECT JSON_VALUE('{\"hello\":\"world\"}', '$.hello');SELECT JSON_VALUE('{\"array\":[[0, 1, 2, 3, 4, 5], [0, -1, -2, -3, -4, -5]]}', '$.array[*][0 to 2, 4]');SELECT JSON_VALUE('{\"hello\":2}', '$.hello');SELECT toTypeName(JSON_VALUE('{\"hello\":2}', '$.hello'));select JSON_VALUE('{\"hello\":\"world\"}', '$.b') settings function_json_value_return_type_allow_nullable=true;select JSON_VALUE('{\"hello\":{\"world\":\"!\"}}', '$.hello') settings function_json_value_return_type_allow_complex=true;toJSONString(value)SELECT toJSONString(map('key1', 1, 'key2', 2));SELECT toJSONString(tuple(1.25, NULL, NaN, +inf, -inf, [])) SETTINGS output_format_json_quote_denormals = 1;JSONArrayLength(json)SELECT    JSONArrayLength(''),    JSONArrayLength('[1,2,3]')\u250c\u2500JSONArrayLength('')\u2500\u252c\u2500JSONArrayLength('[1,2,3]')\u2500\u2510\u2502                \u1d3a\u1d41\u1d38\u1d38 \u2502                          3 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518jsonMergePatch(json1, json2, ...)SELECT jsonMergePatch('{\"a\":1}', '{\"name\": \"joey\"}', '{\"name\": \"tom\"}', '{\"name\": \"zoey\"}') AS res\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 {\"a\":1,\"name\":\"zoey\"} \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518JSONAllPaths(json)CREATE TABLE test (json JSON(max_dynamic_paths=1)) ENGINE = Memory;INSERT INTO test FORMAT JSONEachRow {\"json\" : {\"a\" : 42}}, {\"json\" : {\"b\" : \"Hello\"}}, {\"json\" : {\"a\" : [1, 2, 3], \"c\" : \"2020-01-01\"}}SELECT json, JSONAllPaths(json) FROM test;JSONAllPathsWithTypes(json)CREATE TABLE test (json JSON(max_dynamic_paths=1)) ENGINE = Memory;INSERT INTO test FORMAT JSONEachRow {\"json\" : {\"a\" : 42}}, {\"json\" : {\"b\" : \"Hello\"}}, {\"json\" : {\"a\" : [1, 2, 3], \"c\" : \"2020-01-01\"}}SELECT json, JSONAllPathsWithTypes(json) FROM test;JSONDynamicPaths(json)CREATE TABLE test (json JSON(max_dynamic_paths=1)) ENGINE = Memory;INSERT INTO test FORMAT JSONEachRow {\"json\" : {\"a\" : 42}}, {\"json\" : {\"b\" : \"Hello\"}}, {\"json\" : {\"a\" : [1, 2, 3], \"c\" : \"2020-01-01\"}}SELECT json, JSONDynamicPaths(json) FROM test;JSONAllPathsWithTypes(json)CREATE TABLE test (json JSON(max_dynamic_paths=1)) ENGINE = Memory;INSERT INTO test FORMAT JSONEachRow {\"json\" : {\"a\" : 42}}, {\"json\" : {\"b\" : \"Hello\"}}, {\"json\" : {\"a\" : [1, 2, 3], \"c\" : \"2020-01-01\"}}SELECT json, JSONDynamicPathsWithTypes(json) FROM test;JSONSharedDataPaths(json)CREATE TABLE test (json JSON(max_dynamic_paths=1)) ENGINE = Memory;INSERT INTO test FORMAT JSONEachRow {\"json\" : {\"a\" : 42}}, {\"json\" : {\"b\" : \"Hello\"}}, {\"json\" : {\"a\" : [1, 2, 3], \"c\" : \"2020-01-01\"}}SELECT json, JSONSharedDataPaths(json) FROM test;JSONSharedDataPathsWithTypes(json)CREATE TABLE test (json JSON(max_dynamic_paths=1)) ENGINE = Memory;INSERT INTO test FORMAT JSONEachRow {\"json\" : {\"a\" : 42}}, {\"json\" : {\"b\" : \"Hello\"}}, {\"json\" : {\"a\" : [1, 2, 3], \"c\" : \"2020-01-01\"}}SELECT json, JSONSharedDataPathsWithTypes(json) FROM test;\nCategory: JSON Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/logical-functions"], "Title": ["and"], "Feature": ["and(val1, val2...)"], "Description": ["and", "Calculates the logical conjunction of two or more values. ", "Setting short_circuit_function_evaluation controls whether short-circuit evaluation is used. If enabled, val_i is evaluated only if (val_1 AND val_2 AND ... AND val_{i-1}) is true. For example, with short-circuit evaluation, no division-by-zero exception is thrown when executing the query SELECT and(number = 2, intDiv(1, number)) FROM numbers(5).", "Syntax", "and(val1, val2...)", "Alias: The AND operator.", "Arguments", "val1, val2, ... \u2014 List of at least two values. Int, UInt, Float or Nullable.", "Returned value", "0, if at least one argument evaluates to false,NULL, if no argument evaluates to false and at least one argument is NULL,1, otherwise.", "Type: UInt8 or Nullable(UInt8)."], "Examples": ["SELECT and(0, 1, -2);", "SELECT and(NULL, 1, 10, -2);"], "Category": ["Logical Functions"], "index": 778, "vector_txt": "778:Feature: and(val1, val2...)\nDescription: andCalculates the logical conjunction of two or more values. Setting short_circuit_function_evaluation controls whether short-circuit evaluation is used. If enabled, val_i is evaluated only if (val_1 AND val_2 AND ... AND val_{i-1}) is true. For example, with short-circuit evaluation, no division-by-zero exception is thrown when executing the query SELECT and(number = 2, intDiv(1, number)) FROM numbers(5).Syntaxand(val1, val2...)Alias: The AND operator.Argumentsval1, val2, ... \u2014 List of at least two values. Int, UInt, Float or Nullable.Returned value0, if at least one argument evaluates to false,NULL, if no argument evaluates to false and at least one argument is NULL,1, otherwise.Type: UInt8 or Nullable(UInt8).\nExamples: SELECT and(0, 1, -2);SELECT and(NULL, 1, 10, -2);\nCategory: Logical Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/logical-functions"], "Title": ["or"], "Feature": ["or(val1, val2...)"], "Description": ["or", "Calculates the logical disjunction of two or more values.", "Setting short_circuit_function_evaluation controls whether short-circuit evaluation is used. If enabled, val_i is evaluated only if ((NOT val_1) AND (NOT val_2) AND ... AND (NOT val_{i-1})) is true. For example, with short-circuit evaluation, no division-by-zero exception is thrown when executing the query SELECT or(number = 0, intDiv(1, number) != 0) FROM numbers(5).", "Syntax", "or(val1, val2...)", "Alias: The OR operator.", "Arguments", "val1, val2, ... \u2014 List of at least two values. Int, UInt, Float or Nullable.", "Returned value", "1, if at least one argument evaluates to true,0, if all arguments evaluate to false,NULL, if all arguments evaluate to false and at least one argument is NULL.", "Type: UInt8 or Nullable(UInt8)."], "Examples": ["SELECT or(1, 0, 0, 2, NULL);", "SELECT or(0, NULL);"], "Category": ["Logical Functions"], "index": 779, "vector_txt": "779:Feature: or(val1, val2...)\nDescription: orCalculates the logical disjunction of two or more values.Setting short_circuit_function_evaluation controls whether short-circuit evaluation is used. If enabled, val_i is evaluated only if ((NOT val_1) AND (NOT val_2) AND ... AND (NOT val_{i-1})) is true. For example, with short-circuit evaluation, no division-by-zero exception is thrown when executing the query SELECT or(number = 0, intDiv(1, number) != 0) FROM numbers(5).Syntaxor(val1, val2...)Alias: The OR operator.Argumentsval1, val2, ... \u2014 List of at least two values. Int, UInt, Float or Nullable.Returned value1, if at least one argument evaluates to true,0, if all arguments evaluate to false,NULL, if all arguments evaluate to false and at least one argument is NULL.Type: UInt8 or Nullable(UInt8).\nExamples: SELECT or(1, 0, 0, 2, NULL);SELECT or(0, NULL);\nCategory: Logical Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayDotProduct"], "Feature": ["arrayDotProduct(vector1, vector2)"], "Description": ["arrayDotProduct", "Returns the dot product of two arrays.", "Syntax", "arrayDotProduct(vector1, vector2)", "Alias: scalarProduct, dotProduct", "Parameters", "vector1: First vector. Array or Tuple of numeric values.vector2: Second vector. Array or Tuple of numeric values.", "NoteThe sizes of the two vectors must be equal. Arrays and Tuples may also contain mixed element types.", "Returned value", "The dot product of the two vectors. Numeric.", "NoteThe return type is determined by the type of the arguments. If Arrays or Tuples contain mixed element types then the result type is the supertype."], "Examples": ["SELECT arrayDotProduct([1, 2, 3], [4, 5, 6]) AS res, toTypeName(res);", "SELECT dotProduct((1::UInt16, 2::UInt8, 3::Float32),(4::Int16, 5::Float32, 6::UInt8)) AS res, toTypeName(res);"], "Category": ["Arrays Functions"], "index": 780, "vector_txt": "780:Feature: arrayDotProduct(vector1, vector2)\nDescription: arrayDotProductReturns the dot product of two arrays.SyntaxarrayDotProduct(vector1, vector2)Alias: scalarProduct, dotProductParametersvector1: First vector. Array or Tuple of numeric values.vector2: Second vector. Array or Tuple of numeric values.NoteThe sizes of the two vectors must be equal. Arrays and Tuples may also contain mixed element types.Returned valueThe dot product of the two vectors. Numeric.NoteThe return type is determined by the type of the arguments. If Arrays or Tuples contain mixed element types then the result type is the supertype.\nExamples: SELECT arrayDotProduct([1, 2, 3], [4, 5, 6]) AS res, toTypeName(res);SELECT dotProduct((1::UInt16, 2::UInt8, 3::Float32),(4::Int16, 5::Float32, 6::UInt8)) AS res, toTypeName(res);\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/logical-functions"], "Title": ["not"], "Feature": ["not(val);"], "Description": ["not", "Calculates the logical negation of a value.", "Syntax", "not(val);", "Alias: The Negation operator.", "Arguments", "val \u2014 The value. Int, UInt, Float or Nullable.", "Returned value", "1, if val evaluates to false,0, if val evaluates to true,NULL, if val is NULL.", "Type: UInt8 or Nullable(UInt8)."], "Examples": ["SELECT NOT(1);"], "Category": ["Logical Functions"], "index": 781, "vector_txt": "781:Feature: not(val);\nDescription: notCalculates the logical negation of a value.Syntaxnot(val);Alias: The Negation operator.Argumentsval \u2014 The value. Int, UInt, Float or Nullable.Returned value1, if val evaluates to false,0, if val evaluates to true,NULL, if val is NULL.Type: UInt8 or Nullable(UInt8).\nExamples: SELECT NOT(1);\nCategory: Logical Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/logical-functions"], "Title": ["xor"], "Feature": ["xor(val1, val2...)"], "Description": ["xor", "Calculates the logical exclusive disjunction of two or more values. For more than two input values, the function first xor-s the first two values, then xor-s the result with the third value etc.", "Syntax", "xor(val1, val2...)", "Arguments", "val1, val2, ... \u2014 List of at least two values. Int, UInt, Float or Nullable.", "Returned value", "1, for two values: if one of the values evaluates to false and other does not,0, for two values: if both values evaluate to false or to both true,NULL, if at least one of the inputs is NULL", "Type: UInt8 or Nullable(UInt8)."], "Examples": ["SELECT xor(0, 1, 1);"], "Category": ["Logical Functions"], "index": 782, "vector_txt": "782:Feature: xor(val1, val2...)\nDescription: xorCalculates the logical exclusive disjunction of two or more values. For more than two input values, the function first xor-s the first two values, then xor-s the result with the third value etc.Syntaxxor(val1, val2...)Argumentsval1, val2, ... \u2014 List of at least two values. Int, UInt, Float or Nullable.Returned value1, for two values: if one of the values evaluates to false and other does not,0, for two values: if both values evaluate to false or to both true,NULL, if at least one of the inputs is NULLType: UInt8 or Nullable(UInt8).\nExamples: SELECT xor(0, 1, 1);\nCategory: Logical Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-map-functions"], "Title": ["map"], "Feature": ["map(key1, value1[, key2, value2, ...])"], "Description": ["map", "Creates a value of type Map(key, value) from key-value pairs.", "Syntax", "map(key1, value1[, key2, value2, ...])", "Arguments", "key_n \u2014 The keys of the map entries. Any type supported as key type of Map.value_n \u2014 The values of the map entries. Any type supported as value type of Map.", "Returned value", "A map containing key:value pairs. Map(key, value)."], "Examples": ["SELECT map('key1', number, 'key2', number * 2) FROM numbers(3);"], "Category": ["Maps Functions"], "index": 783, "vector_txt": "783:Feature: map(key1, value1[, key2, value2, ...])\nDescription: mapCreates a value of type Map(key, value) from key-value pairs.Syntaxmap(key1, value1[, key2, value2, ...])Argumentskey_n \u2014 The keys of the map entries. Any type supported as key type of Map.value_n \u2014 The values of the map entries. Any type supported as value type of Map.Returned valueA map containing key:value pairs. Map(key, value).\nExamples: SELECT map('key1', number, 'key2', number * 2) FROM numbers(3);\nCategory: Maps Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-map-functions"], "Title": ["mapFromArrays"], "Feature": ["mapFromArrays(keys, values)"], "Description": ["mapFromArrays", "Creates a map from an array or map of keys and an array or map of values.", "The function is a convenient alternative to syntax CAST([...], 'Map(key_type, value_type)').\nFor example, instead of writing", "CAST((['aa', 'bb'], [4, 5]), 'Map(String, UInt32)'), orCAST([('aa',4), ('bb',5)], 'Map(String, UInt32)')", "you can write mapFromArrays(['aa', 'bb'], [4, 5]).", "Syntax", "mapFromArrays(keys, values)", "Alias: MAP_FROM_ARRAYS(keys, values)", "Arguments", "keys \u2014  Array or map of keys to create the map from Array or Map. If keys is an array, we accept Array(Nullable(T)) or Array(LowCardinality(Nullable(T))) as its type as long as it doesn't contain NULL value.values  - Array or map of values to create the map from Array or Map.", "Returned value", "A map with keys and values constructed from the key array and value array/map."], "Examples": ["select mapFromArrays(['a', 'b', 'c'], [1, 2, 3])", "SELECT mapFromArrays([1, 2, 3], map('a', 1, 'b', 2, 'c', 3))", "SELECT mapFromArrays(map('a', 1, 'b', 2, 'c', 3), [1, 2, 3])"], "Category": ["Maps Functions"], "index": 784, "vector_txt": "784:Feature: mapFromArrays(keys, values)\nDescription: mapFromArraysCreates a map from an array or map of keys and an array or map of values.The function is a convenient alternative to syntax CAST([...], 'Map(key_type, value_type)').\nFor example, instead of writingCAST((['aa', 'bb'], [4, 5]), 'Map(String, UInt32)'), orCAST([('aa',4), ('bb',5)], 'Map(String, UInt32)')you can write mapFromArrays(['aa', 'bb'], [4, 5]).SyntaxmapFromArrays(keys, values)Alias: MAP_FROM_ARRAYS(keys, values)Argumentskeys \u2014  Array or map of keys to create the map from Array or Map. If keys is an array, we accept Array(Nullable(T)) or Array(LowCardinality(Nullable(T))) as its type as long as it doesn't contain NULL value.values  - Array or map of values to create the map from Array or Map.Returned valueA map with keys and values constructed from the key array and value array/map.\nExamples: select mapFromArrays(['a', 'b', 'c'], [1, 2, 3])SELECT mapFromArrays([1, 2, 3], map('a', 1, 'b', 2, 'c', 3))SELECT mapFromArrays(map('a', 1, 'b', 2, 'c', 3), [1, 2, 3])\nCategory: Maps Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-map-functions"], "Title": ["extractKeyValuePairs"], "Feature": ["extractKeyValuePairs(data[, key_value_delimiter[, pair_delimiter[, quoting_character]]])"], "Description": ["extractKeyValuePairs", "Converts a string of key-value pairs to a Map(String, String).\nParsing is tolerant towards noise (e.g. log files).\nKey-value pairs in the input string consist of a key, followed by a key-value delimiter, and a value.\nKey value pairs are separated by a pair delimiter.\nKeys and values can be quoted.", "Syntax", "extractKeyValuePairs(data[, key_value_delimiter[, pair_delimiter[, quoting_character]]])", "Alias:", "str_to_mapmapFromString", "Arguments", "data - String to extract key-value pairs from. String or FixedString.key_value_delimiter - Single character delimiting keys and values. Defaults to :. String or FixedString.pair_delimiters - Set of character delimiting pairs. Defaults to  , , and ;. String or FixedString.quoting_character - Single character used as quoting character. Defaults to \". String or FixedString.", "Returned values", "A of key-value pairs. Type: Map(String, String) "], "Examples": ["SELECT extractKeyValuePairs('name:neymar, age:31 team:psg,nationality:brazil') as kv", "SELECT extractKeyValuePairs('name:\\'neymar\\';\\'age\\':31;team:psg;nationality:brazil,last_key:last_value', ':', ';,', '\\'') as kv", "SELECT extractKeyValuePairs('age:a\\\\x0A\\\\n\\\\0') AS kv", "SELECT    map('John', '33', 'Paula', '31') AS m,    toString(m) as map_serialized,    extractKeyValuePairs(map_serialized, ':', ',', '\\'') AS map_restoredFORMAT Vertical;"], "Category": ["Maps Functions"], "index": 785, "vector_txt": "785:Feature: extractKeyValuePairs(data[, key_value_delimiter[, pair_delimiter[, quoting_character]]])\nDescription: extractKeyValuePairsConverts a string of key-value pairs to a Map(String, String).\nParsing is tolerant towards noise (e.g. log files).\nKey-value pairs in the input string consist of a key, followed by a key-value delimiter, and a value.\nKey value pairs are separated by a pair delimiter.\nKeys and values can be quoted.SyntaxextractKeyValuePairs(data[, key_value_delimiter[, pair_delimiter[, quoting_character]]])Alias:str_to_mapmapFromStringArgumentsdata - String to extract key-value pairs from. String or FixedString.key_value_delimiter - Single character delimiting keys and values. Defaults to :. String or FixedString.pair_delimiters - Set of character delimiting pairs. Defaults to  , , and ;. String or FixedString.quoting_character - Single character used as quoting character. Defaults to \". String or FixedString.Returned valuesA of key-value pairs. Type: Map(String, String) \nExamples: SELECT extractKeyValuePairs('name:neymar, age:31 team:psg,nationality:brazil') as kvSELECT extractKeyValuePairs('name:\\'neymar\\';\\'age\\':31;team:psg;nationality:brazil,last_key:last_value', ':', ';,', '\\'') as kvSELECT extractKeyValuePairs('age:a\\\\x0A\\\\n\\\\0') AS kvSELECT    map('John', '33', 'Paula', '31') AS m,    toString(m) as map_serialized,    extractKeyValuePairs(map_serialized, ':', ',', '\\'') AS map_restoredFORMAT Vertical;\nCategory: Maps Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-map-functions"], "Title": ["extractKeyValuePairsWithEscaping"], "Feature": ["extractKeyValuePairsWithEscaping"], "Description": ["extractKeyValuePairsWithEscaping", "Same as extractKeyValuePairs but supports escaping.", "Supported escape sequences: \\x, \\N, \\a, \\b, \\e, \\f, \\n, \\r, \\t, \\v and \\0.\nNon standard escape sequences are returned as it is (including the backslash) unless they are one of the following:\n\\\\, ', \", backtick, /, = or ASCII control characters (c <= 31).", "This function will satisfy the use case where pre-escaping and post-escaping are not suitable. For instance, consider the following\ninput string: a: \"aaaa\\\"bbb\". The expected output is: a: aaaa\\\"bbbb.", "Pre-escaping: Pre-escaping it will output: a: \"aaaa\"bbb\" and extractKeyValuePairs will then output: a: aaaaPost-escaping: extractKeyValuePairs will output a: aaaa\\ and post-escaping will keep it as it is.", "Leading escape sequences will be skipped in keys and will be considered invalid for values."], "Examples": ["SELECT extractKeyValuePairsWithEscaping('age:a\\\\x0A\\\\n\\\\0') AS kv"], "Category": ["Maps Functions"], "index": 786, "vector_txt": "786:Feature: extractKeyValuePairsWithEscaping\nDescription: extractKeyValuePairsWithEscapingSame as extractKeyValuePairs but supports escaping.Supported escape sequences: \\x, \\N, \\a, \\b, \\e, \\f, \\n, \\r, \\t, \\v and \\0.\nNon standard escape sequences are returned as it is (including the backslash) unless they are one of the following:\n\\\\, ', \", backtick, /, = or ASCII control characters (c <= 31).This function will satisfy the use case where pre-escaping and post-escaping are not suitable. For instance, consider the following\ninput string: a: \"aaaa\\\"bbb\". The expected output is: a: aaaa\\\"bbbb.Pre-escaping: Pre-escaping it will output: a: \"aaaa\"bbb\" and extractKeyValuePairs will then output: a: aaaaPost-escaping: extractKeyValuePairs will output a: aaaa\\ and post-escaping will keep it as it is.Leading escape sequences will be skipped in keys and will be considered invalid for values.\nExamples: SELECT extractKeyValuePairsWithEscaping('age:a\\\\x0A\\\\n\\\\0') AS kv\nCategory: Maps Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-map-functions"], "Title": ["mapAdd"], "Feature": ["mapAdd(arg1, arg2 [, ...])"], "Description": ["mapAdd", "Collect all the keys and sum corresponding values.", "Syntax", "mapAdd(arg1, arg2 [, ...])", "Arguments", "Arguments are maps or tuples of two arrays, where items in the first array represent keys, and the second array contains values for the each key. All key arrays should have same type, and all value arrays should contain items which are promoted to the one type (Int64, UInt64 or Float64). The common promoted type is used as a type for the result array.", "Returned value", "Depending on the arguments returns one map or tuple, where the first array contains the sorted keys and the second array contains values."], "Examples": ["SELECT mapAdd(map(1,1), map(1,1));", "SELECT mapAdd(([toUInt8(1), 2], [1, 1]), ([toUInt8(1), 2], [1, 1])) as res, toTypeName(res) as type;"], "Category": ["Maps Functions"], "index": 787, "vector_txt": "787:Feature: mapAdd(arg1, arg2 [, ...])\nDescription: mapAddCollect all the keys and sum corresponding values.SyntaxmapAdd(arg1, arg2 [, ...])ArgumentsArguments are maps or tuples of two arrays, where items in the first array represent keys, and the second array contains values for the each key. All key arrays should have same type, and all value arrays should contain items which are promoted to the one type (Int64, UInt64 or Float64). The common promoted type is used as a type for the result array.Returned valueDepending on the arguments returns one map or tuple, where the first array contains the sorted keys and the second array contains values.\nExamples: SELECT mapAdd(map(1,1), map(1,1));SELECT mapAdd(([toUInt8(1), 2], [1, 1]), ([toUInt8(1), 2], [1, 1])) as res, toTypeName(res) as type;\nCategory: Maps Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-map-functions"], "Title": ["mapSubtract"], "Feature": ["mapSubtract(Tuple(Array, Array), Tuple(Array, Array) [, ...])"], "Description": ["mapSubtract", "Collect all the keys and subtract corresponding values.", "Syntax", "mapSubtract(Tuple(Array, Array), Tuple(Array, Array) [, ...])", "Arguments", "Arguments are maps or tuples of two arrays, where items in the first array represent keys, and the second array contains values for the each key. All key arrays should have same type, and all value arrays should contain items which are promote to the one type (Int64, UInt64 or Float64). The common promoted type is used as a type for the result array.", "Returned value", "Depending on the arguments returns one map or tuple, where the first array contains the sorted keys and the second array contains values."], "Examples": ["SELECT mapSubtract(map(1,1), map(1,1));", "SELECT mapSubtract(([toUInt8(1), 2], [toInt32(1), 1]), ([toUInt8(1), 2], [toInt32(2), 1])) as res, toTypeName(res) as type;"], "Category": ["Maps Functions"], "index": 788, "vector_txt": "788:Feature: mapSubtract(Tuple(Array, Array), Tuple(Array, Array) [, ...])\nDescription: mapSubtractCollect all the keys and subtract corresponding values.SyntaxmapSubtract(Tuple(Array, Array), Tuple(Array, Array) [, ...])ArgumentsArguments are maps or tuples of two arrays, where items in the first array represent keys, and the second array contains values for the each key. All key arrays should have same type, and all value arrays should contain items which are promote to the one type (Int64, UInt64 or Float64). The common promoted type is used as a type for the result array.Returned valueDepending on the arguments returns one map or tuple, where the first array contains the sorted keys and the second array contains values.\nExamples: SELECT mapSubtract(map(1,1), map(1,1));SELECT mapSubtract(([toUInt8(1), 2], [toInt32(1), 1]), ([toUInt8(1), 2], [toInt32(2), 1])) as res, toTypeName(res) as type;\nCategory: Maps Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-map-functions"], "Title": ["mapPopulateSeries"], "Feature": ["mapPopulateSeries(map[, max])mapPopulateSeries(keys, values[, max])"], "Description": ["mapPopulateSeries", "Fills missing key-value pairs in a map with integer keys.\nTo support extending the keys beyond the largest value, a maximum key can be specified.\nMore specifically, the function returns a map in which the the keys form a series from the smallest to the largest key (or max argument if it specified) with step size of 1, and corresponding values.\nIf no value is specified for a key, a default value is used as value.\nIn case keys repeat, only the first value (in order of appearance) is associated with the key.", "Syntax", "mapPopulateSeries(map[, max])mapPopulateSeries(keys, values[, max])", "For array arguments the number of elements in keys and values must be the same for each row.", "Arguments", "Arguments are Maps or two Arrays, where the first and second array contains keys and values for the each key.", "Mapped arrays:", "map \u2014 Map with integer keys. Map.", "or", "keys \u2014 Array of keys. Array(Int).values \u2014 Array of values. Array(Int).max \u2014 Maximum key value. Optional. Int8, Int16, Int32, Int64, Int128, Int256.", "Returned value", "Depending on the arguments a Map or a Tuple of two Arrays: keys in sorted order, and values the corresponding keys."], "Examples": ["SELECT mapPopulateSeries(map(1, 10, 5, 20), 6);", "SELECT mapPopulateSeries([1,2,4], [11,22,44], 5) AS res, toTypeName(res) AS type;"], "Category": ["Maps Functions"], "index": 789, "vector_txt": "789:Feature: mapPopulateSeries(map[, max])mapPopulateSeries(keys, values[, max])\nDescription: mapPopulateSeriesFills missing key-value pairs in a map with integer keys.\nTo support extending the keys beyond the largest value, a maximum key can be specified.\nMore specifically, the function returns a map in which the the keys form a series from the smallest to the largest key (or max argument if it specified) with step size of 1, and corresponding values.\nIf no value is specified for a key, a default value is used as value.\nIn case keys repeat, only the first value (in order of appearance) is associated with the key.SyntaxmapPopulateSeries(map[, max])mapPopulateSeries(keys, values[, max])For array arguments the number of elements in keys and values must be the same for each row.ArgumentsArguments are Maps or two Arrays, where the first and second array contains keys and values for the each key.Mapped arrays:map \u2014 Map with integer keys. Map.orkeys \u2014 Array of keys. Array(Int).values \u2014 Array of values. Array(Int).max \u2014 Maximum key value. Optional. Int8, Int16, Int32, Int64, Int128, Int256.Returned valueDepending on the arguments a Map or a Tuple of two Arrays: keys in sorted order, and values the corresponding keys.\nExamples: SELECT mapPopulateSeries(map(1, 10, 5, 20), 6);SELECT mapPopulateSeries([1,2,4], [11,22,44], 5) AS res, toTypeName(res) AS type;\nCategory: Maps Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-map-functions"], "Title": ["mapContains"], "Feature": ["mapContains(map, key)"], "Description": ["mapContains", "Returns if a given key is contained in a given map.", "Syntax", "mapContains(map, key)", "Arguments", "map \u2014 Map. Map.key \u2014 Key. Type must match the key type of map.", "Returned value", "1 if map contains key, 0 if not. UInt8."], "Examples": ["CREATE TABLE tab (a Map(String, String)) ENGINE = Memory;INSERT INTO tab VALUES ({'name':'eleven','age':'11'}), ({'number':'twelve','position':'6.0'});SELECT mapContains(a, 'name') FROM tab;"], "Category": ["Maps Functions"], "index": 790, "vector_txt": "790:Feature: mapContains(map, key)\nDescription: mapContainsReturns if a given key is contained in a given map.SyntaxmapContains(map, key)Argumentsmap \u2014 Map. Map.key \u2014 Key. Type must match the key type of map.Returned value1 if map contains key, 0 if not. UInt8.\nExamples: CREATE TABLE tab (a Map(String, String)) ENGINE = Memory;INSERT INTO tab VALUES ({'name':'eleven','age':'11'}), ({'number':'twelve','position':'6.0'});SELECT mapContains(a, 'name') FROM tab;\nCategory: Maps Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["countEqual(arr, x)"], "Feature": ["countEqual(arr, x)"], "Description": ["countEqual(arr, x)", "Returns the number of elements in the array equal to x. Equivalent to arrayCount (elem -> elem = x, arr).", "NULL elements are handled as separate values."], "Examples": ["SELECT countEqual([1, 2, NULL, NULL], NULL)"], "Category": ["Arrays Functions"], "index": 791, "vector_txt": "791:Feature: countEqual(arr, x)\nDescription: countEqual(arr, x)Returns the number of elements in the array equal to x. Equivalent to arrayCount (elem -> elem = x, arr).NULL elements are handled as separate values.\nExamples: SELECT countEqual([1, 2, NULL, NULL], NULL)\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-map-functions"], "Title": ["mapKeys"], "Feature": ["mapKeys(map)"], "Description": ["mapKeys", "Returns the keys of a given map.", "This function can be optimized by enabling setting optimize_functions_to_subcolumns.\nWith enabled setting, the function only reads the keys subcolumn instead the whole map.\nThe query SELECT mapKeys(m) FROM table is transformed to SELECT m.keys FROM table.", "Syntax", "mapKeys(map)", "Arguments", "map \u2014 Map. Map.", "Returned value", "Array containing all keys from the map. Array."], "Examples": ["CREATE TABLE tab (a Map(String, String)) ENGINE = Memory;INSERT INTO tab VALUES ({'name':'eleven','age':'11'}), ({'number':'twelve','position':'6.0'});SELECT mapKeys(a) FROM tab;"], "Category": ["Maps Functions"], "index": 792, "vector_txt": "792:Feature: mapKeys(map)\nDescription: mapKeysReturns the keys of a given map.This function can be optimized by enabling setting optimize_functions_to_subcolumns.\nWith enabled setting, the function only reads the keys subcolumn instead the whole map.\nThe query SELECT mapKeys(m) FROM table is transformed to SELECT m.keys FROM table.SyntaxmapKeys(map)Argumentsmap \u2014 Map. Map.Returned valueArray containing all keys from the map. Array.\nExamples: CREATE TABLE tab (a Map(String, String)) ENGINE = Memory;INSERT INTO tab VALUES ({'name':'eleven','age':'11'}), ({'number':'twelve','position':'6.0'});SELECT mapKeys(a) FROM tab;\nCategory: Maps Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-map-functions"], "Title": ["mapValues"], "Feature": ["mapValues(map)"], "Description": ["mapValues", "Returns the values of a given map.", "This function can be optimized by enabling setting optimize_functions_to_subcolumns.\nWith enabled setting, the function only reads the values subcolumn instead the whole map.\nThe query SELECT mapValues(m) FROM table is transformed to SELECT m.values FROM table.", "Syntax", "mapValues(map)", "Arguments", "map \u2014 Map. Map.", "Returned value", "Array containing all the values from map. Array."], "Examples": ["CREATE TABLE tab (a Map(String, String)) ENGINE = Memory;INSERT INTO tab VALUES ({'name':'eleven','age':'11'}), ({'number':'twelve','position':'6.0'});SELECT mapValues(a) FROM tab;"], "Category": ["Maps Functions"], "index": 793, "vector_txt": "793:Feature: mapValues(map)\nDescription: mapValuesReturns the values of a given map.This function can be optimized by enabling setting optimize_functions_to_subcolumns.\nWith enabled setting, the function only reads the values subcolumn instead the whole map.\nThe query SELECT mapValues(m) FROM table is transformed to SELECT m.values FROM table.SyntaxmapValues(map)Argumentsmap \u2014 Map. Map.Returned valueArray containing all the values from map. Array.\nExamples: CREATE TABLE tab (a Map(String, String)) ENGINE = Memory;INSERT INTO tab VALUES ({'name':'eleven','age':'11'}), ({'number':'twelve','position':'6.0'});SELECT mapValues(a) FROM tab;\nCategory: Maps Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-map-functions"], "Title": ["mapContainsKeyLike"], "Feature": ["mapContainsKeyLike(map, pattern)"], "Description": ["mapContainsKeyLike", "Syntax", "mapContainsKeyLike(map, pattern)", "Arguments", "map \u2014 Map. Map.pattern  - String pattern to match.", "Returned value", "1 if map contains key like specified pattern, 0 if not."], "Examples": ["CREATE TABLE tab (a Map(String, String)) ENGINE = Memory;INSERT INTO tab VALUES ({'abc':'abc','def':'def'}), ({'hij':'hij','klm':'klm'});SELECT mapContainsKeyLike(a, 'a%') FROM tab;"], "Category": ["Maps Functions"], "index": 794, "vector_txt": "794:Feature: mapContainsKeyLike(map, pattern)\nDescription: mapContainsKeyLikeSyntaxmapContainsKeyLike(map, pattern)Argumentsmap \u2014 Map. Map.pattern  - String pattern to match.Returned value1 if map contains key like specified pattern, 0 if not.\nExamples: CREATE TABLE tab (a Map(String, String)) ENGINE = Memory;INSERT INTO tab VALUES ({'abc':'abc','def':'def'}), ({'hij':'hij','klm':'klm'});SELECT mapContainsKeyLike(a, 'a%') FROM tab;\nCategory: Maps Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-map-functions"], "Title": ["mapExtractKeyLike"], "Feature": ["mapExtractKeyLike(map, pattern)"], "Description": ["mapExtractKeyLike", "Give a map with string keys and a LIKE pattern, this function returns a map with elements where the key matches the pattern.", "Syntax", "mapExtractKeyLike(map, pattern)", "Arguments", "map \u2014 Map. Map.pattern  - String pattern to match.", "Returned value", "A map containing elements the key matching the specified pattern. If no elements match the pattern, an empty map is returned."], "Examples": ["CREATE TABLE tab (a Map(String, String)) ENGINE = Memory;INSERT INTO tab VALUES ({'abc':'abc','def':'def'}), ({'hij':'hij','klm':'klm'});SELECT mapExtractKeyLike(a, 'a%') FROM tab;"], "Category": ["Maps Functions"], "index": 795, "vector_txt": "795:Feature: mapExtractKeyLike(map, pattern)\nDescription: mapExtractKeyLikeGive a map with string keys and a LIKE pattern, this function returns a map with elements where the key matches the pattern.SyntaxmapExtractKeyLike(map, pattern)Argumentsmap \u2014 Map. Map.pattern  - String pattern to match.Returned valueA map containing elements the key matching the specified pattern. If no elements match the pattern, an empty map is returned.\nExamples: CREATE TABLE tab (a Map(String, String)) ENGINE = Memory;INSERT INTO tab VALUES ({'abc':'abc','def':'def'}), ({'hij':'hij','klm':'klm'});SELECT mapExtractKeyLike(a, 'a%') FROM tab;\nCategory: Maps Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-map-functions"], "Title": ["mapApply"], "Feature": ["mapApply(func, map)"], "Description": ["mapApply", "Applies a function to each element of a map.", "Syntax", "mapApply(func, map)", "Arguments", "func \u2014 Lambda function.map \u2014 Map.", "Returned value", "Returns a map obtained from the original map by application of func(map1[i], ..., mapN[i]) for each element."], "Examples": ["SELECT mapApply((k, v) -> (k, v * 10), _map) AS rFROM(    SELECT map('key1', number, 'key2', number * 2) AS _map    FROM numbers(3))"], "Category": ["Maps Functions"], "index": 796, "vector_txt": "796:Feature: mapApply(func, map)\nDescription: mapApplyApplies a function to each element of a map.SyntaxmapApply(func, map)Argumentsfunc \u2014 Lambda function.map \u2014 Map.Returned valueReturns a map obtained from the original map by application of func(map1[i], ..., mapN[i]) for each element.\nExamples: SELECT mapApply((k, v) -> (k, v * 10), _map) AS rFROM(    SELECT map('key1', number, 'key2', number * 2) AS _map    FROM numbers(3))\nCategory: Maps Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-map-functions"], "Title": ["mapFilter"], "Feature": ["mapFilter(func, map)"], "Description": ["mapFilter", "Filters a map by applying a function to each map element.", "Syntax", "mapFilter(func, map)", "Arguments", "func  - Lambda function.map \u2014 Map.", "Returned value", "Returns a map containing only the elements in map for which func(map1[i], ..., mapN[i]) returns something other than 0."], "Examples": ["SELECT mapFilter((k, v) -> ((v % 2) = 0), _map) AS rFROM(    SELECT map('key1', number, 'key2', number * 2) AS _map    FROM numbers(3))"], "Category": ["Maps Functions"], "index": 797, "vector_txt": "797:Feature: mapFilter(func, map)\nDescription: mapFilterFilters a map by applying a function to each map element.SyntaxmapFilter(func, map)Argumentsfunc  - Lambda function.map \u2014 Map.Returned valueReturns a map containing only the elements in map for which func(map1[i], ..., mapN[i]) returns something other than 0.\nExamples: SELECT mapFilter((k, v) -> ((v % 2) = 0), _map) AS rFROM(    SELECT map('key1', number, 'key2', number * 2) AS _map    FROM numbers(3))\nCategory: Maps Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-map-functions"], "Title": ["mapUpdate"], "Feature": ["mapUpdate(map1, map2)"], "Description": ["mapUpdate", "Syntax", "mapUpdate(map1, map2)", "Arguments", "map1 Map.map2 Map.", "Returned value", "Returns a map1 with values updated of values for the corresponding keys in map2."], "Examples": ["SELECT mapUpdate(map('key1', 0, 'key3', 0), map('key1', 10, 'key2', 10)) AS map;"], "Category": ["Maps Functions"], "index": 798, "vector_txt": "798:Feature: mapUpdate(map1, map2)\nDescription: mapUpdateSyntaxmapUpdate(map1, map2)Argumentsmap1 Map.map2 Map.Returned valueReturns a map1 with values updated of values for the corresponding keys in map2.\nExamples: SELECT mapUpdate(map('key1', 0, 'key3', 0), map('key1', 10, 'key2', 10)) AS map;\nCategory: Maps Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-map-functions"], "Title": ["mapConcat"], "Feature": ["mapConcat(maps)"], "Description": ["mapConcat", "Concatenates multiple maps based on the equality of their keys.\nIf elements with the same key exist in more than one input map, all elements are added to the result map, but only the first one is accessible via operator []", "Syntax", "mapConcat(maps)", "Arguments", "maps \u2013 Arbitrarily many Maps.", "Returned value", "Returns a map with concatenated maps passed as arguments."], "Examples": ["SELECT mapConcat(map('key1', 1, 'key3', 3), map('key2', 2)) AS map;", "SELECT mapConcat(map('key1', 1, 'key2', 2), map('key1', 3)) AS map, map['key1'];"], "Category": ["Maps Functions"], "index": 799, "vector_txt": "799:Feature: mapConcat(maps)\nDescription: mapConcatConcatenates multiple maps based on the equality of their keys.\nIf elements with the same key exist in more than one input map, all elements are added to the result map, but only the first one is accessible via operator []SyntaxmapConcat(maps)Argumentsmaps \u2013 Arbitrarily many Maps.Returned valueReturns a map with concatenated maps passed as arguments.\nExamples: SELECT mapConcat(map('key1', 1, 'key3', 3), map('key2', 2)) AS map;SELECT mapConcat(map('key1', 1, 'key2', 2), map('key1', 3)) AS map, map['key1'];\nCategory: Maps Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-map-functions"], "Title": ["mapExists([func,], map)"], "Feature": ["mapExists([func,], map)"], "Description": ["mapExists([func,], map)", "Returns 1 if at least one key-value pair in map exists for which func(key, value) returns something other than 0. Otherwise, it returns 0.", "NotemapExists is a higher-order function.\nYou can pass a lambda function to it as the first argument."], "Examples": ["SELECT mapExists((k, v) -> (v = 1), map('k1', 1, 'k2', 2)) AS res"], "Category": ["Maps Functions"], "index": 800, "vector_txt": "800:Feature: mapExists([func,], map)\nDescription: mapExists([func,], map)Returns 1 if at least one key-value pair in map exists for which func(key, value) returns something other than 0. Otherwise, it returns 0.NotemapExists is a higher-order function.\nYou can pass a lambda function to it as the first argument.\nExamples: SELECT mapExists((k, v) -> (v = 1), map('k1', 1, 'k2', 2)) AS res\nCategory: Maps Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-map-functions"], "Title": ["mapAll([func,] map)"], "Feature": ["mapAll([func,] map)"], "Description": ["mapAll([func,] map)", "Returns 1 if func(key, value) returns something other than 0 for all key-value pairs in map. Otherwise, it returns 0.", "NoteNote that the mapAll is a higher-order function.\nYou can pass a lambda function to it as the first argument."], "Examples": ["SELECT mapAll((k, v) -> (v = 1), map('k1', 1, 'k2', 2)) AS res"], "Category": ["Maps Functions"], "index": 801, "vector_txt": "801:Feature: mapAll([func,] map)\nDescription: mapAll([func,] map)Returns 1 if func(key, value) returns something other than 0 for all key-value pairs in map. Otherwise, it returns 0.NoteNote that the mapAll is a higher-order function.\nYou can pass a lambda function to it as the first argument.\nExamples: SELECT mapAll((k, v) -> (v = 1), map('k1', 1, 'k2', 2)) AS res\nCategory: Maps Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayEnumerate(arr)"], "Feature": ["arrayEnumerate(arr)"], "Description": ["arrayEnumerate(arr)", "Returns the array [1, 2, 3, ..., length (arr) ]", "This function is normally used with ARRAY JOIN. It allows counting something just once for each array after applying ARRAY JOIN. Example:", "SELECT    count() AS Reaches,    countIf(num = 1) AS HitsFROM test.hitsARRAY JOIN    GoalsReached,    arrayEnumerate(GoalsReached) AS numWHERE CounterID = 160656LIMIT 10", "\u250c\u2500Reaches\u2500\u252c\u2500\u2500Hits\u2500\u2510\u2502   95606 \u2502 31406 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "In this example, Reaches is the number of conversions (the strings received after applying ARRAY JOIN), and Hits is the number of pageviews (strings before ARRAY JOIN). In this particular case, you can get the same result in an easier way:", "SELECT    sum(length(GoalsReached)) AS Reaches,    count() AS HitsFROM test.hitsWHERE (CounterID = 160656) AND notEmpty(GoalsReached)", "\u250c\u2500Reaches\u2500\u252c\u2500\u2500Hits\u2500\u2510\u2502   95606 \u2502 31406 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "This function can also be used in higher-order functions. For example, you can use it to get array indexes for elements that match a condition."], "Examples": ["SELECT    count() AS Reaches,    countIf(num = 1) AS HitsFROM test.hitsARRAY JOIN    GoalsReached,    arrayEnumerate(GoalsReached) AS numWHERE CounterID = 160656LIMIT 10", "SELECT    sum(length(GoalsReached)) AS Reaches,    count() AS HitsFROM test.hitsWHERE (CounterID = 160656) AND notEmpty(GoalsReached)"], "Category": ["Arrays Functions"], "index": 802, "vector_txt": "802:Feature: arrayEnumerate(arr)\nDescription: arrayEnumerate(arr)Returns the array [1, 2, 3, ..., length (arr) ]This function is normally used with ARRAY JOIN. It allows counting something just once for each array after applying ARRAY JOIN. Example:SELECT    count() AS Reaches,    countIf(num = 1) AS HitsFROM test.hitsARRAY JOIN    GoalsReached,    arrayEnumerate(GoalsReached) AS numWHERE CounterID = 160656LIMIT 10\u250c\u2500Reaches\u2500\u252c\u2500\u2500Hits\u2500\u2510\u2502   95606 \u2502 31406 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518In this example, Reaches is the number of conversions (the strings received after applying ARRAY JOIN), and Hits is the number of pageviews (strings before ARRAY JOIN). In this particular case, you can get the same result in an easier way:SELECT    sum(length(GoalsReached)) AS Reaches,    count() AS HitsFROM test.hitsWHERE (CounterID = 160656) AND notEmpty(GoalsReached)\u250c\u2500Reaches\u2500\u252c\u2500\u2500Hits\u2500\u2510\u2502   95606 \u2502 31406 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518This function can also be used in higher-order functions. For example, you can use it to get array indexes for elements that match a condition.\nExamples: SELECT    count() AS Reaches,    countIf(num = 1) AS HitsFROM test.hitsARRAY JOIN    GoalsReached,    arrayEnumerate(GoalsReached) AS numWHERE CounterID = 160656LIMIT 10SELECT    sum(length(GoalsReached)) AS Reaches,    count() AS HitsFROM test.hitsWHERE (CounterID = 160656) AND notEmpty(GoalsReached)\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-map-functions"], "Title": ["mapSort([func,], map)"], "Feature": ["mapSort([func,], map)"], "Description": ["mapSort([func,], map)", "Sorts the elements of a map in ascending order.\nIf the func function is specified, the sorting order is determined by the result of the func function applied to the keys and values of the map."], "Examples": ["SELECT mapSort(map('key2', 2, 'key3', 1, 'key1', 3)) AS map;", "SELECT mapSort((k, v) -> v, map('key2', 2, 'key3', 1, 'key1', 3)) AS map;"], "Category": ["Maps Functions"], "index": 803, "vector_txt": "803:Feature: mapSort([func,], map)\nDescription: mapSort([func,], map)Sorts the elements of a map in ascending order.\nIf the func function is specified, the sorting order is determined by the result of the func function applied to the keys and values of the map.\nExamples: SELECT mapSort(map('key2', 2, 'key3', 1, 'key1', 3)) AS map;SELECT mapSort((k, v) -> v, map('key2', 2, 'key3', 1, 'key1', 3)) AS map;\nCategory: Maps Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-map-functions"], "Title": ["mapPartialSort"], "Feature": ["mapPartialSort([func,] limit, map)"], "Description": ["mapPartialSort", "Sorts the elements of a map in ascending order with additional limit argument allowing partial sorting.\nIf the func function is specified, the sorting order is determined by the result of the func function applied to the keys and values of the map.", "Syntax", "mapPartialSort([func,] limit, map)", "Arguments", "func \u2013 Optional function to apply to the keys and values of the map. Lambda function.limit \u2013 Elements in range [1..limit] are sorted. (U)Int.map \u2013 Map to sort. Map.", "Returned value", "Partially sorted map. Map."], "Examples": ["SELECT mapPartialSort((k, v) -> v, 2, map('k1', 3, 'k2', 1, 'k3', 2));"], "Category": ["Maps Functions"], "index": 804, "vector_txt": "804:Feature: mapPartialSort([func,] limit, map)\nDescription: mapPartialSortSorts the elements of a map in ascending order with additional limit argument allowing partial sorting.\nIf the func function is specified, the sorting order is determined by the result of the func function applied to the keys and values of the map.SyntaxmapPartialSort([func,] limit, map)Argumentsfunc \u2013 Optional function to apply to the keys and values of the map. Lambda function.limit \u2013 Elements in range [1..limit] are sorted. (U)Int.map \u2013 Map to sort. Map.Returned valuePartially sorted map. Map.\nExamples: SELECT mapPartialSort((k, v) -> v, 2, map('k1', 3, 'k2', 1, 'k3', 2));\nCategory: Maps Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-map-functions"], "Title": ["mapReverseSort([func,], map)"], "Feature": ["mapReverseSort([func,], map)"], "Description": ["mapReverseSort([func,], map)", "Sorts the elements of a map in descending order.\nIf the func function is specified, the sorting order is determined by the result of the func function applied to the keys and values of the map."], "Examples": ["SELECT mapReverseSort(map('key2', 2, 'key3', 1, 'key1', 3)) AS map;", "SELECT mapReverseSort((k, v) -> v, map('key2', 2, 'key3', 1, 'key1', 3)) AS map;"], "Category": ["Maps Functions"], "index": 805, "vector_txt": "805:Feature: mapReverseSort([func,], map)\nDescription: mapReverseSort([func,], map)Sorts the elements of a map in descending order.\nIf the func function is specified, the sorting order is determined by the result of the func function applied to the keys and values of the map.\nExamples: SELECT mapReverseSort(map('key2', 2, 'key3', 1, 'key1', 3)) AS map;SELECT mapReverseSort((k, v) -> v, map('key2', 2, 'key3', 1, 'key1', 3)) AS map;\nCategory: Maps Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-map-functions"], "Title": ["mapPartialReverseSort"], "Feature": ["mapPartialReverseSort([func,] limit, map)"], "Description": ["mapPartialReverseSort", "Sorts the elements of a map in descending order with additional limit argument allowing partial sorting.\nIf the func function is specified, the sorting order is determined by the result of the func function applied to the keys and values of the map.", "Syntax", "mapPartialReverseSort([func,] limit, map)", "Arguments", "func \u2013 Optional function to apply to the keys and values of the map. Lambda function.limit \u2013 Elements in range [1..limit] are sorted. (U)Int.map \u2013 Map to sort. Map.", "Returned value", "Partially sorted map. Map."], "Examples": ["SELECT mapPartialReverseSort((k, v) -> v, 2, map('k1', 3, 'k2', 1, 'k3', 2));"], "Category": ["Maps Functions"], "index": 806, "vector_txt": "806:Feature: mapPartialReverseSort([func,] limit, map)\nDescription: mapPartialReverseSortSorts the elements of a map in descending order with additional limit argument allowing partial sorting.\nIf the func function is specified, the sorting order is determined by the result of the func function applied to the keys and values of the map.SyntaxmapPartialReverseSort([func,] limit, map)Argumentsfunc \u2013 Optional function to apply to the keys and values of the map. Lambda function.limit \u2013 Elements in range [1..limit] are sorted. (U)Int.map \u2013 Map to sort. Map.Returned valuePartially sorted map. Map.\nExamples: SELECT mapPartialReverseSort((k, v) -> v, 2, map('k1', 3, 'k2', 1, 'k3', 2));\nCategory: Maps Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/math-functions"], "Title": ["e"], "Feature": ["e()"], "Description": ["e", "Returns eee (Euler's constant).", "Syntax", "e()", "Returned value", "Type: Float64."], "Examples": ["e()"], "Category": ["Mathematical Functions"], "index": 807, "vector_txt": "807:Feature: e()\nDescription: eReturns eee (Euler's constant).Syntaxe()Returned valueType: Float64.\nExamples: e()\nCategory: Mathematical Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/math-functions"], "Title": ["pi"], "Feature": ["pi()"], "Description": ["pi", "Returns \u03c0\\pi\u03c0 (Pi).", "Syntax", "pi()", "Returned value", "Type: Float64."], "Examples": ["pi()"], "Category": ["Mathematical Functions"], "index": 808, "vector_txt": "808:Feature: pi()\nDescription: piReturns \u03c0\\pi\u03c0 (Pi).Syntaxpi()Returned valueType: Float64.\nExamples: pi()\nCategory: Mathematical Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/math-functions"], "Title": ["exp"], "Feature": ["exp(x)"], "Description": ["exp", "Returns exe^{x}ex, where x is the given argument to the function.", "Syntax", "exp(x)", "Arguments", "x - (U)Int*, Float* or Decimal*."], "Examples": ["SELECT round(exp(-1), 4);"], "Category": ["Mathematical Functions"], "index": 809, "vector_txt": "809:Feature: exp(x)\nDescription: expReturns exe^{x}ex, where x is the given argument to the function.Syntaxexp(x)Argumentsx - (U)Int*, Float* or Decimal*.\nExamples: SELECT round(exp(-1), 4);\nCategory: Mathematical Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/math-functions"], "Title": ["log"], "Feature": ["log(x)"], "Description": ["log", "Returns the natural logarithm of the argument.", "Syntax", "log(x)", "Alias: ln(x)", "Arguments", "x - (U)Int*, Float* or Decimal*.", "Returned value", "Type: Float*."], "Examples": ["log(x)"], "Category": ["Mathematical Functions"], "index": 810, "vector_txt": "810:Feature: log(x)\nDescription: logReturns the natural logarithm of the argument.Syntaxlog(x)Alias: ln(x)Argumentsx - (U)Int*, Float* or Decimal*.Returned valueType: Float*.\nExamples: log(x)\nCategory: Mathematical Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/math-functions"], "Title": ["exp2"], "Feature": ["exp2(x)"], "Description": ["exp2", "Returns 2 to the power of the given argument", "Syntax", "exp2(x)", "Arguments", "x - (U)Int*, Float* or Decimal*.", "Returned value", "Type: Float*."], "Examples": ["exp2(x)"], "Category": ["Mathematical Functions"], "index": 811, "vector_txt": "811:Feature: exp2(x)\nDescription: exp2Returns 2 to the power of the given argumentSyntaxexp2(x)Argumentsx - (U)Int*, Float* or Decimal*.Returned valueType: Float*.\nExamples: exp2(x)\nCategory: Mathematical Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/math-functions"], "Title": ["intExp2"], "Feature": ["intExp2(x)"], "Description": ["intExp2", "Like exp but returns a UInt64.", "Syntax", "intExp2(x)"], "Examples": ["intExp2(x)"], "Category": ["Mathematical Functions"], "index": 812, "vector_txt": "812:Feature: intExp2(x)\nDescription: intExp2Like exp but returns a UInt64.SyntaxintExp2(x)\nExamples: intExp2(x)\nCategory: Mathematical Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayEnumerateUniq(arr, ...)"], "Feature": ["arrayEnumerateUniq(arr, ...)"], "Description": ["arrayEnumerateUniq(arr, ...)", "Returns an array the same size as the source array, indicating for each element what its position is among elements with the same value.\nFor example: arrayEnumerateUniq([10, 20, 10, 30]) = [1, 1, 2, 1].", "This function is useful when using ARRAY JOIN and aggregation of array elements.\nExample:", "SELECT    Goals.ID AS GoalID,    sum(Sign) AS Reaches,    sumIf(Sign, num = 1) AS VisitsFROM test.visitsARRAY JOIN    Goals,    arrayEnumerateUniq(Goals.ID) AS numWHERE CounterID = 160656GROUP BY GoalIDORDER BY Reaches DESCLIMIT 10", "\u250c\u2500\u2500GoalID\u2500\u252c\u2500Reaches\u2500\u252c\u2500Visits\u2500\u2510\u2502   53225 \u2502    3214 \u2502   1097 \u2502\u2502 2825062 \u2502    3188 \u2502   1097 \u2502\u2502   56600 \u2502    2803 \u2502    488 \u2502\u2502 1989037 \u2502    2401 \u2502    365 \u2502\u2502 2830064 \u2502    2396 \u2502    910 \u2502\u2502 1113562 \u2502    2372 \u2502    373 \u2502\u2502 3270895 \u2502    2262 \u2502    812 \u2502\u2502 1084657 \u2502    2262 \u2502    345 \u2502\u2502   56599 \u2502    2260 \u2502    799 \u2502\u2502 3271094 \u2502    2256 \u2502    812 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "In this example, each goal ID has a calculation of the number of conversions (each element in the Goals nested data structure is a goal that was reached, which we refer to as a conversion) and the number of sessions. Without ARRAY JOIN, we would have counted the number of sessions as sum(Sign). But in this particular case, the rows were multiplied by the nested Goals structure, so in order to count each session one time after this, we apply a condition to the value of the arrayEnumerateUniq(Goals.ID) function.", "The arrayEnumerateUniq function can take multiple arrays of the same size as arguments. In this case, uniqueness is considered for tuples of elements in the same positions in all the arrays.", "SELECT arrayEnumerateUniq([1, 1, 1, 2, 2, 2], [1, 1, 2, 1, 1, 2]) AS res", "\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 [1,2,1,1,2,1] \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "This is necessary when using ARRAY JOIN with a nested data structure and further aggregation across multiple elements in this structure."], "Examples": ["SELECT    Goals.ID AS GoalID,    sum(Sign) AS Reaches,    sumIf(Sign, num = 1) AS VisitsFROM test.visitsARRAY JOIN    Goals,    arrayEnumerateUniq(Goals.ID) AS numWHERE CounterID = 160656GROUP BY GoalIDORDER BY Reaches DESCLIMIT 10", "SELECT arrayEnumerateUniq([1, 1, 1, 2, 2, 2], [1, 1, 2, 1, 1, 2]) AS res"], "Category": ["Arrays Functions"], "index": 813, "vector_txt": "813:Feature: arrayEnumerateUniq(arr, ...)\nDescription: arrayEnumerateUniq(arr, ...)Returns an array the same size as the source array, indicating for each element what its position is among elements with the same value.\nFor example: arrayEnumerateUniq([10, 20, 10, 30]) = [1, 1, 2, 1].This function is useful when using ARRAY JOIN and aggregation of array elements.\nExample:SELECT    Goals.ID AS GoalID,    sum(Sign) AS Reaches,    sumIf(Sign, num = 1) AS VisitsFROM test.visitsARRAY JOIN    Goals,    arrayEnumerateUniq(Goals.ID) AS numWHERE CounterID = 160656GROUP BY GoalIDORDER BY Reaches DESCLIMIT 10\u250c\u2500\u2500GoalID\u2500\u252c\u2500Reaches\u2500\u252c\u2500Visits\u2500\u2510\u2502   53225 \u2502    3214 \u2502   1097 \u2502\u2502 2825062 \u2502    3188 \u2502   1097 \u2502\u2502   56600 \u2502    2803 \u2502    488 \u2502\u2502 1989037 \u2502    2401 \u2502    365 \u2502\u2502 2830064 \u2502    2396 \u2502    910 \u2502\u2502 1113562 \u2502    2372 \u2502    373 \u2502\u2502 3270895 \u2502    2262 \u2502    812 \u2502\u2502 1084657 \u2502    2262 \u2502    345 \u2502\u2502   56599 \u2502    2260 \u2502    799 \u2502\u2502 3271094 \u2502    2256 \u2502    812 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518In this example, each goal ID has a calculation of the number of conversions (each element in the Goals nested data structure is a goal that was reached, which we refer to as a conversion) and the number of sessions. Without ARRAY JOIN, we would have counted the number of sessions as sum(Sign). But in this particular case, the rows were multiplied by the nested Goals structure, so in order to count each session one time after this, we apply a condition to the value of the arrayEnumerateUniq(Goals.ID) function.The arrayEnumerateUniq function can take multiple arrays of the same size as arguments. In this case, uniqueness is considered for tuples of elements in the same positions in all the arrays.SELECT arrayEnumerateUniq([1, 1, 1, 2, 2, 2], [1, 1, 2, 1, 1, 2]) AS res\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 [1,2,1,1,2,1] \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518This is necessary when using ARRAY JOIN with a nested data structure and further aggregation across multiple elements in this structure.\nExamples: SELECT    Goals.ID AS GoalID,    sum(Sign) AS Reaches,    sumIf(Sign, num = 1) AS VisitsFROM test.visitsARRAY JOIN    Goals,    arrayEnumerateUniq(Goals.ID) AS numWHERE CounterID = 160656GROUP BY GoalIDORDER BY Reaches DESCLIMIT 10SELECT arrayEnumerateUniq([1, 1, 1, 2, 2, 2], [1, 1, 2, 1, 1, 2]) AS res\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/math-functions"], "Title": ["log2"], "Feature": ["log2(x)"], "Description": ["log2", "Returns the binary logarithm of the argument.", "Syntax", "log2(x)", "Arguments", "x - (U)Int*, Float* or Decimal*.", "Returned value", "Type: Float*."], "Examples": ["log2(x)"], "Category": ["Mathematical Functions"], "index": 814, "vector_txt": "814:Feature: log2(x)\nDescription: log2Returns the binary logarithm of the argument.Syntaxlog2(x)Argumentsx - (U)Int*, Float* or Decimal*.Returned valueType: Float*.\nExamples: log2(x)\nCategory: Mathematical Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/math-functions"], "Title": ["exp10"], "Feature": ["exp10(x)"], "Description": ["exp10", "Returns 10 to the power of the given argument.", "Syntax", "exp10(x)", "Arguments", "x - (U)Int*, Float* or Decimal*.", "Returned value", "Type: Float*."], "Examples": ["exp10(x)"], "Category": ["Mathematical Functions"], "index": 815, "vector_txt": "815:Feature: exp10(x)\nDescription: exp10Returns 10 to the power of the given argument.Syntaxexp10(x)Argumentsx - (U)Int*, Float* or Decimal*.Returned valueType: Float*.\nExamples: exp10(x)\nCategory: Mathematical Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/math-functions"], "Title": ["intExp10"], "Feature": ["intExp10(x)"], "Description": ["intExp10", "Like exp10 but returns a UInt64.", "Syntax", "intExp10(x)"], "Examples": ["intExp10(x)"], "Category": ["Mathematical Functions"], "index": 816, "vector_txt": "816:Feature: intExp10(x)\nDescription: intExp10Like exp10 but returns a UInt64.SyntaxintExp10(x)\nExamples: intExp10(x)\nCategory: Mathematical Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/math-functions"], "Title": ["log10"], "Feature": ["log10(x)"], "Description": ["log10", "Returns the decimal logarithm of the argument.", "Syntax", "log10(x)", "Arguments", "x - (U)Int*, Float* or Decimal*.", "Returned value", "Type: Float*."], "Examples": ["log10(x)"], "Category": ["Mathematical Functions"], "index": 817, "vector_txt": "817:Feature: log10(x)\nDescription: log10Returns the decimal logarithm of the argument.Syntaxlog10(x)Argumentsx - (U)Int*, Float* or Decimal*.Returned valueType: Float*.\nExamples: log10(x)\nCategory: Mathematical Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/math-functions"], "Title": ["sqrt"], "Feature": ["sqrt"], "Description": ["sqrt", "Returns the square root of the argument.", "sqrt(x)", "Arguments", "x - (U)Int*, Float* or Decimal*.", "Returned value", "Type: Float*."], "Examples": ["sqrt(x)"], "Category": ["Mathematical Functions"], "index": 818, "vector_txt": "818:Feature: sqrt\nDescription: sqrtReturns the square root of the argument.sqrt(x)Argumentsx - (U)Int*, Float* or Decimal*.Returned valueType: Float*.\nExamples: sqrt(x)\nCategory: Mathematical Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/math-functions"], "Title": ["cbrt"], "Feature": ["cbrt"], "Description": ["cbrt", "Returns the cubic root of the argument.", "cbrt(x)", "Arguments", "x - (U)Int*, Float* or Decimal*.", "Returned value", "Type: Float*."], "Examples": ["cbrt(x)"], "Category": ["Mathematical Functions"], "index": 819, "vector_txt": "819:Feature: cbrt\nDescription: cbrtReturns the cubic root of the argument.cbrt(x)Argumentsx - (U)Int*, Float* or Decimal*.Returned valueType: Float*.\nExamples: cbrt(x)\nCategory: Mathematical Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/math-functions"], "Title": ["erf"], "Feature": ["erf(x)"], "Description": ["erf", "If x is non-negative, then erf(x\u03c32)erf(\\frac{x}{\\sigma\\sqrt{2}})erf(\u03c32x) is the probability that a random variable having a normal distribution with standard deviation \u03c3\\sigma\u03c3 takes the value that is separated from the expected value by more than x.", "Syntax", "erf(x)", "Arguments", "x - (U)Int*, Float* or Decimal*.", "Returned value", "Type: Float*."], "Examples": ["SELECT erf(3 / sqrt(2));"], "Category": ["Mathematical Functions"], "index": 820, "vector_txt": "820:Feature: erf(x)\nDescription: erfIf x is non-negative, then erf(x\u03c32)erf(\\frac{x}{\\sigma\\sqrt{2}})erf(\u03c32x) is the probability that a random variable having a normal distribution with standard deviation \u03c3\\sigma\u03c3 takes the value that is separated from the expected value by more than x.Syntaxerf(x)Argumentsx - (U)Int*, Float* or Decimal*.Returned valueType: Float*.\nExamples: SELECT erf(3 / sqrt(2));\nCategory: Mathematical Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/math-functions"], "Title": ["erfc"], "Feature": ["erfc(x)"], "Description": ["erfc", "Returns a number close to 1\u2212erf(x)1-erf(x)1\u2212erf(x) without loss of precision for large x values.", "Syntax", "erfc(x)", "Arguments", "x - (U)Int*, Float* or Decimal*.", "Returned value", "Type: Float*."], "Examples": ["erfc(x)"], "Category": ["Mathematical Functions"], "index": 821, "vector_txt": "821:Feature: erfc(x)\nDescription: erfcReturns a number close to 1\u2212erf(x)1-erf(x)1\u2212erf(x) without loss of precision for large x values.Syntaxerfc(x)Argumentsx - (U)Int*, Float* or Decimal*.Returned valueType: Float*.\nExamples: erfc(x)\nCategory: Mathematical Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/math-functions"], "Title": ["lgamma"], "Feature": ["lgamma(x)"], "Description": ["lgamma", "Returns the logarithm of the gamma function.", "Syntax", "lgamma(x)", "Arguments", "x - (U)Int*, Float* or Decimal*.", "Returned value", "Type: Float*."], "Examples": ["lgamma(x)"], "Category": ["Mathematical Functions"], "index": 822, "vector_txt": "822:Feature: lgamma(x)\nDescription: lgammaReturns the logarithm of the gamma function.Syntaxlgamma(x)Argumentsx - (U)Int*, Float* or Decimal*.Returned valueType: Float*.\nExamples: lgamma(x)\nCategory: Mathematical Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/math-functions"], "Title": ["tgamma"], "Feature": ["gamma(x)"], "Description": ["tgamma", "Returns the gamma function.", "Syntax", "gamma(x)", "Arguments", "x - (U)Int*, Float* or Decimal*.", "Returned value", "Type: Float*."], "Examples": ["gamma(x)"], "Category": ["Mathematical Functions"], "index": 823, "vector_txt": "823:Feature: gamma(x)\nDescription: tgammaReturns the gamma function.Syntaxgamma(x)Argumentsx - (U)Int*, Float* or Decimal*.Returned valueType: Float*.\nExamples: gamma(x)\nCategory: Mathematical Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayEnumerateUniqRanked"], "Feature": ["arrayEnumerateUniqRanked(clear_depth, arr, max_array_depth)"], "Description": ["arrayEnumerateUniqRanked", "Returns an array the same size as the source array, indicating for each element what its position is among elements with the same value. It allows for enumeration of a multidimensional array with the ability to specify how deep to look inside the array.", "Syntax", "arrayEnumerateUniqRanked(clear_depth, arr, max_array_depth)", "Parameters", "clear_depth: Enumerate elements at the specified level separately. Positive Integer less than or equal to max_arr_depth.arr: N-dimensional array to enumerate. Array.max_array_depth: The maximum effective depth. Positive Integer less than or equal to the depth of arr."], "Examples": ["SELECT arrayEnumerateUniqRanked(1, [1,2,1], 1);", "SELECT arrayEnumerateUniqRanked(1, [[1,2,3],[2,2,1],[3]], 2);", "SELECT arrayEnumerateUniqRanked(2, [[1,2,3],[2,2,1],[3]], 2);"], "Category": ["Arrays Functions"], "index": 824, "vector_txt": "824:Feature: arrayEnumerateUniqRanked(clear_depth, arr, max_array_depth)\nDescription: arrayEnumerateUniqRankedReturns an array the same size as the source array, indicating for each element what its position is among elements with the same value. It allows for enumeration of a multidimensional array with the ability to specify how deep to look inside the array.SyntaxarrayEnumerateUniqRanked(clear_depth, arr, max_array_depth)Parametersclear_depth: Enumerate elements at the specified level separately. Positive Integer less than or equal to max_arr_depth.arr: N-dimensional array to enumerate. Array.max_array_depth: The maximum effective depth. Positive Integer less than or equal to the depth of arr.\nExamples: SELECT arrayEnumerateUniqRanked(1, [1,2,1], 1);SELECT arrayEnumerateUniqRanked(1, [[1,2,3],[2,2,1],[3]], 2);SELECT arrayEnumerateUniqRanked(2, [[1,2,3],[2,2,1],[3]], 2);\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/math-functions"], "Title": ["sin"], "Feature": ["sin(x)"], "Description": ["sin", "Returns the sine of the argument", "Syntax", "sin(x)", "Arguments", "x - (U)Int*, Float* or Decimal*.", "Returned value", "Type: Float*."], "Examples": ["SELECT sin(1.23);"], "Category": ["Mathematical Functions"], "index": 825, "vector_txt": "825:Feature: sin(x)\nDescription: sinReturns the sine of the argumentSyntaxsin(x)Argumentsx - (U)Int*, Float* or Decimal*.Returned valueType: Float*.\nExamples: SELECT sin(1.23);\nCategory: Mathematical Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/math-functions"], "Title": ["cos"], "Feature": ["cos(x)"], "Description": ["cos", "Returns the cosine of the argument.", "Syntax", "cos(x)", "Arguments", "x - (U)Int*, Float* or Decimal*.", "Returned value", "Type: Float*."], "Examples": ["cos(x)"], "Category": ["Mathematical Functions"], "index": 826, "vector_txt": "826:Feature: cos(x)\nDescription: cosReturns the cosine of the argument.Syntaxcos(x)Argumentsx - (U)Int*, Float* or Decimal*.Returned valueType: Float*.\nExamples: cos(x)\nCategory: Mathematical Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/math-functions"], "Title": ["tan"], "Feature": ["tan(x)"], "Description": ["tan", "Returns the tangent of the argument.", "Syntax", "tan(x)", "Arguments", "x - (U)Int*, Float* or Decimal*.", "Returned value", "Type: Float*."], "Examples": ["tan(x)"], "Category": ["Mathematical Functions"], "index": 827, "vector_txt": "827:Feature: tan(x)\nDescription: tanReturns the tangent of the argument.Syntaxtan(x)Argumentsx - (U)Int*, Float* or Decimal*.Returned valueType: Float*.\nExamples: tan(x)\nCategory: Mathematical Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/math-functions"], "Title": ["asin"], "Feature": ["asin(x)"], "Description": ["asin", "Returns the arc sine of the argument.", "Syntax", "asin(x)", "Arguments", "x - (U)Int*, Float* or Decimal*.", "Returned value", "Type: Float*."], "Examples": ["asin(x)"], "Category": ["Mathematical Functions"], "index": 828, "vector_txt": "828:Feature: asin(x)\nDescription: asinReturns the arc sine of the argument.Syntaxasin(x)Argumentsx - (U)Int*, Float* or Decimal*.Returned valueType: Float*.\nExamples: asin(x)\nCategory: Mathematical Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/math-functions"], "Title": ["acos"], "Feature": ["acos(x)"], "Description": ["acos", "Returns the arc cosine of the argument.", "Syntax", "acos(x)", "Arguments", "x - (U)Int*, Float* or Decimal*.", "Returned value", "Type: Float*."], "Examples": ["acos(x)"], "Category": ["Mathematical Functions"], "index": 829, "vector_txt": "829:Feature: acos(x)\nDescription: acosReturns the arc cosine of the argument.Syntaxacos(x)Argumentsx - (U)Int*, Float* or Decimal*.Returned valueType: Float*.\nExamples: acos(x)\nCategory: Mathematical Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/math-functions"], "Title": ["atan"], "Feature": ["atan(x)"], "Description": ["atan", "Returns the arc tangent of the argument.", "Syntax", "atan(x)", "Arguments", "x - (U)Int*, Float* or Decimal*.", "Returned value", "Type: Float*."], "Examples": ["atan(x)"], "Category": ["Mathematical Functions"], "index": 830, "vector_txt": "830:Feature: atan(x)\nDescription: atanReturns the arc tangent of the argument.Syntaxatan(x)Argumentsx - (U)Int*, Float* or Decimal*.Returned valueType: Float*.\nExamples: atan(x)\nCategory: Mathematical Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/math-functions"], "Title": ["pow"], "Feature": ["pow(x, y)"], "Description": ["pow", "Returns xyx^yxy.", "Syntax", "pow(x, y)", "Alias: power(x, y)", "Arguments", "x - (U)Int8/16/32/64, Float* or Decimal*y - (U)Int8/16/32/64, Float* or Decimal*", "Returned value", "Type: Float64."], "Examples": ["pow(x, y)"], "Category": ["Mathematical Functions"], "index": 831, "vector_txt": "831:Feature: pow(x, y)\nDescription: powReturns xyx^yxy.Syntaxpow(x, y)Alias: power(x, y)Argumentsx - (U)Int8/16/32/64, Float* or Decimal*y - (U)Int8/16/32/64, Float* or Decimal*Returned valueType: Float64.\nExamples: pow(x, y)\nCategory: Mathematical Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/math-functions"], "Title": ["cosh"], "Feature": ["cosh(x)"], "Description": ["cosh", "Returns the hyperbolic cosine of the argument.", "Syntax", "cosh(x)", "Arguments", "x \u2014 The angle, in radians. Values from the interval: \u2212\u221e<x<+\u221e-\\infty \\lt x \\lt +\\infty\u2212\u221e<x<+\u221e. (U)Int*, Float* or Decimal*.", "Returned value", "Values from the interval: 1\u2264cosh(x)<+\u221e1 \\le cosh(x) \\lt +\\infty1\u2264cosh(x)<+\u221e.", "Type: Float64."], "Examples": ["SELECT cosh(0);"], "Category": ["Mathematical Functions"], "index": 832, "vector_txt": "832:Feature: cosh(x)\nDescription: coshReturns the hyperbolic cosine of the argument.Syntaxcosh(x)Argumentsx \u2014 The angle, in radians. Values from the interval: \u2212\u221e<x<+\u221e-\\infty \\lt x \\lt +\\infty\u2212\u221e<x<+\u221e. (U)Int*, Float* or Decimal*.Returned valueValues from the interval: 1\u2264cosh(x)<+\u221e1 \\le cosh(x) \\lt +\\infty1\u2264cosh(x)<+\u221e.Type: Float64.\nExamples: SELECT cosh(0);\nCategory: Mathematical Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/math-functions"], "Title": ["acosh"], "Feature": ["acosh(x)"], "Description": ["acosh", "Returns the inverse hyperbolic cosine.", "Syntax", "acosh(x)", "Arguments", "x \u2014 Hyperbolic cosine of angle. Values from the interval: 1\u2264x<+\u221e1 \\le x \\lt +\\infty1\u2264x<+\u221e. (U)Int*, Float* or Decimal*.", "Returned value", "The angle, in radians. Values from the interval: 0\u2264acosh(x)<+\u221e0 \\le acosh(x) \\lt +\\infty0\u2264acosh(x)<+\u221e.", "Type: Float64."], "Examples": ["SELECT acosh(1);"], "Category": ["Mathematical Functions"], "index": 833, "vector_txt": "833:Feature: acosh(x)\nDescription: acoshReturns the inverse hyperbolic cosine.Syntaxacosh(x)Argumentsx \u2014 Hyperbolic cosine of angle. Values from the interval: 1\u2264x<+\u221e1 \\le x \\lt +\\infty1\u2264x<+\u221e. (U)Int*, Float* or Decimal*.Returned valueThe angle, in radians. Values from the interval: 0\u2264acosh(x)<+\u221e0 \\le acosh(x) \\lt +\\infty0\u2264acosh(x)<+\u221e.Type: Float64.\nExamples: SELECT acosh(1);\nCategory: Mathematical Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/math-functions"], "Title": ["sinh"], "Feature": ["sinh(x)"], "Description": ["sinh", "Returns the hyperbolic sine.", "Syntax", "sinh(x)", "Arguments", "x \u2014 The angle, in radians. Values from the interval: \u2212\u221e<x<+\u221e-\\infty \\lt x \\lt +\\infty\u2212\u221e<x<+\u221e. (U)Int*, Float* or Decimal*.", "Returned value", "Values from the interval: \u2212\u221e<sinh(x)<+\u221e-\\infty \\lt sinh(x) \\lt +\\infty\u2212\u221e<sinh(x)<+\u221e.", "Type: Float64."], "Examples": ["SELECT sinh(0);"], "Category": ["Mathematical Functions"], "index": 834, "vector_txt": "834:Feature: sinh(x)\nDescription: sinhReturns the hyperbolic sine.Syntaxsinh(x)Argumentsx \u2014 The angle, in radians. Values from the interval: \u2212\u221e<x<+\u221e-\\infty \\lt x \\lt +\\infty\u2212\u221e<x<+\u221e. (U)Int*, Float* or Decimal*.Returned valueValues from the interval: \u2212\u221e<sinh(x)<+\u221e-\\infty \\lt sinh(x) \\lt +\\infty\u2212\u221e<sinh(x)<+\u221e.Type: Float64.\nExamples: SELECT sinh(0);\nCategory: Mathematical Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayPopBack"], "Feature": ["arrayPopBack(array)"], "Description": ["arrayPopBack", "Removes the last item from the array.", "arrayPopBack(array)", "Arguments", "array \u2013 Array."], "Examples": ["SELECT arrayPopBack([1, 2, 3]) AS res;"], "Category": ["Arrays Functions"], "index": 835, "vector_txt": "835:Feature: arrayPopBack(array)\nDescription: arrayPopBackRemoves the last item from the array.arrayPopBack(array)Argumentsarray \u2013 Array.\nExamples: SELECT arrayPopBack([1, 2, 3]) AS res;\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/math-functions"], "Title": ["asinh"], "Feature": ["asinh(x)"], "Description": ["asinh", "Returns the inverse hyperbolic sine.", "Syntax", "asinh(x)", "Arguments", "x \u2014 Hyperbolic sine of angle. Values from the interval: \u2212\u221e<x<+\u221e-\\infty \\lt x \\lt +\\infty\u2212\u221e<x<+\u221e. (U)Int*, Float* or Decimal*.", "Returned value", "The angle, in radians. Values from the interval: \u2212\u221e<asinh(x)<+\u221e-\\infty \\lt asinh(x) \\lt +\\infty\u2212\u221e<asinh(x)<+\u221e.", "Type: Float64."], "Examples": ["SELECT asinh(0);"], "Category": ["Mathematical Functions"], "index": 836, "vector_txt": "836:Feature: asinh(x)\nDescription: asinhReturns the inverse hyperbolic sine.Syntaxasinh(x)Argumentsx \u2014 Hyperbolic sine of angle. Values from the interval: \u2212\u221e<x<+\u221e-\\infty \\lt x \\lt +\\infty\u2212\u221e<x<+\u221e. (U)Int*, Float* or Decimal*.Returned valueThe angle, in radians. Values from the interval: \u2212\u221e<asinh(x)<+\u221e-\\infty \\lt asinh(x) \\lt +\\infty\u2212\u221e<asinh(x)<+\u221e.Type: Float64.\nExamples: SELECT asinh(0);\nCategory: Mathematical Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/math-functions"], "Title": ["tanh"], "Feature": ["tanh(x)"], "Description": ["tanh", "Returns the hyperbolic tangent.", "Syntax", "tanh(x)", "Arguments", "x \u2014 The angle, in radians. Values from the interval: \u2212\u221e<x<+\u221e-\\infty \\lt x \\lt +\\infty\u2212\u221e<x<+\u221e. (U)Int*, Float* or Decimal*.", "Returned value", "Values from the interval: \u22121<tanh(x)<1-1 \\lt tanh(x) \\lt 1\u22121<tanh(x)<1.", "Type: Float*."], "Examples": ["SELECT tanh(0);"], "Category": ["Mathematical Functions"], "index": 837, "vector_txt": "837:Feature: tanh(x)\nDescription: tanhReturns the hyperbolic tangent.Syntaxtanh(x)Argumentsx \u2014 The angle, in radians. Values from the interval: \u2212\u221e<x<+\u221e-\\infty \\lt x \\lt +\\infty\u2212\u221e<x<+\u221e. (U)Int*, Float* or Decimal*.Returned valueValues from the interval: \u22121<tanh(x)<1-1 \\lt tanh(x) \\lt 1\u22121<tanh(x)<1.Type: Float*.\nExamples: SELECT tanh(0);\nCategory: Mathematical Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/math-functions"], "Title": ["atanh"], "Feature": ["atanh(x)"], "Description": ["atanh", "Returns the inverse hyperbolic tangent.", "Syntax", "atanh(x)", "Arguments", "x \u2014 Hyperbolic tangent of angle. Values from the interval: \u22121<x<1-1 \\lt x \\lt 1\u22121<x<1. (U)Int*, Float* or Decimal*.", "Returned value", "The angle, in radians. Values from the interval: \u2212\u221e<atanh(x)<+\u221e-\\infty \\lt atanh(x) \\lt +\\infty\u2212\u221e<atanh(x)<+\u221e.", "Type: Float64."], "Examples": ["SELECT atanh(0);"], "Category": ["Mathematical Functions"], "index": 838, "vector_txt": "838:Feature: atanh(x)\nDescription: atanhReturns the inverse hyperbolic tangent.Syntaxatanh(x)Argumentsx \u2014 Hyperbolic tangent of angle. Values from the interval: \u22121<x<1-1 \\lt x \\lt 1\u22121<x<1. (U)Int*, Float* or Decimal*.Returned valueThe angle, in radians. Values from the interval: \u2212\u221e<atanh(x)<+\u221e-\\infty \\lt atanh(x) \\lt +\\infty\u2212\u221e<atanh(x)<+\u221e.Type: Float64.\nExamples: SELECT atanh(0);\nCategory: Mathematical Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/math-functions"], "Title": ["atan2"], "Feature": ["atan2(y, x)"], "Description": ["atan2", "Returns the atan2 as the angle in the Euclidean plane, given in radians, between the positive x axis and the ray to the point (x, y) \u2260 (0, 0).", "Syntax", "atan2(y, x)", "Arguments", "y \u2014 y-coordinate of the point through which the ray passes. (U)Int*, Float* or Decimal*.x \u2014 x-coordinate of the point through which the ray passes. (U)Int*, Float* or Decimal*.", "Returned value", "The angle \u03b8 such that \u2212\u03c0<0\u2264\u03c0-\\pi \\lt 0 \\le \\pi\u2212\u03c0<0\u2264\u03c0, in radians.", "Type: Float64."], "Examples": ["SELECT atan2(1, 1);"], "Category": ["Mathematical Functions"], "index": 839, "vector_txt": "839:Feature: atan2(y, x)\nDescription: atan2Returns the atan2 as the angle in the Euclidean plane, given in radians, between the positive x axis and the ray to the point (x, y) \u2260 (0, 0).Syntaxatan2(y, x)Argumentsy \u2014 y-coordinate of the point through which the ray passes. (U)Int*, Float* or Decimal*.x \u2014 x-coordinate of the point through which the ray passes. (U)Int*, Float* or Decimal*.Returned valueThe angle \u03b8 such that \u2212\u03c0<0\u2264\u03c0-\\pi \\lt 0 \\le \\pi\u2212\u03c0<0\u2264\u03c0, in radians.Type: Float64.\nExamples: SELECT atan2(1, 1);\nCategory: Mathematical Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/math-functions"], "Title": ["hypot"], "Feature": ["hypot(x, y)"], "Description": ["hypot", "Returns the length of the hypotenuse of a right-angle triangle. Hypot avoids problems that occur when squaring very large or very small numbers.", "Syntax", "hypot(x, y)", "Arguments", "x \u2014 The first cathetus of a right-angle triangle. (U)Int*, Float* or Decimal*.y \u2014 The second cathetus of a right-angle triangle. (U)Int*, Float* or Decimal*.", "Returned value", "The length of the hypotenuse of a right-angle triangle.", "Type: Float64."], "Examples": ["SELECT hypot(1, 1);"], "Category": ["Mathematical Functions"], "index": 840, "vector_txt": "840:Feature: hypot(x, y)\nDescription: hypotReturns the length of the hypotenuse of a right-angle triangle. Hypot avoids problems that occur when squaring very large or very small numbers.Syntaxhypot(x, y)Argumentsx \u2014 The first cathetus of a right-angle triangle. (U)Int*, Float* or Decimal*.y \u2014 The second cathetus of a right-angle triangle. (U)Int*, Float* or Decimal*.Returned valueThe length of the hypotenuse of a right-angle triangle.Type: Float64.\nExamples: SELECT hypot(1, 1);\nCategory: Mathematical Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/math-functions"], "Title": ["log1p"], "Feature": ["log1p(x)"], "Description": ["log1p", "Calculates log(1+x). The calculation log1p(x) is more accurate than log(1+x) for small values of x.", "Syntax", "log1p(x)", "Arguments", "x \u2014 Values from the interval: \u22121<x<+\u221e-1 \\lt x \\lt +\\infty\u22121<x<+\u221e. (U)Int*, Float* or Decimal*.", "Returned value", "Values from the interval: \u2212\u221e<log1p(x)<+\u221e-\\infty < log1p(x) \\lt +\\infty\u2212\u221e<log1p(x)<+\u221e.", "Type: Float64."], "Examples": ["SELECT log1p(0);"], "Category": ["Mathematical Functions"], "index": 841, "vector_txt": "841:Feature: log1p(x)\nDescription: log1pCalculates log(1+x). The calculation log1p(x) is more accurate than log(1+x) for small values of x.Syntaxlog1p(x)Argumentsx \u2014 Values from the interval: \u22121<x<+\u221e-1 \\lt x \\lt +\\infty\u22121<x<+\u221e. (U)Int*, Float* or Decimal*.Returned valueValues from the interval: \u2212\u221e<log1p(x)<+\u221e-\\infty < log1p(x) \\lt +\\infty\u2212\u221e<log1p(x)<+\u221e.Type: Float64.\nExamples: SELECT log1p(0);\nCategory: Mathematical Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/math-functions"], "Title": ["sign"], "Feature": ["sign(x)"], "Description": ["sign", "Returns the sign of a real number.", "Syntax", "sign(x)", "Arguments", "x \u2014 Values from \u2212\u221e-\\infty\u2212\u221e to +\u221e+\\infty+\u221e. Supports all numeric types in ClickHouse.", "Returned value", "-1 for x < 00 for x = 01 for x > 0", "Type: Int8."], "Examples": ["SELECT sign(0);", "SELECT sign(1);", "SELECT sign(-1);"], "Category": ["Mathematical Functions"], "index": 842, "vector_txt": "842:Feature: sign(x)\nDescription: signReturns the sign of a real number.Syntaxsign(x)Argumentsx \u2014 Values from \u2212\u221e-\\infty\u2212\u221e to +\u221e+\\infty+\u221e. Supports all numeric types in ClickHouse.Returned value-1 for x < 00 for x = 01 for x > 0Type: Int8.\nExamples: SELECT sign(0);SELECT sign(1);SELECT sign(-1);\nCategory: Mathematical Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/math-functions"], "Title": ["sigmoid"], "Feature": ["sigmoid(x)"], "Description": ["sigmoid", "Returns the sigmoid function.", "Syntax", "sigmoid(x)", "Parameters", "x \u2014 input value. Values from the interval: \u2212\u221e<x<+\u221e-\\infty \\lt x \\lt +\\infty\u2212\u221e<x<+\u221e. (U)Int*, Float* or Decimal*.", "Returned value", "Corresponding value along the sigmoid curve between 0 and 1. Float64."], "Examples": ["SELECT round(sigmoid(x), 5) FROM (SELECT arrayJoin([-1, 0, 1]) AS x);"], "Category": ["Mathematical Functions"], "index": 843, "vector_txt": "843:Feature: sigmoid(x)\nDescription: sigmoidReturns the sigmoid function.Syntaxsigmoid(x)Parametersx \u2014 input value. Values from the interval: \u2212\u221e<x<+\u221e-\\infty \\lt x \\lt +\\infty\u2212\u221e<x<+\u221e. (U)Int*, Float* or Decimal*.Returned valueCorresponding value along the sigmoid curve between 0 and 1. Float64.\nExamples: SELECT round(sigmoid(x), 5) FROM (SELECT arrayJoin([-1, 0, 1]) AS x);\nCategory: Mathematical Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/math-functions"], "Title": ["degrees"], "Feature": ["degrees(x)"], "Description": ["degrees", "Converts radians to degrees.", "Syntax", "degrees(x)", "Arguments", "x \u2014 Input in radians. (U)Int*, Float* or Decimal*.x \u2014 Input in radians. (U)Int*, Float* or Decimal*.  ", "Returned value", "Value in degrees. Float64."], "Examples": ["SELECT degrees(3.141592653589793);"], "Category": ["Mathematical Functions"], "index": 844, "vector_txt": "844:Feature: degrees(x)\nDescription: degreesConverts radians to degrees.Syntaxdegrees(x)Argumentsx \u2014 Input in radians. (U)Int*, Float* or Decimal*.x \u2014 Input in radians. (U)Int*, Float* or Decimal*.  Returned valueValue in degrees. Float64.\nExamples: SELECT degrees(3.141592653589793);\nCategory: Mathematical Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/math-functions"], "Title": ["radians"], "Feature": ["radians(x)"], "Description": ["radians", "Converts degrees to radians.", "Syntax", "radians(x)", "Arguments", "x \u2014 Input in degrees. (U)Int*, Float* or Decimal*.", "Returned value", "Value in radians.", "Type: Float64."], "Examples": ["SELECT radians(180);"], "Category": ["Mathematical Functions"], "index": 845, "vector_txt": "845:Feature: radians(x)\nDescription: radiansConverts degrees to radians.Syntaxradians(x)Argumentsx \u2014 Input in degrees. (U)Int*, Float* or Decimal*.Returned valueValue in radians.Type: Float64.\nExamples: SELECT radians(180);\nCategory: Mathematical Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayPopFront"], "Feature": ["arrayPopFront(array)"], "Description": ["arrayPopFront", "Removes the first item from the array.", "arrayPopFront(array)", "Arguments", "array \u2013 Array."], "Examples": ["SELECT arrayPopFront([1, 2, 3]) AS res;"], "Category": ["Arrays Functions"], "index": 846, "vector_txt": "846:Feature: arrayPopFront(array)\nDescription: arrayPopFrontRemoves the first item from the array.arrayPopFront(array)Argumentsarray \u2013 Array.\nExamples: SELECT arrayPopFront([1, 2, 3]) AS res;\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/math-functions"], "Title": ["factorial"], "Feature": ["factorial(n)"], "Description": ["factorial", "Computes the factorial of an integer value. Works with any native integer type including UInt(8|16|32|64) and Int(8|16|32|64). The return type is UInt64.", "The factorial of 0 is 1. Likewise, the factorial() function returns 1 for any negative value. The maximum positive value for the input argument is 20, a value of 21 or greater will cause exception throw.", "Syntax", "factorial(n)"], "Examples": ["SELECT factorial(10);"], "Category": ["Mathematical Functions"], "index": 847, "vector_txt": "847:Feature: factorial(n)\nDescription: factorialComputes the factorial of an integer value. Works with any native integer type including UInt(8|16|32|64) and Int(8|16|32|64). The return type is UInt64.The factorial of 0 is 1. Likewise, the factorial() function returns 1 for any negative value. The maximum positive value for the input argument is 20, a value of 21 or greater will cause exception throw.Syntaxfactorial(n)\nExamples: SELECT factorial(10);\nCategory: Mathematical Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/math-functions"], "Title": ["width_bucket"], "Feature": ["widthBucket(operand, low, high, count)"], "Description": ["width_bucket", "Returns the number of the bucket in which operand falls in a histogram having count equal-width buckets spanning the range low to high. Returns 0 if operand < low, and returns count+1 if operand >= high.", "operand, low, high can be any native number type. count can only be unsigned native integer and its value cannot be zero.", "Syntax", "widthBucket(operand, low, high, count)", "Alias: WIDTH_BUCKET"], "Examples": ["SELECT widthBucket(10.15, -8.6, 23, 18);"], "Category": ["Mathematical Functions"], "index": 848, "vector_txt": "848:Feature: widthBucket(operand, low, high, count)\nDescription: width_bucketReturns the number of the bucket in which operand falls in a histogram having count equal-width buckets spanning the range low to high. Returns 0 if operand < low, and returns count+1 if operand >= high.operand, low, high can be any native number type. count can only be unsigned native integer and its value cannot be zero.SyntaxwidthBucket(operand, low, high, count)Alias: WIDTH_BUCKET\nExamples: SELECT widthBucket(10.15, -8.6, 23, 18);\nCategory: Mathematical Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/math-functions"], "Title": ["proportionsZTest"], "Feature": ["proportionsZTest(successes_x, successes_y, trials_x, trials_y, conf_level, pool_type)"], "Description": ["proportionsZTest", "Returns test statistics for the two proportion Z-test - a statistical test for comparing the proportions from two populations x and y.", "Syntax", "proportionsZTest(successes_x, successes_y, trials_x, trials_y, conf_level, pool_type)", "Arguments", "successes_x: Number of successes in population x. UInt64.successes_y: Number of successes in population y. UInt64.trials_x: Number of trials in population x. UInt64.trials_y: Number of trials in population y. UInt64.conf_level: Confidence level for the test. Float64.pool_type: Selection of pooling (way in which the standard error is estimated). Can be either unpooled or pooled. String. ", "NoteFor argument pool_type: In the pooled version, the two proportions are averaged, and only one proportion is used to estimate the standard error. In the unpooled version, the two proportions are used separately.", "Returned value", "z_stat: Z statistic. Float64.p_val: P value. Float64.ci_low: The lower confidence interval. Float64.ci_high: The upper confidence interval. Float64."], "Examples": ["SELECT proportionsZTest(10, 11, 100, 101, 0.95, 'unpooled');"], "Category": ["Mathematical Functions"], "index": 849, "vector_txt": "849:Feature: proportionsZTest(successes_x, successes_y, trials_x, trials_y, conf_level, pool_type)\nDescription: proportionsZTestReturns test statistics for the two proportion Z-test - a statistical test for comparing the proportions from two populations x and y.SyntaxproportionsZTest(successes_x, successes_y, trials_x, trials_y, conf_level, pool_type)Argumentssuccesses_x: Number of successes in population x. UInt64.successes_y: Number of successes in population y. UInt64.trials_x: Number of trials in population x. UInt64.trials_y: Number of trials in population y. UInt64.conf_level: Confidence level for the test. Float64.pool_type: Selection of pooling (way in which the standard error is estimated). Can be either unpooled or pooled. String. NoteFor argument pool_type: In the pooled version, the two proportions are averaged, and only one proportion is used to estimate the standard error. In the unpooled version, the two proportions are used separately.Returned valuez_stat: Z statistic. Float64.p_val: P value. Float64.ci_low: The lower confidence interval. Float64.ci_high: The upper confidence interval. Float64.\nExamples: SELECT proportionsZTest(10, 11, 100, 101, 0.95, 'unpooled');\nCategory: Mathematical Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/nlp-functions"], "Title": ["detectCharset"], "Feature": ["detectCharset('text_to_be_analyzed')"], "Description": ["detectCharset", "The detectCharset function detects the character set of the non-UTF8-encoded input string.", "Syntax", "detectCharset('text_to_be_analyzed')", "Arguments", "text_to_be_analyzed \u2014 A collection (or sentences) of strings to analyze. String.", "Returned value", "A String containing the code of the detected character set"], "Examples": ["SELECT detectCharset('Ich bleibe f\u00fcr ein paar Tage.');"], "Category": ["NLP (experimental) Functions"], "index": 850, "vector_txt": "850:Feature: detectCharset('text_to_be_analyzed')\nDescription: detectCharsetThe detectCharset function detects the character set of the non-UTF8-encoded input string.SyntaxdetectCharset('text_to_be_analyzed')Argumentstext_to_be_analyzed \u2014 A collection (or sentences) of strings to analyze. String.Returned valueA String containing the code of the detected character set\nExamples: SELECT detectCharset('Ich bleibe f\u00fcr ein paar Tage.');\nCategory: NLP (experimental) Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/nlp-functions"], "Title": ["detectLanguage"], "Feature": ["detectLanguage('text_to_be_analyzed')"], "Description": ["detectLanguage", "Detects the language of the UTF8-encoded input string. The function uses the CLD2 library for detection, and it returns the 2-letter ISO language code.", "The detectLanguage function works best when providing over 200 characters in the input string.", "Syntax", "detectLanguage('text_to_be_analyzed')", "Arguments", "text_to_be_analyzed \u2014 A collection (or sentences) of strings to analyze. String.", "Returned value", "The 2-letter ISO code of the detected language", "Other possible results:", "un = unknown, can not detect any language.other = the detected language does not have 2 letter code."], "Examples": ["SELECT detectLanguage('Je pense que je ne parviendrai jamais \u00e0 parler fran\u00e7ais comme un natif. Where there\u2019s a will, there\u2019s a way.');"], "Category": ["NLP (experimental) Functions"], "index": 851, "vector_txt": "851:Feature: detectLanguage('text_to_be_analyzed')\nDescription: detectLanguageDetects the language of the UTF8-encoded input string. The function uses the CLD2 library for detection, and it returns the 2-letter ISO language code.The detectLanguage function works best when providing over 200 characters in the input string.SyntaxdetectLanguage('text_to_be_analyzed')Argumentstext_to_be_analyzed \u2014 A collection (or sentences) of strings to analyze. String.Returned valueThe 2-letter ISO code of the detected languageOther possible results:un = unknown, can not detect any language.other = the detected language does not have 2 letter code.\nExamples: SELECT detectLanguage('Je pense que je ne parviendrai jamais \u00e0 parler fran\u00e7ais comme un natif. Where there\u2019s a will, there\u2019s a way.');\nCategory: NLP (experimental) Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/nlp-functions"], "Title": ["detectLanguageMixed"], "Feature": ["detectLanguageMixed('text_to_be_analyzed')"], "Description": ["detectLanguageMixed", "Similar to the detectLanguage function, but detectLanguageMixed returns a Map of 2-letter language codes that are mapped to the percentage of the certain language in the text.", "Syntax", "detectLanguageMixed('text_to_be_analyzed')", "Arguments", "text_to_be_analyzed \u2014 A collection (or sentences) of strings to analyze. String.", "Returned value", "Map(String, Float32): The keys are 2-letter ISO codes and the values are a percentage of text found for that language"], "Examples": ["SELECT detectLanguageMixed('\u4e8c\u514e\u3092\u8ffd\u3046\u8005\u306f\u4e00\u514e\u3092\u3082\u5f97\u305a\u4e8c\u514e\u3092\u8ffd\u3046\u8005\u306f\u4e00\u514e\u3092\u3082\u5f97\u305a A vaincre sans peril, on triomphe sans gloire.');"], "Category": ["NLP (experimental) Functions"], "index": 852, "vector_txt": "852:Feature: detectLanguageMixed('text_to_be_analyzed')\nDescription: detectLanguageMixedSimilar to the detectLanguage function, but detectLanguageMixed returns a Map of 2-letter language codes that are mapped to the percentage of the certain language in the text.SyntaxdetectLanguageMixed('text_to_be_analyzed')Argumentstext_to_be_analyzed \u2014 A collection (or sentences) of strings to analyze. String.Returned valueMap(String, Float32): The keys are 2-letter ISO codes and the values are a percentage of text found for that language\nExamples: SELECT detectLanguageMixed('\u4e8c\u514e\u3092\u8ffd\u3046\u8005\u306f\u4e00\u514e\u3092\u3082\u5f97\u305a\u4e8c\u514e\u3092\u8ffd\u3046\u8005\u306f\u4e00\u514e\u3092\u3082\u5f97\u305a A vaincre sans peril, on triomphe sans gloire.');\nCategory: NLP (experimental) Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/nlp-functions"], "Title": ["detectProgrammingLanguage"], "Feature": ["detectProgrammingLanguage('source_code')"], "Description": ["detectProgrammingLanguage", "Determines the programming language from the source code. Calculates all the unigrams and bigrams of commands in the source code.\nThen using a marked-up dictionary with weights of unigrams and bigrams of commands for various programming languages finds the biggest weight of the programming language and returns it.", "Syntax", "detectProgrammingLanguage('source_code')", "Arguments", "source_code \u2014 String representation of the source code to analyze. String.", "Returned value", "Programming language. String."], "Examples": ["SELECT detectProgrammingLanguage('#include <iostream>');"], "Category": ["NLP (experimental) Functions"], "index": 853, "vector_txt": "853:Feature: detectProgrammingLanguage('source_code')\nDescription: detectProgrammingLanguageDetermines the programming language from the source code. Calculates all the unigrams and bigrams of commands in the source code.\nThen using a marked-up dictionary with weights of unigrams and bigrams of commands for various programming languages finds the biggest weight of the programming language and returns it.SyntaxdetectProgrammingLanguage('source_code')Argumentssource_code \u2014 String representation of the source code to analyze. String.Returned valueProgramming language. String.\nExamples: SELECT detectProgrammingLanguage('#include <iostream>');\nCategory: NLP (experimental) Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/nlp-functions"], "Title": ["detectLanguageUnknown"], "Feature": ["detectLanguageUnknown('text_to_be_analyzed')"], "Description": ["detectLanguageUnknown", "Similar to the detectLanguage function, except the detectLanguageUnknown function works with non-UTF8-encoded strings. Prefer this version when your character set is UTF-16 or UTF-32.", "Syntax", "detectLanguageUnknown('text_to_be_analyzed')", "Arguments", "text_to_be_analyzed \u2014 A collection (or sentences) of strings to analyze. String.", "Returned value", "The 2-letter ISO code of the detected language", "Other possible results:", "un = unknown, can not detect any language.other = the detected language does not have 2 letter code."], "Examples": ["SELECT detectLanguageUnknown('Ich bleibe f\u00fcr ein paar Tage.');"], "Category": ["NLP (experimental) Functions"], "index": 854, "vector_txt": "854:Feature: detectLanguageUnknown('text_to_be_analyzed')\nDescription: detectLanguageUnknownSimilar to the detectLanguage function, except the detectLanguageUnknown function works with non-UTF8-encoded strings. Prefer this version when your character set is UTF-16 or UTF-32.SyntaxdetectLanguageUnknown('text_to_be_analyzed')Argumentstext_to_be_analyzed \u2014 A collection (or sentences) of strings to analyze. String.Returned valueThe 2-letter ISO code of the detected languageOther possible results:un = unknown, can not detect any language.other = the detected language does not have 2 letter code.\nExamples: SELECT detectLanguageUnknown('Ich bleibe f\u00fcr ein paar Tage.');\nCategory: NLP (experimental) Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/nlp-functions"], "Title": ["detectTonality"], "Feature": ["detectTonality(text)"], "Description": ["detectTonality", "Determines the sentiment of text data. Uses a marked-up sentiment dictionary, in which each word has a tonality ranging from -12 to 6.\nFor each text, it calculates the average sentiment value of its words and returns it in the range [-1,1].", "NoteThis function is limited in its current form. Currently it makes use of the embedded emotional dictionary at /contrib/nlp-data/tonality_ru.zst and only works for the Russian language.", "Syntax", "detectTonality(text)", "Arguments", "text \u2014 The text to be analyzed. String.", "Returned value", "The average sentiment value of the words in text. Float32."], "Examples": ["SELECT detectTonality('\u0428\u0430\u0440\u0438\u043a - \u0445\u043e\u0440\u043e\u0448\u0438\u0439 \u043f\u0451\u0441'), -- Sharik is a good dog        detectTonality('\u0428\u0430\u0440\u0438\u043a - \u043f\u0451\u0441'), -- Sharik is a dog       detectTonality('\u0428\u0430\u0440\u0438\u043a - \u043f\u043b\u043e\u0445\u043e\u0439 \u043f\u0451\u0441'); -- Sharkik is a bad dog"], "Category": ["NLP (experimental) Functions"], "index": 855, "vector_txt": "855:Feature: detectTonality(text)\nDescription: detectTonalityDetermines the sentiment of text data. Uses a marked-up sentiment dictionary, in which each word has a tonality ranging from -12 to 6.\nFor each text, it calculates the average sentiment value of its words and returns it in the range [-1,1].NoteThis function is limited in its current form. Currently it makes use of the embedded emotional dictionary at /contrib/nlp-data/tonality_ru.zst and only works for the Russian language.SyntaxdetectTonality(text)Argumentstext \u2014 The text to be analyzed. String.Returned valueThe average sentiment value of the words in text. Float32.\nExamples: SELECT detectTonality('\u0428\u0430\u0440\u0438\u043a - \u0445\u043e\u0440\u043e\u0448\u0438\u0439 \u043f\u0451\u0441'), -- Sharik is a good dog        detectTonality('\u0428\u0430\u0440\u0438\u043a - \u043f\u0451\u0441'), -- Sharik is a dog       detectTonality('\u0428\u0430\u0440\u0438\u043a - \u043f\u043b\u043e\u0445\u043e\u0439 \u043f\u0451\u0441'); -- Sharkik is a bad dog\nCategory: NLP (experimental) Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/nlp-functions"], "Title": ["lemmatize"], "Feature": ["lemmatize('language', word)"], "Description": ["lemmatize", "Performs lemmatization on a given word. Needs dictionaries to operate, which can be obtained here.", "Syntax", "lemmatize('language', word)", "Arguments", "language \u2014 Language which rules will be applied. String.word \u2014 Word that needs to be lemmatized. Must be lowercase. String."], "Examples": ["SELECT lemmatize('en', 'wolves');"], "Category": ["NLP (experimental) Functions"], "index": 856, "vector_txt": "856:Feature: lemmatize('language', word)\nDescription: lemmatizePerforms lemmatization on a given word. Needs dictionaries to operate, which can be obtained here.Syntaxlemmatize('language', word)Argumentslanguage \u2014 Language which rules will be applied. String.word \u2014 Word that needs to be lemmatized. Must be lowercase. String.\nExamples: SELECT lemmatize('en', 'wolves');\nCategory: NLP (experimental) Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayPushBack"], "Feature": ["arrayPushBack(array, single_value)"], "Description": ["arrayPushBack", "Adds one item to the end of the array.", "arrayPushBack(array, single_value)", "Arguments", "array \u2013 Array.single_value \u2013 A single value. Only numbers can be added to an array with numbers, and only strings can be added to an array of strings. When adding numbers, ClickHouse automatically sets the single_value type for the data type of the array. For more information about the types of data in ClickHouse, see \u201cData types\u201d. Can be NULL. The function adds a NULL element to an array, and the type of array elements converts to Nullable."], "Examples": ["SELECT arrayPushBack(['a'], 'b') AS res;"], "Category": ["Arrays Functions"], "index": 857, "vector_txt": "857:Feature: arrayPushBack(array, single_value)\nDescription: arrayPushBackAdds one item to the end of the array.arrayPushBack(array, single_value)Argumentsarray \u2013 Array.single_value \u2013 A single value. Only numbers can be added to an array with numbers, and only strings can be added to an array of strings. When adding numbers, ClickHouse automatically sets the single_value type for the data type of the array. For more information about the types of data in ClickHouse, see \u201cData types\u201d. Can be NULL. The function adds a NULL element to an array, and the type of array elements converts to Nullable.\nExamples: SELECT arrayPushBack(['a'], 'b') AS res;\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/nlp-functions"], "Title": ["stem"], "Feature": ["stem('language', word)"], "Description": ["stem", "Performs stemming on a given word.", "Syntax", "stem('language', word)", "Arguments", "language \u2014 Language which rules will be applied. Use the two letter ISO 639-1 code.word \u2014 word that needs to be stemmed. Must be in lowercase. String."], "Examples": ["SELECT arrayMap(x -> stem('en', x), ['I', 'think', 'it', 'is', 'a', 'blessing', 'in', 'disguise']) as res;"], "Category": ["NLP (experimental) Functions"], "index": 858, "vector_txt": "858:Feature: stem('language', word)\nDescription: stemPerforms stemming on a given word.Syntaxstem('language', word)Argumentslanguage \u2014 Language which rules will be applied. Use the two letter ISO 639-1 code.word \u2014 word that needs to be stemmed. Must be in lowercase. String.\nExamples: SELECT arrayMap(x -> stem('en', x), ['I', 'think', 'it', 'is', 'a', 'blessing', 'in', 'disguise']) as res;\nCategory: NLP (experimental) Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/nlp-functions"], "Title": ["synonyms"], "Feature": ["synonyms('extension_name', word)"], "Description": ["synonyms", "Finds synonyms to a given word. There are two types of synonym extensions: plain and wordnet.", "With the plain extension type we need to provide a path to a simple text file, where each line corresponds to a certain synonym set. Words in this line must be separated with space or tab characters.", "With the wordnet extension type we need to provide a path to a directory with WordNet thesaurus in it. Thesaurus must contain a WordNet sense index.", "Syntax", "synonyms('extension_name', word)", "Arguments", "extension_name \u2014 Name of the extension in which search will be performed. String.word \u2014 Word that will be searched in extension. String."], "Examples": ["SELECT synonyms('list', 'important');"], "Category": ["NLP (experimental) Functions"], "index": 859, "vector_txt": "859:Feature: synonyms('extension_name', word)\nDescription: synonymsFinds synonyms to a given word. There are two types of synonym extensions: plain and wordnet.With the plain extension type we need to provide a path to a simple text file, where each line corresponds to a certain synonym set. Words in this line must be separated with space or tab characters.With the wordnet extension type we need to provide a path to a directory with WordNet thesaurus in it. Thesaurus must contain a WordNet sense index.Syntaxsynonyms('extension_name', word)Argumentsextension_name \u2014 Name of the extension in which search will be performed. String.word \u2014 Word that will be searched in extension. String.\nExamples: SELECT synonyms('list', 'important');\nCategory: NLP (experimental) Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/functions-for-nulls"], "Title": ["isNull"], "Feature": ["isNull(x)"], "Description": ["isNull", "Returns whether the argument is NULL.", "See also operator IS NULL.", "Syntax", "isNull(x)", "Alias: ISNULL.", "Arguments", "x \u2014 A value of non-compound data type.", "Returned value", "1 if x is NULL.0 if x is not NULL."], "Examples": ["SELECT x FROM t_null WHERE isNull(y);"], "Category": ["Nullable Functions"], "index": 860, "vector_txt": "860:Feature: isNull(x)\nDescription: isNullReturns whether the argument is NULL.See also operator IS NULL.SyntaxisNull(x)Alias: ISNULL.Argumentsx \u2014 A value of non-compound data type.Returned value1 if x is NULL.0 if x is not NULL.\nExamples: SELECT x FROM t_null WHERE isNull(y);\nCategory: Nullable Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/functions-for-nulls"], "Title": ["isNullable"], "Feature": ["isNullable(x)"], "Description": ["isNullable", "Returns 1 if a column is Nullable (i.e allows NULL values), 0 otherwise.", "Syntax", "isNullable(x)", "Arguments", "x \u2014 column.", "Returned value", "1 if x allows NULL values. UInt8.0 if x does not allow NULL values. UInt8."], "Examples": ["CREATE TABLE tab (ordinary_col UInt32, nullable_col Nullable(UInt32)) ENGINE = Log;INSERT INTO tab (ordinary_col, nullable_col) VALUES (1,1), (2, 2), (3,3);SELECT isNullable(ordinary_col), isNullable(nullable_col) FROM tab;    "], "Category": ["Nullable Functions"], "index": 861, "vector_txt": "861:Feature: isNullable(x)\nDescription: isNullableReturns 1 if a column is Nullable (i.e allows NULL values), 0 otherwise.SyntaxisNullable(x)Argumentsx \u2014 column.Returned value1 if x allows NULL values. UInt8.0 if x does not allow NULL values. UInt8.\nExamples: CREATE TABLE tab (ordinary_col UInt32, nullable_col Nullable(UInt32)) ENGINE = Log;INSERT INTO tab (ordinary_col, nullable_col) VALUES (1,1), (2, 2), (3,3);SELECT isNullable(ordinary_col), isNullable(nullable_col) FROM tab;    \nCategory: Nullable Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/functions-for-nulls"], "Title": ["isNotNull"], "Feature": ["isNotNull(x)"], "Description": ["isNotNull", "Returns whether the argument is not NULL.", "See also operator IS NOT NULL.", "isNotNull(x)", "Arguments:", "x \u2014 A value of non-compound data type.", "Returned value", "1 if x is not NULL.0 if x is NULL."], "Examples": ["SELECT x FROM t_null WHERE isNotNull(y);"], "Category": ["Nullable Functions"], "index": 862, "vector_txt": "862:Feature: isNotNull(x)\nDescription: isNotNullReturns whether the argument is not NULL.See also operator IS NOT NULL.isNotNull(x)Arguments:x \u2014 A value of non-compound data type.Returned value1 if x is not NULL.0 if x is NULL.\nExamples: SELECT x FROM t_null WHERE isNotNull(y);\nCategory: Nullable Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/functions-for-nulls"], "Title": ["isNotDistinctFrom"], "Feature": ["isNotDistinctFrom(x, y)"], "Description": ["isNotDistinctFrom", "Performs null-safe comparison. Used to compare JOIN keys which contain NULL values in the JOIN ON section.\nThis function will consider two NULL values as identical and will return true, which is distinct from the usual\nequals behavior where comparing two NULL values would return NULL.", "NoteThis function is an internal function used by the implementation of JOIN ON. Please do not use it manually in queries.", "Syntax", "isNotDistinctFrom(x, y)", "Arguments", "x \u2014 first JOIN key.y \u2014 second JOIN key.", "Returned value", "true when x and y are both NULL.false otherwise."], "Examples": [], "Category": ["Nullable Functions"], "index": 863, "vector_txt": "863:Feature: isNotDistinctFrom(x, y)\nDescription: isNotDistinctFromPerforms null-safe comparison. Used to compare JOIN keys which contain NULL values in the JOIN ON section.\nThis function will consider two NULL values as identical and will return true, which is distinct from the usual\nequals behavior where comparing two NULL values would return NULL.NoteThis function is an internal function used by the implementation of JOIN ON. Please do not use it manually in queries.SyntaxisNotDistinctFrom(x, y)Argumentsx \u2014 first JOIN key.y \u2014 second JOIN key.Returned valuetrue when x and y are both NULL.false otherwise.\nExamples: \nCategory: Nullable Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/functions-for-nulls"], "Title": ["isZeroOrNull"], "Feature": ["isZeroOrNull(x)"], "Description": ["isZeroOrNull", "Returns whether the argument is 0 (zero) or NULL.", "isZeroOrNull(x)", "Arguments:", "x \u2014 A value of non-compound data type.", "Returned value", "1 if x is 0 (zero) or NULL.0 else."], "Examples": ["SELECT x FROM t_null WHERE isZeroOrNull(y);"], "Category": ["Nullable Functions"], "index": 864, "vector_txt": "864:Feature: isZeroOrNull(x)\nDescription: isZeroOrNullReturns whether the argument is 0 (zero) or NULL.isZeroOrNull(x)Arguments:x \u2014 A value of non-compound data type.Returned value1 if x is 0 (zero) or NULL.0 else.\nExamples: SELECT x FROM t_null WHERE isZeroOrNull(y);\nCategory: Nullable Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/functions-for-nulls"], "Title": ["coalesce"], "Feature": ["coalesce(x,...)"], "Description": ["coalesce", "Returns the leftmost non-NULL argument.", "coalesce(x,...)", "Arguments:", "Any number of parameters of non-compound type. All parameters must be of mutually compatible data types.", "Returned values", "The first non-NULL argumentNULL, if all arguments are NULL."], "Examples": ["SELECT name, coalesce(mail, phone, CAST(telegram,'Nullable(String)')) FROM aBook;"], "Category": ["Nullable Functions"], "index": 865, "vector_txt": "865:Feature: coalesce(x,...)\nDescription: coalesceReturns the leftmost non-NULL argument.coalesce(x,...)Arguments:Any number of parameters of non-compound type. All parameters must be of mutually compatible data types.Returned valuesThe first non-NULL argumentNULL, if all arguments are NULL.\nExamples: SELECT name, coalesce(mail, phone, CAST(telegram,'Nullable(String)')) FROM aBook;\nCategory: Nullable Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/functions-for-nulls"], "Title": ["ifNull"], "Feature": ["ifNull(x, alt)"], "Description": ["ifNull", "Returns an alternative value if the argument is NULL.", "ifNull(x, alt)", "Arguments:", "x \u2014 The value to check for NULL.alt \u2014 The value that the function returns if x is NULL.", "Returned values", "x if x is not NULL.alt if x is NULL."], "Examples": ["SELECT ifNull('a', 'b');", "SELECT ifNull(NULL, 'b');"], "Category": ["Nullable Functions"], "index": 866, "vector_txt": "866:Feature: ifNull(x, alt)\nDescription: ifNullReturns an alternative value if the argument is NULL.ifNull(x, alt)Arguments:x \u2014 The value to check for NULL.alt \u2014 The value that the function returns if x is NULL.Returned valuesx if x is not NULL.alt if x is NULL.\nExamples: SELECT ifNull('a', 'b');SELECT ifNull(NULL, 'b');\nCategory: Nullable Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/functions-for-nulls"], "Title": ["nullIf"], "Feature": ["nullIf(x, y)"], "Description": ["nullIf", "Returns NULL if both arguments are equal.", "nullIf(x, y)", "Arguments:", "x, y \u2014 Values to compare. Must be of compatible types.", "Returned values", "NULL if the arguments are equal.x if the arguments are not equal."], "Examples": ["SELECT nullIf(1, 1);", "SELECT nullIf(1, 2);"], "Category": ["Nullable Functions"], "index": 867, "vector_txt": "867:Feature: nullIf(x, y)\nDescription: nullIfReturns NULL if both arguments are equal.nullIf(x, y)Arguments:x, y \u2014 Values to compare. Must be of compatible types.Returned valuesNULL if the arguments are equal.x if the arguments are not equal.\nExamples: SELECT nullIf(1, 1);SELECT nullIf(1, 2);\nCategory: Nullable Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayPushFront"], "Feature": ["arrayPushFront(array, single_value)"], "Description": ["arrayPushFront", "Adds one element to the beginning of the array.", "arrayPushFront(array, single_value)", "Arguments", "array \u2013 Array.single_value \u2013 A single value. Only numbers can be added to an array with numbers, and only strings can be added to an array of strings. When adding numbers, ClickHouse automatically sets the single_value type for the data type of the array. For more information about the types of data in ClickHouse, see \u201cData types\u201d. Can be NULL. The function adds a NULL element to an array, and the type of array elements converts to Nullable."], "Examples": ["SELECT arrayPushFront(['b'], 'a') AS res;"], "Category": ["Arrays Functions"], "index": 868, "vector_txt": "868:Feature: arrayPushFront(array, single_value)\nDescription: arrayPushFrontAdds one element to the beginning of the array.arrayPushFront(array, single_value)Argumentsarray \u2013 Array.single_value \u2013 A single value. Only numbers can be added to an array with numbers, and only strings can be added to an array of strings. When adding numbers, ClickHouse automatically sets the single_value type for the data type of the array. For more information about the types of data in ClickHouse, see \u201cData types\u201d. Can be NULL. The function adds a NULL element to an array, and the type of array elements converts to Nullable.\nExamples: SELECT arrayPushFront(['b'], 'a') AS res;\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/arithmetic-functions"], "Title": ["intDivOrZero"], "Feature": ["intDivOrZero(a, b)"], "Description": ["intDivOrZero", "Same as intDiv but returns zero when dividing by zero or when dividing a minimal negative number by minus one.", "Syntax", "intDivOrZero(a, b)"], "Examples": ["intDivOrZero(a, b)"], "Category": ["Arithmetic Functions"], "index": 869, "vector_txt": "869:Feature: intDivOrZero(a, b)\nDescription: intDivOrZeroSame as intDiv but returns zero when dividing by zero or when dividing a minimal negative number by minus one.SyntaxintDivOrZero(a, b)\nExamples: intDivOrZero(a, b)\nCategory: Arithmetic Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/functions-for-nulls"], "Title": ["assumeNotNull"], "Feature": ["assumeNotNull(x)"], "Description": ["assumeNotNull", "Returns the corresponding non-Nullable value for a value of Nullable type. If the original value is NULL, an arbitrary result can be returned. See also functions ifNull and coalesce.", "assumeNotNull(x)", "Arguments:", "x \u2014 The original value.", "Returned values", "The input value as non-Nullable type, if it is not NULL.An arbitrary value, if the input value is NULL."], "Examples": ["SELECT assumeNotNull(y) FROM table;", "SELECT toTypeName(assumeNotNull(y)) FROM t_null;"], "Category": ["Nullable Functions"], "index": 870, "vector_txt": "870:Feature: assumeNotNull(x)\nDescription: assumeNotNullReturns the corresponding non-Nullable value for a value of Nullable type. If the original value is NULL, an arbitrary result can be returned. See also functions ifNull and coalesce.assumeNotNull(x)Arguments:x \u2014 The original value.Returned valuesThe input value as non-Nullable type, if it is not NULL.An arbitrary value, if the input value is NULL.\nExamples: SELECT assumeNotNull(y) FROM table;SELECT toTypeName(assumeNotNull(y)) FROM t_null;\nCategory: Nullable Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/functions-for-nulls"], "Title": ["toNullable"], "Feature": ["toNullable(x)"], "Description": ["toNullable", "Converts the argument type to Nullable.", "toNullable(x)", "Arguments:", "x \u2014 A value of non-compound type.", "Returned value", "The input value but of Nullable type."], "Examples": ["SELECT toTypeName(10);", "SELECT toTypeName(toNullable(10));"], "Category": ["Nullable Functions"], "index": 871, "vector_txt": "871:Feature: toNullable(x)\nDescription: toNullableConverts the argument type to Nullable.toNullable(x)Arguments:x \u2014 A value of non-compound type.Returned valueThe input value but of Nullable type.\nExamples: SELECT toTypeName(10);SELECT toTypeName(toNullable(10));\nCategory: Nullable Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["hostName"], "Feature": ["hostName()"], "Description": ["hostName", "Returns the name of the host on which this function was executed. If the function executes on a remote server (distributed processing), the remote server name is returned.\nIf the function executes in the context of a distributed table, it generates a normal column with values relevant to each shard. Otherwise it produces a constant value.", "Syntax", "hostName()", "Returned value", "Host name. String."], "Examples": ["hostName()"], "Category": ["Other Functions"], "index": 872, "vector_txt": "872:Feature: hostName()\nDescription: hostNameReturns the name of the host on which this function was executed. If the function executes on a remote server (distributed processing), the remote server name is returned.\nIf the function executes in the context of a distributed table, it generates a normal column with values relevant to each shard. Otherwise it produces a constant value.SyntaxhostName()Returned valueHost name. String.\nExamples: hostName()\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["getMacro"], "Feature": ["getMacro(name);"], "Description": ["getMacro", "Returns a named value from the macros section of the server configuration.", "Syntax", "getMacro(name);", "Arguments", "name \u2014 Macro name to retrieve from the <macros> section. String.", "Returned value", "Value of the specified macro. String."], "Examples": ["SELECT getMacro('test');", "SELECT * FROM system.macrosWHERE macro = 'test';"], "Category": ["Other Functions"], "index": 873, "vector_txt": "873:Feature: getMacro(name);\nDescription: getMacroReturns a named value from the macros section of the server configuration.SyntaxgetMacro(name);Argumentsname \u2014 Macro name to retrieve from the <macros> section. String.Returned valueValue of the specified macro. String.\nExamples: SELECT getMacro('test');SELECT * FROM system.macrosWHERE macro = 'test';\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["fqdn"], "Feature": ["fqdn();"], "Description": ["fqdn", "Returns the fully qualified domain name of the ClickHouse server.", "Syntax", "fqdn();", "Aliases: fullHostName, FQDN.", "Returned value", "String with the fully qualified domain name. String."], "Examples": ["SELECT FQDN();"], "Category": ["Other Functions"], "index": 874, "vector_txt": "874:Feature: fqdn();\nDescription: fqdnReturns the fully qualified domain name of the ClickHouse server.Syntaxfqdn();Aliases: fullHostName, FQDN.Returned valueString with the fully qualified domain name. String.\nExamples: SELECT FQDN();\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["basename"], "Feature": ["basename(expr)"], "Description": ["basename", "Extracts the tail of a string following its last slash or backslash. This function if often used to extract the filename from a path.", "basename(expr)", "Arguments", "expr \u2014 A value of type String. Backslashes must be escaped.", "Returned Value", "A string that contains:", "The tail of the input string after its last slash or backslash. If the input string ends with a slash or backslash (e.g. / or c:\\), the function returns an empty string.The original string if there are no slashes or backslashes."], "Examples": ["SELECT 'some/long/path/to/file' AS a, basename(a)", "SELECT 'some\\\\long\\\\path\\\\to\\\\file' AS a, basename(a)", "SELECT 'some-file-name' AS a, basename(a)"], "Category": ["Other Functions"], "index": 875, "vector_txt": "875:Feature: basename(expr)\nDescription: basenameExtracts the tail of a string following its last slash or backslash. This function if often used to extract the filename from a path.basename(expr)Argumentsexpr \u2014 A value of type String. Backslashes must be escaped.Returned ValueA string that contains:The tail of the input string after its last slash or backslash. If the input string ends with a slash or backslash (e.g. / or c:\\), the function returns an empty string.The original string if there are no slashes or backslashes.\nExamples: SELECT 'some/long/path/to/file' AS a, basename(a)SELECT 'some\\\\long\\\\path\\\\to\\\\file' AS a, basename(a)SELECT 'some-file-name' AS a, basename(a)\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["visibleWidth"], "Feature": ["visibleWidth(x)"], "Description": ["visibleWidth", "Calculates the approximate width when outputting values to the console in text format (tab-separated).\nThis function is used by the system to implement Pretty formats.", "NULL is represented as a string corresponding to NULL in Pretty formats.", "Syntax", "visibleWidth(x)"], "Examples": ["SELECT visibleWidth(NULL)"], "Category": ["Other Functions"], "index": 876, "vector_txt": "876:Feature: visibleWidth(x)\nDescription: visibleWidthCalculates the approximate width when outputting values to the console in text format (tab-separated).\nThis function is used by the system to implement Pretty formats.NULL is represented as a string corresponding to NULL in Pretty formats.SyntaxvisibleWidth(x)\nExamples: SELECT visibleWidth(NULL)\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["toTypeName"], "Feature": ["toTypeName(value)"], "Description": ["toTypeName", "Returns the type name of the passed argument.", "If NULL is passed, the function returns type Nullable(Nothing), which corresponds to ClickHouse's internal NULL representation.", "Syntax", "toTypeName(value)", "Arguments", "value \u2014 A value of arbitrary type.", "Returned value", "The data type name of the input value. String."], "Examples": ["SELECT toTypeName(123);"], "Category": ["Other Functions"], "index": 877, "vector_txt": "877:Feature: toTypeName(value)\nDescription: toTypeNameReturns the type name of the passed argument.If NULL is passed, the function returns type Nullable(Nothing), which corresponds to ClickHouse's internal NULL representation.SyntaxtoTypeName(value)Argumentsvalue \u2014 A value of arbitrary type.Returned valueThe data type name of the input value. String.\nExamples: SELECT toTypeName(123);\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["blockSize"], "Feature": ["blockSize()"], "Description": ["blockSize", "In ClickHouse, queries are processed in blocks (chunks).\nThis function returns the size (row count) of the block the function is called on.", "Syntax", "blockSize()"], "Examples": ["DROP TABLE IF EXISTS test;CREATE TABLE test (n UInt8) ENGINE = Memory;INSERT INTO testSELECT * FROM system.numbers LIMIT 5;SELECT blockSize()FROM test;"], "Category": ["Other Functions"], "index": 878, "vector_txt": "878:Feature: blockSize()\nDescription: blockSizeIn ClickHouse, queries are processed in blocks (chunks).\nThis function returns the size (row count) of the block the function is called on.SyntaxblockSize()\nExamples: DROP TABLE IF EXISTS test;CREATE TABLE test (n UInt8) ENGINE = Memory;INSERT INTO testSELECT * FROM system.numbers LIMIT 5;SELECT blockSize()FROM test;\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["byteSize"], "Feature": ["byteSize(argument [, ...])"], "Description": ["byteSize", "Returns an estimation of uncompressed byte size of its arguments in memory.", "Syntax", "byteSize(argument [, ...])", "Arguments", "argument \u2014 Value.", "Returned value", "Estimation of byte size of the arguments in memory. UInt64."], "Examples": ["SELECT byteSize('string');", "CREATE TABLE test(    `key` Int32,    `u8` UInt8,    `u16` UInt16,    `u32` UInt32,    `u64` UInt64,    `i8` Int8,    `i16` Int16,    `i32` Int32,    `i64` Int64,    `f32` Float32,    `f64` Float64)ENGINE = MergeTreeORDER BY key;INSERT INTO test VALUES(1, 8, 16, 32, 64,  -8, -16, -32, -64, 32.32, 64.64);SELECT key, byteSize(u8) AS `byteSize(UInt8)`, byteSize(u16) AS `byteSize(UInt16)`, byteSize(u32) AS `byteSize(UInt32)`, byteSize(u64) AS `byteSize(UInt64)`, byteSize(i8) AS `byteSize(Int8)`, byteSize(i16) AS `byteSize(Int16)`, byteSize(i32) AS `byteSize(Int32)`, byteSize(i64) AS `byteSize(Int64)`, byteSize(f32) AS `byteSize(Float32)`, byteSize(f64) AS `byteSize(Float64)` FROM test ORDER BY key ASC FORMAT Vertical;", "SELECT byteSize(NULL, 1, 0.3, '');"], "Category": ["Other Functions"], "index": 879, "vector_txt": "879:Feature: byteSize(argument [, ...])\nDescription: byteSizeReturns an estimation of uncompressed byte size of its arguments in memory.SyntaxbyteSize(argument [, ...])Argumentsargument \u2014 Value.Returned valueEstimation of byte size of the arguments in memory. UInt64.\nExamples: SELECT byteSize('string');CREATE TABLE test(    `key` Int32,    `u8` UInt8,    `u16` UInt16,    `u32` UInt32,    `u64` UInt64,    `i8` Int8,    `i16` Int16,    `i32` Int32,    `i64` Int64,    `f32` Float32,    `f64` Float64)ENGINE = MergeTreeORDER BY key;INSERT INTO test VALUES(1, 8, 16, 32, 64,  -8, -16, -32, -64, 32.32, 64.64);SELECT key, byteSize(u8) AS `byteSize(UInt8)`, byteSize(u16) AS `byteSize(UInt16)`, byteSize(u32) AS `byteSize(UInt32)`, byteSize(u64) AS `byteSize(UInt64)`, byteSize(i8) AS `byteSize(Int8)`, byteSize(i16) AS `byteSize(Int16)`, byteSize(i32) AS `byteSize(Int32)`, byteSize(i64) AS `byteSize(Int64)`, byteSize(f32) AS `byteSize(Float32)`, byteSize(f64) AS `byteSize(Float64)` FROM test ORDER BY key ASC FORMAT Vertical;SELECT byteSize(NULL, 1, 0.3, '');\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayResize"], "Feature": ["arrayResize"], "Description": ["arrayResize", "Changes the length of the array.", "arrayResize(array, size[, extender])", "Arguments:", "array \u2014 Array.size \u2014 Required length of the array.If size is less than the original size of the array, the array is truncated from the right.If size is larger than the initial size of the array, the array is extended to the right with extender values or default values for the data type of the array items.extender \u2014 Value for extending an array. Can be NULL.", "Returned value:", "An array of length size.", "Examples of calls", "SELECT arrayResize([1], 3);", "\u250c\u2500arrayResize([1], 3)\u2500\u2510\u2502 [1,0,0]             \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "SELECT arrayResize([1], 3, NULL);", "\u250c\u2500arrayResize([1], 3, NULL)\u2500\u2510\u2502 [1,NULL,NULL]             \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Examples": ["arrayResize(array, size[, extender])", "SELECT arrayResize([1], 3);", "SELECT arrayResize([1], 3, NULL);"], "Category": ["Arrays Functions"], "index": 880, "vector_txt": "880:Feature: arrayResize\nDescription: arrayResizeChanges the length of the array.arrayResize(array, size[, extender])Arguments:array \u2014 Array.size \u2014 Required length of the array.If size is less than the original size of the array, the array is truncated from the right.If size is larger than the initial size of the array, the array is extended to the right with extender values or default values for the data type of the array items.extender \u2014 Value for extending an array. Can be NULL.Returned value:An array of length size.Examples of callsSELECT arrayResize([1], 3);\u250c\u2500arrayResize([1], 3)\u2500\u2510\u2502 [1,0,0]             \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT arrayResize([1], 3, NULL);\u250c\u2500arrayResize([1], 3, NULL)\u2500\u2510\u2502 [1,NULL,NULL]             \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nExamples: arrayResize(array, size[, extender])SELECT arrayResize([1], 3);SELECT arrayResize([1], 3, NULL);\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["materialize"], "Feature": ["materialize(x)"], "Description": ["materialize", "Turns a constant into a full column containing a single value.\nFull columns and constants are represented differently in memory.\nFunctions usually execute different code for normal and constant arguments, although the result should typically be the same.\nThis function can be used to debug this behavior.", "Syntax", "materialize(x)", "Parameters", "x \u2014 A constant. Constant.", "Returned value", "A column containing a single value x."], "Examples": ["SELECT countMatches('foobarfoo', 'foo');SELECT countMatches('foobarfoo', materialize('foo'));"], "Category": ["Other Functions"], "index": 881, "vector_txt": "881:Feature: materialize(x)\nDescription: materializeTurns a constant into a full column containing a single value.\nFull columns and constants are represented differently in memory.\nFunctions usually execute different code for normal and constant arguments, although the result should typically be the same.\nThis function can be used to debug this behavior.Syntaxmaterialize(x)Parametersx \u2014 A constant. Constant.Returned valueA column containing a single value x.\nExamples: SELECT countMatches('foobarfoo', 'foo');SELECT countMatches('foobarfoo', materialize('foo'));\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["ignore"], "Feature": ["ignore([arg1[, arg2[, ...]])"], "Description": ["ignore", "Accepts arbitrary arguments and unconditionally returns 0.\nThe argument is still evaluated internally, making it useful for eg. benchmarking.", "Syntax", "ignore([arg1[, arg2[, ...]])", "Arguments", "Accepts arbitrarily many arguments of arbitrary type, including NULL.", "Returned value", "Returns 0."], "Examples": ["SELECT ignore(0, 'ClickHouse', NULL);"], "Category": ["Other Functions"], "index": 882, "vector_txt": "882:Feature: ignore([arg1[, arg2[, ...]])\nDescription: ignoreAccepts arbitrary arguments and unconditionally returns 0.\nThe argument is still evaluated internally, making it useful for eg. benchmarking.Syntaxignore([arg1[, arg2[, ...]])ArgumentsAccepts arbitrarily many arguments of arbitrary type, including NULL.Returned valueReturns 0.\nExamples: SELECT ignore(0, 'ClickHouse', NULL);\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["sleep"], "Feature": ["sleep(seconds)"], "Description": ["sleep", "Used to introduce a delay or pause in the execution of a query. It is primarily used for testing and debugging purposes.", "Syntax", "sleep(seconds)", "Arguments", "seconds: UInt* or Float The number of seconds to pause the query execution to a maximum of 3 seconds. It can be a floating-point value to specify fractional seconds.", "Returned value", "This function does not return any value."], "Examples": ["SELECT sleep(2);"], "Category": ["Other Functions"], "index": 883, "vector_txt": "883:Feature: sleep(seconds)\nDescription: sleepUsed to introduce a delay or pause in the execution of a query. It is primarily used for testing and debugging purposes.Syntaxsleep(seconds)Argumentsseconds: UInt* or Float The number of seconds to pause the query execution to a maximum of 3 seconds. It can be a floating-point value to specify fractional seconds.Returned valueThis function does not return any value.\nExamples: SELECT sleep(2);\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["sleepEachRow"], "Feature": ["sleepEachRow(seconds)"], "Description": ["sleepEachRow", "Pauses the execution of a query for a specified number of seconds for each row in the result set.", "Syntax", "sleepEachRow(seconds)", "Arguments", "seconds: UInt* or Float* The number of seconds to pause the query execution for each row in the result set to a maximum of 3 seconds. It can be a floating-point value to specify fractional seconds.", "Returned value", "This function returns the same input values as it receives, without modifying them."], "Examples": ["SELECT number, sleepEachRow(0.5) FROM system.numbers LIMIT 5;"], "Category": ["Other Functions"], "index": 884, "vector_txt": "884:Feature: sleepEachRow(seconds)\nDescription: sleepEachRowPauses the execution of a query for a specified number of seconds for each row in the result set.SyntaxsleepEachRow(seconds)Argumentsseconds: UInt* or Float* The number of seconds to pause the query execution for each row in the result set to a maximum of 3 seconds. It can be a floating-point value to specify fractional seconds.Returned valueThis function returns the same input values as it receives, without modifying them.\nExamples: SELECT number, sleepEachRow(0.5) FROM system.numbers LIMIT 5;\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["currentDatabase"], "Feature": ["currentDatabase()"], "Description": ["currentDatabase", "Returns the name of the current database.\nUseful in table engine parameters of CREATE TABLE queries where you need to specify the database.", "Syntax", "currentDatabase()", "Returned value", "Returns the current database name. String."], "Examples": ["SELECT currentDatabase()"], "Category": ["Other Functions"], "index": 885, "vector_txt": "885:Feature: currentDatabase()\nDescription: currentDatabaseReturns the name of the current database.\nUseful in table engine parameters of CREATE TABLE queries where you need to specify the database.SyntaxcurrentDatabase()Returned valueReturns the current database name. String.\nExamples: SELECT currentDatabase()\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["currentUser"], "Feature": ["currentUser()"], "Description": ["currentUser", "Returns the name of the current user. In case of a distributed query, the name of the user who initiated the query is returned.", "Syntax", "currentUser()", "Aliases: user(), USER(), current_user(). Aliases are case insensitive.", "Returned values", "The name of the current user. String.In distributed queries, the login of the user who initiated the query. String."], "Examples": ["SELECT currentUser();"], "Category": ["Other Functions"], "index": 886, "vector_txt": "886:Feature: currentUser()\nDescription: currentUserReturns the name of the current user. In case of a distributed query, the name of the user who initiated the query is returned.SyntaxcurrentUser()Aliases: user(), USER(), current_user(). Aliases are case insensitive.Returned valuesThe name of the current user. String.In distributed queries, the login of the user who initiated the query. String.\nExamples: SELECT currentUser();\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["currentSchemas"], "Feature": ["currentSchemas(bool)"], "Description": ["currentSchemas", "Returns a single-element array with the name of the current database schema.", "Syntax", "currentSchemas(bool)", "Alias: current_schemas.", "Arguments", "bool: A boolean value. Bool.", "NoteThe boolean argument is ignored. It only exists for the sake of compatibility with the implementation of this function in PostgreSQL.", "Returned values", "Returns a single-element array with the name of the current database"], "Examples": ["SELECT currentSchemas(true);"], "Category": ["Other Functions"], "index": 887, "vector_txt": "887:Feature: currentSchemas(bool)\nDescription: currentSchemasReturns a single-element array with the name of the current database schema.SyntaxcurrentSchemas(bool)Alias: current_schemas.Argumentsbool: A boolean value. Bool.NoteThe boolean argument is ignored. It only exists for the sake of compatibility with the implementation of this function in PostgreSQL.Returned valuesReturns a single-element array with the name of the current database\nExamples: SELECT currentSchemas(true);\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["isConstant"], "Feature": ["isConstant(x)"], "Description": ["isConstant", "Returns whether the argument is a constant expression.", "A constant expression is an expression whose result is known during query analysis, i.e.\u00a0before execution. For example, expressions over literals are constant expressions.", "This function is mostly intended for development, debugging and demonstration.", "Syntax", "isConstant(x)", "Arguments", "x \u2014 Expression to check.", "Returned values", "1 if x is constant. UInt8.0 if x is non-constant. UInt8."], "Examples": ["SELECT isConstant(x + 1) FROM (SELECT 43 AS x)", "WITH 3.14 AS pi SELECT isConstant(cos(pi))", "SELECT isConstant(number) FROM numbers(1)"], "Category": ["Other Functions"], "index": 888, "vector_txt": "888:Feature: isConstant(x)\nDescription: isConstantReturns whether the argument is a constant expression.A constant expression is an expression whose result is known during query analysis, i.e.\u00a0before execution. For example, expressions over literals are constant expressions.This function is mostly intended for development, debugging and demonstration.SyntaxisConstant(x)Argumentsx \u2014 Expression to check.Returned values1 if x is constant. UInt8.0 if x is non-constant. UInt8.\nExamples: SELECT isConstant(x + 1) FROM (SELECT 43 AS x)WITH 3.14 AS pi SELECT isConstant(cos(pi))SELECT isConstant(number) FROM numbers(1)\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["hasColumnInTable"], "Feature": ["hasColumnInTable(\\[\u2018hostname\u2019\\[, \u2018username\u2019\\[, \u2018password\u2019\\]\\],\\] \u2018database\u2019, \u2018table\u2019, \u2018column\u2019)"], "Description": ["hasColumnInTable", "Given the database name, the table name, and the column name as constant strings, returns 1 if the given column exists, otherwise 0.", "Syntax", "hasColumnInTable(\\[\u2018hostname\u2019\\[, \u2018username\u2019\\[, \u2018password\u2019\\]\\],\\] \u2018database\u2019, \u2018table\u2019, \u2018column\u2019)", "Parameters", "database : name of the database. String literaltable : name of the table. String literalcolumn : name of the column. String literalhostname : remote server name to perform the check on. String literalusername : username for remote server. String literalpassword : password for remote server. String literal", "Returned value", "1 if the given column exists.0, otherwise.", "Implementation details", "For elements in a nested data structure, the function checks for the existence of a column. For the nested data structure itself, the function returns 0."], "Examples": ["SELECT hasColumnInTable('system','metrics','metric')", "SELECT hasColumnInTable('system','metrics','non-existing_column')"], "Category": ["Other Functions"], "index": 889, "vector_txt": "889:Feature: hasColumnInTable(\\[\u2018hostname\u2019\\[, \u2018username\u2019\\[, \u2018password\u2019\\]\\],\\] \u2018database\u2019, \u2018table\u2019, \u2018column\u2019)\nDescription: hasColumnInTableGiven the database name, the table name, and the column name as constant strings, returns 1 if the given column exists, otherwise 0.SyntaxhasColumnInTable(\\[\u2018hostname\u2019\\[, \u2018username\u2019\\[, \u2018password\u2019\\]\\],\\] \u2018database\u2019, \u2018table\u2019, \u2018column\u2019)Parametersdatabase : name of the database. String literaltable : name of the table. String literalcolumn : name of the column. String literalhostname : remote server name to perform the check on. String literalusername : username for remote server. String literalpassword : password for remote server. String literalReturned value1 if the given column exists.0, otherwise.Implementation detailsFor elements in a nested data structure, the function checks for the existence of a column. For the nested data structure itself, the function returns 0.\nExamples: SELECT hasColumnInTable('system','metrics','metric')SELECT hasColumnInTable('system','metrics','non-existing_column')\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["hasThreadFuzzer"], "Feature": ["hasThreadFuzzer();"], "Description": ["hasThreadFuzzer", "Returns whether Thread Fuzzer is effective. It can be used in tests to prevent runs from being too long.", "Syntax", "hasThreadFuzzer();"], "Examples": ["hasThreadFuzzer();"], "Category": ["Other Functions"], "index": 890, "vector_txt": "890:Feature: hasThreadFuzzer();\nDescription: hasThreadFuzzerReturns whether Thread Fuzzer is effective. It can be used in tests to prevent runs from being too long.SyntaxhasThreadFuzzer();\nExamples: hasThreadFuzzer();\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arraySlice"], "Feature": ["arraySlice(array, offset[, length])"], "Description": ["arraySlice", "Returns a slice of the array.", "arraySlice(array, offset[, length])", "Arguments", "array \u2013 Array of data.offset \u2013 Indent from the edge of the array. A positive value indicates an offset on the left, and a negative value is an indent on the right. Numbering of the array items begins with 1.length \u2013 The length of the required slice. If you specify a negative value, the function returns an open slice [offset, array_length - length]. If you omit the value, the function returns the slice [offset, the_end_of_array]."], "Examples": ["SELECT arraySlice([1, 2, NULL, 4, 5], 2, 3) AS res;"], "Category": ["Arrays Functions"], "index": 891, "vector_txt": "891:Feature: arraySlice(array, offset[, length])\nDescription: arraySliceReturns a slice of the array.arraySlice(array, offset[, length])Argumentsarray \u2013 Array of data.offset \u2013 Indent from the edge of the array. A positive value indicates an offset on the left, and a negative value is an indent on the right. Numbering of the array items begins with 1.length \u2013 The length of the required slice. If you specify a negative value, the function returns an open slice [offset, array_length - length]. If you omit the value, the function returns the slice [offset, the_end_of_array].\nExamples: SELECT arraySlice([1, 2, NULL, 4, 5], 2, 3) AS res;\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["bar"], "Feature": ["bar"], "Description": ["bar", "Builds a bar chart.", "bar(x, min, max, width) draws a band with width proportional to (x - min) and equal to width characters when x = max.", "Arguments", "x \u2014 Size to display.min, max \u2014 Integer constants. The value must fit in Int64.width \u2014 Constant, positive integer, can be fractional.", "The band is drawn with accuracy to one eighth of a symbol."], "Examples": ["SELECT    toHour(EventTime) AS h,    count() AS c,    bar(c, 0, 600000, 20) AS barFROM test.hitsGROUP BY hORDER BY h ASC"], "Category": ["Other Functions"], "index": 892, "vector_txt": "892:Feature: bar\nDescription: barBuilds a bar chart.bar(x, min, max, width) draws a band with width proportional to (x - min) and equal to width characters when x = max.Argumentsx \u2014 Size to display.min, max \u2014 Integer constants. The value must fit in Int64.width \u2014 Constant, positive integer, can be fractional.The band is drawn with accuracy to one eighth of a symbol.\nExamples: SELECT    toHour(EventTime) AS h,    count() AS c,    bar(c, 0, 600000, 20) AS barFROM test.hitsGROUP BY hORDER BY h ASC\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["transform"], "Feature": ["transform"], "Description": ["transform", "Transforms a value according to the explicitly defined mapping of some elements to other ones.\nThere are two variations of this function:", "transform(x, array_from, array_to, default)", "x \u2013 What to transform.", "array_from \u2013 Constant array of values to convert.", "array_to \u2013 Constant array of values to convert the values in \u2018from\u2019 to.", "default \u2013 Which value to use if \u2018x\u2019 is not equal to any of the values in \u2018from\u2019.", "array_from and array_to must have equally many elements.", "Signature:", "For x equal to one of the elements in array_from, the function returns the corresponding element in array_to, i.e. the one at the same array index. Otherwise, it returns default. If multiple matching elements exist array_from, it returns the element corresponding to the first of them.", "transform(T, Array(T), Array(U), U) -> U", "T and U can be numeric, string, or Date or DateTime types.\nThe same letter (T or U) means that types must be mutually compatible and not necessarily equal.\nFor example, the first argument could have type Int64, while the second argument could have type Array(UInt16)."], "Examples": ["SELECT    transform(SearchEngineID, [2, 3], ['Yandex', 'Google'], 'Other') AS title,    count() AS cFROM test.hitsWHERE SearchEngineID != 0GROUP BY titleORDER BY c DESC", "SELECT    transform(domain(Referer), ['yandex.ru', 'google.ru', 'vkontakte.ru'], ['www.yandex', 'example.com', 'vk.com']) AS s,    count() AS cFROM test.hitsGROUP BY domain(Referer)ORDER BY count() DESCLIMIT 10"], "Category": ["Other Functions"], "index": 893, "vector_txt": "893:Feature: transform\nDescription: transformTransforms a value according to the explicitly defined mapping of some elements to other ones.\nThere are two variations of this function:transform(x, array_from, array_to, default)x \u2013 What to transform.array_from \u2013 Constant array of values to convert.array_to \u2013 Constant array of values to convert the values in \u2018from\u2019 to.default \u2013 Which value to use if \u2018x\u2019 is not equal to any of the values in \u2018from\u2019.array_from and array_to must have equally many elements.Signature:For x equal to one of the elements in array_from, the function returns the corresponding element in array_to, i.e. the one at the same array index. Otherwise, it returns default. If multiple matching elements exist array_from, it returns the element corresponding to the first of them.transform(T, Array(T), Array(U), U) -> UT and U can be numeric, string, or Date or DateTime types.\nThe same letter (T or U) means that types must be mutually compatible and not necessarily equal.\nFor example, the first argument could have type Int64, while the second argument could have type Array(UInt16).\nExamples: SELECT    transform(SearchEngineID, [2, 3], ['Yandex', 'Google'], 'Other') AS title,    count() AS cFROM test.hitsWHERE SearchEngineID != 0GROUP BY titleORDER BY c DESCSELECT    transform(domain(Referer), ['yandex.ru', 'google.ru', 'vkontakte.ru'], ['www.yandex', 'example.com', 'vk.com']) AS s,    count() AS cFROM test.hitsGROUP BY domain(Referer)ORDER BY count() DESCLIMIT 10\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["formatReadableDecimalSize"], "Feature": ["formatReadableDecimalSize(x)"], "Description": ["formatReadableDecimalSize", "Given a size (number of bytes), this function returns a readable, rounded size with suffix (KB, MB, etc.) as string.", "The opposite operations of this function are parseReadableSize, parseReadableSizeOrZero, and parseReadableSizeOrNull.", "Syntax", "formatReadableDecimalSize(x)"], "Examples": ["SELECT    arrayJoin([1, 1024, 1024*1024, 192851925]) AS filesize_bytes,    formatReadableDecimalSize(filesize_bytes) AS filesize"], "Category": ["Other Functions"], "index": 894, "vector_txt": "894:Feature: formatReadableDecimalSize(x)\nDescription: formatReadableDecimalSizeGiven a size (number of bytes), this function returns a readable, rounded size with suffix (KB, MB, etc.) as string.The opposite operations of this function are parseReadableSize, parseReadableSizeOrZero, and parseReadableSizeOrNull.SyntaxformatReadableDecimalSize(x)\nExamples: SELECT    arrayJoin([1, 1024, 1024*1024, 192851925]) AS filesize_bytes,    formatReadableDecimalSize(filesize_bytes) AS filesize\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["formatReadableSize"], "Feature": ["formatReadableSize(x)"], "Description": ["formatReadableSize", "Given a size (number of bytes), this function returns a readable, rounded size with suffix (KiB, MiB, etc.) as string.", "The opposite operations of this function are parseReadableSize, parseReadableSizeOrZero, and parseReadableSizeOrNull.", "Syntax", "formatReadableSize(x)", "Alias: FORMAT_BYTES."], "Examples": ["SELECT    arrayJoin([1, 1024, 1024*1024, 192851925]) AS filesize_bytes,    formatReadableSize(filesize_bytes) AS filesize"], "Category": ["Other Functions"], "index": 895, "vector_txt": "895:Feature: formatReadableSize(x)\nDescription: formatReadableSizeGiven a size (number of bytes), this function returns a readable, rounded size with suffix (KiB, MiB, etc.) as string.The opposite operations of this function are parseReadableSize, parseReadableSizeOrZero, and parseReadableSizeOrNull.SyntaxformatReadableSize(x)Alias: FORMAT_BYTES.\nExamples: SELECT    arrayJoin([1, 1024, 1024*1024, 192851925]) AS filesize_bytes,    formatReadableSize(filesize_bytes) AS filesize\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["formatReadableQuantity"], "Feature": ["formatReadableQuantity(x)"], "Description": ["formatReadableQuantity", "Given a number, this function returns a rounded number with suffix (thousand, million, billion, etc.) as string.", "Syntax", "formatReadableQuantity(x)"], "Examples": ["SELECT    arrayJoin([1024, 1234 * 1000, (4567 * 1000) * 1000, 98765432101234]) AS number,    formatReadableQuantity(number) AS number_for_humans"], "Category": ["Other Functions"], "index": 896, "vector_txt": "896:Feature: formatReadableQuantity(x)\nDescription: formatReadableQuantityGiven a number, this function returns a rounded number with suffix (thousand, million, billion, etc.) as string.SyntaxformatReadableQuantity(x)\nExamples: SELECT    arrayJoin([1024, 1234 * 1000, (4567 * 1000) * 1000, 98765432101234]) AS number,    formatReadableQuantity(number) AS number_for_humans\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["formatReadableTimeDelta"], "Feature": ["formatReadableTimeDelta(column[, maximum_unit, minimum_unit])"], "Description": ["formatReadableTimeDelta", "Given a time interval (delta) in seconds, this function returns a time delta with year/month/day/hour/minute/second/millisecond/microsecond/nanosecond as string.", "Syntax", "formatReadableTimeDelta(column[, maximum_unit, minimum_unit])", "Arguments", "column \u2014 A column with a numeric time delta.maximum_unit \u2014 Optional. Maximum unit to show.Acceptable values: nanoseconds, microseconds, milliseconds, seconds, minutes, hours, days, months, years.Default value: years.minimum_unit \u2014 Optional. Minimum unit to show. All smaller units are truncated.Acceptable values: nanoseconds, microseconds, milliseconds, seconds, minutes, hours, days, months, years.If explicitly specified value is bigger than maximum_unit, an exception will be thrown.Default value: seconds if maximum_unit is seconds or bigger, nanoseconds otherwise."], "Examples": ["SELECT    arrayJoin([100, 12345, 432546534]) AS elapsed,    formatReadableTimeDelta(elapsed) AS time_delta", "SELECT    arrayJoin([100, 12345, 432546534]) AS elapsed,    formatReadableTimeDelta(elapsed, 'minutes') AS time_delta", "SELECT    arrayJoin([100, 12345, 432546534.00000006]) AS elapsed,    formatReadableTimeDelta(elapsed, 'minutes', 'nanoseconds') AS time_delta"], "Category": ["Other Functions"], "index": 897, "vector_txt": "897:Feature: formatReadableTimeDelta(column[, maximum_unit, minimum_unit])\nDescription: formatReadableTimeDeltaGiven a time interval (delta) in seconds, this function returns a time delta with year/month/day/hour/minute/second/millisecond/microsecond/nanosecond as string.SyntaxformatReadableTimeDelta(column[, maximum_unit, minimum_unit])Argumentscolumn \u2014 A column with a numeric time delta.maximum_unit \u2014 Optional. Maximum unit to show.Acceptable values: nanoseconds, microseconds, milliseconds, seconds, minutes, hours, days, months, years.Default value: years.minimum_unit \u2014 Optional. Minimum unit to show. All smaller units are truncated.Acceptable values: nanoseconds, microseconds, milliseconds, seconds, minutes, hours, days, months, years.If explicitly specified value is bigger than maximum_unit, an exception will be thrown.Default value: seconds if maximum_unit is seconds or bigger, nanoseconds otherwise.\nExamples: SELECT    arrayJoin([100, 12345, 432546534]) AS elapsed,    formatReadableTimeDelta(elapsed) AS time_deltaSELECT    arrayJoin([100, 12345, 432546534]) AS elapsed,    formatReadableTimeDelta(elapsed, 'minutes') AS time_deltaSELECT    arrayJoin([100, 12345, 432546534.00000006]) AS elapsed,    formatReadableTimeDelta(elapsed, 'minutes', 'nanoseconds') AS time_delta\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["parseReadableSize"], "Feature": ["formatReadableSize(x)"], "Description": ["parseReadableSize", "Given a string containing a byte size and B, KiB, KB, MiB, MB, etc. as a unit (i.e. ISO/IEC 80000-13 or decimal byte unit), this function returns the corresponding number of bytes.\nIf the function is unable to parse the input value, it throws an exception.", "The inverse operations of this function are formatReadableSize and formatReadableDecimalSize.", "Syntax", "formatReadableSize(x)", "Arguments", "x : Readable size with ISO/IEC 80000-13 or decimal byte unit (String).", "Returned value", "Number of bytes, rounded up to the nearest integer (UInt64)."], "Examples": ["SELECT    arrayJoin(['1 B', '1 KiB', '3 MB', '5.314 KiB']) AS readable_sizes,      parseReadableSize(readable_sizes) AS sizes;"], "Category": ["Other Functions"], "index": 898, "vector_txt": "898:Feature: formatReadableSize(x)\nDescription: parseReadableSizeGiven a string containing a byte size and B, KiB, KB, MiB, MB, etc. as a unit (i.e. ISO/IEC 80000-13 or decimal byte unit), this function returns the corresponding number of bytes.\nIf the function is unable to parse the input value, it throws an exception.The inverse operations of this function are formatReadableSize and formatReadableDecimalSize.SyntaxformatReadableSize(x)Argumentsx : Readable size with ISO/IEC 80000-13 or decimal byte unit (String).Returned valueNumber of bytes, rounded up to the nearest integer (UInt64).\nExamples: SELECT    arrayJoin(['1 B', '1 KiB', '3 MB', '5.314 KiB']) AS readable_sizes,      parseReadableSize(readable_sizes) AS sizes;\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["parseReadableSizeOrNull"], "Feature": ["parseReadableSizeOrNull(x)"], "Description": ["parseReadableSizeOrNull", "Given a string containing a byte size and B, KiB, KB, MiB, MB, etc. as a unit (i.e. ISO/IEC 80000-13 or decimal byte unit), this function returns the corresponding number of bytes.\nIf the function is unable to parse the input value, it returns NULL.", "The inverse operations of this function are formatReadableSize and formatReadableDecimalSize.", "Syntax", "parseReadableSizeOrNull(x)", "Arguments", "x : Readable size with ISO/IEC 80000-13  or decimal byte unit (String).", "Returned value", "Number of bytes, rounded up to the nearest integer, or NULL if unable to parse the input (Nullable(UInt64))."], "Examples": ["SELECT    arrayJoin(['1 B', '1 KiB', '3 MB', '5.314 KiB', 'invalid']) AS readable_sizes,      parseReadableSizeOrNull(readable_sizes) AS sizes;"], "Category": ["Other Functions"], "index": 899, "vector_txt": "899:Feature: parseReadableSizeOrNull(x)\nDescription: parseReadableSizeOrNullGiven a string containing a byte size and B, KiB, KB, MiB, MB, etc. as a unit (i.e. ISO/IEC 80000-13 or decimal byte unit), this function returns the corresponding number of bytes.\nIf the function is unable to parse the input value, it returns NULL.The inverse operations of this function are formatReadableSize and formatReadableDecimalSize.SyntaxparseReadableSizeOrNull(x)Argumentsx : Readable size with ISO/IEC 80000-13  or decimal byte unit (String).Returned valueNumber of bytes, rounded up to the nearest integer, or NULL if unable to parse the input (Nullable(UInt64)).\nExamples: SELECT    arrayJoin(['1 B', '1 KiB', '3 MB', '5.314 KiB', 'invalid']) AS readable_sizes,      parseReadableSizeOrNull(readable_sizes) AS sizes;\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["parseReadableSizeOrZero"], "Feature": ["parseReadableSizeOrZero(x)"], "Description": ["parseReadableSizeOrZero", "Given a string containing a byte size and B, KiB, KB, MiB, MB, etc. as a unit (i.e. ISO/IEC 80000-13 or decimal byte unit), this function returns the corresponding number of bytes. If the function is unable to parse the input value, it returns 0.", "The inverse operations of this function are formatReadableSize and formatReadableDecimalSize.", "Syntax", "parseReadableSizeOrZero(x)", "Arguments", "x : Readable size with ISO/IEC 80000-13  or decimal byte unit  (String).", "Returned value", "Number of bytes, rounded up to the nearest integer, or 0 if unable to parse the input (UInt64)."], "Examples": ["SELECT    arrayJoin(['1 B', '1 KiB', '3 MB', '5.314 KiB', 'invalid']) AS readable_sizes,      parseReadableSizeOrZero(readable_sizes) AS sizes;"], "Category": ["Other Functions"], "index": 900, "vector_txt": "900:Feature: parseReadableSizeOrZero(x)\nDescription: parseReadableSizeOrZeroGiven a string containing a byte size and B, KiB, KB, MiB, MB, etc. as a unit (i.e. ISO/IEC 80000-13 or decimal byte unit), this function returns the corresponding number of bytes. If the function is unable to parse the input value, it returns 0.The inverse operations of this function are formatReadableSize and formatReadableDecimalSize.SyntaxparseReadableSizeOrZero(x)Argumentsx : Readable size with ISO/IEC 80000-13  or decimal byte unit  (String).Returned valueNumber of bytes, rounded up to the nearest integer, or 0 if unable to parse the input (UInt64).\nExamples: SELECT    arrayJoin(['1 B', '1 KiB', '3 MB', '5.314 KiB', 'invalid']) AS readable_sizes,      parseReadableSizeOrZero(readable_sizes) AS sizes;\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["parseTimeDelta"], "Feature": ["parseTimeDelta(timestr)"], "Description": ["parseTimeDelta", "Parse a sequence of numbers followed by something resembling a time unit.", "Syntax", "parseTimeDelta(timestr)", "Arguments", "timestr \u2014 A sequence of numbers followed by something resembling a time unit.", "Returned value", "A floating-point number with the number of seconds."], "Examples": ["SELECT parseTimeDelta('11s+22min')", "SELECT parseTimeDelta('1yr2mo')"], "Category": ["Other Functions"], "index": 901, "vector_txt": "901:Feature: parseTimeDelta(timestr)\nDescription: parseTimeDeltaParse a sequence of numbers followed by something resembling a time unit.SyntaxparseTimeDelta(timestr)Argumentstimestr \u2014 A sequence of numbers followed by something resembling a time unit.Returned valueA floating-point number with the number of seconds.\nExamples: SELECT parseTimeDelta('11s+22min')SELECT parseTimeDelta('1yr2mo')\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayShingles"], "Feature": ["arrayShingles(array, length)"], "Description": ["arrayShingles", "Generates an array of \"shingles\", i.e. consecutive sub-arrays with specified length of the input array.", "Syntax", "arrayShingles(array, length)", "Arguments", "array \u2014 Input array Array.length \u2014 The length of each shingle.", "Returned value", "An array of generated shingles. Array."], "Examples": ["SELECT arrayShingles([1,2,3,4], 3) as res;"], "Category": ["Arrays Functions"], "index": 902, "vector_txt": "902:Feature: arrayShingles(array, length)\nDescription: arrayShinglesGenerates an array of \"shingles\", i.e. consecutive sub-arrays with specified length of the input array.SyntaxarrayShingles(array, length)Argumentsarray \u2014 Input array Array.length \u2014 The length of each shingle.Returned valueAn array of generated shingles. Array.\nExamples: SELECT arrayShingles([1,2,3,4], 3) as res;\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["least"], "Feature": ["least(a, b)"], "Description": ["least", "Returns the smaller value of a and b.", "Syntax", "least(a, b)"], "Examples": ["least(a, b)"], "Category": ["Other Functions"], "index": 903, "vector_txt": "903:Feature: least(a, b)\nDescription: leastReturns the smaller value of a and b.Syntaxleast(a, b)\nExamples: least(a, b)\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["greatest"], "Feature": ["greatest(a, b)"], "Description": ["greatest", "Returns the larger value of a and b.", "Syntax", "greatest(a, b)"], "Examples": ["greatest(a, b)"], "Category": ["Other Functions"], "index": 904, "vector_txt": "904:Feature: greatest(a, b)\nDescription: greatestReturns the larger value of a and b.Syntaxgreatest(a, b)\nExamples: greatest(a, b)\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["uptime"], "Feature": ["uptime()"], "Description": ["uptime", "Returns the server\u2019s uptime in seconds.\nIf executed in the context of a distributed table, this function generates a normal column with values relevant to each shard. Otherwise it produces a constant value.", "Syntax", "uptime()", "Returned value", "Time value of seconds. UInt32."], "Examples": ["SELECT uptime() as Uptime;"], "Category": ["Other Functions"], "index": 905, "vector_txt": "905:Feature: uptime()\nDescription: uptimeReturns the server\u2019s uptime in seconds.\nIf executed in the context of a distributed table, this function generates a normal column with values relevant to each shard. Otherwise it produces a constant value.Syntaxuptime()Returned valueTime value of seconds. UInt32.\nExamples: SELECT uptime() as Uptime;\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["version"], "Feature": ["version()"], "Description": ["version", "Returns the current version of ClickHouse as a string in the form of:", "Major versionMinor versionPatch versionNumber of commits since the previous stable release.", "major_version.minor_version.patch_version.number_of_commits_since_the_previous_stable_release", "If executed in the context of a distributed table, this function generates a normal column with values relevant to each shard. Otherwise, it produces a constant value.", "Syntax", "version()", "Arguments", "None.", "Returned value", "Current version of ClickHouse. String.", "Implementation details", "None."], "Examples": ["SELECT version()"], "Category": ["Other Functions"], "index": 906, "vector_txt": "906:Feature: version()\nDescription: versionReturns the current version of ClickHouse as a string in the form of:Major versionMinor versionPatch versionNumber of commits since the previous stable release.major_version.minor_version.patch_version.number_of_commits_since_the_previous_stable_releaseIf executed in the context of a distributed table, this function generates a normal column with values relevant to each shard. Otherwise, it produces a constant value.Syntaxversion()ArgumentsNone.Returned valueCurrent version of ClickHouse. String.Implementation detailsNone.\nExamples: SELECT version()\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["buildId"], "Feature": ["buildId()"], "Description": ["buildId", "Returns the build ID generated by a compiler for the running ClickHouse server binary.\nIf executed in the context of a distributed table, this function generates a normal column with values relevant to each shard. Otherwise it produces a constant value.", "Syntax", "buildId()"], "Examples": ["buildId()"], "Category": ["Other Functions"], "index": 907, "vector_txt": "907:Feature: buildId()\nDescription: buildIdReturns the build ID generated by a compiler for the running ClickHouse server binary.\nIf executed in the context of a distributed table, this function generates a normal column with values relevant to each shard. Otherwise it produces a constant value.SyntaxbuildId()\nExamples: buildId()\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["blockNumber"], "Feature": ["blockNumber()"], "Description": ["blockNumber", "Returns a monotonically increasing sequence number of the block containing the row.\nThe returned block number is updated on a best-effort basis, i.e. it may not be fully accurate.", "Syntax", "blockNumber()", "Returned value", "Sequence number of the data block where the row is located. UInt64."], "Examples": ["SELECT blockNumber()FROM(    SELECT *    FROM system.numbers    LIMIT 10) SETTINGS max_block_size = 2"], "Category": ["Other Functions"], "index": 908, "vector_txt": "908:Feature: blockNumber()\nDescription: blockNumberReturns a monotonically increasing sequence number of the block containing the row.\nThe returned block number is updated on a best-effort basis, i.e. it may not be fully accurate.SyntaxblockNumber()Returned valueSequence number of the data block where the row is located. UInt64.\nExamples: SELECT blockNumber()FROM(    SELECT *    FROM system.numbers    LIMIT 10) SETTINGS max_block_size = 2\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["rowNumberInBlock"], "Feature": ["rowNumberInBlock()"], "Description": ["rowNumberInBlock", "Returns for each block processed by rowNumberInBlock the number of the current row.\nThe returned number starts for each block at 0.", "Syntax", "rowNumberInBlock()", "Returned value", "Ordinal number of the row in the data block starting from 0. UInt64."], "Examples": ["SELECT rowNumberInBlock()FROM(    SELECT *    FROM system.numbers_mt    LIMIT 10) SETTINGS max_block_size = 2"], "Category": ["Other Functions"], "index": 909, "vector_txt": "909:Feature: rowNumberInBlock()\nDescription: rowNumberInBlockReturns for each block processed by rowNumberInBlock the number of the current row.\nThe returned number starts for each block at 0.SyntaxrowNumberInBlock()Returned valueOrdinal number of the row in the data block starting from 0. UInt64.\nExamples: SELECT rowNumberInBlock()FROM(    SELECT *    FROM system.numbers_mt    LIMIT 10) SETTINGS max_block_size = 2\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["rowNumberInAllBlocks"], "Feature": ["rowNumberInAllBlocks()"], "Description": ["rowNumberInAllBlocks", "Returns a unique row number for each row processed by rowNumberInAllBlocks. The returned numbers start at 0.", "Syntax", "rowNumberInAllBlocks()", "Returned value", "Ordinal number of the row in the data block starting from 0. UInt64."], "Examples": ["SELECT rowNumberInAllBlocks()FROM(    SELECT *    FROM system.numbers_mt    LIMIT 10)SETTINGS max_block_size = 2"], "Category": ["Other Functions"], "index": 910, "vector_txt": "910:Feature: rowNumberInAllBlocks()\nDescription: rowNumberInAllBlocksReturns a unique row number for each row processed by rowNumberInAllBlocks. The returned numbers start at 0.SyntaxrowNumberInAllBlocks()Returned valueOrdinal number of the row in the data block starting from 0. UInt64.\nExamples: SELECT rowNumberInAllBlocks()FROM(    SELECT *    FROM system.numbers_mt    LIMIT 10)SETTINGS max_block_size = 2\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["neighbor"], "Feature": ["neighbor(column, offset[, default_value])"], "Description": ["neighbor", "The window function that provides access to a row at a specified offset before or after the current row of a given column.", "Syntax", "neighbor(column, offset[, default_value])", "The result of the function depends on the affected data blocks and the order of data in the block.", "NoteOnly returns neighbor inside the currently processed data block.\nBecause of this error-prone behavior the function is DEPRECATED, please use proper window functions instead.", "The order of rows during calculation of neighbor() can differ from the order of rows returned to the user.\nTo prevent that you can create a subquery with ORDER BY and call the function from outside the subquery.", "Arguments", "column \u2014 A column name or scalar expression.offset \u2014 The number of rows to look before or ahead of the current row in column. Int64.default_value \u2014 Optional. The returned value if offset is beyond the block boundaries. Type of data blocks affected.", "Returned values", "Value of column with offset distance from current row, if offset is not outside the block boundaries.The default value of column or default_value (if given), if offset is outside the block boundaries.", "NoteThe return type will be that of the data blocks affected or the default value type."], "Examples": ["SELECT number, neighbor(number, 2) FROM system.numbers LIMIT 10;", "SELECT number, neighbor(number, 2, 999) FROM system.numbers LIMIT 10;", "WITH toDate('2018-01-01') AS start_dateSELECT    toStartOfMonth(start_date + (number * 32)) AS month,    toInt32(month) % 100 AS money,    neighbor(money, -12) AS prev_year,    round(prev_year / money, 2) AS year_over_yearFROM numbers(16)"], "Category": ["Other Functions"], "index": 911, "vector_txt": "911:Feature: neighbor(column, offset[, default_value])\nDescription: neighborThe window function that provides access to a row at a specified offset before or after the current row of a given column.Syntaxneighbor(column, offset[, default_value])The result of the function depends on the affected data blocks and the order of data in the block.NoteOnly returns neighbor inside the currently processed data block.\nBecause of this error-prone behavior the function is DEPRECATED, please use proper window functions instead.The order of rows during calculation of neighbor() can differ from the order of rows returned to the user.\nTo prevent that you can create a subquery with ORDER BY and call the function from outside the subquery.Argumentscolumn \u2014 A column name or scalar expression.offset \u2014 The number of rows to look before or ahead of the current row in column. Int64.default_value \u2014 Optional. The returned value if offset is beyond the block boundaries. Type of data blocks affected.Returned valuesValue of column with offset distance from current row, if offset is not outside the block boundaries.The default value of column or default_value (if given), if offset is outside the block boundaries.NoteThe return type will be that of the data blocks affected or the default value type.\nExamples: SELECT number, neighbor(number, 2) FROM system.numbers LIMIT 10;SELECT number, neighbor(number, 2, 999) FROM system.numbers LIMIT 10;WITH toDate('2018-01-01') AS start_dateSELECT    toStartOfMonth(start_date + (number * 32)) AS month,    toInt32(month) % 100 AS money,    neighbor(money, -12) AS prev_year,    round(prev_year / money, 2) AS year_over_yearFROM numbers(16)\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["runningDifference"], "Feature": ["runningDifference(x)"], "Description": ["runningDifference", "Calculates the difference between two consecutive row values in the data block.\nReturns 0 for the first row, and for subsequent rows the difference to the previous row.", "NoteOnly returns differences inside the currently processed data block.\nBecause of this error-prone behavior the function is DEPRECATED, please use proper window functions instead.", "The result of the function depends on the affected data blocks and the order of data in the block.", "The order of rows during calculation of runningDifference() can differ from the order of rows returned to the user.\nTo prevent that you can create a subquery with ORDER BY and call the function from outside the subquery.", "Syntax", "runningDifference(x)"], "Examples": ["SELECT    EventID,    EventTime,    runningDifference(EventTime) AS deltaFROM(    SELECT        EventID,        EventTime    FROM events    WHERE EventDate = '2016-11-24'    ORDER BY EventTime ASC    LIMIT 5)", "SELECT    number,    runningDifference(number + 1) AS diffFROM numbers(100000)WHERE diff != 1", "set max_block_size=100000 -- default value is 65536!SELECT    number,    runningDifference(number + 1) AS diffFROM numbers(100000)WHERE diff != 1"], "Category": ["Other Functions"], "index": 912, "vector_txt": "912:Feature: runningDifference(x)\nDescription: runningDifferenceCalculates the difference between two consecutive row values in the data block.\nReturns 0 for the first row, and for subsequent rows the difference to the previous row.NoteOnly returns differences inside the currently processed data block.\nBecause of this error-prone behavior the function is DEPRECATED, please use proper window functions instead.The result of the function depends on the affected data blocks and the order of data in the block.The order of rows during calculation of runningDifference() can differ from the order of rows returned to the user.\nTo prevent that you can create a subquery with ORDER BY and call the function from outside the subquery.SyntaxrunningDifference(x)\nExamples: SELECT    EventID,    EventTime,    runningDifference(EventTime) AS deltaFROM(    SELECT        EventID,        EventTime    FROM events    WHERE EventDate = '2016-11-24'    ORDER BY EventTime ASC    LIMIT 5)SELECT    number,    runningDifference(number + 1) AS diffFROM numbers(100000)WHERE diff != 1set max_block_size=100000 -- default value is 65536!SELECT    number,    runningDifference(number + 1) AS diffFROM numbers(100000)WHERE diff != 1\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arraySort([func,] arr, ...)"], "Feature": ["arraySort([func,] arr, ...)"], "Description": ["arraySort([func,] arr, ...)", "Sorts the elements of the arr array in ascending order. If the func function is specified, sorting order is determined by the result of the func function applied to the elements of the array. If func accepts multiple arguments, the arraySort function is passed several arrays that the arguments of func will correspond to. Detailed examples are shown at the end of arraySort description.", "Example of integer values sorting:", "SELECT arraySort([1, 3, 3, 0]);", "\u250c\u2500arraySort([1, 3, 3, 0])\u2500\u2510\u2502 [0,1,3,3]               \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "Example of string values sorting:", "SELECT arraySort(['hello', 'world', '!']);", "\u250c\u2500arraySort(['hello', 'world', '!'])\u2500\u2510\u2502 ['!','hello','world']              \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "Consider the following sorting order for the NULL, NaN and Inf values:", "SELECT arraySort([1, nan, 2, NULL, 3, nan, -4, NULL, inf, -inf]);", "\u250c\u2500arraySort([1, nan, 2, NULL, 3, nan, -4, NULL, inf, -inf])\u2500\u2510\u2502 [-inf,-4,1,2,3,inf,nan,nan,NULL,NULL]                     \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "-Inf values are first in the array.NULL values are last in the array.NaN values are right before NULL.Inf values are right before NaN.", "Note that arraySort is a higher-order function. You can pass a lambda function to it as the first argument. In this case, sorting order is determined by the result of the lambda function applied to the elements of the array.", "Let\u2019s consider the following example:", "SELECT arraySort((x) -> -x, [1, 2, 3]) as res;", "\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2510\u2502 [3,2,1] \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "For each element of the source array, the lambda function returns the sorting key, that is, [1 \u2013> -1, 2 \u2013> -2, 3 \u2013> -3]. Since the arraySort function sorts the keys in ascending order, the result is [3, 2, 1]. Thus, the (x) \u2013> -x lambda function sets the descending order in a sorting.", "The lambda function can accept multiple arguments. In this case, you need to pass the arraySort function several arrays of identical length that the arguments of lambda function will correspond to. The resulting array will consist of elements from the first input array; elements from the next input array(s) specify the sorting keys. For example:", "SELECT arraySort((x, y) -> y, ['hello', 'world'], [2, 1]) as res;", "\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 ['world', 'hello'] \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "Here, the elements that are passed in the second array ([2, 1]) define a sorting key for the corresponding element from the source array ([\u2018hello\u2019, \u2018world\u2019]), that is, [\u2018hello\u2019 \u2013> 2, \u2018world\u2019 \u2013> 1]. Since the lambda function does not use x, actual values of the source array do not affect the order in the result. So, \u2018hello\u2019 will be the second element in the result, and \u2018world\u2019 will be the first.", "Other examples are shown below.", "SELECT arraySort((x, y) -> y, [0, 1, 2], ['c', 'b', 'a']) as res;", "\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2510\u2502 [2,1,0] \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "SELECT arraySort((x, y) -> -y, [0, 1, 2], [1, 2, 3]) as res;", "\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2510\u2502 [2,1,0] \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "NoteTo improve sorting efficiency, the Schwartzian transform is used."], "Examples": ["SELECT arraySort([1, 3, 3, 0]);", "SELECT arraySort(['hello', 'world', '!']);", "SELECT arraySort([1, nan, 2, NULL, 3, nan, -4, NULL, inf, -inf]);", "SELECT arraySort((x) -> -x, [1, 2, 3]) as res;", "SELECT arraySort((x, y) -> y, ['hello', 'world'], [2, 1]) as res;", "SELECT arraySort((x, y) -> y, [0, 1, 2], ['c', 'b', 'a']) as res;", "SELECT arraySort((x, y) -> -y, [0, 1, 2], [1, 2, 3]) as res;"], "Category": ["Arrays Functions"], "index": 913, "vector_txt": "913:Feature: arraySort([func,] arr, ...)\nDescription: arraySort([func,] arr, ...)Sorts the elements of the arr array in ascending order. If the func function is specified, sorting order is determined by the result of the func function applied to the elements of the array. If func accepts multiple arguments, the arraySort function is passed several arrays that the arguments of func will correspond to. Detailed examples are shown at the end of arraySort description.Example of integer values sorting:SELECT arraySort([1, 3, 3, 0]);\u250c\u2500arraySort([1, 3, 3, 0])\u2500\u2510\u2502 [0,1,3,3]               \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518Example of string values sorting:SELECT arraySort(['hello', 'world', '!']);\u250c\u2500arraySort(['hello', 'world', '!'])\u2500\u2510\u2502 ['!','hello','world']              \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518Consider the following sorting order for the NULL, NaN and Inf values:SELECT arraySort([1, nan, 2, NULL, 3, nan, -4, NULL, inf, -inf]);\u250c\u2500arraySort([1, nan, 2, NULL, 3, nan, -4, NULL, inf, -inf])\u2500\u2510\u2502 [-inf,-4,1,2,3,inf,nan,nan,NULL,NULL]                     \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518-Inf values are first in the array.NULL values are last in the array.NaN values are right before NULL.Inf values are right before NaN.Note that arraySort is a higher-order function. You can pass a lambda function to it as the first argument. In this case, sorting order is determined by the result of the lambda function applied to the elements of the array.Let\u2019s consider the following example:SELECT arraySort((x) -> -x, [1, 2, 3]) as res;\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2510\u2502 [3,2,1] \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518For each element of the source array, the lambda function returns the sorting key, that is, [1 \u2013> -1, 2 \u2013> -2, 3 \u2013> -3]. Since the arraySort function sorts the keys in ascending order, the result is [3, 2, 1]. Thus, the (x) \u2013> -x lambda function sets the descending order in a sorting.The lambda function can accept multiple arguments. In this case, you need to pass the arraySort function several arrays of identical length that the arguments of lambda function will correspond to. The resulting array will consist of elements from the first input array; elements from the next input array(s) specify the sorting keys. For example:SELECT arraySort((x, y) -> y, ['hello', 'world'], [2, 1]) as res;\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 ['world', 'hello'] \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518Here, the elements that are passed in the second array ([2, 1]) define a sorting key for the corresponding element from the source array ([\u2018hello\u2019, \u2018world\u2019]), that is, [\u2018hello\u2019 \u2013> 2, \u2018world\u2019 \u2013> 1]. Since the lambda function does not use x, actual values of the source array do not affect the order in the result. So, \u2018hello\u2019 will be the second element in the result, and \u2018world\u2019 will be the first.Other examples are shown below.SELECT arraySort((x, y) -> y, [0, 1, 2], ['c', 'b', 'a']) as res;\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2510\u2502 [2,1,0] \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT arraySort((x, y) -> -y, [0, 1, 2], [1, 2, 3]) as res;\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2510\u2502 [2,1,0] \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518NoteTo improve sorting efficiency, the Schwartzian transform is used.\nExamples: SELECT arraySort([1, 3, 3, 0]);SELECT arraySort(['hello', 'world', '!']);SELECT arraySort([1, nan, 2, NULL, 3, nan, -4, NULL, inf, -inf]);SELECT arraySort((x) -> -x, [1, 2, 3]) as res;SELECT arraySort((x, y) -> y, ['hello', 'world'], [2, 1]) as res;SELECT arraySort((x, y) -> y, [0, 1, 2], ['c', 'b', 'a']) as res;SELECT arraySort((x, y) -> -y, [0, 1, 2], [1, 2, 3]) as res;\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["runningDifferenceStartingWithFirstValue"], "Feature": ["runningDifferenceStartingWithFirstValue"], "Description": ["runningDifferenceStartingWithFirstValue", "NoteThis function is DEPRECATED (see the note for runningDifference).", "Same as runningDifference, but returns the value of the first row as the value on the first row."], "Examples": [], "Category": ["Other Functions"], "index": 914, "vector_txt": "914:Feature: runningDifferenceStartingWithFirstValue\nDescription: runningDifferenceStartingWithFirstValueNoteThis function is DEPRECATED (see the note for runningDifference).Same as runningDifference, but returns the value of the first row as the value on the first row.\nExamples: \nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["runningConcurrency"], "Feature": ["runningConcurrency(start, end)"], "Description": ["runningConcurrency", "Calculates the number of concurrent events.\nEach event has a start time and an end time. The start time is included in the event, while the end time is excluded. Columns with a start time and an end time must be of the same data type.\nThe function calculates the total number of active (concurrent) events for each event start time.", "TipEvents must be ordered by the start time in ascending order. If this requirement is violated the function raises an exception. Every data block is processed separately. If events from different data blocks overlap then they can not be processed correctly.", "Syntax", "runningConcurrency(start, end)", "Arguments", "start \u2014 A column with the start time of events. Date, DateTime, or DateTime64.end \u2014 A column with the end time of events. Date, DateTime, or DateTime64.", "Returned values", "The number of concurrent events at each event start time. UInt32"], "Examples": ["SELECT start, runningConcurrency(start, end) FROM example_table;"], "Category": ["Other Functions"], "index": 915, "vector_txt": "915:Feature: runningConcurrency(start, end)\nDescription: runningConcurrencyCalculates the number of concurrent events.\nEach event has a start time and an end time. The start time is included in the event, while the end time is excluded. Columns with a start time and an end time must be of the same data type.\nThe function calculates the total number of active (concurrent) events for each event start time.TipEvents must be ordered by the start time in ascending order. If this requirement is violated the function raises an exception. Every data block is processed separately. If events from different data blocks overlap then they can not be processed correctly.SyntaxrunningConcurrency(start, end)Argumentsstart \u2014 A column with the start time of events. Date, DateTime, or DateTime64.end \u2014 A column with the end time of events. Date, DateTime, or DateTime64.Returned valuesThe number of concurrent events at each event start time. UInt32\nExamples: SELECT start, runningConcurrency(start, end) FROM example_table;\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["MACNumToString"], "Feature": ["MACNumToString(num)"], "Description": ["MACNumToString", "Interprets a UInt64 number as a MAC address in big endian format. Returns the corresponding MAC address in format AA:BB:CC:DD:EE:FF (colon-separated numbers in hexadecimal form) as string.", "Syntax", "MACNumToString(num)"], "Examples": ["MACNumToString(num)"], "Category": ["Other Functions"], "index": 916, "vector_txt": "916:Feature: MACNumToString(num)\nDescription: MACNumToStringInterprets a UInt64 number as a MAC address in big endian format. Returns the corresponding MAC address in format AA:BB:CC:DD:EE:FF (colon-separated numbers in hexadecimal form) as string.SyntaxMACNumToString(num)\nExamples: MACNumToString(num)\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["MACStringToNum"], "Feature": ["MACStringToNum(s)"], "Description": ["MACStringToNum", "The inverse function of MACNumToString. If the MAC address has an invalid format, it returns 0.", "Syntax", "MACStringToNum(s)"], "Examples": ["MACStringToNum(s)"], "Category": ["Other Functions"], "index": 917, "vector_txt": "917:Feature: MACStringToNum(s)\nDescription: MACStringToNumThe inverse function of MACNumToString. If the MAC address has an invalid format, it returns 0.SyntaxMACStringToNum(s)\nExamples: MACStringToNum(s)\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["MACStringToOUI"], "Feature": ["MACStringToOUI(s)"], "Description": ["MACStringToOUI", "Given a MAC address in format AA:BB:CC:DD:EE:FF (colon-separated numbers in hexadecimal form), returns the first three octets as a UInt64 number. If the MAC address has an invalid format, it returns 0.", "Syntax", "MACStringToOUI(s)"], "Examples": ["MACStringToOUI(s)"], "Category": ["Other Functions"], "index": 918, "vector_txt": "918:Feature: MACStringToOUI(s)\nDescription: MACStringToOUIGiven a MAC address in format AA:BB:CC:DD:EE:FF (colon-separated numbers in hexadecimal form), returns the first three octets as a UInt64 number. If the MAC address has an invalid format, it returns 0.SyntaxMACStringToOUI(s)\nExamples: MACStringToOUI(s)\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["getSizeOfEnumType"], "Feature": ["getSizeOfEnumType(value)"], "Description": ["getSizeOfEnumType", "Returns the number of fields in Enum.\nAn exception is thrown if the type is not Enum.", "Syntax", "getSizeOfEnumType(value)", "Arguments:", "value \u2014 Value of type Enum.", "Returned values", "The number of fields with Enum input values."], "Examples": ["SELECT getSizeOfEnumType( CAST('a' AS Enum8('a' = 1, 'b' = 2) ) ) AS x"], "Category": ["Other Functions"], "index": 919, "vector_txt": "919:Feature: getSizeOfEnumType(value)\nDescription: getSizeOfEnumTypeReturns the number of fields in Enum.\nAn exception is thrown if the type is not Enum.SyntaxgetSizeOfEnumType(value)Arguments:value \u2014 Value of type Enum.Returned valuesThe number of fields with Enum input values.\nExamples: SELECT getSizeOfEnumType( CAST('a' AS Enum8('a' = 1, 'b' = 2) ) ) AS x\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["blockSerializedSize"], "Feature": ["blockSerializedSize(value[, value[, ...]])"], "Description": ["blockSerializedSize", "Returns the size on disk without considering compression.", "blockSerializedSize(value[, value[, ...]])", "Arguments", "value \u2014 Any value.", "Returned values", "The number of bytes that will be written to disk for block of values without compression."], "Examples": ["SELECT blockSerializedSize(maxState(1)) as x"], "Category": ["Other Functions"], "index": 920, "vector_txt": "920:Feature: blockSerializedSize(value[, value[, ...]])\nDescription: blockSerializedSizeReturns the size on disk without considering compression.blockSerializedSize(value[, value[, ...]])Argumentsvalue \u2014 Any value.Returned valuesThe number of bytes that will be written to disk for block of values without compression.\nExamples: SELECT blockSerializedSize(maxState(1)) as x\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["toColumnTypeName"], "Feature": ["toColumnTypeName(value)"], "Description": ["toColumnTypeName", "Returns the internal name of the data type that represents the value.", "Syntax", "toColumnTypeName(value)", "Arguments:", "value \u2014 Any type of value.", "Returned values", "The internal data type name used to represent value."], "Examples": ["SELECT toTypeName(CAST('2018-01-01 01:02:03' AS DateTime))", "SELECT toColumnTypeName(CAST('2018-01-01 01:02:03' AS DateTime))"], "Category": ["Other Functions"], "index": 921, "vector_txt": "921:Feature: toColumnTypeName(value)\nDescription: toColumnTypeNameReturns the internal name of the data type that represents the value.SyntaxtoColumnTypeName(value)Arguments:value \u2014 Any type of value.Returned valuesThe internal data type name used to represent value.\nExamples: SELECT toTypeName(CAST('2018-01-01 01:02:03' AS DateTime))SELECT toColumnTypeName(CAST('2018-01-01 01:02:03' AS DateTime))\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["dumpColumnStructure"], "Feature": ["dumpColumnStructure(value)"], "Description": ["dumpColumnStructure", "Outputs a detailed description of data structures in RAM", "dumpColumnStructure(value)", "Arguments:", "value \u2014 Any type of value.", "Returned values", "A description of the column structure used for representing value."], "Examples": ["SELECT dumpColumnStructure(CAST('2018-01-01 01:02:03', 'DateTime'))"], "Category": ["Other Functions"], "index": 922, "vector_txt": "922:Feature: dumpColumnStructure(value)\nDescription: dumpColumnStructureOutputs a detailed description of data structures in RAMdumpColumnStructure(value)Arguments:value \u2014 Any type of value.Returned valuesA description of the column structure used for representing value.\nExamples: SELECT dumpColumnStructure(CAST('2018-01-01 01:02:03', 'DateTime'))\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["defaultValueOfArgumentType"], "Feature": ["defaultValueOfArgumentType(expression)"], "Description": ["defaultValueOfArgumentType", "Returns the default value for the given data type.", "Does not include default values for custom columns set by the user.", "Syntax", "defaultValueOfArgumentType(expression)", "Arguments:", "expression \u2014 Arbitrary type of value or an expression that results in a value of an arbitrary type.", "Returned values", "0 for numbers.Empty string for strings.\u1d3a\u1d41\u1d38\u1d38 for Nullable."], "Examples": ["SELECT defaultValueOfArgumentType( CAST(1 AS Int8) )", "SELECT defaultValueOfArgumentType( CAST(1 AS Nullable(Int8) ) )"], "Category": ["Other Functions"], "index": 923, "vector_txt": "923:Feature: defaultValueOfArgumentType(expression)\nDescription: defaultValueOfArgumentTypeReturns the default value for the given data type.Does not include default values for custom columns set by the user.SyntaxdefaultValueOfArgumentType(expression)Arguments:expression \u2014 Arbitrary type of value or an expression that results in a value of an arbitrary type.Returned values0 for numbers.Empty string for strings.\u1d3a\u1d41\u1d38\u1d38 for Nullable.\nExamples: SELECT defaultValueOfArgumentType( CAST(1 AS Int8) )SELECT defaultValueOfArgumentType( CAST(1 AS Nullable(Int8) ) )\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayPartialSort([func,] limit, arr, ...)"], "Feature": ["arrayPartialSort([func,] limit, arr, ...)"], "Description": ["arrayPartialSort([func,] limit, arr, ...)", "Same as arraySort with additional limit argument allowing partial sorting. Returns an array of the same size as the original array where elements in range [1..limit] are sorted in ascending order. Remaining elements (limit..N] shall contain elements in unspecified order."], "Examples": [], "Category": ["Arrays Functions"], "index": 924, "vector_txt": "924:Feature: arrayPartialSort([func,] limit, arr, ...)\nDescription: arrayPartialSort([func,] limit, arr, ...)Same as arraySort with additional limit argument allowing partial sorting. Returns an array of the same size as the original array where elements in range [1..limit] are sorted in ascending order. Remaining elements (limit..N] shall contain elements in unspecified order.\nExamples: \nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["defaultValueOfTypeName"], "Feature": ["defaultValueOfTypeName(type)"], "Description": ["defaultValueOfTypeName", "Returns the default value for the given type name.", "Does not include default values for custom columns set by the user.", "defaultValueOfTypeName(type)", "Arguments:", "type \u2014 A string representing a type name.", "Returned values", "0 for numbers.Empty string for strings.\u1d3a\u1d41\u1d38\u1d38 for Nullable."], "Examples": ["SELECT defaultValueOfTypeName('Int8')", "SELECT defaultValueOfTypeName('Nullable(Int8)')"], "Category": ["Other Functions"], "index": 925, "vector_txt": "925:Feature: defaultValueOfTypeName(type)\nDescription: defaultValueOfTypeNameReturns the default value for the given type name.Does not include default values for custom columns set by the user.defaultValueOfTypeName(type)Arguments:type \u2014 A string representing a type name.Returned values0 for numbers.Empty string for strings.\u1d3a\u1d41\u1d38\u1d38 for Nullable.\nExamples: SELECT defaultValueOfTypeName('Int8')SELECT defaultValueOfTypeName('Nullable(Int8)')\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["indexHint"], "Feature": ["SELECT * FROM table WHERE indexHint(<expression>)"], "Description": ["indexHint", "This function is intended for debugging and introspection. It ignores its argument and always returns 1. The arguments are not evaluated.", "But during index analysis, the argument of this function is assumed to be not wrapped in indexHint. This allows to select data in index ranges by the corresponding condition but without further filtering by this condition. The index in ClickHouse is sparse and using indexHint will yield more data than specifying the same condition directly.", "Syntax", "SELECT * FROM table WHERE indexHint(<expression>)", "Returned value", "1. Uint8."], "Examples": ["SELECT count() FROM ontime", "SELECT FlightDate AS k, count() FROM ontime GROUP BY k ORDER BY k", "SELECT FlightDate AS k, count() FROM ontime WHERE k = '2017-09-15' GROUP BY k ORDER BY k", "SELECT    FlightDate AS k,    count()FROM ontimeWHERE indexHint(k = '2017-09-15')GROUP BY kORDER BY k ASC"], "Category": ["Other Functions"], "index": 926, "vector_txt": "926:Feature: SELECT * FROM table WHERE indexHint(<expression>)\nDescription: indexHintThis function is intended for debugging and introspection. It ignores its argument and always returns 1. The arguments are not evaluated.But during index analysis, the argument of this function is assumed to be not wrapped in indexHint. This allows to select data in index ranges by the corresponding condition but without further filtering by this condition. The index in ClickHouse is sparse and using indexHint will yield more data than specifying the same condition directly.SyntaxSELECT * FROM table WHERE indexHint(<expression>)Returned value1. Uint8.\nExamples: SELECT count() FROM ontimeSELECT FlightDate AS k, count() FROM ontime GROUP BY k ORDER BY kSELECT FlightDate AS k, count() FROM ontime WHERE k = '2017-09-15' GROUP BY k ORDER BY kSELECT    FlightDate AS k,    count()FROM ontimeWHERE indexHint(k = '2017-09-15')GROUP BY kORDER BY k ASC\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["replicate"], "Feature": ["replicate(x, arr)"], "Description": ["replicate", "Creates an array with a single value.", "NoteThis function is used for the internal implementation of arrayJoin.", "Syntax", "replicate(x, arr)", "Arguments", "x \u2014 The value to fill the result array with.arr \u2014 An array. Array.", "Returned value", "An array of the lame length as arr filled with value x. Array."], "Examples": ["SELECT replicate(1, ['a', 'b', 'c']);"], "Category": ["Other Functions"], "index": 927, "vector_txt": "927:Feature: replicate(x, arr)\nDescription: replicateCreates an array with a single value.NoteThis function is used for the internal implementation of arrayJoin.Syntaxreplicate(x, arr)Argumentsx \u2014 The value to fill the result array with.arr \u2014 An array. Array.Returned valueAn array of the lame length as arr filled with value x. Array.\nExamples: SELECT replicate(1, ['a', 'b', 'c']);\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["revision"], "Feature": ["revision()"], "Description": ["revision", "Returns the current ClickHouse server revision.", "Syntax", "revision()", "Returned value", "The current ClickHouse server revision. UInt32."], "Examples": ["SELECT revision();"], "Category": ["Other Functions"], "index": 928, "vector_txt": "928:Feature: revision()\nDescription: revisionReturns the current ClickHouse server revision.Syntaxrevision()Returned valueThe current ClickHouse server revision. UInt32.\nExamples: SELECT revision();\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["filesystemAvailable"], "Feature": ["filesystemAvailable()"], "Description": ["filesystemAvailable", "Returns the amount of free space in the filesystem hosting the database persistence. The returned value is always smaller than total free space (filesystemFree) because some space is reserved for the operating system.", "Syntax", "filesystemAvailable()", "Returned value", "The amount of remaining space available in bytes. UInt64."], "Examples": ["SELECT formatReadableSize(filesystemAvailable()) AS \"Available space\";"], "Category": ["Other Functions"], "index": 929, "vector_txt": "929:Feature: filesystemAvailable()\nDescription: filesystemAvailableReturns the amount of free space in the filesystem hosting the database persistence. The returned value is always smaller than total free space (filesystemFree) because some space is reserved for the operating system.SyntaxfilesystemAvailable()Returned valueThe amount of remaining space available in bytes. UInt64.\nExamples: SELECT formatReadableSize(filesystemAvailable()) AS \"Available space\";\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["filesystemUnreserved"], "Feature": ["filesystemUnreserved()"], "Description": ["filesystemUnreserved", "Returns the total amount of the free space on the filesystem hosting the database persistence. (previously filesystemFree). See also filesystemAvailable.", "Syntax", "filesystemUnreserved()", "Returned value", "The amount of free space in bytes. UInt64."], "Examples": ["SELECT formatReadableSize(filesystemUnreserved()) AS \"Free space\";"], "Category": ["Other Functions"], "index": 930, "vector_txt": "930:Feature: filesystemUnreserved()\nDescription: filesystemUnreservedReturns the total amount of the free space on the filesystem hosting the database persistence. (previously filesystemFree). See also filesystemAvailable.SyntaxfilesystemUnreserved()Returned valueThe amount of free space in bytes. UInt64.\nExamples: SELECT formatReadableSize(filesystemUnreserved()) AS \"Free space\";\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["filesystemCapacity"], "Feature": ["filesystemCapacity()"], "Description": ["filesystemCapacity", "Returns the capacity of the filesystem in bytes. Needs the path to the data directory to be configured.", "Syntax", "filesystemCapacity()", "Returned value", "Capacity of the filesystem in bytes. UInt64."], "Examples": ["SELECT formatReadableSize(filesystemCapacity()) AS \"Capacity\";"], "Category": ["Other Functions"], "index": 931, "vector_txt": "931:Feature: filesystemCapacity()\nDescription: filesystemCapacityReturns the capacity of the filesystem in bytes. Needs the path to the data directory to be configured.SyntaxfilesystemCapacity()Returned valueCapacity of the filesystem in bytes. UInt64.\nExamples: SELECT formatReadableSize(filesystemCapacity()) AS \"Capacity\";\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["initializeAggregation"], "Feature": ["initializeAggregation (aggregate_function, arg1, arg2, ..., argN)"], "Description": ["initializeAggregation", "Calculates the result of an aggregate function based on a single value. This function can be used to initialize aggregate functions with combinator -State. You can create states of aggregate functions and insert them to columns of type AggregateFunction or use initialized aggregates as default values.", "Syntax", "initializeAggregation (aggregate_function, arg1, arg2, ..., argN)", "Arguments", "aggregate_function \u2014 Name of the aggregation function to initialize. String.arg \u2014 Arguments of aggregate function.", "Returned value(s)", "Result of aggregation for every row passed to the function.", "The return type is the same as the return type of function, that initializeAggregation takes as first argument."], "Examples": ["SELECT uniqMerge(state) FROM (SELECT initializeAggregation('uniqState', number % 3) AS state FROM numbers(10000));", "SELECT finalizeAggregation(state), toTypeName(state) FROM (SELECT initializeAggregation('sumState', number % 3) AS state FROM numbers(5));", "CREATE TABLE metrics(    key UInt64,    value AggregateFunction(sum, UInt64) DEFAULT initializeAggregation('sumState', toUInt64(0)))ENGINE = AggregatingMergeTreeORDER BY key", "INSERT INTO metrics VALUES (0, initializeAggregation('sumState', toUInt64(42)))"], "Category": ["Other Functions"], "index": 932, "vector_txt": "932:Feature: initializeAggregation (aggregate_function, arg1, arg2, ..., argN)\nDescription: initializeAggregationCalculates the result of an aggregate function based on a single value. This function can be used to initialize aggregate functions with combinator -State. You can create states of aggregate functions and insert them to columns of type AggregateFunction or use initialized aggregates as default values.SyntaxinitializeAggregation (aggregate_function, arg1, arg2, ..., argN)Argumentsaggregate_function \u2014 Name of the aggregation function to initialize. String.arg \u2014 Arguments of aggregate function.Returned value(s)Result of aggregation for every row passed to the function.The return type is the same as the return type of function, that initializeAggregation takes as first argument.\nExamples: SELECT uniqMerge(state) FROM (SELECT initializeAggregation('uniqState', number % 3) AS state FROM numbers(10000));SELECT finalizeAggregation(state), toTypeName(state) FROM (SELECT initializeAggregation('sumState', number % 3) AS state FROM numbers(5));CREATE TABLE metrics(    key UInt64,    value AggregateFunction(sum, UInt64) DEFAULT initializeAggregation('sumState', toUInt64(0)))ENGINE = AggregatingMergeTreeORDER BY keyINSERT INTO metrics VALUES (0, initializeAggregation('sumState', toUInt64(42)))\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["finalizeAggregation"], "Feature": ["finalizeAggregation(state)"], "Description": ["finalizeAggregation", "Given a state of aggregate function, this function returns the result of aggregation (or finalized state when using a -State combinator).", "Syntax", "finalizeAggregation(state)", "Arguments", "state \u2014 State of aggregation. AggregateFunction.", "Returned value(s)", "Value/values that was aggregated.", "NoteThe return type is equal to that of any types which were aggregated."], "Examples": ["SELECT finalizeAggregation(( SELECT countState(number) FROM numbers(10)));", "SELECT finalizeAggregation(( SELECT sumState(number) FROM numbers(10)));", "SELECT finalizeAggregation(arrayReduce('anyState', [NULL, 2, 3]));", "WITH initializeAggregation('sumState', number) AS one_row_sum_stateSELECT    number,    finalizeAggregation(one_row_sum_state) AS one_row_sum,    runningAccumulate(one_row_sum_state) AS cumulative_sumFROM numbers(10);"], "Category": ["Other Functions"], "index": 933, "vector_txt": "933:Feature: finalizeAggregation(state)\nDescription: finalizeAggregationGiven a state of aggregate function, this function returns the result of aggregation (or finalized state when using a -State combinator).SyntaxfinalizeAggregation(state)Argumentsstate \u2014 State of aggregation. AggregateFunction.Returned value(s)Value/values that was aggregated.NoteThe return type is equal to that of any types which were aggregated.\nExamples: SELECT finalizeAggregation(( SELECT countState(number) FROM numbers(10)));SELECT finalizeAggregation(( SELECT sumState(number) FROM numbers(10)));SELECT finalizeAggregation(arrayReduce('anyState', [NULL, 2, 3]));WITH initializeAggregation('sumState', number) AS one_row_sum_stateSELECT    number,    finalizeAggregation(one_row_sum_state) AS one_row_sum,    runningAccumulate(one_row_sum_state) AS cumulative_sumFROM numbers(10);\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["runningAccumulate"], "Feature": ["runningAccumulate(agg_state[, grouping]);"], "Description": ["runningAccumulate", "Accumulates the states of an aggregate function for each row of a data block.", "NoteThe state is reset for each new block of data.\nBecause of this error-prone behavior the function is DEPRECATED, please use proper window functions instead.", "Syntax", "runningAccumulate(agg_state[, grouping]);", "Arguments", "agg_state \u2014 State of the aggregate function. AggregateFunction.grouping \u2014 Grouping key. Optional. The state of the function is reset if the grouping value is changed. It can be any of the supported data types for which the equality operator is defined.", "Returned value", "Each resulting row contains a result of the aggregate function, accumulated for all the input rows from 0 to the current position. runningAccumulate resets states for each new data block or when the grouping value changes.", "Type depends on the aggregate function used."], "Examples": ["SELECT k, runningAccumulate(sum_k) AS res FROM (SELECT number as k, sumState(k) AS sum_k FROM numbers(10) GROUP BY k ORDER BY k);", "SELECT    grouping,    item,    runningAccumulate(state, grouping) AS resFROM(    SELECT        toInt8(number / 4) AS grouping,        number AS item,        sumState(number) AS state    FROM numbers(15)    GROUP BY item    ORDER BY item ASC);"], "Category": ["Other Functions"], "index": 934, "vector_txt": "934:Feature: runningAccumulate(agg_state[, grouping]);\nDescription: runningAccumulateAccumulates the states of an aggregate function for each row of a data block.NoteThe state is reset for each new block of data.\nBecause of this error-prone behavior the function is DEPRECATED, please use proper window functions instead.SyntaxrunningAccumulate(agg_state[, grouping]);Argumentsagg_state \u2014 State of the aggregate function. AggregateFunction.grouping \u2014 Grouping key. Optional. The state of the function is reset if the grouping value is changed. It can be any of the supported data types for which the equality operator is defined.Returned valueEach resulting row contains a result of the aggregate function, accumulated for all the input rows from 0 to the current position. runningAccumulate resets states for each new data block or when the grouping value changes.Type depends on the aggregate function used.\nExamples: SELECT k, runningAccumulate(sum_k) AS res FROM (SELECT number as k, sumState(k) AS sum_k FROM numbers(10) GROUP BY k ORDER BY k);SELECT    grouping,    item,    runningAccumulate(state, grouping) AS resFROM(    SELECT        toInt8(number / 4) AS grouping,        number AS item,        sumState(number) AS state    FROM numbers(15)    GROUP BY item    ORDER BY item ASC);\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayReverseSort"], "Feature": ["arrayReverseSort([func,] arr, ...)"], "Description": ["arrayReverseSort", "Sorts the elements of the arr array in descending order. If the func function is specified, arr is sorted according to the result of the func function applied to the elements of the array, and then the sorted array is reversed. If func accepts multiple arguments, the arrayReverseSort function is passed several arrays that the arguments of func will correspond to. Detailed examples are shown at the end of arrayReverseSort description.", "Syntax", "arrayReverseSort([func,] arr, ...)", "Example of integer values sorting:", "SELECT arrayReverseSort([1, 3, 3, 0]);", "\u250c\u2500arrayReverseSort([1, 3, 3, 0])\u2500\u2510\u2502 [3,3,1,0]                      \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "Example of string values sorting:", "SELECT arrayReverseSort(['hello', 'world', '!']);", "\u250c\u2500arrayReverseSort(['hello', 'world', '!'])\u2500\u2510\u2502 ['world','hello','!']                     \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "Consider the following sorting order for the NULL, NaN and Inf values:", "SELECT arrayReverseSort([1, nan, 2, NULL, 3, nan, -4, NULL, inf, -inf]) as res;", "\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 [inf,3,2,1,-4,-inf,nan,nan,NULL,NULL] \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "Inf values are first in the array.NULL values are last in the array.NaN values are right before NULL.-Inf values are right before NaN.", "Note that the arrayReverseSort is a higher-order function. You can pass a lambda function to it as the first argument. Example is shown below.", "SELECT arrayReverseSort((x) -> -x, [1, 2, 3]) as res;", "\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2510\u2502 [1,2,3] \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "The array is sorted in the following way:", "At first, the source array ([1, 2, 3]) is sorted according to the result of the lambda function applied to the elements of the array. The result is an array [3, 2, 1].Array that is obtained on the previous step, is reversed. So, the final result is [1, 2, 3].", "The lambda function can accept multiple arguments. In this case, you need to pass the arrayReverseSort function several arrays of identical length that the arguments of lambda function will correspond to. The resulting array will consist of elements from the first input array; elements from the next input array(s) specify the sorting keys. For example:", "SELECT arrayReverseSort((x, y) -> y, ['hello', 'world'], [2, 1]) as res;", "\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 ['hello','world'] \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "In this example, the array is sorted in the following way:", "At first, the source array ([\u2018hello\u2019, \u2018world\u2019]) is sorted according to the result of the lambda function applied to the elements of the arrays. The elements that are passed in the second array ([2, 1]), define the sorting keys for corresponding elements from the source array. The result is an array [\u2018world\u2019, \u2018hello\u2019].Array that was sorted on the previous step, is reversed. So, the final result is [\u2018hello\u2019, \u2018world\u2019].", "Other examples are shown below.", "SELECT arrayReverseSort((x, y) -> y, [4, 3, 5], ['a', 'b', 'c']) AS res;", "\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2510\u2502 [5,3,4] \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "SELECT arrayReverseSort((x, y) -> -y, [4, 3, 5], [1, 2, 3]) AS res;", "\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2510\u2502 [4,3,5] \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Examples": ["arrayReverseSort([func,] arr, ...)", "SELECT arrayReverseSort([1, 3, 3, 0]);", "SELECT arrayReverseSort(['hello', 'world', '!']);", "SELECT arrayReverseSort([1, nan, 2, NULL, 3, nan, -4, NULL, inf, -inf]) as res;", "SELECT arrayReverseSort((x) -> -x, [1, 2, 3]) as res;", "SELECT arrayReverseSort((x, y) -> y, ['hello', 'world'], [2, 1]) as res;", "SELECT arrayReverseSort((x, y) -> y, [4, 3, 5], ['a', 'b', 'c']) AS res;", "SELECT arrayReverseSort((x, y) -> -y, [4, 3, 5], [1, 2, 3]) AS res;"], "Category": ["Arrays Functions"], "index": 935, "vector_txt": "935:Feature: arrayReverseSort([func,] arr, ...)\nDescription: arrayReverseSortSorts the elements of the arr array in descending order. If the func function is specified, arr is sorted according to the result of the func function applied to the elements of the array, and then the sorted array is reversed. If func accepts multiple arguments, the arrayReverseSort function is passed several arrays that the arguments of func will correspond to. Detailed examples are shown at the end of arrayReverseSort description.SyntaxarrayReverseSort([func,] arr, ...)Example of integer values sorting:SELECT arrayReverseSort([1, 3, 3, 0]);\u250c\u2500arrayReverseSort([1, 3, 3, 0])\u2500\u2510\u2502 [3,3,1,0]                      \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518Example of string values sorting:SELECT arrayReverseSort(['hello', 'world', '!']);\u250c\u2500arrayReverseSort(['hello', 'world', '!'])\u2500\u2510\u2502 ['world','hello','!']                     \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518Consider the following sorting order for the NULL, NaN and Inf values:SELECT arrayReverseSort([1, nan, 2, NULL, 3, nan, -4, NULL, inf, -inf]) as res;\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 [inf,3,2,1,-4,-inf,nan,nan,NULL,NULL] \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518Inf values are first in the array.NULL values are last in the array.NaN values are right before NULL.-Inf values are right before NaN.Note that the arrayReverseSort is a higher-order function. You can pass a lambda function to it as the first argument. Example is shown below.SELECT arrayReverseSort((x) -> -x, [1, 2, 3]) as res;\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2510\u2502 [1,2,3] \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518The array is sorted in the following way:At first, the source array ([1, 2, 3]) is sorted according to the result of the lambda function applied to the elements of the array. The result is an array [3, 2, 1].Array that is obtained on the previous step, is reversed. So, the final result is [1, 2, 3].The lambda function can accept multiple arguments. In this case, you need to pass the arrayReverseSort function several arrays of identical length that the arguments of lambda function will correspond to. The resulting array will consist of elements from the first input array; elements from the next input array(s) specify the sorting keys. For example:SELECT arrayReverseSort((x, y) -> y, ['hello', 'world'], [2, 1]) as res;\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 ['hello','world'] \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518In this example, the array is sorted in the following way:At first, the source array ([\u2018hello\u2019, \u2018world\u2019]) is sorted according to the result of the lambda function applied to the elements of the arrays. The elements that are passed in the second array ([2, 1]), define the sorting keys for corresponding elements from the source array. The result is an array [\u2018world\u2019, \u2018hello\u2019].Array that was sorted on the previous step, is reversed. So, the final result is [\u2018hello\u2019, \u2018world\u2019].Other examples are shown below.SELECT arrayReverseSort((x, y) -> y, [4, 3, 5], ['a', 'b', 'c']) AS res;\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2510\u2502 [5,3,4] \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT arrayReverseSort((x, y) -> -y, [4, 3, 5], [1, 2, 3]) AS res;\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2510\u2502 [4,3,5] \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nExamples: arrayReverseSort([func,] arr, ...)SELECT arrayReverseSort([1, 3, 3, 0]);SELECT arrayReverseSort(['hello', 'world', '!']);SELECT arrayReverseSort([1, nan, 2, NULL, 3, nan, -4, NULL, inf, -inf]) as res;SELECT arrayReverseSort((x) -> -x, [1, 2, 3]) as res;SELECT arrayReverseSort((x, y) -> y, ['hello', 'world'], [2, 1]) as res;SELECT arrayReverseSort((x, y) -> y, [4, 3, 5], ['a', 'b', 'c']) AS res;SELECT arrayReverseSort((x, y) -> -y, [4, 3, 5], [1, 2, 3]) AS res;\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["joinGet"], "Feature": ["joinGet(join_storage_table_name, `value_column`, join_keys)"], "Description": ["joinGet", "The function lets you extract data from the table the same way as from a dictionary. Gets the data from Join tables using the specified join key.", "NoteOnly supports tables created with the ENGINE = Join(ANY, LEFT, <join_keys>) statement.", "Syntax", "joinGet(join_storage_table_name, `value_column`, join_keys)", "Arguments", "join_storage_table_name \u2014 an identifier indicating where the search is performed.value_column \u2014 name of the column of the table that contains required data.join_keys \u2014 list of keys.", "NoteThe identifier is searched for in the default database (see setting default_database in the config file). To override the default database, use USE db_name or specify the database and the table through the separator db_name.db_table as in the example.", "Returned value", "Returns a list of values corresponded to the list of keys.", "NoteIf a certain key does not exist in source table then 0 or null will be returned based on join_use_nulls setting during table creation.\nMore info about join_use_nulls in Join operation."], "Examples": ["CREATE DATABASE db_test;CREATE TABLE db_test.id_val(`id` UInt32, `val` UInt32) ENGINE = Join(ANY, LEFT, id);INSERT INTO db_test.id_val VALUES (1, 11)(2, 12)(4, 13);SELECT * FROM db_test.id_val;", "SELECT number, joinGet(db_test.id_val, 'val', toUInt32(number)) from numbers(4);", "CREATE DATABASE db_test;CREATE TABLE db_test.id_val_nulls(`id` UInt32, `val` UInt32) ENGINE = Join(ANY, LEFT, id) SETTINGS join_use_nulls=1;INSERT INTO db_test.id_val_nulls VALUES (1, 11)(2, 12)(4, 13);SELECT * FROM db_test.id_val_nulls;", "SELECT number, joinGet(db_test.id_val_nulls, 'val', toUInt32(number)) from numbers(4);"], "Category": ["Other Functions"], "index": 936, "vector_txt": "936:Feature: joinGet(join_storage_table_name, `value_column`, join_keys)\nDescription: joinGetThe function lets you extract data from the table the same way as from a dictionary. Gets the data from Join tables using the specified join key.NoteOnly supports tables created with the ENGINE = Join(ANY, LEFT, <join_keys>) statement.SyntaxjoinGet(join_storage_table_name, `value_column`, join_keys)Argumentsjoin_storage_table_name \u2014 an identifier indicating where the search is performed.value_column \u2014 name of the column of the table that contains required data.join_keys \u2014 list of keys.NoteThe identifier is searched for in the default database (see setting default_database in the config file). To override the default database, use USE db_name or specify the database and the table through the separator db_name.db_table as in the example.Returned valueReturns a list of values corresponded to the list of keys.NoteIf a certain key does not exist in source table then 0 or null will be returned based on join_use_nulls setting during table creation.\nMore info about join_use_nulls in Join operation.\nExamples: CREATE DATABASE db_test;CREATE TABLE db_test.id_val(`id` UInt32, `val` UInt32) ENGINE = Join(ANY, LEFT, id);INSERT INTO db_test.id_val VALUES (1, 11)(2, 12)(4, 13);SELECT * FROM db_test.id_val;SELECT number, joinGet(db_test.id_val, 'val', toUInt32(number)) from numbers(4);CREATE DATABASE db_test;CREATE TABLE db_test.id_val_nulls(`id` UInt32, `val` UInt32) ENGINE = Join(ANY, LEFT, id) SETTINGS join_use_nulls=1;INSERT INTO db_test.id_val_nulls VALUES (1, 11)(2, 12)(4, 13);SELECT * FROM db_test.id_val_nulls;SELECT number, joinGet(db_test.id_val_nulls, 'val', toUInt32(number)) from numbers(4);\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["joinGetOrNull"], "Feature": ["joinGetOrNull(join_storage_table_name, `value_column`, join_keys)"], "Description": ["joinGetOrNull", "Like joinGet but returns NULL when the key is missing instead of returning the default value.", "Syntax", "joinGetOrNull(join_storage_table_name, `value_column`, join_keys)", "Arguments", "join_storage_table_name \u2014 an identifier indicating where the search is performed.value_column \u2014 name of the column of the table that contains required data.join_keys \u2014 list of keys.", "NoteThe identifier is searched for in the default database (see setting default_database in the config file). To override the default database, use USE db_name or specify the database and the table through the separator db_name.db_table as in the example.", "Returned value", "Returns a list of values corresponded to the list of keys.", "NoteIf a certain key does not exist in source table then NULL is returned for that key."], "Examples": ["CREATE DATABASE db_test;CREATE TABLE db_test.id_val(`id` UInt32, `val` UInt32) ENGINE = Join(ANY, LEFT, id);INSERT INTO db_test.id_val VALUES (1, 11)(2, 12)(4, 13);SELECT * FROM db_test.id_val;", "SELECT number, joinGetOrNull(db_test.id_val, 'val', toUInt32(number)) from numbers(4);"], "Category": ["Other Functions"], "index": 937, "vector_txt": "937:Feature: joinGetOrNull(join_storage_table_name, `value_column`, join_keys)\nDescription: joinGetOrNullLike joinGet but returns NULL when the key is missing instead of returning the default value.SyntaxjoinGetOrNull(join_storage_table_name, `value_column`, join_keys)Argumentsjoin_storage_table_name \u2014 an identifier indicating where the search is performed.value_column \u2014 name of the column of the table that contains required data.join_keys \u2014 list of keys.NoteThe identifier is searched for in the default database (see setting default_database in the config file). To override the default database, use USE db_name or specify the database and the table through the separator db_name.db_table as in the example.Returned valueReturns a list of values corresponded to the list of keys.NoteIf a certain key does not exist in source table then NULL is returned for that key.\nExamples: CREATE DATABASE db_test;CREATE TABLE db_test.id_val(`id` UInt32, `val` UInt32) ENGINE = Join(ANY, LEFT, id);INSERT INTO db_test.id_val VALUES (1, 11)(2, 12)(4, 13);SELECT * FROM db_test.id_val;SELECT number, joinGetOrNull(db_test.id_val, 'val', toUInt32(number)) from numbers(4);\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["catboostEvaluate"], "Feature": ["catboostEvaluate(path_to_model, feature_1, feature_2, ..., feature_n)"], "Description": ["catboostEvaluate", "NoteThis function is not available in ClickHouse Cloud.", "Evaluate an external catboost model. CatBoost is an open-source gradient boosting library developed by Yandex for machine learning.\nAccepts a path to a catboost model and model arguments (features). Returns Float64.", "Syntax", "catboostEvaluate(path_to_model, feature_1, feature_2, ..., feature_n)"], "Examples": ["SELECT feat1, ..., feat_n, catboostEvaluate('/path/to/model.bin', feat_1, ..., feat_n) AS predictionFROM data_table"], "Category": ["Other Functions"], "index": 938, "vector_txt": "938:Feature: catboostEvaluate(path_to_model, feature_1, feature_2, ..., feature_n)\nDescription: catboostEvaluateNoteThis function is not available in ClickHouse Cloud.Evaluate an external catboost model. CatBoost is an open-source gradient boosting library developed by Yandex for machine learning.\nAccepts a path to a catboost model and model arguments (features). Returns Float64.SyntaxcatboostEvaluate(path_to_model, feature_1, feature_2, ..., feature_n)\nExamples: SELECT feat1, ..., feat_n, catboostEvaluate('/path/to/model.bin', feat_1, ..., feat_n) AS predictionFROM data_table\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["throwIf"], "Feature": ["throwIf(x[, message[, error_code]])"], "Description": ["throwIf", "Throw an exception if argument x is true.", "Syntax", "throwIf(x[, message[, error_code]])", "Arguments", "x - the condition to check.message - a constant string providing a custom error message. Optional.error_code - A constant integer providing a custom error code. Optional.", "To use the error_code argument, configuration parameter allow_custom_error_code_in_throwif must be enabled."], "Examples": ["SELECT throwIf(number = 3, 'Too many') FROM numbers(10);"], "Category": ["Other Functions"], "index": 939, "vector_txt": "939:Feature: throwIf(x[, message[, error_code]])\nDescription: throwIfThrow an exception if argument x is true.SyntaxthrowIf(x[, message[, error_code]])Argumentsx - the condition to check.message - a constant string providing a custom error message. Optional.error_code - A constant integer providing a custom error code. Optional.To use the error_code argument, configuration parameter allow_custom_error_code_in_throwif must be enabled.\nExamples: SELECT throwIf(number = 3, 'Too many') FROM numbers(10);\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["identity"], "Feature": ["identity(x)"], "Description": ["identity", "Returns its argument. Intended for debugging and testing. Allows to cancel using index, and get the query performance of a full scan. When the query is analyzed for possible use of an index, the analyzer ignores everything in identity functions. Also disables constant folding.", "Syntax", "identity(x)"], "Examples": ["SELECT identity(42);"], "Category": ["Other Functions"], "index": 940, "vector_txt": "940:Feature: identity(x)\nDescription: identityReturns its argument. Intended for debugging and testing. Allows to cancel using index, and get the query performance of a full scan. When the query is analyzed for possible use of an index, the analyzer ignores everything in identity functions. Also disables constant folding.Syntaxidentity(x)\nExamples: SELECT identity(42);\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["getSetting"], "Feature": ["getSetting('custom_setting');"], "Description": ["getSetting", "Returns the current value of a custom setting.", "Syntax", "getSetting('custom_setting');", "Parameter", "custom_setting \u2014 The setting name. String.", "Returned value", "The setting's current value."], "Examples": ["SET custom_a = 123;SELECT getSetting('custom_a');"], "Category": ["Other Functions"], "index": 941, "vector_txt": "941:Feature: getSetting('custom_setting');\nDescription: getSettingReturns the current value of a custom setting.SyntaxgetSetting('custom_setting');Parametercustom_setting \u2014 The setting name. String.Returned valueThe setting's current value.\nExamples: SET custom_a = 123;SELECT getSetting('custom_a');\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["getSettingOrDefault"], "Feature": ["getSettingOrDefault('custom_setting', default_value);"], "Description": ["getSettingOrDefault", "Returns the current value of a custom setting or returns the default value specified in the 2nd argument if the custom setting is not set in the current profile.", "Syntax", "getSettingOrDefault('custom_setting', default_value);", "Parameter", "custom_setting \u2014 The setting name. String.default_value \u2014 Value to return if custom_setting is not set. Value may be of any data type or Null.", "Returned value", "The setting's current value or default_value if setting is not set."], "Examples": ["SELECT getSettingOrDefault('custom_undef1', 'my_value');SELECT getSettingOrDefault('custom_undef2', 100);SELECT getSettingOrDefault('custom_undef3', NULL);"], "Category": ["Other Functions"], "index": 942, "vector_txt": "942:Feature: getSettingOrDefault('custom_setting', default_value);\nDescription: getSettingOrDefaultReturns the current value of a custom setting or returns the default value specified in the 2nd argument if the custom setting is not set in the current profile.SyntaxgetSettingOrDefault('custom_setting', default_value);Parametercustom_setting \u2014 The setting name. String.default_value \u2014 Value to return if custom_setting is not set. Value may be of any data type or Null.Returned valueThe setting's current value or default_value if setting is not set.\nExamples: SELECT getSettingOrDefault('custom_undef1', 'my_value');SELECT getSettingOrDefault('custom_undef2', 100);SELECT getSettingOrDefault('custom_undef3', NULL);\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["isDecimalOverflow"], "Feature": ["isDecimalOverflow(d, [p])"], "Description": ["isDecimalOverflow", "Checks whether the Decimal value is outside its precision or outside the specified precision.", "Syntax", "isDecimalOverflow(d, [p])", "Arguments", "d \u2014 value. Decimal.p \u2014 precision. Optional. If omitted, the initial precision of the first argument is used. This parameter can be helpful to migrate data from/to another database or file. UInt8.", "Returned values", "1 \u2014 Decimal value has more digits then allowed by its precision,0 \u2014 Decimal value satisfies the specified precision."], "Examples": ["SELECT isDecimalOverflow(toDecimal32(1000000000, 0), 9),       isDecimalOverflow(toDecimal32(1000000000, 0)),       isDecimalOverflow(toDecimal32(-1000000000, 0), 9),       isDecimalOverflow(toDecimal32(-1000000000, 0));"], "Category": ["Other Functions"], "index": 943, "vector_txt": "943:Feature: isDecimalOverflow(d, [p])\nDescription: isDecimalOverflowChecks whether the Decimal value is outside its precision or outside the specified precision.SyntaxisDecimalOverflow(d, [p])Argumentsd \u2014 value. Decimal.p \u2014 precision. Optional. If omitted, the initial precision of the first argument is used. This parameter can be helpful to migrate data from/to another database or file. UInt8.Returned values1 \u2014 Decimal value has more digits then allowed by its precision,0 \u2014 Decimal value satisfies the specified precision.\nExamples: SELECT isDecimalOverflow(toDecimal32(1000000000, 0), 9),       isDecimalOverflow(toDecimal32(1000000000, 0)),       isDecimalOverflow(toDecimal32(-1000000000, 0), 9),       isDecimalOverflow(toDecimal32(-1000000000, 0));\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["countDigits"], "Feature": ["countDigits(x)"], "Description": ["countDigits", "Returns number of decimal digits need to represent a value.", "Syntax", "countDigits(x)", "Arguments", "x \u2014 Int or Decimal value.", "Returned value", "Number of digits. UInt8.", "NoteFor Decimal values takes into account their scales: calculates result over underlying integer type which is (value * scale). For example: countDigits(42) = 2, countDigits(42.000) = 5, countDigits(0.04200) = 4. I.e. you may check decimal overflow for Decimal64 with countDecimal(x) > 18. It's a slow variant of isDecimalOverflow."], "Examples": ["SELECT countDigits(toDecimal32(1, 9)), countDigits(toDecimal32(-1, 9)),       countDigits(toDecimal64(1, 18)), countDigits(toDecimal64(-1, 18)),       countDigits(toDecimal128(1, 38)), countDigits(toDecimal128(-1, 38));"], "Category": ["Other Functions"], "index": 944, "vector_txt": "944:Feature: countDigits(x)\nDescription: countDigitsReturns number of decimal digits need to represent a value.SyntaxcountDigits(x)Argumentsx \u2014 Int or Decimal value.Returned valueNumber of digits. UInt8.NoteFor Decimal values takes into account their scales: calculates result over underlying integer type which is (value * scale). For example: countDigits(42) = 2, countDigits(42.000) = 5, countDigits(0.04200) = 4. I.e. you may check decimal overflow for Decimal64 with countDecimal(x) > 18. It's a slow variant of isDecimalOverflow.\nExamples: SELECT countDigits(toDecimal32(1, 9)), countDigits(toDecimal32(-1, 9)),       countDigits(toDecimal64(1, 18)), countDigits(toDecimal64(-1, 18)),       countDigits(toDecimal128(1, 38)), countDigits(toDecimal128(-1, 38));\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["errorCodeToName"], "Feature": ["errorCodeToName(1)"], "Description": ["errorCodeToName", "The textual name of an error code. LowCardinality(String).", "Syntax", "errorCodeToName(1)", "Result:", "UNSUPPORTED_METHOD"], "Examples": ["errorCodeToName(1)"], "Category": ["Other Functions"], "index": 945, "vector_txt": "945:Feature: errorCodeToName(1)\nDescription: errorCodeToNameThe textual name of an error code. LowCardinality(String).SyntaxerrorCodeToName(1)Result:UNSUPPORTED_METHOD\nExamples: errorCodeToName(1)\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayPartialReverseSort([func,] limit, arr, ...)"], "Feature": ["arrayPartialReverseSort([func,] limit, arr, ...)"], "Description": ["arrayPartialReverseSort([func,] limit, arr, ...)", "Same as arrayReverseSort with additional limit argument allowing partial sorting. Returns an array of the same size as the original array where elements in range [1..limit] are sorted in descending order. Remaining elements (limit..N] shall contain elements in unspecified order."], "Examples": [], "Category": ["Arrays Functions"], "index": 946, "vector_txt": "946:Feature: arrayPartialReverseSort([func,] limit, arr, ...)\nDescription: arrayPartialReverseSort([func,] limit, arr, ...)Same as arrayReverseSort with additional limit argument allowing partial sorting. Returns an array of the same size as the original array where elements in range [1..limit] are sorted in descending order. Remaining elements (limit..N] shall contain elements in unspecified order.\nExamples: \nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["tcpPort"], "Feature": ["tcpPort()"], "Description": ["tcpPort", "Returns native interface TCP port number listened by this server.\nIf executed in the context of a distributed table, this function generates a normal column with values relevant to each shard. Otherwise it produces a constant value.", "Syntax", "tcpPort()", "Arguments", "None.", "Returned value", "The TCP port number. UInt16."], "Examples": ["SELECT tcpPort();"], "Category": ["Other Functions"], "index": 947, "vector_txt": "947:Feature: tcpPort()\nDescription: tcpPortReturns native interface TCP port number listened by this server.\nIf executed in the context of a distributed table, this function generates a normal column with values relevant to each shard. Otherwise it produces a constant value.SyntaxtcpPort()ArgumentsNone.Returned valueThe TCP port number. UInt16.\nExamples: SELECT tcpPort();\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["currentProfiles"], "Feature": ["currentProfiles()"], "Description": ["currentProfiles", "Returns a list of the current settings profiles for the current user.", "The command SET PROFILE could be used to change the current setting profile. If the command SET PROFILE was not used the function returns the profiles specified at the current user's definition (see CREATE USER).", "Syntax", "currentProfiles()", "Returned value", "List of the current user settings profiles. Array(String)."], "Examples": ["currentProfiles()"], "Category": ["Other Functions"], "index": 948, "vector_txt": "948:Feature: currentProfiles()\nDescription: currentProfilesReturns a list of the current settings profiles for the current user.The command SET PROFILE could be used to change the current setting profile. If the command SET PROFILE was not used the function returns the profiles specified at the current user's definition (see CREATE USER).SyntaxcurrentProfiles()Returned valueList of the current user settings profiles. Array(String).\nExamples: currentProfiles()\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["enabledProfiles"], "Feature": ["enabledProfiles()"], "Description": ["enabledProfiles", "Returns settings profiles, assigned to the current user both explicitly and implicitly. Explicitly assigned profiles are the same as returned by the currentProfiles function. Implicitly assigned profiles include parent profiles of other assigned profiles, profiles assigned via granted roles, profiles assigned via their own settings, and the main default profile (see the default_profile section in the main server configuration file).", "Syntax", "enabledProfiles()", "Returned value", "List of the enabled settings profiles. Array(String)."], "Examples": ["enabledProfiles()"], "Category": ["Other Functions"], "index": 949, "vector_txt": "949:Feature: enabledProfiles()\nDescription: enabledProfilesReturns settings profiles, assigned to the current user both explicitly and implicitly. Explicitly assigned profiles are the same as returned by the currentProfiles function. Implicitly assigned profiles include parent profiles of other assigned profiles, profiles assigned via granted roles, profiles assigned via their own settings, and the main default profile (see the default_profile section in the main server configuration file).SyntaxenabledProfiles()Returned valueList of the enabled settings profiles. Array(String).\nExamples: enabledProfiles()\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["defaultProfiles"], "Feature": ["defaultProfiles()"], "Description": ["defaultProfiles", "Returns all the profiles specified at the current user's definition (see CREATE USER statement).", "Syntax", "defaultProfiles()", "Returned value", "List of the default settings profiles. Array(String)."], "Examples": ["defaultProfiles()"], "Category": ["Other Functions"], "index": 950, "vector_txt": "950:Feature: defaultProfiles()\nDescription: defaultProfilesReturns all the profiles specified at the current user's definition (see CREATE USER statement).SyntaxdefaultProfiles()Returned valueList of the default settings profiles. Array(String).\nExamples: defaultProfiles()\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["currentRoles"], "Feature": ["currentRoles()"], "Description": ["currentRoles", "Returns the roles assigned to the current user. The roles can be changed by the SET ROLE statement. If no SET ROLE statement was not, the function currentRoles returns the same as defaultRoles.", "Syntax", "currentRoles()", "Returned value", "A list of the current roles for the current user. Array(String)."], "Examples": ["currentRoles()"], "Category": ["Other Functions"], "index": 951, "vector_txt": "951:Feature: currentRoles()\nDescription: currentRolesReturns the roles assigned to the current user. The roles can be changed by the SET ROLE statement. If no SET ROLE statement was not, the function currentRoles returns the same as defaultRoles.SyntaxcurrentRoles()Returned valueA list of the current roles for the current user. Array(String).\nExamples: currentRoles()\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["enabledRoles"], "Feature": ["enabledRoles()"], "Description": ["enabledRoles", "Returns the names of the current roles and the roles, granted to some of the current roles.", "Syntax", "enabledRoles()", "Returned value", "List of the enabled roles for the current user. Array(String)."], "Examples": ["enabledRoles()"], "Category": ["Other Functions"], "index": 952, "vector_txt": "952:Feature: enabledRoles()\nDescription: enabledRolesReturns the names of the current roles and the roles, granted to some of the current roles.SyntaxenabledRoles()Returned valueList of the enabled roles for the current user. Array(String).\nExamples: enabledRoles()\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["defaultRoles"], "Feature": ["defaultRoles()"], "Description": ["defaultRoles", "Returns the roles which are enabled by default for the current user when he logs in. Initially these are all roles granted to the current user (see GRANT), but that can be changed with the SET DEFAULT ROLE statement.", "Syntax", "defaultRoles()", "Returned value", "List of the default roles for the current user. Array(String)."], "Examples": ["defaultRoles()"], "Category": ["Other Functions"], "index": 953, "vector_txt": "953:Feature: defaultRoles()\nDescription: defaultRolesReturns the roles which are enabled by default for the current user when he logs in. Initially these are all roles granted to the current user (see GRANT), but that can be changed with the SET DEFAULT ROLE statement.SyntaxdefaultRoles()Returned valueList of the default roles for the current user. Array(String).\nExamples: defaultRoles()\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["getServerPort"], "Feature": ["getServerPort(port_name)"], "Description": ["getServerPort", "Returns the server port number. When the port is not used by the server, throws an exception.", "Syntax", "getServerPort(port_name)", "Arguments", "port_name \u2014 The name of the server port. String. Possible values:'tcp_port''tcp_port_secure''http_port''https_port''interserver_http_port''interserver_https_port''mysql_port''postgresql_port''grpc_port''prometheus.port'", "Returned value", "The number of the server port. UInt16."], "Examples": ["SELECT getServerPort('tcp_port');"], "Category": ["Other Functions"], "index": 954, "vector_txt": "954:Feature: getServerPort(port_name)\nDescription: getServerPortReturns the server port number. When the port is not used by the server, throws an exception.SyntaxgetServerPort(port_name)Argumentsport_name \u2014 The name of the server port. String. Possible values:'tcp_port''tcp_port_secure''http_port''https_port''interserver_http_port''interserver_https_port''mysql_port''postgresql_port''grpc_port''prometheus.port'Returned valueThe number of the server port. UInt16.\nExamples: SELECT getServerPort('tcp_port');\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["queryID"], "Feature": ["queryID()"], "Description": ["queryID", "Returns the ID of the current query. Other parameters of a query can be extracted from the system.query_log table via query_id.", "In contrast to initialQueryID function, queryID can return different results on different shards (see the example).", "Syntax", "queryID()", "Returned value", "The ID of the current query. String"], "Examples": ["CREATE TABLE tmp (str String) ENGINE = Log;INSERT INTO tmp (*) VALUES ('a');SELECT count(DISTINCT t) FROM (SELECT queryID() AS t FROM remote('127.0.0.{1..3}', currentDatabase(), 'tmp') GROUP BY queryID());"], "Category": ["Other Functions"], "index": 955, "vector_txt": "955:Feature: queryID()\nDescription: queryIDReturns the ID of the current query. Other parameters of a query can be extracted from the system.query_log table via query_id.In contrast to initialQueryID function, queryID can return different results on different shards (see the example).SyntaxqueryID()Returned valueThe ID of the current query. String\nExamples: CREATE TABLE tmp (str String) ENGINE = Log;INSERT INTO tmp (*) VALUES ('a');SELECT count(DISTINCT t) FROM (SELECT queryID() AS t FROM remote('127.0.0.{1..3}', currentDatabase(), 'tmp') GROUP BY queryID());\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["initialQueryID"], "Feature": ["initialQueryID()"], "Description": ["initialQueryID", "Returns the ID of the initial current query. Other parameters of a query can be extracted from the system.query_log table via initial_query_id.", "In contrast to queryID function, initialQueryID returns the same results on different shards (see example).", "Syntax", "initialQueryID()", "Returned value", "The ID of the initial current query. String"], "Examples": ["CREATE TABLE tmp (str String) ENGINE = Log;INSERT INTO tmp (*) VALUES ('a');SELECT count(DISTINCT t) FROM (SELECT initialQueryID() AS t FROM remote('127.0.0.{1..3}', currentDatabase(), 'tmp') GROUP BY queryID());"], "Category": ["Other Functions"], "index": 956, "vector_txt": "956:Feature: initialQueryID()\nDescription: initialQueryIDReturns the ID of the initial current query. Other parameters of a query can be extracted from the system.query_log table via initial_query_id.In contrast to queryID function, initialQueryID returns the same results on different shards (see example).SyntaxinitialQueryID()Returned valueThe ID of the initial current query. String\nExamples: CREATE TABLE tmp (str String) ENGINE = Log;INSERT INTO tmp (*) VALUES ('a');SELECT count(DISTINCT t) FROM (SELECT initialQueryID() AS t FROM remote('127.0.0.{1..3}', currentDatabase(), 'tmp') GROUP BY queryID());\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayShuffle"], "Feature": ["arrayShuffle(arr[, seed])"], "Description": ["arrayShuffle", "Returns an array of the same size as the original array containing the elements in shuffled order.\nElements are reordered in such a way that each possible permutation of those elements has equal probability of appearance.", "Syntax", "arrayShuffle(arr[, seed])", "Parameters", "arr: The array to partially shuffle. Array.seed (optional): seed to be used with random number generation. If not provided a random one is used. UInt or Int.", "Returned value", "Array with elements shuffled.", "Implementation details", "NoteThis function will not materialize constants."], "Examples": ["SELECT arrayShuffle([1, 2, 3, 4]);", "SELECT arrayShuffle([1, 2, 3, 4], 41);"], "Category": ["Arrays Functions"], "index": 957, "vector_txt": "957:Feature: arrayShuffle(arr[, seed])\nDescription: arrayShuffleReturns an array of the same size as the original array containing the elements in shuffled order.\nElements are reordered in such a way that each possible permutation of those elements has equal probability of appearance.SyntaxarrayShuffle(arr[, seed])Parametersarr: The array to partially shuffle. Array.seed (optional): seed to be used with random number generation. If not provided a random one is used. UInt or Int.Returned valueArray with elements shuffled.Implementation detailsNoteThis function will not materialize constants.\nExamples: SELECT arrayShuffle([1, 2, 3, 4]);SELECT arrayShuffle([1, 2, 3, 4], 41);\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["partitionID"], "Feature": ["partitionID(x[, y, ...]);"], "Description": ["partitionID", "Computes the partition ID.", "NoteThis function is slow and should not be called for large amount of rows.", "Syntax", "partitionID(x[, y, ...]);", "Arguments", "x \u2014 Column for which to return the partition ID.y, ... \u2014 Remaining N columns for which to return the partition ID (optional).", "Returned Value", "Partition ID that the row would belong to. String."], "Examples": ["DROP TABLE IF EXISTS tab;CREATE TABLE tab(  i int,  j int)ENGINE = MergeTreePARTITION BY iORDER BY tuple();INSERT INTO tab VALUES (1, 1), (1, 2), (1, 3), (2, 4), (2, 5), (2, 6);SELECT i, j, partitionID(i), _partition_id FROM tab ORDER BY i, j;"], "Category": ["Other Functions"], "index": 958, "vector_txt": "958:Feature: partitionID(x[, y, ...]);\nDescription: partitionIDComputes the partition ID.NoteThis function is slow and should not be called for large amount of rows.SyntaxpartitionID(x[, y, ...]);Argumentsx \u2014 Column for which to return the partition ID.y, ... \u2014 Remaining N columns for which to return the partition ID (optional).Returned ValuePartition ID that the row would belong to. String.\nExamples: DROP TABLE IF EXISTS tab;CREATE TABLE tab(  i int,  j int)ENGINE = MergeTreePARTITION BY iORDER BY tuple();INSERT INTO tab VALUES (1, 1), (1, 2), (1, 3), (2, 4), (2, 5), (2, 6);SELECT i, j, partitionID(i), _partition_id FROM tab ORDER BY i, j;\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["shardNum"], "Feature": ["shardNum()"], "Description": ["shardNum", "Returns the index of a shard which processes a part of data in a distributed query. Indices are started from 1.\nIf a query is not distributed then constant value 0 is returned.", "Syntax", "shardNum()", "Returned value", "Shard index or constant 0. UInt32."], "Examples": ["CREATE TABLE shard_num_example (dummy UInt8)    ENGINE=Distributed(test_cluster_two_shards_localhost, system, one, dummy);SELECT dummy, shardNum(), shardCount() FROM shard_num_example;"], "Category": ["Other Functions"], "index": 959, "vector_txt": "959:Feature: shardNum()\nDescription: shardNumReturns the index of a shard which processes a part of data in a distributed query. Indices are started from 1.\nIf a query is not distributed then constant value 0 is returned.SyntaxshardNum()Returned valueShard index or constant 0. UInt32.\nExamples: CREATE TABLE shard_num_example (dummy UInt8)    ENGINE=Distributed(test_cluster_two_shards_localhost, system, one, dummy);SELECT dummy, shardNum(), shardCount() FROM shard_num_example;\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["shardCount"], "Feature": ["shardCount()"], "Description": ["shardCount", "Returns the total number of shards for a distributed query.\nIf a query is not distributed then constant value 0 is returned.", "Syntax", "shardCount()", "Returned value", "Total number of shards or 0. UInt32.", "See Also", "shardNum() function example also contains shardCount() function call."], "Examples": ["shardCount()"], "Category": ["Other Functions"], "index": 960, "vector_txt": "960:Feature: shardCount()\nDescription: shardCountReturns the total number of shards for a distributed query.\nIf a query is not distributed then constant value 0 is returned.SyntaxshardCount()Returned valueTotal number of shards or 0. UInt32.See AlsoshardNum() function example also contains shardCount() function call.\nExamples: shardCount()\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["getOSKernelVersion"], "Feature": ["getOSKernelVersion()"], "Description": ["getOSKernelVersion", "Returns a string with the current OS kernel version.", "Syntax", "getOSKernelVersion()", "Arguments", "None.", "Returned value", "The current OS kernel version. String."], "Examples": ["SELECT getOSKernelVersion();"], "Category": ["Other Functions"], "index": 961, "vector_txt": "961:Feature: getOSKernelVersion()\nDescription: getOSKernelVersionReturns a string with the current OS kernel version.SyntaxgetOSKernelVersion()ArgumentsNone.Returned valueThe current OS kernel version. String.\nExamples: SELECT getOSKernelVersion();\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["zookeeperSessionUptime"], "Feature": ["zookeeperSessionUptime()"], "Description": ["zookeeperSessionUptime", "Returns the uptime of the current ZooKeeper session in seconds.", "Syntax", "zookeeperSessionUptime()", "Arguments", "None.", "Returned value", "Uptime of the current ZooKeeper session in seconds. UInt32."], "Examples": ["SELECT zookeeperSessionUptime();"], "Category": ["Other Functions"], "index": 962, "vector_txt": "962:Feature: zookeeperSessionUptime()\nDescription: zookeeperSessionUptimeReturns the uptime of the current ZooKeeper session in seconds.SyntaxzookeeperSessionUptime()ArgumentsNone.Returned valueUptime of the current ZooKeeper session in seconds. UInt32.\nExamples: SELECT zookeeperSessionUptime();\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["generateRandomStructure"], "Feature": ["generateRandomStructure([number_of_columns, seed])"], "Description": ["generateRandomStructure", "Generates random table structure in a format column1_name column1_type, column2_name column2_type, ....", "Syntax", "generateRandomStructure([number_of_columns, seed])", "Arguments", "number_of_columns \u2014 The desired number of columns in the result table structure. If set to 0 or Null, the number of columns will be random from 1 to 128. Default value: Null.seed - Random seed to produce stable results. If seed is not specified or set to Null, it is randomly generated.", "All arguments must be constant.", "Returned value", "Randomly generated table structure. String."], "Examples": ["SELECT generateRandomStructure()", "SELECT generateRandomStructure(1)", "SELECT generateRandomStructure(NULL, 33)"], "Category": ["Other Functions"], "index": 963, "vector_txt": "963:Feature: generateRandomStructure([number_of_columns, seed])\nDescription: generateRandomStructureGenerates random table structure in a format column1_name column1_type, column2_name column2_type, ....SyntaxgenerateRandomStructure([number_of_columns, seed])Argumentsnumber_of_columns \u2014 The desired number of columns in the result table structure. If set to 0 or Null, the number of columns will be random from 1 to 128. Default value: Null.seed - Random seed to produce stable results. If seed is not specified or set to Null, it is randomly generated.All arguments must be constant.Returned valueRandomly generated table structure. String.\nExamples: SELECT generateRandomStructure()SELECT generateRandomStructure(1)SELECT generateRandomStructure(NULL, 33)\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["structureToCapnProtoSchema"], "Feature": ["structureToCapnProtoSchema(structure)"], "Description": ["structureToCapnProtoSchema", "Converts ClickHouse table structure to CapnProto schema.", "Syntax", "structureToCapnProtoSchema(structure)", "Arguments", "structure \u2014 Table structure in a format column1_name column1_type, column2_name column2_type, ....root_struct_name \u2014 Name for root struct in CapnProto schema. Default value - Message;", "Returned value", "CapnProto schema. String."], "Examples": ["SELECT structureToCapnProtoSchema('column1 String, column2 UInt32, column3 Array(String)') FORMAT RawBLOB", "SELECT structureToCapnProtoSchema('column1 Nullable(String), column2 Tuple(element1 UInt32, element2 Array(String)), column3 Map(String, String)') FORMAT RawBLOB", "SELECT structureToCapnProtoSchema('column1 String, column2 UInt32', 'Root') FORMAT RawBLOB"], "Category": ["Other Functions"], "index": 964, "vector_txt": "964:Feature: structureToCapnProtoSchema(structure)\nDescription: structureToCapnProtoSchemaConverts ClickHouse table structure to CapnProto schema.SyntaxstructureToCapnProtoSchema(structure)Argumentsstructure \u2014 Table structure in a format column1_name column1_type, column2_name column2_type, ....root_struct_name \u2014 Name for root struct in CapnProto schema. Default value - Message;Returned valueCapnProto schema. String.\nExamples: SELECT structureToCapnProtoSchema('column1 String, column2 UInt32, column3 Array(String)') FORMAT RawBLOBSELECT structureToCapnProtoSchema('column1 Nullable(String), column2 Tuple(element1 UInt32, element2 Array(String)), column3 Map(String, String)') FORMAT RawBLOBSELECT structureToCapnProtoSchema('column1 String, column2 UInt32', 'Root') FORMAT RawBLOB\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["structureToProtobufSchema"], "Feature": ["structureToProtobufSchema(structure)"], "Description": ["structureToProtobufSchema", "Converts ClickHouse table structure to Protobuf schema.", "Syntax", "structureToProtobufSchema(structure)", "Arguments", "structure \u2014 Table structure in a format column1_name column1_type, column2_name column2_type, ....root_message_name \u2014 Name for root message in Protobuf schema. Default value - Message;", "Returned value", "Protobuf schema. String."], "Examples": ["SELECT structureToProtobufSchema('column1 String, column2 UInt32, column3 Array(String)') FORMAT RawBLOB", "SELECT structureToProtobufSchema('column1 Nullable(String), column2 Tuple(element1 UInt32, element2 Array(String)), column3 Map(String, String)') FORMAT RawBLOB", "SELECT structureToProtobufSchema('column1 String, column2 UInt32', 'Root') FORMAT RawBLOB"], "Category": ["Other Functions"], "index": 965, "vector_txt": "965:Feature: structureToProtobufSchema(structure)\nDescription: structureToProtobufSchemaConverts ClickHouse table structure to Protobuf schema.SyntaxstructureToProtobufSchema(structure)Argumentsstructure \u2014 Table structure in a format column1_name column1_type, column2_name column2_type, ....root_message_name \u2014 Name for root message in Protobuf schema. Default value - Message;Returned valueProtobuf schema. String.\nExamples: SELECT structureToProtobufSchema('column1 String, column2 UInt32, column3 Array(String)') FORMAT RawBLOBSELECT structureToProtobufSchema('column1 Nullable(String), column2 Tuple(element1 UInt32, element2 Array(String)), column3 Map(String, String)') FORMAT RawBLOBSELECT structureToProtobufSchema('column1 String, column2 UInt32', 'Root') FORMAT RawBLOB\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["formatQuery"], "Feature": ["formatQuery(query)formatQueryOrNull(query)"], "Description": ["formatQuery", "Returns a formatted, possibly multi-line, version of the given SQL query.", "Throws an exception if the query is not well-formed. To return NULL instead, function formatQueryOrNull() may be used.", "Syntax", "formatQuery(query)formatQueryOrNull(query)", "Arguments", "query - The SQL query to be formatted. String", "Returned value", "The formatted query. String."], "Examples": ["SELECT formatQuery('select a,    b FRom tab WHERE a > 3 and  b < 3');"], "Category": ["Other Functions"], "index": 966, "vector_txt": "966:Feature: formatQuery(query)formatQueryOrNull(query)\nDescription: formatQueryReturns a formatted, possibly multi-line, version of the given SQL query.Throws an exception if the query is not well-formed. To return NULL instead, function formatQueryOrNull() may be used.SyntaxformatQuery(query)formatQueryOrNull(query)Argumentsquery - The SQL query to be formatted. StringReturned valueThe formatted query. String.\nExamples: SELECT formatQuery('select a,    b FRom tab WHERE a > 3 and  b < 3');\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["formatQuerySingleLine"], "Feature": ["formatQuerySingleLine(query)formatQuerySingleLineOrNull(query)"], "Description": ["formatQuerySingleLine", "Like formatQuery() but the returned formatted string contains no line breaks.", "Throws an exception if the query is not well-formed. To return NULL instead, function formatQuerySingleLineOrNull() may be used.", "Syntax", "formatQuerySingleLine(query)formatQuerySingleLineOrNull(query)", "Arguments", "query - The SQL query to be formatted. String", "Returned value", "The formatted query. String."], "Examples": ["SELECT formatQuerySingleLine('select a,    b FRom tab WHERE a > 3 and  b < 3');"], "Category": ["Other Functions"], "index": 967, "vector_txt": "967:Feature: formatQuerySingleLine(query)formatQuerySingleLineOrNull(query)\nDescription: formatQuerySingleLineLike formatQuery() but the returned formatted string contains no line breaks.Throws an exception if the query is not well-formed. To return NULL instead, function formatQuerySingleLineOrNull() may be used.SyntaxformatQuerySingleLine(query)formatQuerySingleLineOrNull(query)Argumentsquery - The SQL query to be formatted. StringReturned valueThe formatted query. String.\nExamples: SELECT formatQuerySingleLine('select a,    b FRom tab WHERE a > 3 and  b < 3');\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayPartialShuffle"], "Feature": ["arrayPartialShuffle(arr[, limit[, seed]])"], "Description": ["arrayPartialShuffle", "Given an input array of cardinality N, returns an array of size N where elements in the range [1...limit] are shuffled and the remaining elements in the range (limit...n] are unshuffled.", "Syntax", "arrayPartialShuffle(arr[, limit[, seed]])", "Parameters", "arr: The array size N to partially shuffle. Array.limit (optional): The number to limit element swaps to, in the range [1..N]. UInt or Int.seed (optional): The seed value to be used with random number generation. If not provided a random one is used. UInt or Int", "Returned value", "Array with elements partially shuffled.", "Implementation details", "NoteThis function will not materialize constants.The value of limit should be in the range [1..N]. Values outside of that range are equivalent to performing full arrayShuffle."], "Examples": ["SELECT arrayPartialShuffle([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1)", "SELECT arrayPartialShuffle([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2);"], "Category": ["Arrays Functions"], "index": 968, "vector_txt": "968:Feature: arrayPartialShuffle(arr[, limit[, seed]])\nDescription: arrayPartialShuffleGiven an input array of cardinality N, returns an array of size N where elements in the range [1...limit] are shuffled and the remaining elements in the range (limit...n] are unshuffled.SyntaxarrayPartialShuffle(arr[, limit[, seed]])Parametersarr: The array size N to partially shuffle. Array.limit (optional): The number to limit element swaps to, in the range [1..N]. UInt or Int.seed (optional): The seed value to be used with random number generation. If not provided a random one is used. UInt or IntReturned valueArray with elements partially shuffled.Implementation detailsNoteThis function will not materialize constants.The value of limit should be in the range [1..N]. Values outside of that range are equivalent to performing full arrayShuffle.\nExamples: SELECT arrayPartialShuffle([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1)SELECT arrayPartialShuffle([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2);\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["variantElement"], "Feature": ["variantElement(variant, type_name, [, default_value])"], "Description": ["variantElement", "Extracts a column with specified type from a Variant column.", "Syntax", "variantElement(variant, type_name, [, default_value])", "Arguments", "variant \u2014 Variant column. Variant.type_name \u2014 The name of the variant type to extract. String.default_value - The default value that will be used if variant doesn't have variant with specified type. Can be any type. Optional.", "Returned value", "Subcolumn of a Variant column with specified type."], "Examples": ["CREATE TABLE test (v Variant(UInt64, String, Array(UInt64))) ENGINE = Memory;INSERT INTO test VALUES (NULL), (42), ('Hello, World!'), ([1, 2, 3]);SELECT v, variantElement(v, 'String'), variantElement(v, 'UInt64'), variantElement(v, 'Array(UInt64)') FROM test;"], "Category": ["Other Functions"], "index": 969, "vector_txt": "969:Feature: variantElement(variant, type_name, [, default_value])\nDescription: variantElementExtracts a column with specified type from a Variant column.SyntaxvariantElement(variant, type_name, [, default_value])Argumentsvariant \u2014 Variant column. Variant.type_name \u2014 The name of the variant type to extract. String.default_value - The default value that will be used if variant doesn't have variant with specified type. Can be any type. Optional.Returned valueSubcolumn of a Variant column with specified type.\nExamples: CREATE TABLE test (v Variant(UInt64, String, Array(UInt64))) ENGINE = Memory;INSERT INTO test VALUES (NULL), (42), ('Hello, World!'), ([1, 2, 3]);SELECT v, variantElement(v, 'String'), variantElement(v, 'UInt64'), variantElement(v, 'Array(UInt64)') FROM test;\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["variantType"], "Feature": ["variantType(variant)"], "Description": ["variantType", "Returns the variant type name for each row of Variant column. If row contains NULL, it returns 'None' for it.", "Syntax", "variantType(variant)", "Arguments", "variant \u2014 Variant column. Variant.", "Returned value", "Enum8 column with variant type name for each row."], "Examples": ["CREATE TABLE test (v Variant(UInt64, String, Array(UInt64))) ENGINE = Memory;INSERT INTO test VALUES (NULL), (42), ('Hello, World!'), ([1, 2, 3]);SELECT variantType(v) FROM test;", "SELECT toTypeName(variantType(v)) FROM test LIMIT 1;"], "Category": ["Other Functions"], "index": 970, "vector_txt": "970:Feature: variantType(variant)\nDescription: variantTypeReturns the variant type name for each row of Variant column. If row contains NULL, it returns 'None' for it.SyntaxvariantType(variant)Argumentsvariant \u2014 Variant column. Variant.Returned valueEnum8 column with variant type name for each row.\nExamples: CREATE TABLE test (v Variant(UInt64, String, Array(UInt64))) ENGINE = Memory;INSERT INTO test VALUES (NULL), (42), ('Hello, World!'), ([1, 2, 3]);SELECT variantType(v) FROM test;SELECT toTypeName(variantType(v)) FROM test LIMIT 1;\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["minSampleSizeConversion"], "Feature": ["minSampleSizeConversion(baseline, mde, power, alpha)"], "Description": ["minSampleSizeConversion", "Calculates minimum required sample size for an A/B test comparing conversions (proportions) in two samples.", "Syntax", "minSampleSizeConversion(baseline, mde, power, alpha)", "Uses the formula described in this article. Assumes equal sizes of treatment and control groups. Returns the sample size required for one group (i.e. the sample size required for the whole experiment is twice the returned value).", "Arguments", "baseline \u2014 Baseline conversion. Float.mde \u2014 Minimum detectable effect (MDE) as percentage points (e.g. for a baseline conversion 0.25 the MDE 0.03 means an expected change to 0.25 \u00b1 0.03). Float.power \u2014 Required statistical power of a test (1 - probability of Type II error). Float.alpha \u2014 Required significance level of a test (probability of Type I error). Float.", "Returned value", "A named Tuple with 3 elements:", "\"minimum_sample_size\" \u2014 Required sample size. Float64.\"detect_range_lower\" \u2014 Lower bound of the range of values not detectable with the returned required sample size (i.e. all values less than or equal to \"detect_range_lower\" are detectable with the provided alpha and power). Calculated as baseline - mde. Float64.\"detect_range_upper\" \u2014 Upper bound of the range of values not detectable with the returned required sample size (i.e. all values greater than or equal to \"detect_range_upper\" are detectable with the provided alpha and power). Calculated as baseline + mde. Float64."], "Examples": ["SELECT minSampleSizeConversion(0.25, 0.03, 0.80, 0.05) AS sample_size;"], "Category": ["Other Functions"], "index": 971, "vector_txt": "971:Feature: minSampleSizeConversion(baseline, mde, power, alpha)\nDescription: minSampleSizeConversionCalculates minimum required sample size for an A/B test comparing conversions (proportions) in two samples.SyntaxminSampleSizeConversion(baseline, mde, power, alpha)Uses the formula described in this article. Assumes equal sizes of treatment and control groups. Returns the sample size required for one group (i.e. the sample size required for the whole experiment is twice the returned value).Argumentsbaseline \u2014 Baseline conversion. Float.mde \u2014 Minimum detectable effect (MDE) as percentage points (e.g. for a baseline conversion 0.25 the MDE 0.03 means an expected change to 0.25 \u00b1 0.03). Float.power \u2014 Required statistical power of a test (1 - probability of Type II error). Float.alpha \u2014 Required significance level of a test (probability of Type I error). Float.Returned valueA named Tuple with 3 elements:\"minimum_sample_size\" \u2014 Required sample size. Float64.\"detect_range_lower\" \u2014 Lower bound of the range of values not detectable with the returned required sample size (i.e. all values less than or equal to \"detect_range_lower\" are detectable with the provided alpha and power). Calculated as baseline - mde. Float64.\"detect_range_upper\" \u2014 Upper bound of the range of values not detectable with the returned required sample size (i.e. all values greater than or equal to \"detect_range_upper\" are detectable with the provided alpha and power). Calculated as baseline + mde. Float64.\nExamples: SELECT minSampleSizeConversion(0.25, 0.03, 0.80, 0.05) AS sample_size;\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["minSampleSizeContinuous"], "Feature": ["minSampleSizeContinous(baseline, sigma, mde, power, alpha)"], "Description": ["minSampleSizeContinuous", "Calculates minimum required sample size for an A/B test comparing means of a continuous metric in two samples.", "Syntax", "minSampleSizeContinous(baseline, sigma, mde, power, alpha)", "Alias: minSampleSizeContinous", "Uses the formula described in this article. Assumes equal sizes of treatment and control groups. Returns the required sample size for one group (i.e. the sample size required for the whole experiment is twice the returned value). Also assumes equal variance of the test metric in treatment and control groups.", "Arguments", "baseline \u2014 Baseline value of a metric. Integer or Float.sigma \u2014 Baseline standard deviation of a metric. Integer or Float.mde \u2014 Minimum detectable effect (MDE) as percentage of the baseline value (e.g. for a baseline value 112.25 the MDE 0.03 means an expected change to 112.25 \u00b1 112.25*0.03). Integer or Float.power \u2014 Required statistical power of a test (1 - probability of Type II error). Integer or Float.alpha \u2014 Required significance level of a test (probability of Type I error). Integer or Float.", "Returned value", "A named Tuple with 3 elements:", "\"minimum_sample_size\" \u2014 Required sample size. Float64.\"detect_range_lower\" \u2014 Lower bound of the range of values not detectable with the returned required sample size (i.e. all values less than or equal to \"detect_range_lower\" are detectable with the provided alpha and power). Calculated as baseline * (1 - mde). Float64.\"detect_range_upper\" \u2014 Upper bound of the range of values not detectable with the returned required sample size (i.e. all values greater than or equal to \"detect_range_upper\" are detectable with the provided alpha and power). Calculated as baseline * (1 + mde). Float64."], "Examples": ["SELECT minSampleSizeContinous(112.25, 21.1, 0.03, 0.80, 0.05) AS sample_size;"], "Category": ["Other Functions"], "index": 972, "vector_txt": "972:Feature: minSampleSizeContinous(baseline, sigma, mde, power, alpha)\nDescription: minSampleSizeContinuousCalculates minimum required sample size for an A/B test comparing means of a continuous metric in two samples.SyntaxminSampleSizeContinous(baseline, sigma, mde, power, alpha)Alias: minSampleSizeContinousUses the formula described in this article. Assumes equal sizes of treatment and control groups. Returns the required sample size for one group (i.e. the sample size required for the whole experiment is twice the returned value). Also assumes equal variance of the test metric in treatment and control groups.Argumentsbaseline \u2014 Baseline value of a metric. Integer or Float.sigma \u2014 Baseline standard deviation of a metric. Integer or Float.mde \u2014 Minimum detectable effect (MDE) as percentage of the baseline value (e.g. for a baseline value 112.25 the MDE 0.03 means an expected change to 112.25 \u00b1 112.25*0.03). Integer or Float.power \u2014 Required statistical power of a test (1 - probability of Type II error). Integer or Float.alpha \u2014 Required significance level of a test (probability of Type I error). Integer or Float.Returned valueA named Tuple with 3 elements:\"minimum_sample_size\" \u2014 Required sample size. Float64.\"detect_range_lower\" \u2014 Lower bound of the range of values not detectable with the returned required sample size (i.e. all values less than or equal to \"detect_range_lower\" are detectable with the provided alpha and power). Calculated as baseline * (1 - mde). Float64.\"detect_range_upper\" \u2014 Upper bound of the range of values not detectable with the returned required sample size (i.e. all values greater than or equal to \"detect_range_upper\" are detectable with the provided alpha and power). Calculated as baseline * (1 + mde). Float64.\nExamples: SELECT minSampleSizeContinous(112.25, 21.1, 0.03, 0.80, 0.05) AS sample_size;\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["connectionId"], "Feature": ["connectionId()"], "Description": ["connectionId", "Retrieves the connection ID of the client that submitted the current query and returns it as a UInt64 integer.", "Syntax", "connectionId()", "Alias: connection_id.", "Parameters", "None.", "Returned value", "The current connection ID. UInt64.", "Implementation details", "This function is most useful in debugging scenarios or for internal purposes within the MySQL handler. It was created for compatibility with MySQL's CONNECTION_ID function It is not typically used in production queries."], "Examples": ["SELECT connectionId();"], "Category": ["Other Functions"], "index": 973, "vector_txt": "973:Feature: connectionId()\nDescription: connectionIdRetrieves the connection ID of the client that submitted the current query and returns it as a UInt64 integer.SyntaxconnectionId()Alias: connection_id.ParametersNone.Returned valueThe current connection ID. UInt64.Implementation detailsThis function is most useful in debugging scenarios or for internal purposes within the MySQL handler. It was created for compatibility with MySQL's CONNECTION_ID function It is not typically used in production queries.\nExamples: SELECT connectionId();\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["getClientHTTPHeader"], "Feature": ["getClientHTTPHeader"], "Description": ["getClientHTTPHeader", "Get the value of an HTTP header.", "If there is no such header or the current request is not performed via the HTTP interface, the function returns an empty string.\nCertain HTTP headers (e.g., Authentication and X-ClickHouse-*) are restricted.", "The function requires the setting allow_get_client_http_header to be enabled.\nThe setting is not enabled by default for security reasons, because some headers, such as Cookie, could contain sensitive info.", "HTTP headers are case sensitive for this function.", "If the function is used in the context of a distributed query, it returns non-empty result only on the initiator node."], "Examples": [], "Category": ["Other Functions"], "index": 974, "vector_txt": "974:Feature: getClientHTTPHeader\nDescription: getClientHTTPHeaderGet the value of an HTTP header.If there is no such header or the current request is not performed via the HTTP interface, the function returns an empty string.\nCertain HTTP headers (e.g., Authentication and X-ClickHouse-*) are restricted.The function requires the setting allow_get_client_http_header to be enabled.\nThe setting is not enabled by default for security reasons, because some headers, such as Cookie, could contain sensitive info.HTTP headers are case sensitive for this function.If the function is used in the context of a distributed query, it returns non-empty result only on the initiator node.\nExamples: \nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["showCertificate"], "Feature": ["showCertificate()"], "Description": ["showCertificate", "Shows information about the current server's Secure Sockets Layer (SSL) certificate if it has been configured. See Configuring SSL-TLS for more information on how to configure ClickHouse to use OpenSSL certificates to validate connections.", "Syntax", "showCertificate()", "Returned value", "Map of key-value pairs relating to the configured SSL certificate. Map(String, String)."], "Examples": ["SELECT showCertificate() FORMAT LineAsString;"], "Category": ["Other Functions"], "index": 975, "vector_txt": "975:Feature: showCertificate()\nDescription: showCertificateShows information about the current server's Secure Sockets Layer (SSL) certificate if it has been configured. See Configuring SSL-TLS for more information on how to configure ClickHouse to use OpenSSL certificates to validate connections.SyntaxshowCertificate()Returned valueMap of key-value pairs relating to the configured SSL certificate. Map(String, String).\nExamples: SELECT showCertificate() FORMAT LineAsString;\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["lowCardinalityIndices"], "Feature": ["lowCardinalityIndices(col)"], "Description": ["lowCardinalityIndices", "Returns the position of a value in the dictionary of a LowCardinality column. Positions start at 1. Since LowCardinality have per-part dictionaries, this function may return different positions for the same value in different parts.", "Syntax", "lowCardinalityIndices(col)", "Arguments", "col \u2014 a low cardinality column. LowCardinality.", "Returned value", "The position of the value in the dictionary of the current part. UInt64."], "Examples": ["DROP TABLE IF EXISTS test;CREATE TABLE test (s LowCardinality(String)) ENGINE = Memory;-- create two parts:INSERT INTO test VALUES ('ab'), ('cd'), ('ab'), ('ab'), ('df');INSERT INTO test VALUES ('ef'), ('cd'), ('ab'), ('cd'), ('ef');SELECT s, lowCardinalityIndices(s) FROM test;"], "Category": ["Other Functions"], "index": 976, "vector_txt": "976:Feature: lowCardinalityIndices(col)\nDescription: lowCardinalityIndicesReturns the position of a value in the dictionary of a LowCardinality column. Positions start at 1. Since LowCardinality have per-part dictionaries, this function may return different positions for the same value in different parts.SyntaxlowCardinalityIndices(col)Argumentscol \u2014 a low cardinality column. LowCardinality.Returned valueThe position of the value in the dictionary of the current part. UInt64.\nExamples: DROP TABLE IF EXISTS test;CREATE TABLE test (s LowCardinality(String)) ENGINE = Memory;-- create two parts:INSERT INTO test VALUES ('ab'), ('cd'), ('ab'), ('ab'), ('df');INSERT INTO test VALUES ('ef'), ('cd'), ('ab'), ('cd'), ('ef');SELECT s, lowCardinalityIndices(s) FROM test;\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["lowCardinalityKeys"], "Feature": ["lowCardinalityIndices(col)"], "Description": ["lowCardinalityKeys", "Returns the dictionary values of a LowCardinality column. If the block is smaller or larger than the dictionary size, the result will be truncated or extended with default values. Since LowCardinality have per-part dictionaries, this function may return different dictionary values in different parts.", "Syntax", "lowCardinalityIndices(col)", "Arguments", "col \u2014 a low cardinality column. LowCardinality.", "Returned value", "The dictionary keys. UInt64."], "Examples": ["DROP TABLE IF EXISTS test;CREATE TABLE test (s LowCardinality(String)) ENGINE = Memory;-- create two parts:INSERT INTO test VALUES ('ab'), ('cd'), ('ab'), ('ab'), ('df');INSERT INTO test VALUES ('ef'), ('cd'), ('ab'), ('cd'), ('ef');SELECT s, lowCardinalityKeys(s) FROM test;"], "Category": ["Other Functions"], "index": 977, "vector_txt": "977:Feature: lowCardinalityIndices(col)\nDescription: lowCardinalityKeysReturns the dictionary values of a LowCardinality column. If the block is smaller or larger than the dictionary size, the result will be truncated or extended with default values. Since LowCardinality have per-part dictionaries, this function may return different dictionary values in different parts.SyntaxlowCardinalityIndices(col)Argumentscol \u2014 a low cardinality column. LowCardinality.Returned valueThe dictionary keys. UInt64.\nExamples: DROP TABLE IF EXISTS test;CREATE TABLE test (s LowCardinality(String)) ENGINE = Memory;-- create two parts:INSERT INTO test VALUES ('ab'), ('cd'), ('ab'), ('ab'), ('df');INSERT INTO test VALUES ('ef'), ('cd'), ('ab'), ('cd'), ('ef');SELECT s, lowCardinalityKeys(s) FROM test;\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["displayName"], "Feature": ["displayName()"], "Description": ["displayName", "Returns the value of display_name from config or server Fully Qualified Domain Name (FQDN) if not set.", "Syntax", "displayName()", "Returned value", "Value of display_name from config or server FQDN if not set. String."], "Examples": ["SELECT displayName();"], "Category": ["Other Functions"], "index": 978, "vector_txt": "978:Feature: displayName()\nDescription: displayNameReturns the value of display_name from config or server Fully Qualified Domain Name (FQDN) if not set.SyntaxdisplayName()Returned valueValue of display_name from config or server FQDN if not set. String.\nExamples: SELECT displayName();\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayUniq(arr, ...)"], "Feature": ["arrayUniq(arr, ...)"], "Description": ["arrayUniq(arr, ...)", "If one argument is passed, it counts the number of different elements in the array.\nIf multiple arguments are passed, it counts the number of different tuples of elements at corresponding positions in multiple arrays.", "If you want to get a list of unique items in an array, you can use arrayReduce(\u2018groupUniqArray\u2019, arr)."], "Examples": [], "Category": ["Arrays Functions"], "index": 979, "vector_txt": "979:Feature: arrayUniq(arr, ...)\nDescription: arrayUniq(arr, ...)If one argument is passed, it counts the number of different elements in the array.\nIf multiple arguments are passed, it counts the number of different tuples of elements at corresponding positions in multiple arrays.If you want to get a list of unique items in an array, you can use arrayReduce(\u2018groupUniqArray\u2019, arr).\nExamples: \nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/arithmetic-functions"], "Title": ["isFinite"], "Feature": ["isFinite(x)"], "Description": ["isFinite", "Returns 1 if the Float32 or Float64 argument not infinite and not a NaN, otherwise this function returns 0.", "Syntax", "isFinite(x)"], "Examples": ["isFinite(x)"], "Category": ["Arithmetic Functions"], "index": 980, "vector_txt": "980:Feature: isFinite(x)\nDescription: isFiniteReturns 1 if the Float32 or Float64 argument not infinite and not a NaN, otherwise this function returns 0.SyntaxisFinite(x)\nExamples: isFinite(x)\nCategory: Arithmetic Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["transactionID"], "Feature": ["transactionID()"], "Description": ["transactionID", "Returns the ID of a transaction.", "NoteThis function is part of an experimental feature set. Enable experimental transaction support by adding this setting to your configuration:<clickhouse>  <allow_experimental_transactions>1</allow_experimental_transactions></clickhouse>For more information see the page Transactional (ACID) support.", "Syntax", "transactionID()", "Returned value", "Returns a tuple consisting of start_csn, local_tid and host_id. Tuple.start_csn: Global sequential number, the newest commit timestamp that was seen when this transaction began. UInt64.local_tid: Local sequential number that is unique for each transaction started by this host within a specific start_csn. UInt64.host_id: UUID of the host that has started this transaction. UUID."], "Examples": ["BEGIN TRANSACTION;SELECT transactionID();ROLLBACK;"], "Category": ["Other Functions"], "index": 981, "vector_txt": "981:Feature: transactionID()\nDescription: transactionIDReturns the ID of a transaction.NoteThis function is part of an experimental feature set. Enable experimental transaction support by adding this setting to your configuration:<clickhouse>  <allow_experimental_transactions>1</allow_experimental_transactions></clickhouse>For more information see the page Transactional (ACID) support.SyntaxtransactionID()Returned valueReturns a tuple consisting of start_csn, local_tid and host_id. Tuple.start_csn: Global sequential number, the newest commit timestamp that was seen when this transaction began. UInt64.local_tid: Local sequential number that is unique for each transaction started by this host within a specific start_csn. UInt64.host_id: UUID of the host that has started this transaction. UUID.\nExamples: BEGIN TRANSACTION;SELECT transactionID();ROLLBACK;\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["transactionLatestSnapshot"], "Feature": ["transactionLatestSnapshot()"], "Description": ["transactionLatestSnapshot", "Returns the newest snapshot (Commit Sequence Number) of a transaction that is available for reading.", "NoteThis function is part of an experimental feature set. Enable experimental transaction support by adding this setting to your configuration:<clickhouse>  <allow_experimental_transactions>1</allow_experimental_transactions></clickhouse>For more information see the page Transactional (ACID) support.", "Syntax", "transactionLatestSnapshot()", "Returned value", "Returns the latest snapshot (CSN) of a transaction. UInt64"], "Examples": ["BEGIN TRANSACTION;SELECT transactionLatestSnapshot();ROLLBACK;"], "Category": ["Other Functions"], "index": 982, "vector_txt": "982:Feature: transactionLatestSnapshot()\nDescription: transactionLatestSnapshotReturns the newest snapshot (Commit Sequence Number) of a transaction that is available for reading.NoteThis function is part of an experimental feature set. Enable experimental transaction support by adding this setting to your configuration:<clickhouse>  <allow_experimental_transactions>1</allow_experimental_transactions></clickhouse>For more information see the page Transactional (ACID) support.SyntaxtransactionLatestSnapshot()Returned valueReturns the latest snapshot (CSN) of a transaction. UInt64\nExamples: BEGIN TRANSACTION;SELECT transactionLatestSnapshot();ROLLBACK;\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["transactionOldestSnapshot"], "Feature": ["transactionOldestSnapshot()"], "Description": ["transactionOldestSnapshot", "Returns the oldest snapshot (Commit Sequence Number) that is visible for some running transaction.", "NoteThis function is part of an experimental feature set. Enable experimental transaction support by adding this setting to your configuration:<clickhouse>  <allow_experimental_transactions>1</allow_experimental_transactions></clickhouse>For more information see the page Transactional (ACID) support.", "Syntax", "transactionOldestSnapshot()", "Returned value", "Returns the oldest snapshot (CSN) of a transaction. UInt64"], "Examples": ["BEGIN TRANSACTION;SELECT transactionLatestSnapshot();ROLLBACK;"], "Category": ["Other Functions"], "index": 983, "vector_txt": "983:Feature: transactionOldestSnapshot()\nDescription: transactionOldestSnapshotReturns the oldest snapshot (Commit Sequence Number) that is visible for some running transaction.NoteThis function is part of an experimental feature set. Enable experimental transaction support by adding this setting to your configuration:<clickhouse>  <allow_experimental_transactions>1</allow_experimental_transactions></clickhouse>For more information see the page Transactional (ACID) support.SyntaxtransactionOldestSnapshot()Returned valueReturns the oldest snapshot (CSN) of a transaction. UInt64\nExamples: BEGIN TRANSACTION;SELECT transactionLatestSnapshot();ROLLBACK;\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["getSubcolumn"], "Feature": ["getSubcolumn(col_name, subcol_name)"], "Description": ["getSubcolumn", "Takes a table expression or identifier and constant string with the name of the sub-column, and returns the requested sub-column extracted from the expression.", "Syntax", "getSubcolumn(col_name, subcol_name)", "Arguments", "col_name \u2014 Table expression or identifier. Expression, Identifier.subcol_name \u2014 The name of the sub-column. String.", "Returned value", "Returns the extracted sub-column."], "Examples": ["CREATE TABLE t_arr (arr Array(Tuple(subcolumn1 UInt32, subcolumn2 String))) ENGINE = MergeTree ORDER BY tuple();INSERT INTO t_arr VALUES ([(1, 'Hello'), (2, 'World')]), ([(3, 'This'), (4, 'is'), (5, 'subcolumn')]);SELECT getSubcolumn(arr, 'subcolumn1'), getSubcolumn(arr, 'subcolumn2') FROM t_arr;"], "Category": ["Other Functions"], "index": 984, "vector_txt": "984:Feature: getSubcolumn(col_name, subcol_name)\nDescription: getSubcolumnTakes a table expression or identifier and constant string with the name of the sub-column, and returns the requested sub-column extracted from the expression.SyntaxgetSubcolumn(col_name, subcol_name)Argumentscol_name \u2014 Table expression or identifier. Expression, Identifier.subcol_name \u2014 The name of the sub-column. String.Returned valueReturns the extracted sub-column.\nExamples: CREATE TABLE t_arr (arr Array(Tuple(subcolumn1 UInt32, subcolumn2 String))) ENGINE = MergeTree ORDER BY tuple();INSERT INTO t_arr VALUES ([(1, 'Hello'), (2, 'World')]), ([(3, 'This'), (4, 'is'), (5, 'subcolumn')]);SELECT getSubcolumn(arr, 'subcolumn1'), getSubcolumn(arr, 'subcolumn2') FROM t_arr;\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["getTypeSerializationStreams"], "Feature": ["getTypeSerializationStreams(col)"], "Description": ["getTypeSerializationStreams", "Enumerates stream paths of a data type.", "NoteThis function is intended for use by developers.", "Syntax", "getTypeSerializationStreams(col)", "Arguments", "col \u2014 Column or string representation of a data-type from which the data type will be detected.", "Returned value", "Returns an array with all the serialization sub-stream paths.Array(String)."], "Examples": ["SELECT getTypeSerializationStreams(tuple('a', 1, 'b', 2));", "SELECT getTypeSerializationStreams('Map(String, Int64)');"], "Category": ["Other Functions"], "index": 985, "vector_txt": "985:Feature: getTypeSerializationStreams(col)\nDescription: getTypeSerializationStreamsEnumerates stream paths of a data type.NoteThis function is intended for use by developers.SyntaxgetTypeSerializationStreams(col)Argumentscol \u2014 Column or string representation of a data-type from which the data type will be detected.Returned valueReturns an array with all the serialization sub-stream paths.Array(String).\nExamples: SELECT getTypeSerializationStreams(tuple('a', 1, 'b', 2));SELECT getTypeSerializationStreams('Map(String, Int64)');\nCategory: Other Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/random-functions"], "Title": ["rand"], "Feature": ["rand()"], "Description": ["rand", "Returns a random UInt32 number with uniform distribution.", "Uses a linear congruential generator with an initial state obtained from the system, which means that while it appears random, it's not truly random and can be predictable if the initial state is known. For scenarios where true randomness is crucial, consider using alternative methods like system-level calls or integrating with external libraries.", "Syntax", "rand()", "Alias: rand32", "Arguments", "None.", "Returned value", "Returns a number of type UInt32."], "Examples": ["SELECT rand();"], "Category": ["Random Numbers Functions"], "index": 986, "vector_txt": "986:Feature: rand()\nDescription: randReturns a random UInt32 number with uniform distribution.Uses a linear congruential generator with an initial state obtained from the system, which means that while it appears random, it's not truly random and can be predictable if the initial state is known. For scenarios where true randomness is crucial, consider using alternative methods like system-level calls or integrating with external libraries.Syntaxrand()Alias: rand32ArgumentsNone.Returned valueReturns a number of type UInt32.\nExamples: SELECT rand();\nCategory: Random Numbers Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/random-functions"], "Title": ["rand64"], "Feature": ["rand64()"], "Description": ["rand64", "Returns a random UInt64 integer (UInt64) number", "Syntax", "rand64()", "Arguments", "None.", "Returned value", "Returns a number UInt64 number with uniform distribution.", "Uses a linear congruential generator with an initial state obtained from the system, which means that while it appears random, it's not truly random and can be predictable if the initial state is known. For scenarios where true randomness is crucial, consider using alternative methods like system-level calls or integrating with external libraries."], "Examples": ["SELECT rand64();"], "Category": ["Random Numbers Functions"], "index": 987, "vector_txt": "987:Feature: rand64()\nDescription: rand64Returns a random UInt64 integer (UInt64) numberSyntaxrand64()ArgumentsNone.Returned valueReturns a number UInt64 number with uniform distribution.Uses a linear congruential generator with an initial state obtained from the system, which means that while it appears random, it's not truly random and can be predictable if the initial state is known. For scenarios where true randomness is crucial, consider using alternative methods like system-level calls or integrating with external libraries.\nExamples: SELECT rand64();\nCategory: Random Numbers Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/random-functions"], "Title": ["randCanonical"], "Feature": ["randCanonical()"], "Description": ["randCanonical", "Returns a random Float64 number.", "Syntax", "randCanonical()", "Arguments", "None.", "Returned value", "Returns a Float64 value between 0 (inclusive) and 1 (exclusive)."], "Examples": ["SELECT randCanonical();"], "Category": ["Random Numbers Functions"], "index": 988, "vector_txt": "988:Feature: randCanonical()\nDescription: randCanonicalReturns a random Float64 number.SyntaxrandCanonical()ArgumentsNone.Returned valueReturns a Float64 value between 0 (inclusive) and 1 (exclusive).\nExamples: SELECT randCanonical();\nCategory: Random Numbers Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/random-functions"], "Title": ["randConstant"], "Feature": ["randConstant([x]);"], "Description": ["randConstant", "Generates a single constant column filled with a random value. Unlike rand, this function ensures the same random value appears in every row of the generated column, making it useful for scenarios requiring a consistent random seed across rows in a single query.", "Syntax", "randConstant([x]);", "Arguments", "[x] (Optional): An optional expression that influences the generated random value. Even if provided, the resulting value will still be constant within the same query execution. Different queries using the same expression will likely generate different constant values.", "Returned value", "Returns a column of type UInt32 containing the same random value in each row.", "Implementation details", "The actual output will be different for each query execution, even with the same optional expression. The optional parameter may not significantly change the generated value compared to using randConstant alone."], "Examples": ["SELECT randConstant() AS random_value;", "SELECT randConstant(10) AS random_value;"], "Category": ["Random Numbers Functions"], "index": 989, "vector_txt": "989:Feature: randConstant([x]);\nDescription: randConstantGenerates a single constant column filled with a random value. Unlike rand, this function ensures the same random value appears in every row of the generated column, making it useful for scenarios requiring a consistent random seed across rows in a single query.SyntaxrandConstant([x]);Arguments[x] (Optional): An optional expression that influences the generated random value. Even if provided, the resulting value will still be constant within the same query execution. Different queries using the same expression will likely generate different constant values.Returned valueReturns a column of type UInt32 containing the same random value in each row.Implementation detailsThe actual output will be different for each query execution, even with the same optional expression. The optional parameter may not significantly change the generated value compared to using randConstant alone.\nExamples: SELECT randConstant() AS random_value;SELECT randConstant(10) AS random_value;\nCategory: Random Numbers Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/random-functions"], "Title": ["randUniform"], "Feature": ["randUniform(min, max)"], "Description": ["randUniform", "Returns a random Float64 drawn uniformly from interval [min, max].", "Syntax", "randUniform(min, max)", "Arguments", "min - Float64 - left boundary of the range,max - Float64 - right boundary of the range.", "Returned value", "A random number of type Float64."], "Examples": ["SELECT randUniform(5.5, 10) FROM numbers(5)"], "Category": ["Random Numbers Functions"], "index": 990, "vector_txt": "990:Feature: randUniform(min, max)\nDescription: randUniformReturns a random Float64 drawn uniformly from interval [min, max].SyntaxrandUniform(min, max)Argumentsmin - Float64 - left boundary of the range,max - Float64 - right boundary of the range.Returned valueA random number of type Float64.\nExamples: SELECT randUniform(5.5, 10) FROM numbers(5)\nCategory: Random Numbers Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayJoin(arr)"], "Feature": ["arrayJoin(arr)"], "Description": ["arrayJoin(arr)", "A special function. See the section \u201cArrayJoin function\u201d."], "Examples": [], "Category": ["Arrays Functions"], "index": 991, "vector_txt": "991:Feature: arrayJoin(arr)\nDescription: arrayJoin(arr)A special function. See the section \u201cArrayJoin function\u201d.\nExamples: \nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/random-functions"], "Title": ["randNormal"], "Feature": ["randNormal(mean, variance)"], "Description": ["randNormal", "Returns a random Float64 drawn from a normal distribution.", "Syntax", "randNormal(mean, variance)", "Arguments", "mean - Float64 - mean value of distribution,variance - Float64 - variance of the distribution.", "Returned value", "Random number. Float64."], "Examples": ["SELECT randNormal(10, 2) FROM numbers(5)"], "Category": ["Random Numbers Functions"], "index": 992, "vector_txt": "992:Feature: randNormal(mean, variance)\nDescription: randNormalReturns a random Float64 drawn from a normal distribution.SyntaxrandNormal(mean, variance)Argumentsmean - Float64 - mean value of distribution,variance - Float64 - variance of the distribution.Returned valueRandom number. Float64.\nExamples: SELECT randNormal(10, 2) FROM numbers(5)\nCategory: Random Numbers Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/random-functions"], "Title": ["randLogNormal"], "Feature": ["randLogNormal(mean, variance)"], "Description": ["randLogNormal", "Returns a random Float64 drawn from a log-normal distribution.", "Syntax", "randLogNormal(mean, variance)", "Arguments", "mean - Float64 - mean value of distribution,variance - Float64 - variance of the distribution.", "Returned value", "Random number. Float64."], "Examples": ["SELECT randLogNormal(100, 5) FROM numbers(5)"], "Category": ["Random Numbers Functions"], "index": 993, "vector_txt": "993:Feature: randLogNormal(mean, variance)\nDescription: randLogNormalReturns a random Float64 drawn from a log-normal distribution.SyntaxrandLogNormal(mean, variance)Argumentsmean - Float64 - mean value of distribution,variance - Float64 - variance of the distribution.Returned valueRandom number. Float64.\nExamples: SELECT randLogNormal(100, 5) FROM numbers(5)\nCategory: Random Numbers Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/random-functions"], "Title": ["randBinomial"], "Feature": ["randBinomial(experiments, probability)"], "Description": ["randBinomial", "Returns a random UInt64 drawn from a binomial distribution.", "Syntax", "randBinomial(experiments, probability)", "Arguments", "experiments - UInt64 - number of experiments,probability - Float64 - probability of success in each experiment, a value between 0 and 1.", "Returned value", "Random number. UInt64."], "Examples": ["SELECT randBinomial(100, .75) FROM numbers(5)"], "Category": ["Random Numbers Functions"], "index": 994, "vector_txt": "994:Feature: randBinomial(experiments, probability)\nDescription: randBinomialReturns a random UInt64 drawn from a binomial distribution.SyntaxrandBinomial(experiments, probability)Argumentsexperiments - UInt64 - number of experiments,probability - Float64 - probability of success in each experiment, a value between 0 and 1.Returned valueRandom number. UInt64.\nExamples: SELECT randBinomial(100, .75) FROM numbers(5)\nCategory: Random Numbers Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/random-functions"], "Title": ["randNegativeBinomial"], "Feature": ["randNegativeBinomial(experiments, probability)"], "Description": ["randNegativeBinomial", "Returns a random UInt64 drawn from a negative binomial distribution.", "Syntax", "randNegativeBinomial(experiments, probability)", "Arguments", "experiments - UInt64 - number of experiments,probability - Float64 - probability of failure in each experiment, a value between 0 and 1.", "Returned value", "Random number. UInt64."], "Examples": ["SELECT randNegativeBinomial(100, .75) FROM numbers(5)"], "Category": ["Random Numbers Functions"], "index": 995, "vector_txt": "995:Feature: randNegativeBinomial(experiments, probability)\nDescription: randNegativeBinomialReturns a random UInt64 drawn from a negative binomial distribution.SyntaxrandNegativeBinomial(experiments, probability)Argumentsexperiments - UInt64 - number of experiments,probability - Float64 - probability of failure in each experiment, a value between 0 and 1.Returned valueRandom number. UInt64.\nExamples: SELECT randNegativeBinomial(100, .75) FROM numbers(5)\nCategory: Random Numbers Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/random-functions"], "Title": ["randPoisson"], "Feature": ["randPoisson(n)"], "Description": ["randPoisson", "Returns a random UInt64 drawn from a Poisson distribution.", "Syntax", "randPoisson(n)", "Arguments", "n - UInt64 - mean number of occurrences.", "Returned value", "Random number. UInt64."], "Examples": ["SELECT randPoisson(10) FROM numbers(5)"], "Category": ["Random Numbers Functions"], "index": 996, "vector_txt": "996:Feature: randPoisson(n)\nDescription: randPoissonReturns a random UInt64 drawn from a Poisson distribution.SyntaxrandPoisson(n)Argumentsn - UInt64 - mean number of occurrences.Returned valueRandom number. UInt64.\nExamples: SELECT randPoisson(10) FROM numbers(5)\nCategory: Random Numbers Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/random-functions"], "Title": ["randBernoulli"], "Feature": ["randBernoulli(probability)"], "Description": ["randBernoulli", "Returns a random UInt64 drawn from a Bernoulli distribution.", "Syntax", "randBernoulli(probability)", "Arguments", "probability - Float64 - probability of success, a value between 0 and 1.", "Returned value", "Random number. UInt64."], "Examples": ["SELECT randBernoulli(.75) FROM numbers(5)"], "Category": ["Random Numbers Functions"], "index": 997, "vector_txt": "997:Feature: randBernoulli(probability)\nDescription: randBernoulliReturns a random UInt64 drawn from a Bernoulli distribution.SyntaxrandBernoulli(probability)Argumentsprobability - Float64 - probability of success, a value between 0 and 1.Returned valueRandom number. UInt64.\nExamples: SELECT randBernoulli(.75) FROM numbers(5)\nCategory: Random Numbers Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/random-functions"], "Title": ["randExponential"], "Feature": ["randExponential(lambda)"], "Description": ["randExponential", "Returns a random Float64 drawn from a exponential distribution.", "Syntax", "randExponential(lambda)", "Arguments", "lambda - Float64 - lambda value.", "Returned value", "Random number. Float64."], "Examples": ["SELECT randExponential(1/10) FROM numbers(5)"], "Category": ["Random Numbers Functions"], "index": 998, "vector_txt": "998:Feature: randExponential(lambda)\nDescription: randExponentialReturns a random Float64 drawn from a exponential distribution.SyntaxrandExponential(lambda)Argumentslambda - Float64 - lambda value.Returned valueRandom number. Float64.\nExamples: SELECT randExponential(1/10) FROM numbers(5)\nCategory: Random Numbers Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/random-functions"], "Title": ["randChiSquared"], "Feature": ["randChiSquared(degree_of_freedom)"], "Description": ["randChiSquared", "Returns a random Float64 drawn from a Chi-square distribution - a distribution of a sum of the squares of k independent standard normal random variables.", "Syntax", "randChiSquared(degree_of_freedom)", "Arguments", "degree_of_freedom - Float64 - degree of freedom.", "Returned value", "Random number. Float64."], "Examples": ["SELECT randChiSquared(10) FROM numbers(5)"], "Category": ["Random Numbers Functions"], "index": 999, "vector_txt": "999:Feature: randChiSquared(degree_of_freedom)\nDescription: randChiSquaredReturns a random Float64 drawn from a Chi-square distribution - a distribution of a sum of the squares of k independent standard normal random variables.SyntaxrandChiSquared(degree_of_freedom)Argumentsdegree_of_freedom - Float64 - degree of freedom.Returned valueRandom number. Float64.\nExamples: SELECT randChiSquared(10) FROM numbers(5)\nCategory: Random Numbers Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/random-functions"], "Title": ["randStudentT"], "Feature": ["randStudentT(degree_of_freedom)"], "Description": ["randStudentT", "Returns a random Float64 drawn from a Student's t-distribution.", "Syntax", "randStudentT(degree_of_freedom)", "Arguments", "degree_of_freedom - Float64 - degree of freedom.", "Returned value", "Random number. Float64."], "Examples": ["SELECT randStudentT(10) FROM numbers(5)"], "Category": ["Random Numbers Functions"], "index": 1000, "vector_txt": "1000:Feature: randStudentT(degree_of_freedom)\nDescription: randStudentTReturns a random Float64 drawn from a Student's t-distribution.SyntaxrandStudentT(degree_of_freedom)Argumentsdegree_of_freedom - Float64 - degree of freedom.Returned valueRandom number. Float64.\nExamples: SELECT randStudentT(10) FROM numbers(5)\nCategory: Random Numbers Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/random-functions"], "Title": ["randFisherF"], "Feature": ["randFisherF(d1, d2)"], "Description": ["randFisherF", "Returns a random Float64 drawn from a F-distribution.", "Syntax", "randFisherF(d1, d2)", "Arguments", "d1 - Float64 - d1 degree of freedom in X = (S1 / d1) / (S2 / d2),d2 - Float64 - d2 degree of freedom in X = (S1 / d1) / (S2 / d2),", "Returned value", "Random number. Float64."], "Examples": ["SELECT randFisherF(10, 3) FROM numbers(5)"], "Category": ["Random Numbers Functions"], "index": 1001, "vector_txt": "1001:Feature: randFisherF(d1, d2)\nDescription: randFisherFReturns a random Float64 drawn from a F-distribution.SyntaxrandFisherF(d1, d2)Argumentsd1 - Float64 - d1 degree of freedom in X = (S1 / d1) / (S2 / d2),d2 - Float64 - d2 degree of freedom in X = (S1 / d1) / (S2 / d2),Returned valueRandom number. Float64.\nExamples: SELECT randFisherF(10, 3) FROM numbers(5)\nCategory: Random Numbers Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayDifference"], "Feature": ["arrayDifference(array)"], "Description": ["arrayDifference", "Calculates an array of differences between adjacent array elements. The first element of the result array will be 0, the second a[1] - a[0], the third a[2] - a[1], etc. The type of elements in the result array is determined by the type inference rules for subtraction (e.g. UInt8 - UInt8 = Int16).", "Syntax", "arrayDifference(array)", "Arguments", "array \u2013 Array.", "Returned values", "Returns an array of differences between adjacent array elements. UInt*, Int*, Float*."], "Examples": ["SELECT arrayDifference([1, 2, 3, 4]);", "SELECT arrayDifference([0, 10000000000000000000]);"], "Category": ["Arrays Functions"], "index": 1002, "vector_txt": "1002:Feature: arrayDifference(array)\nDescription: arrayDifferenceCalculates an array of differences between adjacent array elements. The first element of the result array will be 0, the second a[1] - a[0], the third a[2] - a[1], etc. The type of elements in the result array is determined by the type inference rules for subtraction (e.g. UInt8 - UInt8 = Int16).SyntaxarrayDifference(array)Argumentsarray \u2013 Array.Returned valuesReturns an array of differences between adjacent array elements. UInt*, Int*, Float*.\nExamples: SELECT arrayDifference([1, 2, 3, 4]);SELECT arrayDifference([0, 10000000000000000000]);\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/random-functions"], "Title": ["randomString"], "Feature": ["randomString(length)"], "Description": ["randomString", "Generates a string of the specified length filled with random bytes (including zero bytes). Not all characters may be printable.", "Syntax", "randomString(length)", "Arguments", "length \u2014 String length in bytes. Positive integer.", "Returned value", "String filled with random bytes. String."], "Examples": ["SELECT randomString(30) AS str, length(str) AS len FROM numbers(2) FORMAT Vertical;"], "Category": ["Random Numbers Functions"], "index": 1003, "vector_txt": "1003:Feature: randomString(length)\nDescription: randomStringGenerates a string of the specified length filled with random bytes (including zero bytes). Not all characters may be printable.SyntaxrandomString(length)Argumentslength \u2014 String length in bytes. Positive integer.Returned valueString filled with random bytes. String.\nExamples: SELECT randomString(30) AS str, length(str) AS len FROM numbers(2) FORMAT Vertical;\nCategory: Random Numbers Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/random-functions"], "Title": ["randomFixedString"], "Feature": ["randomFixedString(length);"], "Description": ["randomFixedString", "Generates a binary string of the specified length filled with random bytes (including zero bytes). Not all characters may be printable.", "Syntax", "randomFixedString(length);", "Arguments", "length \u2014 String length in bytes. UInt64.", "Returned value(s)", "String filled with random bytes. FixedString."], "Examples": ["SELECT randomFixedString(13) as rnd, toTypeName(rnd)"], "Category": ["Random Numbers Functions"], "index": 1004, "vector_txt": "1004:Feature: randomFixedString(length);\nDescription: randomFixedStringGenerates a binary string of the specified length filled with random bytes (including zero bytes). Not all characters may be printable.SyntaxrandomFixedString(length);Argumentslength \u2014 String length in bytes. UInt64.Returned value(s)String filled with random bytes. FixedString.\nExamples: SELECT randomFixedString(13) as rnd, toTypeName(rnd)\nCategory: Random Numbers Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/random-functions"], "Title": ["randomPrintableASCII"], "Feature": ["randomPrintableASCII(length)"], "Description": ["randomPrintableASCII", "Generates a string with a random set of ASCII characters. All characters are printable.\nIf you pass length < 0, the behavior of the function is undefined.", "Syntax", "randomPrintableASCII(length)", "Arguments", "length \u2014 String length in bytes. Positive integer.", "Returned value", "String with a random set of ASCII printable characters. String"], "Examples": ["SELECT number, randomPrintableASCII(30) as str, length(str) FROM system.numbers LIMIT 3"], "Category": ["Random Numbers Functions"], "index": 1005, "vector_txt": "1005:Feature: randomPrintableASCII(length)\nDescription: randomPrintableASCIIGenerates a string with a random set of ASCII characters. All characters are printable.\nIf you pass length < 0, the behavior of the function is undefined.SyntaxrandomPrintableASCII(length)Argumentslength \u2014 String length in bytes. Positive integer.Returned valueString with a random set of ASCII printable characters. String\nExamples: SELECT number, randomPrintableASCII(30) as str, length(str) FROM system.numbers LIMIT 3\nCategory: Random Numbers Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/random-functions"], "Title": ["randomStringUTF8"], "Feature": ["randomStringUTF8(length);"], "Description": ["randomStringUTF8", "Generates a random string of a specified length. Result string contains valid UTF-8 code points. The value of code points may be outside of the range of assigned Unicode.", "Syntax", "randomStringUTF8(length);", "Arguments", "length \u2014 Length of the string in code points. UInt64.", "Returned value(s)", "UTF-8 random string. String."], "Examples": ["SELECT randomStringUTF8(13)"], "Category": ["Random Numbers Functions"], "index": 1006, "vector_txt": "1006:Feature: randomStringUTF8(length);\nDescription: randomStringUTF8Generates a random string of a specified length. Result string contains valid UTF-8 code points. The value of code points may be outside of the range of assigned Unicode.SyntaxrandomStringUTF8(length);Argumentslength \u2014 Length of the string in code points. UInt64.Returned value(s)UTF-8 random string. String.\nExamples: SELECT randomStringUTF8(13)\nCategory: Random Numbers Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/random-functions"], "Title": ["fuzzBits"], "Feature": ["fuzzBits(s, prob)"], "Description": ["fuzzBits", "Syntax", "Flips the bits of String or FixedString s, each with probability prob.", "Syntax", "fuzzBits(s, prob)", "Arguments", "s - String or FixedString,prob - constant Float32/64 between 0.0 and 1.0.", "Returned value", "Fuzzed string with same type as s."], "Examples": ["SELECT fuzzBits(materialize('abacaba'), 0.1)FROM numbers(3)"], "Category": ["Random Numbers Functions"], "index": 1007, "vector_txt": "1007:Feature: fuzzBits(s, prob)\nDescription: fuzzBitsSyntaxFlips the bits of String or FixedString s, each with probability prob.SyntaxfuzzBits(s, prob)Argumentss - String or FixedString,prob - constant Float32/64 between 0.0 and 1.0.Returned valueFuzzed string with same type as s.\nExamples: SELECT fuzzBits(materialize('abacaba'), 0.1)FROM numbers(3)\nCategory: Random Numbers Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-replace-functions"], "Title": ["overlay"], "Feature": ["overlay(s, replace, offset[, length])"], "Description": ["overlay", "Replace part of the string input with another string replace, starting at the 1-based index offset.", "Syntax", "overlay(s, replace, offset[, length])", "Parameters", "s: A string type String.replace: A string type String.offset: An integer type Int (1-based). If offset is negative, it is counted from the end of the string s.length: Optional. An integer type Int. length specifies the length of the snippet within the input string s to be replaced. If length is not specified, the number of bytes removed from s equals the length of replace; otherwise length bytes are removed.", "Returned value", "A String data type value."], "Examples": ["SELECT overlay('My father is from Mexico.', 'mother', 4) AS res;", "SELECT overlay('My father is from Mexico.', 'dad', 4, 6) AS res;"], "Category": ["Replacing in Strings Functions"], "index": 1008, "vector_txt": "1008:Feature: overlay(s, replace, offset[, length])\nDescription: overlayReplace part of the string input with another string replace, starting at the 1-based index offset.Syntaxoverlay(s, replace, offset[, length])Parameterss: A string type String.replace: A string type String.offset: An integer type Int (1-based). If offset is negative, it is counted from the end of the string s.length: Optional. An integer type Int. length specifies the length of the snippet within the input string s to be replaced. If length is not specified, the number of bytes removed from s equals the length of replace; otherwise length bytes are removed.Returned valueA String data type value.\nExamples: SELECT overlay('My father is from Mexico.', 'mother', 4) AS res;SELECT overlay('My father is from Mexico.', 'dad', 4, 6) AS res;\nCategory: Replacing in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-replace-functions"], "Title": ["overlayUTF8"], "Feature": ["overlayUTF8(s, replace, offset[, length])"], "Description": ["overlayUTF8", "Replace part of the string input with another string replace, starting at the 1-based index offset.", "Assumes that the string contains valid UTF-8 encoded text.\nIf this assumption is violated, no exception is thrown and the result is undefined.", "Syntax", "overlayUTF8(s, replace, offset[, length])", "Parameters", "s: A string type String.replace: A string type String.offset: An integer type Int (1-based). If offset is negative, it is counted from the end of the input string s.length: Optional. An integer type Int. length specifies the length of the snippet within the input string s to be replaced. If length is not specified, the number of characters removed from s equals the length of replace; otherwise length characters are removed.", "Returned value", "A String data type value."], "Examples": ["SELECT overlay('Mein Vater ist aus \u00d6sterreich.', 'der T\u00fcrkei', 20) AS res;"], "Category": ["Replacing in Strings Functions"], "index": 1009, "vector_txt": "1009:Feature: overlayUTF8(s, replace, offset[, length])\nDescription: overlayUTF8Replace part of the string input with another string replace, starting at the 1-based index offset.Assumes that the string contains valid UTF-8 encoded text.\nIf this assumption is violated, no exception is thrown and the result is undefined.SyntaxoverlayUTF8(s, replace, offset[, length])Parameterss: A string type String.replace: A string type String.offset: An integer type Int (1-based). If offset is negative, it is counted from the end of the input string s.length: Optional. An integer type Int. length specifies the length of the snippet within the input string s to be replaced. If length is not specified, the number of characters removed from s equals the length of replace; otherwise length characters are removed.Returned valueA String data type value.\nExamples: SELECT overlay('Mein Vater ist aus \u00d6sterreich.', 'der T\u00fcrkei', 20) AS res;\nCategory: Replacing in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-replace-functions"], "Title": ["replaceOne"], "Feature": ["replaceOne(haystack, pattern, replacement)"], "Description": ["replaceOne", "Replaces the first occurrence of the substring pattern in haystack by the replacement string.", "Syntax", "replaceOne(haystack, pattern, replacement)"], "Examples": ["replaceOne(haystack, pattern, replacement)"], "Category": ["Replacing in Strings Functions"], "index": 1010, "vector_txt": "1010:Feature: replaceOne(haystack, pattern, replacement)\nDescription: replaceOneReplaces the first occurrence of the substring pattern in haystack by the replacement string.SyntaxreplaceOne(haystack, pattern, replacement)\nExamples: replaceOne(haystack, pattern, replacement)\nCategory: Replacing in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-replace-functions"], "Title": ["replaceAll"], "Feature": ["replaceAll(haystack, pattern, replacement)"], "Description": ["replaceAll", "Replaces all occurrences of the substring pattern in haystack by the replacement string.", "Syntax", "replaceAll(haystack, pattern, replacement)", "Alias: replace."], "Examples": ["replaceAll(haystack, pattern, replacement)"], "Category": ["Replacing in Strings Functions"], "index": 1011, "vector_txt": "1011:Feature: replaceAll(haystack, pattern, replacement)\nDescription: replaceAllReplaces all occurrences of the substring pattern in haystack by the replacement string.SyntaxreplaceAll(haystack, pattern, replacement)Alias: replace.\nExamples: replaceAll(haystack, pattern, replacement)\nCategory: Replacing in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-replace-functions"], "Title": ["replaceRegexpOne"], "Feature": ["replaceRegexpOne(haystack, pattern, replacement)"], "Description": ["replaceRegexpOne", "Replaces the first occurrence of the substring matching the regular expression pattern (in re2 syntax) in haystack by the replacement string.", "replacement can contain substitutions \\0-\\9.\nSubstitutions \\1-\\9 correspond to the 1st to 9th capturing group (submatch), substitution \\0 corresponds to the entire match.", "To use a verbatim \\ character in the pattern or replacement strings, escape it using \\.\nAlso keep in mind that string literals require extra escaping.", "Syntax", "replaceRegexpOne(haystack, pattern, replacement)"], "Examples": ["SELECT DISTINCT    EventDate,    replaceRegexpOne(toString(EventDate), '(\\\\d{4})-(\\\\d{2})-(\\\\d{2})', '\\\\2/\\\\3/\\\\1') AS resFROM test.hitsLIMIT 7FORMAT TabSeparated", "SELECT replaceRegexpOne('Hello, World!', '.*', '\\\\0\\\\0\\\\0\\\\0\\\\0\\\\0\\\\0\\\\0\\\\0\\\\0') AS res"], "Category": ["Replacing in Strings Functions"], "index": 1012, "vector_txt": "1012:Feature: replaceRegexpOne(haystack, pattern, replacement)\nDescription: replaceRegexpOneReplaces the first occurrence of the substring matching the regular expression pattern (in re2 syntax) in haystack by the replacement string.replacement can contain substitutions \\0-\\9.\nSubstitutions \\1-\\9 correspond to the 1st to 9th capturing group (submatch), substitution \\0 corresponds to the entire match.To use a verbatim \\ character in the pattern or replacement strings, escape it using \\.\nAlso keep in mind that string literals require extra escaping.SyntaxreplaceRegexpOne(haystack, pattern, replacement)\nExamples: SELECT DISTINCT    EventDate,    replaceRegexpOne(toString(EventDate), '(\\\\d{4})-(\\\\d{2})-(\\\\d{2})', '\\\\2/\\\\3/\\\\1') AS resFROM test.hitsLIMIT 7FORMAT TabSeparatedSELECT replaceRegexpOne('Hello, World!', '.*', '\\\\0\\\\0\\\\0\\\\0\\\\0\\\\0\\\\0\\\\0\\\\0\\\\0') AS res\nCategory: Replacing in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayDistinct"], "Feature": ["arrayDistinct(array)"], "Description": ["arrayDistinct", "Takes an array, returns an array containing the distinct elements only.", "Syntax", "arrayDistinct(array)", "Arguments", "array \u2013 Array.", "Returned values", "Returns an array containing the distinct elements."], "Examples": ["SELECT arrayDistinct([1, 2, 2, 3, 1]);"], "Category": ["Arrays Functions"], "index": 1013, "vector_txt": "1013:Feature: arrayDistinct(array)\nDescription: arrayDistinctTakes an array, returns an array containing the distinct elements only.SyntaxarrayDistinct(array)Argumentsarray \u2013 Array.Returned valuesReturns an array containing the distinct elements.\nExamples: SELECT arrayDistinct([1, 2, 2, 3, 1]);\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-replace-functions"], "Title": ["replaceRegexpAll"], "Feature": ["replaceRegexpAll"], "Description": ["replaceRegexpAll", "Like replaceRegexpOne but replaces all occurrences of the pattern.", "Alias: REGEXP_REPLACE."], "Examples": ["SELECT replaceRegexpAll('Hello, World!', '.', '\\\\0\\\\0') AS res", "SELECT replaceRegexpAll('Hello, World!', '^', 'here: ') AS res"], "Category": ["Replacing in Strings Functions"], "index": 1014, "vector_txt": "1014:Feature: replaceRegexpAll\nDescription: replaceRegexpAllLike replaceRegexpOne but replaces all occurrences of the pattern.Alias: REGEXP_REPLACE.\nExamples: SELECT replaceRegexpAll('Hello, World!', '.', '\\\\0\\\\0') AS resSELECT replaceRegexpAll('Hello, World!', '^', 'here: ') AS res\nCategory: Replacing in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-replace-functions"], "Title": ["regexpQuoteMeta"], "Feature": ["regexpQuoteMeta(s)"], "Description": ["regexpQuoteMeta", "Adds a backslash before these characters with special meaning in regular expressions: \\0, \\\\, |, (, ), ^, $, ., [, ], ?, *, +, {, :, -.", "This implementation slightly differs from re2::RE2::QuoteMeta. It escapes zero byte as \\0 instead of \\x00 and it escapes only required characters.\nFor more information, see RE2", "Syntax", "regexpQuoteMeta(s)"], "Examples": ["regexpQuoteMeta(s)"], "Category": ["Replacing in Strings Functions"], "index": 1015, "vector_txt": "1015:Feature: regexpQuoteMeta(s)\nDescription: regexpQuoteMetaAdds a backslash before these characters with special meaning in regular expressions: \\0, \\\\, |, (, ), ^, $, ., [, ], ?, *, +, {, :, -.This implementation slightly differs from re2::RE2::QuoteMeta. It escapes zero byte as \\0 instead of \\x00 and it escapes only required characters.\nFor more information, see RE2SyntaxregexpQuoteMeta(s)\nExamples: regexpQuoteMeta(s)\nCategory: Replacing in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-replace-functions"], "Title": ["format"], "Feature": ["format(pattern, s0, s1, ...)"], "Description": ["format", "Format the pattern string with the values (strings, integers, etc.) listed in the arguments, similar to formatting in Python. The pattern string can contain replacement fields surrounded by curly braces {}. Anything not contained in braces is considered literal text and copied verbatim into the output. Literal brace character can be escaped by two braces: {{ '{{' }} and {{ '}}' }}. Field names can be numbers (starting from zero) or empty (then they are implicitly given monotonically increasing numbers).", "Syntax", "format(pattern, s0, s1, ...)"], "Examples": ["SELECT format('{1} {0} {1}', 'World', 'Hello')", "SELECT format('{} {}', 'Hello', 'World')"], "Category": ["Replacing in Strings Functions"], "index": 1016, "vector_txt": "1016:Feature: format(pattern, s0, s1, ...)\nDescription: formatFormat the pattern string with the values (strings, integers, etc.) listed in the arguments, similar to formatting in Python. The pattern string can contain replacement fields surrounded by curly braces {}. Anything not contained in braces is considered literal text and copied verbatim into the output. Literal brace character can be escaped by two braces: {{ '{{' }} and {{ '}}' }}. Field names can be numbers (starting from zero) or empty (then they are implicitly given monotonically increasing numbers).Syntaxformat(pattern, s0, s1, ...)\nExamples: SELECT format('{1} {0} {1}', 'World', 'Hello')SELECT format('{} {}', 'Hello', 'World')\nCategory: Replacing in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-replace-functions"], "Title": ["translate"], "Feature": ["translate(s, from, to)"], "Description": ["translate", "Replaces characters in the string s using a one-to-one character mapping defined by from and to strings. from and to must be constant ASCII strings of the same size. Non-ASCII characters in the original string are not modified.", "Syntax", "translate(s, from, to)"], "Examples": ["SELECT translate('Hello, World!', 'delor', 'DELOR') AS res"], "Category": ["Replacing in Strings Functions"], "index": 1017, "vector_txt": "1017:Feature: translate(s, from, to)\nDescription: translateReplaces characters in the string s using a one-to-one character mapping defined by from and to strings. from and to must be constant ASCII strings of the same size. Non-ASCII characters in the original string are not modified.Syntaxtranslate(s, from, to)\nExamples: SELECT translate('Hello, World!', 'delor', 'DELOR') AS res\nCategory: Replacing in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-replace-functions"], "Title": ["translateUTF8"], "Feature": ["translateUTF8(s, from, to)"], "Description": ["translateUTF8", "Like translate but assumes s, from and to are UTF-8 encoded strings.", "Syntax", "translateUTF8(s, from, to)", "Parameters", "s: A string type String.from: A string type String.to: A string type String.", "Returned value", "A String data type value."], "Examples": ["SELECT translateUTF8('M\u00fcnchener Stra\u00dfe', '\u00fc\u00df', 'us') AS res;"], "Category": ["Replacing in Strings Functions"], "index": 1018, "vector_txt": "1018:Feature: translateUTF8(s, from, to)\nDescription: translateUTF8Like translate but assumes s, from and to are UTF-8 encoded strings.SyntaxtranslateUTF8(s, from, to)Parameterss: A string type String.from: A string type String.to: A string type String.Returned valueA String data type value.\nExamples: SELECT translateUTF8('M\u00fcnchener Stra\u00dfe', '\u00fc\u00df', 'us') AS res;\nCategory: Replacing in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-replace-functions"], "Title": ["printf"], "Feature": ["printf(format, arg1, arg2, ...)"], "Description": ["printf", "The printf function formats the given string with the values (strings, integers, floating-points etc.) listed in the arguments, similar to printf function in C++. The format string can contain format specifiers starting with % character. Anything not contained in % and the following format specifier is considered literal text and copied verbatim into the output. Literal % character can be escaped by %%.", "Syntax", "printf(format, arg1, arg2, ...)"], "Examples": ["select printf('%%%s %s %d', 'Hello', 'World', 2024);"], "Category": ["Replacing in Strings Functions"], "index": 1019, "vector_txt": "1019:Feature: printf(format, arg1, arg2, ...)\nDescription: printfThe printf function formats the given string with the values (strings, integers, floating-points etc.) listed in the arguments, similar to printf function in C++. The format string can contain format specifiers starting with % character. Anything not contained in % and the following format specifier is considered literal text and copied verbatim into the output. Literal % character can be escaped by %%.Syntaxprintf(format, arg1, arg2, ...)\nExamples: select printf('%%%s %s %d', 'Hello', 'World', 2024);\nCategory: Replacing in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/rounding-functions"], "Title": ["floor"], "Feature": ["floor(x[, N])"], "Description": ["floor", "Returns the largest rounded number less than or equal x.\nA rounded number is a multiple of 1 / 10  N, or the nearest number of the appropriate data type if 1 / 10  N isn\u2019t exact.", "Integer arguments may be rounded with negative N argument, with non-negative N the function returns x, i.e. does nothing.", "If rounding causes an overflow (for example, floor(-128, -1)), the result is undefined.", "Syntax", "floor(x[, N])", "Parameters", "x - The value to round. Float*, Decimal*, or (U)Int*.N . (U)Int*. The default is zero, which means rounding to an integer. Can be negative.", "Returned value", "A rounded number of the same type as x."], "Examples": ["SELECT floor(123.45, 1) AS rounded", "SELECT floor(123.45, -1)"], "Category": ["Rounding Functions"], "index": 1020, "vector_txt": "1020:Feature: floor(x[, N])\nDescription: floorReturns the largest rounded number less than or equal x.\nA rounded number is a multiple of 1 / 10  N, or the nearest number of the appropriate data type if 1 / 10  N isn\u2019t exact.Integer arguments may be rounded with negative N argument, with non-negative N the function returns x, i.e. does nothing.If rounding causes an overflow (for example, floor(-128, -1)), the result is undefined.Syntaxfloor(x[, N])Parametersx - The value to round. Float*, Decimal*, or (U)Int*.N . (U)Int*. The default is zero, which means rounding to an integer. Can be negative.Returned valueA rounded number of the same type as x.\nExamples: SELECT floor(123.45, 1) AS roundedSELECT floor(123.45, -1)\nCategory: Rounding Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/rounding-functions"], "Title": ["ceiling"], "Feature": ["ceiling(x[, N])"], "Description": ["ceiling", "Like floor but returns the smallest rounded number greater than or equal x.", "Syntax", "ceiling(x[, N])", "Alias: ceil"], "Examples": ["ceiling(x[, N])"], "Category": ["Rounding Functions"], "index": 1021, "vector_txt": "1021:Feature: ceiling(x[, N])\nDescription: ceilingLike floor but returns the smallest rounded number greater than or equal x.Syntaxceiling(x[, N])Alias: ceil\nExamples: ceiling(x[, N])\nCategory: Rounding Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/rounding-functions"], "Title": ["truncate"], "Feature": ["truncate(x[, N])"], "Description": ["truncate", "Like floor but returns the rounded number with largest absolute value that has an absolute value less than or equal to x\u2018s.", "Syntax", "truncate(x[, N])", "Alias: trunc."], "Examples": ["SELECT truncate(123.499, 1) as res;"], "Category": ["Rounding Functions"], "index": 1022, "vector_txt": "1022:Feature: truncate(x[, N])\nDescription: truncateLike floor but returns the rounded number with largest absolute value that has an absolute value less than or equal to x\u2018s.Syntaxtruncate(x[, N])Alias: trunc.\nExamples: SELECT truncate(123.499, 1) as res;\nCategory: Rounding Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/rounding-functions"], "Title": ["round"], "Feature": ["round(x[, N])"], "Description": ["round", "Rounds a value to a specified number of decimal places.", "The function returns the nearest number of the specified order.\nIf the input value has equal distance to two neighboring numbers, the function uses banker\u2019s rounding for Float* inputs and rounds away from zero for the other number types (Decimal*.", "Syntax", "round(x[, N])", "Arguments", "x \u2014 A number to round. Float*, Decimal*, or (U)Int*.N \u2014 The number of decimal places to round to. Integer. Defaults to 0.If N > 0, the function rounds to the right of the decimal point.If N < 0, the function rounds to the left of the decimal point.If N = 0, the function rounds to the next integer.", "Returned value:", "A rounded number of the same type as x."], "Examples": ["SELECT number / 2 AS x, round(x) FROM system.numbers LIMIT 3;", "SELECT cast(number / 2 AS  Decimal(10,4)) AS x, round(x) FROM system.numbers LIMIT 3;", "SELECT cast(number / 2 AS  Decimal(10,4)) AS x, round(x) FROM system.numbers LIMIT 3 settings output_format_decimal_trailing_zeros=1;"], "Category": ["Rounding Functions"], "index": 1023, "vector_txt": "1023:Feature: round(x[, N])\nDescription: roundRounds a value to a specified number of decimal places.The function returns the nearest number of the specified order.\nIf the input value has equal distance to two neighboring numbers, the function uses banker\u2019s rounding for Float* inputs and rounds away from zero for the other number types (Decimal*.Syntaxround(x[, N])Argumentsx \u2014 A number to round. Float*, Decimal*, or (U)Int*.N \u2014 The number of decimal places to round to. Integer. Defaults to 0.If N > 0, the function rounds to the right of the decimal point.If N < 0, the function rounds to the left of the decimal point.If N = 0, the function rounds to the next integer.Returned value:A rounded number of the same type as x.\nExamples: SELECT number / 2 AS x, round(x) FROM system.numbers LIMIT 3;SELECT cast(number / 2 AS  Decimal(10,4)) AS x, round(x) FROM system.numbers LIMIT 3;SELECT cast(number / 2 AS  Decimal(10,4)) AS x, round(x) FROM system.numbers LIMIT 3 settings output_format_decimal_trailing_zeros=1;\nCategory: Rounding Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayEnumerateDense"], "Feature": ["arrayEnumerateDense(arr)"], "Description": ["arrayEnumerateDense", "Returns an array of the same size as the source array, indicating where each element first appears in the source array.", "Syntax", "arrayEnumerateDense(arr)"], "Examples": ["SELECT arrayEnumerateDense([10, 20, 10, 30])"], "Category": ["Arrays Functions"], "index": 1024, "vector_txt": "1024:Feature: arrayEnumerateDense(arr)\nDescription: arrayEnumerateDenseReturns an array of the same size as the source array, indicating where each element first appears in the source array.SyntaxarrayEnumerateDense(arr)\nExamples: SELECT arrayEnumerateDense([10, 20, 10, 30])\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/rounding-functions"], "Title": ["roundBankers"], "Feature": ["roundBankers(x [, N])"], "Description": ["roundBankers", "Rounds a number to a specified decimal position.", "If the rounding number is halfway between two numbers, the function uses banker\u2019s rounding.\nBanker's rounding is a method of rounding fractional numbers\nWhen the rounding number is halfway between two numbers, it's rounded to the nearest even digit at the specified decimal position.\nFor example: 3.5 rounds up to 4, 2.5 rounds down to 2.\nIt's the default rounding method for floating point numbers defined in IEEE 754.\nThe round function performs the same rounding for floating point numbers.\nThe roundBankers function also rounds integers the same way, for example, roundBankers(45, -1) = 40.", "In other cases, the function rounds numbers to the nearest integer.", "Using banker\u2019s rounding, you can reduce the effect that rounding numbers has on the results of summing or subtracting these numbers.", "For example, sum numbers 1.5, 2.5, 3.5, 4.5 with different rounding:", "No rounding: 1.5 + 2.5 + 3.5 + 4.5 = 12.Banker\u2019s rounding: 2 + 2 + 4 + 4 = 12.Rounding to the nearest integer: 2 + 3 + 4 + 5 = 14.", "Syntax", "roundBankers(x [, N])", "Arguments", "- `N > 0` \u2014 The function rounds the number to the given position right of the decimal point. Example: `roundBankers(3.55, 1) = 3.6`.- `N < 0` \u2014 The function rounds the number to the given position left of the decimal point. Example: `roundBankers(24.55, -1) = 20`.- `N = 0` \u2014 The function rounds the number to an integer. In this case the argument can be omitted. Example: `roundBankers(2.5) = 2`.", "x \u2014 A number to round. Float*, Decimal*, or (U)Int*.N \u2014 The number of decimal places to round to. Integer. Defaults to 0.If N > 0, the function rounds to the right of the decimal point.If N < 0, the function rounds to the left of the decimal point.If N = 0, the function rounds to the next integer.", "Returned value", "A value rounded by the banker\u2019s rounding method."], "Examples": [" SELECT number / 2 AS x, roundBankers(x, 0) AS b fROM system.numbers limit 10"], "Category": ["Rounding Functions"], "index": 1025, "vector_txt": "1025:Feature: roundBankers(x [, N])\nDescription: roundBankersRounds a number to a specified decimal position.If the rounding number is halfway between two numbers, the function uses banker\u2019s rounding.\nBanker's rounding is a method of rounding fractional numbers\nWhen the rounding number is halfway between two numbers, it's rounded to the nearest even digit at the specified decimal position.\nFor example: 3.5 rounds up to 4, 2.5 rounds down to 2.\nIt's the default rounding method for floating point numbers defined in IEEE 754.\nThe round function performs the same rounding for floating point numbers.\nThe roundBankers function also rounds integers the same way, for example, roundBankers(45, -1) = 40.In other cases, the function rounds numbers to the nearest integer.Using banker\u2019s rounding, you can reduce the effect that rounding numbers has on the results of summing or subtracting these numbers.For example, sum numbers 1.5, 2.5, 3.5, 4.5 with different rounding:No rounding: 1.5 + 2.5 + 3.5 + 4.5 = 12.Banker\u2019s rounding: 2 + 2 + 4 + 4 = 12.Rounding to the nearest integer: 2 + 3 + 4 + 5 = 14.SyntaxroundBankers(x [, N])Arguments- `N > 0` \u2014 The function rounds the number to the given position right of the decimal point. Example: `roundBankers(3.55, 1) = 3.6`.- `N < 0` \u2014 The function rounds the number to the given position left of the decimal point. Example: `roundBankers(24.55, -1) = 20`.- `N = 0` \u2014 The function rounds the number to an integer. In this case the argument can be omitted. Example: `roundBankers(2.5) = 2`.x \u2014 A number to round. Float*, Decimal*, or (U)Int*.N \u2014 The number of decimal places to round to. Integer. Defaults to 0.If N > 0, the function rounds to the right of the decimal point.If N < 0, the function rounds to the left of the decimal point.If N = 0, the function rounds to the next integer.Returned valueA value rounded by the banker\u2019s rounding method.\nExamples:  SELECT number / 2 AS x, roundBankers(x, 0) AS b fROM system.numbers limit 10\nCategory: Rounding Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/rounding-functions"], "Title": ["roundToExp2"], "Feature": ["roundToExp2(num)"], "Description": ["roundToExp2", "Accepts a number. If the number is less than one, it returns 0. Otherwise, it rounds the number down to the nearest (whole non-negative) degree of two.", "Syntax", "roundToExp2(num)", "Parameters", "num: A number to round. UInt/Float.", "Returned value", "0, for num <1\\lt 1<1. UInt8.num rounded down to the nearest (whole non-negative) degree of two. UInt/Float equivalent to the input type."], "Examples": ["SELECT *, roundToExp2(*) FROM system.numbers WHERE number IN (0, 2, 5, 10, 19, 50)"], "Category": ["Rounding Functions"], "index": 1026, "vector_txt": "1026:Feature: roundToExp2(num)\nDescription: roundToExp2Accepts a number. If the number is less than one, it returns 0. Otherwise, it rounds the number down to the nearest (whole non-negative) degree of two.SyntaxroundToExp2(num)Parametersnum: A number to round. UInt/Float.Returned value0, for num <1\\lt 1<1. UInt8.num rounded down to the nearest (whole non-negative) degree of two. UInt/Float equivalent to the input type.\nExamples: SELECT *, roundToExp2(*) FROM system.numbers WHERE number IN (0, 2, 5, 10, 19, 50)\nCategory: Rounding Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/rounding-functions"], "Title": ["roundDuration"], "Feature": ["roundDuration(num)"], "Description": ["roundDuration", "Accepts a number. If the number is less than one, it returns 0. Otherwise, it rounds the number down to numbers from the set of commonly used durations: 1, 10, 30, 60, 120, 180, 240, 300, 600, 1200, 1800, 3600, 7200, 18000, 36000.", "Syntax", "roundDuration(num)", "Parameters", "num: A number to round to one of the numbers in the set of common durations. UInt/Float.", "Returned value", "0, for num <1\\lt 1<1.Otherwise, one of: 1, 10, 30, 60, 120, 180, 240, 300, 600, 1200, 1800, 3600, 7200, 18000, 36000. UInt16."], "Examples": ["SELECT *, roundDuration(*) FROM system.numbers WHERE number IN (0, 9, 19, 47, 101, 149, 205, 271, 421, 789, 1423, 2345, 4567, 9876, 24680, 42573)"], "Category": ["Rounding Functions"], "index": 1027, "vector_txt": "1027:Feature: roundDuration(num)\nDescription: roundDurationAccepts a number. If the number is less than one, it returns 0. Otherwise, it rounds the number down to numbers from the set of commonly used durations: 1, 10, 30, 60, 120, 180, 240, 300, 600, 1200, 1800, 3600, 7200, 18000, 36000.SyntaxroundDuration(num)Parametersnum: A number to round to one of the numbers in the set of common durations. UInt/Float.Returned value0, for num <1\\lt 1<1.Otherwise, one of: 1, 10, 30, 60, 120, 180, 240, 300, 600, 1200, 1800, 3600, 7200, 18000, 36000. UInt16.\nExamples: SELECT *, roundDuration(*) FROM system.numbers WHERE number IN (0, 9, 19, 47, 101, 149, 205, 271, 421, 789, 1423, 2345, 4567, 9876, 24680, 42573)\nCategory: Rounding Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/rounding-functions"], "Title": ["roundAge"], "Feature": ["roundAge(num)"], "Description": ["roundAge", "Accepts a number within various commonly used ranges of human age and returns either a maximum or a minimum within that range.", "Syntax", "roundAge(num)", "Parameters", "age: A number representing an age in years. UInt/Float.", "Returned value", "Returns 0, for age<1age \\lt 1age<1.Returns 17, for 1\u2264age\u2264171 \\leq age \\leq 171\u2264age\u226417.Returns 18, for 18\u2264age\u22642418 \\leq age \\leq 2418\u2264age\u226424.Returns 25, for 25\u2264age\u22643425 \\leq age \\leq 3425\u2264age\u226434.Returns 35, for 35\u2264age\u22644435 \\leq age \\leq 4435\u2264age\u226444.Returns 45, for 45\u2264age\u22645445 \\leq age \\leq 5445\u2264age\u226454.Returns 55, for age\u226555age \\geq 55age\u226555.", "Type: UInt8."], "Examples": ["SELECT *, roundAge(*) FROM system.numbers WHERE number IN (0, 5, 20, 31, 37, 54, 72);"], "Category": ["Rounding Functions"], "index": 1028, "vector_txt": "1028:Feature: roundAge(num)\nDescription: roundAgeAccepts a number within various commonly used ranges of human age and returns either a maximum or a minimum within that range.SyntaxroundAge(num)Parametersage: A number representing an age in years. UInt/Float.Returned valueReturns 0, for age<1age \\lt 1age<1.Returns 17, for 1\u2264age\u2264171 \\leq age \\leq 171\u2264age\u226417.Returns 18, for 18\u2264age\u22642418 \\leq age \\leq 2418\u2264age\u226424.Returns 25, for 25\u2264age\u22643425 \\leq age \\leq 3425\u2264age\u226434.Returns 35, for 35\u2264age\u22644435 \\leq age \\leq 4435\u2264age\u226444.Returns 45, for 45\u2264age\u22645445 \\leq age \\leq 5445\u2264age\u226454.Returns 55, for age\u226555age \\geq 55age\u226555.Type: UInt8.\nExamples: SELECT *, roundAge(*) FROM system.numbers WHERE number IN (0, 5, 20, 31, 37, 54, 72);\nCategory: Rounding Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/rounding-functions"], "Title": ["roundDown"], "Feature": ["roundDown(num, arr)"], "Description": ["roundDown", "Accepts a number and rounds it down to an element in the specified array. If the value is less than the lowest bound, the lowest bound is returned.", "Syntax", "roundDown(num, arr)", "Parameters", "num: A number to round down. Numeric.arr: Array of elements to round age down to. Array of UInt/Float type.", "Returned value", "Number rounded down to an element in arr. If the value is less than the lowest bound, the lowest bound is returned. UInt/Float type deduced from the type of arr."], "Examples": ["SELECT *, roundDown(*, [3, 4, 5]) FROM system.numbers WHERE number IN (0, 1, 2, 3, 4, 5)"], "Category": ["Rounding Functions"], "index": 1029, "vector_txt": "1029:Feature: roundDown(num, arr)\nDescription: roundDownAccepts a number and rounds it down to an element in the specified array. If the value is less than the lowest bound, the lowest bound is returned.SyntaxroundDown(num, arr)Parametersnum: A number to round down. Numeric.arr: Array of elements to round age down to. Array of UInt/Float type.Returned valueNumber rounded down to an element in arr. If the value is less than the lowest bound, the lowest bound is returned. UInt/Float type deduced from the type of arr.\nExamples: SELECT *, roundDown(*, [3, 4, 5]) FROM system.numbers WHERE number IN (0, 1, 2, 3, 4, 5)\nCategory: Rounding Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["position"], "Feature": ["position(haystack, needle[, start_pos])"], "Description": ["position", "Returns the position (in bytes, starting at 1) of a substring needle in a string haystack.", "Syntax", "position(haystack, needle[, start_pos])", "Alias:", "position(needle IN haystack)", "Arguments", "haystack \u2014 String in which the search is performed. String.needle \u2014 Substring to be searched. String.start_pos \u2013 Position (1-based) in haystack at which the search starts. UInt. Optional.", "Returned value", "Starting position in bytes and counting from 1, if the substring was found. UInt64.0, if the substring was not found. UInt64.", "If substring needle is empty, these rules apply:", "if no start_pos was specified: return 1if start_pos = 0: return 1if start_pos >= 1 and start_pos <= length(haystack) + 1: return start_posotherwise: return 0", "The same rules also apply to functions locate, positionCaseInsensitive, positionUTF8 and positionCaseInsensitiveUTF8."], "Examples": ["SELECT position('Hello, world!', '!');", "SELECT    position('Hello, world!', 'o', 1),    position('Hello, world!', 'o', 7)", "SELECT 6 = position('/' IN s) FROM (SELECT 'Hello/World' AS s);", "SELECT    position('abc', ''),    position('abc', '', 0),    position('abc', '', 1),    position('abc', '', 2),    position('abc', '', 3),    position('abc', '', 4),    position('abc', '', 5)"], "Category": ["Searching in Strings Functions"], "index": 1030, "vector_txt": "1030:Feature: position(haystack, needle[, start_pos])\nDescription: positionReturns the position (in bytes, starting at 1) of a substring needle in a string haystack.Syntaxposition(haystack, needle[, start_pos])Alias:position(needle IN haystack)Argumentshaystack \u2014 String in which the search is performed. String.needle \u2014 Substring to be searched. String.start_pos \u2013 Position (1-based) in haystack at which the search starts. UInt. Optional.Returned valueStarting position in bytes and counting from 1, if the substring was found. UInt64.0, if the substring was not found. UInt64.If substring needle is empty, these rules apply:if no start_pos was specified: return 1if start_pos = 0: return 1if start_pos >= 1 and start_pos <= length(haystack) + 1: return start_posotherwise: return 0The same rules also apply to functions locate, positionCaseInsensitive, positionUTF8 and positionCaseInsensitiveUTF8.\nExamples: SELECT position('Hello, world!', '!');SELECT    position('Hello, world!', 'o', 1),    position('Hello, world!', 'o', 7)SELECT 6 = position('/' IN s) FROM (SELECT 'Hello/World' AS s);SELECT    position('abc', ''),    position('abc', '', 0),    position('abc', '', 1),    position('abc', '', 2),    position('abc', '', 3),    position('abc', '', 4),    position('abc', '', 5)\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["locate"], "Feature": ["locate(needle, haystack[, start_pos])"], "Description": ["locate", "Like position but with arguments haystack and locate switched.", "The behavior of this function depends on the ClickHouse version:", "in versions < v24.3, locate was an alias of function position and accepted arguments (haystack, needle[, start_pos]).in versions >= 24.3,, locate is an individual function (for better compatibility with MySQL) and accepts arguments (needle, haystack[, start_pos]). The previous behavior\ncan be restored using setting function_locate_has_mysql_compatible_argument_order = false;", "Syntax", "locate(needle, haystack[, start_pos])"], "Examples": ["locate(needle, haystack[, start_pos])"], "Category": ["Searching in Strings Functions"], "index": 1031, "vector_txt": "1031:Feature: locate(needle, haystack[, start_pos])\nDescription: locateLike position but with arguments haystack and locate switched.The behavior of this function depends on the ClickHouse version:in versions < v24.3, locate was an alias of function position and accepted arguments (haystack, needle[, start_pos]).in versions >= 24.3,, locate is an individual function (for better compatibility with MySQL) and accepts arguments (needle, haystack[, start_pos]). The previous behavior\ncan be restored using setting function_locate_has_mysql_compatible_argument_order = false;Syntaxlocate(needle, haystack[, start_pos])\nExamples: locate(needle, haystack[, start_pos])\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["positionCaseInsensitive"], "Feature": ["positionCaseInsensitive"], "Description": ["positionCaseInsensitive", "A case insensitive invariant of position."], "Examples": ["SELECT positionCaseInsensitive('Hello, world!', 'hello');"], "Category": ["Searching in Strings Functions"], "index": 1032, "vector_txt": "1032:Feature: positionCaseInsensitive\nDescription: positionCaseInsensitiveA case insensitive invariant of position.\nExamples: SELECT positionCaseInsensitive('Hello, world!', 'hello');\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["positionUTF8"], "Feature": ["positionUTF8"], "Description": ["positionUTF8", "Like position but assumes haystack and needle are UTF-8 encoded strings."], "Examples": ["SELECT positionUTF8('Mot\u00f6rhead', 'r');"], "Category": ["Searching in Strings Functions"], "index": 1033, "vector_txt": "1033:Feature: positionUTF8\nDescription: positionUTF8Like position but assumes haystack and needle are UTF-8 encoded strings.\nExamples: SELECT positionUTF8('Mot\u00f6rhead', 'r');\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["positionCaseInsensitiveUTF8"], "Feature": ["positionCaseInsensitiveUTF8"], "Description": ["positionCaseInsensitiveUTF8", "Like positionUTF8 but searches case-insensitively."], "Examples": [], "Category": ["Searching in Strings Functions"], "index": 1034, "vector_txt": "1034:Feature: positionCaseInsensitiveUTF8\nDescription: positionCaseInsensitiveUTF8Like positionUTF8 but searches case-insensitively.\nExamples: \nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayEnumerateDenseRanked"], "Feature": ["arrayEnumerateDenseRanked(clear_depth, arr, max_array_depth)"], "Description": ["arrayEnumerateDenseRanked", "Returns an array the same size as the source array, indicating where each element first appears in the source array. It allows for enumeration of a multidimensional array with the ability to specify how deep to look inside the array.", "Syntax", "arrayEnumerateDenseRanked(clear_depth, arr, max_array_depth)", "Parameters", "clear_depth: Enumerate elements at the specified level separately. Positive Integer less than or equal to max_arr_depth.arr: N-dimensional array to enumerate. Array.max_array_depth: The maximum effective depth. Positive Integer less than or equal to the depth of arr."], "Examples": ["SELECT arrayEnumerateDenseRanked(1,[10, 20, 10, 30],1);", "SELECT arrayEnumerateDenseRanked(1,[[10,10,30,20],[40,50,10,30]],2);", "SELECT arrayEnumerateDenseRanked(2,[[10,10,30,20],[40,50,10,30]],2);"], "Category": ["Arrays Functions"], "index": 1035, "vector_txt": "1035:Feature: arrayEnumerateDenseRanked(clear_depth, arr, max_array_depth)\nDescription: arrayEnumerateDenseRankedReturns an array the same size as the source array, indicating where each element first appears in the source array. It allows for enumeration of a multidimensional array with the ability to specify how deep to look inside the array.SyntaxarrayEnumerateDenseRanked(clear_depth, arr, max_array_depth)Parametersclear_depth: Enumerate elements at the specified level separately. Positive Integer less than or equal to max_arr_depth.arr: N-dimensional array to enumerate. Array.max_array_depth: The maximum effective depth. Positive Integer less than or equal to the depth of arr.\nExamples: SELECT arrayEnumerateDenseRanked(1,[10, 20, 10, 30],1);SELECT arrayEnumerateDenseRanked(1,[[10,10,30,20],[40,50,10,30]],2);SELECT arrayEnumerateDenseRanked(2,[[10,10,30,20],[40,50,10,30]],2);\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["multiSearchAllPositions"], "Feature": ["multiSearchAllPositions(haystack, [needle1, needle2, ..., needleN])"], "Description": ["multiSearchAllPositions", "Like position but returns an array of positions (in bytes, starting at 1) for multiple needle substrings in a haystack string.", "NoteAll multiSearch*() functions only support up to 28 needles.", "Syntax", "multiSearchAllPositions(haystack, [needle1, needle2, ..., needleN])", "Arguments", "haystack \u2014 String in which the search is performed. String.needle \u2014 Substrings to be searched. Array.", "Returned value", "Array of the starting position in bytes and counting from 1, if the substring was found.0, if the substring was not found."], "Examples": ["SELECT multiSearchAllPositions('Hello, World!', ['hello', '!', 'world']);"], "Category": ["Searching in Strings Functions"], "index": 1036, "vector_txt": "1036:Feature: multiSearchAllPositions(haystack, [needle1, needle2, ..., needleN])\nDescription: multiSearchAllPositionsLike position but returns an array of positions (in bytes, starting at 1) for multiple needle substrings in a haystack string.NoteAll multiSearch*() functions only support up to 28 needles.SyntaxmultiSearchAllPositions(haystack, [needle1, needle2, ..., needleN])Argumentshaystack \u2014 String in which the search is performed. String.needle \u2014 Substrings to be searched. Array.Returned valueArray of the starting position in bytes and counting from 1, if the substring was found.0, if the substring was not found.\nExamples: SELECT multiSearchAllPositions('Hello, World!', ['hello', '!', 'world']);\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["multiSearchAllPositionsCaseInsensitive"], "Feature": ["multiSearchAllPositionsCaseInsensitive(haystack, [needle1, needle2, ..., needleN])"], "Description": ["multiSearchAllPositionsCaseInsensitive", "Like multiSearchAllPositions but ignores case.", "Syntax", "multiSearchAllPositionsCaseInsensitive(haystack, [needle1, needle2, ..., needleN])", "Parameters", "haystack \u2014 String in which the search is performed. String.needle \u2014 Substrings to be searched. Array.", "Returned value", "Array of the starting position in bytes and counting from 1 (if the substring was found).0 if the substring was not found."], "Examples": ["SELECT multiSearchAllPositionsCaseInsensitive('ClickHouse',['c','h']);"], "Category": ["Searching in Strings Functions"], "index": 1037, "vector_txt": "1037:Feature: multiSearchAllPositionsCaseInsensitive(haystack, [needle1, needle2, ..., needleN])\nDescription: multiSearchAllPositionsCaseInsensitiveLike multiSearchAllPositions but ignores case.SyntaxmultiSearchAllPositionsCaseInsensitive(haystack, [needle1, needle2, ..., needleN])Parametershaystack \u2014 String in which the search is performed. String.needle \u2014 Substrings to be searched. Array.Returned valueArray of the starting position in bytes and counting from 1 (if the substring was found).0 if the substring was not found.\nExamples: SELECT multiSearchAllPositionsCaseInsensitive('ClickHouse',['c','h']);\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["multiSearchAllPositionsUTF8"], "Feature": ["multiSearchAllPositionsUTF8(haystack, [needle1, needle2, ..., needleN])"], "Description": ["multiSearchAllPositionsUTF8", "Like multiSearchAllPositions but assumes haystack and the needle substrings are UTF-8 encoded strings.", "Syntax", "multiSearchAllPositionsUTF8(haystack, [needle1, needle2, ..., needleN])", "Parameters", "haystack \u2014 UTF-8 encoded string in which the search is performed. String.needle \u2014 UTF-8 encoded substrings to be searched. Array.", "Returned value", "Array of the starting position in bytes and counting from 1 (if the substring was found).0 if the substring was not found."], "Examples": ["SELECT multiSearchAllPositionsUTF8('\\x43\\x6c\\x69\\x63\\x6b\\x48\\x6f\\x75\\x73\\x65',['\\x43','\\x48']);"], "Category": ["Searching in Strings Functions"], "index": 1038, "vector_txt": "1038:Feature: multiSearchAllPositionsUTF8(haystack, [needle1, needle2, ..., needleN])\nDescription: multiSearchAllPositionsUTF8Like multiSearchAllPositions but assumes haystack and the needle substrings are UTF-8 encoded strings.SyntaxmultiSearchAllPositionsUTF8(haystack, [needle1, needle2, ..., needleN])Parametershaystack \u2014 UTF-8 encoded string in which the search is performed. String.needle \u2014 UTF-8 encoded substrings to be searched. Array.Returned valueArray of the starting position in bytes and counting from 1 (if the substring was found).0 if the substring was not found.\nExamples: SELECT multiSearchAllPositionsUTF8('\\x43\\x6c\\x69\\x63\\x6b\\x48\\x6f\\x75\\x73\\x65',['\\x43','\\x48']);\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["multiSearchAllPositionsCaseInsensitiveUTF8"], "Feature": ["multiSearchAllPositionsCaseInsensitiveUTF8(haystack, [needle1, needle2, ..., needleN])"], "Description": ["multiSearchAllPositionsCaseInsensitiveUTF8", "Like multiSearchAllPositionsUTF8 but ignores case.", "Syntax", "multiSearchAllPositionsCaseInsensitiveUTF8(haystack, [needle1, needle2, ..., needleN])", "Parameters", "haystack \u2014 UTF-8 encoded string in which the search is performed. String.needle \u2014 UTF-8 encoded substrings to be searched. Array.", "Returned value", "Array of the starting position in bytes and counting from 1 (if the substring was found).0 if the substring was not found."], "Examples": ["SELECT multiSearchAllPositionsCaseInsensitiveUTF8('\\x43\\x6c\\x69\\x63\\x6b\\x48\\x6f\\x75\\x73\\x65',['\\x63','\\x68']);"], "Category": ["Searching in Strings Functions"], "index": 1039, "vector_txt": "1039:Feature: multiSearchAllPositionsCaseInsensitiveUTF8(haystack, [needle1, needle2, ..., needleN])\nDescription: multiSearchAllPositionsCaseInsensitiveUTF8Like multiSearchAllPositionsUTF8 but ignores case.SyntaxmultiSearchAllPositionsCaseInsensitiveUTF8(haystack, [needle1, needle2, ..., needleN])Parametershaystack \u2014 UTF-8 encoded string in which the search is performed. String.needle \u2014 UTF-8 encoded substrings to be searched. Array.Returned valueArray of the starting position in bytes and counting from 1 (if the substring was found).0 if the substring was not found.\nExamples: SELECT multiSearchAllPositionsCaseInsensitiveUTF8('\\x43\\x6c\\x69\\x63\\x6b\\x48\\x6f\\x75\\x73\\x65',['\\x63','\\x68']);\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["multiSearchFirstPosition"], "Feature": ["multiSearchFirstPosition(haystack, [needle1, needle2, ..., needleN])"], "Description": ["multiSearchFirstPosition", "Like position but returns the leftmost offset in a haystack string which matches any of multiple needle strings.", "Functions multiSearchFirstPositionCaseInsensitive, multiSearchFirstPositionUTF8 and multiSearchFirstPositionCaseInsensitiveUTF8 provide case-insensitive and/or UTF-8 variants of this function.", "Syntax", "multiSearchFirstPosition(haystack, [needle1, needle2, ..., needleN])", "Parameters", "haystack \u2014 String in which the search is performed. String.needle \u2014  Substrings to be searched. Array.", "Returned value", "Leftmost offset in a haystack string which matches any of multiple needle strings.0, if there was no match."], "Examples": ["SELECT multiSearchFirstPosition('Hello World',['llo', 'Wor', 'ld']);"], "Category": ["Searching in Strings Functions"], "index": 1040, "vector_txt": "1040:Feature: multiSearchFirstPosition(haystack, [needle1, needle2, ..., needleN])\nDescription: multiSearchFirstPositionLike position but returns the leftmost offset in a haystack string which matches any of multiple needle strings.Functions multiSearchFirstPositionCaseInsensitive, multiSearchFirstPositionUTF8 and multiSearchFirstPositionCaseInsensitiveUTF8 provide case-insensitive and/or UTF-8 variants of this function.SyntaxmultiSearchFirstPosition(haystack, [needle1, needle2, ..., needleN])Parametershaystack \u2014 String in which the search is performed. String.needle \u2014  Substrings to be searched. Array.Returned valueLeftmost offset in a haystack string which matches any of multiple needle strings.0, if there was no match.\nExamples: SELECT multiSearchFirstPosition('Hello World',['llo', 'Wor', 'ld']);\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["multiSearchFirstPositionCaseInsensitive"], "Feature": ["multiSearchFirstPositionCaseInsensitive(haystack, [needle1, needle2, ..., needleN])"], "Description": ["multiSearchFirstPositionCaseInsensitive", "Like multiSearchFirstPosition but ignores case.", "Syntax", "multiSearchFirstPositionCaseInsensitive(haystack, [needle1, needle2, ..., needleN])", "Parameters", "haystack \u2014 String in which the search is performed. String.needle \u2014 Array of substrings to be searched. Array.", "Returned value", "Leftmost offset in a haystack string which matches any of multiple needle strings.0, if there was no match."], "Examples": ["SELECT multiSearchFirstPositionCaseInsensitive('HELLO WORLD',['wor', 'ld', 'ello']);"], "Category": ["Searching in Strings Functions"], "index": 1041, "vector_txt": "1041:Feature: multiSearchFirstPositionCaseInsensitive(haystack, [needle1, needle2, ..., needleN])\nDescription: multiSearchFirstPositionCaseInsensitiveLike multiSearchFirstPosition but ignores case.SyntaxmultiSearchFirstPositionCaseInsensitive(haystack, [needle1, needle2, ..., needleN])Parametershaystack \u2014 String in which the search is performed. String.needle \u2014 Array of substrings to be searched. Array.Returned valueLeftmost offset in a haystack string which matches any of multiple needle strings.0, if there was no match.\nExamples: SELECT multiSearchFirstPositionCaseInsensitive('HELLO WORLD',['wor', 'ld', 'ello']);\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["multiSearchFirstPositionUTF8"], "Feature": ["multiSearchFirstPositionUTF8(haystack, [needle1, needle2, ..., needleN])"], "Description": ["multiSearchFirstPositionUTF8", "Like multiSearchFirstPosition but assumes haystack and needle to be UTF-8 strings.", "Syntax", "multiSearchFirstPositionUTF8(haystack, [needle1, needle2, ..., needleN])", "Parameters", "haystack \u2014 UTF-8 string in which the search is performed. String.needle \u2014 Array of UTF-8 substrings to be searched. Array.", "Returned value", "Leftmost offset in a haystack string which matches any of multiple needle strings.0, if there was no match."], "Examples": ["SELECT multiSearchFirstPositionUTF8('\\x68\\x65\\x6c\\x6c\\x6f\\x20\\x77\\x6f\\x72\\x6c\\x64',['wor', 'ld', 'ello']);"], "Category": ["Searching in Strings Functions"], "index": 1042, "vector_txt": "1042:Feature: multiSearchFirstPositionUTF8(haystack, [needle1, needle2, ..., needleN])\nDescription: multiSearchFirstPositionUTF8Like multiSearchFirstPosition but assumes haystack and needle to be UTF-8 strings.SyntaxmultiSearchFirstPositionUTF8(haystack, [needle1, needle2, ..., needleN])Parametershaystack \u2014 UTF-8 string in which the search is performed. String.needle \u2014 Array of UTF-8 substrings to be searched. Array.Returned valueLeftmost offset in a haystack string which matches any of multiple needle strings.0, if there was no match.\nExamples: SELECT multiSearchFirstPositionUTF8('\\x68\\x65\\x6c\\x6c\\x6f\\x20\\x77\\x6f\\x72\\x6c\\x64',['wor', 'ld', 'ello']);\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["multiSearchFirstPositionCaseInsensitiveUTF8"], "Feature": ["multiSearchFirstPositionCaseInsensitiveUTF8(haystack, [needle1, needle2, ..., needleN])"], "Description": ["multiSearchFirstPositionCaseInsensitiveUTF8", "Like multiSearchFirstPosition but assumes haystack and needle to be UTF-8 strings and ignores case.", "Syntax", "multiSearchFirstPositionCaseInsensitiveUTF8(haystack, [needle1, needle2, ..., needleN])", "Parameters", "haystack \u2014 UTF-8 string in which the search is performed. String.needle \u2014 Array of UTF-8 substrings to be searched. Array", "Returned value", "Leftmost offset in a haystack string which matches any of multiple needle strings, ignoring case.0, if there was no match."], "Examples": ["SELECT multiSearchFirstPositionCaseInsensitiveUTF8('\\x48\\x45\\x4c\\x4c\\x4f\\x20\\x57\\x4f\\x52\\x4c\\x44',['wor', 'ld', 'ello']);"], "Category": ["Searching in Strings Functions"], "index": 1043, "vector_txt": "1043:Feature: multiSearchFirstPositionCaseInsensitiveUTF8(haystack, [needle1, needle2, ..., needleN])\nDescription: multiSearchFirstPositionCaseInsensitiveUTF8Like multiSearchFirstPosition but assumes haystack and needle to be UTF-8 strings and ignores case.SyntaxmultiSearchFirstPositionCaseInsensitiveUTF8(haystack, [needle1, needle2, ..., needleN])Parametershaystack \u2014 UTF-8 string in which the search is performed. String.needle \u2014 Array of UTF-8 substrings to be searched. ArrayReturned valueLeftmost offset in a haystack string which matches any of multiple needle strings, ignoring case.0, if there was no match.\nExamples: SELECT multiSearchFirstPositionCaseInsensitiveUTF8('\\x48\\x45\\x4c\\x4c\\x4f\\x20\\x57\\x4f\\x52\\x4c\\x44',['wor', 'ld', 'ello']);\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["multiSearchFirstIndex"], "Feature": ["multiSearchFirstIndex(haystack, [needle1, needle2, ..., needleN])"], "Description": ["multiSearchFirstIndex", "Returns the index i (starting from 1) of the leftmost found needlei in the string haystack and 0 otherwise.", "Functions multiSearchFirstIndexCaseInsensitive, multiSearchFirstIndexUTF8 and multiSearchFirstIndexCaseInsensitiveUTF8 provide case-insensitive and/or UTF-8 variants of this function.", "Syntax", "multiSearchFirstIndex(haystack, [needle1, needle2, ..., needleN])", "Parameters", "haystack \u2014 String in which the search is performed. String.needle \u2014 Substrings to be searched. Array.", "Returned value", "index (starting from 1) of the leftmost found needle. Otherwise 0, if there was no match. UInt8."], "Examples": ["SELECT multiSearchFirstIndex('Hello World',['World','Hello']);"], "Category": ["Searching in Strings Functions"], "index": 1044, "vector_txt": "1044:Feature: multiSearchFirstIndex(haystack, [needle1, needle2, ..., needleN])\nDescription: multiSearchFirstIndexReturns the index i (starting from 1) of the leftmost found needlei in the string haystack and 0 otherwise.Functions multiSearchFirstIndexCaseInsensitive, multiSearchFirstIndexUTF8 and multiSearchFirstIndexCaseInsensitiveUTF8 provide case-insensitive and/or UTF-8 variants of this function.SyntaxmultiSearchFirstIndex(haystack, [needle1, needle2, ..., needleN])Parametershaystack \u2014 String in which the search is performed. String.needle \u2014 Substrings to be searched. Array.Returned valueindex (starting from 1) of the leftmost found needle. Otherwise 0, if there was no match. UInt8.\nExamples: SELECT multiSearchFirstIndex('Hello World',['World','Hello']);\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["multiSearchFirstIndexCaseInsensitive"], "Feature": ["multiSearchFirstIndexCaseInsensitive(haystack, [needle1, needle2, ..., needleN])"], "Description": ["multiSearchFirstIndexCaseInsensitive", "Returns the index i (starting from 1) of the leftmost found needlei in the string haystack and 0 otherwise. Ignores case.", "Syntax", "multiSearchFirstIndexCaseInsensitive(haystack, [needle1, needle2, ..., needleN])", "Parameters", "haystack \u2014 String in which the search is performed. String.needle \u2014 Substrings to be searched. Array.", "Returned value", "index (starting from 1) of the leftmost found needle. Otherwise 0, if there was no match. UInt8."], "Examples": ["SELECT multiSearchFirstIndexCaseInsensitive('hElLo WoRlD',['World','Hello']);"], "Category": ["Searching in Strings Functions"], "index": 1045, "vector_txt": "1045:Feature: multiSearchFirstIndexCaseInsensitive(haystack, [needle1, needle2, ..., needleN])\nDescription: multiSearchFirstIndexCaseInsensitiveReturns the index i (starting from 1) of the leftmost found needlei in the string haystack and 0 otherwise. Ignores case.SyntaxmultiSearchFirstIndexCaseInsensitive(haystack, [needle1, needle2, ..., needleN])Parametershaystack \u2014 String in which the search is performed. String.needle \u2014 Substrings to be searched. Array.Returned valueindex (starting from 1) of the leftmost found needle. Otherwise 0, if there was no match. UInt8.\nExamples: SELECT multiSearchFirstIndexCaseInsensitive('hElLo WoRlD',['World','Hello']);\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayUnion(arr)"], "Feature": ["arrayUnion(arr)"], "Description": ["arrayUnion(arr)", "Takes multiple arrays, returns an array that contains all elements that are present in any of the source arrays."], "Examples": ["SELECT    arrayUnion([-2, 1], [10, 1], [-2], []) as num_example,    arrayUnion(['hi'], [], ['hello', 'hi']) as str_example,    arrayUnion([1, 3, NULL], [2, 3, NULL]) as null_example"], "Category": ["Arrays Functions"], "index": 1046, "vector_txt": "1046:Feature: arrayUnion(arr)\nDescription: arrayUnion(arr)Takes multiple arrays, returns an array that contains all elements that are present in any of the source arrays.\nExamples: SELECT    arrayUnion([-2, 1], [10, 1], [-2], []) as num_example,    arrayUnion(['hi'], [], ['hello', 'hi']) as str_example,    arrayUnion([1, 3, NULL], [2, 3, NULL]) as null_example\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["multiSearchFirstIndexUTF8"], "Feature": ["multiSearchFirstIndexUTF8(haystack, [needle1, needle2, ..., needleN])"], "Description": ["multiSearchFirstIndexUTF8", "Returns the index i (starting from 1) of the leftmost found needlei in the string haystack and 0 otherwise. Assumes haystack and needle are UTF-8 encoded strings.", "Syntax", "multiSearchFirstIndexUTF8(haystack, [needle1, needle2, ..., needleN])", "Parameters", "haystack \u2014 UTF-8 string in which the search is performed. String.needle \u2014 Array of UTF-8 substrings to be searched. Array", "Returned value", "index (starting from 1) of the leftmost found needle, Otherwise 0, if there was no match. UInt8."], "Examples": ["SELECT multiSearchFirstIndexUTF8('\\x48\\x65\\x6c\\x6c\\x6f\\x20\\x57\\x6f\\x72\\x6c\\x64',['\\x57\\x6f\\x72\\x6c\\x64','\\x48\\x65\\x6c\\x6c\\x6f']);"], "Category": ["Searching in Strings Functions"], "index": 1047, "vector_txt": "1047:Feature: multiSearchFirstIndexUTF8(haystack, [needle1, needle2, ..., needleN])\nDescription: multiSearchFirstIndexUTF8Returns the index i (starting from 1) of the leftmost found needlei in the string haystack and 0 otherwise. Assumes haystack and needle are UTF-8 encoded strings.SyntaxmultiSearchFirstIndexUTF8(haystack, [needle1, needle2, ..., needleN])Parametershaystack \u2014 UTF-8 string in which the search is performed. String.needle \u2014 Array of UTF-8 substrings to be searched. ArrayReturned valueindex (starting from 1) of the leftmost found needle, Otherwise 0, if there was no match. UInt8.\nExamples: SELECT multiSearchFirstIndexUTF8('\\x48\\x65\\x6c\\x6c\\x6f\\x20\\x57\\x6f\\x72\\x6c\\x64',['\\x57\\x6f\\x72\\x6c\\x64','\\x48\\x65\\x6c\\x6c\\x6f']);\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["multiSearchFirstIndexCaseInsensitiveUTF8"], "Feature": ["multiSearchFirstIndexCaseInsensitiveUTF8(haystack, [needle1, needle2, ..., needleN])"], "Description": ["multiSearchFirstIndexCaseInsensitiveUTF8", "Returns the index i (starting from 1) of the leftmost found needlei in the string haystack and 0 otherwise. Assumes haystack and needle are UTF-8 encoded strings. Ignores case.", "Syntax", "multiSearchFirstIndexCaseInsensitiveUTF8(haystack, [needle1, needle2, ..., needleN])", "Parameters", "haystack \u2014 UTF-8 string in which the search is performed. String.needle \u2014 Array of UTF-8 substrings to be searched. Array.", "Returned value", "index (starting from 1) of the leftmost found needle. Otherwise 0, if there was no match. UInt8."], "Examples": ["SELECT multiSearchFirstIndexCaseInsensitiveUTF8('\\x48\\x45\\x4c\\x4c\\x4f\\x20\\x57\\x4f\\x52\\x4c\\x44',['\\x68\\x65\\x6c\\x6c\\x6f','\\x77\\x6f\\x72\\x6c\\x64']);"], "Category": ["Searching in Strings Functions"], "index": 1048, "vector_txt": "1048:Feature: multiSearchFirstIndexCaseInsensitiveUTF8(haystack, [needle1, needle2, ..., needleN])\nDescription: multiSearchFirstIndexCaseInsensitiveUTF8Returns the index i (starting from 1) of the leftmost found needlei in the string haystack and 0 otherwise. Assumes haystack and needle are UTF-8 encoded strings. Ignores case.SyntaxmultiSearchFirstIndexCaseInsensitiveUTF8(haystack, [needle1, needle2, ..., needleN])Parametershaystack \u2014 UTF-8 string in which the search is performed. String.needle \u2014 Array of UTF-8 substrings to be searched. Array.Returned valueindex (starting from 1) of the leftmost found needle. Otherwise 0, if there was no match. UInt8.\nExamples: SELECT multiSearchFirstIndexCaseInsensitiveUTF8('\\x48\\x45\\x4c\\x4c\\x4f\\x20\\x57\\x4f\\x52\\x4c\\x44',['\\x68\\x65\\x6c\\x6c\\x6f','\\x77\\x6f\\x72\\x6c\\x64']);\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["multiSearchAny"], "Feature": ["multiSearchAny(haystack, [needle1, needle2, ..., needleN])"], "Description": ["multiSearchAny", "Returns 1, if at least one string needlei matches the string haystack and 0 otherwise.", "Functions multiSearchAnyCaseInsensitive, multiSearchAnyUTF8 and multiSearchAnyCaseInsensitiveUTF8 provide case-insensitive and/or UTF-8 variants of this function.", "Syntax", "multiSearchAny(haystack, [needle1, needle2, ..., needleN])", "Parameters", "haystack \u2014 String in which the search is performed. String.needle \u2014 Substrings to be searched. Array.", "Returned value", "1, if there was at least one match.0, if there was not at least one match."], "Examples": ["SELECT multiSearchAny('ClickHouse',['C','H']);"], "Category": ["Searching in Strings Functions"], "index": 1049, "vector_txt": "1049:Feature: multiSearchAny(haystack, [needle1, needle2, ..., needleN])\nDescription: multiSearchAnyReturns 1, if at least one string needlei matches the string haystack and 0 otherwise.Functions multiSearchAnyCaseInsensitive, multiSearchAnyUTF8 and multiSearchAnyCaseInsensitiveUTF8 provide case-insensitive and/or UTF-8 variants of this function.SyntaxmultiSearchAny(haystack, [needle1, needle2, ..., needleN])Parametershaystack \u2014 String in which the search is performed. String.needle \u2014 Substrings to be searched. Array.Returned value1, if there was at least one match.0, if there was not at least one match.\nExamples: SELECT multiSearchAny('ClickHouse',['C','H']);\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["multiSearchAnyCaseInsensitive"], "Feature": ["multiSearchAnyCaseInsensitive(haystack, [needle1, needle2, ..., needleN])"], "Description": ["multiSearchAnyCaseInsensitive", "Like multiSearchAny but ignores case.", "Syntax", "multiSearchAnyCaseInsensitive(haystack, [needle1, needle2, ..., needleN])", "Parameters", "haystack \u2014 String in which the search is performed. String.needle \u2014 Substrings to be searched. Array", "Returned value", "1, if there was at least one case-insensitive match.0, if there was not at least one case-insensitive match."], "Examples": ["SELECT multiSearchAnyCaseInsensitive('ClickHouse',['c','h']);"], "Category": ["Searching in Strings Functions"], "index": 1050, "vector_txt": "1050:Feature: multiSearchAnyCaseInsensitive(haystack, [needle1, needle2, ..., needleN])\nDescription: multiSearchAnyCaseInsensitiveLike multiSearchAny but ignores case.SyntaxmultiSearchAnyCaseInsensitive(haystack, [needle1, needle2, ..., needleN])Parametershaystack \u2014 String in which the search is performed. String.needle \u2014 Substrings to be searched. ArrayReturned value1, if there was at least one case-insensitive match.0, if there was not at least one case-insensitive match.\nExamples: SELECT multiSearchAnyCaseInsensitive('ClickHouse',['c','h']);\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["multiSearchAnyUTF8"], "Feature": ["multiSearchAnyUTF8(haystack, [needle1, needle2, ..., needleN])"], "Description": ["multiSearchAnyUTF8", "Like multiSearchAny but assumes haystack and the needle substrings are UTF-8 encoded strings.", "*Syntax**", "multiSearchAnyUTF8(haystack, [needle1, needle2, ..., needleN])", "Parameters", "haystack \u2014 UTF-8 string in which the search is performed. String.needle \u2014 UTF-8 substrings to be searched. Array.", "Returned value", "1, if there was at least one match.0, if there was not at least one match."], "Examples": ["SELECT multiSearchAnyUTF8('\\x43\\x6c\\x69\\x63\\x6b\\x48\\x6f\\x75\\x73\\x65',['\\x43','\\x48']);"], "Category": ["Searching in Strings Functions"], "index": 1051, "vector_txt": "1051:Feature: multiSearchAnyUTF8(haystack, [needle1, needle2, ..., needleN])\nDescription: multiSearchAnyUTF8Like multiSearchAny but assumes haystack and the needle substrings are UTF-8 encoded strings.*Syntax**multiSearchAnyUTF8(haystack, [needle1, needle2, ..., needleN])Parametershaystack \u2014 UTF-8 string in which the search is performed. String.needle \u2014 UTF-8 substrings to be searched. Array.Returned value1, if there was at least one match.0, if there was not at least one match.\nExamples: SELECT multiSearchAnyUTF8('\\x43\\x6c\\x69\\x63\\x6b\\x48\\x6f\\x75\\x73\\x65',['\\x43','\\x48']);\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["multiSearchAnyCaseInsensitiveUTF8"], "Feature": ["multiSearchAnyCaseInsensitiveUTF8(haystack, [needle1, needle2, ..., needleN])"], "Description": ["multiSearchAnyCaseInsensitiveUTF8", "Like multiSearchAnyUTF8 but ignores case.", "*Syntax**", "multiSearchAnyCaseInsensitiveUTF8(haystack, [needle1, needle2, ..., needleN])", "Parameters", "haystack \u2014 UTF-8 string in which the search is performed. String.needle \u2014 UTF-8 substrings to be searched. Array", "Returned value", "1, if there was at least one case-insensitive match.0, if there was not at least one case-insensitive match."], "Examples": ["SELECT multiSearchAnyCaseInsensitiveUTF8('\\x43\\x6c\\x69\\x63\\x6b\\x48\\x6f\\x75\\x73\\x65',['\\x68']);"], "Category": ["Searching in Strings Functions"], "index": 1052, "vector_txt": "1052:Feature: multiSearchAnyCaseInsensitiveUTF8(haystack, [needle1, needle2, ..., needleN])\nDescription: multiSearchAnyCaseInsensitiveUTF8Like multiSearchAnyUTF8 but ignores case.*Syntax**multiSearchAnyCaseInsensitiveUTF8(haystack, [needle1, needle2, ..., needleN])Parametershaystack \u2014 UTF-8 string in which the search is performed. String.needle \u2014 UTF-8 substrings to be searched. ArrayReturned value1, if there was at least one case-insensitive match.0, if there was not at least one case-insensitive match.\nExamples: SELECT multiSearchAnyCaseInsensitiveUTF8('\\x43\\x6c\\x69\\x63\\x6b\\x48\\x6f\\x75\\x73\\x65',['\\x68']);\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["match"], "Feature": ["match(haystack, pattern)"], "Description": ["match", "Returns whether string haystack matches the regular expression pattern in re2 regular expression syntax.", "Matching is based on UTF-8, e.g. . matches the Unicode code point \u00a5 which is represented in UTF-8 using two bytes. The regular\nexpression must not contain null bytes. If the haystack or the pattern are not valid UTF-8, then the behavior is undefined.", "Unlike re2's default behavior, . matches line breaks. To disable this, prepend the pattern with (?-s).", "If you only want to search substrings in a string, you can use functions like or position instead - they work much faster than this function.", "Syntax", "match(haystack, pattern)", "Alias: haystack REGEXP pattern operator"], "Examples": ["match(haystack, pattern)"], "Category": ["Searching in Strings Functions"], "index": 1053, "vector_txt": "1053:Feature: match(haystack, pattern)\nDescription: matchReturns whether string haystack matches the regular expression pattern in re2 regular expression syntax.Matching is based on UTF-8, e.g. . matches the Unicode code point \u00a5 which is represented in UTF-8 using two bytes. The regular\nexpression must not contain null bytes. If the haystack or the pattern are not valid UTF-8, then the behavior is undefined.Unlike re2's default behavior, . matches line breaks. To disable this, prepend the pattern with (?-s).If you only want to search substrings in a string, you can use functions like or position instead - they work much faster than this function.Syntaxmatch(haystack, pattern)Alias: haystack REGEXP pattern operator\nExamples: match(haystack, pattern)\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["multiMatchAny"], "Feature": ["multiMatchAny(haystack, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])"], "Description": ["multiMatchAny", "Like match but returns 1 if at least one of the patterns match and 0 otherwise.", "NoteFunctions in the multi[Fuzzy]Match*() family use the the (Vectorscan)[https://github.com/VectorCamp/vectorscan] library. As such, they are only enabled if ClickHouse is compiled with support for vectorscan.To turn off all functions that use hyperscan, use setting SET allow_hyperscan = 0;.Due to restrictions of vectorscan, the length of the haystack string must be less than 232 bytes.Hyperscan is generally vulnerable to regular expression denial of service (ReDoS) attacks (e.g. see\n(here)[https://www.usenix.org/conference/usenixsecurity22/presentation/turonova], (here)[https://doi.org/10.1007/s10664-021-10033-1] and\n(here)[https://doi.org/10.1145/3236024.3236027]. Users are adviced to check the provided patterns carefully.", "If you only want to search multiple substrings in a string, you can use function multiSearchAny instead - it works much faster than this function.", "Syntax", "multiMatchAny(haystack, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])"], "Examples": ["multiMatchAny(haystack, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])"], "Category": ["Searching in Strings Functions"], "index": 1054, "vector_txt": "1054:Feature: multiMatchAny(haystack, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])\nDescription: multiMatchAnyLike match but returns 1 if at least one of the patterns match and 0 otherwise.NoteFunctions in the multi[Fuzzy]Match*() family use the the (Vectorscan)[https://github.com/VectorCamp/vectorscan] library. As such, they are only enabled if ClickHouse is compiled with support for vectorscan.To turn off all functions that use hyperscan, use setting SET allow_hyperscan = 0;.Due to restrictions of vectorscan, the length of the haystack string must be less than 232 bytes.Hyperscan is generally vulnerable to regular expression denial of service (ReDoS) attacks (e.g. see\n(here)[https://www.usenix.org/conference/usenixsecurity22/presentation/turonova], (here)[https://doi.org/10.1007/s10664-021-10033-1] and\n(here)[https://doi.org/10.1145/3236024.3236027]. Users are adviced to check the provided patterns carefully.If you only want to search multiple substrings in a string, you can use function multiSearchAny instead - it works much faster than this function.SyntaxmultiMatchAny(haystack, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])\nExamples: multiMatchAny(haystack, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["multiMatchAnyIndex"], "Feature": ["multiMatchAnyIndex(haystack, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])"], "Description": ["multiMatchAnyIndex", "Like multiMatchAny but returns any index that matches the haystack.", "Syntax", "multiMatchAnyIndex(haystack, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])"], "Examples": ["multiMatchAnyIndex(haystack, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])"], "Category": ["Searching in Strings Functions"], "index": 1055, "vector_txt": "1055:Feature: multiMatchAnyIndex(haystack, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])\nDescription: multiMatchAnyIndexLike multiMatchAny but returns any index that matches the haystack.SyntaxmultiMatchAnyIndex(haystack, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])\nExamples: multiMatchAnyIndex(haystack, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["multiMatchAllIndices"], "Feature": ["multiMatchAllIndices(haystack, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])"], "Description": ["multiMatchAllIndices", "Like multiMatchAny but returns the array of all indices that match the haystack in any order.", "Syntax", "multiMatchAllIndices(haystack, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])"], "Examples": ["multiMatchAllIndices(haystack, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])"], "Category": ["Searching in Strings Functions"], "index": 1056, "vector_txt": "1056:Feature: multiMatchAllIndices(haystack, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])\nDescription: multiMatchAllIndicesLike multiMatchAny but returns the array of all indices that match the haystack in any order.SyntaxmultiMatchAllIndices(haystack, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])\nExamples: multiMatchAllIndices(haystack, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayIntersect(arr)"], "Feature": ["arrayIntersect(arr)"], "Description": ["arrayIntersect(arr)", "Takes multiple arrays, returns an array with elements that are present in all source arrays."], "Examples": ["SELECT    arrayIntersect([1, 2], [1, 3], [2, 3]) AS no_intersect,    arrayIntersect([1, 2], [1, 3], [1, 4]) AS intersect"], "Category": ["Arrays Functions"], "index": 1057, "vector_txt": "1057:Feature: arrayIntersect(arr)\nDescription: arrayIntersect(arr)Takes multiple arrays, returns an array with elements that are present in all source arrays.\nExamples: SELECT    arrayIntersect([1, 2], [1, 3], [2, 3]) AS no_intersect,    arrayIntersect([1, 2], [1, 3], [1, 4]) AS intersect\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["multiFuzzyMatchAny"], "Feature": ["multiFuzzyMatchAny(haystack, distance, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])"], "Description": ["multiFuzzyMatchAny", "Like multiMatchAny but returns 1 if any pattern matches the haystack within a constant edit distance. This function relies on the experimental feature of hyperscan library, and can be slow for some corner cases. The performance depends on the edit distance value and patterns used, but it's always more expensive compared to a non-fuzzy variants.", "NotemultiFuzzyMatch*() function family do not support UTF-8 regular expressions (it threats them as a sequence of bytes) due to restrictions of hyperscan.", "Syntax", "multiFuzzyMatchAny(haystack, distance, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])"], "Examples": ["multiFuzzyMatchAny(haystack, distance, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])"], "Category": ["Searching in Strings Functions"], "index": 1058, "vector_txt": "1058:Feature: multiFuzzyMatchAny(haystack, distance, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])\nDescription: multiFuzzyMatchAnyLike multiMatchAny but returns 1 if any pattern matches the haystack within a constant edit distance. This function relies on the experimental feature of hyperscan library, and can be slow for some corner cases. The performance depends on the edit distance value and patterns used, but it's always more expensive compared to a non-fuzzy variants.NotemultiFuzzyMatch*() function family do not support UTF-8 regular expressions (it threats them as a sequence of bytes) due to restrictions of hyperscan.SyntaxmultiFuzzyMatchAny(haystack, distance, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])\nExamples: multiFuzzyMatchAny(haystack, distance, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["multiFuzzyMatchAnyIndex"], "Feature": ["multiFuzzyMatchAnyIndex(haystack, distance, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])"], "Description": ["multiFuzzyMatchAnyIndex", "Like multiFuzzyMatchAny but returns any index that matches the haystack within a constant edit distance.", "Syntax", "multiFuzzyMatchAnyIndex(haystack, distance, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])"], "Examples": ["multiFuzzyMatchAnyIndex(haystack, distance, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])"], "Category": ["Searching in Strings Functions"], "index": 1059, "vector_txt": "1059:Feature: multiFuzzyMatchAnyIndex(haystack, distance, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])\nDescription: multiFuzzyMatchAnyIndexLike multiFuzzyMatchAny but returns any index that matches the haystack within a constant edit distance.SyntaxmultiFuzzyMatchAnyIndex(haystack, distance, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])\nExamples: multiFuzzyMatchAnyIndex(haystack, distance, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["multiFuzzyMatchAllIndices"], "Feature": ["multiFuzzyMatchAllIndices(haystack, distance, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])"], "Description": ["multiFuzzyMatchAllIndices", "Like multiFuzzyMatchAny but returns the array of all indices in any order that match the haystack within a constant edit distance.", "Syntax", "multiFuzzyMatchAllIndices(haystack, distance, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])"], "Examples": ["multiFuzzyMatchAllIndices(haystack, distance, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])"], "Category": ["Searching in Strings Functions"], "index": 1060, "vector_txt": "1060:Feature: multiFuzzyMatchAllIndices(haystack, distance, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])\nDescription: multiFuzzyMatchAllIndicesLike multiFuzzyMatchAny but returns the array of all indices in any order that match the haystack within a constant edit distance.SyntaxmultiFuzzyMatchAllIndices(haystack, distance, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])\nExamples: multiFuzzyMatchAllIndices(haystack, distance, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["extract"], "Feature": ["extract(haystack, pattern)"], "Description": ["extract", "Returns the first match of a regular expression in a string.\nIf haystack does not match the pattern regex, an empty string is returned. ", "If the regular expression has capturing groups, the function matches the input string against the first capturing group.", "Syntax", "extract(haystack, pattern)", "*Arguments**", "haystack \u2014 Input string. String.pattern \u2014 Regular expression with re2 regular expression syntax.", "Returned value", "The first match of the regular expression in the haystack string. String."], "Examples": ["SELECT extract('number: 1, number: 2, number: 3', '\\\\d+') AS result;"], "Category": ["Searching in Strings Functions"], "index": 1061, "vector_txt": "1061:Feature: extract(haystack, pattern)\nDescription: extractReturns the first match of a regular expression in a string.\nIf haystack does not match the pattern regex, an empty string is returned. If the regular expression has capturing groups, the function matches the input string against the first capturing group.Syntaxextract(haystack, pattern)*Arguments**haystack \u2014 Input string. String.pattern \u2014 Regular expression with re2 regular expression syntax.Returned valueThe first match of the regular expression in the haystack string. String.\nExamples: SELECT extract('number: 1, number: 2, number: 3', '\\\\d+') AS result;\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["extractAll"], "Feature": ["extractAll(haystack, pattern)"], "Description": ["extractAll", "Returns an array of all matches of a regular expression in a string. If haystack does not match the pattern regex, an empty string is returned.", "The behavior with respect to sub-patterns is the same as in function extract.", "Syntax", "extractAll(haystack, pattern)", "*Arguments**", "haystack \u2014 Input string. String.pattern \u2014 Regular expression with re2 regular expression syntax.", "Returned value", "Array of matches of the regular expression in the haystack string. Array(String)."], "Examples": ["SELECT extractAll('number: 1, number: 2, number: 3', '\\\\d+') AS result;"], "Category": ["Searching in Strings Functions"], "index": 1062, "vector_txt": "1062:Feature: extractAll(haystack, pattern)\nDescription: extractAllReturns an array of all matches of a regular expression in a string. If haystack does not match the pattern regex, an empty string is returned.The behavior with respect to sub-patterns is the same as in function extract.SyntaxextractAll(haystack, pattern)*Arguments**haystack \u2014 Input string. String.pattern \u2014 Regular expression with re2 regular expression syntax.Returned valueArray of matches of the regular expression in the haystack string. Array(String).\nExamples: SELECT extractAll('number: 1, number: 2, number: 3', '\\\\d+') AS result;\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["extractAllGroupsHorizontal"], "Feature": ["extractAllGroupsHorizontal(haystack, pattern)"], "Description": ["extractAllGroupsHorizontal", "Matches all groups of the haystack string using the pattern regular expression. Returns an array of arrays, where the first array includes all fragments matching the first group, the second array - matching the second group, etc.", "This function is slower than extractAllGroupsVertical.", "Syntax", "extractAllGroupsHorizontal(haystack, pattern)", "Arguments", "haystack \u2014 Input string. String.pattern \u2014 Regular expression with re2 regular expression syntax. Must contain groups, each group enclosed in parentheses. If pattern contains no groups, an exception is thrown. String.", "Returned value", "Array of arrays of matches. Array.", "NoteIf haystack does not match the pattern regex, an array of empty arrays is returned."], "Examples": ["SELECT extractAllGroupsHorizontal('abc=111, def=222, ghi=333', '(\"[^\"]+\"|\\\\w+)=(\"[^\"]+\"|\\\\w+)');"], "Category": ["Searching in Strings Functions"], "index": 1063, "vector_txt": "1063:Feature: extractAllGroupsHorizontal(haystack, pattern)\nDescription: extractAllGroupsHorizontalMatches all groups of the haystack string using the pattern regular expression. Returns an array of arrays, where the first array includes all fragments matching the first group, the second array - matching the second group, etc.This function is slower than extractAllGroupsVertical.SyntaxextractAllGroupsHorizontal(haystack, pattern)Argumentshaystack \u2014 Input string. String.pattern \u2014 Regular expression with re2 regular expression syntax. Must contain groups, each group enclosed in parentheses. If pattern contains no groups, an exception is thrown. String.Returned valueArray of arrays of matches. Array.NoteIf haystack does not match the pattern regex, an array of empty arrays is returned.\nExamples: SELECT extractAllGroupsHorizontal('abc=111, def=222, ghi=333', '(\"[^\"]+\"|\\\\w+)=(\"[^\"]+\"|\\\\w+)');\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["extractGroups"], "Feature": ["extractGroups(haystack, pattern)"], "Description": ["extractGroups", "Match all groups of given input string with a given regular expression, returns an array of arrays of matches.", "Syntax", "extractGroups(haystack, pattern)", "Arguments", "haystack \u2014 Input string. String.pattern \u2014 Regular expression with re2 regular expression syntax. Must contain groups, each group enclosed in parentheses. If pattern contains no groups, an exception is thrown. String.", "Returned value", "Array of arrays of matches. Array."], "Examples": ["SELECT extractGroups('hello abc=111 world', '(\"[^\"]+\"|\\\\w+)=(\"[^\"]+\"|\\\\w+)') AS result;"], "Category": ["Searching in Strings Functions"], "index": 1064, "vector_txt": "1064:Feature: extractGroups(haystack, pattern)\nDescription: extractGroupsMatch all groups of given input string with a given regular expression, returns an array of arrays of matches.SyntaxextractGroups(haystack, pattern)Argumentshaystack \u2014 Input string. String.pattern \u2014 Regular expression with re2 regular expression syntax. Must contain groups, each group enclosed in parentheses. If pattern contains no groups, an exception is thrown. String.Returned valueArray of arrays of matches. Array.\nExamples: SELECT extractGroups('hello abc=111 world', '(\"[^\"]+\"|\\\\w+)=(\"[^\"]+\"|\\\\w+)') AS result;\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["extractAllGroupsVertical"], "Feature": ["extractAllGroupsVertical(haystack, pattern)"], "Description": ["extractAllGroupsVertical", "Matches all groups of the haystack string using the pattern regular expression. Returns an array of arrays, where each array includes matching fragments from every group. Fragments are grouped in order of appearance in the haystack.", "Syntax", "extractAllGroupsVertical(haystack, pattern)", "Arguments", "haystack \u2014 Input string. String.pattern \u2014 Regular expression with re2 regular expression syntax. Must contain groups, each group enclosed in parentheses. If pattern contains no groups, an exception is thrown. String.", "Returned value", "Array of arrays of matches. Array.", "NoteIf haystack does not match the pattern regex, an empty array is returned."], "Examples": ["SELECT extractAllGroupsVertical('abc=111, def=222, ghi=333', '(\"[^\"]+\"|\\\\w+)=(\"[^\"]+\"|\\\\w+)');"], "Category": ["Searching in Strings Functions"], "index": 1065, "vector_txt": "1065:Feature: extractAllGroupsVertical(haystack, pattern)\nDescription: extractAllGroupsVerticalMatches all groups of the haystack string using the pattern regular expression. Returns an array of arrays, where each array includes matching fragments from every group. Fragments are grouped in order of appearance in the haystack.SyntaxextractAllGroupsVertical(haystack, pattern)Argumentshaystack \u2014 Input string. String.pattern \u2014 Regular expression with re2 regular expression syntax. Must contain groups, each group enclosed in parentheses. If pattern contains no groups, an exception is thrown. String.Returned valueArray of arrays of matches. Array.NoteIf haystack does not match the pattern regex, an empty array is returned.\nExamples: SELECT extractAllGroupsVertical('abc=111, def=222, ghi=333', '(\"[^\"]+\"|\\\\w+)=(\"[^\"]+\"|\\\\w+)');\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["like"], "Feature": ["like(haystack, pattern)"], "Description": ["like", "Returns whether string haystack matches the LIKE expression pattern.", "A LIKE expression can contain normal characters and the following metasymbols:", "% indicates an arbitrary number of arbitrary characters (including zero characters)._ indicates a single arbitrary character.\\ is for escaping literals %, _ and \\.", "Matching is based on UTF-8, e.g. _ matches the Unicode code point \u00a5 which is represented in UTF-8 using two bytes.", "If the haystack or the LIKE expression are not valid UTF-8, the behavior is undefined.", "No automatic Unicode normalization is performed, you can use the normalizeUTF8*() functions for that.", "To match against literal %, _ and \\ (which are LIKE metacharacters), prepend them with a backslash: \\%, \\_ and \\\\.\nThe backslash loses its special meaning (i.e. is interpreted literally) if it prepends a character different than %, _ or \\.\nNote that ClickHouse requires backslashes in strings to be quoted as well, so you would actually need to write \\\\%, \\\\_ and \\\\\\\\.", "For LIKE expressions of the form %needle%, the function is as fast as the position function.\nAll other LIKE expressions are internally converted to a regular expression and executed with a performance similar to function match.", "Syntax", "like(haystack, pattern)", "Alias: haystack LIKE pattern (operator)"], "Examples": ["like(haystack, pattern)"], "Category": ["Searching in Strings Functions"], "index": 1066, "vector_txt": "1066:Feature: like(haystack, pattern)\nDescription: likeReturns whether string haystack matches the LIKE expression pattern.A LIKE expression can contain normal characters and the following metasymbols:% indicates an arbitrary number of arbitrary characters (including zero characters)._ indicates a single arbitrary character.\\ is for escaping literals %, _ and \\.Matching is based on UTF-8, e.g. _ matches the Unicode code point \u00a5 which is represented in UTF-8 using two bytes.If the haystack or the LIKE expression are not valid UTF-8, the behavior is undefined.No automatic Unicode normalization is performed, you can use the normalizeUTF8*() functions for that.To match against literal %, _ and \\ (which are LIKE metacharacters), prepend them with a backslash: \\%, \\_ and \\\\.\nThe backslash loses its special meaning (i.e. is interpreted literally) if it prepends a character different than %, _ or \\.\nNote that ClickHouse requires backslashes in strings to be quoted as well, so you would actually need to write \\\\%, \\\\_ and \\\\\\\\.For LIKE expressions of the form %needle%, the function is as fast as the position function.\nAll other LIKE expressions are internally converted to a regular expression and executed with a performance similar to function match.Syntaxlike(haystack, pattern)Alias: haystack LIKE pattern (operator)\nExamples: like(haystack, pattern)\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["notLike"], "Feature": ["notLike"], "Description": ["notLike", "Like like but negates the result.", "Alias: haystack NOT LIKE pattern (operator)"], "Examples": [], "Category": ["Searching in Strings Functions"], "index": 1067, "vector_txt": "1067:Feature: notLike\nDescription: notLikeLike like but negates the result.Alias: haystack NOT LIKE pattern (operator)\nExamples: \nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayJaccardIndex"], "Feature": ["arrayJaccardIndex"], "Description": ["arrayJaccardIndex", "Returns the Jaccard index of two arrays."], "Examples": ["SELECT arrayJaccardIndex([1, 2], [2, 3]) AS res"], "Category": ["Arrays Functions"], "index": 1068, "vector_txt": "1068:Feature: arrayJaccardIndex\nDescription: arrayJaccardIndexReturns the Jaccard index of two arrays.\nExamples: SELECT arrayJaccardIndex([1, 2], [2, 3]) AS res\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["ilike"], "Feature": ["ilike"], "Description": ["ilike", "Like like but searches case-insensitively.", "Alias: haystack ILIKE pattern (operator)"], "Examples": [], "Category": ["Searching in Strings Functions"], "index": 1069, "vector_txt": "1069:Feature: ilike\nDescription: ilikeLike like but searches case-insensitively.Alias: haystack ILIKE pattern (operator)\nExamples: \nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["notILike"], "Feature": ["notILike"], "Description": ["notILike", "Like ilike but negates the result.", "Alias: haystack NOT ILIKE pattern (operator)"], "Examples": [], "Category": ["Searching in Strings Functions"], "index": 1070, "vector_txt": "1070:Feature: notILike\nDescription: notILikeLike ilike but negates the result.Alias: haystack NOT ILIKE pattern (operator)\nExamples: \nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["ngramDistance"], "Feature": ["ngramDistance(haystack, needle)"], "Description": ["ngramDistance", "Calculates the 4-gram distance between a haystack string and a needle string. For this, it counts the symmetric difference between two multisets of 4-grams and normalizes it by the sum of their cardinalities. Returns a Float32 between 0 and 1. The smaller the result is, the more similar the strings are to each other.", "Functions ngramDistanceCaseInsensitive, ngramDistanceUTF8, ngramDistanceCaseInsensitiveUTF8 provide case-insensitive and/or UTF-8 variants of this function.", "Syntax", "ngramDistance(haystack, needle)", "Parameters", "haystack: First comparison string. String literalneedle: Second comparison string. String literal", "Returned value", "Value between 0 and 1 representing the similarity between the two strings. Float32", "Implementation details", "This function will throw an exception if constant needle or haystack arguments are more than 32Kb in size. If any non-constant haystack or needle arguments are more than 32Kb in size, then the distance is always 1."], "Examples": ["SELECT ngramDistance('ClickHouse','ClickHouse!');", "SELECT ngramDistance('ClickHouse','House');"], "Category": ["Searching in Strings Functions"], "index": 1071, "vector_txt": "1071:Feature: ngramDistance(haystack, needle)\nDescription: ngramDistanceCalculates the 4-gram distance between a haystack string and a needle string. For this, it counts the symmetric difference between two multisets of 4-grams and normalizes it by the sum of their cardinalities. Returns a Float32 between 0 and 1. The smaller the result is, the more similar the strings are to each other.Functions ngramDistanceCaseInsensitive, ngramDistanceUTF8, ngramDistanceCaseInsensitiveUTF8 provide case-insensitive and/or UTF-8 variants of this function.SyntaxngramDistance(haystack, needle)Parametershaystack: First comparison string. String literalneedle: Second comparison string. String literalReturned valueValue between 0 and 1 representing the similarity between the two strings. Float32Implementation detailsThis function will throw an exception if constant needle or haystack arguments are more than 32Kb in size. If any non-constant haystack or needle arguments are more than 32Kb in size, then the distance is always 1.\nExamples: SELECT ngramDistance('ClickHouse','ClickHouse!');SELECT ngramDistance('ClickHouse','House');\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["ngramDistanceCaseInsensitive"], "Feature": ["ngramDistanceCaseInsensitive(haystack, needle)"], "Description": ["ngramDistanceCaseInsensitive", "Provides a case-insensitive variant of ngramDistance.", "Syntax", "ngramDistanceCaseInsensitive(haystack, needle)", "Parameters", "haystack: First comparison string. String literalneedle: Second comparison string. String literal", "Returned value", "Value between 0 and 1 representing the similarity between the two strings. Float32"], "Examples": ["SELECT ngramDistance('ClickHouse','clickhouse');", "SELECT ngramDistanceCaseInsensitive('ClickHouse','clickhouse');"], "Category": ["Searching in Strings Functions"], "index": 1072, "vector_txt": "1072:Feature: ngramDistanceCaseInsensitive(haystack, needle)\nDescription: ngramDistanceCaseInsensitiveProvides a case-insensitive variant of ngramDistance.SyntaxngramDistanceCaseInsensitive(haystack, needle)Parametershaystack: First comparison string. String literalneedle: Second comparison string. String literalReturned valueValue between 0 and 1 representing the similarity between the two strings. Float32\nExamples: SELECT ngramDistance('ClickHouse','clickhouse');SELECT ngramDistanceCaseInsensitive('ClickHouse','clickhouse');\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["ngramDistanceUTF8"], "Feature": ["ngramDistanceUTF8(haystack, needle)"], "Description": ["ngramDistanceUTF8", "Provides a UTF-8 variant of ngramDistance. Assumes that needle and haystack strings are UTF-8 encoded strings.", "Syntax", "ngramDistanceUTF8(haystack, needle)", "Parameters", "haystack: First UTF-8 encoded comparison string. String literalneedle: Second UTF-8 encoded comparison string. String literal", "Returned value", "Value between 0 and 1 representing the similarity between the two strings. Float32"], "Examples": ["SELECT ngramDistanceUTF8('abcde','cde');"], "Category": ["Searching in Strings Functions"], "index": 1073, "vector_txt": "1073:Feature: ngramDistanceUTF8(haystack, needle)\nDescription: ngramDistanceUTF8Provides a UTF-8 variant of ngramDistance. Assumes that needle and haystack strings are UTF-8 encoded strings.SyntaxngramDistanceUTF8(haystack, needle)Parametershaystack: First UTF-8 encoded comparison string. String literalneedle: Second UTF-8 encoded comparison string. String literalReturned valueValue between 0 and 1 representing the similarity between the two strings. Float32\nExamples: SELECT ngramDistanceUTF8('abcde','cde');\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["ngramDistanceCaseInsensitiveUTF8"], "Feature": ["ngramDistanceCaseInsensitiveUTF8(haystack, needle)"], "Description": ["ngramDistanceCaseInsensitiveUTF8", "Provides a case-insensitive variant of ngramDistanceUTF8.", "Syntax", "ngramDistanceCaseInsensitiveUTF8(haystack, needle)", "Parameters", "haystack: First UTF-8 encoded comparison string. String literalneedle: Second UTF-8 encoded comparison string. String literal", "Returned value", "Value between 0 and 1 representing the similarity between the two strings. Float32"], "Examples": ["SELECT ngramDistanceCaseInsensitiveUTF8('abcde','CDE');"], "Category": ["Searching in Strings Functions"], "index": 1074, "vector_txt": "1074:Feature: ngramDistanceCaseInsensitiveUTF8(haystack, needle)\nDescription: ngramDistanceCaseInsensitiveUTF8Provides a case-insensitive variant of ngramDistanceUTF8.SyntaxngramDistanceCaseInsensitiveUTF8(haystack, needle)Parametershaystack: First UTF-8 encoded comparison string. String literalneedle: Second UTF-8 encoded comparison string. String literalReturned valueValue between 0 and 1 representing the similarity between the two strings. Float32\nExamples: SELECT ngramDistanceCaseInsensitiveUTF8('abcde','CDE');\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["ngramSearch"], "Feature": ["ngramSearch(haystack, needle)"], "Description": ["ngramSearch", "Like ngramDistance but calculates the non-symmetric difference between a needle string and a haystack string, i.e. the number of n-grams from the needle minus the common number of n-grams normalized by the number of needle n-grams. Returns a Float32 between 0 and 1. The bigger the result is, the more likely needle is in the haystack. This function is useful for fuzzy string search. Also see function soundex.", "Functions ngramSearchCaseInsensitive, ngramSearchUTF8, ngramSearchCaseInsensitiveUTF8 provide case-insensitive and/or UTF-8 variants of this function.", "Syntax", "ngramSearch(haystack, needle)", "Parameters", "haystack: First comparison string. String literalneedle: Second comparison string. String literal", "Returned value", "Value between 0 and 1 representing the likelihood of the needle being in the haystack. Float32", "Implementation details", "NoteThe UTF-8 variants use the 3-gram distance. These are not perfectly fair n-gram distances. We use 2-byte hashes to hash n-grams and then calculate the (non-)symmetric difference between these hash tables \u2013 collisions may occur. With UTF-8 case-insensitive format we do not use fair tolower function \u2013 we zero the 5-th bit (starting from zero) of each codepoint byte and first bit of zeroth byte if bytes more than one \u2013 this works for Latin and mostly for all Cyrillic letters."], "Examples": ["SELECT ngramSearch('Hello World','World Hello');"], "Category": ["Searching in Strings Functions"], "index": 1075, "vector_txt": "1075:Feature: ngramSearch(haystack, needle)\nDescription: ngramSearchLike ngramDistance but calculates the non-symmetric difference between a needle string and a haystack string, i.e. the number of n-grams from the needle minus the common number of n-grams normalized by the number of needle n-grams. Returns a Float32 between 0 and 1. The bigger the result is, the more likely needle is in the haystack. This function is useful for fuzzy string search. Also see function soundex.Functions ngramSearchCaseInsensitive, ngramSearchUTF8, ngramSearchCaseInsensitiveUTF8 provide case-insensitive and/or UTF-8 variants of this function.SyntaxngramSearch(haystack, needle)Parametershaystack: First comparison string. String literalneedle: Second comparison string. String literalReturned valueValue between 0 and 1 representing the likelihood of the needle being in the haystack. Float32Implementation detailsNoteThe UTF-8 variants use the 3-gram distance. These are not perfectly fair n-gram distances. We use 2-byte hashes to hash n-grams and then calculate the (non-)symmetric difference between these hash tables \u2013 collisions may occur. With UTF-8 case-insensitive format we do not use fair tolower function \u2013 we zero the 5-th bit (starting from zero) of each codepoint byte and first bit of zeroth byte if bytes more than one \u2013 this works for Latin and mostly for all Cyrillic letters.\nExamples: SELECT ngramSearch('Hello World','World Hello');\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["ngramSearchCaseInsensitive"], "Feature": ["ngramSearchCaseInsensitive(haystack, needle)"], "Description": ["ngramSearchCaseInsensitive", "Provides a case-insensitive variant of ngramSearch.", "Syntax", "ngramSearchCaseInsensitive(haystack, needle)", "Parameters", "haystack: First comparison string. String literalneedle: Second comparison string. String literal", "Returned value", "Value between 0 and 1 representing the likelihood of the needle being in the haystack. Float32", "The bigger the result is, the more likely needle is in the haystack."], "Examples": ["SELECT ngramSearchCaseInsensitive('Hello World','hello');"], "Category": ["Searching in Strings Functions"], "index": 1076, "vector_txt": "1076:Feature: ngramSearchCaseInsensitive(haystack, needle)\nDescription: ngramSearchCaseInsensitiveProvides a case-insensitive variant of ngramSearch.SyntaxngramSearchCaseInsensitive(haystack, needle)Parametershaystack: First comparison string. String literalneedle: Second comparison string. String literalReturned valueValue between 0 and 1 representing the likelihood of the needle being in the haystack. Float32The bigger the result is, the more likely needle is in the haystack.\nExamples: SELECT ngramSearchCaseInsensitive('Hello World','hello');\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["ngramSearchUTF8"], "Feature": ["ngramSearchUTF8(haystack, needle)"], "Description": ["ngramSearchUTF8", "Provides a UTF-8 variant of ngramSearch in which needle and haystack are assumed to be UTF-8 encoded strings.", "Syntax", "ngramSearchUTF8(haystack, needle)", "Parameters", "haystack: First UTF-8 encoded comparison string. String literalneedle: Second UTF-8 encoded comparison string. String literal", "Returned value", "Value between 0 and 1 representing the likelihood of the needle being in the haystack. Float32", "The bigger the result is, the more likely needle is in the haystack."], "Examples": ["SELECT ngramSearchUTF8('\u0430\u0431\u0432\u0433\u0434\u0435\u0451\u0436\u0437', '\u0433\u0434\u0435\u0451\u0437\u0434');"], "Category": ["Searching in Strings Functions"], "index": 1077, "vector_txt": "1077:Feature: ngramSearchUTF8(haystack, needle)\nDescription: ngramSearchUTF8Provides a UTF-8 variant of ngramSearch in which needle and haystack are assumed to be UTF-8 encoded strings.SyntaxngramSearchUTF8(haystack, needle)Parametershaystack: First UTF-8 encoded comparison string. String literalneedle: Second UTF-8 encoded comparison string. String literalReturned valueValue between 0 and 1 representing the likelihood of the needle being in the haystack. Float32The bigger the result is, the more likely needle is in the haystack.\nExamples: SELECT ngramSearchUTF8('\u0430\u0431\u0432\u0433\u0434\u0435\u0451\u0436\u0437', '\u0433\u0434\u0435\u0451\u0437\u0434');\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["ngramSearchCaseInsensitiveUTF8"], "Feature": ["ngramSearchCaseInsensitiveUTF8(haystack, needle)"], "Description": ["ngramSearchCaseInsensitiveUTF8", "Provides a case-insensitive variant of ngramSearchUTF8 in which needle and haystack.", "Syntax", "ngramSearchCaseInsensitiveUTF8(haystack, needle)", "Parameters", "haystack: First UTF-8 encoded comparison string. String literalneedle: Second UTF-8 encoded comparison string. String literal", "Returned value", "Value between 0 and 1 representing the likelihood of the needle being in the haystack. Float32", "The bigger the result is, the more likely needle is in the haystack."], "Examples": ["SELECT ngramSearchCaseInsensitiveUTF8('\u0430\u0431\u0432\u0413\u0414\u0415\u0451\u0436\u0437', '\u0410\u0431\u0432\u0433\u0434\u0415\u0401\u0436\u0437');"], "Category": ["Searching in Strings Functions"], "index": 1078, "vector_txt": "1078:Feature: ngramSearchCaseInsensitiveUTF8(haystack, needle)\nDescription: ngramSearchCaseInsensitiveUTF8Provides a case-insensitive variant of ngramSearchUTF8 in which needle and haystack.SyntaxngramSearchCaseInsensitiveUTF8(haystack, needle)Parametershaystack: First UTF-8 encoded comparison string. String literalneedle: Second UTF-8 encoded comparison string. String literalReturned valueValue between 0 and 1 representing the likelihood of the needle being in the haystack. Float32The bigger the result is, the more likely needle is in the haystack.\nExamples: SELECT ngramSearchCaseInsensitiveUTF8('\u0430\u0431\u0432\u0413\u0414\u0415\u0451\u0436\u0437', '\u0410\u0431\u0432\u0433\u0434\u0415\u0401\u0436\u0437');\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayReduce"], "Feature": ["arrayReduce(agg_func, arr1, arr2, ..., arrN)"], "Description": ["arrayReduce", "Applies an aggregate function to array elements and returns its result. The name of the aggregation function is passed as a string in single quotes 'max', 'sum'. When using parametric aggregate functions, the parameter is indicated after the function name in parentheses 'uniqUpTo(6)'.", "Syntax", "arrayReduce(agg_func, arr1, arr2, ..., arrN)", "Arguments", "agg_func \u2014 The name of an aggregate function which should be a constant string.arr \u2014 Any number of array type columns as the parameters of the aggregation function.", "Returned value"], "Examples": ["SELECT arrayReduce('max', [1, 2, 3]);", "SELECT arrayReduce('maxIf', [3, 5], [1, 0]);", "SELECT arrayReduce('uniqUpTo(3)', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);"], "Category": ["Arrays Functions"], "index": 1079, "vector_txt": "1079:Feature: arrayReduce(agg_func, arr1, arr2, ..., arrN)\nDescription: arrayReduceApplies an aggregate function to array elements and returns its result. The name of the aggregation function is passed as a string in single quotes 'max', 'sum'. When using parametric aggregate functions, the parameter is indicated after the function name in parentheses 'uniqUpTo(6)'.SyntaxarrayReduce(agg_func, arr1, arr2, ..., arrN)Argumentsagg_func \u2014 The name of an aggregate function which should be a constant string.arr \u2014 Any number of array type columns as the parameters of the aggregation function.Returned value\nExamples: SELECT arrayReduce('max', [1, 2, 3]);SELECT arrayReduce('maxIf', [3, 5], [1, 0]);SELECT arrayReduce('uniqUpTo(3)', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["countSubstrings"], "Feature": ["countSubstrings(haystack, needle[, start_pos])"], "Description": ["countSubstrings", "Returns how often a substring needle occurs in a string haystack.", "Functions countSubstringsCaseInsensitive and countSubstringsCaseInsensitiveUTF8 provide case-insensitive and case-insensitive + UTF-8 variants of this function respectively.", "Syntax", "countSubstrings(haystack, needle[, start_pos])", "Arguments", "haystack \u2014 String in which the search is performed. String.needle \u2014 Substring to be searched. String.start_pos \u2013 Position (1-based) in haystack at which the search starts. UInt. Optional.", "Returned value", "The number of occurrences. UInt64."], "Examples": ["SELECT countSubstrings('aaaa', 'aa');", "SELECT countSubstrings('abc___abc', 'abc', 4);"], "Category": ["Searching in Strings Functions"], "index": 1080, "vector_txt": "1080:Feature: countSubstrings(haystack, needle[, start_pos])\nDescription: countSubstringsReturns how often a substring needle occurs in a string haystack.Functions countSubstringsCaseInsensitive and countSubstringsCaseInsensitiveUTF8 provide case-insensitive and case-insensitive + UTF-8 variants of this function respectively.SyntaxcountSubstrings(haystack, needle[, start_pos])Argumentshaystack \u2014 String in which the search is performed. String.needle \u2014 Substring to be searched. String.start_pos \u2013 Position (1-based) in haystack at which the search starts. UInt. Optional.Returned valueThe number of occurrences. UInt64.\nExamples: SELECT countSubstrings('aaaa', 'aa');SELECT countSubstrings('abc___abc', 'abc', 4);\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["countSubstringsCaseInsensitive"], "Feature": ["countSubstringsCaseInsensitive(haystack, needle[, start_pos])"], "Description": ["countSubstringsCaseInsensitive", "Returns how often a substring needle occurs in a string haystack. Ignores case.", "Syntax", "countSubstringsCaseInsensitive(haystack, needle[, start_pos])", "Arguments", "haystack \u2014 String in which the search is performed. String.needle \u2014 Substring to be searched. String.start_pos \u2013 Position (1-based) in haystack at which the search starts. UInt. Optional.", "Returned value", "The number of occurrences. UInt64."], "Examples": ["SELECT countSubstringsCaseInsensitive('AAAA', 'aa');", "SELECT countSubstringsCaseInsensitive('abc___ABC___abc', 'abc', 4);"], "Category": ["Searching in Strings Functions"], "index": 1081, "vector_txt": "1081:Feature: countSubstringsCaseInsensitive(haystack, needle[, start_pos])\nDescription: countSubstringsCaseInsensitiveReturns how often a substring needle occurs in a string haystack. Ignores case.SyntaxcountSubstringsCaseInsensitive(haystack, needle[, start_pos])Argumentshaystack \u2014 String in which the search is performed. String.needle \u2014 Substring to be searched. String.start_pos \u2013 Position (1-based) in haystack at which the search starts. UInt. Optional.Returned valueThe number of occurrences. UInt64.\nExamples: SELECT countSubstringsCaseInsensitive('AAAA', 'aa');SELECT countSubstringsCaseInsensitive('abc___ABC___abc', 'abc', 4);\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["countSubstringsCaseInsensitiveUTF8"], "Feature": ["countSubstringsCaseInsensitiveUTF8(haystack, needle[, start_pos])"], "Description": ["countSubstringsCaseInsensitiveUTF8", "Returns how often a substring needle occurs in a string haystack. Ignores case and assumes that haystack is a UTF8 string.", "Syntax", "countSubstringsCaseInsensitiveUTF8(haystack, needle[, start_pos])", "Arguments", "haystack \u2014 UTF-8 string in which the search is performed. String.needle \u2014 Substring to be searched. String.start_pos \u2013 Position (1-based) in haystack at which the search starts. UInt. Optional.", "Returned value", "The number of occurrences. UInt64."], "Examples": ["SELECT countSubstringsCaseInsensitiveUTF8('\u043b\u043e\u0436\u043a\u0430, \u043a\u043e\u0448\u043a\u0430, \u043a\u0430\u0440\u0442\u043e\u0448\u043a\u0430', '\u041a\u0410');", "SELECT countSubstringsCaseInsensitiveUTF8('\u043b\u043e\u0436\u043a\u0430, \u043a\u043e\u0448\u043a\u0430, \u043a\u0430\u0440\u0442\u043e\u0448\u043a\u0430', '\u041a\u0410', 13);"], "Category": ["Searching in Strings Functions"], "index": 1082, "vector_txt": "1082:Feature: countSubstringsCaseInsensitiveUTF8(haystack, needle[, start_pos])\nDescription: countSubstringsCaseInsensitiveUTF8Returns how often a substring needle occurs in a string haystack. Ignores case and assumes that haystack is a UTF8 string.SyntaxcountSubstringsCaseInsensitiveUTF8(haystack, needle[, start_pos])Argumentshaystack \u2014 UTF-8 string in which the search is performed. String.needle \u2014 Substring to be searched. String.start_pos \u2013 Position (1-based) in haystack at which the search starts. UInt. Optional.Returned valueThe number of occurrences. UInt64.\nExamples: SELECT countSubstringsCaseInsensitiveUTF8('\u043b\u043e\u0436\u043a\u0430, \u043a\u043e\u0448\u043a\u0430, \u043a\u0430\u0440\u0442\u043e\u0448\u043a\u0430', '\u041a\u0410');SELECT countSubstringsCaseInsensitiveUTF8('\u043b\u043e\u0436\u043a\u0430, \u043a\u043e\u0448\u043a\u0430, \u043a\u0430\u0440\u0442\u043e\u0448\u043a\u0430', '\u041a\u0410', 13);\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["countMatches"], "Feature": ["countMatches(haystack, pattern)"], "Description": ["countMatches", "Returns the number of regular expression matches for a pattern in a haystack.", "Syntax", "countMatches(haystack, pattern)", "Arguments", "haystack \u2014 The string to search in. String.pattern \u2014 The regular expression with re2 regular expression syntax. String.", "Returned value", "The number of matches. UInt64."], "Examples": ["SELECT countMatches('foobar.com', 'o+');", "SELECT countMatches('aaaa', 'aa');"], "Category": ["Searching in Strings Functions"], "index": 1083, "vector_txt": "1083:Feature: countMatches(haystack, pattern)\nDescription: countMatchesReturns the number of regular expression matches for a pattern in a haystack.SyntaxcountMatches(haystack, pattern)Argumentshaystack \u2014 The string to search in. String.pattern \u2014 The regular expression with re2 regular expression syntax. String.Returned valueThe number of matches. UInt64.\nExamples: SELECT countMatches('foobar.com', 'o+');SELECT countMatches('aaaa', 'aa');\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["countMatchesCaseInsensitive"], "Feature": ["countMatchesCaseInsensitive(haystack, pattern)"], "Description": ["countMatchesCaseInsensitive", "Returns the number of regular expression matches for a pattern in a haystack like countMatches but matching ignores the case.", "Syntax", "countMatchesCaseInsensitive(haystack, pattern)", "Arguments", "haystack \u2014 The string to search in. String.pattern \u2014 The regular expression with re2 regular expression syntax. String.", "Returned value", "The number of matches. UInt64."], "Examples": ["SELECT countMatchesCaseInsensitive('AAAA', 'aa');"], "Category": ["Searching in Strings Functions"], "index": 1084, "vector_txt": "1084:Feature: countMatchesCaseInsensitive(haystack, pattern)\nDescription: countMatchesCaseInsensitiveReturns the number of regular expression matches for a pattern in a haystack like countMatches but matching ignores the case.SyntaxcountMatchesCaseInsensitive(haystack, pattern)Argumentshaystack \u2014 The string to search in. String.pattern \u2014 The regular expression with re2 regular expression syntax. String.Returned valueThe number of matches. UInt64.\nExamples: SELECT countMatchesCaseInsensitive('AAAA', 'aa');\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["regexpExtract"], "Feature": ["regexpExtract(haystack, pattern[, index])"], "Description": ["regexpExtract", "Extracts the first string in haystack that matches the regexp pattern and corresponds to the regex group index.", "Syntax", "regexpExtract(haystack, pattern[, index])", "Alias: REGEXP_EXTRACT(haystack, pattern[, index]).", "Arguments", "haystack \u2014 String, in which regexp pattern will to be matched. String.pattern \u2014 String, regexp expression, must be constant. String.index \u2013 An integer number greater or equal 0 with default 1. It represents which regex group to extract. UInt or Int. Optional.", "Returned value", "pattern may contain multiple regexp groups, index indicates which regex group to extract. An index of 0 means matching the entire regular expression. String."], "Examples": ["SELECT    regexpExtract('100-200', '(\\\\d+)-(\\\\d+)', 1),    regexpExtract('100-200', '(\\\\d+)-(\\\\d+)', 2),    regexpExtract('100-200', '(\\\\d+)-(\\\\d+)', 0),    regexpExtract('100-200', '(\\\\d+)-(\\\\d+)');"], "Category": ["Searching in Strings Functions"], "index": 1085, "vector_txt": "1085:Feature: regexpExtract(haystack, pattern[, index])\nDescription: regexpExtractExtracts the first string in haystack that matches the regexp pattern and corresponds to the regex group index.SyntaxregexpExtract(haystack, pattern[, index])Alias: REGEXP_EXTRACT(haystack, pattern[, index]).Argumentshaystack \u2014 String, in which regexp pattern will to be matched. String.pattern \u2014 String, regexp expression, must be constant. String.index \u2013 An integer number greater or equal 0 with default 1. It represents which regex group to extract. UInt or Int. Optional.Returned valuepattern may contain multiple regexp groups, index indicates which regex group to extract. An index of 0 means matching the entire regular expression. String.\nExamples: SELECT    regexpExtract('100-200', '(\\\\d+)-(\\\\d+)', 1),    regexpExtract('100-200', '(\\\\d+)-(\\\\d+)', 2),    regexpExtract('100-200', '(\\\\d+)-(\\\\d+)', 0),    regexpExtract('100-200', '(\\\\d+)-(\\\\d+)');\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["hasSubsequence"], "Feature": ["hasSubsequence(haystack, needle)"], "Description": ["hasSubsequence", "Returns 1 if needle is a subsequence of haystack, or 0 otherwise.\nA subsequence of a string is a sequence that can be derived from the given string by deleting zero or more elements without changing the order of the remaining elements.", "Syntax", "hasSubsequence(haystack, needle)", "Arguments", "haystack \u2014 String in which the search is performed. String.needle \u2014 Subsequence to be searched. String.", "Returned value", "1, if needle is a subsequence of haystack, 0 otherwise. UInt8."], "Examples": ["SELECT hasSubsequence('garbage', 'arg');"], "Category": ["Searching in Strings Functions"], "index": 1086, "vector_txt": "1086:Feature: hasSubsequence(haystack, needle)\nDescription: hasSubsequenceReturns 1 if needle is a subsequence of haystack, or 0 otherwise.\nA subsequence of a string is a sequence that can be derived from the given string by deleting zero or more elements without changing the order of the remaining elements.SyntaxhasSubsequence(haystack, needle)Argumentshaystack \u2014 String in which the search is performed. String.needle \u2014 Subsequence to be searched. String.Returned value1, if needle is a subsequence of haystack, 0 otherwise. UInt8.\nExamples: SELECT hasSubsequence('garbage', 'arg');\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["hasSubsequenceCaseInsensitive"], "Feature": ["hasSubsequenceCaseInsensitive(haystack, needle)"], "Description": ["hasSubsequenceCaseInsensitive", "Like hasSubsequence but searches case-insensitively.", "Syntax", "hasSubsequenceCaseInsensitive(haystack, needle)", "Arguments", "haystack \u2014 String in which the search is performed. String.needle \u2014 Subsequence to be searched. String.", "Returned value", "1, if needle is a subsequence of haystack, 0 otherwise UInt8."], "Examples": ["SELECT hasSubsequenceCaseInsensitive('garbage', 'ARG');"], "Category": ["Searching in Strings Functions"], "index": 1087, "vector_txt": "1087:Feature: hasSubsequenceCaseInsensitive(haystack, needle)\nDescription: hasSubsequenceCaseInsensitiveLike hasSubsequence but searches case-insensitively.SyntaxhasSubsequenceCaseInsensitive(haystack, needle)Argumentshaystack \u2014 String in which the search is performed. String.needle \u2014 Subsequence to be searched. String.Returned value1, if needle is a subsequence of haystack, 0 otherwise UInt8.\nExamples: SELECT hasSubsequenceCaseInsensitive('garbage', 'ARG');\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["hasSubsequenceUTF8"], "Feature": ["hasSubsequenceUTF8(haystack, needle)"], "Description": ["hasSubsequenceUTF8", "Like hasSubsequence but assumes haystack and needle are UTF-8 encoded strings.", "Syntax", "hasSubsequenceUTF8(haystack, needle)", "Arguments", "haystack \u2014 String in which the search is performed. UTF-8 encoded String.needle \u2014 Subsequence to be searched. UTF-8 encoded String.", "Returned value", "1, if needle is a subsequence of haystack, 0, otherwise. UInt8.", "Query:"], "Examples": ["select hasSubsequenceUTF8('ClickHouse - \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0431\u0430\u0437\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445', '\u0441\u0438\u0441\u0442\u0435\u043c\u0430');"], "Category": ["Searching in Strings Functions"], "index": 1088, "vector_txt": "1088:Feature: hasSubsequenceUTF8(haystack, needle)\nDescription: hasSubsequenceUTF8Like hasSubsequence but assumes haystack and needle are UTF-8 encoded strings.SyntaxhasSubsequenceUTF8(haystack, needle)Argumentshaystack \u2014 String in which the search is performed. UTF-8 encoded String.needle \u2014 Subsequence to be searched. UTF-8 encoded String.Returned value1, if needle is a subsequence of haystack, 0, otherwise. UInt8.Query:\nExamples: select hasSubsequenceUTF8('ClickHouse - \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0431\u0430\u0437\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445', '\u0441\u0438\u0441\u0442\u0435\u043c\u0430');\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["hasSubsequenceCaseInsensitiveUTF8"], "Feature": ["hasSubsequenceCaseInsensitiveUTF8(haystack, needle)"], "Description": ["hasSubsequenceCaseInsensitiveUTF8", "Like hasSubsequenceUTF8 but searches case-insensitively.", "Syntax", "hasSubsequenceCaseInsensitiveUTF8(haystack, needle)", "Arguments", "haystack \u2014 String in which the search is performed. UTF-8 encoded String.needle \u2014 Subsequence to be searched. UTF-8 encoded String.", "Returned value", "1, if needle is a subsequence of haystack, 0 otherwise. UInt8."], "Examples": ["select hasSubsequenceCaseInsensitiveUTF8('ClickHouse - \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0431\u0430\u0437\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445', '\u0421\u0418\u0421\u0422\u0415\u041c\u0410');"], "Category": ["Searching in Strings Functions"], "index": 1089, "vector_txt": "1089:Feature: hasSubsequenceCaseInsensitiveUTF8(haystack, needle)\nDescription: hasSubsequenceCaseInsensitiveUTF8Like hasSubsequenceUTF8 but searches case-insensitively.SyntaxhasSubsequenceCaseInsensitiveUTF8(haystack, needle)Argumentshaystack \u2014 String in which the search is performed. UTF-8 encoded String.needle \u2014 Subsequence to be searched. UTF-8 encoded String.Returned value1, if needle is a subsequence of haystack, 0 otherwise. UInt8.\nExamples: select hasSubsequenceCaseInsensitiveUTF8('ClickHouse - \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0431\u0430\u0437\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445', '\u0421\u0418\u0421\u0422\u0415\u041c\u0410');\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayReduceInRanges"], "Feature": ["arrayReduceInRanges(agg_func, ranges, arr1, arr2, ..., arrN)"], "Description": ["arrayReduceInRanges", "Applies an aggregate function to array elements in given ranges and returns an array containing the result corresponding to each range. The function will return the same result as multiple arrayReduce(agg_func, arraySlice(arr1, index, length), ...).", "Syntax", "arrayReduceInRanges(agg_func, ranges, arr1, arr2, ..., arrN)", "Arguments", "agg_func \u2014 The name of an aggregate function which should be a constant string.ranges \u2014 The ranges to aggretate which should be an array of tuples which containing the index and the length of each range.arr \u2014 Any number of Array type columns as the parameters of the aggregation function.", "Returned value", "Array containing results of the aggregate function over specified ranges. Array."], "Examples": ["SELECT arrayReduceInRanges(    'sum',    [(1, 5), (2, 3), (3, 4), (4, 4)],    [1000000, 200000, 30000, 4000, 500, 60, 7]) AS res"], "Category": ["Arrays Functions"], "index": 1090, "vector_txt": "1090:Feature: arrayReduceInRanges(agg_func, ranges, arr1, arr2, ..., arrN)\nDescription: arrayReduceInRangesApplies an aggregate function to array elements in given ranges and returns an array containing the result corresponding to each range. The function will return the same result as multiple arrayReduce(agg_func, arraySlice(arr1, index, length), ...).SyntaxarrayReduceInRanges(agg_func, ranges, arr1, arr2, ..., arrN)Argumentsagg_func \u2014 The name of an aggregate function which should be a constant string.ranges \u2014 The ranges to aggretate which should be an array of tuples which containing the index and the length of each range.arr \u2014 Any number of Array type columns as the parameters of the aggregation function.Returned valueArray containing results of the aggregate function over specified ranges. Array.\nExamples: SELECT arrayReduceInRanges(    'sum',    [(1, 5), (2, 3), (3, 4), (4, 4)],    [1000000, 200000, 30000, 4000, 500, 60, 7]) AS res\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/arithmetic-functions"], "Title": ["isInfinite"], "Feature": ["isInfinite(x)"], "Description": ["isInfinite", "Returns 1 if the Float32 or Float64 argument is infinite, otherwise this function returns 0. Note that 0 is returned for a NaN.", "Syntax", "isInfinite(x)"], "Examples": ["isInfinite(x)"], "Category": ["Arithmetic Functions"], "index": 1091, "vector_txt": "1091:Feature: isInfinite(x)\nDescription: isInfiniteReturns 1 if the Float32 or Float64 argument is infinite, otherwise this function returns 0. Note that 0 is returned for a NaN.SyntaxisInfinite(x)\nExamples: isInfinite(x)\nCategory: Arithmetic Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["hasToken"], "Feature": ["hasToken(haystack, token)"], "Description": ["hasToken", "Returns 1 if a given token is present in a haystack, or 0 otherwise.", "Syntax", "hasToken(haystack, token)", "Parameters", "haystack: String in which the search is performed. String.token: Maximal length substring between two non alphanumeric ASCII characters (or boundaries of haystack).", "Returned value", "1, if the token is present in the haystack, 0 otherwise. UInt8.", "Implementation details", "Token must be a constant string. Supported by tokenbf_v1 index specialization."], "Examples": ["SELECT hasToken('Hello World','Hello');"], "Category": ["Searching in Strings Functions"], "index": 1092, "vector_txt": "1092:Feature: hasToken(haystack, token)\nDescription: hasTokenReturns 1 if a given token is present in a haystack, or 0 otherwise.SyntaxhasToken(haystack, token)Parametershaystack: String in which the search is performed. String.token: Maximal length substring between two non alphanumeric ASCII characters (or boundaries of haystack).Returned value1, if the token is present in the haystack, 0 otherwise. UInt8.Implementation detailsToken must be a constant string. Supported by tokenbf_v1 index specialization.\nExamples: SELECT hasToken('Hello World','Hello');\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["hasTokenOrNull"], "Feature": ["hasTokenOrNull(haystack, token)"], "Description": ["hasTokenOrNull", "Returns 1 if a given token is present, 0 if not present, and null if the token is ill-formed.", "Syntax", "hasTokenOrNull(haystack, token)", "Parameters", "haystack: String in which the search is performed. String.token: Maximal length substring between two non alphanumeric ASCII characters (or boundaries of haystack).", "Returned value", "1, if the token is present in the haystack, 0 if it is not present, and null if the token is ill formed. ", "Implementation details", "Token must be a constant string. Supported by tokenbf_v1 index specialization."], "Examples": ["SELECT hasTokenOrNull('Hello World','Hello,World');"], "Category": ["Searching in Strings Functions"], "index": 1093, "vector_txt": "1093:Feature: hasTokenOrNull(haystack, token)\nDescription: hasTokenOrNullReturns 1 if a given token is present, 0 if not present, and null if the token is ill-formed.SyntaxhasTokenOrNull(haystack, token)Parametershaystack: String in which the search is performed. String.token: Maximal length substring between two non alphanumeric ASCII characters (or boundaries of haystack).Returned value1, if the token is present in the haystack, 0 if it is not present, and null if the token is ill formed. Implementation detailsToken must be a constant string. Supported by tokenbf_v1 index specialization.\nExamples: SELECT hasTokenOrNull('Hello World','Hello,World');\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["hasTokenCaseInsensitive"], "Feature": ["hasTokenCaseInsensitive(haystack, token)"], "Description": ["hasTokenCaseInsensitive", "Returns 1 if a given token is present in a haystack, 0 otherwise. Ignores case.", "Syntax", "hasTokenCaseInsensitive(haystack, token)", "Parameters", "haystack: String in which the search is performed. String.token: Maximal length substring between two non alphanumeric ASCII characters (or boundaries of haystack).", "Returned value", "1, if the token is present in the haystack, 0 otherwise. UInt8.", "Implementation details", "Token must be a constant string. Supported by tokenbf_v1 index specialization."], "Examples": ["SELECT hasTokenCaseInsensitive('Hello World','hello');"], "Category": ["Searching in Strings Functions"], "index": 1094, "vector_txt": "1094:Feature: hasTokenCaseInsensitive(haystack, token)\nDescription: hasTokenCaseInsensitiveReturns 1 if a given token is present in a haystack, 0 otherwise. Ignores case.SyntaxhasTokenCaseInsensitive(haystack, token)Parametershaystack: String in which the search is performed. String.token: Maximal length substring between two non alphanumeric ASCII characters (or boundaries of haystack).Returned value1, if the token is present in the haystack, 0 otherwise. UInt8.Implementation detailsToken must be a constant string. Supported by tokenbf_v1 index specialization.\nExamples: SELECT hasTokenCaseInsensitive('Hello World','hello');\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["hasTokenCaseInsensitiveOrNull"], "Feature": ["hasTokenCaseInsensitiveOrNull(haystack, token)"], "Description": ["hasTokenCaseInsensitiveOrNull", "Returns 1 if a given token is present in a haystack, 0 otherwise. Ignores case and returns null if the token is ill-formed.", "Syntax", "hasTokenCaseInsensitiveOrNull(haystack, token)", "Parameters", "haystack: String in which the search is performed. String.token: Maximal length substring between two non alphanumeric ASCII characters (or boundaries of haystack).", "Returned value", "1, if the token is present in the haystack, 0 if the token is not present, otherwise null if the token is ill-formed. UInt8.", "Implementation details", "Token must be a constant string. Supported by tokenbf_v1 index specialization."], "Examples": ["SELECT hasTokenCaseInsensitiveOrNull('Hello World','hello,world');"], "Category": ["Searching in Strings Functions"], "index": 1095, "vector_txt": "1095:Feature: hasTokenCaseInsensitiveOrNull(haystack, token)\nDescription: hasTokenCaseInsensitiveOrNullReturns 1 if a given token is present in a haystack, 0 otherwise. Ignores case and returns null if the token is ill-formed.SyntaxhasTokenCaseInsensitiveOrNull(haystack, token)Parametershaystack: String in which the search is performed. String.token: Maximal length substring between two non alphanumeric ASCII characters (or boundaries of haystack).Returned value1, if the token is present in the haystack, 0 if the token is not present, otherwise null if the token is ill-formed. UInt8.Implementation detailsToken must be a constant string. Supported by tokenbf_v1 index specialization.\nExamples: SELECT hasTokenCaseInsensitiveOrNull('Hello World','hello,world');\nCategory: Searching in Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/splitting-merging-functions"], "Title": ["splitByChar"], "Feature": ["splitByChar(separator, s[, max_substrings]))"], "Description": ["splitByChar", "Splits a string into substrings separated by a specified character. Uses a constant string separator which consists of exactly one character.\nReturns an array of selected substrings. Empty substrings may be selected if the separator occurs at the beginning or end of the string, or if there are multiple consecutive separators.", "Syntax", "splitByChar(separator, s[, max_substrings]))", "Arguments", "separator \u2014 The separator which should contain exactly one character. String.s \u2014 The string to split. String.max_substrings \u2014 An optional Int64 defaulting to 0. If max_substrings > 0, the returned array will contain at most max_substrings substrings, otherwise the function will return as many substrings as possible.", "Returned value(s)", "An array of selected substrings. Array(String).Empty substrings may be selected when:A separator occurs at the beginning or end of the string;There are multiple consecutive separators;The original string s is empty.", "NoteThe behavior of parameter max_substrings changed starting with ClickHouse v22.11. In versions older than that, max_substrings > 0 meant that max_substring-many splits were performed and that the remainder of the string was returned as the final element of the list.\nFor example,in v22.10: SELECT splitByChar('=', 'a=b=c=d', 2); returned ['a','b','c=d']in v22.11: SELECT splitByChar('=', 'a=b=c=d', 2); returned ['a','b']A behavior similar to ClickHouse pre-v22.11 can be achieved by setting\nsplitby_max_substrings_includes_remaining_string\nSELECT splitByChar('=', 'a=b=c=d', 2) SETTINGS splitby_max_substrings_includes_remaining_string = 1 -- ['a', 'b=c=d']"], "Examples": ["SELECT splitByChar(',', '1,2,3,abcde');"], "Category": ["Splitting Strings Functions"], "index": 1096, "vector_txt": "1096:Feature: splitByChar(separator, s[, max_substrings]))\nDescription: splitByCharSplits a string into substrings separated by a specified character. Uses a constant string separator which consists of exactly one character.\nReturns an array of selected substrings. Empty substrings may be selected if the separator occurs at the beginning or end of the string, or if there are multiple consecutive separators.SyntaxsplitByChar(separator, s[, max_substrings]))Argumentsseparator \u2014 The separator which should contain exactly one character. String.s \u2014 The string to split. String.max_substrings \u2014 An optional Int64 defaulting to 0. If max_substrings > 0, the returned array will contain at most max_substrings substrings, otherwise the function will return as many substrings as possible.Returned value(s)An array of selected substrings. Array(String).Empty substrings may be selected when:A separator occurs at the beginning or end of the string;There are multiple consecutive separators;The original string s is empty.NoteThe behavior of parameter max_substrings changed starting with ClickHouse v22.11. In versions older than that, max_substrings > 0 meant that max_substring-many splits were performed and that the remainder of the string was returned as the final element of the list.\nFor example,in v22.10: SELECT splitByChar('=', 'a=b=c=d', 2); returned ['a','b','c=d']in v22.11: SELECT splitByChar('=', 'a=b=c=d', 2); returned ['a','b']A behavior similar to ClickHouse pre-v22.11 can be achieved by setting\nsplitby_max_substrings_includes_remaining_string\nSELECT splitByChar('=', 'a=b=c=d', 2) SETTINGS splitby_max_substrings_includes_remaining_string = 1 -- ['a', 'b=c=d']\nExamples: SELECT splitByChar(',', '1,2,3,abcde');\nCategory: Splitting Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/splitting-merging-functions"], "Title": ["splitByString"], "Feature": ["splitByString(separator, s[, max_substrings]))"], "Description": ["splitByString", "Splits a string into substrings separated by a string. It uses a constant string separator of multiple characters as the separator. If the string separator is empty, it will split the string s into an array of single characters.", "Syntax", "splitByString(separator, s[, max_substrings]))", "Arguments", "separator \u2014 The separator. String.s \u2014 The string to split. String.max_substrings \u2014 An optional Int64 defaulting to 0. When max_substrings > 0, the returned substrings will be no more than max_substrings, otherwise the function will return as many substrings as possible.", "Returned value(s)", "An array of selected substrings. Array(String).", "Empty substrings may be selected when:", "A non-empty separator occurs at the beginning or end of the string;There are multiple consecutive non-empty separators;The original string s is empty while the separator is not empty.", "NoteSetting splitby_max_substrings_includes_remaining_string (default: 0) controls if the remaining string is included in the last element of the result array when argument max_substrings > 0."], "Examples": ["SELECT splitByString(', ', '1, 2 3, 4,5, abcde');", "SELECT splitByString('', 'abcde');"], "Category": ["Splitting Strings Functions"], "index": 1097, "vector_txt": "1097:Feature: splitByString(separator, s[, max_substrings]))\nDescription: splitByStringSplits a string into substrings separated by a string. It uses a constant string separator of multiple characters as the separator. If the string separator is empty, it will split the string s into an array of single characters.SyntaxsplitByString(separator, s[, max_substrings]))Argumentsseparator \u2014 The separator. String.s \u2014 The string to split. String.max_substrings \u2014 An optional Int64 defaulting to 0. When max_substrings > 0, the returned substrings will be no more than max_substrings, otherwise the function will return as many substrings as possible.Returned value(s)An array of selected substrings. Array(String).Empty substrings may be selected when:A non-empty separator occurs at the beginning or end of the string;There are multiple consecutive non-empty separators;The original string s is empty while the separator is not empty.NoteSetting splitby_max_substrings_includes_remaining_string (default: 0) controls if the remaining string is included in the last element of the result array when argument max_substrings > 0.\nExamples: SELECT splitByString(', ', '1, 2 3, 4,5, abcde');SELECT splitByString('', 'abcde');\nCategory: Splitting Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/splitting-merging-functions"], "Title": ["splitByRegexp"], "Feature": ["splitByRegexp(regexp, s[, max_substrings]))"], "Description": ["splitByRegexp", "Splits a string into substrings separated by a regular expression. It uses a regular expression string regexp as the separator. If the regexp is empty, it will split the string s into an array of single characters. If no match is found for this regular expression, the string s won't be split.", "Syntax", "splitByRegexp(regexp, s[, max_substrings]))", "Arguments", "regexp \u2014 Regular expression. Constant. String or FixedString.s \u2014 The string to split. String.max_substrings \u2014 An optional Int64 defaulting to 0. When max_substrings > 0, the returned substrings will be no more than max_substrings, otherwise the function will return as many substrings as possible.", "Returned value(s)", "An array of selected substrings. Array(String).", "Empty substrings may be selected when:", "A non-empty regular expression match occurs at the beginning or end of the string;There are multiple consecutive non-empty regular expression matches;The original string s is empty while the regular expression is not empty.", "NoteSetting splitby_max_substrings_includes_remaining_string (default: 0) controls if the remaining string is included in the last element of the result array when argument max_substrings > 0."], "Examples": ["SELECT splitByRegexp('\\\\d+', 'a12bc23de345f');", "SELECT splitByRegexp('', 'abcde');"], "Category": ["Splitting Strings Functions"], "index": 1098, "vector_txt": "1098:Feature: splitByRegexp(regexp, s[, max_substrings]))\nDescription: splitByRegexpSplits a string into substrings separated by a regular expression. It uses a regular expression string regexp as the separator. If the regexp is empty, it will split the string s into an array of single characters. If no match is found for this regular expression, the string s won't be split.SyntaxsplitByRegexp(regexp, s[, max_substrings]))Argumentsregexp \u2014 Regular expression. Constant. String or FixedString.s \u2014 The string to split. String.max_substrings \u2014 An optional Int64 defaulting to 0. When max_substrings > 0, the returned substrings will be no more than max_substrings, otherwise the function will return as many substrings as possible.Returned value(s)An array of selected substrings. Array(String).Empty substrings may be selected when:A non-empty regular expression match occurs at the beginning or end of the string;There are multiple consecutive non-empty regular expression matches;The original string s is empty while the regular expression is not empty.NoteSetting splitby_max_substrings_includes_remaining_string (default: 0) controls if the remaining string is included in the last element of the result array when argument max_substrings > 0.\nExamples: SELECT splitByRegexp('\\\\d+', 'a12bc23de345f');SELECT splitByRegexp('', 'abcde');\nCategory: Splitting Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/splitting-merging-functions"], "Title": ["splitByWhitespace"], "Feature": ["splitByWhitespace(s[, max_substrings]))"], "Description": ["splitByWhitespace", "Splits a string into substrings separated by whitespace characters.\nReturns an array of selected substrings.", "Syntax", "splitByWhitespace(s[, max_substrings]))", "Arguments", "s \u2014 The string to split. String.max_substrings \u2014 An optional Int64 defaulting to 0. When max_substrings > 0, the returned substrings will be no more than max_substrings, otherwise the function will return as many substrings as possible.", "Returned value(s)", "An array of selected substrings. Array(String).", "NoteSetting splitby_max_substrings_includes_remaining_string (default: 0) controls if the remaining string is included in the last element of the result array when argument max_substrings > 0."], "Examples": ["SELECT splitByWhitespace('  1!  a,  b.  ');"], "Category": ["Splitting Strings Functions"], "index": 1099, "vector_txt": "1099:Feature: splitByWhitespace(s[, max_substrings]))\nDescription: splitByWhitespaceSplits a string into substrings separated by whitespace characters.\nReturns an array of selected substrings.SyntaxsplitByWhitespace(s[, max_substrings]))Argumentss \u2014 The string to split. String.max_substrings \u2014 An optional Int64 defaulting to 0. When max_substrings > 0, the returned substrings will be no more than max_substrings, otherwise the function will return as many substrings as possible.Returned value(s)An array of selected substrings. Array(String).NoteSetting splitby_max_substrings_includes_remaining_string (default: 0) controls if the remaining string is included in the last element of the result array when argument max_substrings > 0.\nExamples: SELECT splitByWhitespace('  1!  a,  b.  ');\nCategory: Splitting Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/splitting-merging-functions"], "Title": ["splitByNonAlpha"], "Feature": ["splitByNonAlpha(s[, max_substrings]))"], "Description": ["splitByNonAlpha", "Splits a string into substrings separated by whitespace and punctuation characters.\nReturns an array of selected substrings.", "Syntax", "splitByNonAlpha(s[, max_substrings]))", "Arguments", "s \u2014 The string to split. String.max_substrings \u2014 An optional Int64 defaulting to 0. When max_substrings > 0, the returned substrings will be no more than max_substrings, otherwise the function will return as many substrings as possible.", "Returned value(s)", "An array of selected substrings. Array(String).", "NoteSetting splitby_max_substrings_includes_remaining_string (default: 0) controls if the remaining string is included in the last element of the result array when argument max_substrings > 0."], "Examples": ["SELECT splitByNonAlpha('  1!  a,  b.  ');"], "Category": ["Splitting Strings Functions"], "index": 1100, "vector_txt": "1100:Feature: splitByNonAlpha(s[, max_substrings]))\nDescription: splitByNonAlphaSplits a string into substrings separated by whitespace and punctuation characters.\nReturns an array of selected substrings.SyntaxsplitByNonAlpha(s[, max_substrings]))Argumentss \u2014 The string to split. String.max_substrings \u2014 An optional Int64 defaulting to 0. When max_substrings > 0, the returned substrings will be no more than max_substrings, otherwise the function will return as many substrings as possible.Returned value(s)An array of selected substrings. Array(String).NoteSetting splitby_max_substrings_includes_remaining_string (default: 0) controls if the remaining string is included in the last element of the result array when argument max_substrings > 0.\nExamples: SELECT splitByNonAlpha('  1!  a,  b.  ');\nCategory: Splitting Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/splitting-merging-functions"], "Title": ["arrayStringConcat"], "Feature": ["arrayStringConcat(arr\\[, separator\\])"], "Description": ["arrayStringConcat", "Concatenates string representations of values listed in the array with the separator. separator is an optional parameter: a constant string, set to an empty string by default.\nReturns the string.", "Syntax", "arrayStringConcat(arr\\[, separator\\])"], "Examples": ["SELECT arrayStringConcat(['12/05/2021', '12:50:00'], ' ') AS DateString;"], "Category": ["Splitting Strings Functions"], "index": 1101, "vector_txt": "1101:Feature: arrayStringConcat(arr\\[, separator\\])\nDescription: arrayStringConcatConcatenates string representations of values listed in the array with the separator. separator is an optional parameter: a constant string, set to an empty string by default.\nReturns the string.SyntaxarrayStringConcat(arr\\[, separator\\])\nExamples: SELECT arrayStringConcat(['12/05/2021', '12:50:00'], ' ') AS DateString;\nCategory: Splitting Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayFold"], "Feature": ["arrayFold(lambda_function, arr1, arr2, ..., accumulator)"], "Description": ["arrayFold", "Applies a lambda function to one or more equally-sized arrays and collects the result in an accumulator.", "Syntax", "arrayFold(lambda_function, arr1, arr2, ..., accumulator)"], "Examples": ["SELECT arrayFold( acc,x -> acc + x*2,  [1, 2, 3, 4], toInt64(3)) AS res;", "SELECT arrayFold( acc,x -> (acc.2, acc.2 + acc.1), range(number), (1::Int64, 0::Int64)).1 AS fibonacciFROM numbers(1,10);\u250c\u2500fibonacci\u2500\u2510\u2502         0 \u2502\u2502         1 \u2502\u2502         1 \u2502\u2502         2 \u2502\u2502         3 \u2502\u2502         5 \u2502\u2502         8 \u2502\u2502        13 \u2502\u2502        21 \u2502\u2502        34 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Category": ["Arrays Functions"], "index": 1102, "vector_txt": "1102:Feature: arrayFold(lambda_function, arr1, arr2, ..., accumulator)\nDescription: arrayFoldApplies a lambda function to one or more equally-sized arrays and collects the result in an accumulator.SyntaxarrayFold(lambda_function, arr1, arr2, ..., accumulator)\nExamples: SELECT arrayFold( acc,x -> acc + x*2,  [1, 2, 3, 4], toInt64(3)) AS res;SELECT arrayFold( acc,x -> (acc.2, acc.2 + acc.1), range(number), (1::Int64, 0::Int64)).1 AS fibonacciFROM numbers(1,10);\u250c\u2500fibonacci\u2500\u2510\u2502         0 \u2502\u2502         1 \u2502\u2502         1 \u2502\u2502         2 \u2502\u2502         3 \u2502\u2502         5 \u2502\u2502         8 \u2502\u2502        13 \u2502\u2502        21 \u2502\u2502        34 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/splitting-merging-functions"], "Title": ["alphaTokens"], "Feature": ["alphaTokens(s[, max_substrings]))"], "Description": ["alphaTokens", "Selects substrings of consecutive bytes from the ranges a-z and A-Z.Returns an array of substrings.", "Syntax", "alphaTokens(s[, max_substrings]))", "Alias: splitByAlpha", "Arguments", "s \u2014 The string to split. String.max_substrings \u2014 An optional Int64 defaulting to 0. When max_substrings > 0, the returned substrings will be no more than max_substrings, otherwise the function will return as many substrings as possible.", "Returned value(s)", "An array of selected substrings. Array(String).", "NoteSetting splitby_max_substrings_includes_remaining_string (default: 0) controls if the remaining string is included in the last element of the result array when argument max_substrings > 0."], "Examples": ["SELECT alphaTokens('abca1abc');"], "Category": ["Splitting Strings Functions"], "index": 1103, "vector_txt": "1103:Feature: alphaTokens(s[, max_substrings]))\nDescription: alphaTokensSelects substrings of consecutive bytes from the ranges a-z and A-Z.Returns an array of substrings.SyntaxalphaTokens(s[, max_substrings]))Alias: splitByAlphaArgumentss \u2014 The string to split. String.max_substrings \u2014 An optional Int64 defaulting to 0. When max_substrings > 0, the returned substrings will be no more than max_substrings, otherwise the function will return as many substrings as possible.Returned value(s)An array of selected substrings. Array(String).NoteSetting splitby_max_substrings_includes_remaining_string (default: 0) controls if the remaining string is included in the last element of the result array when argument max_substrings > 0.\nExamples: SELECT alphaTokens('abca1abc');\nCategory: Splitting Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/splitting-merging-functions"], "Title": ["extractAllGroups"], "Feature": ["extractAllGroups(text, regexp)"], "Description": ["extractAllGroups", "Extracts all groups from non-overlapping substrings matched by a regular expression.", "Syntax", "extractAllGroups(text, regexp)", "Arguments", "text \u2014 String or FixedString.regexp \u2014 Regular expression. Constant. String or FixedString.", "Returned values", "If the function finds at least one matching group, it returns Array(Array(String)) column, clustered by group_id (1 to N, where N is number of capturing groups in regexp). If there is no matching group, it returns an empty array. Array."], "Examples": ["SELECT extractAllGroups('abc=123, 8=\"hkl\"', '(\"[^\"]+\"|\\\\w+)=(\"[^\"]+\"|\\\\w+)');"], "Category": ["Splitting Strings Functions"], "index": 1104, "vector_txt": "1104:Feature: extractAllGroups(text, regexp)\nDescription: extractAllGroupsExtracts all groups from non-overlapping substrings matched by a regular expression.SyntaxextractAllGroups(text, regexp)Argumentstext \u2014 String or FixedString.regexp \u2014 Regular expression. Constant. String or FixedString.Returned valuesIf the function finds at least one matching group, it returns Array(Array(String)) column, clustered by group_id (1 to N, where N is number of capturing groups in regexp). If there is no matching group, it returns an empty array. Array.\nExamples: SELECT extractAllGroups('abc=123, 8=\"hkl\"', '(\"[^\"]+\"|\\\\w+)=(\"[^\"]+\"|\\\\w+)');\nCategory: Splitting Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/splitting-merging-functions"], "Title": ["ngrams"], "Feature": ["ngrams(string, ngramsize)"], "Description": ["ngrams", "Splits a UTF-8 string into n-grams of ngramsize symbols.", "Syntax ", "ngrams(string, ngramsize)", "Arguments", "string \u2014 String. String or FixedString.ngramsize \u2014 The size of an n-gram. UInt.", "Returned values", "Array with n-grams. Array(String)."], "Examples": ["SELECT ngrams('ClickHouse', 3);"], "Category": ["Splitting Strings Functions"], "index": 1105, "vector_txt": "1105:Feature: ngrams(string, ngramsize)\nDescription: ngramsSplits a UTF-8 string into n-grams of ngramsize symbols.Syntax ngrams(string, ngramsize)Argumentsstring \u2014 String. String or FixedString.ngramsize \u2014 The size of an n-gram. UInt.Returned valuesArray with n-grams. Array(String).\nExamples: SELECT ngrams('ClickHouse', 3);\nCategory: Splitting Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/splitting-merging-functions"], "Title": ["tokens"], "Feature": ["tokens"], "Description": ["tokens", "Splits a string into tokens using non-alphanumeric ASCII characters as separators.", "Arguments", "input_string \u2014 Any set of bytes represented as the String data type object.", "Returned value", "The resulting array of tokens from input string. Array."], "Examples": ["SELECT tokens('test1,;\\\\ test2,;\\\\ test3,;\\\\   test4') AS tokens;"], "Category": ["Splitting Strings Functions"], "index": 1106, "vector_txt": "1106:Feature: tokens\nDescription: tokensSplits a string into tokens using non-alphanumeric ASCII characters as separators.Argumentsinput_string \u2014 Any set of bytes represented as the String data type object.Returned valueThe resulting array of tokens from input string. Array.\nExamples: SELECT tokens('test1,;\\\\ test2,;\\\\ test3,;\\\\   test4') AS tokens;\nCategory: Splitting Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["empty"], "Feature": ["empty(x)"], "Description": ["empty", "Checks whether the input string is empty. A string is considered non-empty if it contains at least one byte, even if this byte is a space or the null byte.", "The function is also available for arrays and UUIDs.", "Syntax", "empty(x)", "Arguments", "x \u2014 Input value. String.", "Returned value", "Returns 1 for an empty string or 0 for a non-empty string. UInt8."], "Examples": ["SELECT empty('');"], "Category": ["Strings Functions"], "index": 1107, "vector_txt": "1107:Feature: empty(x)\nDescription: emptyChecks whether the input string is empty. A string is considered non-empty if it contains at least one byte, even if this byte is a space or the null byte.The function is also available for arrays and UUIDs.Syntaxempty(x)Argumentsx \u2014 Input value. String.Returned valueReturns 1 for an empty string or 0 for a non-empty string. UInt8.\nExamples: SELECT empty('');\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["notEmpty"], "Feature": ["notEmpty(x)"], "Description": ["notEmpty", "Checks whether the input string is non-empty. A string is considered non-empty if it contains at least one byte, even if this byte is a space or the null byte.", "The function is also available for arrays and UUIDs.", "Syntax", "notEmpty(x)", "Arguments", "x \u2014 Input value. String.", "Returned value", "Returns 1 for a non-empty string or 0 for an empty string string. UInt8."], "Examples": ["SELECT notEmpty('text');"], "Category": ["Strings Functions"], "index": 1108, "vector_txt": "1108:Feature: notEmpty(x)\nDescription: notEmptyChecks whether the input string is non-empty. A string is considered non-empty if it contains at least one byte, even if this byte is a space or the null byte.The function is also available for arrays and UUIDs.SyntaxnotEmpty(x)Argumentsx \u2014 Input value. String.Returned valueReturns 1 for a non-empty string or 0 for an empty string string. UInt8.\nExamples: SELECT notEmpty('text');\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["length"], "Feature": ["length(s)"], "Description": ["length", "Returns the length of a string in bytes rather than in characters or Unicode code points. The function also works for arrays.", "Alias: OCTET_LENGTH", "Syntax", "length(s)", "Parameters", "s \u2014 An input string or array. String/Array.", "Returned value", "Length of the string or array s in bytes. UInt64."], "Examples": ["SELECT length('Hello, world!');", "SELECT length([1, 2, 3, 4]);"], "Category": ["Strings Functions"], "index": 1109, "vector_txt": "1109:Feature: length(s)\nDescription: lengthReturns the length of a string in bytes rather than in characters or Unicode code points. The function also works for arrays.Alias: OCTET_LENGTHSyntaxlength(s)Parameterss \u2014 An input string or array. String/Array.Returned valueLength of the string or array s in bytes. UInt64.\nExamples: SELECT length('Hello, world!');SELECT length([1, 2, 3, 4]);\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["lengthUTF8"], "Feature": ["lengthUTF8(s)"], "Description": ["lengthUTF8", "Returns the length of a string in Unicode code points rather than in bytes or characters. It assumes that the string contains valid UTF-8 encoded text. If this assumption is violated, no exception is thrown and the result is undefined.", "Aliases:", "CHAR_LENGTHCHARACTER_LENGTH", "Syntax", "lengthUTF8(s)", "Parameters", "s \u2014 String containing valid UTF-8 encoded text. String.", "Returned value", "Length of the string s in Unicode code points. UInt64."], "Examples": ["SELECT lengthUTF8('\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439, \u043c\u0438\u0440!');"], "Category": ["Strings Functions"], "index": 1110, "vector_txt": "1110:Feature: lengthUTF8(s)\nDescription: lengthUTF8Returns the length of a string in Unicode code points rather than in bytes or characters. It assumes that the string contains valid UTF-8 encoded text. If this assumption is violated, no exception is thrown and the result is undefined.Aliases:CHAR_LENGTHCHARACTER_LENGTHSyntaxlengthUTF8(s)Parameterss \u2014 String containing valid UTF-8 encoded text. String.Returned valueLength of the string s in Unicode code points. UInt64.\nExamples: SELECT lengthUTF8('\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439, \u043c\u0438\u0440!');\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["left"], "Feature": ["left(s, offset)"], "Description": ["left", "Returns a substring of string s with a specified offset starting from the left.", "Syntax", "left(s, offset)", "Parameters", "s \u2014 The string to calculate a substring from. String or FixedString.offset \u2014 The number of bytes of the offset. UInt*.", "Returned value", "For positive offset: A substring of s with offset many bytes, starting from the left of the string.For negative offset: A substring of s with length(s) - |offset| bytes, starting from the left of the string.An empty string if length is 0."], "Examples": ["SELECT left('Hello', 3);", "SELECT left('Hello', -3);"], "Category": ["Strings Functions"], "index": 1111, "vector_txt": "1111:Feature: left(s, offset)\nDescription: leftReturns a substring of string s with a specified offset starting from the left.Syntaxleft(s, offset)Parameterss \u2014 The string to calculate a substring from. String or FixedString.offset \u2014 The number of bytes of the offset. UInt*.Returned valueFor positive offset: A substring of s with offset many bytes, starting from the left of the string.For negative offset: A substring of s with length(s) - |offset| bytes, starting from the left of the string.An empty string if length is 0.\nExamples: SELECT left('Hello', 3);SELECT left('Hello', -3);\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["leftUTF8"], "Feature": ["leftUTF8(s, offset)"], "Description": ["leftUTF8", "Returns a substring of a UTF-8 encoded string s with a specified offset starting from the left.", "Syntax", "leftUTF8(s, offset)", "Parameters", "s \u2014 The UTF-8 encoded string to calculate a substring from. String or FixedString.offset \u2014 The number of bytes of the offset. UInt*.", "Returned value", "For positive offset: A substring of s with offset many bytes, starting from the left of the string.For negative offset: A substring of s with length(s) - |offset| bytes, starting from the left of the string.An empty string if length is 0."], "Examples": ["SELECT leftUTF8('\u041f\u0440\u0438\u0432\u0435\u0442', 4);", "SELECT leftUTF8('\u041f\u0440\u0438\u0432\u0435\u0442', -4);"], "Category": ["Strings Functions"], "index": 1112, "vector_txt": "1112:Feature: leftUTF8(s, offset)\nDescription: leftUTF8Returns a substring of a UTF-8 encoded string s with a specified offset starting from the left.SyntaxleftUTF8(s, offset)Parameterss \u2014 The UTF-8 encoded string to calculate a substring from. String or FixedString.offset \u2014 The number of bytes of the offset. UInt*.Returned valueFor positive offset: A substring of s with offset many bytes, starting from the left of the string.For negative offset: A substring of s with length(s) - |offset| bytes, starting from the left of the string.An empty string if length is 0.\nExamples: SELECT leftUTF8('\u041f\u0440\u0438\u0432\u0435\u0442', 4);SELECT leftUTF8('\u041f\u0440\u0438\u0432\u0435\u0442', -4);\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayReverse"], "Feature": ["arrayReverse(arr)"], "Description": ["arrayReverse", "Returns an array of the same size as the original array containing the elements in reverse order.", "Syntax", "arrayReverse(arr)"], "Examples": ["SELECT arrayReverse([1, 2, 3])"], "Category": ["Arrays Functions"], "index": 1113, "vector_txt": "1113:Feature: arrayReverse(arr)\nDescription: arrayReverseReturns an array of the same size as the original array containing the elements in reverse order.SyntaxarrayReverse(arr)\nExamples: SELECT arrayReverse([1, 2, 3])\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["leftPad"], "Feature": ["leftPad(string, length[, pad_string])"], "Description": ["leftPad", "Pads a string from the left with spaces or with a specified string (multiple times, if needed) until the resulting string reaches the specified length.", "Syntax", "leftPad(string, length[, pad_string])", "Alias: LPAD", "Arguments", "string \u2014 Input string that should be padded. String.length \u2014 The length of the resulting string. UInt or Int. If the value is smaller than the input string length, then the input string is shortened to length characters.pad_string \u2014 The string to pad the input string with. String. Optional. If not specified, then the input string is padded with spaces.", "Returned value", "A left-padded string of the given length. String."], "Examples": ["SELECT leftPad('abc', 7, '*'), leftPad('def', 7);"], "Category": ["Strings Functions"], "index": 1114, "vector_txt": "1114:Feature: leftPad(string, length[, pad_string])\nDescription: leftPadPads a string from the left with spaces or with a specified string (multiple times, if needed) until the resulting string reaches the specified length.SyntaxleftPad(string, length[, pad_string])Alias: LPADArgumentsstring \u2014 Input string that should be padded. String.length \u2014 The length of the resulting string. UInt or Int. If the value is smaller than the input string length, then the input string is shortened to length characters.pad_string \u2014 The string to pad the input string with. String. Optional. If not specified, then the input string is padded with spaces.Returned valueA left-padded string of the given length. String.\nExamples: SELECT leftPad('abc', 7, '*'), leftPad('def', 7);\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["leftPadUTF8"], "Feature": ["leftPadUTF8(string, length[, pad_string])"], "Description": ["leftPadUTF8", "Pads the string from the left with spaces or a specified string (multiple times, if needed) until the resulting string reaches the given length. Unlike leftPad which measures the string length in bytes, the string length is measured in code points.", "Syntax", "leftPadUTF8(string, length[, pad_string])", "Arguments", "string \u2014 Input string that should be padded. String.length \u2014 The length of the resulting string. UInt or Int. If the value is smaller than the input string length, then the input string is shortened to length characters.pad_string \u2014 The string to pad the input string with. String. Optional. If not specified, then the input string is padded with spaces.", "Returned value", "A left-padded string of the given length. String."], "Examples": ["SELECT leftPadUTF8('\u0430\u0431\u0432\u0433', 7, '*'), leftPadUTF8('\u0434\u0435\u0436\u0437', 7);"], "Category": ["Strings Functions"], "index": 1115, "vector_txt": "1115:Feature: leftPadUTF8(string, length[, pad_string])\nDescription: leftPadUTF8Pads the string from the left with spaces or a specified string (multiple times, if needed) until the resulting string reaches the given length. Unlike leftPad which measures the string length in bytes, the string length is measured in code points.SyntaxleftPadUTF8(string, length[, pad_string])Argumentsstring \u2014 Input string that should be padded. String.length \u2014 The length of the resulting string. UInt or Int. If the value is smaller than the input string length, then the input string is shortened to length characters.pad_string \u2014 The string to pad the input string with. String. Optional. If not specified, then the input string is padded with spaces.Returned valueA left-padded string of the given length. String.\nExamples: SELECT leftPadUTF8('\u0430\u0431\u0432\u0433', 7, '*'), leftPadUTF8('\u0434\u0435\u0436\u0437', 7);\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["right"], "Feature": ["right(s, offset)"], "Description": ["right", "Returns a substring of string s with a specified offset starting from the right.", "Syntax", "right(s, offset)", "Parameters", "s \u2014 The string to calculate a substring from. String or FixedString.offset \u2014 The number of bytes of the offset. UInt*.", "Returned value", "For positive offset: A substring of s with offset many bytes, starting from the right of the string.For negative offset: A substring of s with length(s) - |offset| bytes, starting from the right of the string.An empty string if length is 0."], "Examples": ["SELECT right('Hello', 3);", "SELECT right('Hello', -3);"], "Category": ["Strings Functions"], "index": 1116, "vector_txt": "1116:Feature: right(s, offset)\nDescription: rightReturns a substring of string s with a specified offset starting from the right.Syntaxright(s, offset)Parameterss \u2014 The string to calculate a substring from. String or FixedString.offset \u2014 The number of bytes of the offset. UInt*.Returned valueFor positive offset: A substring of s with offset many bytes, starting from the right of the string.For negative offset: A substring of s with length(s) - |offset| bytes, starting from the right of the string.An empty string if length is 0.\nExamples: SELECT right('Hello', 3);SELECT right('Hello', -3);\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["rightUTF8"], "Feature": ["rightUTF8(s, offset)"], "Description": ["rightUTF8", "Returns a substring of UTF-8 encoded string s with a specified offset starting from the right.", "Syntax", "rightUTF8(s, offset)", "Parameters", "s \u2014 The UTF-8 encoded string to calculate a substring from. String or FixedString.offset \u2014 The number of bytes of the offset. UInt*.", "Returned value", "For positive offset: A substring of s with offset many bytes, starting from the right of the string.For negative offset: A substring of s with length(s) - |offset| bytes, starting from the right of the string.An empty string if length is 0."], "Examples": ["SELECT rightUTF8('\u041f\u0440\u0438\u0432\u0435\u0442', 4);", "SELECT rightUTF8('\u041f\u0440\u0438\u0432\u0435\u0442', -4);"], "Category": ["Strings Functions"], "index": 1117, "vector_txt": "1117:Feature: rightUTF8(s, offset)\nDescription: rightUTF8Returns a substring of UTF-8 encoded string s with a specified offset starting from the right.SyntaxrightUTF8(s, offset)Parameterss \u2014 The UTF-8 encoded string to calculate a substring from. String or FixedString.offset \u2014 The number of bytes of the offset. UInt*.Returned valueFor positive offset: A substring of s with offset many bytes, starting from the right of the string.For negative offset: A substring of s with length(s) - |offset| bytes, starting from the right of the string.An empty string if length is 0.\nExamples: SELECT rightUTF8('\u041f\u0440\u0438\u0432\u0435\u0442', 4);SELECT rightUTF8('\u041f\u0440\u0438\u0432\u0435\u0442', -4);\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["rightPad"], "Feature": ["rightPad(string, length[, pad_string])"], "Description": ["rightPad", "Pads a string from the right with spaces or with a specified string (multiple times, if needed) until the resulting string reaches the specified length.", "Syntax", "rightPad(string, length[, pad_string])", "Alias: RPAD", "Arguments", "string \u2014 Input string that should be padded. String.length \u2014 The length of the resulting string. UInt or Int. If the value is smaller than the input string length, then the input string is shortened to length characters.pad_string \u2014 The string to pad the input string with. String. Optional. If not specified, then the input string is padded with spaces.", "Returned value", "A left-padded string of the given length. String."], "Examples": ["SELECT rightPad('abc', 7, '*'), rightPad('abc', 7);"], "Category": ["Strings Functions"], "index": 1118, "vector_txt": "1118:Feature: rightPad(string, length[, pad_string])\nDescription: rightPadPads a string from the right with spaces or with a specified string (multiple times, if needed) until the resulting string reaches the specified length.SyntaxrightPad(string, length[, pad_string])Alias: RPADArgumentsstring \u2014 Input string that should be padded. String.length \u2014 The length of the resulting string. UInt or Int. If the value is smaller than the input string length, then the input string is shortened to length characters.pad_string \u2014 The string to pad the input string with. String. Optional. If not specified, then the input string is padded with spaces.Returned valueA left-padded string of the given length. String.\nExamples: SELECT rightPad('abc', 7, '*'), rightPad('abc', 7);\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["rightPadUTF8"], "Feature": ["rightPadUTF8(string, length[, pad_string])"], "Description": ["rightPadUTF8", "Pads the string from the right with spaces or a specified string (multiple times, if needed) until the resulting string reaches the given length. Unlike rightPad which measures the string length in bytes, the string length is measured in code points.", "Syntax", "rightPadUTF8(string, length[, pad_string])", "Arguments", "string \u2014 Input string that should be padded. String.length \u2014 The length of the resulting string. UInt or Int. If the value is smaller than the input string length, then the input string is shortened to length characters.pad_string \u2014 The string to pad the input string with. String. Optional. If not specified, then the input string is padded with spaces.", "Returned value", "A right-padded string of the given length. String."], "Examples": ["SELECT rightPadUTF8('\u0430\u0431\u0432\u0433', 7, '*'), rightPadUTF8('\u0430\u0431\u0432\u0433', 7);"], "Category": ["Strings Functions"], "index": 1119, "vector_txt": "1119:Feature: rightPadUTF8(string, length[, pad_string])\nDescription: rightPadUTF8Pads the string from the right with spaces or a specified string (multiple times, if needed) until the resulting string reaches the given length. Unlike rightPad which measures the string length in bytes, the string length is measured in code points.SyntaxrightPadUTF8(string, length[, pad_string])Argumentsstring \u2014 Input string that should be padded. String.length \u2014 The length of the resulting string. UInt or Int. If the value is smaller than the input string length, then the input string is shortened to length characters.pad_string \u2014 The string to pad the input string with. String. Optional. If not specified, then the input string is padded with spaces.Returned valueA right-padded string of the given length. String.\nExamples: SELECT rightPadUTF8('\u0430\u0431\u0432\u0433', 7, '*'), rightPadUTF8('\u0430\u0431\u0432\u0433', 7);\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["lower"], "Feature": ["lower(input)"], "Description": ["lower", "Converts the ASCII Latin symbols in a string to lowercase.", "*Syntax**", "lower(input)", "Alias: lcase", "Parameters", "input: A string type String.", "Returned value", "A String data type value."], "Examples": ["SELECT lower('CLICKHOUSE');"], "Category": ["Strings Functions"], "index": 1120, "vector_txt": "1120:Feature: lower(input)\nDescription: lowerConverts the ASCII Latin symbols in a string to lowercase.*Syntax**lower(input)Alias: lcaseParametersinput: A string type String.Returned valueA String data type value.\nExamples: SELECT lower('CLICKHOUSE');\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["upper"], "Feature": ["upper(input)"], "Description": ["upper", "Converts the ASCII Latin symbols in a string to uppercase.", "Syntax", "upper(input)", "Alias: ucase", "Parameters", "input \u2014 A string type String.", "Returned value", "A String data type value."], "Examples": ["SELECT upper('clickhouse');"], "Category": ["Strings Functions"], "index": 1121, "vector_txt": "1121:Feature: upper(input)\nDescription: upperConverts the ASCII Latin symbols in a string to uppercase.Syntaxupper(input)Alias: ucaseParametersinput \u2014 A string type String.Returned valueA String data type value.\nExamples: SELECT upper('clickhouse');\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["lowerUTF8"], "Feature": ["lowerUTF8(input)"], "Description": ["lowerUTF8", "Converts a string to lowercase, assuming that the string contains valid UTF-8 encoded text. If this assumption is violated, no exception is thrown and the result is undefined.", "NoteDoes not detect the language, e.g. for Turkish the result might not be exactly correct (i/\u0130 vs. i/I). If the length of the UTF-8 byte sequence is different for upper and lower case of a code point (such as \u1e9e and \u00df), the result may be incorrect for this code point.", "Syntax", "lowerUTF8(input)", "Parameters", "input \u2014 A string type String.", "Returned value", "A String data type value."], "Examples": ["SELECT lowerUTF8('M\u00dcNCHEN') as Lowerutf8;"], "Category": ["Strings Functions"], "index": 1122, "vector_txt": "1122:Feature: lowerUTF8(input)\nDescription: lowerUTF8Converts a string to lowercase, assuming that the string contains valid UTF-8 encoded text. If this assumption is violated, no exception is thrown and the result is undefined.NoteDoes not detect the language, e.g. for Turkish the result might not be exactly correct (i/\u0130 vs. i/I). If the length of the UTF-8 byte sequence is different for upper and lower case of a code point (such as \u1e9e and \u00df), the result may be incorrect for this code point.SyntaxlowerUTF8(input)Parametersinput \u2014 A string type String.Returned valueA String data type value.\nExamples: SELECT lowerUTF8('M\u00dcNCHEN') as Lowerutf8;\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["upperUTF8"], "Feature": ["upperUTF8(input)"], "Description": ["upperUTF8", "Converts a string to uppercase, assuming that the string contains valid UTF-8 encoded text. If this assumption is violated, no exception is thrown and the result is undefined.", "NoteDoes not detect the language, e.g. for Turkish the result might not be exactly correct (i/\u0130 vs. i/I). If the length of the UTF-8 byte sequence is different for upper and lower case of a code point (such as \u1e9e and \u00df), the result may be incorrect for this code point.", "Syntax", "upperUTF8(input)", "Parameters", "input \u2014 A string type String.", "Returned value", "A String data type value."], "Examples": ["SELECT upperUTF8('M\u00fcnchen') as Upperutf8;"], "Category": ["Strings Functions"], "index": 1123, "vector_txt": "1123:Feature: upperUTF8(input)\nDescription: upperUTF8Converts a string to uppercase, assuming that the string contains valid UTF-8 encoded text. If this assumption is violated, no exception is thrown and the result is undefined.NoteDoes not detect the language, e.g. for Turkish the result might not be exactly correct (i/\u0130 vs. i/I). If the length of the UTF-8 byte sequence is different for upper and lower case of a code point (such as \u1e9e and \u00df), the result may be incorrect for this code point.SyntaxupperUTF8(input)Parametersinput \u2014 A string type String.Returned valueA String data type value.\nExamples: SELECT upperUTF8('M\u00fcnchen') as Upperutf8;\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["reverse(arr)"], "Feature": ["reverse(arr)"], "Description": ["reverse(arr)", "Synonym for \u201carrayReverse\u201d"], "Examples": [], "Category": ["Arrays Functions"], "index": 1124, "vector_txt": "1124:Feature: reverse(arr)\nDescription: reverse(arr)Synonym for \u201carrayReverse\u201d\nExamples: \nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["isValidUTF8"], "Feature": ["isValidUTF8(input)"], "Description": ["isValidUTF8", "Returns 1, if the set of bytes constitutes valid UTF-8-encoded text, otherwise 0.", "Syntax", "isValidUTF8(input)", "Parameters", "input \u2014 A string type String.", "Returned value", "Returns 1, if the set of bytes constitutes valid UTF-8-encoded text, otherwise 0.", "Query:", "SELECT isValidUTF8('\\xc3\\xb1') AS valid, isValidUTF8('\\xc3\\x28') AS invalid;", "Result:", "\u250c\u2500valid\u2500\u252c\u2500invalid\u2500\u2510\u2502     1 \u2502       0 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Examples": ["isValidUTF8(input)", "SELECT isValidUTF8('\\xc3\\xb1') AS valid, isValidUTF8('\\xc3\\x28') AS invalid;"], "Category": ["Strings Functions"], "index": 1125, "vector_txt": "1125:Feature: isValidUTF8(input)\nDescription: isValidUTF8Returns 1, if the set of bytes constitutes valid UTF-8-encoded text, otherwise 0.SyntaxisValidUTF8(input)Parametersinput \u2014 A string type String.Returned valueReturns 1, if the set of bytes constitutes valid UTF-8-encoded text, otherwise 0.Query:SELECT isValidUTF8('\\xc3\\xb1') AS valid, isValidUTF8('\\xc3\\x28') AS invalid;Result:\u250c\u2500valid\u2500\u252c\u2500invalid\u2500\u2510\u2502     1 \u2502       0 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nExamples: isValidUTF8(input)SELECT isValidUTF8('\\xc3\\xb1') AS valid, isValidUTF8('\\xc3\\x28') AS invalid;\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["toValidUTF8"], "Feature": ["toValidUTF8(input_string)"], "Description": ["toValidUTF8", "Replaces invalid UTF-8 characters by the \ufffd (U+FFFD) character. All running in a row invalid characters are collapsed into the one replacement character.", "Syntax", "toValidUTF8(input_string)", "Arguments", "input_string \u2014 Any set of bytes represented as the String data type object.", "Returned value", "A valid UTF-8 string."], "Examples": ["SELECT toValidUTF8('\\x61\\xF0\\x80\\x80\\x80b');"], "Category": ["Strings Functions"], "index": 1126, "vector_txt": "1126:Feature: toValidUTF8(input_string)\nDescription: toValidUTF8Replaces invalid UTF-8 characters by the \ufffd (U+FFFD) character. All running in a row invalid characters are collapsed into the one replacement character.SyntaxtoValidUTF8(input_string)Argumentsinput_string \u2014 Any set of bytes represented as the String data type object.Returned valueA valid UTF-8 string.\nExamples: SELECT toValidUTF8('\\x61\\xF0\\x80\\x80\\x80b');\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["repeat"], "Feature": ["repeat(s, n)"], "Description": ["repeat", "Concatenates a string as many times with itself as specified.", "Syntax", "repeat(s, n)", "Alias: REPEAT", "Arguments", "s \u2014 The string to repeat. String.n \u2014 The number of times to repeat the string. UInt or Int.", "Returned value", "A string containing string s repeated n times. If n <= 0, the function returns the empty string. String."], "Examples": ["SELECT repeat('abc', 10);"], "Category": ["Strings Functions"], "index": 1127, "vector_txt": "1127:Feature: repeat(s, n)\nDescription: repeatConcatenates a string as many times with itself as specified.Syntaxrepeat(s, n)Alias: REPEATArgumentss \u2014 The string to repeat. String.n \u2014 The number of times to repeat the string. UInt or Int.Returned valueA string containing string s repeated n times. If n <= 0, the function returns the empty string. String.\nExamples: SELECT repeat('abc', 10);\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["space"], "Feature": ["space(n)"], "Description": ["space", "Concatenates a space ( ) as many times with itself as specified.", "Syntax", "space(n)", "Alias: SPACE.", "Arguments", "n \u2014 The number of times to repeat the space. UInt or Int.", "Returned value", "The string containing string   repeated n times. If n <= 0, the function returns the empty string. String."], "Examples": ["SELECT space(3);"], "Category": ["Strings Functions"], "index": 1128, "vector_txt": "1128:Feature: space(n)\nDescription: spaceConcatenates a space ( ) as many times with itself as specified.Syntaxspace(n)Alias: SPACE.Argumentsn \u2014 The number of times to repeat the space. UInt or Int.Returned valueThe string containing string   repeated n times. If n <= 0, the function returns the empty string. String.\nExamples: SELECT space(3);\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["reverse"], "Feature": ["reverse"], "Description": ["reverse", "Reverses the sequence of bytes in a string."], "Examples": [], "Category": ["Strings Functions"], "index": 1129, "vector_txt": "1129:Feature: reverse\nDescription: reverseReverses the sequence of bytes in a string.\nExamples: \nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["reverseUTF8"], "Feature": ["reverseUTF8"], "Description": ["reverseUTF8", "Reverses a sequence of Unicode code points in a string. Assumes that the string contains valid UTF-8 encoded text. If this assumption is violated, no exception is thrown and the result is undefined."], "Examples": [], "Category": ["Strings Functions"], "index": 1130, "vector_txt": "1130:Feature: reverseUTF8\nDescription: reverseUTF8Reverses a sequence of Unicode code points in a string. Assumes that the string contains valid UTF-8 encoded text. If this assumption is violated, no exception is thrown and the result is undefined.\nExamples: \nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["concat"], "Feature": ["concat(s1, s2, ...)"], "Description": ["concat", "Concatenates the given arguments.", "Syntax", "concat(s1, s2, ...)", "Arguments", "Values of arbitrary type.", "Arguments which are not of types String or FixedString are converted to strings using their default serialization. As this decreases performance, it is not recommended to use non-String/FixedString arguments.", "Returned values", "The String created by concatenating the arguments.", "If any of arguments is NULL, the function returns NULL."], "Examples": ["SELECT concat('Hello, ', 'World!');", "SELECT concat(42, 144);"], "Category": ["Strings Functions"], "index": 1131, "vector_txt": "1131:Feature: concat(s1, s2, ...)\nDescription: concatConcatenates the given arguments.Syntaxconcat(s1, s2, ...)ArgumentsValues of arbitrary type.Arguments which are not of types String or FixedString are converted to strings using their default serialization. As this decreases performance, it is not recommended to use non-String/FixedString arguments.Returned valuesThe String created by concatenating the arguments.If any of arguments is NULL, the function returns NULL.\nExamples: SELECT concat('Hello, ', 'World!');SELECT concat(42, 144);\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["concatAssumeInjective"], "Feature": ["concatAssumeInjective(s1, s2, ...)"], "Description": ["concatAssumeInjective", "Like concat but assumes that concat(s1, s2, ...) \u2192 sn is injective. Can be used for optimization of GROUP BY.", "A function is called injective if it returns for different arguments different results. In other words: different arguments never produce identical result.", "Syntax", "concatAssumeInjective(s1, s2, ...)", "Arguments", "Values of type String or FixedString.", "Returned values", "The String created by concatenating the arguments.", "If any of argument values is NULL, the function returns NULL."], "Examples": ["CREATE TABLE key_val(`key1` String, `key2` String, `value` UInt32) ENGINE = TinyLog;INSERT INTO key_val VALUES ('Hello, ','World',1), ('Hello, ','World',2), ('Hello, ','World!',3), ('Hello',', World!',2);SELECT * from key_val;", "SELECT concat(key1, key2), sum(value) FROM key_val GROUP BY concatAssumeInjective(key1, key2);"], "Category": ["Strings Functions"], "index": 1132, "vector_txt": "1132:Feature: concatAssumeInjective(s1, s2, ...)\nDescription: concatAssumeInjectiveLike concat but assumes that concat(s1, s2, ...) \u2192 sn is injective. Can be used for optimization of GROUP BY.A function is called injective if it returns for different arguments different results. In other words: different arguments never produce identical result.SyntaxconcatAssumeInjective(s1, s2, ...)ArgumentsValues of type String or FixedString.Returned valuesThe String created by concatenating the arguments.If any of argument values is NULL, the function returns NULL.\nExamples: CREATE TABLE key_val(`key1` String, `key2` String, `value` UInt32) ENGINE = TinyLog;INSERT INTO key_val VALUES ('Hello, ','World',1), ('Hello, ','World',2), ('Hello, ','World!',3), ('Hello',', World!',2);SELECT * from key_val;SELECT concat(key1, key2), sum(value) FROM key_val GROUP BY concatAssumeInjective(key1, key2);\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["concatWithSeparator"], "Feature": ["concatWithSeparator(sep, expr1, expr2, expr3...)"], "Description": ["concatWithSeparator", "Concatenates the given strings with a given separator.", "Syntax", "concatWithSeparator(sep, expr1, expr2, expr3...)", "Alias: concat_ws", "Arguments", "sep \u2014 separator. Const String or FixedString.exprN \u2014 expression to be concatenated. Arguments which are not of types String or FixedString are converted to strings using their default serialization. As this decreases performance, it is not recommended to use non-String/FixedString arguments.", "Returned values", "The String created by concatenating the arguments.", "If any of the argument values is NULL, the function returns NULL."], "Examples": ["SELECT concatWithSeparator('a', '1', '2', '3', '4')"], "Category": ["Strings Functions"], "index": 1133, "vector_txt": "1133:Feature: concatWithSeparator(sep, expr1, expr2, expr3...)\nDescription: concatWithSeparatorConcatenates the given strings with a given separator.SyntaxconcatWithSeparator(sep, expr1, expr2, expr3...)Alias: concat_wsArgumentssep \u2014 separator. Const String or FixedString.exprN \u2014 expression to be concatenated. Arguments which are not of types String or FixedString are converted to strings using their default serialization. As this decreases performance, it is not recommended to use non-String/FixedString arguments.Returned valuesThe String created by concatenating the arguments.If any of the argument values is NULL, the function returns NULL.\nExamples: SELECT concatWithSeparator('a', '1', '2', '3', '4')\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["concatWithSeparatorAssumeInjective"], "Feature": ["concatWithSeparatorAssumeInjective"], "Description": ["concatWithSeparatorAssumeInjective", "Like concatWithSeparator but assumes that concatWithSeparator(sep, expr1, expr2, expr3...) \u2192 result is injective. Can be used for optimization of GROUP BY.", "A function is called injective if it returns for different arguments different results. In other words: different arguments never produce identical result."], "Examples": [], "Category": ["Strings Functions"], "index": 1134, "vector_txt": "1134:Feature: concatWithSeparatorAssumeInjective\nDescription: concatWithSeparatorAssumeInjectiveLike concatWithSeparator but assumes that concatWithSeparator(sep, expr1, expr2, expr3...) \u2192 result is injective. Can be used for optimization of GROUP BY.A function is called injective if it returns for different arguments different results. In other words: different arguments never produce identical result.\nExamples: \nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayFlatten"], "Feature": ["flatten(array_of_arrays)"], "Description": ["arrayFlatten", "Converts an array of arrays to a flat array.", "Function:", "Applies to any depth of nested arrays.Does not change arrays that are already flat.", "The flattened array contains all the elements from all source arrays.", "Syntax", "flatten(array_of_arrays)", "Alias: flatten.", "Parameters", "array_of_arrays \u2014 Array of arrays. For example, [[1,2,3], [4,5]]."], "Examples": ["SELECT flatten([[[1]], [[2], [3]]]);"], "Category": ["Arrays Functions"], "index": 1135, "vector_txt": "1135:Feature: flatten(array_of_arrays)\nDescription: arrayFlattenConverts an array of arrays to a flat array.Function:Applies to any depth of nested arrays.Does not change arrays that are already flat.The flattened array contains all the elements from all source arrays.Syntaxflatten(array_of_arrays)Alias: flatten.Parametersarray_of_arrays \u2014 Array of arrays. For example, [[1,2,3], [4,5]].\nExamples: SELECT flatten([[[1]], [[2], [3]]]);\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["substring"], "Feature": ["substring(s, offset[, length])"], "Description": ["substring", "Returns the substring of a string s which starts at the specified byte index offset. Byte counting starts from 1. If offset is 0, an empty string is returned. If offset is negative, the substring starts pos characters from the end of the string, rather than from the beginning. An optional argument length specifies the maximum number of bytes the returned substring may have.", "Syntax", "substring(s, offset[, length])", "Aliases:", "substrmidbyteSlice", "Arguments", "s \u2014 The string to calculate a substring from. String, FixedString or Enumoffset \u2014 The starting position of the substring in s . (U)Int*.length \u2014 The maximum length of the substring. (U)Int*. Optional.", "Returned value", "A substring of s with length many bytes, starting at index offset. String."], "Examples": ["SELECT 'database' AS db, substr(db, 5), substr(db, 5, 1)"], "Category": ["Strings Functions"], "index": 1136, "vector_txt": "1136:Feature: substring(s, offset[, length])\nDescription: substringReturns the substring of a string s which starts at the specified byte index offset. Byte counting starts from 1. If offset is 0, an empty string is returned. If offset is negative, the substring starts pos characters from the end of the string, rather than from the beginning. An optional argument length specifies the maximum number of bytes the returned substring may have.Syntaxsubstring(s, offset[, length])Aliases:substrmidbyteSliceArgumentss \u2014 The string to calculate a substring from. String, FixedString or Enumoffset \u2014 The starting position of the substring in s . (U)Int*.length \u2014 The maximum length of the substring. (U)Int*. Optional.Returned valueA substring of s with length many bytes, starting at index offset. String.\nExamples: SELECT 'database' AS db, substr(db, 5), substr(db, 5, 1)\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["substringUTF8"], "Feature": ["substringUTF8(s, offset[, length])"], "Description": ["substringUTF8", "Returns the substring of a string s which starts at the specified byte index offset for Unicode code points. Byte counting starts from 1. If offset is 0, an empty string is returned. If offset is negative, the substring starts pos characters from the end of the string, rather than from the beginning. An optional argument length specifies the maximum number of bytes the returned substring may have.", "Assumes that the string contains valid UTF-8 encoded text. If this assumption is violated, no exception is thrown and the result is undefined.", "Syntax", "substringUTF8(s, offset[, length])", "Arguments", "s \u2014 The string to calculate a substring from. String, FixedString or Enumoffset \u2014 The starting position of the substring in s . (U)Int*.length \u2014 The maximum length of the substring. (U)Int*. Optional.", "Returned value", "A substring of s with length many bytes, starting at index offset.", "Implementation details", "Assumes that the string contains valid UTF-8 encoded text. If this assumption is violated, no exception is thrown and the result is undefined."], "Examples": ["SELECT 'T\u00e4glich gr\u00fc\u00dft das Murmeltier.' AS str,       substringUTF8(str, 9),       substringUTF8(str, 9, 5)"], "Category": ["Strings Functions"], "index": 1137, "vector_txt": "1137:Feature: substringUTF8(s, offset[, length])\nDescription: substringUTF8Returns the substring of a string s which starts at the specified byte index offset for Unicode code points. Byte counting starts from 1. If offset is 0, an empty string is returned. If offset is negative, the substring starts pos characters from the end of the string, rather than from the beginning. An optional argument length specifies the maximum number of bytes the returned substring may have.Assumes that the string contains valid UTF-8 encoded text. If this assumption is violated, no exception is thrown and the result is undefined.SyntaxsubstringUTF8(s, offset[, length])Argumentss \u2014 The string to calculate a substring from. String, FixedString or Enumoffset \u2014 The starting position of the substring in s . (U)Int*.length \u2014 The maximum length of the substring. (U)Int*. Optional.Returned valueA substring of s with length many bytes, starting at index offset.Implementation detailsAssumes that the string contains valid UTF-8 encoded text. If this assumption is violated, no exception is thrown and the result is undefined.\nExamples: SELECT 'T\u00e4glich gr\u00fc\u00dft das Murmeltier.' AS str,       substringUTF8(str, 9),       substringUTF8(str, 9, 5)\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["substringIndex"], "Feature": ["substringIndex(s, delim, count)"], "Description": ["substringIndex", "Returns the substring of s before count occurrences of the delimiter delim, as in Spark or MySQL.", "Syntax", "substringIndex(s, delim, count)", "Alias: SUBSTRING_INDEX", "Arguments", "s \u2014 The string to extract substring from. String.delim \u2014 The character to split. String.count \u2014 The number of occurrences of the delimiter to count before extracting the substring. If count is positive, everything to the left of the final delimiter (counting from the left) is returned. If count is negative, everything to the right of the final delimiter (counting from the right) is returned. UInt or Int"], "Examples": ["SELECT substringIndex('www.clickhouse.com', '.', 2)"], "Category": ["Strings Functions"], "index": 1138, "vector_txt": "1138:Feature: substringIndex(s, delim, count)\nDescription: substringIndexReturns the substring of s before count occurrences of the delimiter delim, as in Spark or MySQL.SyntaxsubstringIndex(s, delim, count)Alias: SUBSTRING_INDEXArgumentss \u2014 The string to extract substring from. String.delim \u2014 The character to split. String.count \u2014 The number of occurrences of the delimiter to count before extracting the substring. If count is positive, everything to the left of the final delimiter (counting from the left) is returned. If count is negative, everything to the right of the final delimiter (counting from the right) is returned. UInt or Int\nExamples: SELECT substringIndex('www.clickhouse.com', '.', 2)\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["substringIndexUTF8"], "Feature": ["substringIndexUTF8(s, delim, count)"], "Description": ["substringIndexUTF8", "Returns the substring of s before count occurrences of the delimiter delim, specifically for Unicode code points.", "Assumes that the string contains valid UTF-8 encoded text. If this assumption is violated, no exception is thrown and the result is undefined.", "Syntax", "substringIndexUTF8(s, delim, count)", "Arguments", "s \u2014 The string to extract substring from. String.delim \u2014 The character to split. String.count \u2014 The number of occurrences of the delimiter to count before extracting the substring. If count is positive, everything to the left of the final delimiter (counting from the left) is returned. If count is negative, everything to the right of the final delimiter (counting from the right) is returned. UInt or Int", "Returned value", "A substring String of s before count occurrences of delim.", "Implementation details", "Assumes that the string contains valid UTF-8 encoded text. If this assumption is violated, no exception is thrown and the result is undefined."], "Examples": ["SELECT substringIndexUTF8('www.stra\u00dfen-in-europa.de', '.', 2)"], "Category": ["Strings Functions"], "index": 1139, "vector_txt": "1139:Feature: substringIndexUTF8(s, delim, count)\nDescription: substringIndexUTF8Returns the substring of s before count occurrences of the delimiter delim, specifically for Unicode code points.Assumes that the string contains valid UTF-8 encoded text. If this assumption is violated, no exception is thrown and the result is undefined.SyntaxsubstringIndexUTF8(s, delim, count)Argumentss \u2014 The string to extract substring from. String.delim \u2014 The character to split. String.count \u2014 The number of occurrences of the delimiter to count before extracting the substring. If count is positive, everything to the left of the final delimiter (counting from the left) is returned. If count is negative, everything to the right of the final delimiter (counting from the right) is returned. UInt or IntReturned valueA substring String of s before count occurrences of delim.Implementation detailsAssumes that the string contains valid UTF-8 encoded text. If this assumption is violated, no exception is thrown and the result is undefined.\nExamples: SELECT substringIndexUTF8('www.stra\u00dfen-in-europa.de', '.', 2)\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["appendTrailingCharIfAbsent"], "Feature": ["appendTrailingCharIfAbsent(s, c)"], "Description": ["appendTrailingCharIfAbsent", "Appends character c to string s if s is non-empty and does not end with character c.", "Syntax", "appendTrailingCharIfAbsent(s, c)"], "Examples": ["appendTrailingCharIfAbsent(s, c)"], "Category": ["Strings Functions"], "index": 1140, "vector_txt": "1140:Feature: appendTrailingCharIfAbsent(s, c)\nDescription: appendTrailingCharIfAbsentAppends character c to string s if s is non-empty and does not end with character c.SyntaxappendTrailingCharIfAbsent(s, c)\nExamples: appendTrailingCharIfAbsent(s, c)\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["convertCharset"], "Feature": ["convertCharset(s, from, to)"], "Description": ["convertCharset", "Returns string s converted from the encoding from to encoding to.", "Syntax", "convertCharset(s, from, to)"], "Examples": ["convertCharset(s, from, to)"], "Category": ["Strings Functions"], "index": 1141, "vector_txt": "1141:Feature: convertCharset(s, from, to)\nDescription: convertCharsetReturns string s converted from the encoding from to encoding to.SyntaxconvertCharset(s, from, to)\nExamples: convertCharset(s, from, to)\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["base58Encode"], "Feature": ["base58Encode(plaintext)"], "Description": ["base58Encode", "Encodes a String using Base58 in the \"Bitcoin\" alphabet.", "Syntax", "base58Encode(plaintext)", "Arguments", "plaintext \u2014 String column or constant.", "Returned value", "A string containing the encoded value of the argument. String."], "Examples": ["SELECT base58Encode('Encoded');"], "Category": ["Strings Functions"], "index": 1142, "vector_txt": "1142:Feature: base58Encode(plaintext)\nDescription: base58EncodeEncodes a String using Base58 in the \"Bitcoin\" alphabet.Syntaxbase58Encode(plaintext)Argumentsplaintext \u2014 String column or constant.Returned valueA string containing the encoded value of the argument. String.\nExamples: SELECT base58Encode('Encoded');\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["base58Decode"], "Feature": ["base58Decode(encoded)"], "Description": ["base58Decode", "Accepts a String and decodes it using Base58 encoding scheme using \"Bitcoin\" alphabet.", "Syntax", "base58Decode(encoded)", "Arguments", "encoded \u2014 String column or constant. If the string is not a valid Base58-encoded value, an exception is thrown.", "Returned value", "A string containing the decoded value of the argument. String."], "Examples": ["SELECT base58Decode('3dc8KtHrwM');"], "Category": ["Strings Functions"], "index": 1143, "vector_txt": "1143:Feature: base58Decode(encoded)\nDescription: base58DecodeAccepts a String and decodes it using Base58 encoding scheme using \"Bitcoin\" alphabet.Syntaxbase58Decode(encoded)Argumentsencoded \u2014 String column or constant. If the string is not a valid Base58-encoded value, an exception is thrown.Returned valueA string containing the decoded value of the argument. String.\nExamples: SELECT base58Decode('3dc8KtHrwM');\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["tryBase58Decode"], "Feature": ["tryBase58Decode(encoded)"], "Description": ["tryBase58Decode", "Like base58Decode but returns an empty string in case of error.", "Syntax", "tryBase58Decode(encoded)", "Parameters", "encoded: String column or constant. If the string is not a valid Base58-encoded value, returns an empty string in case of error.", "Returned value", "A string containing the decoded value of the argument."], "Examples": ["SELECT tryBase58Decode('3dc8KtHrwM') as res, tryBase58Decode('invalid') as res_invalid;"], "Category": ["Strings Functions"], "index": 1144, "vector_txt": "1144:Feature: tryBase58Decode(encoded)\nDescription: tryBase58DecodeLike base58Decode but returns an empty string in case of error.SyntaxtryBase58Decode(encoded)Parametersencoded: String column or constant. If the string is not a valid Base58-encoded value, returns an empty string in case of error.Returned valueA string containing the decoded value of the argument.\nExamples: SELECT tryBase58Decode('3dc8KtHrwM') as res, tryBase58Decode('invalid') as res_invalid;\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["base64Encode"], "Feature": ["base64Encode(plaintext)"], "Description": ["base64Encode", "Encodes a String or FixedString as base64, according to RFC 4648.", "Alias: TO_BASE64.", "Syntax", "base64Encode(plaintext)", "Arguments", "plaintext \u2014 String column or constant.", "Returned value", "A string containing the encoded value of the argument."], "Examples": ["SELECT base64Encode('clickhouse');"], "Category": ["Strings Functions"], "index": 1145, "vector_txt": "1145:Feature: base64Encode(plaintext)\nDescription: base64EncodeEncodes a String or FixedString as base64, according to RFC 4648.Alias: TO_BASE64.Syntaxbase64Encode(plaintext)Argumentsplaintext \u2014 String column or constant.Returned valueA string containing the encoded value of the argument.\nExamples: SELECT base64Encode('clickhouse');\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayCompact"], "Feature": ["arrayCompact(arr)"], "Description": ["arrayCompact", "Removes consecutive duplicate elements from an array. The order of result values is determined by the order in the source array.", "Syntax", "arrayCompact(arr)", "Arguments", "arr \u2014 The array to inspect.", "Returned value", "The array without duplicate. Array."], "Examples": ["SELECT arrayCompact([1, 1, nan, nan, 2, 3, 3, 3]);"], "Category": ["Arrays Functions"], "index": 1146, "vector_txt": "1146:Feature: arrayCompact(arr)\nDescription: arrayCompactRemoves consecutive duplicate elements from an array. The order of result values is determined by the order in the source array.SyntaxarrayCompact(arr)Argumentsarr \u2014 The array to inspect.Returned valueThe array without duplicate. Array.\nExamples: SELECT arrayCompact([1, 1, nan, nan, 2, 3, 3, 3]);\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["base64URLEncode"], "Feature": ["base64URLEncode(url)"], "Description": ["base64URLEncode", "Encodes an URL (String or FixedString) as base64 with URL-specific modifications, according to RFC 4648.", "Syntax", "base64URLEncode(url)", "Arguments", "url \u2014 String column or constant.", "Returned value", "A string containing the encoded value of the argument."], "Examples": ["SELECT base64URLEncode('https://clickhouse.com');"], "Category": ["Strings Functions"], "index": 1147, "vector_txt": "1147:Feature: base64URLEncode(url)\nDescription: base64URLEncodeEncodes an URL (String or FixedString) as base64 with URL-specific modifications, according to RFC 4648.Syntaxbase64URLEncode(url)Argumentsurl \u2014 String column or constant.Returned valueA string containing the encoded value of the argument.\nExamples: SELECT base64URLEncode('https://clickhouse.com');\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["base64Decode"], "Feature": ["base64Decode(encoded)"], "Description": ["base64Decode", "Accepts a String and decodes it from base64, according to RFC 4648. Throws an exception in case of an error.", "Alias: FROM_BASE64.", "Syntax", "base64Decode(encoded)", "Arguments", "encoded \u2014 String column or constant. If the string is not a valid Base64-encoded value, an exception is thrown.", "Returned value", "A string containing the decoded value of the argument."], "Examples": ["SELECT base64Decode('Y2xpY2tob3VzZQ==');"], "Category": ["Strings Functions"], "index": 1148, "vector_txt": "1148:Feature: base64Decode(encoded)\nDescription: base64DecodeAccepts a String and decodes it from base64, according to RFC 4648. Throws an exception in case of an error.Alias: FROM_BASE64.Syntaxbase64Decode(encoded)Argumentsencoded \u2014 String column or constant. If the string is not a valid Base64-encoded value, an exception is thrown.Returned valueA string containing the decoded value of the argument.\nExamples: SELECT base64Decode('Y2xpY2tob3VzZQ==');\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["base64URLDecode"], "Feature": ["base64URLDecode(encodedUrl)"], "Description": ["base64URLDecode", "Accepts a base64-encoded URL and decodes it from base64 with URL-specific modifications, according to RFC 4648. Throws an exception in case of an error.", "Syntax", "base64URLDecode(encodedUrl)", "Arguments", "encodedURL \u2014 String column or constant. If the string is not a valid Base64-encoded value with URL-specific modifications, an exception is thrown.", "Returned value", "A string containing the decoded value of the argument."], "Examples": ["SELECT base64URLDecode('aHR0cDovL2NsaWNraG91c2UuY29t');"], "Category": ["Strings Functions"], "index": 1149, "vector_txt": "1149:Feature: base64URLDecode(encodedUrl)\nDescription: base64URLDecodeAccepts a base64-encoded URL and decodes it from base64 with URL-specific modifications, according to RFC 4648. Throws an exception in case of an error.Syntaxbase64URLDecode(encodedUrl)ArgumentsencodedURL \u2014 String column or constant. If the string is not a valid Base64-encoded value with URL-specific modifications, an exception is thrown.Returned valueA string containing the decoded value of the argument.\nExamples: SELECT base64URLDecode('aHR0cDovL2NsaWNraG91c2UuY29t');\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["tryBase64Decode"], "Feature": ["tryBase64Decode(encoded)"], "Description": ["tryBase64Decode", "Like base64Decode but returns an empty string in case of error.", "Syntax", "tryBase64Decode(encoded)", "Arguments", "encoded \u2014 String column or constant. If the string is not a valid Base64-encoded value, returns an empty string.", "Returned value", "A string containing the decoded value of the argument."], "Examples": ["SELECT tryBase64Decode('RW5jb2RlZA==') as res, tryBase64Decode('invalid') as res_invalid;"], "Category": ["Strings Functions"], "index": 1150, "vector_txt": "1150:Feature: tryBase64Decode(encoded)\nDescription: tryBase64DecodeLike base64Decode but returns an empty string in case of error.SyntaxtryBase64Decode(encoded)Argumentsencoded \u2014 String column or constant. If the string is not a valid Base64-encoded value, returns an empty string.Returned valueA string containing the decoded value of the argument.\nExamples: SELECT tryBase64Decode('RW5jb2RlZA==') as res, tryBase64Decode('invalid') as res_invalid;\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["tryBase64URLDecode"], "Feature": ["tryBase64URLDecode(encodedUrl)"], "Description": ["tryBase64URLDecode", "Like base64URLDecode but returns an empty string in case of error.", "Syntax", "tryBase64URLDecode(encodedUrl)", "Parameters", "encodedURL \u2014 String column or constant. If the string is not a valid Base64-encoded value with URL-specific modifications, returns an empty string.", "Returned value", "A string containing the decoded value of the argument."], "Examples": ["SELECT tryBase64URLDecode('aHR0cDovL2NsaWNraG91c2UuY29t') as res, tryBase64Decode('aHR0cHM6Ly9jbGlja') as res_invalid;"], "Category": ["Strings Functions"], "index": 1151, "vector_txt": "1151:Feature: tryBase64URLDecode(encodedUrl)\nDescription: tryBase64URLDecodeLike base64URLDecode but returns an empty string in case of error.SyntaxtryBase64URLDecode(encodedUrl)ParametersencodedURL \u2014 String column or constant. If the string is not a valid Base64-encoded value with URL-specific modifications, returns an empty string.Returned valueA string containing the decoded value of the argument.\nExamples: SELECT tryBase64URLDecode('aHR0cDovL2NsaWNraG91c2UuY29t') as res, tryBase64Decode('aHR0cHM6Ly9jbGlja') as res_invalid;\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["endsWith"], "Feature": ["endsWith(str, suffix)"], "Description": ["endsWith", "Returns whether string str ends with suffix.", "Syntax", "endsWith(str, suffix)"], "Examples": ["endsWith(str, suffix)"], "Category": ["Strings Functions"], "index": 1152, "vector_txt": "1152:Feature: endsWith(str, suffix)\nDescription: endsWithReturns whether string str ends with suffix.SyntaxendsWith(str, suffix)\nExamples: endsWith(str, suffix)\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["endsWithUTF8"], "Feature": ["endsWithUTF8(str, suffix)"], "Description": ["endsWithUTF8", "Returns whether string str ends with suffix, the difference between endsWithUTF8 and endsWith is that endsWithUTF8 match str and suffix by UTF-8 characters.", "Syntax", "endsWithUTF8(str, suffix)"], "Examples": ["SELECT endsWithUTF8('\u4e2d\u56fd', '\\xbd'), endsWith('\u4e2d\u56fd', '\\xbd')"], "Category": ["Strings Functions"], "index": 1153, "vector_txt": "1153:Feature: endsWithUTF8(str, suffix)\nDescription: endsWithUTF8Returns whether string str ends with suffix, the difference between endsWithUTF8 and endsWith is that endsWithUTF8 match str and suffix by UTF-8 characters.SyntaxendsWithUTF8(str, suffix)\nExamples: SELECT endsWithUTF8('\u4e2d\u56fd', '\\xbd'), endsWith('\u4e2d\u56fd', '\\xbd')\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["startsWith"], "Feature": ["startsWith(str, prefix)"], "Description": ["startsWith", "Returns whether string str starts with prefix.", "Syntax", "startsWith(str, prefix)"], "Examples": ["SELECT startsWith('Spider-Man', 'Spi');"], "Category": ["Strings Functions"], "index": 1154, "vector_txt": "1154:Feature: startsWith(str, prefix)\nDescription: startsWithReturns whether string str starts with prefix.SyntaxstartsWith(str, prefix)\nExamples: SELECT startsWith('Spider-Man', 'Spi');\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["startsWithUTF8"], "Feature": ["startsWithUTF8"], "Description": ["startsWithUTF8", "Available in version 23.8 and later", "Returns whether string str starts with prefix, the difference between startsWithUTF8 and startsWith is that startsWithUTF8 match str and suffix by UTF-8 characters."], "Examples": ["SELECT startsWithUTF8('\u4e2d\u56fd', '\\xe4'), startsWith('\u4e2d\u56fd', '\\xe4')"], "Category": ["Strings Functions"], "index": 1155, "vector_txt": "1155:Feature: startsWithUTF8\nDescription: startsWithUTF8Available in version 23.8 and laterReturns whether string str starts with prefix, the difference between startsWithUTF8 and startsWith is that startsWithUTF8 match str and suffix by UTF-8 characters.\nExamples: SELECT startsWithUTF8('\u4e2d\u56fd', '\\xe4'), startsWith('\u4e2d\u56fd', '\\xe4')\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["trim"], "Feature": ["trim([[LEADING|TRAILING|BOTH] trim_character FROM] input_string)"], "Description": ["trim", "Removes the specified characters from the start or end of a string. If not specified otherwise, the function removes whitespace (ASCII-character 32).", "Syntax", "trim([[LEADING|TRAILING|BOTH] trim_character FROM] input_string)", "Arguments", "trim_character \u2014 Specified characters for trim. String.input_string \u2014 String for trim. String.", "Returned value", "A string without leading and/or trailing specified characters. String."], "Examples": ["SELECT trim(BOTH ' ()' FROM '(   Hello, world!   )');"], "Category": ["Strings Functions"], "index": 1156, "vector_txt": "1156:Feature: trim([[LEADING|TRAILING|BOTH] trim_character FROM] input_string)\nDescription: trimRemoves the specified characters from the start or end of a string. If not specified otherwise, the function removes whitespace (ASCII-character 32).Syntaxtrim([[LEADING|TRAILING|BOTH] trim_character FROM] input_string)Argumentstrim_character \u2014 Specified characters for trim. String.input_string \u2014 String for trim. String.Returned valueA string without leading and/or trailing specified characters. String.\nExamples: SELECT trim(BOTH ' ()' FROM '(   Hello, world!   )');\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayZip"], "Feature": ["arrayZip(arr1, arr2, ..., arrN)"], "Description": ["arrayZip", "Combines multiple arrays into a single array. The resulting array contains the corresponding elements of the source arrays grouped into tuples in the listed order of arguments.", "Syntax", "arrayZip(arr1, arr2, ..., arrN)", "Arguments", "arrN \u2014 Array.", "The function can take any number of arrays of different types. All the input arrays must be of equal size.", "Returned value", "Array with elements from the source arrays grouped into tuples. Data types in the tuple are the same as types of the input arrays and in the same order as arrays are passed. Array."], "Examples": ["SELECT arrayZip(['a', 'b', 'c'], [5, 2, 1]);"], "Category": ["Arrays Functions"], "index": 1157, "vector_txt": "1157:Feature: arrayZip(arr1, arr2, ..., arrN)\nDescription: arrayZipCombines multiple arrays into a single array. The resulting array contains the corresponding elements of the source arrays grouped into tuples in the listed order of arguments.SyntaxarrayZip(arr1, arr2, ..., arrN)ArgumentsarrN \u2014 Array.The function can take any number of arrays of different types. All the input arrays must be of equal size.Returned valueArray with elements from the source arrays grouped into tuples. Data types in the tuple are the same as types of the input arrays and in the same order as arrays are passed. Array.\nExamples: SELECT arrayZip(['a', 'b', 'c'], [5, 2, 1]);\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["trimLeft"], "Feature": ["trimLeft(input_string)"], "Description": ["trimLeft", "Removes the consecutive occurrences of whitespace (ASCII-character 32) from the start of a string.", "Syntax", "trimLeft(input_string)", "Alias: ltrim(input_string).", "Arguments", "input_string \u2014 string to trim. String.", "Returned value", "A string without leading common whitespaces. String."], "Examples": ["SELECT trimLeft('     Hello, world!     ');"], "Category": ["Strings Functions"], "index": 1158, "vector_txt": "1158:Feature: trimLeft(input_string)\nDescription: trimLeftRemoves the consecutive occurrences of whitespace (ASCII-character 32) from the start of a string.SyntaxtrimLeft(input_string)Alias: ltrim(input_string).Argumentsinput_string \u2014 string to trim. String.Returned valueA string without leading common whitespaces. String.\nExamples: SELECT trimLeft('     Hello, world!     ');\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["trimRight"], "Feature": ["trimRight(input_string)"], "Description": ["trimRight", "Removes the consecutive occurrences of whitespace (ASCII-character 32) from the end of a string.", "Syntax", "trimRight(input_string)", "Alias: rtrim(input_string).", "Arguments", "input_string \u2014 string to trim. String.", "Returned value", "A string without trailing common whitespaces. String."], "Examples": ["SELECT trimRight('     Hello, world!     ');"], "Category": ["Strings Functions"], "index": 1159, "vector_txt": "1159:Feature: trimRight(input_string)\nDescription: trimRightRemoves the consecutive occurrences of whitespace (ASCII-character 32) from the end of a string.SyntaxtrimRight(input_string)Alias: rtrim(input_string).Argumentsinput_string \u2014 string to trim. String.Returned valueA string without trailing common whitespaces. String.\nExamples: SELECT trimRight('     Hello, world!     ');\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["trimBoth"], "Feature": ["trimBoth(input_string)"], "Description": ["trimBoth", "Removes the consecutive occurrences of whitespace (ASCII-character 32) from both ends of a string.", "Syntax", "trimBoth(input_string)", "Alias: trim(input_string).", "Arguments", "input_string \u2014 string to trim. String.", "Returned value", "A string without leading and trailing common whitespaces. String."], "Examples": ["SELECT trimBoth('     Hello, world!     ');"], "Category": ["Strings Functions"], "index": 1160, "vector_txt": "1160:Feature: trimBoth(input_string)\nDescription: trimBothRemoves the consecutive occurrences of whitespace (ASCII-character 32) from both ends of a string.SyntaxtrimBoth(input_string)Alias: trim(input_string).Argumentsinput_string \u2014 string to trim. String.Returned valueA string without leading and trailing common whitespaces. String.\nExamples: SELECT trimBoth('     Hello, world!     ');\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["CRC32"], "Feature": ["CRC32"], "Description": ["CRC32", "Returns the CRC32 checksum of a string using CRC-32-IEEE 802.3 polynomial and initial value 0xffffffff (zlib implementation).", "The result type is UInt32."], "Examples": [], "Category": ["Strings Functions"], "index": 1161, "vector_txt": "1161:Feature: CRC32\nDescription: CRC32Returns the CRC32 checksum of a string using CRC-32-IEEE 802.3 polynomial and initial value 0xffffffff (zlib implementation).The result type is UInt32.\nExamples: \nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["CRC32IEEE"], "Feature": ["CRC32IEEE"], "Description": ["CRC32IEEE", "Returns the CRC32 checksum of a string, using CRC-32-IEEE 802.3 polynomial.", "The result type is UInt32."], "Examples": [], "Category": ["Strings Functions"], "index": 1162, "vector_txt": "1162:Feature: CRC32IEEE\nDescription: CRC32IEEEReturns the CRC32 checksum of a string, using CRC-32-IEEE 802.3 polynomial.The result type is UInt32.\nExamples: \nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["CRC64"], "Feature": ["CRC64"], "Description": ["CRC64", "Returns the CRC64 checksum of a string, using CRC-64-ECMA polynomial.", "The result type is UInt64."], "Examples": [], "Category": ["Strings Functions"], "index": 1163, "vector_txt": "1163:Feature: CRC64\nDescription: CRC64Returns the CRC64 checksum of a string, using CRC-64-ECMA polynomial.The result type is UInt64.\nExamples: \nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["normalizeQuery"], "Feature": ["normalizeQuery(x)"], "Description": ["normalizeQuery", "Replaces literals, sequences of literals and complex aliases (containing whitespace, more than two digits or at least 36 bytes long such as UUIDs) with placeholder ?.", "Syntax", "normalizeQuery(x)", "Arguments", "x \u2014 Sequence of characters. String.", "Returned value", "Sequence of characters with placeholders. String."], "Examples": ["SELECT normalizeQuery('[1, 2, 3, x]') AS query;"], "Category": ["Strings Functions"], "index": 1164, "vector_txt": "1164:Feature: normalizeQuery(x)\nDescription: normalizeQueryReplaces literals, sequences of literals and complex aliases (containing whitespace, more than two digits or at least 36 bytes long such as UUIDs) with placeholder ?.SyntaxnormalizeQuery(x)Argumentsx \u2014 Sequence of characters. String.Returned valueSequence of characters with placeholders. String.\nExamples: SELECT normalizeQuery('[1, 2, 3, x]') AS query;\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["normalizeQueryKeepNames"], "Feature": ["normalizeQueryKeepNames(x)"], "Description": ["normalizeQueryKeepNames", "Replaces literals, sequences of literals with placeholder ? but does not replace complex aliases (containing whitespace, more than two digits\nor at least 36 bytes long such as UUIDs). This helps better analyze complex query logs.", "Syntax", "normalizeQueryKeepNames(x)", "Arguments", "x \u2014 Sequence of characters. String.", "Returned value", "Sequence of characters with placeholders. String."], "Examples": ["SELECT normalizeQuery('SELECT 1 AS aComplexName123'), normalizeQueryKeepNames('SELECT 1 AS aComplexName123');"], "Category": ["Strings Functions"], "index": 1165, "vector_txt": "1165:Feature: normalizeQueryKeepNames(x)\nDescription: normalizeQueryKeepNamesReplaces literals, sequences of literals with placeholder ? but does not replace complex aliases (containing whitespace, more than two digits\nor at least 36 bytes long such as UUIDs). This helps better analyze complex query logs.SyntaxnormalizeQueryKeepNames(x)Argumentsx \u2014 Sequence of characters. String.Returned valueSequence of characters with placeholders. String.\nExamples: SELECT normalizeQuery('SELECT 1 AS aComplexName123'), normalizeQueryKeepNames('SELECT 1 AS aComplexName123');\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["normalizedQueryHash"], "Feature": ["normalizedQueryHash(x)"], "Description": ["normalizedQueryHash", "Returns identical 64bit hash values without the values of literals for similar queries. Can be helpful to analyze query logs.", "Syntax", "normalizedQueryHash(x)", "Arguments", "x \u2014 Sequence of characters. String.", "Returned value", "Hash value. UInt64."], "Examples": ["SELECT normalizedQueryHash('SELECT 1 AS `xyz`') != normalizedQueryHash('SELECT 1 AS `abc`') AS res;"], "Category": ["Strings Functions"], "index": 1166, "vector_txt": "1166:Feature: normalizedQueryHash(x)\nDescription: normalizedQueryHashReturns identical 64bit hash values without the values of literals for similar queries. Can be helpful to analyze query logs.SyntaxnormalizedQueryHash(x)Argumentsx \u2014 Sequence of characters. String.Returned valueHash value. UInt64.\nExamples: SELECT normalizedQueryHash('SELECT 1 AS `xyz`') != normalizedQueryHash('SELECT 1 AS `abc`') AS res;\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["normalizedQueryHashKeepNames"], "Feature": ["normalizedQueryHashKeepNames(x)"], "Description": ["normalizedQueryHashKeepNames", "Like normalizedQueryHash it returns identical 64bit hash values without the values of literals for similar queries but it does not replace complex aliases (containing whitespace, more than two digits\nor at least 36 bytes long such as UUIDs) with a placeholder before hashing. Can be helpful to analyze query logs.", "Syntax", "normalizedQueryHashKeepNames(x)", "Arguments", "x \u2014 Sequence of characters. String.", "Returned value", "Hash value. UInt64."], "Examples": ["SELECT normalizedQueryHash('SELECT 1 AS `xyz123`') != normalizedQueryHash('SELECT 1 AS `abc123`') AS normalizedQueryHash;SELECT normalizedQueryHashKeepNames('SELECT 1 AS `xyz123`') != normalizedQueryHashKeepNames('SELECT 1 AS `abc123`') AS normalizedQueryHashKeepNames;"], "Category": ["Strings Functions"], "index": 1167, "vector_txt": "1167:Feature: normalizedQueryHashKeepNames(x)\nDescription: normalizedQueryHashKeepNamesLike normalizedQueryHash it returns identical 64bit hash values without the values of literals for similar queries but it does not replace complex aliases (containing whitespace, more than two digits\nor at least 36 bytes long such as UUIDs) with a placeholder before hashing. Can be helpful to analyze query logs.SyntaxnormalizedQueryHashKeepNames(x)Argumentsx \u2014 Sequence of characters. String.Returned valueHash value. UInt64.\nExamples: SELECT normalizedQueryHash('SELECT 1 AS `xyz123`') != normalizedQueryHash('SELECT 1 AS `abc123`') AS normalizedQueryHash;SELECT normalizedQueryHashKeepNames('SELECT 1 AS `xyz123`') != normalizedQueryHashKeepNames('SELECT 1 AS `abc123`') AS normalizedQueryHashKeepNames;\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayZipUnaligned"], "Feature": ["arrayZipUnaligned(arr1, arr2, ..., arrN)"], "Description": ["arrayZipUnaligned", "Combines multiple arrays into a single array, allowing for unaligned arrays. The resulting array contains the corresponding elements of the source arrays grouped into tuples in the listed order of arguments.", "Syntax", "arrayZipUnaligned(arr1, arr2, ..., arrN)", "Arguments", "arrN \u2014 Array.", "The function can take any number of arrays of different types.", "Returned value", "Array with elements from the source arrays grouped into tuples. Data types in the tuple are the same as types of the input arrays and in the same order as arrays are passed. Array. If the arrays have different sizes, the shorter arrays will be padded with null values."], "Examples": ["SELECT arrayZipUnaligned(['a'], [1, 2, 3]);"], "Category": ["Arrays Functions"], "index": 1168, "vector_txt": "1168:Feature: arrayZipUnaligned(arr1, arr2, ..., arrN)\nDescription: arrayZipUnalignedCombines multiple arrays into a single array, allowing for unaligned arrays. The resulting array contains the corresponding elements of the source arrays grouped into tuples in the listed order of arguments.SyntaxarrayZipUnaligned(arr1, arr2, ..., arrN)ArgumentsarrN \u2014 Array.The function can take any number of arrays of different types.Returned valueArray with elements from the source arrays grouped into tuples. Data types in the tuple are the same as types of the input arrays and in the same order as arrays are passed. Array. If the arrays have different sizes, the shorter arrays will be padded with null values.\nExamples: SELECT arrayZipUnaligned(['a'], [1, 2, 3]);\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["normalizeUTF8NFC"], "Feature": ["normalizeUTF8NFC(words)"], "Description": ["normalizeUTF8NFC", "Converts a string to NFC normalized form, assuming the string is valid UTF8-encoded text.", "Syntax", "normalizeUTF8NFC(words)", "Arguments", "words \u2014 UTF8-encoded input string. String.", "Returned value", "String transformed to NFC normalization form. String."], "Examples": ["SELECT length('\u00e2'), normalizeUTF8NFC('\u00e2') AS nfc, length(nfc) AS nfc_len;"], "Category": ["Strings Functions"], "index": 1169, "vector_txt": "1169:Feature: normalizeUTF8NFC(words)\nDescription: normalizeUTF8NFCConverts a string to NFC normalized form, assuming the string is valid UTF8-encoded text.SyntaxnormalizeUTF8NFC(words)Argumentswords \u2014 UTF8-encoded input string. String.Returned valueString transformed to NFC normalization form. String.\nExamples: SELECT length('\u00e2'), normalizeUTF8NFC('\u00e2') AS nfc, length(nfc) AS nfc_len;\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["normalizeUTF8NFD"], "Feature": ["normalizeUTF8NFD(words)"], "Description": ["normalizeUTF8NFD", "Converts a string to NFD normalized form, assuming the string is valid UTF8-encoded text.", "Syntax", "normalizeUTF8NFD(words)", "Arguments", "words \u2014 UTF8-encoded input string. String.", "Returned value", "String transformed to NFD normalization form. String."], "Examples": ["SELECT length('\u00e2'), normalizeUTF8NFD('\u00e2') AS nfd, length(nfd) AS nfd_len;"], "Category": ["Strings Functions"], "index": 1170, "vector_txt": "1170:Feature: normalizeUTF8NFD(words)\nDescription: normalizeUTF8NFDConverts a string to NFD normalized form, assuming the string is valid UTF8-encoded text.SyntaxnormalizeUTF8NFD(words)Argumentswords \u2014 UTF8-encoded input string. String.Returned valueString transformed to NFD normalization form. String.\nExamples: SELECT length('\u00e2'), normalizeUTF8NFD('\u00e2') AS nfd, length(nfd) AS nfd_len;\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["normalizeUTF8NFKC"], "Feature": ["normalizeUTF8NFKC(words)"], "Description": ["normalizeUTF8NFKC", "Converts a string to NFKC normalized form, assuming the string is valid UTF8-encoded text.", "Syntax", "normalizeUTF8NFKC(words)", "Arguments", "words \u2014 UTF8-encoded input string. String.", "Returned value", "String transformed to NFKC normalization form. String."], "Examples": ["SELECT length('\u00e2'), normalizeUTF8NFKC('\u00e2') AS nfkc, length(nfkc) AS nfkc_len;"], "Category": ["Strings Functions"], "index": 1171, "vector_txt": "1171:Feature: normalizeUTF8NFKC(words)\nDescription: normalizeUTF8NFKCConverts a string to NFKC normalized form, assuming the string is valid UTF8-encoded text.SyntaxnormalizeUTF8NFKC(words)Argumentswords \u2014 UTF8-encoded input string. String.Returned valueString transformed to NFKC normalization form. String.\nExamples: SELECT length('\u00e2'), normalizeUTF8NFKC('\u00e2') AS nfkc, length(nfkc) AS nfkc_len;\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["normalizeUTF8NFKD"], "Feature": ["normalizeUTF8NFKD(words)"], "Description": ["normalizeUTF8NFKD", "Converts a string to NFKD normalized form, assuming the string is valid UTF8-encoded text.", "Syntax", "normalizeUTF8NFKD(words)", "Arguments", "words \u2014 UTF8-encoded input string. String.", "Returned value", "String transformed to NFKD normalization form. String."], "Examples": ["SELECT length('\u00e2'), normalizeUTF8NFKD('\u00e2') AS nfkd, length(nfkd) AS nfkd_len;"], "Category": ["Strings Functions"], "index": 1172, "vector_txt": "1172:Feature: normalizeUTF8NFKD(words)\nDescription: normalizeUTF8NFKDConverts a string to NFKD normalized form, assuming the string is valid UTF8-encoded text.SyntaxnormalizeUTF8NFKD(words)Argumentswords \u2014 UTF8-encoded input string. String.Returned valueString transformed to NFKD normalization form. String.\nExamples: SELECT length('\u00e2'), normalizeUTF8NFKD('\u00e2') AS nfkd, length(nfkd) AS nfkd_len;\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["encodeXMLComponent"], "Feature": ["encodeXMLComponent(x)"], "Description": ["encodeXMLComponent", "Escapes characters with special meaning in XML such that they can afterwards be place into a XML text node or attribute.", "The following characters are replaced: <, &, >, \", '.\nAlso see the list of XML and HTML character entity references.", "Syntax", "encodeXMLComponent(x)", "Arguments", "x \u2014 An input string. String.", "Returned value", "The escaped string. String."], "Examples": ["SELECT encodeXMLComponent('Hello, \"world\"!');SELECT encodeXMLComponent('<123>');SELECT encodeXMLComponent('&clickhouse');SELECT encodeXMLComponent('\\'foo\\'');"], "Category": ["Strings Functions"], "index": 1173, "vector_txt": "1173:Feature: encodeXMLComponent(x)\nDescription: encodeXMLComponentEscapes characters with special meaning in XML such that they can afterwards be place into a XML text node or attribute.The following characters are replaced: <, &, >, \", '.\nAlso see the list of XML and HTML character entity references.SyntaxencodeXMLComponent(x)Argumentsx \u2014 An input string. String.Returned valueThe escaped string. String.\nExamples: SELECT encodeXMLComponent('Hello, \"world\"!');SELECT encodeXMLComponent('<123>');SELECT encodeXMLComponent('&clickhouse');SELECT encodeXMLComponent('\\'foo\\'');\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["decodeXMLComponent"], "Feature": ["decodeXMLComponent(x)"], "Description": ["decodeXMLComponent", "Un-escapes substrings with special meaning in XML. These substrings are: &quot; &amp; &apos; &gt; &lt;", "This function also replaces numeric character references with Unicode characters. Both decimal (like &#10003;) and hexadecimal (&#x2713;) forms are supported.", "Syntax", "decodeXMLComponent(x)", "Arguments", "x \u2014 An input string. String.", "Returned value", "The un-escaped string. String."], "Examples": ["SELECT decodeXMLComponent('&apos;foo&apos;');SELECT decodeXMLComponent('&lt; &#x3A3; &gt;');"], "Category": ["Strings Functions"], "index": 1174, "vector_txt": "1174:Feature: decodeXMLComponent(x)\nDescription: decodeXMLComponentUn-escapes substrings with special meaning in XML. These substrings are: &quot; &amp; &apos; &gt; &lt;This function also replaces numeric character references with Unicode characters. Both decimal (like &#10003;) and hexadecimal (&#x2713;) forms are supported.SyntaxdecodeXMLComponent(x)Argumentsx \u2014 An input string. String.Returned valueThe un-escaped string. String.\nExamples: SELECT decodeXMLComponent('&apos;foo&apos;');SELECT decodeXMLComponent('&lt; &#x3A3; &gt;');\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["decodeHTMLComponent"], "Feature": ["decodeHTMLComponent(x)"], "Description": ["decodeHTMLComponent", "Un-escapes substrings with special meaning in HTML. For example: &hbar; &gt; &diamondsuit; &heartsuit; &lt; etc.", "This function also replaces numeric character references with Unicode characters. Both decimal (like &#10003;) and hexadecimal (&#x2713;) forms are supported.", "Syntax", "decodeHTMLComponent(x)", "Arguments", "x \u2014 An input string. String.", "Returned value", "The un-escaped string. String."], "Examples": ["SELECT decodeHTMLComponent(''CH');SELECT decodeHTMLComponent('I&heartsuit;ClickHouse');"], "Category": ["Strings Functions"], "index": 1175, "vector_txt": "1175:Feature: decodeHTMLComponent(x)\nDescription: decodeHTMLComponentUn-escapes substrings with special meaning in HTML. For example: &hbar; &gt; &diamondsuit; &heartsuit; &lt; etc.This function also replaces numeric character references with Unicode characters. Both decimal (like &#10003;) and hexadecimal (&#x2713;) forms are supported.SyntaxdecodeHTMLComponent(x)Argumentsx \u2014 An input string. String.Returned valueThe un-escaped string. String.\nExamples: SELECT decodeHTMLComponent(''CH');SELECT decodeHTMLComponent('I&heartsuit;ClickHouse');\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["extractTextFromHTML"], "Feature": ["extractTextFromHTML(x)"], "Description": ["extractTextFromHTML", "This function extracts plain text from HTML or XHTML.", "It does not conform 100% to the HTML, XML or XHTML specification but the implementation is reasonably accurate and fast. The rules are the following:", "Comments are skipped. Example: <!-- test -->. Comment must end with -->. Nested comments are disallowed.\nNote: constructions like <!--> and <!---> are not valid comments in HTML but they are skipped by other rules.CDATA is pasted verbatim. Note: CDATA is XML/XHTML-specific  and processed on a \"best-effort\" basis.script and style elements are removed with all their content. Note: it is assumed that closing tag cannot appear inside content. For example, in JS string literal has to be escaped like \"<\\/script>\".\nNote: comments and CDATA are possible inside script or style - then closing tags are not searched inside CDATA. Example: <script><![CDATA[</script>]]></script>. But they are still searched inside comments. Sometimes it becomes complicated: <script>var x = \"<!--\"; </script> var y = \"-->\"; alert(x + y);</script>\nNote: script and style can be the names of XML namespaces - then they are not treated like usual script or style elements. Example: <script:a>Hello</script:a>.\nNote: whitespaces are possible after closing tag name: </script > but not before: < / script>.Other tags or tag-like elements are skipped without inner content. Example: <a>.</a>\nNote: it is expected that this HTML is illegal: <a test=\">\"></a>\nNote: it also skips something like tags: <>, <!>, etc.\nNote: tag without end is skipped to the end of input: <hello   HTML and XML entities are not decoded. They must be processed by separate function.Whitespaces in the text are collapsed or inserted by specific rules.Whitespaces at the beginning and at the end are removed.Consecutive whitespaces are collapsed.But if the text is separated by other elements and there is no whitespace, it is inserted.It may cause unnatural examples: Hello<b>world</b>, Hello<!-- -->world - there is no whitespace in HTML, but the function inserts it. Also consider: Hello<p>world</p>, Hello<br>world. This behavior is reasonable for data analysis, e.g. to convert HTML to a bag of words.Also note that correct handling of whitespaces requires the support of <pre></pre> and CSS display and white-space properties.", "Syntax", "extractTextFromHTML(x)", "Arguments", "x \u2014 input text. String.", "Returned value", "Extracted text. String."], "Examples": ["SELECT extractTextFromHTML(' <p> A text <i>with</i><b>tags</b>. <!-- comments --> </p> ');SELECT extractTextFromHTML('<![CDATA[The content within <b>CDATA</b>]]> <script>alert(\"Script\");</script>');SELECT extractTextFromHTML(html) FROM url('http://www.donothingfor2minutes.com/', RawBLOB, 'html String');"], "Category": ["Strings Functions"], "index": 1176, "vector_txt": "1176:Feature: extractTextFromHTML(x)\nDescription: extractTextFromHTMLThis function extracts plain text from HTML or XHTML.It does not conform 100% to the HTML, XML or XHTML specification but the implementation is reasonably accurate and fast. The rules are the following:Comments are skipped. Example: <!-- test -->. Comment must end with -->. Nested comments are disallowed.\nNote: constructions like <!--> and <!---> are not valid comments in HTML but they are skipped by other rules.CDATA is pasted verbatim. Note: CDATA is XML/XHTML-specific  and processed on a \"best-effort\" basis.script and style elements are removed with all their content. Note: it is assumed that closing tag cannot appear inside content. For example, in JS string literal has to be escaped like \"<\\/script>\".\nNote: comments and CDATA are possible inside script or style - then closing tags are not searched inside CDATA. Example: <script><![CDATA[</script>]]></script>. But they are still searched inside comments. Sometimes it becomes complicated: <script>var x = \"<!--\"; </script> var y = \"-->\"; alert(x + y);</script>\nNote: script and style can be the names of XML namespaces - then they are not treated like usual script or style elements. Example: <script:a>Hello</script:a>.\nNote: whitespaces are possible after closing tag name: </script > but not before: < / script>.Other tags or tag-like elements are skipped without inner content. Example: <a>.</a>\nNote: it is expected that this HTML is illegal: <a test=\">\"></a>\nNote: it also skips something like tags: <>, <!>, etc.\nNote: tag without end is skipped to the end of input: <hello   HTML and XML entities are not decoded. They must be processed by separate function.Whitespaces in the text are collapsed or inserted by specific rules.Whitespaces at the beginning and at the end are removed.Consecutive whitespaces are collapsed.But if the text is separated by other elements and there is no whitespace, it is inserted.It may cause unnatural examples: Hello<b>world</b>, Hello<!-- -->world - there is no whitespace in HTML, but the function inserts it. Also consider: Hello<p>world</p>, Hello<br>world. This behavior is reasonable for data analysis, e.g. to convert HTML to a bag of words.Also note that correct handling of whitespaces requires the support of <pre></pre> and CSS display and white-space properties.SyntaxextractTextFromHTML(x)Argumentsx \u2014 input text. String.Returned valueExtracted text. String.\nExamples: SELECT extractTextFromHTML(' <p> A text <i>with</i><b>tags</b>. <!-- comments --> </p> ');SELECT extractTextFromHTML('<![CDATA[The content within <b>CDATA</b>]]> <script>alert(\"Script\");</script>');SELECT extractTextFromHTML(html) FROM url('http://www.donothingfor2minutes.com/', RawBLOB, 'html String');\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["ascii"], "Feature": ["ascii(s)"], "Description": ["ascii", "Returns the ASCII code point (as Int32) of the first character of string s.", "If s is empty, the result is 0. If the first character is not an ASCII character or not part of the Latin-1 supplement range of UTF-16, the result is undefined.", "Syntax", "ascii(s)"], "Examples": ["ascii(s)"], "Category": ["Strings Functions"], "index": 1177, "vector_txt": "1177:Feature: ascii(s)\nDescription: asciiReturns the ASCII code point (as Int32) of the first character of string s.If s is empty, the result is 0. If the first character is not an ASCII character or not part of the Latin-1 supplement range of UTF-16, the result is undefined.Syntaxascii(s)\nExamples: ascii(s)\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["soundex"], "Feature": ["soundex(val)"], "Description": ["soundex", "Returns the Soundex code of a string.", "Syntax", "soundex(val)", "Arguments", "val \u2014 Input value. String", "Returned value", "The Soundex code of the input value. String"], "Examples": ["select soundex('aksel');"], "Category": ["Strings Functions"], "index": 1178, "vector_txt": "1178:Feature: soundex(val)\nDescription: soundexReturns the Soundex code of a string.Syntaxsoundex(val)Argumentsval \u2014 Input value. StringReturned valueThe Soundex code of the input value. String\nExamples: select soundex('aksel');\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayAUC"], "Feature": ["arrayAUC(arr_scores, arr_labels[, scale])"], "Description": ["arrayAUC", "Calculate AUC (Area Under the Curve, which is a concept in machine learning, see more details: https://en.wikipedia.org/wiki/Receiver_operating_characteristic#Area_under_the_curve).", "Syntax", "arrayAUC(arr_scores, arr_labels[, scale])", "Arguments", "arr_scores \u2014 scores prediction model gives.arr_labels \u2014 labels of samples, usually 1 for positive sample and 0 for negative sample.scale - Optional. Wether to return the normalized area. Default value: true. [Bool]", "Returned value", "Returns AUC value with type Float64."], "Examples": ["select arrayAUC([0.1, 0.4, 0.35, 0.8], [0, 0, 1, 1]);"], "Category": ["Arrays Functions"], "index": 1179, "vector_txt": "1179:Feature: arrayAUC(arr_scores, arr_labels[, scale])\nDescription: arrayAUCCalculate AUC (Area Under the Curve, which is a concept in machine learning, see more details: https://en.wikipedia.org/wiki/Receiver_operating_characteristic#Area_under_the_curve).SyntaxarrayAUC(arr_scores, arr_labels[, scale])Argumentsarr_scores \u2014 scores prediction model gives.arr_labels \u2014 labels of samples, usually 1 for positive sample and 0 for negative sample.scale - Optional. Wether to return the normalized area. Default value: true. [Bool]Returned valueReturns AUC value with type Float64.\nExamples: select arrayAUC([0.1, 0.4, 0.35, 0.8], [0, 0, 1, 1]);\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["punycodeEncode"], "Feature": ["punycodeEncode(val)"], "Description": ["punycodeEncode", "Returns the Punycode representation of a string.\nThe string must be UTF8-encoded, otherwise the behavior is undefined.", "Syntax", "punycodeEncode(val)", "Arguments", "val \u2014 Input value. String", "Returned value", "A Punycode representation of the input value. String"], "Examples": ["select punycodeEncode('M\u00fcnchen');"], "Category": ["Strings Functions"], "index": 1180, "vector_txt": "1180:Feature: punycodeEncode(val)\nDescription: punycodeEncodeReturns the Punycode representation of a string.\nThe string must be UTF8-encoded, otherwise the behavior is undefined.SyntaxpunycodeEncode(val)Argumentsval \u2014 Input value. StringReturned valueA Punycode representation of the input value. String\nExamples: select punycodeEncode('M\u00fcnchen');\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["punycodeDecode"], "Feature": ["punycodeEncode(val)"], "Description": ["punycodeDecode", "Returns the UTF8-encoded plaintext of a Punycode-encoded string.\nIf no valid Punycode-encoded string is given, an exception is thrown.", "Syntax", "punycodeEncode(val)", "Arguments", "val \u2014 Punycode-encoded string. String", "Returned value", "The plaintext of the input value. String"], "Examples": ["select punycodeDecode('Mnchen-3ya');"], "Category": ["Strings Functions"], "index": 1181, "vector_txt": "1181:Feature: punycodeEncode(val)\nDescription: punycodeDecodeReturns the UTF8-encoded plaintext of a Punycode-encoded string.\nIf no valid Punycode-encoded string is given, an exception is thrown.SyntaxpunycodeEncode(val)Argumentsval \u2014 Punycode-encoded string. StringReturned valueThe plaintext of the input value. String\nExamples: select punycodeDecode('Mnchen-3ya');\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["tryPunycodeDecode"], "Feature": ["tryPunycodeDecode"], "Description": ["tryPunycodeDecode", "Like punycodeDecode but returns an empty string if no valid Punycode-encoded string is given."], "Examples": [], "Category": ["Strings Functions"], "index": 1182, "vector_txt": "1182:Feature: tryPunycodeDecode\nDescription: tryPunycodeDecodeLike punycodeDecode but returns an empty string if no valid Punycode-encoded string is given.\nExamples: \nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["idnaEncode"], "Feature": ["idnaEncode(val)"], "Description": ["idnaEncode", "Returns the ASCII representation (ToASCII algorithm) of a domain name according to the Internationalized Domain Names in Applications (IDNA) mechanism.\nThe input string must be UTF-encoded and translatable to an ASCII string, otherwise an exception is thrown.\nNote: No percent decoding or trimming of tabs, spaces or control characters is performed.", "Syntax", "idnaEncode(val)", "Arguments", "val \u2014 Input value. String", "Returned value", "A ASCII representation according to the IDNA mechanism of the input value. String"], "Examples": ["select idnaEncode('stra\u00dfe.m\u00fcnchen.de');"], "Category": ["Strings Functions"], "index": 1183, "vector_txt": "1183:Feature: idnaEncode(val)\nDescription: idnaEncodeReturns the ASCII representation (ToASCII algorithm) of a domain name according to the Internationalized Domain Names in Applications (IDNA) mechanism.\nThe input string must be UTF-encoded and translatable to an ASCII string, otherwise an exception is thrown.\nNote: No percent decoding or trimming of tabs, spaces or control characters is performed.SyntaxidnaEncode(val)Argumentsval \u2014 Input value. StringReturned valueA ASCII representation according to the IDNA mechanism of the input value. String\nExamples: select idnaEncode('stra\u00dfe.m\u00fcnchen.de');\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["tryIdnaEncode"], "Feature": ["tryIdnaEncode"], "Description": ["tryIdnaEncode", "Like idnaEncode but returns an empty string in case of an error instead of throwing an exception."], "Examples": [], "Category": ["Strings Functions"], "index": 1184, "vector_txt": "1184:Feature: tryIdnaEncode\nDescription: tryIdnaEncodeLike idnaEncode but returns an empty string in case of an error instead of throwing an exception.\nExamples: \nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["idnaDecode"], "Feature": ["idnaDecode(val)"], "Description": ["idnaDecode", "Returns the Unicode (UTF-8) representation (ToUnicode algorithm) of a domain name according to the Internationalized Domain Names in Applications (IDNA) mechanism.\nIn case of an error (e.g. because the input is invalid), the input string is returned.\nNote that repeated application of idnaEncode() and idnaDecode() does not necessarily return the original string due to case normalization.", "Syntax", "idnaDecode(val)", "Arguments", "val \u2014 Input value. String", "Returned value", "A Unicode (UTF-8) representation according to the IDNA mechanism of the input value. String"], "Examples": ["select idnaDecode('xn--strae-oqa.xn--mnchen-3ya.de');"], "Category": ["Strings Functions"], "index": 1185, "vector_txt": "1185:Feature: idnaDecode(val)\nDescription: idnaDecodeReturns the Unicode (UTF-8) representation (ToUnicode algorithm) of a domain name according to the Internationalized Domain Names in Applications (IDNA) mechanism.\nIn case of an error (e.g. because the input is invalid), the input string is returned.\nNote that repeated application of idnaEncode() and idnaDecode() does not necessarily return the original string due to case normalization.SyntaxidnaDecode(val)Argumentsval \u2014 Input value. StringReturned valueA Unicode (UTF-8) representation according to the IDNA mechanism of the input value. String\nExamples: select idnaDecode('xn--strae-oqa.xn--mnchen-3ya.de');\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["byteHammingDistance"], "Feature": ["byteHammingDistance(string1, string2)"], "Description": ["byteHammingDistance", "Calculates the hamming distance between two byte strings.", "Syntax", "byteHammingDistance(string1, string2)"], "Examples": ["SELECT byteHammingDistance('karolin', 'kathrin');"], "Category": ["Strings Functions"], "index": 1186, "vector_txt": "1186:Feature: byteHammingDistance(string1, string2)\nDescription: byteHammingDistanceCalculates the hamming distance between two byte strings.SyntaxbyteHammingDistance(string1, string2)\nExamples: SELECT byteHammingDistance('karolin', 'kathrin');\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["stringJaccardIndex"], "Feature": ["stringJaccardIndex(string1, string2)"], "Description": ["stringJaccardIndex", "Calculates the Jaccard similarity index between two byte strings.", "Syntax", "stringJaccardIndex(string1, string2)"], "Examples": ["SELECT stringJaccardIndex('clickhouse', 'mouse');"], "Category": ["Strings Functions"], "index": 1187, "vector_txt": "1187:Feature: stringJaccardIndex(string1, string2)\nDescription: stringJaccardIndexCalculates the Jaccard similarity index between two byte strings.SyntaxstringJaccardIndex(string1, string2)\nExamples: SELECT stringJaccardIndex('clickhouse', 'mouse');\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["stringJaccardIndexUTF8"], "Feature": ["stringJaccardIndexUTF8"], "Description": ["stringJaccardIndexUTF8", "Like stringJaccardIndex but for UTF8-encoded strings."], "Examples": [], "Category": ["Strings Functions"], "index": 1188, "vector_txt": "1188:Feature: stringJaccardIndexUTF8\nDescription: stringJaccardIndexUTF8Like stringJaccardIndex but for UTF8-encoded strings.\nExamples: \nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["editDistance"], "Feature": ["editDistance(string1, string2)"], "Description": ["editDistance", "Calculates the edit distance between two byte strings.", "Syntax", "editDistance(string1, string2)"], "Examples": ["SELECT editDistance('clickhouse', 'mouse');"], "Category": ["Strings Functions"], "index": 1189, "vector_txt": "1189:Feature: editDistance(string1, string2)\nDescription: editDistanceCalculates the edit distance between two byte strings.SyntaxeditDistance(string1, string2)\nExamples: SELECT editDistance('clickhouse', 'mouse');\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayMap(func, arr1, ...)"], "Feature": ["arrayMap(func, arr1, ...)"], "Description": ["arrayMap(func, arr1, ...)", "Returns an array obtained from the original arrays by application of func(arr1[i], ..., arrN[i]) for each element. Arrays arr1 ... arrN must have the same number of elements."], "Examples": ["SELECT arrayMap(x -> (x + 2), [1, 2, 3]) as res;", "SELECT arrayMap((x, y) -> (x, y), [1, 2, 3], [4, 5, 6]) AS res"], "Category": ["Arrays Functions"], "index": 1190, "vector_txt": "1190:Feature: arrayMap(func, arr1, ...)\nDescription: arrayMap(func, arr1, ...)Returns an array obtained from the original arrays by application of func(arr1[i], ..., arrN[i]) for each element. Arrays arr1 ... arrN must have the same number of elements.\nExamples: SELECT arrayMap(x -> (x + 2), [1, 2, 3]) as res;SELECT arrayMap((x, y) -> (x, y), [1, 2, 3], [4, 5, 6]) AS res\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["editDistanceUTF8"], "Feature": ["editDistanceUTF8(string1, string2)"], "Description": ["editDistanceUTF8", "Calculates the edit distance between two UTF8 strings.", "Syntax", "editDistanceUTF8(string1, string2)"], "Examples": ["SELECT editDistanceUTF8('\u6211\u662f\u8c01', '\u6211\u662f\u6211');"], "Category": ["Strings Functions"], "index": 1191, "vector_txt": "1191:Feature: editDistanceUTF8(string1, string2)\nDescription: editDistanceUTF8Calculates the edit distance between two UTF8 strings.SyntaxeditDistanceUTF8(string1, string2)\nExamples: SELECT editDistanceUTF8('\u6211\u662f\u8c01', '\u6211\u662f\u6211');\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["damerauLevenshteinDistance"], "Feature": ["damerauLevenshteinDistance(string1, string2)"], "Description": ["damerauLevenshteinDistance", "Calculates the Damerau-Levenshtein distance between two byte strings.", "Syntax", "damerauLevenshteinDistance(string1, string2)"], "Examples": ["SELECT damerauLevenshteinDistance('clickhouse', 'mouse');"], "Category": ["Strings Functions"], "index": 1192, "vector_txt": "1192:Feature: damerauLevenshteinDistance(string1, string2)\nDescription: damerauLevenshteinDistanceCalculates the Damerau-Levenshtein distance between two byte strings.SyntaxdamerauLevenshteinDistance(string1, string2)\nExamples: SELECT damerauLevenshteinDistance('clickhouse', 'mouse');\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["jaroSimilarity"], "Feature": ["jaroSimilarity(string1, string2)"], "Description": ["jaroSimilarity", "Calculates the Jaro similarity between two byte strings.", "Syntax", "jaroSimilarity(string1, string2)"], "Examples": ["SELECT jaroSimilarity('clickhouse', 'click');"], "Category": ["Strings Functions"], "index": 1193, "vector_txt": "1193:Feature: jaroSimilarity(string1, string2)\nDescription: jaroSimilarityCalculates the Jaro similarity between two byte strings.SyntaxjaroSimilarity(string1, string2)\nExamples: SELECT jaroSimilarity('clickhouse', 'click');\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["jaroWinklerSimilarity"], "Feature": ["jaroWinklerSimilarity(string1, string2)"], "Description": ["jaroWinklerSimilarity", "Calculates the Jaro-Winkler similarity between two byte strings.", "Syntax", "jaroWinklerSimilarity(string1, string2)"], "Examples": ["SELECT jaroWinklerSimilarity('clickhouse', 'click');"], "Category": ["Strings Functions"], "index": 1194, "vector_txt": "1194:Feature: jaroWinklerSimilarity(string1, string2)\nDescription: jaroWinklerSimilarityCalculates the Jaro-Winkler similarity between two byte strings.SyntaxjaroWinklerSimilarity(string1, string2)\nExamples: SELECT jaroWinklerSimilarity('clickhouse', 'click');\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["initcap"], "Feature": ["initcap(val)"], "Description": ["initcap", "Convert the first letter of each word to upper case and the rest to lower case. Words are sequences of alphanumeric characters separated by non-alphanumeric characters.", "NoteBecause initCap converts only the first letter of each word to upper case you may observe unexpected behaviour for words containing apostrophes or capital letters. For example:SELECT initCap('mother''s daughter'), initCap('joe McAdam');will return\u250c\u2500initCap('mother\\'s daughter')\u2500\u252c\u2500initCap('joe McAdam')\u2500\u2510\u2502 Mother'S Daughter             \u2502 Joe Mcadam            \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518This is a known behaviour, with no plans currently to fix it.", "Syntax", "initcap(val)", "Arguments", "val \u2014 Input value. String.", "Returned value", "val with the first letter of each word converted to upper case. String."], "Examples": ["SELECT initcap('building for fast');"], "Category": ["Strings Functions"], "index": 1195, "vector_txt": "1195:Feature: initcap(val)\nDescription: initcapConvert the first letter of each word to upper case and the rest to lower case. Words are sequences of alphanumeric characters separated by non-alphanumeric characters.NoteBecause initCap converts only the first letter of each word to upper case you may observe unexpected behaviour for words containing apostrophes or capital letters. For example:SELECT initCap('mother''s daughter'), initCap('joe McAdam');will return\u250c\u2500initCap('mother\\'s daughter')\u2500\u252c\u2500initCap('joe McAdam')\u2500\u2510\u2502 Mother'S Daughter             \u2502 Joe Mcadam            \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518This is a known behaviour, with no plans currently to fix it.Syntaxinitcap(val)Argumentsval \u2014 Input value. String.Returned valueval with the first letter of each word converted to upper case. String.\nExamples: SELECT initcap('building for fast');\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["initcapUTF8"], "Feature": ["initcapUTF8(val)"], "Description": ["initcapUTF8", "Like initcap, initcapUTF8 converts the first letter of each word to upper case and the rest to lower case. Assumes that the string contains valid UTF-8 encoded text.\nIf this assumption is violated, no exception is thrown and the result is undefined.", "NoteThis function does not detect the language, e.g. for Turkish the result might not be exactly correct (i/\u0130 vs. i/I).\nIf the length of the UTF-8 byte sequence is different for upper and lower case of a code point, the result may be incorrect for this code point.", "Syntax", "initcapUTF8(val)", "Arguments", "val \u2014 Input value. String.", "Returned value", "val with the first letter of each word converted to upper case. String."], "Examples": ["SELECT initcapUTF8('\u043d\u0435 \u0442\u043e\u0440\u043c\u043e\u0437\u0438\u0442');"], "Category": ["Strings Functions"], "index": 1196, "vector_txt": "1196:Feature: initcapUTF8(val)\nDescription: initcapUTF8Like initcap, initcapUTF8 converts the first letter of each word to upper case and the rest to lower case. Assumes that the string contains valid UTF-8 encoded text.\nIf this assumption is violated, no exception is thrown and the result is undefined.NoteThis function does not detect the language, e.g. for Turkish the result might not be exactly correct (i/\u0130 vs. i/I).\nIf the length of the UTF-8 byte sequence is different for upper and lower case of a code point, the result may be incorrect for this code point.SyntaxinitcapUTF8(val)Argumentsval \u2014 Input value. String.Returned valueval with the first letter of each word converted to upper case. String.\nExamples: SELECT initcapUTF8('\u043d\u0435 \u0442\u043e\u0440\u043c\u043e\u0437\u0438\u0442');\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["firstLine"], "Feature": ["firstLine(val)"], "Description": ["firstLine", "Returns the first line from a multi-line string.", "Syntax", "firstLine(val)", "Arguments", "val \u2014 Input value. String", "Returned value", "The first line of the input value or the whole value if there is no line\nseparators. String"], "Examples": ["select firstLine('foo\\nbar\\nbaz');"], "Category": ["Strings Functions"], "index": 1197, "vector_txt": "1197:Feature: firstLine(val)\nDescription: firstLineReturns the first line from a multi-line string.SyntaxfirstLine(val)Argumentsval \u2014 Input value. StringReturned valueThe first line of the input value or the whole value if there is no line\nseparators. String\nExamples: select firstLine('foo\\nbar\\nbaz');\nCategory: Strings Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/time-series-functions"], "Title": ["seriesOutliersDetectTukey"], "Feature": ["seriesOutliersDetectTukey(series);seriesOutliersDetectTukey(series, min_percentile, max_percentile, K);"], "Description": ["seriesOutliersDetectTukey", "Detects outliers in series data using Tukey Fences.", "Syntax", "seriesOutliersDetectTukey(series);seriesOutliersDetectTukey(series, min_percentile, max_percentile, K);", "Arguments", "series - An array of numeric values.min_percentile - The minimum percentile to be used to calculate inter-quantile range (IQR). The value must be in range [0.02,0.98]. The default is 0.25.max_percentile - The maximum percentile to be used to calculate inter-quantile range (IQR). The value must be in range [0.02,0.98]. The default is 0.75.K - Non-negative constant value to detect mild or stronger outliers. The default value is 1.5.", "At least four data points are required in series to detect outliers.", "Returned value", "Returns an array of the same length as the input array where each value represents score of possible anomaly of corresponding element in the series. A non-zero score indicates a possible anomaly. Array."], "Examples": ["SELECT seriesOutliersDetectTukey([-3, 2, 15, 3, 5, 6, 4, 5, 12, 45, 12, 3, 3, 4, 5, 6]) AS print_0;", "SELECT seriesOutliersDetectTukey([-3, 2, 15, 3, 5, 6, 4.50, 5, 12, 45, 12, 3.40, 3, 4, 5, 6], 0.2, 0.8, 1.5) AS print_0;"], "Category": ["Time Series Functions"], "index": 1198, "vector_txt": "1198:Feature: seriesOutliersDetectTukey(series);seriesOutliersDetectTukey(series, min_percentile, max_percentile, K);\nDescription: seriesOutliersDetectTukeyDetects outliers in series data using Tukey Fences.SyntaxseriesOutliersDetectTukey(series);seriesOutliersDetectTukey(series, min_percentile, max_percentile, K);Argumentsseries - An array of numeric values.min_percentile - The minimum percentile to be used to calculate inter-quantile range (IQR). The value must be in range [0.02,0.98]. The default is 0.25.max_percentile - The maximum percentile to be used to calculate inter-quantile range (IQR). The value must be in range [0.02,0.98]. The default is 0.75.K - Non-negative constant value to detect mild or stronger outliers. The default value is 1.5.At least four data points are required in series to detect outliers.Returned valueReturns an array of the same length as the input array where each value represents score of possible anomaly of corresponding element in the series. A non-zero score indicates a possible anomaly. Array.\nExamples: SELECT seriesOutliersDetectTukey([-3, 2, 15, 3, 5, 6, 4, 5, 12, 45, 12, 3, 3, 4, 5, 6]) AS print_0;SELECT seriesOutliersDetectTukey([-3, 2, 15, 3, 5, 6, 4.50, 5, 12, 45, 12, 3.40, 3, 4, 5, 6], 0.2, 0.8, 1.5) AS print_0;\nCategory: Time Series Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/time-series-functions"], "Title": ["seriesPeriodDetectFFT"], "Feature": ["seriesPeriodDetectFFT(series);"], "Description": ["seriesPeriodDetectFFT", "Finds the period of the given series data data using FFT\nFFT - Fast Fourier transform", "Syntax", "seriesPeriodDetectFFT(series);", "Arguments", "series - An array of numeric values", "Returned value", "A real value equal to the period of series data. NaN when number of data points are less than four. Float64."], "Examples": ["SELECT seriesPeriodDetectFFT([1, 4, 6, 1, 4, 6, 1, 4, 6, 1, 4, 6, 1, 4, 6, 1, 4, 6, 1, 4, 6]) AS print_0;", "SELECT seriesPeriodDetectFFT(arrayMap(x -> abs((x % 6) - 3), range(1000))) AS print_0;"], "Category": ["Time Series Functions"], "index": 1199, "vector_txt": "1199:Feature: seriesPeriodDetectFFT(series);\nDescription: seriesPeriodDetectFFTFinds the period of the given series data data using FFT\nFFT - Fast Fourier transformSyntaxseriesPeriodDetectFFT(series);Argumentsseries - An array of numeric valuesReturned valueA real value equal to the period of series data. NaN when number of data points are less than four. Float64.\nExamples: SELECT seriesPeriodDetectFFT([1, 4, 6, 1, 4, 6, 1, 4, 6, 1, 4, 6, 1, 4, 6, 1, 4, 6, 1, 4, 6]) AS print_0;SELECT seriesPeriodDetectFFT(arrayMap(x -> abs((x % 6) - 3), range(1000))) AS print_0;\nCategory: Time Series Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/time-series-functions"], "Title": ["seriesDecomposeSTL"], "Feature": ["seriesDecomposeSTL(series, period);"], "Description": ["seriesDecomposeSTL", "Decomposes a series data using STL (Seasonal-Trend Decomposition Procedure Based on Loess) into a season, a trend and a residual component. ", "Syntax", "seriesDecomposeSTL(series, period);", "Arguments", "series - An array of numeric valuesperiod - A positive integer", "The number of data points in series should be at least twice the value of period.", "Returned value", "An array of four arrays where the first array include seasonal components, the second array - trend,\nthe third array - residue component, and the fourth array - baseline(seasonal + trend) component. Array."], "Examples": ["SELECT seriesDecomposeSTL([10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34], 3) AS print_0;"], "Category": ["Time Series Functions"], "index": 1200, "vector_txt": "1200:Feature: seriesDecomposeSTL(series, period);\nDescription: seriesDecomposeSTLDecomposes a series data using STL (Seasonal-Trend Decomposition Procedure Based on Loess) into a season, a trend and a residual component. SyntaxseriesDecomposeSTL(series, period);Argumentsseries - An array of numeric valuesperiod - A positive integerThe number of data points in series should be at least twice the value of period.Returned valueAn array of four arrays where the first array include seasonal components, the second array - trend,\nthe third array - residue component, and the fourth array - baseline(seasonal + trend) component. Array.\nExamples: SELECT seriesDecomposeSTL([10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34], 3) AS print_0;\nCategory: Time Series Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayFilter(func, arr1, ...)"], "Feature": ["arrayFilter(func, arr1, ...)"], "Description": ["arrayFilter(func, arr1, ...)", "Returns an array containing only the elements in arr1 for which func(arr1[i], ..., arrN[i]) returns something other than 0."], "Examples": ["SELECT arrayFilter(x -> x LIKE '%World%', ['Hello', 'abc World']) AS res", "SELECT    arrayFilter(        (i, x) -> x LIKE '%World%',        arrayEnumerate(arr),        ['Hello', 'abc World'] AS arr)    AS res"], "Category": ["Arrays Functions"], "index": 1201, "vector_txt": "1201:Feature: arrayFilter(func, arr1, ...)\nDescription: arrayFilter(func, arr1, ...)Returns an array containing only the elements in arr1 for which func(arr1[i], ..., arrN[i]) returns something other than 0.\nExamples: SELECT arrayFilter(x -> x LIKE '%World%', ['Hello', 'abc World']) AS resSELECT    arrayFilter(        (i, x) -> x LIKE '%World%',        arrayEnumerate(arr),        ['Hello', 'abc World'] AS arr)    AS res\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/arithmetic-functions"], "Title": ["ifNotFinite"], "Feature": ["ifNotFinite(x,y)"], "Description": ["ifNotFinite", "Checks whether a floating point value is finite.", "Syntax", "ifNotFinite(x,y)", "Arguments", "x \u2014 Value to check for infinity. Float*.y \u2014 Fallback value. Float*.", "Returned value", "x if x is finite.y if x is not finite."], "Examples": [], "Category": ["Arithmetic Functions"], "index": 1202, "vector_txt": "1202:Feature: ifNotFinite(x,y)\nDescription: ifNotFiniteChecks whether a floating point value is finite.SyntaxifNotFinite(x,y)Argumentsx \u2014 Value to check for infinity. Float*.y \u2014 Fallback value. Float*.Returned valuex if x is finite.y if x is not finite.\nExamples: \nCategory: Arithmetic Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/time-window-functions"], "Title": ["tumble"], "Feature": ["tumble(time_attr, interval [, timezone])"], "Description": ["tumble", "A tumbling time window assigns records to non-overlapping, continuous windows with a fixed duration (interval).", "Syntax", "tumble(time_attr, interval [, timezone])", "Arguments", "time_attr \u2014 Date and time. DateTime.interval \u2014 Window interval in Interval.timezone \u2014 Timezone name (optional).", "Returned values", "The inclusive lower and exclusive upper bound of the corresponding tumbling window. Tuple(DateTime, DateTime)."], "Examples": ["SELECT tumble(now(), toIntervalDay('1'));"], "Category": ["Time Window Functions"], "index": 1203, "vector_txt": "1203:Feature: tumble(time_attr, interval [, timezone])\nDescription: tumbleA tumbling time window assigns records to non-overlapping, continuous windows with a fixed duration (interval).Syntaxtumble(time_attr, interval [, timezone])Argumentstime_attr \u2014 Date and time. DateTime.interval \u2014 Window interval in Interval.timezone \u2014 Timezone name (optional).Returned valuesThe inclusive lower and exclusive upper bound of the corresponding tumbling window. Tuple(DateTime, DateTime).\nExamples: SELECT tumble(now(), toIntervalDay('1'));\nCategory: Time Window Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/time-window-functions"], "Title": ["tumbleStart"], "Feature": ["tumbleStart(time_attr, interval [, timezone]);"], "Description": ["tumbleStart", "Returns the inclusive lower bound of the corresponding tumbling window.", "Syntax", "tumbleStart(time_attr, interval [, timezone]);", "Arguments", "time_attr \u2014 Date and time. DateTime.interval \u2014 Window interval in Interval.timezone \u2014 Timezone name (optional).", "The parameters above can also be passed to the function as a tuple.", "Returned values", "The inclusive lower bound of the corresponding tumbling window. DateTime, Tuple or UInt32."], "Examples": ["SELECT tumbleStart(now(), toIntervalDay('1'));"], "Category": ["Time Window Functions"], "index": 1204, "vector_txt": "1204:Feature: tumbleStart(time_attr, interval [, timezone]);\nDescription: tumbleStartReturns the inclusive lower bound of the corresponding tumbling window.SyntaxtumbleStart(time_attr, interval [, timezone]);Argumentstime_attr \u2014 Date and time. DateTime.interval \u2014 Window interval in Interval.timezone \u2014 Timezone name (optional).The parameters above can also be passed to the function as a tuple.Returned valuesThe inclusive lower bound of the corresponding tumbling window. DateTime, Tuple or UInt32.\nExamples: SELECT tumbleStart(now(), toIntervalDay('1'));\nCategory: Time Window Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/time-window-functions"], "Title": ["tumbleEnd"], "Feature": ["tumbleEnd(time_attr, interval [, timezone]);"], "Description": ["tumbleEnd", "Returns the exclusive upper bound of the corresponding tumbling window.", "Syntax", "tumbleEnd(time_attr, interval [, timezone]);", "Arguments", "time_attr \u2014 Date and time. DateTime.interval \u2014 Window interval in Interval.timezone \u2014 Timezone name (optional).", "The parameters above can also be passed to the function as a tuple.", "Returned values", "The inclusive lower bound of the corresponding tumbling window. DateTime, Tuple or UInt32."], "Examples": ["SELECT tumbleEnd(now(), toIntervalDay('1'));"], "Category": ["Time Window Functions"], "index": 1205, "vector_txt": "1205:Feature: tumbleEnd(time_attr, interval [, timezone]);\nDescription: tumbleEndReturns the exclusive upper bound of the corresponding tumbling window.SyntaxtumbleEnd(time_attr, interval [, timezone]);Argumentstime_attr \u2014 Date and time. DateTime.interval \u2014 Window interval in Interval.timezone \u2014 Timezone name (optional).The parameters above can also be passed to the function as a tuple.Returned valuesThe inclusive lower bound of the corresponding tumbling window. DateTime, Tuple or UInt32.\nExamples: SELECT tumbleEnd(now(), toIntervalDay('1'));\nCategory: Time Window Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/time-window-functions"], "Title": ["hop"], "Feature": ["hop(time_attr, hop_interval, window_interval [, timezone])"], "Description": ["hop", "A hopping time window has a fixed duration (window_interval) and hops by a specified hop interval (hop_interval). If the hop_interval is smaller than the window_interval, hopping windows are overlapping. Thus, records can be assigned to multiple windows.", "hop(time_attr, hop_interval, window_interval [, timezone])", "Arguments", "time_attr \u2014 Date and time. DateTime.hop_interval \u2014 Positive Hop interval. Interval.window_interval \u2014 Positive Window interval. Interval.timezone \u2014 Timezone name (optional).", "Returned values", "The inclusive lower and exclusive upper bound of the corresponding hopping window. Tuple(DateTime, DateTime)`.", "NoteSince one record can be assigned to multiple hop windows, the function only returns the bound of the first window when hop function is used without WINDOW VIEW."], "Examples": ["SELECT hop(now(), INTERVAL '1' DAY, INTERVAL '2' DAY);"], "Category": ["Time Window Functions"], "index": 1206, "vector_txt": "1206:Feature: hop(time_attr, hop_interval, window_interval [, timezone])\nDescription: hopA hopping time window has a fixed duration (window_interval) and hops by a specified hop interval (hop_interval). If the hop_interval is smaller than the window_interval, hopping windows are overlapping. Thus, records can be assigned to multiple windows.hop(time_attr, hop_interval, window_interval [, timezone])Argumentstime_attr \u2014 Date and time. DateTime.hop_interval \u2014 Positive Hop interval. Interval.window_interval \u2014 Positive Window interval. Interval.timezone \u2014 Timezone name (optional).Returned valuesThe inclusive lower and exclusive upper bound of the corresponding hopping window. Tuple(DateTime, DateTime)`.NoteSince one record can be assigned to multiple hop windows, the function only returns the bound of the first window when hop function is used without WINDOW VIEW.\nExamples: SELECT hop(now(), INTERVAL '1' DAY, INTERVAL '2' DAY);\nCategory: Time Window Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/time-window-functions"], "Title": ["hopStart"], "Feature": ["hopStart(time_attr, hop_interval, window_interval [, timezone]);"], "Description": ["hopStart", "Returns the inclusive lower bound of the corresponding hopping window.", "Syntax", "hopStart(time_attr, hop_interval, window_interval [, timezone]);", "Arguments", "time_attr \u2014 Date and time. DateTime.hop_interval \u2014 Positive Hop interval. Interval.window_interval \u2014 Positive Window interval. Interval.timezone \u2014 Timezone name (optional).", "The parameters above can also be passed to the function as a tuple.", "Returned values", "The inclusive lower bound of the corresponding hopping window. DateTime, Tuple or UInt32.", "NoteSince one record can be assigned to multiple hop windows, the function only returns the bound of the first window when hop function is used without WINDOW VIEW."], "Examples": ["SELECT hopStart(now(), INTERVAL '1' DAY, INTERVAL '2' DAY);"], "Category": ["Time Window Functions"], "index": 1207, "vector_txt": "1207:Feature: hopStart(time_attr, hop_interval, window_interval [, timezone]);\nDescription: hopStartReturns the inclusive lower bound of the corresponding hopping window.SyntaxhopStart(time_attr, hop_interval, window_interval [, timezone]);Argumentstime_attr \u2014 Date and time. DateTime.hop_interval \u2014 Positive Hop interval. Interval.window_interval \u2014 Positive Window interval. Interval.timezone \u2014 Timezone name (optional).The parameters above can also be passed to the function as a tuple.Returned valuesThe inclusive lower bound of the corresponding hopping window. DateTime, Tuple or UInt32.NoteSince one record can be assigned to multiple hop windows, the function only returns the bound of the first window when hop function is used without WINDOW VIEW.\nExamples: SELECT hopStart(now(), INTERVAL '1' DAY, INTERVAL '2' DAY);\nCategory: Time Window Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/time-window-functions"], "Title": ["hopEnd"], "Feature": ["hopEnd(time_attr, hop_interval, window_interval [, timezone]);"], "Description": ["hopEnd", "Returns the exclusive upper bound of the corresponding hopping window.", "Syntax", "hopEnd(time_attr, hop_interval, window_interval [, timezone]);", "Arguments", "time_attr \u2014 Date and time. DateTime.hop_interval \u2014 Positive Hop interval. Interval.window_interval \u2014 Positive Window interval. Interval.timezone \u2014 Timezone name (optional).", "The parameters above can also be passed to the function as a tuple.", "Returned values", "The exclusive upper bound of the corresponding hopping window. DateTime, Tuple or UInt32.", "NoteSince one record can be assigned to multiple hop windows, the function only returns the bound of the first window when hop function is used without WINDOW VIEW."], "Examples": ["SELECT hopEnd(now(), INTERVAL '1' DAY, INTERVAL '2' DAY);"], "Category": ["Time Window Functions"], "index": 1208, "vector_txt": "1208:Feature: hopEnd(time_attr, hop_interval, window_interval [, timezone]);\nDescription: hopEndReturns the exclusive upper bound of the corresponding hopping window.SyntaxhopEnd(time_attr, hop_interval, window_interval [, timezone]);Argumentstime_attr \u2014 Date and time. DateTime.hop_interval \u2014 Positive Hop interval. Interval.window_interval \u2014 Positive Window interval. Interval.timezone \u2014 Timezone name (optional).The parameters above can also be passed to the function as a tuple.Returned valuesThe exclusive upper bound of the corresponding hopping window. DateTime, Tuple or UInt32.NoteSince one record can be assigned to multiple hop windows, the function only returns the bound of the first window when hop function is used without WINDOW VIEW.\nExamples: SELECT hopEnd(now(), INTERVAL '1' DAY, INTERVAL '2' DAY);\nCategory: Time Window Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/time-window-functions"], "Title": ["Related content"], "Feature": ["Related content"], "Description": ["Related content", "Blog: Working with time series data in ClickHouse"], "Examples": [], "Category": ["Time Window Functions"], "index": 1209, "vector_txt": "1209:Feature: Related content\nDescription: Related contentBlog: Working with time series data in ClickHouse\nExamples: \nCategory: Time Window Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-functions"], "Title": ["tuple"], "Feature": ["tuple(x, y, ...)"], "Description": ["tuple", "A function that allows grouping multiple columns.\nFor columns C1, C2, ... with the types T1, T2, ..., it returns a named Tuple(C1 T1, C2 T2, ...) type tuple containing these columns if their names are unique and can be treated as unquoted identifiers, otherwise a Tuple(T1, T2, ...) is returned. There is no cost to execute the function.\nTuples are normally used as intermediate values for an argument of IN operators, or for creating a list of formal parameters of lambda functions. Tuples can\u2019t be written to a table.", "The function implements the operator (x, y, ...).", "Syntax", "tuple(x, y, ...)"], "Examples": ["tuple(x, y, ...)"], "Category": ["Tuples Functions"], "index": 1210, "vector_txt": "1210:Feature: tuple(x, y, ...)\nDescription: tupleA function that allows grouping multiple columns.\nFor columns C1, C2, ... with the types T1, T2, ..., it returns a named Tuple(C1 T1, C2 T2, ...) type tuple containing these columns if their names are unique and can be treated as unquoted identifiers, otherwise a Tuple(T1, T2, ...) is returned. There is no cost to execute the function.\nTuples are normally used as intermediate values for an argument of IN operators, or for creating a list of formal parameters of lambda functions. Tuples can\u2019t be written to a table.The function implements the operator (x, y, ...).Syntaxtuple(x, y, ...)\nExamples: tuple(x, y, ...)\nCategory: Tuples Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-functions"], "Title": ["tupleElement"], "Feature": ["tupleElement(tuple, index, [, default_value])tupleElement(tuple, name, [, default_value])"], "Description": ["tupleElement", "A function that allows getting a column from a tuple.", "If the second argument is a number index, it is the column index, starting from 1. If the second argument is a string name, it represents the name of the element. Besides, we can provide the third optional argument, such that when index out of bounds or no element exist for the name, the default value returned instead of throwing an exception. The second and third arguments, if provided, must be constants. There is no cost to execute the function.", "The function implements operators x.index and x.name.", "Syntax", "tupleElement(tuple, index, [, default_value])tupleElement(tuple, name, [, default_value])"], "Examples": ["tupleElement(tuple, index, [, default_value])tupleElement(tuple, name, [, default_value])"], "Category": ["Tuples Functions"], "index": 1211, "vector_txt": "1211:Feature: tupleElement(tuple, index, [, default_value])tupleElement(tuple, name, [, default_value])\nDescription: tupleElementA function that allows getting a column from a tuple.If the second argument is a number index, it is the column index, starting from 1. If the second argument is a string name, it represents the name of the element. Besides, we can provide the third optional argument, such that when index out of bounds or no element exist for the name, the default value returned instead of throwing an exception. The second and third arguments, if provided, must be constants. There is no cost to execute the function.The function implements operators x.index and x.name.SyntaxtupleElement(tuple, index, [, default_value])tupleElement(tuple, name, [, default_value])\nExamples: tupleElement(tuple, index, [, default_value])tupleElement(tuple, name, [, default_value])\nCategory: Tuples Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-functions"], "Title": ["untuple"], "Feature": ["untuple(x)"], "Description": ["untuple", "Performs syntactic substitution of tuple elements in the call location.", "The names of the result columns are implementation-specific and subject to change. Do not assume specific column names after untuple.", "Syntax", "untuple(x)", "You can use the EXCEPT expression to skip columns as a result of the query.", "Arguments", "x \u2014 A tuple function, column, or tuple of elements. Tuple.", "Returned value", "None."], "Examples": ["SELECT untuple(v6) FROM kv;", "SELECT untuple((* EXCEPT (v2, v3),)) FROM kv;"], "Category": ["Tuples Functions"], "index": 1212, "vector_txt": "1212:Feature: untuple(x)\nDescription: untuplePerforms syntactic substitution of tuple elements in the call location.The names of the result columns are implementation-specific and subject to change. Do not assume specific column names after untuple.Syntaxuntuple(x)You can use the EXCEPT expression to skip columns as a result of the query.Argumentsx \u2014 A tuple function, column, or tuple of elements. Tuple.Returned valueNone.\nExamples: SELECT untuple(v6) FROM kv;SELECT untuple((* EXCEPT (v2, v3),)) FROM kv;\nCategory: Tuples Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayFill(func, arr1, ...)"], "Feature": ["arrayFill(func, arr1, ...)"], "Description": ["arrayFill(func, arr1, ...)", "Scan through arr1 from the first element to the last element and replace arr1[i] by arr1[i - 1] if func(arr1[i], ..., arrN[i]) returns 0. The first element of arr1 will not be replaced."], "Examples": ["SELECT arrayFill(x -> not isNull(x), [1, null, 3, 11, 12, null, null, 5, 6, 14, null, null]) AS res"], "Category": ["Arrays Functions"], "index": 1213, "vector_txt": "1213:Feature: arrayFill(func, arr1, ...)\nDescription: arrayFill(func, arr1, ...)Scan through arr1 from the first element to the last element and replace arr1[i] by arr1[i - 1] if func(arr1[i], ..., arrN[i]) returns 0. The first element of arr1 will not be replaced.\nExamples: SELECT arrayFill(x -> not isNull(x), [1, null, 3, 11, 12, null, null, 5, 6, 14, null, null]) AS res\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-functions"], "Title": ["tupleHammingDistance"], "Feature": ["tupleHammingDistance(tuple1, tuple2)"], "Description": ["tupleHammingDistance", "Returns the Hamming Distance between two tuples of the same size.", "Syntax", "tupleHammingDistance(tuple1, tuple2)", "Arguments", "tuple1 \u2014 First tuple. Tuple.tuple2 \u2014 Second tuple. Tuple.", "Tuples should have the same type of the elements.", "Returned value", "The Hamming distance.", "NoteThe result type is calculated the same way it is for Arithmetic functions, based on the number of elements in the input tuples.", "SELECT    toTypeName(tupleHammingDistance(tuple(0), tuple(0))) AS t1,    toTypeName(tupleHammingDistance((0, 0), (0, 0))) AS t2,    toTypeName(tupleHammingDistance((0, 0, 0), (0, 0, 0))) AS t3,    toTypeName(tupleHammingDistance((0, 0, 0, 0), (0, 0, 0, 0))) AS t4,    toTypeName(tupleHammingDistance((0, 0, 0, 0, 0), (0, 0, 0, 0, 0))) AS t5", "\u250c\u2500t1\u2500\u2500\u2500\u2500\u252c\u2500t2\u2500\u2500\u2500\u2500\u2500\u252c\u2500t3\u2500\u2500\u2500\u2500\u2500\u252c\u2500t4\u2500\u2500\u2500\u2500\u2500\u252c\u2500t5\u2500\u2500\u2500\u2500\u2500\u2510\u2502 UInt8 \u2502 UInt16 \u2502 UInt32 \u2502 UInt64 \u2502 UInt64 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Examples": ["SELECT tupleHammingDistance((1, 2, 3), (3, 2, 1)) AS HammingDistance;", "SELECT tupleHammingDistance(wordShingleMinHash(string), wordShingleMinHashCaseInsensitive(string)) AS HammingDistanceFROM (SELECT 'ClickHouse is a column-oriented database management system for online analytical processing of queries.' AS string);"], "Category": ["Tuples Functions"], "index": 1214, "vector_txt": "1214:Feature: tupleHammingDistance(tuple1, tuple2)\nDescription: tupleHammingDistanceReturns the Hamming Distance between two tuples of the same size.SyntaxtupleHammingDistance(tuple1, tuple2)Argumentstuple1 \u2014 First tuple. Tuple.tuple2 \u2014 Second tuple. Tuple.Tuples should have the same type of the elements.Returned valueThe Hamming distance.NoteThe result type is calculated the same way it is for Arithmetic functions, based on the number of elements in the input tuples.SELECT    toTypeName(tupleHammingDistance(tuple(0), tuple(0))) AS t1,    toTypeName(tupleHammingDistance((0, 0), (0, 0))) AS t2,    toTypeName(tupleHammingDistance((0, 0, 0), (0, 0, 0))) AS t3,    toTypeName(tupleHammingDistance((0, 0, 0, 0), (0, 0, 0, 0))) AS t4,    toTypeName(tupleHammingDistance((0, 0, 0, 0, 0), (0, 0, 0, 0, 0))) AS t5\u250c\u2500t1\u2500\u2500\u2500\u2500\u252c\u2500t2\u2500\u2500\u2500\u2500\u2500\u252c\u2500t3\u2500\u2500\u2500\u2500\u2500\u252c\u2500t4\u2500\u2500\u2500\u2500\u2500\u252c\u2500t5\u2500\u2500\u2500\u2500\u2500\u2510\u2502 UInt8 \u2502 UInt16 \u2502 UInt32 \u2502 UInt64 \u2502 UInt64 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nExamples: SELECT tupleHammingDistance((1, 2, 3), (3, 2, 1)) AS HammingDistance;SELECT tupleHammingDistance(wordShingleMinHash(string), wordShingleMinHashCaseInsensitive(string)) AS HammingDistanceFROM (SELECT 'ClickHouse is a column-oriented database management system for online analytical processing of queries.' AS string);\nCategory: Tuples Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-functions"], "Title": ["tupleToNameValuePairs"], "Feature": ["tupleToNameValuePairs(tuple)"], "Description": ["tupleToNameValuePairs", "Turns a named tuple into an array of (name, value) pairs. For a Tuple(a T, b T, ..., c T) returns Array(Tuple(String, T), ...)\nin which the Strings represents the named fields of the tuple and T are the values associated with those names. All values in the tuple should be of the same type.", "Syntax", "tupleToNameValuePairs(tuple)", "Arguments", "tuple \u2014 Named tuple. Tuple with any types of values.", "Returned value", "An array with (name, value) pairs. Array(Tuple(String, ...))."], "Examples": ["CREATE TABLE tupletest (col Tuple(user_ID UInt64, session_ID UInt64)) ENGINE = Memory;INSERT INTO tupletest VALUES (tuple( 100, 2502)), (tuple(1,100));SELECT tupleToNameValuePairs(col) FROM tupletest;", "CREATE TABLE tupletest (col Tuple(CPU Float64, Memory Float64, Disk Float64)) ENGINE = Memory;INSERT INTO tupletest VALUES(tuple(3.3, 5.5, 6.6));SELECT arrayJoin(tupleToNameValuePairs(col)) FROM tupletest;", "SELECT tupleToNameValuePairs(tuple(3, 2, 1));"], "Category": ["Tuples Functions"], "index": 1215, "vector_txt": "1215:Feature: tupleToNameValuePairs(tuple)\nDescription: tupleToNameValuePairsTurns a named tuple into an array of (name, value) pairs. For a Tuple(a T, b T, ..., c T) returns Array(Tuple(String, T), ...)\nin which the Strings represents the named fields of the tuple and T are the values associated with those names. All values in the tuple should be of the same type.SyntaxtupleToNameValuePairs(tuple)Argumentstuple \u2014 Named tuple. Tuple with any types of values.Returned valueAn array with (name, value) pairs. Array(Tuple(String, ...)).\nExamples: CREATE TABLE tupletest (col Tuple(user_ID UInt64, session_ID UInt64)) ENGINE = Memory;INSERT INTO tupletest VALUES (tuple( 100, 2502)), (tuple(1,100));SELECT tupleToNameValuePairs(col) FROM tupletest;CREATE TABLE tupletest (col Tuple(CPU Float64, Memory Float64, Disk Float64)) ENGINE = Memory;INSERT INTO tupletest VALUES(tuple(3.3, 5.5, 6.6));SELECT arrayJoin(tupleToNameValuePairs(col)) FROM tupletest;SELECT tupleToNameValuePairs(tuple(3, 2, 1));\nCategory: Tuples Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-functions"], "Title": ["tupleNames"], "Feature": ["tupleNames(tuple)"], "Description": ["tupleNames", "Converts a tuple into an array of column names. For a tuple in the form Tuple(a T, b T, ...), it returns an array of strings representing the named columns of the tuple. If the tuple elements do not have explicit names, their indices will be used as the column names instead.", "Syntax", "tupleNames(tuple)", "Arguments", "tuple \u2014 Named tuple. Tuple with any types of values.", "Returned value", "An array with strings.", "Type: Array(Tuple(String, ...))."], "Examples": ["CREATE TABLE tupletest (col Tuple(user_ID UInt64, session_ID UInt64)) ENGINE = Memory;INSERT INTO tupletest VALUES (tuple(1, 2));SELECT tupleNames(col) FROM tupletest;", "SELECT tupleNames(tuple(3, 2, 1));"], "Category": ["Tuples Functions"], "index": 1216, "vector_txt": "1216:Feature: tupleNames(tuple)\nDescription: tupleNamesConverts a tuple into an array of column names. For a tuple in the form Tuple(a T, b T, ...), it returns an array of strings representing the named columns of the tuple. If the tuple elements do not have explicit names, their indices will be used as the column names instead.SyntaxtupleNames(tuple)Argumentstuple \u2014 Named tuple. Tuple with any types of values.Returned valueAn array with strings.Type: Array(Tuple(String, ...)).\nExamples: CREATE TABLE tupletest (col Tuple(user_ID UInt64, session_ID UInt64)) ENGINE = Memory;INSERT INTO tupletest VALUES (tuple(1, 2));SELECT tupleNames(col) FROM tupletest;SELECT tupleNames(tuple(3, 2, 1));\nCategory: Tuples Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-functions"], "Title": ["tuplePlus"], "Feature": ["tuplePlus(tuple1, tuple2)"], "Description": ["tuplePlus", "Calculates the sum of corresponding values of two tuples of the same size.", "Syntax", "tuplePlus(tuple1, tuple2)", "Alias: vectorSum.", "Arguments", "tuple1 \u2014 First tuple. Tuple.tuple2 \u2014 Second tuple. Tuple.", "Returned value", "Tuple with the sum. Tuple."], "Examples": ["SELECT tuplePlus((1, 2), (2, 3));"], "Category": ["Tuples Functions"], "index": 1217, "vector_txt": "1217:Feature: tuplePlus(tuple1, tuple2)\nDescription: tuplePlusCalculates the sum of corresponding values of two tuples of the same size.SyntaxtuplePlus(tuple1, tuple2)Alias: vectorSum.Argumentstuple1 \u2014 First tuple. Tuple.tuple2 \u2014 Second tuple. Tuple.Returned valueTuple with the sum. Tuple.\nExamples: SELECT tuplePlus((1, 2), (2, 3));\nCategory: Tuples Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-functions"], "Title": ["tupleMinus"], "Feature": ["tupleMinus(tuple1, tuple2)"], "Description": ["tupleMinus", "Calculates the subtraction of corresponding values of two tuples of the same size.", "Syntax", "tupleMinus(tuple1, tuple2)", "Alias: vectorDifference.", "Arguments", "tuple1 \u2014 First tuple. Tuple.tuple2 \u2014 Second tuple. Tuple.", "Returned value", "Tuple with the result of subtraction. Tuple."], "Examples": ["SELECT tupleMinus((1, 2), (2, 3));"], "Category": ["Tuples Functions"], "index": 1218, "vector_txt": "1218:Feature: tupleMinus(tuple1, tuple2)\nDescription: tupleMinusCalculates the subtraction of corresponding values of two tuples of the same size.SyntaxtupleMinus(tuple1, tuple2)Alias: vectorDifference.Argumentstuple1 \u2014 First tuple. Tuple.tuple2 \u2014 Second tuple. Tuple.Returned valueTuple with the result of subtraction. Tuple.\nExamples: SELECT tupleMinus((1, 2), (2, 3));\nCategory: Tuples Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-functions"], "Title": ["tupleMultiply"], "Feature": ["tupleMultiply(tuple1, tuple2)"], "Description": ["tupleMultiply", "Calculates the multiplication of corresponding values of two tuples of the same size.", "Syntax", "tupleMultiply(tuple1, tuple2)", "Arguments", "tuple1 \u2014 First tuple. Tuple.tuple2 \u2014 Second tuple. Tuple.", "Returned value", "Tuple with the multiplication. Tuple."], "Examples": ["SELECT tupleMultiply((1, 2), (2, 3));"], "Category": ["Tuples Functions"], "index": 1219, "vector_txt": "1219:Feature: tupleMultiply(tuple1, tuple2)\nDescription: tupleMultiplyCalculates the multiplication of corresponding values of two tuples of the same size.SyntaxtupleMultiply(tuple1, tuple2)Argumentstuple1 \u2014 First tuple. Tuple.tuple2 \u2014 Second tuple. Tuple.Returned valueTuple with the multiplication. Tuple.\nExamples: SELECT tupleMultiply((1, 2), (2, 3));\nCategory: Tuples Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-functions"], "Title": ["tupleDivide"], "Feature": ["tupleDivide(tuple1, tuple2)"], "Description": ["tupleDivide", "Calculates the division of corresponding values of two tuples of the same size. Note that division by zero will return inf.", "Syntax", "tupleDivide(tuple1, tuple2)", "Arguments", "tuple1 \u2014 First tuple. Tuple.tuple2 \u2014 Second tuple. Tuple.", "Returned value", "Tuple with the result of division. Tuple."], "Examples": ["SELECT tupleDivide((1, 2), (2, 3));"], "Category": ["Tuples Functions"], "index": 1220, "vector_txt": "1220:Feature: tupleDivide(tuple1, tuple2)\nDescription: tupleDivideCalculates the division of corresponding values of two tuples of the same size. Note that division by zero will return inf.SyntaxtupleDivide(tuple1, tuple2)Argumentstuple1 \u2014 First tuple. Tuple.tuple2 \u2014 Second tuple. Tuple.Returned valueTuple with the result of division. Tuple.\nExamples: SELECT tupleDivide((1, 2), (2, 3));\nCategory: Tuples Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-functions"], "Title": ["tupleNegate"], "Feature": ["tupleNegate(tuple)"], "Description": ["tupleNegate", "Calculates the negation of the tuple values.", "Syntax", "tupleNegate(tuple)", "Arguments", "tuple \u2014 Tuple.", "Returned value", "Tuple with the result of negation. Tuple."], "Examples": ["SELECT tupleNegate((1,  2));"], "Category": ["Tuples Functions"], "index": 1221, "vector_txt": "1221:Feature: tupleNegate(tuple)\nDescription: tupleNegateCalculates the negation of the tuple values.SyntaxtupleNegate(tuple)Argumentstuple \u2014 Tuple.Returned valueTuple with the result of negation. Tuple.\nExamples: SELECT tupleNegate((1,  2));\nCategory: Tuples Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-functions"], "Title": ["tupleMultiplyByNumber"], "Feature": ["tupleMultiplyByNumber(tuple, number)"], "Description": ["tupleMultiplyByNumber", "Returns a tuple with all values multiplied by a number.", "Syntax", "tupleMultiplyByNumber(tuple, number)", "Arguments", "tuple \u2014 Tuple.number \u2014 Multiplier. Int/UInt, Float or Decimal.", "Returned value", "Tuple with multiplied values. Tuple."], "Examples": ["SELECT tupleMultiplyByNumber((1, 2), -2.1);"], "Category": ["Tuples Functions"], "index": 1222, "vector_txt": "1222:Feature: tupleMultiplyByNumber(tuple, number)\nDescription: tupleMultiplyByNumberReturns a tuple with all values multiplied by a number.SyntaxtupleMultiplyByNumber(tuple, number)Argumentstuple \u2014 Tuple.number \u2014 Multiplier. Int/UInt, Float or Decimal.Returned valueTuple with multiplied values. Tuple.\nExamples: SELECT tupleMultiplyByNumber((1, 2), -2.1);\nCategory: Tuples Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-functions"], "Title": ["tupleDivideByNumber"], "Feature": ["tupleDivideByNumber(tuple, number)"], "Description": ["tupleDivideByNumber", "Returns a tuple with all values divided by a number. Note that division by zero will return inf.", "Syntax", "tupleDivideByNumber(tuple, number)", "Arguments", "tuple \u2014 Tuple.number \u2014 Divider. Int/UInt, Float or Decimal.", "Returned value", "Tuple with divided values. Tuple."], "Examples": ["SELECT tupleDivideByNumber((1, 2), 0.5);"], "Category": ["Tuples Functions"], "index": 1223, "vector_txt": "1223:Feature: tupleDivideByNumber(tuple, number)\nDescription: tupleDivideByNumberReturns a tuple with all values divided by a number. Note that division by zero will return inf.SyntaxtupleDivideByNumber(tuple, number)Argumentstuple \u2014 Tuple.number \u2014 Divider. Int/UInt, Float or Decimal.Returned valueTuple with divided values. Tuple.\nExamples: SELECT tupleDivideByNumber((1, 2), 0.5);\nCategory: Tuples Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayReverseFill(func, arr1, ...)"], "Feature": ["arrayReverseFill(func, arr1, ...)"], "Description": ["arrayReverseFill(func, arr1, ...)", "Scan through arr1 from the last element to the first element and replace arr1[i] by arr1[i + 1] if func(arr1[i], ..., arrN[i]) returns 0. The last element of arr1 will not be replaced."], "Examples": ["SELECT arrayReverseFill(x -> not isNull(x), [1, null, 3, 11, 12, null, null, 5, 6, 14, null, null]) AS res"], "Category": ["Arrays Functions"], "index": 1224, "vector_txt": "1224:Feature: arrayReverseFill(func, arr1, ...)\nDescription: arrayReverseFill(func, arr1, ...)Scan through arr1 from the last element to the first element and replace arr1[i] by arr1[i + 1] if func(arr1[i], ..., arrN[i]) returns 0. The last element of arr1 will not be replaced.\nExamples: SELECT arrayReverseFill(x -> not isNull(x), [1, null, 3, 11, 12, null, null, 5, 6, 14, null, null]) AS res\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-functions"], "Title": ["tupleConcat"], "Feature": ["tupleConcat(tuples)"], "Description": ["tupleConcat", "Combines tuples passed as arguments.", "tupleConcat(tuples)", "Arguments", "tuples \u2013 Arbitrary number of arguments of Tuple type."], "Examples": ["SELECT tupleConcat((1, 2), (3, 4), (true, false)) AS res"], "Category": ["Tuples Functions"], "index": 1225, "vector_txt": "1225:Feature: tupleConcat(tuples)\nDescription: tupleConcatCombines tuples passed as arguments.tupleConcat(tuples)Argumentstuples \u2013 Arbitrary number of arguments of Tuple type.\nExamples: SELECT tupleConcat((1, 2), (3, 4), (true, false)) AS res\nCategory: Tuples Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-functions"], "Title": ["tupleIntDiv"], "Feature": ["tupleIntDiv(tuple_num, tuple_div)"], "Description": ["tupleIntDiv", "Does integer division of a tuple of numerators and a tuple of denominators, and returns a tuple of the quotients.", "Syntax", "tupleIntDiv(tuple_num, tuple_div)", "Parameters", "tuple_num: Tuple of numerator values. Tuple of numeric type.tuple_div: Tuple of divisor values. Tuple of numeric type.", "Returned value", "Tuple of the quotients of tuple_num and tuple_div. Tuple of integer values.", "Implementation details", "If either tuple_num or tuple_div contain non-integer values then the result is calculated by rounding to the nearest integer for each non-integer numerator or divisor.An error will be thrown for division by 0. "], "Examples": ["SELECT tupleIntDiv((15, 10, 5), (5, 5, 5));", "SELECT tupleIntDiv((15, 10, 5), (5.5, 5.5, 5.5));"], "Category": ["Tuples Functions"], "index": 1226, "vector_txt": "1226:Feature: tupleIntDiv(tuple_num, tuple_div)\nDescription: tupleIntDivDoes integer division of a tuple of numerators and a tuple of denominators, and returns a tuple of the quotients.SyntaxtupleIntDiv(tuple_num, tuple_div)Parameterstuple_num: Tuple of numerator values. Tuple of numeric type.tuple_div: Tuple of divisor values. Tuple of numeric type.Returned valueTuple of the quotients of tuple_num and tuple_div. Tuple of integer values.Implementation detailsIf either tuple_num or tuple_div contain non-integer values then the result is calculated by rounding to the nearest integer for each non-integer numerator or divisor.An error will be thrown for division by 0. \nExamples: SELECT tupleIntDiv((15, 10, 5), (5, 5, 5));SELECT tupleIntDiv((15, 10, 5), (5.5, 5.5, 5.5));\nCategory: Tuples Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-functions"], "Title": ["tupleIntDivOrZero"], "Feature": ["tupleIntDivOrZero(tuple_num, tuple_div)"], "Description": ["tupleIntDivOrZero", "Like tupleIntDiv it does integer division of a tuple of numerators and a tuple of denominators, and returns a tuple of the quotients. It does not throw an error for 0 divisors, but rather returns the quotient as 0. ", "Syntax", "tupleIntDivOrZero(tuple_num, tuple_div)", "tuple_num: Tuple of numerator values. Tuple of numeric type.tuple_div: Tuple of divisor values. Tuple of numeric type.", "Returned value", "Tuple of the quotients of tuple_num and tuple_div. Tuple of integer values.Returns 0 for quotients where the divisor is 0.", "Implementation details", "If either tuple_num or tuple_div contain non-integer values then the result is calculated by rounding to the nearest integer for each non-integer numerator or divisor as in tupleIntDiv."], "Examples": ["SELECT tupleIntDivOrZero((5, 10, 15), (0, 0, 0));"], "Category": ["Tuples Functions"], "index": 1227, "vector_txt": "1227:Feature: tupleIntDivOrZero(tuple_num, tuple_div)\nDescription: tupleIntDivOrZeroLike tupleIntDiv it does integer division of a tuple of numerators and a tuple of denominators, and returns a tuple of the quotients. It does not throw an error for 0 divisors, but rather returns the quotient as 0. SyntaxtupleIntDivOrZero(tuple_num, tuple_div)tuple_num: Tuple of numerator values. Tuple of numeric type.tuple_div: Tuple of divisor values. Tuple of numeric type.Returned valueTuple of the quotients of tuple_num and tuple_div. Tuple of integer values.Returns 0 for quotients where the divisor is 0.Implementation detailsIf either tuple_num or tuple_div contain non-integer values then the result is calculated by rounding to the nearest integer for each non-integer numerator or divisor as in tupleIntDiv.\nExamples: SELECT tupleIntDivOrZero((5, 10, 15), (0, 0, 0));\nCategory: Tuples Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-functions"], "Title": ["tupleIntDivByNumber"], "Feature": ["tupleIntDivByNumber(tuple_num, div)"], "Description": ["tupleIntDivByNumber", "Does integer division of a tuple of numerators by a given denominator, and returns a tuple of the quotients.", "Syntax", "tupleIntDivByNumber(tuple_num, div)", "Parameters", "tuple_num: Tuple of numerator values. Tuple of numeric type.div: The divisor value. Numeric type.", "Returned value", "Tuple of the quotients of tuple_num and div. Tuple of integer values.", "Implementation details", "If either tuple_num or div contain non-integer values then the result is calculated by rounding to the nearest integer for each non-integer numerator or divisor.An error will be thrown for division by 0. "], "Examples": ["SELECT tupleIntDivByNumber((15, 10, 5), 5);", "SELECT tupleIntDivByNumber((15.2, 10.7, 5.5), 5.8);"], "Category": ["Tuples Functions"], "index": 1228, "vector_txt": "1228:Feature: tupleIntDivByNumber(tuple_num, div)\nDescription: tupleIntDivByNumberDoes integer division of a tuple of numerators by a given denominator, and returns a tuple of the quotients.SyntaxtupleIntDivByNumber(tuple_num, div)Parameterstuple_num: Tuple of numerator values. Tuple of numeric type.div: The divisor value. Numeric type.Returned valueTuple of the quotients of tuple_num and div. Tuple of integer values.Implementation detailsIf either tuple_num or div contain non-integer values then the result is calculated by rounding to the nearest integer for each non-integer numerator or divisor.An error will be thrown for division by 0. \nExamples: SELECT tupleIntDivByNumber((15, 10, 5), 5);SELECT tupleIntDivByNumber((15.2, 10.7, 5.5), 5.8);\nCategory: Tuples Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-functions"], "Title": ["tupleIntDivOrZeroByNumber"], "Feature": ["tupleIntDivOrZeroByNumber(tuple_num, div)"], "Description": ["tupleIntDivOrZeroByNumber", "Like tupleIntDivByNumber it does integer division of a tuple of numerators by a given denominator, and returns a tuple of the quotients. It does not throw an error for 0 divisors, but rather returns the quotient as 0.", "Syntax", "tupleIntDivOrZeroByNumber(tuple_num, div)", "Parameters", "tuple_num: Tuple of numerator values. Tuple of numeric type.div: The divisor value. Numeric type.", "Returned value", "Tuple of the quotients of tuple_num and div. Tuple of integer values.Returns 0 for quotients where the divisor is 0.", "Implementation details", "If either tuple_num or div contain non-integer values then the result is calculated by rounding to the nearest integer for each non-integer numerator or divisor as in tupleIntDivByNumber."], "Examples": ["SELECT tupleIntDivOrZeroByNumber((15, 10, 5), 5);", "SELECT tupleIntDivOrZeroByNumber((15, 10, 5), 0)"], "Category": ["Tuples Functions"], "index": 1229, "vector_txt": "1229:Feature: tupleIntDivOrZeroByNumber(tuple_num, div)\nDescription: tupleIntDivOrZeroByNumberLike tupleIntDivByNumber it does integer division of a tuple of numerators by a given denominator, and returns a tuple of the quotients. It does not throw an error for 0 divisors, but rather returns the quotient as 0.SyntaxtupleIntDivOrZeroByNumber(tuple_num, div)Parameterstuple_num: Tuple of numerator values. Tuple of numeric type.div: The divisor value. Numeric type.Returned valueTuple of the quotients of tuple_num and div. Tuple of integer values.Returns 0 for quotients where the divisor is 0.Implementation detailsIf either tuple_num or div contain non-integer values then the result is calculated by rounding to the nearest integer for each non-integer numerator or divisor as in tupleIntDivByNumber.\nExamples: SELECT tupleIntDivOrZeroByNumber((15, 10, 5), 5);SELECT tupleIntDivOrZeroByNumber((15, 10, 5), 0)\nCategory: Tuples Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-functions"], "Title": ["tupleModulo"], "Feature": ["tupleModulo(tuple_num, tuple_mod)"], "Description": ["tupleModulo", "Returns a tuple of the moduli (remainders) of division operations of two tuples.", "Syntax", "tupleModulo(tuple_num, tuple_mod)", "Parameters", "tuple_num: Tuple of numerator values. Tuple of numeric type.tuple_div: Tuple of modulus values. Tuple of numeric type.", "Returned value", "Tuple of the remainders of division of tuple_num and tuple_div. Tuple of non-zero integer values.An error is thrown for division by zero."], "Examples": ["SELECT tupleModulo((15, 10, 5), (5, 3, 2));"], "Category": ["Tuples Functions"], "index": 1230, "vector_txt": "1230:Feature: tupleModulo(tuple_num, tuple_mod)\nDescription: tupleModuloReturns a tuple of the moduli (remainders) of division operations of two tuples.SyntaxtupleModulo(tuple_num, tuple_mod)Parameterstuple_num: Tuple of numerator values. Tuple of numeric type.tuple_div: Tuple of modulus values. Tuple of numeric type.Returned valueTuple of the remainders of division of tuple_num and tuple_div. Tuple of non-zero integer values.An error is thrown for division by zero.\nExamples: SELECT tupleModulo((15, 10, 5), (5, 3, 2));\nCategory: Tuples Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-functions"], "Title": ["tupleModuloByNumber"], "Feature": ["tupleModuloByNumber(tuple_num, div)"], "Description": ["tupleModuloByNumber", "Returns a tuple of the moduli (remainders) of division operations of a tuple and a given divisor.", "Syntax", "tupleModuloByNumber(tuple_num, div)", "Parameters", "tuple_num: Tuple of numerator values. Tuple of numeric type.div: The divisor value. Numeric type.", "Returned value", "Tuple of the remainders of division of tuple_num and div. Tuple of non-zero integer values.An error is thrown for division by zero."], "Examples": ["SELECT tupleModuloByNumber((15, 10, 5), 2);"], "Category": ["Tuples Functions"], "index": 1231, "vector_txt": "1231:Feature: tupleModuloByNumber(tuple_num, div)\nDescription: tupleModuloByNumberReturns a tuple of the moduli (remainders) of division operations of a tuple and a given divisor.SyntaxtupleModuloByNumber(tuple_num, div)Parameterstuple_num: Tuple of numerator values. Tuple of numeric type.div: The divisor value. Numeric type.Returned valueTuple of the remainders of division of tuple_num and div. Tuple of non-zero integer values.An error is thrown for division by zero.\nExamples: SELECT tupleModuloByNumber((15, 10, 5), 2);\nCategory: Tuples Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-functions"], "Title": ["flattenTuple"], "Feature": ["flattenTuple(input)"], "Description": ["flattenTuple", "Returns a flattened output tuple from a nested named input tuple. Elements of the output tuple are the paths from the original input tuple. For instance: Tuple(a Int, Tuple(b Int, c Int)) -> Tuple(a Int, b Int, c Int). flattenTuple can be used to select all paths from type Object as separate columns.", "Syntax", "flattenTuple(input)", "Parameters", "input: Nested named tuple to flatten. Tuple.", "Returned value", "output tuple whose elements are paths from the original input. Tuple."], "Examples": ["CREATE TABLE t_flatten_tuple(t Tuple(t1 Nested(a UInt32, s String), b UInt32, t2 Tuple(k String, v UInt32))) ENGINE = Memory;INSERT INTO t_flatten_tuple VALUES (([(1, 'a'), (2, 'b')], 3, ('c', 4)));SELECT flattenTuple(t) FROM t_flatten_tuple;"], "Category": ["Tuples Functions"], "index": 1232, "vector_txt": "1232:Feature: flattenTuple(input)\nDescription: flattenTupleReturns a flattened output tuple from a nested named input tuple. Elements of the output tuple are the paths from the original input tuple. For instance: Tuple(a Int, Tuple(b Int, c Int)) -> Tuple(a Int, b Int, c Int). flattenTuple can be used to select all paths from type Object as separate columns.SyntaxflattenTuple(input)Parametersinput: Nested named tuple to flatten. Tuple.Returned valueoutput tuple whose elements are paths from the original input. Tuple.\nExamples: CREATE TABLE t_flatten_tuple(t Tuple(t1 Nested(a UInt32, s String), b UInt32, t2 Tuple(k String, v UInt32))) ENGINE = Memory;INSERT INTO t_flatten_tuple VALUES (([(1, 'a'), (2, 'b')], 3, ('c', 4)));SELECT flattenTuple(t) FROM t_flatten_tuple;\nCategory: Tuples Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-functions"], "Title": ["Distance functions"], "Feature": ["Distance functions"], "Description": ["Distance functions", "All supported functions are described in distance functions documentation."], "Examples": [], "Category": ["Tuples Functions"], "index": 1233, "vector_txt": "1233:Feature: Distance functions\nDescription: Distance functionsAll supported functions are described in distance functions documentation.\nExamples: \nCategory: Tuples Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["Common Issues with Data Conversion"], "Feature": ["Common Issues with Data Conversion"], "Description": ["Common Issues with Data Conversion", "ClickHouse generally uses the same behavior as C++ programs.", "to<type> functions and cast behave differently in some cases, for example in case of LowCardinality: cast removes LowCardinality trait to<type> functions don't. The same with Nullable, this behaviour is not compatible with SQL standard, and it can be changed using cast_keep_nullable setting.", "NoteBe aware of potential data loss if values of a datatype are converted to a smaller datatype (for example from Int64 to Int32) or between\nincompatible datatypes (for example from String to Int). Make sure to check carefully if the result is as expected."], "Examples": ["SELECT    toTypeName(toLowCardinality('') AS val) AS source_type,    toTypeName(toString(val)) AS to_type_result_type,    toTypeName(CAST(val, 'String')) AS cast_result_type\u250c\u2500source_type\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500to_type_result_type\u2500\u2500\u2500\u2500\u252c\u2500cast_result_type\u2500\u2510\u2502 LowCardinality(String) \u2502 LowCardinality(String) \u2502 String           \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT    toTypeName(toNullable('') AS val) AS source_type,    toTypeName(toString(val)) AS to_type_result_type,    toTypeName(CAST(val, 'String')) AS cast_result_type\u250c\u2500source_type\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500to_type_result_type\u2500\u252c\u2500cast_result_type\u2500\u2510\u2502 Nullable(String) \u2502 Nullable(String)    \u2502 String           \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT    toTypeName(toNullable('') AS val) AS source_type,    toTypeName(toString(val)) AS to_type_result_type,    toTypeName(CAST(val, 'String')) AS cast_result_typeSETTINGS cast_keep_nullable = 1\u250c\u2500source_type\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500to_type_result_type\u2500\u252c\u2500cast_result_type\u2500\u2510\u2502 Nullable(String) \u2502 Nullable(String)    \u2502 Nullable(String) \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Category": ["Type Conversion Functions"], "index": 1234, "vector_txt": "1234:Feature: Common Issues with Data Conversion\nDescription: Common Issues with Data ConversionClickHouse generally uses the same behavior as C++ programs.to<type> functions and cast behave differently in some cases, for example in case of LowCardinality: cast removes LowCardinality trait to<type> functions don't. The same with Nullable, this behaviour is not compatible with SQL standard, and it can be changed using cast_keep_nullable setting.NoteBe aware of potential data loss if values of a datatype are converted to a smaller datatype (for example from Int64 to Int32) or between\nincompatible datatypes (for example from String to Int). Make sure to check carefully if the result is as expected.\nExamples: SELECT    toTypeName(toLowCardinality('') AS val) AS source_type,    toTypeName(toString(val)) AS to_type_result_type,    toTypeName(CAST(val, 'String')) AS cast_result_type\u250c\u2500source_type\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500to_type_result_type\u2500\u2500\u2500\u2500\u252c\u2500cast_result_type\u2500\u2510\u2502 LowCardinality(String) \u2502 LowCardinality(String) \u2502 String           \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT    toTypeName(toNullable('') AS val) AS source_type,    toTypeName(toString(val)) AS to_type_result_type,    toTypeName(CAST(val, 'String')) AS cast_result_type\u250c\u2500source_type\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500to_type_result_type\u2500\u252c\u2500cast_result_type\u2500\u2510\u2502 Nullable(String) \u2502 Nullable(String)    \u2502 String           \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT    toTypeName(toNullable('') AS val) AS source_type,    toTypeName(toString(val)) AS to_type_result_type,    toTypeName(CAST(val, 'String')) AS cast_result_typeSETTINGS cast_keep_nullable = 1\u250c\u2500source_type\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500to_type_result_type\u2500\u252c\u2500cast_result_type\u2500\u2510\u2502 Nullable(String) \u2502 Nullable(String)    \u2502 Nullable(String) \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arraySplit(func, arr1, ...)"], "Feature": ["arraySplit(func, arr1, ...)"], "Description": ["arraySplit(func, arr1, ...)", "Split arr1 into multiple arrays. When func(arr1[i], ..., arrN[i]) returns something other than 0, the array will be split on the left hand side of the element. The array will not be split before the first element."], "Examples": ["SELECT arraySplit((x, y) -> y, [1, 2, 3, 4, 5], [1, 0, 0, 1, 0]) AS res"], "Category": ["Arrays Functions"], "index": 1235, "vector_txt": "1235:Feature: arraySplit(func, arr1, ...)\nDescription: arraySplit(func, arr1, ...)Split arr1 into multiple arrays. When func(arr1[i], ..., arrN[i]) returns something other than 0, the array will be split on the left hand side of the element. The array will not be split before the first element.\nExamples: SELECT arraySplit((x, y) -> y, [1, 2, 3, 4, 5], [1, 0, 0, 1, 0]) AS res\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toBool"], "Feature": ["toBool(expr)"], "Description": ["toBool", "Converts an input value to a value of type Bool. Throws an exception in case of an error.", "Syntax", "toBool(expr)", "Arguments", "expr \u2014 Expression returning a number or a string. Expression.", "Supported arguments:", "Values of type (U)Int8/16/32/64/128/256.Values of type Float32/64.Strings true or false (case-insensitive).", "Returned value", "Returns true or false based on evaluation of the argument. Bool."], "Examples": ["SELECT    toBool(toUInt8(1)),    toBool(toInt8(-1)),    toBool(toFloat32(1.01)),    toBool('true'),    toBool('false'),    toBool('FALSE')FORMAT Vertical"], "Category": ["Type Conversion Functions"], "index": 1236, "vector_txt": "1236:Feature: toBool(expr)\nDescription: toBoolConverts an input value to a value of type Bool. Throws an exception in case of an error.SyntaxtoBool(expr)Argumentsexpr \u2014 Expression returning a number or a string. Expression.Supported arguments:Values of type (U)Int8/16/32/64/128/256.Values of type Float32/64.Strings true or false (case-insensitive).Returned valueReturns true or false based on evaluation of the argument. Bool.\nExamples: SELECT    toBool(toUInt8(1)),    toBool(toInt8(-1)),    toBool(toFloat32(1.01)),    toBool('true'),    toBool('false'),    toBool('FALSE')FORMAT Vertical\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toInt8"], "Feature": ["toInt8(expr)"], "Description": ["toInt8", "Converts an input value to a value of type Int8. Throws an exception in case of an error.", "Syntax", "toInt8(expr)", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.", "Unsupported arguments:", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt8('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of Int8, overflow or underflow of the result occurs.\nThis is not considered an error.\nFor example: SELECT toInt8(128) == -128;.", "Returned value", "8-bit integer value. Int8.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toInt8(-8),    toInt8(-8.8),    toInt8('-8')FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1237, "vector_txt": "1237:Feature: toInt8(expr)\nDescription: toInt8Converts an input value to a value of type Int8. Throws an exception in case of an error.SyntaxtoInt8(expr)Argumentsexpr \u2014 Expression returning a number or a string representation of a number. Expression.Supported arguments:Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.Unsupported arguments:String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt8('0xc0fe');.NoteIf the input value cannot be represented within the bounds of Int8, overflow or underflow of the result occurs.\nThis is not considered an error.\nFor example: SELECT toInt8(128) == -128;.Returned value8-bit integer value. Int8.NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.\nExamples: SELECT    toInt8(-8),    toInt8(-8.8),    toInt8('-8')FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toInt8OrZero"], "Feature": ["toInt8OrZero(x)"], "Description": ["toInt8OrZero", "Like toInt8, this function converts an input value to a value of type Int8 but returns 0 in case of an error.", "Syntax", "toInt8OrZero(x)", "Arguments", "x \u2014 A String representation of a number. String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256.", "Unsupported arguments (return 0):", "String representations of ordinary Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt8OrZero('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of Int8, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "8-bit integer value if successful, otherwise 0. Int8.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toInt8OrZero('-8'),    toInt8OrZero('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1238, "vector_txt": "1238:Feature: toInt8OrZero(x)\nDescription: toInt8OrZeroLike toInt8, this function converts an input value to a value of type Int8 but returns 0 in case of an error.SyntaxtoInt8OrZero(x)Argumentsx \u2014 A String representation of a number. String.Supported arguments:String representations of (U)Int8/16/32/128/256.Unsupported arguments (return 0):String representations of ordinary Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt8OrZero('0xc0fe');.NoteIf the input value cannot be represented within the bounds of Int8, overflow or underflow of the result occurs.\nThis is not considered an error.Returned value8-bit integer value if successful, otherwise 0. Int8.NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.\nExamples: SELECT    toInt8OrZero('-8'),    toInt8OrZero('abc')FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toInt8OrNull"], "Feature": ["toInt8OrNull(x)"], "Description": ["toInt8OrNull", "Like toInt8, this function converts an input value to a value of type Int8 but returns NULL in case of an error.", "Syntax", "toInt8OrNull(x)", "Arguments", "x \u2014 A String representation of a number. String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256.", "Unsupported arguments (return \\N)", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt8OrNull('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of Int8, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "8-bit integer value if successful, otherwise NULL. Int8 / NULL.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toInt8OrNull('-8'),    toInt8OrNull('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1239, "vector_txt": "1239:Feature: toInt8OrNull(x)\nDescription: toInt8OrNullLike toInt8, this function converts an input value to a value of type Int8 but returns NULL in case of an error.SyntaxtoInt8OrNull(x)Argumentsx \u2014 A String representation of a number. String.Supported arguments:String representations of (U)Int8/16/32/128/256.Unsupported arguments (return \\N)String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt8OrNull('0xc0fe');.NoteIf the input value cannot be represented within the bounds of Int8, overflow or underflow of the result occurs.\nThis is not considered an error.Returned value8-bit integer value if successful, otherwise NULL. Int8 / NULL.NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.\nExamples: SELECT    toInt8OrNull('-8'),    toInt8OrNull('abc')FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toInt8OrDefault"], "Feature": ["toInt8OrDefault(expr[, default])"], "Description": ["toInt8OrDefault", "Like toInt8, this function converts an input value to a value of type Int8 but returns the default value in case of an error.\nIf no default value is passed then 0 is returned in case of an error.", "Syntax", "toInt8OrDefault(expr[, default])", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression / String.default (optional) \u2014 The default value to return if parsing to type Int8 is unsuccessful. Int8.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.", "Arguments for which the default value is returned:", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt8OrDefault('0xc0fe', CAST('-1', 'Int8'));.", "NoteIf the input value cannot be represented within the bounds of Int8, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "8-bit integer value if successful, otherwise returns the default value if passed or 0 if not. Int8.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.The default value type should be the same as the cast type."], "Examples": ["SELECT    toInt8OrDefault('-8', CAST('-1', 'Int8')),    toInt8OrDefault('abc', CAST('-1', 'Int8'))FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1240, "vector_txt": "1240:Feature: toInt8OrDefault(expr[, default])\nDescription: toInt8OrDefaultLike toInt8, this function converts an input value to a value of type Int8 but returns the default value in case of an error.\nIf no default value is passed then 0 is returned in case of an error.SyntaxtoInt8OrDefault(expr[, default])Argumentsexpr \u2014 Expression returning a number or a string representation of a number. Expression / String.default (optional) \u2014 The default value to return if parsing to type Int8 is unsuccessful. Int8.Supported arguments:Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.Arguments for which the default value is returned:String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt8OrDefault('0xc0fe', CAST('-1', 'Int8'));.NoteIf the input value cannot be represented within the bounds of Int8, overflow or underflow of the result occurs.\nThis is not considered an error.Returned value8-bit integer value if successful, otherwise returns the default value if passed or 0 if not. Int8.NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.The default value type should be the same as the cast type.\nExamples: SELECT    toInt8OrDefault('-8', CAST('-1', 'Int8')),    toInt8OrDefault('abc', CAST('-1', 'Int8'))FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toInt16"], "Feature": ["toInt16(expr)"], "Description": ["toInt16", "Converts an input value to a value of type Int16. Throws an exception in case of an error.", "Syntax", "toInt16(expr)", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.", "Unsupported arguments:", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt16('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of Int16, overflow or underflow of the result occurs.\nThis is not considered an error.\nFor example: SELECT toInt16(32768) == -32768;.", "Returned value", "16-bit integer value. Int16.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toInt16(-16),    toInt16(-16.16),    toInt16('-16')FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1241, "vector_txt": "1241:Feature: toInt16(expr)\nDescription: toInt16Converts an input value to a value of type Int16. Throws an exception in case of an error.SyntaxtoInt16(expr)Argumentsexpr \u2014 Expression returning a number or a string representation of a number. Expression.Supported arguments:Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.Unsupported arguments:String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt16('0xc0fe');.NoteIf the input value cannot be represented within the bounds of Int16, overflow or underflow of the result occurs.\nThis is not considered an error.\nFor example: SELECT toInt16(32768) == -32768;.Returned value16-bit integer value. Int16.NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.\nExamples: SELECT    toInt16(-16),    toInt16(-16.16),    toInt16('-16')FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toInt16OrZero"], "Feature": ["toInt16OrZero(x)"], "Description": ["toInt16OrZero", "Like toInt16, this function converts an input value to a value of type Int16 but returns 0 in case of an error.", "Syntax", "toInt16OrZero(x)", "Arguments", "x \u2014 A String representation of a number. String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256.", "Unsupported arguments (return 0):", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt16OrZero('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of Int16, overflow or underflow of the result occurs.\nThis is not considered as an error.", "Returned value", "16-bit integer value if successful, otherwise 0. Int16.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toInt16OrZero('-16'),    toInt16OrZero('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1242, "vector_txt": "1242:Feature: toInt16OrZero(x)\nDescription: toInt16OrZeroLike toInt16, this function converts an input value to a value of type Int16 but returns 0 in case of an error.SyntaxtoInt16OrZero(x)Argumentsx \u2014 A String representation of a number. String.Supported arguments:String representations of (U)Int8/16/32/128/256.Unsupported arguments (return 0):String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt16OrZero('0xc0fe');.NoteIf the input value cannot be represented within the bounds of Int16, overflow or underflow of the result occurs.\nThis is not considered as an error.Returned value16-bit integer value if successful, otherwise 0. Int16.NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.\nExamples: SELECT    toInt16OrZero('-16'),    toInt16OrZero('abc')FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toInt16OrNull"], "Feature": ["toInt16OrNull(x)"], "Description": ["toInt16OrNull", "Like toInt16, this function converts an input value to a value of type Int16 but returns NULL in case of an error.", "Syntax", "toInt16OrNull(x)", "Arguments", "x \u2014 A String representation of a number. String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256.", "Unsupported arguments (return \\N)", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt16OrNull('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of Int16, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "16-bit integer value if successful, otherwise NULL. Int16 / NULL.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toInt16OrNull('-16'),    toInt16OrNull('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1243, "vector_txt": "1243:Feature: toInt16OrNull(x)\nDescription: toInt16OrNullLike toInt16, this function converts an input value to a value of type Int16 but returns NULL in case of an error.SyntaxtoInt16OrNull(x)Argumentsx \u2014 A String representation of a number. String.Supported arguments:String representations of (U)Int8/16/32/128/256.Unsupported arguments (return \\N)String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt16OrNull('0xc0fe');.NoteIf the input value cannot be represented within the bounds of Int16, overflow or underflow of the result occurs.\nThis is not considered an error.Returned value16-bit integer value if successful, otherwise NULL. Int16 / NULL.NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.\nExamples: SELECT    toInt16OrNull('-16'),    toInt16OrNull('abc')FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toInt16OrDefault"], "Feature": ["toInt16OrDefault(expr[, default])"], "Description": ["toInt16OrDefault", "Like toInt16, this function converts an input value to a value of type Int16 but returns the default value in case of an error.\nIf no default value is passed then 0 is returned in case of an error.", "Syntax", "toInt16OrDefault(expr[, default])", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression / String.default (optional) \u2014 The default value to return if parsing to type Int16 is unsuccessful. Int16.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.", "Arguments for which the default value is returned:", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt16OrDefault('0xc0fe', CAST('-1', 'Int16'));.", "NoteIf the input value cannot be represented within the bounds of Int16, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "16-bit integer value if successful, otherwise returns the default value if passed or 0 if not. Int16.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.The default value type should be the same as the cast type."], "Examples": ["SELECT    toInt16OrDefault('-16', CAST('-1', 'Int16')),    toInt16OrDefault('abc', CAST('-1', 'Int16'))FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1244, "vector_txt": "1244:Feature: toInt16OrDefault(expr[, default])\nDescription: toInt16OrDefaultLike toInt16, this function converts an input value to a value of type Int16 but returns the default value in case of an error.\nIf no default value is passed then 0 is returned in case of an error.SyntaxtoInt16OrDefault(expr[, default])Argumentsexpr \u2014 Expression returning a number or a string representation of a number. Expression / String.default (optional) \u2014 The default value to return if parsing to type Int16 is unsuccessful. Int16.Supported arguments:Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.Arguments for which the default value is returned:String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt16OrDefault('0xc0fe', CAST('-1', 'Int16'));.NoteIf the input value cannot be represented within the bounds of Int16, overflow or underflow of the result occurs.\nThis is not considered an error.Returned value16-bit integer value if successful, otherwise returns the default value if passed or 0 if not. Int16.NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.The default value type should be the same as the cast type.\nExamples: SELECT    toInt16OrDefault('-16', CAST('-1', 'Int16')),    toInt16OrDefault('abc', CAST('-1', 'Int16'))FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toInt32"], "Feature": ["toInt32(expr)"], "Description": ["toInt32", "Converts an input value to a value of type Int32. Throws an exception in case of an error.", "Syntax", "toInt32(expr)", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.", "Unsupported arguments:", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt32('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of Int32, the result over or under flows.\nThis is not considered an error.\nFor example: SELECT toInt32(2147483648) == -2147483648;", "Returned value", "32-bit integer value. Int32.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toInt32(-32),    toInt32(-32.32),    toInt32('-32')FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1245, "vector_txt": "1245:Feature: toInt32(expr)\nDescription: toInt32Converts an input value to a value of type Int32. Throws an exception in case of an error.SyntaxtoInt32(expr)Argumentsexpr \u2014 Expression returning a number or a string representation of a number. Expression.Supported arguments:Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.Unsupported arguments:String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt32('0xc0fe');.NoteIf the input value cannot be represented within the bounds of Int32, the result over or under flows.\nThis is not considered an error.\nFor example: SELECT toInt32(2147483648) == -2147483648;Returned value32-bit integer value. Int32.NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.\nExamples: SELECT    toInt32(-32),    toInt32(-32.32),    toInt32('-32')FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayReverseSplit(func, arr1, ...)"], "Feature": ["arrayReverseSplit(func, arr1, ...)"], "Description": ["arrayReverseSplit(func, arr1, ...)", "Split arr1 into multiple arrays. When func(arr1[i], ..., arrN[i]) returns something other than 0, the array will be split on the right hand side of the element. The array will not be split after the last element."], "Examples": ["SELECT arrayReverseSplit((x, y) -> y, [1, 2, 3, 4, 5], [1, 0, 0, 1, 0]) AS res"], "Category": ["Arrays Functions"], "index": 1246, "vector_txt": "1246:Feature: arrayReverseSplit(func, arr1, ...)\nDescription: arrayReverseSplit(func, arr1, ...)Split arr1 into multiple arrays. When func(arr1[i], ..., arrN[i]) returns something other than 0, the array will be split on the right hand side of the element. The array will not be split after the last element.\nExamples: SELECT arrayReverseSplit((x, y) -> y, [1, 2, 3, 4, 5], [1, 0, 0, 1, 0]) AS res\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toInt32OrZero"], "Feature": ["toInt32OrZero(x)"], "Description": ["toInt32OrZero", "Like toInt32, this function converts an input value to a value of type Int32 but returns 0 in case of an error.", "Syntax", "toInt32OrZero(x)", "Arguments", "x \u2014 A String representation of a number. String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256.", "Unsupported arguments (return 0):", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt32OrZero('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of Int32, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "32-bit integer value if successful, otherwise 0. Int32", "NoteThe function uses rounding towards zero, meaning it truncate fractional digits of numbers."], "Examples": ["SELECT    toInt32OrZero('-32'),    toInt32OrZero('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1247, "vector_txt": "1247:Feature: toInt32OrZero(x)\nDescription: toInt32OrZeroLike toInt32, this function converts an input value to a value of type Int32 but returns 0 in case of an error.SyntaxtoInt32OrZero(x)Argumentsx \u2014 A String representation of a number. String.Supported arguments:String representations of (U)Int8/16/32/128/256.Unsupported arguments (return 0):String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt32OrZero('0xc0fe');.NoteIf the input value cannot be represented within the bounds of Int32, overflow or underflow of the result occurs.\nThis is not considered an error.Returned value32-bit integer value if successful, otherwise 0. Int32NoteThe function uses rounding towards zero, meaning it truncate fractional digits of numbers.\nExamples: SELECT    toInt32OrZero('-32'),    toInt32OrZero('abc')FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toInt32OrNull"], "Feature": ["toInt32OrNull(x)"], "Description": ["toInt32OrNull", "Like toInt32, this function converts an input value to a value of type Int32 but returns NULL in case of an error.", "Syntax", "toInt32OrNull(x)", "Arguments", "x \u2014 A String representation of a number. String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256.", "Unsupported arguments (return \\N)", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt32OrNull('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of Int32, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "32-bit integer value if successful, otherwise NULL. Int32 / NULL.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toInt32OrNull('-32'),    toInt32OrNull('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1248, "vector_txt": "1248:Feature: toInt32OrNull(x)\nDescription: toInt32OrNullLike toInt32, this function converts an input value to a value of type Int32 but returns NULL in case of an error.SyntaxtoInt32OrNull(x)Argumentsx \u2014 A String representation of a number. String.Supported arguments:String representations of (U)Int8/16/32/128/256.Unsupported arguments (return \\N)String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt32OrNull('0xc0fe');.NoteIf the input value cannot be represented within the bounds of Int32, overflow or underflow of the result occurs.\nThis is not considered an error.Returned value32-bit integer value if successful, otherwise NULL. Int32 / NULL.NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.\nExamples: SELECT    toInt32OrNull('-32'),    toInt32OrNull('abc')FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toInt32OrDefault"], "Feature": ["toInt32OrDefault(expr[, default])"], "Description": ["toInt32OrDefault", "Like toInt32, this function converts an input value to a value of type Int32 but returns the default value in case of an error.\nIf no default value is passed then 0 is returned in case of an error.", "Syntax", "toInt32OrDefault(expr[, default])", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression / String.default (optional) \u2014 The default value to return if parsing to type Int32 is unsuccessful. Int32.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.", "Arguments for which the default value is returned:", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt32OrDefault('0xc0fe', CAST('-1', 'Int32'));.", "NoteIf the input value cannot be represented within the bounds of Int32, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "32-bit integer value if successful, otherwise returns the default value if passed or 0 if not. Int32.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.The default value type should be the same as the cast type."], "Examples": ["SELECT    toInt32OrDefault('-32', CAST('-1', 'Int32')),    toInt32OrDefault('abc', CAST('-1', 'Int32'))FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1249, "vector_txt": "1249:Feature: toInt32OrDefault(expr[, default])\nDescription: toInt32OrDefaultLike toInt32, this function converts an input value to a value of type Int32 but returns the default value in case of an error.\nIf no default value is passed then 0 is returned in case of an error.SyntaxtoInt32OrDefault(expr[, default])Argumentsexpr \u2014 Expression returning a number or a string representation of a number. Expression / String.default (optional) \u2014 The default value to return if parsing to type Int32 is unsuccessful. Int32.Supported arguments:Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.Arguments for which the default value is returned:String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt32OrDefault('0xc0fe', CAST('-1', 'Int32'));.NoteIf the input value cannot be represented within the bounds of Int32, overflow or underflow of the result occurs.\nThis is not considered an error.Returned value32-bit integer value if successful, otherwise returns the default value if passed or 0 if not. Int32.NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.The default value type should be the same as the cast type.\nExamples: SELECT    toInt32OrDefault('-32', CAST('-1', 'Int32')),    toInt32OrDefault('abc', CAST('-1', 'Int32'))FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toInt64"], "Feature": ["toInt64(expr)"], "Description": ["toInt64", "Converts an input value to a value of type Int64. Throws an exception in case of an error.", "Syntax", "toInt64(expr)", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.", "Unsupported types:", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt64('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of Int64, the result over or under flows.\nThis is not considered an error.\nFor example: SELECT toInt64(9223372036854775808) == -9223372036854775808;", "Returned value", "64-bit integer value. Int64.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toInt64(-64),    toInt64(-64.64),    toInt64('-64')FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1250, "vector_txt": "1250:Feature: toInt64(expr)\nDescription: toInt64Converts an input value to a value of type Int64. Throws an exception in case of an error.SyntaxtoInt64(expr)Argumentsexpr \u2014 Expression returning a number or a string representation of a number. Expression.Supported arguments:Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.Unsupported types:String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt64('0xc0fe');.NoteIf the input value cannot be represented within the bounds of Int64, the result over or under flows.\nThis is not considered an error.\nFor example: SELECT toInt64(9223372036854775808) == -9223372036854775808;Returned value64-bit integer value. Int64.NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.\nExamples: SELECT    toInt64(-64),    toInt64(-64.64),    toInt64('-64')FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toInt64OrZero"], "Feature": ["toInt64OrZero(x)"], "Description": ["toInt64OrZero", "Like toInt64, this function converts an input value to a value of type Int64 but returns 0 in case of an error.", "Syntax", "toInt64OrZero(x)", "Arguments", "x \u2014 A String representation of a number. String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256.", "Unsupported arguments (return 0):", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt64OrZero('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of Int64, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "64-bit integer value if successful, otherwise 0. Int64.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toInt64OrZero('-64'),    toInt64OrZero('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1251, "vector_txt": "1251:Feature: toInt64OrZero(x)\nDescription: toInt64OrZeroLike toInt64, this function converts an input value to a value of type Int64 but returns 0 in case of an error.SyntaxtoInt64OrZero(x)Argumentsx \u2014 A String representation of a number. String.Supported arguments:String representations of (U)Int8/16/32/128/256.Unsupported arguments (return 0):String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt64OrZero('0xc0fe');.NoteIf the input value cannot be represented within the bounds of Int64, overflow or underflow of the result occurs.\nThis is not considered an error.Returned value64-bit integer value if successful, otherwise 0. Int64.NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.\nExamples: SELECT    toInt64OrZero('-64'),    toInt64OrZero('abc')FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toInt64OrNull"], "Feature": ["toInt64OrNull(x)"], "Description": ["toInt64OrNull", "Like toInt64, this function converts an input value to a value of type Int64 but returns NULL in case of an error.", "Syntax", "toInt64OrNull(x)", "Arguments", "x \u2014 A String representation of a number. Expression / String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256.", "Unsupported arguments (return \\N)", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt64OrNull('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of Int64, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "64-bit integer value if successful, otherwise NULL. Int64 / NULL.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toInt64OrNull('-64'),    toInt64OrNull('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1252, "vector_txt": "1252:Feature: toInt64OrNull(x)\nDescription: toInt64OrNullLike toInt64, this function converts an input value to a value of type Int64 but returns NULL in case of an error.SyntaxtoInt64OrNull(x)Argumentsx \u2014 A String representation of a number. Expression / String.Supported arguments:String representations of (U)Int8/16/32/128/256.Unsupported arguments (return \\N)String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt64OrNull('0xc0fe');.NoteIf the input value cannot be represented within the bounds of Int64, overflow or underflow of the result occurs.\nThis is not considered an error.Returned value64-bit integer value if successful, otherwise NULL. Int64 / NULL.NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.\nExamples: SELECT    toInt64OrNull('-64'),    toInt64OrNull('abc')FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toInt64OrDefault"], "Feature": ["toInt64OrDefault(expr[, default])"], "Description": ["toInt64OrDefault", "Like toInt64, this function converts an input value to a value of type Int64 but returns the default value in case of an error.\nIf no default value is passed then 0 is returned in case of an error.", "Syntax", "toInt64OrDefault(expr[, default])", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression / String.default (optional) \u2014 The default value to return if parsing to type Int64 is unsuccessful. Int64.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.", "Arguments for which the default value is returned:", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt64OrDefault('0xc0fe', CAST('-1', 'Int64'));.", "NoteIf the input value cannot be represented within the bounds of Int64, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "64-bit integer value if successful, otherwise returns the default value if passed or 0 if not. Int64.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.The default value type should be the same as the cast type."], "Examples": ["SELECT    toInt64OrDefault('-64', CAST('-1', 'Int64')),    toInt64OrDefault('abc', CAST('-1', 'Int64'))FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1253, "vector_txt": "1253:Feature: toInt64OrDefault(expr[, default])\nDescription: toInt64OrDefaultLike toInt64, this function converts an input value to a value of type Int64 but returns the default value in case of an error.\nIf no default value is passed then 0 is returned in case of an error.SyntaxtoInt64OrDefault(expr[, default])Argumentsexpr \u2014 Expression returning a number or a string representation of a number. Expression / String.default (optional) \u2014 The default value to return if parsing to type Int64 is unsuccessful. Int64.Supported arguments:Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.Arguments for which the default value is returned:String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt64OrDefault('0xc0fe', CAST('-1', 'Int64'));.NoteIf the input value cannot be represented within the bounds of Int64, overflow or underflow of the result occurs.\nThis is not considered an error.Returned value64-bit integer value if successful, otherwise returns the default value if passed or 0 if not. Int64.NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.The default value type should be the same as the cast type.\nExamples: SELECT    toInt64OrDefault('-64', CAST('-1', 'Int64')),    toInt64OrDefault('abc', CAST('-1', 'Int64'))FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toInt128"], "Feature": ["toInt128(expr)"], "Description": ["toInt128", "Converts an input value to a value of type Int128. Throws an exception in case of an error.", "Syntax", "toInt128(expr)", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.", "Unsupported arguments:", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt128('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of Int128, the result over or under flows.\nThis is not considered an error.", "Returned value", "128-bit integer value. Int128.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toInt128(-128),    toInt128(-128.8),    toInt128('-128')FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1254, "vector_txt": "1254:Feature: toInt128(expr)\nDescription: toInt128Converts an input value to a value of type Int128. Throws an exception in case of an error.SyntaxtoInt128(expr)Argumentsexpr \u2014 Expression returning a number or a string representation of a number. Expression.Supported arguments:Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.Unsupported arguments:String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt128('0xc0fe');.NoteIf the input value cannot be represented within the bounds of Int128, the result over or under flows.\nThis is not considered an error.Returned value128-bit integer value. Int128.NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.\nExamples: SELECT    toInt128(-128),    toInt128(-128.8),    toInt128('-128')FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toInt128OrZero"], "Feature": ["toInt128OrZero(expr)"], "Description": ["toInt128OrZero", "Like toInt128, this function converts an input value to a value of type Int128 but returns 0 in case of an error.", "Syntax", "toInt128OrZero(expr)", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression / String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256.", "Unsupported arguments (return 0):", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt128OrZero('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of Int128, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "128-bit integer value if successful, otherwise 0. Int128.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toInt128OrZero('-128'),    toInt128OrZero('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1255, "vector_txt": "1255:Feature: toInt128OrZero(expr)\nDescription: toInt128OrZeroLike toInt128, this function converts an input value to a value of type Int128 but returns 0 in case of an error.SyntaxtoInt128OrZero(expr)Argumentsexpr \u2014 Expression returning a number or a string representation of a number. Expression / String.Supported arguments:String representations of (U)Int8/16/32/128/256.Unsupported arguments (return 0):String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt128OrZero('0xc0fe');.NoteIf the input value cannot be represented within the bounds of Int128, overflow or underflow of the result occurs.\nThis is not considered an error.Returned value128-bit integer value if successful, otherwise 0. Int128.NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.\nExamples: SELECT    toInt128OrZero('-128'),    toInt128OrZero('abc')FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toInt128OrNull"], "Feature": ["toInt128OrNull(x)"], "Description": ["toInt128OrNull", "Like toInt128, this function converts an input value to a value of type Int128 but returns NULL in case of an error.", "Syntax", "toInt128OrNull(x)", "Arguments", "x \u2014 A String representation of a number. Expression / String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256.", "Unsupported arguments (return \\N)", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt128OrNull('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of Int128, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "128-bit integer value if successful, otherwise NULL. Int128 / NULL.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toInt128OrNull('-128'),    toInt128OrNull('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1256, "vector_txt": "1256:Feature: toInt128OrNull(x)\nDescription: toInt128OrNullLike toInt128, this function converts an input value to a value of type Int128 but returns NULL in case of an error.SyntaxtoInt128OrNull(x)Argumentsx \u2014 A String representation of a number. Expression / String.Supported arguments:String representations of (U)Int8/16/32/128/256.Unsupported arguments (return \\N)String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt128OrNull('0xc0fe');.NoteIf the input value cannot be represented within the bounds of Int128, overflow or underflow of the result occurs.\nThis is not considered an error.Returned value128-bit integer value if successful, otherwise NULL. Int128 / NULL.NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.\nExamples: SELECT    toInt128OrNull('-128'),    toInt128OrNull('abc')FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayExists([func,] arr1, ...)"], "Feature": ["arrayExists([func,] arr1, ...)"], "Description": ["arrayExists([func,] arr1, ...)", "Returns 1 if there is at least one element in arr for which func(arr1[i], ..., arrN[i]) returns something other than 0. Otherwise, it returns 0.", "Note that the arrayExists is a higher-order function. You can pass a lambda function to it as the first argument."], "Examples": [], "Category": ["Arrays Functions"], "index": 1257, "vector_txt": "1257:Feature: arrayExists([func,] arr1, ...)\nDescription: arrayExists([func,] arr1, ...)Returns 1 if there is at least one element in arr for which func(arr1[i], ..., arrN[i]) returns something other than 0. Otherwise, it returns 0.Note that the arrayExists is a higher-order function. You can pass a lambda function to it as the first argument.\nExamples: \nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toInt128OrDefault"], "Feature": ["toInt128OrDefault(expr[, default])"], "Description": ["toInt128OrDefault", "Like toInt128, this function converts an input value to a value of type Int128 but returns the default value in case of an error.\nIf no default value is passed then 0 is returned in case of an error.", "Syntax", "toInt128OrDefault(expr[, default])", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression / String.default (optional) \u2014 The default value to return if parsing to type Int128 is unsuccessful. Int128.", "Supported arguments:", "(U)Int8/16/32/64/128/256.Float32/64.String representations of (U)Int8/16/32/128/256.", "Arguments for which the default value is returned:", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt128OrDefault('0xc0fe', CAST('-1', 'Int128'));.", "NoteIf the input value cannot be represented within the bounds of Int128, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "128-bit integer value if successful, otherwise returns the default value if passed or 0 if not. Int128.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.The default value type should be the same as the cast type."], "Examples": ["SELECT    toInt128OrDefault('-128', CAST('-1', 'Int128')),    toInt128OrDefault('abc', CAST('-1', 'Int128'))FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1258, "vector_txt": "1258:Feature: toInt128OrDefault(expr[, default])\nDescription: toInt128OrDefaultLike toInt128, this function converts an input value to a value of type Int128 but returns the default value in case of an error.\nIf no default value is passed then 0 is returned in case of an error.SyntaxtoInt128OrDefault(expr[, default])Argumentsexpr \u2014 Expression returning a number or a string representation of a number. Expression / String.default (optional) \u2014 The default value to return if parsing to type Int128 is unsuccessful. Int128.Supported arguments:(U)Int8/16/32/64/128/256.Float32/64.String representations of (U)Int8/16/32/128/256.Arguments for which the default value is returned:String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt128OrDefault('0xc0fe', CAST('-1', 'Int128'));.NoteIf the input value cannot be represented within the bounds of Int128, overflow or underflow of the result occurs.\nThis is not considered an error.Returned value128-bit integer value if successful, otherwise returns the default value if passed or 0 if not. Int128.NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.The default value type should be the same as the cast type.\nExamples: SELECT    toInt128OrDefault('-128', CAST('-1', 'Int128')),    toInt128OrDefault('abc', CAST('-1', 'Int128'))FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toInt256"], "Feature": ["toInt256(expr)"], "Description": ["toInt256", "Converts an input value to a value of type Int256. Throws an exception in case of an error.", "Syntax", "toInt256(expr)", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.", "Unsupported arguments:", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt256('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of Int256, the result over or under flows.\nThis is not considered an error.", "Returned value", "256-bit integer value. Int256.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toInt256(-256),    toInt256(-256.256),    toInt256('-256')FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1259, "vector_txt": "1259:Feature: toInt256(expr)\nDescription: toInt256Converts an input value to a value of type Int256. Throws an exception in case of an error.SyntaxtoInt256(expr)Argumentsexpr \u2014 Expression returning a number or a string representation of a number. Expression.Supported arguments:Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.Unsupported arguments:String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt256('0xc0fe');.NoteIf the input value cannot be represented within the bounds of Int256, the result over or under flows.\nThis is not considered an error.Returned value256-bit integer value. Int256.NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.\nExamples: SELECT    toInt256(-256),    toInt256(-256.256),    toInt256('-256')FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toInt256OrZero"], "Feature": ["toInt256OrZero(x)"], "Description": ["toInt256OrZero", "Like toInt256, this function converts an input value to a value of type Int256 but returns 0 in case of an error.", "Syntax", "toInt256OrZero(x)", "Arguments", "x \u2014 A String representation of a number. String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256.", "Unsupported arguments (return 0):", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt256OrZero('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of Int256, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "256-bit integer value if successful, otherwise 0. Int256.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toInt256OrZero('-256'),    toInt256OrZero('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1260, "vector_txt": "1260:Feature: toInt256OrZero(x)\nDescription: toInt256OrZeroLike toInt256, this function converts an input value to a value of type Int256 but returns 0 in case of an error.SyntaxtoInt256OrZero(x)Argumentsx \u2014 A String representation of a number. String.Supported arguments:String representations of (U)Int8/16/32/128/256.Unsupported arguments (return 0):String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt256OrZero('0xc0fe');.NoteIf the input value cannot be represented within the bounds of Int256, overflow or underflow of the result occurs.\nThis is not considered an error.Returned value256-bit integer value if successful, otherwise 0. Int256.NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.\nExamples: SELECT    toInt256OrZero('-256'),    toInt256OrZero('abc')FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toInt256OrNull"], "Feature": ["toInt256OrNull(x)"], "Description": ["toInt256OrNull", "Like toInt256, this function converts an input value to a value of type Int256 but returns NULL in case of an error.", "Syntax", "toInt256OrNull(x)", "Arguments", "x \u2014 A String representation of a number. String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256.", "Unsupported arguments (return \\N)", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt256OrNull('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of Int256, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "256-bit integer value if successful, otherwise NULL. Int256 / NULL.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toInt256OrNull('-256'),    toInt256OrNull('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1261, "vector_txt": "1261:Feature: toInt256OrNull(x)\nDescription: toInt256OrNullLike toInt256, this function converts an input value to a value of type Int256 but returns NULL in case of an error.SyntaxtoInt256OrNull(x)Argumentsx \u2014 A String representation of a number. String.Supported arguments:String representations of (U)Int8/16/32/128/256.Unsupported arguments (return \\N)String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt256OrNull('0xc0fe');.NoteIf the input value cannot be represented within the bounds of Int256, overflow or underflow of the result occurs.\nThis is not considered an error.Returned value256-bit integer value if successful, otherwise NULL. Int256 / NULL.NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.\nExamples: SELECT    toInt256OrNull('-256'),    toInt256OrNull('abc')FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toInt256OrDefault"], "Feature": ["toInt256OrDefault(expr[, default])"], "Description": ["toInt256OrDefault", "Like toInt256, this function converts an input value to a value of type Int256 but returns the default value in case of an error.\nIf no default value is passed then 0 is returned in case of an error.", "Syntax", "toInt256OrDefault(expr[, default])", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression / String.default (optional) \u2014 The default value to return if parsing to type Int256 is unsuccessful. Int256.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.", "Arguments for which the default value is returned:", "String representations of Float32/64 values, including NaN and InfString representations of binary and hexadecimal values, e.g. SELECT toInt256OrDefault('0xc0fe', CAST('-1', 'Int256'));", "NoteIf the input value cannot be represented within the bounds of Int256, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "256-bit integer value if successful, otherwise returns the default value if passed or 0 if not. Int256.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.The default value type should be the same as the cast type."], "Examples": ["SELECT    toInt256OrDefault('-256', CAST('-1', 'Int256')),    toInt256OrDefault('abc', CAST('-1', 'Int256'))FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1262, "vector_txt": "1262:Feature: toInt256OrDefault(expr[, default])\nDescription: toInt256OrDefaultLike toInt256, this function converts an input value to a value of type Int256 but returns the default value in case of an error.\nIf no default value is passed then 0 is returned in case of an error.SyntaxtoInt256OrDefault(expr[, default])Argumentsexpr \u2014 Expression returning a number or a string representation of a number. Expression / String.default (optional) \u2014 The default value to return if parsing to type Int256 is unsuccessful. Int256.Supported arguments:Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.Arguments for which the default value is returned:String representations of Float32/64 values, including NaN and InfString representations of binary and hexadecimal values, e.g. SELECT toInt256OrDefault('0xc0fe', CAST('-1', 'Int256'));NoteIf the input value cannot be represented within the bounds of Int256, overflow or underflow of the result occurs.\nThis is not considered an error.Returned value256-bit integer value if successful, otherwise returns the default value if passed or 0 if not. Int256.NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.The default value type should be the same as the cast type.\nExamples: SELECT    toInt256OrDefault('-256', CAST('-1', 'Int256')),    toInt256OrDefault('abc', CAST('-1', 'Int256'))FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUInt8"], "Feature": ["toUInt8(expr)"], "Description": ["toUInt8", "Converts an input value to a value of type UInt8. Throws an exception in case of an error.", "Syntax", "toUInt8(expr)", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.", "Unsupported arguments:", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt8('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of UInt8, overflow or underflow of the result occurs.\nThis is not considered an error.\nFor example: SELECT toUInt8(256) == 0;.", "Returned value", "8-bit unsigned integer value. UInt8.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toUInt8(8),    toUInt8(8.8),    toUInt8('8')FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1263, "vector_txt": "1263:Feature: toUInt8(expr)\nDescription: toUInt8Converts an input value to a value of type UInt8. Throws an exception in case of an error.SyntaxtoUInt8(expr)Argumentsexpr \u2014 Expression returning a number or a string representation of a number. Expression.Supported arguments:Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.Unsupported arguments:String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt8('0xc0fe');.NoteIf the input value cannot be represented within the bounds of UInt8, overflow or underflow of the result occurs.\nThis is not considered an error.\nFor example: SELECT toUInt8(256) == 0;.Returned value8-bit unsigned integer value. UInt8.NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.\nExamples: SELECT    toUInt8(8),    toUInt8(8.8),    toUInt8('8')FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUInt8OrZero"], "Feature": ["toUInt8OrZero(x)"], "Description": ["toUInt8OrZero", "Like toUInt8, this function converts an input value to a value of type UInt8 but returns 0 in case of an error.", "Syntax", "toUInt8OrZero(x)", "Arguments", "x \u2014 A String representation of a number. String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256.", "Unsupported arguments (return 0):", "String representations of ordinary Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt8OrZero('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of UInt8, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "8-bit unsigned integer value if successful, otherwise 0. UInt8.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toUInt8OrZero('-8'),    toUInt8OrZero('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1264, "vector_txt": "1264:Feature: toUInt8OrZero(x)\nDescription: toUInt8OrZeroLike toUInt8, this function converts an input value to a value of type UInt8 but returns 0 in case of an error.SyntaxtoUInt8OrZero(x)Argumentsx \u2014 A String representation of a number. String.Supported arguments:String representations of (U)Int8/16/32/128/256.Unsupported arguments (return 0):String representations of ordinary Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt8OrZero('0xc0fe');.NoteIf the input value cannot be represented within the bounds of UInt8, overflow or underflow of the result occurs.\nThis is not considered an error.Returned value8-bit unsigned integer value if successful, otherwise 0. UInt8.NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.\nExamples: SELECT    toUInt8OrZero('-8'),    toUInt8OrZero('abc')FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUInt8OrNull"], "Feature": ["toUInt8OrNull(x)"], "Description": ["toUInt8OrNull", "Like toUInt8, this function converts an input value to a value of type UInt8 but returns NULL in case of an error.", "Syntax", "toUInt8OrNull(x)", "Arguments", "x \u2014 A String representation of a number. String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256.", "Unsupported arguments (return \\N)", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt8OrNull('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of UInt8, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "8-bit unsigned integer value if successful, otherwise NULL. UInt8 / NULL.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toUInt8OrNull('8'),    toUInt8OrNull('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1265, "vector_txt": "1265:Feature: toUInt8OrNull(x)\nDescription: toUInt8OrNullLike toUInt8, this function converts an input value to a value of type UInt8 but returns NULL in case of an error.SyntaxtoUInt8OrNull(x)Argumentsx \u2014 A String representation of a number. String.Supported arguments:String representations of (U)Int8/16/32/128/256.Unsupported arguments (return \\N)String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt8OrNull('0xc0fe');.NoteIf the input value cannot be represented within the bounds of UInt8, overflow or underflow of the result occurs.\nThis is not considered an error.Returned value8-bit unsigned integer value if successful, otherwise NULL. UInt8 / NULL.NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.\nExamples: SELECT    toUInt8OrNull('8'),    toUInt8OrNull('abc')FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUInt8OrDefault"], "Feature": ["toUInt8OrDefault(expr[, default])"], "Description": ["toUInt8OrDefault", "Like toUInt8, this function converts an input value to a value of type UInt8 but returns the default value in case of an error.\nIf no default value is passed then 0 is returned in case of an error.", "Syntax", "toUInt8OrDefault(expr[, default])", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression / String.default (optional) \u2014 The default value to return if parsing to type UInt8 is unsuccessful. UInt8.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.", "Arguments for which the default value is returned:", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt8OrDefault('0xc0fe', CAST('0', 'UInt8'));.", "NoteIf the input value cannot be represented within the bounds of UInt8, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "8-bit unsigned integer value if successful, otherwise returns the default value if passed or 0 if not. UInt8.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.The default value type should be the same as the cast type."], "Examples": ["SELECT    toUInt8OrDefault('8', CAST('0', 'UInt8')),    toUInt8OrDefault('abc', CAST('0', 'UInt8'))FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1266, "vector_txt": "1266:Feature: toUInt8OrDefault(expr[, default])\nDescription: toUInt8OrDefaultLike toUInt8, this function converts an input value to a value of type UInt8 but returns the default value in case of an error.\nIf no default value is passed then 0 is returned in case of an error.SyntaxtoUInt8OrDefault(expr[, default])Argumentsexpr \u2014 Expression returning a number or a string representation of a number. Expression / String.default (optional) \u2014 The default value to return if parsing to type UInt8 is unsuccessful. UInt8.Supported arguments:Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.Arguments for which the default value is returned:String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt8OrDefault('0xc0fe', CAST('0', 'UInt8'));.NoteIf the input value cannot be represented within the bounds of UInt8, overflow or underflow of the result occurs.\nThis is not considered an error.Returned value8-bit unsigned integer value if successful, otherwise returns the default value if passed or 0 if not. UInt8.NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.The default value type should be the same as the cast type.\nExamples: SELECT    toUInt8OrDefault('8', CAST('0', 'UInt8')),    toUInt8OrDefault('abc', CAST('0', 'UInt8'))FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUInt16"], "Feature": ["toUInt16(expr)"], "Description": ["toUInt16", "Converts an input value to a value of type UInt16. Throws an exception in case of an error.", "Syntax", "toUInt16(expr)", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.", "Unsupported arguments:", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt16('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of UInt16, overflow or underflow of the result occurs.\nThis is not considered an error.\nFor example: SELECT toUInt16(65536) == 0;.", "Returned value", "16-bit unsigned integer value. UInt16.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toUInt16(16),    toUInt16(16.16),    toUInt16('16')FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1267, "vector_txt": "1267:Feature: toUInt16(expr)\nDescription: toUInt16Converts an input value to a value of type UInt16. Throws an exception in case of an error.SyntaxtoUInt16(expr)Argumentsexpr \u2014 Expression returning a number or a string representation of a number. Expression.Supported arguments:Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.Unsupported arguments:String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt16('0xc0fe');.NoteIf the input value cannot be represented within the bounds of UInt16, overflow or underflow of the result occurs.\nThis is not considered an error.\nFor example: SELECT toUInt16(65536) == 0;.Returned value16-bit unsigned integer value. UInt16.NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.\nExamples: SELECT    toUInt16(16),    toUInt16(16.16),    toUInt16('16')FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayAll([func,] arr1, ...)"], "Feature": ["arrayAll([func,] arr1, ...)"], "Description": ["arrayAll([func,] arr1, ...)", "Returns 1 if func(arr1[i], ..., arrN[i]) returns something other than 0 for all the elements in arrays. Otherwise, it returns 0.", "Note that the arrayAll is a higher-order function. You can pass a lambda function to it as the first argument."], "Examples": [], "Category": ["Arrays Functions"], "index": 1268, "vector_txt": "1268:Feature: arrayAll([func,] arr1, ...)\nDescription: arrayAll([func,] arr1, ...)Returns 1 if func(arr1[i], ..., arrN[i]) returns something other than 0 for all the elements in arrays. Otherwise, it returns 0.Note that the arrayAll is a higher-order function. You can pass a lambda function to it as the first argument.\nExamples: \nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUInt16OrZero"], "Feature": ["toUInt16OrZero(x)"], "Description": ["toUInt16OrZero", "Like toUInt16, this function converts an input value to a value of type UInt16 but returns 0 in case of an error.", "Syntax", "toUInt16OrZero(x)", "Arguments", "x \u2014 A String representation of a number. String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256.", "Unsupported arguments (return 0):", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt16OrZero('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of UInt16, overflow or underflow of the result occurs.\nThis is not considered as an error.", "Returned value", "16-bit unsigned integer value if successful, otherwise 0. UInt16.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toUInt16OrZero('16'),    toUInt16OrZero('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1269, "vector_txt": "1269:Feature: toUInt16OrZero(x)\nDescription: toUInt16OrZeroLike toUInt16, this function converts an input value to a value of type UInt16 but returns 0 in case of an error.SyntaxtoUInt16OrZero(x)Argumentsx \u2014 A String representation of a number. String.Supported arguments:String representations of (U)Int8/16/32/128/256.Unsupported arguments (return 0):String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt16OrZero('0xc0fe');.NoteIf the input value cannot be represented within the bounds of UInt16, overflow or underflow of the result occurs.\nThis is not considered as an error.Returned value16-bit unsigned integer value if successful, otherwise 0. UInt16.NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.\nExamples: SELECT    toUInt16OrZero('16'),    toUInt16OrZero('abc')FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUInt16OrNull"], "Feature": ["toUInt16OrNull(x)"], "Description": ["toUInt16OrNull", "Like toUInt16, this function converts an input value to a value of type UInt16 but returns NULL in case of an error.", "Syntax", "toUInt16OrNull(x)", "Arguments", "x \u2014 A String representation of a number. String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256.", "Unsupported arguments (return \\N)", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt16OrNull('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of UInt16, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "16-bit unsigned integer value if successful, otherwise NULL. UInt16 / NULL.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toUInt16OrNull('16'),    toUInt16OrNull('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1270, "vector_txt": "1270:Feature: toUInt16OrNull(x)\nDescription: toUInt16OrNullLike toUInt16, this function converts an input value to a value of type UInt16 but returns NULL in case of an error.SyntaxtoUInt16OrNull(x)Argumentsx \u2014 A String representation of a number. String.Supported arguments:String representations of (U)Int8/16/32/128/256.Unsupported arguments (return \\N)String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt16OrNull('0xc0fe');.NoteIf the input value cannot be represented within the bounds of UInt16, overflow or underflow of the result occurs.\nThis is not considered an error.Returned value16-bit unsigned integer value if successful, otherwise NULL. UInt16 / NULL.NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.\nExamples: SELECT    toUInt16OrNull('16'),    toUInt16OrNull('abc')FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUInt16OrDefault"], "Feature": ["toUInt16OrDefault(expr[, default])"], "Description": ["toUInt16OrDefault", "Like toUInt16, this function converts an input value to a value of type UInt16 but returns the default value in case of an error.\nIf no default value is passed then 0 is returned in case of an error.", "Syntax", "toUInt16OrDefault(expr[, default])", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression / String.default (optional) \u2014 The default value to return if parsing to type UInt16 is unsuccessful. UInt16.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.", "Arguments for which the default value is returned:", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt16OrDefault('0xc0fe', CAST('0', 'UInt16'));.", "NoteIf the input value cannot be represented within the bounds of UInt16, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "16-bit unsigned integer value if successful, otherwise returns the default value if passed or 0 if not. UInt16.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.The default value type should be the same as the cast type."], "Examples": ["SELECT    toUInt16OrDefault('16', CAST('0', 'UInt16')),    toUInt16OrDefault('abc', CAST('0', 'UInt16'))FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1271, "vector_txt": "1271:Feature: toUInt16OrDefault(expr[, default])\nDescription: toUInt16OrDefaultLike toUInt16, this function converts an input value to a value of type UInt16 but returns the default value in case of an error.\nIf no default value is passed then 0 is returned in case of an error.SyntaxtoUInt16OrDefault(expr[, default])Argumentsexpr \u2014 Expression returning a number or a string representation of a number. Expression / String.default (optional) \u2014 The default value to return if parsing to type UInt16 is unsuccessful. UInt16.Supported arguments:Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.Arguments for which the default value is returned:String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt16OrDefault('0xc0fe', CAST('0', 'UInt16'));.NoteIf the input value cannot be represented within the bounds of UInt16, overflow or underflow of the result occurs.\nThis is not considered an error.Returned value16-bit unsigned integer value if successful, otherwise returns the default value if passed or 0 if not. UInt16.NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.The default value type should be the same as the cast type.\nExamples: SELECT    toUInt16OrDefault('16', CAST('0', 'UInt16')),    toUInt16OrDefault('abc', CAST('0', 'UInt16'))FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUInt32"], "Feature": ["toUInt32(expr)"], "Description": ["toUInt32", "Converts an input value to a value of type UInt32. Throws an exception in case of an error.", "Syntax", "toUInt32(expr)", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.", "Unsupported arguments:", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt32('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of UInt32, the result over or under flows.\nThis is not considered an error.\nFor example: SELECT toUInt32(4294967296) == 0;", "Returned value", "32-bit unsigned integer value. UInt32.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toUInt32(32),    toUInt32(32.32),    toUInt32('32')FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1272, "vector_txt": "1272:Feature: toUInt32(expr)\nDescription: toUInt32Converts an input value to a value of type UInt32. Throws an exception in case of an error.SyntaxtoUInt32(expr)Argumentsexpr \u2014 Expression returning a number or a string representation of a number. Expression.Supported arguments:Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.Unsupported arguments:String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt32('0xc0fe');.NoteIf the input value cannot be represented within the bounds of UInt32, the result over or under flows.\nThis is not considered an error.\nFor example: SELECT toUInt32(4294967296) == 0;Returned value32-bit unsigned integer value. UInt32.NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.\nExamples: SELECT    toUInt32(32),    toUInt32(32.32),    toUInt32('32')FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUInt32OrZero"], "Feature": ["toUInt32OrZero(x)"], "Description": ["toUInt32OrZero", "Like toUInt32, this function converts an input value to a value of type UInt32 but returns 0 in case of an error.", "Syntax", "toUInt32OrZero(x)", "Arguments", "x \u2014 A String representation of a number. String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256.", "Unsupported arguments (return 0):", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt32OrZero('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of UInt32, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "32-bit unsigned integer value if successful, otherwise 0. UInt32", "NoteThe function uses rounding towards zero\n, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toUInt32OrZero('32'),    toUInt32OrZero('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1273, "vector_txt": "1273:Feature: toUInt32OrZero(x)\nDescription: toUInt32OrZeroLike toUInt32, this function converts an input value to a value of type UInt32 but returns 0 in case of an error.SyntaxtoUInt32OrZero(x)Argumentsx \u2014 A String representation of a number. String.Supported arguments:String representations of (U)Int8/16/32/128/256.Unsupported arguments (return 0):String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt32OrZero('0xc0fe');.NoteIf the input value cannot be represented within the bounds of UInt32, overflow or underflow of the result occurs.\nThis is not considered an error.Returned value32-bit unsigned integer value if successful, otherwise 0. UInt32NoteThe function uses rounding towards zero\n, meaning it truncates fractional digits of numbers.\nExamples: SELECT    toUInt32OrZero('32'),    toUInt32OrZero('abc')FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUInt32OrNull"], "Feature": ["toUInt32OrNull(x)"], "Description": ["toUInt32OrNull", "Like toUInt32, this function converts an input value to a value of type UInt32 but returns NULL in case of an error.", "Syntax", "toUInt32OrNull(x)", "Arguments", "x \u2014 A String representation of a number. String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256.", "Unsupported arguments (return \\N)", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt32OrNull('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of UInt32, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "32-bit unsigned integer value if successful, otherwise NULL. UInt32 / NULL.", "NoteThe function uses rounding towards zero\n, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toUInt32OrNull('32'),    toUInt32OrNull('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1274, "vector_txt": "1274:Feature: toUInt32OrNull(x)\nDescription: toUInt32OrNullLike toUInt32, this function converts an input value to a value of type UInt32 but returns NULL in case of an error.SyntaxtoUInt32OrNull(x)Argumentsx \u2014 A String representation of a number. String.Supported arguments:String representations of (U)Int8/16/32/128/256.Unsupported arguments (return \\N)String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt32OrNull('0xc0fe');.NoteIf the input value cannot be represented within the bounds of UInt32, overflow or underflow of the result occurs.\nThis is not considered an error.Returned value32-bit unsigned integer value if successful, otherwise NULL. UInt32 / NULL.NoteThe function uses rounding towards zero\n, meaning it truncates fractional digits of numbers.\nExamples: SELECT    toUInt32OrNull('32'),    toUInt32OrNull('abc')FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUInt32OrDefault"], "Feature": ["toUInt32OrDefault(expr[, default])"], "Description": ["toUInt32OrDefault", "Like toUInt32, this function converts an input value to a value of type UInt32 but returns the default value in case of an error.\nIf no default value is passed then 0 is returned in case of an error.", "Syntax", "toUInt32OrDefault(expr[, default])", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression / String.default (optional) \u2014 The default value to return if parsing to type UInt32 is unsuccessful. UInt32.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.", "Arguments for which the default value is returned:", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt32OrDefault('0xc0fe', CAST('0', 'UInt32'));.", "NoteIf the input value cannot be represented within the bounds of UInt32, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "32-bit unsigned integer value if successful, otherwise returns the default value if passed or 0 if not. UInt32.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.The default value type should be the same as the cast type."], "Examples": ["SELECT    toUInt32OrDefault('32', CAST('0', 'UInt32')),    toUInt32OrDefault('abc', CAST('0', 'UInt32'))FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1275, "vector_txt": "1275:Feature: toUInt32OrDefault(expr[, default])\nDescription: toUInt32OrDefaultLike toUInt32, this function converts an input value to a value of type UInt32 but returns the default value in case of an error.\nIf no default value is passed then 0 is returned in case of an error.SyntaxtoUInt32OrDefault(expr[, default])Argumentsexpr \u2014 Expression returning a number or a string representation of a number. Expression / String.default (optional) \u2014 The default value to return if parsing to type UInt32 is unsuccessful. UInt32.Supported arguments:Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.Arguments for which the default value is returned:String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt32OrDefault('0xc0fe', CAST('0', 'UInt32'));.NoteIf the input value cannot be represented within the bounds of UInt32, overflow or underflow of the result occurs.\nThis is not considered an error.Returned value32-bit unsigned integer value if successful, otherwise returns the default value if passed or 0 if not. UInt32.NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.The default value type should be the same as the cast type.\nExamples: SELECT    toUInt32OrDefault('32', CAST('0', 'UInt32')),    toUInt32OrDefault('abc', CAST('0', 'UInt32'))FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUInt64"], "Feature": ["toUInt64(expr)"], "Description": ["toUInt64", "Converts an input value to a value of type UInt64. Throws an exception in case of an error.", "Syntax", "toUInt64(expr)", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.", "Unsupported types:", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt64('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of UInt64, the result over or under flows.\nThis is not considered an error.\nFor example: SELECT toUInt64(18446744073709551616) == 0;", "Returned value", "64-bit unsigned integer value. UInt64.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toUInt64(64),    toUInt64(64.64),    toUInt64('64')FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1276, "vector_txt": "1276:Feature: toUInt64(expr)\nDescription: toUInt64Converts an input value to a value of type UInt64. Throws an exception in case of an error.SyntaxtoUInt64(expr)Argumentsexpr \u2014 Expression returning a number or a string representation of a number. Expression.Supported arguments:Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.Unsupported types:String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt64('0xc0fe');.NoteIf the input value cannot be represented within the bounds of UInt64, the result over or under flows.\nThis is not considered an error.\nFor example: SELECT toUInt64(18446744073709551616) == 0;Returned value64-bit unsigned integer value. UInt64.NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.\nExamples: SELECT    toUInt64(64),    toUInt64(64.64),    toUInt64('64')FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUInt64OrZero"], "Feature": ["toUInt64OrZero(x)"], "Description": ["toUInt64OrZero", "Like toUInt64, this function converts an input value to a value of type UInt64 but returns 0 in case of an error.", "Syntax", "toUInt64OrZero(x)", "Arguments", "x \u2014 A String representation of a number. String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256.", "Unsupported arguments (return 0):", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt64OrZero('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of UInt64, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "64-bit unsigned integer value if successful, otherwise 0. UInt64.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toUInt64OrZero('64'),    toUInt64OrZero('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1277, "vector_txt": "1277:Feature: toUInt64OrZero(x)\nDescription: toUInt64OrZeroLike toUInt64, this function converts an input value to a value of type UInt64 but returns 0 in case of an error.SyntaxtoUInt64OrZero(x)Argumentsx \u2014 A String representation of a number. String.Supported arguments:String representations of (U)Int8/16/32/128/256.Unsupported arguments (return 0):String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt64OrZero('0xc0fe');.NoteIf the input value cannot be represented within the bounds of UInt64, overflow or underflow of the result occurs.\nThis is not considered an error.Returned value64-bit unsigned integer value if successful, otherwise 0. UInt64.NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.\nExamples: SELECT    toUInt64OrZero('64'),    toUInt64OrZero('abc')FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUInt64OrNull"], "Feature": ["toUInt64OrNull(x)"], "Description": ["toUInt64OrNull", "Like toUInt64, this function converts an input value to a value of type UInt64 but returns NULL in case of an error.", "Syntax", "toUInt64OrNull(x)", "Arguments", "x \u2014 A String representation of a number. Expression / String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256.", "Unsupported arguments (return \\N)", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt64OrNull('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of UInt64, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "64-bit unsigned integer value if successful, otherwise NULL. UInt64 / NULL.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toUInt64OrNull('64'),    toUInt64OrNull('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1278, "vector_txt": "1278:Feature: toUInt64OrNull(x)\nDescription: toUInt64OrNullLike toUInt64, this function converts an input value to a value of type UInt64 but returns NULL in case of an error.SyntaxtoUInt64OrNull(x)Argumentsx \u2014 A String representation of a number. Expression / String.Supported arguments:String representations of (U)Int8/16/32/128/256.Unsupported arguments (return \\N)String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt64OrNull('0xc0fe');.NoteIf the input value cannot be represented within the bounds of UInt64, overflow or underflow of the result occurs.\nThis is not considered an error.Returned value64-bit unsigned integer value if successful, otherwise NULL. UInt64 / NULL.NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.\nExamples: SELECT    toUInt64OrNull('64'),    toUInt64OrNull('abc')FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayFirst(func, arr1, ...)"], "Feature": ["arrayFirst(func, arr1, ...)"], "Description": ["arrayFirst(func, arr1, ...)", "Returns the first element in the arr1 array for which func(arr1[i], ..., arrN[i]) returns something other than 0."], "Examples": [], "Category": ["Arrays Functions"], "index": 1279, "vector_txt": "1279:Feature: arrayFirst(func, arr1, ...)\nDescription: arrayFirst(func, arr1, ...)Returns the first element in the arr1 array for which func(arr1[i], ..., arrN[i]) returns something other than 0.\nExamples: \nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUInt64OrDefault"], "Feature": ["toUInt64OrDefault(expr[, default])"], "Description": ["toUInt64OrDefault", "Like toUInt64, this function converts an input value to a value of type UInt64 but returns the default value in case of an error.\nIf no default value is passed then 0 is returned in case of an error.", "Syntax", "toUInt64OrDefault(expr[, default])", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression / String.defauult (optional) \u2014 The default value to return if parsing to type UInt64 is unsuccessful. UInt64.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.", "Arguments for which the default value is returned:", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt64OrDefault('0xc0fe', CAST('0', 'UInt64'));.", "NoteIf the input value cannot be represented within the bounds of UInt64, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "64-bit unsigned integer value if successful, otherwise returns the default value if passed or 0 if not. UInt64.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.The default value type should be the same as the cast type."], "Examples": ["SELECT    toUInt64OrDefault('64', CAST('0', 'UInt64')),    toUInt64OrDefault('abc', CAST('0', 'UInt64'))FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1280, "vector_txt": "1280:Feature: toUInt64OrDefault(expr[, default])\nDescription: toUInt64OrDefaultLike toUInt64, this function converts an input value to a value of type UInt64 but returns the default value in case of an error.\nIf no default value is passed then 0 is returned in case of an error.SyntaxtoUInt64OrDefault(expr[, default])Argumentsexpr \u2014 Expression returning a number or a string representation of a number. Expression / String.defauult (optional) \u2014 The default value to return if parsing to type UInt64 is unsuccessful. UInt64.Supported arguments:Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.Arguments for which the default value is returned:String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt64OrDefault('0xc0fe', CAST('0', 'UInt64'));.NoteIf the input value cannot be represented within the bounds of UInt64, overflow or underflow of the result occurs.\nThis is not considered an error.Returned value64-bit unsigned integer value if successful, otherwise returns the default value if passed or 0 if not. UInt64.NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.The default value type should be the same as the cast type.\nExamples: SELECT    toUInt64OrDefault('64', CAST('0', 'UInt64')),    toUInt64OrDefault('abc', CAST('0', 'UInt64'))FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUInt128"], "Feature": ["toUInt128(expr)"], "Description": ["toUInt128", "Converts an input value to a value of type UInt128. Throws an exception in case of an error.", "Syntax", "toUInt128(expr)", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.", "Unsupported arguments:", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt128('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of UInt128, the result over or under flows.\nThis is not considered an error.", "Returned value", "128-bit unsigned integer value. UInt128.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toUInt128(128),    toUInt128(128.8),    toUInt128('128')FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1281, "vector_txt": "1281:Feature: toUInt128(expr)\nDescription: toUInt128Converts an input value to a value of type UInt128. Throws an exception in case of an error.SyntaxtoUInt128(expr)Argumentsexpr \u2014 Expression returning a number or a string representation of a number. Expression.Supported arguments:Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.Unsupported arguments:String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt128('0xc0fe');.NoteIf the input value cannot be represented within the bounds of UInt128, the result over or under flows.\nThis is not considered an error.Returned value128-bit unsigned integer value. UInt128.NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.\nExamples: SELECT    toUInt128(128),    toUInt128(128.8),    toUInt128('128')FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUInt128OrZero"], "Feature": ["toUInt128OrZero(expr)"], "Description": ["toUInt128OrZero", "Like toUInt128, this function converts an input value to a value of type UInt128 but returns 0 in case of an error.", "Syntax", "toUInt128OrZero(expr)", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression / String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256.", "Unsupported arguments (return 0):", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt128OrZero('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of UInt128, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "128-bit unsigned integer value if successful, otherwise 0. UInt128.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toUInt128OrZero('128'),    toUInt128OrZero('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1282, "vector_txt": "1282:Feature: toUInt128OrZero(expr)\nDescription: toUInt128OrZeroLike toUInt128, this function converts an input value to a value of type UInt128 but returns 0 in case of an error.SyntaxtoUInt128OrZero(expr)Argumentsexpr \u2014 Expression returning a number or a string representation of a number. Expression / String.Supported arguments:String representations of (U)Int8/16/32/128/256.Unsupported arguments (return 0):String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt128OrZero('0xc0fe');.NoteIf the input value cannot be represented within the bounds of UInt128, overflow or underflow of the result occurs.\nThis is not considered an error.Returned value128-bit unsigned integer value if successful, otherwise 0. UInt128.NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.\nExamples: SELECT    toUInt128OrZero('128'),    toUInt128OrZero('abc')FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUInt128OrNull"], "Feature": ["toUInt128OrNull(x)"], "Description": ["toUInt128OrNull", "Like toUInt128, this function converts an input value to a value of type UInt128 but returns NULL in case of an error.", "Syntax", "toUInt128OrNull(x)", "Arguments", "x \u2014 A String representation of a number. Expression / String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256.", "Unsupported arguments (return \\N)", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt128OrNull('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of UInt128, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "128-bit unsigned integer value if successful, otherwise NULL. UInt128 / NULL.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toUInt128OrNull('128'),    toUInt128OrNull('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1283, "vector_txt": "1283:Feature: toUInt128OrNull(x)\nDescription: toUInt128OrNullLike toUInt128, this function converts an input value to a value of type UInt128 but returns NULL in case of an error.SyntaxtoUInt128OrNull(x)Argumentsx \u2014 A String representation of a number. Expression / String.Supported arguments:String representations of (U)Int8/16/32/128/256.Unsupported arguments (return \\N)String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt128OrNull('0xc0fe');.NoteIf the input value cannot be represented within the bounds of UInt128, overflow or underflow of the result occurs.\nThis is not considered an error.Returned value128-bit unsigned integer value if successful, otherwise NULL. UInt128 / NULL.NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.\nExamples: SELECT    toUInt128OrNull('128'),    toUInt128OrNull('abc')FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUInt128OrDefault"], "Feature": ["toUInt128OrDefault(expr[, default])"], "Description": ["toUInt128OrDefault", "Like toUInt128, this function converts an input value to a value of type UInt128 but returns the default value in case of an error.\nIf no default value is passed then 0 is returned in case of an error.", "Syntax", "toUInt128OrDefault(expr[, default])", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression / String.default (optional) \u2014 The default value to return if parsing to type UInt128 is unsuccessful. UInt128.", "Supported arguments:", "(U)Int8/16/32/64/128/256.Float32/64.String representations of (U)Int8/16/32/128/256.", "Arguments for which the default value is returned:", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt128OrDefault('0xc0fe', CAST('0', 'UInt128'));.", "NoteIf the input value cannot be represented within the bounds of UInt128, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "128-bit unsigned integer value if successful, otherwise returns the default value if passed or 0 if not. UInt128.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.The default value type should be the same as the cast type."], "Examples": ["SELECT    toUInt128OrDefault('128', CAST('0', 'UInt128')),    toUInt128OrDefault('abc', CAST('0', 'UInt128'))FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1284, "vector_txt": "1284:Feature: toUInt128OrDefault(expr[, default])\nDescription: toUInt128OrDefaultLike toUInt128, this function converts an input value to a value of type UInt128 but returns the default value in case of an error.\nIf no default value is passed then 0 is returned in case of an error.SyntaxtoUInt128OrDefault(expr[, default])Argumentsexpr \u2014 Expression returning a number or a string representation of a number. Expression / String.default (optional) \u2014 The default value to return if parsing to type UInt128 is unsuccessful. UInt128.Supported arguments:(U)Int8/16/32/64/128/256.Float32/64.String representations of (U)Int8/16/32/128/256.Arguments for which the default value is returned:String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt128OrDefault('0xc0fe', CAST('0', 'UInt128'));.NoteIf the input value cannot be represented within the bounds of UInt128, overflow or underflow of the result occurs.\nThis is not considered an error.Returned value128-bit unsigned integer value if successful, otherwise returns the default value if passed or 0 if not. UInt128.NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.The default value type should be the same as the cast type.\nExamples: SELECT    toUInt128OrDefault('128', CAST('0', 'UInt128')),    toUInt128OrDefault('abc', CAST('0', 'UInt128'))FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUInt256"], "Feature": ["toUInt256(expr)"], "Description": ["toUInt256", "Converts an input value to a value of type UInt256. Throws an exception in case of an error.", "Syntax", "toUInt256(expr)", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.", "Unsupported arguments:", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt256('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of UInt256, the result over or under flows.\nThis is not considered an error.", "Returned value", "256-bit unsigned integer value. Int256.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toUInt256(256),    toUInt256(256.256),    toUInt256('256')FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1285, "vector_txt": "1285:Feature: toUInt256(expr)\nDescription: toUInt256Converts an input value to a value of type UInt256. Throws an exception in case of an error.SyntaxtoUInt256(expr)Argumentsexpr \u2014 Expression returning a number or a string representation of a number. Expression.Supported arguments:Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.Unsupported arguments:String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt256('0xc0fe');.NoteIf the input value cannot be represented within the bounds of UInt256, the result over or under flows.\nThis is not considered an error.Returned value256-bit unsigned integer value. Int256.NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.\nExamples: SELECT    toUInt256(256),    toUInt256(256.256),    toUInt256('256')FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUInt256OrZero"], "Feature": ["toUInt256OrZero(x)"], "Description": ["toUInt256OrZero", "Like toUInt256, this function converts an input value to a value of type UInt256 but returns 0 in case of an error.", "Syntax", "toUInt256OrZero(x)", "Arguments", "x \u2014 A String representation of a number. String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256.", "Unsupported arguments (return 0):", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt256OrZero('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of UInt256, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "256-bit unsigned integer value if successful, otherwise 0. UInt256.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toUInt256OrZero('256'),    toUInt256OrZero('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1286, "vector_txt": "1286:Feature: toUInt256OrZero(x)\nDescription: toUInt256OrZeroLike toUInt256, this function converts an input value to a value of type UInt256 but returns 0 in case of an error.SyntaxtoUInt256OrZero(x)Argumentsx \u2014 A String representation of a number. String.Supported arguments:String representations of (U)Int8/16/32/128/256.Unsupported arguments (return 0):String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt256OrZero('0xc0fe');.NoteIf the input value cannot be represented within the bounds of UInt256, overflow or underflow of the result occurs.\nThis is not considered an error.Returned value256-bit unsigned integer value if successful, otherwise 0. UInt256.NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.\nExamples: SELECT    toUInt256OrZero('256'),    toUInt256OrZero('abc')FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUInt256OrNull"], "Feature": ["toUInt256OrNull(x)"], "Description": ["toUInt256OrNull", "Like toUInt256, this function converts an input value to a value of type UInt256 but returns NULL in case of an error.", "Syntax", "toUInt256OrNull(x)", "Arguments", "x \u2014 A String representation of a number. String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256.", "Unsupported arguments (return \\N)", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt256OrNull('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of UInt256, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "256-bit unsigned integer value if successful, otherwise NULL. UInt256 / NULL.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toUInt256OrNull('256'),    toUInt256OrNull('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1287, "vector_txt": "1287:Feature: toUInt256OrNull(x)\nDescription: toUInt256OrNullLike toUInt256, this function converts an input value to a value of type UInt256 but returns NULL in case of an error.SyntaxtoUInt256OrNull(x)Argumentsx \u2014 A String representation of a number. String.Supported arguments:String representations of (U)Int8/16/32/128/256.Unsupported arguments (return \\N)String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt256OrNull('0xc0fe');.NoteIf the input value cannot be represented within the bounds of UInt256, overflow or underflow of the result occurs.\nThis is not considered an error.Returned value256-bit unsigned integer value if successful, otherwise NULL. UInt256 / NULL.NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.\nExamples: SELECT    toUInt256OrNull('256'),    toUInt256OrNull('abc')FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUInt256OrDefault"], "Feature": ["toUInt256OrDefault(expr[, default])"], "Description": ["toUInt256OrDefault", "Like toUInt256, this function converts an input value to a value of type UInt256 but returns the default value in case of an error.\nIf no default value is passed then 0 is returned in case of an error.", "Syntax", "toUInt256OrDefault(expr[, default])", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression / String.default (optional) \u2014 The default value to return if parsing to type UInt256 is unsuccessful. UInt256.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.", "Arguments for which the default value is returned:", "String representations of Float32/64 values, including NaN and InfString representations of binary and hexadecimal values, e.g. SELECT toUInt256OrDefault('0xc0fe', CAST('0', 'UInt256'));", "NoteIf the input value cannot be represented within the bounds of UInt256, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "256-bit unsigned integer value if successful, otherwise returns the default value if passed or 0 if not. UInt256.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.The default value type should be the same as the cast type."], "Examples": ["SELECT    toUInt256OrDefault('-256', CAST('0', 'UInt256')),    toUInt256OrDefault('abc', CAST('0', 'UInt256'))FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1288, "vector_txt": "1288:Feature: toUInt256OrDefault(expr[, default])\nDescription: toUInt256OrDefaultLike toUInt256, this function converts an input value to a value of type UInt256 but returns the default value in case of an error.\nIf no default value is passed then 0 is returned in case of an error.SyntaxtoUInt256OrDefault(expr[, default])Argumentsexpr \u2014 Expression returning a number or a string representation of a number. Expression / String.default (optional) \u2014 The default value to return if parsing to type UInt256 is unsuccessful. UInt256.Supported arguments:Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.Arguments for which the default value is returned:String representations of Float32/64 values, including NaN and InfString representations of binary and hexadecimal values, e.g. SELECT toUInt256OrDefault('0xc0fe', CAST('0', 'UInt256'));NoteIf the input value cannot be represented within the bounds of UInt256, overflow or underflow of the result occurs.\nThis is not considered an error.Returned value256-bit unsigned integer value if successful, otherwise returns the default value if passed or 0 if not. UInt256.NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.The default value type should be the same as the cast type.\nExamples: SELECT    toUInt256OrDefault('-256', CAST('0', 'UInt256')),    toUInt256OrDefault('abc', CAST('0', 'UInt256'))FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toFloat32"], "Feature": ["toFloat32(expr)"], "Description": ["toFloat32", "Converts an input value to a value of type Float32. Throws an exception in case of an error.", "Syntax", "toFloat32(expr)", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression.", "Supported arguments:", "Values of type (U)Int8/16/32/64/128/256.String representations of (U)Int8/16/32/128/256.Values of type Float32/64, including NaN and Inf.String representations of Float32/64, including NaN and Inf (case-insensitive).", "Unsupported arguments:", "String representations of binary and hexadecimal values, e.g. SELECT toFloat32('0xc0fe');.", "Returned value", "32-bit floating point value. Float32."], "Examples": ["SELECT    toFloat32(42.7),    toFloat32('42.7'),    toFloat32('NaN')FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1289, "vector_txt": "1289:Feature: toFloat32(expr)\nDescription: toFloat32Converts an input value to a value of type Float32. Throws an exception in case of an error.SyntaxtoFloat32(expr)Argumentsexpr \u2014 Expression returning a number or a string representation of a number. Expression.Supported arguments:Values of type (U)Int8/16/32/64/128/256.String representations of (U)Int8/16/32/128/256.Values of type Float32/64, including NaN and Inf.String representations of Float32/64, including NaN and Inf (case-insensitive).Unsupported arguments:String representations of binary and hexadecimal values, e.g. SELECT toFloat32('0xc0fe');.Returned value32-bit floating point value. Float32.\nExamples: SELECT    toFloat32(42.7),    toFloat32('42.7'),    toFloat32('NaN')FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayFirstOrNull"], "Feature": ["arrayFirstOrNull(func, arr1, ...)"], "Description": ["arrayFirstOrNull", "Returns the first element in the arr1 array for which func(arr1[i], ..., arrN[i]) returns something other than 0, otherwise it returns NULL.", "Syntax", "arrayFirstOrNull(func, arr1, ...)", "Parameters", "func: Lambda function. Lambda function.arr1: Array to operate on. Array.", "Returned value", "The first element in the passed array.Otherwise, returns NULL", "Implementation details", "Note that the arrayFirstOrNull is a higher-order function. You must pass a lambda function to it as the first argument, and it can\u2019t be omitted."], "Examples": ["SELECT arrayFirstOrNull(x -> x >= 2, [1, 2, 3]);", "SELECT arrayFirstOrNull(x -> x >= 2, emptyArrayUInt8());", "SELECT arrayLastOrNull((x,f) -> f, [1,2,3,NULL], [0,1,0,1]);"], "Category": ["Arrays Functions"], "index": 1290, "vector_txt": "1290:Feature: arrayFirstOrNull(func, arr1, ...)\nDescription: arrayFirstOrNullReturns the first element in the arr1 array for which func(arr1[i], ..., arrN[i]) returns something other than 0, otherwise it returns NULL.SyntaxarrayFirstOrNull(func, arr1, ...)Parametersfunc: Lambda function. Lambda function.arr1: Array to operate on. Array.Returned valueThe first element in the passed array.Otherwise, returns NULLImplementation detailsNote that the arrayFirstOrNull is a higher-order function. You must pass a lambda function to it as the first argument, and it can\u2019t be omitted.\nExamples: SELECT arrayFirstOrNull(x -> x >= 2, [1, 2, 3]);SELECT arrayFirstOrNull(x -> x >= 2, emptyArrayUInt8());SELECT arrayLastOrNull((x,f) -> f, [1,2,3,NULL], [0,1,0,1]);\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toFloat32OrZero"], "Feature": ["toFloat32OrZero(x)"], "Description": ["toFloat32OrZero", "Like toFloat32, this function converts an input value to a value of type Float32 but returns 0 in case of an error.", "Syntax", "toFloat32OrZero(x)", "Arguments", "x \u2014 A String representation of a number. String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256, Float32/64.", "Unsupported arguments (return 0):", "String representations of binary and hexadecimal values, e.g. SELECT toFloat32OrZero('0xc0fe');.", "Returned value", "32-bit Float value if successful, otherwise 0. Float32."], "Examples": ["SELECT    toFloat32OrZero('42.7'),    toFloat32OrZero('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1291, "vector_txt": "1291:Feature: toFloat32OrZero(x)\nDescription: toFloat32OrZeroLike toFloat32, this function converts an input value to a value of type Float32 but returns 0 in case of an error.SyntaxtoFloat32OrZero(x)Argumentsx \u2014 A String representation of a number. String.Supported arguments:String representations of (U)Int8/16/32/128/256, Float32/64.Unsupported arguments (return 0):String representations of binary and hexadecimal values, e.g. SELECT toFloat32OrZero('0xc0fe');.Returned value32-bit Float value if successful, otherwise 0. Float32.\nExamples: SELECT    toFloat32OrZero('42.7'),    toFloat32OrZero('abc')FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toFloat32OrNull"], "Feature": ["toFloat32OrNull(x)"], "Description": ["toFloat32OrNull", "Like toFloat32, this function converts an input value to a value of type Float32 but returns NULL in case of an error.", "Syntax", "toFloat32OrNull(x)", "Arguments", "x \u2014 A String representation of a number. String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256, Float32/64.", "Unsupported arguments (return \\N):", "String representations of binary and hexadecimal values, e.g. SELECT toFloat32OrNull('0xc0fe');.", "Returned value", "32-bit Float value if successful, otherwise \\N. Float32."], "Examples": ["SELECT    toFloat32OrNull('42.7'),    toFloat32OrNull('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1292, "vector_txt": "1292:Feature: toFloat32OrNull(x)\nDescription: toFloat32OrNullLike toFloat32, this function converts an input value to a value of type Float32 but returns NULL in case of an error.SyntaxtoFloat32OrNull(x)Argumentsx \u2014 A String representation of a number. String.Supported arguments:String representations of (U)Int8/16/32/128/256, Float32/64.Unsupported arguments (return \\N):String representations of binary and hexadecimal values, e.g. SELECT toFloat32OrNull('0xc0fe');.Returned value32-bit Float value if successful, otherwise \\N. Float32.\nExamples: SELECT    toFloat32OrNull('42.7'),    toFloat32OrNull('abc')FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toFloat32OrDefault"], "Feature": ["toFloat32OrDefault(expr[, default])"], "Description": ["toFloat32OrDefault", "Like toFloat32, this function converts an input value to a value of type Float32 but returns the default value in case of an error.\nIf no default value is passed then 0 is returned in case of an error.", "Syntax", "toFloat32OrDefault(expr[, default])", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression / String.default (optional) \u2014 The default value to return if parsing to type Float32 is unsuccessful. Float32.", "Supported arguments:", "Values of type (U)Int8/16/32/64/128/256.String representations of (U)Int8/16/32/128/256.Values of type Float32/64, including NaN and Inf.String representations of Float32/64, including NaN and Inf (case-insensitive).", "Arguments for which the default value is returned:", "String representations of binary and hexadecimal values, e.g. SELECT toFloat32OrDefault('0xc0fe', CAST('0', 'Float32'));.", "Returned value", "32-bit Float value if successful, otherwise returns the default value if passed or 0 if not. Float32."], "Examples": ["SELECT    toFloat32OrDefault('8', CAST('0', 'Float32')),    toFloat32OrDefault('abc', CAST('0', 'Float32'))FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1293, "vector_txt": "1293:Feature: toFloat32OrDefault(expr[, default])\nDescription: toFloat32OrDefaultLike toFloat32, this function converts an input value to a value of type Float32 but returns the default value in case of an error.\nIf no default value is passed then 0 is returned in case of an error.SyntaxtoFloat32OrDefault(expr[, default])Argumentsexpr \u2014 Expression returning a number or a string representation of a number. Expression / String.default (optional) \u2014 The default value to return if parsing to type Float32 is unsuccessful. Float32.Supported arguments:Values of type (U)Int8/16/32/64/128/256.String representations of (U)Int8/16/32/128/256.Values of type Float32/64, including NaN and Inf.String representations of Float32/64, including NaN and Inf (case-insensitive).Arguments for which the default value is returned:String representations of binary and hexadecimal values, e.g. SELECT toFloat32OrDefault('0xc0fe', CAST('0', 'Float32'));.Returned value32-bit Float value if successful, otherwise returns the default value if passed or 0 if not. Float32.\nExamples: SELECT    toFloat32OrDefault('8', CAST('0', 'Float32')),    toFloat32OrDefault('abc', CAST('0', 'Float32'))FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toFloat64"], "Feature": ["toFloat64(expr)"], "Description": ["toFloat64", "Converts an input value to a value of type Float64. Throws an exception in case of an error.", "Syntax", "toFloat64(expr)", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression.", "Supported arguments:", "Values of type (U)Int8/16/32/64/128/256.String representations of (U)Int8/16/32/128/256.Values of type Float32/64, including NaN and Inf.String representations of type Float32/64, including NaN and Inf (case-insensitive).", "Unsupported arguments:", "String representations of binary and hexadecimal values, e.g. SELECT toFloat64('0xc0fe');.", "Returned value", "64-bit floating point value. Float64."], "Examples": ["SELECT    toFloat64(42.7),    toFloat64('42.7'),    toFloat64('NaN')FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1294, "vector_txt": "1294:Feature: toFloat64(expr)\nDescription: toFloat64Converts an input value to a value of type Float64. Throws an exception in case of an error.SyntaxtoFloat64(expr)Argumentsexpr \u2014 Expression returning a number or a string representation of a number. Expression.Supported arguments:Values of type (U)Int8/16/32/64/128/256.String representations of (U)Int8/16/32/128/256.Values of type Float32/64, including NaN and Inf.String representations of type Float32/64, including NaN and Inf (case-insensitive).Unsupported arguments:String representations of binary and hexadecimal values, e.g. SELECT toFloat64('0xc0fe');.Returned value64-bit floating point value. Float64.\nExamples: SELECT    toFloat64(42.7),    toFloat64('42.7'),    toFloat64('NaN')FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toFloat64OrZero"], "Feature": ["toFloat64OrZero(x)"], "Description": ["toFloat64OrZero", "Like toFloat64, this function converts an input value to a value of type Float64 but returns 0 in case of an error.", "Syntax", "toFloat64OrZero(x)", "Arguments", "x \u2014 A String representation of a number. String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256, Float32/64.", "Unsupported arguments (return 0):", "String representations of binary and hexadecimal values, e.g. SELECT toFloat64OrZero('0xc0fe');.", "Returned value", "64-bit Float value if successful, otherwise 0. Float64."], "Examples": ["SELECT    toFloat64OrZero('42.7'),    toFloat64OrZero('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1295, "vector_txt": "1295:Feature: toFloat64OrZero(x)\nDescription: toFloat64OrZeroLike toFloat64, this function converts an input value to a value of type Float64 but returns 0 in case of an error.SyntaxtoFloat64OrZero(x)Argumentsx \u2014 A String representation of a number. String.Supported arguments:String representations of (U)Int8/16/32/128/256, Float32/64.Unsupported arguments (return 0):String representations of binary and hexadecimal values, e.g. SELECT toFloat64OrZero('0xc0fe');.Returned value64-bit Float value if successful, otherwise 0. Float64.\nExamples: SELECT    toFloat64OrZero('42.7'),    toFloat64OrZero('abc')FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toFloat64OrNull"], "Feature": ["toFloat64OrNull(x)"], "Description": ["toFloat64OrNull", "Like toFloat64, this function converts an input value to a value of type Float64 but returns NULL in case of an error.", "Syntax", "toFloat64OrNull(x)", "Arguments", "x \u2014 A String representation of a number. String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256, Float32/64.", "Unsupported arguments (return \\N):", "String representations of binary and hexadecimal values, e.g. SELECT toFloat64OrNull('0xc0fe');.", "Returned value", "64-bit Float value if successful, otherwise \\N. Float64."], "Examples": ["SELECT    toFloat64OrNull('42.7'),    toFloat64OrNull('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1296, "vector_txt": "1296:Feature: toFloat64OrNull(x)\nDescription: toFloat64OrNullLike toFloat64, this function converts an input value to a value of type Float64 but returns NULL in case of an error.SyntaxtoFloat64OrNull(x)Argumentsx \u2014 A String representation of a number. String.Supported arguments:String representations of (U)Int8/16/32/128/256, Float32/64.Unsupported arguments (return \\N):String representations of binary and hexadecimal values, e.g. SELECT toFloat64OrNull('0xc0fe');.Returned value64-bit Float value if successful, otherwise \\N. Float64.\nExamples: SELECT    toFloat64OrNull('42.7'),    toFloat64OrNull('abc')FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toFloat64OrDefault"], "Feature": ["toFloat64OrDefault(expr[, default])"], "Description": ["toFloat64OrDefault", "Like toFloat64, this function converts an input value to a value of type Float64 but returns the default value in case of an error.\nIf no default value is passed then 0 is returned in case of an error.", "Syntax", "toFloat64OrDefault(expr[, default])", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression / String.default (optional) \u2014 The default value to return if parsing to type Float64 is unsuccessful. Float64.", "Supported arguments:", "Values of type (U)Int8/16/32/64/128/256.String representations of (U)Int8/16/32/128/256.Values of type Float32/64, including NaN and Inf.String representations of Float32/64, including NaN and Inf (case-insensitive).", "Arguments for which the default value is returned:", "String representations of binary and hexadecimal values, e.g. SELECT toFloat64OrDefault('0xc0fe', CAST('0', 'Float64'));.", "Returned value", "64-bit Float value if successful, otherwise returns the default value if passed or 0 if not. Float64."], "Examples": ["SELECT    toFloat64OrDefault('8', CAST('0', 'Float64')),    toFloat64OrDefault('abc', CAST('0', 'Float64'))FORMAT Vertical;"], "Category": ["Type Conversion Functions"], "index": 1297, "vector_txt": "1297:Feature: toFloat64OrDefault(expr[, default])\nDescription: toFloat64OrDefaultLike toFloat64, this function converts an input value to a value of type Float64 but returns the default value in case of an error.\nIf no default value is passed then 0 is returned in case of an error.SyntaxtoFloat64OrDefault(expr[, default])Argumentsexpr \u2014 Expression returning a number or a string representation of a number. Expression / String.default (optional) \u2014 The default value to return if parsing to type Float64 is unsuccessful. Float64.Supported arguments:Values of type (U)Int8/16/32/64/128/256.String representations of (U)Int8/16/32/128/256.Values of type Float32/64, including NaN and Inf.String representations of Float32/64, including NaN and Inf (case-insensitive).Arguments for which the default value is returned:String representations of binary and hexadecimal values, e.g. SELECT toFloat64OrDefault('0xc0fe', CAST('0', 'Float64'));.Returned value64-bit Float value if successful, otherwise returns the default value if passed or 0 if not. Float64.\nExamples: SELECT    toFloat64OrDefault('8', CAST('0', 'Float64')),    toFloat64OrDefault('abc', CAST('0', 'Float64'))FORMAT Vertical;\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDate"], "Feature": ["toDate"], "Description": ["toDate", "Converts the argument to Date data type.", "If the argument is DateTime or DateTime64, it truncates it and leaves the date component of the DateTime:", "SELECT    now() AS x,    toDate(x)", "\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500x\u2500\u252c\u2500toDate(now())\u2500\u2510\u2502 2022-12-30 13:44:17 \u2502    2022-12-30 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "If the argument is a String, it is parsed as Date or DateTime. If it was parsed as DateTime, the date component is being used:", "SELECT    toDate('2022-12-30') AS x,    toTypeName(x)", "\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500x\u2500\u252c\u2500toTypeName(toDate('2022-12-30'))\u2500\u2510\u2502 2022-12-30 \u2502 Date                             \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25181 row in set. Elapsed: 0.001 sec.", "SELECT    toDate('2022-12-30 01:02:03') AS x,    toTypeName(x)", "\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500x\u2500\u252c\u2500toTypeName(toDate('2022-12-30 01:02:03'))\u2500\u2510\u2502 2022-12-30 \u2502 Date                                      \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "If the argument is a number and looks like a UNIX timestamp (is greater than 65535), it is interpreted as a DateTime, then truncated to Date in the current timezone. The timezone argument can be specified as a second argument of the function. The truncation to Date depends on the timezone:", "SELECT    now() AS current_time,    toUnixTimestamp(current_time) AS ts,    toDateTime(ts) AS time_Amsterdam,    toDateTime(ts, 'Pacific/Apia') AS time_Samoa,    toDate(time_Amsterdam) AS date_Amsterdam,    toDate(time_Samoa) AS date_Samoa,    toDate(ts) AS date_Amsterdam_2,    toDate(ts, 'Pacific/Apia') AS date_Samoa_2", "Row 1:\u2500\u2500\u2500\u2500\u2500\u2500current_time:     2022-12-30 13:51:54ts:               1672404714time_Amsterdam:   2022-12-30 13:51:54time_Samoa:       2022-12-31 01:51:54date_Amsterdam:   2022-12-30date_Samoa:       2022-12-31date_Amsterdam_2: 2022-12-30date_Samoa_2:     2022-12-31", "The example above demonstrates how the same UNIX timestamp can be interpreted as different dates in different time zones.", "If the argument is a number and it is smaller than 65536, it is interpreted as the number of days since 1970-01-01 (the first UNIX day) and converted to Date. It corresponds to the internal numeric representation of the Date data type. Example:", "SELECT toDate(12345)", "\u250c\u2500toDate(12345)\u2500\u2510\u2502    2003-10-20 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "This conversion does not depend on timezones.", "If the argument does not fit in the range of the Date type, it results in an implementation-defined behavior, that can saturate to the maximum supported date or overflow:", "SELECT toDate(10000000000.)", "\u250c\u2500toDate(10000000000.)\u2500\u2510\u2502           2106-02-07 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "The function toDate can be also written in alternative forms:", "SELECT    now() AS time,    toDate(time),    DATE(time),    CAST(time, 'Date')", "\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500time\u2500\u252c\u2500toDate(now())\u2500\u252c\u2500DATE(now())\u2500\u252c\u2500CAST(now(), 'Date')\u2500\u2510\u2502 2022-12-30 13:54:58 \u2502    2022-12-30 \u2502  2022-12-30 \u2502          2022-12-30 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Examples": ["SELECT    now() AS x,    toDate(x)", "SELECT    toDate('2022-12-30') AS x,    toTypeName(x)", "SELECT    toDate('2022-12-30 01:02:03') AS x,    toTypeName(x)", "SELECT    now() AS current_time,    toUnixTimestamp(current_time) AS ts,    toDateTime(ts) AS time_Amsterdam,    toDateTime(ts, 'Pacific/Apia') AS time_Samoa,    toDate(time_Amsterdam) AS date_Amsterdam,    toDate(time_Samoa) AS date_Samoa,    toDate(ts) AS date_Amsterdam_2,    toDate(ts, 'Pacific/Apia') AS date_Samoa_2", "SELECT toDate(12345)", "SELECT toDate(10000000000.)", "SELECT    now() AS time,    toDate(time),    DATE(time),    CAST(time, 'Date')"], "Category": ["Type Conversion Functions"], "index": 1298, "vector_txt": "1298:Feature: toDate\nDescription: toDateConverts the argument to Date data type.If the argument is DateTime or DateTime64, it truncates it and leaves the date component of the DateTime:SELECT    now() AS x,    toDate(x)\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500x\u2500\u252c\u2500toDate(now())\u2500\u2510\u2502 2022-12-30 13:44:17 \u2502    2022-12-30 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518If the argument is a String, it is parsed as Date or DateTime. If it was parsed as DateTime, the date component is being used:SELECT    toDate('2022-12-30') AS x,    toTypeName(x)\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500x\u2500\u252c\u2500toTypeName(toDate('2022-12-30'))\u2500\u2510\u2502 2022-12-30 \u2502 Date                             \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25181 row in set. Elapsed: 0.001 sec.SELECT    toDate('2022-12-30 01:02:03') AS x,    toTypeName(x)\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500x\u2500\u252c\u2500toTypeName(toDate('2022-12-30 01:02:03'))\u2500\u2510\u2502 2022-12-30 \u2502 Date                                      \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518If the argument is a number and looks like a UNIX timestamp (is greater than 65535), it is interpreted as a DateTime, then truncated to Date in the current timezone. The timezone argument can be specified as a second argument of the function. The truncation to Date depends on the timezone:SELECT    now() AS current_time,    toUnixTimestamp(current_time) AS ts,    toDateTime(ts) AS time_Amsterdam,    toDateTime(ts, 'Pacific/Apia') AS time_Samoa,    toDate(time_Amsterdam) AS date_Amsterdam,    toDate(time_Samoa) AS date_Samoa,    toDate(ts) AS date_Amsterdam_2,    toDate(ts, 'Pacific/Apia') AS date_Samoa_2Row 1:\u2500\u2500\u2500\u2500\u2500\u2500current_time:     2022-12-30 13:51:54ts:               1672404714time_Amsterdam:   2022-12-30 13:51:54time_Samoa:       2022-12-31 01:51:54date_Amsterdam:   2022-12-30date_Samoa:       2022-12-31date_Amsterdam_2: 2022-12-30date_Samoa_2:     2022-12-31The example above demonstrates how the same UNIX timestamp can be interpreted as different dates in different time zones.If the argument is a number and it is smaller than 65536, it is interpreted as the number of days since 1970-01-01 (the first UNIX day) and converted to Date. It corresponds to the internal numeric representation of the Date data type. Example:SELECT toDate(12345)\u250c\u2500toDate(12345)\u2500\u2510\u2502    2003-10-20 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518This conversion does not depend on timezones.If the argument does not fit in the range of the Date type, it results in an implementation-defined behavior, that can saturate to the maximum supported date or overflow:SELECT toDate(10000000000.)\u250c\u2500toDate(10000000000.)\u2500\u2510\u2502           2106-02-07 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518The function toDate can be also written in alternative forms:SELECT    now() AS time,    toDate(time),    DATE(time),    CAST(time, 'Date')\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500time\u2500\u252c\u2500toDate(now())\u2500\u252c\u2500DATE(now())\u2500\u252c\u2500CAST(now(), 'Date')\u2500\u2510\u2502 2022-12-30 13:54:58 \u2502    2022-12-30 \u2502  2022-12-30 \u2502          2022-12-30 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nExamples: SELECT    now() AS x,    toDate(x)SELECT    toDate('2022-12-30') AS x,    toTypeName(x)SELECT    toDate('2022-12-30 01:02:03') AS x,    toTypeName(x)SELECT    now() AS current_time,    toUnixTimestamp(current_time) AS ts,    toDateTime(ts) AS time_Amsterdam,    toDateTime(ts, 'Pacific/Apia') AS time_Samoa,    toDate(time_Amsterdam) AS date_Amsterdam,    toDate(time_Samoa) AS date_Samoa,    toDate(ts) AS date_Amsterdam_2,    toDate(ts, 'Pacific/Apia') AS date_Samoa_2SELECT toDate(12345)SELECT toDate(10000000000.)SELECT    now() AS time,    toDate(time),    DATE(time),    CAST(time, 'Date')\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDateOrZero"], "Feature": ["toDateOrZero"], "Description": ["toDateOrZero", "The same as toDate but returns lower boundary of Date if an invalid argument is received. Only String argument is supported."], "Examples": ["SELECT toDateOrZero('2022-12-30'), toDateOrZero('');"], "Category": ["Type Conversion Functions"], "index": 1299, "vector_txt": "1299:Feature: toDateOrZero\nDescription: toDateOrZeroThe same as toDate but returns lower boundary of Date if an invalid argument is received. Only String argument is supported.\nExamples: SELECT toDateOrZero('2022-12-30'), toDateOrZero('');\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDateOrNull"], "Feature": ["toDateOrNull"], "Description": ["toDateOrNull", "The same as toDate but returns NULL if an invalid argument is received. Only String argument is supported."], "Examples": ["SELECT toDateOrNull('2022-12-30'), toDateOrNull('');"], "Category": ["Type Conversion Functions"], "index": 1300, "vector_txt": "1300:Feature: toDateOrNull\nDescription: toDateOrNullThe same as toDate but returns NULL if an invalid argument is received. Only String argument is supported.\nExamples: SELECT toDateOrNull('2022-12-30'), toDateOrNull('');\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayLast(func, arr1, ...)"], "Feature": ["arrayLast(func, arr1, ...)"], "Description": ["arrayLast(func, arr1, ...)", "Returns the last element in the arr1 array for which func(arr1[i], ..., arrN[i]) returns something other than 0.", "Note that the arrayLast is a higher-order function. You must pass a lambda function to it as the first argument, and it can\u2019t be omitted."], "Examples": [], "Category": ["Arrays Functions"], "index": 1301, "vector_txt": "1301:Feature: arrayLast(func, arr1, ...)\nDescription: arrayLast(func, arr1, ...)Returns the last element in the arr1 array for which func(arr1[i], ..., arrN[i]) returns something other than 0.Note that the arrayLast is a higher-order function. You must pass a lambda function to it as the first argument, and it can\u2019t be omitted.\nExamples: \nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDateOrDefault"], "Feature": ["toDateOrDefault(expr [, default_value])"], "Description": ["toDateOrDefault", "Like toDate but if unsuccessful, returns a default value which is either the second argument (if specified), or otherwise the lower boundary of Date.", "Syntax", "toDateOrDefault(expr [, default_value])"], "Examples": ["SELECT toDateOrDefault('2022-12-30'), toDateOrDefault('', '2023-01-01'::Date);"], "Category": ["Type Conversion Functions"], "index": 1302, "vector_txt": "1302:Feature: toDateOrDefault(expr [, default_value])\nDescription: toDateOrDefaultLike toDate but if unsuccessful, returns a default value which is either the second argument (if specified), or otherwise the lower boundary of Date.SyntaxtoDateOrDefault(expr [, default_value])\nExamples: SELECT toDateOrDefault('2022-12-30'), toDateOrDefault('', '2023-01-01'::Date);\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDateTime"], "Feature": ["toDateTime(expr[, time_zone ])"], "Description": ["toDateTime", "Converts an input value to DateTime.", "Syntax", "toDateTime(expr[, time_zone ])", "Arguments", "expr \u2014 The value. String, Int, Date or DateTime.time_zone \u2014 Time zone. String.", "NoteIf expr is a number, it is interpreted as the number of seconds since the beginning of the Unix Epoch (as Unix timestamp).\nIf expr is a String, it may be interpreted as a Unix timestamp or as a string representation of date / date with time.\nThus, parsing of short numbers' string representations (up to 4 digits) is explicitly disabled due to ambiguity, e.g. a string '1999' may be both a year (an incomplete string representation of Date / DateTime) or a unix timestamp. Longer numeric strings are allowed.", "Returned value", "A date time. DateTime"], "Examples": ["SELECT toDateTime('2022-12-30 13:44:17'), toDateTime(1685457500, 'UTC');"], "Category": ["Type Conversion Functions"], "index": 1303, "vector_txt": "1303:Feature: toDateTime(expr[, time_zone ])\nDescription: toDateTimeConverts an input value to DateTime.SyntaxtoDateTime(expr[, time_zone ])Argumentsexpr \u2014 The value. String, Int, Date or DateTime.time_zone \u2014 Time zone. String.NoteIf expr is a number, it is interpreted as the number of seconds since the beginning of the Unix Epoch (as Unix timestamp).\nIf expr is a String, it may be interpreted as a Unix timestamp or as a string representation of date / date with time.\nThus, parsing of short numbers' string representations (up to 4 digits) is explicitly disabled due to ambiguity, e.g. a string '1999' may be both a year (an incomplete string representation of Date / DateTime) or a unix timestamp. Longer numeric strings are allowed.Returned valueA date time. DateTime\nExamples: SELECT toDateTime('2022-12-30 13:44:17'), toDateTime(1685457500, 'UTC');\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDateTimeOrZero"], "Feature": ["toDateTimeOrZero"], "Description": ["toDateTimeOrZero", "The same as toDateTime but returns lower boundary of DateTime if an invalid argument is received. Only String argument is supported."], "Examples": ["SELECT toDateTimeOrZero('2022-12-30 13:44:17'), toDateTimeOrZero('');"], "Category": ["Type Conversion Functions"], "index": 1304, "vector_txt": "1304:Feature: toDateTimeOrZero\nDescription: toDateTimeOrZeroThe same as toDateTime but returns lower boundary of DateTime if an invalid argument is received. Only String argument is supported.\nExamples: SELECT toDateTimeOrZero('2022-12-30 13:44:17'), toDateTimeOrZero('');\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDateTimeOrNull"], "Feature": ["toDateTimeOrNull"], "Description": ["toDateTimeOrNull", "The same as toDateTime but returns NULL if an invalid argument is received. Only String argument is supported."], "Examples": ["SELECT toDateTimeOrNull('2022-12-30 13:44:17'), toDateTimeOrNull('');"], "Category": ["Type Conversion Functions"], "index": 1305, "vector_txt": "1305:Feature: toDateTimeOrNull\nDescription: toDateTimeOrNullThe same as toDateTime but returns NULL if an invalid argument is received. Only String argument is supported.\nExamples: SELECT toDateTimeOrNull('2022-12-30 13:44:17'), toDateTimeOrNull('');\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDateTimeOrDefault"], "Feature": ["toDateTimeOrDefault(expr [, time_zone [, default_value]])"], "Description": ["toDateTimeOrDefault", "Like toDateTime but if unsuccessful, returns a default value which is either the third argument (if specified), or otherwise the lower boundary of DateTime.", "Syntax", "toDateTimeOrDefault(expr [, time_zone [, default_value]])"], "Examples": ["SELECT toDateTimeOrDefault('2022-12-30 13:44:17'), toDateTimeOrDefault('', 'UTC', '2023-01-01'::DateTime('UTC'));"], "Category": ["Type Conversion Functions"], "index": 1306, "vector_txt": "1306:Feature: toDateTimeOrDefault(expr [, time_zone [, default_value]])\nDescription: toDateTimeOrDefaultLike toDateTime but if unsuccessful, returns a default value which is either the third argument (if specified), or otherwise the lower boundary of DateTime.SyntaxtoDateTimeOrDefault(expr [, time_zone [, default_value]])\nExamples: SELECT toDateTimeOrDefault('2022-12-30 13:44:17'), toDateTimeOrDefault('', 'UTC', '2023-01-01'::DateTime('UTC'));\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDate32"], "Feature": ["toDate32(expr)"], "Description": ["toDate32", "Converts the argument to the Date32 data type. If the value is outside the range, toDate32 returns the border values supported by Date32. If the argument has Date type, it's borders are taken into account.", "Syntax", "toDate32(expr)", "Arguments", "expr \u2014 The value. String, UInt32 or Date.", "Returned value", "A calendar date. Type Date32."], "Examples": ["SELECT toDate32('1955-01-01') AS value, toTypeName(value);", "SELECT toDate32('1899-01-01') AS value, toTypeName(value);", "SELECT toDate32(toDate('1899-01-01')) AS value, toTypeName(value);"], "Category": ["Type Conversion Functions"], "index": 1307, "vector_txt": "1307:Feature: toDate32(expr)\nDescription: toDate32Converts the argument to the Date32 data type. If the value is outside the range, toDate32 returns the border values supported by Date32. If the argument has Date type, it's borders are taken into account.SyntaxtoDate32(expr)Argumentsexpr \u2014 The value. String, UInt32 or Date.Returned valueA calendar date. Type Date32.\nExamples: SELECT toDate32('1955-01-01') AS value, toTypeName(value);SELECT toDate32('1899-01-01') AS value, toTypeName(value);SELECT toDate32(toDate('1899-01-01')) AS value, toTypeName(value);\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDate32OrZero"], "Feature": ["toDate32OrZero"], "Description": ["toDate32OrZero", "The same as toDate32 but returns the min value of Date32 if an invalid argument is received."], "Examples": ["SELECT toDate32OrZero('1899-01-01'), toDate32OrZero('');"], "Category": ["Type Conversion Functions"], "index": 1308, "vector_txt": "1308:Feature: toDate32OrZero\nDescription: toDate32OrZeroThe same as toDate32 but returns the min value of Date32 if an invalid argument is received.\nExamples: SELECT toDate32OrZero('1899-01-01'), toDate32OrZero('');\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDate32OrNull"], "Feature": ["toDate32OrNull"], "Description": ["toDate32OrNull", "The same as toDate32 but returns NULL if an invalid argument is received."], "Examples": ["SELECT toDate32OrNull('1955-01-01'), toDate32OrNull('');"], "Category": ["Type Conversion Functions"], "index": 1309, "vector_txt": "1309:Feature: toDate32OrNull\nDescription: toDate32OrNullThe same as toDate32 but returns NULL if an invalid argument is received.\nExamples: SELECT toDate32OrNull('1955-01-01'), toDate32OrNull('');\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDate32OrDefault"], "Feature": ["toDate32OrDefault"], "Description": ["toDate32OrDefault", "Converts the argument to the Date32 data type. If the value is outside the range, toDate32OrDefault returns the lower border value supported by Date32. If the argument has Date type, it's borders are taken into account. Returns default value if an invalid argument is received."], "Examples": ["SELECT    toDate32OrDefault('1930-01-01', toDate32('2020-01-01')),    toDate32OrDefault('xx1930-01-01', toDate32('2020-01-01'));"], "Category": ["Type Conversion Functions"], "index": 1310, "vector_txt": "1310:Feature: toDate32OrDefault\nDescription: toDate32OrDefaultConverts the argument to the Date32 data type. If the value is outside the range, toDate32OrDefault returns the lower border value supported by Date32. If the argument has Date type, it's borders are taken into account. Returns default value if an invalid argument is received.\nExamples: SELECT    toDate32OrDefault('1930-01-01', toDate32('2020-01-01')),    toDate32OrDefault('xx1930-01-01', toDate32('2020-01-01'));\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDateTime64"], "Feature": ["toDateTime64(expr, scale, [timezone])"], "Description": ["toDateTime64", "Converts an input value to a value of type DateTime64.", "Syntax", "toDateTime64(expr, scale, [timezone])", "Arguments", "expr \u2014 The value. String, UInt32, Float or DateTime.scale - Tick size (precision): 10-precision seconds. Valid range: [ 0 : 9 ].timezone (optional) - Time zone of the specified datetime64 object.", "Returned value", "A calendar date and time of day, with sub-second precision. DateTime64."], "Examples": ["SELECT toDateTime64('1955-01-01 00:00:00.000', 3) AS value, toTypeName(value);", "SELECT toDateTime64(1546300800.000, 3) AS value, toTypeName(value);", "SELECT toDateTime64(1546300800000, 3) AS value, toTypeName(value);", "SELECT toDateTime64('2019-01-01 00:00:00', 3, 'Asia/Istanbul') AS value, toTypeName(value);"], "Category": ["Type Conversion Functions"], "index": 1311, "vector_txt": "1311:Feature: toDateTime64(expr, scale, [timezone])\nDescription: toDateTime64Converts an input value to a value of type DateTime64.SyntaxtoDateTime64(expr, scale, [timezone])Argumentsexpr \u2014 The value. String, UInt32, Float or DateTime.scale - Tick size (precision): 10-precision seconds. Valid range: [ 0 : 9 ].timezone (optional) - Time zone of the specified datetime64 object.Returned valueA calendar date and time of day, with sub-second precision. DateTime64.\nExamples: SELECT toDateTime64('1955-01-01 00:00:00.000', 3) AS value, toTypeName(value);SELECT toDateTime64(1546300800.000, 3) AS value, toTypeName(value);SELECT toDateTime64(1546300800000, 3) AS value, toTypeName(value);SELECT toDateTime64('2019-01-01 00:00:00', 3, 'Asia/Istanbul') AS value, toTypeName(value);\nCategory: Type Conversion Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayLastOrNull"], "Feature": ["arrayLastOrNull(func, arr1, ...)"], "Description": ["arrayLastOrNull", "Returns the last element in the arr1 array for which func(arr1[i], ..., arrN[i]) returns something other than 0, otherwise returns NULL.", "Syntax", "arrayLastOrNull(func, arr1, ...)", "Parameters", "func: Lambda function. Lambda function.arr1: Array to operate on. Array.", "Returned value", "The last element in the passed array.Otherwise, returns NULL", "Implementation details", "Note that the arrayLastOrNull is a higher-order function. You must pass a lambda function to it as the first argument, and it can\u2019t be omitted."], "Examples": ["SELECT arrayLastOrNull(x -> x >= 2, [1, 2, 3]);", "SELECT arrayLastOrNull(x -> x >= 2, emptyArrayUInt8());"], "Category": ["Arrays Functions"], "index": 1312, "vector_txt": "1312:Feature: arrayLastOrNull(func, arr1, ...)\nDescription: arrayLastOrNullReturns the last element in the arr1 array for which func(arr1[i], ..., arrN[i]) returns something other than 0, otherwise returns NULL.SyntaxarrayLastOrNull(func, arr1, ...)Parametersfunc: Lambda function. Lambda function.arr1: Array to operate on. Array.Returned valueThe last element in the passed array.Otherwise, returns NULLImplementation detailsNote that the arrayLastOrNull is a higher-order function. You must pass a lambda function to it as the first argument, and it can\u2019t be omitted.\nExamples: SELECT arrayLastOrNull(x -> x >= 2, [1, 2, 3]);SELECT arrayLastOrNull(x -> x >= 2, emptyArrayUInt8());\nCategory: Arrays Functions\n"}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/arithmetic-functions"], "Title": ["isNaN"], "Feature": ["isNaN(x)"], "Description": ["isNaN", "Returns 1 if the Float32 and Float64 argument is NaN, otherwise this function 0.", "Syntax", "isNaN(x)"], "Examples": ["isNaN(x)"], "Category": ["Arithmetic Functions"], "index": 1313, "vector_txt": "1313:Feature: isNaN(x)\nDescription: isNaNReturns 1 if the Float32 and Float64 argument is NaN, otherwise this function 0.SyntaxisNaN(x)\nExamples: isNaN(x)\nCategory: Arithmetic Functions\n"}
