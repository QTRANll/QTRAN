{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDate32OrNull"], "Feature": ["toDate32OrNull"], "Description": ["toDate32OrNull", "The same as toDate32 but returns NULL if an invalid argument is received."], "Examples": ["SELECT toDate32OrNull('1955-01-01'), toDate32OrNull('');"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDate32OrDefault"], "Feature": ["toDate32OrDefault"], "Description": ["toDate32OrDefault", "Converts the argument to the Date32 data type. If the value is outside the range, toDate32OrDefault returns the lower border value supported by Date32. If the argument has Date type, it's borders are taken into account. Returns default value if an invalid argument is received."], "Examples": ["SELECT    toDate32OrDefault('1930-01-01', toDate32('2020-01-01')),    toDate32OrDefault('xx1930-01-01', toDate32('2020-01-01'));"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDateTime64"], "Feature": ["toDateTime64(expr, scale, [timezone])"], "Description": ["toDateTime64", "Converts an input value to a value of type DateTime64.", "Syntax", "toDateTime64(expr, scale, [timezone])", "Arguments", "expr \u2014 The value. String, UInt32, Float or DateTime.scale - Tick size (precision): 10-precision seconds. Valid range: [ 0 : 9 ].timezone (optional) - Time zone of the specified datetime64 object.", "Returned value", "A calendar date and time of day, with sub-second precision. DateTime64."], "Examples": ["SELECT toDateTime64('1955-01-01 00:00:00.000', 3) AS value, toTypeName(value);", "SELECT toDateTime64(1546300800.000, 3) AS value, toTypeName(value);", "SELECT toDateTime64(1546300800000, 3) AS value, toTypeName(value);", "SELECT toDateTime64('2019-01-01 00:00:00', 3, 'Asia/Istanbul') AS value, toTypeName(value);"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDateTime64OrZero"], "Feature": ["toDateTime64OrZero(expr, scale, [timezone])"], "Description": ["toDateTime64OrZero", "Like toDateTime64, this function converts an input value to a value of type DateTime64 but returns the min value of DateTime64 if an invalid argument is received.", "Syntax", "toDateTime64OrZero(expr, scale, [timezone])", "Arguments", "expr \u2014 The value. String, UInt32, Float or DateTime.scale - Tick size (precision): 10-precision seconds. Valid range: [ 0 : 9 ].timezone (optional) - Time zone of the specified DateTime64 object.", "Returned value", "A calendar date and time of day, with sub-second precision, otherwise the minimum value of DateTime64: 1970-01-01 01:00:00.000. DateTime64."], "Examples": ["SELECT toDateTime64OrZero('2008-10-12 00:00:00 00:30:30', 3) AS invalid_arg"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDateTime64OrNull"], "Feature": ["toDateTime64OrNull(expr, scale, [timezone])"], "Description": ["toDateTime64OrNull", "Like toDateTime64, this function converts an input value to a value of type DateTime64 but returns NULL if an invalid argument is received.", "Syntax", "toDateTime64OrNull(expr, scale, [timezone])", "Arguments", "expr \u2014 The value. String, UInt32, Float or DateTime.scale - Tick size (precision): 10-precision seconds. Valid range: [ 0 : 9 ].timezone (optional) - Time zone of the specified DateTime64 object.", "Returned value", "A calendar date and time of day, with sub-second precision, otherwise NULL. DateTime64/NULL."], "Examples": ["SELECT    toDateTime64OrNull('1976-10-18 00:00:00.30', 3) AS valid_arg,    toDateTime64OrNull('1976-10-18 00:00:00 30', 3) AS invalid_arg"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDateTime64OrDefault"], "Feature": ["toDateTime64OrNull(expr, scale, [timezone, default])"], "Description": ["toDateTime64OrDefault", "Like toDateTime64, this function converts an input value to a value of type DateTime64,\nbut returns either the default value of DateTime64\nor the provided default if an invalid argument is received.", "Syntax", "toDateTime64OrNull(expr, scale, [timezone, default])", "Arguments", "expr \u2014 The value. String, UInt32, Float or DateTime.scale - Tick size (precision): 10-precision seconds. Valid range: [ 0 : 9 ].timezone (optional) - Time zone of the specified DateTime64 object.default (optional) - Default value to return if an invalid argument is received. DateTime64.", "Returned value", "A calendar date and time of day, with sub-second precision, otherwise the minimum value of DateTime64 or the default value if provided. DateTime64."], "Examples": ["SELECT    toDateTime64OrDefault('1976-10-18 00:00:00 30', 3) AS invalid_arg,    toDateTime64OrDefault('1976-10-18 00:00:00 30', 3, 'UTC', toDateTime64('2001-01-01 00:00:00.00',3)) AS invalid_arg_with_default"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDecimal32"], "Feature": ["toDecimal32(expr, S)"], "Description": ["toDecimal32", "Converts an input value to a value of type Decimal(9, S) with scale of S. Throws an exception in case of an error.", "Syntax", "toDecimal32(expr, S)", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression.S \u2014 Scale parameter between 0 and 9, specifying how many digits the fractional part of a number can have. UInt8.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values or string representations of type Float32/64.", "Unsupported arguments:", "Values or string representations of Float32/64 values NaN and Inf (case-insensitive).String representations of binary and hexadecimal values, e.g. SELECT toDecimal32('0xc0fe', 1);.", "NoteAn overflow can occur if the value of expr exceeds the bounds of Decimal32: ( -1 * 10^(9 - S), 1 * 10^(9 - S) ).\nExcessive digits in a fraction are discarded (not rounded).\nExcessive digits in the integer part will lead to an exception.", "DangerConversions drop extra digits and could operate in an unexpected way when working with Float32/Float64 inputs as the operations are performed using floating point instructions.\nFor example: toDecimal32(1.15, 2) is equal to 1.14 because 1.15 * 100 in floating point is 114.99.\nYou can use a String input so the operations use the underlying integer type: toDecimal32('1.15', 2) = 1.15", "Returned value", "Value of type Decimal(9, S). Decimal32(S)."], "Examples": ["SELECT    toDecimal32(2, 1) AS a, toTypeName(a) AS type_a,    toDecimal32(4.2, 2) AS b, toTypeName(b) AS type_b,    toDecimal32('4.2', 3) AS c, toTypeName(c) AS type_cFORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDecimal32OrZero"], "Feature": ["toDecimal32OrZero(expr, S)"], "Description": ["toDecimal32OrZero", "Like toDecimal32, this function converts an input value to a value of type Decimal(9, S) but returns 0 in case of an error.", "Syntax", "toDecimal32OrZero(expr, S)", "Arguments", "expr \u2014 A String representation of a number. String.S \u2014 Scale parameter between 0 and 9, specifying how many digits the fractional part of a number can have. UInt8.", "Supported arguments:", "String representations of type (U)Int8/16/32/64/128/256.String representations of type Float32/64.", "Unsupported arguments:", "String representations of Float32/64 values NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toDecimal32OrZero('0xc0fe', 1);.", "NoteAn overflow can occur if the value of expr exceeds the bounds of Decimal32: ( -1 * 10^(9 - S), 1 * 10^(9 - S) ).\nExcessive digits in a fraction are discarded (not rounded).\nExcessive digits in the integer part will lead to an error.", "Returned value", "Value of type Decimal(9, S) if successful, otherwise 0 with S decimal places. Decimal32(S)."], "Examples": ["SELECT    toDecimal32OrZero(toString(-1.111), 5) AS a,    toTypeName(a),    toDecimal32OrZero(toString('Inf'), 5) as b,    toTypeName(b)FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDecimal32OrNull"], "Feature": ["toDecimal32OrNull(expr, S)"], "Description": ["toDecimal32OrNull", "Like toDecimal32, this function converts an input value to a value of type Nullable(Decimal(9, S)) but returns 0 in case of an error.", "Syntax", "toDecimal32OrNull(expr, S)", "Arguments", "expr \u2014 A String representation of a number. String.S \u2014 Scale parameter between 0 and 9, specifying how many digits the fractional part of a number can have. UInt8.", "Supported arguments:", "String representations of type (U)Int8/16/32/64/128/256.String representations of type Float32/64.", "Unsupported arguments:", "String representations of Float32/64 values NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toDecimal32OrNull('0xc0fe', 1);.", "NoteAn overflow can occur if the value of expr exceeds the bounds of Decimal32: ( -1 * 10^(9 - S), 1 * 10^(9 - S) ).\nExcessive digits in a fraction are discarded (not rounded).\nExcessive digits in the integer part will lead to an error.", "Returned value", "Value of type Nullable(Decimal(9, S)) if successful, otherwise value NULL of the same type. Decimal32(S)."], "Examples": ["SELECT    toDecimal32OrNull(toString(-1.111), 5) AS a,    toTypeName(a),    toDecimal32OrNull(toString('Inf'), 5) as b,    toTypeName(b)FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDecimal32OrDefault"], "Feature": ["toDecimal32OrDefault(expr, S[, default])"], "Description": ["toDecimal32OrDefault", "Like toDecimal32, this function converts an input value to a value of type Decimal(9, S) but returns the default value in case of an error.", "Syntax", "toDecimal32OrDefault(expr, S[, default])", "Arguments", "expr \u2014 A String representation of a number. String.S \u2014 Scale parameter between 0 and 9, specifying how many digits the fractional part of a number can have. UInt8.default (optional) \u2014 The default value to return if parsing to type Decimal32(S) is unsuccessful. Decimal32(S).", "Supported arguments:", "String representations of type (U)Int8/16/32/64/128/256.String representations of type Float32/64.", "Unsupported arguments:", "String representations of Float32/64 values NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toDecimal32OrDefault('0xc0fe', 1);.", "NoteAn overflow can occur if the value of expr exceeds the bounds of Decimal32: ( -1 * 10^(9 - S), 1 * 10^(9 - S) ).\nExcessive digits in a fraction are discarded (not rounded).\nExcessive digits in the integer part will lead to an error.", "DangerConversions drop extra digits and could operate in an unexpected way when working with Float32/Float64 inputs as the operations are performed using floating point instructions.\nFor example: toDecimal32OrDefault(1.15, 2) is equal to 1.14 because 1.15 * 100 in floating point is 114.99.\nYou can use a String input so the operations use the underlying integer type: toDecimal32OrDefault('1.15', 2) = 1.15", "Returned value", "Value of type Decimal(9, S) if successful, otherwise returns the default value if passed or 0 if not. Decimal32(S)."], "Examples": ["SELECT    toDecimal32OrDefault(toString(0.0001), 5) AS a,    toTypeName(a),    toDecimal32OrDefault('Inf', 0, CAST('-1', 'Decimal32(0)')) AS b,    toTypeName(b)FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDecimal64"], "Feature": ["toDecimal64(expr, S)"], "Description": ["toDecimal64", "Converts an input value to a value of type Decimal(18, S) with scale of S. Throws an exception in case of an error.", "Syntax", "toDecimal64(expr, S)", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression.S \u2014 Scale parameter between 0 and 18, specifying how many digits the fractional part of a number can have. UInt8.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values or string representations of type Float32/64.", "Unsupported arguments:", "Values or string representations of Float32/64 values NaN and Inf (case-insensitive).String representations of binary and hexadecimal values, e.g. SELECT toDecimal64('0xc0fe', 1);.", "NoteAn overflow can occur if the value of expr exceeds the bounds of Decimal64: ( -1 * 10^(18 - S), 1 * 10^(18 - S) ).\nExcessive digits in a fraction are discarded (not rounded).\nExcessive digits in the integer part will lead to an exception.", "DangerConversions drop extra digits and could operate in an unexpected way when working with Float32/Float64 inputs as the operations are performed using floating point instructions.\nFor example: toDecimal64(1.15, 2) is equal to 1.14 because 1.15 * 100 in floating point is 114.99.\nYou can use a String input so the operations use the underlying integer type: toDecimal64('1.15', 2) = 1.15", "Returned value", "Value of type Decimal(18, S). Decimal64(S)."], "Examples": ["SELECT    toDecimal64(2, 1) AS a, toTypeName(a) AS type_a,    toDecimal64(4.2, 2) AS b, toTypeName(b) AS type_b,    toDecimal64('4.2', 3) AS c, toTypeName(c) AS type_cFORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDecimal64OrZero"], "Feature": ["toDecimal64OrZero(expr, S)"], "Description": ["toDecimal64OrZero", "Like toDecimal64, this function converts an input value to a value of type Decimal(18, S) but returns 0 in case of an error.", "Syntax", "toDecimal64OrZero(expr, S)", "Arguments", "expr \u2014 A String representation of a number. String.S \u2014 Scale parameter between 0 and 18, specifying how many digits the fractional part of a number can have. UInt8.", "Supported arguments:", "String representations of type (U)Int8/16/32/64/128/256.String representations of type Float32/64.", "Unsupported arguments:", "String representations of Float32/64 values NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toDecimal64OrZero('0xc0fe', 1);.", "NoteAn overflow can occur if the value of expr exceeds the bounds of Decimal64: ( -1 * 10^(18 - S), 1 * 10^(18 - S) ).\nExcessive digits in a fraction are discarded (not rounded).\nExcessive digits in the integer part will lead to an error.", "Returned value", "Value of type Decimal(18, S) if successful, otherwise 0 with S decimal places. Decimal64(S)."], "Examples": ["SELECT    toDecimal64OrZero(toString(0.0001), 18) AS a,    toTypeName(a),    toDecimal64OrZero(toString('Inf'), 18) as b,    toTypeName(b)FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDecimal64OrNull"], "Feature": ["toDecimal64OrNull(expr, S)"], "Description": ["toDecimal64OrNull", "Like toDecimal64, this function converts an input value to a value of type Nullable(Decimal(18, S)) but returns 0 in case of an error.", "Syntax", "toDecimal64OrNull(expr, S)", "Arguments", "expr \u2014 A String representation of a number. String.S \u2014 Scale parameter between 0 and 18, specifying how many digits the fractional part of a number can have. UInt8.", "Supported arguments:", "String representations of type (U)Int8/16/32/64/128/256.String representations of type Float32/64.", "Unsupported arguments:", "String representations of Float32/64 values NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toDecimal64OrNull('0xc0fe', 1);.", "NoteAn overflow can occur if the value of expr exceeds the bounds of Decimal64: ( -1 * 10^(18 - S), 1 * 10^(18 - S) ).\nExcessive digits in a fraction are discarded (not rounded).\nExcessive digits in the integer part will lead to an error.", "Returned value", "Value of type Nullable(Decimal(18, S)) if successful, otherwise value NULL of the same type. Decimal64(S)."], "Examples": ["SELECT    toDecimal64OrNull(toString(0.0001), 18) AS a,    toTypeName(a),    toDecimal64OrNull(toString('Inf'), 18) as b,    toTypeName(b)FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDecimal64OrDefault"], "Feature": ["toDecimal64OrDefault(expr, S[, default])"], "Description": ["toDecimal64OrDefault", "Like toDecimal64, this function converts an input value to a value of type Decimal(18, S) but returns the default value in case of an error.", "Syntax", "toDecimal64OrDefault(expr, S[, default])", "Arguments", "expr \u2014 A String representation of a number. String.S \u2014 Scale parameter between 0 and 18, specifying how many digits the fractional part of a number can have. UInt8.default (optional) \u2014 The default value to return if parsing to type Decimal64(S) is unsuccessful. Decimal64(S).", "Supported arguments:", "String representations of type (U)Int8/16/32/64/128/256.String representations of type Float32/64.", "Unsupported arguments:", "String representations of Float32/64 values NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toDecimal64OrDefault('0xc0fe', 1);.", "NoteAn overflow can occur if the value of expr exceeds the bounds of Decimal64: ( -1 * 10^(18 - S), 1 * 10^(18 - S) ).\nExcessive digits in a fraction are discarded (not rounded).\nExcessive digits in the integer part will lead to an error.", "DangerConversions drop extra digits and could operate in an unexpected way when working with Float32/Float64 inputs as the operations are performed using floating point instructions.\nFor example: toDecimal64OrDefault(1.15, 2) is equal to 1.14 because 1.15 * 100 in floating point is 114.99.\nYou can use a String input so the operations use the underlying integer type: toDecimal64OrDefault('1.15', 2) = 1.15", "Returned value", "Value of type Decimal(18, S) if successful, otherwise returns the default value if passed or 0 if not. Decimal64(S)."], "Examples": ["SELECT    toDecimal64OrDefault(toString(0.0001), 18) AS a,    toTypeName(a),    toDecimal64OrDefault('Inf', 0, CAST('-1', 'Decimal64(0)')) AS b,    toTypeName(b)FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDecimal128"], "Feature": ["toDecimal128(expr, S)"], "Description": ["toDecimal128", "Converts an input value to a value of type Decimal(38, S) with scale of S. Throws an exception in case of an error.", "Syntax", "toDecimal128(expr, S)", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression.S \u2014 Scale parameter between 0 and 38, specifying how many digits the fractional part of a number can have. UInt8.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values or string representations of type Float32/64.", "Unsupported arguments:", "Values or string representations of Float32/64 values NaN and Inf (case-insensitive).String representations of binary and hexadecimal values, e.g. SELECT toDecimal128('0xc0fe', 1);.", "NoteAn overflow can occur if the value of expr exceeds the bounds of Decimal128: ( -1 * 10^(38 - S), 1 * 10^(38 - S) ).\nExcessive digits in a fraction are discarded (not rounded).\nExcessive digits in the integer part will lead to an exception.", "DangerConversions drop extra digits and could operate in an unexpected way when working with Float32/Float64 inputs as the operations are performed using floating point instructions.\nFor example: toDecimal128(1.15, 2) is equal to 1.14 because 1.15 * 100 in floating point is 114.99.\nYou can use a String input so the operations use the underlying integer type: toDecimal128('1.15', 2) = 1.15", "Returned value", "Value of type Decimal(38, S). Decimal128(S)."], "Examples": ["SELECT    toDecimal128(99, 1) AS a, toTypeName(a) AS type_a,    toDecimal128(99.67, 2) AS b, toTypeName(b) AS type_b,    toDecimal128('99.67', 3) AS c, toTypeName(c) AS type_cFORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDecimal128OrZero"], "Feature": ["toDecimal128OrZero(expr, S)"], "Description": ["toDecimal128OrZero", "Like toDecimal128, this function converts an input value to a value of type Decimal(38, S) but returns 0 in case of an error.", "Syntax", "toDecimal128OrZero(expr, S)", "Arguments", "expr \u2014 A String representation of a number. String.S \u2014 Scale parameter between 0 and 38, specifying how many digits the fractional part of a number can have. UInt8.", "Supported arguments:", "String representations of type (U)Int8/16/32/64/128/256.String representations of type Float32/64.", "Unsupported arguments:", "String representations of Float32/64 values NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toDecimal128OrZero('0xc0fe', 1);.", "NoteAn overflow can occur if the value of expr exceeds the bounds of Decimal128: ( -1 * 10^(38 - S), 1 * 10^(38 - S) ).\nExcessive digits in a fraction are discarded (not rounded).\nExcessive digits in the integer part will lead to an error.", "Returned value", "Value of type Decimal(38, S) if successful, otherwise 0 with S decimal places. Decimal128(S)."], "Examples": ["SELECT    toDecimal128OrZero(toString(0.0001), 38) AS a,    toTypeName(a),    toDecimal128OrZero(toString('Inf'), 38) as b,    toTypeName(b)FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDecimal128OrNull"], "Feature": ["toDecimal128OrNull(expr, S)"], "Description": ["toDecimal128OrNull", "Like toDecimal128, this function converts an input value to a value of type Nullable(Decimal(38, S)) but returns 0 in case of an error.", "Syntax", "toDecimal128OrNull(expr, S)", "Arguments", "expr \u2014 A String representation of a number. String.S \u2014 Scale parameter between 0 and 38, specifying how many digits the fractional part of a number can have. UInt8.", "Supported arguments:", "String representations of type (U)Int8/16/32/64/128/256.String representations of type Float32/64.", "Unsupported arguments:", "String representations of Float32/64 values NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toDecimal128OrNull('0xc0fe', 1);.", "NoteAn overflow can occur if the value of expr exceeds the bounds of Decimal128: ( -1 * 10^(38 - S), 1 * 10^(38 - S) ).\nExcessive digits in a fraction are discarded (not rounded).\nExcessive digits in the integer part will lead to an error.", "Returned value", "Value of type Nullable(Decimal(38, S)) if successful, otherwise value NULL of the same type. Decimal128(S)."], "Examples": ["SELECT    toDecimal128OrNull(toString(1/42), 38) AS a,    toTypeName(a),    toDecimal128OrNull(toString('Inf'), 38) as b,    toTypeName(b)FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDecimal128OrDefault"], "Feature": ["toDecimal128OrDefault(expr, S[, default])"], "Description": ["toDecimal128OrDefault", "Like toDecimal128, this function converts an input value to a value of type Decimal(38, S) but returns the default value in case of an error.", "Syntax", "toDecimal128OrDefault(expr, S[, default])", "Arguments", "expr \u2014 A String representation of a number. String.S \u2014 Scale parameter between 0 and 38, specifying how many digits the fractional part of a number can have. UInt8.default (optional) \u2014 The default value to return if parsing to type Decimal128(S) is unsuccessful. Decimal128(S).", "Supported arguments:", "String representations of type (U)Int8/16/32/64/128/256.String representations of type Float32/64.", "Unsupported arguments:", "String representations of Float32/64 values NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toDecimal128OrDefault('0xc0fe', 1);.", "NoteAn overflow can occur if the value of expr exceeds the bounds of Decimal128: ( -1 * 10^(38 - S), 1 * 10^(38 - S) ).\nExcessive digits in a fraction are discarded (not rounded).\nExcessive digits in the integer part will lead to an error.", "DangerConversions drop extra digits and could operate in an unexpected way when working with Float32/Float64 inputs as the operations are performed using floating point instructions.\nFor example: toDecimal128OrDefault(1.15, 2) is equal to 1.14 because 1.15 * 100 in floating point is 114.99.\nYou can use a String input so the operations use the underlying integer type: toDecimal128OrDefault('1.15', 2) = 1.15", "Returned value", "Value of type Decimal(38, S) if successful, otherwise returns the default value if passed or 0 if not. Decimal128(S)."], "Examples": ["SELECT    toDecimal128OrDefault(toString(1/42), 18) AS a,    toTypeName(a),    toDecimal128OrDefault('Inf', 0, CAST('-1', 'Decimal128(0)')) AS b,    toTypeName(b)FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDecimal256"], "Feature": ["toDecimal256(expr, S)"], "Description": ["toDecimal256", "Converts an input value to a value of type Decimal(76, S) with scale of S. Throws an exception in case of an error.", "Syntax", "toDecimal256(expr, S)", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression.S \u2014 Scale parameter between 0 and 76, specifying how many digits the fractional part of a number can have. UInt8.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values or string representations of type Float32/64.", "Unsupported arguments:", "Values or string representations of Float32/64 values NaN and Inf (case-insensitive).String representations of binary and hexadecimal values, e.g. SELECT toDecimal256('0xc0fe', 1);.", "NoteAn overflow can occur if the value of expr exceeds the bounds of Decimal256: ( -1 * 10^(76 - S), 1 * 10^(76 - S) ).\nExcessive digits in a fraction are discarded (not rounded).\nExcessive digits in the integer part will lead to an exception.", "DangerConversions drop extra digits and could operate in an unexpected way when working with Float32/Float64 inputs as the operations are performed using floating point instructions.\nFor example: toDecimal256(1.15, 2) is equal to 1.14 because 1.15 * 100 in floating point is 114.99.\nYou can use a String input so the operations use the underlying integer type: toDecimal256('1.15', 2) = 1.15", "Returned value", "Value of type Decimal(76, S). Decimal256(S)."], "Examples": ["SELECT    toDecimal256(99, 1) AS a, toTypeName(a) AS type_a,    toDecimal256(99.67, 2) AS b, toTypeName(b) AS type_b,    toDecimal256('99.67', 3) AS c, toTypeName(c) AS type_cFORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDecimal256OrZero"], "Feature": ["toDecimal256OrZero(expr, S)"], "Description": ["toDecimal256OrZero", "Like toDecimal256, this function converts an input value to a value of type Decimal(76, S) but returns 0 in case of an error.", "Syntax", "toDecimal256OrZero(expr, S)", "Arguments", "expr \u2014 A String representation of a number. String.S \u2014 Scale parameter between 0 and 76, specifying how many digits the fractional part of a number can have. UInt8.", "Supported arguments:", "String representations of type (U)Int8/16/32/64/128/256.String representations of type Float32/64.", "Unsupported arguments:", "String representations of Float32/64 values NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toDecimal256OrZero('0xc0fe', 1);.", "NoteAn overflow can occur if the value of expr exceeds the bounds of Decimal256: ( -1 * 10^(76 - S), 1 * 10^(76 - S) ).\nExcessive digits in a fraction are discarded (not rounded).\nExcessive digits in the integer part will lead to an error.", "Returned value", "Value of type Decimal(76, S) if successful, otherwise 0 with S decimal places. Decimal256(S)."], "Examples": ["SELECT    toDecimal256OrZero(toString(0.0001), 76) AS a,    toTypeName(a),    toDecimal256OrZero(toString('Inf'), 76) as b,    toTypeName(b)FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDecimal256OrNull"], "Feature": ["toDecimal256OrNull(expr, S)"], "Description": ["toDecimal256OrNull", "Like toDecimal256, this function converts an input value to a value of type Nullable(Decimal(76, S)) but returns 0 in case of an error.", "Syntax", "toDecimal256OrNull(expr, S)", "Arguments", "expr \u2014 A String representation of a number. String.S \u2014 Scale parameter between 0 and 76, specifying how many digits the fractional part of a number can have. UInt8.", "Supported arguments:", "String representations of type (U)Int8/16/32/64/128/256.String representations of type Float32/64.", "Unsupported arguments:", "String representations of Float32/64 values NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toDecimal256OrNull('0xc0fe', 1);.", "NoteAn overflow can occur if the value of expr exceeds the bounds of Decimal256: ( -1 * 10^(76 - S), 1 * 10^(76 - S) ).\nExcessive digits in a fraction are discarded (not rounded).\nExcessive digits in the integer part will lead to an error.", "Returned value", "Value of type Nullable(Decimal(76, S)) if successful, otherwise value NULL of the same type. Decimal256(S)."], "Examples": ["SELECT    toDecimal256OrNull(toString(1/42), 76) AS a,    toTypeName(a),    toDecimal256OrNull(toString('Inf'), 76) as b,    toTypeName(b)FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDecimal256OrDefault"], "Feature": ["toDecimal256OrDefault(expr, S[, default])"], "Description": ["toDecimal256OrDefault", "Like toDecimal256, this function converts an input value to a value of type Decimal(76, S) but returns the default value in case of an error.", "Syntax", "toDecimal256OrDefault(expr, S[, default])", "Arguments", "expr \u2014 A String representation of a number. String.S \u2014 Scale parameter between 0 and 76, specifying how many digits the fractional part of a number can have. UInt8.default (optional) \u2014 The default value to return if parsing to type Decimal256(S) is unsuccessful. Decimal256(S).", "Supported arguments:", "String representations of type (U)Int8/16/32/64/128/256.String representations of type Float32/64.", "Unsupported arguments:", "String representations of Float32/64 values NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toDecimal256OrDefault('0xc0fe', 1);.", "NoteAn overflow can occur if the value of expr exceeds the bounds of Decimal256: ( -1 * 10^(76 - S), 1 * 10^(76 - S) ).\nExcessive digits in a fraction are discarded (not rounded).\nExcessive digits in the integer part will lead to an error.", "DangerConversions drop extra digits and could operate in an unexpected way when working with Float32/Float64 inputs as the operations are performed using floating point instructions.\nFor example: toDecimal256OrDefault(1.15, 2) is equal to 1.14 because 1.15 * 100 in floating point is 114.99.\nYou can use a String input so the operations use the underlying integer type: toDecimal256OrDefault('1.15', 2) = 1.15", "Returned value", "Value of type Decimal(76, S) if successful, otherwise returns the default value if passed or 0 if not. Decimal256(S)."], "Examples": ["SELECT    toDecimal256OrDefault(toString(1/42), 76) AS a,    toTypeName(a),    toDecimal256OrDefault('Inf', 0, CAST('-1', 'Decimal256(0)')) AS b,    toTypeName(b)FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toString"], "Feature": ["toString"], "Description": ["toString", "Functions for converting between numbers, strings (but not fixed strings), dates, and dates with times.\nAll these functions accept one argument.", "When converting to or from a string, the value is formatted or parsed using the same rules as for the TabSeparated format (and almost all other text formats). If the string can\u2019t be parsed, an exception is thrown and the request is canceled.", "When converting dates to numbers or vice versa, the date corresponds to the number of days since the beginning of the Unix epoch.\nWhen converting dates with times to numbers or vice versa, the date with time corresponds to the number of seconds since the beginning of the Unix epoch.", "The date and date-with-time formats for the toDate/toDateTime functions are defined as follows:", "YYYY-MM-DDYYYY-MM-DD hh:mm:ss", "As an exception, if converting from UInt32, Int32, UInt64, or Int64 numeric types to Date, and if the number is greater than or equal to 65536, the number is interpreted as a Unix timestamp (and not as the number of days) and is rounded to the date. This allows support for the common occurrence of writing toDate(unix_timestamp), which otherwise would be an error and would require writing the more cumbersome toDate(toDateTime(unix_timestamp)).", "Conversion between a date and a date with time is performed the natural way: by adding a null time or dropping the time.", "Conversion between numeric types uses the same rules as assignments between different numeric types in C++.", "Additionally, the toString function of the DateTime argument can take a second String argument containing the name of the time zone. Example: Asia/Yekaterinburg In this case, the time is formatted according to the specified time zone."], "Examples": ["SELECT    now() AS ts,    time_zone,    toString(ts, time_zone) AS str_tz_datetimeFROM system.time_zonesWHERE time_zone LIKE 'Europe%'LIMIT 10"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toFixedString"], "Feature": ["toFixedString(s, N)"], "Description": ["toFixedString", "Converts a String type argument to a FixedString(N) type (a string of fixed length N).\nIf the string has fewer bytes than N, it is padded with null bytes to the right. If the string has more bytes than N, an exception is thrown.", "Syntax", "toFixedString(s, N)", "Arguments", "s \u2014 A String to convert to a fixed string. String.N \u2014 Length N. UInt8", "Returned value", "An N length fixed string of s. FixedString."], "Examples": ["SELECT toFixedString('foo', 8) AS s;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toStringCutToZero"], "Feature": ["toStringCutToZero(s)"], "Description": ["toStringCutToZero", "Accepts a String or FixedString argument. Returns the String with the content truncated at the first zero byte found.", "Syntax", "toStringCutToZero(s)"], "Examples": ["SELECT toFixedString('foo', 8) AS s, toStringCutToZero(s) AS s_cut;", "SELECT toFixedString('foo\\0bar', 8) AS s, toStringCutToZero(s) AS s_cut;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDecimalString"], "Feature": ["toDecimalString(number, scale)"], "Description": ["toDecimalString", "Converts a numeric value to String with the number of fractional digits in the output specified by the user.", "Syntax", "toDecimalString(number, scale)", "Arguments", "number \u2014 Value to be represented as String, Int, UInt, Float, Decimal,scale \u2014 Number of fractional digits, UInt8.Maximum scale for Decimal and Int, UInt types is 77 (it is the maximum possible number of significant digits for Decimal),Maximum scale for Float is 60.", "Returned value", "Input value represented as String with given number of fractional digits (scale).\nThe number is rounded up or down according to common arithmetic in case requested scale is smaller than original number's scale."], "Examples": ["SELECT toDecimalString(CAST('64.32', 'Float64'), 5);"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["reinterpretAsUInt8"], "Feature": ["reinterpretAsUInt8(x)"], "Description": ["reinterpretAsUInt8", "Performs byte reinterpretation by treating the input value as a value of type UInt8. Unlike CAST, the function does not attempt to preserve the original value - if the target type is not able to represent the input type, the output is meaningless.", "Syntax", "reinterpretAsUInt8(x)", "Parameters", "x: value to byte reinterpret as UInt8. (U)Int*, Float, Date, DateTime, UUID, String or FixedString.", "Returned value", "Reinterpreted value x as UInt8. UInt8."], "Examples": ["SELECT    toInt8(257) AS x,    toTypeName(x),    reinterpretAsUInt8(x) AS res,    toTypeName(res);"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["reinterpretAsUInt16"], "Feature": ["reinterpretAsUInt16(x)"], "Description": ["reinterpretAsUInt16", "Performs byte reinterpretation by treating the input value as a value of type UInt16. Unlike CAST, the function does not attempt to preserve the original value - if the target type is not able to represent the input type, the output is meaningless.", "Syntax", "reinterpretAsUInt16(x)", "Parameters", "x: value to byte reinterpret as UInt16. (U)Int*, Float, Date, DateTime, UUID, String or FixedString.", "Returned value", "Reinterpreted value x as UInt16. UInt16."], "Examples": ["SELECT    toUInt8(257) AS x,    toTypeName(x),    reinterpretAsUInt16(x) AS res,    toTypeName(res);"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["reinterpretAsUInt32"], "Feature": ["reinterpretAsUInt32(x)"], "Description": ["reinterpretAsUInt32", "Performs byte reinterpretation by treating the input value as a value of type UInt32. Unlike CAST, the function does not attempt to preserve the original value - if the target type is not able to represent the input type, the output is meaningless.", "Syntax", "reinterpretAsUInt32(x)", "Parameters", "x: value to byte reinterpret as UInt32. (U)Int*, Float, Date, DateTime, UUID, String or FixedString.", "Returned value", "Reinterpreted value x as UInt32. UInt32."], "Examples": ["SELECT    toUInt16(257) AS x,    toTypeName(x),    reinterpretAsUInt32(x) AS res,    toTypeName(res)"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["reinterpretAsUInt64"], "Feature": ["reinterpretAsUInt64(x)"], "Description": ["reinterpretAsUInt64", "Performs byte reinterpretation by treating the input value as a value of type UInt64. Unlike CAST, the function does not attempt to preserve the original value - if the target type is not able to represent the input type, the output is meaningless.", "Syntax", "reinterpretAsUInt64(x)", "Parameters", "x: value to byte reinterpret as UInt64. (U)Int*, Float, Date, DateTime, UUID, String or FixedString.", "Returned value", "Reinterpreted value x as UInt64. UInt64."], "Examples": ["SELECT    toUInt32(257) AS x,    toTypeName(x),    reinterpretAsUInt64(x) AS res,    toTypeName(res)"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["reinterpretAsUInt128"], "Feature": ["reinterpretAsUInt128(x)"], "Description": ["reinterpretAsUInt128", "Performs byte reinterpretation by treating the input value as a value of type UInt128. Unlike CAST, the function does not attempt to preserve the original value - if the target type is not able to represent the input type, the output is meaningless.", "Syntax", "reinterpretAsUInt128(x)", "Parameters", "x: value to byte reinterpret as UInt128. (U)Int*, Float, Date, DateTime, UUID, String or FixedString.", "Returned value", "Reinterpreted value x as UInt128. UInt128."], "Examples": ["SELECT    toUInt64(257) AS x,    toTypeName(x),    reinterpretAsUInt128(x) AS res,    toTypeName(res)"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["reinterpretAsUInt256"], "Feature": ["reinterpretAsUInt256(x)"], "Description": ["reinterpretAsUInt256", "Performs byte reinterpretation by treating the input value as a value of type UInt256. Unlike CAST, the function does not attempt to preserve the original value - if the target type is not able to represent the input type, the output is meaningless.  ", "Syntax", "reinterpretAsUInt256(x)", "Parameters", "x: value to byte reinterpret as UInt256. (U)Int*, Float, Date, DateTime, UUID, String or FixedString.", "Returned value", "Reinterpreted value x as UInt256. UInt256."], "Examples": ["SELECT    toUInt128(257) AS x,    toTypeName(x),    reinterpretAsUInt256(x) AS res,    toTypeName(res)"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["reinterpretAsInt8"], "Feature": ["reinterpretAsInt8(x)"], "Description": ["reinterpretAsInt8", "Performs byte reinterpretation by treating the input value as a value of type Int8. Unlike CAST, the function does not attempt to preserve the original value - if the target type is not able to represent the input type, the output is meaningless.", "Syntax", "reinterpretAsInt8(x)", "Parameters", "x: value to byte reinterpret as Int8. (U)Int*, Float, Date, DateTime, UUID, String or FixedString.", "Returned value", "Reinterpreted value x as Int8. Int8."], "Examples": ["SELECT    toUInt8(257) AS x,    toTypeName(x),    reinterpretAsInt8(x) AS res,    toTypeName(res);"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["reinterpretAsInt16"], "Feature": ["reinterpretAsInt16(x)"], "Description": ["reinterpretAsInt16", "Performs byte reinterpretation by treating the input value as a value of type Int16. Unlike CAST, the function does not attempt to preserve the original value - if the target type is not able to represent the input type, the output is meaningless.  ", "Syntax", "reinterpretAsInt16(x)", "Parameters", "x: value to byte reinterpret as Int16. (U)Int*, Float, Date, DateTime, UUID, String or FixedString.", "Returned value", "Reinterpreted value x as Int16. Int16."], "Examples": ["SELECT    toInt8(257) AS x,    toTypeName(x),    reinterpretAsInt16(x) AS res,    toTypeName(res);"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["reinterpretAsInt32"], "Feature": ["reinterpretAsInt32(x)"], "Description": ["reinterpretAsInt32", "Performs byte reinterpretation by treating the input value as a value of type Int32. Unlike CAST, the function does not attempt to preserve the original value - if the target type is not able to represent the input type, the output is meaningless.", "Syntax", "reinterpretAsInt32(x)", "Parameters", "x: value to byte reinterpret as Int32. (U)Int*, Float, Date, DateTime, UUID, String or FixedString.", "Returned value", "Reinterpreted value x as Int32. Int32."], "Examples": ["SELECT    toInt16(257) AS x,    toTypeName(x),    reinterpretAsInt32(x) AS res,    toTypeName(res);"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["reinterpretAsInt64"], "Feature": ["reinterpretAsInt64(x)"], "Description": ["reinterpretAsInt64", "Performs byte reinterpretation by treating the input value as a value of type Int64. Unlike CAST, the function does not attempt to preserve the original value - if the target type is not able to represent the input type, the output is meaningless.", "Syntax", "reinterpretAsInt64(x)", "Parameters", "x: value to byte reinterpret as Int64. (U)Int*, Float, Date, DateTime, UUID, String or FixedString.", "Returned value", "Reinterpreted value x as Int64. Int64."], "Examples": ["SELECT    toInt32(257) AS x,    toTypeName(x),    reinterpretAsInt64(x) AS res,    toTypeName(res);"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["reinterpretAsInt128"], "Feature": ["reinterpretAsInt128(x)"], "Description": ["reinterpretAsInt128", "Performs byte reinterpretation by treating the input value as a value of type Int128. Unlike CAST, the function does not attempt to preserve the original value - if the target type is not able to represent the input type, the output is meaningless.", "Syntax", "reinterpretAsInt128(x)", "Parameters", "x: value to byte reinterpret as Int128. (U)Int*, Float, Date, DateTime, UUID, String or FixedString.", "Returned value", "Reinterpreted value x as Int128. Int128."], "Examples": ["SELECT    toInt64(257) AS x,    toTypeName(x),    reinterpretAsInt128(x) AS res,    toTypeName(res);"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["reinterpretAsInt256"], "Feature": ["reinterpretAsInt256(x)"], "Description": ["reinterpretAsInt256", "Performs byte reinterpretation by treating the input value as a value of type Int256. Unlike CAST, the function does not attempt to preserve the original value - if the target type is not able to represent the input type, the output is meaningless.", "Syntax", "reinterpretAsInt256(x)", "Parameters", "x: value to byte reinterpret as Int256. (U)Int*, Float, Date, DateTime, UUID, String or FixedString.", "Returned value", "Reinterpreted value x as Int256. Int256."], "Examples": ["SELECT    toInt128(257) AS x,    toTypeName(x),    reinterpretAsInt256(x) AS res,    toTypeName(res);"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["reinterpretAsFloat32"], "Feature": ["reinterpretAsFloat32(x)"], "Description": ["reinterpretAsFloat32", "Performs byte reinterpretation by treating the input value as a value of type Float32. Unlike CAST, the function does not attempt to preserve the original value - if the target type is not able to represent the input type, the output is meaningless.", "Syntax", "reinterpretAsFloat32(x)", "Parameters", "x: value to reinterpret as Float32. (U)Int*, Float, Date, DateTime, UUID, String or FixedString.", "Returned value", "Reinterpreted value x as Float32. Float32."], "Examples": ["SELECT reinterpretAsUInt32(toFloat32(0.2)) as x, reinterpretAsFloat32(x);"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["reinterpretAsFloat64"], "Feature": ["reinterpretAsFloat64(x)"], "Description": ["reinterpretAsFloat64", "Performs byte reinterpretation by treating the input value as a value of type Float64. Unlike CAST, the function does not attempt to preserve the original value - if the target type is not able to represent the input type, the output is meaningless.", "Syntax", "reinterpretAsFloat64(x)", "Parameters", "x: value to reinterpret as Float64. (U)Int*, Float, Date, DateTime, UUID, String or FixedString.", "Returned value", "Reinterpreted value x as Float64. Float64."], "Examples": ["SELECT reinterpretAsUInt64(toFloat64(0.2)) as x, reinterpretAsFloat64(x);"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["reinterpretAsDate"], "Feature": ["reinterpretAsDate(x)"], "Description": ["reinterpretAsDate", "Accepts a string, fixed string or numeric value and interprets the bytes as a number in host order (little endian). It returns a date from the interpreted number as the number of days since the beginning of the Unix Epoch.", "Syntax", "reinterpretAsDate(x)", "Parameters", "x: number of days since the beginning of the Unix Epoch. (U)Int*, Float, Date, DateTime, UUID, String or FixedString.", "Returned value", "Date. Date.", "Implementation details", "NoteIf the provided string isn\u2019t long enough, the function works as if the string is padded with the necessary number of null bytes. If the string is longer than needed, the extra bytes are ignored."], "Examples": ["SELECT reinterpretAsDate(65), reinterpretAsDate('A');"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["reinterpretAsDateTime"], "Feature": ["reinterpretAsDateTime(x)"], "Description": ["reinterpretAsDateTime", "These functions accept a string and interpret the bytes placed at the beginning of the string as a number in host order (little endian). Returns a date with time interpreted as the number of seconds since the beginning of the Unix Epoch.", "Syntax", "reinterpretAsDateTime(x)", "Parameters", "x: number of seconds since the beginning of the Unix Epoch. (U)Int*, Float, Date, DateTime, UUID, String or FixedString.", "Returned value", "Date and Time. DateTime.", "Implementation details", "NoteIf the provided string isn\u2019t long enough, the function works as if the string is padded with the necessary number of null bytes. If the string is longer than needed, the extra bytes are ignored."], "Examples": ["SELECT reinterpretAsDateTime(65), reinterpretAsDateTime('A');"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["reinterpretAsString"], "Feature": ["reinterpretAsString(x)"], "Description": ["reinterpretAsString", "This function accepts a number, date or date with time and returns a string containing bytes representing the corresponding value in host order (little endian). Null bytes are dropped from the end. For example, a UInt32 type value of 255 is a string that is one byte long.", "Syntax", "reinterpretAsString(x)", "Parameters", "x: value to reinterpret to string. (U)Int*, Float, Date, DateTime.", "Returned value", "String containing bytes representing x. String."], "Examples": ["SELECT    reinterpretAsString(toDateTime('1970-01-01 01:01:05')),    reinterpretAsString(toDate('1970-03-07'));"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["reinterpretAsFixedString"], "Feature": ["reinterpretAsFixedString(x)"], "Description": ["reinterpretAsFixedString", "This function accepts a number, date or date with time and returns a FixedString containing bytes representing the corresponding value in host order (little endian). Null bytes are dropped from the end. For example, a UInt32 type value of 255 is a FixedString that is one byte long.", "Syntax", "reinterpretAsFixedString(x)", "Parameters", "x: value to reinterpret to string. (U)Int*, Float, Date, DateTime.", "Returned value", "Fixed string containing bytes representing x. FixedString."], "Examples": ["SELECT    reinterpretAsFixedString(toDateTime('1970-01-01 01:01:05')),    reinterpretAsFixedString(toDate('1970-03-07'));"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["reinterpretAsUUID"], "Feature": ["reinterpretAsUUID(fixed_string)"], "Description": ["reinterpretAsUUID", "NoteIn addition to the UUID functions listed here, there is dedicated UUID function documentation.", "Accepts a 16 byte string and returns a UUID containing bytes representing the corresponding value in network byte order (big-endian). If the string isn't long enough, the function works as if the string is padded with the necessary number of null bytes to the end. If the string is longer than 16 bytes, the extra bytes at the end are ignored.", "Syntax", "reinterpretAsUUID(fixed_string)", "Arguments", "fixed_string \u2014 Big-endian byte string. FixedString.", "Returned value", "The UUID type value. UUID."], "Examples": ["SELECT reinterpretAsUUID(reverse(unhex('000102030405060708090a0b0c0d0e0f')));", "WITH    generateUUIDv4() AS uuid,    identity(lower(hex(reverse(reinterpretAsString(uuid))))) AS str,    reinterpretAsUUID(reverse(unhex(str))) AS uuid2SELECT uuid = uuid2;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["reinterpret"], "Feature": ["reinterpret(x, type)"], "Description": ["reinterpret", "Uses the same source in-memory bytes sequence for x value and reinterprets it to destination type.", "Syntax", "reinterpret(x, type)", "Arguments", "x \u2014 Any type.type \u2014 Destination type. String.", "Returned value", "Destination type value."], "Examples": ["SELECT reinterpret(toInt8(-1), 'UInt8') as int_to_uint,    reinterpret(toInt8(1), 'Float32') as int_to_float,    reinterpret('1', 'UInt32') as string_to_int;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["CAST"], "Feature": ["CAST(x, T)CAST(x AS t)x::t"], "Description": ["CAST", "Converts an input value to the specified data type. Unlike the reinterpret function, CAST tries to present the same value using the new data type. If the conversion can not be done then an exception is raised.\nSeveral syntax variants are supported.", "Syntax", "CAST(x, T)CAST(x AS t)x::t", "Arguments", "x \u2014 A value to convert. May be of any type.T \u2014 The name of the target data type. String.t \u2014 The target data type.", "Returned value", "Converted value.", "NoteIf the input value does not fit the bounds of the target type, the result overflows. For example, CAST(-1, 'UInt8') returns 255."], "Examples": ["SELECT    CAST(toInt8(-1), 'UInt8') AS cast_int_to_uint,    CAST(1.5 AS Decimal(3,2)) AS cast_float_to_decimal,    '1'::Int32 AS cast_string_to_int;", "SELECT    '2016-06-15 23:00:00' AS timestamp,    CAST(timestamp AS DateTime) AS datetime,    CAST(timestamp AS Date) AS date,    CAST(timestamp, 'String') AS string,    CAST(timestamp, 'FixedString(22)') AS fixed_string;", "SELECT toTypeName(x) FROM t_null;", "SELECT toTypeName(CAST(x, 'Nullable(UInt16)')) FROM t_null;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["accurateCast(x, T)"], "Feature": ["accurateCast(x, T)"], "Description": ["accurateCast(x, T)", "Converts x to the T data type.", "The difference from cast is that accurateCast does not allow overflow of numeric types during cast if type value x does not fit the bounds of type T. For example, accurateCast(-1, 'UInt8') throws an exception."], "Examples": ["SELECT cast(-1, 'UInt8') as uint8;", "SELECT accurateCast(-1, 'UInt8') as uint8;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["accurateCastOrNull(x, T)"], "Feature": ["accurateCastOrNull(x, T)"], "Description": ["accurateCastOrNull(x, T)", "Converts input value x to the specified data type T. Always returns Nullable type and returns NULL if the casted value is not representable in the target type.", "Syntax", "accurateCastOrNull(x, T)", "Arguments", "x \u2014 Input value.T \u2014 The name of the returned data type.", "Returned value", "The value, converted to the specified data type T."], "Examples": ["SELECT toTypeName(accurateCastOrNull(5, 'UInt8'));", "SELECT    accurateCastOrNull(-1, 'UInt8') as uint8,    accurateCastOrNull(128, 'Int8') as int8,    accurateCastOrNull('Test', 'FixedString(2)') as fixed_string;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["accurateCastOrDefault(x, T[, default_value])"], "Feature": ["accurateCastOrDefault(x, T)"], "Description": ["accurateCastOrDefault(x, T[, default_value])", "Converts input value x to the specified data type T. Returns default type value or default_value if specified if the casted value is not representable in the target type.", "Syntax", "accurateCastOrDefault(x, T)", "Arguments", "x \u2014 Input value.T \u2014 The name of the returned data type.default_value \u2014 Default value of returned data type.", "Returned value", "The value converted to the specified data type T."], "Examples": ["SELECT toTypeName(accurateCastOrDefault(5, 'UInt8'));", "SELECT    accurateCastOrDefault(-1, 'UInt8') as uint8,    accurateCastOrDefault(-1, 'UInt8', 5) as uint8_default,    accurateCastOrDefault(128, 'Int8') as int8,    accurateCastOrDefault(128, 'Int8', 5) as int8_default,    accurateCastOrDefault('Test', 'FixedString(2)') as fixed_string,    accurateCastOrDefault('Test', 'FixedString(2)', 'Te') as fixed_string_default;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toIntervalYear"], "Feature": ["toIntervalYear(n)"], "Description": ["toIntervalYear", "Returns an interval of n years of data type IntervalYear.", "Syntax", "toIntervalYear(n)", "Arguments", "n \u2014 Number of years. Integer numbers or string representations thereof, and float numbers. (U)Int*/Float*/String.", "Returned values", "Interval of n years. IntervalYear."], "Examples": ["WITH    toDate('2024-06-15') AS date,    toIntervalYear(1) AS interval_to_yearSELECT date + interval_to_year AS result"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toIntervalQuarter"], "Feature": ["toIntervalQuarter(n)"], "Description": ["toIntervalQuarter", "Returns an interval of n quarters of data type IntervalQuarter.", "Syntax", "toIntervalQuarter(n)", "Arguments", "n \u2014 Number of quarters. Integer numbers or string representations thereof, and float numbers. (U)Int*/Float*/String.", "Returned values", "Interval of n quarters. IntervalQuarter."], "Examples": ["WITH    toDate('2024-06-15') AS date,    toIntervalQuarter(1) AS interval_to_quarterSELECT date + interval_to_quarter AS result"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toIntervalMonth"], "Feature": ["toIntervalMonth(n)"], "Description": ["toIntervalMonth", "Returns an interval of n months of data type IntervalMonth.", "Syntax", "toIntervalMonth(n)", "Arguments", "n \u2014 Number of months. Integer numbers or string representations thereof, and float numbers. (U)Int*/Float*/String.", "Returned values", "Interval of n months. IntervalMonth."], "Examples": ["WITH    toDate('2024-06-15') AS date,    toIntervalMonth(1) AS interval_to_monthSELECT date + interval_to_month AS result"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toIntervalWeek"], "Feature": ["toIntervalWeek(n)"], "Description": ["toIntervalWeek", "Returns an interval of n weeks of data type IntervalWeek.", "Syntax", "toIntervalWeek(n)", "Arguments", "n \u2014 Number of weeks. Integer numbers or string representations thereof, and float numbers. (U)Int*/Float*/String.", "Returned values", "Interval of n weeks. IntervalWeek."], "Examples": ["WITH    toDate('2024-06-15') AS date,    toIntervalWeek(1) AS interval_to_weekSELECT date + interval_to_week AS result"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toIntervalDay"], "Feature": ["toIntervalDay(n)"], "Description": ["toIntervalDay", "Returns an interval of n days of data type IntervalDay.", "Syntax", "toIntervalDay(n)", "Arguments", "n \u2014 Number of days. Integer numbers or string representations thereof, and float numbers. (U)Int*/Float*/String.", "Returned values", "Interval of n days. IntervalDay."], "Examples": ["WITH    toDate('2024-06-15') AS date,    toIntervalDay(5) AS interval_to_daysSELECT date + interval_to_days AS result"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toIntervalHour"], "Feature": ["toIntervalHour(n)"], "Description": ["toIntervalHour", "Returns an interval of n hours of data type IntervalHour.", "Syntax", "toIntervalHour(n)", "Arguments", "n \u2014 Number of hours. Integer numbers or string representations thereof, and float numbers. (U)Int*/Float*/String.", "Returned values", "Interval of n hours. IntervalHour."], "Examples": ["WITH    toDate('2024-06-15') AS date,    toIntervalHour(12) AS interval_to_hoursSELECT date + interval_to_hours AS result"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toIntervalMinute"], "Feature": ["toIntervalMinute(n)"], "Description": ["toIntervalMinute", "Returns an interval of n minutes of data type IntervalMinute.", "Syntax", "toIntervalMinute(n)", "Arguments", "n \u2014 Number of minutes. Integer numbers or string representations thereof, and float numbers. (U)Int*/Float*/String.", "Returned values", "Interval of n minutes. IntervalMinute."], "Examples": ["WITH    toDate('2024-06-15') AS date,    toIntervalMinute(12) AS interval_to_minutesSELECT date + interval_to_minutes AS result"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toIntervalSecond"], "Feature": ["toIntervalSecond(n)"], "Description": ["toIntervalSecond", "Returns an interval of n seconds of data type IntervalSecond.", "Syntax", "toIntervalSecond(n)", "Arguments", "n \u2014 Number of seconds. Integer numbers or string representations thereof, and float numbers. (U)Int*/Float*/String.", "Returned values", "Interval of n seconds. IntervalSecond."], "Examples": ["WITH    toDate('2024-06-15') AS date,    toIntervalSecond(30) AS interval_to_secondsSELECT date + interval_to_seconds AS result"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toIntervalMillisecond"], "Feature": ["toIntervalMillisecond(n)"], "Description": ["toIntervalMillisecond", "Returns an interval of n milliseconds of data type IntervalMillisecond.", "Syntax", "toIntervalMillisecond(n)", "Arguments", "n \u2014 Number of milliseconds. Integer numbers or string representations thereof, and float numbers. (U)Int*/Float*/String.", "Returned values", "Interval of n milliseconds. IntervalMilliseconds."], "Examples": ["WITH    toDateTime('2024-06-15') AS date,    toIntervalMillisecond(30) AS interval_to_millisecondsSELECT date + interval_to_milliseconds AS result"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toIntervalMicrosecond"], "Feature": ["toIntervalMicrosecond(n)"], "Description": ["toIntervalMicrosecond", "Returns an interval of n microseconds of data type IntervalMicrosecond.", "Syntax", "toIntervalMicrosecond(n)", "Arguments", "n \u2014 Number of microseconds. Integer numbers or string representations thereof, and float numbers. (U)Int*/Float*/String.", "Returned values", "Interval of n microseconds. IntervalMicrosecond."], "Examples": ["WITH    toDateTime('2024-06-15') AS date,    toIntervalMicrosecond(30) AS interval_to_microsecondsSELECT date + interval_to_microseconds AS result"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toIntervalNanosecond"], "Feature": ["toIntervalNanosecond(n)"], "Description": ["toIntervalNanosecond", "Returns an interval of n nanoseconds of data type IntervalNanosecond.", "Syntax", "toIntervalNanosecond(n)", "Arguments", "n \u2014 Number of nanoseconds. Integer numbers or string representations thereof, and float numbers. (U)Int*/Float*/String.", "Returned values", "Interval of n nanoseconds. IntervalNanosecond."], "Examples": ["WITH    toDateTime('2024-06-15') AS date,    toIntervalNanosecond(30) AS interval_to_nanosecondsSELECT date + interval_to_nanoseconds AS result"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["parseDateTime"], "Feature": ["parseDateTime(str[, format[, timezone]])"], "Description": ["parseDateTime", "Converts a String to DateTime according to a MySQL format string.", "This function is the opposite operation of function formatDateTime.", "Syntax", "parseDateTime(str[, format[, timezone]])", "Arguments", "str \u2014 The String to be parsedformat \u2014 The format string. Optional. %Y-%m-%d %H:%i:%s if not specified.timezone \u2014 Timezone. Optional.", "Returned value(s)", "Returns DateTime values parsed from input string according to a MySQL style format string.", "Supported format specifiers", "All format specifiers listed in formatDateTime except:", "%Q: Quarter (1-4)"], "Examples": ["SELECT parseDateTime('2021-01-04+23:00:00', '%Y-%m-%d+%H:%i:%s')\u250c\u2500parseDateTime('2021-01-04+23:00:00', '%Y-%m-%d+%H:%i:%s')\u2500\u2510\u2502                                       2021-01-04 23:00:00 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["parseDateTimeOrZero"], "Feature": ["parseDateTimeOrZero"], "Description": ["parseDateTimeOrZero", "Same as for parseDateTime except that it returns zero date when it encounters a date format that cannot be processed."], "Examples": [], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["parseDateTimeOrNull"], "Feature": ["parseDateTimeOrNull"], "Description": ["parseDateTimeOrNull", "Same as for parseDateTime except that it returns NULL when it encounters a date format that cannot be processed.", "Alias: str_to_date."], "Examples": [], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["parseDateTimeInJodaSyntax"], "Feature": ["parseDateTimeInJodaSyntax(str[, format[, timezone]])"], "Description": ["parseDateTimeInJodaSyntax", "Similar to parseDateTime, except that the format string is in Joda instead of MySQL syntax.", "This function is the opposite operation of function formatDateTimeInJodaSyntax.", "Syntax", "parseDateTimeInJodaSyntax(str[, format[, timezone]])", "Arguments", "str \u2014 The String to be parsedformat \u2014 The format string. Optional. yyyy-MM-dd HH:mm:ss if not specified.timezone \u2014 Timezone. Optional.", "Returned value(s)", "Returns DateTime values parsed from input string according to a Joda style format.", "Supported format specifiers", "All format specifiers listed in formatDateTimeInJoda are supported, except:", "S: fraction of secondz: time zoneZ: time zone offset/id"], "Examples": ["SELECT parseDateTimeInJodaSyntax('2023-02-24 14:53:31', 'yyyy-MM-dd HH:mm:ss', 'Europe/Minsk')\u250c\u2500parseDateTimeInJodaSyntax('2023-02-24 14:53:31', 'yyyy-MM-dd HH:mm:ss', 'Europe/Minsk')\u2500\u2510\u2502                                                                     2023-02-24 14:53:31 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["parseDateTimeInJodaSyntaxOrZero"], "Feature": ["parseDateTimeInJodaSyntaxOrZero"], "Description": ["parseDateTimeInJodaSyntaxOrZero", "Same as for parseDateTimeInJodaSyntax except that it returns zero date when it encounters a date format that cannot be processed."], "Examples": [], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["parseDateTimeInJodaSyntaxOrNull"], "Feature": ["parseDateTimeInJodaSyntaxOrNull"], "Description": ["parseDateTimeInJodaSyntaxOrNull", "Same as for parseDateTimeInJodaSyntax except that it returns NULL when it encounters a date format that cannot be processed."], "Examples": [], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["parseDateTime64InJodaSyntax"], "Feature": ["parseDateTime64InJodaSyntax"], "Description": ["parseDateTime64InJodaSyntax", "Similar to parseDateTimeInJodaSyntax. Differently, it returns a value of type DateTime64."], "Examples": [], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["parseDateTime64InJodaSyntaxOrZero"], "Feature": ["parseDateTime64InJodaSyntaxOrZero"], "Description": ["parseDateTime64InJodaSyntaxOrZero", "Same as for parseDateTime64InJodaSyntax except that it returns zero date when it encounters a date format that cannot be processed."], "Examples": [], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["parseDateTime64InJodaSyntaxOrNull"], "Feature": ["parseDateTime64InJodaSyntaxOrNull"], "Description": ["parseDateTime64InJodaSyntaxOrNull", "Same as for parseDateTime64InJodaSyntax except that it returns NULL when it encounters a date format that cannot be processed."], "Examples": [], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["parseDateTimeBestEffort"], "Feature": ["parseDateTimeBestEffort"], "Description": ["parseDateTimeBestEffort"], "Examples": [], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["parseDateTime32BestEffort"], "Feature": ["parseDateTimeBestEffort(time_string [, time_zone])"], "Description": ["parseDateTime32BestEffort", "Converts a date and time in the String representation to DateTime data type.", "The function parses ISO 8601, RFC 1123 - 5.2.14 RFC-822 Date and Time Specification, ClickHouse\u2019s and some other date and time formats.", "Syntax", "parseDateTimeBestEffort(time_string [, time_zone])", "Arguments", "time_string \u2014 String containing a date and time to convert. String.time_zone \u2014 Time zone. The function parses time_string according to the time zone. String.", "Supported non-standard formats", "A string containing 9..10 digit unix timestamp.A string with a date and a time component: YYYYMMDDhhmmss, DD/MM/YYYY hh:mm:ss, DD-MM-YY hh:mm, YYYY-MM-DD hh:mm:ss, etc.A string with a date, but no time component: YYYY, YYYYMM, YYYY*MM, DD/MM/YYYY, DD-MM-YY etc.A string with a day and time: DD, DD hh, DD hh:mm. In this case MM is substituted by 01.A string that includes the date and time along with time zone offset information: YYYY-MM-DD hh:mm:ss \u00b1h:mm, etc. For example, 2020-12-12 17:36:00 -5:00.A syslog timestamp: Mmm dd hh:mm:ss. For example, Jun  9 14:20:32.", "For all of the formats with separator the function parses months names expressed by their full name or by the first three letters of a month name. Examples: 24/DEC/18, 24-Dec-18, 01-September-2018.\nIf the year is not specified, it is considered to be equal to the current year. If the resulting DateTime happen to be in the future (even by a second after the current moment), then the current year is substituted by the previous year.", "Returned value", "time_string converted to the DateTime data type."], "Examples": ["SELECT parseDateTimeBestEffort('23/10/2020 12:12:57')AS parseDateTimeBestEffort;", "SELECT parseDateTimeBestEffort('Sat, 18 Aug 2018 07:22:16 GMT', 'Asia/Istanbul')AS parseDateTimeBestEffort;", "SELECT parseDateTimeBestEffort('1284101485')AS parseDateTimeBestEffort;", "SELECT parseDateTimeBestEffort('2018-10-23 10:12:12')AS parseDateTimeBestEffort;", "SELECT toYear(now()) as year, parseDateTimeBestEffort('10 20:19');", "WITH    now() AS ts_now,    formatDateTime(ts_around, '%b %e %T') AS syslog_argSELECT    ts_now,    syslog_arg,    parseDateTimeBestEffort(syslog_arg)FROM (SELECT arrayJoin([ts_now - 30, ts_now + 30]) AS ts_around);"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["parseDateTimeBestEffortUS"], "Feature": ["parseDateTimeBestEffortUS"], "Description": ["parseDateTimeBestEffortUS", "This function behaves like parseDateTimeBestEffort for ISO date formats, e.g. YYYY-MM-DD hh:mm:ss, and other date formats where the month and date components can be unambiguously extracted, e.g. YYYYMMDDhhmmss, YYYY-MM, DD hh, or YYYY-MM-DD hh:mm:ss \u00b1h:mm. If the month and the date components cannot be unambiguously extracted, e.g. MM/DD/YYYY, MM-DD-YYYY, or MM-DD-YY, it prefers the US date format instead of DD/MM/YYYY, DD-MM-YYYY, or DD-MM-YY. As an exception from the latter, if the month is bigger than 12 and smaller or equal than 31, this function falls back to the behavior of parseDateTimeBestEffort, e.g. 15/08/2020 is parsed as 2020-08-15."], "Examples": [], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["parseDateTimeBestEffortOrNull"], "Feature": ["parseDateTimeBestEffortOrNull"], "Description": ["parseDateTimeBestEffortOrNull"], "Examples": [], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["parseDateTime32BestEffortOrNull"], "Feature": ["parseDateTime32BestEffortOrNull"], "Description": ["parseDateTime32BestEffortOrNull", "Same as for parseDateTimeBestEffort except that it returns NULL when it encounters a date format that cannot be processed."], "Examples": [], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["parseDateTimeBestEffortOrZero"], "Feature": ["parseDateTimeBestEffortOrZero"], "Description": ["parseDateTimeBestEffortOrZero"], "Examples": [], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["parseDateTime32BestEffortOrZero"], "Feature": ["parseDateTime32BestEffortOrZero"], "Description": ["parseDateTime32BestEffortOrZero", "Same as for parseDateTimeBestEffort except that it returns zero date or zero date time when it encounters a date format that cannot be processed."], "Examples": [], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["parseDateTimeBestEffortUSOrNull"], "Feature": ["parseDateTimeBestEffortUSOrNull"], "Description": ["parseDateTimeBestEffortUSOrNull", "Same as parseDateTimeBestEffortUS function except that it returns NULL when it encounters a date format that cannot be processed."], "Examples": [], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["parseDateTimeBestEffortUSOrZero"], "Feature": ["parseDateTimeBestEffortUSOrZero"], "Description": ["parseDateTimeBestEffortUSOrZero", "Same as parseDateTimeBestEffortUS function except that it returns zero date (1970-01-01) or zero date with time (1970-01-01 00:00:00) when it encounters a date format that cannot be processed."], "Examples": [], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["parseDateTime64BestEffort"], "Feature": ["parseDateTime64BestEffort(time_string [, precision [, time_zone]])"], "Description": ["parseDateTime64BestEffort", "Same as parseDateTimeBestEffort function but also parse milliseconds and microseconds and returns DateTime data type.", "Syntax", "parseDateTime64BestEffort(time_string [, precision [, time_zone]])", "Arguments", "time_string \u2014 String containing a date or date with time to convert. String.precision \u2014 Required precision. 3 \u2014 for milliseconds, 6 \u2014 for microseconds. Default \u2014 3. Optional. UInt8.time_zone \u2014 Timezone. The function parses time_string according to the timezone. Optional. String.", "Returned value", "time_string converted to the DateTime data type."], "Examples": ["SELECT parseDateTime64BestEffort('2021-01-01') AS a, toTypeName(a) AS tUNION ALLSELECT parseDateTime64BestEffort('2021-01-01 01:01:00.12346') AS a, toTypeName(a) AS tUNION ALLSELECT parseDateTime64BestEffort('2021-01-01 01:01:00.12346',6) AS a, toTypeName(a) AS tUNION ALLSELECT parseDateTime64BestEffort('2021-01-01 01:01:00.12346',3,'Asia/Istanbul') AS a, toTypeName(a) AS tFORMAT PrettyCompactMonoBlock;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["parseDateTime64BestEffortUS"], "Feature": ["parseDateTime64BestEffortUS"], "Description": ["parseDateTime64BestEffortUS", "Same as for parseDateTime64BestEffort, except that this function prefers US date format (MM/DD/YYYY etc.) in case of ambiguity."], "Examples": [], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["parseDateTime64BestEffortOrNull"], "Feature": ["parseDateTime64BestEffortOrNull"], "Description": ["parseDateTime64BestEffortOrNull", "Same as for parseDateTime64BestEffort except that it returns NULL when it encounters a date format that cannot be processed."], "Examples": [], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["parseDateTime64BestEffortOrZero"], "Feature": ["parseDateTime64BestEffortOrZero"], "Description": ["parseDateTime64BestEffortOrZero", "Same as for parseDateTime64BestEffort except that it returns zero date or zero date time when it encounters a date format that cannot be processed."], "Examples": [], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["parseDateTime64BestEffortUSOrNull"], "Feature": ["parseDateTime64BestEffortUSOrNull"], "Description": ["parseDateTime64BestEffortUSOrNull", "Same as for parseDateTime64BestEffort, except that this function prefers US date format (MM/DD/YYYY etc.) in case of ambiguity and returns NULL when it encounters a date format that cannot be processed."], "Examples": [], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["parseDateTime64BestEffortUSOrZero"], "Feature": ["parseDateTime64BestEffortUSOrZero"], "Description": ["parseDateTime64BestEffortUSOrZero", "Same as for parseDateTime64BestEffort, except that this function prefers US date format (MM/DD/YYYY etc.) in case of ambiguity and returns zero date or zero date time when it encounters a date format that cannot be processed."], "Examples": [], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toLowCardinality"], "Feature": ["toLowCardinality(expr)"], "Description": ["toLowCardinality", "Converts input parameter to the LowCardinality version of same data type.", "To convert data from the LowCardinality data type use the CAST function. For example, CAST(x as String).", "Syntax", "toLowCardinality(expr)", "Arguments", "expr \u2014 Expression resulting in one of the supported data types.", "Returned values", "Result of expr. LowCardinality of the type of expr."], "Examples": ["SELECT toLowCardinality('1');"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUnixTimestamp64Milli"], "Feature": ["toUnixTimestamp64Milli(value)"], "Description": ["toUnixTimestamp64Milli", "Converts a DateTime64 to a Int64 value with fixed millisecond precision. The input value is scaled up or down appropriately depending on its precision.", "NoteThe output value is a timestamp in UTC, not in the timezone of DateTime64.", "Syntax", "toUnixTimestamp64Milli(value)", "Arguments", "value \u2014 DateTime64 value with any precision. DateTime64.", "Returned value", "value converted to the Int64 data type. Int64."], "Examples": ["WITH toDateTime64('2009-02-13 23:31:31.011', 3, 'UTC') AS dt64SELECT toUnixTimestamp64Milli(dt64);"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUnixTimestamp64Micro"], "Feature": ["toUnixTimestamp64Micro(value)"], "Description": ["toUnixTimestamp64Micro", "Converts a DateTime64 to a Int64 value with fixed microsecond precision. The input value is scaled up or down appropriately depending on its precision.", "NoteThe output value is a timestamp in UTC, not in the timezone of DateTime64.", "Syntax", "toUnixTimestamp64Micro(value)", "Arguments", "value \u2014 DateTime64 value with any precision. DateTime64.", "Returned value", "value converted to the Int64 data type. Int64."], "Examples": ["WITH toDateTime64('1970-01-15 06:56:07.891011', 6, 'UTC') AS dt64SELECT toUnixTimestamp64Micro(dt64);"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUnixTimestamp64Nano"], "Feature": ["toUnixTimestamp64Nano(value)"], "Description": ["toUnixTimestamp64Nano", "Converts a DateTime64 to a Int64 value with fixed nanosecond precision. The input value is scaled up or down appropriately depending on its precision.", "NoteThe output value is a timestamp in UTC, not in the timezone of DateTime64.", "Syntax", "toUnixTimestamp64Nano(value)", "Arguments", "value \u2014 DateTime64 value with any precision. DateTime64.", "Returned value", "value converted to the Int64 data type. Int64."], "Examples": ["WITH toDateTime64('1970-01-01 00:20:34.567891011', 9, 'UTC') AS dt64SELECT toUnixTimestamp64Nano(dt64);"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["fromUnixTimestamp64Milli"], "Feature": ["fromUnixTimestamp64Milli(value[, timezone])"], "Description": ["fromUnixTimestamp64Milli", "Converts an Int64 to a DateTime64 value with fixed millisecond precision and optional timezone. The input value is scaled up or down appropriately depending on its precision.", "NotePlease note that input value is treated as a UTC timestamp, not timestamp at the given (or implicit) timezone.", "Syntax", "fromUnixTimestamp64Milli(value[, timezone])", "Arguments", "value \u2014 value with any precision. Int64.timezone \u2014 (optional) timezone name of the result. String.", "Returned value", "value converted to DateTime64 with precision 3. DateTime64."], "Examples": ["WITH CAST(1234567891011, 'Int64') AS i64SELECT    fromUnixTimestamp64Milli(i64, 'UTC') AS x,    toTypeName(x);"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["fromUnixTimestamp64Micro"], "Feature": ["fromUnixTimestamp64Micro(value[, timezone])"], "Description": ["fromUnixTimestamp64Micro", "Converts an Int64 to a DateTime64 value with fixed microsecond precision and optional timezone. The input value is scaled up or down appropriately depending on its precision.", "NotePlease note that input value is treated as a UTC timestamp, not timestamp at the given (or implicit) timezone.", "Syntax", "fromUnixTimestamp64Micro(value[, timezone])", "Arguments", "value \u2014 value with any precision. Int64.timezone \u2014 (optional) timezone name of the result. String.", "Returned value", "value converted to DateTime64 with precision 6. DateTime64."], "Examples": ["WITH CAST(1234567891011, 'Int64') AS i64SELECT    fromUnixTimestamp64Micro(i64, 'UTC') AS x,    toTypeName(x);"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["fromUnixTimestamp64Nano"], "Feature": ["fromUnixTimestamp64Nano(value[, timezone])"], "Description": ["fromUnixTimestamp64Nano", "Converts an Int64 to a DateTime64 value with fixed nanosecond precision and optional timezone. The input value is scaled up or down appropriately depending on its precision.", "NotePlease note that input value is treated as a UTC timestamp, not timestamp at the given (or implicit) timezone.", "Syntax", "fromUnixTimestamp64Nano(value[, timezone])", "Arguments", "value \u2014 value with any precision. Int64.timezone \u2014 (optional) timezone name of the result. String.", "Returned value", "value converted to DateTime64 with precision 9. DateTime64."], "Examples": ["WITH CAST(1234567891011, 'Int64') AS i64SELECT    fromUnixTimestamp64Nano(i64, 'UTC') AS x,    toTypeName(x);"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["formatRow"], "Feature": ["formatRow(format, x, y, ...)"], "Description": ["formatRow", "Converts arbitrary expressions into a string via given format.", "Syntax", "formatRow(format, x, y, ...)", "Arguments", "format \u2014 Text format. For example, CSV, TSV.x,y, ... \u2014 Expressions.", "Returned value", "A formatted string. (for text formats it's usually terminated with the new line character)."], "Examples": ["SELECT formatRow('CSV', number, 'good')FROM numbers(3);", "SELECT formatRow('CustomSeparated', number, 'good')FROM numbers(3)SETTINGS format_custom_result_before_delimiter='<prefix>\\n', format_custom_result_after_delimiter='<suffix>'"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["formatRowNoNewline"], "Feature": ["formatRowNoNewline(format, x, y, ...)"], "Description": ["formatRowNoNewline", "Converts arbitrary expressions into a string via given format. Differs from formatRow in that this function trims the last \\n if any.", "Syntax", "formatRowNoNewline(format, x, y, ...)", "Arguments", "format \u2014 Text format. For example, CSV, TSV.x,y, ... \u2014 Expressions.", "Returned value", "A formatted string."], "Examples": ["SELECT formatRowNoNewline('CSV', number, 'good')FROM numbers(3);"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["Common Issues with Data Conversion"], "Feature": ["Common Issues with Data Conversion"], "Description": ["Common Issues with Data Conversion", "ClickHouse generally uses the same behavior as C++ programs.", "to<type> functions and cast behave differently in some cases, for example in case of LowCardinality: cast removes LowCardinality trait to<type> functions don't. The same with Nullable, this behaviour is not compatible with SQL standard, and it can be changed using cast_keep_nullable setting.", "NoteBe aware of potential data loss if values of a datatype are converted to a smaller datatype (for example from Int64 to Int32) or between\nincompatible datatypes (for example from String to Int). Make sure to check carefully if the result is as expected."], "Examples": ["SELECT    toTypeName(toLowCardinality('') AS val) AS source_type,    toTypeName(toString(val)) AS to_type_result_type,    toTypeName(CAST(val, 'String')) AS cast_result_type\u250c\u2500source_type\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500to_type_result_type\u2500\u2500\u2500\u2500\u252c\u2500cast_result_type\u2500\u2510\u2502 LowCardinality(String) \u2502 LowCardinality(String) \u2502 String           \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT    toTypeName(toNullable('') AS val) AS source_type,    toTypeName(toString(val)) AS to_type_result_type,    toTypeName(CAST(val, 'String')) AS cast_result_type\u250c\u2500source_type\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500to_type_result_type\u2500\u252c\u2500cast_result_type\u2500\u2510\u2502 Nullable(String) \u2502 Nullable(String)    \u2502 String           \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT    toTypeName(toNullable('') AS val) AS source_type,    toTypeName(toString(val)) AS to_type_result_type,    toTypeName(CAST(val, 'String')) AS cast_result_typeSETTINGS cast_keep_nullable = 1\u250c\u2500source_type\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500to_type_result_type\u2500\u252c\u2500cast_result_type\u2500\u2510\u2502 Nullable(String) \u2502 Nullable(String)    \u2502 Nullable(String) \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toBool"], "Feature": ["toBool(expr)"], "Description": ["toBool", "Converts an input value to a value of type Bool. Throws an exception in case of an error.", "Syntax", "toBool(expr)", "Arguments", "expr \u2014 Expression returning a number or a string. Expression.", "Supported arguments:", "Values of type (U)Int8/16/32/64/128/256.Values of type Float32/64.Strings true or false (case-insensitive).", "Returned value", "Returns true or false based on evaluation of the argument. Bool."], "Examples": ["SELECT    toBool(toUInt8(1)),    toBool(toInt8(-1)),    toBool(toFloat32(1.01)),    toBool('true'),    toBool('false'),    toBool('FALSE')FORMAT Vertical"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toInt8"], "Feature": ["toInt8(expr)"], "Description": ["toInt8", "Converts an input value to a value of type Int8. Throws an exception in case of an error.", "Syntax", "toInt8(expr)", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.", "Unsupported arguments:", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt8('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of Int8, overflow or underflow of the result occurs.\nThis is not considered an error.\nFor example: SELECT toInt8(128) == -128;.", "Returned value", "8-bit integer value. Int8.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toInt8(-8),    toInt8(-8.8),    toInt8('-8')FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toInt8OrZero"], "Feature": ["toInt8OrZero(x)"], "Description": ["toInt8OrZero", "Like toInt8, this function converts an input value to a value of type Int8 but returns 0 in case of an error.", "Syntax", "toInt8OrZero(x)", "Arguments", "x \u2014 A String representation of a number. String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256.", "Unsupported arguments (return 0):", "String representations of ordinary Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt8OrZero('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of Int8, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "8-bit integer value if successful, otherwise 0. Int8.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toInt8OrZero('-8'),    toInt8OrZero('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toInt8OrNull"], "Feature": ["toInt8OrNull(x)"], "Description": ["toInt8OrNull", "Like toInt8, this function converts an input value to a value of type Int8 but returns NULL in case of an error.", "Syntax", "toInt8OrNull(x)", "Arguments", "x \u2014 A String representation of a number. String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256.", "Unsupported arguments (return \\N)", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt8OrNull('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of Int8, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "8-bit integer value if successful, otherwise NULL. Int8 / NULL.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toInt8OrNull('-8'),    toInt8OrNull('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toInt8OrDefault"], "Feature": ["toInt8OrDefault(expr[, default])"], "Description": ["toInt8OrDefault", "Like toInt8, this function converts an input value to a value of type Int8 but returns the default value in case of an error.\nIf no default value is passed then 0 is returned in case of an error.", "Syntax", "toInt8OrDefault(expr[, default])", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression / String.default (optional) \u2014 The default value to return if parsing to type Int8 is unsuccessful. Int8.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.", "Arguments for which the default value is returned:", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt8OrDefault('0xc0fe', CAST('-1', 'Int8'));.", "NoteIf the input value cannot be represented within the bounds of Int8, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "8-bit integer value if successful, otherwise returns the default value if passed or 0 if not. Int8.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.The default value type should be the same as the cast type."], "Examples": ["SELECT    toInt8OrDefault('-8', CAST('-1', 'Int8')),    toInt8OrDefault('abc', CAST('-1', 'Int8'))FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toInt16"], "Feature": ["toInt16(expr)"], "Description": ["toInt16", "Converts an input value to a value of type Int16. Throws an exception in case of an error.", "Syntax", "toInt16(expr)", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.", "Unsupported arguments:", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt16('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of Int16, overflow or underflow of the result occurs.\nThis is not considered an error.\nFor example: SELECT toInt16(32768) == -32768;.", "Returned value", "16-bit integer value. Int16.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toInt16(-16),    toInt16(-16.16),    toInt16('-16')FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toInt16OrZero"], "Feature": ["toInt16OrZero(x)"], "Description": ["toInt16OrZero", "Like toInt16, this function converts an input value to a value of type Int16 but returns 0 in case of an error.", "Syntax", "toInt16OrZero(x)", "Arguments", "x \u2014 A String representation of a number. String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256.", "Unsupported arguments (return 0):", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt16OrZero('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of Int16, overflow or underflow of the result occurs.\nThis is not considered as an error.", "Returned value", "16-bit integer value if successful, otherwise 0. Int16.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toInt16OrZero('-16'),    toInt16OrZero('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toInt16OrNull"], "Feature": ["toInt16OrNull(x)"], "Description": ["toInt16OrNull", "Like toInt16, this function converts an input value to a value of type Int16 but returns NULL in case of an error.", "Syntax", "toInt16OrNull(x)", "Arguments", "x \u2014 A String representation of a number. String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256.", "Unsupported arguments (return \\N)", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt16OrNull('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of Int16, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "16-bit integer value if successful, otherwise NULL. Int16 / NULL.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toInt16OrNull('-16'),    toInt16OrNull('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toInt16OrDefault"], "Feature": ["toInt16OrDefault(expr[, default])"], "Description": ["toInt16OrDefault", "Like toInt16, this function converts an input value to a value of type Int16 but returns the default value in case of an error.\nIf no default value is passed then 0 is returned in case of an error.", "Syntax", "toInt16OrDefault(expr[, default])", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression / String.default (optional) \u2014 The default value to return if parsing to type Int16 is unsuccessful. Int16.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.", "Arguments for which the default value is returned:", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt16OrDefault('0xc0fe', CAST('-1', 'Int16'));.", "NoteIf the input value cannot be represented within the bounds of Int16, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "16-bit integer value if successful, otherwise returns the default value if passed or 0 if not. Int16.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.The default value type should be the same as the cast type."], "Examples": ["SELECT    toInt16OrDefault('-16', CAST('-1', 'Int16')),    toInt16OrDefault('abc', CAST('-1', 'Int16'))FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toInt32"], "Feature": ["toInt32(expr)"], "Description": ["toInt32", "Converts an input value to a value of type Int32. Throws an exception in case of an error.", "Syntax", "toInt32(expr)", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.", "Unsupported arguments:", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt32('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of Int32, the result over or under flows.\nThis is not considered an error.\nFor example: SELECT toInt32(2147483648) == -2147483648;", "Returned value", "32-bit integer value. Int32.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toInt32(-32),    toInt32(-32.32),    toInt32('-32')FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toInt32OrZero"], "Feature": ["toInt32OrZero(x)"], "Description": ["toInt32OrZero", "Like toInt32, this function converts an input value to a value of type Int32 but returns 0 in case of an error.", "Syntax", "toInt32OrZero(x)", "Arguments", "x \u2014 A String representation of a number. String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256.", "Unsupported arguments (return 0):", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt32OrZero('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of Int32, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "32-bit integer value if successful, otherwise 0. Int32", "NoteThe function uses rounding towards zero, meaning it truncate fractional digits of numbers."], "Examples": ["SELECT    toInt32OrZero('-32'),    toInt32OrZero('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toInt32OrNull"], "Feature": ["toInt32OrNull(x)"], "Description": ["toInt32OrNull", "Like toInt32, this function converts an input value to a value of type Int32 but returns NULL in case of an error.", "Syntax", "toInt32OrNull(x)", "Arguments", "x \u2014 A String representation of a number. String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256.", "Unsupported arguments (return \\N)", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt32OrNull('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of Int32, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "32-bit integer value if successful, otherwise NULL. Int32 / NULL.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toInt32OrNull('-32'),    toInt32OrNull('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toInt32OrDefault"], "Feature": ["toInt32OrDefault(expr[, default])"], "Description": ["toInt32OrDefault", "Like toInt32, this function converts an input value to a value of type Int32 but returns the default value in case of an error.\nIf no default value is passed then 0 is returned in case of an error.", "Syntax", "toInt32OrDefault(expr[, default])", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression / String.default (optional) \u2014 The default value to return if parsing to type Int32 is unsuccessful. Int32.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.", "Arguments for which the default value is returned:", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt32OrDefault('0xc0fe', CAST('-1', 'Int32'));.", "NoteIf the input value cannot be represented within the bounds of Int32, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "32-bit integer value if successful, otherwise returns the default value if passed or 0 if not. Int32.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.The default value type should be the same as the cast type."], "Examples": ["SELECT    toInt32OrDefault('-32', CAST('-1', 'Int32')),    toInt32OrDefault('abc', CAST('-1', 'Int32'))FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toInt64"], "Feature": ["toInt64(expr)"], "Description": ["toInt64", "Converts an input value to a value of type Int64. Throws an exception in case of an error.", "Syntax", "toInt64(expr)", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.", "Unsupported types:", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt64('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of Int64, the result over or under flows.\nThis is not considered an error.\nFor example: SELECT toInt64(9223372036854775808) == -9223372036854775808;", "Returned value", "64-bit integer value. Int64.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toInt64(-64),    toInt64(-64.64),    toInt64('-64')FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toInt64OrZero"], "Feature": ["toInt64OrZero(x)"], "Description": ["toInt64OrZero", "Like toInt64, this function converts an input value to a value of type Int64 but returns 0 in case of an error.", "Syntax", "toInt64OrZero(x)", "Arguments", "x \u2014 A String representation of a number. String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256.", "Unsupported arguments (return 0):", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt64OrZero('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of Int64, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "64-bit integer value if successful, otherwise 0. Int64.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toInt64OrZero('-64'),    toInt64OrZero('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toInt64OrNull"], "Feature": ["toInt64OrNull(x)"], "Description": ["toInt64OrNull", "Like toInt64, this function converts an input value to a value of type Int64 but returns NULL in case of an error.", "Syntax", "toInt64OrNull(x)", "Arguments", "x \u2014 A String representation of a number. Expression / String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256.", "Unsupported arguments (return \\N)", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt64OrNull('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of Int64, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "64-bit integer value if successful, otherwise NULL. Int64 / NULL.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toInt64OrNull('-64'),    toInt64OrNull('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toInt64OrDefault"], "Feature": ["toInt64OrDefault(expr[, default])"], "Description": ["toInt64OrDefault", "Like toInt64, this function converts an input value to a value of type Int64 but returns the default value in case of an error.\nIf no default value is passed then 0 is returned in case of an error.", "Syntax", "toInt64OrDefault(expr[, default])", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression / String.default (optional) \u2014 The default value to return if parsing to type Int64 is unsuccessful. Int64.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.", "Arguments for which the default value is returned:", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt64OrDefault('0xc0fe', CAST('-1', 'Int64'));.", "NoteIf the input value cannot be represented within the bounds of Int64, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "64-bit integer value if successful, otherwise returns the default value if passed or 0 if not. Int64.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.The default value type should be the same as the cast type."], "Examples": ["SELECT    toInt64OrDefault('-64', CAST('-1', 'Int64')),    toInt64OrDefault('abc', CAST('-1', 'Int64'))FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toInt128"], "Feature": ["toInt128(expr)"], "Description": ["toInt128", "Converts an input value to a value of type Int128. Throws an exception in case of an error.", "Syntax", "toInt128(expr)", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.", "Unsupported arguments:", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt128('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of Int128, the result over or under flows.\nThis is not considered an error.", "Returned value", "128-bit integer value. Int128.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toInt128(-128),    toInt128(-128.8),    toInt128('-128')FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toInt128OrZero"], "Feature": ["toInt128OrZero(expr)"], "Description": ["toInt128OrZero", "Like toInt128, this function converts an input value to a value of type Int128 but returns 0 in case of an error.", "Syntax", "toInt128OrZero(expr)", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression / String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256.", "Unsupported arguments (return 0):", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt128OrZero('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of Int128, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "128-bit integer value if successful, otherwise 0. Int128.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toInt128OrZero('-128'),    toInt128OrZero('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toInt128OrNull"], "Feature": ["toInt128OrNull(x)"], "Description": ["toInt128OrNull", "Like toInt128, this function converts an input value to a value of type Int128 but returns NULL in case of an error.", "Syntax", "toInt128OrNull(x)", "Arguments", "x \u2014 A String representation of a number. Expression / String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256.", "Unsupported arguments (return \\N)", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt128OrNull('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of Int128, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "128-bit integer value if successful, otherwise NULL. Int128 / NULL.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toInt128OrNull('-128'),    toInt128OrNull('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toInt128OrDefault"], "Feature": ["toInt128OrDefault(expr[, default])"], "Description": ["toInt128OrDefault", "Like toInt128, this function converts an input value to a value of type Int128 but returns the default value in case of an error.\nIf no default value is passed then 0 is returned in case of an error.", "Syntax", "toInt128OrDefault(expr[, default])", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression / String.default (optional) \u2014 The default value to return if parsing to type Int128 is unsuccessful. Int128.", "Supported arguments:", "(U)Int8/16/32/64/128/256.Float32/64.String representations of (U)Int8/16/32/128/256.", "Arguments for which the default value is returned:", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt128OrDefault('0xc0fe', CAST('-1', 'Int128'));.", "NoteIf the input value cannot be represented within the bounds of Int128, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "128-bit integer value if successful, otherwise returns the default value if passed or 0 if not. Int128.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.The default value type should be the same as the cast type."], "Examples": ["SELECT    toInt128OrDefault('-128', CAST('-1', 'Int128')),    toInt128OrDefault('abc', CAST('-1', 'Int128'))FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toInt256"], "Feature": ["toInt256(expr)"], "Description": ["toInt256", "Converts an input value to a value of type Int256. Throws an exception in case of an error.", "Syntax", "toInt256(expr)", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.", "Unsupported arguments:", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt256('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of Int256, the result over or under flows.\nThis is not considered an error.", "Returned value", "256-bit integer value. Int256.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toInt256(-256),    toInt256(-256.256),    toInt256('-256')FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toInt256OrZero"], "Feature": ["toInt256OrZero(x)"], "Description": ["toInt256OrZero", "Like toInt256, this function converts an input value to a value of type Int256 but returns 0 in case of an error.", "Syntax", "toInt256OrZero(x)", "Arguments", "x \u2014 A String representation of a number. String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256.", "Unsupported arguments (return 0):", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt256OrZero('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of Int256, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "256-bit integer value if successful, otherwise 0. Int256.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toInt256OrZero('-256'),    toInt256OrZero('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toInt256OrNull"], "Feature": ["toInt256OrNull(x)"], "Description": ["toInt256OrNull", "Like toInt256, this function converts an input value to a value of type Int256 but returns NULL in case of an error.", "Syntax", "toInt256OrNull(x)", "Arguments", "x \u2014 A String representation of a number. String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256.", "Unsupported arguments (return \\N)", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toInt256OrNull('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of Int256, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "256-bit integer value if successful, otherwise NULL. Int256 / NULL.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toInt256OrNull('-256'),    toInt256OrNull('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toInt256OrDefault"], "Feature": ["toInt256OrDefault(expr[, default])"], "Description": ["toInt256OrDefault", "Like toInt256, this function converts an input value to a value of type Int256 but returns the default value in case of an error.\nIf no default value is passed then 0 is returned in case of an error.", "Syntax", "toInt256OrDefault(expr[, default])", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression / String.default (optional) \u2014 The default value to return if parsing to type Int256 is unsuccessful. Int256.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.", "Arguments for which the default value is returned:", "String representations of Float32/64 values, including NaN and InfString representations of binary and hexadecimal values, e.g. SELECT toInt256OrDefault('0xc0fe', CAST('-1', 'Int256'));", "NoteIf the input value cannot be represented within the bounds of Int256, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "256-bit integer value if successful, otherwise returns the default value if passed or 0 if not. Int256.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.The default value type should be the same as the cast type."], "Examples": ["SELECT    toInt256OrDefault('-256', CAST('-1', 'Int256')),    toInt256OrDefault('abc', CAST('-1', 'Int256'))FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUInt8"], "Feature": ["toUInt8(expr)"], "Description": ["toUInt8", "Converts an input value to a value of type UInt8. Throws an exception in case of an error.", "Syntax", "toUInt8(expr)", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.", "Unsupported arguments:", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt8('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of UInt8, overflow or underflow of the result occurs.\nThis is not considered an error.\nFor example: SELECT toUInt8(256) == 0;.", "Returned value", "8-bit unsigned integer value. UInt8.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toUInt8(8),    toUInt8(8.8),    toUInt8('8')FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUInt8OrZero"], "Feature": ["toUInt8OrZero(x)"], "Description": ["toUInt8OrZero", "Like toUInt8, this function converts an input value to a value of type UInt8 but returns 0 in case of an error.", "Syntax", "toUInt8OrZero(x)", "Arguments", "x \u2014 A String representation of a number. String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256.", "Unsupported arguments (return 0):", "String representations of ordinary Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt8OrZero('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of UInt8, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "8-bit unsigned integer value if successful, otherwise 0. UInt8.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toUInt8OrZero('-8'),    toUInt8OrZero('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUInt8OrNull"], "Feature": ["toUInt8OrNull(x)"], "Description": ["toUInt8OrNull", "Like toUInt8, this function converts an input value to a value of type UInt8 but returns NULL in case of an error.", "Syntax", "toUInt8OrNull(x)", "Arguments", "x \u2014 A String representation of a number. String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256.", "Unsupported arguments (return \\N)", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt8OrNull('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of UInt8, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "8-bit unsigned integer value if successful, otherwise NULL. UInt8 / NULL.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toUInt8OrNull('8'),    toUInt8OrNull('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUInt8OrDefault"], "Feature": ["toUInt8OrDefault(expr[, default])"], "Description": ["toUInt8OrDefault", "Like toUInt8, this function converts an input value to a value of type UInt8 but returns the default value in case of an error.\nIf no default value is passed then 0 is returned in case of an error.", "Syntax", "toUInt8OrDefault(expr[, default])", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression / String.default (optional) \u2014 The default value to return if parsing to type UInt8 is unsuccessful. UInt8.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.", "Arguments for which the default value is returned:", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt8OrDefault('0xc0fe', CAST('0', 'UInt8'));.", "NoteIf the input value cannot be represented within the bounds of UInt8, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "8-bit unsigned integer value if successful, otherwise returns the default value if passed or 0 if not. UInt8.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.The default value type should be the same as the cast type."], "Examples": ["SELECT    toUInt8OrDefault('8', CAST('0', 'UInt8')),    toUInt8OrDefault('abc', CAST('0', 'UInt8'))FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUInt16"], "Feature": ["toUInt16(expr)"], "Description": ["toUInt16", "Converts an input value to a value of type UInt16. Throws an exception in case of an error.", "Syntax", "toUInt16(expr)", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.", "Unsupported arguments:", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt16('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of UInt16, overflow or underflow of the result occurs.\nThis is not considered an error.\nFor example: SELECT toUInt16(65536) == 0;.", "Returned value", "16-bit unsigned integer value. UInt16.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toUInt16(16),    toUInt16(16.16),    toUInt16('16')FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUInt16OrZero"], "Feature": ["toUInt16OrZero(x)"], "Description": ["toUInt16OrZero", "Like toUInt16, this function converts an input value to a value of type UInt16 but returns 0 in case of an error.", "Syntax", "toUInt16OrZero(x)", "Arguments", "x \u2014 A String representation of a number. String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256.", "Unsupported arguments (return 0):", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt16OrZero('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of UInt16, overflow or underflow of the result occurs.\nThis is not considered as an error.", "Returned value", "16-bit unsigned integer value if successful, otherwise 0. UInt16.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toUInt16OrZero('16'),    toUInt16OrZero('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUInt16OrNull"], "Feature": ["toUInt16OrNull(x)"], "Description": ["toUInt16OrNull", "Like toUInt16, this function converts an input value to a value of type UInt16 but returns NULL in case of an error.", "Syntax", "toUInt16OrNull(x)", "Arguments", "x \u2014 A String representation of a number. String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256.", "Unsupported arguments (return \\N)", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt16OrNull('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of UInt16, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "16-bit unsigned integer value if successful, otherwise NULL. UInt16 / NULL.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toUInt16OrNull('16'),    toUInt16OrNull('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUInt16OrDefault"], "Feature": ["toUInt16OrDefault(expr[, default])"], "Description": ["toUInt16OrDefault", "Like toUInt16, this function converts an input value to a value of type UInt16 but returns the default value in case of an error.\nIf no default value is passed then 0 is returned in case of an error.", "Syntax", "toUInt16OrDefault(expr[, default])", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression / String.default (optional) \u2014 The default value to return if parsing to type UInt16 is unsuccessful. UInt16.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.", "Arguments for which the default value is returned:", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt16OrDefault('0xc0fe', CAST('0', 'UInt16'));.", "NoteIf the input value cannot be represented within the bounds of UInt16, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "16-bit unsigned integer value if successful, otherwise returns the default value if passed or 0 if not. UInt16.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.The default value type should be the same as the cast type."], "Examples": ["SELECT    toUInt16OrDefault('16', CAST('0', 'UInt16')),    toUInt16OrDefault('abc', CAST('0', 'UInt16'))FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUInt32"], "Feature": ["toUInt32(expr)"], "Description": ["toUInt32", "Converts an input value to a value of type UInt32. Throws an exception in case of an error.", "Syntax", "toUInt32(expr)", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.", "Unsupported arguments:", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt32('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of UInt32, the result over or under flows.\nThis is not considered an error.\nFor example: SELECT toUInt32(4294967296) == 0;", "Returned value", "32-bit unsigned integer value. UInt32.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toUInt32(32),    toUInt32(32.32),    toUInt32('32')FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUInt32OrZero"], "Feature": ["toUInt32OrZero(x)"], "Description": ["toUInt32OrZero", "Like toUInt32, this function converts an input value to a value of type UInt32 but returns 0 in case of an error.", "Syntax", "toUInt32OrZero(x)", "Arguments", "x \u2014 A String representation of a number. String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256.", "Unsupported arguments (return 0):", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt32OrZero('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of UInt32, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "32-bit unsigned integer value if successful, otherwise 0. UInt32", "NoteThe function uses rounding towards zero\n, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toUInt32OrZero('32'),    toUInt32OrZero('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUInt32OrNull"], "Feature": ["toUInt32OrNull(x)"], "Description": ["toUInt32OrNull", "Like toUInt32, this function converts an input value to a value of type UInt32 but returns NULL in case of an error.", "Syntax", "toUInt32OrNull(x)", "Arguments", "x \u2014 A String representation of a number. String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256.", "Unsupported arguments (return \\N)", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt32OrNull('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of UInt32, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "32-bit unsigned integer value if successful, otherwise NULL. UInt32 / NULL.", "NoteThe function uses rounding towards zero\n, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toUInt32OrNull('32'),    toUInt32OrNull('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUInt32OrDefault"], "Feature": ["toUInt32OrDefault(expr[, default])"], "Description": ["toUInt32OrDefault", "Like toUInt32, this function converts an input value to a value of type UInt32 but returns the default value in case of an error.\nIf no default value is passed then 0 is returned in case of an error.", "Syntax", "toUInt32OrDefault(expr[, default])", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression / String.default (optional) \u2014 The default value to return if parsing to type UInt32 is unsuccessful. UInt32.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.", "Arguments for which the default value is returned:", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt32OrDefault('0xc0fe', CAST('0', 'UInt32'));.", "NoteIf the input value cannot be represented within the bounds of UInt32, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "32-bit unsigned integer value if successful, otherwise returns the default value if passed or 0 if not. UInt32.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.The default value type should be the same as the cast type."], "Examples": ["SELECT    toUInt32OrDefault('32', CAST('0', 'UInt32')),    toUInt32OrDefault('abc', CAST('0', 'UInt32'))FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUInt64"], "Feature": ["toUInt64(expr)"], "Description": ["toUInt64", "Converts an input value to a value of type UInt64. Throws an exception in case of an error.", "Syntax", "toUInt64(expr)", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.", "Unsupported types:", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt64('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of UInt64, the result over or under flows.\nThis is not considered an error.\nFor example: SELECT toUInt64(18446744073709551616) == 0;", "Returned value", "64-bit unsigned integer value. UInt64.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toUInt64(64),    toUInt64(64.64),    toUInt64('64')FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUInt64OrZero"], "Feature": ["toUInt64OrZero(x)"], "Description": ["toUInt64OrZero", "Like toUInt64, this function converts an input value to a value of type UInt64 but returns 0 in case of an error.", "Syntax", "toUInt64OrZero(x)", "Arguments", "x \u2014 A String representation of a number. String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256.", "Unsupported arguments (return 0):", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt64OrZero('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of UInt64, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "64-bit unsigned integer value if successful, otherwise 0. UInt64.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toUInt64OrZero('64'),    toUInt64OrZero('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUInt64OrNull"], "Feature": ["toUInt64OrNull(x)"], "Description": ["toUInt64OrNull", "Like toUInt64, this function converts an input value to a value of type UInt64 but returns NULL in case of an error.", "Syntax", "toUInt64OrNull(x)", "Arguments", "x \u2014 A String representation of a number. Expression / String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256.", "Unsupported arguments (return \\N)", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt64OrNull('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of UInt64, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "64-bit unsigned integer value if successful, otherwise NULL. UInt64 / NULL.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toUInt64OrNull('64'),    toUInt64OrNull('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUInt64OrDefault"], "Feature": ["toUInt64OrDefault(expr[, default])"], "Description": ["toUInt64OrDefault", "Like toUInt64, this function converts an input value to a value of type UInt64 but returns the default value in case of an error.\nIf no default value is passed then 0 is returned in case of an error.", "Syntax", "toUInt64OrDefault(expr[, default])", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression / String.defauult (optional) \u2014 The default value to return if parsing to type UInt64 is unsuccessful. UInt64.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.", "Arguments for which the default value is returned:", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt64OrDefault('0xc0fe', CAST('0', 'UInt64'));.", "NoteIf the input value cannot be represented within the bounds of UInt64, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "64-bit unsigned integer value if successful, otherwise returns the default value if passed or 0 if not. UInt64.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.The default value type should be the same as the cast type."], "Examples": ["SELECT    toUInt64OrDefault('64', CAST('0', 'UInt64')),    toUInt64OrDefault('abc', CAST('0', 'UInt64'))FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUInt128"], "Feature": ["toUInt128(expr)"], "Description": ["toUInt128", "Converts an input value to a value of type UInt128. Throws an exception in case of an error.", "Syntax", "toUInt128(expr)", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.", "Unsupported arguments:", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt128('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of UInt128, the result over or under flows.\nThis is not considered an error.", "Returned value", "128-bit unsigned integer value. UInt128.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toUInt128(128),    toUInt128(128.8),    toUInt128('128')FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUInt128OrZero"], "Feature": ["toUInt128OrZero(expr)"], "Description": ["toUInt128OrZero", "Like toUInt128, this function converts an input value to a value of type UInt128 but returns 0 in case of an error.", "Syntax", "toUInt128OrZero(expr)", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression / String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256.", "Unsupported arguments (return 0):", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt128OrZero('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of UInt128, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "128-bit unsigned integer value if successful, otherwise 0. UInt128.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toUInt128OrZero('128'),    toUInt128OrZero('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUInt128OrNull"], "Feature": ["toUInt128OrNull(x)"], "Description": ["toUInt128OrNull", "Like toUInt128, this function converts an input value to a value of type UInt128 but returns NULL in case of an error.", "Syntax", "toUInt128OrNull(x)", "Arguments", "x \u2014 A String representation of a number. Expression / String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256.", "Unsupported arguments (return \\N)", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt128OrNull('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of UInt128, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "128-bit unsigned integer value if successful, otherwise NULL. UInt128 / NULL.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toUInt128OrNull('128'),    toUInt128OrNull('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUInt128OrDefault"], "Feature": ["toUInt128OrDefault(expr[, default])"], "Description": ["toUInt128OrDefault", "Like toUInt128, this function converts an input value to a value of type UInt128 but returns the default value in case of an error.\nIf no default value is passed then 0 is returned in case of an error.", "Syntax", "toUInt128OrDefault(expr[, default])", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression / String.default (optional) \u2014 The default value to return if parsing to type UInt128 is unsuccessful. UInt128.", "Supported arguments:", "(U)Int8/16/32/64/128/256.Float32/64.String representations of (U)Int8/16/32/128/256.", "Arguments for which the default value is returned:", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt128OrDefault('0xc0fe', CAST('0', 'UInt128'));.", "NoteIf the input value cannot be represented within the bounds of UInt128, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "128-bit unsigned integer value if successful, otherwise returns the default value if passed or 0 if not. UInt128.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.The default value type should be the same as the cast type."], "Examples": ["SELECT    toUInt128OrDefault('128', CAST('0', 'UInt128')),    toUInt128OrDefault('abc', CAST('0', 'UInt128'))FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUInt256"], "Feature": ["toUInt256(expr)"], "Description": ["toUInt256", "Converts an input value to a value of type UInt256. Throws an exception in case of an error.", "Syntax", "toUInt256(expr)", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.", "Unsupported arguments:", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt256('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of UInt256, the result over or under flows.\nThis is not considered an error.", "Returned value", "256-bit unsigned integer value. Int256.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toUInt256(256),    toUInt256(256.256),    toUInt256('256')FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUInt256OrZero"], "Feature": ["toUInt256OrZero(x)"], "Description": ["toUInt256OrZero", "Like toUInt256, this function converts an input value to a value of type UInt256 but returns 0 in case of an error.", "Syntax", "toUInt256OrZero(x)", "Arguments", "x \u2014 A String representation of a number. String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256.", "Unsupported arguments (return 0):", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt256OrZero('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of UInt256, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "256-bit unsigned integer value if successful, otherwise 0. UInt256.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toUInt256OrZero('256'),    toUInt256OrZero('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUInt256OrNull"], "Feature": ["toUInt256OrNull(x)"], "Description": ["toUInt256OrNull", "Like toUInt256, this function converts an input value to a value of type UInt256 but returns NULL in case of an error.", "Syntax", "toUInt256OrNull(x)", "Arguments", "x \u2014 A String representation of a number. String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256.", "Unsupported arguments (return \\N)", "String representations of Float32/64 values, including NaN and Inf.String representations of binary and hexadecimal values, e.g. SELECT toUInt256OrNull('0xc0fe');.", "NoteIf the input value cannot be represented within the bounds of UInt256, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "256-bit unsigned integer value if successful, otherwise NULL. UInt256 / NULL.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers."], "Examples": ["SELECT    toUInt256OrNull('256'),    toUInt256OrNull('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toUInt256OrDefault"], "Feature": ["toUInt256OrDefault(expr[, default])"], "Description": ["toUInt256OrDefault", "Like toUInt256, this function converts an input value to a value of type UInt256 but returns the default value in case of an error.\nIf no default value is passed then 0 is returned in case of an error.", "Syntax", "toUInt256OrDefault(expr[, default])", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression / String.default (optional) \u2014 The default value to return if parsing to type UInt256 is unsuccessful. UInt256.", "Supported arguments:", "Values or string representations of type (U)Int8/16/32/64/128/256.Values of type Float32/64.", "Arguments for which the default value is returned:", "String representations of Float32/64 values, including NaN and InfString representations of binary and hexadecimal values, e.g. SELECT toUInt256OrDefault('0xc0fe', CAST('0', 'UInt256'));", "NoteIf the input value cannot be represented within the bounds of UInt256, overflow or underflow of the result occurs.\nThis is not considered an error.", "Returned value", "256-bit unsigned integer value if successful, otherwise returns the default value if passed or 0 if not. UInt256.", "NoteThe function uses rounding towards zero, meaning it truncates fractional digits of numbers.The default value type should be the same as the cast type."], "Examples": ["SELECT    toUInt256OrDefault('-256', CAST('0', 'UInt256')),    toUInt256OrDefault('abc', CAST('0', 'UInt256'))FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toFloat32"], "Feature": ["toFloat32(expr)"], "Description": ["toFloat32", "Converts an input value to a value of type Float32. Throws an exception in case of an error.", "Syntax", "toFloat32(expr)", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression.", "Supported arguments:", "Values of type (U)Int8/16/32/64/128/256.String representations of (U)Int8/16/32/128/256.Values of type Float32/64, including NaN and Inf.String representations of Float32/64, including NaN and Inf (case-insensitive).", "Unsupported arguments:", "String representations of binary and hexadecimal values, e.g. SELECT toFloat32('0xc0fe');.", "Returned value", "32-bit floating point value. Float32."], "Examples": ["SELECT    toFloat32(42.7),    toFloat32('42.7'),    toFloat32('NaN')FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toFloat32OrZero"], "Feature": ["toFloat32OrZero(x)"], "Description": ["toFloat32OrZero", "Like toFloat32, this function converts an input value to a value of type Float32 but returns 0 in case of an error.", "Syntax", "toFloat32OrZero(x)", "Arguments", "x \u2014 A String representation of a number. String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256, Float32/64.", "Unsupported arguments (return 0):", "String representations of binary and hexadecimal values, e.g. SELECT toFloat32OrZero('0xc0fe');.", "Returned value", "32-bit Float value if successful, otherwise 0. Float32."], "Examples": ["SELECT    toFloat32OrZero('42.7'),    toFloat32OrZero('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toFloat32OrNull"], "Feature": ["toFloat32OrNull(x)"], "Description": ["toFloat32OrNull", "Like toFloat32, this function converts an input value to a value of type Float32 but returns NULL in case of an error.", "Syntax", "toFloat32OrNull(x)", "Arguments", "x \u2014 A String representation of a number. String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256, Float32/64.", "Unsupported arguments (return \\N):", "String representations of binary and hexadecimal values, e.g. SELECT toFloat32OrNull('0xc0fe');.", "Returned value", "32-bit Float value if successful, otherwise \\N. Float32."], "Examples": ["SELECT    toFloat32OrNull('42.7'),    toFloat32OrNull('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toFloat32OrDefault"], "Feature": ["toFloat32OrDefault(expr[, default])"], "Description": ["toFloat32OrDefault", "Like toFloat32, this function converts an input value to a value of type Float32 but returns the default value in case of an error.\nIf no default value is passed then 0 is returned in case of an error.", "Syntax", "toFloat32OrDefault(expr[, default])", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression / String.default (optional) \u2014 The default value to return if parsing to type Float32 is unsuccessful. Float32.", "Supported arguments:", "Values of type (U)Int8/16/32/64/128/256.String representations of (U)Int8/16/32/128/256.Values of type Float32/64, including NaN and Inf.String representations of Float32/64, including NaN and Inf (case-insensitive).", "Arguments for which the default value is returned:", "String representations of binary and hexadecimal values, e.g. SELECT toFloat32OrDefault('0xc0fe', CAST('0', 'Float32'));.", "Returned value", "32-bit Float value if successful, otherwise returns the default value if passed or 0 if not. Float32."], "Examples": ["SELECT    toFloat32OrDefault('8', CAST('0', 'Float32')),    toFloat32OrDefault('abc', CAST('0', 'Float32'))FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toFloat64"], "Feature": ["toFloat64(expr)"], "Description": ["toFloat64", "Converts an input value to a value of type Float64. Throws an exception in case of an error.", "Syntax", "toFloat64(expr)", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression.", "Supported arguments:", "Values of type (U)Int8/16/32/64/128/256.String representations of (U)Int8/16/32/128/256.Values of type Float32/64, including NaN and Inf.String representations of type Float32/64, including NaN and Inf (case-insensitive).", "Unsupported arguments:", "String representations of binary and hexadecimal values, e.g. SELECT toFloat64('0xc0fe');.", "Returned value", "64-bit floating point value. Float64."], "Examples": ["SELECT    toFloat64(42.7),    toFloat64('42.7'),    toFloat64('NaN')FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toFloat64OrZero"], "Feature": ["toFloat64OrZero(x)"], "Description": ["toFloat64OrZero", "Like toFloat64, this function converts an input value to a value of type Float64 but returns 0 in case of an error.", "Syntax", "toFloat64OrZero(x)", "Arguments", "x \u2014 A String representation of a number. String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256, Float32/64.", "Unsupported arguments (return 0):", "String representations of binary and hexadecimal values, e.g. SELECT toFloat64OrZero('0xc0fe');.", "Returned value", "64-bit Float value if successful, otherwise 0. Float64."], "Examples": ["SELECT    toFloat64OrZero('42.7'),    toFloat64OrZero('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toFloat64OrNull"], "Feature": ["toFloat64OrNull(x)"], "Description": ["toFloat64OrNull", "Like toFloat64, this function converts an input value to a value of type Float64 but returns NULL in case of an error.", "Syntax", "toFloat64OrNull(x)", "Arguments", "x \u2014 A String representation of a number. String.", "Supported arguments:", "String representations of (U)Int8/16/32/128/256, Float32/64.", "Unsupported arguments (return \\N):", "String representations of binary and hexadecimal values, e.g. SELECT toFloat64OrNull('0xc0fe');.", "Returned value", "64-bit Float value if successful, otherwise \\N. Float64."], "Examples": ["SELECT    toFloat64OrNull('42.7'),    toFloat64OrNull('abc')FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toFloat64OrDefault"], "Feature": ["toFloat64OrDefault(expr[, default])"], "Description": ["toFloat64OrDefault", "Like toFloat64, this function converts an input value to a value of type Float64 but returns the default value in case of an error.\nIf no default value is passed then 0 is returned in case of an error.", "Syntax", "toFloat64OrDefault(expr[, default])", "Arguments", "expr \u2014 Expression returning a number or a string representation of a number. Expression / String.default (optional) \u2014 The default value to return if parsing to type Float64 is unsuccessful. Float64.", "Supported arguments:", "Values of type (U)Int8/16/32/64/128/256.String representations of (U)Int8/16/32/128/256.Values of type Float32/64, including NaN and Inf.String representations of Float32/64, including NaN and Inf (case-insensitive).", "Arguments for which the default value is returned:", "String representations of binary and hexadecimal values, e.g. SELECT toFloat64OrDefault('0xc0fe', CAST('0', 'Float64'));.", "Returned value", "64-bit Float value if successful, otherwise returns the default value if passed or 0 if not. Float64."], "Examples": ["SELECT    toFloat64OrDefault('8', CAST('0', 'Float64')),    toFloat64OrDefault('abc', CAST('0', 'Float64'))FORMAT Vertical;"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDate"], "Feature": ["toDate"], "Description": ["toDate", "Converts the argument to Date data type.", "If the argument is DateTime or DateTime64, it truncates it and leaves the date component of the DateTime:", "SELECT    now() AS x,    toDate(x)", "\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500x\u2500\u252c\u2500toDate(now())\u2500\u2510\u2502 2022-12-30 13:44:17 \u2502    2022-12-30 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "If the argument is a String, it is parsed as Date or DateTime. If it was parsed as DateTime, the date component is being used:", "SELECT    toDate('2022-12-30') AS x,    toTypeName(x)", "\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500x\u2500\u252c\u2500toTypeName(toDate('2022-12-30'))\u2500\u2510\u2502 2022-12-30 \u2502 Date                             \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25181 row in set. Elapsed: 0.001 sec.", "SELECT    toDate('2022-12-30 01:02:03') AS x,    toTypeName(x)", "\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500x\u2500\u252c\u2500toTypeName(toDate('2022-12-30 01:02:03'))\u2500\u2510\u2502 2022-12-30 \u2502 Date                                      \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "If the argument is a number and looks like a UNIX timestamp (is greater than 65535), it is interpreted as a DateTime, then truncated to Date in the current timezone. The timezone argument can be specified as a second argument of the function. The truncation to Date depends on the timezone:", "SELECT    now() AS current_time,    toUnixTimestamp(current_time) AS ts,    toDateTime(ts) AS time_Amsterdam,    toDateTime(ts, 'Pacific/Apia') AS time_Samoa,    toDate(time_Amsterdam) AS date_Amsterdam,    toDate(time_Samoa) AS date_Samoa,    toDate(ts) AS date_Amsterdam_2,    toDate(ts, 'Pacific/Apia') AS date_Samoa_2", "Row 1:\u2500\u2500\u2500\u2500\u2500\u2500current_time:     2022-12-30 13:51:54ts:               1672404714time_Amsterdam:   2022-12-30 13:51:54time_Samoa:       2022-12-31 01:51:54date_Amsterdam:   2022-12-30date_Samoa:       2022-12-31date_Amsterdam_2: 2022-12-30date_Samoa_2:     2022-12-31", "The example above demonstrates how the same UNIX timestamp can be interpreted as different dates in different time zones.", "If the argument is a number and it is smaller than 65536, it is interpreted as the number of days since 1970-01-01 (the first UNIX day) and converted to Date. It corresponds to the internal numeric representation of the Date data type. Example:", "SELECT toDate(12345)", "\u250c\u2500toDate(12345)\u2500\u2510\u2502    2003-10-20 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "This conversion does not depend on timezones.", "If the argument does not fit in the range of the Date type, it results in an implementation-defined behavior, that can saturate to the maximum supported date or overflow:", "SELECT toDate(10000000000.)", "\u250c\u2500toDate(10000000000.)\u2500\u2510\u2502           2106-02-07 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "The function toDate can be also written in alternative forms:", "SELECT    now() AS time,    toDate(time),    DATE(time),    CAST(time, 'Date')", "\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500time\u2500\u252c\u2500toDate(now())\u2500\u252c\u2500DATE(now())\u2500\u252c\u2500CAST(now(), 'Date')\u2500\u2510\u2502 2022-12-30 13:54:58 \u2502    2022-12-30 \u2502  2022-12-30 \u2502          2022-12-30 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Examples": ["SELECT    now() AS x,    toDate(x)", "SELECT    toDate('2022-12-30') AS x,    toTypeName(x)", "SELECT    toDate('2022-12-30 01:02:03') AS x,    toTypeName(x)", "SELECT    now() AS current_time,    toUnixTimestamp(current_time) AS ts,    toDateTime(ts) AS time_Amsterdam,    toDateTime(ts, 'Pacific/Apia') AS time_Samoa,    toDate(time_Amsterdam) AS date_Amsterdam,    toDate(time_Samoa) AS date_Samoa,    toDate(ts) AS date_Amsterdam_2,    toDate(ts, 'Pacific/Apia') AS date_Samoa_2", "SELECT toDate(12345)", "SELECT toDate(10000000000.)", "SELECT    now() AS time,    toDate(time),    DATE(time),    CAST(time, 'Date')"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDateOrZero"], "Feature": ["toDateOrZero"], "Description": ["toDateOrZero", "The same as toDate but returns lower boundary of Date if an invalid argument is received. Only String argument is supported."], "Examples": ["SELECT toDateOrZero('2022-12-30'), toDateOrZero('');"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDateOrNull"], "Feature": ["toDateOrNull"], "Description": ["toDateOrNull", "The same as toDate but returns NULL if an invalid argument is received. Only String argument is supported."], "Examples": ["SELECT toDateOrNull('2022-12-30'), toDateOrNull('');"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDateOrDefault"], "Feature": ["toDateOrDefault(expr [, default_value])"], "Description": ["toDateOrDefault", "Like toDate but if unsuccessful, returns a default value which is either the second argument (if specified), or otherwise the lower boundary of Date.", "Syntax", "toDateOrDefault(expr [, default_value])"], "Examples": ["SELECT toDateOrDefault('2022-12-30'), toDateOrDefault('', '2023-01-01'::Date);"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDateTime"], "Feature": ["toDateTime(expr[, time_zone ])"], "Description": ["toDateTime", "Converts an input value to DateTime.", "Syntax", "toDateTime(expr[, time_zone ])", "Arguments", "expr \u2014 The value. String, Int, Date or DateTime.time_zone \u2014 Time zone. String.", "NoteIf expr is a number, it is interpreted as the number of seconds since the beginning of the Unix Epoch (as Unix timestamp).\nIf expr is a String, it may be interpreted as a Unix timestamp or as a string representation of date / date with time.\nThus, parsing of short numbers' string representations (up to 4 digits) is explicitly disabled due to ambiguity, e.g. a string '1999' may be both a year (an incomplete string representation of Date / DateTime) or a unix timestamp. Longer numeric strings are allowed.", "Returned value", "A date time. DateTime"], "Examples": ["SELECT toDateTime('2022-12-30 13:44:17'), toDateTime(1685457500, 'UTC');"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDateTimeOrZero"], "Feature": ["toDateTimeOrZero"], "Description": ["toDateTimeOrZero", "The same as toDateTime but returns lower boundary of DateTime if an invalid argument is received. Only String argument is supported."], "Examples": ["SELECT toDateTimeOrZero('2022-12-30 13:44:17'), toDateTimeOrZero('');"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDateTimeOrNull"], "Feature": ["toDateTimeOrNull"], "Description": ["toDateTimeOrNull", "The same as toDateTime but returns NULL if an invalid argument is received. Only String argument is supported."], "Examples": ["SELECT toDateTimeOrNull('2022-12-30 13:44:17'), toDateTimeOrNull('');"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDateTimeOrDefault"], "Feature": ["toDateTimeOrDefault(expr [, time_zone [, default_value]])"], "Description": ["toDateTimeOrDefault", "Like toDateTime but if unsuccessful, returns a default value which is either the third argument (if specified), or otherwise the lower boundary of DateTime.", "Syntax", "toDateTimeOrDefault(expr [, time_zone [, default_value]])"], "Examples": ["SELECT toDateTimeOrDefault('2022-12-30 13:44:17'), toDateTimeOrDefault('', 'UTC', '2023-01-01'::DateTime('UTC'));"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDate32"], "Feature": ["toDate32(expr)"], "Description": ["toDate32", "Converts the argument to the Date32 data type. If the value is outside the range, toDate32 returns the border values supported by Date32. If the argument has Date type, it's borders are taken into account.", "Syntax", "toDate32(expr)", "Arguments", "expr \u2014 The value. String, UInt32 or Date.", "Returned value", "A calendar date. Type Date32."], "Examples": ["SELECT toDate32('1955-01-01') AS value, toTypeName(value);", "SELECT toDate32('1899-01-01') AS value, toTypeName(value);", "SELECT toDate32(toDate('1899-01-01')) AS value, toTypeName(value);"], "Category": ["Type Conversion Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions"], "Title": ["toDate32OrZero"], "Feature": ["toDate32OrZero"], "Description": ["toDate32OrZero", "The same as toDate32 but returns the min value of Date32 if an invalid argument is received."], "Examples": ["SELECT toDate32OrZero('1899-01-01'), toDate32OrZero('');"], "Category": ["Type Conversion Functions"]}
