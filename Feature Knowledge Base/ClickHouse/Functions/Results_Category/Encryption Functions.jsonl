{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/encryption-functions"], "Title": ["encrypt"], "Feature": ["encrypt('mode', 'plaintext', 'key' [, iv, aad])"], "Description": ["encrypt", "This function encrypts data using these modes:", "aes-128-ecb, aes-192-ecb, aes-256-ecbaes-128-cbc, aes-192-cbc, aes-256-cbcaes-128-ofb, aes-192-ofb, aes-256-ofbaes-128-gcm, aes-192-gcm, aes-256-gcmaes-128-ctr, aes-192-ctr, aes-256-ctr", "Syntax", "encrypt('mode', 'plaintext', 'key' [, iv, aad])", "Arguments", "mode \u2014 Encryption mode. String.plaintext \u2014 Text that need to be encrypted. String.key \u2014 Encryption key. String.iv \u2014 Initialization vector. Required for -gcm modes, optional for others. String.aad \u2014 Additional authenticated data. It isn't encrypted, but it affects decryption. Works only in -gcm modes, for others would throw an exception. String.", "Returned value", "Ciphertext binary string. String."], "Examples": ["CREATE TABLE encryption_test(    `comment` String,    `secret` String)ENGINE = Memory;", "INSERT INTO encryption_test VALUES('aes-256-ofb no IV', encrypt('aes-256-ofb', 'Secret', '12345678910121314151617181920212')),\\('aes-256-ofb no IV, different key', encrypt('aes-256-ofb', 'Secret', 'keykeykeykeykeykeykeykeykeykeyke')),\\('aes-256-ofb with IV', encrypt('aes-256-ofb', 'Secret', '12345678910121314151617181920212', 'iviviviviviviviv')),\\('aes-256-cbc no IV', encrypt('aes-256-cbc', 'Secret', '12345678910121314151617181920212'));", "SELECT comment, hex(secret) FROM encryption_test;", "INSERT INTO encryption_test VALUES('aes-256-gcm', encrypt('aes-256-gcm', 'Secret', '12345678910121314151617181920212', 'iviviviviviviviv')), \\('aes-256-gcm with AAD', encrypt('aes-256-gcm', 'Secret', '12345678910121314151617181920212', 'iviviviviviviviv', 'aad'));SELECT comment, hex(secret) FROM encryption_test WHERE comment LIKE '%gcm%';"], "Category": ["Encryption Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/encryption-functions"], "Title": ["aes_encrypt_mysql"], "Feature": ["aes_encrypt_mysql('mode', 'plaintext', 'key' [, iv])"], "Description": ["aes_encrypt_mysql", "Compatible with mysql encryption and resulting ciphertext can be decrypted with AES_DECRYPT function.", "Will produce the same ciphertext as encrypt on equal inputs. But when key or iv are longer than they should normally be, aes_encrypt_mysql will stick to what MySQL's aes_encrypt does: 'fold' key and ignore excess bits of iv.", "Supported encryption modes:", "aes-128-ecb, aes-192-ecb, aes-256-ecbaes-128-cbc, aes-192-cbc, aes-256-cbcaes-128-ofb, aes-192-ofb, aes-256-ofb", "Syntax", "aes_encrypt_mysql('mode', 'plaintext', 'key' [, iv])", "Arguments", "mode \u2014 Encryption mode. String.plaintext \u2014 Text that needs to be encrypted. String.key \u2014 Encryption key. If key is longer than required by mode, MySQL-specific key folding is performed. String.iv \u2014 Initialization vector. Optional, only first 16 bytes are taken into account String.", "Returned value", "Ciphertext binary string. String."], "Examples": ["SELECT encrypt('aes-256-ofb', 'Secret', '12345678910121314151617181920212', 'iviviviviviviviv') = aes_encrypt_mysql('aes-256-ofb', 'Secret', '12345678910121314151617181920212', 'iviviviviviviviv') AS ciphertexts_equal;", "SELECT encrypt('aes-256-ofb', 'Secret', '123456789101213141516171819202122', 'iviviviviviviviv123');", "SELECT hex(aes_encrypt_mysql('aes-256-ofb', 'Secret', '123456789101213141516171819202122', 'iviviviviviviviv123')) AS ciphertext;", "SELECT hex(aes_encrypt_mysql('aes-256-ofb', 'Secret', '123456789101213141516171819202122', 'iviviviviviviviv123456')) AS ciphertext", "mysql> SET  block_encryption_mode='aes-256-ofb';Query OK, 0 rows affected (0.00 sec)mysql> SELECT aes_encrypt('Secret', '123456789101213141516171819202122', 'iviviviviviviviv123456') as ciphertext;+------------------------+| ciphertext             |+------------------------+| 0x24E9E4966469         |+------------------------+1 row in set (0.00 sec)"], "Category": ["Encryption Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/encryption-functions"], "Title": ["decrypt"], "Feature": ["decrypt('mode', 'ciphertext', 'key' [, iv, aad])"], "Description": ["decrypt", "This function decrypts ciphertext into a plaintext using these modes:", "aes-128-ecb, aes-192-ecb, aes-256-ecbaes-128-cbc, aes-192-cbc, aes-256-cbcaes-128-ofb, aes-192-ofb, aes-256-ofbaes-128-gcm, aes-192-gcm, aes-256-gcmaes-128-ctr, aes-192-ctr, aes-256-ctr", "Syntax", "decrypt('mode', 'ciphertext', 'key' [, iv, aad])", "Arguments", "mode \u2014 Decryption mode. String.ciphertext \u2014 Encrypted text that needs to be decrypted. String.key \u2014 Decryption key. String.iv \u2014 Initialization vector. Required for -gcm modes, Optional for others. String.aad \u2014 Additional authenticated data. Won't decrypt if this value is incorrect. Works only in -gcm modes, for others would throw an exception. String.", "Returned value", "Decrypted String. String."], "Examples": ["SELECT comment, hex(secret) FROM encryption_test;", "SELECT comment, decrypt('aes-256-cfb128', secret, '12345678910121314151617181920212') as plaintext FROM encryption_test"], "Category": ["Encryption Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/encryption-functions"], "Title": ["tryDecrypt"], "Feature": ["tryDecrypt"], "Description": ["tryDecrypt", "Similar to decrypt, but returns NULL if decryption fails because of using the wrong key."], "Examples": ["CREATE TABLE decrypt_null (  dt DateTime,  user_id UInt32,  encrypted String,  iv String) ENGINE = Memory;", "INSERT INTO decrypt_null VALUES    ('2022-08-02 00:00:00', 1, encrypt('aes-256-gcm', 'value1', 'keykeykeykeykeykeykeykeykeykey01', 'iv1'), 'iv1'),    ('2022-09-02 00:00:00', 2, encrypt('aes-256-gcm', 'value2', 'keykeykeykeykeykeykeykeykeykey02', 'iv2'), 'iv2'),    ('2022-09-02 00:00:01', 3, encrypt('aes-256-gcm', 'value3', 'keykeykeykeykeykeykeykeykeykey03', 'iv3'), 'iv3');", "SELECT    dt,    user_id,    tryDecrypt('aes-256-gcm', encrypted, 'keykeykeykeykeykeykeykeykeykey02', iv) AS valueFROM decrypt_nullORDER BY user_id ASC"], "Category": ["Encryption Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/encryption-functions"], "Title": ["aes_decrypt_mysql"], "Feature": ["aes_decrypt_mysql('mode', 'ciphertext', 'key' [, iv])"], "Description": ["aes_decrypt_mysql", "Compatible with mysql encryption and decrypts data encrypted with AES_ENCRYPT function.", "Will produce same plaintext as decrypt on equal inputs. But when key or iv are longer than they should normally be, aes_decrypt_mysql will stick to what MySQL's aes_decrypt does: 'fold' key and ignore excess bits of IV.", "Supported decryption modes:", "aes-128-ecb, aes-192-ecb, aes-256-ecbaes-128-cbc, aes-192-cbc, aes-256-cbcaes-128-cfb128aes-128-ofb, aes-192-ofb, aes-256-ofb", "Syntax", "aes_decrypt_mysql('mode', 'ciphertext', 'key' [, iv])", "Arguments", "mode \u2014 Decryption mode. String.ciphertext \u2014 Encrypted text that needs to be decrypted. String.key \u2014 Decryption key. String.iv \u2014 Initialization vector. Optional. String.", "Returned value", "Decrypted String. String."], "Examples": ["mysql> SET  block_encryption_mode='aes-256-ofb';Query OK, 0 rows affected (0.00 sec)mysql> SELECT aes_encrypt('Secret', '123456789101213141516171819202122', 'iviviviviviviviv123456') as ciphertext;+------------------------+| ciphertext             |+------------------------+| 0x24E9E4966469         |+------------------------+1 row in set (0.00 sec)", "SELECT aes_decrypt_mysql('aes-256-ofb', unhex('24E9E4966469'), '123456789101213141516171819202122', 'iviviviviviviviv123456') AS plaintext"], "Category": ["Encryption Functions"]}
