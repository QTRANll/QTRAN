{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-functions"], "Title": ["tuple"], "Feature": ["tuple(x, y, ...)"], "Description": ["tuple", "A function that allows grouping multiple columns.\nFor columns C1, C2, ... with the types T1, T2, ..., it returns a named Tuple(C1 T1, C2 T2, ...) type tuple containing these columns if their names are unique and can be treated as unquoted identifiers, otherwise a Tuple(T1, T2, ...) is returned. There is no cost to execute the function.\nTuples are normally used as intermediate values for an argument of IN operators, or for creating a list of formal parameters of lambda functions. Tuples can\u2019t be written to a table.", "The function implements the operator (x, y, ...).", "Syntax", "tuple(x, y, ...)"], "Examples": ["tuple(x, y, ...)"], "Category": ["Tuples Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-functions"], "Title": ["tupleElement"], "Feature": ["tupleElement(tuple, index, [, default_value])tupleElement(tuple, name, [, default_value])"], "Description": ["tupleElement", "A function that allows getting a column from a tuple.", "If the second argument is a number index, it is the column index, starting from 1. If the second argument is a string name, it represents the name of the element. Besides, we can provide the third optional argument, such that when index out of bounds or no element exist for the name, the default value returned instead of throwing an exception. The second and third arguments, if provided, must be constants. There is no cost to execute the function.", "The function implements operators x.index and x.name.", "Syntax", "tupleElement(tuple, index, [, default_value])tupleElement(tuple, name, [, default_value])"], "Examples": ["tupleElement(tuple, index, [, default_value])tupleElement(tuple, name, [, default_value])"], "Category": ["Tuples Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-functions"], "Title": ["untuple"], "Feature": ["untuple(x)"], "Description": ["untuple", "Performs syntactic substitution of tuple elements in the call location.", "The names of the result columns are implementation-specific and subject to change. Do not assume specific column names after untuple.", "Syntax", "untuple(x)", "You can use the EXCEPT expression to skip columns as a result of the query.", "Arguments", "x \u2014 A tuple function, column, or tuple of elements. Tuple.", "Returned value", "None."], "Examples": ["SELECT untuple(v6) FROM kv;", "SELECT untuple((* EXCEPT (v2, v3),)) FROM kv;"], "Category": ["Tuples Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-functions"], "Title": ["tupleHammingDistance"], "Feature": ["tupleHammingDistance(tuple1, tuple2)"], "Description": ["tupleHammingDistance", "Returns the Hamming Distance between two tuples of the same size.", "Syntax", "tupleHammingDistance(tuple1, tuple2)", "Arguments", "tuple1 \u2014 First tuple. Tuple.tuple2 \u2014 Second tuple. Tuple.", "Tuples should have the same type of the elements.", "Returned value", "The Hamming distance.", "NoteThe result type is calculated the same way it is for Arithmetic functions, based on the number of elements in the input tuples.", "SELECT    toTypeName(tupleHammingDistance(tuple(0), tuple(0))) AS t1,    toTypeName(tupleHammingDistance((0, 0), (0, 0))) AS t2,    toTypeName(tupleHammingDistance((0, 0, 0), (0, 0, 0))) AS t3,    toTypeName(tupleHammingDistance((0, 0, 0, 0), (0, 0, 0, 0))) AS t4,    toTypeName(tupleHammingDistance((0, 0, 0, 0, 0), (0, 0, 0, 0, 0))) AS t5", "\u250c\u2500t1\u2500\u2500\u2500\u2500\u252c\u2500t2\u2500\u2500\u2500\u2500\u2500\u252c\u2500t3\u2500\u2500\u2500\u2500\u2500\u252c\u2500t4\u2500\u2500\u2500\u2500\u2500\u252c\u2500t5\u2500\u2500\u2500\u2500\u2500\u2510\u2502 UInt8 \u2502 UInt16 \u2502 UInt32 \u2502 UInt64 \u2502 UInt64 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Examples": ["SELECT tupleHammingDistance((1, 2, 3), (3, 2, 1)) AS HammingDistance;", "SELECT tupleHammingDistance(wordShingleMinHash(string), wordShingleMinHashCaseInsensitive(string)) AS HammingDistanceFROM (SELECT 'ClickHouse is a column-oriented database management system for online analytical processing of queries.' AS string);"], "Category": ["Tuples Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-functions"], "Title": ["tupleToNameValuePairs"], "Feature": ["tupleToNameValuePairs(tuple)"], "Description": ["tupleToNameValuePairs", "Turns a named tuple into an array of (name, value) pairs. For a Tuple(a T, b T, ..., c T) returns Array(Tuple(String, T), ...)\nin which the Strings represents the named fields of the tuple and T are the values associated with those names. All values in the tuple should be of the same type.", "Syntax", "tupleToNameValuePairs(tuple)", "Arguments", "tuple \u2014 Named tuple. Tuple with any types of values.", "Returned value", "An array with (name, value) pairs. Array(Tuple(String, ...))."], "Examples": ["CREATE TABLE tupletest (col Tuple(user_ID UInt64, session_ID UInt64)) ENGINE = Memory;INSERT INTO tupletest VALUES (tuple( 100, 2502)), (tuple(1,100));SELECT tupleToNameValuePairs(col) FROM tupletest;", "CREATE TABLE tupletest (col Tuple(CPU Float64, Memory Float64, Disk Float64)) ENGINE = Memory;INSERT INTO tupletest VALUES(tuple(3.3, 5.5, 6.6));SELECT arrayJoin(tupleToNameValuePairs(col)) FROM tupletest;", "SELECT tupleToNameValuePairs(tuple(3, 2, 1));"], "Category": ["Tuples Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-functions"], "Title": ["tupleNames"], "Feature": ["tupleNames(tuple)"], "Description": ["tupleNames", "Converts a tuple into an array of column names. For a tuple in the form Tuple(a T, b T, ...), it returns an array of strings representing the named columns of the tuple. If the tuple elements do not have explicit names, their indices will be used as the column names instead.", "Syntax", "tupleNames(tuple)", "Arguments", "tuple \u2014 Named tuple. Tuple with any types of values.", "Returned value", "An array with strings.", "Type: Array(Tuple(String, ...))."], "Examples": ["CREATE TABLE tupletest (col Tuple(user_ID UInt64, session_ID UInt64)) ENGINE = Memory;INSERT INTO tupletest VALUES (tuple(1, 2));SELECT tupleNames(col) FROM tupletest;", "SELECT tupleNames(tuple(3, 2, 1));"], "Category": ["Tuples Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-functions"], "Title": ["tuplePlus"], "Feature": ["tuplePlus(tuple1, tuple2)"], "Description": ["tuplePlus", "Calculates the sum of corresponding values of two tuples of the same size.", "Syntax", "tuplePlus(tuple1, tuple2)", "Alias: vectorSum.", "Arguments", "tuple1 \u2014 First tuple. Tuple.tuple2 \u2014 Second tuple. Tuple.", "Returned value", "Tuple with the sum. Tuple."], "Examples": ["SELECT tuplePlus((1, 2), (2, 3));"], "Category": ["Tuples Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-functions"], "Title": ["tupleMinus"], "Feature": ["tupleMinus(tuple1, tuple2)"], "Description": ["tupleMinus", "Calculates the subtraction of corresponding values of two tuples of the same size.", "Syntax", "tupleMinus(tuple1, tuple2)", "Alias: vectorDifference.", "Arguments", "tuple1 \u2014 First tuple. Tuple.tuple2 \u2014 Second tuple. Tuple.", "Returned value", "Tuple with the result of subtraction. Tuple."], "Examples": ["SELECT tupleMinus((1, 2), (2, 3));"], "Category": ["Tuples Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-functions"], "Title": ["tupleMultiply"], "Feature": ["tupleMultiply(tuple1, tuple2)"], "Description": ["tupleMultiply", "Calculates the multiplication of corresponding values of two tuples of the same size.", "Syntax", "tupleMultiply(tuple1, tuple2)", "Arguments", "tuple1 \u2014 First tuple. Tuple.tuple2 \u2014 Second tuple. Tuple.", "Returned value", "Tuple with the multiplication. Tuple."], "Examples": ["SELECT tupleMultiply((1, 2), (2, 3));"], "Category": ["Tuples Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-functions"], "Title": ["tupleDivide"], "Feature": ["tupleDivide(tuple1, tuple2)"], "Description": ["tupleDivide", "Calculates the division of corresponding values of two tuples of the same size. Note that division by zero will return inf.", "Syntax", "tupleDivide(tuple1, tuple2)", "Arguments", "tuple1 \u2014 First tuple. Tuple.tuple2 \u2014 Second tuple. Tuple.", "Returned value", "Tuple with the result of division. Tuple."], "Examples": ["SELECT tupleDivide((1, 2), (2, 3));"], "Category": ["Tuples Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-functions"], "Title": ["tupleNegate"], "Feature": ["tupleNegate(tuple)"], "Description": ["tupleNegate", "Calculates the negation of the tuple values.", "Syntax", "tupleNegate(tuple)", "Arguments", "tuple \u2014 Tuple.", "Returned value", "Tuple with the result of negation. Tuple."], "Examples": ["SELECT tupleNegate((1,  2));"], "Category": ["Tuples Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-functions"], "Title": ["tupleMultiplyByNumber"], "Feature": ["tupleMultiplyByNumber(tuple, number)"], "Description": ["tupleMultiplyByNumber", "Returns a tuple with all values multiplied by a number.", "Syntax", "tupleMultiplyByNumber(tuple, number)", "Arguments", "tuple \u2014 Tuple.number \u2014 Multiplier. Int/UInt, Float or Decimal.", "Returned value", "Tuple with multiplied values. Tuple."], "Examples": ["SELECT tupleMultiplyByNumber((1, 2), -2.1);"], "Category": ["Tuples Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-functions"], "Title": ["tupleDivideByNumber"], "Feature": ["tupleDivideByNumber(tuple, number)"], "Description": ["tupleDivideByNumber", "Returns a tuple with all values divided by a number. Note that division by zero will return inf.", "Syntax", "tupleDivideByNumber(tuple, number)", "Arguments", "tuple \u2014 Tuple.number \u2014 Divider. Int/UInt, Float or Decimal.", "Returned value", "Tuple with divided values. Tuple."], "Examples": ["SELECT tupleDivideByNumber((1, 2), 0.5);"], "Category": ["Tuples Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-functions"], "Title": ["tupleConcat"], "Feature": ["tupleConcat(tuples)"], "Description": ["tupleConcat", "Combines tuples passed as arguments.", "tupleConcat(tuples)", "Arguments", "tuples \u2013 Arbitrary number of arguments of Tuple type."], "Examples": ["SELECT tupleConcat((1, 2), (3, 4), (true, false)) AS res"], "Category": ["Tuples Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-functions"], "Title": ["tupleIntDiv"], "Feature": ["tupleIntDiv(tuple_num, tuple_div)"], "Description": ["tupleIntDiv", "Does integer division of a tuple of numerators and a tuple of denominators, and returns a tuple of the quotients.", "Syntax", "tupleIntDiv(tuple_num, tuple_div)", "Parameters", "tuple_num: Tuple of numerator values. Tuple of numeric type.tuple_div: Tuple of divisor values. Tuple of numeric type.", "Returned value", "Tuple of the quotients of tuple_num and tuple_div. Tuple of integer values.", "Implementation details", "If either tuple_num or tuple_div contain non-integer values then the result is calculated by rounding to the nearest integer for each non-integer numerator or divisor.An error will be thrown for division by 0. "], "Examples": ["SELECT tupleIntDiv((15, 10, 5), (5, 5, 5));", "SELECT tupleIntDiv((15, 10, 5), (5.5, 5.5, 5.5));"], "Category": ["Tuples Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-functions"], "Title": ["tupleIntDivOrZero"], "Feature": ["tupleIntDivOrZero(tuple_num, tuple_div)"], "Description": ["tupleIntDivOrZero", "Like tupleIntDiv it does integer division of a tuple of numerators and a tuple of denominators, and returns a tuple of the quotients. It does not throw an error for 0 divisors, but rather returns the quotient as 0. ", "Syntax", "tupleIntDivOrZero(tuple_num, tuple_div)", "tuple_num: Tuple of numerator values. Tuple of numeric type.tuple_div: Tuple of divisor values. Tuple of numeric type.", "Returned value", "Tuple of the quotients of tuple_num and tuple_div. Tuple of integer values.Returns 0 for quotients where the divisor is 0.", "Implementation details", "If either tuple_num or tuple_div contain non-integer values then the result is calculated by rounding to the nearest integer for each non-integer numerator or divisor as in tupleIntDiv."], "Examples": ["SELECT tupleIntDivOrZero((5, 10, 15), (0, 0, 0));"], "Category": ["Tuples Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-functions"], "Title": ["tupleIntDivByNumber"], "Feature": ["tupleIntDivByNumber(tuple_num, div)"], "Description": ["tupleIntDivByNumber", "Does integer division of a tuple of numerators by a given denominator, and returns a tuple of the quotients.", "Syntax", "tupleIntDivByNumber(tuple_num, div)", "Parameters", "tuple_num: Tuple of numerator values. Tuple of numeric type.div: The divisor value. Numeric type.", "Returned value", "Tuple of the quotients of tuple_num and div. Tuple of integer values.", "Implementation details", "If either tuple_num or div contain non-integer values then the result is calculated by rounding to the nearest integer for each non-integer numerator or divisor.An error will be thrown for division by 0. "], "Examples": ["SELECT tupleIntDivByNumber((15, 10, 5), 5);", "SELECT tupleIntDivByNumber((15.2, 10.7, 5.5), 5.8);"], "Category": ["Tuples Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-functions"], "Title": ["tupleIntDivOrZeroByNumber"], "Feature": ["tupleIntDivOrZeroByNumber(tuple_num, div)"], "Description": ["tupleIntDivOrZeroByNumber", "Like tupleIntDivByNumber it does integer division of a tuple of numerators by a given denominator, and returns a tuple of the quotients. It does not throw an error for 0 divisors, but rather returns the quotient as 0.", "Syntax", "tupleIntDivOrZeroByNumber(tuple_num, div)", "Parameters", "tuple_num: Tuple of numerator values. Tuple of numeric type.div: The divisor value. Numeric type.", "Returned value", "Tuple of the quotients of tuple_num and div. Tuple of integer values.Returns 0 for quotients where the divisor is 0.", "Implementation details", "If either tuple_num or div contain non-integer values then the result is calculated by rounding to the nearest integer for each non-integer numerator or divisor as in tupleIntDivByNumber."], "Examples": ["SELECT tupleIntDivOrZeroByNumber((15, 10, 5), 5);", "SELECT tupleIntDivOrZeroByNumber((15, 10, 5), 0)"], "Category": ["Tuples Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-functions"], "Title": ["tupleModulo"], "Feature": ["tupleModulo(tuple_num, tuple_mod)"], "Description": ["tupleModulo", "Returns a tuple of the moduli (remainders) of division operations of two tuples.", "Syntax", "tupleModulo(tuple_num, tuple_mod)", "Parameters", "tuple_num: Tuple of numerator values. Tuple of numeric type.tuple_div: Tuple of modulus values. Tuple of numeric type.", "Returned value", "Tuple of the remainders of division of tuple_num and tuple_div. Tuple of non-zero integer values.An error is thrown for division by zero."], "Examples": ["SELECT tupleModulo((15, 10, 5), (5, 3, 2));"], "Category": ["Tuples Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-functions"], "Title": ["tupleModuloByNumber"], "Feature": ["tupleModuloByNumber(tuple_num, div)"], "Description": ["tupleModuloByNumber", "Returns a tuple of the moduli (remainders) of division operations of a tuple and a given divisor.", "Syntax", "tupleModuloByNumber(tuple_num, div)", "Parameters", "tuple_num: Tuple of numerator values. Tuple of numeric type.div: The divisor value. Numeric type.", "Returned value", "Tuple of the remainders of division of tuple_num and div. Tuple of non-zero integer values.An error is thrown for division by zero."], "Examples": ["SELECT tupleModuloByNumber((15, 10, 5), 2);"], "Category": ["Tuples Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-functions"], "Title": ["flattenTuple"], "Feature": ["flattenTuple(input)"], "Description": ["flattenTuple", "Returns a flattened output tuple from a nested named input tuple. Elements of the output tuple are the paths from the original input tuple. For instance: Tuple(a Int, Tuple(b Int, c Int)) -> Tuple(a Int, b Int, c Int). flattenTuple can be used to select all paths from type Object as separate columns.", "Syntax", "flattenTuple(input)", "Parameters", "input: Nested named tuple to flatten. Tuple.", "Returned value", "output tuple whose elements are paths from the original input. Tuple."], "Examples": ["CREATE TABLE t_flatten_tuple(t Tuple(t1 Nested(a UInt32, s String), b UInt32, t2 Tuple(k String, v UInt32))) ENGINE = Memory;INSERT INTO t_flatten_tuple VALUES (([(1, 'a'), (2, 'b')], 3, ('c', 4)));SELECT flattenTuple(t) FROM t_flatten_tuple;"], "Category": ["Tuples Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/tuple-functions"], "Title": ["Distance functions"], "Feature": ["Distance functions"], "Description": ["Distance functions", "All supported functions are described in distance functions documentation."], "Examples": [], "Category": ["Tuples Functions"]}
