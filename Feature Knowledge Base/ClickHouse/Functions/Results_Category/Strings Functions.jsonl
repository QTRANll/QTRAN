{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["empty"], "Feature": ["empty(x)"], "Description": ["empty", "Checks whether the input string is empty. A string is considered non-empty if it contains at least one byte, even if this byte is a space or the null byte.", "The function is also available for arrays and UUIDs.", "Syntax", "empty(x)", "Arguments", "x \u2014 Input value. String.", "Returned value", "Returns 1 for an empty string or 0 for a non-empty string. UInt8."], "Examples": ["SELECT empty('');"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["notEmpty"], "Feature": ["notEmpty(x)"], "Description": ["notEmpty", "Checks whether the input string is non-empty. A string is considered non-empty if it contains at least one byte, even if this byte is a space or the null byte.", "The function is also available for arrays and UUIDs.", "Syntax", "notEmpty(x)", "Arguments", "x \u2014 Input value. String.", "Returned value", "Returns 1 for a non-empty string or 0 for an empty string string. UInt8."], "Examples": ["SELECT notEmpty('text');"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["length"], "Feature": ["length(s)"], "Description": ["length", "Returns the length of a string in bytes rather than in characters or Unicode code points. The function also works for arrays.", "Alias: OCTET_LENGTH", "Syntax", "length(s)", "Parameters", "s \u2014 An input string or array. String/Array.", "Returned value", "Length of the string or array s in bytes. UInt64."], "Examples": ["SELECT length('Hello, world!');", "SELECT length([1, 2, 3, 4]);"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["lengthUTF8"], "Feature": ["lengthUTF8(s)"], "Description": ["lengthUTF8", "Returns the length of a string in Unicode code points rather than in bytes or characters. It assumes that the string contains valid UTF-8 encoded text. If this assumption is violated, no exception is thrown and the result is undefined.", "Aliases:", "CHAR_LENGTHCHARACTER_LENGTH", "Syntax", "lengthUTF8(s)", "Parameters", "s \u2014 String containing valid UTF-8 encoded text. String.", "Returned value", "Length of the string s in Unicode code points. UInt64."], "Examples": ["SELECT lengthUTF8('\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439, \u043c\u0438\u0440!');"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["left"], "Feature": ["left(s, offset)"], "Description": ["left", "Returns a substring of string s with a specified offset starting from the left.", "Syntax", "left(s, offset)", "Parameters", "s \u2014 The string to calculate a substring from. String or FixedString.offset \u2014 The number of bytes of the offset. UInt*.", "Returned value", "For positive offset: A substring of s with offset many bytes, starting from the left of the string.For negative offset: A substring of s with length(s) - |offset| bytes, starting from the left of the string.An empty string if length is 0."], "Examples": ["SELECT left('Hello', 3);", "SELECT left('Hello', -3);"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["leftUTF8"], "Feature": ["leftUTF8(s, offset)"], "Description": ["leftUTF8", "Returns a substring of a UTF-8 encoded string s with a specified offset starting from the left.", "Syntax", "leftUTF8(s, offset)", "Parameters", "s \u2014 The UTF-8 encoded string to calculate a substring from. String or FixedString.offset \u2014 The number of bytes of the offset. UInt*.", "Returned value", "For positive offset: A substring of s with offset many bytes, starting from the left of the string.For negative offset: A substring of s with length(s) - |offset| bytes, starting from the left of the string.An empty string if length is 0."], "Examples": ["SELECT leftUTF8('\u041f\u0440\u0438\u0432\u0435\u0442', 4);", "SELECT leftUTF8('\u041f\u0440\u0438\u0432\u0435\u0442', -4);"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["leftPad"], "Feature": ["leftPad(string, length[, pad_string])"], "Description": ["leftPad", "Pads a string from the left with spaces or with a specified string (multiple times, if needed) until the resulting string reaches the specified length.", "Syntax", "leftPad(string, length[, pad_string])", "Alias: LPAD", "Arguments", "string \u2014 Input string that should be padded. String.length \u2014 The length of the resulting string. UInt or Int. If the value is smaller than the input string length, then the input string is shortened to length characters.pad_string \u2014 The string to pad the input string with. String. Optional. If not specified, then the input string is padded with spaces.", "Returned value", "A left-padded string of the given length. String."], "Examples": ["SELECT leftPad('abc', 7, '*'), leftPad('def', 7);"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["leftPadUTF8"], "Feature": ["leftPadUTF8(string, length[, pad_string])"], "Description": ["leftPadUTF8", "Pads the string from the left with spaces or a specified string (multiple times, if needed) until the resulting string reaches the given length. Unlike leftPad which measures the string length in bytes, the string length is measured in code points.", "Syntax", "leftPadUTF8(string, length[, pad_string])", "Arguments", "string \u2014 Input string that should be padded. String.length \u2014 The length of the resulting string. UInt or Int. If the value is smaller than the input string length, then the input string is shortened to length characters.pad_string \u2014 The string to pad the input string with. String. Optional. If not specified, then the input string is padded with spaces.", "Returned value", "A left-padded string of the given length. String."], "Examples": ["SELECT leftPadUTF8('\u0430\u0431\u0432\u0433', 7, '*'), leftPadUTF8('\u0434\u0435\u0436\u0437', 7);"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["right"], "Feature": ["right(s, offset)"], "Description": ["right", "Returns a substring of string s with a specified offset starting from the right.", "Syntax", "right(s, offset)", "Parameters", "s \u2014 The string to calculate a substring from. String or FixedString.offset \u2014 The number of bytes of the offset. UInt*.", "Returned value", "For positive offset: A substring of s with offset many bytes, starting from the right of the string.For negative offset: A substring of s with length(s) - |offset| bytes, starting from the right of the string.An empty string if length is 0."], "Examples": ["SELECT right('Hello', 3);", "SELECT right('Hello', -3);"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["rightUTF8"], "Feature": ["rightUTF8(s, offset)"], "Description": ["rightUTF8", "Returns a substring of UTF-8 encoded string s with a specified offset starting from the right.", "Syntax", "rightUTF8(s, offset)", "Parameters", "s \u2014 The UTF-8 encoded string to calculate a substring from. String or FixedString.offset \u2014 The number of bytes of the offset. UInt*.", "Returned value", "For positive offset: A substring of s with offset many bytes, starting from the right of the string.For negative offset: A substring of s with length(s) - |offset| bytes, starting from the right of the string.An empty string if length is 0."], "Examples": ["SELECT rightUTF8('\u041f\u0440\u0438\u0432\u0435\u0442', 4);", "SELECT rightUTF8('\u041f\u0440\u0438\u0432\u0435\u0442', -4);"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["rightPad"], "Feature": ["rightPad(string, length[, pad_string])"], "Description": ["rightPad", "Pads a string from the right with spaces or with a specified string (multiple times, if needed) until the resulting string reaches the specified length.", "Syntax", "rightPad(string, length[, pad_string])", "Alias: RPAD", "Arguments", "string \u2014 Input string that should be padded. String.length \u2014 The length of the resulting string. UInt or Int. If the value is smaller than the input string length, then the input string is shortened to length characters.pad_string \u2014 The string to pad the input string with. String. Optional. If not specified, then the input string is padded with spaces.", "Returned value", "A left-padded string of the given length. String."], "Examples": ["SELECT rightPad('abc', 7, '*'), rightPad('abc', 7);"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["rightPadUTF8"], "Feature": ["rightPadUTF8(string, length[, pad_string])"], "Description": ["rightPadUTF8", "Pads the string from the right with spaces or a specified string (multiple times, if needed) until the resulting string reaches the given length. Unlike rightPad which measures the string length in bytes, the string length is measured in code points.", "Syntax", "rightPadUTF8(string, length[, pad_string])", "Arguments", "string \u2014 Input string that should be padded. String.length \u2014 The length of the resulting string. UInt or Int. If the value is smaller than the input string length, then the input string is shortened to length characters.pad_string \u2014 The string to pad the input string with. String. Optional. If not specified, then the input string is padded with spaces.", "Returned value", "A right-padded string of the given length. String."], "Examples": ["SELECT rightPadUTF8('\u0430\u0431\u0432\u0433', 7, '*'), rightPadUTF8('\u0430\u0431\u0432\u0433', 7);"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["lower"], "Feature": ["lower(input)"], "Description": ["lower", "Converts the ASCII Latin symbols in a string to lowercase.", "*Syntax**", "lower(input)", "Alias: lcase", "Parameters", "input: A string type String.", "Returned value", "A String data type value."], "Examples": ["SELECT lower('CLICKHOUSE');"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["upper"], "Feature": ["upper(input)"], "Description": ["upper", "Converts the ASCII Latin symbols in a string to uppercase.", "Syntax", "upper(input)", "Alias: ucase", "Parameters", "input \u2014 A string type String.", "Returned value", "A String data type value."], "Examples": ["SELECT upper('clickhouse');"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["lowerUTF8"], "Feature": ["lowerUTF8(input)"], "Description": ["lowerUTF8", "Converts a string to lowercase, assuming that the string contains valid UTF-8 encoded text. If this assumption is violated, no exception is thrown and the result is undefined.", "NoteDoes not detect the language, e.g. for Turkish the result might not be exactly correct (i/\u0130 vs. i/I). If the length of the UTF-8 byte sequence is different for upper and lower case of a code point (such as \u1e9e and \u00df), the result may be incorrect for this code point.", "Syntax", "lowerUTF8(input)", "Parameters", "input \u2014 A string type String.", "Returned value", "A String data type value."], "Examples": ["SELECT lowerUTF8('M\u00dcNCHEN') as Lowerutf8;"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["upperUTF8"], "Feature": ["upperUTF8(input)"], "Description": ["upperUTF8", "Converts a string to uppercase, assuming that the string contains valid UTF-8 encoded text. If this assumption is violated, no exception is thrown and the result is undefined.", "NoteDoes not detect the language, e.g. for Turkish the result might not be exactly correct (i/\u0130 vs. i/I). If the length of the UTF-8 byte sequence is different for upper and lower case of a code point (such as \u1e9e and \u00df), the result may be incorrect for this code point.", "Syntax", "upperUTF8(input)", "Parameters", "input \u2014 A string type String.", "Returned value", "A String data type value."], "Examples": ["SELECT upperUTF8('M\u00fcnchen') as Upperutf8;"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["isValidUTF8"], "Feature": ["isValidUTF8(input)"], "Description": ["isValidUTF8", "Returns 1, if the set of bytes constitutes valid UTF-8-encoded text, otherwise 0.", "Syntax", "isValidUTF8(input)", "Parameters", "input \u2014 A string type String.", "Returned value", "Returns 1, if the set of bytes constitutes valid UTF-8-encoded text, otherwise 0.", "Query:", "SELECT isValidUTF8('\\xc3\\xb1') AS valid, isValidUTF8('\\xc3\\x28') AS invalid;", "Result:", "\u250c\u2500valid\u2500\u252c\u2500invalid\u2500\u2510\u2502     1 \u2502       0 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Examples": ["isValidUTF8(input)", "SELECT isValidUTF8('\\xc3\\xb1') AS valid, isValidUTF8('\\xc3\\x28') AS invalid;"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["toValidUTF8"], "Feature": ["toValidUTF8(input_string)"], "Description": ["toValidUTF8", "Replaces invalid UTF-8 characters by the \ufffd (U+FFFD) character. All running in a row invalid characters are collapsed into the one replacement character.", "Syntax", "toValidUTF8(input_string)", "Arguments", "input_string \u2014 Any set of bytes represented as the String data type object.", "Returned value", "A valid UTF-8 string."], "Examples": ["SELECT toValidUTF8('\\x61\\xF0\\x80\\x80\\x80b');"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["repeat"], "Feature": ["repeat(s, n)"], "Description": ["repeat", "Concatenates a string as many times with itself as specified.", "Syntax", "repeat(s, n)", "Alias: REPEAT", "Arguments", "s \u2014 The string to repeat. String.n \u2014 The number of times to repeat the string. UInt or Int.", "Returned value", "A string containing string s repeated n times. If n <= 0, the function returns the empty string. String."], "Examples": ["SELECT repeat('abc', 10);"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["space"], "Feature": ["space(n)"], "Description": ["space", "Concatenates a space ( ) as many times with itself as specified.", "Syntax", "space(n)", "Alias: SPACE.", "Arguments", "n \u2014 The number of times to repeat the space. UInt or Int.", "Returned value", "The string containing string   repeated n times. If n <= 0, the function returns the empty string. String."], "Examples": ["SELECT space(3);"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["reverse"], "Feature": ["reverse"], "Description": ["reverse", "Reverses the sequence of bytes in a string."], "Examples": [], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["reverseUTF8"], "Feature": ["reverseUTF8"], "Description": ["reverseUTF8", "Reverses a sequence of Unicode code points in a string. Assumes that the string contains valid UTF-8 encoded text. If this assumption is violated, no exception is thrown and the result is undefined."], "Examples": [], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["concat"], "Feature": ["concat(s1, s2, ...)"], "Description": ["concat", "Concatenates the given arguments.", "Syntax", "concat(s1, s2, ...)", "Arguments", "Values of arbitrary type.", "Arguments which are not of types String or FixedString are converted to strings using their default serialization. As this decreases performance, it is not recommended to use non-String/FixedString arguments.", "Returned values", "The String created by concatenating the arguments.", "If any of arguments is NULL, the function returns NULL."], "Examples": ["SELECT concat('Hello, ', 'World!');", "SELECT concat(42, 144);"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["concatAssumeInjective"], "Feature": ["concatAssumeInjective(s1, s2, ...)"], "Description": ["concatAssumeInjective", "Like concat but assumes that concat(s1, s2, ...) \u2192 sn is injective. Can be used for optimization of GROUP BY.", "A function is called injective if it returns for different arguments different results. In other words: different arguments never produce identical result.", "Syntax", "concatAssumeInjective(s1, s2, ...)", "Arguments", "Values of type String or FixedString.", "Returned values", "The String created by concatenating the arguments.", "If any of argument values is NULL, the function returns NULL."], "Examples": ["CREATE TABLE key_val(`key1` String, `key2` String, `value` UInt32) ENGINE = TinyLog;INSERT INTO key_val VALUES ('Hello, ','World',1), ('Hello, ','World',2), ('Hello, ','World!',3), ('Hello',', World!',2);SELECT * from key_val;", "SELECT concat(key1, key2), sum(value) FROM key_val GROUP BY concatAssumeInjective(key1, key2);"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["concatWithSeparator"], "Feature": ["concatWithSeparator(sep, expr1, expr2, expr3...)"], "Description": ["concatWithSeparator", "Concatenates the given strings with a given separator.", "Syntax", "concatWithSeparator(sep, expr1, expr2, expr3...)", "Alias: concat_ws", "Arguments", "sep \u2014 separator. Const String or FixedString.exprN \u2014 expression to be concatenated. Arguments which are not of types String or FixedString are converted to strings using their default serialization. As this decreases performance, it is not recommended to use non-String/FixedString arguments.", "Returned values", "The String created by concatenating the arguments.", "If any of the argument values is NULL, the function returns NULL."], "Examples": ["SELECT concatWithSeparator('a', '1', '2', '3', '4')"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["concatWithSeparatorAssumeInjective"], "Feature": ["concatWithSeparatorAssumeInjective"], "Description": ["concatWithSeparatorAssumeInjective", "Like concatWithSeparator but assumes that concatWithSeparator(sep, expr1, expr2, expr3...) \u2192 result is injective. Can be used for optimization of GROUP BY.", "A function is called injective if it returns for different arguments different results. In other words: different arguments never produce identical result."], "Examples": [], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["substring"], "Feature": ["substring(s, offset[, length])"], "Description": ["substring", "Returns the substring of a string s which starts at the specified byte index offset. Byte counting starts from 1. If offset is 0, an empty string is returned. If offset is negative, the substring starts pos characters from the end of the string, rather than from the beginning. An optional argument length specifies the maximum number of bytes the returned substring may have.", "Syntax", "substring(s, offset[, length])", "Aliases:", "substrmidbyteSlice", "Arguments", "s \u2014 The string to calculate a substring from. String, FixedString or Enumoffset \u2014 The starting position of the substring in s . (U)Int*.length \u2014 The maximum length of the substring. (U)Int*. Optional.", "Returned value", "A substring of s with length many bytes, starting at index offset. String."], "Examples": ["SELECT 'database' AS db, substr(db, 5), substr(db, 5, 1)"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["substringUTF8"], "Feature": ["substringUTF8(s, offset[, length])"], "Description": ["substringUTF8", "Returns the substring of a string s which starts at the specified byte index offset for Unicode code points. Byte counting starts from 1. If offset is 0, an empty string is returned. If offset is negative, the substring starts pos characters from the end of the string, rather than from the beginning. An optional argument length specifies the maximum number of bytes the returned substring may have.", "Assumes that the string contains valid UTF-8 encoded text. If this assumption is violated, no exception is thrown and the result is undefined.", "Syntax", "substringUTF8(s, offset[, length])", "Arguments", "s \u2014 The string to calculate a substring from. String, FixedString or Enumoffset \u2014 The starting position of the substring in s . (U)Int*.length \u2014 The maximum length of the substring. (U)Int*. Optional.", "Returned value", "A substring of s with length many bytes, starting at index offset.", "Implementation details", "Assumes that the string contains valid UTF-8 encoded text. If this assumption is violated, no exception is thrown and the result is undefined."], "Examples": ["SELECT 'T\u00e4glich gr\u00fc\u00dft das Murmeltier.' AS str,       substringUTF8(str, 9),       substringUTF8(str, 9, 5)"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["substringIndex"], "Feature": ["substringIndex(s, delim, count)"], "Description": ["substringIndex", "Returns the substring of s before count occurrences of the delimiter delim, as in Spark or MySQL.", "Syntax", "substringIndex(s, delim, count)", "Alias: SUBSTRING_INDEX", "Arguments", "s \u2014 The string to extract substring from. String.delim \u2014 The character to split. String.count \u2014 The number of occurrences of the delimiter to count before extracting the substring. If count is positive, everything to the left of the final delimiter (counting from the left) is returned. If count is negative, everything to the right of the final delimiter (counting from the right) is returned. UInt or Int"], "Examples": ["SELECT substringIndex('www.clickhouse.com', '.', 2)"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["substringIndexUTF8"], "Feature": ["substringIndexUTF8(s, delim, count)"], "Description": ["substringIndexUTF8", "Returns the substring of s before count occurrences of the delimiter delim, specifically for Unicode code points.", "Assumes that the string contains valid UTF-8 encoded text. If this assumption is violated, no exception is thrown and the result is undefined.", "Syntax", "substringIndexUTF8(s, delim, count)", "Arguments", "s \u2014 The string to extract substring from. String.delim \u2014 The character to split. String.count \u2014 The number of occurrences of the delimiter to count before extracting the substring. If count is positive, everything to the left of the final delimiter (counting from the left) is returned. If count is negative, everything to the right of the final delimiter (counting from the right) is returned. UInt or Int", "Returned value", "A substring String of s before count occurrences of delim.", "Implementation details", "Assumes that the string contains valid UTF-8 encoded text. If this assumption is violated, no exception is thrown and the result is undefined."], "Examples": ["SELECT substringIndexUTF8('www.stra\u00dfen-in-europa.de', '.', 2)"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["appendTrailingCharIfAbsent"], "Feature": ["appendTrailingCharIfAbsent(s, c)"], "Description": ["appendTrailingCharIfAbsent", "Appends character c to string s if s is non-empty and does not end with character c.", "Syntax", "appendTrailingCharIfAbsent(s, c)"], "Examples": ["appendTrailingCharIfAbsent(s, c)"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["convertCharset"], "Feature": ["convertCharset(s, from, to)"], "Description": ["convertCharset", "Returns string s converted from the encoding from to encoding to.", "Syntax", "convertCharset(s, from, to)"], "Examples": ["convertCharset(s, from, to)"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["base58Encode"], "Feature": ["base58Encode(plaintext)"], "Description": ["base58Encode", "Encodes a string using Base58 in the \"Bitcoin\" alphabet.", "Syntax", "base58Encode(plaintext)", "Arguments", "plaintext \u2014 String column or constant.", "Returned value", "A string containing the encoded value of the argument. String or FixedString."], "Examples": ["SELECT base58Encode('Encoded');"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["base58Decode"], "Feature": ["base58Decode(encoded)"], "Description": ["base58Decode", "Accepts a string and decodes it using Base58 encoding scheme using \"Bitcoin\" alphabet.", "Syntax", "base58Decode(encoded)", "Arguments", "encoded \u2014 String or FixedString. If the string is not a valid Base58-encoded value, an exception is thrown.", "Returned value", "A string containing the decoded value of the argument. String."], "Examples": ["SELECT base58Decode('3dc8KtHrwM');"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["tryBase58Decode"], "Feature": ["tryBase58Decode(encoded)"], "Description": ["tryBase58Decode", "Like base58Decode but returns an empty string in case of error.", "Syntax", "tryBase58Decode(encoded)", "Parameters", "encoded: String or FixedString. If the string is not a valid Base58-encoded value, returns an empty string in case of error.", "Returned value", "A string containing the decoded value of the argument."], "Examples": ["SELECT tryBase58Decode('3dc8KtHrwM') as res, tryBase58Decode('invalid') as res_invalid;"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["base64Encode"], "Feature": ["base64Encode(plaintext)"], "Description": ["base64Encode", "Encodes a String or FixedString as base64, according to RFC 4648.", "Alias: TO_BASE64.", "Syntax", "base64Encode(plaintext)", "Arguments", "plaintext \u2014 String column or constant.", "Returned value", "A string containing the encoded value of the argument."], "Examples": ["SELECT base64Encode('clickhouse');"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["base64URLEncode"], "Feature": ["base64URLEncode(url)"], "Description": ["base64URLEncode", "Encodes an URL (String or FixedString) as base64 with URL-specific modifications, according to RFC 4648.", "Syntax", "base64URLEncode(url)", "Arguments", "url \u2014 String column or constant.", "Returned value", "A string containing the encoded value of the argument."], "Examples": ["SELECT base64URLEncode('https://clickhouse.com');"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["base64Decode"], "Feature": ["base64Decode(encoded)"], "Description": ["base64Decode", "Accepts a String and decodes it from base64, according to RFC 4648. Throws an exception in case of an error.", "Alias: FROM_BASE64.", "Syntax", "base64Decode(encoded)", "Arguments", "encoded \u2014 String column or constant. If the string is not a valid Base64-encoded value, an exception is thrown.", "Returned value", "A string containing the decoded value of the argument."], "Examples": ["SELECT base64Decode('Y2xpY2tob3VzZQ==');"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["base64URLDecode"], "Feature": ["base64URLDecode(encodedUrl)"], "Description": ["base64URLDecode", "Accepts a base64-encoded URL and decodes it from base64 with URL-specific modifications, according to RFC 4648. Throws an exception in case of an error.", "Syntax", "base64URLDecode(encodedUrl)", "Arguments", "encodedURL \u2014 String column or constant. If the string is not a valid Base64-encoded value with URL-specific modifications, an exception is thrown.", "Returned value", "A string containing the decoded value of the argument."], "Examples": ["SELECT base64URLDecode('aHR0cDovL2NsaWNraG91c2UuY29t');"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["tryBase64Decode"], "Feature": ["tryBase64Decode(encoded)"], "Description": ["tryBase64Decode", "Like base64Decode but returns an empty string in case of error.", "Syntax", "tryBase64Decode(encoded)", "Arguments", "encoded \u2014 String column or constant. If the string is not a valid Base64-encoded value, returns an empty string.", "Returned value", "A string containing the decoded value of the argument."], "Examples": ["SELECT tryBase64Decode('RW5jb2RlZA==') as res, tryBase64Decode('invalid') as res_invalid;"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["tryBase64URLDecode"], "Feature": ["tryBase64URLDecode(encodedUrl)"], "Description": ["tryBase64URLDecode", "Like base64URLDecode but returns an empty string in case of error.", "Syntax", "tryBase64URLDecode(encodedUrl)", "Parameters", "encodedURL \u2014 String column or constant. If the string is not a valid Base64-encoded value with URL-specific modifications, returns an empty string.", "Returned value", "A string containing the decoded value of the argument."], "Examples": ["SELECT tryBase64URLDecode('aHR0cDovL2NsaWNraG91c2UuY29t') as res, tryBase64Decode('aHR0cHM6Ly9jbGlja') as res_invalid;"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["endsWith"], "Feature": ["endsWith(str, suffix)"], "Description": ["endsWith", "Returns whether string str ends with suffix.", "Syntax", "endsWith(str, suffix)"], "Examples": ["endsWith(str, suffix)"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["endsWithUTF8"], "Feature": ["endsWithUTF8(str, suffix)"], "Description": ["endsWithUTF8", "Returns whether string str ends with suffix, the difference between endsWithUTF8 and endsWith is that endsWithUTF8 match str and suffix by UTF-8 characters.", "Syntax", "endsWithUTF8(str, suffix)"], "Examples": ["SELECT endsWithUTF8('\u4e2d\u56fd', '\\xbd'), endsWith('\u4e2d\u56fd', '\\xbd')"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["startsWith"], "Feature": ["startsWith(str, prefix)"], "Description": ["startsWith", "Returns whether string str starts with prefix.", "Syntax", "startsWith(str, prefix)"], "Examples": ["SELECT startsWith('Spider-Man', 'Spi');"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["startsWithUTF8"], "Feature": ["startsWithUTF8"], "Description": ["startsWithUTF8", "Available in version 23.8 and later", "Returns whether string str starts with prefix, the difference between startsWithUTF8 and startsWith is that startsWithUTF8 match str and suffix by UTF-8 characters."], "Examples": ["SELECT startsWithUTF8('\u4e2d\u56fd', '\\xe4'), startsWith('\u4e2d\u56fd', '\\xe4')"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["trim"], "Feature": ["trim([[LEADING|TRAILING|BOTH] trim_character FROM] input_string)"], "Description": ["trim", "Removes the specified characters from the start or end of a string. If not specified otherwise, the function removes whitespace (ASCII-character 32).", "Syntax", "trim([[LEADING|TRAILING|BOTH] trim_character FROM] input_string)", "Arguments", "trim_character \u2014 Specified characters for trim. String.input_string \u2014 String for trim. String.", "Returned value", "A string without leading and/or trailing specified characters. String."], "Examples": ["SELECT trim(BOTH ' ()' FROM '(   Hello, world!   )');"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["trimLeft"], "Feature": ["trimLeft(input_string)"], "Description": ["trimLeft", "Removes the consecutive occurrences of whitespace (ASCII-character 32) from the start of a string.", "Syntax", "trimLeft(input_string)", "Alias: ltrim(input_string).", "Arguments", "input_string \u2014 string to trim. String.", "Returned value", "A string without leading common whitespaces. String."], "Examples": ["SELECT trimLeft('     Hello, world!     ');"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["trimRight"], "Feature": ["trimRight(input_string)"], "Description": ["trimRight", "Removes the consecutive occurrences of whitespace (ASCII-character 32) from the end of a string.", "Syntax", "trimRight(input_string)", "Alias: rtrim(input_string).", "Arguments", "input_string \u2014 string to trim. String.", "Returned value", "A string without trailing common whitespaces. String."], "Examples": ["SELECT trimRight('     Hello, world!     ');"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["trimBoth"], "Feature": ["trimBoth(input_string)"], "Description": ["trimBoth", "Removes the consecutive occurrences of whitespace (ASCII-character 32) from both ends of a string.", "Syntax", "trimBoth(input_string)", "Alias: trim(input_string).", "Arguments", "input_string \u2014 string to trim. String.", "Returned value", "A string without leading and trailing common whitespaces. String."], "Examples": ["SELECT trimBoth('     Hello, world!     ');"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["CRC32"], "Feature": ["CRC32"], "Description": ["CRC32", "Returns the CRC32 checksum of a string using CRC-32-IEEE 802.3 polynomial and initial value 0xffffffff (zlib implementation).", "The result type is UInt32."], "Examples": [], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["CRC32IEEE"], "Feature": ["CRC32IEEE"], "Description": ["CRC32IEEE", "Returns the CRC32 checksum of a string, using CRC-32-IEEE 802.3 polynomial.", "The result type is UInt32."], "Examples": [], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["CRC64"], "Feature": ["CRC64"], "Description": ["CRC64", "Returns the CRC64 checksum of a string, using CRC-64-ECMA polynomial.", "The result type is UInt64."], "Examples": [], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["normalizeQuery"], "Feature": ["normalizeQuery(x)"], "Description": ["normalizeQuery", "Replaces literals, sequences of literals and complex aliases (containing whitespace, more than two digits or at least 36 bytes long such as UUIDs) with placeholder ?.", "Syntax", "normalizeQuery(x)", "Arguments", "x \u2014 Sequence of characters. String.", "Returned value", "Sequence of characters with placeholders. String."], "Examples": ["SELECT normalizeQuery('[1, 2, 3, x]') AS query;"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["normalizeQueryKeepNames"], "Feature": ["normalizeQueryKeepNames(x)"], "Description": ["normalizeQueryKeepNames", "Replaces literals, sequences of literals with placeholder ? but does not replace complex aliases (containing whitespace, more than two digits\nor at least 36 bytes long such as UUIDs). This helps better analyze complex query logs.", "Syntax", "normalizeQueryKeepNames(x)", "Arguments", "x \u2014 Sequence of characters. String.", "Returned value", "Sequence of characters with placeholders. String."], "Examples": ["SELECT normalizeQuery('SELECT 1 AS aComplexName123'), normalizeQueryKeepNames('SELECT 1 AS aComplexName123');"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["normalizedQueryHash"], "Feature": ["normalizedQueryHash(x)"], "Description": ["normalizedQueryHash", "Returns identical 64bit hash values without the values of literals for similar queries. Can be helpful to analyze query logs.", "Syntax", "normalizedQueryHash(x)", "Arguments", "x \u2014 Sequence of characters. String.", "Returned value", "Hash value. UInt64."], "Examples": ["SELECT normalizedQueryHash('SELECT 1 AS `xyz`') != normalizedQueryHash('SELECT 1 AS `abc`') AS res;"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["normalizedQueryHashKeepNames"], "Feature": ["normalizedQueryHashKeepNames(x)"], "Description": ["normalizedQueryHashKeepNames", "Like normalizedQueryHash it returns identical 64bit hash values without the values of literals for similar queries but it does not replace complex aliases (containing whitespace, more than two digits\nor at least 36 bytes long such as UUIDs) with a placeholder before hashing. Can be helpful to analyze query logs.", "Syntax", "normalizedQueryHashKeepNames(x)", "Arguments", "x \u2014 Sequence of characters. String.", "Returned value", "Hash value. UInt64."], "Examples": ["SELECT normalizedQueryHash('SELECT 1 AS `xyz123`') != normalizedQueryHash('SELECT 1 AS `abc123`') AS normalizedQueryHash;SELECT normalizedQueryHashKeepNames('SELECT 1 AS `xyz123`') != normalizedQueryHashKeepNames('SELECT 1 AS `abc123`') AS normalizedQueryHashKeepNames;"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["normalizeUTF8NFC"], "Feature": ["normalizeUTF8NFC(words)"], "Description": ["normalizeUTF8NFC", "Converts a string to NFC normalized form, assuming the string is valid UTF8-encoded text.", "Syntax", "normalizeUTF8NFC(words)", "Arguments", "words \u2014 UTF8-encoded input string. String.", "Returned value", "String transformed to NFC normalization form. String."], "Examples": ["SELECT length('\u00e2'), normalizeUTF8NFC('\u00e2') AS nfc, length(nfc) AS nfc_len;"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["normalizeUTF8NFD"], "Feature": ["normalizeUTF8NFD(words)"], "Description": ["normalizeUTF8NFD", "Converts a string to NFD normalized form, assuming the string is valid UTF8-encoded text.", "Syntax", "normalizeUTF8NFD(words)", "Arguments", "words \u2014 UTF8-encoded input string. String.", "Returned value", "String transformed to NFD normalization form. String."], "Examples": ["SELECT length('\u00e2'), normalizeUTF8NFD('\u00e2') AS nfd, length(nfd) AS nfd_len;"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["normalizeUTF8NFKC"], "Feature": ["normalizeUTF8NFKC(words)"], "Description": ["normalizeUTF8NFKC", "Converts a string to NFKC normalized form, assuming the string is valid UTF8-encoded text.", "Syntax", "normalizeUTF8NFKC(words)", "Arguments", "words \u2014 UTF8-encoded input string. String.", "Returned value", "String transformed to NFKC normalization form. String."], "Examples": ["SELECT length('\u00e2'), normalizeUTF8NFKC('\u00e2') AS nfkc, length(nfkc) AS nfkc_len;"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["normalizeUTF8NFKD"], "Feature": ["normalizeUTF8NFKD(words)"], "Description": ["normalizeUTF8NFKD", "Converts a string to NFKD normalized form, assuming the string is valid UTF8-encoded text.", "Syntax", "normalizeUTF8NFKD(words)", "Arguments", "words \u2014 UTF8-encoded input string. String.", "Returned value", "String transformed to NFKD normalization form. String."], "Examples": ["SELECT length('\u00e2'), normalizeUTF8NFKD('\u00e2') AS nfkd, length(nfkd) AS nfkd_len;"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["encodeXMLComponent"], "Feature": ["encodeXMLComponent(x)"], "Description": ["encodeXMLComponent", "Escapes characters with special meaning in XML such that they can afterwards be place into a XML text node or attribute.", "The following characters are replaced: <, &, >, \", '.\nAlso see the list of XML and HTML character entity references.", "Syntax", "encodeXMLComponent(x)", "Arguments", "x \u2014 An input string. String.", "Returned value", "The escaped string. String."], "Examples": ["SELECT encodeXMLComponent('Hello, \"world\"!');SELECT encodeXMLComponent('<123>');SELECT encodeXMLComponent('&clickhouse');SELECT encodeXMLComponent('\\'foo\\'');"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["decodeXMLComponent"], "Feature": ["decodeXMLComponent(x)"], "Description": ["decodeXMLComponent", "Un-escapes substrings with special meaning in XML. These substrings are: &quot; &amp; &apos; &gt; &lt;", "This function also replaces numeric character references with Unicode characters. Both decimal (like &#10003;) and hexadecimal (&#x2713;) forms are supported.", "Syntax", "decodeXMLComponent(x)", "Arguments", "x \u2014 An input string. String.", "Returned value", "The un-escaped string. String."], "Examples": ["SELECT decodeXMLComponent('&apos;foo&apos;');SELECT decodeXMLComponent('&lt; &#x3A3; &gt;');"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["decodeHTMLComponent"], "Feature": ["decodeHTMLComponent(x)"], "Description": ["decodeHTMLComponent", "Un-escapes substrings with special meaning in HTML. For example: &hbar; &gt; &diamondsuit; &heartsuit; &lt; etc.", "This function also replaces numeric character references with Unicode characters. Both decimal (like &#10003;) and hexadecimal (&#x2713;) forms are supported.", "Syntax", "decodeHTMLComponent(x)", "Arguments", "x \u2014 An input string. String.", "Returned value", "The un-escaped string. String."], "Examples": ["SELECT decodeHTMLComponent(''CH');SELECT decodeHTMLComponent('I&heartsuit;ClickHouse');"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["extractTextFromHTML"], "Feature": ["extractTextFromHTML(x)"], "Description": ["extractTextFromHTML", "This function extracts plain text from HTML or XHTML.", "It does not conform 100% to the HTML, XML or XHTML specification but the implementation is reasonably accurate and fast. The rules are the following:", "Comments are skipped. Example: <!-- test -->. Comment must end with -->. Nested comments are disallowed.\nNote: constructions like <!--> and <!---> are not valid comments in HTML but they are skipped by other rules.CDATA is pasted verbatim. Note: CDATA is XML/XHTML-specific  and processed on a \"best-effort\" basis.script and style elements are removed with all their content. Note: it is assumed that closing tag cannot appear inside content. For example, in JS string literal has to be escaped like \"<\\/script>\".\nNote: comments and CDATA are possible inside script or style - then closing tags are not searched inside CDATA. Example: <script><![CDATA[</script>]]></script>. But they are still searched inside comments. Sometimes it becomes complicated: <script>var x = \"<!--\"; </script> var y = \"-->\"; alert(x + y);</script>\nNote: script and style can be the names of XML namespaces - then they are not treated like usual script or style elements. Example: <script:a>Hello</script:a>.\nNote: whitespaces are possible after closing tag name: </script > but not before: < / script>.Other tags or tag-like elements are skipped without inner content. Example: <a>.</a>\nNote: it is expected that this HTML is illegal: <a test=\">\"></a>\nNote: it also skips something like tags: <>, <!>, etc.\nNote: tag without end is skipped to the end of input: <hello   HTML and XML entities are not decoded. They must be processed by separate function.Whitespaces in the text are collapsed or inserted by specific rules.Whitespaces at the beginning and at the end are removed.Consecutive whitespaces are collapsed.But if the text is separated by other elements and there is no whitespace, it is inserted.It may cause unnatural examples: Hello<b>world</b>, Hello<!-- -->world - there is no whitespace in HTML, but the function inserts it. Also consider: Hello<p>world</p>, Hello<br>world. This behavior is reasonable for data analysis, e.g. to convert HTML to a bag of words.Also note that correct handling of whitespaces requires the support of <pre></pre> and CSS display and white-space properties.", "Syntax", "extractTextFromHTML(x)", "Arguments", "x \u2014 input text. String.", "Returned value", "Extracted text. String."], "Examples": ["SELECT extractTextFromHTML(' <p> A text <i>with</i><b>tags</b>. <!-- comments --> </p> ');SELECT extractTextFromHTML('<![CDATA[The content within <b>CDATA</b>]]> <script>alert(\"Script\");</script>');SELECT extractTextFromHTML(html) FROM url('http://www.donothingfor2minutes.com/', RawBLOB, 'html String');"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["ascii"], "Feature": ["ascii(s)"], "Description": ["ascii", "Returns the ASCII code point (as Int32) of the first character of string s.", "If s is empty, the result is 0. If the first character is not an ASCII character or not part of the Latin-1 supplement range of UTF-16, the result is undefined.", "Syntax", "ascii(s)"], "Examples": ["ascii(s)"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["soundex"], "Feature": ["soundex(val)"], "Description": ["soundex", "Returns the Soundex code of a string.", "Syntax", "soundex(val)", "Arguments", "val \u2014 Input value. String", "Returned value", "The Soundex code of the input value. String"], "Examples": ["select soundex('aksel');"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["punycodeEncode"], "Feature": ["punycodeEncode(val)"], "Description": ["punycodeEncode", "Returns the Punycode representation of a string.\nThe string must be UTF8-encoded, otherwise the behavior is undefined.", "Syntax", "punycodeEncode(val)", "Arguments", "val \u2014 Input value. String", "Returned value", "A Punycode representation of the input value. String"], "Examples": ["select punycodeEncode('M\u00fcnchen');"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["punycodeDecode"], "Feature": ["punycodeEncode(val)"], "Description": ["punycodeDecode", "Returns the UTF8-encoded plaintext of a Punycode-encoded string.\nIf no valid Punycode-encoded string is given, an exception is thrown.", "Syntax", "punycodeEncode(val)", "Arguments", "val \u2014 Punycode-encoded string. String", "Returned value", "The plaintext of the input value. String"], "Examples": ["select punycodeDecode('Mnchen-3ya');"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["tryPunycodeDecode"], "Feature": ["tryPunycodeDecode"], "Description": ["tryPunycodeDecode", "Like punycodeDecode but returns an empty string if no valid Punycode-encoded string is given."], "Examples": [], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["idnaEncode"], "Feature": ["idnaEncode(val)"], "Description": ["idnaEncode", "Returns the ASCII representation (ToASCII algorithm) of a domain name according to the Internationalized Domain Names in Applications (IDNA) mechanism.\nThe input string must be UTF-encoded and translatable to an ASCII string, otherwise an exception is thrown.\nNote: No percent decoding or trimming of tabs, spaces or control characters is performed.", "Syntax", "idnaEncode(val)", "Arguments", "val \u2014 Input value. String", "Returned value", "A ASCII representation according to the IDNA mechanism of the input value. String"], "Examples": ["select idnaEncode('stra\u00dfe.m\u00fcnchen.de');"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["tryIdnaEncode"], "Feature": ["tryIdnaEncode"], "Description": ["tryIdnaEncode", "Like idnaEncode but returns an empty string in case of an error instead of throwing an exception."], "Examples": [], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["idnaDecode"], "Feature": ["idnaDecode(val)"], "Description": ["idnaDecode", "Returns the Unicode (UTF-8) representation (ToUnicode algorithm) of a domain name according to the Internationalized Domain Names in Applications (IDNA) mechanism.\nIn case of an error (e.g. because the input is invalid), the input string is returned.\nNote that repeated application of idnaEncode() and idnaDecode() does not necessarily return the original string due to case normalization.", "Syntax", "idnaDecode(val)", "Arguments", "val \u2014 Input value. String", "Returned value", "A Unicode (UTF-8) representation according to the IDNA mechanism of the input value. String"], "Examples": ["select idnaDecode('xn--strae-oqa.xn--mnchen-3ya.de');"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["byteHammingDistance"], "Feature": ["byteHammingDistance(string1, string2)"], "Description": ["byteHammingDistance", "Calculates the hamming distance between two byte strings.", "Syntax", "byteHammingDistance(string1, string2)"], "Examples": ["SELECT byteHammingDistance('karolin', 'kathrin');"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["stringJaccardIndex"], "Feature": ["stringJaccardIndex(string1, string2)"], "Description": ["stringJaccardIndex", "Calculates the Jaccard similarity index between two byte strings.", "Syntax", "stringJaccardIndex(string1, string2)"], "Examples": ["SELECT stringJaccardIndex('clickhouse', 'mouse');"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["stringJaccardIndexUTF8"], "Feature": ["stringJaccardIndexUTF8"], "Description": ["stringJaccardIndexUTF8", "Like stringJaccardIndex but for UTF8-encoded strings."], "Examples": [], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["editDistance"], "Feature": ["editDistance(string1, string2)"], "Description": ["editDistance", "Calculates the edit distance between two byte strings.", "Syntax", "editDistance(string1, string2)"], "Examples": ["SELECT editDistance('clickhouse', 'mouse');"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["editDistanceUTF8"], "Feature": ["editDistanceUTF8(string1, string2)"], "Description": ["editDistanceUTF8", "Calculates the edit distance between two UTF8 strings.", "Syntax", "editDistanceUTF8(string1, string2)"], "Examples": ["SELECT editDistanceUTF8('\u6211\u662f\u8c01', '\u6211\u662f\u6211');"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["damerauLevenshteinDistance"], "Feature": ["damerauLevenshteinDistance(string1, string2)"], "Description": ["damerauLevenshteinDistance", "Calculates the Damerau-Levenshtein distance between two byte strings.", "Syntax", "damerauLevenshteinDistance(string1, string2)"], "Examples": ["SELECT damerauLevenshteinDistance('clickhouse', 'mouse');"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["jaroSimilarity"], "Feature": ["jaroSimilarity(string1, string2)"], "Description": ["jaroSimilarity", "Calculates the Jaro similarity between two byte strings.", "Syntax", "jaroSimilarity(string1, string2)"], "Examples": ["SELECT jaroSimilarity('clickhouse', 'click');"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["jaroWinklerSimilarity"], "Feature": ["jaroWinklerSimilarity(string1, string2)"], "Description": ["jaroWinklerSimilarity", "Calculates the Jaro-Winkler similarity between two byte strings.", "Syntax", "jaroWinklerSimilarity(string1, string2)"], "Examples": ["SELECT jaroWinklerSimilarity('clickhouse', 'click');"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["initcap"], "Feature": ["initcap(val)"], "Description": ["initcap", "Convert the first letter of each word to upper case and the rest to lower case. Words are sequences of alphanumeric characters separated by non-alphanumeric characters.", "NoteBecause initCap converts only the first letter of each word to upper case you may observe unexpected behaviour for words containing apostrophes or capital letters. For example:SELECT initCap('mother''s daughter'), initCap('joe McAdam');will return\u250c\u2500initCap('mother\\'s daughter')\u2500\u252c\u2500initCap('joe McAdam')\u2500\u2510\u2502 Mother'S Daughter             \u2502 Joe Mcadam            \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518This is a known behaviour, with no plans currently to fix it.", "Syntax", "initcap(val)", "Arguments", "val \u2014 Input value. String.", "Returned value", "val with the first letter of each word converted to upper case. String."], "Examples": ["SELECT initcap('building for fast');"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["initcapUTF8"], "Feature": ["initcapUTF8(val)"], "Description": ["initcapUTF8", "Like initcap, initcapUTF8 converts the first letter of each word to upper case and the rest to lower case. Assumes that the string contains valid UTF-8 encoded text.\nIf this assumption is violated, no exception is thrown and the result is undefined.", "NoteThis function does not detect the language, e.g. for Turkish the result might not be exactly correct (i/\u0130 vs. i/I).\nIf the length of the UTF-8 byte sequence is different for upper and lower case of a code point, the result may be incorrect for this code point.", "Syntax", "initcapUTF8(val)", "Arguments", "val \u2014 Input value. String.", "Returned value", "val with the first letter of each word converted to upper case. String."], "Examples": ["SELECT initcapUTF8('\u043d\u0435 \u0442\u043e\u0440\u043c\u043e\u0437\u0438\u0442');"], "Category": ["Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-functions"], "Title": ["firstLine"], "Feature": ["firstLine(val)"], "Description": ["firstLine", "Returns the first line from a multi-line string.", "Syntax", "firstLine(val)", "Arguments", "val \u2014 Input value. String", "Returned value", "The first line of the input value or the whole value if there is no line\nseparators. String"], "Examples": ["select firstLine('foo\\nbar\\nbaz');"], "Category": ["Strings Functions"]}
