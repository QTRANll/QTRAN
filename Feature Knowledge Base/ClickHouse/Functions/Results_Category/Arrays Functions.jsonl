{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayFirstIndex(func, arr1, ...)"], "Feature": ["arrayFirstIndex(func, arr1, ...)"], "Description": ["arrayFirstIndex(func, arr1, ...)", "Returns the index of the first element in the arr1 array for which func(arr1[i], ..., arrN[i]) returns something other than 0.", "Note that the arrayFirstIndex is a higher-order function. You must pass a lambda function to it as the first argument, and it can\u2019t be omitted."], "Examples": [], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayLastIndex(func, arr1, ...)"], "Feature": ["arrayLastIndex(func, arr1, ...)"], "Description": ["arrayLastIndex(func, arr1, ...)", "Returns the index of the last element in the arr1 array for which func(arr1[i], ..., arrN[i]) returns something other than 0.", "Note that the arrayLastIndex is a higher-order function. You must pass a lambda function to it as the first argument, and it can\u2019t be omitted."], "Examples": [], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayMin"], "Feature": ["arrayMin([func,] arr)"], "Description": ["arrayMin", "Returns the minimum of elements in the source array.", "If the func function is specified, returns the mininum of elements converted by this function.", "Note that the arrayMin is a higher-order function. You can pass a lambda function to it as the first argument.", "Syntax", "arrayMin([func,] arr)", "Arguments", "func \u2014 Function. Expression.arr \u2014 Array. Array.", "Returned value", "The minimum of function values (or the array minimum).", "NoteIf func is specified, then the return type matches the return value type of func, otherwise it matches the type of the array elements."], "Examples": ["SELECT arrayMin([1, 2, 4]) AS res;", "SELECT arrayMin(x -> (-x), [1, 2, 4]) AS res;"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayMax"], "Feature": ["arrayMax([func,] arr)"], "Description": ["arrayMax", "Returns the maximum of elements in the source array.", "If the func function is specified, returns the maximum of elements converted by this function.", "Note that the arrayMax is a higher-order function. You can pass a lambda function to it as the first argument.", "Syntax", "arrayMax([func,] arr)", "Arguments", "func \u2014 Function. Expression.arr \u2014 Array. Array.", "Returned value", "The maximum of function values (or the array maximum).", "Noteif func is specified then the return type matches the return value type of func, otherwise it matches the type of the array elements."], "Examples": ["SELECT arrayMax([1, 2, 4]) AS res;", "SELECT arrayMax(x -> (-x), [1, 2, 4]) AS res;"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arraySum"], "Feature": ["arraySum([func,] arr)"], "Description": ["arraySum", "Returns the sum of elements in the source array.", "If the func function is specified, returns the sum of elements converted by this function.", "Note that the arraySum is a higher-order function. You can pass a lambda function to it as the first argument.", "Syntax", "arraySum([func,] arr)", "Arguments", "func \u2014 Function. Expression.arr \u2014 Array. Array.", "Returned value", "The sum of the function values (or the array sum).", "NoteReturn type:For decimal numbers in the source array (or for converted values, if func is specified) \u2014 Decimal128.For floating point numbers \u2014 Float64.For numeric unsigned \u2014 UInt64. For numeric signed \u2014 Int64."], "Examples": ["SELECT arraySum([2, 3]) AS res;", "SELECT arraySum(x -> x*x, [2, 3]) AS res;"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayAvg"], "Feature": ["arrayAvg([func,] arr)"], "Description": ["arrayAvg", "Returns the average of elements in the source array.", "If the func function is specified, returns the average of elements converted by this function.", "Note that the arrayAvg is a higher-order function. You can pass a lambda function to it as the first argument.", "Syntax", "arrayAvg([func,] arr)", "Arguments", "func \u2014 Function. Expression.arr \u2014 Array. Array.", "Returned value", "The average of function values (or the array average). Float64."], "Examples": ["SELECT arrayAvg([1, 2, 4]) AS res;", "SELECT arrayAvg(x -> (x * x), [2, 4]) AS res;"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayCumSum([func,] arr1, ...)"], "Feature": ["arrayCumSum(arr)"], "Description": ["arrayCumSum([func,] arr1, ...)", "Returns an array of the partial (running) sums of the elements in the source array arr1. If func is specified, then the sum is computed from applying func to arr1, arr2, ..., arrN, i.e. func(arr1[i], ..., arrN[i]).", "Syntax", "arrayCumSum(arr)", "Arguments", "arr \u2014 Array of numeric values.", "Returned value", "Returns an array of the partial sums of the elements in the source array. UInt*, Int*, Float*."], "Examples": ["SELECT arrayCumSum([1, 1, 1, 1]) AS res"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayCumSumNonNegative([func,] arr1, ...)"], "Feature": ["arrayCumSumNonNegative(arr)"], "Description": ["arrayCumSumNonNegative([func,] arr1, ...)", "Same as arrayCumSum, returns an array of the partial (running) sums of the elements in the source array. If func is specified, then the sum is computed from applying func to arr1, arr2, ..., arrN, i.e. func(arr1[i], ..., arrN[i]). Unlike arrayCumSum, if the current running sum is smaller than 0, it is replaced by 0.", "Syntax", "arrayCumSumNonNegative(arr)", "Arguments", "arr \u2014 Array of numeric values.", "Returned value", "Returns an array of non-negative partial sums of elements in the source array. UInt*, Int*, Float*.", "SELECT arrayCumSumNonNegative([1, 1, -4, 1]) AS res", "\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 [1,2,0,1] \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "Note that the arraySumNonNegative is a higher-order function. You can pass a lambda function to it as the first argument."], "Examples": ["arrayCumSumNonNegative(arr)", "SELECT arrayCumSumNonNegative([1, 1, -4, 1]) AS res"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayProduct"], "Feature": ["arrayProduct(arr)"], "Description": ["arrayProduct", "Multiplies elements of an array.", "Syntax", "arrayProduct(arr)", "Arguments", "arr \u2014 Array of numeric values.", "Returned value", "A product of array's elements. Float64."], "Examples": ["SELECT arrayProduct([1,2,3,4,5,6]) as res;", "SELECT arrayProduct([toDecimal64(1,8), toDecimal64(2,8), toDecimal64(3,8)]) as res, toTypeName(res);"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayRotateLeft"], "Feature": ["arrayRotateLeft(arr, n)"], "Description": ["arrayRotateLeft", "Rotates an array to the left by the specified number of elements.\nIf the number of elements is negative, the array is rotated to the right.", "Syntax", "arrayRotateLeft(arr, n)", "Arguments", "arr \u2014 Array.n \u2014 Number of elements to rotate.", "Returned value", "An array rotated to the left by the specified number of elements. Array."], "Examples": ["SELECT arrayRotateLeft([1,2,3,4,5,6], 2) as res;", "SELECT arrayRotateLeft([1,2,3,4,5,6], -2) as res;", "SELECT arrayRotateLeft(['a','b','c','d','e'], 3) as res;"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayRotateRight"], "Feature": ["arrayRotateRight(arr, n)"], "Description": ["arrayRotateRight", "Rotates an array to the right by the specified number of elements.\nIf the number of elements is negative, the array is rotated to the left.", "Syntax", "arrayRotateRight(arr, n)", "Arguments", "arr \u2014 Array.n \u2014 Number of elements to rotate.", "Returned value", "An array rotated to the right by the specified number of elements. Array."], "Examples": ["SELECT arrayRotateRight([1,2,3,4,5,6], 2) as res;", "SELECT arrayRotateRight([1,2,3,4,5,6], -2) as res;", "SELECT arrayRotateRight(['a','b','c','d','e'], 3) as res;"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayShiftLeft"], "Feature": ["arrayShiftLeft(arr, n[, default])"], "Description": ["arrayShiftLeft", "Shifts an array to the left by the specified number of elements.\nNew elements are filled with the provided argument or the default value of the array element type.\nIf the number of elements is negative, the array is shifted to the right.", "Syntax", "arrayShiftLeft(arr, n[, default])", "Arguments", "arr \u2014 Array.n \u2014 Number of elements to shift.default \u2014 Optional. Default value for new elements.", "Returned value", "An array shifted to the left by the specified number of elements. Array."], "Examples": ["SELECT arrayShiftLeft([1,2,3,4,5,6], 2) as res;", "SELECT arrayShiftLeft([1,2,3,4,5,6], -2) as res;", "SELECT arrayShiftLeft([1,2,3,4,5,6], 2, 42) as res;", "SELECT arrayShiftLeft(['a','b','c','d','e','f'], 3, 'foo') as res;", "SELECT arrayShiftLeft([1,2,3,4,5,6] :: Array(UInt16), 2, 4242) as res;"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayShiftRight"], "Feature": ["arrayShiftRight(arr, n[, default])"], "Description": ["arrayShiftRight", "Shifts an array to the right by the specified number of elements.\nNew elements are filled with the provided argument or the default value of the array element type.\nIf the number of elements is negative, the array is shifted to the left.", "Syntax", "arrayShiftRight(arr, n[, default])", "Arguments", "arr \u2014 Array.n \u2014 Number of elements to shift.default \u2014 Optional. Default value for new elements.", "Returned value", "An array shifted to the right by the specified number of elements. Array."], "Examples": ["SELECT arrayShiftRight([1,2,3,4,5,6], 2) as res;", "SELECT arrayShiftRight([1,2,3,4,5,6], -2) as res;", "SELECT arrayShiftRight([1,2,3,4,5,6], 2, 42) as res;", "SELECT arrayShiftRight(['a','b','c','d','e','f'], 3, 'foo') as res;", "SELECT arrayShiftRight([1,2,3,4,5,6] :: Array(UInt16), 2, 4242) as res;"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayRandomSample"], "Feature": ["arrayRandomSample(arr, samples)"], "Description": ["arrayRandomSample", "Function arrayRandomSample returns a subset with samples-many random elements of an input array. If samples exceeds the size of the input array, the sample size is limited to the size of the array, i.e. all array elements are returned but their order is not guaranteed. The function can handle both flat arrays and nested arrays.", "Syntax", "arrayRandomSample(arr, samples)", "Arguments", "arr \u2014 The input array from which to sample elements. (Array(T))samples \u2014 The number of elements to include in the random sample (UInt*)", "Returned Value", "An array containing a random sample of elements from the input array. Array."], "Examples": ["SELECT arrayRandomSample(['apple', 'banana', 'cherry', 'date'], 2) as res;", "SELECT arrayRandomSample([[1, 2], [3, 4], [5, 6]], 2) as res;", "SELECT arrayRandomSample([1, 2, 3], 5) as res;"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["Distance functions"], "Feature": ["Distance functions"], "Description": ["Distance functions", "All supported functions are described in distance functions documentation."], "Examples": [], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["empty"], "Feature": ["empty([x])"], "Description": ["empty", "Checks whether the input array is empty.", "Syntax", "empty([x])", "An array is considered empty if it does not contain any elements.", "NoteCan be optimized by enabling the optimize_functions_to_subcolumns setting. With optimize_functions_to_subcolumns = 1 the function reads only size0 subcolumn instead of reading and processing the whole array column. The query SELECT empty(arr) FROM TABLE; transforms to SELECT arr.size0 = 0 FROM TABLE;.", "The function also works for strings or UUID.", "Arguments", "[x] \u2014 Input array. Array.", "Returned value", "Returns 1 for an empty array or 0 for a non-empty array. UInt8."], "Examples": ["SELECT empty([]);"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["notEmpty"], "Feature": ["notEmpty([x])"], "Description": ["notEmpty", "Checks whether the input array is non-empty.", "Syntax", "notEmpty([x])", "An array is considered non-empty if it contains at least one element.", "NoteCan be optimized by enabling the optimize_functions_to_subcolumns setting. With optimize_functions_to_subcolumns = 1 the function reads only size0 subcolumn instead of reading and processing the whole array column. The query SELECT notEmpty(arr) FROM table transforms to SELECT arr.size0 != 0 FROM TABLE.", "The function also works for strings or UUID.", "Arguments", "[x] \u2014 Input array. Array.", "Returned value", "Returns 1 for a non-empty array or 0 for an empty array. UInt8."], "Examples": ["SELECT notEmpty([1,2]);"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["length"], "Feature": ["length"], "Description": ["length", "Returns the number of items in the array.\nThe result type is UInt64.\nThe function also works for strings.", "Can be optimized by enabling the optimize_functions_to_subcolumns setting. With optimize_functions_to_subcolumns = 1 the function reads only size0 subcolumn instead of reading and processing the whole array column. The query SELECT length(arr) FROM table transforms to SELECT arr.size0 FROM TABLE.", "Alias: OCTET_LENGTH"], "Examples": [], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["emptyArrayUInt8"], "Feature": ["emptyArrayUInt8()"], "Description": ["emptyArrayUInt8", "Returns an empty UInt8 array.", "Syntax", "emptyArrayUInt8()", "Arguments", "None.", "Returned value", "An empty array."], "Examples": ["SELECT emptyArrayUInt8();"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["emptyArrayUInt16"], "Feature": ["emptyArrayUInt16()"], "Description": ["emptyArrayUInt16", "Returns an empty UInt16 array.", "Syntax", "emptyArrayUInt16()", "Arguments", "None.", "Returned value", "An empty array."], "Examples": ["SELECT emptyArrayUInt16();"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["emptyArrayUInt32"], "Feature": ["emptyArrayUInt32()"], "Description": ["emptyArrayUInt32", "Returns an empty UInt32 array.", "Syntax", "emptyArrayUInt32()", "Arguments", "None.", "Returned value", "An empty array."], "Examples": ["SELECT emptyArrayUInt32();"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["emptyArrayUInt64"], "Feature": ["emptyArrayUInt64()"], "Description": ["emptyArrayUInt64", "Returns an empty UInt64 array.", "Syntax", "emptyArrayUInt64()", "Arguments", "None.", "Returned value", "An empty array."], "Examples": ["SELECT emptyArrayUInt64();"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["emptyArrayInt8"], "Feature": ["emptyArrayInt8()"], "Description": ["emptyArrayInt8", "Returns an empty Int8 array.", "Syntax", "emptyArrayInt8()", "Arguments", "None.", "Returned value", "An empty array."], "Examples": ["SELECT emptyArrayInt8();"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["emptyArrayInt16"], "Feature": ["emptyArrayInt16()"], "Description": ["emptyArrayInt16", "Returns an empty Int16 array.", "Syntax", "emptyArrayInt16()", "Arguments", "None.", "Returned value", "An empty array."], "Examples": ["SELECT emptyArrayInt16();"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["emptyArrayInt32"], "Feature": ["emptyArrayInt32()"], "Description": ["emptyArrayInt32", "Returns an empty Int32 array.", "Syntax", "emptyArrayInt32()", "Arguments", "None.", "Returned value", "An empty array."], "Examples": ["SELECT emptyArrayInt32();"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["emptyArrayInt64"], "Feature": ["emptyArrayInt64()"], "Description": ["emptyArrayInt64", "Returns an empty Int64 array.", "Syntax", "emptyArrayInt64()", "Arguments", "None.", "Returned value", "An empty array."], "Examples": ["SELECT emptyArrayInt64();"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["emptyArrayFloat32"], "Feature": ["emptyArrayFloat32()"], "Description": ["emptyArrayFloat32", "Returns an empty Float32 array.", "Syntax", "emptyArrayFloat32()", "Arguments", "None.", "Returned value", "An empty array."], "Examples": ["SELECT emptyArrayFloat32();"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["emptyArrayFloat64"], "Feature": ["emptyArrayFloat64()"], "Description": ["emptyArrayFloat64", "Returns an empty Float64 array.", "Syntax", "emptyArrayFloat64()", "Arguments", "None.", "Returned value", "An empty array."], "Examples": ["SELECT emptyArrayFloat64();"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["emptyArrayDate"], "Feature": ["emptyArrayDate()"], "Description": ["emptyArrayDate", "Returns an empty Date array.", "Syntax", "emptyArrayDate()", "Arguments", "None.", "Returned value", "An empty array."], "Examples": ["SELECT emptyArrayDate();"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["emptyArrayDateTime"], "Feature": ["[]"], "Description": ["emptyArrayDateTime", "Returns an empty DateTime array.", "Syntax", "[]", "Arguments", "None.", "Returned value", "An empty array."], "Examples": ["SELECT emptyArrayDateTime();"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["emptyArrayString"], "Feature": ["emptyArrayString()"], "Description": ["emptyArrayString", "Returns an empty String array.", "Syntax", "emptyArrayString()", "Arguments", "None.", "Returned value", "An empty array."], "Examples": ["SELECT emptyArrayString();"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["emptyArrayToSingle"], "Feature": ["emptyArrayToSingle"], "Description": ["emptyArrayToSingle", "Accepts an empty array and returns a one-element array that is equal to the default value."], "Examples": [], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["range(end), range([start, ] end [, step])"], "Feature": ["range([start, ] end [, step])"], "Description": ["range(end), range([start, ] end [, step])", "Returns an array of numbers from start to end - 1 by step. The supported types are UInt8, UInt16, UInt32, UInt64, Int8, Int16, Int32, Int64.", "Syntax", "range([start, ] end [, step])", "Arguments", "start \u2014 The first element of the array. Optional, required if step is used. Default value: 0.end \u2014 The number before which the array is constructed. Required.step \u2014 Determines the incremental step between each element in the array. Optional. Default value: 1.", "Returned value", "Array of numbers from start to end - 1 by step.", "Implementation details", "All arguments start, end, step must be below data types: UInt8, UInt16, UInt32, UInt64,Int8, Int16, Int32, Int64, as well as elements of the returned array, which's type is a super type of all arguments.An exception is thrown if query results in arrays with a total length of more than number of elements specified by the function_range_max_elements_in_block setting.Returns Null if any argument has Nullable(Nothing) type. An exception is thrown if any argument has Null value (Nullable(T) type)."], "Examples": ["SELECT range(5), range(1, 5), range(1, 5, 2), range(-1, 5, 2);"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["array(x1, ...), operator [x1, ...]"], "Feature": ["array(x1, ...), operator [x1, ...]"], "Description": ["array(x1, ...), operator [x1, ...]", "Creates an array from the function arguments.\nThe arguments must be constants and have types that have the smallest common type. At least one argument must be passed, because otherwise it isn\u2019t clear which type of array to create. That is, you can\u2019t use this function to create an empty array (to do that, use the \u2018emptyArray*\u2019 function described above).\nReturns an \u2018Array(T)\u2019 type result, where \u2018T\u2019 is the smallest common type out of the passed arguments."], "Examples": [], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayWithConstant(length, elem)"], "Feature": ["arrayWithConstant(length, elem)"], "Description": ["arrayWithConstant(length, elem)", "Creates an array of length length filled with the constant elem."], "Examples": [], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayConcat"], "Feature": ["arrayConcat(arrays)"], "Description": ["arrayConcat", "Combines arrays passed as arguments.", "arrayConcat(arrays)", "Arguments", "arrays \u2013 Arbitrary number of arguments of Array type."], "Examples": ["SELECT arrayConcat([1, 2], [3, 4], [5, 6]) AS res"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayElement(arr, n), operator arr[n]"], "Feature": ["arrayElement(arr, n), operator arr[n]"], "Description": ["arrayElement(arr, n), operator arr[n]", "Get the element with the index n from the array arr. n must be any integer type.\nIndexes in an array begin from one.", "Negative indexes are supported. In this case, it selects the corresponding element numbered from the end. For example, arr[-1] is the last item in the array.", "If the index falls outside of the bounds of an array, it returns some default value (0 for numbers, an empty string for strings, etc.), except for the case with a non-constant array and a constant index 0 (in this case there will be an error Array indices are 1-based)."], "Examples": [], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["has(arr, elem)"], "Feature": ["has(arr, elem)"], "Description": ["has(arr, elem)", "Checks whether the \u2018arr\u2019 array has the \u2018elem\u2019 element.\nReturns 0 if the element is not in the array, or 1 if it is.", "NULL is processed as a value.", "SELECT has([1, 2, NULL], NULL)", "\u250c\u2500has([1, 2, NULL], NULL)\u2500\u2510\u2502                       1 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Examples": ["SELECT has([1, 2, NULL], NULL)"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayElementOrNull(arr, n)"], "Feature": ["arrayElementOrNull(arr, n)"], "Description": ["arrayElementOrNull(arr, n)", "Get the element with the index nfrom the array arr. n must be any integer type.\nIndexes in an array begin from one.", "Negative indexes are supported. In this case, it selects the corresponding element numbered from the end. For example, arr[-1] is the last item in the array.", "If the index falls outside of the bounds of an array, it returns NULL instead of a default value."], "Examples": ["SELECT arrayElementOrNull([1, 2, 3], 2), arrayElementOrNull([1, 2, 3], 4)"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["hasAll"], "Feature": ["hasAll(set, subset)"], "Description": ["hasAll", "Checks whether one array is a subset of another.", "hasAll(set, subset)", "Arguments", "set \u2013 Array of any type with a set of elements.subset \u2013 Array of any type that shares a common supertype with set containing elements that should be tested to be a subset of set.", "Return values", "1, if set contains all of the elements from subset.0, otherwise.", "Raises an exception NO_COMMON_TYPE if the set and subset elements do not share a common supertype.", "Peculiar properties", "An empty array is a subset of any array.Null processed as a value.Order of values in both of arrays does not matter."], "Examples": [], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["hasAny"], "Feature": ["hasAny(array1, array2)"], "Description": ["hasAny", "Checks whether two arrays have intersection by some elements.", "hasAny(array1, array2)", "Arguments", "array1 \u2013 Array of any type with a set of elements.array2 \u2013 Array of any type that shares a common supertype with array1.", "Return values", "1, if array1 and array2 have one similar element at least.0, otherwise.", "Raises an exception NO_COMMON_TYPE if the array1 and array2 elements do not share a common supertype.", "Peculiar properties", "Null processed as a value.Order of values in both of arrays does not matter."], "Examples": [], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["hasSubstr"], "Feature": ["hasSubstr(array1, array2)"], "Description": ["hasSubstr", "Checks whether all the elements of array2 appear in array1 in the same exact order. Therefore, the function will return 1, if and only if array1 = prefix + array2 + suffix.", "hasSubstr(array1, array2)", "In other words, the functions will check whether all the elements of array2 are contained in array1 like\nthe hasAll function. In addition, it will check that the elements are observed in the same order in both array1 and array2.", "For Example:", "hasSubstr([1,2,3,4], [2,3]) returns 1. However, hasSubstr([1,2,3,4], [3,2]) will return 0.hasSubstr([1,2,3,4], [1,2,3]) returns 1. However, hasSubstr([1,2,3,4], [1,2,4]) will return 0.", "Arguments", "array1 \u2013 Array of any type with a set of elements.array2 \u2013 Array of any type with a set of elements.", "Return values", "1, if array1 contains array2.0, otherwise.", "Raises an exception NO_COMMON_TYPE if the array1 and array2 elements do not share a common supertype.", "Peculiar properties", "The function will return 1 if array2 is empty.Null processed as a value. In other words hasSubstr([1, 2, NULL, 3, 4], [2,3]) will return 0. However, hasSubstr([1, 2, NULL, 3, 4], [2,NULL,3]) will return 1Order of values in both of arrays does matter."], "Examples": [], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["indexOf(arr, x)"], "Feature": ["indexOf(arr, x)"], "Description": ["indexOf(arr, x)", "Returns the index of the first \u2018x\u2019 element (starting from 1) if it is in the array, or 0 if it is not."], "Examples": ["SELECT indexOf([1, 3, NULL, NULL], NULL)"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayCount([func,] arr1, ...)"], "Feature": ["arrayCount([func,] arr1, ...)"], "Description": ["arrayCount([func,] arr1, ...)", "Returns the number of elements for which func(arr1[i], ..., arrN[i]) returns something other than 0. If func is not specified, it returns the number of non-zero elements in the array.", "Note that the arrayCount is a higher-order function. You can pass a lambda function to it as the first argument."], "Examples": [], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayDotProduct"], "Feature": ["arrayDotProduct(vector1, vector2)"], "Description": ["arrayDotProduct", "Returns the dot product of two arrays.", "Syntax", "arrayDotProduct(vector1, vector2)", "Alias: scalarProduct, dotProduct", "Parameters", "vector1: First vector. Array or Tuple of numeric values.vector2: Second vector. Array or Tuple of numeric values.", "NoteThe sizes of the two vectors must be equal. Arrays and Tuples may also contain mixed element types.", "Returned value", "The dot product of the two vectors. Numeric.", "NoteThe return type is determined by the type of the arguments. If Arrays or Tuples contain mixed element types then the result type is the supertype."], "Examples": ["SELECT arrayDotProduct([1, 2, 3], [4, 5, 6]) AS res, toTypeName(res);", "SELECT dotProduct((1::UInt16, 2::UInt8, 3::Float32),(4::Int16, 5::Float32, 6::UInt8)) AS res, toTypeName(res);"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["countEqual(arr, x)"], "Feature": ["countEqual(arr, x)"], "Description": ["countEqual(arr, x)", "Returns the number of elements in the array equal to x. Equivalent to arrayCount (elem -> elem = x, arr).", "NULL elements are handled as separate values."], "Examples": ["SELECT countEqual([1, 2, NULL, NULL], NULL)"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayEnumerate(arr)"], "Feature": ["arrayEnumerate(arr)"], "Description": ["arrayEnumerate(arr)", "Returns the array [1, 2, 3, ..., length (arr) ]", "This function is normally used with ARRAY JOIN. It allows counting something just once for each array after applying ARRAY JOIN. Example:", "SELECT    count() AS Reaches,    countIf(num = 1) AS HitsFROM test.hitsARRAY JOIN    GoalsReached,    arrayEnumerate(GoalsReached) AS numWHERE CounterID = 160656LIMIT 10", "\u250c\u2500Reaches\u2500\u252c\u2500\u2500Hits\u2500\u2510\u2502   95606 \u2502 31406 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "In this example, Reaches is the number of conversions (the strings received after applying ARRAY JOIN), and Hits is the number of pageviews (strings before ARRAY JOIN). In this particular case, you can get the same result in an easier way:", "SELECT    sum(length(GoalsReached)) AS Reaches,    count() AS HitsFROM test.hitsWHERE (CounterID = 160656) AND notEmpty(GoalsReached)", "\u250c\u2500Reaches\u2500\u252c\u2500\u2500Hits\u2500\u2510\u2502   95606 \u2502 31406 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "This function can also be used in higher-order functions. For example, you can use it to get array indexes for elements that match a condition."], "Examples": ["SELECT    count() AS Reaches,    countIf(num = 1) AS HitsFROM test.hitsARRAY JOIN    GoalsReached,    arrayEnumerate(GoalsReached) AS numWHERE CounterID = 160656LIMIT 10", "SELECT    sum(length(GoalsReached)) AS Reaches,    count() AS HitsFROM test.hitsWHERE (CounterID = 160656) AND notEmpty(GoalsReached)"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayEnumerateUniq(arr, ...)"], "Feature": ["arrayEnumerateUniq(arr, ...)"], "Description": ["arrayEnumerateUniq(arr, ...)", "Returns an array the same size as the source array, indicating for each element what its position is among elements with the same value.\nFor example: arrayEnumerateUniq([10, 20, 10, 30]) = [1, 1, 2, 1].", "This function is useful when using ARRAY JOIN and aggregation of array elements.\nExample:", "SELECT    Goals.ID AS GoalID,    sum(Sign) AS Reaches,    sumIf(Sign, num = 1) AS VisitsFROM test.visitsARRAY JOIN    Goals,    arrayEnumerateUniq(Goals.ID) AS numWHERE CounterID = 160656GROUP BY GoalIDORDER BY Reaches DESCLIMIT 10", "\u250c\u2500\u2500GoalID\u2500\u252c\u2500Reaches\u2500\u252c\u2500Visits\u2500\u2510\u2502   53225 \u2502    3214 \u2502   1097 \u2502\u2502 2825062 \u2502    3188 \u2502   1097 \u2502\u2502   56600 \u2502    2803 \u2502    488 \u2502\u2502 1989037 \u2502    2401 \u2502    365 \u2502\u2502 2830064 \u2502    2396 \u2502    910 \u2502\u2502 1113562 \u2502    2372 \u2502    373 \u2502\u2502 3270895 \u2502    2262 \u2502    812 \u2502\u2502 1084657 \u2502    2262 \u2502    345 \u2502\u2502   56599 \u2502    2260 \u2502    799 \u2502\u2502 3271094 \u2502    2256 \u2502    812 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "In this example, each goal ID has a calculation of the number of conversions (each element in the Goals nested data structure is a goal that was reached, which we refer to as a conversion) and the number of sessions. Without ARRAY JOIN, we would have counted the number of sessions as sum(Sign). But in this particular case, the rows were multiplied by the nested Goals structure, so in order to count each session one time after this, we apply a condition to the value of the arrayEnumerateUniq(Goals.ID) function.", "The arrayEnumerateUniq function can take multiple arrays of the same size as arguments. In this case, uniqueness is considered for tuples of elements in the same positions in all the arrays.", "SELECT arrayEnumerateUniq([1, 1, 1, 2, 2, 2], [1, 1, 2, 1, 1, 2]) AS res", "\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 [1,2,1,1,2,1] \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "This is necessary when using ARRAY JOIN with a nested data structure and further aggregation across multiple elements in this structure."], "Examples": ["SELECT    Goals.ID AS GoalID,    sum(Sign) AS Reaches,    sumIf(Sign, num = 1) AS VisitsFROM test.visitsARRAY JOIN    Goals,    arrayEnumerateUniq(Goals.ID) AS numWHERE CounterID = 160656GROUP BY GoalIDORDER BY Reaches DESCLIMIT 10", "SELECT arrayEnumerateUniq([1, 1, 1, 2, 2, 2], [1, 1, 2, 1, 1, 2]) AS res"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayEnumerateUniqRanked"], "Feature": ["arrayEnumerateUniqRanked(clear_depth, arr, max_array_depth)"], "Description": ["arrayEnumerateUniqRanked", "Returns an array the same size as the source array, indicating for each element what its position is among elements with the same value. It allows for enumeration of a multidimensional array with the ability to specify how deep to look inside the array.", "Syntax", "arrayEnumerateUniqRanked(clear_depth, arr, max_array_depth)", "Parameters", "clear_depth: Enumerate elements at the specified level separately. Positive Integer less than or equal to max_arr_depth.arr: N-dimensional array to enumerate. Array.max_array_depth: The maximum effective depth. Positive Integer less than or equal to the depth of arr."], "Examples": ["SELECT arrayEnumerateUniqRanked(1, [1,2,1], 1);", "SELECT arrayEnumerateUniqRanked(1, [[1,2,3],[2,2,1],[3]], 2);", "SELECT arrayEnumerateUniqRanked(2, [[1,2,3],[2,2,1],[3]], 2);"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayPopBack"], "Feature": ["arrayPopBack(array)"], "Description": ["arrayPopBack", "Removes the last item from the array.", "arrayPopBack(array)", "Arguments", "array \u2013 Array."], "Examples": ["SELECT arrayPopBack([1, 2, 3]) AS res;"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayPopFront"], "Feature": ["arrayPopFront(array)"], "Description": ["arrayPopFront", "Removes the first item from the array.", "arrayPopFront(array)", "Arguments", "array \u2013 Array."], "Examples": ["SELECT arrayPopFront([1, 2, 3]) AS res;"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayPushBack"], "Feature": ["arrayPushBack(array, single_value)"], "Description": ["arrayPushBack", "Adds one item to the end of the array.", "arrayPushBack(array, single_value)", "Arguments", "array \u2013 Array.single_value \u2013 A single value. Only numbers can be added to an array with numbers, and only strings can be added to an array of strings. When adding numbers, ClickHouse automatically sets the single_value type for the data type of the array. For more information about the types of data in ClickHouse, see \u201cData types\u201d. Can be NULL. The function adds a NULL element to an array, and the type of array elements converts to Nullable."], "Examples": ["SELECT arrayPushBack(['a'], 'b') AS res;"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayPushFront"], "Feature": ["arrayPushFront(array, single_value)"], "Description": ["arrayPushFront", "Adds one element to the beginning of the array.", "arrayPushFront(array, single_value)", "Arguments", "array \u2013 Array.single_value \u2013 A single value. Only numbers can be added to an array with numbers, and only strings can be added to an array of strings. When adding numbers, ClickHouse automatically sets the single_value type for the data type of the array. For more information about the types of data in ClickHouse, see \u201cData types\u201d. Can be NULL. The function adds a NULL element to an array, and the type of array elements converts to Nullable."], "Examples": ["SELECT arrayPushFront(['b'], 'a') AS res;"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayResize"], "Feature": ["arrayResize"], "Description": ["arrayResize", "Changes the length of the array.", "arrayResize(array, size[, extender])", "Arguments:", "array \u2014 Array.size \u2014 Required length of the array.If size is less than the original size of the array, the array is truncated from the right.If size is larger than the initial size of the array, the array is extended to the right with extender values or default values for the data type of the array items.extender \u2014 Value for extending an array. Can be NULL.", "Returned value:", "An array of length size.", "Examples of calls", "SELECT arrayResize([1], 3);", "\u250c\u2500arrayResize([1], 3)\u2500\u2510\u2502 [1,0,0]             \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "SELECT arrayResize([1], 3, NULL);", "\u250c\u2500arrayResize([1], 3, NULL)\u2500\u2510\u2502 [1,NULL,NULL]             \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Examples": ["arrayResize(array, size[, extender])", "SELECT arrayResize([1], 3);", "SELECT arrayResize([1], 3, NULL);"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arraySlice"], "Feature": ["arraySlice(array, offset[, length])"], "Description": ["arraySlice", "Returns a slice of the array.", "arraySlice(array, offset[, length])", "Arguments", "array \u2013 Array of data.offset \u2013 Indent from the edge of the array. A positive value indicates an offset on the left, and a negative value is an indent on the right. Numbering of the array items begins with 1.length \u2013 The length of the required slice. If you specify a negative value, the function returns an open slice [offset, array_length - length]. If you omit the value, the function returns the slice [offset, the_end_of_array]."], "Examples": ["SELECT arraySlice([1, 2, NULL, 4, 5], 2, 3) AS res;"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayShingles"], "Feature": ["arrayShingles(array, length)"], "Description": ["arrayShingles", "Generates an array of \"shingles\", i.e. consecutive sub-arrays with specified length of the input array.", "Syntax", "arrayShingles(array, length)", "Arguments", "array \u2014 Input array Array.length \u2014 The length of each shingle.", "Returned value", "An array of generated shingles. Array."], "Examples": ["SELECT arrayShingles([1,2,3,4], 3) as res;"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arraySort([func,] arr, ...)"], "Feature": ["arraySort([func,] arr, ...)"], "Description": ["arraySort([func,] arr, ...)", "Sorts the elements of the arr array in ascending order. If the func function is specified, sorting order is determined by the result of the func function applied to the elements of the array. If func accepts multiple arguments, the arraySort function is passed several arrays that the arguments of func will correspond to. Detailed examples are shown at the end of arraySort description.", "Example of integer values sorting:", "SELECT arraySort([1, 3, 3, 0]);", "\u250c\u2500arraySort([1, 3, 3, 0])\u2500\u2510\u2502 [0,1,3,3]               \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "Example of string values sorting:", "SELECT arraySort(['hello', 'world', '!']);", "\u250c\u2500arraySort(['hello', 'world', '!'])\u2500\u2510\u2502 ['!','hello','world']              \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "Consider the following sorting order for the NULL, NaN and Inf values:", "SELECT arraySort([1, nan, 2, NULL, 3, nan, -4, NULL, inf, -inf]);", "\u250c\u2500arraySort([1, nan, 2, NULL, 3, nan, -4, NULL, inf, -inf])\u2500\u2510\u2502 [-inf,-4,1,2,3,inf,nan,nan,NULL,NULL]                     \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "-Inf values are first in the array.NULL values are last in the array.NaN values are right before NULL.Inf values are right before NaN.", "Note that arraySort is a higher-order function. You can pass a lambda function to it as the first argument. In this case, sorting order is determined by the result of the lambda function applied to the elements of the array.", "Let\u2019s consider the following example:", "SELECT arraySort((x) -> -x, [1, 2, 3]) as res;", "\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2510\u2502 [3,2,1] \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "For each element of the source array, the lambda function returns the sorting key, that is, [1 \u2013> -1, 2 \u2013> -2, 3 \u2013> -3]. Since the arraySort function sorts the keys in ascending order, the result is [3, 2, 1]. Thus, the (x) \u2013> -x lambda function sets the descending order in a sorting.", "The lambda function can accept multiple arguments. In this case, you need to pass the arraySort function several arrays of identical length that the arguments of lambda function will correspond to. The resulting array will consist of elements from the first input array; elements from the next input array(s) specify the sorting keys. For example:", "SELECT arraySort((x, y) -> y, ['hello', 'world'], [2, 1]) as res;", "\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 ['world', 'hello'] \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "Here, the elements that are passed in the second array ([2, 1]) define a sorting key for the corresponding element from the source array ([\u2018hello\u2019, \u2018world\u2019]), that is, [\u2018hello\u2019 \u2013> 2, \u2018world\u2019 \u2013> 1]. Since the lambda function does not use x, actual values of the source array do not affect the order in the result. So, \u2018hello\u2019 will be the second element in the result, and \u2018world\u2019 will be the first.", "Other examples are shown below.", "SELECT arraySort((x, y) -> y, [0, 1, 2], ['c', 'b', 'a']) as res;", "\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2510\u2502 [2,1,0] \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "SELECT arraySort((x, y) -> -y, [0, 1, 2], [1, 2, 3]) as res;", "\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2510\u2502 [2,1,0] \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "NoteTo improve sorting efficiency, the Schwartzian transform is used."], "Examples": ["SELECT arraySort([1, 3, 3, 0]);", "SELECT arraySort(['hello', 'world', '!']);", "SELECT arraySort([1, nan, 2, NULL, 3, nan, -4, NULL, inf, -inf]);", "SELECT arraySort((x) -> -x, [1, 2, 3]) as res;", "SELECT arraySort((x, y) -> y, ['hello', 'world'], [2, 1]) as res;", "SELECT arraySort((x, y) -> y, [0, 1, 2], ['c', 'b', 'a']) as res;", "SELECT arraySort((x, y) -> -y, [0, 1, 2], [1, 2, 3]) as res;"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayPartialSort([func,] limit, arr, ...)"], "Feature": ["arrayPartialSort([func,] limit, arr, ...)"], "Description": ["arrayPartialSort([func,] limit, arr, ...)", "Same as arraySort with additional limit argument allowing partial sorting. Returns an array of the same size as the original array where elements in range [1..limit] are sorted in ascending order. Remaining elements (limit..N] shall contain elements in unspecified order."], "Examples": [], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayReverseSort"], "Feature": ["arrayReverseSort([func,] arr, ...)"], "Description": ["arrayReverseSort", "Sorts the elements of the arr array in descending order. If the func function is specified, arr is sorted according to the result of the func function applied to the elements of the array, and then the sorted array is reversed. If func accepts multiple arguments, the arrayReverseSort function is passed several arrays that the arguments of func will correspond to. Detailed examples are shown at the end of arrayReverseSort description.", "Syntax", "arrayReverseSort([func,] arr, ...)", "Example of integer values sorting:", "SELECT arrayReverseSort([1, 3, 3, 0]);", "\u250c\u2500arrayReverseSort([1, 3, 3, 0])\u2500\u2510\u2502 [3,3,1,0]                      \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "Example of string values sorting:", "SELECT arrayReverseSort(['hello', 'world', '!']);", "\u250c\u2500arrayReverseSort(['hello', 'world', '!'])\u2500\u2510\u2502 ['world','hello','!']                     \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "Consider the following sorting order for the NULL, NaN and Inf values:", "SELECT arrayReverseSort([1, nan, 2, NULL, 3, nan, -4, NULL, inf, -inf]) as res;", "\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 [inf,3,2,1,-4,-inf,nan,nan,NULL,NULL] \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "Inf values are first in the array.NULL values are last in the array.NaN values are right before NULL.-Inf values are right before NaN.", "Note that the arrayReverseSort is a higher-order function. You can pass a lambda function to it as the first argument. Example is shown below.", "SELECT arrayReverseSort((x) -> -x, [1, 2, 3]) as res;", "\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2510\u2502 [1,2,3] \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "The array is sorted in the following way:", "At first, the source array ([1, 2, 3]) is sorted according to the result of the lambda function applied to the elements of the array. The result is an array [3, 2, 1].Array that is obtained on the previous step, is reversed. So, the final result is [1, 2, 3].", "The lambda function can accept multiple arguments. In this case, you need to pass the arrayReverseSort function several arrays of identical length that the arguments of lambda function will correspond to. The resulting array will consist of elements from the first input array; elements from the next input array(s) specify the sorting keys. For example:", "SELECT arrayReverseSort((x, y) -> y, ['hello', 'world'], [2, 1]) as res;", "\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 ['hello','world'] \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "In this example, the array is sorted in the following way:", "At first, the source array ([\u2018hello\u2019, \u2018world\u2019]) is sorted according to the result of the lambda function applied to the elements of the arrays. The elements that are passed in the second array ([2, 1]), define the sorting keys for corresponding elements from the source array. The result is an array [\u2018world\u2019, \u2018hello\u2019].Array that was sorted on the previous step, is reversed. So, the final result is [\u2018hello\u2019, \u2018world\u2019].", "Other examples are shown below.", "SELECT arrayReverseSort((x, y) -> y, [4, 3, 5], ['a', 'b', 'c']) AS res;", "\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2510\u2502 [5,3,4] \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "SELECT arrayReverseSort((x, y) -> -y, [4, 3, 5], [1, 2, 3]) AS res;", "\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2510\u2502 [4,3,5] \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Examples": ["arrayReverseSort([func,] arr, ...)", "SELECT arrayReverseSort([1, 3, 3, 0]);", "SELECT arrayReverseSort(['hello', 'world', '!']);", "SELECT arrayReverseSort([1, nan, 2, NULL, 3, nan, -4, NULL, inf, -inf]) as res;", "SELECT arrayReverseSort((x) -> -x, [1, 2, 3]) as res;", "SELECT arrayReverseSort((x, y) -> y, ['hello', 'world'], [2, 1]) as res;", "SELECT arrayReverseSort((x, y) -> y, [4, 3, 5], ['a', 'b', 'c']) AS res;", "SELECT arrayReverseSort((x, y) -> -y, [4, 3, 5], [1, 2, 3]) AS res;"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayPartialReverseSort([func,] limit, arr, ...)"], "Feature": ["arrayPartialReverseSort([func,] limit, arr, ...)"], "Description": ["arrayPartialReverseSort([func,] limit, arr, ...)", "Same as arrayReverseSort with additional limit argument allowing partial sorting. Returns an array of the same size as the original array where elements in range [1..limit] are sorted in descending order. Remaining elements (limit..N] shall contain elements in unspecified order."], "Examples": [], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayShuffle"], "Feature": ["arrayShuffle(arr[, seed])"], "Description": ["arrayShuffle", "Returns an array of the same size as the original array containing the elements in shuffled order.\nElements are reordered in such a way that each possible permutation of those elements has equal probability of appearance.", "Syntax", "arrayShuffle(arr[, seed])", "Parameters", "arr: The array to partially shuffle. Array.seed (optional): seed to be used with random number generation. If not provided a random one is used. UInt or Int.", "Returned value", "Array with elements shuffled.", "Implementation details", "NoteThis function will not materialize constants."], "Examples": ["SELECT arrayShuffle([1, 2, 3, 4]);", "SELECT arrayShuffle([1, 2, 3, 4], 41);"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayPartialShuffle"], "Feature": ["arrayPartialShuffle(arr[, limit[, seed]])"], "Description": ["arrayPartialShuffle", "Given an input array of cardinality N, returns an array of size N where elements in the range [1...limit] are shuffled and the remaining elements in the range (limit...n] are unshuffled.", "Syntax", "arrayPartialShuffle(arr[, limit[, seed]])", "Parameters", "arr: The array size N to partially shuffle. Array.limit (optional): The number to limit element swaps to, in the range [1..N]. UInt or Int.seed (optional): The seed value to be used with random number generation. If not provided a random one is used. UInt or Int", "Returned value", "Array with elements partially shuffled.", "Implementation details", "NoteThis function will not materialize constants.The value of limit should be in the range [1..N]. Values outside of that range are equivalent to performing full arrayShuffle."], "Examples": ["SELECT arrayPartialShuffle([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1)", "SELECT arrayPartialShuffle([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2);"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayUniq(arr, ...)"], "Feature": ["arrayUniq(arr, ...)"], "Description": ["arrayUniq(arr, ...)", "If one argument is passed, it counts the number of different elements in the array.\nIf multiple arguments are passed, it counts the number of different tuples of elements at corresponding positions in multiple arrays.", "If you want to get a list of unique items in an array, you can use arrayReduce(\u2018groupUniqArray\u2019, arr)."], "Examples": [], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayJoin(arr)"], "Feature": ["arrayJoin(arr)"], "Description": ["arrayJoin(arr)", "A special function. See the section \u201cArrayJoin function\u201d."], "Examples": [], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayDifference"], "Feature": ["arrayDifference(array)"], "Description": ["arrayDifference", "Calculates an array of differences between adjacent array elements. The first element of the result array will be 0, the second a[1] - a[0], the third a[2] - a[1], etc. The type of elements in the result array is determined by the type inference rules for subtraction (e.g. UInt8 - UInt8 = Int16).", "Syntax", "arrayDifference(array)", "Arguments", "array \u2013 Array.", "Returned values", "Returns an array of differences between adjacent array elements. UInt*, Int*, Float*."], "Examples": ["SELECT arrayDifference([1, 2, 3, 4]);", "SELECT arrayDifference([0, 10000000000000000000]);"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayDistinct"], "Feature": ["arrayDistinct(array)"], "Description": ["arrayDistinct", "Takes an array, returns an array containing the distinct elements only.", "Syntax", "arrayDistinct(array)", "Arguments", "array \u2013 Array.", "Returned values", "Returns an array containing the distinct elements."], "Examples": ["SELECT arrayDistinct([1, 2, 2, 3, 1]);"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayEnumerateDense"], "Feature": ["arrayEnumerateDense(arr)"], "Description": ["arrayEnumerateDense", "Returns an array of the same size as the source array, indicating where each element first appears in the source array.", "Syntax", "arrayEnumerateDense(arr)"], "Examples": ["SELECT arrayEnumerateDense([10, 20, 10, 30])"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayEnumerateDenseRanked"], "Feature": ["arrayEnumerateDenseRanked(clear_depth, arr, max_array_depth)"], "Description": ["arrayEnumerateDenseRanked", "Returns an array the same size as the source array, indicating where each element first appears in the source array. It allows for enumeration of a multidimensional array with the ability to specify how deep to look inside the array.", "Syntax", "arrayEnumerateDenseRanked(clear_depth, arr, max_array_depth)", "Parameters", "clear_depth: Enumerate elements at the specified level separately. Positive Integer less than or equal to max_arr_depth.arr: N-dimensional array to enumerate. Array.max_array_depth: The maximum effective depth. Positive Integer less than or equal to the depth of arr."], "Examples": ["SELECT arrayEnumerateDenseRanked(1,[10, 20, 10, 30],1);", "SELECT arrayEnumerateDenseRanked(1,[[10,10,30,20],[40,50,10,30]],2);", "SELECT arrayEnumerateDenseRanked(2,[[10,10,30,20],[40,50,10,30]],2);"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayUnion(arr)"], "Feature": ["arrayUnion(arr)"], "Description": ["arrayUnion(arr)", "Takes multiple arrays, returns an array that contains all elements that are present in any of the source arrays."], "Examples": ["SELECT    arrayUnion([-2, 1], [10, 1], [-2], []) as num_example,    arrayUnion(['hi'], [], ['hello', 'hi']) as str_example,    arrayUnion([1, 3, NULL], [2, 3, NULL]) as null_example"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayIntersect(arr)"], "Feature": ["arrayIntersect(arr)"], "Description": ["arrayIntersect(arr)", "Takes multiple arrays, returns an array with elements that are present in all source arrays."], "Examples": ["SELECT    arrayIntersect([1, 2], [1, 3], [2, 3]) AS no_intersect,    arrayIntersect([1, 2], [1, 3], [1, 4]) AS intersect"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayJaccardIndex"], "Feature": ["arrayJaccardIndex"], "Description": ["arrayJaccardIndex", "Returns the Jaccard index of two arrays."], "Examples": ["SELECT arrayJaccardIndex([1, 2], [2, 3]) AS res"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayReduce"], "Feature": ["arrayReduce(agg_func, arr1, arr2, ..., arrN)"], "Description": ["arrayReduce", "Applies an aggregate function to array elements and returns its result. The name of the aggregation function is passed as a string in single quotes 'max', 'sum'. When using parametric aggregate functions, the parameter is indicated after the function name in parentheses 'uniqUpTo(6)'.", "Syntax", "arrayReduce(agg_func, arr1, arr2, ..., arrN)", "Arguments", "agg_func \u2014 The name of an aggregate function which should be a constant string.arr \u2014 Any number of array type columns as the parameters of the aggregation function.", "Returned value"], "Examples": ["SELECT arrayReduce('max', [1, 2, 3]);", "SELECT arrayReduce('maxIf', [3, 5], [1, 0]);", "SELECT arrayReduce('uniqUpTo(3)', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayReduceInRanges"], "Feature": ["arrayReduceInRanges(agg_func, ranges, arr1, arr2, ..., arrN)"], "Description": ["arrayReduceInRanges", "Applies an aggregate function to array elements in given ranges and returns an array containing the result corresponding to each range. The function will return the same result as multiple arrayReduce(agg_func, arraySlice(arr1, index, length), ...).", "Syntax", "arrayReduceInRanges(agg_func, ranges, arr1, arr2, ..., arrN)", "Arguments", "agg_func \u2014 The name of an aggregate function which should be a constant string.ranges \u2014 The ranges to aggretate which should be an array of tuples which containing the index and the length of each range.arr \u2014 Any number of Array type columns as the parameters of the aggregation function.", "Returned value", "Array containing results of the aggregate function over specified ranges. Array."], "Examples": ["SELECT arrayReduceInRanges(    'sum',    [(1, 5), (2, 3), (3, 4), (4, 4)],    [1000000, 200000, 30000, 4000, 500, 60, 7]) AS res"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayFold"], "Feature": ["arrayFold(lambda_function, arr1, arr2, ..., accumulator)"], "Description": ["arrayFold", "Applies a lambda function to one or more equally-sized arrays and collects the result in an accumulator.", "Syntax", "arrayFold(lambda_function, arr1, arr2, ..., accumulator)"], "Examples": ["SELECT arrayFold( acc,x -> acc + x*2,  [1, 2, 3, 4], toInt64(3)) AS res;", "SELECT arrayFold( acc,x -> (acc.2, acc.2 + acc.1), range(number), (1::Int64, 0::Int64)).1 AS fibonacciFROM numbers(1,10);\u250c\u2500fibonacci\u2500\u2510\u2502         0 \u2502\u2502         1 \u2502\u2502         1 \u2502\u2502         2 \u2502\u2502         3 \u2502\u2502         5 \u2502\u2502         8 \u2502\u2502        13 \u2502\u2502        21 \u2502\u2502        34 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayReverse"], "Feature": ["arrayReverse(arr)"], "Description": ["arrayReverse", "Returns an array of the same size as the original array containing the elements in reverse order.", "Syntax", "arrayReverse(arr)"], "Examples": ["SELECT arrayReverse([1, 2, 3])"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["reverse(arr)"], "Feature": ["reverse(arr)"], "Description": ["reverse(arr)", "Synonym for \u201carrayReverse\u201d"], "Examples": [], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayFlatten"], "Feature": ["flatten(array_of_arrays)"], "Description": ["arrayFlatten", "Converts an array of arrays to a flat array.", "Function:", "Applies to any depth of nested arrays.Does not change arrays that are already flat.", "The flattened array contains all the elements from all source arrays.", "Syntax", "flatten(array_of_arrays)", "Alias: flatten.", "Parameters", "array_of_arrays \u2014 Array of arrays. For example, [[1,2,3], [4,5]]."], "Examples": ["SELECT flatten([[[1]], [[2], [3]]]);"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayCompact"], "Feature": ["arrayCompact(arr)"], "Description": ["arrayCompact", "Removes consecutive duplicate elements from an array. The order of result values is determined by the order in the source array.", "Syntax", "arrayCompact(arr)", "Arguments", "arr \u2014 The array to inspect.", "Returned value", "The array without duplicate. Array."], "Examples": ["SELECT arrayCompact([1, 1, nan, nan, 2, 3, 3, 3]);"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayZip"], "Feature": ["arrayZip(arr1, arr2, ..., arrN)"], "Description": ["arrayZip", "Combines multiple arrays into a single array. The resulting array contains the corresponding elements of the source arrays grouped into tuples in the listed order of arguments.", "Syntax", "arrayZip(arr1, arr2, ..., arrN)", "Arguments", "arrN \u2014 Array.", "The function can take any number of arrays of different types. All the input arrays must be of equal size.", "Returned value", "Array with elements from the source arrays grouped into tuples. Data types in the tuple are the same as types of the input arrays and in the same order as arrays are passed. Array."], "Examples": ["SELECT arrayZip(['a', 'b', 'c'], [5, 2, 1]);"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayZipUnaligned"], "Feature": ["arrayZipUnaligned(arr1, arr2, ..., arrN)"], "Description": ["arrayZipUnaligned", "Combines multiple arrays into a single array, allowing for unaligned arrays. The resulting array contains the corresponding elements of the source arrays grouped into tuples in the listed order of arguments.", "Syntax", "arrayZipUnaligned(arr1, arr2, ..., arrN)", "Arguments", "arrN \u2014 Array.", "The function can take any number of arrays of different types.", "Returned value", "Array with elements from the source arrays grouped into tuples. Data types in the tuple are the same as types of the input arrays and in the same order as arrays are passed. Array. If the arrays have different sizes, the shorter arrays will be padded with null values."], "Examples": ["SELECT arrayZipUnaligned(['a'], [1, 2, 3]);"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayAUC"], "Feature": ["arrayAUC(arr_scores, arr_labels[, scale])"], "Description": ["arrayAUC", "Calculate AUC (Area Under the Curve, which is a concept in machine learning, see more details: https://en.wikipedia.org/wiki/Receiver_operating_characteristic#Area_under_the_curve).", "Syntax", "arrayAUC(arr_scores, arr_labels[, scale])", "Arguments", "arr_scores \u2014 scores prediction model gives.arr_labels \u2014 labels of samples, usually 1 for positive sample and 0 for negative sample.scale - Optional. Wether to return the normalized area. Default value: true. [Bool]", "Returned value", "Returns AUC value with type Float64."], "Examples": ["select arrayAUC([0.1, 0.4, 0.35, 0.8], [0, 0, 1, 1]);"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayMap(func, arr1, ...)"], "Feature": ["arrayMap(func, arr1, ...)"], "Description": ["arrayMap(func, arr1, ...)", "Returns an array obtained from the original arrays by application of func(arr1[i], ..., arrN[i]) for each element. Arrays arr1 ... arrN must have the same number of elements."], "Examples": ["SELECT arrayMap(x -> (x + 2), [1, 2, 3]) as res;", "SELECT arrayMap((x, y) -> (x, y), [1, 2, 3], [4, 5, 6]) AS res"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayFilter(func, arr1, ...)"], "Feature": ["arrayFilter(func, arr1, ...)"], "Description": ["arrayFilter(func, arr1, ...)", "Returns an array containing only the elements in arr1 for which func(arr1[i], ..., arrN[i]) returns something other than 0."], "Examples": ["SELECT arrayFilter(x -> x LIKE '%World%', ['Hello', 'abc World']) AS res", "SELECT    arrayFilter(        (i, x) -> x LIKE '%World%',        arrayEnumerate(arr),        ['Hello', 'abc World'] AS arr)    AS res"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayFill(func, arr1, ...)"], "Feature": ["arrayFill(func, arr1, ...)"], "Description": ["arrayFill(func, arr1, ...)", "Scan through arr1 from the first element to the last element and replace arr1[i] by arr1[i - 1] if func(arr1[i], ..., arrN[i]) returns 0. The first element of arr1 will not be replaced."], "Examples": ["SELECT arrayFill(x -> not isNull(x), [1, null, 3, 11, 12, null, null, 5, 6, 14, null, null]) AS res"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayReverseFill(func, arr1, ...)"], "Feature": ["arrayReverseFill(func, arr1, ...)"], "Description": ["arrayReverseFill(func, arr1, ...)", "Scan through arr1 from the last element to the first element and replace arr1[i] by arr1[i + 1] if func(arr1[i], ..., arrN[i]) returns 0. The last element of arr1 will not be replaced."], "Examples": ["SELECT arrayReverseFill(x -> not isNull(x), [1, null, 3, 11, 12, null, null, 5, 6, 14, null, null]) AS res"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arraySplit(func, arr1, ...)"], "Feature": ["arraySplit(func, arr1, ...)"], "Description": ["arraySplit(func, arr1, ...)", "Split arr1 into multiple arrays. When func(arr1[i], ..., arrN[i]) returns something other than 0, the array will be split on the left hand side of the element. The array will not be split before the first element."], "Examples": ["SELECT arraySplit((x, y) -> y, [1, 2, 3, 4, 5], [1, 0, 0, 1, 0]) AS res"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayReverseSplit(func, arr1, ...)"], "Feature": ["arrayReverseSplit(func, arr1, ...)"], "Description": ["arrayReverseSplit(func, arr1, ...)", "Split arr1 into multiple arrays. When func(arr1[i], ..., arrN[i]) returns something other than 0, the array will be split on the right hand side of the element. The array will not be split after the last element."], "Examples": ["SELECT arrayReverseSplit((x, y) -> y, [1, 2, 3, 4, 5], [1, 0, 0, 1, 0]) AS res"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayExists([func,] arr1, ...)"], "Feature": ["arrayExists([func,] arr1, ...)"], "Description": ["arrayExists([func,] arr1, ...)", "Returns 1 if there is at least one element in arr for which func(arr1[i], ..., arrN[i]) returns something other than 0. Otherwise, it returns 0.", "Note that the arrayExists is a higher-order function. You can pass a lambda function to it as the first argument."], "Examples": [], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayAll([func,] arr1, ...)"], "Feature": ["arrayAll([func,] arr1, ...)"], "Description": ["arrayAll([func,] arr1, ...)", "Returns 1 if func(arr1[i], ..., arrN[i]) returns something other than 0 for all the elements in arrays. Otherwise, it returns 0.", "Note that the arrayAll is a higher-order function. You can pass a lambda function to it as the first argument."], "Examples": [], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayFirst(func, arr1, ...)"], "Feature": ["arrayFirst(func, arr1, ...)"], "Description": ["arrayFirst(func, arr1, ...)", "Returns the first element in the arr1 array for which func(arr1[i], ..., arrN[i]) returns something other than 0."], "Examples": [], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayFirstOrNull"], "Feature": ["arrayFirstOrNull(func, arr1, ...)"], "Description": ["arrayFirstOrNull", "Returns the first element in the arr1 array for which func(arr1[i], ..., arrN[i]) returns something other than 0, otherwise it returns NULL.", "Syntax", "arrayFirstOrNull(func, arr1, ...)", "Parameters", "func: Lambda function. Lambda function.arr1: Array to operate on. Array.", "Returned value", "The first element in the passed array.Otherwise, returns NULL", "Implementation details", "Note that the arrayFirstOrNull is a higher-order function. You must pass a lambda function to it as the first argument, and it can\u2019t be omitted."], "Examples": ["SELECT arrayFirstOrNull(x -> x >= 2, [1, 2, 3]);", "SELECT arrayFirstOrNull(x -> x >= 2, emptyArrayUInt8());", "SELECT arrayLastOrNull((x,f) -> f, [1,2,3,NULL], [0,1,0,1]);"], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayLast(func, arr1, ...)"], "Feature": ["arrayLast(func, arr1, ...)"], "Description": ["arrayLast(func, arr1, ...)", "Returns the last element in the arr1 array for which func(arr1[i], ..., arrN[i]) returns something other than 0.", "Note that the arrayLast is a higher-order function. You must pass a lambda function to it as the first argument, and it can\u2019t be omitted."], "Examples": [], "Category": ["Arrays Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/array-functions"], "Title": ["arrayLastOrNull"], "Feature": ["arrayLastOrNull(func, arr1, ...)"], "Description": ["arrayLastOrNull", "Returns the last element in the arr1 array for which func(arr1[i], ..., arrN[i]) returns something other than 0, otherwise returns NULL.", "Syntax", "arrayLastOrNull(func, arr1, ...)", "Parameters", "func: Lambda function. Lambda function.arr1: Array to operate on. Array.", "Returned value", "The last element in the passed array.Otherwise, returns NULL", "Implementation details", "Note that the arrayLastOrNull is a higher-order function. You must pass a lambda function to it as the first argument, and it can\u2019t be omitted."], "Examples": ["SELECT arrayLastOrNull(x -> x >= 2, [1, 2, 3]);", "SELECT arrayLastOrNull(x -> x >= 2, emptyArrayUInt8());"], "Category": ["Arrays Functions"]}
