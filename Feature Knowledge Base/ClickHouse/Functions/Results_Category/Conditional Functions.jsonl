{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/conditional-functions"], "Title": ["if"], "Feature": ["if(cond, then, else)"], "Description": ["if", "Performs conditional branching.", "If the condition cond evaluates to a non-zero value, the function returns the result of the expression then. If cond evaluates to zero or NULL, then the result of the else expression is returned.", "Setting short_circuit_function_evaluation controls whether short-circuit evaluation is used. If enabled, the then expression is evaluated only on rows where cond is true and the else expression where cond is false. For example, with short-circuit evaluation, no division-by-zero exception is thrown when executing the query SELECT if(number = 0, 0, intDiv(42, number)) FROM numbers(10).", "then and else must be of a similar type.", "Syntax", "if(cond, then, else)", "Alias: cond ? then : else (ternary operator)", "Arguments", "cond \u2013 The evaluated condition. UInt8, Nullable(UInt8) or NULL.then \u2013 The expression returned if condition is true.else \u2013 The expression returned if condition is false or NULL.", "Returned values", "The result of either the then and else expressions, depending on condition cond."], "Examples": ["SELECT if(1, plus(2, 2), plus(2, 6));"], "Category": ["Conditional Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/conditional-functions"], "Title": ["multiIf"], "Feature": ["multiIf(cond_1, then_1, cond_2, then_2, ..., else)"], "Description": ["multiIf", "Allows to write the CASE operator more compactly in the query.", "Syntax", "multiIf(cond_1, then_1, cond_2, then_2, ..., else)", "Setting short_circuit_function_evaluation controls whether short-circuit evaluation is used. If enabled, the then_i expression is evaluated only on rows where ((NOT cond_1) AND (NOT cond_2) AND ... AND (NOT cond_{i-1}) AND cond_i) is true, cond_i will be evaluated only on rows where ((NOT cond_1) AND (NOT cond_2) AND ... AND (NOT cond_{i-1})) is true. For example, with short-circuit evaluation, no division-by-zero exception is thrown when executing the query SELECT multiIf(number = 2, intDiv(1, number), number = 5) FROM numbers(10).", "Arguments", "The function accepts 2N+1 parameters:", "cond_N \u2014 The N-th evaluated condition which controls if then_N is returned.then_N \u2014 The result of the function when cond_N is true.else \u2014 The result of the function if none of conditions is true.", "Returned values", "The result of either any of the then_N or else expressions, depending on the conditions cond_N."], "Examples": ["SELECT    left,    right,    multiIf(left < right, 'left is smaller', left > right, 'left is greater', left = right, 'Both equal', 'Null value') AS resultFROM LEFT_RIGHT\u250c\u2500left\u2500\u252c\u2500right\u2500\u252c\u2500result\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502     4 \u2502 Null value      \u2502\u2502    1 \u2502     3 \u2502 left is smaller \u2502\u2502    2 \u2502     2 \u2502 Both equal      \u2502\u2502    3 \u2502     1 \u2502 left is greater \u2502\u2502    4 \u2502  \u1d3a\u1d41\u1d38\u1d38 \u2502 Null value      \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Category": ["Conditional Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/conditional-functions"], "Title": ["Using Conditional Results Directly"], "Feature": ["Using Conditional Results Directly"], "Description": ["Using Conditional Results Directly", "Conditionals always result to 0, 1 or NULL. So you can use conditional results directly like this:", "SELECT left < right AS is_smallFROM LEFT_RIGHT\u250c\u2500is_small\u2500\u2510\u2502     \u1d3a\u1d41\u1d38\u1d38 \u2502\u2502        1 \u2502\u2502        0 \u2502\u2502        0 \u2502\u2502     \u1d3a\u1d41\u1d38\u1d38 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Examples": ["SELECT left < right AS is_smallFROM LEFT_RIGHT\u250c\u2500is_small\u2500\u2510\u2502     \u1d3a\u1d41\u1d38\u1d38 \u2502\u2502        1 \u2502\u2502        0 \u2502\u2502        0 \u2502\u2502     \u1d3a\u1d41\u1d38\u1d38 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Category": ["Conditional Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/conditional-functions"], "Title": ["NULL Values in Conditionals"], "Feature": ["NULL Values in Conditionals"], "Description": ["NULL Values in Conditionals", "When NULL values are involved in conditionals, the result will also be NULL.", "SELECT    NULL < 1,    2 < NULL,    NULL < NULL,    NULL = NULL\u250c\u2500less(NULL, 1)\u2500\u252c\u2500less(2, NULL)\u2500\u252c\u2500less(NULL, NULL)\u2500\u252c\u2500equals(NULL, NULL)\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38          \u2502 \u1d3a\u1d41\u1d38\u1d38          \u2502 \u1d3a\u1d41\u1d38\u1d38             \u2502 \u1d3a\u1d41\u1d38\u1d38               \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "So you should construct your queries carefully if the types are Nullable.", "The following example demonstrates this by failing to add equals condition to multiIf.", "SELECT    left,    right,    multiIf(left < right, 'left is smaller', left > right, 'right is smaller', 'Both equal') AS faulty_resultFROM LEFT_RIGHT\u250c\u2500left\u2500\u252c\u2500right\u2500\u252c\u2500faulty_result\u2500\u2500\u2500\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502     4 \u2502 Both equal       \u2502\u2502    1 \u2502     3 \u2502 left is smaller  \u2502\u2502    2 \u2502     2 \u2502 Both equal       \u2502\u2502    3 \u2502     1 \u2502 right is smaller \u2502\u2502    4 \u2502  \u1d3a\u1d41\u1d38\u1d38 \u2502 Both equal       \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Examples": ["SELECT    NULL < 1,    2 < NULL,    NULL < NULL,    NULL = NULL\u250c\u2500less(NULL, 1)\u2500\u252c\u2500less(2, NULL)\u2500\u252c\u2500less(NULL, NULL)\u2500\u252c\u2500equals(NULL, NULL)\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38          \u2502 \u1d3a\u1d41\u1d38\u1d38          \u2502 \u1d3a\u1d41\u1d38\u1d38             \u2502 \u1d3a\u1d41\u1d38\u1d38               \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "SELECT    left,    right,    multiIf(left < right, 'left is smaller', left > right, 'right is smaller', 'Both equal') AS faulty_resultFROM LEFT_RIGHT\u250c\u2500left\u2500\u252c\u2500right\u2500\u252c\u2500faulty_result\u2500\u2500\u2500\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502     4 \u2502 Both equal       \u2502\u2502    1 \u2502     3 \u2502 left is smaller  \u2502\u2502    2 \u2502     2 \u2502 Both equal       \u2502\u2502    3 \u2502     1 \u2502 right is smaller \u2502\u2502    4 \u2502  \u1d3a\u1d41\u1d38\u1d38 \u2502 Both equal       \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Category": ["Conditional Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/conditional-functions"], "Title": ["greatest"], "Feature": ["greatest"], "Description": ["greatest", "Returns the greatest across a list of values.  All of the list members must be of comparable types."], "Examples": ["SELECT greatest(1, 2, toUInt8(3), 3.) result,  toTypeName(result) type;", "SELECT greatest(['hello'], ['there'], ['world'])", "SELECT greatest(toDateTime32(now() + toIntervalDay(1)), toDateTime64(now(), 3))"], "Category": ["Conditional Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/conditional-functions"], "Title": ["least"], "Feature": ["least"], "Description": ["least", "Returns the least across a list of values.  All of the list members must be of comparable types."], "Examples": ["SELECT least(1, 2, toUInt8(3), 3.) result,  toTypeName(result) type;", "SELECT least(['hello'], ['there'], ['world'])", "SELECT least(toDateTime32(now() + toIntervalDay(1)), toDateTime64(now(), 3))"], "Category": ["Conditional Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/conditional-functions"], "Title": ["clamp"], "Feature": ["clamp(value, min, max)"], "Description": ["clamp", "Constrain the return value between A and B.", "Syntax", "clamp(value, min, max)", "Arguments", "value \u2013 Input value.min \u2013 Limit the lower bound.max \u2013 Limit the upper bound.", "Returned values", "If the value is less than the minimum value, return the minimum value; if it is greater than the maximum value, return the maximum value; otherwise, return the current value."], "Examples": ["SELECT clamp(1, 2, 3) result,  toTypeName(result) type;"], "Category": ["Conditional Functions"]}
