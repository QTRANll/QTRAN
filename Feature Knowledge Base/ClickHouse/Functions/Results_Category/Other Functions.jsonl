{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["hostName"], "Feature": ["hostName()"], "Description": ["hostName", "Returns the name of the host on which this function was executed. If the function executes on a remote server (distributed processing), the remote server name is returned.\nIf the function executes in the context of a distributed table, it generates a normal column with values relevant to each shard. Otherwise it produces a constant value.", "Syntax", "hostName()", "Returned value", "Host name. String."], "Examples": ["hostName()"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["getMacro"], "Feature": ["getMacro(name);"], "Description": ["getMacro", "Returns a named value from the macros section of the server configuration.", "Syntax", "getMacro(name);", "Arguments", "name \u2014 Macro name to retrieve from the <macros> section. String.", "Returned value", "Value of the specified macro. String."], "Examples": ["SELECT getMacro('test');", "SELECT * FROM system.macrosWHERE macro = 'test';"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["fqdn"], "Feature": ["fqdn();"], "Description": ["fqdn", "Returns the fully qualified domain name of the ClickHouse server.", "Syntax", "fqdn();", "Aliases: fullHostName, FQDN.", "Returned value", "String with the fully qualified domain name. String."], "Examples": ["SELECT FQDN();"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["basename"], "Feature": ["basename(expr)"], "Description": ["basename", "Extracts the tail of a string following its last slash or backslash. This function if often used to extract the filename from a path.", "basename(expr)", "Arguments", "expr \u2014 A value of type String. Backslashes must be escaped.", "Returned Value", "A string that contains:", "The tail of the input string after its last slash or backslash. If the input string ends with a slash or backslash (e.g. / or c:\\), the function returns an empty string.The original string if there are no slashes or backslashes."], "Examples": ["SELECT 'some/long/path/to/file' AS a, basename(a)", "SELECT 'some\\\\long\\\\path\\\\to\\\\file' AS a, basename(a)", "SELECT 'some-file-name' AS a, basename(a)"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["visibleWidth"], "Feature": ["visibleWidth(x)"], "Description": ["visibleWidth", "Calculates the approximate width when outputting values to the console in text format (tab-separated).\nThis function is used by the system to implement Pretty formats.", "NULL is represented as a string corresponding to NULL in Pretty formats.", "Syntax", "visibleWidth(x)"], "Examples": ["SELECT visibleWidth(NULL)"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["toTypeName"], "Feature": ["toTypeName(value)"], "Description": ["toTypeName", "Returns the type name of the passed argument.", "If NULL is passed, the function returns type Nullable(Nothing), which corresponds to ClickHouse's internal NULL representation.", "Syntax", "toTypeName(value)", "Arguments", "value \u2014 A value of arbitrary type.", "Returned value", "The data type name of the input value. String."], "Examples": ["SELECT toTypeName(123);"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["blockSize"], "Feature": ["blockSize()"], "Description": ["blockSize", "In ClickHouse, queries are processed in blocks (chunks).\nThis function returns the size (row count) of the block the function is called on.", "Syntax", "blockSize()"], "Examples": ["DROP TABLE IF EXISTS test;CREATE TABLE test (n UInt8) ENGINE = Memory;INSERT INTO testSELECT * FROM system.numbers LIMIT 5;SELECT blockSize()FROM test;"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["byteSize"], "Feature": ["byteSize(argument [, ...])"], "Description": ["byteSize", "Returns an estimation of uncompressed byte size of its arguments in memory.", "Syntax", "byteSize(argument [, ...])", "Arguments", "argument \u2014 Value.", "Returned value", "Estimation of byte size of the arguments in memory. UInt64."], "Examples": ["SELECT byteSize('string');", "CREATE TABLE test(    `key` Int32,    `u8` UInt8,    `u16` UInt16,    `u32` UInt32,    `u64` UInt64,    `i8` Int8,    `i16` Int16,    `i32` Int32,    `i64` Int64,    `f32` Float32,    `f64` Float64)ENGINE = MergeTreeORDER BY key;INSERT INTO test VALUES(1, 8, 16, 32, 64,  -8, -16, -32, -64, 32.32, 64.64);SELECT key, byteSize(u8) AS `byteSize(UInt8)`, byteSize(u16) AS `byteSize(UInt16)`, byteSize(u32) AS `byteSize(UInt32)`, byteSize(u64) AS `byteSize(UInt64)`, byteSize(i8) AS `byteSize(Int8)`, byteSize(i16) AS `byteSize(Int16)`, byteSize(i32) AS `byteSize(Int32)`, byteSize(i64) AS `byteSize(Int64)`, byteSize(f32) AS `byteSize(Float32)`, byteSize(f64) AS `byteSize(Float64)` FROM test ORDER BY key ASC FORMAT Vertical;", "SELECT byteSize(NULL, 1, 0.3, '');"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["materialize"], "Feature": ["materialize(x)"], "Description": ["materialize", "Turns a constant into a full column containing a single value.\nFull columns and constants are represented differently in memory.\nFunctions usually execute different code for normal and constant arguments, although the result should typically be the same.\nThis function can be used to debug this behavior.", "Syntax", "materialize(x)", "Parameters", "x \u2014 A constant. Constant.", "Returned value", "A column containing a single value x."], "Examples": ["SELECT countMatches('foobarfoo', 'foo');SELECT countMatches('foobarfoo', materialize('foo'));"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["ignore"], "Feature": ["ignore([arg1[, arg2[, ...]])"], "Description": ["ignore", "Accepts arbitrary arguments and unconditionally returns 0.\nThe argument is still evaluated internally, making it useful for eg. benchmarking.", "Syntax", "ignore([arg1[, arg2[, ...]])", "Arguments", "Accepts arbitrarily many arguments of arbitrary type, including NULL.", "Returned value", "Returns 0."], "Examples": ["SELECT ignore(0, 'ClickHouse', NULL);"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["sleep"], "Feature": ["sleep(seconds)"], "Description": ["sleep", "Used to introduce a delay or pause in the execution of a query. It is primarily used for testing and debugging purposes.", "Syntax", "sleep(seconds)", "Arguments", "seconds: UInt* or Float The number of seconds to pause the query execution to a maximum of 3 seconds. It can be a floating-point value to specify fractional seconds.", "Returned value", "This function does not return any value."], "Examples": ["SELECT sleep(2);"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["sleepEachRow"], "Feature": ["sleepEachRow(seconds)"], "Description": ["sleepEachRow", "Pauses the execution of a query for a specified number of seconds for each row in the result set.", "Syntax", "sleepEachRow(seconds)", "Arguments", "seconds: UInt* or Float* The number of seconds to pause the query execution for each row in the result set to a maximum of 3 seconds. It can be a floating-point value to specify fractional seconds.", "Returned value", "This function returns the same input values as it receives, without modifying them."], "Examples": ["SELECT number, sleepEachRow(0.5) FROM system.numbers LIMIT 5;"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["currentDatabase"], "Feature": ["currentDatabase()"], "Description": ["currentDatabase", "Returns the name of the current database.\nUseful in table engine parameters of CREATE TABLE queries where you need to specify the database.", "Syntax", "currentDatabase()", "Returned value", "Returns the current database name. String."], "Examples": ["SELECT currentDatabase()"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["currentUser"], "Feature": ["currentUser()"], "Description": ["currentUser", "Returns the name of the current user. In case of a distributed query, the name of the user who initiated the query is returned.", "Syntax", "currentUser()", "Aliases: user(), USER(), current_user(). Aliases are case insensitive.", "Returned values", "The name of the current user. String.In distributed queries, the login of the user who initiated the query. String."], "Examples": ["SELECT currentUser();"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["currentSchemas"], "Feature": ["currentSchemas(bool)"], "Description": ["currentSchemas", "Returns a single-element array with the name of the current database schema.", "Syntax", "currentSchemas(bool)", "Alias: current_schemas.", "Arguments", "bool: A boolean value. Bool.", "NoteThe boolean argument is ignored. It only exists for the sake of compatibility with the implementation of this function in PostgreSQL.", "Returned values", "Returns a single-element array with the name of the current database"], "Examples": ["SELECT currentSchemas(true);"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["isConstant"], "Feature": ["isConstant(x)"], "Description": ["isConstant", "Returns whether the argument is a constant expression.", "A constant expression is an expression whose result is known during query analysis, i.e.\u00a0before execution. For example, expressions over literals are constant expressions.", "This function is mostly intended for development, debugging and demonstration.", "Syntax", "isConstant(x)", "Arguments", "x \u2014 Expression to check.", "Returned values", "1 if x is constant. UInt8.0 if x is non-constant. UInt8."], "Examples": ["SELECT isConstant(x + 1) FROM (SELECT 43 AS x)", "WITH 3.14 AS pi SELECT isConstant(cos(pi))", "SELECT isConstant(number) FROM numbers(1)"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["hasColumnInTable"], "Feature": ["hasColumnInTable(\\[\u2018hostname\u2019\\[, \u2018username\u2019\\[, \u2018password\u2019\\]\\],\\] \u2018database\u2019, \u2018table\u2019, \u2018column\u2019)"], "Description": ["hasColumnInTable", "Given the database name, the table name, and the column name as constant strings, returns 1 if the given column exists, otherwise 0.", "Syntax", "hasColumnInTable(\\[\u2018hostname\u2019\\[, \u2018username\u2019\\[, \u2018password\u2019\\]\\],\\] \u2018database\u2019, \u2018table\u2019, \u2018column\u2019)", "Parameters", "database : name of the database. String literaltable : name of the table. String literalcolumn : name of the column. String literalhostname : remote server name to perform the check on. String literalusername : username for remote server. String literalpassword : password for remote server. String literal", "Returned value", "1 if the given column exists.0, otherwise.", "Implementation details", "For elements in a nested data structure, the function checks for the existence of a column. For the nested data structure itself, the function returns 0."], "Examples": ["SELECT hasColumnInTable('system','metrics','metric')", "SELECT hasColumnInTable('system','metrics','non-existing_column')"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["hasThreadFuzzer"], "Feature": ["hasThreadFuzzer();"], "Description": ["hasThreadFuzzer", "Returns whether Thread Fuzzer is effective. It can be used in tests to prevent runs from being too long.", "Syntax", "hasThreadFuzzer();"], "Examples": ["hasThreadFuzzer();"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["bar"], "Feature": ["bar"], "Description": ["bar", "Builds a bar chart.", "bar(x, min, max, width) draws a band with width proportional to (x - min) and equal to width characters when x = max.", "Arguments", "x \u2014 Size to display.min, max \u2014 Integer constants. The value must fit in Int64.width \u2014 Constant, positive integer, can be fractional.", "The band is drawn with accuracy to one eighth of a symbol."], "Examples": ["SELECT    toHour(EventTime) AS h,    count() AS c,    bar(c, 0, 600000, 20) AS barFROM test.hitsGROUP BY hORDER BY h ASC"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["transform"], "Feature": ["transform"], "Description": ["transform", "Transforms a value according to the explicitly defined mapping of some elements to other ones.\nThere are two variations of this function:", "transform(x, array_from, array_to, default)", "x \u2013 What to transform.", "array_from \u2013 Constant array of values to convert.", "array_to \u2013 Constant array of values to convert the values in \u2018from\u2019 to.", "default \u2013 Which value to use if \u2018x\u2019 is not equal to any of the values in \u2018from\u2019.", "array_from and array_to must have equally many elements.", "Signature:", "For x equal to one of the elements in array_from, the function returns the corresponding element in array_to, i.e. the one at the same array index. Otherwise, it returns default. If multiple matching elements exist array_from, it returns the element corresponding to the first of them.", "transform(T, Array(T), Array(U), U) -> U", "T and U can be numeric, string, or Date or DateTime types.\nThe same letter (T or U) means that types must be mutually compatible and not necessarily equal.\nFor example, the first argument could have type Int64, while the second argument could have type Array(UInt16)."], "Examples": ["SELECT    transform(SearchEngineID, [2, 3], ['Yandex', 'Google'], 'Other') AS title,    count() AS cFROM test.hitsWHERE SearchEngineID != 0GROUP BY titleORDER BY c DESC", "SELECT    transform(domain(Referer), ['yandex.ru', 'google.ru', 'vkontakte.ru'], ['www.yandex', 'example.com', 'vk.com']) AS s,    count() AS cFROM test.hitsGROUP BY domain(Referer)ORDER BY count() DESCLIMIT 10"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["formatReadableDecimalSize"], "Feature": ["formatReadableDecimalSize(x)"], "Description": ["formatReadableDecimalSize", "Given a size (number of bytes), this function returns a readable, rounded size with suffix (KB, MB, etc.) as string.", "The opposite operations of this function are parseReadableSize, parseReadableSizeOrZero, and parseReadableSizeOrNull.", "Syntax", "formatReadableDecimalSize(x)"], "Examples": ["SELECT    arrayJoin([1, 1024, 1024*1024, 192851925]) AS filesize_bytes,    formatReadableDecimalSize(filesize_bytes) AS filesize"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["formatReadableSize"], "Feature": ["formatReadableSize(x)"], "Description": ["formatReadableSize", "Given a size (number of bytes), this function returns a readable, rounded size with suffix (KiB, MiB, etc.) as string.", "The opposite operations of this function are parseReadableSize, parseReadableSizeOrZero, and parseReadableSizeOrNull.", "Syntax", "formatReadableSize(x)", "Alias: FORMAT_BYTES."], "Examples": ["SELECT    arrayJoin([1, 1024, 1024*1024, 192851925]) AS filesize_bytes,    formatReadableSize(filesize_bytes) AS filesize"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["formatReadableQuantity"], "Feature": ["formatReadableQuantity(x)"], "Description": ["formatReadableQuantity", "Given a number, this function returns a rounded number with suffix (thousand, million, billion, etc.) as string.", "Syntax", "formatReadableQuantity(x)"], "Examples": ["SELECT    arrayJoin([1024, 1234 * 1000, (4567 * 1000) * 1000, 98765432101234]) AS number,    formatReadableQuantity(number) AS number_for_humans"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["formatReadableTimeDelta"], "Feature": ["formatReadableTimeDelta(column[, maximum_unit, minimum_unit])"], "Description": ["formatReadableTimeDelta", "Given a time interval (delta) in seconds, this function returns a time delta with year/month/day/hour/minute/second/millisecond/microsecond/nanosecond as string.", "Syntax", "formatReadableTimeDelta(column[, maximum_unit, minimum_unit])", "Arguments", "column \u2014 A column with a numeric time delta.maximum_unit \u2014 Optional. Maximum unit to show.Acceptable values: nanoseconds, microseconds, milliseconds, seconds, minutes, hours, days, months, years.Default value: years.minimum_unit \u2014 Optional. Minimum unit to show. All smaller units are truncated.Acceptable values: nanoseconds, microseconds, milliseconds, seconds, minutes, hours, days, months, years.If explicitly specified value is bigger than maximum_unit, an exception will be thrown.Default value: seconds if maximum_unit is seconds or bigger, nanoseconds otherwise."], "Examples": ["SELECT    arrayJoin([100, 12345, 432546534]) AS elapsed,    formatReadableTimeDelta(elapsed) AS time_delta", "SELECT    arrayJoin([100, 12345, 432546534]) AS elapsed,    formatReadableTimeDelta(elapsed, 'minutes') AS time_delta", "SELECT    arrayJoin([100, 12345, 432546534.00000006]) AS elapsed,    formatReadableTimeDelta(elapsed, 'minutes', 'nanoseconds') AS time_delta"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["parseReadableSize"], "Feature": ["formatReadableSize(x)"], "Description": ["parseReadableSize", "Given a string containing a byte size and B, KiB, KB, MiB, MB, etc. as a unit (i.e. ISO/IEC 80000-13 or decimal byte unit), this function returns the corresponding number of bytes.\nIf the function is unable to parse the input value, it throws an exception.", "The inverse operations of this function are formatReadableSize and formatReadableDecimalSize.", "Syntax", "formatReadableSize(x)", "Arguments", "x : Readable size with ISO/IEC 80000-13 or decimal byte unit (String).", "Returned value", "Number of bytes, rounded up to the nearest integer (UInt64)."], "Examples": ["SELECT    arrayJoin(['1 B', '1 KiB', '3 MB', '5.314 KiB']) AS readable_sizes,      parseReadableSize(readable_sizes) AS sizes;"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["parseReadableSizeOrNull"], "Feature": ["parseReadableSizeOrNull(x)"], "Description": ["parseReadableSizeOrNull", "Given a string containing a byte size and B, KiB, KB, MiB, MB, etc. as a unit (i.e. ISO/IEC 80000-13 or decimal byte unit), this function returns the corresponding number of bytes.\nIf the function is unable to parse the input value, it returns NULL.", "The inverse operations of this function are formatReadableSize and formatReadableDecimalSize.", "Syntax", "parseReadableSizeOrNull(x)", "Arguments", "x : Readable size with ISO/IEC 80000-13  or decimal byte unit (String).", "Returned value", "Number of bytes, rounded up to the nearest integer, or NULL if unable to parse the input (Nullable(UInt64))."], "Examples": ["SELECT    arrayJoin(['1 B', '1 KiB', '3 MB', '5.314 KiB', 'invalid']) AS readable_sizes,      parseReadableSizeOrNull(readable_sizes) AS sizes;"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["parseReadableSizeOrZero"], "Feature": ["parseReadableSizeOrZero(x)"], "Description": ["parseReadableSizeOrZero", "Given a string containing a byte size and B, KiB, KB, MiB, MB, etc. as a unit (i.e. ISO/IEC 80000-13 or decimal byte unit), this function returns the corresponding number of bytes. If the function is unable to parse the input value, it returns 0.", "The inverse operations of this function are formatReadableSize and formatReadableDecimalSize.", "Syntax", "parseReadableSizeOrZero(x)", "Arguments", "x : Readable size with ISO/IEC 80000-13  or decimal byte unit  (String).", "Returned value", "Number of bytes, rounded up to the nearest integer, or 0 if unable to parse the input (UInt64)."], "Examples": ["SELECT    arrayJoin(['1 B', '1 KiB', '3 MB', '5.314 KiB', 'invalid']) AS readable_sizes,      parseReadableSizeOrZero(readable_sizes) AS sizes;"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["parseTimeDelta"], "Feature": ["parseTimeDelta(timestr)"], "Description": ["parseTimeDelta", "Parse a sequence of numbers followed by something resembling a time unit.", "Syntax", "parseTimeDelta(timestr)", "Arguments", "timestr \u2014 A sequence of numbers followed by something resembling a time unit.", "Returned value", "A floating-point number with the number of seconds."], "Examples": ["SELECT parseTimeDelta('11s+22min')", "SELECT parseTimeDelta('1yr2mo')"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["least"], "Feature": ["least(a, b)"], "Description": ["least", "Returns the smaller value of a and b.", "Syntax", "least(a, b)"], "Examples": ["least(a, b)"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["greatest"], "Feature": ["greatest(a, b)"], "Description": ["greatest", "Returns the larger value of a and b.", "Syntax", "greatest(a, b)"], "Examples": ["greatest(a, b)"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["uptime"], "Feature": ["uptime()"], "Description": ["uptime", "Returns the server\u2019s uptime in seconds.\nIf executed in the context of a distributed table, this function generates a normal column with values relevant to each shard. Otherwise it produces a constant value.", "Syntax", "uptime()", "Returned value", "Time value of seconds. UInt32."], "Examples": ["SELECT uptime() as Uptime;"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["version"], "Feature": ["version()"], "Description": ["version", "Returns the current version of ClickHouse as a string in the form of:", "Major versionMinor versionPatch versionNumber of commits since the previous stable release.", "major_version.minor_version.patch_version.number_of_commits_since_the_previous_stable_release", "If executed in the context of a distributed table, this function generates a normal column with values relevant to each shard. Otherwise, it produces a constant value.", "Syntax", "version()", "Arguments", "None.", "Returned value", "Current version of ClickHouse. String.", "Implementation details", "None."], "Examples": ["SELECT version()"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["buildId"], "Feature": ["buildId()"], "Description": ["buildId", "Returns the build ID generated by a compiler for the running ClickHouse server binary.\nIf executed in the context of a distributed table, this function generates a normal column with values relevant to each shard. Otherwise it produces a constant value.", "Syntax", "buildId()"], "Examples": ["buildId()"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["blockNumber"], "Feature": ["blockNumber()"], "Description": ["blockNumber", "Returns a monotonically increasing sequence number of the block containing the row.\nThe returned block number is updated on a best-effort basis, i.e. it may not be fully accurate.", "Syntax", "blockNumber()", "Returned value", "Sequence number of the data block where the row is located. UInt64."], "Examples": ["SELECT blockNumber()FROM(    SELECT *    FROM system.numbers    LIMIT 10) SETTINGS max_block_size = 2"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["rowNumberInBlock"], "Feature": ["rowNumberInBlock()"], "Description": ["rowNumberInBlock", "Returns for each block processed by rowNumberInBlock the number of the current row.\nThe returned number starts for each block at 0.", "Syntax", "rowNumberInBlock()", "Returned value", "Ordinal number of the row in the data block starting from 0. UInt64."], "Examples": ["SELECT rowNumberInBlock()FROM(    SELECT *    FROM system.numbers_mt    LIMIT 10) SETTINGS max_block_size = 2"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["rowNumberInAllBlocks"], "Feature": ["rowNumberInAllBlocks()"], "Description": ["rowNumberInAllBlocks", "Returns a unique row number for each row processed by rowNumberInAllBlocks. The returned numbers start at 0.", "Syntax", "rowNumberInAllBlocks()", "Returned value", "Ordinal number of the row in the data block starting from 0. UInt64."], "Examples": ["SELECT rowNumberInAllBlocks()FROM(    SELECT *    FROM system.numbers_mt    LIMIT 10)SETTINGS max_block_size = 2"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["neighbor"], "Feature": ["neighbor(column, offset[, default_value])"], "Description": ["neighbor", "The window function that provides access to a row at a specified offset before or after the current row of a given column.", "Syntax", "neighbor(column, offset[, default_value])", "The result of the function depends on the affected data blocks and the order of data in the block.", "NoteOnly returns neighbor inside the currently processed data block.\nBecause of this error-prone behavior the function is DEPRECATED, please use proper window functions instead.", "The order of rows during calculation of neighbor() can differ from the order of rows returned to the user.\nTo prevent that you can create a subquery with ORDER BY and call the function from outside the subquery.", "Arguments", "column \u2014 A column name or scalar expression.offset \u2014 The number of rows to look before or ahead of the current row in column. Int64.default_value \u2014 Optional. The returned value if offset is beyond the block boundaries. Type of data blocks affected.", "Returned values", "Value of column with offset distance from current row, if offset is not outside the block boundaries.The default value of column or default_value (if given), if offset is outside the block boundaries.", "NoteThe return type will be that of the data blocks affected or the default value type."], "Examples": ["SELECT number, neighbor(number, 2) FROM system.numbers LIMIT 10;", "SELECT number, neighbor(number, 2, 999) FROM system.numbers LIMIT 10;", "WITH toDate('2018-01-01') AS start_dateSELECT    toStartOfMonth(start_date + (number * 32)) AS month,    toInt32(month) % 100 AS money,    neighbor(money, -12) AS prev_year,    round(prev_year / money, 2) AS year_over_yearFROM numbers(16)"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["runningDifference"], "Feature": ["runningDifference(x)"], "Description": ["runningDifference", "Calculates the difference between two consecutive row values in the data block.\nReturns 0 for the first row, and for subsequent rows the difference to the previous row.", "NoteOnly returns differences inside the currently processed data block.\nBecause of this error-prone behavior the function is DEPRECATED, please use proper window functions instead.", "The result of the function depends on the affected data blocks and the order of data in the block.", "The order of rows during calculation of runningDifference() can differ from the order of rows returned to the user.\nTo prevent that you can create a subquery with ORDER BY and call the function from outside the subquery.", "Syntax", "runningDifference(x)"], "Examples": ["SELECT    EventID,    EventTime,    runningDifference(EventTime) AS deltaFROM(    SELECT        EventID,        EventTime    FROM events    WHERE EventDate = '2016-11-24'    ORDER BY EventTime ASC    LIMIT 5)", "SELECT    number,    runningDifference(number + 1) AS diffFROM numbers(100000)WHERE diff != 1", "set max_block_size=100000 -- default value is 65536!SELECT    number,    runningDifference(number + 1) AS diffFROM numbers(100000)WHERE diff != 1"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["runningDifferenceStartingWithFirstValue"], "Feature": ["runningDifferenceStartingWithFirstValue"], "Description": ["runningDifferenceStartingWithFirstValue", "NoteThis function is DEPRECATED (see the note for runningDifference).", "Same as runningDifference, but returns the value of the first row as the value on the first row."], "Examples": [], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["runningConcurrency"], "Feature": ["runningConcurrency(start, end)"], "Description": ["runningConcurrency", "Calculates the number of concurrent events.\nEach event has a start time and an end time. The start time is included in the event, while the end time is excluded. Columns with a start time and an end time must be of the same data type.\nThe function calculates the total number of active (concurrent) events for each event start time.", "TipEvents must be ordered by the start time in ascending order. If this requirement is violated the function raises an exception. Every data block is processed separately. If events from different data blocks overlap then they can not be processed correctly.", "Syntax", "runningConcurrency(start, end)", "Arguments", "start \u2014 A column with the start time of events. Date, DateTime, or DateTime64.end \u2014 A column with the end time of events. Date, DateTime, or DateTime64.", "Returned values", "The number of concurrent events at each event start time. UInt32"], "Examples": ["SELECT start, runningConcurrency(start, end) FROM example_table;"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["MACNumToString"], "Feature": ["MACNumToString(num)"], "Description": ["MACNumToString", "Interprets a UInt64 number as a MAC address in big endian format. Returns the corresponding MAC address in format AA:BB:CC:DD:EE:FF (colon-separated numbers in hexadecimal form) as string.", "Syntax", "MACNumToString(num)"], "Examples": ["MACNumToString(num)"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["MACStringToNum"], "Feature": ["MACStringToNum(s)"], "Description": ["MACStringToNum", "The inverse function of MACNumToString. If the MAC address has an invalid format, it returns 0.", "Syntax", "MACStringToNum(s)"], "Examples": ["MACStringToNum(s)"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["MACStringToOUI"], "Feature": ["MACStringToOUI(s)"], "Description": ["MACStringToOUI", "Given a MAC address in format AA:BB:CC:DD:EE:FF (colon-separated numbers in hexadecimal form), returns the first three octets as a UInt64 number. If the MAC address has an invalid format, it returns 0.", "Syntax", "MACStringToOUI(s)"], "Examples": ["MACStringToOUI(s)"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["getSizeOfEnumType"], "Feature": ["getSizeOfEnumType(value)"], "Description": ["getSizeOfEnumType", "Returns the number of fields in Enum.\nAn exception is thrown if the type is not Enum.", "Syntax", "getSizeOfEnumType(value)", "Arguments:", "value \u2014 Value of type Enum.", "Returned values", "The number of fields with Enum input values."], "Examples": ["SELECT getSizeOfEnumType( CAST('a' AS Enum8('a' = 1, 'b' = 2) ) ) AS x"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["blockSerializedSize"], "Feature": ["blockSerializedSize(value[, value[, ...]])"], "Description": ["blockSerializedSize", "Returns the size on disk without considering compression.", "blockSerializedSize(value[, value[, ...]])", "Arguments", "value \u2014 Any value.", "Returned values", "The number of bytes that will be written to disk for block of values without compression."], "Examples": ["SELECT blockSerializedSize(maxState(1)) as x"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["toColumnTypeName"], "Feature": ["toColumnTypeName(value)"], "Description": ["toColumnTypeName", "Returns the internal name of the data type that represents the value.", "Syntax", "toColumnTypeName(value)", "Arguments:", "value \u2014 Any type of value.", "Returned values", "The internal data type name used to represent value."], "Examples": ["SELECT toTypeName(CAST('2018-01-01 01:02:03' AS DateTime))", "SELECT toColumnTypeName(CAST('2018-01-01 01:02:03' AS DateTime))"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["dumpColumnStructure"], "Feature": ["dumpColumnStructure(value)"], "Description": ["dumpColumnStructure", "Outputs a detailed description of data structures in RAM", "dumpColumnStructure(value)", "Arguments:", "value \u2014 Any type of value.", "Returned values", "A description of the column structure used for representing value."], "Examples": ["SELECT dumpColumnStructure(CAST('2018-01-01 01:02:03', 'DateTime'))"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["defaultValueOfArgumentType"], "Feature": ["defaultValueOfArgumentType(expression)"], "Description": ["defaultValueOfArgumentType", "Returns the default value for the given data type.", "Does not include default values for custom columns set by the user.", "Syntax", "defaultValueOfArgumentType(expression)", "Arguments:", "expression \u2014 Arbitrary type of value or an expression that results in a value of an arbitrary type.", "Returned values", "0 for numbers.Empty string for strings.\u1d3a\u1d41\u1d38\u1d38 for Nullable."], "Examples": ["SELECT defaultValueOfArgumentType( CAST(1 AS Int8) )", "SELECT defaultValueOfArgumentType( CAST(1 AS Nullable(Int8) ) )"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["defaultValueOfTypeName"], "Feature": ["defaultValueOfTypeName(type)"], "Description": ["defaultValueOfTypeName", "Returns the default value for the given type name.", "Does not include default values for custom columns set by the user.", "defaultValueOfTypeName(type)", "Arguments:", "type \u2014 A string representing a type name.", "Returned values", "0 for numbers.Empty string for strings.\u1d3a\u1d41\u1d38\u1d38 for Nullable."], "Examples": ["SELECT defaultValueOfTypeName('Int8')", "SELECT defaultValueOfTypeName('Nullable(Int8)')"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["indexHint"], "Feature": ["SELECT * FROM table WHERE indexHint(<expression>)"], "Description": ["indexHint", "This function is intended for debugging and introspection. It ignores its argument and always returns 1. The arguments are not evaluated.", "But during index analysis, the argument of this function is assumed to be not wrapped in indexHint. This allows to select data in index ranges by the corresponding condition but without further filtering by this condition. The index in ClickHouse is sparse and using indexHint will yield more data than specifying the same condition directly.", "Syntax", "SELECT * FROM table WHERE indexHint(<expression>)", "Returned value", "1. Uint8."], "Examples": ["SELECT count() FROM ontime", "SELECT FlightDate AS k, count() FROM ontime GROUP BY k ORDER BY k", "SELECT FlightDate AS k, count() FROM ontime WHERE k = '2017-09-15' GROUP BY k ORDER BY k", "SELECT    FlightDate AS k,    count()FROM ontimeWHERE indexHint(k = '2017-09-15')GROUP BY kORDER BY k ASC"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["replicate"], "Feature": ["replicate(x, arr)"], "Description": ["replicate", "Creates an array with a single value.", "NoteThis function is used for the internal implementation of arrayJoin.", "Syntax", "replicate(x, arr)", "Arguments", "x \u2014 The value to fill the result array with.arr \u2014 An array. Array.", "Returned value", "An array of the lame length as arr filled with value x. Array."], "Examples": ["SELECT replicate(1, ['a', 'b', 'c']);"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["revision"], "Feature": ["revision()"], "Description": ["revision", "Returns the current ClickHouse server revision.", "Syntax", "revision()", "Returned value", "The current ClickHouse server revision. UInt32."], "Examples": ["SELECT revision();"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["filesystemAvailable"], "Feature": ["filesystemAvailable()"], "Description": ["filesystemAvailable", "Returns the amount of free space in the filesystem hosting the database persistence. The returned value is always smaller than total free space (filesystemFree) because some space is reserved for the operating system.", "Syntax", "filesystemAvailable()", "Returned value", "The amount of remaining space available in bytes. UInt64."], "Examples": ["SELECT formatReadableSize(filesystemAvailable()) AS \"Available space\";"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["filesystemUnreserved"], "Feature": ["filesystemUnreserved()"], "Description": ["filesystemUnreserved", "Returns the total amount of the free space on the filesystem hosting the database persistence. (previously filesystemFree). See also filesystemAvailable.", "Syntax", "filesystemUnreserved()", "Returned value", "The amount of free space in bytes. UInt64."], "Examples": ["SELECT formatReadableSize(filesystemUnreserved()) AS \"Free space\";"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["filesystemCapacity"], "Feature": ["filesystemCapacity()"], "Description": ["filesystemCapacity", "Returns the capacity of the filesystem in bytes. Needs the path to the data directory to be configured.", "Syntax", "filesystemCapacity()", "Returned value", "Capacity of the filesystem in bytes. UInt64."], "Examples": ["SELECT formatReadableSize(filesystemCapacity()) AS \"Capacity\";"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["initializeAggregation"], "Feature": ["initializeAggregation (aggregate_function, arg1, arg2, ..., argN)"], "Description": ["initializeAggregation", "Calculates the result of an aggregate function based on a single value. This function can be used to initialize aggregate functions with combinator -State. You can create states of aggregate functions and insert them to columns of type AggregateFunction or use initialized aggregates as default values.", "Syntax", "initializeAggregation (aggregate_function, arg1, arg2, ..., argN)", "Arguments", "aggregate_function \u2014 Name of the aggregation function to initialize. String.arg \u2014 Arguments of aggregate function.", "Returned value(s)", "Result of aggregation for every row passed to the function.", "The return type is the same as the return type of function, that initializeAggregation takes as first argument."], "Examples": ["SELECT uniqMerge(state) FROM (SELECT initializeAggregation('uniqState', number % 3) AS state FROM numbers(10000));", "SELECT finalizeAggregation(state), toTypeName(state) FROM (SELECT initializeAggregation('sumState', number % 3) AS state FROM numbers(5));", "CREATE TABLE metrics(    key UInt64,    value AggregateFunction(sum, UInt64) DEFAULT initializeAggregation('sumState', toUInt64(0)))ENGINE = AggregatingMergeTreeORDER BY key", "INSERT INTO metrics VALUES (0, initializeAggregation('sumState', toUInt64(42)))"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["finalizeAggregation"], "Feature": ["finalizeAggregation(state)"], "Description": ["finalizeAggregation", "Given a state of aggregate function, this function returns the result of aggregation (or finalized state when using a -State combinator).", "Syntax", "finalizeAggregation(state)", "Arguments", "state \u2014 State of aggregation. AggregateFunction.", "Returned value(s)", "Value/values that was aggregated.", "NoteThe return type is equal to that of any types which were aggregated."], "Examples": ["SELECT finalizeAggregation(( SELECT countState(number) FROM numbers(10)));", "SELECT finalizeAggregation(( SELECT sumState(number) FROM numbers(10)));", "SELECT finalizeAggregation(arrayReduce('anyState', [NULL, 2, 3]));", "WITH initializeAggregation('sumState', number) AS one_row_sum_stateSELECT    number,    finalizeAggregation(one_row_sum_state) AS one_row_sum,    runningAccumulate(one_row_sum_state) AS cumulative_sumFROM numbers(10);"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["runningAccumulate"], "Feature": ["runningAccumulate(agg_state[, grouping]);"], "Description": ["runningAccumulate", "Accumulates the states of an aggregate function for each row of a data block.", "NoteThe state is reset for each new block of data.\nBecause of this error-prone behavior the function is DEPRECATED, please use proper window functions instead.", "Syntax", "runningAccumulate(agg_state[, grouping]);", "Arguments", "agg_state \u2014 State of the aggregate function. AggregateFunction.grouping \u2014 Grouping key. Optional. The state of the function is reset if the grouping value is changed. It can be any of the supported data types for which the equality operator is defined.", "Returned value", "Each resulting row contains a result of the aggregate function, accumulated for all the input rows from 0 to the current position. runningAccumulate resets states for each new data block or when the grouping value changes.", "Type depends on the aggregate function used."], "Examples": ["SELECT k, runningAccumulate(sum_k) AS res FROM (SELECT number as k, sumState(k) AS sum_k FROM numbers(10) GROUP BY k ORDER BY k);", "SELECT    grouping,    item,    runningAccumulate(state, grouping) AS resFROM(    SELECT        toInt8(number / 4) AS grouping,        number AS item,        sumState(number) AS state    FROM numbers(15)    GROUP BY item    ORDER BY item ASC);"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["joinGet"], "Feature": ["joinGet(join_storage_table_name, `value_column`, join_keys)"], "Description": ["joinGet", "The function lets you extract data from the table the same way as from a dictionary. Gets the data from Join tables using the specified join key.", "NoteOnly supports tables created with the ENGINE = Join(ANY, LEFT, <join_keys>) statement.", "Syntax", "joinGet(join_storage_table_name, `value_column`, join_keys)", "Arguments", "join_storage_table_name \u2014 an identifier indicating where the search is performed.value_column \u2014 name of the column of the table that contains required data.join_keys \u2014 list of keys.", "NoteThe identifier is searched for in the default database (see setting default_database in the config file). To override the default database, use USE db_name or specify the database and the table through the separator db_name.db_table as in the example.", "Returned value", "Returns a list of values corresponded to the list of keys.", "NoteIf a certain key does not exist in source table then 0 or null will be returned based on join_use_nulls setting during table creation.\nMore info about join_use_nulls in Join operation."], "Examples": ["CREATE DATABASE db_test;CREATE TABLE db_test.id_val(`id` UInt32, `val` UInt32) ENGINE = Join(ANY, LEFT, id);INSERT INTO db_test.id_val VALUES (1, 11)(2, 12)(4, 13);SELECT * FROM db_test.id_val;", "SELECT number, joinGet(db_test.id_val, 'val', toUInt32(number)) from numbers(4);", "CREATE DATABASE db_test;CREATE TABLE db_test.id_val_nulls(`id` UInt32, `val` UInt32) ENGINE = Join(ANY, LEFT, id) SETTINGS join_use_nulls=1;INSERT INTO db_test.id_val_nulls VALUES (1, 11)(2, 12)(4, 13);SELECT * FROM db_test.id_val_nulls;", "SELECT number, joinGet(db_test.id_val_nulls, 'val', toUInt32(number)) from numbers(4);"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["joinGetOrNull"], "Feature": ["joinGetOrNull(join_storage_table_name, `value_column`, join_keys)"], "Description": ["joinGetOrNull", "Like joinGet but returns NULL when the key is missing instead of returning the default value.", "Syntax", "joinGetOrNull(join_storage_table_name, `value_column`, join_keys)", "Arguments", "join_storage_table_name \u2014 an identifier indicating where the search is performed.value_column \u2014 name of the column of the table that contains required data.join_keys \u2014 list of keys.", "NoteThe identifier is searched for in the default database (see setting default_database in the config file). To override the default database, use USE db_name or specify the database and the table through the separator db_name.db_table as in the example.", "Returned value", "Returns a list of values corresponded to the list of keys.", "NoteIf a certain key does not exist in source table then NULL is returned for that key."], "Examples": ["CREATE DATABASE db_test;CREATE TABLE db_test.id_val(`id` UInt32, `val` UInt32) ENGINE = Join(ANY, LEFT, id);INSERT INTO db_test.id_val VALUES (1, 11)(2, 12)(4, 13);SELECT * FROM db_test.id_val;", "SELECT number, joinGetOrNull(db_test.id_val, 'val', toUInt32(number)) from numbers(4);"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["catboostEvaluate"], "Feature": ["catboostEvaluate(path_to_model, feature_1, feature_2, ..., feature_n)"], "Description": ["catboostEvaluate", "NoteThis function is not available in ClickHouse Cloud.", "Evaluate an external catboost model. CatBoost is an open-source gradient boosting library developed by Yandex for machine learning.\nAccepts a path to a catboost model and model arguments (features). Returns Float64.", "Syntax", "catboostEvaluate(path_to_model, feature_1, feature_2, ..., feature_n)"], "Examples": ["SELECT feat1, ..., feat_n, catboostEvaluate('/path/to/model.bin', feat_1, ..., feat_n) AS predictionFROM data_table"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["throwIf"], "Feature": ["throwIf(x[, message[, error_code]])"], "Description": ["throwIf", "Throw an exception if argument x is true.", "Syntax", "throwIf(x[, message[, error_code]])", "Arguments", "x - the condition to check.message - a constant string providing a custom error message. Optional.error_code - A constant integer providing a custom error code. Optional.", "To use the error_code argument, configuration parameter allow_custom_error_code_in_throwif must be enabled."], "Examples": ["SELECT throwIf(number = 3, 'Too many') FROM numbers(10);"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["identity"], "Feature": ["identity(x)"], "Description": ["identity", "Returns its argument. Intended for debugging and testing. Allows to cancel using index, and get the query performance of a full scan. When the query is analyzed for possible use of an index, the analyzer ignores everything in identity functions. Also disables constant folding.", "Syntax", "identity(x)"], "Examples": ["SELECT identity(42);"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["getSetting"], "Feature": ["getSetting('custom_setting');"], "Description": ["getSetting", "Returns the current value of a custom setting.", "Syntax", "getSetting('custom_setting');", "Parameter", "custom_setting \u2014 The setting name. String.", "Returned value", "The setting's current value."], "Examples": ["SET custom_a = 123;SELECT getSetting('custom_a');"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["getSettingOrDefault"], "Feature": ["getSettingOrDefault('custom_setting', default_value);"], "Description": ["getSettingOrDefault", "Returns the current value of a custom setting or returns the default value specified in the 2nd argument if the custom setting is not set in the current profile.", "Syntax", "getSettingOrDefault('custom_setting', default_value);", "Parameter", "custom_setting \u2014 The setting name. String.default_value \u2014 Value to return if custom_setting is not set. Value may be of any data type or Null.", "Returned value", "The setting's current value or default_value if setting is not set."], "Examples": ["SELECT getSettingOrDefault('custom_undef1', 'my_value');SELECT getSettingOrDefault('custom_undef2', 100);SELECT getSettingOrDefault('custom_undef3', NULL);"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["isDecimalOverflow"], "Feature": ["isDecimalOverflow(d, [p])"], "Description": ["isDecimalOverflow", "Checks whether the Decimal value is outside its precision or outside the specified precision.", "Syntax", "isDecimalOverflow(d, [p])", "Arguments", "d \u2014 value. Decimal.p \u2014 precision. Optional. If omitted, the initial precision of the first argument is used. This parameter can be helpful to migrate data from/to another database or file. UInt8.", "Returned values", "1 \u2014 Decimal value has more digits then allowed by its precision,0 \u2014 Decimal value satisfies the specified precision."], "Examples": ["SELECT isDecimalOverflow(toDecimal32(1000000000, 0), 9),       isDecimalOverflow(toDecimal32(1000000000, 0)),       isDecimalOverflow(toDecimal32(-1000000000, 0), 9),       isDecimalOverflow(toDecimal32(-1000000000, 0));"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["countDigits"], "Feature": ["countDigits(x)"], "Description": ["countDigits", "Returns number of decimal digits need to represent a value.", "Syntax", "countDigits(x)", "Arguments", "x \u2014 Int or Decimal value.", "Returned value", "Number of digits. UInt8.", "NoteFor Decimal values takes into account their scales: calculates result over underlying integer type which is (value * scale). For example: countDigits(42) = 2, countDigits(42.000) = 5, countDigits(0.04200) = 4. I.e. you may check decimal overflow for Decimal64 with countDecimal(x) > 18. It's a slow variant of isDecimalOverflow."], "Examples": ["SELECT countDigits(toDecimal32(1, 9)), countDigits(toDecimal32(-1, 9)),       countDigits(toDecimal64(1, 18)), countDigits(toDecimal64(-1, 18)),       countDigits(toDecimal128(1, 38)), countDigits(toDecimal128(-1, 38));"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["errorCodeToName"], "Feature": ["errorCodeToName(1)"], "Description": ["errorCodeToName", "The textual name of an error code. LowCardinality(String).", "Syntax", "errorCodeToName(1)", "Result:", "UNSUPPORTED_METHOD"], "Examples": ["errorCodeToName(1)"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["tcpPort"], "Feature": ["tcpPort()"], "Description": ["tcpPort", "Returns native interface TCP port number listened by this server.\nIf executed in the context of a distributed table, this function generates a normal column with values relevant to each shard. Otherwise it produces a constant value.", "Syntax", "tcpPort()", "Arguments", "None.", "Returned value", "The TCP port number. UInt16."], "Examples": ["SELECT tcpPort();"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["currentProfiles"], "Feature": ["currentProfiles()"], "Description": ["currentProfiles", "Returns a list of the current settings profiles for the current user.", "The command SET PROFILE could be used to change the current setting profile. If the command SET PROFILE was not used the function returns the profiles specified at the current user's definition (see CREATE USER).", "Syntax", "currentProfiles()", "Returned value", "List of the current user settings profiles. Array(String)."], "Examples": ["currentProfiles()"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["enabledProfiles"], "Feature": ["enabledProfiles()"], "Description": ["enabledProfiles", "Returns settings profiles, assigned to the current user both explicitly and implicitly. Explicitly assigned profiles are the same as returned by the currentProfiles function. Implicitly assigned profiles include parent profiles of other assigned profiles, profiles assigned via granted roles, profiles assigned via their own settings, and the main default profile (see the default_profile section in the main server configuration file).", "Syntax", "enabledProfiles()", "Returned value", "List of the enabled settings profiles. Array(String)."], "Examples": ["enabledProfiles()"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["defaultProfiles"], "Feature": ["defaultProfiles()"], "Description": ["defaultProfiles", "Returns all the profiles specified at the current user's definition (see CREATE USER statement).", "Syntax", "defaultProfiles()", "Returned value", "List of the default settings profiles. Array(String)."], "Examples": ["defaultProfiles()"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["currentRoles"], "Feature": ["currentRoles()"], "Description": ["currentRoles", "Returns the roles assigned to the current user. The roles can be changed by the SET ROLE statement. If no SET ROLE statement was not, the function currentRoles returns the same as defaultRoles.", "Syntax", "currentRoles()", "Returned value", "A list of the current roles for the current user. Array(String)."], "Examples": ["currentRoles()"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["enabledRoles"], "Feature": ["enabledRoles()"], "Description": ["enabledRoles", "Returns the names of the current roles and the roles, granted to some of the current roles.", "Syntax", "enabledRoles()", "Returned value", "List of the enabled roles for the current user. Array(String)."], "Examples": ["enabledRoles()"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["defaultRoles"], "Feature": ["defaultRoles()"], "Description": ["defaultRoles", "Returns the roles which are enabled by default for the current user when he logs in. Initially these are all roles granted to the current user (see GRANT), but that can be changed with the SET DEFAULT ROLE statement.", "Syntax", "defaultRoles()", "Returned value", "List of the default roles for the current user. Array(String)."], "Examples": ["defaultRoles()"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["getServerPort"], "Feature": ["getServerPort(port_name)"], "Description": ["getServerPort", "Returns the server port number. When the port is not used by the server, throws an exception.", "Syntax", "getServerPort(port_name)", "Arguments", "port_name \u2014 The name of the server port. String. Possible values:'tcp_port''tcp_port_secure''http_port''https_port''interserver_http_port''interserver_https_port''mysql_port''postgresql_port''grpc_port''prometheus.port'", "Returned value", "The number of the server port. UInt16."], "Examples": ["SELECT getServerPort('tcp_port');"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["queryID"], "Feature": ["queryID()"], "Description": ["queryID", "Returns the ID of the current query. Other parameters of a query can be extracted from the system.query_log table via query_id.", "In contrast to initialQueryID function, queryID can return different results on different shards (see the example).", "Syntax", "queryID()", "Returned value", "The ID of the current query. String"], "Examples": ["CREATE TABLE tmp (str String) ENGINE = Log;INSERT INTO tmp (*) VALUES ('a');SELECT count(DISTINCT t) FROM (SELECT queryID() AS t FROM remote('127.0.0.{1..3}', currentDatabase(), 'tmp') GROUP BY queryID());"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["initialQueryID"], "Feature": ["initialQueryID()"], "Description": ["initialQueryID", "Returns the ID of the initial current query. Other parameters of a query can be extracted from the system.query_log table via initial_query_id.", "In contrast to queryID function, initialQueryID returns the same results on different shards (see example).", "Syntax", "initialQueryID()", "Returned value", "The ID of the initial current query. String"], "Examples": ["CREATE TABLE tmp (str String) ENGINE = Log;INSERT INTO tmp (*) VALUES ('a');SELECT count(DISTINCT t) FROM (SELECT initialQueryID() AS t FROM remote('127.0.0.{1..3}', currentDatabase(), 'tmp') GROUP BY queryID());"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["partitionID"], "Feature": ["partitionID(x[, y, ...]);"], "Description": ["partitionID", "Computes the partition ID.", "NoteThis function is slow and should not be called for large amount of rows.", "Syntax", "partitionID(x[, y, ...]);", "Arguments", "x \u2014 Column for which to return the partition ID.y, ... \u2014 Remaining N columns for which to return the partition ID (optional).", "Returned Value", "Partition ID that the row would belong to. String."], "Examples": ["DROP TABLE IF EXISTS tab;CREATE TABLE tab(  i int,  j int)ENGINE = MergeTreePARTITION BY iORDER BY tuple();INSERT INTO tab VALUES (1, 1), (1, 2), (1, 3), (2, 4), (2, 5), (2, 6);SELECT i, j, partitionID(i), _partition_id FROM tab ORDER BY i, j;"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["shardNum"], "Feature": ["shardNum()"], "Description": ["shardNum", "Returns the index of a shard which processes a part of data in a distributed query. Indices are started from 1.\nIf a query is not distributed then constant value 0 is returned.", "Syntax", "shardNum()", "Returned value", "Shard index or constant 0. UInt32."], "Examples": ["CREATE TABLE shard_num_example (dummy UInt8)    ENGINE=Distributed(test_cluster_two_shards_localhost, system, one, dummy);SELECT dummy, shardNum(), shardCount() FROM shard_num_example;"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["shardCount"], "Feature": ["shardCount()"], "Description": ["shardCount", "Returns the total number of shards for a distributed query.\nIf a query is not distributed then constant value 0 is returned.", "Syntax", "shardCount()", "Returned value", "Total number of shards or 0. UInt32.", "See Also", "shardNum() function example also contains shardCount() function call."], "Examples": ["shardCount()"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["getOSKernelVersion"], "Feature": ["getOSKernelVersion()"], "Description": ["getOSKernelVersion", "Returns a string with the current OS kernel version.", "Syntax", "getOSKernelVersion()", "Arguments", "None.", "Returned value", "The current OS kernel version. String."], "Examples": ["SELECT getOSKernelVersion();"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["zookeeperSessionUptime"], "Feature": ["zookeeperSessionUptime()"], "Description": ["zookeeperSessionUptime", "Returns the uptime of the current ZooKeeper session in seconds.", "Syntax", "zookeeperSessionUptime()", "Arguments", "None.", "Returned value", "Uptime of the current ZooKeeper session in seconds. UInt32."], "Examples": ["SELECT zookeeperSessionUptime();"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["generateRandomStructure"], "Feature": ["generateRandomStructure([number_of_columns, seed])"], "Description": ["generateRandomStructure", "Generates random table structure in a format column1_name column1_type, column2_name column2_type, ....", "Syntax", "generateRandomStructure([number_of_columns, seed])", "Arguments", "number_of_columns \u2014 The desired number of columns in the result table structure. If set to 0 or Null, the number of columns will be random from 1 to 128. Default value: Null.seed - Random seed to produce stable results. If seed is not specified or set to Null, it is randomly generated.", "All arguments must be constant.", "Returned value", "Randomly generated table structure. String."], "Examples": ["SELECT generateRandomStructure()", "SELECT generateRandomStructure(1)", "SELECT generateRandomStructure(NULL, 33)"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["structureToCapnProtoSchema"], "Feature": ["structureToCapnProtoSchema(structure)"], "Description": ["structureToCapnProtoSchema", "Converts ClickHouse table structure to CapnProto schema.", "Syntax", "structureToCapnProtoSchema(structure)", "Arguments", "structure \u2014 Table structure in a format column1_name column1_type, column2_name column2_type, ....root_struct_name \u2014 Name for root struct in CapnProto schema. Default value - Message;", "Returned value", "CapnProto schema. String."], "Examples": ["SELECT structureToCapnProtoSchema('column1 String, column2 UInt32, column3 Array(String)') FORMAT RawBLOB", "SELECT structureToCapnProtoSchema('column1 Nullable(String), column2 Tuple(element1 UInt32, element2 Array(String)), column3 Map(String, String)') FORMAT RawBLOB", "SELECT structureToCapnProtoSchema('column1 String, column2 UInt32', 'Root') FORMAT RawBLOB"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["structureToProtobufSchema"], "Feature": ["structureToProtobufSchema(structure)"], "Description": ["structureToProtobufSchema", "Converts ClickHouse table structure to Protobuf schema.", "Syntax", "structureToProtobufSchema(structure)", "Arguments", "structure \u2014 Table structure in a format column1_name column1_type, column2_name column2_type, ....root_message_name \u2014 Name for root message in Protobuf schema. Default value - Message;", "Returned value", "Protobuf schema. String."], "Examples": ["SELECT structureToProtobufSchema('column1 String, column2 UInt32, column3 Array(String)') FORMAT RawBLOB", "SELECT structureToProtobufSchema('column1 Nullable(String), column2 Tuple(element1 UInt32, element2 Array(String)), column3 Map(String, String)') FORMAT RawBLOB", "SELECT structureToProtobufSchema('column1 String, column2 UInt32', 'Root') FORMAT RawBLOB"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["formatQuery"], "Feature": ["formatQuery(query)formatQueryOrNull(query)"], "Description": ["formatQuery", "Returns a formatted, possibly multi-line, version of the given SQL query.", "Throws an exception if the query is not well-formed. To return NULL instead, function formatQueryOrNull() may be used.", "Syntax", "formatQuery(query)formatQueryOrNull(query)", "Arguments", "query - The SQL query to be formatted. String", "Returned value", "The formatted query. String."], "Examples": ["SELECT formatQuery('select a,    b FRom tab WHERE a > 3 and  b < 3');"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["formatQuerySingleLine"], "Feature": ["formatQuerySingleLine(query)formatQuerySingleLineOrNull(query)"], "Description": ["formatQuerySingleLine", "Like formatQuery() but the returned formatted string contains no line breaks.", "Throws an exception if the query is not well-formed. To return NULL instead, function formatQuerySingleLineOrNull() may be used.", "Syntax", "formatQuerySingleLine(query)formatQuerySingleLineOrNull(query)", "Arguments", "query - The SQL query to be formatted. String", "Returned value", "The formatted query. String."], "Examples": ["SELECT formatQuerySingleLine('select a,    b FRom tab WHERE a > 3 and  b < 3');"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["variantElement"], "Feature": ["variantElement(variant, type_name, [, default_value])"], "Description": ["variantElement", "Extracts a column with specified type from a Variant column.", "Syntax", "variantElement(variant, type_name, [, default_value])", "Arguments", "variant \u2014 Variant column. Variant.type_name \u2014 The name of the variant type to extract. String.default_value - The default value that will be used if variant doesn't have variant with specified type. Can be any type. Optional.", "Returned value", "Subcolumn of a Variant column with specified type."], "Examples": ["CREATE TABLE test (v Variant(UInt64, String, Array(UInt64))) ENGINE = Memory;INSERT INTO test VALUES (NULL), (42), ('Hello, World!'), ([1, 2, 3]);SELECT v, variantElement(v, 'String'), variantElement(v, 'UInt64'), variantElement(v, 'Array(UInt64)') FROM test;"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["variantType"], "Feature": ["variantType(variant)"], "Description": ["variantType", "Returns the variant type name for each row of Variant column. If row contains NULL, it returns 'None' for it.", "Syntax", "variantType(variant)", "Arguments", "variant \u2014 Variant column. Variant.", "Returned value", "Enum8 column with variant type name for each row."], "Examples": ["CREATE TABLE test (v Variant(UInt64, String, Array(UInt64))) ENGINE = Memory;INSERT INTO test VALUES (NULL), (42), ('Hello, World!'), ([1, 2, 3]);SELECT variantType(v) FROM test;", "SELECT toTypeName(variantType(v)) FROM test LIMIT 1;"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["minSampleSizeConversion"], "Feature": ["minSampleSizeConversion(baseline, mde, power, alpha)"], "Description": ["minSampleSizeConversion", "Calculates minimum required sample size for an A/B test comparing conversions (proportions) in two samples.", "Syntax", "minSampleSizeConversion(baseline, mde, power, alpha)", "Uses the formula described in this article. Assumes equal sizes of treatment and control groups. Returns the sample size required for one group (i.e. the sample size required for the whole experiment is twice the returned value).", "Arguments", "baseline \u2014 Baseline conversion. Float.mde \u2014 Minimum detectable effect (MDE) as percentage points (e.g. for a baseline conversion 0.25 the MDE 0.03 means an expected change to 0.25 \u00b1 0.03). Float.power \u2014 Required statistical power of a test (1 - probability of Type II error). Float.alpha \u2014 Required significance level of a test (probability of Type I error). Float.", "Returned value", "A named Tuple with 3 elements:", "\"minimum_sample_size\" \u2014 Required sample size. Float64.\"detect_range_lower\" \u2014 Lower bound of the range of values not detectable with the returned required sample size (i.e. all values less than or equal to \"detect_range_lower\" are detectable with the provided alpha and power). Calculated as baseline - mde. Float64.\"detect_range_upper\" \u2014 Upper bound of the range of values not detectable with the returned required sample size (i.e. all values greater than or equal to \"detect_range_upper\" are detectable with the provided alpha and power). Calculated as baseline + mde. Float64."], "Examples": ["SELECT minSampleSizeConversion(0.25, 0.03, 0.80, 0.05) AS sample_size;"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["minSampleSizeContinuous"], "Feature": ["minSampleSizeContinous(baseline, sigma, mde, power, alpha)"], "Description": ["minSampleSizeContinuous", "Calculates minimum required sample size for an A/B test comparing means of a continuous metric in two samples.", "Syntax", "minSampleSizeContinous(baseline, sigma, mde, power, alpha)", "Alias: minSampleSizeContinous", "Uses the formula described in this article. Assumes equal sizes of treatment and control groups. Returns the required sample size for one group (i.e. the sample size required for the whole experiment is twice the returned value). Also assumes equal variance of the test metric in treatment and control groups.", "Arguments", "baseline \u2014 Baseline value of a metric. Integer or Float.sigma \u2014 Baseline standard deviation of a metric. Integer or Float.mde \u2014 Minimum detectable effect (MDE) as percentage of the baseline value (e.g. for a baseline value 112.25 the MDE 0.03 means an expected change to 112.25 \u00b1 112.25*0.03). Integer or Float.power \u2014 Required statistical power of a test (1 - probability of Type II error). Integer or Float.alpha \u2014 Required significance level of a test (probability of Type I error). Integer or Float.", "Returned value", "A named Tuple with 3 elements:", "\"minimum_sample_size\" \u2014 Required sample size. Float64.\"detect_range_lower\" \u2014 Lower bound of the range of values not detectable with the returned required sample size (i.e. all values less than or equal to \"detect_range_lower\" are detectable with the provided alpha and power). Calculated as baseline * (1 - mde). Float64.\"detect_range_upper\" \u2014 Upper bound of the range of values not detectable with the returned required sample size (i.e. all values greater than or equal to \"detect_range_upper\" are detectable with the provided alpha and power). Calculated as baseline * (1 + mde). Float64."], "Examples": ["SELECT minSampleSizeContinous(112.25, 21.1, 0.03, 0.80, 0.05) AS sample_size;"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["connectionId"], "Feature": ["connectionId()"], "Description": ["connectionId", "Retrieves the connection ID of the client that submitted the current query and returns it as a UInt64 integer.", "Syntax", "connectionId()", "Alias: connection_id.", "Parameters", "None.", "Returned value", "The current connection ID. UInt64.", "Implementation details", "This function is most useful in debugging scenarios or for internal purposes within the MySQL handler. It was created for compatibility with MySQL's CONNECTION_ID function It is not typically used in production queries."], "Examples": ["SELECT connectionId();"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["getClientHTTPHeader"], "Feature": ["getClientHTTPHeader"], "Description": ["getClientHTTPHeader", "Get the value of an HTTP header.", "If there is no such header or the current request is not performed via the HTTP interface, the function returns an empty string.\nCertain HTTP headers (e.g., Authentication and X-ClickHouse-*) are restricted.", "The function requires the setting allow_get_client_http_header to be enabled.\nThe setting is not enabled by default for security reasons, because some headers, such as Cookie, could contain sensitive info.", "HTTP headers are case sensitive for this function.", "If the function is used in the context of a distributed query, it returns non-empty result only on the initiator node."], "Examples": [], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["showCertificate"], "Feature": ["showCertificate()"], "Description": ["showCertificate", "Shows information about the current server's Secure Sockets Layer (SSL) certificate if it has been configured. See Configuring SSL-TLS for more information on how to configure ClickHouse to use OpenSSL certificates to validate connections.", "Syntax", "showCertificate()", "Returned value", "Map of key-value pairs relating to the configured SSL certificate. Map(String, String)."], "Examples": ["SELECT showCertificate() FORMAT LineAsString;"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["lowCardinalityIndices"], "Feature": ["lowCardinalityIndices(col)"], "Description": ["lowCardinalityIndices", "Returns the position of a value in the dictionary of a LowCardinality column. Positions start at 1. Since LowCardinality have per-part dictionaries, this function may return different positions for the same value in different parts.", "Syntax", "lowCardinalityIndices(col)", "Arguments", "col \u2014 a low cardinality column. LowCardinality.", "Returned value", "The position of the value in the dictionary of the current part. UInt64."], "Examples": ["DROP TABLE IF EXISTS test;CREATE TABLE test (s LowCardinality(String)) ENGINE = Memory;-- create two parts:INSERT INTO test VALUES ('ab'), ('cd'), ('ab'), ('ab'), ('df');INSERT INTO test VALUES ('ef'), ('cd'), ('ab'), ('cd'), ('ef');SELECT s, lowCardinalityIndices(s) FROM test;"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["lowCardinalityKeys"], "Feature": ["lowCardinalityIndices(col)"], "Description": ["lowCardinalityKeys", "Returns the dictionary values of a LowCardinality column. If the block is smaller or larger than the dictionary size, the result will be truncated or extended with default values. Since LowCardinality have per-part dictionaries, this function may return different dictionary values in different parts.", "Syntax", "lowCardinalityIndices(col)", "Arguments", "col \u2014 a low cardinality column. LowCardinality.", "Returned value", "The dictionary keys. UInt64."], "Examples": ["DROP TABLE IF EXISTS test;CREATE TABLE test (s LowCardinality(String)) ENGINE = Memory;-- create two parts:INSERT INTO test VALUES ('ab'), ('cd'), ('ab'), ('ab'), ('df');INSERT INTO test VALUES ('ef'), ('cd'), ('ab'), ('cd'), ('ef');SELECT s, lowCardinalityKeys(s) FROM test;"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["displayName"], "Feature": ["displayName()"], "Description": ["displayName", "Returns the value of display_name from config or server Fully Qualified Domain Name (FQDN) if not set.", "Syntax", "displayName()", "Returned value", "Value of display_name from config or server FQDN if not set. String."], "Examples": ["SELECT displayName();"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["transactionID"], "Feature": ["transactionID()"], "Description": ["transactionID", "Returns the ID of a transaction.", "NoteThis function is part of an experimental feature set. Enable experimental transaction support by adding this setting to your configuration:<clickhouse>  <allow_experimental_transactions>1</allow_experimental_transactions></clickhouse>For more information see the page Transactional (ACID) support.", "Syntax", "transactionID()", "Returned value", "Returns a tuple consisting of start_csn, local_tid and host_id. Tuple.start_csn: Global sequential number, the newest commit timestamp that was seen when this transaction began. UInt64.local_tid: Local sequential number that is unique for each transaction started by this host within a specific start_csn. UInt64.host_id: UUID of the host that has started this transaction. UUID."], "Examples": ["BEGIN TRANSACTION;SELECT transactionID();ROLLBACK;"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["transactionLatestSnapshot"], "Feature": ["transactionLatestSnapshot()"], "Description": ["transactionLatestSnapshot", "Returns the newest snapshot (Commit Sequence Number) of a transaction that is available for reading.", "NoteThis function is part of an experimental feature set. Enable experimental transaction support by adding this setting to your configuration:<clickhouse>  <allow_experimental_transactions>1</allow_experimental_transactions></clickhouse>For more information see the page Transactional (ACID) support.", "Syntax", "transactionLatestSnapshot()", "Returned value", "Returns the latest snapshot (CSN) of a transaction. UInt64"], "Examples": ["BEGIN TRANSACTION;SELECT transactionLatestSnapshot();ROLLBACK;"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["transactionOldestSnapshot"], "Feature": ["transactionOldestSnapshot()"], "Description": ["transactionOldestSnapshot", "Returns the oldest snapshot (Commit Sequence Number) that is visible for some running transaction.", "NoteThis function is part of an experimental feature set. Enable experimental transaction support by adding this setting to your configuration:<clickhouse>  <allow_experimental_transactions>1</allow_experimental_transactions></clickhouse>For more information see the page Transactional (ACID) support.", "Syntax", "transactionOldestSnapshot()", "Returned value", "Returns the oldest snapshot (CSN) of a transaction. UInt64"], "Examples": ["BEGIN TRANSACTION;SELECT transactionLatestSnapshot();ROLLBACK;"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["getSubcolumn"], "Feature": ["getSubcolumn(col_name, subcol_name)"], "Description": ["getSubcolumn", "Takes a table expression or identifier and constant string with the name of the sub-column, and returns the requested sub-column extracted from the expression.", "Syntax", "getSubcolumn(col_name, subcol_name)", "Arguments", "col_name \u2014 Table expression or identifier. Expression, Identifier.subcol_name \u2014 The name of the sub-column. String.", "Returned value", "Returns the extracted sub-column."], "Examples": ["CREATE TABLE t_arr (arr Array(Tuple(subcolumn1 UInt32, subcolumn2 String))) ENGINE = MergeTree ORDER BY tuple();INSERT INTO t_arr VALUES ([(1, 'Hello'), (2, 'World')]), ([(3, 'This'), (4, 'is'), (5, 'subcolumn')]);SELECT getSubcolumn(arr, 'subcolumn1'), getSubcolumn(arr, 'subcolumn2') FROM t_arr;"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["getTypeSerializationStreams"], "Feature": ["getTypeSerializationStreams(col)"], "Description": ["getTypeSerializationStreams", "Enumerates stream paths of a data type.", "NoteThis function is intended for use by developers.", "Syntax", "getTypeSerializationStreams(col)", "Arguments", "col \u2014 Column or string representation of a data-type from which the data type will be detected.", "Returned value", "Returns an array with all the serialization sub-stream paths.Array(String)."], "Examples": ["SELECT getTypeSerializationStreams(tuple('a', 1, 'b', 2));", "SELECT getTypeSerializationStreams('Map(String, Int64)');"], "Category": ["Other Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/other-functions"], "Title": ["globalVariable"], "Feature": ["globalVariable(name)"], "Description": ["globalVariable", "Takes a constant string argument and returns the value of the global variable with that name. This function is intended for compatibility with MySQL and not needed or useful for normal operation of ClickHouse. Only few dummy global variables are defined.", "Syntax", "globalVariable(name)", "Arguments", "name \u2014 Global variable name. String.", "Returned value", "Returns the value of variable name."], "Examples": ["SELECT globalVariable('max_allowed_packet');"], "Category": ["Other Functions"]}
