{
    "HTML": [
        "https://clickhouse.com/docs/en/sql-reference/table-functions/mysql"
    ],
    "Title": [
        "mysql"
    ],
    "Feature": [
        "mysql({host:port, database, table, user, password[, replace_query, on_duplicate_clause] | named_collection[, option=value [,..]]})"
    ],
    "Description": [
        "mysql",
        "Allows SELECT and INSERT queries to be performed on data that is stored on a remote MySQL server.",
        "Syntax",
        "mysql({host:port, database, table, user, password[, replace_query, on_duplicate_clause] | named_collection[, option=value [,..]]})",
        "Parameters",
        "host:port \u2014 MySQL server address.database \u2014 Remote database name.table \u2014 Remote table name.user \u2014 MySQL user.password \u2014 User password.replace_query \u2014 Flag that converts INSERT INTO queries to REPLACE INTO. Possible values:0 - The query is executed as INSERT INTO.1 - The query is executed as REPLACE INTO.on_duplicate_clause \u2014 The ON DUPLICATE KEY on_duplicate_clause expression that is added to the INSERT query. Can be specified only with replace_query = 0 (if you simultaneously pass replace_query = 1 and on_duplicate_clause, ClickHouse generates an exception).\nExample: INSERT INTO t (c1,c2) VALUES ('a', 2) ON DUPLICATE KEY UPDATE c2 = c2 + 1;on_duplicate_clause here is UPDATE c2 = c2 + 1. See the MySQL documentation to find which on_duplicate_clause you can use with the ON DUPLICATE KEY clause.",
        "Arguments also can be passed using named collections. In this case host and port should be specified separately. This approach is recommended for production environment.",
        "Simple WHERE clauses such as =, !=, >, >=, <, <= are currently executed on the MySQL server.",
        "The rest of the conditions and the LIMIT sampling constraint are executed in ClickHouse only after the query to MySQL finishes.",
        "Supports multiple replicas that must be listed by |. For example:",
        "SELECT name FROM mysql(`mysql{1|2|3}:3306`, 'mysql_database', 'mysql_table', 'user', 'password');",
        "or",
        "SELECT name FROM mysql(`mysql1:3306|mysql2:3306|mysql3:3306`, 'mysql_database', 'mysql_table', 'user', 'password');",
        "Returned Value",
        "A table object with the same columns as the original MySQL table.",
        "NoteIn the INSERT query to distinguish table function mysql(...) from table name with column names list, you must use keywords FUNCTION or TABLE FUNCTION. See examples below."
    ],
    "Examples": [
        "SELECT * FROM mysql('localhost:3306', 'test', 'test', 'bayonet', '123');",
        "CREATE NAMED COLLECTION creds AS        host = 'localhost',        port = 3306,        database = 'test',        user = 'bayonet',        password = '123';SELECT * FROM mysql(creds, table='test');",
        "INSERT INTO FUNCTION mysql('localhost:3306', 'test', 'test', 'bayonet', '123', 1) (int_id, float) VALUES (1, 3);INSERT INTO TABLE FUNCTION mysql('localhost:3306', 'test', 'test', 'bayonet', '123', 0, 'UPDATE int_id = int_id + 1') (int_id, float) VALUES (1, 4);SELECT * FROM mysql('localhost:3306', 'test', 'test', 'bayonet', '123');",
        "CREATE TABLE mysql_copy(   `id` UInt64,   `datetime` DateTime('UTC'),   `description` String,)ENGINE = MergeTreeORDER BY (id,datetime);INSERT INTO mysql_copySELECT * FROM mysql('host:port', 'database', 'table', 'user', 'password');",
        "INSERT INTO mysql_copySELECT * FROM mysql('host:port', 'database', 'table', 'user', 'password')WHERE id > (SELECT max(id) from mysql_copy);"
    ],
    "Category": [
        "Table Functions"
    ]
}