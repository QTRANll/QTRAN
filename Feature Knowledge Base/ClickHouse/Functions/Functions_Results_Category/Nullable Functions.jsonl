{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/functions-for-nulls"], "Title": ["isNull"], "Feature": ["isNull(x)"], "Description": ["isNull", "Returns whether the argument is NULL.", "See also operator IS NULL.", "Syntax", "isNull(x)", "Alias: ISNULL.", "Arguments", "x \u2014 A value of non-compound data type.", "Returned value", "1 if x is NULL.0 if x is not NULL."], "Examples": ["SELECT x FROM t_null WHERE isNull(y);"], "Category": ["Nullable Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/functions-for-nulls"], "Title": ["isNullable"], "Feature": ["isNullable(x)"], "Description": ["isNullable", "Returns 1 if a column is Nullable (i.e allows NULL values), 0 otherwise.", "Syntax", "isNullable(x)", "Arguments", "x \u2014 column.", "Returned value", "1 if x allows NULL values. UInt8.0 if x does not allow NULL values. UInt8."], "Examples": ["CREATE TABLE tab (ordinary_col UInt32, nullable_col Nullable(UInt32)) ENGINE = Log;INSERT INTO tab (ordinary_col, nullable_col) VALUES (1,1), (2, 2), (3,3);SELECT isNullable(ordinary_col), isNullable(nullable_col) FROM tab;    "], "Category": ["Nullable Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/functions-for-nulls"], "Title": ["isNotNull"], "Feature": ["isNotNull(x)"], "Description": ["isNotNull", "Returns whether the argument is not NULL.", "See also operator IS NOT NULL.", "isNotNull(x)", "Arguments:", "x \u2014 A value of non-compound data type.", "Returned value", "1 if x is not NULL.0 if x is NULL."], "Examples": ["SELECT x FROM t_null WHERE isNotNull(y);"], "Category": ["Nullable Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/functions-for-nulls"], "Title": ["isNotDistinctFrom"], "Feature": ["isNotDistinctFrom(x, y)"], "Description": ["isNotDistinctFrom", "Performs null-safe comparison. Used to compare JOIN keys which contain NULL values in the JOIN ON section.\nThis function will consider two NULL values as identical and will return true, which is distinct from the usual\nequals behavior where comparing two NULL values would return NULL.", "NoteThis function is an internal function used by the implementation of JOIN ON. Please do not use it manually in queries.", "Syntax", "isNotDistinctFrom(x, y)", "Arguments", "x \u2014 first JOIN key.y \u2014 second JOIN key.", "Returned value", "true when x and y are both NULL.false otherwise."], "Examples": [], "Category": ["Nullable Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/functions-for-nulls"], "Title": ["isZeroOrNull"], "Feature": ["isZeroOrNull(x)"], "Description": ["isZeroOrNull", "Returns whether the argument is 0 (zero) or NULL.", "isZeroOrNull(x)", "Arguments:", "x \u2014 A value of non-compound data type.", "Returned value", "1 if x is 0 (zero) or NULL.0 else."], "Examples": ["SELECT x FROM t_null WHERE isZeroOrNull(y);"], "Category": ["Nullable Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/functions-for-nulls"], "Title": ["coalesce"], "Feature": ["coalesce(x,...)"], "Description": ["coalesce", "Returns the leftmost non-NULL argument.", "coalesce(x,...)", "Arguments:", "Any number of parameters of non-compound type. All parameters must be of mutually compatible data types.", "Returned values", "The first non-NULL argumentNULL, if all arguments are NULL."], "Examples": ["SELECT name, coalesce(mail, phone, CAST(telegram,'Nullable(String)')) FROM aBook;"], "Category": ["Nullable Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/functions-for-nulls"], "Title": ["ifNull"], "Feature": ["ifNull(x, alt)"], "Description": ["ifNull", "Returns an alternative value if the argument is NULL.", "ifNull(x, alt)", "Arguments:", "x \u2014 The value to check for NULL.alt \u2014 The value that the function returns if x is NULL.", "Returned values", "x if x is not NULL.alt if x is NULL."], "Examples": ["SELECT ifNull('a', 'b');", "SELECT ifNull(NULL, 'b');"], "Category": ["Nullable Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/functions-for-nulls"], "Title": ["nullIf"], "Feature": ["nullIf(x, y)"], "Description": ["nullIf", "Returns NULL if both arguments are equal.", "nullIf(x, y)", "Arguments:", "x, y \u2014 Values to compare. Must be of compatible types.", "Returned values", "NULL if the arguments are equal.x if the arguments are not equal."], "Examples": ["SELECT nullIf(1, 1);", "SELECT nullIf(1, 2);"], "Category": ["Nullable Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/functions-for-nulls"], "Title": ["assumeNotNull"], "Feature": ["assumeNotNull(x)"], "Description": ["assumeNotNull", "Returns the corresponding non-Nullable value for a value of Nullable type. If the original value is NULL, an arbitrary result can be returned. See also functions ifNull and coalesce.", "assumeNotNull(x)", "Arguments:", "x \u2014 The original value.", "Returned values", "The input value as non-Nullable type, if it is not NULL.An arbitrary value, if the input value is NULL."], "Examples": ["SELECT assumeNotNull(y) FROM table;", "SELECT toTypeName(assumeNotNull(y)) FROM t_null;"], "Category": ["Nullable Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/functions-for-nulls"], "Title": ["toNullable"], "Feature": ["toNullable(x)"], "Description": ["toNullable", "Converts the argument type to Nullable.", "toNullable(x)", "Arguments:", "x \u2014 A value of non-compound type.", "Returned value", "The input value but of Nullable type."], "Examples": ["SELECT toTypeName(10);", "SELECT toTypeName(toNullable(10));"], "Category": ["Nullable Functions"]}
