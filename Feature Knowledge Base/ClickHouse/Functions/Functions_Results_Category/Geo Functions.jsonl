{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/coordinates"], "Title": ["greatCircleDistance"], "Feature": ["greatCircleDistance(lon1Deg, lat1Deg, lon2Deg, lat2Deg)"], "Description": ["greatCircleDistance", "Calculates the distance between two points on the Earth\u2019s surface using the great-circle formula.", "greatCircleDistance(lon1Deg, lat1Deg, lon2Deg, lat2Deg)", "Input parameters", "lon1Deg \u2014 Longitude of the first point in degrees. Range: [-180\u00b0, 180\u00b0].lat1Deg \u2014 Latitude of the first point in degrees. Range: [-90\u00b0, 90\u00b0].lon2Deg \u2014 Longitude of the second point in degrees. Range: [-180\u00b0, 180\u00b0].lat2Deg \u2014 Latitude of the second point in degrees. Range: [-90\u00b0, 90\u00b0].", "Positive values correspond to North latitude and East longitude, and negative values correspond to South latitude and West longitude.", "Returned value", "The distance between two points on the Earth\u2019s surface, in meters.", "Generates an exception when the input parameter values fall outside of the range."], "Examples": ["SELECT greatCircleDistance(55.755831, 37.617673, -55.755831, -37.617673) AS greatCircleDistance"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/coordinates"], "Title": ["geoDistance"], "Feature": ["geoDistance(lon1Deg, lat1Deg, lon2Deg, lat2Deg)"], "Description": ["geoDistance", "Similar to greatCircleDistance but calculates the distance on WGS-84 ellipsoid instead of sphere. This is more precise approximation of the Earth Geoid.\nThe performance is the same as for greatCircleDistance (no performance drawback). It is recommended to use geoDistance to calculate the distances on Earth.", "Technical note: for close enough points we calculate the distance using planar approximation with the metric on the tangent plane at the midpoint of the coordinates.", "geoDistance(lon1Deg, lat1Deg, lon2Deg, lat2Deg)", "Input parameters", "lon1Deg \u2014 Longitude of the first point in degrees. Range: [-180\u00b0, 180\u00b0].lat1Deg \u2014 Latitude of the first point in degrees. Range: [-90\u00b0, 90\u00b0].lon2Deg \u2014 Longitude of the second point in degrees. Range: [-180\u00b0, 180\u00b0].lat2Deg \u2014 Latitude of the second point in degrees. Range: [-90\u00b0, 90\u00b0].", "Positive values correspond to North latitude and East longitude, and negative values correspond to South latitude and West longitude.", "Returned value", "The distance between two points on the Earth\u2019s surface, in meters.", "Generates an exception when the input parameter values fall outside of the range."], "Examples": ["SELECT geoDistance(38.8976, -77.0366, 39.9496, -75.1503) AS geoDistance"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/coordinates"], "Title": ["greatCircleAngle"], "Feature": ["greatCircleAngle(lon1Deg, lat1Deg, lon2Deg, lat2Deg)"], "Description": ["greatCircleAngle", "Calculates the central angle between two points on the Earth\u2019s surface using the great-circle formula.", "greatCircleAngle(lon1Deg, lat1Deg, lon2Deg, lat2Deg)", "Input parameters", "lon1Deg \u2014 Longitude of the first point in degrees.lat1Deg \u2014 Latitude of the first point in degrees.lon2Deg \u2014 Longitude of the second point in degrees.lat2Deg \u2014 Latitude of the second point in degrees.", "Returned value", "The central angle between two points in degrees."], "Examples": ["SELECT greatCircleAngle(0, 0, 45, 0) AS arc"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/coordinates"], "Title": ["pointInEllipses"], "Feature": ["pointInEllipses(x, y, x\u2080, y\u2080, a\u2080, b\u2080,...,x\u2099, y\u2099, a\u2099, b\u2099)"], "Description": ["pointInEllipses", "Checks whether the point belongs to at least one of the ellipses.\nCoordinates are geometric in the Cartesian coordinate system.", "pointInEllipses(x, y, x\u2080, y\u2080, a\u2080, b\u2080,...,x\u2099, y\u2099, a\u2099, b\u2099)", "Input parameters", "x, y \u2014 Coordinates of a point on the plane.x\u1d62, y\u1d62 \u2014 Coordinates of the center of the i-th ellipsis.a\u1d62, b\u1d62 \u2014 Axes of the i-th ellipsis in units of x, y coordinates.", "The input parameters must be 2+4\u22c5n, where n is the number of ellipses.", "Returned values", "1 if the point is inside at least one of the ellipses; 0if it is not."], "Examples": ["SELECT pointInEllipses(10., 10., 10., 9.1, 1., 0.9999)"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/coordinates"], "Title": ["pointInPolygon"], "Feature": ["pointInPolygon((x, y), [(a, b), (c, d) ...], ...)"], "Description": ["pointInPolygon", "Checks whether the point belongs to the polygon on the plane.", "pointInPolygon((x, y), [(a, b), (c, d) ...], ...)", "Input values", "(x, y) \u2014 Coordinates of a point on the plane. Data type \u2014 Tuple \u2014 A tuple of two numbers.[(a, b), (c, d) ...] \u2014 Polygon vertices. Data type \u2014 Array. Each vertex is represented by a pair of coordinates (a, b). Vertices should be specified in a clockwise or counterclockwise order. The minimum number of vertices is 3. The polygon must be constant.The function also supports polygons with holes (cut out sections). In this case, add polygons that define the cut out sections using additional arguments of the function. The function does not support non-simply-connected polygons.", "Returned values", "1 if the point is inside the polygon, 0 if it is not.\nIf the point is on the polygon boundary, the function may return either 0 or 1."], "Examples": ["SELECT pointInPolygon((3., 3.), [(6, 0), (8, 4), (5, 8), (0, 2)]) AS res"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/geohash"], "Title": ["Geohash"], "Feature": ["Geohash"], "Description": ["Geohash", "Geohash is the geocode system, which subdivides Earth\u2019s surface into buckets of grid shape and encodes each cell into a short string of letters and digits. It is a hierarchical data structure, so the longer the geohash string is, the more precise the geographic location will be.", "If you need to manually convert geographic coordinates to geohash strings, you can use geohash.org."], "Examples": [], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/geohash"], "Title": ["geohashEncode"], "Feature": ["geohashEncode(longitude, latitude, [precision])"], "Description": ["geohashEncode", "Encodes latitude and longitude as a geohash-string.", "Syntax", "geohashEncode(longitude, latitude, [precision])", "Input values", "longitude \u2014 Longitude part of the coordinate you want to encode. Floating in range[-180\u00b0, 180\u00b0]. Float. latitude \u2014 Latitude part of the coordinate you want to encode. Floating in range [-90\u00b0, 90\u00b0]. Float.precision (optional) \u2014 Length of the resulting encoded string. Defaults to 12. Integer in the range [1, 12]. Int8.", "NoteAll coordinate parameters must be of the same type: either Float32 or Float64.For the precision parameter, any value less than 1 or greater than 12 is silently converted to 12.", "Returned values", "Alphanumeric string of the encoded coordinate (modified version of the base32-encoding alphabet is used). String."], "Examples": ["SELECT geohashEncode(-5.60302734375, 42.593994140625, 0) AS res;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/geohash"], "Title": ["geohashDecode"], "Feature": ["geohashDecode(hash_str)"], "Description": ["geohashDecode", "Decodes any geohash-encoded string into longitude and latitude.", "Syntax", "geohashDecode(hash_str)", "Input values", "hash_str \u2014 Geohash-encoded string.", "Returned values", "Tuple (longitude, latitude) of Float64 values of longitude and latitude. Tuple(Float64)"], "Examples": ["SELECT geohashDecode('ezs42') AS res;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/geohash"], "Title": ["geohashesInBox"], "Feature": ["geohashesInBox(longitude_min, latitude_min, longitude_max, latitude_max, precision)"], "Description": ["geohashesInBox", "Returns an array of geohash-encoded strings of given precision that fall inside and intersect boundaries of given box, basically a 2D grid flattened into array.", "Syntax", "geohashesInBox(longitude_min, latitude_min, longitude_max, latitude_max, precision)", "Arguments", "longitude_min \u2014 Minimum longitude. Range: [-180\u00b0, 180\u00b0]. Float.latitude_min \u2014 Minimum latitude. Range: [-90\u00b0, 90\u00b0]. Float.longitude_max \u2014 Maximum longitude. Range: [-180\u00b0, 180\u00b0]. Float.latitude_max \u2014 Maximum latitude. Range: [-90\u00b0, 90\u00b0]. Float.precision \u2014 Geohash precision. Range: [1, 12]. UInt8.", "NoteAll coordinate parameters must be of the same type: either Float32 or Float64.", "Returned values", "Array of precision-long strings of geohash-boxes covering provided area, you should not rely on order of items. Array(String).[] - Empty array if minimum latitude and longitude values aren\u2019t less than corresponding maximum values.", "NoteFunction throws an exception if resulting array is over 10\u2019000\u2019000 items long."], "Examples": ["SELECT geohashesInBox(24.48, 40.56, 24.785, 40.81, 4) AS thasos;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["H3 Index"], "Feature": ["H3 Index"], "Description": ["H3 Index", "H3 is a geographical indexing system where Earth\u2019s surface divided into a grid of even hexagonal cells. This system is hierarchical, i. e. each hexagon on the top level (\"parent\") can be split into seven even but smaller ones (\"children\"), and so on.", "The level of the hierarchy is called resolution and can receive a value from 0 till 15, where 0 is the base level with the largest and coarsest cells.", "A latitude and longitude pair can be transformed to a 64-bit H3 index, identifying a grid cell.", "The H3 index is used primarily for bucketing locations and other geospatial manipulations.", "The full description of the H3 system is available at the Uber Engineering site."], "Examples": [], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3IsValid"], "Feature": ["h3IsValid(h3index)"], "Description": ["h3IsValid", "Verifies whether the number is a valid H3 index.", "Syntax", "h3IsValid(h3index)", "Parameter", "h3index \u2014 Hexagon index number. UInt64.", "Returned values", "1 \u2014 The number is a valid H3 index. UInt8.0 \u2014 The number is not a valid H3 index. UInt8."], "Examples": ["SELECT h3IsValid(630814730351855103) AS h3IsValid;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3GetResolution"], "Feature": ["h3GetResolution(h3index)"], "Description": ["h3GetResolution", "Defines the resolution of the given H3 index.", "Syntax", "h3GetResolution(h3index)", "Parameter", "h3index \u2014 Hexagon index number. UInt64.", "Returned values", "Index resolution. Range: [0, 15]. UInt8.If the index is not valid, the function returns a random value. Use h3IsValid to verify the index. UInt8."], "Examples": ["SELECT h3GetResolution(639821929606596015) AS resolution;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3EdgeAngle"], "Feature": ["h3EdgeAngle(resolution)"], "Description": ["h3EdgeAngle", "Calculates the average length of the H3 hexagon edge in grades.", "Syntax", "h3EdgeAngle(resolution)", "Parameter", "resolution \u2014 Index resolution. UInt8. Range: [0, 15].", "Returned values", "The average length of the H3 hexagon edge in grades. Float64."], "Examples": ["SELECT h3EdgeAngle(10) AS edgeAngle;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3EdgeLengthM"], "Feature": ["h3EdgeLengthM(resolution)"], "Description": ["h3EdgeLengthM", "Calculates the average length of the H3 hexagon edge in meters.", "Syntax", "h3EdgeLengthM(resolution)", "Parameter", "resolution \u2014 Index resolution. UInt8. Range: [0, 15].", "Returned values", "The average length of the H3 hexagon edge in meters. Float64."], "Examples": ["SELECT h3EdgeLengthM(15) AS edgeLengthM;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3EdgeLengthKm"], "Feature": ["h3EdgeLengthKm(resolution)"], "Description": ["h3EdgeLengthKm", "Calculates the average length of the H3 hexagon edge in kilometers.", "Syntax", "h3EdgeLengthKm(resolution)", "Parameter", "resolution \u2014 Index resolution. UInt8. Range: [0, 15].", "Returned values", "The average length of the H3 hexagon edge in kilometers. Float64."], "Examples": ["SELECT h3EdgeLengthKm(15) AS edgeLengthKm;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["geoToH3"], "Feature": ["geoToH3(lon, lat, resolution)"], "Description": ["geoToH3", "Returns H3 point index (lon, lat) with specified resolution.", "Syntax", "geoToH3(lon, lat, resolution)", "Arguments", "lon \u2014 Longitude. Float64.lat \u2014 Latitude. Float64.resolution \u2014 Index resolution. Range: [0, 15]. UInt8.", "Returned values", "Hexagon index number. UInt64.0 in case of error. UInt64."], "Examples": ["SELECT geoToH3(37.79506683, 55.71290588, 15) AS h3Index;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3ToGeo"], "Feature": ["h3ToGeo(h3Index)"], "Description": ["h3ToGeo", "Returns the centroid longitude and latitude corresponding to the provided H3 index.", "Syntax", "h3ToGeo(h3Index)", "Arguments", "h3Index \u2014 H3 Index. UInt64.", "Returned values", "A tuple consisting of two values: tuple(lon,lat). lon \u2014 Longitude. Float64. lat \u2014 Latitude. Float64."], "Examples": ["SELECT h3ToGeo(644325524701193974) AS coordinates;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3ToGeoBoundary"], "Feature": ["h3ToGeoBoundary(h3Index)"], "Description": ["h3ToGeoBoundary", "Returns array of pairs (lon, lat), which corresponds to the boundary of the provided H3 index.", "Syntax", "h3ToGeoBoundary(h3Index)", "Arguments", "h3Index \u2014 H3 Index. UInt64.", "Returned values", "Array of pairs '(lon, lat)'. Array(Float64, Float64)."], "Examples": ["SELECT h3ToGeoBoundary(644325524701193974) AS coordinates;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3kRing"], "Feature": ["h3kRing(h3index, k)"], "Description": ["h3kRing", " Lists all the H3 hexagons in the raduis of k from the given hexagon in random order.", "Syntax", "h3kRing(h3index, k)", "Arguments", "h3index \u2014 Hexagon index number. UInt64.k \u2014 Radius. integer", "Returned values", "Array of H3 indexes. Array(UInt64)."], "Examples": ["SELECT arrayJoin(h3kRing(644325529233966508, 1)) AS h3index;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3GetBaseCell"], "Feature": ["h3GetBaseCell(index)"], "Description": ["h3GetBaseCell", "Returns the base cell number of the H3 index.", "Syntax", "h3GetBaseCell(index)", "Parameter", "index \u2014 Hexagon index number. UInt64.", "Returned value", "Hexagon base cell number. UInt8."], "Examples": ["SELECT h3GetBaseCell(612916788725809151) AS basecell;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3HexAreaM2"], "Feature": ["h3HexAreaM2(resolution)"], "Description": ["h3HexAreaM2", "Returns average hexagon area in square meters at the given resolution.", "Syntax", "h3HexAreaM2(resolution)", "Parameter", "resolution \u2014 Index resolution. Range: [0, 15]. UInt8.", "Returned value", "Area in square meters. Float64."], "Examples": ["SELECT h3HexAreaM2(13) AS area;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3HexAreaKm2"], "Feature": ["h3HexAreaKm2(resolution)"], "Description": ["h3HexAreaKm2", "Returns average hexagon area in square kilometers at the given resolution.", "Syntax", "h3HexAreaKm2(resolution)", "Parameter", "resolution \u2014 Index resolution. Range: [0, 15]. UInt8.", "Returned value", "Area in square kilometers. Float64."], "Examples": ["SELECT h3HexAreaKm2(13) AS area;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3IndexesAreNeighbors"], "Feature": ["h3IndexesAreNeighbors(index1, index2)"], "Description": ["h3IndexesAreNeighbors", "Returns whether or not the provided H3 indexes are neighbors.", "Syntax", "h3IndexesAreNeighbors(index1, index2)", "Arguments", "index1 \u2014 Hexagon index number. UInt64.index2 \u2014 Hexagon index number. UInt64.", "Returned value", "1 \u2014 Indexes are neighbours. UInt8.0 \u2014 Indexes are not neighbours. UInt8."], "Examples": ["SELECT h3IndexesAreNeighbors(617420388351344639, 617420388352655359) AS n;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3ToChildren"], "Feature": ["h3ToChildren(index, resolution)"], "Description": ["h3ToChildren", "Returns an array of child indexes for the given H3 index.", "Syntax", "h3ToChildren(index, resolution)", "Arguments", "index \u2014 Hexagon index number. UInt64.resolution \u2014 Index resolution. Range: [0, 15]. UInt8.", "Returned values", "Array of the child H3-indexes. Array(UInt64)."], "Examples": ["SELECT h3ToChildren(599405990164561919, 6) AS children;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3ToParent"], "Feature": ["h3ToParent(index, resolution)"], "Description": ["h3ToParent", "Returns the parent (coarser) index containing the given H3 index.", "Syntax", "h3ToParent(index, resolution)", "Arguments", "index \u2014 Hexagon index number. UInt64.resolution \u2014 Index resolution. Range: [0, 15]. UInt8.", "Returned value", "Parent H3 index. UInt64."], "Examples": ["SELECT h3ToParent(599405990164561919, 3) AS parent;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3ToString"], "Feature": ["h3ToString(index)"], "Description": ["h3ToString", "Converts the H3Index representation of the index to the string representation.", "h3ToString(index)", "Parameter", "index \u2014 Hexagon index number. UInt64.", "Returned value", "String representation of the H3 index. String."], "Examples": ["SELECT h3ToString(617420388352917503) AS h3_string;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["stringToH3"], "Feature": ["stringToH3(index_str)"], "Description": ["stringToH3", "Converts the string representation to the H3Index (UInt64) representation.", "Syntax", "stringToH3(index_str)", "Parameter", "index_str \u2014 String representation of the H3 index. String.", "Returned value", "Hexagon index number. Returns 0 on error. UInt64."], "Examples": ["SELECT stringToH3('89184926cc3ffff') AS index;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3GetResolution"], "Feature": ["h3GetResolution(index)"], "Description": ["h3GetResolution", "Returns the resolution of the H3 index.", "Syntax", "h3GetResolution(index)", "Parameter", "index \u2014 Hexagon index number. UInt64.", "Returned value", "Index resolution. Range: [0, 15]. UInt8."], "Examples": ["SELECT h3GetResolution(617420388352917503) AS res;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3IsResClassIII"], "Feature": ["h3IsResClassIII(index)"], "Description": ["h3IsResClassIII", "Returns whether H3 index has a resolution with Class III orientation.", "Syntax", "h3IsResClassIII(index)", "Parameter", "index \u2014 Hexagon index number. UInt64.", "Returned value", "1 \u2014 Index has a resolution with Class III orientation. UInt8.0 \u2014 Index doesn't have a resolution with Class III orientation. UInt8."], "Examples": ["SELECT h3IsResClassIII(617420388352917503) AS res;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3IsPentagon"], "Feature": ["h3IsPentagon(index)"], "Description": ["h3IsPentagon", "Returns whether this H3 index represents a pentagonal cell.", "Syntax", "h3IsPentagon(index)", "Parameter", "index \u2014 Hexagon index number. UInt64.", "Returned value", "1 \u2014 Index represents a pentagonal cell. UInt8.0 \u2014 Index doesn't represent a pentagonal cell. UInt8."], "Examples": ["SELECT h3IsPentagon(644721767722457330) AS pentagon;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3GetFaces"], "Feature": ["h3GetFaces(index)"], "Description": ["h3GetFaces", "Returns icosahedron faces intersected by a given H3 index.", "Syntax", "h3GetFaces(index)", "Parameter", "index \u2014 Hexagon index number. UInt64.", "Returned values", "Array containing icosahedron faces intersected by a given H3 index. Array(UInt64)."], "Examples": ["SELECT h3GetFaces(599686042433355775) AS faces;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3CellAreaM2"], "Feature": ["h3CellAreaM2(index)"], "Description": ["h3CellAreaM2", "Returns the exact area of a specific cell in square meters corresponding to the given input H3 index.", "Syntax", "h3CellAreaM2(index)", "Parameter", "index \u2014 Hexagon index number. UInt64.", "Returned value", "Cell area in square meters. Float64."], "Examples": ["SELECT h3CellAreaM2(579205133326352383) AS area;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3CellAreaRads2"], "Feature": ["h3CellAreaRads2(index)"], "Description": ["h3CellAreaRads2", "Returns the exact area of a specific cell in square radians corresponding to the given input H3 index.", "Syntax", "h3CellAreaRads2(index)", "Parameter", "index \u2014 Hexagon index number. UInt64.", "Returned value", "Cell area in square radians. Float64."], "Examples": ["SELECT h3CellAreaRads2(579205133326352383) AS area;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3ToCenterChild"], "Feature": ["h3ToCenterChild(index, resolution)"], "Description": ["h3ToCenterChild", "Returns the center child (finer) H3 index contained by given H3 at the given resolution.", "Syntax", "h3ToCenterChild(index, resolution)", "Parameter", "index \u2014 Hexagon index number. UInt64.resolution \u2014 Index resolution. Range: [0, 15]. UInt8.", "Returned values", "H3 index of the center child contained by given H3 at the given resolution. UInt64."], "Examples": ["SELECT h3ToCenterChild(577023702256844799,1) AS centerToChild;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3ExactEdgeLengthM"], "Feature": ["h3ExactEdgeLengthM(index)"], "Description": ["h3ExactEdgeLengthM", "Returns the exact edge length of the unidirectional edge represented by the input h3 index in meters.", "Syntax", "h3ExactEdgeLengthM(index)", "Parameter", "index \u2014 Hexagon index number. UInt64.", "Returned value", "Exact edge length in meters. Float64."], "Examples": ["SELECT h3ExactEdgeLengthM(1310277011704381439) AS exactEdgeLengthM;;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3ExactEdgeLengthKm"], "Feature": ["h3ExactEdgeLengthKm(index)"], "Description": ["h3ExactEdgeLengthKm", "Returns the exact edge length of the unidirectional edge represented by the input h3 index in kilometers.", "Syntax", "h3ExactEdgeLengthKm(index)", "Parameter", "index \u2014 Hexagon index number. UInt64.", "Returned value", "Exact edge length in kilometers. Float64."], "Examples": ["SELECT h3ExactEdgeLengthKm(1310277011704381439) AS exactEdgeLengthKm;;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3ExactEdgeLengthRads"], "Feature": ["h3ExactEdgeLengthRads(index)"], "Description": ["h3ExactEdgeLengthRads", "Returns the exact edge length of the unidirectional edge represented by the input h3 index in radians.", "Syntax", "h3ExactEdgeLengthRads(index)", "Parameter", "index \u2014 Hexagon index number. UInt64.", "Returned value", "Exact edge length in radians. Float64."], "Examples": ["SELECT h3ExactEdgeLengthRads(1310277011704381439) AS exactEdgeLengthRads;;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3NumHexagons"], "Feature": ["h3NumHexagons(resolution)"], "Description": ["h3NumHexagons", "Returns the number of unique H3 indices at the given resolution.", "Syntax", "h3NumHexagons(resolution)", "Parameter", "resolution \u2014 Index resolution. Range: [0, 15]. UInt8.", "Returned value", "Number of H3 indices. Int64."], "Examples": ["SELECT h3NumHexagons(3) AS numHexagons;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3PointDistM"], "Feature": ["h3PointDistM(lat1, lon1, lat2, lon2)"], "Description": ["h3PointDistM", "Returns the \"great circle\" or \"haversine\" distance between pairs of GeoCoord points (latitude/longitude) pairs in meters.", "Syntax", "h3PointDistM(lat1, lon1, lat2, lon2)", "Arguments", "lat1, lon1 \u2014 Latitude and Longitude of point1 in degrees. Float64.lat2, lon2 \u2014 Latitude and Longitude of point2 in degrees. Float64.", "Returned values", "Haversine or great circle distance in meters.Float64."], "Examples": ["select h3PointDistM(-10.0 ,0.0, 10.0, 0.0) as h3PointDistM;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3PointDistKm"], "Feature": ["h3PointDistKm(lat1, lon1, lat2, lon2)"], "Description": ["h3PointDistKm", "Returns the \"great circle\" or \"haversine\" distance between pairs of GeoCoord points (latitude/longitude) pairs in kilometers.", "Syntax", "h3PointDistKm(lat1, lon1, lat2, lon2)", "Arguments", "lat1, lon1 \u2014 Latitude and Longitude of point1 in degrees. Float64.lat2, lon2 \u2014 Latitude and Longitude of point2 in degrees. Float64.", "Returned values", "Haversine or great circle distance in kilometers. Float64."], "Examples": ["select h3PointDistKm(-10.0 ,0.0, 10.0, 0.0) as h3PointDistKm;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3PointDistRads"], "Feature": ["h3PointDistRads(lat1, lon1, lat2, lon2)"], "Description": ["h3PointDistRads", "Returns the \"great circle\" or \"haversine\" distance between pairs of GeoCoord points (latitude/longitude) pairs in radians.", "Syntax", "h3PointDistRads(lat1, lon1, lat2, lon2)", "Arguments", "lat1, lon1 \u2014 Latitude and Longitude of point1 in degrees. Float64.lat2, lon2 \u2014 Latitude and Longitude of point2 in degrees. Float64.", "Returned values", "Haversine or great circle distance in radians. Float64."], "Examples": ["select h3PointDistRads(-10.0 ,0.0, 10.0, 0.0) as h3PointDistRads;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3GetRes0Indexes"], "Feature": ["h3GetRes0Indexes()"], "Description": ["h3GetRes0Indexes", "Returns an array of all the resolution 0 H3 indexes.", "Syntax", "h3GetRes0Indexes()", "Returned values", "Array of all the resolution 0 H3 indexes. Array(UInt64)."], "Examples": ["select h3GetRes0Indexes as indexes ;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3GetPentagonIndexes"], "Feature": ["h3GetPentagonIndexes(resolution)"], "Description": ["h3GetPentagonIndexes", "Returns all the pentagon H3 indexes at the specified resolution.", "Syntax", "h3GetPentagonIndexes(resolution)", "Parameter", "resolution \u2014 Index resolution. Range: [0, 15]. UInt8.", "Returned value", "Array of all pentagon H3 indexes. Array(UInt64)."], "Examples": ["SELECT h3GetPentagonIndexes(3) AS indexes;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3Line"], "Feature": ["h3Line(start,end)"], "Description": ["h3Line", "Returns the line of indices between the two indices that are provided.", "Syntax", "h3Line(start,end)", "Parameter", "start \u2014 Hexagon index number that represents a starting point. UInt64.end \u2014 Hexagon index number that represents an ending point. UInt64.", "Returned value", "Array of h3 indexes representing the line of indices between the two provided indices. Array(UInt64)."], "Examples": [" SELECT h3Line(590080540275638271,590103561300344831) as indexes;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3Distance"], "Feature": ["h3Distance(start,end)"], "Description": ["h3Distance", "Returns the distance in grid cells between the two indices that are provided.", "Syntax", "h3Distance(start,end)", "Parameter", "start \u2014 Hexagon index number that represents a starting point. UInt64.end \u2014 Hexagon index number that represents an ending point. UInt64.", "Returned value", "Number of grid cells. Int64.", "Returns a negative number if finding the distance fails."], "Examples": [" SELECT h3Distance(590080540275638271,590103561300344831) as distance;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3HexRing"], "Feature": ["h3HexRing(index, k)"], "Description": ["h3HexRing", "Returns the indexes of the hexagonal ring centered at the provided origin h3Index and length k.", "Returns 0 if no pentagonal distortion was encountered.", "Syntax", "h3HexRing(index, k)", "Parameter", "index \u2014 Hexagon index number that represents the origin. UInt64.k \u2014 Distance. UInt64.", "Returned values", "Array of H3 indexes. Array(UInt64)."], "Examples": [" SELECT h3HexRing(590080540275638271, toUInt16(1)) AS hexRing;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3GetUnidirectionalEdge"], "Feature": ["h3GetUnidirectionalEdge(originIndex, destinationIndex)"], "Description": ["h3GetUnidirectionalEdge", "Returns a unidirectional edge H3 index based on the provided origin and destination and returns 0 on error.", "Syntax", "h3GetUnidirectionalEdge(originIndex, destinationIndex)", "Parameter", "originIndex \u2014 Origin Hexagon index number. UInt64.destinationIndex \u2014 Destination Hexagon index number. UInt64.", "Returned value", "Unidirectional Edge Hexagon Index number. UInt64."], "Examples": [" SELECT h3GetUnidirectionalEdge(599686042433355775, 599686043507097599) as edge;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3UnidirectionalEdgeIsValid"], "Feature": ["h3UnidirectionalEdgeisValid(index)"], "Description": ["h3UnidirectionalEdgeIsValid", "Determines if the provided H3Index is a valid unidirectional edge index. Returns 1 if it's a unidirectional edge and 0 otherwise.", "Syntax", "h3UnidirectionalEdgeisValid(index)", "Parameter", "index \u2014 Hexagon index number. UInt64.", "Returned value", "1 \u2014 The H3 index is a valid unidirectional edge. UInt8.0 \u2014 The H3 index is not a valid unidirectional edge. UInt8."], "Examples": [" SELECT h3UnidirectionalEdgeIsValid(1248204388774707199) as validOrNot;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3GetOriginIndexFromUnidirectionalEdge"], "Feature": ["h3GetOriginIndexFromUnidirectionalEdge(edge)"], "Description": ["h3GetOriginIndexFromUnidirectionalEdge", "Returns the origin hexagon index from the unidirectional edge H3Index.", "Syntax", "h3GetOriginIndexFromUnidirectionalEdge(edge)", "Parameter", "edge \u2014 Hexagon index number that represents a unidirectional edge. UInt64.", "Returned value", "Origin Hexagon Index number. UInt64."], "Examples": [" SELECT h3GetOriginIndexFromUnidirectionalEdge(1248204388774707197) as origin;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3GetDestinationIndexFromUnidirectionalEdge"], "Feature": ["h3GetDestinationIndexFromUnidirectionalEdge(edge)"], "Description": ["h3GetDestinationIndexFromUnidirectionalEdge", "Returns the destination hexagon index from the unidirectional edge H3Index.", "Syntax", "h3GetDestinationIndexFromUnidirectionalEdge(edge)", "Parameter", "edge \u2014 Hexagon index number that represents a unidirectional edge. UInt64.", "Returned value", "Destination Hexagon Index number. UInt64."], "Examples": [" SELECT h3GetDestinationIndexFromUnidirectionalEdge(1248204388774707197) as destination;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3GetIndexesFromUnidirectionalEdge"], "Feature": ["h3GetIndexesFromUnidirectionalEdge(edge)"], "Description": ["h3GetIndexesFromUnidirectionalEdge", "Returns the origin and destination hexagon indexes from the given unidirectional edge H3Index.", "Syntax", "h3GetIndexesFromUnidirectionalEdge(edge)", "Parameter", "edge \u2014 Hexagon index number that represents a unidirectional edge. UInt64.", "Returned value", "A tuple consisting of two values tuple(origin,destination):", "origin \u2014 Origin Hexagon index number. UInt64.destination \u2014 Destination Hexagon index number. UInt64.", "Returns (0,0) if the provided input is not valid."], "Examples": [" SELECT h3GetIndexesFromUnidirectionalEdge(1248204388774707199) as indexes;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3GetUnidirectionalEdgesFromHexagon"], "Feature": ["h3GetUnidirectionalEdgesFromHexagon(index)"], "Description": ["h3GetUnidirectionalEdgesFromHexagon", "Provides all of the unidirectional edges from the provided H3Index.", "Syntax", "h3GetUnidirectionalEdgesFromHexagon(index)", "Parameter", "index \u2014 Hexagon index number that represents a unidirectional edge. UInt64.", "Returned value", "Array of h3 indexes representing each unidirectional edge. Array(UInt64)."], "Examples": [" SELECT h3GetUnidirectionalEdgesFromHexagon(1248204388774707199) as edges;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/h3"], "Title": ["h3GetUnidirectionalEdgeBoundary"], "Feature": ["h3GetUnidirectionalEdgeBoundary(index)"], "Description": ["h3GetUnidirectionalEdgeBoundary", "Returns the coordinates defining the unidirectional edge.", "Syntax", "h3GetUnidirectionalEdgeBoundary(index)", "Parameter", "index \u2014 Hexagon index number that represents a unidirectional edge. UInt64.", "Returned value", "Array of pairs '(lon, lat)'. Array(Float64, Float64)."], "Examples": [" SELECT h3GetUnidirectionalEdgeBoundary(1248204388774707199) as boundary;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/polygons"], "Title": ["WKT"], "Feature": ["WKT(geo_data)"], "Description": ["WKT", "Returns a WKT (Well Known Text) geometric object from various Geo Data Types. Supported WKT objects are:", "POINTPOLYGONMULTIPOLYGONLINESTRINGMULTILINESTRING", "Syntax", "WKT(geo_data)", "Parameters", "geo_data can be one of the following Geo Data Types or their underlying primitive types:", "PointRingPolygonMultiPolygonLineStringMultiLineString", "Returned value", "WKT geometric object POINT is returned for a Point.WKT geometric object POLYGON is returned for a PolygonWKT geometric object MULTIPOLYGON is returned for a MultiPolygon.WKT geometric object LINESTRING is returned for a LineString.WKT geometric object MULTILINESTRING is returned for a MultiLineString."], "Examples": ["SELECT wkt((0., 0.));", "SELECT wkt([(0., 0.), (10., 0.), (10., 10.), (0., 10.)]);", "SELECT wkt([[[(0., 0.), (10., 0.), (10., 10.), (0., 10.)], [(4., 4.), (5., 4.), (5., 5.), (4., 5.)]], [[(-10., -10.), (-10., -9.), (-9., 10.)]]]);"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/polygons"], "Title": ["readWKTMultiPolygon"], "Feature": ["readWKTMultiPolygon"], "Description": ["readWKTMultiPolygon", "Converts a WKT (Well Known Text) MultiPolygon into a MultiPolygon type."], "Examples": ["SELECT    toTypeName(readWKTMultiPolygon('MULTIPOLYGON(((2 0,10 0,10 10,0 10,2 0),(4 4,5 4,5 5,4 5,4 4)),((-10 -10,-10 -9,-9 10,-10 -10)))')) AS type,    readWKTMultiPolygon('MULTIPOLYGON(((2 0,10 0,10 10,0 10,2 0),(4 4,5 4,5 5,4 5,4 4)),((-10 -10,-10 -9,-9 10,-10 -10)))') AS output FORMAT Markdown"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/polygons"], "Title": ["readWKTPolygon"], "Feature": ["readWKTPolygon"], "Description": ["readWKTPolygon", "Converts a WKT (Well Known Text) MultiPolygon into a Polygon type."], "Examples": ["SELECT    toTypeName(readWKTPolygon('POLYGON((2 0,10 0,10 10,0 10,2 0))')) AS type,    readWKTPolygon('POLYGON((2 0,10 0,10 10,0 10,2 0))') AS outputFORMAT Markdown"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/polygons"], "Title": ["readWKTPoint"], "Feature": ["readWKTPoint(wkt_string)"], "Description": ["readWKTPoint", "The readWKTPoint function in ClickHouse parses a Well-Known Text (WKT) representation of a Point geometry and returns a point in the internal ClickHouse format.", "Syntax", "readWKTPoint(wkt_string)", "Arguments", "wkt_string: The input WKT string representing a Point geometry.", "Returned value", "The function returns a ClickHouse internal representation of the Point geometry."], "Examples": ["SELECT readWKTPoint('POINT (1.2 3.4)');"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/polygons"], "Title": ["readWKTLineString"], "Feature": ["readWKTLineString(wkt_string)"], "Description": ["readWKTLineString", "Parses a Well-Known Text (WKT) representation of a LineString geometry and returns it in the internal ClickHouse format.", "Syntax", "readWKTLineString(wkt_string)", "Arguments", "wkt_string: The input WKT string representing a LineString geometry.", "Returned value", "The function returns a ClickHouse internal representation of the linestring geometry."], "Examples": ["SELECT readWKTLineString('LINESTRING (1 1, 2 2, 3 3, 1 1)');"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/polygons"], "Title": ["readWKTMultiLineString"], "Feature": ["readWKTMultiLineString(wkt_string)"], "Description": ["readWKTMultiLineString", "Parses a Well-Known Text (WKT) representation of a MultiLineString geometry and returns it in the internal ClickHouse format.", "Syntax", "readWKTMultiLineString(wkt_string)", "Arguments", "wkt_string: The input WKT string representing a MultiLineString geometry.", "Returned value", "The function returns a ClickHouse internal representation of the multilinestring geometry."], "Examples": ["SELECT readWKTMultiLineString('MULTILINESTRING ((1 1, 2 2, 3 3), (4 4, 5 5, 6 6))');"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/polygons"], "Title": ["readWKTRing"], "Feature": ["readWKTRing(wkt_string)"], "Description": ["readWKTRing", "Parses a Well-Known Text (WKT) representation of a Polygon geometry and returns a ring (closed linestring) in the internal ClickHouse format.", "Syntax", "readWKTRing(wkt_string)", "Arguments", "wkt_string: The input WKT string representing a Polygon geometry.", "Returned value", "The function returns a ClickHouse internal representation of the ring (closed linestring) geometry."], "Examples": ["SELECT readWKTRing('POLYGON ((1 1, 2 2, 3 3, 1 1))');"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/polygons"], "Title": ["polygonsWithinSpherical"], "Feature": ["polygonsWithinSpherical"], "Description": ["polygonsWithinSpherical", "Returns true or false depending on whether or not one polygon lies completely inside another polygon. Reference https://www.boost.org/doc/libs/1_62_0/libs/geometry/doc/html/geometry/reference/algorithms/within/within_2.html"], "Examples": ["select polygonsWithinSpherical([[[(4.3613577, 50.8651821), (4.349556, 50.8535879), (4.3602419, 50.8435626), (4.3830299, 50.8428851), (4.3904543, 50.8564867), (4.3613148, 50.8651279)]]], [[[(4.346693, 50.858306), (4.367945, 50.852455), (4.366227, 50.840809), (4.344961, 50.833264), (4.338074, 50.848677), (4.346693, 50.858306)]]]);"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/polygons"], "Title": ["polygonsDistanceSpherical"], "Feature": ["polygonsDistanceSpherical"], "Description": ["polygonsDistanceSpherical", "Calculates the minimal distance between two points where one point belongs to the first polygon and the second to another polygon. Spherical means that coordinates are interpreted as coordinates on a pure and ideal sphere, which is not true for the Earth. Using this type of coordinate system speeds up execution, but of course is not precise."], "Examples": ["SELECT polygonsDistanceSpherical([[[(0, 0), (0, 0.1), (0.1, 0.1), (0.1, 0)]]], [[[(10., 10.), (10., 40.), (40., 40.), (40., 10.), (10., 10.)]]])"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/polygons"], "Title": ["polygonsDistanceCartesian"], "Feature": ["polygonsDistanceCartesian"], "Description": ["polygonsDistanceCartesian", "Calculates distance between two polygons"], "Examples": ["SELECT polygonsDistanceCartesian([[[(0, 0), (0, 0.1), (0.1, 0.1), (0.1, 0)]]], [[[(10., 10.), (10., 40.), (40., 40.), (40., 10.), (10., 10.)]]])"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/polygons"], "Title": ["polygonsEqualsCartesian"], "Feature": ["polygonsEqualsCartesian"], "Description": ["polygonsEqualsCartesian", "Returns true if two polygons are equal"], "Examples": ["SELECT polygonsEqualsCartesian([[[(1., 1.), (1., 4.), (4., 4.), (4., 1.)]]], [[[(1., 1.), (1., 4.), (4., 4.), (4., 1.), (1., 1.)]]])"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/polygons"], "Title": ["polygonsSymDifferenceSpherical"], "Feature": ["polygonsSymDifferenceSpherical"], "Description": ["polygonsSymDifferenceSpherical", "Calculates the spatial set theoretic symmetric difference (XOR) between two polygons"], "Examples": ["SELECT wkt(arraySort(polygonsSymDifferenceSpherical([[(50., 50.), (50., -50.), (-50., -50.), (-50., 50.), (50., 50.)], [(10., 10.), (10., 40.), (40., 40.), (40., 10.), (10., 10.)], [(-10., -10.), (-10., -40.), (-40., -40.), (-40., -10.), (-10., -10.)]], [[(-20., -20.), (-20., 20.), (20., 20.), (20., -20.), (-20., -20.)]])));"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/polygons"], "Title": ["polygonsSymDifferenceCartesian"], "Feature": ["polygonsSymDifferenceCartesian"], "Description": ["polygonsSymDifferenceCartesian", "The same as polygonsSymDifferenceSpherical, but the coordinates are in the Cartesian coordinate system; which is more close to the model of the real Earth."], "Examples": ["SELECT wkt(polygonsSymDifferenceCartesian([[[(0, 0), (0, 3), (1, 2.9), (2, 2.6), (2.6, 2), (2.9, 1), (3, 0), (0, 0)]]], [[[(1., 1.), (1., 4.), (4., 4.), (4., 1.), (1., 1.)]]]))"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/polygons"], "Title": ["polygonsIntersectionSpherical"], "Feature": ["polygonsIntersectionSpherical"], "Description": ["polygonsIntersectionSpherical", "Calculates the intersection (AND) between polygons, coordinates are spherical."], "Examples": ["SELECT wkt(arrayMap(a -> arrayMap(b -> arrayMap(c -> (round(c.1, 6), round(c.2, 6)), b), a), polygonsIntersectionSpherical([[[(4.3613577, 50.8651821), (4.349556, 50.8535879), (4.3602419, 50.8435626), (4.3830299, 50.8428851), (4.3904543, 50.8564867), (4.3613148, 50.8651279)]]], [[[(4.346693, 50.858306), (4.367945, 50.852455), (4.366227, 50.840809), (4.344961, 50.833264), (4.338074, 50.848677), (4.346693, 50.858306)]]])))"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/polygons"], "Title": ["polygonsWithinCartesian"], "Feature": ["polygonsWithinCartesian"], "Description": ["polygonsWithinCartesian", "Returns true if the second polygon is within the first polygon."], "Examples": ["SELECT polygonsWithinCartesian([[[(2., 2.), (2., 3.), (3., 3.), (3., 2.)]]], [[[(1., 1.), (1., 4.), (4., 4.), (4., 1.), (1., 1.)]]])"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/polygons"], "Title": ["polygonConvexHullCartesian"], "Feature": ["polygonConvexHullCartesian"], "Description": ["polygonConvexHullCartesian", "Calculates a convex hull. Reference", "Coordinates are in Cartesian coordinate system."], "Examples": ["SELECT wkt(polygonConvexHullCartesian([[[(0., 0.), (0., 5.), (5., 5.), (5., 0.), (2., 3.)]]]))"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/polygons"], "Title": ["polygonAreaSpherical"], "Feature": ["polygonAreaSpherical"], "Description": ["polygonAreaSpherical", "Calculates the surface area of a polygon."], "Examples": ["SELECT round(polygonAreaSpherical([[[(4.346693, 50.858306), (4.367945, 50.852455), (4.366227, 50.840809), (4.344961, 50.833264), (4.338074, 50.848677), (4.346693, 50.858306)]]]), 14)"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/polygons"], "Title": ["polygonsUnionSpherical"], "Feature": ["polygonsUnionSpherical"], "Description": ["polygonsUnionSpherical", "Calculates a union (OR)."], "Examples": ["SELECT wkt(polygonsUnionSpherical([[[(4.3613577, 50.8651821), (4.349556, 50.8535879), (4.3602419, 50.8435626), (4.3830299, 50.8428851), (4.3904543, 50.8564867), (4.3613148, 50.8651279)]]], [[[(4.346693, 50.858306), (4.367945, 50.852455), (4.366227, 50.840809), (4.344961, 50.833264), (4.338074, 50.848677), (4.346693, 50.858306)]]]))"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/polygons"], "Title": ["polygonPerimeterSpherical"], "Feature": ["polygonPerimeterSpherical"], "Description": ["polygonPerimeterSpherical", "Calculates the perimeter of the polygon."], "Examples": ["SELECT round(polygonPerimeterSpherical([(30.010654, -15.646227), (30.050238, -15.640129), (30.090029, -15.629381), (30.130129, -15.623696), (30.16992, -15.632171), (30.195552, -15.649121), (30.207231, -15.653152), (30.223147, -15.649741), (30.231002, -15.644677), (30.246091, -15.632068), (30.254876, -15.628864), (30.280094, -15.632275), (30.296196, -15.639042), (30.32805, -15.652428), (30.356679, -15.651498), (30.396263, -15.635995), (30.39771, -15.716817), (30.39926, -15.812005), (30.401327, -15.931688), (30.402568, -16.001244), (30.514809, -16.000418), (30.586587, -16.000004), (30.74973, -15.998867), (30.857424, -15.998144), (30.901865, -16.007136), (30.942173, -16.034524), (30.958296, -16.05106), (30.973075, -16.062016), (30.989767, -16.06429), (31.012039, -16.054885), (31.023718, -16.045169), (31.042218, -16.024912), (31.056895, -16.017574), (31.065421, -16.019641), (31.073328, -16.025532), (31.080872, -16.025946), (31.089037, -16.01189), (31.1141, -15.996904), (31.15849, -16.000211), (31.259983, -16.023465), (31.278897, -16.030287), (31.29533, -16.041655), (31.309592, -16.059019), (31.328351, -16.092815), (31.340908, -16.106664), (31.360339, -16.116896), (31.37026, -16.123718), (31.374601, -16.132916), (31.377754, -16.142218), (31.384006, -16.148832), (31.387727, -16.149556), (31.395582, -16.147695), (31.399613, -16.147282), (31.404315, -16.149866), (31.404057, -16.154517), (31.402713, -16.159374), (31.404574, -16.162268), (31.424107, -16.164749), (31.445708, -16.164955), (31.465655, -16.167746), (31.480641, -16.177978), (31.519192, -16.196478), (31.686107, -16.207227), (31.710705, -16.217872), (31.738197, -16.239783), (31.798761, -16.303655), (31.818088, -16.319571), (31.86005, -16.340759), (31.871935, -16.35037), (31.88072, -16.368044), (31.88563, -16.406284), (31.894363, -16.421477), (31.910279, -16.428919), (32.014149, -16.444938), (32.211759, -16.440184), (32.290463, -16.45176), (32.393661, -16.491757), (32.5521, -16.553355), (32.671783, -16.599761), (32.6831, -16.609889), (32.687906, -16.624255), (32.68863, -16.647303), (32.698655, -16.686784), (32.725217, -16.706421), (32.73095, -16.708656), (32.731314, -16.708798), (32.739893, -16.703217), (32.753845, -16.697946), (32.769348, -16.695466), (32.800664, -16.697326), (32.862004, -16.710452), (32.893372, -16.712415), (32.909598, -16.708075), (32.93957, -16.689781), (32.95621, -16.683063), (32.968509, -16.681615999999998), (32.961585, -16.710348), (32.933369, -16.815768), (32.916213, -16.847911), (32.900503, -16.867755), (32.828776, -16.935141), (32.83012, -16.941549), (32.886757, -17.038184), (32.928512, -17.109497), (32.954143, -17.167168), (32.967786, -17.22887), (32.96909, -17.266115), (32.969439, -17.276102), (32.973212, -17.297909), (32.983599, -17.317753), (32.992384, -17.324678), (33.014656, -17.336667), (33.021633, -17.345555), (33.022459, -17.361471), (33.016258, -17.377181), (33.011651, -17.383991), (32.997448, -17.404983), (32.958174, -17.478467), (32.951663, -17.486218), (32.942981, -17.491593), (32.936573, -17.498311), (32.936676, -17.509369), (32.947218, -17.543166), (32.951663, -17.551434), (32.969129, -17.56456), (33.006646, -17.580993), (33.020392, -17.598563), (33.024526, -17.619233), (33.020599, -17.638457), (33.004063, -17.675561), (33.000238, -17.713905), (33.003184, -17.757726), (32.999102, -17.794313), (32.973573, -17.810643), (32.957037, -17.817981), (32.946082, -17.834724), (32.939674, -17.855498), (32.936883, -17.875032), (32.938433, -17.894566), (32.950267, -17.922574), (32.952128, -17.940247), (32.948149, -17.95327), (32.940397, -17.959988), (32.932439, -17.964949), (32.927375, -17.972907), (32.928977, -17.982312), (32.941224, -17.996265), (32.940294, -18.004843), (32.934919, -18.024583), (32.93709, -18.047114), (32.972282, -18.150261), (32.975537, -18.183333), (32.974865, -18.190775), (32.965925, -18.212169), (32.958174, -18.225398), (32.952283, -18.233046), (32.950525999999996, -18.241314), (32.95497, -18.256301), (32.970163, -18.277488), (33.016878, -18.313661), (33.034965, -18.332885), (33.042768, -18.352005), (33.038066, -18.363064), (33.00923, -18.383941), (32.988198, -18.41319), (32.985356, -18.412467), (32.986803, -18.422285), (32.999515, -18.436651), (33.003029, -18.446883), (32.996414, -18.46714), (32.978586, -18.48006), (32.956624, -18.489878), (32.937142, -18.50104), (32.919313, -18.510032), (32.900296, -18.515303), (32.88314, -18.522124), (32.870737, -18.535767), (32.868257, -18.552613), (32.871668, -18.57318), (32.884483, -18.609044), (32.914559, -18.665888), (32.92231, -18.693173), (32.920243, -18.726246), (32.913267, -18.753014), (32.902518, -18.774512), (32.885207, -18.787844), (32.858852, -18.790015), (32.817924, -18.787018), (32.787642, -18.791255), (32.69142, -18.83425), (32.68987, -18.843241), (32.696794, -18.897192), (32.703202, -18.911868), (32.71576, -18.919826), (32.705063, -18.927474), (32.692247, -18.934295), (32.682532, -18.942667), (32.681085, -18.954966), (32.68863, -18.97729), (32.690283, -18.988246), (32.68863, -19.000958), (32.691058, -19.01429), (32.698965, -19.022249), (32.710282, -19.025969), (32.723873, -19.026589), (32.785988, -19.017701), (32.803351, -19.019561), (32.814203, -19.023799), (32.819991, -19.028346), (32.822988, -19.035168), (32.825262, -19.046847), (32.830223, -19.059146), (32.83813, -19.066897), (32.847483, -19.073925), (32.855906, -19.083744), (32.862262, -19.118057), (32.83322, -19.241977), (32.832187, -19.266678), (32.828673, -19.284558), (32.820715, -19.301301), (32.806142, -19.323419), (32.768831, -19.363623), (32.766454, -19.373442), (32.768521, -19.402794), (32.762217, -19.443412), (32.763354, -19.463979), (32.773947, -19.475864), (32.793119, -19.476691), (32.811309, -19.474521), (32.825365, -19.479172), (32.832187, -19.500876), (32.832497000000004, -19.519273), (32.825365, -19.59162), (32.825675, -19.600818), (32.828156, -19.610636), (32.829603, -19.623659), (32.825365, -19.633271), (32.819474, -19.641952), (32.81627, -19.652081), (32.819629, -19.674302), (32.83105, -19.685154), (32.849137, -19.689081), (32.872184, -19.690218), (32.894715, -19.684327), (32.924584, -19.655285), (32.943188, -19.64929), (32.960964, -19.658799), (32.962411, -19.679056), (32.954143, -19.717813), (32.962411, -19.735383), (32.979051, -19.751403), (33.0006, -19.764322), (33.022769, -19.773107), (33.032795, -19.784166), (33.029642, -19.80339), (33.022873, -19.826851), (33.021322, -19.868088), (33.001995, -19.927), (32.998378, -20.000897), (33.004373, -20.024255), (33.007266, -20.032006), (32.95373, -20.030249), (32.940087, -20.041515), (32.934299, -20.072107), (32.926548, -20.086473), (32.910683, -20.091124), (32.894405, -20.094018), (32.88531, -20.10301), (32.877869, -20.151689), (32.872908, -20.167192), (32.859265, -20.190859), (32.857095, -20.200575), (32.858335, -20.207499), (32.865053, -20.220935), (32.86557, -20.228893), (32.858438, -20.259486), (32.852961, -20.273852), (32.845209, -20.286668), (32.800767, -20.338551), (32.735862, -20.414205), (32.704443, -20.471773), (32.671783, -20.531821), (32.646462, -20.557969), (32.603674, -20.56479), (32.556545, -20.559312), (32.513136, -20.564583), (32.481614, -20.603031), (32.471072, -20.645509), (32.469108, -20.68685), (32.483474, -20.794233), (32.49722, -20.898103), (32.491019, -20.936344), (32.467661, -20.980165), (32.417122, -21.040937), (32.339814, -21.134058), (32.345343, -21.142843), (32.359864, -21.151421), (32.368856, -21.162997), (32.373352, -21.163617), (32.377744, -21.16341), (32.380638, -21.165477), (32.380535, -21.172195), (32.376866, -21.178499), (32.37299, -21.183977), (32.37175, -21.187905), (32.444613, -21.304693), (32.445849, -21.308994), (32.447197, -21.313685), (32.408543, -21.290327), (32.37299, -21.327948), (32.324517, -21.378177), (32.272221, -21.432541), (32.219718, -21.486904), (32.167318, -21.541268), (32.114814, -21.595632), (32.062415, -21.649995), (32.010015, -21.704462), (31.957615, -21.758826), (31.905215, -21.813189), (31.852712, -21.867553), (31.800312, -21.92202), (31.747808, -21.976384), (31.695512, -22.030747), (31.643112, -22.085214), (31.590712, -22.139578), (31.538209, -22.193941), (31.485809, -22.248305), (31.433822, -22.302048), (31.36871, -22.345043), (31.288922, -22.39734), (31.265616, -22.365507), (31.255642, -22.357962), (31.24572, -22.357549), (31.229597, -22.363957), (31.221536, -22.364887), (31.213474, -22.36189), (31.197868, -22.352588), (31.190685, -22.350624), (31.183657, -22.34556), (31.163348, -22.322616), (31.152599, -22.316414), (31.137717, -22.318482), (31.10454, -22.333364), (31.097048, -22.334922), (31.087642, -22.336878), (31.07033, -22.333674), (31.036121, -22.319618), (30.927187, -22.295744), (30.867087, -22.289646), (30.83789, -22.282308), (30.805282, -22.294504), (30.693919, -22.302772), (30.674282, -22.30856), (30.647410999999998, -22.32644), (30.632424, -22.330677), (30.625551, -22.32861), (30.610307, -22.318688), (30.601108, -22.316414), (30.57217, -22.316621), (30.507367, -22.309593), (30.488454, -22.310213), (30.46923, -22.315071), (30.431713, -22.331194), (30.412696, -22.336878), (30.372078, -22.343493), (30.334975, -22.344733), (30.300765, -22.336982), (30.269346, -22.316414), (30.25529, -22.304736), (30.240407, -22.296157), (30.2217, -22.290886), (30.196999, -22.289129), (30.15266, -22.294814), (30.13509, -22.293574), (30.111113, -22.282308), (30.082587, -22.262878), (30.067911, -22.25709), (30.038145, -22.253783), (30.035872, -22.250579), (30.034528, -22.246135), (30.015511, -22.227014), (30.005279, -22.22226), (29.983782, -22.217713), (29.973963, -22.213992), (29.946678, -22.198282), (29.932105, -22.194355), (29.896035, -22.191358), (29.871489, -22.179265), (29.837331, -22.172444), (29.779246, -22.136374), (29.758886, -22.130896), (29.691448, -22.1341), (29.679614, -22.138338), (29.661424, -22.126452), (29.641064, -22.129242), (29.60396, -22.145055), (29.570164, -22.141955), (29.551043, -22.145986), (29.542517, -22.162522), (29.53182, -22.172444), (29.506912, -22.170067), (29.456889, -22.158801), (29.436115, -22.163142), (29.399528, -22.182159), (29.378031, -22.192908), (29.363250999999998, -22.192288), (29.356947, -22.190944000000002), (29.350074, -22.186707), (29.273644, -22.125108), (29.26734, -22.115807), (29.259588, -22.096066), (29.254111, -22.087074), (29.244395, -22.075706), (29.239331, -22.072605), (29.144867, -22.075292), (29.10797, -22.069194), (29.070763, -22.051004), (29.040532, -22.020929), (29.021567, -21.982791), (29.013815, -21.940417), (29.017949, -21.898145), (29.028905, -21.876648), (29.045441, -21.852567), (29.057637, -21.829209), (29.05526, -21.809985), (29.038723, -21.797893), (28.998726, -21.786008), (28.980846, -21.774845), (28.951907, -21.768334), (28.891032, -21.764924), (28.860853, -21.757379), (28.714195, -21.693507), (28.66841, -21.679968), (28.629704, -21.651339), (28.6157, -21.647101), (28.585934, -21.644414), (28.553998, -21.636559), (28.542939, -21.638316), (28.532501, -21.643071), (28.497309, -21.651546), (28.481393, -21.657437), (28.464598, -21.660331), (28.443101, -21.655783), (28.361762, -21.616302), (28.321919, -21.603486), (28.284867, -21.596872), (28.165702, -21.595218), (28.090771, -21.581266), (28.032893, -21.577855), (28.016563, -21.572894), (28.002559, -21.564212), (27.990415, -21.551913), (27.984731, -21.542922), (27.975739, -21.522561), (27.970571, -21.514396), (27.963698, -21.510469), (27.958066, -21.511502), (27.953208, -21.510469), (27.949281, -21.500754), (27.954448, -21.487835), (27.950418, -21.482047), (27.943338, -21.479876), (27.939876, -21.478016), (27.941943, -21.468508), (27.949642, -21.456519), (27.953001, -21.448664), (27.950211, -21.438329), (27.920549, -21.381174), (27.904219, -21.364741), (27.897811, -21.35544), (27.896157, -21.347895), (27.896674, -21.332392), (27.8944, -21.32433), (27.884995, -21.310171), (27.849132, -21.269657), (27.823604, -21.231726), (27.793838, -21.197413), (27.724385, -21.149664), (27.709192, -21.134471), (27.674775, -21.090133), (27.666611, -21.071219), (27.666817, -21.053753), (27.678961, -21.000733), (27.680356, -20.979649), (27.672657, -20.923528), (27.672605, -20.913709), (27.675085, -20.891282), (27.674775, -20.879913), (27.676016, -20.866684), (27.681803, -20.857589), (27.689038, -20.849011), (27.694412, -20.837744999999998), (27.709605, -20.756716), (27.707332, -20.716719), (27.682475, -20.637344), (27.690382, -20.60148), (27.702629, -20.566134), (27.705575, -20.526653), (27.698133, -20.509083), (27.683767, -20.49606), (27.66599, -20.489136), (27.625786, -20.488619), (27.590853, -20.473323), (27.534112, -20.483038), (27.45391, -20.473323), (27.340739, -20.473013), (27.306012, -20.477354), (27.268392, -20.49575), (27.283998, -20.35147), (27.266015, -20.234164), (27.214907, -20.110451), (27.201781, -20.092984), (27.183746, -20.082339), (27.16292, -20.076551), (27.141888, -20.073347), (27.129692, -20.072934), (27.119771, -20.073864), (27.109642, -20.073244), (27.097343, -20.068903), (27.086491, -20.060532), (27.069231, -20.03738), (27.060136, -20.027562), (27.02665, -20.010095), (26.9943, -20.006788), (26.961072, -20.007201), (26.925054, -20.000897), (26.811882, -19.94643), (26.774469, -19.939815), (26.750801, -19.939609), (26.730957, -19.935888), (26.713904, -19.927413), (26.698608, -19.91253), (26.684758, -19.894547), (26.67717, -19.886815), (26.673803, -19.883385), (26.659437, -19.875737), (26.614065, -19.863438), (26.595565, -19.855583), (26.581922, -19.842147), (26.574791, -19.819513), (26.566316, -19.800806), (26.549263, -19.784063), (26.508852, -19.759258), (26.489731, -19.75192), (26.450251, -19.743342), (26.431854, -19.73652), (26.412837, -19.71957), (26.385242, -19.679056), (26.362711, -19.667584), (26.332325, -19.662416), (26.324367, -19.659109), (26.312171, -19.651358), (26.312481, -19.649601), (26.319096, -19.646293), (26.326331, -19.633891), (26.333462, -19.613014), (26.330981, -19.604952), (26.32106, -19.592033), (26.313205, -19.584178), (26.30349, -19.577254), (26.292638, -19.572499), (26.239101, -19.571466), (26.194452, -19.560200000000002), (26.155488, -19.537153), (26.13027, -19.501082), (26.034359, -19.243734), (26.011414, -19.199809), (25.981132, -19.161775), (25.956534, -19.122088), (25.948576, -19.103277), (25.944855, -19.079196), (25.948059, -19.058732), (25.964389, -19.021629), (25.9678, -19.000958), (25.967449, -18.999925), (25.940721, -18.921273), (25.815251, -18.813993), (25.779491, -18.738752), (25.773393, -18.665578), (25.761921, -18.630335), (25.736909, -18.608734), (25.698255, -18.590234), (25.669523, -18.566049), (25.622084, -18.501143), (25.608442, -18.487708), (25.574439, -18.465693), (25.508499, -18.399134), (25.49558, -18.378877), (25.490516, -18.365545), (25.481163, -18.323377), (25.473204, -18.303429), (25.440855, -18.2532), (25.408816, -18.175995), (25.387525, -18.138995), (25.357449, -18.115844), (25.323446, -18.09662), (25.296368, -18.068612), (25.255026, -18.001122), (25.226088, -17.931876), (25.21937, -17.908001), (25.21937, -17.879786), (25.259781, -17.794107), (25.266705, -17.800928), (25.285412, -17.809299), (25.315901, -17.83214), (25.335538, -17.841235), (25.345254, -17.842579), (25.376466, -17.841235), (25.409539, -17.853018), (25.420288, -17.854878), (25.49558, -17.854878), (25.500748, -17.856015), (25.510153, -17.861183), (25.516458, -17.862319), (25.522142, -17.860149), (25.530927, -17.850951), (25.536818, -17.848677), (25.603997, -17.836171), (25.657017, -17.81395), (25.681409, -17.81147), (25.694224, -17.819428), (25.70642, -17.829867), (25.743834, -17.839375), (25.765951, -17.849814), (25.786002, -17.862216), (25.794683, -17.872655), (25.804399, -17.888158), (25.849667, -17.906658), (25.86362, -17.923814), (25.847497, -17.929395), (25.846153, -17.943658), (25.853490999999998, -17.959988), (25.86362, -17.971563), (25.924495, -17.998952), (25.966973, -18.000502), (25.978548, -17.998952), (26.033739, -17.971563), (26.04056, -17.978488), (26.046554, -17.966292), (26.062471, -17.962882), (26.081178, -17.962365), (26.095234, -17.958541), (26.096164, -17.954614), (26.0942, -17.941901), (26.095234, -17.938077), (26.101228, -17.935803), (26.118591, -17.931566), (26.135438, -17.922574), (26.158589, -17.918337), (26.167477, -17.913582), (26.203031, -17.887227), (26.211919, -17.882783), (26.221117, -17.886297), (26.228249, -17.894669), (26.233933, -17.903971), (26.239204, -17.910172), (26.248299, -17.913376), (26.294291, -17.918543), (26.3038, -17.922781), (26.311965, -17.928362), (26.318269, -17.934356), (26.325504, -17.93601), (26.362711, -17.930636), (26.408599, -17.939007), (26.485494, -17.979315), (26.527145, -17.992027), (26.553604, -17.996471), (26.570243, -18.002879), (26.583369, -18.013215), (26.598872, -18.029958), (26.612721, -18.041223), (26.628844, -18.049181), (26.685689, -18.066751), (26.700003, -18.069232), (26.71194, -18.065821), (26.740569, -18.0405), (26.753591, -18.032955), (26.769714, -18.029028), (26.794002, -18.026237), (26.88826, -17.984586), (26.912031, -17.992027), (26.94867, -17.968876), (26.95916, -17.964742), (27.006289, -17.962675), (27.021275, -17.958541), (27.048457, -17.944278), (27.078171, -17.916993), (27.11543, -17.882163), (27.149019, -17.842476), (27.146539, -17.818911), (27.145299, -17.794107), (27.146952, -17.783875), (27.157081, -17.769302), (27.422078, -17.504822), (27.524294, -17.415112), (27.577314, -17.363125), (27.604495, -17.312792), (27.624856, -17.233314), (27.641186, -17.198484), (27.777301, -17.001183), (27.816886, -16.959636), (27.868562, -16.929663), (28.022993, -16.865393), (28.113922, -16.827551), (28.21252, -16.748589), (28.280113, -16.706524), (28.643295, -16.568755), (28.690734, -16.56028), (28.718794, -16.56028), (28.73285, -16.55811), (28.741377, -16.550668), (28.761117, -16.532271), (28.769282, -16.515218), (28.808866, -16.486279), (28.822509, -16.470776), (28.829124, -16.434603), (28.833051, -16.426438), (28.857236, -16.388198), (28.857029, -16.36546), (28.840492, -16.323602), (28.836772, -16.306342), (28.840286, -16.284741), (28.86416, -16.231205), (28.847107, -16.202679), (28.852481, -16.162785), (28.8654, -16.121237), (28.870981, -16.087234), (28.868501, -16.08217), (28.86385, -16.076589), (28.859303, -16.069561), (28.857236, -16.060466), (28.860336, -16.049407), (28.874082, -16.028943), (28.877183, -16.022018), (28.898887, -15.995457), (28.932373, -15.963727), (28.946862, -15.957235), (28.951287, -15.955252), (28.972784, -15.951428), (29.018053, -15.950602), (29.042341, -15.946261), (29.055053, -15.934375), (29.076344, -15.895411), (29.086162, -15.884559), (29.102182, -15.870916), (29.121716, -15.859341), (29.141869, -15.854483), (29.150964, -15.848799), (29.186311, -15.812832), (29.406969, -15.714233), (29.422059, -15.711030000000001), (29.508462, -15.703588), (29.526239, -15.692839), (29.563446, -15.662144), (29.587217, -15.655736), (29.608559, -15.658422999999999), (29.62799, -15.663591), (29.648505, -15.666588), (29.672793, -15.663281), (29.73005, -15.644677), (29.773252, -15.638062), (29.814283, -15.619666), (29.837331, -15.614808), (29.881773, -15.618839), (29.967504, -15.641473), (30.010654, -15.646227)]), 6)"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/polygons"], "Title": ["polygonsIntersectionCartesian"], "Feature": ["polygonsIntersectionCartesian"], "Description": ["polygonsIntersectionCartesian", "Calculates the intersection of polygons."], "Examples": ["SELECT wkt(polygonsIntersectionCartesian([[[(0., 0.), (0., 3.), (1., 2.9), (2., 2.6), (2.6, 2.), (2.9, 1.), (3., 0.), (0., 0.)]]], [[[(1., 1.), (1., 4.), (4., 4.), (4., 1.), (1., 1.)]]]))"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/polygons"], "Title": ["polygonAreaCartesian"], "Feature": ["polygonAreaCartesian"], "Description": ["polygonAreaCartesian", "Calculates the area of a polygon"], "Examples": ["SELECT polygonAreaCartesian([[[(0., 0.), (0., 5.), (5., 5.), (5., 0.)]]])"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/polygons"], "Title": ["polygonPerimeterCartesian"], "Feature": ["polygonPerimeterCartesian"], "Description": ["polygonPerimeterCartesian", "Calculates the perimeter of a polygon."], "Examples": ["SELECT polygonPerimeterCartesian([[[(0., 0.), (0., 5.), (5., 5.), (5., 0.)]]])"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/polygons"], "Title": ["polygonsUnionCartesian"], "Feature": ["polygonsUnionCartesian"], "Description": ["polygonsUnionCartesian", "Calculates the union of polygons."], "Examples": ["SELECT wkt(polygonsUnionCartesian([[[(0., 0.), (0., 3.), (1., 2.9), (2., 2.6), (2.6, 2.), (2.9, 1), (3., 0.), (0., 0.)]]], [[[(1., 1.), (1., 4.), (4., 4.), (4., 1.), (1., 1.)]]]))"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/s2"], "Title": ["S2Index"], "Feature": ["S2Index"], "Description": ["S2Index", "S2 is a geographical indexing system where all geographical data is represented on a three-dimensional sphere (similar to a globe).", "In the S2 library points are represented as the S2 Index - a specific number which encodes internally a point on the surface of a unit sphere, unlike traditional (latitude, longitude) pairs. To get the S2 point index for a given point specified in the format (latitude, longitude) use the geoToS2 function. Also, you can use the s2ToGeo function for getting geographical coordinates corresponding to the specified S2 point index."], "Examples": [], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/s2"], "Title": ["geoToS2"], "Feature": ["geoToS2(lon, lat)"], "Description": ["geoToS2", "Returns S2 point index corresponding to the provided coordinates (longitude, latitude).", "Syntax", "geoToS2(lon, lat)", "Arguments", "lon \u2014 Longitude. Float64.lat \u2014 Latitude. Float64.", "Returned values", "S2 point index. UInt64."], "Examples": ["SELECT geoToS2(37.79506683, 55.71290588) AS s2Index;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/s2"], "Title": ["s2ToGeo"], "Feature": ["s2ToGeo(s2index)"], "Description": ["s2ToGeo", "Returns geo coordinates (longitude, latitude) corresponding to the provided S2 point index.", "Syntax", "s2ToGeo(s2index)", "Arguments", "s2index \u2014 S2 Index. UInt64.", "Returned values", "A tuple consisting of two values: lon. Float64.lat. Float64."], "Examples": ["SELECT s2ToGeo(4704772434919038107) AS s2Coodrinates;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/s2"], "Title": ["s2GetNeighbors"], "Feature": ["s2GetNeighbors(s2index)"], "Description": ["s2GetNeighbors", "Returns S2 neighbor indexes corresponding to the provided S2. Each cell in the S2 system is a quadrilateral bounded by four geodesics. So, each cell has 4 neighbors.", "Syntax", "s2GetNeighbors(s2index)", "Arguments", "s2index \u2014 S2 Index. UInt64.", "Returned value", "An array consisting of 4 neighbor indexes: array[s2index1, s2index3, s2index2, s2index4]. Array(UInt64)."], "Examples": ["SELECT s2GetNeighbors(5074766849661468672) AS s2Neighbors;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/s2"], "Title": ["s2CellsIntersect"], "Feature": ["s2CellsIntersect(s2index1, s2index2)"], "Description": ["s2CellsIntersect", "Determines if the two provided S2 cells intersect or not.", "Syntax", "s2CellsIntersect(s2index1, s2index2)", "Arguments", "siIndex1, s2index2 \u2014 S2 Index. UInt64.", "Returned value", "1 \u2014 If the cells intersect. UInt8.0 \u2014 If the cells don't intersect. UInt8."], "Examples": ["SELECT s2CellsIntersect(9926595209846587392, 9926594385212866560) AS intersect;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/s2"], "Title": ["s2CapContains"], "Feature": ["s2CapContains(center, degrees, point)"], "Description": ["s2CapContains", "Determines if a cap contains a S2 point. A cap represents a part of the sphere that has been cut off by a plane. It is defined by a point on a sphere and a radius in degrees.", "Syntax", "s2CapContains(center, degrees, point)", "Arguments", "center \u2014 S2 point index corresponding to the cap. UInt64.degrees \u2014 Radius of the cap in degrees. Float64.point \u2014 S2 point index. UInt64.", "Returned value", "1 \u2014 If the cap contains the S2 point index. UInt8.0 \u2014 If the cap doesn't contain the S2 point index. UInt8."], "Examples": ["SELECT s2CapContains(1157339245694594829, 1.0, 1157347770437378819) AS capContains;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/s2"], "Title": ["s2CapUnion"], "Feature": ["s2CapUnion(center1, radius1, center2, radius2)"], "Description": ["s2CapUnion", "Determines the smallest cap that contains the given two input caps. A cap represents a portion of the sphere that has been cut off by a plane. It is defined by a point on a sphere and a radius in degrees.", "Syntax", "s2CapUnion(center1, radius1, center2, radius2)", "Arguments", "center1, center2 \u2014 S2 point indexes corresponding to the two input caps. UInt64.radius1, radius2 \u2014 Radius of the two input caps in degrees. Float64.", "Returned values", "center \u2014 S2 point index corresponding the center of the smallest cap containing the two input caps. UInt64.radius \u2014 Radius of the smallest cap containing the two input caps. Float64."], "Examples": ["SELECT s2CapUnion(3814912406305146967, 1.0, 1157347770437378819, 1.0) AS capUnion;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/s2"], "Title": ["s2RectAdd"], "Feature": ["s2RectAdd(s2pointLow, s2pointHigh, s2Point)"], "Description": ["s2RectAdd", "Increases the size of the bounding rectangle to include the given S2 point. In the S2 system, a rectangle is represented by a type of S2Region called a S2LatLngRect that represents a rectangle in latitude-longitude space.", "Syntax", "s2RectAdd(s2pointLow, s2pointHigh, s2Point)", "Arguments", "s2PointLow \u2014 Low S2 point index corresponding to the rectangle. UInt64.s2PointHigh \u2014 High S2 point index corresponding to the rectangle. UInt64.s2Point \u2014 Target S2 point index that the bound rectangle should be grown to include. UInt64.", "Returned values", "s2PointLow \u2014 Low S2 cell id corresponding to the grown rectangle. UInt64.s2PointHigh \u2014 Height S2 cell id corresponding to the grown rectangle. UInt64."], "Examples": ["SELECT s2RectAdd(5178914411069187297, 5177056748191934217, 5179056748191934217) AS rectAdd;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/s2"], "Title": ["s2RectContains"], "Feature": ["s2RectContains(s2PointLow, s2PointHi, s2Point)"], "Description": ["s2RectContains", "Determines if a given rectangle contains a S2 point. In the S2 system, a rectangle is represented by a type of S2Region called a S2LatLngRect that represents a rectangle in latitude-longitude space.", "Syntax", "s2RectContains(s2PointLow, s2PointHi, s2Point)", "Arguments", "s2PointLow \u2014 Low S2 point index corresponding to the rectangle. UInt64.s2PointHigh \u2014 High S2 point index corresponding to the rectangle. UInt64.s2Point \u2014 Target S2 point index. UInt64.", "Returned value", "1 \u2014 If the rectangle contains the given S2 point.0 \u2014 If the rectangle doesn't contain the given S2 point."], "Examples": ["SELECT s2RectContains(5179062030687166815, 5177056748191934217, 5177914411069187297) AS rectContains;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/s2"], "Title": ["s2RectUnion"], "Feature": ["s2RectUnion(s2Rect1PointLow, s2Rect1PointHi, s2Rect2PointLow, s2Rect2PointHi)"], "Description": ["s2RectUnion", "Returns the smallest rectangle containing the union of this rectangle and the given rectangle. In the S2 system, a rectangle is represented by a type of S2Region called a S2LatLngRect that represents a rectangle in latitude-longitude space.", "Syntax", "s2RectUnion(s2Rect1PointLow, s2Rect1PointHi, s2Rect2PointLow, s2Rect2PointHi)", "Arguments", "s2Rect1PointLow, s2Rect1PointHi \u2014 Low and High S2 point indexes corresponding to the first rectangle. UInt64.s2Rect2PointLow, s2Rect2PointHi \u2014 Low and High S2 point indexes corresponding to the second rectangle. UInt64.", "Returned values", "s2UnionRect2PointLow \u2014 Low S2 cell id corresponding to the union rectangle. UInt64.s2UnionRect2PointHi \u2014 High S2 cell id corresponding to the union rectangle. UInt64."], "Examples": ["SELECT s2RectUnion(5178914411069187297, 5177056748191934217, 5179062030687166815, 5177056748191934217) AS rectUnion;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/s2"], "Title": ["s2RectIntersection"], "Feature": ["s2RectIntersection(s2Rect1PointLow, s2Rect1PointHi, s2Rect2PointLow, s2Rect2PointHi)"], "Description": ["s2RectIntersection", "Returns the smallest rectangle containing the intersection of this rectangle and the given rectangle. In the S2 system, a rectangle is represented by a type of S2Region called a S2LatLngRect that represents a rectangle in latitude-longitude space.", "Syntax", "s2RectIntersection(s2Rect1PointLow, s2Rect1PointHi, s2Rect2PointLow, s2Rect2PointHi)", "Arguments", "s2Rect1PointLow, s2Rect1PointHi \u2014 Low and High S2 point indexes corresponding to the first rectangle. UInt64.s2Rect2PointLow, s2Rect2PointHi \u2014 Low and High S2 point indexes corresponding to the second rectangle. UInt64.", "Returned values", "s2UnionRect2PointLow \u2014 Low S2 cell id corresponding to the rectangle containing the intersection of the given rectangles. UInt64.s2UnionRect2PointHi \u2014 High S2 cell id corresponding to the rectangle containing the intersection of the given rectangles. UInt64."], "Examples": ["SELECT s2RectIntersection(5178914411069187297, 5177056748191934217, 5179062030687166815, 5177056748191934217) AS rectIntersection;"], "Category": ["Geo Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/geo/svg"], "Title": ["Svg"], "Feature": ["Svg(geometry,[style])"], "Description": ["Svg", "Returns a string of select SVG element tags from Geo data.", "Syntax", "Svg(geometry,[style])", "Aliases: SVG, svg", "Parameters", "geometry \u2014 Geo data. Geo.style \u2014 Optional style name. String.", "Returned value", "The SVG representation of the geometry. String.SVG circleSVG polygonSVG path"], "Examples": ["SELECT SVG((0., 0.))", "SELECT SVG([(0., 0.), (10, 0), (10, 10), (0, 10)])", "SELECT SVG([[(0., 0.), (10, 0), (10, 10), (0, 10)], [(4., 4.), (5, 4), (5, 5), (4, 5)]])"], "Category": ["Geo Functions"]}
