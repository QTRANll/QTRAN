{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["halfMD5"], "Feature": ["halfMD5(par1, ...)"], "Description": ["halfMD5", "Interprets all the input parameters as strings and calculates the MD5 hash value for each of them. Then combines hashes, takes the first 8 bytes of the hash of the resulting string, and interprets them as UInt64 in big-endian byte order.", "halfMD5(par1, ...)", "The function is relatively slow (5 million short strings per second per processor core).\nConsider using the sipHash64 function instead.", "Arguments", "The function takes a variable number of input parameters. Arguments can be any of the supported data types. For some data types calculated value of hash function may be the same for the same values even if types of arguments differ (integers of different size, named and unnamed Tuple with the same data, Map and the corresponding Array(Tuple(key, value)) type with the same data).", "Returned Value", "A UInt64 data type hash value."], "Examples": ["SELECT halfMD5(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS halfMD5hash, toTypeName(halfMD5hash) AS type;"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["MD4"], "Feature": ["MD4"], "Description": ["MD4", "Calculates the MD4 from a string and returns the resulting set of bytes as FixedString(16)."], "Examples": [], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["MD5"], "Feature": ["MD5"], "Description": ["MD5", "Calculates the MD5 from a string and returns the resulting set of bytes as FixedString(16).\nIf you do not need MD5 in particular, but you need a decent cryptographic 128-bit hash, use the \u2018sipHash128\u2019 function instead.\nIf you want to get the same result as output by the md5sum utility, use lower(hex(MD5(s)))."], "Examples": [], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["RIPEMD160"], "Feature": ["RIPEMD160(input)"], "Description": ["RIPEMD160", "Produces RIPEMD-160 hash value.", "Syntax", "RIPEMD160(input)", "Parameters", "input: Input string. String", "Returned value", "A 160-bit RIPEMD-160 hash value of type FixedString(20)."], "Examples": ["SELECT HEX(RIPEMD160('The quick brown fox jumps over the lazy dog'));"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["sipHash64"], "Feature": ["sipHash64(par1,...)"], "Description": ["sipHash64", "Produces a 64-bit SipHash hash value.", "sipHash64(par1,...)", "This is a cryptographic hash function. It works at least three times faster than the MD5 hash function.", "The function interprets all the input parameters as strings and calculates the hash value for each of them. It then combines the hashes by the following algorithm:", "The first and the second hash value are concatenated to an array which is hashed.The previously calculated hash value and the hash of the third input parameter are hashed in a similar way.This calculation is repeated for all remaining hash values of the original input.", "Arguments", "The function takes a variable number of input parameters of any of the supported data types.", "Returned Value", "A UInt64 data type hash value.", "Note that the calculated hash values may be equal for the same input values of different argument types. This affects for example integer types of different size, named and unnamed Tuple with the same data, Map and the corresponding Array(Tuple(key, value)) type with the same data."], "Examples": ["SELECT sipHash64(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS SipHash, toTypeName(SipHash) AS type;"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["sipHash64Keyed"], "Feature": ["sipHash64Keyed((k0, k1), par1,...)"], "Description": ["sipHash64Keyed", "Same as sipHash64 but additionally takes an explicit key argument instead of using a fixed key.", "Syntax", "sipHash64Keyed((k0, k1), par1,...)", "Arguments", "Same as sipHash64, but the first argument is a tuple of two UInt64 values representing the key.", "Returned value", "A UInt64 data type hash value."], "Examples": ["SELECT sipHash64Keyed((506097522914230528, 1084818905618843912), array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS SipHash, toTypeName(SipHash) AS type;"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["sipHash128"], "Feature": ["sipHash128(par1,...)"], "Description": ["sipHash128", "Like sipHash64 but produces a 128-bit hash value, i.e. the final xor-folding state is done up to 128 bits.", "NoteThis 128-bit variant differs from the reference implementation and it's weaker.\nThis version exists because, when it was written, there was no official 128-bit extension for SipHash.\nNew projects should probably use sipHash128Reference.", "Syntax", "sipHash128(par1,...)", "Arguments", "Same as for sipHash64.", "Returned value", "A 128-bit SipHash hash value of type FixedString(16)."], "Examples": ["SELECT hex(sipHash128('foo', '\\x01', 3));"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["sipHash128Keyed"], "Feature": ["sipHash128Keyed((k0, k1), par1,...)"], "Description": ["sipHash128Keyed", "Same as sipHash128 but additionally takes an explicit key argument instead of using a fixed key.", "NoteThis 128-bit variant differs from the reference implementation and it's weaker.\nThis version exists because, when it was written, there was no official 128-bit extension for SipHash.\nNew projects should probably use sipHash128ReferenceKeyed.", "Syntax", "sipHash128Keyed((k0, k1), par1,...)", "Arguments", "Same as sipHash128, but the first argument is a tuple of two UInt64 values representing the key.", "Returned value", "A 128-bit SipHash hash value of type FixedString(16)."], "Examples": ["SELECT hex(sipHash128Keyed((506097522914230528, 1084818905618843912),'foo', '\\x01', 3));"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["sipHash128Reference"], "Feature": ["sipHash128Reference(par1,...)"], "Description": ["sipHash128Reference", "Like sipHash128 but implements the 128-bit algorithm from the original authors of SipHash.", "Syntax", "sipHash128Reference(par1,...)", "Arguments", "Same as for sipHash128.", "Returned value", "A 128-bit SipHash hash value of type FixedString(16)."], "Examples": ["SELECT hex(sipHash128Reference('foo', '\\x01', 3));"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["sipHash128ReferenceKeyed"], "Feature": ["sipHash128ReferenceKeyed((k0, k1), par1,...)"], "Description": ["sipHash128ReferenceKeyed", "Same as sipHash128Reference but additionally takes an explicit key argument instead of using a fixed key.", "Syntax", "sipHash128ReferenceKeyed((k0, k1), par1,...)", "Arguments", "Same as sipHash128Reference, but the first argument is a tuple of two UInt64 values representing the key.", "Returned value", "A 128-bit SipHash hash value of type FixedString(16)."], "Examples": ["SELECT hex(sipHash128ReferenceKeyed((506097522914230528, 1084818905618843912),'foo', '\\x01', 3));"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["cityHash64"], "Feature": ["cityHash64(par1,...)"], "Description": ["cityHash64", "Produces a 64-bit CityHash hash value.", "cityHash64(par1,...)", "This is a fast non-cryptographic hash function. It uses the CityHash algorithm for string parameters and implementation-specific fast non-cryptographic hash function for parameters with other data types. The function uses the CityHash combinator to get the final results.", "Note that Google changed the algorithm of CityHash after it has been added to ClickHouse. In other words, ClickHouse's cityHash64 and Google's upstream CityHash now produce different results. ClickHouse cityHash64 corresponds to CityHash v1.0.2.", "Arguments", "The function takes a variable number of input parameters. Arguments can be any of the supported data types. For some data types calculated value of hash function may be the same for the same values even if types of arguments differ (integers of different size, named and unnamed Tuple with the same data, Map and the corresponding Array(Tuple(key, value)) type with the same data).", "Returned Value", "A UInt64 data type hash value."], "Examples": ["SELECT cityHash64(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS CityHash, toTypeName(CityHash) AS type;", "SELECT groupBitXor(cityHash64(*)) FROM table"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["intHash32"], "Feature": ["intHash32(int)"], "Description": ["intHash32", "Calculates a 32-bit hash code from any type of integer.\nThis is a relatively fast non-cryptographic hash function of average quality for numbers.", "Syntax", "intHash32(int)", "Arguments", "int \u2014 Integer to hash. (U)Int*.", "Returned value", "32-bit hash code. UInt32."], "Examples": ["SELECT intHash32(42);"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["intHash64"], "Feature": ["intHash64(int)"], "Description": ["intHash64", "Calculates a 64-bit hash code from any type of integer.\nThis is a relatively fast non-cryptographic hash function of average quality for numbers.\nIt works faster than intHash32.", "Syntax", "intHash64(int)", "Arguments", "int \u2014 Integer to hash. (U)Int*.", "Returned value", "64-bit hash code. UInt64."], "Examples": ["SELECT intHash64(42);"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["SHA1, SHA224, SHA256, SHA512, SHA512_256"], "Feature": ["SHA1('s')...SHA512('s')"], "Description": ["SHA1, SHA224, SHA256, SHA512, SHA512_256", "Calculates SHA-1, SHA-224, SHA-256, SHA-512, SHA-512-256 hash from a string and returns the resulting set of bytes as FixedString.", "Syntax", "SHA1('s')...SHA512('s')", "The function works fairly slowly (SHA-1 processes about 5 million short strings per second per processor core, while SHA-224 and SHA-256 process about 2.2 million).\nWe recommend using this function only in cases when you need a specific hash function and you can\u2019t select it.\nEven in these cases, we recommend applying the function offline and pre-calculating values when inserting them into the table, instead of applying it in SELECT queries.", "Arguments", "s \u2014 Input string for SHA hash calculation. String.", "Returned value", "SHA hash as a hex-unencoded FixedString. SHA-1 returns as FixedString(20), SHA-224 as FixedString(28), SHA-256 \u2014 FixedString(32), SHA-512 \u2014 FixedString(64). FixedString."], "Examples": ["SELECT hex(SHA1('abc'));"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["BLAKE3"], "Feature": ["BLAKE3('s')"], "Description": ["BLAKE3", "Calculates BLAKE3 hash string and returns the resulting set of bytes as FixedString.", "Syntax", "BLAKE3('s')", "This cryptographic hash-function is integrated into ClickHouse with BLAKE3 Rust library. The function is rather fast and shows approximately two times faster performance compared to SHA-2, while generating hashes of the same length as SHA-256.", "Arguments", "s - input string for BLAKE3 hash calculation. String.", "Return value", "BLAKE3 hash as a byte array with type FixedString(32). FixedString."], "Examples": ["SELECT hex(BLAKE3('ABC'))", "\u250c\u2500hex(BLAKE3('ABC'))\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 D1717274597CF0289694F75D96D444B992A096F1AFD8E7BBFA6EBB1D360FEDFC \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["URLHash(url[, N])"], "Feature": ["URLHash(url[, N])"], "Description": ["URLHash(url[, N])", "A fast, decent-quality non-cryptographic hash function for a string obtained from a URL using some type of normalization.\nURLHash(s) \u2013 Calculates a hash from a string without one of the trailing symbols /,? or # at the end, if present.\nURLHash(s, N) \u2013 Calculates a hash from a string up to the N level in the URL hierarchy, without one of the trailing symbols /,? or # at the end, if present.\nLevels are the same as in URLHierarchy."], "Examples": [], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["farmFingerprint64"], "Feature": ["farmFingerprint64"], "Description": ["farmFingerprint64"], "Examples": [], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["farmHash64"], "Feature": ["farmFingerprint64(par1, ...)farmHash64(par1, ...)"], "Description": ["farmHash64", "Produces a 64-bit FarmHash or Fingerprint value. farmFingerprint64 is preferred for a stable and portable value.", "farmFingerprint64(par1, ...)farmHash64(par1, ...)", "These functions use the Fingerprint64 and Hash64 methods respectively from all available methods.", "Arguments", "The function takes a variable number of input parameters. Arguments can be any of the supported data types. For some data types calculated value of hash function may be the same for the same values even if types of arguments differ (integers of different size, named and unnamed Tuple with the same data, Map and the corresponding Array(Tuple(key, value)) type with the same data).", "Returned Value", "A UInt64 data type hash value."], "Examples": ["SELECT farmHash64(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS FarmHash, toTypeName(FarmHash) AS type;"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["javaHash"], "Feature": ["SELECT javaHash('')"], "Description": ["javaHash", "Calculates JavaHash from a string,\nByte,\nShort,\nInteger,\nLong.\nThis hash function is neither fast nor having a good quality. The only reason to use it is when this algorithm is already used in another system and you have to calculate exactly the same result.", "Note that Java only support calculating signed integers hash, so if you want to calculate unsigned integers hash you must cast it to proper signed ClickHouse types.", "Syntax", "SELECT javaHash('')", "Returned value", "A Int32 data type hash value."], "Examples": ["SELECT javaHash(toInt32(123));", "SELECT javaHash('Hello, world!');"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["javaHashUTF16LE"], "Feature": ["javaHashUTF16LE(stringUtf16le)"], "Description": ["javaHashUTF16LE", "Calculates JavaHash from a string, assuming it contains bytes representing a string in UTF-16LE encoding.", "Syntax", "javaHashUTF16LE(stringUtf16le)", "Arguments", "stringUtf16le \u2014 a string in UTF-16LE encoding.", "Returned value", "A Int32 data type hash value."], "Examples": ["SELECT javaHashUTF16LE(convertCharset('test', 'utf-8', 'utf-16le'));"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["hiveHash"], "Feature": ["SELECT hiveHash('')"], "Description": ["hiveHash", "Calculates HiveHash from a string.", "SELECT hiveHash('')", "This is just JavaHash with zeroed out sign bit. This function is used in Apache Hive for versions before 3.0. This hash function is neither fast nor having a good quality. The only reason to use it is when this algorithm is already used in another system and you have to calculate exactly the same result.", "Returned value", "hiveHash hash value. Int32."], "Examples": ["SELECT hiveHash('Hello, world!');"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["metroHash64"], "Feature": ["metroHash64(par1, ...)"], "Description": ["metroHash64", "Produces a 64-bit MetroHash hash value.", "metroHash64(par1, ...)", "Arguments", "The function takes a variable number of input parameters. Arguments can be any of the supported data types. For some data types calculated value of hash function may be the same for the same values even if types of arguments differ (integers of different size, named and unnamed Tuple with the same data, Map and the corresponding Array(Tuple(key, value)) type with the same data).", "Returned Value", "A UInt64 data type hash value."], "Examples": ["SELECT metroHash64(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS MetroHash, toTypeName(MetroHash) AS type;"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["jumpConsistentHash"], "Feature": ["jumpConsistentHash"], "Description": ["jumpConsistentHash", "Calculates JumpConsistentHash form a UInt64.\nAccepts two arguments: a UInt64-type key and the number of buckets. Returns Int32.\nFor more information, see the link: JumpConsistentHash"], "Examples": [], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["kostikConsistentHash"], "Feature": ["kostikConsistentHash(input, n)"], "Description": ["kostikConsistentHash", "An O(1) time and space consistent hash algorithm by Konstantin 'kostik' Oblakov. Previously yandexConsistentHash.", "Syntax", "kostikConsistentHash(input, n)", "Alias: yandexConsistentHash (left for backwards compatibility sake).", "Parameters", "input: A UInt64-type key UInt64.n: Number of buckets. UInt16.", "Returned value", "A UInt16 data type hash value.", "Implementation details", "It is efficient only if n <= 32768."], "Examples": ["SELECT kostikConsistentHash(16045690984833335023, 2);"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["murmurHash2_32, murmurHash2_64"], "Feature": ["murmurHash2_32(par1, ...)murmurHash2_64(par1, ...)"], "Description": ["murmurHash2_32, murmurHash2_64", "Produces a MurmurHash2 hash value.", "murmurHash2_32(par1, ...)murmurHash2_64(par1, ...)", "Arguments", "Both functions take a variable number of input parameters. Arguments can be any of the supported data types. For some data types calculated value of hash function may be the same for the same values even if types of arguments differ (integers of different size, named and unnamed Tuple with the same data, Map and the corresponding Array(Tuple(key, value)) type with the same data).", "Returned Value", "The murmurHash2_32 function returns hash value having the UInt32 data type.The murmurHash2_64 function returns hash value having the UInt64 data type."], "Examples": ["SELECT murmurHash2_64(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS MurmurHash2, toTypeName(MurmurHash2) AS type;"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["gccMurmurHash"], "Feature": ["gccMurmurHash(par1, ...)"], "Description": ["gccMurmurHash", "Calculates a 64-bit MurmurHash2 hash value using the same hash seed as gcc. It is portable between Clang and GCC builds.", "Syntax", "gccMurmurHash(par1, ...)", "Arguments", "par1, ... \u2014 A variable number of parameters that can be any of the supported data types.", "Returned value", "Calculated hash value. UInt64."], "Examples": ["SELECT    gccMurmurHash(1, 2, 3) AS res1,    gccMurmurHash(('a', [1, 2, 3], 4, (4, ['foo', 'bar'], 1, (1, 2)))) AS res2"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["kafkaMurmurHash"], "Feature": ["MurmurHash(par1, ...)"], "Description": ["kafkaMurmurHash", "Calculates a 32-bit MurmurHash2 hash value using the same hash seed as Kafka and without the highest bit to be compatible with Default Partitioner.", "Syntax", "MurmurHash(par1, ...)", "Arguments", "par1, ... \u2014 A variable number of parameters that can be any of the supported data types.", "Returned value", "Calculated hash value. UInt32."], "Examples": ["SELECT    kafkaMurmurHash('foobar') AS res1,    kafkaMurmurHash(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS res2"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["murmurHash3_32, murmurHash3_64"], "Feature": ["murmurHash3_32(par1, ...)murmurHash3_64(par1, ...)"], "Description": ["murmurHash3_32, murmurHash3_64", "Produces a MurmurHash3 hash value.", "murmurHash3_32(par1, ...)murmurHash3_64(par1, ...)", "Arguments", "Both functions take a variable number of input parameters. Arguments can be any of the supported data types. For some data types calculated value of hash function may be the same for the same values even if types of arguments differ (integers of different size, named and unnamed Tuple with the same data, Map and the corresponding Array(Tuple(key, value)) type with the same data).", "Returned Value", "The murmurHash3_32 function returns a UInt32 data type hash value.The murmurHash3_64 function returns a UInt64 data type hash value."], "Examples": ["SELECT murmurHash3_32(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS MurmurHash3, toTypeName(MurmurHash3) AS type;"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["murmurHash3_128"], "Feature": ["murmurHash3_128(expr)"], "Description": ["murmurHash3_128", "Produces a 128-bit MurmurHash3 hash value.", "Syntax", "murmurHash3_128(expr)", "Arguments", "expr \u2014 A list of expressions. String.", "Returned value", "A 128-bit MurmurHash3 hash value. FixedString(16)."], "Examples": ["SELECT hex(murmurHash3_128('foo', 'foo', 'foo'));"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["xxh3"], "Feature": ["xxh3(expr)"], "Description": ["xxh3", "Produces a 64-bit xxh3 hash value.", "Syntax", "xxh3(expr)", "Arguments", "expr \u2014 A list of expressions of any data type.", "Returned value", "A 64-bit xxh3 hash value. UInt64."], "Examples": ["SELECT xxh3('Hello', 'world')"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["xxHash32, xxHash64"], "Feature": ["SELECT xxHash32('')ORSELECT xxHash64('')"], "Description": ["xxHash32, xxHash64", "Calculates xxHash from a string. It is proposed in two flavors, 32 and 64 bits.", "SELECT xxHash32('')ORSELECT xxHash64('')", "Returned value", "Hash value. UInt32/64.", "NoteThe return type will be UInt32 for xxHash32 and UInt64 for xxHash64."], "Examples": ["SELECT xxHash32('Hello, world!');"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["ngramSimHash"], "Feature": ["ngramSimHash(string[, ngramsize])"], "Description": ["ngramSimHash", "Splits a ASCII string into n-grams of ngramsize symbols and returns the n-gram simhash. Is case sensitive.", "Can be used for detection of semi-duplicate strings with bitHammingDistance. The smaller is the Hamming Distance of the calculated simhashes of two strings, the more likely these strings are the same.", "Syntax", "ngramSimHash(string[, ngramsize])", "Arguments", "string \u2014 String. String.ngramsize \u2014 The size of an n-gram. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.", "Returned value", "Hash value. UInt64."], "Examples": ["SELECT ngramSimHash('ClickHouse') AS Hash;"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["ngramSimHashCaseInsensitive"], "Feature": ["ngramSimHashCaseInsensitive(string[, ngramsize])"], "Description": ["ngramSimHashCaseInsensitive", "Splits a ASCII string into n-grams of ngramsize symbols and returns the n-gram simhash. Is case insensitive.", "Can be used for detection of semi-duplicate strings with bitHammingDistance. The smaller is the Hamming Distance of the calculated simhashes of two strings, the more likely these strings are the same.", "Syntax", "ngramSimHashCaseInsensitive(string[, ngramsize])", "Arguments", "string \u2014 String. String.ngramsize \u2014 The size of an n-gram. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.", "Returned value", "Hash value. UInt64."], "Examples": ["SELECT ngramSimHashCaseInsensitive('ClickHouse') AS Hash;"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["ngramSimHashUTF8"], "Feature": ["ngramSimHashUTF8(string[, ngramsize])"], "Description": ["ngramSimHashUTF8", "Splits a UTF-8 string into n-grams of ngramsize symbols and returns the n-gram simhash. Is case sensitive.", "Can be used for detection of semi-duplicate strings with bitHammingDistance. The smaller is the Hamming Distance of the calculated simhashes of two strings, the more likely these strings are the same.", "Syntax", "ngramSimHashUTF8(string[, ngramsize])", "Arguments", "string \u2014 String. String.ngramsize \u2014 The size of an n-gram. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.", "Returned value", "Hash value. UInt64."], "Examples": ["SELECT ngramSimHashUTF8('ClickHouse') AS Hash;"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["ngramSimHashCaseInsensitiveUTF8"], "Feature": ["ngramSimHashCaseInsensitiveUTF8(string[, ngramsize])"], "Description": ["ngramSimHashCaseInsensitiveUTF8", "Splits a UTF-8 string into n-grams of ngramsize symbols and returns the n-gram simhash. Is case insensitive.", "Can be used for detection of semi-duplicate strings with bitHammingDistance. The smaller is the Hamming Distance of the calculated simhashes of two strings, the more likely these strings are the same.", "Syntax", "ngramSimHashCaseInsensitiveUTF8(string[, ngramsize])", "Arguments", "string \u2014 String. String.ngramsize \u2014 The size of an n-gram. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.", "Returned value", "Hash value. UInt64."], "Examples": ["SELECT ngramSimHashCaseInsensitiveUTF8('ClickHouse') AS Hash;"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["wordShingleSimHash"], "Feature": ["wordShingleSimHash(string[, shinglesize])"], "Description": ["wordShingleSimHash", "Splits a ASCII string into parts (shingles) of shinglesize words and returns the word shingle simhash. Is case sensitive.", "Can be used for detection of semi-duplicate strings with bitHammingDistance. The smaller is the Hamming Distance of the calculated simhashes of two strings, the more likely these strings are the same.", "Syntax", "wordShingleSimHash(string[, shinglesize])", "Arguments", "string \u2014 String. String.shinglesize \u2014 The size of a word shingle. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.", "Returned value", "Hash value. UInt64."], "Examples": ["SELECT wordShingleSimHash('ClickHouse\u00ae is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).') AS Hash;"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["wordShingleSimHashCaseInsensitive"], "Feature": ["wordShingleSimHashCaseInsensitive(string[, shinglesize])"], "Description": ["wordShingleSimHashCaseInsensitive", "Splits a ASCII string into parts (shingles) of shinglesize words and returns the word shingle simhash. Is case insensitive.", "Can be used for detection of semi-duplicate strings with bitHammingDistance. The smaller is the Hamming Distance of the calculated simhashes of two strings, the more likely these strings are the same.", "Syntax", "wordShingleSimHashCaseInsensitive(string[, shinglesize])", "Arguments", "string \u2014 String. String.shinglesize \u2014 The size of a word shingle. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.", "Returned value", "Hash value. UInt64."], "Examples": ["SELECT wordShingleSimHashCaseInsensitive('ClickHouse\u00ae is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).') AS Hash;"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["wordShingleSimHashUTF8"], "Feature": ["wordShingleSimHashUTF8(string[, shinglesize])"], "Description": ["wordShingleSimHashUTF8", "Splits a UTF-8 string into parts (shingles) of shinglesize words and returns the word shingle simhash. Is case sensitive.", "Can be used for detection of semi-duplicate strings with bitHammingDistance. The smaller is the Hamming Distance of the calculated simhashes of two strings, the more likely these strings are the same.", "Syntax", "wordShingleSimHashUTF8(string[, shinglesize])", "Arguments", "string \u2014 String. String.shinglesize \u2014 The size of a word shingle. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.", "Returned value", "Hash value. UInt64."], "Examples": ["SELECT wordShingleSimHashUTF8('ClickHouse\u00ae is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).') AS Hash;"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["wordShingleSimHashCaseInsensitiveUTF8"], "Feature": ["wordShingleSimHashCaseInsensitiveUTF8(string[, shinglesize])"], "Description": ["wordShingleSimHashCaseInsensitiveUTF8", "Splits a UTF-8 string into parts (shingles) of shinglesize words and returns the word shingle simhash. Is case insensitive.", "Can be used for detection of semi-duplicate strings with bitHammingDistance. The smaller is the Hamming Distance of the calculated simhashes of two strings, the more likely these strings are the same.", "Syntax", "wordShingleSimHashCaseInsensitiveUTF8(string[, shinglesize])", "Arguments", "string \u2014 String. String.shinglesize \u2014 The size of a word shingle. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.", "Returned value", "Hash value. UInt64."], "Examples": ["SELECT wordShingleSimHashCaseInsensitiveUTF8('ClickHouse\u00ae is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).') AS Hash;"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["wyHash64"], "Feature": ["wyHash64(string)"], "Description": ["wyHash64", "Produces a 64-bit wyHash64 hash value.", "Syntax", "wyHash64(string)", "Arguments", "string \u2014 String. String.", "Returned value", "Hash value. UInt64."], "Examples": ["SELECT wyHash64('ClickHouse') AS Hash;"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["ngramMinHash"], "Feature": ["ngramMinHash(string[, ngramsize, hashnum])"], "Description": ["ngramMinHash", "Splits a ASCII string into n-grams of ngramsize symbols and calculates hash values for each n-gram. Uses hashnum minimum hashes to calculate the minimum hash and hashnum maximum hashes to calculate the maximum hash. Returns a tuple with these hashes. Is case sensitive.", "Can be used for detection of semi-duplicate strings with tupleHammingDistance. For two strings: if one of the returned hashes is the same for both strings, we think that those strings are the same.", "Syntax", "ngramMinHash(string[, ngramsize, hashnum])", "Arguments", "string \u2014 String. String.ngramsize \u2014 The size of an n-gram. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.hashnum \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from 1 to 25. Default value: 6. UInt8.", "Returned value", "Tuple with two hashes \u2014 the minimum and the maximum. Tuple(UInt64, UInt64)."], "Examples": ["SELECT ngramMinHash('ClickHouse') AS Tuple;"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["ngramMinHashCaseInsensitive"], "Feature": ["ngramMinHashCaseInsensitive(string[, ngramsize, hashnum])"], "Description": ["ngramMinHashCaseInsensitive", "Splits a ASCII string into n-grams of ngramsize symbols and calculates hash values for each n-gram. Uses hashnum minimum hashes to calculate the minimum hash and hashnum maximum hashes to calculate the maximum hash. Returns a tuple with these hashes. Is case insensitive.", "Can be used for detection of semi-duplicate strings with tupleHammingDistance. For two strings: if one of the returned hashes is the same for both strings, we think that those strings are the same.", "Syntax", "ngramMinHashCaseInsensitive(string[, ngramsize, hashnum])", "Arguments", "string \u2014 String. String.ngramsize \u2014 The size of an n-gram. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.hashnum \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from 1 to 25. Default value: 6. UInt8.", "Returned value", "Tuple with two hashes \u2014 the minimum and the maximum. Tuple(UInt64, UInt64)."], "Examples": ["SELECT ngramMinHashCaseInsensitive('ClickHouse') AS Tuple;"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["ngramMinHashUTF8"], "Feature": ["ngramMinHashUTF8(string[, ngramsize, hashnum])"], "Description": ["ngramMinHashUTF8", "Splits a UTF-8 string into n-grams of ngramsize symbols and calculates hash values for each n-gram. Uses hashnum minimum hashes to calculate the minimum hash and hashnum maximum hashes to calculate the maximum hash. Returns a tuple with these hashes. Is case sensitive.", "Can be used for detection of semi-duplicate strings with tupleHammingDistance. For two strings: if one of the returned hashes is the same for both strings, we think that those strings are the same.", "Syntax", "ngramMinHashUTF8(string[, ngramsize, hashnum])", "Arguments", "string \u2014 String. String.ngramsize \u2014 The size of an n-gram. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.hashnum \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from 1 to 25. Default value: 6. UInt8.", "Returned value", "Tuple with two hashes \u2014 the minimum and the maximum. Tuple(UInt64, UInt64)."], "Examples": ["SELECT ngramMinHashUTF8('ClickHouse') AS Tuple;"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["ngramMinHashCaseInsensitiveUTF8"], "Feature": ["ngramMinHashCaseInsensitiveUTF8(string [, ngramsize, hashnum])"], "Description": ["ngramMinHashCaseInsensitiveUTF8", "Splits a UTF-8 string into n-grams of ngramsize symbols and calculates hash values for each n-gram. Uses hashnum minimum hashes to calculate the minimum hash and hashnum maximum hashes to calculate the maximum hash. Returns a tuple with these hashes. Is case insensitive.", "Can be used for detection of semi-duplicate strings with tupleHammingDistance. For two strings: if one of the returned hashes is the same for both strings, we think that those strings are the same.", "Syntax", "ngramMinHashCaseInsensitiveUTF8(string [, ngramsize, hashnum])", "Arguments", "string \u2014 String. String.ngramsize \u2014 The size of an n-gram. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.hashnum \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from 1 to 25. Default value: 6. UInt8.", "Returned value", "Tuple with two hashes \u2014 the minimum and the maximum. Tuple(UInt64, UInt64)."], "Examples": ["SELECT ngramMinHashCaseInsensitiveUTF8('ClickHouse') AS Tuple;"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["ngramMinHashArg"], "Feature": ["ngramMinHashArg(string[, ngramsize, hashnum])"], "Description": ["ngramMinHashArg", "Splits a ASCII string into n-grams of ngramsize symbols and returns the n-grams with minimum and maximum hashes, calculated by the ngramMinHash function with the same input. Is case sensitive.", "Syntax", "ngramMinHashArg(string[, ngramsize, hashnum])", "Arguments", "string \u2014 String. String.ngramsize \u2014 The size of an n-gram. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.hashnum \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from 1 to 25. Default value: 6. UInt8.", "Returned value", "Tuple with two tuples with hashnum n-grams each. Tuple(Tuple(String), Tuple(String))."], "Examples": ["SELECT ngramMinHashArg('ClickHouse') AS Tuple;"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["ngramMinHashArgCaseInsensitive"], "Feature": ["ngramMinHashArgCaseInsensitive(string[, ngramsize, hashnum])"], "Description": ["ngramMinHashArgCaseInsensitive", "Splits a ASCII string into n-grams of ngramsize symbols and returns the n-grams with minimum and maximum hashes, calculated by the ngramMinHashCaseInsensitive function with the same input. Is case insensitive.", "Syntax", "ngramMinHashArgCaseInsensitive(string[, ngramsize, hashnum])", "Arguments", "string \u2014 String. String.ngramsize \u2014 The size of an n-gram. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.hashnum \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from 1 to 25. Default value: 6. UInt8.", "Returned value", "Tuple with two tuples with hashnum n-grams each. Tuple(Tuple(String), Tuple(String))."], "Examples": ["SELECT ngramMinHashArgCaseInsensitive('ClickHouse') AS Tuple;"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["ngramMinHashArgUTF8"], "Feature": ["ngramMinHashArgUTF8(string[, ngramsize, hashnum])"], "Description": ["ngramMinHashArgUTF8", "Splits a UTF-8 string into n-grams of ngramsize symbols and returns the n-grams with minimum and maximum hashes, calculated by the ngramMinHashUTF8 function with the same input. Is case sensitive.", "Syntax", "ngramMinHashArgUTF8(string[, ngramsize, hashnum])", "Arguments", "string \u2014 String. String.ngramsize \u2014 The size of an n-gram. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.hashnum \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from 1 to 25. Default value: 6. UInt8.", "Returned value", "Tuple with two tuples with hashnum n-grams each. Tuple(Tuple(String), Tuple(String))."], "Examples": ["SELECT ngramMinHashArgUTF8('ClickHouse') AS Tuple;"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["ngramMinHashArgCaseInsensitiveUTF8"], "Feature": ["ngramMinHashArgCaseInsensitiveUTF8(string[, ngramsize, hashnum])"], "Description": ["ngramMinHashArgCaseInsensitiveUTF8", "Splits a UTF-8 string into n-grams of ngramsize symbols and returns the n-grams with minimum and maximum hashes, calculated by the ngramMinHashCaseInsensitiveUTF8 function with the same input. Is case insensitive.", "Syntax", "ngramMinHashArgCaseInsensitiveUTF8(string[, ngramsize, hashnum])", "Arguments", "string \u2014 String. String.ngramsize \u2014 The size of an n-gram. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.hashnum \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from 1 to 25. Default value: 6. UInt8.", "Returned value", "Tuple with two tuples with hashnum n-grams each. Tuple(Tuple(String), Tuple(String))."], "Examples": ["SELECT ngramMinHashArgCaseInsensitiveUTF8('ClickHouse') AS Tuple;"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["wordShingleMinHash"], "Feature": ["wordShingleMinHash(string[, shinglesize, hashnum])"], "Description": ["wordShingleMinHash", "Splits a ASCII string into parts (shingles) of shinglesize words and calculates hash values for each word shingle. Uses hashnum minimum hashes to calculate the minimum hash and hashnum maximum hashes to calculate the maximum hash. Returns a tuple with these hashes. Is case sensitive.", "Can be used for detection of semi-duplicate strings with tupleHammingDistance. For two strings: if one of the returned hashes is the same for both strings, we think that those strings are the same.", "Syntax", "wordShingleMinHash(string[, shinglesize, hashnum])", "Arguments", "string \u2014 String. String.shinglesize \u2014 The size of a word shingle. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.hashnum \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from 1 to 25. Default value: 6. UInt8.", "Returned value", "Tuple with two hashes \u2014 the minimum and the maximum. Tuple(UInt64, UInt64)."], "Examples": ["SELECT wordShingleMinHash('ClickHouse\u00ae is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).') AS Tuple;"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["wordShingleMinHashCaseInsensitive"], "Feature": ["wordShingleMinHashCaseInsensitive(string[, shinglesize, hashnum])"], "Description": ["wordShingleMinHashCaseInsensitive", "Splits a ASCII string into parts (shingles) of shinglesize words and calculates hash values for each word shingle. Uses hashnum minimum hashes to calculate the minimum hash and hashnum maximum hashes to calculate the maximum hash. Returns a tuple with these hashes. Is case insensitive.", "Can be used for detection of semi-duplicate strings with tupleHammingDistance. For two strings: if one of the returned hashes is the same for both strings, we think that those strings are the same.", "Syntax", "wordShingleMinHashCaseInsensitive(string[, shinglesize, hashnum])", "Arguments", "string \u2014 String. String.shinglesize \u2014 The size of a word shingle. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.hashnum \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from 1 to 25. Default value: 6. UInt8.", "Returned value", "Tuple with two hashes \u2014 the minimum and the maximum. Tuple(UInt64, UInt64)."], "Examples": ["SELECT wordShingleMinHashCaseInsensitive('ClickHouse\u00ae is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).') AS Tuple;"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["wordShingleMinHashUTF8"], "Feature": ["wordShingleMinHashUTF8(string[, shinglesize, hashnum])"], "Description": ["wordShingleMinHashUTF8", "Splits a UTF-8 string into parts (shingles) of shinglesize words and calculates hash values for each word shingle. Uses hashnum minimum hashes to calculate the minimum hash and hashnum maximum hashes to calculate the maximum hash. Returns a tuple with these hashes. Is case sensitive.", "Can be used for detection of semi-duplicate strings with tupleHammingDistance. For two strings: if one of the returned hashes is the same for both strings, we think that those strings are the same.", "Syntax", "wordShingleMinHashUTF8(string[, shinglesize, hashnum])", "Arguments", "string \u2014 String. String.shinglesize \u2014 The size of a word shingle. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.hashnum \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from 1 to 25. Default value: 6. UInt8.", "Returned value", "Tuple with two hashes \u2014 the minimum and the maximum. Tuple(UInt64, UInt64)."], "Examples": ["SELECT wordShingleMinHashUTF8('ClickHouse\u00ae is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).') AS Tuple;"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["wordShingleMinHashCaseInsensitiveUTF8"], "Feature": ["wordShingleMinHashCaseInsensitiveUTF8(string[, shinglesize, hashnum])"], "Description": ["wordShingleMinHashCaseInsensitiveUTF8", "Splits a UTF-8 string into parts (shingles) of shinglesize words and calculates hash values for each word shingle. Uses hashnum minimum hashes to calculate the minimum hash and hashnum maximum hashes to calculate the maximum hash. Returns a tuple with these hashes. Is case insensitive.", "Can be used for detection of semi-duplicate strings with tupleHammingDistance. For two strings: if one of the returned hashes is the same for both strings, we think that those strings are the same.", "Syntax", "wordShingleMinHashCaseInsensitiveUTF8(string[, shinglesize, hashnum])", "Arguments", "string \u2014 String. String.shinglesize \u2014 The size of a word shingle. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.hashnum \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from 1 to 25. Default value: 6. UInt8.", "Returned value", "Tuple with two hashes \u2014 the minimum and the maximum. Tuple(UInt64, UInt64)."], "Examples": ["SELECT wordShingleMinHashCaseInsensitiveUTF8('ClickHouse\u00ae is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).') AS Tuple;"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["wordShingleMinHashArg"], "Feature": ["wordShingleMinHashArg(string[, shinglesize, hashnum])"], "Description": ["wordShingleMinHashArg", "Splits a ASCII string into parts (shingles) of shinglesize words each and returns the shingles with minimum and maximum word hashes, calculated by the wordshingleMinHash function with the same input. Is case sensitive.", "Syntax", "wordShingleMinHashArg(string[, shinglesize, hashnum])", "Arguments", "string \u2014 String. String.shinglesize \u2014 The size of a word shingle. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.hashnum \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from 1 to 25. Default value: 6. UInt8.", "Returned value", "Tuple with two tuples with hashnum word shingles each. Tuple(Tuple(String), Tuple(String))."], "Examples": ["SELECT wordShingleMinHashArg('ClickHouse\u00ae is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).', 1, 3) AS Tuple;"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["wordShingleMinHashArgCaseInsensitive"], "Feature": ["wordShingleMinHashArgCaseInsensitive(string[, shinglesize, hashnum])"], "Description": ["wordShingleMinHashArgCaseInsensitive", "Splits a ASCII string into parts (shingles) of shinglesize words each and returns the shingles with minimum and maximum word hashes, calculated by the wordShingleMinHashCaseInsensitive function with the same input. Is case insensitive.", "Syntax", "wordShingleMinHashArgCaseInsensitive(string[, shinglesize, hashnum])", "Arguments", "string \u2014 String. String.shinglesize \u2014 The size of a word shingle. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.hashnum \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from 1 to 25. Default value: 6. UInt8.", "Returned value", "Tuple with two tuples with hashnum word shingles each. Tuple(Tuple(String), Tuple(String))."], "Examples": ["SELECT wordShingleMinHashArgCaseInsensitive('ClickHouse\u00ae is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).', 1, 3) AS Tuple;"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["wordShingleMinHashArgUTF8"], "Feature": ["wordShingleMinHashArgUTF8(string[, shinglesize, hashnum])"], "Description": ["wordShingleMinHashArgUTF8", "Splits a UTF-8 string into parts (shingles) of shinglesize words each and returns the shingles with minimum and maximum word hashes, calculated by the wordShingleMinHashUTF8 function with the same input. Is case sensitive.", "Syntax", "wordShingleMinHashArgUTF8(string[, shinglesize, hashnum])", "Arguments", "string \u2014 String. String.shinglesize \u2014 The size of a word shingle. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.hashnum \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from 1 to 25. Default value: 6. UInt8.", "Returned value", "Tuple with two tuples with hashnum word shingles each. Tuple(Tuple(String), Tuple(String))."], "Examples": ["SELECT wordShingleMinHashArgUTF8('ClickHouse\u00ae is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).', 1, 3) AS Tuple;"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["wordShingleMinHashArgCaseInsensitiveUTF8"], "Feature": ["wordShingleMinHashArgCaseInsensitiveUTF8(string[, shinglesize, hashnum])"], "Description": ["wordShingleMinHashArgCaseInsensitiveUTF8", "Splits a UTF-8 string into parts (shingles) of shinglesize words each and returns the shingles with minimum and maximum word hashes, calculated by the wordShingleMinHashCaseInsensitiveUTF8 function with the same input. Is case insensitive.", "Syntax", "wordShingleMinHashArgCaseInsensitiveUTF8(string[, shinglesize, hashnum])", "Arguments", "string \u2014 String. String.shinglesize \u2014 The size of a word shingle. Optional. Possible values: any number from 1 to 25. Default value: 3. UInt8.hashnum \u2014 The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from 1 to 25. Default value: 6. UInt8.", "Returned value", "Tuple with two tuples with hashnum word shingles each. Tuple(Tuple(String), Tuple(String))."], "Examples": ["SELECT wordShingleMinHashArgCaseInsensitiveUTF8('ClickHouse\u00ae is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).', 1, 3) AS Tuple;"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["sqidEncode"], "Feature": ["sqidEncode(number1, ...)"], "Description": ["sqidEncode", "Encodes numbers as a Sqid which is a YouTube-like ID string.\nThe output alphabet is abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.\nDo not use this function for hashing - the generated IDs can be decoded back into the original numbers.", "Syntax", "sqidEncode(number1, ...)", "Alias: sqid", "Arguments", "A variable number of UInt8, UInt16, UInt32 or UInt64 numbers.", "Returned Value", "A sqid String."], "Examples": ["SELECT sqidEncode(1, 2, 3, 4, 5);"], "Category": ["Hash Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/hash-functions"], "Title": ["sqidDecode"], "Feature": ["sqidDecode(sqid)"], "Description": ["sqidDecode", "Decodes a Sqid back into its original numbers.\nReturns an empty array in case the input string is not a valid sqid.", "Syntax", "sqidDecode(sqid)", "Arguments", "A sqid - String", "Returned Value", "The sqid transformed to numbers Array(UInt64)."], "Examples": ["SELECT sqidDecode('gXHfJ1C6dN');"], "Category": ["Hash Functions"]}
