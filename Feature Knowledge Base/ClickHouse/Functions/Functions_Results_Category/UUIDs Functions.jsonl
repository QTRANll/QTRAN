{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/uuid-functions"], "Title": ["generateUUIDv4"], "Feature": ["generateUUIDv4([expr])"], "Description": ["generateUUIDv4", "Generates a version 4 UUID.", "Syntax", "generateUUIDv4([expr])", "Arguments", "expr \u2014 An arbitrary expression used to bypass common subexpression elimination if the function is called multiple times in a query. The value of the expression has no effect on the returned UUID. Optional.", "Returned value", "A value of type UUIDv4."], "Examples": ["CREATE TABLE tab (uuid UUID) ENGINE = Memory;INSERT INTO tab SELECT generateUUIDv4();SELECT * FROM tab;", "SELECT generateUUIDv4(1), generateUUIDv4(2);\u250c\u2500generateUUIDv4(1)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500generateUUIDv4(2)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 2d49dc6e-ddce-4cd0-afb8-790956df54c1 \u2502 8abf8c13-7dea-4fdf-af3e-0e18767770e6 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Category": ["UUIDs Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/uuid-functions"], "Title": ["generateUUIDv7"], "Feature": ["generateUUIDv7([expr])"], "Description": ["generateUUIDv7", "Generates a version 7 UUID.", "The generated UUID contains the current Unix timestamp in milliseconds (48 bits), followed by version \"7\" (4 bits), a counter (42 bit) to distinguish UUIDs within a millisecond (including a variant field \"2\", 2 bit), and a random field (32 bits).\nFor any given timestamp (unix_ts_ms), the counter starts at a random value and is incremented by 1 for each new UUID until the timestamp changes.\nIn case the counter overflows, the timestamp field is incremented by 1 and the counter is reset to a random new start value.", "Function generateUUIDv7 guarantees that the counter field within a timestamp increments monotonically across all function invocations in concurrently running threads and queries.", " 0                   1                   2                   3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\u251c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u2524|                           unix_ts_ms                          |\u251c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u2524|          unix_ts_ms           |  ver  |   counter_high_bits   |\u251c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u2524|var|                   counter_low_bits                        |\u251c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u2524|                            rand_b                             |\u2514\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2518", "NoteAs of April 2024, version 7 UUIDs are in draft status and their layout may change in future.", "Syntax", "generateUUIDv7([expr])", "Arguments", "expr \u2014 An arbitrary expression used to bypass common subexpression elimination if the function is called multiple times in a query. The value of the expression has no effect on the returned UUID. Optional.", "Returned value", "A value of type UUIDv7."], "Examples": ["CREATE TABLE tab (uuid UUID) ENGINE = Memory;INSERT INTO tab SELECT generateUUIDv7();SELECT * FROM tab;", "SELECT generateUUIDv7(1), generateUUIDv7(2);\u250c\u2500generateUUIDv7(1)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500generateUUIDv7(2)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 018f05c9-4ab8-7b86-b64e-c9f03fbd45d1 \u2502 018f05c9-4ab8-7b86-b64e-c9f12efb7e16 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Category": ["UUIDs Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/uuid-functions"], "Title": ["empty"], "Feature": ["empty(UUID)"], "Description": ["empty", "Checks whether the input UUID is empty.", "Syntax", "empty(UUID)", "The UUID is considered empty if it contains all zeros (zero UUID).", "The function also works for Arrays and Strings.", "Arguments", "x \u2014 A UUID. UUID.", "Returned value", "Returns 1 for an empty UUID or 0 for a non-empty UUID. UInt8."], "Examples": ["SELECT empty(generateUUIDv4());"], "Category": ["UUIDs Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/uuid-functions"], "Title": ["notEmpty"], "Feature": ["notEmpty(UUID)"], "Description": ["notEmpty", "Checks whether the input UUID is non-empty.", "Syntax", "notEmpty(UUID)", "The UUID is considered empty if it contains all zeros (zero UUID).", "The function also works for Arrays or Strings.", "Arguments", "x \u2014 A UUID. UUID.", "Returned value", "Returns 1 for a non-empty UUID or 0 for an empty UUID. UInt8."], "Examples": ["SELECT notEmpty(generateUUIDv4());"], "Category": ["UUIDs Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/uuid-functions"], "Title": ["toUUID"], "Feature": ["toUUID"], "Description": ["toUUID", "Converts a value of type String to a UUID.", "toUUID(string)", "Returned value", "The UUID type value.", "Usage example", "SELECT toUUID('61f0c404-5cb3-11e7-907b-a6006ad3dba0') AS uuid", "Result:", "\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500uuid\u2500\u2510\u2502 61f0c404-5cb3-11e7-907b-a6006ad3dba0 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Examples": ["toUUID(string)", "SELECT toUUID('61f0c404-5cb3-11e7-907b-a6006ad3dba0') AS uuid"], "Category": ["UUIDs Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/uuid-functions"], "Title": ["toUUIDOrDefault"], "Feature": ["toUUIDOrDefault"], "Description": ["toUUIDOrDefault", "Arguments", "string \u2014 String of 36 characters or FixedString(36). String.default \u2014 UUID to be used as the default if the first argument cannot be converted to a UUID type. UUID.", "Returned value", "UUID", "toUUIDOrDefault(string, default)", "Returned value", "The UUID type value.", "Usage examples", "This first example returns the first argument converted to a UUID type as it can be converted:", "SELECT toUUIDOrDefault('61f0c404-5cb3-11e7-907b-a6006ad3dba0', cast('59f0c404-5cb3-11e7-907b-a6006ad3dba0' as UUID));", "Result:", "\u250c\u2500toUUIDOrDefault('61f0c404-5cb3-11e7-907b-a6006ad3dba0', CAST('59f0c404-5cb3-11e7-907b-a6006ad3dba0', 'UUID'))\u2500\u2510\u2502 61f0c404-5cb3-11e7-907b-a6006ad3dba0                                                                          \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "This second example returns the second argument (the provided default UUID) as the first argument cannot be converted to a UUID type:", "SELECT toUUIDOrDefault('-----61f0c404-5cb3-11e7-907b-a6006ad3dba0', cast('59f0c404-5cb3-11e7-907b-a6006ad3dba0' as UUID));", "Result:", "\u250c\u2500toUUIDOrDefault('-----61f0c404-5cb3-11e7-907b-a6006ad3dba0', CAST('59f0c404-5cb3-11e7-907b-a6006ad3dba0', 'UUID'))\u2500\u2510\u2502 59f0c404-5cb3-11e7-907b-a6006ad3dba0                                                                               \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Examples": ["toUUIDOrDefault(string, default)", "SELECT toUUIDOrDefault('61f0c404-5cb3-11e7-907b-a6006ad3dba0', cast('59f0c404-5cb3-11e7-907b-a6006ad3dba0' as UUID));", "SELECT toUUIDOrDefault('-----61f0c404-5cb3-11e7-907b-a6006ad3dba0', cast('59f0c404-5cb3-11e7-907b-a6006ad3dba0' as UUID));"], "Category": ["UUIDs Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/uuid-functions"], "Title": ["toUUIDOrNull"], "Feature": ["toUUIDOrNull"], "Description": ["toUUIDOrNull", "Takes an argument of type String and tries to parse it into UUID. If failed, returns NULL.", "toUUIDOrNull(string)", "Returned value", "The Nullable(UUID) type value.", "Usage example", "SELECT toUUIDOrNull('61f0c404-5cb3-11e7-907b-a6006ad3dba0T') AS uuid", "Result:", "\u250c\u2500uuid\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Examples": ["toUUIDOrNull(string)", "SELECT toUUIDOrNull('61f0c404-5cb3-11e7-907b-a6006ad3dba0T') AS uuid"], "Category": ["UUIDs Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/uuid-functions"], "Title": ["toUUIDOrZero"], "Feature": ["toUUIDOrZero"], "Description": ["toUUIDOrZero", "It takes an argument of type String and tries to parse it into UUID. If failed, returns zero UUID.", "toUUIDOrZero(string)", "Returned value", "The UUID type value.", "Usage example", "SELECT toUUIDOrZero('61f0c404-5cb3-11e7-907b-a6006ad3dba0T') AS uuid", "Result:", "\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500uuid\u2500\u2510\u2502 00000000-0000-0000-0000-000000000000 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Examples": ["toUUIDOrZero(string)", "SELECT toUUIDOrZero('61f0c404-5cb3-11e7-907b-a6006ad3dba0T') AS uuid"], "Category": ["UUIDs Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/uuid-functions"], "Title": ["UUIDStringToNum"], "Feature": ["UUIDStringToNum(string[, variant = 1])"], "Description": ["UUIDStringToNum", "Accepts string containing 36 characters in the format xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx, and returns a FixedString(16) as its binary representation, with its format optionally specified by variant (Big-endian by default).", "Syntax", "UUIDStringToNum(string[, variant = 1])", "Arguments", "string \u2014 A String of 36 characters or FixedStringvariant \u2014 Integer, representing a variant as specified by RFC4122. 1 = Big-endian (default), 2 = Microsoft.", "Returned value", "FixedString(16)", "Usage examples", "SELECT    '612f3c40-5d3b-217e-707b-6a546a3d7b29' AS uuid,    UUIDStringToNum(uuid) AS bytes", "Result:", "\u250c\u2500uuid\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500bytes\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 612f3c40-5d3b-217e-707b-6a546a3d7b29 \u2502 a/<@];!~p{jTj={) \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "SELECT    '612f3c40-5d3b-217e-707b-6a546a3d7b29' AS uuid,    UUIDStringToNum(uuid, 2) AS bytes", "Result:", "\u250c\u2500uuid\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500bytes\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 612f3c40-5d3b-217e-707b-6a546a3d7b29 \u2502 @</a;]~!p{jTj={) \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Examples": ["UUIDStringToNum(string[, variant = 1])", "SELECT    '612f3c40-5d3b-217e-707b-6a546a3d7b29' AS uuid,    UUIDStringToNum(uuid) AS bytes", "SELECT    '612f3c40-5d3b-217e-707b-6a546a3d7b29' AS uuid,    UUIDStringToNum(uuid, 2) AS bytes"], "Category": ["UUIDs Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/uuid-functions"], "Title": ["UUIDNumToString"], "Feature": ["UUIDNumToString(binary[, variant = 1])"], "Description": ["UUIDNumToString", "Accepts binary containing a binary representation of a UUID, with its format optionally specified by variant (Big-endian by default), and returns a string containing 36 characters in text format.", "Syntax", "UUIDNumToString(binary[, variant = 1])", "Arguments", "binary \u2014 FixedString(16) as a binary representation of a UUID.variant \u2014 Integer, representing a variant as specified by RFC4122. 1 = Big-endian (default), 2 = Microsoft.", "Returned value", "String.", "Usage example", "SELECT    'a/<@];!~p{jTj={)' AS bytes,    UUIDNumToString(toFixedString(bytes, 16)) AS uuid", "Result:", "\u250c\u2500bytes\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500uuid\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 a/<@];!~p{jTj={) \u2502 612f3c40-5d3b-217e-707b-6a546a3d7b29 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "SELECT    '@</a;]~!p{jTj={)' AS bytes,    UUIDNumToString(toFixedString(bytes, 16), 2) AS uuid", "Result:", "\u250c\u2500bytes\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500uuid\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 @</a;]~!p{jTj={) \u2502 612f3c40-5d3b-217e-707b-6a546a3d7b29 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Examples": ["UUIDNumToString(binary[, variant = 1])", "SELECT    'a/<@];!~p{jTj={)' AS bytes,    UUIDNumToString(toFixedString(bytes, 16)) AS uuid", "SELECT    '@</a;]~!p{jTj={)' AS bytes,    UUIDNumToString(toFixedString(bytes, 16), 2) AS uuid"], "Category": ["UUIDs Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/uuid-functions"], "Title": ["UUIDToNum"], "Feature": ["UUIDToNum(uuid[, variant = 1])"], "Description": ["UUIDToNum", "Accepts a UUID and returns its binary representation as a FixedString(16), with its format optionally specified by variant (Big-endian by default). This function replaces calls to two separate functions UUIDStringToNum(toString(uuid)) so no intermediate conversion from UUID to string is required to extract bytes from a UUID.", "Syntax", "UUIDToNum(uuid[, variant = 1])", "Arguments", "uuid \u2014 UUID.variant \u2014 Integer, representing a variant as specified by RFC4122. 1 = Big-endian (default), 2 = Microsoft.", "Returned value", "The binary representation of the UUID.", "Usage examples", "SELECT    toUUID('612f3c40-5d3b-217e-707b-6a546a3d7b29') AS uuid,    UUIDToNum(uuid) AS bytes", "Result:", "\u250c\u2500uuid\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500bytes\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 612f3c40-5d3b-217e-707b-6a546a3d7b29 \u2502 a/<@];!~p{jTj={) \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "SELECT    toUUID('612f3c40-5d3b-217e-707b-6a546a3d7b29') AS uuid,    UUIDToNum(uuid, 2) AS bytes", "Result:", "\u250c\u2500uuid\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500bytes\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 612f3c40-5d3b-217e-707b-6a546a3d7b29 \u2502 @</a;]~!p{jTj={) \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Examples": ["UUIDToNum(uuid[, variant = 1])", "SELECT    toUUID('612f3c40-5d3b-217e-707b-6a546a3d7b29') AS uuid,    UUIDToNum(uuid) AS bytes", "SELECT    toUUID('612f3c40-5d3b-217e-707b-6a546a3d7b29') AS uuid,    UUIDToNum(uuid, 2) AS bytes"], "Category": ["UUIDs Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/uuid-functions"], "Title": ["UUIDv7ToDateTime"], "Feature": ["UUIDv7ToDateTime(uuid[, timezone])"], "Description": ["UUIDv7ToDateTime", "Returns the timestamp component of a UUID version 7.", "Syntax", "UUIDv7ToDateTime(uuid[, timezone])", "Arguments", "uuid \u2014 UUID of version 7.timezone \u2014 Timezone name for the returned value (optional). String.", "Returned value", "Timestamp with milliseconds precision. If the UUID is not a valid version 7 UUID, it returns 1970-01-01 00:00:00.000. DateTime64(3).", "Usage examples", "SELECT UUIDv7ToDateTime(toUUID('018f05c9-4ab8-7b86-b64e-c9f03fbd45d1'))", "Result:", "\u250c\u2500UUIDv7ToDateTime(toUUID('018f05c9-4ab8-7b86-b64e-c9f03fbd45d1'))\u2500\u2510\u2502                                          2024-04-22 15:30:29.048 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "SELECT UUIDv7ToDateTime(toUUID('018f05c9-4ab8-7b86-b64e-c9f03fbd45d1'), 'America/New_York')", "Result:", "\u250c\u2500UUIDv7ToDateTime(toUUID('018f05c9-4ab8-7b86-b64e-c9f03fbd45d1'), 'America/New_York')\u2500\u2510\u2502                                                              2024-04-22 08:30:29.048 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Examples": ["UUIDv7ToDateTime(uuid[, timezone])", "SELECT UUIDv7ToDateTime(toUUID('018f05c9-4ab8-7b86-b64e-c9f03fbd45d1'))", "SELECT UUIDv7ToDateTime(toUUID('018f05c9-4ab8-7b86-b64e-c9f03fbd45d1'), 'America/New_York')"], "Category": ["UUIDs Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/uuid-functions"], "Title": ["serverUUID"], "Feature": ["serverUUID()"], "Description": ["serverUUID", "Returns the random UUID generated during the first start of the ClickHouse server. The UUID is stored in file uuid in the ClickHouse server directory (e.g. /var/lib/clickhouse/) and retained between server restarts.", "Syntax", "serverUUID()", "Returned value", "The UUID of the server. UUID."], "Examples": ["serverUUID()"], "Category": ["UUIDs Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/uuid-functions"], "Title": ["generateSnowflakeID"], "Feature": ["generateSnowflakeID([expr, [machine_id]])"], "Description": ["generateSnowflakeID", "Generates a Snowflake ID.", "The generated Snowflake ID contains the current Unix timestamp in milliseconds (41 + 1 top zero bits), followed by a machine id (10 bits), and a counter (12 bits) to distinguish IDs within a millisecond.\nFor any given timestamp (unix_ts_ms), the counter starts at 0 and is incremented by 1 for each new Snowflake ID until the timestamp changes.\nIn case the counter overflows, the timestamp field is incremented by 1 and the counter is reset to 0.", "Function generateSnowflakeID guarantees that the counter field within a timestamp increments monotonically across all function invocations in concurrently running threads and queries.", "NoteThe generated Snowflake IDs are based on the UNIX epoch 1970-01-01.\nWhile no standard or recommendation exists for the epoch of Snowflake IDs, implementations in other systems may use a different epoch, e.g. Twitter/X (2010-11-04) or Mastodon (2015-01-01).", " 0                   1                   2                   3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\u251c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u2524|0|                         timestamp                           |\u251c\u2500\u253c                 \u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u2524|                   |     machine_id    |    machine_seq_num    |\u2514\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2518", "Syntax", "generateSnowflakeID([expr, [machine_id]])", "Arguments", "expr \u2014 An arbitrary expression used to bypass common subexpression elimination if the function is called multiple times in a query. The value of the expression has no effect on the returned Snowflake ID. Optional.machine_id \u2014 A machine ID, the lowest 10 bits are used. Int64. Optional.", "Returned value", "A value of type UInt64."], "Examples": ["CREATE TABLE tab (id UInt64) ENGINE = Memory;INSERT INTO tab SELECT generateSnowflakeID();SELECT * FROM tab;", "SELECT generateSnowflakeID(1), generateSnowflakeID(2);\u250c\u2500generateSnowflakeID(1)\u2500\u252c\u2500generateSnowflakeID(2)\u2500\u2510\u2502    7199081609652224000 \u2502    7199081609652224001 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Category": ["UUIDs Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/uuid-functions"], "Title": ["snowflakeToDateTime"], "Feature": ["snowflakeToDateTime(value[, time_zone])"], "Description": ["snowflakeToDateTime", "DangerThis function is deprecated and can only be used if setting allow_deprecated_snowflake_conversion_functions is enabled.\nThe function will be removed at some point in future.", "Extracts the timestamp component of a Snowflake ID in DateTime format.", "Syntax", "snowflakeToDateTime(value[, time_zone])", "Arguments", "value \u2014 Snowflake ID. Int64.time_zone \u2014 Timezone. The function parses time_string according to the timezone. Optional. String.", "Returned value", "The timestamp component of value as a DateTime value."], "Examples": ["SELECT snowflakeToDateTime(CAST('1426860702823350272', 'Int64'), 'UTC');"], "Category": ["UUIDs Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/uuid-functions"], "Title": ["snowflakeToDateTime64"], "Feature": ["snowflakeToDateTime64(value[, time_zone])"], "Description": ["snowflakeToDateTime64", "DangerThis function is deprecated and can only be used if setting allow_deprecated_snowflake_conversion_functions is enabled.\nThe function will be removed at some point in future.", "Extracts the timestamp component of a Snowflake ID in DateTime64 format.", "Syntax", "snowflakeToDateTime64(value[, time_zone])", "Arguments", "value \u2014 Snowflake ID. Int64.time_zone \u2014 Timezone. The function parses time_string according to the timezone. Optional. String.", "Returned value", "The timestamp component of value as a DateTime64 with scale = 3, i.e. millisecond precision."], "Examples": ["SELECT snowflakeToDateTime64(CAST('1426860802823350272', 'Int64'), 'UTC');"], "Category": ["UUIDs Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/uuid-functions"], "Title": ["dateTimeToSnowflake"], "Feature": ["dateTimeToSnowflake(value)"], "Description": ["dateTimeToSnowflake", "DangerThis function is deprecated and can only be used if setting allow_deprecated_snowflake_conversion_functions is enabled.\nThe function will be removed at some point in future.", "Converts a DateTime value to the first Snowflake ID at the giving time.", "Syntax", "dateTimeToSnowflake(value)", "Arguments", "value \u2014 Date with time. DateTime.", "Returned value", "Input value converted to the Int64 data type as the first Snowflake ID at that time."], "Examples": ["WITH toDateTime('2021-08-15 18:57:56', 'Asia/Shanghai') AS dt SELECT dateTimeToSnowflake(dt);"], "Category": ["UUIDs Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/uuid-functions"], "Title": ["dateTime64ToSnowflake"], "Feature": ["dateTime64ToSnowflake(value)"], "Description": ["dateTime64ToSnowflake", "DangerThis function is deprecated and can only be used if setting allow_deprecated_snowflake_conversion_functions is enabled.\nThe function will be removed at some point in future.", "Convert a DateTime64 to the first Snowflake ID at the giving time.", "Syntax", "dateTime64ToSnowflake(value)", "Arguments", "value \u2014 Date with time. DateTime64.", "Returned value", "Input value converted to the Int64 data type as the first Snowflake ID at that time."], "Examples": ["WITH toDateTime64('2021-08-15 18:57:56.492', 3, 'Asia/Shanghai') AS dt64 SELECT dateTime64ToSnowflake(dt64);"], "Category": ["UUIDs Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/uuid-functions"], "Title": ["snowflakeIDToDateTime"], "Feature": ["snowflakeIDToDateTime(value[, epoch[, time_zone]])"], "Description": ["snowflakeIDToDateTime", "Returns the timestamp component of a Snowflake ID as a value of type DateTime.", "Syntax", "snowflakeIDToDateTime(value[, epoch[, time_zone]])", "Arguments", "value \u2014 Snowflake ID. UInt64.epoch - Epoch of the Snowflake ID in milliseconds since 1970-01-01. Defaults to 0 (1970-01-01). For the Twitter/X epoch (2015-01-01), provide 1288834974657. Optional. UInt*.time_zone \u2014 Timezone. The function parses time_string according to the timezone. Optional. String.", "Returned value", "The timestamp component of value as a DateTime value."], "Examples": ["SELECT snowflakeIDToDateTime(7204436857747984384) AS res"], "Category": ["UUIDs Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/uuid-functions"], "Title": ["snowflakeIDToDateTime64"], "Feature": ["snowflakeIDToDateTime64(value[, epoch[, time_zone]])"], "Description": ["snowflakeIDToDateTime64", "Returns the timestamp component of a Snowflake ID as a value of type DateTime64.", "Syntax", "snowflakeIDToDateTime64(value[, epoch[, time_zone]])", "Arguments", "value \u2014 Snowflake ID. UInt64.epoch - Epoch of the Snowflake ID in milliseconds since 1970-01-01. Defaults to 0 (1970-01-01). For the Twitter/X epoch (2015-01-01), provide 1288834974657. Optional. UInt*.time_zone \u2014 Timezone. The function parses time_string according to the timezone. Optional. String.", "Returned value", "The timestamp component of value as a DateTime64 with scale = 3, i.e. millisecond precision."], "Examples": ["SELECT snowflakeIDToDateTime64(7204436857747984384) AS res"], "Category": ["UUIDs Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/uuid-functions"], "Title": ["dateTimeToSnowflakeID"], "Feature": ["dateTimeToSnowflakeID(value[, epoch])"], "Description": ["dateTimeToSnowflakeID", "Converts a DateTime value to the first Snowflake ID at the giving time.", "Syntax", "dateTimeToSnowflakeID(value[, epoch])", "Arguments", "value \u2014 Date with time. DateTime.epoch - Epoch of the Snowflake ID in milliseconds since 1970-01-01. Defaults to 0 (1970-01-01). For the Twitter/X epoch (2015-01-01), provide 1288834974657. Optional. UInt*.", "Returned value", "Input value converted to UInt64 as the first Snowflake ID at that time."], "Examples": ["SELECT toDateTime('2021-08-15 18:57:56', 'Asia/Shanghai') AS dt, dateTimeToSnowflakeID(dt) AS res;"], "Category": ["UUIDs Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/uuid-functions"], "Title": ["dateTime64ToSnowflakeID"], "Feature": ["dateTime64ToSnowflakeID(value[, epoch])"], "Description": ["dateTime64ToSnowflakeID", "Convert a DateTime64 to the first Snowflake ID at the giving time.", "Syntax", "dateTime64ToSnowflakeID(value[, epoch])", "Arguments", "value \u2014 Date with time. DateTime64.epoch - Epoch of the Snowflake ID in milliseconds since 1970-01-01. Defaults to 0 (1970-01-01). For the Twitter/X epoch (2015-01-01), provide 1288834974657. Optional. UInt*.", "Returned value", "Input value converted to UInt64 as the first Snowflake ID at that time."], "Examples": ["SELECT toDateTime('2021-08-15 18:57:56.493', 3, 'Asia/Shanghai') AS dt, dateTime64ToSnowflakeID(dt) AS res;"], "Category": ["UUIDs Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/uuid-functions"], "Title": ["See also"], "Feature": ["See also"], "Description": ["See also", "dictGetUUID"], "Examples": [], "Category": ["UUIDs Functions"]}
