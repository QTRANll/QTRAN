{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/nlp-functions"], "Title": ["detectCharset"], "Feature": ["detectCharset('text_to_be_analyzed')"], "Description": ["detectCharset", "The detectCharset function detects the character set of the non-UTF8-encoded input string.", "Syntax", "detectCharset('text_to_be_analyzed')", "Arguments", "text_to_be_analyzed \u2014 A collection (or sentences) of strings to analyze. String.", "Returned value", "A String containing the code of the detected character set"], "Examples": ["SELECT detectCharset('Ich bleibe f\u00fcr ein paar Tage.');"], "Category": ["NLP (experimental) Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/nlp-functions"], "Title": ["detectLanguage"], "Feature": ["detectLanguage('text_to_be_analyzed')"], "Description": ["detectLanguage", "Detects the language of the UTF8-encoded input string. The function uses the CLD2 library for detection, and it returns the 2-letter ISO language code.", "The detectLanguage function works best when providing over 200 characters in the input string.", "Syntax", "detectLanguage('text_to_be_analyzed')", "Arguments", "text_to_be_analyzed \u2014 A collection (or sentences) of strings to analyze. String.", "Returned value", "The 2-letter ISO code of the detected language", "Other possible results:", "un = unknown, can not detect any language.other = the detected language does not have 2 letter code."], "Examples": ["SELECT detectLanguage('Je pense que je ne parviendrai jamais \u00e0 parler fran\u00e7ais comme un natif. Where there\u2019s a will, there\u2019s a way.');"], "Category": ["NLP (experimental) Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/nlp-functions"], "Title": ["detectLanguageMixed"], "Feature": ["detectLanguageMixed('text_to_be_analyzed')"], "Description": ["detectLanguageMixed", "Similar to the detectLanguage function, but detectLanguageMixed returns a Map of 2-letter language codes that are mapped to the percentage of the certain language in the text.", "Syntax", "detectLanguageMixed('text_to_be_analyzed')", "Arguments", "text_to_be_analyzed \u2014 A collection (or sentences) of strings to analyze. String.", "Returned value", "Map(String, Float32): The keys are 2-letter ISO codes and the values are a percentage of text found for that language"], "Examples": ["SELECT detectLanguageMixed('\u4e8c\u514e\u3092\u8ffd\u3046\u8005\u306f\u4e00\u514e\u3092\u3082\u5f97\u305a\u4e8c\u514e\u3092\u8ffd\u3046\u8005\u306f\u4e00\u514e\u3092\u3082\u5f97\u305a A vaincre sans peril, on triomphe sans gloire.');"], "Category": ["NLP (experimental) Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/nlp-functions"], "Title": ["detectProgrammingLanguage"], "Feature": ["detectProgrammingLanguage('source_code')"], "Description": ["detectProgrammingLanguage", "Determines the programming language from the source code. Calculates all the unigrams and bigrams of commands in the source code.\nThen using a marked-up dictionary with weights of unigrams and bigrams of commands for various programming languages finds the biggest weight of the programming language and returns it.", "Syntax", "detectProgrammingLanguage('source_code')", "Arguments", "source_code \u2014 String representation of the source code to analyze. String.", "Returned value", "Programming language. String."], "Examples": ["SELECT detectProgrammingLanguage('#include <iostream>');"], "Category": ["NLP (experimental) Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/nlp-functions"], "Title": ["detectLanguageUnknown"], "Feature": ["detectLanguageUnknown('text_to_be_analyzed')"], "Description": ["detectLanguageUnknown", "Similar to the detectLanguage function, except the detectLanguageUnknown function works with non-UTF8-encoded strings. Prefer this version when your character set is UTF-16 or UTF-32.", "Syntax", "detectLanguageUnknown('text_to_be_analyzed')", "Arguments", "text_to_be_analyzed \u2014 A collection (or sentences) of strings to analyze. String.", "Returned value", "The 2-letter ISO code of the detected language", "Other possible results:", "un = unknown, can not detect any language.other = the detected language does not have 2 letter code."], "Examples": ["SELECT detectLanguageUnknown('Ich bleibe f\u00fcr ein paar Tage.');"], "Category": ["NLP (experimental) Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/nlp-functions"], "Title": ["detectTonality"], "Feature": ["detectTonality(text)"], "Description": ["detectTonality", "Determines the sentiment of text data. Uses a marked-up sentiment dictionary, in which each word has a tonality ranging from -12 to 6.\nFor each text, it calculates the average sentiment value of its words and returns it in the range [-1,1].", "NoteThis function is limited in its current form. Currently it makes use of the embedded emotional dictionary at /contrib/nlp-data/tonality_ru.zst and only works for the Russian language.", "Syntax", "detectTonality(text)", "Arguments", "text \u2014 The text to be analyzed. String.", "Returned value", "The average sentiment value of the words in text. Float32."], "Examples": ["SELECT detectTonality('\u0428\u0430\u0440\u0438\u043a - \u0445\u043e\u0440\u043e\u0448\u0438\u0439 \u043f\u0451\u0441'), -- Sharik is a good dog        detectTonality('\u0428\u0430\u0440\u0438\u043a - \u043f\u0451\u0441'), -- Sharik is a dog       detectTonality('\u0428\u0430\u0440\u0438\u043a - \u043f\u043b\u043e\u0445\u043e\u0439 \u043f\u0451\u0441'); -- Sharkik is a bad dog"], "Category": ["NLP (experimental) Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/nlp-functions"], "Title": ["lemmatize"], "Feature": ["lemmatize('language', word)"], "Description": ["lemmatize", "Performs lemmatization on a given word. Needs dictionaries to operate, which can be obtained here.", "Syntax", "lemmatize('language', word)", "Arguments", "language \u2014 Language which rules will be applied. String.word \u2014 Word that needs to be lemmatized. Must be lowercase. String."], "Examples": ["SELECT lemmatize('en', 'wolves');"], "Category": ["NLP (experimental) Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/nlp-functions"], "Title": ["stem"], "Feature": ["stem('language', word)"], "Description": ["stem", "Performs stemming on a given word.", "Syntax", "stem('language', word)", "Arguments", "language \u2014 Language which rules will be applied. Use the two letter ISO 639-1 code.word \u2014 word that needs to be stemmed. Must be in lowercase. String."], "Examples": ["SELECT arrayMap(x -> stem('en', x), ['I', 'think', 'it', 'is', 'a', 'blessing', 'in', 'disguise']) as res;"], "Category": ["NLP (experimental) Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/nlp-functions"], "Title": ["synonyms"], "Feature": ["synonyms('extension_name', word)"], "Description": ["synonyms", "Finds synonyms to a given word. There are two types of synonym extensions: plain and wordnet.", "With the plain extension type we need to provide a path to a simple text file, where each line corresponds to a certain synonym set. Words in this line must be separated with space or tab characters.", "With the wordnet extension type we need to provide a path to a directory with WordNet thesaurus in it. Thesaurus must contain a WordNet sense index.", "Syntax", "synonyms('extension_name', word)", "Arguments", "extension_name \u2014 Name of the extension in which search will be performed. String.word \u2014 Word that will be searched in extension. String."], "Examples": ["SELECT synonyms('list', 'important');"], "Category": ["NLP (experimental) Functions"]}
