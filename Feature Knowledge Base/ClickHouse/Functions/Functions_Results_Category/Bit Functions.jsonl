{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bit-functions"], "Title": ["bitAnd(a, b)"], "Feature": ["bitAnd(a, b)"], "Description": ["bitAnd(a, b)"], "Examples": [], "Category": ["Bit Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bit-functions"], "Title": ["bitOr(a, b)"], "Feature": ["bitOr(a, b)"], "Description": ["bitOr(a, b)"], "Examples": [], "Category": ["Bit Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bit-functions"], "Title": ["bitXor(a, b)"], "Feature": ["bitXor(a, b)"], "Description": ["bitXor(a, b)"], "Examples": [], "Category": ["Bit Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bit-functions"], "Title": ["bitNot(a)"], "Feature": ["bitNot(a)"], "Description": ["bitNot(a)"], "Examples": [], "Category": ["Bit Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bit-functions"], "Title": ["bitShiftLeft(a, b)"], "Feature": ["bitShiftLeft(a, b)"], "Description": ["bitShiftLeft(a, b)", "Shifts the binary representation of a value to the left by a specified number of bit positions.", "A FixedString or a String is treated as a single multibyte value.", "Bits of a FixedString value are lost as they are shifted out. On the contrary, a String value is extended with additional bytes, so no bits are lost.", "Syntax", "bitShiftLeft(a, b)", "Arguments", "a \u2014 A value to shift. Integer types, String or FixedString.b \u2014 The number of shift positions. Unsigned integer types, 64 bit types or less are allowed.", "Returned value", "Shifted value.", "The type of the returned value is the same as the type of the input value."], "Examples": ["SELECT 99 AS a, bin(a), bitShiftLeft(a, 2) AS a_shifted, bin(a_shifted);SELECT 'abc' AS a, hex(a), bitShiftLeft(a, 4) AS a_shifted, hex(a_shifted);SELECT toFixedString('abc', 3) AS a, hex(a), bitShiftLeft(a, 4) AS a_shifted, hex(a_shifted);"], "Category": ["Bit Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bit-functions"], "Title": ["bitShiftRight(a, b)"], "Feature": ["bitShiftRight(a, b)"], "Description": ["bitShiftRight(a, b)", "Shifts the binary representation of a value to the right by a specified number of bit positions.", "A FixedString or a String is treated as a single multibyte value. Note that the length of a String value is reduced as bits are shifted out.", "Syntax", "bitShiftRight(a, b)", "Arguments", "a \u2014 A value to shift. Integer types, String or FixedString.b \u2014 The number of shift positions. Unsigned integer types, 64 bit types or less are allowed.", "Returned value", "Shifted value.", "The type of the returned value is the same as the type of the input value."], "Examples": ["SELECT 101 AS a, bin(a), bitShiftRight(a, 2) AS a_shifted, bin(a_shifted);SELECT 'abc' AS a, hex(a), bitShiftRight(a, 12) AS a_shifted, hex(a_shifted);SELECT toFixedString('abc', 3) AS a, hex(a), bitShiftRight(a, 12) AS a_shifted, hex(a_shifted);"], "Category": ["Bit Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bit-functions"], "Title": ["bitRotateLeft(a, b)"], "Feature": ["bitRotateLeft(a, b)"], "Description": ["bitRotateLeft(a, b)"], "Examples": [], "Category": ["Bit Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bit-functions"], "Title": ["bitRotateRight(a, b)"], "Feature": ["bitRotateRight(a, b)"], "Description": ["bitRotateRight(a, b)"], "Examples": [], "Category": ["Bit Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bit-functions"], "Title": ["bitSlice(s, offset, length)"], "Feature": ["bitSlice(s, offset[, length])"], "Description": ["bitSlice(s, offset, length)", "Returns a substring starting with the bit from the \u2018offset\u2019 index that is \u2018length\u2019 bits long. bits indexing starts from\n1", "Syntax", "bitSlice(s, offset[, length])", "Arguments", "s \u2014 s is String or FixedString.offset \u2014 The start index with bit, A positive value indicates an offset on the left, and a negative value is an indent on the right. Numbering of the bits begins with 1.length \u2014 The length of substring with bit. If you specify a negative value, the function returns an open substring [offset, array_length - length]. If you omit the value, the function returns the substring [offset, the_end_string]. If length exceeds s, it will be truncate.If length isn't multiple of 8, will fill 0 on the right.", "Returned value", "The substring. String"], "Examples": ["select bin('Hello'), bin(bitSlice('Hello', 1, 8))select bin('Hello'), bin(bitSlice('Hello', 1, 2))select bin('Hello'), bin(bitSlice('Hello', 1, 9))select bin('Hello'), bin(bitSlice('Hello', -4, 8))"], "Category": ["Bit Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bit-functions"], "Title": ["byteSlice(s, offset, length)"], "Feature": ["byteSlice(s, offset, length)"], "Description": ["byteSlice(s, offset, length)", "See function substring."], "Examples": [], "Category": ["Bit Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bit-functions"], "Title": ["bitTest"], "Feature": ["SELECT bitTest(number, index)"], "Description": ["bitTest", "Takes any integer and converts it into binary form, returns the value of a bit at specified position. Counting is right-to-left, starting at 0.", "Syntax", "SELECT bitTest(number, index)", "Arguments", "number \u2013 Integer number.index \u2013 Position of bit.", "Returned value", "Value of the bit at the specified position. UInt8."], "Examples": ["SELECT bitTest(43, 1);", "SELECT bitTest(43, 2);"], "Category": ["Bit Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bit-functions"], "Title": ["bitTestAll"], "Feature": ["SELECT bitTestAll(number, index1, index2, index3, index4, ...)"], "Description": ["bitTestAll", "Returns result of logical conjunction (AND operator) of all bits at given positions. Counting is right-to-left, starting at 0.", "The conjunction for bit-wise operations:", "0 AND 0 = 0", "0 AND 1 = 0", "1 AND 0 = 0", "1 AND 1 = 1", "Syntax", "SELECT bitTestAll(number, index1, index2, index3, index4, ...)", "Arguments", "number \u2013 Integer number.index1, index2, index3, index4 \u2013 Positions of bit. For example, for set of positions (index1, index2, index3, index4) is true if and only if all of its positions are true (index1 \u22c0 index2, \u22c0 index3 \u22c0 index4).", "Returned value", "Result of the logical conjunction. UInt8."], "Examples": ["SELECT bitTestAll(43, 0, 1, 3, 5);", "SELECT bitTestAll(43, 0, 1, 3, 5, 2);"], "Category": ["Bit Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bit-functions"], "Title": ["bitTestAny"], "Feature": ["SELECT bitTestAny(number, index1, index2, index3, index4, ...)"], "Description": ["bitTestAny", "Returns result of logical disjunction (OR operator) of all bits at given positions. Counting is right-to-left, starting at 0.", "The disjunction for bit-wise operations:", "0 OR 0 = 0", "0 OR 1 = 1", "1 OR 0 = 1", "1 OR 1 = 1", "Syntax", "SELECT bitTestAny(number, index1, index2, index3, index4, ...)", "Arguments", "number \u2013 Integer number.index1, index2, index3, index4 \u2013 Positions of bit.", "Returned value", "Result of the logical disjunction. UInt8."], "Examples": ["SELECT bitTestAny(43, 0, 2);", "SELECT bitTestAny(43, 4, 2);"], "Category": ["Bit Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bit-functions"], "Title": ["bitCount"], "Feature": ["bitCount(x)"], "Description": ["bitCount", "Calculates the number of bits set to one in the binary representation of a number.", "Syntax", "bitCount(x)", "Arguments", "x \u2014 Integer or floating-point number. The function uses the value representation in memory. It allows supporting floating-point numbers.", "Returned value", "Number of bits set to one in the input number. UInt8.", "NoteThe function does not convert the input value to a larger type (sign extension). So, for example, bitCount(toUInt8(-1)) = 8."], "Examples": ["SELECT bitCount(333);"], "Category": ["Bit Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/bit-functions"], "Title": ["bitHammingDistance"], "Feature": ["bitHammingDistance(int1, int2)"], "Description": ["bitHammingDistance", "Returns the Hamming Distance between the bit representations of two integer values. Can be used with SimHash functions for detection of semi-duplicate strings. The smaller is the distance, the more likely those strings are the same.", "Syntax", "bitHammingDistance(int1, int2)", "Arguments", "int1 \u2014 First integer value. Int64.int2 \u2014 Second integer value. Int64.", "Returned value", "The Hamming distance. UInt8."], "Examples": ["SELECT bitHammingDistance(111, 121);", "SELECT bitHammingDistance(ngramSimHash('cat ate rat'), ngramSimHash('rat ate cat'));"], "Category": ["Bit Functions"]}
