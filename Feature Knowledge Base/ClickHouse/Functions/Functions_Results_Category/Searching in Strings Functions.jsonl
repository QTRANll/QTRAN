{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["position"], "Feature": ["position(haystack, needle[, start_pos])"], "Description": ["position", "Returns the position (in bytes, starting at 1) of a substring needle in a string haystack.", "Syntax", "position(haystack, needle[, start_pos])", "Alias:", "position(needle IN haystack)", "Arguments", "haystack \u2014 String in which the search is performed. String.needle \u2014 Substring to be searched. String.start_pos \u2013 Position (1-based) in haystack at which the search starts. UInt. Optional.", "Returned value", "Starting position in bytes and counting from 1, if the substring was found. UInt64.0, if the substring was not found. UInt64.", "If substring needle is empty, these rules apply:", "if no start_pos was specified: return 1if start_pos = 0: return 1if start_pos >= 1 and start_pos <= length(haystack) + 1: return start_posotherwise: return 0", "The same rules also apply to functions locate, positionCaseInsensitive, positionUTF8 and positionCaseInsensitiveUTF8."], "Examples": ["SELECT position('Hello, world!', '!');", "SELECT    position('Hello, world!', 'o', 1),    position('Hello, world!', 'o', 7)", "SELECT 6 = position('/' IN s) FROM (SELECT 'Hello/World' AS s);", "SELECT    position('abc', ''),    position('abc', '', 0),    position('abc', '', 1),    position('abc', '', 2),    position('abc', '', 3),    position('abc', '', 4),    position('abc', '', 5)"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["locate"], "Feature": ["locate(needle, haystack[, start_pos])"], "Description": ["locate", "Like position but with arguments haystack and locate switched.", "The behavior of this function depends on the ClickHouse version:", "in versions < v24.3, locate was an alias of function position and accepted arguments (haystack, needle[, start_pos]).in versions >= 24.3,, locate is an individual function (for better compatibility with MySQL) and accepts arguments (needle, haystack[, start_pos]). The previous behavior\ncan be restored using setting function_locate_has_mysql_compatible_argument_order = false;", "Syntax", "locate(needle, haystack[, start_pos])"], "Examples": ["locate(needle, haystack[, start_pos])"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["positionCaseInsensitive"], "Feature": ["positionCaseInsensitive"], "Description": ["positionCaseInsensitive", "A case insensitive invariant of position."], "Examples": ["SELECT positionCaseInsensitive('Hello, world!', 'hello');"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["positionUTF8"], "Feature": ["positionUTF8"], "Description": ["positionUTF8", "Like position but assumes haystack and needle are UTF-8 encoded strings."], "Examples": ["SELECT positionUTF8('Mot\u00f6rhead', 'r');"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["positionCaseInsensitiveUTF8"], "Feature": ["positionCaseInsensitiveUTF8"], "Description": ["positionCaseInsensitiveUTF8", "Like positionUTF8 but searches case-insensitively."], "Examples": [], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["multiSearchAllPositions"], "Feature": ["multiSearchAllPositions(haystack, [needle1, needle2, ..., needleN])"], "Description": ["multiSearchAllPositions", "Like position but returns an array of positions (in bytes, starting at 1) for multiple needle substrings in a haystack string.", "NoteAll multiSearch*() functions only support up to 28 needles.", "Syntax", "multiSearchAllPositions(haystack, [needle1, needle2, ..., needleN])", "Arguments", "haystack \u2014 String in which the search is performed. String.needle \u2014 Substrings to be searched. Array.", "Returned value", "Array of the starting position in bytes and counting from 1, if the substring was found.0, if the substring was not found."], "Examples": ["SELECT multiSearchAllPositions('Hello, World!', ['hello', '!', 'world']);"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["multiSearchAllPositionsCaseInsensitive"], "Feature": ["multiSearchAllPositionsCaseInsensitive(haystack, [needle1, needle2, ..., needleN])"], "Description": ["multiSearchAllPositionsCaseInsensitive", "Like multiSearchAllPositions but ignores case.", "Syntax", "multiSearchAllPositionsCaseInsensitive(haystack, [needle1, needle2, ..., needleN])", "Parameters", "haystack \u2014 String in which the search is performed. String.needle \u2014 Substrings to be searched. Array.", "Returned value", "Array of the starting position in bytes and counting from 1 (if the substring was found).0 if the substring was not found."], "Examples": ["SELECT multiSearchAllPositionsCaseInsensitive('ClickHouse',['c','h']);"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["multiSearchAllPositionsUTF8"], "Feature": ["multiSearchAllPositionsUTF8(haystack, [needle1, needle2, ..., needleN])"], "Description": ["multiSearchAllPositionsUTF8", "Like multiSearchAllPositions but assumes haystack and the needle substrings are UTF-8 encoded strings.", "Syntax", "multiSearchAllPositionsUTF8(haystack, [needle1, needle2, ..., needleN])", "Parameters", "haystack \u2014 UTF-8 encoded string in which the search is performed. String.needle \u2014 UTF-8 encoded substrings to be searched. Array.", "Returned value", "Array of the starting position in bytes and counting from 1 (if the substring was found).0 if the substring was not found."], "Examples": ["SELECT multiSearchAllPositionsUTF8('\\x43\\x6c\\x69\\x63\\x6b\\x48\\x6f\\x75\\x73\\x65',['\\x43','\\x48']);"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["multiSearchAllPositionsCaseInsensitiveUTF8"], "Feature": ["multiSearchAllPositionsCaseInsensitiveUTF8(haystack, [needle1, needle2, ..., needleN])"], "Description": ["multiSearchAllPositionsCaseInsensitiveUTF8", "Like multiSearchAllPositionsUTF8 but ignores case.", "Syntax", "multiSearchAllPositionsCaseInsensitiveUTF8(haystack, [needle1, needle2, ..., needleN])", "Parameters", "haystack \u2014 UTF-8 encoded string in which the search is performed. String.needle \u2014 UTF-8 encoded substrings to be searched. Array.", "Returned value", "Array of the starting position in bytes and counting from 1 (if the substring was found).0 if the substring was not found."], "Examples": ["SELECT multiSearchAllPositionsCaseInsensitiveUTF8('\\x43\\x6c\\x69\\x63\\x6b\\x48\\x6f\\x75\\x73\\x65',['\\x63','\\x68']);"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["multiSearchFirstPosition"], "Feature": ["multiSearchFirstPosition(haystack, [needle1, needle2, ..., needleN])"], "Description": ["multiSearchFirstPosition", "Like position but returns the leftmost offset in a haystack string which matches any of multiple needle strings.", "Functions multiSearchFirstPositionCaseInsensitive, multiSearchFirstPositionUTF8 and multiSearchFirstPositionCaseInsensitiveUTF8 provide case-insensitive and/or UTF-8 variants of this function.", "Syntax", "multiSearchFirstPosition(haystack, [needle1, needle2, ..., needleN])", "Parameters", "haystack \u2014 String in which the search is performed. String.needle \u2014  Substrings to be searched. Array.", "Returned value", "Leftmost offset in a haystack string which matches any of multiple needle strings.0, if there was no match."], "Examples": ["SELECT multiSearchFirstPosition('Hello World',['llo', 'Wor', 'ld']);"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["multiSearchFirstPositionCaseInsensitive"], "Feature": ["multiSearchFirstPositionCaseInsensitive(haystack, [needle1, needle2, ..., needleN])"], "Description": ["multiSearchFirstPositionCaseInsensitive", "Like multiSearchFirstPosition but ignores case.", "Syntax", "multiSearchFirstPositionCaseInsensitive(haystack, [needle1, needle2, ..., needleN])", "Parameters", "haystack \u2014 String in which the search is performed. String.needle \u2014 Array of substrings to be searched. Array.", "Returned value", "Leftmost offset in a haystack string which matches any of multiple needle strings.0, if there was no match."], "Examples": ["SELECT multiSearchFirstPositionCaseInsensitive('HELLO WORLD',['wor', 'ld', 'ello']);"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["multiSearchFirstPositionUTF8"], "Feature": ["multiSearchFirstPositionUTF8(haystack, [needle1, needle2, ..., needleN])"], "Description": ["multiSearchFirstPositionUTF8", "Like multiSearchFirstPosition but assumes haystack and needle to be UTF-8 strings.", "Syntax", "multiSearchFirstPositionUTF8(haystack, [needle1, needle2, ..., needleN])", "Parameters", "haystack \u2014 UTF-8 string in which the search is performed. String.needle \u2014 Array of UTF-8 substrings to be searched. Array.", "Returned value", "Leftmost offset in a haystack string which matches any of multiple needle strings.0, if there was no match."], "Examples": ["SELECT multiSearchFirstPositionUTF8('\\x68\\x65\\x6c\\x6c\\x6f\\x20\\x77\\x6f\\x72\\x6c\\x64',['wor', 'ld', 'ello']);"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["multiSearchFirstPositionCaseInsensitiveUTF8"], "Feature": ["multiSearchFirstPositionCaseInsensitiveUTF8(haystack, [needle1, needle2, ..., needleN])"], "Description": ["multiSearchFirstPositionCaseInsensitiveUTF8", "Like multiSearchFirstPosition but assumes haystack and needle to be UTF-8 strings and ignores case.", "Syntax", "multiSearchFirstPositionCaseInsensitiveUTF8(haystack, [needle1, needle2, ..., needleN])", "Parameters", "haystack \u2014 UTF-8 string in which the search is performed. String.needle \u2014 Array of UTF-8 substrings to be searched. Array", "Returned value", "Leftmost offset in a haystack string which matches any of multiple needle strings, ignoring case.0, if there was no match."], "Examples": ["SELECT multiSearchFirstPositionCaseInsensitiveUTF8('\\x48\\x45\\x4c\\x4c\\x4f\\x20\\x57\\x4f\\x52\\x4c\\x44',['wor', 'ld', 'ello']);"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["multiSearchFirstIndex"], "Feature": ["multiSearchFirstIndex(haystack, [needle1, needle2, ..., needleN])"], "Description": ["multiSearchFirstIndex", "Returns the index i (starting from 1) of the leftmost found needlei in the string haystack and 0 otherwise.", "Functions multiSearchFirstIndexCaseInsensitive, multiSearchFirstIndexUTF8 and multiSearchFirstIndexCaseInsensitiveUTF8 provide case-insensitive and/or UTF-8 variants of this function.", "Syntax", "multiSearchFirstIndex(haystack, [needle1, needle2, ..., needleN])", "Parameters", "haystack \u2014 String in which the search is performed. String.needle \u2014 Substrings to be searched. Array.", "Returned value", "index (starting from 1) of the leftmost found needle. Otherwise 0, if there was no match. UInt8."], "Examples": ["SELECT multiSearchFirstIndex('Hello World',['World','Hello']);"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["multiSearchFirstIndexCaseInsensitive"], "Feature": ["multiSearchFirstIndexCaseInsensitive(haystack, [needle1, needle2, ..., needleN])"], "Description": ["multiSearchFirstIndexCaseInsensitive", "Returns the index i (starting from 1) of the leftmost found needlei in the string haystack and 0 otherwise. Ignores case.", "Syntax", "multiSearchFirstIndexCaseInsensitive(haystack, [needle1, needle2, ..., needleN])", "Parameters", "haystack \u2014 String in which the search is performed. String.needle \u2014 Substrings to be searched. Array.", "Returned value", "index (starting from 1) of the leftmost found needle. Otherwise 0, if there was no match. UInt8."], "Examples": ["SELECT multiSearchFirstIndexCaseInsensitive('hElLo WoRlD',['World','Hello']);"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["multiSearchFirstIndexUTF8"], "Feature": ["multiSearchFirstIndexUTF8(haystack, [needle1, needle2, ..., needleN])"], "Description": ["multiSearchFirstIndexUTF8", "Returns the index i (starting from 1) of the leftmost found needlei in the string haystack and 0 otherwise. Assumes haystack and needle are UTF-8 encoded strings.", "Syntax", "multiSearchFirstIndexUTF8(haystack, [needle1, needle2, ..., needleN])", "Parameters", "haystack \u2014 UTF-8 string in which the search is performed. String.needle \u2014 Array of UTF-8 substrings to be searched. Array", "Returned value", "index (starting from 1) of the leftmost found needle, Otherwise 0, if there was no match. UInt8."], "Examples": ["SELECT multiSearchFirstIndexUTF8('\\x48\\x65\\x6c\\x6c\\x6f\\x20\\x57\\x6f\\x72\\x6c\\x64',['\\x57\\x6f\\x72\\x6c\\x64','\\x48\\x65\\x6c\\x6c\\x6f']);"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["multiSearchFirstIndexCaseInsensitiveUTF8"], "Feature": ["multiSearchFirstIndexCaseInsensitiveUTF8(haystack, [needle1, needle2, ..., needleN])"], "Description": ["multiSearchFirstIndexCaseInsensitiveUTF8", "Returns the index i (starting from 1) of the leftmost found needlei in the string haystack and 0 otherwise. Assumes haystack and needle are UTF-8 encoded strings. Ignores case.", "Syntax", "multiSearchFirstIndexCaseInsensitiveUTF8(haystack, [needle1, needle2, ..., needleN])", "Parameters", "haystack \u2014 UTF-8 string in which the search is performed. String.needle \u2014 Array of UTF-8 substrings to be searched. Array.", "Returned value", "index (starting from 1) of the leftmost found needle. Otherwise 0, if there was no match. UInt8."], "Examples": ["SELECT multiSearchFirstIndexCaseInsensitiveUTF8('\\x48\\x45\\x4c\\x4c\\x4f\\x20\\x57\\x4f\\x52\\x4c\\x44',['\\x68\\x65\\x6c\\x6c\\x6f','\\x77\\x6f\\x72\\x6c\\x64']);"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["multiSearchAny"], "Feature": ["multiSearchAny(haystack, [needle1, needle2, ..., needleN])"], "Description": ["multiSearchAny", "Returns 1, if at least one string needlei matches the string haystack and 0 otherwise.", "Functions multiSearchAnyCaseInsensitive, multiSearchAnyUTF8 and multiSearchAnyCaseInsensitiveUTF8 provide case-insensitive and/or UTF-8 variants of this function.", "Syntax", "multiSearchAny(haystack, [needle1, needle2, ..., needleN])", "Parameters", "haystack \u2014 String in which the search is performed. String.needle \u2014 Substrings to be searched. Array.", "Returned value", "1, if there was at least one match.0, if there was not at least one match."], "Examples": ["SELECT multiSearchAny('ClickHouse',['C','H']);"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["multiSearchAnyCaseInsensitive"], "Feature": ["multiSearchAnyCaseInsensitive(haystack, [needle1, needle2, ..., needleN])"], "Description": ["multiSearchAnyCaseInsensitive", "Like multiSearchAny but ignores case.", "Syntax", "multiSearchAnyCaseInsensitive(haystack, [needle1, needle2, ..., needleN])", "Parameters", "haystack \u2014 String in which the search is performed. String.needle \u2014 Substrings to be searched. Array", "Returned value", "1, if there was at least one case-insensitive match.0, if there was not at least one case-insensitive match."], "Examples": ["SELECT multiSearchAnyCaseInsensitive('ClickHouse',['c','h']);"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["multiSearchAnyUTF8"], "Feature": ["multiSearchAnyUTF8(haystack, [needle1, needle2, ..., needleN])"], "Description": ["multiSearchAnyUTF8", "Like multiSearchAny but assumes haystack and the needle substrings are UTF-8 encoded strings.", "*Syntax**", "multiSearchAnyUTF8(haystack, [needle1, needle2, ..., needleN])", "Parameters", "haystack \u2014 UTF-8 string in which the search is performed. String.needle \u2014 UTF-8 substrings to be searched. Array.", "Returned value", "1, if there was at least one match.0, if there was not at least one match."], "Examples": ["SELECT multiSearchAnyUTF8('\\x43\\x6c\\x69\\x63\\x6b\\x48\\x6f\\x75\\x73\\x65',['\\x43','\\x48']);"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["multiSearchAnyCaseInsensitiveUTF8"], "Feature": ["multiSearchAnyCaseInsensitiveUTF8(haystack, [needle1, needle2, ..., needleN])"], "Description": ["multiSearchAnyCaseInsensitiveUTF8", "Like multiSearchAnyUTF8 but ignores case.", "*Syntax**", "multiSearchAnyCaseInsensitiveUTF8(haystack, [needle1, needle2, ..., needleN])", "Parameters", "haystack \u2014 UTF-8 string in which the search is performed. String.needle \u2014 UTF-8 substrings to be searched. Array", "Returned value", "1, if there was at least one case-insensitive match.0, if there was not at least one case-insensitive match."], "Examples": ["SELECT multiSearchAnyCaseInsensitiveUTF8('\\x43\\x6c\\x69\\x63\\x6b\\x48\\x6f\\x75\\x73\\x65',['\\x68']);"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["match"], "Feature": ["match(haystack, pattern)"], "Description": ["match", "Returns whether string haystack matches the regular expression pattern in re2 regular expression syntax.", "Matching is based on UTF-8, e.g. . matches the Unicode code point \u00a5 which is represented in UTF-8 using two bytes. The regular\nexpression must not contain null bytes. If the haystack or the pattern are not valid UTF-8, then the behavior is undefined.", "Unlike re2's default behavior, . matches line breaks. To disable this, prepend the pattern with (?-s).", "If you only want to search substrings in a string, you can use functions like or position instead - they work much faster than this function.", "Syntax", "match(haystack, pattern)", "Alias: haystack REGEXP pattern operator"], "Examples": ["match(haystack, pattern)"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["multiMatchAny"], "Feature": ["multiMatchAny(haystack, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])"], "Description": ["multiMatchAny", "Like match but returns 1 if at least one of the patterns match and 0 otherwise.", "NoteFunctions in the multi[Fuzzy]Match*() family use the the (Vectorscan)[https://github.com/VectorCamp/vectorscan] library. As such, they are only enabled if ClickHouse is compiled with support for vectorscan.To turn off all functions that use hyperscan, use setting SET allow_hyperscan = 0;.Due to restrictions of vectorscan, the length of the haystack string must be less than 232 bytes.Hyperscan is generally vulnerable to regular expression denial of service (ReDoS) attacks (e.g. see\n(here)[https://www.usenix.org/conference/usenixsecurity22/presentation/turonova], (here)[https://doi.org/10.1007/s10664-021-10033-1] and\n(here)[https://doi.org/10.1145/3236024.3236027]. Users are adviced to check the provided patterns carefully.", "If you only want to search multiple substrings in a string, you can use function multiSearchAny instead - it works much faster than this function.", "Syntax", "multiMatchAny(haystack, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])"], "Examples": ["multiMatchAny(haystack, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["multiMatchAnyIndex"], "Feature": ["multiMatchAnyIndex(haystack, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])"], "Description": ["multiMatchAnyIndex", "Like multiMatchAny but returns any index that matches the haystack.", "Syntax", "multiMatchAnyIndex(haystack, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])"], "Examples": ["multiMatchAnyIndex(haystack, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["multiMatchAllIndices"], "Feature": ["multiMatchAllIndices(haystack, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])"], "Description": ["multiMatchAllIndices", "Like multiMatchAny but returns the array of all indices that match the haystack in any order.", "Syntax", "multiMatchAllIndices(haystack, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])"], "Examples": ["multiMatchAllIndices(haystack, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["multiFuzzyMatchAny"], "Feature": ["multiFuzzyMatchAny(haystack, distance, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])"], "Description": ["multiFuzzyMatchAny", "Like multiMatchAny but returns 1 if any pattern matches the haystack within a constant edit distance. This function relies on the experimental feature of hyperscan library, and can be slow for some corner cases. The performance depends on the edit distance value and patterns used, but it's always more expensive compared to a non-fuzzy variants.", "NotemultiFuzzyMatch*() function family do not support UTF-8 regular expressions (it threats them as a sequence of bytes) due to restrictions of hyperscan.", "Syntax", "multiFuzzyMatchAny(haystack, distance, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])"], "Examples": ["multiFuzzyMatchAny(haystack, distance, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["multiFuzzyMatchAnyIndex"], "Feature": ["multiFuzzyMatchAnyIndex(haystack, distance, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])"], "Description": ["multiFuzzyMatchAnyIndex", "Like multiFuzzyMatchAny but returns any index that matches the haystack within a constant edit distance.", "Syntax", "multiFuzzyMatchAnyIndex(haystack, distance, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])"], "Examples": ["multiFuzzyMatchAnyIndex(haystack, distance, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["multiFuzzyMatchAllIndices"], "Feature": ["multiFuzzyMatchAllIndices(haystack, distance, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])"], "Description": ["multiFuzzyMatchAllIndices", "Like multiFuzzyMatchAny but returns the array of all indices in any order that match the haystack within a constant edit distance.", "Syntax", "multiFuzzyMatchAllIndices(haystack, distance, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])"], "Examples": ["multiFuzzyMatchAllIndices(haystack, distance, \\[pattern<sub>1</sub>, pattern<sub>2</sub>, ..., pattern<sub>n</sub>\\])"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["extract"], "Feature": ["extract(haystack, pattern)"], "Description": ["extract", "Returns the first match of a regular expression in a string.\nIf haystack does not match the pattern regex, an empty string is returned. ", "If the regular expression has capturing groups, the function matches the input string against the first capturing group.", "Syntax", "extract(haystack, pattern)", "*Arguments**", "haystack \u2014 Input string. String.pattern \u2014 Regular expression with re2 regular expression syntax.", "Returned value", "The first match of the regular expression in the haystack string. String."], "Examples": ["SELECT extract('number: 1, number: 2, number: 3', '\\\\d+') AS result;"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["extractAll"], "Feature": ["extractAll(haystack, pattern)"], "Description": ["extractAll", "Returns an array of all matches of a regular expression in a string. If haystack does not match the pattern regex, an empty string is returned.", "The behavior with respect to sub-patterns is the same as in function extract.", "Syntax", "extractAll(haystack, pattern)", "*Arguments**", "haystack \u2014 Input string. String.pattern \u2014 Regular expression with re2 regular expression syntax.", "Returned value", "Array of matches of the regular expression in the haystack string. Array(String)."], "Examples": ["SELECT extractAll('number: 1, number: 2, number: 3', '\\\\d+') AS result;"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["extractAllGroupsHorizontal"], "Feature": ["extractAllGroupsHorizontal(haystack, pattern)"], "Description": ["extractAllGroupsHorizontal", "Matches all groups of the haystack string using the pattern regular expression. Returns an array of arrays, where the first array includes all fragments matching the first group, the second array - matching the second group, etc.", "This function is slower than extractAllGroupsVertical.", "Syntax", "extractAllGroupsHorizontal(haystack, pattern)", "Arguments", "haystack \u2014 Input string. String.pattern \u2014 Regular expression with re2 regular expression syntax. Must contain groups, each group enclosed in parentheses. If pattern contains no groups, an exception is thrown. String.", "Returned value", "Array of arrays of matches. Array.", "NoteIf haystack does not match the pattern regex, an array of empty arrays is returned."], "Examples": ["SELECT extractAllGroupsHorizontal('abc=111, def=222, ghi=333', '(\"[^\"]+\"|\\\\w+)=(\"[^\"]+\"|\\\\w+)');"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["extractGroups"], "Feature": ["extractGroups(haystack, pattern)"], "Description": ["extractGroups", "Match all groups of given input string with a given regular expression, returns an array of arrays of matches.", "Syntax", "extractGroups(haystack, pattern)", "Arguments", "haystack \u2014 Input string. String.pattern \u2014 Regular expression with re2 regular expression syntax. Must contain groups, each group enclosed in parentheses. If pattern contains no groups, an exception is thrown. String.", "Returned value", "Array of arrays of matches. Array."], "Examples": ["SELECT extractGroups('hello abc=111 world', '(\"[^\"]+\"|\\\\w+)=(\"[^\"]+\"|\\\\w+)') AS result;"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["extractAllGroupsVertical"], "Feature": ["extractAllGroupsVertical(haystack, pattern)"], "Description": ["extractAllGroupsVertical", "Matches all groups of the haystack string using the pattern regular expression. Returns an array of arrays, where each array includes matching fragments from every group. Fragments are grouped in order of appearance in the haystack.", "Syntax", "extractAllGroupsVertical(haystack, pattern)", "Arguments", "haystack \u2014 Input string. String.pattern \u2014 Regular expression with re2 regular expression syntax. Must contain groups, each group enclosed in parentheses. If pattern contains no groups, an exception is thrown. String.", "Returned value", "Array of arrays of matches. Array.", "NoteIf haystack does not match the pattern regex, an empty array is returned."], "Examples": ["SELECT extractAllGroupsVertical('abc=111, def=222, ghi=333', '(\"[^\"]+\"|\\\\w+)=(\"[^\"]+\"|\\\\w+)');"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["like"], "Feature": ["like(haystack, pattern)"], "Description": ["like", "Returns whether string haystack matches the LIKE expression pattern.", "A LIKE expression can contain normal characters and the following metasymbols:", "% indicates an arbitrary number of arbitrary characters (including zero characters)._ indicates a single arbitrary character.\\ is for escaping literals %, _ and \\.", "Matching is based on UTF-8, e.g. _ matches the Unicode code point \u00a5 which is represented in UTF-8 using two bytes.", "If the haystack or the LIKE expression are not valid UTF-8, the behavior is undefined.", "No automatic Unicode normalization is performed, you can use the normalizeUTF8*() functions for that.", "To match against literal %, _ and \\ (which are LIKE metacharacters), prepend them with a backslash: \\%, \\_ and \\\\.\nThe backslash loses its special meaning (i.e. is interpreted literally) if it prepends a character different than %, _ or \\.\nNote that ClickHouse requires backslashes in strings to be quoted as well, so you would actually need to write \\\\%, \\\\_ and \\\\\\\\.", "For LIKE expressions of the form %needle%, the function is as fast as the position function.\nAll other LIKE expressions are internally converted to a regular expression and executed with a performance similar to function match.", "Syntax", "like(haystack, pattern)", "Alias: haystack LIKE pattern (operator)"], "Examples": ["like(haystack, pattern)"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["notLike"], "Feature": ["notLike"], "Description": ["notLike", "Like like but negates the result.", "Alias: haystack NOT LIKE pattern (operator)"], "Examples": [], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["ilike"], "Feature": ["ilike"], "Description": ["ilike", "Like like but searches case-insensitively.", "Alias: haystack ILIKE pattern (operator)"], "Examples": [], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["notILike"], "Feature": ["notILike"], "Description": ["notILike", "Like ilike but negates the result.", "Alias: haystack NOT ILIKE pattern (operator)"], "Examples": [], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["ngramDistance"], "Feature": ["ngramDistance(haystack, needle)"], "Description": ["ngramDistance", "Calculates the 4-gram distance between a haystack string and a needle string. For this, it counts the symmetric difference between two multisets of 4-grams and normalizes it by the sum of their cardinalities. Returns a Float32 between 0 and 1. The smaller the result is, the more similar the strings are to each other.", "Functions ngramDistanceCaseInsensitive, ngramDistanceUTF8, ngramDistanceCaseInsensitiveUTF8 provide case-insensitive and/or UTF-8 variants of this function.", "Syntax", "ngramDistance(haystack, needle)", "Parameters", "haystack: First comparison string. String literalneedle: Second comparison string. String literal", "Returned value", "Value between 0 and 1 representing the similarity between the two strings. Float32", "Implementation details", "This function will throw an exception if constant needle or haystack arguments are more than 32Kb in size. If any non-constant haystack or needle arguments are more than 32Kb in size, then the distance is always 1."], "Examples": ["SELECT ngramDistance('ClickHouse','ClickHouse!');", "SELECT ngramDistance('ClickHouse','House');"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["ngramDistanceCaseInsensitive"], "Feature": ["ngramDistanceCaseInsensitive(haystack, needle)"], "Description": ["ngramDistanceCaseInsensitive", "Provides a case-insensitive variant of ngramDistance.", "Syntax", "ngramDistanceCaseInsensitive(haystack, needle)", "Parameters", "haystack: First comparison string. String literalneedle: Second comparison string. String literal", "Returned value", "Value between 0 and 1 representing the similarity between the two strings. Float32"], "Examples": ["SELECT ngramDistance('ClickHouse','clickhouse');", "SELECT ngramDistanceCaseInsensitive('ClickHouse','clickhouse');"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["ngramDistanceUTF8"], "Feature": ["ngramDistanceUTF8(haystack, needle)"], "Description": ["ngramDistanceUTF8", "Provides a UTF-8 variant of ngramDistance. Assumes that needle and haystack strings are UTF-8 encoded strings.", "Syntax", "ngramDistanceUTF8(haystack, needle)", "Parameters", "haystack: First UTF-8 encoded comparison string. String literalneedle: Second UTF-8 encoded comparison string. String literal", "Returned value", "Value between 0 and 1 representing the similarity between the two strings. Float32"], "Examples": ["SELECT ngramDistanceUTF8('abcde','cde');"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["ngramDistanceCaseInsensitiveUTF8"], "Feature": ["ngramDistanceCaseInsensitiveUTF8(haystack, needle)"], "Description": ["ngramDistanceCaseInsensitiveUTF8", "Provides a case-insensitive variant of ngramDistanceUTF8.", "Syntax", "ngramDistanceCaseInsensitiveUTF8(haystack, needle)", "Parameters", "haystack: First UTF-8 encoded comparison string. String literalneedle: Second UTF-8 encoded comparison string. String literal", "Returned value", "Value between 0 and 1 representing the similarity between the two strings. Float32"], "Examples": ["SELECT ngramDistanceCaseInsensitiveUTF8('abcde','CDE');"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["ngramSearch"], "Feature": ["ngramSearch(haystack, needle)"], "Description": ["ngramSearch", "Like ngramDistance but calculates the non-symmetric difference between a needle string and a haystack string, i.e. the number of n-grams from the needle minus the common number of n-grams normalized by the number of needle n-grams. Returns a Float32 between 0 and 1. The bigger the result is, the more likely needle is in the haystack. This function is useful for fuzzy string search. Also see function soundex.", "Functions ngramSearchCaseInsensitive, ngramSearchUTF8, ngramSearchCaseInsensitiveUTF8 provide case-insensitive and/or UTF-8 variants of this function.", "Syntax", "ngramSearch(haystack, needle)", "Parameters", "haystack: First comparison string. String literalneedle: Second comparison string. String literal", "Returned value", "Value between 0 and 1 representing the likelihood of the needle being in the haystack. Float32", "Implementation details", "NoteThe UTF-8 variants use the 3-gram distance. These are not perfectly fair n-gram distances. We use 2-byte hashes to hash n-grams and then calculate the (non-)symmetric difference between these hash tables \u2013 collisions may occur. With UTF-8 case-insensitive format we do not use fair tolower function \u2013 we zero the 5-th bit (starting from zero) of each codepoint byte and first bit of zeroth byte if bytes more than one \u2013 this works for Latin and mostly for all Cyrillic letters."], "Examples": ["SELECT ngramSearch('Hello World','World Hello');"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["ngramSearchCaseInsensitive"], "Feature": ["ngramSearchCaseInsensitive(haystack, needle)"], "Description": ["ngramSearchCaseInsensitive", "Provides a case-insensitive variant of ngramSearch.", "Syntax", "ngramSearchCaseInsensitive(haystack, needle)", "Parameters", "haystack: First comparison string. String literalneedle: Second comparison string. String literal", "Returned value", "Value between 0 and 1 representing the likelihood of the needle being in the haystack. Float32", "The bigger the result is, the more likely needle is in the haystack."], "Examples": ["SELECT ngramSearchCaseInsensitive('Hello World','hello');"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["ngramSearchUTF8"], "Feature": ["ngramSearchUTF8(haystack, needle)"], "Description": ["ngramSearchUTF8", "Provides a UTF-8 variant of ngramSearch in which needle and haystack are assumed to be UTF-8 encoded strings.", "Syntax", "ngramSearchUTF8(haystack, needle)", "Parameters", "haystack: First UTF-8 encoded comparison string. String literalneedle: Second UTF-8 encoded comparison string. String literal", "Returned value", "Value between 0 and 1 representing the likelihood of the needle being in the haystack. Float32", "The bigger the result is, the more likely needle is in the haystack."], "Examples": ["SELECT ngramSearchUTF8('\u0430\u0431\u0432\u0433\u0434\u0435\u0451\u0436\u0437', '\u0433\u0434\u0435\u0451\u0437\u0434');"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["ngramSearchCaseInsensitiveUTF8"], "Feature": ["ngramSearchCaseInsensitiveUTF8(haystack, needle)"], "Description": ["ngramSearchCaseInsensitiveUTF8", "Provides a case-insensitive variant of ngramSearchUTF8 in which needle and haystack.", "Syntax", "ngramSearchCaseInsensitiveUTF8(haystack, needle)", "Parameters", "haystack: First UTF-8 encoded comparison string. String literalneedle: Second UTF-8 encoded comparison string. String literal", "Returned value", "Value between 0 and 1 representing the likelihood of the needle being in the haystack. Float32", "The bigger the result is, the more likely needle is in the haystack."], "Examples": ["SELECT ngramSearchCaseInsensitiveUTF8('\u0430\u0431\u0432\u0413\u0414\u0415\u0451\u0436\u0437', '\u0410\u0431\u0432\u0433\u0434\u0415\u0401\u0436\u0437');"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["countSubstrings"], "Feature": ["countSubstrings(haystack, needle[, start_pos])"], "Description": ["countSubstrings", "Returns how often a substring needle occurs in a string haystack.", "Functions countSubstringsCaseInsensitive and countSubstringsCaseInsensitiveUTF8 provide case-insensitive and case-insensitive + UTF-8 variants of this function respectively.", "Syntax", "countSubstrings(haystack, needle[, start_pos])", "Arguments", "haystack \u2014 String in which the search is performed. String.needle \u2014 Substring to be searched. String.start_pos \u2013 Position (1-based) in haystack at which the search starts. UInt. Optional.", "Returned value", "The number of occurrences. UInt64."], "Examples": ["SELECT countSubstrings('aaaa', 'aa');", "SELECT countSubstrings('abc___abc', 'abc', 4);"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["countSubstringsCaseInsensitive"], "Feature": ["countSubstringsCaseInsensitive(haystack, needle[, start_pos])"], "Description": ["countSubstringsCaseInsensitive", "Returns how often a substring needle occurs in a string haystack. Ignores case.", "Syntax", "countSubstringsCaseInsensitive(haystack, needle[, start_pos])", "Arguments", "haystack \u2014 String in which the search is performed. String.needle \u2014 Substring to be searched. String.start_pos \u2013 Position (1-based) in haystack at which the search starts. UInt. Optional.", "Returned value", "The number of occurrences. UInt64."], "Examples": ["SELECT countSubstringsCaseInsensitive('AAAA', 'aa');", "SELECT countSubstringsCaseInsensitive('abc___ABC___abc', 'abc', 4);"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["countSubstringsCaseInsensitiveUTF8"], "Feature": ["countSubstringsCaseInsensitiveUTF8(haystack, needle[, start_pos])"], "Description": ["countSubstringsCaseInsensitiveUTF8", "Returns how often a substring needle occurs in a string haystack. Ignores case and assumes that haystack is a UTF8 string.", "Syntax", "countSubstringsCaseInsensitiveUTF8(haystack, needle[, start_pos])", "Arguments", "haystack \u2014 UTF-8 string in which the search is performed. String.needle \u2014 Substring to be searched. String.start_pos \u2013 Position (1-based) in haystack at which the search starts. UInt. Optional.", "Returned value", "The number of occurrences. UInt64."], "Examples": ["SELECT countSubstringsCaseInsensitiveUTF8('\u043b\u043e\u0436\u043a\u0430, \u043a\u043e\u0448\u043a\u0430, \u043a\u0430\u0440\u0442\u043e\u0448\u043a\u0430', '\u041a\u0410');", "SELECT countSubstringsCaseInsensitiveUTF8('\u043b\u043e\u0436\u043a\u0430, \u043a\u043e\u0448\u043a\u0430, \u043a\u0430\u0440\u0442\u043e\u0448\u043a\u0430', '\u041a\u0410', 13);"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["countMatches"], "Feature": ["countMatches(haystack, pattern)"], "Description": ["countMatches", "Returns the number of regular expression matches for a pattern in a haystack.", "Syntax", "countMatches(haystack, pattern)", "Arguments", "haystack \u2014 The string to search in. String.pattern \u2014 The regular expression with re2 regular expression syntax. String.", "Returned value", "The number of matches. UInt64."], "Examples": ["SELECT countMatches('foobar.com', 'o+');", "SELECT countMatches('aaaa', 'aa');"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["countMatchesCaseInsensitive"], "Feature": ["countMatchesCaseInsensitive(haystack, pattern)"], "Description": ["countMatchesCaseInsensitive", "Returns the number of regular expression matches for a pattern in a haystack like countMatches but matching ignores the case.", "Syntax", "countMatchesCaseInsensitive(haystack, pattern)", "Arguments", "haystack \u2014 The string to search in. String.pattern \u2014 The regular expression with re2 regular expression syntax. String.", "Returned value", "The number of matches. UInt64."], "Examples": ["SELECT countMatchesCaseInsensitive('AAAA', 'aa');"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["regexpExtract"], "Feature": ["regexpExtract(haystack, pattern[, index])"], "Description": ["regexpExtract", "Extracts the first string in haystack that matches the regexp pattern and corresponds to the regex group index.", "Syntax", "regexpExtract(haystack, pattern[, index])", "Alias: REGEXP_EXTRACT(haystack, pattern[, index]).", "Arguments", "haystack \u2014 String, in which regexp pattern will to be matched. String.pattern \u2014 String, regexp expression, must be constant. String.index \u2013 An integer number greater or equal 0 with default 1. It represents which regex group to extract. UInt or Int. Optional.", "Returned value", "pattern may contain multiple regexp groups, index indicates which regex group to extract. An index of 0 means matching the entire regular expression. String."], "Examples": ["SELECT    regexpExtract('100-200', '(\\\\d+)-(\\\\d+)', 1),    regexpExtract('100-200', '(\\\\d+)-(\\\\d+)', 2),    regexpExtract('100-200', '(\\\\d+)-(\\\\d+)', 0),    regexpExtract('100-200', '(\\\\d+)-(\\\\d+)');"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["hasSubsequence"], "Feature": ["hasSubsequence(haystack, needle)"], "Description": ["hasSubsequence", "Returns 1 if needle is a subsequence of haystack, or 0 otherwise.\nA subsequence of a string is a sequence that can be derived from the given string by deleting zero or more elements without changing the order of the remaining elements.", "Syntax", "hasSubsequence(haystack, needle)", "Arguments", "haystack \u2014 String in which the search is performed. String.needle \u2014 Subsequence to be searched. String.", "Returned value", "1, if needle is a subsequence of haystack, 0 otherwise. UInt8."], "Examples": ["SELECT hasSubsequence('garbage', 'arg');"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["hasSubsequenceCaseInsensitive"], "Feature": ["hasSubsequenceCaseInsensitive(haystack, needle)"], "Description": ["hasSubsequenceCaseInsensitive", "Like hasSubsequence but searches case-insensitively.", "Syntax", "hasSubsequenceCaseInsensitive(haystack, needle)", "Arguments", "haystack \u2014 String in which the search is performed. String.needle \u2014 Subsequence to be searched. String.", "Returned value", "1, if needle is a subsequence of haystack, 0 otherwise UInt8."], "Examples": ["SELECT hasSubsequenceCaseInsensitive('garbage', 'ARG');"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["hasSubsequenceUTF8"], "Feature": ["hasSubsequenceUTF8(haystack, needle)"], "Description": ["hasSubsequenceUTF8", "Like hasSubsequence but assumes haystack and needle are UTF-8 encoded strings.", "Syntax", "hasSubsequenceUTF8(haystack, needle)", "Arguments", "haystack \u2014 String in which the search is performed. UTF-8 encoded String.needle \u2014 Subsequence to be searched. UTF-8 encoded String.", "Returned value", "1, if needle is a subsequence of haystack, 0, otherwise. UInt8.", "Query:"], "Examples": ["select hasSubsequenceUTF8('ClickHouse - \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0431\u0430\u0437\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445', '\u0441\u0438\u0441\u0442\u0435\u043c\u0430');"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["hasSubsequenceCaseInsensitiveUTF8"], "Feature": ["hasSubsequenceCaseInsensitiveUTF8(haystack, needle)"], "Description": ["hasSubsequenceCaseInsensitiveUTF8", "Like hasSubsequenceUTF8 but searches case-insensitively.", "Syntax", "hasSubsequenceCaseInsensitiveUTF8(haystack, needle)", "Arguments", "haystack \u2014 String in which the search is performed. UTF-8 encoded String.needle \u2014 Subsequence to be searched. UTF-8 encoded String.", "Returned value", "1, if needle is a subsequence of haystack, 0 otherwise. UInt8."], "Examples": ["select hasSubsequenceCaseInsensitiveUTF8('ClickHouse - \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0431\u0430\u0437\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445', '\u0421\u0418\u0421\u0422\u0415\u041c\u0410');"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["hasToken"], "Feature": ["hasToken(haystack, token)"], "Description": ["hasToken", "Returns 1 if a given token is present in a haystack, or 0 otherwise.", "Syntax", "hasToken(haystack, token)", "Parameters", "haystack: String in which the search is performed. String.token: Maximal length substring between two non alphanumeric ASCII characters (or boundaries of haystack).", "Returned value", "1, if the token is present in the haystack, 0 otherwise. UInt8.", "Implementation details", "Token must be a constant string. Supported by tokenbf_v1 index specialization."], "Examples": ["SELECT hasToken('Hello World','Hello');"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["hasTokenOrNull"], "Feature": ["hasTokenOrNull(haystack, token)"], "Description": ["hasTokenOrNull", "Returns 1 if a given token is present, 0 if not present, and null if the token is ill-formed.", "Syntax", "hasTokenOrNull(haystack, token)", "Parameters", "haystack: String in which the search is performed. String.token: Maximal length substring between two non alphanumeric ASCII characters (or boundaries of haystack).", "Returned value", "1, if the token is present in the haystack, 0 if it is not present, and null if the token is ill formed. ", "Implementation details", "Token must be a constant string. Supported by tokenbf_v1 index specialization."], "Examples": ["SELECT hasTokenOrNull('Hello World','Hello,World');"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["hasTokenCaseInsensitive"], "Feature": ["hasTokenCaseInsensitive(haystack, token)"], "Description": ["hasTokenCaseInsensitive", "Returns 1 if a given token is present in a haystack, 0 otherwise. Ignores case.", "Syntax", "hasTokenCaseInsensitive(haystack, token)", "Parameters", "haystack: String in which the search is performed. String.token: Maximal length substring between two non alphanumeric ASCII characters (or boundaries of haystack).", "Returned value", "1, if the token is present in the haystack, 0 otherwise. UInt8.", "Implementation details", "Token must be a constant string. Supported by tokenbf_v1 index specialization."], "Examples": ["SELECT hasTokenCaseInsensitive('Hello World','hello');"], "Category": ["Searching in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions"], "Title": ["hasTokenCaseInsensitiveOrNull"], "Feature": ["hasTokenCaseInsensitiveOrNull(haystack, token)"], "Description": ["hasTokenCaseInsensitiveOrNull", "Returns 1 if a given token is present in a haystack, 0 otherwise. Ignores case and returns null if the token is ill-formed.", "Syntax", "hasTokenCaseInsensitiveOrNull(haystack, token)", "Parameters", "haystack: String in which the search is performed. String.token: Maximal length substring between two non alphanumeric ASCII characters (or boundaries of haystack).", "Returned value", "1, if the token is present in the haystack, 0 if the token is not present, otherwise null if the token is ill-formed. UInt8.", "Implementation details", "Token must be a constant string. Supported by tokenbf_v1 index specialization."], "Examples": ["SELECT hasTokenCaseInsensitiveOrNull('Hello World','hello,world');"], "Category": ["Searching in Strings Functions"]}
