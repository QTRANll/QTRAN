{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/logical-functions"], "Title": ["and"], "Feature": ["and(val1, val2...)"], "Description": ["and", "Calculates the logical conjunction of two or more values. ", "Setting short_circuit_function_evaluation controls whether short-circuit evaluation is used. If enabled, val_i is evaluated only if (val_1 AND val_2 AND ... AND val_{i-1}) is true. For example, with short-circuit evaluation, no division-by-zero exception is thrown when executing the query SELECT and(number = 2, intDiv(1, number)) FROM numbers(5).", "Syntax", "and(val1, val2...)", "Alias: The AND operator.", "Arguments", "val1, val2, ... \u2014 List of at least two values. Int, UInt, Float or Nullable.", "Returned value", "0, if at least one argument evaluates to false,NULL, if no argument evaluates to false and at least one argument is NULL,1, otherwise.", "Type: UInt8 or Nullable(UInt8)."], "Examples": ["SELECT and(0, 1, -2);", "SELECT and(NULL, 1, 10, -2);"], "Category": ["Logical Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/logical-functions"], "Title": ["or"], "Feature": ["or(val1, val2...)"], "Description": ["or", "Calculates the logical disjunction of two or more values.", "Setting short_circuit_function_evaluation controls whether short-circuit evaluation is used. If enabled, val_i is evaluated only if ((NOT val_1) AND (NOT val_2) AND ... AND (NOT val_{i-1})) is true. For example, with short-circuit evaluation, no division-by-zero exception is thrown when executing the query SELECT or(number = 0, intDiv(1, number) != 0) FROM numbers(5).", "Syntax", "or(val1, val2...)", "Alias: The OR operator.", "Arguments", "val1, val2, ... \u2014 List of at least two values. Int, UInt, Float or Nullable.", "Returned value", "1, if at least one argument evaluates to true,0, if all arguments evaluate to false,NULL, if all arguments evaluate to false and at least one argument is NULL.", "Type: UInt8 or Nullable(UInt8)."], "Examples": ["SELECT or(1, 0, 0, 2, NULL);", "SELECT or(0, NULL);"], "Category": ["Logical Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/logical-functions"], "Title": ["not"], "Feature": ["not(val);"], "Description": ["not", "Calculates the logical negation of a value.", "Syntax", "not(val);", "Alias: The Negation operator.", "Arguments", "val \u2014 The value. Int, UInt, Float or Nullable.", "Returned value", "1, if val evaluates to false,0, if val evaluates to true,NULL, if val is NULL.", "Type: UInt8 or Nullable(UInt8)."], "Examples": ["SELECT NOT(1);"], "Category": ["Logical Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/logical-functions"], "Title": ["xor"], "Feature": ["xor(val1, val2...)"], "Description": ["xor", "Calculates the logical exclusive disjunction of two or more values. For more than two input values, the function first xor-s the first two values, then xor-s the result with the third value etc.", "Syntax", "xor(val1, val2...)", "Arguments", "val1, val2, ... \u2014 List of at least two values. Int, UInt, Float or Nullable.", "Returned value", "1, for two values: if one of the values evaluates to false and other does not,0, for two values: if both values evaluate to false or to both true,NULL, if at least one of the inputs is NULL", "Type: UInt8 or Nullable(UInt8)."], "Examples": ["SELECT xor(0, 1, 1);"], "Category": ["Logical Functions"]}
