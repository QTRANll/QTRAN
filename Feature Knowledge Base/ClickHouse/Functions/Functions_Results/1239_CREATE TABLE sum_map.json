{
    "HTML": [
        "https://clickhouse.com/docs/en/sql-reference/aggregate-functions/parametric-functions"
    ],
    "Title": [
        "sumMapFilteredWithOverflow"
    ],
    "Feature": [
        "CREATE TABLE sum_map(    `date` Date,    `timeslot` DateTime,    `statusMap` Nested(status UInt8, requests UInt8))ENGINE = LogINSERT INTO sum_map VALUES     ('2000-01-01', '2000-01-01 00:00:00', [1, 2, 3], [10, 10, 10]),     ('2000-01-01', '2000-01-01 00:00:00', [3, 4, 5], [10, 10, 10]),    ('2000-01-01', '2000-01-01 00:01:00', [4, 5, 6], [10, 10, 10]),     ('2000-01-01', '2000-01-01 00:01:00', [6, 7, 8], [10, 10, 10]);"
    ],
    "Description": [
        "sumMapFilteredWithOverflow",
        "This function behaves the same as sumMap except that it also accepts an array of keys to filter with as a parameter. This can be especially useful when working with a high cardinality of keys. It differs from the sumMapFiltered function in that it does summation with overflow - i.e. returns the same data type for the summation as the argument data type.",
        "Syntax",
        "sumMapFilteredWithOverflow(keys_to_keep)(keys, values)",
        "Parameters",
        "keys_to_keep: Array of keys to filter with.keys: Array of keys.values: Array of values.",
        "Returned Value ",
        "Returns a tuple of two arrays: keys in sorted order, and values summed for the corresponding keys."
    ],
    "Examples": [
        "CREATE TABLE sum_map(    `date` Date,    `timeslot` DateTime,    `statusMap` Nested(status UInt8, requests UInt8))ENGINE = LogINSERT INTO sum_map VALUES     ('2000-01-01', '2000-01-01 00:00:00', [1, 2, 3], [10, 10, 10]),     ('2000-01-01', '2000-01-01 00:00:00', [3, 4, 5], [10, 10, 10]),    ('2000-01-01', '2000-01-01 00:01:00', [4, 5, 6], [10, 10, 10]),     ('2000-01-01', '2000-01-01 00:01:00', [6, 7, 8], [10, 10, 10]);",
        "SELECT sumMapFilteredWithOverflow([1, 4, 8])(statusMap.status, statusMap.requests) as summap_overflow, toTypeName(summap_overflow) FROM sum_map;",
        "SELECT sumMapFiltered([1, 4, 8])(statusMap.status, statusMap.requests) as summap, toTypeName(summap) FROM sum_map;"
    ],
    "Category": [
        "Aggregate Functions"
    ]
}