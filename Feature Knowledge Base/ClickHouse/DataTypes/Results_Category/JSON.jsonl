{"HTML": ["https://clickhouse.com/docs/en/sql-reference/data-types/newjson"], "Title": ["JSON"], "Feature": ["JSON"], "Description": ["JSON Data Type", "Stores JavaScript Object Notation (JSON) documents in a single column.", "NoteThis feature is experimental and is not production-ready. If you need to work with JSON documents, consider using this guide instead.\nIf you want to use JSON type, set allow_experimental_json_type = 1. ", "To declare a column of JSON type, use the following syntax:", "<column_name> JSON(max_dynamic_paths=N, max_dynamic_types=M, some.path TypeName, SKIP path.to.skip, SKIP REGEXP 'paths_regexp')", "Where:", "max_dynamic_paths is an optional parameter indicating how many paths can be stored separately as subcolumns across single block of data that is stored separately (for example across single data part for MergeTree table). If this limit is exceeded, all other paths will be stored together in a single structure. Default value of max_dynamic_paths is 1024.max_dynamic_types is an optional parameter between 1 and 255 indicating how many different data types can be stored inside a single path column with type Dynamic across single block of data that is stored separately (for example across single data part for MergeTree table). If this limit is exceeded, all new types will be converted to type String. Default value of max_dynamic_types is 32.some.path TypeName is an optional type hint for particular path in the JSON. Such paths will be always stored as subcolumns with specified type.SKIP path.to.skip is an optional hint for particular path that should be skipped during JSON parsing. Such paths will never be stored in the JSON column. If specified path is a nested JSON object, the whole nested object will be skipped.SKIP REGEXP 'path_regexp' is an optional hint with a regular expression that is used to skip paths during JSON parsing. All paths that match this regular expression will never be stored in the JSON column.", "Creating JSON\u200b", "Using JSON type in table column definition:", "CREATE TABLE test (json JSON) ENGINE = Memory;INSERT INTO test VALUES ('{\"a\" : {\"b\" : 42}, \"c\" : [1, 2, 3]}'), ('{\"f\" : \"Hello, World!\"}'), ('{\"a\" : {\"b\" : 43, \"e\" : 10}, \"c\" : [4, 5, 6]}');SELECT json FROM test;", "\u250c\u2500json\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 {\"a\":{\"b\":\"42\"},\"c\":[\"1\",\"2\",\"3\"]}          \u2502\u2502 {\"f\":\"Hello, World!\"}                       \u2502\u2502 {\"a\":{\"b\":\"43\",\"e\":\"10\"},\"c\":[\"4\",\"5\",\"6\"]} \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "CREATE TABLE test (json JSON(a.b UInt32, SKIP a.e)) ENGINE = Memory;INSERT INTO test VALUES ('{\"a\" : {\"b\" : 42}, \"c\" : [1, 2, 3]}'), ('{\"f\" : \"Hello, World!\"}'), ('{\"a\" : {\"b\" : 43, \"e\" : 10}, \"c\" : [4, 5, 6]}');SELECT json FROM test;", "\u250c\u2500json\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 {\"a\":{\"b\":42},\"c\":[1,2,3]}        \u2502\u2502 {\"a\":{\"b\":0},\"f\":\"Hello, World!\"} \u2502\u2502 {\"a\":{\"b\":43},\"c\":[4,5,6]}        \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "Using CAST from String:", "SELECT '{\"a\" : {\"b\" : 42},\"c\" : [1, 2, 3], \"d\" : \"Hello, World!\"}'::JSON AS json;", "\u250c\u2500json\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 {\"a\":{\"b\":42},\"c\":[1,2,3],\"d\":\"Hello, World!\"} \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "Using CAST from Tuple:", "SELECT (tuple(42 AS b) AS a, [1, 2, 3] AS c, 'Hello, World!' AS d)::JSON AS json;", "\u250c\u2500json\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 {\"a\":{\"b\":42},\"c\":[1,2,3],\"d\":\"Hello, World!\"} \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "Using CAST from Map:", "SELECT map('a', map('b', 42), 'c', [1,2,3], 'd', 'Hello, World!')::JSON AS json;", "\u250c\u2500json\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 {\"a\":{\"b\":42},\"c\":[1,2,3],\"d\":\"Hello, World!\"} \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "Using CAST from deprecated Object('json'):", " SELECT '{\"a\" : {\"b\" : 42},\"c\" : [1, 2, 3], \"d\" : \"Hello, World!\"}'::Object('json')::JSON AS json;", "\u250c\u2500json\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 {\"a\":{\"b\":42},\"c\":[1,2,3],\"d\":\"Hello, World!\"} \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "NoteCAST from Tuple/Map/Object('json') to JSON is implemented via serializing the column into String column containing JSON objects and deserializing it back to JSON type column. ", "CAST between JSON types with different arguments will be supported later.", "Reading JSON paths as subcolumns\u200b", "JSON type supports reading every path as a separate subcolumn. If type of the requested path was not specified in the JSON type declaration, the subcolumn of the path will always have type Dynamic.", "For example:", "CREATE TABLE test (json JSON(a.b UInt32, SKIP a.e)) ENGINE = Memory;INSERT INTO test VALUES ('{\"a\" : {\"b\" : 42, \"g\" : 42.42}, \"c\" : [1, 2, 3], \"d\" : \"2020-01-01\"}'), ('{\"f\" : \"Hello, World!\", \"d\" : \"2020-01-02\"}'), ('{\"a\" : {\"b\" : 43, \"e\" : 10, \"g\" : 43.43}, \"c\" : [4, 5, 6]}');SELECT json FROM test;", "\u250c\u2500json\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 {\"a\":{\"b\":42,\"g\":42.42},\"c\":[1,2,3],\"d\":\"2020-01-01\"} \u2502\u2502 {\"a\":{\"b\":0},\"d\":\"2020-01-02\",\"f\":\"Hello, World!\"}    \u2502\u2502 {\"a\":{\"b\":43,\"g\":43.43},\"c\":[4,5,6]}                  \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "SELECT json.a.b, json.a.g, json.c, json.d FROM test;", "\u250c\u2500json.a.b\u2500\u252c\u2500json.a.g\u2500\u252c\u2500json.c\u2500\u2500\u252c\u2500json.d\u2500\u2500\u2500\u2500\u2500\u2510\u2502       42 \u2502 42.42    \u2502 [1,2,3] \u2502 2020-01-01 \u2502\u2502        0 \u2502 \u1d3a\u1d41\u1d38\u1d38     \u2502 \u1d3a\u1d41\u1d38\u1d38    \u2502 2020-01-02 \u2502\u2502       43 \u2502 43.43    \u2502 [4,5,6] \u2502 \u1d3a\u1d41\u1d38\u1d38       \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "If the requested path wasn't found in the data, it will be filled with NULL values:", "SELECT json.non.existing.path FROM test;", "\u250c\u2500json.non.existing.path\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38                   \u2502\u2502 \u1d3a\u1d41\u1d38\u1d38                   \u2502\u2502 \u1d3a\u1d41\u1d38\u1d38                   \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "Let's check the data types of returned subcolumns:", "SELECT toTypeName(json.a.b), toTypeName(json.a.g), toTypeName(json.c), toTypeName(json.d) FROM test;", "\u250c\u2500toTypeName(json.a.b)\u2500\u252c\u2500toTypeName(json.a.g)\u2500\u252c\u2500toTypeName(json.c)\u2500\u252c\u2500toTypeName(json.d)\u2500\u2510\u2502 UInt32               \u2502 Dynamic              \u2502 Dynamic            \u2502 Dynamic            \u2502\u2502 UInt32               \u2502 Dynamic              \u2502 Dynamic            \u2502 Dynamic            \u2502\u2502 UInt32               \u2502 Dynamic              \u2502 Dynamic            \u2502 Dynamic            \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "As we can see, for a.b the type is UInt32 as we specified in the JSON type declaration, and for all other subcolumns the type is Dynamic.", "It is also possible to read subcolumns of a Dynamic type using special syntax json.some.path.:TypeName:", "select json.a.g.:Float64, dynamicType(json.a.g), json.d.:Date, dynamicType(json.d) FROM test;", "\u250c\u2500json.a.g.:`Float64`\u2500\u252c\u2500dynamicType(json.a.g)\u2500\u252c\u2500json.d.:`Date`\u2500\u252c\u2500dynamicType(json.d)\u2500\u2510\u2502               42.42 \u2502 Float64               \u2502     2020-01-01 \u2502 Date                \u2502\u2502                \u1d3a\u1d41\u1d38\u1d38 \u2502 None                  \u2502     2020-01-02 \u2502 Date                \u2502\u2502               43.43 \u2502 Float64               \u2502           \u1d3a\u1d41\u1d38\u1d38 \u2502 None                \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "Dynamic subcolumns can be casted to any data type. In this case the exception will be thrown if internal type inside Dynamic cannot be casted to the requested type:", "select json.a.g::UInt64 as uint FROM test;", "\u250c\u2500uint\u2500\u2510\u2502   42 \u2502\u2502    0 \u2502\u2502   43 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "select json.a.g::UUID as float FROM test;", "Received exception:Code: 48. DB::Exception: Conversion between numeric types and UUID is not supported. Probably the passed UUID is unquoted: while executing 'FUNCTION CAST(__table1.json.a.g :: 2, 'UUID'_String :: 1) -> CAST(__table1.json.a.g, 'UUID'_String) UUID : 0'. (NOT_IMPLEMENTED)", "Reading JSON sub-objects as subcolumns\u200b", "JSON type supports reading nested objects as subcolumns with type JSON using special syntax json.^some.path:", "CREATE TABLE test (json JSON) ENGINE = Memory;INSERT INTO test VALUES ('{\"a\" : {\"b\" : {\"c\" : 42, \"g\" : 42.42}}, \"c\" : [1, 2, 3], \"d\" : {\"e\" : {\"f\" : {\"g\" : \"Hello, World\", \"h\" : [1, 2, 3]}}}}'), ('{\"f\" : \"Hello, World!\", \"d\" : {\"e\" : {\"f\" : {\"h\" : [4, 5, 6]}}}}'), ('{\"a\" : {\"b\" : {\"c\" : 43, \"e\" : 10, \"g\" : 43.43}}, \"c\" : [4, 5, 6]}');SELECT json FROM test;", "\u250c\u2500json\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 {\"a\":{\"b\":{\"c\":42,\"g\":42.42}},\"c\":[1,2,3],\"d\":{\"e\":{\"f\":{\"g\":\"Hello, World\",\"h\":[1,2,3]}}}} \u2502\u2502 {\"d\":{\"e\":{\"f\":{\"h\":[4,5,6]}}},\"f\":\"Hello, World!\"}                                         \u2502\u2502 {\"a\":{\"b\":{\"c\":43,\"e\":10,\"g\":43.43}},\"c\":[4,5,6]}                                           \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "SELECT json.^a.b, json.^d.e.f FROM test;", "\u250c\u2500json.^`a`.b\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500json.^`d`.e.f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 {\"c\":42,\"g\":42.42}        \u2502 {\"g\":\"Hello, World\",\"h\":[1,2,3]} \u2502\u2502 {}                        \u2502 {\"h\":[4,5,6]}                    \u2502\u2502 {\"c\":43,\"e\":10,\"g\":43.43} \u2502 {}                               \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "NoteReading sub-objects as subcolumns may be inefficient, as this may require almost full scan of the JSON data.", "Types inference for paths\u200b", "During JSON parsing ClickHouse tries to detect the most appropriate data type for each JSON path. It works similar to automatic schema inference from input data and controlled by the same settings:", "input_format_try_infer_integersinput_format_try_infer_datesinput_format_try_infer_datetimesschema_inference_make_columns_nullableinput_format_json_try_infer_numbers_from_stringsinput_format_json_infer_incomplete_types_as_stringsinput_format_json_read_numbers_as_stringsinput_format_json_read_bools_as_stringsinput_format_json_read_bools_as_numbersinput_format_json_read_arrays_as_strings", "Let's see some examples:", "SELECT JSONAllPathsWithTypes('{\"a\" : \"2020-01-01\", \"b\" : \"2020-01-01 10:00:00\"}'::JSON) AS paths_with_types settings input_format_try_infer_dates=1, input_format_try_infer_datetimes=1;", "\u250c\u2500paths_with_types\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 {'a':'Date','b':'DateTime64(9)'} \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "SELECT JSONAllPathsWithTypes('{\"a\" : \"2020-01-01\", \"b\" : \"2020-01-01 10:00:00\"}'::JSON) AS paths_with_types settings input_format_try_infer_dates=0, input_format_try_infer_datetimes=0;", "\u250c\u2500paths_with_types\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 {'a':'String','b':'String'} \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "SELECT JSONAllPathsWithTypes('{\"a\" : [1, 2, 3]}'::JSON) AS paths_with_types settings schema_inference_make_columns_nullable=1;", "\u250c\u2500paths_with_types\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 {'a':'Array(Nullable(Int64))'} \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "SELECT JSONAllPathsWithTypes('{\"a\" : [1, 2, 3]}'::JSON) AS paths_with_types settings schema_inference_make_columns_nullable=0;", "\u250c\u2500paths_with_types\u2500\u2500\u2500\u2500\u2500\u2510\u2502 {'a':'Array(Int64)'} \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "Handling arrays of JSON objects\u200b", "JSON paths that contains an array of objects are parsed as type Array(JSON) and inserted into Dynamic column for this path. To read an array of objects you can extract it from Dynamic column as a subcolumn:", "CREATE TABLE test (json JSON) ENGINE = Memory;INSERT INTO test VALUES('{\"a\" : {\"b\" : [{\"c\" : 42, \"d\" : \"Hello\", \"f\" : [[{\"g\" : 42.42}]], \"k\" : {\"j\" : 1000}}, {\"c\" : 43}, {\"e\" : [1, 2, 3], \"d\" : \"My\", \"f\" : [[{\"g\" : 43.43, \"h\" : \"2020-01-01\"}]],  \"k\" : {\"j\" : 2000}}]}}'),('{\"a\" : {\"b\" : [1, 2, 3]}}'),('{\"a\" : {\"b\" : [{\"c\" : 44, \"f\" : [[{\"h\" : \"2020-01-02\"}]]}, {\"e\" : [4, 5, 6], \"d\" : \"World\", \"f\" : [[{\"g\" : 44.44}]],  \"k\" : {\"j\" : 3000}}]}}');SELECT json FROM test;", "\u250c\u2500json\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 {\"a\":{\"b\":[{\"c\":\"42\",\"d\":\"Hello\",\"f\":[[{\"g\":42.42}]],\"k\":{\"j\":\"1000\"}},{\"c\":\"43\"},{\"d\":\"My\",\"e\":[\"1\",\"2\",\"3\"],\"f\":[[{\"g\":43.43,\"h\":\"2020-01-01\"}]],\"k\":{\"j\":\"2000\"}}]}} \u2502\u2502 {\"a\":{\"b\":[\"1\",\"2\",\"3\"]}}                                                                                                                                               \u2502\u2502 {\"a\":{\"b\":[{\"c\":\"44\",\"f\":[[{\"h\":\"2020-01-02\"}]]},{\"d\":\"World\",\"e\":[\"4\",\"5\",\"6\"],\"f\":[[{\"g\":44.44}]],\"k\":{\"j\":\"3000\"}}]}}                                                \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "SELECT json.a.b, dynamicType(json.a.b) FROM test;", "\u250c\u2500json.a.b\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500dynamicType(json.a.b)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 ['{\"c\":\"42\",\"d\":\"Hello\",\"f\":[[{\"g\":42.42}]],\"k\":{\"j\":\"1000\"}}','{\"c\":\"43\"}','{\"d\":\"My\",\"e\":[\"1\",\"2\",\"3\"],\"f\":[[{\"g\":43.43,\"h\":\"2020-01-01\"}]],\"k\":{\"j\":\"2000\"}}'] \u2502 Array(JSON(max_dynamic_types=16, max_dynamic_paths=256)) \u2502\u2502 [1,2,3]                                                                                                                                                           \u2502 Array(Nullable(Int64))                                   \u2502\u2502 ['{\"c\":\"44\",\"f\":[[{\"h\":\"2020-01-02\"}]]}','{\"d\":\"World\",\"e\":[\"4\",\"5\",\"6\"],\"f\":[[{\"g\":44.44}]],\"k\":{\"j\":\"3000\"}}']                                                  \u2502 Array(JSON(max_dynamic_types=16, max_dynamic_paths=256)) \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "As you can notice, the max_dynamic_types/max_dynamic_paths parameters of the nested JSON type were reduced compared to the default values. It's needed to avoid number of subcolumns to grow  uncontrolled on nested arrays of JSON objects.", "Let's try to read subcolumns from this nested JSON column:", "SELECT json.a.b.:`Array(JSON)`.c, json.a.b.:`Array(JSON)`.f, json.a.b.:`Array(JSON)`.d FROM test; ", "\u250c\u2500json.a.b.:`Array(JSON)`.c\u2500\u252c\u2500json.a.b.:`Array(JSON)`.f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500json.a.b.:`Array(JSON)`.d\u2500\u2510\u2502 [42,43,NULL]              \u2502 [[['{\"g\":42.42}']],NULL,[['{\"g\":43.43,\"h\":\"2020-01-01\"}']]] \u2502 ['Hello',NULL,'My']       \u2502\u2502 []                        \u2502 []                                                          \u2502 []                        \u2502\u2502 [44,NULL]                 \u2502 [[['{\"h\":\"2020-01-02\"}']],[['{\"g\":44.44}']]]                \u2502 [NULL,'World']            \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "We can avoid writing Array(JSON) subcolumn name using special syntax:", "SELECT json.a.b[].c, json.a.b[].f, json.a.b[].d FROM test;", "\u250c\u2500json.a.b.:`Array(JSON)`.c\u2500\u252c\u2500json.a.b.:`Array(JSON)`.f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500json.a.b.:`Array(JSON)`.d\u2500\u2510\u2502 [42,43,NULL]              \u2502 [[['{\"g\":42.42}']],NULL,[['{\"g\":43.43,\"h\":\"2020-01-01\"}']]] \u2502 ['Hello',NULL,'My']       \u2502\u2502 []                        \u2502 []                                                          \u2502 []                        \u2502\u2502 [44,NULL]                 \u2502 [[['{\"h\":\"2020-01-02\"}']],[['{\"g\":44.44}']]]                \u2502 [NULL,'World']            \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "The number of [] after path indicates the array level. json.path[][] will be transformed to json.path.:Array(Array(JSON))", "Let's check the paths and types inside our Array(JSON):", "SELECT DISTINCT arrayJoin(JSONAllPathsWithTypes(arrayJoin(json.a.b[]))) FROM test;", "\u250c\u2500arrayJoin(JSONAllPathsWithTypes(arrayJoin(json.a.b.:`Array(JSON)`)))\u2500\u2500\u2510\u2502 ('c','Int64')                                                         \u2502\u2502 ('d','String')                                                        \u2502\u2502 ('f','Array(Array(JSON(max_dynamic_types=8, max_dynamic_paths=64)))') \u2502\u2502 ('k.j','Int64')                                                       \u2502\u2502 ('e','Array(Nullable(Int64))')                                        \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "Let's read subcolumns from Array(JSON) column:", "SELECT json.a.b[].c.:Int64, json.a.b[].f[][].g.:Float64, json.a.b[].f[][].h.:Date FROM test;", "\u250c\u2500json.a.b.:`Array(JSON)`.c.:`Int64`\u2500\u252c\u2500json.a.b.:`Array(JSON)`.f.:`Array(Array(JSON))`.g.:`Float64`\u2500\u252c\u2500json.a.b.:`Array(JSON)`.f.:`Array(Array(JSON))`.h.:`Date`\u2500\u2510\u2502 [42,43,NULL]                       \u2502 [[[42.42]],[],[[43.43]]]                                     \u2502 [[[NULL]],[],[['2020-01-01']]]                            \u2502\u2502 []                                 \u2502 []                                                           \u2502 []                                                        \u2502\u2502 [44,NULL]                          \u2502 [[[NULL]],[[44.44]]]                                         \u2502 [[['2020-01-02']],[[NULL]]]                               \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "We can also read sub-object subcolumns from nested JSON column:", "SELECT json.a.b[].^k FROM test", "\u250c\u2500json.a.b.:`Array(JSON)`.^`k`\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 ['{\"j\":\"1000\"}','{}','{\"j\":\"2000\"}'] \u2502\u2502 []                                   \u2502\u2502 ['{}','{\"j\":\"3000\"}']                \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "Reading JSON type from the data\u200b", "All text formats (JSONEachRow, TSV, CSV, CustomSeparated, Values, etc) supports reading JSON type.", "Examples:", "SELECT json FROM format(JSONEachRow, 'json JSON(a.b.c UInt32, SKIP a.b.d, SKIP d.e, SKIP REGEXP \\'b.*\\')', '{\"json\" : {\"a\" : {\"b\" : {\"c\" : 1, \"d\" : [0, 1]}}, \"b\" : \"2020-01-01\", \"c\" : 42, \"d\" : {\"e\" : {\"f\" : [\"s1\", \"s2\"]}, \"i\" : [1, 2, 3]}}}{\"json\" : {\"a\" : {\"b\" : {\"c\" : 2, \"d\" : [2, 3]}}, \"b\" : [1, 2, 3], \"c\" : null, \"d\" : {\"e\" : {\"g\" : 43}, \"i\" : [4, 5, 6]}}}{\"json\" : {\"a\" : {\"b\" : {\"c\" : 3, \"d\" : [4, 5]}}, \"b\" : {\"c\" : 10}, \"e\" : \"Hello, World!\"}}{\"json\" : {\"a\" : {\"b\" : {\"c\" : 4, \"d\" : [6, 7]}}, \"c\" : 43}}{\"json\" : {\"a\" : {\"b\" : {\"c\" : 5, \"d\" : [8, 9]}}, \"b\" : {\"c\" : 11, \"j\" : [1, 2, 3]}, \"d\" : {\"e\" : {\"f\" : [\"s3\", \"s4\"], \"g\" : 44}, \"h\" : \"2020-02-02 10:00:00\"}}}')", "\u250c\u2500json\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 {\"a\":{\"b\":{\"c\":1}},\"c\":\"42\",\"d\":{\"i\":[\"1\",\"2\",\"3\"]}}          \u2502\u2502 {\"a\":{\"b\":{\"c\":2}},\"d\":{\"i\":[\"4\",\"5\",\"6\"]}}                   \u2502\u2502 {\"a\":{\"b\":{\"c\":3}},\"e\":\"Hello, World!\"}                       \u2502\u2502 {\"a\":{\"b\":{\"c\":4}},\"c\":\"43\"}                                  \u2502\u2502 {\"a\":{\"b\":{\"c\":5}},\"d\":{\"h\":\"2020-02-02 10:00:00.000000000\"}} \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "For text formats like CSV/TSV/etc JSON is parsed from a string containing JSON object", "SELECT json FROM format(TSV, 'json JSON(a.b.c UInt32, SKIP a.b.d, SKIP REGEXP \\'b.*\\')','{\"a\" : {\"b\" : {\"c\" : 1, \"d\" : [0, 1]}}, \"b\" : \"2020-01-01\", \"c\" : 42, \"d\" : {\"e\" : {\"f\" : [\"s1\", \"s2\"]}, \"i\" : [1, 2, 3]}}{\"a\" : {\"b\" : {\"c\" : 2, \"d\" : [2, 3]}}, \"b\" : [1, 2, 3], \"c\" : null, \"d\" : {\"e\" : {\"g\" : 43}, \"i\" : [4, 5, 6]}}{\"a\" : {\"b\" : {\"c\" : 3, \"d\" : [4, 5]}}, \"b\" : {\"c\" : 10}, \"e\" : \"Hello, World!\"}{\"a\" : {\"b\" : {\"c\" : 4, \"d\" : [6, 7]}}, \"c\" : 43}{\"a\" : {\"b\" : {\"c\" : 5, \"d\" : [8, 9]}}, \"b\" : {\"c\" : 11, \"j\" : [1, 2, 3]}, \"d\" : {\"e\" : {\"f\" : [\"s3\", \"s4\"], \"g\" : 44}, \"h\" : \"2020-02-02 10:00:00\"}}')", "\u250c\u2500json\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 {\"a\":{\"b\":{\"c\":1}},\"c\":\"42\",\"d\":{\"i\":[\"1\",\"2\",\"3\"]}}          \u2502\u2502 {\"a\":{\"b\":{\"c\":2}},\"d\":{\"i\":[\"4\",\"5\",\"6\"]}}                   \u2502\u2502 {\"a\":{\"b\":{\"c\":3}},\"e\":\"Hello, World!\"}                       \u2502\u2502 {\"a\":{\"b\":{\"c\":4}},\"c\":\"43\"}                                  \u2502\u2502 {\"a\":{\"b\":{\"c\":5}},\"d\":{\"h\":\"2020-02-02 10:00:00.000000000\"}} \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "Reaching the limit of dynamic paths inside JSON\u200b", "JSON data type can store only limited number of paths as separate subcolumns inside. By default, this limit is 1024, but you can change it in type declaration using parameter max_dynamic_paths.\nWhen the limit is reached, all new paths inserted to JSON column will be stored in a single shared data structure. It's still possible to read such paths as subcolumns, but it will require reading the whole\nshared data structure to extract the values of this path. This limit is needed to avoid the enormous number of different subcolumns that can make the table unusable.", "Let's see what happens when the limit is reached in different scenarios.", "Reaching the limit during data parsing\u200b", "During parsing of JSON object from the data, when the limit is reached for current block of data, all new paths will be stored in a shared data structure. We can check it using introspection functions JSONDynamicPaths, JSONSharedDataPaths:", "SELECT json, JSONDynamicPaths(json), JSONSharedDataPaths(json) FROM format(JSONEachRow, 'json JSON(max_dynamic_paths=3)', '{\"json\" : {\"a\" : {\"b\" : 42}, \"c\" : [1, 2, 3]}}{\"json\" : {\"a\" : {\"b\" : 43}, \"d\" : \"2020-01-01\"}}{\"json\" : {\"a\" : {\"b\" : 44}, \"c\" : [4, 5, 6]}}{\"json\" : {\"a\" : {\"b\" : 43}, \"d\" : \"2020-01-02\", \"e\" : \"Hello\", \"f\" : {\"g\" : 42.42}}}{\"json\" : {\"a\" : {\"b\" : 43}, \"c\" : [7, 8, 9], \"f\" : {\"g\" : 43.43}, \"h\" : \"World\"}}')", "\u250c\u2500json\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500JSONDynamicPaths(json)\u2500\u252c\u2500JSONSharedDataPaths(json)\u2500\u2510\u2502 {\"a\":{\"b\":\"42\"},\"c\":[\"1\",\"2\",\"3\"]}                             \u2502 ['a.b','c','d']        \u2502 []                        \u2502\u2502 {\"a\":{\"b\":\"43\"},\"d\":\"2020-01-01\"}                              \u2502 ['a.b','c','d']        \u2502 []                        \u2502\u2502 {\"a\":{\"b\":\"44\"},\"c\":[\"4\",\"5\",\"6\"]}                             \u2502 ['a.b','c','d']        \u2502 []                        \u2502\u2502 {\"a\":{\"b\":\"43\"},\"d\":\"2020-01-02\",\"e\":\"Hello\",\"f\":{\"g\":42.42}}  \u2502 ['a.b','c','d']        \u2502 ['e','f.g']               \u2502\u2502 {\"a\":{\"b\":\"43\"},\"c\":[\"7\",\"8\",\"9\"],\"f\":{\"g\":43.43},\"h\":\"World\"} \u2502 ['a.b','c','d']        \u2502 ['f.g','h']               \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "As we can see, after inserting paths e and f.g the limit was reached and we inserted them into shared data structure.", "During merges of data parts in MergeTree table engines\u200b", "During merge of several data parts in MergeTree table the JSON column in the resulting data part can reach the limit of dynamic paths and won't be able to store all paths from source parts as subcolumns.\nIn this case ClickHouse chooses what paths will remain as subcolumns after merge and what paths will be stored in the shared data structure. In most cases ClickHouse tries to keep paths that contain\nthe largest number of non-null values and move the rarest paths to the shared data structure, but it depends on the implementation.", "Let's see an example of such merge. First, let's create a table with JSON column, set the limit of dynamic paths to 3 and insert values with 5 different paths:", "CREATE TABLE test (id UInt64, json JSON(max_dynamic_paths=3)) engine=MergeTree ORDER BY id;SYSTEM STOP MERGES test;INSERT INTO test SELECT number, formatRow('JSONEachRow', number as a) FROM numbers(5);INSERT INTO test SELECT number, formatRow('JSONEachRow', number as b) FROM numbers(4);INSERT INTO test SELECT number, formatRow('JSONEachRow', number as c) FROM numbers(3);INSERT INTO test SELECT number, formatRow('JSONEachRow', number as d) FROM numbers(2);INSERT INTO test SELECT number, formatRow('JSONEachRow', number as e)  FROM numbers(1);", "Each insert will create a separate data pert with JSON column containing single path:", "SELECT count(), JSONDynamicPaths(json) AS dynamic_paths, JSONSharedDataPaths(json) AS shared_data_paths, _part FROM test GROUP BY _part, dynamic_paths, shared_data_paths ORDER BY _part ASC", "\u250c\u2500count()\u2500\u252c\u2500dynamic_paths\u2500\u252c\u2500shared_data_paths\u2500\u252c\u2500_part\u2500\u2500\u2500\u2500\u2500\u2510\u2502       5 \u2502 ['a']         \u2502 []                \u2502 all_1_1_0 \u2502\u2502       4 \u2502 ['b']         \u2502 []                \u2502 all_2_2_0 \u2502\u2502       3 \u2502 ['c']         \u2502 []                \u2502 all_3_3_0 \u2502\u2502       2 \u2502 ['d']         \u2502 []                \u2502 all_4_4_0 \u2502\u2502       1 \u2502 ['e']         \u2502 []                \u2502 all_5_5_0 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "Now, let's merge all parts into one and see what will happen:", "SYSTEM START MERGES test;OPTIMIZE TABLE test FINAL;SELECT count(), dynamicType(d), _part FROM test GROUP BY _part, dynamicType(d) ORDER BY _part;", "\u250c\u2500count()\u2500\u252c\u2500dynamic_paths\u2500\u252c\u2500shared_data_paths\u2500\u252c\u2500_part\u2500\u2500\u2500\u2500\u2500\u2510\u2502       1 \u2502 ['a','b','c'] \u2502 ['e']             \u2502 all_1_5_2 \u2502\u2502       2 \u2502 ['a','b','c'] \u2502 ['d']             \u2502 all_1_5_2 \u2502\u2502      12 \u2502 ['a','b','c'] \u2502 []                \u2502 all_1_5_2 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "As we can see, ClickHouse kept the most frequent paths a, b and c and moved paths e and d to shared data structure.", "Introspection functions\u200b", "There are several functions that can help to inspect the content of the JSON column: JSONAllPaths, JSONAllPathsWithTypes, JSONDynamicPaths, JSONDynamicPathsWithTypes, JSONSharedDataPaths, JSONSharedDataPathsWithTypes, distinctDynamicTypes, distinctJSONPaths and distinctJSONPathsAndTypes", "Examples", "Let's investigate the content of GH Archive dataset for 2020-01-01 date:", "SELECT arrayJoin(distinctJSONPaths(json)) FROM s3('s3://clickhouse-public-datasets/gharchive/original/2020-01-01-*.json.gz', JSONAsObject) ", "\u250c\u2500arrayJoin(distinctJSONPaths(json))\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 actor.avatar_url                                           \u2502\u2502 actor.display_login                                        \u2502\u2502 actor.gravatar_id                                          \u2502\u2502 actor.id                                                   \u2502\u2502 actor.login                                                \u2502\u2502 actor.url                                                  \u2502\u2502 created_at                                                 \u2502\u2502 id                                                         \u2502\u2502 org.avatar_url                                             \u2502\u2502 org.gravatar_id                                            \u2502\u2502 org.id                                                     \u2502\u2502 org.login                                                  \u2502\u2502 org.url                                                    \u2502\u2502 payload.action                                             \u2502\u2502 payload.before                                             \u2502\u2502 payload.comment._links.html.href                           \u2502\u2502 payload.comment._links.pull_request.href                   \u2502\u2502 payload.comment._links.self.href                           \u2502\u2502 payload.comment.author_association                         \u2502\u2502 payload.comment.body                                       \u2502\u2502 payload.comment.commit_id                                  \u2502\u2502 payload.comment.created_at                                 \u2502\u2502 payload.comment.diff_hunk                                  \u2502\u2502 payload.comment.html_url                                   \u2502\u2502 payload.comment.id                                         \u2502\u2502 payload.comment.in_reply_to_id                             \u2502\u2502 payload.comment.issue_url                                  \u2502\u2502 payload.comment.line                                       \u2502\u2502 payload.comment.node_id                                    \u2502\u2502 payload.comment.original_commit_id                         \u2502\u2502 payload.comment.original_position                          \u2502\u2502 payload.comment.path                                       \u2502\u2502 payload.comment.position                                   \u2502\u2502 payload.comment.pull_request_review_id                     \u2502...\u2502 payload.release.node_id                                    \u2502\u2502 payload.release.prerelease                                 \u2502\u2502 payload.release.published_at                               \u2502\u2502 payload.release.tag_name                                   \u2502\u2502 payload.release.tarball_url                                \u2502\u2502 payload.release.target_commitish                           \u2502\u2502 payload.release.upload_url                                 \u2502\u2502 payload.release.url                                        \u2502\u2502 payload.release.zipball_url                                \u2502\u2502 payload.size                                               \u2502\u2502 public                                                     \u2502\u2502 repo.id                                                    \u2502\u2502 repo.name                                                  \u2502\u2502 repo.url                                                   \u2502\u2502 type                                                       \u2502\u2514\u2500arrayJoin(distinctJSONPaths(json))\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "SELECT arrayJoin(distinctJSONPathsAndTypes(json)) FROM s3('s3://clickhouse-public-datasets/gharchive/original/2020-01-01-*.json.gz', JSONAsObject) SETTINGS date_time_input_format='best_effort'", "\u250c\u2500arrayJoin(distinctJSONPathsAndTypes(json))\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 ('actor.avatar_url',['String'])                             \u2502\u2502 ('actor.display_login',['String'])                          \u2502\u2502 ('actor.gravatar_id',['String'])                            \u2502\u2502 ('actor.id',['Int64'])                                      \u2502\u2502 ('actor.login',['String'])                                  \u2502\u2502 ('actor.url',['String'])                                    \u2502\u2502 ('created_at',['DateTime'])                                 \u2502\u2502 ('id',['String'])                                           \u2502\u2502 ('org.avatar_url',['String'])                               \u2502\u2502 ('org.gravatar_id',['String'])                              \u2502\u2502 ('org.id',['Int64'])                                        \u2502\u2502 ('org.login',['String'])                                    \u2502\u2502 ('org.url',['String'])                                      \u2502\u2502 ('payload.action',['String'])                               \u2502\u2502 ('payload.before',['String'])                               \u2502\u2502 ('payload.comment._links.html.href',['String'])             \u2502\u2502 ('payload.comment._links.pull_request.href',['String'])     \u2502\u2502 ('payload.comment._links.self.href',['String'])             \u2502\u2502 ('payload.comment.author_association',['String'])           \u2502\u2502 ('payload.comment.body',['String'])                         \u2502\u2502 ('payload.comment.commit_id',['String'])                    \u2502\u2502 ('payload.comment.created_at',['DateTime'])                 \u2502\u2502 ('payload.comment.diff_hunk',['String'])                    \u2502\u2502 ('payload.comment.html_url',['String'])                     \u2502\u2502 ('payload.comment.id',['Int64'])                            \u2502\u2502 ('payload.comment.in_reply_to_id',['Int64'])                \u2502\u2502 ('payload.comment.issue_url',['String'])                    \u2502\u2502 ('payload.comment.line',['Int64'])                          \u2502\u2502 ('payload.comment.node_id',['String'])                      \u2502\u2502 ('payload.comment.original_commit_id',['String'])           \u2502\u2502 ('payload.comment.original_position',['Int64'])             \u2502\u2502 ('payload.comment.path',['String'])                         \u2502\u2502 ('payload.comment.position',['Int64'])                      \u2502\u2502 ('payload.comment.pull_request_review_id',['Int64'])        \u2502...\u2502 ('payload.release.node_id',['String'])                      \u2502\u2502 ('payload.release.prerelease',['Bool'])                     \u2502\u2502 ('payload.release.published_at',['DateTime'])               \u2502\u2502 ('payload.release.tag_name',['String'])                     \u2502\u2502 ('payload.release.tarball_url',['String'])                  \u2502\u2502 ('payload.release.target_commitish',['String'])             \u2502\u2502 ('payload.release.upload_url',['String'])                   \u2502\u2502 ('payload.release.url',['String'])                          \u2502\u2502 ('payload.release.zipball_url',['String'])                  \u2502\u2502 ('payload.size',['Int64'])                                  \u2502\u2502 ('public',['Bool'])                                         \u2502\u2502 ('repo.id',['Int64'])                                       \u2502\u2502 ('repo.name',['String'])                                    \u2502\u2502 ('repo.url',['String'])                                     \u2502\u2502 ('type',['String'])                                         \u2502\u2514\u2500arrayJoin(distinctJSONPathsAndTypes(json))\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "ALTER MODIFY COLUMN to JSON type\u200b", "It's possible to alter an existing table and change the type of the column to the new JSON type. Right now only alter from String type is supported.", "Example", "CREATE TABLE test (json String) ENGINE=MergeTree ORDeR BY tuple();INSERT INTO test VALUES ('{\"a\" : 42}'), ('{\"a\" : 43, \"b\" : \"Hello\"}'), ('{\"a\" : 44, \"b\" : [1, 2, 3]}')), ('{\"c\" : \"2020-01-01\"}');ALTER TABLE test MODIFY COLUMN json JSON;SELECT json, json.a, json.b, json.c FROM test;", "\u250c\u2500json\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500json.a\u2500\u252c\u2500json.b\u2500\u2500\u252c\u2500json.c\u2500\u2500\u2500\u2500\u2500\u2510\u2502 {\"a\":\"42\"}                   \u2502 42     \u2502 \u1d3a\u1d41\u1d38\u1d38    \u2502 \u1d3a\u1d41\u1d38\u1d38       \u2502\u2502 {\"a\":\"43\",\"b\":\"Hello\"}       \u2502 43     \u2502 Hello   \u2502 \u1d3a\u1d41\u1d38\u1d38       \u2502\u2502 {\"a\":\"44\",\"b\":[\"1\",\"2\",\"3\"]} \u2502 44     \u2502 [1,2,3] \u2502 \u1d3a\u1d41\u1d38\u1d38       \u2502\u2502 {\"c\":\"2020-01-01\"}           \u2502 \u1d3a\u1d41\u1d38\u1d38   \u2502 \u1d3a\u1d41\u1d38\u1d38    \u2502 2020-01-01 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "Tips for better usage of the JSON type\u200b", "Before creating JSON column and loading data into it, consider the following tips:", "Investigate your data and specify as many path hints with types as you can. It will make the storage and the reading much more efficient.Think about what paths you will need and what paths you will never need. Specify paths that you won't need in the SKIP section and SKIP REGEXP if needed. It will improve the storage.Don't set max_dynamic_paths parameter to very high values, it can make the storage and reading less efficient."], "Examples": ["<column_name> JSON(max_dynamic_paths=N, max_dynamic_types=M, some.path TypeName, SKIP path.to.skip, SKIP REGEXP 'paths_regexp')", "CREATE TABLE test (json JSON) ENGINE = Memory;INSERT INTO test VALUES ('{\"a\" : {\"b\" : 42}, \"c\" : [1, 2, 3]}'), ('{\"f\" : \"Hello, World!\"}'), ('{\"a\" : {\"b\" : 43, \"e\" : 10}, \"c\" : [4, 5, 6]}');SELECT json FROM test;", "CREATE TABLE test (json JSON(a.b UInt32, SKIP a.e)) ENGINE = Memory;INSERT INTO test VALUES ('{\"a\" : {\"b\" : 42}, \"c\" : [1, 2, 3]}'), ('{\"f\" : \"Hello, World!\"}'), ('{\"a\" : {\"b\" : 43, \"e\" : 10}, \"c\" : [4, 5, 6]}');SELECT json FROM test;", "SELECT '{\"a\" : {\"b\" : 42},\"c\" : [1, 2, 3], \"d\" : \"Hello, World!\"}'::JSON AS json;", "SELECT (tuple(42 AS b) AS a, [1, 2, 3] AS c, 'Hello, World!' AS d)::JSON AS json;", "SELECT map('a', map('b', 42), 'c', [1,2,3], 'd', 'Hello, World!')::JSON AS json;", " SELECT '{\"a\" : {\"b\" : 42},\"c\" : [1, 2, 3], \"d\" : \"Hello, World!\"}'::Object('json')::JSON AS json;", "CREATE TABLE test (json JSON(a.b UInt32, SKIP a.e)) ENGINE = Memory;INSERT INTO test VALUES ('{\"a\" : {\"b\" : 42, \"g\" : 42.42}, \"c\" : [1, 2, 3], \"d\" : \"2020-01-01\"}'), ('{\"f\" : \"Hello, World!\", \"d\" : \"2020-01-02\"}'), ('{\"a\" : {\"b\" : 43, \"e\" : 10, \"g\" : 43.43}, \"c\" : [4, 5, 6]}');SELECT json FROM test;", "SELECT json.a.b, json.a.g, json.c, json.d FROM test;", "SELECT json.non.existing.path FROM test;", "SELECT toTypeName(json.a.b), toTypeName(json.a.g), toTypeName(json.c), toTypeName(json.d) FROM test;", "select json.a.g.:Float64, dynamicType(json.a.g), json.d.:Date, dynamicType(json.d) FROM test;", "select json.a.g::UInt64 as uint FROM test;", "select json.a.g::UUID as float FROM test;", "CREATE TABLE test (json JSON) ENGINE = Memory;INSERT INTO test VALUES ('{\"a\" : {\"b\" : {\"c\" : 42, \"g\" : 42.42}}, \"c\" : [1, 2, 3], \"d\" : {\"e\" : {\"f\" : {\"g\" : \"Hello, World\", \"h\" : [1, 2, 3]}}}}'), ('{\"f\" : \"Hello, World!\", \"d\" : {\"e\" : {\"f\" : {\"h\" : [4, 5, 6]}}}}'), ('{\"a\" : {\"b\" : {\"c\" : 43, \"e\" : 10, \"g\" : 43.43}}, \"c\" : [4, 5, 6]}');SELECT json FROM test;", "SELECT json.^a.b, json.^d.e.f FROM test;", "SELECT JSONAllPathsWithTypes('{\"a\" : \"2020-01-01\", \"b\" : \"2020-01-01 10:00:00\"}'::JSON) AS paths_with_types settings input_format_try_infer_dates=1, input_format_try_infer_datetimes=1;", "SELECT JSONAllPathsWithTypes('{\"a\" : \"2020-01-01\", \"b\" : \"2020-01-01 10:00:00\"}'::JSON) AS paths_with_types settings input_format_try_infer_dates=0, input_format_try_infer_datetimes=0;", "SELECT JSONAllPathsWithTypes('{\"a\" : [1, 2, 3]}'::JSON) AS paths_with_types settings schema_inference_make_columns_nullable=1;", "SELECT JSONAllPathsWithTypes('{\"a\" : [1, 2, 3]}'::JSON) AS paths_with_types settings schema_inference_make_columns_nullable=0;", "CREATE TABLE test (json JSON) ENGINE = Memory;INSERT INTO test VALUES('{\"a\" : {\"b\" : [{\"c\" : 42, \"d\" : \"Hello\", \"f\" : [[{\"g\" : 42.42}]], \"k\" : {\"j\" : 1000}}, {\"c\" : 43}, {\"e\" : [1, 2, 3], \"d\" : \"My\", \"f\" : [[{\"g\" : 43.43, \"h\" : \"2020-01-01\"}]],  \"k\" : {\"j\" : 2000}}]}}'),('{\"a\" : {\"b\" : [1, 2, 3]}}'),('{\"a\" : {\"b\" : [{\"c\" : 44, \"f\" : [[{\"h\" : \"2020-01-02\"}]]}, {\"e\" : [4, 5, 6], \"d\" : \"World\", \"f\" : [[{\"g\" : 44.44}]],  \"k\" : {\"j\" : 3000}}]}}');SELECT json FROM test;", "SELECT json.a.b, dynamicType(json.a.b) FROM test;", "SELECT json.a.b.:`Array(JSON)`.c, json.a.b.:`Array(JSON)`.f, json.a.b.:`Array(JSON)`.d FROM test; ", "SELECT json.a.b[].c, json.a.b[].f, json.a.b[].d FROM test;", "SELECT DISTINCT arrayJoin(JSONAllPathsWithTypes(arrayJoin(json.a.b[]))) FROM test;", "SELECT json.a.b[].c.:Int64, json.a.b[].f[][].g.:Float64, json.a.b[].f[][].h.:Date FROM test;", "SELECT json.a.b[].^k FROM test", "SELECT json FROM format(JSONEachRow, 'json JSON(a.b.c UInt32, SKIP a.b.d, SKIP d.e, SKIP REGEXP \\'b.*\\')', '{\"json\" : {\"a\" : {\"b\" : {\"c\" : 1, \"d\" : [0, 1]}}, \"b\" : \"2020-01-01\", \"c\" : 42, \"d\" : {\"e\" : {\"f\" : [\"s1\", \"s2\"]}, \"i\" : [1, 2, 3]}}}{\"json\" : {\"a\" : {\"b\" : {\"c\" : 2, \"d\" : [2, 3]}}, \"b\" : [1, 2, 3], \"c\" : null, \"d\" : {\"e\" : {\"g\" : 43}, \"i\" : [4, 5, 6]}}}{\"json\" : {\"a\" : {\"b\" : {\"c\" : 3, \"d\" : [4, 5]}}, \"b\" : {\"c\" : 10}, \"e\" : \"Hello, World!\"}}{\"json\" : {\"a\" : {\"b\" : {\"c\" : 4, \"d\" : [6, 7]}}, \"c\" : 43}}{\"json\" : {\"a\" : {\"b\" : {\"c\" : 5, \"d\" : [8, 9]}}, \"b\" : {\"c\" : 11, \"j\" : [1, 2, 3]}, \"d\" : {\"e\" : {\"f\" : [\"s3\", \"s4\"], \"g\" : 44}, \"h\" : \"2020-02-02 10:00:00\"}}}')", "SELECT json FROM format(TSV, 'json JSON(a.b.c UInt32, SKIP a.b.d, SKIP REGEXP \\'b.*\\')','{\"a\" : {\"b\" : {\"c\" : 1, \"d\" : [0, 1]}}, \"b\" : \"2020-01-01\", \"c\" : 42, \"d\" : {\"e\" : {\"f\" : [\"s1\", \"s2\"]}, \"i\" : [1, 2, 3]}}{\"a\" : {\"b\" : {\"c\" : 2, \"d\" : [2, 3]}}, \"b\" : [1, 2, 3], \"c\" : null, \"d\" : {\"e\" : {\"g\" : 43}, \"i\" : [4, 5, 6]}}{\"a\" : {\"b\" : {\"c\" : 3, \"d\" : [4, 5]}}, \"b\" : {\"c\" : 10}, \"e\" : \"Hello, World!\"}{\"a\" : {\"b\" : {\"c\" : 4, \"d\" : [6, 7]}}, \"c\" : 43}{\"a\" : {\"b\" : {\"c\" : 5, \"d\" : [8, 9]}}, \"b\" : {\"c\" : 11, \"j\" : [1, 2, 3]}, \"d\" : {\"e\" : {\"f\" : [\"s3\", \"s4\"], \"g\" : 44}, \"h\" : \"2020-02-02 10:00:00\"}}')", "SELECT json, JSONDynamicPaths(json), JSONSharedDataPaths(json) FROM format(JSONEachRow, 'json JSON(max_dynamic_paths=3)', '{\"json\" : {\"a\" : {\"b\" : 42}, \"c\" : [1, 2, 3]}}{\"json\" : {\"a\" : {\"b\" : 43}, \"d\" : \"2020-01-01\"}}{\"json\" : {\"a\" : {\"b\" : 44}, \"c\" : [4, 5, 6]}}{\"json\" : {\"a\" : {\"b\" : 43}, \"d\" : \"2020-01-02\", \"e\" : \"Hello\", \"f\" : {\"g\" : 42.42}}}{\"json\" : {\"a\" : {\"b\" : 43}, \"c\" : [7, 8, 9], \"f\" : {\"g\" : 43.43}, \"h\" : \"World\"}}')", "CREATE TABLE test (id UInt64, json JSON(max_dynamic_paths=3)) engine=MergeTree ORDER BY id;SYSTEM STOP MERGES test;INSERT INTO test SELECT number, formatRow('JSONEachRow', number as a) FROM numbers(5);INSERT INTO test SELECT number, formatRow('JSONEachRow', number as b) FROM numbers(4);INSERT INTO test SELECT number, formatRow('JSONEachRow', number as c) FROM numbers(3);INSERT INTO test SELECT number, formatRow('JSONEachRow', number as d) FROM numbers(2);INSERT INTO test SELECT number, formatRow('JSONEachRow', number as e)  FROM numbers(1);", "SELECT count(), JSONDynamicPaths(json) AS dynamic_paths, JSONSharedDataPaths(json) AS shared_data_paths, _part FROM test GROUP BY _part, dynamic_paths, shared_data_paths ORDER BY _part ASC", "SYSTEM START MERGES test;OPTIMIZE TABLE test FINAL;SELECT count(), dynamicType(d), _part FROM test GROUP BY _part, dynamicType(d) ORDER BY _part;", "SELECT arrayJoin(distinctJSONPaths(json)) FROM s3('s3://clickhouse-public-datasets/gharchive/original/2020-01-01-*.json.gz', JSONAsObject) ", "SELECT arrayJoin(distinctJSONPathsAndTypes(json)) FROM s3('s3://clickhouse-public-datasets/gharchive/original/2020-01-01-*.json.gz', JSONAsObject) SETTINGS date_time_input_format='best_effort'", "CREATE TABLE test (json String) ENGINE=MergeTree ORDeR BY tuple();INSERT INTO test VALUES ('{\"a\" : 42}'), ('{\"a\" : 43, \"b\" : \"Hello\"}'), ('{\"a\" : 44, \"b\" : [1, 2, 3]}')), ('{\"c\" : \"2020-01-01\"}');ALTER TABLE test MODIFY COLUMN json JSON;SELECT json, json.a, json.b, json.c FROM test;"], "Category": ["JSON"]}
