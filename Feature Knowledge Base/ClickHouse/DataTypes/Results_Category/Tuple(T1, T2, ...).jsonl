{"HTML": ["https://clickhouse.com/docs/en/sql-reference/data-types/tuple"], "Title": ["Tuple(T1, T2, ...)"], "Feature": ["Tuple(T1, T2, ...)"], "Description": ["Tuple(T1, T2, ...)", "A tuple of elements, each having an individual type. Tuple must contain at least one element.", "Tuples are used for temporary column grouping. Columns can be grouped when an IN expression is used in a query, and for specifying certain formal parameters of lambda functions. For more information, see the sections IN operators and Higher order functions.", "Tuples can be the result of a query. In this case, for text formats other than JSON, values are comma-separated in brackets. In JSON formats, tuples are output as arrays (in square brackets).", "Creating Tuples\u200b", "You can use a function to create a tuple:", "tuple(T1, T2, ...)", "Example of creating a tuple:", "SELECT tuple(1, 'a') AS x, toTypeName(x)", "\u250c\u2500x\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500toTypeName(tuple(1, 'a'))\u2500\u2510\u2502 (1,'a') \u2502 Tuple(UInt8, String)      \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "A Tuple can contain a single element", "Example:", "SELECT tuple('a') AS x;", "\u250c\u2500x\u2500\u2500\u2500\u2500\u2500\u2510\u2502 ('a') \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "Syntax (tuple_element1, tuple_element2) may be used to create a tuple of several elements without calling the tuple() function.", "Example:", "SELECT (1, 'a') AS x, (today(), rand(), 'someString') AS y, ('a') AS not_a_tuple;", "\u250c\u2500x\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500y\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500not_a_tuple\u2500\u2510\u2502 (1,'a') \u2502 ('2022-09-21',2006973416,'someString') \u2502 a           \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "Data Type Detection\u200b", "When creating tuples on the fly, ClickHouse interferes the type of the tuples arguments as the smallest types which can hold the provided argument value. If the value is NULL, the interfered type is Nullable.", "Example of automatic data type detection:", "SELECT tuple(1, NULL) AS x, toTypeName(x)", "\u250c\u2500x\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500toTypeName(tuple(1, NULL))\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 (1, NULL) \u2502 Tuple(UInt8, Nullable(Nothing)) \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "Referring to Tuple Elements\u200b", "Tuple elements can be referred to by name or by index:", "CREATE TABLE named_tuples (`a` Tuple(s String, i Int64)) ENGINE = Memory;INSERT INTO named_tuples VALUES (('y', 10)), (('x',-10));SELECT a.s FROM named_tuples; -- by nameSELECT a.2 FROM named_tuples; -- by index", "Result:", "\u250c\u2500a.s\u2500\u2510\u2502 y   \u2502\u2502 x   \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2518\u250c\u2500tupleElement(a, 2)\u2500\u2510\u2502                 10 \u2502\u2502                -10 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "Comparison operations with Tuple\u200b", "Two tuples are compared by sequentially comparing their elements from the left to the right. If first tuples element is greater (smaller) than the second tuples corresponding element, then the first tuple is greater (smaller) than the second, otherwise (both elements are equal), the next element is compared.", "Example:", "SELECT (1, 'z') > (1, 'a') c1, (2022, 01, 02) > (2023, 04, 02) c2, (1,2,3) = (3,2,1) c3;", "\u250c\u2500c1\u2500\u252c\u2500c2\u2500\u252c\u2500c3\u2500\u2510\u2502  1 \u2502  0 \u2502  0 \u2502\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518", "Real world examples:", "CREATE TABLE test(    `year` Int16,    `month` Int8,    `day` Int8)ENGINE = Memory ASSELECT *FROM values((2022, 12, 31), (2000, 1, 1));SELECT * FROM test;\u250c\u2500year\u2500\u252c\u2500month\u2500\u252c\u2500day\u2500\u2510\u2502 2022 \u2502    12 \u2502  31 \u2502\u2502 2000 \u2502     1 \u2502   1 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518SELECT *FROM testWHERE (year, month, day) > (2010, 1, 1);\u250c\u2500year\u2500\u252c\u2500month\u2500\u252c\u2500day\u2500\u2510\u2502 2022 \u2502    12 \u2502  31 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518CREATE TABLE test(    `key` Int64,    `duration` UInt32,    `value` Float64)ENGINE = Memory ASSELECT *FROM values((1, 42, 66.5), (1, 42, 70), (2, 1, 10), (2, 2, 0));SELECT * FROM test;\u250c\u2500key\u2500\u252c\u2500duration\u2500\u252c\u2500value\u2500\u2510\u2502   1 \u2502       42 \u2502  66.5 \u2502\u2502   1 \u2502       42 \u2502    70 \u2502\u2502   2 \u2502        1 \u2502    10 \u2502\u2502   2 \u2502        2 \u2502     0 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518-- Let's find a value for each key with the biggest duration, if durations are equal, select the biggest valueSELECT    key,    max(duration),    argMax(value, (duration, value))FROM testGROUP BY keyORDER BY key ASC;\u250c\u2500key\u2500\u252c\u2500max(duration)\u2500\u252c\u2500argMax(value, tuple(duration, value))\u2500\u2510\u2502   1 \u2502            42 \u2502                                    70 \u2502\u2502   2 \u2502             2 \u2502                                     0 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Examples": ["tuple(T1, T2, ...)", "SELECT tuple(1, 'a') AS x, toTypeName(x)", "SELECT tuple('a') AS x;", "SELECT (1, 'a') AS x, (today(), rand(), 'someString') AS y, ('a') AS not_a_tuple;", "SELECT tuple(1, NULL) AS x, toTypeName(x)", "CREATE TABLE named_tuples (`a` Tuple(s String, i Int64)) ENGINE = Memory;INSERT INTO named_tuples VALUES (('y', 10)), (('x',-10));SELECT a.s FROM named_tuples; -- by nameSELECT a.2 FROM named_tuples; -- by index", "SELECT (1, 'z') > (1, 'a') c1, (2022, 01, 02) > (2023, 04, 02) c2, (1,2,3) = (3,2,1) c3;", "CREATE TABLE test(    `year` Int16,    `month` Int8,    `day` Int8)ENGINE = Memory ASSELECT *FROM values((2022, 12, 31), (2000, 1, 1));SELECT * FROM test;\u250c\u2500year\u2500\u252c\u2500month\u2500\u252c\u2500day\u2500\u2510\u2502 2022 \u2502    12 \u2502  31 \u2502\u2502 2000 \u2502     1 \u2502   1 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518SELECT *FROM testWHERE (year, month, day) > (2010, 1, 1);\u250c\u2500year\u2500\u252c\u2500month\u2500\u252c\u2500day\u2500\u2510\u2502 2022 \u2502    12 \u2502  31 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518CREATE TABLE test(    `key` Int64,    `duration` UInt32,    `value` Float64)ENGINE = Memory ASSELECT *FROM values((1, 42, 66.5), (1, 42, 70), (2, 1, 10), (2, 2, 0));SELECT * FROM test;\u250c\u2500key\u2500\u252c\u2500duration\u2500\u252c\u2500value\u2500\u2510\u2502   1 \u2502       42 \u2502  66.5 \u2502\u2502   1 \u2502       42 \u2502    70 \u2502\u2502   2 \u2502        1 \u2502    10 \u2502\u2502   2 \u2502        2 \u2502     0 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518-- Let's find a value for each key with the biggest duration, if durations are equal, select the biggest valueSELECT    key,    max(duration),    argMax(value, (duration, value))FROM testGROUP BY keyORDER BY key ASC;\u250c\u2500key\u2500\u252c\u2500max(duration)\u2500\u252c\u2500argMax(value, tuple(duration, value))\u2500\u2510\u2502   1 \u2502            42 \u2502                                    70 \u2502\u2502   2 \u2502             2 \u2502                                     0 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Category": ["Tuple(T1, T2, ...)"]}
