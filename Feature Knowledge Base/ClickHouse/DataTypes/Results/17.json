{
    "HTML": [
        "https://clickhouse.com/docs/en/sql-reference/data-types/map"
    ],
    "Title": [
        "Map(K, V)"
    ],
    "Feature": [
        "Map(K, V)"
    ],
    "Description": [
        "Map(K, V)",
        "Data type Map(K, V) stores key-value pairs.",
        "Unlike other databases, maps are not unique in ClickHouse, i.e. a map can contain two elements with the same key.\n(The reason for that is that maps are internally implemented as Array(Tuple(K, V)).)",
        "You can use use syntax m[k] to obtain the value for key k in map m.\nAlso, m[k] scans the map, i.e. the runtime of the operation is linear in the size of the map.",
        "Parameters",
        "K \u2014 The type of the Map keys. Arbitrary type except Nullable and LowCardinality nested with Nullable types.V \u2014 The type of the Map values. Arbitrary type.",
        "Examples",
        "Create a table with a column of type map:",
        "CREATE TABLE tab (m Map(String, UInt64)) ENGINE=Memory;INSERT INTO tab VALUES ({'key1':1, 'key2':10}), ({'key1':2,'key2':20}), ({'key1':3,'key2':30});",
        "To select key2 values:",
        "SELECT m['key2'] FROM tab;",
        "Result:",
        "\u250c\u2500arrayElement(m, 'key2')\u2500\u2510\u2502                      10 \u2502\u2502                      20 \u2502\u2502                      30 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "If the requested key k is not contained in the map, m[k] returns the value type's default value, e.g. 0 for integer types and '' for string types.\nTo check whether a key exists in a map, you can use function mapContains.",
        "CREATE TABLE tab (m Map(String, UInt64)) ENGINE=Memory;INSERT INTO tab VALUES ({'key1':100}), ({});SELECT m['key1'] FROM tab;",
        "Result:",
        "\u250c\u2500arrayElement(m, 'key1')\u2500\u2510\u2502                     100 \u2502\u2502                       0 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "Converting Tuple to Map\u200b",
        "Values of type Tuple() can be casted to values of type Map() using function CAST:",
        "Example",
        "Query:",
        "SELECT CAST(([1, 2, 3], ['Ready', 'Steady', 'Go']), 'Map(UInt8, String)') AS map;",
        "Result:",
        "\u250c\u2500map\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 {1:'Ready',2:'Steady',3:'Go'} \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "Reading subcolumns of Map\u200b",
        "To avoid reading the entire map, you can use subcolumns keys and values in some cases.",
        "Example",
        "Query:",
        "CREATE TABLE tab (m Map(String, UInt64)) ENGINE = Memory;INSERT INTO tab VALUES (map('key1', 1, 'key2', 2, 'key3', 3));SELECT m.keys FROM tab; --   same as mapKeys(m)SELECT m.values FROM tab; -- same as mapValues(m)",
        "Result:",
        "\u250c\u2500m.keys\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 ['key1','key2','key3'] \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u250c\u2500m.values\u2500\u2510\u2502 [1,2,3]  \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "See Also",
        "map() functionCAST() function-Map combinator for Map datatype",
        "Related content\u200b",
        "Blog: Building an Observability Solution with ClickHouse - Part 2 - Traces"
    ],
    "Examples": [
        "CREATE TABLE tab (m Map(String, UInt64)) ENGINE=Memory;INSERT INTO tab VALUES ({'key1':1, 'key2':10}), ({'key1':2,'key2':20}), ({'key1':3,'key2':30});",
        "SELECT m['key2'] FROM tab;",
        "CREATE TABLE tab (m Map(String, UInt64)) ENGINE=Memory;INSERT INTO tab VALUES ({'key1':100}), ({});SELECT m['key1'] FROM tab;",
        "SELECT CAST(([1, 2, 3], ['Ready', 'Steady', 'Go']), 'Map(UInt8, String)') AS map;",
        "CREATE TABLE tab (m Map(String, UInt64)) ENGINE = Memory;INSERT INTO tab VALUES (map('key1', 1, 'key2', 2, 'key3', 3));SELECT m.keys FROM tab; --   same as mapKeys(m)SELECT m.values FROM tab; -- same as mapValues(m)"
    ],
    "Category": [
        "Map(K, V)"
    ]
}