{
    "HTML": [
        "https://clickhouse.com/docs/en/sql-reference/data-types/datetime64"
    ],
    "Title": [
        "DateTime64"
    ],
    "Feature": [
        "DateTime64"
    ],
    "Description": [
        "DateTime64",
        "Allows to store an instant in time, that can be expressed as a calendar date and a time of a day, with defined sub-second precision",
        "Tick size (precision): 10-precision seconds. Valid range: [ 0 : 9 ].\nTypically, are used - 3 (milliseconds), 6 (microseconds), 9 (nanoseconds).",
        "Syntax:",
        "DateTime64(precision, [timezone])",
        "Internally, stores data as a number of \u2018ticks\u2019 since epoch start (1970-01-01 00:00:00 UTC) as Int64. The tick resolution is determined by the precision parameter. Additionally, the DateTime64 type can store time zone that is the same for the entire column, that affects how the values of the DateTime64 type values are displayed in text format and how the values specified as strings are parsed (\u20182020-01-01 05:00:01.000\u2019). The time zone is not stored in the rows of the table (or in resultset), but is stored in the column metadata. See details in DateTime.",
        "Supported range of values: [1900-01-01 00:00:00, 2299-12-31 23:59:59.99999999]",
        "Note: The precision of the maximum value is 8. If the maximum precision of 9 digits (nanoseconds) is used, the maximum supported value is 2262-04-11 23:47:16 in UTC.",
        "Examples\u200b",
        "Creating a table with DateTime64-type column and inserting data into it:",
        "CREATE TABLE dt64(    `timestamp` DateTime64(3, 'Asia/Istanbul'),    `event_id` UInt8)ENGINE = TinyLog;",
        "-- Parse DateTime-- - from integer interpreted as number of seconds since 1970-01-01.-- - from string,INSERT INTO dt64 VALUES (1546300800123, 1), (1546300800.123, 2), ('2019-01-01 00:00:00', 3);SELECT * FROM dt64;",
        "\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500timestamp\u2500\u252c\u2500event_id\u2500\u2510\u2502 2019-01-01 03:00:00.123 \u2502        1 \u2502\u2502 2019-01-01 03:00:00.123 \u2502        2 \u2502\u2502 2019-01-01 00:00:00.000 \u2502        3 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "When inserting datetime as an integer, it is treated as an appropriately scaled Unix Timestamp (UTC). 1546300800000 (with precision 3) represents '2019-01-01 00:00:00' UTC. However, as timestamp column has Asia/Istanbul (UTC+3) timezone specified, when outputting as a string the value will be shown as '2019-01-01 03:00:00'. Inserting datetime as a decimal will treat it similarly as an integer, except the value before the decimal point is the Unix Timestamp up to and including the seconds, and after the decimal point will be treated as the precision.When inserting string value as datetime, it is treated as being in column timezone. '2019-01-01 00:00:00' will be treated as being in Asia/Istanbul timezone and stored as 1546290000000.",
        "Filtering on DateTime64 values",
        "SELECT * FROM dt64 WHERE timestamp = toDateTime64('2019-01-01 00:00:00', 3, 'Asia/Istanbul');",
        "\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500timestamp\u2500\u252c\u2500event_id\u2500\u2510\u2502 2019-01-01 00:00:00.000 \u2502        3 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "Unlike DateTime, DateTime64 values are not converted from String automatically.",
        "SELECT * FROM dt64 WHERE timestamp = toDateTime64(1546300800.123, 3);",
        "\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500timestamp\u2500\u252c\u2500event_id\u2500\u2510\u2502 2019-01-01 03:00:00.123 \u2502        1 \u2502\u2502 2019-01-01 03:00:00.123 \u2502        2 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "Contrary to inserting, the toDateTime64 function will treat all values as the decimal variant, so precision needs to\nbe given after the decimal point.",
        "Getting a time zone for a DateTime64-type value:",
        "SELECT toDateTime64(now(), 3, 'Asia/Istanbul') AS column, toTypeName(column) AS x;",
        "\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500column\u2500\u252c\u2500x\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 2023-06-05 00:09:52.000 \u2502 DateTime64(3, 'Asia/Istanbul') \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "Timezone conversion",
        "SELECTtoDateTime64(timestamp, 3, 'Europe/London') as lon_time,toDateTime64(timestamp, 3, 'Asia/Istanbul') as istanbul_timeFROM dt64;",
        "\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500lon_time\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500istanbul_time\u2500\u2510\u2502 2019-01-01 00:00:00.123 \u2502 2019-01-01 03:00:00.123 \u2502\u2502 2019-01-01 00:00:00.123 \u2502 2019-01-01 03:00:00.123 \u2502\u2502 2018-12-31 21:00:00.000 \u2502 2019-01-01 00:00:00.000 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "See Also",
        "Type conversion functionsFunctions for working with dates and timesThe date_time_input_format settingThe date_time_output_format settingThe timezone server configuration parameterThe session_timezone settingOperators for working with dates and timesDate data typeDateTime data type"
    ],
    "Examples": [
        "DateTime64(precision, [timezone])",
        "CREATE TABLE dt64(    `timestamp` DateTime64(3, 'Asia/Istanbul'),    `event_id` UInt8)ENGINE = TinyLog;",
        "-- Parse DateTime-- - from integer interpreted as number of seconds since 1970-01-01.-- - from string,INSERT INTO dt64 VALUES (1546300800123, 1), (1546300800.123, 2), ('2019-01-01 00:00:00', 3);SELECT * FROM dt64;",
        "SELECT * FROM dt64 WHERE timestamp = toDateTime64('2019-01-01 00:00:00', 3, 'Asia/Istanbul');",
        "SELECT * FROM dt64 WHERE timestamp = toDateTime64(1546300800.123, 3);",
        "SELECT toDateTime64(now(), 3, 'Asia/Istanbul') AS column, toTypeName(column) AS x;",
        "SELECTtoDateTime64(timestamp, 3, 'Europe/London') as lon_time,toDateTime64(timestamp, 3, 'Asia/Istanbul') as istanbul_timeFROM dt64;"
    ],
    "Category": [
        "DateTime64"
    ]
}