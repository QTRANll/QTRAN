{"HTML": ["https://sqlite.org/lang_expr.html"], "Title": ["SQL Language Expressions"], "Feature": ["+"], "Description": ["The addition operator (+) adds two numeric expressions together. If either operand is a non-numeric type, it is cast to a numeric type for the addition.", "Parameters: Two numeric expressions.", "Returns: The sum of the two numeric expressions."], "Examples": ["SELECT 5 + 10 AS result; -- Returns 15", "SELECT salary + bonus FROM employees; -- Adds salary and bonus for each employee"], "Category": ["Operators"]}
{"HTML": ["https://sqlite.org/lang_expr.html"], "Title": ["SQL Language Expressions"], "Feature": ["<<"], "Description": ["The bitwise shift left operator (<<) shifts the bits of the first integer expression to the left by the number of positions specified by the second integer expression.", "Parameters: Two integer expressions. The first is shifted left by the number of positions specified by the second.", "Returns: The result of the bitwise shift left operation."], "Examples": ["SELECT 5 << 1 AS result; -- Returns 10 (binary 0101 << 1 = 1010)", "SELECT shift_amount << 2 FROM settings; -- Shifts the shift_amount left by 2 positions"], "Category": ["Operators"]}
{"HTML": ["https://sqlite.org/lang_expr.html"], "Title": ["SQL Language Expressions"], "Feature": [">>"], "Description": ["The bitwise shift right operator (>>) shifts the bits of the first integer expression to the right by the number of positions specified by the second integer expression.", "Parameters: Two integer expressions. The first is shifted right by the number of positions specified by the second.", "Returns: The result of the bitwise shift right operation."], "Examples": ["SELECT 20 >> 1 AS result; -- Returns 10 (binary 10100 >> 1 = 01010)", "SELECT shift_amount >> 3 FROM settings; -- Shifts the shift_amount right by 3 positions"], "Category": ["Operators"]}
{"HTML": ["https://sqlite.org/lang_expr.html"], "Title": ["SQL Language Expressions"], "Feature": ["ESCAPE"], "Description": ["The ESCAPE operator specifies an escape character for the LIKE pattern matching operation. It is used to escape special characters in the pattern that would otherwise be interpreted as wildcards.", "Parameters: A pattern with a special character and an escape character.", "Returns: The result of the LIKE operation with the special character escaped."], "Examples": [], "Category": ["Operators"]}
{"HTML": ["https://sqlite.org/lang_expr.html"], "Title": ["SQL Language Expressions"], "Feature": ["Comparison Operators"], "Description": ["Comparison operators are used to compare two expressions. The operators include < (less than), > (greater than), <= (less than or equal to), and >= (greater than or equal to). These operators return true or false based on the comparison result.", "Parameters: Two expressions to compare.", "Returns: True if the comparison holds; otherwise, false."], "Examples": ["SELECT * FROM orders WHERE order_amount > 100; -- Finds orders with an amount greater than 100", "SELECT * FROM products WHERE price <= 50; -- Finds products priced at or below 50"], "Category": ["Operators"]}
{"HTML": ["https://sqlite.org/lang_expr.html"], "Title": ["SQL Language Expressions"], "Feature": ["Equality Operators"], "Description": ["Equality operators are used to compare if two expressions are equal or not. The operators include = (equal to), == (equal to), <> (not equal to), and != (not equal to). They return true if the expressions match or do not match as specified.", "Parameters: Two expressions to compare for equality or inequality.", "Returns: True if the comparison result meets the criteria; otherwise, false."], "Examples": ["SELECT * FROM users WHERE username = 'admin'; -- Finds users with username 'admin'", "SELECT * FROM orders WHERE status != 'completed'; -- Finds orders not marked as 'completed'"], "Category": ["Operators"]}
{"HTML": ["https://sqlite.org/lang_expr.html"], "Title": ["SQL Language Expressions"], "Feature": ["IS NULL / IS NOT NULL"], "Description": ["IS NULL and IS NOT NULL operators are used to check if an expression is NULL or not. IS NULL returns true if the expression is NULL, while IS NOT NULL returns true if the expression is not NULL.", "Parameters: An expression to check for NULL value.", "Returns: True if the expression matches the NULL condition or its opposite."], "Examples": ["SELECT * FROM employees WHERE manager_id IS NULL; -- Finds employees without a manager", "SELECT * FROM products WHERE discount IS NOT NULL; -- Finds products with a discount"], "Category": ["Operators"]}
{"HTML": ["https://sqlite.org/lang_expr.html"], "Title": ["SQL Language Expressions"], "Feature": ["BETWEEN"], "Description": ["The BETWEEN operator is used to filter the result set within a range. It includes the boundary values in the range. The range can be specified with two values, and the operator returns true if the value falls within this range.", "Parameters: An expression and two boundary values.", "Returns: True if the expression value is within the specified range, inclusive of the boundaries."], "Examples": ["SELECT * FROM products WHERE price BETWEEN 50 AND 100; -- Finds products with prices between 50 and 100", "SELECT * FROM orders WHERE order_date BETWEEN '2024-01-01' AND '2024-12-31'; -- Finds orders placed within the year 2024"], "Category": ["Operators"]}
{"HTML": ["https://sqlite.org/lang_expr.html"], "Title": ["SQL Language Expressions"], "Feature": ["IN"], "Description": ["The IN operator is used to check if a value is within a set of values. The set can be specified with a list of values or a subquery that returns a set of values. It returns true if the value is found in the set.", "Parameters: A value and a set of values or subquery.", "Returns: True if the value is in the set or subquery results; otherwise, false."], "Examples": ["SELECT * FROM employees WHERE department_id IN (1, 2, 3); -- Finds employees in departments 1, 2, or 3", "SELECT * FROM orders WHERE customer_id IN (SELECT customer_id FROM loyal_customers); -- Finds orders from loyal customers"], "Category": ["Operators"]}
{"HTML": ["https://sqlite.org/lang_expr.html"], "Title": ["SQL Language Expressions"], "Feature": ["LIKE"], "Description": ["The LIKE operator is used to match a pattern in a TEXT value. The pattern can include wildcards such as % (matches any number of characters) and _ (matches a single character). The ESCAPE clause can be used to specify an escape character for wildcards.", "Parameters: A TEXT value and a pattern with wildcards.", "Returns: True if the TEXT value matches the pattern; otherwise, false."], "Examples": ["SELECT * FROM products WHERE product_name LIKE 'Widget%'; -- Finds products with names starting with 'Widget'", "SELECT * FROM users WHERE username LIKE '_admin'; -- Finds usernames where the second character is 'admin'"], "Category": ["Operators"]}
{"HTML": ["https://sqlite.org/lang_expr.html"], "Title": ["SQL Language Expressions"], "Feature": ["REGEXP"], "Description": ["The REGEXP operator is used to match a regular expression pattern against a TEXT value. Unlike LIKE, which uses simple wildcard characters, REGEXP uses regular expressions for more complex pattern matching.", "Parameters: A TEXT value and a regular expression pattern.", "Returns: True if the TEXT value matches the regular expression pattern; otherwise, false."], "Examples": ["SELECT * FROM users WHERE email REGEXP '^\\w+@example\\.com$'; -- Finds email addresses from example.com", "SELECT * FROM orders WHERE order_number REGEXP 'ORD[0-9]{4}'; -- Finds order numbers matching the pattern 'ORD' followed by 4 digits"], "Category": ["Operators"]}
{"HTML": ["https://sqlite.org/lang_expr.html"], "Title": ["SQL Language Expressions"], "Feature": ["-"], "Description": ["The subtraction operator (-) subtracts one numeric expression from another. Non-numeric operands are cast to numeric types before performing the subtraction.", "Parameters: Two numeric expressions.", "Returns: The difference between the two numeric expressions."], "Examples": ["SELECT 20 - 5 AS result; -- Returns 15", "SELECT salary - deductions FROM employees; -- Subtracts deductions from salary for each employee"], "Category": ["Operators"]}
{"HTML": ["https://sqlite.org/lang_expr.html"], "Title": ["SQL Language Expressions"], "Feature": ["GLOB"], "Description": ["The GLOB operator performs a pattern matching operation using Unix shell-style wildcards. Unlike LIKE, which uses SQL-like wildcards, GLOB uses `*` (matches any number of characters) and `?` (matches a single character).", "Parameters: A TEXT value and a pattern with wildcards.", "Returns: True if the TEXT value matches the pattern; otherwise, false."], "Examples": ["SELECT * FROM files WHERE file_name GLOB '*.txt'; -- Finds text files", "SELECT * FROM products WHERE product_code GLOB 'AB?123'; -- Finds product codes starting with 'AB' followed by any single character and ending with '123'"], "Category": ["Operators"]}
{"HTML": ["https://sqlite.org/lang_expr.html"], "Title": ["SQL Language Expressions"], "Feature": ["ISNULL"], "Description": ["The ISNULL operator is used to test if an expression is NULL. It returns true if the expression is NULL, and false if it is not NULL.", "Parameters: An expression to test for NULL.", "Returns: True if the expression is NULL; otherwise, false."], "Examples": ["SELECT * FROM orders WHERE order_date IS NULL; -- Finds orders where the order date is NULL", "SELECT COALESCE(discount, 0) FROM products; -- Uses 0 if discount is NULL"], "Category": ["Operators"]}
{"HTML": ["https://sqlite.org/lang_expr.html"], "Title": ["SQL Language Expressions"], "Feature": ["NOTNULL"], "Description": ["The NOTNULL operator is used to test if an expression is not NULL. It returns true if the expression is not NULL, and false if it is NULL.", "Parameters: An expression to test for non-NULL.", "Returns: True if the expression is not NULL; otherwise, false."], "Examples": ["SELECT * FROM employees WHERE manager_id IS NOT NULL; -- Finds employees with a manager ID", "SELECT name FROM products WHERE price IS NOT NULL; -- Finds products with a price specified"], "Category": ["Operators"]}
{"HTML": ["https://sqlite.org/lang_expr.html"], "Title": ["SQL Language Expressions"], "Feature": ["NOT NULL"], "Description": ["The NOT NULL constraint ensures that a column cannot have a NULL value. It is used in table definitions to enforce that a column must always contain a value.", "Parameters: A column definition in a table.", "Returns: The column definition ensures no NULL values."], "Examples": ["CREATE TABLE users (id INTEGER PRIMARY KEY, username TEXT NOT NULL); -- Ensures username cannot be NULL", "ALTER TABLE orders ADD COLUMN status TEXT NOT NULL DEFAULT 'pending'; -- Adds a new column with default non-NULL value"], "Category": ["Operators"]}
{"HTML": ["https://sqlite.org/lang_expr.html"], "Title": ["SQL Language Expressions"], "Feature": ["NOT"], "Description": ["The NOT operator negates a boolean expression. It returns the opposite boolean value of the expression.", "Parameters: A boolean expression.", "Returns: The opposite boolean value."], "Examples": ["SELECT * FROM users WHERE NOT (status = 'inactive'); -- Finds users whose status is not 'inactive'", "SELECT * FROM orders WHERE NOT EXISTS (SELECT 1 FROM canceled_orders WHERE orders.id = canceled_orders.id); -- Finds orders that are not canceled"], "Category": ["Operators"]}
{"HTML": ["https://sqlite.org/lang_expr.html"], "Title": ["SQL Language Expressions"], "Feature": ["AND"], "Description": ["The AND operator is used to combine two or more boolean expressions. It returns true if all expressions evaluate to true; otherwise, it returns false.", "Parameters: Two or more boolean expressions.", "Returns: True if all expressions are true; otherwise, false."], "Examples": ["SELECT * FROM orders WHERE status = 'shipped' AND order_date > '2024-01-01'; -- Finds orders that are shipped and placed after January 1, 2024", "SELECT * FROM employees WHERE department_id = 1 AND salary > 50000; -- Finds employees in department 1 with a salary above 50,000"], "Category": ["Operators"]}
{"HTML": ["https://sqlite.org/lang_expr.html"], "Title": ["SQL Language Expressions"], "Feature": ["OR"], "Description": ["The OR operator is used to combine two or more boolean expressions. It returns true if at least one of the expressions evaluates to true; otherwise, it returns false.", "Parameters: Two or more boolean expressions.", "Returns: True if at least one expression is true; otherwise, false."], "Examples": ["SELECT * FROM orders WHERE status = 'pending' OR status = 'shipped'; -- Finds orders that are either pending or shipped", "SELECT * FROM employees WHERE department_id = 1 OR department_id = 2; -- Finds employees in either department 1 or 2"], "Category": ["Operators"]}
{"HTML": ["https://sqlite.org/lang_expr.html"], "Title": ["SQL Language Expressions"], "Feature": ["*"], "Description": ["The multiplication operator (*) multiplies two numeric expressions. Non-numeric operands are cast to numeric types for the multiplication operation.", "Parameters: Two numeric expressions.", "Returns: The product of the two numeric expressions."], "Examples": ["SELECT 5 * 4 AS result; -- Returns 20", "SELECT price * quantity FROM orders; -- Calculates the total price by multiplying price and quantity"], "Category": ["Operators"]}
{"HTML": ["https://sqlite.org/lang_expr.html"], "Title": ["SQL Language Expressions"], "Feature": ["/"], "Description": ["The division operator (/) divides one numeric expression by another. If the divisor is zero, the result is NULL. Non-numeric operands are cast to numeric types before division.", "Parameters: Two numeric expressions.", "Returns: The quotient of the two numeric expressions."], "Examples": ["SELECT 20 / 4 AS result; -- Returns 5", "SELECT total_amount / number_of_items FROM orders; -- Calculates average amount per item"], "Category": ["Operators"]}
{"HTML": ["https://sqlite.org/lang_expr.html"], "Title": ["SQL Language Expressions"], "Feature": ["%"], "Description": ["The modulus operator (%) returns the remainder of the division of one numeric expression by another. Both operands are cast to numeric types before calculating the remainder.", "Parameters: Two numeric expressions.", "Returns: The remainder of the division of the first numeric expression by the second."], "Examples": ["SELECT 10 % 3 AS result; -- Returns 1", "SELECT quantity % 2 FROM orders; -- Finds if the quantity is odd or even"], "Category": ["Operators"]}
{"HTML": ["https://sqlite.org/lang_expr.html"], "Title": ["SQL Language Expressions"], "Feature": ["||"], "Description": ["The concatenation operator (||) combines two TEXT values into a single TEXT value. If either operand is not TEXT, it is cast to TEXT before concatenation.", "Parameters: Two TEXT expressions.", "Returns: The concatenated TEXT value."], "Examples": ["SELECT 'Hello ' || 'World' AS greeting; -- Returns 'Hello World'", "SELECT first_name || ' ' || last_name FROM employees; -- Concatenates first and last names"], "Category": ["Operators"]}
{"HTML": ["https://sqlite.org/lang_expr.html"], "Title": ["SQL Language Expressions"], "Feature": ["COLLATE"], "Description": ["The COLLATE operator specifies a collation sequence for the comparison of two TEXT expressions. The collation sequence determines how string values are compared and sorted.", "Parameters: A TEXT expression and a collation sequence name.", "Returns: The result of comparing the TEXT expression using the specified collation sequence."], "Examples": ["SELECT name FROM employees ORDER BY name COLLATE NOCASE; -- Orders names case-insensitively", "SELECT * FROM products WHERE product_name COLLATE RTRIM = 'Widget'; -- Compares product names with trimming"], "Category": ["Operators"]}
{"HTML": ["https://sqlite.org/lang_expr.html"], "Title": ["SQL Language Expressions"], "Feature": ["&"], "Description": ["The bitwise AND operator (&) performs a bitwise AND operation between two integer expressions. Non-integer operands are cast to INTEGER before the operation.", "Parameters: Two integer expressions.", "Returns: The result of the bitwise AND operation."], "Examples": ["SELECT 5 & 3 AS result; -- Returns 1 (binary 0101 & 0011 = 0001)", "SELECT access_level & 4 FROM users; -- Checks if the access_level includes a specific bit"], "Category": ["Operators"]}
{"HTML": ["https://sqlite.org/lang_expr.html"], "Title": ["SQL Language Expressions"], "Feature": ["|"], "Description": ["The bitwise OR operator (|) performs a bitwise OR operation between two integer expressions. Non-integer operands are cast to INTEGER before the operation.", "Parameters: Two integer expressions.", "Returns: The result of the bitwise OR operation."], "Examples": ["SELECT 5 | 3 AS result; -- Returns 7 (binary 0101 | 0011 = 0111)", "SELECT permissions | 2 FROM roles; -- Updates permissions with a specific bit"], "Category": ["Operators"]}
