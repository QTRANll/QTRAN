{"HTML": ["https://sqlite.org/lang_aggfunc.html#avg"], "Title": ["Built-in Aggregate Functions"], "Feature": ["avg(X)"], "Description": ["The avg() function\n  returns the average value of all non-NULLXwithin a\n  group.  String and BLOB values that do not look like numbers are\n  interpreted as 0.\n  The result of avg() is always a floating point value whenever\n  there is at least one non-NULL input even if all\n  inputs are integers.  The result of avg() is NULL if\n  there are no non-NULL inputs.  The result of avg() is computed\n  astotal()/count()so all of the constraints that apply tototal()also apply to avg()."], "Examples": [], "Category": ["Built-in Aggregate Functions"]}
{"HTML": ["https://sqlite.org/lang_datefunc.html"], "Title": ["Date And Time Functions"], "Feature": ["julianday(time-value, modifier, modifier, ...)"], "Description": ["The julianday(time-value, modifier, modifier, ...) function returns the Julian day number - the fractional number of days since noon in Greenwich on November 24, 4714 B.C. (Proleptic Gregorian calendar). It accepts a time-value and zero or more modifiers.", "Parameters: time-value (e.g., 'now', '2024-08-21'), modifiers (e.g., '+1 day').", "Returns: A real number representing the Julian day number."], "Examples": ["SELECT julianday(); -- Returns the current Julian day number.", "SELECT julianday('2024-08-21'); -- Returns the Julian day number for August 21, 2024.", "SELECT julianday('now', '+1 day'); -- Returns the Julian day number for one day after the current date."], "Category": ["Date And Time Functions"]}
{"HTML": ["https://sqlite.org/lang_datefunc.html"], "Title": ["Date And Time Functions"], "Feature": ["unixepoch(time-value, modifier, modifier, ...)"], "Description": ["The unixepoch(time-value, modifier, modifier, ...) function returns the Unix timestamp - the number of seconds since 1970-01-01 00:00:00 UTC. It accepts a time-value and zero or more modifiers.", "Parameters: time-value (e.g., 'now', '2024-08-21 14:16:00'), modifiers (e.g., '+1 hour', 'subsec').", "Returns: An integer or floating point number representing the Unix timestamp."], "Examples": ["SELECT unixepoch(); -- Returns the current Unix timestamp.", "SELECT unixepoch('2024-08-21 14:16:00'); -- Returns the Unix timestamp for August 21, 2024, 14:16:00.", "SELECT unixepoch('now', 'subsec'); -- Returns the Unix timestamp with millisecond precision."], "Category": ["Date And Time Functions"]}
{"HTML": ["https://sqlite.org/lang_datefunc.html"], "Title": ["Date And Time Functions"], "Feature": ["strftime(format, time-value, modifier, modifier, ...)"], "Description": ["The strftime(format, time-value, modifier, modifier, ...) function returns the date and time formatted according to the format string specified as the first argument. The function supports various format substitutions and accepts a time-value and zero or more modifiers.", "Parameters: format string (e.g., '%F %T'), time-value (e.g., 'now'), modifiers (e.g., '+1 hour').", "Returns: A string formatted according to the specified format string."], "Examples": ["SELECT strftime('%F'); -- Returns the current date formatted as YYYY-MM-DD.", "SELECT strftime('%T'); -- Returns the current time formatted as HH:MM:SS.", "SELECT strftime('%F %T', 'now', '+1 hour'); -- Returns the date and time one hour after the current time, formatted as YYYY-MM-DD HH:MM:SS."], "Category": ["Date And Time Functions"]}
{"HTML": ["https://sqlite.org/lang_datefunc.html"], "Title": ["Date And Time Functions"], "Feature": ["timediff(time-value, time-value)"], "Description": ["The timediff(A, B) function returns a string that describes the amount of time that must be added to B to reach time A. The result is formatted as a human-readable string (+|-)YYYY-MM-DD HH:MM:SS.SSS.", "Parameters: A (later time-value), B (earlier time-value).", "Returns: A string formatted as (+|-)YYYY-MM-DD HH:MM:SS.SSS."], "Examples": ["SELECT timediff('2024-08-21 15:00:00', '2024-08-21 14:00:00'); -- Returns '+0000-00-01 01:00:00.000'.", "SELECT timediff('2024-08-21', '2024-08-20'); -- Returns '+0000-01-00 00:00:00.000'."], "Category": ["Date And Time Functions"]}
{"HTML": ["https://sqlite.org/json1.html#jquote"], "Title": ["JSON Functions"], "Feature": ["json_quote(X)"], "Description": ["The json_quote(X) function converts the SQL value X, which can be a number or a string, into its corresponding JSON representation. If the input X is already a JSON value returned by another JSON function, then json_quote() has no effect and returns the JSON value as is."], "Examples": ["json_quote(3.14159) \u2192 3.14159", "json_quote('verdant') \u2192 '\"verdant\"'", "json_quote('[1]') \u2192 '\"[1]\"'", "json_quote(json('[1]')) \u2192 '[1]'", "json_quote('[1,') \u2192 '\"[1,\"'"], "Category": ["JSON Functions"]}
{"HTML": ["https://sqlite.org/json1.html#json_valid"], "Title": ["JSON Functions"], "Feature": ["json_valid(X, Y)"], "Description": ["The json_valid(X, Y) function checks if the argument X is well-formed JSON and returns 1 for valid JSON or 0 for invalid JSON. The Y parameter is an optional integer bitmask that defines the criteria for 'well-formed', with default value 1 implying strict adherence to RFC-8259 JSON standards without extensions. Various bitmask values allow for JSON5 extensions, JSONB superficial or strict conformity, and combinations thereof. Any Y value outside the range of 1 to 15 raises an error, and NULL inputs result in a NULL return."], "Examples": ["json_valid('{\"x\":35}') \u2192 1", "json_valid('{x:35}') \u2192 0", "json_valid('{x:35}', 6) \u2192 1", "json_valid('{\"x\":35', 1) \u2192 0", "json_valid(NULL) \u2192 NULL"], "Category": ["JSON Functions"]}
{"HTML": ["https://sqlite.org/json1.html#jtype"], "Title": ["JSON Functions"], "Feature": ["json_type(X), json_type(X, P)"], "Description": ["The json_type(X) function returns the type of the outermost element of the JSON or JSONB object X as an SQL text value, such as 'null', 'true', 'false', 'integer', 'real', 'text', 'array', or 'object'. The json_type(X, P) function extends this functionality to return the type of a specific element within X that is selected by the JSON path P. If the specified path P does not identify an existing element within X, the function returns NULL. An error is thrown if the input X is not well-formed JSON or JSONB, or if the path P is not a well-formed JSON path."], "Examples": ["json_type('{\"a\":[2,3.5,true,false,null,\"x\"]}') \u2192 'object'", "json_type('{\"a\":[2,3.5,true,false,null,\"x\"]}','$') \u2192 'object'", "json_type('{\"a\":[2,3.5,true,false,null,\"x\"]}','$.a') \u2192 'array'", "json_type('{\"a\":[2,3.5,true,false,null,\"x\"]}','$.a[0]') \u2192 'integer'", "json_type('{\"a\":[2,3.5,true,false,null,\"x\"]}','$.a[1]') \u2192 'real'", "json_type('{\"a\":[2,3.5,true,false,null,\"x\"]}','$.a[2]') \u2192 'true'", "json_type('{\"a\":[2,3.5,true,false,null,\"x\"]}','$.a[3]') \u2192 'false'", "json_type('{\"a\":[2,3.5,true,false,null,\"x\"]}','$.a[4]') \u2192 'null'", "json_type('{\"a\":[2,3.5,true,false,null,\"x\"]}','$.a[5]') \u2192 'text'", "json_type('{\"a\":[2,3.5,true,false,null,\"x\"]}','$.a[6]') \u2192 NULL"], "Category": ["JSON Functions"]}
{"HTML": ["https://sqlite.org/json1.html#jsetb"], "Title": ["JSON Functions"], "Feature": ["jsonb_insert()"], "Description": ["The jsonb_insert(), jsonb_replace(), and jsonb_set() functions operate similarly to their json_ counterparts, such as json_insert(), json_replace(), and json_set(), respectively. The key difference is that the jsonb_ prefixed versions of these functions return their results in the binary JSONB format, which can offer performance benefits for certain operations that involve JSON data in SQLite."], "Examples": [], "Category": ["JSON Functions"]}
{"HTML": ["https://sqlite.org/json1.html#jset"], "Title": ["JSON Functions"], "Feature": ["json_replace()"], "Description": ["The json_insert(), json_replace(), and json_set() functions are designed to modify a given JSON value by taking it as the first argument, followed by an odd number of path and value pairs. These functions differ in their behavior regarding the creation of new values and the overwriting of existing ones: json_insert() will create new values without overwriting existing ones, json_replace() will overwrite existing values but won't create new ones if the path doesn't exist, and json_set() will both overwrite existing values and create new ones if the path doesn't exist. All edits occur sequentially and can affect subsequent operations due to the prior changes in the JSON structure. If a value in a path/value pair is of TEXT type, it is normally inserted as a quoted JSON string unless it is the result of another JSON function or the -> operator, in which case it retains its JSON structure. These functions throw an error if the initial JSON or any PATH argument is malformed or if any argument is a BLOB."], "Examples": ["json_insert('[1,2,3,4]', '$[#]', 99) \u2192 '[1,2,3,4,99]'", "json_insert('[1,[2,3],4]', '$[1][#]', 99) \u2192 '[1,[2,3,99],4]'", "json_insert('{\"a\":2,\"c\":4}', '$.a', 99) \u2192 '{\"a\":2,\"c\":4}'", "json_insert('{\"a\":2,\"c\":4}', '$.e', 99) \u2192 '{\"a\":2,\"c\":4,\"e\":99}'", "json_replace('{\"a\":2,\"c\":4}', '$.a', 99) \u2192 '{\"a\":99,\"c\":4}'", "json_replace('{\"a\":2,\"c\":4}', '$.e', 99) \u2192 '{\"a\":2,\"c\":4}'", "json_set('{\"a\":2,\"c\":4}', '$.a', 99) \u2192 '{\"a\":99,\"c\":4}'", "json_set('{\"a\":2,\"c\":4}', '$.e', 99) \u2192 '{\"a\":2,\"c\":4,\"e\":99}'", "json_set('{\"a\":2,\"c\":4}', '$.c', '[97,96]') \u2192 '{\"a\":2,\"c\":\"[97,96]\"}'", "json_set('{\"a\":2,\"c\":4}', '$.c', json('[97,96]')) \u2192 '{\"a\":2,\"c\":[97,96]}", "json_set('{\"a\":2,\"c\":4}', '$.c', json_array(97,96)) \u2192 '{\"a\":2,\"c\":[97,96]}"], "Category": ["JSON Functions"]}
{"HTML": ["https://sqlite.org/json1.html#jreplb"], "Title": ["JSON Functions"], "Feature": ["jsonb_replace()"], "Description": ["The jsonb_insert(), jsonb_replace(), and jsonb_set() functions operate analogously to their json_ prefixed counterparts, namely json_insert(), json_replace(), and json_set(). These jsonb_ prefixed functions are designed to manipulate JSON data, allowing for insertion, replacement, and setting of values at specified paths within a JSON object. A key distinction, however, is that the jsonb_ versions return their results in the binary JSONB format, which can offer performance optimizations for operations involving JSON data in SQLite. This is particularly beneficial when dealing with a series of JSON data manipulations, as the binary format can reduce the overhead associated with parsing and converting JSON text."], "Examples": [], "Category": ["JSON Functions"]}
{"HTML": ["https://sqlite.org/lang_mathfunc.html#acos"], "Title": ["Built-In Mathematical SQL Functions"], "Feature": ["acos(X)"], "Description": ["Return the arccosine of X.  The result is in radians."], "Examples": [], "Category": ["Built-In Mathematical SQL Functions"]}
{"HTML": ["https://sqlite.org/json1.html#jrepl"], "Title": ["JSON Functions"], "Feature": ["json_set()"], "Description": ["The json_insert(), json_replace(), and json_set() functions are used to modify JSON data. They take a JSON value as the first argument, followed by path/value pairs that determine the modifications to be made to the JSON structure. The primary difference between the functions lies in their behavior regarding existing and new values: json_insert() will create new values without overwriting existing ones, json_replace() will overwrite existing values but will not create new ones, and json_set() will both overwrite existing values and create new ones if necessary. The functions process edits from left to right, with each edit potentially affecting the outcome of subsequent ones. If a path/value pair's value is a TEXT type, it is treated as a quoted JSON string unless it is derived from another JSON function or operator, in which case it retains its JSON structure. An error is thrown for malformed JSON or PATH arguments or if any argument is a BLOB."], "Examples": ["json_insert('[1,2,3,4]', '$[#]', 99) returns '[1,2,3,4,99]'", "json_insert('[1,[2,3],4]', '$[1][#]', 99) returns '[1,[2,3,99],4]'", "json_insert('{\"a\":2,\"c\":4}', '$.a', 99) does not modify the original JSON", "json_insert('{\"a\":2,\"c\":4}', '$.e', 99) returns '{\"a\":2,\"c\":4,\"e\":99}'", "json_replace('{\"a\":2,\"c\":4}', '$.a', 99) returns '{\"a\":99,\"c\":4}'", "json_replace('{\"a\":2,\"c\":4}', '$.e', 99) does not modify the original JSON", "json_set('{\"a\":2,\"c\":4}', '$.a', 99) returns '{\"a\":99,\"c\":4}'", "json_set('{\"a\":2,\"c\":4}', '$.e', 99) returns '{\"a\":2,\"c\":4,\"e\":99}'", "json_set('{\"a\":2,\"c\":4}', '$.c', '[97,96]') returns '{\"a\":2,\"c\":\"[97,96]\"}'", "json_set('{\"a\":2,\"c\":4}', '$.c', json('[97,96]')) returns '{\"a\":2,\"c\":[97,96]}'", "json_set('{\"a\":2,\"c\":4}', '$.c', json_array(97,96)) returns '{\"a\":2,\"c\":[97,96]}'"], "Category": ["JSON Functions"]}
{"HTML": ["https://sqlite.org/json1.html#jmini"], "Title": ["JSON Functions"], "Feature": ["json(X)"], "Description": ["The json(X) function checks if the provided argument X is a valid JSON string or JSONB blob. If valid, it returns a minified version of the JSON string, removing all unnecessary whitespace. In cases where the input X is not well-formed, the function throws an error. The function also ensures that any JSON5 text is converted into the canonical RFC-8259 format before being returned. It is important to note that the handling of JSON objects with duplicate labels within the argument X is currently such that duplicates are preserved; however, this behavior might change in future updates of the function, possibly with silent removal of duplicates."], "Examples": ["json(' { \"this\" : \"is\", \"a\": [ \"test\" ] } ') returns '{\"this\":\"is\",\"a\":[\"test\"]}'"], "Category": ["JSON Functions"]}
{"HTML": ["https://sqlite.org/json1.html#jminib"], "Title": ["JSON Functions"], "Feature": ["jsonb(X)"], "Description": ["The jsonb(X) function is designed to return the binary JSONB representation of the JSON content provided in argument X. If the argument X is a TEXT string that does not adhere to valid JSON syntax, the function will raise an error. In cases where X is a BLOB that resembles JSONB, the function will return a copy of X, but it is important to note that only the outer-most element is examined, and the internal structure of the JSONB is not thoroughly validated."], "Examples": [], "Category": ["JSON Functions"]}
{"HTML": ["https://sqlite.org/json1.html#jarray"], "Title": ["JSON Functions"], "Feature": ["json_array()"], "Description": ["The json_array() SQL function is designed to construct a JSON array from zero or more arguments provided to it. It returns a well-formed JSON array without any BLOB arguments, as a BLOB argument would result in an error. If an argument is of SQL TEXT type, it is conventionally converted into a quoted JSON string, unless it is the result from another json1 function, in which case it is treated as JSON, allowing for nested calls to json_array() and json_object(). The json() function can be utilized to explicitly instruct the interpretation of strings as JSON objects or arrays."], "Examples": ["json_array(1,2,'3',4) returns '[1,2,\"3\",4]'", "json_array('[1,2]') returns '[\"[1,2]\"]'", "json_array(json_array(1,2)) returns '[[1,2]]'", "json_array(1,null,'3','[4,5]','{\"six\":7.7}') returns '[1,null,\"3\",\"[4,5]\",\"{\\\"six\\\":7.7}\"]'", "json_array(1,null,'3',json('[4,5]'),json('{\"six\":7.7}')) returns '[1,null,\"3\",[4,5],{\"six\":7.7}]"], "Category": ["JSON Functions"]}
{"HTML": ["https://sqlite.org/json1.html#jarrayb"], "Title": ["JSON Functions"], "Feature": ["jsonb_array()"], "Description": ["The jsonb_array() SQL function operates similarly to the json_array() function, with a key distinction in the output format. While json_array() produces a JSON array in the standard RFC 8259 text format, jsonb_array() returns the constructed JSON array in SQLite's private binary JSONB format. This binary format can offer performance advantages for certain operations involving JSON data within SQLite."], "Examples": [], "Category": ["JSON Functions"]}
{"HTML": ["https://sqlite.org/json1.html#jarraylen"], "Title": ["JSON Functions"], "Feature": ["json_array_length(X), json_array_length(X,P)"], "Description": ["The json_array_length() function is used to determine the count of elements present in a JSON array. When provided with a single argument X, which is expected to be a JSON array, the function returns the number of elements in that array, or returns 0 if X is not an array type. If the function is called with two arguments, json_array_length(X,P), it will look for an array at the JSON path P within the JSON object X, and return the length of that specific array. If the path P does not correspond to an array, the function returns 0, and if the path does not exist within X, the function returns NULL. An error is raised if the input X is not valid JSON or if the path P is not correctly formed."], "Examples": ["json_array_length('[1,2,3,4]') returns 4", "json_array_length('[1,2,3,4]', '$') returns 4", "json_array_length('[1,2,3,4]', '$[2]') returns 0", "json_array_length('{\"one\":[1,2,3]}') returns 0", "json_array_length('{\"one\":[1,2,3]}', '$.one') returns 3", "json_array_length('{\"one\":[1,2,3]}', '$.two') returns NULL"], "Category": ["JSON Functions"]}
{"HTML": ["https://sqlite.org/json1.html#jerr"], "Title": ["JSON Functions"], "Feature": ["json_error_position(X)"], "Description": ["The json_error_position(X) function is designed to identify syntax errors in JSON or JSON5 strings. It returns 0 if the input X is a well-formed JSON or JSON5 string, indicating no syntax errors are present. Conversely, if the input X contains syntax errors, the function returns the 1-based character position of the first syntax error encountered. For BLOB inputs, the function operates similarly, returning 0 for a well-formed JSONB blob and a positive value representing the approximate 1-based position of the first error if one exists. This function was introduced in SQLite version 3.42.0 (2023-05-16)."], "Examples": [], "Category": ["JSON Functions"]}
{"HTML": ["https://sqlite.org/json1.html#jex"], "Title": ["JSON Functions"], "Feature": ["json_extract(X,P1,P2,...)"], "Description": ["The json_extract() function in SQLite is used to extract values from a well-formed JSON string at X. Depending on the number of path arguments provided, the function operates in two modes: If a single path argument P1 is given, the function returns the value at that path in its corresponding SQL datatype. This can be SQL NULL for JSON null, INTEGER or REAL for numeric values, INTEGER zero for JSON false, INTEGER one for JSON true, dequoted text for JSON strings, and text representation for JSON objects and arrays. When multiple path arguments are provided, the function returns a well-formed JSON array containing the extracted values. It's important to note that SQLite's json_extract() differs from MySQL's in terms of the datatype returned when accessing individual string or NULL values within the JSON. SQLite returns the actual SQL datatype, whereas MySQL always returns JSON."], "Examples": ["json_extract('{\"a\":2,\"c\":[4,5,{\"f\":7}]}', '$') returns '{\"a\":2,\"c\":[4,5,{\"f\":7}]}'", "json_extract('{\"a\":2,\"c\":[4,5,{\"f\":7}]}', '$.c') returns '[4,5,{\"f\":7}]'", "json_extract('{\"a\":2,\"c\":[4,5,{\"f\":7}]}', '$.c[2]') returns '{\"f\":7}'", "json_extract('{\"a\":2,\"c\":[4,5,{\"f\":7}]}', '$.c[2].f') returns 7", "json_extract('{\"a\":2,\"c\":[4,5],\"f\":7}','$.c','$.a') returns '[[4,5],2]'", "json_extract('{\"a\":2,\"c\":[4,5],\"f\":7}','$.c[#-1]') returns 5", "json_extract('{\"a\":2,\"c\":[4,5,{\"f\":7}]}', '$.x') returns NULL", "json_extract('{\"a\":2,\"c\":[4,5,{\"f\":7}]}', '$.x', '$.a') returns '[null,2]'", "json_extract('{\"a\":\"xyz\"}', '$.a') returns 'xyz'", "json_extract('{\"a\":null}', '$.a') returns NULL"], "Category": ["JSON Functions"]}
{"HTML": ["https://sqlite.org/json1.html#jexb"], "Title": ["JSON Functions"], "Feature": ["jsonb_extract(X,P1,P2,...)"], "Description": ["The jsonb_extract() function operates in a similar manner to the json_extract() function with a distinct behavior when it comes to returning array objects. While json_extract() would return a text JSON array object, jsonb_extract() returns the array or object in the binary JSONB format, which can be beneficial for performance in certain scenarios involving JSON data manipulation in SQLite. For cases where the JSON element being returned is of a text, numeric, null, or boolean type, jsonb_extract() functions identically to json_extract()."], "Examples": [], "Category": ["JSON Functions"]}
{"HTML": ["https://sqlite.org/json1.html#jins"], "Title": ["JSON Functions"], "Feature": ["json_insert()"], "Description": ["The json_insert(), json_replace(), and json_set() functions are designed to modify JSON content. They accept a JSON value as the first argument, followed by an odd number of path/value pairs that specify the modifications. json_insert() adds new values without overwriting existing ones, json_replace() overwrites existing values but does not create new ones, and json_set() both overwrites and creates new values as needed. These functions process edits from left to right, and the first argument must be a well-formed JSON. If a path/value pair's value is a TEXT type, it is treated as a quoted JSON string unless it is the result of another JSON function or the -> operator, in which case it is treated as JSON. The ->> operator is always treated as TEXT. An error is thrown for malformed JSON or PATH arguments or if any argument is a BLOB. To append to an array, json_insert() can be used with the '$[#]' index."], "Examples": ["json_insert('[1,2,3,4]', '$[#]', 99) returns '[1,2,3,4,99]'", "json_insert('[1,[2,3],4]', '$[1][#]', 99) returns '[1,[2,3,99],4]'", "json_insert('{\"a\":2,\"c\":4}', '$.a', 99) does not modify the original JSON", "json_insert('{\"a\":2,\"c\":4}', '$.e', 99) returns '{\"a\":2,\"c\":4,\"e\":99}'", "json_replace('{\"a\":2,\"c\":4}', '$.a', 99) returns '{\"a\":99,\"c\":4}'", "json_replace('{\"a\":2,\"c\":4}', '$.e', 99) does not modify the original JSON", "json_set('{\"a\":2,\"c\":4}', '$.a', 99) returns '{\"a\":99,\"c\":4}'", "json_set('{\"a\":2,\"c\":4}', '$.e', 99) returns '{\"a\":2,\"c\":4,\"e\":99}'", "json_set('{\"a\":2,\"c\":4}', '$.c', '[97,96]') returns '{\"a\":2,\"c\":\"[97,96]\"}'", "json_set('{\"a\":2,\"c\":4}', '$.c', json('[97,96]')) returns '{\"a\":2,\"c\":[97,96]}'", "json_set('{\"a\":2,\"c\":4}', '$.c', json_array(97,96)) returns '{\"a\":2,\"c\":[97,96]}"], "Category": ["JSON Functions"]}
{"HTML": ["https://sqlite.org/lang_mathfunc.html#acosh"], "Title": ["Built-In Mathematical SQL Functions"], "Feature": ["acosh(X)"], "Description": ["Return the hyperbolic arccosine of X."], "Examples": [], "Category": ["Built-In Mathematical SQL Functions"]}
{"HTML": ["https://sqlite.org/json1.html#jinsb"], "Title": ["JSON Functions"], "Feature": ["jsonb_set()"], "Description": ["The jsonb_insert(), jsonb_replace(), and jsonb_set() functions operate in a manner analogous to their json_ counterparts, specifically json_insert(), json_replace(), and json_set(). These binary JSONB format functions are designed to perform the same JSON value modifications as their text-based counterparts, with the key distinction that they return the results in the binary JSONB format. This can be advantageous for performance and efficiency when working with JSON data in SQLite, as the binary format reduces the overhead associated with parsing and handling JSON text."], "Examples": [], "Category": ["JSON Functions"]}
{"HTML": ["https://sqlite.org/json1.html#jobj"], "Title": ["JSON Functions"], "Feature": ["json_object()"], "Description": ["The json_object() SQL function constructs a JSON object from pairs of label and value arguments. It accepts zero or more such pairs, with the label as the first argument of each pair and the value as the second. If any argument provided to json_object() is a BLOB, an error is thrown. Currently, the function allows duplicate labels without issue, but this behavior may change in future updates. By default, an SQL type TEXT argument is converted into a quoted JSON string, unless it is the direct result from another JSON function or the -> operator, in which case its JSON type information and substructure are preserved, enabling nested calls to json_object() and json_array(). The json() function can be used to explicitly force recognition of strings as JSON."], "Examples": ["json_object('a', 2, 'c', 4) returns '{\"a\":2,\"c\":4}'", "json_object('a', 2, 'c', '{e:5}') returns '{\"a\":2,\"c\":\"{e:5}\"}'", "json_object('a', 2, 'c', json_object('e', 5)) returns '{\"a\":2,\"c\":{\"e\":5}}'"], "Category": ["JSON Functions"]}
{"HTML": ["https://sqlite.org/json1.html#jobjb"], "Title": ["JSON Functions"], "Feature": ["jsonb_object()"], "Description": ["The jsonb_object() function is analogous to the json_object() function, with a key difference in the format of the output. While json_object() constructs and returns a JSON object in the standard text format, jsonb_object() generates the object in the binary JSONB format. This binary format can offer performance benefits for certain operations involving JSON data in SQLite, as it may reduce parsing time and improve data handling efficiency within the database."], "Examples": [], "Category": ["JSON Functions"]}
{"HTML": ["https://sqlite.org/json1.html#jpatch"], "Title": ["JSON Functions"], "Feature": ["json_patch(T, P)"], "Description": ["The json_patch() SQL function implements the RFC-7396 MergePatch algorithm to apply a patch P to an input JSON object T. It returns a patched copy of T. The MergePatch algorithm can add, modify, or delete elements within a JSON object, making json_patch() a versatile tool for updating JSON data. However, it treats JSON arrays as immutable, meaning it cannot modify elements within an array but only replace the entire array. This function is particularly useful for generalizing replacements and removals within JSON objects but has limitations when dealing with arrays."], "Examples": ["json_patch('{\"a\":1,\"b\":2}', '{\"c\":3,\"d\":4}') returns '{\"a\":1,\"b\":2,\"c\":3,\"d\":4}'", "json_patch('{\"a\":[1,2],\"b\":2}', '{\"a\":9}') returns '{\"a\":9,\"b\":2}'", "json_patch('{\"a\":[1,2],\"b\":2}', '{\"a\":null}') returns '{\"b\":2}'", "json_patch('{\"a\":1,\"b\":2}', '{\"a\":9,\"b\":null,\"c\":8}') returns '{\"a\":9,\"c\":8}'", "json_patch('{\"a\":{\"x\":1,\"y\":2},\"b\":3}', '{\"a\":{\"y\":9},\"c\":8}') returns '{\"a\":{\"x\":1,\"y\":9},\"b\":3,\"c\":8}'"], "Category": ["JSON Functions"]}
{"HTML": ["https://sqlite.org/json1.html#jpatchb"], "Title": ["JSON Functions"], "Feature": ["jsonb_patch(T, P)"], "Description": ["The jsonb_patch() function operates similarly to the json_patch() function, with a primary distinction in the format of the output. It implements the RFC-7396 MergePatch algorithm to apply a patch P to an input JSON object T. However, unlike json_patch(), which returns the patched JSON in text format, jsonb_patch() returns the patched JSON in the binary JSONB format. This binary format can offer performance improvements for applications that require efficient handling of JSON data within SQLite."], "Examples": [], "Category": ["JSON Functions"]}
{"HTML": ["https://sqlite.org/json1.html#jrm"], "Title": ["JSON Functions"], "Feature": ["json_remove(X, P, ...)"], "Description": ["The json_remove() function is designed to remove elements from a JSON object or array. It accepts a JSON value as the first argument and is followed by zero or more path arguments that identify the elements to be removed. The function returns a copy of the original JSON value with the specified elements removed. If a path does not match any element, it is ignored without error. The removal process is sequential and can affect subsequent path searches due to changes made by earlier removals. If called without path arguments, json_remove() returns the input JSON reformatted with excess whitespace removed. The function will throw an error if the initial argument is not well-formed JSON or if any path argument is not a well-formed path."], "Examples": ["json_remove('[0,1,2,3,4]', '$[2]') returns '[0,1,3,4]'", "json_remove('[0,1,2,3,4]', '$[2]', '$[0]') returns '[1,3,4]'", "json_remove('[0,1,2,3,4]', '$[0]', '$[2]') returns '[1,2,4]'", "json_remove('[0,1,2,3,4]', '$[#-1]', '$[0]') returns '[1,2,3]'", "json_remove('{\"x\":25,\"y\":42}') returns '{\"x\":25,\"y\":42}'", "json_remove('{\"x\":25,\"y\":42}', '$.z') returns '{\"x\":25,\"y\":42}'", "json_remove('{\"x\":25,\"y\":42}', '$.y') returns '{\"x\":25}'", "json_remove('{\"x\":25,\"y\":42}', '$') returns NULL"], "Category": ["JSON Functions"]}
{"HTML": ["https://sqlite.org/json1.html#jrmb"], "Title": ["JSON Functions"], "Feature": ["jsonb_remove(X, P, ...)"], "Description": ["The jsonb_remove() function operates in a similar fashion to the json_remove() function, with a key difference in the format of the returned result. It takes a JSON value as its first argument, followed by one or more path arguments that specify which elements to remove from the JSON. The function returns a copy of the JSON with the specified elements removed, in the binary JSONB format. If a path does not match any element, it is ignored without error. The removal process is sequential and can affect the outcome of subsequent path arguments. If called without path arguments, jsonb_remove() returns the input JSON reformatted with excess whitespace removed. The function will throw an error if the initial argument is not well-formed JSON or if any path argument is not a well-formed path."], "Examples": [], "Category": ["JSON Functions"]}
{"HTML": ["https://sqlite.org/json1.html#jvalid"], "Title": ["JSON Functions"], "Feature": ["json_valid(X, Y)"], "Description": ["The json_valid() function checks if the input X is a well-formed JSON string or BLOB. It returns 1 if X is well-formed according to the bitmask specified by Y, or 0 if it is not. The Y parameter is an optional integer bitmask that defines the criteria for 'well-formed', with a default value of 1, which corresponds to strict compliance with canonical RFC-8259 JSON without extensions. The bitmask allows for various combinations to define what constitutes well-formed JSON, including support for JSON5 extensions and JSONB format. If either X or Y is NULL, the function returns NULL. The function is designed to be compatible with older versions of SQLite and can be enhanced in future versions to accept new flag values."], "Examples": ["json_valid('{\"x\":35}') returns 1", "json_valid('{x:35}') returns 0", "json_valid('{x:35}', 6) returns 1", "json_valid('{\"x\":35') returns 0", "json_valid(NULL) returns NULL"], "Category": ["JSON Functions"]}
{"HTML": ["https://sqlite.org/json1.html#jvalid"], "Title": ["JSON Functions"], "Feature": ["json_group_array(X)"], "Description": ["The json_group_array(X) function is an aggregate SQL function that returns a JSON array comprised of all X values in the aggregation. Similarly, the json_group_object(NAME,VALUE) function returns a JSON object comprised of all NAME/VALUE pairs in the aggregation. The \"jsonb_\" variants are the same except that they return their result in the binary JSONB format."], "Examples": [], "Category": ["JSON Functions"]}
{"HTML": ["https://sqlite.org/json1.html#jeach"], "Title": ["JSON Functions"], "Feature": ["json_each(X, P), json_tree(X, P)"], "Description": ["The json_each(X) and json_tree(X) functions are table-valued functions that traverse JSON values. json_each(X) returns rows for each immediate child of the top-level array or object, or the top-level element for primitive values. json_tree(X) recursively explores the entire JSON structure. Both functions can take a second argument P, treating the element at path P as the top-level element. The returned table schema includes columns for key, value, type, atom, id, parent, fullkey, path, and hidden columns for the raw JSON and root path, offering a detailed breakdown of JSON elements.", "The json_each() function returns a table with columns: key, value, type, atom, id, parent, fullkey, path, json, and root.", "The json_tree() function returns a similar table but includes parent ids and represents the full JSON structure."], "Examples": ["To find users with a '704' area code phone number: SELECT DISTINCT user.name FROM user, json_each(user.phone) WHERE json_each.value LIKE '704-%';", "To decompose all data line-by-line and suppress containers: SELECT big.rowid, fullkey, value FROM big, json_tree(big.json) WHERE json_tree.type NOT IN ('object', 'array');", "To find an entry with a specific uuid in a nested 'partlist': SELECT DISTINCT json_extract(big.json, '$.id') FROM big, json_tree(big.json, '$.partlist') WHERE json_tree.key='uuid' AND json_tree.value='6fa5181e-5721-11e5-a04e-57f3d7b32808';"], "Category": ["JSON Functions"]}
{"HTML": ["https://sqlite.org/lang_mathfunc.html#asin"], "Title": ["Built-In Mathematical SQL Functions"], "Feature": ["asin(X)"], "Description": ["Return the arcsine of X.  The result is in radians."], "Examples": [], "Category": ["Built-In Mathematical SQL Functions"]}
{"HTML": ["https://sqlite.org/windowfunctions.html"], "Title": ["Built-In Window Function"], "Feature": ["row_number()"], "Description": ["The number of the row within the current partition, starting from 1 in the order defined by the ORDER BY clause in the window definition, or in arbitrary order otherwise."], "Examples": [], "Category": ["Built-In Window Functions"]}
{"HTML": ["https://sqlite.org/windowfunctions.html"], "Title": ["Built-In Window Function"], "Feature": ["rank()"], "Description": ["The row_number of the first peer in each group - the rank of the current row with gaps. If there is no ORDER BY clause, then all rows are considered peers and this function always returns 1."], "Examples": [], "Category": ["Built-In Window Functions"]}
{"HTML": ["https://sqlite.org/windowfunctions.html"], "Title": ["Built-In Window Function"], "Feature": ["dense_rank()"], "Description": ["The number of the current row's peer group within its partition - the rank of the current row without gaps. If there is no ORDER BY clause, then all rows are considered peers and this function always returns 1."], "Examples": [], "Category": ["Built-In Window Functions"]}
{"HTML": ["https://sqlite.org/windowfunctions.html"], "Title": ["Built-In Window Function"], "Feature": ["percent_rank()"], "Description": ["Despite the name, this function always returns a value between 0.0 and 1.0 equal to (rank - 1)/(partition-rows - 1), where rank is the value returned by built-in window function rank() and partition-rows is the total number of rows in the partition. If the partition contains only one row, this function returns 0.0."], "Examples": [], "Category": ["Built-In Window Functions"]}
{"HTML": ["https://sqlite.org/windowfunctions.html"], "Title": ["Built-In Window Function"], "Feature": ["cume_dist()"], "Description": ["The cumulative distribution, calculated as row-number/partition-rows, where row-number is the value returned by row_number for the last peer in the group and partition-rows is the number of rows in the partition."], "Examples": [], "Category": ["Built-In Window Functions"]}
{"HTML": ["https://sqlite.org/windowfunctions.html"], "Title": ["Built-In Window Function"], "Feature": ["ntile(N)"], "Description": ["Argument N is handled as an integer. This function divides the partition into N groups as evenly as possible and assigns an integer between 1 and N to each group, in the order defined by the ORDER BY clause, or in arbitrary order otherwise. If necessary, larger groups occur first. This function returns the integer value assigned to the group that the current row is a part of."], "Examples": [], "Category": ["Built-In Window Functions"]}
{"HTML": ["https://sqlite.org/windowfunctions.html"], "Title": ["Built-In Window Function"], "Feature": ["lag(expr)\nlag(expr, offset)\nlag(expr, offset, default)"], "Description": ["The first form of the lag() function returns the result of evaluating expression expr against the previous row in the partition. Or, if there is no previous row (because the current row is the first), NULL.", "If the offset argument is provided, then it must be a non-negative integer. In this case the value returned is the result of evaluating expr against the row offset rows before the current row within the partition. If offset is 0, then expr is evaluated against the current row. If there is no row offset rows before the current row, NULL is returned.", "If default is also provided, then it is returned instead of NULL if the row identified by offset does not exist."], "Examples": [], "Category": ["Built-In Window Functions"]}
{"HTML": ["https://sqlite.org/windowfunctions.html"], "Title": ["Built-In Window Function"], "Feature": ["lead(expr)\nlead(expr, offset)\nlead(expr, offset, default)"], "Description": ["The first form of the lead() function returns the result of evaluating expression expr against the next row in the partition. Or, if there is no next row (because the current row is the last), NULL.", "If the offset argument is provided, then it must be a non-negative integer. In this case the value returned is the result of evaluating expr against the row offset rows after the current row within the partition. If offset is 0, then expr is evaluated against the current row. If there is no row offset rows after the current row, NULL is returned.", "If default is also provided, then it is returned instead of NULL if the row identified by offset does not exist."], "Examples": [], "Category": ["Built-In Window Functions"]}
{"HTML": ["https://sqlite.org/windowfunctions.html"], "Title": ["Built-In Window Function"], "Feature": ["first_value(expr)"], "Description": ["This function returns the value of the expression evaluated against the first row in the window frame for each row."], "Examples": [], "Category": ["Built-In Window Functions"]}
{"HTML": ["https://sqlite.org/windowfunctions.html"], "Title": ["Built-In Window Function"], "Feature": ["last_value(expr)"], "Description": ["This function returns the value of the expression evaluated against the last row in the window frame for each row."], "Examples": [], "Category": ["Built-In Window Functions"]}
{"HTML": ["https://sqlite.org/lang_mathfunc.html#asinh"], "Title": ["Built-In Mathematical SQL Functions"], "Feature": ["asinh(X)"], "Description": ["Return the hyperbolic arcsine of X."], "Examples": [], "Category": ["Built-In Mathematical SQL Functions"]}
{"HTML": ["https://sqlite.org/windowfunctions.html"], "Title": ["Built-In Window Function"], "Feature": ["nth_value(expr, N)"], "Description": ["This function returns the value of the expression evaluated against the Nth row in the window frame. If there is no Nth row in the partition, then NULL is returned."], "Examples": [], "Category": ["Built-In Window Functions"]}
{"HTML": ["https://sqlite.org/lang_mathfunc.html#atan"], "Title": ["Built-In Mathematical SQL Functions"], "Feature": ["atan(X)"], "Description": ["Return the arctangent of X.  The result is in radians."], "Examples": [], "Category": ["Built-In Mathematical SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_mathfunc.html#atan2"], "Title": ["Built-In Mathematical SQL Functions"], "Feature": ["atan2(Y,X)"], "Description": ["Return the arctangent of Y/X.  The result is in radians.  The\n  result is placed into correct quadrant depending on the signs\n  of X and Y."], "Examples": [], "Category": ["Built-In Mathematical SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_mathfunc.html#atanh"], "Title": ["Built-In Mathematical SQL Functions"], "Feature": ["atanh(X)"], "Description": ["Return the hyperbolic arctangent of X."], "Examples": [], "Category": ["Built-In Mathematical SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_mathfunc.html#ceil"], "Title": ["Built-In Mathematical SQL Functions"], "Feature": ["ceil(X)"], "Description": ["Return the first representable integer value greater than or equal to X.\n  For positive values of X, this routine rounds away from zero.\n  For negative values of X, this routine rounds toward zero."], "Examples": [], "Category": ["Built-In Mathematical SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_mathfunc.html#ceil"], "Title": ["Built-In Mathematical SQL Functions"], "Feature": ["ceiling(X)"], "Description": ["Return the first representable integer value greater than or equal to X.\n  For positive values of X, this routine rounds away from zero.\n  For negative values of X, this routine rounds toward zero."], "Examples": [], "Category": ["Built-In Mathematical SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_mathfunc.html#cos"], "Title": ["Built-In Mathematical SQL Functions"], "Feature": ["cos(X)"], "Description": ["Return the cosine of X.  X is in radians."], "Examples": [], "Category": ["Built-In Mathematical SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_aggfunc.html#count"], "Title": ["Built-in Aggregate Functions"], "Feature": ["count(*)"], "Description": ["The count(X) function returns\n  a count of the number of times\n  thatXis not NULL in a group.  The count(*) function\n  (with no arguments) returns the total number of rows in the group."], "Examples": [], "Category": ["Built-in Aggregate Functions"]}
{"HTML": ["https://sqlite.org/lang_mathfunc.html#cosh"], "Title": ["Built-In Mathematical SQL Functions"], "Feature": ["cosh(X)"], "Description": ["Return the hyperbolic cosine of X."], "Examples": [], "Category": ["Built-In Mathematical SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_mathfunc.html#degrees"], "Title": ["Built-In Mathematical SQL Functions"], "Feature": ["degrees(X)"], "Description": ["Convert value X from radians into degrees."], "Examples": [], "Category": ["Built-In Mathematical SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_mathfunc.html#exp"], "Title": ["Built-In Mathematical SQL Functions"], "Feature": ["exp(X)"], "Description": ["Computee(Euler's number, approximately 2.71828182845905) raised\n  to the power X."], "Examples": [], "Category": ["Built-In Mathematical SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_mathfunc.html#floor"], "Title": ["Built-In Mathematical SQL Functions"], "Feature": ["floor(X)"], "Description": ["Return the first representable integer value less than or equal to X.\n  For positive numbers, this function rounds toward zero.\n  For negative numbers, this function rounds away from zero."], "Examples": [], "Category": ["Built-In Mathematical SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_mathfunc.html#ln"], "Title": ["Built-In Mathematical SQL Functions"], "Feature": ["ln(X)"], "Description": ["Return the natural logarithm of X."], "Examples": [], "Category": ["Built-In Mathematical SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_mathfunc.html#log"], "Title": ["Built-In Mathematical SQL Functions"], "Feature": ["log(B,X)"], "Description": ["Return the base-10 logarithm for X.  Or, for the two-argument version,\n  return the base-B logarithm of X.Compatibility note:  SQLite works like PostgreSQL in that the log() function\n  computes a base-10 logarithm.  Most other SQL database engines compute a\n  natural logarithm for log().  In the two-argument version of log(B,X), the\n  first argument is the base and the second argument is the operand.  This is\n  the same as in PostgreSQL and MySQL, but is reversed from SQL Server which\n  uses the second argument as the base and the first argument as the operand."], "Examples": [], "Category": ["Built-In Mathematical SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_mathfunc.html#log"], "Title": ["Built-In Mathematical SQL Functions"], "Feature": ["log(X)"], "Description": ["Return the base-10 logarithm for X.  Or, for the two-argument version,\n  return the base-B logarithm of X.Compatibility note:  SQLite works like PostgreSQL in that the log() function\n  computes a base-10 logarithm.  Most other SQL database engines compute a\n  natural logarithm for log().  In the two-argument version of log(B,X), the\n  first argument is the base and the second argument is the operand.  This is\n  the same as in PostgreSQL and MySQL, but is reversed from SQL Server which\n  uses the second argument as the base and the first argument as the operand."], "Examples": [], "Category": ["Built-In Mathematical SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_mathfunc.html#log"], "Title": ["Built-In Mathematical SQL Functions"], "Feature": ["log10(X)"], "Description": ["Return the base-10 logarithm for X.  Or, for the two-argument version,\n  return the base-B logarithm of X.Compatibility note:  SQLite works like PostgreSQL in that the log() function\n  computes a base-10 logarithm.  Most other SQL database engines compute a\n  natural logarithm for log().  In the two-argument version of log(B,X), the\n  first argument is the base and the second argument is the operand.  This is\n  the same as in PostgreSQL and MySQL, but is reversed from SQL Server which\n  uses the second argument as the base and the first argument as the operand."], "Examples": [], "Category": ["Built-In Mathematical SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_mathfunc.html#log2"], "Title": ["Built-In Mathematical SQL Functions"], "Feature": ["log2(X)"], "Description": ["Return the logarithm base-2 for the number X."], "Examples": [], "Category": ["Built-In Mathematical SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_mathfunc.html#mod"], "Title": ["Built-In Mathematical SQL Functions"], "Feature": ["mod(X,Y)"], "Description": ["Return the remainder after dividing X by Y.  This is similar to the '%'\n  operator, except that it works for non-integer arguments."], "Examples": [], "Category": ["Built-In Mathematical SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_aggfunc.html#count"], "Title": ["Built-in Aggregate Functions"], "Feature": ["count(X)"], "Description": ["The count(X) function returns\n  a count of the number of times\n  thatXis not NULL in a group.  The count(*) function\n  (with no arguments) returns the total number of rows in the group."], "Examples": [], "Category": ["Built-in Aggregate Functions"]}
{"HTML": ["https://sqlite.org/lang_mathfunc.html#pi"], "Title": ["Built-In Mathematical SQL Functions"], "Feature": ["pi()"], "Description": ["Return an approximation for \u03c0."], "Examples": [], "Category": ["Built-In Mathematical SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_mathfunc.html#pow"], "Title": ["Built-In Mathematical SQL Functions"], "Feature": ["pow(X,Y)"], "Description": ["Compute X raised to the power Y."], "Examples": [], "Category": ["Built-In Mathematical SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_mathfunc.html#pow"], "Title": ["Built-In Mathematical SQL Functions"], "Feature": ["power(X,Y)"], "Description": ["Compute X raised to the power Y."], "Examples": [], "Category": ["Built-In Mathematical SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_mathfunc.html#radians"], "Title": ["Built-In Mathematical SQL Functions"], "Feature": ["radians(X)"], "Description": ["Convert X from degrees into radians."], "Examples": [], "Category": ["Built-In Mathematical SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_mathfunc.html#sin"], "Title": ["Built-In Mathematical SQL Functions"], "Feature": ["sin(X)"], "Description": ["Return the sine of X.  X is in radians."], "Examples": [], "Category": ["Built-In Mathematical SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_mathfunc.html#sinh"], "Title": ["Built-In Mathematical SQL Functions"], "Feature": ["sinh(X)"], "Description": ["Return the hyperbolic sine of X."], "Examples": [], "Category": ["Built-In Mathematical SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_mathfunc.html#sqrt"], "Title": ["Built-In Mathematical SQL Functions"], "Feature": ["sqrt(X)"], "Description": ["Return the square root of X.  NULL is returned if X is negative."], "Examples": [], "Category": ["Built-In Mathematical SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_mathfunc.html#tan"], "Title": ["Built-In Mathematical SQL Functions"], "Feature": ["tan(X)"], "Description": ["Return the tangent of X.  X is in radians."], "Examples": [], "Category": ["Built-In Mathematical SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_mathfunc.html#tanh"], "Title": ["Built-In Mathematical SQL Functions"], "Feature": ["tanh(X)"], "Description": ["Return the hyperbolic tangent of X."], "Examples": [], "Category": ["Built-In Mathematical SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_mathfunc.html#trunc"], "Title": ["Built-In Mathematical SQL Functions"], "Feature": ["trunc(X)"], "Description": ["Return the representable integer in between X and 0 (inclusive)\n  that is furthest away from zero.  Or, in other words, return the\n  integer part of X, rounding toward zero.\n  The trunc() function is similar toceiling(X)andfloor(X)except\n  that it always rounds toward zero whereas ceiling(X) and floor(X) round\n  up and down, respectively."], "Examples": [], "Category": ["Built-In Mathematical SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_aggfunc.html#group_concat"], "Title": ["Built-in Aggregate Functions"], "Feature": ["group_concat(X)"], "Description": ["The group_concat() function returns\n  a string which is the concatenation of\n  all non-NULL values ofX.  If parameterYis present then\n  it is used as the separator\n  between instances ofX.A comma (\",\") is used as the separator\n  ifYis omitted.The string_agg(X,Y) function is an alias\n  for group_concat(X,Y).  String_agg() is compatible with PostgreSQL\n  and SQL-Server and group_concat() is compatible with MySQL.The order of the concatenated elements is arbitrary unless an\n  ORDER BY argument is included immediately after the last parameter."], "Examples": [], "Category": ["Built-in Aggregate Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#abs"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["abs(X)"], "Description": ["The abs(X) function returns the absolute value of the numeric\n  argument X.  Abs(X) returns NULL if X is NULL.\n  Abs(X) returns 0.0 if X is a string or blob\n  that cannot be converted to a numeric value.  If X is the\n  integer -9223372036854775808 then abs(X) throws an integer overflow\n  error since there is no equivalent positive 64-bit two complement value."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#changes"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["changes()"], "Description": ["The changes() function returns the number of database rows that were changed\n  or inserted or deleted by the most recently completed INSERT, DELETE,\n  or UPDATE statement, exclusive of statements in lower-level triggers.\n  The changes() SQL function is a wrapper around thesqlite3_changes64()C/C++ function and hence follows the same rules for counting changes."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#char"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["char(X1,X2,...,XN)"], "Description": ["The char(X1,X2,...,XN) function returns a string composed of characters having the\n   unicode code point values of integers X1 through XN, respectively."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#coalesce"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["coalesce(X,Y,...)"], "Description": ["The coalesce() function returns a copy of its first non-NULL argument, or\n  NULL if all arguments are NULL.  Coalesce() must have at least \n  2 arguments."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#concat"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["concat(X,...)"], "Description": ["The concat(...) function returns a string which is the concatenation of the\n  string representation of all of its non-NULL arguments.  If all arguments are\n  NULL, then concat() returns an empty string."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#concat_ws"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["concat_ws(SEP,X,...)"], "Description": ["The concat_ws(SEP,...) function returns a string that is the concatenation of\n  all non-null arguments beyond the first argument, using the text value of the\n  first argument as a separator.  If the first argument is NULL, then concat_ws()\n  returns NULL.  If all arguments other than the first are NULL, then concat_ws()\n  returns an empty string."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#format"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["format(FORMAT,...)"], "Description": ["The format(FORMAT,...) SQL function works like thesqlite3_mprintf()C-language\n  function and the printf() function from the standard C library.\n  The first argument is a format string that specifies how to construct the output\n  string using values taken from subsequent arguments.  If the FORMAT argument is\n  missing or NULL then the result is NULL.  The %n format is silently ignored and\n  does not consume an argument.  The %p format is an alias for %X.  The %z format\n  is interchangeable with %s.  If there are too few arguments in the argument list,\n  missing arguments are assumed to have a NULL value, which is translated into\n  0 or 0.0 for numeric formats or an empty string for %s.  See thebuilt-in printf()documentation for additional information."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#glob"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["glob(X,Y)"], "Description": ["The glob(X,Y) function is equivalent to the\n  expression \"Y GLOB X\".\n  Note that the X and Y arguments are reversed in the glob() function\n  relative to the infixGLOBoperator.  Y is the string and X is the\n  pattern.  So, for example, the following expressions are equivalent:If thesqlite3_create_function()interface is used to\n  override the glob(X,Y) function with an alternative implementation then\n  theGLOBoperator will invoke the alternative implementation."], "Examples": ["name GLOB '*helium*'\n     glob('*helium*',name)"], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#hex"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["hex(X)"], "Description": ["The hex() function interprets its argument as a BLOB and returns\n  a string which is the upper-case hexadecimal rendering of the content of\n  that blob.If the argumentXin \"hex(X)\" is an\n  integer or floating point number, then \"interprets its argument as a BLOB\" means\n  that the binary number is first converted into a UTF8 text representation, then\n  that text is interpreted as a BLOB.  Hence, \"hex(12345678)\" renders\n  as \"3132333435363738\" not the binary representation of the integer value\n  \"0000000000BC614E\".See also:unhex()"], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#ifnull"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["ifnull(X,Y)"], "Description": ["The ifnull() function returns a copy of its first non-NULL argument, or\n  NULL if both arguments are NULL.  Ifnull() must have exactly 2 arguments.\n  The ifnull() function is equivalent tocoalesce()with two arguments."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_aggfunc.html#group_concat"], "Title": ["Built-in Aggregate Functions"], "Feature": ["group_concat(X,Y)"], "Description": ["The group_concat() function returns\n  a string which is the concatenation of\n  all non-NULL values ofX.  If parameterYis present then\n  it is used as the separator\n  between instances ofX.A comma (\",\") is used as the separator\n  ifYis omitted.The string_agg(X,Y) function is an alias\n  for group_concat(X,Y).  String_agg() is compatible with PostgreSQL\n  and SQL-Server and group_concat() is compatible with MySQL.The order of the concatenated elements is arbitrary unless an\n  ORDER BY argument is included immediately after the last parameter."], "Examples": [], "Category": ["Built-in Aggregate Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#iif"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["iif(X,Y,Z)"], "Description": ["The iif(X,Y,Z) function returns the value Y if X is true, and Z otherwise.\n  The iif(X,Y,Z) function is logically equivalent to and generates the samebytecodeas theCASE expression\"CASE WHEN X THEN Y ELSE Z END\"."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#instr"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["instr(X,Y)"], "Description": ["The instr(X,Y) function finds the first occurrence of string Y within \n  string X and returns the number of prior characters plus 1, or 0 if\n  Y is nowhere found within X.\n  Or, if X and Y are both BLOBs, then instr(X,Y) returns one\n  more than the number bytes prior to the first occurrence of Y, or 0 if\n  Y does not occur anywhere within X.\n  If both arguments X and Y to instr(X,Y) are non-NULL and are not BLOBs\n  then both are interpreted as strings.\n  If either X or Y are NULL in instr(X,Y) then the result is NULL."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#last_insert_rowid"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["last_insert_rowid()"], "Description": ["The last_insert_rowid() function returns theROWIDof the last row insert from the database connection which invoked the\n  function.\n  The last_insert_rowid() SQL function is a wrapper around thesqlite3_last_insert_rowid()C/C++ interface function."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#length"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["length(X)"], "Description": ["For a string value X, the length(X) function returns the number of \n  characters (not bytes) in X prior to the first NUL character.\n  Since SQLite strings do not normally contain NUL characters, the length(X)\n  function will usually return the total number of characters in the string X.\n  For a blob value X, length(X) returns the number of bytes in the blob.\n  If X is NULL then length(X) is NULL.\n  If X is numeric then length(X) returns the length of a string\n  representation of X.Note that for strings, the length(X) function returns thecharacterlength of the string, not the byte length.  The character length is the number\n  of characters in the string.  The character length is always different from\n  the byte length for UTF-16 strings, and can be different from the byte length\n  for UTF-8 strings if the string contains multi-byte characters.  Use theoctet_length()function to find the byte length of a string.For BLOB values, length(X) always returns the byte-length of the BLOB.For string values, length(X) must read the entire string into memory in order\n  to compute the character length.  But for BLOB values, that is not necessary as\n  SQLite knows how many bytes are in the BLOB.  Hence, for multi-megabyte values,\n  the length(X) function is usually much faster for BLOBs than for strings, since\n  it does not need to load the value into memory."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#like"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["like(X,Y)"], "Description": ["The like() function is used to implement the\n  \"Y LIKE X [ESCAPE Z]\" expression. \n  If the optional ESCAPE clause is present, then the\n  like() function is invoked with three arguments.  Otherwise, it is\n  invoked with two arguments only. Note that the X and Y parameters are\n  reversed in the like() function relative to the infixLIKEoperator.\n  X is the pattern and Y is the string to match against that pattern.\n  Hence, the following expressions are equivalent:Thesqlite3_create_function()interface can be used to override the\n  like() function and thereby change the operation of theLIKEoperator.  When overriding the like() function, it may be important\n  to override both the two and three argument versions of the like() \n  function. Otherwise, different code may be called to implement theLIKEoperator depending on whether or not an ESCAPE clause was \n  specified."], "Examples": ["name LIKE '%neon%'\n     like('%neon%',name)"], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#like"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["like(X,Y,Z)"], "Description": ["The like() function is used to implement the\n  \"Y LIKE X [ESCAPE Z]\" expression. \n  If the optional ESCAPE clause is present, then the\n  like() function is invoked with three arguments.  Otherwise, it is\n  invoked with two arguments only. Note that the X and Y parameters are\n  reversed in the like() function relative to the infixLIKEoperator.\n  X is the pattern and Y is the string to match against that pattern.\n  Hence, the following expressions are equivalent:Thesqlite3_create_function()interface can be used to override the\n  like() function and thereby change the operation of theLIKEoperator.  When overriding the like() function, it may be important\n  to override both the two and three argument versions of the like() \n  function. Otherwise, different code may be called to implement theLIKEoperator depending on whether or not an ESCAPE clause was \n  specified."], "Examples": ["name LIKE '%neon%'\n     like('%neon%',name)"], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#likelihood"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["likelihood(X,Y)"], "Description": ["The likelihood(X,Y) function returns argument X unchanged.\n  The value Y in likelihood(X,Y) must be a floating point constant\n  between 0.0 and 1.0, inclusive.\n  The likelihood(X) function is a no-op that the code generator\n  optimizes away so that it consumes no CPU cycles during run-time\n  (that is, during calls tosqlite3_step()).\n  The purpose of the likelihood(X,Y) function is to provide a hint\n  to the query planner that the argument X is a boolean that is\n  true with a probability of approximately Y.\n  Theunlikely(X)function is short-hand for likelihood(X,0.0625).\n  Thelikely(X)function is short-hand for likelihood(X,0.9375)."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#likely"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["likely(X)"], "Description": ["The likely(X) function returns the argument X unchanged.\n  The likely(X) function is a no-op that the code generator\n  optimizes away so that it consumes no CPU cycles at\n  run-time (that is, during calls tosqlite3_step()).\n  The purpose of the likely(X) function is to provide a hint\n  to the query planner that the argument X is a boolean value\n  that is usually true. The likely(X) function is equivalent\n  tolikelihood(X,0.9375). See also:unlikely(X)."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#load_extension"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["load_extension(X)"], "Description": ["The load_extension(X,Y) function loadsSQLite extensionsout of the shared\n  library file named X using the entry point Y.  The result of load_extension()\n  is always a NULL.  If Y is omitted then the default entry point name is used.\n  The load_extension() function raises an exception if the extension fails to\n  load or initialize correctly.The load_extension() function will fail if the extension attempts to \n  modify or delete an SQL function or collating sequence.  The\n  extension can add new functions or collating sequences, but cannot\n  modify or delete existing functions or collating sequences because\n  those functions and/or collating sequences might be used elsewhere\n  in the currently running SQL statement.  To load an extension that\n  changes or deletes functions or collating sequences, use thesqlite3_load_extension()C-language API.For security reasons, extension loading is disabled by default and must\n  be enabled by a prior call tosqlite3_enable_load_extension()."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#load_extension"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["load_extension(X,Y)"], "Description": ["The load_extension(X,Y) function loadsSQLite extensionsout of the shared\n  library file named X using the entry point Y.  The result of load_extension()\n  is always a NULL.  If Y is omitted then the default entry point name is used.\n  The load_extension() function raises an exception if the extension fails to\n  load or initialize correctly.The load_extension() function will fail if the extension attempts to \n  modify or delete an SQL function or collating sequence.  The\n  extension can add new functions or collating sequences, but cannot\n  modify or delete existing functions or collating sequences because\n  those functions and/or collating sequences might be used elsewhere\n  in the currently running SQL statement.  To load an extension that\n  changes or deletes functions or collating sequences, use thesqlite3_load_extension()C-language API.For security reasons, extension loading is disabled by default and must\n  be enabled by a prior call tosqlite3_enable_load_extension()."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_aggfunc.html#max_agg"], "Title": ["Built-in Aggregate Functions"], "Feature": ["max(X)"], "Description": ["The max() aggregate function\n  returns the maximum value of all values in the group.\n  The maximum value is the value that would be returned last in an\n  ORDER BY on the same column.  Aggregate max() returns NULL \n  if and only if there are no non-NULL values in the group."], "Examples": [], "Category": ["Built-in Aggregate Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#lower"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["lower(X)"], "Description": ["The lower(X) function returns a copy of string X with all ASCII characters\n  converted to lower case.  The default built-in lower() function works\n  for ASCII characters only.  To do case conversions on non-ASCII\n  characters, load the ICU extension."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#ltrim"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["ltrim(X)"], "Description": ["The ltrim(X,Y) function returns a string formed by removing any and all\n  characters that appear in Y from the left side of X.\n  If the Y argument is omitted, ltrim(X) removes spaces from the left side\n  of X."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#ltrim"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["ltrim(X,Y)"], "Description": ["The ltrim(X,Y) function returns a string formed by removing any and all\n  characters that appear in Y from the left side of X.\n  If the Y argument is omitted, ltrim(X) removes spaces from the left side\n  of X."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#max_scalar"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["max(X,Y,...)"], "Description": ["The multi-argument max() function returns the argument with the \n  maximum value, or return NULL if any argument is NULL. \n  The multi-argument max() function searches its arguments from left to right\n  for an argument that defines a collating function and uses that collating\n  function for all string comparisons.  If none of the arguments to max()\n  define a collating function, then the BINARY collating function is used.\n  Note thatmax()is a simple function when\n  it has 2 or more arguments but operates as anaggregate functionif given only a single argument."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#min_scalar"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["min(X,Y,...)"], "Description": ["The multi-argument min() function returns the argument with the\n  minimum value.\n  The multi-argument min() function searches its arguments from left to right\n  for an argument that defines a collating function and uses that collating\n  function for all string comparisons.  If none of the arguments to min()\n  define a collating function, then the BINARY collating function is used.\n  Note thatmin()is a simple function when\n  it has 2 or more arguments but operates as anaggregate functionif given\n  only a single argument."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#nullif"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["nullif(X,Y)"], "Description": ["The nullif(X,Y) function returns its first argument if the arguments are\n  different and NULL if the arguments are the same.  The nullif(X,Y) function\n  searches its arguments from left to right for an argument that defines a\n  collating function and uses that collating function for all string\n  comparisons.  If neither argument to nullif() defines a collating function\n  then the BINARY collating function is used."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#octet_length"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["octet_length(X)"], "Description": ["The octet_length(X) function returns the number of bytes in the encoding\n  of text string X.  If X is NULL then octet_length(X) returns NULL.  If X is\n  a BLOB value, then octet_length(X) is the same aslength(X).  If X is a\n  numeric value, then octet_length(X) returns the number of bytes in a text\n  rendering of that number.Because octet_length(X) returns the number of bytes in X, not the number\n  of characters, the value returned depends on the database encoding.  The\n  octet_length() function can return different answers for the same input string\n  if the database encoding is UTF16 instead of UTF8.If argument X is a table column and the value is of type text or blob,\n  then octet_length(X) avoids reading the content of X from disk, as the byte\n  length can be computed from metadata.  Thus, octet_length(X) is efficient\n  even if X is a column containing a multi-megabyte text or blob value."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#printf"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["printf(FORMAT,...)"], "Description": ["The printf() SQL function is an alias for theformat() SQL function.\n  The format() SQL function was originally named printf(). But the name was\n  later changed to format() for compatibility with other database engines.\n  The printf() name is retained as an alias so as not to break legacy code."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#quote"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["quote(X)"], "Description": ["The quote(X) function returns the text of an SQL literal which\n  is the value of its argument suitable for inclusion into an SQL statement.\n  Strings are surrounded by single-quotes with escapes on interior quotes\n  as needed.  BLOBs are encoded as hexadecimal literals.\n  Strings with embedded NUL characters cannot be represented as string\n  literals in SQL and hence the returned string literal is truncated prior\n  to the first NUL."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#random"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["random()"], "Description": ["The random() function returns a pseudo-random integer\n  between -9223372036854775808 and +9223372036854775807."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_aggfunc.html#min_agg"], "Title": ["Built-in Aggregate Functions"], "Feature": ["min(X)"], "Description": ["The min() aggregate function\n  returns the minimum non-NULL value of all values in the group.\n  The minimum value is the first non-NULL value that would appear\n  in an ORDER BY of the column.\n  Aggregate min() returns NULL if and only if there are no non-NULL\n  values in the group."], "Examples": [], "Category": ["Built-in Aggregate Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#randomblob"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["randomblob(N)"], "Description": ["The randomblob(N) function return an N-byte blob containing pseudo-random\n  bytes. If N is less than 1 then a 1-byte random blob is returned.Hint:  applications can generate globally unique identifiers\n  using this function together withhex()and/orlower()like this:"], "Examples": ["hex(randomblob(16))lower(hex(randomblob(16)))"], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#replace"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["replace(X,Y,Z)"], "Description": ["The replace(X,Y,Z) function returns a string formed by substituting\n  string Z for every occurrence of string Y in string X.  TheBINARYcollating sequence is used for comparisons.  If Y is an empty\n  string then return X unchanged.  If Z is not initially\n  a string, it is cast to a UTF-8 string prior to processing."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#round"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["round(X)"], "Description": ["The round(X,Y) function returns a floating-point\n  value X rounded to Y digits to the right of the decimal point.\n  If the Y argument is omitted or negative, it is taken to be 0."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#round"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["round(X,Y)"], "Description": ["The round(X,Y) function returns a floating-point\n  value X rounded to Y digits to the right of the decimal point.\n  If the Y argument is omitted or negative, it is taken to be 0."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#rtrim"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["rtrim(X)"], "Description": ["The rtrim(X,Y) function returns a string formed by removing any and all\n  characters that appear in Y from the right side of X.\n  If the Y argument is omitted, rtrim(X) removes spaces from the right\n  side of X."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#rtrim"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["rtrim(X,Y)"], "Description": ["The rtrim(X,Y) function returns a string formed by removing any and all\n  characters that appear in Y from the right side of X.\n  If the Y argument is omitted, rtrim(X) removes spaces from the right\n  side of X."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#sign"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["sign(X)"], "Description": ["The sign(X) function returns -1, 0, or +1 if the argument X is a numeric\n  value that is negative, zero, or positive, respectively.  If the argument\n  to sign(X) is NULL or is a string or blob that cannot be losslessly converted\n  into a number, then sign(X) returns NULL."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#soundex"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["soundex(X)"], "Description": ["The soundex(X) function returns a string that is the soundex encoding \n  of the string X.\n  The string \"?000\" is returned if the argument is NULL or contains\n  no ASCII alphabetic characters.\n  This function is omitted from SQLite by default.\n  It is only available if theSQLITE_SOUNDEXcompile-time option\n  is used when SQLite is built."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#sqlite_compileoption_get"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["sqlite_compileoption_get(N)"], "Description": ["The sqlite_compileoption_get() SQL function is a wrapper around thesqlite3_compileoption_get()C/C++ function.\n  This routine returns the N-th compile-time option used to build SQLite\n  or NULL if N is out of range.  See also thecompile_options pragma."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#sqlite_compileoption_used"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["sqlite_compileoption_used(X)"], "Description": ["The sqlite_compileoption_used() SQL function is a wrapper around thesqlite3_compileoption_used()C/C++ function.\n  When the argument X to sqlite_compileoption_used(X) is a string which\n  is the name of a compile-time option, this routine returns true (1) or\n  false (0) depending on whether or not that option was used during the\n  build."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_aggfunc.html#group_concat"], "Title": ["Built-in Aggregate Functions"], "Feature": ["string_agg(X,Y)"], "Description": ["The group_concat() function returns\n  a string which is the concatenation of\n  all non-NULL values ofX.  If parameterYis present then\n  it is used as the separator\n  between instances ofX.A comma (\",\") is used as the separator\n  ifYis omitted.The string_agg(X,Y) function is an alias\n  for group_concat(X,Y).  String_agg() is compatible with PostgreSQL\n  and SQL-Server and group_concat() is compatible with MySQL.The order of the concatenated elements is arbitrary unless an\n  ORDER BY argument is included immediately after the last parameter."], "Examples": [], "Category": ["Built-in Aggregate Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#sqlite_offset"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["sqlite_offset(X)"], "Description": ["The sqlite_offset(X) function returns the byte offset in the database\n  file for the beginning of the record from which value would be read.\n  If X is not a column in an ordinary table, then sqlite_offset(X) returns\n  NULL.  The value returned by sqlite_offset(X) might reference either the\n  original table or an index, depending on the query.  If the value X would\n  normally be extracted from an index, the sqlite_offset(X) returns the\n  offset to the corresponding index record.  If the value X would be\n  extracted from the original table, then sqlite_offset(X) returns the offset\n  to the table record.The sqlite_offset(X) SQL function is only available if SQLite is built\n  using the-DSQLITE_ENABLE_OFFSET_SQL_FUNCcompile-time option."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#sqlite_source_id"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["sqlite_source_id()"], "Description": ["The sqlite_source_id() function returns a string that identifies the\n  specific version of the source code that was used to build the SQLite\n  library.  The string returned by sqlite_source_id() is\n  the date and time that the source code was checked in followed by\n  the SHA3-256 hash for that check-in.  This function is\n  an SQL wrapper around thesqlite3_sourceid()C interface."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#sqlite_version"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["sqlite_version()"], "Description": ["The sqlite_version() function returns the version string for the SQLite\n  library that is running.  This function is an SQL\n  wrapper around thesqlite3_libversion()C-interface."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#substr"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["substr(X,Y)"], "Description": ["The substr(X,Y,Z) function returns a substring of input string X that begins\n  with the Y-th character and which is Z characters long.\n  If Z is omitted then substr(X,Y) returns all characters through the end\n  of the string X beginning with the Y-th.\n  The left-most character of X is number 1.  If Y is negative\n  then the first character of the substring is found by counting from the\n  right rather than the left.  If Z is negative then\n  the abs(Z) characters preceding the Y-th character are returned.\n  If X is a string then characters indices refer to actual UTF-8 \n  characters.  If X is a BLOB then the indices refer to bytes.\"substring()\" is an alias for \"substr()\" beginning with SQLite version 3.34."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#substr"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["substr(X,Y,Z)"], "Description": ["The substr(X,Y,Z) function returns a substring of input string X that begins\n  with the Y-th character and which is Z characters long.\n  If Z is omitted then substr(X,Y) returns all characters through the end\n  of the string X beginning with the Y-th.\n  The left-most character of X is number 1.  If Y is negative\n  then the first character of the substring is found by counting from the\n  right rather than the left.  If Z is negative then\n  the abs(Z) characters preceding the Y-th character are returned.\n  If X is a string then characters indices refer to actual UTF-8 \n  characters.  If X is a BLOB then the indices refer to bytes.\"substring()\" is an alias for \"substr()\" beginning with SQLite version 3.34."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#substr"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["substring(X,Y)"], "Description": ["The substr(X,Y,Z) function returns a substring of input string X that begins\n  with the Y-th character and which is Z characters long.\n  If Z is omitted then substr(X,Y) returns all characters through the end\n  of the string X beginning with the Y-th.\n  The left-most character of X is number 1.  If Y is negative\n  then the first character of the substring is found by counting from the\n  right rather than the left.  If Z is negative then\n  the abs(Z) characters preceding the Y-th character are returned.\n  If X is a string then characters indices refer to actual UTF-8 \n  characters.  If X is a BLOB then the indices refer to bytes.\"substring()\" is an alias for \"substr()\" beginning with SQLite version 3.34."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#substr"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["substring(X,Y,Z)"], "Description": ["The substr(X,Y,Z) function returns a substring of input string X that begins\n  with the Y-th character and which is Z characters long.\n  If Z is omitted then substr(X,Y) returns all characters through the end\n  of the string X beginning with the Y-th.\n  The left-most character of X is number 1.  If Y is negative\n  then the first character of the substring is found by counting from the\n  right rather than the left.  If Z is negative then\n  the abs(Z) characters preceding the Y-th character are returned.\n  If X is a string then characters indices refer to actual UTF-8 \n  characters.  If X is a BLOB then the indices refer to bytes.\"substring()\" is an alias for \"substr()\" beginning with SQLite version 3.34."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#total_changes"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["total_changes()"], "Description": ["The total_changes() function returns the number of row changes\n  caused by INSERT, UPDATE or DELETE\n  statements since the current database connection was opened.\n  This function is a wrapper around thesqlite3_total_changes64()C/C++ interface."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#trim"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["trim(X)"], "Description": ["The trim(X,Y) function returns a string formed by removing any and all\n  characters that appear in Y from both ends of X.\n  If the Y argument is omitted, trim(X) removes spaces from both ends of X."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#trim"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["trim(X,Y)"], "Description": ["The trim(X,Y) function returns a string formed by removing any and all\n  characters that appear in Y from both ends of X.\n  If the Y argument is omitted, trim(X) removes spaces from both ends of X."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_aggfunc.html#sumunc"], "Title": ["Built-in Aggregate Functions"], "Feature": ["sum(X)"], "Description": ["The sum() and total() aggregate functions\n  return the sum of all non-NULL values in the group.\n  If there are no non-NULL input rows then sum() returns\n  NULL but total() returns 0.0.\n  NULL is not normally a helpful result for the sum of no rows\n  but the SQL standard requires it and most other\n  SQL database engines implement sum() that way so SQLite does it in the\n  same way in order to be compatible.   The non-standard total() function\n  is provided as a convenient way to work around this design problem\n  in the SQL language.", "The result of total() is always a floating point value.\n  The result of sum() is an integer value if all non-NULL inputs are integers.\n  If any input to sum() is neither an integer nor a NULL,\n  then sum() returns a floating point value\n  which is an approximation of the mathematical sum.", "Sum() will throw an \"integer overflow\" exception if all inputs\n  are integers or NULL\n  and an integer overflow occurs at any point during the computation.\n  No overflow error is ever raised if any prior input was a floating point\n  value.\n  Total() never throws an integer overflow.When summing floating-point values, if the magnitudes of the values\n  differ wildly then the resulting sum might be imprecise due to the fact thatIEEE 754 floating point values are approximations.\n  Use the decimal_sum(X) aggregate in thedecimal extensionto obtain\n  an exact summation of floating point numbers.  Consider this test case:The large values \u00b11.55e+308 cancel each other out, but the\n  cancellation does not occur until the end of the sum and in the meantime\n  the large +1.55e+308 swamps the tiny 3.2e-16 value.  The end result is\n  an imprecise result for the sum().  The decimal_sum() aggregate\n  generates an exact answer, at the cost of additional CPU and memory usage.\n  Note also that decimal_sum() is not built into the SQLite core; it is aloadable extension.If sum of inputs is too large to represent as a IEEE 754 floating\n  point value, then a +Infinity or -Infinity result may be returned.\n  If very large values with differing signs are used\n  such that the SUM() or TOTAL() function is\n  unable to determine if the correct result is +Infinity or -Infinity\n  or some other value in between, then the result is NULL.  Hence, for\n  example, the following query returns NULL:"], "Examples": ["CREATE TABLE t1(x REAL);\nINSERT INTO t1 VALUES(1.55e+308),(1.23),(3.2e-16),(-1.23),(-1.55e308);\nSELECT sum(x), decimal_sum(x) FROM t1;", "WITH t1(x) AS (VALUES(1.0),(-9e+999),(2.0),(+9e+999),(3.0))\n SELECT sum(x) FROM t1;"], "Category": ["Built-in Aggregate Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#typeof"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["typeof(X)"], "Description": ["The typeof(X) function returns a string that indicates thedatatypeof\n  the expression X: \"null\", \"integer\", \"real\", \"text\", or \"blob\"."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#unhex"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["unhex(X)"], "Description": ["The unhex(X,Y) function returns a BLOB value which is the decoding of the\n  hexadecimal string X.  If X contains any\n  characters that are not hexadecimal digits and which are not in Y, \n  then unhex(X,Y) returns NULL. If Y is omitted, it is\n  understood to be an empty string and hence X must be a pure hexadecimal string.\n  All hexadecimal digits in X must occur in pairs, with both digits of each\n  pair beginning immediately adjacent to one another, or else unhex(X,Y)\n  returns NULL.\n  If either parameter X or Y is NULL, then unhex(X,Y) returns NULL.\n  The X input may contain an arbitrary mix of upper and lower case hexadecimal\n  digits.\n  Hexadecimal digits in Y have no affect on the translation of X.  Only\n  characters in Y that are not hexadecimal digits are ignored in X.See also:hex()"], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#unhex"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["unhex(X,Y)"], "Description": ["The unhex(X,Y) function returns a BLOB value which is the decoding of the\n  hexadecimal string X.  If X contains any\n  characters that are not hexadecimal digits and which are not in Y, \n  then unhex(X,Y) returns NULL. If Y is omitted, it is\n  understood to be an empty string and hence X must be a pure hexadecimal string.\n  All hexadecimal digits in X must occur in pairs, with both digits of each\n  pair beginning immediately adjacent to one another, or else unhex(X,Y)\n  returns NULL.\n  If either parameter X or Y is NULL, then unhex(X,Y) returns NULL.\n  The X input may contain an arbitrary mix of upper and lower case hexadecimal\n  digits.\n  Hexadecimal digits in Y have no affect on the translation of X.  Only\n  characters in Y that are not hexadecimal digits are ignored in X.See also:hex()"], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#unicode"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["unicode(X)"], "Description": ["The unicode(X) function returns the numeric unicode code point corresponding to\n  the first character of the string X.  If the argument to unicode(X) is not a string\n  then the result is undefined."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#unlikely"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["unlikely(X)"], "Description": ["The unlikely(X) function returns the argument X unchanged.\n  The unlikely(X) function is a no-op that the code generator\n  optimizes away so that it consumes no CPU cycles at\n  run-time (that is, during calls tosqlite3_step()).\n  The purpose of the unlikely(X) function is to provide a hint\n  to the query planner that the argument X is a boolean value\n  that is usually not true. The unlikely(X) function is equivalent\n  tolikelihood(X, 0.0625)."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#upper"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["upper(X)"], "Description": ["The upper(X) function returns a copy of input string X in which all \n  lower-case ASCII characters are converted to their upper-case equivalent."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#zeroblob"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["zeroblob(N)"], "Description": ["The zeroblob(N) function returns a BLOB consisting of N bytes of 0x00.\n  SQLite manages these zeroblobs very efficiently.  Zeroblobs can be used to\n  reserve space for a BLOB that is later written usingincremental BLOB I/O.\n  This SQL function is implemented using thesqlite3_result_zeroblob()routine from the C/C++ interface."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_datefunc.html"], "Title": ["Date And Time Functions"], "Feature": ["date(time-value, modifier, modifier, ...)"], "Description": ["The date(time-value, modifier, modifier, ...) function returns the date as text in the format: YYYY-MM-DD. The function accepts a time-value and zero or more modifiers to alter the date.", "Parameters: time-value (e.g., 'now', '2024-08-21'), modifiers (e.g., '+1 day', 'start of month').", "Returns: A string in the format YYYY-MM-DD."], "Examples": ["SELECT date(); -- Returns the current date.", "SELECT date('now', '+1 day'); -- Returns the date one day after the current date.", "SELECT date('2024-08-21'); -- Returns '2024-08-21'."], "Category": ["Date And Time Functions"]}
{"HTML": ["https://sqlite.org/lang_datefunc.html"], "Title": ["Date And Time Functions"], "Feature": ["time(time-value, modifier, modifier, ...)"], "Description": ["The time(time-value, modifier, modifier, ...) function returns the time as text formatted as HH:MM:SS or HH:MM:SS.SSS if the subsec modifier is used. It accepts a time-value and zero or more modifiers.", "Parameters: time-value (e.g., 'now', '14:16:00'), modifiers (e.g., '+1 hour', 'subsec').", "Returns: A string formatted as HH:MM:SS or HH:MM:SS.SSS."], "Examples": ["SELECT time(); -- Returns the current time.", "SELECT time('now', '+1 hour'); -- Returns the time one hour after the current time.", "SELECT time('14:16:00', 'subsec'); -- Returns '14:16:00.000' with milliseconds."], "Category": ["Date And Time Functions"]}
{"HTML": ["https://sqlite.org/lang_datefunc.html"], "Title": ["Date And Time Functions"], "Feature": ["datetime(time-value, modifier, modifier, ...)"], "Description": ["The datetime(time-value, modifier, modifier, ...) function returns the date and time formatted as YYYY-MM-DD HH:MM:SS or YYYY-MM-DD HH:MM:SS.SSS if the subsec modifier is used. It accepts a time-value and zero or more modifiers.", "Parameters: time-value (e.g., 'now', '2024-08-21 14:16:00'), modifiers (e.g., '+1 hour', 'subsec').", "Returns: A string formatted as YYYY-MM-DD HH:MM:SS or YYYY-MM-DD HH:MM:SS.SSS."], "Examples": ["SELECT datetime(); -- Returns the current date and time.", "SELECT datetime('now', '+1 hour'); -- Returns the date and time one hour after the current time.", "SELECT datetime('2024-08-21 14:16:00', 'subsec'); -- Returns '2024-08-21 14:16:00.000' with milliseconds."], "Category": ["Date And Time Functions"]}
{"HTML": ["https://sqlite.org/lang_aggfunc.html#sumunc"], "Title": ["Built-in Aggregate Functions"], "Feature": ["total(X)"], "Description": ["The sum() and total() aggregate functions\n  return the sum of all non-NULL values in the group.\n  If there are no non-NULL input rows then sum() returns\n  NULL but total() returns 0.0.\n  NULL is not normally a helpful result for the sum of no rows\n  but the SQL standard requires it and most other\n  SQL database engines implement sum() that way so SQLite does it in the\n  same way in order to be compatible.   The non-standard total() function\n  is provided as a convenient way to work around this design problem\n  in the SQL language.", "The result of total() is always a floating point value.\n  The result of sum() is an integer value if all non-NULL inputs are integers.\n  If any input to sum() is neither an integer nor a NULL,\n  then sum() returns a floating point value\n  which is an approximation of the mathematical sum.", "Sum() will throw an \"integer overflow\" exception if all inputs\n  are integers or NULL\n  and an integer overflow occurs at any point during the computation.\n  No overflow error is ever raised if any prior input was a floating point\n  value.\n  Total() never throws an integer overflow.When summing floating-point values, if the magnitudes of the values\n  differ wildly then the resulting sum might be imprecise due to the fact thatIEEE 754 floating point values are approximations.\n  Use the decimal_sum(X) aggregate in thedecimal extensionto obtain\n  an exact summation of floating point numbers.  Consider this test case:The large values \u00b11.55e+308 cancel each other out, but the\n  cancellation does not occur until the end of the sum and in the meantime\n  the large +1.55e+308 swamps the tiny 3.2e-16 value.  The end result is\n  an imprecise result for the sum().  The decimal_sum() aggregate\n  generates an exact answer, at the cost of additional CPU and memory usage.\n  Note also that decimal_sum() is not built into the SQLite core; it is aloadable extension.If sum of inputs is too large to represent as a IEEE 754 floating\n  point value, then a +Infinity or -Infinity result may be returned.\n  If very large values with differing signs are used\n  such that the SUM() or TOTAL() function is\n  unable to determine if the correct result is +Infinity or -Infinity\n  or some other value in between, then the result is NULL.  Hence, for\n  example, the following query returns NULL:"], "Examples": ["CREATE TABLE t1(x REAL);\nINSERT INTO t1 VALUES(1.55e+308),(1.23),(3.2e-16),(-1.23),(-1.55e308);\nSELECT sum(x), decimal_sum(x) FROM t1;", "WITH t1(x) AS (VALUES(1.0),(-9e+999),(2.0),(+9e+999),(3.0))\n SELECT sum(x) FROM t1;"], "Category": ["Built-in Aggregate Functions"]}
