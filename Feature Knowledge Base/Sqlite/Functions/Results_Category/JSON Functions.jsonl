{"HTML": ["https://sqlite.org/json1.html"], "Title": ["4.1. The json() function"], "Feature": ["4.1. The json() function"], "Description": ["4.1. The json() function", "The json(X) function verifies that its argument X is a valid\nJSON string or JSONB blob and returns a minified version of that JSON string\nwith all unnecessary whitespace removed.  If X is not a well-formed\nJSON string or JSONB blob, then this routine throws an error.\n\n", "If the input is JSON5 text, then it is converted into canonical\nRFC-8259 text prior to being returned.\n\n", "If the argument X to json(X) contains JSON objects with duplicate\nlabels, then it is undefined whether or not the duplicates are\npreserved.  The current implementation preserves duplicates.\nHowever, future enhancements\nto this routine may choose to silently remove duplicates.\n\n", "\nExample:\n\n", "json(' { \"this\" : \"is\", \"a\": [ \"test\" ] } ')\n\u2192 '{\"this\":\"is\",\"a\":[\"test\"]}'"], "Examples": ["json(' { \"this\" : \"is\", \"a\": [ \"test\" ] } ')\n\u2192 '{\"this\":\"is\",\"a\":[\"test\"]}'"], "Category": ["JSON Functions"]}
{"HTML": ["https://sqlite.org/json1.html"], "Title": ["4.2. The jsonb() function"], "Feature": ["4.2. The jsonb() function"], "Description": ["4.2. The jsonb() function", "The jsonb(X) function returns the binary JSONB representation\nof the JSON provided as argument X.  An error is raised if X is\nTEXT that does not have valid JSON syntax.\n\n", "If X is a BLOB and appears to be JSONB,\nthen this routine simply returns a copy of X.\nOnly the outer-most element of the JSONB input is examined, however.\nThe deep structure of the JSONB is not validated.\n\n\n"], "Examples": [], "Category": ["JSON Functions"]}
{"HTML": ["https://sqlite.org/json1.html"], "Title": ["4.3. The json_array() function"], "Feature": ["4.3. The json_array() function"], "Description": ["4.3. The json_array() function", "The json_array() SQL function accepts zero or more arguments and\nreturns a well-formed JSON array that is composed from those arguments.\nIf any argument to json_array() is a BLOB then an error is thrown.\n\n", "An argument with SQL type TEXT is normally converted into a quoted \nJSON string.  However, if the argument is the output from another json1\nfunction, then it is stored as JSON.  This allows calls to json_array()\nand json_object() to be nested.  The json() function can also\nbe used to force strings to be recognized as JSON.\n\n", "Examples:\n\n", "json_array(1,2,'3',4)\n\u2192 '[1,2,\"3\",4]'", "json_array('[1,2]')\n\u2192 '[\"[1,2]\"]'", "json_array(json_array(1,2))\n\u2192 '[[1,2]]'", "json_array(1,null,'3','[4,5]','{\"six\":7.7}')\n\u2192 '[1,null,\"3\",\"[4,5]\",\"{\\\"six\\\":7.7}\"]'", "json_array(1,null,'3',json('[4,5]'),json('{\"six\":7.7}'))\n\u2192 '[1,null,\"3\",[4,5],{\"six\":7.7}]'"], "Examples": ["json_array(1,2,'3',4)\n\u2192 '[1,2,\"3\",4]'", "json_array('[1,2]')\n\u2192 '[\"[1,2]\"]'", "json_array(json_array(1,2))\n\u2192 '[[1,2]]'", "json_array(1,null,'3','[4,5]','{\"six\":7.7}')\n\u2192 '[1,null,\"3\",\"[4,5]\",\"{\\\"six\\\":7.7}\"]'", "json_array(1,null,'3',json('[4,5]'),json('{\"six\":7.7}'))\n\u2192 '[1,null,\"3\",[4,5],{\"six\":7.7}]'"], "Category": ["JSON Functions"]}
{"HTML": ["https://sqlite.org/json1.html"], "Title": ["4.4. The jsonb_array() function"], "Feature": ["4.4. The jsonb_array() function"], "Description": ["4.4. The jsonb_array() function", "The jsonb_array() SQL function works just like the json_array()\nfunction except that it returns the constructed JSON array in the\nSQLite's private JSONB format rather than in the standard\nRFC 8259 text format.\n\n\n"], "Examples": [], "Category": ["JSON Functions"]}
{"HTML": ["https://sqlite.org/json1.html"], "Title": ["4.5. The json_array_length() function"], "Feature": ["4.5. The json_array_length() function"], "Description": ["4.5. The json_array_length() function", "The json_array_length(X) function returns the number of elements\nin the JSON array X, or 0 if X is some kind of JSON value other\nthan an array.  The json_array_length(X,P) locates the array at path P\nwithin X and returns the length of that array, or 0 if path P locates\nan element in X that is not a JSON array, and NULL if path P does not\nlocate any element of X.  Errors are thrown if either X is not \nwell-formed JSON or if P is not a well-formed path.\n\n", "Examples:\n\n", "json_array_length('[1,2,3,4]')\n\u2192 4", "json_array_length('[1,2,3,4]', '$')\n\u2192 4", "json_array_length('[1,2,3,4]', '$[2]')\n\u2192 0", "json_array_length('{\"one\":[1,2,3]}')\n\u2192 0", "json_array_length('{\"one\":[1,2,3]}', '$.one')\n\u2192 3", "json_array_length('{\"one\":[1,2,3]}', '$.two')\n\u2192 NULL"], "Examples": ["json_array_length('[1,2,3,4]')\n\u2192 4", "json_array_length('[1,2,3,4]', '$')\n\u2192 4", "json_array_length('[1,2,3,4]', '$[2]')\n\u2192 0", "json_array_length('{\"one\":[1,2,3]}')\n\u2192 0", "json_array_length('{\"one\":[1,2,3]}', '$.one')\n\u2192 3", "json_array_length('{\"one\":[1,2,3]}', '$.two')\n\u2192 NULL"], "Category": ["JSON Functions"]}
{"HTML": ["https://sqlite.org/json1.html"], "Title": ["4.6. The json_error_position() function"], "Feature": ["4.6. The json_error_position() function"], "Description": ["4.6. The json_error_position() function", "The json_error_position(X) function returns 0 if the input X is a\nwell-formed JSON or JSON5 string.  If the input X contains one or more\nsyntax errors, then this function returns the character position of the\nfirst syntax error.  The left-most character is position 1.\n\n", "If the input X is a BLOB, then this routine returns 0 if X is\na well-formed JSONB blob.  If the return value is positive, then it\nrepresents the approximate 1-based position in the BLOB of the\nfirst detected error.\n\n", "\nThe json_error_position() function was added with\nSQLite version 3.42.0 (2023-05-16).\n\n\n\n"], "Examples": [], "Category": ["JSON Functions"]}
{"HTML": ["https://sqlite.org/json1.html"], "Title": ["4.7. The json_extract() function"], "Feature": ["4.7. The json_extract() function"], "Description": ["4.7. The json_extract() function", "The json_extract(X,P1,P2,...) extracts and returns one or more \nvalues from the\nwell-formed JSON at X.  If only a single path P1 is provided, then the\nSQL datatype of the result is NULL for a JSON null, INTEGER or REAL\nfor a JSON numeric value, an INTEGER zero for a JSON false value,\nan INTEGER one for a JSON true value, the dequoted text for a \nJSON string value, and a text representation for JSON object and array values.\nIf there are multiple path arguments (P1, P2, and so forth) then this\nroutine returns SQLite text which is a well-formed JSON array holding\nthe various values.\n\n", "Examples:\n\n", "json_extract('{\"a\":2,\"c\":[4,5,{\"f\":7}]}', '$')\n\u2192 '{\"a\":2,\"c\":[4,5,{\"f\":7}]}'", "json_extract('{\"a\":2,\"c\":[4,5,{\"f\":7}]}', '$.c')\n\u2192 '[4,5,{\"f\":7}]'", "json_extract('{\"a\":2,\"c\":[4,5,{\"f\":7}]}', '$.c[2]')\n\u2192 '{\"f\":7}'", "json_extract('{\"a\":2,\"c\":[4,5,{\"f\":7}]}', '$.c[2].f')\n\u2192 7", "json_extract('{\"a\":2,\"c\":[4,5],\"f\":7}','$.c','$.a')\n\u2192 '[[4,5],2]'", "json_extract('{\"a\":2,\"c\":[4,5],\"f\":7}','$.c[#-1]')\n\u2192 5", "json_extract('{\"a\":2,\"c\":[4,5,{\"f\":7}]}', '$.x')\n\u2192 NULL", "json_extract('{\"a\":2,\"c\":[4,5,{\"f\":7}]}', '$.x', '$.a')\n\u2192 '[null,2]'", "json_extract('{\"a\":\"xyz\"}', '$.a')\n\u2192 'xyz'", "json_extract('{\"a\":null}', '$.a')\n\u2192 NULL", "There is a subtle incompatibility between the json_extract() function\nin SQLite and the json_extract() function in MySQL.  The MySQL version\nof json_extract() always returns JSON.  The SQLite version of\njson_extract() only returns JSON if there are two or more PATH arguments\n(because the result is then a JSON array) or if the single PATH argument\nreferences an array or object.  In SQLite, if json_extract() has only\na single PATH argument and that PATH references a JSON null or a string\nor a numeric value, then json_extract() returns the corresponding SQL\nNULL, TEXT, INTEGER, or REAL value.\n\n", "The difference between MySQL json_extract() and SQLite json_extract()\nreally only stands out when accessing individual values within the JSON\nthat are strings or NULLs.  The following table demonstrates the difference:\n\n", "\n\nOperationSQLite ResultMySQL Result\njson_extract('{\"a\":null,\"b\":\"xyz\"}','$.a')NULL'null'\njson_extract('{\"a\":null,\"b\":\"xyz\"}','$.b')'xyz''\"xyz\"'\n"], "Examples": ["json_extract('{\"a\":2,\"c\":[4,5,{\"f\":7}]}', '$')\n\u2192 '{\"a\":2,\"c\":[4,5,{\"f\":7}]}'", "json_extract('{\"a\":2,\"c\":[4,5,{\"f\":7}]}', '$.c')\n\u2192 '[4,5,{\"f\":7}]'", "json_extract('{\"a\":2,\"c\":[4,5,{\"f\":7}]}', '$.c[2]')\n\u2192 '{\"f\":7}'", "json_extract('{\"a\":2,\"c\":[4,5,{\"f\":7}]}', '$.c[2].f')\n\u2192 7", "json_extract('{\"a\":2,\"c\":[4,5],\"f\":7}','$.c','$.a')\n\u2192 '[[4,5],2]'", "json_extract('{\"a\":2,\"c\":[4,5],\"f\":7}','$.c[#-1]')\n\u2192 5", "json_extract('{\"a\":2,\"c\":[4,5,{\"f\":7}]}', '$.x')\n\u2192 NULL", "json_extract('{\"a\":2,\"c\":[4,5,{\"f\":7}]}', '$.x', '$.a')\n\u2192 '[null,2]'", "json_extract('{\"a\":\"xyz\"}', '$.a')\n\u2192 'xyz'", "json_extract('{\"a\":null}', '$.a')\n\u2192 NULL"], "Category": ["JSON Functions"]}
{"HTML": ["https://sqlite.org/json1.html"], "Title": ["4.8. The jsonb_extract() function"], "Feature": ["4.8. The jsonb_extract() function"], "Description": ["4.8. The jsonb_extract() function", "\nThe jsonb_extract() function works the same as the json_extract() function,\nexcept in cases where json_extract() would normally return a text\nJSON array object, this routine returns the array or object in the\nJSONB format.  For the common case where a text, numeric, null, or\nboolean JSON element is returned, this routine works exactly the same\nas json_extract().\n\n\n\n"], "Examples": [], "Category": ["JSON Functions"]}
{"HTML": ["https://sqlite.org/json1.html"], "Title": ["4.9. The -> and ->> operators"], "Feature": ["4.9. The -> and ->> operators"], "Description": ["4.9. The -> and ->> operators", "Beginning with SQLite version 3.38.0 (2022-02-22), the ->\nand ->> operators are available for extracting subcomponents of JSON.\nThe SQLite implementation of -> and ->> strives to be\ncompatible with both MySQL and PostgreSQL.\nThe -> and ->> operators take a JSON string or JSONB blob\nas their left operand and a PATH expression or object field\nlabel or array index as their right operand.  The -> operator\nreturns a text JSON representation of the selected subcomponent or\nNULL if that subcomponent does not exist.  The ->> operator returns\nan SQL TEXT, INTEGER, REAL, or NULL value that represents the selected\nsubcomponent, or NULL if the subcomponent does not exist.\n\n", "Both the -> and ->> operators select the same subcomponent\nof the JSON to their left.  The difference is that -> always returns a\nJSON representation of that subcomponent and the ->> operator always\nreturns an SQL representation of that subcomponent.  Thus, these operators\nare subtly different from a two-argument json_extract() function call.\nA call to json_extract() with two arguments will return a JSON representation\nof the subcomponent if and only if the subcomponent is a JSON array or\nobject, and will return an SQL representation of the subcomponent if the\nsubcomponent is a JSON null, string, or numeric value.\n\n", "When the -> operator returns JSON, it always returns the\nRFC 8565 text representation of that JSON, not JSONB.  Use the\njsonb_extract() function if you need a subcomponent in the\nJSONB format.\n\n", "The right-hand operand to the -> and ->> operators can\nbe a well-formed JSON path expression.  This is the form used by MySQL.\nFor compatibility with PostgreSQL,\nthe -> and ->> operators also accept a text object label or\ninteger array index as their right-hand operand.\nIf the right operand is a text\nlabel X, then it is interpreted as the JSON path '$.X'.  If the right\noperand is an integer value N, then it is interpreted as the JSON path '$[N]'\nif it is non-negative.  Or if N is negative integer with value -K, then it\nis interpreted like the JSON path '$[#-K]'.  In other words, the\nindexing begins at the end of the array and moves back toward the front.\nNegative values for N are only supported in SQLite versions 3.47.0\n(2024-10-21) and later.\n\n\n", "Examples:\n\n", "'{\"a\":2,\"c\":[4,5,{\"f\":7}]}' -> '$'\n\u2192 '{\"a\":2,\"c\":[4,5,{\"f\":7}]}'", "'{\"a\":2,\"c\":[4,5,{\"f\":7}]}' -> '$.c'\n\u2192 '[4,5,{\"f\":7}]'", "'{\"a\":2,\"c\":[4,5,{\"f\":7}]}' -> 'c'\n\u2192 '[4,5,{\"f\":7}]'", "'{\"a\":2,\"c\":[4,5,{\"f\":7}]}' -> '$.c[2]'\n\u2192 '{\"f\":7}'", "'{\"a\":2,\"c\":[4,5,{\"f\":7}]}' -> '$.c[2].f'\n\u2192 '7'", "'{\"a\":2,\"c\":[4,5,{\"f\":7}]}' ->> '$.c[2].f'\n\u2192 7", "'{\"a\":2,\"c\":[4,5,{\"f\":7}]}' -> 'c' -> 2 ->> 'f'\n\u2192 7", "'{\"a\":2,\"c\":[4,5],\"f\":7}' -> '$.c[#-1]'\n\u2192 '5'", "'{\"a\":2,\"c\":[4,5,{\"f\":7}]}' -> '$.x'\n\u2192 NULL", "'[11,22,33,44]' -> 3\n\u2192 '44'", "'[11,22,33,44]' ->> 3\n\u2192 44", "'{\"a\":\"xyz\"}' -> '$.a'\n\u2192 '\"xyz\"'", "'{\"a\":\"xyz\"}' ->> '$.a'\n\u2192 'xyz'", "'{\"a\":null}' -> '$.a'\n\u2192 'null'", "'{\"a\":null}' ->> '$.a'\n\u2192 NULL"], "Examples": ["'{\"a\":2,\"c\":[4,5,{\"f\":7}]}' -> '$'\n\u2192 '{\"a\":2,\"c\":[4,5,{\"f\":7}]}'", "'{\"a\":2,\"c\":[4,5,{\"f\":7}]}' -> '$.c'\n\u2192 '[4,5,{\"f\":7}]'", "'{\"a\":2,\"c\":[4,5,{\"f\":7}]}' -> 'c'\n\u2192 '[4,5,{\"f\":7}]'", "'{\"a\":2,\"c\":[4,5,{\"f\":7}]}' -> '$.c[2]'\n\u2192 '{\"f\":7}'", "'{\"a\":2,\"c\":[4,5,{\"f\":7}]}' -> '$.c[2].f'\n\u2192 '7'", "'{\"a\":2,\"c\":[4,5,{\"f\":7}]}' ->> '$.c[2].f'\n\u2192 7", "'{\"a\":2,\"c\":[4,5,{\"f\":7}]}' -> 'c' -> 2 ->> 'f'\n\u2192 7", "'{\"a\":2,\"c\":[4,5],\"f\":7}' -> '$.c[#-1]'\n\u2192 '5'", "'{\"a\":2,\"c\":[4,5,{\"f\":7}]}' -> '$.x'\n\u2192 NULL", "'[11,22,33,44]' -> 3\n\u2192 '44'", "'[11,22,33,44]' ->> 3\n\u2192 44", "'{\"a\":\"xyz\"}' -> '$.a'\n\u2192 '\"xyz\"'", "'{\"a\":\"xyz\"}' ->> '$.a'\n\u2192 'xyz'", "'{\"a\":null}' -> '$.a'\n\u2192 'null'", "'{\"a\":null}' ->> '$.a'\n\u2192 NULL"], "Category": ["JSON Functions"]}
{"HTML": ["https://sqlite.org/json1.html"], "Title": ["4.10. The json_insert(), json_replace, and json_set() functions"], "Feature": ["4.10. The json_insert(), json_replace, and json_set() functions"], "Description": ["4.10. The json_insert(), json_replace, and json_set() functions", "The json_insert(), json_replace, and json_set() functions all take\na single JSON value as their first argument followed by zero or more\npairs of path and value arguments, and return a new JSON string formed\nby updating the input JSON by the path/value pairs.  The functions\ndiffer only in how they deal with creating new values and overwriting\npreexisting values.\n\n", "\n\n\nFunctionOverwrite if already exists?Create if does not exist?\n\njson_insert()NoYes\n\njson_replace()YesNo\n\njson_set()YesYes\n", "The json_insert(), json_replace(), and json_set() functions always\ntake an odd number of arguments.  The first argument is always the original\nJSON to be edited.  Subsequent arguments occur in pairs with the first\nelement of each pair being a path and the second element being the value\nto insert or replace or set on that path.\n\n", "Edits occur sequentially from left to right.  Changes caused by\nprior edits can affect the path search for subsequent edits.\n\n", "If the value of a path/value pair is an SQLite TEXT value, then it\nis normally inserted as a quoted JSON string, even if the string looks\nlike valid JSON.  However, if the value is the result of another\njson function (such as json() or json_array() or json_object())\nor if it is the result of the -> operator,\nthen it is interpreted as JSON and is inserted as JSON retaining all\nof its substructure.  Values that are the result of the ->> operator\nare always interpreted as TEXT and are inserted as a JSON string even\nif they look like valid JSON.\n\n", "These routines throw an error if the first JSON argument is not\nwell-formed or if any PATH argument is not well-formed or if any\nargument is a BLOB.\n\n", "To append an element onto the end of an array, using json_insert()\nwith an array index of \"#\".  Examples:\n\n", "json_insert('[1,2,3,4]','$[#]',99)\n\u2192 '[1,2,3,4,99]'", "json_insert('[1,[2,3],4]','$[1][#]',99)\n\u2192 '[1,[2,3,99],4]'", "Other examples:\n\n", "json_insert('{\"a\":2,\"c\":4}', '$.a', 99)\n\u2192 '{\"a\":2,\"c\":4}'", "json_insert('{\"a\":2,\"c\":4}', '$.e', 99)\n\u2192 '{\"a\":2,\"c\":4,\"e\":99}'", "json_replace('{\"a\":2,\"c\":4}', '$.a', 99)\n\u2192 '{\"a\":99,\"c\":4}'", "json_replace('{\"a\":2,\"c\":4}', '$.e', 99)\n\u2192 '{\"a\":2,\"c\":4}'", "json_set('{\"a\":2,\"c\":4}', '$.a', 99)\n\u2192 '{\"a\":99,\"c\":4}'", "json_set('{\"a\":2,\"c\":4}', '$.e', 99)\n\u2192 '{\"a\":2,\"c\":4,\"e\":99}'", "json_set('{\"a\":2,\"c\":4}', '$.c', '[97,96]')\n\u2192 '{\"a\":2,\"c\":\"[97,96]\"}'", "json_set('{\"a\":2,\"c\":4}', '$.c', json('[97,96]'))\n\u2192 '{\"a\":2,\"c\":[97,96]}'", "json_set('{\"a\":2,\"c\":4}', '$.c', json_array(97,96))\n\u2192 '{\"a\":2,\"c\":[97,96]}'"], "Examples": ["json_insert('[1,2,3,4]','$[#]',99)\n\u2192 '[1,2,3,4,99]'", "json_insert('[1,[2,3],4]','$[1][#]',99)\n\u2192 '[1,[2,3,99],4]'", "json_insert('{\"a\":2,\"c\":4}', '$.a', 99)\n\u2192 '{\"a\":2,\"c\":4}'", "json_insert('{\"a\":2,\"c\":4}', '$.e', 99)\n\u2192 '{\"a\":2,\"c\":4,\"e\":99}'", "json_replace('{\"a\":2,\"c\":4}', '$.a', 99)\n\u2192 '{\"a\":99,\"c\":4}'", "json_replace('{\"a\":2,\"c\":4}', '$.e', 99)\n\u2192 '{\"a\":2,\"c\":4}'", "json_set('{\"a\":2,\"c\":4}', '$.a', 99)\n\u2192 '{\"a\":99,\"c\":4}'", "json_set('{\"a\":2,\"c\":4}', '$.e', 99)\n\u2192 '{\"a\":2,\"c\":4,\"e\":99}'", "json_set('{\"a\":2,\"c\":4}', '$.c', '[97,96]')\n\u2192 '{\"a\":2,\"c\":\"[97,96]\"}'", "json_set('{\"a\":2,\"c\":4}', '$.c', json('[97,96]'))\n\u2192 '{\"a\":2,\"c\":[97,96]}'", "json_set('{\"a\":2,\"c\":4}', '$.c', json_array(97,96))\n\u2192 '{\"a\":2,\"c\":[97,96]}'"], "Category": ["JSON Functions"]}
{"HTML": ["https://sqlite.org/json1.html"], "Title": ["4.11. The jsonb_insert(), jsonb_replace, and jsonb_set() functions"], "Feature": ["4.11. The jsonb_insert(), jsonb_replace, and jsonb_set() functions"], "Description": ["4.11. The jsonb_insert(), jsonb_replace, and jsonb_set() functions", "The jsonb_insert(), jsonb_replace(), and jsonb_set() functions work the\nsame as json_insert(), json_replace(), and json_set(), respectively,\nexcept that \"jsonb_\" versions return their result in the binary\nJSONB format.\n\n\n"], "Examples": [], "Category": ["JSON Functions"]}
{"HTML": ["https://sqlite.org/json1.html"], "Title": ["4.12. The json_object() function"], "Feature": ["4.12. The json_object() function"], "Description": ["4.12. The json_object() function", "The json_object() SQL function accepts zero or more pairs of arguments\nand returns a well-formed JSON object that is composed from those arguments.\nThe first argument of each pair is the label and the second argument of\neach pair is the value.\nIf any argument to json_object() is a BLOB then an error is thrown.\n\n", "The json_object() function currently allows duplicate labels without\ncomplaint, though this might change in a future enhancement.\n\n", "An argument with SQL type TEXT it is normally converted into a quoted \nJSON string even if the input text is well-formed JSON.  \nHowever, if the argument is the direct result from another JSON\nfunction or the -> operator (but not the ->> operator), \nthen it is treated as JSON and all of its JSON type information\nand substructure is preserved.  This allows calls to json_object()\nand json_array() to be nested.  The json() function can also\nbe used to force strings to be recognized as JSON.\n\n", "Examples:\n\n", "json_object('a',2,'c',4)\n\u2192 '{\"a\":2,\"c\":4}'", "json_object('a',2,'c','{e:5}')\n\u2192 '{\"a\":2,\"c\":\"{e:5}\"}'", "json_object('a',2,'c',json_object('e',5))\n\u2192 '{\"a\":2,\"c\":{\"e\":5}}'"], "Examples": ["json_object('a',2,'c',4)\n\u2192 '{\"a\":2,\"c\":4}'", "json_object('a',2,'c','{e:5}')\n\u2192 '{\"a\":2,\"c\":\"{e:5}\"}'", "json_object('a',2,'c',json_object('e',5))\n\u2192 '{\"a\":2,\"c\":{\"e\":5}}'"], "Category": ["JSON Functions"]}
{"HTML": ["https://sqlite.org/json1.html"], "Title": ["4.13. The jsonb_object() function"], "Feature": ["4.13. The jsonb_object() function"], "Description": ["4.13. The jsonb_object() function", "\nThe jsonb_object() function works just like the json_object() function\nexcept that the generated object is returned in the binary JSONB format.\n\n\n"], "Examples": [], "Category": ["JSON Functions"]}
{"HTML": ["https://sqlite.org/json1.html"], "Title": ["4.14. The json_patch() function"], "Feature": ["4.14. The json_patch() function"], "Description": ["4.14. The json_patch() function", "The json_patch(T,P) SQL function runs the\nRFC-7396 MergePatch algorithm\nto apply patch P against input T.  The patched copy of T is returned.\n\n", "MergePatch can add, modify, or delete elements of a JSON Object,\nand so for JSON Objects, the json_patch() routine is a generalized\nreplacement for json_set() and json_remove().  However, MergePatch\ntreats JSON Array objects as atomic.  MergePatch cannot append to an\nArray nor modify individual elements of an Array.  It can only insert,\nreplace, or delete the whole Array as a single unit.  Hence, json_patch()\nis not as useful when dealing with JSON that includes Arrays,\nespecially Arrays with lots of substructure.\n\n", "Examples:\n\n", "json_patch('{\"a\":1,\"b\":2}','{\"c\":3,\"d\":4}')\n\u2192 '{\"a\":1,\"b\":2,\"c\":3,\"d\":4}'", "json_patch('{\"a\":[1,2],\"b\":2}','{\"a\":9}')\n\u2192 '{\"a\":9,\"b\":2}'", "json_patch('{\"a\":[1,2],\"b\":2}','{\"a\":null}')\n\u2192 '{\"b\":2}'", "json_patch('{\"a\":1,\"b\":2}','{\"a\":9,\"b\":null,\"c\":8}')\n\u2192 '{\"a\":9,\"c\":8}'", "json_patch('{\"a\":{\"x\":1,\"y\":2},\"b\":3}','{\"a\":{\"y\":9},\"c\":8}')\n\u2192 '{\"a\":{\"x\":1,\"y\":9},\"b\":3,\"c\":8}'"], "Examples": ["json_patch('{\"a\":1,\"b\":2}','{\"c\":3,\"d\":4}')\n\u2192 '{\"a\":1,\"b\":2,\"c\":3,\"d\":4}'", "json_patch('{\"a\":[1,2],\"b\":2}','{\"a\":9}')\n\u2192 '{\"a\":9,\"b\":2}'", "json_patch('{\"a\":[1,2],\"b\":2}','{\"a\":null}')\n\u2192 '{\"b\":2}'", "json_patch('{\"a\":1,\"b\":2}','{\"a\":9,\"b\":null,\"c\":8}')\n\u2192 '{\"a\":9,\"c\":8}'", "json_patch('{\"a\":{\"x\":1,\"y\":2},\"b\":3}','{\"a\":{\"y\":9},\"c\":8}')\n\u2192 '{\"a\":{\"x\":1,\"y\":9},\"b\":3,\"c\":8}'"], "Category": ["JSON Functions"]}
{"HTML": ["https://sqlite.org/json1.html"], "Title": ["4.15. The jsonb_patch() function"], "Feature": ["4.15. The jsonb_patch() function"], "Description": ["4.15. The jsonb_patch() function", "\nThe jsonb_patch() function works just like the json_patch() function\nexcept that the patched JSON is returned in the binary JSONB format.\n\n\n"], "Examples": [], "Category": ["JSON Functions"]}
{"HTML": ["https://sqlite.org/json1.html"], "Title": ["4.16. The json_pretty() function"], "Feature": ["4.16. The json_pretty() function"], "Description": ["4.16. The json_pretty() function", "\nThe json_pretty() function works like json() except that it adds\nextra whitespace to make the JSON result easier for humans to read.\nThe first argument is the JSON or JSONB that is to be pretty-printed.\nThe optional second argument is a text string that is used for indentation.\nIf the second argument is omitted or is NULL, then indentation is four\nspaces per level.\n", "\nThe json_pretty() function was added with SQLite version 3.46.0 \n(2024-05-23).\n\n\n"], "Examples": [], "Category": ["JSON Functions"]}
{"HTML": ["https://sqlite.org/json1.html"], "Title": ["4.17. The json_remove() function"], "Feature": ["4.17. The json_remove() function"], "Description": ["4.17. The json_remove() function", "The json_remove(X,P,...) function takes a single JSON value as its\nfirst argument followed by zero or more path arguments.\nThe json_remove(X,P,...) function returns\na copy of the X parameter with all the elements \nidentified by path arguments removed.  Paths that select elements\nnot found in X are silently ignored.\n\n", "Removals occurs sequentially from left to right.  Changes caused by\nprior removals can affect the path search for subsequent arguments.\n\n", "If the json_remove(X) function is called with no path arguments,\nthen it returns the input X reformatted, with excess whitespace\nremoved.\n\n", "The json_remove() function throws an error if the first argument\nis not well-formed JSON or if any later argument is not a well-formed\npath.\n\n", "Examples:\n\n", "json_remove('[0,1,2,3,4]','$[2]')\n\u2192 '[0,1,3,4]'", "json_remove('[0,1,2,3,4]','$[2]','$[0]')\n\u2192 '[1,3,4]'", "json_remove('[0,1,2,3,4]','$[0]','$[2]')\n\u2192 '[1,2,4]'", "json_remove('[0,1,2,3,4]','$[#-1]','$[0]')\n\u2192 '[1,2,3]'", "json_remove('{\"x\":25,\"y\":42}')\n\u2192 '{\"x\":25,\"y\":42}'", "json_remove('{\"x\":25,\"y\":42}','$.z')\n\u2192 '{\"x\":25,\"y\":42}'", "json_remove('{\"x\":25,\"y\":42}','$.y')\n\u2192 '{\"x\":25}'", "json_remove('{\"x\":25,\"y\":42}','$')\n\u2192 NULL"], "Examples": ["json_remove('[0,1,2,3,4]','$[2]')\n\u2192 '[0,1,3,4]'", "json_remove('[0,1,2,3,4]','$[2]','$[0]')\n\u2192 '[1,3,4]'", "json_remove('[0,1,2,3,4]','$[0]','$[2]')\n\u2192 '[1,2,4]'", "json_remove('[0,1,2,3,4]','$[#-1]','$[0]')\n\u2192 '[1,2,3]'", "json_remove('{\"x\":25,\"y\":42}')\n\u2192 '{\"x\":25,\"y\":42}'", "json_remove('{\"x\":25,\"y\":42}','$.z')\n\u2192 '{\"x\":25,\"y\":42}'", "json_remove('{\"x\":25,\"y\":42}','$.y')\n\u2192 '{\"x\":25}'", "json_remove('{\"x\":25,\"y\":42}','$')\n\u2192 NULL"], "Category": ["JSON Functions"]}
{"HTML": ["https://sqlite.org/json1.html"], "Title": ["4.18. The jsonb_remove() function"], "Feature": ["4.18. The jsonb_remove() function"], "Description": ["4.18. The jsonb_remove() function", "\nThe jsonb_remove() function works just like the json_remove() function\nexcept that the edited JSON result is returned in the binary JSONB format.\n\n\n"], "Examples": [], "Category": ["JSON Functions"]}
{"HTML": ["https://sqlite.org/json1.html"], "Title": ["4.19. The json_type() function"], "Feature": ["4.19. The json_type() function"], "Description": ["4.19. The json_type() function", "The json_type(X) function returns the \"type\" of the outermost element\nof X.  The json_type(X,P) function returns the \"type\" of the element\nin X that is selected by path P.  The \"type\" returned by json_type() is\none of the following SQL text values:\n'null', 'true', 'false', 'integer', 'real', 'text', 'array', or 'object'.\nIf the path P in json_type(X,P) selects an element that does not exist\nin X, then this function returns NULL.\n\n", "The json_type() function throws an error if its first argument is\nnot well-formed JSON or JSONB or if its second argument is not a well-formed\nJSON path.\n\n", "Examples:\n\n", "json_type('{\"a\":[2,3.5,true,false,null,\"x\"]}')\n\u2192 'object'", "json_type('{\"a\":[2,3.5,true,false,null,\"x\"]}','$')\n\u2192 'object'", "json_type('{\"a\":[2,3.5,true,false,null,\"x\"]}','$.a')\n\u2192 'array'", "json_type('{\"a\":[2,3.5,true,false,null,\"x\"]}','$.a[0]')\n\u2192 'integer'", "json_type('{\"a\":[2,3.5,true,false,null,\"x\"]}','$.a[1]')\n\u2192 'real'", "json_type('{\"a\":[2,3.5,true,false,null,\"x\"]}','$.a[2]')\n\u2192 'true'", "json_type('{\"a\":[2,3.5,true,false,null,\"x\"]}','$.a[3]')\n\u2192 'false'", "json_type('{\"a\":[2,3.5,true,false,null,\"x\"]}','$.a[4]')\n\u2192 'null'", "json_type('{\"a\":[2,3.5,true,false,null,\"x\"]}','$.a[5]')\n\u2192 'text'", "json_type('{\"a\":[2,3.5,true,false,null,\"x\"]}','$.a[6]')\n\u2192 NULL"], "Examples": ["json_type('{\"a\":[2,3.5,true,false,null,\"x\"]}')\n\u2192 'object'", "json_type('{\"a\":[2,3.5,true,false,null,\"x\"]}','$')\n\u2192 'object'", "json_type('{\"a\":[2,3.5,true,false,null,\"x\"]}','$.a')\n\u2192 'array'", "json_type('{\"a\":[2,3.5,true,false,null,\"x\"]}','$.a[0]')\n\u2192 'integer'", "json_type('{\"a\":[2,3.5,true,false,null,\"x\"]}','$.a[1]')\n\u2192 'real'", "json_type('{\"a\":[2,3.5,true,false,null,\"x\"]}','$.a[2]')\n\u2192 'true'", "json_type('{\"a\":[2,3.5,true,false,null,\"x\"]}','$.a[3]')\n\u2192 'false'", "json_type('{\"a\":[2,3.5,true,false,null,\"x\"]}','$.a[4]')\n\u2192 'null'", "json_type('{\"a\":[2,3.5,true,false,null,\"x\"]}','$.a[5]')\n\u2192 'text'", "json_type('{\"a\":[2,3.5,true,false,null,\"x\"]}','$.a[6]')\n\u2192 NULL"], "Category": ["JSON Functions"]}
{"HTML": ["https://sqlite.org/json1.html"], "Title": ["4.20. The json_valid() function"], "Feature": ["4.20. The json_valid() function"], "Description": ["4.20. The json_valid() function", "The json_valid(X,Y) function return 1 if the argument X is well-formed\nJSON, or returns 0 if X is not well-formed.  The Y parameter is an integer\nbitmask that defines what is meant by \"well-formed\".  The following bits\nof Y are currently defined:\n\n", " 0x01 \u2192\nThe input is text that strictly complies with canonical RFC-8259 JSON,\nwithout any extensions.\n", " 0x02 \u2192\nThe input is text that is JSON with JSON5 extensions described above.\n", " 0x04 \u2192\nThe input is a BLOB that superficially appears to be JSONB.\n", " 0x08 \u2192\nThe input is a BLOB that strictly conforms to the internal JSONB format.\n", "By combining bits, the following useful values of Y can be derived:\n\n", " 1 \u2192 X is RFC-8259 JSON text\n", " 2 \u2192 X is JSON5 text\n", " 4 \u2192 X is probably JSONB\n", " 5 \u2192 X is RFC-8259 JSON text or JSONB\n", " 6 \u2192 X is JSON5 text or JSONB\n     \u2190 This is probably the value you want\n", " 8 \u2192 X is strictly conforming JSONB\n", " 9 \u2192 X is RFC-8259 or strictly conforming JSONB\n", " 10 \u2192 X is JSON5 or strictly conforming JSONB\n", "The Y parameter is optional. If omitted, it defaults to 1, which means\nthat the default behavior is to return true only if the input X is\nstrictly conforming RFC-8259 JSON text without any extensions.  This\nmakes the one-argument version of json_valid() compatible with older\nversions of SQLite, prior to the addition of support for\nJSON5 and JSONB.\n\n", "The difference between 0x04 and 0x08 bits in the Y parameter is that\n0x04 only examines the outer wrapper of the BLOB to see if it superficially\nlooks like JSONB.  This is sufficient for must purposes and is very fast.\nThe 0x08 bit does a thorough examination of all internal details of the BLOB.\nThe 0x08 bit takes time that is linear in the size of the X input and is much\nslower.  The 0x04 bit is recommended for most purposes.\n\n", "If you just want to know if a value is a plausible input to one of\nthe other JSON functions, a Y value of 6 is probably what you want to use.\n\n", "Any Y value less than 1 or greater than 15 raises an error, for the\nlatest version of json_valid().  However, future versions of json_valid()\nmight be enhanced to accept flag values outside of this range, having new\nmeanings that we have not yet thought of.\n\n", "If either X or Y inputs to json_valid() are NULL, then the function\nreturns NULL.\n\n", "Examples:\n\n", "json_valid('{\"x\":35}')\n\u2192 1", "json_valid('{x:35}')\n\u2192 0", "json_valid('{x:35}',6)\n\u2192 1", "json_valid('{\"x\":35')\n\u2192 0", "json_valid(NULL)\n\u2192 NULL"], "Examples": [" 0x01 \u2192\nThe input is text that strictly complies with canonical RFC-8259 JSON,\nwithout any extensions.\n", " 0x02 \u2192\nThe input is text that is JSON with JSON5 extensions described above.\n", " 0x04 \u2192\nThe input is a BLOB that superficially appears to be JSONB.\n", " 0x08 \u2192\nThe input is a BLOB that strictly conforms to the internal JSONB format.\n", " 1 \u2192 X is RFC-8259 JSON text\n", " 2 \u2192 X is JSON5 text\n", " 4 \u2192 X is probably JSONB\n", " 5 \u2192 X is RFC-8259 JSON text or JSONB\n", " 6 \u2192 X is JSON5 text or JSONB\n     \u2190 This is probably the value you want\n", " 8 \u2192 X is strictly conforming JSONB\n", " 9 \u2192 X is RFC-8259 or strictly conforming JSONB\n", " 10 \u2192 X is JSON5 or strictly conforming JSONB\n", "json_valid('{\"x\":35}')\n\u2192 1", "json_valid('{x:35}')\n\u2192 0", "json_valid('{x:35}',6)\n\u2192 1", "json_valid('{\"x\":35')\n\u2192 0", "json_valid(NULL)\n\u2192 NULL"], "Category": ["JSON Functions"]}
{"HTML": ["https://sqlite.org/json1.html"], "Title": ["4.21. The json_quote() function"], "Feature": ["4.21. The json_quote() function"], "Description": ["4.21. The json_quote() function", "The json_quote(X) function converts the SQL value X (a number or a\nstring) into its corresponding JSON representation.  If X is a JSON value\nreturned by another JSON function, then this function is a no-op.\n\n", "Examples:\n\n", "json_quote(3.14159)\n\u2192 3.14159", "json_quote('verdant')\n\u2192 '\"verdant\"'", "json_quote('[1]')\n\u2192 '\"[1]\"'", "json_quote(json('[1]'))\n\u2192 '[1]'", "json_quote('[1,')\n\u2192 '\"[1,\"'"], "Examples": ["json_quote(3.14159)\n\u2192 3.14159", "json_quote('verdant')\n\u2192 '\"verdant\"'", "json_quote('[1]')\n\u2192 '\"[1]\"'", "json_quote(json('[1]'))\n\u2192 '[1]'", "json_quote('[1,')\n\u2192 '\"[1,\"'"], "Category": ["JSON Functions"]}
{"HTML": ["https://sqlite.org/json1.html"], "Title": ["4.22. Array and object aggregate functions"], "Feature": ["4.22. Array and object aggregate functions"], "Description": ["4.22. Array and object aggregate functions", "The json_group_array(X) function is an\naggregate SQL function that returns a JSON array\ncomprised of all X values in the aggregation.\nSimilarly, the json_group_object(NAME,VALUE) function returns a JSON object\ncomprised of all NAME/VALUE pairs in the aggregation.\nThe \"jsonb_\" variants are the same except that they return their\nresult in the binary JSONB format.\n\n\n\n"], "Examples": [], "Category": ["JSON Functions"]}
{"HTML": ["https://sqlite.org/json1.html"], "Title": ["4.23. The json_each() and json_tree() table-valued functions"], "Feature": ["4.23. The json_each() and json_tree() table-valued functions"], "Description": ["4.23. The json_each() and json_tree() table-valued functions", "The json_each(X) and json_tree(X) table-valued functions walk the\nJSON value provided as their first argument and return one row for each\nelement.  The json_each(X) function only walks the immediate children\nof the top-level array or object,\nor just the top-level element itself if the top-level\nelement is a primitive value.\nThe json_tree(X) function recursively walks through the\nJSON substructure starting with the top-level element.  \n\n", "The json_each(X,P) and json_tree(X,P) functions work just like\ntheir one-argument counterparts except that they treat the element\nidentified by path P as the top-level element.\n\n", "The schema for the table returned by json_each() and json_tree() is\nas follows:\n\n", "CREATE TABLE json_tree(\n    key ANY,             -- key for current element relative to its parent\n    value ANY,           -- value for the current element\n    type TEXT,           -- 'object','array','string','integer', etc.\n    atom ANY,            -- value for primitive types, null for array & object\n    id INTEGER,          -- integer ID for this element\n    parent INTEGER,      -- integer ID for the parent of this element\n    fullkey TEXT,        -- full path describing the current element\n    path TEXT,           -- path to the container of the current row\n    json JSON HIDDEN,    -- 1st input parameter: the raw JSON\n    root TEXT HIDDEN     -- 2nd input parameter: the PATH at which to start\n);\n", "\nThe \"key\" column is the integer array index for elements of a JSON array \nand the text label for elements of a JSON object.  The key column is\nNULL in all other cases.\n\n", "\nThe \"atom\" column is the SQL value corresponding to primitive elements - \nelements other than JSON arrays and objects.  The \"atom\" column is NULL\nfor a JSON array or object.  The \"value\" column is the same as the\n\"atom\" column for primitive JSON elements but takes on the text JSON value\nfor arrays and objects.\n\n", "\nThe \"type\" column is an SQL text value taken from ('null', 'true', 'false',\n'integer', 'real', 'text', 'array', 'object') according to the type of\nthe current JSON element.\n\n", "\nThe \"id\" column is an integer that identifies a specific JSON element\nwithin the complete JSON string.  The \"id\" integer is an internal housekeeping\nnumber, the computation of which might change in future releases.  The\nonly guarantee is that the \"id\" column will be different for every row.\n\n", "\nThe \"parent\" column is always NULL for json_each().\nFor json_tree(),\nthe \"parent\" column is the \"id\" integer for the parent of the current\nelement, or NULL for the top-level JSON element or the element identified\nby the root path in the second argument.\n\n", "\nThe \"fullkey\" column is a text path that uniquely identifies the current\nrow element within the original JSON string.  The complete key to the\ntrue top-level element is returned even if an alternative starting point\nis provided by the \"root\" argument.\n\n", "\nThe \"path\" column is the path to the array or object container that holds \nthe current row, or the path to the current row in the case where the \niteration starts on a primitive type and thus only provides a single\nrow of output.\n\n", "4.23.1. Examples using json_each() and json_tree()", "Suppose the table \"CREATE TABLE user(name,phone)\" stores zero or\nmore phone numbers as a JSON array object in the user.phone field.\nTo find all users who have any phone number with a 704 area code:\n\n", "SELECT DISTINCT user.name\n  FROM user, json_each(user.phone)\n WHERE json_each.value LIKE '704-%';\n", "Now suppose the user.phone field contains plain text if the user\nhas only a single phone number and a JSON array if the user has multiple\nphone numbers.  The same question is posed: \"Which users have a phone number\nin the 704 area code?\"  But now the json_each() function can only be called\nfor those users that have two or more phone numbers since json_each()\nrequires well-formed JSON as its first argument:\n\n", "SELECT name FROM user WHERE phone LIKE '704-%'\nUNION\nSELECT user.name\n  FROM user, json_each(user.phone)\n WHERE json_valid(user.phone)\n   AND json_each.value LIKE '704-%';\n", "Consider a different database with \"CREATE TABLE big(json JSON)\".\nTo see a complete line-by-line decomposition of the data:\n\n", "SELECT big.rowid, fullkey, value\n  FROM big, json_tree(big.json)\n WHERE json_tree.type NOT IN ('object','array');\n", "In the previous, the \"type NOT IN ('object','array')\" term of the\nWHERE clause suppresses containers and only lets through leaf elements.\nThe same effect could be achieved this way:\n\n", "SELECT big.rowid, fullkey, atom\n  FROM big, json_tree(big.json)\n WHERE atom IS NOT NULL;\n", "Suppose each entry in the BIG table is a JSON object \nwith a '$.id' field that is a unique identifier\nand a '$.partlist' field that can be a deeply nested object.\nYou want to find the id of every entry that contains one\nor more references to uuid '6fa5181e-5721-11e5-a04e-57f3d7b32808' anywhere\nin its '$.partlist'.\n\n", "SELECT DISTINCT json_extract(big.json,'$.id')\n  FROM big, json_tree(big.json, '$.partlist')\n WHERE json_tree.key='uuid'\n   AND json_tree.value='6fa5181e-5721-11e5-a04e-57f3d7b32808';\n", "This page last modified on  2024-09-18 15:57:24 UTC "], "Examples": [], "Category": ["JSON Functions"]}
