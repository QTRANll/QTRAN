{"HTML": ["https://sqlite.org/lang_corefunc.html#abs"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["abs(X)"], "Description": ["The abs(X) function returns the absolute value of the numeric\n  argument X.  Abs(X) returns NULL if X is NULL.\n  Abs(X) returns 0.0 if X is a string or blob\n  that cannot be converted to a numeric value.  If X is the\n  integer -9223372036854775808 then abs(X) throws an integer overflow\n  error since there is no equivalent positive 64-bit two complement value."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#changes"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["changes()"], "Description": ["The changes() function returns the number of database rows that were changed\n  or inserted or deleted by the most recently completed INSERT, DELETE,\n  or UPDATE statement, exclusive of statements in lower-level triggers.\n  The changes() SQL function is a wrapper around thesqlite3_changes64()C/C++ function and hence follows the same rules for counting changes."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#char"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["char(X1,X2,...,XN)"], "Description": ["The char(X1,X2,...,XN) function returns a string composed of characters having the\n   unicode code point values of integers X1 through XN, respectively."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#coalesce"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["coalesce(X,Y,...)"], "Description": ["The coalesce() function returns a copy of its first non-NULL argument, or\n  NULL if all arguments are NULL.  Coalesce() must have at least \n  2 arguments."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#concat"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["concat(X,...)"], "Description": ["The concat(...) function returns a string which is the concatenation of the\n  string representation of all of its non-NULL arguments.  If all arguments are\n  NULL, then concat() returns an empty string."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#concat_ws"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["concat_ws(SEP,X,...)"], "Description": ["The concat_ws(SEP,...) function returns a string that is the concatenation of\n  all non-null arguments beyond the first argument, using the text value of the\n  first argument as a separator.  If the first argument is NULL, then concat_ws()\n  returns NULL.  If all arguments other than the first are NULL, then concat_ws()\n  returns an empty string."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#format"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["format(FORMAT,...)"], "Description": ["The format(FORMAT,...) SQL function works like thesqlite3_mprintf()C-language\n  function and the printf() function from the standard C library.\n  The first argument is a format string that specifies how to construct the output\n  string using values taken from subsequent arguments.  If the FORMAT argument is\n  missing or NULL then the result is NULL.  The %n format is silently ignored and\n  does not consume an argument.  The %p format is an alias for %X.  The %z format\n  is interchangeable with %s.  If there are too few arguments in the argument list,\n  missing arguments are assumed to have a NULL value, which is translated into\n  0 or 0.0 for numeric formats or an empty string for %s.  See thebuilt-in printf()documentation for additional information."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#glob"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["glob(X,Y)"], "Description": ["The glob(X,Y) function is equivalent to the\n  expression \"Y GLOB X\".\n  Note that the X and Y arguments are reversed in the glob() function\n  relative to the infixGLOBoperator.  Y is the string and X is the\n  pattern.  So, for example, the following expressions are equivalent:If thesqlite3_create_function()interface is used to\n  override the glob(X,Y) function with an alternative implementation then\n  theGLOBoperator will invoke the alternative implementation."], "Examples": ["name GLOB '*helium*'\n     glob('*helium*',name)"], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#hex"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["hex(X)"], "Description": ["The hex() function interprets its argument as a BLOB and returns\n  a string which is the upper-case hexadecimal rendering of the content of\n  that blob.If the argumentXin \"hex(X)\" is an\n  integer or floating point number, then \"interprets its argument as a BLOB\" means\n  that the binary number is first converted into a UTF8 text representation, then\n  that text is interpreted as a BLOB.  Hence, \"hex(12345678)\" renders\n  as \"3132333435363738\" not the binary representation of the integer value\n  \"0000000000BC614E\".See also:unhex()"], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#ifnull"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["ifnull(X,Y)"], "Description": ["The ifnull() function returns a copy of its first non-NULL argument, or\n  NULL if both arguments are NULL.  Ifnull() must have exactly 2 arguments.\n  The ifnull() function is equivalent tocoalesce()with two arguments."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#iif"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["iif(X,Y,Z)"], "Description": ["The iif(X,Y,Z) function returns the value Y if X is true, and Z otherwise.\n  The iif(X,Y,Z) function is logically equivalent to and generates the samebytecodeas theCASE expression\"CASE WHEN X THEN Y ELSE Z END\"."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#instr"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["instr(X,Y)"], "Description": ["The instr(X,Y) function finds the first occurrence of string Y within \n  string X and returns the number of prior characters plus 1, or 0 if\n  Y is nowhere found within X.\n  Or, if X and Y are both BLOBs, then instr(X,Y) returns one\n  more than the number bytes prior to the first occurrence of Y, or 0 if\n  Y does not occur anywhere within X.\n  If both arguments X and Y to instr(X,Y) are non-NULL and are not BLOBs\n  then both are interpreted as strings.\n  If either X or Y are NULL in instr(X,Y) then the result is NULL."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#last_insert_rowid"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["last_insert_rowid()"], "Description": ["The last_insert_rowid() function returns theROWIDof the last row insert from the database connection which invoked the\n  function.\n  The last_insert_rowid() SQL function is a wrapper around thesqlite3_last_insert_rowid()C/C++ interface function."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#length"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["length(X)"], "Description": ["For a string value X, the length(X) function returns the number of \n  characters (not bytes) in X prior to the first NUL character.\n  Since SQLite strings do not normally contain NUL characters, the length(X)\n  function will usually return the total number of characters in the string X.\n  For a blob value X, length(X) returns the number of bytes in the blob.\n  If X is NULL then length(X) is NULL.\n  If X is numeric then length(X) returns the length of a string\n  representation of X.Note that for strings, the length(X) function returns thecharacterlength of the string, not the byte length.  The character length is the number\n  of characters in the string.  The character length is always different from\n  the byte length for UTF-16 strings, and can be different from the byte length\n  for UTF-8 strings if the string contains multi-byte characters.  Use theoctet_length()function to find the byte length of a string.For BLOB values, length(X) always returns the byte-length of the BLOB.For string values, length(X) must read the entire string into memory in order\n  to compute the character length.  But for BLOB values, that is not necessary as\n  SQLite knows how many bytes are in the BLOB.  Hence, for multi-megabyte values,\n  the length(X) function is usually much faster for BLOBs than for strings, since\n  it does not need to load the value into memory."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#like"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["like(X,Y)"], "Description": ["The like() function is used to implement the\n  \"Y LIKE X [ESCAPE Z]\" expression. \n  If the optional ESCAPE clause is present, then the\n  like() function is invoked with three arguments.  Otherwise, it is\n  invoked with two arguments only. Note that the X and Y parameters are\n  reversed in the like() function relative to the infixLIKEoperator.\n  X is the pattern and Y is the string to match against that pattern.\n  Hence, the following expressions are equivalent:Thesqlite3_create_function()interface can be used to override the\n  like() function and thereby change the operation of theLIKEoperator.  When overriding the like() function, it may be important\n  to override both the two and three argument versions of the like() \n  function. Otherwise, different code may be called to implement theLIKEoperator depending on whether or not an ESCAPE clause was \n  specified."], "Examples": ["name LIKE '%neon%'\n     like('%neon%',name)"], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#like"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["like(X,Y,Z)"], "Description": ["The like() function is used to implement the\n  \"Y LIKE X [ESCAPE Z]\" expression. \n  If the optional ESCAPE clause is present, then the\n  like() function is invoked with three arguments.  Otherwise, it is\n  invoked with two arguments only. Note that the X and Y parameters are\n  reversed in the like() function relative to the infixLIKEoperator.\n  X is the pattern and Y is the string to match against that pattern.\n  Hence, the following expressions are equivalent:Thesqlite3_create_function()interface can be used to override the\n  like() function and thereby change the operation of theLIKEoperator.  When overriding the like() function, it may be important\n  to override both the two and three argument versions of the like() \n  function. Otherwise, different code may be called to implement theLIKEoperator depending on whether or not an ESCAPE clause was \n  specified."], "Examples": ["name LIKE '%neon%'\n     like('%neon%',name)"], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#likelihood"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["likelihood(X,Y)"], "Description": ["The likelihood(X,Y) function returns argument X unchanged.\n  The value Y in likelihood(X,Y) must be a floating point constant\n  between 0.0 and 1.0, inclusive.\n  The likelihood(X) function is a no-op that the code generator\n  optimizes away so that it consumes no CPU cycles during run-time\n  (that is, during calls tosqlite3_step()).\n  The purpose of the likelihood(X,Y) function is to provide a hint\n  to the query planner that the argument X is a boolean that is\n  true with a probability of approximately Y.\n  Theunlikely(X)function is short-hand for likelihood(X,0.0625).\n  Thelikely(X)function is short-hand for likelihood(X,0.9375)."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#likely"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["likely(X)"], "Description": ["The likely(X) function returns the argument X unchanged.\n  The likely(X) function is a no-op that the code generator\n  optimizes away so that it consumes no CPU cycles at\n  run-time (that is, during calls tosqlite3_step()).\n  The purpose of the likely(X) function is to provide a hint\n  to the query planner that the argument X is a boolean value\n  that is usually true. The likely(X) function is equivalent\n  tolikelihood(X,0.9375). See also:unlikely(X)."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#load_extension"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["load_extension(X)"], "Description": ["The load_extension(X,Y) function loadsSQLite extensionsout of the shared\n  library file named X using the entry point Y.  The result of load_extension()\n  is always a NULL.  If Y is omitted then the default entry point name is used.\n  The load_extension() function raises an exception if the extension fails to\n  load or initialize correctly.The load_extension() function will fail if the extension attempts to \n  modify or delete an SQL function or collating sequence.  The\n  extension can add new functions or collating sequences, but cannot\n  modify or delete existing functions or collating sequences because\n  those functions and/or collating sequences might be used elsewhere\n  in the currently running SQL statement.  To load an extension that\n  changes or deletes functions or collating sequences, use thesqlite3_load_extension()C-language API.For security reasons, extension loading is disabled by default and must\n  be enabled by a prior call tosqlite3_enable_load_extension()."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#load_extension"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["load_extension(X,Y)"], "Description": ["The load_extension(X,Y) function loadsSQLite extensionsout of the shared\n  library file named X using the entry point Y.  The result of load_extension()\n  is always a NULL.  If Y is omitted then the default entry point name is used.\n  The load_extension() function raises an exception if the extension fails to\n  load or initialize correctly.The load_extension() function will fail if the extension attempts to \n  modify or delete an SQL function or collating sequence.  The\n  extension can add new functions or collating sequences, but cannot\n  modify or delete existing functions or collating sequences because\n  those functions and/or collating sequences might be used elsewhere\n  in the currently running SQL statement.  To load an extension that\n  changes or deletes functions or collating sequences, use thesqlite3_load_extension()C-language API.For security reasons, extension loading is disabled by default and must\n  be enabled by a prior call tosqlite3_enable_load_extension()."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#lower"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["lower(X)"], "Description": ["The lower(X) function returns a copy of string X with all ASCII characters\n  converted to lower case.  The default built-in lower() function works\n  for ASCII characters only.  To do case conversions on non-ASCII\n  characters, load the ICU extension."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#ltrim"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["ltrim(X)"], "Description": ["The ltrim(X,Y) function returns a string formed by removing any and all\n  characters that appear in Y from the left side of X.\n  If the Y argument is omitted, ltrim(X) removes spaces from the left side\n  of X."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#ltrim"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["ltrim(X,Y)"], "Description": ["The ltrim(X,Y) function returns a string formed by removing any and all\n  characters that appear in Y from the left side of X.\n  If the Y argument is omitted, ltrim(X) removes spaces from the left side\n  of X."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#max_scalar"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["max(X,Y,...)"], "Description": ["The multi-argument max() function returns the argument with the \n  maximum value, or return NULL if any argument is NULL. \n  The multi-argument max() function searches its arguments from left to right\n  for an argument that defines a collating function and uses that collating\n  function for all string comparisons.  If none of the arguments to max()\n  define a collating function, then the BINARY collating function is used.\n  Note thatmax()is a simple function when\n  it has 2 or more arguments but operates as anaggregate functionif given only a single argument."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#min_scalar"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["min(X,Y,...)"], "Description": ["The multi-argument min() function returns the argument with the\n  minimum value.\n  The multi-argument min() function searches its arguments from left to right\n  for an argument that defines a collating function and uses that collating\n  function for all string comparisons.  If none of the arguments to min()\n  define a collating function, then the BINARY collating function is used.\n  Note thatmin()is a simple function when\n  it has 2 or more arguments but operates as anaggregate functionif given\n  only a single argument."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#nullif"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["nullif(X,Y)"], "Description": ["The nullif(X,Y) function returns its first argument if the arguments are\n  different and NULL if the arguments are the same.  The nullif(X,Y) function\n  searches its arguments from left to right for an argument that defines a\n  collating function and uses that collating function for all string\n  comparisons.  If neither argument to nullif() defines a collating function\n  then the BINARY collating function is used."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#octet_length"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["octet_length(X)"], "Description": ["The octet_length(X) function returns the number of bytes in the encoding\n  of text string X.  If X is NULL then octet_length(X) returns NULL.  If X is\n  a BLOB value, then octet_length(X) is the same aslength(X).  If X is a\n  numeric value, then octet_length(X) returns the number of bytes in a text\n  rendering of that number.Because octet_length(X) returns the number of bytes in X, not the number\n  of characters, the value returned depends on the database encoding.  The\n  octet_length() function can return different answers for the same input string\n  if the database encoding is UTF16 instead of UTF8.If argument X is a table column and the value is of type text or blob,\n  then octet_length(X) avoids reading the content of X from disk, as the byte\n  length can be computed from metadata.  Thus, octet_length(X) is efficient\n  even if X is a column containing a multi-megabyte text or blob value."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#printf"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["printf(FORMAT,...)"], "Description": ["The printf() SQL function is an alias for theformat() SQL function.\n  The format() SQL function was originally named printf(). But the name was\n  later changed to format() for compatibility with other database engines.\n  The printf() name is retained as an alias so as not to break legacy code."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#quote"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["quote(X)"], "Description": ["The quote(X) function returns the text of an SQL literal which\n  is the value of its argument suitable for inclusion into an SQL statement.\n  Strings are surrounded by single-quotes with escapes on interior quotes\n  as needed.  BLOBs are encoded as hexadecimal literals.\n  Strings with embedded NUL characters cannot be represented as string\n  literals in SQL and hence the returned string literal is truncated prior\n  to the first NUL."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#random"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["random()"], "Description": ["The random() function returns a pseudo-random integer\n  between -9223372036854775808 and +9223372036854775807."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#randomblob"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["randomblob(N)"], "Description": ["The randomblob(N) function return an N-byte blob containing pseudo-random\n  bytes. If N is less than 1 then a 1-byte random blob is returned.Hint:  applications can generate globally unique identifiers\n  using this function together withhex()and/orlower()like this:"], "Examples": ["hex(randomblob(16))lower(hex(randomblob(16)))"], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#replace"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["replace(X,Y,Z)"], "Description": ["The replace(X,Y,Z) function returns a string formed by substituting\n  string Z for every occurrence of string Y in string X.  TheBINARYcollating sequence is used for comparisons.  If Y is an empty\n  string then return X unchanged.  If Z is not initially\n  a string, it is cast to a UTF-8 string prior to processing."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#round"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["round(X)"], "Description": ["The round(X,Y) function returns a floating-point\n  value X rounded to Y digits to the right of the decimal point.\n  If the Y argument is omitted or negative, it is taken to be 0."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#round"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["round(X,Y)"], "Description": ["The round(X,Y) function returns a floating-point\n  value X rounded to Y digits to the right of the decimal point.\n  If the Y argument is omitted or negative, it is taken to be 0."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#rtrim"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["rtrim(X)"], "Description": ["The rtrim(X,Y) function returns a string formed by removing any and all\n  characters that appear in Y from the right side of X.\n  If the Y argument is omitted, rtrim(X) removes spaces from the right\n  side of X."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#rtrim"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["rtrim(X,Y)"], "Description": ["The rtrim(X,Y) function returns a string formed by removing any and all\n  characters that appear in Y from the right side of X.\n  If the Y argument is omitted, rtrim(X) removes spaces from the right\n  side of X."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#sign"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["sign(X)"], "Description": ["The sign(X) function returns -1, 0, or +1 if the argument X is a numeric\n  value that is negative, zero, or positive, respectively.  If the argument\n  to sign(X) is NULL or is a string or blob that cannot be losslessly converted\n  into a number, then sign(X) returns NULL."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#soundex"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["soundex(X)"], "Description": ["The soundex(X) function returns a string that is the soundex encoding \n  of the string X.\n  The string \"?000\" is returned if the argument is NULL or contains\n  no ASCII alphabetic characters.\n  This function is omitted from SQLite by default.\n  It is only available if theSQLITE_SOUNDEXcompile-time option\n  is used when SQLite is built."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#sqlite_compileoption_get"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["sqlite_compileoption_get(N)"], "Description": ["The sqlite_compileoption_get() SQL function is a wrapper around thesqlite3_compileoption_get()C/C++ function.\n  This routine returns the N-th compile-time option used to build SQLite\n  or NULL if N is out of range.  See also thecompile_options pragma."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#sqlite_compileoption_used"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["sqlite_compileoption_used(X)"], "Description": ["The sqlite_compileoption_used() SQL function is a wrapper around thesqlite3_compileoption_used()C/C++ function.\n  When the argument X to sqlite_compileoption_used(X) is a string which\n  is the name of a compile-time option, this routine returns true (1) or\n  false (0) depending on whether or not that option was used during the\n  build."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#sqlite_offset"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["sqlite_offset(X)"], "Description": ["The sqlite_offset(X) function returns the byte offset in the database\n  file for the beginning of the record from which value would be read.\n  If X is not a column in an ordinary table, then sqlite_offset(X) returns\n  NULL.  The value returned by sqlite_offset(X) might reference either the\n  original table or an index, depending on the query.  If the value X would\n  normally be extracted from an index, the sqlite_offset(X) returns the\n  offset to the corresponding index record.  If the value X would be\n  extracted from the original table, then sqlite_offset(X) returns the offset\n  to the table record.The sqlite_offset(X) SQL function is only available if SQLite is built\n  using the-DSQLITE_ENABLE_OFFSET_SQL_FUNCcompile-time option."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#sqlite_source_id"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["sqlite_source_id()"], "Description": ["The sqlite_source_id() function returns a string that identifies the\n  specific version of the source code that was used to build the SQLite\n  library.  The string returned by sqlite_source_id() is\n  the date and time that the source code was checked in followed by\n  the SHA3-256 hash for that check-in.  This function is\n  an SQL wrapper around thesqlite3_sourceid()C interface."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#sqlite_version"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["sqlite_version()"], "Description": ["The sqlite_version() function returns the version string for the SQLite\n  library that is running.  This function is an SQL\n  wrapper around thesqlite3_libversion()C-interface."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#substr"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["substr(X,Y)"], "Description": ["The substr(X,Y,Z) function returns a substring of input string X that begins\n  with the Y-th character and which is Z characters long.\n  If Z is omitted then substr(X,Y) returns all characters through the end\n  of the string X beginning with the Y-th.\n  The left-most character of X is number 1.  If Y is negative\n  then the first character of the substring is found by counting from the\n  right rather than the left.  If Z is negative then\n  the abs(Z) characters preceding the Y-th character are returned.\n  If X is a string then characters indices refer to actual UTF-8 \n  characters.  If X is a BLOB then the indices refer to bytes.\"substring()\" is an alias for \"substr()\" beginning with SQLite version 3.34."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#substr"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["substr(X,Y,Z)"], "Description": ["The substr(X,Y,Z) function returns a substring of input string X that begins\n  with the Y-th character and which is Z characters long.\n  If Z is omitted then substr(X,Y) returns all characters through the end\n  of the string X beginning with the Y-th.\n  The left-most character of X is number 1.  If Y is negative\n  then the first character of the substring is found by counting from the\n  right rather than the left.  If Z is negative then\n  the abs(Z) characters preceding the Y-th character are returned.\n  If X is a string then characters indices refer to actual UTF-8 \n  characters.  If X is a BLOB then the indices refer to bytes.\"substring()\" is an alias for \"substr()\" beginning with SQLite version 3.34."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#substr"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["substring(X,Y)"], "Description": ["The substr(X,Y,Z) function returns a substring of input string X that begins\n  with the Y-th character and which is Z characters long.\n  If Z is omitted then substr(X,Y) returns all characters through the end\n  of the string X beginning with the Y-th.\n  The left-most character of X is number 1.  If Y is negative\n  then the first character of the substring is found by counting from the\n  right rather than the left.  If Z is negative then\n  the abs(Z) characters preceding the Y-th character are returned.\n  If X is a string then characters indices refer to actual UTF-8 \n  characters.  If X is a BLOB then the indices refer to bytes.\"substring()\" is an alias for \"substr()\" beginning with SQLite version 3.34."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#substr"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["substring(X,Y,Z)"], "Description": ["The substr(X,Y,Z) function returns a substring of input string X that begins\n  with the Y-th character and which is Z characters long.\n  If Z is omitted then substr(X,Y) returns all characters through the end\n  of the string X beginning with the Y-th.\n  The left-most character of X is number 1.  If Y is negative\n  then the first character of the substring is found by counting from the\n  right rather than the left.  If Z is negative then\n  the abs(Z) characters preceding the Y-th character are returned.\n  If X is a string then characters indices refer to actual UTF-8 \n  characters.  If X is a BLOB then the indices refer to bytes.\"substring()\" is an alias for \"substr()\" beginning with SQLite version 3.34."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#total_changes"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["total_changes()"], "Description": ["The total_changes() function returns the number of row changes\n  caused by INSERT, UPDATE or DELETE\n  statements since the current database connection was opened.\n  This function is a wrapper around thesqlite3_total_changes64()C/C++ interface."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#trim"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["trim(X)"], "Description": ["The trim(X,Y) function returns a string formed by removing any and all\n  characters that appear in Y from both ends of X.\n  If the Y argument is omitted, trim(X) removes spaces from both ends of X."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#trim"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["trim(X,Y)"], "Description": ["The trim(X,Y) function returns a string formed by removing any and all\n  characters that appear in Y from both ends of X.\n  If the Y argument is omitted, trim(X) removes spaces from both ends of X."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#typeof"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["typeof(X)"], "Description": ["The typeof(X) function returns a string that indicates thedatatypeof\n  the expression X: \"null\", \"integer\", \"real\", \"text\", or \"blob\"."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#unhex"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["unhex(X)"], "Description": ["The unhex(X,Y) function returns a BLOB value which is the decoding of the\n  hexadecimal string X.  If X contains any\n  characters that are not hexadecimal digits and which are not in Y, \n  then unhex(X,Y) returns NULL. If Y is omitted, it is\n  understood to be an empty string and hence X must be a pure hexadecimal string.\n  All hexadecimal digits in X must occur in pairs, with both digits of each\n  pair beginning immediately adjacent to one another, or else unhex(X,Y)\n  returns NULL.\n  If either parameter X or Y is NULL, then unhex(X,Y) returns NULL.\n  The X input may contain an arbitrary mix of upper and lower case hexadecimal\n  digits.\n  Hexadecimal digits in Y have no affect on the translation of X.  Only\n  characters in Y that are not hexadecimal digits are ignored in X.See also:hex()"], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#unhex"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["unhex(X,Y)"], "Description": ["The unhex(X,Y) function returns a BLOB value which is the decoding of the\n  hexadecimal string X.  If X contains any\n  characters that are not hexadecimal digits and which are not in Y, \n  then unhex(X,Y) returns NULL. If Y is omitted, it is\n  understood to be an empty string and hence X must be a pure hexadecimal string.\n  All hexadecimal digits in X must occur in pairs, with both digits of each\n  pair beginning immediately adjacent to one another, or else unhex(X,Y)\n  returns NULL.\n  If either parameter X or Y is NULL, then unhex(X,Y) returns NULL.\n  The X input may contain an arbitrary mix of upper and lower case hexadecimal\n  digits.\n  Hexadecimal digits in Y have no affect on the translation of X.  Only\n  characters in Y that are not hexadecimal digits are ignored in X.See also:hex()"], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#unicode"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["unicode(X)"], "Description": ["The unicode(X) function returns the numeric unicode code point corresponding to\n  the first character of the string X.  If the argument to unicode(X) is not a string\n  then the result is undefined."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#unlikely"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["unlikely(X)"], "Description": ["The unlikely(X) function returns the argument X unchanged.\n  The unlikely(X) function is a no-op that the code generator\n  optimizes away so that it consumes no CPU cycles at\n  run-time (that is, during calls tosqlite3_step()).\n  The purpose of the unlikely(X) function is to provide a hint\n  to the query planner that the argument X is a boolean value\n  that is usually not true. The unlikely(X) function is equivalent\n  tolikelihood(X, 0.0625)."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#upper"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["upper(X)"], "Description": ["The upper(X) function returns a copy of input string X in which all \n  lower-case ASCII characters are converted to their upper-case equivalent."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
{"HTML": ["https://sqlite.org/lang_corefunc.html#zeroblob"], "Title": ["Built-In Scalar SQL Functions"], "Feature": ["zeroblob(N)"], "Description": ["The zeroblob(N) function returns a BLOB consisting of N bytes of 0x00.\n  SQLite manages these zeroblobs very efficiently.  Zeroblobs can be used to\n  reserve space for a BLOB that is later written usingincremental BLOB I/O.\n  This SQL function is implemented using thesqlite3_result_zeroblob()routine from the C/C++ interface."], "Examples": [], "Category": ["Built-In Scalar SQL Functions"]}
