{
    "HTML": [
        "https://sqlite.org/json1.html#jeach"
    ],
    "Title": [
        "JSON Functions"
    ],
    "Feature": [
        "json_each(X, P), json_tree(X, P)"
    ],
    "Description": [
        "The json_each(X) and json_tree(X) functions are table-valued functions that traverse JSON values. json_each(X) returns rows for each immediate child of the top-level array or object, or the top-level element for primitive values. json_tree(X) recursively explores the entire JSON structure. Both functions can take a second argument P, treating the element at path P as the top-level element. The returned table schema includes columns for key, value, type, atom, id, parent, fullkey, path, and hidden columns for the raw JSON and root path, offering a detailed breakdown of JSON elements.",
        "The json_each() function returns a table with columns: key, value, type, atom, id, parent, fullkey, path, json, and root.",
        "The json_tree() function returns a similar table but includes parent ids and represents the full JSON structure."
    ],
    "Examples": [
        "To find users with a '704' area code phone number: SELECT DISTINCT user.name FROM user, json_each(user.phone) WHERE json_each.value LIKE '704-%';",
        "To decompose all data line-by-line and suppress containers: SELECT big.rowid, fullkey, value FROM big, json_tree(big.json) WHERE json_tree.type NOT IN ('object', 'array');",
        "To find an entry with a specific uuid in a nested 'partlist': SELECT DISTINCT json_extract(big.json, '$.id') FROM big, json_tree(big.json, '$.partlist') WHERE json_tree.key='uuid' AND json_tree.value='6fa5181e-5721-11e5-a04e-57f3d7b32808';"
    ],
    "Category": [
        "JSON Functions"
    ]
}