{
    "HTML": [
        "https://duckdb.org/docs/sql/data_types/array"
    ],
    "Title": [
        "Array"
    ],
    "Feature": [
        "Array"
    ],
    "Description": [
        "\n\n\nDocumentation\n/ SQL\n/ Data Types\n\n\n\n\n\nDark Mode\n\n\n1.1 (stable)\n\n\n\n1.1 (stable)\n\n1.0\n0.10\n\n\n\n\nArray Type\n",
        "An ARRAY column stores fixed-sized arrays. All fields in the column must have the same length and the same underlying type. Arrays are typically used to store arrays of numbers, but can contain any uniform data type, including ARRAY, LIST and STRUCT types.",
        "Arrays can be used to store vectors such as word embeddings or image embeddings.",
        "To store variable-length lists, use the LIST type. See the data types overview for a comparison between nested data types.",
        "Note\nThe ARRAY type in PostgreSQL allows variable-length fields. DuckDB's ARRAY type is fixed-length.\n",
        "\nCreating Arrays\n",
        "Arrays can be created using the array_value(expr, ...) function.",
        "Construct with the array_value function:",
        "SELECT array_value(1, 2, 3);\n",
        "You can always implicitly cast an array to a list (and use list functions, like list_extract, [i]):",
        "SELECT array_value(1, 2, 3)[2];\n",
        "You can cast from a list to an array (the dimensions have to match):",
        "SELECT [3, 2, 1]::INTEGER[3];\n",
        "Arrays can be nested:",
        "SELECT array_value(array_value(1, 2), array_value(3, 4), array_value(5, 6));\n",
        "Arrays can store structs:",
        "SELECT array_value({'a': 1, 'b': 2}, {'a': 3, 'b': 4});\n",
        "\nDefining an Array Field\n",
        "Arrays can be created using the \u27e8TYPE_NAME\u27e9[\u27e8LENGTH\u27e9] syntax. For example, to create an array field for 3 integers, run:",
        "CREATE TABLE array_table (id INTEGER, arr INTEGER[3]);\nINSERT INTO array_table VALUES (10, [1, 2, 3]), (20, [4, 5, 6]);\n",
        "\nRetrieving Values from Arrays\n",
        "Retrieving one or more values from an array can be accomplished using brackets and slicing notation, or through list functions like list_extract and array_extract. Using the example in Defining an Array Field.",
        "The following queries for extracting the second element of an array are equivalent:",
        "SELECT id, arr[1] AS element FROM array_table;\nSELECT id, list_extract(arr, 1) AS element FROM array_table;\nSELECT id, array_extract(arr, 1) AS element FROM array_table;\n",
        "\n\n\nid\nelement\n\n\n\n\n10\n1\n\n\n20\n4\n\n\n",
        "Using the slicing notation returns a LIST:",
        "SELECT id, arr[1:2] AS elements FROM array_table;\n",
        "\n\n\nid\nelements\n\n\n\n\n10\n[1, 2]\n\n\n20\n[4, 5]\n\n\n",
        "\nFunctions\n",
        "All LIST functions work with the ARRAY type. Additionally, several ARRAY-native functions are also supported.\nSee the ARRAY functions.",
        "\nExamples\n",
        "Create sample data:",
        "CREATE TABLE x (i INTEGER, v FLOAT[3]);\nCREATE TABLE y (i INTEGER, v FLOAT[3]);\nINSERT INTO x VALUES (1, array_value(1.0::FLOAT, 2.0::FLOAT, 3.0::FLOAT));\nINSERT INTO y VALUES (1, array_value(2.0::FLOAT, 3.0::FLOAT, 4.0::FLOAT));\n",
        "Compute cross product:",
        "SELECT array_cross_product(x.v, y.v)\nFROM x, y\nWHERE x.i = y.i;\n",
        "Compute cosine similarity:",
        "SELECT array_cosine_similarity(x.v, y.v)\nFROM x, y\nWHERE x.i = y.i;\n",
        "\nOrdering\n",
        "The ordering of ARRAY instances is defined using a lexicographical order. NULL values compare greater than all other values and are considered equal to each other.",
        "\nSee Also\n",
        "For more functions, see List Functions.",
        "\n\nAbout this page\n\nReport content issue\nEdit this page on GitHub\n\n\n"
    ],
    "Examples": [
        "SELECT array_value(1, 2, 3);\n",
        "SELECT array_value(1, 2, 3)[2];\n",
        "SELECT [3, 2, 1]::INTEGER[3];\n",
        "SELECT array_value(array_value(1, 2), array_value(3, 4), array_value(5, 6));\n",
        "SELECT array_value({'a': 1, 'b': 2}, {'a': 3, 'b': 4});\n",
        "CREATE TABLE array_table (id INTEGER, arr INTEGER[3]);\nINSERT INTO array_table VALUES (10, [1, 2, 3]), (20, [4, 5, 6]);\n",
        "SELECT id, arr[1] AS element FROM array_table;\nSELECT id, list_extract(arr, 1) AS element FROM array_table;\nSELECT id, array_extract(arr, 1) AS element FROM array_table;\n",
        "SELECT id, arr[1:2] AS elements FROM array_table;\n",
        "CREATE TABLE x (i INTEGER, v FLOAT[3]);\nCREATE TABLE y (i INTEGER, v FLOAT[3]);\nINSERT INTO x VALUES (1, array_value(1.0::FLOAT, 2.0::FLOAT, 3.0::FLOAT));\nINSERT INTO y VALUES (1, array_value(2.0::FLOAT, 3.0::FLOAT, 4.0::FLOAT));\n",
        "SELECT array_cross_product(x.v, y.v)\nFROM x, y\nWHERE x.i = y.i;\n",
        "SELECT array_cosine_similarity(x.v, y.v)\nFROM x, y\nWHERE x.i = y.i;\n"
    ],
    "Category": [
        "Array"
    ]
}