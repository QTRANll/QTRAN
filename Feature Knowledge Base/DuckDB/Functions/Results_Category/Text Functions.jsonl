{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["ascii(string)"], "Feature": ["ascii(string)"], "Description": ["Returns an integer that represents the Unicode code point of the first character of the string."], "Examples": ["ascii('\u03a9')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["bar(x, min, max[, width])"], "Feature": ["bar(x, min, max[, width])"], "Description": ["Draw a band whose width is proportional to (x - min) and equal to width characters when x = max. width defaults to 80."], "Examples": ["bar(5, 0, 20, 10)"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["bit_length(string)"], "Feature": ["bit_length(string)"], "Description": ["Number of bits in a string."], "Examples": ["bit_length('abc')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["chr(x)"], "Feature": ["chr(x)"], "Description": ["Returns a character which is corresponding the ASCII code value or Unicode code point."], "Examples": ["chr(65)"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["concat_ws(separator, string, ...)"], "Feature": ["concat_ws(separator, string, ...)"], "Description": ["Concatenate many strings, separated by separator. NULL inputs are skipped."], "Examples": ["concat_ws(', ', 'Banana', 'Apple', NULL, 'Melon')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["concat(string, ...)"], "Feature": ["concat(string, ...)"], "Description": ["Concatenate many strings. NULL inputs are skipped. See also string || string."], "Examples": ["concat('Hello', ' ', NULL, 'World')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["contains(string, search_string)"], "Feature": ["contains(string, search_string)"], "Description": ["Return true if search_string is found within string."], "Examples": ["contains('abc', 'a')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["suffix"], "Feature": ["suffix"], "Description": ["ends_with(string, search_string)", "Return true if string ends with search_string."], "Examples": ["ends_with('abc', 'c')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["format_bytes(bytes)"], "Feature": ["format_bytes(bytes)"], "Description": ["Converts bytes to a human-readable representation using units based on powers of 2 (KiB, MiB, GiB, etc.)."], "Examples": ["format_bytes(16384)"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["format(format, parameters, ...)"], "Feature": ["format(format, parameters, ...)"], "Description": ["Formats a string using the fmt syntax."], "Examples": ["format('Benchmark \"{}\" took {} seconds', 'CSV', 42)"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["from_base64(string)"], "Feature": ["from_base64(string)"], "Description": ["Convert a base64 encoded string to a character string."], "Examples": ["from_base64('QQ==')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["greatest(x1, x2, ...)"], "Feature": ["greatest(x1, x2, ...)"], "Description": ["Selects the largest value using lexicographical ordering. Note that lowercase characters are considered \u201clarger\u201d than uppercase characters and collations are not supported."], "Examples": ["greatest('abc', 'bcd', 'cde', 'EFG')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["hash(value)"], "Feature": ["hash(value)"], "Description": ["Returns a UBIGINT with the hash of the value."], "Examples": ["hash('\ud83e\udd86')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["ilike_escape(string, like_specifier, escape_character)"], "Feature": ["ilike_escape(string, like_specifier, escape_character)"], "Description": ["Returns true if the string matches the like_specifier (see Pattern Matching) using case-insensitive matching. escape_character is used to search for wildcard characters in the string."], "Examples": ["ilike_escape('A%c', 'a$%C', '$')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["instr(string, search_string)"], "Feature": ["instr(string, search_string)"], "Description": ["Return location of first occurrence of search_string in string, counting from 1. Returns 0 if no match found."], "Examples": ["instr('test test', 'es')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["least(x1, x2, ...)"], "Feature": ["least(x1, x2, ...)"], "Description": ["Selects the smallest value using lexicographical ordering. Note that uppercase characters are considered \u201csmaller\u201d than lowercase characters, and collations are not supported."], "Examples": ["least('abc', 'BCD', 'cde', 'EFG')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["left_grapheme(string, count)"], "Feature": ["left_grapheme(string, count)"], "Description": ["Extract the left-most grapheme clusters."], "Examples": ["left_grapheme('\ud83e\udd26\ud83c\udffc\u200d\u2642\ufe0f\ud83e\udd26\ud83c\udffd\u200d\u2640\ufe0f', 1)"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["left(string, count)"], "Feature": ["left(string, count)"], "Description": ["Extract the left-most count characters."], "Examples": ["left('Hello\ud83e\udd86', 2)"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["length_grapheme(string)"], "Feature": ["length_grapheme(string)"], "Description": ["Number of grapheme clusters in string."], "Examples": ["length_grapheme('\ud83e\udd26\ud83c\udffc\u200d\u2642\ufe0f\ud83e\udd26\ud83c\udffd\u200d\u2640\ufe0f')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["length(string)"], "Feature": ["length(string)"], "Description": ["Number of characters in string."], "Examples": ["length('Hello\ud83e\udd86')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["like_escape(string, like_specifier, escape_character)"], "Feature": ["like_escape(string, like_specifier, escape_character)"], "Description": ["Returns true if the string matches the like_specifier (see Pattern Matching) using case-sensitive matching. escape_character is used to search for wildcard characters in the string."], "Examples": ["like_escape('a%c', 'a$%c', '$')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["lcase"], "Feature": ["lcase"], "Description": ["lower(string)", "Convert string to lower case."], "Examples": ["lower('Hello')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["lpad(string, count, character)"], "Feature": ["lpad(string, count, character)"], "Description": ["Pads the string  with the character from the left until it has count characters."], "Examples": ["lpad('hello', 8, '>')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["ltrim(string, characters)"], "Feature": ["ltrim(string, characters)"], "Description": ["Removes any occurrences of any of the characters from the left side of the string."], "Examples": ["ltrim('>>>>test<<', '><')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["ltrim(string)"], "Feature": ["ltrim(string)"], "Description": ["Removes any spaces from the left side of the string.", "Removes any spaces from the left side of the string. In the example, the \u2423 symbol denotes a space character."], "Examples": ["ltrim('\u2423\u2423\u2423\u2423test\u2423\u2423')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["md5(string)"], "Feature": ["md5(string)"], "Description": ["Returns the MD5 hash of the string as a VARCHAR."], "Examples": ["md5('123')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["md5_number(string)"], "Feature": ["md5_number(string)"], "Description": ["Returns the MD5 hash of the string as a HUGEINT."], "Examples": ["md5_number('123')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["md5_number_lower(string)"], "Feature": ["md5_number_lower(string)"], "Description": ["Returns the lower 64-bit segment of the MD5 hash of the string as a BIGINT.", "Returns the MD5 hash of the string as a BIGINT."], "Examples": ["md5_number_lower('123')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["md5_number_higher(string)"], "Feature": ["md5_number_higher(string)"], "Description": ["Returns the higher 64-bit segment of the MD5 hash of the string as a BIGINT.", "Returns the MD5 hash of the string as a BIGINT."], "Examples": ["md5_number_higher('123')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["nfc_normalize(string)"], "Feature": ["nfc_normalize(string)"], "Description": ["Convert string to Unicode NFC normalized string. Useful for comparisons and ordering if text data is mixed between NFC normalized and not."], "Examples": ["nfc_normalize('arde\u0300ch')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["not_ilike_escape(string, like_specifier, escape_character)"], "Feature": ["not_ilike_escape(string, like_specifier, escape_character)"], "Description": ["Returns false if the string matches the like_specifier (see Pattern Matching) using case-sensitive matching. escape_character is used to search for wildcard characters in the string."], "Examples": ["not_ilike_escape('A%c', 'a$%C', '$')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["not_like_escape(string, like_specifier, escape_character)"], "Feature": ["not_like_escape(string, like_specifier, escape_character)"], "Description": ["Returns false if the string matches the like_specifier (see Pattern Matching) using case-insensitive matching. escape_character is used to search for wildcard characters in the string."], "Examples": ["not_like_escape('a%c', 'a$%c', '$')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["ord(string)"], "Feature": ["ord(string)"], "Description": ["Return ASCII character code of the leftmost character in a string."], "Examples": ["ord('\u00fc')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["parse_dirname(path, separator)"], "Feature": ["parse_dirname(path, separator)"], "Description": ["Returns the top-level directory name from the given path. separator options: system, both_slash (default), forward_slash, backslash."], "Examples": ["parse_dirname('path/to/file.csv', 'system')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["parse_dirpath(path, separator)"], "Feature": ["parse_dirpath(path, separator)"], "Description": ["Returns the head of the path (the pathname until the last slash) similarly to Python's os.path.dirname function. separator options: system, both_slash (default), forward_slash, backslash."], "Examples": ["parse_dirpath('/path/to/file.csv', 'forward_slash')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["parse_filename(path, trim_extension, separator)"], "Feature": ["parse_filename(path, trim_extension, separator)"], "Description": ["Returns the last component of the path similarly to Python's os.path.basename function. If trim_extension is true, the file extension will be removed (defaults to false). separator options: system, both_slash (default), forward_slash, backslash."], "Examples": ["parse_filename('path/to/file.csv', true, 'system')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["parse_path(path, separator)"], "Feature": ["parse_path(path, separator)"], "Description": ["Returns a list of the components (directories and filename) in the path similarly to Python's pathlib.parts function. separator options: system, both_slash (default), forward_slash, backslash."], "Examples": ["parse_path('/path/to/file.csv', 'system')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["position(search_string IN string)"], "Feature": ["position(search_string IN string)"], "Description": ["Return location of first occurrence of search_string in string, counting from 1. Returns 0 if no match found."], "Examples": ["position('b' IN 'abc')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["printf(format, parameters...)"], "Feature": ["printf(format, parameters...)"], "Description": ["Formats a string using printf syntax."], "Examples": ["printf('Benchmark \"%s\" took %d seconds', 'CSV', 42)"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["read_text(source)"], "Feature": ["read_text(source)"], "Description": ["Returns the content from source (a filename, a list of filenames, or a glob pattern) as a VARCHAR. The file content is first validated to be valid UTF-8. If read_text attempts to read a file with invalid UTF-8 an error is thrown suggesting to use read_blob instead. See the read_text guide for more details."], "Examples": ["read_text('hello.txt')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["regexp_escape(string)"], "Feature": ["regexp_escape(string)"], "Description": ["Escapes special patterns to turn string into a regular expression similarly to Python's re.escape function."], "Examples": ["regexp_escape('http://d.org')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["regexp_extract(string, pattern[, group = 0])"], "Feature": ["regexp_extract(string, pattern[, group = 0])"], "Description": ["If string contains the regexp pattern, returns the capturing group specified by optional parameter group (see Pattern Matching)."], "Examples": ["regexp_extract('hello_world', '([a-z ]+)_?', 1)"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["regexp_extract(string, pattern, name_list)"], "Feature": ["regexp_extract(string, pattern, name_list)"], "Description": ["If string contains the regexp pattern, returns the capturing groups as a struct with corresponding names from name_list (see Pattern Matching)."], "Examples": ["regexp_extract('2023-04-15', '(\\d+)-(\\d+)-(\\d+)', ['y', 'm', 'd'])"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["regexp_extract_all(string, regex[, group = 0])"], "Feature": ["regexp_extract_all(string, regex[, group = 0])"], "Description": ["Split the string along the regex and extract all occurrences of group."], "Examples": ["regexp_extract_all('hello_world', '([a-z ]+)_?', 1)"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["regexp_full_match(string, regex)"], "Feature": ["regexp_full_match(string, regex)"], "Description": ["Returns true if the entire string matches the regex (see Pattern Matching)."], "Examples": ["regexp_full_match('anabanana', '(an)')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["regexp_matches(string, pattern)"], "Feature": ["regexp_matches(string, pattern)"], "Description": ["Returns true if  string contains the regexp pattern, false otherwise (see Pattern Matching)."], "Examples": ["regexp_matches('anabanana', '(an)')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["regexp_replace(string, pattern, replacement)"], "Feature": ["regexp_replace(string, pattern, replacement)"], "Description": ["If string contains the regexp pattern, replaces the matching part with replacement (see Pattern Matching)."], "Examples": ["regexp_replace('hello', '[lo]', '-')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["str_split_regex"], "Feature": ["str_split_regex"], "Description": ["string_split_regex", "regexp_split_to_array(string, regex)", "Splits the string along the regex."], "Examples": ["regexp_split_to_array('hello world; 42', ';? ')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["regexp_split_to_table(string, regex)"], "Feature": ["regexp_split_to_table(string, regex)"], "Description": ["Splits the string along the regex and returns a row for each part."], "Examples": ["regexp_split_to_table('hello world; 42', ';? ')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["repeat(string, count)"], "Feature": ["repeat(string, count)"], "Description": ["Repeats the string count number of times."], "Examples": ["repeat('A', 5)"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["replace(string, source, target)"], "Feature": ["replace(string, source, target)"], "Description": ["Replaces any occurrences of the source with target in string."], "Examples": ["replace('hello', 'l', '-')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["reverse(string)"], "Feature": ["reverse(string)"], "Description": ["Reverses the string."], "Examples": ["reverse('hello')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["right_grapheme(string, count)"], "Feature": ["right_grapheme(string, count)"], "Description": ["Extract the right-most count grapheme clusters."], "Examples": ["right_grapheme('\ud83e\udd26\ud83c\udffc\u200d\u2642\ufe0f\ud83e\udd26\ud83c\udffd\u200d\u2640\ufe0f', 1)"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["right(string, count)"], "Feature": ["right(string, count)"], "Description": ["Extract the right-most count characters."], "Examples": ["right('Hello\ud83e\udd86', 3)"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["rpad(string, count, character)"], "Feature": ["rpad(string, count, character)"], "Description": ["Pads the string with the character from the right until it has count characters."], "Examples": ["rpad('hello', 10, '<')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["rtrim(string, characters)"], "Feature": ["rtrim(string, characters)"], "Description": ["Removes any occurrences of any of the characters from the right side of the string."], "Examples": ["rtrim('>>>>test<<', '><')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["rtrim(string)"], "Feature": ["rtrim(string)"], "Description": ["Removes any spaces from the right side of the string.", "Removes any spaces from the right side of the string. In the example, the \u2423 symbol denotes a space character."], "Examples": ["rtrim('\u2423\u2423\u2423\u2423test\u2423\u2423')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["sha256(value)"], "Feature": ["sha256(value)"], "Description": ["Returns a VARCHAR with the SHA-256 hash of the value."], "Examples": ["sha256('\ud83e\udd86')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["split_part(string, separator, index)"], "Feature": ["split_part(string, separator, index)"], "Description": ["Split the string along the separator and return the data at the (1-based) index of the list. If the index is outside the bounds of the list, return an empty string (to match PostgreSQL's behavior)."], "Examples": ["split_part('a;b;c', ';', 2)"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["starts_with(string, search_string)"], "Feature": ["starts_with(string, search_string)"], "Description": ["Return true if string begins with search_string."], "Examples": ["starts_with('abc', 'a')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["regexp_split_to_array"], "Feature": ["regexp_split_to_array"], "Description": ["str_split_regex(string, regex)", "Splits the string along the regex."], "Examples": ["str_split_regex('hello world; 42', ';? ')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["string_split_regex(string, regex)"], "Feature": ["string_split_regex(string, regex)"], "Description": ["Splits the string along the regex."], "Examples": ["string_split_regex('hello world; 42', ';? ')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["string_to_array"], "Feature": ["string_to_array"], "Description": ["str_split", "string_split(string, separator)", "Splits the string along the separator."], "Examples": ["string_split('hello world', ' ')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["strip_accents(string)"], "Feature": ["strip_accents(string)"], "Description": ["Strips accents from string."], "Examples": ["strip_accents('m\u00fchleisen')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["strlen(string)"], "Feature": ["strlen(string)"], "Description": ["Number of bytes in string."], "Examples": ["strlen('\ud83e\udd86')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["instr"], "Feature": ["instr"], "Description": ["strpos(string, search_string)", "Return location of first occurrence of search_string in string, counting from 1. Returns 0 if no match found."], "Examples": ["strpos('test test', 'es')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["substr"], "Feature": ["substr"], "Description": ["substring(string, start, length)", "Extract substring of length characters starting from character start. Note that a start value of 1 refers to the first character of the string."], "Examples": ["substring('Hello', 2, 2)"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["substring_grapheme(string, start, length)"], "Feature": ["substring_grapheme(string, start, length)"], "Description": ["Extract substring of length grapheme clusters starting from character start. Note that a start value of 1 refers to the first character of the string."], "Examples": ["substring_grapheme('\ud83e\udd86\ud83e\udd26\ud83c\udffc\u200d\u2642\ufe0f\ud83e\udd26\ud83c\udffd\u200d\u2640\ufe0f\ud83e\udd86', 3, 2)"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["base64"], "Feature": ["base64"], "Description": ["to_base64(blob)", "Convert a blob to a base64 encoded string."], "Examples": ["to_base64('A'::blob)"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["trim(string, characters)"], "Feature": ["trim(string, characters)"], "Description": ["Removes any occurrences of any of the characters from either side of the string."], "Examples": ["trim('>>>>test<<', '><')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["trim(string)"], "Feature": ["trim(string)"], "Description": ["Removes any spaces from either side of the string."], "Examples": ["trim('    test  ')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["unicode(string)"], "Feature": ["unicode(string)"], "Description": ["Returns the Unicode code of the first character of the string.", "Returns the Unicode code of the first character of the string. Returns -1 when string is empty, and NULL when string is NULL."], "Examples": ["[unicode('\u00e2bcd'), unicode('\u00e2'), unicode(''), unicode(NULL)]"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["ucase"], "Feature": ["ucase"], "Description": ["upper(string)", "Convert string to upper case."], "Examples": ["upper('Hello')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["damerau_levenshtein(s1, s2)"], "Feature": ["damerau_levenshtein(s1, s2)"], "Description": ["Extension of Levenshtein distance to also include transposition of adjacent characters as an allowed edit operation. In other words, the minimum number of edit operations (insertions, deletions, substitutions or transpositions) required to change one string to another. Characters of different cases (e.g., a and A) are considered different."], "Examples": ["damerau_levenshtein('duckdb', 'udckbd')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["editdist3(s1, s2)"], "Feature": ["editdist3(s1, s2)"], "Description": ["Alias of levenshtein for SQLite compatibility. The minimum number of single-character edits (insertions, deletions or substitutions) required to change one string to the other. Characters of different cases (e.g., a and A) are considered different."], "Examples": ["editdist3('duck', 'db')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["hamming(s1, s2)"], "Feature": ["hamming(s1, s2)"], "Description": ["The Hamming distance between to strings, i.e., the number of positions with different characters for two strings of equal length. Strings must be of equal length. Characters of different cases (e.g., a and A) are considered different."], "Examples": ["hamming('duck', 'luck')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["jaccard(s1, s2)"], "Feature": ["jaccard(s1, s2)"], "Description": ["The Jaccard similarity between two strings. Characters of different cases (e.g., a and A) are considered different. Returns a number between 0 and 1."], "Examples": ["jaccard('duck', 'luck')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["jaro_similarity(s1, s2)"], "Feature": ["jaro_similarity(s1, s2)"], "Description": ["The Jaro similarity between two strings. Characters of different cases (e.g., a and A) are considered different. Returns a number between 0 and 1."], "Examples": ["jaro_similarity('duck', 'duckdb')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["jaro_winkler_similarity(s1, s2)"], "Feature": ["jaro_winkler_similarity(s1, s2)"], "Description": ["The Jaro-Winkler similarity between two strings. Characters of different cases (e.g., a and A) are considered different. Returns a number between 0 and 1."], "Examples": ["jaro_winkler_similarity('duck', 'duckdb')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["levenshtein(s1, s2)"], "Feature": ["levenshtein(s1, s2)"], "Description": ["The minimum number of single-character edits (insertions, deletions or substitutions) required to change one string to the other. Characters of different cases (e.g., a and A) are considered different."], "Examples": ["levenshtein('duck', 'db')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["mismatches(s1, s2)"], "Feature": ["mismatches(s1, s2)"], "Description": ["Alias for hamming(s1, s2). The number of positions with different characters for two strings of equal length. Strings must be of equal length. Characters of different cases (e.g., a and A) are considered different."], "Examples": ["mismatches('duck', 'luck')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["starts_with"], "Feature": ["starts_with"], "Description": ["string ^@ search_string", "Return true if string begins with search_string."], "Examples": ["'abc' ^@ 'a'"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["array_extract"], "Feature": ["array_extract"], "Description": ["string[index]", "Extract a single character using a (1-based) index."], "Examples": ["'DuckDB'[4]"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["array_slice"], "Feature": ["array_slice"], "Description": ["string[begin:end]", "Extract a string using slice conventions, see slicing.", "Extract a string using slice conventions similar to Python. Missing begin or end arguments are interpreted as the beginning or end of the list respectively. Negative values are accepted."], "Examples": ["'DuckDB'[:4]"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["list_extract"], "Feature": ["list_extract"], "Description": ["list_element", "array_extract(list, index)", "Extract a single character using a (1-based) index."], "Examples": ["array_extract('DuckDB', 2)"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["list_extract"], "Feature": ["list_extract"], "Description": ["list_element", "array_extract(list, index)", "Extract a single character using a (1-based) index."], "Examples": ["array_extract('DuckDB', 2)"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["suffix"], "Feature": ["suffix"], "Description": ["ends_with(string, search_string)", "Return true if string ends with search_string."], "Examples": ["ends_with('abc', 'c')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["lcase"], "Feature": ["lcase"], "Description": ["lower(string)", "Convert string to lower case."], "Examples": ["lower('Hello')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["str_split_regex"], "Feature": ["str_split_regex"], "Description": ["string_split_regex", "regexp_split_to_array(string, regex)", "Splits the string along the regex."], "Examples": ["regexp_split_to_array('hello world; 42', ';? ')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["str_split_regex"], "Feature": ["str_split_regex"], "Description": ["string_split_regex", "regexp_split_to_array(string, regex)", "Splits the string along the regex."], "Examples": ["regexp_split_to_array('hello world; 42', ';? ')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["regexp_split_to_array"], "Feature": ["regexp_split_to_array"], "Description": ["str_split_regex(string, regex)", "Splits the string along the regex."], "Examples": ["str_split_regex('hello world; 42', ';? ')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["string_to_array"], "Feature": ["string_to_array"], "Description": ["str_split", "string_split(string, separator)", "Splits the string along the separator."], "Examples": ["string_split('hello world', ' ')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["string_to_array"], "Feature": ["string_to_array"], "Description": ["str_split", "string_split(string, separator)", "Splits the string along the separator."], "Examples": ["string_split('hello world', ' ')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["instr"], "Feature": ["instr"], "Description": ["strpos(string, search_string)", "Return location of first occurrence of search_string in string, counting from 1. Returns 0 if no match found."], "Examples": ["strpos('test test', 'es')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["substr"], "Feature": ["substr"], "Description": ["substring(string, start, length)", "Extract substring of length characters starting from character start. Note that a start value of 1 refers to the first character of the string."], "Examples": ["substring('Hello', 2, 2)"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["base64"], "Feature": ["base64"], "Description": ["to_base64(blob)", "Convert a blob to a base64 encoded string."], "Examples": ["to_base64('A'::blob)"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["ucase"], "Feature": ["ucase"], "Description": ["upper(string)", "Convert string to upper case."], "Examples": ["upper('Hello')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["starts_with"], "Feature": ["starts_with"], "Description": ["string ^@ search_string", "Return true if string begins with search_string."], "Examples": ["'abc' ^@ 'a'"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["string || string"], "Feature": ["string || string"], "Description": ["Concatenate two strings. Any NULL input results in NULL. See also concat(string, ...)."], "Examples": ["'Duck' || 'DB'"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["array_extract"], "Feature": ["array_extract"], "Description": ["string[index]", "Extract a single character using a (1-based) index."], "Examples": ["'DuckDB'[4]"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["array_slice"], "Feature": ["array_slice"], "Description": ["string[begin:end]", "Extract a string using slice conventions, see slicing.", "Extract a string using slice conventions similar to Python. Missing begin or end arguments are interpreted as the beginning or end of the list respectively. Negative values are accepted."], "Examples": ["'DuckDB'[:4]"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["string LIKE target"], "Feature": ["string LIKE target"], "Description": ["Returns true if the string matches the like specifier (see Pattern Matching)."], "Examples": ["'hello' LIKE '%lo'"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["string SIMILAR TO regex"], "Feature": ["string SIMILAR TO regex"], "Description": ["Returns true if the string matches the regex; identical to regexp_full_match (see Pattern Matching).", "Returns true if the string matches the regex; identical to regexp_full_match (see Pattern Matching)"], "Examples": ["'hello' SIMILAR TO 'l+'"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["list_extract"], "Feature": ["list_extract"], "Description": ["list_element", "array_extract(list, index)", "Extract a single character using a (1-based) index."], "Examples": ["array_extract('DuckDB', 2)"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["array_slice(list, begin, end)"], "Feature": ["array_slice(list, begin, end)"], "Description": ["Extract a string using slice conventions. Negative values are accepted.", "Extract a string using slice conventions (like in Python). Negative values are accepted.", "array_slice('DuckDB', 3, 4)", "array_slice('DuckDB', 3, NULL)", "array_slice('DuckDB', 0, -3)"], "Examples": [], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["ascii(string)"], "Feature": ["ascii(string)"], "Description": ["Returns an integer that represents the Unicode code point of the first character of the string."], "Examples": ["ascii('\u03a9')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["bar(x, min, max[, width])"], "Feature": ["bar(x, min, max[, width])"], "Description": ["Draw a band whose width is proportional to (x - min) and equal to width characters when x = max. width defaults to 80."], "Examples": ["bar(5, 0, 20, 10)"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["bit_length(string)"], "Feature": ["bit_length(string)"], "Description": ["Number of bits in a string."], "Examples": ["bit_length('abc')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["chr(x)"], "Feature": ["chr(x)"], "Description": ["Returns a character which is corresponding the ASCII code value or Unicode code point."], "Examples": ["chr(65)"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["concat_ws(separator, string, ...)"], "Feature": ["concat_ws(separator, string, ...)"], "Description": ["Concatenate many strings, separated by separator. NULL inputs are skipped."], "Examples": ["concat_ws(', ', 'Banana', 'Apple', NULL, 'Melon')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["concat(string, ...)"], "Feature": ["concat(string, ...)"], "Description": ["Concatenate many strings. NULL inputs are skipped. See also string || string."], "Examples": ["concat('Hello', ' ', NULL, 'World')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["contains(string, search_string)"], "Feature": ["contains(string, search_string)"], "Description": ["Return true if search_string is found within string."], "Examples": ["contains('abc', 'a')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["suffix"], "Feature": ["suffix"], "Description": ["ends_with(string, search_string)", "Return true if string ends with search_string."], "Examples": ["ends_with('abc', 'c')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["format_bytes(bytes)"], "Feature": ["format_bytes(bytes)"], "Description": ["Converts bytes to a human-readable representation using units based on powers of 2 (KiB, MiB, GiB, etc.)."], "Examples": ["format_bytes(16384)"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["format(format, parameters, ...)"], "Feature": ["format(format, parameters, ...)"], "Description": ["Formats a string using the fmt syntax."], "Examples": ["format('Benchmark \"{}\" took {} seconds', 'CSV', 42)"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["from_base64(string)"], "Feature": ["from_base64(string)"], "Description": ["Convert a base64 encoded string to a character string."], "Examples": ["from_base64('QQ==')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["greatest(x1, x2, ...)"], "Feature": ["greatest(x1, x2, ...)"], "Description": ["Selects the largest value using lexicographical ordering. Note that lowercase characters are considered \u201clarger\u201d than uppercase characters and collations are not supported."], "Examples": ["greatest('abc', 'bcd', 'cde', 'EFG')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["hash(value)"], "Feature": ["hash(value)"], "Description": ["Returns a UBIGINT with the hash of the value."], "Examples": ["hash('\ud83e\udd86')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["ilike_escape(string, like_specifier, escape_character)"], "Feature": ["ilike_escape(string, like_specifier, escape_character)"], "Description": ["Returns true if the string matches the like_specifier (see Pattern Matching) using case-insensitive matching. escape_character is used to search for wildcard characters in the string."], "Examples": ["ilike_escape('A%c', 'a$%C', '$')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["instr(string, search_string)"], "Feature": ["instr(string, search_string)"], "Description": ["Return location of first occurrence of search_string in string, counting from 1. Returns 0 if no match found."], "Examples": ["instr('test test', 'es')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["least(x1, x2, ...)"], "Feature": ["least(x1, x2, ...)"], "Description": ["Selects the smallest value using lexicographical ordering. Note that uppercase characters are considered \u201csmaller\u201d than lowercase characters, and collations are not supported."], "Examples": ["least('abc', 'BCD', 'cde', 'EFG')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["left_grapheme(string, count)"], "Feature": ["left_grapheme(string, count)"], "Description": ["Extract the left-most grapheme clusters."], "Examples": ["left_grapheme('\ud83e\udd26\ud83c\udffc\u200d\u2642\ufe0f\ud83e\udd26\ud83c\udffd\u200d\u2640\ufe0f', 1)"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["left(string, count)"], "Feature": ["left(string, count)"], "Description": ["Extract the left-most count characters."], "Examples": ["left('Hello\ud83e\udd86', 2)"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["length_grapheme(string)"], "Feature": ["length_grapheme(string)"], "Description": ["Number of grapheme clusters in string."], "Examples": ["length_grapheme('\ud83e\udd26\ud83c\udffc\u200d\u2642\ufe0f\ud83e\udd26\ud83c\udffd\u200d\u2640\ufe0f')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["length(string)"], "Feature": ["length(string)"], "Description": ["Number of characters in string."], "Examples": ["length('Hello\ud83e\udd86')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["like_escape(string, like_specifier, escape_character)"], "Feature": ["like_escape(string, like_specifier, escape_character)"], "Description": ["Returns true if the string matches the like_specifier (see Pattern Matching) using case-sensitive matching. escape_character is used to search for wildcard characters in the string."], "Examples": ["like_escape('a%c', 'a$%c', '$')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["lcase"], "Feature": ["lcase"], "Description": ["lower(string)", "Convert string to lower case."], "Examples": ["lower('Hello')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["lpad(string, count, character)"], "Feature": ["lpad(string, count, character)"], "Description": ["Pads the string  with the character from the left until it has count characters."], "Examples": ["lpad('hello', 8, '>')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["ltrim(string, characters)"], "Feature": ["ltrim(string, characters)"], "Description": ["Removes any occurrences of any of the characters from the left side of the string."], "Examples": ["ltrim('>>>>test<<', '><')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["ltrim(string)"], "Feature": ["ltrim(string)"], "Description": ["Removes any spaces from the left side of the string.", "Removes any spaces from the left side of the string. In the example, the \u2423 symbol denotes a space character."], "Examples": ["ltrim('\u2423\u2423\u2423\u2423test\u2423\u2423')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["md5(string)"], "Feature": ["md5(string)"], "Description": ["Returns the MD5 hash of the string as a VARCHAR."], "Examples": ["md5('123')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["md5_number(string)"], "Feature": ["md5_number(string)"], "Description": ["Returns the MD5 hash of the string as a HUGEINT."], "Examples": ["md5_number('123')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["md5_number_lower(string)"], "Feature": ["md5_number_lower(string)"], "Description": ["Returns the lower 64-bit segment of the MD5 hash of the string as a BIGINT.", "Returns the MD5 hash of the string as a BIGINT."], "Examples": ["md5_number_lower('123')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["md5_number_higher(string)"], "Feature": ["md5_number_higher(string)"], "Description": ["Returns the higher 64-bit segment of the MD5 hash of the string as a BIGINT.", "Returns the MD5 hash of the string as a BIGINT."], "Examples": ["md5_number_higher('123')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["nfc_normalize(string)"], "Feature": ["nfc_normalize(string)"], "Description": ["Convert string to Unicode NFC normalized string. Useful for comparisons and ordering if text data is mixed between NFC normalized and not."], "Examples": ["nfc_normalize('arde\u0300ch')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["not_ilike_escape(string, like_specifier, escape_character)"], "Feature": ["not_ilike_escape(string, like_specifier, escape_character)"], "Description": ["Returns false if the string matches the like_specifier (see Pattern Matching) using case-sensitive matching. escape_character is used to search for wildcard characters in the string."], "Examples": ["not_ilike_escape('A%c', 'a$%C', '$')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["not_like_escape(string, like_specifier, escape_character)"], "Feature": ["not_like_escape(string, like_specifier, escape_character)"], "Description": ["Returns false if the string matches the like_specifier (see Pattern Matching) using case-insensitive matching. escape_character is used to search for wildcard characters in the string."], "Examples": ["not_like_escape('a%c', 'a$%c', '$')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["ord(string)"], "Feature": ["ord(string)"], "Description": ["Return ASCII character code of the leftmost character in a string."], "Examples": ["ord('\u00fc')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["parse_dirname(path, separator)"], "Feature": ["parse_dirname(path, separator)"], "Description": ["Returns the top-level directory name from the given path. separator options: system, both_slash (default), forward_slash, backslash."], "Examples": ["parse_dirname('path/to/file.csv', 'system')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["parse_dirpath(path, separator)"], "Feature": ["parse_dirpath(path, separator)"], "Description": ["Returns the head of the path (the pathname until the last slash) similarly to Python's os.path.dirname function. separator options: system, both_slash (default), forward_slash, backslash."], "Examples": ["parse_dirpath('/path/to/file.csv', 'forward_slash')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["parse_filename(path, trim_extension, separator)"], "Feature": ["parse_filename(path, trim_extension, separator)"], "Description": ["Returns the last component of the path similarly to Python's os.path.basename function. If trim_extension is true, the file extension will be removed (defaults to false). separator options: system, both_slash (default), forward_slash, backslash."], "Examples": ["parse_filename('path/to/file.csv', true, 'system')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["parse_path(path, separator)"], "Feature": ["parse_path(path, separator)"], "Description": ["Returns a list of the components (directories and filename) in the path similarly to Python's pathlib.parts function. separator options: system, both_slash (default), forward_slash, backslash."], "Examples": ["parse_path('/path/to/file.csv', 'system')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["position(search_string IN string)"], "Feature": ["position(search_string IN string)"], "Description": ["Return location of first occurrence of search_string in string, counting from 1. Returns 0 if no match found."], "Examples": ["position('b' IN 'abc')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["printf(format, parameters...)"], "Feature": ["printf(format, parameters...)"], "Description": ["Formats a string using printf syntax."], "Examples": ["printf('Benchmark \"%s\" took %d seconds', 'CSV', 42)"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["read_text(source)"], "Feature": ["read_text(source)"], "Description": ["Returns the content from source (a filename, a list of filenames, or a glob pattern) as a VARCHAR. The file content is first validated to be valid UTF-8. If read_text attempts to read a file with invalid UTF-8 an error is thrown suggesting to use read_blob instead. See the read_text guide for more details."], "Examples": ["read_text('hello.txt')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["regexp_escape(string)"], "Feature": ["regexp_escape(string)"], "Description": ["Escapes special patterns to turn string into a regular expression similarly to Python's re.escape function."], "Examples": ["regexp_escape('http://d.org')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["regexp_extract(string, pattern[, group = 0])"], "Feature": ["regexp_extract(string, pattern[, group = 0])"], "Description": ["If string contains the regexp pattern, returns the capturing group specified by optional parameter group (see Pattern Matching)."], "Examples": ["regexp_extract('hello_world', '([a-z ]+)_?', 1)"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["regexp_extract(string, pattern, name_list)"], "Feature": ["regexp_extract(string, pattern, name_list)"], "Description": ["If string contains the regexp pattern, returns the capturing groups as a struct with corresponding names from name_list (see Pattern Matching)."], "Examples": ["regexp_extract('2023-04-15', '(\\d+)-(\\d+)-(\\d+)', ['y', 'm', 'd'])"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["regexp_extract_all(string, regex[, group = 0])"], "Feature": ["regexp_extract_all(string, regex[, group = 0])"], "Description": ["Split the string along the regex and extract all occurrences of group."], "Examples": ["regexp_extract_all('hello_world', '([a-z ]+)_?', 1)"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["regexp_full_match(string, regex)"], "Feature": ["regexp_full_match(string, regex)"], "Description": ["Returns true if the entire string matches the regex (see Pattern Matching)."], "Examples": ["regexp_full_match('anabanana', '(an)')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["regexp_matches(string, pattern)"], "Feature": ["regexp_matches(string, pattern)"], "Description": ["Returns true if  string contains the regexp pattern, false otherwise (see Pattern Matching)."], "Examples": ["regexp_matches('anabanana', '(an)')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["regexp_replace(string, pattern, replacement)"], "Feature": ["regexp_replace(string, pattern, replacement)"], "Description": ["If string contains the regexp pattern, replaces the matching part with replacement (see Pattern Matching)."], "Examples": ["regexp_replace('hello', '[lo]', '-')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["str_split_regex"], "Feature": ["str_split_regex"], "Description": ["string_split_regex", "regexp_split_to_array(string, regex)", "Splits the string along the regex."], "Examples": ["regexp_split_to_array('hello world; 42', ';? ')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["regexp_split_to_table(string, regex)"], "Feature": ["regexp_split_to_table(string, regex)"], "Description": ["Splits the string along the regex and returns a row for each part."], "Examples": ["regexp_split_to_table('hello world; 42', ';? ')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["repeat(string, count)"], "Feature": ["repeat(string, count)"], "Description": ["Repeats the string count number of times."], "Examples": ["repeat('A', 5)"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["replace(string, source, target)"], "Feature": ["replace(string, source, target)"], "Description": ["Replaces any occurrences of the source with target in string."], "Examples": ["replace('hello', 'l', '-')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["reverse(string)"], "Feature": ["reverse(string)"], "Description": ["Reverses the string."], "Examples": ["reverse('hello')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["right_grapheme(string, count)"], "Feature": ["right_grapheme(string, count)"], "Description": ["Extract the right-most count grapheme clusters."], "Examples": ["right_grapheme('\ud83e\udd26\ud83c\udffc\u200d\u2642\ufe0f\ud83e\udd26\ud83c\udffd\u200d\u2640\ufe0f', 1)"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["right(string, count)"], "Feature": ["right(string, count)"], "Description": ["Extract the right-most count characters."], "Examples": ["right('Hello\ud83e\udd86', 3)"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["rpad(string, count, character)"], "Feature": ["rpad(string, count, character)"], "Description": ["Pads the string with the character from the right until it has count characters."], "Examples": ["rpad('hello', 10, '<')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["rtrim(string, characters)"], "Feature": ["rtrim(string, characters)"], "Description": ["Removes any occurrences of any of the characters from the right side of the string."], "Examples": ["rtrim('>>>>test<<', '><')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["rtrim(string)"], "Feature": ["rtrim(string)"], "Description": ["Removes any spaces from the right side of the string.", "Removes any spaces from the right side of the string. In the example, the \u2423 symbol denotes a space character."], "Examples": ["rtrim('\u2423\u2423\u2423\u2423test\u2423\u2423')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["sha256(value)"], "Feature": ["sha256(value)"], "Description": ["Returns a VARCHAR with the SHA-256 hash of the value."], "Examples": ["sha256('\ud83e\udd86')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["split_part(string, separator, index)"], "Feature": ["split_part(string, separator, index)"], "Description": ["Split the string along the separator and return the data at the (1-based) index of the list. If the index is outside the bounds of the list, return an empty string (to match PostgreSQL's behavior)."], "Examples": ["split_part('a;b;c', ';', 2)"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["starts_with(string, search_string)"], "Feature": ["starts_with(string, search_string)"], "Description": ["Return true if string begins with search_string."], "Examples": ["starts_with('abc', 'a')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["regexp_split_to_array"], "Feature": ["regexp_split_to_array"], "Description": ["str_split_regex(string, regex)", "Splits the string along the regex."], "Examples": ["str_split_regex('hello world; 42', ';? ')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["string_split_regex(string, regex)"], "Feature": ["string_split_regex(string, regex)"], "Description": ["Splits the string along the regex."], "Examples": ["string_split_regex('hello world; 42', ';? ')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["string_to_array"], "Feature": ["string_to_array"], "Description": ["str_split", "string_split(string, separator)", "Splits the string along the separator."], "Examples": ["string_split('hello world', ' ')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["strip_accents(string)"], "Feature": ["strip_accents(string)"], "Description": ["Strips accents from string."], "Examples": ["strip_accents('m\u00fchleisen')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["strlen(string)"], "Feature": ["strlen(string)"], "Description": ["Number of bytes in string."], "Examples": ["strlen('\ud83e\udd86')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["instr"], "Feature": ["instr"], "Description": ["strpos(string, search_string)", "Return location of first occurrence of search_string in string, counting from 1. Returns 0 if no match found."], "Examples": ["strpos('test test', 'es')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["substr"], "Feature": ["substr"], "Description": ["substring(string, start, length)", "Extract substring of length characters starting from character start. Note that a start value of 1 refers to the first character of the string."], "Examples": ["substring('Hello', 2, 2)"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["substring_grapheme(string, start, length)"], "Feature": ["substring_grapheme(string, start, length)"], "Description": ["Extract substring of length grapheme clusters starting from character start. Note that a start value of 1 refers to the first character of the string."], "Examples": ["substring_grapheme('\ud83e\udd86\ud83e\udd26\ud83c\udffc\u200d\u2642\ufe0f\ud83e\udd26\ud83c\udffd\u200d\u2640\ufe0f\ud83e\udd86', 3, 2)"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["base64"], "Feature": ["base64"], "Description": ["to_base64(blob)", "Convert a blob to a base64 encoded string."], "Examples": ["to_base64('A'::blob)"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["trim(string, characters)"], "Feature": ["trim(string, characters)"], "Description": ["Removes any occurrences of any of the characters from either side of the string."], "Examples": ["trim('>>>>test<<', '><')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["trim(string)"], "Feature": ["trim(string)"], "Description": ["Removes any spaces from either side of the string."], "Examples": ["trim('    test  ')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["unicode(string)"], "Feature": ["unicode(string)"], "Description": ["Returns the Unicode code of the first character of the string.", "Returns the Unicode code of the first character of the string. Returns -1 when string is empty, and NULL when string is NULL."], "Examples": ["[unicode('\u00e2bcd'), unicode('\u00e2'), unicode(''), unicode(NULL)]"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["ucase"], "Feature": ["ucase"], "Description": ["upper(string)", "Convert string to upper case."], "Examples": ["upper('Hello')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["damerau_levenshtein(s1, s2)"], "Feature": ["damerau_levenshtein(s1, s2)"], "Description": ["Extension of Levenshtein distance to also include transposition of adjacent characters as an allowed edit operation. In other words, the minimum number of edit operations (insertions, deletions, substitutions or transpositions) required to change one string to another. Characters of different cases (e.g., a and A) are considered different."], "Examples": ["damerau_levenshtein('duckdb', 'udckbd')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["editdist3(s1, s2)"], "Feature": ["editdist3(s1, s2)"], "Description": ["Alias of levenshtein for SQLite compatibility. The minimum number of single-character edits (insertions, deletions or substitutions) required to change one string to the other. Characters of different cases (e.g., a and A) are considered different."], "Examples": ["editdist3('duck', 'db')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["hamming(s1, s2)"], "Feature": ["hamming(s1, s2)"], "Description": ["The Hamming distance between to strings, i.e., the number of positions with different characters for two strings of equal length. Strings must be of equal length. Characters of different cases (e.g., a and A) are considered different."], "Examples": ["hamming('duck', 'luck')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["jaccard(s1, s2)"], "Feature": ["jaccard(s1, s2)"], "Description": ["The Jaccard similarity between two strings. Characters of different cases (e.g., a and A) are considered different. Returns a number between 0 and 1."], "Examples": ["jaccard('duck', 'luck')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["jaro_similarity(s1, s2)"], "Feature": ["jaro_similarity(s1, s2)"], "Description": ["The Jaro similarity between two strings. Characters of different cases (e.g., a and A) are considered different. Returns a number between 0 and 1."], "Examples": ["jaro_similarity('duck', 'duckdb')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["jaro_winkler_similarity(s1, s2)"], "Feature": ["jaro_winkler_similarity(s1, s2)"], "Description": ["The Jaro-Winkler similarity between two strings. Characters of different cases (e.g., a and A) are considered different. Returns a number between 0 and 1."], "Examples": ["jaro_winkler_similarity('duck', 'duckdb')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["levenshtein(s1, s2)"], "Feature": ["levenshtein(s1, s2)"], "Description": ["The minimum number of single-character edits (insertions, deletions or substitutions) required to change one string to the other. Characters of different cases (e.g., a and A) are considered different."], "Examples": ["levenshtein('duck', 'db')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["mismatches(s1, s2)"], "Feature": ["mismatches(s1, s2)"], "Description": ["Alias for hamming(s1, s2). The number of positions with different characters for two strings of equal length. Strings must be of equal length. Characters of different cases (e.g., a and A) are considered different."], "Examples": ["mismatches('duck', 'luck')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["starts_with"], "Feature": ["starts_with"], "Description": ["string ^@ search_string", "Return true if string begins with search_string."], "Examples": ["'abc' ^@ 'a'"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["array_extract"], "Feature": ["array_extract"], "Description": ["string[index]", "Extract a single character using a (1-based) index."], "Examples": ["'DuckDB'[4]"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["array_slice"], "Feature": ["array_slice"], "Description": ["string[begin:end]", "Extract a string using slice conventions, see slicing.", "Extract a string using slice conventions similar to Python. Missing begin or end arguments are interpreted as the beginning or end of the list respectively. Negative values are accepted."], "Examples": ["'DuckDB'[:4]"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["list_extract"], "Feature": ["list_extract"], "Description": ["list_element", "array_extract(list, index)", "Extract a single character using a (1-based) index."], "Examples": ["array_extract('DuckDB', 2)"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["list_extract"], "Feature": ["list_extract"], "Description": ["list_element", "array_extract(list, index)", "Extract a single character using a (1-based) index."], "Examples": ["array_extract('DuckDB', 2)"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["suffix"], "Feature": ["suffix"], "Description": ["ends_with(string, search_string)", "Return true if string ends with search_string."], "Examples": ["ends_with('abc', 'c')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["lcase"], "Feature": ["lcase"], "Description": ["lower(string)", "Convert string to lower case."], "Examples": ["lower('Hello')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["str_split_regex"], "Feature": ["str_split_regex"], "Description": ["string_split_regex", "regexp_split_to_array(string, regex)", "Splits the string along the regex."], "Examples": ["regexp_split_to_array('hello world; 42', ';? ')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["str_split_regex"], "Feature": ["str_split_regex"], "Description": ["string_split_regex", "regexp_split_to_array(string, regex)", "Splits the string along the regex."], "Examples": ["regexp_split_to_array('hello world; 42', ';? ')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["regexp_split_to_array"], "Feature": ["regexp_split_to_array"], "Description": ["str_split_regex(string, regex)", "Splits the string along the regex."], "Examples": ["str_split_regex('hello world; 42', ';? ')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["string_to_array"], "Feature": ["string_to_array"], "Description": ["str_split", "string_split(string, separator)", "Splits the string along the separator."], "Examples": ["string_split('hello world', ' ')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["string_to_array"], "Feature": ["string_to_array"], "Description": ["str_split", "string_split(string, separator)", "Splits the string along the separator."], "Examples": ["string_split('hello world', ' ')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["instr"], "Feature": ["instr"], "Description": ["strpos(string, search_string)", "Return location of first occurrence of search_string in string, counting from 1. Returns 0 if no match found."], "Examples": ["strpos('test test', 'es')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["substr"], "Feature": ["substr"], "Description": ["substring(string, start, length)", "Extract substring of length characters starting from character start. Note that a start value of 1 refers to the first character of the string."], "Examples": ["substring('Hello', 2, 2)"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["base64"], "Feature": ["base64"], "Description": ["to_base64(blob)", "Convert a blob to a base64 encoded string."], "Examples": ["to_base64('A'::blob)"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["ucase"], "Feature": ["ucase"], "Description": ["upper(string)", "Convert string to upper case."], "Examples": ["upper('Hello')"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["starts_with"], "Feature": ["starts_with"], "Description": ["string ^@ search_string", "Return true if string begins with search_string."], "Examples": ["'abc' ^@ 'a'"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["string || string"], "Feature": ["string || string"], "Description": ["Concatenate two strings. Any NULL input results in NULL. See also concat(string, ...)."], "Examples": ["'Duck' || 'DB'"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["array_extract"], "Feature": ["array_extract"], "Description": ["string[index]", "Extract a single character using a (1-based) index."], "Examples": ["'DuckDB'[4]"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["array_slice"], "Feature": ["array_slice"], "Description": ["string[begin:end]", "Extract a string using slice conventions, see slicing.", "Extract a string using slice conventions similar to Python. Missing begin or end arguments are interpreted as the beginning or end of the list respectively. Negative values are accepted."], "Examples": ["'DuckDB'[:4]"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["string LIKE target"], "Feature": ["string LIKE target"], "Description": ["Returns true if the string matches the like specifier (see Pattern Matching)."], "Examples": ["'hello' LIKE '%lo'"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["string SIMILAR TO regex"], "Feature": ["string SIMILAR TO regex"], "Description": ["Returns true if the string matches the regex; identical to regexp_full_match (see Pattern Matching).", "Returns true if the string matches the regex; identical to regexp_full_match (see Pattern Matching)"], "Examples": ["'hello' SIMILAR TO 'l+'"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["list_extract"], "Feature": ["list_extract"], "Description": ["list_element", "array_extract(list, index)", "Extract a single character using a (1-based) index."], "Examples": ["array_extract('DuckDB', 2)"], "Category": ["Text Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["array_slice(list, begin, end)"], "Feature": ["array_slice(list, begin, end)"], "Description": ["Extract a string using slice conventions. Negative values are accepted.", "Extract a string using slice conventions (like in Python). Negative values are accepted.", "array_slice('DuckDB', 3, 4)", "array_slice('DuckDB', 3, NULL)", "array_slice('DuckDB', 0, -3)"], "Examples": [], "Category": ["Text Functions"]}
