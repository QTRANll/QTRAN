{"HTML": ["https://duckdb.org/docs/sql/functions/lambda"], "Title": ["array_apply"], "Feature": ["array_apply"], "Description": ["list_apply", "apply", "array_transform", "list_transform(list, lambda)", "Returns a list that is the result of applying the lambda function to each element of the input list.", "Returns a list that is the result of applying the lambda function to each element of the input list. For more information, see Transform."], "Examples": ["list_transform([4, 5, 6], x -> x + 1)"], "Category": ["Lambda Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/lambda"], "Title": ["filter"], "Feature": ["filter"], "Description": ["array_filter", "list_filter(list, lambda)", "Constructs a list from those elements of the input list for which the lambda function returns true.", "Constructs a list from those elements of the input list for which the lambda function returns true. For more information, see Filter."], "Examples": ["list_filter([4, 5, 6], x -> x > 4)"], "Category": ["Lambda Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/lambda"], "Title": ["reduce"], "Feature": ["reduce"], "Description": ["array_reduce", "list_reduce(list, lambda)", "Reduces all elements of the input list into a single value by executing the lambda function on a running result and the next list element. The list must have at least one element \u2013 the use of an initial accumulator value is currently not supported.", "Reduces all elements of the input list into a single value by executing the lambda function on a running result and the next list element. The list must have at least one element \u2013 the use of an initial accumulator value is currently not supported. For more information, see Reduce."], "Examples": ["list_reduce([4, 5, 6], (x, y) -> x + y)"], "Category": ["Lambda Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/lambda"], "Title": ["array_apply"], "Feature": ["array_apply"], "Description": ["list_apply", "apply", "array_transform", "list_transform(list, lambda)", "Returns a list that is the result of applying the lambda function to each element of the input list.", "Returns a list that is the result of applying the lambda function to each element of the input list. For more information, see Transform."], "Examples": ["list_transform([4, 5, 6], x -> x + 1)"], "Category": ["Lambda Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/lambda"], "Title": ["array_apply"], "Feature": ["array_apply"], "Description": ["list_apply", "apply", "array_transform", "list_transform(list, lambda)", "Returns a list that is the result of applying the lambda function to each element of the input list.", "Returns a list that is the result of applying the lambda function to each element of the input list. For more information, see Transform."], "Examples": ["list_transform([4, 5, 6], x -> x + 1)"], "Category": ["Lambda Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/lambda"], "Title": ["array_apply"], "Feature": ["array_apply"], "Description": ["list_apply", "apply", "array_transform", "list_transform(list, lambda)", "Returns a list that is the result of applying the lambda function to each element of the input list.", "Returns a list that is the result of applying the lambda function to each element of the input list. For more information, see Transform."], "Examples": ["list_transform([4, 5, 6], x -> x + 1)"], "Category": ["Lambda Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/lambda"], "Title": ["array_apply"], "Feature": ["array_apply"], "Description": ["list_apply", "apply", "array_transform", "list_transform(list, lambda)", "Returns a list that is the result of applying the lambda function to each element of the input list.", "Returns a list that is the result of applying the lambda function to each element of the input list. For more information, see Transform."], "Examples": ["list_transform([4, 5, 6], x -> x + 1)"], "Category": ["Lambda Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/lambda"], "Title": ["filter"], "Feature": ["filter"], "Description": ["array_filter", "list_filter(list, lambda)", "Constructs a list from those elements of the input list for which the lambda function returns true.", "Constructs a list from those elements of the input list for which the lambda function returns true. For more information, see Filter."], "Examples": ["list_filter([4, 5, 6], x -> x > 4)"], "Category": ["Lambda Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/lambda"], "Title": ["filter"], "Feature": ["filter"], "Description": ["array_filter", "list_filter(list, lambda)", "Constructs a list from those elements of the input list for which the lambda function returns true.", "Constructs a list from those elements of the input list for which the lambda function returns true. For more information, see Filter."], "Examples": ["list_filter([4, 5, 6], x -> x > 4)"], "Category": ["Lambda Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/lambda"], "Title": ["reduce"], "Feature": ["reduce"], "Description": ["array_reduce", "list_reduce(list, lambda)", "Reduces all elements of the input list into a single value by executing the lambda function on a running result and the next list element. The list must have at least one element \u2013 the use of an initial accumulator value is currently not supported.", "Reduces all elements of the input list into a single value by executing the lambda function on a running result and the next list element. The list must have at least one element \u2013 the use of an initial accumulator value is currently not supported. For more information, see Reduce."], "Examples": ["list_reduce([4, 5, 6], (x, y) -> x + y)"], "Category": ["Lambda Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/lambda"], "Title": ["reduce"], "Feature": ["reduce"], "Description": ["array_reduce", "list_reduce(list, lambda)", "Reduces all elements of the input list into a single value by executing the lambda function on a running result and the next list element. The list must have at least one element \u2013 the use of an initial accumulator value is currently not supported.", "Reduces all elements of the input list into a single value by executing the lambda function on a running result and the next list element. The list must have at least one element \u2013 the use of an initial accumulator value is currently not supported. For more information, see Reduce."], "Examples": ["list_reduce([4, 5, 6], (x, y) -> x + y)"], "Category": ["Lambda Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/lambda"], "Title": ["array_apply"], "Feature": ["array_apply"], "Description": ["list_apply", "apply", "array_transform", "list_transform(list, lambda)", "Returns a list that is the result of applying the lambda function to each element of the input list.", "Returns a list that is the result of applying the lambda function to each element of the input list. For more information, see Transform."], "Examples": ["list_transform([4, 5, 6], x -> x + 1)"], "Category": ["Lambda Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/lambda"], "Title": ["filter"], "Feature": ["filter"], "Description": ["array_filter", "list_filter(list, lambda)", "Constructs a list from those elements of the input list for which the lambda function returns true.", "Constructs a list from those elements of the input list for which the lambda function returns true. For more information, see Filter."], "Examples": ["list_filter([4, 5, 6], x -> x > 4)"], "Category": ["Lambda Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/lambda"], "Title": ["reduce"], "Feature": ["reduce"], "Description": ["array_reduce", "list_reduce(list, lambda)", "Reduces all elements of the input list into a single value by executing the lambda function on a running result and the next list element. The list must have at least one element \u2013 the use of an initial accumulator value is currently not supported.", "Reduces all elements of the input list into a single value by executing the lambda function on a running result and the next list element. The list must have at least one element \u2013 the use of an initial accumulator value is currently not supported. For more information, see Reduce."], "Examples": ["list_reduce([4, 5, 6], (x, y) -> x + y)"], "Category": ["Lambda Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/lambda"], "Title": ["array_apply"], "Feature": ["array_apply"], "Description": ["list_apply", "apply", "array_transform", "list_transform(list, lambda)", "Returns a list that is the result of applying the lambda function to each element of the input list.", "Returns a list that is the result of applying the lambda function to each element of the input list. For more information, see Transform."], "Examples": ["list_transform([4, 5, 6], x -> x + 1)"], "Category": ["Lambda Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/lambda"], "Title": ["array_apply"], "Feature": ["array_apply"], "Description": ["list_apply", "apply", "array_transform", "list_transform(list, lambda)", "Returns a list that is the result of applying the lambda function to each element of the input list.", "Returns a list that is the result of applying the lambda function to each element of the input list. For more information, see Transform."], "Examples": ["list_transform([4, 5, 6], x -> x + 1)"], "Category": ["Lambda Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/lambda"], "Title": ["array_apply"], "Feature": ["array_apply"], "Description": ["list_apply", "apply", "array_transform", "list_transform(list, lambda)", "Returns a list that is the result of applying the lambda function to each element of the input list.", "Returns a list that is the result of applying the lambda function to each element of the input list. For more information, see Transform."], "Examples": ["list_transform([4, 5, 6], x -> x + 1)"], "Category": ["Lambda Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/lambda"], "Title": ["array_apply"], "Feature": ["array_apply"], "Description": ["list_apply", "apply", "array_transform", "list_transform(list, lambda)", "Returns a list that is the result of applying the lambda function to each element of the input list.", "Returns a list that is the result of applying the lambda function to each element of the input list. For more information, see Transform."], "Examples": ["list_transform([4, 5, 6], x -> x + 1)"], "Category": ["Lambda Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/lambda"], "Title": ["filter"], "Feature": ["filter"], "Description": ["array_filter", "list_filter(list, lambda)", "Constructs a list from those elements of the input list for which the lambda function returns true.", "Constructs a list from those elements of the input list for which the lambda function returns true. For more information, see Filter."], "Examples": ["list_filter([4, 5, 6], x -> x > 4)"], "Category": ["Lambda Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/lambda"], "Title": ["filter"], "Feature": ["filter"], "Description": ["array_filter", "list_filter(list, lambda)", "Constructs a list from those elements of the input list for which the lambda function returns true.", "Constructs a list from those elements of the input list for which the lambda function returns true. For more information, see Filter."], "Examples": ["list_filter([4, 5, 6], x -> x > 4)"], "Category": ["Lambda Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/lambda"], "Title": ["reduce"], "Feature": ["reduce"], "Description": ["array_reduce", "list_reduce(list, lambda)", "Reduces all elements of the input list into a single value by executing the lambda function on a running result and the next list element. The list must have at least one element \u2013 the use of an initial accumulator value is currently not supported.", "Reduces all elements of the input list into a single value by executing the lambda function on a running result and the next list element. The list must have at least one element \u2013 the use of an initial accumulator value is currently not supported. For more information, see Reduce."], "Examples": ["list_reduce([4, 5, 6], (x, y) -> x + y)"], "Category": ["Lambda Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/lambda"], "Title": ["reduce"], "Feature": ["reduce"], "Description": ["array_reduce", "list_reduce(list, lambda)", "Reduces all elements of the input list into a single value by executing the lambda function on a running result and the next list element. The list must have at least one element \u2013 the use of an initial accumulator value is currently not supported.", "Reduces all elements of the input list into a single value by executing the lambda function on a running result and the next list element. The list must have at least one element \u2013 the use of an initial accumulator value is currently not supported. For more information, see Reduce."], "Examples": ["list_reduce([4, 5, 6], (x, y) -> x + y)"], "Category": ["Lambda Functions"]}
