{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["any_value(arg)"], "Feature": ["any_value(arg)"], "Description": ["Returns the first non-null value from arg. This function is affected by ordering."], "Examples": ["any_value(A)"], "Category": ["Aggregate Functions"], "index": 0}
{"HTML": ["https://duckdb.org/docs/sql/functions/bitstring"], "Title": ["bit_xor(arg)"], "Feature": ["bit_xor(arg)"], "Description": ["Returns the bitwise XOR operation performed on all bitstrings in a given expression."], "Examples": ["bit_xor(A)"], "Category": ["Bitstring Functions"], "index": 1}
{"HTML": ["https://duckdb.org/docs/sql/functions/bitstring"], "Title": ["bitstring_agg(arg)"], "Feature": ["bitstring_agg(arg)"], "Description": ["Returns a bitstring with bits set for each distinct position defined in arg.", "The bitstring_agg function takes any integer type as input and returns a bitstring with bits set for each distinct value. The left-most bit represents the smallest value in the column and the right-most bit the maximum value. If possible, the min and max are retrieved from the column statistics. Otherwise, it is also possible to provide the min and max values."], "Examples": ["bitstring_agg(A)"], "Category": ["Bitstring Functions"], "index": 2}
{"HTML": ["https://duckdb.org/docs/sql/functions/bitstring"], "Title": ["bitstring_agg(arg, min, max)"], "Feature": ["bitstring_agg(arg, min, max)"], "Description": ["Returns a bitstring with bits set for each distinct position defined in arg. All positions must be within the range [min, max] or an Out of Range Error will be thrown."], "Examples": ["bitstring_agg(A, 1, 42)"], "Category": ["Bitstring Functions"], "index": 3}
{"HTML": ["https://duckdb.org/docs/sql/functions/blob"], "Title": ["blob || blob"], "Feature": ["blob || blob"], "Description": ["BLOB concatenation."], "Examples": ["'\\xAA'::BLOB || '\\xBB'::BLOB"], "Category": ["Blob Functions"], "index": 4}
{"HTML": ["https://duckdb.org/docs/sql/functions/blob"], "Title": ["decode(blob)"], "Feature": ["decode(blob)"], "Description": ["Converts blob to VARCHAR. Fails if blob is not valid UTF-8.", "Convert blob to VARCHAR. Fails if blob is not valid UTF-8."], "Examples": ["decode('\\xC3\\xBC'::BLOB)"], "Category": ["Blob Functions"], "index": 5}
{"HTML": ["https://duckdb.org/docs/sql/functions/blob"], "Title": ["encode(string)"], "Feature": ["encode(string)"], "Description": ["Converts the string to BLOB. Converts UTF-8 characters into literal encoding."], "Examples": ["encode('my_string_with_\u00fc')"], "Category": ["Blob Functions"], "index": 6}
{"HTML": ["https://duckdb.org/docs/sql/functions/blob"], "Title": ["octet_length(blob)"], "Feature": ["octet_length(blob)"], "Description": ["Number of bytes in blob."], "Examples": ["octet_length('\\xAA\\xBB'::BLOB)"], "Category": ["Blob Functions"], "index": 7}
{"HTML": ["https://duckdb.org/docs/sql/functions/blob"], "Title": ["read_blob(source)"], "Feature": ["read_blob(source)"], "Description": ["Returns the content from source (a filename, a list of filenames, or a glob pattern) as a BLOB. See the read_blob guide for more details."], "Examples": ["read_blob('hello.bin')"], "Category": ["Blob Functions"], "index": 8}
{"HTML": ["https://duckdb.org/docs/sql/functions/date"], "Title": ["current_date"], "Feature": ["current_date"], "Description": ["Current date (at start of current transaction)."], "Examples": ["current_date"], "Category": ["Date Functions"], "index": 9}
{"HTML": ["https://duckdb.org/docs/sql/functions/date"], "Title": ["date_add(date, interval)"], "Feature": ["date_add(date, interval)"], "Description": ["Add the interval to the date."], "Examples": ["date_add(DATE '1992-09-15', INTERVAL 2 MONTH)"], "Category": ["Date Functions"], "index": 10}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["bit_xor(arg)"], "Feature": ["bit_xor(arg)"], "Description": ["Returns the bitwise XOR of all bits in a given expression."], "Examples": ["bit_xor(A)"], "Category": ["Aggregate Functions"], "index": 11}
{"HTML": ["https://duckdb.org/docs/sql/functions/date"], "Title": ["date_diff(part, startdate, enddate)"], "Feature": ["date_diff(part, startdate, enddate)"], "Description": ["The number of partition boundaries between the dates."], "Examples": ["date_diff('month', DATE '1992-09-15', DATE '1992-11-14')"], "Category": ["Date Functions"], "index": 12}
{"HTML": ["https://duckdb.org/docs/sql/functions/date"], "Title": ["date_part(part, date)"], "Feature": ["date_part(part, date)"], "Description": ["Get the subfield (equivalent to extract)."], "Examples": ["date_part('year', DATE '1992-09-20')"], "Category": ["Date Functions"], "index": 13}
{"HTML": ["https://duckdb.org/docs/sql/functions/date"], "Title": ["date_sub(part, startdate, enddate)"], "Feature": ["date_sub(part, startdate, enddate)"], "Description": ["The number of complete partitions between the dates."], "Examples": ["date_sub('month', DATE '1992-09-15', DATE '1992-11-14')"], "Category": ["Date Functions"], "index": 14}
{"HTML": ["https://duckdb.org/docs/sql/functions/date"], "Title": ["date_trunc(part, date)"], "Feature": ["date_trunc(part, date)"], "Description": ["Truncate to specified precision."], "Examples": ["date_trunc('month', DATE '1992-03-07')"], "Category": ["Date Functions"], "index": 15}
{"HTML": ["https://duckdb.org/docs/sql/functions/date"], "Title": ["date_diff"], "Feature": ["date_diff"], "Description": ["datediff(part, startdate, enddate)", "The number of partition boundaries between the dates. Alias of date_diff.", "The number of partition boundaries between the dates."], "Examples": ["datediff('month', DATE '1992-09-15', DATE '1992-11-14')"], "Category": ["Date Functions"], "index": 16}
{"HTML": ["https://duckdb.org/docs/sql/functions/date"], "Title": ["date_part"], "Feature": ["date_part"], "Description": ["datepart(part, date)", "Get the subfield (equivalent to extract). Alias of date_part.", "Get the subfield (equivalent to extract)."], "Examples": ["datepart('year', DATE '1992-09-20')"], "Category": ["Date Functions"], "index": 17}
{"HTML": ["https://duckdb.org/docs/sql/functions/date"], "Title": ["date_sub"], "Feature": ["date_sub"], "Description": ["datesub(part, startdate, enddate)", "The number of complete partitions between the dates. Alias of date_sub.", "The number of complete partitions between the dates."], "Examples": ["datesub('month', DATE '1992-09-15', DATE '1992-11-14')"], "Category": ["Date Functions"], "index": 18}
{"HTML": ["https://duckdb.org/docs/sql/functions/date"], "Title": ["date_trunc"], "Feature": ["date_trunc"], "Description": ["datetrunc(part, date)", "Truncate to specified precision. Alias of date_trunc.", "Truncate to specified precision."], "Examples": ["datetrunc('month', DATE '1992-03-07')"], "Category": ["Date Functions"], "index": 19}
{"HTML": ["https://duckdb.org/docs/sql/functions/date"], "Title": ["dayname(date)"], "Feature": ["dayname(date)"], "Description": ["The (English) name of the weekday."], "Examples": ["dayname(DATE '1992-09-20')"], "Category": ["Date Functions"], "index": 20}
{"HTML": ["https://duckdb.org/docs/sql/functions/date"], "Title": ["extract(part from date)"], "Feature": ["extract(part from date)"], "Description": ["Get subfield from a date."], "Examples": ["extract('year' FROM DATE '1992-09-20')"], "Category": ["Date Functions"], "index": 21}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["bitstring_agg(arg)"], "Feature": ["bitstring_agg(arg)"], "Description": ["Returns a bitstring whose length corresponds to the range of the non-null (integer) values, with bits set at the location of each (distinct) value."], "Examples": ["bitstring_agg(A)"], "Category": ["Aggregate Functions"], "index": 22}
{"HTML": ["https://duckdb.org/docs/sql/functions/date"], "Title": ["greatest(date, date)"], "Feature": ["greatest(date, date)"], "Description": ["The later of two dates."], "Examples": ["greatest(DATE '1992-09-20', DATE '1992-03-07')"], "Category": ["Date Functions"], "index": 23}
{"HTML": ["https://duckdb.org/docs/sql/functions/date"], "Title": ["isfinite(date)"], "Feature": ["isfinite(date)"], "Description": ["Returns true if the date is finite, false otherwise."], "Examples": ["isfinite(DATE '1992-03-07')"], "Category": ["Date Functions"], "index": 24}
{"HTML": ["https://duckdb.org/docs/sql/functions/date"], "Title": ["isinf(date)"], "Feature": ["isinf(date)"], "Description": ["Returns true if the date is infinite, false otherwise."], "Examples": ["isinf(DATE '-infinity')"], "Category": ["Date Functions"], "index": 25}
{"HTML": ["https://duckdb.org/docs/sql/functions/date"], "Title": ["last_day(date)"], "Feature": ["last_day(date)"], "Description": ["The last day of the corresponding month in the date."], "Examples": ["last_day(DATE '1992-09-20')"], "Category": ["Date Functions"], "index": 26}
{"HTML": ["https://duckdb.org/docs/sql/functions/date"], "Title": ["least(date, date)"], "Feature": ["least(date, date)"], "Description": ["The earlier of two dates."], "Examples": ["least(DATE '1992-09-20', DATE '1992-03-07')"], "Category": ["Date Functions"], "index": 27}
{"HTML": ["https://duckdb.org/docs/sql/functions/date"], "Title": ["make_date(year, month, day)"], "Feature": ["make_date(year, month, day)"], "Description": ["The date for the given parts."], "Examples": ["make_date(1992, 9, 20)"], "Category": ["Date Functions"], "index": 28}
{"HTML": ["https://duckdb.org/docs/sql/functions/date"], "Title": ["monthname(date)"], "Feature": ["monthname(date)"], "Description": ["The (English) name of the month."], "Examples": ["monthname(DATE '1992-09-20')"], "Category": ["Date Functions"], "index": 29}
{"HTML": ["https://duckdb.org/docs/sql/functions/date"], "Title": ["strftime(date, format)"], "Feature": ["strftime(date, format)"], "Description": ["Converts a date to a string according to the format string."], "Examples": ["strftime(date '1992-01-01', '%a, %-d %B %Y')"], "Category": ["Date Functions"], "index": 30}
{"HTML": ["https://duckdb.org/docs/sql/functions/date"], "Title": ["time_bucket(bucket_width, date[, offset])"], "Feature": ["time_bucket(bucket_width, date[, offset])"], "Description": ["Truncate date by the specified interval bucket_width. Buckets are offset by offset interval."], "Examples": ["time_bucket(INTERVAL '2 months', DATE '1992-04-20', INTERVAL '1 month')"], "Category": ["Date Functions"], "index": 31}
{"HTML": ["https://duckdb.org/docs/sql/functions/date"], "Title": ["time_bucket(bucket_width, date[, origin])"], "Feature": ["time_bucket(bucket_width, date[, origin])"], "Description": ["Truncate date by the specified interval bucket_width. Buckets are aligned relative to origin date. origin defaults to 2000-01-03 for buckets that don't include a month or year interval, and to 2000-01-01 for month and year buckets."], "Examples": ["time_bucket(INTERVAL '2 weeks', DATE '1992-04-20', DATE '1992-04-01')"], "Category": ["Date Functions"], "index": 32}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["bool_and(arg)"], "Feature": ["bool_and(arg)"], "Description": ["Returns true if every input value is true, otherwise false."], "Examples": ["bool_and(A)"], "Category": ["Aggregate Functions"], "index": 33}
{"HTML": ["https://duckdb.org/docs/sql/functions/date"], "Title": ["today()"], "Feature": ["today()"], "Description": ["Current date (start of current transaction)."], "Examples": ["today()"], "Category": ["Date Functions"], "index": 34}
{"HTML": ["https://duckdb.org/docs/sql/functions/date"], "Title": ["date_diff"], "Feature": ["date_diff"], "Description": ["datediff(part, startdate, enddate)", "The number of partition boundaries between the dates. Alias of date_diff.", "The number of partition boundaries between the dates."], "Examples": ["datediff('month', DATE '1992-09-15', DATE '1992-11-14')"], "Category": ["Date Functions"], "index": 35}
{"HTML": ["https://duckdb.org/docs/sql/functions/date"], "Title": ["date_part"], "Feature": ["date_part"], "Description": ["datepart(part, date)", "Get the subfield (equivalent to extract). Alias of date_part.", "Get the subfield (equivalent to extract)."], "Examples": ["datepart('year', DATE '1992-09-20')"], "Category": ["Date Functions"], "index": 36}
{"HTML": ["https://duckdb.org/docs/sql/functions/date"], "Title": ["date_sub"], "Feature": ["date_sub"], "Description": ["datesub(part, startdate, enddate)", "The number of complete partitions between the dates. Alias of date_sub.", "The number of complete partitions between the dates."], "Examples": ["datesub('month', DATE '1992-09-15', DATE '1992-11-14')"], "Category": ["Date Functions"], "index": 37}
{"HTML": ["https://duckdb.org/docs/sql/functions/date"], "Title": ["date_trunc"], "Feature": ["date_trunc"], "Description": ["datetrunc(part, date)", "Truncate to specified precision. Alias of date_trunc.", "Truncate to specified precision."], "Examples": ["datetrunc('month', DATE '1992-03-07')"], "Category": ["Date Functions"], "index": 38}
{"HTML": ["https://duckdb.org/docs/sql/functions/datepart"], "Title": ["century(date)"], "Feature": ["century(date)"], "Description": ["Century."], "Examples": ["century(date '1992-02-15')"], "Category": ["Date Part Functions"], "index": 39}
{"HTML": ["https://duckdb.org/docs/sql/functions/datepart"], "Title": ["day(date)"], "Feature": ["day(date)"], "Description": ["Day."], "Examples": ["day(date '1992-02-15')"], "Category": ["Date Part Functions"], "index": 40}
{"HTML": ["https://duckdb.org/docs/sql/functions/datepart"], "Title": ["dayofmonth(date)"], "Feature": ["dayofmonth(date)"], "Description": ["Day (synonym)."], "Examples": ["dayofmonth(date '1992-02-15')"], "Category": ["Date Part Functions"], "index": 41}
{"HTML": ["https://duckdb.org/docs/sql/functions/datepart"], "Title": ["dayofweek(date)"], "Feature": ["dayofweek(date)"], "Description": ["Numeric weekday (Sunday = 0, Saturday = 6)."], "Examples": ["dayofweek(date '1992-02-15')"], "Category": ["Date Part Functions"], "index": 42}
{"HTML": ["https://duckdb.org/docs/sql/functions/datepart"], "Title": ["dayofyear(date)"], "Feature": ["dayofyear(date)"], "Description": ["Day of the year (starts from 1, i.e., January 1 = 1)."], "Examples": ["dayofyear(date '1992-02-15')"], "Category": ["Date Part Functions"], "index": 43}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["bool_or(arg)"], "Feature": ["bool_or(arg)"], "Description": ["Returns true if any input value is true, otherwise false."], "Examples": ["bool_or(A)"], "Category": ["Aggregate Functions"], "index": 44}
{"HTML": ["https://duckdb.org/docs/sql/functions/datepart"], "Title": ["decade(date)"], "Feature": ["decade(date)"], "Description": ["Decade (year / 10)."], "Examples": ["decade(date '1992-02-15')"], "Category": ["Date Part Functions"], "index": 45}
{"HTML": ["https://duckdb.org/docs/sql/functions/datepart"], "Title": ["epoch(date)"], "Feature": ["epoch(date)"], "Description": ["Seconds since 1970-01-01."], "Examples": ["epoch(date '1992-02-15')"], "Category": ["Date Part Functions"], "index": 46}
{"HTML": ["https://duckdb.org/docs/sql/functions/datepart"], "Title": ["era(date)"], "Feature": ["era(date)"], "Description": ["Calendar era."], "Examples": ["era(date '0044-03-15 (BC)')"], "Category": ["Date Part Functions"], "index": 47}
{"HTML": ["https://duckdb.org/docs/sql/functions/datepart"], "Title": ["hour(date)"], "Feature": ["hour(date)"], "Description": ["Hours."], "Examples": ["hour(timestamp '2021-08-03 11:59:44.123456')"], "Category": ["Date Part Functions"], "index": 48}
{"HTML": ["https://duckdb.org/docs/sql/functions/datepart"], "Title": ["isodow(date)"], "Feature": ["isodow(date)"], "Description": ["Numeric ISO weekday (Monday = 1, Sunday = 7)."], "Examples": ["isodow(date '1992-02-15')"], "Category": ["Date Part Functions"], "index": 49}
{"HTML": ["https://duckdb.org/docs/sql/functions/datepart"], "Title": ["isoyear(date)"], "Feature": ["isoyear(date)"], "Description": ["ISO Year number (Starts on Monday of week containing Jan 4th)."], "Examples": ["isoyear(date '2022-01-01')"], "Category": ["Date Part Functions"], "index": 50}
{"HTML": ["https://duckdb.org/docs/sql/functions/datepart"], "Title": ["microsecond(date)"], "Feature": ["microsecond(date)"], "Description": ["Sub-minute microseconds."], "Examples": ["microsecond(timestamp '2021-08-03 11:59:44.123456')"], "Category": ["Date Part Functions"], "index": 51}
{"HTML": ["https://duckdb.org/docs/sql/functions/datepart"], "Title": ["millennium(date)"], "Feature": ["millennium(date)"], "Description": ["Millennium."], "Examples": ["millennium(date '1992-02-15')"], "Category": ["Date Part Functions"], "index": 52}
{"HTML": ["https://duckdb.org/docs/sql/functions/datepart"], "Title": ["millisecond(date)"], "Feature": ["millisecond(date)"], "Description": ["Sub-minute milliseconds."], "Examples": ["millisecond(timestamp '2021-08-03 11:59:44.123456')"], "Category": ["Date Part Functions"], "index": 53}
{"HTML": ["https://duckdb.org/docs/sql/functions/datepart"], "Title": ["minute(date)"], "Feature": ["minute(date)"], "Description": ["Minutes."], "Examples": ["minute(timestamp '2021-08-03 11:59:44.123456')"], "Category": ["Date Part Functions"], "index": 54}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["count(*)"], "Feature": ["count(*)"], "Description": ["count()", "Returns the number of rows in a group."], "Examples": ["count()"], "Category": ["Aggregate Functions"], "index": 55}
{"HTML": ["https://duckdb.org/docs/sql/functions/datepart"], "Title": ["month(date)"], "Feature": ["month(date)"], "Description": ["Month."], "Examples": ["month(date '1992-02-15')"], "Category": ["Date Part Functions"], "index": 56}
{"HTML": ["https://duckdb.org/docs/sql/functions/datepart"], "Title": ["quarter(date)"], "Feature": ["quarter(date)"], "Description": ["Quarter."], "Examples": ["quarter(date '1992-02-15')"], "Category": ["Date Part Functions"], "index": 57}
{"HTML": ["https://duckdb.org/docs/sql/functions/datepart"], "Title": ["second(date)"], "Feature": ["second(date)"], "Description": ["Seconds."], "Examples": ["second(timestamp '2021-08-03 11:59:44.123456')"], "Category": ["Date Part Functions"], "index": 58}
{"HTML": ["https://duckdb.org/docs/sql/functions/datepart"], "Title": ["timezone_hour(date)"], "Feature": ["timezone_hour(date)"], "Description": ["Time zone offset hour portion."], "Examples": ["timezone_hour(date '1992-02-15')"], "Category": ["Date Part Functions"], "index": 59}
{"HTML": ["https://duckdb.org/docs/sql/functions/datepart"], "Title": ["timezone_minute(date)"], "Feature": ["timezone_minute(date)"], "Description": ["Time zone offset minutes portion."], "Examples": ["timezone_minute(date '1992-02-15')"], "Category": ["Date Part Functions"], "index": 60}
{"HTML": ["https://duckdb.org/docs/sql/functions/datepart"], "Title": ["timezone(date)"], "Feature": ["timezone(date)"], "Description": ["Time Zone offset in minutes."], "Examples": ["timezone(date '1992-02-15')"], "Category": ["Date Part Functions"], "index": 61}
{"HTML": ["https://duckdb.org/docs/sql/functions/datepart"], "Title": ["week(date)"], "Feature": ["week(date)"], "Description": ["ISO Week."], "Examples": ["week(date '1992-02-15')"], "Category": ["Date Part Functions"], "index": 62}
{"HTML": ["https://duckdb.org/docs/sql/functions/datepart"], "Title": ["weekday(date)"], "Feature": ["weekday(date)"], "Description": ["Numeric weekday synonym (Sunday = 0, Saturday = 6)."], "Examples": ["weekday(date '1992-02-15')"], "Category": ["Date Part Functions"], "index": 63}
{"HTML": ["https://duckdb.org/docs/sql/functions/datepart"], "Title": ["weekofyear(date)"], "Feature": ["weekofyear(date)"], "Description": ["ISO Week (synonym)."], "Examples": ["weekofyear(date '1992-02-15')"], "Category": ["Date Part Functions"], "index": 64}
{"HTML": ["https://duckdb.org/docs/sql/functions/datepart"], "Title": ["year(date)"], "Feature": ["year(date)"], "Description": ["Year."], "Examples": ["year(date '1992-02-15')"], "Category": ["Date Part Functions"], "index": 65}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["count(arg)"], "Feature": ["count(arg)"], "Description": ["Returns the number of non-null values in arg."], "Examples": ["count(A)"], "Category": ["Aggregate Functions"], "index": 66}
{"HTML": ["https://duckdb.org/docs/sql/functions/datepart"], "Title": ["yearweek(date)"], "Feature": ["yearweek(date)"], "Description": ["BIGINT of combined ISO Year number and 2-digit version of ISO Week number."], "Examples": ["yearweek(date '1992-02-15')"], "Category": ["Date Part Functions"], "index": 67}
{"HTML": ["https://duckdb.org/docs/sql/functions/enum"], "Title": ["enum_code(enum_value)"], "Feature": ["enum_code(enum_value)"], "Description": ["Returns the numeric value backing the given enum value."], "Examples": ["enum_code('happy'::mood)"], "Category": ["Enum Functions"], "index": 68}
{"HTML": ["https://duckdb.org/docs/sql/functions/enum"], "Title": ["enum_first(enum)"], "Feature": ["enum_first(enum)"], "Description": ["Returns the first value of the input enum type."], "Examples": ["enum_first(NULL::mood)"], "Category": ["Enum Functions"], "index": 69}
{"HTML": ["https://duckdb.org/docs/sql/functions/enum"], "Title": ["enum_last(enum)"], "Feature": ["enum_last(enum)"], "Description": ["Returns the last value of the input enum type."], "Examples": ["enum_last(NULL::mood)"], "Category": ["Enum Functions"], "index": 70}
{"HTML": ["https://duckdb.org/docs/sql/functions/enum"], "Title": ["enum_range(enum)"], "Feature": ["enum_range(enum)"], "Description": ["Returns all values of the input enum type as an array."], "Examples": ["enum_range(NULL::mood)"], "Category": ["Enum Functions"], "index": 71}
{"HTML": ["https://duckdb.org/docs/sql/functions/enum"], "Title": ["enum_range_boundary(enum, enum)"], "Feature": ["enum_range_boundary(enum, enum)"], "Description": ["Returns the range between the two given enum values as an array.", "Returns the range between the two given enum values as an array. The values must be of the same enum type. When the first parameter is NULL, the result starts with the first value of the enum type. When the second parameter is NULL, the result ends with the last value of the enum type."], "Examples": ["enum_range_boundary(NULL, 'happy'::mood)"], "Category": ["Enum Functions"], "index": 72}
{"HTML": ["https://duckdb.org/docs/sql/functions/interval"], "Title": ["date_part(part, interval)"], "Feature": ["date_part(part, interval)"], "Description": ["Extract datepart component (equivalent to extract). See INTERVAL for the sometimes surprising rules governing this extraction."], "Examples": ["date_part('year', INTERVAL '14 months')"], "Category": ["Interval Functions"], "index": 73}
{"HTML": ["https://duckdb.org/docs/sql/functions/interval"], "Title": ["datepart(part, interval)"], "Feature": ["datepart(part, interval)"], "Description": ["Alias of date_part."], "Examples": ["datepart('year', INTERVAL '14 months')"], "Category": ["Interval Functions"], "index": 74}
{"HTML": ["https://duckdb.org/docs/sql/functions/interval"], "Title": ["extract(part FROM interval)"], "Feature": ["extract(part FROM interval)"], "Description": ["Alias of date_part."], "Examples": ["extract('month' FROM INTERVAL '14 months')"], "Category": ["Interval Functions"], "index": 75}
{"HTML": ["https://duckdb.org/docs/sql/functions/interval"], "Title": ["epoch(interval)"], "Feature": ["epoch(interval)"], "Description": ["Get total number of seconds, as double precision floating point number, in interval."], "Examples": ["epoch(INTERVAL 5 HOUR)"], "Category": ["Interval Functions"], "index": 76}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["favg(arg)"], "Feature": ["favg(arg)"], "Description": ["Calculates the average using a more accurate floating point summation (Kahan Sum)."], "Examples": ["favg(A)"], "Category": ["Aggregate Functions"], "index": 77}
{"HTML": ["https://duckdb.org/docs/sql/functions/interval"], "Title": ["to_centuries(integer)"], "Feature": ["to_centuries(integer)"], "Description": ["Construct a century interval."], "Examples": ["to_centuries(5)"], "Category": ["Interval Functions"], "index": 78}
{"HTML": ["https://duckdb.org/docs/sql/functions/interval"], "Title": ["to_days(integer)"], "Feature": ["to_days(integer)"], "Description": ["Construct a day interval."], "Examples": ["to_days(5)"], "Category": ["Interval Functions"], "index": 79}
{"HTML": ["https://duckdb.org/docs/sql/functions/interval"], "Title": ["to_decades(integer)"], "Feature": ["to_decades(integer)"], "Description": ["Construct a decade interval."], "Examples": ["to_decades(5)"], "Category": ["Interval Functions"], "index": 80}
{"HTML": ["https://duckdb.org/docs/sql/functions/interval"], "Title": ["to_hours(integer)"], "Feature": ["to_hours(integer)"], "Description": ["Construct a hour interval."], "Examples": ["to_hours(5)"], "Category": ["Interval Functions"], "index": 81}
{"HTML": ["https://duckdb.org/docs/sql/functions/interval"], "Title": ["to_microseconds(integer)"], "Feature": ["to_microseconds(integer)"], "Description": ["Construct a microsecond interval."], "Examples": ["to_microseconds(5)"], "Category": ["Interval Functions"], "index": 82}
{"HTML": ["https://duckdb.org/docs/sql/functions/interval"], "Title": ["to_millennia(integer)"], "Feature": ["to_millennia(integer)"], "Description": ["Construct a millennium interval."], "Examples": ["to_millennia(5)"], "Category": ["Interval Functions"], "index": 83}
{"HTML": ["https://duckdb.org/docs/sql/functions/interval"], "Title": ["to_milliseconds(integer)"], "Feature": ["to_milliseconds(integer)"], "Description": ["Construct a millisecond interval."], "Examples": ["to_milliseconds(5)"], "Category": ["Interval Functions"], "index": 84}
{"HTML": ["https://duckdb.org/docs/sql/functions/interval"], "Title": ["to_minutes(integer)"], "Feature": ["to_minutes(integer)"], "Description": ["Construct a minute interval."], "Examples": ["to_minutes(5)"], "Category": ["Interval Functions"], "index": 85}
{"HTML": ["https://duckdb.org/docs/sql/functions/interval"], "Title": ["to_months(integer)"], "Feature": ["to_months(integer)"], "Description": ["Construct a month interval."], "Examples": ["to_months(5)"], "Category": ["Interval Functions"], "index": 86}
{"HTML": ["https://duckdb.org/docs/sql/functions/interval"], "Title": ["to_seconds(integer)"], "Feature": ["to_seconds(integer)"], "Description": ["Construct a second interval."], "Examples": ["to_seconds(5)"], "Category": ["Interval Functions"], "index": 87}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["arbitrary(A)"], "Feature": ["arbitrary(A)"], "Description": ["first(arg)", "Returns the first value (null or non-null) from arg. This function is affected by ordering."], "Examples": ["first(A)"], "Category": ["Aggregate Functions"], "index": 88}
{"HTML": ["https://duckdb.org/docs/sql/functions/interval"], "Title": ["to_weeks(integer)"], "Feature": ["to_weeks(integer)"], "Description": ["Construct a week interval."], "Examples": ["to_weeks(5)"], "Category": ["Interval Functions"], "index": 89}
{"HTML": ["https://duckdb.org/docs/sql/functions/interval"], "Title": ["to_years(integer)"], "Feature": ["to_years(integer)"], "Description": ["Construct a year interval."], "Examples": ["to_years(5)"], "Category": ["Interval Functions"], "index": 90}
{"HTML": ["https://duckdb.org/docs/sql/functions/lambda"], "Title": ["array_apply"], "Feature": ["array_apply"], "Description": ["list_apply", "apply", "array_transform", "list_transform(list, lambda)", "Returns a list that is the result of applying the lambda function to each element of the input list.", "Returns a list that is the result of applying the lambda function to each element of the input list. For more information, see Transform."], "Examples": ["list_transform([4, 5, 6], x -> x + 1)"], "Category": ["Lambda Functions"], "index": 91}
{"HTML": ["https://duckdb.org/docs/sql/functions/lambda"], "Title": ["filter"], "Feature": ["filter"], "Description": ["array_filter", "list_filter(list, lambda)", "Constructs a list from those elements of the input list for which the lambda function returns true.", "Constructs a list from those elements of the input list for which the lambda function returns true. For more information, see Filter."], "Examples": ["list_filter([4, 5, 6], x -> x > 4)"], "Category": ["Lambda Functions"], "index": 92}
{"HTML": ["https://duckdb.org/docs/sql/functions/lambda"], "Title": ["reduce"], "Feature": ["reduce"], "Description": ["array_reduce", "list_reduce(list, lambda)", "Reduces all elements of the input list into a single value by executing the lambda function on a running result and the next list element. The list must have at least one element \u2013 the use of an initial accumulator value is currently not supported.", "Reduces all elements of the input list into a single value by executing the lambda function on a running result and the next list element. The list must have at least one element \u2013 the use of an initial accumulator value is currently not supported. For more information, see Reduce."], "Examples": ["list_reduce([4, 5, 6], (x, y) -> x + y)"], "Category": ["Lambda Functions"], "index": 93}
{"HTML": ["https://duckdb.org/docs/sql/functions/lambda"], "Title": ["array_apply"], "Feature": ["array_apply"], "Description": ["list_apply", "apply", "array_transform", "list_transform(list, lambda)", "Returns a list that is the result of applying the lambda function to each element of the input list.", "Returns a list that is the result of applying the lambda function to each element of the input list. For more information, see Transform."], "Examples": ["list_transform([4, 5, 6], x -> x + 1)"], "Category": ["Lambda Functions"], "index": 94}
{"HTML": ["https://duckdb.org/docs/sql/functions/lambda"], "Title": ["array_apply"], "Feature": ["array_apply"], "Description": ["list_apply", "apply", "array_transform", "list_transform(list, lambda)", "Returns a list that is the result of applying the lambda function to each element of the input list.", "Returns a list that is the result of applying the lambda function to each element of the input list. For more information, see Transform."], "Examples": ["list_transform([4, 5, 6], x -> x + 1)"], "Category": ["Lambda Functions"], "index": 95}
{"HTML": ["https://duckdb.org/docs/sql/functions/lambda"], "Title": ["array_apply"], "Feature": ["array_apply"], "Description": ["list_apply", "apply", "array_transform", "list_transform(list, lambda)", "Returns a list that is the result of applying the lambda function to each element of the input list.", "Returns a list that is the result of applying the lambda function to each element of the input list. For more information, see Transform."], "Examples": ["list_transform([4, 5, 6], x -> x + 1)"], "Category": ["Lambda Functions"], "index": 96}
{"HTML": ["https://duckdb.org/docs/sql/functions/lambda"], "Title": ["array_apply"], "Feature": ["array_apply"], "Description": ["list_apply", "apply", "array_transform", "list_transform(list, lambda)", "Returns a list that is the result of applying the lambda function to each element of the input list.", "Returns a list that is the result of applying the lambda function to each element of the input list. For more information, see Transform."], "Examples": ["list_transform([4, 5, 6], x -> x + 1)"], "Category": ["Lambda Functions"], "index": 97}
{"HTML": ["https://duckdb.org/docs/sql/functions/lambda"], "Title": ["filter"], "Feature": ["filter"], "Description": ["array_filter", "list_filter(list, lambda)", "Constructs a list from those elements of the input list for which the lambda function returns true.", "Constructs a list from those elements of the input list for which the lambda function returns true. For more information, see Filter."], "Examples": ["list_filter([4, 5, 6], x -> x > 4)"], "Category": ["Lambda Functions"], "index": 98}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["kahan_sum"], "Feature": ["kahan_sum"], "Description": ["sumKahan", "fsum(arg)", "Calculates the sum using a more accurate floating point summation (Kahan Sum)."], "Examples": ["fsum(A)"], "Category": ["Aggregate Functions"], "index": 99}
{"HTML": ["https://duckdb.org/docs/sql/functions/lambda"], "Title": ["filter"], "Feature": ["filter"], "Description": ["array_filter", "list_filter(list, lambda)", "Constructs a list from those elements of the input list for which the lambda function returns true.", "Constructs a list from those elements of the input list for which the lambda function returns true. For more information, see Filter."], "Examples": ["list_filter([4, 5, 6], x -> x > 4)"], "Category": ["Lambda Functions"], "index": 100}
{"HTML": ["https://duckdb.org/docs/sql/functions/lambda"], "Title": ["reduce"], "Feature": ["reduce"], "Description": ["array_reduce", "list_reduce(list, lambda)", "Reduces all elements of the input list into a single value by executing the lambda function on a running result and the next list element. The list must have at least one element \u2013 the use of an initial accumulator value is currently not supported.", "Reduces all elements of the input list into a single value by executing the lambda function on a running result and the next list element. The list must have at least one element \u2013 the use of an initial accumulator value is currently not supported. For more information, see Reduce."], "Examples": ["list_reduce([4, 5, 6], (x, y) -> x + y)"], "Category": ["Lambda Functions"], "index": 101}
{"HTML": ["https://duckdb.org/docs/sql/functions/lambda"], "Title": ["reduce"], "Feature": ["reduce"], "Description": ["array_reduce", "list_reduce(list, lambda)", "Reduces all elements of the input list into a single value by executing the lambda function on a running result and the next list element. The list must have at least one element \u2013 the use of an initial accumulator value is currently not supported.", "Reduces all elements of the input list into a single value by executing the lambda function on a running result and the next list element. The list must have at least one element \u2013 the use of an initial accumulator value is currently not supported. For more information, see Reduce."], "Examples": ["list_reduce([4, 5, 6], (x, y) -> x + y)"], "Category": ["Lambda Functions"], "index": 102}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list_extract"], "Feature": ["list_extract"], "Description": ["list[index]", "Bracket notation serves as an alias for list_extract."], "Examples": ["[4, 5, 6][3]"], "Category": ["List Functions"], "index": 103}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list_slice"], "Feature": ["list_slice"], "Description": ["list[begin:end]", "Bracket notation with colon is an alias for list_slice."], "Examples": ["[4, 5, 6][2:3]"], "Category": ["List Functions"], "index": 104}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list[begin:end:step]"], "Feature": ["list[begin:end:step]"], "Description": ["list_slice in bracket notation with an added step feature."], "Examples": ["[4, 5, 6][:-:2]"], "Category": ["List Functions"], "index": 105}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_pop_back(list)"], "Feature": ["array_pop_back(list)"], "Description": ["Returns the list without the last element."], "Examples": ["array_pop_back([4, 5, 6])"], "Category": ["List Functions"], "index": 106}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_pop_front(list)"], "Feature": ["array_pop_front(list)"], "Description": ["Returns the list without the first element."], "Examples": ["array_pop_front([4, 5, 6])"], "Category": ["List Functions"], "index": 107}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["flatten(list_of_lists)"], "Feature": ["flatten(list_of_lists)"], "Description": ["Concatenate a list of lists into a single list. This only flattens one level of the list (see examples)."], "Examples": ["flatten([[1, 2], [3, 4]])"], "Category": ["List Functions"], "index": 108}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_length"], "Feature": ["array_length"], "Description": ["len(list)", "Return the length of the list."], "Examples": ["len([1, 2, 3])"], "Category": ["List Functions"], "index": 109}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["geometric_mean(A)"], "Feature": ["geometric_mean(A)"], "Description": ["geomean(arg)", "Calculates the geometric mean of all non-null values in arg."], "Examples": ["geomean(A)"], "Category": ["Aggregate Functions"], "index": 110}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["first(A)"], "Feature": ["first(A)"], "Description": ["arbitrary(arg)", "Returns the first value (null or non-null) from arg. This function is affected by ordering."], "Examples": ["arbitrary(A)"], "Category": ["Aggregate Functions"], "index": 111}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_aggr"], "Feature": ["array_aggr"], "Description": ["array_aggregate", "aggregate", "list_aggr", "list_aggregate(list, name)", "Executes the aggregate function name on the elements of list. See the List Aggregates section for more details."], "Examples": ["list_aggregate([1, 2, NULL], 'min')"], "Category": ["List Functions"], "index": 112}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list_any_value(list)"], "Feature": ["list_any_value(list)"], "Description": ["Returns the first non-null value in the list."], "Examples": ["list_any_value([NULL, -3])"], "Category": ["List Functions"], "index": 113}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_push_back"], "Feature": ["array_push_back"], "Description": ["array_append", "list_append(list, element)", "Appends element to list."], "Examples": ["list_append([2, 3], 4)"], "Category": ["List Functions"], "index": 114}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_cat"], "Feature": ["array_cat"], "Description": ["array_concat", "list_cat", "list_concat(list1, list2)", "Concatenates two lists."], "Examples": ["list_concat([2, 3], [4, 5, 6])"], "Category": ["List Functions"], "index": 115}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_has"], "Feature": ["array_has"], "Description": ["array_contains", "list_has", "list_contains(list, element)", "Returns true if the list contains the element."], "Examples": ["list_contains([1, 2, NULL], 1)"], "Category": ["List Functions"], "index": 116}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list_cosine_similarity(list1, list2)"], "Feature": ["list_cosine_similarity(list1, list2)"], "Description": ["Compute the cosine similarity between two lists."], "Examples": ["list_cosine_similarity([1, 2, 3], [1, 2, 5])"], "Category": ["List Functions"], "index": 117}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list_cosine_distance(list1, list2)"], "Feature": ["list_cosine_distance(list1, list2)"], "Description": ["Compute the cosine distance between two lists. Equivalent to 1.0 - list_cosine_similarity.", "Compute the cosine distance between two lists. Equivalent to 1.0 - list_cosine_similarity"], "Examples": ["list_cosine_distance([1, 2, 3], [1, 2, 5])"], "Category": ["List Functions"], "index": 118}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list_distance(list1, list2)"], "Feature": ["list_distance(list1, list2)"], "Description": ["Calculates the Euclidean distance between two points with coordinates given in two inputs lists of equal length."], "Examples": ["list_distance([1, 2, 3], [1, 2, 5])"], "Category": ["List Functions"], "index": 119}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_distinct"], "Feature": ["array_distinct"], "Description": ["list_distinct(list)", "Removes all duplicates and NULL values from a list. Does not preserve the original order."], "Examples": ["list_distinct([1, 1, NULL, -3, 1, 5])"], "Category": ["List Functions"], "index": 120}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list_inner_product"], "Feature": ["list_inner_product"], "Description": ["list_dot_product(list1, list2)", "Computes the dot product of two same-sized lists of numbers."], "Examples": ["list_dot_product([1, 2, 3], [1, 2, 5])"], "Category": ["List Functions"], "index": 121}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["histogram(arg)"], "Feature": ["histogram(arg)"], "Description": ["Returns a MAP of key-value pairs representing buckets and counts."], "Examples": ["histogram(A)"], "Category": ["Aggregate Functions"], "index": 122}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list_negative_inner_product"], "Feature": ["list_negative_inner_product"], "Description": ["list_negative_dot_product(list1, list2)", "Computes the negative dot product of two same-sized lists of numbers. Equivalent to - list_dot_product.", "Computes the negative dot product of two same-sized lists of numbers. Equivalent to - list_dot_product"], "Examples": ["list_negative_dot_product([1, 2, 3], [1, 2, 5])"], "Category": ["List Functions"], "index": 123}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_extract"], "Feature": ["array_extract"], "Description": ["list_element", "list_extract(list, index)", "Extract the indexth (1-based) value from the list."], "Examples": ["list_extract([4, 5, 6], 3)"], "Category": ["List Functions"], "index": 124}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["filter"], "Feature": ["filter"], "Description": ["array_filter", "list_filter(list, lambda)", "Constructs a list from those elements of the input list for which the lambda function returns true. See the Lambda Functions page for more details."], "Examples": ["list_filter([4, 5, 6], x -> x > 4)"], "Category": ["List Functions"], "index": 125}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_grade_up"], "Feature": ["array_grade_up"], "Description": ["list_grade_up(list)", "Works like sort, but the results are the indexes that correspond to the position in the original list instead of the actual values."], "Examples": ["list_grade_up([30, 10, 40, 20])"], "Category": ["List Functions"], "index": 126}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_has_all"], "Feature": ["array_has_all"], "Description": ["list_has_all(list, sub-list)", "Returns true if all elements of sub-list exist in list."], "Examples": ["list_has_all([4, 5, 6], [4, 6])"], "Category": ["List Functions"], "index": 127}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_has_any"], "Feature": ["array_has_any"], "Description": ["list_has_any(list1, list2)", "Returns true if any elements exist is both lists."], "Examples": ["list_has_any([1, 2, 3], [2, 3, 4])"], "Category": ["List Functions"], "index": 128}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_intersect"], "Feature": ["array_intersect"], "Description": ["list_intersect(list1, list2)", "Returns a list of all the elements that exist in both l1 and l2, without duplicates."], "Examples": ["list_intersect([1, 2, 3], [2, 3, 4])"], "Category": ["List Functions"], "index": 129}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_indexof"], "Feature": ["array_indexof"], "Description": ["array_position", "list_indexof", "list_position(list, element)", "Returns the index of the element if the list contains the element. If the element is not found, it returns NULL."], "Examples": ["list_position([1, 2, NULL], 2)"], "Category": ["List Functions"], "index": 130}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_push_front"], "Feature": ["array_push_front"], "Description": ["array_prepend", "list_prepend(element, list)", "Prepends element to list."], "Examples": ["list_prepend(3, [4, 5, 6])"], "Category": ["List Functions"], "index": 131}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["reduce"], "Feature": ["reduce"], "Description": ["array_reduce", "list_reduce(list, lambda)", "Returns a single value that is the result of applying the lambda function to each element of the input list. See the Lambda Functions page for more details."], "Examples": ["list_reduce([4, 5, 6], (x, y) -> x + y)"], "Category": ["List Functions"], "index": 132}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["last(arg)"], "Feature": ["last(arg)"], "Description": ["Returns the last value of a column. This function is affected by ordering."], "Examples": ["last(A)"], "Category": ["Aggregate Functions"], "index": 133}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_resize"], "Feature": ["array_resize"], "Description": ["list_resize(list, size[, value])", "Resizes the list to contain size elements. Initializes new elements with value or NULL if value is not set."], "Examples": ["list_resize([1, 2, 3], 5, 0)"], "Category": ["List Functions"], "index": 134}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_reverse_sort"], "Feature": ["array_reverse_sort"], "Description": ["list_reverse_sort(list)", "Sorts the elements of the list in reverse order. See the Sorting Lists section for more details about the NULL sorting order."], "Examples": ["list_reverse_sort([3, 6, 1, 2])"], "Category": ["List Functions"], "index": 135}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_reverse"], "Feature": ["array_reverse"], "Description": ["list_reverse(list)", "Reverses the list."], "Examples": ["list_reverse([3, 6, 1, 2])"], "Category": ["List Functions"], "index": 136}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_select"], "Feature": ["array_select"], "Description": ["list_select(value_list, index_list)", "Returns a list based on the elements selected by the index_list."], "Examples": ["list_select([10, 20, 30, 40], [1, 4])"], "Category": ["List Functions"], "index": 137}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_slice"], "Feature": ["array_slice"], "Description": ["list_slice(list, begin, end, step)", "list_slice with added step feature."], "Examples": ["list_slice([4, 5, 6], 1, 3, 2)"], "Category": ["List Functions"], "index": 138}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list_slice(list, begin, end)"], "Feature": ["list_slice(list, begin, end)"], "Description": ["Extract a sublist using slice conventions. Negative values are accepted. See slicing."], "Examples": ["list_slice([4, 5, 6], 2, 3)"], "Category": ["List Functions"], "index": 139}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_sort"], "Feature": ["array_sort"], "Description": ["list_sort(list)", "Sorts the elements of the list. See the Sorting Lists section for more details about the sorting order and the NULL sorting order."], "Examples": ["list_sort([3, 6, 1, 2])"], "Category": ["List Functions"], "index": 140}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_apply"], "Feature": ["array_apply"], "Description": ["list_apply", "apply", "array_transform", "list_transform(list, lambda)", "Returns a list that is the result of applying the lambda function to each element of the input list. See the Lambda Functions page for more details."], "Examples": ["list_transform([4, 5, 6], x -> x + 1)"], "Category": ["List Functions"], "index": 141}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_unique"], "Feature": ["array_unique"], "Description": ["list_unique(list)", "Counts the unique elements of a list."], "Examples": ["list_unique([1, 1, NULL, -3, 1, 5])"], "Category": ["List Functions"], "index": 142}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list_pack"], "Feature": ["list_pack"], "Description": ["list_value(any, ...)", "Create a LIST containing the argument values."], "Examples": ["list_value(4, 5, 6)"], "Category": ["List Functions"], "index": 143}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["array_agg"], "Feature": ["array_agg"], "Description": ["list(arg)", "Returns a LIST containing all the values of a column. This function is affected by ordering."], "Examples": ["list(A)"], "Category": ["Aggregate Functions"], "index": 144}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_where"], "Feature": ["array_where"], "Description": ["list_where(value_list, mask_list)", "Returns a list with the BOOLEANs in mask_list applied as a mask to the value_list."], "Examples": ["list_where([10, 20, 30, 40], [true, false, false, true])"], "Category": ["List Functions"], "index": 145}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list_zip(list_1, list_2, ...[, truncate])"], "Feature": ["list_zip(list_1, list_2, ...[, truncate])"], "Description": ["Zips k LISTs to a new LIST whose length will be that of the longest list. Its elements are structs of k elements from each list list_1, \u2026, list_k, missing elements are replaced with NULL. If truncate is set, all lists are truncated to the smallest list length."], "Examples": [], "Category": ["List Functions"], "index": 146}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["unnest(list)"], "Feature": ["unnest(list)"], "Description": ["Unnests a list by one level. Note that this is a special function that alters the cardinality of the result. See the unnest page for more details."], "Examples": ["unnest([1, 2, 3])"], "Category": ["List Functions"], "index": 147}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list_extract"], "Feature": ["list_extract"], "Description": ["list[index]", "Bracket notation serves as an alias for list_extract."], "Examples": ["[4, 5, 6][3]"], "Category": ["List Functions"], "index": 148}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list_slice"], "Feature": ["list_slice"], "Description": ["list[begin:end]", "Bracket notation with colon is an alias for list_slice."], "Examples": ["[4, 5, 6][2:3]"], "Category": ["List Functions"], "index": 149}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_length"], "Feature": ["array_length"], "Description": ["len(list)", "Return the length of the list."], "Examples": ["len([1, 2, 3])"], "Category": ["List Functions"], "index": 150}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_aggr"], "Feature": ["array_aggr"], "Description": ["array_aggregate", "aggregate", "list_aggr", "list_aggregate(list, name)", "Executes the aggregate function name on the elements of list. See the List Aggregates section for more details."], "Examples": ["list_aggregate([1, 2, NULL], 'min')"], "Category": ["List Functions"], "index": 151}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_aggr"], "Feature": ["array_aggr"], "Description": ["array_aggregate", "aggregate", "list_aggr", "list_aggregate(list, name)", "Executes the aggregate function name on the elements of list. See the List Aggregates section for more details."], "Examples": ["list_aggregate([1, 2, NULL], 'min')"], "Category": ["List Functions"], "index": 152}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_aggr"], "Feature": ["array_aggr"], "Description": ["array_aggregate", "aggregate", "list_aggr", "list_aggregate(list, name)", "Executes the aggregate function name on the elements of list. See the List Aggregates section for more details."], "Examples": ["list_aggregate([1, 2, NULL], 'min')"], "Category": ["List Functions"], "index": 153}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_aggr"], "Feature": ["array_aggr"], "Description": ["array_aggregate", "aggregate", "list_aggr", "list_aggregate(list, name)", "Executes the aggregate function name on the elements of list. See the List Aggregates section for more details."], "Examples": ["list_aggregate([1, 2, NULL], 'min')"], "Category": ["List Functions"], "index": 154}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["max(arg)"], "Feature": ["max(arg)"], "Description": ["Returns the maximum value present in arg."], "Examples": ["max(A)"], "Category": ["Aggregate Functions"], "index": 155}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_push_back"], "Feature": ["array_push_back"], "Description": ["array_append", "list_append(list, element)", "Appends element to list."], "Examples": ["list_append([2, 3], 4)"], "Category": ["List Functions"], "index": 156}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_push_back"], "Feature": ["array_push_back"], "Description": ["array_append", "list_append(list, element)", "Appends element to list."], "Examples": ["list_append([2, 3], 4)"], "Category": ["List Functions"], "index": 157}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_cat"], "Feature": ["array_cat"], "Description": ["array_concat", "list_cat", "list_concat(list1, list2)", "Concatenates two lists."], "Examples": ["list_concat([2, 3], [4, 5, 6])"], "Category": ["List Functions"], "index": 158}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_cat"], "Feature": ["array_cat"], "Description": ["array_concat", "list_cat", "list_concat(list1, list2)", "Concatenates two lists."], "Examples": ["list_concat([2, 3], [4, 5, 6])"], "Category": ["List Functions"], "index": 159}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_cat"], "Feature": ["array_cat"], "Description": ["array_concat", "list_cat", "list_concat(list1, list2)", "Concatenates two lists."], "Examples": ["list_concat([2, 3], [4, 5, 6])"], "Category": ["List Functions"], "index": 160}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_has"], "Feature": ["array_has"], "Description": ["array_contains", "list_has", "list_contains(list, element)", "Returns true if the list contains the element."], "Examples": ["list_contains([1, 2, NULL], 1)"], "Category": ["List Functions"], "index": 161}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_has"], "Feature": ["array_has"], "Description": ["array_contains", "list_has", "list_contains(list, element)", "Returns true if the list contains the element."], "Examples": ["list_contains([1, 2, NULL], 1)"], "Category": ["List Functions"], "index": 162}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_has"], "Feature": ["array_has"], "Description": ["array_contains", "list_has", "list_contains(list, element)", "Returns true if the list contains the element."], "Examples": ["list_contains([1, 2, NULL], 1)"], "Category": ["List Functions"], "index": 163}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_distinct"], "Feature": ["array_distinct"], "Description": ["list_distinct(list)", "Removes all duplicates and NULL values from a list. Does not preserve the original order."], "Examples": ["list_distinct([1, 1, NULL, -3, 1, 5])"], "Category": ["List Functions"], "index": 164}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list_inner_product"], "Feature": ["list_inner_product"], "Description": ["list_dot_product(list1, list2)", "Computes the dot product of two same-sized lists of numbers."], "Examples": ["list_dot_product([1, 2, 3], [1, 2, 5])"], "Category": ["List Functions"], "index": 165}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["max(arg, n)"], "Feature": ["max(arg, n)"], "Description": ["Returns a LIST containing the arg values for the \"top\" n rows ordered by arg descending."], "Examples": ["max(A, 2)"], "Category": ["Aggregate Functions"], "index": 166}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list_negative_inner_product"], "Feature": ["list_negative_inner_product"], "Description": ["list_negative_dot_product(list1, list2)", "Computes the negative dot product of two same-sized lists of numbers. Equivalent to - list_dot_product.", "Computes the negative dot product of two same-sized lists of numbers. Equivalent to - list_dot_product"], "Examples": ["list_negative_dot_product([1, 2, 3], [1, 2, 5])"], "Category": ["List Functions"], "index": 167}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_extract"], "Feature": ["array_extract"], "Description": ["list_element", "list_extract(list, index)", "Extract the indexth (1-based) value from the list."], "Examples": ["list_extract([4, 5, 6], 3)"], "Category": ["List Functions"], "index": 168}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_extract"], "Feature": ["array_extract"], "Description": ["list_element", "list_extract(list, index)", "Extract the indexth (1-based) value from the list."], "Examples": ["list_extract([4, 5, 6], 3)"], "Category": ["List Functions"], "index": 169}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["filter"], "Feature": ["filter"], "Description": ["array_filter", "list_filter(list, lambda)", "Constructs a list from those elements of the input list for which the lambda function returns true. See the Lambda Functions page for more details."], "Examples": ["list_filter([4, 5, 6], x -> x > 4)"], "Category": ["List Functions"], "index": 170}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["filter"], "Feature": ["filter"], "Description": ["array_filter", "list_filter(list, lambda)", "Constructs a list from those elements of the input list for which the lambda function returns true. See the Lambda Functions page for more details."], "Examples": ["list_filter([4, 5, 6], x -> x > 4)"], "Category": ["List Functions"], "index": 171}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_grade_up"], "Feature": ["array_grade_up"], "Description": ["list_grade_up(list)", "Works like sort, but the results are the indexes that correspond to the position in the original list instead of the actual values."], "Examples": ["list_grade_up([30, 10, 40, 20])"], "Category": ["List Functions"], "index": 172}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_has_all"], "Feature": ["array_has_all"], "Description": ["list_has_all(list, sub-list)", "Returns true if all elements of sub-list exist in list."], "Examples": ["list_has_all([4, 5, 6], [4, 6])"], "Category": ["List Functions"], "index": 173}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_has_any"], "Feature": ["array_has_any"], "Description": ["list_has_any(list1, list2)", "Returns true if any elements exist is both lists."], "Examples": ["list_has_any([1, 2, 3], [2, 3, 4])"], "Category": ["List Functions"], "index": 174}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_intersect"], "Feature": ["array_intersect"], "Description": ["list_intersect(list1, list2)", "Returns a list of all the elements that exist in both l1 and l2, without duplicates."], "Examples": ["list_intersect([1, 2, 3], [2, 3, 4])"], "Category": ["List Functions"], "index": 175}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_indexof"], "Feature": ["array_indexof"], "Description": ["array_position", "list_indexof", "list_position(list, element)", "Returns the index of the element if the list contains the element. If the element is not found, it returns NULL."], "Examples": ["list_position([1, 2, NULL], 2)"], "Category": ["List Functions"], "index": 176}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["max_by(arg, val)"], "Feature": ["max_by(arg, val)"], "Description": ["Finds the row with the maximum val. Calculates the arg expression at that row. This function is affected by ordering."], "Examples": ["max_by(A, B)"], "Category": ["Aggregate Functions"], "index": 177}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_indexof"], "Feature": ["array_indexof"], "Description": ["array_position", "list_indexof", "list_position(list, element)", "Returns the index of the element if the list contains the element. If the element is not found, it returns NULL."], "Examples": ["list_position([1, 2, NULL], 2)"], "Category": ["List Functions"], "index": 178}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_indexof"], "Feature": ["array_indexof"], "Description": ["array_position", "list_indexof", "list_position(list, element)", "Returns the index of the element if the list contains the element. If the element is not found, it returns NULL."], "Examples": ["list_position([1, 2, NULL], 2)"], "Category": ["List Functions"], "index": 179}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_push_front"], "Feature": ["array_push_front"], "Description": ["array_prepend", "list_prepend(element, list)", "Prepends element to list."], "Examples": ["list_prepend(3, [4, 5, 6])"], "Category": ["List Functions"], "index": 180}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_push_front"], "Feature": ["array_push_front"], "Description": ["array_prepend", "list_prepend(element, list)", "Prepends element to list."], "Examples": ["list_prepend(3, [4, 5, 6])"], "Category": ["List Functions"], "index": 181}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["reduce"], "Feature": ["reduce"], "Description": ["array_reduce", "list_reduce(list, lambda)", "Returns a single value that is the result of applying the lambda function to each element of the input list. See the Lambda Functions page for more details."], "Examples": ["list_reduce([4, 5, 6], (x, y) -> x + y)"], "Category": ["List Functions"], "index": 182}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["reduce"], "Feature": ["reduce"], "Description": ["array_reduce", "list_reduce(list, lambda)", "Returns a single value that is the result of applying the lambda function to each element of the input list. See the Lambda Functions page for more details."], "Examples": ["list_reduce([4, 5, 6], (x, y) -> x + y)"], "Category": ["List Functions"], "index": 183}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_resize"], "Feature": ["array_resize"], "Description": ["list_resize(list, size[, value])", "Resizes the list to contain size elements. Initializes new elements with value or NULL if value is not set."], "Examples": ["list_resize([1, 2, 3], 5, 0)"], "Category": ["List Functions"], "index": 184}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_reverse_sort"], "Feature": ["array_reverse_sort"], "Description": ["list_reverse_sort(list)", "Sorts the elements of the list in reverse order. See the Sorting Lists section for more details about the NULL sorting order."], "Examples": ["list_reverse_sort([3, 6, 1, 2])"], "Category": ["List Functions"], "index": 185}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_reverse"], "Feature": ["array_reverse"], "Description": ["list_reverse(list)", "Reverses the list."], "Examples": ["list_reverse([3, 6, 1, 2])"], "Category": ["List Functions"], "index": 186}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_select"], "Feature": ["array_select"], "Description": ["list_select(value_list, index_list)", "Returns a list based on the elements selected by the index_list."], "Examples": ["list_select([10, 20, 30, 40], [1, 4])"], "Category": ["List Functions"], "index": 187}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["max_by(arg, val, n)"], "Feature": ["max_by(arg, val, n)"], "Description": ["Returns a LIST containing the arg expressions for the \"top\" n rows ordered by val descending."], "Examples": ["max_by_n(A, B, 2)"], "Category": ["Aggregate Functions"], "index": 188}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_slice"], "Feature": ["array_slice"], "Description": ["list_slice(list, begin, end, step)", "list_slice with added step feature."], "Examples": ["list_slice([4, 5, 6], 1, 3, 2)"], "Category": ["List Functions"], "index": 189}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_sort"], "Feature": ["array_sort"], "Description": ["list_sort(list)", "Sorts the elements of the list. See the Sorting Lists section for more details about the sorting order and the NULL sorting order."], "Examples": ["list_sort([3, 6, 1, 2])"], "Category": ["List Functions"], "index": 190}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_apply"], "Feature": ["array_apply"], "Description": ["list_apply", "apply", "array_transform", "list_transform(list, lambda)", "Returns a list that is the result of applying the lambda function to each element of the input list. See the Lambda Functions page for more details."], "Examples": ["list_transform([4, 5, 6], x -> x + 1)"], "Category": ["List Functions"], "index": 191}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_apply"], "Feature": ["array_apply"], "Description": ["list_apply", "apply", "array_transform", "list_transform(list, lambda)", "Returns a list that is the result of applying the lambda function to each element of the input list. See the Lambda Functions page for more details."], "Examples": ["list_transform([4, 5, 6], x -> x + 1)"], "Category": ["List Functions"], "index": 192}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_apply"], "Feature": ["array_apply"], "Description": ["list_apply", "apply", "array_transform", "list_transform(list, lambda)", "Returns a list that is the result of applying the lambda function to each element of the input list. See the Lambda Functions page for more details."], "Examples": ["list_transform([4, 5, 6], x -> x + 1)"], "Category": ["List Functions"], "index": 193}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_apply"], "Feature": ["array_apply"], "Description": ["list_apply", "apply", "array_transform", "list_transform(list, lambda)", "Returns a list that is the result of applying the lambda function to each element of the input list. See the Lambda Functions page for more details."], "Examples": ["list_transform([4, 5, 6], x -> x + 1)"], "Category": ["List Functions"], "index": 194}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_unique"], "Feature": ["array_unique"], "Description": ["list_unique(list)", "Counts the unique elements of a list."], "Examples": ["list_unique([1, 1, NULL, -3, 1, 5])"], "Category": ["List Functions"], "index": 195}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list_pack"], "Feature": ["list_pack"], "Description": ["list_value(any, ...)", "Create a LIST containing the argument values."], "Examples": ["list_value(4, 5, 6)"], "Category": ["List Functions"], "index": 196}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_where"], "Feature": ["array_where"], "Description": ["list_where(value_list, mask_list)", "Returns a list with the BOOLEANs in mask_list applied as a mask to the value_list."], "Examples": ["list_where([10, 20, 30, 40], [true, false, false, true])"], "Category": ["List Functions"], "index": 197}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_zip"], "Feature": ["array_zip"], "Description": ["list_zip(list1, list2, ...)", "Zips k LISTs to a new LIST whose length will be that of the longest list. Its elements are structs of k elements from each list list_1, \u2026, list_k, missing elements are replaced with NULL. If truncate is set, all lists are truncated to the smallest list length."], "Examples": ["list_zip([1, 2], [3, 4], [5, 6])"], "Category": ["List Functions"], "index": 198}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["min(arg)"], "Feature": ["min(arg)"], "Description": ["Returns the minimum value present in arg."], "Examples": ["min(A)"], "Category": ["Aggregate Functions"], "index": 199}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_zip"], "Feature": ["array_zip"], "Description": ["list_zip(list1, list2, ...)", "Zips k LISTs to a new LIST whose length will be that of the longest list. Its elements are structs of k elements from each list list_1, \u2026, list_k, missing elements are replaced with NULL. If truncate is set, all lists are truncated to the smallest list length."], "Examples": ["list_zip([1, 2], [3, 4], [5, 6])"], "Category": ["List Functions"], "index": 200}
{"HTML": ["https://duckdb.org/docs/sql/functions/map"], "Title": ["cardinality(map)"], "Feature": ["cardinality(map)"], "Description": ["Return the size of the map (or the number of entries in the map)."], "Examples": ["cardinality(map([4, 2], ['a', 'b']))"], "Category": ["Map Functions"], "index": 201}
{"HTML": ["https://duckdb.org/docs/sql/functions/map"], "Title": ["element_at(map, key)"], "Feature": ["element_at(map, key)"], "Description": ["Return a list containing the value for a given key or an empty list if the key is not contained in the map. The type of the key provided in the second parameter must match the type of the map's keys else an error is returned."], "Examples": ["element_at(map([100, 5], [42, 43]), 100)"], "Category": ["Map Functions"], "index": 202}
{"HTML": ["https://duckdb.org/docs/sql/functions/map"], "Title": ["map_contains(map, key)"], "Feature": ["map_contains(map, key)"], "Description": ["Checks if a map contains a given key."], "Examples": ["map_contains(MAP {'key1': 10, 'key2': 20, 'key3': 30}, 'key2')"], "Category": ["Map Functions"], "index": 203}
{"HTML": ["https://duckdb.org/docs/sql/functions/map"], "Title": ["map_contains_entry(map, key, value)"], "Feature": ["map_contains_entry(map, key, value)"], "Description": ["Check if a map contains a given key-value pair."], "Examples": ["map_contains_entry(MAP {'key1': 10, 'key2': 20, 'key3': 30}, 'key2', 20)"], "Category": ["Map Functions"], "index": 204}
{"HTML": ["https://duckdb.org/docs/sql/functions/map"], "Title": ["map_contains_value(map, value)"], "Feature": ["map_contains_value(map, value)"], "Description": ["Checks if a map contains a given value."], "Examples": ["map_contains_value(MAP {'key1': 10, 'key2': 20, 'key3': 30}, 20)"], "Category": ["Map Functions"], "index": 205}
{"HTML": ["https://duckdb.org/docs/sql/functions/map"], "Title": ["map_entries(map)"], "Feature": ["map_entries(map)"], "Description": ["Return a list of struct(k, v) for each key-value pair in the map."], "Examples": ["map_entries(map([100, 5], [42, 43]))"], "Category": ["Map Functions"], "index": 206}
{"HTML": ["https://duckdb.org/docs/sql/functions/map"], "Title": ["map_extract(map, key)"], "Feature": ["map_extract(map, key)"], "Description": ["Alias of element_at. Return a list containing the value for a given key or an empty list if the key is not contained in the map. The type of the key provided in the second parameter must match the type of the map's keys else an error is returned."], "Examples": ["map_extract(map([100, 5], [42, 43]), 100)"], "Category": ["Map Functions"], "index": 207}
{"HTML": ["https://duckdb.org/docs/sql/functions/map"], "Title": ["map_from_entries(STRUCT(k, v)[])"], "Feature": ["map_from_entries(STRUCT(k, v)[])"], "Description": ["Returns a map created from the entries of the array."], "Examples": ["map_from_entries([{k: 5, v: 'val1'}, {k: 3, v: 'val2'}])"], "Category": ["Map Functions"], "index": 208}
{"HTML": ["https://duckdb.org/docs/sql/functions/map"], "Title": ["map_keys(map)"], "Feature": ["map_keys(map)"], "Description": ["Return a list of all keys in the map."], "Examples": ["map_keys(map([100, 5], [42,43]))"], "Category": ["Map Functions"], "index": 209}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["min(arg, n)"], "Feature": ["min(arg, n)"], "Description": ["Returns a LIST containing the arg values for the \"bottom\" n rows ordered by arg ascending."], "Examples": ["min(A, 2)"], "Category": ["Aggregate Functions"], "index": 210}
{"HTML": ["https://duckdb.org/docs/sql/functions/map"], "Title": ["map_values(map)"], "Feature": ["map_values(map)"], "Description": ["Return a list of all values in the map."], "Examples": ["map_values(map([100, 5], [42, 43]))"], "Category": ["Map Functions"], "index": 211}
{"HTML": ["https://duckdb.org/docs/sql/functions/map"], "Title": ["map()"], "Feature": ["map()"], "Description": ["Returns an empty map."], "Examples": ["map()"], "Category": ["Map Functions"], "index": 212}
{"HTML": ["https://duckdb.org/docs/sql/functions/map"], "Title": ["map[entry]"], "Feature": ["map[entry]"], "Description": ["Alias for element_at."], "Examples": ["map([100, 5], ['a', 'b'])[100]"], "Category": ["Map Functions"], "index": 213}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["abs"], "Feature": ["abs"], "Description": ["@(x)", "Absolute value. Parentheses are optional if x is a column name."], "Examples": ["@(-17.4)"], "Category": ["Numeric Functions"], "index": 214}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["@"], "Feature": ["@"], "Description": ["abs(x)", "Absolute value."], "Examples": ["abs(-17.4)"], "Category": ["Numeric Functions"], "index": 215}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["acos(x)"], "Feature": ["acos(x)"], "Description": ["Computes the arccosine of x."], "Examples": ["acos(0.5)"], "Category": ["Numeric Functions"], "index": 216}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["add(x, y)"], "Feature": ["add(x, y)"], "Description": ["Alias for x + y."], "Examples": ["add(2, 3)"], "Category": ["Numeric Functions"], "index": 217}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["asin(x)"], "Feature": ["asin(x)"], "Description": ["Computes the arcsine of x."], "Examples": ["asin(0.5)"], "Category": ["Numeric Functions"], "index": 218}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["atan(x)"], "Feature": ["atan(x)"], "Description": ["Computes the arctangent of x."], "Examples": ["atan(0.5)"], "Category": ["Numeric Functions"], "index": 219}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["atan2(y, x)"], "Feature": ["atan2(y, x)"], "Description": ["Computes the arctangent (y, x)."], "Examples": ["atan2(0.5, 0.5)"], "Category": ["Numeric Functions"], "index": 220}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["min_by(arg, val)"], "Feature": ["min_by(arg, val)"], "Description": ["Finds the row with the minimum val. Calculates the arg expression at that row. This function is affected by ordering."], "Examples": ["min_by(A, B)"], "Category": ["Aggregate Functions"], "index": 221}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["argMax(arg, val)"], "Feature": ["argMax(arg, val)"], "Description": ["arg_max(arg, val)", "Finds the row with the maximum val. Calculates the arg expression at that row. This function is affected by ordering."], "Examples": ["arg_max(A, B)"], "Category": ["Aggregate Functions"], "index": 222}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["bit_count(x)"], "Feature": ["bit_count(x)"], "Description": ["Returns the number of bits that are set."], "Examples": ["bit_count(31)"], "Category": ["Numeric Functions"], "index": 223}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["cbrt(x)"], "Feature": ["cbrt(x)"], "Description": ["Returns the cube root of the number."], "Examples": ["cbrt(8)"], "Category": ["Numeric Functions"], "index": 224}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["ceil(x)"], "Feature": ["ceil(x)"], "Description": ["Rounds the number up."], "Examples": ["ceil(17.4)"], "Category": ["Numeric Functions"], "index": 225}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["ceiling(x)"], "Feature": ["ceiling(x)"], "Description": ["Rounds the number up. Alias of ceil."], "Examples": ["ceiling(17.4)"], "Category": ["Numeric Functions"], "index": 226}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["cos(x)"], "Feature": ["cos(x)"], "Description": ["Computes the cosine of x."], "Examples": ["cos(90)"], "Category": ["Numeric Functions"], "index": 227}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["cot(x)"], "Feature": ["cot(x)"], "Description": ["Computes the cotangent of x."], "Examples": ["cot(0.5)"], "Category": ["Numeric Functions"], "index": 228}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["degrees(x)"], "Feature": ["degrees(x)"], "Description": ["Converts radians to degrees."], "Examples": ["degrees(pi())"], "Category": ["Numeric Functions"], "index": 229}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["divide(x, y)"], "Feature": ["divide(x, y)"], "Description": ["Alias for x // y."], "Examples": ["divide(5, 2)"], "Category": ["Numeric Functions"], "index": 230}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["even(x)"], "Feature": ["even(x)"], "Description": ["Round to next even number by rounding away from zero."], "Examples": ["even(2.9)"], "Category": ["Numeric Functions"], "index": 231}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["exp(x)"], "Feature": ["exp(x)"], "Description": ["Computes e ** x."], "Examples": ["exp(0.693)"], "Category": ["Numeric Functions"], "index": 232}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["min_by(arg, val, n)"], "Feature": ["min_by(arg, val, n)"], "Description": ["Returns a LIST containing the arg expressions for the \"bottom\" n rows ordered by val ascending."], "Examples": ["min_by(A, B, 2)"], "Category": ["Aggregate Functions"], "index": 233}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["factorial(x)"], "Feature": ["factorial(x)"], "Description": ["See ! operator. Computes the product of the current integer and all integers below it."], "Examples": ["factorial(4)"], "Category": ["Numeric Functions"], "index": 234}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["fdiv(x, y)"], "Feature": ["fdiv(x, y)"], "Description": ["Performs integer division (x // y) but returns a DOUBLE value."], "Examples": ["fdiv(5, 2)"], "Category": ["Numeric Functions"], "index": 235}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["floor(x)"], "Feature": ["floor(x)"], "Description": ["Rounds the number down."], "Examples": ["floor(17.4)"], "Category": ["Numeric Functions"], "index": 236}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["fmod(x, y)"], "Feature": ["fmod(x, y)"], "Description": ["Calculates the modulo value. Always returns a DOUBLE value."], "Examples": ["fmod(5, 2)"], "Category": ["Numeric Functions"], "index": 237}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["gamma(x)"], "Feature": ["gamma(x)"], "Description": ["Interpolation of the factorial of x - 1. Fractional inputs are allowed."], "Examples": ["gamma(5.5)"], "Category": ["Numeric Functions"], "index": 238}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["gcd(x, y)"], "Feature": ["gcd(x, y)"], "Description": ["Computes the greatest common divisor of x and y."], "Examples": ["gcd(42, 57)"], "Category": ["Numeric Functions"], "index": 239}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["greatest_common_divisor(x, y)"], "Feature": ["greatest_common_divisor(x, y)"], "Description": ["Computes the greatest common divisor of x and y."], "Examples": ["greatest_common_divisor(42, 57)"], "Category": ["Numeric Functions"], "index": 240}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["greatest(x1, x2, ...)"], "Feature": ["greatest(x1, x2, ...)"], "Description": ["Selects the largest value."], "Examples": ["greatest(3, 2, 4, 4)"], "Category": ["Numeric Functions"], "index": 241}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["isfinite(x)"], "Feature": ["isfinite(x)"], "Description": ["Returns true if the floating point value is finite, false otherwise."], "Examples": ["isfinite(5.5)"], "Category": ["Numeric Functions"], "index": 242}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["isinf(x)"], "Feature": ["isinf(x)"], "Description": ["Returns true if the floating point value is infinite, false otherwise."], "Examples": ["isinf('Infinity'::float)"], "Category": ["Numeric Functions"], "index": 243}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["product(arg)"], "Feature": ["product(arg)"], "Description": ["Calculates the product of all non-null values in arg."], "Examples": ["product(A)"], "Category": ["Aggregate Functions"], "index": 244}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["isnan(x)"], "Feature": ["isnan(x)"], "Description": ["Returns true if the floating point value is not a number, false otherwise."], "Examples": ["isnan('NaN'::float)"], "Category": ["Numeric Functions"], "index": 245}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["lcm(x, y)"], "Feature": ["lcm(x, y)"], "Description": ["Computes the least common multiple of x and y."], "Examples": ["lcm(42, 57)"], "Category": ["Numeric Functions"], "index": 246}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["least_common_multiple(x, y)"], "Feature": ["least_common_multiple(x, y)"], "Description": ["Computes the least common multiple of x and y."], "Examples": ["least_common_multiple(42, 57)"], "Category": ["Numeric Functions"], "index": 247}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["least(x1, x2, ...)"], "Feature": ["least(x1, x2, ...)"], "Description": ["Selects the smallest value."], "Examples": ["least(3, 2, 4, 4)"], "Category": ["Numeric Functions"], "index": 248}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["lgamma(x)"], "Feature": ["lgamma(x)"], "Description": ["Computes the log of the gamma function."], "Examples": ["lgamma(2)"], "Category": ["Numeric Functions"], "index": 249}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["ln(x)"], "Feature": ["ln(x)"], "Description": ["Computes the natural logarithm of x."], "Examples": ["ln(2)"], "Category": ["Numeric Functions"], "index": 250}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["log(x)"], "Feature": ["log(x)"], "Description": ["Computes the base-10 logarithm of x.", "Computes the base-10 log of x."], "Examples": ["log(100)"], "Category": ["Numeric Functions"], "index": 251}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["log10(x)"], "Feature": ["log10(x)"], "Description": ["Alias of log. Computes the base-10 logarithm of x.", "Alias of log. Computes the base-10 log of x."], "Examples": ["log10(1000)"], "Category": ["Numeric Functions"], "index": 252}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["log2(x)"], "Feature": ["log2(x)"], "Description": ["Computes the base-2 log of x."], "Examples": ["log2(8)"], "Category": ["Numeric Functions"], "index": 253}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["multiply(x, y)"], "Feature": ["multiply(x, y)"], "Description": ["Alias for x * y."], "Examples": ["multiply(2, 3)"], "Category": ["Numeric Functions"], "index": 254}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["listagg(arg, sep)"], "Feature": ["listagg(arg, sep)"], "Description": ["group_concat(arg, sep)", "string_agg(arg, sep)", "Concatenates the column string values with a separator. This function is affected by ordering."], "Examples": ["string_agg(S, ',')"], "Category": ["Aggregate Functions"], "index": 255}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["nextafter(x, y)"], "Feature": ["nextafter(x, y)"], "Description": ["Return the next floating point value after x in the direction of y."], "Examples": ["nextafter(1::float, 2::float)"], "Category": ["Numeric Functions"], "index": 256}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["pi()"], "Feature": ["pi()"], "Description": ["Returns the value of pi."], "Examples": ["pi()"], "Category": ["Numeric Functions"], "index": 257}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["pow(x, y)"], "Feature": ["pow(x, y)"], "Description": ["Computes x to the power of y."], "Examples": ["pow(2, 3)"], "Category": ["Numeric Functions"], "index": 258}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["power(x, y)"], "Feature": ["power(x, y)"], "Description": ["Alias of pow. computes x to the power of y."], "Examples": ["power(2, 3)"], "Category": ["Numeric Functions"], "index": 259}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["radians(x)"], "Feature": ["radians(x)"], "Description": ["Converts degrees to radians."], "Examples": ["radians(90)"], "Category": ["Numeric Functions"], "index": 260}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["random()"], "Feature": ["random()"], "Description": ["Returns a random number x in the range 0.0 <= x < 1.0."], "Examples": ["random()"], "Category": ["Numeric Functions"], "index": 261}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["round_even(v NUMERIC, s INTEGER)"], "Feature": ["round_even(v NUMERIC, s INTEGER)"], "Description": ["Alias of roundbankers(v, s). Round to s decimal places using the rounding half to even rule. Values s < 0 are allowed."], "Examples": ["round_even(24.5, 0)"], "Category": ["Numeric Functions"], "index": 262}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["round(v NUMERIC, s INTEGER)"], "Feature": ["round(v NUMERIC, s INTEGER)"], "Description": ["Round to s decimal places. Values s < 0 are allowed."], "Examples": ["round(42.4332, 2)"], "Category": ["Numeric Functions"], "index": 263}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["setseed(x)"], "Feature": ["setseed(x)"], "Description": ["Sets the seed to be used for the random function."], "Examples": ["setseed(0.42)"], "Category": ["Numeric Functions"], "index": 264}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["sign(x)"], "Feature": ["sign(x)"], "Description": ["Returns the sign of x as -1, 0 or 1."], "Examples": ["sign(-349)"], "Category": ["Numeric Functions"], "index": 265}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["sum(arg)"], "Feature": ["sum(arg)"], "Description": ["Calculates the sum of all non-null values in arg."], "Examples": ["sum(A)"], "Category": ["Aggregate Functions"], "index": 266}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["signbit(x)"], "Feature": ["signbit(x)"], "Description": ["Returns whether the signbit is set or not."], "Examples": ["signbit(-1.0)"], "Category": ["Numeric Functions"], "index": 267}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["sin(x)"], "Feature": ["sin(x)"], "Description": ["Computes the sin of x."], "Examples": ["sin(90)"], "Category": ["Numeric Functions"], "index": 268}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["sqrt(x)"], "Feature": ["sqrt(x)"], "Description": ["Returns the square root of the number."], "Examples": ["sqrt(9)"], "Category": ["Numeric Functions"], "index": 269}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["subtract(x, y)"], "Feature": ["subtract(x, y)"], "Description": ["Alias for x - y."], "Examples": ["subtract(2, 3)"], "Category": ["Numeric Functions"], "index": 270}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["tan(x)"], "Feature": ["tan(x)"], "Description": ["Computes the tangent of x."], "Examples": ["tan(90)"], "Category": ["Numeric Functions"], "index": 271}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["trunc(x)"], "Feature": ["trunc(x)"], "Description": ["Truncates the number."], "Examples": ["trunc(17.4)"], "Category": ["Numeric Functions"], "index": 272}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["xor(x, y)"], "Feature": ["xor(x, y)"], "Description": ["Bitwise XOR."], "Examples": ["xor(17, 5)"], "Category": ["Numeric Functions"], "index": 273}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["abs"], "Feature": ["abs"], "Description": ["@(x)", "Absolute value. Parentheses are optional if x is a column name."], "Examples": ["@(-17.4)"], "Category": ["Numeric Functions"], "index": 274}
{"HTML": ["https://duckdb.org/docs/sql/functions/numeric"], "Title": ["@"], "Feature": ["@"], "Description": ["abs(x)", "Absolute value."], "Examples": ["abs(-17.4)"], "Category": ["Numeric Functions"], "index": 275}
{"HTML": ["https://duckdb.org/docs/sql/functions/regular_expressions"], "Title": ["regexp_extract(string, pattern[, group = 0][, options])"], "Feature": ["regexp_extract(string, pattern[, group = 0][, options])"], "Description": ["If string contains the regexp pattern, returns the capturing group specified by optional parameter group. The group must be a constant value. If no group is given, it defaults to 0. A set of optional options can be set."], "Examples": ["regexp_extract('abc', '([a-z])(b)', 1)"], "Category": ["Regular Expressions"], "index": 276}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["approx_count_distinct(x)"], "Feature": ["approx_count_distinct(x)"], "Description": ["Gives the approximate count of distinct elements using HyperLogLog."], "Examples": ["approx_count_distinct(A)"], "Category": ["Aggregate Functions"], "index": 277}
{"HTML": ["https://duckdb.org/docs/sql/functions/regular_expressions"], "Title": ["regexp_extract(string, pattern, name_list[, options])"], "Feature": ["regexp_extract(string, pattern, name_list[, options])"], "Description": ["If string contains the regexp pattern, returns the capturing groups as a struct with corresponding names from name_list.", "If string contains the regexp pattern, returns the capturing groups as a struct with corresponding names from name_list. A set of optional options can be set."], "Examples": ["regexp_extract('2023-04-15', '(\\d+)-(\\d+)-(\\d+)', ['y', 'm', 'd'])"], "Category": ["Regular Expressions"], "index": 278}
{"HTML": ["https://duckdb.org/docs/sql/functions/regular_expressions"], "Title": ["regexp_extract_all(string, regex[, group = 0][, options])"], "Feature": ["regexp_extract_all(string, regex[, group = 0][, options])"], "Description": ["Split the string along the regex and extract all occurrences of group.", "Split the string along the regex and extract all occurrences of group. A set of optional options can be set."], "Examples": ["regexp_extract_all('hello_world', '([a-z ]+)_?', 1)"], "Category": ["Regular Expressions"], "index": 279}
{"HTML": ["https://duckdb.org/docs/sql/functions/regular_expressions"], "Title": ["regexp_full_match(string, regex[, options])"], "Feature": ["regexp_full_match(string, regex[, options])"], "Description": ["Returns true if the entire string matches the regex.", "Returns true if the entire string matches the regex. A set of optional options can be set."], "Examples": ["regexp_full_match('anabanana', '(an)*')"], "Category": ["Regular Expressions"], "index": 280}
{"HTML": ["https://duckdb.org/docs/sql/functions/regular_expressions"], "Title": ["regexp_matches(string, pattern[, options])"], "Feature": ["regexp_matches(string, pattern[, options])"], "Description": ["Returns true if  string contains the regexp pattern, false otherwise.", "Returns true if  string contains the regexp pattern, false otherwise. A set of optional options can be set."], "Examples": ["regexp_matches('anabanana', '(an)*')"], "Category": ["Regular Expressions"], "index": 281}
{"HTML": ["https://duckdb.org/docs/sql/functions/regular_expressions"], "Title": ["regexp_replace(string, pattern, replacement[, options])"], "Feature": ["regexp_replace(string, pattern, replacement[, options])"], "Description": ["If string contains the regexp pattern, replaces the matching part with replacement.", "If string contains the regexp pattern, replaces the matching part with replacement. A set of optional options can be set."], "Examples": ["regexp_replace('hello', '[lo]', '-')"], "Category": ["Regular Expressions"], "index": 282}
{"HTML": ["https://duckdb.org/docs/sql/functions/regular_expressions"], "Title": ["regexp_split_to_array(string, regex[, options])"], "Feature": ["regexp_split_to_array(string, regex[, options])"], "Description": ["Alias of string_split_regex. Splits the string along the regex.", "Alias of string_split_regex. Splits the string along the regex. A set of optional options can be set."], "Examples": ["regexp_split_to_array('hello world; 42', ';? ')"], "Category": ["Regular Expressions"], "index": 283}
{"HTML": ["https://duckdb.org/docs/sql/functions/regular_expressions"], "Title": ["regexp_split_to_table(string, regex[, options])"], "Feature": ["regexp_split_to_table(string, regex[, options])"], "Description": ["Splits the string along the regex and returns a row for each part.", "Splits the string along the regex and returns a row for each part. A set of optional options can be set."], "Examples": ["regexp_split_to_table('hello world; 42', ';? ')"], "Category": ["Regular Expressions"], "index": 284}
{"HTML": ["https://duckdb.org/docs/sql/functions/struct"], "Title": ["struct.entry"], "Feature": ["struct.entry"], "Description": ["Dot notation that serves as an alias for struct_extract from named STRUCTs."], "Examples": ["({'i': 3, 's': 'string'}).i"], "Category": ["Struct Functions"], "index": 285}
{"HTML": ["https://duckdb.org/docs/sql/functions/struct"], "Title": ["struct[entry]"], "Feature": ["struct[entry]"], "Description": ["Bracket notation that serves as an alias for struct_extract from named STRUCTs."], "Examples": ["({'i': 3, 's': 'string'})['i']"], "Category": ["Struct Functions"], "index": 286}
{"HTML": ["https://duckdb.org/docs/sql/functions/struct"], "Title": ["struct[idx]"], "Feature": ["struct[idx]"], "Description": ["Bracket notation that serves as an alias for struct_extract from unnamed STRUCTs (tuples), using an index (1-based)."], "Examples": ["(row(42, 84))[1]"], "Category": ["Struct Functions"], "index": 287}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["approx_quantile(x, pos)"], "Feature": ["approx_quantile(x, pos)"], "Description": ["Gives the approximate quantile using T-Digest."], "Examples": ["approx_quantile(A, 0.5)"], "Category": ["Aggregate Functions"], "index": 288}
{"HTML": ["https://duckdb.org/docs/sql/functions/struct"], "Title": ["row(any, ...)"], "Feature": ["row(any, ...)"], "Description": ["Create an unnamed STRUCT (tuple) containing the argument values."], "Examples": ["row(i, i % 4, i / 4)"], "Category": ["Struct Functions"], "index": 289}
{"HTML": ["https://duckdb.org/docs/sql/functions/struct"], "Title": ["struct_extract(struct, 'entry')"], "Feature": ["struct_extract(struct, 'entry')"], "Description": ["Extract the named entry from the STRUCT."], "Examples": ["struct_extract({'i': 3, 'v2': 3, 'v3': 0}, 'i')"], "Category": ["Struct Functions"], "index": 290}
{"HTML": ["https://duckdb.org/docs/sql/functions/struct"], "Title": ["struct_extract(struct, idx)"], "Feature": ["struct_extract(struct, idx)"], "Description": ["Extract the entry from an unnamed STRUCT (tuple) using an index (1-based)."], "Examples": ["struct_extract(row(42, 84), 1)"], "Category": ["Struct Functions"], "index": 291}
{"HTML": ["https://duckdb.org/docs/sql/functions/struct"], "Title": ["struct_insert(struct, name := any, ...)"], "Feature": ["struct_insert(struct, name := any, ...)"], "Description": ["Add field(s)/value(s) to an existing STRUCT with the argument values. The entry name(s) will be the bound variable name(s)."], "Examples": ["struct_insert({'a': 1}, b := 2)"], "Category": ["Struct Functions"], "index": 292}
{"HTML": ["https://duckdb.org/docs/sql/functions/struct"], "Title": ["struct_pack(name := any, ...)"], "Feature": ["struct_pack(name := any, ...)"], "Description": ["Create a STRUCT containing the argument values. The entry name will be the bound variable name."], "Examples": ["struct_pack(i := 4, s := 'string')"], "Category": ["Struct Functions"], "index": 293}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["starts_with"], "Feature": ["starts_with"], "Description": ["string ^@ search_string", "Return true if string begins with search_string."], "Examples": ["'abc' ^@ 'a'"], "Category": ["Text Functions"], "index": 294}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["concat"], "Feature": ["concat"], "Description": ["string || string", "String concatenation."], "Examples": ["'Duck' || 'DB'"], "Category": ["Text Functions"], "index": 295}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["array_extract"], "Feature": ["array_extract"], "Description": ["string[index]", "Extract a single character using a (1-based) index."], "Examples": ["'DuckDB'[4]"], "Category": ["Text Functions"], "index": 296}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["array_slice"], "Feature": ["array_slice"], "Description": ["string[begin:end]", "Extract a string using slice conventions, see slicing.", "Extract a string using slice conventions similar to Python. Missing begin or end arguments are interpreted as the beginning or end of the list respectively. Negative values are accepted."], "Examples": ["'DuckDB'[:4]"], "Category": ["Text Functions"], "index": 297}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["string LIKE target"], "Feature": ["string LIKE target"], "Description": ["Returns true if the string matches the like specifier (see Pattern Matching)."], "Examples": ["'hello' LIKE '%lo'"], "Category": ["Text Functions"], "index": 298}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["reservoir_quantile(x, quantile, sample_size = 8192)"], "Feature": ["reservoir_quantile(x, quantile, sample_size = 8192)"], "Description": ["Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size."], "Examples": ["reservoir_quantile(A, 0.5, 1024)"], "Category": ["Aggregate Functions"], "index": 299}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["string SIMILAR TO regex"], "Feature": ["string SIMILAR TO regex"], "Description": ["Returns true if the string matches the regex; identical to regexp_full_match (see Pattern Matching).", "Returns true if the string matches the regex; identical to regexp_full_match (see Pattern Matching)"], "Examples": ["'hello' SIMILAR TO 'l+'"], "Category": ["Text Functions"], "index": 300}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["list_extract"], "Feature": ["list_extract"], "Description": ["list_element", "array_extract(list, index)", "Extract a single character using a (1-based) index."], "Examples": ["array_extract('DuckDB', 2)"], "Category": ["Text Functions"], "index": 301}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["array_slice(list, begin, end)"], "Feature": ["array_slice(list, begin, end)"], "Description": ["Extract a string using slice conventions. Negative values are accepted.", "Extract a string using slice conventions (like in Python). Negative values are accepted.", "array_slice('DuckDB', 3, 4)", "array_slice('DuckDB', 3, NULL)", "array_slice('DuckDB', 0, -3)"], "Examples": [], "Category": ["Text Functions"], "index": 302}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["ascii(string)"], "Feature": ["ascii(string)"], "Description": ["Returns an integer that represents the Unicode code point of the first character of the string."], "Examples": ["ascii('\u03a9')"], "Category": ["Text Functions"], "index": 303}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["bar(x, min, max[, width])"], "Feature": ["bar(x, min, max[, width])"], "Description": ["Draw a band whose width is proportional to (x - min) and equal to width characters when x = max. width defaults to 80."], "Examples": ["bar(5, 0, 20, 10)"], "Category": ["Text Functions"], "index": 304}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["bit_length(string)"], "Feature": ["bit_length(string)"], "Description": ["Number of bits in a string."], "Examples": ["bit_length('abc')"], "Category": ["Text Functions"], "index": 305}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["chr(x)"], "Feature": ["chr(x)"], "Description": ["Returns a character which is corresponding the ASCII code value or Unicode code point."], "Examples": ["chr(65)"], "Category": ["Text Functions"], "index": 306}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["concat_ws(separator, string, ...)"], "Feature": ["concat_ws(separator, string, ...)"], "Description": ["Concatenate strings together separated by the specified separator."], "Examples": ["concat_ws(', ', 'Banana', 'Apple', 'Melon')"], "Category": ["Text Functions"], "index": 307}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["concat(string, ...)"], "Feature": ["concat(string, ...)"], "Description": ["Concatenate many strings together."], "Examples": ["concat('Hello', ' ', 'World')"], "Category": ["Text Functions"], "index": 308}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["contains(string, search_string)"], "Feature": ["contains(string, search_string)"], "Description": ["Return true if search_string is found within string."], "Examples": ["contains('abc', 'a')"], "Category": ["Text Functions"], "index": 309}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["corr(y, x)"], "Feature": ["corr(y, x)"], "Description": ["The correlation coefficient.", "covar_pop(y, x) / (stddev_pop(x) * stddev_pop(y))"], "Examples": [], "Category": ["Aggregate Functions"], "index": 310}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["suffix"], "Feature": ["suffix"], "Description": ["ends_with(string, search_string)", "Return true if string ends with search_string."], "Examples": ["ends_with('abc', 'c')"], "Category": ["Text Functions"], "index": 311}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["format_bytes(bytes)"], "Feature": ["format_bytes(bytes)"], "Description": ["Converts bytes to a human-readable representation using units based on powers of 2 (KiB, MiB, GiB, etc.)."], "Examples": ["format_bytes(16384)"], "Category": ["Text Functions"], "index": 312}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["format(format, parameters, ...)"], "Feature": ["format(format, parameters, ...)"], "Description": ["Formats a string using the fmt syntax."], "Examples": ["format('Benchmark \"{}\" took {} seconds', 'CSV', 42)"], "Category": ["Text Functions"], "index": 313}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["from_base64(string)"], "Feature": ["from_base64(string)"], "Description": ["Convert a base64 encoded string to a character string."], "Examples": ["from_base64('QQ==')"], "Category": ["Text Functions"], "index": 314}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["greatest(x1, x2, ...)"], "Feature": ["greatest(x1, x2, ...)"], "Description": ["Selects the largest value using lexicographical ordering. Note that lowercase characters are considered \u201clarger\u201d than uppercase characters and collations are not supported."], "Examples": ["greatest('abc', 'bcd', 'cde', 'EFG')"], "Category": ["Text Functions"], "index": 315}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["hash(value)"], "Feature": ["hash(value)"], "Description": ["Returns a UBIGINT with the hash of the value."], "Examples": ["hash('\ud83e\udd86')"], "Category": ["Text Functions"], "index": 316}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["ilike_escape(string, like_specifier, escape_character)"], "Feature": ["ilike_escape(string, like_specifier, escape_character)"], "Description": ["Returns true if the string matches the like_specifier (see Pattern Matching) using case-insensitive matching. escape_character is used to search for wildcard characters in the string."], "Examples": ["ilike_escape('A%c', 'a$%C', '$')"], "Category": ["Text Functions"], "index": 317}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["instr(string, search_string)"], "Feature": ["instr(string, search_string)"], "Description": ["Return location of first occurrence of search_string in string, counting from 1. Returns 0 if no match found."], "Examples": ["instr('test test', 'es')"], "Category": ["Text Functions"], "index": 318}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["least(x1, x2, ...)"], "Feature": ["least(x1, x2, ...)"], "Description": ["Selects the smallest value using lexicographical ordering. Note that uppercase characters are considered \u201csmaller\u201d than lowercase characters, and collations are not supported."], "Examples": ["least('abc', 'BCD', 'cde', 'EFG')"], "Category": ["Text Functions"], "index": 319}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["left_grapheme(string, count)"], "Feature": ["left_grapheme(string, count)"], "Description": ["Extract the left-most grapheme clusters."], "Examples": ["left_grapheme('\ud83e\udd26\ud83c\udffc\u200d\u2642\ufe0f\ud83e\udd26\ud83c\udffd\u200d\u2640\ufe0f', 1)"], "Category": ["Text Functions"], "index": 320}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["covar_pop(y, x)"], "Feature": ["covar_pop(y, x)"], "Description": ["The population covariance, which does not include bias correction.", "(sum(x*y) - sum(x) * sum(y) / regr_count(y, x)) / regr_count(y, x), covar_samp(y, x) * (1 - 1 / regr_count(y, x))"], "Examples": [], "Category": ["Aggregate Functions"], "index": 321}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["left(string, count)"], "Feature": ["left(string, count)"], "Description": ["Extract the left-most count characters."], "Examples": ["left('Hello\ud83e\udd86', 2)"], "Category": ["Text Functions"], "index": 322}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["length_grapheme(string)"], "Feature": ["length_grapheme(string)"], "Description": ["Number of grapheme clusters in string."], "Examples": ["length_grapheme('\ud83e\udd26\ud83c\udffc\u200d\u2642\ufe0f\ud83e\udd26\ud83c\udffd\u200d\u2640\ufe0f')"], "Category": ["Text Functions"], "index": 323}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["length(string)"], "Feature": ["length(string)"], "Description": ["Number of characters in string."], "Examples": ["length('Hello\ud83e\udd86')"], "Category": ["Text Functions"], "index": 324}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["like_escape(string, like_specifier, escape_character)"], "Feature": ["like_escape(string, like_specifier, escape_character)"], "Description": ["Returns true if the string matches the like_specifier (see Pattern Matching) using case-sensitive matching. escape_character is used to search for wildcard characters in the string."], "Examples": ["like_escape('a%c', 'a$%c', '$')"], "Category": ["Text Functions"], "index": 325}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["lcase"], "Feature": ["lcase"], "Description": ["lower(string)", "Convert string to lower case."], "Examples": ["lower('Hello')"], "Category": ["Text Functions"], "index": 326}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["lpad(string, count, character)"], "Feature": ["lpad(string, count, character)"], "Description": ["Pads the string  with the character from the left until it has count characters."], "Examples": ["lpad('hello', 8, '>')"], "Category": ["Text Functions"], "index": 327}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["ltrim(string, characters)"], "Feature": ["ltrim(string, characters)"], "Description": ["Removes any occurrences of any of the characters from the left side of the string."], "Examples": ["ltrim('>>>>test<<', '><')"], "Category": ["Text Functions"], "index": 328}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["ltrim(string)"], "Feature": ["ltrim(string)"], "Description": ["Removes any spaces from the left side of the string.", "Removes any spaces from the left side of the string. In the example, the \u2423 symbol denotes a space character."], "Examples": ["ltrim('\u2423\u2423\u2423\u2423test\u2423\u2423')"], "Category": ["Text Functions"], "index": 329}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["md5(string)"], "Feature": ["md5(string)"], "Description": ["Returns the MD5 hash of the string as a VARCHAR."], "Examples": ["md5('123')"], "Category": ["Text Functions"], "index": 330}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["md5_number(string)"], "Feature": ["md5_number(string)"], "Description": ["Returns the MD5 hash of the string as a HUGEINT."], "Examples": ["md5_number('123')"], "Category": ["Text Functions"], "index": 331}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["covar_samp(y, x)"], "Feature": ["covar_samp(y, x)"], "Description": ["The sample covariance, which includes Bessel's bias correction.", "(sum(x*y) - sum(x) * sum(y) / regr_count(y, x)) / (regr_count(y, x) - 1), covar_pop(y, x) / (1 - 1 / regr_count(y, x))"], "Examples": [], "Category": ["Aggregate Functions"], "index": 332}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["argMax(arg, val, n)"], "Feature": ["argMax(arg, val, n)"], "Description": ["arg_max(arg, val, n)", "Returns a LIST containing the arg expressions for the \"top\" n rows ordered by val descending."], "Examples": ["arg_max(A, B, 2)"], "Category": ["Aggregate Functions"], "index": 333}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["md5_number_lower(string)"], "Feature": ["md5_number_lower(string)"], "Description": ["Returns the lower 64-bit segment of the MD5 hash of the string as a BIGINT.", "Returns the MD5 hash of the string as a BIGINT."], "Examples": ["md5_number_lower('123')"], "Category": ["Text Functions"], "index": 334}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["md5_number_higher(string)"], "Feature": ["md5_number_higher(string)"], "Description": ["Returns the higher 64-bit segment of the MD5 hash of the string as a BIGINT.", "Returns the MD5 hash of the string as a BIGINT."], "Examples": ["md5_number_higher('123')"], "Category": ["Text Functions"], "index": 335}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["nfc_normalize(string)"], "Feature": ["nfc_normalize(string)"], "Description": ["Convert string to Unicode NFC normalized string. Useful for comparisons and ordering if text data is mixed between NFC normalized and not."], "Examples": ["nfc_normalize('arde\u0300ch')"], "Category": ["Text Functions"], "index": 336}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["not_ilike_escape(string, like_specifier, escape_character)"], "Feature": ["not_ilike_escape(string, like_specifier, escape_character)"], "Description": ["Returns false if the string matches the like_specifier (see Pattern Matching) using case-sensitive matching. escape_character is used to search for wildcard characters in the string."], "Examples": ["not_ilike_escape('A%c', 'a$%C', '$')"], "Category": ["Text Functions"], "index": 337}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["not_like_escape(string, like_specifier, escape_character)"], "Feature": ["not_like_escape(string, like_specifier, escape_character)"], "Description": ["Returns false if the string matches the like_specifier (see Pattern Matching) using case-insensitive matching. escape_character is used to search for wildcard characters in the string."], "Examples": ["not_like_escape('a%c', 'a$%c', '$')"], "Category": ["Text Functions"], "index": 338}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["ord(string)"], "Feature": ["ord(string)"], "Description": ["Return ASCII character code of the leftmost character in a string."], "Examples": ["ord('\u00fc')"], "Category": ["Text Functions"], "index": 339}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["parse_dirname(path, separator)"], "Feature": ["parse_dirname(path, separator)"], "Description": ["Returns the top-level directory name from the given path. separator options: system, both_slash (default), forward_slash, backslash."], "Examples": ["parse_dirname('path/to/file.csv', 'system')"], "Category": ["Text Functions"], "index": 340}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["parse_dirpath(path, separator)"], "Feature": ["parse_dirpath(path, separator)"], "Description": ["Returns the head of the path (the pathname until the last slash) similarly to Python's os.path.dirname function. separator options: system, both_slash (default), forward_slash, backslash."], "Examples": ["parse_dirpath('/path/to/file.csv', 'forward_slash')"], "Category": ["Text Functions"], "index": 341}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["parse_filename(path, trim_extension, separator)"], "Feature": ["parse_filename(path, trim_extension, separator)"], "Description": ["Returns the last component of the path similarly to Python's os.path.basename function. If trim_extension is true, the file extension will be removed (defaults to false). separator options: system, both_slash (default), forward_slash, backslash."], "Examples": ["parse_filename('path/to/file.csv', true, 'system')"], "Category": ["Text Functions"], "index": 342}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["parse_path(path, separator)"], "Feature": ["parse_path(path, separator)"], "Description": ["Returns a list of the components (directories and filename) in the path similarly to Python's pathlib.parts function. separator options: system, both_slash (default), forward_slash, backslash."], "Examples": ["parse_path('/path/to/file.csv', 'system')"], "Category": ["Text Functions"], "index": 343}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["entropy(x)"], "Feature": ["entropy(x)"], "Description": ["The log-2 entropy.", "-"], "Examples": [], "Category": ["Aggregate Functions"], "index": 344}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["position(search_string IN string)"], "Feature": ["position(search_string IN string)"], "Description": ["Return location of first occurrence of search_string in string, counting from 1. Returns 0 if no match found."], "Examples": ["position('b' IN 'abc')"], "Category": ["Text Functions"], "index": 345}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["printf(format, parameters...)"], "Feature": ["printf(format, parameters...)"], "Description": ["Formats a string using printf syntax."], "Examples": ["printf('Benchmark \"%s\" took %d seconds', 'CSV', 42)"], "Category": ["Text Functions"], "index": 346}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["read_text(source)"], "Feature": ["read_text(source)"], "Description": ["Returns the content from source (a filename, a list of filenames, or a glob pattern) as a VARCHAR. The file content is first validated to be valid UTF-8. If read_text attempts to read a file with invalid UTF-8 an error is thrown suggesting to use read_blob instead. See the read_text guide for more details."], "Examples": ["read_text('hello.txt')"], "Category": ["Text Functions"], "index": 347}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["regexp_escape(string)"], "Feature": ["regexp_escape(string)"], "Description": ["Escapes special patterns to turn string into a regular expression similarly to Python's re.escape function."], "Examples": ["regexp_escape('http://d.org')"], "Category": ["Text Functions"], "index": 348}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["regexp_extract(string, pattern[, group = 0])"], "Feature": ["regexp_extract(string, pattern[, group = 0])"], "Description": ["If string contains the regexp pattern, returns the capturing group specified by optional parameter group (see Pattern Matching)."], "Examples": ["regexp_extract('hello_world', '([a-z ]+)_?', 1)"], "Category": ["Text Functions"], "index": 349}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["regexp_extract(string, pattern, name_list)"], "Feature": ["regexp_extract(string, pattern, name_list)"], "Description": ["If string contains the regexp pattern, returns the capturing groups as a struct with corresponding names from name_list (see Pattern Matching)."], "Examples": ["regexp_extract('2023-04-15', '(\\d+)-(\\d+)-(\\d+)', ['y', 'm', 'd'])"], "Category": ["Text Functions"], "index": 350}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["regexp_extract_all(string, regex[, group = 0])"], "Feature": ["regexp_extract_all(string, regex[, group = 0])"], "Description": ["Split the string along the regex and extract all occurrences of group."], "Examples": ["regexp_extract_all('hello_world', '([a-z ]+)_?', 1)"], "Category": ["Text Functions"], "index": 351}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["regexp_full_match(string, regex)"], "Feature": ["regexp_full_match(string, regex)"], "Description": ["Returns true if the entire string matches the regex (see Pattern Matching)."], "Examples": ["regexp_full_match('anabanana', '(an)')"], "Category": ["Text Functions"], "index": 352}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["regexp_matches(string, pattern)"], "Feature": ["regexp_matches(string, pattern)"], "Description": ["Returns true if  string contains the regexp pattern, false otherwise (see Pattern Matching)."], "Examples": ["regexp_matches('anabanana', '(an)')"], "Category": ["Text Functions"], "index": 353}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["regexp_replace(string, pattern, replacement)"], "Feature": ["regexp_replace(string, pattern, replacement)"], "Description": ["If string contains the regexp pattern, replaces the matching part with replacement (see Pattern Matching)."], "Examples": ["regexp_replace('hello', '[lo]', '-')"], "Category": ["Text Functions"], "index": 354}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["kurtosis_pop(x)"], "Feature": ["kurtosis_pop(x)"], "Description": ["The excess kurtosis (Fisher\u2019s definition) without bias correction.", "-"], "Examples": [], "Category": ["Aggregate Functions"], "index": 355}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["str_split_regex"], "Feature": ["str_split_regex"], "Description": ["string_split_regex", "regexp_split_to_array(string, regex)", "Splits the string along the regex."], "Examples": ["regexp_split_to_array('hello world; 42', ';? ')"], "Category": ["Text Functions"], "index": 356}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["regexp_split_to_table(string, regex)"], "Feature": ["regexp_split_to_table(string, regex)"], "Description": ["Splits the string along the regex and returns a row for each part."], "Examples": ["regexp_split_to_table('hello world; 42', ';? ')"], "Category": ["Text Functions"], "index": 357}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["repeat(string, count)"], "Feature": ["repeat(string, count)"], "Description": ["Repeats the string count number of times."], "Examples": ["repeat('A', 5)"], "Category": ["Text Functions"], "index": 358}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["replace(string, source, target)"], "Feature": ["replace(string, source, target)"], "Description": ["Replaces any occurrences of the source with target in string."], "Examples": ["replace('hello', 'l', '-')"], "Category": ["Text Functions"], "index": 359}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["reverse(string)"], "Feature": ["reverse(string)"], "Description": ["Reverses the string."], "Examples": ["reverse('hello')"], "Category": ["Text Functions"], "index": 360}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["right_grapheme(string, count)"], "Feature": ["right_grapheme(string, count)"], "Description": ["Extract the right-most count grapheme clusters."], "Examples": ["right_grapheme('\ud83e\udd26\ud83c\udffc\u200d\u2642\ufe0f\ud83e\udd26\ud83c\udffd\u200d\u2640\ufe0f', 1)"], "Category": ["Text Functions"], "index": 361}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["right(string, count)"], "Feature": ["right(string, count)"], "Description": ["Extract the right-most count characters."], "Examples": ["right('Hello\ud83e\udd86', 3)"], "Category": ["Text Functions"], "index": 362}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["rpad(string, count, character)"], "Feature": ["rpad(string, count, character)"], "Description": ["Pads the string with the character from the right until it has count characters."], "Examples": ["rpad('hello', 10, '<')"], "Category": ["Text Functions"], "index": 363}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["rtrim(string, characters)"], "Feature": ["rtrim(string, characters)"], "Description": ["Removes any occurrences of any of the characters from the right side of the string."], "Examples": ["rtrim('>>>>test<<', '><')"], "Category": ["Text Functions"], "index": 364}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["rtrim(string)"], "Feature": ["rtrim(string)"], "Description": ["Removes any spaces from the right side of the string.", "Removes any spaces from the right side of the string. In the example, the \u2423 symbol denotes a space character."], "Examples": ["rtrim('\u2423\u2423\u2423\u2423test\u2423\u2423')"], "Category": ["Text Functions"], "index": 365}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["kurtosis(x)"], "Feature": ["kurtosis(x)"], "Description": ["The excess kurtosis (Fisher's definition) with bias correction according to the sample size.", "-"], "Examples": [], "Category": ["Aggregate Functions"], "index": 366}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["sha256(value)"], "Feature": ["sha256(value)"], "Description": ["Returns a VARCHAR with the SHA-256 hash of the value."], "Examples": ["sha256('\ud83e\udd86')"], "Category": ["Text Functions"], "index": 367}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["split_part(string, separator, index)"], "Feature": ["split_part(string, separator, index)"], "Description": ["Split the string along the separator and return the data at the (1-based) index of the list. If the index is outside the bounds of the list, return an empty string (to match PostgreSQL's behavior)."], "Examples": ["split_part('a;b;c', ';', 2)"], "Category": ["Text Functions"], "index": 368}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["starts_with(string, search_string)"], "Feature": ["starts_with(string, search_string)"], "Description": ["Return true if string begins with search_string."], "Examples": ["starts_with('abc', 'a')"], "Category": ["Text Functions"], "index": 369}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["regexp_split_to_array"], "Feature": ["regexp_split_to_array"], "Description": ["str_split_regex(string, regex)", "Splits the string along the regex."], "Examples": ["str_split_regex('hello world; 42', ';? ')"], "Category": ["Text Functions"], "index": 370}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["string_split_regex(string, regex)"], "Feature": ["string_split_regex(string, regex)"], "Description": ["Splits the string along the regex."], "Examples": ["string_split_regex('hello world; 42', ';? ')"], "Category": ["Text Functions"], "index": 371}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["string_to_array"], "Feature": ["string_to_array"], "Description": ["str_split", "string_split(string, separator)", "Splits the string along the separator."], "Examples": ["string_split('hello world', ' ')"], "Category": ["Text Functions"], "index": 372}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["strip_accents(string)"], "Feature": ["strip_accents(string)"], "Description": ["Strips accents from string."], "Examples": ["strip_accents('m\u00fchleisen')"], "Category": ["Text Functions"], "index": 373}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["strlen(string)"], "Feature": ["strlen(string)"], "Description": ["Number of bytes in string."], "Examples": ["strlen('\ud83e\udd86')"], "Category": ["Text Functions"], "index": 374}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["instr"], "Feature": ["instr"], "Description": ["strpos(string, search_string)", "Return location of first occurrence of search_string in string, counting from 1. Returns 0 if no match found."], "Examples": ["strpos('test test', 'es')"], "Category": ["Text Functions"], "index": 375}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["substr"], "Feature": ["substr"], "Description": ["substring(string, start, length)", "Extract substring of length characters starting from character start. Note that a start value of 1 refers to the first character of the string."], "Examples": ["substring('Hello', 2, 2)"], "Category": ["Text Functions"], "index": 376}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["mad(x)"], "Feature": ["mad(x)"], "Description": ["The median absolute deviation. Temporal types return a positive INTERVAL.", "median(abs(x - median(x)))"], "Examples": [], "Category": ["Aggregate Functions"], "index": 377}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["substring_grapheme(string, start, length)"], "Feature": ["substring_grapheme(string, start, length)"], "Description": ["Extract substring of length grapheme clusters starting from character start. Note that a start value of 1 refers to the first character of the string."], "Examples": ["substring_grapheme('\ud83e\udd86\ud83e\udd26\ud83c\udffc\u200d\u2642\ufe0f\ud83e\udd26\ud83c\udffd\u200d\u2640\ufe0f\ud83e\udd86', 3, 2)"], "Category": ["Text Functions"], "index": 378}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["base64"], "Feature": ["base64"], "Description": ["to_base64(blob)", "Convert a blob to a base64 encoded string."], "Examples": ["to_base64('A'::blob)"], "Category": ["Text Functions"], "index": 379}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["trim(string, characters)"], "Feature": ["trim(string, characters)"], "Description": ["Removes any occurrences of any of the characters from either side of the string."], "Examples": ["trim('>>>>test<<', '><')"], "Category": ["Text Functions"], "index": 380}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["trim(string)"], "Feature": ["trim(string)"], "Description": ["Removes any spaces from either side of the string."], "Examples": ["trim('    test  ')"], "Category": ["Text Functions"], "index": 381}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["unicode(string)"], "Feature": ["unicode(string)"], "Description": ["Returns the Unicode code of the first character of the string.", "Returns the Unicode code of the first character of the string. Returns -1 when string is empty, and NULL when string is NULL."], "Examples": ["[unicode('\u00e2bcd'), unicode('\u00e2'), unicode(''), unicode(NULL)]"], "Category": ["Text Functions"], "index": 382}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["ucase"], "Feature": ["ucase"], "Description": ["upper(string)", "Convert string to upper case."], "Examples": ["upper('Hello')"], "Category": ["Text Functions"], "index": 383}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["damerau_levenshtein(s1, s2)"], "Feature": ["damerau_levenshtein(s1, s2)"], "Description": ["Extension of Levenshtein distance to also include transposition of adjacent characters as an allowed edit operation. In other words, the minimum number of edit operations (insertions, deletions, substitutions or transpositions) required to change one string to another. Characters of different cases (e.g., a and A) are considered different."], "Examples": ["damerau_levenshtein('duckdb', 'udckbd')"], "Category": ["Text Functions"], "index": 384}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["editdist3(s1, s2)"], "Feature": ["editdist3(s1, s2)"], "Description": ["Alias of levenshtein for SQLite compatibility. The minimum number of single-character edits (insertions, deletions or substitutions) required to change one string to the other. Characters of different cases (e.g., a and A) are considered different."], "Examples": ["editdist3('duck', 'db')"], "Category": ["Text Functions"], "index": 385}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["hamming(s1, s2)"], "Feature": ["hamming(s1, s2)"], "Description": ["The Hamming distance between to strings, i.e., the number of positions with different characters for two strings of equal length. Strings must be of equal length. Characters of different cases (e.g., a and A) are considered different."], "Examples": ["hamming('duck', 'luck')"], "Category": ["Text Functions"], "index": 386}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["jaccard(s1, s2)"], "Feature": ["jaccard(s1, s2)"], "Description": ["The Jaccard similarity between two strings. Characters of different cases (e.g., a and A) are considered different. Returns a number between 0 and 1."], "Examples": ["jaccard('duck', 'luck')"], "Category": ["Text Functions"], "index": 387}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["median(x)"], "Feature": ["median(x)"], "Description": ["The middle value of the set. For even value counts, quantitative values are averaged and ordinal values return the lower value.", "quantile_cont(x, 0.5)"], "Examples": [], "Category": ["Aggregate Functions"], "index": 388}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["jaro_similarity(s1, s2)"], "Feature": ["jaro_similarity(s1, s2)"], "Description": ["The Jaro similarity between two strings. Characters of different cases (e.g., a and A) are considered different. Returns a number between 0 and 1."], "Examples": ["jaro_similarity('duck', 'duckdb')"], "Category": ["Text Functions"], "index": 389}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["jaro_winkler_similarity(s1, s2)"], "Feature": ["jaro_winkler_similarity(s1, s2)"], "Description": ["The Jaro-Winkler similarity between two strings. Characters of different cases (e.g., a and A) are considered different. Returns a number between 0 and 1."], "Examples": ["jaro_winkler_similarity('duck', 'duckdb')"], "Category": ["Text Functions"], "index": 390}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["levenshtein(s1, s2)"], "Feature": ["levenshtein(s1, s2)"], "Description": ["The minimum number of single-character edits (insertions, deletions or substitutions) required to change one string to the other. Characters of different cases (e.g., a and A) are considered different."], "Examples": ["levenshtein('duck', 'db')"], "Category": ["Text Functions"], "index": 391}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["mismatches(s1, s2)"], "Feature": ["mismatches(s1, s2)"], "Description": ["Alias for hamming(s1, s2). The number of positions with different characters for two strings of equal length. Strings must be of equal length. Characters of different cases (e.g., a and A) are considered different."], "Examples": ["mismatches('duck', 'luck')"], "Category": ["Text Functions"], "index": 392}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["starts_with"], "Feature": ["starts_with"], "Description": ["string ^@ search_string", "Return true if string begins with search_string."], "Examples": ["'abc' ^@ 'a'"], "Category": ["Text Functions"], "index": 393}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["concat"], "Feature": ["concat"], "Description": ["string || string", "String concatenation."], "Examples": ["'Duck' || 'DB'"], "Category": ["Text Functions"], "index": 394}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["array_extract"], "Feature": ["array_extract"], "Description": ["string[index]", "Extract a single character using a (1-based) index."], "Examples": ["'DuckDB'[4]"], "Category": ["Text Functions"], "index": 395}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["array_slice"], "Feature": ["array_slice"], "Description": ["string[begin:end]", "Extract a string using slice conventions, see slicing.", "Extract a string using slice conventions similar to Python. Missing begin or end arguments are interpreted as the beginning or end of the list respectively. Negative values are accepted."], "Examples": ["'DuckDB'[:4]"], "Category": ["Text Functions"], "index": 396}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["list_extract"], "Feature": ["list_extract"], "Description": ["list_element", "array_extract(list, index)", "Extract a single character using a (1-based) index."], "Examples": ["array_extract('DuckDB', 2)"], "Category": ["Text Functions"], "index": 397}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["list_extract"], "Feature": ["list_extract"], "Description": ["list_element", "array_extract(list, index)", "Extract a single character using a (1-based) index."], "Examples": ["array_extract('DuckDB', 2)"], "Category": ["Text Functions"], "index": 398}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["mode(x)"], "Feature": ["mode(x)"], "Description": ["The most frequent value.", "-"], "Examples": [], "Category": ["Aggregate Functions"], "index": 399}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["suffix"], "Feature": ["suffix"], "Description": ["ends_with(string, search_string)", "Return true if string ends with search_string."], "Examples": ["ends_with('abc', 'c')"], "Category": ["Text Functions"], "index": 400}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["lcase"], "Feature": ["lcase"], "Description": ["lower(string)", "Convert string to lower case."], "Examples": ["lower('Hello')"], "Category": ["Text Functions"], "index": 401}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["str_split_regex"], "Feature": ["str_split_regex"], "Description": ["string_split_regex", "regexp_split_to_array(string, regex)", "Splits the string along the regex."], "Examples": ["regexp_split_to_array('hello world; 42', ';? ')"], "Category": ["Text Functions"], "index": 402}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["str_split_regex"], "Feature": ["str_split_regex"], "Description": ["string_split_regex", "regexp_split_to_array(string, regex)", "Splits the string along the regex."], "Examples": ["regexp_split_to_array('hello world; 42', ';? ')"], "Category": ["Text Functions"], "index": 403}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["regexp_split_to_array"], "Feature": ["regexp_split_to_array"], "Description": ["str_split_regex(string, regex)", "Splits the string along the regex."], "Examples": ["str_split_regex('hello world; 42', ';? ')"], "Category": ["Text Functions"], "index": 404}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["string_to_array"], "Feature": ["string_to_array"], "Description": ["str_split", "string_split(string, separator)", "Splits the string along the separator."], "Examples": ["string_split('hello world', ' ')"], "Category": ["Text Functions"], "index": 405}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["string_to_array"], "Feature": ["string_to_array"], "Description": ["str_split", "string_split(string, separator)", "Splits the string along the separator."], "Examples": ["string_split('hello world', ' ')"], "Category": ["Text Functions"], "index": 406}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["instr"], "Feature": ["instr"], "Description": ["strpos(string, search_string)", "Return location of first occurrence of search_string in string, counting from 1. Returns 0 if no match found."], "Examples": ["strpos('test test', 'es')"], "Category": ["Text Functions"], "index": 407}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["substr"], "Feature": ["substr"], "Description": ["substring(string, start, length)", "Extract substring of length characters starting from character start. Note that a start value of 1 refers to the first character of the string."], "Examples": ["substring('Hello', 2, 2)"], "Category": ["Text Functions"], "index": 408}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["base64"], "Feature": ["base64"], "Description": ["to_base64(blob)", "Convert a blob to a base64 encoded string."], "Examples": ["to_base64('A'::blob)"], "Category": ["Text Functions"], "index": 409}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["quantile_cont(x, pos)"], "Feature": ["quantile_cont(x, pos)"], "Description": ["The interpolated pos-quantile of x for 0 <= pos <= 1, i.e., orders the values of x and returns the pos * (n_nonnull_values - 1)th (zero-indexed) element (or an interpolation between the adjacent elements if the index is not an integer). If pos is a LIST of FLOATs, then the result is a LIST of the corresponding interpolated quantiles.", "-"], "Examples": [], "Category": ["Aggregate Functions"], "index": 410}
{"HTML": ["https://duckdb.org/docs/sql/functions/char"], "Title": ["ucase"], "Feature": ["ucase"], "Description": ["upper(string)", "Convert string to upper case."], "Examples": ["upper('Hello')"], "Category": ["Text Functions"], "index": 411}
{"HTML": ["https://duckdb.org/docs/sql/functions/time"], "Title": ["current_time"], "Feature": ["current_time"], "Description": ["Current time (start of current transaction).", "Current time (start of current transaction). Note that parentheses should be omitted."], "Examples": ["current_time"], "Category": ["Time Functions"], "index": 412}
{"HTML": ["https://duckdb.org/docs/sql/functions/time"], "Title": ["date_diff(part, starttime, endtime)"], "Feature": ["date_diff(part, starttime, endtime)"], "Description": ["The number of partition boundaries between the times."], "Examples": ["date_diff('hour', TIME '01:02:03', TIME '06:01:03')"], "Category": ["Time Functions"], "index": 413}
{"HTML": ["https://duckdb.org/docs/sql/functions/time"], "Title": ["date_part(part, time)"], "Feature": ["date_part(part, time)"], "Description": ["Get subfield (equivalent to extract)."], "Examples": ["date_part('minute', TIME '14:21:13')"], "Category": ["Time Functions"], "index": 414}
{"HTML": ["https://duckdb.org/docs/sql/functions/time"], "Title": ["date_sub(part, starttime, endtime)"], "Feature": ["date_sub(part, starttime, endtime)"], "Description": ["The number of complete partitions between the times."], "Examples": ["date_sub('hour', TIME '01:02:03', TIME '06:01:03')"], "Category": ["Time Functions"], "index": 415}
{"HTML": ["https://duckdb.org/docs/sql/functions/time"], "Title": ["datediff(part, starttime, endtime)"], "Feature": ["datediff(part, starttime, endtime)"], "Description": ["Alias of date_diff. The number of partition boundaries between the times."], "Examples": ["datediff('hour', TIME '01:02:03', TIME '06:01:03')"], "Category": ["Time Functions"], "index": 416}
{"HTML": ["https://duckdb.org/docs/sql/functions/time"], "Title": ["datepart(part, time)"], "Feature": ["datepart(part, time)"], "Description": ["Alias of date_part. Get subfield (equivalent to extract)."], "Examples": ["datepart('minute', TIME '14:21:13')"], "Category": ["Time Functions"], "index": 417}
{"HTML": ["https://duckdb.org/docs/sql/functions/time"], "Title": ["datesub(part, starttime, endtime)"], "Feature": ["datesub(part, starttime, endtime)"], "Description": ["Alias of date_sub. The number of complete partitions between the times."], "Examples": ["datesub('hour', TIME '01:02:03', TIME '06:01:03')"], "Category": ["Time Functions"], "index": 418}
{"HTML": ["https://duckdb.org/docs/sql/functions/time"], "Title": ["extract(part FROM time)"], "Feature": ["extract(part FROM time)"], "Description": ["Get subfield from a time."], "Examples": ["extract('hour' FROM TIME '14:21:13')"], "Category": ["Time Functions"], "index": 419}
{"HTML": ["https://duckdb.org/docs/sql/functions/time"], "Title": ["get_current_time()"], "Feature": ["get_current_time()"], "Description": ["Current time (start of current transaction)."], "Examples": ["get_current_time()"], "Category": ["Time Functions"], "index": 420}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["quantile"], "Feature": ["quantile"], "Description": ["quantile_disc(x, pos)", "The discrete pos-quantile of x for 0 <= pos <= 1, i.e., orders the values of x and returns the greatest(ceil(pos * n_nonnull_values) - 1, 0)th (zero-indexed) element. If pos is a LIST of FLOATs, then the result is a LIST of the corresponding discrete quantiles.", "-"], "Examples": [], "Category": ["Aggregate Functions"], "index": 421}
{"HTML": ["https://duckdb.org/docs/sql/functions/time"], "Title": ["make_time(bigint, bigint, double)"], "Feature": ["make_time(bigint, bigint, double)"], "Description": ["The time for the given parts."], "Examples": ["make_time(13, 34, 27.123456)"], "Category": ["Time Functions"], "index": 422}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamp"], "Title": ["age(timestamp, timestamp)"], "Feature": ["age(timestamp, timestamp)"], "Description": ["Subtract arguments, resulting in the time difference between the two timestamps."], "Examples": ["age(TIMESTAMP '2001-04-10', TIMESTAMP '1992-09-20')"], "Category": ["Timestamp Functions"], "index": 423}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamp"], "Title": ["age(timestamp)"], "Feature": ["age(timestamp)"], "Description": ["Subtract from current_date."], "Examples": ["age(TIMESTAMP '1992-09-20')"], "Category": ["Timestamp Functions"], "index": 424}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamp"], "Title": ["century(timestamp)"], "Feature": ["century(timestamp)"], "Description": ["Extracts the century of a timestamp."], "Examples": ["century(TIMESTAMP '1992-03-22')"], "Category": ["Timestamp Functions"], "index": 425}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamp"], "Title": ["current_timestamp"], "Feature": ["current_timestamp"], "Description": ["Returns the current timestamp (at the start of the transaction).", "Returns the current timestamp with time zone (at the start of the transaction)."], "Examples": ["current_timestamp"], "Category": ["Timestamp Functions"], "index": 426}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamp"], "Title": ["date_diff(part, startdate, enddate)"], "Feature": ["date_diff(part, startdate, enddate)"], "Description": ["The number of partition boundaries between the timestamps."], "Examples": ["date_diff('hour', TIMESTAMP '1992-09-30 23:59:59', TIMESTAMP '1992-10-01 01:58:00')"], "Category": ["Timestamp Functions"], "index": 427}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamp"], "Title": ["date_part([part, ...], timestamp)"], "Feature": ["date_part([part, ...], timestamp)"], "Description": ["Get the listed subfields as a struct. The list must be constant."], "Examples": ["date_part(['year', 'month', 'day'], TIMESTAMP '1992-09-20 20:38:40')"], "Category": ["Timestamp Functions"], "index": 428}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamp"], "Title": ["date_part(part, timestamp)"], "Feature": ["date_part(part, timestamp)"], "Description": ["Get subfield (equivalent to extract)."], "Examples": ["date_part('minute', TIMESTAMP '1992-09-20 20:38:40')"], "Category": ["Timestamp Functions"], "index": 429}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamp"], "Title": ["date_sub(part, startdate, enddate)"], "Feature": ["date_sub(part, startdate, enddate)"], "Description": ["The number of complete partitions between the timestamps."], "Examples": ["date_sub('hour', TIMESTAMP '1992-09-30 23:59:59', TIMESTAMP '1992-10-01 01:58:00')"], "Category": ["Timestamp Functions"], "index": 430}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamp"], "Title": ["date_trunc(part, timestamp)"], "Feature": ["date_trunc(part, timestamp)"], "Description": ["Truncate to specified precision."], "Examples": ["date_trunc('hour', TIMESTAMP '1992-09-20 20:38:40')"], "Category": ["Timestamp Functions"], "index": 431}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["regr_avgx(y, x)"], "Feature": ["regr_avgx(y, x)"], "Description": ["The average of the independent variable for non-NULL pairs, where x is the independent variable and y is the dependent variable.", "-"], "Examples": [], "Category": ["Aggregate Functions"], "index": 432}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamp"], "Title": ["datediff(part, startdate, enddate)"], "Feature": ["datediff(part, startdate, enddate)"], "Description": ["Alias of date_diff. The number of partition boundaries between the timestamps."], "Examples": ["datediff('hour', TIMESTAMP '1992-09-30 23:59:59', TIMESTAMP '1992-10-01 01:58:00')"], "Category": ["Timestamp Functions"], "index": 433}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamp"], "Title": ["datepart([part, ...], timestamp)"], "Feature": ["datepart([part, ...], timestamp)"], "Description": ["Alias of date_part. Get the listed subfields as a struct. The list must be constant."], "Examples": ["datepart(['year', 'month', 'day'], TIMESTAMP '1992-09-20 20:38:40')"], "Category": ["Timestamp Functions"], "index": 434}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamp"], "Title": ["datepart(part, timestamp)"], "Feature": ["datepart(part, timestamp)"], "Description": ["Alias of date_part. Get subfield (equivalent to extract)."], "Examples": ["datepart('minute', TIMESTAMP '1992-09-20 20:38:40')"], "Category": ["Timestamp Functions"], "index": 435}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamp"], "Title": ["datesub(part, startdate, enddate)"], "Feature": ["datesub(part, startdate, enddate)"], "Description": ["Alias of date_sub. The number of complete partitions between the timestamps."], "Examples": ["datesub('hour', TIMESTAMP '1992-09-30 23:59:59', TIMESTAMP '1992-10-01 01:58:00')"], "Category": ["Timestamp Functions"], "index": 436}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamp"], "Title": ["datetrunc(part, timestamp)"], "Feature": ["datetrunc(part, timestamp)"], "Description": ["Alias of date_trunc. Truncate to specified precision."], "Examples": ["datetrunc('hour', TIMESTAMP '1992-09-20 20:38:40')"], "Category": ["Timestamp Functions"], "index": 437}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamp"], "Title": ["dayname(timestamp)"], "Feature": ["dayname(timestamp)"], "Description": ["The (English) name of the weekday."], "Examples": ["dayname(TIMESTAMP '1992-03-22')"], "Category": ["Timestamp Functions"], "index": 438}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamp"], "Title": ["epoch_ms(ms)"], "Feature": ["epoch_ms(ms)"], "Description": ["Converts ms since epoch to a timestamp."], "Examples": ["epoch_ms(701222400000)"], "Category": ["Timestamp Functions"], "index": 439}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamp"], "Title": ["epoch_ms(timestamp)"], "Feature": ["epoch_ms(timestamp)"], "Description": ["Return the total number of milliseconds since the epoch.", "Converts a timestamp to milliseconds since the epoch."], "Examples": ["epoch_ms('2022-11-07 08:43:04.123456'::TIMESTAMP);", "epoch_ms(timestamp '2021-08-03 11:59:44.123456')"], "Category": ["Timestamp Functions"], "index": 440}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamp"], "Title": ["epoch_ns(timestamp)"], "Feature": ["epoch_ns(timestamp)"], "Description": ["Return the total number of nanoseconds since the epoch."], "Examples": ["epoch_ns(timestamp '2021-08-03 11:59:44.123456')"], "Category": ["Timestamp Functions"], "index": 441}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamp"], "Title": ["epoch_us(timestamp)"], "Feature": ["epoch_us(timestamp)"], "Description": ["Return the total number of microseconds since the epoch."], "Examples": ["epoch_us(timestamp '2021-08-03 11:59:44.123456')"], "Category": ["Timestamp Functions"], "index": 442}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["regr_avgy(y, x)"], "Feature": ["regr_avgy(y, x)"], "Description": ["The average of the dependent variable for non-NULL pairs, where x is the independent variable and y is the dependent variable.", "-"], "Examples": [], "Category": ["Aggregate Functions"], "index": 443}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["argMin(arg, val)"], "Feature": ["argMin(arg, val)"], "Description": ["arg_min(arg, val)", "Finds the row with the minimum val. Calculates the arg expression at that row. This function is affected by ordering."], "Examples": ["arg_min(A, B)"], "Category": ["Aggregate Functions"], "index": 444}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamp"], "Title": ["epoch(timestamp)"], "Feature": ["epoch(timestamp)"], "Description": ["Converts a timestamp to seconds since the epoch."], "Examples": ["epoch('2022-11-07 08:43:04'::TIMESTAMP);"], "Category": ["Timestamp Functions"], "index": 445}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamp"], "Title": ["extract(field FROM timestamp)"], "Feature": ["extract(field FROM timestamp)"], "Description": ["Get subfield from a timestamp."], "Examples": ["extract('hour' FROM TIMESTAMP '1992-09-20 20:38:48')"], "Category": ["Timestamp Functions"], "index": 446}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamp"], "Title": ["greatest(timestamp, timestamp)"], "Feature": ["greatest(timestamp, timestamp)"], "Description": ["The later of two timestamps."], "Examples": ["greatest(TIMESTAMP '1992-09-20 20:38:48', TIMESTAMP '1992-03-22 01:02:03.1234')"], "Category": ["Timestamp Functions"], "index": 447}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamp"], "Title": ["isfinite(timestamp)"], "Feature": ["isfinite(timestamp)"], "Description": ["Returns true if the timestamp is finite, false otherwise."], "Examples": ["isfinite(TIMESTAMP '1992-03-07')"], "Category": ["Timestamp Functions"], "index": 448}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamp"], "Title": ["isinf(timestamp)"], "Feature": ["isinf(timestamp)"], "Description": ["Returns true if the timestamp is infinite, false otherwise."], "Examples": ["isinf(TIMESTAMP '-infinity')"], "Category": ["Timestamp Functions"], "index": 449}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamp"], "Title": ["last_day(timestamp)"], "Feature": ["last_day(timestamp)"], "Description": ["The last day of the month."], "Examples": ["last_day(TIMESTAMP '1992-03-22 01:02:03.1234')"], "Category": ["Timestamp Functions"], "index": 450}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamp"], "Title": ["least(timestamp, timestamp)"], "Feature": ["least(timestamp, timestamp)"], "Description": ["The earlier of two timestamps."], "Examples": ["least(TIMESTAMP '1992-09-20 20:38:48', TIMESTAMP '1992-03-22 01:02:03.1234')"], "Category": ["Timestamp Functions"], "index": 451}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamp"], "Title": ["make_timestamp(bigint, bigint, bigint, bigint, bigint, double)"], "Feature": ["make_timestamp(bigint, bigint, bigint, bigint, bigint, double)"], "Description": ["The timestamp for the given parts."], "Examples": ["make_timestamp(1992, 9, 20, 13, 34, 27.123456)"], "Category": ["Timestamp Functions"], "index": 452}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamp"], "Title": ["make_timestamp(microseconds)"], "Feature": ["make_timestamp(microseconds)"], "Description": ["The timestamp for the given number of \u00b5s since the epoch."], "Examples": ["make_timestamp(1667810584123456)"], "Category": ["Timestamp Functions"], "index": 453}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamp"], "Title": ["monthname(timestamp)"], "Feature": ["monthname(timestamp)"], "Description": ["The (English) name of the month."], "Examples": ["monthname(TIMESTAMP '1992-09-20')"], "Category": ["Timestamp Functions"], "index": 454}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["regr_count(y, x)"], "Feature": ["regr_count(y, x)"], "Description": ["The number of non-NULL pairs.", "-"], "Examples": [], "Category": ["Aggregate Functions"], "index": 455}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamp"], "Title": ["strftime(timestamp, format)"], "Feature": ["strftime(timestamp, format)"], "Description": ["Converts timestamp to string according to the format string."], "Examples": ["strftime(timestamp '1992-01-01 20:38:40', '%a, %-d %B %Y - %I:%M:%S %p')"], "Category": ["Timestamp Functions"], "index": 456}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamp"], "Title": ["strptime(text, format-list)"], "Feature": ["strptime(text, format-list)"], "Description": ["Converts the string text to timestamp applying the format strings in the list until one succeeds. Throws an error on failure. To return NULL on failure, use try_strptime."], "Examples": ["strptime('4/15/2023 10:56:00', ['%d/%m/%Y %H:%M:%S', '%m/%d/%Y %H:%M:%S'])"], "Category": ["Timestamp Functions"], "index": 457}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamp"], "Title": ["strptime(text, format)"], "Feature": ["strptime(text, format)"], "Description": ["Converts the string text to timestamp according to the format string. Throws an error on failure. To return NULL on failure, use try_strptime."], "Examples": ["strptime('Wed, 1 January 1992 - 08:38:40 PM', '%a, %-d %B %Y - %I:%M:%S %p')"], "Category": ["Timestamp Functions"], "index": 458}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamp"], "Title": ["time_bucket(bucket_width, timestamp[, offset])"], "Feature": ["time_bucket(bucket_width, timestamp[, offset])"], "Description": ["Truncate timestamp by the specified interval bucket_width. Buckets are offset by offset interval."], "Examples": ["time_bucket(INTERVAL '10 minutes', TIMESTAMP '1992-04-20 15:26:00-07', INTERVAL '5 minutes')"], "Category": ["Timestamp Functions"], "index": 459}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamp"], "Title": ["time_bucket(bucket_width, timestamp[, origin])"], "Feature": ["time_bucket(bucket_width, timestamp[, origin])"], "Description": ["Truncate timestamp by the specified interval bucket_width. Buckets are aligned relative to origin timestamp. origin defaults to 2000-01-03 00:00:00 for buckets that don't include a month or year interval, and to 2000-01-01 00:00:00 for month and year buckets."], "Examples": ["time_bucket(INTERVAL '2 weeks', TIMESTAMP '1992-04-20 15:26:00', TIMESTAMP '1992-04-01 00:00:00')"], "Category": ["Timestamp Functions"], "index": 460}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamp"], "Title": ["to_timestamp(double)"], "Feature": ["to_timestamp(double)"], "Description": ["Converts seconds since the epoch to a timestamp with time zone."], "Examples": ["to_timestamp(1284352323.5)"], "Category": ["Timestamp Functions"], "index": 461}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamp"], "Title": ["try_strptime(text, format-list)"], "Feature": ["try_strptime(text, format-list)"], "Description": ["Converts the string text to timestamp applying the format strings in the list until one succeeds. Returns NULL on failure."], "Examples": ["try_strptime('4/15/2023 10:56:00', ['%d/%m/%Y %H:%M:%S', '%m/%d/%Y %H:%M:%S'])"], "Category": ["Timestamp Functions"], "index": 462}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamp"], "Title": ["try_strptime(text, format)"], "Feature": ["try_strptime(text, format)"], "Description": ["Converts the string text to timestamp according to the format string. Returns NULL on failure."], "Examples": ["try_strptime('Wed, 1 January 1992 - 08:38:40 PM', '%a, %-d %B %Y - %I:%M:%S %p')"], "Category": ["Timestamp Functions"], "index": 463}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamp"], "Title": ["generate_series(timestamp, timestamp, interval)"], "Feature": ["generate_series(timestamp, timestamp, interval)"], "Description": ["Generate a table of timestamps in the closed range, stepping by the interval."], "Examples": ["generate_series(TIMESTAMP '2001-04-10', TIMESTAMP '2001-04-11', INTERVAL 30 MINUTE)"], "Category": ["Timestamp Functions"], "index": 464}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamp"], "Title": ["range(timestamp, timestamp, interval)"], "Feature": ["range(timestamp, timestamp, interval)"], "Description": ["Generate a table of timestamps in the half open range, stepping by the interval."], "Examples": ["range(TIMESTAMP '2001-04-10', TIMESTAMP '2001-04-11', INTERVAL 30 MINUTE)"], "Category": ["Timestamp Functions"], "index": 465}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["regr_intercept(y, x)"], "Feature": ["regr_intercept(y, x)"], "Description": ["The intercept of the univariate linear regression line, where x is the independent variable and y is the dependent variable.", "regr_avgy(y, x) - regr_slope(y, x) * regr_avgx(y, x)"], "Examples": [], "Category": ["Aggregate Functions"], "index": 466}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamptz"], "Title": ["current_timestamp"], "Feature": ["current_timestamp"], "Description": ["Current date and time (start of current transaction)."], "Examples": ["current_timestamp"], "Category": ["Timestamp with Time Zone Functions"], "index": 467}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamptz"], "Title": ["get_current_timestamp()"], "Feature": ["get_current_timestamp()"], "Description": ["Current date and time (start of current transaction)."], "Examples": ["get_current_timestamp()"], "Category": ["Timestamp with Time Zone Functions"], "index": 468}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamptz"], "Title": ["greatest(timestamptz, timestamptz)"], "Feature": ["greatest(timestamptz, timestamptz)"], "Description": ["The later of two timestamps."], "Examples": ["greatest(TIMESTAMPTZ '1992-09-20 20:38:48', TIMESTAMPTZ '1992-03-22 01:02:03.1234')"], "Category": ["Timestamp with Time Zone Functions"], "index": 469}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamptz"], "Title": ["isfinite(timestamptz)"], "Feature": ["isfinite(timestamptz)"], "Description": ["Returns true if the timestamp with time zone is finite, false otherwise."], "Examples": ["isfinite(TIMESTAMPTZ '1992-03-07')"], "Category": ["Timestamp with Time Zone Functions"], "index": 470}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamptz"], "Title": ["isinf(timestamptz)"], "Feature": ["isinf(timestamptz)"], "Description": ["Returns true if the timestamp with time zone is infinite, false otherwise."], "Examples": ["isinf(TIMESTAMPTZ '-infinity')"], "Category": ["Timestamp with Time Zone Functions"], "index": 471}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamptz"], "Title": ["least(timestamptz, timestamptz)"], "Feature": ["least(timestamptz, timestamptz)"], "Description": ["The earlier of two timestamps."], "Examples": ["least(TIMESTAMPTZ '1992-09-20 20:38:48', TIMESTAMPTZ '1992-03-22 01:02:03.1234')"], "Category": ["Timestamp with Time Zone Functions"], "index": 472}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamptz"], "Title": ["now()"], "Feature": ["now()"], "Description": ["Current date and time (start of current transaction)."], "Examples": ["now()"], "Category": ["Timestamp with Time Zone Functions"], "index": 473}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamptz"], "Title": ["transaction_timestamp()"], "Feature": ["transaction_timestamp()"], "Description": ["Current date and time (start of current transaction)."], "Examples": ["transaction_timestamp()"], "Category": ["Timestamp with Time Zone Functions"], "index": 474}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamptz"], "Title": ["age(timestamptz, timestamptz)"], "Feature": ["age(timestamptz, timestamptz)"], "Description": ["Subtract arguments, resulting in the time difference between the two timestamps."], "Examples": ["age(TIMESTAMPTZ '2001-04-10', TIMESTAMPTZ '1992-09-20')"], "Category": ["Timestamp with Time Zone Functions"], "index": 475}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamptz"], "Title": ["age(timestamptz)"], "Feature": ["age(timestamptz)"], "Description": ["Subtract from current_date."], "Examples": ["age(TIMESTAMP '1992-09-20')"], "Category": ["Timestamp with Time Zone Functions"], "index": 476}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["regr_r2(y, x)"], "Feature": ["regr_r2(y, x)"], "Description": ["The squared Pearson correlation coefficient between y and x. Also: The coefficient of determination in a linear regression, where x is the independent variable and y is the dependent variable.", "-"], "Examples": [], "Category": ["Aggregate Functions"], "index": 477}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamptz"], "Title": ["date_diff(part, startdate, enddate)"], "Feature": ["date_diff(part, startdate, enddate)"], "Description": ["The number of partition boundaries between the timestamps."], "Examples": ["date_diff('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')"], "Category": ["Timestamp with Time Zone Functions"], "index": 478}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamptz"], "Title": ["date_part([part, ...], timestamptz)"], "Feature": ["date_part([part, ...], timestamptz)"], "Description": ["Get the listed subfields as a struct. The list must be constant."], "Examples": ["date_part(['year', 'month', 'day'], TIMESTAMPTZ '1992-09-20 20:38:40-07')"], "Category": ["Timestamp with Time Zone Functions"], "index": 479}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamptz"], "Title": ["date_part(part, timestamptz)"], "Feature": ["date_part(part, timestamptz)"], "Description": ["Get subfield (equivalent to extract)."], "Examples": ["date_part('minute', TIMESTAMPTZ '1992-09-20 20:38:40')"], "Category": ["Timestamp with Time Zone Functions"], "index": 480}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamptz"], "Title": ["date_sub(part, startdate, enddate)"], "Feature": ["date_sub(part, startdate, enddate)"], "Description": ["The number of complete partitions between the timestamps."], "Examples": ["date_sub('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')"], "Category": ["Timestamp with Time Zone Functions"], "index": 481}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamptz"], "Title": ["date_trunc(part, timestamptz)"], "Feature": ["date_trunc(part, timestamptz)"], "Description": ["Truncate to specified precision."], "Examples": ["date_trunc('hour', TIMESTAMPTZ '1992-09-20 20:38:40')"], "Category": ["Timestamp with Time Zone Functions"], "index": 482}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamptz"], "Title": ["datediff(part, startdate, enddate)"], "Feature": ["datediff(part, startdate, enddate)"], "Description": ["Alias of date_diff. The number of partition boundaries between the timestamps."], "Examples": ["datediff('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')"], "Category": ["Timestamp with Time Zone Functions"], "index": 483}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamptz"], "Title": ["datepart([part, ...], timestamptz)"], "Feature": ["datepart([part, ...], timestamptz)"], "Description": ["Alias of date_part. Get the listed subfields as a struct. The list must be constant."], "Examples": ["datepart(['year', 'month', 'day'], TIMESTAMPTZ '1992-09-20 20:38:40-07')"], "Category": ["Timestamp with Time Zone Functions"], "index": 484}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamptz"], "Title": ["datepart(part, timestamptz)"], "Feature": ["datepart(part, timestamptz)"], "Description": ["Alias of date_part. Get subfield (equivalent to extract)."], "Examples": ["datepart('minute', TIMESTAMPTZ '1992-09-20 20:38:40')"], "Category": ["Timestamp with Time Zone Functions"], "index": 485}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamptz"], "Title": ["datesub(part, startdate, enddate)"], "Feature": ["datesub(part, startdate, enddate)"], "Description": ["Alias of date_sub. The number of complete partitions between the timestamps."], "Examples": ["datesub('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')"], "Category": ["Timestamp with Time Zone Functions"], "index": 486}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamptz"], "Title": ["datetrunc(part, timestamptz)"], "Feature": ["datetrunc(part, timestamptz)"], "Description": ["Alias of date_trunc. Truncate to specified precision."], "Examples": ["datetrunc('hour', TIMESTAMPTZ '1992-09-20 20:38:40')"], "Category": ["Timestamp with Time Zone Functions"], "index": 487}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["regr_slope(y, x)"], "Feature": ["regr_slope(y, x)"], "Description": ["The slope of the linear regression line, where x is the independent variable and y is the dependent variable.", "Returns the slope of the linear regression line, where x is the independent variable and y is the dependent variable.", "regr_sxy(y, x) / regr_sxx(y, x)"], "Examples": [], "Category": ["Aggregate Functions"], "index": 488}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamptz"], "Title": ["epoch_ms(timestamptz)"], "Feature": ["epoch_ms(timestamptz)"], "Description": ["Converts a timestamptz to milliseconds since the epoch."], "Examples": ["epoch_ms('2022-11-07 08:43:04.123456+00'::TIMESTAMPTZ);"], "Category": ["Timestamp with Time Zone Functions"], "index": 489}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamptz"], "Title": ["epoch_ns(timestamptz)"], "Feature": ["epoch_ns(timestamptz)"], "Description": ["Converts a timestamptz to nanoseconds since the epoch."], "Examples": ["epoch_ns('2022-11-07 08:43:04.123456+00'::TIMESTAMPTZ);"], "Category": ["Timestamp with Time Zone Functions"], "index": 490}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamptz"], "Title": ["epoch_us(timestamptz)"], "Feature": ["epoch_us(timestamptz)"], "Description": ["Converts a timestamptz to microseconds since the epoch."], "Examples": ["epoch_us('2022-11-07 08:43:04.123456+00'::TIMESTAMPTZ);"], "Category": ["Timestamp with Time Zone Functions"], "index": 491}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamptz"], "Title": ["extract(field FROM timestamptz)"], "Feature": ["extract(field FROM timestamptz)"], "Description": ["Get subfield from a TIMESTAMP WITH TIME ZONE."], "Examples": ["extract('hour' FROM TIMESTAMPTZ '1992-09-20 20:38:48')"], "Category": ["Timestamp with Time Zone Functions"], "index": 492}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamptz"], "Title": ["last_day(timestamptz)"], "Feature": ["last_day(timestamptz)"], "Description": ["The last day of the month."], "Examples": ["last_day(TIMESTAMPTZ '1992-03-22 01:02:03.1234')"], "Category": ["Timestamp with Time Zone Functions"], "index": 493}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamptz"], "Title": ["make_timestamptz(bigint, bigint, bigint, bigint, bigint, double, string)"], "Feature": ["make_timestamptz(bigint, bigint, bigint, bigint, bigint, double, string)"], "Description": ["The TIMESTAMP WITH TIME ZONE for the given parts and time zone."], "Examples": ["make_timestamptz(1992, 9, 20, 15, 34, 27.123456, 'CET')"], "Category": ["Timestamp with Time Zone Functions"], "index": 494}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamptz"], "Title": ["make_timestamptz(bigint, bigint, bigint, bigint, bigint, double)"], "Feature": ["make_timestamptz(bigint, bigint, bigint, bigint, bigint, double)"], "Description": ["The TIMESTAMP WITH TIME ZONE for the given parts in the current time zone."], "Examples": ["make_timestamptz(1992, 9, 20, 13, 34, 27.123456)"], "Category": ["Timestamp with Time Zone Functions"], "index": 495}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamptz"], "Title": ["make_timestamptz(microseconds)"], "Feature": ["make_timestamptz(microseconds)"], "Description": ["The TIMESTAMP WITH TIME ZONE for the given \u00b5s since the epoch."], "Examples": ["make_timestamptz(1667810584123456)"], "Category": ["Timestamp with Time Zone Functions"], "index": 496}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamptz"], "Title": ["strftime(timestamptz, format)"], "Feature": ["strftime(timestamptz, format)"], "Description": ["Converts a TIMESTAMP WITH TIME ZONE value to string according to the format string."], "Examples": ["strftime(timestamptz '1992-01-01 20:38:40', '%a, %-d %B %Y - %I:%M:%S %p')"], "Category": ["Timestamp with Time Zone Functions"], "index": 497}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamptz"], "Title": ["strptime(text, format)"], "Feature": ["strptime(text, format)"], "Description": ["Converts string to TIMESTAMP WITH TIME ZONE according to the format string if %Z is specified."], "Examples": ["strptime('Wed, 1 January 1992 - 08:38:40 PST', '%a, %-d %B %Y - %H:%M:%S %Z')"], "Category": ["Timestamp with Time Zone Functions"], "index": 498}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["regr_sxx(y, x)"], "Feature": ["regr_sxx(y, x)"], "Description": ["The sample variance, which includes Bessel's bias correction, of the independent variable for non-NULL pairs, where x is the independent variable and y is the dependent variable.", "-"], "Examples": [], "Category": ["Aggregate Functions"], "index": 499}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamptz"], "Title": ["time_bucket(bucket_width, timestamptz[, offset])"], "Feature": ["time_bucket(bucket_width, timestamptz[, offset])"], "Description": ["Truncate timestamptz by the specified interval bucket_width. Buckets are offset by offset interval."], "Examples": ["time_bucket(INTERVAL '10 minutes', TIMESTAMPTZ '1992-04-20 15:26:00-07', INTERVAL '5 minutes')"], "Category": ["Timestamp with Time Zone Functions"], "index": 500}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamptz"], "Title": ["time_bucket(bucket_width, timestamptz[, origin])"], "Feature": ["time_bucket(bucket_width, timestamptz[, origin])"], "Description": ["Truncate timestamptz by the specified interval bucket_width. Buckets are aligned relative to origin timestamptz. origin defaults to 2000-01-03 00:00:00+00 for buckets that don't include a month or year interval, and to 2000-01-01 00:00:00+00 for month and year buckets."], "Examples": ["time_bucket(INTERVAL '2 weeks', TIMESTAMPTZ '1992-04-20 15:26:00-07', TIMESTAMPTZ '1992-04-01 00:00:00-07')"], "Category": ["Timestamp with Time Zone Functions"], "index": 501}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamptz"], "Title": ["time_bucket(bucket_width, timestamptz[, timezone])"], "Feature": ["time_bucket(bucket_width, timestamptz[, timezone])"], "Description": ["Truncate timestamptz by the specified interval bucket_width. Bucket starts and ends are calculated using timezone. timezone is a varchar and defaults to UTC."], "Examples": ["time_bucket(INTERVAL '2 days', TIMESTAMPTZ '1992-04-20 15:26:00-07', 'Europe/Berlin')"], "Category": ["Timestamp with Time Zone Functions"], "index": 502}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamptz"], "Title": ["generate_series(timestamptz, timestamptz, interval)"], "Feature": ["generate_series(timestamptz, timestamptz, interval)"], "Description": ["Generate a table of timestamps in the closed range (including both the starting timestamp and the ending timestamp), stepping by the interval."], "Examples": ["generate_series(TIMESTAMPTZ '2001-04-10', TIMESTAMPTZ '2001-04-11', INTERVAL 30 MINUTE)"], "Category": ["Timestamp with Time Zone Functions"], "index": 503}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamptz"], "Title": ["range(timestamptz, timestamptz, interval)"], "Feature": ["range(timestamptz, timestamptz, interval)"], "Description": ["Generate a table of timestamps in the half open range (including the starting timestamp, but stopping before the ending timestamp), stepping by the interval."], "Examples": ["range(TIMESTAMPTZ '2001-04-10', TIMESTAMPTZ '2001-04-11', INTERVAL 30 MINUTE)"], "Category": ["Timestamp with Time Zone Functions"], "index": 504}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamptz"], "Title": ["current_localtime()"], "Feature": ["current_localtime()"], "Description": ["Returns a TIME whose GMT bin values correspond to local time in the current time zone."], "Examples": ["current_localtime()"], "Category": ["Timestamp with Time Zone Functions"], "index": 505}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamptz"], "Title": ["current_localtimestamp()"], "Feature": ["current_localtimestamp()"], "Description": ["Returns a TIMESTAMP whose GMT bin values correspond to local date and time in the current time zone."], "Examples": ["current_localtimestamp()"], "Category": ["Timestamp with Time Zone Functions"], "index": 506}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamptz"], "Title": ["localtime"], "Feature": ["localtime"], "Description": ["Synonym for the current_localtime() function call."], "Examples": ["localtime"], "Category": ["Timestamp with Time Zone Functions"], "index": 507}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamptz"], "Title": ["localtimestamp"], "Feature": ["localtimestamp"], "Description": ["Synonym for the current_localtimestamp() function call."], "Examples": ["localtimestamp"], "Category": ["Timestamp with Time Zone Functions"], "index": 508}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamptz"], "Title": ["timezone(text, timestamp)"], "Feature": ["timezone(text, timestamp)"], "Description": ["Use the date parts of the timestamp in GMT to construct a timestamp in the given time zone. Effectively, the argument is a \u201clocal\u201d time."], "Examples": ["timezone('America/Denver', TIMESTAMP '2001-02-16 20:38:40')"], "Category": ["Timestamp with Time Zone Functions"], "index": 509}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["regr_sxy(y, x)"], "Feature": ["regr_sxy(y, x)"], "Description": ["The sample covariance, which includes Bessel's bias correction.", "-"], "Examples": [], "Category": ["Aggregate Functions"], "index": 510}
{"HTML": ["https://duckdb.org/docs/sql/functions/timestamptz"], "Title": ["timezone(text, timestamptz)"], "Feature": ["timezone(text, timestamptz)"], "Description": ["Use the date parts of the timestamp in the given time zone to construct a timestamp. Effectively, the result is a \u201clocal\u201d time."], "Examples": ["timezone('America/Denver', TIMESTAMPTZ '2001-02-16 20:38:40-05')"], "Category": ["Timestamp with Time Zone Functions"], "index": 511}
{"HTML": ["https://duckdb.org/docs/sql/functions/union"], "Title": ["union.tag"], "Feature": ["union.tag"], "Description": ["Dot notation serves as an alias for union_extract."], "Examples": ["(union_value(k := 'hello')).k"], "Category": ["Union Functions"], "index": 512}
{"HTML": ["https://duckdb.org/docs/sql/functions/union"], "Title": ["union_extract(union, 'tag')"], "Feature": ["union_extract(union, 'tag')"], "Description": ["Extract the value with the named tags from the union. NULL if the tag is not currently selected."], "Examples": ["union_extract(s, 'k')"], "Category": ["Union Functions"], "index": 513}
{"HTML": ["https://duckdb.org/docs/sql/functions/union"], "Title": ["union_value(tag := any)"], "Feature": ["union_value(tag := any)"], "Description": ["Create a single member UNION containing the argument value. The tag of the value will be the bound variable name."], "Examples": ["union_value(k := 'hello')"], "Category": ["Union Functions"], "index": 514}
{"HTML": ["https://duckdb.org/docs/sql/functions/union"], "Title": ["union_tag(union)"], "Feature": ["union_tag(union)"], "Description": ["Retrieve the currently selected tag of the union as an Enum."], "Examples": ["union_tag(union_value(k := 'foo'))"], "Category": ["Union Functions"], "index": 515}
{"HTML": ["https://duckdb.org/docs/sql/functions/utility"], "Title": ["alias(column)"], "Feature": ["alias(column)"], "Description": ["Return the name of the column."], "Examples": ["alias(column1)"], "Category": ["Utility Functions"], "index": 516}
{"HTML": ["https://duckdb.org/docs/sql/functions/utility"], "Title": ["checkpoint(database)"], "Feature": ["checkpoint(database)"], "Description": ["Synchronize WAL with file for (optional) database without interrupting transactions."], "Examples": ["checkpoint(my_db)"], "Category": ["Utility Functions"], "index": 517}
{"HTML": ["https://duckdb.org/docs/sql/functions/utility"], "Title": ["coalesce(expr, ...)"], "Feature": ["coalesce(expr, ...)"], "Description": ["Return the first expression that evaluates to a non-NULL value. Accepts 1 or more parameters. Each expression can be a column, literal value, function result, or many others."], "Examples": ["coalesce(NULL, NULL, 'default_string')"], "Category": ["Utility Functions"], "index": 518}
{"HTML": ["https://duckdb.org/docs/sql/functions/utility"], "Title": ["constant_or_null(arg1, arg2)"], "Feature": ["constant_or_null(arg1, arg2)"], "Description": ["If arg2 is NULL, return NULL. Otherwise, return arg1."], "Examples": ["constant_or_null(42, NULL)"], "Category": ["Utility Functions"], "index": 519}
{"HTML": ["https://duckdb.org/docs/sql/functions/utility"], "Title": ["count_if(x)"], "Feature": ["count_if(x)"], "Description": ["Returns 1 if x is true or a non-zero number."], "Examples": ["count_if(42)"], "Category": ["Utility Functions"], "index": 520}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["regr_syy(y, x)"], "Feature": ["regr_syy(y, x)"], "Description": ["The sample variance, which includes Bessel's bias correction, of the dependent variable for non-NULL pairs , where x is the independent variable and y is the dependent variable.", "The sample variance, which includes Bessel's bias correction, of the dependent variable for non-NULL pairs, where x is the independent variable and y is the dependent variable.", "-"], "Examples": [], "Category": ["Aggregate Functions"], "index": 521}
{"HTML": ["https://duckdb.org/docs/sql/functions/utility"], "Title": ["current_catalog()"], "Feature": ["current_catalog()"], "Description": ["Return the name of the currently active catalog. Default is memory."], "Examples": ["current_catalog()"], "Category": ["Utility Functions"], "index": 522}
{"HTML": ["https://duckdb.org/docs/sql/functions/utility"], "Title": ["current_schema()"], "Feature": ["current_schema()"], "Description": ["Return the name of the currently active schema. Default is main."], "Examples": ["current_schema()"], "Category": ["Utility Functions"], "index": 523}
{"HTML": ["https://duckdb.org/docs/sql/functions/utility"], "Title": ["current_schemas(boolean)"], "Feature": ["current_schemas(boolean)"], "Description": ["Return list of schemas. Pass a parameter of true to include implicit schemas."], "Examples": ["current_schemas(true)"], "Category": ["Utility Functions"], "index": 524}
{"HTML": ["https://duckdb.org/docs/sql/functions/utility"], "Title": ["current_setting('setting_name')"], "Feature": ["current_setting('setting_name')"], "Description": ["Return the current value of the configuration setting."], "Examples": ["current_setting('access_mode')"], "Category": ["Utility Functions"], "index": 525}
{"HTML": ["https://duckdb.org/docs/sql/functions/utility"], "Title": ["currval('sequence_name')"], "Feature": ["currval('sequence_name')"], "Description": ["Return the current value of the sequence. Note that nextval must be called at least once prior to calling currval."], "Examples": ["currval('my_sequence_name')"], "Category": ["Utility Functions"], "index": 526}
{"HTML": ["https://duckdb.org/docs/sql/functions/utility"], "Title": ["error(message)"], "Feature": ["error(message)"], "Description": ["Throws the given error message."], "Examples": ["error('access_mode')"], "Category": ["Utility Functions"], "index": 527}
{"HTML": ["https://duckdb.org/docs/sql/functions/utility"], "Title": ["force_checkpoint(database)"], "Feature": ["force_checkpoint(database)"], "Description": ["Synchronize WAL with file for (optional) database interrupting transactions."], "Examples": ["force_checkpoint(my_db)"], "Category": ["Utility Functions"], "index": 528}
{"HTML": ["https://duckdb.org/docs/sql/functions/utility"], "Title": ["gen_random_uuid()"], "Feature": ["gen_random_uuid()"], "Description": ["Alias of uuid. Return a random UUID similar to this: eeccb8c5-9943-b2bb-bb5e-222f4e14b687."], "Examples": ["gen_random_uuid()"], "Category": ["Utility Functions"], "index": 529}
{"HTML": ["https://duckdb.org/docs/sql/functions/utility"], "Title": ["getenv(var)"], "Feature": ["getenv(var)"], "Description": ["Returns the value of the environment variable var. Only available in the command line client."], "Examples": [], "Category": ["Utility Functions"], "index": 530}
{"HTML": ["https://duckdb.org/docs/sql/functions/utility"], "Title": ["hash(value)"], "Feature": ["hash(value)"], "Description": ["Returns a UBIGINT with the hash of the value."], "Examples": ["hash('\ud83e\udd86')"], "Category": ["Utility Functions"], "index": 531}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["skewness(x)"], "Feature": ["skewness(x)"], "Description": ["The skewness.", "-"], "Examples": [], "Category": ["Aggregate Functions"], "index": 532}
{"HTML": ["https://duckdb.org/docs/sql/functions/utility"], "Title": ["icu_sort_key(string, collator)"], "Feature": ["icu_sort_key(string, collator)"], "Description": ["Surrogate key used to sort special characters according to the specific locale. Collator parameter is optional. Valid only when ICU extension is installed."], "Examples": ["icu_sort_key('\u00f6', 'DE')"], "Category": ["Utility Functions"], "index": 533}
{"HTML": ["https://duckdb.org/docs/sql/functions/utility"], "Title": ["if(a, b, c)"], "Feature": ["if(a, b, c)"], "Description": ["Ternary conditional operator.", "Ternary conditional operator; returns b if a, else returns c. Equivalent to CASE WHEN a THEN b ELSE c END."], "Examples": ["if(2 > 1, 3, 4)"], "Category": ["Utility Functions"], "index": 534}
{"HTML": ["https://duckdb.org/docs/sql/functions/utility"], "Title": ["ifnull(expr, other)"], "Feature": ["ifnull(expr, other)"], "Description": ["A two-argument version of coalesce."], "Examples": ["ifnull(NULL, 'default_string')"], "Category": ["Utility Functions"], "index": 535}
{"HTML": ["https://duckdb.org/docs/sql/functions/utility"], "Title": ["md5(string)"], "Feature": ["md5(string)"], "Description": ["Returns the MD5 hash of the string as a VARCHAR."], "Examples": ["md5('123')"], "Category": ["Utility Functions"], "index": 536}
{"HTML": ["https://duckdb.org/docs/sql/functions/utility"], "Title": ["md5_number(string)"], "Feature": ["md5_number(string)"], "Description": ["Returns the MD5 hash of the string as a HUGEINT."], "Examples": ["md5_number('123')"], "Category": ["Utility Functions"], "index": 537}
{"HTML": ["https://duckdb.org/docs/sql/functions/utility"], "Title": ["md5_number_lower(string)"], "Feature": ["md5_number_lower(string)"], "Description": ["Returns the lower 64-bit segment of the MD5 hash of the string as a BIGINT.", "Returns the MD5 hash of the string as a BIGINT."], "Examples": ["md5_number_lower('123')"], "Category": ["Utility Functions"], "index": 538}
{"HTML": ["https://duckdb.org/docs/sql/functions/utility"], "Title": ["md5_number_higher(string)"], "Feature": ["md5_number_higher(string)"], "Description": ["Returns the higher 64-bit segment of the MD5 hash of the string as a BIGINT.", "Returns the MD5 hash of the string as a BIGINT."], "Examples": ["md5_number_higher('123')"], "Category": ["Utility Functions"], "index": 539}
{"HTML": ["https://duckdb.org/docs/sql/functions/utility"], "Title": ["nextval('sequence_name')"], "Feature": ["nextval('sequence_name')"], "Description": ["Return the following value of the sequence."], "Examples": ["nextval('my_sequence_name')"], "Category": ["Utility Functions"], "index": 540}
{"HTML": ["https://duckdb.org/docs/sql/functions/utility"], "Title": ["nullif(a, b)"], "Feature": ["nullif(a, b)"], "Description": ["Return NULL if a = b, else return a. Equivalent to CASE WHEN a = b THEN NULL ELSE a END.", "Return null if a = b, else return a. Equivalent to CASE WHEN a = b THEN NULL ELSE a END."], "Examples": ["nullif(1+1, 2)"], "Category": ["Utility Functions"], "index": 541}
{"HTML": ["https://duckdb.org/docs/sql/functions/utility"], "Title": ["pg_typeof(expression)"], "Feature": ["pg_typeof(expression)"], "Description": ["Returns the lower case name of the data type of the result of the expression. For PostgreSQL compatibility."], "Examples": ["pg_typeof('abc')"], "Category": ["Utility Functions"], "index": 542}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["stddev_pop(x)"], "Feature": ["stddev_pop(x)"], "Description": ["The population standard deviation.", "sqrt(var_pop(x))"], "Examples": [], "Category": ["Aggregate Functions"], "index": 543}
{"HTML": ["https://duckdb.org/docs/sql/functions/utility"], "Title": ["read_blob(source)"], "Feature": ["read_blob(source)"], "Description": ["Returns the content from source (a filename, a list of filenames, or a glob pattern) as a BLOB. See the read_blob guide for more details."], "Examples": ["read_blob('hello.bin')"], "Category": ["Utility Functions"], "index": 544}
{"HTML": ["https://duckdb.org/docs/sql/functions/utility"], "Title": ["read_text(source)"], "Feature": ["read_text(source)"], "Description": ["Returns the content from source (a filename, a list of filenames, or a glob pattern) as a VARCHAR. The file content is first validated to be valid UTF-8. If read_text attempts to read a file with invalid UTF-8 an error is thrown suggesting to use read_blob instead. See the read_text guide for more details."], "Examples": ["read_text('hello.txt')"], "Category": ["Utility Functions"], "index": 545}
{"HTML": ["https://duckdb.org/docs/sql/functions/utility"], "Title": ["sha256(value)"], "Feature": ["sha256(value)"], "Description": ["Returns a VARCHAR with the SHA-256 hash of the value."], "Examples": ["sha256('\ud83e\udd86')"], "Category": ["Utility Functions"], "index": 546}
{"HTML": ["https://duckdb.org/docs/sql/functions/utility"], "Title": ["stats(expression)"], "Feature": ["stats(expression)"], "Description": ["Returns a string with statistics about the expression. Expression can be a column, constant, or SQL expression."], "Examples": ["stats(5)"], "Category": ["Utility Functions"], "index": 547}
{"HTML": ["https://duckdb.org/docs/sql/functions/utility"], "Title": ["txid_current()"], "Feature": ["txid_current()"], "Description": ["Returns the current transaction's identifier, a BIGINT value. It will assign a new one if the current transaction does not have one already."], "Examples": ["txid_current()"], "Category": ["Utility Functions"], "index": 548}
{"HTML": ["https://duckdb.org/docs/sql/functions/utility"], "Title": ["typeof(expression)"], "Feature": ["typeof(expression)"], "Description": ["Returns the name of the data type of the result of the expression."], "Examples": ["typeof('abc')"], "Category": ["Utility Functions"], "index": 549}
{"HTML": ["https://duckdb.org/docs/sql/functions/utility"], "Title": ["uuid()"], "Feature": ["uuid()"], "Description": ["Return a random UUID similar to this: eeccb8c5-9943-b2bb-bb5e-222f4e14b687."], "Examples": ["uuid()"], "Category": ["Utility Functions"], "index": 550}
{"HTML": ["https://duckdb.org/docs/sql/functions/utility"], "Title": ["version()"], "Feature": ["version()"], "Description": ["Return the currently active version of DuckDB in this format."], "Examples": ["version()"], "Category": ["Utility Functions"], "index": 551}
{"HTML": ["https://duckdb.org/docs/sql/functions/utility"], "Title": ["glob(search_path)"], "Feature": ["glob(search_path)"], "Description": ["Return filenames found at the location indicated by the search_path in a single column named file. The search_path may contain glob pattern matching syntax."], "Examples": ["glob('*')"], "Category": ["Utility Functions"], "index": 552}
{"HTML": ["https://duckdb.org/docs/sql/functions/utility"], "Title": ["repeat_row(varargs, num_rows)"], "Feature": ["repeat_row(varargs, num_rows)"], "Description": ["Returns a table with num_rows rows, each containing the fields defined in varargs."], "Examples": ["repeat_row(1, 2, 'foo', num_rows = 3)"], "Category": ["Utility Functions"], "index": 553}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["stddev(x)"], "Feature": ["stddev(x)"], "Description": ["stddev_samp(x)", "The sample standard deviation.", "sqrt(var_samp(x))"], "Examples": [], "Category": ["Aggregate Functions"], "index": 554}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["argMin(arg, val, n)"], "Feature": ["argMin(arg, val, n)"], "Description": ["arg_min(arg, val, n)", "Returns a LIST containing the arg expressions for the \"bottom\" n rows ordered by val ascending."], "Examples": ["arg_min(A, B, 2)"], "Category": ["Aggregate Functions"], "index": 555}
{"HTML": ["https://duckdb.org/docs/sql/functions/window_functions"], "Title": ["cume_dist()"], "Feature": ["cume_dist()"], "Description": ["The cumulative distribution: (number of partition rows preceding or peer with current row) / total partition rows.", "DOUBLE"], "Examples": ["cume_dist()"], "Category": ["Window Functions"], "index": 556}
{"HTML": ["https://duckdb.org/docs/sql/functions/window_functions"], "Title": ["dense_rank()"], "Feature": ["dense_rank()"], "Description": ["The rank of the current row without gaps; this function counts peer groups.", "BIGINT"], "Examples": ["dense_rank()"], "Category": ["Window Functions"], "index": 557}
{"HTML": ["https://duckdb.org/docs/sql/functions/window_functions"], "Title": ["first_value(expr[ IGNORE NULLS])"], "Feature": ["first_value(expr[ IGNORE NULLS])"], "Description": ["Returns expr evaluated at the row that is the first row (with a non-null value of expr if IGNORE NULLS is set) of the window frame.", "Same type as expr"], "Examples": ["first_value(column)"], "Category": ["Window Functions"], "index": 558}
{"HTML": ["https://duckdb.org/docs/sql/functions/window_functions"], "Title": ["lag(column, 3, 0)"], "Feature": ["lag(column, 3, 0)"], "Description": ["lag(expr[, offset[, default]][ IGNORE NULLS])", "Returns expr evaluated at the row that is offset rows (among rows with a non-null value of expr if IGNORE NULLS is set) before the current row within the window frame; if there is no such row, instead return default (which must be of the Same type as expr). Both offset and default are evaluated with respect to the current row. If omitted, offset defaults to 1 and default to NULL.", "Same type as expr"], "Examples": [], "Category": ["Window Functions"], "index": 559}
{"HTML": ["https://duckdb.org/docs/sql/functions/window_functions"], "Title": ["last_value(expr[ IGNORE NULLS])"], "Feature": ["last_value(expr[ IGNORE NULLS])"], "Description": ["Returns expr evaluated at the row that is the last row (among rows with a non-null value of expr if IGNORE NULLS is set) of the window frame.", "Same type as expr"], "Examples": ["last_value(column)"], "Category": ["Window Functions"], "index": 560}
{"HTML": ["https://duckdb.org/docs/sql/functions/window_functions"], "Title": ["lead(column, 3, 0)"], "Feature": ["lead(column, 3, 0)"], "Description": ["lead(expr[, offset[, default]][ IGNORE NULLS])", "Returns expr evaluated at the row that is offset rows after the current row (among rows with a non-null value of expr if IGNORE NULLS is set) within the window frame; if there is no such row, instead return default (which must be of the Same type as expr). Both offset and default are evaluated with respect to the current row. If omitted, offset defaults to 1 and default to NULL.", "Same type as expr"], "Examples": [], "Category": ["Window Functions"], "index": 561}
{"HTML": ["https://duckdb.org/docs/sql/functions/window_functions"], "Title": ["nth_value(column, 2)"], "Feature": ["nth_value(column, 2)"], "Description": ["nth_value(expr, nth[ IGNORE NULLS])", "Returns expr evaluated at the nth row (among rows with a non-null value of expr if IGNORE NULLS is set) of the window frame (counting from 1); NULL if no such row.", "Same type as expr"], "Examples": [], "Category": ["Window Functions"], "index": 562}
{"HTML": ["https://duckdb.org/docs/sql/functions/window_functions"], "Title": ["ntile(num_buckets)"], "Feature": ["ntile(num_buckets)"], "Description": ["An integer ranging from 1 to num_buckets, dividing the partition as equally as possible.", "BIGINT"], "Examples": ["ntile(4)"], "Category": ["Window Functions"], "index": 563}
{"HTML": ["https://duckdb.org/docs/sql/functions/window_functions"], "Title": ["percent_rank()"], "Feature": ["percent_rank()"], "Description": ["The relative rank of the current row: (rank() - 1) / (total partition rows - 1).", "DOUBLE"], "Examples": ["percent_rank()"], "Category": ["Window Functions"], "index": 564}
{"HTML": ["https://duckdb.org/docs/sql/functions/window_functions"], "Title": ["rank_dense()"], "Feature": ["rank_dense()"], "Description": ["The rank of the current row with gaps; same as row_number of its first peer.", "BIGINT"], "Examples": ["rank_dense()"], "Category": ["Window Functions"], "index": 565}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["var_pop(x)"], "Feature": ["var_pop(x)"], "Description": ["The population variance, which does not include bias correction.", "(sum(x^2) - sum(x)^2 / count(x)) / count(x), var_samp(y, x) * (1 - 1 / count(x))"], "Examples": [], "Category": ["Aggregate Functions"], "index": 566}
{"HTML": ["https://duckdb.org/docs/sql/functions/window_functions"], "Title": ["rank()"], "Feature": ["rank()"], "Description": ["The rank of the current row with gaps; same as row_number of its first peer.", "BIGINT"], "Examples": ["rank()"], "Category": ["Window Functions"], "index": 567}
{"HTML": ["https://duckdb.org/docs/sql/functions/window_functions"], "Title": ["row_number()"], "Feature": ["row_number()"], "Description": ["The number of the current row within the partition, counting from 1.", "BIGINT"], "Examples": ["row_number()"], "Category": ["Window Functions"], "index": 568}
{"HTML": ["https://duckdb.org/docs/sql/functions/window_functions"], "Title": ["lag(column, 3, 0)"], "Feature": ["lag(column, 3, 0)"], "Description": ["lag(expr[, offset[, default]][ IGNORE NULLS])", "Returns expr evaluated at the row that is offset rows (among rows with a non-null value of expr if IGNORE NULLS is set) before the current row within the window frame; if there is no such row, instead return default (which must be of the Same type as expr). Both offset and default are evaluated with respect to the current row. If omitted, offset defaults to 1 and default to NULL.", "Same type as expr"], "Examples": [], "Category": ["Window Functions"], "index": 569}
{"HTML": ["https://duckdb.org/docs/sql/functions/window_functions"], "Title": ["lead(column, 3, 0)"], "Feature": ["lead(column, 3, 0)"], "Description": ["lead(expr[, offset[, default]][ IGNORE NULLS])", "Returns expr evaluated at the row that is offset rows after the current row (among rows with a non-null value of expr if IGNORE NULLS is set) within the window frame; if there is no such row, instead return default (which must be of the Same type as expr). Both offset and default are evaluated with respect to the current row. If omitted, offset defaults to 1 and default to NULL.", "Same type as expr"], "Examples": [], "Category": ["Window Functions"], "index": 570}
{"HTML": ["https://duckdb.org/docs/sql/functions/window_functions"], "Title": ["nth_value(column, 2)"], "Feature": ["nth_value(column, 2)"], "Description": ["nth_value(expr, nth[ IGNORE NULLS])", "Returns expr evaluated at the nth row (among rows with a non-null value of expr if IGNORE NULLS is set) of the window frame (counting from 1); NULL if no such row.", "Same type as expr"], "Examples": [], "Category": ["Window Functions"], "index": 571}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["variance(arg, val)"], "Feature": ["variance(arg, val)"], "Description": ["var_samp(x)", "The sample variance, which includes Bessel's bias correction.", "(sum(x^2) - sum(x)^2 / count(x)) / (count(x) - 1), var_pop(y, x) / (1 - 1 / count(x))"], "Examples": [], "Category": ["Aggregate Functions"], "index": 572}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["grouping()"], "Feature": ["grouping()"], "Description": ["For queries with GROUP BY and either ROLLUP or GROUPING SETS: Returns an integer identifying which of the argument expressions where used to group on to create the current supper-aggregate row."], "Examples": [], "Category": ["Aggregate Functions"], "index": 573}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["first(A)"], "Feature": ["first(A)"], "Description": ["arbitrary(arg)", "Returns the first value (null or non-null) from arg. This function is affected by ordering."], "Examples": ["arbitrary(A)"], "Category": ["Aggregate Functions"], "index": 574}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["argMax(arg, val)"], "Feature": ["argMax(arg, val)"], "Description": ["arg_max(arg, val)", "Finds the row with the maximum val. Calculates the arg expression at that row. This function is affected by ordering."], "Examples": ["arg_max(A, B)"], "Category": ["Aggregate Functions"], "index": 575}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["argMax(arg, val, n)"], "Feature": ["argMax(arg, val, n)"], "Description": ["arg_max(arg, val, n)", "Returns a LIST containing the arg expressions for the \"top\" n rows ordered by val descending."], "Examples": ["arg_max(A, B, 2)"], "Category": ["Aggregate Functions"], "index": 576}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["argMin(arg, val)"], "Feature": ["argMin(arg, val)"], "Description": ["arg_min(arg, val)", "Finds the row with the minimum val. Calculates the arg expression at that row. This function is affected by ordering."], "Examples": ["arg_min(A, B)"], "Category": ["Aggregate Functions"], "index": 577}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["argMin(arg, val, n)"], "Feature": ["argMin(arg, val, n)"], "Description": ["arg_min(arg, val, n)", "Returns a LIST containing the arg expressions for the \"bottom\" n rows ordered by val ascending."], "Examples": ["arg_min(A, B, 2)"], "Category": ["Aggregate Functions"], "index": 578}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["list"], "Feature": ["list"], "Description": ["array_agg(arg)", "Returns a LIST containing all the values of a column. This function is affected by ordering."], "Examples": ["array_agg(A)"], "Category": ["Aggregate Functions"], "index": 579}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["mean"], "Feature": ["mean"], "Description": ["avg(arg)", "Calculates the average of all non-null values in arg."], "Examples": ["avg(A)"], "Category": ["Aggregate Functions"], "index": 580}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["list"], "Feature": ["list"], "Description": ["array_agg(arg)", "Returns a LIST containing all the values of a column. This function is affected by ordering."], "Examples": ["array_agg(A)"], "Category": ["Aggregate Functions"], "index": 581}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["count(*)"], "Feature": ["count(*)"], "Description": ["count()", "Returns the number of rows in a group."], "Examples": ["count()"], "Category": ["Aggregate Functions"], "index": 582}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["arbitrary(A)"], "Feature": ["arbitrary(A)"], "Description": ["first(arg)", "Returns the first value (null or non-null) from arg. This function is affected by ordering."], "Examples": ["first(A)"], "Category": ["Aggregate Functions"], "index": 583}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["kahan_sum"], "Feature": ["kahan_sum"], "Description": ["sumKahan", "fsum(arg)", "Calculates the sum using a more accurate floating point summation (Kahan Sum)."], "Examples": ["fsum(A)"], "Category": ["Aggregate Functions"], "index": 584}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["kahan_sum"], "Feature": ["kahan_sum"], "Description": ["sumKahan", "fsum(arg)", "Calculates the sum using a more accurate floating point summation (Kahan Sum)."], "Examples": ["fsum(A)"], "Category": ["Aggregate Functions"], "index": 585}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["geometric_mean(A)"], "Feature": ["geometric_mean(A)"], "Description": ["geomean(arg)", "Calculates the geometric mean of all non-null values in arg."], "Examples": ["geomean(A)"], "Category": ["Aggregate Functions"], "index": 586}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["array_agg"], "Feature": ["array_agg"], "Description": ["list(arg)", "Returns a LIST containing all the values of a column. This function is affected by ordering."], "Examples": ["list(A)"], "Category": ["Aggregate Functions"], "index": 587}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["listagg(arg, sep)"], "Feature": ["listagg(arg, sep)"], "Description": ["group_concat(arg, sep)", "string_agg(arg, sep)", "Concatenates the column string values with a separator. This function is affected by ordering."], "Examples": ["string_agg(S, ',')"], "Category": ["Aggregate Functions"], "index": 588}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["listagg(arg, sep)"], "Feature": ["listagg(arg, sep)"], "Description": ["group_concat(arg, sep)", "string_agg(arg, sep)", "Concatenates the column string values with a separator. This function is affected by ordering."], "Examples": ["string_agg(S, ',')"], "Category": ["Aggregate Functions"], "index": 589}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["quantile"], "Feature": ["quantile"], "Description": ["quantile_disc(x, pos)", "The discrete pos-quantile of x for 0 <= pos <= 1, i.e., orders the values of x and returns the greatest(ceil(pos * n_nonnull_values) - 1, 0)th (zero-indexed) element. If pos is a LIST of FLOATs, then the result is a LIST of the corresponding discrete quantiles.", "-"], "Examples": [], "Category": ["Aggregate Functions"], "index": 590}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["stddev(x)"], "Feature": ["stddev(x)"], "Description": ["stddev_samp(x)", "The sample standard deviation.", "sqrt(var_samp(x))"], "Examples": [], "Category": ["Aggregate Functions"], "index": 591}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["mean"], "Feature": ["mean"], "Description": ["avg(arg)", "Calculates the average of all non-null values in arg."], "Examples": ["avg(A)"], "Category": ["Aggregate Functions"], "index": 592}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["variance(arg, val)"], "Feature": ["variance(arg, val)"], "Description": ["var_samp(x)", "The sample variance, which includes Bessel's bias correction.", "(sum(x^2) - sum(x)^2 / count(x)) / (count(x) - 1), var_pop(y, x) / (1 - 1 / count(x))"], "Examples": [], "Category": ["Aggregate Functions"], "index": 593}
{"HTML": ["https://duckdb.org/docs/sql/functions/array"], "Title": ["array_value(index)"], "Feature": ["array_value(index)"], "Description": ["Create an ARRAY containing the argument values."], "Examples": ["array_value(1.0::FLOAT, 2.0::FLOAT, 3.0::FLOAT)"], "Category": ["Array Functions"], "index": 594}
{"HTML": ["https://duckdb.org/docs/sql/functions/array"], "Title": ["array_cross_product(array1, array2)"], "Feature": ["array_cross_product(array1, array2)"], "Description": ["Compute the cross product of two arrays of size 3. The array elements can not be NULL."], "Examples": ["array_cross_product(array_value(1.0::FLOAT, 2.0::FLOAT, 3.0::FLOAT), array_value(2.0::FLOAT, 3.0::FLOAT, 4.0::FLOAT))"], "Category": ["Array Functions"], "index": 595}
{"HTML": ["https://duckdb.org/docs/sql/functions/array"], "Title": ["array_cosine_similarity(array1, array2)"], "Feature": ["array_cosine_similarity(array1, array2)"], "Description": ["Compute the cosine similarity between two arrays of the same size. The array elements can not be NULL. The arrays can have any size as long as the size is the same for both arguments."], "Examples": ["array_cosine_similarity(array_value(1.0::FLOAT, 2.0::FLOAT, 3.0::FLOAT), array_value(2.0::FLOAT, 3.0::FLOAT, 4.0::FLOAT))"], "Category": ["Array Functions"], "index": 596}
{"HTML": ["https://duckdb.org/docs/sql/functions/array"], "Title": ["array_cosine_distance(array1, array2)"], "Feature": ["array_cosine_distance(array1, array2)"], "Description": ["Compute the cosine distance between two arrays of the same size. The array elements can not be NULL. The arrays can have any size as long as the size is the same for both arguments. This is equivalent to 1.0 - array_cosine_similarity", "Compute the cosine distance between two arrays of the same size. The array elements can not be NULL. The arrays can have any size as long as the size is the same for both arguments. This is equivalent to 1.0 - array_cosine_similarity."], "Examples": ["array_cosine_distance(array_value(1.0::FLOAT, 2.0::FLOAT, 3.0::FLOAT), array_value(2.0::FLOAT, 3.0::FLOAT, 4.0::FLOAT))"], "Category": ["Array Functions"], "index": 597}
{"HTML": ["https://duckdb.org/docs/sql/functions/array"], "Title": ["array_distance(array1, array2)"], "Feature": ["array_distance(array1, array2)"], "Description": ["Compute the distance between two arrays of the same size. The array elements can not be NULL. The arrays can have any size as long as the size is the same for both arguments."], "Examples": ["array_distance(array_value(1.0::FLOAT, 2.0::FLOAT, 3.0::FLOAT), array_value(2.0::FLOAT, 3.0::FLOAT, 4.0::FLOAT))"], "Category": ["Array Functions"], "index": 598}
{"HTML": ["https://duckdb.org/docs/sql/functions/array"], "Title": ["array_inner_product(array1, array2)"], "Feature": ["array_inner_product(array1, array2)"], "Description": ["Compute the inner product between two arrays of the same size. The array elements can not be NULL. The arrays can have any size as long as the size is the same for both arguments."], "Examples": ["array_inner_product(array_value(1.0::FLOAT, 2.0::FLOAT, 3.0::FLOAT), array_value(2.0::FLOAT, 3.0::FLOAT, 4.0::FLOAT))"], "Category": ["Array Functions"], "index": 599}
{"HTML": ["https://duckdb.org/docs/sql/functions/array"], "Title": ["array_negative_inner_product(array1, array2)"], "Feature": ["array_negative_inner_product(array1, array2)"], "Description": ["Compute the negative inner product between two arrays of the same size. The array elements can not be NULL. The arrays can have any size as long as the size is the same for both arguments. This is equivalent to -array_inner_product"], "Examples": ["array_inner_product(array_value(1.0::FLOAT, 2.0::FLOAT, 3.0::FLOAT), array_value(2.0::FLOAT, 3.0::FLOAT, 4.0::FLOAT))"], "Category": ["Array Functions"], "index": 600}
{"HTML": ["https://duckdb.org/docs/sql/functions/array"], "Title": ["array_dot_product(array1, array2)"], "Feature": ["array_dot_product(array1, array2)"], "Description": ["Alias for array_inner_product(array1, array2)."], "Examples": ["array_dot_product(l1, l2)"], "Category": ["Array Functions"], "index": 601}
{"HTML": ["https://duckdb.org/docs/sql/functions/array"], "Title": ["array_negative_dot_product(array1, array2)"], "Feature": ["array_negative_dot_product(array1, array2)"], "Description": ["Alias for array_negative_inner_product(array1, array2)."], "Examples": ["array_negative_dot_product(l1, l2)"], "Category": ["Array Functions"], "index": 602}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["bit_and(arg)"], "Feature": ["bit_and(arg)"], "Description": ["Returns the bitwise AND of all bits in a given expression."], "Examples": ["bit_and(A)"], "Category": ["Aggregate Functions"], "index": 603}
{"HTML": ["https://duckdb.org/docs/sql/functions/bitstring"], "Title": ["bit_count(bitstring)"], "Feature": ["bit_count(bitstring)"], "Description": ["Returns the number of set bits in the bitstring."], "Examples": ["bit_count('1101011'::BITSTRING)"], "Category": ["Bitstring Functions"], "index": 604}
{"HTML": ["https://duckdb.org/docs/sql/functions/bitstring"], "Title": ["bit_length(bitstring)"], "Feature": ["bit_length(bitstring)"], "Description": ["Returns the number of bits in the bitstring."], "Examples": ["bit_length('1101011'::BITSTRING)"], "Category": ["Bitstring Functions"], "index": 605}
{"HTML": ["https://duckdb.org/docs/sql/functions/bitstring"], "Title": ["bit_position(substring, bitstring)"], "Feature": ["bit_position(substring, bitstring)"], "Description": ["Returns first starting index of the specified substring within bits, or zero if it's not present. The first (leftmost) bit is indexed 1.", "Returns first starting index of the specified substring within bits, or zero if it's not present. The first (leftmost) bit is indexed 1"], "Examples": ["bit_position('010'::BITSTRING, '1110101'::BITSTRING)"], "Category": ["Bitstring Functions"], "index": 606}
{"HTML": ["https://duckdb.org/docs/sql/functions/bitstring"], "Title": ["bitstring(bitstring, length)"], "Feature": ["bitstring(bitstring, length)"], "Description": ["Returns a bitstring of determined length."], "Examples": ["bitstring('1010'::BITSTRING, 7)"], "Category": ["Bitstring Functions"], "index": 607}
{"HTML": ["https://duckdb.org/docs/sql/functions/bitstring"], "Title": ["get_bit(bitstring, index)"], "Feature": ["get_bit(bitstring, index)"], "Description": ["Extracts the nth bit from bitstring; the first (leftmost) bit is indexed 0."], "Examples": ["get_bit('0110010'::BITSTRING, 2)"], "Category": ["Bitstring Functions"], "index": 608}
{"HTML": ["https://duckdb.org/docs/sql/functions/bitstring"], "Title": ["length(bitstring)"], "Feature": ["length(bitstring)"], "Description": ["Alias for bit_length."], "Examples": ["length('1101011'::BITSTRING)"], "Category": ["Bitstring Functions"], "index": 609}
{"HTML": ["https://duckdb.org/docs/sql/functions/bitstring"], "Title": ["octet_length(bitstring)"], "Feature": ["octet_length(bitstring)"], "Description": ["Returns the number of bytes in the bitstring."], "Examples": ["octet_length('1101011'::BITSTRING)"], "Category": ["Bitstring Functions"], "index": 610}
{"HTML": ["https://duckdb.org/docs/sql/functions/bitstring"], "Title": ["set_bit(bitstring, index, new_value)"], "Feature": ["set_bit(bitstring, index, new_value)"], "Description": ["Sets the nth bit in bitstring to newvalue; the first (leftmost) bit is indexed 0. Returns a new bitstring."], "Examples": ["set_bit('0110010'::BITSTRING, 2, 0)"], "Category": ["Bitstring Functions"], "index": 611}
{"HTML": ["https://duckdb.org/docs/sql/functions/bitstring"], "Title": ["bit_and(arg)"], "Feature": ["bit_and(arg)"], "Description": ["Returns the bitwise AND operation performed on all bitstrings in a given expression."], "Examples": ["bit_and(A)"], "Category": ["Bitstring Functions"], "index": 612}
{"HTML": ["https://duckdb.org/docs/sql/functions/bitstring"], "Title": ["bit_or(arg)"], "Feature": ["bit_or(arg)"], "Description": ["Returns the bitwise OR operation performed on all bitstrings in a given expression."], "Examples": ["bit_or(A)"], "Category": ["Bitstring Functions"], "index": 613}
{"HTML": ["https://duckdb.org/docs/sql/functions/aggregates"], "Title": ["bit_or(arg)"], "Feature": ["bit_or(arg)"], "Description": ["Returns the bitwise OR of all bits in a given expression."], "Examples": ["bit_or(A)"], "Category": ["Aggregate Functions"], "index": 614}
