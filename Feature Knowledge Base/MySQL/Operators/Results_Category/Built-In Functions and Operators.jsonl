{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "&", "Description": ["\n&\n", "\n          Bitwise AND.\n        ", "\n          The result type depends on whether the arguments are evaluated\n          as binary strings or numbers:\n", "\n\n              Binary-string evaluation occurs when the arguments have a\n              binary string type, and at least one of them is not a\n              hexadecimal literal, bit literal, or\n              NULL literal. Numeric evaluation occurs\n              otherwise, with argument conversion to unsigned 64-bit\n              integers as necessary.\n            \n              Binary-string evaluation produces a binary string of the\n              same length as the arguments. If the arguments have\n              unequal lengths, an\n              ER_INVALID_BITWISE_OPERANDS_SIZE\n              error occurs. Numeric evaluation produces an unsigned\n              64-bit integer.\n\n", "\n          For more information, see the introductory discussion in this\n          section.\n        ", "Press CTRL+C to copy mysql> SELECT 29 & 15;\n        -> 13\nmysql> SELECT HEX(_binary X'FF' & b'11110000');\n        -> 'F0'", "\n          If bitwise AND is invoked from within the\n          mysql client, binary string results display\n          using hexadecimal notation, depending on the value of the\n          --binary-as-hex. For more\n          information about that option, see Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/bit-functions.html#operator_bitwise-and", "Feature": ["&"], "Examples": ["mysql> SELECT 29 & 15;\n        -> 13\nmysql> SELECT HEX(_binary X'FF' & b'11110000');\n        -> 'F0'"], "Category": ["Built-In Functions and Operators", "Bit Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": ">", "Description": ["\n>\n", "\n            Greater than:\n          ", "Press CTRL+C to copy mysql> SELECT 2 > 2;\n        -> 0", "\n            For row comparisons, (a, b) > (x, y)\n            is equivalent to:\n          ", "Press CTRL+C to copy (a > x) OR ((a = x) AND (b > y))"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html#operator_greater-than", "Feature": [">"], "Examples": ["mysql> SELECT 2 > 2;\n        -> 0"], "Category": ["Built-In Functions and Operators", "Comparison Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "*", "Description": ["\n*\n", "\n            Multiplication:\n          ", "Press CTRL+C to copy mysql> SELECT 3*5;\n        -> 15\nmysql> SELECT 18014398509481984*18014398509481984.0;\n        -> 324518553658426726783156020576256.0\nmysql> SELECT 18014398509481984*18014398509481984;\n        -> out-of-range error", "\n            The last expression produces an error because the result of\n            the integer multiplication exceeds the 64-bit range of\n            BIGINT calculations. (See\n            Section\u00a013.1, \u201cNumeric Data Types\u201d.)\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/arithmetic-functions.html#operator_times", "Feature": ["*"], "Examples": ["mysql> SELECT 3*5;\n        -> 15\nmysql> SELECT 18014398509481984*18014398509481984.0;\n        -> 324518553658426726783156020576256.0\nmysql> SELECT 18014398509481984*18014398509481984;\n        -> out-of-range error"], "Category": ["Built-In Functions and Operators", "Arithmetic Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "+", "Description": ["\n+\n", "\n            Addition:\n          ", "Press CTRL+C to copy mysql> SELECT 3+5;\n        -> 8"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/arithmetic-functions.html#operator_plus", "Feature": ["+"], "Examples": ["mysql> SELECT 3+5;\n        -> 8"], "Category": ["Built-In Functions and Operators", "Arithmetic Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "-", "Description": ["\n-\n", "\n            Subtraction:\n          ", "Press CTRL+C to copy mysql> SELECT 3-5;\n        -> -2"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/arithmetic-functions.html#operator_minus", "Feature": ["-"], "Examples": ["mysql> SELECT 3-5;\n        -> -2"], "Category": ["Built-In Functions and Operators", "Arithmetic Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "-", "Description": ["\n-\n", "\n            Unary minus. This operator changes the sign of the operand.\n          ", "Press CTRL+C to copy mysql> SELECT - 2;\n        -> -2", "\n\nNote\n\n\n              If this operator is used with a\n              BIGINT, the return value is\n              also a BIGINT. This means\n              that you should avoid using - on\n              integers that may have the value of\n              \u2212263.\n\n"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/arithmetic-functions.html#operator_unary-minus", "Feature": ["-"], "Examples": ["mysql> SELECT - 2;\n        -> -2"], "Category": ["Built-In Functions and Operators", "Arithmetic Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "->", "Description": ["\ncolumn->path\n", "\n          The\n          ->\n          operator serves as an alias for the\n          JSON_EXTRACT() function when\n          used with two arguments, a column identifier on the left and a\n          JSON path (a string literal) on the right that is evaluated\n          against the JSON document (the column value). You can use such\n          expressions in place of column references wherever they occur\n          in SQL statements.\n        ", "\n          The two SELECT statements shown\n          here produce the same output:\n        ", "Press CTRL+C to copy mysql> SELECT c, JSON_EXTRACT(c, \"$.id\"), g\n     > FROM jemp\n     > WHERE JSON_EXTRACT(c, \"$.id\") > 1\n     > ORDER BY JSON_EXTRACT(c, \"$.name\");\n+-------------------------------+-----------+------+\n| c                             | c->\"$.id\" | g    |\n+-------------------------------+-----------+------+\n| {\"id\": \"3\", \"name\": \"Barney\"} | \"3\"       |    3 |\n| {\"id\": \"4\", \"name\": \"Betty\"}  | \"4\"       |    4 |\n| {\"id\": \"2\", \"name\": \"Wilma\"}  | \"2\"       |    2 |\n+-------------------------------+-----------+------+\n3 rows in set (0.00 sec)\n\nmysql> SELECT c, c->\"$.id\", g\n     > FROM jemp\n     > WHERE c->\"$.id\" > 1\n     > ORDER BY c->\"$.name\";\n+-------------------------------+-----------+------+\n| c                             | c->\"$.id\" | g    |\n+-------------------------------+-----------+------+\n| {\"id\": \"3\", \"name\": \"Barney\"} | \"3\"       |    3 |\n| {\"id\": \"4\", \"name\": \"Betty\"}  | \"4\"       |    4 |\n| {\"id\": \"2\", \"name\": \"Wilma\"}  | \"2\"       |    2 |\n+-------------------------------+-----------+------+\n3 rows in set (0.00 sec)", "\n          This functionality is not limited to\n          SELECT, as shown here:\n        ", "Press CTRL+C to copy mysql> ALTER TABLE jemp ADD COLUMN n INT;\nQuery OK, 0 rows affected (0.68 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> UPDATE jemp SET n=1 WHERE c->\"$.id\" = \"4\";\nQuery OK, 1 row affected (0.04 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> SELECT c, c->\"$.id\", g, n\n     > FROM jemp\n     > WHERE JSON_EXTRACT(c, \"$.id\") > 1\n     > ORDER BY c->\"$.name\";\n+-------------------------------+-----------+------+------+\n| c                             | c->\"$.id\" | g    | n    |\n+-------------------------------+-----------+------+------+\n| {\"id\": \"3\", \"name\": \"Barney\"} | \"3\"       |    3 | NULL |\n| {\"id\": \"4\", \"name\": \"Betty\"}  | \"4\"       |    4 |    1 |\n| {\"id\": \"2\", \"name\": \"Wilma\"}  | \"2\"       |    2 | NULL |\n+-------------------------------+-----------+------+------+\n3 rows in set (0.00 sec)\n\nmysql> DELETE FROM jemp WHERE c->\"$.id\" = \"4\";\nQuery OK, 1 row affected (0.04 sec)\n\nmysql> SELECT c, c->\"$.id\", g, n\n     > FROM jemp\n     > WHERE JSON_EXTRACT(c, \"$.id\") > 1\n     > ORDER BY c->\"$.name\";\n+-------------------------------+-----------+------+------+\n| c                             | c->\"$.id\" | g    | n    |\n+-------------------------------+-----------+------+------+\n| {\"id\": \"3\", \"name\": \"Barney\"} | \"3\"       |    3 | NULL |\n| {\"id\": \"2\", \"name\": \"Wilma\"}  | \"2\"       |    2 | NULL |\n+-------------------------------+-----------+------+------+\n2 rows in set (0.00 sec)", "\n          (See Indexing a Generated Column to Provide a JSON Column Index, for the\n          statements used to create and populate the table just shown.)\n        ", "\n          This also works with JSON array values, as shown here:\n        ", "Press CTRL+C to copy mysql> CREATE TABLE tj10 (a JSON, b INT);\nQuery OK, 0 rows affected (0.26 sec)\n\nmysql> INSERT INTO tj10\n     > VALUES (\"[3,10,5,17,44]\", 33), (\"[3,10,5,17,[22,44,66]]\", 0);\nQuery OK, 1 row affected (0.04 sec)\n\nmysql> SELECT a->\"$[4]\" FROM tj10;\n+--------------+\n| a->\"$[4]\"    |\n+--------------+\n| 44           |\n| [22, 44, 66] |\n+--------------+\n2 rows in set (0.00 sec)\n\nmysql> SELECT * FROM tj10 WHERE a->\"$[0]\" = 3;\n+------------------------------+------+\n| a                            | b    |\n+------------------------------+------+\n| [3, 10, 5, 17, 44]           |   33 |\n| [3, 10, 5, 17, [22, 44, 66]] |    0 |\n+------------------------------+------+\n2 rows in set (0.00 sec)", "\n          Nested arrays are supported. An expression using\n          -> evaluates as NULL\n          if no matching key is found in the target JSON document, as\n          shown here:\n        ", "Press CTRL+C to copy mysql> SELECT * FROM tj10 WHERE a->\"$[4][1]\" IS NOT NULL;\n+------------------------------+------+\n| a                            | b    |\n+------------------------------+------+\n| [3, 10, 5, 17, [22, 44, 66]] |    0 |\n+------------------------------+------+\n\nmysql> SELECT a->\"$[4][1]\" FROM tj10;\n+--------------+\n| a->\"$[4][1]\" |\n+--------------+\n| NULL         |\n| 44           |\n+--------------+\n2 rows in set (0.00 sec)", "\n          This is the same behavior as seen in such cases when using\n          JSON_EXTRACT():\n        ", "Press CTRL+C to copy mysql> SELECT JSON_EXTRACT(a, \"$[4][1]\") FROM tj10;\n+----------------------------+\n| JSON_EXTRACT(a, \"$[4][1]\") |\n+----------------------------+\n| NULL                       |\n| 44                         |\n+----------------------------+\n2 rows in set (0.00 sec)"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/json-search-functions.html#operator_json-column-path", "Feature": ["column->path"], "Examples": ["mysql> SELECT c, JSON_EXTRACT(c, \"$.id\"), g\n     > FROM jemp\n     > WHERE JSON_EXTRACT(c, \"$.id\") > 1\n     > ORDER BY JSON_EXTRACT(c, \"$.name\");\n+-------------------------------+-----------+------+\n| c                             | c->\"$.id\" | g    |\n+-------------------------------+-----------+------+\n| {\"id\": \"3\", \"name\": \"Barney\"} | \"3\"       |    3 |\n| {\"id\": \"4\", \"name\": \"Betty\"}  | \"4\"       |    4 |\n| {\"id\": \"2\", \"name\": \"Wilma\"}  | \"2\"       |    2 |\n+-------------------------------+-----------+------+\n3 rows in set (0.00 sec)\n\nmysql> SELECT c, c->\"$.id\", g\n     > FROM jemp\n     > WHERE c->\"$.id\" > 1\n     > ORDER BY c->\"$.name\";\n+-------------------------------+-----------+------+\n| c                             | c->\"$.id\" | g    |\n+-------------------------------+-----------+------+\n| {\"id\": \"3\", \"name\": \"Barney\"} | \"3\"       |    3 |\n| {\"id\": \"4\", \"name\": \"Betty\"}  | \"4\"       |    4 |\n| {\"id\": \"2\", \"name\": \"Wilma\"}  | \"2\"       |    2 |\n+-------------------------------+-----------+------+\n3 rows in set (0.00 sec)", "mysql> ALTER TABLE jemp ADD COLUMN n INT;\nQuery OK, 0 rows affected (0.68 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> UPDATE jemp SET n=1 WHERE c->\"$.id\" = \"4\";\nQuery OK, 1 row affected (0.04 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> SELECT c, c->\"$.id\", g, n\n     > FROM jemp\n     > WHERE JSON_EXTRACT(c, \"$.id\") > 1\n     > ORDER BY c->\"$.name\";\n+-------------------------------+-----------+------+------+\n| c                             | c->\"$.id\" | g    | n    |\n+-------------------------------+-----------+------+------+\n| {\"id\": \"3\", \"name\": \"Barney\"} | \"3\"       |    3 | NULL |\n| {\"id\": \"4\", \"name\": \"Betty\"}  | \"4\"       |    4 |    1 |\n| {\"id\": \"2\", \"name\": \"Wilma\"}  | \"2\"       |    2 | NULL |\n+-------------------------------+-----------+------+------+\n3 rows in set (0.00 sec)\n\nmysql> DELETE FROM jemp WHERE c->\"$.id\" = \"4\";\nQuery OK, 1 row affected (0.04 sec)\n\nmysql> SELECT c, c->\"$.id\", g, n\n     > FROM jemp\n     > WHERE JSON_EXTRACT(c, \"$.id\") > 1\n     > ORDER BY c->\"$.name\";\n+-------------------------------+-----------+------+------+\n| c                             | c->\"$.id\" | g    | n    |\n+-------------------------------+-----------+------+------+\n| {\"id\": \"3\", \"name\": \"Barney\"} | \"3\"       |    3 | NULL |\n| {\"id\": \"2\", \"name\": \"Wilma\"}  | \"2\"       |    2 | NULL |\n+-------------------------------+-----------+------+------+\n2 rows in set (0.00 sec)", "mysql> CREATE TABLE tj10 (a JSON, b INT);\nQuery OK, 0 rows affected (0.26 sec)\n\nmysql> INSERT INTO tj10\n     > VALUES (\"[3,10,5,17,44]\", 33), (\"[3,10,5,17,[22,44,66]]\", 0);\nQuery OK, 1 row affected (0.04 sec)\n\nmysql> SELECT a->\"$[4]\" FROM tj10;\n+--------------+\n| a->\"$[4]\"    |\n+--------------+\n| 44           |\n| [22, 44, 66] |\n+--------------+\n2 rows in set (0.00 sec)\n\nmysql> SELECT * FROM tj10 WHERE a->\"$[0]\" = 3;\n+------------------------------+------+\n| a                            | b    |\n+------------------------------+------+\n| [3, 10, 5, 17, 44]           |   33 |\n| [3, 10, 5, 17, [22, 44, 66]] |    0 |\n+------------------------------+------+\n2 rows in set (0.00 sec)", "mysql> SELECT * FROM tj10 WHERE a->\"$[4][1]\" IS NOT NULL;\n+------------------------------+------+\n| a                            | b    |\n+------------------------------+------+\n| [3, 10, 5, 17, [22, 44, 66]] |    0 |\n+------------------------------+------+\n\nmysql> SELECT a->\"$[4][1]\" FROM tj10;\n+--------------+\n| a->\"$[4][1]\" |\n+--------------+\n| NULL         |\n| 44           |\n+--------------+\n2 rows in set (0.00 sec)", "mysql> SELECT JSON_EXTRACT(a, \"$[4][1]\") FROM tj10;\n+----------------------------+\n| JSON_EXTRACT(a, \"$[4][1]\") |\n+----------------------------+\n| NULL                       |\n| 44                         |\n+----------------------------+\n2 rows in set (0.00 sec)"], "Category": ["Built-In Functions and Operators", "JSON Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "->>", "Description": ["\ncolumn->>path\n", "\n          This is an improved, unquoting extraction operator. Whereas\n          the -> operator simply extracts a value,\n          the ->> operator in addition unquotes\n          the extracted result. In other words, given a\n          JSON column value\n          column and a path expression\n          path (a string literal), the\n          following three expressions return the same value:\n", "\n\nJSON_UNQUOTE(\nJSON_EXTRACT(column,\n              path) )\n\nJSON_UNQUOTE(column\n->\npath)\n\ncolumn->>path\n\n", "\n          The ->> operator can be used wherever\n          JSON_UNQUOTE(JSON_EXTRACT()) would be\n          allowed. This includes (but is not limited to)\n          SELECT lists, WHERE and\n          HAVING clauses, and ORDER\n          BY and GROUP BY clauses.\n        ", "\n          The next few statements demonstrate some\n          ->> operator equivalences with other\n          expressions in the mysql client:\n        ", "Press CTRL+C to copy mysql> SELECT * FROM jemp WHERE g > 2;\n+-------------------------------+------+\n| c                             | g    |\n+-------------------------------+------+\n| {\"id\": \"3\", \"name\": \"Barney\"} |    3 |\n| {\"id\": \"4\", \"name\": \"Betty\"}  |    4 |\n+-------------------------------+------+\n2 rows in set (0.01 sec)\n\nmysql> SELECT c->'$.name' AS name\n    ->     FROM jemp WHERE g > 2;\n+----------+\n| name     |\n+----------+\n| \"Barney\" |\n| \"Betty\"  |\n+----------+\n2 rows in set (0.00 sec)\n\nmysql> SELECT JSON_UNQUOTE(c->'$.name') AS name\n    ->     FROM jemp WHERE g > 2;\n+--------+\n| name   |\n+--------+\n| Barney |\n| Betty  |\n+--------+\n2 rows in set (0.00 sec)\n\nmysql> SELECT c->>'$.name' AS name\n    ->     FROM jemp WHERE g > 2;\n+--------+\n| name   |\n+--------+\n| Barney |\n| Betty  |\n+--------+\n2 rows in set (0.00 sec)", "\n          See Indexing a Generated Column to Provide a JSON Column Index, for the SQL\n          statements used to create and populate the\n          jemp table in the set of examples just\n          shown.\n        ", "\n          This operator can also be used with JSON arrays, as shown\n          here:\n        ", "Press CTRL+C to copy mysql> CREATE TABLE tj10 (a JSON, b INT);\nQuery OK, 0 rows affected (0.26 sec)\n\nmysql> INSERT INTO tj10 VALUES\n    ->     ('[3,10,5,\"x\",44]', 33),\n    ->     ('[3,10,5,17,[22,\"y\",66]]', 0);\nQuery OK, 2 rows affected (0.04 sec)\nRecords: 2  Duplicates: 0  Warnings: 0\n\nmysql> SELECT a->\"$[3]\", a->\"$[4][1]\" FROM tj10;\n+-----------+--------------+\n| a->\"$[3]\" | a->\"$[4][1]\" |\n+-----------+--------------+\n| \"x\"       | NULL         |\n| 17        | \"y\"          |\n+-----------+--------------+\n2 rows in set (0.00 sec)\n\nmysql> SELECT a->>\"$[3]\", a->>\"$[4][1]\" FROM tj10;\n+------------+---------------+\n| a->>\"$[3]\" | a->>\"$[4][1]\" |\n+------------+---------------+\n| x          | NULL          |\n| 17         | y             |\n+------------+---------------+\n2 rows in set (0.00 sec)", "\n          As with\n          ->,\n          the ->> operator is always expanded\n          in the output of EXPLAIN, as\n          the following example demonstrates:\n        ", "Press CTRL+C to copy mysql> EXPLAIN SELECT c->>'$.name' AS name\n    ->     FROM jemp WHERE g > 2\\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: jemp\n   partitions: NULL\n         type: range\npossible_keys: i\n          key: i\n      key_len: 5\n          ref: NULL\n         rows: 2\n     filtered: 100.00\n        Extra: Using where\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS\\G\n*************************** 1. row ***************************\n  Level: Note\n   Code: 1003\nMessage: /* select#1 */ select\njson_unquote(json_extract(`jtest`.`jemp`.`c`,'$.name')) AS `name` from\n`jtest`.`jemp` where (`jtest`.`jemp`.`g` > 2)\n1 row in set (0.00 sec)", "\n          This is similar to how MySQL expands the\n          ->\n          operator in the same circumstances.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/json-search-functions.html#operator_json-inline-path", "Feature": ["column->>path"], "Examples": ["mysql> SELECT * FROM jemp WHERE g > 2;\n+-------------------------------+------+\n| c                             | g    |\n+-------------------------------+------+\n| {\"id\": \"3\", \"name\": \"Barney\"} |    3 |\n| {\"id\": \"4\", \"name\": \"Betty\"}  |    4 |\n+-------------------------------+------+\n2 rows in set (0.01 sec)\n\nmysql> SELECT c->'$.name' AS name\n    ->     FROM jemp WHERE g > 2;\n+----------+\n| name     |\n+----------+\n| \"Barney\" |\n| \"Betty\"  |\n+----------+\n2 rows in set (0.00 sec)\n\nmysql> SELECT JSON_UNQUOTE(c->'$.name') AS name\n    ->     FROM jemp WHERE g > 2;\n+--------+\n| name   |\n+--------+\n| Barney |\n| Betty  |\n+--------+\n2 rows in set (0.00 sec)\n\nmysql> SELECT c->>'$.name' AS name\n    ->     FROM jemp WHERE g > 2;\n+--------+\n| name   |\n+--------+\n| Barney |\n| Betty  |\n+--------+\n2 rows in set (0.00 sec)", "mysql> CREATE TABLE tj10 (a JSON, b INT);\nQuery OK, 0 rows affected (0.26 sec)\n\nmysql> INSERT INTO tj10 VALUES\n    ->     ('[3,10,5,\"x\",44]', 33),\n    ->     ('[3,10,5,17,[22,\"y\",66]]', 0);\nQuery OK, 2 rows affected (0.04 sec)\nRecords: 2  Duplicates: 0  Warnings: 0\n\nmysql> SELECT a->\"$[3]\", a->\"$[4][1]\" FROM tj10;\n+-----------+--------------+\n| a->\"$[3]\" | a->\"$[4][1]\" |\n+-----------+--------------+\n| \"x\"       | NULL         |\n| 17        | \"y\"          |\n+-----------+--------------+\n2 rows in set (0.00 sec)\n\nmysql> SELECT a->>\"$[3]\", a->>\"$[4][1]\" FROM tj10;\n+------------+---------------+\n| a->>\"$[3]\" | a->>\"$[4][1]\" |\n+------------+---------------+\n| x          | NULL          |\n| 17         | y             |\n+------------+---------------+\n2 rows in set (0.00 sec)"], "Category": ["Built-In Functions and Operators", "JSON Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "/", "Description": ["\n/\n", "\n            Division:\n          ", "Press CTRL+C to copy mysql> SELECT 3/5;\n        -> 0.60", "\n            Division by zero produces a NULL result:\n          ", "Press CTRL+C to copy mysql> SELECT 102/(1-1);\n        -> NULL", "\n            A division is calculated with\n            BIGINT arithmetic only if\n            performed in a context where its result is converted to an\n            integer.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/arithmetic-functions.html#operator_divide", "Feature": ["/"], "Examples": ["mysql> SELECT 3/5;\n        -> 0.60", "mysql> SELECT 102/(1-1);\n        -> NULL"], "Category": ["Built-In Functions and Operators", "Arithmetic Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": ":=", "Description": ["\n:=\n", "\n            Assignment operator. Causes the user variable on the left\n            hand side of the operator to take on the value to its right.\n            The value on the right hand side may be a literal value,\n            another variable storing a value, or any legal expression\n            that yields a scalar value, including the result of a query\n            (provided that this value is a scalar value). You can\n            perform multiple assignments in the same\n            SET\n            statement. You can perform multiple assignments in the same\n            statement.\n          ", "\n            Unlike\n            =, the\n            :=\n            operator is never interpreted as a comparison operator. This\n            means you can use\n            := in\n            any valid SQL statement (not just in\n            SET\n            statements) to assign a value to a variable.\n          ", "Press CTRL+C to copy mysql> SELECT @var1, @var2;\n        -> NULL, NULL\nmysql> SELECT @var1 := 1, @var2;\n        -> 1, NULL\nmysql> SELECT @var1, @var2;\n        -> 1, NULL\nmysql> SELECT @var1, @var2 := @var1;\n        -> 1, 1\nmysql> SELECT @var1, @var2;\n        -> 1, 1\n\nmysql> SELECT @var1:=COUNT(*) FROM t1;\n        -> 4\nmysql> SELECT @var1;\n        -> 4", "\n            You can make value assignments using\n            := in\n            other statements besides\n            SELECT, such as\n            UPDATE, as shown here:\n          ", "Press CTRL+C to copy mysql> SELECT @var1;\n        -> 4\nmysql> SELECT * FROM t1;\n        -> 1, 3, 5, 7\n\nmysql> UPDATE t1 SET c1 = 2 WHERE c1 = @var1:= 1;\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> SELECT @var1;\n        -> 1\nmysql> SELECT * FROM t1;\n        -> 2, 3, 5, 7", "\n            While it is also possible both to set and to read the value\n            of the same variable in a single SQL statement using the\n            :=\n            operator, this is not recommended.\n            Section\u00a011.4, \u201cUser-Defined Variables\u201d, explains why you should\n            avoid doing this.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/assignment-operators.html#operator_assign-value", "Feature": [":="], "Examples": ["mysql> SELECT @var1, @var2;\n        -> NULL, NULL\nmysql> SELECT @var1 := 1, @var2;\n        -> 1, NULL\nmysql> SELECT @var1, @var2;\n        -> 1, NULL\nmysql> SELECT @var1, @var2 := @var1;\n        -> 1, 1\nmysql> SELECT @var1, @var2;\n        -> 1, 1\n\nmysql> SELECT @var1:=COUNT(*) FROM t1;\n        -> 4\nmysql> SELECT @var1;\n        -> 4", "mysql> SELECT @var1;\n        -> 4\nmysql> SELECT * FROM t1;\n        -> 1, 3, 5, 7\n\nmysql> UPDATE t1 SET c1 = 2 WHERE c1 = @var1:= 1;\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> SELECT @var1;\n        -> 1\nmysql> SELECT * FROM t1;\n        -> 2, 3, 5, 7"], "Category": ["Built-In Functions and Operators", "Assignment Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "=", "Description": ["\n=\n", "\n            This operator is used to perform value assignments in two\n            cases, described in the next two paragraphs.\n          ", "\n            Within a\n            SET\n            statement, = is treated as an assignment\n            operator that causes the user variable on the left hand side\n            of the operator to take on the value to its right. (In other\n            words, when used in a\n            SET\n            statement, = is treated identically to\n            :=.)\n            The value on the right hand side may be a literal value,\n            another variable storing a value, or any legal expression\n            that yields a scalar value, including the result of a query\n            (provided that this value is a scalar value). You can\n            perform multiple assignments in the same\n            SET\n            statement.\n          ", "\n            In the SET clause of an\n            UPDATE statement,\n            = also acts as an assignment operator; in\n            this case, however, it causes the column named on the left\n            hand side of the operator to assume the value given to the\n            right, provided any WHERE conditions that\n            are part of the UPDATE are\n            met. You can make multiple assignments in the same\n            SET clause of an\n            UPDATE statement.\n          ", "\n            In any other context, = is treated as a\n            comparison operator.\n          ", "Press CTRL+C to copy mysql> SELECT @var1, @var2;\n        -> NULL, NULL\nmysql> SELECT @var1 := 1, @var2;\n        -> 1, NULL\nmysql> SELECT @var1, @var2;\n        -> 1, NULL\nmysql> SELECT @var1, @var2 := @var1;\n        -> 1, 1\nmysql> SELECT @var1, @var2;\n        -> 1, 1", "\n            For more information, see Section\u00a015.7.6.1, \u201cSET Syntax for Variable Assignment\u201d,\n            Section\u00a015.2.17, \u201cUPDATE Statement\u201d, and Section\u00a015.2.15, \u201cSubqueries\u201d.\n"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/assignment-operators.html#operator_assign-equal", "Feature": ["="], "Examples": ["mysql> SELECT @var1, @var2;\n        -> NULL, NULL\nmysql> SELECT @var1 := 1, @var2;\n        -> 1, NULL\nmysql> SELECT @var1, @var2;\n        -> 1, NULL\nmysql> SELECT @var1, @var2 := @var1;\n        -> 1, 1\nmysql> SELECT @var1, @var2;\n        -> 1, 1"], "Category": ["Built-In Functions and Operators", "Assignment Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "=", "Description": ["\n=\n", "\n            Equal:\n          ", "Press CTRL+C to copy mysql> SELECT 1 = 0;\n        -> 0\nmysql> SELECT '0' = 0;\n        -> 1\nmysql> SELECT '0.0' = 0;\n        -> 1\nmysql> SELECT '0.01' = 0;\n        -> 0\nmysql> SELECT '.01' = 0.01;\n        -> 1", "\n            For row comparisons, (a, b) = (x, y) is\n            equivalent to:\n          ", "Press CTRL+C to copy (a = x) AND (b = y)"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html#operator_equal", "Feature": ["="], "Examples": ["mysql> SELECT 1 = 0;\n        -> 0\nmysql> SELECT '0' = 0;\n        -> 1\nmysql> SELECT '0.0' = 0;\n        -> 1\nmysql> SELECT '0.01' = 0;\n        -> 0\nmysql> SELECT '.01' = 0.01;\n        -> 1"], "Category": ["Built-In Functions and Operators", "Comparison Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": ">>", "Description": ["\n>>\n", "\n          Shifts a longlong (BIGINT)\n          number or binary string to the right.\n        ", "\n          The result type depends on whether the bit argument is\n          evaluated as a binary string or number:\n", "\n\n              Binary-string evaluation occurs when the bit argument has\n              a binary string type, and is not a hexadecimal literal,\n              bit literal, or NULL literal. Numeric\n              evaluation occurs otherwise, with argument conversion to\n              an unsigned 64-bit integer as necessary.\n            \n              Binary-string evaluation produces a binary string of the\n              same length as the bit argument. Numeric evaluation\n              produces an unsigned 64-bit integer.\n\n", "\n          Bits shifted off the end of the value are lost without\n          warning, regardless of the argument type. In particular, if\n          the shift count is greater or equal to the number of bits in\n          the bit argument, all bits in the result are 0.\n        ", "\n          For more information, see the introductory discussion in this\n          section.\n        ", "Press CTRL+C to copy mysql> SELECT 4 >> 2;\n        -> 1\nmysql> SELECT HEX(_binary X'00FF00FF00FF' >> 8);\n        -> '0000FF00FF00'", "\n          If a bit shift is invoked from within the\n          mysql client, binary string results display\n          using hexadecimal notation, depending on the value of the\n          --binary-as-hex. For more\n          information about that option, see Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/bit-functions.html#operator_right-shift", "Feature": [">>"], "Examples": ["mysql> SELECT 4 >> 2;\n        -> 1\nmysql> SELECT HEX(_binary X'00FF00FF00FF' >> 8);\n        -> '0000FF00FF00'"], "Category": ["Built-In Functions and Operators", "Bit Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "^", "Description": ["\n^\n", "\n          Bitwise XOR.\n        ", "\n          The result type depends on whether the arguments are evaluated\n          as binary strings or numbers:\n", "\n\n              Binary-string evaluation occurs when the arguments have a\n              binary string type, and at least one of them is not a\n              hexadecimal literal, bit literal, or\n              NULL literal. Numeric evaluation occurs\n              otherwise, with argument conversion to unsigned 64-bit\n              integers as necessary.\n            \n              Binary-string evaluation produces a binary string of the\n              same length as the arguments. If the arguments have\n              unequal lengths, an\n              ER_INVALID_BITWISE_OPERANDS_SIZE\n              error occurs. Numeric evaluation produces an unsigned\n              64-bit integer.\n\n", "\n          For more information, see the introductory discussion in this\n          section.\n        ", "Press CTRL+C to copy mysql> SELECT 1 ^ 1;\n        -> 0\nmysql> SELECT 1 ^ 0;\n        -> 1\nmysql> SELECT 11 ^ 3;\n        -> 8\nmysql> SELECT HEX(_binary X'FEDC' ^ X'1111');\n        -> 'EFCD'", "\n          If bitwise XOR is invoked from within the\n          mysql client, binary string results display\n          using hexadecimal notation, depending on the value of the\n          --binary-as-hex. For more\n          information about that option, see Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/bit-functions.html#operator_bitwise-xor", "Feature": ["^"], "Examples": ["mysql> SELECT 1 ^ 1;\n        -> 0\nmysql> SELECT 1 ^ 0;\n        -> 1\nmysql> SELECT 11 ^ 3;\n        -> 8\nmysql> SELECT HEX(_binary X'FEDC' ^ X'1111');\n        -> 'EFCD'"], "Category": ["Built-In Functions and Operators", "Bit Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "AND, &&", "Description": ["\nAND,\n            &&\n", "\n            Logical AND. Evaluates to 1 if all\n            operands are nonzero and not NULL, to\n            0 if one or more operands are\n            0, otherwise NULL is\n            returned.\n          ", "Press CTRL+C to copy mysql> SELECT 1 AND 1;\n        -> 1\nmysql> SELECT 1 AND 0;\n        -> 0\nmysql> SELECT 1 AND NULL;\n        -> NULL\nmysql> SELECT 0 AND NULL;\n        -> 0\nmysql> SELECT NULL AND 0;\n        -> 0", "\n            The &&,\n            operator is a nonstandard MySQL extension. As of MySQL\n            8.0.17, this operator is deprecated; expect support for it\n            to be removed in a future version of MySQL. Applications\n            should be adjusted to use the standard SQL\n            AND operator.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/logical-operators.html#operator_and", "Feature": ["AND", "&&"], "Examples": ["mysql> SELECT 1 AND 1;\n        -> 1\nmysql> SELECT 1 AND 0;\n        -> 0\nmysql> SELECT 1 AND NULL;\n        -> NULL\nmysql> SELECT 0 AND NULL;\n        -> 0\nmysql> SELECT NULL AND 0;\n        -> 0"], "Category": ["Built-In Functions and Operators", "Logical Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "BETWEEN ... AND ...", "Description": ["\nexpr\n            BETWEEN min AND\n            max\n", "\n            If expr is greater than or equal\n            to min and\n            expr is less than or equal to\n            max,\n            BETWEEN returns\n            1, otherwise it returns\n            0. This is equivalent to the expression\n            (min <=\n            expr AND\n            expr <=\n            max) if all the\n            arguments are of the same type. Otherwise type conversion\n            takes place according to the rules described in\n            Section\u00a014.3, \u201cType Conversion in Expression Evaluation\u201d, but applied to all the\n            three arguments.\n          ", "Press CTRL+C to copy mysql> SELECT 2 BETWEEN 1 AND 3, 2 BETWEEN 3 and 1;\n        -> 1, 0\nmysql> SELECT 1 BETWEEN 2 AND 3;\n        -> 0\nmysql> SELECT 'b' BETWEEN 'a' AND 'c';\n        -> 1\nmysql> SELECT 2 BETWEEN 2 AND '3';\n        -> 1\nmysql> SELECT 2 BETWEEN 2 AND 'x-3';\n        -> 0", "\n            For best results when using\n            BETWEEN with date or time\n            values, use CAST() to\n            explicitly convert the values to the desired data type.\n            Examples: If you compare a\n            DATETIME to two\n            DATE values, convert the\n            DATE values to\n            DATETIME values. If you use a\n            string constant such as '2001-1-1' in a\n            comparison to a DATE, cast\n            the string to a DATE.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html#operator_between", "Feature": ["expr\n            BETWEEN min AND\n            max"], "Examples": ["mysql> SELECT 2 BETWEEN 1 AND 3, 2 BETWEEN 3 and 1;\n        -> 1, 0\nmysql> SELECT 1 BETWEEN 2 AND 3;\n        -> 0\nmysql> SELECT 'b' BETWEEN 'a' AND 'c';\n        -> 1\nmysql> SELECT 2 BETWEEN 2 AND '3';\n        -> 1\nmysql> SELECT 2 BETWEEN 2 AND 'x-3';\n        -> 0"], "Category": ["Built-In Functions and Operators", "Comparison Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "BINARY", "Description": ["\nBINARY\nexpr\n", "\n            The BINARY operator converts\n            the expression to a binary string (a string that has the\n            binary character set and\n            binary collation). A common use for\n            BINARY is to force a character\n            string comparison to be done byte by byte using numeric byte\n            values rather than character by character. The\n            BINARY operator also causes\n            trailing spaces in comparisons to be significant. For\n            information about the differences between the\n            binary collation of the\n            binary character set and the\n            _bin collations of nonbinary character\n            sets, see Section\u00a012.8.5, \u201cThe binary Collation Compared to _bin Collations\u201d.\n          ", "\n            The BINARY operator is deprecated as of\n            MySQL 8.0.27, and you should expect its removal in a future\n            version of MySQL. Use CAST(... AS\n            BINARY) instead.\n          ", "Press CTRL+C to copy mysql> SET NAMES utf8mb4 COLLATE utf8mb4_general_ci;\n        -> OK\nmysql> SELECT 'a' = 'A';\n        -> 1\nmysql> SELECT BINARY 'a' = 'A';\n        -> 0\nmysql> SELECT 'a' = 'a ';\n        -> 1\nmysql> SELECT BINARY 'a' = 'a ';\n        -> 0", "\n            In a comparison, BINARY affects\n            the entire operation; it can be given before either operand\n            with the same result.\n          ", "\n            To convert a string expression to a binary string, these\n            constructs are equivalent:\n          ", "Press CTRL+C to copy CONVERT(expr USING BINARY)\nCAST(expr AS BINARY)\nBINARY expr", "\n            If a value is a string literal, it can be designated as a\n            binary string without converting it by using the\n            _binary character set introducer:\n          ", "Press CTRL+C to copy mysql> SELECT 'a' = 'A';\n        -> 1\nmysql> SELECT _binary 'a' = 'A';\n        -> 0", "\n            For information about introducers, see\n            Section\u00a012.3.8, \u201cCharacter Set Introducers\u201d.\n          ", "\n            The BINARY operator in\n            expressions differs in effect from the\n            BINARY attribute in character column\n            definitions. For a character column defined with the\n            BINARY attribute, MySQL assigns the table\n            default character set and the binary\n            (_bin) collation of that character set.\n            Every nonbinary character set has a _bin\n            collation. For example, if the table default character set\n            is utf8mb4, these two column definitions\n            are equivalent:\n          ", "Press CTRL+C to copy CHAR(10) BINARY\nCHAR(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin", "\n            The use of CHARACTER SET binary in the\n            definition of a CHAR,\n            VARCHAR, or\n            TEXT column causes the column\n            to be treated as the corresponding binary string data type.\n            For example, the following pairs of definitions are\n            equivalent:\n          ", "Press CTRL+C to copy CHAR(10) CHARACTER SET binary\nBINARY(10)\n\nVARCHAR(10) CHARACTER SET binary\nVARBINARY(10)\n\nTEXT CHARACTER SET binary\nBLOB", "\n            If BINARY is invoked from\n            within the mysql client, binary strings\n            display using hexadecimal notation, depending on the value\n            of the --binary-as-hex. For\n            more information about that option, see\n            Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/cast-functions.html#operator_binary", "Feature": ["BINARY"], "Examples": ["mysql> SET NAMES utf8mb4 COLLATE utf8mb4_general_ci;\n        -> OK\nmysql> SELECT 'a' = 'A';\n        -> 1\nmysql> SELECT BINARY 'a' = 'A';\n        -> 0\nmysql> SELECT 'a' = 'a ';\n        -> 1\nmysql> SELECT BINARY 'a' = 'a ';\n        -> 0", "mysql> SELECT 'a' = 'A';\n        -> 1\nmysql> SELECT _binary 'a' = 'A';\n        -> 0"], "Category": ["Built-In Functions and Operators", "Cast Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "CASE", "Description": ["\nCASE\n          value WHEN\n          compare_value THEN\n          result [WHEN\n          compare_value THEN\n          result ...] [ELSE\n          result] END\n", "\nCASE WHEN\n          condition THEN\n          result [WHEN\n          condition THEN\n          result ...] [ELSE\n          result] END\n", "\n          The first CASE syntax returns the\n          result for the first\n          value=compare_value\n          comparison that is true. The second syntax returns the result\n          for the first condition that is true. If no comparison or\n          condition is true, the result after ELSE is\n          returned, or NULL if there is no\n          ELSE part.\n", "\n\nNote\n\n\n            The syntax of the CASE\noperator described here differs\n            slightly from that of the SQL\n            CASE\nstatement described in\n            Section\u00a015.6.5.1, \u201cCASE Statement\u201d, for use inside stored programs. The\n            CASE statement cannot have an\n            ELSE NULL clause, and it is terminated\n            with END CASE instead of\n            END.\n\n", "\n          The return type of a CASE\n          expression result is the aggregated type of all result values:\n", "\n\n              If all types are numeric, the aggregated type is also\n              numeric:\n\n\n\n                  If at least one argument is double precision, the\n                  result is double precision.\n                \n                  Otherwise, if at least one argument is\n                  DECIMAL, the result is\n                  DECIMAL.\n                \n                  Otherwise, the result is an integer type (with one\n                  exception):\n\n\n\n                      If all integer types are all signed or all\n                      unsigned, the result is the same sign and the\n                      precision is the highest of all specified integer\n                      types (that is,\n                      TINYINT,\n                      SMALLINT,\n                      MEDIUMINT,\n                      INT, or\n                      BIGINT).\n                    \n                      If there is a combination of signed and unsigned\n                      integer types, the result is signed and the\n                      precision may be higher. For example, if the types\n                      are signed INT and\n                      unsigned INT, the\n                      result is signed\n                      BIGINT.\n                    \n                      The exception is unsigned\n                      BIGINT combined\n                      with any signed integer type. The result is\n                      DECIMAL with\n                      sufficient precision and scale 0.\n\n\n\n\n\n              If all types are BIT, the\n              result is BIT. Otherwise,\n              BIT arguments are treated\n              similar to BIGINT.\n            \n              If all types are YEAR, the\n              result is YEAR. Otherwise,\n              YEAR arguments are treated similar to\n              INT.\n            \n              If all types are character string\n              (CHAR or\n              VARCHAR), the result is\n              VARCHAR with maximum length\n              determined by the longest character length of the\n              operands.\n            \n              If all types are character or binary string, the result is\n              VARBINARY.\n            \nSET and\n              ENUM are treated similar to\n              VARCHAR; the result is\n              VARCHAR.\n            \n              If all types are JSON, the\n              result is JSON.\n            \n              If all types are temporal, the result is temporal:\n\n\n\n                  If all temporal types are\n                  DATE,\n                  TIME, or\n                  TIMESTAMP, the result\n                  is DATE,\n                  TIME, or\n                  TIMESTAMP,\n                  respectively.\n                \n                  Otherwise, for a mix of temporal types, the result is\n                  DATETIME.\n\n\n\n              If all types are GEOMETRY, the result\n              is GEOMETRY.\n            \n              If any type is BLOB, the\n              result is BLOB.\n            \n              For all other type combinations, the result is\n              VARCHAR.\n            \n              Literal NULL operands are ignored for\n              type aggregation.\n\n", "Press CTRL+C to copy mysql> SELECT CASE 1 WHEN 1 THEN 'one'\n    ->     WHEN 2 THEN 'two' ELSE 'more' END;\n        -> 'one'\nmysql> SELECT CASE WHEN 1>0 THEN 'true' ELSE 'false' END;\n        -> 'true'\nmysql> SELECT CASE BINARY 'B'\n    ->     WHEN 'a' THEN 1 WHEN 'b' THEN 2 END;\n        -> NULL"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/flow-control-functions.html#operator_case", "Feature": ["CASE\n          value WHEN\n          compare_value THEN\n          result [WHEN\n          compare_value THEN\n          result ...] [ELSE\n          result] END"], "Examples": ["mysql> SELECT CASE 1 WHEN 1 THEN 'one'\n    ->     WHEN 2 THEN 'two' ELSE 'more' END;\n        -> 'one'\nmysql> SELECT CASE WHEN 1>0 THEN 'true' ELSE 'false' END;\n        -> 'true'\nmysql> SELECT CASE BINARY 'B'\n    ->     WHEN 'a' THEN 1 WHEN 'b' THEN 2 END;\n        -> NULL"], "Category": ["Built-In Functions and Operators", "Flow Control Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "DIV", "Description": ["\nDIV\n", "\n            Integer division. Discards from the division result any\n            fractional part to the right of the decimal point.\n          ", "\n            If either operand has a noninteger type, the operands are\n            converted to DECIMAL and\n            divided using DECIMAL\n            arithmetic before converting the result to\n            BIGINT. If the result exceeds\n            BIGINT range, an error occurs.\n          ", "Press CTRL+C to copy mysql> SELECT 5 DIV 2, -5 DIV 2, 5 DIV -2, -5 DIV -2;\n        -> 2, -2, -2, 2"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/arithmetic-functions.html#operator_div", "Feature": ["DIV"], "Examples": ["mysql> SELECT 5 DIV 2, -5 DIV 2, 5 DIV -2, -5 DIV -2;\n        -> 2, -2, -2, 2"], "Category": ["Built-In Functions and Operators", "Arithmetic Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "IS", "Description": ["\nIS\n            boolean_value\n", "\n            Tests a value against a boolean value, where\n            boolean_value can be\n            TRUE, FALSE, or\n            UNKNOWN.\n          ", "Press CTRL+C to copy mysql> SELECT 1 IS TRUE, 0 IS FALSE, NULL IS UNKNOWN;\n        -> 1, 1, 1"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html#operator_is", "Feature": ["IS\n            boolean_value"], "Examples": ["mysql> SELECT 1 IS TRUE, 0 IS FALSE, NULL IS UNKNOWN;\n        -> 1, 1, 1"], "Category": ["Built-In Functions and Operators", "Comparison Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "IS NOT", "Description": ["\nIS NOT\n            boolean_value\n", "\n            Tests a value against a boolean value, where\n            boolean_value can be\n            TRUE, FALSE, or\n            UNKNOWN.\n          ", "Press CTRL+C to copy mysql> SELECT 1 IS NOT UNKNOWN, 0 IS NOT UNKNOWN, NULL IS NOT UNKNOWN;\n        -> 1, 1, 0"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html#operator_is-not", "Feature": ["IS NOT\n            boolean_value"], "Examples": ["mysql> SELECT 1 IS NOT UNKNOWN, 0 IS NOT UNKNOWN, NULL IS NOT UNKNOWN;\n        -> 1, 1, 0"], "Category": ["Built-In Functions and Operators", "Comparison Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "IS NOT NULL", "Description": ["\nIS NOT NULL\n", "\n            Tests whether a value is not NULL.\n          ", "Press CTRL+C to copy mysql> SELECT 1 IS NOT NULL, 0 IS NOT NULL, NULL IS NOT NULL;\n        -> 1, 1, 0"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html#operator_is-not-null", "Feature": ["IS NOT NULL"], "Examples": ["mysql> SELECT 1 IS NOT NULL, 0 IS NOT NULL, NULL IS NOT NULL;\n        -> 1, 1, 0"], "Category": ["Built-In Functions and Operators", "Comparison Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "IS NULL", "Description": ["\nIS NULL\n", "\n            Tests whether a value is NULL.\n          ", "Press CTRL+C to copy mysql> SELECT 1 IS NULL, 0 IS NULL, NULL IS NULL;\n        -> 0, 0, 1", "\n            To work well with ODBC programs, MySQL supports the\n            following extra features when using IS\n            NULL:\n", "\n\n                If sql_auto_is_null\n                variable is set to 1, then after a statement that\n                successfully inserts an automatically generated\n                AUTO_INCREMENT value, you can find\n                that value by issuing a statement of the following form:\n              Press CTRL+C to copy SELECT * FROM tbl_name WHERE auto_col IS NULL\n                If the statement returns a row, the value returned is\n                the same as if you invoked the\n                LAST_INSERT_ID()\n                function. For details, including the return value after\n                a multiple-row insert, see\n                Section\u00a014.15, \u201cInformation Functions\u201d. If no\n                AUTO_INCREMENT value was successfully\n                inserted, the SELECT\n                statement returns no row.\n              \n                The behavior of retrieving an\n                AUTO_INCREMENT value by using an\n                IS NULL comparison can be\n                disabled by setting\n                sql_auto_is_null = 0.\n                See Section\u00a07.1.8, \u201cServer System Variables\u201d.\n              \n                The default value of\n                sql_auto_is_null is 0.\n              \n                For DATE and\n                DATETIME columns that are\n                declared as NOT NULL, you can find\n                the special date '0000-00-00' by\n                using a statement like this:\n              Press CTRL+C to copy SELECT * FROM tbl_name WHERE date_column IS NULL\n                This is needed to get some ODBC applications to work\n                because ODBC does not support a\n                '0000-00-00' date value.\n              \n                See\n                Obtaining Auto-Increment Values,\n                and the description for the\n                FLAG_AUTO_IS_NULL option at\n                Connector/ODBC Connection Parameters.\n\n"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html#operator_is-null", "Feature": ["IS NULL"], "Examples": ["mysql> SELECT 1 IS NULL, 0 IS NULL, NULL IS NULL;\n        -> 0, 0, 1"], "Category": ["Built-In Functions and Operators", "Comparison Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": ">=", "Description": ["\n>=\n", "\n            Greater than or equal:\n          ", "Press CTRL+C to copy mysql> SELECT 2 >= 2;\n        -> 1", "\n            For row comparisons, (a, b) >= (x, y)\n            is equivalent to:\n          ", "Press CTRL+C to copy (a > x) OR ((a = x) AND (b >= y))"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html#operator_greater-than-or-equal", "Feature": [">="], "Examples": ["mysql> SELECT 2 >= 2;\n        -> 1"], "Category": ["Built-In Functions and Operators", "Comparison Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "LAST_DAY", "Description": ["\nLAST_DAY(date)\n", "\n          Takes a date or datetime value and returns the corresponding\n          value for the last day of the month. Returns\n          NULL if the argument is invalid or\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT LAST_DAY('2003-02-05');\n        -> '2003-02-28'\nmysql> SELECT LAST_DAY('2004-02-05');\n        -> '2004-02-29'\nmysql> SELECT LAST_DAY('2004-01-01 01:01:01');\n        -> '2004-01-31'\nmysql> SELECT LAST_DAY('2003-03-32');\n        -> NULL"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_last-day", "Feature": ["LAST_DAY(date)"], "Examples": ["mysql> SELECT LAST_DAY('2003-02-05');\n        -> '2003-02-28'\nmysql> SELECT LAST_DAY('2004-02-05');\n        -> '2004-02-29'\nmysql> SELECT LAST_DAY('2004-01-01 01:01:01');\n        -> '2004-01-31'\nmysql> SELECT LAST_DAY('2003-03-32');\n        -> NULL"], "Category": ["Built-In Functions and Operators", "Date and Time Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "LIKE", "Description": ["\nexpr\n            LIKE pat [ESCAPE\n            'escape_char']\n", "\n            Pattern matching using an SQL pattern. Returns\n            1 (TRUE) or\n            0 (FALSE). If either\n            expr or\n            pat is NULL,\n            the result is NULL.\n          ", "\n            The pattern need not be a literal string. For example, it\n            can be specified as a string expression or table column. In\n            the latter case, the column must be defined as one of the\n            MySQL string types (see Section\u00a013.3, \u201cString Data Types\u201d).\n          ", "\n            Per the SQL standard, LIKE\n            performs matching on a per-character basis, thus it can\n            produce results different from the\n            = comparison\n            operator:\n          ", "Press CTRL+C to copy mysql> SELECT '\u00e4' LIKE 'ae' COLLATE latin1_german2_ci;\n+-----------------------------------------+\n| '\u00e4' LIKE 'ae' COLLATE latin1_german2_ci |\n+-----------------------------------------+\n|                                       0 |\n+-----------------------------------------+\nmysql> SELECT '\u00e4' = 'ae' COLLATE latin1_german2_ci;\n+--------------------------------------+\n| '\u00e4' = 'ae' COLLATE latin1_german2_ci |\n+--------------------------------------+\n|                                    1 |\n+--------------------------------------+", "\n            In particular, trailing spaces are always significant. This\n            differs from comparisons performed with the\n            = operator,\n            for which the significance of trailing spaces in nonbinary\n            strings (CHAR,\n            VARCHAR, and TEXT\n            values) depends on the pad attribute of the collation used\n            for the comparison. For more information, see\n            Trailing Space Handling in Comparisons.\n          ", "\n            With LIKE you can use the\n            following two wildcard characters in the pattern:\n", "\n\n% matches any number of characters,\n                even zero characters.\n              \n_ matches exactly one character.\n\n", "Press CTRL+C to copy mysql> SELECT 'David!' LIKE 'David_';\n        -> 1\nmysql> SELECT 'David!' LIKE '%D%v%';\n        -> 1", "\n            To test for literal instances of a wildcard character,\n            precede it by the escape character. If you do not specify\n            the ESCAPE character,\n            \\ is assumed, unless the\n            NO_BACKSLASH_ESCAPES SQL\n            mode is enabled. In that case, no escape character is used.\n", "\n\n\\% matches one %\n                character.\n              \n\\_ matches one _\n                character.\n\n", "Press CTRL+C to copy mysql> SELECT 'David!' LIKE 'David\\_';\n        -> 0\nmysql> SELECT 'David_' LIKE 'David\\_';\n        -> 1", "\n            To specify a different escape character, use the\n            ESCAPE clause:\n          ", "Press CTRL+C to copy mysql> SELECT 'David_' LIKE 'David|_' ESCAPE '|';\n        -> 1", "\n            The escape sequence should be one character long to specify\n            the escape character, or empty to specify that no escape\n            character is used. The expression must evaluate as a\n            constant at execution time. If the\n            NO_BACKSLASH_ESCAPES SQL\n            mode is enabled, the sequence cannot be empty.\n          ", "\n            The following statements illustrate that string comparisons\n            are not case-sensitive unless one of the operands is\n            case-sensitive (uses a case-sensitive collation or is a\n            binary string):\n          ", "Press CTRL+C to copy mysql> SELECT 'abc' LIKE 'ABC';\n        -> 1\nmysql> SELECT 'abc' LIKE _utf8mb4 'ABC' COLLATE utf8mb4_0900_as_cs;\n        -> 0\nmysql> SELECT 'abc' LIKE _utf8mb4 'ABC' COLLATE utf8mb4_bin;\n        -> 0\nmysql> SELECT 'abc' LIKE BINARY 'ABC';\n        -> 0", "\n            As an extension to standard SQL, MySQL permits\n            LIKE on numeric expressions.\n          ", "Press CTRL+C to copy mysql> SELECT 10 LIKE '1%';\n        -> 1", "\n            MySQL attempts in such cases to perform implicit conversion\n            of the expression to a string. See\n            Section\u00a014.3, \u201cType Conversion in Expression Evaluation\u201d.\n", "\n\nNote\n\n\n              MySQL uses C escape syntax in strings (for example,\n              \\n to represent the newline character).\n              If you want a LIKE string to\n              contain a literal \\, you must double\n              it. (Unless the\n              NO_BACKSLASH_ESCAPES SQL\n              mode is enabled, in which case no escape character is\n              used.) For example, to search for \\n,\n              specify it as \\\\n. To search for\n              \\, specify it as\n              \\\\\\\\; this is because the backslashes\n              are stripped once by the parser and again when the pattern\n              match is made, leaving a single backslash to be matched\n              against.\n            \n              Exception: At the end of the pattern string, backslash can\n              be specified as \\\\. At the end of the\n              string, backslash stands for itself because there is\n              nothing following to escape. Suppose that a table contains\n              the following values:\n            Press CTRL+C to copy mysql> SELECT filename FROM t1;\n+--------------+\n| filename     |\n+--------------+\n| C:           |\n| C:\\          |\n| C:\\Programs  |\n| C:\\Programs\\ |\n+--------------+\n              To test for values that end with backslash, you can match\n              the values using either of the following patterns:\n            Press CTRL+C to copy mysql> SELECT filename, filename LIKE '%\\\\' FROM t1;\n+--------------+---------------------+\n| filename     | filename LIKE '%\\\\' |\n+--------------+---------------------+\n| C:           |                   0 |\n| C:\\          |                   1 |\n| C:\\Programs  |                   0 |\n| C:\\Programs\\ |                   1 |\n+--------------+---------------------+\n\nmysql> SELECT filename, filename LIKE '%\\\\\\\\' FROM t1;\n+--------------+-----------------------+\n| filename     | filename LIKE '%\\\\\\\\' |\n+--------------+-----------------------+\n| C:           |                     0 |\n| C:\\          |                     1 |\n| C:\\Programs  |                     0 |\n| C:\\Programs\\ |                     1 |\n+--------------+-----------------------+\n"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-comparison-functions.html#operator_like", "Feature": ["expr\n            LIKE pat [ESCAPE\n            'escape_char']"], "Examples": ["mysql> SELECT '\u00e4' LIKE 'ae' COLLATE latin1_german2_ci;\n+-----------------------------------------+\n| '\u00e4' LIKE 'ae' COLLATE latin1_german2_ci |\n+-----------------------------------------+\n|                                       0 |\n+-----------------------------------------+\nmysql> SELECT '\u00e4' = 'ae' COLLATE latin1_german2_ci;\n+--------------------------------------+\n| '\u00e4' = 'ae' COLLATE latin1_german2_ci |\n+--------------------------------------+\n|                                    1 |\n+--------------------------------------+", "mysql> SELECT 'David!' LIKE 'David_';\n        -> 1\nmysql> SELECT 'David!' LIKE '%D%v%';\n        -> 1", "mysql> SELECT 'David!' LIKE 'David\\_';\n        -> 0\nmysql> SELECT 'David_' LIKE 'David\\_';\n        -> 1", "mysql> SELECT 'David_' LIKE 'David|_' ESCAPE '|';\n        -> 1", "mysql> SELECT 'abc' LIKE 'ABC';\n        -> 1\nmysql> SELECT 'abc' LIKE _utf8mb4 'ABC' COLLATE utf8mb4_0900_as_cs;\n        -> 0\nmysql> SELECT 'abc' LIKE _utf8mb4 'ABC' COLLATE utf8mb4_bin;\n        -> 0\nmysql> SELECT 'abc' LIKE BINARY 'ABC';\n        -> 0", "mysql> SELECT 10 LIKE '1%';\n        -> 1", "mysql> SELECT filename FROM t1;\n+--------------+\n| filename     |\n+--------------+\n| C:           |\n| C:\\          |\n| C:\\Programs  |\n| C:\\Programs\\ |\n+--------------+", "mysql> SELECT filename, filename LIKE '%\\\\' FROM t1;\n+--------------+---------------------+\n| filename     | filename LIKE '%\\\\' |\n+--------------+---------------------+\n| C:           |                   0 |\n| C:\\          |                   1 |\n| C:\\Programs  |                   0 |\n| C:\\Programs\\ |                   1 |\n+--------------+---------------------+\n\nmysql> SELECT filename, filename LIKE '%\\\\\\\\' FROM t1;\n+--------------+-----------------------+\n| filename     | filename LIKE '%\\\\\\\\' |\n+--------------+-----------------------+\n| C:           |                     0 |\n| C:\\          |                     1 |\n| C:\\Programs  |                     0 |\n| C:\\Programs\\ |                     1 |\n+--------------+-----------------------+"], "Category": ["Built-In Functions and Operators", "Comparison Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "NOT, !", "Description": ["\nNOT,\n            !\n", "\n            Logical NOT. Evaluates to 1 if the\n            operand is 0, to 0 if\n            the operand is nonzero, and NOT NULL\n            returns NULL.\n          ", "Press CTRL+C to copy mysql> SELECT NOT 10;\n        -> 0\nmysql> SELECT NOT 0;\n        -> 1\nmysql> SELECT NOT NULL;\n        -> NULL\nmysql> SELECT ! (1+1);\n        -> 0\nmysql> SELECT ! 1+1;\n        -> 1", "\n            The last example produces 1 because the\n            expression evaluates the same way as\n            (!1)+1.\n          ", "\n            The !, operator\n            is a nonstandard MySQL extension. As of MySQL 8.0.17, this\n            operator is deprecated; expect it to be removed in a future\n            version of MySQL. Applications should be adjusted to use the\n            standard SQL NOT operator.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/logical-operators.html#operator_not", "Feature": ["NOT", "!"], "Examples": ["mysql> SELECT NOT 10;\n        -> 0\nmysql> SELECT NOT 0;\n        -> 1\nmysql> SELECT NOT NULL;\n        -> NULL\nmysql> SELECT ! (1+1);\n        -> 0\nmysql> SELECT ! 1+1;\n        -> 1"], "Category": ["Built-In Functions and Operators", "Logical Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "NOT BETWEEN ... AND ...", "Description": ["\nexpr\n            NOT BETWEEN min AND\n            max\n", "\n            This is the same as NOT\n            (expr BETWEEN\n            min AND\n            max).\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html#operator_not-between", "Feature": ["expr\n            NOT BETWEEN min AND\n            max"], "Examples": [], "Category": ["Built-In Functions and Operators", "Comparison Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "NOT LIKE", "Description": ["\nexpr\n            NOT LIKE pat [ESCAPE\n            'escape_char']\n", "\n            This is the same as NOT\n            (expr LIKE\n            pat [ESCAPE\n            'escape_char']).\n", "\n\nNote\n\n\n              Aggregate queries involving NOT\n              LIKE comparisons with columns containing\n              NULL may yield unexpected results. For\n              example, consider the following table and data:\n            Press CTRL+C to copy CREATE TABLE foo (bar VARCHAR(10));\n\nINSERT INTO foo VALUES (NULL), (NULL);\n              The query SELECT COUNT(*) FROM foo WHERE bar LIKE\n              '%baz%'; returns 0. You might\n              assume that SELECT COUNT(*) FROM foo WHERE bar\n              NOT LIKE '%baz%'; would return\n              2. However, this is not the case: The\n              second query returns 0. This is because\n              NULL NOT LIKE\n              expr always returns\n              NULL, regardless of the value of\n              expr. The same is true for\n              aggregate queries involving NULL and\n              comparisons using\n              NOT\n              RLIKE or NOT\n              REGEXP. In such cases, you must test explicitly\n              for NOT NULL using\n              OR (and not\n              AND), as shown here:\n            Press CTRL+C to copy SELECT COUNT(*) FROM foo WHERE bar NOT LIKE '%baz%' OR bar IS NULL;\n"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-comparison-functions.html#operator_not-like", "Feature": ["expr\n            NOT LIKE pat [ESCAPE\n            'escape_char']"], "Examples": ["CREATE TABLE foo (bar VARCHAR(10));\n\nINSERT INTO foo VALUES (NULL), (NULL);", "SELECT COUNT(*) FROM foo WHERE bar NOT LIKE '%baz%' OR bar IS NULL;"], "Category": ["Built-In Functions and Operators", "Comparison Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "NOT REGEXP", "Description": ["\nexpr\n              NOT REGEXP pat,\n              expr\n              NOT RLIKE pat\n", "\n              This is the same as NOT\n              (expr REGEXP\n              pat).\n            "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/regexp.html#operator_not-regexp", "Feature": ["expr\n              NOT REGEXP pat", "expr\n              NOT RLIKE pat"], "Examples": [], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "OR, ||", "Description": ["\nOR,\n            ||\n", "\n            Logical OR. When both operands are\n            non-NULL, the result is\n            1 if any operand is nonzero, and\n            0 otherwise. With a\n            NULL operand, the result is\n            1 if the other operand is nonzero, and\n            NULL otherwise. If both operands are\n            NULL, the result is\n            NULL.\n          ", "Press CTRL+C to copy mysql> SELECT 1 OR 1;\n        -> 1\nmysql> SELECT 1 OR 0;\n        -> 1\nmysql> SELECT 0 OR 0;\n        -> 0\nmysql> SELECT 0 OR NULL;\n        -> NULL\nmysql> SELECT 1 OR NULL;\n        -> 1", "\n\nNote\n\n\n              If the PIPES_AS_CONCAT\n              SQL mode is enabled,\n              || signifies\n              the SQL-standard string concatenation operator (like\n              CONCAT()).\n\n", "\n            The ||, operator\n            is a nonstandard MySQL extension. As of MySQL 8.0.17, this\n            operator is deprecated; expect support for it to be removed\n            in a future version of MySQL. Applications should be\n            adjusted to use the standard SQL\n            OR operator. Exception:\n            Deprecation does not apply if\n            PIPES_AS_CONCAT is enabled\n            because, in that case,\n            || signifies\n            string concatenation.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/logical-operators.html#operator_or", "Feature": ["OR", "||"], "Examples": ["mysql> SELECT 1 OR 1;\n        -> 1\nmysql> SELECT 1 OR 0;\n        -> 1\nmysql> SELECT 0 OR 0;\n        -> 0\nmysql> SELECT 0 OR NULL;\n        -> NULL\nmysql> SELECT 1 OR NULL;\n        -> 1"], "Category": ["Built-In Functions and Operators", "Logical Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "REGEXP", "Description": ["\nexpr\n              REGEXP pat,\n              expr\n              RLIKE pat\n", "\n              Returns 1 if the string expr\n              matches the regular expression specified by the pattern\n              pat, 0 otherwise. If\n              expr or\n              pat is NULL,\n              the return value is NULL.\n            ", "\nREGEXP and\n              RLIKE are\n              synonyms for REGEXP_LIKE().\n            ", "\n              For additional information about how matching occurs, see\n              the description for\n              REGEXP_LIKE().\n            ", "Press CTRL+C to copy mysql> SELECT 'Michael!' REGEXP '.*';\n+------------------------+\n| 'Michael!' REGEXP '.*' |\n+------------------------+\n|                      1 |\n+------------------------+\nmysql> SELECT 'new*\\n*line' REGEXP 'new\\\\*.\\\\*line';\n+---------------------------------------+\n| 'new*\\n*line' REGEXP 'new\\\\*.\\\\*line' |\n+---------------------------------------+\n|                                     0 |\n+---------------------------------------+\nmysql> SELECT 'a' REGEXP '^[a-d]';\n+---------------------+\n| 'a' REGEXP '^[a-d]' |\n+---------------------+\n|                   1 |\n+---------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/regexp.html#operator_regexp", "Feature": ["expr\n              REGEXP pat", "expr\n              RLIKE pat"], "Examples": ["mysql> SELECT 'Michael!' REGEXP '.*';\n+------------------------+\n| 'Michael!' REGEXP '.*' |\n+------------------------+\n|                      1 |\n+------------------------+\nmysql> SELECT 'new*\\n*line' REGEXP 'new\\\\*.\\\\*line';\n+---------------------------------------+\n| 'new*\\n*line' REGEXP 'new\\\\*.\\\\*line' |\n+---------------------------------------+\n|                                     0 |\n+---------------------------------------+\nmysql> SELECT 'a' REGEXP '^[a-d]';\n+---------------------+\n| 'a' REGEXP '^[a-d]' |\n+---------------------+\n|                   1 |\n+---------------------+"], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "SOUNDS LIKE", "Description": ["\nexpr1\n          SOUNDS LIKE expr2\n", "\n          This is the same as\n          SOUNDEX(expr1)\n          = SOUNDEX(expr2).\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#operator_sounds-like", "Feature": ["expr1\n          SOUNDS LIKE expr2"], "Examples": [], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "XOR", "Description": ["\nXOR\n", "\n            Logical XOR. Returns NULL if either\n            operand is NULL. For\n            non-NULL operands, evaluates to\n            1 if an odd number of operands is\n            nonzero, otherwise 0 is returned.\n          ", "Press CTRL+C to copy mysql> SELECT 1 XOR 1;\n        -> 0\nmysql> SELECT 1 XOR 0;\n        -> 1\nmysql> SELECT 1 XOR NULL;\n        -> NULL\nmysql> SELECT 1 XOR 1 XOR 1;\n        -> 1", "\na XOR b is mathematically equal to\n            (a AND (NOT b)) OR ((NOT a) and b).\n"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/logical-operators.html#operator_xor", "Feature": ["XOR"], "Examples": ["mysql> SELECT 1 XOR 1;\n        -> 0\nmysql> SELECT 1 XOR 0;\n        -> 1\nmysql> SELECT 1 XOR NULL;\n        -> NULL\nmysql> SELECT 1 XOR 1 XOR 1;\n        -> 1"], "Category": ["Built-In Functions and Operators", "Logical Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "<", "Description": ["\n<\n", "\n            Less than:\n          ", "Press CTRL+C to copy mysql> SELECT 2 < 2;\n        -> 0", "\n            For row comparisons, (a, b) < (x, y)\n            is equivalent to:\n          ", "Press CTRL+C to copy (a < x) OR ((a = x) AND (b < y))"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html#operator_less-than", "Feature": ["<"], "Examples": ["mysql> SELECT 2 < 2;\n        -> 0"], "Category": ["Built-In Functions and Operators", "Comparison Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "|", "Description": ["\n|\n", "\n          Bitwise OR.\n        ", "\n          The result type depends on whether the arguments are evaluated\n          as binary strings or numbers:\n", "\n\n              Binary-string evaluation occurs when the arguments have a\n              binary string type, and at least one of them is not a\n              hexadecimal literal, bit literal, or\n              NULL literal. Numeric evaluation occurs\n              otherwise, with argument conversion to unsigned 64-bit\n              integers as necessary.\n            \n              Binary-string evaluation produces a binary string of the\n              same length as the arguments. If the arguments have\n              unequal lengths, an\n              ER_INVALID_BITWISE_OPERANDS_SIZE\n              error occurs. Numeric evaluation produces an unsigned\n              64-bit integer.\n\n", "\n          For more information, see the introductory discussion in this\n          section.\n        ", "Press CTRL+C to copy mysql> SELECT 29 | 15;\n        -> 31\nmysql> SELECT _binary X'40404040' | X'01020304';\n        -> 'ABCD'", "\n          If bitwise OR is invoked from within the\n          mysql client, binary string results display\n          using hexadecimal notation, depending on the value of the\n          --binary-as-hex. For more\n          information about that option, see Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/bit-functions.html#operator_bitwise-or", "Feature": ["|"], "Examples": ["mysql> SELECT 29 | 15;\n        -> 31\nmysql> SELECT _binary X'40404040' | X'01020304';\n        -> 'ABCD'"], "Category": ["Built-In Functions and Operators", "Bit Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "~", "Description": ["\n~\n", "\n          Invert all bits.\n        ", "\n          The result type depends on whether the bit argument is\n          evaluated as a binary string or number:\n", "\n\n              Binary-string evaluation occurs when the bit argument has\n              a binary string type, and is not a hexadecimal literal,\n              bit literal, or NULL literal. Numeric\n              evaluation occurs otherwise, with argument conversion to\n              an unsigned 64-bit integer as necessary.\n            \n              Binary-string evaluation produces a binary string of the\n              same length as the bit argument. Numeric evaluation\n              produces an unsigned 64-bit integer.\n\n", "\n          For more information, see the introductory discussion in this\n          section.\n        ", "Press CTRL+C to copy mysql> SELECT 5 & ~1;\n        -> 4\nmysql> SELECT HEX(~X'0000FFFF1111EEEE');\n        -> 'FFFF0000EEEE1111'", "\n          If bitwise inversion is invoked from within the\n          mysql client, binary string results display\n          using hexadecimal notation, depending on the value of the\n          --binary-as-hex. For more\n          information about that option, see Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/bit-functions.html#operator_bitwise-invert", "Feature": ["~"], "Examples": ["mysql> SELECT 5 & ~1;\n        -> 4\nmysql> SELECT HEX(~X'0000FFFF1111EEEE');\n        -> 'FFFF0000EEEE1111'"], "Category": ["Built-In Functions and Operators", "Bit Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "<>, !=", "Description": ["\n<>,\n            !=\n", "\n            Not equal:\n          ", "Press CTRL+C to copy mysql> SELECT '.01' <> '0.01';\n        -> 1\nmysql> SELECT .01 <> '0.01';\n        -> 0\nmysql> SELECT 'zapp' <> 'zappp';\n        -> 1", "\n            For row comparisons, (a, b) <> (x,\n            y) and (a, b) != (x, y) are\n            equivalent to:\n          ", "Press CTRL+C to copy (a <> x) OR (b <> y)"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html#operator_not-equal", "Feature": ["<>", "!="], "Examples": ["mysql> SELECT '.01' <> '0.01';\n        -> 1\nmysql> SELECT .01 <> '0.01';\n        -> 0\nmysql> SELECT 'zapp' <> 'zappp';\n        -> 1"], "Category": ["Built-In Functions and Operators", "Comparison Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "<<", "Description": ["\n<<\n", "\n          Shifts a longlong (BIGINT)\n          number or binary string to the left.\n        ", "\n          The result type depends on whether the bit argument is\n          evaluated as a binary string or number:\n", "\n\n              Binary-string evaluation occurs when the bit argument has\n              a binary string type, and is not a hexadecimal literal,\n              bit literal, or NULL literal. Numeric\n              evaluation occurs otherwise, with argument conversion to\n              an unsigned 64-bit integer as necessary.\n            \n              Binary-string evaluation produces a binary string of the\n              same length as the bit argument. Numeric evaluation\n              produces an unsigned 64-bit integer.\n\n", "\n          Bits shifted off the end of the value are lost without\n          warning, regardless of the argument type. In particular, if\n          the shift count is greater or equal to the number of bits in\n          the bit argument, all bits in the result are 0.\n        ", "\n          For more information, see the introductory discussion in this\n          section.\n        ", "Press CTRL+C to copy mysql> SELECT 1 << 2;\n        -> 4\nmysql> SELECT HEX(_binary X'00FF00FF00FF' << 8);\n        -> 'FF00FF00FF00'", "\n          If a bit shift is invoked from within the\n          mysql client, binary string results display\n          using hexadecimal notation, depending on the value of the\n          --binary-as-hex. For more\n          information about that option, see Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/bit-functions.html#operator_left-shift", "Feature": ["<<"], "Examples": ["mysql> SELECT 1 << 2;\n        -> 4\nmysql> SELECT HEX(_binary X'00FF00FF00FF' << 8);\n        -> 'FF00FF00FF00'"], "Category": ["Built-In Functions and Operators", "Bit Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "<=", "Description": ["\n<=\n", "\n            Less than or equal:\n          ", "Press CTRL+C to copy mysql> SELECT 0.1 <= 2;\n        -> 1", "\n            For row comparisons, (a, b) <= (x, y)\n            is equivalent to:\n          ", "Press CTRL+C to copy (a < x) OR ((a = x) AND (b <= y))"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html#operator_less-than-or-equal", "Feature": ["<="], "Examples": ["mysql> SELECT 0.1 <= 2;\n        -> 1"], "Category": ["Built-In Functions and Operators", "Comparison Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "<=>", "Description": ["\n<=>\n", "\nNULL-safe equal. This operator performs\n            an equality comparison like the\n            = operator,\n            but returns 1 rather than\n            NULL if both operands are\n            NULL, and 0 rather\n            than NULL if one operand is\n            NULL.\n          ", "\n            The\n            <=>\n            operator is equivalent to the standard SQL IS NOT\n            DISTINCT FROM operator.\n          ", "Press CTRL+C to copy mysql> SELECT 1 <=> 1, NULL <=> NULL, 1 <=> NULL;\n        -> 1, 1, 0\nmysql> SELECT 1 = 1, NULL = NULL, 1 = NULL;\n        -> 1, NULL, NULL", "\n            For row comparisons, (a, b) <=> (x,\n            y) is equivalent to:\n          ", "Press CTRL+C to copy (a <=> x) AND (b <=> y)"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html#operator_equal-to", "Feature": ["<=>"], "Examples": ["mysql> SELECT 1 <=> 1, NULL <=> NULL, 1 <=> NULL;\n        -> 1, 1, 0\nmysql> SELECT 1 = 1, NULL = NULL, 1 = NULL;\n        -> 1, NULL, NULL"], "Category": ["Built-In Functions and Operators", "Comparison Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "%, MOD", "Description": ["\nN\n            % M,\n            N\n            MOD M\n", "\n            Modulo operation. Returns the remainder of\n            N divided by\n            M. For more information, see the\n            description for the MOD()\n            function in Section\u00a014.6.2, \u201cMathematical Functions\u201d.\n"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/arithmetic-functions.html#operator_mod", "Feature": ["N\n            % M", "N\n            MOD M"], "Examples": [], "Category": ["Built-In Functions and Operators", "Arithmetic Operators"]}
