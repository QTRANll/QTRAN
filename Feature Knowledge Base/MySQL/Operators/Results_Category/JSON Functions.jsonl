{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "->", "Description": ["\ncolumn->path\n", "\n          The\n          ->\n          operator serves as an alias for the\n          JSON_EXTRACT() function when\n          used with two arguments, a column identifier on the left and a\n          JSON path (a string literal) on the right that is evaluated\n          against the JSON document (the column value). You can use such\n          expressions in place of column references wherever they occur\n          in SQL statements.\n        ", "\n          The two SELECT statements shown\n          here produce the same output:\n        ", "Press CTRL+C to copy mysql> SELECT c, JSON_EXTRACT(c, \"$.id\"), g\n     > FROM jemp\n     > WHERE JSON_EXTRACT(c, \"$.id\") > 1\n     > ORDER BY JSON_EXTRACT(c, \"$.name\");\n+-------------------------------+-----------+------+\n| c                             | c->\"$.id\" | g    |\n+-------------------------------+-----------+------+\n| {\"id\": \"3\", \"name\": \"Barney\"} | \"3\"       |    3 |\n| {\"id\": \"4\", \"name\": \"Betty\"}  | \"4\"       |    4 |\n| {\"id\": \"2\", \"name\": \"Wilma\"}  | \"2\"       |    2 |\n+-------------------------------+-----------+------+\n3 rows in set (0.00 sec)\n\nmysql> SELECT c, c->\"$.id\", g\n     > FROM jemp\n     > WHERE c->\"$.id\" > 1\n     > ORDER BY c->\"$.name\";\n+-------------------------------+-----------+------+\n| c                             | c->\"$.id\" | g    |\n+-------------------------------+-----------+------+\n| {\"id\": \"3\", \"name\": \"Barney\"} | \"3\"       |    3 |\n| {\"id\": \"4\", \"name\": \"Betty\"}  | \"4\"       |    4 |\n| {\"id\": \"2\", \"name\": \"Wilma\"}  | \"2\"       |    2 |\n+-------------------------------+-----------+------+\n3 rows in set (0.00 sec)", "\n          This functionality is not limited to\n          SELECT, as shown here:\n        ", "Press CTRL+C to copy mysql> ALTER TABLE jemp ADD COLUMN n INT;\nQuery OK, 0 rows affected (0.68 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> UPDATE jemp SET n=1 WHERE c->\"$.id\" = \"4\";\nQuery OK, 1 row affected (0.04 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> SELECT c, c->\"$.id\", g, n\n     > FROM jemp\n     > WHERE JSON_EXTRACT(c, \"$.id\") > 1\n     > ORDER BY c->\"$.name\";\n+-------------------------------+-----------+------+------+\n| c                             | c->\"$.id\" | g    | n    |\n+-------------------------------+-----------+------+------+\n| {\"id\": \"3\", \"name\": \"Barney\"} | \"3\"       |    3 | NULL |\n| {\"id\": \"4\", \"name\": \"Betty\"}  | \"4\"       |    4 |    1 |\n| {\"id\": \"2\", \"name\": \"Wilma\"}  | \"2\"       |    2 | NULL |\n+-------------------------------+-----------+------+------+\n3 rows in set (0.00 sec)\n\nmysql> DELETE FROM jemp WHERE c->\"$.id\" = \"4\";\nQuery OK, 1 row affected (0.04 sec)\n\nmysql> SELECT c, c->\"$.id\", g, n\n     > FROM jemp\n     > WHERE JSON_EXTRACT(c, \"$.id\") > 1\n     > ORDER BY c->\"$.name\";\n+-------------------------------+-----------+------+------+\n| c                             | c->\"$.id\" | g    | n    |\n+-------------------------------+-----------+------+------+\n| {\"id\": \"3\", \"name\": \"Barney\"} | \"3\"       |    3 | NULL |\n| {\"id\": \"2\", \"name\": \"Wilma\"}  | \"2\"       |    2 | NULL |\n+-------------------------------+-----------+------+------+\n2 rows in set (0.00 sec)", "\n          (See Indexing a Generated Column to Provide a JSON Column Index, for the\n          statements used to create and populate the table just shown.)\n        ", "\n          This also works with JSON array values, as shown here:\n        ", "Press CTRL+C to copy mysql> CREATE TABLE tj10 (a JSON, b INT);\nQuery OK, 0 rows affected (0.26 sec)\n\nmysql> INSERT INTO tj10\n     > VALUES (\"[3,10,5,17,44]\", 33), (\"[3,10,5,17,[22,44,66]]\", 0);\nQuery OK, 1 row affected (0.04 sec)\n\nmysql> SELECT a->\"$[4]\" FROM tj10;\n+--------------+\n| a->\"$[4]\"    |\n+--------------+\n| 44           |\n| [22, 44, 66] |\n+--------------+\n2 rows in set (0.00 sec)\n\nmysql> SELECT * FROM tj10 WHERE a->\"$[0]\" = 3;\n+------------------------------+------+\n| a                            | b    |\n+------------------------------+------+\n| [3, 10, 5, 17, 44]           |   33 |\n| [3, 10, 5, 17, [22, 44, 66]] |    0 |\n+------------------------------+------+\n2 rows in set (0.00 sec)", "\n          Nested arrays are supported. An expression using\n          -> evaluates as NULL\n          if no matching key is found in the target JSON document, as\n          shown here:\n        ", "Press CTRL+C to copy mysql> SELECT * FROM tj10 WHERE a->\"$[4][1]\" IS NOT NULL;\n+------------------------------+------+\n| a                            | b    |\n+------------------------------+------+\n| [3, 10, 5, 17, [22, 44, 66]] |    0 |\n+------------------------------+------+\n\nmysql> SELECT a->\"$[4][1]\" FROM tj10;\n+--------------+\n| a->\"$[4][1]\" |\n+--------------+\n| NULL         |\n| 44           |\n+--------------+\n2 rows in set (0.00 sec)", "\n          This is the same behavior as seen in such cases when using\n          JSON_EXTRACT():\n        ", "Press CTRL+C to copy mysql> SELECT JSON_EXTRACT(a, \"$[4][1]\") FROM tj10;\n+----------------------------+\n| JSON_EXTRACT(a, \"$[4][1]\") |\n+----------------------------+\n| NULL                       |\n| 44                         |\n+----------------------------+\n2 rows in set (0.00 sec)"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/json-search-functions.html#operator_json-column-path", "Feature": ["column->path"], "Examples": ["mysql> SELECT c, JSON_EXTRACT(c, \"$.id\"), g\n     > FROM jemp\n     > WHERE JSON_EXTRACT(c, \"$.id\") > 1\n     > ORDER BY JSON_EXTRACT(c, \"$.name\");\n+-------------------------------+-----------+------+\n| c                             | c->\"$.id\" | g    |\n+-------------------------------+-----------+------+\n| {\"id\": \"3\", \"name\": \"Barney\"} | \"3\"       |    3 |\n| {\"id\": \"4\", \"name\": \"Betty\"}  | \"4\"       |    4 |\n| {\"id\": \"2\", \"name\": \"Wilma\"}  | \"2\"       |    2 |\n+-------------------------------+-----------+------+\n3 rows in set (0.00 sec)\n\nmysql> SELECT c, c->\"$.id\", g\n     > FROM jemp\n     > WHERE c->\"$.id\" > 1\n     > ORDER BY c->\"$.name\";\n+-------------------------------+-----------+------+\n| c                             | c->\"$.id\" | g    |\n+-------------------------------+-----------+------+\n| {\"id\": \"3\", \"name\": \"Barney\"} | \"3\"       |    3 |\n| {\"id\": \"4\", \"name\": \"Betty\"}  | \"4\"       |    4 |\n| {\"id\": \"2\", \"name\": \"Wilma\"}  | \"2\"       |    2 |\n+-------------------------------+-----------+------+\n3 rows in set (0.00 sec)", "mysql> ALTER TABLE jemp ADD COLUMN n INT;\nQuery OK, 0 rows affected (0.68 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> UPDATE jemp SET n=1 WHERE c->\"$.id\" = \"4\";\nQuery OK, 1 row affected (0.04 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> SELECT c, c->\"$.id\", g, n\n     > FROM jemp\n     > WHERE JSON_EXTRACT(c, \"$.id\") > 1\n     > ORDER BY c->\"$.name\";\n+-------------------------------+-----------+------+------+\n| c                             | c->\"$.id\" | g    | n    |\n+-------------------------------+-----------+------+------+\n| {\"id\": \"3\", \"name\": \"Barney\"} | \"3\"       |    3 | NULL |\n| {\"id\": \"4\", \"name\": \"Betty\"}  | \"4\"       |    4 |    1 |\n| {\"id\": \"2\", \"name\": \"Wilma\"}  | \"2\"       |    2 | NULL |\n+-------------------------------+-----------+------+------+\n3 rows in set (0.00 sec)\n\nmysql> DELETE FROM jemp WHERE c->\"$.id\" = \"4\";\nQuery OK, 1 row affected (0.04 sec)\n\nmysql> SELECT c, c->\"$.id\", g, n\n     > FROM jemp\n     > WHERE JSON_EXTRACT(c, \"$.id\") > 1\n     > ORDER BY c->\"$.name\";\n+-------------------------------+-----------+------+------+\n| c                             | c->\"$.id\" | g    | n    |\n+-------------------------------+-----------+------+------+\n| {\"id\": \"3\", \"name\": \"Barney\"} | \"3\"       |    3 | NULL |\n| {\"id\": \"2\", \"name\": \"Wilma\"}  | \"2\"       |    2 | NULL |\n+-------------------------------+-----------+------+------+\n2 rows in set (0.00 sec)", "mysql> CREATE TABLE tj10 (a JSON, b INT);\nQuery OK, 0 rows affected (0.26 sec)\n\nmysql> INSERT INTO tj10\n     > VALUES (\"[3,10,5,17,44]\", 33), (\"[3,10,5,17,[22,44,66]]\", 0);\nQuery OK, 1 row affected (0.04 sec)\n\nmysql> SELECT a->\"$[4]\" FROM tj10;\n+--------------+\n| a->\"$[4]\"    |\n+--------------+\n| 44           |\n| [22, 44, 66] |\n+--------------+\n2 rows in set (0.00 sec)\n\nmysql> SELECT * FROM tj10 WHERE a->\"$[0]\" = 3;\n+------------------------------+------+\n| a                            | b    |\n+------------------------------+------+\n| [3, 10, 5, 17, 44]           |   33 |\n| [3, 10, 5, 17, [22, 44, 66]] |    0 |\n+------------------------------+------+\n2 rows in set (0.00 sec)", "mysql> SELECT * FROM tj10 WHERE a->\"$[4][1]\" IS NOT NULL;\n+------------------------------+------+\n| a                            | b    |\n+------------------------------+------+\n| [3, 10, 5, 17, [22, 44, 66]] |    0 |\n+------------------------------+------+\n\nmysql> SELECT a->\"$[4][1]\" FROM tj10;\n+--------------+\n| a->\"$[4][1]\" |\n+--------------+\n| NULL         |\n| 44           |\n+--------------+\n2 rows in set (0.00 sec)", "mysql> SELECT JSON_EXTRACT(a, \"$[4][1]\") FROM tj10;\n+----------------------------+\n| JSON_EXTRACT(a, \"$[4][1]\") |\n+----------------------------+\n| NULL                       |\n| 44                         |\n+----------------------------+\n2 rows in set (0.00 sec)"], "Category": ["Built-In Functions and Operators", "JSON Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "->>", "Description": ["\ncolumn->>path\n", "\n          This is an improved, unquoting extraction operator. Whereas\n          the -> operator simply extracts a value,\n          the ->> operator in addition unquotes\n          the extracted result. In other words, given a\n          JSON column value\n          column and a path expression\n          path (a string literal), the\n          following three expressions return the same value:\n", "\n\nJSON_UNQUOTE(\nJSON_EXTRACT(column,\n              path) )\n\nJSON_UNQUOTE(column\n->\npath)\n\ncolumn->>path\n\n", "\n          The ->> operator can be used wherever\n          JSON_UNQUOTE(JSON_EXTRACT()) would be\n          allowed. This includes (but is not limited to)\n          SELECT lists, WHERE and\n          HAVING clauses, and ORDER\n          BY and GROUP BY clauses.\n        ", "\n          The next few statements demonstrate some\n          ->> operator equivalences with other\n          expressions in the mysql client:\n        ", "Press CTRL+C to copy mysql> SELECT * FROM jemp WHERE g > 2;\n+-------------------------------+------+\n| c                             | g    |\n+-------------------------------+------+\n| {\"id\": \"3\", \"name\": \"Barney\"} |    3 |\n| {\"id\": \"4\", \"name\": \"Betty\"}  |    4 |\n+-------------------------------+------+\n2 rows in set (0.01 sec)\n\nmysql> SELECT c->'$.name' AS name\n    ->     FROM jemp WHERE g > 2;\n+----------+\n| name     |\n+----------+\n| \"Barney\" |\n| \"Betty\"  |\n+----------+\n2 rows in set (0.00 sec)\n\nmysql> SELECT JSON_UNQUOTE(c->'$.name') AS name\n    ->     FROM jemp WHERE g > 2;\n+--------+\n| name   |\n+--------+\n| Barney |\n| Betty  |\n+--------+\n2 rows in set (0.00 sec)\n\nmysql> SELECT c->>'$.name' AS name\n    ->     FROM jemp WHERE g > 2;\n+--------+\n| name   |\n+--------+\n| Barney |\n| Betty  |\n+--------+\n2 rows in set (0.00 sec)", "\n          See Indexing a Generated Column to Provide a JSON Column Index, for the SQL\n          statements used to create and populate the\n          jemp table in the set of examples just\n          shown.\n        ", "\n          This operator can also be used with JSON arrays, as shown\n          here:\n        ", "Press CTRL+C to copy mysql> CREATE TABLE tj10 (a JSON, b INT);\nQuery OK, 0 rows affected (0.26 sec)\n\nmysql> INSERT INTO tj10 VALUES\n    ->     ('[3,10,5,\"x\",44]', 33),\n    ->     ('[3,10,5,17,[22,\"y\",66]]', 0);\nQuery OK, 2 rows affected (0.04 sec)\nRecords: 2  Duplicates: 0  Warnings: 0\n\nmysql> SELECT a->\"$[3]\", a->\"$[4][1]\" FROM tj10;\n+-----------+--------------+\n| a->\"$[3]\" | a->\"$[4][1]\" |\n+-----------+--------------+\n| \"x\"       | NULL         |\n| 17        | \"y\"          |\n+-----------+--------------+\n2 rows in set (0.00 sec)\n\nmysql> SELECT a->>\"$[3]\", a->>\"$[4][1]\" FROM tj10;\n+------------+---------------+\n| a->>\"$[3]\" | a->>\"$[4][1]\" |\n+------------+---------------+\n| x          | NULL          |\n| 17         | y             |\n+------------+---------------+\n2 rows in set (0.00 sec)", "\n          As with\n          ->,\n          the ->> operator is always expanded\n          in the output of EXPLAIN, as\n          the following example demonstrates:\n        ", "Press CTRL+C to copy mysql> EXPLAIN SELECT c->>'$.name' AS name\n    ->     FROM jemp WHERE g > 2\\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: jemp\n   partitions: NULL\n         type: range\npossible_keys: i\n          key: i\n      key_len: 5\n          ref: NULL\n         rows: 2\n     filtered: 100.00\n        Extra: Using where\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS\\G\n*************************** 1. row ***************************\n  Level: Note\n   Code: 1003\nMessage: /* select#1 */ select\njson_unquote(json_extract(`jtest`.`jemp`.`c`,'$.name')) AS `name` from\n`jtest`.`jemp` where (`jtest`.`jemp`.`g` > 2)\n1 row in set (0.00 sec)", "\n          This is similar to how MySQL expands the\n          ->\n          operator in the same circumstances.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/json-search-functions.html#operator_json-inline-path", "Feature": ["column->>path"], "Examples": ["mysql> SELECT * FROM jemp WHERE g > 2;\n+-------------------------------+------+\n| c                             | g    |\n+-------------------------------+------+\n| {\"id\": \"3\", \"name\": \"Barney\"} |    3 |\n| {\"id\": \"4\", \"name\": \"Betty\"}  |    4 |\n+-------------------------------+------+\n2 rows in set (0.01 sec)\n\nmysql> SELECT c->'$.name' AS name\n    ->     FROM jemp WHERE g > 2;\n+----------+\n| name     |\n+----------+\n| \"Barney\" |\n| \"Betty\"  |\n+----------+\n2 rows in set (0.00 sec)\n\nmysql> SELECT JSON_UNQUOTE(c->'$.name') AS name\n    ->     FROM jemp WHERE g > 2;\n+--------+\n| name   |\n+--------+\n| Barney |\n| Betty  |\n+--------+\n2 rows in set (0.00 sec)\n\nmysql> SELECT c->>'$.name' AS name\n    ->     FROM jemp WHERE g > 2;\n+--------+\n| name   |\n+--------+\n| Barney |\n| Betty  |\n+--------+\n2 rows in set (0.00 sec)", "mysql> CREATE TABLE tj10 (a JSON, b INT);\nQuery OK, 0 rows affected (0.26 sec)\n\nmysql> INSERT INTO tj10 VALUES\n    ->     ('[3,10,5,\"x\",44]', 33),\n    ->     ('[3,10,5,17,[22,\"y\",66]]', 0);\nQuery OK, 2 rows affected (0.04 sec)\nRecords: 2  Duplicates: 0  Warnings: 0\n\nmysql> SELECT a->\"$[3]\", a->\"$[4][1]\" FROM tj10;\n+-----------+--------------+\n| a->\"$[3]\" | a->\"$[4][1]\" |\n+-----------+--------------+\n| \"x\"       | NULL         |\n| 17        | \"y\"          |\n+-----------+--------------+\n2 rows in set (0.00 sec)\n\nmysql> SELECT a->>\"$[3]\", a->>\"$[4][1]\" FROM tj10;\n+------------+---------------+\n| a->>\"$[3]\" | a->>\"$[4][1]\" |\n+------------+---------------+\n| x          | NULL          |\n| 17         | y             |\n+------------+---------------+\n2 rows in set (0.00 sec)"], "Category": ["Built-In Functions and Operators", "JSON Functions"]}
